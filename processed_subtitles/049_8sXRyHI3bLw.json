{
  "text": "[Music]\nhey guys welcome to my practical web\ndevelopment guide for 2024 so believe it\nor not this is the eth or ninth year\nthat I've done this I think the first\none was back in 2016 or 2017 so it's\ncrazy how fast time goes by and I'm sure\nthat many of you or or most of you know\nwhat this is but for those that don't\nevery year I do this guide and I go\nthrough just about every web development\ntechnology that I can think of from\ntools to languages to Frameworks as well\nas some of the different routes that you\ncan take and and just offer some of my\nown personal advice to succeed in web\ndevelopment and I do this because it's\nextremely overwhelming just to learn\nwhat you need to learn because there's\nso many different things so I try to put\nit all in one place and put some things\ninto perspective and you can kind of\npick your path from there and I also\nhave a page on my website that has all\nthe content that I've created including\nYouTube videos and playlists as well as\npremium courses on a lot of the stuff\nthat we talk about in this guide and I\nput it in the same order as well so it's\neasy to follow and I'll have a link to\nthat in the description all right so a\ncouple of notes some things to keep in\nmind as you're watching or listening to\nthis video uh it is long so you may want\nto kind of put it on in the background\nwhile you're cleaning or exercising or\nwhatever it is you do and I'll have time\nstamps in the description so you can\njust jump around if you want to so first\noff you do not have to learn everything\nwe talk about in fact I'd say it's\nimpossible to learn everything that I\nmentioned in this guide even if your\nlife was extended 100 more years so look\nat it like a restaurant menu you can see\nwhat's available and then you pick and\nchoose what looks good to you so next\nthis is not a latest trends video I know\nthere's a lot of those types of videos\nout around this time of year I will\noutline some of the new technologies but\nthat's not what this video is about it's\nabout absolutely everything that I can\nthink of that you may have to learn as a\nweb developer and I don't care if it's\n20 years old or 20 days old if it's\nrelevant then I'll talk about it also if\nyou've watched past years you'll notice\nthat I don't really remove anything I\njust add to it so most of the stuff that\nwas in last year's video will still be\nin this year's video I just elaborate it\non a bit differently I don't even go\nback to previous years for reference\nlastly I always try to keep these pretty\nobjective however I do share my opinion\non some things I'll try to make it clear\nwhen I'm giving my opinion uh keep that\nin mind that neither myself or anyone\nelse has experience with every single\npiece of technology in this guide so\nsome of it is based on research and just\nwhat I've heard from others all right so\nbefore we talk about specific\nTechnologies I want to talk about some\nof the common roles and paths that web\ndevelopers choose and I think it's\nimportant because it will help you\ndecide what you want or what you need to\nlearn so the first one is one that I\nfeel like is overlooked a lot especially\nwhen it comes to like YouTube videos and\nso on typically they just talk about\nfront end backend full stack but a web\ndesigner is pretty typical uh pretty\ntypical path to take which is sort of\nlike a mix of development and design and\nthese are people that are more focused\non the front end but don't really build\ncomplex uis and applications they stick\nto you know static websites small\nbusiness websites things like that they\nmay use a CMS like WordPress um they're\nusually pretty good at design as well as\nHTML and CSS because a lot of times they\ngo solo in their Freelancers so they\nhave to build their projects from the\nground up and uh they typically have\nsome knowledge of programming you know\nbasic JavaScript Etc but usually not\nenough to build uh a complex full stack\napplication without using some kind of\nthird-party software so the they get\ninto kind of the business side of things\nSEO maybe some marketing things like\nthat so if that sounds interesting to\nyou then you might take this route next\nwe have what is I guess the most common\nrole that people start with and that's a\nfront-end developer so this is someone\nthat works on the client side of the web\nso they work on the user interface they\ncreate the interactions that a user has\nwith a website or web app now I will say\nthat the lines between front end and\nbackend are are getting more blurred\nevery day especially with Technologies\nlike nextjs where some of the page is\nrendered on the server and some of it's\nrendered on the client but for the most\npart front-end developers work on the\nclient side of the web um with the most\nimportant Technologies being HTML CSS\nand JavaScript in general um most of the\ntime they'll also move on to front-end\nFrameworks like react view angular and\nI'll talk more about those later next we\nhave a backend developer this is someone\nthat works on the server side so they\nwork with databases database ORS um\nthey're not focused on the user us\ninterface at all they're usually the\nones building the apis that the\nfront-end developers will consume and\nget data from the server now with the\nfront end your programming language is\nis typically going to be JavaScript but\non the back end you have you know dozens\nof languages to choose from you can use\nJavaScript of course with something like\nnode.js but you can also use Python PHP\nC and and many many more languages which\nwe'll talk about later then you have a\nfullstack developer who works on both\nthe front and back back end so you'll\nneed to know HTML CSS JavaScript but\nalso need to know a server side language\nor server side technology you'll work\nwith databases and ORS just like a\nbackend developer now in my experience\nit seems that most fullstack positions\nare more focused on either the front end\nor the back end but you still do need to\nknow both and again that line is is\ngetting more and more blurred and it\nseems that full stack is the most\npopular end goal for people it seems at\nat least from what I I see you know\nrunning a channel and and seeing a lot\nof developers and people that are coming\nup it seems like front end is where they\nwant to start but ultimately they want\nto be full stack developers now I'm\ngoing to throw a fifth role in there and\nthat's devops and this is someone that's\nresponsible for deployment and\nmaintenance of your application\nmaintenance of the servers um there you\nknow security scalability they do write\ncode but it's not the same as front end\nor backend development you're not\nbuilding the application you're building\nthe infrastructure that the application\nruns on and you'll typically need to\nknow Technologies like Docker and\nkubernetes you'll need to know about\ncertain hosting platforms like\nAWS um you might write bash scripts\nPython scripts need to know how to\nmanage a Linux server this isn't really\nmy wheelhouse but it may be something\nthat you're interested in and it's\nusually a separate role than uh a\nsoftware developer now for the rest of\nthis video when we talk about certain\nTechnologies or concepts I'm going to\nhave the typ types of developers that it\npertains to up in the leftand corner\nhere so you'll see something like this\nwith WD for web designer front end\nbackend full stack and devops and this\nwill help you keep track for whatever\nyour your goals are all right so now\nwe've talked about the different roles\nlet's talk about some goals and paths\nthat you can take as a web developer and\none thing I want to mention that's\nreally important is that your goals can\nchange over time so what you choose now\ndoesn't mean you won't change it later\nI've been doing for about 15 years and\nI've been a freelancer a full-time\nemployee a consultant an instructor um\nand I've done side projects so you you\nmost likely won't do the same thing for\nyour entire career so don't feel like\nyou're stuck with whatever you choose\nnow so the most common is to learn to\ncode to become a full-time developer for\na company and this is where you know you\nwork for a company you get salary uh\nbenefits your pay can vary greatly\ndepending on where you live and and what\ncompany you work for but it's a very\nstable job and you don't have to worry\nabout finding clients or anything like\nthat you just show up you do your job\nhopefully you really like coding and you\nget to you know do your passion for work\nso it doesn't really feel like work you\nget paid quite a bit um there's\npositions for all types including the\nones that we talked about many\ndevelopers strive to work at at like a\nFang company which is you know Facebook\nAmazon Apple Netflix Google these are\nsome of the biggest Tech compan IES in\nthe world and they pay very well however\nthere are there's a lot of companies out\nthere that pay just as well if not\nbetter so don't feel like you have to\nwork for one of these huge corporations\nthere's there's so many companies out\nthere so freelancing is another option\nand this is for developers that are\nsomewhat business savvy it definitely\nisn't for everyone there's a lot of\nadded stress in running your own\nbusiness but it can be incredibly\nrewarding in many ways you know you'll\nprobably struggle from financially at\nfirst depending on where you're starting\nout but if you gain the experience and\nyou put your all into it you can\npossibly make much more than you could\nat a 9 to5 UM as a software developer\nand and freelancing is essentially\ninvesting in yourself and you do need to\nknow quite a bit you kind of have to be\na jack of all trades master of none\nbecause typically you're starting out\nsolo so you'll need to do everything\nfrom the the design to the HTML CS to\nwhatever you're using for a backend if\nyou do have a backend or if you're using\nWordpress typically you're going to go\nfor technologies that allow you to\ncreate things fast um and you can also\nNiche down and work with certain\nindustries so for instance you might do\nmedical websites or something like that\num there's so many different routes to\ntake within the route of\nfreelancer so another option you have is\nto work for a startup which is a little\ndifferent than working for a large\ncompany it's pretty risky because most\nstartups do fail that's just a fact but\nif you're one of the first employees it\ncan be very very rewarding and you can\nbe very successful and make a ton of\nmoney um and then you could also think\nabout starting your your own startup\nlater on down the line I wouldn't say\nthat should be your first goal once you\nlearn how to code um and that kind of\nleads us to the next one which is to\ncreate a product or a SAS which is a\nsoftware as a service so you could build\nsome kind of app that you could charge\nmonthly for so you have recurring income\nand I would say this is great for a\nsecondary goal so maybe start off either\nas a full-time employee or a freelancer\nand work on a product that you think\nwill be successful in your spare time\nand then you know if that starts to grow\nyou could always switch over and do that\nfull-time and then internships uh they\ndo offer Real World Experience there's\npaid internships and even if it's not\npaid you do get a lot of experience and\nit looks great on your resume for when\nit is you know when it comes time to\nfind a job and typically internships\nthat aren't paid they will lead to a\npaid position so it's a great option if\nyou know just to get you going in the\nindustry so these are just some of the\nthings you can do these are I would say\nthe most common especially the first two\nfull-time employe freelancer um there's\na lot of things that I would say you can\ndo but I wouldn't s just starting out\nwith like Consulting like teaching\nthings like that again like I said\nearlier you don't have to stick with one\nthing once you choose that path all\nright so let's get into some of the\nbasic essential tools that you need to\nstart coding so first obviously you need\na computer with an operating system\npeople ask me all the time what's the\nbest laptop for coding the truth is you\ncan use just about anything from the\nlast 5 to 10 years for web development\nif you were doing something like 3D\nmodeling then you need a a bit more of a\npowerful computer but for web\ndevelopment you don't need much I'd say\njust make sure you have at least 8 GB of\nRAM and an SSD I think the bigger\ndecision is what operating system you\nwant to use but even that really just\ncomes down to preference people ask me\nwhat I prefer I I like Mac OS just\nbecause it things seem to work a bit\nmore smoothly especially when it comes\nto things like the terminal I think that\nWindows has gotten a lot better though\nand I do use Windows I'd say probably\n30% of the time I just prefer Mac OS for\nmy serious projects and then obviously\nyou have Linux which is a great option\nbecause you can kind of mimic your\nproduction environments and it's very\nbeneficial to learn Linux server\nAdministration if you're going to be\ndoing any kind of\ndevops all right so so again it just\ncomes down to preference so a text\neditor this is where you'll write your\ncode and there's a lot of options out\nthere personally I prefer Visual Studio\ncode it's free it's open source it's\nvery powerful it's very customizable I'd\nsay about 80 to 90% of the web\ndevelopers that I talk to use vs code um\nsome other options are Sublime Text\nwhich technically isn't free but it has\na trial That Never Ends if you do use it\nfor a long time I would suggest paying\nfor it um there's adom which is free and\nopen source Vim is also pretty popular\nit's a bit more advanced than the others\nit has a uh quite a learning curve but\nit's very powerful and the people that\nuse it swear by it and you don't really\nhave to use your mouse at all so you can\nbe very very efficient and fast writing\nyour code so there's also idees which\nare integrated development environments\nthey have a a little bit more features\nthan a standard text editor you don't\nreally need an IDE for most types of web\ndevelopment but there are some that are\ngeared towards specific languages for\ninstance you have pycharm for python\ndevelopers you have PHP storm for PHP\ndevelopers so that may be something you\nwant to look into But ultimately I would\ndefinitely recommend vs code to to most\npeople as far as far as web browsers go\nthat's really preference I'm sure that\nall of you already have a preference I\nlike Chrome there's not really a\nspecific reason it just does everything\nI need to I I like the dev tools I think\nChrome and Firefox would be the the the\ntwo most popular Firefox also has great\nDev tools maybe a little better than\nChrome um you could even use Microsoft\nEdge I I came up in the the Internet\nExplorer days and Microsoft browsers\nwere just horrible I remember i6 and it\nit was just a nightmare but now Edge\nactually uses chromium under the hood so\nyou could just as well use that um\nSafari I'm not too crazy about Brave is\nreally cool for uh for privacy features\nBrave and Vivaldi and then there's a a\nnewer browser called polyan which is\ndirected toward web development but it's\nnot free and personally I'm not going to\npay for a browser Chrome does everything\nI need um so it's just preference and\nthen for terminals\nit used to be that that front-end\ndevelopers didn't really need to use a\nterminal for much but now with all the\nthe framework clis and npm and git you\ndo need to know at least the basics so\nas far as terminal programs go I think\nthe default in Mac OS or most Linux dros\nare great uh for Windows Windows used to\nreally suck with terminals with the you\nknow the CMD command prompt I never\nreally could get into Powershell uh but\nnow the windows terminal isn't bad it\nhas SSH you used to have to use tools\nlike putty um I prefer get bash on\nWindows which is a third-party bash\nterminal um but you could also use the\nwindows subsystem for Linux it is a bit\nmore advanced though so I wouldn't\nsuggest that for beginners um and then\nfor Linux obviously you have tons of of\nthirdparty terminals you have Terminator\nalitt for Mac OS I'll either use the\ndefault or iterm 2 which just has a a\nlittle more features and I think it\nlooks a little better all right so now\nwe've come to the first big part of\nlearning to be a web developer and that\nis HTML and CSS so these two\ntechnologies are essentially the\nbuilding blocks of the visual part of\nthe web HTML is a markup language that's\nused to structure the content of a web\npage and then CSS cascading stylesheets\nis the styling language that's used to\nstyle the content so you can think of\nHTML as the skeleton and CSS as the skin\nyou can't have one without the other\nHTML itself is actually very very simple\nit's just a bunch of tags that you use\nto structure your content so as far as\nwhat you want to learn about HTML you\nwant to learn how to create semantic\nmarkup this means using the correct tags\nfor the correct content you also want to\nlearn about accessibility this is making\nsure that your content is accessible to\neveryone including people with\ndisabilities you want to learn all the\ncommon tags and attributes so things\nlike heading paragraphs lists there's a\nlot of older deprecated tags that you\ndon't even have to bother with uh I\nwould say semantic tags excuse me like\nheader and footer are very very\nimportant so spend some time learning\nhow to structure your pages semantically\nand then CSS is a a much different more\ncomplex technology it's a styling\nlanguage that's used to style the\ncontent of a web page it's very powerful\nand it's constantly evolving um there's\na lot to learn about CSS you want to\nlearn about all the core properties for\nthings like colors fonts the Box model\nwhich is how elements are laid out and\nspaced on the page and how to use margin\npadding borders um spec specificity is\nimportant because sometimes you'll have\nmultiple styles that apply to the same\nelement and you need to know which one\nwill be applied and the different units\nof measurements like pixels M's Rems and\npercentages you'll want to learn about\ndifferent types of selectors like\nclasses IDs there's also what we call\npseudo selectors um you want to learn\nabout the different layout methods like\nFlex box and grid these are are used to\nlay out your elements in columns and\nrows and then responsive design is\nreally important all of your projects\nshould look good no matter what device\nthey're being viewed on you know there's\nthere's a few elements to responsive\ndesign but media queries are probably\nthe most important uh this is where you\ncan apply different Styles based on the\nsize of the screen so you definitely\nwant to be familiar with responsive\ndesign so next we have CSS Frameworks\nnow at this point these are optional and\nyou could just go right to JavaScript\nhowever these Frameworks can make things\nmuch easier when it comes to creating\nlayouts they're also very popular and a\nlot of companies use them and they're\npretty easy to learn when comparing it\nto other Technologies like a programming\nlanguage so my personal advice would be\nto spend a week or two learning one of\nthese Frameworks and there's uh there's\na ton to choose from however these are\nthe main four that I would suggest\nlooking at and to be even more specific\nI'd say the first two but that's just my\nopinion so bootstrap is one of the\noriginal CSS Frameworks it's been around\nsince I believe\n2011 and it's a very widely used\ntechnology and has a large community\nwhich is always a plus its component\nbased which means that there's a lot of\npre-built classes that you can use for\nthings like buttons cards nav bars Etc\nand the upside to this is that you can\ncreate uis and websites really quickly\nand you have less classes in your HTML\nthe downside is that sometimes bootstrap\nwebsites can look pretty similar now\nit's fair to say that you can really\ncustomize bootstrap and make it look\nhowever you want but you will have to\nlearn SAS which is a CSS pre-processor\nand I'll talk about that in a minute um\nbootstrap also has an easyto ous grid\nsystem that a lot of people like however\nI definitely wouldn't suggest using it\njust for that because you have CSS Grid\nor Flex box which are built into CSS so\nyou don't need to use bootstrap just for\nthe grid another plus to bootstrap is\nyou get a set of JavaScript widgets like\nmodels carousels and dropdowns and this\nis great for people that don't have a\nlot of JavaScript experience and still\nwant that functionality so I'd say\nbootstrap is one of the best tools for\nFreelancers because you can create\nwebsites and layouts very quickly now\nTailwind CSS seems to be the most\npopular right now as far as you know\ncontent that you see out there and what\npeople are talking about you see it\neverywhere in new projects a lot of\nstartups are using it it's a utility\nfirst CSS framework that allows you to\nbuild custom designs without pretty much\never leaving your HTML and being utility\nfirst makes it a bit different than the\nrest of these because instead of having\na class for let's say a button which\nwould generally have mult multiple\nStyles you have a class for each style\nso you'll have a class for the\nbackground color for the text color for\nthe padding so you almost never have to\nwrite any custom CSS because every CSS\nproperty has a class the downside to\nthis is you end up with a ton of of\nclasses in your HTML but the upside is\nthat you can really customize your\nlayout and they don't all look the same\nwhich can be an issue with a lot of\nthese other options all right so next we\nhave balma which is a newer framework\nthat I really like it's it has some\ngood-look components and it's really\neasy to use as far as class names go\nit's not as popular as bootstrap or\nTailwind it's also not as customizable\nas Tailwind um but it is very fast and\nlightweight and I think it looks good\nthen you have materialize which has been\naround for a while it uses Google's\nmaterial design system and as far as\ncomponent-based Frameworks go I think\nmaterialized is one of the best looking\num obvious obviously that's just my\nopinion there's a ton of components to\nchoose from and there's also JavaScript\nwidgets like modals and dropdowns\nsimilar to what you would get with\nbootstrap um from what I from what I can\ntell its popularity has come down since\nthe release of Tailwind but it's still a\nvery viable option and some other\nFrameworks out there are semantic UI\nFoundation UI kit I'm not going to go\nover all them because they're they're\nall pretty similar once you learn one\nit's pretty easy to pick up another one\nso SAS is another option that you may\nwant to learn around this time it's a\nCSS pre-processor that adds extra\nfunctionality to CSS so it allows you to\nwrite CSS with variables and functions\nmixins um Native CSS is catching up with\nSAS features for instance we have custom\nproperties in CSS which are essentially\nvariables they're not as clean looking\nas SAS variables but they basically do\nthe same thing um there's still a lot\nthat SAS can do that CSS can't though so\nyou can nest and inherit Styles which is\na very helpful feature I would say learn\nSAS if you're using a framework like\nbootstrap where you need to customize\nthe Styles also it can make your CSS\nvery modular so you can separate it into\ndifferent files and then you can import\nthem into one another and this makes it\neasier to maintain you basically create\nyour own CSS framework and you have a\nseparate file for things like button\nstop or navbar Styles it's been around\nfor a while there are other CSS\npre-processors like Les and stylus but\nthey kind of just faded away SAS has a a\nreally good ecosystem of both command\nline tools and guey tools to compile it\nbecause you can't use SAS files directly\nin the browser right you can't just\ninclude them like you can CSS you have\nto compile it down to regular CSS and\nthere's different tools that allow you\nto to do that it's also great for\ntheming so where you want to have\ndifferent color options and things like\nthat um it is optional but again it's\nsomething that's really easy to learn so\nwhy not learn it you could you could\nlearn it in a weekend and I have a crash\ncourse that pretty much shows you all\nthe features that you need to know so\nnext we have a batch of really helpful\ntools that you'll most likely learn and\nuse early on so git is a version control\nsystem for saving and versioning your\ncode as well as collaboration and say\nyou should learn it no matter what type\nof developer you are you don't have to\nlearn it before you start coding like\nyou don't have to learn it right the\nsecond but it should be on your list uh\nas something to learn pretty early on\nit's it's really not difficult to learn\nthe basics at the very least just create\na GitHub account and learn how to create\na repository and push that push your\ncode to that remote repository and you\ncan do it through the terminal through\ncommands or you can do it directly\nthrough your your text editor through\nthe guei markdown is another thing that\nyou should probably learn it's a markup\nlanguage that's used to style text\nsimilar to HTML it's used in a lot of\nplaces such as GitHub it's used in\nreadme files which you should have for\nevery project that you create it's used\nfor documentation and it's very simple\nto learn you can literally learn it in a\nweekend or even even in a day uh and the\nthings that you don't know you can\nalways just go and reference I forget\nthe the exact URL to the markdown\nwebsite but very simple stuff so next we\nhave editor or IDE extensions so most\ntext editors such as vs code Sublime\nText adom they have extensions or\nplugins that you can install and EMT is\nsomething that anyone that writes HTML\nand CSS should be using it's it's not\neven extension for vs code it's built-in\nbut with some text editors you do have\nto install it so it gives you really\nnice shortcuts to create all kinds of\nHTML tags with classes and IDs and\ncontent CSS Styles it saves a ton of\ntime it saves you a lot of typing so\ndefinitely something you should learn\nearly on live server is another great\none that I use all the time it gives you\nuh a devel local development server that\nupdates as soon as you save your files\nso you don't have to go and manually\nrefresh the page uh prettier is\nsomething that I use a lot it's a code\nformatter that will help you keep your\ncode clean you can make it so that it's\nit it formats your code when you save\nthe file another thing that I would\nhighly recommend is to learn the\nshortcuts of your editor because it\nmakes you much more efficient and makes\nyou code much faster all right so next\nwe have some AI tools that can Aid in\nwriting code and problem solving AI is\ngetting bigger by the day obviously\nalmost to the point where it's a little\nbit scary but I know a lot of people\nfear that AI will replace replace their\njobs or replace developers and I think\nthat may be true to an extent when it\ncomes to basic tasks but for the most\npart I think it's just going to change\nthe way that we write code it's going to\nchange the landscape and what developer\nroles entail uh my suggestion would be\nnot to worry about it too much and try\nto utilize the tools that are out there\nto your advantage to make you a better\ndeveloper and the two AI tools that have\nbeen pretty much invaluable to me are\nGitHub co-pilot and chat GPT so co-pilot\nis an AI pair programmer that helps you\nwrite code and you can install it as an\nextension to vs code and many other\neditors uh it's not perfect but it is\npretty amazing and it helps you be more\nefficient saves a lot of time um helps\nyou solve problems I use it for even\nthings like like generating sample data\nyou can say give me you know 20 give me\na Jason file with 20 users with these\nfields and it just generates it for you\nso really cool stuff there's others that\nare similar like tab9 kite there's a new\nAI tool that looks really interesting\ncalled Codi I haven't used it yet but it\nlooks really powerful\nand not only can you use it for like\nAuto completion and suggestions but you\nalso have a chat window where you can\ninteract with it and ask it questions\nabout your project and not just a single\nfile the entire project even if it's you\nknow hundreds of files so really cool\nand then chat gbt is obviously huge\nright now it's incredible for learning\njust about anything um there's a few\nthings that you really have to\nunderstand though when it comes to using\ntools like this the first is that it can\nbe wrong it can be very wrong in fact so\nyou can't just rely on that uh I use it\nkind of as a starting point along with\nother resources and the other thing is\nto make sure that you don't rely on it\ntoo much if you're just using it to\ngenerate code and using that code\nwithout understanding it you're not\ndoing yourself any favors so use it as a\nlearning tool not as a crutch and if you\nfind yourself doing that I'd say don't\neven use it for now um but if you use it\ncorrectly it can be a great tool so next\nwe have design tools and this is another\narea that you may or may not need to\nknow depending on your goals and I\nusually suggest that you learn the\nbasics of design unless you're working\nstrictly backend as a freelancer you're\ngoing to need to know some of this stuff\nI think one thing that a lot of people\ndon't realize is if you plan on\nfreelancing you have to kind of have an\neye for design and be able to create\ngood layouts and good-look websit unless\nyou're Outsourcing that work which you\nprobably can't afford to do when you're\nstarting out so as far as tools go figma\nis a great tool for designing websites\nand uis that's probably what I would\nrecommend most people it's free it's\nweb-based uh it's very easy to use it's\nnot something you need to rush to learn\nbut it will help you in certain\nsituations some others include sketch\nwhich I believe is still Mac OS only uh\nyou also have adob Adobe products like\nXD Photoshop Invision seems to be really\npopular for mockups and prototypes and\nthen you have canva balsamic as well as\nwell which are both web- based now while\nwe're on the topic of design and again\nunless you're a backend developer I\nusually suggest learning at least the\nbasic principles and these are some of\nthe ones that I suggest you keep in mind\nwhen you're building websites or uis so\ncolor and contrast is important which\ncolor paletes look good the difference\nin brightness between elements I see a\nlot of hero images where I can barely\nread the text uh that's against the\nbackground image so you want to make\nsure that your text is readable this is\none of the the biggest and most obvious\nmistakes that I see so white space Also\nimportant uh it's another big mistake I\nsee when people don't have enough space\nbetween their elements or they have too\nmuch space having the right amount of\nwhite space can make a huge difference\nand really improve readability and just\nthe overall experience of the website\nscale is also important you want to make\nsure that your elements are sized\ncorrectly you don't want to have a huge\nbutton and then a tiny input field\nthings like that everything should be\nproportionate and then visual hierarchy\nyou want to make sure that the most\nimportant elements stand out and you can\ndo this with size color contrast this\nhelps users navigate your website or UI\nand it's not only important for how your\nwebsite looks but it's also important\nfor how it functions and how successful\nit is in terms of sales or signups or\nwhatever the goal of of the website is\nso obviously there's other principles\ntypography is another one you want to\nmake sure that your fonts are readable\nand consistent things like that and I\nthink these are skills that anyone that\nworks in the front end can benefit from\nyou don't have to be a designer but you\nshould know the basics okay so\neverything we've covered so far has to\ndo with creating static websites and\nlayouts and not really any Dynamic\nfunctionality or interactivity so that's\nwhere JavaScript comes in JavaScript is\nthe programming language of the browser\nnow how much JavaScript you learn\ndepends on your goals so if you plan on\nbeing a backend python developer then\nyou probably don't need to learn much\nmuch but if you want to become a\nfront-end developer you'll probably end\nup using a JavaScript framework like\nreact so you need to learn quite a bit\nif you want to be a backend or full\nstack developer and use node.js then\nobviously you need to learn quite a bit\nof JavaScript as well so this brings me\nback to why your end goal is so\nimportant now people always ask me how\nmuch JavaScript should I learn before\nmoving to a framework like react and\nShameless plug here I do have a course\ncalled modern JavaScript from the\nbeginning that'll teach you everything\nthat I recommend plus more it's a a\n37-hour course but as far as just you\nknow an overview of what I would suggest\nI'd say learn the fundamentals first so\nvariables functions conditionals Loops\nthings like that then you want to learn\nabout the document object model which is\nhow JavaScript interacts with the HTML\nand CSS learn how to select elements and\nmanipulate them this is what's going to\nallow you to create things like like uh\ndropdowns and models and menus you know\nicons you click on and the menu slides\nout cool things like that and then high\norder array methods are important for\nworking with data so methods like for\neach map filter and you should also\nlearn the fetch API so that you can make\nrequests to either a backend or a public\nAPI and fetch some data so you want to\nlearn about HTTP and methods like get\npost put and delete and learning about\npromises and asynchronous code in\ngeneral is a must in with JavaScript and\nthen learn about Json which is a data\nformat that's used to send data back and\nforth between the client and server so\nas a front-end developer you'll be using\nthe Json data that's sent from the\nserver and if you're a back-end\ndeveloper you'll be creating or\ngenerating that Json data so I'd say\nthat that's the minimum that you should\nlearn before moving on to a front-end\nframework you can learn more if you want\nsuch as object-oriented programming\nclasses prototypes things like that but\nI think that this is a good starting\npoint all right so WordPress is a CMS or\ncontent management system that's built\non the PHP programming language and I\nalways struggle with where to put\nWordPress in this guide because\ntechnically it is full stack but you\ndon't need to be a full stack developer\nto use WordPress or any tool like it for\nthat matter uh a very common learning\npath is to learn HTML and CSS then a\nlittle bit of JavaScript and then get\ninto WordPress and possibly PHP that was\nactually my path back in the the late\n2000s so WordPress is especially handy\nfor Freelancers there's a few reasons\nfor that it allows you to uh build\nDynamic websites quickly with little to\nno coding skills it's great for clients\nbecause they can easily update their own\ncontent without having to create uh\nwithout you having to create a custom\nadmin area which can take months to\nbuild there's tons and tons of of themes\nthat you can use as well as PL plugins\nto give you certain functionality both\nfree and paid uh I do always recommend\nthat people that that want to use\nWordPress also learn PHP so that they\ncan really customize and create their\nown themes and plugins it does make all\nthe difference in the world if your\nclient asks for something specific and\nyou can build it on on your own because\nthere's no Plug-In or theme for that\ndoes what they want um believe me when I\nstarted freelancing I didn't know much\nPHP and I was using Wordpress and there\nwere a lot of times where I had to tell\nmy client that I couldn't do that or I'd\nhave to pay someone else to do it but\nonce I learned PHP I was able to just go\nin and customize everything I should say\nPHP and JavaScript because there was was\nsome front-end stuff there's also a huge\nCommunity for support and learning I\nthink something like 35 to 40% of the\nweb is still run on WordPress so many\nlike small business websites things like\nthat all right so once you're able to\ncreate a basic website or small\napplication front-end application you\nneed to know how to actually deploy it\nto a live server and this is something\nthat a lot of people don't seem to think\nabout until they're done with a project\nand they're like now what so websites or\napplications that are just front-end\nHTML CSS JavaScript can pretty much be\nhosted anywhere you don't need to have a\nserver like Apache or engine X which\nwe'll talk about later in the in the\nbackend section there's literally\nhundreds of options out there some of\nthe most popular services are static\nhosts like netlify versel GitHub Pages\nnow you can use something like versell\nto host like a nextjs website which is\nserver rendered in fact versell created\nnextjs but they're also great for just\nplain old HTML and CSS projects and\nthose three services are extremely easy\nto use because all you really have to do\nis push your project to GitHub which you\nshould already know how to do it this\ntime and then link your account and\nchoose the repository that you want to\ndeploy they will give you a URL they'll\nassign you a URL but you're going to\nwant to purchase your own domain for\nyour website most likely and there's a\nlot of services for that I personally\nuse name cheep but there's Google\ndomains GoDaddy there's so many\ndifferent domain name registrars out\nthere that you can use and as far as SSL\ncertificates go a lot of Hosting\nServices these days include SSL so you\ndon't have to really do anything extra\nif they don't and you need to purchase\nan SSL certificate on your own you can\npurchase one from from name cheep um\nthere are different types or you can get\na free one from a service called let's\nencrypt so that might be something you\nneed to look into now out of the the\nhosting Services here for simple static\nwebsites or simple front-end\napplications or even SSR projects I\nprefer net lefi and versel I think\nthey're both very similar they both\noffer Sim similar features you get\nthings like form submissions serverless\nfunctions logs and and so on if you're\nare running a business and you you need\nfor instance business email for your\ndomain name things like that then you\nmight want to go with a company like\nhostinger or blue host and these\ncompanies offer shared hosting which is\nvery very cheap usually under like $10\nper month and these Services I'm\nrecommending for for mostly front-end\nprojects when you get into larger full\nstack or or or or apis you're going to\nneed something a little more a little\nmore advanced something like AWS or\ndigital ocean and I'm going to get into\nthose Services a bit later but I would\njust suggest taking a look at some of\nthem and and seeing what works for you\nyou know do your own research on on the\nservices all right so let's see where\nwe're up to at this point I'd say if\nyou're familiar with most of what we've\ntalked about then you're somewhat of a a\nfoundational front-end developer or a\nweb designer if you you lean more\ntowards design as well and if you plan\non being a backend developer a lot of\nthis doesn't really apply to you however\nI usually do suggest learning the basics\nof HTML CSS and JavaScript even for\nbackend devs it just gives you a better\nunderstanding of how the frontend works\nand how to work with it and that's just\nmy personal suggestion but I know not\neverybody has enough time to learn\neverything so you should have a familiar\ndevelopment environment that you work\nwith including a text editor or IDE a\nset of helpful extensions some kind of\nlocal development server like live\nserver uh a terminal although at this\npoint you probably don't need it much\nand then you should know the basics of\ngit and GitHub so you should know HTML\nand CSS pretty well enough to create\nstatic websites with responsive layouts\nhave a good understanding of the Box\nmodel knowing some design principles and\nstuff that also is very helpful you\nshould know at least enough JavaScript\nto create some Dynamic elements like\nmodels dropdowns tabs form validation\nand just the ability to make Pages\nDynamic and be able to add and remove\nCSS Styles dynamically with JavaScript\nand having knowledge uh about HTTP\nrequests about the the request response\ncycle HTTP methods and using the fetch\nAPI understand asynchronous code and\npromises and then you should also be\nable to deploy a basic website or\napplication to uh a live server using a\nservice like netlify a versel or\nwhatever it is that you choose now CSS\nFrameworks like I said are optional but\nin my opinion are recommended I would\nsuggest either bootstrap or Tailwind\nthey're easy enough to learn and they do\nhelp you you know style your websites\nmuch faster SAS is also optional but\nrecommended as well because you can\nlearn it really fast and I think I\nmentioned this but I I might not have\nbut it's really important to to learn\nCSS before you jump into any kind of CSS\nframework just like with JavaScript you\nneed to know fundamentals before you\nmove to a JavaScript framework um some\nof you may choose to go the WordPress\nroute especially if you're going to be\nfreelancing if so you should know how to\ninstall and set up plugins themes\nwidgets also work on learning how to\ncreate your own themes and plugins once\nyou're ready to start learning PHP as\nfar as Jobs go you could start applying\nwith this knowledge but typically\nfront-end positions are going to want\nyou to know a framework like react or\nview so you might want to learn one of\nthose first in my experience there are a\nlot of jobs that are willing to train\nyou if you do know if you you know\nyou're familiar with JavaScript but you\njust really haven't gotten deep into a\nframework yet some companies are willing\nto train you on that um you could also\nstart freelancing at this point you\ncould create websites for small\nbusinesses and individuals so it's\nreally up to you on where you want to go\nnext now from here it really depends on\nwhat you want to do and I think there's\na few different paths you can take from\nthis point so let's say that you want to\nbe more of a web designer or or work for\na small agency or freelance you might\nchoose to learn more about design get\nbetter at CSS maybe get more into\nWordPress or even some no code tools\nlike web flow you probably want to learn\nsome SEO practices as well because\nthat's something that a lot of clients\nwill will need um this route usually is\na mix of coding and business and you\nwork really close with clients in other\nbusinesses you may even get into some\nmarketing I did this for quite a few\nyears myself um you could also go the\nthe full-blown uiux designer route which\nis kind of out of the scope of of this\nguide um but maybe you find that you're\nbetter at design than coding I I've seen\na lot of people do that they start off\nwanting to be a web developer but they\nend up um getting more into you know\nfigma or uh Adobe XD and they they get\nmore into the design side of things so\nthat that could be an option as well and\nthen the next option is to proceed with\nthe front end and this this is probably\nthe most common among my audience at\nleast if you're more into the coding\naspect and you want to work for a\ncompany as a front end or even full\nstack developer you can continue to\nlearn more about JavaScript and learn a\nframework like react view or angular all\nright you can learn about UI components\nand state front-end workflows and and\nbuild tools like webpack and vit static\nsite generators like Gatsby and SSR\nFrameworks like next JS you'll also\nlearn about testing and performance this\nroute is much more focused on coding and\nless on on design and again this could\nbe for you whether you plan on being a\nfront-end or a full stack developer and\nI want to stress that if you do plan on\nfreelancing you can still proceed with\nthis particular path it can be really\nbeneficial to learn something like react\nand maybe a static site generator like\nGatsby and use that along with a\nheadless CMS that's that's a good stack\nfor a freelancer because you can create\nthings that are very Dynamic and you can\ncreate them really quickly and I'll talk\nmore about that stuff soon next if you\nwant to be a backend developer or a full\nstack developer and just start with the\nbackend next you can take this approach\nso you can move to a server side\nprogramming language like python C PHP\nor stick with JavaScript and learn a\nruntime like node.js or even a newer\nruntime like bun JS or Dino so you'll\nalso need to learn a backend framework\nlike Express if you're using node D\nJango for python larl for PHP uh maybe\nasp.net if you're getting into C so lots\nand lots of choices and we'll get into\nall of that and then you're also going\nto need to know about uh databases so\neither relational or nosql databases\nwith this option you'll be creating apis\nfor front-end developers to work with if\nyou're going full stack then you'll be\ncreating and consuming apis you may also\nwant to learn a little a little bit\nabout devops and how to deploy server\nside applications to and apis to\nproduction so I'm going to continue with\nwhat I see most people do and move\nfurther down the frontend developer path\nso we're going to take the the middle\noption here now before we look at\nfront-end Frameworks and ecosystems I\nwant to address a change that's that's\nhappening where the front end is\nevolving quite a bit and this may seem\ncomplicated and overwhelming at first\nbut I think we're headed in the right\ndirection so website started off with a\ntraditional multi-page server rendered\napproach so think of like a PHP website\neach distinct piece of content is\npresented on separate HTML Pages whether\nit's static whether you create those\nHTML Pages or they're generated by some\nkind of server side language like PHP\nand this is still a common approach it's\ngreat for SEO but the UI isn't as fast\nand dynamic as if you were to use a\nfront-end framework like react which\nwhich for many projects is absolutely\nfine then these front-end Frameworks\ncome along and change it up where we're\nbuilding single page applications or\nspas and this is where the entire UI the\nentire application or front end is\nbundled into a JavaScript or or multiple\nJavaScript files and the browser loads a\nsingle HTML page so when you click on a\nlink it doesn't actually go to a new\npage like it would for a traditional\nHTML or PHP site it just changes the URL\nand then JavaScript handles the rest and\nthis makes the site very Dynamic it\ngives you a very fast and and\ninteractive user interface on the client\nside but it's not great for SEO and it\ncan lack performance in some areas so\nnow we have what are called SSR or\nserers side rendered websites this is\nwhere the page is initially rendered on\nthe server by default and then sent to\nthe browser similar to traditional\nwebsites however we can still have that\ninteractive fast user interface by using\nclient side components in Frameworks\nlike react and view so you really get\nthe best of both both worlds and we do\nthis through what are called met meta\nFrameworks or SSR Frameworks there's\ndifferent names for them but some\nexamples are nextjs which you can use\nreact and you can have your pages server\nside rendered nujs for view you have\nspelt kit for spelt so I'll talk about\nthose Technologies in a bit but that's\nkind of the approach that we're St\nstting to see more of now now in\naddition to that you have static site\ngenerators like Gatsby gridsum Astro\nnextjs is also a static site generator\nand these are Frameworks that allow you\nto build static websites with react view\nfelt so you can have a static website\nwith a dynamic UI and I know that sounds\na bit confusing but it I think it's a\ngood thing because it gives us more\noptions and allows us to build better\nwebsites or more interactive websites\nand applications so instead of talking\nabout front-end Frameworks and then\ntalking about SSR and static site\ngenerators I'm going to talk about them\nall together as an ecosystem I think\nthat makes more sense so if you're a\nreact developer and you want to learn\nSSR then you're probably going to use\nsomething like nextjs or remix because\nyou already know react you just need to\nlearn the the the nextjs way of doing\nthings now since this can be confusing\nespecially for beginners I always say\nthat I always say I always say start\nwith a single page application if you're\nlearning react just start with Spas\nusing Create react app I'll talk about\nthat in a minute and basically go with\nthe whatever's in the framework's\ndocumentation then once you're\ncomfortable with that you can move to a\nmeta framework like nextjs so think of\nit as you're you're not just learning or\ngetting into react or view but you're\ngetting into that entire ecosystem and\nthat can include SSR SSG State\nManagement mobile Frameworks UI\ncomponent libraries and more so you\ndon't have to learn all these things but\nthe more you learn the more types of\nprojects you can build now there's a\ncrap ton of Frameworks out there but\nthese are the big four you have react\nview spelt and angular and I would\nsuggest learning one of these because if\nyou choose some obscure framework it\ncould go away at any point you know and\nno longer be supported and there's\nprobably not much of a community you may\nhave a hard time finding a job so would\nstick to one of these and I'm going to\ngo over each one and then after that\nwe'll go over the ecosystems of each one\nso we'll start off with react which is a\nfront-end framework that was created in\n2013 By Facebook and I would say it's\nthe most popular front-end framework\nit's been around for quite a few years\nnow there's quite a few react jobs out\nthere in many areas so if you're looking\nto work as a full-time developer then\nreact is a good choice it's a component\nbased framework work as are all of these\nand it uses jsx which is a syntax\nextension to JavaScript so it basically\nallows you to write HTML within your\nJavaScript and within your components\nit's not required with react but it's\nthe most common way to use it and the\nmost common way to write components now\nand when I say components I'm talking\nabout pieces of the user interface so a\nsearch input uh a nav menu an article\nwhatever you you you start to think of\nyour website in terms of UI components\nnow technically react is a UI library\nand not a framework however it's so\npopular and has such a huge ecosystem\nthat I think it's fair to call it a\nframework and it's a direct competitor\nto Frameworks like angular and just know\nthat react is a library so you'll most\nlikely be installing a lot of other\npackages react does have one of the or\nI'd say the biggest ecosystem and that's\nnot necessarily a good thing because it\nmeans that the framework itself is\npretty bare bones and you'll need to\ninstall other packages to do things like\nrouting Etc I'd say it's pretty middle\nof the road when it comes to the\nlearning curve there are some things\nthat might make you scratch your head\nand things that are a bit easier to do\nin other Frameworks especially when it\ncomes to State however it's much easier\nthan something like angular at least in\nmy opinion it's also pretty quick to to\nget something up and running with now\nwhen it comes to Performance all the\nFrameworks are pretty impressive it's\nhard to really gauge this because it\ndepends on the project and how you write\nyour code react is generally more\nperformant than angular um it's also\nmuch lighter but it's not as performing\nas something like spelt but again it\ndepends on the project and how you write\nyour code you can use things like\nmemorization and lazy loading things\nlike that to improve performance now\nthere's also a lot of jobs in react in\nmost areas at least in the US I'm not\nreally familiar with other countries and\nthis is definitely a good reason to get\ninto react but it shouldn't be the only\nreason if you hate writing react you may\nbe better off using something that you\nlike even if there's less jobs and\nremember if there's less jobs there's\nprobably less competition as well also\nremember when there's a lot of jobs with\na certain technology that's really\npopular a lot of people know that\ntechnology so you have to weigh the pros\nand cons next we have vue.js which is a\nframework that was created by Evan u in\n2014 and it gains more popularity every\nyear a just the fact that it was created\nwasn't created by a tech giant like\nFacebook or Google and is still one of\nthe most used Frameworks is pretty\nimpressive and it shows that it's a\ngreat framework one of if not the main\nfocus of vue.js or main focuses is\nSimplicity and performance and it is\ncomponent based of course just like the\nrest of these and it uses a template\nsyntax that's very similar to HTML and\nview components are very simple there's\nan area of the template for for the\noutput or the HTML the logic or the\nJavaScript and the Styles and there's\ntwo different ways to write your\nJavaScript in view components now at\nleast with uh since version three\nthere's the options API where your\ncomponent is an object with properties\nand methods and then the view version\nthree introduced the composition API\nwhere it's uh you have a setup function\nand you return the data and methods from\nthat function I'd say the options API is\na bit easier to learn but the\ncomposition API is more powerful that's\njust my opinion though so like react\nview is also very lightweight and on its\nown it has a a pretty similar ecosystem\nto react when it comes to you know SSR\nand SSG Frameworks and so on and we'll\ntake a look at those soon I would say\nthat Vue is one of if not the easiest\nFrameworks to learn of course I'm saying\nthat relative to the others uh it's also\nvery powerful and it has a lot of the\nsame features as react so as I said Vue\nhas a focus on performance and it's very\nfast has a very small bundle size so\nnext we have angular which was created\nby Google and there was a version back\nin the day called angularjs I believe\naround 2010 and the entire framework was\nrevamped for version two which is just\nangular so if you hear angularjs and\nangular those they're usually two\ndifferent Frameworks so if you just go\nby the cont content in things like\nYouTube and Twitter and you know things\nyou read online you might think that\nangular is kind of dead however it's\nstill very much alive and used by a lot\nof really large companies and Enterprise\nlevel projects so I don't think it's\ngoing anywhere anytime soon the others\nare more popular with startups smaller\ncompanies individuals and of course\nthey're they're also used by really\nlarge companies um but you see mostly\nreact and view if you're looking at\nYouTube tutorials and videos and stuff\nlike that um but yeah angular is a true\nfull-featured and opinionated framework\nmeaning that there's certain ways to do\nthings where with something like react\nyou have much more freedom and you can\nthere's a million ways to do the same\nthing now angular includes a router it\nhas its own HTTP client it has its own\nServices animations and much more it\nalso uses typescript by default which is\na superet of JavaScript that lets you\nuse types and you can use typescript\nwith any framework however it's the norm\nit's the default for for angular\napplications and it also ships with the\nangular CLI which is a command line\ninterface that allows you to create an\nangular application with virtually no\nconfiguration and it's used to build and\ndeploy your app not only that but you\ncan set your project up to be a spa so a\nsingle page application or an SSR or a\npre-rendered static site so the\necosystem as far as third-party tools is\nmuch smaller than react or view because\nagain so much is included in the\nframework itself I think angular has a\npretty steep learning curve and I don't\nusually recommend it for beginners\nunless they're going to be working for a\ncompany that uses it um but that's\nthat's just kind of my opinion and it\nseems to be the opinion of a lot of\npeople the bundle size is larger than\nothers which is expected because it's so\nfull featured however it's still pretty\nfast for what it is um for most projects\nthe bundle size isn't going to be an\nissue\nanyway so the last one we have is spelt\nwhich is a modern JavaScript framework\nfor building web applications that takes\na kind of a different approach in fact\ntechnically spelt is a compiler and it\nfocuses on shifting a lot of the work\nthat's traditionally done at runtime to\ncompile time so other Frameworks like\nthe ones we just talked about use what\nit's called a virtual Dom while spelt\ncomp piles your components into highly\noptimized vanilla JavaScript code during\nthe build process so this results in\nfaster and more efficient applications\nand it's also the most lightweight of\nthe four as far as writing codes felt\noffers a simple and intuitive\ncomponent-based approach where\ncomponents are written using a clean\nHTML like syntax with JavaScript logic\nembedded directly within them so when\nyou write spelt code it it it feels a\nlot like vanilla JavaScript out of I'd\nsay out of all the Frameworks it's\nalmost like what you wish JavaScript\nwould be on its own in terms of how you\ncreate events and dynamic interaction\nwith with HTML uh spelt has a a pretty\neasy learning curve I'd say spelt and\nview are definitely the easiest to learn\nuh it has a very straightforward\ndevelopment experience which makes it an\nan attractive choice for building modern\nweb applications the downside to felt is\nthat it's it's fairly new so when it\ncomes to finding jobs I just don't see a\nlot of them and I'm not saying that you\ncan't find a job as a spelt developer\nbut there's a lot more react View and\nangular jobs out there and it's a it's a\ngreat framework on its own though and I\nwould suggest checking it out um now the\necosystem for spelt is really small\nbecause there's an official meta\nframework called spelt kit that pretty\nmuch includes everything you need to\nbuild a full stack application you can\nbuild Spas SSR static websites it\nhandles all the routing the building the\ndev server and much more all right so\nnow I want to talk about the ecosystems\nfor each of the four Frameworks and\ninstead of showing you a page with all\nthe SSR Frameworks all the static site\ngenerators I'm keeping it within that\nparticular framework ecosystem and some\nof this stuff is are tools that are\nbuilt into the framework but most of it\nis is thirdparty tools to add function\nit and I'm going to start with react\nbecause it has the biggest ecosystem and\nthen I'll talk about the others and\nyou're going to see that most of what is\navailable for react is also available\nfor the others whether through native\nfeatures or through thirdparty\npackages so we'll start with create\nreact app that's probably what you're\ngoing to start with if you if you're\njust starting to learn react and this is\nmore more of a traditional way to use\nreact it's a CLI a command line\ninterface that allows you to to spin up\na project with no configuration it's\ngreat for beginners and it's what you\nwould use to create a spa or single page\napplication so you could install react\nmanually if you wanted to but I wouldn't\nsuggest it because create react app\ngives you additional features like Hut\nreloading gives you a Dev server service\nworker and more and it's built on top of\nthe webpack build tool and you can eject\nfrom create react app if you want to\ncustomize the configuration and really\ndig into webpack but I wouldn't suggest\njust that unless you really know what\nyou're doing now as I said react is\nreferred to as a framework but it's\ntechnically a UI library and it doesn't\nhave some of the essential things that\nyou would find in a framework and a\nrouter is one of those things so with a\nsingle page application you need to\nmanually Define your routes it's not\nlike an SSR framework where you just put\na file into a certain folder and then\nit's accessible you need to install the\nrouter and you need to create your\nroutes and the most popular way to do\nthis is with react router which is the\nofficial re router that you would use\nand you'll typically learn about this\nalong with react it's very easy to use\nit has a lot of features and it's very\nwell\ndocumented now when it comes to managing\nstate or data in your application you\nhave component level state which just\npertains to that component which is\npretty easy to handle but then you have\napp level or Global state where you need\nto share that data between multiple\ncomponents now in my my opinion react\nisn't the best with State Management out\nof the box there is a built-in context\nAPI that you can use along with some\nhooks but it's fairly difficult for\nbeginners to grasp also if you're\nbuilding something with a lot of State\nyou might have to reach for a third\nparty solution so Redux has always been\npretty popular um Redux also isn't the\neasiest thing to deal with I think Redux\ntoolkit makes it a bit easier that's\nanother a library you can use on top of\nRedux you also Al have mobx which is a\npopular state management tool there's\nsome others like zo zustand zustand I'm\nnot sure how to pronounce it but um\nthat's gaining some traction recoil\nxstate there's a lot of different ways\nyou can manage state within react but I\nwould say learn the the native features\nfirst learn the context API learn the\nyou know usate hook user reducer hook\nand so on now when we get into the\nserver side rendered Frameworks I think\nthat this is where react's ecosystem\nreally shines nextjs is a great\nframework and just great platform to\nbuild react projects with it uses react\nserver components so all of your\ncomponents are actually rendered on the\nserver by default and you can fetch and\nload data very easily from the server\nyou can also make them client side\ncomponents and make them Dynamic just by\nadding a single line at the top saying\nuse client um next JS also is a static\nsite generator so you can create static\nwebsites then you have remix which is\nanother SSR framework that's built on\ntop of it's actually built on top of\nreact router and it's very similar to\nnextjs it's a bit more difficult to\nlearn in my opinion but it does have\nsome features that next doesn't and I do\nhave a crash course on both if you want\nto check them out SSR websites are great\nfor SEO and performance you really get\nthe best of both worlds like like I said\nearlier and you can also use uh\nsomething called a headless content\nmanagement system like content full or\nsanity and I'll talk more about those\nlater but those pair really well with\nSSR\nFrameworks now Gatsby takes a different\napproach compared to traditional single\npage applications or or SSRS it's a\nstatic site generator so instead of\nrendering content on the client via\nJavaScript Gatsby generates static HTML\nfiles at build time so this approach\nresults in really fast load times and\nimproved SEO so it's built on top of\nreact so if you already know react you\ncan easily jump into Gatsby it has a\ndata layer that uses graphql which is a\nquery language for apis and I'll get a\nlittle bit more into that later um but\nyeah Gatsby and nextjs are both used to\ncreate really fast static websites and\nagain you could use something like a\nheadless CMS for your data and use the\nstat static website as your front\nend so of course you can write your own\nCSS and styles but you you might want to\nuse a UI component library or UI kit\nthese are pre-built components that you\ncan use in your application and they're\ngreat for beginners because you don't\nhave to worry about styling you can just\nimport the component and you can use it\nso there's a bunch of these material UI\nis uh really popular one it uses\nGoogle's material design pattern and\nit's very customizable has a a ton of\ncomponents to choose from some other\npopular ones are react bootstrap which\nhas pre-built bootstrap components\nShakra UI which I really like I think\nhas some really goodlooking components\nand then you also have a library called\nstyled components which is a CSS njs\nlibrary that allows you to write CSS in\nyour JavaScript so this is is it doesn't\ncome with pre-built components like the\nother ones do but it allows you to\nessentially create your own pre-built\ncomponents\nso another part of the ecosystem is\nreact native which allows you to build\nnative mobile applications using the\nreact framework and what's great about\nreact native is that you can use the\nsame codebase for both IOS and Android\nusually when you build native mobile\napps you have separate a separate Swift\nCode base for iOS either Swift or\nobjective c and then you'll have a\nseparate cotlin or Java code base for\nAndroid apps where with react native\nit's\nit you have just one app for both and\nit's also great for web developers\nbecause you can essentially use your\nJavaScript skills to build mobile\napplications so those are the main parts\nof the ecosystem but there's plenty of\nother smaller things you might find\nyourself using such as react query which\nis a library for fetching caching and\nsynchronizing data you have libraries to\nwork with forms like formic and react\nhook form react testing library and many\nother libraries to to test your react\napplications there's libraries for\nanimation there's even even Frameworks\nand libraries for using react to build\nVR so virtual reality and augmented\nreality environments um you certainly\ndon't need to learn all of this but if\nyou learn react you can get into all\nthis stuff pretty easily so the vue.js\necosystem almost seems to miror reacts\nit has a lot of the same features and\ntools so create view is similar to\ncreate react app but just for vue.js\nit's a CLI and Scaffolding tool to\ncreate a single page application and\nit's built on top of a build tool called\nvit so vit is a newer build tool that's\nmuch faster than webpack we used uh we\nused to use something called the Vue CLI\nwhich is still around but I don't think\nit's supported anymore I would just\nsuggest using Create view uh if you're\nbuilding a spa with VJs and then Vue\nrouter is the official router for VJs\nit's very similar to react router it\nallows you to create routes for your\napplication it's very easy to use very\nwell documented now State Management\nwith the native vue.js is is pretty easy\ncompared to react just by the way\ncomponents are structured but there are\ntools if you need more advanced State\nManagement so VX used to be the official\nstate management tool for view but now\nit's called pinea which works in a very\nvery similar way to VX and it allows you\nto share your state across components\nand pages and it works of course with\nview version two and version three you\nalso have other options like xstate\nHarlem uh and there's a lot of other\nthirdparty tools you can look into if\nneeded and then nujs is very similar to\nnextjs it's a server side rendered\nframework or meta framework for vue.js\nit's great for SEO and performance it's\nalso a static site generator so it\nincludes most of the features that\nnextjs does as far as filebase routing\nserver components data fetching\nutilities um it uses the Nitro server\nengine if you're a view developer and\nyou want to get into SSR you're probably\ngoing to be learning\nnujs and then gridsum is a popular\nstatic site generator built on top of\nyou and it's very comparable to Gatsby\nand it's ideal for building fast and\nefficient static websites blogs\ndocumentation sites it's also um uh it\nalso uses a graphql data layer just like\nGatsby so you can kind of see the\npattern here everything that react has\nview basically has in its own right and\nthen as far as UI libraries go VY is\nprobably the most popular it's similar\nto material UI for react it's based off\nof Google's material design pattern very\ncustomizable tons of components probably\nwhat I would recommend but there's\nothers as well um if you want to use\nbootstrap components you have bootstrap\nview I believe believe there's also one\ncalled view strap you have quazar Buffy\nwhich is uses the balma framework so\ntons of of UI kits available and then as\nfar as mobile development there's not\nreally something that's directly\ncomparable to react native um you do\nhave native script or native script view\nbut native script you can use any any um\nuh framework with you could even use\nreact with it and it has access to\nNative API so you can essentially create\nuh a native mobile app with View and\nhave a single code base for both IOS and\nAndroid and then some other things you\nmight run into our view query or tan\nstack which is basically the react query\nfor view it's a way to fetch and cache\ndata you have view testing utilities you\nhave native animations that you can use\num that's built into the framework and\nthen for virtual reality you have Vue VR\nso just some things that I figured I'd\nthrow win that you might find uh find in\nthe ecosystem now for angular the the\necosystem isn't as big or I should say a\nlot Mo a lot of the stuff is built into\nangular itself because it's a much more\nfull-featured framework so you're not\nreaching for as many thirdparty\nsolutions so the angular CLI is the\nofficial command line tool for angular\nit allows you to create build test and\ndeploy angular applications and it's\nit's similar to create react app and\ncreate view it's built on top of webpack\nand it's pretty easy to use also very\nwell documented um you can enable SSR\nwith angular CLI which is pretty cool it\nwas initially called angular Universal\nthe SSR framework but that repo has been\nmerged with the CLI there's also options\nto pre-render your app which is similar\nto static site\ngeneration now the angular router is the\nofficial router for angular and it's\nvery similar to react router and view\nrouter except it's built built in you\ndon't have to install it separately and\nit includes things like route guards it\neven has some animation options uh so\nvery cool now as far as state goes one\nthing I really like about angular is the\nconcept of services this gives you an\neasy way to manage your state because\nyou can inject a service into your\ncomponents and you can share data from\nthat service across your entire\napplication okay you also have ngrx\nwhich is the official state management\ntool for Ang\nit's similar to Redux um it's it's\nactually built on top of something\ncalled rxjs which is a library for\nreactive programming using observables\nso dealing with asynchronous code\nsimilar to promises and it's a bit more\ncomplex than other State Management\ntools but also very powerful and it's\ngreat for larger complex\napplications uh and again for SSR and\nstatic sites you can just use the CLI so\nthere is no nextjs or njs for for\nangular U it's all included and bundled\nin the CLI for UI kits angular material\nis pretty popular you also have NG\nbootstrap Prime mg Clarity and a bunch\nof others as well with that you just\nkind of have to go through and see which\nones you like what what components you\nlike the look of and so on uh if you\neven want to use a UI kit and then for\nmobile apps you can use native script\njust as well as you can use it with any\nframework um you can also use ionic for\nhybrid apps which I'll talk about later\nand then as far as other tools you might\nfind yourself using obviously typescript\nbecause that's the default with angular\nsome other packages I've used are\nangular fire to work with Firebase um\nwhich we'll also talk about later formly\nfor forms and angular testing library\nfor testing um and testing is built in\nwith the CLI as\nwell so spelt is newer than the other\nframework it doesn't have as big of an\necosystem because it has an official\nmeta framework called spel kit which is\nawesome I really like the way that spelt\ndoes things it's a full stack framework\nthat allows you to build single page\napps server side rendered apps and\nstatic websit so it's basically an\nall-in-one tool and it's great for SEO\nit's great for performance um it's\nsimilar to nextjs and knjs with some\nelements of Gatsby and gridsome so you\ncan basically build whatever you want\nwith spelt and it's built on top of the\nvit build tool um sapper was the\noriginal meta framework for spelt but\nit's no longer supported so spelt kit is\nbasically the new version of sapper and\nState Management is is really well\nintegrated you don't really need to\nreach for a third-party solution because\nspel kit has uh a context API and built\nin readable and writable stores that you\ncan use to share data between components\nof course if you want you can use a\nthirdparty state manager but I think for\nmost types of applications the built-in\nthe built-in functionality is really all\nyou need and there's also a bunch of UI\nkits like spelt strap which is a port of\nbootstrap for spelt there's U there's\ncarbon components which is aort of IBM's\ncarbon design system as well as flow\nbite and some others so the the way that\nspelt does it I think is is the way to\ndo it just have everything bundled in a\nsingle official meta framework now you\ncan see that a lot of these framework\necosystems basically all copy each other\nthey all have the same features and\ntools so it really comes down to what\nwhich one you like best you can pretty\nmuch build the same stuff with any of\nthem some are might be a little more\nperformant than others but they're all\npretty fast so those are the big\nfront-end Frameworks and ecosystems and\nI know that it's a lot of information\nbut I think it's important to know\nwhat's out there and what I suggest is\nis just trying each one out and seeing\nwhat kind of Vibes with you uh a lot of\npeople on the internet like to say this\none's great and this one sucks don't\never let that be the deciding factor try\nthem out for yourself and see what you\nlike I think they're all great and they\nall have their pros and\ncons all right so let's talk a little\nbit more about typescript I mentioned it\na couple times but didn't really talk\nabout what it really is um it's\navailable for front end and backend if\nyou're using something like node.js\nand typescript is a superet of\nJavaScript meaning that it is\nessentially JavaScript it is the\nJavaScript language but with some added\nfeatures so anything you can do in\nJavaScript you can do in typescript but\nthen in addition you have features um\nsuch as static typing that's kind of the\nmain addition to it is that JavaScript\nby default is a dynamically typed\nlanguage which means that you don't\nspecify the types of your variables or\nfunction return values you don't say\nthis variable is a string or this one's\na number but typescript allows you to do\nthat and you might say well why the hell\nwould I want to do that why would I want\nto write more code when I don't have to\nand it's kind of hard to explain until\nyou use it and really see the benefits\nit's not for everyone but I think it's\nworth learning I think that having types\ndoes require more code but it also makes\nyour code more robust and less prone to\nerrors it also makes your code more\ndescriptive and readable and if you use\nsomething like vs code it will give you\nmore intellisense and show you you know\nwhat properties and methods are\navailable for or or what you're missing\num so there are a lot of reasons to use\ntypescript all right so headless content\nManagement systems are becoming more and\nmore popular and they allow you to\ncreate content in a user interface\nsimilar to what you would do in a\nWordPress admin area and then they\ngenerate an API from your content and\nyou can use that API in whatever front\nend you'd like and these these can also\nbe useful for Freelancers because\nclients can log in they can update their\ncontent easily and uh of course you\ncould create your own custom admin area\nfor them but that takes way more time\nand money and these are really popular\nwith static site generators like Gatsby\nas well as SSR Frameworks like nextjs or\nnjs so let's just take a a look at at a\nfew of the popular ones there's tons of\nthese out there so sanity or sanity.io\nis a headless CMS that can be used by\nprojects of all sizes companies like\nNike and figma use sanity there's a free\noption for personal projects but you can\nalso pay for plans for for teams uh for\nreally large projects so it can be good\nfor really complex applications or\nsomething like a personal blog content\nfull is another popular headless CMS\nthat has a ton of features it's used by\ncompanies like Spotify and Urban\nOutfitters it's also free for personal\nprojects and you can pay for plans for\nteams and there's also extensive\nIntegrations available so strappy is a\nfree and open source headless CMS that's\nbuilt on top of node.js and it uses a\nmongodb database and it's great for\nsmall to mediumsized projects it's also\nvery customizable I like strappy because\nit's open- source and you host and\nmanage or you can host and manage\neverything yourself um the interface is\npretty easy to use as well it can\ngenerate a rest API or a graphql API\nfrom your content I do have a crash\ncourse on strappy if you're interested\nuh I also have a crash course on the\nnext one which is prismic and this is\nanother headless CMS that uses a\nstructured content model based on slices\nand it allows content creators to build\nDynamic page layouts with reusable\ncomponents and this is good for allowing\nnon-technical users or your clients to\ncreate versatile content and and then\nHigh graph is a new uh new product that\nlooks pretty cool it's it's not\nsomething I've used um it's a headless\nCMS with e-commerce capabilities so you\ncan you can build an entire shopping\nplatform API and it integrates\nseamlessly with payment gateways it also\nuses graphql again I'll talk about\ngraphql in a little bit now if you\nhaven't used WordPress in a while you\nmay not know that in addition to the\ntraditional WordPress CMS it also has\nheadless capabilities and you can\ngenerate a rest API from your WordPress\ncontent and it's easy to get up and\nrunning um it's it gives you the the\npowerful WordPress admin interface\nwithout being bound to the front end\nwithout being bound to Wordpress themes\nso you can use anything you want react\nview spelt whatever um so this can be\nreally good for free uh Freelancers as\nwell now there's like I said there's a\nton of these and I would just suggest\ntaking a look look at a few of them and\nseeing if you like it see how you know\nhow the API can can be generated and how\nyou can integrate it into whatever it is\nyou use in your front\nend now there are some other newer\nsmaller Frameworks and other tools that\nI want to mention I'm not going to go\ninto detail about them but I'll give you\na brief overview if you're just starting\nout and learning one of the big\nFrameworks you don't need to worry about\nthese just yet but if you're a more\nexperienced developer you may want to\ncheck them out so solid is a declarative\nJavaScript library for creating user\ninterfaces and it's built on top of jsx\nwhich is the syntax extension to\nJavaScript very similar to react in fast\nin fact the framework overall is very\nsimilar to react and solid js's reactive\nrendering is one of its standout\nfeatures it uses um fine grained\nreactivity to update only the parts of\nthe Dom that actually change resulting\nin high performance and minimal\nrendering so it's fairly easy to learn I\nstill need to create a crash course on\nit it's not as popular as the other\nFrameworks but it's also much newer and\nit's growing in popularity so I won't be\nsurprised if we see a lot more of solid\nJS Alpine JS is a minimal framework for\ncomposing JavaScript behavior in your\nmockup so in your HTML and it's quite\ndifferent than the other ones we've\ntalked about in fact I wouldn't even put\nit in the same category it's more of a\nutility Library it's very small and it's\ngreat for adding some Dynamic elements\nto your website without having to learn\na full framework and you also don't have\nto write any JavaScript it almost makes\nHTML function as if it were a\nprogramming language so you can have\nconditionals and um loops and stuff like\nthat within your HTML just by using\nspecial tags so if you have a basic\nwebsite and you just want to add like a\ndrop down or a modal you can do that\neasily with alpine JS and there's no\nneed to learn learn a full framework it\nalso pairs well with laravel templates\nor you can use it with d Jango and\nFrameworks like that and then HTM X is\nanother really cool technology it's a a\nJavaScript library that allows you to\ncreate Dynamic front ends again without\nwriting any JavaScript code and it does\nthis by allowing you to use special\nattributes in your HTML to make HTTP\nrequests and then update the Dom so it's\nactually similar to Alpine but it's more\nfocused on making HTTP requests and it's\ngreat for adding some some um Dynamic\nelements to your website and making\nrequests to an API or backend without\nhaving to learn a full framework and I\nthink Alpine and HTM X are great\ntechnologies that work much differently\nthan traditional framework so I would\ndefinitely suggest checking them out now\nAstro is one of my favorite new\nFrameworks it's actually a static site\ngenerator as well as an SSR framework\nand you can ALS also create a API\nendpoints with it I just did a quick\nstart course that's available on YouTube\nand on my website what's really cool\nabout Astro is that it builds zero\nJavaScript by default it actually\nrenders the HTML pages on the server and\nuses an architecture called Islands also\nyou can use Astro components which are\nvery simple and straightforward or you\ncan use react components views felt so\nit's it's sort of like a nextjs but it's\nnot bound to react or any other\nframework uh it's also built on top of\nvit which again is a very fast build\ntool so definitely worth look stencil or\nstenciljs is something that I haven't\nused yet but it's a tool chain for\nbuilding reusable scalable component\nlibraries it's it was built by the ionic\nteam and it's a compil compiler that\ngenerates web components so you can\ncreate your own components and you can\nbasically use them in any framework you\nwant or in just just JavaScript so JS\nDoc is something that has been around\nfor a while I actually did a crash\ncourse on it years ago that I forgot\nabout but I'm seeing a lot of it lately\nwhere people are using it in place of\ntypescript and it's actually an API\ndocumentation generator for JavaScript\nbut it can be used to add types to your\nJavaScript code it's not as robust as\ntypescript but it's a lot easier to get\ninto and I'd suggest looking into it and\nseeing if it's something that you might\nbenefit from\nall right so in addition to tools\nlanguages and Frameworks you also have a\nlot of web apis available in the browser\nthat you should be familiar with and I'm\nnot going to go over all of them but\nI'll list some of the common ones here\nmany of these are easy enough to learn I\njust suggest spending a little bit of\ntime on them so the canvas API provides\nuh a means for drawing Graphics via\nJavaScript and the HTML canvas element\nuh among other things it can be used for\nanimation game Gra Graphics data\nvisualization photo manipulation\nrealtime video processing and much more\nso canvas API probably something you you\nwant to check out and then the\ngeolocation API allows users to provide\ntheir location to a web application if\nthey so desire uh for privacy reasons\nthe user is asked for permission before\nthey you know accept to show their\nlocation but this can be very useful for\nthings like Maps weather apps um you can\nc tailor The Experience based on the\nuser's location things like that the web\nstorage API provides mechanisms for the\nbrowser to store key value pairs in uh a\nmuch more intuitive fashion than using\ncookies it also allows you to store more\ndata than cookies and you can store data\nlocally or session based so this is also\ncalled local storage and session\nstorage now the web workers API makes it\npossible to run a script operation in\nthe background thread separate from the\nmain execution thread of a web\napplication so this allows for long\nrunning scripts that are not interrupted\nby scripts that respond to clicks or\nother user interactions and allows long\ntasks to be executed without yielding to\nkeep the the page\nresponsive web the web sockets API makes\nit possible to open a two-way\ninteractive communication session\nbetween the user's browser and a server\nand with this API you can send messages\nto a server and receive event driven\nresponses without having to pull the\nserver for a reply so this is great for\nchat applications and other real time\napplications um then you have the the\nweb and video apis obviously these allow\nyou to create and manipulate audio and\nvideo content you can create audio and\nvideo players record audio and video and\neven create audio\nvisualizations so some others you might\nwant to look into our web RTC for\nrealtime communication and video\nstreaming the Bluetooth API the web\nsearch API things like that um they're\nall fairly easy to get into once you\nlearn the basics of JavaScript so I'd\nsuggest learning about them and maybe\nbuilding a small project with some of\nthem all right now testing is something\nthat you may or may not get into testing\nensures the reliability functionality\nand security of your applications and I\nwould suggest looking at your project\nload to see if testing would be\nbeneficial uh I'm actually creating a\nvideo now that goes into all of that so\nit should be released by the time you\nwatch this now if you're freelancing and\nyou're using something like WordPress or\nbuilding static websites you won't need\nto worry about testing but if you're\nbuilding larger more complex\napplications it can be beneficial or if\nyou're working for a company that\nrequires you to write tests then\nobviously you need to learn it um but I\nthink it's a good idea to at least see\nhow testing Works check out some of the\nlibraries and and some of the different\ntypes of testing as far as the different\ntypes there's a lot of them but I'd say\nthe most common are these three you have\nunit testing this is where it pertains\nto individual units of code this is\nprobably the most common type in web\ndevelopment then integration testing is\nthe process of seeing how different\nelements of your application work\ntogether and then you also have endtoend\ntesting which is the process of testing\nyour entire application from start to\nfinish and every programming language\nhas testing tools I'm not going to go\nover all those but just some of the\npopular ones since we're talking about\nJavaScript just is very popular um it\nwas built by Facebook and it's pretty\neasy to use it includes built-in\nassertion libraries mocking capabilities\npowerful features like snapshot testing\nmocha is another highly flexible testing\nframework for JavaScript uh if you're\nlooking to run endtoend tests Cypress is\nis a good option it's it's JavaScript\nJavaScript based testing that allows you\nto write tests that run in the browser\nand then enzyme is a JavaScript testing\nutility for react you also have react\ntesting Library there's just so many of\nthese and I can't go over all of them\nfor every language but um definitely\nsomething you want to look into if\nyou're looking to build really complex\napplications all right so if you've\nlearned most of what we've talked about\nthen I'd say you're a pretty Advanced\nfront-end developer so so if you're\nfluent with a frontend framework whether\nit's react view felt angular as well as\ntheir ecosystems um so have some\nfrontend tooling skills so you should\nknow how to use npm to install packages\nuh CLI tools module bundlers like vit\nand webpack and then server side\nrendering that's definitely something\nthat a couple years ago I would say is\noptional but now I think that it's\nsomething that you need to get into so\nif you're becoming a react developer\nthen you should be learning about nextjs\nor remix um spelt kit angular SSR njs\nwhatever it is service side rendering I\nthink is the future for um for you know\na big part of web development and then\nstatic site generators also very useful\nif you want to build really fast\nperformant websites uh headless cms's\nare obviously optional but they're\nreally helpful again especially if\nyou're freelancing and you want a way\nfor your client to be able to update\ntheir own content but use whatever you\nwant on the front end so uh really cool\nstuff and then some additional tools\nsuch as typescript uh Alpine HTM X some\nof the newer Technologies you might want\nto just mess with and get into web apis\nI would say you should understand a lot\nof the common uh apis that are available\nlike canvas the speech API geolocation\nthings like that so now that we've gone\nover the front end let's talk about the\nback end end and if you want to be a\nfull stack developer or a backend\ndeveloper that creates apis\nmicroservices you need to learn a\nservers side language or service ey\ntechnology and this is where you start\nto get a lot of options really you can\nuse any language that you want that has\nHTTP capabilities but I'm going to go\nover some of the most popular choices\nand I'll give you some stats at the end\nof this section as well so the first\noption I have is Javascript right\nJavaScript was initially created for the\nbrowser but now we have these runtimes\nthat allow us to use JavaScript as a\nserver side language a very fast server\nside language no JS being the most\ncommon and definitely what I would\nsuggest if you're just getting started\nthere are some newer interesting options\nto play with if you already know node.js\nDoo is a a newer runtime that's built by\nthe same person that created node it's\nvery similar to node but it has some\ninteresting features like built-in\ntypescript support built-in package\nmanager bung s is even newer and more\ninteresting and I'm actually going to\nhave a slide dedicated to to that\ntowards the end but nodejs is very\npopular for building apis microservices\nas well as full stack applications it's\nnon-blocking and event driven which\nmakes it highly efficient for handling\nconcurrent connections and IO\nintensitive tasks what it's not good for\nis CPU intensitive tasks so if you're\nbuilding something that requires a lot\nof processing power you may want to look\ninto something else um but node.js is is\ngreat for just about everything that has\nto do with web development so anything\nwhere we're just doing crud operations\ncreate read update and delete working\nwith databases Etc it's built on the V8\nJavaScript engine which is the same\nJavaScript engine that powers Google\nChrome and it's also pretty easy to get\nstarted with now you'll need to learn\nabout npm which is the node package\nmanager and you can use it to install\nall types of packages and libraries um\nif you're familiar with a front-end\nframework then you already know how to\nuse npm because it's used on the front\nend as well um you'll need to know about\nthe node.js ecosystem there are a lot of\ntools and Frameworks that you can use\nwith node I'll go over some of those\nsoon node is pretty popular with\nstartups as well as large companies and\nthe biggest reason for me why I like\nnode.js is because I like JavaScript and\nI like to have the same language on both\nthe front end and backend so if I'm\nusing react on the front end it's nice\nto be able to use the same language on\nthe back end as\nwell now python is another popular\noption it's a a general purpose\nprogramming language that's used for a\nlot of different things in fact I'd say\nPython's probably one of or the most\ndiverse languages out there it's great\nfor data science machine learning\nautomation but it's also great for web\ndevelopment whether full stack\napplication\nor apis in microservices and python has\ngreat readability um It's relatively\neasy to learn there's some phenomenal\nFrameworks that python offers such as D\nJango and flask I'll talk about those\nsoon and python is great for beginners\nit's uh like I said very readable it's\neasy to get into also at some point if\nyou want to transition from web\ndevelopment to something like data\nscience python is a great option it's\njust a fantastic general purpose\nlanguage overall next we have PHP which\nis a server side scripting language\ndesigned for web development so unlike\npython\nwhere there you can use it for a lot of\ndifferent things PHP isn't really used\noutside of web development at least on a\nlarge scale and its purpose is to build\nDynamic web pages so there's some\npopular platforms that use PHP such as\nWordPress um I think PHP is great for\nFreelancers because again it's a tool\nthat allows you to get things done\nquickly\nand it's Unique from other languages\nbecause you can actually go to a PHP\npage in the browser and load the page on\nthe server and you can write HTML\ndirectly in your PHP files so it's\nessentially a template language and you\ncan't really do that with any other\nlanguages the downside to PHP is that\nyou you get so much Freedom that it's\nreally easy to write bad code and I\nthink that's why PHP does get a bad WAP\nsometimes but if you know what you're\ndoing you can write clean code with PHP\nand Frameworks like\nlaravel address that and pretty much\ndon't allow you to write bad code or\nreally bad code um so it's definitely a\na good choice in my\nopinion now go or goang is a statically\ntyped language developed by Google and\nit's known for its performance and\nefficiency which makes it suitable for\nbuilding web services apis and Powerful\napplications um it's it's also great for\nbuilding things like command line tools\nuh it's a fairly new language but it's\ngrowing in popularity it's among the top\n10 primary languages for professional\nprofessional developers with a share of\nabout\n7% and it's used to it's used by some\nreally big companies and um Power some\nreally huge applications in apis it's\nnot really something you'd use for like\na personal blog it's more for large\nscale applications um one thing about\ngoang is it has a very vast standard\nLibrary so you can build quite a bit\nwithout reaching for any kind of\nframework however there are some great\nFrameworks that you can use with go and\nI'll talk about those soon um it's also\na very secure language it scales well\nmaking it suitable for large scale\napplications and it's used a lot in the\nthe big business world so C is also a\ngeneral purpose language it's a robust\nobjectoriented langu language developed\nby Microsoft it's used for building\ndesktop applications web apps mobile\napps games and more and it's a very\npopular language and used by a lot of\ncompanies it's also used for game\ndevelopment with unity um it's a great\nlanguage to learn and it's very similar\nto Java but better in my opinion it's\nalso used with the Net Framework which\nis a software framework developed by\nMicrosoft that's very very powerful and\ncan be used with many different types of\nprojects then you have asp.net which is\na web framework for building web\napplications um very similar to\nsomething like Jango or laravel but it's\na great language it has good performance\nit's very secure and definitely um\ndefinitely a candidate so Java is\nanother general purpose objectoriented\nlanguage that's actually really similar\nto C Java is used for again desktop apps\nAndroid apps backend web development and\nmore and it's been around for a really\nlong time and it's most popular in the\nEnterprise world it's used by a lot of\nbig companies one stack that I see a lot\nof in big business is Java or C on the\nback end and angular on the front end so\nI may get some crap for this but I think\nJava is one of the best languages to\nlearn programming in general uh it's\nvery strict and it forces you to write\nclean code in an object-oriented way it\nwas actually the first language that\nI've ever worked with so I may be a\nlittle biased on that um I wouldn't use\nit for freelancing or small projects but\nif you're looking to get into a big\ncompany it may be worth\nlearning so Ruby is a dynamic\nobject-oriented programming language\nthat can be used for web applications\nand apis among other things its most\npopular web framework is Ruby on Rails\nand it's tough to talk about Ruby\nwithout talking about Ruby on Rails in\nthe context of web development as far as\nthe language goes I really like it I\nthink it's one of the most readable\nlanguages there is um and it's it's\nalmost like reading English and that was\nactually one of the goals of Matts the\nthe creator of Ruby and it's a pretty\nforgiving language as well it's not a\ncyntax language and it has its own\nunique and expressive syntax it does\ndraw inspiration from languages like\nPearl small talk and lisp all of which\nI've never used to me I think it\nactually is is similar to python uh Ruby\nhas a rich ecosystem of open source\nlibraries and packages called gems which\ncan be easily integrated into Ruby on\nRails projects to extend the\nfunctionality so gems ruby gems it's\nkind of like npm if you're coming from\nthe node.js world or pip if you're\ncoming from Python and you can get\nthings up and running really really\nquickly with Ruby it's great for Rapid\ndevelopment people like to say that Ruby\nis dead sure it's not as common as some\nother languages and it has fell a bit in\nthe past 10 years but there's still a\nlot of companies using it now rust is a\nis actually a systems programming\nlanguage so it's lower level um it can\nalmost relate to something like C++ but\nit also incorporates highlevel language\nfeatures so it's pretty unique and you\ndon't have to worry about things like\nmemory management like you would with C\nor C++ rust isn't typically associated\nwith web development but it does have\nfeatures that can make it a good choice\nand certain situations now rust is a\npopular choice for compiling to web\nassembly enabling the development of\nhigh performance web apps that can run\nin the browser and I'm going to talk\nmore about web assembly later uh it's\nalso a very safe language it's used by\ncompanies like Dropbox Discord Microsoft\num web development probably isn't the\nmost common case for us but it's still a\ngreat language to learn I think it will\ngrow more popular in web development\nbecause it's commonly used with web\nassembly um so as web assembly gets more\npopular I think rust will as well um\nthere's also web Frameworks that you can\nuse that I'll mention in a little bit so\nElixir is new to this guide and it's\nbeen gaining some popularity I've seen\nquite a bit about it it's a functional\nconcurrent general based or general\npurpose language and runs on the erlang\nvirtual machine and it can be used to\nbuild web applications and apis it it's\nvery F tall an and can be used to create\nrealtime applications like I said with\ngoang you probably won't use Elixir for\nsomething like a personal blog or any\nsmall project it's more for large scale\napplications so not something I'd\nrecommend if you're if you're just\ngetting into web development now these\ndefinitely aren't all the languages you\nhave to choose from some other options\nare Scala Pearl Swift and cotlin\nalthough those are really more on more\nfor web app mobile apps sorry um I would\nsuggest looking into a few and seeing\none which ones you like best also look\nat what's popular in your area so this\nis a chart from jetb brains.com for 2017\nto 2023 and it's the percentages for\nlanguages used by web developers and the\npercentages for likely to to adopt so\nyou can see that the most used is\nJavascript then python HTML CSS SQL Java\nand so on so I wouldn't base everything\non this chart but it's just interesting\nto see and you can pause it if you want\nI'll also have the link in the\ndescription um to this to this article\nso now that we've gone over some server\nside languages let's talk about some of\nthe Frameworks that you can use with\nthose languages and I'm not going to go\nover all of them there's no way I could\ndo that but I'll list some of the more\npopular ones here now most of these\nFrameworks fit into either an an an\nopinionated or an unopinionated\nframework so an opinionated framework is\nis one that has a set way of doing\nthings it's very high level and Abstract\nyou kind of have to follow the the\nstructure and follow the rules to use it\nhowever you get a ton of features right\nout of the box an\nunopinionated framework is you don't\nhave as much freedom so what I've done\nis I've split the the Frameworks that\nI'm going to mention up into opinionated\nSL highlevel and unopinionated SL\nminimal all right we'll go in the same\norder as we went with the languages so\nnode.js I should say JavaScript nodejs\nhas a bunch of Frameworks there's way\ntoo many to list here so these are some\nof the the more popular ones now unlike\nthe rest of these languages the most\npopular framework for node.js is\nactually a very min minimal\nunopinionated framework and that's\nExpress so Express is great for building\nweb applications and apis it has a great\nset of features it's well documented\nit's very popular you can find tons of\ncontent in tutorials and courses that\nuse express is a great Community it's\nvery fast and performant so that's\nprobably what I would recommend if\nyou're going with node.js then you have\ncoo which is another minimal framework\nthat was actually created by the same\nteam as Express and it's very similar\nthere's some more modern features but\nit's it's pretty much the same thing you\ncan build a lot of the same stuff and\nsame thing with fastify fastify is an\neven newer framework that is extremely\nfast it's faster than Express and H\nagain has some more modern features but\nagain I'd probably say learn Express\njust because it's so popular and that's\nprobably what you'll end up using all\nright so those are the the the popular\nopinion uh unopinionated or minimal\nFrameworks as far as the highlevel\nopinionated Frameworks we have Nest or\nnestjs which is actually built on top of\nExpress and it's a typescript first\nframework that's very similar to angular\nand I know that sounds weird because\nangular is a front-end framework but it\nactually has a really similar structure\nnow it's very opinionated and you know\nyou have to do things a certain way but\nit's great for building large scale\napplications it's very well documented\nI'd say if you're coming from angular\nand you're you're learning full stack\nand you're getting into node.js you\nmight want to check nestjs out for your\nback end and then Adonis is the last\nnode.js framework that I'll mention it's\nanother very opinionated framework\nthat's very similar to laravel I\nactually think that it's it's really\nunderrated it's an MVC framework that\nhas scaffolding authentication a\ntemplate engine it's it has a lot of the\nfeatures that you find with laravel so\nif you're coming from PHP laravel to\nnode.js a Adonis might be something you\nwant to check out all right so next we\nhave Python and there's a lot of\nFrameworks that you can use with python\nbut there's two that really stick out\nthat are really phenomenal Frameworks\nand that's D Jango and flask and one of\nthem is highlevel opinionated and one of\nthem is is uh minimal and unopinionated\nso D Jango is very high level it's it\nincludes everything that you need to\nbuild a web application it has a\ntemplate engine an omm authentication a\nCLI uh like I said it's very opinionated\nso you have to do things a certain way\nbut you also get a ton out of the box\nincluding an entire admin area to manage\nyour content so basically you can create\nmodels for your content like let's say a\nBlog and you have a post model you'll\nhave an admin area just right out of the\nbox where you can add create read update\nand delete posts so really really cool\num it's great for Freelancers as well\nbecause you have an admin area for your\nclients and then flask is another great\npython framework that's pretty much the\npolar opposite of D Jango flask is very\nminimal uh it's very similar to express\nit's great for building apis you can\nstructure things how you want it's fast\nit's flexible it's a great option so\nnext we have PHP and the two most\npopular Frameworks are laravel and\nSymphony and there's others like code\nigniter which was actually my first PHP\nor I should say my first MVC framework\nthat I was introduced to and I really\nlike it it's not used much anymore but I\nI I don't know code igniter has a\nspecial place in my heart I guess but\nlaravel is in my opinion one of the best\nFrameworks period it's a highlevel\nopinionated framework it includes\neverything you need to build a web app\nit has database migrations has a really\ngreat om called eloquin and I'll get\ninto ORS in a little bit built-in\nauthentication uh with multiple drivers\na CLI a template engine and much more\nI'd say it's pretty similar to Python's\nDjango then you have Symphony which is\nanother great PHP framework it's a bit\nmore complex than larl and it's used by\na lot of big companies laravel is\nactually built on top of symphony\ncomponents because symphony is very\nmodular I created a small course on\nSymphony along time ago but I haven't\nused it in years so a lot of it has kind\nof slipped my mind um but it might be\nsomething you want to check out now Slim\nPHP is another framework that I think is\nreally underrated because you don't\nalways need something as lock as laravel\nor Symphony sometimes you just need a\nsimple framework to build an API or a\nsmall application and slim is great for\nthat it's very similar to both Express\nand flask but for PHP so next we have\ngoang one thing that I realized is with\njust about every language you need a web\nframework to build anything substantial\nwith goang you really don't need a\nframework you can just use a lot from\nthe standard Library so it's very\npowerful it has everything you need to\nbuild a web application um but there are\nsome Frameworks so one is called Jin\nthis is an\nincludes a router template engine and\nmore and it's more like laravel or\nDjango so next we have C and C is a\ngeneral purpose language that is used\nfor all kinds of things web development\nmobile development game development and\nit's used a lot with the Net Framework\nwhich is a software framework developed\nby Microsoft then you have asp.net which\nis a web framework for building web\napplications so asp.net is probably what\nyou're going to use if you do go into\nweb development as a c developer it's\npart of the broader Donnet ecosystem and\nit provides a a flexible platform for\ndeveloping web-based applications you\ncan also use languages like FP and\nVisual Basic with asp.net so asp.net\ncore is the latest version of asp.net\nand it's open source it's crossplatform\nit's a bit more lightweight than the\noriginal platform um but yeah so that's\nprobably what you're going to go with\nwith c now you also have Blazer which is\na newer framework that actually fits\nmore into a front-end framework believe\nit or not so it's part of asp.net core\nand it allows you to build interactive\nweb uis using C instead of JavaScript so\nin many ways it's similar to something\nlike reactor View and it can also be\nused with web assembly which I'll talk\nabout soon so next we have Java the big\nweb web framework for Java is spring and\nit's used by a lot of big companies it's\na bit more complex than some of the\nother Frameworks and it has a lot of\ndifferent parts to it so spring MVC is a\nweb framework that simplifies the\ndevelopment of web applications and\nfollows the model view controller design\npattern and it provides features for\nbuilding web controllers handling\nrequests and rendering views there are\nsome other web Frameworks for Java like\nhibernate uh Apache struts and play\nwhich you can also uh the play framework\nyou can also use with the Scala\nprogramming\nlanguage now if you're using Ruby for\nweb development I'd say there's probably\na 90 99% chance you're going to be using\nRuby on Rails it's a very highlevel\nopinionated framework that just includes\na ton of stuff out of the box and it's\ngreat for Rapid development because you\nbasically have command line tools and\nScaffolding that can pretty much\ngenerate a basic crud application in\nseconds and then you can kind of take it\nfrom there so it's great for large scale\napplications but you can also use it for\nsmaller stuff I actually had a uh a\nknowledgebase app that I built with Ruby\non Rails that served as documentation\nfor my computer repair business a long\nlong time ago uh rails is definitely I'd\nsay in my top five if not top three\nfavorite Frameworks and then Sinatra is\nanother framework that uses Ruby that\ntakes a more minimalistic approach so if\nyou don't need something as in-depth as\nrails you could check out\nSinatra now rust is often associated\nwith systems program but it has gained\npopularity for web development due to\nits focus on safety performance uh\nmodern programming practices while Russ\ndoesn't have as many web Frameworks as\nsome other languages it does offer some\nsolid options for building web\napplications and apis so actic is a high\nperformance web framework for rust it's\nknown for Speed and scalability makes it\nsuitable for real-time applications\nmicroservices uh actic leverages rust\nconcurrency features and it can be a\ngood choice to to handle many\nconnections\nsimultaneously and then rocket is an\nopinionated web framework for rust that\nprioritizes developer productivity so it\naims to create kind of a a great outof\nthebox experience with strong type\nchecking expressive syntax and a focus\non\nsafety now for Elixir you have Phoenix\nwhich is uh a framework that's inspired\nby Ruby on Rails it's a high level\nopinionated framework includes\neverything you need to build a web\napplication uh it's great for building\nlarge scale applications but you can\nalso use it for smaller projects and\nagain it's very similar to Ruby on Rails\nand then plug is a minimal and\ncomposable library for building web apps\nin Elixir uh it's designed to be\nlightweight and\nunobtrusive all right so I mean there's\nother Frameworks as well but chances are\nif you're going with one of these\nlanguages you're probably going to use\none of these Frameworks all right so you\nyou learn a language you learn a\nframework at this point you should\nunderstand HTTP including the request\nresponse cycle methods status codes you\nshould Al also understand the basics of\nrest which is which stands for\nrepresentational State transfer and it's\nan architectural style for building apis\nit's not a standard or protocol it's\njust a set of guidelines for building\napis and I have an older but still\nrelevant crash course on rest apis if\nyou want to check that out and learn\nmore about what what it is no matter\nwhich type of developer you are you\nshould definitely understand rest\nbecause even as a front-end developer\nyou're going to interact with these apis\nand as a backend or full stack developer\nyou'll be building these apis so\nsomething that you just need to know in\nweb development now graphql is a newer\nalternative to rest and it's a query\nlanguage for apis and a runtime for\nfulfilling those queries with your\nexisting data it's a bit more complex\nthan r rest and I wouldn't say that\ngraphql is something that you absolutely\nneed to know but it is helpful um it's a\nlittle bit more powerful because you can\nspecify the data that you want to get\nback from the server where with rest you\nget all of the data that's available so\nfor instance if you have a a rest uh\nendpoint that you hit maybe SL API posts\nit's going to give you all the fields\nfor post you know you might get back 10\nblog posts it's going to have the title\nthe body all that stuff and you can't\nreally say well I just want the title of\nthe post you can't do that with a rest\nAPI with graphql you can you can\nactually send a query that says I want\njust the title and the category or\nwhatever it might be so it's it's more\npowerful than uh than a rest API but\nagain it's not a necessity um as a\nbackend or full stack Dev you'll you may\nbe creating graphql apis and you can do\nthat with many different languages and\nFrameworks and as a front andev you may\nbe interacting with these apis so you'll\nlearn how to make graphql requests and\nparse the data using a client there's\ndifferent graphql clients and one\npopular one is Apollo okay so if you're\na frontend Dev dealing with graphql\nthere's a good chance you might be using\nthe Apollo\nclient now as a backend or full stack\nDev or even as a freelancer that works\nwith WordPress you're going to need to\nlearn about databases and a database is\na collection of data that's stored in a\ncomputer system and the software that we\nuse to work with that database is called\nthe database management system or dbms\nand there's a few different types of\ndatabases so I'm just I just want to go\nover those real quick and talk about\nsome of the the the database systems\nthat are in those types so the first\ntype is the most common and that that's\na relational database and these have\nbeen around forever they're systems that\nhold structured data that can be related\nto each other and data stored in tables\nand rows so you can kind of picture an\nExcel spreadsheet just much more\npowerful and you can have multiple\ntables that are related to each other\nfor example you can have a table for\nyour users and then a table for let's\nsay blog posts and each user can have\nmultiple blog posts so you can relate\nthe two tables together by putting a\nuser ID field in your blog post table\nand we use something called SQ l or SQL\nuh which stands for structured query\nlanguage we use that to interact with\nthese databases so you can create tables\ninsert data update delete data and more\naggregate data and usually in your\napplication you'll use something called\nan OM or an object relational mapper to\ninteract with your database instead of\nwriting raw SQL queries and we'll talk\nmore about ORS uh in a few minutes now\nas far as relational databases go\npostgrads or\npostgresql is one of the most popular um\nfor for all size projects really it's an\nobject relational database so everything\nis looked at as an object with\nproperties and it's very common with\nnode.js and python but of course you can\nuse it with any language as long as\nthere's a driver that supports it so\nyou're not really bound to a specific\ndatabase system just by the language you\nuse but some things are just more\npopular with others so my SQL or MySQL\nis very simil ilar to postgres they work\nin a very similar way and my SQL is very\npopular in the world of PHP so if you're\nlearning PHP and you know you're\nlearning con with content online\ntutorials courses chances are a lot of\nthem are going to be using MySQL and\nthen mssql or Microsoft SQL is used a\nlot with like cop and The NET Framework\nbecause it's part of that whole\nMicrosoft ecosystem but you can still\nuse like postgrads with C so you're not\nbound to any specific system as long as\nthere's a driver available for it now\nyou also have nosql databases these are\nnon-relational databases which store\ndata a bit differently they're more I'd\nsay they're more for huge data sets that\naren't as closely related so you can\nstill have relationships but you don't\nget as many features as you do with\nrelational databases in that aspect and\nwhat these are typically good for is\nperformance and scalability they're also\ngreat for things like realtime web app\napplications you also have a subset of\nnosql databases like document databases\nor key value stores so instead of\nstoring data in tables and rows with\ncolumns you store data in what are\ncalled documents in something called a\ncollection you can kind of think of a\ncollection as a table and a document as\na row or a record in in you know a\nrelational database and documents are\nformatted like Json objects so it really\ngoes well with JavaScript script in fact\nmongodb which is the most common um\nnosql database is used a lot with nodejs\nnow some other nosql databases include\nredis which is a key value store it's\ngreat for caching and storing session\ndata it's also very fast then you have\nCassandra which is a wide column store\nit's great for large scale applications\nneo4j which is actually a graph database\nbut still considered no SQL it's great\nfor storing Rel relationships between\ndata so if you have a social network for\ninstance you can use neo4j to store the\nrelationships between users or whatever\num you also have Coach DB Dynamo DB\nthere's there's tons of of nosql\ndatabases but I would say mongodb is the\nmost popular by far now Cloud databases\nare extremely popular now and it used to\nbe that you would install the database\non your server and set everything up\nyourself but now you can use a cloud\nservice like a AWS or mongodb Atlas\nwhere your database is hosted separately\nso this is great for scaling and\nperformance you can use a lot of the the\nones we talked about um for instance you\ncan set up a remote postgres database\nthrough Amazon web services or a mongodb\ndatabase through Atlas but there's other\nCloud databases such as Google's\nFirebase which is a realtime database\nand it includes everything you need from\nauthentication to file St storage to\nhosting and it's an all-in-one solution\nfor medium and and for small and\nmediumsized apps and then superbase is\nanother uh another one that's similar to\nFirebase it's an open- Source\nalternative that's built on top of\npostgres and it's a great option if you\nwant to host your own database but you\nwant the features of something like\nFirebase because it also includes\nauthentication and stuff like that so I\nprefer to use databases hosted in the\ncloud because it just takes so much work\nout of it you don't have to worry about\nbackups or anything like that you don't\nhave to worry about getting it set up\nyou have full support in most cases um\nas long as you know you usually have to\nbe on a paid plan mongodb Atlas does\noffer a free tier but if you have a\nserious project you're going to want a\npaid plan all right so it just it just\nlets you focus on your application and\nnot have to worry about the database\naspect of it and then fauna DB is\nanother one that's starting to gain a\nlot of traction it's a serverless\ndatabase that is used a lot in the\nJavaScript world and it has a typescript\ninspired developer experience with data\nstored in documents similar to\nmongodb so lastly we have file-based\ndatabases well markdown actually isn't a\ndatabase but I'll explain in a minute so\nthese have little to no setup and\nthey're great for developing they're\ngreat for testing and for just small\nprojects even if you want to use it in\nproduction for like a personal blog or\nsomething like like that so SQL light or\nSQL light it actually is a SQL database\nbut it's file based so you don't have to\ninstall anything or anything like that\nyou just create a file something. DB and\nyou can just use SQL queries and there's\ndifferent there's orms you can use with\nwith it as well so I think it's great\nfor of course just development if you\ndon't want to set up a postgres database\nor something like that and you just want\nto temporarily use SQL light or if you\njust have like a simple blog and you\nyou're not going to have a ton of data\nyou just create a post every couple days\nsqlite is more than enough for something\nlike that now markdown files are also\ngood for um for personal websites for\npersonal blogs things like that\nespecially if you're using something\nlike Gatsby or nextjs there's there's\npackages that you can use to work with\nmarkdown files so when you want to\ncreate a new blog post you would simply\ncreate a new markdown file in a specific\nfolder and you would add the front\nmatter which is the metadata at the top\nand then the post in the body and once\nyou save that it'll automatically be put\ninto your you know your your blog's\nfront end so definitely something to to\nlook into for smaller projects and then\nH2 is another file based database I've\nnever used it so I I really can't say\nmuch about it um I would stick to SQL\nlight or markdown for for development\ntesting as well as small projects if you\ndon't want to install or set up um\npostgres or mongodb or something like\nthat okay so like I said SQL or SQL is\nused to create queries um to insert data\nselect data all that stuff for\nrelational databases but typically you\ndon't write SQL queries raw SQL queries\nin your your application code uh it's\nmore for the command line if you're\nusing uh like the the MySQL shell or\nsomething like that or if you're using\nuh even a guey tool you can usually\nwrite SQL queries within your\napplication you're usually usually going\nto use an OM which stands for object\nrelational mapping and it's a tool so\nyou can interact with your database\nthrough object-oriented programming\nwithin your application and it usually\nhas its own syntax rather like I said\nrather than writing SQL queries and it's\ngreat for productivity it makes your\ncode much neater um it they tend to\nprevent things like SQL injection\nattacks and a lot of the time you can\neasily swap out database systems and\nstill use the same code so even if you\nif you use postgres and you you want to\nswitch to mySQL you can do that just by\nchanging a config and then keep the same\ncode and it still works the same way so\ntypically how they work is you create a\nmodel of your data in your application\nso you might have let's say um let's say\nyou have a work workout app and you have\na a database table or collection called\nworkouts in your application you would\ncreate a model for workouts and you\nwould Define the different fields and\ntypes that the workouts should have and\nthen what you would do is bring that\nworkout model into your file and you\nyou'll be able to do things like\nworkout. find and then pass in whatever\nyou you're you know whatever you're\nlooking for workout with the ID of of a\ncertain number or whatever it might\nmight be much better than writing select\nall from workouts where whatever um so\nit makes things much easier and some ORS\nare specific to the language Andor\ndatabase so these are just some examples\nuh first we have which is an OM\nfor mongod DB and node.js so if you're\nusing those two things together node.js\nand there's a good chance you're\ngoing to be using SQ eyes is also\nan omm for node.js but it supports SQL\ndatab bases like postres MySQL even even\nSQL light and uh and Ms SQL Server as\nwell and it's very popular and easy to\nuse it's very well documented um and\nthen D Jango omm is used for obviously D\nJango websites but you can use it as a\nstandalone or without using D Jango as\nwell SQL Alchemy is an orm for python\nthat supports the same databases that SQ\neyes does and it basically works the\nsame way except it's for Python and you\ncan use it with d Jango flask or any\nother python\nframework and Pongo as I I I don't know\nif I said this but most of these are for\nrelational databases um except for\nMongoose and then you also have P\nwhich is an omm for\nmongodb and python so similar to you\nknow how Mongoose is to node.js then\neloquent is an OM for PHP that's used\nwith laravel and I really like eloquent\nI think it's very eloquent and it's very\neasy to use it has a very clean syntax\nwell documented Doctrine is another or\nfor PHP that supports SQL databases uh\nDapper is an orm for CP and.net very\npopular used by a lot of big companies\nPrisma is a typescript omm with an\nintuitive data model it has automated\nmigrations type safety it lets you\ndeclare your T database tables in a more\nhuman readable way and you can use it\nwith JavaScript typescript rust and I\nbelieve you can use it with\ngoang so drizzle orm is another\ntypescript orm that you can use in in\nSQL like syntax or qu the queries API\nwhich is a more squiz or mongus like\nsyntax and then mro or micro RM I'm not\nsure how it's pronounced I've never use\nthis but it's another typescript RM that\nsupports both mongodb as well as SQL\ndatabases and then nextjs is a query\nbuilder for node.js that supports SQL\ndatabases it's not an omm but it is\nsimilar it's a bit more lowlevel and\nit's great for building SQL queries in a\nprogrammatic way so you can imagine how\nmany of these are when you think of how\nmany languages and how many databases\nthere are so there's no way I can go\nover all of them but I just wanted to\ngive you guys a couple examples all\nright so another thing you'll need to\nlearn pretty much no matter what route\nyou take is is authentication\nauthentication and authorization so\nauthentication is the process of\nverifying the identity of a user it's a\nvery important part of web development\nas a front-end Dev you need to know how\nto consume and use authentication\nservices and as a backend or full stack\nDev you're most likely going to need to\nknow how to implement the entire system\nand there's a few different ways to do\nthis these aren't all of them but these\nare some very common practices so one we\nhave cookies and sessions this is a\npopular way to authenticate basically\nwhen a user logs in a session is created\non the server and a cookie is created on\nthe client and the cookie is sent with\neach request and then the server can\nverify that user based on the session so\nyou should definitely learn about HTTP\nonly cookies and secure cookies this\nwill help you understand how to make\nyour application more secure also you're\ngoing to be want to be aware of things\nlike cross-site scripting and cross-site\nrequest forgeries these are attacks can\nbe used to steal cookies and impersonate\nusers next we have Json web tokens or\njwt's and these are Json objects that\nare signed by the server and they're\nstored on the client in most cases and\nsent with each request and the server\ncan verify the user based on that token\nand this is commonly used with rest apis\nand full stack Java uh full stack\nJavaScript applications and it's a good\nway to protect your API endpoints so so\nthat just not just anybody can visit\nevery\nendpoint then we have ooth which is an\nopen standard for Access delegation and\nit's commonly used as a way for users to\nGrant websites or applications access to\ntheir information on other websites but\nwithout giving them password so for\nexample when you see login with your\nGoogle account or login with your\nFacebook account that's usually ooth so\nthat's another way that you can have\nusers authenticate and you might have a\nmix of oaf and cookies and sessions or\nsomething like that now authentication\nlibraries um you can use you can write\nyour own middleware for authentication\nbut there's a bunch of libraries you can\nuse such as passport or Grant um also\nmany framework such as larl and D Jango\nthey have built-in authentication\nsystems that you can use and extend and\nthen password hashing that's also\nsomething you're going to need to look\ninto um there's libraries like bcrypt\nthat can do this for you you and um you\nknow it'll it'll encrypt the password\nyou never want to save plain text\npasswords in your database and then you\ncan use the bcrypt library to compare a\nplain text password to the encrypted one\nin your database now traditionally we\nhave front end and backend but as I've\nsaid those lines are really getting\nblurred and serverless architecture is\nbecoming more popular now serverless is\nessentially it allows you to run serers\nside code without having to manage your\nown server so you can use a platform\nlike netlify a versel that will give you\nserverless functions um you could also\nuse something like AWS Lambda or Azure\nfunctions platforms like Firebase and\nsuperbase also considered serverless um\nyou can use serverless functions to\nhandle things like authentication\nsending emails protecting data and it\nalso saves you money because you're not\npaying for an an all thetime server a\nserver that's always running you're only\npaying for the time that your code is\nrunning\nand hits those functions okay it's event\ndriven and your code is triggered by\nevents like HTTP requests file uploads\nor database changes so if you have a\nsmall application this is a great option\num serverless architecture is usually\nreally scare uh scary scalable as well\num it's also part of what we call the\njamstack which is a modern web\ndevelopment architecture based on client\nside JavaScript reusable apis and\npre-built markup okay so it's a a great\noption for static websites and small\napplications most of the technologies\nthat are included in the jamstack we've\nalready talked about so that would be\nstatic site generators like Gatsby and\nxjs apis like graph q and rest and then\nserverless functions so it's not really\nanything new it's just a new way of\ndoing things so to learn more you can\ncheck out the jamstack website James Qui\nalso has a great crash course on uh on\nthis channel about more about what the\njamstack is if you want to check that\nout now let's talk about deploying full\nstack applications and apis this is a\nbit more difficult than deploying a\nclient side application or or like a\nstatic website because you typically\nneed a web server like Apache or enginex\nand there can be a lot of configuration\nthat goes into that now how you set that\nup depends on the type of hosting\nservice that you're using uh you can use\nsomething called a platform as a service\nor a pass and then you also have\ninfrastructure as a service or an\nIAS um so a pass or a platform as a\nservice abstracts away the server and\nsometimes the database and you can just\ndeploy your code you usually have a um a\npretty in-depth user interface and you\nhave access to the server through a\nterminal but you don't have to install\nand configure like a patchy and all that\nstuff and this is obviously easier and\ngreat for people that aren't too\nfamiliar with Linux and running servers\nthen you have Cloud hosting and\ninfrastructure as a service and this is\nwhere you have to manually set up and\nconfigure your server um you have full\ncontrol over everything that's that's\nthe nice part about this you can install\nand configure Apache you can install a\ndatabase whatever you want it's\nbasically like having your own Linux\nmachine with root access and again it's\ngreat for people that know what they're\ndoing but a lot of us don't right I'm I\nreally am not that great with with\ndevops I'm not great with setting up\nservers so I prefer to use a platform as\na service um but there are some great\ninfrastructure as a service uh hosting\ncompanies like digital ocean Len Noe um\nand then you have like of course AWS and\naure which are the big boys really large\ncompanies tend to use them if they don't\nhave their own infrastructure um but\nwe're starting to get into devops\nterritory here which is a whole another\ntopic but I just want to mention that\nthere are different typ YP of hosting\nand it depends on what you're building\nand your skill level as to what you\nshould use and I should say that that\ncloud hosting like digital ocean and Len\nNoe I'd say they're they're semi-managed\nbecause they do have images you can use\nto set up an entire environment for you\num you can even set up Docker and and\nI'll talk more about Docker in a little\nbit um but you can have some\npredefined um infrastructure with\ndigital Ocean or Lode or vulture uh\nthere's a lot of companies that do that\nnow for individual developers I suggest\nrender if it fits your need it's great\nfor node.js python PHP rails and a bunch\nof other stuff it's very easy to use\nit's free for personal projects um you\ncan also deploy databases and static\nsites Heroku is another option it's been\naround for a while it used to be what I\nused in tutorials because they had a\ngreat free tear so people could follow\nalong however they did get rid of the\nfree tear so if you're just learning and\ntesting things out you'll probably want\nto go with render because they do have a\npretty generous freet tear and all you\nreally have to do is deploy to or push\nto GitHub and then log into render and\nselect your repo much like you would\nwith netlify or versel and and render\ndoes support full stack\napplications all right so I briefly\nmentioned bung JS but I wanted to have a\ndedicated section for it because it's\nanother one of my favorite new tech\ntechnologies that I really hope takes\noff and I have a crash course on it if\nyou want to go more in depth but it's\nessentially a JavaScript runtime like\nnode.js but it also has a complete\ntoolkit that includes a front-end\nbundler so you can easily build full\nstack applications it has a test Runner\nit has its own node.js compatible\npackage manager so you can run bun\ninstall whatever whatever package you\nwant um it's written in the zig\nprogramming language which is a newer\nlanguage that's gaining some traction uh\nit's very fast it's similar to C but\nwhat I love about bnjs is that it's an\nall-in-one approach and you don't have\nto use webpack or parcel or anything\nlike that it's all just built in um I\nthink that javascript's biggest problem\nis there's just so many different damn\nthings that you need to combine and use\nother languages aren't really like this\nif you have any experience with with\nother languages they have a very\nintegrated close nit ecosystem where\nJavaScript is just all over the place so\nI think that bun really addresses this\nand it's still very new and it's not\nreally ready for production yet at least\nI don't think I haven't checked in a in\na little while but I think it will be\nsoon and I I I'm hoping that it will\ngain a lot of\ntraction all right so up to this point\nwe've talked about everything that you\nneed to know plus a lot of optional\nthings to be a backend or full stack\ndeveloper so obviously you need to know\na server side language which one you\nchoose is really up to you uh if you're\nbuilding web apps or apis you'll need to\nknow a framework it's very rare to\ncreate a substantial application without\na web framework um there are some\nexceptions like if you're using a\nlanguage like goang or rust but even\nthen there are Frameworks that you can\nuse now you'll need to know about\ndatabases this could be a relational or\na a non- relational database you also\nneed to know about ORS so that you can\ncreate models for your data and interact\nwith your database and this could be a\nstandalone or or one that's built into\nyour framework and then authentication\nyou should know how to implement um in\nyour applications this is a very\nimportant part of web development\nwhether you using sessions JWT ooth or\nsomething else or a\ncombination and then you should know how\nto create rest apis from scratch you\nshould know how to create endpoints and\nhandle HTTP requests knowing graph fql\nis also a plus but I don't think it's a\nit's a it's mandatory um you also need\nto know how to make your applications or\napis live on the internet so you need to\nknow deployment and again this this is\nmore difficult than client side stuff\nbut you'll establish a process and it'll\nit'll start to become second nature once\nyou have a a a workflow to deploy\napplications so the next batch of\nTechnologies are things that you may\nwant to get into but I wouldn't say are\nIAL to becoming a developer they're kind\nof extra um they may be essential for\ncertain job positions though so the\nfirst one we'll look at is\ncontainerization and this is a way to\npackage software into standardized units\nfor development shipment and deployment\nand some people don't understand why\nthis is valuable so let's say that\nyou're working on a node.js application\nand you have it running on your local\nmachine everything's working fine then\nyou deploy it to a server and it doesn't\nwork or you give it to uh another you\nknow a coworker another developer and it\ndoesn't work on their machine and you\nhave to figure out why so it could be\nthat the server is running a different\nversion of node.js or maybe it's running\nuh a different operating system and\nsomething got messed up now imagine you\nhave five people 10 people working on\nthat project all having different\nmachines and different operating systems\nand environments so that can be a\nnightmare and with containerization you\ncan package your application into a\ncontainer that includes everything it\nneeds to run uh it's kind of like a\nvirtual machine but it's much more\nlightweight and you can then deploy that\ncontainer to any server and it will run\nthe same way so all five or 10 plus team\nmembers can have the same container on\ntheir local machine and it will run the\nsame way uh it's a great way to ensure\nthat your application will run\nregardless of the environment because it\nincludes the environment uh everything\ndown to the operating system so Docker\nis the main tool that's used for\ncontainerization it's a platform for\nbuilding running and shipping\napplications with containers uh it's\nvery popular and used by a lot of big\ncompanies it's also very well documented\nif you plan on working for a large\ncompany as as anything that has to do\nwith devops then you're going to need to\nknow Docker and then kubernetes is\nanother tool that's used for\ncontainerization it's it's an orchestra\nuh orchestration system for automating\ndeployment scaling and management and\nit's not a a competitor to Docker it's\nactually used with Docker and it allows\nyou to manage multiple containers across\nmultiple servers all right and Aid\ndriven automation is also enhancing the\ncapability of kubernetes and the\ncomplexity is being kind of abstracted\naway more and more and developers will\nbe able to um focus on application\ndevelopment and much less on\ninfrastructure management and there's\nsome other tools that you can use that\nare similar to Docker like vagrant and\nlxc but these are more like virtual\nmachines Docker uses containers which\nare are process level virtualization so\nthey're much more lightweight so next we\nhave web assembly often abbreviated as\nwasm and this is a technology that\nallows us to run high performance code\nwritten in languages like C C++ and rust\nin web browsers and in simple terms\nthink of web assembly as a way to bring\nfast and efficient software written in\nlanguages other than JavaScript to your\nbrowser and JavaScript has obviously\nbeen the programming language of the\nbrowser and just for the web in general\nand is great for many things most things\nwhen it comes to web development however\nit's not good for things like uh\ncomputationally intensive tasks so web\nassembly is great for that and you can\nPort existing code bases to the web so\nif you have like a C++ application you\ncan compile it to web assembly and then\nrun it in the browser so some things\nthat web assembly would be good for are\ngames video editing CAD software things\nlike that and no web assembly will not\nreplace JavaScript it's not meant to\nit's actually meant to work with\nJavaScript so you can use JavaScript to\ninteract with web assembly and we're\nreally not to the point where web\nassembly is just everywhere but it seems\nto to rise every year it seems to gain\nmore\npopularity now next we have mobile\ndevelopment options and I know this is a\nweb development guide however there\nthere is a lot of crossover and you can\nuse your web development skills to build\nmobile applications of course you can\nget into native development mobile\ndevelopment with cotlin or Java for\nAndroid apps as well as Swift or\nobjective c for iOS apps but you can\nalso use Frameworks that allow you to\nbuild crossplatform\napplications with web or web like\nTechnologies so I'm going to go over\nsome of those options now we did already\ntalk about some of the stuff in the\nframework ecosystem section but I'm just\ngoing to quickly go over them again so\nthe first choice is react native and\nobviously we've talked about this a\nlittle bit it's a framework that allows\nyou to build native mobile applications\nwith JavaScript and the react framework\nand what's great about not only react\nnative but all of these really are that\nyou can have a single code base for both\nIOS and Android as opposed to where you\nwould do Native development you'd have\nto have two separate code bases and two\nseparate languages so if you're a react\ndeveloper you're probably going to\ngravitate toward react native it's it's\nvery powerful it's used by a lot of big\ncompanies um next we have flutter which\nis another popular option and it's a\nframework that allows you to build\nnative mobile apps with doart so doart\nwe haven't talked about yet it's a it's\na programming language that's similar to\nJavaScript um so if you already know\nJavaScript Dart is pretty easy to pick\nup flutter uses its own rendering engine\nwritten in C++ called skia and I know\nthat they were working on a new\nrendering engine called uh impeller but\nI'm not positive if that's been released\nyet now flutter does have a slight\nperformance advantage over react native\nbecause it doesn't use a bridge to\ncommunicate with the native components\nlike react native does but these are are\ntwo of the most popular options uh of\ntheir kind now you also have native\nscript\nwhich allows you to access native apis\nusing JavaScript so you can technically\nuse any framework you want to build uh\nNative mobile apps whether it's react\nview spelt angular um or or even just\nvanilla JavaScript so like I said it\ngives you a set of native apis to work\nwith it's not as popular as react native\nor flutter but it could be a viable\noption especially if you want to stick\nto Vue or spelt or angular and then you\nalso have ion IC which has been around\nfor a while it's a mobile SDK software\ndevelopment kit that allows you to build\nhybrid mobile applications with web\nTechnologies like HTML CSS and\nJavaScript so you can also use the\nframework of your choice with ionic now\nit's not going to be as fast as react\nnative or flutter but it it can be a\nviable option I believe years ago you\ncould only use angular but now you can\nuse anything and it's great for\nProgressive web apps which I'm going to\ntalk about next so Progressive web apps\nare web applications that have been\ndesigned to be to to run more like\nnative mobile applications they're fast\nthey work offline they can send push\nnotifications they can even be installed\non the home screen of your mobile device\nso it's not a native app it's a web app\nbut it has it has to pass certain\ncriteria to be considered a pwa or a\nprogressive web app so first it has to\nbe completely responsive no matter what\nscreen size no matter what type of\ndevice it's being viewed on whether it's\na a a cell phone or a a big screen TV it\nalso has to be secure and served over\nhttps that should go without saying\nthese days it has to be able to uh at\nleast have some basic functionality\noffline even if that means just having a\ncustom offline page it should be\nperformant and discoverable by search\nengines and include a manifest file and\na service worker so the Manifest file is\na Json file that contains information\nabout the app like the name description\nicon the service worker is a Javascript\nfile that runs in the background and\nallows you to cash assets and data for\noffline use okay then you can also add\npush notifications make it installable\nso it's a great way to make your\napplication more like a native mobile\napp than a regular web app and you can\nuse a framework like ionic or you can\nuse something like nextjs which has\nbuilt-in support support for pwas\nthere's many different uh Technologies\nand different ways to do\nit now you can also use a lot of the\nsame technologies that you use for web\ndevelopment to create desktop\napplications for Windows Mac and Linux\nnow my suggestion would be electron it\nallows you to use JavaScript to build\nreally fast and Powerful desktop\napplications you can use any front-end\nframework react view angular whatever\nyou want to use it works by bundling\nchromium which is the uh the the browser\nengine that Chrome uses that edge uses\nand a bunch of other browsers it bundles\nthat with node.js into a single runtime\nand apps can be packaged from Mac\nwindows and Linux uh so you have again a\nsingle code base for all three platforms\nand there's a ton of really popular\ndesktop applications that use electron\nat least in some way including vs code\nwhich is probably the the desktop app\nthat we use the most atom slack Discord\nand the postman HTP client so these are\nall things that I use all the time\nanother option that I'm seeing more of\nis Tori and this is a newer framework\nthat's similar to electron but it's\nactually more lightweight and it's\nactually built on Rust so it's very\nperformant and secure it uses the os's\nnative web renderer and the size of a\nTori app can be less than 600 kilobytes\nand you can use front-end Frameworks of\ncourse there's also binding for python\ngo C++ and other languages so it's\ndefinitely something that I plan on\ngetting into this\nyear so next we have neutralino Js and\nthis is another option it's a\nlightweight and portable framework that\nallows you to build crossplatform\ndesktop apps uh with web Technologies\nand it implements a secure websocket\nconnection for Native operations and it\nembeds a static web ser server to serve\nthe web content within the the desktop\napplication also it offers a built-in\nJavaScript client library for\ndevelopers now nwjs is another option\nit's similar to electron but not as\npopular it works in a similar Way by\nbundling chromium with node I do have a\ncrash course on NW as well as electron\nif you're interested um I would say go\nwith electron if you're going to get\ninto this kind of thing and then you\nhave other options for other languages\nfor instance if you're a python\ndeveloper you can look into tkinter to\nbuild desktop applications I do have a\nvideo on that um it's a standard python\ninterface to the um the TK goey toolkit\nshipped with python it's not as popular\nas electron but it it can be an option\nif you're a python developer Ki excuse\nme Ki is another option for Python and\nthen of course you have native uh you\nknow other languages where you can use\nnative tools whether it's Java um WPF\nfor C Coco for Swift whatever it might\nbe but that starts to get out of the\nrange of web development Technologies\nall right so I don't often talk about\nAesthetics in this guide it's based on\nsoftware but I I do think it's important\nto keep up to date with design Trends so\nI just want to mention a couple here so\ntrends for 2024 dark mode is obviously\nextremely popular it has been for a few\nyears I think it's because it's it's\neasier on the eyes and it's also more\nenerg efficient uh and it looks better\nin my opinion at least I personally use\ndoc mode on everything because I get I\nactually get floaters in my eyes if I\nstare at light screens too long so um\nit's actually a health thing for me but\nI know a lot of people like it and it\njust seems to be everywhere whether it's\njust straight up dark mode or you have\nsome kind of Toggler on your UI that\nwill toggle dark and light and then we\nhave ai generated designs so I think\nthat we're going to see more of this\nthis year um there's all kinds of tools\nthat you can use such as mid Journey\nSensei dream Studio you can use these\ntools to create unique designs for your\nprojects now a lot of them do look kind\nof fake and and like super futuristic\nand sometimes they look a bit weird but\nI think it's a cool concept and I think\nit's going to be used more and more as\nas it improves so glass morphism is a\nnewer design Trend that's become pretty\npopular it's a frosted glass effect that\nis used for many things like buttons\ncards and modals it's a bit more subtle\nthan the previous Trend which was uh\nneuro new neumorphism I I don't know how\nto pronounce it uh I think it looks\nreally cool and I think that it'll be\naround for a while and then Clay\nmorphism is a web design Trend that is\ncharacterized by the use of soft rounded\nshapes and pastel colors and this trend\nis inspired by the look and feel of\nclation it's a popular choice especially\nfor younger audiences and then ret rro\nfuturism is a design Trend that's\ninspired by the future and I should say\nit is inspired by the future as imagined\nin the past so like what we used to\nthink the future would look like and\nit's characterized by bright colors\ngeometric shapes futuristic typography\nuh it's a great option for things like\nlanding pages and portfolios all right\nso I just wanted to throw uh a little\nbit of that in there for you guys all\nright so next is iot so internet of\nthings and the metaverse now Internet of\nThings refers to the connection of\neveryday objects to the internet and to\nto one another and it's a very broad\nterm it's used in many Industries but\niot is expected to have a pretty Major\nImpact on web development moving forward\nso we can expect to see more iot enabled\nwebsites uh and web\napplications and this will be you know\nas businesses take advantage of iot to\nimprove their operations so it's\nsomething that you may want to look into\nand then the metaverse is a virtual\nworld where people can interact with\neach other in a virtual environment and\nit's a concept that has been around for\na while but it's really starting to gain\ntraction so it's something that I think\nwill be a big part of the future of the\nweb so if this were a Trends video AI\nwould definitely take the top spot it's\nsomething that's being used in many\nIndustries and it's only going to become\nmore popular so much so that a lot of\npeople are actually terrified uh we\ntalked about tools like co-pilot and\nchat GPT as well as design generation\nbut there's many Tools in many\ncategories so chatbots are another thing\nthat are really becoming popular because\nof AI a chatbot is a a computer program\nthat simulates human conversation\nthrough either voice commands or text\nchats or both and they're used for\nthings like customer service Marketing\nsales so you can expect to to be\nintegrating chatbots into a lot of your\napplications and and then open AI has\nsome amazing apis that you can use to\ncreate your own tools including tools to\ncreate chat Bots uh text to speech\nthings like that and there's a lot of AI\npowered no code tools and I know that\nthat scares a lot of developers but my\nadvice is to use those tools to your\nadvantage to make you a stronger\ncandidate for a job or just a stronger\nfreelancer for clients and just because\nthose tools are available doesn't mean\nevery joeo is going to be able to use\nthem or even want to take the time to\nuse them and I I know it's just kind of\nmy speculation but my My overall advice\nwhen it comes to AI is to use what is\navailable to to better yourself as a\ndeveloper rather than just saying poor\nme it's going to take my job try and use\nit to make yourself better um that's my\nadvice I know some people kind of get\nmad at that some people might say I'm\nnaive but I'd rather be I'd rather have\nthat mind State than the Doom and Gloom\nstate that is definitely not going to\nfind you\nsuccess all right so devops or developer\noperations is a set of practices that\ncombine software development and it\noperations and it's a it's a pretty\nbroad term it can mean different things\nto different people when you talk about\napplication deployment and maintenance\nthat's usually part of devops\ncontainerization with Docker and\nkubernetes and your environment that's\nall all devop stuff uh cicd stands for\ncontinuous integration and continuous\ndeployment and this is using tools so\nthat you can push code to a repository\nand it will automatically deploy to your\nserver and there's tools like Travis CI\nCircle CI um terraform is what we call\ninfrastructure as code or ioc you can\nspecify the state of your infrastructure\nand then automate it um or automate the\nprocess of managing resources and this\ngoes way beyond my scope of knowledge\nthis is just from my own research now a\nlot of these tasks include positions of\ntheir own so a devops engineer is a\nspecific role but as a software\ndeveloper you may need to kind of peek\ninto this world a little bit it really\ndepends on where you work so just\nsomething to take note of now the web is\ngetting much more interactive and\nanimation is a big part of that so\nthere's a lot of libraries that you can\nuse to create animations so I'm just\ngoing to very quickly go over some of\nthe the big ones so Gap is a JavaScript\nanimation Library that's used by a lot\nof big companies it's widely used for\ncreating really complex animations you\nhave anime anime.js is a lightweight\nJavaScript animation library that offers\nsimple and flexible animations with a\nfocus on uh readability it supports CSS\nproperties transforms and more and I do\nhave a a crash course on anime and then\nvelocity JS is known for its Speed and\nPerformance it can be used for animating\nCSS SVG and Dom elements it has a very\nsimple syntax and good\ndocumentation and then react spring is a\nphysics-based animation library for\nreact it provides a sample API for\ncreating interactive animations in react\nthere's other libraries animation\nlibraries that you can use for react and\nother specific Frameworks as well uh 3js\nis a really really cool JavaScript\nlibrary for creating 3D graphics and\nanimations uh it provides a highlevel\nAPI for webg which is a JavaScript API\nfor rendering interactive 2D and 3D\ngraphics with any compatible browser so\nI've seen some really cool stuff built\nwith 3js in fact if you go to the\nwebsite um you'll see a bunch of really\ncool examples that you can look at and\ninteract with and then typed JS I\nfigured I'd throw that in there because\nit's a it's a cool little library for\ncreating text space animations so things\nlike typewriter effects and text\ntransitions so it's a good choice for\nadding Dynamic text content so VR and AR\nwhich is virtual reality and augmented\nreality are getting bigger every year\nand I think it's only a matter of time\nuntil they're common in the world of web\ndevelopment because we're going to have\nwebsites that are virtual we're going to\nhave um websites that have augmented\nreality which is basically a mix of\nvirtual and the real world so if you\nwant to start to get into that now you\ncan it's definitely not something you\nhave to by any means but if you want to\njust mess around there's some\ntechnologies like A-frame which is a web\nframework for building virtual reality\nexperiences it's built on top of HTML\nand it's very easy to use you can also\nuse react 360 virro react there's some\nother Frameworks as well that allow you\nto build virtual reality experiences in\nreact and then arjs is an efficient and\nlightweight JavaScript library for\ncreating augmented reality experiences\non the web and it enables marker based\nAR directly from from the browser and\neven libraries like 3js allow developers\nto create 3D graphics and animations\nthat are that are often used in\ncombination with VR and AR\nFrameworks okay so lastly we have web 3\nwhich is a bit tricky there's so many\ndifferent things that fall under the web\n3 umbrella it's a term that's used to\ndescribe the future of the web there's\nalso many different opinions on it some\npeople will say that it's the future of\ninformation and communication and\nfinance and some say it's a campaign for\nmarketing nfts honestly I don't like\nspeaking too much on web 3 just because\nit's so early and it's such a a broad\nand and kind of uh controversial topic\nnow the blockchain which is a huge part\nof web 3 has proven to be a powerful\ntechnology it's decent it's a\ndecentralized and secure digital Ledger\ntechnology that records transactions\nacross a network of computers and it\nconsists of uh a chain of blocks each\ncontaining a list of transactions and\nonce a block is added to the chain it\nbecomes permanent and tamperproof so it\nenhances trust and transparency and that\nalone is incredibly powerful and I think\nwill stick around uh I think learning\nabout the blockchain and ethereum and\nsmart contracts is a really good idea if\nthat interests you so solidity is the\nlanguage that is used to write what are\ncalled smart contracts uh solidity is a\nbit like JavaScript smart contracts are\nself executing contracts with the terms\nof of the agreement between the buyer\nand seller being directly written into\nthe lines of code and I'm not going to\npretend like I know a ton about it but\nbeing some of the first people to learn\nabout this stuff I think could be a huge\nAdvantage for the future so it's kind of\nlike an investment of your time and of\nyour your learning all right guys so\nthat wraps up this year's guide I know\nthat this was extremely long it's way\nlonger than I wanted it to be but I\ndon't want to just go through some\nslides and just read the bullet points I\nwant to elaborate and just kind of let\nyou know what I know about each part\neach section of this guide so hopefully\nyou learn something from it the time\nstamps are in the Des uh in the\ndescription if you want to go back and\nlook at a certain section uh again I\nhave the page on my website that has a\nguide of my content including YouTube\nvideos and courses that kind of coincide\nwith this the topics in this in this\npresentation\nso thanks so much guys if you watch till\nthe very end I really really appreciate\nthat that's awesome uh if you could like\nthe video I'd appreciate it because this\nthis is basically my biggest video of\nthe year every year um so thanks for\nwatching and I will see you next time\n",
  "words": [
    "music",
    "hey",
    "guys",
    "welcome",
    "practical",
    "web",
    "development",
    "guide",
    "2024",
    "believe",
    "eth",
    "ninth",
    "year",
    "done",
    "think",
    "first",
    "one",
    "back",
    "2016",
    "2017",
    "crazy",
    "fast",
    "time",
    "goes",
    "sure",
    "many",
    "know",
    "every",
    "year",
    "guide",
    "go",
    "every",
    "web",
    "development",
    "technology",
    "think",
    "tools",
    "languages",
    "frameworks",
    "well",
    "different",
    "routes",
    "take",
    "offer",
    "personal",
    "advice",
    "succeed",
    "web",
    "development",
    "extremely",
    "overwhelming",
    "learn",
    "need",
    "learn",
    "many",
    "different",
    "things",
    "try",
    "put",
    "one",
    "place",
    "put",
    "things",
    "perspective",
    "kind",
    "pick",
    "path",
    "also",
    "page",
    "website",
    "content",
    "created",
    "including",
    "youtube",
    "videos",
    "playlists",
    "well",
    "premium",
    "courses",
    "lot",
    "stuff",
    "talk",
    "guide",
    "put",
    "order",
    "well",
    "easy",
    "follow",
    "link",
    "description",
    "right",
    "couple",
    "notes",
    "things",
    "keep",
    "mind",
    "watching",
    "listening",
    "video",
    "uh",
    "long",
    "may",
    "want",
    "kind",
    "put",
    "background",
    "cleaning",
    "exercising",
    "whatever",
    "time",
    "stamps",
    "description",
    "jump",
    "around",
    "want",
    "first",
    "learn",
    "everything",
    "talk",
    "fact",
    "say",
    "impossible",
    "learn",
    "everything",
    "mentioned",
    "guide",
    "even",
    "life",
    "extended",
    "100",
    "years",
    "look",
    "like",
    "restaurant",
    "menu",
    "see",
    "available",
    "pick",
    "choose",
    "looks",
    "good",
    "next",
    "latest",
    "trends",
    "video",
    "know",
    "lot",
    "types",
    "videos",
    "around",
    "time",
    "year",
    "outline",
    "new",
    "technologies",
    "video",
    "absolutely",
    "everything",
    "think",
    "may",
    "learn",
    "web",
    "developer",
    "care",
    "20",
    "years",
    "old",
    "20",
    "days",
    "old",
    "relevant",
    "talk",
    "also",
    "watched",
    "past",
    "years",
    "notice",
    "really",
    "remove",
    "anything",
    "add",
    "stuff",
    "last",
    "year",
    "video",
    "still",
    "year",
    "video",
    "elaborate",
    "bit",
    "differently",
    "even",
    "go",
    "back",
    "previous",
    "years",
    "reference",
    "lastly",
    "always",
    "try",
    "keep",
    "pretty",
    "objective",
    "however",
    "share",
    "opinion",
    "things",
    "try",
    "make",
    "clear",
    "giving",
    "opinion",
    "uh",
    "keep",
    "mind",
    "neither",
    "anyone",
    "else",
    "experience",
    "every",
    "single",
    "piece",
    "technology",
    "guide",
    "based",
    "research",
    "heard",
    "others",
    "right",
    "talk",
    "specific",
    "technologies",
    "want",
    "talk",
    "common",
    "roles",
    "paths",
    "web",
    "developers",
    "choose",
    "think",
    "important",
    "help",
    "decide",
    "want",
    "need",
    "learn",
    "first",
    "one",
    "one",
    "feel",
    "like",
    "overlooked",
    "lot",
    "especially",
    "comes",
    "like",
    "youtube",
    "videos",
    "typically",
    "talk",
    "front",
    "end",
    "backend",
    "full",
    "stack",
    "web",
    "designer",
    "pretty",
    "typical",
    "uh",
    "pretty",
    "typical",
    "path",
    "take",
    "sort",
    "like",
    "mix",
    "development",
    "design",
    "people",
    "focused",
    "front",
    "end",
    "really",
    "build",
    "complex",
    "uis",
    "applications",
    "stick",
    "know",
    "static",
    "websites",
    "small",
    "business",
    "websites",
    "things",
    "like",
    "may",
    "use",
    "cms",
    "like",
    "wordpress",
    "um",
    "usually",
    "pretty",
    "good",
    "design",
    "well",
    "html",
    "css",
    "lot",
    "times",
    "go",
    "solo",
    "freelancers",
    "build",
    "projects",
    "ground",
    "uh",
    "typically",
    "knowledge",
    "programming",
    "know",
    "basic",
    "javascript",
    "etc",
    "usually",
    "enough",
    "build",
    "uh",
    "complex",
    "full",
    "stack",
    "application",
    "without",
    "using",
    "kind",
    "software",
    "get",
    "kind",
    "business",
    "side",
    "things",
    "seo",
    "maybe",
    "marketing",
    "things",
    "like",
    "sounds",
    "interesting",
    "might",
    "take",
    "route",
    "next",
    "guess",
    "common",
    "role",
    "people",
    "start",
    "developer",
    "someone",
    "works",
    "client",
    "side",
    "web",
    "work",
    "user",
    "interface",
    "create",
    "interactions",
    "user",
    "website",
    "web",
    "app",
    "say",
    "lines",
    "front",
    "end",
    "backend",
    "getting",
    "blurred",
    "every",
    "day",
    "especially",
    "technologies",
    "like",
    "nextjs",
    "page",
    "rendered",
    "server",
    "rendered",
    "client",
    "part",
    "developers",
    "work",
    "client",
    "side",
    "web",
    "um",
    "important",
    "technologies",
    "html",
    "css",
    "javascript",
    "general",
    "um",
    "time",
    "also",
    "move",
    "frameworks",
    "like",
    "react",
    "view",
    "angular",
    "talk",
    "later",
    "next",
    "backend",
    "developer",
    "someone",
    "works",
    "server",
    "side",
    "work",
    "databases",
    "database",
    "ors",
    "um",
    "focused",
    "user",
    "us",
    "interface",
    "usually",
    "ones",
    "building",
    "apis",
    "developers",
    "consume",
    "get",
    "data",
    "server",
    "front",
    "end",
    "programming",
    "language",
    "typically",
    "going",
    "javascript",
    "back",
    "end",
    "know",
    "dozens",
    "languages",
    "choose",
    "use",
    "javascript",
    "course",
    "something",
    "like",
    "also",
    "use",
    "python",
    "php",
    "c",
    "many",
    "many",
    "languages",
    "talk",
    "later",
    "fullstack",
    "developer",
    "works",
    "front",
    "back",
    "back",
    "end",
    "need",
    "know",
    "html",
    "css",
    "javascript",
    "also",
    "need",
    "know",
    "server",
    "side",
    "language",
    "server",
    "side",
    "technology",
    "work",
    "databases",
    "ors",
    "like",
    "backend",
    "developer",
    "experience",
    "seems",
    "fullstack",
    "positions",
    "focused",
    "either",
    "front",
    "end",
    "back",
    "end",
    "still",
    "need",
    "know",
    "line",
    "getting",
    "blurred",
    "seems",
    "full",
    "stack",
    "popular",
    "end",
    "goal",
    "people",
    "seems",
    "least",
    "see",
    "know",
    "running",
    "channel",
    "seeing",
    "lot",
    "developers",
    "people",
    "coming",
    "seems",
    "like",
    "front",
    "end",
    "want",
    "start",
    "ultimately",
    "want",
    "full",
    "stack",
    "developers",
    "going",
    "throw",
    "fifth",
    "role",
    "devops",
    "someone",
    "responsible",
    "deployment",
    "maintenance",
    "application",
    "maintenance",
    "servers",
    "um",
    "know",
    "security",
    "scalability",
    "write",
    "code",
    "front",
    "end",
    "backend",
    "development",
    "building",
    "application",
    "building",
    "infrastructure",
    "application",
    "runs",
    "typically",
    "need",
    "know",
    "technologies",
    "like",
    "docker",
    "kubernetes",
    "need",
    "know",
    "certain",
    "hosting",
    "platforms",
    "like",
    "aws",
    "um",
    "might",
    "write",
    "bash",
    "scripts",
    "python",
    "scripts",
    "need",
    "know",
    "manage",
    "linux",
    "server",
    "really",
    "wheelhouse",
    "may",
    "something",
    "interested",
    "usually",
    "separate",
    "role",
    "uh",
    "software",
    "developer",
    "rest",
    "video",
    "talk",
    "certain",
    "technologies",
    "concepts",
    "going",
    "typ",
    "types",
    "developers",
    "pertains",
    "leftand",
    "corner",
    "see",
    "something",
    "like",
    "wd",
    "web",
    "designer",
    "front",
    "end",
    "backend",
    "full",
    "stack",
    "devops",
    "help",
    "keep",
    "track",
    "whatever",
    "goals",
    "right",
    "talked",
    "different",
    "roles",
    "let",
    "talk",
    "goals",
    "paths",
    "take",
    "web",
    "developer",
    "one",
    "thing",
    "want",
    "mention",
    "really",
    "important",
    "goals",
    "change",
    "time",
    "choose",
    "mean",
    "wo",
    "change",
    "later",
    "15",
    "years",
    "freelancer",
    "employee",
    "consultant",
    "instructor",
    "um",
    "done",
    "side",
    "projects",
    "likely",
    "wo",
    "thing",
    "entire",
    "career",
    "feel",
    "like",
    "stuck",
    "whatever",
    "choose",
    "common",
    "learn",
    "code",
    "become",
    "developer",
    "company",
    "know",
    "work",
    "company",
    "get",
    "salary",
    "uh",
    "benefits",
    "pay",
    "vary",
    "greatly",
    "depending",
    "live",
    "company",
    "work",
    "stable",
    "job",
    "worry",
    "finding",
    "clients",
    "anything",
    "like",
    "show",
    "job",
    "hopefully",
    "really",
    "like",
    "coding",
    "get",
    "know",
    "passion",
    "work",
    "really",
    "feel",
    "like",
    "work",
    "get",
    "paid",
    "quite",
    "bit",
    "um",
    "positions",
    "types",
    "including",
    "ones",
    "talked",
    "many",
    "developers",
    "strive",
    "work",
    "like",
    "fang",
    "company",
    "know",
    "facebook",
    "amazon",
    "apple",
    "netflix",
    "google",
    "biggest",
    "tech",
    "compan",
    "ies",
    "world",
    "pay",
    "well",
    "however",
    "lot",
    "companies",
    "pay",
    "well",
    "better",
    "feel",
    "like",
    "work",
    "one",
    "huge",
    "corporations",
    "many",
    "companies",
    "freelancing",
    "another",
    "option",
    "developers",
    "somewhat",
    "business",
    "savvy",
    "definitely",
    "everyone",
    "lot",
    "added",
    "stress",
    "running",
    "business",
    "incredibly",
    "rewarding",
    "many",
    "ways",
    "know",
    "probably",
    "struggle",
    "financially",
    "first",
    "depending",
    "starting",
    "gain",
    "experience",
    "put",
    "possibly",
    "make",
    "much",
    "could",
    "9",
    "to5",
    "um",
    "software",
    "developer",
    "freelancing",
    "essentially",
    "investing",
    "need",
    "know",
    "quite",
    "bit",
    "kind",
    "jack",
    "trades",
    "master",
    "none",
    "typically",
    "starting",
    "solo",
    "need",
    "everything",
    "design",
    "html",
    "cs",
    "whatever",
    "using",
    "backend",
    "backend",
    "using",
    "wordpress",
    "typically",
    "going",
    "go",
    "technologies",
    "allow",
    "create",
    "things",
    "fast",
    "um",
    "also",
    "niche",
    "work",
    "certain",
    "industries",
    "instance",
    "might",
    "medical",
    "websites",
    "something",
    "like",
    "um",
    "many",
    "different",
    "routes",
    "take",
    "within",
    "route",
    "freelancer",
    "another",
    "option",
    "work",
    "startup",
    "little",
    "different",
    "working",
    "large",
    "company",
    "pretty",
    "risky",
    "startups",
    "fail",
    "fact",
    "one",
    "first",
    "employees",
    "rewarding",
    "successful",
    "make",
    "ton",
    "money",
    "um",
    "could",
    "also",
    "think",
    "starting",
    "startup",
    "later",
    "line",
    "would",
    "say",
    "first",
    "goal",
    "learn",
    "code",
    "um",
    "kind",
    "leads",
    "us",
    "next",
    "one",
    "create",
    "product",
    "sas",
    "software",
    "service",
    "could",
    "build",
    "kind",
    "app",
    "could",
    "charge",
    "monthly",
    "recurring",
    "income",
    "would",
    "say",
    "great",
    "secondary",
    "goal",
    "maybe",
    "start",
    "either",
    "employee",
    "freelancer",
    "work",
    "product",
    "think",
    "successful",
    "spare",
    "time",
    "know",
    "starts",
    "grow",
    "could",
    "always",
    "switch",
    "internships",
    "uh",
    "offer",
    "real",
    "world",
    "experience",
    "paid",
    "internships",
    "even",
    "paid",
    "get",
    "lot",
    "experience",
    "looks",
    "great",
    "resume",
    "know",
    "comes",
    "time",
    "find",
    "job",
    "typically",
    "internships",
    "paid",
    "lead",
    "paid",
    "position",
    "great",
    "option",
    "know",
    "get",
    "going",
    "industry",
    "things",
    "would",
    "say",
    "common",
    "especially",
    "first",
    "two",
    "employe",
    "freelancer",
    "um",
    "lot",
    "things",
    "would",
    "say",
    "would",
    "starting",
    "like",
    "consulting",
    "like",
    "teaching",
    "things",
    "like",
    "like",
    "said",
    "earlier",
    "stick",
    "one",
    "thing",
    "choose",
    "path",
    "right",
    "let",
    "get",
    "basic",
    "essential",
    "tools",
    "need",
    "start",
    "coding",
    "first",
    "obviously",
    "need",
    "computer",
    "operating",
    "system",
    "people",
    "ask",
    "time",
    "best",
    "laptop",
    "coding",
    "truth",
    "use",
    "anything",
    "last",
    "5",
    "10",
    "years",
    "web",
    "development",
    "something",
    "like",
    "3d",
    "modeling",
    "need",
    "bit",
    "powerful",
    "computer",
    "web",
    "development",
    "need",
    "much",
    "say",
    "make",
    "sure",
    "least",
    "8",
    "gb",
    "ram",
    "ssd",
    "think",
    "bigger",
    "decision",
    "operating",
    "system",
    "want",
    "use",
    "even",
    "really",
    "comes",
    "preference",
    "people",
    "ask",
    "prefer",
    "like",
    "mac",
    "os",
    "things",
    "seem",
    "work",
    "bit",
    "smoothly",
    "especially",
    "comes",
    "things",
    "like",
    "terminal",
    "think",
    "windows",
    "gotten",
    "lot",
    "better",
    "though",
    "use",
    "windows",
    "say",
    "probably",
    "30",
    "time",
    "prefer",
    "mac",
    "os",
    "serious",
    "projects",
    "obviously",
    "linux",
    "great",
    "option",
    "kind",
    "mimic",
    "production",
    "environments",
    "beneficial",
    "learn",
    "linux",
    "server",
    "administration",
    "going",
    "kind",
    "devops",
    "right",
    "comes",
    "preference",
    "text",
    "editor",
    "write",
    "code",
    "lot",
    "options",
    "personally",
    "prefer",
    "visual",
    "studio",
    "code",
    "free",
    "open",
    "source",
    "powerful",
    "customizable",
    "say",
    "80",
    "90",
    "web",
    "developers",
    "talk",
    "use",
    "vs",
    "code",
    "um",
    "options",
    "sublime",
    "text",
    "technically",
    "free",
    "trial",
    "never",
    "ends",
    "use",
    "long",
    "time",
    "would",
    "suggest",
    "paying",
    "um",
    "adom",
    "free",
    "open",
    "source",
    "vim",
    "also",
    "pretty",
    "popular",
    "bit",
    "advanced",
    "others",
    "uh",
    "quite",
    "learning",
    "curve",
    "powerful",
    "people",
    "use",
    "swear",
    "really",
    "use",
    "mouse",
    "efficient",
    "fast",
    "writing",
    "code",
    "also",
    "idees",
    "integrated",
    "development",
    "environments",
    "little",
    "bit",
    "features",
    "standard",
    "text",
    "editor",
    "really",
    "need",
    "ide",
    "types",
    "web",
    "development",
    "geared",
    "towards",
    "specific",
    "languages",
    "instance",
    "pycharm",
    "python",
    "developers",
    "php",
    "storm",
    "php",
    "developers",
    "may",
    "something",
    "want",
    "look",
    "ultimately",
    "would",
    "definitely",
    "recommend",
    "vs",
    "code",
    "people",
    "far",
    "far",
    "web",
    "browsers",
    "go",
    "really",
    "preference",
    "sure",
    "already",
    "preference",
    "like",
    "chrome",
    "really",
    "specific",
    "reason",
    "everything",
    "need",
    "like",
    "dev",
    "tools",
    "think",
    "chrome",
    "firefox",
    "would",
    "two",
    "popular",
    "firefox",
    "also",
    "great",
    "dev",
    "tools",
    "maybe",
    "little",
    "better",
    "chrome",
    "um",
    "could",
    "even",
    "use",
    "microsoft",
    "edge",
    "came",
    "internet",
    "explorer",
    "days",
    "microsoft",
    "browsers",
    "horrible",
    "remember",
    "i6",
    "nightmare",
    "edge",
    "actually",
    "uses",
    "chromium",
    "hood",
    "could",
    "well",
    "use",
    "um",
    "safari",
    "crazy",
    "brave",
    "really",
    "cool",
    "uh",
    "privacy",
    "features",
    "brave",
    "vivaldi",
    "newer",
    "browser",
    "called",
    "polyan",
    "directed",
    "toward",
    "web",
    "development",
    "free",
    "personally",
    "going",
    "pay",
    "browser",
    "chrome",
    "everything",
    "need",
    "um",
    "preference",
    "terminals",
    "used",
    "developers",
    "really",
    "need",
    "use",
    "terminal",
    "much",
    "framework",
    "clis",
    "npm",
    "git",
    "need",
    "know",
    "least",
    "basics",
    "far",
    "terminal",
    "programs",
    "go",
    "think",
    "default",
    "mac",
    "os",
    "linux",
    "dros",
    "great",
    "uh",
    "windows",
    "windows",
    "used",
    "really",
    "suck",
    "terminals",
    "know",
    "cmd",
    "command",
    "prompt",
    "never",
    "really",
    "could",
    "get",
    "powershell",
    "uh",
    "windows",
    "terminal",
    "bad",
    "ssh",
    "used",
    "use",
    "tools",
    "like",
    "putty",
    "um",
    "prefer",
    "get",
    "bash",
    "windows",
    "bash",
    "terminal",
    "um",
    "could",
    "also",
    "use",
    "windows",
    "subsystem",
    "linux",
    "bit",
    "advanced",
    "though",
    "would",
    "suggest",
    "beginners",
    "um",
    "linux",
    "obviously",
    "tons",
    "thirdparty",
    "terminals",
    "terminator",
    "alitt",
    "mac",
    "os",
    "either",
    "use",
    "default",
    "iterm",
    "2",
    "little",
    "features",
    "think",
    "looks",
    "little",
    "better",
    "right",
    "come",
    "first",
    "big",
    "part",
    "learning",
    "web",
    "developer",
    "html",
    "css",
    "two",
    "technologies",
    "essentially",
    "building",
    "blocks",
    "visual",
    "part",
    "web",
    "html",
    "markup",
    "language",
    "used",
    "structure",
    "content",
    "web",
    "page",
    "css",
    "cascading",
    "stylesheets",
    "styling",
    "language",
    "used",
    "style",
    "content",
    "think",
    "html",
    "skeleton",
    "css",
    "skin",
    "ca",
    "one",
    "without",
    "html",
    "actually",
    "simple",
    "bunch",
    "tags",
    "use",
    "structure",
    "content",
    "far",
    "want",
    "learn",
    "html",
    "want",
    "learn",
    "create",
    "semantic",
    "markup",
    "means",
    "using",
    "correct",
    "tags",
    "correct",
    "content",
    "also",
    "want",
    "learn",
    "accessibility",
    "making",
    "sure",
    "content",
    "accessible",
    "everyone",
    "including",
    "people",
    "disabilities",
    "want",
    "learn",
    "common",
    "tags",
    "attributes",
    "things",
    "like",
    "heading",
    "paragraphs",
    "lists",
    "lot",
    "older",
    "deprecated",
    "tags",
    "even",
    "bother",
    "uh",
    "would",
    "say",
    "semantic",
    "tags",
    "excuse",
    "like",
    "header",
    "footer",
    "important",
    "spend",
    "time",
    "learning",
    "structure",
    "pages",
    "semantically",
    "css",
    "much",
    "different",
    "complex",
    "technology",
    "styling",
    "language",
    "used",
    "style",
    "content",
    "web",
    "page",
    "powerful",
    "constantly",
    "evolving",
    "um",
    "lot",
    "learn",
    "css",
    "want",
    "learn",
    "core",
    "properties",
    "things",
    "like",
    "colors",
    "fonts",
    "box",
    "model",
    "elements",
    "laid",
    "spaced",
    "page",
    "use",
    "margin",
    "padding",
    "borders",
    "um",
    "spec",
    "specificity",
    "important",
    "sometimes",
    "multiple",
    "styles",
    "apply",
    "element",
    "need",
    "know",
    "one",
    "applied",
    "different",
    "units",
    "measurements",
    "like",
    "pixels",
    "rems",
    "percentages",
    "want",
    "learn",
    "different",
    "types",
    "selectors",
    "like",
    "classes",
    "ids",
    "also",
    "call",
    "pseudo",
    "selectors",
    "um",
    "want",
    "learn",
    "different",
    "layout",
    "methods",
    "like",
    "flex",
    "box",
    "grid",
    "used",
    "lay",
    "elements",
    "columns",
    "rows",
    "responsive",
    "design",
    "really",
    "important",
    "projects",
    "look",
    "good",
    "matter",
    "device",
    "viewed",
    "know",
    "elements",
    "responsive",
    "design",
    "media",
    "queries",
    "probably",
    "important",
    "uh",
    "apply",
    "different",
    "styles",
    "based",
    "size",
    "screen",
    "definitely",
    "want",
    "familiar",
    "responsive",
    "design",
    "next",
    "css",
    "frameworks",
    "point",
    "optional",
    "could",
    "go",
    "right",
    "javascript",
    "however",
    "frameworks",
    "make",
    "things",
    "much",
    "easier",
    "comes",
    "creating",
    "layouts",
    "also",
    "popular",
    "lot",
    "companies",
    "use",
    "pretty",
    "easy",
    "learn",
    "comparing",
    "technologies",
    "like",
    "programming",
    "language",
    "personal",
    "advice",
    "would",
    "spend",
    "week",
    "two",
    "learning",
    "one",
    "frameworks",
    "uh",
    "ton",
    "choose",
    "however",
    "main",
    "four",
    "would",
    "suggest",
    "looking",
    "even",
    "specific",
    "say",
    "first",
    "two",
    "opinion",
    "bootstrap",
    "one",
    "original",
    "css",
    "frameworks",
    "around",
    "since",
    "believe",
    "2011",
    "widely",
    "used",
    "technology",
    "large",
    "community",
    "always",
    "plus",
    "component",
    "based",
    "means",
    "lot",
    "classes",
    "use",
    "things",
    "like",
    "buttons",
    "cards",
    "nav",
    "bars",
    "etc",
    "upside",
    "create",
    "uis",
    "websites",
    "really",
    "quickly",
    "less",
    "classes",
    "html",
    "downside",
    "sometimes",
    "bootstrap",
    "websites",
    "look",
    "pretty",
    "similar",
    "fair",
    "say",
    "really",
    "customize",
    "bootstrap",
    "make",
    "look",
    "however",
    "want",
    "learn",
    "sas",
    "css",
    "talk",
    "minute",
    "um",
    "bootstrap",
    "also",
    "easyto",
    "ous",
    "grid",
    "system",
    "lot",
    "people",
    "like",
    "however",
    "definitely",
    "would",
    "suggest",
    "using",
    "css",
    "grid",
    "flex",
    "box",
    "built",
    "css",
    "need",
    "use",
    "bootstrap",
    "grid",
    "another",
    "plus",
    "bootstrap",
    "get",
    "set",
    "javascript",
    "widgets",
    "like",
    "models",
    "carousels",
    "dropdowns",
    "great",
    "people",
    "lot",
    "javascript",
    "experience",
    "still",
    "want",
    "functionality",
    "say",
    "bootstrap",
    "one",
    "best",
    "tools",
    "freelancers",
    "create",
    "websites",
    "layouts",
    "quickly",
    "tailwind",
    "css",
    "seems",
    "popular",
    "right",
    "far",
    "know",
    "content",
    "see",
    "people",
    "talking",
    "see",
    "everywhere",
    "new",
    "projects",
    "lot",
    "startups",
    "using",
    "utility",
    "first",
    "css",
    "framework",
    "allows",
    "build",
    "custom",
    "designs",
    "without",
    "pretty",
    "much",
    "ever",
    "leaving",
    "html",
    "utility",
    "first",
    "makes",
    "bit",
    "different",
    "rest",
    "instead",
    "class",
    "let",
    "say",
    "button",
    "would",
    "generally",
    "mult",
    "multiple",
    "styles",
    "class",
    "style",
    "class",
    "background",
    "color",
    "text",
    "color",
    "padding",
    "almost",
    "never",
    "write",
    "custom",
    "css",
    "every",
    "css",
    "property",
    "class",
    "downside",
    "end",
    "ton",
    "classes",
    "html",
    "upside",
    "really",
    "customize",
    "layout",
    "look",
    "issue",
    "lot",
    "options",
    "right",
    "next",
    "balma",
    "newer",
    "framework",
    "really",
    "like",
    "components",
    "really",
    "easy",
    "use",
    "far",
    "class",
    "names",
    "go",
    "popular",
    "bootstrap",
    "tailwind",
    "also",
    "customizable",
    "tailwind",
    "um",
    "fast",
    "lightweight",
    "think",
    "looks",
    "good",
    "materialize",
    "around",
    "uses",
    "google",
    "material",
    "design",
    "system",
    "far",
    "frameworks",
    "go",
    "think",
    "materialized",
    "one",
    "best",
    "looking",
    "um",
    "obvious",
    "obviously",
    "opinion",
    "ton",
    "components",
    "choose",
    "also",
    "javascript",
    "widgets",
    "like",
    "modals",
    "dropdowns",
    "similar",
    "would",
    "get",
    "bootstrap",
    "um",
    "tell",
    "popularity",
    "come",
    "since",
    "release",
    "tailwind",
    "still",
    "viable",
    "option",
    "frameworks",
    "semantic",
    "ui",
    "foundation",
    "ui",
    "kit",
    "going",
    "go",
    "pretty",
    "similar",
    "learn",
    "one",
    "pretty",
    "easy",
    "pick",
    "another",
    "one",
    "sas",
    "another",
    "option",
    "may",
    "want",
    "learn",
    "around",
    "time",
    "css",
    "adds",
    "extra",
    "functionality",
    "css",
    "allows",
    "write",
    "css",
    "variables",
    "functions",
    "mixins",
    "um",
    "native",
    "css",
    "catching",
    "sas",
    "features",
    "instance",
    "custom",
    "properties",
    "css",
    "essentially",
    "variables",
    "clean",
    "looking",
    "sas",
    "variables",
    "basically",
    "thing",
    "um",
    "still",
    "lot",
    "sas",
    "css",
    "ca",
    "though",
    "nest",
    "inherit",
    "styles",
    "helpful",
    "feature",
    "would",
    "say",
    "learn",
    "sas",
    "using",
    "framework",
    "like",
    "bootstrap",
    "need",
    "customize",
    "styles",
    "also",
    "make",
    "css",
    "modular",
    "separate",
    "different",
    "files",
    "import",
    "one",
    "another",
    "makes",
    "easier",
    "maintain",
    "basically",
    "create",
    "css",
    "framework",
    "separate",
    "file",
    "things",
    "like",
    "button",
    "stop",
    "navbar",
    "styles",
    "around",
    "css",
    "like",
    "les",
    "stylus",
    "kind",
    "faded",
    "away",
    "sas",
    "really",
    "good",
    "ecosystem",
    "command",
    "line",
    "tools",
    "guey",
    "tools",
    "compile",
    "ca",
    "use",
    "sas",
    "files",
    "directly",
    "browser",
    "right",
    "ca",
    "include",
    "like",
    "css",
    "compile",
    "regular",
    "css",
    "different",
    "tools",
    "allow",
    "also",
    "great",
    "theming",
    "want",
    "different",
    "color",
    "options",
    "things",
    "like",
    "um",
    "optional",
    "something",
    "really",
    "easy",
    "learn",
    "learn",
    "could",
    "could",
    "learn",
    "weekend",
    "crash",
    "course",
    "pretty",
    "much",
    "shows",
    "features",
    "need",
    "know",
    "next",
    "batch",
    "really",
    "helpful",
    "tools",
    "likely",
    "learn",
    "use",
    "early",
    "git",
    "version",
    "control",
    "system",
    "saving",
    "versioning",
    "code",
    "well",
    "collaboration",
    "say",
    "learn",
    "matter",
    "type",
    "developer",
    "learn",
    "start",
    "coding",
    "like",
    "learn",
    "right",
    "second",
    "list",
    "uh",
    "something",
    "learn",
    "pretty",
    "early",
    "really",
    "difficult",
    "learn",
    "basics",
    "least",
    "create",
    "github",
    "account",
    "learn",
    "create",
    "repository",
    "push",
    "push",
    "code",
    "remote",
    "repository",
    "terminal",
    "commands",
    "directly",
    "text",
    "editor",
    "guei",
    "markdown",
    "another",
    "thing",
    "probably",
    "learn",
    "markup",
    "language",
    "used",
    "style",
    "text",
    "similar",
    "html",
    "used",
    "lot",
    "places",
    "github",
    "used",
    "readme",
    "files",
    "every",
    "project",
    "create",
    "used",
    "documentation",
    "simple",
    "learn",
    "literally",
    "learn",
    "weekend",
    "even",
    "even",
    "day",
    "uh",
    "things",
    "know",
    "always",
    "go",
    "reference",
    "forget",
    "exact",
    "url",
    "markdown",
    "website",
    "simple",
    "stuff",
    "next",
    "editor",
    "ide",
    "extensions",
    "text",
    "editors",
    "vs",
    "code",
    "sublime",
    "text",
    "adom",
    "extensions",
    "plugins",
    "install",
    "emt",
    "something",
    "anyone",
    "writes",
    "html",
    "css",
    "using",
    "even",
    "extension",
    "vs",
    "code",
    "text",
    "editors",
    "install",
    "gives",
    "really",
    "nice",
    "shortcuts",
    "create",
    "kinds",
    "html",
    "tags",
    "classes",
    "ids",
    "content",
    "css",
    "styles",
    "saves",
    "ton",
    "time",
    "saves",
    "lot",
    "typing",
    "definitely",
    "something",
    "learn",
    "early",
    "live",
    "server",
    "another",
    "great",
    "one",
    "use",
    "time",
    "gives",
    "uh",
    "devel",
    "local",
    "development",
    "server",
    "updates",
    "soon",
    "save",
    "files",
    "go",
    "manually",
    "refresh",
    "page",
    "uh",
    "prettier",
    "something",
    "use",
    "lot",
    "code",
    "formatter",
    "help",
    "keep",
    "code",
    "clean",
    "make",
    "formats",
    "code",
    "save",
    "file",
    "another",
    "thing",
    "would",
    "highly",
    "recommend",
    "learn",
    "shortcuts",
    "editor",
    "makes",
    "much",
    "efficient",
    "makes",
    "code",
    "much",
    "faster",
    "right",
    "next",
    "ai",
    "tools",
    "aid",
    "writing",
    "code",
    "problem",
    "solving",
    "ai",
    "getting",
    "bigger",
    "day",
    "obviously",
    "almost",
    "point",
    "little",
    "bit",
    "scary",
    "know",
    "lot",
    "people",
    "fear",
    "ai",
    "replace",
    "replace",
    "jobs",
    "replace",
    "developers",
    "think",
    "may",
    "true",
    "extent",
    "comes",
    "basic",
    "tasks",
    "part",
    "think",
    "going",
    "change",
    "way",
    "write",
    "code",
    "going",
    "change",
    "landscape",
    "developer",
    "roles",
    "entail",
    "uh",
    "suggestion",
    "would",
    "worry",
    "much",
    "try",
    "utilize",
    "tools",
    "advantage",
    "make",
    "better",
    "developer",
    "two",
    "ai",
    "tools",
    "pretty",
    "much",
    "invaluable",
    "github",
    "chat",
    "gpt",
    "ai",
    "pair",
    "programmer",
    "helps",
    "write",
    "code",
    "install",
    "extension",
    "vs",
    "code",
    "many",
    "editors",
    "uh",
    "perfect",
    "pretty",
    "amazing",
    "helps",
    "efficient",
    "saves",
    "lot",
    "time",
    "um",
    "helps",
    "solve",
    "problems",
    "use",
    "even",
    "things",
    "like",
    "like",
    "generating",
    "sample",
    "data",
    "say",
    "give",
    "know",
    "20",
    "give",
    "jason",
    "file",
    "20",
    "users",
    "fields",
    "generates",
    "really",
    "cool",
    "stuff",
    "others",
    "similar",
    "like",
    "tab9",
    "kite",
    "new",
    "ai",
    "tool",
    "looks",
    "really",
    "interesting",
    "called",
    "codi",
    "used",
    "yet",
    "looks",
    "really",
    "powerful",
    "use",
    "like",
    "auto",
    "completion",
    "suggestions",
    "also",
    "chat",
    "window",
    "interact",
    "ask",
    "questions",
    "project",
    "single",
    "file",
    "entire",
    "project",
    "even",
    "know",
    "hundreds",
    "files",
    "really",
    "cool",
    "chat",
    "gbt",
    "obviously",
    "huge",
    "right",
    "incredible",
    "learning",
    "anything",
    "um",
    "things",
    "really",
    "understand",
    "though",
    "comes",
    "using",
    "tools",
    "like",
    "first",
    "wrong",
    "wrong",
    "fact",
    "ca",
    "rely",
    "uh",
    "use",
    "kind",
    "starting",
    "point",
    "along",
    "resources",
    "thing",
    "make",
    "sure",
    "rely",
    "much",
    "using",
    "generate",
    "code",
    "using",
    "code",
    "without",
    "understanding",
    "favors",
    "use",
    "learning",
    "tool",
    "crutch",
    "find",
    "say",
    "even",
    "use",
    "um",
    "use",
    "correctly",
    "great",
    "tool",
    "next",
    "design",
    "tools",
    "another",
    "area",
    "may",
    "may",
    "need",
    "know",
    "depending",
    "goals",
    "usually",
    "suggest",
    "learn",
    "basics",
    "design",
    "unless",
    "working",
    "strictly",
    "backend",
    "freelancer",
    "going",
    "need",
    "know",
    "stuff",
    "think",
    "one",
    "thing",
    "lot",
    "people",
    "realize",
    "plan",
    "freelancing",
    "kind",
    "eye",
    "design",
    "able",
    "create",
    "good",
    "layouts",
    "websit",
    "unless",
    "outsourcing",
    "work",
    "probably",
    "ca",
    "afford",
    "starting",
    "far",
    "tools",
    "go",
    "figma",
    "great",
    "tool",
    "designing",
    "websites",
    "uis",
    "probably",
    "would",
    "recommend",
    "people",
    "free",
    "uh",
    "easy",
    "use",
    "something",
    "need",
    "rush",
    "learn",
    "help",
    "certain",
    "situations",
    "others",
    "include",
    "sketch",
    "believe",
    "still",
    "mac",
    "os",
    "uh",
    "also",
    "adob",
    "adobe",
    "products",
    "like",
    "xd",
    "photoshop",
    "invision",
    "seems",
    "really",
    "popular",
    "mockups",
    "prototypes",
    "canva",
    "balsamic",
    "well",
    "well",
    "based",
    "topic",
    "design",
    "unless",
    "backend",
    "developer",
    "usually",
    "suggest",
    "learning",
    "least",
    "basic",
    "principles",
    "ones",
    "suggest",
    "keep",
    "mind",
    "building",
    "websites",
    "uis",
    "color",
    "contrast",
    "important",
    "color",
    "paletes",
    "look",
    "good",
    "difference",
    "brightness",
    "elements",
    "see",
    "lot",
    "hero",
    "images",
    "barely",
    "read",
    "text",
    "uh",
    "background",
    "image",
    "want",
    "make",
    "sure",
    "text",
    "readable",
    "one",
    "biggest",
    "obvious",
    "mistakes",
    "see",
    "white",
    "space",
    "also",
    "important",
    "uh",
    "another",
    "big",
    "mistake",
    "see",
    "people",
    "enough",
    "space",
    "elements",
    "much",
    "space",
    "right",
    "amount",
    "white",
    "space",
    "make",
    "huge",
    "difference",
    "really",
    "improve",
    "readability",
    "overall",
    "experience",
    "website",
    "scale",
    "also",
    "important",
    "want",
    "make",
    "sure",
    "elements",
    "sized",
    "correctly",
    "want",
    "huge",
    "button",
    "tiny",
    "input",
    "field",
    "things",
    "like",
    "everything",
    "proportionate",
    "visual",
    "hierarchy",
    "want",
    "make",
    "sure",
    "important",
    "elements",
    "stand",
    "size",
    "color",
    "contrast",
    "helps",
    "users",
    "navigate",
    "website",
    "ui",
    "important",
    "website",
    "looks",
    "also",
    "important",
    "functions",
    "successful",
    "terms",
    "sales",
    "signups",
    "whatever",
    "goal",
    "website",
    "obviously",
    "principles",
    "typography",
    "another",
    "one",
    "want",
    "make",
    "sure",
    "fonts",
    "readable",
    "consistent",
    "things",
    "like",
    "think",
    "skills",
    "anyone",
    "works",
    "front",
    "end",
    "benefit",
    "designer",
    "know",
    "basics",
    "okay",
    "everything",
    "covered",
    "far",
    "creating",
    "static",
    "websites",
    "layouts",
    "really",
    "dynamic",
    "functionality",
    "interactivity",
    "javascript",
    "comes",
    "javascript",
    "programming",
    "language",
    "browser",
    "much",
    "javascript",
    "learn",
    "depends",
    "goals",
    "plan",
    "backend",
    "python",
    "developer",
    "probably",
    "need",
    "learn",
    "much",
    "much",
    "want",
    "become",
    "developer",
    "probably",
    "end",
    "using",
    "javascript",
    "framework",
    "like",
    "react",
    "need",
    "learn",
    "quite",
    "bit",
    "want",
    "backend",
    "full",
    "stack",
    "developer",
    "use",
    "obviously",
    "need",
    "learn",
    "quite",
    "bit",
    "javascript",
    "well",
    "brings",
    "back",
    "end",
    "goal",
    "important",
    "people",
    "always",
    "ask",
    "much",
    "javascript",
    "learn",
    "moving",
    "framework",
    "like",
    "react",
    "shameless",
    "plug",
    "course",
    "called",
    "modern",
    "javascript",
    "beginning",
    "teach",
    "everything",
    "recommend",
    "plus",
    "course",
    "far",
    "know",
    "overview",
    "would",
    "suggest",
    "say",
    "learn",
    "fundamentals",
    "first",
    "variables",
    "functions",
    "conditionals",
    "loops",
    "things",
    "like",
    "want",
    "learn",
    "document",
    "object",
    "model",
    "javascript",
    "interacts",
    "html",
    "css",
    "learn",
    "select",
    "elements",
    "manipulate",
    "going",
    "allow",
    "create",
    "things",
    "like",
    "like",
    "uh",
    "dropdowns",
    "models",
    "menus",
    "know",
    "icons",
    "click",
    "menu",
    "slides",
    "cool",
    "things",
    "like",
    "high",
    "order",
    "array",
    "methods",
    "important",
    "working",
    "data",
    "methods",
    "like",
    "map",
    "filter",
    "also",
    "learn",
    "fetch",
    "api",
    "make",
    "requests",
    "either",
    "backend",
    "public",
    "api",
    "fetch",
    "data",
    "want",
    "learn",
    "http",
    "methods",
    "like",
    "get",
    "post",
    "put",
    "delete",
    "learning",
    "promises",
    "asynchronous",
    "code",
    "general",
    "must",
    "javascript",
    "learn",
    "json",
    "data",
    "format",
    "used",
    "send",
    "data",
    "back",
    "forth",
    "client",
    "server",
    "developer",
    "using",
    "json",
    "data",
    "sent",
    "server",
    "developer",
    "creating",
    "generating",
    "json",
    "data",
    "say",
    "minimum",
    "learn",
    "moving",
    "framework",
    "learn",
    "want",
    "programming",
    "classes",
    "prototypes",
    "things",
    "like",
    "think",
    "good",
    "starting",
    "point",
    "right",
    "wordpress",
    "cms",
    "content",
    "management",
    "system",
    "built",
    "php",
    "programming",
    "language",
    "always",
    "struggle",
    "put",
    "wordpress",
    "guide",
    "technically",
    "full",
    "stack",
    "need",
    "full",
    "stack",
    "developer",
    "use",
    "wordpress",
    "tool",
    "like",
    "matter",
    "uh",
    "common",
    "learning",
    "path",
    "learn",
    "html",
    "css",
    "little",
    "bit",
    "javascript",
    "get",
    "wordpress",
    "possibly",
    "php",
    "actually",
    "path",
    "back",
    "late",
    "2000s",
    "wordpress",
    "especially",
    "handy",
    "freelancers",
    "reasons",
    "allows",
    "uh",
    "build",
    "dynamic",
    "websites",
    "quickly",
    "little",
    "coding",
    "skills",
    "great",
    "clients",
    "easily",
    "update",
    "content",
    "without",
    "create",
    "uh",
    "without",
    "create",
    "custom",
    "admin",
    "area",
    "take",
    "months",
    "build",
    "tons",
    "tons",
    "themes",
    "use",
    "well",
    "pl",
    "plugins",
    "give",
    "certain",
    "functionality",
    "free",
    "paid",
    "uh",
    "always",
    "recommend",
    "people",
    "want",
    "use",
    "wordpress",
    "also",
    "learn",
    "php",
    "really",
    "customize",
    "create",
    "themes",
    "plugins",
    "make",
    "difference",
    "world",
    "client",
    "asks",
    "something",
    "specific",
    "build",
    "theme",
    "want",
    "um",
    "believe",
    "started",
    "freelancing",
    "know",
    "much",
    "php",
    "using",
    "wordpress",
    "lot",
    "times",
    "tell",
    "client",
    "could",
    "pay",
    "someone",
    "else",
    "learned",
    "php",
    "able",
    "go",
    "customize",
    "everything",
    "say",
    "php",
    "javascript",
    "stuff",
    "also",
    "huge",
    "community",
    "support",
    "learning",
    "think",
    "something",
    "like",
    "35",
    "40",
    "web",
    "still",
    "run",
    "wordpress",
    "many",
    "like",
    "small",
    "business",
    "websites",
    "things",
    "like",
    "right",
    "able",
    "create",
    "basic",
    "website",
    "small",
    "application",
    "application",
    "need",
    "know",
    "actually",
    "deploy",
    "live",
    "server",
    "something",
    "lot",
    "people",
    "seem",
    "think",
    "done",
    "project",
    "like",
    "websites",
    "applications",
    "html",
    "css",
    "javascript",
    "pretty",
    "much",
    "hosted",
    "anywhere",
    "need",
    "server",
    "like",
    "apache",
    "engine",
    "x",
    "talk",
    "later",
    "backend",
    "section",
    "literally",
    "hundreds",
    "options",
    "popular",
    "services",
    "static",
    "hosts",
    "like",
    "netlify",
    "versel",
    "github",
    "pages",
    "use",
    "something",
    "like",
    "versell",
    "host",
    "like",
    "nextjs",
    "website",
    "server",
    "rendered",
    "fact",
    "versell",
    "created",
    "nextjs",
    "also",
    "great",
    "plain",
    "old",
    "html",
    "css",
    "projects",
    "three",
    "services",
    "extremely",
    "easy",
    "use",
    "really",
    "push",
    "project",
    "github",
    "already",
    "know",
    "time",
    "link",
    "account",
    "choose",
    "repository",
    "want",
    "deploy",
    "give",
    "url",
    "assign",
    "url",
    "going",
    "want",
    "purchase",
    "domain",
    "website",
    "likely",
    "lot",
    "services",
    "personally",
    "use",
    "name",
    "cheep",
    "google",
    "domains",
    "godaddy",
    "many",
    "different",
    "domain",
    "name",
    "registrars",
    "use",
    "far",
    "ssl",
    "certificates",
    "go",
    "lot",
    "hosting",
    "services",
    "days",
    "include",
    "ssl",
    "really",
    "anything",
    "extra",
    "need",
    "purchase",
    "ssl",
    "certificate",
    "purchase",
    "one",
    "name",
    "cheep",
    "um",
    "different",
    "types",
    "get",
    "free",
    "one",
    "service",
    "called",
    "let",
    "encrypt",
    "might",
    "something",
    "need",
    "look",
    "hosting",
    "services",
    "simple",
    "static",
    "websites",
    "simple",
    "applications",
    "even",
    "ssr",
    "projects",
    "prefer",
    "net",
    "lefi",
    "versel",
    "think",
    "similar",
    "offer",
    "sim",
    "similar",
    "features",
    "get",
    "things",
    "like",
    "form",
    "submissions",
    "serverless",
    "functions",
    "logs",
    "running",
    "business",
    "need",
    "instance",
    "business",
    "email",
    "domain",
    "name",
    "things",
    "like",
    "might",
    "want",
    "go",
    "company",
    "like",
    "hostinger",
    "blue",
    "host",
    "companies",
    "offer",
    "shared",
    "hosting",
    "cheap",
    "usually",
    "like",
    "10",
    "per",
    "month",
    "services",
    "recommending",
    "mostly",
    "projects",
    "get",
    "larger",
    "full",
    "stack",
    "apis",
    "going",
    "need",
    "something",
    "little",
    "little",
    "advanced",
    "something",
    "like",
    "aws",
    "digital",
    "ocean",
    "going",
    "get",
    "services",
    "bit",
    "later",
    "would",
    "suggest",
    "taking",
    "look",
    "seeing",
    "works",
    "know",
    "research",
    "services",
    "right",
    "let",
    "see",
    "point",
    "say",
    "familiar",
    "talked",
    "somewhat",
    "foundational",
    "developer",
    "web",
    "designer",
    "lean",
    "towards",
    "design",
    "well",
    "plan",
    "backend",
    "developer",
    "lot",
    "really",
    "apply",
    "however",
    "usually",
    "suggest",
    "learning",
    "basics",
    "html",
    "css",
    "javascript",
    "even",
    "backend",
    "devs",
    "gives",
    "better",
    "understanding",
    "frontend",
    "works",
    "work",
    "personal",
    "suggestion",
    "know",
    "everybody",
    "enough",
    "time",
    "learn",
    "everything",
    "familiar",
    "development",
    "environment",
    "work",
    "including",
    "text",
    "editor",
    "ide",
    "set",
    "helpful",
    "extensions",
    "kind",
    "local",
    "development",
    "server",
    "like",
    "live",
    "server",
    "uh",
    "terminal",
    "although",
    "point",
    "probably",
    "need",
    "much",
    "know",
    "basics",
    "git",
    "github",
    "know",
    "html",
    "css",
    "pretty",
    "well",
    "enough",
    "create",
    "static",
    "websites",
    "responsive",
    "layouts",
    "good",
    "understanding",
    "box",
    "model",
    "knowing",
    "design",
    "principles",
    "stuff",
    "also",
    "helpful",
    "know",
    "least",
    "enough",
    "javascript",
    "create",
    "dynamic",
    "elements",
    "like",
    "models",
    "dropdowns",
    "tabs",
    "form",
    "validation",
    "ability",
    "make",
    "pages",
    "dynamic",
    "able",
    "add",
    "remove",
    "css",
    "styles",
    "dynamically",
    "javascript",
    "knowledge",
    "uh",
    "http",
    "requests",
    "request",
    "response",
    "cycle",
    "http",
    "methods",
    "using",
    "fetch",
    "api",
    "understand",
    "asynchronous",
    "code",
    "promises",
    "also",
    "able",
    "deploy",
    "basic",
    "website",
    "application",
    "uh",
    "live",
    "server",
    "using",
    "service",
    "like",
    "netlify",
    "versel",
    "whatever",
    "choose",
    "css",
    "frameworks",
    "like",
    "said",
    "optional",
    "opinion",
    "recommended",
    "would",
    "suggest",
    "either",
    "bootstrap",
    "tailwind",
    "easy",
    "enough",
    "learn",
    "help",
    "know",
    "style",
    "websites",
    "much",
    "faster",
    "sas",
    "also",
    "optional",
    "recommended",
    "well",
    "learn",
    "really",
    "fast",
    "think",
    "mentioned",
    "might",
    "really",
    "important",
    "learn",
    "css",
    "jump",
    "kind",
    "css",
    "framework",
    "like",
    "javascript",
    "need",
    "know",
    "fundamentals",
    "move",
    "javascript",
    "framework",
    "um",
    "may",
    "choose",
    "go",
    "wordpress",
    "route",
    "especially",
    "going",
    "freelancing",
    "know",
    "install",
    "set",
    "plugins",
    "themes",
    "widgets",
    "also",
    "work",
    "learning",
    "create",
    "themes",
    "plugins",
    "ready",
    "start",
    "learning",
    "php",
    "far",
    "jobs",
    "go",
    "could",
    "start",
    "applying",
    "knowledge",
    "typically",
    "positions",
    "going",
    "want",
    "know",
    "framework",
    "like",
    "react",
    "view",
    "might",
    "want",
    "learn",
    "one",
    "first",
    "experience",
    "lot",
    "jobs",
    "willing",
    "train",
    "know",
    "know",
    "familiar",
    "javascript",
    "really",
    "gotten",
    "deep",
    "framework",
    "yet",
    "companies",
    "willing",
    "train",
    "um",
    "could",
    "also",
    "start",
    "freelancing",
    "point",
    "could",
    "create",
    "websites",
    "small",
    "businesses",
    "individuals",
    "really",
    "want",
    "go",
    "next",
    "really",
    "depends",
    "want",
    "think",
    "different",
    "paths",
    "take",
    "point",
    "let",
    "say",
    "want",
    "web",
    "designer",
    "work",
    "small",
    "agency",
    "freelance",
    "might",
    "choose",
    "learn",
    "design",
    "get",
    "better",
    "css",
    "maybe",
    "get",
    "wordpress",
    "even",
    "code",
    "tools",
    "like",
    "web",
    "flow",
    "probably",
    "want",
    "learn",
    "seo",
    "practices",
    "well",
    "something",
    "lot",
    "clients",
    "need",
    "um",
    "route",
    "usually",
    "mix",
    "coding",
    "business",
    "work",
    "really",
    "close",
    "clients",
    "businesses",
    "may",
    "even",
    "get",
    "marketing",
    "quite",
    "years",
    "um",
    "could",
    "also",
    "go",
    "uiux",
    "designer",
    "route",
    "kind",
    "scope",
    "guide",
    "um",
    "maybe",
    "find",
    "better",
    "design",
    "coding",
    "seen",
    "lot",
    "people",
    "start",
    "wanting",
    "web",
    "developer",
    "end",
    "um",
    "getting",
    "know",
    "figma",
    "uh",
    "adobe",
    "xd",
    "get",
    "design",
    "side",
    "things",
    "could",
    "option",
    "well",
    "next",
    "option",
    "proceed",
    "front",
    "end",
    "probably",
    "common",
    "among",
    "audience",
    "least",
    "coding",
    "aspect",
    "want",
    "work",
    "company",
    "front",
    "end",
    "even",
    "full",
    "stack",
    "developer",
    "continue",
    "learn",
    "javascript",
    "learn",
    "framework",
    "like",
    "react",
    "view",
    "angular",
    "right",
    "learn",
    "ui",
    "components",
    "state",
    "workflows",
    "build",
    "tools",
    "like",
    "webpack",
    "vit",
    "static",
    "site",
    "generators",
    "like",
    "gatsby",
    "ssr",
    "frameworks",
    "like",
    "next",
    "js",
    "also",
    "learn",
    "testing",
    "performance",
    "route",
    "much",
    "focused",
    "coding",
    "less",
    "design",
    "could",
    "whether",
    "plan",
    "full",
    "stack",
    "developer",
    "want",
    "stress",
    "plan",
    "freelancing",
    "still",
    "proceed",
    "particular",
    "path",
    "really",
    "beneficial",
    "learn",
    "something",
    "like",
    "react",
    "maybe",
    "static",
    "site",
    "generator",
    "like",
    "gatsby",
    "use",
    "along",
    "headless",
    "cms",
    "good",
    "stack",
    "freelancer",
    "create",
    "things",
    "dynamic",
    "create",
    "really",
    "quickly",
    "talk",
    "stuff",
    "soon",
    "next",
    "want",
    "backend",
    "developer",
    "full",
    "stack",
    "developer",
    "start",
    "backend",
    "next",
    "take",
    "approach",
    "move",
    "server",
    "side",
    "programming",
    "language",
    "like",
    "python",
    "c",
    "php",
    "stick",
    "javascript",
    "learn",
    "runtime",
    "like",
    "even",
    "newer",
    "runtime",
    "like",
    "bun",
    "js",
    "dino",
    "also",
    "need",
    "learn",
    "backend",
    "framework",
    "like",
    "express",
    "using",
    "node",
    "jango",
    "python",
    "larl",
    "php",
    "uh",
    "maybe",
    "getting",
    "c",
    "lots",
    "lots",
    "choices",
    "get",
    "also",
    "going",
    "need",
    "know",
    "uh",
    "databases",
    "either",
    "relational",
    "nosql",
    "databases",
    "option",
    "creating",
    "apis",
    "developers",
    "work",
    "going",
    "full",
    "stack",
    "creating",
    "consuming",
    "apis",
    "may",
    "also",
    "want",
    "learn",
    "little",
    "little",
    "bit",
    "devops",
    "deploy",
    "server",
    "side",
    "applications",
    "apis",
    "production",
    "going",
    "continue",
    "see",
    "people",
    "move",
    "frontend",
    "developer",
    "path",
    "going",
    "take",
    "middle",
    "option",
    "look",
    "frameworks",
    "ecosystems",
    "want",
    "address",
    "change",
    "happening",
    "front",
    "end",
    "evolving",
    "quite",
    "bit",
    "may",
    "seem",
    "complicated",
    "overwhelming",
    "first",
    "think",
    "headed",
    "right",
    "direction",
    "website",
    "started",
    "traditional",
    "server",
    "rendered",
    "approach",
    "think",
    "like",
    "php",
    "website",
    "distinct",
    "piece",
    "content",
    "presented",
    "separate",
    "html",
    "pages",
    "whether",
    "static",
    "whether",
    "create",
    "html",
    "pages",
    "generated",
    "kind",
    "server",
    "side",
    "language",
    "like",
    "php",
    "still",
    "common",
    "approach",
    "great",
    "seo",
    "ui",
    "fast",
    "dynamic",
    "use",
    "framework",
    "like",
    "react",
    "many",
    "projects",
    "absolutely",
    "fine",
    "frameworks",
    "come",
    "along",
    "change",
    "building",
    "single",
    "page",
    "applications",
    "spas",
    "entire",
    "ui",
    "entire",
    "application",
    "front",
    "end",
    "bundled",
    "javascript",
    "multiple",
    "javascript",
    "files",
    "browser",
    "loads",
    "single",
    "html",
    "page",
    "click",
    "link",
    "actually",
    "go",
    "new",
    "page",
    "like",
    "would",
    "traditional",
    "html",
    "php",
    "site",
    "changes",
    "url",
    "javascript",
    "handles",
    "rest",
    "makes",
    "site",
    "dynamic",
    "gives",
    "fast",
    "interactive",
    "user",
    "interface",
    "client",
    "side",
    "great",
    "seo",
    "lack",
    "performance",
    "areas",
    "called",
    "ssr",
    "serers",
    "side",
    "rendered",
    "websites",
    "page",
    "initially",
    "rendered",
    "server",
    "default",
    "sent",
    "browser",
    "similar",
    "traditional",
    "websites",
    "however",
    "still",
    "interactive",
    "fast",
    "user",
    "interface",
    "using",
    "client",
    "side",
    "components",
    "frameworks",
    "like",
    "react",
    "view",
    "really",
    "get",
    "best",
    "worlds",
    "called",
    "met",
    "meta",
    "frameworks",
    "ssr",
    "frameworks",
    "different",
    "names",
    "examples",
    "nextjs",
    "use",
    "react",
    "pages",
    "server",
    "side",
    "rendered",
    "nujs",
    "view",
    "spelt",
    "kit",
    "spelt",
    "talk",
    "technologies",
    "bit",
    "kind",
    "approach",
    "st",
    "stting",
    "see",
    "addition",
    "static",
    "site",
    "generators",
    "like",
    "gatsby",
    "gridsum",
    "astro",
    "nextjs",
    "also",
    "static",
    "site",
    "generator",
    "frameworks",
    "allow",
    "build",
    "static",
    "websites",
    "react",
    "view",
    "felt",
    "static",
    "website",
    "dynamic",
    "ui",
    "know",
    "sounds",
    "bit",
    "confusing",
    "think",
    "good",
    "thing",
    "gives",
    "us",
    "options",
    "allows",
    "us",
    "build",
    "better",
    "websites",
    "interactive",
    "websites",
    "applications",
    "instead",
    "talking",
    "frameworks",
    "talking",
    "ssr",
    "static",
    "site",
    "generators",
    "going",
    "talk",
    "together",
    "ecosystem",
    "think",
    "makes",
    "sense",
    "react",
    "developer",
    "want",
    "learn",
    "ssr",
    "probably",
    "going",
    "use",
    "something",
    "like",
    "nextjs",
    "remix",
    "already",
    "know",
    "react",
    "need",
    "learn",
    "nextjs",
    "way",
    "things",
    "since",
    "confusing",
    "especially",
    "beginners",
    "always",
    "say",
    "always",
    "say",
    "always",
    "say",
    "start",
    "single",
    "page",
    "application",
    "learning",
    "react",
    "start",
    "spas",
    "using",
    "create",
    "react",
    "app",
    "talk",
    "minute",
    "basically",
    "go",
    "whatever",
    "framework",
    "documentation",
    "comfortable",
    "move",
    "meta",
    "framework",
    "like",
    "nextjs",
    "think",
    "learning",
    "getting",
    "react",
    "view",
    "getting",
    "entire",
    "ecosystem",
    "include",
    "ssr",
    "ssg",
    "state",
    "management",
    "mobile",
    "frameworks",
    "ui",
    "component",
    "libraries",
    "learn",
    "things",
    "learn",
    "types",
    "projects",
    "build",
    "crap",
    "ton",
    "frameworks",
    "big",
    "four",
    "react",
    "view",
    "spelt",
    "angular",
    "would",
    "suggest",
    "learning",
    "one",
    "choose",
    "obscure",
    "framework",
    "could",
    "go",
    "away",
    "point",
    "know",
    "longer",
    "supported",
    "probably",
    "much",
    "community",
    "may",
    "hard",
    "time",
    "finding",
    "job",
    "would",
    "stick",
    "one",
    "going",
    "go",
    "one",
    "go",
    "ecosystems",
    "one",
    "start",
    "react",
    "framework",
    "created",
    "2013",
    "facebook",
    "would",
    "say",
    "popular",
    "framework",
    "around",
    "quite",
    "years",
    "quite",
    "react",
    "jobs",
    "many",
    "areas",
    "looking",
    "work",
    "developer",
    "react",
    "good",
    "choice",
    "component",
    "based",
    "framework",
    "work",
    "uses",
    "jsx",
    "syntax",
    "extension",
    "javascript",
    "basically",
    "allows",
    "write",
    "html",
    "within",
    "javascript",
    "within",
    "components",
    "required",
    "react",
    "common",
    "way",
    "use",
    "common",
    "way",
    "write",
    "components",
    "say",
    "components",
    "talking",
    "pieces",
    "user",
    "interface",
    "search",
    "input",
    "uh",
    "nav",
    "menu",
    "article",
    "whatever",
    "start",
    "think",
    "website",
    "terms",
    "ui",
    "components",
    "technically",
    "react",
    "ui",
    "library",
    "framework",
    "however",
    "popular",
    "huge",
    "ecosystem",
    "think",
    "fair",
    "call",
    "framework",
    "direct",
    "competitor",
    "frameworks",
    "like",
    "angular",
    "know",
    "react",
    "library",
    "likely",
    "installing",
    "lot",
    "packages",
    "react",
    "one",
    "say",
    "biggest",
    "ecosystem",
    "necessarily",
    "good",
    "thing",
    "means",
    "framework",
    "pretty",
    "bare",
    "bones",
    "need",
    "install",
    "packages",
    "things",
    "like",
    "routing",
    "etc",
    "say",
    "pretty",
    "middle",
    "road",
    "comes",
    "learning",
    "curve",
    "things",
    "might",
    "make",
    "scratch",
    "head",
    "things",
    "bit",
    "easier",
    "frameworks",
    "especially",
    "comes",
    "state",
    "however",
    "much",
    "easier",
    "something",
    "like",
    "angular",
    "least",
    "opinion",
    "also",
    "pretty",
    "quick",
    "get",
    "something",
    "running",
    "comes",
    "performance",
    "frameworks",
    "pretty",
    "impressive",
    "hard",
    "really",
    "gauge",
    "depends",
    "project",
    "write",
    "code",
    "react",
    "generally",
    "performant",
    "angular",
    "um",
    "also",
    "much",
    "lighter",
    "performing",
    "something",
    "like",
    "spelt",
    "depends",
    "project",
    "write",
    "code",
    "use",
    "things",
    "like",
    "memorization",
    "lazy",
    "loading",
    "things",
    "like",
    "improve",
    "performance",
    "also",
    "lot",
    "jobs",
    "react",
    "areas",
    "least",
    "us",
    "really",
    "familiar",
    "countries",
    "definitely",
    "good",
    "reason",
    "get",
    "react",
    "reason",
    "hate",
    "writing",
    "react",
    "may",
    "better",
    "using",
    "something",
    "like",
    "even",
    "less",
    "jobs",
    "remember",
    "less",
    "jobs",
    "probably",
    "less",
    "competition",
    "well",
    "also",
    "remember",
    "lot",
    "jobs",
    "certain",
    "technology",
    "really",
    "popular",
    "lot",
    "people",
    "know",
    "technology",
    "weigh",
    "pros",
    "cons",
    "next",
    "framework",
    "created",
    "evan",
    "u",
    "2014",
    "gains",
    "popularity",
    "every",
    "year",
    "fact",
    "created",
    "created",
    "tech",
    "giant",
    "like",
    "facebook",
    "google",
    "still",
    "one",
    "used",
    "frameworks",
    "pretty",
    "impressive",
    "shows",
    "great",
    "framework",
    "one",
    "main",
    "focus",
    "main",
    "focuses",
    "simplicity",
    "performance",
    "component",
    "based",
    "course",
    "like",
    "rest",
    "uses",
    "template",
    "syntax",
    "similar",
    "html",
    "view",
    "components",
    "simple",
    "area",
    "template",
    "output",
    "html",
    "logic",
    "javascript",
    "styles",
    "two",
    "different",
    "ways",
    "write",
    "javascript",
    "view",
    "components",
    "least",
    "uh",
    "since",
    "version",
    "three",
    "options",
    "api",
    "component",
    "object",
    "properties",
    "methods",
    "view",
    "version",
    "three",
    "introduced",
    "composition",
    "api",
    "uh",
    "setup",
    "function",
    "return",
    "data",
    "methods",
    "function",
    "say",
    "options",
    "api",
    "bit",
    "easier",
    "learn",
    "composition",
    "api",
    "powerful",
    "opinion",
    "though",
    "like",
    "react",
    "view",
    "also",
    "lightweight",
    "pretty",
    "similar",
    "ecosystem",
    "react",
    "comes",
    "know",
    "ssr",
    "ssg",
    "frameworks",
    "take",
    "look",
    "soon",
    "would",
    "say",
    "vue",
    "one",
    "easiest",
    "frameworks",
    "learn",
    "course",
    "saying",
    "relative",
    "others",
    "uh",
    "also",
    "powerful",
    "lot",
    "features",
    "react",
    "said",
    "vue",
    "focus",
    "performance",
    "fast",
    "small",
    "bundle",
    "size",
    "next",
    "angular",
    "created",
    "google",
    "version",
    "back",
    "day",
    "called",
    "angularjs",
    "believe",
    "around",
    "2010",
    "entire",
    "framework",
    "revamped",
    "version",
    "two",
    "angular",
    "hear",
    "angularjs",
    "angular",
    "usually",
    "two",
    "different",
    "frameworks",
    "go",
    "cont",
    "content",
    "things",
    "like",
    "youtube",
    "twitter",
    "know",
    "things",
    "read",
    "online",
    "might",
    "think",
    "angular",
    "kind",
    "dead",
    "however",
    "still",
    "much",
    "alive",
    "used",
    "lot",
    "really",
    "large",
    "companies",
    "enterprise",
    "level",
    "projects",
    "think",
    "going",
    "anywhere",
    "anytime",
    "soon",
    "others",
    "popular",
    "startups",
    "smaller",
    "companies",
    "individuals",
    "course",
    "also",
    "used",
    "really",
    "large",
    "companies",
    "um",
    "see",
    "mostly",
    "react",
    "view",
    "looking",
    "youtube",
    "tutorials",
    "videos",
    "stuff",
    "like",
    "um",
    "yeah",
    "angular",
    "true",
    "opinionated",
    "framework",
    "meaning",
    "certain",
    "ways",
    "things",
    "something",
    "like",
    "react",
    "much",
    "freedom",
    "million",
    "ways",
    "thing",
    "angular",
    "includes",
    "router",
    "http",
    "client",
    "services",
    "animations",
    "much",
    "also",
    "uses",
    "typescript",
    "default",
    "superet",
    "javascript",
    "lets",
    "use",
    "types",
    "use",
    "typescript",
    "framework",
    "however",
    "norm",
    "default",
    "angular",
    "applications",
    "also",
    "ships",
    "angular",
    "cli",
    "command",
    "line",
    "interface",
    "allows",
    "create",
    "angular",
    "application",
    "virtually",
    "configuration",
    "used",
    "build",
    "deploy",
    "app",
    "set",
    "project",
    "spa",
    "single",
    "page",
    "application",
    "ssr",
    "static",
    "site",
    "ecosystem",
    "far",
    "tools",
    "much",
    "smaller",
    "react",
    "view",
    "much",
    "included",
    "framework",
    "think",
    "angular",
    "pretty",
    "steep",
    "learning",
    "curve",
    "usually",
    "recommend",
    "beginners",
    "unless",
    "going",
    "working",
    "company",
    "uses",
    "um",
    "kind",
    "opinion",
    "seems",
    "opinion",
    "lot",
    "people",
    "bundle",
    "size",
    "larger",
    "others",
    "expected",
    "full",
    "featured",
    "however",
    "still",
    "pretty",
    "fast",
    "um",
    "projects",
    "bundle",
    "size",
    "going",
    "issue",
    "anyway",
    "last",
    "one",
    "spelt",
    "modern",
    "javascript",
    "framework",
    "building",
    "web",
    "applications",
    "takes",
    "kind",
    "different",
    "approach",
    "fact",
    "technically",
    "spelt",
    "compiler",
    "focuses",
    "shifting",
    "lot",
    "work",
    "traditionally",
    "done",
    "runtime",
    "compile",
    "time",
    "frameworks",
    "like",
    "ones",
    "talked",
    "use",
    "called",
    "virtual",
    "dom",
    "spelt",
    "comp",
    "piles",
    "components",
    "highly",
    "optimized",
    "vanilla",
    "javascript",
    "code",
    "build",
    "process",
    "results",
    "faster",
    "efficient",
    "applications",
    "also",
    "lightweight",
    "four",
    "far",
    "writing",
    "codes",
    "felt",
    "offers",
    "simple",
    "intuitive",
    "approach",
    "components",
    "written",
    "using",
    "clean",
    "html",
    "like",
    "syntax",
    "javascript",
    "logic",
    "embedded",
    "directly",
    "within",
    "write",
    "spelt",
    "code",
    "feels",
    "lot",
    "like",
    "vanilla",
    "javascript",
    "say",
    "frameworks",
    "almost",
    "like",
    "wish",
    "javascript",
    "would",
    "terms",
    "create",
    "events",
    "dynamic",
    "interaction",
    "html",
    "uh",
    "spelt",
    "pretty",
    "easy",
    "learning",
    "curve",
    "say",
    "spelt",
    "view",
    "definitely",
    "easiest",
    "learn",
    "uh",
    "straightforward",
    "development",
    "experience",
    "makes",
    "attractive",
    "choice",
    "building",
    "modern",
    "web",
    "applications",
    "downside",
    "felt",
    "fairly",
    "new",
    "comes",
    "finding",
    "jobs",
    "see",
    "lot",
    "saying",
    "ca",
    "find",
    "job",
    "spelt",
    "developer",
    "lot",
    "react",
    "view",
    "angular",
    "jobs",
    "great",
    "framework",
    "though",
    "would",
    "suggest",
    "checking",
    "um",
    "ecosystem",
    "spelt",
    "really",
    "small",
    "official",
    "meta",
    "framework",
    "called",
    "spelt",
    "kit",
    "pretty",
    "much",
    "includes",
    "everything",
    "need",
    "build",
    "full",
    "stack",
    "application",
    "build",
    "spas",
    "ssr",
    "static",
    "websites",
    "handles",
    "routing",
    "building",
    "dev",
    "server",
    "much",
    "right",
    "want",
    "talk",
    "ecosystems",
    "four",
    "frameworks",
    "instead",
    "showing",
    "page",
    "ssr",
    "frameworks",
    "static",
    "site",
    "generators",
    "keeping",
    "within",
    "particular",
    "framework",
    "ecosystem",
    "stuff",
    "tools",
    "built",
    "framework",
    "thirdparty",
    "tools",
    "add",
    "function",
    "going",
    "start",
    "react",
    "biggest",
    "ecosystem",
    "talk",
    "others",
    "going",
    "see",
    "available",
    "react",
    "also",
    "available",
    "others",
    "whether",
    "native",
    "features",
    "thirdparty",
    "packages",
    "start",
    "create",
    "react",
    "app",
    "probably",
    "going",
    "start",
    "starting",
    "learn",
    "react",
    "traditional",
    "way",
    "use",
    "react",
    "cli",
    "command",
    "line",
    "interface",
    "allows",
    "spin",
    "project",
    "configuration",
    "great",
    "beginners",
    "would",
    "use",
    "create",
    "spa",
    "single",
    "page",
    "application",
    "could",
    "install",
    "react",
    "manually",
    "wanted",
    "would",
    "suggest",
    "create",
    "react",
    "app",
    "gives",
    "additional",
    "features",
    "like",
    "hut",
    "reloading",
    "gives",
    "dev",
    "server",
    "service",
    "worker",
    "built",
    "top",
    "webpack",
    "build",
    "tool",
    "eject",
    "create",
    "react",
    "app",
    "want",
    "customize",
    "configuration",
    "really",
    "dig",
    "webpack",
    "would",
    "suggest",
    "unless",
    "really",
    "know",
    "said",
    "react",
    "referred",
    "framework",
    "technically",
    "ui",
    "library",
    "essential",
    "things",
    "would",
    "find",
    "framework",
    "router",
    "one",
    "things",
    "single",
    "page",
    "application",
    "need",
    "manually",
    "define",
    "routes",
    "like",
    "ssr",
    "framework",
    "put",
    "file",
    "certain",
    "folder",
    "accessible",
    "need",
    "install",
    "router",
    "need",
    "create",
    "routes",
    "popular",
    "way",
    "react",
    "router",
    "official",
    "router",
    "would",
    "use",
    "typically",
    "learn",
    "along",
    "react",
    "easy",
    "use",
    "lot",
    "features",
    "well",
    "documented",
    "comes",
    "managing",
    "state",
    "data",
    "application",
    "component",
    "level",
    "state",
    "pertains",
    "component",
    "pretty",
    "easy",
    "handle",
    "app",
    "level",
    "global",
    "state",
    "need",
    "share",
    "data",
    "multiple",
    "components",
    "opinion",
    "react",
    "best",
    "state",
    "management",
    "box",
    "context",
    "api",
    "use",
    "along",
    "hooks",
    "fairly",
    "difficult",
    "beginners",
    "grasp",
    "also",
    "building",
    "something",
    "lot",
    "state",
    "might",
    "reach",
    "third",
    "party",
    "solution",
    "redux",
    "always",
    "pretty",
    "popular",
    "um",
    "redux",
    "also",
    "easiest",
    "thing",
    "deal",
    "think",
    "redux",
    "toolkit",
    "makes",
    "bit",
    "easier",
    "another",
    "library",
    "use",
    "top",
    "redux",
    "also",
    "al",
    "mobx",
    "popular",
    "state",
    "management",
    "tool",
    "others",
    "like",
    "zo",
    "zustand",
    "zustand",
    "sure",
    "pronounce",
    "um",
    "gaining",
    "traction",
    "recoil",
    "xstate",
    "lot",
    "different",
    "ways",
    "manage",
    "state",
    "within",
    "react",
    "would",
    "say",
    "learn",
    "native",
    "features",
    "first",
    "learn",
    "context",
    "api",
    "learn",
    "know",
    "usate",
    "hook",
    "user",
    "reducer",
    "hook",
    "get",
    "server",
    "side",
    "rendered",
    "frameworks",
    "think",
    "react",
    "ecosystem",
    "really",
    "shines",
    "nextjs",
    "great",
    "framework",
    "great",
    "platform",
    "build",
    "react",
    "projects",
    "uses",
    "react",
    "server",
    "components",
    "components",
    "actually",
    "rendered",
    "server",
    "default",
    "fetch",
    "load",
    "data",
    "easily",
    "server",
    "also",
    "make",
    "client",
    "side",
    "components",
    "make",
    "dynamic",
    "adding",
    "single",
    "line",
    "top",
    "saying",
    "use",
    "client",
    "um",
    "next",
    "js",
    "also",
    "static",
    "site",
    "generator",
    "create",
    "static",
    "websites",
    "remix",
    "another",
    "ssr",
    "framework",
    "built",
    "top",
    "actually",
    "built",
    "top",
    "react",
    "router",
    "similar",
    "nextjs",
    "bit",
    "difficult",
    "learn",
    "opinion",
    "features",
    "next",
    "crash",
    "course",
    "want",
    "check",
    "ssr",
    "websites",
    "great",
    "seo",
    "performance",
    "really",
    "get",
    "best",
    "worlds",
    "like",
    "like",
    "said",
    "earlier",
    "also",
    "use",
    "uh",
    "something",
    "called",
    "headless",
    "content",
    "management",
    "system",
    "like",
    "content",
    "full",
    "sanity",
    "talk",
    "later",
    "pair",
    "really",
    "well",
    "ssr",
    "frameworks",
    "gatsby",
    "takes",
    "different",
    "approach",
    "compared",
    "traditional",
    "single",
    "page",
    "applications",
    "ssrs",
    "static",
    "site",
    "generator",
    "instead",
    "rendering",
    "content",
    "client",
    "via",
    "javascript",
    "gatsby",
    "generates",
    "static",
    "html",
    "files",
    "build",
    "time",
    "approach",
    "results",
    "really",
    "fast",
    "load",
    "times",
    "improved",
    "seo",
    "built",
    "top",
    "react",
    "already",
    "know",
    "react",
    "easily",
    "jump",
    "gatsby",
    "data",
    "layer",
    "uses",
    "graphql",
    "query",
    "language",
    "apis",
    "get",
    "little",
    "bit",
    "later",
    "um",
    "yeah",
    "gatsby",
    "nextjs",
    "used",
    "create",
    "really",
    "fast",
    "static",
    "websites",
    "could",
    "use",
    "something",
    "like",
    "headless",
    "cms",
    "data",
    "use",
    "stat",
    "static",
    "website",
    "front",
    "end",
    "course",
    "write",
    "css",
    "styles",
    "might",
    "want",
    "use",
    "ui",
    "component",
    "library",
    "ui",
    "kit",
    "components",
    "use",
    "application",
    "great",
    "beginners",
    "worry",
    "styling",
    "import",
    "component",
    "use",
    "bunch",
    "material",
    "ui",
    "uh",
    "really",
    "popular",
    "one",
    "uses",
    "google",
    "material",
    "design",
    "pattern",
    "customizable",
    "ton",
    "components",
    "choose",
    "popular",
    "ones",
    "react",
    "bootstrap",
    "bootstrap",
    "components",
    "shakra",
    "ui",
    "really",
    "like",
    "think",
    "really",
    "goodlooking",
    "components",
    "also",
    "library",
    "called",
    "styled",
    "components",
    "css",
    "njs",
    "library",
    "allows",
    "write",
    "css",
    "javascript",
    "come",
    "components",
    "like",
    "ones",
    "allows",
    "essentially",
    "create",
    "components",
    "another",
    "part",
    "ecosystem",
    "react",
    "native",
    "allows",
    "build",
    "native",
    "mobile",
    "applications",
    "using",
    "react",
    "framework",
    "great",
    "react",
    "native",
    "use",
    "codebase",
    "ios",
    "android",
    "usually",
    "build",
    "native",
    "mobile",
    "apps",
    "separate",
    "separate",
    "swift",
    "code",
    "base",
    "ios",
    "either",
    "swift",
    "objective",
    "c",
    "separate",
    "cotlin",
    "java",
    "code",
    "base",
    "android",
    "apps",
    "react",
    "native",
    "one",
    "app",
    "also",
    "great",
    "web",
    "developers",
    "essentially",
    "use",
    "javascript",
    "skills",
    "build",
    "mobile",
    "applications",
    "main",
    "parts",
    "ecosystem",
    "plenty",
    "smaller",
    "things",
    "might",
    "find",
    "using",
    "react",
    "query",
    "library",
    "fetching",
    "caching",
    "synchronizing",
    "data",
    "libraries",
    "work",
    "forms",
    "like",
    "formic",
    "react",
    "hook",
    "form",
    "react",
    "testing",
    "library",
    "many",
    "libraries",
    "test",
    "react",
    "applications",
    "libraries",
    "animation",
    "even",
    "even",
    "frameworks",
    "libraries",
    "using",
    "react",
    "build",
    "vr",
    "virtual",
    "reality",
    "augmented",
    "reality",
    "environments",
    "um",
    "certainly",
    "need",
    "learn",
    "learn",
    "react",
    "get",
    "stuff",
    "pretty",
    "easily",
    "ecosystem",
    "almost",
    "seems",
    "miror",
    "reacts",
    "lot",
    "features",
    "tools",
    "create",
    "view",
    "similar",
    "create",
    "react",
    "app",
    "cli",
    "scaffolding",
    "tool",
    "create",
    "single",
    "page",
    "application",
    "built",
    "top",
    "build",
    "tool",
    "called",
    "vit",
    "vit",
    "newer",
    "build",
    "tool",
    "much",
    "faster",
    "webpack",
    "used",
    "uh",
    "used",
    "use",
    "something",
    "called",
    "vue",
    "cli",
    "still",
    "around",
    "think",
    "supported",
    "anymore",
    "would",
    "suggest",
    "using",
    "create",
    "view",
    "uh",
    "building",
    "spa",
    "vjs",
    "vue",
    "router",
    "official",
    "router",
    "vjs",
    "similar",
    "react",
    "router",
    "allows",
    "create",
    "routes",
    "application",
    "easy",
    "use",
    "well",
    "documented",
    "state",
    "management",
    "native",
    "pretty",
    "easy",
    "compared",
    "react",
    "way",
    "components",
    "structured",
    "tools",
    "need",
    "advanced",
    "state",
    "management",
    "vx",
    "used",
    "official",
    "state",
    "management",
    "tool",
    "view",
    "called",
    "pinea",
    "works",
    "similar",
    "way",
    "vx",
    "allows",
    "share",
    "state",
    "across",
    "components",
    "pages",
    "works",
    "course",
    "view",
    "version",
    "two",
    "version",
    "three",
    "also",
    "options",
    "like",
    "xstate",
    "harlem",
    "uh",
    "lot",
    "thirdparty",
    "tools",
    "look",
    "needed",
    "nujs",
    "similar",
    "nextjs",
    "server",
    "side",
    "rendered",
    "framework",
    "meta",
    "framework",
    "great",
    "seo",
    "performance",
    "also",
    "static",
    "site",
    "generator",
    "includes",
    "features",
    "nextjs",
    "far",
    "filebase",
    "routing",
    "server",
    "components",
    "data",
    "fetching",
    "utilities",
    "um",
    "uses",
    "nitro",
    "server",
    "engine",
    "view",
    "developer",
    "want",
    "get",
    "ssr",
    "probably",
    "going",
    "learning",
    "nujs",
    "gridsum",
    "popular",
    "static",
    "site",
    "generator",
    "built",
    "top",
    "comparable",
    "gatsby",
    "ideal",
    "building",
    "fast",
    "efficient",
    "static",
    "websites",
    "blogs",
    "documentation",
    "sites",
    "also",
    "um",
    "uh",
    "also",
    "uses",
    "graphql",
    "data",
    "layer",
    "like",
    "gatsby",
    "kind",
    "see",
    "pattern",
    "everything",
    "react",
    "view",
    "basically",
    "right",
    "far",
    "ui",
    "libraries",
    "go",
    "vy",
    "probably",
    "popular",
    "similar",
    "material",
    "ui",
    "react",
    "based",
    "google",
    "material",
    "design",
    "pattern",
    "customizable",
    "tons",
    "components",
    "probably",
    "would",
    "recommend",
    "others",
    "well",
    "um",
    "want",
    "use",
    "bootstrap",
    "components",
    "bootstrap",
    "view",
    "believe",
    "believe",
    "also",
    "one",
    "called",
    "view",
    "strap",
    "quazar",
    "buffy",
    "uses",
    "balma",
    "framework",
    "tons",
    "ui",
    "kits",
    "available",
    "far",
    "mobile",
    "development",
    "really",
    "something",
    "directly",
    "comparable",
    "react",
    "native",
    "um",
    "native",
    "script",
    "native",
    "script",
    "view",
    "native",
    "script",
    "use",
    "um",
    "uh",
    "framework",
    "could",
    "even",
    "use",
    "react",
    "access",
    "native",
    "api",
    "essentially",
    "create",
    "uh",
    "native",
    "mobile",
    "app",
    "view",
    "single",
    "code",
    "base",
    "ios",
    "android",
    "things",
    "might",
    "run",
    "view",
    "query",
    "tan",
    "stack",
    "basically",
    "react",
    "query",
    "view",
    "way",
    "fetch",
    "cache",
    "data",
    "view",
    "testing",
    "utilities",
    "native",
    "animations",
    "use",
    "um",
    "built",
    "framework",
    "virtual",
    "reality",
    "vue",
    "vr",
    "things",
    "figured",
    "throw",
    "win",
    "might",
    "find",
    "uh",
    "find",
    "ecosystem",
    "angular",
    "ecosystem",
    "big",
    "say",
    "lot",
    "mo",
    "lot",
    "stuff",
    "built",
    "angular",
    "much",
    "framework",
    "reaching",
    "many",
    "thirdparty",
    "solutions",
    "angular",
    "cli",
    "official",
    "command",
    "line",
    "tool",
    "angular",
    "allows",
    "create",
    "build",
    "test",
    "deploy",
    "angular",
    "applications",
    "similar",
    "create",
    "react",
    "app",
    "create",
    "view",
    "built",
    "top",
    "webpack",
    "pretty",
    "easy",
    "use",
    "also",
    "well",
    "documented",
    "um",
    "enable",
    "ssr",
    "angular",
    "cli",
    "pretty",
    "cool",
    "initially",
    "called",
    "angular",
    "universal",
    "ssr",
    "framework",
    "repo",
    "merged",
    "cli",
    "also",
    "options",
    "app",
    "similar",
    "static",
    "site",
    "generation",
    "angular",
    "router",
    "official",
    "router",
    "angular",
    "similar",
    "react",
    "router",
    "view",
    "router",
    "except",
    "built",
    "built",
    "install",
    "separately",
    "includes",
    "things",
    "like",
    "route",
    "guards",
    "even",
    "animation",
    "options",
    "uh",
    "cool",
    "far",
    "state",
    "goes",
    "one",
    "thing",
    "really",
    "like",
    "angular",
    "concept",
    "services",
    "gives",
    "easy",
    "way",
    "manage",
    "state",
    "inject",
    "service",
    "components",
    "share",
    "data",
    "service",
    "across",
    "entire",
    "application",
    "okay",
    "also",
    "ngrx",
    "official",
    "state",
    "management",
    "tool",
    "ang",
    "similar",
    "redux",
    "um",
    "actually",
    "built",
    "top",
    "something",
    "called",
    "rxjs",
    "library",
    "reactive",
    "programming",
    "using",
    "observables",
    "dealing",
    "asynchronous",
    "code",
    "similar",
    "promises",
    "bit",
    "complex",
    "state",
    "management",
    "tools",
    "also",
    "powerful",
    "great",
    "larger",
    "complex",
    "applications",
    "uh",
    "ssr",
    "static",
    "sites",
    "use",
    "cli",
    "nextjs",
    "njs",
    "angular",
    "u",
    "included",
    "bundled",
    "cli",
    "ui",
    "kits",
    "angular",
    "material",
    "pretty",
    "popular",
    "also",
    "ng",
    "bootstrap",
    "prime",
    "mg",
    "clarity",
    "bunch",
    "others",
    "well",
    "kind",
    "go",
    "see",
    "ones",
    "like",
    "components",
    "like",
    "look",
    "uh",
    "even",
    "want",
    "use",
    "ui",
    "kit",
    "mobile",
    "apps",
    "use",
    "native",
    "script",
    "well",
    "use",
    "framework",
    "um",
    "also",
    "use",
    "ionic",
    "hybrid",
    "apps",
    "talk",
    "later",
    "far",
    "tools",
    "might",
    "find",
    "using",
    "obviously",
    "typescript",
    "default",
    "angular",
    "packages",
    "used",
    "angular",
    "fire",
    "work",
    "firebase",
    "um",
    "also",
    "talk",
    "later",
    "formly",
    "forms",
    "angular",
    "testing",
    "library",
    "testing",
    "um",
    "testing",
    "built",
    "cli",
    "well",
    "spelt",
    "newer",
    "framework",
    "big",
    "ecosystem",
    "official",
    "meta",
    "framework",
    "called",
    "spel",
    "kit",
    "awesome",
    "really",
    "like",
    "way",
    "spelt",
    "things",
    "full",
    "stack",
    "framework",
    "allows",
    "build",
    "single",
    "page",
    "apps",
    "server",
    "side",
    "rendered",
    "apps",
    "static",
    "websit",
    "basically",
    "tool",
    "great",
    "seo",
    "great",
    "performance",
    "um",
    "similar",
    "nextjs",
    "knjs",
    "elements",
    "gatsby",
    "gridsome",
    "basically",
    "build",
    "whatever",
    "want",
    "spelt",
    "built",
    "top",
    "vit",
    "build",
    "tool",
    "um",
    "sapper",
    "original",
    "meta",
    "framework",
    "spelt",
    "longer",
    "supported",
    "spelt",
    "kit",
    "basically",
    "new",
    "version",
    "sapper",
    "state",
    "management",
    "really",
    "well",
    "integrated",
    "really",
    "need",
    "reach",
    "solution",
    "spel",
    "kit",
    "uh",
    "context",
    "api",
    "built",
    "readable",
    "writable",
    "stores",
    "use",
    "share",
    "data",
    "components",
    "course",
    "want",
    "use",
    "thirdparty",
    "state",
    "manager",
    "think",
    "types",
    "applications",
    "functionality",
    "really",
    "need",
    "also",
    "bunch",
    "ui",
    "kits",
    "like",
    "spelt",
    "strap",
    "port",
    "bootstrap",
    "spelt",
    "u",
    "carbon",
    "components",
    "aort",
    "ibm",
    "carbon",
    "design",
    "system",
    "well",
    "flow",
    "bite",
    "others",
    "way",
    "spelt",
    "think",
    "way",
    "everything",
    "bundled",
    "single",
    "official",
    "meta",
    "framework",
    "see",
    "lot",
    "framework",
    "ecosystems",
    "basically",
    "copy",
    "features",
    "tools",
    "really",
    "comes",
    "one",
    "like",
    "best",
    "pretty",
    "much",
    "build",
    "stuff",
    "might",
    "little",
    "performant",
    "others",
    "pretty",
    "fast",
    "big",
    "frameworks",
    "ecosystems",
    "know",
    "lot",
    "information",
    "think",
    "important",
    "know",
    "suggest",
    "trying",
    "one",
    "seeing",
    "kind",
    "vibes",
    "uh",
    "lot",
    "people",
    "internet",
    "like",
    "say",
    "one",
    "great",
    "one",
    "sucks",
    "ever",
    "let",
    "deciding",
    "factor",
    "try",
    "see",
    "like",
    "think",
    "great",
    "pros",
    "cons",
    "right",
    "let",
    "talk",
    "little",
    "bit",
    "typescript",
    "mentioned",
    "couple",
    "times",
    "really",
    "talk",
    "really",
    "um",
    "available",
    "front",
    "end",
    "backend",
    "using",
    "something",
    "like",
    "typescript",
    "superet",
    "javascript",
    "meaning",
    "essentially",
    "javascript",
    "javascript",
    "language",
    "added",
    "features",
    "anything",
    "javascript",
    "typescript",
    "addition",
    "features",
    "um",
    "static",
    "typing",
    "kind",
    "main",
    "addition",
    "javascript",
    "default",
    "dynamically",
    "typed",
    "language",
    "means",
    "specify",
    "types",
    "variables",
    "function",
    "return",
    "values",
    "say",
    "variable",
    "string",
    "one",
    "number",
    "typescript",
    "allows",
    "might",
    "say",
    "well",
    "hell",
    "would",
    "want",
    "would",
    "want",
    "write",
    "code",
    "kind",
    "hard",
    "explain",
    "use",
    "really",
    "see",
    "benefits",
    "everyone",
    "think",
    "worth",
    "learning",
    "think",
    "types",
    "require",
    "code",
    "also",
    "makes",
    "code",
    "robust",
    "less",
    "prone",
    "errors",
    "also",
    "makes",
    "code",
    "descriptive",
    "readable",
    "use",
    "something",
    "like",
    "vs",
    "code",
    "give",
    "intellisense",
    "show",
    "know",
    "properties",
    "methods",
    "available",
    "missing",
    "um",
    "lot",
    "reasons",
    "use",
    "typescript",
    "right",
    "headless",
    "content",
    "management",
    "systems",
    "becoming",
    "popular",
    "allow",
    "create",
    "content",
    "user",
    "interface",
    "similar",
    "would",
    "wordpress",
    "admin",
    "area",
    "generate",
    "api",
    "content",
    "use",
    "api",
    "whatever",
    "front",
    "end",
    "like",
    "also",
    "useful",
    "freelancers",
    "clients",
    "log",
    "update",
    "content",
    "easily",
    "uh",
    "course",
    "could",
    "create",
    "custom",
    "admin",
    "area",
    "takes",
    "way",
    "time",
    "money",
    "really",
    "popular",
    "static",
    "site",
    "generators",
    "like",
    "gatsby",
    "well",
    "ssr",
    "frameworks",
    "like",
    "nextjs",
    "njs",
    "let",
    "take",
    "look",
    "popular",
    "ones",
    "tons",
    "sanity",
    "headless",
    "cms",
    "used",
    "projects",
    "sizes",
    "companies",
    "like",
    "nike",
    "figma",
    "use",
    "sanity",
    "free",
    "option",
    "personal",
    "projects",
    "also",
    "pay",
    "plans",
    "teams",
    "uh",
    "really",
    "large",
    "projects",
    "good",
    "really",
    "complex",
    "applications",
    "something",
    "like",
    "personal",
    "blog",
    "content",
    "full",
    "another",
    "popular",
    "headless",
    "cms",
    "ton",
    "features",
    "used",
    "companies",
    "like",
    "spotify",
    "urban",
    "outfitters",
    "also",
    "free",
    "personal",
    "projects",
    "pay",
    "plans",
    "teams",
    "also",
    "extensive",
    "integrations",
    "available",
    "strappy",
    "free",
    "open",
    "source",
    "headless",
    "cms",
    "built",
    "top",
    "uses",
    "mongodb",
    "database",
    "great",
    "small",
    "mediumsized",
    "projects",
    "also",
    "customizable",
    "like",
    "strappy",
    "source",
    "host",
    "manage",
    "host",
    "manage",
    "everything",
    "um",
    "interface",
    "pretty",
    "easy",
    "use",
    "well",
    "generate",
    "rest",
    "api",
    "graphql",
    "api",
    "content",
    "crash",
    "course",
    "strappy",
    "interested",
    "uh",
    "also",
    "crash",
    "course",
    "next",
    "one",
    "prismic",
    "another",
    "headless",
    "cms",
    "uses",
    "structured",
    "content",
    "model",
    "based",
    "slices",
    "allows",
    "content",
    "creators",
    "build",
    "dynamic",
    "page",
    "layouts",
    "reusable",
    "components",
    "good",
    "allowing",
    "users",
    "clients",
    "create",
    "versatile",
    "content",
    "high",
    "graph",
    "new",
    "uh",
    "new",
    "product",
    "looks",
    "pretty",
    "cool",
    "something",
    "used",
    "um",
    "headless",
    "cms",
    "capabilities",
    "build",
    "entire",
    "shopping",
    "platform",
    "api",
    "integrates",
    "seamlessly",
    "payment",
    "gateways",
    "also",
    "uses",
    "graphql",
    "talk",
    "graphql",
    "little",
    "bit",
    "used",
    "wordpress",
    "may",
    "know",
    "addition",
    "traditional",
    "wordpress",
    "cms",
    "also",
    "headless",
    "capabilities",
    "generate",
    "rest",
    "api",
    "wordpress",
    "content",
    "easy",
    "get",
    "running",
    "um",
    "gives",
    "powerful",
    "wordpress",
    "admin",
    "interface",
    "without",
    "bound",
    "front",
    "end",
    "without",
    "bound",
    "wordpress",
    "themes",
    "use",
    "anything",
    "want",
    "react",
    "view",
    "spelt",
    "whatever",
    "um",
    "really",
    "good",
    "free",
    "uh",
    "freelancers",
    "well",
    "like",
    "said",
    "ton",
    "would",
    "suggest",
    "taking",
    "look",
    "look",
    "seeing",
    "like",
    "see",
    "know",
    "api",
    "generated",
    "integrate",
    "whatever",
    "use",
    "front",
    "end",
    "newer",
    "smaller",
    "frameworks",
    "tools",
    "want",
    "mention",
    "going",
    "go",
    "detail",
    "give",
    "brief",
    "overview",
    "starting",
    "learning",
    "one",
    "big",
    "frameworks",
    "need",
    "worry",
    "yet",
    "experienced",
    "developer",
    "may",
    "want",
    "check",
    "solid",
    "declarative",
    "javascript",
    "library",
    "creating",
    "user",
    "interfaces",
    "built",
    "top",
    "jsx",
    "syntax",
    "extension",
    "javascript",
    "similar",
    "react",
    "fast",
    "fact",
    "framework",
    "overall",
    "similar",
    "react",
    "solid",
    "js",
    "reactive",
    "rendering",
    "one",
    "standout",
    "features",
    "uses",
    "um",
    "fine",
    "grained",
    "reactivity",
    "update",
    "parts",
    "dom",
    "actually",
    "change",
    "resulting",
    "high",
    "performance",
    "minimal",
    "rendering",
    "fairly",
    "easy",
    "learn",
    "still",
    "need",
    "create",
    "crash",
    "course",
    "popular",
    "frameworks",
    "also",
    "much",
    "newer",
    "growing",
    "popularity",
    "wo",
    "surprised",
    "see",
    "lot",
    "solid",
    "js",
    "alpine",
    "js",
    "minimal",
    "framework",
    "composing",
    "javascript",
    "behavior",
    "mockup",
    "html",
    "quite",
    "different",
    "ones",
    "talked",
    "fact",
    "would",
    "even",
    "put",
    "category",
    "utility",
    "library",
    "small",
    "great",
    "adding",
    "dynamic",
    "elements",
    "website",
    "without",
    "learn",
    "full",
    "framework",
    "also",
    "write",
    "javascript",
    "almost",
    "makes",
    "html",
    "function",
    "programming",
    "language",
    "conditionals",
    "um",
    "loops",
    "stuff",
    "like",
    "within",
    "html",
    "using",
    "special",
    "tags",
    "basic",
    "website",
    "want",
    "add",
    "like",
    "drop",
    "modal",
    "easily",
    "alpine",
    "js",
    "need",
    "learn",
    "learn",
    "full",
    "framework",
    "also",
    "pairs",
    "well",
    "laravel",
    "templates",
    "use",
    "jango",
    "frameworks",
    "like",
    "htm",
    "x",
    "another",
    "really",
    "cool",
    "technology",
    "javascript",
    "library",
    "allows",
    "create",
    "dynamic",
    "front",
    "ends",
    "without",
    "writing",
    "javascript",
    "code",
    "allowing",
    "use",
    "special",
    "attributes",
    "html",
    "make",
    "http",
    "requests",
    "update",
    "dom",
    "actually",
    "similar",
    "alpine",
    "focused",
    "making",
    "http",
    "requests",
    "great",
    "adding",
    "um",
    "dynamic",
    "elements",
    "website",
    "making",
    "requests",
    "api",
    "backend",
    "without",
    "learn",
    "full",
    "framework",
    "think",
    "alpine",
    "htm",
    "x",
    "great",
    "technologies",
    "work",
    "much",
    "differently",
    "traditional",
    "framework",
    "would",
    "definitely",
    "suggest",
    "checking",
    "astro",
    "one",
    "favorite",
    "new",
    "frameworks",
    "actually",
    "static",
    "site",
    "generator",
    "well",
    "ssr",
    "framework",
    "als",
    "also",
    "create",
    "api",
    "endpoints",
    "quick",
    "start",
    "course",
    "available",
    "youtube",
    "website",
    "really",
    "cool",
    "astro",
    "builds",
    "zero",
    "javascript",
    "default",
    "actually",
    "renders",
    "html",
    "pages",
    "server",
    "uses",
    "architecture",
    "called",
    "islands",
    "also",
    "use",
    "astro",
    "components",
    "simple",
    "straightforward",
    "use",
    "react",
    "components",
    "views",
    "felt",
    "sort",
    "like",
    "nextjs",
    "bound",
    "react",
    "framework",
    "uh",
    "also",
    "built",
    "top",
    "vit",
    "fast",
    "build",
    "tool",
    "definitely",
    "worth",
    "look",
    "stencil",
    "stenciljs",
    "something",
    "used",
    "yet",
    "tool",
    "chain",
    "building",
    "reusable",
    "scalable",
    "component",
    "libraries",
    "built",
    "ionic",
    "team",
    "compil",
    "compiler",
    "generates",
    "web",
    "components",
    "create",
    "components",
    "basically",
    "use",
    "framework",
    "want",
    "javascript",
    "js",
    "doc",
    "something",
    "around",
    "actually",
    "crash",
    "course",
    "years",
    "ago",
    "forgot",
    "seeing",
    "lot",
    "lately",
    "people",
    "using",
    "place",
    "typescript",
    "actually",
    "api",
    "documentation",
    "generator",
    "javascript",
    "used",
    "add",
    "types",
    "javascript",
    "code",
    "robust",
    "typescript",
    "lot",
    "easier",
    "get",
    "suggest",
    "looking",
    "seeing",
    "something",
    "might",
    "benefit",
    "right",
    "addition",
    "tools",
    "languages",
    "frameworks",
    "also",
    "lot",
    "web",
    "apis",
    "available",
    "browser",
    "familiar",
    "going",
    "go",
    "list",
    "common",
    "ones",
    "many",
    "easy",
    "enough",
    "learn",
    "suggest",
    "spending",
    "little",
    "bit",
    "time",
    "canvas",
    "api",
    "provides",
    "uh",
    "means",
    "drawing",
    "graphics",
    "via",
    "javascript",
    "html",
    "canvas",
    "element",
    "uh",
    "among",
    "things",
    "used",
    "animation",
    "game",
    "gra",
    "graphics",
    "data",
    "visualization",
    "photo",
    "manipulation",
    "realtime",
    "video",
    "processing",
    "much",
    "canvas",
    "api",
    "probably",
    "something",
    "want",
    "check",
    "geolocation",
    "api",
    "allows",
    "users",
    "provide",
    "location",
    "web",
    "application",
    "desire",
    "uh",
    "privacy",
    "reasons",
    "user",
    "asked",
    "permission",
    "know",
    "accept",
    "show",
    "location",
    "useful",
    "things",
    "like",
    "maps",
    "weather",
    "apps",
    "um",
    "c",
    "tailor",
    "experience",
    "based",
    "user",
    "location",
    "things",
    "like",
    "web",
    "storage",
    "api",
    "provides",
    "mechanisms",
    "browser",
    "store",
    "key",
    "value",
    "pairs",
    "uh",
    "much",
    "intuitive",
    "fashion",
    "using",
    "cookies",
    "also",
    "allows",
    "store",
    "data",
    "cookies",
    "store",
    "data",
    "locally",
    "session",
    "based",
    "also",
    "called",
    "local",
    "storage",
    "session",
    "storage",
    "web",
    "workers",
    "api",
    "makes",
    "possible",
    "run",
    "script",
    "operation",
    "background",
    "thread",
    "separate",
    "main",
    "execution",
    "thread",
    "web",
    "application",
    "allows",
    "long",
    "running",
    "scripts",
    "interrupted",
    "scripts",
    "respond",
    "clicks",
    "user",
    "interactions",
    "allows",
    "long",
    "tasks",
    "executed",
    "without",
    "yielding",
    "keep",
    "page",
    "responsive",
    "web",
    "web",
    "sockets",
    "api",
    "makes",
    "possible",
    "open",
    "interactive",
    "communication",
    "session",
    "user",
    "browser",
    "server",
    "api",
    "send",
    "messages",
    "server",
    "receive",
    "event",
    "driven",
    "responses",
    "without",
    "pull",
    "server",
    "reply",
    "great",
    "chat",
    "applications",
    "real",
    "time",
    "applications",
    "um",
    "web",
    "video",
    "apis",
    "obviously",
    "allow",
    "create",
    "manipulate",
    "audio",
    "video",
    "content",
    "create",
    "audio",
    "video",
    "players",
    "record",
    "audio",
    "video",
    "even",
    "create",
    "audio",
    "visualizations",
    "others",
    "might",
    "want",
    "look",
    "web",
    "rtc",
    "realtime",
    "communication",
    "video",
    "streaming",
    "bluetooth",
    "api",
    "web",
    "search",
    "api",
    "things",
    "like",
    "um",
    "fairly",
    "easy",
    "get",
    "learn",
    "basics",
    "javascript",
    "suggest",
    "learning",
    "maybe",
    "building",
    "small",
    "project",
    "right",
    "testing",
    "something",
    "may",
    "may",
    "get",
    "testing",
    "ensures",
    "reliability",
    "functionality",
    "security",
    "applications",
    "would",
    "suggest",
    "looking",
    "project",
    "load",
    "see",
    "testing",
    "would",
    "beneficial",
    "uh",
    "actually",
    "creating",
    "video",
    "goes",
    "released",
    "time",
    "watch",
    "freelancing",
    "using",
    "something",
    "like",
    "wordpress",
    "building",
    "static",
    "websites",
    "wo",
    "need",
    "worry",
    "testing",
    "building",
    "larger",
    "complex",
    "applications",
    "beneficial",
    "working",
    "company",
    "requires",
    "write",
    "tests",
    "obviously",
    "need",
    "learn",
    "um",
    "think",
    "good",
    "idea",
    "least",
    "see",
    "testing",
    "works",
    "check",
    "libraries",
    "different",
    "types",
    "testing",
    "far",
    "different",
    "types",
    "lot",
    "say",
    "common",
    "three",
    "unit",
    "testing",
    "pertains",
    "individual",
    "units",
    "code",
    "probably",
    "common",
    "type",
    "web",
    "development",
    "integration",
    "testing",
    "process",
    "seeing",
    "different",
    "elements",
    "application",
    "work",
    "together",
    "also",
    "endtoend",
    "testing",
    "process",
    "testing",
    "entire",
    "application",
    "start",
    "finish",
    "every",
    "programming",
    "language",
    "testing",
    "tools",
    "going",
    "go",
    "popular",
    "ones",
    "since",
    "talking",
    "javascript",
    "popular",
    "um",
    "built",
    "facebook",
    "pretty",
    "easy",
    "use",
    "includes",
    "assertion",
    "libraries",
    "mocking",
    "capabilities",
    "powerful",
    "features",
    "like",
    "snapshot",
    "testing",
    "mocha",
    "another",
    "highly",
    "flexible",
    "testing",
    "framework",
    "javascript",
    "uh",
    "looking",
    "run",
    "endtoend",
    "tests",
    "cypress",
    "good",
    "option",
    "javascript",
    "javascript",
    "based",
    "testing",
    "allows",
    "write",
    "tests",
    "run",
    "browser",
    "enzyme",
    "javascript",
    "testing",
    "utility",
    "react",
    "also",
    "react",
    "testing",
    "library",
    "many",
    "ca",
    "go",
    "every",
    "language",
    "um",
    "definitely",
    "something",
    "want",
    "look",
    "looking",
    "build",
    "really",
    "complex",
    "applications",
    "right",
    "learned",
    "talked",
    "say",
    "pretty",
    "advanced",
    "developer",
    "fluent",
    "frontend",
    "framework",
    "whether",
    "react",
    "view",
    "felt",
    "angular",
    "well",
    "ecosystems",
    "um",
    "frontend",
    "tooling",
    "skills",
    "know",
    "use",
    "npm",
    "install",
    "packages",
    "uh",
    "cli",
    "tools",
    "module",
    "bundlers",
    "like",
    "vit",
    "webpack",
    "server",
    "side",
    "rendering",
    "definitely",
    "something",
    "couple",
    "years",
    "ago",
    "would",
    "say",
    "optional",
    "think",
    "something",
    "need",
    "get",
    "becoming",
    "react",
    "developer",
    "learning",
    "nextjs",
    "remix",
    "um",
    "spelt",
    "kit",
    "angular",
    "ssr",
    "njs",
    "whatever",
    "service",
    "side",
    "rendering",
    "think",
    "future",
    "um",
    "know",
    "big",
    "part",
    "web",
    "development",
    "static",
    "site",
    "generators",
    "also",
    "useful",
    "want",
    "build",
    "really",
    "fast",
    "performant",
    "websites",
    "uh",
    "headless",
    "cms",
    "obviously",
    "optional",
    "really",
    "helpful",
    "especially",
    "freelancing",
    "want",
    "way",
    "client",
    "able",
    "update",
    "content",
    "use",
    "whatever",
    "want",
    "front",
    "end",
    "uh",
    "really",
    "cool",
    "stuff",
    "additional",
    "tools",
    "typescript",
    "uh",
    "alpine",
    "htm",
    "x",
    "newer",
    "technologies",
    "might",
    "want",
    "mess",
    "get",
    "web",
    "apis",
    "would",
    "say",
    "understand",
    "lot",
    "common",
    "uh",
    "apis",
    "available",
    "like",
    "canvas",
    "speech",
    "api",
    "geolocation",
    "things",
    "like",
    "gone",
    "front",
    "end",
    "let",
    "talk",
    "back",
    "end",
    "end",
    "want",
    "full",
    "stack",
    "developer",
    "backend",
    "developer",
    "creates",
    "apis",
    "microservices",
    "need",
    "learn",
    "servers",
    "side",
    "language",
    "service",
    "ey",
    "technology",
    "start",
    "get",
    "lot",
    "options",
    "really",
    "use",
    "language",
    "want",
    "http",
    "capabilities",
    "going",
    "go",
    "popular",
    "choices",
    "give",
    "stats",
    "end",
    "section",
    "well",
    "first",
    "option",
    "javascript",
    "right",
    "javascript",
    "initially",
    "created",
    "browser",
    "runtimes",
    "allow",
    "us",
    "use",
    "javascript",
    "server",
    "side",
    "language",
    "fast",
    "server",
    "side",
    "language",
    "js",
    "common",
    "definitely",
    "would",
    "suggest",
    "getting",
    "started",
    "newer",
    "interesting",
    "options",
    "play",
    "already",
    "know",
    "doo",
    "newer",
    "runtime",
    "built",
    "person",
    "created",
    "node",
    "similar",
    "node",
    "interesting",
    "features",
    "like",
    "typescript",
    "support",
    "package",
    "manager",
    "bung",
    "even",
    "newer",
    "interesting",
    "actually",
    "going",
    "slide",
    "dedicated",
    "towards",
    "end",
    "nodejs",
    "popular",
    "building",
    "apis",
    "microservices",
    "well",
    "full",
    "stack",
    "applications",
    "event",
    "driven",
    "makes",
    "highly",
    "efficient",
    "handling",
    "concurrent",
    "connections",
    "io",
    "intensitive",
    "tasks",
    "good",
    "cpu",
    "intensitive",
    "tasks",
    "building",
    "something",
    "requires",
    "lot",
    "processing",
    "power",
    "may",
    "want",
    "look",
    "something",
    "else",
    "um",
    "great",
    "everything",
    "web",
    "development",
    "anything",
    "crud",
    "operations",
    "create",
    "read",
    "update",
    "delete",
    "working",
    "databases",
    "etc",
    "built",
    "v8",
    "javascript",
    "engine",
    "javascript",
    "engine",
    "powers",
    "google",
    "chrome",
    "also",
    "pretty",
    "easy",
    "get",
    "started",
    "need",
    "learn",
    "npm",
    "node",
    "package",
    "manager",
    "use",
    "install",
    "types",
    "packages",
    "libraries",
    "um",
    "familiar",
    "framework",
    "already",
    "know",
    "use",
    "npm",
    "used",
    "front",
    "end",
    "well",
    "um",
    "need",
    "know",
    "ecosystem",
    "lot",
    "tools",
    "frameworks",
    "use",
    "node",
    "go",
    "soon",
    "node",
    "pretty",
    "popular",
    "startups",
    "well",
    "large",
    "companies",
    "biggest",
    "reason",
    "like",
    "like",
    "javascript",
    "like",
    "language",
    "front",
    "end",
    "backend",
    "using",
    "react",
    "front",
    "end",
    "nice",
    "able",
    "use",
    "language",
    "back",
    "end",
    "well",
    "python",
    "another",
    "popular",
    "option",
    "general",
    "purpose",
    "programming",
    "language",
    "used",
    "lot",
    "different",
    "things",
    "fact",
    "say",
    "python",
    "probably",
    "one",
    "diverse",
    "languages",
    "great",
    "data",
    "science",
    "machine",
    "learning",
    "automation",
    "also",
    "great",
    "web",
    "development",
    "whether",
    "full",
    "stack",
    "application",
    "apis",
    "microservices",
    "python",
    "great",
    "readability",
    "um",
    "relatively",
    "easy",
    "learn",
    "phenomenal",
    "frameworks",
    "python",
    "offers",
    "jango",
    "flask",
    "talk",
    "soon",
    "python",
    "great",
    "beginners",
    "uh",
    "like",
    "said",
    "readable",
    "easy",
    "get",
    "also",
    "point",
    "want",
    "transition",
    "web",
    "development",
    "something",
    "like",
    "data",
    "science",
    "python",
    "great",
    "option",
    "fantastic",
    "general",
    "purpose",
    "language",
    "overall",
    "next",
    "php",
    "server",
    "side",
    "scripting",
    "language",
    "designed",
    "web",
    "development",
    "unlike",
    "python",
    "use",
    "lot",
    "different",
    "things",
    "php",
    "really",
    "used",
    "outside",
    "web",
    "development",
    "least",
    "large",
    "scale",
    "purpose",
    "build",
    "dynamic",
    "web",
    "pages",
    "popular",
    "platforms",
    "use",
    "php",
    "wordpress",
    "um",
    "think",
    "php",
    "great",
    "freelancers",
    "tool",
    "allows",
    "get",
    "things",
    "done",
    "quickly",
    "unique",
    "languages",
    "actually",
    "go",
    "php",
    "page",
    "browser",
    "load",
    "page",
    "server",
    "write",
    "html",
    "directly",
    "php",
    "files",
    "essentially",
    "template",
    "language",
    "ca",
    "really",
    "languages",
    "downside",
    "php",
    "get",
    "much",
    "freedom",
    "really",
    "easy",
    "write",
    "bad",
    "code",
    "think",
    "php",
    "get",
    "bad",
    "wap",
    "sometimes",
    "know",
    "write",
    "clean",
    "code",
    "php",
    "frameworks",
    "like",
    "laravel",
    "address",
    "pretty",
    "much",
    "allow",
    "write",
    "bad",
    "code",
    "really",
    "bad",
    "code",
    "um",
    "definitely",
    "good",
    "choice",
    "opinion",
    "go",
    "goang",
    "statically",
    "typed",
    "language",
    "developed",
    "google",
    "known",
    "performance",
    "efficiency",
    "makes",
    "suitable",
    "building",
    "web",
    "services",
    "apis",
    "powerful",
    "applications",
    "um",
    "also",
    "great",
    "building",
    "things",
    "like",
    "command",
    "line",
    "tools",
    "uh",
    "fairly",
    "new",
    "language",
    "growing",
    "popularity",
    "among",
    "top",
    "10",
    "primary",
    "languages",
    "professional",
    "professional",
    "developers",
    "share",
    "7",
    "used",
    "used",
    "really",
    "big",
    "companies",
    "um",
    "power",
    "really",
    "huge",
    "applications",
    "apis",
    "really",
    "something",
    "use",
    "like",
    "personal",
    "blog",
    "large",
    "scale",
    "applications",
    "um",
    "one",
    "thing",
    "goang",
    "vast",
    "standard",
    "library",
    "build",
    "quite",
    "bit",
    "without",
    "reaching",
    "kind",
    "framework",
    "however",
    "great",
    "frameworks",
    "use",
    "go",
    "talk",
    "soon",
    "um",
    "also",
    "secure",
    "language",
    "scales",
    "well",
    "making",
    "suitable",
    "large",
    "scale",
    "applications",
    "used",
    "lot",
    "big",
    "business",
    "world",
    "c",
    "also",
    "general",
    "purpose",
    "language",
    "robust",
    "objectoriented",
    "langu",
    "language",
    "developed",
    "microsoft",
    "used",
    "building",
    "desktop",
    "applications",
    "web",
    "apps",
    "mobile",
    "apps",
    "games",
    "popular",
    "language",
    "used",
    "lot",
    "companies",
    "also",
    "used",
    "game",
    "development",
    "unity",
    "um",
    "great",
    "language",
    "learn",
    "similar",
    "java",
    "better",
    "opinion",
    "also",
    "used",
    "net",
    "framework",
    "software",
    "framework",
    "developed",
    "microsoft",
    "powerful",
    "used",
    "many",
    "different",
    "types",
    "projects",
    "web",
    "framework",
    "building",
    "web",
    "applications",
    "um",
    "similar",
    "something",
    "like",
    "jango",
    "laravel",
    "great",
    "language",
    "good",
    "performance",
    "secure",
    "definitely",
    "um",
    "definitely",
    "candidate",
    "java",
    "another",
    "general",
    "purpose",
    "objectoriented",
    "language",
    "actually",
    "really",
    "similar",
    "c",
    "java",
    "used",
    "desktop",
    "apps",
    "android",
    "apps",
    "backend",
    "web",
    "development",
    "around",
    "really",
    "long",
    "time",
    "popular",
    "enterprise",
    "world",
    "used",
    "lot",
    "big",
    "companies",
    "one",
    "stack",
    "see",
    "lot",
    "big",
    "business",
    "java",
    "c",
    "back",
    "end",
    "angular",
    "front",
    "end",
    "may",
    "get",
    "crap",
    "think",
    "java",
    "one",
    "best",
    "languages",
    "learn",
    "programming",
    "general",
    "uh",
    "strict",
    "forces",
    "write",
    "clean",
    "code",
    "way",
    "actually",
    "first",
    "language",
    "ever",
    "worked",
    "may",
    "little",
    "biased",
    "um",
    "would",
    "use",
    "freelancing",
    "small",
    "projects",
    "looking",
    "get",
    "big",
    "company",
    "may",
    "worth",
    "learning",
    "ruby",
    "dynamic",
    "programming",
    "language",
    "used",
    "web",
    "applications",
    "apis",
    "among",
    "things",
    "popular",
    "web",
    "framework",
    "ruby",
    "rails",
    "tough",
    "talk",
    "ruby",
    "without",
    "talking",
    "ruby",
    "rails",
    "context",
    "web",
    "development",
    "far",
    "language",
    "goes",
    "really",
    "like",
    "think",
    "one",
    "readable",
    "languages",
    "um",
    "almost",
    "like",
    "reading",
    "english",
    "actually",
    "one",
    "goals",
    "matts",
    "creator",
    "ruby",
    "pretty",
    "forgiving",
    "language",
    "well",
    "cyntax",
    "language",
    "unique",
    "expressive",
    "syntax",
    "draw",
    "inspiration",
    "languages",
    "like",
    "pearl",
    "small",
    "talk",
    "lisp",
    "never",
    "used",
    "think",
    "actually",
    "similar",
    "python",
    "uh",
    "ruby",
    "rich",
    "ecosystem",
    "open",
    "source",
    "libraries",
    "packages",
    "called",
    "gems",
    "easily",
    "integrated",
    "ruby",
    "rails",
    "projects",
    "extend",
    "functionality",
    "gems",
    "ruby",
    "gems",
    "kind",
    "like",
    "npm",
    "coming",
    "world",
    "pip",
    "coming",
    "python",
    "get",
    "things",
    "running",
    "really",
    "really",
    "quickly",
    "ruby",
    "great",
    "rapid",
    "development",
    "people",
    "like",
    "say",
    "ruby",
    "dead",
    "sure",
    "common",
    "languages",
    "fell",
    "bit",
    "past",
    "10",
    "years",
    "still",
    "lot",
    "companies",
    "using",
    "rust",
    "actually",
    "systems",
    "programming",
    "language",
    "lower",
    "level",
    "um",
    "almost",
    "relate",
    "something",
    "like",
    "also",
    "incorporates",
    "highlevel",
    "language",
    "features",
    "pretty",
    "unique",
    "worry",
    "things",
    "like",
    "memory",
    "management",
    "like",
    "would",
    "c",
    "rust",
    "typically",
    "associated",
    "web",
    "development",
    "features",
    "make",
    "good",
    "choice",
    "certain",
    "situations",
    "rust",
    "popular",
    "choice",
    "compiling",
    "web",
    "assembly",
    "enabling",
    "development",
    "high",
    "performance",
    "web",
    "apps",
    "run",
    "browser",
    "going",
    "talk",
    "web",
    "assembly",
    "later",
    "uh",
    "also",
    "safe",
    "language",
    "used",
    "companies",
    "like",
    "dropbox",
    "discord",
    "microsoft",
    "um",
    "web",
    "development",
    "probably",
    "common",
    "case",
    "us",
    "still",
    "great",
    "language",
    "learn",
    "think",
    "grow",
    "popular",
    "web",
    "development",
    "commonly",
    "used",
    "web",
    "assembly",
    "um",
    "web",
    "assembly",
    "gets",
    "popular",
    "think",
    "rust",
    "well",
    "um",
    "also",
    "web",
    "frameworks",
    "use",
    "mention",
    "little",
    "bit",
    "elixir",
    "new",
    "guide",
    "gaining",
    "popularity",
    "seen",
    "quite",
    "bit",
    "functional",
    "concurrent",
    "general",
    "based",
    "general",
    "purpose",
    "language",
    "runs",
    "erlang",
    "virtual",
    "machine",
    "used",
    "build",
    "web",
    "applications",
    "apis",
    "f",
    "tall",
    "used",
    "create",
    "realtime",
    "applications",
    "like",
    "said",
    "goang",
    "probably",
    "wo",
    "use",
    "elixir",
    "something",
    "like",
    "personal",
    "blog",
    "small",
    "project",
    "large",
    "scale",
    "applications",
    "something",
    "recommend",
    "getting",
    "web",
    "development",
    "definitely",
    "languages",
    "choose",
    "options",
    "scala",
    "pearl",
    "swift",
    "cotlin",
    "although",
    "really",
    "web",
    "app",
    "mobile",
    "apps",
    "sorry",
    "um",
    "would",
    "suggest",
    "looking",
    "seeing",
    "one",
    "ones",
    "like",
    "best",
    "also",
    "look",
    "popular",
    "area",
    "chart",
    "jetb",
    "2017",
    "2023",
    "percentages",
    "languages",
    "used",
    "web",
    "developers",
    "percentages",
    "likely",
    "adopt",
    "see",
    "used",
    "javascript",
    "python",
    "html",
    "css",
    "sql",
    "java",
    "would",
    "base",
    "everything",
    "chart",
    "interesting",
    "see",
    "pause",
    "want",
    "also",
    "link",
    "description",
    "um",
    "article",
    "gone",
    "server",
    "side",
    "languages",
    "let",
    "talk",
    "frameworks",
    "use",
    "languages",
    "going",
    "go",
    "way",
    "could",
    "list",
    "popular",
    "ones",
    "frameworks",
    "fit",
    "either",
    "opinionated",
    "unopinionated",
    "framework",
    "opinionated",
    "framework",
    "one",
    "set",
    "way",
    "things",
    "high",
    "level",
    "abstract",
    "kind",
    "follow",
    "structure",
    "follow",
    "rules",
    "use",
    "however",
    "get",
    "ton",
    "features",
    "right",
    "box",
    "unopinionated",
    "framework",
    "much",
    "freedom",
    "done",
    "split",
    "frameworks",
    "going",
    "mention",
    "opinionated",
    "sl",
    "highlevel",
    "unopinionated",
    "sl",
    "minimal",
    "right",
    "go",
    "order",
    "went",
    "languages",
    "say",
    "javascript",
    "nodejs",
    "bunch",
    "frameworks",
    "way",
    "many",
    "list",
    "popular",
    "ones",
    "unlike",
    "rest",
    "languages",
    "popular",
    "framework",
    "actually",
    "min",
    "minimal",
    "unopinionated",
    "framework",
    "express",
    "express",
    "great",
    "building",
    "web",
    "applications",
    "apis",
    "great",
    "set",
    "features",
    "well",
    "documented",
    "popular",
    "find",
    "tons",
    "content",
    "tutorials",
    "courses",
    "use",
    "express",
    "great",
    "community",
    "fast",
    "performant",
    "probably",
    "would",
    "recommend",
    "going",
    "coo",
    "another",
    "minimal",
    "framework",
    "actually",
    "created",
    "team",
    "express",
    "similar",
    "modern",
    "features",
    "pretty",
    "much",
    "thing",
    "build",
    "lot",
    "stuff",
    "thing",
    "fastify",
    "fastify",
    "even",
    "newer",
    "framework",
    "extremely",
    "fast",
    "faster",
    "express",
    "h",
    "modern",
    "features",
    "probably",
    "say",
    "learn",
    "express",
    "popular",
    "probably",
    "end",
    "using",
    "right",
    "popular",
    "opinion",
    "uh",
    "unopinionated",
    "minimal",
    "frameworks",
    "far",
    "highlevel",
    "opinionated",
    "frameworks",
    "nest",
    "nestjs",
    "actually",
    "built",
    "top",
    "express",
    "typescript",
    "first",
    "framework",
    "similar",
    "angular",
    "know",
    "sounds",
    "weird",
    "angular",
    "framework",
    "actually",
    "really",
    "similar",
    "structure",
    "opinionated",
    "know",
    "things",
    "certain",
    "way",
    "great",
    "building",
    "large",
    "scale",
    "applications",
    "well",
    "documented",
    "say",
    "coming",
    "angular",
    "learning",
    "full",
    "stack",
    "getting",
    "might",
    "want",
    "check",
    "nestjs",
    "back",
    "end",
    "adonis",
    "last",
    "framework",
    "mention",
    "another",
    "opinionated",
    "framework",
    "similar",
    "laravel",
    "actually",
    "think",
    "really",
    "underrated",
    "mvc",
    "framework",
    "scaffolding",
    "authentication",
    "template",
    "engine",
    "lot",
    "features",
    "find",
    "laravel",
    "coming",
    "php",
    "laravel",
    "adonis",
    "might",
    "something",
    "want",
    "check",
    "right",
    "next",
    "python",
    "lot",
    "frameworks",
    "use",
    "python",
    "two",
    "really",
    "stick",
    "really",
    "phenomenal",
    "frameworks",
    "jango",
    "flask",
    "one",
    "highlevel",
    "opinionated",
    "one",
    "uh",
    "minimal",
    "unopinionated",
    "jango",
    "high",
    "level",
    "includes",
    "everything",
    "need",
    "build",
    "web",
    "application",
    "template",
    "engine",
    "omm",
    "authentication",
    "cli",
    "uh",
    "like",
    "said",
    "opinionated",
    "things",
    "certain",
    "way",
    "also",
    "get",
    "ton",
    "box",
    "including",
    "entire",
    "admin",
    "area",
    "manage",
    "content",
    "basically",
    "create",
    "models",
    "content",
    "like",
    "let",
    "say",
    "blog",
    "post",
    "model",
    "admin",
    "area",
    "right",
    "box",
    "add",
    "create",
    "read",
    "update",
    "delete",
    "posts",
    "really",
    "really",
    "cool",
    "um",
    "great",
    "freelancers",
    "well",
    "admin",
    "area",
    "clients",
    "flask",
    "another",
    "great",
    "python",
    "framework",
    "pretty",
    "much",
    "polar",
    "opposite",
    "jango",
    "flask",
    "minimal",
    "uh",
    "similar",
    "express",
    "great",
    "building",
    "apis",
    "structure",
    "things",
    "want",
    "fast",
    "flexible",
    "great",
    "option",
    "next",
    "php",
    "two",
    "popular",
    "frameworks",
    "laravel",
    "symphony",
    "others",
    "like",
    "code",
    "igniter",
    "actually",
    "first",
    "php",
    "say",
    "first",
    "mvc",
    "framework",
    "introduced",
    "really",
    "like",
    "used",
    "much",
    "anymore",
    "know",
    "code",
    "igniter",
    "special",
    "place",
    "heart",
    "guess",
    "laravel",
    "opinion",
    "one",
    "best",
    "frameworks",
    "period",
    "highlevel",
    "opinionated",
    "framework",
    "includes",
    "everything",
    "need",
    "build",
    "web",
    "app",
    "database",
    "migrations",
    "really",
    "great",
    "om",
    "called",
    "eloquin",
    "get",
    "ors",
    "little",
    "bit",
    "authentication",
    "uh",
    "multiple",
    "drivers",
    "cli",
    "template",
    "engine",
    "much",
    "say",
    "pretty",
    "similar",
    "python",
    "django",
    "symphony",
    "another",
    "great",
    "php",
    "framework",
    "bit",
    "complex",
    "larl",
    "used",
    "lot",
    "big",
    "companies",
    "laravel",
    "actually",
    "built",
    "top",
    "symphony",
    "components",
    "symphony",
    "modular",
    "created",
    "small",
    "course",
    "symphony",
    "along",
    "time",
    "ago",
    "used",
    "years",
    "lot",
    "kind",
    "slipped",
    "mind",
    "um",
    "might",
    "something",
    "want",
    "check",
    "slim",
    "php",
    "another",
    "framework",
    "think",
    "really",
    "underrated",
    "always",
    "need",
    "something",
    "lock",
    "laravel",
    "symphony",
    "sometimes",
    "need",
    "simple",
    "framework",
    "build",
    "api",
    "small",
    "application",
    "slim",
    "great",
    "similar",
    "express",
    "flask",
    "php",
    "next",
    "goang",
    "one",
    "thing",
    "realized",
    "every",
    "language",
    "need",
    "web",
    "framework",
    "build",
    "anything",
    "substantial",
    "goang",
    "really",
    "need",
    "framework",
    "use",
    "lot",
    "standard",
    "library",
    "powerful",
    "everything",
    "need",
    "build",
    "web",
    "application",
    "um",
    "frameworks",
    "one",
    "called",
    "jin",
    "includes",
    "router",
    "template",
    "engine",
    "like",
    "laravel",
    "django",
    "next",
    "c",
    "c",
    "general",
    "purpose",
    "language",
    "used",
    "kinds",
    "things",
    "web",
    "development",
    "mobile",
    "development",
    "game",
    "development",
    "used",
    "lot",
    "net",
    "framework",
    "software",
    "framework",
    "developed",
    "microsoft",
    "web",
    "framework",
    "building",
    "web",
    "applications",
    "probably",
    "going",
    "use",
    "go",
    "web",
    "development",
    "c",
    "developer",
    "part",
    "broader",
    "donnet",
    "ecosystem",
    "provides",
    "flexible",
    "platform",
    "developing",
    "applications",
    "also",
    "use",
    "languages",
    "like",
    "fp",
    "visual",
    "basic",
    "core",
    "latest",
    "version",
    "open",
    "source",
    "crossplatform",
    "bit",
    "lightweight",
    "original",
    "platform",
    "um",
    "yeah",
    "probably",
    "going",
    "go",
    "c",
    "also",
    "blazer",
    "newer",
    "framework",
    "actually",
    "fits",
    "framework",
    "believe",
    "part",
    "core",
    "allows",
    "build",
    "interactive",
    "web",
    "uis",
    "using",
    "c",
    "instead",
    "javascript",
    "many",
    "ways",
    "similar",
    "something",
    "like",
    "reactor",
    "view",
    "also",
    "used",
    "web",
    "assembly",
    "talk",
    "soon",
    "next",
    "java",
    "big",
    "web",
    "web",
    "framework",
    "java",
    "spring",
    "used",
    "lot",
    "big",
    "companies",
    "bit",
    "complex",
    "frameworks",
    "lot",
    "different",
    "parts",
    "spring",
    "mvc",
    "web",
    "framework",
    "simplifies",
    "development",
    "web",
    "applications",
    "follows",
    "model",
    "view",
    "controller",
    "design",
    "pattern",
    "provides",
    "features",
    "building",
    "web",
    "controllers",
    "handling",
    "requests",
    "rendering",
    "views",
    "web",
    "frameworks",
    "java",
    "like",
    "hibernate",
    "uh",
    "apache",
    "struts",
    "play",
    "also",
    "uh",
    "play",
    "framework",
    "also",
    "use",
    "scala",
    "programming",
    "language",
    "using",
    "ruby",
    "web",
    "development",
    "say",
    "probably",
    "90",
    "99",
    "chance",
    "going",
    "using",
    "ruby",
    "rails",
    "highlevel",
    "opinionated",
    "framework",
    "includes",
    "ton",
    "stuff",
    "box",
    "great",
    "rapid",
    "development",
    "basically",
    "command",
    "line",
    "tools",
    "scaffolding",
    "pretty",
    "much",
    "generate",
    "basic",
    "crud",
    "application",
    "seconds",
    "kind",
    "take",
    "great",
    "large",
    "scale",
    "applications",
    "also",
    "use",
    "smaller",
    "stuff",
    "actually",
    "uh",
    "knowledgebase",
    "app",
    "built",
    "ruby",
    "rails",
    "served",
    "documentation",
    "computer",
    "repair",
    "business",
    "long",
    "long",
    "time",
    "ago",
    "uh",
    "rails",
    "definitely",
    "say",
    "top",
    "five",
    "top",
    "three",
    "favorite",
    "frameworks",
    "sinatra",
    "another",
    "framework",
    "uses",
    "ruby",
    "takes",
    "minimalistic",
    "approach",
    "need",
    "something",
    "rails",
    "could",
    "check",
    "sinatra",
    "rust",
    "often",
    "associated",
    "systems",
    "program",
    "gained",
    "popularity",
    "web",
    "development",
    "due",
    "focus",
    "safety",
    "performance",
    "uh",
    "modern",
    "programming",
    "practices",
    "russ",
    "many",
    "web",
    "frameworks",
    "languages",
    "offer",
    "solid",
    "options",
    "building",
    "web",
    "applications",
    "apis",
    "actic",
    "high",
    "performance",
    "web",
    "framework",
    "rust",
    "known",
    "speed",
    "scalability",
    "makes",
    "suitable",
    "applications",
    "microservices",
    "uh",
    "actic",
    "leverages",
    "rust",
    "concurrency",
    "features",
    "good",
    "choice",
    "handle",
    "many",
    "connections",
    "simultaneously",
    "rocket",
    "opinionated",
    "web",
    "framework",
    "rust",
    "prioritizes",
    "developer",
    "productivity",
    "aims",
    "create",
    "kind",
    "great",
    "outof",
    "thebox",
    "experience",
    "strong",
    "type",
    "checking",
    "expressive",
    "syntax",
    "focus",
    "safety",
    "elixir",
    "phoenix",
    "uh",
    "framework",
    "inspired",
    "ruby",
    "rails",
    "high",
    "level",
    "opinionated",
    "framework",
    "includes",
    "everything",
    "need",
    "build",
    "web",
    "application",
    "uh",
    "great",
    "building",
    "large",
    "scale",
    "applications",
    "also",
    "use",
    "smaller",
    "projects",
    "similar",
    "ruby",
    "rails",
    "plug",
    "minimal",
    "composable",
    "library",
    "building",
    "web",
    "apps",
    "elixir",
    "uh",
    "designed",
    "lightweight",
    "unobtrusive",
    "right",
    "mean",
    "frameworks",
    "well",
    "chances",
    "going",
    "one",
    "languages",
    "probably",
    "going",
    "use",
    "one",
    "frameworks",
    "right",
    "learn",
    "language",
    "learn",
    "framework",
    "point",
    "understand",
    "http",
    "including",
    "request",
    "response",
    "cycle",
    "methods",
    "status",
    "codes",
    "al",
    "also",
    "understand",
    "basics",
    "rest",
    "stands",
    "representational",
    "state",
    "transfer",
    "architectural",
    "style",
    "building",
    "apis",
    "standard",
    "protocol",
    "set",
    "guidelines",
    "building",
    "apis",
    "older",
    "still",
    "relevant",
    "crash",
    "course",
    "rest",
    "apis",
    "want",
    "check",
    "learn",
    "matter",
    "type",
    "developer",
    "definitely",
    "understand",
    "rest",
    "even",
    "developer",
    "going",
    "interact",
    "apis",
    "backend",
    "full",
    "stack",
    "developer",
    "building",
    "apis",
    "something",
    "need",
    "know",
    "web",
    "development",
    "graphql",
    "newer",
    "alternative",
    "rest",
    "query",
    "language",
    "apis",
    "runtime",
    "fulfilling",
    "queries",
    "existing",
    "data",
    "bit",
    "complex",
    "r",
    "rest",
    "would",
    "say",
    "graphql",
    "something",
    "absolutely",
    "need",
    "know",
    "helpful",
    "um",
    "little",
    "bit",
    "powerful",
    "specify",
    "data",
    "want",
    "get",
    "back",
    "server",
    "rest",
    "get",
    "data",
    "available",
    "instance",
    "rest",
    "uh",
    "endpoint",
    "hit",
    "maybe",
    "sl",
    "api",
    "posts",
    "going",
    "give",
    "fields",
    "post",
    "know",
    "might",
    "get",
    "back",
    "10",
    "blog",
    "posts",
    "going",
    "title",
    "body",
    "stuff",
    "ca",
    "really",
    "say",
    "well",
    "want",
    "title",
    "post",
    "ca",
    "rest",
    "api",
    "graphql",
    "actually",
    "send",
    "query",
    "says",
    "want",
    "title",
    "category",
    "whatever",
    "might",
    "powerful",
    "uh",
    "rest",
    "api",
    "necessity",
    "um",
    "backend",
    "full",
    "stack",
    "dev",
    "may",
    "creating",
    "graphql",
    "apis",
    "many",
    "different",
    "languages",
    "frameworks",
    "front",
    "andev",
    "may",
    "interacting",
    "apis",
    "learn",
    "make",
    "graphql",
    "requests",
    "parse",
    "data",
    "using",
    "client",
    "different",
    "graphql",
    "clients",
    "one",
    "popular",
    "one",
    "apollo",
    "okay",
    "frontend",
    "dev",
    "dealing",
    "graphql",
    "good",
    "chance",
    "might",
    "using",
    "apollo",
    "client",
    "backend",
    "full",
    "stack",
    "dev",
    "even",
    "freelancer",
    "works",
    "wordpress",
    "going",
    "need",
    "learn",
    "databases",
    "database",
    "collection",
    "data",
    "stored",
    "computer",
    "system",
    "software",
    "use",
    "work",
    "database",
    "called",
    "database",
    "management",
    "system",
    "dbms",
    "different",
    "types",
    "databases",
    "want",
    "go",
    "real",
    "quick",
    "talk",
    "database",
    "systems",
    "types",
    "first",
    "type",
    "common",
    "relational",
    "database",
    "around",
    "forever",
    "systems",
    "hold",
    "structured",
    "data",
    "related",
    "data",
    "stored",
    "tables",
    "rows",
    "kind",
    "picture",
    "excel",
    "spreadsheet",
    "much",
    "powerful",
    "multiple",
    "tables",
    "related",
    "example",
    "table",
    "users",
    "table",
    "let",
    "say",
    "blog",
    "posts",
    "user",
    "multiple",
    "blog",
    "posts",
    "relate",
    "two",
    "tables",
    "together",
    "putting",
    "user",
    "id",
    "field",
    "blog",
    "post",
    "table",
    "use",
    "something",
    "called",
    "sq",
    "l",
    "sql",
    "uh",
    "stands",
    "structured",
    "query",
    "language",
    "use",
    "interact",
    "databases",
    "create",
    "tables",
    "insert",
    "data",
    "update",
    "delete",
    "data",
    "aggregate",
    "data",
    "usually",
    "application",
    "use",
    "something",
    "called",
    "om",
    "object",
    "relational",
    "mapper",
    "interact",
    "database",
    "instead",
    "writing",
    "raw",
    "sql",
    "queries",
    "talk",
    "ors",
    "uh",
    "minutes",
    "far",
    "relational",
    "databases",
    "go",
    "postgrads",
    "postgresql",
    "one",
    "popular",
    "um",
    "size",
    "projects",
    "really",
    "object",
    "relational",
    "database",
    "everything",
    "looked",
    "object",
    "properties",
    "common",
    "python",
    "course",
    "use",
    "language",
    "long",
    "driver",
    "supports",
    "really",
    "bound",
    "specific",
    "database",
    "system",
    "language",
    "use",
    "things",
    "popular",
    "others",
    "sql",
    "mysql",
    "simil",
    "ilar",
    "postgres",
    "work",
    "similar",
    "way",
    "sql",
    "popular",
    "world",
    "php",
    "learning",
    "php",
    "know",
    "learning",
    "con",
    "content",
    "online",
    "tutorials",
    "courses",
    "chances",
    "lot",
    "going",
    "using",
    "mysql",
    "mssql",
    "microsoft",
    "sql",
    "used",
    "lot",
    "like",
    "cop",
    "net",
    "framework",
    "part",
    "whole",
    "microsoft",
    "ecosystem",
    "still",
    "use",
    "like",
    "postgrads",
    "c",
    "bound",
    "specific",
    "system",
    "long",
    "driver",
    "available",
    "also",
    "nosql",
    "databases",
    "databases",
    "store",
    "data",
    "bit",
    "differently",
    "say",
    "huge",
    "data",
    "sets",
    "closely",
    "related",
    "still",
    "relationships",
    "get",
    "many",
    "features",
    "relational",
    "databases",
    "aspect",
    "typically",
    "good",
    "performance",
    "scalability",
    "also",
    "great",
    "things",
    "like",
    "realtime",
    "web",
    "app",
    "applications",
    "also",
    "subset",
    "nosql",
    "databases",
    "like",
    "document",
    "databases",
    "key",
    "value",
    "stores",
    "instead",
    "storing",
    "data",
    "tables",
    "rows",
    "columns",
    "store",
    "data",
    "called",
    "documents",
    "something",
    "called",
    "collection",
    "kind",
    "think",
    "collection",
    "table",
    "document",
    "row",
    "record",
    "know",
    "relational",
    "database",
    "documents",
    "formatted",
    "like",
    "json",
    "objects",
    "really",
    "goes",
    "well",
    "javascript",
    "script",
    "fact",
    "mongodb",
    "common",
    "um",
    "nosql",
    "database",
    "used",
    "lot",
    "nodejs",
    "nosql",
    "databases",
    "include",
    "redis",
    "key",
    "value",
    "store",
    "great",
    "caching",
    "storing",
    "session",
    "data",
    "also",
    "fast",
    "cassandra",
    "wide",
    "column",
    "store",
    "great",
    "large",
    "scale",
    "applications",
    "neo4j",
    "actually",
    "graph",
    "database",
    "still",
    "considered",
    "sql",
    "great",
    "storing",
    "rel",
    "relationships",
    "data",
    "social",
    "network",
    "instance",
    "use",
    "neo4j",
    "store",
    "relationships",
    "users",
    "whatever",
    "um",
    "also",
    "coach",
    "db",
    "dynamo",
    "db",
    "tons",
    "nosql",
    "databases",
    "would",
    "say",
    "mongodb",
    "popular",
    "far",
    "cloud",
    "databases",
    "extremely",
    "popular",
    "used",
    "would",
    "install",
    "database",
    "server",
    "set",
    "everything",
    "use",
    "cloud",
    "service",
    "like",
    "aws",
    "mongodb",
    "atlas",
    "database",
    "hosted",
    "separately",
    "great",
    "scaling",
    "performance",
    "use",
    "lot",
    "ones",
    "talked",
    "um",
    "instance",
    "set",
    "remote",
    "postgres",
    "database",
    "amazon",
    "web",
    "services",
    "mongodb",
    "database",
    "atlas",
    "cloud",
    "databases",
    "google",
    "firebase",
    "realtime",
    "database",
    "includes",
    "everything",
    "need",
    "authentication",
    "file",
    "st",
    "storage",
    "hosting",
    "solution",
    "medium",
    "small",
    "mediumsized",
    "apps",
    "superbase",
    "another",
    "uh",
    "another",
    "one",
    "similar",
    "firebase",
    "source",
    "alternative",
    "built",
    "top",
    "postgres",
    "great",
    "option",
    "want",
    "host",
    "database",
    "want",
    "features",
    "something",
    "like",
    "firebase",
    "also",
    "includes",
    "authentication",
    "stuff",
    "like",
    "prefer",
    "use",
    "databases",
    "hosted",
    "cloud",
    "takes",
    "much",
    "work",
    "worry",
    "backups",
    "anything",
    "like",
    "worry",
    "getting",
    "set",
    "full",
    "support",
    "cases",
    "um",
    "long",
    "know",
    "usually",
    "paid",
    "plan",
    "mongodb",
    "atlas",
    "offer",
    "free",
    "tier",
    "serious",
    "project",
    "going",
    "want",
    "paid",
    "plan",
    "right",
    "lets",
    "focus",
    "application",
    "worry",
    "database",
    "aspect",
    "fauna",
    "db",
    "another",
    "one",
    "starting",
    "gain",
    "lot",
    "traction",
    "serverless",
    "database",
    "used",
    "lot",
    "javascript",
    "world",
    "typescript",
    "inspired",
    "developer",
    "experience",
    "data",
    "stored",
    "documents",
    "similar",
    "mongodb",
    "lastly",
    "databases",
    "well",
    "markdown",
    "actually",
    "database",
    "explain",
    "minute",
    "little",
    "setup",
    "great",
    "developing",
    "great",
    "testing",
    "small",
    "projects",
    "even",
    "want",
    "use",
    "production",
    "like",
    "personal",
    "blog",
    "something",
    "like",
    "like",
    "sql",
    "light",
    "sql",
    "light",
    "actually",
    "sql",
    "database",
    "file",
    "based",
    "install",
    "anything",
    "anything",
    "like",
    "create",
    "file",
    "something",
    "db",
    "use",
    "sql",
    "queries",
    "different",
    "orms",
    "use",
    "well",
    "think",
    "great",
    "course",
    "development",
    "want",
    "set",
    "postgres",
    "database",
    "something",
    "like",
    "want",
    "temporarily",
    "use",
    "sql",
    "light",
    "like",
    "simple",
    "blog",
    "going",
    "ton",
    "data",
    "create",
    "post",
    "every",
    "couple",
    "days",
    "sqlite",
    "enough",
    "something",
    "like",
    "markdown",
    "files",
    "also",
    "good",
    "um",
    "personal",
    "websites",
    "personal",
    "blogs",
    "things",
    "like",
    "especially",
    "using",
    "something",
    "like",
    "gatsby",
    "nextjs",
    "packages",
    "use",
    "work",
    "markdown",
    "files",
    "want",
    "create",
    "new",
    "blog",
    "post",
    "would",
    "simply",
    "create",
    "new",
    "markdown",
    "file",
    "specific",
    "folder",
    "would",
    "add",
    "front",
    "matter",
    "metadata",
    "top",
    "post",
    "body",
    "save",
    "automatically",
    "put",
    "know",
    "blog",
    "front",
    "end",
    "definitely",
    "something",
    "look",
    "smaller",
    "projects",
    "h2",
    "another",
    "file",
    "based",
    "database",
    "never",
    "used",
    "really",
    "ca",
    "say",
    "much",
    "um",
    "would",
    "stick",
    "sql",
    "light",
    "markdown",
    "development",
    "testing",
    "well",
    "small",
    "projects",
    "want",
    "install",
    "set",
    "um",
    "postgres",
    "mongodb",
    "something",
    "like",
    "okay",
    "like",
    "said",
    "sql",
    "sql",
    "used",
    "create",
    "queries",
    "um",
    "insert",
    "data",
    "select",
    "data",
    "stuff",
    "relational",
    "databases",
    "typically",
    "write",
    "sql",
    "queries",
    "raw",
    "sql",
    "queries",
    "application",
    "code",
    "uh",
    "command",
    "line",
    "using",
    "uh",
    "like",
    "mysql",
    "shell",
    "something",
    "like",
    "using",
    "uh",
    "even",
    "guey",
    "tool",
    "usually",
    "write",
    "sql",
    "queries",
    "within",
    "application",
    "usually",
    "usually",
    "going",
    "use",
    "om",
    "stands",
    "object",
    "relational",
    "mapping",
    "tool",
    "interact",
    "database",
    "programming",
    "within",
    "application",
    "usually",
    "syntax",
    "rather",
    "like",
    "said",
    "rather",
    "writing",
    "sql",
    "queries",
    "great",
    "productivity",
    "makes",
    "code",
    "much",
    "neater",
    "um",
    "tend",
    "prevent",
    "things",
    "like",
    "sql",
    "injection",
    "attacks",
    "lot",
    "time",
    "easily",
    "swap",
    "database",
    "systems",
    "still",
    "use",
    "code",
    "even",
    "use",
    "postgres",
    "want",
    "switch",
    "mysql",
    "changing",
    "config",
    "keep",
    "code",
    "still",
    "works",
    "way",
    "typically",
    "work",
    "create",
    "model",
    "data",
    "application",
    "might",
    "let",
    "say",
    "um",
    "let",
    "say",
    "work",
    "workout",
    "app",
    "database",
    "table",
    "collection",
    "called",
    "workouts",
    "application",
    "would",
    "create",
    "model",
    "workouts",
    "would",
    "define",
    "different",
    "fields",
    "types",
    "workouts",
    "would",
    "bring",
    "workout",
    "model",
    "file",
    "able",
    "things",
    "like",
    "workout",
    "find",
    "pass",
    "whatever",
    "know",
    "whatever",
    "looking",
    "workout",
    "id",
    "certain",
    "number",
    "whatever",
    "might",
    "might",
    "much",
    "better",
    "writing",
    "select",
    "workouts",
    "whatever",
    "um",
    "makes",
    "things",
    "much",
    "easier",
    "ors",
    "specific",
    "language",
    "andor",
    "database",
    "examples",
    "uh",
    "first",
    "om",
    "mongod",
    "db",
    "using",
    "two",
    "things",
    "together",
    "good",
    "chance",
    "going",
    "using",
    "sq",
    "eyes",
    "also",
    "omm",
    "supports",
    "sql",
    "datab",
    "bases",
    "like",
    "postres",
    "mysql",
    "even",
    "even",
    "sql",
    "light",
    "uh",
    "ms",
    "sql",
    "server",
    "well",
    "popular",
    "easy",
    "use",
    "well",
    "documented",
    "um",
    "jango",
    "omm",
    "used",
    "obviously",
    "jango",
    "websites",
    "use",
    "standalone",
    "without",
    "using",
    "jango",
    "well",
    "sql",
    "alchemy",
    "orm",
    "python",
    "supports",
    "databases",
    "sq",
    "eyes",
    "basically",
    "works",
    "way",
    "except",
    "python",
    "use",
    "jango",
    "flask",
    "python",
    "framework",
    "pongo",
    "know",
    "said",
    "relational",
    "databases",
    "um",
    "except",
    "mongoose",
    "also",
    "p",
    "omm",
    "mongodb",
    "python",
    "similar",
    "know",
    "mongoose",
    "eloquent",
    "om",
    "php",
    "used",
    "laravel",
    "really",
    "like",
    "eloquent",
    "think",
    "eloquent",
    "easy",
    "use",
    "clean",
    "syntax",
    "well",
    "documented",
    "doctrine",
    "another",
    "php",
    "supports",
    "sql",
    "databases",
    "uh",
    "dapper",
    "orm",
    "cp",
    "popular",
    "used",
    "lot",
    "big",
    "companies",
    "prisma",
    "typescript",
    "omm",
    "intuitive",
    "data",
    "model",
    "automated",
    "migrations",
    "type",
    "safety",
    "lets",
    "declare",
    "database",
    "tables",
    "human",
    "readable",
    "way",
    "use",
    "javascript",
    "typescript",
    "rust",
    "believe",
    "use",
    "goang",
    "drizzle",
    "orm",
    "another",
    "typescript",
    "orm",
    "use",
    "sql",
    "like",
    "syntax",
    "qu",
    "queries",
    "api",
    "squiz",
    "mongus",
    "like",
    "syntax",
    "mro",
    "micro",
    "rm",
    "sure",
    "pronounced",
    "never",
    "use",
    "another",
    "typescript",
    "rm",
    "supports",
    "mongodb",
    "well",
    "sql",
    "databases",
    "nextjs",
    "query",
    "builder",
    "supports",
    "sql",
    "databases",
    "omm",
    "similar",
    "bit",
    "lowlevel",
    "great",
    "building",
    "sql",
    "queries",
    "programmatic",
    "way",
    "imagine",
    "many",
    "think",
    "many",
    "languages",
    "many",
    "databases",
    "way",
    "go",
    "wanted",
    "give",
    "guys",
    "couple",
    "examples",
    "right",
    "another",
    "thing",
    "need",
    "learn",
    "pretty",
    "much",
    "matter",
    "route",
    "take",
    "authentication",
    "authentication",
    "authorization",
    "authentication",
    "process",
    "verifying",
    "identity",
    "user",
    "important",
    "part",
    "web",
    "development",
    "dev",
    "need",
    "know",
    "consume",
    "use",
    "authentication",
    "services",
    "backend",
    "full",
    "stack",
    "dev",
    "likely",
    "going",
    "need",
    "know",
    "implement",
    "entire",
    "system",
    "different",
    "ways",
    "common",
    "practices",
    "one",
    "cookies",
    "sessions",
    "popular",
    "way",
    "authenticate",
    "basically",
    "user",
    "logs",
    "session",
    "created",
    "server",
    "cookie",
    "created",
    "client",
    "cookie",
    "sent",
    "request",
    "server",
    "verify",
    "user",
    "based",
    "session",
    "definitely",
    "learn",
    "http",
    "cookies",
    "secure",
    "cookies",
    "help",
    "understand",
    "make",
    "application",
    "secure",
    "also",
    "going",
    "want",
    "aware",
    "things",
    "like",
    "scripting",
    "request",
    "forgeries",
    "attacks",
    "used",
    "steal",
    "cookies",
    "impersonate",
    "users",
    "next",
    "json",
    "web",
    "tokens",
    "jwt",
    "json",
    "objects",
    "signed",
    "server",
    "stored",
    "client",
    "cases",
    "sent",
    "request",
    "server",
    "verify",
    "user",
    "based",
    "token",
    "commonly",
    "used",
    "rest",
    "apis",
    "full",
    "stack",
    "java",
    "uh",
    "full",
    "stack",
    "javascript",
    "applications",
    "good",
    "way",
    "protect",
    "api",
    "endpoints",
    "anybody",
    "visit",
    "every",
    "endpoint",
    "ooth",
    "open",
    "standard",
    "access",
    "delegation",
    "commonly",
    "used",
    "way",
    "users",
    "grant",
    "websites",
    "applications",
    "access",
    "information",
    "websites",
    "without",
    "giving",
    "password",
    "example",
    "see",
    "login",
    "google",
    "account",
    "login",
    "facebook",
    "account",
    "usually",
    "ooth",
    "another",
    "way",
    "users",
    "authenticate",
    "might",
    "mix",
    "oaf",
    "cookies",
    "sessions",
    "something",
    "like",
    "authentication",
    "libraries",
    "um",
    "use",
    "write",
    "middleware",
    "authentication",
    "bunch",
    "libraries",
    "use",
    "passport",
    "grant",
    "um",
    "also",
    "many",
    "framework",
    "larl",
    "jango",
    "authentication",
    "systems",
    "use",
    "extend",
    "password",
    "hashing",
    "also",
    "something",
    "going",
    "need",
    "look",
    "um",
    "libraries",
    "like",
    "bcrypt",
    "um",
    "know",
    "encrypt",
    "password",
    "never",
    "want",
    "save",
    "plain",
    "text",
    "passwords",
    "database",
    "use",
    "bcrypt",
    "library",
    "compare",
    "plain",
    "text",
    "password",
    "encrypted",
    "one",
    "database",
    "traditionally",
    "front",
    "end",
    "backend",
    "said",
    "lines",
    "really",
    "getting",
    "blurred",
    "serverless",
    "architecture",
    "becoming",
    "popular",
    "serverless",
    "essentially",
    "allows",
    "run",
    "serers",
    "side",
    "code",
    "without",
    "manage",
    "server",
    "use",
    "platform",
    "like",
    "netlify",
    "versel",
    "give",
    "serverless",
    "functions",
    "um",
    "could",
    "also",
    "use",
    "something",
    "like",
    "aws",
    "lambda",
    "azure",
    "functions",
    "platforms",
    "like",
    "firebase",
    "superbase",
    "also",
    "considered",
    "serverless",
    "um",
    "use",
    "serverless",
    "functions",
    "handle",
    "things",
    "like",
    "authentication",
    "sending",
    "emails",
    "protecting",
    "data",
    "also",
    "saves",
    "money",
    "paying",
    "thetime",
    "server",
    "server",
    "always",
    "running",
    "paying",
    "time",
    "code",
    "running",
    "hits",
    "functions",
    "okay",
    "event",
    "driven",
    "code",
    "triggered",
    "events",
    "like",
    "http",
    "requests",
    "file",
    "uploads",
    "database",
    "changes",
    "small",
    "application",
    "great",
    "option",
    "um",
    "serverless",
    "architecture",
    "usually",
    "really",
    "scare",
    "uh",
    "scary",
    "scalable",
    "well",
    "um",
    "also",
    "part",
    "call",
    "jamstack",
    "modern",
    "web",
    "development",
    "architecture",
    "based",
    "client",
    "side",
    "javascript",
    "reusable",
    "apis",
    "markup",
    "okay",
    "great",
    "option",
    "static",
    "websites",
    "small",
    "applications",
    "technologies",
    "included",
    "jamstack",
    "already",
    "talked",
    "would",
    "static",
    "site",
    "generators",
    "like",
    "gatsby",
    "xjs",
    "apis",
    "like",
    "graph",
    "q",
    "rest",
    "serverless",
    "functions",
    "really",
    "anything",
    "new",
    "new",
    "way",
    "things",
    "learn",
    "check",
    "jamstack",
    "website",
    "james",
    "qui",
    "also",
    "great",
    "crash",
    "course",
    "uh",
    "channel",
    "jamstack",
    "want",
    "check",
    "let",
    "talk",
    "deploying",
    "full",
    "stack",
    "applications",
    "apis",
    "bit",
    "difficult",
    "deploying",
    "client",
    "side",
    "application",
    "like",
    "static",
    "website",
    "typically",
    "need",
    "web",
    "server",
    "like",
    "apache",
    "enginex",
    "lot",
    "configuration",
    "goes",
    "set",
    "depends",
    "type",
    "hosting",
    "service",
    "using",
    "uh",
    "use",
    "something",
    "called",
    "platform",
    "service",
    "pass",
    "also",
    "infrastructure",
    "service",
    "ias",
    "um",
    "pass",
    "platform",
    "service",
    "abstracts",
    "away",
    "server",
    "sometimes",
    "database",
    "deploy",
    "code",
    "usually",
    "um",
    "pretty",
    "user",
    "interface",
    "access",
    "server",
    "terminal",
    "install",
    "configure",
    "like",
    "patchy",
    "stuff",
    "obviously",
    "easier",
    "great",
    "people",
    "familiar",
    "linux",
    "running",
    "servers",
    "cloud",
    "hosting",
    "infrastructure",
    "service",
    "manually",
    "set",
    "configure",
    "server",
    "um",
    "full",
    "control",
    "everything",
    "nice",
    "part",
    "install",
    "configure",
    "apache",
    "install",
    "database",
    "whatever",
    "want",
    "basically",
    "like",
    "linux",
    "machine",
    "root",
    "access",
    "great",
    "people",
    "know",
    "lot",
    "us",
    "right",
    "really",
    "great",
    "devops",
    "great",
    "setting",
    "servers",
    "prefer",
    "use",
    "platform",
    "service",
    "um",
    "great",
    "infrastructure",
    "service",
    "uh",
    "hosting",
    "companies",
    "like",
    "digital",
    "ocean",
    "len",
    "noe",
    "um",
    "like",
    "course",
    "aws",
    "aure",
    "big",
    "boys",
    "really",
    "large",
    "companies",
    "tend",
    "use",
    "infrastructure",
    "um",
    "starting",
    "get",
    "devops",
    "territory",
    "whole",
    "another",
    "topic",
    "want",
    "mention",
    "different",
    "typ",
    "yp",
    "hosting",
    "depends",
    "building",
    "skill",
    "level",
    "use",
    "say",
    "cloud",
    "hosting",
    "like",
    "digital",
    "ocean",
    "len",
    "noe",
    "say",
    "images",
    "use",
    "set",
    "entire",
    "environment",
    "um",
    "even",
    "set",
    "docker",
    "talk",
    "docker",
    "little",
    "bit",
    "um",
    "predefined",
    "um",
    "infrastructure",
    "digital",
    "ocean",
    "lode",
    "vulture",
    "uh",
    "lot",
    "companies",
    "individual",
    "developers",
    "suggest",
    "render",
    "fits",
    "need",
    "great",
    "python",
    "php",
    "rails",
    "bunch",
    "stuff",
    "easy",
    "use",
    "free",
    "personal",
    "projects",
    "um",
    "also",
    "deploy",
    "databases",
    "static",
    "sites",
    "heroku",
    "another",
    "option",
    "around",
    "used",
    "used",
    "tutorials",
    "great",
    "free",
    "tear",
    "people",
    "could",
    "follow",
    "along",
    "however",
    "get",
    "rid",
    "free",
    "tear",
    "learning",
    "testing",
    "things",
    "probably",
    "want",
    "go",
    "render",
    "pretty",
    "generous",
    "freet",
    "tear",
    "really",
    "deploy",
    "push",
    "github",
    "log",
    "render",
    "select",
    "repo",
    "much",
    "like",
    "would",
    "netlify",
    "versel",
    "render",
    "support",
    "full",
    "stack",
    "applications",
    "right",
    "briefly",
    "mentioned",
    "bung",
    "js",
    "wanted",
    "dedicated",
    "section",
    "another",
    "one",
    "favorite",
    "new",
    "tech",
    "technologies",
    "really",
    "hope",
    "takes",
    "crash",
    "course",
    "want",
    "go",
    "depth",
    "essentially",
    "javascript",
    "runtime",
    "like",
    "also",
    "complete",
    "toolkit",
    "includes",
    "bundler",
    "easily",
    "build",
    "full",
    "stack",
    "applications",
    "test",
    "runner",
    "compatible",
    "package",
    "manager",
    "run",
    "bun",
    "install",
    "whatever",
    "whatever",
    "package",
    "want",
    "um",
    "written",
    "zig",
    "programming",
    "language",
    "newer",
    "language",
    "gaining",
    "traction",
    "uh",
    "fast",
    "similar",
    "c",
    "love",
    "bnjs",
    "approach",
    "use",
    "webpack",
    "parcel",
    "anything",
    "like",
    "built",
    "um",
    "think",
    "javascript",
    "biggest",
    "problem",
    "many",
    "different",
    "damn",
    "things",
    "need",
    "combine",
    "use",
    "languages",
    "really",
    "like",
    "experience",
    "languages",
    "integrated",
    "close",
    "nit",
    "ecosystem",
    "javascript",
    "place",
    "think",
    "bun",
    "really",
    "addresses",
    "still",
    "new",
    "really",
    "ready",
    "production",
    "yet",
    "least",
    "think",
    "checked",
    "little",
    "think",
    "soon",
    "hoping",
    "gain",
    "lot",
    "traction",
    "right",
    "point",
    "talked",
    "everything",
    "need",
    "know",
    "plus",
    "lot",
    "optional",
    "things",
    "backend",
    "full",
    "stack",
    "developer",
    "obviously",
    "need",
    "know",
    "server",
    "side",
    "language",
    "one",
    "choose",
    "really",
    "uh",
    "building",
    "web",
    "apps",
    "apis",
    "need",
    "know",
    "framework",
    "rare",
    "create",
    "substantial",
    "application",
    "without",
    "web",
    "framework",
    "um",
    "exceptions",
    "like",
    "using",
    "language",
    "like",
    "goang",
    "rust",
    "even",
    "frameworks",
    "use",
    "need",
    "know",
    "databases",
    "could",
    "relational",
    "relational",
    "database",
    "also",
    "need",
    "know",
    "ors",
    "create",
    "models",
    "data",
    "interact",
    "database",
    "could",
    "standalone",
    "one",
    "built",
    "framework",
    "authentication",
    "know",
    "implement",
    "um",
    "applications",
    "important",
    "part",
    "web",
    "development",
    "whether",
    "using",
    "sessions",
    "jwt",
    "ooth",
    "something",
    "else",
    "combination",
    "know",
    "create",
    "rest",
    "apis",
    "scratch",
    "know",
    "create",
    "endpoints",
    "handle",
    "http",
    "requests",
    "knowing",
    "graph",
    "fql",
    "also",
    "plus",
    "think",
    "mandatory",
    "um",
    "also",
    "need",
    "know",
    "make",
    "applications",
    "apis",
    "live",
    "internet",
    "need",
    "know",
    "deployment",
    "difficult",
    "client",
    "side",
    "stuff",
    "establish",
    "process",
    "start",
    "become",
    "second",
    "nature",
    "workflow",
    "deploy",
    "applications",
    "next",
    "batch",
    "technologies",
    "things",
    "may",
    "want",
    "get",
    "would",
    "say",
    "ial",
    "becoming",
    "developer",
    "kind",
    "extra",
    "um",
    "may",
    "essential",
    "certain",
    "job",
    "positions",
    "though",
    "first",
    "one",
    "look",
    "containerization",
    "way",
    "package",
    "software",
    "standardized",
    "units",
    "development",
    "shipment",
    "deployment",
    "people",
    "understand",
    "valuable",
    "let",
    "say",
    "working",
    "application",
    "running",
    "local",
    "machine",
    "everything",
    "working",
    "fine",
    "deploy",
    "server",
    "work",
    "give",
    "uh",
    "another",
    "know",
    "coworker",
    "another",
    "developer",
    "work",
    "machine",
    "figure",
    "could",
    "server",
    "running",
    "different",
    "version",
    "maybe",
    "running",
    "uh",
    "different",
    "operating",
    "system",
    "something",
    "got",
    "messed",
    "imagine",
    "five",
    "people",
    "10",
    "people",
    "working",
    "project",
    "different",
    "machines",
    "different",
    "operating",
    "systems",
    "environments",
    "nightmare",
    "containerization",
    "package",
    "application",
    "container",
    "includes",
    "everything",
    "needs",
    "run",
    "uh",
    "kind",
    "like",
    "virtual",
    "machine",
    "much",
    "lightweight",
    "deploy",
    "container",
    "server",
    "run",
    "way",
    "five",
    "10",
    "plus",
    "team",
    "members",
    "container",
    "local",
    "machine",
    "run",
    "way",
    "uh",
    "great",
    "way",
    "ensure",
    "application",
    "run",
    "regardless",
    "environment",
    "includes",
    "environment",
    "uh",
    "everything",
    "operating",
    "system",
    "docker",
    "main",
    "tool",
    "used",
    "containerization",
    "platform",
    "building",
    "running",
    "shipping",
    "applications",
    "containers",
    "uh",
    "popular",
    "used",
    "lot",
    "big",
    "companies",
    "also",
    "well",
    "documented",
    "plan",
    "working",
    "large",
    "company",
    "anything",
    "devops",
    "going",
    "need",
    "know",
    "docker",
    "kubernetes",
    "another",
    "tool",
    "used",
    "containerization",
    "orchestra",
    "uh",
    "orchestration",
    "system",
    "automating",
    "deployment",
    "scaling",
    "management",
    "competitor",
    "docker",
    "actually",
    "used",
    "docker",
    "allows",
    "manage",
    "multiple",
    "containers",
    "across",
    "multiple",
    "servers",
    "right",
    "aid",
    "driven",
    "automation",
    "also",
    "enhancing",
    "capability",
    "kubernetes",
    "complexity",
    "kind",
    "abstracted",
    "away",
    "developers",
    "able",
    "um",
    "focus",
    "application",
    "development",
    "much",
    "less",
    "infrastructure",
    "management",
    "tools",
    "use",
    "similar",
    "docker",
    "like",
    "vagrant",
    "lxc",
    "like",
    "virtual",
    "machines",
    "docker",
    "uses",
    "containers",
    "process",
    "level",
    "virtualization",
    "much",
    "lightweight",
    "next",
    "web",
    "assembly",
    "often",
    "abbreviated",
    "wasm",
    "technology",
    "allows",
    "us",
    "run",
    "high",
    "performance",
    "code",
    "written",
    "languages",
    "like",
    "c",
    "rust",
    "web",
    "browsers",
    "simple",
    "terms",
    "think",
    "web",
    "assembly",
    "way",
    "bring",
    "fast",
    "efficient",
    "software",
    "written",
    "languages",
    "javascript",
    "browser",
    "javascript",
    "obviously",
    "programming",
    "language",
    "browser",
    "web",
    "general",
    "great",
    "many",
    "things",
    "things",
    "comes",
    "web",
    "development",
    "however",
    "good",
    "things",
    "like",
    "uh",
    "computationally",
    "intensive",
    "tasks",
    "web",
    "assembly",
    "great",
    "port",
    "existing",
    "code",
    "bases",
    "web",
    "like",
    "application",
    "compile",
    "web",
    "assembly",
    "run",
    "browser",
    "things",
    "web",
    "assembly",
    "would",
    "good",
    "games",
    "video",
    "editing",
    "cad",
    "software",
    "things",
    "like",
    "web",
    "assembly",
    "replace",
    "javascript",
    "meant",
    "actually",
    "meant",
    "work",
    "javascript",
    "use",
    "javascript",
    "interact",
    "web",
    "assembly",
    "really",
    "point",
    "web",
    "assembly",
    "everywhere",
    "seems",
    "rise",
    "every",
    "year",
    "seems",
    "gain",
    "popularity",
    "next",
    "mobile",
    "development",
    "options",
    "know",
    "web",
    "development",
    "guide",
    "however",
    "lot",
    "crossover",
    "use",
    "web",
    "development",
    "skills",
    "build",
    "mobile",
    "applications",
    "course",
    "get",
    "native",
    "development",
    "mobile",
    "development",
    "cotlin",
    "java",
    "android",
    "apps",
    "well",
    "swift",
    "objective",
    "c",
    "ios",
    "apps",
    "also",
    "use",
    "frameworks",
    "allow",
    "build",
    "crossplatform",
    "applications",
    "web",
    "web",
    "like",
    "technologies",
    "going",
    "go",
    "options",
    "already",
    "talk",
    "stuff",
    "framework",
    "ecosystem",
    "section",
    "going",
    "quickly",
    "go",
    "first",
    "choice",
    "react",
    "native",
    "obviously",
    "talked",
    "little",
    "bit",
    "framework",
    "allows",
    "build",
    "native",
    "mobile",
    "applications",
    "javascript",
    "react",
    "framework",
    "great",
    "react",
    "native",
    "really",
    "single",
    "code",
    "base",
    "ios",
    "android",
    "opposed",
    "would",
    "native",
    "development",
    "two",
    "separate",
    "code",
    "bases",
    "two",
    "separate",
    "languages",
    "react",
    "developer",
    "probably",
    "going",
    "gravitate",
    "toward",
    "react",
    "native",
    "powerful",
    "used",
    "lot",
    "big",
    "companies",
    "um",
    "next",
    "flutter",
    "another",
    "popular",
    "option",
    "framework",
    "allows",
    "build",
    "native",
    "mobile",
    "apps",
    "doart",
    "doart",
    "talked",
    "yet",
    "programming",
    "language",
    "similar",
    "javascript",
    "um",
    "already",
    "know",
    "javascript",
    "dart",
    "pretty",
    "easy",
    "pick",
    "flutter",
    "uses",
    "rendering",
    "engine",
    "written",
    "called",
    "skia",
    "know",
    "working",
    "new",
    "rendering",
    "engine",
    "called",
    "uh",
    "impeller",
    "positive",
    "released",
    "yet",
    "flutter",
    "slight",
    "performance",
    "advantage",
    "react",
    "native",
    "use",
    "bridge",
    "communicate",
    "native",
    "components",
    "like",
    "react",
    "native",
    "two",
    "popular",
    "options",
    "uh",
    "kind",
    "also",
    "native",
    "script",
    "allows",
    "access",
    "native",
    "apis",
    "using",
    "javascript",
    "technically",
    "use",
    "framework",
    "want",
    "build",
    "uh",
    "native",
    "mobile",
    "apps",
    "whether",
    "react",
    "view",
    "spelt",
    "angular",
    "um",
    "even",
    "vanilla",
    "javascript",
    "like",
    "said",
    "gives",
    "set",
    "native",
    "apis",
    "work",
    "popular",
    "react",
    "native",
    "flutter",
    "could",
    "viable",
    "option",
    "especially",
    "want",
    "stick",
    "vue",
    "spelt",
    "angular",
    "also",
    "ion",
    "ic",
    "around",
    "mobile",
    "sdk",
    "software",
    "development",
    "kit",
    "allows",
    "build",
    "hybrid",
    "mobile",
    "applications",
    "web",
    "technologies",
    "like",
    "html",
    "css",
    "javascript",
    "also",
    "use",
    "framework",
    "choice",
    "ionic",
    "going",
    "fast",
    "react",
    "native",
    "flutter",
    "viable",
    "option",
    "believe",
    "years",
    "ago",
    "could",
    "use",
    "angular",
    "use",
    "anything",
    "great",
    "progressive",
    "web",
    "apps",
    "going",
    "talk",
    "next",
    "progressive",
    "web",
    "apps",
    "web",
    "applications",
    "designed",
    "run",
    "like",
    "native",
    "mobile",
    "applications",
    "fast",
    "work",
    "offline",
    "send",
    "push",
    "notifications",
    "even",
    "installed",
    "home",
    "screen",
    "mobile",
    "device",
    "native",
    "app",
    "web",
    "app",
    "pass",
    "certain",
    "criteria",
    "considered",
    "pwa",
    "progressive",
    "web",
    "app",
    "first",
    "completely",
    "responsive",
    "matter",
    "screen",
    "size",
    "matter",
    "type",
    "device",
    "viewed",
    "whether",
    "cell",
    "phone",
    "big",
    "screen",
    "tv",
    "also",
    "secure",
    "served",
    "https",
    "go",
    "without",
    "saying",
    "days",
    "able",
    "uh",
    "least",
    "basic",
    "functionality",
    "offline",
    "even",
    "means",
    "custom",
    "offline",
    "page",
    "performant",
    "discoverable",
    "search",
    "engines",
    "include",
    "manifest",
    "file",
    "service",
    "worker",
    "manifest",
    "file",
    "json",
    "file",
    "contains",
    "information",
    "app",
    "like",
    "name",
    "description",
    "icon",
    "service",
    "worker",
    "javascript",
    "file",
    "runs",
    "background",
    "allows",
    "cash",
    "assets",
    "data",
    "offline",
    "use",
    "okay",
    "also",
    "add",
    "push",
    "notifications",
    "make",
    "installable",
    "great",
    "way",
    "make",
    "application",
    "like",
    "native",
    "mobile",
    "app",
    "regular",
    "web",
    "app",
    "use",
    "framework",
    "like",
    "ionic",
    "use",
    "something",
    "like",
    "nextjs",
    "support",
    "support",
    "pwas",
    "many",
    "different",
    "uh",
    "technologies",
    "different",
    "ways",
    "also",
    "use",
    "lot",
    "technologies",
    "use",
    "web",
    "development",
    "create",
    "desktop",
    "applications",
    "windows",
    "mac",
    "linux",
    "suggestion",
    "would",
    "electron",
    "allows",
    "use",
    "javascript",
    "build",
    "really",
    "fast",
    "powerful",
    "desktop",
    "applications",
    "use",
    "framework",
    "react",
    "view",
    "angular",
    "whatever",
    "want",
    "use",
    "works",
    "bundling",
    "chromium",
    "uh",
    "browser",
    "engine",
    "chrome",
    "uses",
    "edge",
    "uses",
    "bunch",
    "browsers",
    "bundles",
    "single",
    "runtime",
    "apps",
    "packaged",
    "mac",
    "windows",
    "linux",
    "uh",
    "single",
    "code",
    "base",
    "three",
    "platforms",
    "ton",
    "really",
    "popular",
    "desktop",
    "applications",
    "use",
    "electron",
    "least",
    "way",
    "including",
    "vs",
    "code",
    "probably",
    "desktop",
    "app",
    "use",
    "atom",
    "slack",
    "discord",
    "postman",
    "htp",
    "client",
    "things",
    "use",
    "time",
    "another",
    "option",
    "seeing",
    "tori",
    "newer",
    "framework",
    "similar",
    "electron",
    "actually",
    "lightweight",
    "actually",
    "built",
    "rust",
    "performant",
    "secure",
    "uses",
    "os",
    "native",
    "web",
    "renderer",
    "size",
    "tori",
    "app",
    "less",
    "600",
    "kilobytes",
    "use",
    "frameworks",
    "course",
    "also",
    "binding",
    "python",
    "go",
    "languages",
    "definitely",
    "something",
    "plan",
    "getting",
    "year",
    "next",
    "neutralino",
    "js",
    "another",
    "option",
    "lightweight",
    "portable",
    "framework",
    "allows",
    "build",
    "crossplatform",
    "desktop",
    "apps",
    "uh",
    "web",
    "technologies",
    "implements",
    "secure",
    "websocket",
    "connection",
    "native",
    "operations",
    "embeds",
    "static",
    "web",
    "ser",
    "server",
    "serve",
    "web",
    "content",
    "within",
    "desktop",
    "application",
    "also",
    "offers",
    "javascript",
    "client",
    "library",
    "developers",
    "nwjs",
    "another",
    "option",
    "similar",
    "electron",
    "popular",
    "works",
    "similar",
    "way",
    "bundling",
    "chromium",
    "node",
    "crash",
    "course",
    "nw",
    "well",
    "electron",
    "interested",
    "um",
    "would",
    "say",
    "go",
    "electron",
    "going",
    "get",
    "kind",
    "thing",
    "options",
    "languages",
    "instance",
    "python",
    "developer",
    "look",
    "tkinter",
    "build",
    "desktop",
    "applications",
    "video",
    "um",
    "standard",
    "python",
    "interface",
    "um",
    "tk",
    "goey",
    "toolkit",
    "shipped",
    "python",
    "popular",
    "electron",
    "option",
    "python",
    "developer",
    "ki",
    "excuse",
    "ki",
    "another",
    "option",
    "python",
    "course",
    "native",
    "uh",
    "know",
    "languages",
    "use",
    "native",
    "tools",
    "whether",
    "java",
    "um",
    "wpf",
    "c",
    "coco",
    "swift",
    "whatever",
    "might",
    "starts",
    "get",
    "range",
    "web",
    "development",
    "technologies",
    "right",
    "often",
    "talk",
    "aesthetics",
    "guide",
    "based",
    "software",
    "think",
    "important",
    "keep",
    "date",
    "design",
    "trends",
    "want",
    "mention",
    "couple",
    "trends",
    "2024",
    "dark",
    "mode",
    "obviously",
    "extremely",
    "popular",
    "years",
    "think",
    "easier",
    "eyes",
    "also",
    "energ",
    "efficient",
    "uh",
    "looks",
    "better",
    "opinion",
    "least",
    "personally",
    "use",
    "doc",
    "mode",
    "everything",
    "get",
    "actually",
    "get",
    "floaters",
    "eyes",
    "stare",
    "light",
    "screens",
    "long",
    "um",
    "actually",
    "health",
    "thing",
    "know",
    "lot",
    "people",
    "like",
    "seems",
    "everywhere",
    "whether",
    "straight",
    "dark",
    "mode",
    "kind",
    "toggler",
    "ui",
    "toggle",
    "dark",
    "light",
    "ai",
    "generated",
    "designs",
    "think",
    "going",
    "see",
    "year",
    "um",
    "kinds",
    "tools",
    "use",
    "mid",
    "journey",
    "sensei",
    "dream",
    "studio",
    "use",
    "tools",
    "create",
    "unique",
    "designs",
    "projects",
    "lot",
    "look",
    "kind",
    "fake",
    "like",
    "super",
    "futuristic",
    "sometimes",
    "look",
    "bit",
    "weird",
    "think",
    "cool",
    "concept",
    "think",
    "going",
    "used",
    "improves",
    "glass",
    "morphism",
    "newer",
    "design",
    "trend",
    "become",
    "pretty",
    "popular",
    "frosted",
    "glass",
    "effect",
    "used",
    "many",
    "things",
    "like",
    "buttons",
    "cards",
    "modals",
    "bit",
    "subtle",
    "previous",
    "trend",
    "uh",
    "neuro",
    "new",
    "neumorphism",
    "know",
    "pronounce",
    "uh",
    "think",
    "looks",
    "really",
    "cool",
    "think",
    "around",
    "clay",
    "morphism",
    "web",
    "design",
    "trend",
    "characterized",
    "use",
    "soft",
    "rounded",
    "shapes",
    "pastel",
    "colors",
    "trend",
    "inspired",
    "look",
    "feel",
    "clation",
    "popular",
    "choice",
    "especially",
    "younger",
    "audiences",
    "ret",
    "rro",
    "futurism",
    "design",
    "trend",
    "inspired",
    "future",
    "say",
    "inspired",
    "future",
    "imagined",
    "past",
    "like",
    "used",
    "think",
    "future",
    "would",
    "look",
    "like",
    "characterized",
    "bright",
    "colors",
    "geometric",
    "shapes",
    "futuristic",
    "typography",
    "uh",
    "great",
    "option",
    "things",
    "like",
    "landing",
    "pages",
    "portfolios",
    "right",
    "wanted",
    "throw",
    "uh",
    "little",
    "bit",
    "guys",
    "right",
    "next",
    "iot",
    "internet",
    "things",
    "metaverse",
    "internet",
    "things",
    "refers",
    "connection",
    "everyday",
    "objects",
    "internet",
    "one",
    "another",
    "broad",
    "term",
    "used",
    "many",
    "industries",
    "iot",
    "expected",
    "pretty",
    "major",
    "impact",
    "web",
    "development",
    "moving",
    "forward",
    "expect",
    "see",
    "iot",
    "enabled",
    "websites",
    "uh",
    "web",
    "applications",
    "know",
    "businesses",
    "take",
    "advantage",
    "iot",
    "improve",
    "operations",
    "something",
    "may",
    "want",
    "look",
    "metaverse",
    "virtual",
    "world",
    "people",
    "interact",
    "virtual",
    "environment",
    "concept",
    "around",
    "really",
    "starting",
    "gain",
    "traction",
    "something",
    "think",
    "big",
    "part",
    "future",
    "web",
    "trends",
    "video",
    "ai",
    "would",
    "definitely",
    "take",
    "top",
    "spot",
    "something",
    "used",
    "many",
    "industries",
    "going",
    "become",
    "popular",
    "much",
    "lot",
    "people",
    "actually",
    "terrified",
    "uh",
    "talked",
    "tools",
    "like",
    "chat",
    "gpt",
    "well",
    "design",
    "generation",
    "many",
    "tools",
    "many",
    "categories",
    "chatbots",
    "another",
    "thing",
    "really",
    "becoming",
    "popular",
    "ai",
    "chatbot",
    "computer",
    "program",
    "simulates",
    "human",
    "conversation",
    "either",
    "voice",
    "commands",
    "text",
    "chats",
    "used",
    "things",
    "like",
    "customer",
    "service",
    "marketing",
    "sales",
    "expect",
    "integrating",
    "chatbots",
    "lot",
    "applications",
    "open",
    "ai",
    "amazing",
    "apis",
    "use",
    "create",
    "tools",
    "including",
    "tools",
    "create",
    "chat",
    "bots",
    "uh",
    "text",
    "speech",
    "things",
    "like",
    "lot",
    "ai",
    "powered",
    "code",
    "tools",
    "know",
    "scares",
    "lot",
    "developers",
    "advice",
    "use",
    "tools",
    "advantage",
    "make",
    "stronger",
    "candidate",
    "job",
    "stronger",
    "freelancer",
    "clients",
    "tools",
    "available",
    "mean",
    "every",
    "joeo",
    "going",
    "able",
    "use",
    "even",
    "want",
    "take",
    "time",
    "use",
    "know",
    "kind",
    "speculation",
    "overall",
    "advice",
    "comes",
    "ai",
    "use",
    "available",
    "better",
    "developer",
    "rather",
    "saying",
    "poor",
    "going",
    "take",
    "job",
    "try",
    "use",
    "make",
    "better",
    "um",
    "advice",
    "know",
    "people",
    "kind",
    "get",
    "mad",
    "people",
    "might",
    "say",
    "naive",
    "rather",
    "rather",
    "mind",
    "state",
    "doom",
    "gloom",
    "state",
    "definitely",
    "going",
    "find",
    "success",
    "right",
    "devops",
    "developer",
    "operations",
    "set",
    "practices",
    "combine",
    "software",
    "development",
    "operations",
    "pretty",
    "broad",
    "term",
    "mean",
    "different",
    "things",
    "different",
    "people",
    "talk",
    "application",
    "deployment",
    "maintenance",
    "usually",
    "part",
    "devops",
    "containerization",
    "docker",
    "kubernetes",
    "environment",
    "devop",
    "stuff",
    "uh",
    "cicd",
    "stands",
    "continuous",
    "integration",
    "continuous",
    "deployment",
    "using",
    "tools",
    "push",
    "code",
    "repository",
    "automatically",
    "deploy",
    "server",
    "tools",
    "like",
    "travis",
    "ci",
    "circle",
    "ci",
    "um",
    "terraform",
    "call",
    "infrastructure",
    "code",
    "ioc",
    "specify",
    "state",
    "infrastructure",
    "automate",
    "um",
    "automate",
    "process",
    "managing",
    "resources",
    "goes",
    "way",
    "beyond",
    "scope",
    "knowledge",
    "research",
    "lot",
    "tasks",
    "include",
    "positions",
    "devops",
    "engineer",
    "specific",
    "role",
    "software",
    "developer",
    "may",
    "need",
    "kind",
    "peek",
    "world",
    "little",
    "bit",
    "really",
    "depends",
    "work",
    "something",
    "take",
    "note",
    "web",
    "getting",
    "much",
    "interactive",
    "animation",
    "big",
    "part",
    "lot",
    "libraries",
    "use",
    "create",
    "animations",
    "going",
    "quickly",
    "go",
    "big",
    "ones",
    "gap",
    "javascript",
    "animation",
    "library",
    "used",
    "lot",
    "big",
    "companies",
    "widely",
    "used",
    "creating",
    "really",
    "complex",
    "animations",
    "anime",
    "lightweight",
    "javascript",
    "animation",
    "library",
    "offers",
    "simple",
    "flexible",
    "animations",
    "focus",
    "uh",
    "readability",
    "supports",
    "css",
    "properties",
    "transforms",
    "crash",
    "course",
    "anime",
    "velocity",
    "js",
    "known",
    "speed",
    "performance",
    "used",
    "animating",
    "css",
    "svg",
    "dom",
    "elements",
    "simple",
    "syntax",
    "good",
    "documentation",
    "react",
    "spring",
    "animation",
    "library",
    "react",
    "provides",
    "sample",
    "api",
    "creating",
    "interactive",
    "animations",
    "react",
    "libraries",
    "animation",
    "libraries",
    "use",
    "react",
    "specific",
    "frameworks",
    "well",
    "uh",
    "3js",
    "really",
    "really",
    "cool",
    "javascript",
    "library",
    "creating",
    "3d",
    "graphics",
    "animations",
    "uh",
    "provides",
    "highlevel",
    "api",
    "webg",
    "javascript",
    "api",
    "rendering",
    "interactive",
    "2d",
    "3d",
    "graphics",
    "compatible",
    "browser",
    "seen",
    "really",
    "cool",
    "stuff",
    "built",
    "3js",
    "fact",
    "go",
    "website",
    "um",
    "see",
    "bunch",
    "really",
    "cool",
    "examples",
    "look",
    "interact",
    "typed",
    "js",
    "figured",
    "throw",
    "cool",
    "little",
    "library",
    "creating",
    "text",
    "space",
    "animations",
    "things",
    "like",
    "typewriter",
    "effects",
    "text",
    "transitions",
    "good",
    "choice",
    "adding",
    "dynamic",
    "text",
    "content",
    "vr",
    "ar",
    "virtual",
    "reality",
    "augmented",
    "reality",
    "getting",
    "bigger",
    "every",
    "year",
    "think",
    "matter",
    "time",
    "common",
    "world",
    "web",
    "development",
    "going",
    "websites",
    "virtual",
    "going",
    "um",
    "websites",
    "augmented",
    "reality",
    "basically",
    "mix",
    "virtual",
    "real",
    "world",
    "want",
    "start",
    "get",
    "definitely",
    "something",
    "means",
    "want",
    "mess",
    "around",
    "technologies",
    "like",
    "web",
    "framework",
    "building",
    "virtual",
    "reality",
    "experiences",
    "built",
    "top",
    "html",
    "easy",
    "use",
    "also",
    "use",
    "react",
    "360",
    "virro",
    "react",
    "frameworks",
    "well",
    "allow",
    "build",
    "virtual",
    "reality",
    "experiences",
    "react",
    "arjs",
    "efficient",
    "lightweight",
    "javascript",
    "library",
    "creating",
    "augmented",
    "reality",
    "experiences",
    "web",
    "enables",
    "marker",
    "based",
    "ar",
    "directly",
    "browser",
    "even",
    "libraries",
    "like",
    "3js",
    "allow",
    "developers",
    "create",
    "3d",
    "graphics",
    "animations",
    "often",
    "used",
    "combination",
    "vr",
    "ar",
    "frameworks",
    "okay",
    "lastly",
    "web",
    "3",
    "bit",
    "tricky",
    "many",
    "different",
    "things",
    "fall",
    "web",
    "3",
    "umbrella",
    "term",
    "used",
    "describe",
    "future",
    "web",
    "also",
    "many",
    "different",
    "opinions",
    "people",
    "say",
    "future",
    "information",
    "communication",
    "finance",
    "say",
    "campaign",
    "marketing",
    "nfts",
    "honestly",
    "like",
    "speaking",
    "much",
    "web",
    "3",
    "early",
    "broad",
    "kind",
    "uh",
    "controversial",
    "topic",
    "blockchain",
    "huge",
    "part",
    "web",
    "3",
    "proven",
    "powerful",
    "technology",
    "decent",
    "decentralized",
    "secure",
    "digital",
    "ledger",
    "technology",
    "records",
    "transactions",
    "across",
    "network",
    "computers",
    "consists",
    "uh",
    "chain",
    "blocks",
    "containing",
    "list",
    "transactions",
    "block",
    "added",
    "chain",
    "becomes",
    "permanent",
    "tamperproof",
    "enhances",
    "trust",
    "transparency",
    "alone",
    "incredibly",
    "powerful",
    "think",
    "stick",
    "around",
    "uh",
    "think",
    "learning",
    "blockchain",
    "ethereum",
    "smart",
    "contracts",
    "really",
    "good",
    "idea",
    "interests",
    "solidity",
    "language",
    "used",
    "write",
    "called",
    "smart",
    "contracts",
    "uh",
    "solidity",
    "bit",
    "like",
    "javascript",
    "smart",
    "contracts",
    "self",
    "executing",
    "contracts",
    "terms",
    "agreement",
    "buyer",
    "seller",
    "directly",
    "written",
    "lines",
    "code",
    "going",
    "pretend",
    "like",
    "know",
    "ton",
    "first",
    "people",
    "learn",
    "stuff",
    "think",
    "could",
    "huge",
    "advantage",
    "future",
    "kind",
    "like",
    "investment",
    "time",
    "learning",
    "right",
    "guys",
    "wraps",
    "year",
    "guide",
    "know",
    "extremely",
    "long",
    "way",
    "longer",
    "wanted",
    "want",
    "go",
    "slides",
    "read",
    "bullet",
    "points",
    "want",
    "elaborate",
    "kind",
    "let",
    "know",
    "know",
    "part",
    "section",
    "guide",
    "hopefully",
    "learn",
    "something",
    "time",
    "stamps",
    "des",
    "uh",
    "description",
    "want",
    "go",
    "back",
    "look",
    "certain",
    "section",
    "uh",
    "page",
    "website",
    "guide",
    "content",
    "including",
    "youtube",
    "videos",
    "courses",
    "kind",
    "coincide",
    "topics",
    "presentation",
    "thanks",
    "much",
    "guys",
    "watch",
    "till",
    "end",
    "really",
    "really",
    "appreciate",
    "awesome",
    "uh",
    "could",
    "like",
    "video",
    "appreciate",
    "basically",
    "biggest",
    "video",
    "year",
    "every",
    "year",
    "um",
    "thanks",
    "watching",
    "see",
    "next",
    "time"
  ],
  "keywords": [
    "web",
    "development",
    "guide",
    "believe",
    "year",
    "done",
    "think",
    "first",
    "one",
    "back",
    "fast",
    "time",
    "goes",
    "sure",
    "many",
    "know",
    "every",
    "go",
    "technology",
    "tools",
    "languages",
    "frameworks",
    "well",
    "different",
    "take",
    "offer",
    "personal",
    "extremely",
    "learn",
    "need",
    "things",
    "try",
    "put",
    "kind",
    "path",
    "also",
    "page",
    "website",
    "content",
    "created",
    "including",
    "youtube",
    "lot",
    "stuff",
    "talk",
    "easy",
    "right",
    "couple",
    "keep",
    "video",
    "uh",
    "long",
    "may",
    "want",
    "whatever",
    "around",
    "everything",
    "fact",
    "say",
    "even",
    "years",
    "look",
    "like",
    "see",
    "available",
    "choose",
    "looks",
    "good",
    "next",
    "types",
    "new",
    "technologies",
    "developer",
    "really",
    "anything",
    "add",
    "still",
    "bit",
    "always",
    "pretty",
    "however",
    "share",
    "opinion",
    "make",
    "experience",
    "single",
    "based",
    "others",
    "specific",
    "common",
    "developers",
    "important",
    "help",
    "especially",
    "comes",
    "typically",
    "front",
    "end",
    "backend",
    "full",
    "stack",
    "designer",
    "design",
    "people",
    "build",
    "complex",
    "applications",
    "stick",
    "static",
    "websites",
    "small",
    "business",
    "use",
    "cms",
    "wordpress",
    "um",
    "usually",
    "html",
    "css",
    "freelancers",
    "projects",
    "programming",
    "basic",
    "javascript",
    "enough",
    "application",
    "without",
    "using",
    "software",
    "get",
    "side",
    "seo",
    "maybe",
    "interesting",
    "might",
    "route",
    "start",
    "works",
    "client",
    "work",
    "user",
    "interface",
    "create",
    "app",
    "getting",
    "nextjs",
    "rendered",
    "server",
    "part",
    "general",
    "react",
    "view",
    "angular",
    "later",
    "databases",
    "database",
    "ors",
    "us",
    "ones",
    "building",
    "apis",
    "data",
    "language",
    "going",
    "course",
    "something",
    "python",
    "php",
    "c",
    "seems",
    "either",
    "line",
    "popular",
    "least",
    "running",
    "seeing",
    "devops",
    "deployment",
    "write",
    "code",
    "infrastructure",
    "docker",
    "certain",
    "hosting",
    "manage",
    "linux",
    "separate",
    "rest",
    "goals",
    "talked",
    "let",
    "thing",
    "mention",
    "change",
    "freelancer",
    "likely",
    "entire",
    "company",
    "pay",
    "live",
    "job",
    "worry",
    "clients",
    "coding",
    "paid",
    "quite",
    "google",
    "biggest",
    "world",
    "companies",
    "better",
    "huge",
    "freelancing",
    "another",
    "option",
    "definitely",
    "ways",
    "probably",
    "starting",
    "much",
    "could",
    "essentially",
    "allow",
    "instance",
    "within",
    "little",
    "working",
    "large",
    "ton",
    "would",
    "sas",
    "service",
    "great",
    "find",
    "two",
    "said",
    "obviously",
    "system",
    "best",
    "10",
    "powerful",
    "prefer",
    "mac",
    "os",
    "terminal",
    "windows",
    "though",
    "text",
    "editor",
    "options",
    "free",
    "open",
    "source",
    "vs",
    "technically",
    "never",
    "suggest",
    "learning",
    "efficient",
    "writing",
    "features",
    "standard",
    "recommend",
    "far",
    "already",
    "chrome",
    "dev",
    "microsoft",
    "internet",
    "actually",
    "uses",
    "cool",
    "newer",
    "browser",
    "called",
    "used",
    "framework",
    "basics",
    "default",
    "command",
    "beginners",
    "tons",
    "thirdparty",
    "big",
    "structure",
    "style",
    "ca",
    "simple",
    "bunch",
    "tags",
    "means",
    "pages",
    "properties",
    "box",
    "model",
    "elements",
    "sometimes",
    "multiple",
    "styles",
    "classes",
    "methods",
    "responsive",
    "matter",
    "queries",
    "size",
    "familiar",
    "point",
    "optional",
    "easier",
    "creating",
    "layouts",
    "main",
    "looking",
    "bootstrap",
    "plus",
    "component",
    "quickly",
    "less",
    "similar",
    "customize",
    "built",
    "set",
    "functionality",
    "talking",
    "allows",
    "custom",
    "makes",
    "instead",
    "color",
    "almost",
    "components",
    "lightweight",
    "material",
    "popularity",
    "ui",
    "kit",
    "functions",
    "native",
    "clean",
    "basically",
    "helpful",
    "files",
    "file",
    "ecosystem",
    "directly",
    "include",
    "crash",
    "version",
    "type",
    "github",
    "push",
    "markdown",
    "project",
    "documentation",
    "install",
    "gives",
    "soon",
    "ai",
    "jobs",
    "tasks",
    "way",
    "chat",
    "give",
    "users",
    "tool",
    "yet",
    "interact",
    "understand",
    "along",
    "area",
    "plan",
    "able",
    "readable",
    "scale",
    "okay",
    "dynamic",
    "depends",
    "modern",
    "object",
    "high",
    "api",
    "requests",
    "http",
    "post",
    "json",
    "management",
    "easily",
    "update",
    "admin",
    "support",
    "run",
    "deploy",
    "engine",
    "section",
    "services",
    "three",
    "ssr",
    "serverless",
    "environment",
    "state",
    "webpack",
    "vit",
    "site",
    "generators",
    "gatsby",
    "js",
    "testing",
    "performance",
    "whether",
    "generator",
    "headless",
    "approach",
    "runtime",
    "express",
    "node",
    "jango",
    "relational",
    "nosql",
    "ecosystems",
    "traditional",
    "interactive",
    "meta",
    "spelt",
    "mobile",
    "libraries",
    "choice",
    "syntax",
    "library",
    "packages",
    "performant",
    "focus",
    "template",
    "vue",
    "level",
    "smaller",
    "opinionated",
    "includes",
    "router",
    "animations",
    "typescript",
    "cli",
    "takes",
    "virtual",
    "process",
    "written",
    "official",
    "top",
    "documented",
    "platform",
    "check",
    "rendering",
    "graphql",
    "query",
    "android",
    "apps",
    "base",
    "java",
    "animation",
    "reality",
    "script",
    "access",
    "systems",
    "blog",
    "mongodb",
    "minimal",
    "laravel",
    "provides",
    "store",
    "cookies",
    "session",
    "future",
    "package",
    "purpose",
    "machine",
    "flask",
    "goang",
    "secure",
    "desktop",
    "ruby",
    "rails",
    "rust",
    "highlevel",
    "assembly",
    "sql",
    "unopinionated",
    "authentication",
    "omm",
    "symphony",
    "tables",
    "supports",
    "postgres",
    "cloud",
    "light",
    "electron"
  ]
}