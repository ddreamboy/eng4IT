{
  "text": "This video is aimed at giving you a short, \nbut comprehensive overview of the core  \nDevOps tools, that you need to build DevOps \nprocesses. So let's get to it right away!  \nAt the very core of DevOps we have a release \npipeline, commonly known as a CI/CD pipeline.  \nSo CI/CD tool is the most essential part of DevOps \nEngineer's toolkit. The most popular and still  \nmost widely used one being Jenkins. There are \nalternatives like GitLab CI is becoming really  \ngood or GitHub Actions, Circle CI and many more. \nSo these tools are about how to create automated  \nrelease pipelines, which run tests, build the \napplication, do different types of application  \nscanning and deploy to the end environment. \nAnd that involves its integrations with Git,  \nDocker registry, cloud platforms, pipeline as code \nwith Jenkinsfile and so on. Okay, we're testing  \nand releasing application and deploying it, but \nwhere are we deploying the application. We need  \na deployment environment and that's where cloud \nplatforms, like AWS come in. So AWS services,  \nthe virtual instances, security groups around \nservers, access to application running on the  \nserver, configuring the server and so on. Okay \ncool, we are releasing and deploying applications  \nto AWS virtual machines let's say, but what are we \nreleasing exactly? And in which form? You need to  \nunderstand how the application is packaged and how \nit runs on the end environment. The new standard  \nway of packaging and running applications is \nDocker. Docker packages software into standardized  \nunits called \"containers\" that have everything the \nsoftware needs to run including libraries, system  \ntools, code and runtime. And this improves the \ndevelopment in deployment process. You can quickly  \ndeploy and scale applications into any environment \nand know your code will run. Again there are  \nsimilar tools, but Docker wins here as well. So we \nwould create Docker images in the CI/CD pipeline  \nand run the application as Docker container \non AWS server for example. Now Docker made it  \neasy to create and run applications, so engineers \nwent wild and scaled up applications, because it  \nis easy to do with Docker. But that made the lives \nof application operations team harder again. With  \nDevOps we are saying no separate Dev and Ops, \nwe want to unify them, so how to make running  \ndockerized microservices applications easier? \nDocker is lightweight and cool, but ephemeral  \nand stateless. So how do we restart applications \nwhen they fail, how do we scale and replicate  \napplications or microservices if they are getting \na lot of requests? How do we run distributed  \napplications like database clusters and so on. \nMaking sure that application is always available,  \neven if some parts of it fail. Also a network of \nhundreds of containers, when they run on multiple  \nservers, how do we manage that? So Kubernetes, \nwhich is a container orchestration platform,  \ncomes to rescue with all these solutions and even \nmore complexity. So Kubernetes has an auto-healing  \nfeature and the network layer that makes thousands \nof containers seem like part of one server. It  \nhas auto-scheduling and much more. Scaling \napplications up and down as we need is super  \neasily done. Just specifying replica counts in \nKubernetes deployments. And you can also scale up  \nand down the servers by adding additional worker \nnodes or control plane nodes easily. Now I know I  \nspent like half of those 10 minutes on Kubernetes \nalone, but I'm sure you will understand if you  \nknow my channel and my passion for Kubernetes. \nCool, we have thousands of containers or even  \ntens of thousands of containers, which is great \nand Kubernetes manages a lot of the operations  \nautomatically. And that's great, but what if \nthings go wrong in the cluster, let's say we  \nhave applications equipped with great logging and \nwe have all the information, but we can't possibly  \nmanually look into logs and metrics of thousands \nof applications and see what's going on. Maybe  \nsomeone is trying to hack into our application and \nour application is logging and screaming about it,  \nbut we don't know. What about third-party \napplications, maybe databases is under heavy  \nload or the servers are under attack. Somebody's \ntrying to SSH into it or do a port scanning to see  \nwhat ports are open and so on. With so much \nworkload, we need automatic monitoring and  \nalerting in place that uses the data that we have \nin the logs and alerts us if something is out of  \nnatural behavior. Again security attacks or maybe \na harmless misconfiguration in Kubernetes manifest  \nfile that has created a mess in the cluster. So \nmonitoring and alerting is essential on all levels  \nlike infrastructure runtime and application \nitself and for Kubernetes specifically,  \na popular monitoring tool is Prometheus, which \ncomes with a whole stack for monitoring, alerting  \nand visualizing the metrics data. Talking about \nissues in the cluster they may make the cluster  \nto crash and get into a state that we can't \nrecover. Imagine we configure the cluster on AWS,  \nwe have thousands of servers with tens of \nthousands of containers running on them and we  \nhave configured monitoring and 100 other services \nin the cluster and now it's all gone, because of  \nmisconfiguration issues or hacking attacks or \nwhatever. How can we possibly recover all that?  \nHow can we recreate this state again? And that's \nwhere Infrastructure as Code helps, because it's  \nreally difficult and sometimes impossible to \ndo that manually or it would take just weeks  \nor month. So with Infrastructure as Code we \nactually script this entire setup: spinning up  \nAWS resources, Kubernetes cluster, installing \nall the services. And if something happens,  \nwe just run the script again and it recreates \neverything. Terraform is the most popular tool  \nthat allows infrastructure as code. Now sometimes \nif we're working directly on the operating system  \nlike installing packages, maybe doing security \npatches etc like on Kubernetes worker nodes,  \nthat's where configuration management tools like \nAnsible may be helpful. Again with the scale of  \nKubernetes, we may have hundreds or thousands of \nworker nodes and let's say if you need to do a  \nsecurity patch on those or do an upgrade to the \nlatest container runtime, you don't want to be  \nlogin into each server manually and executing the \nscripts. With Ansible, just write a script once  \nprovided with a list of servers as targets and it \nwill automatically push out and execute scripts on  \nthose targets and give you a nice output summary \nof the state. Now infrastructure as code is code,  \nconfiguration as code is also code. again if \nyou're writing Jenkinsfile, that's also code. Or  \nthe Dockerfile or Kubernetes manifest files. So we \nneed to write all of these in a code editor such  \nas Visual Studio Code, provide a bunch of plugins \nand features for specific languages or tools that  \nactually help you write those scripts. They have \nauto-completion or error checking integrated and  \nso on and it's a simple tool, but it is definitely \na needed one in DevOps. Now obviously you aren't  \nworking alone. Well, hopefully not! But rather in \na team with other engineers, so as DevOps engineer  \nyou aren't coding the application features \nthemselves, but you are writing pipeline code,  \nDockerfiles, Helm charts etc. So basically \ncode, which is part of the application or  \nyou are writing infrastructures code scripts, \nwhich are in a separate project. Well, you need  \nto make that code available and transparent for \nteams for other engineers, ideally with history of  \nchanges and ideally with its own release pipeline \nto apply infrastructure changes the same way as  \napplication changes are applied. Well that's \nwhere you need the knowledge of Git to do all that  \nwith your infrastructures code as well as just \ncollaborate with other engineers on code changes.  \nNow this is an obvious one, but obviously you \ncan't do much if you don't know Linux and Linux  \ncommand line. Docker is a lightweight virtual \ncomputer, mostly based on Linux, Worker nodes  \nin Kubernetes are servers mostly with Linux \noperating system. So even with Infrastructure  \nas Code and all the automations, you will still be \nworking a lot with Linux and working with command  \nline interface. So that's kind of a must here. \nNow as you see, when building DevOps processes  \nthese tools need to be combined and used together. \nSo even if you know them individually you need to  \nlearn how to integrate these tools, like deploy \nfrom Jenkins to Kubernetes environment, which is  \nrunning on AWS and has AWS service integrations, \nand all that written in Terraform. And again for  \nthat Terraform code that lives in Git repository, \nyou may build a CI/CD pipeline. And all of this  \nis containerized, even Jenkins instances may be \nrunning as containers. And learning these tools  \nin isolation is already challenging, but learning \nto combine them in a secure properly configured  \nway with industry best practices is way more \nchallenging and that's exactly why we created the  \nDevOps Bootcamp and are now working on DevSecOps \ncourse to teach exactly that, building complete  \nDevOps and DevSecOps processes with all these \ntools and even more. And more importantly teaching  \nthe underlying concepts for each step so that \nyou can easily replace and swap out the tools,  \nwhen you need to, because when you understand \nwhat you are doing and why on a conceptual level,  \ntools just become means to an end and easily \nreplaceable. And for us that was extremely  \nimportant part of creating those courses. If \nyou want to learn all that or get more details,  \nyou can check out the video description for more \ninformation on our courses and programs. Now I  \nhope I was able to give you some valuable, quick \ninformation in this video. Feel free to share  \nthe video with others, who want to get a short \noverview of DevOps tools and also let us know  \nin the comments what interesting exciting DevOps \ntools do you work with or work for besides the  \nones I mentioned here. And with that thank you \nfor watching and see you in the next video! :)\n",
  "words": [
    "video",
    "aimed",
    "giving",
    "short",
    "comprehensive",
    "overview",
    "core",
    "devops",
    "tools",
    "need",
    "build",
    "devops",
    "processes",
    "let",
    "get",
    "right",
    "away",
    "core",
    "devops",
    "release",
    "pipeline",
    "commonly",
    "known",
    "pipeline",
    "tool",
    "essential",
    "part",
    "devops",
    "engineer",
    "toolkit",
    "popular",
    "still",
    "widely",
    "used",
    "one",
    "jenkins",
    "alternatives",
    "like",
    "gitlab",
    "ci",
    "becoming",
    "really",
    "good",
    "github",
    "actions",
    "circle",
    "ci",
    "many",
    "tools",
    "create",
    "automated",
    "release",
    "pipelines",
    "run",
    "tests",
    "build",
    "application",
    "different",
    "types",
    "application",
    "scanning",
    "deploy",
    "end",
    "environment",
    "involves",
    "integrations",
    "git",
    "docker",
    "registry",
    "cloud",
    "platforms",
    "pipeline",
    "code",
    "jenkinsfile",
    "okay",
    "testing",
    "releasing",
    "application",
    "deploying",
    "deploying",
    "application",
    "need",
    "deployment",
    "environment",
    "cloud",
    "platforms",
    "like",
    "aws",
    "come",
    "aws",
    "services",
    "virtual",
    "instances",
    "security",
    "groups",
    "around",
    "servers",
    "access",
    "application",
    "running",
    "server",
    "configuring",
    "server",
    "okay",
    "cool",
    "releasing",
    "deploying",
    "applications",
    "aws",
    "virtual",
    "machines",
    "let",
    "say",
    "releasing",
    "exactly",
    "form",
    "need",
    "understand",
    "application",
    "packaged",
    "runs",
    "end",
    "environment",
    "new",
    "standard",
    "way",
    "packaging",
    "running",
    "applications",
    "docker",
    "docker",
    "packages",
    "software",
    "standardized",
    "units",
    "called",
    "containers",
    "everything",
    "software",
    "needs",
    "run",
    "including",
    "libraries",
    "system",
    "tools",
    "code",
    "runtime",
    "improves",
    "development",
    "deployment",
    "process",
    "quickly",
    "deploy",
    "scale",
    "applications",
    "environment",
    "know",
    "code",
    "run",
    "similar",
    "tools",
    "docker",
    "wins",
    "well",
    "would",
    "create",
    "docker",
    "images",
    "pipeline",
    "run",
    "application",
    "docker",
    "container",
    "aws",
    "server",
    "example",
    "docker",
    "made",
    "easy",
    "create",
    "run",
    "applications",
    "engineers",
    "went",
    "wild",
    "scaled",
    "applications",
    "easy",
    "docker",
    "made",
    "lives",
    "application",
    "operations",
    "team",
    "harder",
    "devops",
    "saying",
    "separate",
    "dev",
    "ops",
    "want",
    "unify",
    "make",
    "running",
    "dockerized",
    "microservices",
    "applications",
    "easier",
    "docker",
    "lightweight",
    "cool",
    "ephemeral",
    "stateless",
    "restart",
    "applications",
    "fail",
    "scale",
    "replicate",
    "applications",
    "microservices",
    "getting",
    "lot",
    "requests",
    "run",
    "distributed",
    "applications",
    "like",
    "database",
    "clusters",
    "making",
    "sure",
    "application",
    "always",
    "available",
    "even",
    "parts",
    "fail",
    "also",
    "network",
    "hundreds",
    "containers",
    "run",
    "multiple",
    "servers",
    "manage",
    "kubernetes",
    "container",
    "orchestration",
    "platform",
    "comes",
    "rescue",
    "solutions",
    "even",
    "complexity",
    "kubernetes",
    "feature",
    "network",
    "layer",
    "makes",
    "thousands",
    "containers",
    "seem",
    "like",
    "part",
    "one",
    "server",
    "much",
    "scaling",
    "applications",
    "need",
    "super",
    "easily",
    "done",
    "specifying",
    "replica",
    "counts",
    "kubernetes",
    "deployments",
    "also",
    "scale",
    "servers",
    "adding",
    "additional",
    "worker",
    "nodes",
    "control",
    "plane",
    "nodes",
    "easily",
    "know",
    "spent",
    "like",
    "half",
    "10",
    "minutes",
    "kubernetes",
    "alone",
    "sure",
    "understand",
    "know",
    "channel",
    "passion",
    "kubernetes",
    "cool",
    "thousands",
    "containers",
    "even",
    "tens",
    "thousands",
    "containers",
    "great",
    "kubernetes",
    "manages",
    "lot",
    "operations",
    "automatically",
    "great",
    "things",
    "go",
    "wrong",
    "cluster",
    "let",
    "say",
    "applications",
    "equipped",
    "great",
    "logging",
    "information",
    "ca",
    "possibly",
    "manually",
    "look",
    "logs",
    "metrics",
    "thousands",
    "applications",
    "see",
    "going",
    "maybe",
    "someone",
    "trying",
    "hack",
    "application",
    "application",
    "logging",
    "screaming",
    "know",
    "applications",
    "maybe",
    "databases",
    "heavy",
    "load",
    "servers",
    "attack",
    "somebody",
    "trying",
    "ssh",
    "port",
    "scanning",
    "see",
    "ports",
    "open",
    "much",
    "workload",
    "need",
    "automatic",
    "monitoring",
    "alerting",
    "place",
    "uses",
    "data",
    "logs",
    "alerts",
    "us",
    "something",
    "natural",
    "behavior",
    "security",
    "attacks",
    "maybe",
    "harmless",
    "misconfiguration",
    "kubernetes",
    "manifest",
    "file",
    "created",
    "mess",
    "cluster",
    "monitoring",
    "alerting",
    "essential",
    "levels",
    "like",
    "infrastructure",
    "runtime",
    "application",
    "kubernetes",
    "specifically",
    "popular",
    "monitoring",
    "tool",
    "prometheus",
    "comes",
    "whole",
    "stack",
    "monitoring",
    "alerting",
    "visualizing",
    "metrics",
    "data",
    "talking",
    "issues",
    "cluster",
    "may",
    "make",
    "cluster",
    "crash",
    "get",
    "state",
    "ca",
    "recover",
    "imagine",
    "configure",
    "cluster",
    "aws",
    "thousands",
    "servers",
    "tens",
    "thousands",
    "containers",
    "running",
    "configured",
    "monitoring",
    "100",
    "services",
    "cluster",
    "gone",
    "misconfiguration",
    "issues",
    "hacking",
    "attacks",
    "whatever",
    "possibly",
    "recover",
    "recreate",
    "state",
    "infrastructure",
    "code",
    "helps",
    "really",
    "difficult",
    "sometimes",
    "impossible",
    "manually",
    "would",
    "take",
    "weeks",
    "month",
    "infrastructure",
    "code",
    "actually",
    "script",
    "entire",
    "setup",
    "spinning",
    "aws",
    "resources",
    "kubernetes",
    "cluster",
    "installing",
    "services",
    "something",
    "happens",
    "run",
    "script",
    "recreates",
    "everything",
    "terraform",
    "popular",
    "tool",
    "allows",
    "infrastructure",
    "code",
    "sometimes",
    "working",
    "directly",
    "operating",
    "system",
    "like",
    "installing",
    "packages",
    "maybe",
    "security",
    "patches",
    "etc",
    "like",
    "kubernetes",
    "worker",
    "nodes",
    "configuration",
    "management",
    "tools",
    "like",
    "ansible",
    "may",
    "helpful",
    "scale",
    "kubernetes",
    "may",
    "hundreds",
    "thousands",
    "worker",
    "nodes",
    "let",
    "say",
    "need",
    "security",
    "patch",
    "upgrade",
    "latest",
    "container",
    "runtime",
    "want",
    "login",
    "server",
    "manually",
    "executing",
    "scripts",
    "ansible",
    "write",
    "script",
    "provided",
    "list",
    "servers",
    "targets",
    "automatically",
    "push",
    "execute",
    "scripts",
    "targets",
    "give",
    "nice",
    "output",
    "summary",
    "state",
    "infrastructure",
    "code",
    "code",
    "configuration",
    "code",
    "also",
    "code",
    "writing",
    "jenkinsfile",
    "also",
    "code",
    "dockerfile",
    "kubernetes",
    "manifest",
    "files",
    "need",
    "write",
    "code",
    "editor",
    "visual",
    "studio",
    "code",
    "provide",
    "bunch",
    "plugins",
    "features",
    "specific",
    "languages",
    "tools",
    "actually",
    "help",
    "write",
    "scripts",
    "error",
    "checking",
    "integrated",
    "simple",
    "tool",
    "definitely",
    "needed",
    "one",
    "devops",
    "obviously",
    "working",
    "alone",
    "well",
    "hopefully",
    "rather",
    "team",
    "engineers",
    "devops",
    "engineer",
    "coding",
    "application",
    "features",
    "writing",
    "pipeline",
    "code",
    "dockerfiles",
    "helm",
    "charts",
    "etc",
    "basically",
    "code",
    "part",
    "application",
    "writing",
    "infrastructures",
    "code",
    "scripts",
    "separate",
    "project",
    "well",
    "need",
    "make",
    "code",
    "available",
    "transparent",
    "teams",
    "engineers",
    "ideally",
    "history",
    "changes",
    "ideally",
    "release",
    "pipeline",
    "apply",
    "infrastructure",
    "changes",
    "way",
    "application",
    "changes",
    "applied",
    "well",
    "need",
    "knowledge",
    "git",
    "infrastructures",
    "code",
    "well",
    "collaborate",
    "engineers",
    "code",
    "changes",
    "obvious",
    "one",
    "obviously",
    "ca",
    "much",
    "know",
    "linux",
    "linux",
    "command",
    "line",
    "docker",
    "lightweight",
    "virtual",
    "computer",
    "mostly",
    "based",
    "linux",
    "worker",
    "nodes",
    "kubernetes",
    "servers",
    "mostly",
    "linux",
    "operating",
    "system",
    "even",
    "infrastructure",
    "code",
    "automations",
    "still",
    "working",
    "lot",
    "linux",
    "working",
    "command",
    "line",
    "interface",
    "kind",
    "must",
    "see",
    "building",
    "devops",
    "processes",
    "tools",
    "need",
    "combined",
    "used",
    "together",
    "even",
    "know",
    "individually",
    "need",
    "learn",
    "integrate",
    "tools",
    "like",
    "deploy",
    "jenkins",
    "kubernetes",
    "environment",
    "running",
    "aws",
    "aws",
    "service",
    "integrations",
    "written",
    "terraform",
    "terraform",
    "code",
    "lives",
    "git",
    "repository",
    "may",
    "build",
    "pipeline",
    "containerized",
    "even",
    "jenkins",
    "instances",
    "may",
    "running",
    "containers",
    "learning",
    "tools",
    "isolation",
    "already",
    "challenging",
    "learning",
    "combine",
    "secure",
    "properly",
    "configured",
    "way",
    "industry",
    "best",
    "practices",
    "way",
    "challenging",
    "exactly",
    "created",
    "devops",
    "bootcamp",
    "working",
    "devsecops",
    "course",
    "teach",
    "exactly",
    "building",
    "complete",
    "devops",
    "devsecops",
    "processes",
    "tools",
    "even",
    "importantly",
    "teaching",
    "underlying",
    "concepts",
    "step",
    "easily",
    "replace",
    "swap",
    "tools",
    "need",
    "understand",
    "conceptual",
    "level",
    "tools",
    "become",
    "means",
    "end",
    "easily",
    "replaceable",
    "us",
    "extremely",
    "important",
    "part",
    "creating",
    "courses",
    "want",
    "learn",
    "get",
    "details",
    "check",
    "video",
    "description",
    "information",
    "courses",
    "programs",
    "hope",
    "able",
    "give",
    "valuable",
    "quick",
    "information",
    "video",
    "feel",
    "free",
    "share",
    "video",
    "others",
    "want",
    "get",
    "short",
    "overview",
    "devops",
    "tools",
    "also",
    "let",
    "us",
    "know",
    "comments",
    "interesting",
    "exciting",
    "devops",
    "tools",
    "work",
    "work",
    "besides",
    "ones",
    "mentioned",
    "thank",
    "watching",
    "see",
    "next",
    "video"
  ],
  "keywords": [
    "video",
    "short",
    "overview",
    "core",
    "devops",
    "tools",
    "need",
    "build",
    "processes",
    "let",
    "get",
    "release",
    "pipeline",
    "tool",
    "essential",
    "part",
    "engineer",
    "popular",
    "still",
    "used",
    "one",
    "jenkins",
    "like",
    "ci",
    "really",
    "create",
    "run",
    "application",
    "scanning",
    "deploy",
    "end",
    "environment",
    "integrations",
    "git",
    "docker",
    "cloud",
    "platforms",
    "code",
    "jenkinsfile",
    "okay",
    "releasing",
    "deploying",
    "deployment",
    "aws",
    "services",
    "virtual",
    "instances",
    "security",
    "servers",
    "running",
    "server",
    "cool",
    "applications",
    "say",
    "exactly",
    "understand",
    "way",
    "packages",
    "software",
    "containers",
    "everything",
    "system",
    "runtime",
    "scale",
    "know",
    "well",
    "would",
    "container",
    "made",
    "easy",
    "engineers",
    "lives",
    "operations",
    "team",
    "separate",
    "want",
    "make",
    "microservices",
    "lightweight",
    "fail",
    "lot",
    "sure",
    "available",
    "even",
    "also",
    "network",
    "hundreds",
    "kubernetes",
    "comes",
    "thousands",
    "much",
    "easily",
    "worker",
    "nodes",
    "alone",
    "tens",
    "great",
    "automatically",
    "cluster",
    "logging",
    "information",
    "ca",
    "possibly",
    "manually",
    "logs",
    "metrics",
    "see",
    "maybe",
    "trying",
    "monitoring",
    "alerting",
    "data",
    "us",
    "something",
    "attacks",
    "misconfiguration",
    "manifest",
    "created",
    "infrastructure",
    "issues",
    "may",
    "state",
    "recover",
    "configured",
    "sometimes",
    "actually",
    "script",
    "installing",
    "terraform",
    "working",
    "operating",
    "etc",
    "configuration",
    "ansible",
    "scripts",
    "write",
    "targets",
    "give",
    "writing",
    "features",
    "obviously",
    "infrastructures",
    "ideally",
    "changes",
    "linux",
    "command",
    "line",
    "mostly",
    "building",
    "learn",
    "learning",
    "challenging",
    "devsecops",
    "courses",
    "work"
  ]
}