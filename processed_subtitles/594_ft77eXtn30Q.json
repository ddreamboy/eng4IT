{
  "text": "if you want to learn how to extract the\nbest possible\ninformation from your data from your\ntabular data and create high performance\nmachine learning models\nthis video will teach you everything i\nknow about it my name is mario i'm a\nkaggle competition's gray master and\nmultiple time price winner and\nevery price i won in any machine\nlearning competition\ni can say that the number one reason was\nbecause of\ndeveloping the feature engineering skill\nevery time i created a high performance\nmodel for a consulting\njob or for any job that i had the most\nimportant part after\nof course understanding the business\nproblem and actually solving the right\nproblem was how to extract the maximum\ninformation from any data that i had\navailable\nto solve that problem this is definitely\none of the most important\nand more art than science part of\ncreating machine learning models\nso let's begin i tell you i have to tell\nyou this is not\na code tutorial because what you learn\nhere you can apply in sql inspired in\nour\nindependence in whatever language you\nalready work or\nwe work in the future what i want here\nis to teach you how to think\nteach you how to reason about this give\nyour strategy and tactics so that you\ncan\nactually extract these representations\nfrom your data in the problems that you\nhave\nthat include structured tabular data\nthe first part of this tutorial will be\na more abstract part a more framework\npart\nkind of giving you a template a\nblueprint for you to think about this in\nany cases that you\nhave to solve that you have tables and\nin the second part i will show you a\nreal example in with data from facebook\nabout competition bot detection\ncompetition that\nreally gave me a lot of insight in the\nabout feature engineering and how it\naffects machine learning so let's begin\nthe first\nquestion that you have to ask yourself\nis about the keys that you have\nand why i say the keys what are these\nskills it's creating data creating\nfeatures\nfor tabular data is all about\naggregation\nso every time this was a game changer\nfor my machine learning skill when i\nstarted thinking about all the tables\nthat i had as how can i aggregate this\ndata and extract\ninformation by aggregating and this will\nbe very clear to you\nafter this tutorial in more practical\nterms we can think about aggregation as\nthe usual group by function that we have\nin a lot of\nour languages to to deal with tabular\ndata\nthe basic concept is whatever tables you\nhave you will need to find the keys to\njoin these tables\nand you need to find the variables that\nyou can group\nby and actually extract some operations\non\nfunction over the values of some other\ncolumns that you have\nlet me give you an example to make this\nmore clear let's say that you work for a\ncredit card company\nand you are trying to predict fraud\nafter looking at the tables that you\nhave available you have tables of\ntransactions\nof your customers you have a table of\ncustomers of your credit cards and let's\nkeep only at these two so that we can\nunderstand this\nin a more simplified way so in this\ntransaction data set\nyou have both a transaction id a\ncustomer id\nfor each row i'm saying this the\ntransaction value the currency\nof the transaction the location the time\nof the transaction and you can have many\nmore\nmany more places like the merchant id\nthe machine id where the the transaction\nwas covered if it was online if it was\noffline you have a lot of data but you\nhave this log\nof transactions and for the customer you\nhave of course the customer id\nand you have the address how many credit\ncards this person has\nany information that is related to the\ncustomer\nso how can you create this model by\naggregating data so the first thing you\nhave to think is what are the keys that\ni will need to do a join to do a merge\nhere\nand you will predict this for each\ntransaction so\nour key will be transaction id and we\nwill have customer id too so for each\ntransaction of a given customer\nyou need to create features so that you\ncan predict if this transaction is fraud\nor if it is a regular transaction of\nthis customer\none feature for example that you can\ncalculate here is let's aggregate on\ncustomer id and let's take for example\nhow many transactions that customers a\ncustomer usually does\nin a period of a month so here we have\none feature so if a customer\nis usually doing 10 transactions a month\nand\nsuddenly he's doing 10 transactions in a\nday probably\nthere is something wrong then why i say\nabout keys because\nthen you have uh you have a row with the\ncustomer id and the number\nrelated to this information that we just\ncomputed and that you can join with\nthe row of the transaction that you are\ntrying to predict\nnext if it is fraud or not in a more\ntechnical term this would be a group by\ncustomer id and then you can use count\nor size if you are using pandas count\nover the rows in this case it can be\nover customer id but you\ndon't need to only aggregate over one\nvariable you can aggregate\nover many variables so for example let's\nsay that we want to\nunderstand if this customer usually\nmakes transactions internationally or if\nhis transactions are usually only\ndomestic\nin this case we would use the group by\nwe can aggregate for\nby customer id and currency and we can\ncount\nand i can count how many times a\ncustomer actually made a transaction in\na given currency and then we can\nfor example create a table to join where\nwe have for example\nthe number of transactions in dollars in\nbritish pounds etc\nso if a customer usually only transacts\nin\ndollars probably if you see a\ntransaction\nthat is in canadian dollars well maybe\nthis is not a big problem canada and us\nare close by maybe the customers is over\nthe border\nor something like this but if you see\nthe same customer\nactually transacting in chilean pesos or\nbrazilian realize\nprobably it is an indication that\nsomething is at least\ndifferent it may be it may still be the\ncustomer but maybe\nit's not so this is the general\nframework that i want you to think about\nthese features it's\nall about aggregation you can take the\nmedian you can take the average the\nmaximum the minimum the entropy\nof any columns aggregated by any other\ncolumns that you have\nin your data set usually you will\naggregate over categorical columns or\nordinal columns of course aggregating\nover numerical columns usually it\nis not very feasible but i think you get\nthe idea from here\nand just to be complete i have to tell\nyou that for example if you have\ncategorical\ndata you can actually do a one hot\nencoding\nyou can do count or frequency of your\ndata like the examples that i'm giving\nyou here\nso for example the account of currencies\nwe could for example take the amount of\nthe transactions and say\nokay usually this customer buys every\npurchase of this customer it is actually\naround 50 dollars so if this customer is\nsuddenly\nspending five thousand dollars in one\ntransaction it may be an anomaly\nof course this is what the machine\nlearning model will decide but\nyou have to put this type of feature so\nthat it can capture this kind of pattern\nif it is an indicator of fraud and you\nhave of course the target encoding which\nis\nvery popular on kego because it's highly\neffective\nwhen it actually works another thing i\nwant you to remember from this\nis that time time you can treat just as\nan ordinal variable\nand even a categorical variable i know\ncategorical variables\nhave no order and etc but for our\npurposes\nthink about time as a discrete ordinal\nsequential variable what does this mean\nthis means that\nit is just a list of numbers a list\nof data so if you have a day you can\nhave day one day two day three day four\nalways think about it\nas just another ordinal variable and you\ncan group by\nby by this ordinal variable so for\nexample you can get\nhow much money someone spends in a day\nyou group by time\nand take the sum of the amount of\ntransactions that these people has in\ntheir credit card\nin our example there are four types of\nvariables that i usually like to\nrecommend one is the leg if you think\nabout it it's just a group by\nand the shift of the of the data so lag\nis simply saying okay what was the end\ntime\nthe end value of this variable uh across\ntime so for example if we have a list of\n10 transactions\nwhat was the value of the last\ntransaction would be a lag\nof one if you get the 10th transaction\nit would be a lag of 10. so legs can be\napplied to sequences in general and time\nis just another way to order a sequence\nanother feature that i usually like is\nthe difference so difference is just\nlike lag but instead of just taking for\nexample the\nlast transaction you take the last two\ntransactions and subtract\none from the other so what's the\ndifference in transactions from this\ncurrent transaction to the last one so\nit's just a different simple difference\nit's very effective for machine learning\nanother one that i like is the rolling\nso a moving average is a classical\nexample and if you think\nabout this as the sequence that i'm\ntelling you you can think about\nrolling as just taking a given window of\nthe data that you have and actually\ncomputing an aggregation\nremember aggregation is over everything\nhere so\nthink about it when you have a time\nseries you just have to think about\naggregations but\nnow you have another dimension that you\ncan aggregate you have\ntime so you can still aggregate but now\nyou have a time\nhour aggregation that you have and the\nlast one the last two\nlet's say i say it four but actually we\ncan think about five of them\nuh the other one is date components so\nthe specific\ndate that something actually occurred\nsome there are some patterns depending\non the types of data that you are\ndealing with that are more common in\nweekends for example\nsales usually have some seasonal\npatterns across\nwhen you are getting to black friday or\nwhen you are getting to christmas so\nthere are seasonal patterns and you can\ncapture\nthem with date components this is\nanother type\nof extraction that can be used in an\naggregation but can be used as a\nan independent column so for example\nextracting the month of a day so today\nis 2021\njuly 15 so i can take for example only\nthe year\nor only the month and try to capture\nsome kind of seasonality in agriculture\nthis can be important because we have\ndifferent seasons in the year\nif you are selling fashion items of\ncourse\nyou will have different fashion items\nthat you should recommend depending on\nthe season of the year so this can be\none way to tell it to your model and the\nfifth one that i thought\nit is just an additional is actually the\nfifth one is the time difference\nso now instead of taking the difference\nlet's say the positional difference\nlike we are we were doing with the lag\nwe are talking about\ntaking a difference between dates so\nlet's say that you have\nthe transactions again of our credit\ncard fraud case and\nyou can compute how much time have has\npassed how much time has passed\nsince the last transaction on how\nusually what's the average time between\ntransactions of this customer\nhow long has been since this customer\nactually made the purchase in this\ncurrency or how long it has been\nsince this customer actually made any\npurchase this can be important too so\nfor example i have a credit card\nthat i only use for something like\nspotify subscription\nand it has been months since the only\ncharge in that credit card\nis actually a spotify subscription so if\nsomeone if suddenly i have three\ntransactions buying some\ngame coins in a random internet game\nprobably it is a fraud not only because\nof course it is a thing that i'm not\nusually buying but it is a big number of\ntransactions suddenly and\nthe time between these transactions is\nactually completely different from what\nthe credit card companies use it to seem\nin my profile\nso let's go to the example that i told\nyou so that you can see this in practice\nand it is actually a great\nexercise for you to do an exercise that\ni will recommend\nis take some tabular data competitions\nfrom kaggle look at the solutions that\nare shared and try to\nreverse engineer how people computed\nthe features that they are telling you\nthat they computed and i will give you\nan example here so this is a competition\nthat happened\nsix years ago it's the facebook\nrecruiting the idea was\ngiven some bids in a given auction\nyou had to determine if if an user was a\nperson or a machine\nso this site this data was from a\nwebsite where people\nwhere the company did not want bots to\nactually bid\nin their auctions so you had to\ndetermine so they wanted to identify it\nwith machine learning to identify\nif the users were using some kind of\nillegal software\nso that they could block these users\nfrom bidding at the auctions\nso it's a huge data set huge for not for\nthe the size today but it has 7.6\nmillion beats\nand it's actually a tiny data set after\nyou do your\ndata processing and we have basically\ntwo tables we have the bidder table so\nwe have the id of the bidders this can\nbe compared to the customer id\nin our previous example we have the\npayment account it's an identifier\nof the account that the payment\ninformation of the user the address\nand the outcome so was this user about\nor\nwas this user a human but the most\nimportant part for us here\nis the bid data set it's where i\nactually extracted most of the features\nand the winners actually extracted most\nof the features from so we have\na data set that has a bid id a bidder id\nso\nlike we said about the transactions it's\na transaction id\nand the user id the customer id in this\ncase\nthe auction that this customer was\nparticipating so we can\nthink about this as let's say the\nmerchant where the person actually made\na purchase on the credit card and this\nwill change of course case by case\ndepending on what you are modeling but\ni'm trying to keep this very very\ngeneral here so that you can use it in\nany tabular case that you have where you\nhave to extract features from multiple\ntables\nand then you have device time country ip\nurl\nthe category of the auction everything\nso let's see\nhow a very brilliant woman a\nsmall yellow duck she actually created a\nvery very\ngood solution she took the second place\nin this\ncompetition and she actually wrote an\narticle that i will link\nin the in the description of this video\nwith her solution and it has the code if\nyou want to look at how she computed\nthese features and let's do the exercise\nthat i told you about\ntrying to reverse engineer the features\nthat she computed\nbased on our aggregation framework so\nthe first\nfeature here is the median time between\nend users bid and of course these are\nonly some of the features these are not\nall the features you can see all the\nfeatures and\nshe has a great the she made some\nproducts and\na very very good explanation in the\narticle but uh\nhere let's see this feature the features\nthat she described here so the median\ntime between end users bid and the\nuser's previous\nreview speed so like i told you about\nthe case of the transactions\nwhere you calculate the time between\ntransactions in a credit card so let's\ntry to translate this\ninto a group by so she did a group by\nand you can pause the video and try to\ndo it yourself before seeing the\nsolution but\ni will tell you here how i would do it\nso she made a group by\non user so in this case be their id\nthis actually gave her a data frame\nlet's think about this as data frame\nthis actually\ngave her a data frame of all the bits\nthat this user had in the data set\nand then the aggregation that she did\nwas first\nshe computed the difference between the\ntime\nof each of these beads so at this point\nwe have\nbid one bit two bit three so she took\nthe difference\nof all these beads and then with the\ndifferences\nshe actually calculated the median at\nthe end\nshe had a data set that had the user and\nthis new feature the median\ntime between bits basically second\nfeature the mean number of bids a user\nmade per auction how did she compute it\nlet's take our group by in this case\nuser and i\ni will here use the the pandas notation\nthat is the one that i'm mostly familiar\nwith\nso she grouped by user by auction and\nshe took\nthe size operation or the count depends\non missing data and some details of\npandas for example so this\ngave her an user auction size table\nthat she could merge with the original\ndata\nand to finalize i will take a third\nfeature here\nso let's take the group by and let's\ntake this deflection of\nips used by a bidder which were also\nused by another user which was a bot\nthis one is a more complex one so she\nhad to group by\nuser ip and she probably computed\nsize so she had this so let's say that\nfew thread tutoring is another\nway of telling of saying that you are\nselecting some roles but let's say that\nshe filtered a data set that had\nonly users that were bought so the\noutcome\nwas one in this case then what she did\nwas probably this\nshe took the first one and we you can do\nan inner join for example\nor some kind of filtering so that you\nget only the rows that correspond\nto this filter and then after this you\nhave\na a table that has only these users but\nyou have the user\nthe ip and this you have user ip and the\nsize\nbut only for users that actually wear\nbots and then you can take this\nand merge over the original data by ip\nso in the original data you had user you\nhad auction\nyou had ip and you can actually merge\nthis\nmerge this the result of this one above\nwith this data\nand then you can actually create another\nindicator that can tell you\nif any of these ips actually were about\nwere used by a bot before\nso this one is a more complex one but i\nwanted to show you how you can go\ndeep into these features how you can\ncompute very very deep features you\ndon't have to limit yourself\njust one or two or even three\ncategoricals to group by to aggregate\nyou can do\nmany many aggregations and then try\nbasically everything\nin your model as you are\nlearning this it's very important that\nyou use some kind of reference so i will\nleave\nhere some i'll leave a link to this\nfeature tools documentation feature\ntools\nis a library that tries to automate this\nprocess of aggregation\nand extraction from features from\nmultiple tables\ni have not used this in production so i\ndon't know i can't tell you if it is\nvery good very bad whatever but\nwhat i can tell you is it has a lot of\nthese lists they are trying to automate\nthis so they have in the documentation a\nlist\nof future primitives of variable types\nthat you can actually\ncompute so you can see what types of\naggregations they do\nwhat type of of variables they are using\nand join all these together so\nwhat kind of aggregations they usually\ndo for a categorical variable for\nexample and they have a lot of examples\nboth to predict customer churn to\npredict next purchase\nin many many areas it's very very good\nfor you to learn future engineering i\nreally don't understand why this\nthis library is not more popular and i'm\nnot sponsored by them i'm not being paid\nto tell you this i just know from my\nexperience that i really wish i had\nsomething like this when i was learning\nso i'll leave this link below and to\nfinish this video\ni want to tell you that there are two\nother types of features that may be\ninteresting\nto you that i will not cover here\nbecause it goes a little bit\ntoo deep into specific cases which are\ngeolocation features\nso for example hover sign distance to\ncalculate distance between two places on\nearth\nor some other kinds that i can imagine\nof spatial\ndata features that you can extract so\nthere are\nbasically two dimensions that we usually\nsee in\nreal data so so real data can be spatial\nand can be\nusually bound by time so you have to to\nknow some\nways of computing uh some geolocation\nfeatures to help you so the distance for\nexample from points of interest the\ndistance of a customer from a given\nstore\nor from his home can be important in a\ngiven model and\nwe have a new type of feature not a very\nnew type but something that has been\nmore popular and i've seen some very\nvery good solutions on kaggle that use\nthem which are network or graph features\nso you put your data into a graph and\nyou can actually\ndo some aggregations actually or\nsomething like aggregations that you can\nuse to extract some information from the\ndata so for example when we are trying\nto\nidentify in our case here on facebook\nthis last feature that i tried to\nexplain to you about the eyepiece\nit could be a graph a graph where the\nnodes could be a piece and the edges\nit could be a graph where the nodes\ncould be users and the graphs the edges\ncould be a piece\nthe edges could be a piece so if a user\nactually used the same ips another user\nit would have an edge on our graph if\nnot\nof course it will not have and we could\ncompute a lot\nof metrics about it so the edge degree\nand a lot of the node degree actually a\nlot of features\nthat are specific to graphs that can\nactually help our model to predict\nwe can just put into a table and\nactually use it in a model so please\nthink about these graph features too i\nmay make a video only about them but\nthey are basically\naggregations but at a different let's\nsay level\nthat we have but they are ever more\nimportant another thing that i want to\ntell you is that\nan advanced example for you to try this\nexercise of trying to reverse engineer\nthese\nfeatures is actually looking at the\ninstacart competition mainly the kazuki\nonodera solution\nwhere he describes in detail and\nactually has published code\nof the features that he used to take i\nthink the second place in the instacart\ncompetition and it's a very very good\nexercise for you to learn\nhow to do this feature engineering in\nmore tables\nand including the time dimension to like\nwe seen\nhere and if you want something specific\nabout time series forecasting i will\nleave a link to my\nspecific video on my specific workshop\non time series forecasting here that\nyou're can watch now just click the link\nif you like this video please\nleave your like subscribe to the channel\nturn on the notifications and give your\ncomment here\nthank you for watching and have a\nwonderful day\n",
  "words": [
    "want",
    "learn",
    "extract",
    "best",
    "possible",
    "information",
    "data",
    "tabular",
    "data",
    "create",
    "high",
    "performance",
    "machine",
    "learning",
    "models",
    "video",
    "teach",
    "everything",
    "know",
    "name",
    "mario",
    "kaggle",
    "competition",
    "gray",
    "master",
    "multiple",
    "time",
    "price",
    "winner",
    "every",
    "price",
    "machine",
    "learning",
    "competition",
    "say",
    "number",
    "one",
    "reason",
    "developing",
    "feature",
    "engineering",
    "skill",
    "every",
    "time",
    "created",
    "high",
    "performance",
    "model",
    "consulting",
    "job",
    "job",
    "important",
    "part",
    "course",
    "understanding",
    "business",
    "problem",
    "actually",
    "solving",
    "right",
    "problem",
    "extract",
    "maximum",
    "information",
    "data",
    "available",
    "solve",
    "problem",
    "definitely",
    "one",
    "important",
    "art",
    "science",
    "part",
    "creating",
    "machine",
    "learning",
    "models",
    "let",
    "begin",
    "tell",
    "tell",
    "code",
    "tutorial",
    "learn",
    "apply",
    "sql",
    "inspired",
    "independence",
    "whatever",
    "language",
    "already",
    "work",
    "work",
    "future",
    "want",
    "teach",
    "think",
    "teach",
    "reason",
    "give",
    "strategy",
    "tactics",
    "actually",
    "extract",
    "representations",
    "data",
    "problems",
    "include",
    "structured",
    "tabular",
    "data",
    "first",
    "part",
    "tutorial",
    "abstract",
    "part",
    "framework",
    "part",
    "kind",
    "giving",
    "template",
    "blueprint",
    "think",
    "cases",
    "solve",
    "tables",
    "second",
    "part",
    "show",
    "real",
    "example",
    "data",
    "facebook",
    "competition",
    "bot",
    "detection",
    "competition",
    "really",
    "gave",
    "lot",
    "insight",
    "feature",
    "engineering",
    "affects",
    "machine",
    "learning",
    "let",
    "begin",
    "first",
    "question",
    "ask",
    "keys",
    "say",
    "keys",
    "skills",
    "creating",
    "data",
    "creating",
    "features",
    "tabular",
    "data",
    "aggregation",
    "every",
    "time",
    "game",
    "changer",
    "machine",
    "learning",
    "skill",
    "started",
    "thinking",
    "tables",
    "aggregate",
    "data",
    "extract",
    "information",
    "aggregating",
    "clear",
    "tutorial",
    "practical",
    "terms",
    "think",
    "aggregation",
    "usual",
    "group",
    "function",
    "lot",
    "languages",
    "deal",
    "tabular",
    "data",
    "basic",
    "concept",
    "whatever",
    "tables",
    "need",
    "find",
    "keys",
    "join",
    "tables",
    "need",
    "find",
    "variables",
    "group",
    "actually",
    "extract",
    "operations",
    "function",
    "values",
    "columns",
    "let",
    "give",
    "example",
    "make",
    "clear",
    "let",
    "say",
    "work",
    "credit",
    "card",
    "company",
    "trying",
    "predict",
    "fraud",
    "looking",
    "tables",
    "available",
    "tables",
    "transactions",
    "customers",
    "table",
    "customers",
    "credit",
    "cards",
    "let",
    "keep",
    "two",
    "understand",
    "simplified",
    "way",
    "transaction",
    "data",
    "set",
    "transaction",
    "id",
    "customer",
    "id",
    "row",
    "saying",
    "transaction",
    "value",
    "currency",
    "transaction",
    "location",
    "time",
    "transaction",
    "many",
    "many",
    "places",
    "like",
    "merchant",
    "id",
    "machine",
    "id",
    "transaction",
    "covered",
    "online",
    "offline",
    "lot",
    "data",
    "log",
    "transactions",
    "customer",
    "course",
    "customer",
    "id",
    "address",
    "many",
    "credit",
    "cards",
    "person",
    "information",
    "related",
    "customer",
    "create",
    "model",
    "aggregating",
    "data",
    "first",
    "thing",
    "think",
    "keys",
    "need",
    "join",
    "merge",
    "predict",
    "transaction",
    "key",
    "transaction",
    "id",
    "customer",
    "id",
    "transaction",
    "given",
    "customer",
    "need",
    "create",
    "features",
    "predict",
    "transaction",
    "fraud",
    "regular",
    "transaction",
    "customer",
    "one",
    "feature",
    "example",
    "calculate",
    "let",
    "aggregate",
    "customer",
    "id",
    "let",
    "take",
    "example",
    "many",
    "transactions",
    "customers",
    "customer",
    "usually",
    "period",
    "month",
    "one",
    "feature",
    "customer",
    "usually",
    "10",
    "transactions",
    "month",
    "suddenly",
    "10",
    "transactions",
    "day",
    "probably",
    "something",
    "wrong",
    "say",
    "keys",
    "uh",
    "row",
    "customer",
    "id",
    "number",
    "related",
    "information",
    "computed",
    "join",
    "row",
    "transaction",
    "trying",
    "predict",
    "next",
    "fraud",
    "technical",
    "term",
    "would",
    "group",
    "customer",
    "id",
    "use",
    "count",
    "size",
    "using",
    "pandas",
    "count",
    "rows",
    "case",
    "customer",
    "id",
    "need",
    "aggregate",
    "one",
    "variable",
    "aggregate",
    "many",
    "variables",
    "example",
    "let",
    "say",
    "want",
    "understand",
    "customer",
    "usually",
    "makes",
    "transactions",
    "internationally",
    "transactions",
    "usually",
    "domestic",
    "case",
    "would",
    "use",
    "group",
    "aggregate",
    "customer",
    "id",
    "currency",
    "count",
    "count",
    "many",
    "times",
    "customer",
    "actually",
    "made",
    "transaction",
    "given",
    "currency",
    "example",
    "create",
    "table",
    "join",
    "example",
    "number",
    "transactions",
    "dollars",
    "british",
    "pounds",
    "etc",
    "customer",
    "usually",
    "transacts",
    "dollars",
    "probably",
    "see",
    "transaction",
    "canadian",
    "dollars",
    "well",
    "maybe",
    "big",
    "problem",
    "canada",
    "us",
    "close",
    "maybe",
    "customers",
    "border",
    "something",
    "like",
    "see",
    "customer",
    "actually",
    "transacting",
    "chilean",
    "pesos",
    "brazilian",
    "realize",
    "probably",
    "indication",
    "something",
    "least",
    "different",
    "may",
    "may",
    "still",
    "customer",
    "maybe",
    "general",
    "framework",
    "want",
    "think",
    "features",
    "aggregation",
    "take",
    "median",
    "take",
    "average",
    "maximum",
    "minimum",
    "entropy",
    "columns",
    "aggregated",
    "columns",
    "data",
    "set",
    "usually",
    "aggregate",
    "categorical",
    "columns",
    "ordinal",
    "columns",
    "course",
    "aggregating",
    "numerical",
    "columns",
    "usually",
    "feasible",
    "think",
    "get",
    "idea",
    "complete",
    "tell",
    "example",
    "categorical",
    "data",
    "actually",
    "one",
    "hot",
    "encoding",
    "count",
    "frequency",
    "data",
    "like",
    "examples",
    "giving",
    "example",
    "account",
    "currencies",
    "could",
    "example",
    "take",
    "amount",
    "transactions",
    "say",
    "okay",
    "usually",
    "customer",
    "buys",
    "every",
    "purchase",
    "customer",
    "actually",
    "around",
    "50",
    "dollars",
    "customer",
    "suddenly",
    "spending",
    "five",
    "thousand",
    "dollars",
    "one",
    "transaction",
    "may",
    "anomaly",
    "course",
    "machine",
    "learning",
    "model",
    "decide",
    "put",
    "type",
    "feature",
    "capture",
    "kind",
    "pattern",
    "indicator",
    "fraud",
    "course",
    "target",
    "encoding",
    "popular",
    "kego",
    "highly",
    "effective",
    "actually",
    "works",
    "another",
    "thing",
    "want",
    "remember",
    "time",
    "time",
    "treat",
    "ordinal",
    "variable",
    "even",
    "categorical",
    "variable",
    "know",
    "categorical",
    "variables",
    "order",
    "etc",
    "purposes",
    "think",
    "time",
    "discrete",
    "ordinal",
    "sequential",
    "variable",
    "mean",
    "means",
    "list",
    "numbers",
    "list",
    "data",
    "day",
    "day",
    "one",
    "day",
    "two",
    "day",
    "three",
    "day",
    "four",
    "always",
    "think",
    "another",
    "ordinal",
    "variable",
    "group",
    "ordinal",
    "variable",
    "example",
    "get",
    "much",
    "money",
    "someone",
    "spends",
    "day",
    "group",
    "time",
    "take",
    "sum",
    "amount",
    "transactions",
    "people",
    "credit",
    "card",
    "example",
    "four",
    "types",
    "variables",
    "usually",
    "like",
    "recommend",
    "one",
    "leg",
    "think",
    "group",
    "shift",
    "data",
    "lag",
    "simply",
    "saying",
    "okay",
    "end",
    "time",
    "end",
    "value",
    "variable",
    "uh",
    "across",
    "time",
    "example",
    "list",
    "10",
    "transactions",
    "value",
    "last",
    "transaction",
    "would",
    "lag",
    "one",
    "get",
    "10th",
    "transaction",
    "would",
    "lag",
    "legs",
    "applied",
    "sequences",
    "general",
    "time",
    "another",
    "way",
    "order",
    "sequence",
    "another",
    "feature",
    "usually",
    "like",
    "difference",
    "difference",
    "like",
    "lag",
    "instead",
    "taking",
    "example",
    "last",
    "transaction",
    "take",
    "last",
    "two",
    "transactions",
    "subtract",
    "one",
    "difference",
    "transactions",
    "current",
    "transaction",
    "last",
    "one",
    "different",
    "simple",
    "difference",
    "effective",
    "machine",
    "learning",
    "another",
    "one",
    "like",
    "rolling",
    "moving",
    "average",
    "classical",
    "example",
    "think",
    "sequence",
    "telling",
    "think",
    "rolling",
    "taking",
    "given",
    "window",
    "data",
    "actually",
    "computing",
    "aggregation",
    "remember",
    "aggregation",
    "everything",
    "think",
    "time",
    "series",
    "think",
    "aggregations",
    "another",
    "dimension",
    "aggregate",
    "time",
    "still",
    "aggregate",
    "time",
    "hour",
    "aggregation",
    "last",
    "one",
    "last",
    "two",
    "let",
    "say",
    "say",
    "four",
    "actually",
    "think",
    "five",
    "uh",
    "one",
    "date",
    "components",
    "specific",
    "date",
    "something",
    "actually",
    "occurred",
    "patterns",
    "depending",
    "types",
    "data",
    "dealing",
    "common",
    "weekends",
    "example",
    "sales",
    "usually",
    "seasonal",
    "patterns",
    "across",
    "getting",
    "black",
    "friday",
    "getting",
    "christmas",
    "seasonal",
    "patterns",
    "capture",
    "date",
    "components",
    "another",
    "type",
    "extraction",
    "used",
    "aggregation",
    "used",
    "independent",
    "column",
    "example",
    "extracting",
    "month",
    "day",
    "today",
    "2021",
    "july",
    "15",
    "take",
    "example",
    "year",
    "month",
    "try",
    "capture",
    "kind",
    "seasonality",
    "agriculture",
    "important",
    "different",
    "seasons",
    "year",
    "selling",
    "fashion",
    "items",
    "course",
    "different",
    "fashion",
    "items",
    "recommend",
    "depending",
    "season",
    "year",
    "one",
    "way",
    "tell",
    "model",
    "fifth",
    "one",
    "thought",
    "additional",
    "actually",
    "fifth",
    "one",
    "time",
    "difference",
    "instead",
    "taking",
    "difference",
    "let",
    "say",
    "positional",
    "difference",
    "like",
    "lag",
    "talking",
    "taking",
    "difference",
    "dates",
    "let",
    "say",
    "transactions",
    "credit",
    "card",
    "fraud",
    "case",
    "compute",
    "much",
    "time",
    "passed",
    "much",
    "time",
    "passed",
    "since",
    "last",
    "transaction",
    "usually",
    "average",
    "time",
    "transactions",
    "customer",
    "long",
    "since",
    "customer",
    "actually",
    "made",
    "purchase",
    "currency",
    "long",
    "since",
    "customer",
    "actually",
    "made",
    "purchase",
    "important",
    "example",
    "credit",
    "card",
    "use",
    "something",
    "like",
    "spotify",
    "subscription",
    "months",
    "since",
    "charge",
    "credit",
    "card",
    "actually",
    "spotify",
    "subscription",
    "someone",
    "suddenly",
    "three",
    "transactions",
    "buying",
    "game",
    "coins",
    "random",
    "internet",
    "game",
    "probably",
    "fraud",
    "course",
    "thing",
    "usually",
    "buying",
    "big",
    "number",
    "transactions",
    "suddenly",
    "time",
    "transactions",
    "actually",
    "completely",
    "different",
    "credit",
    "card",
    "companies",
    "use",
    "seem",
    "profile",
    "let",
    "go",
    "example",
    "told",
    "see",
    "practice",
    "actually",
    "great",
    "exercise",
    "exercise",
    "recommend",
    "take",
    "tabular",
    "data",
    "competitions",
    "kaggle",
    "look",
    "solutions",
    "shared",
    "try",
    "reverse",
    "engineer",
    "people",
    "computed",
    "features",
    "telling",
    "computed",
    "give",
    "example",
    "competition",
    "happened",
    "six",
    "years",
    "ago",
    "facebook",
    "recruiting",
    "idea",
    "given",
    "bids",
    "given",
    "auction",
    "determine",
    "user",
    "person",
    "machine",
    "site",
    "data",
    "website",
    "people",
    "company",
    "want",
    "bots",
    "actually",
    "bid",
    "auctions",
    "determine",
    "wanted",
    "identify",
    "machine",
    "learning",
    "identify",
    "users",
    "using",
    "kind",
    "illegal",
    "software",
    "could",
    "block",
    "users",
    "bidding",
    "auctions",
    "huge",
    "data",
    "set",
    "huge",
    "size",
    "today",
    "million",
    "beats",
    "actually",
    "tiny",
    "data",
    "set",
    "data",
    "processing",
    "basically",
    "two",
    "tables",
    "bidder",
    "table",
    "id",
    "bidders",
    "compared",
    "customer",
    "id",
    "previous",
    "example",
    "payment",
    "account",
    "identifier",
    "account",
    "payment",
    "information",
    "user",
    "address",
    "outcome",
    "user",
    "user",
    "human",
    "important",
    "part",
    "us",
    "bid",
    "data",
    "set",
    "actually",
    "extracted",
    "features",
    "winners",
    "actually",
    "extracted",
    "features",
    "data",
    "set",
    "bid",
    "id",
    "bidder",
    "id",
    "like",
    "said",
    "transactions",
    "transaction",
    "id",
    "user",
    "id",
    "customer",
    "id",
    "case",
    "auction",
    "customer",
    "participating",
    "think",
    "let",
    "say",
    "merchant",
    "person",
    "actually",
    "made",
    "purchase",
    "credit",
    "card",
    "change",
    "course",
    "case",
    "case",
    "depending",
    "modeling",
    "trying",
    "keep",
    "general",
    "use",
    "tabular",
    "case",
    "extract",
    "features",
    "multiple",
    "tables",
    "device",
    "time",
    "country",
    "ip",
    "url",
    "category",
    "auction",
    "everything",
    "let",
    "see",
    "brilliant",
    "woman",
    "small",
    "yellow",
    "duck",
    "actually",
    "created",
    "good",
    "solution",
    "took",
    "second",
    "place",
    "competition",
    "actually",
    "wrote",
    "article",
    "link",
    "description",
    "video",
    "solution",
    "code",
    "want",
    "look",
    "computed",
    "features",
    "let",
    "exercise",
    "told",
    "trying",
    "reverse",
    "engineer",
    "features",
    "computed",
    "based",
    "aggregation",
    "framework",
    "first",
    "feature",
    "median",
    "time",
    "end",
    "users",
    "bid",
    "course",
    "features",
    "features",
    "see",
    "features",
    "great",
    "made",
    "products",
    "good",
    "explanation",
    "article",
    "uh",
    "let",
    "see",
    "feature",
    "features",
    "described",
    "median",
    "time",
    "end",
    "users",
    "bid",
    "user",
    "previous",
    "review",
    "speed",
    "like",
    "told",
    "case",
    "transactions",
    "calculate",
    "time",
    "transactions",
    "credit",
    "card",
    "let",
    "try",
    "translate",
    "group",
    "group",
    "pause",
    "video",
    "try",
    "seeing",
    "solution",
    "tell",
    "would",
    "made",
    "group",
    "user",
    "case",
    "id",
    "actually",
    "gave",
    "data",
    "frame",
    "let",
    "think",
    "data",
    "frame",
    "actually",
    "gave",
    "data",
    "frame",
    "bits",
    "user",
    "data",
    "set",
    "aggregation",
    "first",
    "computed",
    "difference",
    "time",
    "beads",
    "point",
    "bid",
    "one",
    "bit",
    "two",
    "bit",
    "three",
    "took",
    "difference",
    "beads",
    "differences",
    "actually",
    "calculated",
    "median",
    "end",
    "data",
    "set",
    "user",
    "new",
    "feature",
    "median",
    "time",
    "bits",
    "basically",
    "second",
    "feature",
    "mean",
    "number",
    "bids",
    "user",
    "made",
    "per",
    "auction",
    "compute",
    "let",
    "take",
    "group",
    "case",
    "user",
    "use",
    "pandas",
    "notation",
    "one",
    "mostly",
    "familiar",
    "grouped",
    "user",
    "auction",
    "took",
    "size",
    "operation",
    "count",
    "depends",
    "missing",
    "data",
    "details",
    "pandas",
    "example",
    "gave",
    "user",
    "auction",
    "size",
    "table",
    "could",
    "merge",
    "original",
    "data",
    "finalize",
    "take",
    "third",
    "feature",
    "let",
    "take",
    "group",
    "let",
    "take",
    "deflection",
    "ips",
    "used",
    "bidder",
    "also",
    "used",
    "another",
    "user",
    "bot",
    "one",
    "complex",
    "one",
    "group",
    "user",
    "ip",
    "probably",
    "computed",
    "size",
    "let",
    "say",
    "thread",
    "tutoring",
    "another",
    "way",
    "telling",
    "saying",
    "selecting",
    "roles",
    "let",
    "say",
    "filtered",
    "data",
    "set",
    "users",
    "bought",
    "outcome",
    "one",
    "case",
    "probably",
    "took",
    "first",
    "one",
    "inner",
    "join",
    "example",
    "kind",
    "filtering",
    "get",
    "rows",
    "correspond",
    "filter",
    "table",
    "users",
    "user",
    "ip",
    "user",
    "ip",
    "size",
    "users",
    "actually",
    "wear",
    "bots",
    "take",
    "merge",
    "original",
    "data",
    "ip",
    "original",
    "data",
    "user",
    "auction",
    "ip",
    "actually",
    "merge",
    "merge",
    "result",
    "one",
    "data",
    "actually",
    "create",
    "another",
    "indicator",
    "tell",
    "ips",
    "actually",
    "used",
    "bot",
    "one",
    "complex",
    "one",
    "wanted",
    "show",
    "go",
    "deep",
    "features",
    "compute",
    "deep",
    "features",
    "limit",
    "one",
    "two",
    "even",
    "three",
    "categoricals",
    "group",
    "aggregate",
    "many",
    "many",
    "aggregations",
    "try",
    "basically",
    "everything",
    "model",
    "learning",
    "important",
    "use",
    "kind",
    "reference",
    "leave",
    "leave",
    "link",
    "feature",
    "tools",
    "documentation",
    "feature",
    "tools",
    "library",
    "tries",
    "automate",
    "process",
    "aggregation",
    "extraction",
    "features",
    "multiple",
    "tables",
    "used",
    "production",
    "know",
    "ca",
    "tell",
    "good",
    "bad",
    "whatever",
    "tell",
    "lot",
    "lists",
    "trying",
    "automate",
    "documentation",
    "list",
    "future",
    "primitives",
    "variable",
    "types",
    "actually",
    "compute",
    "see",
    "types",
    "aggregations",
    "type",
    "variables",
    "using",
    "join",
    "together",
    "kind",
    "aggregations",
    "usually",
    "categorical",
    "variable",
    "example",
    "lot",
    "examples",
    "predict",
    "customer",
    "churn",
    "predict",
    "next",
    "purchase",
    "many",
    "many",
    "areas",
    "good",
    "learn",
    "future",
    "engineering",
    "really",
    "understand",
    "library",
    "popular",
    "sponsored",
    "paid",
    "tell",
    "know",
    "experience",
    "really",
    "wish",
    "something",
    "like",
    "learning",
    "leave",
    "link",
    "finish",
    "video",
    "want",
    "tell",
    "two",
    "types",
    "features",
    "may",
    "interesting",
    "cover",
    "goes",
    "little",
    "bit",
    "deep",
    "specific",
    "cases",
    "geolocation",
    "features",
    "example",
    "hover",
    "sign",
    "distance",
    "calculate",
    "distance",
    "two",
    "places",
    "earth",
    "kinds",
    "imagine",
    "spatial",
    "data",
    "features",
    "extract",
    "basically",
    "two",
    "dimensions",
    "usually",
    "see",
    "real",
    "data",
    "real",
    "data",
    "spatial",
    "usually",
    "bound",
    "time",
    "know",
    "ways",
    "computing",
    "uh",
    "geolocation",
    "features",
    "help",
    "distance",
    "example",
    "points",
    "interest",
    "distance",
    "customer",
    "given",
    "store",
    "home",
    "important",
    "given",
    "model",
    "new",
    "type",
    "feature",
    "new",
    "type",
    "something",
    "popular",
    "seen",
    "good",
    "solutions",
    "kaggle",
    "use",
    "network",
    "graph",
    "features",
    "put",
    "data",
    "graph",
    "actually",
    "aggregations",
    "actually",
    "something",
    "like",
    "aggregations",
    "use",
    "extract",
    "information",
    "data",
    "example",
    "trying",
    "identify",
    "case",
    "facebook",
    "last",
    "feature",
    "tried",
    "explain",
    "eyepiece",
    "could",
    "graph",
    "graph",
    "nodes",
    "could",
    "piece",
    "edges",
    "could",
    "graph",
    "nodes",
    "could",
    "users",
    "graphs",
    "edges",
    "could",
    "piece",
    "edges",
    "could",
    "piece",
    "user",
    "actually",
    "used",
    "ips",
    "another",
    "user",
    "would",
    "edge",
    "graph",
    "course",
    "could",
    "compute",
    "lot",
    "metrics",
    "edge",
    "degree",
    "lot",
    "node",
    "degree",
    "actually",
    "lot",
    "features",
    "specific",
    "graphs",
    "actually",
    "help",
    "model",
    "predict",
    "put",
    "table",
    "actually",
    "use",
    "model",
    "please",
    "think",
    "graph",
    "features",
    "may",
    "make",
    "video",
    "basically",
    "aggregations",
    "different",
    "let",
    "say",
    "level",
    "ever",
    "important",
    "another",
    "thing",
    "want",
    "tell",
    "advanced",
    "example",
    "try",
    "exercise",
    "trying",
    "reverse",
    "engineer",
    "features",
    "actually",
    "looking",
    "instacart",
    "competition",
    "mainly",
    "kazuki",
    "onodera",
    "solution",
    "describes",
    "detail",
    "actually",
    "published",
    "code",
    "features",
    "used",
    "take",
    "think",
    "second",
    "place",
    "instacart",
    "competition",
    "good",
    "exercise",
    "learn",
    "feature",
    "engineering",
    "tables",
    "including",
    "time",
    "dimension",
    "like",
    "seen",
    "want",
    "something",
    "specific",
    "time",
    "series",
    "forecasting",
    "leave",
    "link",
    "specific",
    "video",
    "specific",
    "workshop",
    "time",
    "series",
    "forecasting",
    "watch",
    "click",
    "link",
    "like",
    "video",
    "please",
    "leave",
    "like",
    "subscribe",
    "channel",
    "turn",
    "notifications",
    "give",
    "comment",
    "thank",
    "watching",
    "wonderful",
    "day"
  ],
  "keywords": [
    "want",
    "learn",
    "extract",
    "information",
    "data",
    "tabular",
    "create",
    "machine",
    "learning",
    "video",
    "everything",
    "know",
    "competition",
    "time",
    "every",
    "say",
    "number",
    "one",
    "feature",
    "engineering",
    "model",
    "important",
    "part",
    "course",
    "problem",
    "actually",
    "let",
    "tell",
    "think",
    "give",
    "first",
    "kind",
    "tables",
    "second",
    "example",
    "gave",
    "lot",
    "keys",
    "features",
    "aggregation",
    "aggregate",
    "group",
    "need",
    "join",
    "variables",
    "columns",
    "credit",
    "card",
    "trying",
    "predict",
    "fraud",
    "transactions",
    "customers",
    "table",
    "two",
    "way",
    "transaction",
    "set",
    "id",
    "customer",
    "currency",
    "many",
    "like",
    "thing",
    "merge",
    "given",
    "take",
    "usually",
    "month",
    "suddenly",
    "day",
    "probably",
    "something",
    "uh",
    "computed",
    "would",
    "use",
    "count",
    "size",
    "case",
    "variable",
    "made",
    "dollars",
    "see",
    "different",
    "may",
    "median",
    "categorical",
    "ordinal",
    "get",
    "could",
    "purchase",
    "type",
    "another",
    "list",
    "three",
    "types",
    "lag",
    "end",
    "last",
    "difference",
    "taking",
    "aggregations",
    "specific",
    "used",
    "try",
    "compute",
    "since",
    "exercise",
    "auction",
    "user",
    "bid",
    "users",
    "basically",
    "ip",
    "good",
    "solution",
    "took",
    "link",
    "leave",
    "distance",
    "graph"
  ]
}