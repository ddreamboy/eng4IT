{
  "text": "This course will teach you how to implement speech \nrecognition in Python by building five projects.  \nAnd it's easier than you may think. This course \nis taught by these two amazing instructors. Hi,  \neveryone. I'm Patrick. And I'm Alyssa. Patrick \nis an experienced software engineer. And Ministra  \nis an experienced data scientist. And they're \nboth developer advocates at assembly AI.  \nAssembly AI is a deep learning company that \ncreates a speech to text API, and you'll learn  \nhow to use the API. In this course, assembly AI \nprovided a grant that made this course possible.  \nThey also have a YouTube channel where they post \nweekly Python and machine learning tutorials. So  \nhere's the projects you'll learn to build in \nthis course. So on the first project, we are  \ngoing to learn how to deal with audio data, we are \ngoing to see how to capture audio information from  \na microphone and save it as a WAV file. In the \nsecond project, we are going to learn how to do  \nspeech recognition. On top of this audio file that \nwe have just recorded using assembly API's API. On  \nthe third project, we are going to change gears \na little bit and start doing sentiment analysis  \non iPhone reviews that you find on YouTube. On \nthe fourth project, we are going to summarize  \npodcasts that we find online and build a web app \nto show the results to users. And on the last  \nproject we are going to use speech recognition in \ncombination with open AI API to make an app that  \ncan answer users questions. I hope you're excited. \nLet's get started. Alright, so in this first part,  \nI teach you some audio processing basics and \nPython. So we briefly touched on different  \naudio file formats. Then we talk about different \naudio signal parameters that you should know.  \nThen I show you how to use the wav module to load \nand save a WAV file, then I show you how you can  \nplot a wave signal. Then I also show you how to do \na microphone recording in Python. And finally, I  \nalso show you how to load other file formats like \nmp3 files. So let's get started. So first of all,  \nbefore we write some code, let's talk briefly \nabout different audio file formats. So here I've  \nlisted three of the most popular ones, mp3, FLAC, \nand WAV. mp3 is probably the most popular one that  \nyou may know. And this is a lossy compression \nformat. So this means it compresses the data.  \nAnd during this process, we can lose information. \nOn the other hand, flax is a loss less compression  \nformat. So it also compresses the data. But it \nallows us to perfectly reconstruct the original  \ndata. And WAV is a uncompressed format. So this \nmeans it stores the data in an uncompressed way.  \nSo the audio quality here is the best but also the \nfile size is the largest. And WAV is the standard  \nfor CD audio quality. So we focus on this in the \nfirst part, because it's actually very easy to  \nwork with this in Python, because we have a built \nin wav module, so we don't have to answer this.  \nAnd now let's have a look at how we can work with \na WAV audio file. By the way, WAV stands for wave  \nform audio format. And before we start loading \nsome data, let's talk about a few parameters  \nthat we have to understand. So before we load our \nfirst wav file, let's understand a few parameters.  \nSo we have the number of channels, this is \nusually one or two. So one is also known as  \nmono and two is stereo. So this is the number of \nthe independent audio channels, for example to  \nor stereo has two independent channels. And this \nmeans it gives you the impression that the audio  \nis coming from two different directions. Then \nwe have the sample with this is the number of  \nbytes for each sample. So this will get more \nclear later when we have a look at an example.  \nAnd then we have the frame rate, which is also \nknown as the sample rate or sample frequency.  \nAnd this is a very important parameter. So this \nmeans the number of samples for each second.  \nAnd for example, you may have seen this number a \nlot. So this means 44,100 hertz or 44.1 kilohertz.  \nThis is usually the standard sampling \nrate for CD quality. So this means we get  \n44,100 sample values in each second. And \nthen we have the number of frames. So yeah,  \nthis is the total number of frames we get. And \nthen we have the values in each frame. And when  \nwe load this, this will be in a binary format, \nbut we can convert this to integer values later.  \nSo now let's have a look at how to load a file. So \nWith the wave four wave module. So here I prepared  \na simple wav file. So this is five seconds \nlong. So let's actually listen to this. Hi,  \nmy name is Patrick, and I'm a developer advocate \nat assembly AI. And yeah, here, we also see a  \nfew parameters are ready. So now let's go back \nto the code. And now let's load this file. So  \nfor this, we create an object and we simply say \nwave dot open, then we have to give it the name.  \nSo this is called Petrick, dot wav. And to read \nthis, we say we read this in read binary. And now  \nwe can extract all these different parameters. \nFor example, let's print the, let's say the  \nnumber of channels. And we get this by saying \nobject dot get N channels. Then we also want  \nto print the sample with so print the sample with \nand we get this biasing object dot get Sam with,  \nthen let's print the frame rates. So print \nframe rates, and we get this by saying object  \ndot get frame rate. Then what do we also want, we \nalso want the number of frames. So we print the  \nnumber of frames, and then we say object dot get, \nand not the N channels and frames. And lastly,  \nlet's also print the, all the parameters. \nSo we can get all the parameters at once  \nby saying object dot get per params. And now \nlet's print this. So if we run this, so I say  \npython wave example.pi, then we see we have only \none channel. So this is a mono format, we have  \na sample width of two, so we have two bytes for \neach sample, then we have a frame rate of 16,000,  \nand a number of frames of 80,000. And here we also \nhave all the parameters as a WAV params object.  \nSo for example, now we can calculate the time \nof the audio. And we as I set the frame rate is  \nthe number of samples per second. So if we get the \nwhole number of frames, so the number of frames or  \nnumber of samples, divided by the frame rate, then \nwe get the time and seconds. So now if we print t  \naudio, and run this, then we get 5.0. So five \nseconds, so this is the same that we see here. So  \nthis works. And now let's get the actual frames. \nSo the frames equals object dot get frames gets  \nno sorry, object dot read frames, and \nthen we can give it the number of frames,  \nor, or we can I think we can pass in minus one. So \nthis will read all frames. And let's for example,  \nso let's print the type of this to see what this \nis. And then also print the type of frames cero.  \nAnd then let's print the length of frames. So \nnow let's run this. And then we see this is a  \nbytes object. And so here we see class \nbytes. And when we extract the first byte,  \nthen we see this as a integer. And now the \nlength of the frames object is 160,000.  \nSo this is not the same as the number \nof frames. So if we have a look here,  \nthe number of frames is 80,000. But if \nwe extract the length here, then this is  \ntwice as much. And if you listen carefully in \nthe beginning here, I mentioned the sample with  \nthis means we have two bytes per sample. So now if \nwe actually cut collate this divided by two, then  \nagain, we get our 80,000 number of frames. And \nyeah, this is how easily we can read a WAV file.  \nAnd then we can work with this and work with the \nframes. And now to load or to save the data again,  \nwe also open let's call this object, new equals, \nand then we say wave dot open, then we can give it  \na new name, let's say Patrick underscore new dot \nwave. And now we open this in write binary mode.  \nAnd now we can basically call all those functions \nas setters and not as getters. So we say object,  \nnew dot sets, number of channels, so this is only \none channel, then we say object new dot set sample  \nwith this should be to object new dot set frame \nrates, this is 16,000 as a float, so these are  \nall the parameters we should set. And then we can \nwrite the frames by saying object, new dot write  \nframes, and then the frames. So here we have the \noriginal frames. And now basically, we duplicate  \nthe file. So we write the frames and what I \nforgot. So when we are done with opening this  \nand reading all the information we want, we all \nshould also should call objects, thoughts close.  \nAnd then the same here. So here we say object, new \ndot, close. And this will close the file objects.  \nAnd yeah, so now if we save this and run this, \nthen now here we see we have the duplicated file.  \nAnd if we run this, Hi, my name is Patrick, \nand I'm a developer advocate at assembly AI,  \nthen we see this works and the test the same data \nin it. So yeah, this is how to work with a WAV  \nfile and with the wav module. So now let's see how \nwe can plot a WAV file object. Now plotting a wave  \nsignal is actually not too difficult. So for this, \nwe just need to install matplotlib and NumPy. Then  \nwe import all the modules we need. So again, \nwe need wave, then we need matplotlib.pi plot  \nas PLT t, and then we import NumPy, num, pi, \ns and p. Then again, I want to read the wav  \nfile. So I say wav dot open. And this was Patrick \ndot wav in read binary mode, then I want to  \nread all the parameters that I need. So I \nwant to read the sample frequency. And this is  \nobjects dot get frame rates, then I need \nthe number of samples. So this is object dot  \nget and frames. And then I also need the actual \nsignal. So I call this signal dot wave equals  \nobject dot read frames minus one. So all the \nframes and then I can say object dot close.  \nAnd then for example, we can calculate the number \non the the length of the signal in seconds. So I  \ncall this T audio. And if you remember this from \nthe first code, so this is the number of samples  \ndivided by the sample frequency. And now let's \nprint the T audio and save this and run this just  \nas a test. So now we can run Python plot audio and \nwe get 5.0. So this works so far. So now I want to  \ncreate the plot. So this is a bytes object. So we \ncan create a numpy array out of this very easily.  \nSo I call this signal array equals and then we \ncan use NumPy from buffer and here we put in the  \nsignal, signal wave. And we can also specify a \ndata type. So here I want to be to have this int  \nC Steam. And now we need an object for the \nx axis or the so the times axis. So we say  \ntimes equals, and here we use the numpy linspace \nfunction, this gets zero as the start. And the  \nend is the length of the signal. So this is T \naudio or five seconds. And then we can also give  \nthis a number parameter and the number is the \nnumber of samples. So if you remember, so the  \nsignal wave. So here, we basically get a sample \nfor each point in time. And now we want to plot  \nthis. So we create a figure. So we say PLT dot \nfigure, and we give this a fixed size of 15  \nby five, then we say P L T dot plot, and we \nwant to plot the times against the signal  \narray, then we simply give it a title \nP L T dot title, and let's call this  \naudio signal. Then I also want to say P L T dot \ny label, and the y label is the SIG no wave,  \nand the P L T x label is the time time \nin seconds. And then we say P L T x Lim.  \nAnd we limit this to be between zero and T audios \nfor five seconds. And then we say P L T dot  \nshow. And this is all we need. And now if we run \nthis, then this should open our plot. And here we  \nhave it. So here we have our audio signal plotted \nas a WAV plot. And this is how easily we can do it  \nwith matplotlib and the wave module. Now let's \nlearn how we can record with our microphone and  \ncapture the microphone input in Python. So for \nthis, we use PI audio, a popular Python library.  \nAnd this provides bindings for port or your the \ncross platform audio i o library. So with this, we  \ncan easily play and record audio. And this works \non Linux, Windows and Mac. And for each platform,  \nthere's a slightly different installation command \nthat they recommend. So for example, on Windows,  \nyou should use this command. On Mac, you also \nhave to install port or your first so if you use  \nhomebrew, then you can easily say brew install \nport audio and then pip install PI audio. And  \non Linux, you can use this command. So I already \ndid this. So here I'm on a Mac. So I use brew,  \ninstall port audio, and then pip install PI \naudio. And now I can import this so I say  \nimport pi audio. And I also want to import wav \nto save the recording later. Then I want to  \nset up a few parameters. So I say frames per \nbuffer. And here I say 3200. So you can play  \naround with this a little bit. Then I specified \nthe format. So the format equals pi or your dot  \nP R int, sixth team. So this is basically the \nsame that we use here. So here we use NumPy, n 16.  \nAnd then here we have the P r and 16. Then I also \nspecify the number of channels. So here I say  \none, so simply a mono format, and then also \nthe frame rate. So the rate here again,  \nI say 16,000. So again, you can use a different \nrate and play around with this. Then we create  \nour PI audio object. So we say p equals pi audio. \nThen we create a stream object. So we say stream  \nequals P dot open. And now we put in all the \nparameters. So we say format equals format,  \nthen I need the channels. So channels equals \nchannels, the rate equals the rate. We also  \nwant to capture the input so input equals true. \nAnd lastly, we save frames per buffer equals  \nframes per buffer. Then we have our stream \nobject. So now we can didn't start recording.  \nAnd now we want to record for a number of seconds. \nSo here I say five seconds. And then we store the  \nframes. And we store this in a list object. And \nnow we can iterate over and say, for i in range,  \nand we start at zero and go until, and now \nwe say rate divided by frames per buffer  \ntimes the seconds. And then we convert this to a \ninteger, not a float. And with this, we basically  \nrecord for five seconds. And then we read each \nchunk. So we say, data equals, and then here we  \nsay stream dot read. And then we read the frames \nper buffer. And then we say, frames, dots, append  \nthe data. So basically frames per buffer. So this \nmeans we read this many frames in at one, so with  \none iteration. And now we have it. So now we \ncan close everything again. So we can say stream  \ndot stop stream, then we can also say stream \ndot close. And we can say P dot terminate.  \nSo now we have everything correctly \nshut down. And now we can, for example,  \nsave the frames object again in a WAV file. So \nfor this, I say, object equals wav dot open.  \nAnd let's call this output dot wav wave, and in \nwrite binary mode, then we set all the parameters.  \nSo I said object set number of channels, this is \nthe channels parameter objects dot set sample with  \nthis is the this we get from P dot get sample size \nof our format, then object dot set frame rate,  \nthis is the rate and then we can write all the \nframes. So we say object, dot write frames.  \nAnd we need to write this in binaries. So we can \ncreate a binary string like this, so a string,  \nand then dot join. And here we put in our frames \nlist. So this will combine all the elements in our  \nframes list into a binary string. And then we say \nobject dot close, and this is everything we need  \nto do. So now we can run Python, record Mike and \ntest this. Hi, I'm Patrick. This is a test 123.  \nAnd now it's done. So here we have our new \nfile. So let's play this and see if this works.  \nHi, I'm Patrick. This is a test 123 And it worked \nawesome. And now As last step I also want to show  \nyou how to load mp3 files and not only wav files, \nso let's do this. So to load mp3 files, we need  \nan additional third party library and I recommend \nto use pie it up so this is a very simple to use  \nlibrary it provides an simple and easy high level \ninterface to load and also to manipulate audio. So  \nin order to install this, we also need to install \nFFmpeg so on the Mac, I use homebrew so I had to  \nsay brew install FFmpeg and after this you can \nsimply say pip install and then pipe it up.  \nAnd now this should install it. So he has already \nset up sfide. And now we can for example say from  \npi up we want to import the audio segment. \nAnd then we can say audio equals audio segment  \nand then here we can say from mp3 If we have \nan mp3, in my case right now I only have a from  \nWAV and then here I am, let's load the Petrick \ndot WAV and then we can for example also very  \neasily manipulate this by saying audio plus \nsix audio plus six. So this will increase  \nthe volume by six d be 60 P then we can also for \nexample Repeat the clips. So we say audio equals  \nall your times to, then we can use a fade \nin, for example, audio equals audio dot fade  \nunderscore in with with 2000 milliseconds. So \ntwo seconds fade in the same works with fade  \nout. So yeah, this is how we can manipulate. \nAnd then we can say audio dot export. And then  \nI want to export this in. Let's call this mash \nup dot mp3. And then I have to say format equals  \nas a string, mp3. And now for example, I could \nload this by saying, or you two equals or your  \ndot from mp3. And then here I use mesh up \ndot mp3 and then print done so that we see  \nit arrives at this part. And now let's \nsay python, and then the load mp3 file.  \nAnd yeah, this works. So now here we have our \nmp3 file. And we could also load it like this.  \nSo yeah, that's how you can use the pilot module \nto load other file formats as well. And that's all  \nI wanted to show you. In this first part, I hope \nyou learned a little bit about audio processing,  \nand Python and charters. And now let's move on \nand let's learn how to do speech recognition and  \nPython. Hey, and welcome. In this project, we \nare going to learn how to do speech recognition  \nin Python, it's going to be very simple, what \nwe're going to do is to take the audio file  \nthat we recorded in the previous projects, \nand turn it into a text file. Let me show  \nyou how the project works. So here is the audio \nfile that we recorded in the previous project.  \nHi, I'm Patrick, this is a test \n123. And if we run our script  \nwe get the text transcription of \nthis audio file. So like this here.  \nHi, I'm Patrick. This is a test 123. So let's \nlearn how to implement this in Python. So for  \nthis project, we are mainly going to need \ntwo things assembly API's API to do the  \nspeech recognition and the request library \nfrom Python to talk to assembly API's API.  \nSo let's first go ahead and get a API token from \nAssembly AI. It's very simple, you just need to go  \nto assembly ai.com and create a free account. \nOnce you have an account, you can sign in and  \njust copy your API keys by clicking here. And \nright away, I'm going to create a configure file  \nand put my API key here.  \nOnce I've done that, now I have a way of \nauthenticating who I am with SMD as API. And now  \nwe can start setting up how to upload transcribe \nand get the transcription from Assembly as API.  \nThe next thing that I want to do is to have a \nmain file that is going to have all my code. What  \nI need to do in there is to import the requests \nlibrary so that I can talk to the assembly API.  \nSo this project is going to have four steps. \nThe first one is to upload the file that we have  \nlocally to assembly AI. Second one is to start the \ntranscription. Third one is keep pulling assembly  \nas API to see when the transcription is done. \nAnd lastly, we're going to see this transcript.  \nSo uploading is actually quite simple. If \nwe go to the documentation of assembly AI,  \nwe will see here uploading local file files for \ntranscription. So I can just copy and paste this  \nand change the code as we need it. So basically, \nyeah, okay, we are importing the request library  \nalready. The file name we are going to get \nfrom the terminal. So I will set that later.  \nJust a couple of things that we need to pay \nattention here. Basically, there is a way to  \nread the audio file from our file system. \nAnd then we need to set up a Heather's  \nthese headers are used for authentication. \nSo we can actually already set this because  \nthis is not going to be your API token. We \nset it to be API key assembly API, right.  \nAnd we need to import it here of course.  \nAlright, that's done. So we also have \na upload endpoint for assembly and this  \none is API that assembly comm V to upload. But \nyou know, this might be something that we need  \nalso later, so I'm just going to put \nthis to a separate value variable  \nand then just call this one here. You So when \nwe're doing, when you're when you're uploading  \na file to assembly AI, we are doing a post \nrequest. And this post requests, you need to,  \nyou need to send this post request to the upload \nendpoint, you need to include your API key  \nincluded in the headers. And of course, you \nneed the data. So the file that you read,  \nand we are reading the data through the \nread file function in chunks, because  \nsome of the AI requires it to be in chunks. And \nin chunk sizes of five megabytes. Basically,  \nthis is a number of bytes that are in there. While \nwe're at it, we can already get the file name from  \na terminal tool, right. So for that, I just need \nto import system. And inside system, the second,  \nor the first, not the zeroeth variable, or \nthe argument is going to be the file name.  \nAnd here, let's clean up a little bit. All right, \nnow, we should be able to just run a command on  \nthe terminal, include the name of the file that \nwe want to upload, and it will be uploaded to  \nassembly AI. And we will also let's print \nthe response that we get from Assembly AI  \nto see what kind of response we get. Again, \nthis is the file that we are working with.  \nHi, I'm Patrick, this is a test 123. And what \nwe need to do right now is one Python main.py  \nand the name of the file in \nthis case, output dot love.  \nAll right, so we uploaded our file to assembly \nAI successfully. In the response, what we get is  \nthe upload URL, so where your data where your \naudio file lives right now. And using this,  \nwe can start the transcription. So for the \ntranscription, let's again cheat by getting  \nthe code from the docs. Here is the data \nthe code that we need, starting from here.  \nSo this is a transcription endpoint, you can see \nthat it ends differently than the upload endpoint.  \nThis one ends with upload this one ends with \ntranscript, I will call this the transcript  \nendpoint. Heather's we already have a header, we \ndon't really need this anymore. The endpoint is  \ntranscript endpoint. JSON is the data that we are \nsending to or the data that we want somebody AI to  \ntranscribe. So we are going to need to give it the \norder URL, we already have the order URL, right.  \nSo we got the response. But we did not extract it \nfrom the response. So let's do that. Oh, do URL  \nis response, JSON. And it was cold, upload girl.  \nSo we're going to give us audio euro to hear \nbecause that was just an example. Okay. And this  \nway, we will have started the transcription. \nAnd let's do this and see what the result is.  \nI will run this again. Same thing.  \nAlright, so we got a much longer response. \nIn this response, what we have, we have a  \nbunch of information about the transcription \nthat we've just started. So you do not get the  \ntranscript itself immediately. Because \ndepending on the length of your audio,  \nit might take a minute or two, right? So what \nwe get instead is the ID of this transcription  \njob. So by using this ID, from now on, we can \nask somebody AI Hey, here is the ID of my job,  \nthis transcription job that I submitted to \nyou, is it ready or not. And if it's not ready,  \nit will tell you it's not ready yet. It's still \nprocessing. If it's ready, it will tell you hey,  \nit's completed. And here is your transcript. So \nthat's why the next thing that we want to build  \nis the polling we're going to keep we're going to \nwrite the code that will keep polling assembly AI  \nto tell us if the transcription is ready or \nnot. But before we go further, let me first  \nclean up this code a little bit so that you know \neverything is nicely packed in functions, we can  \nuse them pre use them again if we need \nto. So this one is the upload function.  \nYes, and what it needs to return is the audio \nURL. We do not need to print the response anymore.  \nWe've already seen what it looks like. And we \nneed to put the header separately because we want  \nboth upload and transcribe and basically \neverything else will be able to reach  \nthis variable called Heather's for transcription \nagain, I will create a function called transcribe  \nand what I need to return from the transcription \nfunction is the ID. So I will just say job ID  \nand that would be response dot JSON and ad again \ndon't need this anymore. I'll just call this  \ntranscript response to make it clear this will \nbe upload response. Let's call this transcript  \nrequest. So everything is nice and clean. This is \nthis and this goes here. And for upload response,  \nwe use it here. And we need to return job ID. \nAlright, so now we have them nicely wrapped up  \nin different functions, and everything else looks \ngood. Let's run this again to see that it works.  \nNow, of course, I'm not calling the function. \nSo let me call the functions and then run it,  \nupload and transcribe. But of course, I also need \nto pass the file name to the upload function. So  \nlet's do that too. Do your URL is not defined, or \nthe URL of course, then I also need to pass audio  \nURL, audio URL to transcribe Good thing we tried. \nSo this will be returned from the upload function,  \nand then we will pass it to the transcript \nfunction. And as a result, we will get job ID.  \nAnd then I can print job ID to see \nthat it worked. Let's see. Yeah,  \nyes, I do get a job ID. So \nokay, things are working.  \nThe next thing that we want to do is \nto set up the fault polling function.  \nSo the first thing we need to do for \nthat is to create a polling endpoint  \npolling endpoint. So as you know, we had the \ntranscript endpoint and the upload endpoint here.  \nThat's how we communicate with somebody as API \nwith polling endpoint is going to be specific to  \nthe transcription job that you just submitted. So \nto create that, all you need to do is to combine  \ntranscript endpoint with a slash in between, and \nadd the job ID but the job ID is a bit weak. So  \nI'll just going to call this transcript ID. So \nby doing that, now, you have a URL that you can  \nask to assembly AI with which you can ask assembly \nAI if your job is done already or not. And again,  \nwe're going to send a request to assembly AI, \nthis time is going to be a get request. Well,  \nI'll just copy this so that it's easy. Instead of \npost is going to be a get request, we're going to  \nuse a polling endpoint instead of the transcript \nendpoint. And we just need the Heather's for  \nthis we do not because we are not sending any \ninformation to assembly AI. We're just asking for  \ninformation. If you're familiar with requests, \nnormally, this might be very simple for you.  \nBut all you need to know about this is that when \nyou're sending data to an API, you use the post  \nrequest type. And if you're only getting some \ninformation, as the name suggests, you use the  \nget request type. So the results resulting or \nthe response that we get is going to be called  \npolling response. Let's see it's not job ID, \nI called transcript ID so that it works. Then  \nwe get the polling response. And I can also \nshow you what the polling response looks like.  \nLooks good. Okay, let's run this. Alright, \nso we got response 200. That means things  \nare going well, but actually, what I need \nis a JSON response. So let's see that again.  \nYes, this is more like it. So again, we get the \nidea of the response language model that is being  \nused and some other bunch of information. But what \nwe need here is the status. So let's see where  \nthat is. Oh, yeah, there it is. So we have status \nprocessing. This means that the transcription is  \nstill being is still being prepared, so we need to \nwait a little bit more and we need to ask assembly  \nAI again soon to see if the transcription is done \nor not. What we normally do is to wait 30 seconds  \nor maybe 60 seconds depending on the length of \nyour transcription with length of your audio file.  \nAnd then when it's done, it will give us status \ncompleted. So let's write the bits where we ask  \nassembly AI repetitively if the transcription \nis done or not. So for that, we can just  \ncreate a very simple while loop \nwhile true. We do the polling  \nand if poling response dot JSON status equals to \ncomplete it. We return the polling response. But  \nif polling response, status is error, because \nit is possible that it might air out, then we  \nwill return. There. I'll just wrap this into \na function, I can call this gets transcription  \nresults URL. And while we're at it, we might \nas well so wrap the polling into a function,  \ndo we need to pass anything to \nit? Yes, the transcript A D,  \nneed to pass a transcript ID to it. And instead \nof printing the response, we will just return the  \nresponse. So instead of doing the request here, \nall we would need to do is to call this function  \nwith the transcript ID, we can pass the \ntranscript ID here or might as well I  \nwill just call the transcription \nor transcribe function in here.  \nAnd the resulting thing would be the transcript \nID from the transcription function. And then I'm  \ngoing to pass this transcript ID to the polling \nfunction that is going to return to me the polling  \nresponse. I will call this polling response \ndata. And inside this data, so this is not needed  \nanymore. Yeah, so the polling response that JSON \nis what is being passed, I call that the data.  \nSo I change this to data here. And also data \nhere. Yeah, then I'll just pass the data.  \nIf it's error, I can still pass the data \njust to see the response and what kind of  \nwhat kind of error that we got and hear \nthem and just just say none. All right,  \nlet's let's do a little cleanup. So we have a \nnice upload function, a transcript function,  \nwhat we did before was we were calling the upload \nfunction, getting the audio URL and then passing  \nit to transcribe, but I'm running transcribe here. \nSo I do not need this anymore. I still need to  \npass the order, you're all to transcribe. So then \nI would need to pass it to here. So instead of  \nthis, just need to call this function with \nthe audio y'all. Yeah, let's put these here.  \nActually, to make it a bit more understandable, \nmaybe instead of passing the string error,  \nI can just pass whatever error \nthat was that happened in my  \ntranscription, then you know, we'll \nbe able to see what went wrong.  \nAlright, so what we get as a result from get \ntranscription result ID is the data. And if  \nthere is any error, so then let's Why not run \nthis and see what the data is going to look like.  \nAll right, so we get something \nreally, really big. Let's see,  \nmaybe I'll just clear this and run it again, just \nso that you know, we can see it more clearly.  \nAlright, so we get the ID, again, language \nmodel that is being used, etc. Now we want  \nthe results. Yes, it is under Text. Hi, I'm \nPatrick. This is a test 123 is what we get.  \nAnd we also get the breakdown of words, when each \nword started meant each word ended in milliseconds  \nconfidence of this classification, and much \nmore information. What we want to do though,  \neven though we have all this information, \nwe want to write this transcript that is  \ngenerated by assembly AI into a text file. So in \nthis next step, that's what we're going to do.  \nAlright, let's come up with a file name for \nthis file. We can call it actually we can  \njust call it the same thing as a file name plus \ntxt. So the file name okay, we were using the  \nargument or variable file name too. \nSo maybe let's find something else.  \nWe'll just call this txt file name. And it will \nbe the file name plus dot txt. We can also just  \nyou know remove the dot valve or dot mp4 or \nwhatever but let's not deal with that for now.  \nSo once I have this I will just open it  \nI will open it in Writing format. \nAnd inside I will write data.  \nTexts because that's where we have the text \ninformation on the transcript. If you remember  \nhere, this was a response we got \nand text includes the transcription.  \nAnd I can just prompt the user saying that \ntranscription is saved, transcriptions saved,  \nare happy. Of course, there is a possibility \nthat our transcription errors out. So you want  \nto cover that too. If you remember, we returned \ndata and error, what we can do is you can say if  \ndata is returned, this happens. But if it \nerrored out, I will just print error. No,  \nit didn't work out and the error itself so that \nwe see you know what went wrong. Okay, let's do  \na little cleanup. Again, I want to wrap this all \nup in a function, we can call the Save transcript.  \nData and error will be returned from get \ntranscripts URL, it means the audio URL, so I will  \njust need to pass over your URL here. And with \nthat, we're actually more or less ready. So let's  \nrun this and see if we get what we need the \ntranscript saved in a file. For that after  \nthe after calling the upload function, I can move \nthis one here and calling the upload function here  \ncalled the upload function. And then \nI call the Save transcript function.  \nAnd let's quickly follow that up. I call this a \ntranscript function. It calls get transcription  \nresult URL, get transcription result, URL \ncalls, transcribe, transcribe is here.  \nIt starts with transcription process and then \nget transcription result URL also calls polling.  \nSo it keeps pulling assembly AI. And when it's \ndone, it returns something and then we deal  \nwith it in the Save transcript function, and we \neither save a transcript or if there is an error,  \nwe display the error. So let's run \nthis and see if we get any errors.  \nTranscription saved. Alright, let's see. \nOutput was that txt. If I open it up,  \nit looks quite small. Maybe I \ncan, if I open it like this.  \nYes. Hi, I'm Patrick. This is a test 123 is the \nresult that we're getting. So that's awesome, we  \nactually achieved what we wanted to do. So in this \nnext couple of minutes, I actually want to clean  \nup the code once again, because you're going to \nbuild a couple more projects. And we want to have  \na python file that has some reusable code, so we \ndon't have to reinvent the wheel all the time. So  \nlet me first go here, actually, when we're doing \nthe polling, if we just have a while true loop,  \nit's going to keep asking assembly AI for results. \nAnd you know that that might be unnecessary. So  \nwhat we can do is to include some waiting times in \nbetween, so it can ask if it's not completed yet.  \nIt Can Wait, let's say 30 seconds to ask again. \nSo we can inform the user waiting 30 seconds.  \nWhat I need is a time module. So let's \nclose 30. And I will just import time here.  \nAnd this way, it should be waiting \n30 seconds in between asking assembly  \nAI if the transcript is ready or not. \nAnd okay, let's create that extra file  \nthat we have API communication, I'll call it. \nYes. So I will move all of the functions that  \ncommunicate with the API there. So \nI need to move the upload function.  \nI need to move transcribe \npoll all of these actually.  \nSo just remember that Yeah. Let's \nsee. Did we miss anything though,  \nI'll just remove these from here. File Name \ncan stay here, of course, headers and the  \nupload and transcript endpoints need to live \nhere because they are needed by the functions.  \nIn here, we have to import the requests library. \nSo we don't need it anymore here. We need to  \nimport the assembly AI API key. system \nneeds to stay here time needs to go there.  \nAnd we also need to import from API communication. \nImport, we'll just say all. And that way we can  \nuse these functions in our main python script. \nI will run this again to make sure that it is  \nstill working. So I will delete the text file \nthat was created, I will keep the output.  \nNice. So we also get the prompt that the program \nis waiting 30 seconds before asking again.  \nOh, yeah, we passed the filename. But of course, \nit might not exist there. So let's go and fix that  \nthe file name is here, we only pass it to the \nupload function and the upload function is here  \nnow. And in the Save transcript, we do not pass \nit, but we're actually using it. So what we can  \ndo is to just also pass the file name here. And \nthat should be fine. It should fix the problem.  \nTranscription saves. Alright, let's see output \none. txt Hi. Oh, like this. Hi, I'm Patrick.  \nThis is a test 123. So this is a very short audio \nfile. And we actually been using it over and over  \nagain. So I want to also show that this code \nis working to you using another audio file.  \nThis is the audio of the one of the latest \nshort videos that I made for our YouTube  \nchannel. I was just talking about \nwhat natural language processing is.  \nSo this time, maybe if I add \nunderscores, it will be easier  \nto call. Yes, I will just copy its name. And \nwhen I'm calling the script, I will use its name.  \nThis will probably take a little bit longer \nbecause the audio file has been using is only a  \ncouple of seconds. And this one is one minute. So \nwe will see what the results are going to show us.  \nRight here we go the transcription is saved \nwe find here. Right, this is exactly what I  \nwas talking about. Let's listen to it while the \ntranscription is open. Kind of like severe, Best  \nFunny. Well, not now. But probably very soon. We \nhaven't seen gigantic leaps over the last couple  \nof years in terms of how computers can understand \nand use natural language. Alright, you get the  \nidea. So our code works. This is amazing. I hope \nyou've been able to follow along. If you want to  \nhave the code. Don't forget that you can go get \nit and the GitHub repository we prepared for you  \nusing the link in the description. Welcome back to \nthe third project. So in this one, I teach you how  \nto apply sentiment analysis to YouTube videos. So \nyou will learn how to use the YouTube DL package  \nto automatically download YouTube videos are only \nextract the information you need. And then I also  \nteach you how to apply sentiment analysis. So \nin this example, I use iPhone 30 review videos.  \nAnd the result that we get looks like this. So for \neach sentence in the video, we get the text. And  \nthen we also get the sentiment. So this could be \npositive or negative or neutral. For example, if  \nwe read this text here, the new iPhone display is \nbrighter than before the battery life is longer,  \nand so on, and the sentiment is positive. And \nhere the text is still there are some flaws,  \nand now the sentiment is negative. So this works \npretty well. And this can be applied to so many  \nuse cases. So let's get started and see how to do \nthis. So here I've created a new project folder.  \nAnd we already have our API secrets and the API \npy file with the helper functions to work with  \nthe assembly API API. And now let's create two \nmore files. So the main.py file that will combine  \neverything and the YouTube extractor files, this \nis another helper file to extract the infos from  \nthe YouTube video. And for this, we are going to \nuse the YouTube DL package. This is a very popular  \ncommand line program to download videos from \nYouTube and other sites. And we can use this as  \ncommand line program. But we can also use this in \nPython. So for this we say pip install YouTube DL,  \nand then we can import this so we say import \nYouTube DL. And then we set up an instance so  \nwe say why the L equals YouTube DL dot YouTube DL. \nAnd now I'm going to show you how you can download  \na video file and also how you can extract the \ninfos from a video. So let's create a helper  \nfunction that I call get video infos and this \ntakes and URL And now we use the YT l object  \nas a context manager. So we say with y the L, \nthen we say we're CELT equals y, the L dot,  \nextract info. And this gets the URL. And \nby default, it has download equals true.  \nSo this would also download the file. But \nin my case, I say download equals false,  \nbecause of course, we could download the file \nand then upload it to assembly AI. But we can  \nactually skip this step and just extract the \nURL of the hosted file. And then we can pass  \nthis to the transcribe endpoint in assembly AI. \nSo we can set download equals false here, then  \nwe do one more check. So we say if entries, if the \nentries key is in the result, then this means we  \nhave a playlist URL here. And then we want to \nreturn only the first video of this playlist.  \nSo we say return results with the key entries, and \nthen the result zero or entry zero. And otherwise,  \nwe return the results simply so this is the whole \nvideo info object. And then let's create another  \nhelper file that I call get all your URL, and \nthis gets the video infos. And first of all,  \nlet's simply print all the video infos to see how \nthis looks like. So now let's say if underscore  \nname equals equals main. And then let's first \nextract the video info. So video info equals get  \nvideo infos this needs in your L. And then we \nsay all your your L equals get all your your URL,  \nand then we want to print the audio URL. So right \nnow this is none because we don't return anything.  \nSo let's get an example URL. So for this, I \nwent to YouTube and search for iPhone 13 review,  \nand I choose this video. So I've entered into \nreview pros and cons. So we can click on this.  \nAnd then we have to watch an ad. But we \ncan actually copy this URL right away,  \nand then put it in here as a string. And \nnow if we run this, then so we run Python,  \nYouTube extractor dot time, then it should print \nthe whole URL. So yeah, actually, here, I have to  \npass this YouTube Info. And let's try this again. \nAnd yeah, so here, it extracted the whole or it  \nprinted the whole info. So this is actually a \nvery long object, a very long dictionary. So  \nI can tell you that this has a key in it, that is \ncalled formats. So let's actually print only the  \nformats. And if we run this, then this is also \nstill a very large, very large dictionary.  \nBut then again, this is an inner dictionary, \nand this has a key that is called. Or actually  \nthis is a list. So now we can iterate over this. \nSo here we say, for F in video in four formats.  \nAnd then we can print the F let's print F \ndot, and it has the key ext for extension.  \nAnd it also has a your L so we also want to \nprint F dot u r l and now if we run this down,  \nlet's see what happens. Um, let's actually \ncomment out the URL because this is super long. So  \nlet's print only the extension. And now we see \nwe have a lot of different extensions because it  \nactually start the video in a lot of different \nformats and with a lot of different resolutions  \nand so on. So, what we want is this one, so the \nM for a this is a audio format ending. So we now  \ncheck if the format or if the extension \nequals equals m for a, then we return the  \nF URL key. So this is the audio, \nyour L. And if we save this,  \nand then print this at the very end, then we \nshould get the URL to this host that file.  \nSo you can see this is at this URL. So this is not \nrelated to youtube.com. So now let's, for example,  \nclick on this. And then we have this in our \nbrowser, so we could listen to the audio file.  \nSo yeah, this is the first part how to work with \nthe YouTube DL package to extract the infos.  \nAnd now let's combine this in the main.py. So in \nmain.py, we combine the YouTube extractor infos,  \nwith assembly AI and extract the transcript of \nthe video and also the sentiment classification  \nresults. So sentiment classification is usually \na pretty difficult task. But assembly AI makes  \nit super simple to apply this. So if we go to \nthe website, assembly itad, calm and have a look  \nat the features, then we see they provide core \ntranscription. So this is basically the speech  \nrecognition we've seen in the last part. But \nthey also offer audio intelligence features,  \nand they are pretty cool. So there are a lot \nof features you can use, for example, detect  \nimportant phrases and words, topic detection, \nauto chapters, so auto summaries and much more.  \nAnd if we scroll down, and here we find sentiment \nanalysis. So if we click on this, then we see a  \nshort description. So with sentiment analysis, \nassembly, AI can detect the sentiment of each  \nsentence of speech spoken in your audio files. \nSentiment Analysis returns a result of positive,  \nnegative or neutral for each sentence in \nthe transcript. So this is exactly what we  \nneed here. And it's actually super simple to \nuse this. So the only thing we have to change  \nis when we call the transcript endpoint, we also \nhave to send sentiment analysis equals true as  \nJSON data. So this is all we need to do. \nSo let's go to our code and implement this.  \nSo let's import all the files we need. So we want \nchasen and we say from YouTube extractor we import  \nget all your your URL and get video infos. \nAnd from our API helper file, we import save  \ntranscripts. Then here, I create one helper \nfunction that I call Safe video sentiments. And  \nthis gets the URL. And here we get the video in \nforce by calling Get Video enforce with the URL,  \nthen we get the odd your your URL by calling \nget all your your URL and this gets the video  \ninfos. And then I simply call the safe transcript \nfunction and this gets the audio URL, and it also  \ngets a title. And for the title I want to use \nthe title of the video so we can get this from  \nthe video info. So this has a key that is called \ntitle. And then I want to slightly modify this so  \nI say title equals title dot strip. So I want \nto remove all leading and trailing whitespace.  \nAnd then I want to replace all spaces with a \nunderscore and then I also say title equals data  \nslash plus title. So I want to store this in \na separate folder. So here we create this and  \ncall this data and now we have to modify the \nslightly so if we have a look back, then we see  \nthis needs the additional arguments \nsentiment analysis. And now so in the  \nsafe transcript file, I will put this as \nadditional argument and I will give this a default  \nof false and then here we say sentiment analysis \nequals true and now we have to pass this through.  \nSo we have to pass this to the get transcription \nresult your l so this also needs this parameter,  \nthen the transcribe needs the parameter. And here \nthis needs the parameter. And now as a JSON data  \nthat we sent, we put sentiment analysis equals \ntrue or false. And this is all that we need. And  \nnow of course, I also want to save this. \nSo here we check if the parameter is true,  \nthen I create a separate file. So again, I say \nFile Name equals title plus, and then let's call  \nthis underscore center, man's dot JSON. And now I \nsay with, with open the file name in write mode,  \ns, f, and then I import JSON in the top import \nJSON. And then here, we simply say JSON dot dump.  \nAnd first we have to extract the infos, of course, \nso we call this sentiments equals data. And then  \nthe key. If we have a look at the documentation, \nthen here we see the chase and response now has  \nthis additional key sentiment analysis results. So \nwe use this and then we dump the sentiments into  \nthe file. And I also want to say indent equals \nfour, to make this a little bit more readable. And  \nnow in the main.py, we call this function and see \nif underscore name equals equals underscore main.  \nAnd then I want to call the safe video sentiments. \nAnd the URL is this one. So let's copy and paste  \nthis in here. And now let's run the main \nthe py file and hope that everything works.  \nSo the website is downloaded and transcripts from \nstart. So this looks good. So let's wait. Alright,  \nso this was successful, and the transcript was \nsaved. And now we have a look at the data folder,  \nthen here, we get the transcript of the video. And \nwe also see our JSON file with all the sentiments.  \nSo for each sentiment, we get the text of \nthe sentence. So for example, this one,  \nwith the exception of a smaller notch, the \niPhone 13 Doesn't seem very new at first glance,  \nbut when you start using this flagship, you \nstart to appreciate a bunch of welcome upgrades,  \nthen we get the start and end time, then \nwe get the sentiment which is positive.  \nAnd we also get the confidence, which is pretty \nhigh. Then the next example, the new iPhone  \ndisplay is brighter than before the battery life \nis longer, and Apple has improved, blah, blah,  \nblah. So here also the sentiment is positive, \nthen we have still there are some flaws here.  \nAnd now the sentiment is negative. So this works \npretty well. And yeah, this is how you can apply  \nsentiment analysis with assembly API. Now I want \nto show you a little bit more code how we could  \nanalyze this, for example. So now we can comment \nthis out. So we don't need to download this again.  \nThen we can read our JSON file. And here we \nstore the positives, negatives and neutrals.  \nSo we iterate over the data. And then \nwe extract the text, so the text,  \nand we also extract the sentiment, so then we \ncheck if this was positive, negative or neutral,  \nand appended to the corresponding list, then we \ncan calculate the length of each list. And then  \nwe can print the number of positives, negatives \nand neutrals. And we can also for example,  \ncalculate the positive ratio. So here, we ignore \nthe neutrals and simply do the number of positives  \ndivided by the number of positives plus the number \nof negatives. And now if we save this and run this  \nagain, then here we get the number of \npositives. So 38, only four negatives  \nover all positive ratio is 90%. So with this, \nyou can get a pretty quick overview of a review,  \nfor example. And yeah, I think the sentiment \nclassification feature can be applied to so  \nmany different use cases. It's so cool. So yeah, \nI hope you really enjoyed this project. And now  \nwhat would be really cool is if we could display \nthese information in a nice looking web app,  \nand this is actually one thing that you will \nlearn in the next tutorial together with Misra  \nso let's move on to the next project. All right \nNow it's time to build a podcast summarization  \napp. And we're also going to build a web \ninterface for this application. In this project,  \nwe are again going to use assembly API's API that \noffers the chapter isation summarization features,  \nand we are going to get the podcast from the \nListen notes API. So let's get into it. Here's  \nwhat our app is going to look like once we are \ndone with it. So we will get a episode ID from  \nlisten notes API, I will show you how to do that. \nAnd when we click this button, it will give us  \nfirst the title of the podcast and an image, the \nname of the episode. And then we will be able to  \nsee different chapters and when they start in \nthis episode, and if we click these expanders,  \nwe will be able to read a summary of the chapter \nof this episode. This is all quite exciting to  \nstart building a front end for our application to \nso let's start building it. So in this project,  \nlike in the previous ones, we are going to have a \nmain script. And we are going to have a supporting  \nScript API communication, where we have all \nof our supporting functions that we want to  \nuse over and over again, we built this before. So \nthis is the exact same one from the third project  \nthe project that we did before. And we will only \nneed to update this and change some things to  \nstart doing podcast summarization. So the first \nthing that I want to update here is that we will  \nnot actually need the upload endpoint anymore. So \nI'm just going to go ahead and delete that one,  \nbecause the transcripts are going to be sorry, \nthe podcasts are going to be received from the  \nListen notes API. So it's going to be somewhere \non the internet, we will not download them to  \nour own computer. So we can immediately tell \nassembly AI hey, here's the audio file here is the  \naddress of the audio file that I want you \nto transcribe. And it will be able to do  \nthat. So there will be no download or upload \nneeded. That's why I also don't need the upload  \nfunction. Also the chunk size not relevant \nanymore. All right. So that's good for now.  \nAnd the next thing that we want to do is to set \nup the Listen notes API communication. So we are  \ngoing to use assembly AI to create the summaries \nof the podcasts. And we will get these podcasts  \nfrom listen notes. If you've never heard of it \nbefore. Listen, nose is basically a database of  \npodcasts, I think nearly all of the podcasts so \nyou can search for any podcasts. For example,  \none of my favorites is 99% invisible, \nand you will be able to get all of its  \ninformation plus the episodes so you can search \nfor episodes here if you'd like to. What we're  \ngoing to do with listeners is that we are going to \nsend it a episode Id like specific episode ID that  \nwe will find on the platform itself. So let's say \nI want to get the latest episode of 99% invisible.  \nIf I go to the episode page, and go \ndown to use API to fetch this episode,  \nI will see a ID. So this is the ID of the specific \nID of this episode. And using this ID, I will be  \nable to get this episode and send it to assembly \nAI. And this is exactly the ID that we need  \non our application. So to get that first, of \ncourse, we need the Listen notes endpoints. Listen  \nnode has a bunch of different endpoints. But \nthe one that we need is the episode endpoint to  \nget the episode information. So I will just name \nthis listen notes, episode, and point and it is  \nthis one. And of course, we also need the header \nagain to authenticate ourselves and in the header,  \nwe're going to need to put a API key so \nall you have to do is go to listen nose,  \ncreate an account and get an API key for yourself. \nAnd we are going to go and paste it here.  \nAnd here as you know, we are importing the API \nkey for assembly yeah, now I'm also going to  \nimport the API key for listen notes and we are \ngoing to send it with our requests to listen  \nnotes. So I will call this the Listen notes. \nHeather's and this the assembly AI Heather's  \nfor listen knows this is named \nx listen API key. Alright,  \nthe first thing that I want to do is to build a \nnew function that is able to get the episode ID  \nand give us the URL to the podcast is audio file. \nSo I will call this one get episode, audio, Euro.  \nAnd it is going to get an episode ID and we're \ngoing to send a GET request to listen notes.  \nLet's build a URL first. The URL is going to \nconsist of the Listen notes episode endpoint. and  \ndash plus the episode ID. And we \nare going to send a GET request  \nto zero, I will call the response we get is \nresponse for now. And the last thing that we need,  \nof course, is the headers for authentication. \nAnd that one is called listen notes headers.  \nSo as ever do this, we should be able to get \na URL for the episode ID. And the information  \nis going to be sent to us in a JSON format. So \nthis way, we will be able to see it. So maybe,  \nlet's try this at first and see that it works. \nSo to do that, I am just going to again, import  \nfrom API communications, import everything, I'll \njust make this a simple Python script for now.  \nAnd I'm going to call get episode audio Euro. \nAnd I will use the episode ID that I found here.  \nThis one to keep things simple. \nAnd as a result, we will  \nprint the response that we get from listen \nnotes. So let's run this and see what happens.  \nAll right, this is really long. So \nmaybe I'll be I will use a pretty print  \nto make it more readable. So this print here. \nAnd instead of this, just use pretty print.  \nOkay, let's do it again.  \nAll right, that is slightly better. Let's see \nwhat kind of information we are working with.  \nNice, we get the audio URL here. This is the \nURL of the audio. Let's see where that takes us.  \nYeah, this is just the audio of \nthis podcast, you can hear it  \nAerocity that the Roman advance was halted. Nice. \nAlright, so this is exactly what we need. But if  \nyou want, you can also get some extra information \nabout the podcast. If you want to display it  \nin some way, we will definitely use the plus \nblade. And this is a description of the episode,  \nwhether there is explicit content or not the image \nof this episode, and some extra information about  \nthe podcast like Facebook and Google handle, etc. \nSo you get a lot of information. So if you want  \nto make your web application at your \ninterface even more interesting,  \nmore interactive, you can of course include more \nof this in your application. So if we just return  \ndata audio from here, we will actually \njust return to order here all but you know,  \nnow that we have all this information \nmight as well extract some more of it.  \nSo some of the things that we can get as a \nthumbnail of this episode, name of the podcast  \nand title of this episode for example, like \nwe said, we will display here so let's do that  \nthis will be the audio Euro we \nwill also get the episode thumbnail  \nthumbnail  \nwe can get the podcast title that would \nbe in podcasts. And then this podcast  \nspecific information and then we get \nthe title. And lastly episode title.  \nthing it is just title. And we can just \npass all of this information back episode,  \nthumbnail episode, title, and podcast title. \nSo we don't really need to change much from  \nthe rest of the functions for example, transcribe \npoll get transcription results that we already  \nbuilt beforehand. The only thing that we need \nto change is now we're not going to do sentiment  \nanalysis we want to do use auto chapters features \nof assembly AI. So I'm just going to rename these  \nto all the chapters. This is just the name of a \nvariable so it is not that important. You can keep  \nit the same. But for readability it's probably \nbetter to change it to other chapters but here  \nin this variable we need to change this name \nto other chapters because we're sending this  \nrequest to assembly AI and it needs to know \nthat we want other chapters what else we also  \njust updated the name of the heather so it's not \nonly Heather's now it's assembly AI Heather's  \nsame here in the polling. We do not need to change \nanything we are only asking you if a transcription  \nis done or not, again, get transcription \nresult URL we want to change it to or chapters.  \nOne other thing that I want to change is it's \nvery small. But normally we were waiting for  \n30 seconds. But now I want to wait for 60 seconds \nbecause podcast episodes tend to be a little bit  \nlonger. So we want to wait a little bit longer in \nbetween asking assembly AI if the transcription is  \nready or not. This is another change. But the main \nwork is going to happen in the Save transcript  \nfunction. So the main change we're going to need \nto do in save transcript function is that before  \nwe were uploading our audio to assembly AI, and \nthen we were getting the result back, but instead  \nthis time, we are going to only have a episode \nID and then we are going to get the URL from  \nlisten notes. And then we're going to pass that to \nassembly AI to start your transcription. So what  \nI want to do here is to instead of URL and title, \nI will just give say transcript, the episode ID.  \nAnd then I will run the get episode audio URL \nfrom oops, from inside the Save transcript.  \nAnd as a result, what we're getting is \norder your roll episode thumbnail episode  \ntitle and podcast title. Again, we are not doing \nsentiment analysis, we are doing order chapters.  \nAnd we need to pass the order y'all to get \ntranscription results URL, get transcription  \nresult URL gets the order your URL as URL and \nall the chapters but it is not defined. So  \nyou know this is what we want to \ndo is hoses coal, it is true here.  \nThe next thing that we want to do is to deal with \nthe response that we get from Assembly AI. So  \nlet's first see what the response from Assembly \nAI looks like when we were doing auto chapters.  \nAnd then let's deal with it. But \nlet's fix some of the problems here.  \nSo I will not save it into a file for now. I can \ncomment these out. This will be order chapters.  \nThe main thing that I want to do is see what the \nresult looks like. Right? So I will pretty print  \nthe data. And the data is already in \nJSON format. Transcribe Yes, it is.  \nYeah, so I will just show that. So I'm \njust going to comment these out for now,  \njust so that you know, we have an idea of what \nwhat the response looks like. To run this,  \nI will just pass the episode \nID to save transcript.  \nOh, we're still printing this one. \nSo I will actually stop printing the  \nresponse from listen notes on what started again.  \nAlright, so we got the results. \nLet's see what it looks like.  \nIt's a lot of information. Let's scroll to the \ntop. And what we wanted was a chapter is basically  \nso let's see what the chapter information \nincludes. So as you can see, this is one chapter.  \nAnd this is another chapter. So for each chapter, \nwe have the starting point. And then we have the  \nending point, the gist of the chapter. So \nreally quickly, what is this chapter about?  \nWe have a headline for this chapter and a \nsummary. So in a couple of sentences, what  \nis happening in this chapter, what what is the \npresenter talking about? What we want to do is to  \nshow this information on our application right \non our web interface. So that's why what we want  \nright now is to extract this information \nfrom the response we get from Assembly AI  \nand then save it somewhere and then we can \nvisualize it on our stream that application.  \nSo I will undo the commenting here. Also here.  \nSo I will call this file with the episode ID it \nwill be episode ID that t x t. And as we always  \ndo, I'm just going to say the transcript you know, \nwe don't have to touch this so much, but I will  \nstart another file. And let's call this chapters \nfile name and This one will be episode, id  \nplus, maybe let's call like chapters, \nthat. txt. All right, so chapters  \nwill be another file. So I'm going to keep all the \nchapter information somewhere else. And in here,  \nI'm going to write some of the information I \ngot from Assembly AI, specifically the chapter  \ninformation. And I'm also going to include some of \nthe information I got from the lesson notes API.  \nOne mistake here, I do not want it to be \na text file, I want it to be a JSON file,  \nso that it will be easier to parse easier to read \nlater. For me, the first thing that I want is the  \nchapters. And I'm going to get that from the data \nvariable. It's called chapter so let's check.  \nThe section is called chapters. Yeah. So \nlet's start it out. We'll say episode data.  \nAt first, let's include the chapters \nagain, I will call the chapters.  \nAnd then inside this episode data, what \ndo I want, I want the episode thumbnail.  \nI want the episode title. \nAnd I want the podcast title.  \nSo that I have all of this information in one \nplace saved on my file system, I can just read  \nit whenever I want and display to the user. \nAnd finally dump that to the file sewed data.  \nAnd I'll let the user know that the transcript \nis saved. This part we don't need any more.  \nAnd again, if there is an error, we will just say \nthat there is an error. And we will return true.  \nNow that we got this far already, up till \nnow what we do is get the URL from based  \non the episode ID from listen notes, and \nthen send it to this URL to some of the AI  \ngets audio chapters information, and then save \nit to a file. So let's see that this works well.  \nAnd while it's running, we will start the stream \nwith application. So I will just run this again.  \nBut in the main view, of course need to call \nsave transcript. Okay, we're open to doing it. So  \nI will just run the application. And let's also \nstart building our assumed application now. So  \nif you've never heard of streamlet before, it is a \nreally easy way to start building web interfaces.  \nFor your application specifically for Python, it's \nvery simple to use it is has a very simple API,  \nit's a very simple library. So what you have to do \nis you call your import streamlet as a see if you  \nwanted to use it simply. And let's say if you want \nto, you know put a title in your application, all  \nyou need to do is SD title and then you can show \nthat it as a title. So I will run this separately.  \nTo show you how it works.  \nAnd to run from it applications, you just need \nto say assume it run mean that a PI stream it  \nis installed on your computer like any other \nPython library, so you just need to use PIP  \nsay pip install a streamer then you will be \ngood to go. Unless you make a mistake and call  \nstream with a capital S which is not the case it \nneeds to be a lowercase s so let's do that again.  \nAlright, so this is actually an application it \nthe only thing we're showing right now is a title.  \nAnd we know what you want it to look like is \nthat so I will start building the elements  \nin this application. So the first thing that \nyou know strikes us is that we have a sidebar,  \nwe have a title that says podcast summaries and \nthen we start showing the information from the  \ninformation we got from the \nAPI's that we've been using. So  \nlet's put a sidebar maybe let's let's fix the \ntitle. First we want to say podcast summaries.  \ntitle says podcast summaries or \nit can even say welcome to our  \nto my application that creates podcast summaries. \nLet's see maybe that won't be too long but we'll  \nsee. And let's create the sidebar is quite \nsimple. You call streamlet sidebar dot texts  \ninput Yeah. And then you know you can \nsay please input Here's a, an episode ID.  \nAnd I can also have a button at the \nend of the sidebar that says, Get  \npodcast summary, maybe with a exclamation \npoint too. So let's run it again.  \nOkay, this is looking more like it, it says \nWelcome to my application that creates podcast  \nsummaries. I can put an episode ID here. \nAnd then I can say get podcast summary. So  \nyou see that it is running, it is running because \nI forgot to comment out this one. So it's actually  \nrunning the whole application. I'll just stop \nit for now, because we don't have any way of  \ndisplaying whatever we get back from the API's. \nSo I'll stop this now. And now that we have the  \napplication looking more or less like what we \nwant it to look like, let's wait for the chapter  \nresults to be printed on our file. And then we \nwill see what it looks like. And then we can start  \nparsing it and then showing it to the user on our \nstreaming application. Okay, so the transcription  \nis saved to our auto chapter creation is \ndone. Let's take a look at what it looks like.  \nWe have the chapter section, we have the episode \nthumbnail episode, title and podcast title.  \nOr good in the chapters we have chapter numbers. \nAnd inside each chapter, we have the summary  \nheadline just start and end. So it looks good. \nLet's start showing this. The first thing that  \nI want to show of course, like we did in the \nbeginning, like we showed in the beginning  \nis the name of the episode, or maybe the name \nof the podcast plus the name of the episode,  \nand then the episode a thumbnail. So how I'm \ngoing to show that is again using streamlet.  \nAnd that is going to be the header for \nme. And I will include the podcast title.  \nMaybe with a dash in between and the episode \ntitle. But as you can see, we do not have it yet.  \nSo first, we need to open the file that includes \nthese things. And the file that includes those  \nthings is the episode ID that underscore chapters \nat Jason. So started again, file name would be  \nepisode D underscore chapters, the JSON and where \ndo I get the episode ID, I get the episode ID from  \nthe text input. So the user is going to input the \nepisode ID and then I am going to save it here  \nin this variable. And that way I will have the \nfile name. So then I just need to open this file  \nand let's call it data. For example, \nI need to import JSON of course  \nand loaded into the variable data.  \nSo in this variable data, what do we have? We \nhave the chapter so first, let's get the chapters,  \ndata chapters. And then what we want to get is \nthe podcast title, and then the episode title.  \nLet's change the names episode title. And we \nalso want some nail. And what did we call the  \nthumbnail? We can see here, Episode thumbnail. \nAlright, so thumbnail. So we're already showing  \nthe podcast title and episode title streaming \nheader. And then we can show the image thumbnail  \nwith the streamlet image function. And from this \npoint on the next thing that we want to show  \nis the chapters of course, one thing we can do is \nfor example, we can use a for loop could say for  \nchap in chapters. You know, you \ncan just say stream it right  \nor just show the chap but that's one way of doing \nit. But you're going to have a lot of texts one  \nafter another. It's not really nice. What we want \nis like in the original one I showed you at the  \nbeginning, we want to expanders, so it's quite \neasy to create expanded restreaming again you  \njust say stream it expander and then you want your \nright what kind of information you want to be in  \nyour expander so as the title of the expander \nI will write here what I want in title and  \nwhatever I want inside the expander I'm I'm \ngoing to write inside. So I do not need to  \nuse a stream. Let's think again, because \nthis is going to be inside the expander.  \nAnd inside the expander, what I want is the \nsummary. So I think it was called summary.  \nLet's just check again here in our JSON file. In \nchapters, we have summary. It's called summary.  \nYes, so I want the summary to be in there. And as \na title of the expander, I want there to be the  \ngist of each chapter. So for each chapter is \ngoing to show me the expanders for each chapter,  \nthere will be expanders, and the title of the \nexpander will be the gist of this chapter. And  \ninside the expander, we're going to have the \nsummary of this chapter. So let's run this  \nand see how it looks. But let's do this. First, \nmake sure that everything works. So I have the  \ntitle. And then I asked for a episode ID from the \nuser, there is a button that starts this process.  \nAnd for that to happen, I'll just call \nthis button. So we this information, this  \nbutton variable has information of whether this \nbutton has been pressed or not. And I only want  \nthis part, this part to happen this visualization \nto display part to happen if the button has  \nbeen pressed. So I'm going to wrap this all in a \ncondition. So otherwise, it's not going to happen.  \nYes, but right now, if someone presses the button, \nnothing really happened. So we also need to add an  \naction to this button. And how we're going \nto do that is we're going to say on click,  \nif this button is clicked, what we want to happen \nis the same transcript file to be run. So I'm  \ngoing to call it here in the onclick argument. And \nwe also have arguments, right. And here is how you  \npass arguments to your function that you call \nfrom your button. This is a tupple. That's why  \nyou write the variable or the argument that you're \npassing to the function and the first one, and  \nthe second one is empty. Now, when the button is \nclicked, this one should run and we should be able  \nto see all the information on our application. \nSo let's run it again and see what happens.  \nYeah, we need to run the streamlined application \nthis time, streamline run main that py.  \nI'll close the old one. So we know \nthe difference and which one is which.  \nThis is just the example \nfrom the beginning. Alright.  \nSo we want to get a podcast, we want to \ndisplay it. I will get this one again.  \nLet's get the podcast summary. And here it is. \nWe have the title Welcome to my application that  \ncreates podcast summaries. Okay, maybe that's a \nbit too long, I will shorten it. The name of the  \npodcast name of the episode number of the episode \nalso the missing middle. And here are my chapters.  \nSo apparently there are 1234567 chapters assembly \nas API was able to find an E chapter we have the  \ngist of the chapter as the title of the expander. \nAnd the chapter summary here valon. One last thing  \nthat I want to add is a start and end point of the \njust the start point of the chapter here, because  \nI want to show like how long each chapter is \nmaybe. So let's do that. So for that I want to see  \nin this JSON file, how it looks. So The start \nlooks like this. So these numbers might look  \na bit random to you. But basically, they are \nmilliseconds. So I am wanting to turn it into  \nminutes and seconds. And if applicable \nhours, minutes and seconds. And there is  \nalready a function that can do that. Here it is, \nwe don't need to, you know, work on for a long  \ntime. Basically, you get the milliseconds and when \nyou get the milliseconds you can get the seconds  \nout of it, how many seconds there are, how \nmany minutes there are and how many hours  \nare so basically you're counting the hours and \neverything that is on top of the hour is mentioned  \nas a minute if it does not add up to an hour, and \neverything that does not add up to a minute is  \npointed out as seconds. And here is what we \nwill return so we'll say the start time is  \neither hours, minutes and seconds. And if there \nis no hours, we don't have to say zero something  \nsomething. So just show up minutes, and then \nseconds. And how I'm going to show it is within  \nthe expander title. And I can you know show it \nwith a dash in between. I'll say get clean time.  \nAnd in there what I want is chapter start. Let's \nsee what it was. Just just start Okay. All right.  \nLet's run it one more time and then see what our \napplication looks like. Awesome. Okay, this is our  \napplication on the sidebar. We can input a episode \nID that we get from listen notes we can say get  \npodcast summary. It will show a nice title tie A \nlot of podcasts title of the episode show was a  \nthumbnail of this episode. And for each chapter, \nwe showed the gist of the chapter kind of like a  \nheadline when this chapter started. And when you \nclick the expander, when you expand it, you get  \nthe summary of this chapter. So this is what we \nset out to do. When we achieve that, I hope you  \nwere able to follow along. Again, don't forget \nto go grab the code from the GitHub repository.  \nWelcome to the final project. In this one, you \nwill learn a bunch of new exciting technologies.  \nFirst of all, you will learn how to do \nreal time speech recognition in Python,  \nthen you will learn how to use the open AI \nAPI and build a virtual assistant or Chatbot.  \nAnd finally, you will learn a little bit about \nWebSockets and how to use async i o in Python.  \nSo I think this is going to be really fun. And \nfirst of all, let me show you the final projects.  \nAnd now when I run the code, I can start talking \nto my bot and ask questions. What's your name?  \nHow old are you? What's the best ice cream.  \nAnd you'll see this works. So I think this is \nsuper exciting. So now let's get started. Alright,  \nso here I have a new project folder. \nAnd again, we have our API secrets file,  \nand now a new main.py file. And the first \nthing we're going to do is set up real time  \nspeech recognition. And for this, we have a \ndetailed blog post on the assembly API block,  \nthis will walk you through the step by step. \nSo first of all, we need pi audio to do the  \nmicrophone recording. So this is the very same \nthing that we learned in part one, then we use  \nWebSockets. And then we use the assembly AI real \ntime speech recognition feature that works over  \nWebSockets. And then we create a function to \nsend the data from our microphone recording  \nand also a function to receive the data. And \nthen we can do whatever we want with this. So  \nbut in order to just copy and paste this, let's \nactually code this together. So let's get started  \nat one note here, in order to use the real time \nfeature, you need to upgrade your account, though.  \nSo yeah, but anyway, let's get started. So \nlet's import all the things we need. So we want  \npi audio again, then we need WebSockets. So we \nsay import WebSockets. And this is a third party  \nlibrary that I showed you in the beginning that \nmakes it easy to work with WebSockets. And this is  \nbuilt on top of async I O. So now we're going to \nbuild async code. Then we also import async i o we  \nalso import base 64. So we need to encode the data \nto a base 64 string before we send this, and then  \nwe import chasen to receive the chasen result. And \nthen we save from API secrets, we import our API  \nkey from Assembly API. And now the first thing we \nset up is set up our microphone recording. So for  \nthis, we use the exact same code that we learned \nin part one. So I simply copy and paste this part  \nfrom here. So let's copy and paste. So we set \nup our parameters, then our PI audio instance,  \nand then we create our stream. And now we need to \ndefine the URL for the WebSocket. And we can find  \nthis on the blog post homepage. So here, I can \ncopy and paste the URL. So the URL is WebSockets,  \nand then assembly ai.com. And then real time and \nthen the last part is also important. So here we  \nsay question mark sample rate equals 16,000. So \nthis is the same rates that we use here. So make  \nsure to align this with what you have. And now we \ncreate one function to send and receive the data.  \nAnd this is a async function. So we say async. \nDef, and we call the Send Receive. So this is  \nresponsible for both sending and receiving the \ndata. And now we connect to the web socket. And  \nwe do this with a async context manager. So again, \nwe see async and then with and then web sockets  \ndot connect, and now we specified the parameters \nu or L, then we say a we set a ping, time out, and  \nwe can set this to 20. For example, then we \nwant a ping interval and this should be five  \nand then we also need to send our authorization \ntoken. So the key or the A parameter for this is  \nextra headers. And this is a dictionary with the \nkey authorial session, and the value is our token.  \nAnd then we say, a sync with AES. And then we \ncan call this what we want. So I say underscore  \nW s for WebSocket, then first we wait \nto let this connect. So here we say,  \nawait async i o async, I O dot sleep 0.1. So be \ncareful here, we cannot use timeout sleep. So  \nwe are inside a async function. So we have to use \nthe async sleep function. And then we wait or we  \nwe tried to connect and wait for the result. \nSo we say, session underscore begins equals and  \nthen again, await underscore W s, and then this \nis called R E S, V for received, I guess. And  \nthen we can print the data and see how this looks. \nLet's also print sending messages. And now we need  \nto enter functions. So again, async functions. So \nwe say async, def sent. And for now, we simply say  \npass, and then we say async, def receive. And \nhere also we pass. And actually, these are both,  \nthese both will have a infinite to while true \nloop. So they will run infinitely and listen for  \nincoming data. So here, we say while true. \nAnd for now, let's just print sending. And  \nhere we also say while true. And here, we simply \npass, so I don't want to spoil our output. And  \nnow after this, we need to combine them in a async \ni o ways. So in order to do this, we say we call  \nthe gather function. So it's called async, I O dot \ngather. And now here we gather sense and receive.  \nAnd this will return two things. So the sent \nresults, and the receive results. So actually,  \nwe don't need this. But just in case, we have this \nhere. And now, after the finding this function,  \nof course, we also have to run the code. \nAnd we have to run this in an infinite loop.  \nAnd in order to do this, we call async, I O and \nthen dot run, and then our Send Receive function.  \nSo now, this should connect, and then should \nprint sending all the time. So let's run  \nthis and hope that this works. So yeah, it's \nalready connected and sending work. So you see,  \nthat's why I didn't put the receive in here \nas well. So we get a lot of outputs. And yeah,  \nI can't even scroll to the top anymore. But \nbasically, yeah, it should have printed this  \nonce. And then now this is working so far. So we \ncan continue implementing these two functions now.  \nSo now let's implement the send function first. \nAnd we wrap this in a try except block. And now  \nwe read the microphone input. So we say stream dot \nreads, and then we specify the frames per buffer.  \nAnd I also want to say exception on overflow \nequals false. So sometimes when the WebSocket  \nconnection is too slow, there might be an \noverflow, and then we have an exception,  \nbut I don't want this it should still work. And \nthen we need to convert this or encode it in base  \n64. So we say base 64 b 64, encode our data, and \nthen we decode it again in UTF. Eight. This is  \nwhat assembly AI expects. Then we need to convert \nit to a JSON object. So we say JSON dump s and  \nthen this is a dictionary with the key audio data. \nSo again, this is what assembly AI needs. And then  \nhere we put Can the data and then we send this and \nwe also have to await this so awaits W s sent the  \nJSON data, and then we have to catch a few \nerrors. So let's copy this from our blog post. So  \nthese ones, let's copy and paste this in here. So, \num, we accept a WebSockets exceptions connection,  \nclosed error, and we print the error, and we make \nsure it's have this code, and then we also break,  \nand then we catch every other error. So it's not \nbest practice to do it like this, but it's fine  \nfor this simple tutorial. And then we assert here \nand then after each wild, true iteration, we also  \nsleep again. And yeah, so now we can copy this \nwhole code and paste it into this. So the code  \nis very similar here. So we have the same try \nexcept, but now here, of course, we have to wait  \nfor the transcription result from Assembly AI. So \nwe say result, string equals, and then again, we  \nwait and then the w SRESV, then we can \nconvert this to a dictionary by saying  \nresults equals JSON dot load from a string. And \nhere the result string. And now this has a few.  \nSo this is a JSON object, or now in Python, \nit's a dictionary. So now we can check a few  \nkeys. So we can get the prompt or actually, now \nthis is the transcription of what we set. So we  \nsay prompt equals results. And then it tests the \nkey text. And it also has a key that is called  \nmessage type. So now we check if we have a \nprompt, and if the results and then the key  \nmessage underscore type. And now this should be \nfinal transcripts. And now what assembly is doing,  \nit will while we are talking, it will already \nstart sending the transcript. And once we finished  \nour sentence, it will do another pass and make \na few small corrections if necessary. And then  \nwe get the final transcript. So we want only the \nfinal transcripts. And now for now, let's print  \nme and then let's print the prompt. And now we \nwant to use our Chatbot. So now let's print bots.  \nAnd then let's for now let's simply print. Let's \nprint our random text for now. And then we set up  \nthis in the next step. But first, I want to test \nthis. So let's say this is my answer. And this  \nis all that we need for the receive functions. \nSo let's clear this and run this and test this.  \nWe get an error await wasn't used \nwith future async i o gather Oh,  \nthis is a classic mistake. Of course, here, \nI have to say await async i o gather. So  \nlet's run this again. And now it's \nworking. So yeah. What's your name?  \nAnd you see the transcript is working. So no, \nI stopped this. But if I scroll up, what's your  \nname? And each time we get this as my answer. So \nthis is working. And now of course here we want to  \ndo a clever thing with our prompt and \nuse our virtual assistant. So for this,  \nwe now set up open AI. So they have a \nAPI that provides access to GPT three.  \nAnd this can perform a wide variety of natural \nlanguage tasks. So in order to use this,  \nyou have to sign up but you can do this for free \nand you get a free you get free credits. So this  \nwill be more than enough to play around with \nthis. And it's actually super simple to set this  \nup. So let's create a new file. And I call \nthis let's call this open a i helper.py.  \nAnd then you We also have to install this. \nSo we have to say pip install open API.  \nAnd then we also after signing up, you get \nthe API token. So we have to copy this in  \nAPI secrets. And then we can use this. And now we \ncan import open API. And we also need to import  \nour secret. So from API secrets, we import our API \nkey open API, then we have to set this so we say  \nOpen API dot API key equals API key. And now we \nwant to do question answering. So the open API API  \nis actually super simple to use. So we can click \non examples. And then we see a bunch of different  \nexamples. So open AI can do a lot of things, for \nexample, q&a, grammar, correction, text to command  \nclassification, a lot of different stuff. So \nlet's click on Q and A. And if we scroll down,  \nthen here we find the code examples. So we already \nset our API key. And now we need to grab this. And  \nlet's copy this and let's create a helper \nfunction. So define, and let's call this ask  \ncomputer. And this gets the prompt as \ninput. And now I paste this in here.  \nSo we say response equals open AI dot completion \ndot create. Then here we specify an engine.  \nAnd now we specify the prompt. And in \nour case, the prompt is going to be  \nthe prompt that we put in. So prompt equals \nprompt from the parameter. And now there are a  \nlot of other different parameters that you could \ncheck out and the documentation. So in my case,  \nI only want to keep the max tokens. So this was \nspecify how long the result can be. And yeah,  \nlet's say 100 is fine for this. And now this is \nall that we need. And now of course, we need to  \nreturn the response. And this is actually a JSON \nobject, again, are now a dictionary. And we only  \nwant to extract the first possible response. So \nit can also send more if you specify this here.  \nSo in our case, we only get one. And then \nwe say response. And this is in the key  \nchoices, and then the index zero. So the first \nchoice, and then the key texts. So this will  \nbe the actual response from GPT, three. And now in \nthe main, the only thing we have to do is say from  \nopen AI helper, we import ask, come pewter, \nand then down here in the receive functions.  \nNow here we say. Response equals ask computer, \nand then we put in the parent, and then here,  \nthis will be our response. And no, this should \nbe everything that we need. So now let's again,  \nclear this and run the main.pi. And let's hope \nthis works. What's your name? What's your name?  \nHow old are you? Where are you from?  \nAll right, so let's stop this again. And yeah, \nyou see this works. And this is how you can  \nbuild a virtual assistant that works with real \ntime speech recognition together with open AI.  \nAnd yeah, I really hope you enjoyed this \nproject. If you've watched this far,  \nthank you so much for following along. And also, \nI hope to see you in the future on the assembly AI  \nchannel because on there we also create a lot \nof content around Python speech recognition,  \nand also machine learning. So please check \nit out. And then I hope to see you soon. Bye\n",
  "words": [
    "course",
    "teach",
    "implement",
    "speech",
    "recognition",
    "python",
    "building",
    "five",
    "projects",
    "easier",
    "may",
    "think",
    "course",
    "taught",
    "two",
    "amazing",
    "instructors",
    "hi",
    "everyone",
    "patrick",
    "alyssa",
    "patrick",
    "experienced",
    "software",
    "engineer",
    "ministra",
    "experienced",
    "data",
    "scientist",
    "developer",
    "advocates",
    "assembly",
    "ai",
    "assembly",
    "ai",
    "deep",
    "learning",
    "company",
    "creates",
    "speech",
    "text",
    "api",
    "learn",
    "use",
    "api",
    "course",
    "assembly",
    "ai",
    "provided",
    "grant",
    "made",
    "course",
    "possible",
    "also",
    "youtube",
    "channel",
    "post",
    "weekly",
    "python",
    "machine",
    "learning",
    "tutorials",
    "projects",
    "learn",
    "build",
    "course",
    "first",
    "project",
    "going",
    "learn",
    "deal",
    "audio",
    "data",
    "going",
    "see",
    "capture",
    "audio",
    "information",
    "microphone",
    "save",
    "wav",
    "file",
    "second",
    "project",
    "going",
    "learn",
    "speech",
    "recognition",
    "top",
    "audio",
    "file",
    "recorded",
    "using",
    "assembly",
    "api",
    "api",
    "third",
    "project",
    "going",
    "change",
    "gears",
    "little",
    "bit",
    "start",
    "sentiment",
    "analysis",
    "iphone",
    "reviews",
    "find",
    "youtube",
    "fourth",
    "project",
    "going",
    "summarize",
    "podcasts",
    "find",
    "online",
    "build",
    "web",
    "app",
    "show",
    "results",
    "users",
    "last",
    "project",
    "going",
    "use",
    "speech",
    "recognition",
    "combination",
    "open",
    "ai",
    "api",
    "make",
    "app",
    "answer",
    "users",
    "questions",
    "hope",
    "excited",
    "let",
    "get",
    "started",
    "alright",
    "first",
    "part",
    "teach",
    "audio",
    "processing",
    "basics",
    "python",
    "briefly",
    "touched",
    "different",
    "audio",
    "file",
    "formats",
    "talk",
    "different",
    "audio",
    "signal",
    "parameters",
    "know",
    "show",
    "use",
    "wav",
    "module",
    "load",
    "save",
    "wav",
    "file",
    "show",
    "plot",
    "wave",
    "signal",
    "also",
    "show",
    "microphone",
    "recording",
    "python",
    "finally",
    "also",
    "show",
    "load",
    "file",
    "formats",
    "like",
    "mp3",
    "files",
    "let",
    "get",
    "started",
    "first",
    "write",
    "code",
    "let",
    "talk",
    "briefly",
    "different",
    "audio",
    "file",
    "formats",
    "listed",
    "three",
    "popular",
    "ones",
    "mp3",
    "flac",
    "wav",
    "mp3",
    "probably",
    "popular",
    "one",
    "may",
    "know",
    "lossy",
    "compression",
    "format",
    "means",
    "compresses",
    "data",
    "process",
    "lose",
    "information",
    "hand",
    "flax",
    "loss",
    "less",
    "compression",
    "format",
    "also",
    "compresses",
    "data",
    "allows",
    "us",
    "perfectly",
    "reconstruct",
    "original",
    "data",
    "wav",
    "uncompressed",
    "format",
    "means",
    "stores",
    "data",
    "uncompressed",
    "way",
    "audio",
    "quality",
    "best",
    "also",
    "file",
    "size",
    "largest",
    "wav",
    "standard",
    "cd",
    "audio",
    "quality",
    "focus",
    "first",
    "part",
    "actually",
    "easy",
    "work",
    "python",
    "built",
    "wav",
    "module",
    "answer",
    "let",
    "look",
    "work",
    "wav",
    "audio",
    "file",
    "way",
    "wav",
    "stands",
    "wave",
    "form",
    "audio",
    "format",
    "start",
    "loading",
    "data",
    "let",
    "talk",
    "parameters",
    "understand",
    "load",
    "first",
    "wav",
    "file",
    "let",
    "understand",
    "parameters",
    "number",
    "channels",
    "usually",
    "one",
    "two",
    "one",
    "also",
    "known",
    "mono",
    "two",
    "stereo",
    "number",
    "independent",
    "audio",
    "channels",
    "example",
    "stereo",
    "two",
    "independent",
    "channels",
    "means",
    "gives",
    "impression",
    "audio",
    "coming",
    "two",
    "different",
    "directions",
    "sample",
    "number",
    "bytes",
    "sample",
    "get",
    "clear",
    "later",
    "look",
    "example",
    "frame",
    "rate",
    "also",
    "known",
    "sample",
    "rate",
    "sample",
    "frequency",
    "important",
    "parameter",
    "means",
    "number",
    "samples",
    "second",
    "example",
    "may",
    "seen",
    "number",
    "lot",
    "means",
    "hertz",
    "kilohertz",
    "usually",
    "standard",
    "sampling",
    "rate",
    "cd",
    "quality",
    "means",
    "get",
    "sample",
    "values",
    "second",
    "number",
    "frames",
    "yeah",
    "total",
    "number",
    "frames",
    "get",
    "values",
    "frame",
    "load",
    "binary",
    "format",
    "convert",
    "integer",
    "values",
    "later",
    "let",
    "look",
    "load",
    "file",
    "wave",
    "four",
    "wave",
    "module",
    "prepared",
    "simple",
    "wav",
    "file",
    "five",
    "seconds",
    "long",
    "let",
    "actually",
    "listen",
    "hi",
    "name",
    "patrick",
    "developer",
    "advocate",
    "assembly",
    "ai",
    "yeah",
    "also",
    "see",
    "parameters",
    "ready",
    "let",
    "go",
    "back",
    "code",
    "let",
    "load",
    "file",
    "create",
    "object",
    "simply",
    "say",
    "wave",
    "dot",
    "open",
    "give",
    "name",
    "called",
    "petrick",
    "dot",
    "wav",
    "read",
    "say",
    "read",
    "read",
    "binary",
    "extract",
    "different",
    "parameters",
    "example",
    "let",
    "print",
    "let",
    "say",
    "number",
    "channels",
    "get",
    "saying",
    "object",
    "dot",
    "get",
    "n",
    "channels",
    "also",
    "want",
    "print",
    "sample",
    "print",
    "sample",
    "get",
    "biasing",
    "object",
    "dot",
    "get",
    "sam",
    "let",
    "print",
    "frame",
    "rates",
    "print",
    "frame",
    "rates",
    "get",
    "saying",
    "object",
    "dot",
    "get",
    "frame",
    "rate",
    "also",
    "want",
    "also",
    "want",
    "number",
    "frames",
    "print",
    "number",
    "frames",
    "say",
    "object",
    "dot",
    "get",
    "n",
    "channels",
    "frames",
    "lastly",
    "let",
    "also",
    "print",
    "parameters",
    "get",
    "parameters",
    "saying",
    "object",
    "dot",
    "get",
    "per",
    "params",
    "let",
    "print",
    "run",
    "say",
    "python",
    "wave",
    "see",
    "one",
    "channel",
    "mono",
    "format",
    "sample",
    "width",
    "two",
    "two",
    "bytes",
    "sample",
    "frame",
    "rate",
    "number",
    "frames",
    "also",
    "parameters",
    "wav",
    "params",
    "object",
    "example",
    "calculate",
    "time",
    "audio",
    "set",
    "frame",
    "rate",
    "number",
    "samples",
    "per",
    "second",
    "get",
    "whole",
    "number",
    "frames",
    "number",
    "frames",
    "number",
    "samples",
    "divided",
    "frame",
    "rate",
    "get",
    "time",
    "seconds",
    "print",
    "audio",
    "run",
    "get",
    "five",
    "seconds",
    "see",
    "works",
    "let",
    "get",
    "actual",
    "frames",
    "frames",
    "equals",
    "object",
    "dot",
    "get",
    "frames",
    "gets",
    "sorry",
    "object",
    "dot",
    "read",
    "frames",
    "give",
    "number",
    "frames",
    "think",
    "pass",
    "minus",
    "one",
    "read",
    "frames",
    "let",
    "example",
    "let",
    "print",
    "type",
    "see",
    "also",
    "print",
    "type",
    "frames",
    "cero",
    "let",
    "print",
    "length",
    "frames",
    "let",
    "run",
    "see",
    "bytes",
    "object",
    "see",
    "class",
    "bytes",
    "extract",
    "first",
    "byte",
    "see",
    "integer",
    "length",
    "frames",
    "object",
    "number",
    "frames",
    "look",
    "number",
    "frames",
    "extract",
    "length",
    "twice",
    "much",
    "listen",
    "carefully",
    "beginning",
    "mentioned",
    "sample",
    "means",
    "two",
    "bytes",
    "per",
    "sample",
    "actually",
    "cut",
    "collate",
    "divided",
    "two",
    "get",
    "number",
    "frames",
    "yeah",
    "easily",
    "read",
    "wav",
    "file",
    "work",
    "work",
    "frames",
    "load",
    "save",
    "data",
    "also",
    "open",
    "let",
    "call",
    "object",
    "new",
    "equals",
    "say",
    "wave",
    "dot",
    "open",
    "give",
    "new",
    "name",
    "let",
    "say",
    "patrick",
    "underscore",
    "new",
    "dot",
    "wave",
    "open",
    "write",
    "binary",
    "mode",
    "basically",
    "call",
    "functions",
    "setters",
    "getters",
    "say",
    "object",
    "new",
    "dot",
    "sets",
    "number",
    "channels",
    "one",
    "channel",
    "say",
    "object",
    "new",
    "dot",
    "set",
    "sample",
    "object",
    "new",
    "dot",
    "set",
    "frame",
    "rates",
    "float",
    "parameters",
    "set",
    "write",
    "frames",
    "saying",
    "object",
    "new",
    "dot",
    "write",
    "frames",
    "frames",
    "original",
    "frames",
    "basically",
    "duplicate",
    "file",
    "write",
    "frames",
    "forgot",
    "done",
    "opening",
    "reading",
    "information",
    "want",
    "also",
    "call",
    "objects",
    "thoughts",
    "close",
    "say",
    "object",
    "new",
    "dot",
    "close",
    "close",
    "file",
    "objects",
    "yeah",
    "save",
    "run",
    "see",
    "duplicated",
    "file",
    "run",
    "hi",
    "name",
    "patrick",
    "developer",
    "advocate",
    "assembly",
    "ai",
    "see",
    "works",
    "test",
    "data",
    "yeah",
    "work",
    "wav",
    "file",
    "wav",
    "module",
    "let",
    "see",
    "plot",
    "wav",
    "file",
    "object",
    "plotting",
    "wave",
    "signal",
    "actually",
    "difficult",
    "need",
    "install",
    "matplotlib",
    "numpy",
    "import",
    "modules",
    "need",
    "need",
    "wave",
    "need",
    "plot",
    "plt",
    "import",
    "numpy",
    "num",
    "pi",
    "want",
    "read",
    "wav",
    "file",
    "say",
    "wav",
    "dot",
    "open",
    "patrick",
    "dot",
    "wav",
    "read",
    "binary",
    "mode",
    "want",
    "read",
    "parameters",
    "need",
    "want",
    "read",
    "sample",
    "frequency",
    "objects",
    "dot",
    "get",
    "frame",
    "rates",
    "need",
    "number",
    "samples",
    "object",
    "dot",
    "get",
    "frames",
    "also",
    "need",
    "actual",
    "signal",
    "call",
    "signal",
    "dot",
    "wave",
    "equals",
    "object",
    "dot",
    "read",
    "frames",
    "minus",
    "one",
    "frames",
    "say",
    "object",
    "dot",
    "close",
    "example",
    "calculate",
    "number",
    "length",
    "signal",
    "seconds",
    "call",
    "audio",
    "remember",
    "first",
    "code",
    "number",
    "samples",
    "divided",
    "sample",
    "frequency",
    "let",
    "print",
    "audio",
    "save",
    "run",
    "test",
    "run",
    "python",
    "plot",
    "audio",
    "get",
    "works",
    "far",
    "want",
    "create",
    "plot",
    "bytes",
    "object",
    "create",
    "numpy",
    "array",
    "easily",
    "call",
    "signal",
    "array",
    "equals",
    "use",
    "numpy",
    "buffer",
    "put",
    "signal",
    "signal",
    "wave",
    "also",
    "specify",
    "data",
    "type",
    "want",
    "int",
    "c",
    "steam",
    "need",
    "object",
    "x",
    "axis",
    "times",
    "axis",
    "say",
    "times",
    "equals",
    "use",
    "numpy",
    "linspace",
    "function",
    "gets",
    "zero",
    "start",
    "end",
    "length",
    "signal",
    "audio",
    "five",
    "seconds",
    "also",
    "give",
    "number",
    "parameter",
    "number",
    "number",
    "samples",
    "remember",
    "signal",
    "wave",
    "basically",
    "get",
    "sample",
    "point",
    "time",
    "want",
    "plot",
    "create",
    "figure",
    "say",
    "plt",
    "dot",
    "figure",
    "give",
    "fixed",
    "size",
    "15",
    "five",
    "say",
    "p",
    "l",
    "dot",
    "plot",
    "want",
    "plot",
    "times",
    "signal",
    "array",
    "simply",
    "give",
    "title",
    "p",
    "l",
    "dot",
    "title",
    "let",
    "call",
    "audio",
    "signal",
    "also",
    "want",
    "say",
    "p",
    "l",
    "dot",
    "label",
    "label",
    "sig",
    "wave",
    "p",
    "l",
    "x",
    "label",
    "time",
    "time",
    "seconds",
    "say",
    "p",
    "l",
    "x",
    "lim",
    "limit",
    "zero",
    "audios",
    "five",
    "seconds",
    "say",
    "p",
    "l",
    "dot",
    "show",
    "need",
    "run",
    "open",
    "plot",
    "audio",
    "signal",
    "plotted",
    "wav",
    "plot",
    "easily",
    "matplotlib",
    "wave",
    "module",
    "let",
    "learn",
    "record",
    "microphone",
    "capture",
    "microphone",
    "input",
    "python",
    "use",
    "pi",
    "audio",
    "popular",
    "python",
    "library",
    "provides",
    "bindings",
    "port",
    "cross",
    "platform",
    "audio",
    "library",
    "easily",
    "play",
    "record",
    "audio",
    "works",
    "linux",
    "windows",
    "mac",
    "platform",
    "slightly",
    "different",
    "installation",
    "command",
    "recommend",
    "example",
    "windows",
    "use",
    "command",
    "mac",
    "also",
    "install",
    "port",
    "first",
    "use",
    "homebrew",
    "easily",
    "say",
    "brew",
    "install",
    "port",
    "audio",
    "pip",
    "install",
    "pi",
    "audio",
    "linux",
    "use",
    "command",
    "already",
    "mac",
    "use",
    "brew",
    "install",
    "port",
    "audio",
    "pip",
    "install",
    "pi",
    "audio",
    "import",
    "say",
    "import",
    "pi",
    "audio",
    "also",
    "want",
    "import",
    "wav",
    "save",
    "recording",
    "later",
    "want",
    "set",
    "parameters",
    "say",
    "frames",
    "per",
    "buffer",
    "say",
    "play",
    "around",
    "little",
    "bit",
    "specified",
    "format",
    "format",
    "equals",
    "pi",
    "dot",
    "p",
    "r",
    "int",
    "sixth",
    "team",
    "basically",
    "use",
    "use",
    "numpy",
    "n",
    "p",
    "r",
    "also",
    "specify",
    "number",
    "channels",
    "say",
    "one",
    "simply",
    "mono",
    "format",
    "also",
    "frame",
    "rate",
    "rate",
    "say",
    "use",
    "different",
    "rate",
    "play",
    "around",
    "create",
    "pi",
    "audio",
    "object",
    "say",
    "p",
    "equals",
    "pi",
    "audio",
    "create",
    "stream",
    "object",
    "say",
    "stream",
    "equals",
    "p",
    "dot",
    "open",
    "put",
    "parameters",
    "say",
    "format",
    "equals",
    "format",
    "need",
    "channels",
    "channels",
    "equals",
    "channels",
    "rate",
    "equals",
    "rate",
    "also",
    "want",
    "capture",
    "input",
    "input",
    "equals",
    "true",
    "lastly",
    "save",
    "frames",
    "per",
    "buffer",
    "equals",
    "frames",
    "per",
    "buffer",
    "stream",
    "object",
    "start",
    "recording",
    "want",
    "record",
    "number",
    "seconds",
    "say",
    "five",
    "seconds",
    "store",
    "frames",
    "store",
    "list",
    "object",
    "iterate",
    "say",
    "range",
    "start",
    "zero",
    "go",
    "say",
    "rate",
    "divided",
    "frames",
    "per",
    "buffer",
    "times",
    "seconds",
    "convert",
    "integer",
    "float",
    "basically",
    "record",
    "five",
    "seconds",
    "read",
    "chunk",
    "say",
    "data",
    "equals",
    "say",
    "stream",
    "dot",
    "read",
    "read",
    "frames",
    "per",
    "buffer",
    "say",
    "frames",
    "dots",
    "append",
    "data",
    "basically",
    "frames",
    "per",
    "buffer",
    "means",
    "read",
    "many",
    "frames",
    "one",
    "one",
    "iteration",
    "close",
    "everything",
    "say",
    "stream",
    "dot",
    "stop",
    "stream",
    "also",
    "say",
    "stream",
    "dot",
    "close",
    "say",
    "p",
    "dot",
    "terminate",
    "everything",
    "correctly",
    "shut",
    "example",
    "save",
    "frames",
    "object",
    "wav",
    "file",
    "say",
    "object",
    "equals",
    "wav",
    "dot",
    "open",
    "let",
    "call",
    "output",
    "dot",
    "wav",
    "wave",
    "write",
    "binary",
    "mode",
    "set",
    "parameters",
    "said",
    "object",
    "set",
    "number",
    "channels",
    "channels",
    "parameter",
    "objects",
    "dot",
    "set",
    "sample",
    "get",
    "p",
    "dot",
    "get",
    "sample",
    "size",
    "format",
    "object",
    "dot",
    "set",
    "frame",
    "rate",
    "rate",
    "write",
    "frames",
    "say",
    "object",
    "dot",
    "write",
    "frames",
    "need",
    "write",
    "binaries",
    "create",
    "binary",
    "string",
    "like",
    "string",
    "dot",
    "join",
    "put",
    "frames",
    "list",
    "combine",
    "elements",
    "frames",
    "list",
    "binary",
    "string",
    "say",
    "object",
    "dot",
    "close",
    "everything",
    "need",
    "run",
    "python",
    "record",
    "mike",
    "test",
    "hi",
    "patrick",
    "test",
    "done",
    "new",
    "file",
    "let",
    "play",
    "see",
    "works",
    "hi",
    "patrick",
    "test",
    "123",
    "worked",
    "awesome",
    "last",
    "step",
    "also",
    "want",
    "show",
    "load",
    "mp3",
    "files",
    "wav",
    "files",
    "let",
    "load",
    "mp3",
    "files",
    "need",
    "additional",
    "third",
    "party",
    "library",
    "recommend",
    "use",
    "pie",
    "simple",
    "use",
    "library",
    "provides",
    "simple",
    "easy",
    "high",
    "level",
    "interface",
    "load",
    "also",
    "manipulate",
    "audio",
    "order",
    "install",
    "also",
    "need",
    "install",
    "ffmpeg",
    "mac",
    "use",
    "homebrew",
    "say",
    "brew",
    "install",
    "ffmpeg",
    "simply",
    "say",
    "pip",
    "install",
    "pipe",
    "install",
    "already",
    "set",
    "sfide",
    "example",
    "say",
    "pi",
    "want",
    "import",
    "audio",
    "segment",
    "say",
    "audio",
    "equals",
    "audio",
    "segment",
    "say",
    "mp3",
    "mp3",
    "case",
    "right",
    "wav",
    "let",
    "load",
    "petrick",
    "dot",
    "wav",
    "example",
    "also",
    "easily",
    "manipulate",
    "saying",
    "audio",
    "plus",
    "six",
    "audio",
    "plus",
    "six",
    "increase",
    "volume",
    "six",
    "60",
    "p",
    "also",
    "example",
    "repeat",
    "clips",
    "say",
    "audio",
    "equals",
    "times",
    "use",
    "fade",
    "example",
    "audio",
    "equals",
    "audio",
    "dot",
    "fade",
    "underscore",
    "2000",
    "milliseconds",
    "two",
    "seconds",
    "fade",
    "works",
    "fade",
    "yeah",
    "manipulate",
    "say",
    "audio",
    "dot",
    "export",
    "want",
    "export",
    "let",
    "call",
    "mash",
    "dot",
    "mp3",
    "say",
    "format",
    "equals",
    "string",
    "mp3",
    "example",
    "could",
    "load",
    "saying",
    "two",
    "equals",
    "dot",
    "mp3",
    "use",
    "mesh",
    "dot",
    "mp3",
    "print",
    "done",
    "see",
    "arrives",
    "part",
    "let",
    "say",
    "python",
    "load",
    "mp3",
    "file",
    "yeah",
    "works",
    "mp3",
    "file",
    "could",
    "also",
    "load",
    "like",
    "yeah",
    "use",
    "pilot",
    "module",
    "load",
    "file",
    "formats",
    "well",
    "wanted",
    "show",
    "first",
    "part",
    "hope",
    "learned",
    "little",
    "bit",
    "audio",
    "processing",
    "python",
    "charters",
    "let",
    "move",
    "let",
    "learn",
    "speech",
    "recognition",
    "python",
    "hey",
    "welcome",
    "project",
    "going",
    "learn",
    "speech",
    "recognition",
    "python",
    "going",
    "simple",
    "going",
    "take",
    "audio",
    "file",
    "recorded",
    "previous",
    "projects",
    "turn",
    "text",
    "file",
    "let",
    "show",
    "project",
    "works",
    "audio",
    "file",
    "recorded",
    "previous",
    "project",
    "hi",
    "patrick",
    "test",
    "run",
    "script",
    "get",
    "text",
    "transcription",
    "audio",
    "file",
    "like",
    "hi",
    "patrick",
    "test",
    "let",
    "learn",
    "implement",
    "python",
    "project",
    "mainly",
    "going",
    "need",
    "two",
    "things",
    "assembly",
    "api",
    "api",
    "speech",
    "recognition",
    "request",
    "library",
    "python",
    "talk",
    "assembly",
    "api",
    "api",
    "let",
    "first",
    "go",
    "ahead",
    "get",
    "api",
    "token",
    "assembly",
    "ai",
    "simple",
    "need",
    "go",
    "assembly",
    "create",
    "free",
    "account",
    "account",
    "sign",
    "copy",
    "api",
    "keys",
    "clicking",
    "right",
    "away",
    "going",
    "create",
    "configure",
    "file",
    "put",
    "api",
    "key",
    "done",
    "way",
    "authenticating",
    "smd",
    "api",
    "start",
    "setting",
    "upload",
    "transcribe",
    "get",
    "transcription",
    "assembly",
    "api",
    "next",
    "thing",
    "want",
    "main",
    "file",
    "going",
    "code",
    "need",
    "import",
    "requests",
    "library",
    "talk",
    "assembly",
    "api",
    "project",
    "going",
    "four",
    "steps",
    "first",
    "one",
    "upload",
    "file",
    "locally",
    "assembly",
    "ai",
    "second",
    "one",
    "start",
    "transcription",
    "third",
    "one",
    "keep",
    "pulling",
    "assembly",
    "api",
    "see",
    "transcription",
    "done",
    "lastly",
    "going",
    "see",
    "transcript",
    "uploading",
    "actually",
    "quite",
    "simple",
    "go",
    "documentation",
    "assembly",
    "ai",
    "see",
    "uploading",
    "local",
    "file",
    "files",
    "transcription",
    "copy",
    "paste",
    "change",
    "code",
    "need",
    "basically",
    "yeah",
    "okay",
    "importing",
    "request",
    "library",
    "already",
    "file",
    "name",
    "going",
    "get",
    "terminal",
    "set",
    "later",
    "couple",
    "things",
    "need",
    "pay",
    "attention",
    "basically",
    "way",
    "read",
    "audio",
    "file",
    "file",
    "system",
    "need",
    "set",
    "heather",
    "headers",
    "used",
    "authentication",
    "actually",
    "already",
    "set",
    "going",
    "api",
    "token",
    "set",
    "api",
    "key",
    "assembly",
    "api",
    "right",
    "need",
    "import",
    "course",
    "alright",
    "done",
    "also",
    "upload",
    "endpoint",
    "assembly",
    "one",
    "api",
    "assembly",
    "comm",
    "v",
    "upload",
    "know",
    "might",
    "something",
    "need",
    "also",
    "later",
    "going",
    "put",
    "separate",
    "value",
    "variable",
    "call",
    "one",
    "uploading",
    "file",
    "assembly",
    "ai",
    "post",
    "request",
    "post",
    "requests",
    "need",
    "need",
    "send",
    "post",
    "request",
    "upload",
    "endpoint",
    "need",
    "include",
    "api",
    "key",
    "included",
    "headers",
    "course",
    "need",
    "data",
    "file",
    "read",
    "reading",
    "data",
    "read",
    "file",
    "function",
    "chunks",
    "ai",
    "requires",
    "chunks",
    "chunk",
    "sizes",
    "five",
    "megabytes",
    "basically",
    "number",
    "bytes",
    "already",
    "get",
    "file",
    "name",
    "terminal",
    "tool",
    "right",
    "need",
    "import",
    "system",
    "inside",
    "system",
    "second",
    "first",
    "zeroeth",
    "variable",
    "argument",
    "going",
    "file",
    "name",
    "let",
    "clean",
    "little",
    "bit",
    "right",
    "able",
    "run",
    "command",
    "terminal",
    "include",
    "name",
    "file",
    "want",
    "upload",
    "uploaded",
    "assembly",
    "ai",
    "also",
    "let",
    "print",
    "response",
    "get",
    "assembly",
    "ai",
    "see",
    "kind",
    "response",
    "get",
    "file",
    "working",
    "hi",
    "patrick",
    "test",
    "need",
    "right",
    "one",
    "python",
    "name",
    "file",
    "case",
    "output",
    "dot",
    "love",
    "right",
    "uploaded",
    "file",
    "assembly",
    "ai",
    "successfully",
    "response",
    "get",
    "upload",
    "url",
    "data",
    "audio",
    "file",
    "lives",
    "right",
    "using",
    "start",
    "transcription",
    "transcription",
    "let",
    "cheat",
    "getting",
    "code",
    "docs",
    "data",
    "code",
    "need",
    "starting",
    "transcription",
    "endpoint",
    "see",
    "ends",
    "differently",
    "upload",
    "endpoint",
    "one",
    "ends",
    "upload",
    "one",
    "ends",
    "transcript",
    "call",
    "transcript",
    "endpoint",
    "heather",
    "already",
    "header",
    "really",
    "need",
    "anymore",
    "endpoint",
    "transcript",
    "endpoint",
    "json",
    "data",
    "sending",
    "data",
    "want",
    "somebody",
    "ai",
    "transcribe",
    "going",
    "need",
    "give",
    "order",
    "url",
    "already",
    "order",
    "url",
    "right",
    "got",
    "response",
    "extract",
    "response",
    "let",
    "oh",
    "url",
    "response",
    "json",
    "cold",
    "upload",
    "girl",
    "going",
    "give",
    "us",
    "audio",
    "euro",
    "hear",
    "example",
    "okay",
    "way",
    "started",
    "transcription",
    "let",
    "see",
    "result",
    "run",
    "thing",
    "alright",
    "got",
    "much",
    "longer",
    "response",
    "response",
    "bunch",
    "information",
    "transcription",
    "started",
    "get",
    "transcript",
    "immediately",
    "depending",
    "length",
    "audio",
    "might",
    "take",
    "minute",
    "two",
    "right",
    "get",
    "instead",
    "id",
    "transcription",
    "job",
    "using",
    "id",
    "ask",
    "somebody",
    "ai",
    "hey",
    "id",
    "job",
    "transcription",
    "job",
    "submitted",
    "ready",
    "ready",
    "tell",
    "ready",
    "yet",
    "still",
    "processing",
    "ready",
    "tell",
    "hey",
    "completed",
    "transcript",
    "next",
    "thing",
    "want",
    "build",
    "polling",
    "going",
    "keep",
    "going",
    "write",
    "code",
    "keep",
    "polling",
    "assembly",
    "ai",
    "tell",
    "us",
    "transcription",
    "ready",
    "go",
    "let",
    "first",
    "clean",
    "code",
    "little",
    "bit",
    "know",
    "everything",
    "nicely",
    "packed",
    "functions",
    "use",
    "pre",
    "use",
    "need",
    "one",
    "upload",
    "function",
    "yes",
    "needs",
    "return",
    "audio",
    "url",
    "need",
    "print",
    "response",
    "anymore",
    "already",
    "seen",
    "looks",
    "like",
    "need",
    "put",
    "header",
    "separately",
    "want",
    "upload",
    "transcribe",
    "basically",
    "everything",
    "else",
    "able",
    "reach",
    "variable",
    "called",
    "heather",
    "transcription",
    "create",
    "function",
    "called",
    "transcribe",
    "need",
    "return",
    "transcription",
    "function",
    "id",
    "say",
    "job",
    "id",
    "would",
    "response",
    "dot",
    "json",
    "ad",
    "need",
    "anymore",
    "call",
    "transcript",
    "response",
    "make",
    "clear",
    "upload",
    "response",
    "let",
    "call",
    "transcript",
    "request",
    "everything",
    "nice",
    "clean",
    "goes",
    "upload",
    "response",
    "use",
    "need",
    "return",
    "job",
    "id",
    "alright",
    "nicely",
    "wrapped",
    "different",
    "functions",
    "everything",
    "else",
    "looks",
    "good",
    "let",
    "run",
    "see",
    "works",
    "course",
    "calling",
    "function",
    "let",
    "call",
    "functions",
    "run",
    "upload",
    "transcribe",
    "course",
    "also",
    "need",
    "pass",
    "file",
    "name",
    "upload",
    "function",
    "let",
    "url",
    "defined",
    "url",
    "course",
    "also",
    "need",
    "pass",
    "audio",
    "url",
    "audio",
    "url",
    "transcribe",
    "good",
    "thing",
    "tried",
    "returned",
    "upload",
    "function",
    "pass",
    "transcript",
    "function",
    "result",
    "get",
    "job",
    "id",
    "print",
    "job",
    "id",
    "see",
    "worked",
    "let",
    "see",
    "yeah",
    "yes",
    "get",
    "job",
    "id",
    "okay",
    "things",
    "working",
    "next",
    "thing",
    "want",
    "set",
    "fault",
    "polling",
    "function",
    "first",
    "thing",
    "need",
    "create",
    "polling",
    "endpoint",
    "polling",
    "endpoint",
    "know",
    "transcript",
    "endpoint",
    "upload",
    "endpoint",
    "communicate",
    "somebody",
    "api",
    "polling",
    "endpoint",
    "going",
    "specific",
    "transcription",
    "job",
    "submitted",
    "create",
    "need",
    "combine",
    "transcript",
    "endpoint",
    "slash",
    "add",
    "job",
    "id",
    "job",
    "id",
    "bit",
    "weak",
    "going",
    "call",
    "transcript",
    "id",
    "url",
    "ask",
    "assembly",
    "ai",
    "ask",
    "assembly",
    "ai",
    "job",
    "done",
    "already",
    "going",
    "send",
    "request",
    "assembly",
    "ai",
    "time",
    "going",
    "get",
    "request",
    "well",
    "copy",
    "easy",
    "instead",
    "post",
    "going",
    "get",
    "request",
    "going",
    "use",
    "polling",
    "endpoint",
    "instead",
    "transcript",
    "endpoint",
    "need",
    "heather",
    "sending",
    "information",
    "assembly",
    "ai",
    "asking",
    "information",
    "familiar",
    "requests",
    "normally",
    "might",
    "simple",
    "need",
    "know",
    "sending",
    "data",
    "api",
    "use",
    "post",
    "request",
    "type",
    "getting",
    "information",
    "name",
    "suggests",
    "use",
    "get",
    "request",
    "type",
    "results",
    "resulting",
    "response",
    "get",
    "going",
    "called",
    "polling",
    "response",
    "let",
    "see",
    "job",
    "id",
    "called",
    "transcript",
    "id",
    "works",
    "get",
    "polling",
    "response",
    "also",
    "show",
    "polling",
    "response",
    "looks",
    "like",
    "looks",
    "good",
    "okay",
    "let",
    "run",
    "alright",
    "got",
    "response",
    "means",
    "things",
    "going",
    "well",
    "actually",
    "need",
    "json",
    "response",
    "let",
    "see",
    "yes",
    "like",
    "get",
    "idea",
    "response",
    "language",
    "model",
    "used",
    "bunch",
    "information",
    "need",
    "status",
    "let",
    "see",
    "oh",
    "yeah",
    "status",
    "processing",
    "means",
    "transcription",
    "still",
    "still",
    "prepared",
    "need",
    "wait",
    "little",
    "bit",
    "need",
    "ask",
    "assembly",
    "ai",
    "soon",
    "see",
    "transcription",
    "done",
    "normally",
    "wait",
    "30",
    "seconds",
    "maybe",
    "60",
    "seconds",
    "depending",
    "length",
    "transcription",
    "length",
    "audio",
    "file",
    "done",
    "give",
    "us",
    "status",
    "completed",
    "let",
    "write",
    "bits",
    "ask",
    "assembly",
    "ai",
    "repetitively",
    "transcription",
    "done",
    "create",
    "simple",
    "loop",
    "true",
    "polling",
    "poling",
    "response",
    "dot",
    "json",
    "status",
    "equals",
    "complete",
    "return",
    "polling",
    "response",
    "polling",
    "response",
    "status",
    "error",
    "possible",
    "might",
    "air",
    "return",
    "wrap",
    "function",
    "call",
    "gets",
    "transcription",
    "results",
    "url",
    "might",
    "well",
    "wrap",
    "polling",
    "function",
    "need",
    "pass",
    "anything",
    "yes",
    "transcript",
    "need",
    "pass",
    "transcript",
    "id",
    "instead",
    "printing",
    "response",
    "return",
    "response",
    "instead",
    "request",
    "would",
    "need",
    "call",
    "function",
    "transcript",
    "id",
    "pass",
    "transcript",
    "id",
    "might",
    "well",
    "call",
    "transcription",
    "transcribe",
    "function",
    "resulting",
    "thing",
    "would",
    "transcript",
    "id",
    "transcription",
    "function",
    "going",
    "pass",
    "transcript",
    "id",
    "polling",
    "function",
    "going",
    "return",
    "polling",
    "response",
    "call",
    "polling",
    "response",
    "data",
    "inside",
    "data",
    "needed",
    "anymore",
    "yeah",
    "polling",
    "response",
    "json",
    "passed",
    "call",
    "data",
    "change",
    "data",
    "also",
    "data",
    "yeah",
    "pass",
    "data",
    "error",
    "still",
    "pass",
    "data",
    "see",
    "response",
    "kind",
    "kind",
    "error",
    "got",
    "hear",
    "say",
    "none",
    "right",
    "let",
    "let",
    "little",
    "cleanup",
    "nice",
    "upload",
    "function",
    "transcript",
    "function",
    "calling",
    "upload",
    "function",
    "getting",
    "audio",
    "url",
    "passing",
    "transcribe",
    "running",
    "transcribe",
    "need",
    "anymore",
    "still",
    "need",
    "pass",
    "order",
    "transcribe",
    "would",
    "need",
    "pass",
    "instead",
    "need",
    "call",
    "function",
    "audio",
    "yeah",
    "let",
    "put",
    "actually",
    "make",
    "bit",
    "understandable",
    "maybe",
    "instead",
    "passing",
    "string",
    "error",
    "pass",
    "whatever",
    "error",
    "happened",
    "transcription",
    "know",
    "able",
    "see",
    "went",
    "wrong",
    "alright",
    "get",
    "result",
    "get",
    "transcription",
    "result",
    "id",
    "data",
    "error",
    "let",
    "run",
    "see",
    "data",
    "going",
    "look",
    "like",
    "right",
    "get",
    "something",
    "really",
    "really",
    "big",
    "let",
    "see",
    "maybe",
    "clear",
    "run",
    "know",
    "see",
    "clearly",
    "alright",
    "get",
    "id",
    "language",
    "model",
    "used",
    "etc",
    "want",
    "results",
    "yes",
    "text",
    "hi",
    "patrick",
    "test",
    "123",
    "get",
    "also",
    "get",
    "breakdown",
    "words",
    "word",
    "started",
    "meant",
    "word",
    "ended",
    "milliseconds",
    "confidence",
    "classification",
    "much",
    "information",
    "want",
    "though",
    "even",
    "though",
    "information",
    "want",
    "write",
    "transcript",
    "generated",
    "assembly",
    "ai",
    "text",
    "file",
    "next",
    "step",
    "going",
    "alright",
    "let",
    "come",
    "file",
    "name",
    "file",
    "call",
    "actually",
    "call",
    "thing",
    "file",
    "name",
    "plus",
    "txt",
    "file",
    "name",
    "okay",
    "using",
    "argument",
    "variable",
    "file",
    "name",
    "maybe",
    "let",
    "find",
    "something",
    "else",
    "call",
    "txt",
    "file",
    "name",
    "file",
    "name",
    "plus",
    "dot",
    "txt",
    "also",
    "know",
    "remove",
    "dot",
    "valve",
    "dot",
    "mp4",
    "whatever",
    "let",
    "deal",
    "open",
    "open",
    "writing",
    "format",
    "inside",
    "write",
    "data",
    "texts",
    "text",
    "information",
    "transcript",
    "remember",
    "response",
    "got",
    "text",
    "includes",
    "transcription",
    "prompt",
    "user",
    "saying",
    "transcription",
    "saved",
    "transcriptions",
    "saved",
    "happy",
    "course",
    "possibility",
    "transcription",
    "errors",
    "want",
    "cover",
    "remember",
    "returned",
    "data",
    "error",
    "say",
    "data",
    "returned",
    "happens",
    "errored",
    "print",
    "error",
    "work",
    "error",
    "see",
    "know",
    "went",
    "wrong",
    "okay",
    "let",
    "little",
    "cleanup",
    "want",
    "wrap",
    "function",
    "call",
    "save",
    "transcript",
    "data",
    "error",
    "returned",
    "get",
    "transcripts",
    "url",
    "means",
    "audio",
    "url",
    "need",
    "pass",
    "url",
    "actually",
    "less",
    "ready",
    "let",
    "run",
    "see",
    "get",
    "need",
    "transcript",
    "saved",
    "file",
    "calling",
    "upload",
    "function",
    "move",
    "one",
    "calling",
    "upload",
    "function",
    "called",
    "upload",
    "function",
    "call",
    "save",
    "transcript",
    "function",
    "let",
    "quickly",
    "follow",
    "call",
    "transcript",
    "function",
    "calls",
    "get",
    "transcription",
    "result",
    "url",
    "get",
    "transcription",
    "result",
    "url",
    "calls",
    "transcribe",
    "transcribe",
    "starts",
    "transcription",
    "process",
    "get",
    "transcription",
    "result",
    "url",
    "also",
    "calls",
    "polling",
    "keeps",
    "pulling",
    "assembly",
    "ai",
    "done",
    "returns",
    "something",
    "deal",
    "save",
    "transcript",
    "function",
    "either",
    "save",
    "transcript",
    "error",
    "display",
    "error",
    "let",
    "run",
    "see",
    "get",
    "errors",
    "transcription",
    "saved",
    "alright",
    "let",
    "see",
    "output",
    "txt",
    "open",
    "looks",
    "quite",
    "small",
    "maybe",
    "open",
    "like",
    "yes",
    "hi",
    "patrick",
    "test",
    "123",
    "result",
    "getting",
    "awesome",
    "actually",
    "achieved",
    "wanted",
    "next",
    "couple",
    "minutes",
    "actually",
    "want",
    "clean",
    "code",
    "going",
    "build",
    "couple",
    "projects",
    "want",
    "python",
    "file",
    "reusable",
    "code",
    "reinvent",
    "wheel",
    "time",
    "let",
    "first",
    "go",
    "actually",
    "polling",
    "true",
    "loop",
    "going",
    "keep",
    "asking",
    "assembly",
    "ai",
    "results",
    "know",
    "might",
    "unnecessary",
    "include",
    "waiting",
    "times",
    "ask",
    "completed",
    "yet",
    "wait",
    "let",
    "say",
    "30",
    "seconds",
    "ask",
    "inform",
    "user",
    "waiting",
    "30",
    "seconds",
    "need",
    "time",
    "module",
    "let",
    "close",
    "import",
    "time",
    "way",
    "waiting",
    "30",
    "seconds",
    "asking",
    "assembly",
    "ai",
    "transcript",
    "ready",
    "okay",
    "let",
    "create",
    "extra",
    "file",
    "api",
    "communication",
    "call",
    "yes",
    "move",
    "functions",
    "communicate",
    "api",
    "need",
    "move",
    "upload",
    "function",
    "need",
    "move",
    "transcribe",
    "poll",
    "actually",
    "remember",
    "yeah",
    "let",
    "see",
    "miss",
    "anything",
    "though",
    "remove",
    "file",
    "name",
    "stay",
    "course",
    "headers",
    "upload",
    "transcript",
    "endpoints",
    "need",
    "live",
    "needed",
    "functions",
    "import",
    "requests",
    "library",
    "need",
    "anymore",
    "need",
    "import",
    "assembly",
    "ai",
    "api",
    "key",
    "system",
    "needs",
    "stay",
    "time",
    "needs",
    "go",
    "also",
    "need",
    "import",
    "api",
    "communication",
    "import",
    "say",
    "way",
    "use",
    "functions",
    "main",
    "python",
    "script",
    "run",
    "make",
    "sure",
    "still",
    "working",
    "delete",
    "text",
    "file",
    "created",
    "keep",
    "output",
    "nice",
    "also",
    "get",
    "prompt",
    "program",
    "waiting",
    "30",
    "seconds",
    "asking",
    "oh",
    "yeah",
    "passed",
    "filename",
    "course",
    "might",
    "exist",
    "let",
    "go",
    "fix",
    "file",
    "name",
    "pass",
    "upload",
    "function",
    "upload",
    "function",
    "save",
    "transcript",
    "pass",
    "actually",
    "using",
    "also",
    "pass",
    "file",
    "name",
    "fine",
    "fix",
    "problem",
    "transcription",
    "saves",
    "alright",
    "let",
    "see",
    "output",
    "one",
    "txt",
    "hi",
    "oh",
    "like",
    "hi",
    "patrick",
    "test",
    "short",
    "audio",
    "file",
    "actually",
    "using",
    "want",
    "also",
    "show",
    "code",
    "working",
    "using",
    "another",
    "audio",
    "file",
    "audio",
    "one",
    "latest",
    "short",
    "videos",
    "made",
    "youtube",
    "channel",
    "talking",
    "natural",
    "language",
    "processing",
    "time",
    "maybe",
    "add",
    "underscores",
    "easier",
    "call",
    "yes",
    "copy",
    "name",
    "calling",
    "script",
    "use",
    "name",
    "probably",
    "take",
    "little",
    "bit",
    "longer",
    "audio",
    "file",
    "using",
    "couple",
    "seconds",
    "one",
    "one",
    "minute",
    "see",
    "results",
    "going",
    "show",
    "us",
    "right",
    "go",
    "transcription",
    "saved",
    "find",
    "right",
    "exactly",
    "talking",
    "let",
    "listen",
    "transcription",
    "open",
    "kind",
    "like",
    "severe",
    "best",
    "funny",
    "well",
    "probably",
    "soon",
    "seen",
    "gigantic",
    "leaps",
    "last",
    "couple",
    "years",
    "terms",
    "computers",
    "understand",
    "use",
    "natural",
    "language",
    "alright",
    "get",
    "idea",
    "code",
    "works",
    "amazing",
    "hope",
    "able",
    "follow",
    "along",
    "want",
    "code",
    "forget",
    "go",
    "get",
    "github",
    "repository",
    "prepared",
    "using",
    "link",
    "description",
    "welcome",
    "back",
    "third",
    "project",
    "one",
    "teach",
    "apply",
    "sentiment",
    "analysis",
    "youtube",
    "videos",
    "learn",
    "use",
    "youtube",
    "dl",
    "package",
    "automatically",
    "download",
    "youtube",
    "videos",
    "extract",
    "information",
    "need",
    "also",
    "teach",
    "apply",
    "sentiment",
    "analysis",
    "example",
    "use",
    "iphone",
    "30",
    "review",
    "videos",
    "result",
    "get",
    "looks",
    "like",
    "sentence",
    "video",
    "get",
    "text",
    "also",
    "get",
    "sentiment",
    "could",
    "positive",
    "negative",
    "neutral",
    "example",
    "read",
    "text",
    "new",
    "iphone",
    "display",
    "brighter",
    "battery",
    "life",
    "longer",
    "sentiment",
    "positive",
    "text",
    "still",
    "flaws",
    "sentiment",
    "negative",
    "works",
    "pretty",
    "well",
    "applied",
    "many",
    "use",
    "cases",
    "let",
    "get",
    "started",
    "see",
    "created",
    "new",
    "project",
    "folder",
    "already",
    "api",
    "secrets",
    "api",
    "py",
    "file",
    "helper",
    "functions",
    "work",
    "assembly",
    "api",
    "api",
    "let",
    "create",
    "two",
    "files",
    "file",
    "combine",
    "everything",
    "youtube",
    "extractor",
    "files",
    "another",
    "helper",
    "file",
    "extract",
    "infos",
    "youtube",
    "video",
    "going",
    "use",
    "youtube",
    "dl",
    "package",
    "popular",
    "command",
    "line",
    "program",
    "download",
    "videos",
    "youtube",
    "sites",
    "use",
    "command",
    "line",
    "program",
    "also",
    "use",
    "python",
    "say",
    "pip",
    "install",
    "youtube",
    "dl",
    "import",
    "say",
    "import",
    "youtube",
    "dl",
    "set",
    "instance",
    "say",
    "l",
    "equals",
    "youtube",
    "dl",
    "dot",
    "youtube",
    "dl",
    "going",
    "show",
    "download",
    "video",
    "file",
    "also",
    "extract",
    "infos",
    "video",
    "let",
    "create",
    "helper",
    "function",
    "call",
    "get",
    "video",
    "infos",
    "takes",
    "url",
    "use",
    "yt",
    "l",
    "object",
    "context",
    "manager",
    "say",
    "l",
    "say",
    "celt",
    "equals",
    "l",
    "dot",
    "extract",
    "info",
    "gets",
    "url",
    "default",
    "download",
    "equals",
    "true",
    "would",
    "also",
    "download",
    "file",
    "case",
    "say",
    "download",
    "equals",
    "false",
    "course",
    "could",
    "download",
    "file",
    "upload",
    "assembly",
    "ai",
    "actually",
    "skip",
    "step",
    "extract",
    "url",
    "hosted",
    "file",
    "pass",
    "transcribe",
    "endpoint",
    "assembly",
    "ai",
    "set",
    "download",
    "equals",
    "false",
    "one",
    "check",
    "say",
    "entries",
    "entries",
    "key",
    "result",
    "means",
    "playlist",
    "url",
    "want",
    "return",
    "first",
    "video",
    "playlist",
    "say",
    "return",
    "results",
    "key",
    "entries",
    "result",
    "zero",
    "entry",
    "zero",
    "otherwise",
    "return",
    "results",
    "simply",
    "whole",
    "video",
    "info",
    "object",
    "let",
    "create",
    "another",
    "helper",
    "file",
    "call",
    "get",
    "url",
    "gets",
    "video",
    "infos",
    "first",
    "let",
    "simply",
    "print",
    "video",
    "infos",
    "see",
    "looks",
    "like",
    "let",
    "say",
    "underscore",
    "name",
    "equals",
    "equals",
    "main",
    "let",
    "first",
    "extract",
    "video",
    "info",
    "video",
    "info",
    "equals",
    "get",
    "video",
    "infos",
    "needs",
    "say",
    "l",
    "equals",
    "get",
    "url",
    "want",
    "print",
    "audio",
    "url",
    "right",
    "none",
    "return",
    "anything",
    "let",
    "get",
    "example",
    "url",
    "went",
    "youtube",
    "search",
    "iphone",
    "13",
    "review",
    "choose",
    "video",
    "entered",
    "review",
    "pros",
    "cons",
    "click",
    "watch",
    "ad",
    "actually",
    "copy",
    "url",
    "right",
    "away",
    "put",
    "string",
    "run",
    "run",
    "python",
    "youtube",
    "extractor",
    "dot",
    "time",
    "print",
    "whole",
    "url",
    "yeah",
    "actually",
    "pass",
    "youtube",
    "info",
    "let",
    "try",
    "yeah",
    "extracted",
    "whole",
    "printed",
    "whole",
    "info",
    "actually",
    "long",
    "object",
    "long",
    "dictionary",
    "tell",
    "key",
    "called",
    "formats",
    "let",
    "actually",
    "print",
    "formats",
    "run",
    "also",
    "still",
    "large",
    "large",
    "dictionary",
    "inner",
    "dictionary",
    "key",
    "called",
    "actually",
    "list",
    "iterate",
    "say",
    "f",
    "video",
    "four",
    "formats",
    "print",
    "f",
    "let",
    "print",
    "f",
    "dot",
    "key",
    "ext",
    "extension",
    "also",
    "l",
    "also",
    "want",
    "print",
    "f",
    "dot",
    "u",
    "r",
    "l",
    "run",
    "let",
    "see",
    "happens",
    "um",
    "let",
    "actually",
    "comment",
    "url",
    "super",
    "long",
    "let",
    "print",
    "extension",
    "see",
    "lot",
    "different",
    "extensions",
    "actually",
    "start",
    "video",
    "lot",
    "different",
    "formats",
    "lot",
    "different",
    "resolutions",
    "want",
    "one",
    "audio",
    "format",
    "ending",
    "check",
    "format",
    "extension",
    "equals",
    "equals",
    "return",
    "f",
    "url",
    "key",
    "audio",
    "save",
    "print",
    "end",
    "get",
    "url",
    "host",
    "file",
    "see",
    "url",
    "related",
    "let",
    "example",
    "click",
    "browser",
    "could",
    "listen",
    "audio",
    "file",
    "yeah",
    "first",
    "part",
    "work",
    "youtube",
    "dl",
    "package",
    "extract",
    "infos",
    "let",
    "combine",
    "combine",
    "youtube",
    "extractor",
    "infos",
    "assembly",
    "ai",
    "extract",
    "transcript",
    "video",
    "also",
    "sentiment",
    "classification",
    "results",
    "sentiment",
    "classification",
    "usually",
    "pretty",
    "difficult",
    "task",
    "assembly",
    "ai",
    "makes",
    "super",
    "simple",
    "apply",
    "go",
    "website",
    "assembly",
    "itad",
    "calm",
    "look",
    "features",
    "see",
    "provide",
    "core",
    "transcription",
    "basically",
    "speech",
    "recognition",
    "seen",
    "last",
    "part",
    "also",
    "offer",
    "audio",
    "intelligence",
    "features",
    "pretty",
    "cool",
    "lot",
    "features",
    "use",
    "example",
    "detect",
    "important",
    "phrases",
    "words",
    "topic",
    "detection",
    "auto",
    "chapters",
    "auto",
    "summaries",
    "much",
    "scroll",
    "find",
    "sentiment",
    "analysis",
    "click",
    "see",
    "short",
    "description",
    "sentiment",
    "analysis",
    "assembly",
    "ai",
    "detect",
    "sentiment",
    "sentence",
    "speech",
    "spoken",
    "audio",
    "files",
    "sentiment",
    "analysis",
    "returns",
    "result",
    "positive",
    "negative",
    "neutral",
    "sentence",
    "transcript",
    "exactly",
    "need",
    "actually",
    "super",
    "simple",
    "use",
    "thing",
    "change",
    "call",
    "transcript",
    "endpoint",
    "also",
    "send",
    "sentiment",
    "analysis",
    "equals",
    "true",
    "json",
    "data",
    "need",
    "let",
    "go",
    "code",
    "implement",
    "let",
    "import",
    "files",
    "need",
    "want",
    "chasen",
    "say",
    "youtube",
    "extractor",
    "import",
    "get",
    "url",
    "get",
    "video",
    "infos",
    "api",
    "helper",
    "file",
    "import",
    "save",
    "transcripts",
    "create",
    "one",
    "helper",
    "function",
    "call",
    "safe",
    "video",
    "sentiments",
    "gets",
    "url",
    "get",
    "video",
    "force",
    "calling",
    "get",
    "video",
    "enforce",
    "url",
    "get",
    "odd",
    "url",
    "calling",
    "get",
    "url",
    "gets",
    "video",
    "infos",
    "simply",
    "call",
    "safe",
    "transcript",
    "function",
    "gets",
    "audio",
    "url",
    "also",
    "gets",
    "title",
    "title",
    "want",
    "use",
    "title",
    "video",
    "get",
    "video",
    "info",
    "key",
    "called",
    "title",
    "want",
    "slightly",
    "modify",
    "say",
    "title",
    "equals",
    "title",
    "dot",
    "strip",
    "want",
    "remove",
    "leading",
    "trailing",
    "whitespace",
    "want",
    "replace",
    "spaces",
    "underscore",
    "also",
    "say",
    "title",
    "equals",
    "data",
    "slash",
    "plus",
    "title",
    "want",
    "store",
    "separate",
    "folder",
    "create",
    "call",
    "data",
    "modify",
    "slightly",
    "look",
    "back",
    "see",
    "needs",
    "additional",
    "arguments",
    "sentiment",
    "analysis",
    "safe",
    "transcript",
    "file",
    "put",
    "additional",
    "argument",
    "give",
    "default",
    "false",
    "say",
    "sentiment",
    "analysis",
    "equals",
    "true",
    "pass",
    "pass",
    "get",
    "transcription",
    "result",
    "l",
    "also",
    "needs",
    "parameter",
    "transcribe",
    "needs",
    "parameter",
    "needs",
    "parameter",
    "json",
    "data",
    "sent",
    "put",
    "sentiment",
    "analysis",
    "equals",
    "true",
    "false",
    "need",
    "course",
    "also",
    "want",
    "save",
    "check",
    "parameter",
    "true",
    "create",
    "separate",
    "file",
    "say",
    "file",
    "name",
    "equals",
    "title",
    "plus",
    "let",
    "call",
    "underscore",
    "center",
    "man",
    "dot",
    "json",
    "say",
    "open",
    "file",
    "name",
    "write",
    "mode",
    "f",
    "import",
    "json",
    "top",
    "import",
    "json",
    "simply",
    "say",
    "json",
    "dot",
    "dump",
    "first",
    "extract",
    "infos",
    "course",
    "call",
    "sentiments",
    "equals",
    "data",
    "key",
    "look",
    "documentation",
    "see",
    "chase",
    "response",
    "additional",
    "key",
    "sentiment",
    "analysis",
    "results",
    "use",
    "dump",
    "sentiments",
    "file",
    "also",
    "want",
    "say",
    "indent",
    "equals",
    "four",
    "make",
    "little",
    "bit",
    "readable",
    "call",
    "function",
    "see",
    "underscore",
    "name",
    "equals",
    "equals",
    "underscore",
    "main",
    "want",
    "call",
    "safe",
    "video",
    "sentiments",
    "url",
    "one",
    "let",
    "copy",
    "paste",
    "let",
    "run",
    "main",
    "py",
    "file",
    "hope",
    "everything",
    "works",
    "website",
    "downloaded",
    "transcripts",
    "start",
    "looks",
    "good",
    "let",
    "wait",
    "alright",
    "successful",
    "transcript",
    "saved",
    "look",
    "data",
    "folder",
    "get",
    "transcript",
    "video",
    "also",
    "see",
    "json",
    "file",
    "sentiments",
    "sentiment",
    "get",
    "text",
    "sentence",
    "example",
    "one",
    "exception",
    "smaller",
    "notch",
    "iphone",
    "13",
    "seem",
    "new",
    "first",
    "glance",
    "start",
    "using",
    "flagship",
    "start",
    "appreciate",
    "bunch",
    "welcome",
    "upgrades",
    "get",
    "start",
    "end",
    "time",
    "get",
    "sentiment",
    "positive",
    "also",
    "get",
    "confidence",
    "pretty",
    "high",
    "next",
    "example",
    "new",
    "iphone",
    "display",
    "brighter",
    "battery",
    "life",
    "longer",
    "apple",
    "improved",
    "blah",
    "blah",
    "blah",
    "also",
    "sentiment",
    "positive",
    "still",
    "flaws",
    "sentiment",
    "negative",
    "works",
    "pretty",
    "well",
    "yeah",
    "apply",
    "sentiment",
    "analysis",
    "assembly",
    "api",
    "want",
    "show",
    "little",
    "bit",
    "code",
    "could",
    "analyze",
    "example",
    "comment",
    "need",
    "download",
    "read",
    "json",
    "file",
    "store",
    "positives",
    "negatives",
    "neutrals",
    "iterate",
    "data",
    "extract",
    "text",
    "text",
    "also",
    "extract",
    "sentiment",
    "check",
    "positive",
    "negative",
    "neutral",
    "appended",
    "corresponding",
    "list",
    "calculate",
    "length",
    "list",
    "print",
    "number",
    "positives",
    "negatives",
    "neutrals",
    "also",
    "example",
    "calculate",
    "positive",
    "ratio",
    "ignore",
    "neutrals",
    "simply",
    "number",
    "positives",
    "divided",
    "number",
    "positives",
    "plus",
    "number",
    "negatives",
    "save",
    "run",
    "get",
    "number",
    "positives",
    "38",
    "four",
    "negatives",
    "positive",
    "ratio",
    "90",
    "get",
    "pretty",
    "quick",
    "overview",
    "review",
    "example",
    "yeah",
    "think",
    "sentiment",
    "classification",
    "feature",
    "applied",
    "many",
    "different",
    "use",
    "cases",
    "cool",
    "yeah",
    "hope",
    "really",
    "enjoyed",
    "project",
    "would",
    "really",
    "cool",
    "could",
    "display",
    "information",
    "nice",
    "looking",
    "web",
    "app",
    "actually",
    "one",
    "thing",
    "learn",
    "next",
    "tutorial",
    "together",
    "misra",
    "let",
    "move",
    "next",
    "project",
    "right",
    "time",
    "build",
    "podcast",
    "summarization",
    "app",
    "also",
    "going",
    "build",
    "web",
    "interface",
    "application",
    "project",
    "going",
    "use",
    "assembly",
    "api",
    "api",
    "offers",
    "chapter",
    "isation",
    "summarization",
    "features",
    "going",
    "get",
    "podcast",
    "listen",
    "notes",
    "api",
    "let",
    "get",
    "app",
    "going",
    "look",
    "like",
    "done",
    "get",
    "episode",
    "id",
    "listen",
    "notes",
    "api",
    "show",
    "click",
    "button",
    "give",
    "us",
    "first",
    "title",
    "podcast",
    "image",
    "name",
    "episode",
    "able",
    "see",
    "different",
    "chapters",
    "start",
    "episode",
    "click",
    "expanders",
    "able",
    "read",
    "summary",
    "chapter",
    "episode",
    "quite",
    "exciting",
    "start",
    "building",
    "front",
    "end",
    "application",
    "let",
    "start",
    "building",
    "project",
    "like",
    "previous",
    "ones",
    "going",
    "main",
    "script",
    "going",
    "supporting",
    "script",
    "api",
    "communication",
    "supporting",
    "functions",
    "want",
    "use",
    "built",
    "exact",
    "one",
    "third",
    "project",
    "project",
    "need",
    "update",
    "change",
    "things",
    "start",
    "podcast",
    "summarization",
    "first",
    "thing",
    "want",
    "update",
    "actually",
    "need",
    "upload",
    "endpoint",
    "anymore",
    "going",
    "go",
    "ahead",
    "delete",
    "one",
    "transcripts",
    "going",
    "sorry",
    "podcasts",
    "going",
    "received",
    "listen",
    "notes",
    "api",
    "going",
    "somewhere",
    "internet",
    "download",
    "computer",
    "immediately",
    "tell",
    "assembly",
    "ai",
    "hey",
    "audio",
    "file",
    "address",
    "audio",
    "file",
    "want",
    "transcribe",
    "able",
    "download",
    "upload",
    "needed",
    "also",
    "need",
    "upload",
    "function",
    "also",
    "chunk",
    "size",
    "relevant",
    "anymore",
    "right",
    "good",
    "next",
    "thing",
    "want",
    "set",
    "listen",
    "notes",
    "api",
    "communication",
    "going",
    "use",
    "assembly",
    "ai",
    "create",
    "summaries",
    "podcasts",
    "get",
    "podcasts",
    "listen",
    "notes",
    "never",
    "heard",
    "listen",
    "nose",
    "basically",
    "database",
    "podcasts",
    "think",
    "nearly",
    "podcasts",
    "search",
    "podcasts",
    "example",
    "one",
    "favorites",
    "99",
    "invisible",
    "able",
    "get",
    "information",
    "plus",
    "episodes",
    "search",
    "episodes",
    "like",
    "going",
    "listeners",
    "going",
    "send",
    "episode",
    "id",
    "like",
    "specific",
    "episode",
    "id",
    "find",
    "platform",
    "let",
    "say",
    "want",
    "get",
    "latest",
    "episode",
    "99",
    "invisible",
    "go",
    "episode",
    "page",
    "go",
    "use",
    "api",
    "fetch",
    "episode",
    "see",
    "id",
    "id",
    "specific",
    "id",
    "episode",
    "using",
    "id",
    "able",
    "get",
    "episode",
    "send",
    "assembly",
    "ai",
    "exactly",
    "id",
    "need",
    "application",
    "get",
    "first",
    "course",
    "need",
    "listen",
    "notes",
    "endpoints",
    "listen",
    "node",
    "bunch",
    "different",
    "endpoints",
    "one",
    "need",
    "episode",
    "endpoint",
    "get",
    "episode",
    "information",
    "name",
    "listen",
    "notes",
    "episode",
    "point",
    "one",
    "course",
    "also",
    "need",
    "header",
    "authenticate",
    "header",
    "going",
    "need",
    "put",
    "api",
    "key",
    "go",
    "listen",
    "nose",
    "create",
    "account",
    "get",
    "api",
    "key",
    "going",
    "go",
    "paste",
    "know",
    "importing",
    "api",
    "key",
    "assembly",
    "yeah",
    "also",
    "going",
    "import",
    "api",
    "key",
    "listen",
    "notes",
    "going",
    "send",
    "requests",
    "listen",
    "notes",
    "call",
    "listen",
    "notes",
    "heather",
    "assembly",
    "ai",
    "heather",
    "listen",
    "knows",
    "named",
    "x",
    "listen",
    "api",
    "key",
    "alright",
    "first",
    "thing",
    "want",
    "build",
    "new",
    "function",
    "able",
    "get",
    "episode",
    "id",
    "give",
    "us",
    "url",
    "podcast",
    "audio",
    "file",
    "call",
    "one",
    "get",
    "episode",
    "audio",
    "euro",
    "going",
    "get",
    "episode",
    "id",
    "going",
    "send",
    "get",
    "request",
    "listen",
    "notes",
    "let",
    "build",
    "url",
    "first",
    "url",
    "going",
    "consist",
    "listen",
    "notes",
    "episode",
    "endpoint",
    "dash",
    "plus",
    "episode",
    "id",
    "going",
    "send",
    "get",
    "request",
    "zero",
    "call",
    "response",
    "get",
    "response",
    "last",
    "thing",
    "need",
    "course",
    "headers",
    "authentication",
    "one",
    "called",
    "listen",
    "notes",
    "headers",
    "ever",
    "able",
    "get",
    "url",
    "episode",
    "id",
    "information",
    "going",
    "sent",
    "us",
    "json",
    "format",
    "way",
    "able",
    "see",
    "maybe",
    "let",
    "try",
    "first",
    "see",
    "works",
    "going",
    "import",
    "api",
    "communications",
    "import",
    "everything",
    "make",
    "simple",
    "python",
    "script",
    "going",
    "call",
    "get",
    "episode",
    "audio",
    "euro",
    "use",
    "episode",
    "id",
    "found",
    "one",
    "keep",
    "things",
    "simple",
    "result",
    "print",
    "response",
    "get",
    "listen",
    "notes",
    "let",
    "run",
    "see",
    "happens",
    "right",
    "really",
    "long",
    "maybe",
    "use",
    "pretty",
    "print",
    "make",
    "readable",
    "print",
    "instead",
    "use",
    "pretty",
    "print",
    "okay",
    "let",
    "right",
    "slightly",
    "better",
    "let",
    "see",
    "kind",
    "information",
    "working",
    "nice",
    "get",
    "audio",
    "url",
    "url",
    "audio",
    "let",
    "see",
    "takes",
    "us",
    "yeah",
    "audio",
    "podcast",
    "hear",
    "aerocity",
    "roman",
    "advance",
    "halted",
    "nice",
    "alright",
    "exactly",
    "need",
    "want",
    "also",
    "get",
    "extra",
    "information",
    "podcast",
    "want",
    "display",
    "way",
    "definitely",
    "use",
    "plus",
    "blade",
    "description",
    "episode",
    "whether",
    "explicit",
    "content",
    "image",
    "episode",
    "extra",
    "information",
    "podcast",
    "like",
    "facebook",
    "google",
    "handle",
    "etc",
    "get",
    "lot",
    "information",
    "want",
    "make",
    "web",
    "application",
    "interface",
    "even",
    "interesting",
    "interactive",
    "course",
    "include",
    "application",
    "return",
    "data",
    "audio",
    "actually",
    "return",
    "order",
    "know",
    "information",
    "might",
    "well",
    "extract",
    "things",
    "get",
    "thumbnail",
    "episode",
    "name",
    "podcast",
    "title",
    "episode",
    "example",
    "like",
    "said",
    "display",
    "let",
    "audio",
    "euro",
    "also",
    "get",
    "episode",
    "thumbnail",
    "thumbnail",
    "get",
    "podcast",
    "title",
    "would",
    "podcasts",
    "podcast",
    "specific",
    "information",
    "get",
    "title",
    "lastly",
    "episode",
    "title",
    "thing",
    "title",
    "pass",
    "information",
    "back",
    "episode",
    "thumbnail",
    "episode",
    "title",
    "podcast",
    "title",
    "really",
    "need",
    "change",
    "much",
    "rest",
    "functions",
    "example",
    "transcribe",
    "poll",
    "get",
    "transcription",
    "results",
    "already",
    "built",
    "beforehand",
    "thing",
    "need",
    "change",
    "going",
    "sentiment",
    "analysis",
    "want",
    "use",
    "auto",
    "chapters",
    "features",
    "assembly",
    "ai",
    "going",
    "rename",
    "chapters",
    "name",
    "variable",
    "important",
    "keep",
    "readability",
    "probably",
    "better",
    "change",
    "chapters",
    "variable",
    "need",
    "change",
    "name",
    "chapters",
    "sending",
    "request",
    "assembly",
    "ai",
    "needs",
    "know",
    "want",
    "chapters",
    "else",
    "also",
    "updated",
    "name",
    "heather",
    "heather",
    "assembly",
    "ai",
    "heather",
    "polling",
    "need",
    "change",
    "anything",
    "asking",
    "transcription",
    "done",
    "get",
    "transcription",
    "result",
    "url",
    "want",
    "change",
    "chapters",
    "one",
    "thing",
    "want",
    "change",
    "small",
    "normally",
    "waiting",
    "30",
    "seconds",
    "want",
    "wait",
    "60",
    "seconds",
    "podcast",
    "episodes",
    "tend",
    "little",
    "bit",
    "longer",
    "want",
    "wait",
    "little",
    "bit",
    "longer",
    "asking",
    "assembly",
    "ai",
    "transcription",
    "ready",
    "another",
    "change",
    "main",
    "work",
    "going",
    "happen",
    "save",
    "transcript",
    "function",
    "main",
    "change",
    "going",
    "need",
    "save",
    "transcript",
    "function",
    "uploading",
    "audio",
    "assembly",
    "ai",
    "getting",
    "result",
    "back",
    "instead",
    "time",
    "going",
    "episode",
    "id",
    "going",
    "get",
    "url",
    "listen",
    "notes",
    "going",
    "pass",
    "assembly",
    "ai",
    "start",
    "transcription",
    "want",
    "instead",
    "url",
    "title",
    "give",
    "say",
    "transcript",
    "episode",
    "id",
    "run",
    "get",
    "episode",
    "audio",
    "url",
    "oops",
    "inside",
    "save",
    "transcript",
    "result",
    "getting",
    "order",
    "roll",
    "episode",
    "thumbnail",
    "episode",
    "title",
    "podcast",
    "title",
    "sentiment",
    "analysis",
    "order",
    "chapters",
    "need",
    "pass",
    "order",
    "get",
    "transcription",
    "results",
    "url",
    "get",
    "transcription",
    "result",
    "url",
    "gets",
    "order",
    "url",
    "url",
    "chapters",
    "defined",
    "know",
    "want",
    "hoses",
    "coal",
    "true",
    "next",
    "thing",
    "want",
    "deal",
    "response",
    "get",
    "assembly",
    "ai",
    "let",
    "first",
    "see",
    "response",
    "assembly",
    "ai",
    "looks",
    "like",
    "auto",
    "chapters",
    "let",
    "deal",
    "let",
    "fix",
    "problems",
    "save",
    "file",
    "comment",
    "order",
    "chapters",
    "main",
    "thing",
    "want",
    "see",
    "result",
    "looks",
    "like",
    "right",
    "pretty",
    "print",
    "data",
    "data",
    "already",
    "json",
    "format",
    "transcribe",
    "yes",
    "yeah",
    "show",
    "going",
    "comment",
    "know",
    "idea",
    "response",
    "looks",
    "like",
    "run",
    "pass",
    "episode",
    "id",
    "save",
    "transcript",
    "oh",
    "still",
    "printing",
    "one",
    "actually",
    "stop",
    "printing",
    "response",
    "listen",
    "notes",
    "started",
    "alright",
    "got",
    "results",
    "let",
    "see",
    "looks",
    "like",
    "lot",
    "information",
    "let",
    "scroll",
    "top",
    "wanted",
    "chapter",
    "basically",
    "let",
    "see",
    "chapter",
    "information",
    "includes",
    "see",
    "one",
    "chapter",
    "another",
    "chapter",
    "chapter",
    "starting",
    "point",
    "ending",
    "point",
    "gist",
    "chapter",
    "really",
    "quickly",
    "chapter",
    "headline",
    "chapter",
    "summary",
    "couple",
    "sentences",
    "happening",
    "chapter",
    "presenter",
    "talking",
    "want",
    "show",
    "information",
    "application",
    "right",
    "web",
    "interface",
    "want",
    "right",
    "extract",
    "information",
    "response",
    "get",
    "assembly",
    "ai",
    "save",
    "somewhere",
    "visualize",
    "stream",
    "application",
    "undo",
    "commenting",
    "also",
    "call",
    "file",
    "episode",
    "id",
    "episode",
    "id",
    "x",
    "always",
    "going",
    "say",
    "transcript",
    "know",
    "touch",
    "much",
    "start",
    "another",
    "file",
    "let",
    "call",
    "chapters",
    "file",
    "name",
    "one",
    "episode",
    "id",
    "plus",
    "maybe",
    "let",
    "call",
    "like",
    "chapters",
    "txt",
    "right",
    "chapters",
    "another",
    "file",
    "going",
    "keep",
    "chapter",
    "information",
    "somewhere",
    "else",
    "going",
    "write",
    "information",
    "got",
    "assembly",
    "ai",
    "specifically",
    "chapter",
    "information",
    "also",
    "going",
    "include",
    "information",
    "got",
    "lesson",
    "notes",
    "api",
    "one",
    "mistake",
    "want",
    "text",
    "file",
    "want",
    "json",
    "file",
    "easier",
    "parse",
    "easier",
    "read",
    "later",
    "first",
    "thing",
    "want",
    "chapters",
    "going",
    "get",
    "data",
    "variable",
    "called",
    "chapter",
    "let",
    "check",
    "section",
    "called",
    "chapters",
    "yeah",
    "let",
    "start",
    "say",
    "episode",
    "data",
    "first",
    "let",
    "include",
    "chapters",
    "call",
    "chapters",
    "inside",
    "episode",
    "data",
    "want",
    "want",
    "episode",
    "thumbnail",
    "want",
    "episode",
    "title",
    "want",
    "podcast",
    "title",
    "information",
    "one",
    "place",
    "saved",
    "file",
    "system",
    "read",
    "whenever",
    "want",
    "display",
    "user",
    "finally",
    "dump",
    "file",
    "sewed",
    "data",
    "let",
    "user",
    "know",
    "transcript",
    "saved",
    "part",
    "need",
    "error",
    "say",
    "error",
    "return",
    "true",
    "got",
    "far",
    "already",
    "till",
    "get",
    "url",
    "based",
    "episode",
    "id",
    "listen",
    "notes",
    "send",
    "url",
    "ai",
    "gets",
    "audio",
    "chapters",
    "information",
    "save",
    "file",
    "let",
    "see",
    "works",
    "well",
    "running",
    "start",
    "stream",
    "application",
    "run",
    "main",
    "view",
    "course",
    "need",
    "call",
    "save",
    "transcript",
    "okay",
    "open",
    "run",
    "application",
    "let",
    "also",
    "start",
    "building",
    "assumed",
    "application",
    "never",
    "heard",
    "streamlet",
    "really",
    "easy",
    "way",
    "start",
    "building",
    "web",
    "interfaces",
    "application",
    "specifically",
    "python",
    "simple",
    "use",
    "simple",
    "api",
    "simple",
    "library",
    "call",
    "import",
    "streamlet",
    "see",
    "wanted",
    "use",
    "simply",
    "let",
    "say",
    "want",
    "know",
    "put",
    "title",
    "application",
    "need",
    "sd",
    "title",
    "show",
    "title",
    "run",
    "separately",
    "show",
    "works",
    "run",
    "applications",
    "need",
    "say",
    "assume",
    "run",
    "mean",
    "pi",
    "stream",
    "installed",
    "computer",
    "like",
    "python",
    "library",
    "need",
    "use",
    "pip",
    "say",
    "pip",
    "install",
    "streamer",
    "good",
    "go",
    "unless",
    "make",
    "mistake",
    "call",
    "stream",
    "capital",
    "case",
    "needs",
    "lowercase",
    "let",
    "alright",
    "actually",
    "application",
    "thing",
    "showing",
    "right",
    "title",
    "know",
    "want",
    "look",
    "like",
    "start",
    "building",
    "elements",
    "application",
    "first",
    "thing",
    "know",
    "strikes",
    "us",
    "sidebar",
    "title",
    "says",
    "podcast",
    "summaries",
    "start",
    "showing",
    "information",
    "information",
    "got",
    "api",
    "using",
    "let",
    "put",
    "sidebar",
    "maybe",
    "let",
    "let",
    "fix",
    "title",
    "first",
    "want",
    "say",
    "podcast",
    "summaries",
    "title",
    "says",
    "podcast",
    "summaries",
    "even",
    "say",
    "welcome",
    "application",
    "creates",
    "podcast",
    "summaries",
    "let",
    "see",
    "maybe",
    "wo",
    "long",
    "see",
    "let",
    "create",
    "sidebar",
    "quite",
    "simple",
    "call",
    "streamlet",
    "sidebar",
    "dot",
    "texts",
    "input",
    "yeah",
    "know",
    "say",
    "please",
    "input",
    "episode",
    "id",
    "also",
    "button",
    "end",
    "sidebar",
    "says",
    "get",
    "podcast",
    "summary",
    "maybe",
    "exclamation",
    "point",
    "let",
    "run",
    "okay",
    "looking",
    "like",
    "says",
    "welcome",
    "application",
    "creates",
    "podcast",
    "summaries",
    "put",
    "episode",
    "id",
    "say",
    "get",
    "podcast",
    "summary",
    "see",
    "running",
    "running",
    "forgot",
    "comment",
    "one",
    "actually",
    "running",
    "whole",
    "application",
    "stop",
    "way",
    "displaying",
    "whatever",
    "get",
    "back",
    "api",
    "stop",
    "application",
    "looking",
    "less",
    "like",
    "want",
    "look",
    "like",
    "let",
    "wait",
    "chapter",
    "results",
    "printed",
    "file",
    "see",
    "looks",
    "like",
    "start",
    "parsing",
    "showing",
    "user",
    "streaming",
    "application",
    "okay",
    "transcription",
    "saved",
    "auto",
    "chapter",
    "creation",
    "done",
    "let",
    "take",
    "look",
    "looks",
    "like",
    "chapter",
    "section",
    "episode",
    "thumbnail",
    "episode",
    "title",
    "podcast",
    "title",
    "good",
    "chapters",
    "chapter",
    "numbers",
    "inside",
    "chapter",
    "summary",
    "headline",
    "start",
    "end",
    "looks",
    "good",
    "let",
    "start",
    "showing",
    "first",
    "thing",
    "want",
    "show",
    "course",
    "like",
    "beginning",
    "like",
    "showed",
    "beginning",
    "name",
    "episode",
    "maybe",
    "name",
    "podcast",
    "plus",
    "name",
    "episode",
    "episode",
    "thumbnail",
    "going",
    "show",
    "using",
    "streamlet",
    "going",
    "header",
    "include",
    "podcast",
    "title",
    "maybe",
    "dash",
    "episode",
    "title",
    "see",
    "yet",
    "first",
    "need",
    "open",
    "file",
    "includes",
    "things",
    "file",
    "includes",
    "things",
    "episode",
    "id",
    "underscore",
    "chapters",
    "jason",
    "started",
    "file",
    "name",
    "would",
    "episode",
    "underscore",
    "chapters",
    "json",
    "get",
    "episode",
    "id",
    "get",
    "episode",
    "id",
    "text",
    "input",
    "user",
    "going",
    "input",
    "episode",
    "id",
    "going",
    "save",
    "variable",
    "way",
    "file",
    "name",
    "need",
    "open",
    "file",
    "let",
    "call",
    "data",
    "example",
    "need",
    "import",
    "json",
    "course",
    "loaded",
    "variable",
    "data",
    "variable",
    "data",
    "chapter",
    "first",
    "let",
    "get",
    "chapters",
    "data",
    "chapters",
    "want",
    "get",
    "podcast",
    "title",
    "episode",
    "title",
    "let",
    "change",
    "names",
    "episode",
    "title",
    "also",
    "want",
    "nail",
    "call",
    "thumbnail",
    "see",
    "episode",
    "thumbnail",
    "alright",
    "thumbnail",
    "already",
    "showing",
    "podcast",
    "title",
    "episode",
    "title",
    "streaming",
    "header",
    "show",
    "image",
    "thumbnail",
    "streamlet",
    "image",
    "function",
    "point",
    "next",
    "thing",
    "want",
    "show",
    "chapters",
    "course",
    "one",
    "thing",
    "example",
    "use",
    "loop",
    "could",
    "say",
    "chap",
    "chapters",
    "know",
    "say",
    "stream",
    "right",
    "show",
    "chap",
    "one",
    "way",
    "going",
    "lot",
    "texts",
    "one",
    "another",
    "really",
    "nice",
    "want",
    "like",
    "original",
    "one",
    "showed",
    "beginning",
    "want",
    "expanders",
    "quite",
    "easy",
    "create",
    "expanded",
    "restreaming",
    "say",
    "stream",
    "expander",
    "want",
    "right",
    "kind",
    "information",
    "want",
    "expander",
    "title",
    "expander",
    "write",
    "want",
    "title",
    "whatever",
    "want",
    "inside",
    "expander",
    "going",
    "write",
    "inside",
    "need",
    "use",
    "stream",
    "let",
    "think",
    "going",
    "inside",
    "expander",
    "inside",
    "expander",
    "want",
    "summary",
    "think",
    "called",
    "summary",
    "let",
    "check",
    "json",
    "file",
    "chapters",
    "summary",
    "called",
    "summary",
    "yes",
    "want",
    "summary",
    "title",
    "expander",
    "want",
    "gist",
    "chapter",
    "chapter",
    "going",
    "show",
    "expanders",
    "chapter",
    "expanders",
    "title",
    "expander",
    "gist",
    "chapter",
    "inside",
    "expander",
    "going",
    "summary",
    "chapter",
    "let",
    "run",
    "see",
    "looks",
    "let",
    "first",
    "make",
    "sure",
    "everything",
    "works",
    "title",
    "asked",
    "episode",
    "id",
    "user",
    "button",
    "starts",
    "process",
    "happen",
    "call",
    "button",
    "information",
    "button",
    "variable",
    "information",
    "whether",
    "button",
    "pressed",
    "want",
    "part",
    "part",
    "happen",
    "visualization",
    "display",
    "part",
    "happen",
    "button",
    "pressed",
    "going",
    "wrap",
    "condition",
    "otherwise",
    "going",
    "happen",
    "yes",
    "right",
    "someone",
    "presses",
    "button",
    "nothing",
    "really",
    "happened",
    "also",
    "need",
    "add",
    "action",
    "button",
    "going",
    "going",
    "say",
    "click",
    "button",
    "clicked",
    "want",
    "happen",
    "transcript",
    "file",
    "run",
    "going",
    "call",
    "onclick",
    "argument",
    "also",
    "arguments",
    "right",
    "pass",
    "arguments",
    "function",
    "call",
    "button",
    "tupple",
    "write",
    "variable",
    "argument",
    "passing",
    "function",
    "first",
    "one",
    "second",
    "one",
    "empty",
    "button",
    "clicked",
    "one",
    "run",
    "able",
    "see",
    "information",
    "application",
    "let",
    "run",
    "see",
    "happens",
    "yeah",
    "need",
    "run",
    "streamlined",
    "application",
    "time",
    "streamline",
    "run",
    "main",
    "py",
    "close",
    "old",
    "one",
    "know",
    "difference",
    "one",
    "example",
    "beginning",
    "alright",
    "want",
    "get",
    "podcast",
    "want",
    "display",
    "get",
    "one",
    "let",
    "get",
    "podcast",
    "summary",
    "title",
    "welcome",
    "application",
    "creates",
    "podcast",
    "summaries",
    "okay",
    "maybe",
    "bit",
    "long",
    "shorten",
    "name",
    "podcast",
    "name",
    "episode",
    "number",
    "episode",
    "also",
    "missing",
    "middle",
    "chapters",
    "apparently",
    "1234567",
    "chapters",
    "assembly",
    "api",
    "able",
    "find",
    "e",
    "chapter",
    "gist",
    "chapter",
    "title",
    "expander",
    "chapter",
    "summary",
    "valon",
    "one",
    "last",
    "thing",
    "want",
    "add",
    "start",
    "end",
    "point",
    "start",
    "point",
    "chapter",
    "want",
    "show",
    "like",
    "long",
    "chapter",
    "maybe",
    "let",
    "want",
    "see",
    "json",
    "file",
    "looks",
    "start",
    "looks",
    "like",
    "numbers",
    "might",
    "look",
    "bit",
    "random",
    "basically",
    "milliseconds",
    "wanting",
    "turn",
    "minutes",
    "seconds",
    "applicable",
    "hours",
    "minutes",
    "seconds",
    "already",
    "function",
    "need",
    "know",
    "work",
    "long",
    "time",
    "basically",
    "get",
    "milliseconds",
    "get",
    "milliseconds",
    "get",
    "seconds",
    "many",
    "seconds",
    "many",
    "minutes",
    "many",
    "hours",
    "basically",
    "counting",
    "hours",
    "everything",
    "top",
    "hour",
    "mentioned",
    "minute",
    "add",
    "hour",
    "everything",
    "add",
    "minute",
    "pointed",
    "seconds",
    "return",
    "say",
    "start",
    "time",
    "either",
    "hours",
    "minutes",
    "seconds",
    "hours",
    "say",
    "zero",
    "something",
    "something",
    "show",
    "minutes",
    "seconds",
    "going",
    "show",
    "within",
    "expander",
    "title",
    "know",
    "show",
    "dash",
    "say",
    "get",
    "clean",
    "time",
    "want",
    "chapter",
    "start",
    "let",
    "see",
    "start",
    "okay",
    "right",
    "let",
    "run",
    "one",
    "time",
    "see",
    "application",
    "looks",
    "like",
    "awesome",
    "okay",
    "application",
    "sidebar",
    "input",
    "episode",
    "id",
    "get",
    "listen",
    "notes",
    "say",
    "get",
    "podcast",
    "summary",
    "show",
    "nice",
    "title",
    "tie",
    "lot",
    "podcasts",
    "title",
    "episode",
    "show",
    "thumbnail",
    "episode",
    "chapter",
    "showed",
    "gist",
    "chapter",
    "kind",
    "like",
    "headline",
    "chapter",
    "started",
    "click",
    "expander",
    "expand",
    "get",
    "summary",
    "chapter",
    "set",
    "achieve",
    "hope",
    "able",
    "follow",
    "along",
    "forget",
    "go",
    "grab",
    "code",
    "github",
    "repository",
    "welcome",
    "final",
    "project",
    "one",
    "learn",
    "bunch",
    "new",
    "exciting",
    "technologies",
    "first",
    "learn",
    "real",
    "time",
    "speech",
    "recognition",
    "python",
    "learn",
    "use",
    "open",
    "ai",
    "api",
    "build",
    "virtual",
    "assistant",
    "chatbot",
    "finally",
    "learn",
    "little",
    "bit",
    "websockets",
    "use",
    "async",
    "python",
    "think",
    "going",
    "really",
    "fun",
    "first",
    "let",
    "show",
    "final",
    "projects",
    "run",
    "code",
    "start",
    "talking",
    "bot",
    "ask",
    "questions",
    "name",
    "old",
    "best",
    "ice",
    "cream",
    "see",
    "works",
    "think",
    "super",
    "exciting",
    "let",
    "get",
    "started",
    "alright",
    "new",
    "project",
    "folder",
    "api",
    "secrets",
    "file",
    "new",
    "file",
    "first",
    "thing",
    "going",
    "set",
    "real",
    "time",
    "speech",
    "recognition",
    "detailed",
    "blog",
    "post",
    "assembly",
    "api",
    "block",
    "walk",
    "step",
    "step",
    "first",
    "need",
    "pi",
    "audio",
    "microphone",
    "recording",
    "thing",
    "learned",
    "part",
    "one",
    "use",
    "websockets",
    "use",
    "assembly",
    "ai",
    "real",
    "time",
    "speech",
    "recognition",
    "feature",
    "works",
    "websockets",
    "create",
    "function",
    "send",
    "data",
    "microphone",
    "recording",
    "also",
    "function",
    "receive",
    "data",
    "whatever",
    "want",
    "order",
    "copy",
    "paste",
    "let",
    "actually",
    "code",
    "together",
    "let",
    "get",
    "started",
    "one",
    "note",
    "order",
    "use",
    "real",
    "time",
    "feature",
    "need",
    "upgrade",
    "account",
    "though",
    "yeah",
    "anyway",
    "let",
    "get",
    "started",
    "let",
    "import",
    "things",
    "need",
    "want",
    "pi",
    "audio",
    "need",
    "websockets",
    "say",
    "import",
    "websockets",
    "third",
    "party",
    "library",
    "showed",
    "beginning",
    "makes",
    "easy",
    "work",
    "websockets",
    "built",
    "top",
    "async",
    "going",
    "build",
    "async",
    "code",
    "also",
    "import",
    "async",
    "also",
    "import",
    "base",
    "need",
    "encode",
    "data",
    "base",
    "64",
    "string",
    "send",
    "import",
    "chasen",
    "receive",
    "chasen",
    "result",
    "save",
    "api",
    "secrets",
    "import",
    "api",
    "key",
    "assembly",
    "api",
    "first",
    "thing",
    "set",
    "set",
    "microphone",
    "recording",
    "use",
    "exact",
    "code",
    "learned",
    "part",
    "one",
    "simply",
    "copy",
    "paste",
    "part",
    "let",
    "copy",
    "paste",
    "set",
    "parameters",
    "pi",
    "audio",
    "instance",
    "create",
    "stream",
    "need",
    "define",
    "url",
    "websocket",
    "find",
    "blog",
    "post",
    "homepage",
    "copy",
    "paste",
    "url",
    "url",
    "websockets",
    "assembly",
    "real",
    "time",
    "last",
    "part",
    "also",
    "important",
    "say",
    "question",
    "mark",
    "sample",
    "rate",
    "equals",
    "rates",
    "use",
    "make",
    "sure",
    "align",
    "create",
    "one",
    "function",
    "send",
    "receive",
    "data",
    "async",
    "function",
    "say",
    "async",
    "def",
    "call",
    "send",
    "receive",
    "responsible",
    "sending",
    "receiving",
    "data",
    "connect",
    "web",
    "socket",
    "async",
    "context",
    "manager",
    "see",
    "async",
    "web",
    "sockets",
    "dot",
    "connect",
    "specified",
    "parameters",
    "u",
    "l",
    "say",
    "set",
    "ping",
    "time",
    "set",
    "example",
    "want",
    "ping",
    "interval",
    "five",
    "also",
    "need",
    "send",
    "authorization",
    "token",
    "key",
    "parameter",
    "extra",
    "headers",
    "dictionary",
    "key",
    "authorial",
    "session",
    "value",
    "token",
    "say",
    "sync",
    "aes",
    "call",
    "want",
    "say",
    "underscore",
    "w",
    "websocket",
    "first",
    "wait",
    "let",
    "connect",
    "say",
    "await",
    "async",
    "async",
    "dot",
    "sleep",
    "careful",
    "use",
    "timeout",
    "sleep",
    "inside",
    "async",
    "function",
    "use",
    "async",
    "sleep",
    "function",
    "wait",
    "tried",
    "connect",
    "wait",
    "result",
    "say",
    "session",
    "underscore",
    "begins",
    "equals",
    "await",
    "underscore",
    "w",
    "called",
    "r",
    "e",
    "v",
    "received",
    "guess",
    "print",
    "data",
    "see",
    "looks",
    "let",
    "also",
    "print",
    "sending",
    "messages",
    "need",
    "enter",
    "functions",
    "async",
    "functions",
    "say",
    "async",
    "def",
    "sent",
    "simply",
    "say",
    "pass",
    "say",
    "async",
    "def",
    "receive",
    "also",
    "pass",
    "actually",
    "infinite",
    "true",
    "loop",
    "run",
    "infinitely",
    "listen",
    "incoming",
    "data",
    "say",
    "true",
    "let",
    "print",
    "sending",
    "also",
    "say",
    "true",
    "simply",
    "pass",
    "want",
    "spoil",
    "output",
    "need",
    "combine",
    "async",
    "ways",
    "order",
    "say",
    "call",
    "gather",
    "function",
    "called",
    "async",
    "dot",
    "gather",
    "gather",
    "sense",
    "receive",
    "return",
    "two",
    "things",
    "sent",
    "results",
    "receive",
    "results",
    "actually",
    "need",
    "case",
    "finding",
    "function",
    "course",
    "also",
    "run",
    "code",
    "run",
    "infinite",
    "loop",
    "order",
    "call",
    "async",
    "dot",
    "run",
    "send",
    "receive",
    "function",
    "connect",
    "print",
    "sending",
    "time",
    "let",
    "run",
    "hope",
    "works",
    "yeah",
    "already",
    "connected",
    "sending",
    "work",
    "see",
    "put",
    "receive",
    "well",
    "get",
    "lot",
    "outputs",
    "yeah",
    "ca",
    "even",
    "scroll",
    "top",
    "anymore",
    "basically",
    "yeah",
    "printed",
    "working",
    "far",
    "continue",
    "implementing",
    "two",
    "functions",
    "let",
    "implement",
    "send",
    "function",
    "first",
    "wrap",
    "try",
    "except",
    "block",
    "read",
    "microphone",
    "input",
    "say",
    "stream",
    "dot",
    "reads",
    "specify",
    "frames",
    "per",
    "buffer",
    "also",
    "want",
    "say",
    "exception",
    "overflow",
    "equals",
    "false",
    "sometimes",
    "websocket",
    "connection",
    "slow",
    "might",
    "overflow",
    "exception",
    "want",
    "still",
    "work",
    "need",
    "convert",
    "encode",
    "base",
    "say",
    "base",
    "64",
    "b",
    "64",
    "encode",
    "data",
    "decode",
    "utf",
    "eight",
    "assembly",
    "ai",
    "expects",
    "need",
    "convert",
    "json",
    "object",
    "say",
    "json",
    "dump",
    "dictionary",
    "key",
    "audio",
    "data",
    "assembly",
    "ai",
    "needs",
    "put",
    "data",
    "send",
    "also",
    "await",
    "awaits",
    "w",
    "sent",
    "json",
    "data",
    "catch",
    "errors",
    "let",
    "copy",
    "blog",
    "post",
    "ones",
    "let",
    "copy",
    "paste",
    "um",
    "accept",
    "websockets",
    "exceptions",
    "connection",
    "closed",
    "error",
    "print",
    "error",
    "make",
    "sure",
    "code",
    "also",
    "break",
    "catch",
    "every",
    "error",
    "best",
    "practice",
    "like",
    "fine",
    "simple",
    "tutorial",
    "assert",
    "wild",
    "true",
    "iteration",
    "also",
    "sleep",
    "yeah",
    "copy",
    "whole",
    "code",
    "paste",
    "code",
    "similar",
    "try",
    "except",
    "course",
    "wait",
    "transcription",
    "result",
    "assembly",
    "ai",
    "say",
    "result",
    "string",
    "equals",
    "wait",
    "w",
    "sresv",
    "convert",
    "dictionary",
    "saying",
    "results",
    "equals",
    "json",
    "dot",
    "load",
    "string",
    "result",
    "string",
    "json",
    "object",
    "python",
    "dictionary",
    "check",
    "keys",
    "get",
    "prompt",
    "actually",
    "transcription",
    "set",
    "say",
    "prompt",
    "equals",
    "results",
    "tests",
    "key",
    "text",
    "also",
    "key",
    "called",
    "message",
    "type",
    "check",
    "prompt",
    "results",
    "key",
    "message",
    "underscore",
    "type",
    "final",
    "transcripts",
    "assembly",
    "talking",
    "already",
    "start",
    "sending",
    "transcript",
    "finished",
    "sentence",
    "another",
    "pass",
    "make",
    "small",
    "corrections",
    "necessary",
    "get",
    "final",
    "transcript",
    "want",
    "final",
    "transcripts",
    "let",
    "print",
    "let",
    "print",
    "prompt",
    "want",
    "use",
    "chatbot",
    "let",
    "print",
    "bots",
    "let",
    "let",
    "simply",
    "print",
    "let",
    "print",
    "random",
    "text",
    "set",
    "next",
    "step",
    "first",
    "want",
    "test",
    "let",
    "say",
    "answer",
    "need",
    "receive",
    "functions",
    "let",
    "clear",
    "run",
    "test",
    "get",
    "error",
    "await",
    "used",
    "future",
    "async",
    "gather",
    "oh",
    "classic",
    "mistake",
    "course",
    "say",
    "await",
    "async",
    "gather",
    "let",
    "run",
    "working",
    "yeah",
    "name",
    "see",
    "transcript",
    "working",
    "stopped",
    "scroll",
    "name",
    "time",
    "get",
    "answer",
    "working",
    "course",
    "want",
    "clever",
    "thing",
    "prompt",
    "use",
    "virtual",
    "assistant",
    "set",
    "open",
    "ai",
    "api",
    "provides",
    "access",
    "gpt",
    "three",
    "perform",
    "wide",
    "variety",
    "natural",
    "language",
    "tasks",
    "order",
    "use",
    "sign",
    "free",
    "get",
    "free",
    "get",
    "free",
    "credits",
    "enough",
    "play",
    "around",
    "actually",
    "super",
    "simple",
    "set",
    "let",
    "create",
    "new",
    "file",
    "call",
    "let",
    "call",
    "open",
    "also",
    "install",
    "say",
    "pip",
    "install",
    "open",
    "api",
    "also",
    "signing",
    "get",
    "api",
    "token",
    "copy",
    "api",
    "secrets",
    "use",
    "import",
    "open",
    "api",
    "also",
    "need",
    "import",
    "secret",
    "api",
    "secrets",
    "import",
    "api",
    "key",
    "open",
    "api",
    "set",
    "say",
    "open",
    "api",
    "dot",
    "api",
    "key",
    "equals",
    "api",
    "key",
    "want",
    "question",
    "answering",
    "open",
    "api",
    "api",
    "actually",
    "super",
    "simple",
    "use",
    "click",
    "examples",
    "see",
    "bunch",
    "different",
    "examples",
    "open",
    "ai",
    "lot",
    "things",
    "example",
    "q",
    "grammar",
    "correction",
    "text",
    "command",
    "classification",
    "lot",
    "different",
    "stuff",
    "let",
    "click",
    "q",
    "scroll",
    "find",
    "code",
    "examples",
    "already",
    "set",
    "api",
    "key",
    "need",
    "grab",
    "let",
    "copy",
    "let",
    "create",
    "helper",
    "function",
    "define",
    "let",
    "call",
    "ask",
    "computer",
    "gets",
    "prompt",
    "input",
    "paste",
    "say",
    "response",
    "equals",
    "open",
    "ai",
    "dot",
    "completion",
    "dot",
    "create",
    "specify",
    "engine",
    "specify",
    "prompt",
    "case",
    "prompt",
    "going",
    "prompt",
    "put",
    "prompt",
    "equals",
    "prompt",
    "parameter",
    "lot",
    "different",
    "parameters",
    "could",
    "check",
    "documentation",
    "case",
    "want",
    "keep",
    "max",
    "tokens",
    "specify",
    "long",
    "result",
    "yeah",
    "let",
    "say",
    "100",
    "fine",
    "need",
    "course",
    "need",
    "return",
    "response",
    "actually",
    "json",
    "object",
    "dictionary",
    "want",
    "extract",
    "first",
    "possible",
    "response",
    "also",
    "send",
    "specify",
    "case",
    "get",
    "one",
    "say",
    "response",
    "key",
    "choices",
    "index",
    "zero",
    "first",
    "choice",
    "key",
    "texts",
    "actual",
    "response",
    "gpt",
    "three",
    "main",
    "thing",
    "say",
    "open",
    "ai",
    "helper",
    "import",
    "ask",
    "come",
    "pewter",
    "receive",
    "functions",
    "say",
    "response",
    "equals",
    "ask",
    "computer",
    "put",
    "parent",
    "response",
    "everything",
    "need",
    "let",
    "clear",
    "run",
    "let",
    "hope",
    "works",
    "name",
    "name",
    "old",
    "right",
    "let",
    "stop",
    "yeah",
    "see",
    "works",
    "build",
    "virtual",
    "assistant",
    "works",
    "real",
    "time",
    "speech",
    "recognition",
    "together",
    "open",
    "ai",
    "yeah",
    "really",
    "hope",
    "enjoyed",
    "project",
    "watched",
    "far",
    "thank",
    "much",
    "following",
    "along",
    "also",
    "hope",
    "see",
    "future",
    "assembly",
    "ai",
    "channel",
    "also",
    "create",
    "lot",
    "content",
    "around",
    "python",
    "speech",
    "recognition",
    "also",
    "machine",
    "learning",
    "please",
    "check",
    "hope",
    "see",
    "soon",
    "bye"
  ],
  "keywords": [
    "course",
    "speech",
    "recognition",
    "python",
    "five",
    "think",
    "two",
    "hi",
    "patrick",
    "data",
    "assembly",
    "ai",
    "text",
    "api",
    "learn",
    "use",
    "also",
    "youtube",
    "post",
    "build",
    "first",
    "project",
    "going",
    "audio",
    "see",
    "information",
    "microphone",
    "save",
    "wav",
    "file",
    "second",
    "using",
    "change",
    "little",
    "bit",
    "start",
    "sentiment",
    "analysis",
    "find",
    "podcasts",
    "web",
    "show",
    "results",
    "last",
    "open",
    "make",
    "hope",
    "let",
    "get",
    "started",
    "alright",
    "part",
    "different",
    "formats",
    "signal",
    "parameters",
    "know",
    "module",
    "load",
    "plot",
    "wave",
    "like",
    "mp3",
    "files",
    "write",
    "code",
    "one",
    "format",
    "means",
    "us",
    "way",
    "actually",
    "work",
    "look",
    "number",
    "channels",
    "example",
    "sample",
    "bytes",
    "frame",
    "rate",
    "parameter",
    "lot",
    "frames",
    "yeah",
    "binary",
    "simple",
    "seconds",
    "long",
    "listen",
    "name",
    "ready",
    "go",
    "create",
    "object",
    "simply",
    "say",
    "dot",
    "give",
    "called",
    "read",
    "extract",
    "print",
    "saying",
    "want",
    "per",
    "run",
    "time",
    "set",
    "whole",
    "works",
    "equals",
    "gets",
    "pass",
    "type",
    "length",
    "much",
    "call",
    "new",
    "underscore",
    "basically",
    "functions",
    "done",
    "close",
    "test",
    "need",
    "install",
    "import",
    "pi",
    "buffer",
    "put",
    "specify",
    "function",
    "zero",
    "end",
    "point",
    "p",
    "l",
    "title",
    "input",
    "library",
    "command",
    "pip",
    "already",
    "stream",
    "true",
    "everything",
    "string",
    "order",
    "case",
    "right",
    "plus",
    "could",
    "well",
    "welcome",
    "transcription",
    "things",
    "request",
    "copy",
    "key",
    "upload",
    "transcribe",
    "next",
    "thing",
    "main",
    "keep",
    "transcript",
    "paste",
    "okay",
    "heather",
    "endpoint",
    "might",
    "variable",
    "send",
    "include",
    "inside",
    "able",
    "response",
    "kind",
    "working",
    "url",
    "really",
    "anymore",
    "json",
    "sending",
    "got",
    "result",
    "instead",
    "id",
    "job",
    "ask",
    "still",
    "polling",
    "yes",
    "needs",
    "return",
    "looks",
    "would",
    "nice",
    "good",
    "calling",
    "wait",
    "30",
    "maybe",
    "error",
    "prompt",
    "user",
    "saved",
    "display",
    "another",
    "dl",
    "download",
    "video",
    "positive",
    "pretty",
    "helper",
    "infos",
    "info",
    "check",
    "click",
    "dictionary",
    "chapters",
    "summaries",
    "podcast",
    "application",
    "chapter",
    "notes",
    "episode",
    "button",
    "summary",
    "thumbnail",
    "expander",
    "websockets",
    "async",
    "receive"
  ]
}