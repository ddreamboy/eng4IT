{
  "text": "Hi, my name is Mosh, and I'm going to be your instructor in this Python course.\nIn this course, you're going to learn everything you need to get started programming in Python.\nPython is one of the most popular programming languages, and every day people use it to do\ncool things like automation, they use it in AI, as well as\nbuilding applications and websites like Instagram and Dropbox. So if you're looking\nfor a job, Python is for you. In this course I'm going to teach you everything \nyou need to get started with Python. We're going to talk about all the core concepts\nin Python, and then we're going to build three Python projects together.\nHere's the first project we're going to build. We're going to learn how to create this beautiful website\nfor an imaginary grocery store. Here on the homepage we can see all\nof the products in the shop, and we also have an admin area for managing the\nstock. We're going to build this using a popular Python framework called Django. \nNow if you have never built a website before, don't worry, I will teach you everything from scratch. \nYou're also going to learn how to use Python in machine learning, or artificial intelligence. \nSo you will learn how to write a Python programming that will predict\nthe music that people like based on their profile. Just like how YouTube\nrecommends videos based on the videos you have watched before. I will also show you \npython to automate boring repetitive tasks that waste your time. \nYou will write a Python program that will process thousands of spreadsheets\nin under a second. I've designed this Python course for anyone who wants to learn\nPython. If you're a beginner, don't worry, I will hold your hand through this entire course. \nYou're not too old or too young, and Python is super easy to learn. You can write your first\nPython program in literally seconds. Plus I'm going to give you plenty\nof exercises to help you build your confidence writing cool Python programs. \nMy name is Mosh, I'm a software engineer with two decades of experience \nand I've taught over 3 million people how to code. I'm super excited to be teaching you\nPython in this course. So I hope you stick around and learn this beautiful \npowerful programming language. \nIn this tutorial I'm going to show you how to download \nand install Python on your computer. So the first thing I want you to do,\nis open up your browser and head over to Python\n.org. On this page click on downloads, \nhere you can see the latest version of Python currently, at the time of recording this video\nthe latest version is python 3.7.2. \nChances are in the future, when you are watching this tutorial, there is a newer \nversion of Python available, don't worry, all the materials you're going to learn in this course \nwill apply to the latest version of Python as well. So let's go ahead\nand download Python 3, alright now, \nlook at your downloads folder, here, we should have Python 3 installer\nsimply double click that, if you're on Windows \nyou're going to see this check box here, add Python to\npython, this is really important, make sure to tick this box, otherwise you're not going to be able to\nfollow this tutorial. If you're on a Mac, \nyou're going to see an installer like this, with this setup wizard we're going to install Python 3\non our computer. So simply click continue, and again, \nand again, and agree with the license agreement, and \ninstall it, this is going to take a few seconds so I'm going\nto pause the recording. \nAlright, we have successfully installed Python 3 on our computer. \nLet's close this. Alright, next we need to install\na code editor, we se a code editor to write our code, just like\nhow we use Microsoft Word to write documents, we use a code editor to write\ncode. Now there are so many code editors out there, the one that I'm going to show you in this\ntutorial is PyCharm. That is one of the most popular code editors \nfor writing Python code. You can get it from jetbrains.com\n/pycharm. Now more accurately pycharm \nis considered an IDE, which is short for integrated development\nenvironment. And that's basically a code editor on steroids, \nit has some additional features that makes it really easy to write code. So\nlet's go ahead and download PyCharm. Now here on the\ndownload page, you can see two versions of PyCharm, one is the professional addition \nwhich has additional features and you have to pay for them. The other is the\ncommunity edition, that is absolutely free, and that's what we're going to use in this tutorial. \nSo, go ahead and download this as well.\nNow, once again look at your downloads folder, once again you should have pycharm \nso double click this, now if you're\nin Windows you're going to see an installation wizard, simply click next, next, next\nuntil you install pycharm. If you're on Mac you need to drag and drop this icon \nonto the applications folder, so drag and drop, \nalright, now let's double click this to run it, \nthe first time we run pycharm we're going to get this warning, because this is an application\nthat we download from the internet. So let's go ahead and open it, \nnext you're going to see this dialogue box for importing some settings, leave this to\ndo not import settings, it doesn't really matter. Okay,\nOn this page, select I've never used PyCharm you can see some keyword\nshortcuts that might be useful in the future, just accept this, and down at the bottom, \nclick the next button. And then next again,\none more time, and then finally start using pycharm. \nSo here's the main page of PyCharm every time you open\nit, click on create new project, \nthis is the location for our project, let's call our project Hello\nWorld. Now before click and create, expand \nthis item here, make sure that base interpreter is set to Python\n3. Python interpreter is basically a program \nthat knows how to execute Python code, it will know how to interpret \nor translate Python instructions into instructions a computer can understand. \nNow, Mac computers, by default come with an older\ninstallation of Python, that's Python 2, it's considered legacy\nwhich means it's no longer maintained or supported. So earlier we downloaded \nPython 3, make sure that this is set to Python 3, if not\nfrom this list, select Python 3.7. \nAlright, now let's go ahead and create this project,\nNow here right click on\nHello World folder and go to new \nPython file, call this file app.py. \nSo by convention, all Python files should have this\npy extension. Alright, let's go ahead,\nnow let's collapse this project panel by clicking here and write our\nfirst python program. Simply type print, pr\nint, all in lowercase, open and close parenthesis, \nand inside these parenthesis, add quotations we\ncan either use single quotes or double quotes, now\nin between the codes write your name. I am Mosh Hamedani, so\nhere, so this is your first Python programming. With these piece of code\nyou can print your name on the screen. Now to run this, go\non the top, under the run menu, click run, \nalso note that there is a shortcut associated with this command, when\nI program I always use shortcuts because that increases my productivity. \nSo here on a Mac computer, the shortcut is control, option, and\nR. On Windows it's different. So let's do that, now\nit's asking where you want to run this, click on app, \ndown below, you should see this little terminal window, this\nis a little window into our program, so here you can see our results for\noutput for our program. In the future as you learn more Python, you'll be\nable to build applications that have a graphical user interface, or gooey. \nThat is a little bit complicated, so for now we're going to use this little\nterminal window to see the results of our program. So as you can see my name is\nprinted here, now as you print code, this window might get in the way so\nalways resize it or minimize itty putting this\nicon here, so this was our first python program. Now\nif you didn't see the result I showed you in this video, use the comment box below and\ntell me what error you encountered, I'll do my best to help you move forward. \nIn this Python tutorial, we're gong to take this program to the next level and make it more interesting. \nSo I'm going to show you how to draw a dog hair. Now as part of\nthis tutorial you will learn how Python code gets executed and you will also learn\nabout a few programming terms. So press enter, and \non line 2 write another print statement, so print, open and close\nparenthesis, add a quotation, now here you want to draw a dog. \nSo, add an o, that is the head of our dog, followed by\n4 hyphens. So this is the body. \nalright, now one more time another print statement with\nquotations, now we need to draw the legs. So add a space. \nFollow it by 4 vertical bars. So, like this, \nso here's a little imaginary dot. Now let's \nrun this program and see what we get. So on the top right corner you should see this play button, \nclick that, there you go, so we have our name and \nright below that we have our imaginary dog. Now what you need to understand \nhere, is that our python code gets executed line by line\nfrom the top. So earlier I told you about Python interpreter \nthat is the program that knows how to translate or interpret \nour Python code into instructions that a computer can understand.\nSo when we run this program by clicking this program here, \npython interpreter starts executing or running our program \nline by line from the top. So first it executes line 1, \nthen, moves onto line 2, and so on. So this is how python \nprograms get executed. Now let me show you something cool. Let's add \nanother print statement, with quotations now\nin between the quotations, add a star or an asterisk, like\nthis. Now after the quotation and before the parenthesis, \nadd a space, once again, add an asterisk, \nspace, 10. What is going on here? Well, \nanywhere we have quotations like here or here\nwe're defining a string, a string is a programming term which means \na series of characters so here we have a string, we also have\na string on line 3, as well as line 2 and line 1. \nNow here, we're multiplying the string by \nnumber 10. So this is the multiplication operator, just like the multiplication \noperator we have in math. So with this piece of code we can\ndraw 10 asterisks on the terminal, let me show you. So let's run this\nprogram one more time, there you go. So we have 10\nasterisks. Now what we have here, this piece of code here, \nis called an expression. An expression is a piece of \ncode that produces a value. So when Python interpreter \ntries to execute line 4, first it will evaluate \nthe code that we put in between parenthesis, so we could evaluate our expressions \nOur expression will produce 10 asterisks and then\nthose asterisks will be printed on the terminal. Now as an exercise \nyou can use these print statements to draw another shape, you can draw a heart, a \nball, whatever you like. I will see you in the next tutorial. \nOne of the questions I get a lot on my channel is\nhow long does it take to learn Python and become job ready? Well there is no single \nanswer. It really depends on you and how much effort and commitment you want to put \ninto this. But I would say if you spend 2 hours every day\nconsistently, after about 3 months you should be able to write \nbasic python programs, but quite honestly, that doesn't get you a job. \nIn order to get a job, you need to specialize in one area,\nwhat do you want to use python for? Do you want to build web applications or\ndesktop applications? Or do you want to use it in machine learning and artificial intelligence?\nSo whatever you want to do you need to take additional courses. \nFor example if you want to become a web developer in addition to learning\nPython, you should also learn about html, some css, some\nJavaScript and Django which is a popular Python framework \nfor building web applications. Learning all these things would take you another \n6 months, so in total you need 9-12 months to become\njob ready. At that point you can get a junior developer job with a \nsalary of about 50-60 thousand dollars a year. Now as you work more\nas you do more Python projects, your resume starts to build and \nyou can ask for $100,000 a year, or 120,000 dollars\na year, depending on where you are, what company, what geographical area, \nit really depends, there is no single answer. So are you excited to\nlearn Python and get started on this career path? If you are, I would encourage you\nto make a commitment and spend 2 hours every day practicing \npython. And use the comment box below and let me know why you are learning \nPython, what do you want to do with it? What's your dream job? I would love to hear your story.\nIn this Python tutorial, you're going to learn about variables, which are one of the most fundamental \nconcepts in programming, they're not specific to Python, they exist \nin pretty much every programming language out there. We use variables \nto temporarily store data in a computer's memory. Here's an example, \nlet's type price = 10, when Python\ninterpreter executes this code, it will allocate some memory, then it will store \nthe number 10 in that memory, and finally it will attach this\nprice label in that memory location. As a metahor\nimagine we have a box. In that box, we have number 10\nand price is the label that we put on the box. Now we can use this label \nanywhere in our program to access the value that we have in that box. \nThis is a very simplified explanation. So now, let's \nprint price on the terminal. Print, now this time we're not going to\nadd quotations, because if we put quotations here, we will see the text \nprice on the terminal. Now the value of the price variable. \nSo, put it in quotations, and type price, \nnow, let's run this program one more time, there you go. So we see 10, \non the terminal. So this is how we define variables, we \nstart with an identifier which is the name of our variable, then, \nan equal sign and finally a value. Now more accurately, when\nthis number 10 is about to be stored in the memory, first it will\nget converted to this binary for presentation. So this number 10, \nis in the decimal system which has all the digits from 0 to 9. \nComputers don't understand all these digits, they only understand \n0s and 1s. So when we store the number 10 in the computer's memory\nfirst it will get converted to it's binary representation which will be \na bunch of 0's and 1's, like 001, 001, whatever \nI don't know. Then it will get stored in the computer's memory. So,\nlet's take this program to the next level. On the second line we can \nupdate the value of this price variable, so we can reset it\nto a new value like 20, now when we run our program, \nwe should see 20, because as I told you before Python interpreter executes our\ncode line by line from the top. So first we set \nthe price to 10, then we reset it to 20, and finally we \nprint it on the terminal, let's run the terminal, there you go, so, \nwe see 20 here, okay? Now these\nnumbers that we have here are whole numbers without a decimal point. \nIn programming, we refer to these numbers as integers. \nBut integer is a number without a decimal point. We can also use\nnumbers with a decimal point for example on line 2, we can define\nanother variable called rating and set it to number\n4.9. Now in programming, we refer to this kind of number as \na floating point number of float for short. So we have integers \nand floats. We can also define a variable and set\nit to a string, for example, name equals \nMosh, we also have another kind of value which is called boolean, \nwhich can be true or false. They are line yes and no in English. \nHere is an example, I'm going to define a variable, is underline\npublished so we use an underscore to separate\nmultiple words in our variables name. We set this to\ntrue, or false. These are\nboolean values. now note that Python is a case \nsensitive language, which means it's sensitive to lower case and upper case letters. \nSo when defining variables we should always use \nlowercase letters, but here false and true are special keywords in the \nlanguage, so if we spell it with a lowercase f, Python doesn't\nunderstand it. You can see we have a red underline here, which indicates an error. \nMake sure to spell this with a capital F, or if you want to set this to true, \nmake sure the T is capital, so in this\nprogram, you're storing simple values in our computer's memory. Simple\nvalues can be numbers, which can be integers or floats\nor they can be strings or booleans. But in Python \nwe can also store complex values like lists and values. And that's what I'm going to show you\nin the future. So before going any further, I want you \nto do a little exercise. Imagine we're going to write a program for a hospital. \nSo we check on a patient named John Smith. He's \n20 years old and is a new patient. I want you to define 3 variables here, \nfor his name, his age, and another variable \nfor if this is a new or an existing patient. So pause the video and spend one\nminute on this exercise. When you're done, come back, continue and see my solution. \nAlright, so here we need\nthree variables, the first one is the patient's name, \nwe set that to John Smith. We can also\ncall this full name, these are both valid names for our variables. \nThe second variable is for the age of our patient. So age \nis 20, and finally we need a variable to tell if this is a new \nor existing patient. That's where we can use a boolean value. \nSo, we define a variable, is new and \nwe set it to true. \nSo, you have learned how to print\nmessages on the terminal window. In this tutorial, I'm going to show you how to \nreceive input from the user. So we're going to write a small program that asks \nthe user's name and then we'll print a greeting message customized\nfor that user. So instead of print we're going to use\ninput. Now both these input and print \nare functions that are built into Python. As a metaphor think \nof the remote control of the TV. On this remote control we have a bunch of \nbuttons, these are the functions built into your tv, you can turn it on,\nturn it off, change the volume and so on. In Python we also have \nfunctions for common tasks such as printing messages, receiving input, \nand so on. So we're going to use the input function, now whenever we\nhave these parenthesis, we're going to say we're calling or executing \nthat function, it's like pressing a button on a remote control. So we're\ngoing to call the input function and in between parenthesis\nwe want to add a string to print something on the terminal, \nwhat is your name? With a question mark followed by\na space. You will see why in a second. So this input function\nwill print this message on the terminal, and then it will wait for the user to\nenter a value. Whatever the user enters this input function will\nreturn. So now we can get that value and store it in the memory using a variable. \nSo we get the result and put it in a variable called \nname. Okay? Now on the second line\nwe want to print a message like Hi John or Hi Mosh or whatever, so, \nprint, quotations Hi with a space,\nnow after the quotation we want to dynamically print\nwhat we have in the name variable. So we had\na plus sign and then name. So here we have\nHi which is a string, we're concatenating or\ncombining the string with another string, that is what we have\nin the name variable. So here's another example of\nan expression. Remember what is an expression? It's a piece of code that\nuses a value. So this expression concatenates or combines \n2 strings. Let's run this program and see what happens. So run\nokay, here is a question, what is your name? Mosh, \nnow note that earlier we added a space after the question mark, we\ndid this, so here in the terminal window the cursor is\nseparated from the question mark, otherwise it would be so close. So let's type\nwhatever here, plus enter, now we get this message, Hi, Mosh. \nNow here's a little exercise for you. I want you to extend this program\nand ask two questions. First all the person's name and then\ntheir favorite color. And then print a message like Mosh likes\nblue. So pause the video, do this exercise and then come back and continue watching. \nAlright, so here's the first question right after that, \nall the input functions one more time, this time we're going to ask a different question. \nWhat is your favorite color? \nNow, we get the new value and store it in the variable\ncalled color, or you could call it favorite underline. \ncolor. Either works. And finally we're going to change\nwhat we pass to the print function, so first we print the name \nthen we concatenate this with a string, here we're going to\ntype likes, we also put one space before and \nafter likes, and once again we concatenate this. \nWith the favorite color. So, favorite color, \nnow let's run this program, so what is your name\nMosh enter, favorite color, blue, enter, \nwe get this message, Mosh likes blue. \nHey guys Mosh here, I just wanted to let you know that\nyou really don't have to memorize anything in this course because I've put together a cheat sheet\nwith summary notes. So you can quickly review the materials in this course. \nThe link is below this video. So I have done my best to create\nthe best possible Python course on Youtube. And I really appreciate\nit if you support my hard work by liking this video and sharing it with\nothers, so they can learn as well. And be sure to subscribe to my channel, for more \ntutorials like this. Alright, now, let's move onto the next tutorial. \nIn this Python tutorial, we're going to write a program that will ask the year that we were born\nin, and then it will calculate our age and print it on the terminal. \nSo, let's start with our input function, input \nlet's print birth here, followed by a colon, \nand a space. Now let's get the return value and store it in a variable, \ncalled birth_year. \nSo as I told you before, we use an underscore to separate multiple words\nNext, we need to calculate the age, so we define another\nvariable called age, and here we do some basic math, \ncurrently we are in 2019, so let's write an expression\nlike this. 2019 - birth\nyear. Now finally let's print \nage on the terminal. Let's run our program and see what happens. \nSo, my birth year is 1982, enter, \noops, we got an error, what is going on here? So \nwhenever you see this message, that means there is something wrong with your program. With the information\nhere, we can find exactly where the error occurred. So, \nnext to the file you can see the file that generated this error, in this case\nthat is app.py. So\ncurrently our program only has a single file, but real complex programs often\nhave hundreds or even thousands of files. So in this file, \non line 2, this is where we got this error, and right\nbelow that we can see the piece of code that generated this error. \nSo that is where we're calculating the age, and right below\nthat you can see the type of error. In this case, we have a type error, and here's the\nmessage. Unsupported operand types for\nsubtraction. Int and str.\nSo int is short for integer and that represents a whole number \nand str is short for string, so here we're subtracting \na string from an integer, and Python doesn't know what to do with it. \nLet me explain. So I'm going to close the terminal window. So after\nthe first line we executed we have this birth year variable set \nto a string, so whatever we type in the terminal is always\ntreated as a string, even if you type the number, in other words, \nwhen we run this program, this birth year variable will be set\nto a string, with four characters. \n1982. This string is different from the actual number\n1982. One is an integer and the other is a string. \nRight? So, back to line 2, where this\nerror occurred. At run time, which means when we run our program\nthis expression on the right side of the assignment operator\nis going to look like this. 2019 - \nstring 1982. Python doesn't know how to\ninterpret or how to evaluate this expression. To fix this problem \nwe need to convert this 1982 into an integer\nand then we'll be able to subtract it from 2019 and that \nis easy. So far you have learned about two built in functions \none is print the other is input. We have a few other functions\nfor converting values into different types. So we have \nint for converting a string into an integer, we also have\nfloat for converting a string into a float, or a number\nwith a decimal point. And we also have bool for converting a string \ninto a  boolean value. So to fix this problem, \nwe need to go back on line 2, \nand pass this birth year variable to the int function like this.\nint parenthesis, like this\nso we pass this string to the int function, int will convert it into an itneger\nand then Python interpreter will be able to evaluate this expression. \nNow let's run this program one more time, so birth\nyear is 1982 enter so I am\n37 years old. In Python we have a useful function\nfor getting the type of variables, for example, let's print the type\nof birth year, so right after line 1, \nlet's print, now here we're going to call another built in function, \ncalled type, and now let's pass birth \nyear, okay, now similarly after line \n3, let's also print the type of age, so\nprint type of age. \nOkay? So let's run our program, so birth year one more\ntime, 1982, okay, here's the result\nso the type of birth year as you can see is a class\nof str or strings, we look at classes in the future so\nfor now don't worry about them, and also below them you cans ee the type of\nthe age variable is int or integer. So\nhere's what you need to take away. Whenever you use the input function, \nyou always get a string, so if you're expecting a numerical value\nyou should always convert that string into an integer or\na float. So here's a little exercise for you. I want you to write a program \nask the user their weight and then convert it to kilograms and print it\non a terminal. So pause the video, do the exercise and when you're ready come back\nto watch it. \nAlright so let's use our input function and ask\nfor the weight in pounds\nhere we get the weight in lbs or pounds\nnow we need to convert this into kilograms, it's very easy so\nwe defined another variable weight_kg \nwe set this to weight_lbs\ntimes 0.45. \nAnd finally let's print weight underline\nkg. Let's run this Python program and see what happens. So\nmy weight is 160, alright once again we got an error, \ncan't multiply sequence by non int of type\nfloat. So as I told you before, this input function returns\na string, so we cannot multiply a string by a float. \nPython doesn't know what to do with it. So in this case, we should convert this number\nby an integer or float and then multiply by 0.45. \nSo let's call the int function. \nAnd pass weight underline lbs.\nAnd run our program one more time, 160\nokay, so I am 72 kg's. \nIn this tutorial, you're going to learn more about Python strings. \nSo I've defined this course variable and set it to Python for beginners\nnow earlier I told you you could use both single and double quotes\nto define a string, but there are times you have to use a specific form,\notherwise you're going to run into issues. Here's an example. Imagine you wanted to\nchange this string into Pythons course for Beginners. \nSo we want to add an apostrophe, like this, \nCourse for Beginners. You can immediately say this is going\ncrazy, because our string starts here and then terminates here, \nall these characters that we have here after the second apostrophe\nPython interpreter doesn't know what they are. So to solve this problem\nwe need to use double quotes to define our string so we can have \na single quote in the middle of the string. So let's change this\nto double quotes, now you can see it adds another double quote to close it, \nyou have to manually remove this, and also one more time\nat the beginning of the string, we need to add another double quote. Now\nyou can see error is gone, so if you print course \nwe see Python course for beginners. \nBeautiful. Now let's say we don't want this apostrophe here, so we have\nPython for Beginners, but we want to put Beginners in\ndouble quotes. Once again, if you add a double quote here Python interpreter gets\nconfused because it assumes the second double quote indicates that\nend of the string, so it doesn't know what these characters are, so to solve this\nwe need to change our double quotes to single quotes \nlike this. And then we can add double quotes in the middle\nof the string. Now let's run this program, there you go. \nSo we get Python for Beginners. So these are the cases\nfor using single or double quotes. Now in all the examples\nI've shown you so far we only deal with short strings, but what if you wanted to define \na string that is multiple lengths? For example, what if you wanted to define a string \nfor the message that we send in an email. In that case we need to use \ntriple quotes. So. We delete this. \nNow we add three quotes, so 1, 2, 3, there you go, \nSo, we have three quotes to start our string and three \nto terminate it. Again these quotes can be single or double quotes. \nOkay? Now, with this we can define a string that spans \nmultiple lines. For example, we can say Hi Jon \nhere is our first email to you. Thank you, \nThe Support Team. Like that.\nNow, let's run this program and here's the\nresult. So, we get this beautiful multi line\nstring. Now let's change this back to something simple \nso, we can look at other characteristics of strings and Python. \nSo I'm going to use single quotes and set the course name to Python\nfor Beginners. Now here we're going to use square \nbrackets to get a character and a given index in this string. \nLet me show you. So to get the first character we use square brackets \nand type 0. So the index of the first character \nin the string is 0. In other words, this is how Python\nstrings are indexed. 0, 1, 2, 3, 4, etc. \nSo the index of the first character is 0, the second character is\n1, and so on. So let me delete this and run this program\nwe get p. We can also use a negative \nindex here. And this is one of the features that we don't have in other programming languages \nas far as I know. So we have negative index we can get the characters\nstarted from the end. So if I pass negative 1 here, \nAssuming that 0 is the index of the first character \nnegative 1 is the index of the last character. So when we run \nthis program we should see s. Let's run it, there you go,\nwe get s, if we pass negative 2, this will return\nthe second character from the end. Let's run it one more time, \nnow we get R because that is the second character from the end. \nOkay? So place close attention to this square brackets syntax \nbecause quite often it's the topic for online Python tests \nor university exams, so if you're preparing for a python test, \nmake sure to watch this tutorial one more time and understand exactly how\nthis square brackets syntax works, we can also use a similar \nsyntax to extract a few characters instead of 1 character. \nFor example, if we type 0, \ncolon 3, Python interpreter will return all the characters\nstarting with this index all the way to this\nsecond index, but it does not return the character at this index. \nIn other words, back to these indexes \nso you have 0, 1, 2, 3, and so on. When you run this program. \nPython interpreter will return the characters starting from the\nindex 0 all the way to index 3, \nbut excludes the character and index 3, \nso when we run this Python program we're going to see pint (?). Let me show you, so we're going to\ndelete this line, run this program, there you go. \nWe get pint. Now here we also have default values for\nthe start and end index. So if we don't supply \nthe end index, Python will return all the characters to the end of the string. \nLet's take a look. So run this program, there you go,\nPython for Beginners. But if you change the start index to 1, \nthis will exclude the first character so when we\nrun this program, we see ython so p is removed. \nOkay? Now similarly we have a default value for the\nstart index, so if we don't supply the start index \nbut add an end index like 5. Python interpreter will assume \n0 as the start index, so, let's run\nthis program, there you go, we get pytho. \nNow what if we leave both the start and end\nindex? Well, I told you? Now in this case 0 will be assumed\nas the start index, and the length of the string will assume\nas the end index. So with this syntax, you can basically copy\nor clone a string. In other words, if I define\nanother variable here, let's call it another and set it to course \nsquare brackets with just a colon, now this expression will\nreturn all the characters in the course variable so\nvariable will be copy of our first variable. Let's take a look, so, \nlet's print another, and load our\nprogram there you go, we get Python for beginners. So once again\nthe square bracket syntax is pretty important if you're preparing for online\npython tests, or college exams, make sure to watch this tutorial again. \nNow here's a little exercise for you. I'm going to delete all this code \ndefine a variable, called name, and set it to Jennifer. \nNow when we print name \nof 1: negative 1\nwhat do you think we're going to see on the terminal? I want you to use your knowledge \nto tell what we're going to see on the terminal, we're now running this program. So\npause the video, think about it for a few seconds, then come back and continue watching. \nSo this expression will return the characters starting from \nindex 1 which is the second character\nall the way to the first character from the end, but excluding\nthe character at this index. In this case, the first character from the\nin is r, so r will be excluded, in other words we're going to see\nall the characters starting from e all the way \nto the second e. Let's take a look. So I'm going to run this program \nthere you go. This is what we get, \nI hope you guessed it right. \nIn this tutorial, we're going to look at \nformatted strings in Python programming language. Formatted strings are\nparticularly useful in situations where you dynamically generate some\ntext with your variables. Let me show you. Let's say we have two variables \nfirst name and last name. So first we set this to\nJohn, and last we set this to Smith. Now it's better\nto call these variables first name and last name, because they're more\ndescriptive. But here I'm using shorter names because I want you to see the entire code on display \nscreen. So let's say with these two variables, we want to generate\nsome text like this. Jon, in square brackets \nSmith is a coder. Let's say we want to print this on\nthe terminal. How do we do this? Well, we define another variable \nlike message, now here we add the first name, \nnow we need to concatenate this, with a string that contains a space \nand a square bracket next we need to add a last name, \nthen we need to add a string that contains\nthe closing square brackets followed by is a coder\nokay? So, then, \nif you print message and run this program \nto see John Smith is a coder, right? Now, \nwhile this approach perfectly works, it's not ideal \nbecause as our text gets more complicated it becomes harder to\nvisualize the output. So someone else reading this code, they have to \nvisualize all the string concatenations in their head. This is where we use\nformatted strings, they make it easier for us to visualize the output. So, \nI'm going to define another variable, let's say\nmsg short for message, and set this to a formatted string. A formatted\nstring is one that is prefixed with an f. So f, \nquotes. Now in between the quotes, first we want to add\nthe value of the first name variable, so, \nwe add curly braces and here we type first.\nNext we add a space, we add our square brackets, in between the square \nbrackets, we want to display the last name so once again we add curly\nbraces, and type last, and finally here we type \nis a coder. So this is what we call the formatted\nstring. With these curly braces, we're defining place holders\nor holes in our string, and when we run our program these holes \nwill be filled with the value of our variables. So here we have two place holders\nor two holes in our string. One is for the value of our first name \nvariable and the other is for the value of the last name variable. \nBut compare this formatted string with string \nconcatenation. With this formatted string we can easily visualize \nwhat the output looks like, right? Now let's print this other\nterminal to make sure we get the same exact output. So, let's print message\nthere you go. So Jon\nSmith is a coder. So to define formatted strings, \nprefix your strings with an F and then use curly braces \nto dynamically insert values into your strings. \nIn this Python tutorial, I'm going to show you some really cool things you can do with Python\nstrings. So let's start by defining a variable, \ncourse and we set that to Python for\nbeginners. Now to calculate the number\nof characters in this string, you can use a built in function called len.\nSo len we give it this course variable, and then, \nwe can print the result. Let's run this program, \nso as you can see we have 20 characters in this string, this is \nparticularly useful when you receive input from the user. For example you have\nnoticed that when you fill out a form online, each input field \noften has a limit. For example, you might have 50 characters for your name, \nso using this len function we can enforce a limit on the number of characters \nin an input field. If the user types in more characters than we allow, \nwe can display an error, now, this, \nlen function is another function built into Python, it's \na general purpose function, so it's not limited to counting the number of characters in a \nstring, in the future when we look at lists, I want to show you that we can use this\nfunction to count the number of items in a list. So it's a general purpose\nfunction. Now we also have functions specifically for strings \nfor example we have functions for converting all these characters to upper case\nor lower case. To access these functions we use the dot operator. \nlet me show you. So first we type course, \nthen dot look these are all the functions \nthat are specific to strings. Now in more accurate terms, \nyou refer to these function as methods, this is a term \nin object oriented programming that we want to look at in the future, but for now, what I want you to take away,\nis that when a function belongs to something else, or is specific \nto some kind of object, we refer to that function as a method. \nFor example, here we have this function, upper, for converting the string \ninto upper case, now more accurately because this function\nis specific to a string, we refer to this as a method. In contrast\nlen and print are general purpose functions, they don't belong \nto strings or numbers or other kinds of objects. \nSo this is the difference between functions and methods. Now let's take  look at this\nupper method. So, let's print the results\nand we run our program, there you go, \nyou get all these characters displayed in uppercase. Now note this method \ndoes not change or modify our original string, in fact \nit creates a new string and returns it. So, \nif we print our course variable right after we\ncall the upper method, we can see that our course variable still \nhas it's original form, so let's run this program one more time, there you \ngo. Look, here is our original course variable, it's not modified. \nNow similar to the upper method we have another method\nfor converting a string into lower case. So let me show you. \nPrint, course.lower. \nNow, let's run the program, so on the second line you can see, \nall characters are in lower case. Now there are times\nthat you want to find a character or a sequence of characters in a string. \nIn those situations you can use the find method. So let me delete\nthese few lines. Call course.\nfind here we pass a character, let's say \np, and this will return the index of the first occurrence \nof that character, let me show you. So let's print the result\nwe get 0, because the \nindex of the first capital p in the string is 0. \nAs another example, if we pass a lower case o here, \nlet's see what we get, we get 4 because \nthe index of this o here is 4. Now note that the\nfind method is case sensitive, so it's sensitive to \nlower case and and upper case characters. As an example if you pass an upper case \nhere and run this program, we get negative 1 because\nwe don't have an upper case o anywhere in this string, okay?\nWe can also pass a sequence of characters, for example, we can pass\nbeginners with a capital B\nlet's run this program, we get 11 because \nbeginners starts with index 11, now we\nalso have method for replacing a character or a sequence of characters\nand that is called replace. So let's change find \nto replace let's say we want to replace beginners with\nabsolute beginners, so we add a comma to pass a second value\nto this function, or more accurately this method. We add a string, \nhere I'm going to pass absolute beginners. \nOkay, now let's run this program,\nso, we get python for absolute beginners. \nAgain, this method like the find method is case sensitive so \nif you pass beginners all in lowercase, this method is\nnot going to find this exact word in our string, so it's not going to\nplace it with absolute beginners. Let's take a look. So I'm going to run the program\nOne more time, look, we still get python for beginners. \nWe can also replace a single character, for example we can replace\ncapital p with let's say capital \nj. Now when we run this program we get\njython for beginners. So these are the find and replace methods\nand one last things I want to show you in this tutorial. There are\ntimes that you want to check the existence of a character or sequence of characters in your \nstring. In those situations you use the in operator, \nso let's say you want to know if this string contains the word python. \nWe can write an expression like this. String\npython space in space course. \nSo we're checking to see if python is in\ncourse variable. And this is an expression that produces a boolean\nvalue, and I get true or false, so we refer to this expression\nas a boolean expression, now if we print this on the terminal, \nwe should get true, and by the way \nI'm going to delete the second line, we don't need it anymore, so run the program \nwe get true, but if I change this capitol p to a lower case\np and run the program we get false because we don't have\nis exact sequence of characters in our strings. \nNow note that the difference between the in operator and the find method\nis that our find method returns the index of \ncharacter or sequence of characters but the in operator \nproduces a boolean value. Do we have this or not? \nSo that's the difference. Now let's recap all the cool things you learned\nto do with strings in this tutorial. We can use the len function\nto count the number of characters in a string, this is the general\npurpose function built into python, we also have specific functions \nfor strings which we refer to as methods, these include \nupper for converting a string into uppercase\nyou also have lower and title methods, \nyou learn about the find method which returns the index \nof a character or sequence of characters, we have \nthe replace method for replacing characters and words in a string and finally \nyou learned about the in operator. So some characters \nin a string. \nSo, you have learned that in Python programming language you have 2 \ntypes of numbers, integers which are whole numbers like 10, they don't have\na decimal point, and floating point numbers or floats.\nWhich are numbers with a decimal point. Now in this tutorial you're going to look\nat the arithmetic operations supported in python language these are the\nsame arithmetic operations that we have in math, we can add numbers, \nmultiply them and so on. So let's look at a few examples, \nwe can print, 10 plus 3, so \nthis is the addition operator, we also have subtraction, we \nhave multiplication, we have two kinds of division, \nhere's one with a forward slash, let's run this program and see what we get.\nwe get a floating point number. But we also have\nanother division operator for getting an integer. So \nif we add another slash here and run this program \nwe get an integer. We have \nanother operator called modulis (?) which is a percent sign.\nAnd this returns the remainder of the division. So when we run this program \nwe should get 1, there you go. And\none last operator we have here is exponent which is the power. \nSo, that is indicated with 2 asterisks and this will return \n10 to the power of 3. So let's run this program \nwe get 1000 so these are the arithmetic operators \nin python programming language. Now for all these operators that you learned \nwe have an augmented assignment operator. That is\nvery useful, let me show you. So let's say we have a variable \ncalled x we set it to 10, now we want to increment this by\n3, we'll have to write code like this. X we set this to\nx plus 3. So Python interpreter will add \n10 to 3, the result is 13, and then it gets stored \ninto x again. So when we print x we should see \n13, there you go. So this is how you can increment \na number, right? Now augmented assignment operator is\na way to write the same code but in a shorter form. This\nis how it works. We type x plus \nequals 3. What we have on line 3 is exactly \nlike what we have on line 2. So this is what we call\nthe augmented assignment operator we have augmented or\nenhanced the assignment operator. Now in this particular \ncase we are incremented a number using the augmented assignment operator,\nbut we can also subtract or multiply a number by a given value\nfor example, let's delete what we have on line 2, \nwe can type subtract equals 3. So here we \nsubtracted 3 from x. When we run this program we should see 7, \nthere you go. \nNow let me ask you a question, I'm going to clear all this code here to\ndefine x and set it to 10 plus 3\ntimes 2. What do you think is the result of this expression? \nthis is a very basic math question that unfortunately a lot of people fail to answer. \nThe answer is 16. Because in math we have this\nconcept called operator precedence which means the order of\noperations. So the multiplication operator has \na higher precendence which means it's applied first which means 3 x \n2 is executed first, the result is 6 and then \nits added to 10, that's why x showed up as 16 after\nwe run this code, let's verify that. So, print x \nrun the program, x is 16. So this is what we call\noperator precedence, it's just a basic math concept. \nIt's not about python programming language. So all the other programming languages \nbehave the same way, so here's the order, first we have \nthe exponentiation which is the power, like 2 to the power of 3, \nthen we have multiplication or division \nand finally we have addition or subtraction.\nThis is the order of operations. Let me show you another example. \nHere I'm going to add the exponentiation operator, so, \n2 to the power of 2. Once again, what do you\nthink is the result of this expression? Pause the video and think about it for a few seconds. \nThe answer is 22. \nBecause the exponentiation operator takes precedence, so first \n2 to the power of 2 is executed, the result is 4, \nthen 4 is multiplied by 3, that is 12, \nand finally 12 is added to 10. So x should be 22. \nSo let's run this program and verify this. So I'm going to\ndelete these lines here. Run the program, there you go. X \nis 22. Now let me bring back these rules here. \nWe can also use parenthesis to change the order of operations \nso if we have parenthesis we always \ntakes priority. In this case we can add parenthesis \naround 10 + 3, so this piece of 3 will be \nexecuted first, the result is 13, then the exponentiation \noperator will be executed, so 2 to the power of 2 is 4, \nand finally 4 is multiplied by 13. \nNow here is a little exercise for you. I'm going to set x to \nparenthesis 2 + 3 x 10 minus\n3. What is the result of this? Pause the video and think about it for a few seconds. \nSo you learned that parenthesis always \noverrides the order, so this piece of code is executed first. The result\nof these 5. Then, between the multiplication and \nsubtraction, you know that multiplication takes precedence. \nSo next, 5 will be multiplied by 10, the result is \n50 and finally we have subtraction. So 50 minus \n3 will be 47. Let's verify this, print \nx, run the program there you go, I hope you guessed it right. \nSo this is all bout operator precedence, it's a very important topic \nand I see it quite often in Python tests. So if you're preparing for a Python test\nmake sure to watch his tutorial one more time. \nIn this tutorial, we're going to look at a few useful functions for working with numbers \nlet's start by defining a variable like x and set it to 2 \n.9. Now to round this number we can use the built in\nround function, so we call the round function, give it x, \nand then print the result. Let's run this program \nso, we get 3, we have another useful built in function called \nabs which is short for absolute, and this is the absolute function \nwe have in math, we give it a value and it always returns \nthe positive representation of this value, even if the value is negative.\nHere's an example. Let's call the abs function \nand give it negative 2.9 When we run this program \nwe're gong to see 2.9 on the terminal. So let's go ahead \nthere you go. So absolute always returns a positive number. \nBut technically in Python we have a handful of built in functions for performing \nmathematical operations, if you want to write a program that involves complex \nmathematical calculations, you need to import the math module.\nA module in Python is a separate file with some reusable \ncode. We use these modules to organize our code into different \nfiles. As a metaphor think of a super market. When you go to a super market \nyou see different sections for fruits and vegetables, cleaning products, \njunk food and so on. Each section in the super market is like a module \nin Python. So in Python we have this math module which contains a bunch\nof rustable functions for performing mathematical calculations. \nSo, let me show you how to use this module. On the top \nwe type import, math, all in  lowercase \nwith this we can import the math module. now math is\nan object like a string, so we can access it's functions or more accurately \nit's methods using the dot operator. So if you type \nmath. look these are all the mathematical \nfunctions available in this module. For example you can call the\nseal method to get the sealing of a number. So if you pass 2.9 here\nand then print the result we should see 3. \nLet me delete all this other code here. Alright, let's run this program \nthere you go. So we get 3. Another useful method is the\nfloor method, so let's give that a try, floor of 2.\n9. What do you think we're going to get? We get \n2. Now there are so many functions built in this module and we don't really have time\nto go through all of them. But let me show you how we can learn about them on your own. \nOpen up your browser and search for Python 3\nmath module. Make sure to add the version python 3. \nBecause the math module in python 2 is slightly different from the math module in \npython 3. So python 3 math module, \nnow here you can see the documentation of this kind of module \nlet's go let's have a look, if you scroll down, \nwe can see the list of all the functions and their explanation. \nSo as an exercise I encourage you to have a quick look at this\ndocumentation. See what functions are there for you in case you need them. \nIn this tutorial, I'm going to talk to you about if statements in Python \nif statements are extremely important in programming and they\nallow us to build programs that can make decisions based on some condition. \nSo if some conditions are true we're going to do certain things, otherwise we're going to do other\nthings. Here's an example. Over here I've got this text file with\na bunch of rules for our program. If it's a hot day, perhaps we want to\ntell the user it's a hot day, so make sure to drink plenty of water. \nOtherwise, if it's cold, so here's another condition\nif this condition is true we're going to tell the user it's a cold day \nso where warm clothes. And otherwise if it's\neither hot or cold, we want to tell the user it's a lovely day. \nSo let me show you how to write a program that simulates these rules. So, \nback to our program here, we start by defining a boolean variable \nis underline hot. We set this to true. \nNext, we add an if statement, so if, here\nwe need to add a condition, in this case we're going to use our boolean variable. So, \nis underline hot. So if this values to true. \nThen we're going to do certain things. In this case, we want to tell the user\nhey it's a hot day, drink plenty of water. So, back to our program \nafter our condition we add a colon, now, \nnote that when I press enter pycharm automatically indents \nour cursor. Now any code that we write here will be executed \nif this condition is true, otherwise it will be ignored. Here\nis an example. Let's write a print statement, here I'm going to use\ndouble quotes because I want to use an apostrophe in our string. So, \nit's a hot day. Now let's press enter\nyou can see the cursor is still indented, that means we can write more code \nthat we executed if this condition is true, in this case let's say we don't want to\nwrite any extra code, so to terminate this block \nwe need to press shift and tab, now the cursor is at the beginning of the line\nso lets write a print statement with a message like\nenjoy your day. Now when we run this program, because\nthis condition is true, you're doing to say this message followed by\nthis second message, take a look, so run, there you go, it's a hot day\nenjoy your day. But if I go over here and \nchange this boolean value to false and run the program again, our\nfirst message disappears and we only see the second message, enjoy \nyour day. So this is how if statements work. Now back\nhere we can add another print statement let's say\ndrink plenty of water. \nNow because this spirant statement is also indented it will be\nexecuted if this condition is true. So I'm going to revert is hot to true \nand run the program one more time. There you go, so \nit's a hot day, drink plenty of water, and enjoy your\nday. Alright now let's add a second rule here, if\nit's hot we're going to execute these two lines, otherwise if it's not hot\nwe want to print a different message. So here \nwe are moving an indentation and typing els \ncolon. Now when we press enter once again our cursor \nindented so the code that we write here will be executed if this\ncondition is not true. So here we can print \nit's a cold day, print, \nwhere warm clothes. \nNow let's run our program one more time. So we get the message \nabout a hot day followed by enjoy your day. You don't see any message\nabout a cold day. Now if we go back here on the top. \nAnd change this boolean value to false and run our program \nwe see different set of messages. It's a cold day\nwear warm clothes and enjoy your day. But there's a problem with \nour program. If it's not hot it doesn't necessarily mean that it's cold, it means\nit's a lovely day. So the absence of heat doesn't mean its cold. \nBack to our conditions, here on line 4 we have this rule that says \nif it's a cold day, then print these messages\notherwise if it's neither hot or cold say it's a lovely day. \nSo, to implement this rule we need to go back and put \npy and define another variable. So let' say \nis underline cold we set this to\ntrue. Now here we need to add a second condition. So after\nour first if statement, we can use an el if statement \nto define a second condition. So here's how it works. So, \nel if which is short for els if or\notherwise if, now here we add another condition, so, \nis cold So if t's cold you want to\nexecute these few lines. So let's cut these\nfrom here, and move them under our second condition \nand finally if none of these conditions are true, \nyou want to print a different message. It's a lovely \nday. So, right now, \nis hot is false, is cold is true, \nso when we run this program, python interpreter is going to execute the first \nif statement, in this case because our condition is false, these two\nlines will be ignored, then Python interpreter will look at \nline 7, it will evaluate this condition, in this case is\ncold is true so we're going to see these two messages on the terminal. \nNow, in this case, because one of these conditions was true, this els statement\nwill be ignored, so we are not going to see this message, and finally \nas before, we are always going too see this message. So let's run our\nprogram, there you go. it's a cold day, \nwhere warm clothes and and enjoy your day. Now, \nback to the top, if we change is cold \nto false it's neither hot nor cold so it's going to be a lovely day.\nLet's run the program, and here you go, it's a lovely day\nenjoy your day. So these are the basics of using if \nstatements. As you can see they are very useful in programming and with these\nwe can build all kinds of rules into our programs. Okay here's an\nexercise or you. Imagine the price of a house is 1 million dollars. \nNow if the buyer has good credit, they will need to put down 10 percent \nof the price of this property otherwise they need to put down 20 percent \nwrite a program with these rules an display the down payment \ncard for a buyer with good credit. You will see my solution \nnext. \nAlright let's define a variable for the price of this house so price \nwe set this to 1 million so 1 with 6 0s. \nNext we need a variable to tell if this buyer has good credit \nso has good credit, \nand we set this to true, now we need an if statement \nso if has good credit has true \ncolon, here we need to calculate a down payment so\nthe down_payment should be equal to\n0.1 x the price. That is 10 percent of the price of this\nproperty. Otherwise colon\nthe down payment should be 0.2 \ntimes price. Now finally we remove the\nindentation and print here we can use a form \nof valid string, first we add a label, down payment \ncolon and right after that we add a placeholder \nor a hole for our down payment variable. So curly braces \ndown payment. Let's run this\nprogram, so down payment for a buyer with good credit \nis 100,000 dollars. Now let's improve this by adding a \ndollar sign before this number. So back to our formatted string,\njust before the curly brace I'm going to add a dollar sign let's\nrun this one more time, that is better. \nIn this tutorial I'm going to talk to you about the logical operators within Python.\nWe use these operators in situations where we have multiple \nconditions. Here is an example. Let' say we're building an application for \nprocessing loans. If an applicant has high income \nand good credit, then they're eligible \nfor a loan. So in this example we have two conditions, one is having \nhigh income and the other is having good credit. So if both\nthese conditions are true, then the applicant is eligible for a loan.\nSo this is where we use the logical and operator. \nWe use this operator to combine two conditions, and by the way\nthis is not specific to python programming language, pretty much any programming language \nthat supports if statements also supports the logical operators. \nSo, back to our program, let's define two variables, \nhas high income, we set this to true. \nAnd another one has good \ncredit, we also set this to true, now our if statement \nif has high income has true, \nand has good credit is also true, \nthen we're going to print eligible \nfor null. So this is where \nwe're using the and operator. So if both these conditions are true \nthen this message will be printed. If one of them is false, we're not going to see \nthis message. Let's try this out. So I'm going to run this program \nso we see it eligible for loan, but if we change \neither of these conditions to false, and run the program again \nlook, the message disappears. \nSo this is the logical and operator. We also have the\nlogical or, and we want to use that in situations where we want to do certain things\nat least one of the conditions is true, for example let's change \nthe rule for this program, such that if the applicant has high income, \nor good credit, then they're eligible for a loan, \nso if either or both these conditions are true then the candidate is\neligible. Now back to our program we can \nimplement this rule by using the logical or operator. So we simply replace \nand with or, now when we run this program we're going to\nsee this message because at least one of our conditions is true, \nlet's take a look. So the applicant is eligible for a loan\nfor a loan because they have good credit. If you change this to false \nbut set the other condition to true, we still\nsee the same result, but if both these conditions are false \nthen we're not going to see this message anymore. So this is the difference \nbetween these operators. With the logical and operator \nboth conditions should be true, with the logical \nor operator at least one condition should be true\nwe also have another logical operator called not\nand that basically inverses any boolean value we give it, if we give it, \nwe give it a true boolean value it converts it to false. For example \nlet's make up a new room, if applicant \nhas good credit and doesn't have \na criminal record then\nthey're eligible for a loan. Let me show you how to implement this. So, \nwe go back to our program, in this example we don't need a \nfirst variable for let's delete that. Let's set this variable to true\nwe also define another variable like has criminal \nrecord. We set this to false. \nNow, we want to check to see if this applicant has good credit and not\na criminal record. This is where we use the not operator. \nSo, if they have good credit, \nand not criminal \nrecord. So, in this example, has criminal\nrecord is set to false, when we use the not operator this\nbasically gets changed to true, so we have two conditions that are true. \nHere's ones and here's another one. So our applicant is\neligible for a loan. And when we run this program we see\nthis familiar message. However\nif an applicant has a criminal record, so let's change this to \ntrue, now when we run this program we can see our applicant is\nnot eligible because when we apply then operator on this\nvariable, we'll get false. So true changes to false. \nAnd we'll end up with two conditions, one that's true\nand the other is false. And that's why this message is\nnot printed. So this is all about the logical operators in\npython. \nIn this tutorial I'm going to talk to you guys about\ncomparison operators in Python. We use comparison operators\nin situations where we want to compare a variable with a value, \nfor example, if temperature is greater than 30, then\nwe want to print it's a hot day. Otherwise, if it's less\nthen 10, it's a cold day, otherwise it it's neither hot\nnor cold. And by the way I'm taking about celsius, not farenheit. \nSo, to build these rules into our program, we need to use comparison\noperators. Back to app.py, I define this\ntemperature value, let's write an if statement, if temperature\nnow we want to check to see if this is greater than 30, so we use \nthe greater than operator. If this is greater than 30, \nwe want to print it's a hot day\notherwise, let's just print \nit's not a hot day. Now, \nwhen we run this program, we're going to see this second message because 30\nis not greater than 30. So our first condition a value\nis to false. let's verify that. So run, \nit's not a hot day. Now if you change\nthe temperature to 35 and run this again, \nwe're going to see a different message, it's a hot day, so this is where we use\ncomparison operators. Now what we have here as you know is an expression\nbecause it's a piece of code that produces a value. So more accurately this is\na boolean expression. So this is the greater than operator, \nwe also have greater than or equal to, we have\nless then, less then or equal to, \nhere's the equality operator, so if the temperature equals to 30, \nthen you can say it's a hot day. Note that this is different from the assignment operator \nthat has only one equals sign. You can see that if we use only one equal sign\nhere we immediately get this red underline because this is simply \nan assignment statement. We're changing the value of the temperature. \nyou are setting the value of\nsomething else. So we don't have a boolean expression, you are not producing a \nboolean value. Okay? So, our equality operator \nhas two equal signs and finally we have not\nequal which is an exclamation followed by an equal sign. \nNow here's an exercise for you. You have probably seen that when you fill out a \nform online, sometimes the input fields have validation messages, \nfor example, let's say we have an input field for the user to enter their name. \nNow if the name is less then 3 characters wrong we want to display a validation \nerror, like name must be at least three characters, \notherwise, if the name is more then 50 characters long then we want \nto display a different validation error like name can be a maximum\nof 50 characters. Otherwise if the name is between 3 and 50 characters\nthen we just want to tell the user that name looks good. \nSo go ahead, and write a plan to implement these rules. \nAlright let's define a variable called name and set it to\nlet's say j. So we're assuming this is what the user types into an input field.\nNow, we want to get the number of characters in this string. \nSo we use the len function, right? Len of name.\nWhen we print this we get 1, right\nyou have seen this before. Now here we want to use an if statement so\nif len of name is less then \n3, then we want to print \nname must be at least 3 characters\nnow here we need a second condition \nto check the upper limit. So el if\nlen of name is greater than 50, \nthen we want to print a different message, name, \nmust be a maximum \nof 50 characters. \nOkay? And otherwise if else\nnone of these conditions are true that means the name looks good. So, \nprint, name looks good. Let's \nrun our program. So in this case we get this message\nbecause our name is too short. Now if you go back here and \ntype something really really long. And then\nwe run our program we're going to see a different message name must be a \nmaximum of 50 characters and finally if\nwe type a proper name here like John Smith\nand run our program we get name \nlooks good. \nHere's another good exercise that combines \nmany of the materials you have learned so far, so earlier you built a program to \nconvert someone's weight from pounds to kilograms. Now we want to extend this program \nand allow the user to enter their weight in either kilograms or\npounds and then we will convert it to the other unit. Here's how our program\nis going to work. So I enter my weight in pounds so\n100 and 60 now it's telling me if it's in pounds or\nkilograms. So here I'm adding l to lbs or k for kilograms. \nAnd by the way, this program is not case sensitive so\nwhen I enter a capital l or lowercase l it takes \nit as pounds. Now it tells me ur set it to\nkilos. Let's run this program one more time, \nthis time I'm going to enter my weight in kilo's, so send it to\nis the weight and the unit is kilograms so k, \nand it says you are 160 pounds. \nSo go ahead and spend a few minutes on this exercise, you will see my solution next.\nAlright first let's ask the user their weight. So we use the input\nfunction, weight colon we get the return value\nand store it in the variable called weight.\nNow the second question, so one more time we use the input function\nel for pounds. \nOr k for kilograms. So, \nlet's get that too and store it in a variable called unit \nnow we need an if statement. So if unit \nequals l then we need to convert this weight \ninto kilograms. However, with this implementation we are only allowing \nthe user to enter a capitol l, if they enter a lowercase l \nthis code is not going to work. So this is where we use the upper\nmethod of string objects so this unit is a string because as I told you\nbefore, the input function always returns a string. \nSo, we can use the dot operator to access all it's methods or\nfunctions, here we call the upper method, this\nwill convert whatever the user enters to upper case and then we'll convert it \nto a capital l. Now, if this condition is true, \nthen we need to get the weight and multiply it by 0, \n.45 However, as you know this\nweight is a string object, and we cannot multiply a string \nby a floating point number, we talked about this earlier in this course. \nSo first we need to convert this weight to a numerical value. So \nright here, when we call the input function, we can get the return\nvalue and pass it to the int function. So, \nwe call the int function and give it\nthe return value of the input function. Now, the\nin function will return an integer so we can store it in this weight \nvariable. So here's the converted weight, let's store it in\na variable called converted, \nthen we print here we can use a formatted string, so\nwe prefix this string with f ur\nwe add curly braces to dynamically insert the value of\nconverted variable. And finally we add kilo.\nOtherwise, if the unit is kilograms. \nWe need to divide the weight by 0.45. q\nSo, weight divided by 0.45 and\njust to refresh your memory, this division operator returns a floating point number\nbut if we use double slashes we'll get an integer. \nIn this case, we want to get a floating point number, \nfinally let's print a formatted string, ur\n curly braces, converted \npounds. Okay? Now\nlet's run this program and see what happens. So weight is\n160 and lbs in\nand that equals to 72 kilos, perfect, if we run it one more time, \nand enter 72 kilos \nwe get 160 pounds.\nIn this tutorial I'm going to show you how to use y loops in python. We  \nuse y loops to execute a block of code multiple times and there are often\nuseful in building interactive programs and games. In a future tutorial\nI'm going to show you how to build a simple game using a y loop.\nSo, let's get started with the basics, we write a y statement \nand right after that, we type a condition followed by a colon\nas long as this condition is true the quote that we write \nin this block will be repeatedly executed. Here is an example.\nWe can define a variable like i, as in short for\nindex and set it to 1. Now we set our condition to\ni less than or equal to 5, so as long as I\nis less then or equal to 5, we can print i, \non the terminal. And then we need to increment i, \nby 1. So we set i to i plus 1. The reason\nwe do this is that if we don't do this I will be 1 forever\nso we'll end up with an infinite loop. Because this condition will\nalways be true. One is always less then 5, so in every iteration of this\nloop, we increment i by 1, so at some point, i is gonna be\nsix and then that is when this condition will be false and then\nwe'll jump out of this loop, okay? Now to demonstrate how everything works\nafter this loop I'm going to add a print statement\nsay done. So note that these two lines\nare indented so they are part of the y block. \nOkay, now let's go ahead and run this program and see what happens. So, \ntake a look, we get the numbers 1-5 followed by\ndone. So heres how this program gets executed\nfirst we set i to 1 now python interpreter executes line\n2, this condition is true because i is less then 5, \nso i is printed on the terminal and then incremented by\n1. Then the control moves back to the beginning of the y loop.\nSo it doesn't go to the next statement. So, \nwe come back here and now we are in the second iteration. In the second iteration\ni is 2, and because 2 is less then 5, our condition is still\ntrue, so i will be printed on the terminal, and once again it will be\nincremented by 1, so at some point i is going to be 6, \nand that's when this condition will be false so our look will\nbe terminated and this done message will be printed on the terminal.\nSo this is the basics of y loops. Now let's make this program a little\nbit more interesting. Here we can write an expression like this. We\nadd a string, and in this string we add an asterisk\nand then we multiply this string by i. So\nwith this expression, we can repeat a string, when we multiply a string\nby a number, that string will be repeated. For example, if\ni is two, this expression will produce a \nstring with two asterisks. Now let's run the program\nand see what we get. So we see this little triangle \nshape here. Because in the first iteration i is 1, so, \n1 times an asterisk produces 1 asterisk. \nIn the second iteration i is 2, so when we multiply 2\nby 1 asterisks, we'll get 2 asterisks. \nIn this tutorial I'm going to show you how to use a y loop to build \na guessing game like this. So we have this secret number which is currently set to\n9. Now the computer is asking me to make a guess. So, \nlet's say 1 is not right because the secret number is 9, okay, \ntry again, 2, no it's not right, let's try again, so I\nonly have three chances to make a guess. If I can't guess the number the program \ntells me that  I failed. let's run the program one more time, this time\nI'm going to guess the number, it's 9, there you go, it says you in.\nSo let's go ahead and build this program using a y loop.\nAlright, let's start by defining a variable to store our secret number\nso, we call the secret underline number and set it to 9.\nNow we need a while loop to repeatedly ask a user to\nmake a guess. So while condition colon\nWhat is our condition here? Well we want to give our user a\nmaximum of three guesses. So similar to the last tutorial, we can define\na variable like I, set it to 0, and assume this represents\nthe number of guesses the user has made. And then we write our condition \nas i less then 3. Note that here I'm not\nusing less then or equal to operator, because with this condition\nour loop will be executed 4 times, while i is 0,\none, two, and three, so here we should use \nthe less then operator. Now if we give this code to someone else it's unclear\nwhat does i represent here, it's only in our head that\ni represents the number of guesses the user has made. So as\na best practice, always use meaningful and descriptive names for your variables. \nSo it's better to rename this variable to guess, count.\nLet me show you how to rename. So right click on i variable, \nand then go to refactor and \nrename it. Look at the shortcut. On a Mac computer it's shift and\nf 6. Now in this dialogue box we can easily\nrename your variable and pycharm will update all the references to that\nvariable so we don't have to manually update each instance, okay? Let's\nchange this to guess_count\nenter, there you go, now that is better, \nalso it's better to store 3 in a separate variable to make our code\nmore readable, because it's not quite clear what does 3 represent here. \nSo, let's define a variable called guess limit\nsay to 3, and then we can change 3 to guess\nunderline limit, now our code is more readable\nwhile guess count is less then guess limit, see it reads like a story\nthis is how you should write code. Okay, so\nwhile this condition is true, we want toast the user to make a guess. So here \nwe use our input function, guess\nNow whatever the user enters comes out as a string so we need to convert it to an integer.\nSo right here, we pass the result to the end function\nand then get it and store it in a separate variable called guess.\nSo at this point the user made a guess, now we need to\nincrement guess count so guess count\nwe set it to plus equal 1 or \nokay, now we need to check to see if the user will make the right guess.\nSo here we need an if statement. If what the user guessed\nequals our secret number, \nagain see our code is so readable. It's like a story you can read it like plain\nEnglish. So if this condition is true we want to \ntell the user they won. So print you won\nnow lets go ahead and run our program up to this point.\nSo okay it's asking me to make a guess, I'm going to make \nthe wrong guess so one it asked me again, 2 one more time, \n3, okay, what is missing in this implementation is the\nmessage that tells me that I failed. We're going to take care of it momentarily, but\nlet's run the program one more time and make the right guess. So, 9\nokay it says you won, but it's still asking me to make\na guess, because our while loop is going to get executed 3 times. Look\n1 and 2. So we need to change our program\nsuch that if the user makes the right guess, we need to terminate our\nwhile loop, we need to jump out of it. How do we do that?\nSo, over here if the user makes the right guess, after\nwe print this message we can use the brick statement to terminate\nterminate a loop, when python interpreter sees this, it's going to\nimmediately terminate our loop, it's not going to evaluate this condition again. \nNow let's run our program and see what happens. So, I'm going to\nguess the right number, you won and look, you are\nnow asked to make two more guesses, beautiful. Now the last thing we need\nto add here is the message that tells the user that they failed if they could not guess\nthe right number. How do we do that? Well in Python\nour while loops can optionally have an else part. \nsimilar to the if statements. So earlier you learned that our if statements \ncan optionally happen else part. Here, so\nif this condition is true, do this,\notherwise do something else. In this case our if statement doesn't have\nan else part. Now, similar to the if statements\nOur while loops, our while statements can also have an else part. \nSo, right at this level we can add\nan else block, so else colon. \nAnd the code that we write here will get executed if this while loop\ncompletes successfully without an immediate \nbreak. In other words. If the user guesses the\nright number, you break this loop, you jump out of it so the code that\nwe write in the else block will not get executed. \nBut if the user cannot guess this number, you're never going to break out of\nthis loop, so this loop will be executed to completion untill\nthis condition become false. In that case, the code that we write\nin the else block will get executed, and this is the perfect opportunity for us\nto tell the user hey, you made three guesses but none of them were right.\nSo, print, sorry you\nfailed. Now, let's test the program one more time.\nSo, guess 1, 2, 3, \nsorry you failed, let's run it one more time. This time I'm going to make\na wrong guess, and then the right guess, \nwe won and our loop terminated immediately. \nAlright, now it's time for you to practice what you have learned so far. \nSo once again we're going to build a game this game is a simulation \ncard game. Now our game doesn't have a graphical user interface or gooey \nand it doesn't really matter for now, our focus is entirely on building the\nengine for this game. So let's see how this works. \nWhen we run this, we get this little symbol here, and our program\nis waiting for us to enter a command. If you type help\neither a lower case or upper case we get the list of commands\nthat our program or our game currently supports. So we can type the\nstart command to start our car, we can type\nstop command to stop our car, and quit to terminate the game.\nAny other commands that we type our program is going to tell us hey I don't understand that.\nFor example, if I type asd here, it's going to say I don't understand \nthat.If you type start, we get this message, \ncar started, ready to go, if you type stop it \nsays car stopped, and finally if we hit quit\nour program terminates, this is a fantastic exercise for you to practice\nwha you have learned, so pause the video and spend 5-10 minutes\nto build this program. \nAlright, we're going to start with a while loop with a condition \nWhat is our condition here? We want to run this loop \nuntil the user types quit. So we can define a variable\nor a story to command what the user enters, and then we can run this\nloop as long as the command does not equal to quit. So right before\nthe loop, we define a variable, command, and initially we set it\nto an empty string. An empty string is a string that has no characters\nin it. We only have the quotes. So then\nwe type out our condition as while command \ndoes not equal to quit then do something. \nNow immediately we have a problem here because we're assuming that the user \ntypes the command in lower case, so if they type this in upper case they\nour program is not going to behave properly, so to fix this problem, you need to\ncall the lower method of the string object and then compare the results.\nWith this quit. You could also call this upper\nand then type quit in upper case. It's about our personal preference \nin this demo I'm going to use lower case characters. \nSo, okay, now in this loop we need to ask the user to enter\na command. So once again we're going to use our input function, we're going to add\na greater then symbol followed by a space,\nwhatever the user enters, we get it and store it in our\ncommand variable. Now apart from\nquit command, there are three other commands that we need to support. Start, \nstop, and help. So here we need an if statement to compare\nwhat the user enters with one of the supported commands. \nSo, if command.lower\nequals start then you want to print the message \nlike the car started. So print the car started. \nReady to go, it doesn't matter, \nnow the second condition. What if its not start, maybe it's stop? So, \nel if command.lower\nequals stop, there you go, then we print a \ndifferent message car stopped. Now look at our code.\nWe have repeated this lower lower lower multiple times. \nThis is bad, in programming we have a term called dry, which is short for \ndon't repeat yourself. So whenever you have duplicate\nyour code that means you're doing something wrong. So how can we solve this problem. \nWell, instead of calling the lower method in each condition, \nwe can call it right here when we get the input from the user, so\nthis input function as you know returns a string, we can\nimmediately call the lower method on this string, and with this command \nwill always be in lowercase, so we don't need to\ncall this method in every condition. Look, \nwe remove the duplication and also our conditions \nare shorter and easier to read. There is also one more place \nwe need to modify so, it's right here. That is better. \nNow, the third command. We need one more el if.\nIf the command equals help, then, \nwe want to show the commands that we support. So, \nhere we're going to print a multi line string. So we\nuse triple quotes like this, and \ngive the user a guideline like this. So start\nto start the car stop \nto stop the car, and \nquit to quit. Now finally we need \nan else part, so if what the user enters is none of these commands, \nwe're going to tell them, hey we don't understand these, \nelse, colon print \nsorry I don't understand that. \nAnd by the way note that here becomes I'm using double\nquotes, I can easily use a single quote as an apostrophe, okay?\nSo let's run our program up to this point and see what happens.\nAlright, let's type start car is \nstarted, beautiful, stop, car is stopped, help, \nwe get this guideline, but there's so much indentation\nbefore our commands, we'll fix that in a second. And finally \nlet's test the quit command, oops, our program \ndidn't work properly. Here is the reason. With these if statements, \nwe're comparing the command with start stop, and \nhelp. Anything else will end up here, so that's why our\nprogram says it doesn't understand that. So that's why our program \nsays it doesn't understand that command. However, after this el statement \nthe control will be moved to the beginning of the loop.\nAt this point our command is quit, so our loop will complete and the\nprogram terminates. In other words when we run this program\nand type quit, our program actually quits but \nwe still see this message which shouldn't appear here. How can we solve this problem?\nWell, we can come back here and just before \nthe else block, add another el if, something like\nthis. el if command equals \nquit then you can immediately break. \nThis will solve our problem, but note that we have kind of repeated\nthis expression in two places. The reality is that\nwe don't really need this condition on the top, because with these if statements \nwell more accurately with this el if we can jump out of this loop and terminate \nour program. So, we can simplify our condition\nto something like this. True. So while true means \nthis block of code is going to get executed repeatedly, \nuntil we explicitly break out of it,\nokay? Now let's test our program one more time. So, \nquit now our program terminates and we don't see that message \nbeautiful. So let's fix the last problem. You saw that when we \ntyped help, these guidelines appeared with so much in\nindentation, and here's the reason, look, right here in our code, \nthey are already indented. So when we use triple quotes, what we type here\nwill be printed exactly as is. So, because we \nhave an indentation here, this indentation will also be printed on the terminal. \nSo, let's delete these\nokay, run the program one more time, type help, \nthe indentation is gone. Beautiful. Now here's a challenge for you. I want you to\ntake this program to the next level. So right now if we type\nstart we get this message car started. And if we type start again \nwe get the same message. It would be better if\nwe got a message like car is already started so it doesn't make sense to\nstart a car twice. Similarly, if we type stop\nit says car stopped, if we type it again we get the exact same\nmessage, it doesn't make sense to stop the car twice. So here's what I need you to do\nif the car is stopped and the user tries to stop it again, \nthe program should say hey, the car is already stopped, what are you doing? And similarly \nif the car is already started and the user tries to start it again, \nthe program should yell at the user. So go ahead and make the necessary changes to\nimplement this scenario. \nAlright to add this to our program, we need \nto know if the car is started or not. So there is one more piece of information\nwe need to store in the memory. What is the kind of data we need to store here? \nA boolean. Is the car started or not, it's a matter of yes \nor no. True or false. So on the top, here\nwe can define another variable like started and initially we set it\nto false. So the car is not started, right? Now\nwhen the user types the start command, here we need to check\nto see if the car is already started. If not the we'll start it \nor otherwise we'll yell at the user. So in this block we'll write\nanother if statement, if it's already started\nand we print car is already \nstarted. Otherwise, so if you add an \nel statement here. And at this point, \nyou set started to true. So we start \nthe car and we print this message, okay? Now we need to make a similar \nchange for the stop command. So if the car is\nalready stopped we need to print a different message. If\nnot started, so here we're using the not operator to see\nif the car is stopped. So if it's not started that means\nit's stopped, okay? So if it stopped we print\ncar is already stopped with\ndouble p's, otherwise so else \nwe need to stop the car, how do we do that? We \nset started to false. And then we'll print this message. \nAs easy as that. Let's go ahead and run our program. \nSo, initially our car is stopped. So I'm going to type \nstop, it says the car is already stopped, so lets \nstart it, okay, now our car is started, let's\nstart it one more time. The program is yelling at us. So we can\nnot start the car twice. Beautiful. Now let's stop it\nit says the car is stopped, let's stop it one more time, we get this message \nagain. \nIn this tutorial, I'm going to talk to you guys about \nfor loops in python. In the last tutorial, you learned about while loops \nyou learned that we use while loops to execute a block of code multiple times. \nIn python we have another kind of loop, that is a for loop, and we use that\nand we use that to iterate over items of a collection, such as a string. \nBecause a string is a sequence of characters, so it looks like a collection \nso we can use a for loop to iterate over each character in a \nstring and then do something with it. Here's an example. We type out\nfor then we define a variable, this is what we call a loop\nvariable. In each iteration, this variable will hold\none item. So, let's call it item, in \nhere we type out a string like Python, and then \ncolon. So with this for loop we can iterate over a string and in each\niteration this item variable will hold one character at a time\nin the first iteration it will be set to p then \nin the second iteration it will be set to y, and in the third iteration it will be set to\nt and so on. So here we are inside our for block,\nbecause of the indentation here, so whatever we type here will be executed in\neach iteration, for now we can simply print this item \nnow let's run this program and see what happens.\nSo you can see each character in this string is printed on \na new line. Let's look at another example. In Python we can\ndefine lists using square brackets, so let me remove this string from\nhere, and define a list using square brackets, \na list is simply a list of items, a list of numbers, a list of \ncustomers, a list of emails, products, blog posts, whatever. \nSo here we can define a list of names like Mosh, \nJon, Sarah, and then go ahead \nand run our program so we can see in each iteration we get one name \nand print it on a new line. We can also\nloop over a list of numbers, for example, \n1, 2, 3, 4, let's run it, again\nwe see each number on a new line, but what if we want\na list of numbers? We don't to explicitly type out a list\nwith let's say 100 or 1000 numbers, we don't want to type, 5, 6\n7 all the way to 100. That is when we use the range function. \nSo, let me delete this, \nIn Python we have a built in function called range, for creating\nrange of numbers. So, we give it a number, let's say 10, \nlet's run this program, now we can see\nhere on the terminal we have 0 all the way\nto 9. So 10 is not included. \nSo basically when we call the range function, this range creates\nan object, it's not a list, it's a special kind of object we can \niterate over, in each iteration this object will spit out a new number.\nWe can also work with a  range of numbers here, let's say you want to start \nfrom 5, and go all the way to 10. \nSo, let's run our program, now we have the numbers \n5, 6, 7, and 9. Also, this range\nfunction can optionally take a step, so we can pass\ntwo asa step to this function, \nand when we run our program, we can see our first number\nis 5, now we go two steps forward to get 7, \nonce again we go to two steps forward we get 9 and that is\nthe end of our range. So this is the basics of using for loops in python. \nNow here's an exercise for you. I want you to write a program \nto calculate the total cost of all the items in a shopping cart. \nSo let's say we have a list of prices like 10, \n20, and 30, I want you to use a for loop, \nto calculate the total cost of all the items in our imaginary shopping cart, \nso calculate that, and then print it on the terminal. That's pretty\neasy. And you should do it in a couple minutes. \nSo as you learned we use for \nloops to iterate over all the items in a  collection, \na collection can be a string, it can be a list, it can be a range object that is\nreturned from the range function. Anything, any kind of object that has multiple\nitems. So in this example we're going to use a for loop to iterate over\nthe list of prices. So for item in \nprices, colon, and by the way this loop variable\nwe don't have to call this item, can call this anything. For example, in this case\nwe can rename it to price. So for price, \nin prices. Now in each iteration this\nprice will hold one value. In the first iteration it's going to hold 10, then it's\ngooing to be 20, and then it's going to be 30. So we need to define \nanother variable to calculate the total so\nwe define that outside of our for loop, let's call it total\nand initially we set it to 0. Now in each\niteration we get the current price and add it to the total so\nwe write total equals total plus price \nor as you learned earlier we can use the augmented \nassignment operator to simplify this code. \nSo, after our for loop. This total variable has \na total of all the prices we can simply print it here, \nor we can use a formatted string, so a string \nprefix with f, the other label, like total, \ncurly braces to dynamically include some value in our string, \nin this case our total variable. So let's go ahead \nand run this program, there you go, so the total cost of\nall the items in our imaginary shopping cart is 60. \nIn this tutorial I'm going to talk to you guys about nested loops\nin python. Using a nested loop basically means adding one loop\ninside of another loop, and with this technique we can do some amazing things\nfor example we can easily generate a list of coordinates. So, a\nacquired (?) as you know is a combination of x and y \nvalue. Let's say 0 and 0. Now let's say you wan to generate\na list of coordinates like this. So we have 0 and 0, \nthen we'll have 0 and 1, then 0 and 2, next\nwe're going to change x, so we're going to use 1 for x, \nand once again we're going to use these 3 values for the y coordinates\nso 1 and 0 then 1 and 1 \nand 1 and 2, you got the point. We can\neasily generate these coordinates using nested loops. Let me show you. \nSo, we start with one loop, let's say for x in\nrange 4. With this loop, we can generate value \nfor the x coordinate. Let's print this on the terminal,\nOkay, so, we get the values, 0 \nto 3. Now for each x, like 0, we \nshould generate a few y values. So that is where we use\na nested loop. So inside of this loop we're going to add\nanother loop, so instead of just printing x first we want to add \nanother loop, for y in range \nlet's say 3, now we can print x and y together \nso, print, here, we use a formatted string. \nto display coordinates like this. So we add parenthesis \ninside of this parenthesis first we need to add x so curly braces\nx then a comma followed by \nanother set of curly braces, and y, \nlet's run this program and see what we get. \nThere you go. So, we have these coordinates \n0 and 0, 0 and 1, 0 and 2, then you have\n1 and 0 1 and 1 1 and 2 and so on. So let me explain exactly \nhow this program gets executed. So in the first iteration, \nof our outer loop, x is 0. Now we are\non line 2, here we have a new loop which we call an\ninner loop. In this inner loop, in the first iteration y \nis going to be 0, so we print 0 and 0 on the\nterminal. Now the control goes back to line 2 or our\ninner loop. In this second iteration y will be set to 1, but\nwe are still in the first iteration of our outer loop. So \nx is still 0, but now y is incremented to 1. \nSo that is why we see 0 and 1 on the terminal. \nOnce again, the control goes back to line 2, we are in the third \niteration of our inner loop, so this will continue until our inner loop\ncompletes. That is when y reaches 2 because \nthis range function generates number 0 to 3 but not including \n3. So we'll have 0 1 and 2. After this inner loop completes, \nthen the control goes back to line 1, and at this point we're going to\nbe in the second iteration of our outer loop. So x will be \n1, then the control will be moved to line 2, or our inner \nloop, at this point, this range function is going to generate the numbers 0\nto 3 one more time. So this inner loop will be executed 3 times.\nAnd then we'll go back to our outer loop. So this is how\nnested loops get executed. \nOkay, here's an exercise for you, but this one is a little bit \nmore challenging then the exercises you have done so far. So I really don't \nexpect you to do it, but if you do it, wow, I will be so proud of you, \nso see what I've done here? Using nested loops, \nI've written some code to draw this f shape, can you see that? So I\nlet me give you a hint, first of all we have this\nlist, called numbers, in this list we have these values, \n5, 2, 5, 2, 5, 2. These values determine\nthe number of x's we have in each line. So, \nfor example, the first item in this list, this tells us that we should have \n5 x's on the first line. There you go, so 1, 2, 3, \n4, 5, on the second line we're going to have 2 x's, \non the third line we're going to have 5 x's like this. \nSo I've written code to convert a simple list of numbers\ninto a shape like this. Now here's a tip for you. \nUsing your for loop you need to iterate over this list. In\neach iteration you get one number, this determines the number of x's\nto be displayed on that particular line. So if you want to cheat, \nyou can get this number and multiply by a string that contains x, \nso if you multiply x by 5, we'll get 5 x's, that's not what \nI want you to do. I want you to use an inner loop here to \ngenerate a string that contains 5 x's. So imagine \nin Python we cannot multiply a string by a number\nso to solve this problem we need a nested loop. So go ahead and spend \nfive minutes on this exercise. And by the way, do your best to solve this. It is\na little bit challenging, but it's not extremely difficult. It just requires\na little bit of focus. You'll see my solution next. \nAlright so first we need to iterate over\nall the items in this list. So for item \nin numbers, or, you could rename this variable \nto x_count. That is the number of x's\non each line. Okay? Now I told you that if you want to cheat you can write code \nlike this. Print x times \nx underline count. If you run this program we get the same \noutput. So this is the beauty of Python, with Python\nwe can write expressions like this, we can multiply a string by a number to\nrepeat it. A lot of other programming languages don't support this feature. But\nfor this exercise, I wanted you to imagine that we don't have this feature in Python \nso you will have to use an inner loop to solve this problem. Here's how\nit works. In the first iteration, x count is going to be 5.\nSo we need to generate 5 x's. How can we do that?\nWell, let's say we define a variable called output and initially set it to\nan empty string. Now we need to add 5 x's to this string. So, \nwe can use another loop for count in range, \nof x underline count. So we're using the range function\nto generate a sequence of numbers from 0 up to\nx count. So in our first iteration x count is going to be 5, so\nrange of 5 would generate the numbers 1, 2, 3, 4. \nSo this inner loop will be executed 5 times. \nThat is exactly what this count represents. \nSo now in each iteration we simply need to\nappend an x to our output variable. So we set\noutput, plus, equals x, \nand then after this inner loop we simply print \nthe output. With his we'll print 5 x's on \nthe first row. Then we go to the second iteration of our outer loop. \nAt this point x count is going to be 2, now\non line 3, we're going to reset our output variable to an\nempty string. So we start over. Then we go to our inner loop, \nthis loop will be executed 2 times, so we'll append to x's \nto the output variable and then print it, as simple as that. \nSo see, it wasn't really that difficult, but it was slightly more difficult then the\nprevious exercises. So let's run this program, there you go. \nNow if you're adventurous, I want you to modify the values that we have\nin our numbers list,\nto print and l here. \nNow in this tutorial we're going to take a closer look at lists. \nSo, I'm going to define a list of names, let's send them\nto John Bob Mosh \nSarah and Mary. So, \nif you print this list here, what we see on\nthe terminal look exactly like how we define our lists we have\nsquare brackets, and in between these square brackets we have our item\nour items, so we have 5 strings in this list. \nSo we can also access an individual element using an index just like\nhow we can access an individual character in a string using an index. \nSo, here we type out square brackets, \nand specify an index. The index of the first item in this list \nis 0. So, let's run this program, there you go, \nwe get Jon now if you want to print out the third element in this list\nit's index is 2, so names of 2, \nreturns Mosh, now we can also pass\na negative index here, so negative 1, refers to the last item \nin this list, that is Mary, let's run the program, \nthere you go, we see Mary, if you pass negative 2, this\nreturns the second item from the end of the list. So let's run the program,\nthere you go, we get sarah, so this is exactly like accessing \nindividual characters in a string. We can also\nuse a colon to select a range of items, for example if \nyou pass 2 colon. This will get all items\nstarting from the index of 2, that is Mosh here all the\nway to the end of the string. So let's run this program\nthere you go. We get this list with 3 \nitems, Mosh, Sarah, and Mary. We can also specify \nan end index, let's say 4, so this will return all\nthe items up to this index, but it doesn't include the item at this index.\nSo when we run this program we only see Mosh and \nSarah, the item I've indexed 4which is the 5th element or\n5th item in this list is not returned. So Mary\nis not returned. And also here we have default values, so if you\nleave out the end index this expression is going to return \nall the items starting from the index of 2, to the end of the list\nor if you leave out the start index, this expression asumes\n0 as the default index, so it will return all the items from the\nbeginning to the end of the list. And by the way, \njust like strings, these square brackets here, don't modify our\noriginal list, they simply return a new list. For example, if we pass\n2 here, you can see this returns a new list with 3 items. \nSo if you go back here and print our original \nlist of names right after you can see it's not affected. \nSo here we want to use square brackets with a colon to select a \nrange of items, we get a new list, and by the way we can also \nmodify any of the elements in this list. For example let's say we made a mistake and\nthe first item shouldn't be john with an h, \nso we want to remove the h, that is very easy, so we access it, \nusing an index that is names of 0, and we set it to a new value\nlike this. Now, let's print our list \nso, you can see the first item in this list \nis now data. So this is the basics of lists. And here's a \nexercise for you. I want you to write a program to find the largest number \nin your list. This is a fantastic exercise for beginners, so go ahead and \nspend a few minutes on this, then come back and continue watching. \nAlright, let's\ndefine a list of numbers, numbers, with a bunch of random numbers\n3, 6, 2, 8, 4 and 10. \nNow to find the largest number in this list. We need to define another \nvariable let's call it max, this variable will hold\nthe largest number, now initially you want to assume \nthe first item in this list is the largest number. So we set max to\nnumbers of 0. We're only assuming that the first item \nis the largest number. Chances are our assumption is wrong. So we need\nto iterate over this list, we need to loop through it, get\neach item and compare it with max. If it's greater than Max, then\nwe need to reset max to that number. So in the first iteration we get\n3, and max is also 3. Is 3 greater than\n3. No, so we move on, we get the second number, is \n6, greater than 3? It is, so we need to reset max \nto 6. Once again, we continue, we get 2, these two greater\nthan 6, no it's not, so we move on, then we get 8, \nis 8 greater than 6? It is, so we should reset max to 8. \nThat is pretty easy. So here we need a for loop, for\nnumber in numbers colon \nnow we need too heck to see if this number is greater than max, \nso, if number is greater than max, \nmax colon then we need to reset max, so max\nto this new number, that's all we had to do.\nSo, let's print max, and run our\nprogram we can see the largest number in this list is 10. \nIt doesn't matter whether this number is at the end of the list or the beginning. \nSo if I move 10 and put it right at the beginning \nwe should still see the same result. Let's run our program,\nwe still see 10, if I put this somewhere in the middle, our\nprogram should still work. Let's put it right after 2. \nRun the program, we still get 10. \nIn this tutorial I'm going to talk to you guys about two dimensional \nlists in python. Two dimensional lists are extremely powerfully and they have a lot\nif applications in data science and machine learning. Here's\nan example, In math we have a concept called matrix, which is like\na rectangular array of numbers, let me show you. So\nwe have 1, 2, 3, 4, 5, 6, 7, 8, 9.\nSo we have a rectangular array of numbers. You have rows, \nand columns. So this is a 3 x 3 matrix \nin math. Now we can model this in python using \na 2 dimensional list. A 2 dimensional list is a list where\neach item in that list is another list. So,\nyou want to define a matrix. We set it to a list, each\nitem in this list, is going to be another list, and that list represents \nthe items in each row. So, the first\nitem in our list is going to be another list, and in this other list we're going to have\nthe values 1, 2, and 3. Now the second \nitem in our matrix list, once again, we have a list, \nthis list represents the items in the second row. So, \n4, 5, and 6, and finally 7, 8 \n9. So as you can see we have a 2 dimensional list\nEach item in our outer list is another list.\n Okay? So, this is how we can implement a matrix in\npython, now to access an individual item in our matrix, \nonce again we use square brackets, let me delete this stuff, \nalright, so how do we access 1 here, \nwell, you start with our list then we add square \nbrackets first we need to go and get the first item in this list. \nRight? So we pass 0, now this expression \nreturns another list. That is the inner list. In this list, \nlet's say you want to access the second item, so, \nonce again we add square brackets, and we pass 1, that\n is the index of 2 in this list, alright. \nSo if we print this on the terminal \nwe get 2. Okay? So using 2 square brackets \nwe can access individual items in our matrix, and \nalso we can modify these values using this syntax, so, \nbefore printing this, let's change this to 20, so matrix\nof 0, and 1, let's change it to 20, \nand then print it, there you go, it's modified, now here you\ncan also use nested loops to iterate over all the items \nin this matrix. Let me show you. So, \nwe start with a rows for the rows in matrix, \nso with this loop, we are iterating over our Matrix\nlist, in each iteration row will contain 1 \nlist, 1 item, okay? Now, here we need to\nuse an inner loop. So we need to loop over this row\nwhich is a list of items. We can type out 4 \nitem in row colon and print \nitem. Okay? So, let's run this program, \nthere you go, we get all the item\nin our list. Hey, I just\nwanted to make a quick announcement. In case you haven't seen my website yet, head over to codewithmosh.com\nthis is my coding school, where you can find plenty of courses\non web and mobile application development. In fact recently I published a \ncomprehensive python course that goes way beyond this beginners \nyoutube. And if you're serious about learning python and getting a job, I highly encourage \nyou to enroll in this course. Just like this tutorial you can watch it anytime, \nanywhere as many times as you want, and you will also receive a certificate \nof completion that you can add to your resume, and the course comes with a 30 day\nmoney back guarantee, so if you're not happy we'll give all your money back, \nno questions ask. The price for this course is 149 dollars, but\nthe first 200 students can get it for only 15 dollars. So if you're interested, \nthe link is below this video, click the link, and get started.\nIn this tutorial, I'm\ngoing to talk to you guys about the list methods, or list functions. These are the\noperations that we can perform in a list. So let's define \na list of numbers, here we pass a bunch of random numbers, like\n5, 2, 1, 7, and \n4. Now there are a number of things we can do with this list, we can\nadd new items to it, we can remove existing items, we can check for the existence of an item \nthese are the operations that we can perform on a list. So, \nthe we type numbers, we can see all these functions or more accurately \nthe methods that are available in our list objects. \nSo we can call the append method to add a new item to this list. Let's say\n13. Actually, no it's not a good number. \nI'm joking I'm not superstitious, so let's add 20, it\ndoesn't really matter and then print our list \nwhen we run the program we can see 20 is added at the end of this list \nbut what if you want to add a number somewhere in the middle, or at the beginning\nof our list? For that we use a different method, that is called\ninsert. So, insert, now this method\ntakes 2 values, let me show you. So when we open parenthesis \nlook at this little tool tip above the insert method. \nYou see the first value that we need to pass here is an index, so\nthis is the index at which we want to insert this new item. Let's\nsay we want to add an item at the beginning of our list, so we passed our index position \nof 0, and then the second value is the actual \nobject we want to add to this list. Let's say we want to add the number 10, \nnow when we print this list you can see that the\nnumber 10 is placed at the beginning of the list and \nall the other items are pushed to the right. We can also remove an item so\nwe call remove and pass the item that\nwe want to remove 5. Now we\nprint our list so we see 5 is gone, and we have\n2, 1, 7, 4. If you want to remove all the items in the list, you can call\nthe clear method, so, clear \nthis method doesn't take any values, so, we simply\ncall it and it empties our list, all the items are removed. \nWe also have another useful method called hop, \nand with this we can remove the last item in a list. \nLet me show you. So, we run our program, you can see the number 4\nis removed from the end of our list. Now if you want to\ncheck for the existence of an item in our list, you can call the index method. \nSo, we call index and pass a value here, like 5\nand this returns the index of the first \noccurrence of this item. So let's print this on the terminal. \nWe don't need this line anymore. So the\nindex of 5 is 0. What if we pass a number that doesn't exist\nin this list? Let's say 50? Run the program,\nwe get an error. We get a value error. 50 is not\nin the list. There is also another way to check for the existence of an item, \nwe can use the in operator. So, let me show you\nwe type our 15 in numbers, \nearlier we used the in operator with a string, we\ncheck for the existence of a character or a sequence of a character in a string,\nnow here we're checking for the existence of 50 in the list of numbers, so\nlet's print this, we get a boolean value, \nfalse, so unlike the index method, this expression, \ndoesn't generate an error, so it's safer to use this. We also have another\nmethod for counting the occurances of an item, let's say we have \nanother 5 over here. \nNow we can call numbers.count and pass 5\nand this should return 2 because we have 2 5s in this list.\nTake a look. There you go. That is pretty useful\nnow if you want to sort your lists you can call sort method. So,\nwe call the sort method here, this method doesn't take any values so, \nlook at he return value, that is none, none\nis an object in python that represents the absence of a value.\nSo this sort method doesn't really return any values it simply sorts this\nlist, in place, so instead of printing the return value\noft his method, we simply call it to sort our list\nand then print our list. Take a look. \nNow, all the items are assorted in ascending order. We can also\nsort the items in descending order, so after we sort the list \nwe can call the reverse method. We can simply reverse\nour list. Now let's go ahead and run our program, take a look.\nOur numbers are sorted in descending order. \nAnd one last method I want to show you here that is pretty useful is the copy\nmethod. So copy, with this method you can get a copy \nof our list. So let's define another variable called numbers 2, \nnow numbers 2, is a copy of our original list. So if\nyou make any changes to our original list, if you add new items to it, if you remove \nexisting items, these operations are not going to impact our second list. \nLet me show you. So after we show you a copy of our numbers list\nlet's add a new item to this list, so numbers.apphend \nten. So the first list is updated, so now we have a \nnew item in our first list, then lets print the second list.\nTake a look, we don't have the number 10 here, because these are\n2 independent lists. So these are all the operations \nthat we can perform on lists. We can add new items to a list, we can\nremove exxisitn items, we can check for the existence of an item, we can sort \nour list, and copy them. Now here's an exercise for this tutorial, \nI want you to write a program, to remove the duplicates on our list. \nAgain, this is a fantastic exercise. So spend a few minutes on this and then\ncome back and continue watching. \nAlright let's say we have a list of numbers with\na bunch of duplicates. So 2, 2, 4, 6, \n6, 3, 4, 6, 1. We want to remove\nthe duplicates. So we need to define another list\nlet's call that new list. Initially we\nset it to an empty list. Then we need to iterate over\nour first list, get each item, and if we don't have that number\nin this unix list, then we'll add it to this second list. \nAs simple as that. So, for number \nin numbers, now we need to check to see if we\nhave this number in the second list. So we use the in\noperator. If number not \nin units\nso if we don't have an operator in this units list,\nthen we'll need to add it, so units.\napphend number, that's all we have to do.\nSo, let's go ahead and print the units list\nthere you go. So you have 2, 4, \n6, 3,and 1. The duplicates are removed. \nIn this tutorial I'm going to talk to you guys about another important structure. \nin Python called tuple. Tuples are similar to lists\nso we can use them to store a list of items. But unlike lists we can\nnot modify them, we cannot add new items, we cannot remove existing items, we\ntuples are immutable. We cannot mutate or change them. So\nlet me show you. So I'm going to start by defining a list of numbers, \n1, 2, 3, 4, so we use square brackets to define lists and \nparenthesis to define tuples, so if we change this to\nparenthesis, 1, 2, 3. Now we have a \ntuple. So if we type numbers.\nlook here we don't have the append or insert methods, so we cannot add new items to this tuple.\nWe also don't have remove clear and pop, we cannot\nremove any of these items here. We only have two methods, count, \nand index. We use count to count the number of occurrences in an item, \nand index, to find the index of the first occurrence, \nof an item. So we can only get information about a tuple, we can't change it. \nAnd by the way, these other methods that you see here, they start\nwith two underscores, we refer to these as magic methods, they're more of an advanced\ntopic, so they go beyond the scope of this tutorial. If you're interested\nto learn bout them. You can get my python course, I've covered them in detail.\nSo similar to lists you can address individual items using\nsqure bracketts,s o we can get the first item like this and then\nprint another terminal, there you go, the first item is 1, \nbut if you try to change the first item we'll get an error, so, \nnumbers of 0, we set it to 10 and run our program \nthere you go. We get this type error, because the tuple object\ndoes not support item assignment. So we cannot \nmutate or change tuples, they are immutable. Now practically \nspeaking, most of the time you'll be using lists, but tuples are also\nuseful. If you want to create a list of items and make sure \nno where in your program you accidentally modify that list, then it's better to\nuse a tuple, \nIn this tutorial I'm going to show you a powerful\nfeature we have in python called unpacking.\n So lets find a tuple called coordinates\nand here we pass 3 values, 1, 2, 3. So you imagine these are\nthe coordinates for x y and z. Now let's say\nwe want to get these values and use them in a few expressions, a few complex\nexpressions in our program. Maybe we want to include them as part of a large\ncomplex formula. So together we'll have to write code like this,\ncoordinates of 0, then let's say we want to multiply this\nby coordinates of 1, and then multiply it by coordinates \nof 2, our code is getting a little bit too long, this is just\na very simple example. But let's say we want to use these values in quite a few places \nin our program, a better approach is to get these values\nand store them in separate variables like we can get\ncoordinates of 0, and store it in x, then you can\nget coordinates of 1 and store it in y. \nAnd similarly we get coordinates of 2, \nand then store it in z. Now we started repeating coordinates of\n2 or coordinates of 0 multiple times, we can simply work with these\nvariables, x times y times z, that is better. \nRight? So nothing new so far. But in Python we have a powerful\nfeature called unpacking and with that we can achieve \nthe same result with far less code. So we can define our variables \nx, y, and z. And set them to our\ntuple. What we have on line 6 is exactly\nidentical to what we have on lines 2-4.\nSo this is a shorthand to achieve the same result.\nSo let me delete this and explain how this code works.\nWhen Python interpreter sees this statement, it will get the\nfirst item in this tuple and assign it to the\nvariable. Then it will get the second item in this tuple, then\nsimilarly we get the third item in this tuple and assign it to\nthe third variable we have here, so we are unpacking\nthis tuple into 3 variables. Now if we\nprint x you can see x \nis 1, similarly y is 2, there you go. \nSo this is unpacking. And by the way this is not\nlimited to tuples, we can use this feature for lists as well. So,\nif I change parenthesis to square brackets, now \ncoordinates is a list, so we can unpack our list into 3 variables \nnow we run our program we can see y is 2.\nIn this tutorial I'm going to talk to you about dictionary \nin python. We use dictionaries in situations where we want to\nstore information that comes as key value pairs. Here's\nan example. Think of a customer. A customer has a bunch of attributes\nlike name, email, phone number, address\nand so on. Now each of these attributes has a value. \nFor example the name can be jon smith the email can be\njon@ gmail.com the phone can be whatevr\nso what we have ere is a bunch of key value pairs. So in this\nexample, our keys are name, email, and phone, \nand each key is associated with a value. So this is where we use \na dictionary. With a dictionary, we can store a bunch of key value pairs. \nSo let me show you how to define a dictionary in python. \nBack to our program, I'm going to define a variable, customer, \nand here we set it to curly braces. With these curly braces we can\ndefine dictionary. In this example we have an empty dictionary that doesn't have\nany key value pairs. Now we can add one or more key\nvalue pairs in between the braces. So let's\nadd a key value pair here, I'm going to set the key to a  name, and \nthe value to John Smith, then we add a comma,\nto add another key value pair. So let's set age to \n30 let's add another key value pair is \nunderline verified and we set this to a boolean.\nNow what matters here is that these keys should be\nunique. So if I add another key value pair here, \nset age to 40, now look pycharm\nhas highlighted the age key, because we have duplicated that and\nthat's not allowed. So each key should be unique in a dictionary, just like, \nthe dictionaries we have in the real world, in a real dictionary we have a bunch of words \nand they're definition each word is only listed once in a dictionary.\nWe don't have the word book twice. So let's delete the second\nduplicate key value pair, so the keys should be unique,\nand in this example, I'm using strings, but they can also be\nnumbers, we're going to look at that later, but the value can be anything, it can be\na string, a  number, a boolean, a list, literally anything.\nNow we can access each item in this dictionary \nusing square brackets. So, we type customer, \nsquare brackets and then specify key like name\nand this will return the value associated with\nthe name key. Let's print it on the terminal, have a look,\nthere you go, so, the name is John Smith, now\nwhat if we pass a key that doesn't exist, lets say first date.\nYou run the program, you get a key error because we don't have\na key called birth date. Also, if we spell\nname with let's say a capital N, we get the same\nerror because we don't have a key with the exact same sequence of\ncharacters in this dictionary. Now to get around this we can\nuse the get method, so instead of using the square brackets \nwe call the get method and specify the key\nNow if you use a key that doesn't exist here, it doesn't yell at us. For example, \nif you pass birth date\nit simply returns the non value. Earlier I told you that none is an object\nthat represents the absence of a value. So\ninstead of getting a key error we get none and we can also option\nsupply a default value, for example, if this dictionary doesn't have this\nkey, we can supply the default value, let's say\nJanuary 1st 1980. Let's run the program \nnow instead of getting none we get this default value. \nSo, this is how we can access the value associated with the key\nin a dictionary. We can also update these values for example \nbefore a print statement we can write code like this, customer of\nname, let's update the name to jack \nsmith, now this little warning is telling us here we can put jac\nsmith here instead of defining it once, and then update\nit. Don't worry about them, it doesn't really matter. Now with this line if \nwe print the name of this customer, we should see jack smith, let me show you.\nSo, I'm going to use the square bracket notation again, let's print\nthe name of the customer you can see that is updated here, \nwe can also add a new key here, let's set the\nbirthdate to some value like january first\n1980. And then we can print it here, \nso as you see we can easily add new key value pairs\nto a dictionary. So this is the basics of using dictionaries\nin python. They're extremely important and they have a lot of applications in the real\nworld. Okay, here's an exercise for you. So here we have\nthis program that asks our phone number. Let's type 1\n234. We type it in digits and then this will translate\nit, to words, take a look. Enter, it prints, 1, 2, 3, \n4. That's a pretty cool program, so go ahead and\nspend a few minutes on this exercise, it's pretty easy, I will see you\nnext. \nAlright, so first we need to get the users phone number, we call the input function \nwith the label phone, we get the result and store it\nin this variable, now let's say the user enters 123\n4. So we need to look through this string, get each character and \ntranslate it to a world, so what we need to implement this scenario.\nis a dictionary, because a dictionary is a structure that allows us to\na key to a value. So we can have a dictionary with keys\nlike 1234. And we map each of these keys\nto a word. So we cannot put digit 1 to\nthe word 1 we can map 2 \nto two you get the point. So let's define \na dictionary, you can call it digits, underline mapping\nnow this dictionary I'm going to add a few key value pairs. \nOne, we map it to 1, 2, we \nto 2, 3, to 3, \nand finally, 4 to 4. Now technically we should\nadd all the digits from 0 to 9, but I don't want to waste all your time \ntyping repetitive things here, you got the point. So lets move on,\nnow we need to look through the phone string. So \n4 character in phone, we get each\ncharacter and then use it to access a key value pair in\ndictionary. So, digits underline mapping\nwe can use square brackets or call the get method, \nI would prefer to use the get method, so in case the user enters some character\nthat is not part of our dictionary, our program is not going to yell at them.\nSo, we call the gt method and pass this character\na the key, and if we don't have this key, we can supply\na default value like exclamation mark, so with this we get a word\nnow we need to add this word to an output string, so we can define\nan output string, initially we set it to an empty string, \nin each iteration we get this and add it to our output string. \nSo, we type output, plus equals. \nThis and we should also add a \nspace at get. So the words are not close to each other, okay?\nThat's all we have to do. Now finally let's print\nthis output, run our program, so I want to\ntype 1, 3,4, 5, lets \nsee what we get. We get 1, 3, 4 with an exlamantion\nmark. \nIn this tutorial I'm going to show you something really cool\nthat you can do with dictionaries, so here in this program you can type\na message like good morning followed by a smiley face,\nwhen we press enter, we get this beautiful smiley face, or\nwe can type i am sad, with a  sad smiley face\nand it gets translated to this beautiful emoji. \nSo this is another application if using dictionaries, we have a dictionary \nthat maps these characters into smiley faces. \nSo lets go ahead and build this program together, we start by\ncalling the input function, here we pass a greater than symbol\nas an indicator for the user to type a message, we give that message, store\nit here, as you know that is a string, now we need to\nsplit this string by a space, so if the user types\ngood morning with a smiley face, we want to break this down into\n3 words, good morning, and smiley face. \nTo do that we can call the split method. So we call\nmessage.split and pass \na string with one space as a separator. What this method\ndoes is basically it goes through this string and anywhere it finds this\ncharacter, in this case a space, it uses it as a boundary to\nseparate this string into multiple words. And then it will return\na list. Let me show you. So let's store that here, words, and then\nThen print it on the terminal, \nlet's go ahead and run our program. So if you type good morning \nsunshine, enter, we get a list with three items \neach item is a string, okay? Now, \nback to our program, we need to define a dictionary for mapping special characters\nlike these 2 into a smiley face, so, \nwe can call that emojis \nset it to curly braces, here we add a key value pair, \na smiley face, and we map that to a string, \nin this string we want to add an emoji, if you're on a mac keyboard you can press \ncontrol command and space and this should bring up\nthis emoji box, if you're on Windows honestly I\nreally don't know how you can do this, but there must be applications who do this for you. So lets go\nahead and pick this happy smiley face, good, \nnow lets add another key value pair, or sad face\nwe map this to, \nthis face here, good. So, we \nhave a list of words now we need to look through this list, get\neach word and potentially map it to an emoji.\nSo we can write a for loop for word in words, \nnow we want to go to our dictionary, and see if you have an item with this\nword as the key. If you have an item with that key, we get\nit's value, otherwise we want to use the same word. So if a user types\ngood morning, we don't want to translate those words, we just want to return those. So that is the case, \nwhere we use the get method to supply a  default \nvalue, so we wan to get an item with a key word, and\nif we don't have an item with that key, we simply use that word as \nthe default value. Now similar to the exercise that we did in the last tutorial \nwe need an output variable. So let's define that here, \noutput set it to an empty string, now back to line\n9, we get the return value of the get method, \nand add it to our output variable. So output \nplus equals whatever we get from the get method, and finally \nwe need to append a space at the end. \nThat's it, we're done. So let's print the output \nand run our program and I'm going to type good morning\nsunshine with a smiley face, we get that \nbeautiful, let's try the sad face as well, I am sad. \nToo bad. Beautiful! So as you can see\ndictionaries have a lot of use cases in real applications.\nHere's a solution from the last tutorial where we created an emoji \nconverter. Now so far we have been writing all our code right here,\nin app,py, but as our programs grow we need a better way to organize our code. \nWe need to break up our code into smaller, more manageable \nand more maintainable chunks which we call functions. So function \nis a container for a few lines of code that perform a specific \ntask for example you have learned about a few of the built in functions in\npython like print, and input, each of these functions \nhave a purpose, they know how to perform a specific task. So when we \nbuild large complex programs, we should break up our code into smaller \nreusable chunks which we call functions to better organize our code.\nAnd that's what I'm going to show you in this tutorial. So let's write this simple \nprogram, for printing a greeting message. So we're going to do a print, \nhi there, and lets add another message \nwelcome aboard. So here we have a simple \nprogram with only two lines of code. Now let's say these two lines \npotentially we're going to need them in other programs so we can put them in a function that\nwe can reuse. Let me show you how to do that, so, \nwe start typing out death, that is a reserve keyword in\n Python, and it's short for define. When Python interpreter sees this it\nknows that we're defining a function, next we need to give our function \na name, lets say greet_user.\nSo all the best practices you learned about naming your variables also apply here, \nwhich means we should name our functions with lower case characters \nif there are multiple words, we need to separate them using an underscore \nand you should always, always, always use meaningful\ndescriptive names for your functions. So, here we define a function\ncalled greet user, after that we'll need to add parenthesis \nfollowed by a colon. Now you know that whenever we add a colon at the end of a line\nwe're telling python that we're defining a block of code. So when we \npress enter, the next line is indented. Now any code that we write here\nwill belong to this function. So I'm going to move these two lines\nthese two print statements inside of our function. You can simply \npress tab to indent them, beautiful, also lets remove\nthis extra line break, that is better, so these two lines\nnow are part of our greet user function, so whenever we \ncall this function, these two lines will be executed. Okay? Now, \nlet's remove indentation so here we are outside of our function, \nlet's do a print statement and print start\nafter that let's call our function, so greet user.\nAnd finally let's do another create statement and print\nfinish. Now we have this little warning here, this\nunderline, if you hover your mouse over this line, this tool was telling you\nthat we should add two blank lines after a function definition. This is coming from\npep8 which is a document that defines the best practices for\nformatting our code. We'll look at that in the future. So for now to make pycharm\nhappy, lets add an extra line break to this function\nso whenever we define a function we need to add two lines breaks after.\nOkay? so, now let's run our program and see what happens.\nAlright, so we have 4 messages on the terminal \nfirst we get the start message then we get the messages\n coming from our create function, so either and welcome aboard, and finally we see\nthe finished message. So let me explain the flow of our program \nwhen python runs this code it doesn't actually print these\ntwo messages on the terminal because these two lines of code are inside\nof this function, so they would only get executed if we call\nthis function. If we don't call this function, these lines don't get executed. \nOkay? So the execution of our program actually starts here,\nthe first message that we see on the terminal is the start message. After\nthat, Python sees that we are calling the greet function, so\nit will jump over here and then execute these two lines.\nThen, it will jump out of this function and continue the normal\nexecution of our program so it will print the finish message on the terminal.\nSo this is how functions work. Also note that the order of this\ncode matters, so here we're calling the greet function after\nafter we have defined it. If you try and call it before you define it you will see an error.\nFor example, if we call the greet\nuser function right here, see we immediately get this red underline\nwhich says unresolved reference, greet user which basically\n means python doesn't know what is this greet user, it's not defined anywhere. \nSo we always define our functions first, and then \ncall them. \nHere's a function we created in the last tutorial\nnow I got a question for you, what is the difference between\ncalling this functions nd the print function of python? The difference \nis that the print function takes some information, in this case \nthe message that we want to print, but our greet function doesn't take \nany information. Wouldn't it be nicer if you could pass the name of the user here and then\ninstead of saying hi there, you could print the name of the user. So, \nin this tutorial, I'm going to show you how to pass information to your functions, and \nthat is pretty easy, so back to the definition of our greet\nuser function, inside of these parenthesis, we can add parameters\nthese parameters are pale holders for receiving information. \nFor example, you can add a name parameter, and we can pass the\nname of the user when calling this function. So let's pass Jon\nhere, now when we call this function and pass this value\nthis name parameter will be set to Jon. So it\nwill act like a local variable that we defined inside of this function. \nJust imagine, we didn't have this parameter, and instead we had \na variable like name that was set to jump. Now here we could simply \nprint the name of this user, so we could use a formatted string, \nand print the value of the name variable, right? Now, \nwe don't really have this local variable defined in this function\nwe have a parameter, it's exactly the same thing. So \nwith these parameters we can receive information in our functions. Now let's go ahead and\nrun this program, so take a look. \nWe get Hi John welcome aboard, we can take this to the next \nlevel. Now we can call this function one more time. So \ngreet user, and this time supply a different name. Let's say Mary. \nSo we are reusing our greet function and passing it a different\nvalue. Imagine if we didn't have this function you would have to \nrepeat this line twice , once for hi jon and another time for hi mary. \nSo this is the benefit of defining functions, we can take a few\nlines of code that have a specific purpose and put them inside of a \nfunction, so now let's run our program one more time\nthere you go. So you get hi job, welcome aboard, then you get hi mary\nwelcome aboard. Now note that when a function has a parameter \nwe are obligated to pass a value for that parameter. \nSo if you remove jon from here and run \nour program, we get this type error, greet user, \nmissing one required positional argument. \nArgument in programming is the value that we supply to a function, so\nback to this example, marrying this case is an\nargument that we pass to the name parameter. And lot of\nprogrammers don't know the difference between parameters and arguments and think they are the same. \nBut they are not, parameters are the holes or placeholders\nthat we define in our function for receiving information, \narguments are the actual pieces of information that we supply to these functions. \nOkay? So, let's bring back \nthis jon string, now we can also define multiple \nparameters, for example, let's rename this parameter to first name as I told \nyou before, you can right click here, go to refactor and then \nrename, or preferably you can use a short cut. So the shortcut for\nthis on Mac is shift and f6. \nAnd this brings up the renamed dial up box, here we can change this to first \nunderline name. Now we can add a second parameter \nso comma followed by last underline name \nso back to our formatted string, let's also print \nthe last name, beautiful, so here when calling this function, \nthen we can supply another argument so jon\nsmith and lets delete this line we don't really need it anymore \nrun our program, take a look, hi jon smith, \nso in the last tutorial you learned that whenever \nwe define parameters for our functions we should always supply \nvalues otherwise we'll get an error. Let's look at that error one more time.\nSo In going to delete this second argument and only pass jon. \nRun our program, we get this message, \ngreet user missing one required, position \nargument. So these arguments that you have here like jon \nand smith you refer to these as positional arguments. \nWhich means their position or argument matters. In other\nwords, the first argument we add here is the value or the first parameter \nand the second argument is the value for the second parameter. \nSo if you change their position or order, we'll get different results. \nLet's take a look. Let's pass smith first and then\njon. Okay, good, delete, now let's\ngo with this, so instead of getting Hi Jon Smith, \nwe get hi smith jon. So that is the reason we refer\nto these arguments as positional arguments, they're positioned or\norder matters. But in python we also have keyword arguments, and \nwith those the position doesn't matter. Let me show you how they work. So, \nlet's say here you want to pass Jon as the value for the first \nname parameter. We can simply specify that here. So first name \nequals jon. Now what we have here is a keyword argument. \nthe key word argument. So this combination of having the parameter name,\nfollowed by it's value is what we call a keyword argument, and what we get with this keyword\nargument the position doesn't really matter. So here we're supplying\nJon as an argument fort he first parameter. Now similarly, \nwe can use a keyword argument for smith, so last\nname equals smith, so that we have 2 \nkeyword arguments. So with these keyword arguments we don't have to worry about\nthe order of the parameters. Now that doesn't mean we should always use keyword arguments. \nNot really. Most of the time we use positional arguments, but\nin certain situations these keyword arguments helming us improve \nthe readability of our code. So on line 7 it's quite clear\nthat we are supplying smith as the last name and jon\nas the first name. Now in this particular example, even if we didn't have\nthe keyword arguments, just passing two positional arguments like jon \nand smith, would be sufficient, because it's easy to guess\nwhat is the purpose of these arguments. But sometimes you're dealing with functions\nand you're passing numerical values to them, in those situations\nit may not be quite clear what those values represent. Let me show you an example.\nLet's say we have a function for calculating the total cost of an order, \nso we still call that calculate, underline cost, \nso when calling this function, you need to supply three pieces of information.\nOne is the total cost of all the order items lets say 50\ndollars. The other is the shipping cost, let's say \n5 dollars, and the last piece is discount, let's say 0, \n.1. Someone reading this code, may not be sure \nwhat these three values represent, in this case, we can improve\nthe readability of this code, by using keyword arguments. So we can\nprefix each value with the name of parameter they target, for example, \nwe can set total to 50 and then\nshipping to 5, and then discount to 0.1. \nNow if you give this code to someone else, they\ncan immediately tell what these values represent. So that is the power \nof keyword arguments. So here's what I want you to take away.\nFor the most part, use positional arguments, but if you're dealing with\nfunctions that take numerical values, see if you can improve the\nreadability of your code by using keyword arguments. You simply \nprefix the arguments that you pass with the name of their parameters and this will \nincrease the readability of your code. Now there is one more thing you need to know about\nkeyword arguments. These keyword arguments should always come after\npositional arguments. Let me show you what I mean. So, \nback to our simple greet user function, let's use a keyword argument \nfor the first thing. So, let's set \nfirst name to jon and see what happens. So we immediately get this error and \npositional argument after keyword argument. \nSo when calling this function we're supplying one keyword argument \nand one positional argument, and python doesn't like this. So, \nif you're mixing positional and keyword arguments, you should always use\nand then the keyword arguments. \nIn other words, lets remove this keyword argument here, \nso jon is now a positional argument, is targeting the first\nparameter. Now after this positional argument we can\nsupply any number of keyword arguments, so if you set last name to smith\nlook, python doesn't have any problem with this because we are adding \na keyword argument after a positional argument.\nSo let's quickly recap, for the most part use positional arguments \nif you're dealing with functions that take multiple numerical values \nand it's not quite clear what those values represent, use keyword arguments \nto improve the readability of your code, and finally if\nyour passing both positional and keyword arguments, use the\nkeyword arguments after the positional arguments. \nSo far you have learned how to create functions and send them information using\ntheir parameters in this tutorial I'm going to show you how to create functions that return \nvalues, this is particularly useful if you're doing some kind of\ncalculation your function and you want to return the result to whoever is using your\nfunction. let me show you. So let's start by defining a \nfunction, called square, this function simply calculates\nthe square of a number. So we need to add one parameter here, \nthat is is our number, now here we want to calculate number \ntimes number, that is the square of a number. \nNow to return this color outside of this function we simply \nuse the return statement. So return. Now, \nour square function is very simple, it only had one line of code. \nBut in a real program, you might have a function that has ten lines of code to calculate\nsomething. So, this return statement is very\nvaluable. So now we can return values to the caller of our function. \nSo, with this, when we call the square function, \nlet's say we give it 3, now this function returns a value, \njust like an input function of python, this input function \nwaits for the user to type something and press enter and then it will\nreturn the user's input as a string so we can get it\nand store it in a variable like this, right? We have the same story with our\nstory, with our square function. So our square function returns the value\nwe can simply get it and store it in a variable. Let's call that\nresult. Now, we can print \nresult on the terminal, there you go, so result is 9, \nwe could also pass this function called\ndirectly inside of the print function without defining a separate variable.\nSometimes this is useful for writing shorter code, so in this case. \nSo, in this case, we don't really need this result variable. We simply want to print \nthe square of 3. So, we could simply pass this function \ncall right here, as an argument for the print \nfunction. So let's delete this variable now our code is\nshorter so with this we're calling the square function, this returns a \nvalue and we'll pass that value as an argument to the print function. \nOkay? When we run this program, we get the exact same \nresult. There you go. Now what happens if we don't \nuse a return statement in our function. So in the last example we simply used\na print statement. Let's temporarily remove \nthis return statement and print the result\non the terminal. Like this. So let's run our program \none more time and see what we get. We see two things, the number\n9, and none. What is happening here? Well\nwhen Python interpreter executes this code, first it will call\nthe square function. So the control moves to the square function \nhere we calculate the square of this given number and then print it\non the terminal. That is the reason we see 9 right here, \nnow, by default, all functions return the value \nnone. So if we don't have a return statement \nhere, by default python returns none. None\nis an object that represents the absence of a value, it's like nothing \nor null i c, c++ java and Javascript. \nSo, in this example, we didn't have a return statement, and \nby default python returned none from this function. \nSo, after this square function is executed, the value none \nis returned and passed as an argument to the print function, that is the reason \nwe see none on the second line. So here are the two things\nyou need to take away from this tutorial. By default all functions in Python \nreturn none. You can change that, so if you have a function that \ncalculates something, you can return the result using the return statement. \nHere's the code for our emoji converter program that we wrote earlier. \nIf you missed that tutorial, make sure to go back and watch it, as \nI told you before, there is a table of content right below this video in the\ndescription. So we can simply click on the emoji converter tutorial to watch it. \nNow, your exercise is to reorganize this code using a function. \nSo I want you to extract a function in this code, because this algorithm\nfor converting these smiley faces into emoji's is something that\nwe probably want to use in a couple different applications. We can use it in a chat\napplication in an email application and so on. We don't want to write all this code every time \nwe want to convert these characters into smiley faces. \nSo, out of all these lines of code that we have from line 1 to \nline 10, the lines 10-2 belong to our\nalgorithm, all these lines together implement this feature. \nSo, you should put these lines in a separate function, \nNow, why don't we have the input in this function? Because\nthe input will can come in different forms, currently we're using the import function \nto receive the input from the terminal, but in other applications \nwe might receive the input from a graphical user interface, so the input can come in\ndifferent forms. We don't want to put that in our function, because this line will not be reuseable. \nYou want to give our function the actual message, \nas a string. We don't care how we got that message. In one \nprogram you might get it from the terminal, in another program you might get it from \na graphical user interface. So that is the reason this line up code should not\nbe in that function. By the same function, you shouldn't include\nthe last line in that function because what we do with the output is different from \none program to another. In this program, we are printing the output \nin another program, you might send an output as an email, or as a response in \na chat application, so as a general rule of thumb you're function should\nnot worry about receiving input and \nprinting it. These lines of code should not belong to your functions. So go \nahead and reorganize this code by extracting a function. \nAlright, on the top, first we need to define our function. So first we type \ndef, give our function a name like emoji_\nconverter, so the name of this function clearly tells me what\nit does. Each function should be responsible for one and only one task, \nand that task should be clearly explained in the name of the function. \nSo, our emoji converter function should take \na parameter, we call that message, that is a string, right? Colon\nnow we need to move the lines \n5 all the way to the end of our for block \ninto the function, so let's select all these lines, you can\ncut them from here, by pressing command and x on Mac, or\ncontrol and x on Windows, then we paste it here, \nas you can see these lines are automatically indented \nso, they are part of the emoji converter function, if this didn't happen on your\ncomputer, make sure to select these lines and use the \ntab to indent them. Alright, so here's our emoji converter function \nbeautiful. Now after that \nin the main flow of our program, first we get the input from the user \nwe store it in this variable message and then we call\nemoji converter and pass this message, \nthis function should return a value, that is what we use to calculate\nthe end of this function, so right after this for block we need to add \na return statement, return output, \nnow that our function returns a value, we can get it and store it\nin a separate variable, let's call that result \nand then we can simply print that here, or\nwe can make this code shorter, we don't really need this code here so we can simply \ncall the emoji converter, and print the result.\nLike this. Now here we have an underline because\nas I told you before we need to blank lines after\nour function definitions. So currently we have only one blank line \nwe need to add another black line, good, let's go ahead, \nand run this program, and make sure everything works as before \nso I'm going to type a message like good morning with a smiley face \ngood, let's run it one more time, times that, \nto add okay beautiful, so, here's the\nfinal result, we defined this function called\nemoji converter, this function takes a parameter called message.\nAnd finally returns the output. \nIn this tutorial I'm going to teach you how to handle errors in your \npython programs, so let's start by writing  a small program \nto get the user age from the terminal. So we call the input variable \ninput, and a label here, \nlike age, this returns a string, so we need to pass it to\nthe end funciton and store the result in\na variable called age, now let's print age to make sure you have\nimplemented everything properly we run our program, we type \n20, 20 is printed here, beautiful, now look at \nthe exit code of this program, exit code 0 means\nour program terminated successfully, there were no errors, but what if\nwe run this program one more time and instead of entering \na numerical value, we enter something like asd. \nWe get a value error with his message invalid literal \nfor int with base 10. Basically what this message is telling \nus is that this string asd does not contain \na valid home number that can be converted to an integer. Now look at the exit\ncode of this program, exit code 1 means our exit code crashed, \nso 0 always means success and anything but 0 means crash \nnow as a good python programmer you should anticipate this situation. \nYou don't want to let your entire program crash just because the user entered \nan invalid value. So instead of letting the program \ncrash you should handle the situation and print a proper error message, and \nthat's what I'm going to show you in this tutorial, now before we get any further \nlook at the type of error we get here, value error, \nso remember this, we're going to get back to this shortly \nnow how can we handle these errors, in python we have a construct called \ntry accept we use that to handle errors. \nLet me show you how it works. So on the top\nwe type try: now as you know we are defining \na code block so, I'm going to move these two lines, \ninside of our try block so press tab here. \nAnd remove this black line, now these two lines are part of our\ntry block, right? So after try we type \naccept, and then we add the type of the error \nthat our program may encounter, that is value error\nokay? Then, we add a colon and in this block we can\ndefine what should happen if our program encounters \nan error of type value error. In this case we want to print \na proper error message, so print, \ninvalid value. So with this try and accept we are telling python\nhey, go ahead and try running one or these two lines of code, \nif you encounter, an error of type. Value error \nthen instead of crashing the program, try this error message on the terminal\nso this is how this works. Now more accurately in programming\nwe reefer to this kind of error as an exception. So an exception \nis a kind of error that crashes our program. So our\nuser enters an invalid value, this line of code \nin line 2 will raise an exception, and on line 4 will catch it\nand print this error message, so our program will no longer \ncrash. Let me show you. So let's go ahead and run this\nage 20, everything \nworks just like before and the exit code is 0, let's \nrerun this program, and enter asd, \nso we get this proper error message invalid error menu and once again \nthe exit code is 0, so that means our program completed successfully.\nDidn't crash, now, we can also handle different kinds of \nerrors or exceptions, for example right when we get the age\nlet's define a variable income and set it to 20,000.\nAnd then define another variable called risk and set it \nto income divided by age. \nLet's run this program and enter 0 as the game to see what happened. \nSo 0 is obviously a numerical value \nso when we enter this value, technically we shouldn't get any exceptions. \nTake a look. Our program crashed, we \ndid a 0 division error, because we cannot divide a number by 0. \nOnce again look at the exit code, so we couldn't catch this kind of error or\nthis kind of exception with this accept block. \nAccept block is only cashing exceptions of type value\nerror. And this happens when we try to convert a nonnumerical value, \nto an integer. So in a situation like this. We should handle \ndifferent kinds of exceptions, we can add another \nexcept statement for an exception of type 0\ndivision error. Now in this block we can print a \ndifferent kind of message, like age cannot be\n0. Let's run our program one more time. Now, \nI'm going to enter 0 as the age so we get this\nerror message age cannot be 0 and look at the exit code.\nIt's 0, so our program didn't crash, so to recap, we \n`used try accept blocks to handle exceptions that are\nraised in our programs, as a good programmer you should always anticipate\nthese kind of exceptions and handle them properly. \nIn this tutorial I'm going to talk to you guys about comments in python. \nWe use comments to add notes or comments to our programs. \nFor example, here I'm going to make a print statement, \nsky is blue. Now, before that, I \ncan add a comment using a hi sign and then whatever we type here \nis going to get ignored it's not going to get executed. Let me show you so\nlet's run this program, look we only see this\nmessage. Sky is blue. So with this comment we can explain \nsomething about our code, we can use it as reminders to fix things or\nclear things up, or we can use it to communicate things with other developers \nreading our code, why we have written this code in a certain way.\nThese are good use cases for using comments, we can also\nhave comments over multiple lines, so we can simply add more\ncomments, each line should start with a new hi sign. Now\none thing you need to avoid when using comments is explaining what the\ncode does. So here's an example of a bad comment. \nLet me just delete these two lines, and with this comment I'm going to\nsay print sky is blue. Why\nis this a bad comment, because it's telling me the obvious, it's telling me \nthis slide is going to print sky is blue. Now the problem with this comment is\nthat apart from being verbose and repetitive, if you come here, \nand change sky to ocean, now this comment gets \noutdated. So overtime we change this code, then we have to come back and \nmodify the corresponding comment. So I've seen some developers \nadd comments in front of their functions, for example, they define \na function let's say a square that takes a number \nand simply returns number times number.\nBut it is obvious that this function calculates and returns the\nsquare of the given number. So there is really no need to add a comment and \nexplain that. Calculates and returns the\nsquare of a number. This is very repetitive and it creates \nnoiser code. Someone else reading your code they get distracted with all\nthese unnecessary comments, so use comments to explain whys and hows.\nNot why's if you have made certain assumptions, we can use\ncomments to explain those assumptions. Or we can use them to add notes to remind yourself \nor other developers to do something in the code. \nSo comments are good, but too much of a good thing is a bad thing. \nIn this tutorial I'm going to talk to you guys about classes in python. \nClasses are extremely important in programming and they're not\nspecific to python, in fact, a lot of other programming languages\ndo support the notion of classes. We use classes to define new types.\nFor example, so far you have learned about the basic types in Python \nlike numbers, strings, and booleans, \nthese are the basic or simple types in python, you also learn \nabout a couple of complex types like lists and \ndictionaries. While these types are extremely useful, they cannot \nalways be used to model complex concepts, for example, think about \nthe concept of a point, or a shopping cart. A shopping cart is not\na boolean, it's not a list, it's not a dictionary, it's a different kind of\nthing. So we can use classes to define new types to \nmodel real concepts. Now in this new model I'm going to show you how to\ndefine a new type called point, and this new type is going to have methods \nfor working with points. For example, back to our main program. Let's \ncreate a list, numbers, 1, 2, 3, \nyou know that here, when we type that dot, \nfunctions or methods available in list objects, now similar to this, \nwe're going to create a new type called point, this point is\ngoing to have metas like move, draw, get, \ndistance from another point, these are the operations that we can\nperform on points. So let me show you how to do this.\nWe start by defining a class by using the class keyword, \nand right after that we give our class a name. Now look at the\nnaming convention I've used here. I've capitalized the first letter here, this is what we call\na pascal naming convention. So the naming convention we \nused for naming our classes is different from the convention we use for naming\nour variables and functions. For variables and functions we always\nuse lower case letters and we separate multiple words using\nan underscore. But when naming classes, we don't use an underscore \nto separate multiple words, instead we capitalize \nthe first letter of every word. So in this case our class has only a single \nword, if you had multiple words, let's say email client \nlook I've capitalized the first letter\nof every word. Once again, this is called pascal naming convention\nand it comes from the old pascal language that you might have heard of.\nSo, back to our point class. Here we add \na colon which means we're going to define a block, now\nin this block we can define all the functions or methods that belong \nto points, for example, we can define a function called \nmove for moving a port, now note that as soon as we\ntype open parenthesis, pycharm automatically adds self here, \nthis is a special keyword and we're going to get back to this shortly. \nSo, for now, in this method, let's print \nmove on the terminal, now let's define another \nmethod like draw, so define draw \nand in this method, let's print draw on the terminal, now\nlet's remove the indentation, we're done \nwith the definition of our point class, so we need to add two line breaks \nokay, so with this class we defined a new \ntype with this new type we can create new objects, so\nan object is an instance of a class, a class simply defines \nthe blueprint or the template for creating objects, and \nobjects are the actual instances based on that blue print. \nSo we can have tens of hundreds of points on the screen, these are the\nobjects or the instances. So to create an object,\nwe type out the name of our class and then call it like a function \nthis creates a new object and then returns it. So then we can store\nthat object in a variable, let's call that point 1, \nthere you go, now when we use the dot operator. \nLook, we have these two methods that we \ndefined, draw and move, we also have a bunch of other methods that we\nstart with two underscores, these are called magic methods \nwe'll look at them later in the course. Now, let's call the draw method \nof our point object, and run our program \nso you can see draw is printed on the terminal. Now\napart from methods these objects can also have attributes and these attributes\nare like variables that belong to a particular object. For example, \nhere, after we've defined .1. \nWe can set .1.x to \n10. And .1.1 to 20. \nNow we can easily print out these attributes, let's print \n.1.x and run our program one more time\ntake a look, so the x coordinate of .1 is 10.\nNow we can create another object, let's call that.2 \nso .2 once again we type out the name \nof our class and then call it like a function. Now this object is completely \ndifferent then the first object. So if you print \n.2.x \nlook we get this attribute error, because this point object doesn't have an\nattribute called, so each object is a different \ninstance of our points class. Now here\nwe can assign a value to .2.x. Let's \nsend that to 1, and then run our program so we can see the \nx coordinates of .2 is 1. So to recap\nwe use classes to define new types, these types can have \nmethods that we define in the body of the class and they can also \nhave attributes that we can set anywhere in our programs.\nYou have learned how to create new types using classes \nnow therein a tiny problem in this implementation. \nWe can create a pooint object without an x or y coordinate\nlet me show you. So point we create this\nobject here, and before we set point.x let's\nprint point .x run our program \nwe get this attribute error which you\nsaw in the last tutorial, so point object has no attribute called x\nThis is the problem we have here, it is possible, \nto have a point object without an x or y coordinates. \nAnd that doesn't really make sense, because whenever we talk about a point, \nwe ned to know where that point is located. To solve this problem, we\nuse a constructor. A constructor is a function that gets called\nat the time of creating an object. So here on line 9, when creating this\npoint object, we want to pass values for x or y \ncoordinates, let's say 10 and 20, and with this, \nthis point object that we get here, will have it's\nx and y coordinates initialized. So how do we do this?\nWe need to add a special method in this class called constructor. \nSo, on the top, I define a new function, \nlook at the name of this function, double underscore init, double under\nscore. So init is short for initialized, and this is the\nfunction or the method that gets called when we create a new point object. \nNow, press enter, so this automatically adds, \nself in parenthesis, we're going to come back to this shortly. \nNow, right after self, we want to add 2 extra parameters, \nx and y, so let's type out x and y, \nand then in the body of this method, we should read the values past\nhere, and use them to initialize our object, so when we pass\n10 and 20, these arguments will be used for\nx and y parameters. Now to initialize \nour object, we type our code like this. Self.x equals \nx. And then self.y equals y. \nWhat is going on here, this self that you see here is a reference to the current \nobject. So, back to line 13, \nwhen we create a new point object, self references that object in\nmemory, the same object, that we're referencing using this cariable.\nSo earlier we typed point.x equals 10, \nwith this code we set the x attribute of this point object. \nNow what we have in the constructor is exactly the same, we use the self \nto reference the current object and then we set the x attribute \nto the x argument passed to this function. So, \nusing this init method, we can initialize our objects and \nwe refer to this method as a constructor, this method is used to construct \nor create an object, okay? so,\nNow, let's remove line 14, so we created\npoint object with these values and then print point.x let's run our program \nthere you go, x is 10, we can also change \nthese values later, so just before printing point.x we can set \npoint.x to 11 and then run our program \nso x is updated, beautiful, alright, here's a \nexercise for you. I want you to define a new type called person\nthese person objects should have a name attribute as well as a talk\nmethod. This is a very easy exercise so, \nyou can tackle it in probably a couple of minutes. \nAlright, so\nfirst we start with a  class keyboard, we define this person class \nonce again look at the naming convention I have used here, the first letter\nof the first word in this case the only word is uppercase. \nNow, in this class we define all the methods we need, currently we only have\nmethod that is the talk method, so define talk, \npycharm automatically adds self, we come back to this shortly, \nfor now let's just print talk. \nSo this is the body of our person class. We remove the indentation \nand add two line breaks after defining our \nclasses. Now we can create the personal object, let's call that jon, \nwe set it to person, we can call jon.\ntalk, let's run the program so we get this\nmessage, beautiful, but our person objects should also have\na name attribute, it doesn't make sense to have a person without the name. \nSo that is when we use the constructor function. So on the top, \nwe add a new method, at the name of this method is double \nunderscore, init double underscore. So we\ncall this method a constructor. Now in this method we need to\nadd another parameter which is name, so we \nsimply set self.name to name. Once\nagain, self references the current object, we're setting the name \nattribute of the current object, to the name argument passed to this method. \nWith this we can go back to line 9, and \nwhen creating a person object we pass the name, let's see jon smith \nnow let's print jon.name and run our program \nthere you go. So jon Smith is printed on the terminal, beautiful, \nso this is all you had to do as part of this exercise. But\nlet's make this program a little more interesting. Instead of printing\nthis boring message here, let's print hi, I am Jon Smith. \nSo, we can use a formatted string with a message \nlike Hi, I am, now we want to dynamically\nadd the name of this person. How do we do this? Well, look at \nthe parameter of this talk method. As I told you before, \nevery method in our class should have this parameter, self.\nAnd they should be the very first parameter of each method, okay? So, \nwith this self we can get reference to the current object, so\nwe can add curly braces and type out self \n.name. Thsi returns the name attribute of the current \nperson object. With this we can remove \nline 10, where we print jon.name and simply call\njon.talk. Lets run our program.\nHi, I am Jon Smith. There we go, beautiful.\nNow we can build another person object, let's say Bob, is a new person \ncalled Bob Smith, when we say \nBob.talk. And run our program \nwe get a different message, hi I'm Bob Smith, so\neach object is a different instance of a person class. \nIn this tutorial Im going to talk to you about inheritance in Python, \ninheritance is a mechanism for using code and once again \nit's no limited to python, most languages that support classes\nalso support inherence. So let ms how you how this works. Let's say\nwe have this dog class with a simple walk method, in this method\nwe're simply printing the walk message on the terminal, now let's say\nin real program, instead of just one line of code here we're going to have 10 lines of\ncode. Now, what if in the future we want to define a \nanother class let's say cat and we want to add \nthis walk method there as well. Sow e'll have to repeat all that code, \nin this new class, walk. \nThis is bad. because you have repeated or duplicated our\ncode. In programming we have a principle called dry\nwhich is short for don't repeat yourself. \nLet's say sometime in the future, we discover a problem with our walk method. If you\nhave repeated or duplicated this method in many other places, then we'll \nhave to come back and fix that problem in every single place we have\nduplicated this code. So that's why in programming we should not define something \ntwice. So how can we solve this problem. \nThere are different approaches, one approach that is easier to understand for beginners is inherence \nNow here's how it works. We define a new class called\nmaml and move the walk method right there. Then we'll have\nthe dog and cat classes inherit that method\nfrom their parent just like how humans inherit certain\nattributes or behaviors form their parents. That' exactly the same, so\non the top, we define a new class, let's call it\nmammal then we need to move the walk method there. So, \nwe select it, cut it, using command and x on Mac, or\ncontrol x on Windows and then paste it here, beautiful, \nnow we want our dog class to inherit this class from the mammal class\nso right after the class name we add parenthesis and \nthen type out the name of the parent class. In this case, mammal.\nThat's all we have to do. So with his the dog class\nwill inherit all he methods defined in the mammal class. \nNow there is a tiny problem here, if you look at line 9, there is a \nred underline here. The reason this is happening is because\npython doesn't like an empty class, so right now our dog\nclass is empty, it doesn't have anything, we either need to add methods\nspecific to dogs or just to make Python happy, \nwe can use the path statement, and that basically means nothing.\nWe're telling python interpreter, hey, pass this line, don't worry about it. But with this, we\ndon't have an empty class, okay? Now as I told you before\nafter each class I should have two line breaks so right now we \nonly have one line break and that is the reason we have this little warning here, so let's add\nanother black line, beautiful, so our dog class is\ninheriting the walk method from the mammal, you need to apply the same change \nto the cat class. So we'll have cat \ninherit from mammal, and then, \nuse the path statement here. With these changes, \nnow we can create either a dog or  cat object, let's say dog, \none, we set it to a dog object, and \nwhen we type dot look we have the walk method that is defined \nin the mamall class. We can easily call it, let's run our program\nthere you go, you see the walk message, \nso both the dog and cat classes are inheriting all the classes\nmethods defined in their parent class. Now here we can add methods\nspecific to dogs, for example, we can define a method called \nbark, and then print bark. \nNow, we don't need the path statement because we already defined \none method in our dog class. So now when we type out \ndog1. look we have two methods\none is the walk method that we inherited and the bark method that we just\ndefined in the dog class. Similarly, we can add a method \nspecific to a cat, for example, we can define a method called\nbe annoying, I hate cats, so let's print\nannoying , now when we create the cat\nobject, let's remove that, cat1\nand type out cat1. you have these two methods \ndog and be annoying. So these are the basics of inheritance in python\nNow there is more to this that really goes beyond the scope of this beginners tutorial. \nIf you're interested to learn more about inheritance and other mechanisms \nfor reusing code, I encourage you to get my complete Python course.\nIn this tutorial, I'm going to talk to you about modules in python. \nA module in python is basically a file with some python code. \nAnd we use modules to organize our code into files. \nJust like sections in a super market. When you go to a super market there are different sections\nfor fruits, vegetables, cleaning products, and so on. We don't have \none section with all the products in the super market. We have the same concept\nin programming. So instead of writing all our code, instead of writing\nall the functions and classes in app.py we want to break up our code\ninto multiple files. We refer to each file as a module. \nWith this, not only is our code better organized and structured, \nbut we'll also have the ability to reuse our code. For example, \nover here in app.py, I've defined two functions for converting\nweight from pounds to kilograms and vice versa. \nNow we can take these two functions and put them in a separate module\ncalled converters, and then we can import that module into any\nprogram that needs these converter functions. Let me show you how to do this.\nSo, let's open up our project panel and right\nclick the project, go to new, and add the new file, \nwe're going to call this file, converters.py. \nThen, we go back to app.py \nselect all this code, cut it and then \npaste it into our new module. converters.py. \nWith this we have cleaned up our app module it's not bloated with different\nfunctions, so as we write more functions with classes, we put them in their \ncorresponding modules, a module should contain all the related\nfunctions and classes, okay? Now you want to\nimport the converters module into our app module, and that is really easy, on the\ntop we write import converters \nwithout extension, so we don't add .py we only type out the name of\nthe file. Let me close that project panel. Now, \nthis converter is an object so we can use the dot operator\nto access it's members. So currently we have defined \nthese two functions inside of our module, kilogram to pound, \nand pounds to kilograms. So we can easily call one of these functions \nlet's pass 70 kilos get the result and print it out. \nRun our program, so, \nthat is under 55 pounds. Now there is also another\nsyntax for importing modules, let me show you, so\ninstead of importing the entire module we can import specific functions from that \nmodule. Here's how it works. We type out from \nthen we add the name of our module, so converters \nimport, now here if you press control and space\nwe can see the list of all the functions defined in this module. \nSo here we can grab one of these functions let's say kilogram to pound, and \nwith this we can directly call this function just like\nthe function defined in this file. App.py. Compare\nwhat we have on line 4 to what we have on line 6. On line 6\nwe'll have to prefix this function with the name of an object \nconverters. So we have to type converters. and then we'll be able to\naccess this function. In contrast. When we import \na specific function from our module, then we can easily call that function\nwithout prefixing it with the module name. So here's what\nyou need to take away.  We use modules to better organize our code. Instead of\nwriting all the code, instead of writing all the functions in one file, you break up\nour code across multiple files. Each file is called \na module and it should contain all the related functions and classes \nthen we can import a module into another module, in this case, we are importing \nthe converters module into our app module. And as you saw, \nthere are two ways to import this module, we can import the entire module, and then\nwe'll get an object with the same name as the module so we can\ntype converters . and then we'll be able to access all the\nfunctions and classes defined in this module. The other appraoch\nis to impot a specific function or class from a module using the\nfrom import statement. Now here\nis your exercise. Earlier in the course you had an exercise for finding the\nlargest number in the list. So here on the top we have\na list of numbers, initially we set max to the first number in this list\nthen, we look through this list, get each number, \nif the current number is grater than max, then we reset max. \nAnd finally when we are done with our loop we print max on the terminal. \nNow here's what I want you to do. This code currently \nhas no organization. We don't have any functions, we don't have any modules, we wrote all \nthe code in app.py, that is okay for small programs, \nbut as your programs grow, you need to properly organize your code into\nclasses and modules. So, as part of this exercise, I want \nyou to write a function, call it find max. \nThis function should take a list, and return the largest number in that list. \nNow after you do this, go ahead and put this function \nin a separate module. So extract it from here, and put it in a module, \ncalled utils. So in this module we're going to have a bunch of \nutility functions, oaky? Then import the utility \nmodule into the current module and call this function. \nFinally, get the result and print it on the terminal, this is a \nfantastic exercise to teach you how to properly organize your code. So, \ngo ahead and spend a couple minutes on this exercise. \nSo the first\nstep is to define a function called find max. So on the\ntop, I'm going to define function, find max\nthis function should take a list of numbers, so we\nadd a parameter called numbers. Now inside of this function you\nwant to have these few lines, this is the algorithm for finding the \nlargest number in a list, we don't want to bring the first line, because this\nis where we create a list. So somewhere in our program we're going to create this list, \nand tehen pass it as an argument to pass max \nfunction. Okay? So, let's go ahead and grab\nthese few lines, cut them, and put them inside\nof find max function. Alright, so we find the\nlargest number in this list, finally we need to return it, so, \nreturn max. So here's our function. Now we\nneed to move this into a separate module. So let's go to the panel \nright click the project and add a new \nfile, we can also add a new python file that's the same, let's call that\nutils so if you add a new python file \npycharm automatically adds .py extension, but if you go to\nnew file we'll have to explicitly type out \n.py. So make sure to get the extension right. \nNow, back to app.py, let's cut this code and \npaste it into this new module, okay beautiful. \nNow I'm going o go back to app.py and import our new module. \nWe can either import the entire module, so import utils \nand then access individual functions so we can call utils \n.find max or we can explicitly \nimport this function from the utils module. It doesn't really make a difference. \nSo, we could type from utils\nimport find max. And then we\ndon't need to prefix this with the name of it's object, so we simply call\nfind max. Now we need to call this after we initialize our list.\nSo first we need to define the list of numbers. \nThen, we pass that list as an argument to find max\nwe get the result which is max and finally we print it\non the terminal. let's go ahead and run our program, so the\nlargest number is 10, beautiful, \nnow one last thing before we finish this tutorial, here we have this little warning \nunder max and the tool tip says shadows built in name \nmax. The reason we see this is because we actually have a function called \nmax. And it does the exact same job \nas our find max function. So this is actually built into python. \nBut I ask you to do it as an exercise because it's a great exercise for beginners. \nNow, back to the warning, this warning is basically telling us that we are\noverwriting the built in max function in python \nso we are changing the meaning of this function, and this is considered a bad practice, \nlet me show you what I mean. So let's comment out what we have on line 4, \nby putting a hash sign here, we can also use, \na short cut command and slash on Mac, or control on slash\non Windows. So now this line is commented out. Look at the\ncolor of max here, it's purple, it's the same color as print. And this is the color\nused to identify the built in functions. So now we can call\nthis function and give it a list of numbers \nrun our program we get the same exact result however, \nif we bring this line back, once again we can use the same \nshortcut that is command and slash on Mac or control slash on Windows. \nNow, we are redefining max, so up to\nthis line, max used to be a function, but after line 4 is executed \nmax is set to an integer, that is the largest number in this list. \nSo, we'll no longer be able to call it on line 5, \nlet's run our program and see what happens. So there you go, \nwe get this type error, int object is not \ncallable, because max is now an integer, it's not a function, \nso we cannot call it. So to solve this problem, we can rename \nthis variable to something else. So right click here. \nGo to refactor and rename, \nand rename this to maximum.\nSo you can see the warning is gone. As you can see we have the same warning \nin our utils module. So here we're redefining max \nand as I told you before this is a bad practice. We're changing the \nmeaning of built in functions in python. So, \nlet's rename these as well, I'm going to use the short cut that is shift and \nf6 there you go and here we can change this to \nmaximum. Enter, done. \nIn this tutorial we're going to talk about packages in python, \npackages are basically another way to organize our code, so currently\nwe have only 3 files for modules in our project but a real project \ncan contain hundreds or even thousands of modules. \nWe don't want to add all those modules here, because over time this directory will get \nbloated with so many files, so a better approach is to organize related \nmodules, inside of a package, so a package is a container \nfor multiple modules In file system terms a package is \na directory or folder. So in our project we can add a new directory \nand in that directory we can add all the directed modules, as a metaphor think\nof a mall. When you go to a  mall or a shopping center there are different \nsections for mens women and kids clothing, so that is\nilke a package, now when you go to the mens section, there are different areas\nfior different kinds of products, we have a section for shoes, t shirts, \njackets, and so on, so each of these is like a module, so, \nin this tutorial, I'm going to show you how to create and use packages in Python, \nhere in our project panel, right click the panel and\nadd a new directory. \nLet's call this directory e commerce. So we're going to create\na package called e-commerce and in this package we're going to have\nall the modules related for an ecommerce application. For example, \nwe can have modules for sales, shipping, customer service \nand so on. So let's go ahead \nNow here we have an empty directory, in order to convert this to a package \nwe need to add a special file in it. So, right\nclick this directory and add a new python file, \ncall that file double underscore in it, double underscore \nthis is a special convention in Python. \nWhen Python interpreter sees a file with this name and \nname in a directory, it treats this directory as a package, we also have a \nshortcut for that in pycharm so let me delete this directory \nand start again. So delete, once again right click \nthe project, and go to new but instead of creating a new directory \nwe can create a new python package, let's call\nour package ecommerce as you can see \npycharm automatically creates this file for us so we don't have to manually create\nit. Okay? Now, in this package, let's add a new module, \nso a new python file, let's call it\nshipping okay? Now in this module we want to have \na function for calculating the shipping costs. So define \ncalculate, underline, shipping. \nNow don't worry about parameters or implementation, we simply print \ncalculate underline shipping. \nNow lets say you want to import this shipping module \ninto our app module, with this new structure this shipping \nmodule is now part of the ecommerce package, so we cannot import a direct \nyou have to start from the ecommerce package. So, \nbak to app,py once again there are two ways to import this module. \nWe can import the entire module or we can \nimport one of it's functions or classes. So let me show you both approaches. \nFirst, we're going to import the entire module. Now what is the name of our \npackage? it is ecommerce, right? So ecommerce.\nshipping. So instead of typing import \nshipping we type import ecommerce \n.shipping. we have to prefix it with the name of it's package. \nNow to access any of the functions or classes in this module \nwe'll have to type out ecommerce.shipping.\nand there you go. Now we can access the calculate shipping \nfunction. So let's go ahead and run our program, \nwe see this message printed on the terminal, beautiful. However \nwith this approach, every time you want to call one of the functions\nto this module, we'll have to prefix it with ecommerce.\nshipping. that is very verbose. So when working with packages \nwe often use the second approach, using the\nfrom statement. So we can type from ecommerce \n.shipping import \ncalculate shipping. Now we don't have to prefix this function\nwith ecommerce.shipping, and we can call it multiple times \nin this module, so our code is a little bit shorter. But what if\nyou want to use multiple functions in this shipping module. We can either import them here,\nso calculate shipping, comma, let's say calculate_\ntax. Or we can import the entire module and then \naccess all he functions or classes in that module. So, \nlet me revert this back. To import the entire module \nwe type from ecommerce so we remove.shipping \nso from this package, import \nthe shipping module. Now the shipping module, \nis an object so we can access \nall the functions and classes defined here, using the dot operator, so\nshipping. there you go, calculate shipping. So to \nrecap, when using the from statement we can either start from \nthe package and import a specific module, or we can\nstart from package.module \nand then import a specific function. Like calculate shipping. \nSo, this was the basics of using packages in \npython. As I told you before, packages are extremely important, especially \nwhen you want to work with a framework like django, we use django for building \nweb applications with python, and I'm going to show you that later in this course. \nSo in Django we have quite a few packages and \neach package contains several modules. So make sure to watch the tutorials, \nabout modules and packages one more time, otherwise you're going to get confused later \nwhen we get to Django. \nIn this tutorial I'm going to talk to you \nguys about the built in modules in python, so python \ncomes with a standard library that contains several modules for common\ntasks such as sending emails, working with date and time, \ngenerating random values and passwords and so on. There are so many modules \nalready built into Python and that means there is already lots of functionality \nthat we can reuse. Let me show you where you can find \nthis standard library. So open up this browser\nand search for python 3, module index, \nmake sure to add the version number, because the modules in python 2 are\ndifferent from modules in python3. So here we search for python 3 \nmodule index, and the first page here, you can see is\npython module index, or python 3, let's go ahead, \nso these are all the modules built into python, \nfor example we have modules for working with date and time, \nwe have modules for sending emails for encoding values, \nthere are so many modules here. Now the explanation of all these is \nbeyond the scope of this course, that really requires it's own course. \nBecause we have so many modules here, but don't let this list intimidate you. \nThis is not something that you need to learn right now, as you learn python \nas you build more applications, gradually you will get familiar with more modules\nhere, in fact nobody knows all the modules in python\nstandard library. Everybody knows some modules based on the applications they have built. \nSo in this tutorial, I'm going to show you how to use one of the built in modules, \nfor generating random values. So on the top,\nwe import the random module, now because\nrandom is a built in module, we don't need to have a file here \ncalled random.py. So python interpreter knows that random is a built \nin module as long as it knows where to find it. \nNow if you're curious where this random module is stored on the disk, let me show you, so\nhere in the project panel, expand external \nlibraries, then expand python 3, \nand then one more time python 3.7 library \nroute. So this is a folder somewhere on your computer, in this folder, we have \nall the built in modules in python. So, \nif you scroll down, you should be able to find. \nThe random module. There you go. It's right here. So random.\npy. You can open this and this shows you the source \ncode of this module. there you go. Now in this tutorial, \nwe don't want to worry about hat, so let's go back to our app.py,\nand use this module to generate random values. So when we import\nthis module, now we have this object, random, so we can use the dot\noperator to acces it's methods. One method that is useful\n here is the random method, and every time we call it it generates\na random value between 0 and 1. So here we can do a for loop, \nlet's say for I in, \nrange 3. So just to refresh your memory we are using the\nrange function to create a range object. We can look through this range object \nand in each iteration this object will spit out a value. \nSo with this for loop, we can execute this code 3 times. Now, let's \nindent this. Okay, and finally, let's print the result, \nThere you go. So we can see\nthat in each iteration we get a new random value between 0 and 1. \nNow what if we want a random value for a particular age?\nLet's say random values between 10 and 20, well, \nthere is another method here, rand int, we use 2 arguments here\nto specify our range, let's say 10 and 20. \nRun our program one more time. Now we have the numbers 20\n13 and 18. If we run our program one more time, \nWe get different values, so 20, 19, 11, one more time. \nLook, you also have another powerful method for \nrandomly picking an item from a list. Let's say we have a list of team members and you want to\nrandomly pick someone as the leader. Let me show you how to do that. \nSo, we define the list of team members, we set it to\njon, mary, bob, \nand mosh. Now we can call random \n.choice and pass our members list \nthis method randomly picks a method from this list and returns it. SO, \nwe can store the result in leader and then \nprint it on the terminal. let's run our program, \nso now the leader is mary, if you run our program one more time\nthis line is mosh now it's mosh again one more time, \nit really likes mosh, you get the point. So\nthe random module is very powerful, and it has a lot of applications. \nNow here's a very cool exercise. I want you to write this program to \nroll a dice. So every time we run this program we get a different value. \nNow we have 3 in 1, next time we get 3 and 6, one more time \n5 and 6, 4 and 3, double one, that's a very cool exercise. \nSo before we get started, I want you to pay attention to a few things. \nI want you to define a class called dice \nin this class we're going to have a method called rope so every time we\ncall this method, we get a tuple, a tuple remember is a list of \nvalues but values cannot be changed, you cannot add a new item to it, we\ncannot remove it. So it's like a read only list. So every time, \nwe call the row method, we should get the tuple of two random values. \nSo go ahead, and do this exercise, You'll see my solution next. \nAlright, we start by importing the random module on the top, \nthen we define a class called dice:\nthis class we want to have a method called row. So define row \nparenthesis, this automatically adds self, now in this method, \nyou want to generate two random values between 1 to 6. \nSo we call random.randint. \nAnd pass 1 and 6. So this generates the first number, \nwe can ut that here, now let's call this one more time, \nso I'm going to copy what we have on line 5, put it here, and \nchange this variable to second. So we have two variables first and second.\nWith two random values, finally we need to return them, \nin a tuple, so return parenthesis instead of square brackets, \nfirst and second, now \nin python when you want to return a python from a  function, you don't have to add\nthis parenthesis, so you can simplify your code and python will automatically \ninterpret this as a tuple. So we are done \nwith a definition of our class, we remove the indentation and add \ntwo line breaks. Now we create an object of this type \nso you set dice to dice\nnext we roll the dice, so dice.roll and \nprint the result on the terminal, that's all you have to do.\nLet's run this program, so now we get 2 and 5, \nlets run it one more time, 3 and 2, 1 and 1, beautiful. \nNow we have this little warning here, that says \nexpected 2 black lines found 1. Once again this is\ncoming from pep 8, pep is short for python and \nproposal. We have so many python enhancement proposals or peps.\nPep 8 is a very famous 1, and in this document we have \nall the best practices for formatting our code. So pep\n8 says, that after we define our classes we should have 2 lines breaks, we've already done that\nso the reason this is complaining is because we had 1 line break before \nthe class, so let's add one more line break, now pycharm \nis happy. So basically pycharm is following all the best \npractices defined in pep8. Now you don't have to memorize \nany of these best practices, as you code in pycharm, pycharm gives you a little more\nwarning, and gradually you will learn how to properly format your code, so it's\nreadable by other people. \nIn this tutorial, I'm going to show you\nhow to work with directories in python. So here in python3, \nmodule index, you can see we have a module called path lib which provides an object \noriented file system pact. That basically means it provides\nclasses that we can use to create objects to work with directories and \nfiles. So, if you click here, you can see how this module\nworks, we can see all kinds of examples. For example, here on there basic \nuseage, you can see this is how we import the path\nclass from the path lib module. Let me zooming so you can see\nclearly. Okay, so look, from path lib, that's\nour module, import path, note the naming convention. \nP is capitalized, that means path is a class, so we need to create \nan instance of this class as you can see, right here, \nnow there's so much documentation here, you can read this on your own, but let me quickly show you\na few examples to help you get started. So after pycharm \non the top, from the path led module, that's\nimport the path class. Now we need to create, \na path object to reference a file or directory \non our computer. So there are basically to ways to do this we can use an absolute\npath, or a relative path which basically \nmeans a path starting from the current directory. For example, \nif you wanna reference this ecommerce directory in our project, we can\nuse the relative path. So we start from the current directory and then\ngo somewhere else. With absolute paths we start from the root \nof our hard disk. For example, if you're on Windows you might have \nan absolute path like this, c drive, backslash, \nprogram, files, backslash microsoft, \nso these are directories in c drive. \nOn Windows we use a backslash to build a path. If you're on\nMac or Linux, your paths will look a little bit different, so\ninstead of backslash we have a forward slash lets say user/local\n/bin. So these are examples of absolute paths. In\nthis tutorial we're going to work with he relative path to work with this ecommerce \ndirectory that we have in our project. Now if you didn't create this directory \nearlier, simply right click on the project and then go to new \ndirectory. oaky? So, let's close this panel, \nwe create a path object, now, \nif you don't pas an argument here, this will reference the current directory\nalternatively, we can pass string, in this string we can\nadd a file or a directory. let's say the ecommerce \ndirectory. Now this runs a path object, so we store it here, \nnow this path object has a few interesting methods \nfor example, we can check to see if a path exists by calling \nthe exist method. This simply returns a boolean so let's print it on the terminal, \nthere you go. So this path exists, \nwhat if it changes to ecommerce 1, and \nrun our program and get false, we can also create a new directory \nfor example, let's change our path to email, now when we\n run this program, obviously we don't have this directory but we can \ncreate it by calling the mk dir method \nso make directory. Let's run our program\nalright, this method returns none which basically means \nit doesn't return any values. Now if you look at the project panel you can see\nhere we have a new directory called emails, we can also delete this directory \nso, instead of mk dir we call \nrmdir which is short for remove directory, but \nlet's go ahead, now we can see that directory is gone. We can also see\nall the files and directories in a given path, that is, very useful if you want to\nwrite a little program to automate something. For example, \nyou can iterate over all the spreadsheets in a directory one them and \nprocess them. Let me show you. First we change the path\nto the current directory and then we call the glob \nmethod. With his method we cans each for files and \ndirectories in the current path. So as the first argument we need to pass a string \nthat defines a search pattern. We can type an asterisk \nand that means everything, all files and all directories. \nWe can optionally add an extension, so to get all the files, you\nneed the files you use star.star. With this \npattern, we'll only get the files in the current directory. But not the directories. \nWe can also search for all the py files, or all the excel \nspreadsheets. Anything. So let's search for all the py files \nin the current directory, now when we run our program \nwe get this generator object. Generator object \nare kind of an advanced topic, and they are beyond the scope of this beginners \npython course. But for now all you need to know is we can iterate \nor loop through these generator objects. So instead of \nprinting this generator object, let's just iterate over it using \na for loop, so, for, file in, \nthe generator object that is returned from the glob method. q\nLet's print file. \nWe run our program, there you go. So these are all the\npy files in my current directory, this could be different on your machine\nif you didn't follow the exercises I gave you earlier. For example, this\nutils.py, we created this as part of one of the exercises earlier in this course. \nSo don't worry if the files you see here are different on your machine. \nSo, you can use the glob method to search for files using \na pattern, we can also get all the files and directories in the current \npath, so, we just use one asterisk, then\nrun our program, take a look,  so we have this\necommerce directory, we have notes.txt, this is a file I \nadded earlier just to write notes as part of my presentation so you're not going to have\nthis file. We also have a bunch of directories and files. \nEven though python's standard library is comprehensive and has \nso many modules for common tasks, it's not complete by any means. \nThat's why we have this directory called python package \nindex. Or pypi. And in this directory you can find hundreds \nof packages for doing awesome things. These are packages that people like you\nand I have built as part of our projects, and then they have published it as part of this directory. \nFor other people to use. So that's why we have a fantastic community in python, \nthere are so many python developers out there and there are so many packages \nright in front of us to reuse in our programs, let's say\nyou want to send text messages in your programs, you don't have to build this functionality from scratch, \nwe can simply come to pypi.org and \nsearch for sms aas you can see there are so many \nprojects or apckages that give you this functionality. Of course not every\npackage, not every project is complete or bug free, some of them are still \nin development or they have bugs, but if you look around I'm pretty sure \nfor any kind of function you can imagine there is a good \nreliable and well documented package for you. In my complete python course, \nI will show you some of those most useful packages on pypi. For example\nyou will learn how to access the information on yelp.com in your\nprograms. So you can write a program and search for businesses \nregistered on Yelp. Let's say you want to search for the best barber \nin New York City. I will show you how to do that. You will also learn how to use a technique called \nweb scraping, which means you can build an engine and have that engine \nbrowse a website, and extract information from HDML files.\nThis is the same technique that Google does to index various\nwebsites. So they have several engines, or web crawlers, these web crawlers \nare continuously looking at various websites and extracting information \nfrom their pages. When you publish a blog post Google's web crawler \nfinds the title of your post, its keywords and so on. So, \nI'm going to show you how to do that with Python, we'll also look at browser automation, and this is extremely \npowerful, because you can automate testing of your web\napplications. So you might get a job as a test engineer, and \nyour daily job is to browse a website, click here and there, fill out this form, that form, and \nensure that this website is functioning properly. You can automate all that \nwith a powerful python package called selenium, as I have shown in my complete, as I show in my complete\npython course. Now in this tutorial, I'm going to show you how to install\npackages, from pypi.org. So, \nhere on pypi.org let's search for open py\nxl. This is a package that we use for working with excel \nspreadsheets. So let's search for this package, there you go, so currently \nit's at version 2.5. On the top you can see, \nthis instruction pip install open pyexcel. \nthis is the command that we need to type in the terminal window to\ninstall this package into our program, so back to pycharm, \nhere on the status bar. You can open up a terminal window for executing \nvarious commands. So let's open it, now if you're on Windows \nyou're probably going to see something different instead of this dollar sign, don't worry about that\njust execute this command I'm going to show you. So pip\ninstall open py xl\nMake sure to spell everything properly. So pip is the tool, \nthat comes with a python installation, and we use it to install or uninstall\npackages registered on pypi.org. So here, \nwe're using pip to install this package. open py \nxl. Enter, let's go ahead with that, it's going to take a few \nseconds, oaky done, now we can import this package and it's\nmodules just like the built in modules in python, or the modules that we have\nin our project. Now if you're curious where this package\nis stored on disc let me show you. So open up the project panel, \nand then expand external libraries, next\nexpand python 3, and then expand sight packages. \nThis is where all these packages that we installed with pip are stored. \nSo here we have open py xl, you can open this, \nin this folder we have another folder called cell, now\nNow, look what we have here you have this init\ntype, earlier I told you that whenever we add this file to a folder, python treats\nthat folder as a package, so sell is a package, and this\npackage we have is modules. Sell, interface, read only and text. \nSo as you can see, this package openpyxl has several\nsubpackages like cell, start, chart sheet and so on. \nAnd in each package we have several modules, in the next tutorial\nI will show you how to work with excel files. \nSo we have covered all the core concepts in Python, I hope you have learned a lot. \nplease support my hard work by liking this video and sharing it with others. \nAnd be sure to subscribe to my channel for more tutorials like this. Next we're\ngoing to work on our first python project that involves automation. \nYou're going to write a python program that can process thousands of spreadsheets\nin under a second. Are you excited? Let's get started.\nIn this tutorial I'm going to show you something really awesome you can do with python. You're going to \nlearn how to process spreadsheets, and this is extremely valuable\nin situation where you have hundreds or thousands of spreadsheets that need to\nbe updated. If you want to do this by hand it may take hours or days \nweeks, or even months, you can simply build a python program in less then \nhalf an hour. And have that python program, automatically process thousands of spreadsheets\nin under one second. So, here we're going to work on this\nexcel spreadsheet. You can download this below this video.\nIn this spreadsheet we have three columns, transaction ID,\nproduct ID, and press. Now don't worry about the fourth column yet. \nSo in this spreadsheet we're going to record all kinds of transactions, but let's say\ndue to an error, it could be a human error or a system error. The price that we have\nhere is wrong. Let's say we need to decrease this by 10 percent. \nIf you want to do this manually, we'll have to come back here and \nadd a formula, so we typed out equal sign, let's say you want to recalculate\nsay you want to recalculate the value of this cell.\nhave to get that and then multiply it by 0.9\nand that is like 90% of the original price, we are reducing the original\nreducing the price by 10%. Now when you hit enter you can see the updated price. \nNext we'll have to come back here, select this cell and\napply the same formula to all the other rows. Now what if you have thousands of rows\nhere? You'll have to scroll up and down, this is going to be very tedious. \nSo we're going to write a python program that will do this for us. It's going to\nauotmate this process and not only that it will also\nadd this beautiful chart right here, \nonce again if you want to open up hundreds or thousands of spreadsheets \nand add a chart to each one, this is going to take at least a week or two\nOur python program is going to do all of this in a matter of seconds.\nSo, let's get started. Alright the first thing I want you to do is\nto download this transactions file and add it to your project. \nI put the link below this video for you to download. So if you're wondering \nhow to put this in this project, you can simply right click the project, \nand if you're on Mac you have this item where\nreveal in finder, if you're on Windows you should see something like reveal\nin explorer, or file explorer, or whatever it's called\nwhen you click this, this opens up the direct \non your machine where this is stored. So simply copy paste\nthe transactions file right here. Now, \nhere on the top, first we need to import the open py excel package. \nSo import open py excel, we can give it a \nan alias to make our code shorter. So asxl. \nThis is not required but it just makes our code a little bit cleaner. \nLet me show you. So now instead of typing open pyxl.\nwe type xl. okay so that's an alias for\nthis package. Now in this package we have a function for loading an xl \nworkbook. So let's call load workbook, \nand as the argument we pass transactions. \n.xlsx. So this we load\nour excel workbook and return a workbook object. \nOkay? Now if you open this workbook, you can see you add only 1\nsheet, and that is called sheet 1, so to access that you use \nsquare brackets, and specify the name of the sheet, \nthat is sheet one, make sure to spell this with a capital \nS. Because this is case sensitive, if you don't spell it properly \nyou're going to get an error, so this returns a sheet, \nnow in this sheet, we have various cells. So\nnext you need to learn how to access a particular cell, and that is very easy.\nback to py charm, with this sheet object, you can use \nsquare brackets and give the coordinate of a cell. \nCoordinate is the combination of the column and the row. \nFor example, this cell it's coordinate is a1. \nSo back to pycharm, we can type a1, and this returns \nour first cell. Also, there is another approach to getting\na cell, instead of using square brackets with a string, we can\nuse the cell method of the sheet object, so, \nsheet.cell, you pass the row and the column, so row \nand column 1 these return the exact same \ncell. Now let's print the value of this cell, cell.value\nand run our program so \nthe value is transaction id, beautiful, \nso now we need to iterate over all these rows and for each row we need to get the value \nin the third column. That is the price. We'll get that and then multiply \nby 0.9. So first we need to know how many rows \nwe have in this spreadsheet. We can get that from the sheet object so sheet\nhas an attribute called mx_\nrow. Let's print this, so in this sheet, \nwe have 4 row, and you can verify that here. So we have\na total of 4 rows. So we need to add a for loop.\nthat would generate the numbers 1-4. So, \nlet's delete this print statement, nd add a for loop \nfor row in were going to use the range function unction to generate a range of numbers, \nstarting from 1, all the way to sheet \n.max_grow. Plus 1. The reason we're \nadding 1 to this, is because as I told you before this range function \nwill generate numbers, starting from this value all the way to this\nvalue, but it will not include the second value. So currently \nmax row returns 4, if you use range of 1-4 this will generate \nthe numbers 1, 2, and 3, but not 4. \nSo to include 4, we need to add 1 to it. Let's go over here, \nso we tied sheet.max underline row plus 1. \nNow before going any further let's just print row and make\nsure our program is working up to this point. So let's run \nthis, we get the numbers 1-4 beautiful. \nSo now we can easily get the cells in the third column. However\nwe don't really want this first cell, that's the heading. \nso technically you want to ignore the first row. Back here, you want to change \nour range function, and start from 2. Now, \nwe're going to use sheet.cell to get access to the cell\nat this row. And the column should be 3. \nWe get a cell object, let's print it's value\nand make sure you're on the right track, so run the program\nthese are the values we get. 5.95\n6.95 and 7.95 these are the\nvalues of the third column. Next we need to multiply each\nvalue by 0.9 so instead of printing \ncell.value we multiplied by 0.9 and this is\nthe corrected underline price, \nso this is the mistake we're going to make with our program, now\nwe need to add a new cell to our worksheet, so we want to add all the corrected\nprices, ia  new column, it could also overwrite the values in this column, \nbut in this tutorial I'm going to show you how to add a new column.\nSo using the same method, now we need to get a reference to the cell, to the given \nrow, but in the fourth column. So, we call sheet\n.cell, and pass row and four as the arguments. \nOnce again, this returns a cell object, let's store that in a \nseparate variable and call it\nprice_cell. So note that my variable names are \nvery descriptive. There is no guess work. You have corrected price which holds\nactual value and we have corrected price, which is a cell\nobject in this spreadsheet. Next we have to set the value in this\ncell. So we set corrected price cell.\nvalue to this corrected price. With these few lines \nwe can easily update our spreadsheet, but first we need to save it. So, \nafter our for loop, we call workbook.\nsave. Now let's save this in a new file because we don't want to\naccidentally overwrite the original file in case our program has a bug\nso, I'm going to call that transactions 2.sms \nex. And finally let's run our program, \nso, you can see that happened in a split of a second, now here we have a new file\ntranactions 2. When we open this we get something like this. \nSo you can see we have this 4th column with the updated prices. Beautiful.\nSo half of the problem is solved, now we need to add a chart here.\nTo add a chart, we need to add a couple classes on the top, so, \nafter this import statement let's type out from \nopen py excel.chart, import, bar chart, \ncomma, reference. \nSo lets see what's going on here. In this package you have a module \nchart, and from this module we're importing two classes, bar chart, \nand reference. Again, look at the naming convention used \nhere. The first letter of e very word is capitalized. Also it's better\nto add a line break after our import statements to make our\ncode cleaner. So, before we save our workbook, we need to\nadd achart to the current sheet. First we need to select a range \nof values. For this exercise, I'm going to select the values in the fourth column/.\nSo all the values in rows 2-4 these are\nthe values I'm going to use in our chart. Now in this part 2 example it doesn't really\nmake sense to add a chart per transaction, but that doesn't really matter\nwe just want a bunch of numbers to create a chart, so after our\nfor loop, we're going to use the reference class to select a range of\nvalues. Now the first argument in the constructor is the\nsheet. So we pass our sheet here, then we add\n4 keyword arguments, the first one is min_row, we set this to\n2. The second one is max_row we set\nthis to the maximum row in this sheet. That is sheet, \n.max_row, so we want to select the cells in row\n2-4. kay? Now to make this code a little bit cleaner \nI'm going to put this on a new line, so we\ncan see clearly, now this is going to select all the cells \nin all the columns in these rows. That's not what we want. \nwe only want the values in the fourth column, so back here\nwe need to set a couple more key word arguments men_call\nor column, we set that to for, and also \nmax underline call, we set that to 4 as well. So we are limiting the range\nof cells we're selecting to the fourth column. \nNow, we're creating an instance of the reference class, let's store the\nresult in a variable called values, so this values object \nwill have all these values in the fourth column, now we are ready to create \na chart, so we create an instance of the bar chart class\nand store it in this object. \nNext, we call chart.add_date and \npass our values. That is pretty straight forward finally we need to add this chart \nto our sheet. So, we call sheet, \n.add_chart and pass this chart object \nWe should also specify where we want to add this chart.\nlet's say we want to add it here, on row 2, after the fourth column. \nSo the coordinate of this cell is e2, and this is going to be, \nthe top left corner of our chart. So as the coordinate I'm going to\npass e2 that's all we had to do, done. Let's run our\nprogram one more time, beautiful, let's open up the update\nworkbook. And here's the end result, so\nright after the fourth column, we have this beautiful chart. Now we could take this to the next level, \nwe could add a legend here, we could change the color of these bars, we could even use a different \nkind of chart, it doesn't have to be a bar chart. So to learn more about this we can\nread the documentation for openpyxl. So\nour program is complete, for our code is dirty, it's not clean, it's not \norganized. We don't have any functions here. We have written all the code in app.py. \nSo let's goo ahead and organize this code like a professional software developer. \nSo, on line 4, we are loading our workbook \nthen we're getting a reference to the first sheet, but we don't really need these two lines here \nthis is purely for demonstration to show you how to access a cell. So, \nlet's delete these unnecessary lines, this is a very important practice\nas you're coding always look at your code, always review it, see if you have some code that is\nnot used. Always delete those. Okay, next we are iterating over \nall the rows, fixing the prices, and then \nwe select the values to add a chart, and finally we save the workbook. \nNow, if you were going to use this to automate the process of updating\nthousands of spreadsheets, this program wouldn't work, because it's only \nrelying on this file. So we want o reorganize this code, and \nmove it inside of a function. This function should take the name of a function\nSo let's define a function. Let's\ncall it process_workbook. \nIt gets a file name. Now, we move all the code inside \nof this function, so let's select everything, and press\ntab, beautiful, now back\nto our function, instead of loading this transactions file we're going to load\nthis file name, that's better, \nAlso, now that our program is working properly, there is really no need to store the\nresult in a separate file. So here we can\nsimply overwrite the same file. So let's pass\nfile name, that is the end of our function, so, \nnow, we have this reusable function, we can simply reuse this\nto process thousands of spreadsheets. Earlier in this python course you learned \nhow to find all the files in a  directory, so we can get each file in a directory \nand pass the name of the file to this function, this function will go\nahead and update this spreadsheet in just a second or less. \nSo, that was just one example of using python to automate \nrepetitive boring task that waste your time. But automation is not\njust about processing excel spreadsheets, there are so many things we can automate. \nHere's a question for you, what do you want to automate, how do you want to use python to make your\nlife easier? Use the comment box below and let me know. I love to\nhear about your ideas. Next we're going to work on  project which involves machine learning, which is a \nsubset of artificial intelligence. Are you excited? \nLet's get started. \nIn this section, you're going to learn about machine learning, which is a subset of\nAI or artificial intelligence. It's one of the trending topics in the world, \nthese days, and it's going to have a lot of applications in the future. Here's an example.\nImagine I ask you to write a program to scan an image, and\ntell if it's a cat or a dog. If you want to build this program using\ntraditional programming techniques, your program is going to get overly complex \nYou will have to come up with lots of rules to come up with specific curves\nedges and colors in an image to tell if it's a cat or a dog. \nBut if I give you a black and white photo, your rules may not work, they may break.\nThen you would have to rewrite them. Or I may give you a picture of a cat or a dog from a different\nangle that we did not predict before. So solving this problem \nusing traditional programming techniques is going to get overly complex or\nsometimes impossible. Now to make the matter worse. What if I ask you to extend\nthis program such that it supports 3 kinds of animals. \nCats, dogs, and horses, once again you will have to rewrite \nall those rules. That's not going to work. So machine learning is a technique \nto solve these kinds of problems, and this is how it works. We build\na model or an engine and give it lots and lots of data. \nFor example, we give it thousands or tens of thousands of pictures of \ncats and dogs. Our model will then find and learn patterns and the input \ndata, so we can give it a new picture of a cat that we haven't seen before. \nAnd ask it, is it a cat or a dog or a horse \nand it will tell us with a certain level of accuracy, the more input data we give it, the more accurate\nour model is going to be. So that was a very basic example,\nbut machine learning has other applications in self driving cars, \nrobotics, language processing, vision processing, \nforecasting things like stock market trends and the weather, games and so on.\nSo that's the basic idea about machine learning. Next we'll look at machine \nlearning in action. \nA machine learning project involves \na number of steps, the first step is to import our data which\noften comes in the form of a csv file. You might have a database with lots of data, \nwe can simply export that data and store it in a csv file for the\npurpose of our machine learning project. So we import our data, next, \nwe need to clean it. And this involves tasks such as duplicated data.\nIf you have duplicates in the data, we don't want to feed this to the model, because\notherwise our model will learn bad patterns in our data and will produce the wrong result, \nso we should make sure that our input data is in a good, and clean shape.\nIf there is data that is irrelevant we should remove them, if there are duplicates\nor incomplete we can remove or modify them, if our data is \ntext based, like the name of countries, or genres of music, \nor cats and dogs, we need to convert them to numerical values. \nSo this step really depends on the kinds of data we're working with, every project \nis different. Now that we have a clean data set, we need to split it\ninto two segments. One for training our model, and the other for\ntesting it, to make sure our model produces the right result.\nFor example, if you have 1,000 pictures of cats and dogs, we can reserve\n80% for training, and another 20% for testing. \nThe next step is to create a model, and this involves selecting \nan algorithm to analyze the data. There are so many machine learning algorithms \nout there, such as decision trees, neural networks and so on.\nEach algorithm have pros and cons in terms of accuracy and performance \nso the algorithm you use, depends on the kind of problem\nyou're trying to solve and your input data. Now the good news isnthat we don't have to\nexplicitly program an algorithm, there are libraries out there that provide these\nalgorithms, one of the most popular ones, which we are going to look at \nin this tutorial, is side kick learn. So we build a model using an algorithm , \nnext we need to train our model. So we feed it our training data. \nOur model will then look for the patterns in the data, so enxt\nwe can ask it to make predictions. Back to our examples of cats and dogs, \nwe can ask our model is this a cat or is this a dog and our model \nwill make a prediction, now the prediction is not always accurate\nin fact when you start out, it's very likely your predictions are inaccurate. \nSo we need to envalue the predictions and measure their accuracy. \nThen we need to get back to our model and either select a different algorithm \nthat is going to produce a more accurate result for the kind of problem \nwe're trying to solve. Or fine tune the parameters of our model.\nSo each algorithm has parameters that we can modify to optimize the\naccuracy. So these are the high level steps that you follow in a machine learning \nproject. Next we'll look at the libraries and tools for machine learning. \nIn this lecture we're going too look at the popular python library\nthat we use in machine learning projects. The first one is numpy which\nprovides a multidimensional array. A very, very, popular library. \nThe seconnd one is pandas, which is a data analysis library that\nprovides a concept called data frame. Data frame is a two dimensional \ndata structure similar to an excel spreadsheet. So we have rows and columns \nwe can select columns in a row or a column or a range of rows and\ncolumns, again, very very popular in machine learning \nand data science projects. The third library is mad plot lib which\nis a two dimensional plotting library for creating graphs on plots. \nThe next library is sidekick learn, which is one of the most popular machine learning \nlibraries that provides all these common algorithms like decision trees, \nneural networks and so on. Now, when working with machine learning \nprojects, we use an environment called jupiter for writing our code, technically we can still\nuse vs code or any other code editor, but these editors \nare not ideal for machine learning projects, because we need to frequently \ninspect the data, and that is really hard in environments like vs code and \nterminal. If you're working with a table of 10 or 20 columns \nvisualizing this data in a terminal window is really, really difficult and messy, so thats why we use jupiter.\nSo that's why we use jupiter, it makes it really easy to inspect our data. \nNow to install jupiter, we are going to use  platform called anaconda. \nSo, head over to Anaconda.com/download.\nOn this page you can download Anaconda distribution for your operating system, \nso, we have distributions for Windows Mac and\nLinux. So let's go ahead and install \nAnaconda for python 3.7. Download, \nAlright, so\nhere's Anaconda, download it on my machine, let's double click this. \nAlright, first it's going to run a program to determine if the software can be installed. \nSo, let's continue and once again continue, \npretty easy, continue one more time, \nI agree with the license agreement, we can use the default \nyou ca use the default installation location so don't worry about that, just click install,\ngive it a few second, now the beautiful thing about Anaconda is it will install\njupiter, as well as all those data popular science libraries \nlike numpy, Pandas and so on. So we don't have to manually install this\nusing pip. Alright now as part of\nthe next step Anaconda is suggesting to install Microsoft vs code. We \nalready have this on our machine so we don't have to install it we can go with continue \nand close the installation, now finally we can move the\nthis to trash because we don't need this installer in the future.\nAlright, now open upa  terminal window and type \njupiter, with a y, space, notebook. \nThis will start the notebook server on your machine. So enter\nthere you go. This will start the notebook server \non your machine, we can see these default messages here, don't worry about them, now \nit automatically opens a browser window, pointing to local host \nport 888. This is what we call\njupiter dashboard. On this dashboard we have a few tabs, the first tab\nis the files tab, and by default, this points to your home directory.\nSo every user on your machine has a home directory, this its my home directory \non Mac, you can see here we have a desktop folder as well as documents, \ndownloads and so on. On your machine you're going to see different folders, so somewhere\nso somewhere on your machine you need to create a jupiter notebook. I'm going to go to desktop\nhere's my desktop I don't have anything here, and then\nclick new, I want to create a notebook for python \n3. In this notebook we can write python code, and execute it line by line.\nWe can easily visualize our data as you can see over the next few videos. So, \nlet's go ahead with this, \nalright, here's our first notebook, you can see by default it's called\nuntitled, let's change that to Hello World so\nthis is going to be the hello world of our machine learning project. Let's\nrename this now if you look at your desktop you can see this file \nhello world.ipynb. This is a jupiter \nnotebook. It's kind of similar to our py files where we write our\npython code, but it includes additional data that jupiter uses to execute our\ncode. So back to our notebook, let's\ndo a print hello world. \nAnd then, click this run button here\nand here's the result printed in jupiter, so we don't have to\nnavigate back and forth between the terminal window we can see all the result\nright here. Next I'm going to show you how to load a data set from a \ncsv file in jupiter. \nAlright, in this lecture we're going to download a data set from a very popular website called\ncaggle.com. Caggle is basically a place to do data science projects. \nSo the first thing you need to do is to create an account, you can sign up with Facebook, \nGoogle, or using a custom email and password, once you sign up then come back \nhere, on caggle.com, Here one the search bar \nsearch for video game sales. \nThis is the name of a very popular data set that we're going to use in this lecture. So, \nhere in this list you can see the first item with this kind of reddish \nicon, so, let's go with that, as you can see this data\nset includes the sales data for more then 16,000 videos \ngames. On this page you can see the description of various \ncolumns in this data set, we have rank, name, platform, \nyear, and so on, so here's our data source, it's a csv file\ncalled vg sales.csv, as you can see there are over 16,000\nrows, and 11 columns in this data set. \nRight below that you can see the first few records of this data set. \nSo, here's our first record, the ranking for this game is 1, it's the wi sport \ngame for wii as the platform and it was released in the year 2006,\nnow, what I want you to do is go ahead and \ndownload the data set, and as I told you before you need to sign in\nbefore you can download this. So this will give you a zip file as you can see here, \nhere's our csv file, now I want you to \nput this right next to your jupiter notebook, on my machine that is on my desktop\nso I'm going to drag and drop this onto the desktop folder. \nNow, if you look at the desktop you can see here's my \njupiter, hello world notebook, and right next to that we have \nvgsales.csv. With that, we go back \nto our jupiter notebook, let's remove the first line and instead \nimport pandas \nas pd. With his we're importing pandas module \nand renaming it to pd, so we don't have to type pandas. several times in\nthis code. Now let's type pd.\nread_csv. And pass the \nname of our csv file. That is vgsales.\ncsv. Now because this csv file, is in the current folder right next to our jupiter notebook, \nwe can easily load it, otherwise we have to supply the full path \nto this file. So, this returns a \ndata frame object which is like an excel spreadsheet. Let me show you.\nSo we store it here, and then we can\nsimply type df to inspect it. So one more time let's run this program \nhere's our data frame with these rows and these columns so we have\nfrank name platform and so on. Now this data frame object \nhas lots of attributes and methods that we're not going to cover in this tutorial,\nthat's really beyond the scope of what we're going to do, so I'm going to leave it up to you to\nread pandas documentation or follow other tutorials to find out about pandas data frames. \nBut in this lecture, I'm going to show you some of the most useful methods and attributes. \nThe first one is shape, so shape \nlet's run this one more time, so here's the shape of this data set, we have over \n16,000 records and 11 columns. \nTechnically this is a 2 dimensional array of 16,000 \nand 11, okay? Now, we can see here we have another \nsegment for writing code. SO we don't have to write all the code in the first segment \nso here in the second segment we can call one of the methods of the dataframe,\nthat is df.describe. \nNow when we run this program, we can see the\noutput for each segment right next to it. So here's our first\nsegment, here we have these three lines, and this is the output of\nthe last line. Below that we have our second segment, here we're calling\nthe describe method, and right below that we have the output of\nthis segment So this is the beauty of jupiter, you can easily visualize \nour datsa, doing this with vscode in windows is really tedious and\nclunky. So what is the describe method returning? Basically it's\nreturning some basic information about each column in this data set, So, \nas you saw earlier we have columns like rank, year and so \non. These are the columns with numerical values. Now for each column we have \nthe count which is the number of records in that column, you can se \nour rank column has 16,5\n-98 records whereas the year column has 16,3-\n-27 records.. So this shows that some of our records don't \nhave the value for the year column. We have null values.\nSo in a real data science or machine learning project we'll have to use some \ntechniques to clean up our data set. One option is to remove the records \nthat don't have a value for the year column. Or we can assign them a default value. \nThat really depends on the project. Now another attribute for each column \nis mean so this is the average of all the values, now\nin the case of the rank column, this rank doesn't really matter, but look at the year. \nSo the average year year for all these video games in our dataset is\n2006. And this might be  important in the problem we're trying to solve. \nWe also have standard deviation, which is a \nmeasure to quanitfy the amount of variation in our set of values, below that we have\nmin, as an example the minimum value for the year column \nis 1980. So quite often when we work with a  new data set, \nwe call the describe method to get some basic statistics about \nour data. Let me show you another useful attribute. \nSo, in the next segment, let's type df.values. \nLet's run this, as you can see this returns \na two dimensional array, this square bracket indicates the outer array\nand a second one represents an inner array. \nSo the first element inn our outer array, is an \narray itself, these are the values in this array, which basically \nrepresent the first row in our data set. So the video game we ranking \n1, which is called wii sports. So this was a basic \noverview of pandas data frames, in the next lecture I'm going to show you\nsome of the useful shortcuts of jupiter. \nIn this lecture I'm going to show to you some of the most useful shortcuts in Jupiter, \nNow the first thing I want you to pay attention to is this green bar on the left. \nThis indicates that this cell is currently in the edit mode, so we can \nwrite code here. Now, if we press the \nescape key, green turns to blue, and that means this cell is\ncurrently in the command mode. So basically the activated cell can either \nbe in the edit mode or command mode. Depending \non the mode, we have different shortcuts, so here we're in the command mode. \nIf we press h, we can see the list of all the \nkeybord shortcuts, right above this list we can \nsee, Mac OS modifier keys, these are the\n extra keys on a Mac keyboard. If you're a Windows \nuser you're not gong to see these. So as an example, here is the shape of the \ncommand key, this is control, this is option, \nand so on. With this guideline you can easily understand the shortcut associated with \neach command. Let  me show you. So here we have all \nthe commmands when a cell is in the command mode. For example, we have\nthis command, open the command palette. This is exactly like the\ncommand palette that we have in vs code. Here is a short cut\nto execute this command. That is command shift and F. \nOkay, so here we have lots of shortcuts, \nof course you're not going to use all of them all the time, but it's good to have a quick look here to see \nwhat is available for you. Tis these shortcuts you can write code much faster. \nSo let me show you somme of the most useful ones. I'm going to close this,\nnow with our first cell in the command mode \nI'm going to press b, and this inserts, a new \ncell below this cell. We can also go \nback to our first cell, press escape, now the cell is in the command \nmode. We can insert an empty cell above this cell by pressing a. \nSo either a or b. A for above or \nb for below. Now if you don't want this cell, you can press d \ntwice to delete  it. Like this. \nNow in the cell I'm going to print a hello world message. So print \nhello world. Now, to\nrun the code in this cell, we can click on the run button here, \nso, here's our print function, and \nright below that you can see the output of this function. But note that when you run \na cell, this will only execute the code in that cell. \nIn other words, the code in other cells will not be executed. \nLet me show you want I mean, so in the cell below the cell, I'm going to delete the call \nto a describe method. Instead I'm going to print \nocean. Now, I'm going \nto put the cursor back in this cell where we print this hello world message\nand run this cell. So we can see hello world \nis displayed here, but the cell below is still displaying \nthe describe table, so we don't see the changes here. Now, \nto solve this problem, we can go to the cell menu on the top, \nand run all cells together. This can work for a \nsmall project, but sometimes you're working with a large data \nset, so if you want to run all these cells together it's going to take a lot of time. That is\nthe reason jupiter saves the output of each cell, so we don't have to rerun that\ncode if it hasn't changed. So this notebook file that we have here, \nincludes our source code organized in cells as \nwell as the output for each cell. That is why it's different \nfrom a regular py file where we only have the source code.\nHere we also have autocompletion and intellisence, so in this cell, \nlet's call df data frame \n. now if you press tab you can see all the attributes\nand methods in this object. So let's call \ndescribe, now with the cursor on the name of the method we can\npress shift and tab, to see this tool tip that describes\nwhat this method does and what parameter it takes. So here in front of \nso here in front of signature you can see the describe method, these are the paramter\nand their default value, and right below that you can see\nthe description of what that method does. In this case, it describes\ngenerates descriptive statistics, that summarize the central tendency and so on. \nSimilar to vs code, we can also convert a line to comment \nby pressing command and slash on mac, or\ncontrol slash on windows. Like this. Now that line is a comment, we can \npress the same shortcut one more time to remove the comment, \nso these are some of the most useful shortcuts in jupiter. \nNow over the next few lectures we're going to work on a real machine learning project, but before we get there, \nlet's delete all the cells here, so we start with only a single \nempty cell, so here, in this cell, first I'm going to press the\nescape button, now the cell is blue, so we're in the command mode, and \nwe can delete the cell by pressing d twice. There you go. \nNow, the next cell is activated and is in the command mode. \nSo, let's delete this as well, so we have two more cells to delete \nthere you go, and the last one, like this, \nso now we have an empty notebook with a single cell.\nOver the next few lectures, we're going to work on a  real machine learning project, \nimagine we have an online music store, when our users sign up, \nwe asked our age and gender, and based on their profile, \nyou recommend various music albums their likely to buy. So in this project, \nyou want to use machine learning to increase sales. \nSo, we want to build a model, we feed this model with some sample data, \nbased on the existing users. Our model will learn the patterns in our data, \nso we can ask it to make predictions. When a new user signs up, \nwe tell our model, hey, we have a new user with this profile, what \nis the kind of music, that this user is interested in, our model will say jazz, or hip hop, \nor whatever, and baed on that we can make suggestions to the user\nso, this is the problem we're going to solve, now back to the list of steps in the machine \nlearning projects, first we need to import our data, then, we should\nprepare or clean it, next we select a machine learning algorithm \nto build a model, we treat our model and ask it to make predictions. \nAnd finally, we evaluate our algorithm to see it's\naccuracy. if it's not accurate we either fine tune our model or \nselect a different algorithm. So let's focus on the first step. \nHead over to bit.ly/music.csv\nthis is a very basic csv that I've created for this project, it's just some random\nmade up data it's not real. So we have a table with 3\ncolumns, age, gender, and genre. Gender \ncan either be one which represents a male, \nor a 0, which represents a female, here I'm making a few assumptions. \nI'm assuming that men between 20 and 25 like hip hop men between \n26 and 30 like jazz, and after the age of 30, \nthey like classical music. For women I'm assuming \nthat if they are between 20 and 25 they like dance music, if\nthey are between 26 and 30 they like acoustic music, and just like\nmen, after the age of 30 they like classical music. Once again this is\na made up pattern, it's not the representation of the reality, so, \nlet's go ahead and download this csv. Click on this ... icon here\nand download this file. \nIn my downloads folder, here we have this music.csv. \nI'm going to drag and drop this onto the desktop because that's where I've\nstored this hello world notebook. So I want you to put this csv file \nright next to your jupiter notebook. \nNow, back to our notebook, you need to read the csv file, so just like before \nfirst we need to import the pandas module, so import panda \nas pd. And then we'll call pd, \n.read_csv and \nthe name of our file is music.csv. As you saw earlier this\nreturns a data frame which is a two dimensional array similar to an xl spreadsheet, \nso let's call that music_\ndata. Now let's inspect \nthis music_data to make sure we loaded everything properly so\nrun, so here's our data frame, beautiful, next we need\nto prepare or clean the data. And that's the topic for the next lecture. \nnext lecture. \nThe second step in a machine learning project, is cleaning, or \npreparing the data, and that involves tasks such as removing duplicate \nnull values and so on. Now on this particular data set we don't have to do anything \nkind of cleaning, because we don't have any duplicates, and as you can see \nAs you can see, all rows have values for all columns, so we don't have null values. \nBut there is one thing we need to do, \nwe should split this data set into two separate data sets, one into the first\ntwo columns, which we refer to as the input set, and the other \nwith the last column which we refer to as the output set. So when we train a model, \nso when we train a model we give it two separate data sets. The input set and the output set. \nThe output set which is in this case \nthe genre column contains the predictions so we're telling our model that\nif we have a user who's 20 years old and a male they like \nhip hop. Once we train our model then we give it a new\ninput set. For example, we have a new user who is \n21 years old and is a male, what is the genre of the music that this\nuser probably likes. As you can see in our input set, we don't have \na sample for a 21 year old male, so we're going to ask \nour model to predict that. That is the reason we need to split this data \nset into two separate sets. Input and output \nSo back to our code, this data frame object has a \nmethod called drop. Now\nif you put the cursor on the method name and press shift \nand tab, you can see this tool tip, so this is the signature of\nthis drop method, these are the parameters you can pass here. \nthe parameter we're going to use in this lecture is set to none by default.\nWitht his parter we can specify the columns we want to drop, so\nin this case we set columns \nto an array with one string, genre \nnow this method doesn't actually modify the original data set. \nIn fact it will create a new data set but without thisq\ncall. So by convention we use a capital X to \nrepresent that data set, so capital x equals this \nexpression. Now, let's inspect x, \nso as you can see our input set or x \nincludes these two columns, age and gender, it doesn't have the \noutput or predictions. Next we need to create our output set so, \nonce again we start with our data frame\nusing data, using square brackets we can get all the \nvalues in a given column. In this case, genre. Once again this returns \na new data set. By convention we use a lower case y\nto represent that. So that is our output \ndata. Let's inspect that as well. So, \nin this data set we only have the predictions or the answers. \nSo we have prepared our data, next we want to create a model using an \nalgorithm. \nThe next step is to build a \nmodel using a machine learning algorithm. There are so many algorithms out there, each algorithm \nhas its pros and cons, in terms of the performance and accuracy. \nIn this lecture we're going to use a very simple algorithm called decision tree. \nNow the good news is we don't have to explicitly \nprogram these algorithms, they're already implemented in a  library called side kick\nlearn. So, here on the top, \nfrom sklearn.tree \nlet's import the decision tree \nclassifier. So sklearn is the package \nthat comes with sidekick learn library, this is the most popular machine learning library \nin python. In this package, we have a module called tree.\nAnd in this module we have a class called decision tree classifier. \nThis class implements the decision tree operator, okay?\nSo, now we need to create a new instance of this class.\nSo, at the end, let's create \nan object called models nd set it to anew instance of decision, \ntree classifier. Like this. \nSo now we have a model, next we need to train it so it learns\npatterns in the data, and that is pretty easy. You call model,\n.fit this method takes \n2 data set. The input set and the output set. \nSo they are capital x, y. \nNow finally, we need to ask our model to make a prediction, so we can\nask it, what is the kind of music a 24 year old male likes? Now before\nwe do that, let's temporarily inspect our initial data set. That is\nmusic data. So, look what\nwe got here. As I told you earlier, I've assumed \nthat men between 20 and 25 like hip hop music but \nhere we only have 3 samples for men age \n20, 23,and 25. We don't have a sample for \na 21 year old male. So if you ask our model to predict the kind of music \nthat a 21 year old male likes, we expect it to say hip hop. Similarly, \nI've assumed that women between 20 and 25 like dance music, \nbut we don' have a sample for a 22 year old female. So once again if\nyou ask our model to predict the kind of music that a 22 year old woman \nlikes, we expect it to say dance. \nSo, with these assumptions let's go ahead and ask our model \nto make predictions. So let's remove \nthe last line, and instead we're going to call model \n.predict. This method takes a \n2 dimensional array. So here's the outer array. In this array, each element \nis an array. So I'm going to pass \nanother array here, and in this array I'm going to pass a new input set. \na 21 year old male. So 21, 1\nthat is like a new record in this table. Okay? So,  \nthis is one input set, let's pass another input for a 22 year old \nfemale. So here's another array, here, \nwe add 22 comma 0, so we're asking our model to make 2 predictions \nat the same time. We get the result and store it\nin a variable called predictions, and finally \nlet's inspect that in our notebook. \nRun, look what we got, our\nmodel is saying that a 21 year old male likes hip hop, and a  22 year\nold female likes dance music. So our model successfully \nwill make predictions here. But wait a minute, building a model that makes \npredictions accurately is not always that easy.\nAfter we build a model we need to measure it's accuracy.\nAnd if it's not accurate enough, we should either fine tune it or build a model using a different \nalgorithm. So next lecture I'm going to show you how to measure the accuracy of\na model. \nIn this lecture I'm going to show you\nhow to measure the accuracy of your models. Now in order to do so, \nfirst we need to split our data set into two sets. One for training and the other \nfor testing, because right now, we are passing the entire data set, \nfor training the model and we're using 2 samples for \nmaking predictions. That is not enough to calculate the\naccuracy of a model. A general rule of thumb is to annotate \n70-80% of our data to training, and another20-30% \nfor testing, then instead of passing only two samples for\nmaking predictions, we can pass the data set for testing \nwe'll get the predictions and then compare the predictions with the actual values. \nIn the test set. Based on that, we can calculate the \naccuracy. That's really easy, all we have to do is import a couple functions and \ncall them in this code. Let me show you. So first on this top\nfrom sklearn.model\nunderline selection module we import a function called \ntrain test split. With this function we can easily split our\ndata set into two sets. So training and testing, \nnow, right here, after we define x and y, \nsets, we call this funciton, so train \ntest split. We give it 3 \narguments, x, y, ad a keyword argument that specifies \nthe size of our test dataset. So test\n_size we set it to 0.2 So we're allocating 20%\nof our data for testing. Now this functions returns a \ntuple, so we can unpack it into 4 variables\nright here. x_train\nx_test y_train and y\n_test. so the first two variables \nare the input sets for training and testing. \nAnd the other are the output sets for training and testing, \nnow, when training our model, \ninstead of passing the entire data set we want to pass only the training data set. \nSo, x_train, \nand y_train. Also, when making predictions \ninstead of passing these two samples, we pass \nx_test. So thats the datas set. \nThat contains input values for testing. Now we get \nthe predictions. To calculate the accuracy we simply have to compare these predictions \nwith the actual values we have in the output set \nfor testing. That is very easy. First on the top, \nwe need to import a funciton, so, from sklearn.metric \n.metrics import accuracy \n_score. Now at the end. \nWe call this function, so accuracy score and \ngive it two arguments y_test.\nWhich contains the expected values and \npredictions which contains the actual value. \nNow this functions returns an accuracy score between 0 \nto 1. So we can store it here, \nand simply display it on the console. So let's go ahead \nand run this program. So, the accuracy score \nis 1 or a 100% but if we run this one more time, we're going to see a different result\nbecause every time we split our data set into \ntraining a test sets. We'll have different data sets, because this function \nrandomly picks data for training and testing. Let me show you, so put the cursor \nin the cell, now we can see this is activated \nnote that if you click this button here, it will run the cell and also insert a new \ncell below this cell. Let me show you. So if I go to this second cell\npress the skip button, now we are in the command mode, \npress d twice, okay now it's deleted, if we \nclick the run button, we can see, this code was \nexecuted, and now we have a new cell, so if you want to run our cell multiple times \nevery time you have to click this and then run\nit, and then click again, and run it, it's a little bit tedious. So I'll show you a shortcut. \nActivate the first cell, and press control and enter \nthis runs the current cell without \nadding a new cell below it. So, back here, lets run it multiple times \nokay, now look the accuracy dropped to 0.75, it's \nstill good, so the cuuracey scored here, is somewhere \nbetween 75% to a hundred %. But let me show you something, if I \nchange the test size, from 0.2 to 0.\n8, so essentially we're using only 20 percent of our data, \nfor training this model. And you're using the other 80% \nfor testing. Now let's see what happens when we run this cell multiple\ntimes. SO, control and enter, look, the accuracy immediately \ndropped to 0.4 One more time, now 46% \n40%, 26%\nit's really, really bad. The reason this is happening is because\nyou are using very little data for training this model. This is one of\n the key concepts in machine learning, the more data we give to our model and the cleaner\nthe data is, we get the better result, so if you have duplicates, \nirrelevant data, or incomplete values, our\nmodel will learn back patterns in our data. That's why it's really important to clean \nbefore training our model. Now let's change this back to 0. \n2, run this one more time, okay, now \nthe accuracy is 1, 75%, now we drop to 50% \nagain, the reason this is happening, is because we don't have enough data. \nSome machine learning problems, require, thousands or even millions \nof samples, to train model, the more complex a problem is, \nthe more data we need. For example, here we're only dealing with a table of three \ncolumns, but if you want to build a model to tell if a picture of a cat or a dog or a horse, \nor a lion, we will need millions of pictures, the more animal \nit will support the more pictures we need. In the next lecture, we're going to talk about \nmodel persistence. \nSo this is a \nvery basic implementation of building a training a model to make a prediction. \nNow to simplify things I have removed all the code that you wrote in the last lecture for\ncalculating the accuracy, because in this lecture, you're going to\nfocus on a different topic, So basically we import our data set. \nCreate a  model, train it, and then \nask it to make predictions, now this piece of code that you see here, is not what we\nwant to run everytime we have a new user or\nevery time we want to make recommendations to an existing user\nsometimes it's really time consuming. In this example, we're dealing with a \nvery small data set that only has 20 records. But in a  real application, \nyou might have a data set with thousands or trillions of examples, training for that \nmight take seconds or minutes or even hours. \nAnd that is wy model persistence is important, once in a while, \nyou build and train our model and then we save it to a file. \nNow, next time we want to make predictions, we simply load the model from the file and\n ask it to make predictions. That model is already trained \nyou don't need to retrain it, it's like an intelligent person. So let me show you\nhow to do this. it's very very easy. On the top, \nfrom sklearn.externals module\nwe import joblib. This\njob lib object has methods for saving and loading modules. So, \nafter we train our model we'll simply call\njob lib .dump and give it \ntwo arguments. Our model and the name of the file \nin which we want to store this model. Let's call this music \n-recommender.job lib \nThat's all we have to do. Now temporarily I'm going to comment \nout this line, we don't want to make any predictions, we just want to store\ntrain model in a file. So let's run this cell with control, \nand slash, okay, look, in the output \nwe have an array that contains the name of our model file. \nSo this is the return value of the dump method. Now back to our \ndesktop, right next to my notebook we can see our job lib file, this is where our model is stored. \nIt's simply a binary file. Now back to our \njupiter notebook. As I told you before in a real application we don't want to\ntrain model every time. So let's comment out\nthese few lines, on Mac, we can press\ncommand and slash and on windows control slash.\nOkay, these lines are commented out, now this time, instead of dumping \nour model, we're going to load it, so we call the load method, we don't have the model, we simply \npass the name of our model file. This\nreturns our trained model. Now with this \ntwo lines we can simply make predictions, so, earlier, \nwe assumed that men between 20-25 like hip hop music. \nlet's print predictions and see if our model is behaving \nso control \nso this is how we persist and load models. \nEarlier in this section, I told you that decision trees are the easiest \nto understand. And that's why we started machine learning with decision trees. In this lecture, we're going to \nexport our model in visual format, so you will see \nhow this model makes predictions, that is really, really cool. \nLet me show you. So once again I've simplified this code\nso we simply import our data set, create \ninput and output sets, create a model, and \ntrain it, that's all we are doing, now I want you to\nfollow along with me, type everything exactly as I show you in this lecture. Don't\nworry about what everything means we'll come back to it shortly. So on the top,\nfrom sklearnimport\ntree, this object has a method for exporting\nour decision tree in a  graphical format. So after we \ntrain our model, let's call tree \n_graph vis. Now here are a few arguments we need\nto pass. The first argument is our model,\nthe second is the name oft he output file. So here we're going to use keyword \narguments, because this method takes so many parameters, and we want to selectively pass \nkeyword arguments without worrying about their order. So, \nthe parameter we're going to set it out_file \nlet's set this to music-recommend \n.dot. This is the dot format, which is the \ngraph format, which is a graph description language, you will see that shortly. \nNow the other parameter you want to set is feature \n_names. We set this to an array of two strings, \nage and gender. These are the features \nor the columns of our data set. So they are properties or features of\nour data. Okay? The other parameter \nis class names. So class_names \nwe should set this to the list of classes or labels we have\nin our output data set, like hip hop, jazz, classical and so on. \nSo, this y data set includes all the genre\nor all the classes of our data, but they are repeated a few times in this data set. \nSo, here we call y.unit this returns \nthe unique list of classes, now we should sort this alphabetically. \nSo, we call the sorted function, and pass the \nresult a y.unique. \nThe next parameter is labeled, we set \nthis to a string, all, once again don't worry, \nabout the details of these parameters, we're going to come back to these shortly. So, \nset label to all, then round it, \nto true, and finally field to true. So, \nso this is the end result, now let's run this sound \nusing control and enter, okay, \nhere we have a nw file music recommender .. that's a little\nbit funny. So we want to open this file with vs code. \nSo drag and drop this into a vs code window. \nOkay, here's a dot format, it's\na textural language for describing graphs \nNow to visualize this graph we need to install an extension in vs code.\nSo on the left side, click extensions panel and search \nfor dot, dot. Look at this second extension here. \ngraphvis or .language\nby stephon vs. Go ahead and install this extension \nand then reload vs code. Once you do that, you can visualize \nthis dot file. So let me close this tab. \nAlright, look at this ... on the right side. Click this, \nyou should have a new menu, open preview to the side. So like that\nalright, here's the visualization of our decision tree, \nlet's close the dot file, there you go. This is exactly \nhow our model makes predictions. So we have this\nbinary tree, which means every node can have a maximum of two children.\nOn top of each note we have a condition \nif this condition is true we go to the child node on the left side. Otherwise we \ngo to the child node on the right side. So let's see what's happening here, the first condition \nis age less then or equal to 30 \n.5. If this condition is false, that means that user is 30 years \nor older, so the genre of the music that their interested in is classical. \nSo here we're classifying people based \non their profile. That is the reason we have the word class here, \nso a user who is 30 years or older, belongs to the class of \nclassical. Or people who like classical music. Now what if this condition \nis true. That means that user is younger then \n30, so, now we check the gender, if it's less then 0.5, \nwhich basically means it equals to 0, then \nwe're dealing with a female. So we go to the child node here, \nnow once again we have another condition, so we are dealing with a female \nwho is younger than 30. Once again we ned to check their age so \nis the age less then 25.5? If that's the case \nthen that user likes dance music, otherwise they like acoustic music. \nSo this is a decision tree that our model uses to make predictions \nNow if you're wondering why we have these floating point numbers\nlike 25.5 These are basically the rules \nthat our model generates, based on the patterns in our dataset. \nAs we give our model more data, these rules will change so they are not always the same. \nSo they are not always the same, also the more columns or the more features \nwe have, our decision tree is going to get more complex. \nWe only have two features, age, and gender. Now back to our code \nlet me quickly explain the meaning of all these parameters, we set field to true \nso each box or each node is filled with a color. We set \nrounded to true, so they have rounded corners. We set label to all\nso every node has labels that we can read. \nWe set class names to the unique list of genres \nand that's for displaying the class for each note, right here, and we set\nfeature names to age and gender, sow e can see the rules \nin our notes. So that was a short and \nsweet introduction to machien learning. Now you can use the materials that you learn in this section \nand apply them to solve a different set of problems. Now here's a question for you: \nWhat ideas do you have for machine learning? What kind of problems do you want to solve \nwith machine learning? Use the comments box below and let me know. I love to\nhear about your ideas! Next we're going to use python and a popular framework called\ndjango. To build a web application. Are you ready, let's get started\nIn this turorial, I'm going to show you how to create your first website with python, and A \nand a very popular framework called django. So it's spelled with a silent D, \nand is pronounced django. it's a web framework for\nperfectionists with deadlines. So if you're a perfectionist and you want to quickly put together\na website that is fast, scaleable and secure, \ndjango is your best friend. And here are the popular websites \nbuilt with Django. Like Instagram, Spotify\nYouTube, Washington Post, and so on. Now you might say\nwhat is a framework, and why do we need a framework to build a web application or a web site?\nWell, the framework is essentially a library of reusable modules\nthese modules provide functionality for common tasks \nfor example, in the case of a web framework like django we have modules to work with http requests \nurl's, sessions, cookies and so on. \nThese are the concerns of pretty much every website or \napplication out there. So all this functionality is baked into django, we don't have to\ncode it from scratch, that is why we use a framework like django. Now, \ndjango. Now technically a framework is more then a library, \napart from providing these modules it also provides a structure for each application \nIt tells us what folders or files we should have in our project. So this\nprovides a consistency among various django projects. So as you\nmove from one company to another and work on different projects, you can easily transition from one\nproject to another, because all these applications follow the same structure\nnow, with that interaction, let's create our first \ndjango project. So back to pycharm, close the hello world \nproject, and create a new project, create a new project, \nlet's call this new project pyshop\ngo ahead, alright, now down at the bottom let's \nopen up a terminal window, in this window we're going to\ninstall django. So we use pip to install \ndjango. But be sure to add two equal signs here followed by\n 2.1 With this we are telling pip that we want to install django version \n2.1. The reason I'm doing this, is because in the future when you're watching this video, \nchances are there is a newer version django out there. I \nwant to make sure that you can easily follow these tutorials, even though what I'm going to show you \nin these tutorials will most likely work with the latest version of django. I just want to\nbe on the safe side. So let's go ahead\nalright, django is installed, \nnext we need to create a django project, so here press control and L\nthis cleans up our terminal window, you don't have to do it, but it's just\neasier to see. To create a django project, we need to execute this command, django, \n-admin space \nstart project space, you're going to call this \nproject pyshop space period. \nSo when we install django, django brings a \ncommand line utility called django admin so this is a utility or program\nthat we can execute form the command line or terminal, right here. \nNow, this program takes various arguments, in this case \nwe want to use this argument start project, with this we're going to create\na project called pushup in the current folder. \nSo this period is imported here, that means the current folder, if\nyou don't add this period, this utility is going to create an extra folder and that\nlooks a little bit repetitive, so let's go ahead with this, \nalright, now, back to the project panel, if you expand py\nshop we can see that this is our project that we created in pycharm \nand in this folder we have these files. \nSo, init.py, you have seen this before, that means \nthis folder is package, so we can import various modules, \nof this package into other modules, and in this module, \nwe define various settings for our application, you're going to see this later in\nthis course. You also have this url's module, and with this module \nwe define what should the user see when they see slash\nabout/contact/products/shopping cart\nagain, we're going to work with this only. And finally we have this module,\nthat wsgi, that is short for web server gateway\ninterface. The purpose of this module is to provide a standard interface\nbetween applications built with django and web servers. This is \nan advanced topic, so for now, don't worry about it. Now, outside of this folder, \nof this folder you also have this new folder in our project \nmanage.py. As the name implies, we use this to manage \nthis django project. With this we can start our web server,  \nwe can work with our data base, again, we're going to work with this soon, \nlet's open up the terminal window one more time, now, \ntype out this command, python if you're on windows or python \n3 if you're on Mac, because as I told you at the beginning of the course, Mac by \ndefault comes with an installation of python, that is python 2. But that is\nthis course is python 3. So python 3 space manage \n.py space run \nserver. What is going on here? So with python interpreter \nwe are running this program manage.py and passing run server \nas an argument. This manage.py is essentially the same program \nthat we worked with here, django admin. \nBut we use django admin before creating a django project, now we have a django project, so now \nin this project we work with manage.py this\nis a module that contains some python code, so we use this module to manage \nour django project. So let's go ahead and \n",
  "words": [
    "hi",
    "name",
    "mosh",
    "going",
    "instructor",
    "python",
    "course",
    "course",
    "going",
    "learn",
    "everything",
    "need",
    "get",
    "started",
    "programming",
    "python",
    "python",
    "one",
    "popular",
    "programming",
    "languages",
    "every",
    "day",
    "people",
    "use",
    "cool",
    "things",
    "like",
    "automation",
    "use",
    "ai",
    "well",
    "building",
    "applications",
    "websites",
    "like",
    "instagram",
    "dropbox",
    "looking",
    "job",
    "python",
    "course",
    "going",
    "teach",
    "everything",
    "need",
    "get",
    "started",
    "python",
    "going",
    "talk",
    "core",
    "concepts",
    "python",
    "going",
    "build",
    "three",
    "python",
    "projects",
    "together",
    "first",
    "project",
    "going",
    "build",
    "going",
    "learn",
    "create",
    "beautiful",
    "website",
    "imaginary",
    "grocery",
    "store",
    "homepage",
    "see",
    "products",
    "shop",
    "also",
    "admin",
    "area",
    "managing",
    "stock",
    "going",
    "build",
    "using",
    "popular",
    "python",
    "framework",
    "called",
    "django",
    "never",
    "built",
    "website",
    "worry",
    "teach",
    "everything",
    "scratch",
    "also",
    "going",
    "learn",
    "use",
    "python",
    "machine",
    "learning",
    "artificial",
    "intelligence",
    "learn",
    "write",
    "python",
    "programming",
    "predict",
    "music",
    "people",
    "like",
    "based",
    "profile",
    "like",
    "youtube",
    "recommends",
    "videos",
    "based",
    "videos",
    "watched",
    "also",
    "show",
    "python",
    "automate",
    "boring",
    "repetitive",
    "tasks",
    "waste",
    "time",
    "write",
    "python",
    "program",
    "process",
    "thousands",
    "spreadsheets",
    "second",
    "designed",
    "python",
    "course",
    "anyone",
    "wants",
    "learn",
    "python",
    "beginner",
    "worry",
    "hold",
    "hand",
    "entire",
    "course",
    "old",
    "young",
    "python",
    "super",
    "easy",
    "learn",
    "write",
    "first",
    "python",
    "program",
    "literally",
    "seconds",
    "plus",
    "going",
    "give",
    "plenty",
    "exercises",
    "help",
    "build",
    "confidence",
    "writing",
    "cool",
    "python",
    "programs",
    "name",
    "mosh",
    "software",
    "engineer",
    "two",
    "decades",
    "experience",
    "taught",
    "3",
    "million",
    "people",
    "code",
    "super",
    "excited",
    "teaching",
    "python",
    "course",
    "hope",
    "stick",
    "around",
    "learn",
    "beautiful",
    "powerful",
    "programming",
    "language",
    "tutorial",
    "going",
    "show",
    "download",
    "install",
    "python",
    "computer",
    "first",
    "thing",
    "want",
    "open",
    "browser",
    "head",
    "python",
    "page",
    "click",
    "downloads",
    "see",
    "latest",
    "version",
    "python",
    "currently",
    "time",
    "recording",
    "video",
    "latest",
    "version",
    "python",
    "chances",
    "future",
    "watching",
    "tutorial",
    "newer",
    "version",
    "python",
    "available",
    "worry",
    "materials",
    "going",
    "learn",
    "course",
    "apply",
    "latest",
    "version",
    "python",
    "well",
    "let",
    "go",
    "ahead",
    "download",
    "python",
    "3",
    "alright",
    "look",
    "downloads",
    "folder",
    "python",
    "3",
    "installer",
    "simply",
    "double",
    "click",
    "windows",
    "going",
    "see",
    "check",
    "box",
    "add",
    "python",
    "python",
    "really",
    "important",
    "make",
    "sure",
    "tick",
    "box",
    "otherwise",
    "going",
    "able",
    "follow",
    "tutorial",
    "mac",
    "going",
    "see",
    "installer",
    "like",
    "setup",
    "wizard",
    "going",
    "install",
    "python",
    "3",
    "computer",
    "simply",
    "click",
    "continue",
    "agree",
    "license",
    "agreement",
    "install",
    "going",
    "take",
    "seconds",
    "going",
    "pause",
    "recording",
    "alright",
    "successfully",
    "installed",
    "python",
    "3",
    "computer",
    "let",
    "close",
    "alright",
    "next",
    "need",
    "install",
    "code",
    "editor",
    "se",
    "code",
    "editor",
    "write",
    "code",
    "like",
    "use",
    "microsoft",
    "word",
    "write",
    "documents",
    "use",
    "code",
    "editor",
    "write",
    "code",
    "many",
    "code",
    "editors",
    "one",
    "going",
    "show",
    "tutorial",
    "pycharm",
    "one",
    "popular",
    "code",
    "editors",
    "writing",
    "python",
    "code",
    "get",
    "accurately",
    "pycharm",
    "considered",
    "ide",
    "short",
    "integrated",
    "development",
    "environment",
    "basically",
    "code",
    "editor",
    "steroids",
    "additional",
    "features",
    "makes",
    "really",
    "easy",
    "write",
    "code",
    "let",
    "go",
    "ahead",
    "download",
    "pycharm",
    "download",
    "page",
    "see",
    "two",
    "versions",
    "pycharm",
    "one",
    "professional",
    "addition",
    "additional",
    "features",
    "pay",
    "community",
    "edition",
    "absolutely",
    "free",
    "going",
    "use",
    "tutorial",
    "go",
    "ahead",
    "download",
    "well",
    "look",
    "downloads",
    "folder",
    "pycharm",
    "double",
    "click",
    "windows",
    "going",
    "see",
    "installation",
    "wizard",
    "simply",
    "click",
    "next",
    "next",
    "next",
    "install",
    "pycharm",
    "mac",
    "need",
    "drag",
    "drop",
    "icon",
    "onto",
    "applications",
    "folder",
    "drag",
    "drop",
    "alright",
    "let",
    "double",
    "click",
    "run",
    "first",
    "time",
    "run",
    "pycharm",
    "going",
    "get",
    "warning",
    "application",
    "download",
    "internet",
    "let",
    "go",
    "ahead",
    "open",
    "next",
    "going",
    "see",
    "dialogue",
    "box",
    "importing",
    "settings",
    "leave",
    "import",
    "settings",
    "really",
    "matter",
    "okay",
    "page",
    "select",
    "never",
    "used",
    "pycharm",
    "see",
    "keyword",
    "shortcuts",
    "might",
    "useful",
    "future",
    "accept",
    "bottom",
    "click",
    "next",
    "button",
    "next",
    "one",
    "time",
    "finally",
    "start",
    "using",
    "pycharm",
    "main",
    "page",
    "pycharm",
    "every",
    "time",
    "open",
    "click",
    "create",
    "new",
    "project",
    "location",
    "project",
    "let",
    "call",
    "project",
    "hello",
    "world",
    "click",
    "create",
    "expand",
    "item",
    "make",
    "sure",
    "base",
    "interpreter",
    "set",
    "python",
    "python",
    "interpreter",
    "basically",
    "program",
    "knows",
    "execute",
    "python",
    "code",
    "know",
    "interpret",
    "translate",
    "python",
    "instructions",
    "instructions",
    "computer",
    "understand",
    "mac",
    "computers",
    "default",
    "come",
    "older",
    "installation",
    "python",
    "python",
    "2",
    "considered",
    "legacy",
    "means",
    "longer",
    "maintained",
    "supported",
    "earlier",
    "downloaded",
    "python",
    "3",
    "make",
    "sure",
    "set",
    "python",
    "3",
    "list",
    "select",
    "python",
    "alright",
    "let",
    "go",
    "ahead",
    "create",
    "project",
    "right",
    "click",
    "hello",
    "world",
    "folder",
    "go",
    "new",
    "python",
    "file",
    "call",
    "file",
    "convention",
    "python",
    "files",
    "py",
    "extension",
    "alright",
    "let",
    "go",
    "ahead",
    "let",
    "collapse",
    "project",
    "panel",
    "clicking",
    "write",
    "first",
    "python",
    "program",
    "simply",
    "type",
    "print",
    "pr",
    "int",
    "lowercase",
    "open",
    "close",
    "parenthesis",
    "inside",
    "parenthesis",
    "add",
    "quotations",
    "either",
    "use",
    "single",
    "quotes",
    "double",
    "quotes",
    "codes",
    "write",
    "name",
    "mosh",
    "hamedani",
    "first",
    "python",
    "programming",
    "piece",
    "code",
    "print",
    "name",
    "screen",
    "run",
    "go",
    "top",
    "run",
    "menu",
    "click",
    "run",
    "also",
    "note",
    "shortcut",
    "associated",
    "command",
    "program",
    "always",
    "use",
    "shortcuts",
    "increases",
    "productivity",
    "mac",
    "computer",
    "shortcut",
    "control",
    "option",
    "windows",
    "different",
    "let",
    "asking",
    "want",
    "run",
    "click",
    "app",
    "see",
    "little",
    "terminal",
    "window",
    "little",
    "window",
    "program",
    "see",
    "results",
    "output",
    "program",
    "future",
    "learn",
    "python",
    "able",
    "build",
    "applications",
    "graphical",
    "user",
    "interface",
    "gooey",
    "little",
    "bit",
    "complicated",
    "going",
    "use",
    "little",
    "terminal",
    "window",
    "see",
    "results",
    "program",
    "see",
    "name",
    "printed",
    "print",
    "code",
    "window",
    "might",
    "get",
    "way",
    "always",
    "resize",
    "minimize",
    "itty",
    "putting",
    "icon",
    "first",
    "python",
    "program",
    "see",
    "result",
    "showed",
    "video",
    "use",
    "comment",
    "box",
    "tell",
    "error",
    "encountered",
    "best",
    "help",
    "move",
    "forward",
    "python",
    "tutorial",
    "gong",
    "take",
    "program",
    "next",
    "level",
    "make",
    "interesting",
    "going",
    "show",
    "draw",
    "dog",
    "hair",
    "part",
    "tutorial",
    "learn",
    "python",
    "code",
    "gets",
    "executed",
    "also",
    "learn",
    "programming",
    "terms",
    "press",
    "enter",
    "line",
    "2",
    "write",
    "another",
    "print",
    "statement",
    "print",
    "open",
    "close",
    "parenthesis",
    "add",
    "quotation",
    "want",
    "draw",
    "dog",
    "add",
    "head",
    "dog",
    "followed",
    "4",
    "hyphens",
    "body",
    "alright",
    "one",
    "time",
    "another",
    "print",
    "statement",
    "quotations",
    "need",
    "draw",
    "legs",
    "add",
    "space",
    "follow",
    "4",
    "vertical",
    "bars",
    "like",
    "little",
    "imaginary",
    "dot",
    "let",
    "run",
    "program",
    "see",
    "get",
    "top",
    "right",
    "corner",
    "see",
    "play",
    "button",
    "click",
    "go",
    "name",
    "right",
    "imaginary",
    "dog",
    "need",
    "understand",
    "python",
    "code",
    "gets",
    "executed",
    "line",
    "line",
    "top",
    "earlier",
    "told",
    "python",
    "interpreter",
    "program",
    "knows",
    "translate",
    "interpret",
    "python",
    "code",
    "instructions",
    "computer",
    "understand",
    "run",
    "program",
    "clicking",
    "program",
    "python",
    "interpreter",
    "starts",
    "executing",
    "running",
    "program",
    "line",
    "line",
    "top",
    "first",
    "executes",
    "line",
    "1",
    "moves",
    "onto",
    "line",
    "2",
    "python",
    "programs",
    "get",
    "executed",
    "let",
    "show",
    "something",
    "cool",
    "let",
    "add",
    "another",
    "print",
    "statement",
    "quotations",
    "quotations",
    "add",
    "star",
    "asterisk",
    "like",
    "quotation",
    "parenthesis",
    "add",
    "space",
    "add",
    "asterisk",
    "space",
    "going",
    "well",
    "anywhere",
    "quotations",
    "like",
    "defining",
    "string",
    "string",
    "programming",
    "term",
    "means",
    "series",
    "characters",
    "string",
    "also",
    "string",
    "line",
    "3",
    "well",
    "line",
    "2",
    "line",
    "multiplying",
    "string",
    "number",
    "multiplication",
    "operator",
    "like",
    "multiplication",
    "operator",
    "math",
    "piece",
    "code",
    "draw",
    "10",
    "asterisks",
    "terminal",
    "let",
    "show",
    "let",
    "run",
    "program",
    "one",
    "time",
    "go",
    "10",
    "asterisks",
    "piece",
    "code",
    "called",
    "expression",
    "expression",
    "piece",
    "code",
    "produces",
    "value",
    "python",
    "interpreter",
    "tries",
    "execute",
    "line",
    "4",
    "first",
    "evaluate",
    "code",
    "put",
    "parenthesis",
    "could",
    "evaluate",
    "expressions",
    "expression",
    "produce",
    "10",
    "asterisks",
    "asterisks",
    "printed",
    "terminal",
    "exercise",
    "use",
    "print",
    "statements",
    "draw",
    "another",
    "shape",
    "draw",
    "heart",
    "ball",
    "whatever",
    "like",
    "see",
    "next",
    "tutorial",
    "one",
    "questions",
    "get",
    "lot",
    "channel",
    "long",
    "take",
    "learn",
    "python",
    "become",
    "job",
    "ready",
    "well",
    "single",
    "answer",
    "really",
    "depends",
    "much",
    "effort",
    "commitment",
    "want",
    "put",
    "would",
    "say",
    "spend",
    "2",
    "hours",
    "every",
    "day",
    "consistently",
    "3",
    "months",
    "able",
    "write",
    "basic",
    "python",
    "programs",
    "quite",
    "honestly",
    "get",
    "job",
    "order",
    "get",
    "job",
    "need",
    "specialize",
    "one",
    "area",
    "want",
    "use",
    "python",
    "want",
    "build",
    "web",
    "applications",
    "desktop",
    "applications",
    "want",
    "use",
    "machine",
    "learning",
    "artificial",
    "intelligence",
    "whatever",
    "want",
    "need",
    "take",
    "additional",
    "courses",
    "example",
    "want",
    "become",
    "web",
    "developer",
    "addition",
    "learning",
    "python",
    "also",
    "learn",
    "html",
    "css",
    "javascript",
    "django",
    "popular",
    "python",
    "framework",
    "building",
    "web",
    "applications",
    "learning",
    "things",
    "would",
    "take",
    "another",
    "6",
    "months",
    "total",
    "need",
    "months",
    "become",
    "job",
    "ready",
    "point",
    "get",
    "junior",
    "developer",
    "job",
    "salary",
    "thousand",
    "dollars",
    "year",
    "work",
    "python",
    "projects",
    "resume",
    "starts",
    "build",
    "ask",
    "year",
    "dollars",
    "year",
    "depending",
    "company",
    "geographical",
    "area",
    "really",
    "depends",
    "single",
    "answer",
    "excited",
    "learn",
    "python",
    "get",
    "started",
    "career",
    "path",
    "would",
    "encourage",
    "make",
    "commitment",
    "spend",
    "2",
    "hours",
    "every",
    "day",
    "practicing",
    "python",
    "use",
    "comment",
    "box",
    "let",
    "know",
    "learning",
    "python",
    "want",
    "dream",
    "job",
    "would",
    "love",
    "hear",
    "story",
    "python",
    "tutorial",
    "going",
    "learn",
    "variables",
    "one",
    "fundamental",
    "concepts",
    "programming",
    "specific",
    "python",
    "exist",
    "pretty",
    "much",
    "every",
    "programming",
    "language",
    "use",
    "variables",
    "temporarily",
    "store",
    "data",
    "computer",
    "memory",
    "example",
    "let",
    "type",
    "price",
    "10",
    "python",
    "interpreter",
    "executes",
    "code",
    "allocate",
    "memory",
    "store",
    "number",
    "10",
    "memory",
    "finally",
    "attach",
    "price",
    "label",
    "memory",
    "location",
    "metahor",
    "imagine",
    "box",
    "box",
    "number",
    "10",
    "price",
    "label",
    "put",
    "box",
    "use",
    "label",
    "anywhere",
    "program",
    "access",
    "value",
    "box",
    "simplified",
    "explanation",
    "let",
    "print",
    "price",
    "terminal",
    "print",
    "time",
    "going",
    "add",
    "quotations",
    "put",
    "quotations",
    "see",
    "text",
    "price",
    "terminal",
    "value",
    "price",
    "variable",
    "put",
    "quotations",
    "type",
    "price",
    "let",
    "run",
    "program",
    "one",
    "time",
    "go",
    "see",
    "10",
    "terminal",
    "define",
    "variables",
    "start",
    "identifier",
    "name",
    "variable",
    "equal",
    "sign",
    "finally",
    "value",
    "accurately",
    "number",
    "10",
    "stored",
    "memory",
    "first",
    "get",
    "converted",
    "binary",
    "presentation",
    "number",
    "10",
    "decimal",
    "system",
    "digits",
    "0",
    "computers",
    "understand",
    "digits",
    "understand",
    "0s",
    "1s",
    "store",
    "number",
    "10",
    "computer",
    "memory",
    "first",
    "get",
    "converted",
    "binary",
    "representation",
    "bunch",
    "0",
    "1",
    "like",
    "001",
    "001",
    "whatever",
    "know",
    "get",
    "stored",
    "computer",
    "memory",
    "let",
    "take",
    "program",
    "next",
    "level",
    "second",
    "line",
    "update",
    "value",
    "price",
    "variable",
    "reset",
    "new",
    "value",
    "like",
    "20",
    "run",
    "program",
    "see",
    "20",
    "told",
    "python",
    "interpreter",
    "executes",
    "code",
    "line",
    "line",
    "top",
    "first",
    "set",
    "price",
    "10",
    "reset",
    "20",
    "finally",
    "print",
    "terminal",
    "let",
    "run",
    "terminal",
    "go",
    "see",
    "20",
    "okay",
    "numbers",
    "whole",
    "numbers",
    "without",
    "decimal",
    "point",
    "programming",
    "refer",
    "numbers",
    "integers",
    "integer",
    "number",
    "without",
    "decimal",
    "point",
    "also",
    "use",
    "numbers",
    "decimal",
    "point",
    "example",
    "line",
    "2",
    "define",
    "another",
    "variable",
    "called",
    "rating",
    "set",
    "number",
    "programming",
    "refer",
    "kind",
    "number",
    "floating",
    "point",
    "number",
    "float",
    "short",
    "integers",
    "floats",
    "also",
    "define",
    "variable",
    "set",
    "string",
    "example",
    "name",
    "equals",
    "mosh",
    "also",
    "another",
    "kind",
    "value",
    "called",
    "boolean",
    "true",
    "false",
    "line",
    "yes",
    "english",
    "example",
    "going",
    "define",
    "variable",
    "underline",
    "published",
    "use",
    "underscore",
    "separate",
    "multiple",
    "words",
    "variables",
    "name",
    "set",
    "true",
    "false",
    "boolean",
    "values",
    "note",
    "python",
    "case",
    "sensitive",
    "language",
    "means",
    "sensitive",
    "lower",
    "case",
    "upper",
    "case",
    "letters",
    "defining",
    "variables",
    "always",
    "use",
    "lowercase",
    "letters",
    "false",
    "true",
    "special",
    "keywords",
    "language",
    "spell",
    "lowercase",
    "f",
    "python",
    "understand",
    "see",
    "red",
    "underline",
    "indicates",
    "error",
    "make",
    "sure",
    "spell",
    "capital",
    "f",
    "want",
    "set",
    "true",
    "make",
    "sure",
    "capital",
    "program",
    "storing",
    "simple",
    "values",
    "computer",
    "memory",
    "simple",
    "values",
    "numbers",
    "integers",
    "floats",
    "strings",
    "booleans",
    "python",
    "also",
    "store",
    "complex",
    "values",
    "like",
    "lists",
    "values",
    "going",
    "show",
    "future",
    "going",
    "want",
    "little",
    "exercise",
    "imagine",
    "going",
    "write",
    "program",
    "hospital",
    "check",
    "patient",
    "named",
    "john",
    "smith",
    "20",
    "years",
    "old",
    "new",
    "patient",
    "want",
    "define",
    "3",
    "variables",
    "name",
    "age",
    "another",
    "variable",
    "new",
    "existing",
    "patient",
    "pause",
    "video",
    "spend",
    "one",
    "minute",
    "exercise",
    "done",
    "come",
    "back",
    "continue",
    "see",
    "solution",
    "alright",
    "need",
    "three",
    "variables",
    "first",
    "one",
    "patient",
    "name",
    "set",
    "john",
    "smith",
    "also",
    "call",
    "full",
    "name",
    "valid",
    "names",
    "variables",
    "second",
    "variable",
    "age",
    "patient",
    "age",
    "20",
    "finally",
    "need",
    "variable",
    "tell",
    "new",
    "existing",
    "patient",
    "use",
    "boolean",
    "value",
    "define",
    "variable",
    "new",
    "set",
    "true",
    "learned",
    "print",
    "messages",
    "terminal",
    "window",
    "tutorial",
    "going",
    "show",
    "receive",
    "input",
    "user",
    "going",
    "write",
    "small",
    "program",
    "asks",
    "user",
    "name",
    "print",
    "greeting",
    "message",
    "customized",
    "user",
    "instead",
    "print",
    "going",
    "use",
    "input",
    "input",
    "print",
    "functions",
    "built",
    "python",
    "metaphor",
    "think",
    "remote",
    "control",
    "tv",
    "remote",
    "control",
    "bunch",
    "buttons",
    "functions",
    "built",
    "tv",
    "turn",
    "turn",
    "change",
    "volume",
    "python",
    "also",
    "functions",
    "common",
    "tasks",
    "printing",
    "messages",
    "receiving",
    "input",
    "going",
    "use",
    "input",
    "function",
    "whenever",
    "parenthesis",
    "going",
    "say",
    "calling",
    "executing",
    "function",
    "like",
    "pressing",
    "button",
    "remote",
    "control",
    "going",
    "call",
    "input",
    "function",
    "parenthesis",
    "want",
    "add",
    "string",
    "print",
    "something",
    "terminal",
    "name",
    "question",
    "mark",
    "followed",
    "space",
    "see",
    "second",
    "input",
    "function",
    "print",
    "message",
    "terminal",
    "wait",
    "user",
    "enter",
    "value",
    "whatever",
    "user",
    "enters",
    "input",
    "function",
    "return",
    "get",
    "value",
    "store",
    "memory",
    "using",
    "variable",
    "get",
    "result",
    "put",
    "variable",
    "called",
    "name",
    "okay",
    "second",
    "line",
    "want",
    "print",
    "message",
    "like",
    "hi",
    "john",
    "hi",
    "mosh",
    "whatever",
    "print",
    "quotations",
    "hi",
    "space",
    "quotation",
    "want",
    "dynamically",
    "print",
    "name",
    "variable",
    "plus",
    "sign",
    "name",
    "hi",
    "string",
    "concatenating",
    "combining",
    "string",
    "another",
    "string",
    "name",
    "variable",
    "another",
    "example",
    "expression",
    "remember",
    "expression",
    "piece",
    "code",
    "uses",
    "value",
    "expression",
    "concatenates",
    "combines",
    "2",
    "strings",
    "let",
    "run",
    "program",
    "see",
    "happens",
    "run",
    "okay",
    "question",
    "name",
    "mosh",
    "note",
    "earlier",
    "added",
    "space",
    "question",
    "mark",
    "terminal",
    "window",
    "cursor",
    "separated",
    "question",
    "mark",
    "otherwise",
    "would",
    "close",
    "let",
    "type",
    "whatever",
    "plus",
    "enter",
    "get",
    "message",
    "hi",
    "mosh",
    "little",
    "exercise",
    "want",
    "extend",
    "program",
    "ask",
    "two",
    "questions",
    "first",
    "person",
    "name",
    "favorite",
    "color",
    "print",
    "message",
    "like",
    "mosh",
    "likes",
    "blue",
    "pause",
    "video",
    "exercise",
    "come",
    "back",
    "continue",
    "watching",
    "alright",
    "first",
    "question",
    "right",
    "input",
    "functions",
    "one",
    "time",
    "time",
    "going",
    "ask",
    "different",
    "question",
    "favorite",
    "color",
    "get",
    "new",
    "value",
    "store",
    "variable",
    "called",
    "color",
    "could",
    "call",
    "favorite",
    "underline",
    "color",
    "either",
    "works",
    "finally",
    "going",
    "change",
    "pass",
    "print",
    "function",
    "first",
    "print",
    "name",
    "concatenate",
    "string",
    "going",
    "type",
    "likes",
    "also",
    "put",
    "one",
    "space",
    "likes",
    "concatenate",
    "favorite",
    "color",
    "favorite",
    "color",
    "let",
    "run",
    "program",
    "name",
    "mosh",
    "enter",
    "favorite",
    "color",
    "blue",
    "enter",
    "get",
    "message",
    "mosh",
    "likes",
    "blue",
    "hey",
    "guys",
    "mosh",
    "wanted",
    "let",
    "know",
    "really",
    "memorize",
    "anything",
    "course",
    "put",
    "together",
    "cheat",
    "sheet",
    "summary",
    "notes",
    "quickly",
    "review",
    "materials",
    "course",
    "link",
    "video",
    "done",
    "best",
    "create",
    "best",
    "possible",
    "python",
    "course",
    "youtube",
    "really",
    "appreciate",
    "support",
    "hard",
    "work",
    "liking",
    "video",
    "sharing",
    "others",
    "learn",
    "well",
    "sure",
    "subscribe",
    "channel",
    "tutorials",
    "like",
    "alright",
    "let",
    "move",
    "onto",
    "next",
    "tutorial",
    "python",
    "tutorial",
    "going",
    "write",
    "program",
    "ask",
    "year",
    "born",
    "calculate",
    "age",
    "print",
    "terminal",
    "let",
    "start",
    "input",
    "function",
    "input",
    "let",
    "print",
    "birth",
    "followed",
    "colon",
    "space",
    "let",
    "get",
    "return",
    "value",
    "store",
    "variable",
    "called",
    "told",
    "use",
    "underscore",
    "separate",
    "multiple",
    "words",
    "next",
    "need",
    "calculate",
    "age",
    "define",
    "another",
    "variable",
    "called",
    "age",
    "basic",
    "math",
    "currently",
    "2019",
    "let",
    "write",
    "expression",
    "like",
    "2019",
    "birth",
    "year",
    "finally",
    "let",
    "print",
    "age",
    "terminal",
    "let",
    "run",
    "program",
    "see",
    "happens",
    "birth",
    "year",
    "1982",
    "enter",
    "oops",
    "got",
    "error",
    "going",
    "whenever",
    "see",
    "message",
    "means",
    "something",
    "wrong",
    "program",
    "information",
    "find",
    "exactly",
    "error",
    "occurred",
    "next",
    "file",
    "see",
    "file",
    "generated",
    "error",
    "case",
    "currently",
    "program",
    "single",
    "file",
    "real",
    "complex",
    "programs",
    "often",
    "hundreds",
    "even",
    "thousands",
    "files",
    "file",
    "line",
    "2",
    "got",
    "error",
    "right",
    "see",
    "piece",
    "code",
    "generated",
    "error",
    "calculating",
    "age",
    "right",
    "see",
    "type",
    "error",
    "case",
    "type",
    "error",
    "message",
    "unsupported",
    "operand",
    "types",
    "subtraction",
    "int",
    "str",
    "int",
    "short",
    "integer",
    "represents",
    "whole",
    "number",
    "str",
    "short",
    "string",
    "subtracting",
    "string",
    "integer",
    "python",
    "know",
    "let",
    "explain",
    "going",
    "close",
    "terminal",
    "window",
    "first",
    "line",
    "executed",
    "birth",
    "year",
    "variable",
    "set",
    "string",
    "whatever",
    "type",
    "terminal",
    "always",
    "treated",
    "string",
    "even",
    "type",
    "number",
    "words",
    "run",
    "program",
    "birth",
    "year",
    "variable",
    "set",
    "string",
    "four",
    "characters",
    "string",
    "different",
    "actual",
    "number",
    "one",
    "integer",
    "string",
    "right",
    "back",
    "line",
    "2",
    "error",
    "occurred",
    "run",
    "time",
    "means",
    "run",
    "program",
    "expression",
    "right",
    "side",
    "assignment",
    "operator",
    "going",
    "look",
    "like",
    "2019",
    "string",
    "python",
    "know",
    "interpret",
    "evaluate",
    "expression",
    "fix",
    "problem",
    "need",
    "convert",
    "1982",
    "integer",
    "able",
    "subtract",
    "2019",
    "easy",
    "far",
    "learned",
    "two",
    "built",
    "functions",
    "one",
    "print",
    "input",
    "functions",
    "converting",
    "values",
    "different",
    "types",
    "int",
    "converting",
    "string",
    "integer",
    "also",
    "float",
    "converting",
    "string",
    "float",
    "number",
    "decimal",
    "point",
    "also",
    "bool",
    "converting",
    "string",
    "boolean",
    "value",
    "fix",
    "problem",
    "need",
    "go",
    "back",
    "line",
    "2",
    "pass",
    "birth",
    "year",
    "variable",
    "int",
    "function",
    "like",
    "int",
    "parenthesis",
    "like",
    "pass",
    "string",
    "int",
    "function",
    "int",
    "convert",
    "itneger",
    "python",
    "interpreter",
    "able",
    "evaluate",
    "expression",
    "let",
    "run",
    "program",
    "one",
    "time",
    "birth",
    "year",
    "1982",
    "enter",
    "37",
    "years",
    "old",
    "python",
    "useful",
    "function",
    "getting",
    "type",
    "variables",
    "example",
    "let",
    "print",
    "type",
    "birth",
    "year",
    "right",
    "line",
    "1",
    "let",
    "print",
    "going",
    "call",
    "another",
    "built",
    "function",
    "called",
    "type",
    "let",
    "pass",
    "birth",
    "year",
    "okay",
    "similarly",
    "line",
    "3",
    "let",
    "also",
    "print",
    "type",
    "age",
    "print",
    "type",
    "age",
    "okay",
    "let",
    "run",
    "program",
    "birth",
    "year",
    "one",
    "time",
    "1982",
    "okay",
    "result",
    "type",
    "birth",
    "year",
    "see",
    "class",
    "str",
    "strings",
    "look",
    "classes",
    "future",
    "worry",
    "also",
    "cans",
    "ee",
    "type",
    "age",
    "variable",
    "int",
    "integer",
    "need",
    "take",
    "away",
    "whenever",
    "use",
    "input",
    "function",
    "always",
    "get",
    "string",
    "expecting",
    "numerical",
    "value",
    "always",
    "convert",
    "string",
    "integer",
    "float",
    "little",
    "exercise",
    "want",
    "write",
    "program",
    "ask",
    "user",
    "weight",
    "convert",
    "kilograms",
    "print",
    "terminal",
    "pause",
    "video",
    "exercise",
    "ready",
    "come",
    "back",
    "watch",
    "alright",
    "let",
    "use",
    "input",
    "function",
    "ask",
    "weight",
    "pounds",
    "get",
    "weight",
    "lbs",
    "pounds",
    "need",
    "convert",
    "kilograms",
    "easy",
    "defined",
    "another",
    "variable",
    "set",
    "times",
    "finally",
    "let",
    "print",
    "weight",
    "underline",
    "kg",
    "let",
    "run",
    "python",
    "program",
    "see",
    "happens",
    "weight",
    "160",
    "alright",
    "got",
    "error",
    "ca",
    "multiply",
    "sequence",
    "non",
    "int",
    "type",
    "float",
    "told",
    "input",
    "function",
    "returns",
    "string",
    "multiply",
    "string",
    "float",
    "python",
    "know",
    "case",
    "convert",
    "number",
    "integer",
    "float",
    "multiply",
    "let",
    "call",
    "int",
    "function",
    "pass",
    "weight",
    "underline",
    "lbs",
    "run",
    "program",
    "one",
    "time",
    "160",
    "okay",
    "72",
    "kg",
    "tutorial",
    "going",
    "learn",
    "python",
    "strings",
    "defined",
    "course",
    "variable",
    "set",
    "python",
    "beginners",
    "earlier",
    "told",
    "could",
    "use",
    "single",
    "double",
    "quotes",
    "define",
    "string",
    "times",
    "use",
    "specific",
    "form",
    "otherwise",
    "going",
    "run",
    "issues",
    "example",
    "imagine",
    "wanted",
    "change",
    "string",
    "pythons",
    "course",
    "beginners",
    "want",
    "add",
    "apostrophe",
    "like",
    "course",
    "beginners",
    "immediately",
    "say",
    "going",
    "crazy",
    "string",
    "starts",
    "terminates",
    "characters",
    "second",
    "apostrophe",
    "python",
    "interpreter",
    "know",
    "solve",
    "problem",
    "need",
    "use",
    "double",
    "quotes",
    "define",
    "string",
    "single",
    "quote",
    "middle",
    "string",
    "let",
    "change",
    "double",
    "quotes",
    "see",
    "adds",
    "another",
    "double",
    "quote",
    "close",
    "manually",
    "remove",
    "also",
    "one",
    "time",
    "beginning",
    "string",
    "need",
    "add",
    "another",
    "double",
    "quote",
    "see",
    "error",
    "gone",
    "print",
    "course",
    "see",
    "python",
    "course",
    "beginners",
    "beautiful",
    "let",
    "say",
    "want",
    "apostrophe",
    "python",
    "beginners",
    "want",
    "put",
    "beginners",
    "double",
    "quotes",
    "add",
    "double",
    "quote",
    "python",
    "interpreter",
    "gets",
    "confused",
    "assumes",
    "second",
    "double",
    "quote",
    "indicates",
    "end",
    "string",
    "know",
    "characters",
    "solve",
    "need",
    "change",
    "double",
    "quotes",
    "single",
    "quotes",
    "like",
    "add",
    "double",
    "quotes",
    "middle",
    "string",
    "let",
    "run",
    "program",
    "go",
    "get",
    "python",
    "beginners",
    "cases",
    "using",
    "single",
    "double",
    "quotes",
    "examples",
    "shown",
    "far",
    "deal",
    "short",
    "strings",
    "wanted",
    "define",
    "string",
    "multiple",
    "lengths",
    "example",
    "wanted",
    "define",
    "string",
    "message",
    "send",
    "email",
    "case",
    "need",
    "use",
    "triple",
    "quotes",
    "delete",
    "add",
    "three",
    "quotes",
    "1",
    "2",
    "3",
    "go",
    "three",
    "quotes",
    "start",
    "string",
    "three",
    "terminate",
    "quotes",
    "single",
    "double",
    "quotes",
    "okay",
    "define",
    "string",
    "spans",
    "multiple",
    "lines",
    "example",
    "say",
    "hi",
    "jon",
    "first",
    "email",
    "thank",
    "support",
    "team",
    "like",
    "let",
    "run",
    "program",
    "result",
    "get",
    "beautiful",
    "multi",
    "line",
    "string",
    "let",
    "change",
    "back",
    "something",
    "simple",
    "look",
    "characteristics",
    "strings",
    "python",
    "going",
    "use",
    "single",
    "quotes",
    "set",
    "course",
    "name",
    "python",
    "beginners",
    "going",
    "use",
    "square",
    "brackets",
    "get",
    "character",
    "given",
    "index",
    "string",
    "let",
    "show",
    "get",
    "first",
    "character",
    "use",
    "square",
    "brackets",
    "type",
    "index",
    "first",
    "character",
    "string",
    "words",
    "python",
    "strings",
    "indexed",
    "0",
    "1",
    "2",
    "3",
    "4",
    "etc",
    "index",
    "first",
    "character",
    "0",
    "second",
    "character",
    "1",
    "let",
    "delete",
    "run",
    "program",
    "get",
    "also",
    "use",
    "negative",
    "index",
    "one",
    "features",
    "programming",
    "languages",
    "far",
    "know",
    "negative",
    "index",
    "get",
    "characters",
    "started",
    "end",
    "pass",
    "negative",
    "1",
    "assuming",
    "0",
    "index",
    "first",
    "character",
    "negative",
    "1",
    "index",
    "last",
    "character",
    "run",
    "program",
    "see",
    "let",
    "run",
    "go",
    "get",
    "pass",
    "negative",
    "2",
    "return",
    "second",
    "character",
    "end",
    "let",
    "run",
    "one",
    "time",
    "get",
    "r",
    "second",
    "character",
    "end",
    "okay",
    "place",
    "close",
    "attention",
    "square",
    "brackets",
    "syntax",
    "quite",
    "often",
    "topic",
    "online",
    "python",
    "tests",
    "university",
    "exams",
    "preparing",
    "python",
    "test",
    "make",
    "sure",
    "watch",
    "tutorial",
    "one",
    "time",
    "understand",
    "exactly",
    "square",
    "brackets",
    "syntax",
    "works",
    "also",
    "use",
    "similar",
    "syntax",
    "extract",
    "characters",
    "instead",
    "1",
    "character",
    "example",
    "type",
    "0",
    "colon",
    "3",
    "python",
    "interpreter",
    "return",
    "characters",
    "starting",
    "index",
    "way",
    "second",
    "index",
    "return",
    "character",
    "index",
    "words",
    "back",
    "indexes",
    "0",
    "1",
    "2",
    "3",
    "run",
    "program",
    "python",
    "interpreter",
    "return",
    "characters",
    "starting",
    "index",
    "0",
    "way",
    "index",
    "3",
    "excludes",
    "character",
    "index",
    "3",
    "run",
    "python",
    "program",
    "going",
    "see",
    "pint",
    "let",
    "show",
    "going",
    "delete",
    "line",
    "run",
    "program",
    "go",
    "get",
    "pint",
    "also",
    "default",
    "values",
    "start",
    "end",
    "index",
    "supply",
    "end",
    "index",
    "python",
    "return",
    "characters",
    "end",
    "string",
    "let",
    "take",
    "look",
    "run",
    "program",
    "go",
    "python",
    "beginners",
    "change",
    "start",
    "index",
    "1",
    "exclude",
    "first",
    "character",
    "run",
    "program",
    "see",
    "ython",
    "p",
    "removed",
    "okay",
    "similarly",
    "default",
    "value",
    "start",
    "index",
    "supply",
    "start",
    "index",
    "add",
    "end",
    "index",
    "like",
    "python",
    "interpreter",
    "assume",
    "0",
    "start",
    "index",
    "let",
    "run",
    "program",
    "go",
    "get",
    "pytho",
    "leave",
    "start",
    "end",
    "index",
    "well",
    "told",
    "case",
    "0",
    "assumed",
    "start",
    "index",
    "length",
    "string",
    "assume",
    "end",
    "index",
    "syntax",
    "basically",
    "copy",
    "clone",
    "string",
    "words",
    "define",
    "another",
    "variable",
    "let",
    "call",
    "another",
    "set",
    "course",
    "square",
    "brackets",
    "colon",
    "expression",
    "return",
    "characters",
    "course",
    "variable",
    "variable",
    "copy",
    "first",
    "variable",
    "let",
    "take",
    "look",
    "let",
    "print",
    "another",
    "load",
    "program",
    "go",
    "get",
    "python",
    "beginners",
    "square",
    "bracket",
    "syntax",
    "pretty",
    "important",
    "preparing",
    "online",
    "python",
    "tests",
    "college",
    "exams",
    "make",
    "sure",
    "watch",
    "tutorial",
    "little",
    "exercise",
    "going",
    "delete",
    "code",
    "define",
    "variable",
    "called",
    "name",
    "set",
    "jennifer",
    "print",
    "name",
    "1",
    "negative",
    "1",
    "think",
    "going",
    "see",
    "terminal",
    "want",
    "use",
    "knowledge",
    "tell",
    "going",
    "see",
    "terminal",
    "running",
    "program",
    "pause",
    "video",
    "think",
    "seconds",
    "come",
    "back",
    "continue",
    "watching",
    "expression",
    "return",
    "characters",
    "starting",
    "index",
    "1",
    "second",
    "character",
    "way",
    "first",
    "character",
    "end",
    "excluding",
    "character",
    "index",
    "case",
    "first",
    "character",
    "r",
    "r",
    "excluded",
    "words",
    "going",
    "see",
    "characters",
    "starting",
    "e",
    "way",
    "second",
    "let",
    "take",
    "look",
    "going",
    "run",
    "program",
    "go",
    "get",
    "hope",
    "guessed",
    "right",
    "tutorial",
    "going",
    "look",
    "formatted",
    "strings",
    "python",
    "programming",
    "language",
    "formatted",
    "strings",
    "particularly",
    "useful",
    "situations",
    "dynamically",
    "generate",
    "text",
    "variables",
    "let",
    "show",
    "let",
    "say",
    "two",
    "variables",
    "first",
    "name",
    "last",
    "name",
    "first",
    "set",
    "john",
    "last",
    "set",
    "smith",
    "better",
    "call",
    "variables",
    "first",
    "name",
    "last",
    "name",
    "descriptive",
    "using",
    "shorter",
    "names",
    "want",
    "see",
    "entire",
    "code",
    "display",
    "screen",
    "let",
    "say",
    "two",
    "variables",
    "want",
    "generate",
    "text",
    "like",
    "jon",
    "square",
    "brackets",
    "smith",
    "coder",
    "let",
    "say",
    "want",
    "print",
    "terminal",
    "well",
    "define",
    "another",
    "variable",
    "like",
    "message",
    "add",
    "first",
    "name",
    "need",
    "concatenate",
    "string",
    "contains",
    "space",
    "square",
    "bracket",
    "next",
    "need",
    "add",
    "last",
    "name",
    "need",
    "add",
    "string",
    "contains",
    "closing",
    "square",
    "brackets",
    "followed",
    "coder",
    "okay",
    "print",
    "message",
    "run",
    "program",
    "see",
    "john",
    "smith",
    "coder",
    "right",
    "approach",
    "perfectly",
    "works",
    "ideal",
    "text",
    "gets",
    "complicated",
    "becomes",
    "harder",
    "visualize",
    "output",
    "someone",
    "else",
    "reading",
    "code",
    "visualize",
    "string",
    "concatenations",
    "head",
    "use",
    "formatted",
    "strings",
    "make",
    "easier",
    "us",
    "visualize",
    "output",
    "going",
    "define",
    "another",
    "variable",
    "let",
    "say",
    "msg",
    "short",
    "message",
    "set",
    "formatted",
    "string",
    "formatted",
    "string",
    "one",
    "prefixed",
    "f",
    "quotes",
    "quotes",
    "first",
    "want",
    "add",
    "value",
    "first",
    "name",
    "variable",
    "add",
    "curly",
    "braces",
    "type",
    "first",
    "next",
    "add",
    "space",
    "add",
    "square",
    "brackets",
    "square",
    "brackets",
    "want",
    "display",
    "last",
    "name",
    "add",
    "curly",
    "braces",
    "type",
    "last",
    "finally",
    "type",
    "coder",
    "call",
    "formatted",
    "string",
    "curly",
    "braces",
    "defining",
    "place",
    "holders",
    "holes",
    "string",
    "run",
    "program",
    "holes",
    "filled",
    "value",
    "variables",
    "two",
    "place",
    "holders",
    "two",
    "holes",
    "string",
    "one",
    "value",
    "first",
    "name",
    "variable",
    "value",
    "last",
    "name",
    "variable",
    "compare",
    "formatted",
    "string",
    "string",
    "concatenation",
    "formatted",
    "string",
    "easily",
    "visualize",
    "output",
    "looks",
    "like",
    "right",
    "let",
    "print",
    "terminal",
    "make",
    "sure",
    "get",
    "exact",
    "output",
    "let",
    "print",
    "message",
    "go",
    "jon",
    "smith",
    "coder",
    "define",
    "formatted",
    "strings",
    "prefix",
    "strings",
    "f",
    "use",
    "curly",
    "braces",
    "dynamically",
    "insert",
    "values",
    "strings",
    "python",
    "tutorial",
    "going",
    "show",
    "really",
    "cool",
    "things",
    "python",
    "strings",
    "let",
    "start",
    "defining",
    "variable",
    "course",
    "set",
    "python",
    "beginners",
    "calculate",
    "number",
    "characters",
    "string",
    "use",
    "built",
    "function",
    "called",
    "len",
    "len",
    "give",
    "course",
    "variable",
    "print",
    "result",
    "let",
    "run",
    "program",
    "see",
    "20",
    "characters",
    "string",
    "particularly",
    "useful",
    "receive",
    "input",
    "user",
    "example",
    "noticed",
    "fill",
    "form",
    "online",
    "input",
    "field",
    "often",
    "limit",
    "example",
    "might",
    "50",
    "characters",
    "name",
    "using",
    "len",
    "function",
    "enforce",
    "limit",
    "number",
    "characters",
    "input",
    "field",
    "user",
    "types",
    "characters",
    "allow",
    "display",
    "error",
    "len",
    "function",
    "another",
    "function",
    "built",
    "python",
    "general",
    "purpose",
    "function",
    "limited",
    "counting",
    "number",
    "characters",
    "string",
    "future",
    "look",
    "lists",
    "want",
    "show",
    "use",
    "function",
    "count",
    "number",
    "items",
    "list",
    "general",
    "purpose",
    "function",
    "also",
    "functions",
    "specifically",
    "strings",
    "example",
    "functions",
    "converting",
    "characters",
    "upper",
    "case",
    "lower",
    "case",
    "access",
    "functions",
    "use",
    "dot",
    "operator",
    "let",
    "show",
    "first",
    "type",
    "course",
    "dot",
    "look",
    "functions",
    "specific",
    "strings",
    "accurate",
    "terms",
    "refer",
    "function",
    "methods",
    "term",
    "object",
    "oriented",
    "programming",
    "want",
    "look",
    "future",
    "want",
    "take",
    "away",
    "function",
    "belongs",
    "something",
    "else",
    "specific",
    "kind",
    "object",
    "refer",
    "function",
    "method",
    "example",
    "function",
    "upper",
    "converting",
    "string",
    "upper",
    "case",
    "accurately",
    "function",
    "specific",
    "string",
    "refer",
    "method",
    "contrast",
    "len",
    "print",
    "general",
    "purpose",
    "functions",
    "belong",
    "strings",
    "numbers",
    "kinds",
    "objects",
    "difference",
    "functions",
    "methods",
    "let",
    "take",
    "look",
    "upper",
    "method",
    "let",
    "print",
    "results",
    "run",
    "program",
    "go",
    "get",
    "characters",
    "displayed",
    "uppercase",
    "note",
    "method",
    "change",
    "modify",
    "original",
    "string",
    "fact",
    "creates",
    "new",
    "string",
    "returns",
    "print",
    "course",
    "variable",
    "right",
    "call",
    "upper",
    "method",
    "see",
    "course",
    "variable",
    "still",
    "original",
    "form",
    "let",
    "run",
    "program",
    "one",
    "time",
    "go",
    "look",
    "original",
    "course",
    "variable",
    "modified",
    "similar",
    "upper",
    "method",
    "another",
    "method",
    "converting",
    "string",
    "lower",
    "case",
    "let",
    "show",
    "print",
    "let",
    "run",
    "program",
    "second",
    "line",
    "see",
    "characters",
    "lower",
    "case",
    "times",
    "want",
    "find",
    "character",
    "sequence",
    "characters",
    "string",
    "situations",
    "use",
    "find",
    "method",
    "let",
    "delete",
    "lines",
    "call",
    "course",
    "find",
    "pass",
    "character",
    "let",
    "say",
    "p",
    "return",
    "index",
    "first",
    "occurrence",
    "character",
    "let",
    "show",
    "let",
    "print",
    "result",
    "get",
    "0",
    "index",
    "first",
    "capital",
    "p",
    "string",
    "another",
    "example",
    "pass",
    "lower",
    "case",
    "let",
    "see",
    "get",
    "get",
    "4",
    "index",
    "note",
    "find",
    "method",
    "case",
    "sensitive",
    "sensitive",
    "lower",
    "case",
    "upper",
    "case",
    "characters",
    "example",
    "pass",
    "upper",
    "case",
    "run",
    "program",
    "get",
    "negative",
    "1",
    "upper",
    "case",
    "anywhere",
    "string",
    "okay",
    "also",
    "pass",
    "sequence",
    "characters",
    "example",
    "pass",
    "beginners",
    "capital",
    "b",
    "let",
    "run",
    "program",
    "get",
    "11",
    "beginners",
    "starts",
    "index",
    "11",
    "also",
    "method",
    "replacing",
    "character",
    "sequence",
    "characters",
    "called",
    "replace",
    "let",
    "change",
    "find",
    "replace",
    "let",
    "say",
    "want",
    "replace",
    "beginners",
    "absolute",
    "beginners",
    "add",
    "comma",
    "pass",
    "second",
    "value",
    "function",
    "accurately",
    "method",
    "add",
    "string",
    "going",
    "pass",
    "absolute",
    "beginners",
    "okay",
    "let",
    "run",
    "program",
    "get",
    "python",
    "absolute",
    "beginners",
    "method",
    "like",
    "find",
    "method",
    "case",
    "sensitive",
    "pass",
    "beginners",
    "lowercase",
    "method",
    "going",
    "find",
    "exact",
    "word",
    "string",
    "going",
    "place",
    "absolute",
    "beginners",
    "let",
    "take",
    "look",
    "going",
    "run",
    "program",
    "one",
    "time",
    "look",
    "still",
    "get",
    "python",
    "beginners",
    "also",
    "replace",
    "single",
    "character",
    "example",
    "replace",
    "capital",
    "p",
    "let",
    "say",
    "capital",
    "run",
    "program",
    "get",
    "jython",
    "beginners",
    "find",
    "replace",
    "methods",
    "one",
    "last",
    "things",
    "want",
    "show",
    "tutorial",
    "times",
    "want",
    "check",
    "existence",
    "character",
    "sequence",
    "characters",
    "string",
    "situations",
    "use",
    "operator",
    "let",
    "say",
    "want",
    "know",
    "string",
    "contains",
    "word",
    "python",
    "write",
    "expression",
    "like",
    "string",
    "python",
    "space",
    "space",
    "course",
    "checking",
    "see",
    "python",
    "course",
    "variable",
    "expression",
    "produces",
    "boolean",
    "value",
    "get",
    "true",
    "false",
    "refer",
    "expression",
    "boolean",
    "expression",
    "print",
    "terminal",
    "get",
    "true",
    "way",
    "going",
    "delete",
    "second",
    "line",
    "need",
    "anymore",
    "run",
    "program",
    "get",
    "true",
    "change",
    "capitol",
    "p",
    "lower",
    "case",
    "p",
    "run",
    "program",
    "get",
    "false",
    "exact",
    "sequence",
    "characters",
    "strings",
    "note",
    "difference",
    "operator",
    "find",
    "method",
    "find",
    "method",
    "returns",
    "index",
    "character",
    "sequence",
    "characters",
    "operator",
    "produces",
    "boolean",
    "value",
    "difference",
    "let",
    "recap",
    "cool",
    "things",
    "learned",
    "strings",
    "tutorial",
    "use",
    "len",
    "function",
    "count",
    "number",
    "characters",
    "string",
    "general",
    "purpose",
    "function",
    "built",
    "python",
    "also",
    "specific",
    "functions",
    "strings",
    "refer",
    "methods",
    "include",
    "upper",
    "converting",
    "string",
    "uppercase",
    "also",
    "lower",
    "title",
    "methods",
    "learn",
    "find",
    "method",
    "returns",
    "index",
    "character",
    "sequence",
    "characters",
    "replace",
    "method",
    "replacing",
    "characters",
    "words",
    "string",
    "finally",
    "learned",
    "operator",
    "characters",
    "string",
    "learned",
    "python",
    "programming",
    "language",
    "2",
    "types",
    "numbers",
    "integers",
    "whole",
    "numbers",
    "like",
    "10",
    "decimal",
    "point",
    "floating",
    "point",
    "numbers",
    "floats",
    "numbers",
    "decimal",
    "point",
    "tutorial",
    "going",
    "look",
    "arithmetic",
    "operations",
    "supported",
    "python",
    "language",
    "arithmetic",
    "operations",
    "math",
    "add",
    "numbers",
    "multiply",
    "let",
    "look",
    "examples",
    "print",
    "10",
    "plus",
    "3",
    "addition",
    "operator",
    "also",
    "subtraction",
    "multiplication",
    "two",
    "kinds",
    "division",
    "one",
    "forward",
    "slash",
    "let",
    "run",
    "program",
    "see",
    "get",
    "get",
    "floating",
    "point",
    "number",
    "also",
    "another",
    "division",
    "operator",
    "getting",
    "integer",
    "add",
    "another",
    "slash",
    "run",
    "program",
    "get",
    "integer",
    "another",
    "operator",
    "called",
    "modulis",
    "percent",
    "sign",
    "returns",
    "remainder",
    "division",
    "run",
    "program",
    "get",
    "1",
    "go",
    "one",
    "last",
    "operator",
    "exponent",
    "power",
    "indicated",
    "2",
    "asterisks",
    "return",
    "10",
    "power",
    "let",
    "run",
    "program",
    "get",
    "1000",
    "arithmetic",
    "operators",
    "python",
    "programming",
    "language",
    "operators",
    "learned",
    "augmented",
    "assignment",
    "operator",
    "useful",
    "let",
    "show",
    "let",
    "say",
    "variable",
    "called",
    "x",
    "set",
    "10",
    "want",
    "increment",
    "3",
    "write",
    "code",
    "like",
    "x",
    "set",
    "x",
    "plus",
    "python",
    "interpreter",
    "add",
    "10",
    "3",
    "result",
    "13",
    "gets",
    "stored",
    "x",
    "print",
    "x",
    "see",
    "13",
    "go",
    "increment",
    "number",
    "right",
    "augmented",
    "assignment",
    "operator",
    "way",
    "write",
    "code",
    "shorter",
    "form",
    "works",
    "type",
    "x",
    "plus",
    "equals",
    "line",
    "3",
    "exactly",
    "like",
    "line",
    "call",
    "augmented",
    "assignment",
    "operator",
    "augmented",
    "enhanced",
    "assignment",
    "operator",
    "particular",
    "case",
    "incremented",
    "number",
    "using",
    "augmented",
    "assignment",
    "operator",
    "also",
    "subtract",
    "multiply",
    "number",
    "given",
    "value",
    "example",
    "let",
    "delete",
    "line",
    "2",
    "type",
    "subtract",
    "equals",
    "subtracted",
    "3",
    "run",
    "program",
    "see",
    "7",
    "go",
    "let",
    "ask",
    "question",
    "going",
    "clear",
    "code",
    "define",
    "x",
    "set",
    "10",
    "plus",
    "3",
    "times",
    "think",
    "result",
    "expression",
    "basic",
    "math",
    "question",
    "unfortunately",
    "lot",
    "people",
    "fail",
    "answer",
    "answer",
    "math",
    "concept",
    "called",
    "operator",
    "precedence",
    "means",
    "order",
    "operations",
    "multiplication",
    "operator",
    "higher",
    "precendence",
    "means",
    "applied",
    "first",
    "means",
    "3",
    "x",
    "2",
    "executed",
    "first",
    "result",
    "6",
    "added",
    "10",
    "x",
    "showed",
    "16",
    "run",
    "code",
    "let",
    "verify",
    "print",
    "x",
    "run",
    "program",
    "x",
    "call",
    "operator",
    "precedence",
    "basic",
    "math",
    "concept",
    "python",
    "programming",
    "language",
    "programming",
    "languages",
    "behave",
    "way",
    "order",
    "first",
    "exponentiation",
    "power",
    "like",
    "2",
    "power",
    "3",
    "multiplication",
    "division",
    "finally",
    "addition",
    "subtraction",
    "order",
    "operations",
    "let",
    "show",
    "another",
    "example",
    "going",
    "add",
    "exponentiation",
    "operator",
    "2",
    "power",
    "think",
    "result",
    "expression",
    "pause",
    "video",
    "think",
    "seconds",
    "answer",
    "exponentiation",
    "operator",
    "takes",
    "precedence",
    "first",
    "2",
    "power",
    "2",
    "executed",
    "result",
    "4",
    "4",
    "multiplied",
    "3",
    "12",
    "finally",
    "12",
    "added",
    "x",
    "let",
    "run",
    "program",
    "verify",
    "going",
    "delete",
    "lines",
    "run",
    "program",
    "go",
    "x",
    "let",
    "bring",
    "back",
    "rules",
    "also",
    "use",
    "parenthesis",
    "change",
    "order",
    "operations",
    "parenthesis",
    "always",
    "takes",
    "priority",
    "case",
    "add",
    "parenthesis",
    "around",
    "10",
    "3",
    "piece",
    "3",
    "executed",
    "first",
    "result",
    "13",
    "exponentiation",
    "operator",
    "executed",
    "2",
    "power",
    "2",
    "4",
    "finally",
    "4",
    "multiplied",
    "little",
    "exercise",
    "going",
    "set",
    "x",
    "parenthesis",
    "2",
    "3",
    "x",
    "10",
    "minus",
    "result",
    "pause",
    "video",
    "think",
    "seconds",
    "learned",
    "parenthesis",
    "always",
    "overrides",
    "order",
    "piece",
    "code",
    "executed",
    "first",
    "result",
    "multiplication",
    "subtraction",
    "know",
    "multiplication",
    "takes",
    "precedence",
    "next",
    "5",
    "multiplied",
    "10",
    "result",
    "50",
    "finally",
    "subtraction",
    "50",
    "minus",
    "3",
    "let",
    "verify",
    "print",
    "x",
    "run",
    "program",
    "go",
    "hope",
    "guessed",
    "right",
    "bout",
    "operator",
    "precedence",
    "important",
    "topic",
    "see",
    "quite",
    "often",
    "python",
    "tests",
    "preparing",
    "python",
    "test",
    "make",
    "sure",
    "watch",
    "tutorial",
    "one",
    "time",
    "tutorial",
    "going",
    "look",
    "useful",
    "functions",
    "working",
    "numbers",
    "let",
    "start",
    "defining",
    "variable",
    "like",
    "x",
    "set",
    "2",
    "round",
    "number",
    "use",
    "built",
    "round",
    "function",
    "call",
    "round",
    "function",
    "give",
    "x",
    "print",
    "result",
    "let",
    "run",
    "program",
    "get",
    "3",
    "another",
    "useful",
    "built",
    "function",
    "called",
    "abs",
    "short",
    "absolute",
    "absolute",
    "function",
    "math",
    "give",
    "value",
    "always",
    "returns",
    "positive",
    "representation",
    "value",
    "even",
    "value",
    "negative",
    "example",
    "let",
    "call",
    "abs",
    "function",
    "give",
    "negative",
    "run",
    "program",
    "gong",
    "see",
    "terminal",
    "let",
    "go",
    "ahead",
    "go",
    "absolute",
    "always",
    "returns",
    "positive",
    "number",
    "technically",
    "python",
    "handful",
    "built",
    "functions",
    "performing",
    "mathematical",
    "operations",
    "want",
    "write",
    "program",
    "involves",
    "complex",
    "mathematical",
    "calculations",
    "need",
    "import",
    "math",
    "module",
    "module",
    "python",
    "separate",
    "file",
    "reusable",
    "code",
    "use",
    "modules",
    "organize",
    "code",
    "different",
    "files",
    "metaphor",
    "think",
    "super",
    "market",
    "go",
    "super",
    "market",
    "see",
    "different",
    "sections",
    "fruits",
    "vegetables",
    "cleaning",
    "products",
    "junk",
    "food",
    "section",
    "super",
    "market",
    "like",
    "module",
    "python",
    "python",
    "math",
    "module",
    "contains",
    "bunch",
    "rustable",
    "functions",
    "performing",
    "mathematical",
    "calculations",
    "let",
    "show",
    "use",
    "module",
    "top",
    "type",
    "import",
    "math",
    "lowercase",
    "import",
    "math",
    "module",
    "math",
    "object",
    "like",
    "string",
    "access",
    "functions",
    "accurately",
    "methods",
    "using",
    "dot",
    "operator",
    "type",
    "math",
    "look",
    "mathematical",
    "functions",
    "available",
    "module",
    "example",
    "call",
    "seal",
    "method",
    "get",
    "sealing",
    "number",
    "pass",
    "print",
    "result",
    "see",
    "let",
    "delete",
    "code",
    "alright",
    "let",
    "run",
    "program",
    "go",
    "get",
    "another",
    "useful",
    "method",
    "floor",
    "method",
    "let",
    "give",
    "try",
    "floor",
    "2",
    "think",
    "going",
    "get",
    "get",
    "many",
    "functions",
    "built",
    "module",
    "really",
    "time",
    "go",
    "let",
    "show",
    "learn",
    "open",
    "browser",
    "search",
    "python",
    "3",
    "math",
    "module",
    "make",
    "sure",
    "add",
    "version",
    "python",
    "math",
    "module",
    "python",
    "2",
    "slightly",
    "different",
    "math",
    "module",
    "python",
    "python",
    "3",
    "math",
    "module",
    "see",
    "documentation",
    "kind",
    "module",
    "let",
    "go",
    "let",
    "look",
    "scroll",
    "see",
    "list",
    "functions",
    "explanation",
    "exercise",
    "encourage",
    "quick",
    "look",
    "documentation",
    "see",
    "functions",
    "case",
    "need",
    "tutorial",
    "going",
    "talk",
    "statements",
    "python",
    "statements",
    "extremely",
    "important",
    "programming",
    "allow",
    "us",
    "build",
    "programs",
    "make",
    "decisions",
    "based",
    "condition",
    "conditions",
    "true",
    "going",
    "certain",
    "things",
    "otherwise",
    "going",
    "things",
    "example",
    "got",
    "text",
    "file",
    "bunch",
    "rules",
    "program",
    "hot",
    "day",
    "perhaps",
    "want",
    "tell",
    "user",
    "hot",
    "day",
    "make",
    "sure",
    "drink",
    "plenty",
    "water",
    "otherwise",
    "cold",
    "another",
    "condition",
    "condition",
    "true",
    "going",
    "tell",
    "user",
    "cold",
    "day",
    "warm",
    "clothes",
    "otherwise",
    "either",
    "hot",
    "cold",
    "want",
    "tell",
    "user",
    "lovely",
    "day",
    "let",
    "show",
    "write",
    "program",
    "simulates",
    "rules",
    "back",
    "program",
    "start",
    "defining",
    "boolean",
    "variable",
    "underline",
    "hot",
    "set",
    "true",
    "next",
    "add",
    "statement",
    "need",
    "add",
    "condition",
    "case",
    "going",
    "use",
    "boolean",
    "variable",
    "underline",
    "hot",
    "values",
    "true",
    "going",
    "certain",
    "things",
    "case",
    "want",
    "tell",
    "user",
    "hey",
    "hot",
    "day",
    "drink",
    "plenty",
    "water",
    "back",
    "program",
    "condition",
    "add",
    "colon",
    "note",
    "press",
    "enter",
    "pycharm",
    "automatically",
    "indents",
    "cursor",
    "code",
    "write",
    "executed",
    "condition",
    "true",
    "otherwise",
    "ignored",
    "example",
    "let",
    "write",
    "print",
    "statement",
    "going",
    "use",
    "double",
    "quotes",
    "want",
    "use",
    "apostrophe",
    "string",
    "hot",
    "day",
    "let",
    "press",
    "enter",
    "see",
    "cursor",
    "still",
    "indented",
    "means",
    "write",
    "code",
    "executed",
    "condition",
    "true",
    "case",
    "let",
    "say",
    "want",
    "write",
    "extra",
    "code",
    "terminate",
    "block",
    "need",
    "press",
    "shift",
    "tab",
    "cursor",
    "beginning",
    "line",
    "lets",
    "write",
    "print",
    "statement",
    "message",
    "like",
    "enjoy",
    "day",
    "run",
    "program",
    "condition",
    "true",
    "say",
    "message",
    "followed",
    "second",
    "message",
    "take",
    "look",
    "run",
    "go",
    "hot",
    "day",
    "enjoy",
    "day",
    "go",
    "change",
    "boolean",
    "value",
    "false",
    "run",
    "program",
    "first",
    "message",
    "disappears",
    "see",
    "second",
    "message",
    "enjoy",
    "day",
    "statements",
    "work",
    "back",
    "add",
    "another",
    "print",
    "statement",
    "let",
    "say",
    "drink",
    "plenty",
    "water",
    "spirant",
    "statement",
    "also",
    "indented",
    "executed",
    "condition",
    "true",
    "going",
    "revert",
    "hot",
    "true",
    "run",
    "program",
    "one",
    "time",
    "go",
    "hot",
    "day",
    "drink",
    "plenty",
    "water",
    "enjoy",
    "day",
    "alright",
    "let",
    "add",
    "second",
    "rule",
    "hot",
    "going",
    "execute",
    "two",
    "lines",
    "otherwise",
    "hot",
    "want",
    "print",
    "different",
    "message",
    "moving",
    "indentation",
    "typing",
    "els",
    "colon",
    "press",
    "enter",
    "cursor",
    "indented",
    "code",
    "write",
    "executed",
    "condition",
    "true",
    "print",
    "cold",
    "day",
    "print",
    "warm",
    "clothes",
    "let",
    "run",
    "program",
    "one",
    "time",
    "get",
    "message",
    "hot",
    "day",
    "followed",
    "enjoy",
    "day",
    "see",
    "message",
    "cold",
    "day",
    "go",
    "back",
    "top",
    "change",
    "boolean",
    "value",
    "false",
    "run",
    "program",
    "see",
    "different",
    "set",
    "messages",
    "cold",
    "day",
    "wear",
    "warm",
    "clothes",
    "enjoy",
    "day",
    "problem",
    "program",
    "hot",
    "necessarily",
    "mean",
    "cold",
    "means",
    "lovely",
    "day",
    "absence",
    "heat",
    "mean",
    "cold",
    "back",
    "conditions",
    "line",
    "4",
    "rule",
    "says",
    "cold",
    "day",
    "print",
    "messages",
    "otherwise",
    "neither",
    "hot",
    "cold",
    "say",
    "lovely",
    "day",
    "implement",
    "rule",
    "need",
    "go",
    "back",
    "put",
    "py",
    "define",
    "another",
    "variable",
    "let",
    "say",
    "underline",
    "cold",
    "set",
    "true",
    "need",
    "add",
    "second",
    "condition",
    "first",
    "statement",
    "use",
    "el",
    "statement",
    "define",
    "second",
    "condition",
    "works",
    "el",
    "short",
    "els",
    "otherwise",
    "add",
    "another",
    "condition",
    "cold",
    "cold",
    "want",
    "execute",
    "lines",
    "let",
    "cut",
    "move",
    "second",
    "condition",
    "finally",
    "none",
    "conditions",
    "true",
    "want",
    "print",
    "different",
    "message",
    "lovely",
    "day",
    "right",
    "hot",
    "false",
    "cold",
    "true",
    "run",
    "program",
    "python",
    "interpreter",
    "going",
    "execute",
    "first",
    "statement",
    "case",
    "condition",
    "false",
    "two",
    "lines",
    "ignored",
    "python",
    "interpreter",
    "look",
    "line",
    "7",
    "evaluate",
    "condition",
    "case",
    "cold",
    "true",
    "going",
    "see",
    "two",
    "messages",
    "terminal",
    "case",
    "one",
    "conditions",
    "true",
    "els",
    "statement",
    "ignored",
    "going",
    "see",
    "message",
    "finally",
    "always",
    "going",
    "see",
    "message",
    "let",
    "run",
    "program",
    "go",
    "cold",
    "day",
    "warm",
    "clothes",
    "enjoy",
    "day",
    "back",
    "top",
    "change",
    "cold",
    "false",
    "neither",
    "hot",
    "cold",
    "going",
    "lovely",
    "day",
    "let",
    "run",
    "program",
    "go",
    "lovely",
    "day",
    "enjoy",
    "day",
    "basics",
    "using",
    "statements",
    "see",
    "useful",
    "programming",
    "build",
    "kinds",
    "rules",
    "programs",
    "okay",
    "exercise",
    "imagine",
    "price",
    "house",
    "1",
    "million",
    "dollars",
    "buyer",
    "good",
    "credit",
    "need",
    "put",
    "10",
    "percent",
    "price",
    "property",
    "otherwise",
    "need",
    "put",
    "20",
    "percent",
    "write",
    "program",
    "rules",
    "display",
    "payment",
    "card",
    "buyer",
    "good",
    "credit",
    "see",
    "solution",
    "next",
    "alright",
    "let",
    "define",
    "variable",
    "price",
    "house",
    "price",
    "set",
    "1",
    "million",
    "1",
    "6",
    "0s",
    "next",
    "need",
    "variable",
    "tell",
    "buyer",
    "good",
    "credit",
    "good",
    "credit",
    "set",
    "true",
    "need",
    "statement",
    "good",
    "credit",
    "true",
    "colon",
    "need",
    "calculate",
    "payment",
    "equal",
    "x",
    "price",
    "10",
    "percent",
    "price",
    "property",
    "otherwise",
    "colon",
    "payment",
    "times",
    "price",
    "finally",
    "remove",
    "indentation",
    "print",
    "use",
    "form",
    "valid",
    "string",
    "first",
    "add",
    "label",
    "payment",
    "colon",
    "right",
    "add",
    "placeholder",
    "hole",
    "payment",
    "variable",
    "curly",
    "braces",
    "payment",
    "let",
    "run",
    "program",
    "payment",
    "buyer",
    "good",
    "credit",
    "dollars",
    "let",
    "improve",
    "adding",
    "dollar",
    "sign",
    "number",
    "back",
    "formatted",
    "string",
    "curly",
    "brace",
    "going",
    "add",
    "dollar",
    "sign",
    "let",
    "run",
    "one",
    "time",
    "better",
    "tutorial",
    "going",
    "talk",
    "logical",
    "operators",
    "within",
    "python",
    "use",
    "operators",
    "situations",
    "multiple",
    "conditions",
    "example",
    "let",
    "say",
    "building",
    "application",
    "processing",
    "loans",
    "applicant",
    "high",
    "income",
    "good",
    "credit",
    "eligible",
    "loan",
    "example",
    "two",
    "conditions",
    "one",
    "high",
    "income",
    "good",
    "credit",
    "conditions",
    "true",
    "applicant",
    "eligible",
    "loan",
    "use",
    "logical",
    "operator",
    "use",
    "operator",
    "combine",
    "two",
    "conditions",
    "way",
    "specific",
    "python",
    "programming",
    "language",
    "pretty",
    "much",
    "programming",
    "language",
    "supports",
    "statements",
    "also",
    "supports",
    "logical",
    "operators",
    "back",
    "program",
    "let",
    "define",
    "two",
    "variables",
    "high",
    "income",
    "set",
    "true",
    "another",
    "one",
    "good",
    "credit",
    "also",
    "set",
    "true",
    "statement",
    "high",
    "income",
    "true",
    "good",
    "credit",
    "also",
    "true",
    "going",
    "print",
    "eligible",
    "null",
    "using",
    "operator",
    "conditions",
    "true",
    "message",
    "printed",
    "one",
    "false",
    "going",
    "see",
    "message",
    "let",
    "try",
    "going",
    "run",
    "program",
    "see",
    "eligible",
    "loan",
    "change",
    "either",
    "conditions",
    "false",
    "run",
    "program",
    "look",
    "message",
    "disappears",
    "logical",
    "operator",
    "also",
    "logical",
    "want",
    "use",
    "situations",
    "want",
    "certain",
    "things",
    "least",
    "one",
    "conditions",
    "true",
    "example",
    "let",
    "change",
    "rule",
    "program",
    "applicant",
    "high",
    "income",
    "good",
    "credit",
    "eligible",
    "loan",
    "either",
    "conditions",
    "true",
    "candidate",
    "eligible",
    "back",
    "program",
    "implement",
    "rule",
    "using",
    "logical",
    "operator",
    "simply",
    "replace",
    "run",
    "program",
    "going",
    "see",
    "message",
    "least",
    "one",
    "conditions",
    "true",
    "let",
    "take",
    "look",
    "applicant",
    "eligible",
    "loan",
    "loan",
    "good",
    "credit",
    "change",
    "false",
    "set",
    "condition",
    "true",
    "still",
    "see",
    "result",
    "conditions",
    "false",
    "going",
    "see",
    "message",
    "anymore",
    "difference",
    "operators",
    "logical",
    "operator",
    "conditions",
    "true",
    "logical",
    "operator",
    "least",
    "one",
    "condition",
    "true",
    "also",
    "another",
    "logical",
    "operator",
    "called",
    "basically",
    "inverses",
    "boolean",
    "value",
    "give",
    "give",
    "give",
    "true",
    "boolean",
    "value",
    "converts",
    "false",
    "example",
    "let",
    "make",
    "new",
    "room",
    "applicant",
    "good",
    "credit",
    "criminal",
    "record",
    "eligible",
    "loan",
    "let",
    "show",
    "implement",
    "go",
    "back",
    "program",
    "example",
    "need",
    "first",
    "variable",
    "let",
    "delete",
    "let",
    "set",
    "variable",
    "true",
    "also",
    "define",
    "another",
    "variable",
    "like",
    "criminal",
    "record",
    "set",
    "false",
    "want",
    "check",
    "see",
    "applicant",
    "good",
    "credit",
    "criminal",
    "record",
    "use",
    "operator",
    "good",
    "credit",
    "criminal",
    "record",
    "example",
    "criminal",
    "record",
    "set",
    "false",
    "use",
    "operator",
    "basically",
    "gets",
    "changed",
    "true",
    "two",
    "conditions",
    "true",
    "ones",
    "another",
    "one",
    "applicant",
    "eligible",
    "loan",
    "run",
    "program",
    "see",
    "familiar",
    "message",
    "however",
    "applicant",
    "criminal",
    "record",
    "let",
    "change",
    "true",
    "run",
    "program",
    "see",
    "applicant",
    "eligible",
    "apply",
    "operator",
    "variable",
    "get",
    "false",
    "true",
    "changes",
    "false",
    "end",
    "two",
    "conditions",
    "one",
    "true",
    "false",
    "message",
    "printed",
    "logical",
    "operators",
    "python",
    "tutorial",
    "going",
    "talk",
    "guys",
    "comparison",
    "operators",
    "python",
    "use",
    "comparison",
    "operators",
    "situations",
    "want",
    "compare",
    "variable",
    "value",
    "example",
    "temperature",
    "greater",
    "30",
    "want",
    "print",
    "hot",
    "day",
    "otherwise",
    "less",
    "10",
    "cold",
    "day",
    "otherwise",
    "neither",
    "hot",
    "cold",
    "way",
    "taking",
    "celsius",
    "farenheit",
    "build",
    "rules",
    "program",
    "need",
    "use",
    "comparison",
    "operators",
    "back",
    "define",
    "temperature",
    "value",
    "let",
    "write",
    "statement",
    "temperature",
    "want",
    "check",
    "see",
    "greater",
    "30",
    "use",
    "greater",
    "operator",
    "greater",
    "30",
    "want",
    "print",
    "hot",
    "day",
    "otherwise",
    "let",
    "print",
    "hot",
    "day",
    "run",
    "program",
    "going",
    "see",
    "second",
    "message",
    "30",
    "greater",
    "first",
    "condition",
    "value",
    "false",
    "let",
    "verify",
    "run",
    "hot",
    "day",
    "change",
    "temperature",
    "35",
    "run",
    "going",
    "see",
    "different",
    "message",
    "hot",
    "day",
    "use",
    "comparison",
    "operators",
    "know",
    "expression",
    "piece",
    "code",
    "produces",
    "value",
    "accurately",
    "boolean",
    "expression",
    "greater",
    "operator",
    "also",
    "greater",
    "equal",
    "less",
    "less",
    "equal",
    "equality",
    "operator",
    "temperature",
    "equals",
    "30",
    "say",
    "hot",
    "day",
    "note",
    "different",
    "assignment",
    "operator",
    "one",
    "equals",
    "sign",
    "see",
    "use",
    "one",
    "equal",
    "sign",
    "immediately",
    "get",
    "red",
    "underline",
    "simply",
    "assignment",
    "statement",
    "changing",
    "value",
    "temperature",
    "setting",
    "value",
    "something",
    "else",
    "boolean",
    "expression",
    "producing",
    "boolean",
    "value",
    "okay",
    "equality",
    "operator",
    "two",
    "equal",
    "signs",
    "finally",
    "equal",
    "exclamation",
    "followed",
    "equal",
    "sign",
    "exercise",
    "probably",
    "seen",
    "fill",
    "form",
    "online",
    "sometimes",
    "input",
    "fields",
    "validation",
    "messages",
    "example",
    "let",
    "say",
    "input",
    "field",
    "user",
    "enter",
    "name",
    "name",
    "less",
    "3",
    "characters",
    "wrong",
    "want",
    "display",
    "validation",
    "error",
    "like",
    "name",
    "must",
    "least",
    "three",
    "characters",
    "otherwise",
    "name",
    "50",
    "characters",
    "long",
    "want",
    "display",
    "different",
    "validation",
    "error",
    "like",
    "name",
    "maximum",
    "50",
    "characters",
    "otherwise",
    "name",
    "3",
    "50",
    "characters",
    "want",
    "tell",
    "user",
    "name",
    "looks",
    "good",
    "go",
    "ahead",
    "write",
    "plan",
    "implement",
    "rules",
    "alright",
    "let",
    "define",
    "variable",
    "called",
    "name",
    "set",
    "let",
    "say",
    "assuming",
    "user",
    "types",
    "input",
    "field",
    "want",
    "get",
    "number",
    "characters",
    "string",
    "use",
    "len",
    "function",
    "right",
    "len",
    "name",
    "print",
    "get",
    "1",
    "right",
    "seen",
    "want",
    "use",
    "statement",
    "len",
    "name",
    "less",
    "3",
    "want",
    "print",
    "name",
    "must",
    "least",
    "3",
    "characters",
    "need",
    "second",
    "condition",
    "check",
    "upper",
    "limit",
    "el",
    "len",
    "name",
    "greater",
    "50",
    "want",
    "print",
    "different",
    "message",
    "name",
    "must",
    "maximum",
    "50",
    "characters",
    "okay",
    "otherwise",
    "else",
    "none",
    "conditions",
    "true",
    "means",
    "name",
    "looks",
    "good",
    "print",
    "name",
    "looks",
    "good",
    "let",
    "run",
    "program",
    "case",
    "get",
    "message",
    "name",
    "short",
    "go",
    "back",
    "type",
    "something",
    "really",
    "really",
    "long",
    "run",
    "program",
    "going",
    "see",
    "different",
    "message",
    "name",
    "must",
    "maximum",
    "50",
    "characters",
    "finally",
    "type",
    "proper",
    "name",
    "like",
    "john",
    "smith",
    "run",
    "program",
    "get",
    "name",
    "looks",
    "good",
    "another",
    "good",
    "exercise",
    "combines",
    "many",
    "materials",
    "learned",
    "far",
    "earlier",
    "built",
    "program",
    "convert",
    "someone",
    "weight",
    "pounds",
    "kilograms",
    "want",
    "extend",
    "program",
    "allow",
    "user",
    "enter",
    "weight",
    "either",
    "kilograms",
    "pounds",
    "convert",
    "unit",
    "program",
    "going",
    "work",
    "enter",
    "weight",
    "pounds",
    "100",
    "60",
    "telling",
    "pounds",
    "kilograms",
    "adding",
    "l",
    "lbs",
    "k",
    "kilograms",
    "way",
    "program",
    "case",
    "sensitive",
    "enter",
    "capital",
    "l",
    "lowercase",
    "l",
    "takes",
    "pounds",
    "tells",
    "ur",
    "set",
    "kilos",
    "let",
    "run",
    "program",
    "one",
    "time",
    "time",
    "going",
    "enter",
    "weight",
    "kilo",
    "send",
    "weight",
    "unit",
    "kilograms",
    "k",
    "says",
    "160",
    "pounds",
    "go",
    "ahead",
    "spend",
    "minutes",
    "exercise",
    "see",
    "solution",
    "next",
    "alright",
    "first",
    "let",
    "ask",
    "user",
    "weight",
    "use",
    "input",
    "function",
    "weight",
    "colon",
    "get",
    "return",
    "value",
    "store",
    "variable",
    "called",
    "weight",
    "second",
    "question",
    "one",
    "time",
    "use",
    "input",
    "function",
    "el",
    "pounds",
    "k",
    "kilograms",
    "let",
    "get",
    "store",
    "variable",
    "called",
    "unit",
    "need",
    "statement",
    "unit",
    "equals",
    "l",
    "need",
    "convert",
    "weight",
    "kilograms",
    "however",
    "implementation",
    "allowing",
    "user",
    "enter",
    "capitol",
    "l",
    "enter",
    "lowercase",
    "l",
    "code",
    "going",
    "work",
    "use",
    "upper",
    "method",
    "string",
    "objects",
    "unit",
    "string",
    "told",
    "input",
    "function",
    "always",
    "returns",
    "string",
    "use",
    "dot",
    "operator",
    "access",
    "methods",
    "functions",
    "call",
    "upper",
    "method",
    "convert",
    "whatever",
    "user",
    "enters",
    "upper",
    "case",
    "convert",
    "capital",
    "condition",
    "true",
    "need",
    "get",
    "weight",
    "multiply",
    "0",
    "however",
    "know",
    "weight",
    "string",
    "object",
    "multiply",
    "string",
    "floating",
    "point",
    "number",
    "talked",
    "earlier",
    "course",
    "first",
    "need",
    "convert",
    "weight",
    "numerical",
    "value",
    "right",
    "call",
    "input",
    "function",
    "get",
    "return",
    "value",
    "pass",
    "int",
    "function",
    "call",
    "int",
    "function",
    "give",
    "return",
    "value",
    "input",
    "function",
    "function",
    "return",
    "integer",
    "store",
    "weight",
    "variable",
    "converted",
    "weight",
    "let",
    "store",
    "variable",
    "called",
    "converted",
    "print",
    "use",
    "formatted",
    "string",
    "prefix",
    "string",
    "f",
    "ur",
    "add",
    "curly",
    "braces",
    "dynamically",
    "insert",
    "value",
    "converted",
    "variable",
    "finally",
    "add",
    "kilo",
    "otherwise",
    "unit",
    "kilograms",
    "need",
    "divide",
    "weight",
    "q",
    "weight",
    "divided",
    "refresh",
    "memory",
    "division",
    "operator",
    "returns",
    "floating",
    "point",
    "number",
    "use",
    "double",
    "slashes",
    "get",
    "integer",
    "case",
    "want",
    "get",
    "floating",
    "point",
    "number",
    "finally",
    "let",
    "print",
    "formatted",
    "string",
    "ur",
    "curly",
    "braces",
    "converted",
    "pounds",
    "okay",
    "let",
    "run",
    "program",
    "see",
    "happens",
    "weight",
    "160",
    "lbs",
    "equals",
    "72",
    "kilos",
    "perfect",
    "run",
    "one",
    "time",
    "enter",
    "72",
    "kilos",
    "get",
    "160",
    "pounds",
    "tutorial",
    "going",
    "show",
    "use",
    "loops",
    "python",
    "use",
    "loops",
    "execute",
    "block",
    "code",
    "multiple",
    "times",
    "often",
    "useful",
    "building",
    "interactive",
    "programs",
    "games",
    "future",
    "tutorial",
    "going",
    "show",
    "build",
    "simple",
    "game",
    "using",
    "loop",
    "let",
    "get",
    "started",
    "basics",
    "write",
    "statement",
    "right",
    "type",
    "condition",
    "followed",
    "colon",
    "long",
    "condition",
    "true",
    "quote",
    "write",
    "block",
    "repeatedly",
    "executed",
    "example",
    "define",
    "variable",
    "like",
    "short",
    "index",
    "set",
    "set",
    "condition",
    "less",
    "equal",
    "5",
    "long",
    "less",
    "equal",
    "5",
    "print",
    "terminal",
    "need",
    "increment",
    "set",
    "plus",
    "reason",
    "1",
    "forever",
    "end",
    "infinite",
    "loop",
    "condition",
    "always",
    "true",
    "one",
    "always",
    "less",
    "5",
    "every",
    "iteration",
    "loop",
    "increment",
    "1",
    "point",
    "gon",
    "na",
    "six",
    "condition",
    "false",
    "jump",
    "loop",
    "okay",
    "demonstrate",
    "everything",
    "works",
    "loop",
    "going",
    "add",
    "print",
    "statement",
    "say",
    "done",
    "note",
    "two",
    "lines",
    "indented",
    "part",
    "block",
    "okay",
    "let",
    "go",
    "ahead",
    "run",
    "program",
    "see",
    "happens",
    "take",
    "look",
    "get",
    "numbers",
    "followed",
    "done",
    "heres",
    "program",
    "gets",
    "executed",
    "first",
    "set",
    "1",
    "python",
    "interpreter",
    "executes",
    "line",
    "2",
    "condition",
    "true",
    "less",
    "5",
    "printed",
    "terminal",
    "incremented",
    "control",
    "moves",
    "back",
    "beginning",
    "loop",
    "go",
    "next",
    "statement",
    "come",
    "back",
    "second",
    "iteration",
    "second",
    "iteration",
    "2",
    "2",
    "less",
    "5",
    "condition",
    "still",
    "true",
    "printed",
    "terminal",
    "incremented",
    "1",
    "point",
    "going",
    "6",
    "condition",
    "false",
    "look",
    "terminated",
    "done",
    "message",
    "printed",
    "terminal",
    "basics",
    "loops",
    "let",
    "make",
    "program",
    "little",
    "bit",
    "interesting",
    "write",
    "expression",
    "like",
    "add",
    "string",
    "string",
    "add",
    "asterisk",
    "multiply",
    "string",
    "expression",
    "repeat",
    "string",
    "multiply",
    "string",
    "number",
    "string",
    "repeated",
    "example",
    "two",
    "expression",
    "produce",
    "string",
    "two",
    "asterisks",
    "let",
    "run",
    "program",
    "see",
    "get",
    "see",
    "little",
    "triangle",
    "shape",
    "first",
    "iteration",
    "1",
    "1",
    "times",
    "asterisk",
    "produces",
    "1",
    "asterisk",
    "second",
    "iteration",
    "2",
    "multiply",
    "2",
    "1",
    "asterisks",
    "get",
    "2",
    "asterisks",
    "tutorial",
    "going",
    "show",
    "use",
    "loop",
    "build",
    "guessing",
    "game",
    "like",
    "secret",
    "number",
    "currently",
    "set",
    "computer",
    "asking",
    "make",
    "guess",
    "let",
    "say",
    "1",
    "right",
    "secret",
    "number",
    "9",
    "okay",
    "try",
    "2",
    "right",
    "let",
    "try",
    "three",
    "chances",
    "make",
    "guess",
    "ca",
    "guess",
    "number",
    "program",
    "tells",
    "failed",
    "let",
    "run",
    "program",
    "one",
    "time",
    "time",
    "going",
    "guess",
    "number",
    "9",
    "go",
    "says",
    "let",
    "go",
    "ahead",
    "build",
    "program",
    "using",
    "loop",
    "alright",
    "let",
    "start",
    "defining",
    "variable",
    "store",
    "secret",
    "number",
    "call",
    "secret",
    "underline",
    "number",
    "set",
    "need",
    "loop",
    "repeatedly",
    "ask",
    "user",
    "make",
    "guess",
    "condition",
    "colon",
    "condition",
    "well",
    "want",
    "give",
    "user",
    "maximum",
    "three",
    "guesses",
    "similar",
    "last",
    "tutorial",
    "define",
    "variable",
    "like",
    "set",
    "0",
    "assume",
    "represents",
    "number",
    "guesses",
    "user",
    "made",
    "write",
    "condition",
    "less",
    "note",
    "using",
    "less",
    "equal",
    "operator",
    "condition",
    "loop",
    "executed",
    "4",
    "times",
    "0",
    "one",
    "two",
    "three",
    "use",
    "less",
    "operator",
    "give",
    "code",
    "someone",
    "else",
    "unclear",
    "represent",
    "head",
    "represents",
    "number",
    "guesses",
    "user",
    "made",
    "best",
    "practice",
    "always",
    "use",
    "meaningful",
    "descriptive",
    "names",
    "variables",
    "better",
    "rename",
    "variable",
    "guess",
    "count",
    "let",
    "show",
    "rename",
    "right",
    "click",
    "variable",
    "go",
    "refactor",
    "rename",
    "look",
    "shortcut",
    "mac",
    "computer",
    "shift",
    "f",
    "dialogue",
    "box",
    "easily",
    "rename",
    "variable",
    "pycharm",
    "update",
    "references",
    "variable",
    "manually",
    "update",
    "instance",
    "okay",
    "let",
    "change",
    "enter",
    "go",
    "better",
    "also",
    "better",
    "store",
    "3",
    "separate",
    "variable",
    "make",
    "code",
    "readable",
    "quite",
    "clear",
    "3",
    "represent",
    "let",
    "define",
    "variable",
    "called",
    "guess",
    "limit",
    "say",
    "3",
    "change",
    "3",
    "guess",
    "underline",
    "limit",
    "code",
    "readable",
    "guess",
    "count",
    "less",
    "guess",
    "limit",
    "see",
    "reads",
    "like",
    "story",
    "write",
    "code",
    "okay",
    "condition",
    "true",
    "want",
    "toast",
    "user",
    "make",
    "guess",
    "use",
    "input",
    "function",
    "guess",
    "whatever",
    "user",
    "enters",
    "comes",
    "string",
    "need",
    "convert",
    "integer",
    "right",
    "pass",
    "result",
    "end",
    "function",
    "get",
    "store",
    "separate",
    "variable",
    "called",
    "guess",
    "point",
    "user",
    "made",
    "guess",
    "need",
    "increment",
    "guess",
    "count",
    "guess",
    "count",
    "set",
    "plus",
    "equal",
    "1",
    "okay",
    "need",
    "check",
    "see",
    "user",
    "make",
    "right",
    "guess",
    "need",
    "statement",
    "user",
    "guessed",
    "equals",
    "secret",
    "number",
    "see",
    "code",
    "readable",
    "like",
    "story",
    "read",
    "like",
    "plain",
    "english",
    "condition",
    "true",
    "want",
    "tell",
    "user",
    "print",
    "lets",
    "go",
    "ahead",
    "run",
    "program",
    "point",
    "okay",
    "asking",
    "make",
    "guess",
    "going",
    "make",
    "wrong",
    "guess",
    "one",
    "asked",
    "2",
    "one",
    "time",
    "3",
    "okay",
    "missing",
    "implementation",
    "message",
    "tells",
    "failed",
    "going",
    "take",
    "care",
    "momentarily",
    "let",
    "run",
    "program",
    "one",
    "time",
    "make",
    "right",
    "guess",
    "9",
    "okay",
    "says",
    "still",
    "asking",
    "make",
    "guess",
    "loop",
    "going",
    "get",
    "executed",
    "3",
    "times",
    "look",
    "1",
    "need",
    "change",
    "program",
    "user",
    "makes",
    "right",
    "guess",
    "need",
    "terminate",
    "loop",
    "need",
    "jump",
    "user",
    "makes",
    "right",
    "guess",
    "print",
    "message",
    "use",
    "brick",
    "statement",
    "terminate",
    "terminate",
    "loop",
    "python",
    "interpreter",
    "sees",
    "going",
    "immediately",
    "terminate",
    "loop",
    "going",
    "evaluate",
    "condition",
    "let",
    "run",
    "program",
    "see",
    "happens",
    "going",
    "guess",
    "right",
    "number",
    "look",
    "asked",
    "make",
    "two",
    "guesses",
    "beautiful",
    "last",
    "thing",
    "need",
    "add",
    "message",
    "tells",
    "user",
    "failed",
    "could",
    "guess",
    "right",
    "number",
    "well",
    "python",
    "loops",
    "optionally",
    "else",
    "part",
    "similar",
    "statements",
    "earlier",
    "learned",
    "statements",
    "optionally",
    "happen",
    "else",
    "part",
    "condition",
    "true",
    "otherwise",
    "something",
    "else",
    "case",
    "statement",
    "else",
    "part",
    "similar",
    "statements",
    "loops",
    "statements",
    "also",
    "else",
    "part",
    "right",
    "level",
    "add",
    "else",
    "block",
    "else",
    "colon",
    "code",
    "write",
    "get",
    "executed",
    "loop",
    "completes",
    "successfully",
    "without",
    "immediate",
    "break",
    "words",
    "user",
    "guesses",
    "right",
    "number",
    "break",
    "loop",
    "jump",
    "code",
    "write",
    "else",
    "block",
    "get",
    "executed",
    "user",
    "guess",
    "number",
    "never",
    "going",
    "break",
    "loop",
    "loop",
    "executed",
    "completion",
    "untill",
    "condition",
    "become",
    "false",
    "case",
    "code",
    "write",
    "else",
    "block",
    "get",
    "executed",
    "perfect",
    "opportunity",
    "us",
    "tell",
    "user",
    "hey",
    "made",
    "three",
    "guesses",
    "none",
    "right",
    "print",
    "sorry",
    "failed",
    "let",
    "test",
    "program",
    "one",
    "time",
    "guess",
    "1",
    "2",
    "3",
    "sorry",
    "failed",
    "let",
    "run",
    "one",
    "time",
    "time",
    "going",
    "make",
    "wrong",
    "guess",
    "right",
    "guess",
    "loop",
    "terminated",
    "immediately",
    "alright",
    "time",
    "practice",
    "learned",
    "far",
    "going",
    "build",
    "game",
    "game",
    "simulation",
    "card",
    "game",
    "game",
    "graphical",
    "user",
    "interface",
    "gooey",
    "really",
    "matter",
    "focus",
    "entirely",
    "building",
    "engine",
    "game",
    "let",
    "see",
    "works",
    "run",
    "get",
    "little",
    "symbol",
    "program",
    "waiting",
    "us",
    "enter",
    "command",
    "type",
    "help",
    "either",
    "lower",
    "case",
    "upper",
    "case",
    "get",
    "list",
    "commands",
    "program",
    "game",
    "currently",
    "supports",
    "type",
    "start",
    "command",
    "start",
    "car",
    "type",
    "stop",
    "command",
    "stop",
    "car",
    "quit",
    "terminate",
    "game",
    "commands",
    "type",
    "program",
    "going",
    "tell",
    "us",
    "hey",
    "understand",
    "example",
    "type",
    "asd",
    "going",
    "say",
    "understand",
    "type",
    "start",
    "get",
    "message",
    "car",
    "started",
    "ready",
    "go",
    "type",
    "stop",
    "says",
    "car",
    "stopped",
    "finally",
    "hit",
    "quit",
    "program",
    "terminates",
    "fantastic",
    "exercise",
    "practice",
    "wha",
    "learned",
    "pause",
    "video",
    "spend",
    "minutes",
    "build",
    "program",
    "alright",
    "going",
    "start",
    "loop",
    "condition",
    "condition",
    "want",
    "run",
    "loop",
    "user",
    "types",
    "quit",
    "define",
    "variable",
    "story",
    "command",
    "user",
    "enters",
    "run",
    "loop",
    "long",
    "command",
    "equal",
    "quit",
    "right",
    "loop",
    "define",
    "variable",
    "command",
    "initially",
    "set",
    "empty",
    "string",
    "empty",
    "string",
    "string",
    "characters",
    "quotes",
    "type",
    "condition",
    "command",
    "equal",
    "quit",
    "something",
    "immediately",
    "problem",
    "assuming",
    "user",
    "types",
    "command",
    "lower",
    "case",
    "type",
    "upper",
    "case",
    "program",
    "going",
    "behave",
    "properly",
    "fix",
    "problem",
    "need",
    "call",
    "lower",
    "method",
    "string",
    "object",
    "compare",
    "results",
    "quit",
    "could",
    "also",
    "call",
    "upper",
    "type",
    "quit",
    "upper",
    "case",
    "personal",
    "preference",
    "demo",
    "going",
    "use",
    "lower",
    "case",
    "characters",
    "okay",
    "loop",
    "need",
    "ask",
    "user",
    "enter",
    "command",
    "going",
    "use",
    "input",
    "function",
    "going",
    "add",
    "greater",
    "symbol",
    "followed",
    "space",
    "whatever",
    "user",
    "enters",
    "get",
    "store",
    "command",
    "variable",
    "apart",
    "quit",
    "command",
    "three",
    "commands",
    "need",
    "support",
    "start",
    "stop",
    "help",
    "need",
    "statement",
    "compare",
    "user",
    "enters",
    "one",
    "supported",
    "commands",
    "equals",
    "start",
    "want",
    "print",
    "message",
    "like",
    "car",
    "started",
    "print",
    "car",
    "started",
    "ready",
    "go",
    "matter",
    "second",
    "condition",
    "start",
    "maybe",
    "stop",
    "el",
    "equals",
    "stop",
    "go",
    "print",
    "different",
    "message",
    "car",
    "stopped",
    "look",
    "code",
    "repeated",
    "lower",
    "lower",
    "lower",
    "multiple",
    "times",
    "bad",
    "programming",
    "term",
    "called",
    "dry",
    "short",
    "repeat",
    "whenever",
    "duplicate",
    "code",
    "means",
    "something",
    "wrong",
    "solve",
    "problem",
    "well",
    "instead",
    "calling",
    "lower",
    "method",
    "condition",
    "call",
    "right",
    "get",
    "input",
    "user",
    "input",
    "function",
    "know",
    "returns",
    "string",
    "immediately",
    "call",
    "lower",
    "method",
    "string",
    "command",
    "always",
    "lowercase",
    "need",
    "call",
    "method",
    "every",
    "condition",
    "look",
    "remove",
    "duplication",
    "also",
    "conditions",
    "shorter",
    "easier",
    "read",
    "also",
    "one",
    "place",
    "need",
    "modify",
    "right",
    "better",
    "third",
    "command",
    "need",
    "one",
    "el",
    "command",
    "equals",
    "help",
    "want",
    "show",
    "commands",
    "support",
    "going",
    "print",
    "multi",
    "line",
    "string",
    "use",
    "triple",
    "quotes",
    "like",
    "give",
    "user",
    "guideline",
    "like",
    "start",
    "start",
    "car",
    "stop",
    "stop",
    "car",
    "quit",
    "quit",
    "finally",
    "need",
    "else",
    "part",
    "user",
    "enters",
    "none",
    "commands",
    "going",
    "tell",
    "hey",
    "understand",
    "else",
    "colon",
    "print",
    "sorry",
    "understand",
    "way",
    "note",
    "becomes",
    "using",
    "double",
    "quotes",
    "easily",
    "use",
    "single",
    "quote",
    "apostrophe",
    "okay",
    "let",
    "run",
    "program",
    "point",
    "see",
    "happens",
    "alright",
    "let",
    "type",
    "start",
    "car",
    "started",
    "beautiful",
    "stop",
    "car",
    "stopped",
    "help",
    "get",
    "guideline",
    "much",
    "indentation",
    "commands",
    "fix",
    "second",
    "finally",
    "let",
    "test",
    "quit",
    "command",
    "oops",
    "program",
    "work",
    "properly",
    "reason",
    "statements",
    "comparing",
    "command",
    "start",
    "stop",
    "help",
    "anything",
    "else",
    "end",
    "program",
    "says",
    "understand",
    "program",
    "says",
    "understand",
    "command",
    "however",
    "el",
    "statement",
    "control",
    "moved",
    "beginning",
    "loop",
    "point",
    "command",
    "quit",
    "loop",
    "complete",
    "program",
    "terminates",
    "words",
    "run",
    "program",
    "type",
    "quit",
    "program",
    "actually",
    "quits",
    "still",
    "see",
    "message",
    "appear",
    "solve",
    "problem",
    "well",
    "come",
    "back",
    "else",
    "block",
    "add",
    "another",
    "el",
    "something",
    "like",
    "el",
    "command",
    "equals",
    "quit",
    "immediately",
    "break",
    "solve",
    "problem",
    "note",
    "kind",
    "repeated",
    "expression",
    "two",
    "places",
    "reality",
    "really",
    "need",
    "condition",
    "top",
    "statements",
    "well",
    "accurately",
    "el",
    "jump",
    "loop",
    "terminate",
    "program",
    "simplify",
    "condition",
    "something",
    "like",
    "true",
    "true",
    "means",
    "block",
    "code",
    "going",
    "get",
    "executed",
    "repeatedly",
    "explicitly",
    "break",
    "okay",
    "let",
    "test",
    "program",
    "one",
    "time",
    "quit",
    "program",
    "terminates",
    "see",
    "message",
    "beautiful",
    "let",
    "fix",
    "last",
    "problem",
    "saw",
    "typed",
    "help",
    "guidelines",
    "appeared",
    "much",
    "indentation",
    "reason",
    "look",
    "right",
    "code",
    "already",
    "indented",
    "use",
    "triple",
    "quotes",
    "type",
    "printed",
    "exactly",
    "indentation",
    "indentation",
    "also",
    "printed",
    "terminal",
    "let",
    "delete",
    "okay",
    "run",
    "program",
    "one",
    "time",
    "type",
    "help",
    "indentation",
    "gone",
    "beautiful",
    "challenge",
    "want",
    "take",
    "program",
    "next",
    "level",
    "right",
    "type",
    "start",
    "get",
    "message",
    "car",
    "started",
    "type",
    "start",
    "get",
    "message",
    "would",
    "better",
    "got",
    "message",
    "like",
    "car",
    "already",
    "started",
    "make",
    "sense",
    "start",
    "car",
    "twice",
    "similarly",
    "type",
    "stop",
    "says",
    "car",
    "stopped",
    "type",
    "get",
    "exact",
    "message",
    "make",
    "sense",
    "stop",
    "car",
    "twice",
    "need",
    "car",
    "stopped",
    "user",
    "tries",
    "stop",
    "program",
    "say",
    "hey",
    "car",
    "already",
    "stopped",
    "similarly",
    "car",
    "already",
    "started",
    "user",
    "tries",
    "start",
    "program",
    "yell",
    "user",
    "go",
    "ahead",
    "make",
    "necessary",
    "changes",
    "implement",
    "scenario",
    "alright",
    "add",
    "program",
    "need",
    "know",
    "car",
    "started",
    "one",
    "piece",
    "information",
    "need",
    "store",
    "memory",
    "kind",
    "data",
    "need",
    "store",
    "boolean",
    "car",
    "started",
    "matter",
    "yes",
    "true",
    "false",
    "top",
    "define",
    "another",
    "variable",
    "like",
    "started",
    "initially",
    "set",
    "false",
    "car",
    "started",
    "right",
    "user",
    "types",
    "start",
    "command",
    "need",
    "check",
    "see",
    "car",
    "already",
    "started",
    "start",
    "otherwise",
    "yell",
    "user",
    "block",
    "write",
    "another",
    "statement",
    "already",
    "started",
    "print",
    "car",
    "already",
    "started",
    "otherwise",
    "add",
    "el",
    "statement",
    "point",
    "set",
    "started",
    "true",
    "start",
    "car",
    "print",
    "message",
    "okay",
    "need",
    "make",
    "similar",
    "change",
    "stop",
    "command",
    "car",
    "already",
    "stopped",
    "need",
    "print",
    "different",
    "message",
    "started",
    "using",
    "operator",
    "see",
    "car",
    "stopped",
    "started",
    "means",
    "stopped",
    "okay",
    "stopped",
    "print",
    "car",
    "already",
    "stopped",
    "double",
    "p",
    "otherwise",
    "else",
    "need",
    "stop",
    "car",
    "set",
    "started",
    "false",
    "print",
    "message",
    "easy",
    "let",
    "go",
    "ahead",
    "run",
    "program",
    "initially",
    "car",
    "stopped",
    "going",
    "type",
    "stop",
    "says",
    "car",
    "already",
    "stopped",
    "lets",
    "start",
    "okay",
    "car",
    "started",
    "let",
    "start",
    "one",
    "time",
    "program",
    "yelling",
    "us",
    "start",
    "car",
    "twice",
    "beautiful",
    "let",
    "stop",
    "says",
    "car",
    "stopped",
    "let",
    "stop",
    "one",
    "time",
    "get",
    "message",
    "tutorial",
    "going",
    "talk",
    "guys",
    "loops",
    "python",
    "last",
    "tutorial",
    "learned",
    "loops",
    "learned",
    "use",
    "loops",
    "execute",
    "block",
    "code",
    "multiple",
    "times",
    "python",
    "another",
    "kind",
    "loop",
    "loop",
    "use",
    "use",
    "iterate",
    "items",
    "collection",
    "string",
    "string",
    "sequence",
    "characters",
    "looks",
    "like",
    "collection",
    "use",
    "loop",
    "iterate",
    "character",
    "string",
    "something",
    "example",
    "type",
    "define",
    "variable",
    "call",
    "loop",
    "variable",
    "iteration",
    "variable",
    "hold",
    "one",
    "item",
    "let",
    "call",
    "item",
    "type",
    "string",
    "like",
    "python",
    "colon",
    "loop",
    "iterate",
    "string",
    "iteration",
    "item",
    "variable",
    "hold",
    "one",
    "character",
    "time",
    "first",
    "iteration",
    "set",
    "p",
    "second",
    "iteration",
    "set",
    "third",
    "iteration",
    "set",
    "inside",
    "block",
    "indentation",
    "whatever",
    "type",
    "executed",
    "iteration",
    "simply",
    "print",
    "item",
    "let",
    "run",
    "program",
    "see",
    "happens",
    "see",
    "character",
    "string",
    "printed",
    "new",
    "line",
    "let",
    "look",
    "another",
    "example",
    "python",
    "define",
    "lists",
    "using",
    "square",
    "brackets",
    "let",
    "remove",
    "string",
    "define",
    "list",
    "using",
    "square",
    "brackets",
    "list",
    "simply",
    "list",
    "items",
    "list",
    "numbers",
    "list",
    "customers",
    "list",
    "emails",
    "products",
    "blog",
    "posts",
    "whatever",
    "define",
    "list",
    "names",
    "like",
    "mosh",
    "jon",
    "sarah",
    "go",
    "ahead",
    "run",
    "program",
    "see",
    "iteration",
    "get",
    "one",
    "name",
    "print",
    "new",
    "line",
    "also",
    "loop",
    "list",
    "numbers",
    "example",
    "1",
    "2",
    "3",
    "4",
    "let",
    "run",
    "see",
    "number",
    "new",
    "line",
    "want",
    "list",
    "numbers",
    "explicitly",
    "type",
    "list",
    "let",
    "say",
    "100",
    "1000",
    "numbers",
    "want",
    "type",
    "5",
    "6",
    "7",
    "way",
    "use",
    "range",
    "function",
    "let",
    "delete",
    "python",
    "built",
    "function",
    "called",
    "range",
    "creating",
    "range",
    "numbers",
    "give",
    "number",
    "let",
    "say",
    "10",
    "let",
    "run",
    "program",
    "see",
    "terminal",
    "0",
    "way",
    "10",
    "included",
    "basically",
    "call",
    "range",
    "function",
    "range",
    "creates",
    "object",
    "list",
    "special",
    "kind",
    "object",
    "iterate",
    "iteration",
    "object",
    "spit",
    "new",
    "number",
    "also",
    "work",
    "range",
    "numbers",
    "let",
    "say",
    "want",
    "start",
    "5",
    "go",
    "way",
    "let",
    "run",
    "program",
    "numbers",
    "5",
    "6",
    "7",
    "also",
    "range",
    "function",
    "optionally",
    "take",
    "step",
    "pass",
    "two",
    "asa",
    "step",
    "function",
    "run",
    "program",
    "see",
    "first",
    "number",
    "5",
    "go",
    "two",
    "steps",
    "forward",
    "get",
    "7",
    "go",
    "two",
    "steps",
    "forward",
    "get",
    "9",
    "end",
    "range",
    "basics",
    "using",
    "loops",
    "python",
    "exercise",
    "want",
    "write",
    "program",
    "calculate",
    "total",
    "cost",
    "items",
    "shopping",
    "cart",
    "let",
    "say",
    "list",
    "prices",
    "like",
    "10",
    "20",
    "30",
    "want",
    "use",
    "loop",
    "calculate",
    "total",
    "cost",
    "items",
    "imaginary",
    "shopping",
    "cart",
    "calculate",
    "print",
    "terminal",
    "pretty",
    "easy",
    "couple",
    "minutes",
    "learned",
    "use",
    "loops",
    "iterate",
    "items",
    "collection",
    "collection",
    "string",
    "list",
    "range",
    "object",
    "returned",
    "range",
    "function",
    "anything",
    "kind",
    "object",
    "multiple",
    "items",
    "example",
    "going",
    "use",
    "loop",
    "iterate",
    "list",
    "prices",
    "item",
    "prices",
    "colon",
    "way",
    "loop",
    "variable",
    "call",
    "item",
    "call",
    "anything",
    "example",
    "case",
    "rename",
    "price",
    "price",
    "prices",
    "iteration",
    "price",
    "hold",
    "one",
    "value",
    "first",
    "iteration",
    "going",
    "hold",
    "10",
    "gooing",
    "20",
    "going",
    "need",
    "define",
    "another",
    "variable",
    "calculate",
    "total",
    "define",
    "outside",
    "loop",
    "let",
    "call",
    "total",
    "initially",
    "set",
    "iteration",
    "get",
    "current",
    "price",
    "add",
    "total",
    "write",
    "total",
    "equals",
    "total",
    "plus",
    "price",
    "learned",
    "earlier",
    "use",
    "augmented",
    "assignment",
    "operator",
    "simplify",
    "code",
    "loop",
    "total",
    "variable",
    "total",
    "prices",
    "simply",
    "print",
    "use",
    "formatted",
    "string",
    "string",
    "prefix",
    "f",
    "label",
    "like",
    "total",
    "curly",
    "braces",
    "dynamically",
    "include",
    "value",
    "string",
    "case",
    "total",
    "variable",
    "let",
    "go",
    "ahead",
    "run",
    "program",
    "go",
    "total",
    "cost",
    "items",
    "imaginary",
    "shopping",
    "cart",
    "tutorial",
    "going",
    "talk",
    "guys",
    "nested",
    "loops",
    "python",
    "using",
    "nested",
    "loop",
    "basically",
    "means",
    "adding",
    "one",
    "loop",
    "inside",
    "another",
    "loop",
    "technique",
    "amazing",
    "things",
    "example",
    "easily",
    "generate",
    "list",
    "coordinates",
    "acquired",
    "know",
    "combination",
    "x",
    "value",
    "let",
    "say",
    "0",
    "let",
    "say",
    "wan",
    "generate",
    "list",
    "coordinates",
    "like",
    "0",
    "0",
    "0",
    "1",
    "0",
    "2",
    "next",
    "going",
    "change",
    "x",
    "going",
    "use",
    "1",
    "x",
    "going",
    "use",
    "3",
    "values",
    "coordinates",
    "1",
    "0",
    "1",
    "1",
    "1",
    "2",
    "got",
    "point",
    "easily",
    "generate",
    "coordinates",
    "using",
    "nested",
    "loops",
    "let",
    "show",
    "start",
    "one",
    "loop",
    "let",
    "say",
    "x",
    "range",
    "loop",
    "generate",
    "value",
    "x",
    "coordinate",
    "let",
    "print",
    "terminal",
    "okay",
    "get",
    "values",
    "0",
    "x",
    "like",
    "0",
    "generate",
    "values",
    "use",
    "nested",
    "loop",
    "inside",
    "loop",
    "going",
    "add",
    "another",
    "loop",
    "instead",
    "printing",
    "x",
    "first",
    "want",
    "add",
    "another",
    "loop",
    "range",
    "let",
    "say",
    "3",
    "print",
    "x",
    "together",
    "print",
    "use",
    "formatted",
    "string",
    "display",
    "coordinates",
    "like",
    "add",
    "parenthesis",
    "inside",
    "parenthesis",
    "first",
    "need",
    "add",
    "x",
    "curly",
    "braces",
    "x",
    "comma",
    "followed",
    "another",
    "set",
    "curly",
    "braces",
    "let",
    "run",
    "program",
    "see",
    "get",
    "go",
    "coordinates",
    "0",
    "0",
    "0",
    "1",
    "0",
    "2",
    "1",
    "0",
    "1",
    "1",
    "1",
    "2",
    "let",
    "explain",
    "exactly",
    "program",
    "gets",
    "executed",
    "first",
    "iteration",
    "outer",
    "loop",
    "x",
    "line",
    "2",
    "new",
    "loop",
    "call",
    "inner",
    "loop",
    "inner",
    "loop",
    "first",
    "iteration",
    "going",
    "0",
    "print",
    "0",
    "0",
    "terminal",
    "control",
    "goes",
    "back",
    "line",
    "2",
    "inner",
    "loop",
    "second",
    "iteration",
    "set",
    "1",
    "still",
    "first",
    "iteration",
    "outer",
    "loop",
    "x",
    "still",
    "0",
    "incremented",
    "see",
    "0",
    "1",
    "terminal",
    "control",
    "goes",
    "back",
    "line",
    "2",
    "third",
    "iteration",
    "inner",
    "loop",
    "continue",
    "inner",
    "loop",
    "completes",
    "reaches",
    "2",
    "range",
    "function",
    "generates",
    "number",
    "0",
    "3",
    "including",
    "0",
    "1",
    "inner",
    "loop",
    "completes",
    "control",
    "goes",
    "back",
    "line",
    "1",
    "point",
    "going",
    "second",
    "iteration",
    "outer",
    "loop",
    "x",
    "1",
    "control",
    "moved",
    "line",
    "2",
    "inner",
    "loop",
    "point",
    "range",
    "function",
    "going",
    "generate",
    "numbers",
    "0",
    "3",
    "one",
    "time",
    "inner",
    "loop",
    "executed",
    "3",
    "times",
    "go",
    "back",
    "outer",
    "loop",
    "nested",
    "loops",
    "get",
    "executed",
    "okay",
    "exercise",
    "one",
    "little",
    "bit",
    "challenging",
    "exercises",
    "done",
    "far",
    "really",
    "expect",
    "wow",
    "proud",
    "see",
    "done",
    "using",
    "nested",
    "loops",
    "written",
    "code",
    "draw",
    "f",
    "shape",
    "see",
    "let",
    "give",
    "hint",
    "first",
    "list",
    "called",
    "numbers",
    "list",
    "values",
    "5",
    "2",
    "5",
    "2",
    "5",
    "values",
    "determine",
    "number",
    "x",
    "line",
    "example",
    "first",
    "item",
    "list",
    "tells",
    "us",
    "5",
    "x",
    "first",
    "line",
    "go",
    "1",
    "2",
    "3",
    "4",
    "5",
    "second",
    "line",
    "going",
    "2",
    "x",
    "third",
    "line",
    "going",
    "5",
    "x",
    "like",
    "written",
    "code",
    "convert",
    "simple",
    "list",
    "numbers",
    "shape",
    "like",
    "tip",
    "using",
    "loop",
    "need",
    "iterate",
    "list",
    "iteration",
    "get",
    "one",
    "number",
    "determines",
    "number",
    "x",
    "displayed",
    "particular",
    "line",
    "want",
    "cheat",
    "get",
    "number",
    "multiply",
    "string",
    "contains",
    "x",
    "multiply",
    "x",
    "5",
    "get",
    "5",
    "x",
    "want",
    "want",
    "use",
    "inner",
    "loop",
    "generate",
    "string",
    "contains",
    "5",
    "x",
    "imagine",
    "python",
    "multiply",
    "string",
    "number",
    "solve",
    "problem",
    "need",
    "nested",
    "loop",
    "go",
    "ahead",
    "spend",
    "five",
    "minutes",
    "exercise",
    "way",
    "best",
    "solve",
    "little",
    "bit",
    "challenging",
    "extremely",
    "difficult",
    "requires",
    "little",
    "bit",
    "focus",
    "see",
    "solution",
    "next",
    "alright",
    "first",
    "need",
    "iterate",
    "items",
    "list",
    "item",
    "numbers",
    "could",
    "rename",
    "variable",
    "number",
    "x",
    "line",
    "okay",
    "told",
    "want",
    "cheat",
    "write",
    "code",
    "like",
    "print",
    "x",
    "times",
    "x",
    "underline",
    "count",
    "run",
    "program",
    "get",
    "output",
    "beauty",
    "python",
    "python",
    "write",
    "expressions",
    "like",
    "multiply",
    "string",
    "number",
    "repeat",
    "lot",
    "programming",
    "languages",
    "support",
    "feature",
    "exercise",
    "wanted",
    "imagine",
    "feature",
    "python",
    "use",
    "inner",
    "loop",
    "solve",
    "problem",
    "works",
    "first",
    "iteration",
    "x",
    "count",
    "going",
    "need",
    "generate",
    "5",
    "x",
    "well",
    "let",
    "say",
    "define",
    "variable",
    "called",
    "output",
    "initially",
    "set",
    "empty",
    "string",
    "need",
    "add",
    "5",
    "x",
    "string",
    "use",
    "another",
    "loop",
    "count",
    "range",
    "x",
    "underline",
    "count",
    "using",
    "range",
    "function",
    "generate",
    "sequence",
    "numbers",
    "0",
    "x",
    "count",
    "first",
    "iteration",
    "x",
    "count",
    "going",
    "5",
    "range",
    "5",
    "would",
    "generate",
    "numbers",
    "1",
    "2",
    "3",
    "inner",
    "loop",
    "executed",
    "5",
    "times",
    "exactly",
    "count",
    "represents",
    "iteration",
    "simply",
    "need",
    "append",
    "x",
    "output",
    "variable",
    "set",
    "output",
    "plus",
    "equals",
    "x",
    "inner",
    "loop",
    "simply",
    "print",
    "output",
    "print",
    "5",
    "x",
    "first",
    "row",
    "go",
    "second",
    "iteration",
    "outer",
    "loop",
    "point",
    "x",
    "count",
    "going",
    "2",
    "line",
    "3",
    "going",
    "reset",
    "output",
    "variable",
    "empty",
    "string",
    "start",
    "go",
    "inner",
    "loop",
    "loop",
    "executed",
    "2",
    "times",
    "append",
    "x",
    "output",
    "variable",
    "print",
    "simple",
    "see",
    "really",
    "difficult",
    "slightly",
    "difficult",
    "previous",
    "exercises",
    "let",
    "run",
    "program",
    "go",
    "adventurous",
    "want",
    "modify",
    "values",
    "numbers",
    "list",
    "print",
    "l",
    "tutorial",
    "going",
    "take",
    "closer",
    "look",
    "lists",
    "going",
    "define",
    "list",
    "names",
    "let",
    "send",
    "john",
    "bob",
    "mosh",
    "sarah",
    "mary",
    "print",
    "list",
    "see",
    "terminal",
    "look",
    "exactly",
    "like",
    "define",
    "lists",
    "square",
    "brackets",
    "square",
    "brackets",
    "item",
    "items",
    "5",
    "strings",
    "list",
    "also",
    "access",
    "individual",
    "element",
    "using",
    "index",
    "like",
    "access",
    "individual",
    "character",
    "string",
    "using",
    "index",
    "type",
    "square",
    "brackets",
    "specify",
    "index",
    "index",
    "first",
    "item",
    "list",
    "let",
    "run",
    "program",
    "go",
    "get",
    "jon",
    "want",
    "print",
    "third",
    "element",
    "list",
    "index",
    "2",
    "names",
    "2",
    "returns",
    "mosh",
    "also",
    "pass",
    "negative",
    "index",
    "negative",
    "1",
    "refers",
    "last",
    "item",
    "list",
    "mary",
    "let",
    "run",
    "program",
    "go",
    "see",
    "mary",
    "pass",
    "negative",
    "2",
    "returns",
    "second",
    "item",
    "end",
    "list",
    "let",
    "run",
    "program",
    "go",
    "get",
    "sarah",
    "exactly",
    "like",
    "accessing",
    "individual",
    "characters",
    "string",
    "also",
    "use",
    "colon",
    "select",
    "range",
    "items",
    "example",
    "pass",
    "2",
    "colon",
    "get",
    "items",
    "starting",
    "index",
    "2",
    "mosh",
    "way",
    "end",
    "string",
    "let",
    "run",
    "program",
    "go",
    "get",
    "list",
    "3",
    "items",
    "mosh",
    "sarah",
    "mary",
    "also",
    "specify",
    "end",
    "index",
    "let",
    "say",
    "4",
    "return",
    "items",
    "index",
    "include",
    "item",
    "index",
    "run",
    "program",
    "see",
    "mosh",
    "sarah",
    "item",
    "indexed",
    "4which",
    "5th",
    "element",
    "5th",
    "item",
    "list",
    "returned",
    "mary",
    "returned",
    "also",
    "default",
    "values",
    "leave",
    "end",
    "index",
    "expression",
    "going",
    "return",
    "items",
    "starting",
    "index",
    "2",
    "end",
    "list",
    "leave",
    "start",
    "index",
    "expression",
    "asumes",
    "0",
    "default",
    "index",
    "return",
    "items",
    "beginning",
    "end",
    "list",
    "way",
    "like",
    "strings",
    "square",
    "brackets",
    "modify",
    "original",
    "list",
    "simply",
    "return",
    "new",
    "list",
    "example",
    "pass",
    "2",
    "see",
    "returns",
    "new",
    "list",
    "3",
    "items",
    "go",
    "back",
    "print",
    "original",
    "list",
    "names",
    "right",
    "see",
    "affected",
    "want",
    "use",
    "square",
    "brackets",
    "colon",
    "select",
    "range",
    "items",
    "get",
    "new",
    "list",
    "way",
    "also",
    "modify",
    "elements",
    "list",
    "example",
    "let",
    "say",
    "made",
    "mistake",
    "first",
    "item",
    "john",
    "h",
    "want",
    "remove",
    "h",
    "easy",
    "access",
    "using",
    "index",
    "names",
    "0",
    "set",
    "new",
    "value",
    "like",
    "let",
    "print",
    "list",
    "see",
    "first",
    "item",
    "list",
    "data",
    "basics",
    "lists",
    "exercise",
    "want",
    "write",
    "program",
    "find",
    "largest",
    "number",
    "list",
    "fantastic",
    "exercise",
    "beginners",
    "go",
    "ahead",
    "spend",
    "minutes",
    "come",
    "back",
    "continue",
    "watching",
    "alright",
    "let",
    "define",
    "list",
    "numbers",
    "numbers",
    "bunch",
    "random",
    "numbers",
    "3",
    "6",
    "2",
    "8",
    "4",
    "find",
    "largest",
    "number",
    "list",
    "need",
    "define",
    "another",
    "variable",
    "let",
    "call",
    "max",
    "variable",
    "hold",
    "largest",
    "number",
    "initially",
    "want",
    "assume",
    "first",
    "item",
    "list",
    "largest",
    "number",
    "set",
    "max",
    "numbers",
    "assuming",
    "first",
    "item",
    "largest",
    "number",
    "chances",
    "assumption",
    "wrong",
    "need",
    "iterate",
    "list",
    "need",
    "loop",
    "get",
    "item",
    "compare",
    "max",
    "greater",
    "max",
    "need",
    "reset",
    "max",
    "number",
    "first",
    "iteration",
    "get",
    "3",
    "max",
    "also",
    "3",
    "greater",
    "move",
    "get",
    "second",
    "number",
    "6",
    "greater",
    "3",
    "need",
    "reset",
    "max",
    "continue",
    "get",
    "2",
    "two",
    "greater",
    "6",
    "move",
    "get",
    "8",
    "8",
    "greater",
    "6",
    "reset",
    "max",
    "pretty",
    "easy",
    "need",
    "loop",
    "number",
    "numbers",
    "colon",
    "need",
    "heck",
    "see",
    "number",
    "greater",
    "max",
    "number",
    "greater",
    "max",
    "max",
    "colon",
    "need",
    "reset",
    "max",
    "max",
    "new",
    "number",
    "let",
    "print",
    "max",
    "run",
    "program",
    "see",
    "largest",
    "number",
    "list",
    "matter",
    "whether",
    "number",
    "end",
    "list",
    "beginning",
    "move",
    "10",
    "put",
    "right",
    "beginning",
    "still",
    "see",
    "result",
    "let",
    "run",
    "program",
    "still",
    "see",
    "10",
    "put",
    "somewhere",
    "middle",
    "program",
    "still",
    "work",
    "let",
    "put",
    "right",
    "run",
    "program",
    "still",
    "get",
    "tutorial",
    "going",
    "talk",
    "guys",
    "two",
    "dimensional",
    "lists",
    "python",
    "two",
    "dimensional",
    "lists",
    "extremely",
    "powerfully",
    "lot",
    "applications",
    "data",
    "science",
    "machine",
    "learning",
    "example",
    "math",
    "concept",
    "called",
    "matrix",
    "like",
    "rectangular",
    "array",
    "numbers",
    "let",
    "show",
    "1",
    "2",
    "3",
    "4",
    "5",
    "6",
    "7",
    "8",
    "rectangular",
    "array",
    "numbers",
    "rows",
    "columns",
    "3",
    "x",
    "3",
    "matrix",
    "math",
    "model",
    "python",
    "using",
    "2",
    "dimensional",
    "list",
    "2",
    "dimensional",
    "list",
    "list",
    "item",
    "list",
    "another",
    "list",
    "want",
    "define",
    "matrix",
    "set",
    "list",
    "item",
    "list",
    "going",
    "another",
    "list",
    "list",
    "represents",
    "items",
    "row",
    "first",
    "item",
    "list",
    "going",
    "another",
    "list",
    "list",
    "going",
    "values",
    "1",
    "2",
    "second",
    "item",
    "matrix",
    "list",
    "list",
    "list",
    "represents",
    "items",
    "second",
    "row",
    "4",
    "5",
    "6",
    "finally",
    "7",
    "8",
    "see",
    "2",
    "dimensional",
    "list",
    "item",
    "outer",
    "list",
    "another",
    "list",
    "okay",
    "implement",
    "matrix",
    "python",
    "access",
    "individual",
    "item",
    "matrix",
    "use",
    "square",
    "brackets",
    "let",
    "delete",
    "stuff",
    "alright",
    "access",
    "1",
    "well",
    "start",
    "list",
    "add",
    "square",
    "brackets",
    "first",
    "need",
    "go",
    "get",
    "first",
    "item",
    "list",
    "right",
    "pass",
    "0",
    "expression",
    "returns",
    "another",
    "list",
    "inner",
    "list",
    "list",
    "let",
    "say",
    "want",
    "access",
    "second",
    "item",
    "add",
    "square",
    "brackets",
    "pass",
    "1",
    "index",
    "2",
    "list",
    "alright",
    "print",
    "terminal",
    "get",
    "okay",
    "using",
    "2",
    "square",
    "brackets",
    "access",
    "individual",
    "items",
    "matrix",
    "also",
    "modify",
    "values",
    "using",
    "syntax",
    "printing",
    "let",
    "change",
    "20",
    "matrix",
    "0",
    "1",
    "let",
    "change",
    "20",
    "print",
    "go",
    "modified",
    "also",
    "use",
    "nested",
    "loops",
    "iterate",
    "items",
    "matrix",
    "let",
    "show",
    "start",
    "rows",
    "rows",
    "matrix",
    "loop",
    "iterating",
    "matrix",
    "list",
    "iteration",
    "row",
    "contain",
    "1",
    "list",
    "1",
    "item",
    "okay",
    "need",
    "use",
    "inner",
    "loop",
    "need",
    "loop",
    "row",
    "list",
    "items",
    "type",
    "4",
    "item",
    "row",
    "colon",
    "print",
    "item",
    "okay",
    "let",
    "run",
    "program",
    "go",
    "get",
    "item",
    "list",
    "hey",
    "wanted",
    "make",
    "quick",
    "announcement",
    "case",
    "seen",
    "website",
    "yet",
    "head",
    "coding",
    "school",
    "find",
    "plenty",
    "courses",
    "web",
    "mobile",
    "application",
    "development",
    "fact",
    "recently",
    "published",
    "comprehensive",
    "python",
    "course",
    "goes",
    "way",
    "beyond",
    "beginners",
    "youtube",
    "serious",
    "learning",
    "python",
    "getting",
    "job",
    "highly",
    "encourage",
    "enroll",
    "course",
    "like",
    "tutorial",
    "watch",
    "anytime",
    "anywhere",
    "many",
    "times",
    "want",
    "also",
    "receive",
    "certificate",
    "completion",
    "add",
    "resume",
    "course",
    "comes",
    "30",
    "day",
    "money",
    "back",
    "guarantee",
    "happy",
    "give",
    "money",
    "back",
    "questions",
    "ask",
    "price",
    "course",
    "149",
    "dollars",
    "first",
    "200",
    "students",
    "get",
    "15",
    "dollars",
    "interested",
    "link",
    "video",
    "click",
    "link",
    "get",
    "started",
    "tutorial",
    "going",
    "talk",
    "guys",
    "list",
    "methods",
    "list",
    "functions",
    "operations",
    "perform",
    "list",
    "let",
    "define",
    "list",
    "numbers",
    "pass",
    "bunch",
    "random",
    "numbers",
    "like",
    "5",
    "2",
    "1",
    "7",
    "number",
    "things",
    "list",
    "add",
    "new",
    "items",
    "remove",
    "existing",
    "items",
    "check",
    "existence",
    "item",
    "operations",
    "perform",
    "list",
    "type",
    "numbers",
    "see",
    "functions",
    "accurately",
    "methods",
    "available",
    "list",
    "objects",
    "call",
    "append",
    "method",
    "add",
    "new",
    "item",
    "list",
    "let",
    "say",
    "actually",
    "good",
    "number",
    "joking",
    "superstitious",
    "let",
    "add",
    "20",
    "really",
    "matter",
    "print",
    "list",
    "run",
    "program",
    "see",
    "20",
    "added",
    "end",
    "list",
    "want",
    "add",
    "number",
    "somewhere",
    "middle",
    "beginning",
    "list",
    "use",
    "different",
    "method",
    "called",
    "insert",
    "insert",
    "method",
    "takes",
    "2",
    "values",
    "let",
    "show",
    "open",
    "parenthesis",
    "look",
    "little",
    "tool",
    "tip",
    "insert",
    "method",
    "see",
    "first",
    "value",
    "need",
    "pass",
    "index",
    "index",
    "want",
    "insert",
    "new",
    "item",
    "let",
    "say",
    "want",
    "add",
    "item",
    "beginning",
    "list",
    "passed",
    "index",
    "position",
    "0",
    "second",
    "value",
    "actual",
    "object",
    "want",
    "add",
    "list",
    "let",
    "say",
    "want",
    "add",
    "number",
    "10",
    "print",
    "list",
    "see",
    "number",
    "10",
    "placed",
    "beginning",
    "list",
    "items",
    "pushed",
    "right",
    "also",
    "remove",
    "item",
    "call",
    "remove",
    "pass",
    "item",
    "want",
    "remove",
    "print",
    "list",
    "see",
    "5",
    "gone",
    "2",
    "1",
    "7",
    "want",
    "remove",
    "items",
    "list",
    "call",
    "clear",
    "method",
    "clear",
    "method",
    "take",
    "values",
    "simply",
    "call",
    "empties",
    "list",
    "items",
    "removed",
    "also",
    "another",
    "useful",
    "method",
    "called",
    "hop",
    "remove",
    "last",
    "item",
    "list",
    "let",
    "show",
    "run",
    "program",
    "see",
    "number",
    "4",
    "removed",
    "end",
    "list",
    "want",
    "check",
    "existence",
    "item",
    "list",
    "call",
    "index",
    "method",
    "call",
    "index",
    "pass",
    "value",
    "like",
    "5",
    "returns",
    "index",
    "first",
    "occurrence",
    "item",
    "let",
    "print",
    "terminal",
    "need",
    "line",
    "anymore",
    "index",
    "5",
    "pass",
    "number",
    "exist",
    "list",
    "let",
    "say",
    "50",
    "run",
    "program",
    "get",
    "error",
    "get",
    "value",
    "error",
    "50",
    "list",
    "also",
    "another",
    "way",
    "check",
    "existence",
    "item",
    "use",
    "operator",
    "let",
    "show",
    "type",
    "15",
    "numbers",
    "earlier",
    "used",
    "operator",
    "string",
    "check",
    "existence",
    "character",
    "sequence",
    "character",
    "string",
    "checking",
    "existence",
    "50",
    "list",
    "numbers",
    "let",
    "print",
    "get",
    "boolean",
    "value",
    "false",
    "unlike",
    "index",
    "method",
    "expression",
    "generate",
    "error",
    "safer",
    "use",
    "also",
    "another",
    "method",
    "counting",
    "occurances",
    "item",
    "let",
    "say",
    "another",
    "5",
    "call",
    "pass",
    "5",
    "return",
    "2",
    "2",
    "5s",
    "list",
    "take",
    "look",
    "go",
    "pretty",
    "useful",
    "want",
    "sort",
    "lists",
    "call",
    "sort",
    "method",
    "call",
    "sort",
    "method",
    "method",
    "take",
    "values",
    "look",
    "return",
    "value",
    "none",
    "none",
    "object",
    "python",
    "represents",
    "absence",
    "value",
    "sort",
    "method",
    "really",
    "return",
    "values",
    "simply",
    "sorts",
    "list",
    "place",
    "instead",
    "printing",
    "return",
    "value",
    "oft",
    "method",
    "simply",
    "call",
    "sort",
    "list",
    "print",
    "list",
    "take",
    "look",
    "items",
    "assorted",
    "ascending",
    "order",
    "also",
    "sort",
    "items",
    "descending",
    "order",
    "sort",
    "list",
    "call",
    "reverse",
    "method",
    "simply",
    "reverse",
    "list",
    "let",
    "go",
    "ahead",
    "run",
    "program",
    "take",
    "look",
    "numbers",
    "sorted",
    "descending",
    "order",
    "one",
    "last",
    "method",
    "want",
    "show",
    "pretty",
    "useful",
    "copy",
    "method",
    "copy",
    "method",
    "get",
    "copy",
    "list",
    "let",
    "define",
    "another",
    "variable",
    "called",
    "numbers",
    "2",
    "numbers",
    "2",
    "copy",
    "original",
    "list",
    "make",
    "changes",
    "original",
    "list",
    "add",
    "new",
    "items",
    "remove",
    "existing",
    "items",
    "operations",
    "going",
    "impact",
    "second",
    "list",
    "let",
    "show",
    "show",
    "copy",
    "numbers",
    "list",
    "let",
    "add",
    "new",
    "item",
    "list",
    "ten",
    "first",
    "list",
    "updated",
    "new",
    "item",
    "first",
    "list",
    "lets",
    "print",
    "second",
    "list",
    "take",
    "look",
    "number",
    "10",
    "2",
    "independent",
    "lists",
    "operations",
    "perform",
    "lists",
    "add",
    "new",
    "items",
    "list",
    "remove",
    "exxisitn",
    "items",
    "check",
    "existence",
    "item",
    "sort",
    "list",
    "copy",
    "exercise",
    "tutorial",
    "want",
    "write",
    "program",
    "remove",
    "duplicates",
    "list",
    "fantastic",
    "exercise",
    "spend",
    "minutes",
    "come",
    "back",
    "continue",
    "watching",
    "alright",
    "let",
    "say",
    "list",
    "numbers",
    "bunch",
    "duplicates",
    "2",
    "2",
    "4",
    "6",
    "6",
    "3",
    "4",
    "6",
    "want",
    "remove",
    "duplicates",
    "need",
    "define",
    "another",
    "list",
    "let",
    "call",
    "new",
    "list",
    "initially",
    "set",
    "empty",
    "list",
    "need",
    "iterate",
    "first",
    "list",
    "get",
    "item",
    "number",
    "unix",
    "list",
    "add",
    "second",
    "list",
    "simple",
    "number",
    "numbers",
    "need",
    "check",
    "see",
    "number",
    "second",
    "list",
    "use",
    "operator",
    "number",
    "units",
    "operator",
    "units",
    "list",
    "need",
    "add",
    "units",
    "apphend",
    "number",
    "let",
    "go",
    "ahead",
    "print",
    "units",
    "list",
    "go",
    "2",
    "4",
    "6",
    "3",
    "duplicates",
    "removed",
    "tutorial",
    "going",
    "talk",
    "guys",
    "another",
    "important",
    "structure",
    "python",
    "called",
    "tuple",
    "tuples",
    "similar",
    "lists",
    "use",
    "store",
    "list",
    "items",
    "unlike",
    "lists",
    "modify",
    "add",
    "new",
    "items",
    "remove",
    "existing",
    "items",
    "tuples",
    "immutable",
    "mutate",
    "change",
    "let",
    "show",
    "going",
    "start",
    "defining",
    "list",
    "numbers",
    "1",
    "2",
    "3",
    "4",
    "use",
    "square",
    "brackets",
    "define",
    "lists",
    "parenthesis",
    "define",
    "tuples",
    "change",
    "parenthesis",
    "1",
    "2",
    "tuple",
    "type",
    "numbers",
    "look",
    "append",
    "insert",
    "methods",
    "add",
    "new",
    "items",
    "tuple",
    "also",
    "remove",
    "clear",
    "pop",
    "remove",
    "items",
    "two",
    "methods",
    "count",
    "index",
    "use",
    "count",
    "count",
    "number",
    "occurrences",
    "item",
    "index",
    "find",
    "index",
    "first",
    "occurrence",
    "item",
    "get",
    "information",
    "tuple",
    "ca",
    "change",
    "way",
    "methods",
    "see",
    "start",
    "two",
    "underscores",
    "refer",
    "magic",
    "methods",
    "advanced",
    "topic",
    "go",
    "beyond",
    "scope",
    "tutorial",
    "interested",
    "learn",
    "bout",
    "get",
    "python",
    "course",
    "covered",
    "detail",
    "similar",
    "lists",
    "address",
    "individual",
    "items",
    "using",
    "squre",
    "bracketts",
    "get",
    "first",
    "item",
    "like",
    "print",
    "another",
    "terminal",
    "go",
    "first",
    "item",
    "1",
    "try",
    "change",
    "first",
    "item",
    "get",
    "error",
    "numbers",
    "0",
    "set",
    "10",
    "run",
    "program",
    "go",
    "get",
    "type",
    "error",
    "tuple",
    "object",
    "support",
    "item",
    "assignment",
    "mutate",
    "change",
    "tuples",
    "immutable",
    "practically",
    "speaking",
    "time",
    "using",
    "lists",
    "tuples",
    "also",
    "useful",
    "want",
    "create",
    "list",
    "items",
    "make",
    "sure",
    "program",
    "accidentally",
    "modify",
    "list",
    "better",
    "use",
    "tuple",
    "tutorial",
    "going",
    "show",
    "powerful",
    "feature",
    "python",
    "called",
    "unpacking",
    "lets",
    "find",
    "tuple",
    "called",
    "coordinates",
    "pass",
    "3",
    "values",
    "1",
    "2",
    "imagine",
    "coordinates",
    "x",
    "let",
    "say",
    "want",
    "get",
    "values",
    "use",
    "expressions",
    "complex",
    "expressions",
    "program",
    "maybe",
    "want",
    "include",
    "part",
    "large",
    "complex",
    "formula",
    "together",
    "write",
    "code",
    "like",
    "coordinates",
    "0",
    "let",
    "say",
    "want",
    "multiply",
    "coordinates",
    "1",
    "multiply",
    "coordinates",
    "2",
    "code",
    "getting",
    "little",
    "bit",
    "long",
    "simple",
    "example",
    "let",
    "say",
    "want",
    "use",
    "values",
    "quite",
    "places",
    "program",
    "better",
    "approach",
    "get",
    "values",
    "store",
    "separate",
    "variables",
    "like",
    "get",
    "coordinates",
    "0",
    "store",
    "x",
    "get",
    "coordinates",
    "1",
    "store",
    "similarly",
    "get",
    "coordinates",
    "2",
    "store",
    "started",
    "repeating",
    "coordinates",
    "2",
    "coordinates",
    "0",
    "multiple",
    "times",
    "simply",
    "work",
    "variables",
    "x",
    "times",
    "times",
    "z",
    "better",
    "right",
    "nothing",
    "new",
    "far",
    "python",
    "powerful",
    "feature",
    "called",
    "unpacking",
    "achieve",
    "result",
    "far",
    "less",
    "code",
    "define",
    "variables",
    "x",
    "set",
    "tuple",
    "line",
    "6",
    "exactly",
    "identical",
    "lines",
    "shorthand",
    "achieve",
    "result",
    "let",
    "delete",
    "explain",
    "code",
    "works",
    "python",
    "interpreter",
    "sees",
    "statement",
    "get",
    "first",
    "item",
    "tuple",
    "assign",
    "variable",
    "get",
    "second",
    "item",
    "tuple",
    "similarly",
    "get",
    "third",
    "item",
    "tuple",
    "assign",
    "third",
    "variable",
    "unpacking",
    "tuple",
    "3",
    "variables",
    "print",
    "x",
    "see",
    "x",
    "1",
    "similarly",
    "2",
    "go",
    "unpacking",
    "way",
    "limited",
    "tuples",
    "use",
    "feature",
    "lists",
    "well",
    "change",
    "parenthesis",
    "square",
    "brackets",
    "coordinates",
    "list",
    "unpack",
    "list",
    "3",
    "variables",
    "run",
    "program",
    "see",
    "tutorial",
    "going",
    "talk",
    "dictionary",
    "python",
    "use",
    "dictionaries",
    "situations",
    "want",
    "store",
    "information",
    "comes",
    "key",
    "value",
    "pairs",
    "example",
    "think",
    "customer",
    "customer",
    "bunch",
    "attributes",
    "like",
    "name",
    "email",
    "phone",
    "number",
    "address",
    "attributes",
    "value",
    "example",
    "name",
    "jon",
    "smith",
    "email",
    "jon",
    "phone",
    "whatevr",
    "ere",
    "bunch",
    "key",
    "value",
    "pairs",
    "example",
    "keys",
    "name",
    "email",
    "phone",
    "key",
    "associated",
    "value",
    "use",
    "dictionary",
    "dictionary",
    "store",
    "bunch",
    "key",
    "value",
    "pairs",
    "let",
    "show",
    "define",
    "dictionary",
    "python",
    "back",
    "program",
    "going",
    "define",
    "variable",
    "customer",
    "set",
    "curly",
    "braces",
    "curly",
    "braces",
    "define",
    "dictionary",
    "example",
    "empty",
    "dictionary",
    "key",
    "value",
    "pairs",
    "add",
    "one",
    "key",
    "value",
    "pairs",
    "braces",
    "let",
    "add",
    "key",
    "value",
    "pair",
    "going",
    "set",
    "key",
    "name",
    "value",
    "john",
    "smith",
    "add",
    "comma",
    "add",
    "another",
    "key",
    "value",
    "pair",
    "let",
    "set",
    "age",
    "30",
    "let",
    "add",
    "another",
    "key",
    "value",
    "pair",
    "underline",
    "verified",
    "set",
    "boolean",
    "matters",
    "keys",
    "unique",
    "add",
    "another",
    "key",
    "value",
    "pair",
    "set",
    "age",
    "40",
    "look",
    "pycharm",
    "highlighted",
    "age",
    "key",
    "duplicated",
    "allowed",
    "key",
    "unique",
    "dictionary",
    "like",
    "dictionaries",
    "real",
    "world",
    "real",
    "dictionary",
    "bunch",
    "words",
    "definition",
    "word",
    "listed",
    "dictionary",
    "word",
    "book",
    "twice",
    "let",
    "delete",
    "second",
    "duplicate",
    "key",
    "value",
    "pair",
    "keys",
    "unique",
    "example",
    "using",
    "strings",
    "also",
    "numbers",
    "going",
    "look",
    "later",
    "value",
    "anything",
    "string",
    "number",
    "boolean",
    "list",
    "literally",
    "anything",
    "access",
    "item",
    "dictionary",
    "using",
    "square",
    "brackets",
    "type",
    "customer",
    "square",
    "brackets",
    "specify",
    "key",
    "like",
    "name",
    "return",
    "value",
    "associated",
    "name",
    "key",
    "let",
    "print",
    "terminal",
    "look",
    "go",
    "name",
    "john",
    "smith",
    "pass",
    "key",
    "exist",
    "lets",
    "say",
    "first",
    "date",
    "run",
    "program",
    "get",
    "key",
    "error",
    "key",
    "called",
    "birth",
    "date",
    "also",
    "spell",
    "name",
    "let",
    "say",
    "capital",
    "n",
    "get",
    "error",
    "key",
    "exact",
    "sequence",
    "characters",
    "dictionary",
    "get",
    "around",
    "use",
    "get",
    "method",
    "instead",
    "using",
    "square",
    "brackets",
    "call",
    "get",
    "method",
    "specify",
    "key",
    "use",
    "key",
    "exist",
    "yell",
    "us",
    "example",
    "pass",
    "birth",
    "date",
    "simply",
    "returns",
    "non",
    "value",
    "earlier",
    "told",
    "none",
    "object",
    "represents",
    "absence",
    "value",
    "instead",
    "getting",
    "key",
    "error",
    "get",
    "none",
    "also",
    "option",
    "supply",
    "default",
    "value",
    "example",
    "dictionary",
    "key",
    "supply",
    "default",
    "value",
    "let",
    "say",
    "january",
    "1st",
    "let",
    "run",
    "program",
    "instead",
    "getting",
    "none",
    "get",
    "default",
    "value",
    "access",
    "value",
    "associated",
    "key",
    "dictionary",
    "also",
    "update",
    "values",
    "example",
    "print",
    "statement",
    "write",
    "code",
    "like",
    "customer",
    "name",
    "let",
    "update",
    "name",
    "jack",
    "smith",
    "little",
    "warning",
    "telling",
    "us",
    "put",
    "jac",
    "smith",
    "instead",
    "defining",
    "update",
    "worry",
    "really",
    "matter",
    "line",
    "print",
    "name",
    "customer",
    "see",
    "jack",
    "smith",
    "let",
    "show",
    "going",
    "use",
    "square",
    "bracket",
    "notation",
    "let",
    "print",
    "name",
    "customer",
    "see",
    "updated",
    "also",
    "add",
    "new",
    "key",
    "let",
    "set",
    "birthdate",
    "value",
    "like",
    "january",
    "first",
    "print",
    "see",
    "easily",
    "add",
    "new",
    "key",
    "value",
    "pairs",
    "dictionary",
    "basics",
    "using",
    "dictionaries",
    "python",
    "extremely",
    "important",
    "lot",
    "applications",
    "real",
    "world",
    "okay",
    "exercise",
    "program",
    "asks",
    "phone",
    "number",
    "let",
    "type",
    "1",
    "type",
    "digits",
    "translate",
    "words",
    "take",
    "look",
    "enter",
    "prints",
    "1",
    "2",
    "3",
    "pretty",
    "cool",
    "program",
    "go",
    "ahead",
    "spend",
    "minutes",
    "exercise",
    "pretty",
    "easy",
    "see",
    "next",
    "alright",
    "first",
    "need",
    "get",
    "users",
    "phone",
    "number",
    "call",
    "input",
    "function",
    "label",
    "phone",
    "get",
    "result",
    "store",
    "variable",
    "let",
    "say",
    "user",
    "enters",
    "123",
    "need",
    "look",
    "string",
    "get",
    "character",
    "translate",
    "world",
    "need",
    "implement",
    "scenario",
    "dictionary",
    "dictionary",
    "structure",
    "allows",
    "us",
    "key",
    "value",
    "dictionary",
    "keys",
    "like",
    "map",
    "keys",
    "word",
    "put",
    "digit",
    "1",
    "word",
    "1",
    "map",
    "2",
    "two",
    "get",
    "point",
    "let",
    "define",
    "dictionary",
    "call",
    "digits",
    "underline",
    "mapping",
    "dictionary",
    "going",
    "add",
    "key",
    "value",
    "pairs",
    "one",
    "map",
    "1",
    "2",
    "2",
    "3",
    "3",
    "finally",
    "4",
    "technically",
    "add",
    "digits",
    "0",
    "9",
    "want",
    "waste",
    "time",
    "typing",
    "repetitive",
    "things",
    "got",
    "point",
    "lets",
    "move",
    "need",
    "look",
    "phone",
    "string",
    "4",
    "character",
    "phone",
    "get",
    "character",
    "use",
    "access",
    "key",
    "value",
    "pair",
    "dictionary",
    "digits",
    "underline",
    "mapping",
    "use",
    "square",
    "brackets",
    "call",
    "get",
    "method",
    "would",
    "prefer",
    "use",
    "get",
    "method",
    "case",
    "user",
    "enters",
    "character",
    "part",
    "dictionary",
    "program",
    "going",
    "yell",
    "call",
    "gt",
    "method",
    "pass",
    "character",
    "key",
    "key",
    "supply",
    "default",
    "value",
    "like",
    "exclamation",
    "mark",
    "get",
    "word",
    "need",
    "add",
    "word",
    "output",
    "string",
    "define",
    "output",
    "string",
    "initially",
    "set",
    "empty",
    "string",
    "iteration",
    "get",
    "add",
    "output",
    "string",
    "type",
    "output",
    "plus",
    "equals",
    "also",
    "add",
    "space",
    "get",
    "words",
    "close",
    "okay",
    "finally",
    "let",
    "print",
    "output",
    "run",
    "program",
    "want",
    "type",
    "1",
    "5",
    "lets",
    "see",
    "get",
    "get",
    "1",
    "3",
    "4",
    "exlamantion",
    "mark",
    "tutorial",
    "going",
    "show",
    "something",
    "really",
    "cool",
    "dictionaries",
    "program",
    "type",
    "message",
    "like",
    "good",
    "morning",
    "followed",
    "smiley",
    "face",
    "press",
    "enter",
    "get",
    "beautiful",
    "smiley",
    "face",
    "type",
    "sad",
    "sad",
    "smiley",
    "face",
    "gets",
    "translated",
    "beautiful",
    "emoji",
    "another",
    "application",
    "using",
    "dictionaries",
    "dictionary",
    "maps",
    "characters",
    "smiley",
    "faces",
    "lets",
    "go",
    "ahead",
    "build",
    "program",
    "together",
    "start",
    "calling",
    "input",
    "function",
    "pass",
    "greater",
    "symbol",
    "indicator",
    "user",
    "type",
    "message",
    "give",
    "message",
    "store",
    "know",
    "string",
    "need",
    "split",
    "string",
    "space",
    "user",
    "types",
    "good",
    "morning",
    "smiley",
    "face",
    "want",
    "break",
    "3",
    "words",
    "good",
    "morning",
    "smiley",
    "face",
    "call",
    "split",
    "method",
    "call",
    "pass",
    "string",
    "one",
    "space",
    "separator",
    "method",
    "basically",
    "goes",
    "string",
    "anywhere",
    "finds",
    "character",
    "case",
    "space",
    "uses",
    "boundary",
    "separate",
    "string",
    "multiple",
    "words",
    "return",
    "list",
    "let",
    "show",
    "let",
    "store",
    "words",
    "print",
    "terminal",
    "let",
    "go",
    "ahead",
    "run",
    "program",
    "type",
    "good",
    "morning",
    "sunshine",
    "enter",
    "get",
    "list",
    "three",
    "items",
    "item",
    "string",
    "okay",
    "back",
    "program",
    "need",
    "define",
    "dictionary",
    "mapping",
    "special",
    "characters",
    "like",
    "2",
    "smiley",
    "face",
    "call",
    "emojis",
    "set",
    "curly",
    "braces",
    "add",
    "key",
    "value",
    "pair",
    "smiley",
    "face",
    "map",
    "string",
    "string",
    "want",
    "add",
    "emoji",
    "mac",
    "keyboard",
    "press",
    "control",
    "command",
    "space",
    "bring",
    "emoji",
    "box",
    "windows",
    "honestly",
    "really",
    "know",
    "must",
    "applications",
    "lets",
    "go",
    "ahead",
    "pick",
    "happy",
    "smiley",
    "face",
    "good",
    "lets",
    "add",
    "another",
    "key",
    "value",
    "pair",
    "sad",
    "face",
    "map",
    "face",
    "good",
    "list",
    "words",
    "need",
    "look",
    "list",
    "get",
    "word",
    "potentially",
    "map",
    "emoji",
    "write",
    "loop",
    "word",
    "words",
    "want",
    "go",
    "dictionary",
    "see",
    "item",
    "word",
    "key",
    "item",
    "key",
    "get",
    "value",
    "otherwise",
    "want",
    "use",
    "word",
    "user",
    "types",
    "good",
    "morning",
    "want",
    "translate",
    "words",
    "want",
    "return",
    "case",
    "use",
    "get",
    "method",
    "supply",
    "default",
    "value",
    "wan",
    "get",
    "item",
    "key",
    "word",
    "item",
    "key",
    "simply",
    "use",
    "word",
    "default",
    "value",
    "similar",
    "exercise",
    "last",
    "tutorial",
    "need",
    "output",
    "variable",
    "let",
    "define",
    "output",
    "set",
    "empty",
    "string",
    "back",
    "line",
    "9",
    "get",
    "return",
    "value",
    "get",
    "method",
    "add",
    "output",
    "variable",
    "output",
    "plus",
    "equals",
    "whatever",
    "get",
    "get",
    "method",
    "finally",
    "need",
    "append",
    "space",
    "end",
    "done",
    "let",
    "print",
    "output",
    "run",
    "program",
    "going",
    "type",
    "good",
    "morning",
    "sunshine",
    "smiley",
    "face",
    "get",
    "beautiful",
    "let",
    "try",
    "sad",
    "face",
    "well",
    "sad",
    "bad",
    "beautiful",
    "see",
    "dictionaries",
    "lot",
    "use",
    "cases",
    "real",
    "applications",
    "solution",
    "last",
    "tutorial",
    "created",
    "emoji",
    "converter",
    "far",
    "writing",
    "code",
    "right",
    "app",
    "py",
    "programs",
    "grow",
    "need",
    "better",
    "way",
    "organize",
    "code",
    "need",
    "break",
    "code",
    "smaller",
    "manageable",
    "maintainable",
    "chunks",
    "call",
    "functions",
    "function",
    "container",
    "lines",
    "code",
    "perform",
    "specific",
    "task",
    "example",
    "learned",
    "built",
    "functions",
    "python",
    "like",
    "print",
    "input",
    "functions",
    "purpose",
    "know",
    "perform",
    "specific",
    "task",
    "build",
    "large",
    "complex",
    "programs",
    "break",
    "code",
    "smaller",
    "reusable",
    "chunks",
    "call",
    "functions",
    "better",
    "organize",
    "code",
    "going",
    "show",
    "tutorial",
    "let",
    "write",
    "simple",
    "program",
    "printing",
    "greeting",
    "message",
    "going",
    "print",
    "hi",
    "lets",
    "add",
    "another",
    "message",
    "welcome",
    "aboard",
    "simple",
    "program",
    "two",
    "lines",
    "code",
    "let",
    "say",
    "two",
    "lines",
    "potentially",
    "going",
    "need",
    "programs",
    "put",
    "function",
    "reuse",
    "let",
    "show",
    "start",
    "typing",
    "death",
    "reserve",
    "keyword",
    "python",
    "short",
    "define",
    "python",
    "interpreter",
    "sees",
    "knows",
    "defining",
    "function",
    "next",
    "need",
    "give",
    "function",
    "name",
    "lets",
    "say",
    "best",
    "practices",
    "learned",
    "naming",
    "variables",
    "also",
    "apply",
    "means",
    "name",
    "functions",
    "lower",
    "case",
    "characters",
    "multiple",
    "words",
    "need",
    "separate",
    "using",
    "underscore",
    "always",
    "always",
    "always",
    "use",
    "meaningful",
    "descriptive",
    "names",
    "functions",
    "define",
    "function",
    "called",
    "greet",
    "user",
    "need",
    "add",
    "parenthesis",
    "followed",
    "colon",
    "know",
    "whenever",
    "add",
    "colon",
    "end",
    "line",
    "telling",
    "python",
    "defining",
    "block",
    "code",
    "press",
    "enter",
    "next",
    "line",
    "indented",
    "code",
    "write",
    "belong",
    "function",
    "going",
    "move",
    "two",
    "lines",
    "two",
    "print",
    "statements",
    "inside",
    "function",
    "simply",
    "press",
    "tab",
    "indent",
    "beautiful",
    "also",
    "lets",
    "remove",
    "extra",
    "line",
    "break",
    "better",
    "two",
    "lines",
    "part",
    "greet",
    "user",
    "function",
    "whenever",
    "call",
    "function",
    "two",
    "lines",
    "executed",
    "okay",
    "let",
    "remove",
    "indentation",
    "outside",
    "function",
    "let",
    "print",
    "statement",
    "print",
    "start",
    "let",
    "call",
    "function",
    "greet",
    "user",
    "finally",
    "let",
    "another",
    "create",
    "statement",
    "print",
    "finish",
    "little",
    "warning",
    "underline",
    "hover",
    "mouse",
    "line",
    "tool",
    "telling",
    "add",
    "two",
    "blank",
    "lines",
    "function",
    "definition",
    "coming",
    "pep8",
    "document",
    "defines",
    "best",
    "practices",
    "formatting",
    "code",
    "look",
    "future",
    "make",
    "pycharm",
    "happy",
    "lets",
    "add",
    "extra",
    "line",
    "break",
    "function",
    "whenever",
    "define",
    "function",
    "need",
    "add",
    "two",
    "lines",
    "breaks",
    "okay",
    "let",
    "run",
    "program",
    "see",
    "happens",
    "alright",
    "4",
    "messages",
    "terminal",
    "first",
    "get",
    "start",
    "message",
    "get",
    "messages",
    "coming",
    "create",
    "function",
    "either",
    "welcome",
    "aboard",
    "finally",
    "see",
    "finished",
    "message",
    "let",
    "explain",
    "flow",
    "program",
    "python",
    "runs",
    "code",
    "actually",
    "print",
    "two",
    "messages",
    "terminal",
    "two",
    "lines",
    "code",
    "inside",
    "function",
    "would",
    "get",
    "executed",
    "call",
    "function",
    "call",
    "function",
    "lines",
    "get",
    "executed",
    "okay",
    "execution",
    "program",
    "actually",
    "starts",
    "first",
    "message",
    "see",
    "terminal",
    "start",
    "message",
    "python",
    "sees",
    "calling",
    "greet",
    "function",
    "jump",
    "execute",
    "two",
    "lines",
    "jump",
    "function",
    "continue",
    "normal",
    "execution",
    "program",
    "print",
    "finish",
    "message",
    "terminal",
    "functions",
    "work",
    "also",
    "note",
    "order",
    "code",
    "matters",
    "calling",
    "greet",
    "function",
    "defined",
    "try",
    "call",
    "define",
    "see",
    "error",
    "example",
    "call",
    "greet",
    "user",
    "function",
    "right",
    "see",
    "immediately",
    "get",
    "red",
    "underline",
    "says",
    "unresolved",
    "reference",
    "greet",
    "user",
    "basically",
    "means",
    "python",
    "know",
    "greet",
    "user",
    "defined",
    "anywhere",
    "always",
    "define",
    "functions",
    "first",
    "call",
    "function",
    "created",
    "last",
    "tutorial",
    "got",
    "question",
    "difference",
    "calling",
    "functions",
    "nd",
    "print",
    "function",
    "python",
    "difference",
    "print",
    "function",
    "takes",
    "information",
    "case",
    "message",
    "want",
    "print",
    "greet",
    "function",
    "take",
    "information",
    "would",
    "nicer",
    "could",
    "pass",
    "name",
    "user",
    "instead",
    "saying",
    "hi",
    "could",
    "print",
    "name",
    "user",
    "tutorial",
    "going",
    "show",
    "pass",
    "information",
    "functions",
    "pretty",
    "easy",
    "back",
    "definition",
    "greet",
    "user",
    "function",
    "inside",
    "parenthesis",
    "add",
    "parameters",
    "parameters",
    "pale",
    "holders",
    "receiving",
    "information",
    "example",
    "add",
    "name",
    "parameter",
    "pass",
    "name",
    "user",
    "calling",
    "function",
    "let",
    "pass",
    "jon",
    "call",
    "function",
    "pass",
    "value",
    "name",
    "parameter",
    "set",
    "jon",
    "act",
    "like",
    "local",
    "variable",
    "defined",
    "inside",
    "function",
    "imagine",
    "parameter",
    "instead",
    "variable",
    "like",
    "name",
    "set",
    "jump",
    "could",
    "simply",
    "print",
    "name",
    "user",
    "could",
    "use",
    "formatted",
    "string",
    "print",
    "value",
    "name",
    "variable",
    "right",
    "really",
    "local",
    "variable",
    "defined",
    "function",
    "parameter",
    "exactly",
    "thing",
    "parameters",
    "receive",
    "information",
    "functions",
    "let",
    "go",
    "ahead",
    "run",
    "program",
    "take",
    "look",
    "get",
    "hi",
    "john",
    "welcome",
    "aboard",
    "take",
    "next",
    "level",
    "call",
    "function",
    "one",
    "time",
    "greet",
    "user",
    "time",
    "supply",
    "different",
    "name",
    "let",
    "say",
    "mary",
    "reusing",
    "greet",
    "function",
    "passing",
    "different",
    "value",
    "imagine",
    "function",
    "would",
    "repeat",
    "line",
    "twice",
    "hi",
    "jon",
    "another",
    "time",
    "hi",
    "mary",
    "benefit",
    "defining",
    "functions",
    "take",
    "lines",
    "code",
    "specific",
    "purpose",
    "put",
    "inside",
    "function",
    "let",
    "run",
    "program",
    "one",
    "time",
    "go",
    "get",
    "hi",
    "job",
    "welcome",
    "aboard",
    "get",
    "hi",
    "mary",
    "welcome",
    "aboard",
    "note",
    "function",
    "parameter",
    "obligated",
    "pass",
    "value",
    "parameter",
    "remove",
    "jon",
    "run",
    "program",
    "get",
    "type",
    "error",
    "greet",
    "user",
    "missing",
    "one",
    "required",
    "positional",
    "argument",
    "argument",
    "programming",
    "value",
    "supply",
    "function",
    "back",
    "example",
    "marrying",
    "case",
    "argument",
    "pass",
    "name",
    "parameter",
    "lot",
    "programmers",
    "know",
    "difference",
    "parameters",
    "arguments",
    "think",
    "parameters",
    "holes",
    "placeholders",
    "define",
    "function",
    "receiving",
    "information",
    "arguments",
    "actual",
    "pieces",
    "information",
    "supply",
    "functions",
    "okay",
    "let",
    "bring",
    "back",
    "jon",
    "string",
    "also",
    "define",
    "multiple",
    "parameters",
    "example",
    "let",
    "rename",
    "parameter",
    "first",
    "name",
    "told",
    "right",
    "click",
    "go",
    "refactor",
    "rename",
    "preferably",
    "use",
    "short",
    "cut",
    "shortcut",
    "mac",
    "shift",
    "f6",
    "brings",
    "renamed",
    "dial",
    "box",
    "change",
    "first",
    "underline",
    "name",
    "add",
    "second",
    "parameter",
    "comma",
    "followed",
    "last",
    "underline",
    "name",
    "back",
    "formatted",
    "string",
    "let",
    "also",
    "print",
    "last",
    "name",
    "beautiful",
    "calling",
    "function",
    "supply",
    "another",
    "argument",
    "jon",
    "smith",
    "lets",
    "delete",
    "line",
    "really",
    "need",
    "anymore",
    "run",
    "program",
    "take",
    "look",
    "hi",
    "jon",
    "smith",
    "last",
    "tutorial",
    "learned",
    "whenever",
    "define",
    "parameters",
    "functions",
    "always",
    "supply",
    "values",
    "otherwise",
    "get",
    "error",
    "let",
    "look",
    "error",
    "one",
    "time",
    "going",
    "delete",
    "second",
    "argument",
    "pass",
    "jon",
    "run",
    "program",
    "get",
    "message",
    "greet",
    "user",
    "missing",
    "one",
    "required",
    "position",
    "argument",
    "arguments",
    "like",
    "jon",
    "smith",
    "refer",
    "positional",
    "arguments",
    "means",
    "position",
    "argument",
    "matters",
    "words",
    "first",
    "argument",
    "add",
    "value",
    "first",
    "parameter",
    "second",
    "argument",
    "value",
    "second",
    "parameter",
    "change",
    "position",
    "order",
    "get",
    "different",
    "results",
    "let",
    "take",
    "look",
    "let",
    "pass",
    "smith",
    "first",
    "jon",
    "okay",
    "good",
    "delete",
    "let",
    "go",
    "instead",
    "getting",
    "hi",
    "jon",
    "smith",
    "get",
    "hi",
    "smith",
    "jon",
    "reason",
    "refer",
    "arguments",
    "positional",
    "arguments",
    "positioned",
    "order",
    "matters",
    "python",
    "also",
    "keyword",
    "arguments",
    "position",
    "matter",
    "let",
    "show",
    "work",
    "let",
    "say",
    "want",
    "pass",
    "jon",
    "value",
    "first",
    "name",
    "parameter",
    "simply",
    "specify",
    "first",
    "name",
    "equals",
    "jon",
    "keyword",
    "argument",
    "key",
    "word",
    "argument",
    "combination",
    "parameter",
    "name",
    "followed",
    "value",
    "call",
    "keyword",
    "argument",
    "get",
    "keyword",
    "argument",
    "position",
    "really",
    "matter",
    "supplying",
    "jon",
    "argument",
    "fort",
    "first",
    "parameter",
    "similarly",
    "use",
    "keyword",
    "argument",
    "smith",
    "last",
    "name",
    "equals",
    "smith",
    "2",
    "keyword",
    "arguments",
    "keyword",
    "arguments",
    "worry",
    "order",
    "parameters",
    "mean",
    "always",
    "use",
    "keyword",
    "arguments",
    "really",
    "time",
    "use",
    "positional",
    "arguments",
    "certain",
    "situations",
    "keyword",
    "arguments",
    "helming",
    "us",
    "improve",
    "readability",
    "code",
    "line",
    "7",
    "quite",
    "clear",
    "supplying",
    "smith",
    "last",
    "name",
    "jon",
    "first",
    "name",
    "particular",
    "example",
    "even",
    "keyword",
    "arguments",
    "passing",
    "two",
    "positional",
    "arguments",
    "like",
    "jon",
    "smith",
    "would",
    "sufficient",
    "easy",
    "guess",
    "purpose",
    "arguments",
    "sometimes",
    "dealing",
    "functions",
    "passing",
    "numerical",
    "values",
    "situations",
    "may",
    "quite",
    "clear",
    "values",
    "represent",
    "let",
    "show",
    "example",
    "let",
    "say",
    "function",
    "calculating",
    "total",
    "cost",
    "order",
    "still",
    "call",
    "calculate",
    "underline",
    "cost",
    "calling",
    "function",
    "need",
    "supply",
    "three",
    "pieces",
    "information",
    "one",
    "total",
    "cost",
    "order",
    "items",
    "lets",
    "say",
    "50",
    "dollars",
    "shipping",
    "cost",
    "let",
    "say",
    "5",
    "dollars",
    "last",
    "piece",
    "discount",
    "let",
    "say",
    "0",
    "someone",
    "reading",
    "code",
    "may",
    "sure",
    "three",
    "values",
    "represent",
    "case",
    "improve",
    "readability",
    "code",
    "using",
    "keyword",
    "arguments",
    "prefix",
    "value",
    "name",
    "parameter",
    "target",
    "example",
    "set",
    "total",
    "50",
    "shipping",
    "5",
    "discount",
    "give",
    "code",
    "someone",
    "else",
    "immediately",
    "tell",
    "values",
    "represent",
    "power",
    "keyword",
    "arguments",
    "want",
    "take",
    "away",
    "part",
    "use",
    "positional",
    "arguments",
    "dealing",
    "functions",
    "take",
    "numerical",
    "values",
    "see",
    "improve",
    "readability",
    "code",
    "using",
    "keyword",
    "arguments",
    "simply",
    "prefix",
    "arguments",
    "pass",
    "name",
    "parameters",
    "increase",
    "readability",
    "code",
    "one",
    "thing",
    "need",
    "know",
    "keyword",
    "arguments",
    "keyword",
    "arguments",
    "always",
    "come",
    "positional",
    "arguments",
    "let",
    "show",
    "mean",
    "back",
    "simple",
    "greet",
    "user",
    "function",
    "let",
    "use",
    "keyword",
    "argument",
    "first",
    "thing",
    "let",
    "set",
    "first",
    "name",
    "jon",
    "see",
    "happens",
    "immediately",
    "get",
    "error",
    "positional",
    "argument",
    "keyword",
    "argument",
    "calling",
    "function",
    "supplying",
    "one",
    "keyword",
    "argument",
    "one",
    "positional",
    "argument",
    "python",
    "like",
    "mixing",
    "positional",
    "keyword",
    "arguments",
    "always",
    "use",
    "keyword",
    "arguments",
    "words",
    "lets",
    "remove",
    "keyword",
    "argument",
    "jon",
    "positional",
    "argument",
    "targeting",
    "first",
    "parameter",
    "positional",
    "argument",
    "supply",
    "number",
    "keyword",
    "arguments",
    "set",
    "last",
    "name",
    "smith",
    "look",
    "python",
    "problem",
    "adding",
    "keyword",
    "argument",
    "positional",
    "argument",
    "let",
    "quickly",
    "recap",
    "part",
    "use",
    "positional",
    "arguments",
    "dealing",
    "functions",
    "take",
    "multiple",
    "numerical",
    "values",
    "quite",
    "clear",
    "values",
    "represent",
    "use",
    "keyword",
    "arguments",
    "improve",
    "readability",
    "code",
    "finally",
    "passing",
    "positional",
    "keyword",
    "arguments",
    "use",
    "keyword",
    "arguments",
    "positional",
    "arguments",
    "far",
    "learned",
    "create",
    "functions",
    "send",
    "information",
    "using",
    "parameters",
    "tutorial",
    "going",
    "show",
    "create",
    "functions",
    "return",
    "values",
    "particularly",
    "useful",
    "kind",
    "calculation",
    "function",
    "want",
    "return",
    "result",
    "whoever",
    "using",
    "function",
    "let",
    "show",
    "let",
    "start",
    "defining",
    "function",
    "called",
    "square",
    "function",
    "simply",
    "calculates",
    "square",
    "number",
    "need",
    "add",
    "one",
    "parameter",
    "number",
    "want",
    "calculate",
    "number",
    "times",
    "number",
    "square",
    "number",
    "return",
    "color",
    "outside",
    "function",
    "simply",
    "use",
    "return",
    "statement",
    "return",
    "square",
    "function",
    "simple",
    "one",
    "line",
    "code",
    "real",
    "program",
    "might",
    "function",
    "ten",
    "lines",
    "code",
    "calculate",
    "something",
    "return",
    "statement",
    "valuable",
    "return",
    "values",
    "caller",
    "function",
    "call",
    "square",
    "function",
    "let",
    "say",
    "give",
    "3",
    "function",
    "returns",
    "value",
    "like",
    "input",
    "function",
    "python",
    "input",
    "function",
    "waits",
    "user",
    "type",
    "something",
    "press",
    "enter",
    "return",
    "user",
    "input",
    "string",
    "get",
    "store",
    "variable",
    "like",
    "right",
    "story",
    "story",
    "square",
    "function",
    "square",
    "function",
    "returns",
    "value",
    "simply",
    "get",
    "store",
    "variable",
    "let",
    "call",
    "result",
    "print",
    "result",
    "terminal",
    "go",
    "result",
    "9",
    "could",
    "also",
    "pass",
    "function",
    "called",
    "directly",
    "inside",
    "print",
    "function",
    "without",
    "defining",
    "separate",
    "variable",
    "sometimes",
    "useful",
    "writing",
    "shorter",
    "code",
    "case",
    "case",
    "really",
    "need",
    "result",
    "variable",
    "simply",
    "want",
    "print",
    "square",
    "could",
    "simply",
    "pass",
    "function",
    "call",
    "right",
    "argument",
    "print",
    "function",
    "let",
    "delete",
    "variable",
    "code",
    "shorter",
    "calling",
    "square",
    "function",
    "returns",
    "value",
    "pass",
    "value",
    "argument",
    "print",
    "function",
    "okay",
    "run",
    "program",
    "get",
    "exact",
    "result",
    "go",
    "happens",
    "use",
    "return",
    "statement",
    "function",
    "last",
    "example",
    "simply",
    "used",
    "print",
    "statement",
    "let",
    "temporarily",
    "remove",
    "return",
    "statement",
    "print",
    "result",
    "terminal",
    "like",
    "let",
    "run",
    "program",
    "one",
    "time",
    "see",
    "get",
    "see",
    "two",
    "things",
    "number",
    "9",
    "none",
    "happening",
    "well",
    "python",
    "interpreter",
    "executes",
    "code",
    "first",
    "call",
    "square",
    "function",
    "control",
    "moves",
    "square",
    "function",
    "calculate",
    "square",
    "given",
    "number",
    "print",
    "terminal",
    "reason",
    "see",
    "9",
    "right",
    "default",
    "functions",
    "return",
    "value",
    "none",
    "return",
    "statement",
    "default",
    "python",
    "returns",
    "none",
    "none",
    "object",
    "represents",
    "absence",
    "value",
    "like",
    "nothing",
    "null",
    "c",
    "java",
    "javascript",
    "example",
    "return",
    "statement",
    "default",
    "python",
    "returned",
    "none",
    "function",
    "square",
    "function",
    "executed",
    "value",
    "none",
    "returned",
    "passed",
    "argument",
    "print",
    "function",
    "reason",
    "see",
    "none",
    "second",
    "line",
    "two",
    "things",
    "need",
    "take",
    "away",
    "tutorial",
    "default",
    "functions",
    "python",
    "return",
    "none",
    "change",
    "function",
    "calculates",
    "something",
    "return",
    "result",
    "using",
    "return",
    "statement",
    "code",
    "emoji",
    "converter",
    "program",
    "wrote",
    "earlier",
    "missed",
    "tutorial",
    "make",
    "sure",
    "go",
    "back",
    "watch",
    "told",
    "table",
    "content",
    "right",
    "video",
    "description",
    "simply",
    "click",
    "emoji",
    "converter",
    "tutorial",
    "watch",
    "exercise",
    "reorganize",
    "code",
    "using",
    "function",
    "want",
    "extract",
    "function",
    "code",
    "algorithm",
    "converting",
    "smiley",
    "faces",
    "emoji",
    "something",
    "probably",
    "want",
    "use",
    "couple",
    "different",
    "applications",
    "use",
    "chat",
    "application",
    "email",
    "application",
    "want",
    "write",
    "code",
    "every",
    "time",
    "want",
    "convert",
    "characters",
    "smiley",
    "faces",
    "lines",
    "code",
    "line",
    "1",
    "line",
    "10",
    "lines",
    "belong",
    "algorithm",
    "lines",
    "together",
    "implement",
    "feature",
    "put",
    "lines",
    "separate",
    "function",
    "input",
    "function",
    "input",
    "come",
    "different",
    "forms",
    "currently",
    "using",
    "import",
    "function",
    "receive",
    "input",
    "terminal",
    "applications",
    "might",
    "receive",
    "input",
    "graphical",
    "user",
    "interface",
    "input",
    "come",
    "different",
    "forms",
    "want",
    "put",
    "function",
    "line",
    "reuseable",
    "want",
    "give",
    "function",
    "actual",
    "message",
    "string",
    "care",
    "got",
    "message",
    "one",
    "program",
    "might",
    "get",
    "terminal",
    "another",
    "program",
    "might",
    "get",
    "graphical",
    "user",
    "interface",
    "reason",
    "line",
    "code",
    "function",
    "function",
    "include",
    "last",
    "line",
    "function",
    "output",
    "different",
    "one",
    "program",
    "another",
    "program",
    "printing",
    "output",
    "another",
    "program",
    "might",
    "send",
    "output",
    "email",
    "response",
    "chat",
    "application",
    "general",
    "rule",
    "thumb",
    "function",
    "worry",
    "receiving",
    "input",
    "printing",
    "lines",
    "code",
    "belong",
    "functions",
    "go",
    "ahead",
    "reorganize",
    "code",
    "extracting",
    "function",
    "alright",
    "top",
    "first",
    "need",
    "define",
    "function",
    "first",
    "type",
    "def",
    "give",
    "function",
    "name",
    "like",
    "converter",
    "name",
    "function",
    "clearly",
    "tells",
    "function",
    "responsible",
    "one",
    "one",
    "task",
    "task",
    "clearly",
    "explained",
    "name",
    "function",
    "emoji",
    "converter",
    "function",
    "take",
    "parameter",
    "call",
    "message",
    "string",
    "right",
    "colon",
    "need",
    "move",
    "lines",
    "5",
    "way",
    "end",
    "block",
    "function",
    "let",
    "select",
    "lines",
    "cut",
    "pressing",
    "command",
    "x",
    "mac",
    "control",
    "x",
    "windows",
    "paste",
    "see",
    "lines",
    "automatically",
    "indented",
    "part",
    "emoji",
    "converter",
    "function",
    "happen",
    "computer",
    "make",
    "sure",
    "select",
    "lines",
    "use",
    "tab",
    "indent",
    "alright",
    "emoji",
    "converter",
    "function",
    "beautiful",
    "main",
    "flow",
    "program",
    "first",
    "get",
    "input",
    "user",
    "store",
    "variable",
    "message",
    "call",
    "emoji",
    "converter",
    "pass",
    "message",
    "function",
    "return",
    "value",
    "use",
    "calculate",
    "end",
    "function",
    "right",
    "block",
    "need",
    "add",
    "return",
    "statement",
    "return",
    "output",
    "function",
    "returns",
    "value",
    "get",
    "store",
    "separate",
    "variable",
    "let",
    "call",
    "result",
    "simply",
    "print",
    "make",
    "code",
    "shorter",
    "really",
    "need",
    "code",
    "simply",
    "call",
    "emoji",
    "converter",
    "print",
    "result",
    "like",
    "underline",
    "told",
    "need",
    "blank",
    "lines",
    "function",
    "definitions",
    "currently",
    "one",
    "blank",
    "line",
    "need",
    "add",
    "another",
    "black",
    "line",
    "good",
    "let",
    "go",
    "ahead",
    "run",
    "program",
    "make",
    "sure",
    "everything",
    "works",
    "going",
    "type",
    "message",
    "like",
    "good",
    "morning",
    "smiley",
    "face",
    "good",
    "let",
    "run",
    "one",
    "time",
    "times",
    "add",
    "okay",
    "beautiful",
    "final",
    "result",
    "defined",
    "function",
    "called",
    "emoji",
    "converter",
    "function",
    "takes",
    "parameter",
    "called",
    "message",
    "finally",
    "returns",
    "output",
    "tutorial",
    "going",
    "teach",
    "handle",
    "errors",
    "python",
    "programs",
    "let",
    "start",
    "writing",
    "small",
    "program",
    "get",
    "user",
    "age",
    "terminal",
    "call",
    "input",
    "variable",
    "input",
    "label",
    "like",
    "age",
    "returns",
    "string",
    "need",
    "pass",
    "end",
    "funciton",
    "store",
    "result",
    "variable",
    "called",
    "age",
    "let",
    "print",
    "age",
    "make",
    "sure",
    "implemented",
    "everything",
    "properly",
    "run",
    "program",
    "type",
    "20",
    "20",
    "printed",
    "beautiful",
    "look",
    "exit",
    "code",
    "program",
    "exit",
    "code",
    "0",
    "means",
    "program",
    "terminated",
    "successfully",
    "errors",
    "run",
    "program",
    "one",
    "time",
    "instead",
    "entering",
    "numerical",
    "value",
    "enter",
    "something",
    "like",
    "asd",
    "get",
    "value",
    "error",
    "message",
    "invalid",
    "literal",
    "int",
    "base",
    "basically",
    "message",
    "telling",
    "us",
    "string",
    "asd",
    "contain",
    "valid",
    "home",
    "number",
    "converted",
    "integer",
    "look",
    "exit",
    "code",
    "program",
    "exit",
    "code",
    "1",
    "means",
    "exit",
    "code",
    "crashed",
    "0",
    "always",
    "means",
    "success",
    "anything",
    "0",
    "means",
    "crash",
    "good",
    "python",
    "programmer",
    "anticipate",
    "situation",
    "want",
    "let",
    "entire",
    "program",
    "crash",
    "user",
    "entered",
    "invalid",
    "value",
    "instead",
    "letting",
    "program",
    "crash",
    "handle",
    "situation",
    "print",
    "proper",
    "error",
    "message",
    "going",
    "show",
    "tutorial",
    "get",
    "look",
    "type",
    "error",
    "get",
    "value",
    "error",
    "remember",
    "going",
    "get",
    "back",
    "shortly",
    "handle",
    "errors",
    "python",
    "construct",
    "called",
    "try",
    "accept",
    "use",
    "handle",
    "errors",
    "let",
    "show",
    "works",
    "top",
    "type",
    "try",
    "know",
    "defining",
    "code",
    "block",
    "going",
    "move",
    "two",
    "lines",
    "inside",
    "try",
    "block",
    "press",
    "tab",
    "remove",
    "black",
    "line",
    "two",
    "lines",
    "part",
    "try",
    "block",
    "right",
    "try",
    "type",
    "accept",
    "add",
    "type",
    "error",
    "program",
    "may",
    "encounter",
    "value",
    "error",
    "okay",
    "add",
    "colon",
    "block",
    "define",
    "happen",
    "program",
    "encounters",
    "error",
    "type",
    "value",
    "error",
    "case",
    "want",
    "print",
    "proper",
    "error",
    "message",
    "print",
    "invalid",
    "value",
    "try",
    "accept",
    "telling",
    "python",
    "hey",
    "go",
    "ahead",
    "try",
    "running",
    "one",
    "two",
    "lines",
    "code",
    "encounter",
    "error",
    "type",
    "value",
    "error",
    "instead",
    "crashing",
    "program",
    "try",
    "error",
    "message",
    "terminal",
    "works",
    "accurately",
    "programming",
    "reefer",
    "kind",
    "error",
    "exception",
    "exception",
    "kind",
    "error",
    "crashes",
    "program",
    "user",
    "enters",
    "invalid",
    "value",
    "line",
    "code",
    "line",
    "2",
    "raise",
    "exception",
    "line",
    "4",
    "catch",
    "print",
    "error",
    "message",
    "program",
    "longer",
    "crash",
    "let",
    "show",
    "let",
    "go",
    "ahead",
    "run",
    "age",
    "20",
    "everything",
    "works",
    "like",
    "exit",
    "code",
    "0",
    "let",
    "rerun",
    "program",
    "enter",
    "asd",
    "get",
    "proper",
    "error",
    "message",
    "invalid",
    "error",
    "menu",
    "exit",
    "code",
    "0",
    "means",
    "program",
    "completed",
    "successfully",
    "crash",
    "also",
    "handle",
    "different",
    "kinds",
    "errors",
    "exceptions",
    "example",
    "right",
    "get",
    "age",
    "let",
    "define",
    "variable",
    "income",
    "set",
    "define",
    "another",
    "variable",
    "called",
    "risk",
    "set",
    "income",
    "divided",
    "age",
    "let",
    "run",
    "program",
    "enter",
    "0",
    "game",
    "see",
    "happened",
    "0",
    "obviously",
    "numerical",
    "value",
    "enter",
    "value",
    "technically",
    "get",
    "exceptions",
    "take",
    "look",
    "program",
    "crashed",
    "0",
    "division",
    "error",
    "divide",
    "number",
    "look",
    "exit",
    "code",
    "could",
    "catch",
    "kind",
    "error",
    "kind",
    "exception",
    "accept",
    "block",
    "accept",
    "block",
    "cashing",
    "exceptions",
    "type",
    "value",
    "error",
    "happens",
    "try",
    "convert",
    "nonnumerical",
    "value",
    "integer",
    "situation",
    "like",
    "handle",
    "different",
    "kinds",
    "exceptions",
    "add",
    "another",
    "except",
    "statement",
    "exception",
    "type",
    "0",
    "division",
    "error",
    "block",
    "print",
    "different",
    "kind",
    "message",
    "like",
    "age",
    "let",
    "run",
    "program",
    "one",
    "time",
    "going",
    "enter",
    "0",
    "age",
    "get",
    "error",
    "message",
    "age",
    "0",
    "look",
    "exit",
    "code",
    "0",
    "program",
    "crash",
    "recap",
    "used",
    "try",
    "accept",
    "blocks",
    "handle",
    "exceptions",
    "raised",
    "programs",
    "good",
    "programmer",
    "always",
    "anticipate",
    "kind",
    "exceptions",
    "handle",
    "properly",
    "tutorial",
    "going",
    "talk",
    "guys",
    "comments",
    "python",
    "use",
    "comments",
    "add",
    "notes",
    "comments",
    "programs",
    "example",
    "going",
    "make",
    "print",
    "statement",
    "sky",
    "blue",
    "add",
    "comment",
    "using",
    "hi",
    "sign",
    "whatever",
    "type",
    "going",
    "get",
    "ignored",
    "going",
    "get",
    "executed",
    "let",
    "show",
    "let",
    "run",
    "program",
    "look",
    "see",
    "message",
    "sky",
    "blue",
    "comment",
    "explain",
    "something",
    "code",
    "use",
    "reminders",
    "fix",
    "things",
    "clear",
    "things",
    "use",
    "communicate",
    "things",
    "developers",
    "reading",
    "code",
    "written",
    "code",
    "certain",
    "way",
    "good",
    "use",
    "cases",
    "using",
    "comments",
    "also",
    "comments",
    "multiple",
    "lines",
    "simply",
    "add",
    "comments",
    "line",
    "start",
    "new",
    "hi",
    "sign",
    "one",
    "thing",
    "need",
    "avoid",
    "using",
    "comments",
    "explaining",
    "code",
    "example",
    "bad",
    "comment",
    "let",
    "delete",
    "two",
    "lines",
    "comment",
    "going",
    "say",
    "print",
    "sky",
    "blue",
    "bad",
    "comment",
    "telling",
    "obvious",
    "telling",
    "slide",
    "going",
    "print",
    "sky",
    "blue",
    "problem",
    "comment",
    "apart",
    "verbose",
    "repetitive",
    "come",
    "change",
    "sky",
    "ocean",
    "comment",
    "gets",
    "outdated",
    "overtime",
    "change",
    "code",
    "come",
    "back",
    "modify",
    "corresponding",
    "comment",
    "seen",
    "developers",
    "add",
    "comments",
    "front",
    "functions",
    "example",
    "define",
    "function",
    "let",
    "say",
    "square",
    "takes",
    "number",
    "simply",
    "returns",
    "number",
    "times",
    "number",
    "obvious",
    "function",
    "calculates",
    "returns",
    "square",
    "given",
    "number",
    "really",
    "need",
    "add",
    "comment",
    "explain",
    "calculates",
    "returns",
    "square",
    "number",
    "repetitive",
    "creates",
    "noiser",
    "code",
    "someone",
    "else",
    "reading",
    "code",
    "get",
    "distracted",
    "unnecessary",
    "comments",
    "use",
    "comments",
    "explain",
    "whys",
    "hows",
    "made",
    "certain",
    "assumptions",
    "use",
    "comments",
    "explain",
    "assumptions",
    "use",
    "add",
    "notes",
    "remind",
    "developers",
    "something",
    "code",
    "comments",
    "good",
    "much",
    "good",
    "thing",
    "bad",
    "thing",
    "tutorial",
    "going",
    "talk",
    "guys",
    "classes",
    "python",
    "classes",
    "extremely",
    "important",
    "programming",
    "specific",
    "python",
    "fact",
    "lot",
    "programming",
    "languages",
    "support",
    "notion",
    "classes",
    "use",
    "classes",
    "define",
    "new",
    "types",
    "example",
    "far",
    "learned",
    "basic",
    "types",
    "python",
    "like",
    "numbers",
    "strings",
    "booleans",
    "basic",
    "simple",
    "types",
    "python",
    "also",
    "learn",
    "couple",
    "complex",
    "types",
    "like",
    "lists",
    "dictionaries",
    "types",
    "extremely",
    "useful",
    "always",
    "used",
    "model",
    "complex",
    "concepts",
    "example",
    "think",
    "concept",
    "point",
    "shopping",
    "cart",
    "shopping",
    "cart",
    "boolean",
    "list",
    "dictionary",
    "different",
    "kind",
    "thing",
    "use",
    "classes",
    "define",
    "new",
    "types",
    "model",
    "real",
    "concepts",
    "new",
    "model",
    "going",
    "show",
    "define",
    "new",
    "type",
    "called",
    "point",
    "new",
    "type",
    "going",
    "methods",
    "working",
    "points",
    "example",
    "back",
    "main",
    "program",
    "let",
    "create",
    "list",
    "numbers",
    "1",
    "2",
    "3",
    "know",
    "type",
    "dot",
    "functions",
    "methods",
    "available",
    "list",
    "objects",
    "similar",
    "going",
    "create",
    "new",
    "type",
    "called",
    "point",
    "point",
    "going",
    "metas",
    "like",
    "move",
    "draw",
    "get",
    "distance",
    "another",
    "point",
    "operations",
    "perform",
    "points",
    "let",
    "show",
    "start",
    "defining",
    "class",
    "using",
    "class",
    "keyword",
    "right",
    "give",
    "class",
    "name",
    "look",
    "naming",
    "convention",
    "used",
    "capitalized",
    "first",
    "letter",
    "call",
    "pascal",
    "naming",
    "convention",
    "naming",
    "convention",
    "used",
    "naming",
    "classes",
    "different",
    "convention",
    "use",
    "naming",
    "variables",
    "functions",
    "variables",
    "functions",
    "always",
    "use",
    "lower",
    "case",
    "letters",
    "separate",
    "multiple",
    "words",
    "using",
    "underscore",
    "naming",
    "classes",
    "use",
    "underscore",
    "separate",
    "multiple",
    "words",
    "instead",
    "capitalize",
    "first",
    "letter",
    "every",
    "word",
    "case",
    "class",
    "single",
    "word",
    "multiple",
    "words",
    "let",
    "say",
    "email",
    "client",
    "look",
    "capitalized",
    "first",
    "letter",
    "every",
    "word",
    "called",
    "pascal",
    "naming",
    "convention",
    "comes",
    "old",
    "pascal",
    "language",
    "might",
    "heard",
    "back",
    "point",
    "class",
    "add",
    "colon",
    "means",
    "going",
    "define",
    "block",
    "block",
    "define",
    "functions",
    "methods",
    "belong",
    "points",
    "example",
    "define",
    "function",
    "called",
    "move",
    "moving",
    "port",
    "note",
    "soon",
    "type",
    "open",
    "parenthesis",
    "pycharm",
    "automatically",
    "adds",
    "self",
    "special",
    "keyword",
    "going",
    "get",
    "back",
    "shortly",
    "method",
    "let",
    "print",
    "move",
    "terminal",
    "let",
    "define",
    "another",
    "method",
    "like",
    "draw",
    "define",
    "draw",
    "method",
    "let",
    "print",
    "draw",
    "terminal",
    "let",
    "remove",
    "indentation",
    "done",
    "definition",
    "point",
    "class",
    "need",
    "add",
    "two",
    "line",
    "breaks",
    "okay",
    "class",
    "defined",
    "new",
    "type",
    "new",
    "type",
    "create",
    "new",
    "objects",
    "object",
    "instance",
    "class",
    "class",
    "simply",
    "defines",
    "blueprint",
    "template",
    "creating",
    "objects",
    "objects",
    "actual",
    "instances",
    "based",
    "blue",
    "print",
    "tens",
    "hundreds",
    "points",
    "screen",
    "objects",
    "instances",
    "create",
    "object",
    "type",
    "name",
    "class",
    "call",
    "like",
    "function",
    "creates",
    "new",
    "object",
    "returns",
    "store",
    "object",
    "variable",
    "let",
    "call",
    "point",
    "1",
    "go",
    "use",
    "dot",
    "operator",
    "look",
    "two",
    "methods",
    "defined",
    "draw",
    "move",
    "also",
    "bunch",
    "methods",
    "start",
    "two",
    "underscores",
    "called",
    "magic",
    "methods",
    "look",
    "later",
    "course",
    "let",
    "call",
    "draw",
    "method",
    "point",
    "object",
    "run",
    "program",
    "see",
    "draw",
    "printed",
    "terminal",
    "apart",
    "methods",
    "objects",
    "also",
    "attributes",
    "attributes",
    "like",
    "variables",
    "belong",
    "particular",
    "object",
    "example",
    "defined",
    "set",
    "easily",
    "print",
    "attributes",
    "let",
    "print",
    "run",
    "program",
    "one",
    "time",
    "take",
    "look",
    "x",
    "coordinate",
    "create",
    "another",
    "object",
    "let",
    "call",
    "type",
    "name",
    "class",
    "call",
    "like",
    "function",
    "object",
    "completely",
    "different",
    "first",
    "object",
    "print",
    "look",
    "get",
    "attribute",
    "error",
    "point",
    "object",
    "attribute",
    "called",
    "object",
    "different",
    "instance",
    "points",
    "class",
    "assign",
    "value",
    "let",
    "send",
    "1",
    "run",
    "program",
    "see",
    "x",
    "coordinates",
    "recap",
    "use",
    "classes",
    "define",
    "new",
    "types",
    "types",
    "methods",
    "define",
    "body",
    "class",
    "also",
    "attributes",
    "set",
    "anywhere",
    "programs",
    "learned",
    "create",
    "new",
    "types",
    "using",
    "classes",
    "therein",
    "tiny",
    "problem",
    "implementation",
    "create",
    "pooint",
    "object",
    "without",
    "x",
    "coordinate",
    "let",
    "show",
    "point",
    "create",
    "object",
    "set",
    "let",
    "print",
    "point",
    "run",
    "program",
    "get",
    "attribute",
    "error",
    "saw",
    "last",
    "tutorial",
    "point",
    "object",
    "attribute",
    "called",
    "x",
    "problem",
    "possible",
    "point",
    "object",
    "without",
    "x",
    "coordinates",
    "really",
    "make",
    "sense",
    "whenever",
    "talk",
    "point",
    "ned",
    "know",
    "point",
    "located",
    "solve",
    "problem",
    "use",
    "constructor",
    "constructor",
    "function",
    "gets",
    "called",
    "time",
    "creating",
    "object",
    "line",
    "9",
    "creating",
    "point",
    "object",
    "want",
    "pass",
    "values",
    "x",
    "coordinates",
    "let",
    "say",
    "10",
    "20",
    "point",
    "object",
    "get",
    "x",
    "coordinates",
    "initialized",
    "need",
    "add",
    "special",
    "method",
    "class",
    "called",
    "constructor",
    "top",
    "define",
    "new",
    "function",
    "look",
    "name",
    "function",
    "double",
    "underscore",
    "init",
    "double",
    "score",
    "init",
    "short",
    "initialized",
    "function",
    "method",
    "gets",
    "called",
    "create",
    "new",
    "point",
    "object",
    "press",
    "enter",
    "automatically",
    "adds",
    "self",
    "parenthesis",
    "going",
    "come",
    "back",
    "shortly",
    "right",
    "self",
    "want",
    "add",
    "2",
    "extra",
    "parameters",
    "x",
    "let",
    "type",
    "x",
    "body",
    "method",
    "read",
    "values",
    "past",
    "use",
    "initialize",
    "object",
    "pass",
    "10",
    "20",
    "arguments",
    "used",
    "x",
    "parameters",
    "initialize",
    "object",
    "type",
    "code",
    "like",
    "equals",
    "equals",
    "going",
    "self",
    "see",
    "reference",
    "current",
    "object",
    "back",
    "line",
    "13",
    "create",
    "new",
    "point",
    "object",
    "self",
    "references",
    "object",
    "memory",
    "object",
    "referencing",
    "using",
    "cariable",
    "earlier",
    "typed",
    "equals",
    "10",
    "code",
    "set",
    "x",
    "attribute",
    "point",
    "object",
    "constructor",
    "exactly",
    "use",
    "self",
    "reference",
    "current",
    "object",
    "set",
    "x",
    "attribute",
    "x",
    "argument",
    "passed",
    "function",
    "using",
    "init",
    "method",
    "initialize",
    "objects",
    "refer",
    "method",
    "constructor",
    "method",
    "used",
    "construct",
    "create",
    "object",
    "okay",
    "let",
    "remove",
    "line",
    "14",
    "created",
    "point",
    "object",
    "values",
    "print",
    "let",
    "run",
    "program",
    "go",
    "x",
    "10",
    "also",
    "change",
    "values",
    "later",
    "printing",
    "set",
    "11",
    "run",
    "program",
    "x",
    "updated",
    "beautiful",
    "alright",
    "exercise",
    "want",
    "define",
    "new",
    "type",
    "called",
    "person",
    "person",
    "objects",
    "name",
    "attribute",
    "well",
    "talk",
    "method",
    "easy",
    "exercise",
    "tackle",
    "probably",
    "couple",
    "minutes",
    "alright",
    "first",
    "start",
    "class",
    "keyboard",
    "define",
    "person",
    "class",
    "look",
    "naming",
    "convention",
    "used",
    "first",
    "letter",
    "first",
    "word",
    "case",
    "word",
    "uppercase",
    "class",
    "define",
    "methods",
    "need",
    "currently",
    "method",
    "talk",
    "method",
    "define",
    "talk",
    "pycharm",
    "automatically",
    "adds",
    "self",
    "come",
    "back",
    "shortly",
    "let",
    "print",
    "talk",
    "body",
    "person",
    "class",
    "remove",
    "indentation",
    "add",
    "two",
    "line",
    "breaks",
    "defining",
    "classes",
    "create",
    "personal",
    "object",
    "let",
    "call",
    "jon",
    "set",
    "person",
    "call",
    "jon",
    "talk",
    "let",
    "run",
    "program",
    "get",
    "message",
    "beautiful",
    "person",
    "objects",
    "also",
    "name",
    "attribute",
    "make",
    "sense",
    "person",
    "without",
    "name",
    "use",
    "constructor",
    "function",
    "top",
    "add",
    "new",
    "method",
    "name",
    "method",
    "double",
    "underscore",
    "init",
    "double",
    "underscore",
    "call",
    "method",
    "constructor",
    "method",
    "need",
    "add",
    "another",
    "parameter",
    "name",
    "simply",
    "set",
    "name",
    "self",
    "references",
    "current",
    "object",
    "setting",
    "name",
    "attribute",
    "current",
    "object",
    "name",
    "argument",
    "passed",
    "method",
    "go",
    "back",
    "line",
    "9",
    "creating",
    "person",
    "object",
    "pass",
    "name",
    "let",
    "see",
    "jon",
    "smith",
    "let",
    "print",
    "run",
    "program",
    "go",
    "jon",
    "smith",
    "printed",
    "terminal",
    "beautiful",
    "part",
    "exercise",
    "let",
    "make",
    "program",
    "little",
    "interesting",
    "instead",
    "printing",
    "boring",
    "message",
    "let",
    "print",
    "hi",
    "jon",
    "smith",
    "use",
    "formatted",
    "string",
    "message",
    "like",
    "hi",
    "want",
    "dynamically",
    "add",
    "name",
    "person",
    "well",
    "look",
    "parameter",
    "talk",
    "method",
    "told",
    "every",
    "method",
    "class",
    "parameter",
    "self",
    "first",
    "parameter",
    "method",
    "okay",
    "self",
    "get",
    "reference",
    "current",
    "object",
    "add",
    "curly",
    "braces",
    "type",
    "self",
    "thsi",
    "returns",
    "name",
    "attribute",
    "current",
    "person",
    "object",
    "remove",
    "line",
    "10",
    "print",
    "simply",
    "call",
    "lets",
    "run",
    "program",
    "hi",
    "jon",
    "smith",
    "go",
    "beautiful",
    "build",
    "another",
    "person",
    "object",
    "let",
    "say",
    "bob",
    "new",
    "person",
    "called",
    "bob",
    "smith",
    "say",
    "run",
    "program",
    "get",
    "different",
    "message",
    "hi",
    "bob",
    "smith",
    "object",
    "different",
    "instance",
    "person",
    "class",
    "tutorial",
    "im",
    "going",
    "talk",
    "inheritance",
    "python",
    "inheritance",
    "mechanism",
    "using",
    "code",
    "limited",
    "python",
    "languages",
    "support",
    "classes",
    "also",
    "support",
    "inherence",
    "let",
    "ms",
    "works",
    "let",
    "say",
    "dog",
    "class",
    "simple",
    "walk",
    "method",
    "method",
    "simply",
    "printing",
    "walk",
    "message",
    "terminal",
    "let",
    "say",
    "real",
    "program",
    "instead",
    "one",
    "line",
    "code",
    "going",
    "10",
    "lines",
    "code",
    "future",
    "want",
    "define",
    "another",
    "class",
    "let",
    "say",
    "cat",
    "want",
    "add",
    "walk",
    "method",
    "well",
    "sow",
    "e",
    "repeat",
    "code",
    "new",
    "class",
    "walk",
    "bad",
    "repeated",
    "duplicated",
    "code",
    "programming",
    "principle",
    "called",
    "dry",
    "short",
    "repeat",
    "let",
    "say",
    "sometime",
    "future",
    "discover",
    "problem",
    "walk",
    "method",
    "repeated",
    "duplicated",
    "method",
    "many",
    "places",
    "come",
    "back",
    "fix",
    "problem",
    "every",
    "single",
    "place",
    "duplicated",
    "code",
    "programming",
    "define",
    "something",
    "twice",
    "solve",
    "problem",
    "different",
    "approaches",
    "one",
    "approach",
    "easier",
    "understand",
    "beginners",
    "inherence",
    "works",
    "define",
    "new",
    "class",
    "called",
    "maml",
    "move",
    "walk",
    "method",
    "right",
    "dog",
    "cat",
    "classes",
    "inherit",
    "method",
    "parent",
    "like",
    "humans",
    "inherit",
    "certain",
    "attributes",
    "behaviors",
    "form",
    "parents",
    "exactly",
    "top",
    "define",
    "new",
    "class",
    "let",
    "call",
    "mammal",
    "need",
    "move",
    "walk",
    "method",
    "select",
    "cut",
    "using",
    "command",
    "x",
    "mac",
    "control",
    "x",
    "windows",
    "paste",
    "beautiful",
    "want",
    "dog",
    "class",
    "inherit",
    "class",
    "mammal",
    "class",
    "right",
    "class",
    "name",
    "add",
    "parenthesis",
    "type",
    "name",
    "parent",
    "class",
    "case",
    "mammal",
    "dog",
    "class",
    "inherit",
    "methods",
    "defined",
    "mammal",
    "class",
    "tiny",
    "problem",
    "look",
    "line",
    "9",
    "red",
    "underline",
    "reason",
    "happening",
    "python",
    "like",
    "empty",
    "class",
    "right",
    "dog",
    "class",
    "empty",
    "anything",
    "either",
    "need",
    "add",
    "methods",
    "specific",
    "dogs",
    "make",
    "python",
    "happy",
    "use",
    "path",
    "statement",
    "basically",
    "means",
    "nothing",
    "telling",
    "python",
    "interpreter",
    "hey",
    "pass",
    "line",
    "worry",
    "empty",
    "class",
    "okay",
    "told",
    "class",
    "two",
    "line",
    "breaks",
    "right",
    "one",
    "line",
    "break",
    "reason",
    "little",
    "warning",
    "let",
    "add",
    "another",
    "black",
    "line",
    "beautiful",
    "dog",
    "class",
    "inheriting",
    "walk",
    "method",
    "mammal",
    "need",
    "apply",
    "change",
    "cat",
    "class",
    "cat",
    "inherit",
    "mammal",
    "use",
    "path",
    "statement",
    "changes",
    "create",
    "either",
    "dog",
    "cat",
    "object",
    "let",
    "say",
    "dog",
    "one",
    "set",
    "dog",
    "object",
    "type",
    "dot",
    "look",
    "walk",
    "method",
    "defined",
    "mamall",
    "class",
    "easily",
    "call",
    "let",
    "run",
    "program",
    "go",
    "see",
    "walk",
    "message",
    "dog",
    "cat",
    "classes",
    "inheriting",
    "classes",
    "methods",
    "defined",
    "parent",
    "class",
    "add",
    "methods",
    "specific",
    "dogs",
    "example",
    "define",
    "method",
    "called",
    "bark",
    "print",
    "bark",
    "need",
    "path",
    "statement",
    "already",
    "defined",
    "one",
    "method",
    "dog",
    "class",
    "type",
    "dog1",
    "look",
    "two",
    "methods",
    "one",
    "walk",
    "method",
    "inherited",
    "bark",
    "method",
    "defined",
    "dog",
    "class",
    "similarly",
    "add",
    "method",
    "specific",
    "cat",
    "example",
    "define",
    "method",
    "called",
    "annoying",
    "hate",
    "cats",
    "let",
    "print",
    "annoying",
    "create",
    "cat",
    "object",
    "let",
    "remove",
    "cat1",
    "type",
    "cat1",
    "two",
    "methods",
    "dog",
    "annoying",
    "basics",
    "inheritance",
    "python",
    "really",
    "goes",
    "beyond",
    "scope",
    "beginners",
    "tutorial",
    "interested",
    "learn",
    "inheritance",
    "mechanisms",
    "reusing",
    "code",
    "encourage",
    "get",
    "complete",
    "python",
    "course",
    "tutorial",
    "going",
    "talk",
    "modules",
    "python",
    "module",
    "python",
    "basically",
    "file",
    "python",
    "code",
    "use",
    "modules",
    "organize",
    "code",
    "files",
    "like",
    "sections",
    "super",
    "market",
    "go",
    "super",
    "market",
    "different",
    "sections",
    "fruits",
    "vegetables",
    "cleaning",
    "products",
    "one",
    "section",
    "products",
    "super",
    "market",
    "concept",
    "programming",
    "instead",
    "writing",
    "code",
    "instead",
    "writing",
    "functions",
    "classes",
    "want",
    "break",
    "code",
    "multiple",
    "files",
    "refer",
    "file",
    "module",
    "code",
    "better",
    "organized",
    "structured",
    "also",
    "ability",
    "reuse",
    "code",
    "example",
    "defined",
    "two",
    "functions",
    "converting",
    "weight",
    "pounds",
    "kilograms",
    "vice",
    "versa",
    "take",
    "two",
    "functions",
    "put",
    "separate",
    "module",
    "called",
    "converters",
    "import",
    "module",
    "program",
    "needs",
    "converter",
    "functions",
    "let",
    "show",
    "let",
    "open",
    "project",
    "panel",
    "right",
    "click",
    "project",
    "go",
    "new",
    "add",
    "new",
    "file",
    "going",
    "call",
    "file",
    "go",
    "back",
    "select",
    "code",
    "cut",
    "paste",
    "new",
    "module",
    "cleaned",
    "app",
    "module",
    "bloated",
    "different",
    "functions",
    "write",
    "functions",
    "classes",
    "put",
    "corresponding",
    "modules",
    "module",
    "contain",
    "related",
    "functions",
    "classes",
    "okay",
    "want",
    "import",
    "converters",
    "module",
    "app",
    "module",
    "really",
    "easy",
    "top",
    "write",
    "import",
    "converters",
    "without",
    "extension",
    "add",
    "type",
    "name",
    "file",
    "let",
    "close",
    "project",
    "panel",
    "converter",
    "object",
    "use",
    "dot",
    "operator",
    "access",
    "members",
    "currently",
    "defined",
    "two",
    "functions",
    "inside",
    "module",
    "kilogram",
    "pound",
    "pounds",
    "kilograms",
    "easily",
    "call",
    "one",
    "functions",
    "let",
    "pass",
    "70",
    "kilos",
    "get",
    "result",
    "print",
    "run",
    "program",
    "55",
    "pounds",
    "also",
    "another",
    "syntax",
    "importing",
    "modules",
    "let",
    "show",
    "instead",
    "importing",
    "entire",
    "module",
    "import",
    "specific",
    "functions",
    "module",
    "works",
    "type",
    "add",
    "name",
    "module",
    "converters",
    "import",
    "press",
    "control",
    "space",
    "see",
    "list",
    "functions",
    "defined",
    "module",
    "grab",
    "one",
    "functions",
    "let",
    "say",
    "kilogram",
    "pound",
    "directly",
    "call",
    "function",
    "like",
    "function",
    "defined",
    "file",
    "compare",
    "line",
    "4",
    "line",
    "line",
    "6",
    "prefix",
    "function",
    "name",
    "object",
    "converters",
    "type",
    "converters",
    "able",
    "access",
    "function",
    "contrast",
    "import",
    "specific",
    "function",
    "module",
    "easily",
    "call",
    "function",
    "without",
    "prefixing",
    "module",
    "name",
    "need",
    "take",
    "away",
    "use",
    "modules",
    "better",
    "organize",
    "code",
    "instead",
    "writing",
    "code",
    "instead",
    "writing",
    "functions",
    "one",
    "file",
    "break",
    "code",
    "across",
    "multiple",
    "files",
    "file",
    "called",
    "module",
    "contain",
    "related",
    "functions",
    "classes",
    "import",
    "module",
    "another",
    "module",
    "case",
    "importing",
    "converters",
    "module",
    "app",
    "module",
    "saw",
    "two",
    "ways",
    "import",
    "module",
    "import",
    "entire",
    "module",
    "get",
    "object",
    "name",
    "module",
    "type",
    "converters",
    "able",
    "access",
    "functions",
    "classes",
    "defined",
    "module",
    "appraoch",
    "impot",
    "specific",
    "function",
    "class",
    "module",
    "using",
    "import",
    "statement",
    "exercise",
    "earlier",
    "course",
    "exercise",
    "finding",
    "largest",
    "number",
    "list",
    "top",
    "list",
    "numbers",
    "initially",
    "set",
    "max",
    "first",
    "number",
    "list",
    "look",
    "list",
    "get",
    "number",
    "current",
    "number",
    "grater",
    "max",
    "reset",
    "max",
    "finally",
    "done",
    "loop",
    "print",
    "max",
    "terminal",
    "want",
    "code",
    "currently",
    "organization",
    "functions",
    "modules",
    "wrote",
    "code",
    "okay",
    "small",
    "programs",
    "programs",
    "grow",
    "need",
    "properly",
    "organize",
    "code",
    "classes",
    "modules",
    "part",
    "exercise",
    "want",
    "write",
    "function",
    "call",
    "find",
    "max",
    "function",
    "take",
    "list",
    "return",
    "largest",
    "number",
    "list",
    "go",
    "ahead",
    "put",
    "function",
    "separate",
    "module",
    "extract",
    "put",
    "module",
    "called",
    "utils",
    "module",
    "going",
    "bunch",
    "utility",
    "functions",
    "oaky",
    "import",
    "utility",
    "module",
    "current",
    "module",
    "call",
    "function",
    "finally",
    "get",
    "result",
    "print",
    "terminal",
    "fantastic",
    "exercise",
    "teach",
    "properly",
    "organize",
    "code",
    "go",
    "ahead",
    "spend",
    "couple",
    "minutes",
    "exercise",
    "first",
    "step",
    "define",
    "function",
    "called",
    "find",
    "max",
    "top",
    "going",
    "define",
    "function",
    "find",
    "max",
    "function",
    "take",
    "list",
    "numbers",
    "add",
    "parameter",
    "called",
    "numbers",
    "inside",
    "function",
    "want",
    "lines",
    "algorithm",
    "finding",
    "largest",
    "number",
    "list",
    "want",
    "bring",
    "first",
    "line",
    "create",
    "list",
    "somewhere",
    "program",
    "going",
    "create",
    "list",
    "tehen",
    "pass",
    "argument",
    "pass",
    "max",
    "function",
    "okay",
    "let",
    "go",
    "ahead",
    "grab",
    "lines",
    "cut",
    "put",
    "inside",
    "find",
    "max",
    "function",
    "alright",
    "find",
    "largest",
    "number",
    "list",
    "finally",
    "need",
    "return",
    "return",
    "max",
    "function",
    "need",
    "move",
    "separate",
    "module",
    "let",
    "go",
    "panel",
    "right",
    "click",
    "project",
    "add",
    "new",
    "file",
    "also",
    "add",
    "new",
    "python",
    "file",
    "let",
    "call",
    "utils",
    "add",
    "new",
    "python",
    "file",
    "pycharm",
    "automatically",
    "adds",
    "extension",
    "go",
    "new",
    "file",
    "explicitly",
    "type",
    "make",
    "sure",
    "get",
    "extension",
    "right",
    "back",
    "let",
    "cut",
    "code",
    "paste",
    "new",
    "module",
    "okay",
    "beautiful",
    "going",
    "go",
    "back",
    "import",
    "new",
    "module",
    "either",
    "import",
    "entire",
    "module",
    "import",
    "utils",
    "access",
    "individual",
    "functions",
    "call",
    "utils",
    "max",
    "explicitly",
    "import",
    "function",
    "utils",
    "module",
    "really",
    "make",
    "difference",
    "could",
    "type",
    "utils",
    "import",
    "find",
    "max",
    "need",
    "prefix",
    "name",
    "object",
    "simply",
    "call",
    "find",
    "max",
    "need",
    "call",
    "initialize",
    "list",
    "first",
    "need",
    "define",
    "list",
    "numbers",
    "pass",
    "list",
    "argument",
    "find",
    "max",
    "get",
    "result",
    "max",
    "finally",
    "print",
    "terminal",
    "let",
    "go",
    "ahead",
    "run",
    "program",
    "largest",
    "number",
    "10",
    "beautiful",
    "one",
    "last",
    "thing",
    "finish",
    "tutorial",
    "little",
    "warning",
    "max",
    "tool",
    "tip",
    "says",
    "shadows",
    "built",
    "name",
    "max",
    "reason",
    "see",
    "actually",
    "function",
    "called",
    "max",
    "exact",
    "job",
    "find",
    "max",
    "function",
    "actually",
    "built",
    "python",
    "ask",
    "exercise",
    "great",
    "exercise",
    "beginners",
    "back",
    "warning",
    "warning",
    "basically",
    "telling",
    "us",
    "overwriting",
    "built",
    "max",
    "function",
    "python",
    "changing",
    "meaning",
    "function",
    "considered",
    "bad",
    "practice",
    "let",
    "show",
    "mean",
    "let",
    "comment",
    "line",
    "4",
    "putting",
    "hash",
    "sign",
    "also",
    "use",
    "short",
    "cut",
    "command",
    "slash",
    "mac",
    "control",
    "slash",
    "windows",
    "line",
    "commented",
    "look",
    "color",
    "max",
    "purple",
    "color",
    "print",
    "color",
    "used",
    "identify",
    "built",
    "functions",
    "call",
    "function",
    "give",
    "list",
    "numbers",
    "run",
    "program",
    "get",
    "exact",
    "result",
    "however",
    "bring",
    "line",
    "back",
    "use",
    "shortcut",
    "command",
    "slash",
    "mac",
    "control",
    "slash",
    "windows",
    "redefining",
    "max",
    "line",
    "max",
    "used",
    "function",
    "line",
    "4",
    "executed",
    "max",
    "set",
    "integer",
    "largest",
    "number",
    "list",
    "longer",
    "able",
    "call",
    "line",
    "5",
    "let",
    "run",
    "program",
    "see",
    "happens",
    "go",
    "get",
    "type",
    "error",
    "int",
    "object",
    "callable",
    "max",
    "integer",
    "function",
    "call",
    "solve",
    "problem",
    "rename",
    "variable",
    "something",
    "else",
    "right",
    "click",
    "go",
    "refactor",
    "rename",
    "rename",
    "maximum",
    "see",
    "warning",
    "gone",
    "see",
    "warning",
    "utils",
    "module",
    "redefining",
    "max",
    "told",
    "bad",
    "practice",
    "changing",
    "meaning",
    "built",
    "functions",
    "python",
    "let",
    "rename",
    "well",
    "going",
    "use",
    "short",
    "cut",
    "shift",
    "f6",
    "go",
    "change",
    "maximum",
    "enter",
    "done",
    "tutorial",
    "going",
    "talk",
    "packages",
    "python",
    "packages",
    "basically",
    "another",
    "way",
    "organize",
    "code",
    "currently",
    "3",
    "files",
    "modules",
    "project",
    "real",
    "project",
    "contain",
    "hundreds",
    "even",
    "thousands",
    "modules",
    "want",
    "add",
    "modules",
    "time",
    "directory",
    "get",
    "bloated",
    "many",
    "files",
    "better",
    "approach",
    "organize",
    "related",
    "modules",
    "inside",
    "package",
    "package",
    "container",
    "multiple",
    "modules",
    "file",
    "system",
    "terms",
    "package",
    "directory",
    "folder",
    "project",
    "add",
    "new",
    "directory",
    "directory",
    "add",
    "directed",
    "modules",
    "metaphor",
    "think",
    "mall",
    "go",
    "mall",
    "shopping",
    "center",
    "different",
    "sections",
    "mens",
    "women",
    "kids",
    "clothing",
    "ilke",
    "package",
    "go",
    "mens",
    "section",
    "different",
    "areas",
    "fior",
    "different",
    "kinds",
    "products",
    "section",
    "shoes",
    "shirts",
    "jackets",
    "like",
    "module",
    "tutorial",
    "going",
    "show",
    "create",
    "use",
    "packages",
    "python",
    "project",
    "panel",
    "right",
    "click",
    "panel",
    "add",
    "new",
    "directory",
    "let",
    "call",
    "directory",
    "e",
    "commerce",
    "going",
    "create",
    "package",
    "called",
    "package",
    "going",
    "modules",
    "related",
    "ecommerce",
    "application",
    "example",
    "modules",
    "sales",
    "shipping",
    "customer",
    "service",
    "let",
    "go",
    "ahead",
    "empty",
    "directory",
    "order",
    "convert",
    "package",
    "need",
    "add",
    "special",
    "file",
    "right",
    "click",
    "directory",
    "add",
    "new",
    "python",
    "file",
    "call",
    "file",
    "double",
    "underscore",
    "double",
    "underscore",
    "special",
    "convention",
    "python",
    "python",
    "interpreter",
    "sees",
    "file",
    "name",
    "name",
    "directory",
    "treats",
    "directory",
    "package",
    "also",
    "shortcut",
    "pycharm",
    "let",
    "delete",
    "directory",
    "start",
    "delete",
    "right",
    "click",
    "project",
    "go",
    "new",
    "instead",
    "creating",
    "new",
    "directory",
    "create",
    "new",
    "python",
    "package",
    "let",
    "call",
    "package",
    "ecommerce",
    "see",
    "pycharm",
    "automatically",
    "creates",
    "file",
    "us",
    "manually",
    "create",
    "okay",
    "package",
    "let",
    "add",
    "new",
    "module",
    "new",
    "python",
    "file",
    "let",
    "call",
    "shipping",
    "okay",
    "module",
    "want",
    "function",
    "calculating",
    "shipping",
    "costs",
    "define",
    "calculate",
    "underline",
    "shipping",
    "worry",
    "parameters",
    "implementation",
    "simply",
    "print",
    "calculate",
    "underline",
    "shipping",
    "lets",
    "say",
    "want",
    "import",
    "shipping",
    "module",
    "app",
    "module",
    "new",
    "structure",
    "shipping",
    "module",
    "part",
    "ecommerce",
    "package",
    "import",
    "direct",
    "start",
    "ecommerce",
    "package",
    "bak",
    "app",
    "py",
    "two",
    "ways",
    "import",
    "module",
    "import",
    "entire",
    "module",
    "import",
    "one",
    "functions",
    "classes",
    "let",
    "show",
    "approaches",
    "first",
    "going",
    "import",
    "entire",
    "module",
    "name",
    "package",
    "ecommerce",
    "right",
    "ecommerce",
    "shipping",
    "instead",
    "typing",
    "import",
    "shipping",
    "type",
    "import",
    "ecommerce",
    "prefix",
    "name",
    "package",
    "access",
    "functions",
    "classes",
    "module",
    "type",
    "go",
    "access",
    "calculate",
    "shipping",
    "function",
    "let",
    "go",
    "ahead",
    "run",
    "program",
    "see",
    "message",
    "printed",
    "terminal",
    "beautiful",
    "however",
    "approach",
    "every",
    "time",
    "want",
    "call",
    "one",
    "functions",
    "module",
    "prefix",
    "ecommerce",
    "shipping",
    "verbose",
    "working",
    "packages",
    "often",
    "use",
    "second",
    "approach",
    "using",
    "statement",
    "type",
    "ecommerce",
    "import",
    "calculate",
    "shipping",
    "prefix",
    "function",
    "call",
    "multiple",
    "times",
    "module",
    "code",
    "little",
    "bit",
    "shorter",
    "want",
    "use",
    "multiple",
    "functions",
    "shipping",
    "module",
    "either",
    "import",
    "calculate",
    "shipping",
    "comma",
    "let",
    "say",
    "tax",
    "import",
    "entire",
    "module",
    "access",
    "functions",
    "classes",
    "module",
    "let",
    "revert",
    "back",
    "import",
    "entire",
    "module",
    "type",
    "ecommerce",
    "package",
    "import",
    "shipping",
    "module",
    "shipping",
    "module",
    "object",
    "access",
    "functions",
    "classes",
    "defined",
    "using",
    "dot",
    "operator",
    "shipping",
    "go",
    "calculate",
    "shipping",
    "recap",
    "using",
    "statement",
    "either",
    "start",
    "package",
    "import",
    "specific",
    "module",
    "start",
    "import",
    "specific",
    "function",
    "like",
    "calculate",
    "shipping",
    "basics",
    "using",
    "packages",
    "python",
    "told",
    "packages",
    "extremely",
    "important",
    "especially",
    "want",
    "work",
    "framework",
    "like",
    "django",
    "use",
    "django",
    "building",
    "web",
    "applications",
    "python",
    "going",
    "show",
    "later",
    "course",
    "django",
    "quite",
    "packages",
    "package",
    "contains",
    "several",
    "modules",
    "make",
    "sure",
    "watch",
    "tutorials",
    "modules",
    "packages",
    "one",
    "time",
    "otherwise",
    "going",
    "get",
    "confused",
    "later",
    "get",
    "django",
    "tutorial",
    "going",
    "talk",
    "guys",
    "built",
    "modules",
    "python",
    "python",
    "comes",
    "standard",
    "library",
    "contains",
    "several",
    "modules",
    "common",
    "tasks",
    "sending",
    "emails",
    "working",
    "date",
    "time",
    "generating",
    "random",
    "values",
    "passwords",
    "many",
    "modules",
    "already",
    "built",
    "python",
    "means",
    "already",
    "lots",
    "functionality",
    "reuse",
    "let",
    "show",
    "find",
    "standard",
    "library",
    "open",
    "browser",
    "search",
    "python",
    "3",
    "module",
    "index",
    "make",
    "sure",
    "add",
    "version",
    "number",
    "modules",
    "python",
    "2",
    "different",
    "modules",
    "python3",
    "search",
    "python",
    "3",
    "module",
    "index",
    "first",
    "page",
    "see",
    "python",
    "module",
    "index",
    "python",
    "3",
    "let",
    "go",
    "ahead",
    "modules",
    "built",
    "python",
    "example",
    "modules",
    "working",
    "date",
    "time",
    "modules",
    "sending",
    "emails",
    "encoding",
    "values",
    "many",
    "modules",
    "explanation",
    "beyond",
    "scope",
    "course",
    "really",
    "requires",
    "course",
    "many",
    "modules",
    "let",
    "list",
    "intimidate",
    "something",
    "need",
    "learn",
    "right",
    "learn",
    "python",
    "build",
    "applications",
    "gradually",
    "get",
    "familiar",
    "modules",
    "fact",
    "nobody",
    "knows",
    "modules",
    "python",
    "standard",
    "library",
    "everybody",
    "knows",
    "modules",
    "based",
    "applications",
    "built",
    "tutorial",
    "going",
    "show",
    "use",
    "one",
    "built",
    "modules",
    "generating",
    "random",
    "values",
    "top",
    "import",
    "random",
    "module",
    "random",
    "built",
    "module",
    "need",
    "file",
    "called",
    "python",
    "interpreter",
    "knows",
    "random",
    "built",
    "module",
    "long",
    "knows",
    "find",
    "curious",
    "random",
    "module",
    "stored",
    "disk",
    "let",
    "show",
    "project",
    "panel",
    "expand",
    "external",
    "libraries",
    "expand",
    "python",
    "3",
    "one",
    "time",
    "python",
    "library",
    "route",
    "folder",
    "somewhere",
    "computer",
    "folder",
    "built",
    "modules",
    "python",
    "scroll",
    "able",
    "find",
    "random",
    "module",
    "go",
    "right",
    "random",
    "py",
    "open",
    "shows",
    "source",
    "code",
    "module",
    "go",
    "tutorial",
    "want",
    "worry",
    "hat",
    "let",
    "go",
    "back",
    "use",
    "module",
    "generate",
    "random",
    "values",
    "import",
    "module",
    "object",
    "random",
    "use",
    "dot",
    "operator",
    "acces",
    "methods",
    "one",
    "method",
    "useful",
    "random",
    "method",
    "every",
    "time",
    "call",
    "generates",
    "random",
    "value",
    "0",
    "loop",
    "let",
    "say",
    "range",
    "refresh",
    "memory",
    "using",
    "range",
    "function",
    "create",
    "range",
    "object",
    "look",
    "range",
    "object",
    "iteration",
    "object",
    "spit",
    "value",
    "loop",
    "execute",
    "code",
    "3",
    "times",
    "let",
    "indent",
    "okay",
    "finally",
    "let",
    "print",
    "result",
    "go",
    "see",
    "iteration",
    "get",
    "new",
    "random",
    "value",
    "0",
    "want",
    "random",
    "value",
    "particular",
    "age",
    "let",
    "say",
    "random",
    "values",
    "10",
    "20",
    "well",
    "another",
    "method",
    "rand",
    "int",
    "use",
    "2",
    "arguments",
    "specify",
    "range",
    "let",
    "say",
    "10",
    "run",
    "program",
    "one",
    "time",
    "numbers",
    "20",
    "13",
    "run",
    "program",
    "one",
    "time",
    "get",
    "different",
    "values",
    "20",
    "19",
    "11",
    "one",
    "time",
    "look",
    "also",
    "another",
    "powerful",
    "method",
    "randomly",
    "picking",
    "item",
    "list",
    "let",
    "say",
    "list",
    "team",
    "members",
    "want",
    "randomly",
    "pick",
    "someone",
    "leader",
    "let",
    "show",
    "define",
    "list",
    "team",
    "members",
    "set",
    "jon",
    "mary",
    "bob",
    "mosh",
    "call",
    "random",
    "pass",
    "members",
    "list",
    "method",
    "randomly",
    "picks",
    "method",
    "list",
    "returns",
    "store",
    "result",
    "leader",
    "print",
    "terminal",
    "let",
    "run",
    "program",
    "leader",
    "mary",
    "run",
    "program",
    "one",
    "time",
    "line",
    "mosh",
    "mosh",
    "one",
    "time",
    "really",
    "likes",
    "mosh",
    "get",
    "point",
    "random",
    "module",
    "powerful",
    "lot",
    "applications",
    "cool",
    "exercise",
    "want",
    "write",
    "program",
    "roll",
    "dice",
    "every",
    "time",
    "run",
    "program",
    "get",
    "different",
    "value",
    "3",
    "1",
    "next",
    "time",
    "get",
    "3",
    "6",
    "one",
    "time",
    "5",
    "6",
    "4",
    "3",
    "double",
    "one",
    "cool",
    "exercise",
    "get",
    "started",
    "want",
    "pay",
    "attention",
    "things",
    "want",
    "define",
    "class",
    "called",
    "dice",
    "class",
    "going",
    "method",
    "called",
    "rope",
    "every",
    "time",
    "call",
    "method",
    "get",
    "tuple",
    "tuple",
    "remember",
    "list",
    "values",
    "values",
    "changed",
    "add",
    "new",
    "item",
    "remove",
    "like",
    "read",
    "list",
    "every",
    "time",
    "call",
    "row",
    "method",
    "get",
    "tuple",
    "two",
    "random",
    "values",
    "go",
    "ahead",
    "exercise",
    "see",
    "solution",
    "next",
    "alright",
    "start",
    "importing",
    "random",
    "module",
    "top",
    "define",
    "class",
    "called",
    "dice",
    "class",
    "want",
    "method",
    "called",
    "row",
    "define",
    "row",
    "parenthesis",
    "automatically",
    "adds",
    "self",
    "method",
    "want",
    "generate",
    "two",
    "random",
    "values",
    "1",
    "call",
    "pass",
    "1",
    "generates",
    "first",
    "number",
    "ut",
    "let",
    "call",
    "one",
    "time",
    "going",
    "copy",
    "line",
    "5",
    "put",
    "change",
    "variable",
    "second",
    "two",
    "variables",
    "first",
    "second",
    "two",
    "random",
    "values",
    "finally",
    "need",
    "return",
    "tuple",
    "return",
    "parenthesis",
    "instead",
    "square",
    "brackets",
    "first",
    "second",
    "python",
    "want",
    "return",
    "python",
    "function",
    "add",
    "parenthesis",
    "simplify",
    "code",
    "python",
    "automatically",
    "interpret",
    "tuple",
    "done",
    "definition",
    "class",
    "remove",
    "indentation",
    "add",
    "two",
    "line",
    "breaks",
    "create",
    "object",
    "type",
    "set",
    "dice",
    "dice",
    "next",
    "roll",
    "dice",
    "print",
    "result",
    "terminal",
    "let",
    "run",
    "program",
    "get",
    "2",
    "5",
    "lets",
    "run",
    "one",
    "time",
    "3",
    "2",
    "1",
    "1",
    "beautiful",
    "little",
    "warning",
    "says",
    "expected",
    "2",
    "black",
    "lines",
    "found",
    "coming",
    "pep",
    "8",
    "pep",
    "short",
    "python",
    "proposal",
    "many",
    "python",
    "enhancement",
    "proposals",
    "peps",
    "pep",
    "8",
    "famous",
    "1",
    "document",
    "best",
    "practices",
    "formatting",
    "code",
    "pep",
    "8",
    "says",
    "define",
    "classes",
    "2",
    "lines",
    "breaks",
    "already",
    "done",
    "reason",
    "complaining",
    "1",
    "line",
    "break",
    "class",
    "let",
    "add",
    "one",
    "line",
    "break",
    "pycharm",
    "happy",
    "basically",
    "pycharm",
    "following",
    "best",
    "practices",
    "defined",
    "pep8",
    "memorize",
    "best",
    "practices",
    "code",
    "pycharm",
    "pycharm",
    "gives",
    "little",
    "warning",
    "gradually",
    "learn",
    "properly",
    "format",
    "code",
    "readable",
    "people",
    "tutorial",
    "going",
    "show",
    "work",
    "directories",
    "python",
    "python3",
    "module",
    "index",
    "see",
    "module",
    "called",
    "path",
    "lib",
    "provides",
    "object",
    "oriented",
    "file",
    "system",
    "pact",
    "basically",
    "means",
    "provides",
    "classes",
    "use",
    "create",
    "objects",
    "work",
    "directories",
    "files",
    "click",
    "see",
    "module",
    "works",
    "see",
    "kinds",
    "examples",
    "example",
    "basic",
    "useage",
    "see",
    "import",
    "path",
    "class",
    "path",
    "lib",
    "module",
    "let",
    "zooming",
    "see",
    "clearly",
    "okay",
    "look",
    "path",
    "lib",
    "module",
    "import",
    "path",
    "note",
    "naming",
    "convention",
    "p",
    "capitalized",
    "means",
    "path",
    "class",
    "need",
    "create",
    "instance",
    "class",
    "see",
    "right",
    "much",
    "documentation",
    "read",
    "let",
    "quickly",
    "show",
    "examples",
    "help",
    "get",
    "started",
    "pycharm",
    "top",
    "path",
    "led",
    "module",
    "import",
    "path",
    "class",
    "need",
    "create",
    "path",
    "object",
    "reference",
    "file",
    "directory",
    "computer",
    "basically",
    "ways",
    "use",
    "absolute",
    "path",
    "relative",
    "path",
    "basically",
    "means",
    "path",
    "starting",
    "current",
    "directory",
    "example",
    "wan",
    "na",
    "reference",
    "ecommerce",
    "directory",
    "project",
    "use",
    "relative",
    "path",
    "start",
    "current",
    "directory",
    "go",
    "somewhere",
    "else",
    "absolute",
    "paths",
    "start",
    "root",
    "hard",
    "disk",
    "example",
    "windows",
    "might",
    "absolute",
    "path",
    "like",
    "c",
    "drive",
    "backslash",
    "program",
    "files",
    "backslash",
    "microsoft",
    "directories",
    "c",
    "drive",
    "windows",
    "use",
    "backslash",
    "build",
    "path",
    "mac",
    "linux",
    "paths",
    "look",
    "little",
    "bit",
    "different",
    "instead",
    "backslash",
    "forward",
    "slash",
    "lets",
    "say",
    "examples",
    "absolute",
    "paths",
    "tutorial",
    "going",
    "work",
    "relative",
    "path",
    "work",
    "ecommerce",
    "directory",
    "project",
    "create",
    "directory",
    "earlier",
    "simply",
    "right",
    "click",
    "project",
    "go",
    "new",
    "directory",
    "oaky",
    "let",
    "close",
    "panel",
    "create",
    "path",
    "object",
    "pas",
    "argument",
    "reference",
    "current",
    "directory",
    "alternatively",
    "pass",
    "string",
    "string",
    "add",
    "file",
    "directory",
    "let",
    "say",
    "ecommerce",
    "directory",
    "runs",
    "path",
    "object",
    "store",
    "path",
    "object",
    "interesting",
    "methods",
    "example",
    "check",
    "see",
    "path",
    "exists",
    "calling",
    "exist",
    "method",
    "simply",
    "returns",
    "boolean",
    "let",
    "print",
    "terminal",
    "go",
    "path",
    "exists",
    "changes",
    "ecommerce",
    "1",
    "run",
    "program",
    "get",
    "false",
    "also",
    "create",
    "new",
    "directory",
    "example",
    "let",
    "change",
    "path",
    "email",
    "run",
    "program",
    "obviously",
    "directory",
    "create",
    "calling",
    "mk",
    "dir",
    "method",
    "make",
    "directory",
    "let",
    "run",
    "program",
    "alright",
    "method",
    "returns",
    "none",
    "basically",
    "means",
    "return",
    "values",
    "look",
    "project",
    "panel",
    "see",
    "new",
    "directory",
    "called",
    "emails",
    "also",
    "delete",
    "directory",
    "instead",
    "mk",
    "dir",
    "call",
    "rmdir",
    "short",
    "remove",
    "directory",
    "let",
    "go",
    "ahead",
    "see",
    "directory",
    "gone",
    "also",
    "see",
    "files",
    "directories",
    "given",
    "path",
    "useful",
    "want",
    "write",
    "little",
    "program",
    "automate",
    "something",
    "example",
    "iterate",
    "spreadsheets",
    "directory",
    "one",
    "process",
    "let",
    "show",
    "first",
    "change",
    "path",
    "current",
    "directory",
    "call",
    "glob",
    "method",
    "method",
    "cans",
    "files",
    "directories",
    "current",
    "path",
    "first",
    "argument",
    "need",
    "pass",
    "string",
    "defines",
    "search",
    "pattern",
    "type",
    "asterisk",
    "means",
    "everything",
    "files",
    "directories",
    "optionally",
    "add",
    "extension",
    "get",
    "files",
    "need",
    "files",
    "use",
    "pattern",
    "get",
    "files",
    "current",
    "directory",
    "directories",
    "also",
    "search",
    "py",
    "files",
    "excel",
    "spreadsheets",
    "anything",
    "let",
    "search",
    "py",
    "files",
    "current",
    "directory",
    "run",
    "program",
    "get",
    "generator",
    "object",
    "generator",
    "object",
    "kind",
    "advanced",
    "topic",
    "beyond",
    "scope",
    "beginners",
    "python",
    "course",
    "need",
    "know",
    "iterate",
    "loop",
    "generator",
    "objects",
    "instead",
    "printing",
    "generator",
    "object",
    "let",
    "iterate",
    "using",
    "loop",
    "file",
    "generator",
    "object",
    "returned",
    "glob",
    "method",
    "q",
    "let",
    "print",
    "file",
    "run",
    "program",
    "go",
    "py",
    "files",
    "current",
    "directory",
    "could",
    "different",
    "machine",
    "follow",
    "exercises",
    "gave",
    "earlier",
    "example",
    "created",
    "part",
    "one",
    "exercises",
    "earlier",
    "course",
    "worry",
    "files",
    "see",
    "different",
    "machine",
    "use",
    "glob",
    "method",
    "search",
    "files",
    "using",
    "pattern",
    "also",
    "get",
    "files",
    "directories",
    "current",
    "path",
    "use",
    "one",
    "asterisk",
    "run",
    "program",
    "take",
    "look",
    "ecommerce",
    "directory",
    "file",
    "added",
    "earlier",
    "write",
    "notes",
    "part",
    "presentation",
    "going",
    "file",
    "also",
    "bunch",
    "directories",
    "files",
    "even",
    "though",
    "python",
    "standard",
    "library",
    "comprehensive",
    "many",
    "modules",
    "common",
    "tasks",
    "complete",
    "means",
    "directory",
    "called",
    "python",
    "package",
    "index",
    "pypi",
    "directory",
    "find",
    "hundreds",
    "packages",
    "awesome",
    "things",
    "packages",
    "people",
    "like",
    "built",
    "part",
    "projects",
    "published",
    "part",
    "directory",
    "people",
    "use",
    "fantastic",
    "community",
    "python",
    "many",
    "python",
    "developers",
    "many",
    "packages",
    "right",
    "front",
    "us",
    "reuse",
    "programs",
    "let",
    "say",
    "want",
    "send",
    "text",
    "messages",
    "programs",
    "build",
    "functionality",
    "scratch",
    "simply",
    "come",
    "search",
    "sms",
    "aas",
    "see",
    "many",
    "projects",
    "apckages",
    "give",
    "functionality",
    "course",
    "every",
    "package",
    "every",
    "project",
    "complete",
    "bug",
    "free",
    "still",
    "development",
    "bugs",
    "look",
    "around",
    "pretty",
    "sure",
    "kind",
    "function",
    "imagine",
    "good",
    "reliable",
    "well",
    "documented",
    "package",
    "complete",
    "python",
    "course",
    "show",
    "useful",
    "packages",
    "pypi",
    "example",
    "learn",
    "access",
    "information",
    "programs",
    "write",
    "program",
    "search",
    "businesses",
    "registered",
    "yelp",
    "let",
    "say",
    "want",
    "search",
    "best",
    "barber",
    "new",
    "york",
    "city",
    "show",
    "also",
    "learn",
    "use",
    "technique",
    "called",
    "web",
    "scraping",
    "means",
    "build",
    "engine",
    "engine",
    "browse",
    "website",
    "extract",
    "information",
    "hdml",
    "files",
    "technique",
    "google",
    "index",
    "various",
    "websites",
    "several",
    "engines",
    "web",
    "crawlers",
    "web",
    "crawlers",
    "continuously",
    "looking",
    "various",
    "websites",
    "extracting",
    "information",
    "pages",
    "publish",
    "blog",
    "post",
    "google",
    "web",
    "crawler",
    "finds",
    "title",
    "post",
    "keywords",
    "going",
    "show",
    "python",
    "also",
    "look",
    "browser",
    "automation",
    "extremely",
    "powerful",
    "automate",
    "testing",
    "web",
    "applications",
    "might",
    "get",
    "job",
    "test",
    "engineer",
    "daily",
    "job",
    "browse",
    "website",
    "click",
    "fill",
    "form",
    "form",
    "ensure",
    "website",
    "functioning",
    "properly",
    "automate",
    "powerful",
    "python",
    "package",
    "called",
    "selenium",
    "shown",
    "complete",
    "show",
    "complete",
    "python",
    "course",
    "tutorial",
    "going",
    "show",
    "install",
    "packages",
    "let",
    "search",
    "open",
    "py",
    "xl",
    "package",
    "use",
    "working",
    "excel",
    "spreadsheets",
    "let",
    "search",
    "package",
    "go",
    "currently",
    "version",
    "top",
    "see",
    "instruction",
    "pip",
    "install",
    "open",
    "pyexcel",
    "command",
    "need",
    "type",
    "terminal",
    "window",
    "install",
    "package",
    "program",
    "back",
    "pycharm",
    "status",
    "bar",
    "open",
    "terminal",
    "window",
    "executing",
    "various",
    "commands",
    "let",
    "open",
    "windows",
    "probably",
    "going",
    "see",
    "something",
    "different",
    "instead",
    "dollar",
    "sign",
    "worry",
    "execute",
    "command",
    "going",
    "show",
    "pip",
    "install",
    "open",
    "py",
    "xl",
    "make",
    "sure",
    "spell",
    "everything",
    "properly",
    "pip",
    "tool",
    "comes",
    "python",
    "installation",
    "use",
    "install",
    "uninstall",
    "packages",
    "registered",
    "using",
    "pip",
    "install",
    "package",
    "open",
    "py",
    "xl",
    "enter",
    "let",
    "go",
    "ahead",
    "going",
    "take",
    "seconds",
    "oaky",
    "done",
    "import",
    "package",
    "modules",
    "like",
    "built",
    "modules",
    "python",
    "modules",
    "project",
    "curious",
    "package",
    "stored",
    "disc",
    "let",
    "show",
    "open",
    "project",
    "panel",
    "expand",
    "external",
    "libraries",
    "next",
    "expand",
    "python",
    "3",
    "expand",
    "sight",
    "packages",
    "packages",
    "installed",
    "pip",
    "stored",
    "open",
    "py",
    "xl",
    "open",
    "folder",
    "another",
    "folder",
    "called",
    "cell",
    "look",
    "init",
    "type",
    "earlier",
    "told",
    "whenever",
    "add",
    "file",
    "folder",
    "python",
    "treats",
    "folder",
    "package",
    "sell",
    "package",
    "package",
    "modules",
    "sell",
    "interface",
    "read",
    "text",
    "see",
    "package",
    "openpyxl",
    "several",
    "subpackages",
    "like",
    "cell",
    "start",
    "chart",
    "sheet",
    "package",
    "several",
    "modules",
    "next",
    "tutorial",
    "show",
    "work",
    "excel",
    "files",
    "covered",
    "core",
    "concepts",
    "python",
    "hope",
    "learned",
    "lot",
    "please",
    "support",
    "hard",
    "work",
    "liking",
    "video",
    "sharing",
    "others",
    "sure",
    "subscribe",
    "channel",
    "tutorials",
    "like",
    "next",
    "going",
    "work",
    "first",
    "python",
    "project",
    "involves",
    "automation",
    "going",
    "write",
    "python",
    "program",
    "process",
    "thousands",
    "spreadsheets",
    "second",
    "excited",
    "let",
    "get",
    "started",
    "tutorial",
    "going",
    "show",
    "something",
    "really",
    "awesome",
    "python",
    "going",
    "learn",
    "process",
    "spreadsheets",
    "extremely",
    "valuable",
    "situation",
    "hundreds",
    "thousands",
    "spreadsheets",
    "need",
    "updated",
    "want",
    "hand",
    "may",
    "take",
    "hours",
    "days",
    "weeks",
    "even",
    "months",
    "simply",
    "build",
    "python",
    "program",
    "less",
    "half",
    "hour",
    "python",
    "program",
    "automatically",
    "process",
    "thousands",
    "spreadsheets",
    "one",
    "second",
    "going",
    "work",
    "excel",
    "spreadsheet",
    "download",
    "video",
    "spreadsheet",
    "three",
    "columns",
    "transaction",
    "id",
    "product",
    "id",
    "press",
    "worry",
    "fourth",
    "column",
    "yet",
    "spreadsheet",
    "going",
    "record",
    "kinds",
    "transactions",
    "let",
    "say",
    "due",
    "error",
    "could",
    "human",
    "error",
    "system",
    "error",
    "price",
    "wrong",
    "let",
    "say",
    "need",
    "decrease",
    "10",
    "percent",
    "want",
    "manually",
    "come",
    "back",
    "add",
    "formula",
    "typed",
    "equal",
    "sign",
    "let",
    "say",
    "want",
    "recalculate",
    "say",
    "want",
    "recalculate",
    "value",
    "cell",
    "get",
    "multiply",
    "like",
    "90",
    "original",
    "price",
    "reducing",
    "original",
    "reducing",
    "price",
    "10",
    "hit",
    "enter",
    "see",
    "updated",
    "price",
    "next",
    "come",
    "back",
    "select",
    "cell",
    "apply",
    "formula",
    "rows",
    "thousands",
    "rows",
    "scroll",
    "going",
    "tedious",
    "going",
    "write",
    "python",
    "program",
    "us",
    "going",
    "auotmate",
    "process",
    "also",
    "add",
    "beautiful",
    "chart",
    "right",
    "want",
    "open",
    "hundreds",
    "thousands",
    "spreadsheets",
    "add",
    "chart",
    "one",
    "going",
    "take",
    "least",
    "week",
    "two",
    "python",
    "program",
    "going",
    "matter",
    "seconds",
    "let",
    "get",
    "started",
    "alright",
    "first",
    "thing",
    "want",
    "download",
    "transactions",
    "file",
    "add",
    "project",
    "put",
    "link",
    "video",
    "download",
    "wondering",
    "put",
    "project",
    "simply",
    "right",
    "click",
    "project",
    "mac",
    "item",
    "reveal",
    "finder",
    "windows",
    "see",
    "something",
    "like",
    "reveal",
    "explorer",
    "file",
    "explorer",
    "whatever",
    "called",
    "click",
    "opens",
    "direct",
    "machine",
    "stored",
    "simply",
    "copy",
    "paste",
    "transactions",
    "file",
    "right",
    "top",
    "first",
    "need",
    "import",
    "open",
    "py",
    "excel",
    "package",
    "import",
    "open",
    "py",
    "excel",
    "give",
    "alias",
    "make",
    "code",
    "shorter",
    "asxl",
    "required",
    "makes",
    "code",
    "little",
    "bit",
    "cleaner",
    "let",
    "show",
    "instead",
    "typing",
    "open",
    "pyxl",
    "type",
    "xl",
    "okay",
    "alias",
    "package",
    "package",
    "function",
    "loading",
    "xl",
    "workbook",
    "let",
    "call",
    "load",
    "workbook",
    "argument",
    "pass",
    "transactions",
    "load",
    "excel",
    "workbook",
    "return",
    "workbook",
    "object",
    "okay",
    "open",
    "workbook",
    "see",
    "add",
    "1",
    "sheet",
    "called",
    "sheet",
    "1",
    "access",
    "use",
    "square",
    "brackets",
    "specify",
    "name",
    "sheet",
    "sheet",
    "one",
    "make",
    "sure",
    "spell",
    "capital",
    "case",
    "sensitive",
    "spell",
    "properly",
    "going",
    "get",
    "error",
    "returns",
    "sheet",
    "sheet",
    "various",
    "cells",
    "next",
    "need",
    "learn",
    "access",
    "particular",
    "cell",
    "easy",
    "back",
    "py",
    "charm",
    "sheet",
    "object",
    "use",
    "square",
    "brackets",
    "give",
    "coordinate",
    "cell",
    "coordinate",
    "combination",
    "column",
    "row",
    "example",
    "cell",
    "coordinate",
    "a1",
    "back",
    "pycharm",
    "type",
    "a1",
    "returns",
    "first",
    "cell",
    "also",
    "another",
    "approach",
    "getting",
    "cell",
    "instead",
    "using",
    "square",
    "brackets",
    "string",
    "use",
    "cell",
    "method",
    "sheet",
    "object",
    "pass",
    "row",
    "column",
    "row",
    "column",
    "1",
    "return",
    "exact",
    "cell",
    "let",
    "print",
    "value",
    "cell",
    "run",
    "program",
    "value",
    "transaction",
    "id",
    "beautiful",
    "need",
    "iterate",
    "rows",
    "row",
    "need",
    "get",
    "value",
    "third",
    "column",
    "price",
    "get",
    "multiply",
    "first",
    "need",
    "know",
    "many",
    "rows",
    "spreadsheet",
    "get",
    "sheet",
    "object",
    "sheet",
    "attribute",
    "called",
    "row",
    "let",
    "print",
    "sheet",
    "4",
    "row",
    "verify",
    "total",
    "4",
    "rows",
    "need",
    "add",
    "loop",
    "would",
    "generate",
    "numbers",
    "let",
    "delete",
    "print",
    "statement",
    "nd",
    "add",
    "loop",
    "row",
    "going",
    "use",
    "range",
    "function",
    "unction",
    "generate",
    "range",
    "numbers",
    "starting",
    "1",
    "way",
    "sheet",
    "plus",
    "reason",
    "adding",
    "1",
    "told",
    "range",
    "function",
    "generate",
    "numbers",
    "starting",
    "value",
    "way",
    "value",
    "include",
    "second",
    "value",
    "currently",
    "max",
    "row",
    "returns",
    "4",
    "use",
    "range",
    "generate",
    "numbers",
    "1",
    "2",
    "3",
    "include",
    "4",
    "need",
    "add",
    "1",
    "let",
    "go",
    "tied",
    "underline",
    "row",
    "plus",
    "going",
    "let",
    "print",
    "row",
    "make",
    "sure",
    "program",
    "working",
    "point",
    "let",
    "run",
    "get",
    "numbers",
    "beautiful",
    "easily",
    "get",
    "cells",
    "third",
    "column",
    "however",
    "really",
    "want",
    "first",
    "cell",
    "heading",
    "technically",
    "want",
    "ignore",
    "first",
    "row",
    "back",
    "want",
    "change",
    "range",
    "function",
    "start",
    "going",
    "use",
    "get",
    "access",
    "cell",
    "row",
    "column",
    "get",
    "cell",
    "object",
    "let",
    "print",
    "value",
    "make",
    "sure",
    "right",
    "track",
    "run",
    "program",
    "values",
    "get",
    "values",
    "third",
    "column",
    "next",
    "need",
    "multiply",
    "value",
    "instead",
    "printing",
    "multiplied",
    "corrected",
    "underline",
    "price",
    "mistake",
    "going",
    "make",
    "program",
    "need",
    "add",
    "new",
    "cell",
    "worksheet",
    "want",
    "add",
    "corrected",
    "prices",
    "ia",
    "new",
    "column",
    "could",
    "also",
    "overwrite",
    "values",
    "column",
    "tutorial",
    "going",
    "show",
    "add",
    "new",
    "column",
    "using",
    "method",
    "need",
    "get",
    "reference",
    "cell",
    "given",
    "row",
    "fourth",
    "column",
    "call",
    "sheet",
    "pass",
    "row",
    "four",
    "arguments",
    "returns",
    "cell",
    "object",
    "let",
    "store",
    "separate",
    "variable",
    "call",
    "note",
    "variable",
    "names",
    "descriptive",
    "guess",
    "work",
    "corrected",
    "price",
    "holds",
    "actual",
    "value",
    "corrected",
    "price",
    "cell",
    "object",
    "spreadsheet",
    "next",
    "set",
    "value",
    "cell",
    "set",
    "corrected",
    "price",
    "cell",
    "value",
    "corrected",
    "price",
    "lines",
    "easily",
    "update",
    "spreadsheet",
    "first",
    "need",
    "save",
    "loop",
    "call",
    "workbook",
    "save",
    "let",
    "save",
    "new",
    "file",
    "want",
    "accidentally",
    "overwrite",
    "original",
    "file",
    "case",
    "program",
    "bug",
    "going",
    "call",
    "transactions",
    "ex",
    "finally",
    "let",
    "run",
    "program",
    "see",
    "happened",
    "split",
    "second",
    "new",
    "file",
    "tranactions",
    "open",
    "get",
    "something",
    "like",
    "see",
    "4th",
    "column",
    "updated",
    "prices",
    "beautiful",
    "half",
    "problem",
    "solved",
    "need",
    "add",
    "chart",
    "add",
    "chart",
    "need",
    "add",
    "couple",
    "classes",
    "top",
    "import",
    "statement",
    "let",
    "type",
    "open",
    "py",
    "import",
    "bar",
    "chart",
    "comma",
    "reference",
    "lets",
    "see",
    "going",
    "package",
    "module",
    "chart",
    "module",
    "importing",
    "two",
    "classes",
    "bar",
    "chart",
    "reference",
    "look",
    "naming",
    "convention",
    "used",
    "first",
    "letter",
    "e",
    "word",
    "capitalized",
    "also",
    "better",
    "add",
    "line",
    "break",
    "import",
    "statements",
    "make",
    "code",
    "cleaner",
    "save",
    "workbook",
    "need",
    "add",
    "achart",
    "current",
    "sheet",
    "first",
    "need",
    "select",
    "range",
    "values",
    "exercise",
    "going",
    "select",
    "values",
    "fourth",
    "values",
    "rows",
    "values",
    "going",
    "use",
    "chart",
    "part",
    "2",
    "example",
    "really",
    "make",
    "sense",
    "add",
    "chart",
    "per",
    "transaction",
    "really",
    "matter",
    "want",
    "bunch",
    "numbers",
    "create",
    "chart",
    "loop",
    "going",
    "use",
    "reference",
    "class",
    "select",
    "range",
    "values",
    "first",
    "argument",
    "constructor",
    "sheet",
    "pass",
    "sheet",
    "add",
    "4",
    "keyword",
    "arguments",
    "first",
    "one",
    "set",
    "second",
    "one",
    "set",
    "maximum",
    "row",
    "sheet",
    "sheet",
    "want",
    "select",
    "cells",
    "row",
    "kay",
    "make",
    "code",
    "little",
    "bit",
    "cleaner",
    "going",
    "put",
    "new",
    "line",
    "see",
    "clearly",
    "going",
    "select",
    "cells",
    "columns",
    "rows",
    "want",
    "want",
    "values",
    "fourth",
    "column",
    "back",
    "need",
    "set",
    "couple",
    "key",
    "word",
    "arguments",
    "column",
    "set",
    "also",
    "max",
    "underline",
    "call",
    "set",
    "4",
    "well",
    "limiting",
    "range",
    "cells",
    "selecting",
    "fourth",
    "column",
    "creating",
    "instance",
    "reference",
    "class",
    "let",
    "store",
    "result",
    "variable",
    "called",
    "values",
    "values",
    "object",
    "values",
    "fourth",
    "column",
    "ready",
    "create",
    "chart",
    "create",
    "instance",
    "bar",
    "chart",
    "class",
    "store",
    "object",
    "next",
    "call",
    "pass",
    "values",
    "pretty",
    "straight",
    "forward",
    "finally",
    "need",
    "add",
    "chart",
    "sheet",
    "call",
    "sheet",
    "pass",
    "chart",
    "object",
    "also",
    "specify",
    "want",
    "add",
    "chart",
    "let",
    "say",
    "want",
    "add",
    "row",
    "2",
    "fourth",
    "column",
    "coordinate",
    "cell",
    "e2",
    "going",
    "top",
    "left",
    "corner",
    "chart",
    "coordinate",
    "going",
    "pass",
    "e2",
    "done",
    "let",
    "run",
    "program",
    "one",
    "time",
    "beautiful",
    "let",
    "open",
    "update",
    "workbook",
    "end",
    "result",
    "right",
    "fourth",
    "column",
    "beautiful",
    "chart",
    "could",
    "take",
    "next",
    "level",
    "could",
    "add",
    "legend",
    "could",
    "change",
    "color",
    "bars",
    "could",
    "even",
    "use",
    "different",
    "kind",
    "chart",
    "bar",
    "chart",
    "learn",
    "read",
    "documentation",
    "openpyxl",
    "program",
    "complete",
    "code",
    "dirty",
    "clean",
    "organized",
    "functions",
    "written",
    "code",
    "let",
    "goo",
    "ahead",
    "organize",
    "code",
    "like",
    "professional",
    "software",
    "developer",
    "line",
    "4",
    "loading",
    "workbook",
    "getting",
    "reference",
    "first",
    "sheet",
    "really",
    "need",
    "two",
    "lines",
    "purely",
    "demonstration",
    "show",
    "access",
    "cell",
    "let",
    "delete",
    "unnecessary",
    "lines",
    "important",
    "practice",
    "coding",
    "always",
    "look",
    "code",
    "always",
    "review",
    "see",
    "code",
    "used",
    "always",
    "delete",
    "okay",
    "next",
    "iterating",
    "rows",
    "fixing",
    "prices",
    "select",
    "values",
    "add",
    "chart",
    "finally",
    "save",
    "workbook",
    "going",
    "use",
    "automate",
    "process",
    "updating",
    "thousands",
    "spreadsheets",
    "program",
    "would",
    "work",
    "relying",
    "file",
    "want",
    "reorganize",
    "code",
    "move",
    "inside",
    "function",
    "function",
    "take",
    "name",
    "function",
    "let",
    "define",
    "function",
    "let",
    "call",
    "gets",
    "file",
    "name",
    "move",
    "code",
    "inside",
    "function",
    "let",
    "select",
    "everything",
    "press",
    "tab",
    "beautiful",
    "back",
    "function",
    "instead",
    "loading",
    "transactions",
    "file",
    "going",
    "load",
    "file",
    "name",
    "better",
    "also",
    "program",
    "working",
    "properly",
    "really",
    "need",
    "store",
    "result",
    "separate",
    "file",
    "simply",
    "overwrite",
    "file",
    "let",
    "pass",
    "file",
    "name",
    "end",
    "function",
    "reusable",
    "function",
    "simply",
    "reuse",
    "process",
    "thousands",
    "spreadsheets",
    "earlier",
    "python",
    "course",
    "learned",
    "find",
    "files",
    "directory",
    "get",
    "file",
    "directory",
    "pass",
    "name",
    "file",
    "function",
    "function",
    "go",
    "ahead",
    "update",
    "spreadsheet",
    "second",
    "less",
    "one",
    "example",
    "using",
    "python",
    "automate",
    "repetitive",
    "boring",
    "task",
    "waste",
    "time",
    "automation",
    "processing",
    "excel",
    "spreadsheets",
    "many",
    "things",
    "automate",
    "question",
    "want",
    "automate",
    "want",
    "use",
    "python",
    "make",
    "life",
    "easier",
    "use",
    "comment",
    "box",
    "let",
    "know",
    "love",
    "hear",
    "ideas",
    "next",
    "going",
    "work",
    "project",
    "involves",
    "machine",
    "learning",
    "subset",
    "artificial",
    "intelligence",
    "excited",
    "let",
    "get",
    "started",
    "section",
    "going",
    "learn",
    "machine",
    "learning",
    "subset",
    "ai",
    "artificial",
    "intelligence",
    "one",
    "trending",
    "topics",
    "world",
    "days",
    "going",
    "lot",
    "applications",
    "future",
    "example",
    "imagine",
    "ask",
    "write",
    "program",
    "scan",
    "image",
    "tell",
    "cat",
    "dog",
    "want",
    "build",
    "program",
    "using",
    "traditional",
    "programming",
    "techniques",
    "program",
    "going",
    "get",
    "overly",
    "complex",
    "come",
    "lots",
    "rules",
    "come",
    "specific",
    "curves",
    "edges",
    "colors",
    "image",
    "tell",
    "cat",
    "dog",
    "give",
    "black",
    "white",
    "photo",
    "rules",
    "may",
    "work",
    "may",
    "break",
    "would",
    "rewrite",
    "may",
    "give",
    "picture",
    "cat",
    "dog",
    "different",
    "angle",
    "predict",
    "solving",
    "problem",
    "using",
    "traditional",
    "programming",
    "techniques",
    "going",
    "get",
    "overly",
    "complex",
    "sometimes",
    "impossible",
    "make",
    "matter",
    "worse",
    "ask",
    "extend",
    "program",
    "supports",
    "3",
    "kinds",
    "animals",
    "cats",
    "dogs",
    "horses",
    "rewrite",
    "rules",
    "going",
    "work",
    "machine",
    "learning",
    "technique",
    "solve",
    "kinds",
    "problems",
    "works",
    "build",
    "model",
    "engine",
    "give",
    "lots",
    "lots",
    "data",
    "example",
    "give",
    "thousands",
    "tens",
    "thousands",
    "pictures",
    "cats",
    "dogs",
    "model",
    "find",
    "learn",
    "patterns",
    "input",
    "data",
    "give",
    "new",
    "picture",
    "cat",
    "seen",
    "ask",
    "cat",
    "dog",
    "horse",
    "tell",
    "us",
    "certain",
    "level",
    "accuracy",
    "input",
    "data",
    "give",
    "accurate",
    "model",
    "going",
    "basic",
    "example",
    "machine",
    "learning",
    "applications",
    "self",
    "driving",
    "cars",
    "robotics",
    "language",
    "processing",
    "vision",
    "processing",
    "forecasting",
    "things",
    "like",
    "stock",
    "market",
    "trends",
    "weather",
    "games",
    "basic",
    "idea",
    "machine",
    "learning",
    "next",
    "look",
    "machine",
    "learning",
    "action",
    "machine",
    "learning",
    "project",
    "involves",
    "number",
    "steps",
    "first",
    "step",
    "import",
    "data",
    "often",
    "comes",
    "form",
    "csv",
    "file",
    "might",
    "database",
    "lots",
    "data",
    "simply",
    "export",
    "data",
    "store",
    "csv",
    "file",
    "purpose",
    "machine",
    "learning",
    "project",
    "import",
    "data",
    "next",
    "need",
    "clean",
    "involves",
    "tasks",
    "duplicated",
    "data",
    "duplicates",
    "data",
    "want",
    "feed",
    "model",
    "otherwise",
    "model",
    "learn",
    "bad",
    "patterns",
    "data",
    "produce",
    "wrong",
    "result",
    "make",
    "sure",
    "input",
    "data",
    "good",
    "clean",
    "shape",
    "data",
    "irrelevant",
    "remove",
    "duplicates",
    "incomplete",
    "remove",
    "modify",
    "data",
    "text",
    "based",
    "like",
    "name",
    "countries",
    "genres",
    "music",
    "cats",
    "dogs",
    "need",
    "convert",
    "numerical",
    "values",
    "step",
    "really",
    "depends",
    "kinds",
    "data",
    "working",
    "every",
    "project",
    "different",
    "clean",
    "data",
    "set",
    "need",
    "split",
    "two",
    "segments",
    "one",
    "training",
    "model",
    "testing",
    "make",
    "sure",
    "model",
    "produces",
    "right",
    "result",
    "example",
    "pictures",
    "cats",
    "dogs",
    "reserve",
    "80",
    "training",
    "another",
    "20",
    "testing",
    "next",
    "step",
    "create",
    "model",
    "involves",
    "selecting",
    "algorithm",
    "analyze",
    "data",
    "many",
    "machine",
    "learning",
    "algorithms",
    "decision",
    "trees",
    "neural",
    "networks",
    "algorithm",
    "pros",
    "cons",
    "terms",
    "accuracy",
    "performance",
    "algorithm",
    "use",
    "depends",
    "kind",
    "problem",
    "trying",
    "solve",
    "input",
    "data",
    "good",
    "news",
    "isnthat",
    "explicitly",
    "program",
    "algorithm",
    "libraries",
    "provide",
    "algorithms",
    "one",
    "popular",
    "ones",
    "going",
    "look",
    "tutorial",
    "side",
    "kick",
    "learn",
    "build",
    "model",
    "using",
    "algorithm",
    "next",
    "need",
    "train",
    "model",
    "feed",
    "training",
    "data",
    "model",
    "look",
    "patterns",
    "data",
    "enxt",
    "ask",
    "make",
    "predictions",
    "back",
    "examples",
    "cats",
    "dogs",
    "ask",
    "model",
    "cat",
    "dog",
    "model",
    "make",
    "prediction",
    "prediction",
    "always",
    "accurate",
    "fact",
    "start",
    "likely",
    "predictions",
    "inaccurate",
    "need",
    "envalue",
    "predictions",
    "measure",
    "accuracy",
    "need",
    "get",
    "back",
    "model",
    "either",
    "select",
    "different",
    "algorithm",
    "going",
    "produce",
    "accurate",
    "result",
    "kind",
    "problem",
    "trying",
    "solve",
    "fine",
    "tune",
    "parameters",
    "model",
    "algorithm",
    "parameters",
    "modify",
    "optimize",
    "accuracy",
    "high",
    "level",
    "steps",
    "follow",
    "machine",
    "learning",
    "project",
    "next",
    "look",
    "libraries",
    "tools",
    "machine",
    "learning",
    "lecture",
    "going",
    "look",
    "popular",
    "python",
    "library",
    "use",
    "machine",
    "learning",
    "projects",
    "first",
    "one",
    "numpy",
    "provides",
    "multidimensional",
    "array",
    "popular",
    "library",
    "seconnd",
    "one",
    "pandas",
    "data",
    "analysis",
    "library",
    "provides",
    "concept",
    "called",
    "data",
    "frame",
    "data",
    "frame",
    "two",
    "dimensional",
    "data",
    "structure",
    "similar",
    "excel",
    "spreadsheet",
    "rows",
    "columns",
    "select",
    "columns",
    "row",
    "column",
    "range",
    "rows",
    "columns",
    "popular",
    "machine",
    "learning",
    "data",
    "science",
    "projects",
    "third",
    "library",
    "mad",
    "plot",
    "lib",
    "two",
    "dimensional",
    "plotting",
    "library",
    "creating",
    "graphs",
    "plots",
    "next",
    "library",
    "sidekick",
    "learn",
    "one",
    "popular",
    "machine",
    "learning",
    "libraries",
    "provides",
    "common",
    "algorithms",
    "like",
    "decision",
    "trees",
    "neural",
    "networks",
    "working",
    "machine",
    "learning",
    "projects",
    "use",
    "environment",
    "called",
    "jupiter",
    "writing",
    "code",
    "technically",
    "still",
    "use",
    "vs",
    "code",
    "code",
    "editor",
    "editors",
    "ideal",
    "machine",
    "learning",
    "projects",
    "need",
    "frequently",
    "inspect",
    "data",
    "really",
    "hard",
    "environments",
    "like",
    "vs",
    "code",
    "terminal",
    "working",
    "table",
    "10",
    "20",
    "columns",
    "visualizing",
    "data",
    "terminal",
    "window",
    "really",
    "really",
    "difficult",
    "messy",
    "thats",
    "use",
    "jupiter",
    "use",
    "jupiter",
    "makes",
    "really",
    "easy",
    "inspect",
    "data",
    "install",
    "jupiter",
    "going",
    "use",
    "platform",
    "called",
    "anaconda",
    "head",
    "page",
    "download",
    "anaconda",
    "distribution",
    "operating",
    "system",
    "distributions",
    "windows",
    "mac",
    "linux",
    "let",
    "go",
    "ahead",
    "install",
    "anaconda",
    "python",
    "download",
    "alright",
    "anaconda",
    "download",
    "machine",
    "let",
    "double",
    "click",
    "alright",
    "first",
    "going",
    "run",
    "program",
    "determine",
    "software",
    "installed",
    "let",
    "continue",
    "continue",
    "pretty",
    "easy",
    "continue",
    "one",
    "time",
    "agree",
    "license",
    "agreement",
    "use",
    "default",
    "ca",
    "use",
    "default",
    "installation",
    "location",
    "worry",
    "click",
    "install",
    "give",
    "second",
    "beautiful",
    "thing",
    "anaconda",
    "install",
    "jupiter",
    "well",
    "data",
    "popular",
    "science",
    "libraries",
    "like",
    "numpy",
    "pandas",
    "manually",
    "install",
    "using",
    "pip",
    "alright",
    "part",
    "next",
    "step",
    "anaconda",
    "suggesting",
    "install",
    "microsoft",
    "vs",
    "code",
    "already",
    "machine",
    "install",
    "go",
    "continue",
    "close",
    "installation",
    "finally",
    "move",
    "trash",
    "need",
    "installer",
    "future",
    "alright",
    "open",
    "upa",
    "terminal",
    "window",
    "type",
    "jupiter",
    "space",
    "notebook",
    "start",
    "notebook",
    "server",
    "machine",
    "enter",
    "go",
    "start",
    "notebook",
    "server",
    "machine",
    "see",
    "default",
    "messages",
    "worry",
    "automatically",
    "opens",
    "browser",
    "window",
    "pointing",
    "local",
    "host",
    "port",
    "call",
    "jupiter",
    "dashboard",
    "dashboard",
    "tabs",
    "first",
    "tab",
    "files",
    "tab",
    "default",
    "points",
    "home",
    "directory",
    "every",
    "user",
    "machine",
    "home",
    "directory",
    "home",
    "directory",
    "mac",
    "see",
    "desktop",
    "folder",
    "well",
    "documents",
    "downloads",
    "machine",
    "going",
    "see",
    "different",
    "folders",
    "somewhere",
    "somewhere",
    "machine",
    "need",
    "create",
    "jupiter",
    "notebook",
    "going",
    "go",
    "desktop",
    "desktop",
    "anything",
    "click",
    "new",
    "want",
    "create",
    "notebook",
    "python",
    "notebook",
    "write",
    "python",
    "code",
    "execute",
    "line",
    "line",
    "easily",
    "visualize",
    "data",
    "see",
    "next",
    "videos",
    "let",
    "go",
    "ahead",
    "alright",
    "first",
    "notebook",
    "see",
    "default",
    "called",
    "untitled",
    "let",
    "change",
    "hello",
    "world",
    "going",
    "hello",
    "world",
    "machine",
    "learning",
    "project",
    "let",
    "rename",
    "look",
    "desktop",
    "see",
    "file",
    "hello",
    "jupiter",
    "notebook",
    "kind",
    "similar",
    "py",
    "files",
    "write",
    "python",
    "code",
    "includes",
    "additional",
    "data",
    "jupiter",
    "uses",
    "execute",
    "code",
    "back",
    "notebook",
    "let",
    "print",
    "hello",
    "world",
    "click",
    "run",
    "button",
    "result",
    "printed",
    "jupiter",
    "navigate",
    "back",
    "forth",
    "terminal",
    "window",
    "see",
    "result",
    "right",
    "next",
    "going",
    "show",
    "load",
    "data",
    "set",
    "csv",
    "file",
    "jupiter",
    "alright",
    "lecture",
    "going",
    "download",
    "data",
    "set",
    "popular",
    "website",
    "called",
    "caggle",
    "basically",
    "place",
    "data",
    "science",
    "projects",
    "first",
    "thing",
    "need",
    "create",
    "account",
    "sign",
    "facebook",
    "google",
    "using",
    "custom",
    "email",
    "password",
    "sign",
    "come",
    "back",
    "one",
    "search",
    "bar",
    "search",
    "video",
    "game",
    "sales",
    "name",
    "popular",
    "data",
    "set",
    "going",
    "use",
    "lecture",
    "list",
    "see",
    "first",
    "item",
    "kind",
    "reddish",
    "icon",
    "let",
    "go",
    "see",
    "data",
    "set",
    "includes",
    "sales",
    "data",
    "videos",
    "games",
    "page",
    "see",
    "description",
    "various",
    "columns",
    "data",
    "set",
    "rank",
    "name",
    "platform",
    "year",
    "data",
    "source",
    "csv",
    "file",
    "called",
    "vg",
    "see",
    "rows",
    "11",
    "columns",
    "data",
    "set",
    "right",
    "see",
    "first",
    "records",
    "data",
    "set",
    "first",
    "record",
    "ranking",
    "game",
    "1",
    "wi",
    "sport",
    "game",
    "wii",
    "platform",
    "released",
    "year",
    "2006",
    "want",
    "go",
    "ahead",
    "download",
    "data",
    "set",
    "told",
    "need",
    "sign",
    "download",
    "give",
    "zip",
    "file",
    "see",
    "csv",
    "file",
    "want",
    "put",
    "right",
    "next",
    "jupiter",
    "notebook",
    "machine",
    "desktop",
    "going",
    "drag",
    "drop",
    "onto",
    "desktop",
    "folder",
    "look",
    "desktop",
    "see",
    "jupiter",
    "hello",
    "world",
    "notebook",
    "right",
    "next",
    "go",
    "back",
    "jupiter",
    "notebook",
    "let",
    "remove",
    "first",
    "line",
    "instead",
    "import",
    "pandas",
    "pd",
    "importing",
    "pandas",
    "module",
    "renaming",
    "pd",
    "type",
    "pandas",
    "several",
    "times",
    "code",
    "let",
    "type",
    "pd",
    "pass",
    "name",
    "csv",
    "file",
    "vgsales",
    "csv",
    "csv",
    "file",
    "current",
    "folder",
    "right",
    "next",
    "jupiter",
    "notebook",
    "easily",
    "load",
    "otherwise",
    "supply",
    "full",
    "path",
    "file",
    "returns",
    "data",
    "frame",
    "object",
    "like",
    "excel",
    "spreadsheet",
    "let",
    "show",
    "store",
    "simply",
    "type",
    "df",
    "inspect",
    "one",
    "time",
    "let",
    "run",
    "program",
    "data",
    "frame",
    "rows",
    "columns",
    "frank",
    "name",
    "platform",
    "data",
    "frame",
    "object",
    "lots",
    "attributes",
    "methods",
    "going",
    "cover",
    "tutorial",
    "really",
    "beyond",
    "scope",
    "going",
    "going",
    "leave",
    "read",
    "pandas",
    "documentation",
    "follow",
    "tutorials",
    "find",
    "pandas",
    "data",
    "frames",
    "lecture",
    "going",
    "show",
    "useful",
    "methods",
    "attributes",
    "first",
    "one",
    "shape",
    "shape",
    "let",
    "run",
    "one",
    "time",
    "shape",
    "data",
    "set",
    "records",
    "11",
    "columns",
    "technically",
    "2",
    "dimensional",
    "array",
    "11",
    "okay",
    "see",
    "another",
    "segment",
    "writing",
    "code",
    "write",
    "code",
    "first",
    "segment",
    "second",
    "segment",
    "call",
    "one",
    "methods",
    "dataframe",
    "run",
    "program",
    "see",
    "output",
    "segment",
    "right",
    "next",
    "first",
    "segment",
    "three",
    "lines",
    "output",
    "last",
    "line",
    "second",
    "segment",
    "calling",
    "describe",
    "method",
    "right",
    "output",
    "segment",
    "beauty",
    "jupiter",
    "easily",
    "visualize",
    "datsa",
    "vscode",
    "windows",
    "really",
    "tedious",
    "clunky",
    "describe",
    "method",
    "returning",
    "basically",
    "returning",
    "basic",
    "information",
    "column",
    "data",
    "set",
    "saw",
    "earlier",
    "columns",
    "like",
    "rank",
    "year",
    "columns",
    "numerical",
    "values",
    "column",
    "count",
    "number",
    "records",
    "column",
    "se",
    "rank",
    "column",
    "records",
    "whereas",
    "year",
    "column",
    "records",
    "shows",
    "records",
    "value",
    "year",
    "column",
    "null",
    "values",
    "real",
    "data",
    "science",
    "machine",
    "learning",
    "project",
    "use",
    "techniques",
    "clean",
    "data",
    "set",
    "one",
    "option",
    "remove",
    "records",
    "value",
    "year",
    "column",
    "assign",
    "default",
    "value",
    "really",
    "depends",
    "project",
    "another",
    "attribute",
    "column",
    "mean",
    "average",
    "values",
    "case",
    "rank",
    "column",
    "rank",
    "really",
    "matter",
    "look",
    "year",
    "average",
    "year",
    "year",
    "video",
    "games",
    "dataset",
    "might",
    "important",
    "problem",
    "trying",
    "solve",
    "also",
    "standard",
    "deviation",
    "measure",
    "quanitfy",
    "amount",
    "variation",
    "set",
    "values",
    "min",
    "example",
    "minimum",
    "value",
    "year",
    "column",
    "quite",
    "often",
    "work",
    "new",
    "data",
    "set",
    "call",
    "describe",
    "method",
    "get",
    "basic",
    "statistics",
    "data",
    "let",
    "show",
    "another",
    "useful",
    "attribute",
    "next",
    "segment",
    "let",
    "type",
    "let",
    "run",
    "see",
    "returns",
    "two",
    "dimensional",
    "array",
    "square",
    "bracket",
    "indicates",
    "outer",
    "array",
    "second",
    "one",
    "represents",
    "inner",
    "array",
    "first",
    "element",
    "inn",
    "outer",
    "array",
    "array",
    "values",
    "array",
    "basically",
    "represent",
    "first",
    "row",
    "data",
    "set",
    "video",
    "game",
    "ranking",
    "1",
    "called",
    "wii",
    "sports",
    "basic",
    "overview",
    "pandas",
    "data",
    "frames",
    "next",
    "lecture",
    "going",
    "show",
    "useful",
    "shortcuts",
    "jupiter",
    "lecture",
    "going",
    "show",
    "useful",
    "shortcuts",
    "jupiter",
    "first",
    "thing",
    "want",
    "pay",
    "attention",
    "green",
    "bar",
    "left",
    "indicates",
    "cell",
    "currently",
    "edit",
    "mode",
    "write",
    "code",
    "press",
    "escape",
    "key",
    "green",
    "turns",
    "blue",
    "means",
    "cell",
    "currently",
    "command",
    "mode",
    "basically",
    "activated",
    "cell",
    "either",
    "edit",
    "mode",
    "command",
    "mode",
    "depending",
    "mode",
    "different",
    "shortcuts",
    "command",
    "mode",
    "press",
    "h",
    "see",
    "list",
    "keybord",
    "shortcuts",
    "right",
    "list",
    "see",
    "mac",
    "os",
    "modifier",
    "keys",
    "extra",
    "keys",
    "mac",
    "keyboard",
    "windows",
    "user",
    "gong",
    "see",
    "example",
    "shape",
    "command",
    "key",
    "control",
    "option",
    "guideline",
    "easily",
    "understand",
    "shortcut",
    "associated",
    "command",
    "let",
    "show",
    "commmands",
    "cell",
    "command",
    "mode",
    "example",
    "command",
    "open",
    "command",
    "palette",
    "exactly",
    "like",
    "command",
    "palette",
    "vs",
    "code",
    "short",
    "cut",
    "execute",
    "command",
    "command",
    "shift",
    "okay",
    "lots",
    "shortcuts",
    "course",
    "going",
    "use",
    "time",
    "good",
    "quick",
    "look",
    "see",
    "available",
    "tis",
    "shortcuts",
    "write",
    "code",
    "much",
    "faster",
    "let",
    "show",
    "somme",
    "useful",
    "ones",
    "going",
    "close",
    "first",
    "cell",
    "command",
    "mode",
    "going",
    "press",
    "b",
    "inserts",
    "new",
    "cell",
    "cell",
    "also",
    "go",
    "back",
    "first",
    "cell",
    "press",
    "escape",
    "cell",
    "command",
    "mode",
    "insert",
    "empty",
    "cell",
    "cell",
    "pressing",
    "either",
    "b",
    "want",
    "cell",
    "press",
    "twice",
    "delete",
    "like",
    "cell",
    "going",
    "print",
    "hello",
    "world",
    "message",
    "print",
    "hello",
    "world",
    "run",
    "code",
    "cell",
    "click",
    "run",
    "button",
    "print",
    "function",
    "right",
    "see",
    "output",
    "function",
    "note",
    "run",
    "cell",
    "execute",
    "code",
    "cell",
    "words",
    "code",
    "cells",
    "executed",
    "let",
    "show",
    "want",
    "mean",
    "cell",
    "cell",
    "going",
    "delete",
    "call",
    "describe",
    "method",
    "instead",
    "going",
    "print",
    "ocean",
    "going",
    "put",
    "cursor",
    "back",
    "cell",
    "print",
    "hello",
    "world",
    "message",
    "run",
    "cell",
    "see",
    "hello",
    "world",
    "displayed",
    "cell",
    "still",
    "displaying",
    "describe",
    "table",
    "see",
    "changes",
    "solve",
    "problem",
    "go",
    "cell",
    "menu",
    "top",
    "run",
    "cells",
    "together",
    "work",
    "small",
    "project",
    "sometimes",
    "working",
    "large",
    "data",
    "set",
    "want",
    "run",
    "cells",
    "together",
    "going",
    "take",
    "lot",
    "time",
    "reason",
    "jupiter",
    "saves",
    "output",
    "cell",
    "rerun",
    "code",
    "changed",
    "notebook",
    "file",
    "includes",
    "source",
    "code",
    "organized",
    "cells",
    "well",
    "output",
    "cell",
    "different",
    "regular",
    "py",
    "file",
    "source",
    "code",
    "also",
    "autocompletion",
    "intellisence",
    "cell",
    "let",
    "call",
    "df",
    "data",
    "frame",
    "press",
    "tab",
    "see",
    "attributes",
    "methods",
    "object",
    "let",
    "call",
    "describe",
    "cursor",
    "name",
    "method",
    "press",
    "shift",
    "tab",
    "see",
    "tool",
    "tip",
    "describes",
    "method",
    "parameter",
    "takes",
    "front",
    "front",
    "signature",
    "see",
    "describe",
    "method",
    "paramter",
    "default",
    "value",
    "right",
    "see",
    "description",
    "method",
    "case",
    "describes",
    "generates",
    "descriptive",
    "statistics",
    "summarize",
    "central",
    "tendency",
    "similar",
    "vs",
    "code",
    "also",
    "convert",
    "line",
    "comment",
    "pressing",
    "command",
    "slash",
    "mac",
    "control",
    "slash",
    "windows",
    "like",
    "line",
    "comment",
    "press",
    "shortcut",
    "one",
    "time",
    "remove",
    "comment",
    "useful",
    "shortcuts",
    "jupiter",
    "next",
    "lectures",
    "going",
    "work",
    "real",
    "machine",
    "learning",
    "project",
    "get",
    "let",
    "delete",
    "cells",
    "start",
    "single",
    "empty",
    "cell",
    "cell",
    "first",
    "going",
    "press",
    "escape",
    "button",
    "cell",
    "blue",
    "command",
    "mode",
    "delete",
    "cell",
    "pressing",
    "twice",
    "go",
    "next",
    "cell",
    "activated",
    "command",
    "mode",
    "let",
    "delete",
    "well",
    "two",
    "cells",
    "delete",
    "go",
    "last",
    "one",
    "like",
    "empty",
    "notebook",
    "single",
    "cell",
    "next",
    "lectures",
    "going",
    "work",
    "real",
    "machine",
    "learning",
    "project",
    "imagine",
    "online",
    "music",
    "store",
    "users",
    "sign",
    "asked",
    "age",
    "gender",
    "based",
    "profile",
    "recommend",
    "various",
    "music",
    "albums",
    "likely",
    "buy",
    "project",
    "want",
    "use",
    "machine",
    "learning",
    "increase",
    "sales",
    "want",
    "build",
    "model",
    "feed",
    "model",
    "sample",
    "data",
    "based",
    "existing",
    "users",
    "model",
    "learn",
    "patterns",
    "data",
    "ask",
    "make",
    "predictions",
    "new",
    "user",
    "signs",
    "tell",
    "model",
    "hey",
    "new",
    "user",
    "profile",
    "kind",
    "music",
    "user",
    "interested",
    "model",
    "say",
    "jazz",
    "hip",
    "hop",
    "whatever",
    "baed",
    "make",
    "suggestions",
    "user",
    "problem",
    "going",
    "solve",
    "back",
    "list",
    "steps",
    "machine",
    "learning",
    "projects",
    "first",
    "need",
    "import",
    "data",
    "prepare",
    "clean",
    "next",
    "select",
    "machine",
    "learning",
    "algorithm",
    "build",
    "model",
    "treat",
    "model",
    "ask",
    "make",
    "predictions",
    "finally",
    "evaluate",
    "algorithm",
    "see",
    "accuracy",
    "accurate",
    "either",
    "fine",
    "tune",
    "model",
    "select",
    "different",
    "algorithm",
    "let",
    "focus",
    "first",
    "step",
    "head",
    "basic",
    "csv",
    "created",
    "project",
    "random",
    "made",
    "data",
    "real",
    "table",
    "3",
    "columns",
    "age",
    "gender",
    "genre",
    "gender",
    "either",
    "one",
    "represents",
    "male",
    "0",
    "represents",
    "female",
    "making",
    "assumptions",
    "assuming",
    "men",
    "20",
    "25",
    "like",
    "hip",
    "hop",
    "men",
    "26",
    "30",
    "like",
    "jazz",
    "age",
    "30",
    "like",
    "classical",
    "music",
    "women",
    "assuming",
    "20",
    "25",
    "like",
    "dance",
    "music",
    "26",
    "30",
    "like",
    "acoustic",
    "music",
    "like",
    "men",
    "age",
    "30",
    "like",
    "classical",
    "music",
    "made",
    "pattern",
    "representation",
    "reality",
    "let",
    "go",
    "ahead",
    "download",
    "csv",
    "click",
    "icon",
    "download",
    "file",
    "downloads",
    "folder",
    "going",
    "drag",
    "drop",
    "onto",
    "desktop",
    "stored",
    "hello",
    "world",
    "notebook",
    "want",
    "put",
    "csv",
    "file",
    "right",
    "next",
    "jupiter",
    "notebook",
    "back",
    "notebook",
    "need",
    "read",
    "csv",
    "file",
    "like",
    "first",
    "need",
    "import",
    "pandas",
    "module",
    "import",
    "panda",
    "pd",
    "call",
    "pd",
    "name",
    "file",
    "saw",
    "earlier",
    "returns",
    "data",
    "frame",
    "two",
    "dimensional",
    "array",
    "similar",
    "xl",
    "spreadsheet",
    "let",
    "call",
    "data",
    "let",
    "inspect",
    "make",
    "sure",
    "loaded",
    "everything",
    "properly",
    "run",
    "data",
    "frame",
    "beautiful",
    "next",
    "need",
    "prepare",
    "clean",
    "data",
    "topic",
    "next",
    "lecture",
    "next",
    "lecture",
    "second",
    "step",
    "machine",
    "learning",
    "project",
    "cleaning",
    "preparing",
    "data",
    "involves",
    "tasks",
    "removing",
    "duplicate",
    "null",
    "values",
    "particular",
    "data",
    "set",
    "anything",
    "kind",
    "cleaning",
    "duplicates",
    "see",
    "see",
    "rows",
    "values",
    "columns",
    "null",
    "values",
    "one",
    "thing",
    "need",
    "split",
    "data",
    "set",
    "two",
    "separate",
    "data",
    "sets",
    "one",
    "first",
    "two",
    "columns",
    "refer",
    "input",
    "set",
    "last",
    "column",
    "refer",
    "output",
    "set",
    "train",
    "model",
    "train",
    "model",
    "give",
    "two",
    "separate",
    "data",
    "sets",
    "input",
    "set",
    "output",
    "set",
    "output",
    "set",
    "case",
    "genre",
    "column",
    "contains",
    "predictions",
    "telling",
    "model",
    "user",
    "20",
    "years",
    "old",
    "male",
    "like",
    "hip",
    "hop",
    "train",
    "model",
    "give",
    "new",
    "input",
    "set",
    "example",
    "new",
    "user",
    "21",
    "years",
    "old",
    "male",
    "genre",
    "music",
    "user",
    "probably",
    "likes",
    "see",
    "input",
    "set",
    "sample",
    "21",
    "year",
    "old",
    "male",
    "going",
    "ask",
    "model",
    "predict",
    "reason",
    "need",
    "split",
    "data",
    "set",
    "two",
    "separate",
    "sets",
    "input",
    "output",
    "back",
    "code",
    "data",
    "frame",
    "object",
    "method",
    "called",
    "drop",
    "put",
    "cursor",
    "method",
    "name",
    "press",
    "shift",
    "tab",
    "see",
    "tool",
    "tip",
    "signature",
    "drop",
    "method",
    "parameters",
    "pass",
    "parameter",
    "going",
    "use",
    "lecture",
    "set",
    "none",
    "default",
    "witht",
    "parter",
    "specify",
    "columns",
    "want",
    "drop",
    "case",
    "set",
    "columns",
    "array",
    "one",
    "string",
    "genre",
    "method",
    "actually",
    "modify",
    "original",
    "data",
    "set",
    "fact",
    "create",
    "new",
    "data",
    "set",
    "without",
    "thisq",
    "call",
    "convention",
    "use",
    "capital",
    "x",
    "represent",
    "data",
    "set",
    "capital",
    "x",
    "equals",
    "expression",
    "let",
    "inspect",
    "x",
    "see",
    "input",
    "set",
    "x",
    "includes",
    "two",
    "columns",
    "age",
    "gender",
    "output",
    "predictions",
    "next",
    "need",
    "create",
    "output",
    "set",
    "start",
    "data",
    "frame",
    "using",
    "data",
    "using",
    "square",
    "brackets",
    "get",
    "values",
    "given",
    "column",
    "case",
    "genre",
    "returns",
    "new",
    "data",
    "set",
    "convention",
    "use",
    "lower",
    "case",
    "represent",
    "output",
    "data",
    "let",
    "inspect",
    "well",
    "data",
    "set",
    "predictions",
    "answers",
    "prepared",
    "data",
    "next",
    "want",
    "create",
    "model",
    "using",
    "algorithm",
    "next",
    "step",
    "build",
    "model",
    "using",
    "machine",
    "learning",
    "algorithm",
    "many",
    "algorithms",
    "algorithm",
    "pros",
    "cons",
    "terms",
    "performance",
    "accuracy",
    "lecture",
    "going",
    "use",
    "simple",
    "algorithm",
    "called",
    "decision",
    "tree",
    "good",
    "news",
    "explicitly",
    "program",
    "algorithms",
    "already",
    "implemented",
    "library",
    "called",
    "side",
    "kick",
    "learn",
    "top",
    "let",
    "import",
    "decision",
    "tree",
    "classifier",
    "sklearn",
    "package",
    "comes",
    "sidekick",
    "learn",
    "library",
    "popular",
    "machine",
    "learning",
    "library",
    "python",
    "package",
    "module",
    "called",
    "tree",
    "module",
    "class",
    "called",
    "decision",
    "tree",
    "classifier",
    "class",
    "implements",
    "decision",
    "tree",
    "operator",
    "okay",
    "need",
    "create",
    "new",
    "instance",
    "class",
    "end",
    "let",
    "create",
    "object",
    "called",
    "models",
    "nd",
    "set",
    "anew",
    "instance",
    "decision",
    "tree",
    "classifier",
    "like",
    "model",
    "next",
    "need",
    "train",
    "learns",
    "patterns",
    "data",
    "pretty",
    "easy",
    "call",
    "model",
    "method",
    "takes",
    "2",
    "data",
    "set",
    "input",
    "set",
    "output",
    "set",
    "capital",
    "x",
    "finally",
    "need",
    "ask",
    "model",
    "make",
    "prediction",
    "ask",
    "kind",
    "music",
    "24",
    "year",
    "old",
    "male",
    "likes",
    "let",
    "temporarily",
    "inspect",
    "initial",
    "data",
    "set",
    "music",
    "data",
    "look",
    "got",
    "told",
    "earlier",
    "assumed",
    "men",
    "20",
    "25",
    "like",
    "hip",
    "hop",
    "music",
    "3",
    "samples",
    "men",
    "age",
    "20",
    "23",
    "sample",
    "21",
    "year",
    "old",
    "male",
    "ask",
    "model",
    "predict",
    "kind",
    "music",
    "21",
    "year",
    "old",
    "male",
    "likes",
    "expect",
    "say",
    "hip",
    "hop",
    "similarly",
    "assumed",
    "women",
    "20",
    "25",
    "like",
    "dance",
    "music",
    "sample",
    "22",
    "year",
    "old",
    "female",
    "ask",
    "model",
    "predict",
    "kind",
    "music",
    "22",
    "year",
    "old",
    "woman",
    "likes",
    "expect",
    "say",
    "dance",
    "assumptions",
    "let",
    "go",
    "ahead",
    "ask",
    "model",
    "make",
    "predictions",
    "let",
    "remove",
    "last",
    "line",
    "instead",
    "going",
    "call",
    "model",
    "method",
    "takes",
    "2",
    "dimensional",
    "array",
    "outer",
    "array",
    "array",
    "element",
    "array",
    "going",
    "pass",
    "another",
    "array",
    "array",
    "going",
    "pass",
    "new",
    "input",
    "set",
    "21",
    "year",
    "old",
    "male",
    "21",
    "1",
    "like",
    "new",
    "record",
    "table",
    "okay",
    "one",
    "input",
    "set",
    "let",
    "pass",
    "another",
    "input",
    "22",
    "year",
    "old",
    "female",
    "another",
    "array",
    "add",
    "22",
    "comma",
    "0",
    "asking",
    "model",
    "make",
    "2",
    "predictions",
    "time",
    "get",
    "result",
    "store",
    "variable",
    "called",
    "predictions",
    "finally",
    "let",
    "inspect",
    "notebook",
    "run",
    "look",
    "got",
    "model",
    "saying",
    "21",
    "year",
    "old",
    "male",
    "likes",
    "hip",
    "hop",
    "22",
    "year",
    "old",
    "female",
    "likes",
    "dance",
    "music",
    "model",
    "successfully",
    "make",
    "predictions",
    "wait",
    "minute",
    "building",
    "model",
    "makes",
    "predictions",
    "accurately",
    "always",
    "easy",
    "build",
    "model",
    "need",
    "measure",
    "accuracy",
    "accurate",
    "enough",
    "either",
    "fine",
    "tune",
    "build",
    "model",
    "using",
    "different",
    "algorithm",
    "next",
    "lecture",
    "going",
    "show",
    "measure",
    "accuracy",
    "model",
    "lecture",
    "going",
    "show",
    "measure",
    "accuracy",
    "models",
    "order",
    "first",
    "need",
    "split",
    "data",
    "set",
    "two",
    "sets",
    "one",
    "training",
    "testing",
    "right",
    "passing",
    "entire",
    "data",
    "set",
    "training",
    "model",
    "using",
    "2",
    "samples",
    "making",
    "predictions",
    "enough",
    "calculate",
    "accuracy",
    "model",
    "general",
    "rule",
    "thumb",
    "annotate",
    "data",
    "training",
    "testing",
    "instead",
    "passing",
    "two",
    "samples",
    "making",
    "predictions",
    "pass",
    "data",
    "set",
    "testing",
    "get",
    "predictions",
    "compare",
    "predictions",
    "actual",
    "values",
    "test",
    "set",
    "based",
    "calculate",
    "accuracy",
    "really",
    "easy",
    "import",
    "couple",
    "functions",
    "call",
    "code",
    "let",
    "show",
    "first",
    "top",
    "underline",
    "selection",
    "module",
    "import",
    "function",
    "called",
    "train",
    "test",
    "split",
    "function",
    "easily",
    "split",
    "data",
    "set",
    "two",
    "sets",
    "training",
    "testing",
    "right",
    "define",
    "x",
    "sets",
    "call",
    "funciton",
    "train",
    "test",
    "split",
    "give",
    "3",
    "arguments",
    "x",
    "ad",
    "keyword",
    "argument",
    "specifies",
    "size",
    "test",
    "dataset",
    "test",
    "set",
    "allocating",
    "20",
    "data",
    "testing",
    "functions",
    "returns",
    "tuple",
    "unpack",
    "4",
    "variables",
    "right",
    "first",
    "two",
    "variables",
    "input",
    "sets",
    "training",
    "testing",
    "output",
    "sets",
    "training",
    "testing",
    "training",
    "model",
    "instead",
    "passing",
    "entire",
    "data",
    "set",
    "want",
    "pass",
    "training",
    "data",
    "set",
    "also",
    "making",
    "predictions",
    "instead",
    "passing",
    "two",
    "samples",
    "pass",
    "thats",
    "datas",
    "set",
    "contains",
    "input",
    "values",
    "testing",
    "get",
    "predictions",
    "calculate",
    "accuracy",
    "simply",
    "compare",
    "predictions",
    "actual",
    "values",
    "output",
    "set",
    "testing",
    "easy",
    "first",
    "top",
    "need",
    "import",
    "funciton",
    "import",
    "accuracy",
    "end",
    "call",
    "function",
    "accuracy",
    "score",
    "give",
    "two",
    "arguments",
    "contains",
    "expected",
    "values",
    "predictions",
    "contains",
    "actual",
    "value",
    "functions",
    "returns",
    "accuracy",
    "score",
    "0",
    "store",
    "simply",
    "display",
    "console",
    "let",
    "go",
    "ahead",
    "run",
    "program",
    "accuracy",
    "score",
    "1",
    "100",
    "run",
    "one",
    "time",
    "going",
    "see",
    "different",
    "result",
    "every",
    "time",
    "split",
    "data",
    "set",
    "training",
    "test",
    "sets",
    "different",
    "data",
    "sets",
    "function",
    "randomly",
    "picks",
    "data",
    "training",
    "testing",
    "let",
    "show",
    "put",
    "cursor",
    "cell",
    "see",
    "activated",
    "note",
    "click",
    "button",
    "run",
    "cell",
    "also",
    "insert",
    "new",
    "cell",
    "cell",
    "let",
    "show",
    "go",
    "second",
    "cell",
    "press",
    "skip",
    "button",
    "command",
    "mode",
    "press",
    "twice",
    "okay",
    "deleted",
    "click",
    "run",
    "button",
    "see",
    "code",
    "executed",
    "new",
    "cell",
    "want",
    "run",
    "cell",
    "multiple",
    "times",
    "every",
    "time",
    "click",
    "run",
    "click",
    "run",
    "little",
    "bit",
    "tedious",
    "show",
    "shortcut",
    "activate",
    "first",
    "cell",
    "press",
    "control",
    "enter",
    "runs",
    "current",
    "cell",
    "without",
    "adding",
    "new",
    "cell",
    "back",
    "lets",
    "run",
    "multiple",
    "times",
    "okay",
    "look",
    "accuracy",
    "dropped",
    "still",
    "good",
    "cuuracey",
    "scored",
    "somewhere",
    "75",
    "hundred",
    "let",
    "show",
    "something",
    "change",
    "test",
    "size",
    "0",
    "8",
    "essentially",
    "using",
    "20",
    "percent",
    "data",
    "training",
    "model",
    "using",
    "80",
    "testing",
    "let",
    "see",
    "happens",
    "run",
    "cell",
    "multiple",
    "times",
    "control",
    "enter",
    "look",
    "accuracy",
    "immediately",
    "dropped",
    "one",
    "time",
    "46",
    "40",
    "26",
    "really",
    "really",
    "bad",
    "reason",
    "happening",
    "using",
    "little",
    "data",
    "training",
    "model",
    "one",
    "key",
    "concepts",
    "machine",
    "learning",
    "data",
    "give",
    "model",
    "cleaner",
    "data",
    "get",
    "better",
    "result",
    "duplicates",
    "irrelevant",
    "data",
    "incomplete",
    "values",
    "model",
    "learn",
    "back",
    "patterns",
    "data",
    "really",
    "important",
    "clean",
    "training",
    "model",
    "let",
    "change",
    "back",
    "0",
    "2",
    "run",
    "one",
    "time",
    "okay",
    "accuracy",
    "1",
    "75",
    "drop",
    "50",
    "reason",
    "happening",
    "enough",
    "data",
    "machine",
    "learning",
    "problems",
    "require",
    "thousands",
    "even",
    "millions",
    "samples",
    "train",
    "model",
    "complex",
    "problem",
    "data",
    "need",
    "example",
    "dealing",
    "table",
    "three",
    "columns",
    "want",
    "build",
    "model",
    "tell",
    "picture",
    "cat",
    "dog",
    "horse",
    "lion",
    "need",
    "millions",
    "pictures",
    "animal",
    "support",
    "pictures",
    "need",
    "next",
    "lecture",
    "going",
    "talk",
    "model",
    "persistence",
    "basic",
    "implementation",
    "building",
    "training",
    "model",
    "make",
    "prediction",
    "simplify",
    "things",
    "removed",
    "code",
    "wrote",
    "last",
    "lecture",
    "calculating",
    "accuracy",
    "lecture",
    "going",
    "focus",
    "different",
    "topic",
    "basically",
    "import",
    "data",
    "set",
    "create",
    "model",
    "train",
    "ask",
    "make",
    "predictions",
    "piece",
    "code",
    "see",
    "want",
    "run",
    "everytime",
    "new",
    "user",
    "every",
    "time",
    "want",
    "make",
    "recommendations",
    "existing",
    "user",
    "sometimes",
    "really",
    "time",
    "consuming",
    "example",
    "dealing",
    "small",
    "data",
    "set",
    "20",
    "records",
    "real",
    "application",
    "might",
    "data",
    "set",
    "thousands",
    "trillions",
    "examples",
    "training",
    "might",
    "take",
    "seconds",
    "minutes",
    "even",
    "hours",
    "wy",
    "model",
    "persistence",
    "important",
    "build",
    "train",
    "model",
    "save",
    "file",
    "next",
    "time",
    "want",
    "make",
    "predictions",
    "simply",
    "load",
    "model",
    "file",
    "ask",
    "make",
    "predictions",
    "model",
    "already",
    "trained",
    "need",
    "retrain",
    "like",
    "intelligent",
    "person",
    "let",
    "show",
    "easy",
    "top",
    "module",
    "import",
    "joblib",
    "job",
    "lib",
    "object",
    "methods",
    "saving",
    "loading",
    "modules",
    "train",
    "model",
    "simply",
    "call",
    "job",
    "lib",
    "give",
    "two",
    "arguments",
    "model",
    "name",
    "file",
    "want",
    "store",
    "model",
    "let",
    "call",
    "music",
    "lib",
    "temporarily",
    "going",
    "comment",
    "line",
    "want",
    "make",
    "predictions",
    "want",
    "store",
    "train",
    "model",
    "file",
    "let",
    "run",
    "cell",
    "control",
    "slash",
    "okay",
    "look",
    "output",
    "array",
    "contains",
    "name",
    "model",
    "file",
    "return",
    "value",
    "dump",
    "method",
    "back",
    "desktop",
    "right",
    "next",
    "notebook",
    "see",
    "job",
    "lib",
    "file",
    "model",
    "stored",
    "simply",
    "binary",
    "file",
    "back",
    "jupiter",
    "notebook",
    "told",
    "real",
    "application",
    "want",
    "train",
    "model",
    "every",
    "time",
    "let",
    "comment",
    "lines",
    "mac",
    "press",
    "command",
    "slash",
    "windows",
    "control",
    "slash",
    "okay",
    "lines",
    "commented",
    "time",
    "instead",
    "dumping",
    "model",
    "going",
    "load",
    "call",
    "load",
    "method",
    "model",
    "simply",
    "pass",
    "name",
    "model",
    "file",
    "returns",
    "trained",
    "model",
    "two",
    "lines",
    "simply",
    "make",
    "predictions",
    "earlier",
    "assumed",
    "men",
    "like",
    "hip",
    "hop",
    "music",
    "let",
    "print",
    "predictions",
    "see",
    "model",
    "behaving",
    "control",
    "persist",
    "load",
    "models",
    "earlier",
    "section",
    "told",
    "decision",
    "trees",
    "easiest",
    "understand",
    "started",
    "machine",
    "learning",
    "decision",
    "trees",
    "lecture",
    "going",
    "export",
    "model",
    "visual",
    "format",
    "see",
    "model",
    "makes",
    "predictions",
    "really",
    "really",
    "cool",
    "let",
    "show",
    "simplified",
    "code",
    "simply",
    "import",
    "data",
    "set",
    "create",
    "input",
    "output",
    "sets",
    "create",
    "model",
    "train",
    "want",
    "follow",
    "along",
    "type",
    "everything",
    "exactly",
    "show",
    "lecture",
    "worry",
    "everything",
    "means",
    "come",
    "back",
    "shortly",
    "top",
    "sklearnimport",
    "tree",
    "object",
    "method",
    "exporting",
    "decision",
    "tree",
    "graphical",
    "format",
    "train",
    "model",
    "let",
    "call",
    "tree",
    "vis",
    "arguments",
    "need",
    "pass",
    "first",
    "argument",
    "model",
    "second",
    "name",
    "oft",
    "output",
    "file",
    "going",
    "use",
    "keyword",
    "arguments",
    "method",
    "takes",
    "many",
    "parameters",
    "want",
    "selectively",
    "pass",
    "keyword",
    "arguments",
    "without",
    "worrying",
    "order",
    "parameter",
    "going",
    "set",
    "let",
    "set",
    "dot",
    "format",
    "graph",
    "format",
    "graph",
    "description",
    "language",
    "see",
    "shortly",
    "parameter",
    "want",
    "set",
    "feature",
    "set",
    "array",
    "two",
    "strings",
    "age",
    "gender",
    "features",
    "columns",
    "data",
    "set",
    "properties",
    "features",
    "data",
    "okay",
    "parameter",
    "class",
    "names",
    "set",
    "list",
    "classes",
    "labels",
    "output",
    "data",
    "set",
    "like",
    "hip",
    "hop",
    "jazz",
    "classical",
    "data",
    "set",
    "includes",
    "genre",
    "classes",
    "data",
    "repeated",
    "times",
    "data",
    "set",
    "call",
    "returns",
    "unique",
    "list",
    "classes",
    "sort",
    "alphabetically",
    "call",
    "sorted",
    "function",
    "pass",
    "result",
    "next",
    "parameter",
    "labeled",
    "set",
    "string",
    "worry",
    "details",
    "parameters",
    "going",
    "come",
    "back",
    "shortly",
    "set",
    "label",
    "round",
    "true",
    "finally",
    "field",
    "true",
    "end",
    "result",
    "let",
    "run",
    "sound",
    "using",
    "control",
    "enter",
    "okay",
    "nw",
    "file",
    "music",
    "recommender",
    "little",
    "bit",
    "funny",
    "want",
    "open",
    "file",
    "vs",
    "code",
    "drag",
    "drop",
    "vs",
    "code",
    "window",
    "okay",
    "dot",
    "format",
    "textural",
    "language",
    "describing",
    "graphs",
    "visualize",
    "graph",
    "need",
    "install",
    "extension",
    "vs",
    "code",
    "left",
    "side",
    "click",
    "extensions",
    "panel",
    "search",
    "dot",
    "dot",
    "look",
    "second",
    "extension",
    "graphvis",
    "stephon",
    "go",
    "ahead",
    "install",
    "extension",
    "reload",
    "vs",
    "code",
    "visualize",
    "dot",
    "file",
    "let",
    "close",
    "tab",
    "alright",
    "look",
    "right",
    "side",
    "click",
    "new",
    "menu",
    "open",
    "preview",
    "side",
    "like",
    "alright",
    "visualization",
    "decision",
    "tree",
    "let",
    "close",
    "dot",
    "file",
    "go",
    "exactly",
    "model",
    "makes",
    "predictions",
    "binary",
    "tree",
    "means",
    "every",
    "node",
    "maximum",
    "two",
    "children",
    "top",
    "note",
    "condition",
    "condition",
    "true",
    "go",
    "child",
    "node",
    "left",
    "side",
    "otherwise",
    "go",
    "child",
    "node",
    "right",
    "side",
    "let",
    "see",
    "happening",
    "first",
    "condition",
    "age",
    "less",
    "equal",
    "30",
    "condition",
    "false",
    "means",
    "user",
    "30",
    "years",
    "older",
    "genre",
    "music",
    "interested",
    "classical",
    "classifying",
    "people",
    "based",
    "profile",
    "reason",
    "word",
    "class",
    "user",
    "30",
    "years",
    "older",
    "belongs",
    "class",
    "classical",
    "people",
    "like",
    "classical",
    "music",
    "condition",
    "true",
    "means",
    "user",
    "younger",
    "30",
    "check",
    "gender",
    "less",
    "basically",
    "means",
    "equals",
    "0",
    "dealing",
    "female",
    "go",
    "child",
    "node",
    "another",
    "condition",
    "dealing",
    "female",
    "younger",
    "ned",
    "check",
    "age",
    "age",
    "less",
    "case",
    "user",
    "likes",
    "dance",
    "music",
    "otherwise",
    "like",
    "acoustic",
    "music",
    "decision",
    "tree",
    "model",
    "uses",
    "make",
    "predictions",
    "wondering",
    "floating",
    "point",
    "numbers",
    "like",
    "basically",
    "rules",
    "model",
    "generates",
    "based",
    "patterns",
    "dataset",
    "give",
    "model",
    "data",
    "rules",
    "change",
    "always",
    "always",
    "also",
    "columns",
    "features",
    "decision",
    "tree",
    "going",
    "get",
    "complex",
    "two",
    "features",
    "age",
    "gender",
    "back",
    "code",
    "let",
    "quickly",
    "explain",
    "meaning",
    "parameters",
    "set",
    "field",
    "true",
    "box",
    "node",
    "filled",
    "color",
    "set",
    "rounded",
    "true",
    "rounded",
    "corners",
    "set",
    "label",
    "every",
    "node",
    "labels",
    "read",
    "set",
    "class",
    "names",
    "unique",
    "list",
    "genres",
    "displaying",
    "class",
    "note",
    "right",
    "set",
    "feature",
    "names",
    "age",
    "gender",
    "sow",
    "e",
    "see",
    "rules",
    "notes",
    "short",
    "sweet",
    "introduction",
    "machien",
    "learning",
    "use",
    "materials",
    "learn",
    "section",
    "apply",
    "solve",
    "different",
    "set",
    "problems",
    "question",
    "ideas",
    "machine",
    "learning",
    "kind",
    "problems",
    "want",
    "solve",
    "machine",
    "learning",
    "use",
    "comments",
    "box",
    "let",
    "know",
    "love",
    "hear",
    "ideas",
    "next",
    "going",
    "use",
    "python",
    "popular",
    "framework",
    "called",
    "django",
    "build",
    "web",
    "application",
    "ready",
    "let",
    "get",
    "started",
    "turorial",
    "going",
    "show",
    "create",
    "first",
    "website",
    "python",
    "popular",
    "framework",
    "called",
    "django",
    "spelled",
    "silent",
    "pronounced",
    "django",
    "web",
    "framework",
    "perfectionists",
    "deadlines",
    "perfectionist",
    "want",
    "quickly",
    "put",
    "together",
    "website",
    "fast",
    "scaleable",
    "secure",
    "django",
    "best",
    "friend",
    "popular",
    "websites",
    "built",
    "django",
    "like",
    "instagram",
    "spotify",
    "youtube",
    "washington",
    "post",
    "might",
    "say",
    "framework",
    "need",
    "framework",
    "build",
    "web",
    "application",
    "web",
    "site",
    "well",
    "framework",
    "essentially",
    "library",
    "reusable",
    "modules",
    "modules",
    "provide",
    "functionality",
    "common",
    "tasks",
    "example",
    "case",
    "web",
    "framework",
    "like",
    "django",
    "modules",
    "work",
    "http",
    "requests",
    "url",
    "sessions",
    "cookies",
    "concerns",
    "pretty",
    "much",
    "every",
    "website",
    "application",
    "functionality",
    "baked",
    "django",
    "code",
    "scratch",
    "use",
    "framework",
    "like",
    "django",
    "django",
    "technically",
    "framework",
    "library",
    "apart",
    "providing",
    "modules",
    "also",
    "provides",
    "structure",
    "application",
    "tells",
    "us",
    "folders",
    "files",
    "project",
    "provides",
    "consistency",
    "among",
    "various",
    "django",
    "projects",
    "move",
    "one",
    "company",
    "another",
    "work",
    "different",
    "projects",
    "easily",
    "transition",
    "one",
    "project",
    "another",
    "applications",
    "follow",
    "structure",
    "interaction",
    "let",
    "create",
    "first",
    "django",
    "project",
    "back",
    "pycharm",
    "close",
    "hello",
    "world",
    "project",
    "create",
    "new",
    "project",
    "create",
    "new",
    "project",
    "let",
    "call",
    "new",
    "project",
    "pyshop",
    "go",
    "ahead",
    "alright",
    "bottom",
    "let",
    "open",
    "terminal",
    "window",
    "window",
    "going",
    "install",
    "django",
    "use",
    "pip",
    "install",
    "django",
    "sure",
    "add",
    "two",
    "equal",
    "signs",
    "followed",
    "telling",
    "pip",
    "want",
    "install",
    "django",
    "version",
    "reason",
    "future",
    "watching",
    "video",
    "chances",
    "newer",
    "version",
    "django",
    "want",
    "make",
    "sure",
    "easily",
    "follow",
    "tutorials",
    "even",
    "though",
    "going",
    "show",
    "tutorials",
    "likely",
    "work",
    "latest",
    "version",
    "django",
    "want",
    "safe",
    "side",
    "let",
    "go",
    "ahead",
    "alright",
    "django",
    "installed",
    "next",
    "need",
    "create",
    "django",
    "project",
    "press",
    "control",
    "l",
    "cleans",
    "terminal",
    "window",
    "easier",
    "see",
    "create",
    "django",
    "project",
    "need",
    "execute",
    "command",
    "django",
    "space",
    "start",
    "project",
    "space",
    "going",
    "call",
    "project",
    "pyshop",
    "space",
    "period",
    "install",
    "django",
    "django",
    "brings",
    "command",
    "line",
    "utility",
    "called",
    "django",
    "admin",
    "utility",
    "program",
    "execute",
    "form",
    "command",
    "line",
    "terminal",
    "right",
    "program",
    "takes",
    "various",
    "arguments",
    "case",
    "want",
    "use",
    "argument",
    "start",
    "project",
    "going",
    "create",
    "project",
    "called",
    "pushup",
    "current",
    "folder",
    "period",
    "imported",
    "means",
    "current",
    "folder",
    "add",
    "period",
    "utility",
    "going",
    "create",
    "extra",
    "folder",
    "looks",
    "little",
    "bit",
    "repetitive",
    "let",
    "go",
    "ahead",
    "alright",
    "back",
    "project",
    "panel",
    "expand",
    "py",
    "shop",
    "see",
    "project",
    "created",
    "pycharm",
    "folder",
    "files",
    "seen",
    "means",
    "folder",
    "package",
    "import",
    "various",
    "modules",
    "package",
    "modules",
    "module",
    "define",
    "various",
    "settings",
    "application",
    "going",
    "see",
    "later",
    "course",
    "also",
    "url",
    "module",
    "module",
    "define",
    "user",
    "see",
    "see",
    "slash",
    "cart",
    "going",
    "work",
    "finally",
    "module",
    "wsgi",
    "short",
    "web",
    "server",
    "gateway",
    "interface",
    "purpose",
    "module",
    "provide",
    "standard",
    "interface",
    "applications",
    "built",
    "django",
    "web",
    "servers",
    "advanced",
    "topic",
    "worry",
    "outside",
    "folder",
    "folder",
    "also",
    "new",
    "folder",
    "project",
    "name",
    "implies",
    "use",
    "manage",
    "django",
    "project",
    "start",
    "web",
    "server",
    "work",
    "data",
    "base",
    "going",
    "work",
    "soon",
    "let",
    "open",
    "terminal",
    "window",
    "one",
    "time",
    "type",
    "command",
    "python",
    "windows",
    "python",
    "3",
    "mac",
    "told",
    "beginning",
    "course",
    "mac",
    "default",
    "comes",
    "installation",
    "python",
    "python",
    "course",
    "python",
    "python",
    "3",
    "space",
    "manage",
    "space",
    "run",
    "server",
    "going",
    "python",
    "interpreter",
    "running",
    "program",
    "passing",
    "run",
    "server",
    "argument",
    "essentially",
    "program",
    "worked",
    "django",
    "admin",
    "use",
    "django",
    "admin",
    "creating",
    "django",
    "project",
    "django",
    "project",
    "project",
    "work",
    "module",
    "contains",
    "python",
    "code",
    "use",
    "module",
    "manage",
    "django",
    "project",
    "let",
    "go",
    "ahead"
  ],
  "keywords": [
    "hi",
    "name",
    "mosh",
    "going",
    "python",
    "course",
    "learn",
    "everything",
    "need",
    "get",
    "started",
    "programming",
    "one",
    "popular",
    "every",
    "day",
    "use",
    "things",
    "like",
    "well",
    "applications",
    "job",
    "talk",
    "build",
    "three",
    "projects",
    "first",
    "project",
    "create",
    "beautiful",
    "store",
    "see",
    "also",
    "using",
    "framework",
    "called",
    "django",
    "built",
    "worry",
    "machine",
    "learning",
    "write",
    "music",
    "based",
    "show",
    "time",
    "program",
    "thousands",
    "spreadsheets",
    "second",
    "entire",
    "old",
    "easy",
    "plus",
    "give",
    "writing",
    "programs",
    "two",
    "3",
    "code",
    "language",
    "tutorial",
    "download",
    "install",
    "computer",
    "thing",
    "want",
    "open",
    "click",
    "currently",
    "video",
    "future",
    "let",
    "go",
    "ahead",
    "alright",
    "look",
    "folder",
    "simply",
    "double",
    "windows",
    "check",
    "box",
    "add",
    "really",
    "important",
    "make",
    "sure",
    "otherwise",
    "mac",
    "continue",
    "take",
    "close",
    "next",
    "word",
    "many",
    "pycharm",
    "short",
    "basically",
    "run",
    "warning",
    "application",
    "import",
    "matter",
    "okay",
    "select",
    "used",
    "keyword",
    "might",
    "useful",
    "finally",
    "start",
    "new",
    "call",
    "hello",
    "world",
    "item",
    "interpreter",
    "set",
    "execute",
    "know",
    "understand",
    "default",
    "come",
    "2",
    "means",
    "earlier",
    "list",
    "right",
    "file",
    "convention",
    "files",
    "py",
    "panel",
    "type",
    "print",
    "int",
    "parenthesis",
    "inside",
    "either",
    "single",
    "quotes",
    "piece",
    "top",
    "note",
    "command",
    "always",
    "control",
    "different",
    "little",
    "terminal",
    "window",
    "output",
    "user",
    "bit",
    "printed",
    "way",
    "result",
    "comment",
    "tell",
    "error",
    "best",
    "move",
    "draw",
    "dog",
    "part",
    "gets",
    "executed",
    "press",
    "enter",
    "line",
    "another",
    "statement",
    "followed",
    "4",
    "space",
    "dot",
    "told",
    "1",
    "something",
    "defining",
    "string",
    "characters",
    "number",
    "operator",
    "math",
    "10",
    "expression",
    "value",
    "put",
    "could",
    "exercise",
    "statements",
    "whatever",
    "lot",
    "would",
    "say",
    "basic",
    "order",
    "web",
    "example",
    "6",
    "total",
    "point",
    "year",
    "work",
    "ask",
    "path",
    "variables",
    "specific",
    "pretty",
    "data",
    "memory",
    "price",
    "imagine",
    "access",
    "variable",
    "define",
    "equal",
    "sign",
    "0",
    "bunch",
    "20",
    "numbers",
    "without",
    "refer",
    "integer",
    "kind",
    "equals",
    "boolean",
    "true",
    "false",
    "underline",
    "separate",
    "multiple",
    "words",
    "values",
    "case",
    "lower",
    "upper",
    "capital",
    "simple",
    "strings",
    "complex",
    "lists",
    "john",
    "smith",
    "age",
    "done",
    "back",
    "names",
    "learned",
    "messages",
    "input",
    "message",
    "instead",
    "functions",
    "think",
    "change",
    "printing",
    "function",
    "calling",
    "question",
    "return",
    "happens",
    "person",
    "color",
    "likes",
    "works",
    "pass",
    "anything",
    "sheet",
    "support",
    "calculate",
    "birth",
    "colon",
    "got",
    "information",
    "find",
    "exactly",
    "real",
    "even",
    "types",
    "represents",
    "problem",
    "convert",
    "far",
    "class",
    "classes",
    "weight",
    "kilograms",
    "pounds",
    "defined",
    "times",
    "multiply",
    "sequence",
    "returns",
    "beginners",
    "form",
    "immediately",
    "solve",
    "remove",
    "beginning",
    "end",
    "delete",
    "lines",
    "jon",
    "square",
    "brackets",
    "character",
    "index",
    "negative",
    "last",
    "test",
    "similar",
    "supply",
    "formatted",
    "generate",
    "better",
    "contains",
    "else",
    "us",
    "curly",
    "braces",
    "easily",
    "50",
    "count",
    "items",
    "methods",
    "object",
    "method",
    "kinds",
    "objects",
    "modify",
    "original",
    "still",
    "absolute",
    "operations",
    "slash",
    "operators",
    "x",
    "takes",
    "rules",
    "5",
    "working",
    "module",
    "modules",
    "try",
    "search",
    "condition",
    "conditions",
    "hot",
    "cold",
    "automatically",
    "block",
    "tab",
    "lets",
    "indentation",
    "says",
    "el",
    "none",
    "good",
    "credit",
    "greater",
    "30",
    "less",
    "telling",
    "loops",
    "game",
    "loop",
    "reason",
    "iteration",
    "guess",
    "9",
    "rename",
    "break",
    "car",
    "stop",
    "quit",
    "stopped",
    "empty",
    "properly",
    "third",
    "already",
    "iterate",
    "range",
    "current",
    "coordinates",
    "inner",
    "row",
    "largest",
    "random",
    "max",
    "dimensional",
    "matrix",
    "array",
    "rows",
    "columns",
    "model",
    "tuple",
    "dictionary",
    "key",
    "smiley",
    "face",
    "emoji",
    "split",
    "converter",
    "naming",
    "greet",
    "reference",
    "parameters",
    "parameter",
    "positional",
    "argument",
    "arguments",
    "shipping",
    "algorithm",
    "comments",
    "self",
    "attribute",
    "walk",
    "cat",
    "packages",
    "directory",
    "package",
    "ecommerce",
    "library",
    "testing",
    "cell",
    "chart",
    "column",
    "cells",
    "accuracy",
    "csv",
    "training",
    "decision",
    "train",
    "predictions",
    "lecture",
    "jupiter",
    "notebook",
    "mode",
    "sets",
    "tree"
  ]
}