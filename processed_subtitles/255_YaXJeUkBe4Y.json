{
  "text": "hey friends welcome back to the channel\nso in this video we're going to be\ncovering the five different types of\nsoftware testing that you need to know\nas a software developer now if you've\nlooked into software testing before\nyou're probably aware of the testing\npyramid chances are you probably haven't\nthought much about why the pyramid is a\npyramid to start off with test at the\nbottom of the pyramid should make up the\nmajority of the test in your test Suite\nthis is where you should be focusing\nmost of your efforts on as we move up\nthe pyramid the tests becomes slower\nthey become more complex and they take\nmore time to maintain at the base of our\npyramid we have the unit tests now most\ndevelopers are aware of what unit tests\nare and the importance of them we write\nunit tests for all the methods and\nfunctions in our code to make sure that\nour program is working correctly at the\nlowest level the number of unit tests\nyou have to write is really dependent on\nwhat the goal is for your testing\nstrategy you should try and test every\nsingle line of your code in your methods\nif you're not able to do that then it's\nusually a sign that your function is\ndoing too much or you haven't written it\nwith testability in mind when we write\nunit tests to test every single line of\ncode this is what we refer to as code\ncoverage typically one hundred percent\ncode coverage refers to line coverage\nbut this will vary depending on what\ntype of Industry you're working in if\nyou're working for the military or the\naviation Industries then you'll\ngenerally need what they call modified\ncondition decision coverage or mcdc for\nshort for mcdc you not only test every\nsingle line of code you also have to\ntest every single decision as well let's\nsay you have an if statement that has\nthree different conditions in it\ntherefore under mcdc coverage you need\nto write at least eight different unit\ntests to cover all the different\nscenarios you would assume that if\neverything is working at the lowest\nlevel then it's all going to work when\nyou put it together but that isn't\nalways the case which is why we need the\nnext level of tests the next level up in\nour testing pyramid is what we call\ncomponent tests this is where we test a\ncomplete section of your application for\nexample if you're writing a web\napplication you might have a front end\nan API and a database a component test\nfor the API would therefore test the API\nin isolation from all the other\ncomponents we wouldn't include the front\nend for example and we'd also mock out\nthe database as well as any other\ncomponents that your API is talking to\nthe purpose of the component test is to\nmake sure that your application is doing\nwhat you expect it to do without the\ninterference of the other components by\nmocking out the database we can test\nboth the happy path and the unhappy path\nof your application we can see how the\napplication will behave under certain\nconditions such as if the database is\ndown or if you send in a bad request\ncomponent tests make sure that all those\nunits that you tested in the previous\nlevel work well when you put them\ntogether the next level on our testing\npyramid is what we call the integration\ntests in the previous level we mocked\nout the database and other factors but\nhere we want to make sure that those\nIntegrations actually work this is where\nyou'll usually find out that this team\nthat you've been working with that have\ndecided to use camel case instead of\nsnake case for their API the monsters or\nyou'll find out that you have the\nconnection string wrong for your\ndatabase or you've written a typo in one\nof your SQL queries for all of these\ntests that we've done so far we\ngenerally don't do it on a natural\nenvironment unit tests component tests\nand integration tests are all generally\nrun as part of the build process or at\nthe very least before a release thanks\nto Docker it's fairly easy to spin up a\ndatabase and use it when you're running\nyour tests on your cicd server a lot of\ndevelopers get confused by integration\ntests thinking they need to test all of\ntheir application but that isn't the\ncase you just need to test the\nIntegrations between your components\ngenerally depending on who writes your\nintegration tests whether it be a\ndeveloper or a tester will determine\nwhether they're considered white box\ntesting or Black Box testing for example\nif your integration tests are written by\na developer and you're testing whether\nyour database repository can correctly\nwrite you your database then this would\nbe considered a white box test however\nif your integration tests are written by\na tester then they might be calling the\nAPI and then seeing whether there's\nsomething in the database this would\ntherefore be more of a black box because\nthey don't need to know the internals of\nthe application it's not just the calls\nto the database that you might want to\ninclude in your integration tests you\nalso want to test things like calling\nother apis as well as writing a message\nfor a message queue so far we've tested\nthe individual functions we've tested\nthe components and we've tested how they\ninteract together the next level is to\ntest the application from end to end if\nyou're writing a web application then\nthese will typically be in the form of\nautomated UI tests and we generally use\ntools such as selenium or Cyprus to\ndrive the UI through a web browser the\ngoal here is to test that everything is\nworking as expected end-to-end tests\ntypically include a mix between\nfunctional testing such as making sure\nthe login works or a list is populated\ncorrectly and acceptance testing which\nmakes sure that your application is\nmeeting business requirements we tend to\nwrite end-to-end tests in what we call\ngherkin language which follows the given\nwhen then pattern Frameworks such as\nspec flow and cucumber allow us to\nexecute code in this format while still\nhaving the tests understandable by the\nbusiness stakeholders end-to-end tests\ncan take a really long time to run and\ntypically they're not run on every\nsingle build once you have a lot of them\nthey can take several hours to run so\nyou generally need to run them overnight\nthis isn't ideal if you want to be\nreleasing multiple times per day and\ntherefore most teams split up their\ntests into multiple groups with a\ncritical group that they can run before\neach deployment unlike the other tests\nthat we've looked at so far end-to-end\ntests needs all the components working\ntogether and therefore they typically\nrun on an environment such as QA or uat\nit can take a while to have a stable set\nof end-to-end tests especially if you're\nrunning them in a browser subtle things\nsuch as your application taking a little\nlonger to load can cause your tests to\nbreak and therefore you generally need\nsomeone working full time on your\nautomation tests many of the Frameworks\nallow you to take screenshots when a\ntest fails this can be really useful to\nhelp you see what caused the failure\nthere are quite a lot of different tests\nthat fall under this bracket such as\nperformance testing regression testing\nand security testing finally at the very\ntop of our pyramid we have the manual\ntests these are the tests that are\neither too complicated to try and\nautomate or they're not worth the time\nin trying to do it usually it's a case\nof having not enough testers to\ndevelopers which results in tests having\nto be run manually instead of automating\nthem ideally you want to have the\nmajority of your tests automated\notherwise you're going to be in this\nvicious cycle of not having enough time\nto test your application before each\nrelease if you find a bug in your\napplication then it's always better to\nfind it lower down the pyramid than it\nis near the top let's say you find a bug\nwhile you're doing your manual testing\nyou now have to search for your logs and\ntry and work out where exactly your\napplication failed compare that to\nfinding a bug in your unit tests and\nyou'll be given a stack Trace that shows\nyou the exact line where the problem\noccurred if you like this video then\nplease hit that like button it really\nhelps with the YouTube algorithm and it\nhelps others find my videos thank you\nfor watching and I'll see you in the\nnext video\n",
  "words": [
    "hey",
    "friends",
    "welcome",
    "back",
    "channel",
    "video",
    "going",
    "covering",
    "five",
    "different",
    "types",
    "software",
    "testing",
    "need",
    "know",
    "software",
    "developer",
    "looked",
    "software",
    "testing",
    "probably",
    "aware",
    "testing",
    "pyramid",
    "chances",
    "probably",
    "thought",
    "much",
    "pyramid",
    "pyramid",
    "start",
    "test",
    "bottom",
    "pyramid",
    "make",
    "majority",
    "test",
    "test",
    "suite",
    "focusing",
    "efforts",
    "move",
    "pyramid",
    "tests",
    "becomes",
    "slower",
    "become",
    "complex",
    "take",
    "time",
    "maintain",
    "base",
    "pyramid",
    "unit",
    "tests",
    "developers",
    "aware",
    "unit",
    "tests",
    "importance",
    "write",
    "unit",
    "tests",
    "methods",
    "functions",
    "code",
    "make",
    "sure",
    "program",
    "working",
    "correctly",
    "lowest",
    "level",
    "number",
    "unit",
    "tests",
    "write",
    "really",
    "dependent",
    "goal",
    "testing",
    "strategy",
    "try",
    "test",
    "every",
    "single",
    "line",
    "code",
    "methods",
    "able",
    "usually",
    "sign",
    "function",
    "much",
    "written",
    "testability",
    "mind",
    "write",
    "unit",
    "tests",
    "test",
    "every",
    "single",
    "line",
    "code",
    "refer",
    "code",
    "coverage",
    "typically",
    "one",
    "hundred",
    "percent",
    "code",
    "coverage",
    "refers",
    "line",
    "coverage",
    "vary",
    "depending",
    "type",
    "industry",
    "working",
    "working",
    "military",
    "aviation",
    "industries",
    "generally",
    "need",
    "call",
    "modified",
    "condition",
    "decision",
    "coverage",
    "mcdc",
    "short",
    "mcdc",
    "test",
    "every",
    "single",
    "line",
    "code",
    "also",
    "test",
    "every",
    "single",
    "decision",
    "well",
    "let",
    "say",
    "statement",
    "three",
    "different",
    "conditions",
    "therefore",
    "mcdc",
    "coverage",
    "need",
    "write",
    "least",
    "eight",
    "different",
    "unit",
    "tests",
    "cover",
    "different",
    "scenarios",
    "would",
    "assume",
    "everything",
    "working",
    "lowest",
    "level",
    "going",
    "work",
    "put",
    "together",
    "always",
    "case",
    "need",
    "next",
    "level",
    "tests",
    "next",
    "level",
    "testing",
    "pyramid",
    "call",
    "component",
    "tests",
    "test",
    "complete",
    "section",
    "application",
    "example",
    "writing",
    "web",
    "application",
    "might",
    "front",
    "end",
    "api",
    "database",
    "component",
    "test",
    "api",
    "would",
    "therefore",
    "test",
    "api",
    "isolation",
    "components",
    "would",
    "include",
    "front",
    "end",
    "example",
    "also",
    "mock",
    "database",
    "well",
    "components",
    "api",
    "talking",
    "purpose",
    "component",
    "test",
    "make",
    "sure",
    "application",
    "expect",
    "without",
    "interference",
    "components",
    "mocking",
    "database",
    "test",
    "happy",
    "path",
    "unhappy",
    "path",
    "application",
    "see",
    "application",
    "behave",
    "certain",
    "conditions",
    "database",
    "send",
    "bad",
    "request",
    "component",
    "tests",
    "make",
    "sure",
    "units",
    "tested",
    "previous",
    "level",
    "work",
    "well",
    "put",
    "together",
    "next",
    "level",
    "testing",
    "pyramid",
    "call",
    "integration",
    "tests",
    "previous",
    "level",
    "mocked",
    "database",
    "factors",
    "want",
    "make",
    "sure",
    "integrations",
    "actually",
    "work",
    "usually",
    "find",
    "team",
    "working",
    "decided",
    "use",
    "camel",
    "case",
    "instead",
    "snake",
    "case",
    "api",
    "monsters",
    "find",
    "connection",
    "string",
    "wrong",
    "database",
    "written",
    "typo",
    "one",
    "sql",
    "queries",
    "tests",
    "done",
    "far",
    "generally",
    "natural",
    "environment",
    "unit",
    "tests",
    "component",
    "tests",
    "integration",
    "tests",
    "generally",
    "run",
    "part",
    "build",
    "process",
    "least",
    "release",
    "thanks",
    "docker",
    "fairly",
    "easy",
    "spin",
    "database",
    "use",
    "running",
    "tests",
    "cicd",
    "server",
    "lot",
    "developers",
    "get",
    "confused",
    "integration",
    "tests",
    "thinking",
    "need",
    "test",
    "application",
    "case",
    "need",
    "test",
    "integrations",
    "components",
    "generally",
    "depending",
    "writes",
    "integration",
    "tests",
    "whether",
    "developer",
    "tester",
    "determine",
    "whether",
    "considered",
    "white",
    "box",
    "testing",
    "black",
    "box",
    "testing",
    "example",
    "integration",
    "tests",
    "written",
    "developer",
    "testing",
    "whether",
    "database",
    "repository",
    "correctly",
    "write",
    "database",
    "would",
    "considered",
    "white",
    "box",
    "test",
    "however",
    "integration",
    "tests",
    "written",
    "tester",
    "might",
    "calling",
    "api",
    "seeing",
    "whether",
    "something",
    "database",
    "would",
    "therefore",
    "black",
    "box",
    "need",
    "know",
    "internals",
    "application",
    "calls",
    "database",
    "might",
    "want",
    "include",
    "integration",
    "tests",
    "also",
    "want",
    "test",
    "things",
    "like",
    "calling",
    "apis",
    "well",
    "writing",
    "message",
    "message",
    "queue",
    "far",
    "tested",
    "individual",
    "functions",
    "tested",
    "components",
    "tested",
    "interact",
    "together",
    "next",
    "level",
    "test",
    "application",
    "end",
    "end",
    "writing",
    "web",
    "application",
    "typically",
    "form",
    "automated",
    "ui",
    "tests",
    "generally",
    "use",
    "tools",
    "selenium",
    "cyprus",
    "drive",
    "ui",
    "web",
    "browser",
    "goal",
    "test",
    "everything",
    "working",
    "expected",
    "tests",
    "typically",
    "include",
    "mix",
    "functional",
    "testing",
    "making",
    "sure",
    "login",
    "works",
    "list",
    "populated",
    "correctly",
    "acceptance",
    "testing",
    "makes",
    "sure",
    "application",
    "meeting",
    "business",
    "requirements",
    "tend",
    "write",
    "tests",
    "call",
    "gherkin",
    "language",
    "follows",
    "given",
    "pattern",
    "frameworks",
    "spec",
    "flow",
    "cucumber",
    "allow",
    "us",
    "execute",
    "code",
    "format",
    "still",
    "tests",
    "understandable",
    "business",
    "stakeholders",
    "tests",
    "take",
    "really",
    "long",
    "time",
    "run",
    "typically",
    "run",
    "every",
    "single",
    "build",
    "lot",
    "take",
    "several",
    "hours",
    "run",
    "generally",
    "need",
    "run",
    "overnight",
    "ideal",
    "want",
    "releasing",
    "multiple",
    "times",
    "per",
    "day",
    "therefore",
    "teams",
    "split",
    "tests",
    "multiple",
    "groups",
    "critical",
    "group",
    "run",
    "deployment",
    "unlike",
    "tests",
    "looked",
    "far",
    "tests",
    "needs",
    "components",
    "working",
    "together",
    "therefore",
    "typically",
    "run",
    "environment",
    "qa",
    "uat",
    "take",
    "stable",
    "set",
    "tests",
    "especially",
    "running",
    "browser",
    "subtle",
    "things",
    "application",
    "taking",
    "little",
    "longer",
    "load",
    "cause",
    "tests",
    "break",
    "therefore",
    "generally",
    "need",
    "someone",
    "working",
    "full",
    "time",
    "automation",
    "tests",
    "many",
    "frameworks",
    "allow",
    "take",
    "screenshots",
    "test",
    "fails",
    "really",
    "useful",
    "help",
    "see",
    "caused",
    "failure",
    "quite",
    "lot",
    "different",
    "tests",
    "fall",
    "bracket",
    "performance",
    "testing",
    "regression",
    "testing",
    "security",
    "testing",
    "finally",
    "top",
    "pyramid",
    "manual",
    "tests",
    "tests",
    "either",
    "complicated",
    "try",
    "automate",
    "worth",
    "time",
    "trying",
    "usually",
    "case",
    "enough",
    "testers",
    "developers",
    "results",
    "tests",
    "run",
    "manually",
    "instead",
    "automating",
    "ideally",
    "want",
    "majority",
    "tests",
    "automated",
    "otherwise",
    "going",
    "vicious",
    "cycle",
    "enough",
    "time",
    "test",
    "application",
    "release",
    "find",
    "bug",
    "application",
    "always",
    "better",
    "find",
    "lower",
    "pyramid",
    "near",
    "top",
    "let",
    "say",
    "find",
    "bug",
    "manual",
    "testing",
    "search",
    "logs",
    "try",
    "work",
    "exactly",
    "application",
    "failed",
    "compare",
    "finding",
    "bug",
    "unit",
    "tests",
    "given",
    "stack",
    "trace",
    "shows",
    "exact",
    "line",
    "problem",
    "occurred",
    "like",
    "video",
    "please",
    "hit",
    "like",
    "button",
    "really",
    "helps",
    "youtube",
    "algorithm",
    "helps",
    "others",
    "find",
    "videos",
    "thank",
    "watching",
    "see",
    "next",
    "video"
  ],
  "keywords": [
    "video",
    "going",
    "different",
    "software",
    "testing",
    "need",
    "developer",
    "pyramid",
    "test",
    "make",
    "tests",
    "take",
    "time",
    "unit",
    "developers",
    "write",
    "code",
    "sure",
    "working",
    "correctly",
    "level",
    "really",
    "try",
    "every",
    "single",
    "line",
    "usually",
    "written",
    "coverage",
    "typically",
    "generally",
    "call",
    "mcdc",
    "also",
    "well",
    "therefore",
    "would",
    "work",
    "together",
    "case",
    "next",
    "component",
    "application",
    "example",
    "writing",
    "web",
    "might",
    "end",
    "api",
    "database",
    "components",
    "include",
    "see",
    "tested",
    "integration",
    "want",
    "find",
    "use",
    "far",
    "run",
    "lot",
    "whether",
    "box",
    "like",
    "bug"
  ]
}