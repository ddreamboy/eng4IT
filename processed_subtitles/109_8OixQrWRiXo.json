{
  "text": "python is the most widely used\nprogramming language today when it comes\nto solving data science tasks and\nchallenges python never ceases to\nsurprise its audience most data\nscientists out there are already\nleveraging the power of python every day\nhi i'm abeksha from simply learn and\nwell after some thought and a bit more\nresearch i was finally able to narrow\ndown my choice of top python libraries\nfor data science what are they let's\nfind out so let's talk about this\namazing library tensorflow which is also\none of my favorites so tensorflow is a\nlibrary for high performance numerical\ncomputations with around 35 000 github\ncomments and a vibrant community of\naround 1500 contributors and it's used\nacross various scientific domains it's\nbasically a framework where we can\ndefine and run computations which\ninvolves tensors and tensors we can say\nare partially defined computational\nobjects again where they will eventually\nproduce a value that was about\ntensorflow let's talk about the features\nof tensorflow so tensorflow is majorly\nused in deep learning models and neural\nnetworks where we have other libraries\nlike torch and thiano also but\ntensorflow has hands down better\ncomputational graphical visualizations\nwhen compared to them also tensorflow\nreduces the error largely by 50 to 60 in\nneural machine translations it's highly\nparallel in a way where can train\nmultiple neural networks and multiple\ngpus for highly efficient and scalable\nmodels this parallel computing feature\nof tensorflow is also called pipelining\nalso tensorflow has the advantage of\nseamless performance as it's backed by\ngoogle it has quicker updates frequent\nnew releases with the latest of features\nnow let's look at some applications\ntensorflow is extensively used in speech\nand image recognition text based\napplications time series analysis and\nforecasting and various other\napplications involving video detection\nso favorite thing about tensorflow that\nit's already popular among the machine\nlearning community and most are open to\ntrying it and some of us are already\nusing it now let's look at an example of\na tensorflow model in this example we\nwill not dive deep into the explanation\nof the model as it is beyond the scope\nof this video so here we're using amnest\ndataset which consists of images of\nhandwritten digits handwritten digits\ncan be easily recognized by building a\nsimple tensorflow model let's see how\nwhen we visualize our data using\nmatplotlib library the inputs will look\nsomething like this then we create our\ntensorflow model to create a basic\ntensorflow model we need to initialize\nthe variables and start a session then\nafter training the model we can validate\nthe data and then predict the accuracy\nthis model has predicted 92 percent\naccuracy let's see which is pretty well\nfor this model so that's all for\ntensorflow if you need to understand\nthis tutorial in detail then you can go\nahead and watch our deep learning\ntutorial from simply learn as shown in\nthe right corner interesting right let's\nmove on to the next library now let's\ntalk about a common yet a very powerful\npython library called numpy numpy is a\nfundamental package for numerical\ncomputation in python it stands for\nnumerical python as the name suggests it\nhas around 18 000 comments on github\nwith an active community of 700\ncontributors it's a general purpose\narray processing package in a way that\nit provides high performance\nmulti-dimensional objects called arrays\nand tools for working with them also\nnumpy addresses the slowness problem\npartly by providing these\nmulti-dimensional arrays that we talked\nabout and then functions and operators\nthat operate efficiently on these arrays\ninteresting right now let's talk about\nfeatures of number it's very easy to\nwork with large arrays and mattresses\nusing numpy numpy fully supports object\noriented approach for example coming\nback to nd array once again it's a class\npossessing numerous methods and\nattributes ndra provides for larger and\nrepeated computations numpy offers\nvectorization it's more faster and\ncompact than traditional methods i\nalways wanted to get rid of loops and\nvectorization of numpy clearly helps me\nwith that now let's talk about the\napplications of numpy numpy along with\npandas is extensively used in data\nanalysis which forms the basis of data\nscience it helps in creating the\npowerful n-dimensional array whenever we\ntalk about numpy the mention of the\narray we cannot do it without the\nmention of the powerful n-dimensional\narray also number is extensively used in\nmachine learning when we are creating\nmachine learning models as in where it\nforms the base of other libraries like\nsci-by scikit-learn etc when you start\ncreating the machine learning models in\ndata science you will realize that all\nthe models will have their bases numpy\nor pandas also when number is used with\nscipy and matplotlib it can be used as a\nreplacement of matlab now let's look at\na simple example of an array in numpy as\nyou can see here there are multiple\narray manipulation routines like there\nare basic examples where you can copy\nthe values from one array to another we\ncan give a new shape to an array from\nmaybe one dimensional we can make it as\na two dimensional array we can return a\ncopy of the array collapsed into one\ndimension now let's look at an example\nwhere this is a notebook and we will\njust create a basic array and\nfor detailed explanation you can watch\nour other videos which targets on these\nexplanations of each libraries so first\nof all whenever we are using any library\nin python we have to import it so now\nthis np is the alias which we will be\nusing let's create a simple array\nlet's look what is the type of this\narray\nso this is an nd array type of array\nalso let's look what's the shape of this\narray\nso this is a shape of the array now here\nwe saw that we can expand the shape of\nthe array\nso this is where you can change the\nshape of the array using all those\nfunctions now let's create another using\narrange functions if i give arrange 12\nit will give me a 1d array of 12 numbers\nlike this now we can reshape this array\nto 3 comma 4 or we can write it here\nitself\nso this is how our range function and\nthe reshape function works for numpy now\nlet's discuss the next library which is\nscipy so this is another free and open\nsource python library extensively used\nin data science for high level\ncomputations so this library as the name\nsuggests stands for scientific python\nand it has around 19 000 comments on\ngithub with an active community of 600\ncontributors it is extensively used for\nscientific and technical computations\nalso as it extends numpy it provides\nmany user friendly and efficient\nroutines for scientific calculations now\nlet's discuss about some features of\nscipy so scipy has its collection of\nalgorithms and functions which is built\non the numpy extension of python\nsecondly it has various high level\ncommands for data manipulation and\nvisualization also the ndmh function of\nscipy is very useful in\nmulti-dimensional image processing and\nit includes built-in functions for\nsolving differential equations linear\nalgebra and many more so that was about\nthe features of sci-fi now let's discuss\nits applications so cyber is used in\nmulti-dimensional image operations it\nhas functions to read images from disk\ninto number arrays to write arrays to\ndiscuss images resize images etc solving\ndifferential equations fourier\ntransforms then optimization algorithms\nlinear algebra etc let's look at a\nsimple example to learn what kind of\nfunctions are there in sci by here i'm\nimporting the constants package of scipy\nlibrary so in this package it has all\nthe constants\nso here i'm just mentioning c or edge or\nany and this library already knows what\nit has to fetch like speed of light\nplanck's constant etc so this can be\nused in further calculations data\nanalysis is an integral part of data\nscience data scientists spend most of\nthe day in data munching and then\ncleaning the data also hence mention of\npandas is a must in data science life\ncycle yes pandas is the most popular and\nwidely used python library for data\nscience along with numpy and matplotlib\nthe name itself stands for python data\nanalysis with around 17 000 comments on\ngithub and an active community of 1200\ncontributors it is heavily used for data\nanalysis and cleaning as it provides\nfast flexible data structures like data\nframes series which are designed to work\nwith structured data very easily and\nintuitively now let's talk about some\nfeatures of pandas so panas offers this\neloquent syntax and rich functionalities\nlike there are various methods and\npandas like drop n a phil na which gives\nyou the freedom to deal with missing\ndata also partners provides a powerful\napply function which lets you create\nyour own function and run it across a\nseries of data now forget about writing\nthose for loops while using pandas also\nthis library's high level abstraction\nover low level numpy which is written in\npure c then it also contains these high\nlevel data structures and manipulation\ntools which makes it very easy to work\nwith pandas like their data structures\nand series now let's discuss the\napplications of pandas so panas is\nextensively used in general data\nwrangling and data cleaning then pandas\nalso finds its usage in edl jobs for\ndata transformation and data storage as\nit has excellent support for loading csv\nfiles into its data frame format then\npandas is used in a variety of academic\nand commercial domains including\nstatistics finance neuroscience\neconomics web analytics etc then pandas\nis also very useful in time series\nspecific functionality like date range\ngeneration moving window linear\nregression date shifting etc now let's\nlook at a very simple example of how to\ncreate a data frame so data frame is a\nvery useful data structure in pandas and\nit has very powerful functionalities so\nhere i'm only enlisting important\nlibraries in data science you can\nexplore more of our videos to learn\nabout these libraries in detail so let's\njust go ahead and create a data frame\ni'm using jupyter notebook again and in\nthis before using pandas here i'm\nimporting the pandas library\nlet me go and run this so in data frame\nwe can import a file a csv file excel\nfile so there are many functions doing\nthese things and we can also create our\nown data and put it into data frame so\nhere i am taking random data and putting\nin a data frame also i'm creating an\nindex and then also giving the column\nnames so pd is the alias we've given\npandas random data of 6x4 index which is\ntaking a range six numbers and column\nname i'm giving as abcd now let's go\nahead and look at it\nso here it has created a data frame with\nmy column names up abcd\nmy list has six numbers zero to five and\na random data of six by four so\ndataframe is just another table with\nrows and columns where you can do\nvarious functions over it also i can go\nahead and describe this data frame to\nsee so it's giving me all these\nfunctionalities where count and mean and\nstandard deviation etc okay so that was\nabout pandas now let's talk about next\nlibrary and the last one so matplotlib\nfor me is the most fun library out of\nall of them why because it has such\npowerful yet beautiful visualizations\nwe'll see in the coming slides plot and\nmatplotlib suggests that it's a plotting\nlibrary for python it has around 26 000\ncomments on github and a very vibrant\ncommunity of 700 contributors and\nbecause of such graphs and plots that it\nproduces it's majorly used for data\nvisualization and also because it\nprovides an object oriented api which\ncan be used to embed those plots into\nour applications let's talk about the\nfeatures of matplotlib the pi plot\nmodule of matplotlib provides\nmatlab-like interface so matplotlib is\ndesigned to be as usable as matlab with\nan advantage of being free and open\nsource also it supports dozens of\nbackends and output types which means\nyou can use it regardless of which\noperating system you're using or which\noutput format you wish pandas itself can\nbe used as wrappers around matplotlibs\napi so as to drive matplotlib via\ncleaner and more modern apis also when\nyou start using this library you will\nrealize that it has a very little memory\nconsumption and a very good runtime\nbehavior now let's talk about the\napplications of matplotlib it's\nimportant to discover the unknown\nrelationship between the variables in\nyour data set so this library helps to\nvisualize the correlation analysis of\nvariables also in machine learning we\ncan visualize 95 percent confidence\ninterval of the model just to\ncommunicate how well our model fits the\ndata then mat modular finds its\napplication and outlier detection using\nscatter plot etc and to visualize the\ndistribution of data to gain instant\ninsights now let's make a very simple\nplot to get a basic idea i've already\nimported the libraries here so this\nfunction matplotlib inline will help you\nshow the plots in the jupiter notebook\nthis is also called a magic function i\nwon't be able to display my plots in the\njupiter notebook if i don't use this\nfunction i am using this function in\nnumpy to fix random state for\nreproducibility now i'll take my n as 30\nand will assign random values to my\nvariables so this function is generating\n30 random numbers here i'm trying to\ncreate a scatter plot so i want to\ndecide the area\nlet's\nput this so this just multiplying 30\nwith random numbers to the power 2 so\nthat we get the area of the plot which\nwe will see in just a minute so using\nthe scatter function and the alias of\nmatplotlib as plt i've created this if i\ndon't use this and i have very small\ncircles as my scatter plot it's colorful\nit's nice so that's one very easy plot i\nsuggest that you explore more of\nmatplotlib and i'm sure you will enjoy\nit let's create a histogram so i'm using\nmy the style as gg plot and assigning\nsome values to these variables any\nrandom values\nnow we are assigning bars and colors and\nalignment to the plot and here we get\nthe graph so we can create different\ntype of visualizations and plots and\nthen work upon them using matplotlib and\nit's just that simple so that was about\nthe leading python libraries in the\nfield of data science but along with\nthese libraries data scientists are also\nleveraging the power of some other\nuseful libraries for example like\ntensorflow keras is another popular\nlibrary which is extensively used for\ndeep learning and neural network modules\nkeras drafts both tensorflow and theano\nback-ends so it is a good option if you\ndon't want to dive into details of\ntensorflow then scikit-learn is a\nmachine learning library it provides\nalmost all the machine learning\nalgorithms that you need and it is\ndesigned to interpolate with numpy and\nsci-by then we have c bond which is\nanother library for data visualization\nwe can say that seaborne is an\nenhancement of matplotlib as it\nintroduces additional plot types so this\nwas about top python libraries for data\nscience according to me it still may not\ncover some other great useful libraries\nthat deserve to be looked at so share\nyour favorites in the comment section\nbelow as well as any interesting things\nabout the libraries that we mentioned\nthat's all from my site thank you and\nkeep learning\nhi there if you like this video\nsubscribe to the simply learn youtube\nchannel and click here to watch similar\nvideos to nerd up and get certified\nclick here\n",
  "words": [
    "python",
    "widely",
    "used",
    "programming",
    "language",
    "today",
    "comes",
    "solving",
    "data",
    "science",
    "tasks",
    "challenges",
    "python",
    "never",
    "ceases",
    "surprise",
    "audience",
    "data",
    "scientists",
    "already",
    "leveraging",
    "power",
    "python",
    "every",
    "day",
    "hi",
    "abeksha",
    "simply",
    "learn",
    "well",
    "thought",
    "bit",
    "research",
    "finally",
    "able",
    "narrow",
    "choice",
    "top",
    "python",
    "libraries",
    "data",
    "science",
    "let",
    "find",
    "let",
    "talk",
    "amazing",
    "library",
    "tensorflow",
    "also",
    "one",
    "favorites",
    "tensorflow",
    "library",
    "high",
    "performance",
    "numerical",
    "computations",
    "around",
    "35",
    "000",
    "github",
    "comments",
    "vibrant",
    "community",
    "around",
    "1500",
    "contributors",
    "used",
    "across",
    "various",
    "scientific",
    "domains",
    "basically",
    "framework",
    "define",
    "run",
    "computations",
    "involves",
    "tensors",
    "tensors",
    "say",
    "partially",
    "defined",
    "computational",
    "objects",
    "eventually",
    "produce",
    "value",
    "tensorflow",
    "let",
    "talk",
    "features",
    "tensorflow",
    "tensorflow",
    "majorly",
    "used",
    "deep",
    "learning",
    "models",
    "neural",
    "networks",
    "libraries",
    "like",
    "torch",
    "thiano",
    "also",
    "tensorflow",
    "hands",
    "better",
    "computational",
    "graphical",
    "visualizations",
    "compared",
    "also",
    "tensorflow",
    "reduces",
    "error",
    "largely",
    "50",
    "60",
    "neural",
    "machine",
    "translations",
    "highly",
    "parallel",
    "way",
    "train",
    "multiple",
    "neural",
    "networks",
    "multiple",
    "gpus",
    "highly",
    "efficient",
    "scalable",
    "models",
    "parallel",
    "computing",
    "feature",
    "tensorflow",
    "also",
    "called",
    "pipelining",
    "also",
    "tensorflow",
    "advantage",
    "seamless",
    "performance",
    "backed",
    "google",
    "quicker",
    "updates",
    "frequent",
    "new",
    "releases",
    "latest",
    "features",
    "let",
    "look",
    "applications",
    "tensorflow",
    "extensively",
    "used",
    "speech",
    "image",
    "recognition",
    "text",
    "based",
    "applications",
    "time",
    "series",
    "analysis",
    "forecasting",
    "various",
    "applications",
    "involving",
    "video",
    "detection",
    "favorite",
    "thing",
    "tensorflow",
    "already",
    "popular",
    "among",
    "machine",
    "learning",
    "community",
    "open",
    "trying",
    "us",
    "already",
    "using",
    "let",
    "look",
    "example",
    "tensorflow",
    "model",
    "example",
    "dive",
    "deep",
    "explanation",
    "model",
    "beyond",
    "scope",
    "video",
    "using",
    "amnest",
    "dataset",
    "consists",
    "images",
    "handwritten",
    "digits",
    "handwritten",
    "digits",
    "easily",
    "recognized",
    "building",
    "simple",
    "tensorflow",
    "model",
    "let",
    "see",
    "visualize",
    "data",
    "using",
    "matplotlib",
    "library",
    "inputs",
    "look",
    "something",
    "like",
    "create",
    "tensorflow",
    "model",
    "create",
    "basic",
    "tensorflow",
    "model",
    "need",
    "initialize",
    "variables",
    "start",
    "session",
    "training",
    "model",
    "validate",
    "data",
    "predict",
    "accuracy",
    "model",
    "predicted",
    "92",
    "percent",
    "accuracy",
    "let",
    "see",
    "pretty",
    "well",
    "model",
    "tensorflow",
    "need",
    "understand",
    "tutorial",
    "detail",
    "go",
    "ahead",
    "watch",
    "deep",
    "learning",
    "tutorial",
    "simply",
    "learn",
    "shown",
    "right",
    "corner",
    "interesting",
    "right",
    "let",
    "move",
    "next",
    "library",
    "let",
    "talk",
    "common",
    "yet",
    "powerful",
    "python",
    "library",
    "called",
    "numpy",
    "numpy",
    "fundamental",
    "package",
    "numerical",
    "computation",
    "python",
    "stands",
    "numerical",
    "python",
    "name",
    "suggests",
    "around",
    "18",
    "000",
    "comments",
    "github",
    "active",
    "community",
    "700",
    "contributors",
    "general",
    "purpose",
    "array",
    "processing",
    "package",
    "way",
    "provides",
    "high",
    "performance",
    "objects",
    "called",
    "arrays",
    "tools",
    "working",
    "also",
    "numpy",
    "addresses",
    "slowness",
    "problem",
    "partly",
    "providing",
    "arrays",
    "talked",
    "functions",
    "operators",
    "operate",
    "efficiently",
    "arrays",
    "interesting",
    "right",
    "let",
    "talk",
    "features",
    "number",
    "easy",
    "work",
    "large",
    "arrays",
    "mattresses",
    "using",
    "numpy",
    "numpy",
    "fully",
    "supports",
    "object",
    "oriented",
    "approach",
    "example",
    "coming",
    "back",
    "nd",
    "array",
    "class",
    "possessing",
    "numerous",
    "methods",
    "attributes",
    "ndra",
    "provides",
    "larger",
    "repeated",
    "computations",
    "numpy",
    "offers",
    "vectorization",
    "faster",
    "compact",
    "traditional",
    "methods",
    "always",
    "wanted",
    "get",
    "rid",
    "loops",
    "vectorization",
    "numpy",
    "clearly",
    "helps",
    "let",
    "talk",
    "applications",
    "numpy",
    "numpy",
    "along",
    "pandas",
    "extensively",
    "used",
    "data",
    "analysis",
    "forms",
    "basis",
    "data",
    "science",
    "helps",
    "creating",
    "powerful",
    "array",
    "whenever",
    "talk",
    "numpy",
    "mention",
    "array",
    "without",
    "mention",
    "powerful",
    "array",
    "also",
    "number",
    "extensively",
    "used",
    "machine",
    "learning",
    "creating",
    "machine",
    "learning",
    "models",
    "forms",
    "base",
    "libraries",
    "like",
    "etc",
    "start",
    "creating",
    "machine",
    "learning",
    "models",
    "data",
    "science",
    "realize",
    "models",
    "bases",
    "numpy",
    "pandas",
    "also",
    "number",
    "used",
    "scipy",
    "matplotlib",
    "used",
    "replacement",
    "matlab",
    "let",
    "look",
    "simple",
    "example",
    "array",
    "numpy",
    "see",
    "multiple",
    "array",
    "manipulation",
    "routines",
    "like",
    "basic",
    "examples",
    "copy",
    "values",
    "one",
    "array",
    "another",
    "give",
    "new",
    "shape",
    "array",
    "maybe",
    "one",
    "dimensional",
    "make",
    "two",
    "dimensional",
    "array",
    "return",
    "copy",
    "array",
    "collapsed",
    "one",
    "dimension",
    "let",
    "look",
    "example",
    "notebook",
    "create",
    "basic",
    "array",
    "detailed",
    "explanation",
    "watch",
    "videos",
    "targets",
    "explanations",
    "libraries",
    "first",
    "whenever",
    "using",
    "library",
    "python",
    "import",
    "np",
    "alias",
    "using",
    "let",
    "create",
    "simple",
    "array",
    "let",
    "look",
    "type",
    "array",
    "nd",
    "array",
    "type",
    "array",
    "also",
    "let",
    "look",
    "shape",
    "array",
    "shape",
    "array",
    "saw",
    "expand",
    "shape",
    "array",
    "change",
    "shape",
    "array",
    "using",
    "functions",
    "let",
    "create",
    "another",
    "using",
    "arrange",
    "functions",
    "give",
    "arrange",
    "12",
    "give",
    "1d",
    "array",
    "12",
    "numbers",
    "like",
    "reshape",
    "array",
    "3",
    "comma",
    "4",
    "write",
    "range",
    "function",
    "reshape",
    "function",
    "works",
    "numpy",
    "let",
    "discuss",
    "next",
    "library",
    "scipy",
    "another",
    "free",
    "open",
    "source",
    "python",
    "library",
    "extensively",
    "used",
    "data",
    "science",
    "high",
    "level",
    "computations",
    "library",
    "name",
    "suggests",
    "stands",
    "scientific",
    "python",
    "around",
    "19",
    "000",
    "comments",
    "github",
    "active",
    "community",
    "600",
    "contributors",
    "extensively",
    "used",
    "scientific",
    "technical",
    "computations",
    "also",
    "extends",
    "numpy",
    "provides",
    "many",
    "user",
    "friendly",
    "efficient",
    "routines",
    "scientific",
    "calculations",
    "let",
    "discuss",
    "features",
    "scipy",
    "scipy",
    "collection",
    "algorithms",
    "functions",
    "built",
    "numpy",
    "extension",
    "python",
    "secondly",
    "various",
    "high",
    "level",
    "commands",
    "data",
    "manipulation",
    "visualization",
    "also",
    "ndmh",
    "function",
    "scipy",
    "useful",
    "image",
    "processing",
    "includes",
    "functions",
    "solving",
    "differential",
    "equations",
    "linear",
    "algebra",
    "many",
    "features",
    "let",
    "discuss",
    "applications",
    "cyber",
    "used",
    "image",
    "operations",
    "functions",
    "read",
    "images",
    "disk",
    "number",
    "arrays",
    "write",
    "arrays",
    "discuss",
    "images",
    "resize",
    "images",
    "etc",
    "solving",
    "differential",
    "equations",
    "fourier",
    "transforms",
    "optimization",
    "algorithms",
    "linear",
    "algebra",
    "etc",
    "let",
    "look",
    "simple",
    "example",
    "learn",
    "kind",
    "functions",
    "sci",
    "importing",
    "constants",
    "package",
    "scipy",
    "library",
    "package",
    "constants",
    "mentioning",
    "c",
    "edge",
    "library",
    "already",
    "knows",
    "fetch",
    "like",
    "speed",
    "light",
    "planck",
    "constant",
    "etc",
    "used",
    "calculations",
    "data",
    "analysis",
    "integral",
    "part",
    "data",
    "science",
    "data",
    "scientists",
    "spend",
    "day",
    "data",
    "munching",
    "cleaning",
    "data",
    "also",
    "hence",
    "mention",
    "pandas",
    "must",
    "data",
    "science",
    "life",
    "cycle",
    "yes",
    "pandas",
    "popular",
    "widely",
    "used",
    "python",
    "library",
    "data",
    "science",
    "along",
    "numpy",
    "matplotlib",
    "name",
    "stands",
    "python",
    "data",
    "analysis",
    "around",
    "17",
    "000",
    "comments",
    "github",
    "active",
    "community",
    "1200",
    "contributors",
    "heavily",
    "used",
    "data",
    "analysis",
    "cleaning",
    "provides",
    "fast",
    "flexible",
    "data",
    "structures",
    "like",
    "data",
    "frames",
    "series",
    "designed",
    "work",
    "structured",
    "data",
    "easily",
    "intuitively",
    "let",
    "talk",
    "features",
    "pandas",
    "panas",
    "offers",
    "eloquent",
    "syntax",
    "rich",
    "functionalities",
    "like",
    "various",
    "methods",
    "pandas",
    "like",
    "drop",
    "n",
    "phil",
    "na",
    "gives",
    "freedom",
    "deal",
    "missing",
    "data",
    "also",
    "partners",
    "provides",
    "powerful",
    "apply",
    "function",
    "lets",
    "create",
    "function",
    "run",
    "across",
    "series",
    "data",
    "forget",
    "writing",
    "loops",
    "using",
    "pandas",
    "also",
    "library",
    "high",
    "level",
    "abstraction",
    "low",
    "level",
    "numpy",
    "written",
    "pure",
    "c",
    "also",
    "contains",
    "high",
    "level",
    "data",
    "structures",
    "manipulation",
    "tools",
    "makes",
    "easy",
    "work",
    "pandas",
    "like",
    "data",
    "structures",
    "series",
    "let",
    "discuss",
    "applications",
    "pandas",
    "panas",
    "extensively",
    "used",
    "general",
    "data",
    "wrangling",
    "data",
    "cleaning",
    "pandas",
    "also",
    "finds",
    "usage",
    "edl",
    "jobs",
    "data",
    "transformation",
    "data",
    "storage",
    "excellent",
    "support",
    "loading",
    "csv",
    "files",
    "data",
    "frame",
    "format",
    "pandas",
    "used",
    "variety",
    "academic",
    "commercial",
    "domains",
    "including",
    "statistics",
    "finance",
    "neuroscience",
    "economics",
    "web",
    "analytics",
    "etc",
    "pandas",
    "also",
    "useful",
    "time",
    "series",
    "specific",
    "functionality",
    "like",
    "date",
    "range",
    "generation",
    "moving",
    "window",
    "linear",
    "regression",
    "date",
    "shifting",
    "etc",
    "let",
    "look",
    "simple",
    "example",
    "create",
    "data",
    "frame",
    "data",
    "frame",
    "useful",
    "data",
    "structure",
    "pandas",
    "powerful",
    "functionalities",
    "enlisting",
    "important",
    "libraries",
    "data",
    "science",
    "explore",
    "videos",
    "learn",
    "libraries",
    "detail",
    "let",
    "go",
    "ahead",
    "create",
    "data",
    "frame",
    "using",
    "jupyter",
    "notebook",
    "using",
    "pandas",
    "importing",
    "pandas",
    "library",
    "let",
    "go",
    "run",
    "data",
    "frame",
    "import",
    "file",
    "csv",
    "file",
    "excel",
    "file",
    "many",
    "functions",
    "things",
    "also",
    "create",
    "data",
    "put",
    "data",
    "frame",
    "taking",
    "random",
    "data",
    "putting",
    "data",
    "frame",
    "also",
    "creating",
    "index",
    "also",
    "giving",
    "column",
    "names",
    "pd",
    "alias",
    "given",
    "pandas",
    "random",
    "data",
    "6x4",
    "index",
    "taking",
    "range",
    "six",
    "numbers",
    "column",
    "name",
    "giving",
    "abcd",
    "let",
    "go",
    "ahead",
    "look",
    "created",
    "data",
    "frame",
    "column",
    "names",
    "abcd",
    "list",
    "six",
    "numbers",
    "zero",
    "five",
    "random",
    "data",
    "six",
    "four",
    "dataframe",
    "another",
    "table",
    "rows",
    "columns",
    "various",
    "functions",
    "also",
    "go",
    "ahead",
    "describe",
    "data",
    "frame",
    "see",
    "giving",
    "functionalities",
    "count",
    "mean",
    "standard",
    "deviation",
    "etc",
    "okay",
    "pandas",
    "let",
    "talk",
    "next",
    "library",
    "last",
    "one",
    "matplotlib",
    "fun",
    "library",
    "powerful",
    "yet",
    "beautiful",
    "visualizations",
    "see",
    "coming",
    "slides",
    "plot",
    "matplotlib",
    "suggests",
    "plotting",
    "library",
    "python",
    "around",
    "26",
    "000",
    "comments",
    "github",
    "vibrant",
    "community",
    "700",
    "contributors",
    "graphs",
    "plots",
    "produces",
    "majorly",
    "used",
    "data",
    "visualization",
    "also",
    "provides",
    "object",
    "oriented",
    "api",
    "used",
    "embed",
    "plots",
    "applications",
    "let",
    "talk",
    "features",
    "matplotlib",
    "pi",
    "plot",
    "module",
    "matplotlib",
    "provides",
    "interface",
    "matplotlib",
    "designed",
    "usable",
    "matlab",
    "advantage",
    "free",
    "open",
    "source",
    "also",
    "supports",
    "dozens",
    "backends",
    "output",
    "types",
    "means",
    "use",
    "regardless",
    "operating",
    "system",
    "using",
    "output",
    "format",
    "wish",
    "pandas",
    "used",
    "wrappers",
    "around",
    "matplotlibs",
    "api",
    "drive",
    "matplotlib",
    "via",
    "cleaner",
    "modern",
    "apis",
    "also",
    "start",
    "using",
    "library",
    "realize",
    "little",
    "memory",
    "consumption",
    "good",
    "runtime",
    "behavior",
    "let",
    "talk",
    "applications",
    "matplotlib",
    "important",
    "discover",
    "unknown",
    "relationship",
    "variables",
    "data",
    "set",
    "library",
    "helps",
    "visualize",
    "correlation",
    "analysis",
    "variables",
    "also",
    "machine",
    "learning",
    "visualize",
    "95",
    "percent",
    "confidence",
    "interval",
    "model",
    "communicate",
    "well",
    "model",
    "fits",
    "data",
    "mat",
    "modular",
    "finds",
    "application",
    "outlier",
    "detection",
    "using",
    "scatter",
    "plot",
    "etc",
    "visualize",
    "distribution",
    "data",
    "gain",
    "instant",
    "insights",
    "let",
    "make",
    "simple",
    "plot",
    "get",
    "basic",
    "idea",
    "already",
    "imported",
    "libraries",
    "function",
    "matplotlib",
    "inline",
    "help",
    "show",
    "plots",
    "jupiter",
    "notebook",
    "also",
    "called",
    "magic",
    "function",
    "wo",
    "able",
    "display",
    "plots",
    "jupiter",
    "notebook",
    "use",
    "function",
    "using",
    "function",
    "numpy",
    "fix",
    "random",
    "state",
    "reproducibility",
    "take",
    "n",
    "30",
    "assign",
    "random",
    "values",
    "variables",
    "function",
    "generating",
    "30",
    "random",
    "numbers",
    "trying",
    "create",
    "scatter",
    "plot",
    "want",
    "decide",
    "area",
    "let",
    "put",
    "multiplying",
    "30",
    "random",
    "numbers",
    "power",
    "2",
    "get",
    "area",
    "plot",
    "see",
    "minute",
    "using",
    "scatter",
    "function",
    "alias",
    "matplotlib",
    "plt",
    "created",
    "use",
    "small",
    "circles",
    "scatter",
    "plot",
    "colorful",
    "nice",
    "one",
    "easy",
    "plot",
    "suggest",
    "explore",
    "matplotlib",
    "sure",
    "enjoy",
    "let",
    "create",
    "histogram",
    "using",
    "style",
    "gg",
    "plot",
    "assigning",
    "values",
    "variables",
    "random",
    "values",
    "assigning",
    "bars",
    "colors",
    "alignment",
    "plot",
    "get",
    "graph",
    "create",
    "different",
    "type",
    "visualizations",
    "plots",
    "work",
    "upon",
    "using",
    "matplotlib",
    "simple",
    "leading",
    "python",
    "libraries",
    "field",
    "data",
    "science",
    "along",
    "libraries",
    "data",
    "scientists",
    "also",
    "leveraging",
    "power",
    "useful",
    "libraries",
    "example",
    "like",
    "tensorflow",
    "keras",
    "another",
    "popular",
    "library",
    "extensively",
    "used",
    "deep",
    "learning",
    "neural",
    "network",
    "modules",
    "keras",
    "drafts",
    "tensorflow",
    "theano",
    "good",
    "option",
    "want",
    "dive",
    "details",
    "tensorflow",
    "machine",
    "learning",
    "library",
    "provides",
    "almost",
    "machine",
    "learning",
    "algorithms",
    "need",
    "designed",
    "interpolate",
    "numpy",
    "c",
    "bond",
    "another",
    "library",
    "data",
    "visualization",
    "say",
    "seaborne",
    "enhancement",
    "matplotlib",
    "introduces",
    "additional",
    "plot",
    "types",
    "top",
    "python",
    "libraries",
    "data",
    "science",
    "according",
    "still",
    "may",
    "cover",
    "great",
    "useful",
    "libraries",
    "deserve",
    "looked",
    "share",
    "favorites",
    "comment",
    "section",
    "well",
    "interesting",
    "things",
    "libraries",
    "mentioned",
    "site",
    "thank",
    "keep",
    "learning",
    "hi",
    "like",
    "video",
    "subscribe",
    "simply",
    "learn",
    "youtube",
    "channel",
    "click",
    "watch",
    "similar",
    "videos",
    "nerd",
    "get",
    "certified",
    "click"
  ],
  "keywords": [
    "python",
    "used",
    "solving",
    "data",
    "science",
    "scientists",
    "already",
    "power",
    "simply",
    "learn",
    "well",
    "libraries",
    "let",
    "talk",
    "library",
    "tensorflow",
    "also",
    "one",
    "high",
    "performance",
    "numerical",
    "computations",
    "around",
    "000",
    "github",
    "comments",
    "community",
    "contributors",
    "various",
    "scientific",
    "run",
    "features",
    "deep",
    "learning",
    "models",
    "neural",
    "like",
    "visualizations",
    "machine",
    "multiple",
    "called",
    "look",
    "applications",
    "extensively",
    "image",
    "series",
    "analysis",
    "video",
    "popular",
    "open",
    "using",
    "example",
    "model",
    "images",
    "simple",
    "see",
    "visualize",
    "matplotlib",
    "create",
    "basic",
    "need",
    "variables",
    "start",
    "go",
    "ahead",
    "watch",
    "right",
    "interesting",
    "next",
    "powerful",
    "numpy",
    "package",
    "stands",
    "name",
    "suggests",
    "active",
    "array",
    "provides",
    "arrays",
    "functions",
    "number",
    "easy",
    "work",
    "methods",
    "get",
    "helps",
    "along",
    "pandas",
    "creating",
    "mention",
    "etc",
    "scipy",
    "manipulation",
    "values",
    "another",
    "give",
    "shape",
    "notebook",
    "videos",
    "alias",
    "type",
    "numbers",
    "range",
    "function",
    "discuss",
    "level",
    "many",
    "algorithms",
    "visualization",
    "useful",
    "linear",
    "c",
    "cleaning",
    "structures",
    "designed",
    "functionalities",
    "frame",
    "file",
    "random",
    "giving",
    "column",
    "six",
    "plot",
    "plots",
    "use",
    "scatter",
    "30"
  ]
}