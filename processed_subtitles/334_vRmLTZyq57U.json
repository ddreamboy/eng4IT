{
  "text": "in this video i want to show you how you\ncan create your javascript library using\ntypescript then transpile it first of\nall the common js then to ecmascript 6\nmodules and publish on npm\n[Music]\nso what is the problem in creating\nlibrary actually publishing a folder\nwith some scripts on npm is super easy\nbut the main problem is that we have two\nmodule systems inside javascript we have\ncommon js and we have ecmascript 6\nmodules and some projects might want to\nuse your library inside node.js and in\nsome projects maybe your library will be\nused on the client inside browser which\nactually means the main problem is that\nwe must transpile our libraries into\ndifferent versions and maybe later in\neven three or four if it will be needed\nit is all possible for this task we\ncould use babel because it is really\nnice to transpile from babel in any\npossible modular system but i will use\nhere typescript why typescript first of\nall because nowadays we're creating more\nand more projects by using typescript\nand secondly inside configuration of\ntypescript we can simply provide in what\nmodular system we want to transpile our\ntypescript code this is why here as you\ncan see i am inside empty folder and i\nwant to create a new directory so here\nlet's name it jslib and it will be our\nnew javascript library now here let's\nopen it and as you can see i don't have\nany folders at all so what i want to do\nhere is open an editor and here create a\nnew folder which is called source this\nis where all our code will be written\nand let's say that we want to create\nsome library with helpers for any\nproject let's say we want to implement\njust a single helper here for arrays\nwhich is called plug and the main idea\nof this method will be to map our array\nby specific field this is by here inside\nsource first of all i want to create\nindex.ts but here we won't store\nanything now here i want to create new\nfolder array and inside i want to create\nblog.ts so the main idea is we have a\nnice structure inside source we can\ncreate different folders like array\nobject string number and so on and here\nwe're talking about array and we're\nimplementing a new method plug inside it\nfor this here we can export our new\nmethod which is called plug and here as\nin arguments we're getting first of all\nelements and secondly field and actually\nin this example i won't type anything\nwith typescript just because the purpose\nof this video is different but obviously\nin a real scenario when i'm creating a\nlibrary with typescript it will be typed\nfully so here we are getting our\nelements which is an array and the field\nthat we want to get now here we can\nsimply return our elements.map we're\ngetting access to every single element\nand here we're just taking element field\nwhich actually means if we are getting\narray of users like this so we have our\narray with user and inside we have field\nfor example name full and then we use\nour plug here so actually it will be\nplug inside by passing our elements and\nthe next parameter will be name so this\nis the field that we want to map in this\ncase what we will get back is array of\nnames which actually means here will be\njust full so this is how our function is\nworking and let's say that we\nimplemented the first step of our\nlibrary and now we want to prepare it\nfor publishing now we want to leverage\nour index ts because actually this is\nour source of truth this is where we\nexport everything which can be used\noutside of our library so here we can\nwrite export here we're getting our plug\nfrom array slash block this is really\nnice because in this case everything is\nprivate and only things which we're\nexpecting here will be available for us\nnow inside our root folder i want to\ncreate\ntsconfig.json and actually for\ntypescript we must provide a\nconfiguration how we need to transpile\nour files from typescript to javascript\nfor example we can transpile it by using\ndifferent modular system we can also\ntranspile it in different version of\njavascript this is the config that i\nwant to paste inside ts config and\nactually here we have just two things\nfirst of all compiler options this is\nthe configuration of typescript and\nsecondly what files we must include and\nhere we simply say include everything\nfrom source and inside compiler options\nthe most interesting options for us are\nmodule ecmascript 6 which actually means\nwe want to transpile our code using\necmascript 6 modules and secondly out\ndirectory and here we are providing dist\nslash lib slash ecmascript 6 which\nactually means inside this folder our\nlibrary which will be generated for\npublishing will be generated inside\nlibrary folder and then inside we will\ncreate two different folders ecmascript\n6 and ecmascript 5. ecmascript 5 will be\nused with common jazz and this is what\nwe need to do now here near ts\nconfig.json i want to create one more\nfile dsconfig.es5.json\nand here inside we want to generate\nexactly the same config but for common\njazz here what we're pasting exactly the\nsame include but here module is common\njs which actually means in this way\nwe're using it inside node.js and here\nour our directory will be this\nlibslash ecmascript 5. now here inside\nour root folder i already prepared\npackage.json why is that because here we\nmust provide some links as you can see i\nhave a link to repository also licensing\nscripts why i did that because actually\nwe will publish our library and we will\npublish this whole library inside github\nwhich actually means we must provide\nsome information for people who will\ndownload our repository or use our\nlibrary and actually here i don't have\nanything and we're just interested in\nscripts so what we want to create here\nis a new script which will be called\ncompile and this script will prepare for\nus two builds once for common gs ones\nfor ecmascript 6 modules so first of all\ni want to remove our dist slash lib\nbecause actually it might be that we\ngenerated something there previously and\nwe must be sure that it will work this\nis why we completely remove this lib now\nand and here is tsc what is tc it is a\ncommand to run typescript and by default\ntypescript will use this ts config.json\nwhich actually means the config for our\necmascript 6 modules so this command\nwill transpile our sources to ecmascript\n6 modules but after this we must call\nthis command again so here is and tsc\nand here we want to provide a build and\nafter this we are providing config files\nso here will be ts config dot ecmascript\n5 dot json which actually means this\npart will generate for us our ecmascript\n6 module and this part will generate for\nus our common js modules and the last\nthing that we must do is install\ntypescript here this is why inside\nconsole we can simply write npm install\ntype script and we want to install it as\na dev dependency this is by minus d as\nyou can see now in package.json we have\ntypescript this is why this command tsc\nwill be available for us inside our\npackage.json now let's try to use this\ncommand so npm run and here will be\ncompile as you can see it took some time\nbut now it is ready let's check what is\nhappening first of all here we have now\na dist folder and inside we have a lib\nfolder with two additional folders\necmascript 6 and decma script 5. inside\necmascript 6 we have here index.js file\nwhich is just export plug which actually\nmeans it didn't change anything and here\ninside array we have our plug js which\nactually means it was successfully\ntranspiled but now if we will jump\ninside ecmascript 5 this is for command\njs here inside index.js you can see this\ndeclaration and the most important part\nfor us is that we can see here require\nword require will work inside common\nchest which actually means this module\nis prepared successfully and here inside\narray we can see our transpiled code so\nwe don't have typescript anymore we have\na plain javascript but it is not all we\nalso must create a package.json for our\nlibrary this is why inside of this\nfolder i want to create package json why\nis that because actually this\npackage.json here on the outside this is\nfor our github repository and what we\nwill publish inside npm is this\npackage.json here so we will publish a\npackage from this folder and it will\nhave this slip inside and now inside\nthis package json i want to paste a lot\nof stuff so here first of all is name\nand this is extremely important because\nthis is our name for npm and as you can\nsee here i have this nice prefix at mla\nwhy i am doing it like this because\nactually all names inside npm registry\nmust be unique for example here i can't\nwrite utils because actually this\nlibrary already exists and we can't use\nthis name this is why the common\npractice is to prefix everything with\nadd and some name and for example you\ncan see it really often with angular you\nhave here like add angular slash core\nfor example this is why here we prefixed\nthe name with add mla now slash and here\nis the name of our repository here is\nour version description main and module\nand these two lines are extremely\nimportant for us because actually when\nsomebody will install our library as a\nnode module then he will have these two\nlines inside main and module and\nactually main is used by command.js\nwhich actually means at the moment when\nhe is writing require mla utils here\nwe'll use this line and load this script\nwhich is here inside lib ecmascript 5\nindex.js and here we have required this\nis totally fine but if he is using a\nmodular system then this line will work\nand here we have lib ecmascript 6 slash\nindex.js here we have normal imports and\nexports after this here i have a\nstandard stuff like repository files\nkeywords author license box url and\nhomepage url and all this stuff you can\nsee here on the right in any package\ninside npm our next step here will be to\ncreate a git repository and push the\nwhole repository inside git but actually\nwhat i want to do first i want to create\na gitigno file and we want to ignore\nhere at least node modules but also this\nbut not the whole test but only this\nsleep because we don't really want to\nignore this test package json this is\nwhat we need to be pushed because we\nwill use it every single time when we\nwant to publish a package now i will\njump inside console and right here git\nstatus as you can see i'm getting a\nmessage that this is not a git\nrepository this is why i will open here\nmy github and create here a new\nrepository for example let's name it\nutils and we don't need to provide\nanything this is simply public i will\nhit here create repository and we are\ngetting this information so this is what\nwe need to do if we have a new\nrepository and this is what we need to\ndo to push to existing we already have a\nrepository this is why i will simply\nwrite here gta need it will generate a\nnew repository with master branch and\nafter this we can write this line with\ngit remote origin and here is the\ncorrect path after this we can check our\nchanges as you can see here we have git\nignore this package lock package.json\nand everything is fine so i will simply\nadd all these files and commit so here i\nget commit minus am and here is created\nleap now we can push to our repository\nso here i am writing git push origin\nmaster and i'm hitting enter and as you\ncan see my branch was successfully\npushed now i can reload this page and\ni'm getting here our files inside github\nwhat is also important we didn't push\nour node modules and inside this we\nsimply have this package.json this is\nexactly what we wanted our last step\nwill be to publish a library to npm this\nis why inside console we can simply jump\ninside this because we are interested in\nthis package.json and this library and\nhere we can write now npm publish and we\nwill for sure get an error because we\nare not authorized as you can see here\nwe are getting a message need house\nthese commands require you to be\nauthorized and we can write here npm add\nuser to be authorized this is why here i\nwill simply paste this command and here\nwe are getting first of all username as\nyou can see here you must provide your\nusername password your email and then\nyou will get an email from npmgs.org\nwhere you must also get this number and\npaste it inside as a one-time password\nafter this you are logged in and you can\npublish your package this is way here\nlet's try again we're writing npm\npublish and we're hitting enter but as\nyou can see it still doesn't work\nbecause we're getting a message payment\nrequired you must sign up for private\npackages but we don't want the private\npackage this is why here we can write\nnpm publish minus minor success equals\npublic in this case we will publish our\npackage as a public package which is\ntotally fine you might get here an error\n403 forbidden and typically it happens\nif the name that you used inside your\npackage.json already exists and actually\nhere before i wrote at mla slash\nutilities and it was already taken this\nis why here i changed the name and after\nthis published again and as you can see\nnow i don't have any errors and here we\nare getting a message that it was\nsuccessfully published and now we can\ncopy paste this name and just put it\ninside searching packages i'm hitting\nhere enter and as you can see this is\nour package that was just published here\nwe don't have a readme but the links\nhere on the right are totally correct we\ncan hit here repository and we're\njumping inside github but now the moment\nof truth is to install this package and\ntry to use it this is by here i can\nwrite npm install and this is our\npackage monster lessons academy\nutilities it is successfully installed\nand we can see it inside known modules\nmonster lessons academy utilities and\nthe main point is that here first of all\nwe want to check it with commonjs this\nis why here i want to create new file\nserver.js and then inside i want to\nrequire this package so here i want to\nget a plug method and here is our\nrequire from our node modules and here\nis add monster lessons academy slash\nutilities now let's just try to use it\nso here we will write console log and we\nwant to call plug on our array of users\nand for example here we have a user with\nname full and the next one will be a\nuser with name bar and the second\nargument after our array will be a name\nnow let's try to start our server so\nhere i simply write node server.js and\nwe're getting our output which actually\nmeans our package successfully works for\ncommonjs and here in every project we\ncan simply require it and it will work\ninside nounches but we didn't test our\nfrontend part this is why what i want to\ndo i want to jump in console and write\nhere npm install parcel\nand this package is successfully\ninstalled if you don't know what is\nparcel this is a zero configuration\nbundler similar to webpack which\nactually means it will prepare our build\nfor the client so what we want to do now\nhere we want to create new file and name\nit client.js now here inside i pasted\nexactly the same code like we had inside\nserver.js but with usage of imports and\nas you can see this is exactly the same\npackage and here inside console.log we\nhave exactly the same plug but client.js\nis not enough we also need index.html\nand here is just a simple index.html\nwhere inside body we just have the\nscript client chest that we just created\nmost importantly we have here type\nmodule because we must tell parcel that\nwe want to load the module and it will\nbundle it correctly now we can jump\ninside our package.json and here inside\nscripts we can create new script for\nexample parcel and here we just call our\nparcel with\nindex.html and it will do everything\ncorrectly for us so here i will simply\nwrite npm run parcel and as you can see\nit will compile everything correctly and\nafter this start our web server for\nindex.html as you can see it is\nsuccessfully built we can open this page\nlocalhost1234 and here inside console we\nsee our array which actually means our\nlibrary is working simultaneously on the\nclient and on the server and if you are\ninterested to learn how to upload files\nto your website make sure to check this\nvideo also\nyou\n",
  "words": [
    "video",
    "want",
    "show",
    "create",
    "javascript",
    "library",
    "using",
    "typescript",
    "transpile",
    "first",
    "common",
    "js",
    "ecmascript",
    "6",
    "modules",
    "publish",
    "npm",
    "music",
    "problem",
    "creating",
    "library",
    "actually",
    "publishing",
    "folder",
    "scripts",
    "npm",
    "super",
    "easy",
    "main",
    "problem",
    "two",
    "module",
    "systems",
    "inside",
    "javascript",
    "common",
    "js",
    "ecmascript",
    "6",
    "modules",
    "projects",
    "might",
    "want",
    "use",
    "library",
    "inside",
    "projects",
    "maybe",
    "library",
    "used",
    "client",
    "inside",
    "browser",
    "actually",
    "means",
    "main",
    "problem",
    "must",
    "transpile",
    "libraries",
    "different",
    "versions",
    "maybe",
    "later",
    "even",
    "three",
    "four",
    "needed",
    "possible",
    "task",
    "could",
    "use",
    "babel",
    "really",
    "nice",
    "transpile",
    "babel",
    "possible",
    "modular",
    "system",
    "use",
    "typescript",
    "typescript",
    "first",
    "nowadays",
    "creating",
    "projects",
    "using",
    "typescript",
    "secondly",
    "inside",
    "configuration",
    "typescript",
    "simply",
    "provide",
    "modular",
    "system",
    "want",
    "transpile",
    "typescript",
    "code",
    "see",
    "inside",
    "empty",
    "folder",
    "want",
    "create",
    "new",
    "directory",
    "let",
    "name",
    "jslib",
    "new",
    "javascript",
    "library",
    "let",
    "open",
    "see",
    "folders",
    "want",
    "open",
    "editor",
    "create",
    "new",
    "folder",
    "called",
    "source",
    "code",
    "written",
    "let",
    "say",
    "want",
    "create",
    "library",
    "helpers",
    "project",
    "let",
    "say",
    "want",
    "implement",
    "single",
    "helper",
    "arrays",
    "called",
    "plug",
    "main",
    "idea",
    "method",
    "map",
    "array",
    "specific",
    "field",
    "inside",
    "source",
    "first",
    "want",
    "create",
    "wo",
    "store",
    "anything",
    "want",
    "create",
    "new",
    "folder",
    "array",
    "inside",
    "want",
    "create",
    "main",
    "idea",
    "nice",
    "structure",
    "inside",
    "source",
    "create",
    "different",
    "folders",
    "like",
    "array",
    "object",
    "string",
    "number",
    "talking",
    "array",
    "implementing",
    "new",
    "method",
    "plug",
    "inside",
    "export",
    "new",
    "method",
    "called",
    "plug",
    "arguments",
    "getting",
    "first",
    "elements",
    "secondly",
    "field",
    "actually",
    "example",
    "wo",
    "type",
    "anything",
    "typescript",
    "purpose",
    "video",
    "different",
    "obviously",
    "real",
    "scenario",
    "creating",
    "library",
    "typescript",
    "typed",
    "fully",
    "getting",
    "elements",
    "array",
    "field",
    "want",
    "get",
    "simply",
    "return",
    "getting",
    "access",
    "every",
    "single",
    "element",
    "taking",
    "element",
    "field",
    "actually",
    "means",
    "getting",
    "array",
    "users",
    "like",
    "array",
    "user",
    "inside",
    "field",
    "example",
    "name",
    "full",
    "use",
    "plug",
    "actually",
    "plug",
    "inside",
    "passing",
    "elements",
    "next",
    "parameter",
    "name",
    "field",
    "want",
    "map",
    "case",
    "get",
    "back",
    "array",
    "names",
    "actually",
    "means",
    "full",
    "function",
    "working",
    "let",
    "say",
    "implemented",
    "first",
    "step",
    "library",
    "want",
    "prepare",
    "publishing",
    "want",
    "leverage",
    "index",
    "ts",
    "actually",
    "source",
    "truth",
    "export",
    "everything",
    "used",
    "outside",
    "library",
    "write",
    "export",
    "getting",
    "plug",
    "array",
    "slash",
    "block",
    "really",
    "nice",
    "case",
    "everything",
    "private",
    "things",
    "expecting",
    "available",
    "us",
    "inside",
    "root",
    "folder",
    "want",
    "create",
    "actually",
    "typescript",
    "must",
    "provide",
    "configuration",
    "need",
    "transpile",
    "files",
    "typescript",
    "javascript",
    "example",
    "transpile",
    "using",
    "different",
    "modular",
    "system",
    "also",
    "transpile",
    "different",
    "version",
    "javascript",
    "config",
    "want",
    "paste",
    "inside",
    "ts",
    "config",
    "actually",
    "two",
    "things",
    "first",
    "compiler",
    "options",
    "configuration",
    "typescript",
    "secondly",
    "files",
    "must",
    "include",
    "simply",
    "say",
    "include",
    "everything",
    "source",
    "inside",
    "compiler",
    "options",
    "interesting",
    "options",
    "us",
    "module",
    "ecmascript",
    "6",
    "actually",
    "means",
    "want",
    "transpile",
    "code",
    "using",
    "ecmascript",
    "6",
    "modules",
    "secondly",
    "directory",
    "providing",
    "dist",
    "slash",
    "lib",
    "slash",
    "ecmascript",
    "6",
    "actually",
    "means",
    "inside",
    "folder",
    "library",
    "generated",
    "publishing",
    "generated",
    "inside",
    "library",
    "folder",
    "inside",
    "create",
    "two",
    "different",
    "folders",
    "ecmascript",
    "6",
    "ecmascript",
    "ecmascript",
    "5",
    "used",
    "common",
    "jazz",
    "need",
    "near",
    "ts",
    "want",
    "create",
    "one",
    "file",
    "inside",
    "want",
    "generate",
    "exactly",
    "config",
    "common",
    "jazz",
    "pasting",
    "exactly",
    "include",
    "module",
    "common",
    "js",
    "actually",
    "means",
    "way",
    "using",
    "inside",
    "directory",
    "libslash",
    "ecmascript",
    "inside",
    "root",
    "folder",
    "already",
    "prepared",
    "must",
    "provide",
    "links",
    "see",
    "link",
    "repository",
    "also",
    "licensing",
    "scripts",
    "actually",
    "publish",
    "library",
    "publish",
    "whole",
    "library",
    "inside",
    "github",
    "actually",
    "means",
    "must",
    "provide",
    "information",
    "people",
    "download",
    "repository",
    "use",
    "library",
    "actually",
    "anything",
    "interested",
    "scripts",
    "want",
    "create",
    "new",
    "script",
    "called",
    "compile",
    "script",
    "prepare",
    "us",
    "two",
    "builds",
    "common",
    "gs",
    "ones",
    "ecmascript",
    "6",
    "modules",
    "first",
    "want",
    "remove",
    "dist",
    "slash",
    "lib",
    "actually",
    "might",
    "generated",
    "something",
    "previously",
    "must",
    "sure",
    "work",
    "completely",
    "remove",
    "lib",
    "tsc",
    "tc",
    "command",
    "run",
    "typescript",
    "default",
    "typescript",
    "use",
    "ts",
    "actually",
    "means",
    "config",
    "ecmascript",
    "6",
    "modules",
    "command",
    "transpile",
    "sources",
    "ecmascript",
    "6",
    "modules",
    "must",
    "call",
    "command",
    "tsc",
    "want",
    "provide",
    "build",
    "providing",
    "config",
    "files",
    "ts",
    "config",
    "dot",
    "ecmascript",
    "5",
    "dot",
    "json",
    "actually",
    "means",
    "part",
    "generate",
    "us",
    "ecmascript",
    "6",
    "module",
    "part",
    "generate",
    "us",
    "common",
    "js",
    "modules",
    "last",
    "thing",
    "must",
    "install",
    "typescript",
    "inside",
    "console",
    "simply",
    "write",
    "npm",
    "install",
    "type",
    "script",
    "want",
    "install",
    "dev",
    "dependency",
    "minus",
    "see",
    "typescript",
    "command",
    "tsc",
    "available",
    "us",
    "inside",
    "let",
    "try",
    "use",
    "command",
    "npm",
    "run",
    "compile",
    "see",
    "took",
    "time",
    "ready",
    "let",
    "check",
    "happening",
    "first",
    "dist",
    "folder",
    "inside",
    "lib",
    "folder",
    "two",
    "additional",
    "folders",
    "ecmascript",
    "6",
    "decma",
    "script",
    "inside",
    "ecmascript",
    "6",
    "file",
    "export",
    "plug",
    "actually",
    "means",
    "change",
    "anything",
    "inside",
    "array",
    "plug",
    "js",
    "actually",
    "means",
    "successfully",
    "transpiled",
    "jump",
    "inside",
    "ecmascript",
    "5",
    "command",
    "js",
    "inside",
    "see",
    "declaration",
    "important",
    "part",
    "us",
    "see",
    "require",
    "word",
    "require",
    "work",
    "inside",
    "common",
    "chest",
    "actually",
    "means",
    "module",
    "prepared",
    "successfully",
    "inside",
    "array",
    "see",
    "transpiled",
    "code",
    "typescript",
    "anymore",
    "plain",
    "javascript",
    "also",
    "must",
    "create",
    "library",
    "inside",
    "folder",
    "want",
    "create",
    "package",
    "json",
    "actually",
    "outside",
    "github",
    "repository",
    "publish",
    "inside",
    "npm",
    "publish",
    "package",
    "folder",
    "slip",
    "inside",
    "inside",
    "package",
    "json",
    "want",
    "paste",
    "lot",
    "stuff",
    "first",
    "name",
    "extremely",
    "important",
    "name",
    "npm",
    "see",
    "nice",
    "prefix",
    "mla",
    "like",
    "actually",
    "names",
    "inside",
    "npm",
    "registry",
    "must",
    "unique",
    "example",
    "ca",
    "write",
    "utils",
    "actually",
    "library",
    "already",
    "exists",
    "ca",
    "use",
    "name",
    "common",
    "practice",
    "prefix",
    "everything",
    "add",
    "name",
    "example",
    "see",
    "really",
    "often",
    "angular",
    "like",
    "add",
    "angular",
    "slash",
    "core",
    "example",
    "prefixed",
    "name",
    "add",
    "mla",
    "slash",
    "name",
    "repository",
    "version",
    "description",
    "main",
    "module",
    "two",
    "lines",
    "extremely",
    "important",
    "us",
    "actually",
    "somebody",
    "install",
    "library",
    "node",
    "module",
    "two",
    "lines",
    "inside",
    "main",
    "module",
    "actually",
    "main",
    "used",
    "actually",
    "means",
    "moment",
    "writing",
    "require",
    "mla",
    "utils",
    "use",
    "line",
    "load",
    "script",
    "inside",
    "lib",
    "ecmascript",
    "5",
    "required",
    "totally",
    "fine",
    "using",
    "modular",
    "system",
    "line",
    "work",
    "lib",
    "ecmascript",
    "6",
    "slash",
    "normal",
    "imports",
    "exports",
    "standard",
    "stuff",
    "like",
    "repository",
    "files",
    "keywords",
    "author",
    "license",
    "box",
    "url",
    "homepage",
    "url",
    "stuff",
    "see",
    "right",
    "package",
    "inside",
    "npm",
    "next",
    "step",
    "create",
    "git",
    "repository",
    "push",
    "whole",
    "repository",
    "inside",
    "git",
    "actually",
    "want",
    "first",
    "want",
    "create",
    "gitigno",
    "file",
    "want",
    "ignore",
    "least",
    "node",
    "modules",
    "also",
    "whole",
    "test",
    "sleep",
    "really",
    "want",
    "ignore",
    "test",
    "package",
    "json",
    "need",
    "pushed",
    "use",
    "every",
    "single",
    "time",
    "want",
    "publish",
    "package",
    "jump",
    "inside",
    "console",
    "right",
    "git",
    "status",
    "see",
    "getting",
    "message",
    "git",
    "repository",
    "open",
    "github",
    "create",
    "new",
    "repository",
    "example",
    "let",
    "name",
    "utils",
    "need",
    "provide",
    "anything",
    "simply",
    "public",
    "hit",
    "create",
    "repository",
    "getting",
    "information",
    "need",
    "new",
    "repository",
    "need",
    "push",
    "existing",
    "already",
    "repository",
    "simply",
    "write",
    "gta",
    "need",
    "generate",
    "new",
    "repository",
    "master",
    "branch",
    "write",
    "line",
    "git",
    "remote",
    "origin",
    "correct",
    "path",
    "check",
    "changes",
    "see",
    "git",
    "ignore",
    "package",
    "lock",
    "everything",
    "fine",
    "simply",
    "add",
    "files",
    "commit",
    "get",
    "commit",
    "minus",
    "created",
    "leap",
    "push",
    "repository",
    "writing",
    "git",
    "push",
    "origin",
    "master",
    "hitting",
    "enter",
    "see",
    "branch",
    "successfully",
    "pushed",
    "reload",
    "page",
    "getting",
    "files",
    "inside",
    "github",
    "also",
    "important",
    "push",
    "node",
    "modules",
    "inside",
    "simply",
    "exactly",
    "wanted",
    "last",
    "step",
    "publish",
    "library",
    "npm",
    "inside",
    "console",
    "simply",
    "jump",
    "inside",
    "interested",
    "library",
    "write",
    "npm",
    "publish",
    "sure",
    "get",
    "error",
    "authorized",
    "see",
    "getting",
    "message",
    "need",
    "house",
    "commands",
    "require",
    "authorized",
    "write",
    "npm",
    "add",
    "user",
    "authorized",
    "simply",
    "paste",
    "command",
    "getting",
    "first",
    "username",
    "see",
    "must",
    "provide",
    "username",
    "password",
    "email",
    "get",
    "email",
    "must",
    "also",
    "get",
    "number",
    "paste",
    "inside",
    "password",
    "logged",
    "publish",
    "package",
    "way",
    "let",
    "try",
    "writing",
    "npm",
    "publish",
    "hitting",
    "enter",
    "see",
    "still",
    "work",
    "getting",
    "message",
    "payment",
    "required",
    "must",
    "sign",
    "private",
    "packages",
    "want",
    "private",
    "package",
    "write",
    "npm",
    "publish",
    "minus",
    "minor",
    "success",
    "equals",
    "public",
    "case",
    "publish",
    "package",
    "public",
    "package",
    "totally",
    "fine",
    "might",
    "get",
    "error",
    "403",
    "forbidden",
    "typically",
    "happens",
    "name",
    "used",
    "inside",
    "already",
    "exists",
    "actually",
    "wrote",
    "mla",
    "slash",
    "utilities",
    "already",
    "taken",
    "changed",
    "name",
    "published",
    "see",
    "errors",
    "getting",
    "message",
    "successfully",
    "published",
    "copy",
    "paste",
    "name",
    "put",
    "inside",
    "searching",
    "packages",
    "hitting",
    "enter",
    "see",
    "package",
    "published",
    "readme",
    "links",
    "right",
    "totally",
    "correct",
    "hit",
    "repository",
    "jumping",
    "inside",
    "github",
    "moment",
    "truth",
    "install",
    "package",
    "try",
    "use",
    "write",
    "npm",
    "install",
    "package",
    "monster",
    "lessons",
    "academy",
    "utilities",
    "successfully",
    "installed",
    "see",
    "inside",
    "known",
    "modules",
    "monster",
    "lessons",
    "academy",
    "utilities",
    "main",
    "point",
    "first",
    "want",
    "check",
    "commonjs",
    "want",
    "create",
    "new",
    "file",
    "inside",
    "want",
    "require",
    "package",
    "want",
    "get",
    "plug",
    "method",
    "require",
    "node",
    "modules",
    "add",
    "monster",
    "lessons",
    "academy",
    "slash",
    "utilities",
    "let",
    "try",
    "use",
    "write",
    "console",
    "log",
    "want",
    "call",
    "plug",
    "array",
    "users",
    "example",
    "user",
    "name",
    "full",
    "next",
    "one",
    "user",
    "name",
    "bar",
    "second",
    "argument",
    "array",
    "name",
    "let",
    "try",
    "start",
    "server",
    "simply",
    "write",
    "node",
    "getting",
    "output",
    "actually",
    "means",
    "package",
    "successfully",
    "works",
    "commonjs",
    "every",
    "project",
    "simply",
    "require",
    "work",
    "inside",
    "nounches",
    "test",
    "frontend",
    "part",
    "want",
    "want",
    "jump",
    "console",
    "write",
    "npm",
    "install",
    "parcel",
    "package",
    "successfully",
    "installed",
    "know",
    "parcel",
    "zero",
    "configuration",
    "bundler",
    "similar",
    "webpack",
    "actually",
    "means",
    "prepare",
    "build",
    "client",
    "want",
    "want",
    "create",
    "new",
    "file",
    "name",
    "inside",
    "pasted",
    "exactly",
    "code",
    "like",
    "inside",
    "usage",
    "imports",
    "see",
    "exactly",
    "package",
    "inside",
    "exactly",
    "plug",
    "enough",
    "also",
    "need",
    "simple",
    "inside",
    "body",
    "script",
    "client",
    "chest",
    "created",
    "importantly",
    "type",
    "module",
    "must",
    "tell",
    "parcel",
    "want",
    "load",
    "module",
    "bundle",
    "correctly",
    "jump",
    "inside",
    "inside",
    "scripts",
    "create",
    "new",
    "script",
    "example",
    "parcel",
    "call",
    "parcel",
    "everything",
    "correctly",
    "us",
    "simply",
    "write",
    "npm",
    "run",
    "parcel",
    "see",
    "compile",
    "everything",
    "correctly",
    "start",
    "web",
    "server",
    "see",
    "successfully",
    "built",
    "open",
    "page",
    "localhost1234",
    "inside",
    "console",
    "see",
    "array",
    "actually",
    "means",
    "library",
    "working",
    "simultaneously",
    "client",
    "server",
    "interested",
    "learn",
    "upload",
    "files",
    "website",
    "make",
    "sure",
    "check",
    "video",
    "also"
  ],
  "keywords": [
    "want",
    "create",
    "javascript",
    "library",
    "using",
    "typescript",
    "transpile",
    "first",
    "common",
    "js",
    "ecmascript",
    "6",
    "modules",
    "publish",
    "npm",
    "actually",
    "folder",
    "scripts",
    "main",
    "two",
    "module",
    "inside",
    "use",
    "used",
    "client",
    "means",
    "must",
    "different",
    "really",
    "nice",
    "modular",
    "system",
    "secondly",
    "configuration",
    "simply",
    "provide",
    "code",
    "see",
    "new",
    "let",
    "name",
    "open",
    "folders",
    "called",
    "source",
    "say",
    "plug",
    "method",
    "array",
    "field",
    "anything",
    "like",
    "export",
    "getting",
    "example",
    "get",
    "user",
    "ts",
    "everything",
    "write",
    "slash",
    "us",
    "need",
    "files",
    "also",
    "config",
    "paste",
    "lib",
    "5",
    "file",
    "generate",
    "exactly",
    "already",
    "repository",
    "github",
    "script",
    "work",
    "command",
    "json",
    "part",
    "install",
    "console",
    "try",
    "check",
    "successfully",
    "jump",
    "important",
    "require",
    "package",
    "mla",
    "add",
    "node",
    "git",
    "push",
    "message",
    "utilities",
    "parcel"
  ]
}