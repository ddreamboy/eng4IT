{
  "text": "thank you\nwelcome to this introductory course on\ndata analytics the first in a series of\ncourses designed to prepare you for a\ncareer as a junior data analyst\nto quote a Forester Consulting report on\nthe power of data to transform business\nbusinesses today recognize the untapped\nvalue in data and data analytics as a\ncrucial factor for business\ncompetitiveness\nto drive their data and analytics\ninitiatives companies are hiring and\nupskilling people\nthey're expanding their teams and\ncreating centers of excellence to set up\na multi-pronged data and analytics\npractice in their organizations\ncombined to this is the significant\nsupply and demand mismatch in skilled\ndata analysts making it a highly sought\nafter and well-paid profession\nyou can choose to master data analytics\nas a career path or leverage it as a\nstepping stone to Branch out into other\ndata professions such as data science\ndata engineering business analytics and\nbusiness intelligence Analytics\nthis course is for you if you're a fresh\ngraduate from any stream a working\nprofessional considering a mid-career\ntransition a data-driven decision maker\nor in any analytics enabled role\nthe course introduces you to the Core\nConcepts processes and tools you need to\ngain entry into data analytics or even\nto strengthen your current role as a\ndata-driven decision maker\nit will equip you with an understanding\nof the data ecosystem and the\nfundamentals of data analysis such as\ndata Gathering wrangling mining analysis\nand data visualization you'll also get\nthe feel of a day in the life of a data\nanalyst\npracticing data analysts share their\nexperience in gaining entry into this\nfield career options and learning paths\nyou can consider and what employers look\nfor in a data analyst they also share\ntheir knowledge and best practices about\nsome of the aspects of the data analysis\nprocess\nwhat lies ahead is truly exciting both\nfor the field and for you as a data\nanalyst so congratulations on choosing\nto be on this journey and good luck\nforeign\n[Music]\nto quote a Forbes 2020 report on data in\nthe coming decade the constant increase\nin data processing speeds and a\nbandwidth the non-stop invention of new\ntools for creating sharing and consuming\ndata and the steady addition of new data\ncreators and consumers around the world\nensure that data growth continues\nunabated data begets more data in a\nconstant virtuous cycle\na modern data ecosystem includes a whole\nnetwork of interconnected independent\nand continually evolving entities\nit includes data that has to be\nintegrated from disparate sources\ndifferent types of analysis and skills\nto generate insights active stakeholders\nto collaborate and act on insights\ngenerated and tools applications and\ninfrastructure to store process and\ndisseminate data as required\nlet's start with the data sources data\nis available in a variety of structured\nand unstructured data sets residing in\ntext images videos click streams user\nconversations social media platforms The\nInternet of Things or iot devices\nreal-time events that stream data Legacy\ndatabases and data sourced from\nprofessional data providers and agencies\nthe sources have never before been so\ndiverse and dynamic\nwhen you're working with so many\ndifferent sources of data the first step\nis to pull a copy of the data from the\noriginal sources into a data repository\nat this stage you're only looking at\nacquiring the data you need working with\ndata formats sources and interfaces\nthrough which this data can be pulled in\nreliability security and integrity of\nthe data being acquired are some of the\nchallenges you work through at this\nstage\nonce the raw data is in a common place\nit needs to get organized cleaned up and\noptimized for Access by end users the\ndata will also need to conform to\ncompliances and standards enforced in\nthe organization for example conforming\nto guidelines that regulate the storage\nand use of personal data such as health\nBiometrics or household data in the case\nof iot devices\nadhering to master data tables within\nthe organization to ensure\nstandardization of Master data across\nall applications and systems of an\norganization is another example the key\nchallenges at this stage could involve\ndata management and working with data\nrepositories that provide High\navailability flexibility accessibility\nand security\nfinally we have our business\nstakeholders applications programmers\nanalysts and data science use cases all\npulling this data from the Enterprise\ndata Repository\nthe key challenges at this stage could\ninclude the interfaces apis and\napplications that can get this data to\nthe end users in line with their\nspecific needs\nfor example data analysts may need the\nraw data to work with business\nstakeholders may need reports and\ndashboards applications may need custom\napis to pull this data\nit's important to note the influence of\nsome of the new and emerging\ntechnologies that are shaping today's\ndata ecosystem and its possibilities for\nexample cloud computing machine learning\nand big data to name a few\nthanks to Cloud Technologies every\nEnterprise today has access to Limitless\nstorage high performance Computing open\nsource Technologies machine learning\nTechnologies and the latest tools and\nlibraries data scientists are creating\npredictive models by training machine\nlearning algorithms on past data\nalso Big Data today we're dealing with\ndata sets that are so massive and so\nvaried that traditional tools and\nAnalysis methods are no longer adequate\nPaving the way for new tools and\ntechniques and also new knowledge and\ninsights\nwe'll learn more about big data and its\ninfluence in shaping business decisions\nfurther along in this course\n[Music]\ntoday organizations that are using data\nto uncover opportunities and are\napplying that knowledge to differentiate\nthemselves are the ones leading into the\nfuture\nwhether looking for patterns in\nfinancial transactions to detect fraud\nusing recommendation engines to drive\nconversion mining social media posts for\ncustomer Voice or Brands personalizing\ntheir offers based on customer Behavior\nAnalysis Business Leaders realize that\ndata holds the key to competitive\nadvantage\nto get value from data you need a vast\nnumber of skill sets and people playing\ndifferent roles\nin this video we're going to look at the\nrole data Engineers data analysts data\nscientists business analysts and\nbusiness intelligence or bi analysts\nplay in helping organizations tap into\nvast amounts of data and turn them into\nactionable insights\nit all starts with a data engineer data\nEngineers are people who develop and\nmaintain data architectures and make\ndata available for business operations\nand Analysis data Engineers work within\nthe data ecosystem to extract integrate\nand organize data from disparate sources\nclean transform and prepare data design\nstore and manage data in data\nrepositories\nthey enable data to be accessible in\nformats and systems that the various\nbusiness applications as well as\nstakeholders like data analysts and data\nscientists can utilize\na data engineer must have good knowledge\nof programming sound knowledge of\nSystems and Technology architectures and\nin-depth understanding of relational\ndatabases and non-relational data stores\nnow let's look at the role of a data\nanalyst in short a data analyst\ntranslates data and numbers into plain\nlanguage so organizations can make\ndecisions data analysts inspect and\nclean data for deriving insights\nidentify correlations find patterns and\napply statistical methods to analyze and\nmine data and visualize data to\ninterpret and present the findings of\ndata analysis\nanalysts are the people who answer\nquestions such as are the users search\nexperiences generally good or bad with\nthe search functionality on our site or\nwhat is the popular perception of people\nregarding our rebranding initiatives or\nis there a correlation between sales of\none product and another\ndata analysts require good knowledge of\nspreadsheets writing queries and using\nstatistical tools to create charts and\ndashboards\nmodern data analysts also need to have\nsome programming skills\nthey also need strong analytical and\nstorytelling skills\nand now let's look at the role data\nscientists play in this ecosystem\ndata scientists analyze data for\nactionable insights and build machine\nlearning or deep learning models that\ntrain on past data to create predictive\nmodels\ndata scientists are people who answer\nquestions such as how many new social\nmedia followers am I likely to get next\nmonth or what percentage of my customers\nam I likely to lose to competition in\nthe next quarter or is this financial\ntransaction unusual for this customer\ndata scientists require knowledge of\nmathematics statistics and a fair\nunderstanding of programming languages\ndatabases and building data models they\nalso need to have domain knowledge\nthen we also have business analysts and\nbi analysts business analysts leverage\nthe work of data analysts and data\nscientists to look at possible\nimplications for their business and the\nactions they need to take or recommend\nbi analysts do the same except their\nfocus is on the market forces and\nexternal influences that shape their\nbusiness they provide business\nintelligence solutions by organizing and\nmonitoring data on different business\nfunctions and exploring that data to\nextract insights and actionables that\nimprove business performance\nto summarize in simple terms data\nengineering converts raw data into\nusable data data analytics uses this\ndata to generate insights\ndata scientists use data analytics and\ndata engineering to predict the future\nusing data from the past business\nanalysts and business intelligence\nanalysts use these insights and\npredictions to drive decisions that\nbenefit and grow their business\ninterestingly it's not uncommon for data\nprofessionals to start their career in\none of the data roles and transition to\nanother role within the data ecosystem\nby supplementing their skills\ndata analysis is the process of\ngathering cleaning analyzing and Mining\ndata interpreting results and Reporting\nthe findings\nwith data analysis we find patterns\nwithin data and correlations between\ndifferent data points and it is through\nthese patterns and correlations that\ninsights are generated and conclusions\nare drawn\ndata analysis helps businesses\nunderstand their past performance and\ninforms their decision making for future\nactions using data analysis businesses\ncan validate a course of action before\ncommitting to it saving valuable time\nand resources and also ensuring greater\nsuccess\nwe'll explore four primary types of data\nanalysis each with a different goal and\nplace in the data analysis process\ndescriptive analytics helps answer\nquestions about what happened over a\ngiven period of time by summarizing past\ndata and presenting the findings to\nstakeholders it helps provide essential\ninsights into past events for example\ntracking past Performance Based on the\norganization's key performance\nindicators or cash flow analysis\ndiagnostic analytics helps answer the\nquestion why did it happen it takes the\ninsights from descriptive analytics to\ndig deeper to find the cause of the\noutcome for example a sudden change in\ntraffic to a website without an obvious\ncause or an increase in sales in a\nregion where there has been no change in\nmarketing Predictive Analytics helps\nanswer the question what will happen\nnext historical data and Trends are used\nto predict future outcomes some of the\nareas in which businesses apply\npredictive analysis are risk assessment\nand sales forecasts it's important to\nnote that the purpose of Predictive\nAnalytics is not to say what will happen\nin future its objective is to forecast\nwhat might happen in the future all\npredictions are probabilistic in nature\nprescriptive analytics helps answer the\nquestion what should be done about it by\nanalyzing past decisions and events the\nlikelihood of different outcomes is\nestimated on the basis of which a course\nof action is decided\nself-driving cars are a good example of\nprescriptive analytics they analyze the\nenvironment to make decisions regarding\nspeed changing lanes which route to take\nEtc or Airlines automatically adjusting\nticket prices based on customer demand\ngas prices the weather or traffic on\nconnecting routes now let's look at some\nof the key steps in any data analysis\nprocess\nunderstanding the problem and desired\nresult data analysis begins with\nunderstanding the problem that needs to\nbe solved and the desired outcome that\nneeds to be achieved where you are and\nwhere you want to be needs to be clearly\ndefined before the analysis process can\nbegin\nsetting a clear metric this stage of the\nprocess includes deciding what will be\nmeasured for example number of product X\nsold in a region and how it will be\nmeasured for example in a quarter or\nduring a festival season Gathering data\nonce you know what you're going to\nmeasure and how you're going to measure\nit you identify the data you require the\ndata sources you need to pull this data\nfrom and the best tools for the job\ncleaning data having gathered the data\nthe next step is to fix quality issues\nin the data that could affect the\naccuracy of the analysis this is a\ncritical step because the accuracy of\nthe analysis can only be ensured if the\ndata is clean you will clean the data\nfrom missing or incomplete values and\noutliers for example a customer\ndemographics data in which the age field\nhas a value of 150 is an outlier you\nwill also standardize the data are\ncoming in from multiple sources\nanalyzing and Mining data once the data\nis clean you will extract and analyze\nthe data from different perspectives you\nmay need to manipulate your data in\nseveral different ways to understand the\ntrends identify correlations and find\npatterns and variations the\ninterpreting results after analyzing\nyour data and possibly conducting\nfurther research which can be an\niterative loop it's time to interpret\nyour results as you interpret your\nresults you need to evaluate if your\nanalysis is defendable against\nobjections and if there are any\nlimitations or circumstances under which\nyour analysis may not hold true\npresenting your findings ultimately the\ngoal of any analysis is to impact\ndecision making the ability to\ncommunicate and present your findings in\nclear and impactful ways is as important\na part of the data analysis process as\nis the analysis itself reports\ndashboards charts graphs Maps case\nstudies are just some of the ways in\nwhich you can present your data\nthank you\nthank you\nin this video we will listen to several\ndata professionals talk about how they\nDefine data analytics and what this term\nmeans to them\nI Define data analytics as the process\nof collecting information and then\nanalyzing that information to confirm\nvarious hypotheses to me data analytics\nalso means storytelling with data using\ndata to clearly and concisely convey the\nstate of the world to the people around\nyou data analysis is the use of\ninformation around you to make decisions\njust like you get up every morning you\nwatch the news the weather report will\ntell you the temperature for the day\nwhether it's going to rain that may\ndictate what you're going to wear or\nwhat activities you can do so data\nanalysis isn't an abstract concept it's\nsomething that we do naturally but it\nhas a technical name and now people are\nbeing paid to do it in a much larger\nlarger or grander\nexperience but really it's not that\ncomplicated\nthe way I put it is that you've got a\nproblem and you need to use facts to\ntest your hypothesis that's where data\nanalytics comes into play the process\nstarts from defining the problem and\nthen you need to create your own\nhypothesis and to test that you need to\ncollect data clean data analyze data and\nthen present it to the key stakeholders\ndata analytics is really any sense of\ndata that you can use to review\ninformation anything that's going to\nhelp you to understand what is going on\nin my case as a CPA I am always looking\nat financial statements and I'm always\nanalyzing data to predict where\nsomeone's been where they are right now\nand where they're headed and so that\ndata helps me to see further and almost\npredict the future of any company that\nI'm working with so data analytics is\nthe collecting cleansing analyzing\npresenting and ultimately sharing of\ndata and your analysis to be able to\nhelp communicate exactly what's going on\nwith your business what's going on in\nthe data so that you can help make\nbetter decisions I would Define data\nanalytics as a process or better yet a\nphenomenon of taking information\ngathered from a relevant population\nmaybe your customers or your social\naudience and breaking that information\ndown into subsets and using that data to\nmake decisions about products or\nservices that you want to offer or in\ncases of the digital environment that\nwe're in making decisions about certain\npieces of content that you want to\npublish so that it appeals to your\ntarget audience foreign\n[Music]\nwhile the role of a data analyst varies\ndepending on the type of organization\nand the extent to which it has adopted\ndata-driven practices there are some\nresponsibilities that are typical to a\ndata analyst role in today's\norganizations these include acquiring\ndata from primary and secondary data\nsources creating queries to extract\nrequired data from databases and other\ndata collection systems filtering\ncleaning standardizing and reorganizing\ndata in preparation for data analysis\nusing statistical tools to interpret\ndata sets using statistical techniques\nto identify patterns and correlations in\ndata analyzing patterns in complex data\nsets and interpreting Trends preparing\nreports and charts that effectively\ncommunicate Trends and patterns creating\nappropriate documentation to Define and\ndemonstrate the steps of the data\nanalysis process\ncorresponding to these responsibilities\nlet's look at some of the skills that\nare valuable for a data analyst the data\nanalysis process requires a combination\nof technical functional and soft skills\nlet's first look at some of the\ntechnical skills that you need in your\nrole as a data analyst these include\nexpertise in using spreadsheets such as\nMicrosoft Excel or Google Sheets\nproficiency and statistical analysis and\nvisualization tools and software such as\nIBM cognos IBM SPSS Oracle visual\nanalyzer Microsoft power bi SAS and\nTableau Proficiency in at least one of\nthe programming languages such as R\nPython and in some cases C plus plus\nJava and Matlab good knowledge of SQL an\nability to work with data in relational\nand no SQL databases the ability to\naccess and extract data from data\nrepositories such as data marts data\nwarehouses data lakes and data pipelines\nfamiliarity with big data processing\ntools such as Hadoop Hive and Spark we\nwill understand more about the features\nand use cases of some of these\nprogramming languages databases data\nrepositories and big data processing\ntools further along in the course\nnow let's look at some of the functional\nskills that you require for the role of\ndata analysts these include proficiency\nand statistics to help you analyze your\ndata validate your analysis and identify\nfallacies and logical errors analytical\nskills that help you research and\ninterpret data theorize and make\nforecasts problem solving skills because\nultimately the end goal of all data\nanalysis is to solve problems probing\nskills that are essential for the\ndiscovery process that is for\nunderstanding a problem from the\nperspective of varied stakeholders and\nusers because the data analysis process\nreally begins with a clear articulation\nof the problem statement and desired\noutcome data visualization skills that\nhelp you decide on the techniques and\ntools that present your findings\neffectively based on your audience type\nof data context and end goal of your\nanalysis project management skills to\nmanage the process people dependencies\nand timelines of the initiative\nthat brings us to your soft skills as a\ndata analyst data analysis is both a\nscience and an art you can Ace the\ntechnical and functional expertise but\none of the key differentiators for your\nsuccess is going to be soft skills this\nincludes your ability to work\ncollaboratively with business and\ncross-functional teams communicate\neffectively to report and present your\nfindings tell a compelling and\nconvincing story and gather support and\nbuy-in for your work above all being\ncurious is at the heart of data analysis\nin the course of your work you will\nstumble upon patterns phenomena and\nanomalies that may show you a different\npath the ability to allow new questions\nto surface and challenge your\nassumptions and hypotheses makes for a\ngreat analyst you will also hear data\nanalysis practitioners talk about\nintuition as a must-have quality it's\nessential to note that intuition in this\ncontext is the ability to have a sense\nof the future based on pattern\nrecognition and past experiences\n[Music]\nin this video we will listen to\npracticing data professionals talk about\nthe qualities and skills required to\nbecome a data analyst the qualities and\nskills of a data analyst a person who's\ncurious naturally someone who has\nattention to detail and enjoys working\nwith computers\na curious person will look to find\nanswers even sometimes when there isn't\na question or they don't mind\nresearching and looking in areas that\nmay not have been thought up before\nattention to detail or looking for\npatterns do you walk into a room and\njust count naturally people how the room\nis set up\npaying attention to close details and\nthen enjoying computers because\ntechnology is moving so fast\nsomething or skill that you learned\ntoday\nin two to three years may not be\napplicable so you need to be able to\ndevelop new skills and learn new\nsoftware depending on how the market\nwhere the industry has changed\ndefinitely both a technical skills and\nsofter skills are required\ntechnical skills include python SQL R\nTableau and power bi and the soft skills\nor interpersonal skills mean whether you\nknow what's the right data to utilize\nand what's the right tool to use and how\nto present the data to the key\nstakeholders and these skill sets\nrequire the business Acumen and\npresentation skills you have to be very\ndetail-oriented you have to love numbers\nyou have to love information and be\nwilling to look at that information and\nnot just look at it on the surface but\ndive deeper so for example in what we do\nI can't just take a bank statement at\nface value I have to actually look at it\nand compare it does the seal look right\nespecially in today's world there's a\nlot of Fraud and miscommunication so to\nbe and and people that are trying to\ntake your information and fraudulently\nuse it so a good data analyst should be\nable to compare last year's information\nto this year's information to see if it\nlooks right you have to have that eye\nand that mindset and not just take\nthings at face value there are many\nqualities and skills required to be a\ndata analyst and I'd break them down\ninto two buckets basically soft skills\nand technical skills I think the most\nimportant soft skills for a data analyst\nis to be really curious to ask a lot of\ngood questions to be really thought full\nand to listen carefully and understand\nboth the user perspective and your\nco-workers perspective and what they\nmost need from the data and always be\nwilling to learn because analytics is a\nfast moving field so you have to\nconstantly be learning and reading to\nstay on top of it there are many\ntechnical skills required to be a data\nanalyst the most important technical\nskill for any new data analyst to learn\nis SQL it's by far the most widely used\nand anytime you're extracting data from\na database you're going to need to know\nSQL\nand there is nothing quite like a data\nanalyst with really really good SQL\nskills I think sometimes people get\nahead of themselves and try a bunch of\nvery complicated Technologies before\ngetting the basics of SQL down and I\nthink that's a really big mistake I\nthink it's always nice to know Python\nand R which are the two main programming\nlanguages used uh to do data analysis I\nthink as a new data analyst you don't\nneed to be proficient in both or really\neither\nbut starting to get good at one or the\nother is going to be really useful for\nyour career another important technical\nskill to have for a data analyst is uh\nto be really good at at least one data\nvisualization tool and to understand\ngeneral principles of data visualization\ntoday the end-to-end skill set of a data\nanalyst is far more Dynamic than what it\nused to be\nso data analyst needs to know what\nproblem they're trying to solve with the\ndata\npulls that data as they need it in the\nstructure they needed in using SQL from\nthe data Lake\num that it's sitting in\nuh you know there'll be many different\ntables and they'll need to figure out\nhow to join them and then pull the data\nclean it up uh Wrangle manipulate it\nmine it so that they're able to\num kind of green insights out of it\npresent those insights concisely clearly\nusing good visualizations and dashboards\nand in other words be able to tell a\ngood story with that data\n[Music]\na day in the life of a data analyst can\ninclude a number of possibilities\nfrom acquiring data from varied data\nsources to creating queries for pulling\ndata from data repositories foraging\nthrough rows of data to look for\ninsights creating reports and dashboards\nand interacting with stakeholders for\ngathering information and presenting the\nfindings it's a spectrum\nand yes the big one\ncleaning and preparing the data so that\nthe findings have a credible basis which\nby the way is a large part of what any\ndata analyst may find themselves doing\nin their jobs but if I had to walk you\nthrough any one type of day I am going\nto pick one which has me foraging\nthrough data looking for insights this\nis the part of my job that I am totally\nin off hi I am sivaram jaladi I work as\na data analyst with fluent grid a smart\ngrid Technology Solutions company based\nin vishakhapatnam in India fluent grid\nis an IBM partner and the recipient of\nIBM Beacon awards for its Solutions in\nthe areas of smart energy and Smart City\nindustry segments we offer integrated\noperations center solutions for power\nutilities and smart cities leveraging\nour actionable intelligence platform\nknown as fluent grid act diligence our\nclient our power utility company in\nSouth India has been noticing a spike in\ncomplaints regarding overbilling and the\nfrequency of these complaints seems to\nsuggest there is something more to it\nthan random occurrences\nso I'm asked to look at the complaints\nand the billing data and see if I can\nspot something\nI start by taking stock of what I have\nsome of the obvious places that I know\nI'm going to be looking into is the\ncomplaint data the subscriber\ninformation data and the billing data\nthat's going to be my starting point\nbefore I dive into the specifics of the\ndata I'm going to make a list of\nquestions\ninitial hypotheses that I am going to\nstart with such as\n1. the usage pattern of subscribers\nreporting this issue\nis there a consumption range for which\nover billing is occurring more than\nothers\nto area wise concentration of complaints\nother complaints concentrated in\nspecific localities within the city\nthree\nfrequency and occurrence of complaints\nbased on individual subscribers\nare the same subscribers reporting over\nbilling repetitively if yes what is the\nfrequency of occurrence in repeat cases\nif a subscriber is over billed once does\nthe overbilling occur every month from\nthe first occurrence or are repeat\noccurrences sporadic or not at all as I\nget clear on my initial hypotheses and\nthe set of questions I'm going to start\nwith I identify the data sets that I am\ngoing to isolate and analyze to validate\nor refute my hypotheses\nI pull out the average annual quarterly\nand monthly billing amounts of the\ncomplainants and look for a range in\nwhich the complaints are falling more\nthan others\nI then pull up the location data of the\ncomplainants to see if there is a\nconnection between overbilling and zip\ncodes here I see what seems to be a\nconcentration of complaints in certain\nareas this looked like it could add up\nto something so instead of moving to the\nthird hypothesis I decide to get a\nlittle deeper into this data next I pull\nout the date of connection data more\nthan 95 percent of the complainants had\nbeen our subscribers for more than seven\nyears though not all subscribers over\nthe seven year mark were facing this\ncomplaint\nso now we see some area wise\nconcentration and we see a significant\nconcentration of complaints based on the\ndate of connection next I pull out the\nmake and the serial number of the meters\nand there it is the serial numbers\nbelonged to the same batch of meters\nprovided by the same supplier the\nconcentration of these meters and\ntherefore the complaints was coming from\nareas in which these meters were\ninstalled at this stage I feel confident\nin presenting these findings to the\nstakeholders I'm also going to share the\ndata sources and my process of arriving\nat this analysis that always goes a long\nway in lending credibility to the\nfindings this could be the end of this\nproject or it may very well come back\nmaybe the same complaints with different\ncommonalities or a completely different\nset of complaints for which we need to\nfind answers\nthank you\nforeign\ndata professionals talk about some of\nthe applications of data analytics in\ntoday's world\nthe applications of data analytics in\nthe world today is everywhere every\ncommercial that you see someone had to\nanalyze and identify either from the\nconsumer or for the company what\ninformation they want it to share so you\nknow four out of 10 dentists or you'll\nsee information related to calorie\ncounts or reactions to certain things\nall of that required analysis this isn't\nsomething that should be thought of\nseparate and apart from it's what we do\nevery day in our lives even people\nmonitoring their sugar level with\ndiabetes there's always analysis going\non so the applications are Universal\nso the great thing with analytics in\nthis day and age is that it's very\nwidely applicable\nevery industry every vertical every\nfunction within a given organization can\nbenefit from data and analytics whether\nyou're doing sales pipeline analysis\nwhat you're doing financials at the end\nof the month creating predefined and\nstandardized formatted reports\nor if you're doing something like head\ncount planning or head count review all\nthese across every vertical as I said\nwhether it's Airlines\nPharmaceuticals banking all these and\nthe functions within them can benefit\nfrom analytics and in this climate that\nwe're in right now with the pandemic\nthere are companies who are paying close\nattention to their customers buying\nhabits obviously they may have varied\nfrom what these companies expected these\nhabits to be and so now data analytics\nis more important because they need to\nmake sure they can pivot and keep up\nwith the demand and really be able to\ncater to what their clients and their\ncustomers want\nI can talk about applications of data\nanalytics in finance these years we have\nseen more and more applications of\nalternative data analytics in the\nfinance world\nfor example we can use sentiment\nanalysis of tweets and new stories to\nsupplement traditional financial\nanalysis and to inform better investment\ndecisions besides the satellite imagery\ndata can be used to track the\ndevelopment of industrial activities in\nthe geolocation data can be used to\ntrack the store traffic and to predict\nthe sales volume\nforeign\necosystem includes the infrastructure\nsoftware tools Frameworks and processes\nused to gather clean analyze mine and\nvisualize data in this video we will go\nover a quick overview of the ecosystem\nbefore going into the details of each of\nthese topics in subsequent videos let's\nfirst talk about data based on how\nwell-defined the structure of the data\nis data can be categorized as structured\nsemi-structured or unstructured data\nthat follows a rigid format and can be\norganized neatly into rows and columns\nis structured data this is the data that\nyou see typically in databases and\nspreadsheets for example semi-structured\ndata is a mix of data that has\nconsistent characteristics and data that\ndoesn't conform to a rigid structure for\nexample emails an email has a mix of\nstructured data such as the name of the\nsender and recipient but also has the\ncontents of the email which is\nunstructured data and then there is\nunstructured data data that is complex\nand mostly qualitative information that\nis impossible to reduce to rows and\ncolumns for example photos videos text\nfiles PDFs and social media content the\ntype of data drives the kind of data\nreposit stories that the data can be\ncollected and stored in and also the\ntools that can be used to query or\nprocess the data data also comes in a\nwide-ranging variety of file formats\nbeing collected from a variety of data\nsources ranging from relational and\nnon-relational databases to apis web\nservices data streams social platforms\nand sensor devices\nthis brings us to data repositories a\nterm that includes databases data\nwarehouses data Marts data lakes and Big\nData stores the type format and sources\nof data influence the type of data\nrepositories that you could use to\ncollect store clean analyze and mine the\ndata for analysis if you're working with\nbig data for example you will need big\ndata warehouses that allow you to store\nand process large volume High Velocity\ndata and also Frameworks that allow you\nto perform complex analytics in real\ntime on Big Data\nthe ecosystem also includes languages\nthat can be classified as query\nlanguages programming languages and\nshell and scripting languages querying\nand manipulating data with SQL to\ndeveloping data applications with python\nand writing shell scripts for repetitive\noperational tasks these are important\ncomponents in a data analyst's workbench\nautomated tools Frameworks and processes\nfor all stages of the analytics process\nare part of the data analysts ecosystem\nfrom tools used for Gathering extracting\ntransforming and loading data into Data\nrepositories to tools for data wrangling\ndata cleaning analysis Data Mining and\ndata visualization it's a very diverse\nand Rich ecosystem spreadsheets Jupiter\nnotebooks and IBM cognos are just a few\nexamples\nwe will cover some of the data analytics\nTools in Greater detail in subsequent\nsections of the course\n[Music]\ndata is unorganized information that is\nprocessed to make it meaningful\ngenerally data comprises of facts\nobservations perceptions numbers\ncharacters symbols and images that can\nbe interpreted to derive meaning one of\nthe ways in which data can be\ncategorized is by its structure data can\nbe structured semi-structured or\nunstructured\nstructured data has a well-defined\nstructure or adheres to a specified data\nmodel can be stored in well-defined\nschemas such as databases and in many\ncases can be represented in a tabular\nmanner with rows and columns\nstructured data is objective facts and\nnumbers that can be collected exported\nstored and organized in typical\ndatabases\nsome of the sources of structured data\ncould include SQL databases and online\ntransaction processing or oltp systems\nthat focus on business transactions\nspreadsheets such as Excel and Google\nsheets online forms sensors such as\nGlobal Positioning Systems or GPS and\nradio frequency identification or RFID\ntags and network and web server logs you\ncan also easily examine structured data\nwith standard data analysis tools and\nmethods\nsemi-structured data is data that has\nsome organizational properties but lacks\na fixed or rigid schema semi-structured\ndata cannot be stored in the form of\nrows and columns as in databases it\ncontains tags or elements or metadata\nwhich is used to group data and organize\nit in a hierarchy some of the sources of\nsemi-structured data could include\nemails XML and other markup languages\nbinary executables TCP or IP packets\nzippered files and integration of data\nfrom different sources XML and Json\nallow users to define tags and\nattributes to store data in a\nhierarchical form and are used widely to\nstore and exchange semi-structured data\nunstructured data is data that does not\nhave an easily identifiable structure\nand therefore cannot be organized in a\nmainstream relational database in the\nform of rows and columns it does not\nhave any particular format sequence\nsemantics or rules\nunstructured data can deal with the\nheterogeneity of sources and has a\nvariety of business intelligence and\nanalytics applications\nsome of the sources of unstructured data\ncould include web pages social media\nfeeds images and varied file formats\nsuch as JPEG GIF and PNG video and audio\nfiles documents and PDF files PowerPoint\npresentations media logs and surveys\nunstructured data can be stored in files\nand documents such as a Word document\nfor manual analysis or in nosql\ndatabases that have their own analysis\ntools for examining this type of data\nto summarize structured data is data\nthat is well organized in formats that\ncan be stored in databases and lends\nitself to standard data analysis methods\nand tools\nsemi-structured data is data that is\nsomewhat organized and relies on meta\ntags for grouping and hierarchy\nan unstructured data is data that is not\nconventionally organized in the form of\nrows and columns in a particular format\nin the next video we will learn about\nthe different types of file structures\nforeign\n[Music]\nas a data professional you will be\nworking with a variety of data file\ntypes and formats it is important to\nunderstand the underlying structure of\nfile formats along with their benefits\nand limitations this understanding will\nsupport you to make the right decisions\non the formats best suited for your data\nand performance needs some of the\nstandard file formats that we will cover\nin this video include delimited text\nfile formats Microsoft Excel open XML\nspreadsheet or xlsx extensible markup\nlanguage or XML portable document format\nor PDF JavaScript object notation or\nJson\ndelimited text files are text files used\nto store data as text in which each line\nor row has values separated by a\ndelimiter where a delimiter is a\nsequence of one or more characters for\nspecifying the boundary between\nindependent entities or values any\ncharacter can be used to separate the\nvalues but most common delimiters are\nthe comma tab colon vertical bar and\nspace comma separated values or csvs and\ntab separated values or tsvs are the\nmost commonly used file types in this\ncategory in csvs the delimiter is a\ncomma while in tsvs the delimiter is a\ntab when literal commas are present in\nText data and therefore cannot be used\nas delimiters\ntsvs serve as an alternative to CSV\nformat\ntab stops are infrequent in running text\neach row or horizontal line in the text\nfile has a set of values separated by\nthe delimiter and represents a record\nthe first row works as a column header\nwhere each column can have a different\ntype of data for example a column can be\nof date type while another can be a\nstring or integer type data delimited\nfiles allow field values of any length\nand are considered a standard format for\nproviding straightforward information\nschema they can be processed by almost\nall existing applications delimiters\nalso represent one of various means to\nspecify boundaries in a data stream\nMicrosoft Excel open XML spreadsheet or\nxlsx is a Microsoft Excel open XML file\nformat that falls under the spreadsheet\nfile format it is an XML based file\nformat created by Microsoft in an xlsx\nalso known as a workbook there can be\nmultiple worksheets and each worksheet\nis organized into rows and columns at\nthe intersection of which is the cell\neach cell contains data\nxlsx uses the open file format which\nmeans it is generally accessible to most\nother applications it can use and save\nall functions available in Excel and is\nalso known to be one of the more secure\nfile formats as it cannot save malicious\ncode\nextensible markup language or XML is a\nmarkup language with set rules for\nencoding data the XML file format is\nboth readable by humans and machines it\nis a self-descriptive language designed\nfor sending information over the\ninternet\nXML is similar to HTML in some respects\nbut also has differences for example an\nXML does not use predefined tags like\nHTML does XML is platform independent\nand programming language independent and\ntherefore simplifies data sharing\nbetween various systems\nportable document format or PDF is a\nfile format developed by Adobe to\npresent documents independent of\napplication software hardware and\noperating systems which means it can be\nviewed the same way on any device this\nformat is frequently used in legal and\nfinancial documents and can also be used\nto fill in data such as forms\nJavaScript object notation or Json is a\ntext-based open standard designed for\ntransmitting structured data over the\nweb the file format is a language\nindependent data format that can be read\nin any programming language Json is easy\nto use is compatible with a wide range\nof browsers and is considered as one of\nthe best tools for sharing data of any\nsize and type even audio and video that\nis one reason many apis and web servers\nreturn data as Json foreign\n[Music]\nas we touched upon in one of our\nprevious videos data sources have never\nbeen as Dynamic and diverse as they are\ntoday in this video we will look at some\ncommon sources such as relational\ndatabases flat files and XML data sets\napis and web services\nweb scraping data streams and feeds\ntypically organizations have internal\napplications to support them in managing\ntheir day-to-day business activities\ncustomer transactions human resource\nactivities and their workflows\nthese systems use relational databases\nsuch as SQL Server Oracle MySQL and IBM\ndb2 to store data in a structured way\ndata stored in databases and data\nwarehouses can be used as a source for\nanalysis for example data from a retail\ntransaction system can be used to\nanalyze sales in different regions and\ndata from a customer relationship\nmanagement system can be used for making\nsales projections external to the\norganization there are other publicly\nand privately available data sets for\nexample government organizations\nreleasing demographic and economic data\nsets on an ongoing basis then there are\ncompanies that sell specific data for\nexample point of sale data or financial\ndata or weather data\nwhich businesses can use to define\nstrategy predict demand and make\ndecisions related to distribution or\nmarketing promotions among other things\nsuch data sets are typically made\navailable as flat files spreadsheet\nfiles or XML documents\nflat files store data in plain text\nformat with one record or row per line\nand each value separated by delimiters\nsuch as commas semicolons or tabs\ndata in a flat file maps to a single\ntable unlike relational databases that\ncontain multiple tables\none of the most common flat file formats\nis CSV in which values are separated by\ncommas\nspreadsheet files are a special type of\nflat files that also recognize data in a\ntabular format rows and columns but a\nspreadsheet can contain multiple\nworksheets and each worksheet can map to\na different table\nalthough data in spreadsheets is in\nplain text the files can be stored in\ncustom formats and include additional\ninformation such as formatting formulas\nEtc\nMicrosoft Excel which stores data in an\nXLS or xlsx format is probably the most\ncommon spreadsheet\nothers include Google Sheets Apple\nnumbers and LibreOffice\nXML files contain data values that are\nidentified or marked up using tags while\ndata in flat files is flat or maps to a\nsingle table\nXML files can support more complex data\nstructures such as hierarchical\nsome common uses of XML include data\nfrom online surveys bank statements and\nother unstructured data sets\nmany data providers and websites provide\napis or application program interfaces\nand web services which multiple users or\napplications can interact with and\nobtain data for processing or analysis\napis and web services typically listen\nfor incoming requests which can be in\nthe form of web requests from users or\nnetwork requests from applications and\nreturn data in plain text XML HTML Json\nor media files\nlet's look at some popular examples of\napis being used as a data source for\ndata analytics\nthe use of Twitter and Facebook apis to\nSource data from tweets and posts for\nperforming tasks such as opinion mining\nor sentiment analysis which is to\nsummarize the amount of appreciation and\ncriticism on a given subject such as\npolicies of a government product a\nservice or customer satisfaction in\ngeneral\nstock market apis used for pulling data\nsuch as share and commodity prices\nearnings per share and historical prices\nfor trading and Analysis\ndata lookup and validation apis which\ncan be very useful for data analysts for\ncleaning and preparing data as well as\nfor co-relating data for example to\ncheck which city or state a postal or\nzip code belongs to\napis are also used for pulling data from\ndatabase sources within and external to\nthe organization\nweb scraping is used to extract relevant\ndata from unstructured sources also\nknown as screen scraping web harvesting\nand web data extraction web scraping\nmakes it possible to download specific\ndata from web pages based on defined\nparameters\nweb scrapers can among other things\nextract text contact information images\nvideos product items and much more from\na website\nsome popular uses of web scraping\ninclude collecting product details from\nretailers manufacturers and e-commerce\nwebsites to provide price comparisons\ngenerating sales leads through public\ndata sources extracting data from Posts\nand authors on various forums and\ncommunities and collecting training and\ntesting data sets for machine learning\nmodels\nsome of the popular web scraping tools\ninclude beautiful soup and Scrapy pandas\nand selenium\ndata streams are another widely used\nsource for aggregating constant streams\nof data flowing from sources such as\ninstruments iot devices and applications\nGPS data from Cars computer programs\nwebsites and social media posts this\ndata is generally time stamped and also\ngeotagged for geographical\nidentification\nsome of the data streams and ways in\nwhich they can be leveraged include\nstock and market tickers for financial\ntrading retail transaction streams for\npredicting demand and Supply Chain\nmanagement surveillance and video feeds\nfor threat detection\nsocial media feeds for sentiment\nanalysis sensor data feeds for\nmonitoring industrial or farming\nMachinery web click feeds for monitoring\nweb performance and improving design and\nreal-time flight events for rebooking\nand rescheduling\nsome popular applications used to\nprocess data streams include Apache\nKafka Apache spark streaming and Apache\nstorm\nRSS or really simple syndication feeds\nare another popular data source these\nare typically used for capturing updated\ndata from online forums and new sites\nwhere data is refreshed on an ongoing\nbasis\nusing a feed reader which is an\ninterface that converts RSS text files\ninto a stream of updated data updates\nare streamed to user devices\n[Music]\n[Music]\nin this video we will learn about some\nof the languages relevant to the work of\ndata professionals these can be\ncategorized as query languages\nprogramming languages and shell\nscripting having Proficiency in at least\none language in each category is\nessential for any data professional\nsimply stated query languages are\ndesigned for accessing and manipulating\ndata in a database for example SQL\nprogramming languages are designed for\ndeveloping applications and controlling\napplication behavior for example python\nR and Java and shell and scripting\nlanguages such as Unix or Linux shell\nand Powershell are ideal for repetitive\nand time-consuming operational tasks\nin the remaining video we will examine\nthese languages in Greater depth\nSQL or structured query language is a\nquerying language designed for accessing\nand manipulating information from mostly\nthough not exclusively relational\ndatabases\nusing SQL we can write a set of\ninstructions to perform operations such\nas insert update and delete records in a\ndatabase create new databases tables and\nViews and write stored procedures\nwhich means you can write a set of\ninstructions and call them for later use\nhere are some advantages of using SQL\nSQL is portable and can be used\nindependent of the platform it can be\nused for querying data in a wide variety\nof databases and data repositories\nalthough each vendor may have some\nvariations and special extensions\nit has a simple syntax that is similar\nto the English language its syntax\nallows developers to write programs with\nfewer lines than some of the other\nprogramming languages using basic\nkeywords such as select insert into and\nupdate it can retrieve large amounts of\ndata quickly and efficiently it runs on\nan interpreter system which means code\ncan be executed as soon as it is written\nmaking prototyping quick and easy SQL is\none of the most popular querying\nlanguages due to its large user\ncommunity and the sheer volume of\ndocumentation accumulated over the years\nit continues to provide a uniform\nplatform worldwide to all its users\npython is a widely used open source\ngeneral purpose high-level programming\nlanguage its syntax allows programmers\nto express their Concepts in fewer lines\nof code AS compared to some of the older\nlanguages python is perceived as one of\nthe easiest languages to learn and has a\nlarge developer Community because of its\nfocus on Simplicity and readability and\na low learning curve it's an Ideal tool\nfor beginning programmers\nit is great for performing High\ncomputational tasks in vast amounts of\ndata which can otherwise be extremely\ntime consuming and cumbersome python\nprovides libraries like numpy and pandas\nwhich eases the task by the use of\nparallel processing\nit has inbuilt functions for almost all\nof the frequently used Concepts\npython supports multiple programming\nparadigms such as object-oriented\nimperative functional and procedural\nmaking it suitable for a wide variety of\nuse cases now let's look at some of the\nreasons that make python one of the\nfastest growing programming languages in\nthe world today it is easy to learn with\npython you have the advantage of using\nfewer lines of code to accomplish tasks\ncompared to other languages it is open\nsource python is free and uses a\ncommunity-based model for development\nit runs on Windows and Linux\nenvironments and can be ported to\nmultiple platforms\nit has widespread Community Support with\nplenty of useful analytics libraries\navailable\nit has several open source libraries for\ndata manipulation data visualization\nstatistics and Mathematics to name just\na few its vast array of libraries and\nfunctionalities also include pandas for\ndata cleaning and Analysis numpy and\nscipy for statistical analysis beautiful\nsuit and scrapey for web scraping\nmatplotlib and Seabourn to visually\nrepresent data in the form of bar\ngraph's histogram and pie charts openc\nfor image processing\nR is an open source programming language\nand environment for data analysis data\nvisualization machine learning and\nstatistics widely used for developing\nstatistical software and Performing data\nanalytics it is especially known for its\nability to create compelling\nvisualizations giving it an edge over\nsome of the other languages in this\nspace\nsome of the key benefits of R include\nthe following it is an open source\nplatform independent programming\nlanguage it can be paired with many\nprogramming languages including python\nit is highly extensible which means\ndevelopers can continue to add\nfunctionalities by defining new\nfunctions it facilitates the handling of\nstructured as well as unstructured data\nwhich means it has more comprehensible\ndata capability\nit has libraries such as ggplot2 and\nplotly that offer aesthetic graphical\nplots to its users\nyou can make reports with the data and\nscripts embedded in them also\ninteractive web apps that allow users to\nplay with the results and the data it is\ndominant among other programming\nlanguages for developing statistical\ntools\nJava is an object-oriented class-based\nand platform independent programming\nlanguage originally developed by Sun\nMicrosystems\nit is among the top ranked programming\nlanguages used today Java is used in a\nnumber of processes all through data\nanalytics including cleaning data\nimporting and exporting data statistical\nanalysis and data visualization in fact\nmost of the popular framework and tools\nused for Big Data are typically written\nin Java such as Hadoop Hive and Spark\nit is perfectly suited for Speed\ncritical projects\na Unix or Linux shell is a computer\nprogram written for the Unix shell it is\na series of unix commands written in a\nplain text file to accomplish a specific\ntask writing a shell script is fast and\neasy it is most useful for repetitive\ntasks that may be time consuming to\nexecute by typing one line at a time\ntypical operations performed by shell\nscripts include file manipulation\nprogram execution system administration\ntasks such as disk backups and\nevaluating system logs installation\nscripts for complex programs executing\nroutine backups and running batches\nPowershell is a cross-platform\nautomation tool and configuration\nframework by Microsoft that is optimized\nfor working with structured data formats\nsuch as Json CSV XML and rest apis\nwebsites and office applications it\nconsists of a command line shell and\nscripting language\nPowershell is object-based which makes\nit possible to filter sort measure group\ncompare and many more actions on objects\nas they pass through a data pipeline\nit is also a good tool for data mining\nbuilding guis and creating charts\ndashboards and interactive reports\na data repository is a general term used\nto refer to data that has been collected\norganized and isolated so that it can be\nused for business operations or mined\nfor reporting and data analysis it can\nbe a small or large database\ninfrastructure with one or more\ndatabases that collect manage and store\ndata sets in this video we will provide\nan overview of the different types of\nrepositories your data might reside in\nsuch as databases data warehouses and\nBig Data stores and examine them in\nGreater detail in further videos\nlet's begin with databases a database is\na collection of data or information\ndesigned for the input storage search\nand retrieval and modification of data\nand a database management system or dbms\nis a set of programs that creates and\nmaintains the database it allows you to\nstore modify and extract information\nfrom the database using a function\ncalled querying for example if you want\nto find customers who have been inactive\nfor six months or more using the\nquerying function the database\nmanagement system will retrieve data of\nall customers from the database that\nhave been inactive for six months or\nmore even though a database and dbms\nmean different things the terms are\noften used interchangeably\nthere are different types of databases\nseveral factors influence the choice of\ndatabase such as the data type and\nstructure querying mechanisms latency\nrequirements transaction speeds and\nintended use of the data\nit's important to mention two main types\nof databases here relational and\nnon-relational databases relational\ndatabases also referred to as rdbms's\nbuilt on the organizational principles\nof flat files with data organized into a\ntabular format with rows and columns\nfollowing a well-defined structure and\nschema however unlike flat files rdbms's\nare optimized for data operations and\nquerying involving many tables and much\nlarger data volumes structured query\nlanguage or SQL is the standard querying\nlanguage for relational databases\nthen we have non-relational databases\nalso known as nosql or not only SQL\nnon-relational databases emerged in\nresponse to the volume diversity and\nspeed at which data is being generated\ntoday mainly influenced by advances in\ncloud computing the internet of things\nand social media proliferation Built For\nSpeed flexibility and scale\nnon-relational databases made it\npossible to store data in a schema list\nor free form fashion no SQL is widely\nused for processing Big Data\na data warehouse works as a central\nrepository that merges information\ncoming from disparate sources and\nconsolidates it through the extract\ntransform and load process also known as\nthe ETL process into one comprehensive\ndatabase for analytics and business\nintelligence at a very high level the\nETL process helps you to extract data\nfrom the different data sources\ntransform the data into a clean and\nusable State and load the data into the\nEnterprise's data repository related to\ndata warehouses are the concepts of data\nMarts and data Lakes which we will cover\nlater data Marts and data warehouses\nhave historically been relational since\nmuch of the traditional Enterprise data\nhas resided in rdbms's however with the\nemergence of no SQL Technologies and new\nsources of data non-relational data\nrepositories are also now being used for\ndata warehousing\nanother category of data repositories\nare big data stores that include\ndistributed computational and storage\ninfrastructure to store scale and\nprocess very large data sets\noverall data repositories help to\nisolate data and make reporting and\nanalytics more efficient and credible\nwhile also serving as a data archive\n[Music]\na relational database is a collection of\ndata organized into a table structure\nwhere the tables can be linked or\nrelated Based on data common to each\ntables are made of rows and columns\nwhere rows are the records and the\ncolumns the attributes let's take the\nexample of a customer table that\nmaintains data about each customer in a\ncompany The Columns or attributes in the\ncustomer table are the customer ID\ncustomer name customer address and\ncustomer primary phone and each row is a\ncustomer record\nnow let's understand what we mean by\ntables being linked or related Based on\ndata common to each\nalong with the customer table the\ncompany also maintains transaction\ntables that contain data describing\nmultiple individual transactions\npertaining to each customer\nThe Columns for the transaction table\nmight include the transaction date\ncustomer ID transaction amount and\npayment method the customer table and\ntransaction tables can be related based\non the common customer ID field you can\nquery the customer table to produce\nreports such as a customer statement\nthat consolidates all transactions in a\ngiven period this capability of relating\ntables based on common data enables you\nto retrieve an entirely new table from\ndata in one or more tables with a single\nquery it also allows you to understand\nthe relationships among all available\ndata and gain new insights for making\nbetter decisions relational databases\nuse structured query language or SQL for\nquerying data we'll learn more about SQL\nlater in this course relational\ndatabases build on the organizational\nprinciples of flat files such as\nspreadsheets with data organized into\nrows and columns following a\nwell-defined structure and schema\nbut this is where the similarity ends\nrelational databases by Design are ideal\nfor the optimized storage retrieval and\nprocessing of data for large volumes of\ndata unlike spreadsheets that have a\nlimited number of rows and columns\neach table in a relational database has\na unique set of rows and columns and\nrelationships can be defined between\ntables which minimizes data redundancy\nmoreover you can restrict database\nfields to specific data types and values\nwhich minimizes irregularities and leads\nto Greater consistency and data\nIntegrity relational databases use SQL\nfor querying data which gives you the\nadvantage of processing millions of\nrecords and retrieving large amounts of\ndata in a matter of seconds\nmoreover the security architecture of\nrelational databases provides controlled\naccess to data and also ensures that the\nstandards and policies for governing\ndata can be enforced relational\ndatabases range from small desktop\nsystems to massive cloud-based systems\nthey can be either open source and\ninternally supported open source with\ncommercial support or commercial\nclosed-source systems\nIBM db2 Microsoft SQL Server MySQL\nOracle database and postgresql are some\nof the popular relational databases\ncloud-based relational databases also\nreferred to as database as a service are\ngaining wide use as they have access to\nthe Limitless compute and storage\ncapabilities offered by the cloud\nsome of the popular Cloud relational\ndatabases include Amazon relational\ndatabase service or RDS Google Cloud SQL\nIBM db2 on cloud Oracle cloud and SQL\nAzure rdbms is a mature and\nwell-documented Technology making it\neasy to learn and find qualified talent\none of the most significant advantages\nof the relational database approach is\nits ability to create meaningful\ninformation by joining tables some of\nits other advantages include flexibility\nusing SQL you can add new columns add\nnew tables rename relations and make\nother changes while the database is\nrunning and queries are happening\nreduced redundancy relational databases\nminimize data redundancy for example the\ninformation of a customer appears in a\nsingle entry in the customer table and\nthe transaction table pertaining to the\ncustomer stores a link to the customer\ntable\nease of backup and Disaster Recovery\nrelational databases offer easy export\nand import options making backup and\nrestore easy exports can happen while\nthe database is running making restore\non failure easy\ncloud-based relational databases do\ncontinuous mirroring which means the\nloss of data on restore can be measured\nin seconds or less\nacid compliance asset stands for\natomicity consistency isolation and\ndurability asset compliance implies that\nthe data in the database remains\naccurate and consistent despite failures\nand database transactions are processed\nreliably now we'll look at some use\ncases for relational databases\nonline transaction processing oltp\napplications are focused on transaction\noriented tasks that run at high rates\nrelational databases are well suited for\noltp applications because they can\naccommodate a large number of users they\nsupport the ability to insert update or\ndelete small amounts of data and they\nalso support frequent queries and\nupdates as well as fast response times\ndata warehouses in a data warehousing\nenvironment relational databases can be\noptimized for online analytical\nprocessing or olap where historical data\nis analyzed for business intelligence\niot Solutions internet of things or iot\nSolutions require speed as well as the\nability to collect and process data from\nEdge devices which need a lightweight\ndatabase solution this brings us to the\nlimitations of rdbms\nrdbms does not work well with\nsemi-structured or unstructured data and\nis therefore not suitable for extensive\nanalytics on such data\nfor migration between two rdbms's\nschemas and type of data need to be\nidentical between the source and\ndestination tables\nrelational databases have a limit on the\nlength of data fields which means if you\ntry to enter more information into a\nfield then it can accommodate the\ninformation will not be stored despite\nthe limitations and the evolution of\ndata in these times of Big Data cloud\ncomputing iot devices and social media\nrdbms continues to be the predominant\ntechnology for working with structured\ndata\nforeign\n[Music]\nwhich stands for not only SQL or\nsometimes non-sql is a non-relational\ndatabase design that provides flexible\nschemas for the storage and retrieval of\ndata no SQL databases have existed for\nmany years but have only recently become\nmore popular in the era of cloud big\ndata and high volume web and mobile\napplications they are chosen today for\ntheir attributes around scale\nperformance and ease of use\nit's important to emphasize that the no\nin no SQL is an abbreviation for not\nonly and not the actual word no no SQL\ndatabases are built for specific data\nmodels and have flexible schemas that\nallow programmers to create and manage\nmodern applications they do not use a\ntraditional row column table database\ndesign with fixed schemas and typically\nnot use the structured query language or\nSQL to query data although some may\nsupport SQL or SQL like interfaces\nno SQL allows data to be stored in a\nschema-less or free form fashion any\ndata be it structured semi-structured or\nunstructured can be stored in any record\nbased on the model being used for\nstoring data there are four common types\nof no SQL databases\nkey Value Store document based column\nbased and graph based\nkey Value Store data in a key value\ndatabase is stored as a collection of\nkey value pairs the key represents an\nattribute of the data and is a unique\nidentifier\nboth keys and values can be anything\nfrom simple integers or strings to\ncomplex Json documents\nkey value stores are great for storing\nuser session data and user preferences\nmaking real-time recommendations and\ntargeted advertising and in-memory data\ncaching\nhowever if you want to be able to query\nthe data on specific data value need\nrelationships between data values or\nneed to have multiple unique Keys a key\nvalue store may not be the best fit\nredis memcache D and dynamodb are some\nwell-known examples in this category\ndocument based document databases store\neach record and its Associated data\nwithin a single document they enable\nflexible indexing powerful ad-hoc\nqueries and analytics over collections\nof documents\ndocument databases are preferable for\ne-commerce platforms medical records\nstorage CRM platforms and analytics\nplatforms however if you're looking to\nrun complex search queries and\nmulti-operation transactions a\ndocument-based database may not be the\nbest option for you\nmongodb documentdb couchdb and cloudant\nare some of the popular document-based\ndatabases\ncolumn based column based models store\ndata in cells grouped as Columns of data\ninstead of rows\na logical grouping of columns that is\ncolumns that are usually accessed\ntogether is called a column family for\nexample a customer's name and profile\ninformation will most likely be accessed\ntogether but not their purchase history\nso customer name and profile information\ndata can be grouped into a column family\nsince column databases store all cells\ncorresponding to a column as a\ncontinuous disk entry accessing and\nsearching the data becomes very fast\ncolumn databases can be great for\nsystems that require heavy write\nrequests storing time series data\nweather data and iot data but if you\nneed to use complex queries or change\nyour querying patterns frequently this\nmay not be the best option for you\nthe most popular column databases are\nCassandra and hbase\ngraph based graph-based databases use a\ngraphical model to represent and store\ndata they are particularly useful for\nvisualizing analyzing and finding\nconnections between different pieces of\ndata the circles are nodes and they\ncontain the data the arrows represent\nrelationships\ngraph databases are an excellent choice\nfor working with connected data which is\ndata that contains lots of\ninterconnected relationships\ngraph databases are great for social\nnetworks real-time product\nrecommendations Network diagrams fraud\ndetection and access management\nbut if you want to process High volumes\nof transactions it may not be the best\nchoice for you because graph databases\nare not optimized for large volume\nanalytics queries\nneo4j and Cosmos DB are some of the more\npopular graph databases\nno SQL was created in response to the\nlimitations of traditional relational\ndatabase technology the primary\nadvantage of no SQL is its ability to\nhandle large volumes of structured\nsemi-structured and unstructured data\nsome of its other advantages include the\nability to run as distributed systems\nscaled across multiple data centers\nwhich enables them to take advantage of\ncloud computing infrastructure an\nefficient and cost effective scale out\narchitecture that provides additional\ncapacity and performance with the\naddition of new nodes and simpler design\nbetter control over availability and\nimproved scalability that enables you to\nbe more agile more flexible and to\niterate more quickly\nto summarize the key differences between\nrelational and non-relational databases\nrdbms schemas rigidly Define how all\ndata inserted into the database must be\ntyped and composed whereas no SQL\ndatabases can be schema agnostic\nallowing unstructured and\nsemi-structured data to be stored and\nmanipulated maintaining high-end\ncommercial relational database\nManagement Systems is expensive whereas\nno SQL databases are specifically\ndesigned for low-cost commodity Hardware\nrelational databases unlike most nosql\nsupport acid compliance which ensures\nreliability of transactions and crash\nrecovery\nrdbms is a mature and well-documented\ntechnology which means the risks are\nmore or less perceivable as compared to\nno SQL which is a relatively newer\ntechnology\nnonetheless no SQL databases are here to\nstay and are increasingly being used for\nMission critical applications\nforeign\n[Music]\nearlier in the course We examined\ndatabases data warehouses and Big Data\nstores now we'll go a little deeper in\nour exploration of data warehouses data\nMarts and data lakes and also learn\nabout the ETL process and data Pipelines\na data warehouse works like a\nmulti-purpose storage for different use\ncases by the time data comes into the\nwarehouse it has already been modeled\nand structured for a specific purpose\nmeaning it is analysis ready as an\norganization you would opt for a data\nwarehouse when you have massive amounts\nof data from your operational systems\nthat need to be readily available for\nreporting and Analysis data warehouses\nserve as the single source of Truth\nstoring current and historical data that\nhas been cleansed conformed and\ncategorized a data warehouse is a\nmulti-purpose enabler of operational and\nperformance Analytics\na data Mart is a subsection of the data\nwarehouse built specifically for a\nparticular business function purpose or\ncommunity of users the idea is to\nprovide stakeholders data that is most\nrelevant to them when they need it for\nexample the sales or Finance teams\naccessing data for their quarterly\nreports and projections\nsince a data Mart offers analytical\ncapabilities for a restricted area of\nthe data warehouse it offers isolated\nsecurity and isolated performance the\nmost important role of a data Mart is\nbusiness specific reporting and\nAnalytics\na data lake is a storage repository that\ncan store large amounts of structured\nsemi-structured and unstructured data in\ntheir native format classified and\ntagged with metadata so while a data\nwarehouse stores data processed for a\nspecific need a data lake is a pool of\nraw data where each data element is\ngiven a unique identifier and is tagged\nwith meta tags for further use you would\nopt for a data Lake if you generate or\nhave access to large volumes of data on\nan ongoing basis but don't want to be\nrestricted to specific or predefined use\ncases unlike data warehouses a data Lake\nwould retain all Source data without any\nexclusions and the data could include\nall types of data sources and types data\nLakes are sometimes also used as a\nstaging area of a data warehouse the\nmost important role of a data lake is in\npredictive and advanced Analytics\nnow we come to the process that is at\nthe heart of gaining value from data the\nextract transform and load process or\nETL\nETL is how raw data is converted into\nanalysis ready data it is an automated\nprocess in which you gather raw data\nfrom identified sources extract the\ninformation that aligns with your\nreporting and Analysis needs clean\nstandardize and transform that data into\na format that is usable in the context\nof your organization and load it into a\ndata repository while ETL is a generic\nprocess the actual job can be very\ndifferent in usage utility and\ncomplexity extract is the step where\ndata from Source locations is collected\nfor transformation data extraction could\nbe through batch processing meaning\nSource data is moved in large chunks\nfrom the source to the Target system at\nscheduled intervals tools for batch\nprocessing include Stitch and blendo\nstream processing which means Source\ndata is pulled in real time from the\nsource and transformed while it is in\ntransit and before it is loaded into the\ndata repository tools for stream\nprocessing include Apache samsa Apache\nstorm and Apache Kafka transform\ninvolves the execution of rules and\nfunctions that convert raw data into\nData that can be used for analysis for\nexample making date formats and units of\nmeasurement consistent across all Source\ndata removing duplicate data filtering\nout data that you do not need enriching\ndata for example splitting full name to\nFirst middle and last names establishing\nkey relationships across tables applying\nbusiness rules and data validations load\nis the step where process data is\ntransported to a destination system or\ndata repository it could be initial\nloading that is populating all the data\nin the Repository\nincremental loading that is applying\nongoing updates and modifications as\nneeded periodically or full refresh that\nis erasing contents of one or more\ntables and reloading with fresh data\nload verification which includes data\nchecks for missing or null values server\nperformance and monitoring load failures\nare important because of this process\nstep it is vital to keep an eye on load\nfailures and ensure the right recovery\nmechanisms are in place\nETL has historically been used for batch\nworkloads on a large scale however with\nthe emergence of streaming ETL tools\nthey are increasingly being used for\nreal-time streaming event data as well\nit's common to see the terms ETL and\ndata pipelines used interchangeably and\nalthough both move data from source to\ndestination data pipeline is a broader\nterm that encompasses the entire journey\nof moving data from one system to\nanother of which ETL is a subset data\npipelines can be architected for batch\nprocessing for streaming data and a\ncombination of batch and streaming data\nin the case of streaming data data\nprocessing or transformation happens in\na continuous flow this is particularly\nuseful for data that needs constant\nupdating such as data from a sensor\nmonitoring traffic a data pipeline is a\nhigh performing system that supports\nboth long-running batch queries and\nsmaller interactive queries the\ndestination for a data pipeline is\ntypically a data Lake although the data\nmay also be loaded to different Target\ndestinations such as another application\nor a visualization tool there are a\nnumber of data pipeline Solutions\navailable most popular among them being\nApache beam and data flow\n[Music]\nin this Digital World everyone leaves a\ntrace from our travel habits to our\nworkouts and entertainment the\nincreasing number of Internet connected\ndevices that we interact with on a daily\nbasis record vast amounts of data about\nus\nthere's even a name for it big data\nErnst young offers the following\ndefinition Big Data refers to the\ndynamic large and disparate volumes of\ndata being created by people tools and\nmachines it requires new Innovative and\nscalable technology to collect host and\nanalytically process the vast amount of\ndata gathered in order to derive\nreal-time business insights that relate\nto Consumers risk profit performance\nproductivity management and enhanced\nshareholder value\nthere is no one definition of big data\nbut there are certain elements that are\ncommon across the different definitions\nsuch as velocity volume variety veracity\nand value\nthese are the v's of Big Data\nvelocity is the speed at which data\naccumulates data is being generated\nextremely fast in a process that never\nstops\nnear or real-time streaming local and\ncloud-based Technologies can process\ninformation very quickly volume is the\nscale of the data or the increase in the\namount of data stored\ndrivers of volume are the increase in\ndata sources higher resolution sensors\nand scalable infrastructure\nvariety is the diversity of the data\nstructured data fits neatly into rows\nand columns in relational databases\nwhile unstructured data is not organized\nin a predefined way like tweets blog\nposts pictures numbers and video variety\nalso reflects that data comes from\ndifferent sources machines people and\nprocesses both internal and external to\norganizations\ndrivers or mobile technologies social\nmedia wearable Technologies\ngeotechnologies video and many many more\nveracity is the quality and origin of\ndata and its Conformity to facts and\naccuracy attributes include consistency\ncompleteness integrity and ambiguity\ndrivers include cost and the need for\ntraceability with the large amount of\ndata available the debate rages on about\nthe accuracy of data in the digital age\nis the information real or is it false\nvalue is our ability and need to turn\ndata into value value isn't just profit\nit may have medical or social benefits\nas well as customer employee or personal\nsatisfaction the main reason that people\ninvest time to understand big data is to\nderive value from it\nlet's look at some examples of the V's\nin action\nvelocity every 60 seconds hours of\nfootage are uploaded to YouTube which is\ngenerating data think about how quickly\ndata accumulates over hours days and\nyears\nvolume the world population is\napproximately 7 billion people and the\nvast majority are now using digital\ndevices mobile phones desktop and laptop\ncomputers wearable devices and so on\nthese devices all generate capture and\nstore data approximately 2.5 quintillion\nbytes every day that's the equivalent of\n10 million Blu-ray DVDs\nvariety let's think about the different\ntypes of data text pictures film Sound\nHealth Data from wearable devices and\nmany different types of data from\ndevices connected to the Internet of\nThings\nveracity eighty percent of data is\nconsidered to be unstructured and we\nmust devise ways to produce reliable and\naccurate insights the data must be\ncategorized analyzed and visualized\ndata scientists today derive insights\nfrom Big Data and cope with the\nchallenges that these massive data sets\npresent the scale of the data being\ncollected means that it's not feasible\nto use conventional data analysis tools\nhowever alternative tools that leverage\ndistributed computing power can overcome\nthis problem\ntools such as Apache spark Hadoop and\nits ecosystem provides ways to extract\nload analyze and process the data across\ndistributed compute resources providing\nnew insights and knowledge\nthis gives organizations more ways to\nconnect with their customers\nand enrich the services they offer\nso next time you strap on your\nSmartwatch unlock your smartphone or\ntrack your workout remember your data is\nstarting a journey that might take it\nall the way around the world through Big\nData analysis and back to you\nforeign\nthe big data processing Technologies\nprovide ways to work with large sets of\nstructured semi-structured and\nunstructured data so that the value can\nbe derived from Big Data\nin some of the other videos we discussed\nBig Data Technologies such as nosql\ndatabases and data lakes in this video\nwe are going to talk about three open\nsource Technologies and the role they\nplay in big data analytics Apache Hadoop\nApache Hive and Apache spark Hadoop is a\ncollection of tools that provides\ndistributed storage and processing of\nBig Data Hive is a data warehouse for\ndata query and Analysis built on top of\nHadoop\nspark is a distributed data analytics\nframework designed to perform complex\ndata analytics in real time Hadoop a\nJava based open source framework allows\ndistributed storage and processing of\nlarge data sets across clusters of\ncomputers in Hadoop distributed system a\nnode is a single computer and a\ncollection of nodes forms a cluster\nHadoop can scale up from a single node\nto any number of nodes each offering\nlocal storage and computation Hadoop\nprovides a reliable scalable and\ncost-effective solution for storing data\nwith no format requirements\nusing Hadoop you can incorporate\nemerging data formats such as streaming\naudio video social media sentiment and\nclick stream data along with structured\nsemi-structured and unstructured data\nnot traditionally used in a data\nwarehouse provide real-time self-service\naccess for all stakeholders optimize and\nstreamline costs in your Enterprise data\nwarehouse by consolidating data across\nthe organization and moving cold data\nthat is data that is not in frequent use\nto a Hadoop based system one of the four\nmain components of Hadoop is Hadoop\ndistributed file system or hdfs which is\na storage system for big data that runs\non multiple commodity Hardware connected\nthrough a network\nhdfs provides scalable and reliable big\ndata storage by partitioning files over\nmultiple nodes it splits large files\nacross multiple computers allowing\nparallel access to them computations can\ntherefore run in parallel on each node\nwhere data is stored it also replicates\nfile blocks on different nodes to\nprevent data loss making it fault\ntolerant let's understand this through\nan example consider a file that includes\nphone numbers for everyone in the United\nStates the numbers for people with last\nnames starting with an a might be stored\non server one B on server 2 and so on\nwith Hadoop pieces of this phone book\nwould be stored across the cluster to\nreconstruct the entire phone book your\nprogram would need the blocks from every\nserver in the cluster\nhdfs also replicates these smaller\npieces into two additional servers by\ndefault\nensuring availability when a server\nfails\nin addition to higher availability this\noffers multiple benefits it allows the\nHadoop cluster to break up work into\nsmaller chunks and run those jobs on all\nservers in the cluster for better\nscalability\nfinally you gain the benefit of data\nlocality which is the process of moving\nthe computation closer to the node on\nwhich the data resides this is critical\nwhen working with large data sets\nbecause it minimizes Network congestion\nand increases throughput\nsome of the other benefits that come\nfrom using hdfs include fast recovery\nfrom Hardware failures because hdfs is\nbuilt to detect faults and automatically\nrecover access to streaming data because\nhgfs supports High data throughput rates\naccommodation of large data sets because\nhdfs can scale to hundreds of nodes or\ncomputers in a single cluster\nportability because hdfs is portable\nacross multiple Hardware platforms and\ncompatible with a variety of underlying\noperating systems Hive is an open source\ndata warehouse software for reading\nwriting and managing large data set\nfiles that are stored directly in either\nhdfs or other data storage systems such\nas Apache hbase Hadoop is intended for\nlong sequential scans and because Hive\nis based on Hadoop queries have very\nhigh latency which means Hive is less\nappropriate for applications that need\nvery fast response times\nHive is not suitable for transaction\nprocessing that typically involves a\nhigh percentage of right operations\nHive is better suited for data\nwarehousing tasks such as ETL reporting\nand data analysis and includes tools\nthat enable easy access to data via SQL\nthis brings us to spark a general\npurpose data processing engine designed\nto extract and process large volumes of\ndata for a wide range of applications\nincluding interactive analytics streams\nprocessing machine learning data\nintegration and ETL\nit takes advantage of in-memory\nprocessing to significantly increase the\nspeed of computations and spilling to\ndisk only when memory is constrained\nspark has interfaces for major\nprogramming languages such as Java Scala\npython R and SQL it can run using its\nStandalone clustering technology as well\nas on top of other infrastructures such\nas Hadoop and it can access data in a\nlarge variety of data sources including\nhdfs And Hive making it highly versatile\nthe ability to process streaming data\nfast and perform complex analytics in\nreal time is the key use case for Apache\nSpark\n[Music]\nat this stage you have an understanding\nof the problem and the desired outcome\nyou know where you are and where you\nwant to be you also have a well-defined\nmetric you know what will be measured\nand how it will be measured the next\nstep is for you to identify the data you\nneed for your use case\nthe process of identifying data Begins\nby determining the information you want\nto collect in this step you make\ndecisions regarding the specific\ninformation you need and the possible\nsources for this data your goals\ndetermine the answers to these questions\nlet's take the example of a product\ncompany that wants to create targeted\nmarketing campaigns based on the age\ngroup that buys their products the most\ntheir goal is to design reach outs that\nappeal most to this segment and\nencourages them to further influence\ntheir friends and peers into buying\nthese products based on this use case\nsome of the obvious information that you\nwill identify includes the customer\nprofile purchase history location age\neducation profession income and marital\nstatus for example to ensure you gain\neven greater insights into this segment\nyou may also decide to collect the\ncustomer complaint data for this segment\nto understand the kind of issues they\nface because this could discourage them\nfrom recommending your products to know\nhow satisfied they were with the\nresolution of their issues you could\ncollect the ratings from their customer\nservice surveys taking this step forward\nyou may want to understand how these\ncustomers talk about your products on\nsocial media and how many of their\nconnections engage with them in these\ndiscussions for example the likes shares\nand comments their posts receive\nthe next step in the process is to\ndefine a plan for collecting data you\nneed to establish a time frame for\ncollecting the data you have identified\nsome of the data you need may be\nrequired on an ongoing basis and some\nover a defined period of time for\ncollecting website visitor data for\nexample you may need to have the numbers\nrefreshed in real time but if you're\ntracking data for a specific event you\nhave a definitive beginning and end date\nfor collecting the data in this step you\ncan also Define how much data would be\nsufficient for you to reach a credible\nanalysis is the volume defined by the\nsegment for example all customers within\nthe age range of 21 to 30 years or a\ndata set of a hundred thousand customers\nwithin the age range of 21 to 30\nyou can also use this step to define the\ndependencies risks mitigation plan and\nseveral other factors that are relevant\nto your initiative the purpose of the\nplan should be to establish the clarity\nyou need for execution\nthe third step in the process is for you\nto determine your data collection\nmethods in this step you will identify\nthe methods for collecting the data you\nneed you will Define how you will\ncollect the data from your data sources\nyou have identified such as internal\nsystems social media sites or\nthird-party data providers your methods\nwill depend on the type of data the time\nframe over which you need the data and\nthe volume of data once your plan and\ndata collection methods are finalized\nyou can Implement your data collection\nstrategy and start collecting data you\nwill be making updates to your plan as\nyou go along because conditions evolve\nas you implement the plan on the ground\nthe data you identify the source of that\ndata and the practices you employ for\nGathering the data have implications for\nQuality security and privacy none of\nthese are one-time considerations but\nare relevant through the life cycle of\nthe data analysis process\nworking with data from disparate sources\nwithout considering how it measures\nagainst the quality metric can lead to\nfailure in order to be reliable data\nneeds to be free of Errors accurate\ncomplete relevant and accessible you\nneed to define the quality traits the\nmetric and the checkpoints in order to\nensure that your analysis is going to be\nbased on quality data\nyou also need to watch out for issues\npertaining to data governance such as\nsecurity regulation and compliances data\ngovernance policies and procedures\nrelate to the usability integrity and\navailability of data penalties for\nnon-compliance can run into millions of\ndollars and can hurt The credibility of\nnot just your findings but also your\norganization\nanother important consideration is data\nprivacy data you collect needs to check\nthe boxes for confidentiality license\nfor use and compliance to mandated\nregulations checks validations and an\naudible Trail needs to be planned loss\nof trust in the data used for analysis\ncan compromise the process result in\nsuspect findings and invite penalties\nidentifying the right data is a very\nimportant step of the data analysis\nprocess done right it will ensure that\nyou are able to look at a problem from\nmultiple perspectives and your findings\nare credible and reliable\n[Music]\ndata sources can be internal or external\nto the organization and they can be\nprimary secondary or third-party sources\nof data let's look at a couple of\nexamples to understand what we mean by\nprimary secondary and third-party\nsources of data the term primary data\nrefers to information obtained directly\nby you from the source this could be\nfrom internal sources such as data from\nthe organization CRM HR or workflow\napplications it could also include data\nyou gather directly through surveys\ninterviews discussions observations and\nfocus groups\nsecondary data refers to information\nretrieved from existing sources such as\nexternal databases research articles\nPublications training material and\ninternet searches or financial records\navailable as public data this could also\ninclude data collected through\nexternally conducted surveys interviews\ndiscussions observations and focus\ngroups\nthird-party data is data you purchase\nfrom aggregators who collect data from\nvarious sources and combine it into\ncomprehensive data sets purely for the\npurpose of selling the data now we'll\nlook at some of the different sources\nfrom which you could be gathering data\ndatabases can be a source of primary\nsecondary and third-party data most\norganizations have internal applications\nfor managing their processes workflows\nand customers external databases are\navailable on a subscription basis or for\npurchase a significant number of\nbusinesses have or are currently moving\nto the cloud which is increasingly\nbecoming a source for accessing\nreal-time information and on-demand\ninsights the web is a source of publicly\navailable data that is available to\ncompanies and individuals for free or\ncommercial use the web is a rich source\nof data available in the public domain\nthese could include textbooks government\nrecords papers and articles that are for\npublic consumption social media sites\nand interactive platforms such as\nFacebook Twitter Google YouTube and\nInstagram are increasingly being used to\nSource user data and opinions businesses\nare using these data sources for\nquantitative and qualitative insights on\nexisting and potential customers\nsensor data produced by wearable devices\nsmart buildings smart cities smartphones\nmedical devices even household\nappliances is a widely used source of\ndata\ndata exchange is a source of third-party\ndata that involves the voluntary sharing\nof data between data providers and data\nconsumers individuals organizations and\ngovernments could be both data providers\nand data consumers the data that is\nexchanged could include data coming from\nbusiness applications sensor devices\nsocial media activity location data or\nconsumer Behavior data\nsurveys gather information through\nquestionnaires distributed to a select\ngroup of people for example gauging the\ninterest of existing customers and\nspending on an updated version of a\nproduct surveys can be web or\npaper-based census data is also a\ncommonly used source for Gathering\nhousehold data such as wealth and income\nor population data for example\ninterviews are a source for Gathering\nqualitative data such as the\nparticipants opinions and experiences\nfor example an interview conducted to\nunderstand the day-to-day challenges\nfaced by a customer service executive\ninterviews could be telephonic over the\nweb or face to face observation studies\ninclude monitoring participants in a\nspecific environment or while performing\na particular task for example observing\nusers navigate an e-commerce site to\nassess the ease with which they are able\nto find products and make a purchase\ndata from surveys interviews and\nobservation studies could be available\nas primary secondary and third-party\ndata data sources have never been as\nDynamic and diverse as they are today\nthey're also evolving continuously\nsupplementing your primary data with\nsecondary and third-party data sources\ncan help you explore problems and\nSolutions in new and meaningful ways\nforeign\n[Music]\nwe will learn about the different\nmethods and tools available for\nGathering data from the data sources\ndiscussed earlier in the course such as\ndatabases the web sensor data data\nexchanges and several other sources\nleveraged for specific data needs\nwe will also learn about importing data\ninto different types of data\nrepositories\nSQL or structured query language is a\nquerying language used for extracting\ninformation from relational databases\nSQL offers simple commands to specify\nwhat is to be retrieved from the\ndatabase the table from which it needs\nto be extracted grouping records with\nmatching values dictating the sequence\nin which the query results are displayed\nand limiting the number of results that\ncan be returned by the query amongst a\nhost of other features and\nfunctionalities\nnon-relational databases can be queried\nusing SQL or SQL like query tools some\nnon-relational databases come with their\nown querying tools such as cql for\nCassandra and graphql for neo4j\napplication programming interfaces or\napis are also popularly used for\nextracting data from a variety of data\nsources\napis are invoked from applications that\nrequire the data and access an endpoint\ncontaining the data endpoints can\ninclude databases web services and data\nmarketplaces apis are also used for data\nvalidation for example a data analyst\nmay use an API to validate postal\naddresses and zip codes\nweb scraping also known as screen\nscraping or web harvesting is used for\ndownloading specific data from web pages\nbased on defined parameters among other\nthings web scraping is used to extract\ndata such as text contact information\nimages videos podcasts and product items\nfrom a web property\nRSS feeds are another source typically\nused for capturing updated data from\nonline forums and new sites where data\nis refreshed on an ongoing basis\ndata streams are a popular source for\naggregating constant streams of data\nflowing from sources such as instruments\niot devices and applications and GPS\ndata from Cars data streams and feeds\nare also used for extracting data from\nsocial media sites and interactive\nplatforms\ndata exchange platforms allow the\nexchange of data between data providers\nand data consumers data exchanges have a\nset of well-defined exchange standards\nprotocols and formats relevant for\nexchanging data these platforms not only\nfacilitate the exchange of data but they\nalso ensure that security and governance\nare maintained they provide data\nlicensing workflows de-identification\nand protection of personal information\nlegal Frameworks and a quarantined\nanalytics environment\nexamples of popular data exchange\nplatforms include AWS data exchange\ncrunchbase low to me and snowflake\nnumerous other data sources can be\ntapped into for specific data needs for\nmarketing Trends and AD spending for\nexample research firms like Forester and\nBusiness Insider are known to provide\nreliable data research and advisory\nfirms such as Gartner and Forrester are\nwidely trusted sources for strategic and\noperational guidance\nsimilarly there are many trusted names\nin the areas of user Behavior data\nmobile and web usage Market surveys and\ndemographic studies\ndata that has been identified and\ngathered from various data sources now\nneeds to be loaded or imported into a\ndata repository before it can be\nwrangled mined and analyzed the\nimporting process involves combining\ndata from different sources to provide a\ncombined View and a single interface\nusing which you can query and manipulate\nthe data depending on the data type the\nvolume of data and the type of\ndestination repository you may need\nvarying tools and methods\nspecific data repositories are optimized\nfor certain types of data relational\ndatabases store structured data with a\nwell-defined schema if you're using a\nrelational database as the destination\nsystem you will only be able to store\nstructured data such as data from oltp\nsystems spreadsheets online forms\nsensors Network and web logs structured\ndata can also be stored in nosql\nsemi-structured data is data that has\nsome organizational properties but not a\nrigid schema such as data from emails\nXML zipped files binary executables and\nTCP or IP protocols\nsemi-structured can be stored in no SQL\nclusters XML and Json are commonly used\nfor storing and exchanging\nsemi-structured data Json is also the\npreferred data type for web services\nunstructured data is data that does not\nhave a structure and cannot be organized\ninto a schema such as data from web\npages social media feeds images videos\ndocuments media logs and surveys no SQL\ndatabases and data Lakes provide a good\noption to store and manipulate large\nvolumes of unstructured data data Lakes\ncan accommodate all data types and\nschema\nETL tools and data pipelines provide\nautomated functions that facilitate the\nprocess of importing data tools such as\ntalent and Informatica and programming\nlanguages such as Python and R and their\nlibraries are widely used for importing\ndata\nforeign\n[Music]\ndata wrangling also known as data\nmunging is an iterative process that\ninvolves data exploration transformation\nvalidation and making it available for a\ncredible and meaningful analysis\nit includes a range of tasks involved in\npreparing raw data for a clearly defined\npurpose where raw data at this stage is\ndata that has been collected through\nvarious data sources in a data\nRepository\ndata wrangling captures a range of tasks\ninvolved in preparing data for analysis\ntypically it is a four-step process that\ninvolves Discovery transformation\nvalidation and Publishing\nthe discovery phase also known as the\nexploration phase is about understanding\nyour data better with respect to your\nuse case the objective is to figure out\nspecifically how best you can clean\nstructure organize and map the data you\nhave for your use case\nthe next phase which is the\ntransformation phase forms the bulk of\nthe data wrangling process it involves\nthe tasks you undertake to transform the\ndata such as structuring normalizing\ndenormalizing cleaning and enriching the\ndata\nlet's begin with the First\nTransformation task structuring this\ntask includes actions that change the\nform and schema of your data the\nincoming data can be in varied formats\nyou might for example have some data\ncoming from a relational database and\nsome data from web apis in order to\nmerge them you will need to change the\nform or schema of your data this change\nmay be as simple as changing the order\nof fields within a record or data set or\nas complex as combining Fields into\ncomplex structures\njoins and unions are the most common\nstructural transformations used to\ncombine data from one or more tables how\nthey combine the data is different joins\ncombine columns when two tables are\njoined together columns from the First\nSource table are combined with columns\nfrom the Second Source table in the same\nrow so each row in the resultant table\ncontains columns from both tables\nunions combine rows rows of data from\nthe First Source table are combined with\nrows of data from the Second Source\ntable into a single table each row in\nthe resultant table is from One Source\ntable or another\ntransformation can also include\nnormalization and denormalization of\ndata normalization focuses on cleaning\nthe database of unused data and reducing\nredundancy and inconsistency data coming\nfrom transactional systems for example\nwhere a number of insert update and\ndelete operations are performed on an\nongoing basis are highly normalized\ndenormalization is used to combine data\nfrom multiple tables into a single table\nso that it can be queried faster\nfor example normalized data coming from\ntransactional systems is typically\ndenormalized before running queries for\nreporting and Analysis\nanother transformation type is cleaning\ncleaning tasks are actions that fix\nirregularities in data in order to\nproduce a credible and accurate analysis\ndata that is inaccurate missing or\nincomplete can skew the results of your\nanalysis and need to be considered\nit could also be that the data is biased\nor has null values in relevant fields or\nhave outliers for example you may want\nto find out the demographic information\non the sale of a certain product but the\ndata you have received does not capture\nthe gender you either need to Source\nthis data point and merge it with your\nexisting data set or you may need to\nremove and not consider the records with\nthis missing field we will explore many\nmore examples of data cleaning further\non in this course\nenriching the data is the fourth type of\ntransformation when you consider the\ndata you have to look at additional data\npoints that could make your analysis\nmore meaningful you are looking at\nenriching your data for example in a\nlarge organization with information\nfragmented across systems you may need\nto enrich the data set provided by one\nsystem with information available in\nother systems or even public data sets\nconsider a scenario where you sell it\nperipherals to businesses and want to\nanalyze the buying patterns of your\ncustomers over the last five years\nyou have the customer master and\ntransaction tables from where you've\ncaptured the customer information and\npurchase history\nsupplementing your data set with the\nperformance data of these businesses\npossibly available as a public data set\ncould be valuable for you to understand\nfactors influencing their purchase\ndecisions\ninserting metadata also enriches data\nfor example Computing a sentiment score\nfrom a customer feedback log collecting\ngeo-based weather data from a Resort's\nlocation to analyze occupancy Trends or\ncapturing published time and tags for a\nblog post\nafter transformation the next phase in\ndata wrangling is validation this is\nwhere you check the quality of the data\npost structuring normalizing cleaning\nand enriching validation rules refer to\nrepetitive programming steps used to\nverify the consistency quality and\nsecurity of the data you have\nthis brings us to publishing the fourth\nphase of the data wrangling process\npublishing involves delivering the\noutput of the wrangled data for\nDownstream project needs\nwhat is published is the transformed and\nvalidated version of the input data set\nalong with the metadata about the data\nset\nlastly it is important to note the\ncriticality of documenting the steps and\nconsiderations you have taken to convert\nthe raw data to analysis ready data All\nPhases of data wrangling are iterative\nin nature in order to replicate the\nsteps and to revisit your considerations\nfor performing these steps it is vital\nthat you document all considerations and\nactions\n[Music]\n[Music]\nthank you in this video we will look at\nsome of the popularly used data\nwrangling software and tools such as\nExcel power query or spreadsheets open\nrefine Google data prep Watson Studio\nRefinery Trifecta Wrangler Python and r\nlet's begin with the most basic software\nused for manual wrangling spreadsheets\nspreadsheets such as Microsoft Excel and\nGoogle Sheets have a host of features\nand inbuilt formulas that can help you\nidentify issues clean and transform data\nadd-ins are available that allow you to\nimport data from several different types\nof sources and clean and transform data\nas needed such as Microsoft power query\nfor Excel and Google Sheets query\nfunction for Google Sheets\nopen refine is an open source tool that\nallows you to Import and Export data in\na wide variety of formats such as tsv\nCSV XLS XML and Json\nusing open refine you can clean data\ntransform it from one format to another\nand extend data with web services and\nexternal data\nopen refine is easy to learn and easy to\nuse\nit offers menu-based operations which\nmeans you don't need to memorize\ncommands or syntax\nGoogle data prep is an intelligent cloud\ndata service that allows you to visually\nexplore clean and prepare both\nstructured and unstructured data for\nanalysis\nit is a fully managed service which\nmeans you don't need to install or\nmanage the software or the\ninfrastructure\ndata prep is extremely easy to use with\nevery addition that you take you get\nsuggestions on what your ideal Next Step\nshould be\ndataprep can automatically detect\nschemas data types and anomalies\nWatson Studio Refinery available via IBM\nWatson Studio allows you to discover\ncleanse and transform data with built-in\noperations\nit transforms large amounts of raw data\ninto consumable quality information\nthat's ready for Analytics\ndata Refinery offers the flexibility of\nexporting data resigning in a spectrum\nof data sources\nit detects data types and\nclassifications automatically and also\nenforces applicable data governance\npolicies automatically\ntrifacta Wrangler is an interactive\ncloud-based service for cleaning and\ntransforming data it takes messy\nreal-world data and cleans and\nrearranges it into data tables which can\nthen be exported to excel Tableau and r\nit is known for its collaboration\nfeatures allowing multiple team members\nto work simultaneously\npython has a huge library and set of\npackages that offer powerful data\nmanipulation capabilities\nlet's look at a few of these libraries\nand packages\nJupiter notebook is an open source web\napplication widely used for data\ncleaning and transformation statistical\nmodeling also data visualization\nnumpy or numerical python is the most\nbasic package that python offers it is\nfast versatile interoperable and easy to\nuse it provides support for large\nmulti-dimensional arrays and matrices\nand high-level mathematical functions to\noperate on these arrays\npandas is designed for fast and easy\ndata analysis operations it allows\ncomplex operations such as merging\njoining and transforming huge chunks of\ndata performed using simple single line\ncommands using pandas you can prevent\ncommon errors that result from\nmisaligned data coming in from different\nsources\nR also offers a series of libraries and\npackages that are explicitly created for\nwrangling messy data such as D plier\ndata table and Json Lite\nusing these libraries you can\ninvestigate manipulate and analyze data\nd-plier is a powerful library for data\nwrangling it has a precise and\nstraightforward syntax\ndata table helps you aggregate large\ndata sets quickly\nJason light is a robust Jason parsing\ntool great for interacting with web apis\ntools for data wrangling come with\nvarying capabilities and dimensions your\ndecision regarding the best tool for\nyour needs will depend on factors that\nare specific to your use case\ninfrastructure and teams such as\nsupported data size data structures\ncleaning and transformation capabilities\ninfrastructure needs ease of use and\nlearnability\nforeign\n[Music]\n[Music]\nto Gartner report on data quality poor\nquality data weekends and organization's\ncompetitive standing and undermines\ncritical business objectives missing\ninconsistent or incorrect data can lead\nto false conclusions and therefore\nineffective decisions and in the\nbusiness world that can be costly\ndata sets picked up from disparate\nsources could have a number of issues\nincluding missing values inaccuracies\nduplicates incorrect or missing\ndelimiters inconsistent records and\ninsufficient parameters in some cases\ndata can be corrected manually or\nautomatically with the help of data\nwrangling tools and scripts but if it\ncannot be repaired it must be removed\nfrom the data set\nalthough the terms data cleaning and\ndata wrangling are sometimes used\ninterchangeably it is important to keep\nin mind that data cleaning is only a\nsubset of the entire data wrangling\nprocess\ndata cleaning forms a very significant\nand integral part of the transformation\nphase in a data wrangling workflow\na typical data cleaning workflow\nincludes Inspection Cleaning and\nverification\nthe first step in the data cleaning\nworkflow is to detect the different\ntypes of issues and errors that your\ndata set may have you can use scripts\nand tools that allow you to define\nspecific rules and constraints and\nvalidate your data against these rules\nand constraints\nyou can also use data profiling and data\nvisualization tools for inspection\ndata profiling helps you to inspect the\nsource data to understand the structure\ncontent and interrelationships in your\ndata\nit uncovers anomalies and data quality\nissues\nfor example blank or null values\nduplicate data or whether the value of a\nfield Falls within the expected range\nvisualizing the data using statistical\nmethods can help you to spot outliers\nfor example plotting the average income\nin a demographic data set can help you\nspot outliers\nthat brings us to the actual cleaning of\nthe data the techniques you apply for\ncleaning your data set will depend on\nthe use case and the type of issues you\nencounter\nlet's look at some of the more common\ndata issues\nlet's start with missing values missing\nvalues are very important to deal with\nas they can cause unexpected or biased\nresults you can choose to filter out the\nrecords with missing values or find a\nway to source that information in case\nit is intrinsic to your use case\nfor example missing age data from a\ndemographic study a third option is a\nmethod known as imputation which\ncalculates the missing value based on\nstatistical values your decision on the\ncourse of action you choose needs to be\nanchored in what's best for your use\ncase\nyou may also come across duplicate data\ndata points that are repeated in your\ndata set these need to be removed\nanother type of issue you may encounter\nis that of irrelevant data data that\ndoes not fit within the context of your\nuse case can be considered irrelevant\ndata for example if you are analyzing\ndata about the General Health of a\nsegment of the population their contact\nnumbers may not be relevant for you\ncleaning can involve data type\nconversion as well this is needed to\nensure that values in a field are stored\nas the data type of that field for\nexample numbers stored as numerical data\ntype or dates stored as a date data type\nyou may also need to clean your data in\norder to standardize it for example for\nStrings you may want all values to be in\nlower case similarly date formats and\nunits of measurement need to be\nstandardized\nand there may be syntax errors for\nexample white spaces or Extra Spaces at\nthe beginning or end of a string is a\nsyntax error that needs to be rectified\nthis can also include fixing typos or\nformat for example the state name being\nentered as a full form such as New York\nversus an abbreviated form such as NY in\nsome records\ndata can also have outliers or values\nthat are vastly different from other\nobservations in the data set outliers\nmay or may not be incorrect for example\nwhen an age field in a voters database\nhas the value 5 you know it is incorrect\ndata and needs to be corrected now let's\nconsider a group of people where the\nannual income is in the range of one\nhundred thousand to two hundred thousand\ndollars except for that one person who\nearns a million dollars a year while the\ndata point is not incorrect it is an\noutlier and needs to be looked at\ndepending on your use case you may need\nto decide if including this data will\nskew the results in a way that does not\nserve your use case\nthis brings us to the next step in the\ndata cleaning workflow verification\nin this step you inspect the results to\nestablish Effectiveness and accuracy\nachieved as a result of the data\ncleaning operation you need to\nre-inspect the data to make sure the\nrules and constraints applicable on the\ndata still hold after the corrections\nyou made\nand in the end it is important to note\nthat all changes undertaken as part of\nthe data cleaning operation need to be\ndocumented not just the changes but also\nthe reasons behind making those changes\nand the quality of the currently stored\ndata reporting how healthy the data is\nis a very crucial step\n[Music]\nthank you\nin this segment data professionals share\nwhat portion of their job involves\nGathering cleaning and preparing data\nfor analysis\nI would say a relatively big proportion\nof my job involves Gathering preparing\nand cleaning data for analysis I work at\na company with a really great data\nengineering team so I don't have to do\nthis kind of work as much as some other\ndata scientists do but still any person\nthat is working closely with data be\nthey a data scientist a data analyst a\nmachine learning engineer really needs\nto get comfortable understanding where\nthe data comes from and inevitably no\ndata set is perfect there's always going\nto be compromises or small errors so\nit's really important to spend a\nsignificant portion of your time\nunderstanding the underlying data that\nwas used to generate the data set and\nwhat some potential problems might be\nwith that data my job as a CPA involves\na lot of analysis financial statements\naccount activity assessing processes and\ncontrols the Gathering piece can be\npretty simple as long as the accounting\ninformation resides in a general ledger\nsystem or a central repository where the\ndata is easy to gather\n[Music]\nso you need to prep the data make sure\nit's accurate make sure things are\nadding up make sure you have all all\nmonths of information so for example in\nthe financial statement I need to make\nsure that people have given me 12 months\nworth of make statements and I'm not I'm\nnot missing any data and that if I am\nthat I have enough information to be\nable to project or to\nforecast or even to look back to\nestimate what was done in that month\nbased on what I have and so that is that\nis definitely how\nthis segment data professionals talk\nabout the steps they take to ensure data\nis reliable\none of the essential steps to making\nsure your data is reliable is to run\nsummary statistics on individual columns\nin your data and make sure that they're\nuh consistent with reality so for\nexample if you have a column somewhere\nthat records visits per month to a\nwebsite and you run summary statistics\non that column you get the minimum the\nmean the median the Max\nand you see something funky like one\nmonth there's negative visits or\nsomething like this you know the data\nisn't reliable\nfinancial information in particular must\nbe reliable it must be non-biased it\nmust be free from error those are just a\nfew of the many attributes that are\nnecessary for data to be relied upon so\ndoing what I call a a logic check before\nyou get into the details of a\ntransaction does it make sense at a high\nlevel if you expected\ntop line revenue to increase but you see\nthat it has drastically decreased then\nfigure that part out first is my source\ncorrect am I running a query in the\nright period am I pulling the right\ngeneral ledger account\nso start there make sure the basic data\nIntegrity questions have been addressed\nfirst once we know that the data is\nreliable then we can start to Deep dive\ninto the reviews and form conclusions\nabout the financial performance based on\nour analysis of the data\n[Music]\nbefore we understand statistical\nanalysis its relation to data analysis\nand specifically data mining let's first\nexamine what statistics is statistics is\na branch of mathematics dealing with the\ncollection analysis interpretation and\npresentation of numerical or\nquantitative data\nit's all around us in our day-to-day\nlives whether we're talking about\naverage income average age or highest\npaid professions it's all statistics\ntoday's statistics is being applied\nacross Industries for decision making\nBased on data for example researchers\nusing statistics to analyze data from\nthe production of vaccines to ensure\nsafety and efficacy\nor companies using statistics to reduce\ncustomer churn by gaining greater\ninsight into customer requirements\nnow let's look at what statistical\nanalysis is statistical analysis is the\napplication of statistical methods to a\nsample of data in order to develop an\nunderstanding of what that data\nrepresents it includes collecting and\nscrutinizing every data sample in a set\nof items from which samples can be drawn\na sample in statistics is a\nrepresentative selection drawn from a\ntotal population where population is a\ndiscrete group of people or things that\ncan be identified by at least one common\ncharacteristic for purposes of data\ncollection and Analysis\nfor example in a certain use case\npopulation may be all people in a state\nthat have a driving license and a sample\nof this population that is a part or\nsubset of the population could be men\ndrivers over the age of 50. statistical\nmethods are mainly useful to ensure that\ndata is interpreted correctly and\napparent relationships are meaningful\nand Not Just Happening by chance\nwhenever we collect data from a sample\nthere are two different types of\nStatistics we can run descriptive\nstatistics to summarize information\nabout the sample and inferential\nstatistics to make inferences or\ngeneralizations about the broader\npopulation\ndescriptive statistics enables you to\npresent data in a meaningful way\nallowing simpler interpretation of the\ndata data is described using summary\ncharts tables and graphs without any\nattempts to draw conclusions about the\npopulation from which the sample is\ntaken\nthe objective is to make it easier to\nunderstand and visualize raw data\nwithout making conclusions regarding any\nhypotheses that were made\nfor example we want to describe the\nEnglish test scores in a specific class\nof 25 students we record the test scores\nof all students calculate the summary\nstatistics and produce a graph\nsome of the common measures of\ndescriptive statistical analysis include\ncentral tendency dispersion and skewness\ncentral tendency is locating the center\nof a data sample some of the common\nmeasures of central tendency include\nmean median and mode these measures tell\nyou where most values in your data set\nfall so in the earlier example the mean\nscore or the mathematical average of the\nclass of 25 students would be the sum\ntotal of the scores of all 25 students\ndivided by 25 that is the number of\nstudents\nif you order the above data set from the\nsmallest score value to the highest\nscore value of the 25 students and pick\nthe middle value\nthat is the value with 12 values to the\nleft and 12 values to the right of a\nscore value that score value would be\nthe median for this data set\nif 12 students have scored less than 75\npercent and 12 students have scored\ngreater than 75 percent then the median\nis 75.\nmedian is unique for each data set and\nis not affected by outliers\nmode is the value that occurs most\nfrequently in a set of observations for\nexample if the most common score in this\ngroup of 25 students is 72 percent then\nthat is the mode for this data set so\nyou can see how looking at your data set\nthrough these values can help you get a\nclear understanding of your data set\ndispersion is the measure of variability\nin a data set common measures of\nstatistical dispersion are variance\nstandard deviation and range\nvariance defines how far away the data\npoints fall from the center that is the\ndistribution of values when a\ndistribution has lower variability the\nvalues in a data set are more consistent\nhowever when the variability is higher\nthe data points are more dissimilar and\nextreme values become more likely\nunderstanding variability can help you\ngrasp the likelihood of an event\nhappening\nstandard deviation tells you how tightly\nyour data is clustered around the mean\nand range gives you the distance between\nthe smallest and largest values in your\ndata sets\nskewness is the measure of whether the\ndistribution of values is symmetrical\naround a central value or skewed left or\nright\nskewed data can affect which types of\nanalyzes are valid to perform\nthese are some of the basic and most\ncommon used descriptive statistic tools\nbut there are other tools as well for\nexample using correlation and Scatter\nPlots to assess the relationships of\npaired data\nthe second type of statistical analysis\nis inferential statistics inferential\nstatistics takes data from a sample to\nmake inferences about the larger\npopulation from which the sample was\ndrawn\nusing methods of inferential statistics\nyou can draw generalizations that apply\nthe results of the sample to the\npopulation as a whole some common\nmethodologies of inferential statistics\ninclude hypothesis testing confidence\nintervals and regression analysis\nhypothesis testing for example can be\nused for studying the effectiveness of a\nvaccine by comparing outcomes in a\ncontrol group\nhypothesis tests can tell you whether\nthe efficacy of a vaccine observed in a\ncontrol group is likely to exist in the\npopulation as well\nconfidence intervals incorporate the\nuncertainty and Sample error to create a\nrange of values the actual population\nvalue is likely to fall Within\nregression analysis incorporates\nhypothesis tests that help determine\nwhether the relationships observed in\nthe sample data actually exist in the\npopulation rather than just the sample\nthere are various software packages to\nperform statistical data analysis such\nas statistical analysis system or SAS\nstatistical package for the social\nsciences or SPSS and statsoft\nstatistics form the core of data mining\nby providing measures and methodologies\nnecessary for data mining and\nidentifying patterns that help identify\ndifferences between random noise and\nsignificant findings\nboth data mining which we will learn\nmore about in this course and statistics\nas techniques of data analysis help in\nbetter decision making\n[Music]\nthank you\ndata mining or the process of extracting\nKnowledge from data is the heart of the\ndata analysis process it is an\ninterdisciplinary field that involves\nthe use of pattern recognition\nTechnologies statistical analysis and\nmathematical techniques its goal is to\nidentify correlations and data find\npatterns and variations understand\nTrends and predict probabilities\nyou'll hear about patterns and Trends\nfrequently in the context of data\nanalysis so let's first understand these\nConcepts\npattern recognition is the discovery of\nregularities or commonalities in data\nconsider the log data for logins to an\napplication in an organization it\ncontains information such as the\nusername login timestamp time spent in\neach login session and activities\nperformed\nwhen we analyze this data to gain\ninsights into the habits or behaviors of\nusers for example the time of the day\nwhen maximum users tend to log in or\nuser roles that typically spend the\nmaximum hours logged into the\napplication or modules in the workflow\napplication that are being used\nwe're examining the data manually or\nthrough tools to uncover patterns hidden\nin the data\na trend on the other hand is the general\ntendency of a set of data to change over\ntime for example global warming in the\nshort term like a year-on-year basis\ntemperatures May remain the same or go\nup or down by a few degrees but the\noverall global temperatures continue to\nincrease over time making global warming\na trend\ndata mining has applications across\nIndustries and disciplines for example\nprofiling customer behaviors needs and\ndisposable income in order to offer\ntargeted campaigns financial\ninstitutions tracking customer\ntransactions for unusual behaviors and\nflagging fraudulent transactions using\ndata mining models\nthe use of statistical models to predict\na patient's likelihood for specific\nhealth conditions and prioritizing\ntreatment\naccessing performance data of students\nto predict achievement levels and make a\nfocused effort to provide support where\nrequired\nhelping investigation agencies deploy\npolice force where the likelihood of\ncrime is higher and aligning Supply and\nLogistics with demand forecasts\nthere are several techniques you can use\nto detect patterns and build accurate\nmodels for Discovery be it descriptive\ndiagnostic predictive or prescriptive\nmodeling let's understand some of the\nmost commonly used techniques\nclassification is a technique that\nclassifies attributes into Target\ncategories for example classifying\ncustomers into low medium or high\nSpenders based on how much they earn\nclustering is similar to classification\nbut involves grouping data into clusters\nso they can be treated as groups for\nexample clustering customers based on\ngeographic regions\nanomaly or outlier detection is a\ntechnique that helps find patterns and\ndata that are not normal or unexpected\nfor example spikes in the usage of a\ncredit card that can flag possible\nmisuse\nAssociation rule mining is a technique\nthat helps establish a relationship\nbetween two data events for example the\npurchase of a laptop being frequently\naccompanied by the purchase of a cooling\npad\nsequential patterns is the technique\nthat traces a series of events that take\nplace in a sequence for example tracing\na customer's shopping trail from the\ntime they log into an online store to\nthe time they log out\nAffinity grouping is a technique used to\ndiscover co-occurrence in relationships\nthis technique is widely used in online\nstores for cross-selling and upselling\ntheir products by recommending products\nto People based on the purchase history\nof other people who purchase the same\nitem\ndecision trees help build classification\nmodels in the form of a tree structure\nwith multiple branches where each branch\nrepresents a probable occurrence this\ntechnique helps to build a clear\nunderstanding of the relationship\nbetween input and output\nregression is a technique that helps\nidentify the nature of the relationship\nbetween two variables which could be\ncausal or correlational for example\nbased on factors such as location and\ncovered area a regression model could be\nused to predict the value of a house\ndata mining essentially helps separate\nthe noise from the real information and\nhelps businesses Focus their energies on\nonly what is relevant\n[Music]\nin this video we will learn about some\nof the commonly used software and tools\nfor data mining such as spreadsheets R\nlanguage python IBM SPSS statistics IBM\nWatson studio and SAS\nspreadsheets such as Microsoft Excel and\nGoogle Sheets are commonly used for\nperforming basic data mining tasks\nspreadsheets can be used to host data\nthat has been exported from other\nsystems in an easily accessible and easy\nto read format\nyou can pivot tables to Showcase\nspecific aspects of your data which is\nvital when you have huge amounts of data\nto sort through and analyze they also\nmake it relatively easier to make\ncomparisons between different sets of\ndata\nadd-ins available for Excel such as the\ndata mining client for Excel Excel Miner\nand knowledge Miner for Excel allow you\nto perform common mining tasks such as\nclassification regression Association\nrules clustering and model building\nGoogle Sheets also has an array of\nadd-ons that can be used for analysis\nand Mining such as text analysis text\nMining and Google Analytics\nR is one of the most widely used\nlanguages for performing statistical\nmodeling and computations by\nstatisticians and data miners R is\npackaged with hundreds of libraries\nexplicitly built for data mining\noperations such as regression\nclassification data clustering\nAssociation rule mining text mining\noutlier detection and social network\nanalysis some of the popular R packages\ninclude TM and Twitter\nTM a framework for text mining\napplications within R provides functions\nfor text mining Twitter provides a\nframework for mining tweets our studio\nis a popularly used open source\nintegrated development environment or\nIDE for working with the r programming\nlanguage\npython libraries like pandas and numpy\nare commonly used for data mining pandas\nis an open source module for working\nwith data structures and Analysis it is\npossibly one of the most popular\nlibraries for data analysis in Python it\nallows you to upload data in any format\nand provides a simple platform to\norganize sort and manipulate that data\nusing pandas you can perform basic\nnumerical computations such as mean\nmedian mode and range\ncalculate statistics and answer\nquestions regarding correlation between\ndata and distribution of data explore\ndata visually and quantitatively\nvisualize data with help from other\npython libraries numpy is a tool for\nmathematical Computing and data\npreparation in Python numpy offers a\nhost of built-in functions and\ncapabilities for data mining Jupiter\nnotebooks have become the tool of choice\nfor data scientists and data analysts\nwhen working with python to perform Data\nMining and statistical analysis\nSPSS stands for statistical process for\nsocial sciences while the name suggests\nits original usage in the field of\nsocial sciences it is popularly used for\nadvanced analytics text analytics Trend\nanalysis validation of assumptions and\ntranslation of business problems into\ndata science Solutions\nSPSS is closed source and requires a\nlicense for use SPSS has an easy to use\ninterface that requires minimal coding\nfor complex tasks it comprises of\nefficient data management tools and is\npopular because of its in-depth analysis\ncapabilities and accurate data results\nIBM Watson Studio included in the IBM\nCloud pack for data leverages a\ncollection of Open Source tools such as\nJupiter notebooks and extends them with\nclosed Source IBM tools that make it a\npowerful environment for data analysis\nand data science it is available through\na web browser on the public Cloud\nprivate cloud and as a desktop app\nWatson Studio enables team members to\ncollaborate on projects that can range\nfrom simple exploratory analysis to\nbuilding machine learning and AI models\nit also includes SPSS modeler flows that\nenable you to quickly develop predictive\nmodels for your business data\nSAS Enterprise Miner is a comprehensive\ngraphical workbench for data mining it\nprovides powerful capabilities for\ninteractive data exploration which\nenables users to identify relationships\nwithin data SAS can manage information\nfrom various sources mine and transform\ndata and analyze statistics it offers a\ngraphical user interface for\nnon-technical users with SAS you can\nidentify patterns in the data using a\nrange of available modeling techniques\nexplore relationships and anomalies in\ndata analyze Big Data validate the\nreliability of findings from the data\nanalysis process SAS is very easy to use\nbecause of its syntax and is also easy\nto debug it has the ability to handle\nlarge databases and offers high security\nto its users\nin this video we have learned about just\na few of the data mining tools available\ntoday your decision regarding the best\ntool for your needs will be driven by\nthe data size and structure the tool\nsupports the features it offers its data\nvisualization capabilities\ninfrastructure needs ease of use and\nlearnability it's fairly common to use a\ncombination of data mining tools to meet\nall your needs\n[Music]\nthank you\nthe data analysis process begins with\nunderstanding the problem that needs to\nbe solved and the desired outcome that\nneeds to be achieved and it ends with\ncommunicating the findings in ways that\nimpact decision making\ndata projects are the result of a\ncollaborative effort spread across\nbusiness functions involving people with\nmulti-disciplinary skills with the\nfindings being incorporated into a\nlarger business initiative the success\nof your communication depends on how\nwell others can understand and trust\nyour insights to take further action so\nas data analysts you need to tell the\nstory with your data by visualizing the\ninsights clearly and creating a\nstructured narrative explicitly targeted\nat your audience before you begin to\ncreate the communication you need to\nreconnect with your audience Begin by\nasking yourself these questions who is\nmy audience what is important to them\nwhat will help them trust me your\naudience is mostly going to be a diverse\ngroup in terms of the business functions\nthey represent whether they play an\noperational or strategic role in the\norganization how impacted are they by\nthe problem and other such factors\nyour presentation needs to be framed\naround the level of information your\naudience already has based on your\nunderstanding of the audience you will\ndecide what and how much information is\nessential to enable a better\nunderstanding of your findings it's\ntempting to bring out all the data that\nyou've been working with but you have to\nconsider what pieces are more important\nto your audience than others a\npresentation is not a data dump facts\nand figures alone do not influence\ndecisions and move people to action you\nhave to tell a compelling story include\nonly that information as is needed to\naddress the business problem too much\ninformation will have your audience\nstruggling to understand the point\nyou're making begin your presentation by\ndemonstrating your understanding of the\nbusiness problem to your audience it's\neasy to fall back on the assumption that\nwe all know what we're here for but\nreflecting your understanding of the\nproblem that needs to be solved and the\nout outcome that needs to be achieved is\na great first step in winning their\nattention and starting with trust\nspeaking in the language of your\norganization's business domain is\nanother important factor in building a\nconnection between you and your audience\nthe next step in designing your\ncommunication is to structure and\norganize your presentation for Maximum\nImpact reference the data you have\ncollected remember that the data the\nvery basis of everything that you are\ncommunicating is like a black box for\nthe audience if you're unable to\nestablish The credibility of your data\npeople don't know that they can trust\nyour findings share your data sources\nhypotheses and validations work towards\nestablishing credibility of your\nfindings along the way don't gloss over\nany key assumptions made during the\nanalysis organize information into\nlogical categories based on the\ninformation you have do you have both\nqualitative and quantitative information\nfor example be deliberate in taking a\ntop-down or bottom-up approach in your\nnarrative both can be effective depends\non your audience and use case be\nconsistent in your approach it's\nimportant to determine what\ncommunication formats will be most\nuseful to your audience do they need to\ntake away an executive summary a fact\nsheet or a report how is your audience\ngoing to use the information you have\npresented that should determine the\nformats you choose insights must be\nexplained in a way that inspires action\nif your audience doesn't grasp the\nsignificance of your Insight or are\nunconvinced of its utility the Insight\nwill not drive any value a thousand word\nessay will not have the same impact as a\nvisual in creating a clear mental image\nin the minds of your audience\na powerful visualization tells a story\nthrough the graphical depiction of facts\nand figures data visualizations graphs\ncharts diagrams are a great way to bring\ndata to life whether you're showing a\ncomparison a relationship distribution\nor composition you have tools that can\nhelp you show patterns and conclusions\nabout hypotheses data has value through\nthe stories that it tells your audience\nmust be able to trust you understand you\nand relate to your findings and insights\nby establishing credibility of your\nfindings presenting the data within a\nnarrative and supporting it through\nVisual Impressions you can help your\naudience Drive valuable insights foreign\n[Music]\nwe will listen to data professionals\ntalk about the role storytelling plays\nin the life of a data analyst\nthe role of Storytelling in a data\nanalyst life cannot be overstated it is\nsuper critical to get really good at\nstorytelling with data I think humans\nnaturally understand the world through\nstories so if you're trying to convince\nanyone to do anything with data the\nfirst thing you have to do is tell a\nclear concise compelling story I also\nthink it can be really useful for the\ndata analysts to develop a story anytime\nthey're working with a data set to help\nthemselves under better understand the\nunderlying data set and what it's uh\nwhat it's doing there's always going to\nbe a balance between telling a clear\ncoherent Simple Story and making sure\nyou're conveying all the complexities\nthat you might find within the data and\nI think finding that balance can be\nreally challenging but is really\ncritical The Art of Storytelling is\nsignificant effect the life of a data\nanalyst it doesn't matter how much or\nwhat wonderful information you've come\nup with if you can't find a way to\ncommunicate that to your audience\nwhether it's the consumer or a director\nlevel or executive level person then\nit's for not you have to find a way to\ncommunicate that and it's usually best\nto do it in a visual or through telling\na story so that they understand how that\ninformation can be useful I have to say\nstorytelling is essential skill set\nit's like the last Mile in delivery\na lot of people can handle the technical\nside through a short period of training\nhowever the ability to extract value\nfrom data and to communicate it is\nensure Supply if you think about the\nlong-term career I think it's very\ncritical to know how to tell a\ncompelling story with data storytelling\nis absolutely crucial to data analytics\nthis is how you actually convey your\nmessage everyone can show numbers but if\nyou don't have a story around if you\ndon't have a compelling reason to act\nthen ultimately what you're presenting\nisn't going to resonate with your\naudience they did a study at Stanford\nwhere they had people present their\npitches and in that pitch they had\nsimply kpis number statistics but they\nalso told the story\nthe audience members were then quizzed\nafter the fact what they remembered from\neach of those presentations and it was\nthose stories that stuck with them yes\nthere were still facts and figures\ncontained within the story but that is\nthe way that you drive it home having\nthat emotional connection to the story\nto the understanding to the data is\nreally how you're going to get people to\ntake the action that you want and need\nthem to take\n[Music]\nthank you\ndata visualization is the discipline of\ncommunicating information through the\nuse of visual elements such as graphs\ncharts and Maps its goal is to make\ninformation easy to comprehend interpret\nand retain imagine having to look\nthrough thousands of rows of data to\ndraw interpretations and compare that to\na visual representation of that same\ndata summarizing the findings using data\nvisualization you can provide a summary\nof the relationships Trends and patterns\nhidden in the data which if not\nimpossible would be very hard to\ndecipher from a data dump\nfor data visualization to be of value\nyou have to choose the visualization\nthat most effectively delivers your\nfindings to your audience and for that\nyou need to begin by asking yourself\nsome questions what is the relationship\nthat I am trying to establish do I want\nto compare the relative proportion of\nthe sub parts of a whole for example the\ncontribution of different product lines\nin the total revenue of the company do I\nwant to compare multiple values such as\nthe number of products sold and revenues\ngenerated over the last three years or\ndo I want to analyze a single value over\ntime which in this example could mean\nhow the sale of one specific product has\nchanged over the last three years do I\nneed my audience to see the correlation\nbetween two variables the correlation\nbetween weather conditions and booking\nin a ski resort for example do I want to\ndetect anomalies in data for example\nfinding values and data that could\npotentially skew the findings\nwhat is the question I'm trying to\nanswer is not just an overarching\nquestion in the data visualization\ndesign and process you need to be able\nto answer this question for your\naudience with every data set and\ninformation that you visualize you also\nneed to consider whether the\nvisualization needs to be static or\ninteractive an interactive visualization\nfor example can allow you to change\nvalues and see the effects on a related\nvariable in real time so think about the\nkey takeaway for your audience\nanticipate their information needs and\nthe questions they might have and then\nplan the visualization that delivers\nyour message clearly and impactfully\nlet's look at some basic examples of the\ntypes of graphs you can create for\nvisualizing your data bar charts are\ngreat for comparing related data sets or\nparts of a whole for example in this bar\nchart you can see the population numbers\nof 10 different countries and how they\ncompare to one another column charts\ncompare values side by side you can use\nthem quite effectively to show change\nover time for example showing how page\nviews and user sessions time on your\nwebsite is changing on a month-to-month\nbasis although alike except for the\norientation bar charts and column charts\ncannot always be used interchangeably\nfor example a column chart may be better\nsuited for showing negative and positive\nvalues pie charts show the breakdown of\nan entity into its subparts and the\nproportion of the subparts in relation\nto one another each portion of the pie\nchart represents a static value or\ncategory and the sum of all categories\nis equal to a hundred percent in this\nexample in a marketing campaign with\nfour marketing channels social sites\nnative advertising paid influencers and\nLive Events you can see the total number\nof leads generated per channel line\ncharts display Trends they're great for\nshowing how a data value is changing in\nrelation to a continuous variable for\nexample how has the sale of your product\nor multiple products changed over time\nwhere time is the continuous variable\nline charts can be used for\nunderstanding Trends patterns and\nvariations in data also for comparing\ndifferent but related data sets with\nmultiple series\ndata visualization can also be used to\nbuild dashboards dashboards organize and\ndisplay reports and visualizations\ncoming from multiple data sources into a\nsingle graphical interface you can use\ndashboards to monitor Daily Progress or\nthe overall health of a business\nfunction or even a specific process\ndashboards can present both operational\nand analytical data for example you\ncould have a marketing dashboard from\nwhich you monitor your current marketing\ncampaign for reach outs queries\ngenerated and sales conversions in real\ntime as part of the same dashboard you\ncould also be seeing how the conversion\nrate for this campaign compares to the\nconversion rate of some of the\nsuccessfully run campaigns in the past\ndashboards are a great tool to present a\nbird's eye view of the complete picture\nwhile also allowing you to drill down\ninto the next level of information for\neach parameter dashboards are easy to\ncomprehend by an average user Make\ncollaboration easy between teams and\nallow you to generate reports on the go\nusing dashboards you can see the result\nof variations in data and metrics almost\ninstantly and this can help you evaluate\na situation from multiple perspectives\non the go without having to go back to\nthe drawing board\nforeign\n[Music]\nwe will look at some of the most\ncommonly used data visualization\nsoftware and tools these include\nspreadsheets jupyter notebook and python\nlibraries rstudio and our shiny IBM\ncognos analytics Tableau and Microsoft\npower bi\nsome of these are end-to-end data\nanalytics Solutions While others are\nspecifically for data visualization\nranging from free open source tools to\ncommercially available Solutions\nspreadsheets such as Microsoft Excel and\nGoogle Sheets are possibly the most\ncommonly used software to make graphical\nrepresentations of data sets\nspreadsheets are easy to learn and have\na ton of documentation and video\ntutorials available online for ready\nreference\nExcel provides several chart types\nranging from the basic bar line pi and\npivot charts to the more advanced\noptions such as scatter charts trend\nlines Gantt charts waterfall charts and\ncombination charts using which you can\ncombine more than one type of charts\nExcel also provides recommendations on\nthe best visual representation for your\ndata set\nto make the charts more presentable you\ncan add a chart title change colors of\nthe elements and add labels to data\nGoogle Sheets also offers similar chart\ntypes for visualization though Excel\ndoes have more inbuilt formula based\noptions than Google Sheets\nlike Excel Google Sheets can help you\nchoose the right visualization all you\nhave to do is highlight the data you\nwish to visualize and click the chart\nbutton and you get a list of suggested\ncharts best suited for your data charts\nand reports automatically update in\nExcel as well as in Google Sheets as the\nunderlying data is changed Google Sheets\nis preferred over Excel where multiple\nusers need to collaborate\nJupiter notebook is an open sourced web\napplication that provides a great way to\nexplore data and create visualizations\nyou don't have to be a python expert to\nuse jupyter notebook\npython provides a host of libraries that\nare used for data visualization let's\nlook at a few of those libraries\nmatplotlib is a widely used python data\nvisualization Library it provides\ndifferent kinds of 2D and 3D plots and\nthe flexibility to create plots in\nseveral different ways using matplotlib\nyou can create high quality interactive\ngraphs and plots with just a few lines\nof code it has a large community support\nand cross-platform support as it is an\nopen source tool\nbokeh provides interactive charts and\nplots and is known for delivering high\nperformance interactivity over large or\nstreaming data sets bokeh offers\nflexibility for applying interaction\nlayouts and different styling options to\nvisualize it can also transform\nvisualizations written in some of the\nother python libraries such as\nmatplotlib Seaborn and ggplot\nDash is a python framework for creating\ninteractive web-based visualizations\nusing Dash you can build highly\ninteractive web applications using\npython code while knowledge of HTML and\nJavaScript is useful it is not a\nrequirement\nDash is easily maintainable\ncross-platform and mobile ready\nusing rstudio you can create basic\nvisualizations such as histograms bar\ncharts line charts box plots and Scatter\nPlots and advanced visualizations such\nas heat Maps Mosaic Maps 3D graphs and\ncorelograms\nshiny is an r package that helps build\ninteractive web apps that you can host\nas Standalone apps on a web page\nthese web apps seamlessly display our\nobjects such as plots and tables and can\nbe made live to allow access to anyone\nyou can also build dashboards using\nshiny the ease of working with shiny is\nwhat popularized it among data\nprofessionals\nIBM cognos analytics is an end-to-end\nanalytic solution some of the\nvisualization features provided by\ncognos include importing custom\nvisualizations a forecasting feature\nthat provides time series data modeling\nand forecasts Based on data presented in\ncorresponding visualizations\nrecommendation for visualizations based\non your data conditional formatting\nwhich allows you to see the distribution\nof your data and highlight exceptional\ndata points for example highlighting\nhigh and low sales numbers over a\ncertain threshold\ncognos is known for its Superior\nvisualizations and overlaying data on\nthe physical world using its geospatial\ncapabilities\nTableau is a software company that\nproduces interactive data visualization\nproducts using Tableau products you can\ncreate interactive graphs and charts in\nthe form of dashboards and worksheets\nwith drag and drop gestures\nTableau also offers the option to\npublish results in the form of stories\nyou can import R and Python scripts in\nTableau and take advantage of its\nvisualization features that are far more\nSuperior to that of other languages\ntableau's visualization capabilities are\neasy and intuitive to use Tableau is\ncompatible with Excel files text files\nrelational databases and Cloud database\nsources such as Google analytics and\nAmazon redshift\npower bi is a cloud-based business and\nanalytics service from Microsoft that\nenables you to create reports and\ndashboards it is a powerful and flexible\ntool known for its speed and efficiency\nand an easy to use drag and drop\ninterface power bi is compatible with\nmultiple sources including Excel SQL\nserver and cloud-based data repositories\nwhich makes it an excellent choice for\ndata professionals\npower bi provides the ability to\ncollaborate and share customized\ndashboards and interactive reports\nsecurely even on mobiles power bi's\ndashboard consists of many\nvisualizations on a single page that\nhelp you tell your story these\nvisualizations called tiles are pinned\nto the dashboard the dashboard is\ninteractive which means a change in one\ntile affects the other\nwhen deciding which tools to use you\nneed to consider the ease of use and\npurpose of the visualization in terms of\nthe tools that are available and the\nvisualization capabilities they offer if\nyou can visualize it you can create it\nforeign\n[Music]\ndata professionals talk about the\nvisualization tools they rely on the\nmost and why\nthe visualization tool that I rely on\nmost in my day-to-day life is cognosis\nthere's a few reasons for this one it\nallows me to very quickly import a\nspreadsheet connect to a database and\nvisualize my data whether that's me\nunderstanding what I want to look at and\ndragging the fields on or using our AI\nassistant to present the data to help me\nunderstand and explore what might be\ninteresting in there if it's a new data\nset I've networked with before\nnow on top of that I can also go ahead\nand start to do some more complex things\nor even just some more robust analysis\nwith our reporting tool to allow me to\nbuild out and schedule reports for\ndelivery if I wanted my sales team to\nhave their pipeline report or their\nsales opportunity report every Monday\nmorning set that up once you use what we\ncall bursky and then have that sent out\nautomatically every Sunday night but so\nit's waiting for them in the morning\non top of this I can start to combine\nmultiple data sources and have the\nsystem help me create those joins\ntogether and then be able to visualize\nthose all on a simple simple dashboard\nthat's highly interactive allowing you\nto filter and sort dynamically as well\nas share that out with the rest of my\norganization so that not every user has\nto go through the same experience we've\nset up the dashboard once everyone can\nthen have access to it in terms of\nvisualization tools I Rely the most on\nlooker which is a data visualization\ntool that sits atop my company's\ninternal database it's similar to\nTableau which I've also used in the past\nand find a pretty easy to use and the\ngreat thing about these data\nvisualization tools like looker and\nTableau is they let everyone throughout\nthe organization regardless of whether\nor not they're data professionals\num easily kind of see their data and do\nbasic aggregation or sorting on it a\ndata visualization tool I really rely on\nfor exploratory data analysis is R I've\nbeen a big convert in recent years to\nthe effectiveness of doing basic data\nanalysis and data visualization in R\nparticularly using the Tidy burst which\nis a collection of packages that help\nyou really easily load in your data\naggregate it at different levels and\nalso quickly and easily visualize it\nPablo and the power bi no-brainer they\nare easy to pick up and very helpful to\ndemonstrate data and as more and more\ncompanies and people start to utilize\nthem they're more and more built-in\ntemplates and libraries I would say the\nvisual views will probably be Excel and\nmore just the Microsoft suite and just\nlooking at and using the sums and the\nthe macros to make sure that the data\nwhen I before I even dive in that is\nclean and that makes sense and that is\nprepped for what we needed to be\nforeign\ndata analysts job openings exist across\nindustry government and Academia every\nindustry be it Banking and finance\nInsurance Health Care retail or\ninformation technology has space for\nskilled data analysts these roles are as\nsought after in large businesses as they\nare in startups and new Ventures\naccording to Forbes the global big data\nanalytics Market that stood at 37.34\nbillion US dollars in 2018 is expected\nto grow at a compound annual growth rate\nof 12.3 percent from 2019 to 2027 to\nreach\n105.08 billion US Dollars by the year\n2027. currently the demand for skilled\ndata analysts far outweighs the supply\nwhich means companies are willing to pay\na premium to hire skilled data analysts\nthere's a wide variety of job roles\navailable for data analysts to\nunderstand the career path that's open\nto you we will broadly classify the\nroles into Data analysts specialist\nroles and domain specialist roles\ndata analysts specialist roles are for\ndata analysts who want to stay focused\nand grow in the technical and functional\naspects of their role on this path you\ncould be starting your career as an\nassociate or Junior data analyst and\nwork your way up through analyst senior\nanalyst lead analyst and principal\nanalyst roles the boundaries between\nthese roles the years of experience that\nqualify you for the next level and the\nnature of experience you need to gain to\nmove up could vary depending on the\nindustry the size of the organization\nand how big your team is\nin smaller teams for example you could\nbe gaining experience in all facets of\ndata analysis from Gathering data all\nthe way through to visualizing and\npresenting your findings to stakeholders\nand this may happen within a short span\nof time in larger teams and\norganizations roles May typically be\nbifurcated based on activity which means\nyou could be gaining experience in one\nspecific phase of the process before you\nmove to the next this helps you hone\nyour skills in one part of the process\nbefore you move to the next\non your journey from an associate data\nanalyst to a lead or principled data\nanalyst you will be continually\nadvancing your technical statistical and\nanalytical skills from a foundational\nlevel to an expert level you will be\ndemonstrating your ability to work with\na wide-ranging set of tools and\nplatforms different aspects of the data\nanalysis process and a wide variety of\nuse cases in terms of technical skills\nyou may start off knowing just one\nquerying tool and programming language\nany one type of data repository or a\nlimited set of visualization tools as\nyou gather more experience you're\nexpected to learn and demonstrate your\nability to work with more and more tools\nlanguages data repositories and newer\nTechnologies your communication skills\npresentation skills stakeholder\nmanagement skills and project management\nskills all need to be honed and taken up\na notch progressively\nas a lead or principal analyst you may\nalso be responsible for establishing\nprocesses in your team making\nrecommendations for software and tools\nthe team should work on upskilling the\nteam and expanding the team to include\nmore profiles in some organizations\nthese responsibilities could be aligned\nwith a manager level person who has\nrisen through the ranks to manage a team\nof data analysts\ndomain Specialists also known as\nfunctional analysts are analysts who\nacquire specialization in a specific\ndomain and are seen as an authority in\ntheir domain such as HR Healthcare sales\nFinance social media or digital\nmarketing they may not be the most\ntechnically skilled people\nthese roles carry titles such as HR\nanalyst marketing analyst sales analyst\nHealthcare analyst or social media\nanalyst\nand then there are the analytics enabled\njob roles these include roles such as\nproject managers marketing managers and\nHR managers these are jobs where\nanalytics skills lead to Greater\nefficiency and Effectiveness a fair\namount of the data analyst job openings\nare analytics enabled as more and more\norganizations rely on data for decision\nmaking\nas a data analyst you also have options\nfor exploring and learning new skills to\ngain entry into other data professions\nsuch as data engineering or data science\nfor example if you're starting off as a\njunior data analyst and really like\nworking with data lakes and Big Data\nrepositories you can acquire further\nexpertise in these Technologies and\nevolve your career into becoming a big\ndata engineer if the business side of\nthings excite you more you could\nsimilarly explore the skills required\nfor making a lateral move into business\nanalytics or business intelligence\nAnalytics\nwhile the data analyst career landscape\nis very vast the good thing is that you\nhave a plethora of resources available\nto help you grow to be successful in\nyour journey as a data analyst all you\nneed to do is grab the opportunities you\nwant to pursue or the ones that present\nthemselves to you and learn along the\nway\n[Music]\nin this video we will listen to data\nprofessionals talk about how they got\ninto this profession my current role as\na data professional did not exist before\nI took the position\nI realized that there was a need in our\ncompany to provide data in a faster more\nefficient manner than going to the is\nDepartment who would have a meeting to\ndiscuss the meeting to have requirements\nand then they would have an in product\nthat people weren't satisfied with but\nyou had to get at the end of the line\nand go through the whole process again\nto get what you were looking for\nso through filling a need at the company\nto provide reports in two weeks I put\ntogether a company database that has\naccess to more information we have\nanalysts that are now able to meet that\nunmet need in the company\nI got into the day of professional role\nby chance I was actually working on my\nPhD in economics at the University of\nIllinois Urbana-Champaign when a\ncolleague of mine suggested that a\nmasters in statistics would also be an\nexcellent value add\nso that's how I got into the statistics\nprogram as well in Illinois but once I\nstarted that I was pretty hooked and\nthere was no going back so to speak\nso in other words my original goal of\nbecoming an economist actually evolved\ninto a career filled with data\nmodeling analytics inside Gathering\ncommunication\num\nvisualization\nand of course underlying all of that\ndata-driven problem solving\nI got into the data analyst role in your\nfinancial data company actually by\naccident\nback then my company started to hire\nEquity data analysts in mainland China\nand I was very lucky to join the team\nbecause they're looking for someone that\nwas financial analysis skill sets which\nI can bring to the table and after that\nmy team started to hire someone with\ntechnical skill sets like python R and\ncycle\nI've always had a love of numbers and\none of the things that happens is when\nyou work with numbers so much they start\nto tell a story and the ability to look\nat those numbers and tell that story is\nwhat speaks to me and so having always\nhad that love of numbers I have just\nbeen always attracted to data analytics\nand whether it's Excel spreadsheets or\nwhether it is QuickBooks or any sort of\ndata sets that can help Drive the\ninformation that we're looking for\nespecially in the financial industry\nwhen we're looking at profit and loss\nand balance sheet and and what happens\nwhen one company buys another company\nwe're always looking at that data to\ntalk to and speak about the company's\nhistory and their future\nI got my current role as a data\nscientist uh straight out of my grad\nprogram which was a master's in data\nscience and before my grad program I\nworked as both a data analyst and an\nanalytics manager\n[Music]\nin this video we will listen to data\nprofessionals talk about what employers\nlook for in a data analyst\nemployers look for data analysts with\nintegrity\nduring the hiring process I will ask if\nyou had to choose just one would you\nrather meet a deadline or get a right\nanswer\nand I'm always looking for someone who\nwould say I want to make sure that the\ninformation is right\nmissing a deadline isn't as detrimental\nas a company making a multi-million\ndollar decision on wrong information or\nsomeone losing their job because it\nwasn't pulled or it wasn't reported\ncorrectly so it's much more important to\nhave integrity I think the number one\nthing employers look for in data\nanalysts is someone who can communicate\nclearly if you do the most brilliant\nanalysis in the world but you can't\ncommunicate it to external stakeholders\nthen it's really not worth anything so I\nthink that that skill is really sought\nafter\nI think another thing that companies\nobviously look for when they look for\ndata analysts is uh fluency with numbers\nability to understand complex analyzes\nability to understand AP tests and what\nthe results of AP tests are saying and\nthe implication of those results\nI also think increasingly employers are\nlooking for data analysts with really\nstrong SQL skills another thing\nemployers are looking for in data\nanalysts is a growth mindset and\nwillingness to learn because the\nindustry is changing at a really fast\npace I think they are looking for the\nprogramming skills including python are\nsickle and at the same time they are\nlooking for some personalities whether\nyou are detail-oriented whether you like\nworking with data and whether you are a\nproblem solver so and so forth as an\nemployer I hire people all the time what\nam I looking for we are looking for\npeople who are detail-oriented and who\nare somewhat overachievers they don't\njust want to do what's what's in front\nof them they want to go further and so\nwe're looking for people who have higher\naspirations and who also are able to\nthink outside the box and aren't just\ngoing to if I say do ABC they're not\njust going to do that they're going to\ndo it plus they're going to do it plus\nthink and give me some Alternatives\npeople who are able to troubleshoot if\nsomething goes wrong they're not just\ngoing to stop and say oh my goodness I\nneed to go talk to my supervisor they're\ngoing to say here's a problem here's my\nthoughts here are two possible solutions\non how you can resolve this so that the\nthe job and the company can keep moving\nforward that's what you want so not just\ndetail-oriented and not just good with\nnumbers you also have to be someone who\ncan think outside the box and be able to\nproblem solve and troubleshoot those are\nwhat's going to that's what employers\nare going to be looking them for now\nmore than ever they look for the ability\nto know data and by no data we mean\nseveral things right be comfortable with\nit in various formats be able to think\nabout it and by that we mean know what\nkind of data you want to solve the\nproblems that are at hand\nso the knowing the data skill is very\nimportant problem solving is another\nvery key skill meaning\num\nuh if there is a problem presented to a\ndata analyst they should be able to know\nhow to tackle that problem using data in\nwhatever format it may be sitting in and\nbeing able to analyze it and present the\ninsights that will then uh solve the\nproblem they also need to be very\num\ndynamic in that if there are\num\nif they are presented with a very\ndifferent kind of data set suddenly\nwhich looks nothing like it did before\nthey need to be able to adapt to that\num change so that that's why the quality\nof being Dynamic and adaptable is also\nimportant they also need to be able to\npick up technical skills quickly and by\nthat we mean if there is one kind of\num SQL diagram being used in one setting\nthey need to be able to uh uh you know\noperate under a different Paradigm if\nthere is a place that's using our studio\nbut they know python they need to be\nable to pick up uh our studio quickly\nand that kind of thing so being able to\nlearn fast being Dynamic and knowing\ndata those are the few things that\nemployers do look for in a good data\nanalyst\n[Music]\nthank you\nthere are various paths you can take to\ngaining entry into the data analyst\nfield while some employers may ask for\nan academic degree as a prerequisite\neven if you don't have a degree you\nstill have several options available to\nyou that can help you gain an entry or\neven make a lateral move into the field\nof data analysis let's start with the\nmost obvious path\nan academic degree in data analytics\nstatistics computer science management\ninformation systems or information\ntechnology management can start you off\nwith a strong advantage\nyou could alternately enroll in online\ntraining programs that can equip you\nwith the required knowledge\ncomprehensive online programs for data\nanalysis are multi-course\nspecializations offered by learning\nplatforms such as Coursera edx and\nUdacity these courses are designed and\ndelivered by some of the world's best\ndomain experts since you have a fair\nidea by now of the technical functional\nand soft skills you need in order to be\na data analyst choosing the right\nlearning path should be fairly\nstraightforward\nas you gather more work experience you\ncan keep advancing your Knowledge and\nSkills in specific areas for example\nstatistics spreadsheets SQL python data\nvisualization problem solving\nstorytelling or making impactful\npresentations these courses also give\nyou Hands-On assignments and projects\nwhich give you a feel for the real world\napplication of your Knowledge and Skills\nyou can even add these projects to your\nportfolio\nso if you don't have an academic\nqualification these courses can help you\ngain opportunities at an entry level and\nwork your way up as your experience\ngrows now let's look at a scenario where\nyou have a couple of years of experience\nin a different line of work and want to\nmake a switch into the data analysis\nfield there's a very good chance that\nyou can do that successfully if you plan\nwell since data analysis is a vast field\nit would be useful for you to First\nresearch the knowledge and skills you\nneed the various job opportunities that\nare available and the growth\nopportunities available on the path you\nmay be considering you can tap into\nonline resources forums and your network\nof friends and colleagues to connect\nwith people in this field and gain\ninsights into real-world scenarios\nif you're currently working in a\nnon-technical role you may consider\nexploring the domain Specialist or\nfunctional analyst path\nif you're in sales you could consider\nstarting your journey by positioning and\nSkilling yourself for a sales analyst\nposition you begin with the advantage of\nIndustry experience and skill yourself\nin other areas such as statistics and\nprogramming for example\nif you're currently working in a\ntechnical role you have the ability to\nquickly pick up the tools and software\nyou need for the data analyst role\nyou're also probably stepping in with\nthe advantage of having a good\nunderstanding of the domain or industry\nyou're from for some of the other skills\nsuch as problem solving project\nmanagement communication and\nstorytelling you may already be using\nthese in some capacity in your existing\njob you can always enhance these skills\nthrough trainings online courses\ncommunities of practice and forums\ndata analysis is a fast moving field if\nyou're curious open to learning new\nthings and excited about the field you\nwill be able to forge a path forward\nregardless of the formal qualifications\nyou think you may be missing\n[Music]\nin this video we will listen to\npracticing data professionals talk about\nthe various career options available in\nthis field\nthe whole data related profession today\nhas also become\num very uh very colorful very Dynamic\nevolving all the time and it's also it\nalso presents a lot of range of options\nto anyone who wants to enter the field\nof uh you know being a data professional\nso it ranges from if you were to think\nof various circles as options\nstarting with a data analyst right\num from there you have you can\nupskill a lot more become a data\nscientist\nyou can also become a statistician which\nis what I was when I first started off\num you can then\nfurther specialize yourself in a\nspecific direction of data in order to\nbecome a data engineer or you can start\nby being a bi\nanalyst or a specialist and then don't\ngo to become a data engineer so in other\nwords either you can do a track of data\nanalyst and data scientists or you can\ndo a track of a bi analyst and a data\nengineer so those are kind of parallel\ntracks within the data profession\num you can then also go to The Other\nExtreme where you can become a machine\nlearning engineer an AI engineer and so\non\nso there are many such roles many many\nsuch rules that um anyone interested in\na in the field of data\num can really take on a few of the most\ncommon career options available to data\nanalysts is to get deeper into the weeds\nwith machine learning and engineering\nand become a data scientist or a machine\nlearning engineer that focus more on\nmachine learning modeling another career\noption available to data analyst is to\ndive deeper into the business they're in\nand to inform top-level company strategy\nI think that role is really important\nand interesting and as it has really\nevolved in recent years\num another path for a data analyst is to\nstart to become a people manager and\nmanage other data analysts and\nwork to triage uh what gets worked on\nbecause there's always going to be more\nuh questions in the organization that\ncan be answered with data than there are\npeople to answer them so a data manager\nrole can be really interesting and\ncritical in terms of making sure the\nmost important pieces of work actually\ndo get worked on you can be a bookkeeper\nyou can be an accountant you could be a\nCPA you could be this back broker or you\nor a financial analyst for the\ngovernment or or a lot of large\ncompanies you could be a real estate\nbroker lots of people are great data\nanalysts but to do that you do have to\nreally like numbers and you have to be\nreally detail-oriented if that's not you\nand numbers don't jump off the page at\nyou data analysts might not be the right\nthing for you\nthank you\n[Music]\nin this video we will listen to data\nprofessionals giving advice to aspiring\ndata analysts\none piece of advice I give to aspiring\ndata analyst is keep learning and don't\nget discouraged uh there is more that's\nbeen written about analytics than you\ncould ever learn in a lifetime\nso don't try to learn everything at once\nbut take your time and make sure every\nweek every month your every year you're\nconstantly learning something new and I\nthink that'll serve you well one piece\nof advice I've been given uh in my\ncareer that I've found to be really\nreally helpful is to consider your\ncareer like an uppercase t\nand you should have broad knowledge the\ntop of the T represents kind of that you\nshould have broad knowledge in a number\nof different areas although it doesn't\nhave to be deep you should know a little\nbit at least about a b testing about\nmachine learning about data\nvisualization about SQL about python\nabout r\nand then the bottom part of the T is you\nshould go really deep on at least one\narea so there should be one area among\nthe ones I just mentioned where you have\na really deep rigorous understanding of\nit it it is use every job that you have\nto your advantage meaning something can\nbe found from everything so whether it\nis\nlooking at your parents budget or asking\nyour parents if you can see the\ncheckbooks or if you work at a fast food\nrestaurant\num looking at the numbers how many\npeople are coming in how many how many\ndollars are being turned over talk to\nthe manager about what's next what the\nnumbers actually mean when you're\ntalking to potential employers have your\nexamples ready so it doesn't have to\nnecessarily be just work experience but\nyour life experience how did you how\nhave analytics how have you used\nanalytics even in your personal life so\nif you can tell me and talk to me about\nwhat you've done personally or\nprofessionally and how it relates to\nwhat we're doing that will take you a\nvery very long way piece of advice I'd\ngive to aspiring data scientists is to\nbuild out a professional portfolio\nthat showcases your data science or data\nanalytics skills and you can do this by\nlooking up fun data sets online and\nanalyzing those data sets you can also\ndo that within your job even if your\ncurrent job isn't to be a data analyst\nlook for opportunities where you can\ncrunch numbers and then that'll just\nkind of naturally lead you to a nice\nportfolio or nice wins in terms of data\nanalyst projects\nmy advice to an aspiring data analyst is\nto follow your passion find a job that\nmeets your needs and gives you Joy\nduring doing it\nI there's nothing worse than waking up\nevery morning and hating to go to your\nplace of employment there are so many\ndata analyst jobs in various Industries\ndepartments there's just so many options\nthat there's no need to take a job just\nto have a job find something that really\nfuels your passion and gives you\nsomething to get up every morning for\nforeign\n[Music]\nwe will listen to women share their\nexperience of being a data professional\nand their advice to women aspiring to\nenter this field\nas a woman in data science I still run\nup against The Stereotype that this is a\nman's job I've walked into meetings and\nhad people look disappointed or confused\nI take that as an opportunity to prove\nthem wrong this isn't a job Just For Men\nit's for a person who has the Insight\nthe ability and the drive to get the job\ndone and as long as you can possess\nthose skills then there's no reason why\nanyone can't do anything that they put\ntheir mind to whether you're a male or a\nfemale whether you're white or black you\nhave the opportunity to prove people\nwrong by the work that you produce\nI would say it's it can be tough but you\nhave to find your voice and don't be\nafraid to use it a lot of times as women\nwe're not able to find our voice or\nspeak up or we're afraid of how people\nare going to treat us if we speak up but\nyou know it's more important that you be\nheard and seen not just being loud and\nwrong but if you have the data to back\nit up if you have good content and\nthings you want to say don't be afraid\nto raise your hand and let people know\nthat you are a thinker and that you can\nget this done because that's going to be\nimportant as you progress and the only\nreal way to get ahead is drive and\npeople don't know you have drive if\nyou're too quiet and so if you're just\nquietly working away in the corner a lot\nof times people can't see it so speak up\nmake sure your voice is being heard make\nsure you are being seen as a woman who\nknows how to how to grow and how to help\nin the data science field when I started\nit was\num mostly men in my class especially\nback in grad school\num but now I'm seeing that data teams\nboth data science and data engineering\nteams are filled with a lot of women as\nwell so I would\num advise women to continue upskilling\num you know so that they're able if they\nare fond and\num if they like\num you know a career filled with\nprogramming data and problem solving\nthen they should\num continue building their technical\nskill set\nso that they can\nrepresent themselves in the landscape of\na data professional as strongly as as\npossible don't allow your gender to be a\ncrutch still go hard put in the work and\nshow the world your amazing talents\nthere are no roles that are set aside\nfor specific genders if you're fortunate\nenough to work in a profession that you\nthoroughly enjoy then go for it\nforeign\ndo you want to learn how to use\nspreadsheets and start analyzing data\nusing Excel this course from IBM is\ndesigned to help you work with Excel and\ngives you a good grounding in the\ncleaning and analyzing of data which are\nimportant parts of the skill set\nrequired to become a data analyst you\nwill not only learn data analysis\ntechniques using spreadsheets but also\npractice using multiple Hands-On Labs\nthroughout the course in module 1 you\nwill learn about the basics of\nspreadsheets including spreadsheet\nterminology the interface and navigating\naround worksheets and workbooks\nin module 2 you will learn about\nselecting data entering and editing data\ncopying and auto filling data formatting\ndata and using functions and formulas\nin module 3 you will learn about\ncleaning and wrangling data using a\nspreadsheet including the fundamentals\nof data quality and data privacy\nremoving duplicated and inaccurate data\nremoving empty rows removing data\ninconsistencies and white spaces and\nusing the Flash Fill and text to columns\nfeatures\nin module 4 you will learn about\nanalyzing data using spreadsheets\nincluding filtering data sorting data\nusing common data analysis functions\ncreating and using pivot tables and\ncreating and using slicers and timelines\nat the end of this course in module 5\nyou will complete a series of Hands-On\nLabs which will guide you on how to\ncreate your first deliverable as a data\nanalyst this will involve you\nunderstanding what the business scenario\nis cleaning and preparing your data and\nanalyzing your data you will follow two\ndifferent business scenarios throughout\nthe course with each using their own\ndata set these different scenarios and\ndata sets will be used in the lesson\nvideos and in the Hands-On labs\nafter completing this course you will be\nable to understand how spreadsheets can\nbe used as a data analysis tool\nunderstand when to use spreadsheets as a\ndata analysis tool and their limitations\ncreate a spreadsheet and explain its\nbasic functionality\nperform data wrangling and data cleaning\ntasks using Excel analyze data using\nfilter sort and pivot table features\nwithin Excel spreadsheets\nyou will also perform some intermediate\nlevel data wrangling and data analysis\ntasks to address a business scenario\nthe course team and other peers are\navailable to help in the course\ndiscussion forums in case you require\nany assistance\nlet's get started with your next video\nwhere you will get an introduction to\nspreadsheets\n[Music]\nthank you\nin this first video of the course we\nwill list some of the common spreadsheet\napplications available learn about key\ncapabilities of spreadsheets and discuss\nwhy spreadsheets might be a useful tool\nfor a data analyst\nthere are several spreadsheet\napplications available in the\nmarketplace some of them are more widely\nknown and used than others and some are\nfree While others need to be paid for by\nfar the most commonly used spreadsheet\napplication and the most fully featured\nof them all is Microsoft Excel the\ndesktop version comes in a paid form as\npart of the office suite and some\nMicrosoft 365 subscriptions but there is\nalso a web-based cut down version called\nExcel for the web also known as Excel\nonline the online version is free to\nusers with a Microsoft account but does\nnot offer all the advanced features that\nthe desktop version provides the next\nmost popular is Google Sheets which\noffers a lot though not all of the\nfeatures that Excel provides and is free\nwith a Google account this is a\nweb-based application and it integrates\nnicely with other Google Apps such as\nGoogle forms Google Analytics and Google\ndata Studio then there is LibreOffice\ncalc a totally free and open source\ndesktop spreadsheet application that\noffers more basic functionality than\nExcel or Google Sheets but still has a\nlot of the tools you need for data\nanalysis such as charts conditional\nformatting and pivot tables other\nspreadsheet apps include Zoho sheet a\nfully featured web-based application\nthat is comparable with Google Sheets\nOpenOffice calc quip for Salesforce\nsmartsheet which is predominantly for\nproject management and Apple Numbers\nwhich is included with Apple devices\nsuch as Mac computers and is also\navailable on the app store for other\nApple devices so there are many\nspreadsheet application options open to\nyou from fully featured to basic from\ncloud-based to desktop apps from Paid 4\nto free versions it's up to you to\ndecide which one fits your needs and\nyour budget spread sheets provide\nseveral advantages over manual\ncalculation methods for example once you\nhave your formulas correctly written you\ncan be assured that your calculations\nare accurate and that the calculations\nwill be performed automatically for you\nspreadsheets also help keep your data\norganized and easily accessible your\ndata can be easily formatted filtered\nand sorted to suit your needs if you do\nmake mistakes in your data entry or your\ncalculations you can easily edit them\nundo them or use error checking tools to\nhelp remedy those mistakes and lastly\nyou can analyze data in spreadsheets and\ncreate charts graphs and reports to help\nvisualize your data analysis since\nspreadsheet software for personal\ncomputers first appeared on the market\nin the 1970s with vis-accalc on the\nApple II PC spreadsheets have come a\nlong way in terms of the capabilities\nand features they now offer businesses\nfrom uncomplicated tables and relatively\nsimple computations to powerful tools\nfor analysis management and\nvisualization of enormous sets of data\nthe most common business uses for\nspreadsheet applications include the\nfollowing data entry and storage\ncomparing large data sets modeling and\nplanning charting identifying Trends\nflow charts for business processes\ntracking business sales Financial\nforecasting statistical analysis profit\nand loss accounting budgeting forensic\nauditing payroll and tax reporting\ninvoicing and scheduling and away from\nthe business side of things other\ntypical uses include personal expenses\nhousehold budgeting recipe Library\nFitness tracking calorie counting and\nweight monitoring sports leagues such as\nfantasy football cataloging music\nlibraries and even contact lists\nshopping lists and Christmas card lists\nas a data analyst you can use\nspreadsheets as a tool for your data\nanalysis tasks including collecting and\nharvesting data from one or more\ndistributed and different sources\ncleaning data to remove duplicates\ninaccuracies errors and resolve missing\nvalues to improve the quality of the\ndata analyzing data by filtering sorting\nand interpreting it to determine what\nuseful information can be gleaned from\nit and visualizing data to help you tell\na story about your data analysis\nfindings to key business stakeholders\nand any other interested parties within\nyour organization\nin this video we had an introduction to\nspreadsheets we learned about some\ncommon spreadsheet applications what the\nmain capabilities of spreadsheets are\nand why spreadsheets might be a useful\ntool for a data analyst in the next\nvideo we will look at the basics of\nspreadsheets including common\nspreadsheet terminology\n[Music]\nforeign now that we have a basic\nunderstanding of what spreadsheet\nsoftware is available and why\nspreadsheets might be a useful tool for\na data analyst let's get started on\nlooking at some of the basics of using a\nspreadsheet application\nin these videos we will be using the\nfull desktop version of excel but the\nmajority of the tasks that we will\nperform can also be done using Excel\nonline and other spreadsheet\napplications such as Google Sheets let's\nfirst cover some basic spreadsheet\nterminology when you open Excel you have\nthe option of creating a new blank\nworkbook or opening an existing workbook\nwe're going to choose new and then blank\nworkbook workbooks are the highest level\ncomponent in Excel and are represented\nas a DOT xlsx file so when you open an\nexisting workbook or create a new\nworkbook you are in fact working with a\nDOT xlsx file\nthe workbook contains all your data\ncalculations and functions and contains\nseveral other underlying elements that\nmake up a workbook\na workbook consists of one or more\nworksheets Each of which is represented\nby a tab in Excel each worksheet is\ngiven a name which is displayed on the\ncorresponding tab for the worksheet by\ndefault each tab is named sheet1 then\nsheet 2 and so on to make these\nworksheet tabs more meaningful it is\nusual to rename them so they make more\nsense in relation to the worksheet's\npurpose for example you might call a\nworksheet January sales or perhaps the\nname of a region or store or even an\noffice or Department\nto do this right-click the tab and\nchoose rename instead of right-clicking\nto rename you can also just double-click\nthe name of a worksheet tab to rename it\nessentially worksheet tabs can be named\nanything you want to fit your particular\nneeds to make it easier to understand\nwhat that worksheet represents\nnote that a worksheet that is\nhighlighted as the tire sales worksheet\ntab is here is referred to as the active\nworksheet if you want to order your\nworksheets in a different way that is\nvery simple to do either drag a\nworksheet tab to the left or right and\ndrop it in the place you want which is\nrepresented by the Little Black Arrow or\nif you are not comfortable with dragging\nand dropping then the longer way of\ndoing that is to right-click the\nworksheet tab select move or copy and\nthen in the list titled before sheet\nselect where you want your worksheet tab\nto be placed and click ok\nevery worksheet is made up of a lot of\nrectangular boxes called cells these\ncells will contain your data which may\nbe text numbers formulas or calculation\nresults\nare organized in columns which run\nvertically down the screen and use a\nletter system this is column B for\ninstance and rows which run horizontally\nacross the screen and use a numeric\nsystem this is row 7 for example each\ncell is represented by a cell reference\nwhich is essentially just a column\nletter and row number\nfor example if we click somewhere near\nthe center of this worksheet we now have\nthe cell M20 selected this is usually\nreferred to as the active cell this is\nnot only indicated by the highlighted\nedges of the cell but also if you look\nin the top left corner of the worksheet\nyou will see its cell reference is noted\nin the little box\nhere you can see it says M20\none important thing to note here is that\ncells are always referenced by their\ncolumn letter first then their row\nnumber so column M and row 20. the last\nelement of a workbook I want to mention\nis a cell range this identifies a\ncollection of several cells selected\ntogether that could mean a few cells in\nthe same row or the same column or it\ncould mean several rows and columns\ntogether this can either be done using\nthe mouse by selecting the first cell\nthen dragging down or across to include\nother cells or you can use shift plus\narrow keys this range of cells is often\nreferred to as an array and it's most\ncommonly used as a reference in\ncalculations and formulas for example if\nyou want to add up all the values in a\ncolumn between cells D9 and d19 you\nwould specify this cell range within a\nformula note that cell ranges are\nnotated using a full colon between the\ncell references so in this example it\nwould be D9 colon d19 or to specify a\nfew cells in the same row it might be D9\ncolon H9 or to select several rows and\ncolumns it might be D9 colon h19 we will\nsee this notation in use later in the\ncourse when we start looking at\ncalculations and formulas these cell\nranges could even be a reference point\nto cells contained on another worksheet\nthis is usually referred to as a 3D\nreference\nwe can now close this workbook and we\ndon't need to save it in this video we\nlearned about some of the basic\nterminology of spreadsheet elements in\nthe next video we will discuss how to\nnavigate around a spreadsheet how to use\nthe ribbon and menus and how to select\ndata\n[Music]\nnow that we have a basic understanding\nof the main elements that make up a\nworksheet let's see how to move around a\nspreadsheet get familiar with the ribbon\nand menus\nand learn how to select data in a\nworksheet\nto open a sample file we click file this\nopens backstage view here you can create\na new workbook or open save or print a\nworkbook you can also access Excel\noption now we want to open our sample\nfile so we click open and either select\nit from my recent list or click browse\nto find the data file we want the first\nthing we should do is get acquainted\nwith the ribbon and menus notice that on\nthe ribbon at the top we have several\ntabs some of these tabs may be familiar\nto you with other office products such\nas the home insert and view tabs While\nothers might be new to you such as\nformulas data and powerpivot to make a\nlittle more workspace for ourselves we\ncan hide this ribbon by double clicking\nany Tab and to unhide it we do the same\nthe other option is to use the shortcut\nkey Control Plus F1\nthe ribbon is organized into groups of\nbuttons to make them easier to find so\non the Home tab we have groups for font\nalignment number Styles and so on some\nof these groups contain all the\navailable buttons on the ribbon when\nviewing in full screen such as Styles\nand cells but other ribbon groups have\nmore options which we access by clicking\nthe little arrow icon in the bottom\nright corner of the group as can be seen\nhere on the number group for example the\nnext item I want to point out is the\nquick access toolbar at the top of the\nscreen above the ribbon as the name\nsuggests this is where you can quickly\naccess the tools you use most often you\ncan see we already have some tools in\nthis toolbar such as save\nundo redo new and open but we can add\nother tools to the toolbar if we wish so\nif we click the drop down arrow in the\ntoolbar and then select a tool we use a\nlot such as sort ascending that will be\nadded and we will also add the sort\ndescending button\nnow we need to be comfortable with\nmoving around a worksheet you can simply\nuse the arrow keys to move left right up\nand down one cell at a time but you can\nalso use page down and page up to move\naround a bit faster which is especially\nuseful if you have lots of rows of data\nand to move even quicker up or down a\nlarge data sheet use the vertical scroll\nbar\nand to move left or right use the\nhorizontal scroll bar again these can be\nvery useful when you have a large data\nset\nthere are also some useful shortcuts you\ncan use Control Plus home key for\nexample takes you back to the start of\nthe worksheet that is cell A1 Control\nPlus end takes you to the Cell at the\nend of your data in the worksheet\nControl Plus down arrow takes you to the\nend of the column you're in while\nControl Plus up Arrow takes you back to\nthe top of that column\nso a quick way to find out how many rows\nof data you have in your worksheet is to\ngo to the first cell in your data and\npress control plus down arrow to see the\nlast row of data so here you can see we\nhave 160 rows now how do we go back to\nthe Top Again Control Plus home will do\nit so far we have seen how to navigate\naround our worksheet and its data now we\nneed to look at how we select data this\nis very important because you often need\nto select data to move it copy it or\nselect it in a formula\nthe simplest selection is a single cell\nusually done with a mouse or maybe a\ndirectional Arrow key The Next Step Up\nis to select multiple cells together and\nthis can be done either with a mouse by\ndragging from one cell to additional\nadjoining cells or you can use the shift\nkey with directional arrow keys\nnext up is selecting a single column or\nrow which is done simply by selecting\nthe letter at the top of the column or\nthe number on the left of a row\nthen we can progress to selecting\nmultiple columns and rows by clicking\nthe mouse button holding it down and\ndragging across more columns or if you\nare not comfortable with dragging you\ncan also select the column first then\nhold shift plus arrow keys to select\nmultiple columns the same applies to\nrows 2. however if you have data in\nnon-continuous rows or columns that is\nnot next to each other you can select\nthe first column then use the control\nkey to select another unconnected column\nsuch as column C and F here the largest\nthing you might want to select is the\nwhole worksheet which you can do by\nclicking in the top left corner of the\ncells\nhowever this selects the entire\nworksheet including all the empty rows\nand columns so if you only want the data\nin your worksheet\nyou can use the shortcut control plus a\nword of warning When selecting data in\ncells rows and columns there are three\ntypes of cross symbols that you might\nsee when working with selected cells\nthe first one is the large white cross\nthat you see when you select a cell as\ncan be seen here in cell A4 this is the\nselect cross that we have been using\nalready in this video to select cells\nthe second type you might see is when\nyou hover over the bottom edge of a cell\nand see a thin black cross-type symbol\nwith arrows on each point this is the\nmove symbol and would move the cell data\nto another location the last type is the\nsmall thin black cross that is seen when\nyou hover over the bottom right corner\nof a cell this is the fill handle or\ncopy symbol and it fills or copies the\ncell data to another location\nin this video we learned how to move\naround a spreadsheet become familiar\nwith the ribbon and menus\nand learn how to select data in a\nworksheet in the next videos we will\ndiscuss how to enter data how to copy\nand paste data and how to format data in\na spreadsheet\n[Music]\nin this video we will listen to several\ndata professionals discuss the\nadvantages and limitations of using\nspreadsheets as a tool for data analysis\nlet us start with what are the benefits\nand advantages of using spreadsheets as\na tool for data analysis\nmy experience using spreadsheets as a\ntool for data analysis is somewhat mixed\nI think they can be really really useful\nin the right context but using\nspreadsheets definitely has its\nlimitations so the big Pro of using\nspreadsheets is you can see all the data\ncleanly laid out in front of you in a\ntable\nso I think it's very clear to anyone\nlooking at a spreadsheet exactly what\nthe data is what format it comes in all\nof that you can just easily visually\ninspect it as a CPA I use Microsoft\nExcel on a daily basis and I have done\nso for the duration of my career the\nfunctionalities the pivots the pivot\ntables the charts Etc but also being\nable to use formulas my personal\nfavorite is index match for using\nand it's a pretty simple way to take\njust thousands of lines of information\nand sift through all of that to find\nspecifically what you're looking for\nExcel is really that One-Stop shop where\nyou can perform calculations analyze\nfinancial ratios and even export reports\nout of the Erp that I spoke of earlier\nto customize it as you need my\nexperience is using spreadsheets is that\nthey're great for simple analysis I will\nsay spreadsheets over the years the\nprocess itself has just improved as\nsystems improve as technology improves\nspreadsheets are the way to go\nspreadsheets overall when you do have\nprobably anywhere from zero to twenty\nthousand lines of data it's a good way\nto go you can really pull out the data\nwhether I'm trying to see how much a\nclient's making per month but they may\nhave you know a thousand transactions\nall of that's helpful I can use this\nspread sheet to whittle down\nwhat is actually going on per month or\nif I want to do a sum if or you know if\nthis happens give me this number it's\nreally helpful to be able to dig in and\nwrap your hands around it and take\nsomething that seems on the surface 20\n000 lines seems almost unmanageable but\nif I take it and I massage it put it in\na spreadsheet and then sort it filter it\nmake it pretty put it in a pivot table I\ncan get what I need it's just all about\nnot looking at it as being this\nintimidating thing but making it more\nmanageable and breaking it down into\nbite-sized chunks spreadsheets are the\neasiest way to analyze data and present\ndata we don't need any fancy tools or\nadditional software for spreadsheets\nit's like the commonly utilized language\nto communicate thank you for that\nInsight but let's move on to look at the\nother side of the coin what are the\ndrawbacks and limitations of using\nspreadsheets as a tool for data analysis\nI think one of the big cons in terms of\nanalyzing data within spreadsheets is\nit's really hard to reproduce state so\nin other words if you load in some data\nand you filter out some bad values or\nyou impute some missing values\nthere's no way to tell\nyour colleagues or your future self\nexactly the different steps you took uh\nto create that data set or to modify\nthat data set it's almost a dilemma\nbecause of the plethora of options\navailable within Excel and all of the\nfunctions that are\nthey're supposedly to make your life\neasier but it's nearly impossible to\nknow everything and\nyou can find yourself in what we\naccountants call analysis paralysis when\nyou're looking at something for too long\nor you're not well versed in a\nparticular Excel function so you may\nspend a lot more time energy and effort\ntrying to figure that one thing out and\nhave you done it a different way or\nmaybe a manual way you probably could\nhave gotten to the solution a lot easier\nand the downside of using spreadsheets\nis that if you have complex formulas\nvlookups if statements at times they\njust stop working and you have to\nrebuild them so I have found that it's\nbetter to use Excel just for simple\nanalysis and for a download of\ninformation\nI love a good spreadsheet I love using\nExcel and pivot tables to get to the\ndata but I find that if I start to get\nover 10 20 000 lines of data it gets a\nlittle tricky and sometimes the\nspreadsheets will crash so that's when\nwe might move to access and some of the\nother tools that we use it's very\ndifficult to handle the extremely large\ndata set in spreadsheet besides serashi\nhas less flexibility for a complicated\nanalysis and presentation\nforeign\n[Music]\nnow that you have learned basic\nspreadsheet terminology and how to\nnavigate your way around worksheets and\nselect data in Excel it's now time to\nstart entering some data first we will\nlook at some of the handy viewing\nfeatures provided in Excel and then\nwe'll enter some data and then we'll\nedit that data when you have a lot of\ndata in your worksheet it can be useful\nto zoom in closer to a specific area of\nthe data the zoom slider at the bottom\nright corner of the worksheet allows you\nto do just that you can either click on\nthe plus and minus buttons or drag the\nslider to select your preferred Zoom\nvalue\nyou also have some Zoom controls in the\nribbon on The View tab Zoom lets you\npick a predefined zoom level or a custom\none the 100 button zooms the worksheet\nback to its original size and zoom to\nselection enables you to select an area\nof data and then zoom into that specific\nselection only\nif you want to see several areas of your\ndata at the same time while zoomed in\nyou can use the split button this splits\nthe screen into multiple sections and\nyou can scroll each section separately\nif you only want two sections you can\nremove either the horizontal or the\nvertical split by double clicking on it\nif you have headings in your columns\nlike a header row then you might want\nthose to remain on screen while you move\ndown the sheet to do that you need to\nuse freeze panes\nyou can freeze only the top row if you\nwish or if that doesn't suit as is the\ncase here then you can select the row or\neven just a cell in the row below the\nrow or rows you want to freeze and then\nselect freeze panes you can do a similar\nthing for columns if you want to freeze\nthem too\nand you can even freeze both rows and\ncolumns at the same time the trick here\nis to First select the cell that is both\none row below where you want to freeze\nand one column to the right of where you\nwant to freeze in this case that is cell\nC4\nnow we can scroll down the worksheet and\nacross the worksheet and we can still\nsee the header row and the manufacturer\nand model columns\nnow if you have multiple workbooks open\nnotice I said workbooks and not work\nsheets then you can switch between them\nby using view switch windows or the\nfaster method is to use the Control Plus\nF6 shortcut now let's enter some data\ninto our blank worksheet the easiest way\nto open a new worksheet from within\nExcel is to click the new button in the\nquick access toolbar or Control Plus n\nif you prefer keyboard shortcuts\nso let's enter some headings across the\ntop of the worksheet this is typically\nreferred to as a header row note that if\nyou press enter after typing data into a\ncell the next active cell is the one\ndirectly below which is not what we want\nin this case but if we press tab after\nwe enter data in a Cell it selects the\nnext cell along in the row as the active\ncell\nnow we'll enter some headings and press\ntab after each entry\nnotice that the text is slightly longer\nin some of the cells and it either gets\npartly hidden by the next cell or\noverlaps it if you click and hold the\ndivider line between two columns you can\ndrag it left and right to resize it\nmanually\nif you want to do that automatically you\ncan double-click the divider line\nbetween two columns as these are going\nto be headings for our columns let's\nmake them bold\nnow let's add another column between the\nparts and accessories column simply\nselect the right hand of those two\ncolumns then right click and choose\ninsert to put another column to the left\nof the selected column let's call it\nservicing sales\nto tidy up our column width\nsimultaneously we select all the columns\nfrom a to e then double-click any of the\ndivider lines between columns this\nautomatically reduces or increases each\ncolumn's width to fit the data in that\ncolumn\nokay now we have some headings let's\nenter some month data in column A so if\nwe type Jan in cell A2 and press enter\nThen it takes us to the cell below which\nis what we want in this case and we can\ntype Feb in cell A3 and so on until we\nget to December in a13. now let's\nsuppose you need to change a couple of\nyour headings you have several ways of\nediting existing data in a Cell you can\neither select the cell and then just\nstart over typing or you can select the\ncell and press f2 on your keyboard to\nput the cursor at the end of the cell\nand make your changes\nor you can simply double click somewhere\non the cell and put the cursor at that\nposition in the cell and make your\nchanges\nand you can even select the cell and\nthen click in the formula bar to edit\nyour cell data\nnow let's do the same for the parts and\naccessories column headings\nin this video we learned about some of\nthe viewing options in Excel and we\nlearned how to enter and edit data in\ncells in the next video we will learn\nhow to copy and fill data and how to\nformat the cells and data in a worksheet\nforeign\n[Music]\nnow that we have learned about some of\nthe handy viewing features provided in\nExcel and entered and edited some data\nlet's discuss how to move copy and fill\ndata and how to format cells and data to\nsuit our needs\nthe first thing we are going to discuss\nis how to move data so if you select a\nrange of cells in this case the headings\nin A1 to E1 and then hover over the top\nor bottom edge of a selected cell you\nwill see the move pointer then you can\ndrag the selection to another place on\nthe worksheet alternatively if you want\nto copy the data instead you do the same\nthing but this time you also hold Ctrl\nkey as you select and drag the selection\nto another location and you will see the\ncopy pointer if you are not comfortable\nwith dragging you can also use copy and\npaste menu commands or keyboard\nshortcuts\nif you select some data in column A and\ncopy it to the clipboard then you simply\nselect the new location and paste the\ncopied data\nyou can also move or copy between\nworksheets so let's create a new\nworksheet then select some data from\nsheet1 and this time let's use the\ncontrol plus C keyboard shortcut to copy\nit to the clipboard then choose the\nother worksheet and use the control plus\nv shortcut to paste the data however\nnotice that the column widths are not\nthe same as the original Source data so\nlet's undo that and try another paste\noption\nby default when you paste the copied\ndata it uses the column width settings\nof the destination cells so to paste it\nand retain the column widths of the\nsource data you choose the special\noption under the paste command called\nkeep Source column widths as an\nalternative to having to enter data\nmanually in a worksheet you can use an\nExcel feature that automatically fills\ncells with data when it follows a\nsequential series or pattern the feature\nis called autofill and it can be\nespecially useful when you need to enter\nlots of repetitive data into Excel such\nas date information\nfor example if you enter a month in a\nCell even using a shortened version of\nthe name you can use What's called the\nfill handle to select down to the end of\nthe series and autofill will work out\nwhat the series is based on the selected\ndata let's try the same thing with days\nof the week if you enter mun for Monday\nin a Cell then drag the fill handle to\nuse autofill it will determine that you\nwant to enter the days of the week\nsequentially however if you also enter\nwhen for Wednesday in the next cell down\nand select both cells in the series that\nis a16 and a17 and then drag the fill\nhandle down autofill determines that the\nsequence has changed to every other day\nand fills in the data series for you\nit's important to select all the cells\nthat determine the pattern when using\nautofill so that it can best determine\nwhat the pattern is in this case cells\na16 and a17\na similar thing applies to numerical\npatterns if you enter 5 in a cell and\nthen use the fill handle to fill the\ndata down the column because the data is\nnot the name of a day or month for\nexample autofill can't determine what\nthe pattern is yet so in this case it\njust copies the value 5 into every\nselected cell\nhowever if you enter the value 10 in B3\nand then use the fill handle to fill\ndata down the column autofill determines\nthat the pattern is incrementing by 5\neach time and it fills in the remainder\nof the data pattern for you\nnow we're going to look at formatting\nour data and there are essentially two\ndistinct parts to this first there's\nformatting of the cells themselves with\na fill color and a bold border for\nexample and bold text within it and then\nthere's formatting the data in the cells\nfor example making it text format number\nformat or a specific currency or\naccounting format\nlet's open the car sales worksheet we\nused previously then select the headings\nin cell A3 to P3 either using the mouse\nor you could use the shortcut keys\nControl Plus shift plus right arrow\non the Home tab click the Styles drop\ndown arrow and then select a style color\nfor your cells then you can make the\nselected cells bold\nthen you select the data in the\nmanufacturer column either using the\nmouse or the shortcut keys Control Plus\nshift plus down arrow in the Styles drop\ndown arrow select another style color\nfor the selected cells again you can\nmake the cells bold then you select the\ndata in the model column again either\nusing the mouse or the shortcut keys\nControl Plus shift plus down arrow\nin the Styles drop down arrow select\nanother style color for the selected\ncells this time you could make the\nselected cells italic\nand you can also change the font size\nand style lastly you can select all the\nother cells in the data by using the\nmouse or the Control Plus shift plus\nright arrow then down arrow and apply\nborders to the data cells now it's time\nto format the cell data the sales\nfigures in columns C and D can be\nformatted to display only one decimal\nplace just select the data and click the\ndecrease decimal button we also have an\nissue with a couple of the car models if\nyou look in cells b129 and b130 where\nthe model name is supposed to be\ndisplayed you can see there are actually\ntwo dates listed instead and if you look\nin the number format box the format type\nis custom this has happened because the\nmodel numbers are supposed to be the\nSaab 9-5 and the Saab 9-3 but when the\nfiles were imported from CSV files these\ntwo cells must have been incorrectly\ndetermined to be date values and not\njust numbers you can fix this by\nformatting these two cells as text and\nthen enter the correct values of 9 5 and\n9 3. the last thing we want to do is\nformat some data as currency if you look\nat the heading in column f it says it is\nprice in thousands of dollars and cell\nF4 is using the general format so let's\nchange the format of this column to\nAmerican currency format we select the\ncolumn F in this case then select more\nnumber formats from the drop down list\nthen we choose the currency option and\nthe correct currency symbol and format\nand we're done\nin this video we learned how to move\ncopy and fill data and how to format\ncells and sell data to suit our needs\nin the next video we will look at the\nbasics of formulas learn how to perform\nsimple calculations and learn how to\nselect ranges and copy formulas\n[Music]\nforeign now that we have learned how to\nmove copy and fill data and how to\nformat cells and data next we will take\na look at the basics of formulas\nincluding some basic calculations\nselecting ranges in formulas and how to\ncopy formulas a typical formula is made\nof several key components the equal sign\nstarts the formula off and lets Excel\nknow you are creating a formula in this\ncell the next part is the function which\nperforms the calculation for example the\nsum function adds up the values in\nreferenced cells or cell ranges\nthen comes the reference which is the\ncell or range of cells you want to\ninclude in your calculation and these\nneed to be enclosed in parentheses\nyou also have operators which specify\nwhat type of calculation to perform\ncommon arithmetic operators include\naddition subtraction multiplication and\ndivision and these are represented by\nsymbols the plus symbol for addition the\nminus symbol for subtraction the\nasterisk for multiplication and the\nforward slash for division there are\nother types of operators too namely\ncomparison text concatenation and\nreference you may also use constants in\nyour formulas which as the name suggests\nare numbers or values which you can\nenter directly into a formula and which\ndon't change this might be a whole\nnumber such as 5 it might be a\npercentage such as 10 percent or it\nmight even be a date so a typical\nformula might be equal sign sum open\nparenthesis B5 asterisk 20 close\nparenthesis which would take the value\nyou in cell B5 and multiply it by 20.\nlet's start with a few basic\ncalculations suppose you want to add up\nJanuary and February sales of\naccessories you would start by typing an\nequal sign which lets Excel know you are\nentering a formula then you type in the\nfunction you wish to use in this case\nthe sum function note the description\nnext you type an open parenthesis then\nyou select your cell range which in this\ncase would be E2 to E3 so you could\nenter that as E2 comma E3 then a closed\nparenthesis and press enter\nand if you wanted to add March sales as\nwell then you would have to extend the\ncell range to include E4 so you could\ntype E2 comma E3 comma E4 as your range\nand it will work\nremember to edit a cell you select the\ncell and either edit it directly in the\nformula bar or press f2 or double-click\nthe cell\nhowever it's very cumbersome and not\nvery flexible to do it this way because\nif you wanted to add up the entire\ncolumn then you'd have to type every\ncell reference one after the other so\nthankfully there's a better way instead\nof typing each cell to include in the\nreference you just put a colon between\nthe first and last values in our range\nso E2 colon E4 in this case and if you\nwanted the whole column then you would\nenter E2 colon e13 in your formula but\nthere's another way of doing it and\nthat's by using your mouse to select the\nrange so you still type equal sign sum\nthen open parenthesis but select the\nrange with your mouse or shift plus\narrow keys and just press enter Excel\nwill add the close parenthesis for you\nto total these columns up and add some\ntags you'll add some headings first for\nsubtotals and tax at twenty percent then\nyour formula will need to multiply the\nvalue in subtotals by 20 percent if you\nwanted to add up all the column\nsubtotals and calculate the taxes then\nyou would repeat the previous process\nfor each column but that's very time\nconsuming and you don't need to because\nExcel has some neat tricks to do this\nfor you just select the fill handle in\nthe bottom right corner of the cell and\ndrag across to the other cells to copy\nthe formula this is called autofill\nnotice how the formula is copied but the\nrow references change in relation to the\ncell's position on the worksheet so what\nwas E2 colon e13 has become B2 colon B13\nthese are known as relative references\nbut more on that later in the course and\nyou can do the same thing for the tax\nvalues in row 16. now you need a row for\nshowing the totals the calculation here\nis simple the subtotal value in cell B15\nadded to the tax in B16 and again you\ncan use the fill handle to copy the\nformula across if you wanted to Total\nthe sales of all products by month you'd\nadd a column heading notice how the cell\nstyle is copied to the new heading\nautomatically remember to widen a column\neither drag the divider manually or\ndouble-click the divider then enter the\nformula in cell F2 as you've done before\nhowever Excel has another trick up its\nsleeve it's called autosum and is found\non the Home tab in the editing group\nthis is a great little shortcut for some\nsimple common functions like sum average\ncount Max and Min but you can choose\nother functions too\nyou want some for this particular\ncalculation notice that it also has a\nkeyboard shortcut of alt plus equals and\nthen press enter and it's done\nnow you can use the fill handle to copy\ndown the remaining values but hold on\nthere is one more Excel trick to show\nand it's a good one suppose your column\nof data was very long you might have to\ndrag the fill handle down over several\nPages which isn't easy to do and can\neasily lead to errors When selecting\nlarge lists of data values rather than\nneeding to drag down to the rest of the\ncolumn you can just double-click the\nfill handle and it will automatically\ncopy the formula to all the remaining\ncells in that column this one is a real\nTime Saver\nfinally let's format all these values to\nuse the US dollar currency format\nin this video we learned about the\nbasics of formulas how to perform simple\ncalculations how to select ranges in\nformulas and how to copy formulas in the\nnext video we will look at how to use\nsome of the common functions used by\ndata analysts and discover some more\nadvanced functions\n[Music]\nnow that you have learned about the\nbasics of formulas learned how to\nperform some basic calculations and how\nto select ranges and copy formulas next\nwe will have an introduction to\nfunctions including using some common\nstatistical functions and then we will\nlearn about some more advanced functions\nthat a data analyst might also use\nfirst let's look at some common\nfunctions used for statistical\ncalculations We'll add some row headings\nfor average minimum maximum count and\nmedian then in cell B20 let's work out\nthe average of the car sales for the\nyear from the table above on the Home\ntab in the editing group we click on the\nautosum drop down list and choose\naverage\nnow because autosum tries to add up the\nvalues directly above it in the column\nwe need to modify the cell range here to\nB2 to B13 then we can use the fill\nhandle as we've seen before to copy the\nformula across to column e for the\nminimum calculation in B21 we select Min\nfrom the autosum list and again we need\nto modify the cell range so this\ncalculates the lowest value in our range\nand fill across to column e and for the\nmaximum calculation we select Max from\nthe list and then modify the range and\nonce again copy the formula across this\ncalculates the highest value in our\nrange in b23 we will calculate the count\nwhich basically just means the number of\nvalues that exist in the selected range\nso we select count numbers from the list\nthen modify the range for the median\ncalculation we can select more functions\nfrom the autosum list then select\nstatistical as the category and scroll\ndown to find the median function\nthe median Returns the exact middle of a\nrange of selected values note that if\nyou're selecting an odd number of values\nit will return the figure that is the\nmiddle value in your selected range but\nif you have selected an even number of\nvalues in your range it will return the\nmiddle figure between the two middle\nvalues in your range\nonce again we need to change the cell\nrange to B2 to B13 and we can then copy\nthis formula across to column e\nyou've seen autosum and some of the\ncommon statistical functions in Excel\nbut there are another 400 plus other\nfunctions available so let's explore\njust a few of those now\non the formulas tab in the function\nLibrary group there are drop-down lists\nfor several function categories the\nfirst is a list of recently used\nfunctions which updates automatically as\nyou use them then you have functions\nrelated to financial calculations if you\nhover over the name of a function you\nsee a short description for each one so\nhere we have the accrued interest\nfunction and here is the interest rate\nfunction\nThe Logical list has Boolean operator\nfunctions such as and if and or\nthere are several functions related to\ntext such as concat which is an updated\nversion of a previous function called\nconcatenate which is still supported by\nthe way for backwards compatibility find\nand search there are also several\nfunctions related to dates and times\nsuch as Network days weekday and weeknum\nin the lookup and reference list there\nare functions such as areas hlookup sort\nby and vlookup in the math and trig list\nyou'll find lots of useful mathematical\nfunctions such as power sumif and some\nproduct alongside many functions for\ntrigonometric purposes such as cosine\nsine and tangent\nthere is also a more functions list\nwhich provides several more function\ncategories such as statistical\nengineering and information in the\nstatistical list you'll find functions\nsuch as average count Max median and Min\nwe saw some of these used earlier in\nthis video\nif you're struggling to find the\nfunction you want in these lists you can\nalso search for a function just click\nthe insert function button on the\nformulas Tab and then either browse the\ncategory lists available or choose all\nand look down the alphabetical list for\nthe function you want alternatively type\nthe name of a function you want and\nclick go to search for it then select\nthe one you want from The Returned\nsearch\nin this video we learned about the\nbasics of functions how to use some of\nthe more common functions that a data\nanalyst might employ and looked at some\nof the more advanced functions available\nin Excel in the next video we will look\nat referencing data in formulas\nspecifically differentiating between\nrelative and absolute references and\nerror handling in formulas\n[Music]\nnow that you've had an introduction to\nfunctions seeing the use of some common\nstatistical functions and learned about\nsome of the more advanced functions that\na data analyst might use in this video\nwe'll look at the difference between\nrelative absolute and mixed references\nand formulas as well as how to use them\nand we'll learn about formula errors in\nExcel\nit's important to understand the\ndifference between relative and absolute\nreferences when creating your formulas\nby default in Excel cell references are\nalways relative references the term\nrelative is the key here because it\nmeans that when you reference a cell you\nare in fact referencing the cell's\nposition in relation to the cell that\nthe formula is in\nthat is why when we have been copying\nformulas from one cell to another so far\nin this course using either copy and\npaste or the fill handle we haven't\nneeded to modify the cell references\nbecause Excel assumes you are using\nrelative references\nwhen the formulas are copied the cell\nreferences are changed to match the\nrelative positions of the cells that are\nbeing copied to\nso now we know that relative references\nare the default in Excel but how do we\nmake it so that the cell references\ndon't change when we copy them for that\nyou need to use absolute references in\ncontrast to relative references absolute\nreferences to cells stay the same when\nyou copy a formula containing such\nreferences\nlastly there may also be some instances\nwhere you only want one of the cell\nreference identifiers to be absolute and\nthe other one to be relative for example\nyou might want the row identifier to be\nabsolute but the column identifier to be\nrelative or vice versa these are called\nmixed references and an example of this\nwould be equal sign a dollar sign one\nplus dollar A3 where a dollar one has a\nrelative column and an absolute row or\ndollar A3 has an absolute column and a\nrelative row\nin contrast to relative and absolute\nreferences when you copy a formula\ncontaining mixed cell references any\nrelative cell references will change\nwhereas any absolute cell references\nwill stay the same in the copied formula\nfirst let's look at an example of using\nrelative references in a formula for\nexample if we enter the formula equals\nA1 Plus A3 in cell four note the blue\nand red highlighted cells in A1 and A3\nthese denote the cells being relatively\nreferenced in the formula if we copy the\nformula to the cell directly below using\nthe fill handle we can see that the\nresult changes and if we look at the\ncopied formula you can see that the blue\nand red cell references have changed\nrelative to their position on the\nworksheet the formula has been changed\nto equals A2 plus A4 in the copied\nformula that is each cell reference has\nmoved one cell down and if we copy and\npaste the formula to C7 you can see that\nthe result also changes and again we can\nsee that the blue and red cell\nreferences in the copied formula have\nchanged now let's look at an example of\nhow to use absolute references in a\nformula all you need to do to make a\ncell reference absolute is put a dollar\nsign in front of the column and or row\nidentifiers in the formula for example\nif we enter the formula equals dollar\nsign a dollar one plus sign dollar a\ndollar three in cell E4 note the blue\nand red highlighted cells in A1 and A3\nthese denote the cells being absolutely\nreferenced in the formula when we copy\nthe formula using the fill handle you\ncan see that the result stays the same\nthis time\nand if we look at the copied formula you\ncan see that the blue and red cell\nreferences haven't changed the formula\nis still equal sign dollar a dollar one\nplus dollar a dollar three in the copied\nformula that is the cell references\nhaven't changed\nsimilarly if we then copy and paste the\nformula to E7 you can again see that the\nresult stays the same this time and we\ncan see that the blue and red cell\nreferences haven't changed the formula\nis still equal sign dollar a dollar one\nplus dollar a dollar three in the copied\nformula that is the cell references\nhaven't changed lastly we'll look at an\nexample of how to use mixed references\nin a formula\nso if we enter the formula equals a\ndollar one plus dollar A3 in cell G4\nnote the blue and red highlighted cells\nin A1 and A3 these denote the cells\nbeing referenced in the formula\nif we copy the formula to the cell below\nusing the fill handle you can see that\nthe result changes but it's a different\nresult from the previous examples and if\nwe look at the copied formula you can\nsee that the first blue cell reference\nhas stayed the same but the second Red\nCell reference has changed if we copy\nand paste the formula to G7 you can see\nthat the same thing happens the result\nchanges and again we can see that the\nfirst blue cell reference has stayed the\nsame in the copied formula while only\nthe Red Cell reference has changed\nnow we'll have a quick introduction to\ndealing with formula errors in Excel\nbecause of the complexity of writing\nformulas especially the more complicated\nones there are bound to be occasions\nwhen you make a mistake in the syntax or\nin the data selection which will lead to\na formula error errors are typically\ndenoted by displaying in the cell that\nis supposed to be displaying the result\none of the error codes in this list\nwhen you see multiple hash symbols in a\nCell It's not really an error it just\nmeans the column either isn't wide\nenough to display the whole word or\nvalue or it contains a negative date or\ntime value\nso if we type Control Plus semicolon\nthen space then Control Plus shift plus\nsemicolon it enters today's date and the\ncurrent time but the cell is too narrow\nto display it so what we see is multiple\nhash symbols if we adjust the column\nwidth we can now see the cell contents\nso as I said this really shouldn't be\nconsidered as an error however if we\nenter the formula seen in cell i7 when\nwe press enter we see a hash name error\nthis error was caused by trying to use\nan X as a multiplication operator when\nin fact it should be an asterisk note\nthe small green triangle in the top left\ncorner of the cell\nalso note that when you select the cell\nan exclamation mark appears providing\nyou with a hint about what caused the\nerror in this case it says the formula\ncontains unrecognized text when you\nclick the drop down error next to the\nexclamation mark for an error you see\nseveral options the first line also\ngives you a clue on the nature of the\nerror this one says invalid name error\nso it was probably a mistyped cell\nreference value or function name if you\nclick help on this error a help pane\nopens with specific information related\nto this error if you click show\ncalculation steps a dialog box opens\ndisplaying the current syntax with the\nerror underlined and you can try to\nevaluate the error\nif you are certain the error is\nincorrect you can choose ignore error\nand if you want to edit the formula\nclick edit in Formula bar and the cursor\nwill be focused in the formula bar so\nthat you can try and correct the formula\nerror\nif you click error checking options the\nExcel options dialog box is opened at\nthe section related to error checking\nrules and you can modify these options\nto suit your needs each of the errors\nyou make which generate one of the error\ncodes listed at the start of this video\nwill have a different reason and a\ndifferent solution\nfor more information on each of these\nerrors and typical Solutions visit the\nlink provided\nin this video we learned about\nreferencing data in formulas\nspecifically differentiating between\nrelative absolute and mixed references\nand how to use them and we learned about\nformula errors in Excel\n[Music]\ndata analysis can play a pivotal role in\nbusiness decisions and processes in\norder to use the data to make competent\ndecisions we must have the right\ninformation for the project and the data\nmust be free from errors in this video\nwe will learn how to profile data to\ndiscover inconsistencies whether we are\nworking with small sets of data or\nanalyzing a spreadsheet with thousands\nof rows one of the most difficult parts\nof the data analysis is finding and\nkeeping clean data to help with this\nprocess and qualify the data look at\nthese five traits accuracy completeness\nreliability relevance and timeliness\naccuracy is the first and most\nsignificant aspect to data quality a\ndata analyst must clean the data set by\nremoving duplicates correcting\nformatting errors and removing blank\nrows\nanother important aspect of data quality\nis determining if the information\nrequired to complete the data set is\nreadily available why does this matter\nas a trait for Quality data let's say we\nare given the task to calculate the\nrevenues of all sales per region after\ncollecting the data we discovered that\nno regions were specified this data\nwould then be considered incomplete and\nother sources would have to be\nconsidered to obtain the data required\nreliability is another vital factor in\ndetermining the quality of data for\ninstance let's say we are given the task\nto determine the agent Revenue by\ncustomer when Gathering the data we find\nthat agents keep their own records and\ndo not always update the information in\nthe shared company database with those\nfactors in mind we would then determine\nthat the data in the shared company\ndatabase was unreliable and new\nprocesses would need to be established\nto ensure reliable data relevance is\nanother trait of quality data when\ncollecting information a data analyst\nmust consider if the data being\nassembled is really necessary for the\nproject\nfor example when reviewing the data\nrelated to the sales revenue per\ncustomer information such as customer\nbirthdays and other personal information\nis also included by making the\ndetermination early to exclude the\npersonal information from the data set\nthe analyst would save themselves from\nhaving to review unnecessary information\nthe last factor in determining the\nquality of the data is timeliness this\ntrait refers to the availability and\naccessibility of the selected data let's\nsay our sales report is going to be used\nfor weekly employee reviews but our\nreport is only refreshed once a month\nthis error in refreshing the data would\ncause a report to become outdated and\nwould have serious consequences for\nemployee reviews\nin this video we learned the important\nrole of a data analyst in qualifying\ndata by considering the five traits of\ngood quality data an analyst can save\ntime avoid serious issues and have data\nthat is free from errors in the next\nvideo we will take the collected data\nand learn how to import it to our\nspreadsheet\nforeign\n[Music]\nnow that you have learned about the\nimportance of data quality in this video\nyou will learn how to import data from a\ntext file using the text import wizard\nlearn how to adjust column widths and\nlearn how to add and remove columns and\nrows\nas you know by default Excel works with\nDOT xlsx or dot XLS files and opens them\nas workbooks but Excel can also use data\nthat is in other formats such as plain\ntext or data that has been comma\nseparated and tab separated sometimes\nthese source files will be saved with a\nDOT txt extension and referred to as\ntext files but others might be saved\nwith a DOT CSV file extension and are\ntypically referred to as CSV files here\nin notepad I have opened a text file\nthat contains data about car sales and\nit uses comma separated values or csvs\nto separate each bit of data in a record\nnotice that the Top Line holds headings\nsuch as manufacturer model engine size\nand so on and each one is separated by a\ncomma we want these to become our\nheaders when we import the file into\nExcel the line below these headings is\nthe first line of real data and again\nyou can see that each piece of data is\nalso separated by a comma there are 16\nheadings and there are also 16 pieces of\ndata on each of the lines below the\nheadings if we scroll to the bottom we\ncan see that last data record is for the\nVolvo S80 now to open the file in Excel\nwe choose file open and then either\nselect the file from the recently used\nlist or click browse to find the file we\nwant to import when we open the file the\ntext import wizard launches\nautomatically and it will start to try\nand determine what your file is note\nthat it has been detected as being a\ndelimited file that is one that has its\ndata fields separated by a character\nsuch as a comma or a tab as we want the\nheadings to become headers in Excel we\nneed to ensure that we select the option\nmy data has headers we can see a mini\npreview of the data in the preview box\nbelow\nthen we click next to proceed in the\nwizard in Step 2 of The Wizard we need\nto select our delimiter that is which\ncharacter is separating our pieces of\ndata so we select comma and deselect any\nothers\nnote the data preview now starts to show\nus what the imported data will look like\nyou can scroll down and across this\npreview window to ensure that the data\nis going to look as you want and expect\nit all looks okay so we'll continue with\nthe wizard in step 3 of The Wizard we\ncan set the data format for each column\nfor example you might want to change a\ncolumn to text or date format in this\ncase we can just accept the default\nGeneral format and finish the import\nwizard\nin Excel we can see that the headings in\nthe text file have been imported as a\nheader row but also notice that some of\nthe columns are not showing all the data\nsome of the headings are not showing in\nfull and some of the data is not shown\neither all you can see are a number of\nhashes in the cells this is because the\ncolumn widths are too narrow in some\ncases if you remember you can manually\nadjust a column's width by dragging the\ndivider across but to change them all in\none go we select all the columns first\nthen double-click one of the selected\ncolumn dividers we can also do a similar\nthing with rows by dragging them to make\nthem bigger or smaller or\ndouble-clicking a row divider to Auto\nsize it there are some columns that we\nhave decided we don't really need namely\nvehicle type and latest launch so let's\nremove those this can either be done\nusing the delete drop down menu in the\ncells group on the Home tab and select\ndelete sheet columns or by selecting and\nright-clicking a column and deleting it\nthat way to add another column you\nsimply select the column to the right of\nwhere you want your new column to be\nthen right click the column and choose\ninsert\ngive the header a name such as year to\ndelete a row you don't need select the\nrow right click it and choose delete and\nto add a row select the row below the\nplace you want to add your new row right\nclick the row and choose insert\nif you want to save the file as an Excel\nfile you can either choose file save as\nor you can click save as in the yellow\ntooltip that appeared at the top of the\nworksheet when we imported the file then\nyou would choose Excel workbook or dot\nxlsx in the save as type box\nin this video we learned how to import\ndata using the text import wizard we\nlearned how to adjust column widths and\nwe learned how to add and remove columns\nand rows in the next video we will\ndiscuss the importance of data privacy\nincluding sensitive information and\npersonally identifiable data foreign\n[Music]\nwe will learn about data privacy and the\nregulations that govern the collected\ndata\nwhen collecting customer data specific\nregulations apply to how that data can\nbe used\nby understanding data privacy\nregulations and getting familiar with\nthe following three fundamentals you can\neliminate the risk of financial\npenalties and keep the trust of your\ncustomers\nconfidentiality collection and use\ncompliance\nconfidentiality is an important element\nin data privacy and it acknowledges that\nthe customer's personal information\nbelongs to them\nthe types of information that can be\naccessed by a data analyst can range\nfrom sales forecasts to employee\ninformation or even patient records when\naccessing these types of Records the\nanalyst must be able to recognize the\ndifferent types of personal data\npersonal information or Pi is any type\nof information that can be traced back\nto a specific individual this type of\ninformation can include anything from\nemails to images\npersonally identifiable information or\npii is specific information that could\nbe used to identify an individual\nthis type of information could include a\nsocial security number or a driver's\nlicense number and lastly sensitive\npersonal information or SPI may not\nnecessarily identify a specific\nindividual but contains private\ninformation that needs to be protected\nbecause if made public it could possibly\nbe used to harm the individual this type\nof information can include data about\nrace sexual orientation biometric or\ngenetic information\nby understanding personal data and the\nassociated regulations we can\nefficiently anonymize our data by\nremoving unnecessary information\nthis type of action can help build\ncustomer confidence and continue to\ndevelop the free flow of information\nwhen searching through data the analyst\nmust know the location of the company\ncollecting the data and the location of\nthe respondent knowing where the data\nwas collected is an essential element of\ndata privacy and what regulations must\nbe applied\nthe general data protection regulation\nor gdpr is a regulation specific to the\nEuropean Union and only applies to the\njurisdiction of the individual\na new law created in Brazil called the\nlgpd will take effect in August 2020.\nthese new data policy regulations apply\nto individuals within Brazil and ignores\nthe location of the data processor while\nthe United States does not have one\nCountrywide principle law for data\nprivacy because of this individual\nstates began to make their own\nregulations for instance California\ncreated the California consumer Privacy\nAct or CCPA to better protect customer\ndata\nthere are also industry-specific\nregulations that govern the collection\nand use of sensitive and personal data\nfor example in healthcare HIPAA or HIPAA\nprivacy rules govern the collection and\ndisclosure of protected health\ninformation in retail the PCI standards\ngovern credit card data and failure to\nsafeguard card holder information can\nresult in Hefty fines\nwith a basic understanding of these\npolicies we are able to remain compliant\nwhen handling any sensitive information\nunfortunately breaches and customer data\nis an all too common occurrence and\nunderstanding how to remain compliant is\nessential\nunderstanding the data privacy\nregulations of the European Union the\nUnited States and other countries as\nwell as Industries is key to keeping\ndata safe\ncompanies must comply with these privacy\nregulations at all times and also make\nsure policies are readily accessible to\nemployees\nfor example let's say a data analyst\ndownloads a spreadsheet of sensitive\ninformation in order to complete the\nreport by Monday morning the analysts\ndecided to take their work laptop home\nfor the weekend\nafter driving home the analyst\naccidentally left the laptop in their\ncar the next morning they found their\ncar had been stolen along with the\nlaptop because it is the responsibility\nof the company to keep customer data\nsafe this was a breach of privacy when\nthe data left the company property\nthis type of action could not only cost\nthe company large amounts of money in\nfines and penalties but could also\nreduce customer confidence causing a\nsignificant impact to revenue\nwhile data privacy applies to most data\nthat is collected there are some\ninstances where these regulations do not\napply in order for these laws and\nregulations not to apply the particular\ncollection of data must be completely\nanonymous\nto make data Anonymous means to exclude\nall data which ties it back to a\nparticular individual\nwhile this approach might not be\npractical in all circumstances\ncollecting data with privacy in mind\ncould remove privacy limitations and\nmake data collections more accessible\nin this video we learned about the\nimportance of data privacy and the\nchallenges that data analysts can face\nwhen collecting and sorting through data\nin the videos in the next lesson we will\nlearn about different methods for\ncleaning data in a spreadsheet\nforeign\n[Music]\nwe will listen to several data\nprofessionals discuss the importance of\ndata quality and data privacy as they\nrelate to data analysis\nlet us start with what is the importance\nof data quality as it relates to data\nanalysis data quality is of the utmost\nimportance in terms of data and\nanalytics and the reason behind this is\nbecause as soon as what you're\npresenting does not align with what\nsomeone expects that's the first thing\nthat they tend to go after where did you\nget the data what's happened to the data\nhow has it been transformed because\npeople like to think that they know and\nunderstand their their business and when\nyou start to challenge that if you don't\nhave the ground to stand on of the data\nthat it's quality that it's clean and\nthat it is from a trusted Source that's\nwhen you start to get into a lot of\ndiscussions a lot of debate and\nultimately the plot of what you're\ntrying to present gets lost the backbone\nof any successful data analysis project\nis good quality data there's a common\nterm in computer science called garbage\nin garbage out which is essentially if\nyou read in bad quality data\nyou can expect to get bad quality\nresults so there's really nothing more\nimportant when doing a data analysis\nthan making sure that you're working\nwith good quality data and it's really\nimportant to sense track the data\nyourself and really feel comfortable uh\nthat the data you're using is of a\nreally high quality\ndata accuracy is above all garbage in\ngarbage out it's a waste of time to\nanalyze data of poor quality and it\nmight mislead the business Direction the\nIntegrity of the data that you're using\nor providing for someone else to use is\nof the utmost importance data is used to\ndetermine when or where to launch a\nproduct if a division is profitable or\nnot and it's easy to get things confused\nif you're not paying attention to the\ndetails using inventory as an example if\nyou're looking at inventory at a skew\nlevel and you accidentally pick the\nwrong SKU to analyze and then you draw\nthese conclusions that this particular\nitem isn't profitable when in fact it is\nso that's a major major decision for a\ncompany to make obviously so the\nexpectation is that there will be lots\nof due diligence but in the beginning if\nyou start off with bad data and then you\nbuild on that only to\nlater realize that it wasn't a good idea\nyou've lost time energy effort and in\nsome cases Trust\nthank you for those viewpoints what\nabout the importance of data privacy as\nit relates to data analysis\ndata privacy is incredibly important\nespecially when you're working in\nIndustries like Pharmaceuticals or\nHealthcare but that's not where it stops\nwe have to have the ability to make sure\nthat the users are getting the\nappropriate level of data based on their\nroles and their permissions\nnow we can do this through a number of\ncuts of the data specific to each\ngeography or each function or in some\ntools such as cognitive analytics we can\nstart to build out that as part of our\nmodel within there you can say who has\naccess to what whether it's at a\ngranular level of this person can see\ndata in Canada or the us or whether it's\nsimply this person can see this report\nin its entirety or not there's lots of\ndifferent ways to handle this but data\nprivacy is of the utmost important\nacross all Industries in today's world\ndata privacy is a huge thing on the tax\nside especially of our business we have\nwe have what we call pii personal\nidentifiable information we have to\nprotect that and so we can't just send\nthings through email we don't send tax\nreturns or even actually in our business\nperiod we don't send things through\nemail they have sensitive pii data in it\nwe encrypt it we make sure the email is\nencrypted or we use software some\ncertain softwares that will allow us to\nnot show the social security numbers or\nthe names or the dataverse and what will\nhappen is we it has a certain sequence\nand we share that with the client by\ncalling them we don't put that in an\nemail and we certainly don't put that in\nthe same email with the encrypted\ninformation because we want to make sure\nthat you're always safe so we have to\nmake sure we're protecting it at all\ncost\n[Music]\nnow that we have learned about the\nimportance of data quality and data\nprivacy in this video we will learn how\nto deal with inaccurate data how to\nremove empty rows and how to remove\nduplicated data it's very common when\ncollecting or importing data whether\nthrough manual or automated processes to\nget errors and inconsistencies in your\ndata this can be as simple as spelling\nmistakes extra white space or the wrong\ncase used in text to empty rows or\nmissing values in your data to\ninaccurate or duplicated data having\nthese errors and inconsistencies in your\ndata can lead to issues with formulas\nnot working with unsuccessful sorting\nand filtering operations and therefore\ninadequately visualized and presented\ndata findings\nthese data errors and inconsistencies\nrequire you to carry out some form of\ndata cleaning routine to improve the\nquality and usability of the data\nlet's start off with one of the easier\nof those tasks which is spell checking\nin Excel this works in pretty much the\nsame way as you may have already\nencountered in applications such as\nMicrosoft Word or other common word\nprocessing applications I have some data\nhere relating to the sales of toy\nvehicles and the first thing we need to\ndo is Select what data we wish to check\nfor spelling in this case we will try\ncolumn K which contains the product line\ndata then we click spelling which is on\nthe review tab\nwell that seems to be okay so let's try\nthe country information in column t\nso we do have an error here where a\ncountry name has been misspelled or more\nlikely mistyped we just click change if\nwe are happy with the spelling\nsuggestion or we could choose another\nsuggestion from the list or even ignore\nthis error if we know the data is\ncorrect but in this case we will change\nit\nhere's another typo for a country name\nand here's one more\nso that seems to be all the errors in\nthis column let's try the final column\nnow which is the deal size in column X\nhere is a misspelling of the word small\nand another for medium and that seems to\nbe all for this column the next\ninconsistency we will look for is empty\nrows empty rows in your data can cause\nlots of issues relating to moving around\nyour data working with formulas and\nsorting and filtering therefore it's\nvery important to remove them from your\ndata if you remember from an earlier\nlesson when we click Control Plus down\narrow it should take us to the end of\nthat column of data but notice if we do\nthat in this data set the cursor keeps\nstopping when we get to an empty row\nmeaning that the data set is essentially\nbeing split into multiple sections\nseparated by these empty rows that's not\ngood so let's resolve that now we have a\ncouple of options one option is to just\nmanually scroll down the sheet looking\nfor empty rows and deleting each one\nwhich is easy enough and fine to do if\nyou only have a small amount of data but\nimagine if you were dealing with\nhundreds or thousands or even tens of\nthousands of rows that would be a very\nlaborious and time consuming process\nthere is a much better way which\ninvolves selecting all our data first\neither using the mouse or the Control\nPlus shift plus end keyboard shortcut\nthen we select the filter icon on the\ndata tab we can now see that each column\nhas a filter icon next to the column\nheader if we then select the customer\nname column filter in column M then\nuncheck select all then scroll down to\nthe bottom of the list we can check the\nitem called blanks and then click OK\nthis will now show only the empty rows\nat the top of our sheet this can be\nquite hard to see but if you look in the\nrow numbers you can see that rows 28 29\n65 73 74 75 and 117 are listed at the\ntop and are highlighted in blue text we\ncan now select these rows either using\nthe mouse or going to the first cell in\nthe First Data row which is a28 and then\nusing the Control Plus shift plus end\nkeyboard shortcut then delete the\noffending empty rows we then need to\nclear the filter and turn it off so we\ncan view our data again\nnow if we go back to the first row in\nthe top of the data sheet and try the\nControl Plus down shortcut again to go\nto the end of the data column it will\nwork the next inconsistency we'll look\nfor is duplicated rows of data it's\nquite common for duplicate data rows to\nexist in your imported data caused\neither by human input error or an error\nin the import process there are two ways\nof doing this in Excel the first way\nincludes reviewing the data you plan to\nremove first before deleting it to\nensure you are deleting the right data\nthis is our preferred method as it\nprovides an additional level of data\nsecurity the second method which we will\nalso show you is simpler as you don't\nreview the data to be removed first but\nit lacks the security of the first\nmethod it's important to select a column\nof data that you would not expect to\nhave duplicate values in for example if\nwe consider the price each column which\nis C we would expect lots of these\nvalues to be repeated because the unit\nprice of some products is the same so\nthis is a bad example of a column to use\nto find duplicates instead let's use the\nsales column in column e because it is\nfar less likely that these values will\nbe duplicated in the normal process of\nthings as they are the total sales for\neach order\nso we select the column and choose\nconditional formatting then highlight\ncells rules and then duplicate values\nwhen we click OK and scroll down the\nsheet we can see that only a few values\nhave been identified as being duplicates\nthere seem to be duplicate values in\nrows 36 to 40 and in rows 74 to 78.\nLet's zoom out so we can see both\nduplicate sections together\nit seems like these are in fact exact\nduplicate entries and are likely to be\nan input error\nlet's delete the second section of\nduplicate rows as they are out of\nsequence as they relate to motorcycle\nsales and are in the ships section of\nthe sheet\nso that was the first and recommended\nmethod of removing duplicate rows of\ndata which previews the data to be\nremoved first now let's try the second\nsimpler but less secure method let's go\nback to 100 zoom and go back to the top\nof the worksheet this time we select the\nwhole data sheet and on the data tab we\nuse the remove duplicates button we then\nunselect all the columns then only\nselect the sales column and the\nduplicate rows are deleted the last\ncleaning process we'll look at in this\nvideo is using the find and replace\nfeature to repair some misspelt surnames\nin the customer contacts column find and\nreplace tools are under find and select\non the home page in Excel if you have\nused other office products such as word\nit should be familiar to you already\nwe've had an email from a Swedish\ncustomer informing us that we have her\nsurname spelled incorrectly on her order\nsheets so we type the misspelled surname\ninto the find what box and click find\nnext then click it again to see there\nare multiple incorrect entries if we\nclick find all all instances are listed\nand we can open the replace tab to enter\na name to replace the incorrect\nspellings her surname should be Larson\nwith a double s so we'll replace all\ninstances with that corrected spelling\nthat looks better and we are finished in\nthis video we learned how to deal with\ninaccurate data how to remove empty rows\nand how to remove duplicated data in the\nnext video we will look at changing the\ncase of text fixing date formatting\nerrors and trimming white space from\ndata\n[Music]\nnow that we've learned how to deal with\ninaccurate data how to remove empty rows\nand how to remove duplicated rows in\nthis video we'll look at changing the\ncase of text fixing date formatting\nerrors and trimming white space from\ndata when you collect or receive data\nfrom various sources it's quite common\nto find that your data contains text in\nmixed case that is sum in uppercase sum\nin lowercase and some in capitalized\nproper case also known as sentence case\nsome of this may be intentional but\noften it's not Excel doesn't have a\nchange case button like there is in\nMicrosoft Word so you need to use other\nmethods to perform this data cleaning\ntask\nthose methods are functions namely the\nupper lower and proper functions you can\nuse these functions to help you change\nthe case of text in your data you can\nsee that the header row here is using\nall uppercase characters so if you want\nto change that to use proper case then\nyou need to add another row to put the\nfunction in this is referred to as a\nhelper Row the proper function is simple\nto use just type equals then proper then\nopen parenthesis then the cell reference\nin this case A1 then close parenthesis\nand press enter here you can see that\nthe result in A2 is in proper case now\nyou can try and drag the formula right\nacross to column X by using the fill\nhandle on A2 but this can be tricky when\nyou have a lot of columns so let's try\nanother way instead of dragging you can\nuse shift plus right arrow to select the\ncolumns across to X first then press f2\nto bring the cursor into focus in cell\nA2 then you hold down the control key\nwhile you press enter and it fills\nacross for you\nyou might think that you could now\nremove the original row but look at what\nhappens when you do you get a ref error\nbecause the formula is referencing an\ninvalid reference and the header row\ncells now contain just the failed\nformula rather than the actual header\ntext so you need to undo that and\ninstead you copy the contents of the\nhelper row to row one but when you paste\nyou need to choose the paste values\noption now the header row cells just\ncontain header text and you can remove\nthe helper Row in row 2.\nnow let's use the upper function to\nchange text from proper case to\nuppercase\ninsert a column to the right of the\ncolumn you want to change this will be a\nhelper column then you type the formula\ncontaining the upper function in the\nFirst Data cell in this new helper\ncolumn again it's a simple formula you\ntype equals then upper then open\nparenthesis then the cell reference in\nthis case T2 and then close the\nparenthesis and press enter you can see\nthe result in the country name in\nuppercase and you can then copy that\nformula down the rest of the column by\ndouble clicking the fill handle cross\nsymbol as before you then copy and paste\nthe contents of the helper column to the\noriginal column but use the paste values\noption now you can delete the helper\ncolumn\nnext we'll use the lower function to\nchange text from proper case to\nlowercase as before you insert a column\nto the right of the column you want to\nchange this will be another helper\ncolumn then you type the formula\ncontaining the lower function in the\nFirst Data cell in the helper column\nonce again it's a very simple formula\nyou type equals then lower then open\nparenthesis then the cell reference in\nthis case K2 and then close parenthesis\nand press enter\nyou can now see the result is the\nproduct line data in lower case and you\ncan now copy the formula down to the\nrest of the column by double-clicking\nthe fill handle once more as before you\nthen copy and paste the contents of the\nhelper column to the original column by\nensuring you use the paste values option\nnow you can delete the helper column\nit's quite common to receive data that\nhas a mixture of date formats or that\nuses a date format that isn't suitable\nfor your region now let's look at how to\nchange the format of some dates you can\nsee that this date format is currently\nusing a two digit day a two-digit month\nand a four digit year value when you\nopen the number format dialog box you\ncan see in the Locale box that this is\nan English or United Kingdom date format\nyou want to use a US date format so you\nfirst change the Locale to English\nUnited States in this list you can see\nthere are several date options to choose\nfrom let's choose one that uses the full\nmonth name then a two-digit day and a\nfour digit year value you could then\ncopy this formula to the rest of the\ndate cells however if you want to format\nthese dates using your own custom format\nyou can do that too in the number format\nlist you select custom and then choose\nan existing format that is similar to\nwhat you want and simply modify it to\ncreate a new custom format\nhere we'll have the day then three\nletter month then four digit year\nto apply that new custom date format to\nthe rest of the column you could either\nuse the format painter tool or you can\nselect the rest of the column and choose\nthe new column format from the custom\nlist in the number format dialog box\nyou might find that your data has some\nwhite space that is unwanted spaces in\nyour data here you can see that we have\nsome spaces at the start some spaces at\nthe end and some unwanted double spaces\nin the middle of our data we'll first\nhave a look at what you can do to clean\nup these unwanted spaces in your data by\nusing the find and replace feature in\nExcel so you first select all the data\nthen on the Home tab you click find and\nselect then replace to get rid of double\nspaces you enter a double space in the\nfind what box and a single space in the\nreplace with box then you click find\nnext and choose replace for each item\nyou want to change you could click\nreplace all to do all the fixes in one\ngo but unless you are absolutely sure of\nthe changes it's better practice to\ncheck and replace each one in sequence\nin case there are some valid reasons for\nthese these Extra Spaces if you have a\nvery large data set you might also\nchoose replace all to save you a lot of\ntime so using the find and replace\nfeature got rid of most of those\nunwanted white spaces but not all of\nthem we removed double spaces using that\nfeature but we also have some single\nspaces left at the start and end of some\nof the cells you can't use find and\nreplace to remove single spaces\notherwise you would lose all spaces in\nyour data including standard spaces\nbetween Words which you don't want to\nremove but there is another tool you can\nuse to clear spaces from cells and\nthat's the trim function to use the trim\nfunction you once again insert a helper\ncolumn the trim function is simple to\nuse just type equals then trim then open\nparenthesis then the cell reference in\nthis case M2 then close parenthesis and\npress enter you can then double-click\nThe Fill hand handle symbol to copy this\nformula down to the remainder of the\ncolumn now you need to copy the contents\nof the new column n to column M and\nremember once again to paste using the\npaste values option\nyou can now see that those erroneous\nspaces have been removed or more\naccurately speaking have been trimmed\nand lastly you can remove the helper\ncolumn\nin this video we learned how to change\nthe case of text how to change date\nformatting and how to trim white space\nfrom data in the next video we will\ndiscuss how to use the Flash Fill and\ntext to columns features in Excel to\nhelp clean data\nforeign\n[Music]\nhow to change the case of text how to\nchange date formatting and how to trim\nwhite space from data in this video\nwe'll discuss how to use the Flash Fill\nand text to columns features in Excel to\nhelp clean data we used Flash Fill\nbriefly earlier in the course as a quick\nmethod of entering data that fits a\nspecific pattern such as the names of\nmonths or days of the week but it can\nalso be used as a data cleaning tool it\ncan split a column of full names into\ntwo separate columns for the four name\nand surname and it can also help to\nmodify the naming convention used in a\ncolumn of names for example in the\nvehicle toy sales worksheet there is a\ncolumn containing the last names of\ncontacts and another containing their\nfirst names\nif you want to use the Flash Fill\nfeature to combine these names into one\nname column you first insert a helper\ncolumn let's call it contact name then\nin the first row in the new column you\nenter the full name of the first Contact\nin the format of your choice for example\nyou might want surname then a comma then\nthe for name or you might want surname\nand just an initial and so on in this\ncase let's just enter the name in the\nstandard format of fourname then surname\nwith a space between them and then we\npress enter next you'll start typing the\nsecond contact's name and you'll see\nthat Flash Fill displays a preview of\nthe remaining names for you if you're\nhappy with what's in the preview all you\nhave to do is press enter and it fills\nin the remaining names for you write\ndown the column it even works when there\nare two names in one of the columns such\nas Wing C here and dakuna here\nnow you can remove the original columns\nif you no longer need them\nso in the previous task we saw how to\ncombine two columns of data into one\ncolumn using Flash Fill now let's see\nhow to use it to modify the naming\nconvention in a column let's switch to\nthe customer contacts worksheet then in\nthe First Data row of the next column\nthat is B2 we type the name of the first\nContact using whatever naming convention\nwe want we'll use surname then comma\nthen space then the forename and press\nenter again when we start typing the\nsecond contact's name in the next row\ndown that is B3 Flash Fill detects the\npattern and fills in the remaining names\nin column B when we press enter you\ncould then copy and paste the column\nheader and delete the original column A\nwhat we couldn't do with Flash Fill was\ntake a single column with two names in\nand split that into two separate columns\nwe need to use the text to columns\nfeature to do that\nso we'll close this worksheet and we\nwon't save the changes\nnow let's see how the text to columns\nfeature can help with data cleaning too\nas the name suggests and unlike Flash\nFill the text to columns feature can\ntake a column containing multi-part text\nand split that text into one or more\nother columns this can be useful for\nsplitting any multi-part text such as\nnames or addresses into separate\ncomponent parts let's open the customer\ncontacts worksheet again then we'll add\ncolumn headings for the next two columns\nand copy the cell format used in the\nFirst Column header then we'll widen the\ncolumns\nif we then select the data in column A\nfrom A2 to a23 and on the data tab click\nText to columns a wizard is launched\non the first page of the wizard ensure\nthat delimited is selected on the second\npage ensure that only space is selected\nas the delimiter on the third page of\nthe wizard click the little arrow next\nto destination and select B2 on the\nworksheet then click the little arrow\nagain to return to the wizard we're now\nfinished with this wizard\nyou can now see that the full customer\ncontact names in column A have now been\nsuccessfully split into two new columns\nin b and c and you could now remove\ncolumn A if you no longer need it we'll\nclose this worksheet and again we won't\nsave the changes\nyou can also achieve the same result\nusing functions this would be required\nif you were using Excel for the web the\nonline version of excel as this doesn't\nhave the text to columns feature there's\nalso a bit more flexibility with\nfunctions which can be especially useful\nif you have names that are complex and\nmixed such as having hyphenated names or\nsome names with a middle name some with\ntwo middle initials and some with no\nmiddle initial\nso we open the customer contacts\nworksheet again then we'll add column\nheadings for the next two columns and\ncopy the cell format used in the First\nColumn header then we'll widen the\ncolumns next we'll enter the formula in\nB2 to extract the four name part of the\nname this formula extracts five\ncharacters from cell A2 starting from\nthe left and including the space\nthen in cell C2 we enter the formula to\nextract the surname part of the name\nthis formula extracts seven characters\nfrom cell A2 starting from the right\nthen we'll double-click the fill handle\nin cell B2 to use autofill to complete\nthe column\nand we do the same to the fill handle in\ncell C2 to use autofill to complete that\ncolumn also\nin this video we learned how to use\nFlash Fill and text to columns features\nin Excel to help clean data\nforeign\n[Music]\nwe will listen to several data\nprofessionals discuss issues around data\nquality can you tell us your experience\nwith poor quality data and the cleaning\nof that data a large portion of my time\nis spent cleaning\nverifying checking Data before I run an\nanalysis working in healthcare most of\nthe information captured is based off of\nwhat someone's put in so humans can't be\ncalibrated two people can have a similar\nsituation and look at things slightly\ndifferently so it's up to me to make\nsure that if one describes something as\nnavy blue and the other person describes\nit as dark blue that I consolidate it\nand make it blue that's just an example\nwe don't normally do that in healthcare\nbut the thought is that you always have\nto check the Integrity of the\ninformation before you do your analysis\nto make sure that your results are\naccurate\nno data is going to be perfect that's an\nunfortunate reality in the world in\nwhich we live in databases and data is\ncollected for the broadest possible\npurpose but oftentimes there are still\nthings that are missing or not quite in\nthe format that we want whether that's\ncollecting date and time as a single\nfield whereas when we're doing our\nanalysis we want to be able to break it\nout by day month and quarter\nthese are things that we can take into\nconsideration there's a lot of different\ncleansing activities that that can be\ndone and can be undertaken to help you\nget something that's specific and works\nfor you and the way you want to work\nI have had experiences with poor quality\ndata where I'm reviewing financial\nstatements and I'm looking at margins\ncalculating ratios trying to understand\nis what I'm looking at is number one\ndirectionally correct but two am I\nlooking at the right thing are all of\nthese costs current costs relevant to\nthe period that I'm analyzing has all of\nthe data been captured do I have all of\nthe revenue for a given month then you\nhave to go back and look at the sources\nscrub that information to validate that\nwhat you're seeing is correct and\nfrom an accounting perspective if that\ndata is incorrect or out of period Then\nadjustments need to be made to the\ngeneral ledger which houses the data to\nproperly reflect what's happening poor\ndata quality can really come into play\nand cause discussions that don't need to\nbe happening they can cause you to be\nsecond guessed they can cause you to not\nbe able to be firm and present your case\nand your data reliably now if this is\nthe case there's several different ways\nwe can handle this one is to go all the\nway back to the source to ensure that\nthe source data is being pulled\nappropriately or simply being able to\noutline and be very specific and Direct\nin terms of what Transformations or\nchanges have been done to the data\nthrough tracking this in something like\nWatson knowledge catalog and being able\nto present that to your audience if\nyou're filtering and sorting data and\nyou find that it's wrong you have to go\nback and and fix things that time could\nhave been spent working on other\ndeliverables and again it can cause a\ndata Integrity into question if you're\nconstantly having to redo or reiterate\ncertain parts of data and quite frankly\nit can be frustrating at times if you're\nhabitually having to do that so\npaying attention to the details and the\nminutia so that you're not wasting time\nbacktracking on something that you could\nhave fixed early on are just some of the\nmany benefits of ensuring that your data\nquality is good\nforeign\n[Music]\nnow that we have learned how to collect\nand clean our data it is time to decide\nthe best method for analysis in this\nvideo we will discuss the importance of\nfiltering sorting performing\ncalculations and shaping our data to\nprovide meaningful information\ndeciding how to manipulate our data can\nsometimes be difficult before we make\nany changes or adjustments we will need\nto visualize the final output\nbelow are some questions to ask before\nbeginning the task how big is the data\nset what type of filtering is required\nto find the necessary information how\nshould the data be sorted what type of\ncalculations are needed now that we have\nvisualized the final output we must\ndecide the best approach to shape our\ndata the most basic step would be to\nfilter and sort the data by sorting the\ndata we are able to organize it based on\nconditions such as alphabetically or\nnumerically for example if we wanted to\ncheck for duplicate order numbers we\ncould sort the data and quickly see any\nduplicates\nafter sorting and removing the duplicate\nrow we find that the view needs to be\nmore specific to meet our requirements\nwe now decide that we only want to see\nthe data for the month of November by\nadding a filter we can now choose to\nonly see items with a month ID that is\nequal to 11.\nby filtering our data we are now able to\nonly see the rows that meet the filter\ncriteria and it allows us to better\nanalyze our information\nbecoming familiar with all the tools to\nanalyze data can seem daunting but one\nkey benefit of using a spreadsheet is\nthe ability to use functions\nfunctions in Excel are organized by\nseveral categories including\nmathematical statistical logical\nfinancial and date and time based let's\nsay we wanted to get an average of\ncompany revenue for the month of June we\nrealize there are over a hundred items\nthat would need to be calculated in\nnormal circumstances to get an average\nwe would have to create a formula to add\neach row and divide by the total number\nof rows this type of calculation would\nnot only be very long but can expose the\nanalyst to possibly making a mistake\nwith the use of a function we would be\nable to simplify our calculation in one\neasy step equals average open\nparenthesis B1 colon b160 close\nparenthesis\nwhile sorting and filtering data on our\nspreadsheet can be useful on its own\nfirst converting your data to a table\nhas many benefits when we convert our\ndata into a table we are able to filter\nand calculate the data more efficiently\none example is the ability to easily\ncalculate columns for the column MSRP we\nchoose sum and we're able to quickly\ncalculate the sum of the column\nif we then look at the data and we only\nwant to calculate the MSRP total based\non Japan we would filter the country\ncolumn to only display Japan and the\ncolumn would then only add the values in\nthe rows that were associated with Japan\nwhile all data may not work in a table\nthere are quite a few advantages to\nformatting your data as a table\nautomatic calculations even when\nfiltering column headings never\ndisappear\nbanded rows to make reading easier\ntables will automatically expand when\nadding new rows\nsometimes data needs to be more\norganized than what a basic tabular\nformat can give us and creating pivot\ntables with charts can be a better way\nto analyze and display the required\ninformation\nin Excel we have the option of creating\na pivot table to display and analyze our\ndata and optionally an Associated pivot\nchart for example let's say we want to\nknow what company ordered products in\nthe month of October from the original\ntable of data we create a pivot table to\norganize and analyze the required data\nalong with a pivot chart to display the\ninformation by then adding the month\nfilter to the newly created pivot table\nwe can see the results for the month of\nOctober not only in the table but the\nchanges are automatically updated in the\npivot chart\nwhen trying to single out specific\ninformation in a large data set a pivot\ntable is a nice way to show only the\ninformation that is required this allows\nus to quickly and easily scan the\nessential information\npivot charts are a nice accessory to\nPivot tables as they allow us to\nvisually process data and in most cases\nwe'll let the audience grasp the\ninformation quicker the advantages of\nselecting a pivot table in chart are\nmanipulate data without using formulas\nquickly summarize large data sets\nability to display engaging charts and\ngraphs\nin this video we learned about the\nimportance of filtering sorting\nperforming calculations and shaping our\ndata to provide meaningful information\nand we learned about some of the tools\nto begin analyzing our data in the next\nvideo we will learn more about filtering\nand sorting our data\n[Music]\nforeign\nwe learned how to use the Flash Fill and\ntext to columns features in Excel to\nhelp clean data in this video we will\ndiscuss how to filter and sort our data\nto enable us to control what information\nis displayed and how it's displayed in\nour worksheets filtering your data\nenables you to gain more control over\nwhich parts of your data are displayed\nat any given time in Excel this can help\nwith the visibility of data by narrowing\ndown the data to within specified\ncriteria and parameters and it can also\nhelp when searching for specific pieces\nof data to filter your data the first\nthing you need to do is turn filtering\non which is very simple on the data tab\nclick filter and that's it you will now\nsee a small filter icon next to each of\nthe column headers as a side note if you\nwant to only filter on one or more\ncolumns select those columns first then\nclick filter as another other side note\nif you format your data as a table The\nColumns automatically have filter\ncontrols added to them so now each\ncolumn has a filter that can be applied\nto the data in that column in the order\ndate column you can filter on the years\nin product line you can filter on the\ndifferent product types and in customer\nname you can filter on each customer by\nname\nlet's first filter on the year we'll\nselect orders from 2004 only by\ndeselecting the other year and if you\nwanted to we could expand the year and\nfilter by months also but we won't do\nthat for now if you look at the status\nbar at the bottom of the worksheet you\ncan see that there are only 50 out of\n114 records now displayed if you want to\nclear a filter you can either click the\nclear filter from option or click the\nselect all item in the filter list now\nlet's filter on the product line column\nto display only the rows that hold data\nfor sales of classic cars\nand again we'll clear the filter lastly\nwe'll filter on the customer name column\nand only display sales to many gifts\nDistributors Limited\nand then clear that filter so far we've\nonly applied one filter at a time but\nsuppose you want to filter down to a\ngreater degree we can do that too by\njust enabling all those filters together\nand now we are only displaying sales of\nclassic cars to mini gifts Distributors\nLimited in 2004. remember if you only\nwant to clear one filter then click its\nfilter button in the column header and\nclick the clear filter from option but\nif you want to quickly clear all filters\nyou can use the clear button in the sort\nand filter group on the data tab so far\nwe've used what are commonly referred to\nas Auto filters but you can also use\ncustom filters to specify other criteria\nto apply to a filter to text or numbers\nfor example if you wanted to see sales\norders that are over or under a certain\nvalue you can do that with custom\nfilters for the sales column let's add a\nnumber filter that only displays sales\nthat are over two thousand dollars if\nyou look in the status bar you can see\nthat we are now showing 111 out of 114\nrecords then let's clear that filter and\nfilter it the other way to display the\nsales orders that are below two thousand\ndollars\nwe can see that there are only three\norders that are below two thousand\ndollars it's important to note that the\ndata rows that we don't see have not\nbeen removed they are still there they\nhave just been hidden from view by the\nfilters\nand this is indicated by the row numbers\nyou see on the left in blue the row\nnumbers start at 69 and jump in large\nincrements indicating that there are\nmany more rows of data in our data set\nthan are currently being displayed let's\nclear those filters if we look at a\ncolumn filter for a column that contains\ntext you will see that the menu item\nchanges to text filters instead of\nnumber filters and you can see that\nthere are several text filter options\nand if you want to turn off filtering\naltogether for a worksheet just click\nthe filter button on the data tab\nnow let's take a look at the basic\nsorting capabilities in Excel sorting is\na very important part of the role of a\ntypical data analyst you might need to\norganize your text-based data\nalphabetically your number based data\nnumerically or your date-based data\nchronologically when you sort data using\nthese logical parameters it makes it\neasier for you to conceptualize and\nvisualize your data in a more meaningful\nway\nwhen sorting data the first thing you\nneed to do is Select which data to sort\nfor example if you want to sort your\ncustomers alphabetically select a cell\nin the customer named column first and\nthen either sort by A to Z or by Z to A\nand if you want to sort your sales\nfigures numerically select a cell in the\nsales column first and then either sort\nfrom smallest to largest or from largest\nto smallest and lastly if you want to\nsort your customers order dates\nchronologically select a cell in the\norder date column first then sort from\noldest to newest or from newest to\noldest but you can also sort your data\nby more than one column at a time simply\nselect a cell in your data then on the\ndata tab click sort then either use the\nsort by column suggested or use the drop\ndown list to select a different column\nin this case we'll choose the order date\ncolumn as our first sorting criteria and\nwe'll choose oldest to newest in the\norder drop down list\nto add a further sorting level you click\nadd level then you choose another sort\ncolumn in the then buy drop-down list in\nour case we'll choose sales and for this\nsort level we'll choose largest to\nsmallest in the order list if you have a\nheader Row in your data as we do here\nthen ensure you select the my data has\nheaders checkbox then click ok to sort\nso the data is now sorted to list the\noldest orders by order date first then\nwithin each order date if there are\nmultiple instances with the same order\ndate then the next sorting level lists\ndata by the largest order values first\ndown to the smallest order values\nin this video we learned how to use the\nfilter and sort Tools in Excel to filter\nand sort our data to enable us to\ncontrol what information is displayed\nand how it is displayed in our\nworksheets\n[Music]\nin this video we will listen to several\ndata professionals discuss the\nimportance of filtering and sorting your\ndata why is it important to filter and\nsort your data\nfiltering and sorting are very important\nas part of your analysis and\nvisualization experience because this\nallows you to create one single view of\nthe data but then provide a function for\npeople to be able to do their own\nanalysis on it now just to clarify what\nwe mean by this is sorting tends to be\nhighest to lowest alphabetical or in\nsome cases you may want to create some\ncustom sorting where you put your\nparticular product or offering at the\nstart and then have the rest falling\nbehind it or you may want to group a few\nat the start to show your direct\ncompetitors versus others I love love\nlove the filter sort feature in\nMicrosoft Excel what it allows me to do\nis get to the heart of the data I can\ndrill down and see for example how much\nrevenue a client had for a specific time\nframe or how much money they made in a\nspecific time frame without looking\nthrough a lot of rows and and a whole\nlot of information so filtering and\nsorting really allows you to narrow it\ndown and to get very specific and get\nthe answers that you're looking for and\nnot just get loads of data that you\ndon't necessarily need\nand when we talk about filtering we talk\nabout this to mean that I have a\nparticular value on which I want to see\nthe data specified by\nfor example we had a bar chart showing\nour sales over months and I want to see\nit in a particular geography or for a\nparticular product line I could have\nthat available and allow me to filter\ndown so that my sales would be specific\njust to one geography or one product\nline\n[Music]\nthank you\nforeign\nhow to use the filter and sort Tools in\nExcel to filter and sort our data to\nenable us to control what information is\ndisplayed and how it is displayed in our\nworksheets in this video we'll discuss\nhow to use some of the most common\nfunctions a data analyst might use\nnamely if ifs countif and sum if\nfirst up let's look at how to use the IF\nfunction the IF function is one of the\nmost used logical functions in Excel the\nIF function enables you to logically\ncompare a value against criteria you set\nin the function and then return a result\nbased on whether the result of the\nlogical comparison is true or false and\nthese values can be text values or\nnumeric values an IF function\nessentially says if something is true\nthen return a value or do something but\nif it's not true then return a different\nvalue or do something else\nfor example in our vehicle toy sales\nworksheet if we wanted to have a column\nthat recorded whether the order had been\nshipped or not you could add a new\ncolumn to the right of the existing\ncolumn let's call it shipped and then\nenter the formula scene in cell H2 this\nformula is saying if the text in G2 says\nshipped then return yes and if it\ndoesn't then return no you can then use\nthe fill handle to copy this formula\ndown the column\nyou can see that most of the cells do\nsay yes but some don't as the order\nhasn't been shipped for one reason or\nanother we could also use the IF\nfunction to emphasize the size of an\norder so if we add a new column to the\nright of sales and name it 3K plus or\nminus then enter the formula seen in\ncell F2 this formula is saying if the\norder is over three thousand then return\nthe text over 3K but if it isn't then\nreturn the text under 3K and we can copy\nthe formula down the column\nin an ideal world you would only use the\nIF function to apply one or two\nconditions but there may be scenarios\nwhere you would want to apply multiple\nconditions in these cases you can use\nthe nesting capabilities of functions to\nbring together several if statements in\none formula these are called nested if\nfunctions\nfor example if we add another column\nhere for the order size and then enter\nthe formula seen in cell F2 you can see\nthat this formula contains multiple if\nfunctions one is needed for each\ncondition one for large one for medium\nand one for small and it requires three\nsets of parentheses\nso it's a relatively long and complex\nformula but it does work again we can\ncopy the formula down the column\neven though Excel technically supports\nthe nesting of up to 64 different if\nfunctions in a formula it is not a\nrecommended best practice\nhaving multiple if functions in a\nsingular formula can become extremely\nchallenging to manage for example\nsuppose you come across a formula like\nthis that you haven't used for some time\nor even worse was created by someone\nelse it could be quite difficult to work\nout how and why it is being used\nalso if your conditions increase then\nyou need to add more conditions to an\nalready quite complex and long formula\nwhich will only complicate matters more\nto resolve this issue a new function was\ndeveloped called IFS the ifs function is\nonly supported on Excel 2019 Excel for\nMicrosoft 365 and Excel for the web\nas the name suggests this function can\nreplace multiple nested if functions\nbeing used in a single formula to\nsimplify matters\nso if we add a further column for order\nsize but this time we'll use the ifs\nfunction instead as you can see in cell\nG2 this formula only has one set of\nparentheses instead of three and only\nuses one function instead of three\nlet's copy that formula down the column\ntwo\nnow let's have a look at another example\nof using the IF function but we'll\ncombine it with conditional formatting\ntoo\nif we switch to the car sales worksheet\nand add a new column to the right of the\nYear resale value column and call it\nretention percent then we enter the\nformula scene in cell G2 which will\ndivide the year resale value by the\noriginal retail price we need to format\nthis as a percentage and then we can\ncopy it down the column next we'll add a\ncolumn to highlight the retention value\nfor each car the formula we add here in\ncell H2 uses the IF function to state\nthat if the percentage in the previous\ncolumn is greater than 69 percent then\nMark it as good but if it isn't then\nMark it as poor once again we copy the\nformula down the column\nwe could also use conditional formatting\nto highlight the retention value\npercentages even more we select H2 and\non the Home tab click conditional\nformatting and make a new rule\nthe condition in our rule will only\nformat cells that contain a specific\ntext value and that value is the word\ngood\nand if it does match that condition then\nformat it with a dark green font and\nfill the cell in pale green\nlet's copy that conditional formatting\ndown the rest of the column you can see\nthat the cells that contain the word\ngood are now formatted as we defined but\nthe cells containing the word poor are\nnot\nlet's add another conditional format\nrule this time we'll select manage rules\nbecause we are going to add another rule\nto our existing rule the new rule will\nbe the same as the previous one with the\nexception of looking for a match with\nthe word poor instead and formatting\nthose matching cells with red text and a\npink background fill\nand once again we copy that down the\ncolumn\nnow all the cells that contain the word\npoor are formatted as red text with a\npink cell fill\nlet's now have a quick look at how to\nuse the countif function countif is one\nof the statistical functions provided in\nExcel you can use it to count the number\nof cells that meet a certain Criterion\nsuch as the number of instances where an\nemployee's name appears in a list of\nsales invoices or the number of\noccasions a particular part number\nappears in a list of purchase orders\nlet's switch to the vehicle toy sales\nworksheet suppose you want to find out\nhow many of the sales orders in the list\nwent to customers based in the United\nKingdom we enter the formula you see in\ncell ad7 note that when we are using\ntext as a Criterion we have to enclose\nthe text in quotation marks\nso there were six sales orders in the UK\nand if you wanted to discover the same\nthing for French customers then you\nwould just edit the existing formula or\ncopy it and then edit it you can see\nthere were 14 orders for French\ncustomers notice that this time the text\nentered was in lower case and it still\nworks so names in this function are not\ncase sensitive and let's do the same for\nUnited States customers there are 41\norders to customers based in the states\nthere is also a newer function called\ncountifs which applies Criterion to\ncells across multiple ranges to count\nthe number of occasions where all\ncriteria have been met this removes the\nneed to use multiple countif functions\nin a long and complex single formula the\ncountifs function is only supported on\nExcel 2019 Excel for Microsoft 365 and\nExcel for the web\nnow let's take a look at how to use the\nsum IF function which is a very commonly\nused mathematical function in Excel\nyou use the sum IF function to sum the\nvalues within a specified range that\nmeet specified criteria for example you\nmight want to add up only the salaries\nthat are over a specified salary level\nor you might want to find the total of\nall sales of a particular product\ncategory\nwe'll enter the formula scene in cell\nad10 this formula will add up each of\nthe sales orders that have a total of\nmore than three thousand dollars again\nnotice that because we have used an\narithmetic operator that is the greater\nthan operator we must enclose the\nCriterion in quotes\nif we specify a Criterion that is only a\nnumber we don't enclose it in quotes\nso the total sum of all orders that were\nover three thousand dollars is almost\nfour hundred and seventy thousand\ndollars you can also use wild cards such\nas question mark and asterisk when\nsearching for partial matches and you\ncan also specify to extract values from\na different column than the column where\nyou have specified the criteria for\nexample if we enter the formula you can\nsee in cell ad 13 it will sum all the\ncar sales in column e for only those\nproducts in the product line column that\nend in cars\nthere is also a newer function called\nsumifs that you can use to some cells\nbased on multiple criteria this removes\nthe need to use multiple sum if\nfunctions in a long and complex single\nformula the sumifs function is only\nsupported on Excel 2019 Excel for\nMicrosoft 365 and Excel for the web\nin this video we learned how to use the\nif ifs countif and some if functions in\nthe next video we'll look at how to use\nthe vlookup and hlookup reference\nfunctions\nforeign\n[Music]\nnow that we've learned how to use the if\nifs count if and some if functions in\nthis video we'll look at how to use the\nvlookup and hlookup reference functions\nvlookup is one of the most commonly used\nreference type functions in Excel and IT\nenables you to find data referenced in a\nlookup table\nit stands for vertical lookup and\ntherefore is a useful tool when you want\nto find something in a table or range by\nrow\nshortly we will look at hlookup which\nstands for horizontal lookup which looks\nfor data by column instead\nvlookup works by using a common shared\nkey between the source data and the\nlookup data in the lookup table a\ntypical lookup formula would look like\nequal sign vlookup open parentheses B3\ncomma A2 colon B12 comma 2 comma false\nclose parentheses where B3 is the lookup\nvalue that is the value or word you are\nlooking for A2 colon B12 is the lookup\ntable or range that is the table array\nor range of cells that contains the\nlookup value in a formula Excel\nreferences this as table underscore\narray the lookup table can be on the\nsame worksheet or in another separate\nworksheet two is the lookup column\nnumber that is the number of the column\nin the lookup table that contains the\nvalue you are looking for in a formula\nExcel references this as call underscore\nindex under score num\nfalse is an optional parameter that\ndetermines whether the match found has\nto be exact denoted by false or can be\napproximate denoted by true\nin a formula Excel references this as\nopen square bracket range underscore\nlookup close square bracket\nthe square brackets round this argument\nin the formula signifies that it is an\noptional argument whereas the others are\nrequired arguments of a vlookup formula\nif you don't specify the optional false\nor true parameter in your formula it\nwill default to false that is an exact\nmatch is required you can also use the\nnumber zero instead of false and the\nnumber one instead of true\nokay now let's see the vlookup function\nin action in the car sales worksheet\nsuppose we wanted a quick price list of\nour favorite cars the first thing we\nneed to do is put the column containing\nthe value we want to search for in the\nleftmost column as vlookup requires this\nthen we can delete the original column\nwe then enter the formula scene in cell\nV16 which is looking for the word\nCorvette in the table array from cell A2\nto g156 and then looks for the value in\nthe fifth column in this case the price\ncolumn that matches the row containing\nCorvette and returns an exact value of\nforty five thousand seven hundred and\nfive dollars\nnote that in this example we are using a\npart of our existing data table as the\nlookup table or table array\nlet's format that as U.S currency then\nwe'll format it to zero decimal places\nin fact rather than use the reference\na25 in the formula it will be easier to\nuse the reference to the word Corvette\nin the mini table in this worksheet\nwhere our list of favorite cars is so\nthat is V5 and the formula still works\nnow let's copy that formula up to the\nfavorite car table above it in the\nworksheet but there's a problem because\nwhen we copied the formula the cell\nreferences changed this happened because\nas we learned earlier in this course the\ndefault state of cell references is\nrelative and we want them to be absolute\nin this case so let's undo that copy\noperation to make the cell references\nabsolute we need to add dollar symbols\nto all the cell references in the\nformula this can either be done manually\nor you can put the cursor in each cell\nreference in turn in the formula and\npress F4 each time to automatically add\nthe dollar symbols\nlet's try and copy the formula again and\nthis time it works if we use the fill\nhandle on Cell W5 to copy it down to the\nrest of the cars it doesn't work in fact\nwe end up with the same result in every\ncell why because each one is referencing\nthe same cells in the lookup value\nbecause we used an absolute reference\nall we need to do now is modify the\nformula to remove the absolute reference\nfor just the row parameter in the lookup\nvalue part of the formula by removing\nthe dollar symbol\nso in cell W5 we change dollar V dollar\nfive to Dollar V5 comma then when we\ndrag the fill handle down it will copy\nthe formula correctly and all the prices\nwill be changed to reflect their correct\nretail price\nlastly to show that the two tables are\nnow connected by this vlookup function\nif we change the retail price for the\nChevrolet Corvette in the main data\ntable in cell e25 the price will also\nchange in the favorite car's price list\nlet's now take a look at the hlookup\nfunction which as we mentioned earlier\ndoes the same thing and works in\nvirtually the same way as the vlookup\nfunction but it looks for data in\ncolumns rather than rows\nso each lookup looks for a word or value\nin the top row of a table and then\nreturns a value in the same column from\na row specified in the table array\ntherefore you would use hlookup if your\ncomparison values were situated in a row\nalong the top of a data table in\ncontrast you would use vlookup if your\ncomparison values were located in a\ncolumn to the left of the data you want\nto find as they were in the previous\ntask\nof the two functions vlookup is used far\nmore frequently than hlookup because of\nthe nature of most data tables the\nSyntax for hlookup is identical to that\nof vlookup except that you specify a row\nindex number referenced in a formula by\nExcel as row underscore index underscore\nnum this indicates the number of the row\nin the lookup table that contains the\nvalue you are looking for\nlet's create a small lookup table on the\nright hand side of our main data table a\nfew columns have been hidden in this\nworksheet to make viewing a little\neasier\nso now we've got low HP medium HP and\nhigh HP in the top row of our lookup\ntable next we'll add winding symbols as\nratings for the three horsepower levels\none sad face for the low horsepower\nrating two neutral faces for the medium\nrating and three happy faces for the\nhigh horsepower rating\nnow let's add a new column to the right\nof the HP level column and call it HP\nrating then in cell L2 we'll enter the\nhlookup function this function will look\nfor the value in cell K2 which in this\ncase is medium HP and it will look for\nit in the cell range from y 21 to aa22\nwhich is our little lookup table and it\nwill return the answer it finds in Row 2\nof the table under medium HP and use an\nexact value note that we've used some\nabsolute references in this formula too\nnotice that what is returned is the text\nKK so we need to format the cell using\nthe wingdings font now when we\ndouble-click the fill handle the whole\ncolumn shows the HP rating symbols\nrelevant to each Row's HP level value\nand we're done\nalthough vlookup and hlookup are\nregularly still used as the de facto\nfunctions for lookup references in Excel\nthere is a newer function called xlookup\nthis version is only supported on Excel\ndesktop versions from Excel from\nMicrosoft 365 and on Excel for the web\nas well as on Excel for iPad and iPhone\nand Excel for Android tablets and phones\nxlookup is an improved and combined\nversion of vlookup and hlookup together\nit can work in any direction vertically\nor horizontally it also uses separate\nlookup array and return array values\ninstead of a single table array and a\ncolumn or row index number\nin this video we learned how to use the\nvlookup and hlookup functions in Excel\nto find and connect to data referenced\nin both vertical and horizontal lookup\ntables in the videos coming up in the\nnext lesson we'll start to look at using\npivot tables in Excel\n[Music]\nnow that we've learned how to use the\nvlookup and hlookup functions in this\nvideo we'll look at how to create and\nuse pivot tables in Excel we'll first\nlook at how to format our data as a\ntable then how to create pivot tables\nand use fields in a pivot table to\nanalyze data and lastly we'll see how to\nperform calculations in a pivot table\nhaving a worksheet full of informational\ndata is all very well but to really get\nsome use out of it we need to analyze it\nfrom different perspectives to find\nanswers to questions related to the data\nnow we've already used features such as\nfilters and formulas to draw\nmathematical and logical conclusions\nabout our data but not all questions can\nbe answered easily using filters and\nformulas alone\nin order to obtain usable and\npresentable insights into your data you\nneed something else and that's something\nelse is Pivot tables pivot tables\nprovide a simple and quick way in\nspreadsheets to summarize and analyze\ndata to observe Trends and patterns in\nyour data and to make comparisons of\nyour data\na pivot table is dynamic so as you\nchange and add data to the original data\nset on which the pivot table is based so\nthe analysis and summary information\nchanges too\na data analyst can use pivot tables to\ndraw useful and relevant conclusions\nabout and create insights into an\norganization's data in order to present\nthose insights to interested parties\nwithin the company\nbefore you start to create a pivot table\nin Excel it can be very helpful to First\nformat your data as a table the reason\nfor this is not only to make it more\norganized and defined and to add table\nstyles to your data but primarily it\nmakes it a lot easier when adding\nrecords to the data set\nin the car sales worksheet let's first\nselect any cell within the data and then\non the Home tab in the Styles group\nchoose format as table then choose a\nstyle from the gallery note that Excel\nautomatically knows the boundaries of\nour data range but we can change this if\nwe need to and ensure you select my\ntable has headers if indeed it does\nafter you click OK and the data has been\nformatted as a table note the filter\ndrop downs at the top of each column\nthese are automatically added when you\nformat as a table\nif we now scroll down to the bottom of\nthe table and start adding another row\nof data for another vehicle when you\nclick tab or enter note that it is\nautomatically formatted and included as\npart of our table okay now let's see how\nto create a basic pivot table and how to\nuse fields to arrange data in a pivot\ntable\njust before we do that there are a few\nthings you should use as a checklist to\nensure your data is in a fit state to\nmake a pivot table from and these are\nformat your data as a table for best\nresults ensure column headings are\ncorrect and there is only one header row\nas these column headings become the\nfield names in a pivot table remove any\nblank rows and columns and try to\neliminate blank cells also ensure value\nfields are formatted as numbers and not\ntext ensure date fields are formatted as\ndates and not text\nin the worksheet we can just select any\ncell in the table then on the insert tab\nwe click pivot table note that in the\nselected table or range box the table\nname table 1 is already entered for us\nif we hadn't just formatted this data as\na table we would specify the cell range\nhere instead under that we need to\ndecide whether we want to create the\npivot table on a separate new blank\nworksheet or on this worksheet a new\nworksheet is the default and is the most\ncommonly used option\nso a new blank worksheet opens\ndisplaying some basic pivot table\ninstructions in the graphic on the left\nof the worksheet and a pivot table\nFields pane on the right\nyou can rename the worksheet for the\npivot table if you wish\nto build the pivot table report we need\nto add some fields from the top of the\npivot table Fields pane to one or more\nof the sections in the bottom part of\nthe pane for example if we want to find\nout the total sales for each model of\ncar let's drag the manufacturer field to\nthe rows section of the report and and\nthen we'll drag the model field there\ntoo\nbut this isn't really the way we want it\nto look so we'll drag the manufacturer\nfield to appear at the top of the rows\nsection above the model which makes more\nsense with our data\nnext we'll add the price field to the\ncolumn section but again that really\nisn't the way we want to view the data\nso we'll drag price to the values\nsection instead which makes a lot more\nsense and looks a lot better\nnext we'll add the unit sales field to\nvalues too so now we can see both the\nindividual price for each model and the\nnumber of unit sales of each model\nlet's add the vehicle type field to\ncolumns but that doesn't seem very\nuseful so let's remove that field which\nwe can do in two ways either by using\nthe drop down menu or if we undo that we\ncan also do it by simply dragging the\nfield out of the columns section either\nto the left over the worksheet or to the\ntop over the fields list above\nlet's now look at how to perform a\nsimple calculation in a pivot table if\nwe look at the sum of price column in\nour pivot table we can see that the\nfigures are formatted as general so\nfirst let's change the format of these\nfigures to U.S currency this can be done\nby modifying the value field settings\nfor the field in the relevant section of\nthe pivot table Fields pane\nwe'll format the field as US Dollars and\nshow no decimal places next we'll add a\ncalculated field from the pivot table\nanalyze tab using the fields items and\nsets button\nwe want this field to calculate the\ntotal sales for each model by\nmultiplying the price by the number of\nunit sales\nwhen we create and add this formula it\ngets added to the pivot table Fields\npane as a field called total model sales\nand we can change the format to make it\nUS Dollars again\na new column called sum of total model\nsales has now appeared in the pivot\ntable in our worksheet\nin row five we can see that there have\nbeen over 360 million dollars of sales\nof the Acura Integra model and in row 7\nwe can see that there has been over a\nbillion dollars in sales of the Acura TL\nmodel\nin this video we learned how to format\ndata as a table how to create a pivot\ntable and use fields to analyze data in\na pivot table and how to perform\ncalculations using pivot table data in\nthe next video we'll look at some other\nfeatures of pivot tables\nforeign\n[Music]\nwe will listen to several data\nprofessionals discuss their experience\nusing pivot tables to analyze data what\nare your experiences using pivot tables\nto analyze data my experience using\npivot tables in Excel is extensive I can\nuse them all the time the thing to keep\nin mind is that you can sum average and\ncount easily you can set it to group by\nso people can choose what the parameters\nare at the top it's great if you've got\na couple of thousand records all the way\nup to whatever Excel can handle so a\npivot table is just a real simple way of\nmanipulation without having to do any\nactual querying or development language\nI once had a huge e-commerce sales data\nI need to analyze the kpis including\ngross merchandise volume and take rates\nhowever I can only generate limited\ninsights if I stay at high level with\npayment tables I was able to group the\ndata in terms of countries type of\nstores type of products which enable me\nto view the data and analyze the key\nkpis at different levels of granularity\nI use pivot tables and we use pivot\ntables in our firm especially during\naudits to assist us and help us to kind\nof drill down on the data because what a\npivot table does is it helps you to take\na large set of data and water it down to\nsomething that's meaningful so in the\ncase of audits a client might have you\nknow five hundred thousand dollars worth\nof Maintenance and Repair bills that are\nmade up of 300 invoices well we don't\nwant to see every invoice for every\ndollar we want to see the high dollar\ninvoices so we're going to use that\npivot table to narrow it down to the\ninvoices that actually are going to have\nthe highest level of impact on the\nfinancial statement I'd say Excel pivot\ntables are a great way to understand\nyour data quickly and effectively being\nable to just open up an Excel sheet put\nit into a pivot table drag and drop\nthings in to get a sense of what the\nnumbers look like what the values are\nreally can help you get a good sense of\nthe data in order to then start to build\nout something a little bit more robust\nbeing able to understand the fields what\nthey mean what they look like these are\nall things that can help you at the\nstart of a project as you're looking to\ndo your analysis uh pivot tables are\nincredibly useful to get a quick view of\nyour data and to look at multiple levels\nof your data in a very quick and clean\nway it's just very very easy to create a\npivot table on a set of raw data\naggregate it by some level of Interest\nbe it country be it you know country the\nuser is from be it\num\nthe year the user joined uh or anything\nelse\nbe it the some something related to time\num it's really good for a quickly uh\nseeing and understanding some of the\nmore high-level summaries that are\nhidden within your data\n[Music]\nforeign\nhow to create and use pivot tables in\nExcel in this video we'll look at some\nother features that we can use with\npivot tables including recommended pivot\ntables filters slicers and timelines\nfirst let's look at recommended pivot\ntables which isn't exactly a feature as\nsuch it's really more of a list of\nsuggested different combinations of data\nthat could be used when creating a pivot\ntable\nthese recommendations are based on the\ndata we select in the worksheet and they\nare a great way to get started creating\npivot tables if you don't have much\nexperience with them yet for example in\nthe vehicle toy sales worksheet if we\nselect column B which contains data\nabout the quantity of items ordered when\nwe choose recommended pivot tables from\nthe insert tab then we are presented\nwith a list of potential data\ncombinations related to the order\nquantity information\nhowever if we select column F which\ncontains order size information then the\nrecommended pivot table list changes to\nreflect that data and if we select\ncolumn e which contains sales\ninformation then the pivot tables\nrecommended are related to sales data\nlet's select the third one down which is\nthe sum of sales by territory because\nthat sounds like something we could get\nsome useful Insight from by presenting\nit in a pivot table\nnote that the new worksheet is opened\ncontaining the recommended pivot table\nand a new pane opens on the right called\npivot table Fields let's rename the\nworksheet to something more meaningful\nin the pivot table Fields pane you can\nsee that some Fields have already been\nadded to the rows and values areas\nalthough it's a recommended pivot table\nwe can still make it our own by adding\nmore fields for example\nso let's add the product line item to\nthe columns area using drag and drop now\nwe have columns for each of the product\nlines in our pivot table such as\nmotorcycles ships and trains in the\npivot table we can manually expand any\nfield we want to view its contents here\nwe can see that the order dates are\nlocated underneath the territory names\nin our pivot table\nnote that this matches the order of the\nfields in the rows area of the pivot\ntable Fields pane we can manually\ncollapse each of the fields too but we\nalso have the option of expanding all\nthe fields at once and collapsing them\nall too\nthe next feature we will delve into is\npivot table filtering\npivot table filters work in much the\nsame way as the standard filters we used\nearlier in the course note that we\nalready have some inbuilt filtering in\nthis pivot table for example the rows\nlabel header is a filter and we can\nfilter on any of the listed territories\nsuch as Japan just like standard filters\nit's very simple to clear a filter in a\npivot table\nwe also have a column labels filter\nallowing us to filter on any of the\nproduct line items in this pivot table\nfor example we could show data only for\nthe trains product\nwe also have the option of adding the\nproduct line field as a standard filter\ninstead of a column Heading by dragging\nit to the filters area in the pivot\ntable Fields pane\nand we can then use it as a standard\nfilter as we have done earlier in this\ncourse\nthe filter also allows us to select\nmultiple filter items but because it's\nnow being used as a standard filter\nrather than a column header we can't see\nthe split of the information on these\ntwo product lines we just see a combined\ntotal when we have the filter as a\ncolumn header the information on each\nproduct line was presented separately in\neach column let's display all the field\ntotals again and we'll drag the product\nline field back to the columns area\nwhere it was previously so we can see\nthe split of our different product lines\nand the pivot table\nthe next pivot table feature we will\nlook at are slicers slicers are\nessentially on-screen graphical filter\nobjects that enable you to filter your\ndata using buttons\nslicers make it easy to perform quick\nfiltering of your pivot table data and\nthey also display the current filter\nState making it easier for you to know\nand see what data is currently being\nshown and which is being hidden by the\nfilter\nfor example if we remove the product\nline field from the pivot table by\ndragging it out of the pivot table\nFields Pane and then from the pivot\ntable analyze tab we click insert slicer\nand then choose the territory field as\nour slicer\nwe can see that the slicer can be freely\nmoved around anywhere on the worksheet\nand it contains buttons for each of the\nterritory names such as emea North\nAmerica and Japan\nwe can also select the multi-select\nbutton to filter on multiple territories\nif we wish we can click the clear filter\nbutton to clear all the slicer filters\nlet's add another slicer to our\nworksheet for the product line field\nhowever be sure to select a cell in the\npivot table first because if you don't\nthen the insert slicer button won't work\nnote that slicers can also be added from\nthe filters group on the insert tab as\nwell as from the pivot table analyze tab\nwe'll select the product line field this\ntime for our slicer and drag it near the\ntop of the worksheet as before we can\nselect only one slicer item or we can\nturn on multi-select and choose several\nitems to filter on in the slicer\nthen let's clear the slicer filters and\nnow let's filter using both slicers\nnote that when you use multi-select\nfiltering when you select an item you\nare in fact filtering it out that is you\nare defining which items will not be\ndisplayed in the pivot table this is the\nopposite Behavior to when you were\nselecting single items in a slicer\nso now we are displaying only classic\ncars trains and trucks and buses\nproducts for the emea and North America\nterritories now let's clear those slicer\nfilters and put the product line field\nback in the columns area of the pivot\ntable so it's ready for the next feature\nwe will explore\nand let's move these slicers out of the\nway further down the worksheet\nthe last useful feature for pivot tables\nwe are going to look at is timelines a\ntimeline is another type of filter tool\nthat enables you to filter specifically\non date related data in your pivot table\nthis is a much quicker and more\neffective way of dynamically filtering\nby date rather than having to create and\nadjust filters on your date columns\nwe can add a timeline for our pivot\ntable either from the pivot table\nanalyze tab or from the insert tab again\nensure you select any cell in the pivot\ntable first we'll select the order date\nfield as our timeline filter\nthen we can drag it up the worksheet and\nenlarge it\nthe default for this timeline is to\ndisplay data by month but you can also\nfilter by days or by quarters\nyou can select a single quarter or you\ncan select a range of quarters in this\ncase we'll select 12 months between\nquarter 3 of 2003 and quarter two of\n2004. you can use the clear filter\nbutton to clear a timeline filter you\ncan also filter by years for example\nhere we have selected 2003 only and you\ncan combine slicers and timelines as\nfilters in a pivot table for example\nhere we can filter the slicers to\ndisplay only data for trains in the emea\nand North America territories and only\nin the year 2003.\nand if we filter on the year 2004\ninstead you'll see that there is no data\nbeing displayed meaning that there were\nno sales of trained products in 2004 in\neither the emea or the North American\nterritories\ntimelines and slicers have their own\ntabs in the ribbon when you select them\nand their properties can be modified to\nchange how they look and how they work\nfor example let's change this timeline\nto a light green shade and let's change\nthis slicer to a nice orange color and\nlastly to remove a timeline or slicer\nyou can either select it and press the\ndelete key or right click it and choose\ncut\nin this video we learned about some of\nthe other features in Excel that we can\nuse with pivot tables namely recommended\npivot tables filters slicers and\ntimelines\n[Music]\nit is often said that a picture is worth\na thousand words this phrase is\nespecially relevant when it comes to\ndata analytics data visualization plays\nan essential role in the representation\nof both small and large-scale data this\ncourse from IBM is designed to help you\ntell a compelling story with your data\nusing various visualization techniques\nyou will work with both Excel and cognos\nanalytics to acquire the basic skills\nneeded to create different types of\nplots charts and graphs and build\ninteractive dashboards which are\nimportant parts of the skill set\nrequired to become a data analyst\nyou will not only learn data\nvisualization techniques using Excel and\ncognos analytics but also practice using\nmultiple Hands-On labs and assignments\nthroughout the course\nin module 1 you will learn about\ndifferent types of charts and the Excel\nfunctions that are used to create basic\ncharts and pivot chart visualizations by\nlearning how to manipulate these\nfeatures and by creating visualizations\nyou will begin to understand the\nimportant role charts play in telling a\ndata-driven story in module 2 you will\nlearn about creating Advanced charts and\nlearn the basics of dashboarding and how\nto create simple dashboards in Excel you\nwill also learn how dashboards can be\nused to provide real-time snapshots of\nkey performance indicators\nin module 3 you will learn about cognos\nanalytics including how to sign up for\nit how to navigate around it and how to\neasily create stunning dashboards you\nwill also learn some of the more\nadvanced dashboarding capabilities of\ncognos analytics and make your\ndashboards Interactive\nin the final module you will complete a\ntwo-part Hands-On final assignment lab\nwhich will guide you on how to create\nvisualizations in Excel and how to\ncreate visualizations and dashboards in\ncognos analytics this will involve you\nunderstanding what the scenario\nrequirements are and then creating\nvisualizations and a dashboard to\nfulfill those requirements\nyou will follow two different business\nscenarios throughout the course with\neach using their own data set\nthese different scenarios and data sets\nwill be used in the lesson videos and in\nthe Hands-On Labs after completing this\ncourse you will be able to explain the\nrole visualizations play in conveying a\nstory about data create basic charts\npivot charts and advanced charts in\nExcel spreadsheets create a simple\ndashboard using Excel\nprovision and instance of cognos\nanalytics in the cloud\nnavigate around the cognos analytics\ninterface and leverage its Rich\nvisualization capabilities\nbuild interactive dashboards using\ncognos analytics with a variety of basic\nand advanced visualizations\nyou will also perform some intermediate\nlevel data visualization and dashboard\ncreation tasks to address a business\nscenario the course team and other peers\nare available to help in the course\ndiscussion forums in case you require\nany assistance let's get started with\nyour next video where you will get an\nintroduction to charts\nforeign\n[Music]\nwe'll give an overview of several\ndifferent types of charts and\nvisualizations and discuss how they can\nbe used to tell a story let's begin by\nlooking at a line chart When comparing\ndifferent but related data sets a line\nchart is a great way to display the\ninformation they are able to display\nTrends and show how a data value is\nchanging in relation to a continuous\nvariable\nfor example if time is a continuous\nvariable how has the sale of a product\nor multiple products changed\nnext we have pie charts this type of\nchart can show the breakdown of an\nentity into its subparts and the\nproportion of the subparts in relation\nto one another each portion of the pie\nrepresents a static value or category\nand the sum of all categories is equal\nto a hundred percent\nin this example we have a marketing\ncampaign with four distinct categories\nsocial sites native advertising paid\ninfluencers and Live Events with this\ntype of data representation we can\neasily see the total number of leads\ngenerated per category\nwe now look at one of the most commonly\nused charts the bar chart this type of\nchart is the most common as they are\neasy to create and are great for\ncomparing related data sets or parts of\na whole for example in this bar chart we\ncan see the population numbers of 10\ndifferent countries and how they compare\nto one another\nwe can also use stacked bars in which\neach bar is divided into sub-bars that\nare stacked end to end in this stacked\nbar we can see the population of each\ncountry split into four age ranges\nwould you like the graph to appear\nvertical and not horizontal then column\ncharts would be a great pick this type\nof chart can be used quite effectively\nto show change over time and to compare\nvalues side by side for example showing\npage views versus user session time on a\nwebsite as it changes on a\nmonth-to-month basis\nwhile this type of chart looks similar\nto a bar chart they cannot always be\nused interchangeably\nfor example a column chart may be better\nsuited for showing negative and positive\nvalues\nnext We have tree Maps which are useful\nfor displaying complex hierarchies using\nnested rectangles\nin this example the tree map depicts\nStatewide employment rates within the\npopulation of a country over the last\nyear the size of the rectangle\nrepresents the population and the color\nrepresents the employment rate we can\nclick on any region to see the\nemployment data of the sub-regions\nwithin the selected region\ntrying to display a pipeline or\ndifferent stages of a continuous process\nthen funnel charts are the way to go in\nthis Example The Funnel chart is showing\nthe conversion rate at each stage of the\nsales process from lead generation to\nthe final sale\nanother exceptional chart is the scatter\nchart in this type of chart the circle\ncolors represent the categories of data\nand the circle sizes are indicative of\nthe volume of data for example in this\nscatter chart we can see each product\nline by the number of units sold and the\nrevenue it brings\na scatter chart can be great for\nrevealing Trends clusters patterns and\ncorrelations between data points\nnext we look at bubble charts this is a\nvariant of scatter charts and they are\nuseful for comparing a handful of\ncategories to one another in terms of\nrelative significance for example\nunderstanding areas of significant\nexpenditure in an organization's sales\nbudgets\nlastly we have sparklines sparklines do\nnot include an Axis or coordinates yet\nthey display Trends simply and\neffectively these are great for showing\nthe general trend of a variation for\nexample stock market price fluctuations\nfrom the opening to the closing of a\ntrading day\nin this video we learned about the\nimportance of charts and how they are\nable to shape our data to provide\nmeaningful information\nin the next video we will dive into more\ndetails about how to create and\nconfigure different types of charts in\nExcel\nforeign\n[Music]\nwe will listen to several data\nprofessionals discuss the importance of\nusing visualizations to tell a story\nabout data\ncan you tell us about the importance of\nusing visualizations to tell a story\nabout data\nvisualizations are critical to\nstorytelling with data\num I think you're familiar with the\nphrase a picture is worth a thousand\nwords and that's really true here uh you\ncan get a much clearer picture of what's\ngoing on uh with your data if you have\nclean and clear data visualizations I\nalso think data visualization is super\nhelpful for the analyst that creates\nthem because it forces them to make\nchoices about what's really important in\nthe show and what isn't important in the\nshow for example if you're debating\nwhether you should look at things\ntemporally you can debate like\nam I is the overall trend the most\nimportant okay then I should do a Time\nseries data visualization\num do I think comparing one group versus\nanother is more important then you're\nmore likely to do a bar column chart uh\nso it's really important in clarifying\nthe data analyst thinking and\nvisualization is really important in in\ntelling a clear concise story to\nstakeholders humans are visual creation\nyou are more likely to tell a compelling\nstory and get buying with visuals I once\ngot a job offer with a visualized resume\ncreated by Tableau so one of the best\nways to present data is visually numbers\nby themselves for the most part will\ntend to overwhelm people so if I walk up\nand I just and I'm talking in a company\nmeeting and I say well last year in 2019\nwe did a hundred thousand dollars\nor I could give you a graph and say 2018\nwe did 75 000 2019 we did a hundred\nthousand in 2020 we're projected to do a\nhundred and twenty five thousand dollars\nif I put that in the graph and make it\nstand out and make it pretty people will\nnon-accountants will and non-data people\nwill kind of gravitate towards it and\nit'll prompt them to ask different\nquestions and have different ideas and\nso by using maybe a PowerPoint to or\neven excel in Excel you can create\ngraphs from the data make it pretty make\nsure that it made not just pretty but\nmake sure that it highlights the\nimportant information of what you're\ntrying to say it will create and drive\nthe conversation around what needs to be\ndone and how best to maybe run the\nbusiness or make different decisions\ndata visualization is a very important\npart of being helping people to\nunderstand the numbers that you're\ntrying to present the reason we want to\ngravitate towards visualizations is\nthat's how the brain really works the\nbrain is much more able to process a\nhigh bar versus a low bar as opposed to\nlooking at 100 rows or 100 lines in a\nspreadsheet using the visualizations and\nespecially using the appropriate\nvisualization for the given task can\nreally help make sure that the user gets\nthe easiest way to understand this as we\ntalked about storytelling is really an\nimportant way for us to do this and so\nthrough the visualizations that's really\nhow we tell a story we can augment it\nwith text whether that's user generated\nor system generated to help people\nreally drill down further to the\nunderstanding but starting with the\nvisualization is the easiest way to help\npeople quickly effectively understand\nwhat's going on and then you can have\nthe further discussions around what\nexactly you're doing\n[Music]\nin this video we'll look at how to\ncreate a few basic types of charts in\nExcel we'll first create line charts\nthen pie charts and lastly bar charts\nfirst let's start with line charts a\nline chart is a type of graph used to\nshow information as a series of data\npoints connected by straight lines\nin a line chart the horizontal axis\ntypically represents time or a similar\ncategory and the vertical axis typically\nrepresents numerical values\nbecause line charts can display\ncontinuous data over a given time period\nthey're perfect for showing Trends and\ndata at equal time intervals such as\ndays months quarters or years\nline charts are ideal for scenarios\nwhere you have data that's arranged in\ncolumns or rows or where your data\ncontains multiple data series\non the car sales worksheet of the car\nsales workbook let's first filter the\ndata to display only Ford car models\nnow let's create a line chart with this\ndata we'll select the data from two\nnon-adjacent columns in this case model\nand price then we select line chart from\nthe 2D line category of the charts group\nlet's change the chart title to price of\nFord cars which we can do by simply\ndouble-clicking the chart titled text\nbox and editing the text\nwe now see a floating chart area\ncontaining our line chart which displays\nthe price trend of Ford cars across its\nmodels let's move this line chart to the\nleft side of the worksheet below our\ndata\nokay now let's move on to pie charts a\npie chart is a type of circular graph\nused to show the relative contribution\nof different categories which we see as\nslices to make an overall total which we\nsee as a pi\ndata points on a pie chart that is the\nslices are represented as percentages of\nthe complete pie\ncharts provide a very simple\nvisualization of differing data results\nwhich we humans find very easy to\ncomprehend\npie charts are best used when you only\nhave one data series and when your data\ncontains no more than maybe a dozen\ncategories otherwise the pie chart can\nstart to look too busy and become\ndifficult to read\nfor the pie chart we'll use the model\nnames manufactured by Ford along with\ntheir unit sales\nto create our pie chart we'll select the\ndata from two non-adjacent columns in\nthis case model and unit sales\nthen we select pie chart from the 2D Pi\ncategory of the charts group\nthe new floating chart area contains our\npie chart which displays the relative\ncontribution of unit sales from\nIndividual Ford car models which are the\nslices of the pie and they combine\ntogether to make an overall total of\nunit sales of Ford cars which is the\nwhole pie let's change the chart Style\nto customize the look of the pie chart\nthere are numerous styles to choose from\nin the gallery and you can even make\ncombinations of multiple styles for\nexample here we've chosen style 3 and\nstyle 7 which gives us the percentage\nvalues displayed in each slice and a\nnice dark contrasting background color\nlet's again move that chart this time to\nthe center of the worksheet below our\ndata\nlastly let's have a look at bar charts a\nbar chart is a type of graph used to\ncompare values across categories either\nusing vertical bars or horizontal bars\nin the case of column charts which are a\nvariety of bar charts\nin a bar chart the categories are\nusually arranged on the vertical axis\nand the values are on the horizontal\naxis whereas in a column chart the\ncategories are typically arranged on the\nhorizontal axis and the values are\ndisplayed on the vertical axis\nto create our bar chart we'll select the\ndata from two non-adjacent columns again\nin this case model and retention\npercentage then we select a style of bar\nchart from the 2D bar category of bar\ncharts\nthe new floating chart area contains our\nbar chart which displays comparative\nvalues for the retention percentage of\nthe different Ford models using\nhorizontal bars again we can change the\nchart color to customize the look of the\nbar chart if you just want to choose a\ncolor scheme based on the palette of\ncolors rather than a style you can click\nthe change colors button and then select\na color palette from the list\nlet's also move this chart this time to\nthe right side of the worksheet below\nour data\nin this video we learned how to create\nline pi and bar charts in Excel in the\nnext video we'll look at how to use the\npivot chart feature in Excel\n[Music]\nforeign\nhow to create a few basic types of\ncharts in Excel in this video we'll look\nat how to create some other basic charts\nusing the pivot chart feature from a\npivot table in Excel\nwe'll first create area charts and then\ncolumn charts from a pivot table please\nnote that the price and resale values in\nthis sample data set are not real data\nand are merely used for explanatory and\ndemonstration purposes\na pivot chart is used to show the data\nseries categories and chart axes the\nsame way a basic chart is used but\nconnecting a pivot table with it simply\nput a pivot chart is nothing more than a\ngraphical representation of a pivot\ntable in Excel it's useful when we have\na pivot table containing complicated\ndata a pivot chart can help us make\nsense of such data\nlet's start with area charts an area\nchart is a type of graph used to show\ninformation as a series of data points\nconnected using straight lines with a\nfilled area below it area charts can\nhandle both positive and negative values\nlike line charts first let's create a\ncopy of the pivot 1 worksheet of the car\nsales workbook in this copied worksheet\nof the car sales workbook let's first\nfilter the data of the pivot table to\ndisplay only Toyota car models\nif we expand the field Toyota we can see\nthe details of different models from\nToyota such as the average price of each\nmodel and the average year resale value\nnow let's create an area chart using the\npivot chart feature with this data here\nlet's select the area chart type and\nchoose the 3D area chart\nhere we see a floating chart containing\nour area chart which displays the trend\nof average price as well as average year\nresale value of Toyota cars across its\nmodels\nnote that we can also filter the data in\nthe pivot chart itself rather than in\nthe pivot table this is one of the key\ndifferences between a standard chart and\na pivot chart\nso in our pivot chart let's filter the\ndata to display only Chevrolet car\nmodels\nwhen we expand the field the pivot chart\ndisplays our data here we can see that\nit seems that the higher priced models\ndon't retain their value after one year\ncompared to the lower priced models\nwe can also use the model filter drop\ndown in our pivot chart to filter on\nmodels too\nnow we are only displaying seven of the\nnine Chevrolet models in our pivot chart\nand its Associated pivot table\nso we can see that when we make a change\nsuch as adding a filter directly in our\npivot chart those changes are\nimmediately reflected in our pivot table\ndata and the reverse is obviously also\ntrue\nif we make a change in our pivot table\nthat change is immediately viewable in\nour pivot chart\nnow let's have a look at column charts a\ncolumn chart is a type of graph used to\ncompare values across categories using\nvertical bars in a column chart the\ncategories are typically arranged on the\nhorizontal axis and the values are\ndisplayed on the vertical axis\nto create our column chart let's first\ncreate another copy of the pivot1\nworksheet of the car sales workbook\nin this copied worksheet of the car\nsales workbook let's again filter the\ndata of the pivot table but this time to\ndisplay only BMW Cadillac and Hyundai\ncar models\nnow let's create a column chart using\nthe pivot chart feature with this data\nhere let's select the column chart type\nand choose the 3D clustered column chart\nthe new floating area contains our\ncolumn chart which displays comparative\nvalues for the average price as well as\nthe average year resale value for BMW\nCadillac and Hyundai cars using vertical\nbars from this chart data we can see\nthat it seems that both the Hyundai and\nBMW ranges retain their one-year resale\nvalue better than the Cadillac models do\nnow let's view all the BMW models in the\ntable and chart by expanding the cell in\nthe pivot table but note that we can\nalso use the plus and minus buttons in\nthe chart to expand and collapse the\ndata view too\nthese buttons can drill down and drill\nup through multiple category levels if\nyou have multiple fields in the Axis or\ncategories section of the pivot chart\nFields pane for example if we had the\nmodels further categorized into model\nvariants and then into engine capacities\nand then into colors and so on\nnow we can see all the models for all\nthree manufacturers displayed in our\ncolumn chart note however that these\nbuttons can only be used to expand or\ncollapse all Fields if you want to\nexpand or collapse just one field then\nyou need to do it in the pivot table\nrather than the chart as we did in the\nprevious step\nlet's change the chart Style to\ncustomize the look of the column chart\nthere are numerous styles to choose from\nin the gallery for example here we've\nchosen style 9 which gives us a nice\ndark contrasting background color\nin this video we learned how to create\narea and column charts using the pivot\nchart feature from a pivot table in\nExcel we also learned how to filter data\nusing either the pivot table or the\npivot chart and we learned how to expand\nand collapse data levels using both the\npivot table and the pivot chart\nin the next video we'll look at some\nAdvanced charts available in Excel\nthank you\n[Music]\nforeign\nnow that we've learned how to create\nbasic charts in this video we'll look at\nhow to create some Advanced charts in\nExcel we'll first create tree Maps then\nscatter charts and lastly histograms\nplease note that the price and resale\nvalues in this sample data set are not\nreal and are merely used for explanatory\nand demonstration purposes\nlet's start with tree Maps a tree map\nchart is used to compare values across\nhierarchy levels and show proportions\nwithin hierarchical levels as rectangles\ntree maps are a good way of displaying\nlots of data in one graphical asset\nbecause they use the color and closeness\nof proportional shapes within the chart\nto represent hierarchical data\ncategories which is a difficult thing to\nachieve with most other types of chart\nin the tree map worksheet of the car\nsales workbook let's first select the\ndata from two non-adjacent columns model\nand unit sales\nnow let's create a tree map chart with\nthis data we select tree map chart from\nthe hierarchy category of the charts\ngroup\nwe now see a floating chart area\ncontaining our tree map chart which\ndisplays the proportion of the unit\nsales of Ford cars within hierarchical\nlevels as rectangles\nlet's change the chart title to unit\nsales of Ford cars which we can do by\nsimply double-clicking the chart title\ntext box and editing the text\nlet's change the chart Style to\ncustomize the look of the tree map chart\nthere are numerous styles to choose from\nin the gallery for example here we've\nchosen Style 2. we can easily see from\nthis tree map chart that the F series\nmodel is by far the biggest proportion\nof our Ford car sales followed by the\nExplorer and Taurus models which\nconstitute a similar proportion of our\nFord car sales while the Contour model\nshows the smallest proportion of Ford\ncar sales\nnext let's have a look at scatter charts\na scatter chart is a type of graph used\nto compare two sets of numerical data\nvalues and show relationships between\nthose sets of numerical values a scatter\nchart combines the two sets of values on\nthe X and y-axis into single points of\ndata and then displays them in clusters\nin the chart for this reason you will\nalso sometimes see them referred to as\nXY charts common uses include the\ncomparison of statistical scientific or\nengineering data values to create our\nscatter chart let's first select the\ndata from two adjacent columns price and\nyear resale value in the scatter\nworksheet of the car sales workbook now\nlet's create a scatter chart with this\ndata we select scatter chart from the X\nY scatter category of the charts Group\nwhich compares the price of cars from\nall manufacturers with their year resale\nvalue let's change the chart title to\ncomparing price with year resale value\nwhich we can do by simply\ndouble-clicking the chart titled text\nbox and editing the text let's change\nthe chart Style to customize the look of\nthe scatter chart there are numerous\nstyles to choose from in the gallery for\nexample here we've chosen style 8. now\nlet's add some axis titles for both the\nhorizontal x-axis and the vertical\ny-axis we'll call the horizontal retail\nprice\nand the vertical year resale value\nwe can see from this scatter chart that\nas the retail price increases so does\nthe differential between the retail\nprice and the year resale value\ngenerally speaking the lower priced cars\nretain their resale value after one year\nbetter than the higher priced cars\nlastly let's have a look at histograms\na histogram is a graph that shows the\ndistribution of the data grouped into\nbins although a histogram may look like\na column or bar chart it's totally\ndifferent while a bar chart is used to\ncompare data a histogram is used to\ndisplay distribution of data to create\nour histogram let's first select the\ndata from two non-adjacent columns model\nand price in the histogram worksheet of\nthe car sales workbook now let's create\na histogram with this data we select\nhistogram from the statistical category\nof the charts group the new floating\nchart area contains our histogram\nwhich displays frequency distribution of\nthe price of cars from all manufacturers\nnote how Excel automatically puts the\ndifferent price ranges into nine equally\nsized separate bins for you\nthe first bin contains cars priced\nbetween nine thousand two hundred and\nthirty five dollars and eighteen\nthousand six hundred and thirty five the\nsecond bin contains cars priced between\neighteen thousand six hundred and thirty\nfive dollars and twenty eight thousand\nthirty five dollars and so on up to a\nmaximum price range of 84\n435 dollars to ninety three thousand\neight hundred and thirty five let's\nchange the chart title to count of car\nmodels by price range which we can do by\nsimply double clicking the chart title\ntext box and editing the text let's\nchange the chart Style to customize the\nlook of the histogram\nthere are numerous styles again to\nchoose from in the gallery for example\nhere we've chosen style three this style\nshows the count values of the individual\nrectangles for each price range rather\nthan using a vertical scale on the\ny-axis so from this histogram chart we\ncan easily see that the largest\nproportion of car models are in the 18\n635 dollar to twenty eight thousand\nthirty five price range with a count of\n62 models in this range followed by the\ncheapest price range of nine thousand\ntwo hundred and thirty five to eighteen\nthousand six hundred and thirty five\ndollars which has a count of 42 models\nand the fewest count of models in a\nprice range is shared by the two most\nexpensive price ranges with only one\nmodel in each bin although Excel chooses\nyour bin ranges automatically when you\ncreate a histogram you can change the\nbin sizes to suit your needs this is\ndone by opening the formatting pane for\nthe relevant chart element in this case\nthe horizontal axis in the axis options\nsection you can choose to display bins\nby several factors including bin width\nand by number of bins for example when\nwe change the bin width value you can\nnow see 15 bins in the chart because the\nprice ranges are much narrower\nbins two and three have the two highest\ncounts of 34 and 33 respectively and Bin\n14 shows no models in this price range\nat all and if we change the axis options\nto display a set number of bins then the\nhistogram updates again to show the\nprice ranges split into the number of\nbins specified\nthat is 10 bins and once again we can\nsee that bin 2 has the largest\nproportion of models in its price range\nand if we choose automatic then the\nhistogram reverts back to the format we\nstarted with\nin this video we learned how to create\ntree Maps scatter charts and histograms\nin Excel\nin the next video we'll look at some of\nthe other Advanced charts available in\nExcel like filled map charts and\nsparklines\n[Music]\nin this video we'll look at some more\nadvanced charts in Excel we'll first\ncreate a field map chart and then add\nsparklines to our data and lastly we'll\nbriefly discuss some of the other charts\navailable in Excel\nlet's start with filled map charts a\nfilled map chart is a type of chart used\nto compare values and show categories\nacross geographical regions\nthis chart is suitable for data which\ncontains geographical regions like\ncountries states or postal codes\nin the map chart worksheet of the car\nsales workbook let's first copy data\nfrom the pivot table containing country\nof sale and sum of unit sales\nthen we'll paste the copied data beside\nthe table\nnow let's create a filled map chart with\nthis data\nafter selecting the data we select fill\nthe map chart from the map category of\nthe charts group\nthe new floating chart area contains our\nfilled map chart which displays the sum\nof unit sales of cars across different\ncountries of sale\nlet's change the chart title to sum of\nunit sales of cars by country which we\ncan do by simply double-clicking the\nchart title text box and editing the\ntext\nlet's change the chart Style to\ncustomize the look of the filled map\nchart there are numerous styles to\nchoose from in the gallery to suit your\npreference\nwe can see from this field map\nvisualization that the darker blue color\nwhich denotes the larger number of unit\nsales is covering the United States\nwhile the paler blue colors which denote\nmedium numbers of unit sales are\ncovering areas such as Canada Western\nEurope and Scandinavia\nand the almost white color which denotes\nthe lowest number of unit sales is\npredominantly covering Eastern Europe\nIndia Japan and Australia\nnext let's have a look at sparklines\nsparklines are mini charts placed inside\nsingle cells to represent a selected\nrange of data they are typically used to\nshow data Trends such as seasonal\nincrease or decrease economic cycles and\nshare rate or Price fluctuations they\ncan also be used to highlight Max and\nMin values\na sparkline provides the greatest impact\nwhen it is placed close to the data it\nrepresents to create our sparklines\nlet's first select data from the four\nadjacent columns unit sales q1 unit\nsales Q2 unit sales Q3 and unit sales Q4\nin the sparklines worksheet of the car\nsales workbook\nnow let's create sparklines with this\ndata we'll select the line type of\nsparkline from the sparklines group we\nthen need to specify where we would like\nour sparkline to appear on the worksheet\nwe can do this by either typing in the\ncell reference in the location range box\nor better still just click the cell in\nthe worksheet where you want it to\nappear and Excel will fill it in for you\nnote that it uses an absolute reference\nby adding dollar symbols to the cell\nreferences\nand then we can copy that sparkline down\nthe rest of the column\nwe now see a column containing our\nsparklines which displays the trend of\nthe unit sales of Ford cars over the\nfour quarters of a year\nlet's name the column header of the\ncolumn with the sparklines as quarter\nsales Trends we'll adjust the column\nwidth and also adjust the row height to\ndisplay sparklines more clearly\nlet's also display maximum and minimum\nvalues on the sparklines\nthen change the chart Style to customize\nthe look of the sparklines there are\nseveral Styles in the gallery for you to\nchoose from and finally let's adjust the\nweight of the lines in the spark lines\nto make them stand out a bit\nthese sparklines show us that Ford\nEscort unit sales started low in the\nfirst quarter and then increased in\nquarter two and three then declined\nagain in quarter four we can also\ndetermine that generally across the\nmajority of the range of Ford car models\nQ3 is the best quarter of unit sales\nover the year with a couple of\nexceptions such as Mustangs in quarter 4\nand focus models in Quarter Two\nlastly let's have a look at some other\navailable charts in Excel\nthe waterfall chart type is used to show\ncumulative effect of a series of\npositive and negative values this is\nsuitable for data which represents\ninflows and outflows like financial data\nthe funnel chart type is used to show\nprogressively smaller stages in a\nprocess this is suitable for data which\nshows progressively decreasing\nproportions\nthe stock chart type is used to show the\ntrend of stocks performance over time\nthis is best suited to data with a\nseries of multiple stock price values\nlike volume open high low and close\nthe surface chart type is used to show\nTrends and values across two dimensions\nin 3D surface areas or 2D contoured\ncharts\nthis is most suitable when categories\nand data series are both numeric\nand lastly the radar chart type is used\nto show values relative to a center\npoint and is most suitable when\ncategories are not directly comparable\nin this video we looked at how to create\nfield map charts and sparklines in Excel\nand we reviewed some of the other charts\navailable\n[Music]\nthank you in this video we will have a\nbrief introduction to dashboards\nincluding what they are what they\nconsist of why they can be a useful\ncomponent in a data analysts toolkit and\nan essential skill in a data analyst\nskill set\nthe term dashboard comes from the\nautomotive industry where car designers\nhave put the most important gauges and\nother display information such as engine\noil temperature current speed current\nRPM amount of fuel left and so on in a\nhandy graphical display that is easy for\nthe driver to view and understand\noriginally these displays were analog\nbut most are now digital and use varying\nforms of visualization including digital\nmeters and mini graphs\nyou can take that same idea and apply it\nto a dashboard in a data analysis\napplication designers of these types of\ndashboard want to put key business\ninformation in one place in the form of\ngraphical displays to make it easier for\nthe viewer to understand them\ndashboards can take this a step further\nby also allowing the user to interact\nwith the dashboard and modify exactly\nwhat information they see by using tools\nsupplied on the dashboard\nusers of a dashboard therefore not only\nget a Consolidated visualization of\ntheir business data and key performance\nindicators or kpis but also get a\ncontrollable self-service business\nintelligence or bi interface through the\nuse of filters which enable them to\ncontrol precisely what information they\nsee dashboards are typically created in\na data analysis application by using\nmultiple pivot tables and charts\nvisualizations such as map charts and\nsparklines and filtering tools such as\nslicers and timelines these pivot tables\nand charts could be created from a\nsingle data source or from multiple data\nsources\nwhen you use dashboards in your data\nanalysis application you get the\nfollowing benefits they offer insights\ninto your key data they can alert you to\npatterns and Trends in your data they\nprovide an interactive experience for\nthe user allowing them to filter what\ndata they see they are updated\ndynamically as the source data changes\nthey provide a centralized and\nConsolidated view of business data a\ndashboard can be a very useful tool in\nareas of the business such as fiscal\nforecasting and Reporting project\nmanagement executive reporting Human\nResources customer service help desk\nissue tracking Healthcare monitoring\ncall center analytics social media\nmarketing and many more\nfor a budding data analyst dashboards\ncan be a vital skill to add to their\nArsenal as the majority of employers see\nthe dashboarding skill as a must have\nrather than a nice to have\nif you can show that you have the skills\nto create accomplished and spectacular\ninteractive yet easy to view and use\ndashboards whether in a spreadsheet\napplication such as Microsoft Excel or\nGoogle Sheets or using a more Advanced\nData analysis and visualization\napplication such as bokeh or Dash and\npython are Studio shiny Tableau or IBM\ncognos analytics then that will greatly\nhelp you in your future career as a data\nanalyst\nin this video we had a brief\nintroduction to dashboards including\nwhat they are what they consist of why\nthey can be a useful component in a data\nanalysts toolkit and an essential skill\nin a data analyst skill set\nin the next videos we will learn how to\ncreate a simple dashboard using a\nspreadsheet application\n[Music]\nin the first part of this video we will\nlisten to several data professionals\ndiscuss how dashboards can help when\npresenting data results\ncan you tell us how dashboards can help\nyou when presenting data results\none thing I particularly love with data\nare dashboards they take the fluff out\nand they show you the most important\nthings that you want to see often in\nreal time and you can make them as\npretty as you want I've seen some\ndashboards that are frankly an eyesore\nbecause of trying to cram so much data\ninto One dashboard so it's important to\nbe specific and be succinct in what it\nis that you're looking for so that you\ncan avoid those sorts of things a lot of\ntimes the dashboards are great for\nexecutives or business owners on the go\nwho are maybe looking at dashboards from\na mobile device and they don't really\nhave the the space or the capacity on a\nmobile device to look at so much data\nand that dashboards can really be highly\neffective in a short amount of time as\nlong as you understand the deliverables\nand what it is that your stakeholder\nwants to see and what's important to\nthem for purposes of making decisions\npresenting the information in a way that\nis palatable to your audience is\nimportant is because you have to\nhave people are getting value out of\nwhat you're doing a lot of times I think\nthat's why data analysts in general get\na bad rep because people think we're\njust number crunchers I think the bigger\nproblem is we haven't done as good of a\njob as we could to really explain the\nnumbers and so that's where PowerPoint\npresentations with graphs\num graphs we love graphs key performance\nindicators maybe that break out the\ninformation in a different way and\nhighlight what's most important that\nwill help and also just making sure that\nyou're reading the room so if you are at\nin a in a meeting and everybody's eyes\nare glazed over because you're talking\nnumbers maybe you need to ask them what\ninformation are you looking for what is\nmost important to you so that when you\ngo back and you create your next\ndashboard or create your next report you\ncan highlight things that are important\nto your audience because we always need\nto be reading the room we need to make\nsure that we are showing our value\nshowing people helping people to\nunderstand educating them so that they\ncan bring up their knowledge base and so\nthat starts to help the fear dissipate\nof the fear of the number starts to go\naway if we would just show them what the\nnumbers actually mean and we can do that\nnot just by throwing numbers at them so\nthey'll get overwhelmed but by helping\nthem to see it graphically and with\ndashboards and kpis and other ways just\nto bring it to them and make it real to\nthem\ndashboards in a spreadsheet is an\nindicator for Action just like on your\ncar dashboard if you see a low fuel\nlight that means you need to put gas in\nyour car\nso a dashboard in a spreadsheet should\nbe just that simple it should tell the\nperson what they need to focus on\nimmediately or any indication that\nthings need to change because it's\neither going up in the wrong direction\nor it's going down but don't put\ninformation that's nice to know on a\ndashboard it's on a need to know basis\nespecially if you want to get action in\nthe second part of this video we will\nlisten to a data professional discuss\nhow cognos analytics can help you create\noutstanding visualization dashboards for\npresenting data results can you tell us\nhow you use cognos analytics to create\nvisualization dashboards for presenting\ndata results IBM cognitive analytics can\nreally help you create a better\nvisualization and dashboards in a number\nof different ways starting off we have\nour templates allowing you to quickly\nselect from a template and simply drag\nand drop your visualizations into the\nslots to help you create something\nthat's visually compelling effectively\nand easily we also have what we call our\nvisualization recommender if you grab a\ncouple Fields drag them onto the canvas\nwe'll recommend a visualization if you\ndon't like the one we recommend right\noff the bat then you do have the ability\nto go in and start to select some\ndifferent visualizations from our\nrecommendations\non top of this we also have started to\ninfuse AI into the off frame so from\nthis you can start to have the system\nactually generate an entire dashboard\nfor you you have a conversation with our\nassistant ask it questions and once you\nfocus in on the particular area that\nyou're interested in simply say\ngenerate dashboard at that point you'll\nget a beautiful dashboard created laid\nout nicely that you can start to use as\nyour starting point for further\ndiscussions and help you really\nunderstand the data that's in your in\nyour system a couple of things that we\nwanted to highlight one is the advanced\nanalytic capabilities whether this is\nthrough our visualizations like our key\ndriver analysis or through our AI\ninfused forecasting\nthe last thing would be the ability to\nshare your visualizations and your\ndashboards in just a few clicks whether\nthat's sharing it in the system through\na link whether it's pushing it to email\nor even pushing it into a slack Channel\nwhere you can start to have a discussion\nthere\n[Music]\nthank you\nnow that we've learned about the basics\nof dashboards and why they are an\nessential tool for a data analyst in\nthis video we'll look at how to set up\nand configure a relatively simple\ndashboard in Excel which will help us to\ntell a story about our data\nbefore creating our first dashboard we\nwould have first collected and organized\nthe data then verified that the data in\nour worksheet was clean error-free and\ndid not contain any blank rows or\ncolumns and then we would have formatted\nit as a table\nnext we would have created some pivot\ntables to help us analyze our data and\nwe would have performed some sorting and\nfiltering on the data in our pivot\ntables to highlight the key aspects of\nour data analysis lastly we would have\ncreated various data visualizations such\nas charts maps and slicers to help us\ntell a story about our data findings in\nthis example Car Sales workbook we've\nalready gone through those processes of\ncollecting cleaning analyzing and\nvisualizing our data and we are now at\nthe point where we can combine that data\nanalysis and those visualizations in a\ndigital dashboard that will help us\npresent our key data findings to\nstakeholders the first thing we need to\ndo is create a new worksheet to host our\ndashboard and give it a name then drag\nit to the end of the tabs list in the\nworkbook as we've already created\nseveral visualizations we can use those\nto populate our dashboard\nso if we look at some of the other\nworksheet tabs these contain various\nvisualizations which we've been working\non throughout this course we can just\nuse some of them by copying a few charts\nand other visualizations from there to\nour dashboard we'll copy this pie chart\nfrom this worksheet and paste it to our\ndashboard then we'll grab a copy of this\n3D column chart and paste that too\nwe'll also copy the 3D area chart from\nthe other pivot chart sheet to our\ndashboard\nwe'll grab the tree map chart and copy\nthat to our dashboard too\nlet's copy the scatter plot chart too\nwe'll also copy the histogram and copy\nthat to our dashboard worksheet\nand let's take a copy of the map chart\nvisualization 2.\nlet's also copy the sparklines\nvisualization to our new dashboard\nworksheet\nlastly let's go back to the line Pi Bar\nworksheet and select both the line chart\nand the bar charts and copy them both to\nthe dashboard worksheet okay so now we\nhave a lot of different visualizations\non our dashboard\nwe can make things look a little better\nby resizing some of the visualization\nobjects and moving them around a bit\nso we've now resized some of the\nvisualizations and moved things around\nand then we could zoom out to see all\nthe visualizations on screen\nbut if we remember what we heard from\nsome of the subject matter experts\nduring the expert viewpoints video\nsometimes less is more and one or two of\nthe experts mentioned that if we provide\nand display too much information the key\npoints can sometimes get lost\nso we should create a copy of this\ndashboard on another worksheet and then\nthin down the amount of visualizations\nand maybe make them more focused to\nhighlight one or two of the more\nimportant views we want to convey\nto do that we'll first make a copy of\nthe dashboard worksheet and move it to\nthe end of the worksheets tabs on the\ncopy dashboard 2 worksheet we'll now\ndelete a few Superfluous charts\nlet's first remove the tree map because\nthat is giving us almost the same\ninformation as the pie chart\nthen we can remove the 3D column chart\nbecause that has essentially the same\ndata as the 3D area chart\nand let's also lose the scatter plot\nhistogram and the sparklines because\nthey aren't really key to our message\nlet's copy the slicer from the line Pi\nBar worksheet to our dashboard to give\nus some interactivity\nnow let's Zoom back out and do some\narranging and resizing to these\nvisualizations to make the dashboard\nlook a little sharper\nso now we've rearranged and resized the\nvisualizations to make the dashboard\nlook a little leaner and tidier\nwe should also make some style and color\nchanges to give our dashboard a more\nconsistent look and feel\nwe'll apply the same style to all the\nchart elements so we'll apply a dark\ngray style and monochromatic green\ncolors to the 3D area chart\nand the line chart and the pie chart\nand the bar chart and the map chart\nand we can recolor the slicer too to fit\nin with our color scheme\nnow things look a lot better and more\nprofessional and the last thing we\nshould do is remove some of the Excel\ninterface elements and other bits of\nunnecessary screen clutter to give us a\nnice clean looking dashboard we can\nremove screen clutters such as grid\nlines the formula bar and headings and\nwe can collapse the ribbon too and that\nshould do it\nnow when we either present this\ndashboard or email it to a key\nstakeholder it includes some\ninteractivity via the slicer and also\nvia the filterable pivot chart\nif we use the slicer to select several\nFord car models all three charts that\nare related to that data get updated at\nthe same time\nwe can modify filters in the 3D area\nchart to display only Ford cars instead\nof Chevrolets\nand if we switch to the pivot chart 1\nworksheet we can see that the original\ndata has also been updated with this new\nfilter\nand when we make changes to the original\nSource data such as increasing the value\nof unit sales of cars in Australia\nthe map chart visualization in this\nworksheet updates and the Australia\nturns dark blue\nbut also the map chart visualization in\nthe dashboard gets updated too\nso we can see that Australia is now dark\ngreen on this map chart\nall of this shows how live and\ninteractive the data in our dashboard is\ncreating a clean focused and interactive\ndashboard can be a major asset when\ntrying to tell a story about data in\nthis video we learned how to set up and\nconfigure a relatively simple dashboard\nin Excel which will help us to tell a\nstory about our data in the next video\nwe will get an introduction to IBM\ncognos analytics data analysis and\nvisualization business intelligence\nplatform\n[Music]\nin this video we're going to cover a\ncouple of things the first is quick\noverview of what cognos analytics is and\nwe're going to show you how to sign up\nfor the trial cognitive analytics is a\nmulti-faceted tool allowing you to\nperform both mode 1 and mode 2 type of\nanalysis all in one product it contains\na number of different tools such as the\nability to model your data explore your\ndata create compelling Advanced analytic\nvisualizations like our key driver\nanalysis display natural language\ngenerated based off of your data and\ncreate reports which are specific and\ntailored to your individual users either\nthrough filters or through the ability\nto create bursts we also have the\nability to create fantastic dashboards\nwhich will be the main focus of this\nparticular course\nnow to sign up for the trial we're going\nto go to the ibm.biz try underscore\ncognos if you already have an account\nyou can log in here and you'll simply\nhave to fill out part of this form\nif you don't then we'll go ahead fill\nout this form quickly and the key one to\ntake note of is to select a data center\nwhich is close to you in your particular\ngeography\nnow the system is being spun up for us\nand we can go ahead and actually launch\nthis directly from this workflow now\nthat you're in you can go ahead and\neither manage your subscription through\nthis button\nor alternatively you can always\nre-access the system through this URL\nin the next video we'll take you through\na little bit around how to navigate and\nuse cognos and its dashboard\ncapabilities\n[Music]\nin this particular video we'll cover off\nhow we can upload spreadsheets General\nnavigation and cognos analytics how to\nstart a new dashboard using dashboard\ntemplates as well as navigating within\nthe cognos analogux dashboard\nenvironment\nthere are two main navigation areas for\ncognitive analytics along the left hand\nside as well as along the top these will\nchange and update based on the area\nyou're in the product\nnow for today while cognos can connect\nto a number of databases we're going to\nstart with simply uploading an Excel\nfile now we can do this in one of two\nways we can come to the new select\nupload files and navigate to find the\nfile in question\nalternatively what we can do is we can\ndrag and drop the file onto our main\nlanding page here and have it take us\ndirectly into the experience that we're\nlooking to do in our case here dashboard\nnow you'll notice that this says that\nuploaded content will land in my content\nwhich is up there on the left hand\nnavigation whether you do it from here\nor through the plus and upload it'll\nstill land in the same place once in my\ncontent it can be taken moved around\ninto a shared area within team content\nas the file uploads here you'll notice\nthat we see something that says\nanalyzing this allows us to integrate\nthe data\nget an understanding of what's in the\ndata in order to be able to help make\nsome better assumptions and decisions\nfor you as we look to build out content\nthe first thing we'll do is we go to\nbuild a dashboard is to select a\ntemplate you'll see a number here and\nbased on what you're trying to achieve\nhow many visualizations and what types\nyou may want to select something\nspecific in this case I'll choose one\nthat has four and one larger space\nonce we're in the dashboard we'll notice\nthat the pane with our uploaded file\ncolumn headers is displayed there's a\nfew other things that we want to\nhighlight here in terms of navigation to\nhelp you with the experience here in\ncognos Analytics\nour second pin down here is allows you\nto pin different visualizations for\nreuse in other dashboards across the\nsystem\nwe'll come back to our assistant in a\nfuture video this allows you to ask\nquestions in natural language and have\nthe system tell you a little bit about\nyour data as well as provide some\nvisualizations\nthe next system here is our view of all\nthe different visualizations we support\nin the dashboard\nas well as the ability to upload your\nown custom visualization should we not\nhave one that meets your needs\nthe final\none here is our additional widgets\nwhether that's text images video\nhyperlinks or any of these shapes that\nare viewed here\nin the next video we'll dive a little\nbit deeper into how specifically to\ncreate dashboards\nthank you\n[Music]\nin this video we'll cover off creating\nsome simple dashboards in cognos\nAnalytics\nwe'll cover off a variety of different\nmethods for creating a visualization\nwhether it's through our automatic\ngeneration manually populating slots or\nusing our assistant\nwe'll also cover off\nhow you can filter within a cognos\nanalytics dashboard\nas I mentioned as the data was uploaded\nwe took a look at the data and tried to\nunderstand what types of data were\nincluded and that's denoted by the icon\nin front of each of these elements now\nin the case of order ID we actually want\nto switch this up and change it change\nthe properties from a measure to an\nidentifier\nwith that done let's go ahead and start\nto create some visualizations so you can\nsimply grab from my tree and drag it\nonto the canvas now in this case if I\ndrop on top of the box what it'll do is\nit'll fill the space available as\ndenoted by the template\nnext look at the number of orders that\nwe've had by counting the number of\norder IDs that we have now in this case\nyou determine the best visualization for\nan identifier to be a list\nwe can go ahead and take a look at what\nother recommended visualizations in this\ncase there aren't any but we know we\nwant to turn this into a summary so we\ncan just go and manually select it\nnext up let's look at the quantity\nordered\nand we'll finally finish with the\naverage sale\nso in this case I'll drag sales onto the\ncanvas\nbut what I'll do is I'll change our\nsummarization from sum to average\nso just like that I now have a few kpis\nto be able to Monitor and track\nthe other way we can search create\nvisualizations is by selecting the\nspecific visualization we want and\ndragging it onto the canvas\nin this case I'm interested in looking\nat our sales across the world based on\ncountries so in this case I can find\ncountry alternatively if I have a lot of\ndata I can simply start to type at the\ntop and I'll see country comes to the\nsurface\nas we said we wanted to take a look at\nsales\nin this case we look specifically at\ncountry but as you can see we can go\nfurther down in terms of latitude and\nlongitude now with this I can manually\ndrag and drop to make this as big or\nsmall as I want and you'll see that we\nshow percentages of how much real estate\nit's actually taking up\nof course each of our visualizations has\na number of properties we won't get into\nthose in too much detail but if there's\nsomething that you're looking to do take\na look at the properties and it's likely\nthere\nthe final way that we'll show creating\nvisualizations is through our assistant\nnow in this case I may have an idea of\nwhat I want to look at or I may not\nif I don't I can simply ask it to\nsuggest questions\nthis will offer up some insight that I\nmay not have been thinking about\nin this case we'll keep it simple we'll\njust look at which product line has the\ntop sales\nwith a click I'm now presented with the\nvisualization as well as Alternatives\nbased on that particular visualization\nif I'm happy with a view I can simply\ndrag and drop this onto my canvas\nand it now becomes a visualization\nalongside the others I can continue to\nresize this\nnow all of our dashboard is designed and\nmeant to be interactive so in this case\nif I were interested in seeing the rest\nof my dashboard through the specific\nlines of classic cars I can click on\nclassic cars and you'll see that all my\nvisualizations are now updating\nspecifically with the filter of classic\ncars\nnow this is one way that I can do it and\nI can do it multiple clicks or\nalternatively I can take a particular\nfield\nand drop it in if I were perhaps\ninterested in a particular status I\ncould drive this into the all tabs or if\nI just wanted to be specific to this tab\nin here\nnow with this I'll be able to choose one\nor many in this case maybe we want to\ntake a look at how much we have in the\non hold status\nso with that you'll see again all of\nthese have been updated to reflect\nsimply the on hold so it looks like from\na worldwide view we only have holds in a\ncouple of countries which is which is\npositive\nin the next video we'll delve deeper\ninto a few of the more advanced\ncapabilities of the dashboard\n[Music]\nin this video we're going to cover a few\nof the more advanced capabilities in\ncognos analogux dashboards cover how to\ncreate calculations how to leverage\nnavigation paths how to do excludes from\nvisualizations as well as how to set top\nbottom on a visualization\nmuch like Excel our dashboard can create\ncalculations\nwe list out a number of different\noptions here that you can take a look at\nor alternatively you can simply start\ntyping\nand will offer up suggestions\nnow in this case we're interested in\nlooking at our MSRP minus the price that\nwe sell each unit for\nto give us a margin calculation\nnow this calculation is treated exactly\nthe same as any of our other fields that\nwe have in here so this case let's\nselect our margin\nand we'll look at product line\nand bring that in\nthis case we can see that trains is not\nnot doing very well it's actually a\nnegative margin for us now we may want\nto drill into this a little bit more so\nwe can create what we call a navigation\npath in this case I can choose any field\nfrom my data to be able to drill up and\ndown on in this case we want to start\nwith product line\nand perhaps we want to see customers and\nultimately if there are specific orders\nnow I can right click on trains I can\nstart to drill down\nin this case I can see that we have a\nfew offenders who are in the negatives\nwhen we look at this particular field\nso if we go ahead and look at\nsomething like\nmany gifts again we can drill down a\nlittle bit further\nto see that well they have one which is\npositive their other ones are in the\nnegatives\nlet's take another look at something a\nlittle bit different so if we look at\nsales\nby status\nand by product line\nnow in this case we're still filtered on\ntrains so we may want to go back\nand navigate up\nin this case we're still filtered on\njust trained so let's unclick that to\nget back to our initial starting point\nnow in this case we can see that our\nshift is really dramatically having an\nimpact on this so we can go ahead and we\ncan choose to exclude our shipped items\nnow we get a much better review of\neverything else that's going on\nfor the other statuses\nanother thing that we could do is if we\nhave a large number of data set data\npoints in this case perhaps customer\nsales\ncustomer name and sales\nwe may want to filter down on only our\nmost important ones so in this case I\ncan come to sales right click and I can\nask it to show us a top X number in this\ncase by default we have 10.\nso now we can see these are our top 10\ncustomers\nand one last one just for fun\nwe can actually create infographics on\nthe Fly\nso in this case if I've got sales I can\ntake any one of my shapes here perhaps a\npiggy bank\ndrop it on top and just like that we've\nnow created an infographic\n[Music]\na type is how python represents\ndifferent types of data in this video we\nwill discuss some widely used types in\nPython you can have different types in\nPython they can be integers like 11 real\nnumbers like\n21.213 they can even be words\nintegers real numbers and words can be\nexpressed as different data types the\nfollowing chart summarizes three data\ntypes for the last examples the First\nColumn indicates the expression the\nsecond column indicates the data type we\ncan see the actual data type in Python\nby using the type command we can have\nint which stands for an integer and\nfloat that stands for float essentially\na real number the type string is a\nsequence of characters here are some\nintegers integers can be negative or\npositive it should be noted that there\nis a finite range of integers but it is\nquite large\nfloats are real numbers they include the\nintegers but also numbers in between the\nintegers consider the numbers between 0\nand 1. we can select numbers in between\nthem these numbers are floats similarly\nconsider the numbers between 0.5 and 0.6\nwe can select numbers in between them\nthese are floats as well we can continue\nthe process zooming in for different\nnumbers of course there is a limit but\nit is quite small you can change the\ntype of the expression in Python this is\ncalled typecasting you can convert an\nINT to a float for example you can\nconvert or cast the integer 2 to a float\n2. nothing really changes if you cast a\nfloat to an integer you must be careful\nfor example if you cast the float 1.1 to\n1 you will lose some information\nif a string contains an integer value\nyou can convert it to int\nif we convert a string that contains a\nnon-integer value we get an error check\nout more examples in the lab you can\nconvert an INT to a string or a float to\na string Boolean is another important\ntype in Python a Boolean can take on two\nvalues the first value is true just\nremember we use an uppercase t Boolean\nvalues can also be false with an\nuppercase F using the type command on a\nBoolean value we obtain the term Bool\nthis is short for Boolean if we cast a\nBoolean true to an integer or float we\nwill get a 1. if we cast a Boolean false\nto an integer or float we get a zero if\nyou cast a one to a Boolean you get a\ntrue\nsimilarly if you cast a zero to a\nBoolean you get a false check the labs\nfor more examples or check python.org\nfor other kinds of types in Python\n[Music]\nin this video we'll cover expressions\nand variables\nExpressions describe a type of operation\nthe computers perform\nexpressions are operations the python\nperforms for example basic arithmetic\noperations like adding multiple numbers\nthe result in this case is 160. we call\nthe numbers operands and the math\nsymbols in this case addition are called\noperators\nperform operations such as subtraction\nusing the subtraction sign in this case\nthe result is a negative number we can\nperform multiplication operations using\nthe asterisk the result is 25. in this\ncase the operands are given by negative\nand asterisks can also perform division\nwith the forward slash 25 divided by 5\nis 5. 25 divided by 6 is approximately\n4.167 in Python 3 the version we will be\nusing in this course both will result in\na float we can use the double slash for\ninteger division where the result is\nrounded be aware in some cases the\nresults are not the same as regular\ndivision\npython follows mathematical conventions\nwhen performing mathematical Expressions\nthe following operations are in a\ndifferent order in both cases python\nperforms multiplication then addition to\nobtain the final result\nthere are a lot more operations you can\ndo with python check the labs for more\nexamples\nwe will also be covering more complex\noperations throughout the course\nthe expressions in the parentheses are\nperformed first we then multiply the\nresult by 60. the result is\n1920. now let's look at variables\nwe can use variables to store values in\nthis case we assign a value of 1 to the\nvariable my underscore variable using\nthe assignment operator I.E the equal\nsign we can then use the value somewhere\nelse in The Code by typing the exact\nname of the variable we will use a colon\nto denote the value of the variable we\ncan assign a new value to my underscore\nvariable using the assignment operator\nwe assign a value of 10. the variable\nnow has a value of 10. the old value of\nthe variable is not important we can\nstore the results of expressions for\nexample we add several values and assign\nthe result to x x now stores the result\nwe can also perform operations on X and\nsave the result to a new variable y y\nnow has a value of 2.666 we could also\nperform operations on X and assign the\nvalue X the variable X now has a value\n2.666 as before the old value of x is\nnot important we can use the type\ncommand in variables as well it good\npractice to use meaningful variable\nnames so you don't have to keep track of\nwhat the variable is doing let's say we\nwould like to convert the number of\nminutes in the highlighted examples to\nnumber of hours in the following music\ndata set we call the variable that\ncontains the total number of minutes\ntotal underscore Min it's common to use\nthe underscore to represent the start of\na new word you could also use a capital\nletter\nwe call the variable that contains the\ntotal number of hours total underscore\nhour we can obtain the total number of\nhours by dividing total underscore Min\nby 60. the result is approximately 2.367\nhours if we modify the value of the\nfirst variable the value of the variable\nwill change the final result values\nchange accordingly but we do not have to\nmodify the rest of the code\n[Music]\nin Python A String is a sequence of\ncharacters\na string is contained within two quotes\nyou could also use single quotes a\nstring can be spaces or digits a string\ncan also be special characters\nwe can bind or assign a string to\nanother variable it is helpful to think\nof a string as an ordered sequence each\nelement in the sequence can be accessed\nusing an index represented by the array\nof numbers the first index can be\naccessed as follows we can access index\n6. moreover we can access the 13th index\nwe can also use negative indexing with\nstrings the last element is given by the\nindex negative one the first element can\nbe obtained by index negative 15 and so\non we can bind a string to another\nvariable it is helpful to think of\nstring as a list or Tuple we can treat\nthe string as a sequence and perform\nsequence operations we can also input a\nstride value as follows the two\nindicates we'd select every second\nvariable we can also incorporate slicing\nin this case we return every second\nvalue up to index 4. we can use the Lend\ncommand to obtain the length of the\nstring as there are 15 elements the\nresult is 15. we can concatenate or\ncombine strings we use the addition\nsymbols the result is a new string that\nis a combination of both we can\nreplicate values of a string we simply\nmultiply the string by the number of\ntimes we would like to replicate it in\nthis case three the result is a new\nstring the new string consists of three\ncopies of the original string\nthis means you cannot change the value\nof the string but you can create a new\nstring for example you can create a new\nstring by setting it to the original\nvariable and concatenated with a new\nstring the result is a new string that\nchanges from Michael Jackson to Michael\nJackson is the best\nstrings are immutable backslashes\nrepresent the beginning of Escape\nsequences Escape sequences represent\nstrings that may be difficult to input\nfor example backslashes n represent a\nnew line the output is given by a new\nline after the backslashes N is\nencountered\nsimilarly backslash T represents a tab\nthe output is given by a tab where the\nbackslash T is\nif you want to place a backslash in your\nstring use a double backslash the result\nis a backslash after the escape sequence\nalso place an r in front of the string\nnow let's take a look at string Methods\nstrings or sequences and as such have\napply methods that work on lists and\ntuples\nstrings also have a second set of\nmethods that just work on strings\nwhen we apply a method to the string a\nwe get a new string B that is different\nfrom a let's do some examples let's try\nwith the method upper this method\nconverts lowercase characters to\nuppercase characters in this example we\nset the variable a to the following\nvalue we apply the method upper and set\nit equal to B the value for B is similar\nto a but all the characters are\nuppercase\nthe method replaces a segment of the\nstring I.E a substring with a new string\nwe input the part of the string we would\nlike to change\nthe second argument is what we would\nlike to exchange the segment with\nthe result is a new string with the\nsegment changed\nthe method find find substrings\nthe argument is the substring you would\nlike to find\nthe output is the first index of the\nsequence\nwe can find the substring jack\nif the substring is not in the string\nthe output is negative 1. check the labs\nfor more examples\n[Music]\nin this video we will cover lists and\ntuples\nthese are called compound data types and\nare one of the key types of data\nstructures in Python\ntuples\ntuples are an ordered sequence\nhere is a tuple ratings\ntuples are expressed as comma separated\nelements within parentheses\nthese are values inside the parentheses\nin Python there are different types\nstrings integer float they can all be\ncontained in a tuple but the type of the\nvariable is Tuple each element of a\ntuple can be accessed via an index the\nfollowing table represents the\nrelationship between the index and the\nelements in the Tuple the first element\ncan be accessed by the name of the Tuple\nfollowed by a square bracket with the\nindex number in this case Zero we can\naccess the second element as follows we\ncan also access the last element in\nPython we can use negative index the\nrelationship is as follows the\ncorresponding values are shown here\nwe can concatenate or combine tuples by\nadding them the result is the following\nwith the following index\nif we would like multiple elements from\na tuple we could also slice tuples for\nexample if we want the first three\nelements we use the following command\nthe last index is one larger than the\nindex you want similarly if we want the\nlast two elements we use the following\ncommand notice how the last index is one\nlarger than the length of the Tuple\nwe can use the Len command to obtain the\nlength of a tuple\nas there are five elements the result is\nfive\ntuples are immutable which means we\ncan't change them to see why this is\nimportant let's see what happens when we\nset the variable ratings 1 to ratings\nlet's use the image to provide a\nsimplified explanation of what's going\non\neach variable does not contain a tuple\nbut references the same immutable Tuple\nobject\nsee the objects and classes module for\nmore about objects\nlet's say we want to change the element\nat index 2. because tuples are immutable\nwe can't\ntherefore ratings 1 will not be affected\nby a change in rating because the Tuple\nis immutable I.E we can't change it\nwe can assign a different Tuple to the\nratings variable the variable ratings\nnow references another Tuple\nas a consequence of immutability if we\nwould like to manipulate a tuple we must\ncreate a new Tuple instead\nfor example if we would like to sort a\ntuple we use the function sorted the\ninput is the original Tuple the output\nis a new sorted list for more on\nfunctions see our video on functions\na tuple can contain other tuples as well\nas other complex data types this is\ncalled nesting we can access these\nelements using the standard indexing\nmethods if we select an index with a\ntuple the same index convention applies\nas such we can then access values in the\nTuple for example we could access the\nsecond element we can apply this\nindexing directly to the Tuple variable\nNT\nit is helpful to visualize this as a\ntree\nwe can visualize this nesting as a tree\nthe Tuple has the following indexes if\nwe consider indexes with other tuples we\nsee the Tuple at index 2 contains a\ntuple with two elements\nwe can access those two indexes\nthe same convention applies to index 3.\nwe can access the elements in those\ntuples as well\nwe can continue the process\nwe can even access deeper levels of the\ntree by adding another square bracket\nwe can access different characters in\nthe string or various elements in the\nsecond Tuple contained in the first\nlists are also a popular data structure\nin Python\nlists are also an ordered sequence\nhere is a list l\na list is represented with square\nbrackets\nin many respects lists are like tuples\none key difference is they are mutable\nlists can contain strings floats\nintegers we can Nest other lists\nwe also nest tuples and other data\nstructures the same indexing conventions\napply for nesting\nlike tuples each element of a list can\nbe accessed via an index\nthe following table represents the\nrelationship between the index and the\nelements in the list\nthe first element can be accessed by the\nname of the list followed by a square\nbracket with the index number in this\ncase Zero\nwe can access the second element as\nfollows\nwe can also access the last element\nin Python we can use a negative index\nthe relationship is as follows\nthe corresponding indexes are as follows\nwe can also perform slicing in lists for\nexample if we want the last two elements\nin this list we use the following\ncommand\nnotice how the last index is one larger\nthan the length of the list\nthe index conventions for lists and\ntuples are identical\ncheck the labs for more examples\nwe can concatenate or combine lists by\nadding them the result is the following\nthe new list has the following indices\nlists are mutable therefore we can\nchange them for example we apply the\nmethod extends by adding a DOT followed\nby the name of the method then\nparentheses\nthe argument inside the parentheses is a\nnew list that we are going to\nconcatenate to the original list\nin this case instead of creating a new\nlist L1 the original list L is modified\nby adding two new elements\nto learn more about methods check out\nour video on objects and classes\nanother similar method is append if we\napply a pen instead of extended we add\none element to the list\nif we look at the index there is only\none more element\nindex 3 contains the list we appended\nevery time we apply a method the list\nchanges\nif we apply extend we add two new\nelements to the list\nthe list L is modified by adding two new\nelements\nif we append the string a we further\nchange the list adding the string a\nas lists are mutable we can change them\nfor example we can change the first\nelement as follows the list now becomes\nHard Rock 10 1.2\nwe can delete an element of a list using\nthe Dell command we simply indicate the\nlist item we would like to remove as an\nargument\nfor example if we would like to remove\nthe first element the result becomes 10\n1.2 we can delete the second element\nthis operation removes the second\nelement off the list\nwe can convert a string to a list using\nSplit For example the method split\nconverts every group of characters\nseparated by a space into an element of\na list we can use the split function to\nseparate strings on a specific character\nknown as a delimiter\nwe simply pass the delimiter we would\nlike to split on as an argument in this\ncase a comma\nthe result is a list each element\ncorresponds to a set of characters that\nhave been separated by a comma when we\nset one variable b equal to a both A and\nB are referencing the same list multiple\nnames referring to the same object is\nknown as aliasing\nwe know from the list slide that the\nfirst element in B is set as hard rock\nif we change the first element in a to\nBanana we get a side effect the value of\nB will change as a consequence\nA and B are referencing the same list\ntherefore if we change a list B also\nchanges\nif we check the first element of B after\nchanging list a we get banana instead of\nHard Rock\nyou can clone list a by using the\nfollowing syntax\nvariable a references one list variable\nB references a new copy or clone of the\noriginal list\nnow if you change a b will not change\nwe can get more info on list tuples and\nmany other objects in Python using the\nhelp command simply pass in the list\nTuple or any other python object\nsee the labs for more things you can do\nwith lists\nthank you\nlet's cover dictionaries in Python\ndictionaries are a type of collection in\nPython if you recall a list has integer\nindexes these are like addresses a list\nalso has elements a dictionary has keys\nand values the key is analogous to the\nindex they are like addresses but they\ndon't have to be integers they are\nusually characters the values are\nsimilar to the element in a list and\ncontain information to create a\ndictionary we use curly brackets the\nkeys are the first elements they must be\nimmutable and unique each key is\nfollowed by a value separated by a colon\nthe values can be immutable mutable and\nduplicates each key and value pair is\nseparated by a comma consider the\nfollowing example of a dictionary the\nalbum title is the key and the value is\nthe release data we can use yellow to\nhighlight the keys and leave the values\nin white it is helpful to use the table\nto visualize a dictionary where the\nFirst Column represents the keys and the\nsecond column represents the values we\ncan add a few more examples to the\ndictionary we can also assign the\ndictionary to a variable the key is used\nto look up the value we use square\nbrackets the argument is the key this\noutputs the value using the key of Back\nin Black this Returns the value of 1980.\nthe key the Dark Side of the Moon gives\nus the value of 1973 using the key The\nBodyguard gives us the value 1992 and so\non we can add a new entry to the\ndictionary as follows this will add the\nvalue 2007 with a new key called\ngraduation we can delete an entry as\nfollows\nthis gets rid of the key Thriller and\nits value we can verify if an element is\nin the dictionary using the in command\nas follows the command checks the keys\nif they are in the dictionary they\nreturn a true\nif we try the same command with a key\nthat is not in the dictionary we get a\nfalse\nin order to see all the keys in a\ndictionary we can use the method keys to\nget the keys the output is a list like\nobject with all the keys\nin the same way we can obtain the values\nusing the method values check out the\nlabs for more examples and info on\ndictionaries\n[Music]\nlet's cover sets they are also a type of\ncollection\nsets are a type of collection this means\nthat like lists and tuples you can input\ndifferent python types unlike lists and\ntuples they are unordered this means\nsets do not record element position\nsets only have unique elements this\nmeans there is only one of a particular\nelement in a set\nto define a set you use curly brackets\nyou place the elements of a set within\nthe curly brackets you notice there are\nduplicate items when the actual set is\ncreated duplicate items will not be\npresent\nyou can convert a list to a set by using\nthe function set this is called type\ncasting\nyou simply use the list as the input to\nthe function set the result will be a\nlist converted to a set\nlet's go over an example\nwe start off with a list we input the\nlist to the function set\nthe function set returns a set\nnotice how there are no duplicate\nelements\nlet's go over set operations these can\nbe used to change the set\nconsider the set a let's represent this\nset with a circle\nif you are familiar with sets this can\nbe part of a Venn diagram\na Venn diagram is a tool that uses\nshapes usually to represent sets\nwe can add an item to a set using the\nadd method we just put the set name\nfollowed by a DOT then the add method\nthe argument is the new element of the\nset we would like to add in this case in\nsync\nthe set a now has in sync as an item\nif we add the same item twice nothing\nwill happen as there can be no\nduplicates in a set\nlet's say we would like to remove in\nsync from set a\nwe can also remove an item from a set\nusing the remove method\nwe just put the set name followed by a\nDOT then the remove method\nthe argument is the element of the set\nwe would like to remove in this case in\nsync\nafter the remove method is applied to\nthe set set a does not contain the item\nin sync\nyou can use this method for any item in\nthe set\nwe can verify if an element is in the\nset using the in command as follows the\ncommand checks of the item in this case\nAC DC is in the set if the item is in\nthe set it returns true\nif we look for an item that is not in\nthe set in this case for the item who\nas the item is not in the set we will\nget a false these are types of\nmathematical set operations there are\nother operations we can do\nthere are lots of useful mathematical\noperations we can do between sets let's\ndefine the set album set one we can\nrepresent it using a red circle or Venn\ndiagram\nsimilarly we can Define the set album\nset 2. we can also represent it using a\nblue circle or Venn diagram\nthe intersection of two sets is a new\nset containing Elements which are in\nboth of those sets it's helpful to use\nVenn diagrams the two circles that\nrepresent the sets combine the overlap\nrepresents the new set\nas the overlap is comprised of the red\ncircle and blue circle we Define the\nintersection in terms of and\nin Python we use an ampersand to find\nthe intersection of two sets\nif we overlay the values of the set over\nthe circle placing the common elements\nin the overlapping area we see the\ncorrespondence\nafter applying the intersection\noperation all the items that are not in\nboth sets disappear\nin Python we simply just place the\nAmpersand between the two sets we see\nthat both AC DC and Back in Black are in\nboth sets the result is a new set album\nset three containing all the elements in\nboth album set one and album set two\nthe union of two sets is the new set of\nelements which contain all the items in\nboth sets we can find the union of the\nsets album set one and album set 2 as\nfollows\nthe result is a new set that has all the\nelements of album set one and album set\ntwo this new set is represented in green\nconsider the new album set album set\nthree the set contains the elements AC\nDC and Back in Black we can represent\nthis with a Venn diagram as all the\nelements in album set 3 are an album set\none\nthe circle representing album set 1\nencapsulates the circle representing\nalbum set 3.\nwe can check if a set is a subset using\nthe is subset method\nas album set 3 is a subset of the album\nset one the result is true\nthere is a lot more you can do with sets\ncheck out the lab for more examples\n[Music]\nthank you\nin this video you will learn about\nconditions and branching comparison\noperations compare some value or operand\nthen based on some condition they\nproduce a Boolean let's say we assign a\nvalue of a to 6. we can use the equality\noperator denoted with two equal signs to\ndetermine if two values are equal in\nthis case if 7 is equal to six in this\ncase as 6 is not equal to 7 the result\nis false if we performed an equality\ntest for the value 6 the two values\nwould be equal as a result we would get\na true consider the following equality\ncomparison operator if the value of the\nleft operand in this case the variable I\nis greater than the value of the right\noperand in this case 5 the condition\nbecomes true or else we get a false\nlet's display some values for I on the\nleft let's see the values greater than 5\nin green and the rest in red if we set I\nequal to 6 we see that 6 is larger than\n5 and as a result we get a true we can\nalso apply the same operations to floats\nif we modify the operator as follows if\nthe left operand I is greater than or\nequal to the value of the right operand\nin this case 5 then the condition\nbecomes true in this case we include the\nvalue of 5 in the number line and the\ncolor changes to Green accordingly if we\nset the value of I equal to 5 the\noperand will produce a true if we set\nthe value of I to 2 we would get a false\nbecause 2 is less than 5. we can change\nthe inequality if the value of the left\noperand in this case I is less than the\nvalue of the right operand in this case\n6 then condition becomes true again we\ncan represent this with a colored number\nline the areas where the inequality is\ntrue are marked in green and red where\nthe inequality is false if the value for\nI is set to 2 the result is a true as 2\nis less than 6. the inequality test uses\nan explanation mark preceding the equal\nsign if two operands are not equal then\nthe condition becomes true we can use a\nnumber line when the condition is true\nthe corresponding numbers are marked in\ngreen and red for where the condition is\nfalse\nif we set I equal to 2 the operator is\ntrue as 2 is not equal to 6. We compare\nstrings as well comparing AC DC and\nMichael Jackson using the equality test\nwe get a false as the strings are not\nthe same using the inequality test we\nget a true as the strings are different\nsee the labs for more examples branching\nallows us to run different statements\nfor a different input it's helpful to\nthink of an if statement as a locked\nroom if the statement is true you can\nenter the room and your program can run\nsome predefined task if the statement is\nfalse your program will skip the task\nfor example consider the blue rectangle\nrepresenting an AC DC concert if the\nindividual is 18 or older they can enter\nthe AC DC concert if they are under the\nage of 18 they cannot enter the concert\nindividual proceeds to the concert their\nage is 17 therefore they are not granted\naccess to the concert and they must move\non\nif the individual is 19 the condition is\ntrue they can enter the concert then\nthey can move on this is the syntax of\nthe if statement from our previous\nexample we have the if statement we have\nthe expression that can be true or false\nthe brackets are not necessary we have a\ncolon within an indent we have the\nexpression that is run if the condition\nis true the statements after the if\nstatement will run regardless if the\ncondition is true or false for the case\nwhere the age is 17 we set the value of\nthe variable age to 17. we check the if\nstatement the statement is false\ntherefore the program will not execute\nthe statement to print you will enter in\nthis case it will just print move on for\nthe case where the age is 19 we set the\nvalue of the variable age to 19. we\ncheck the if statement the statement is\ntrue therefore the program will execute\nthe statement to print you will enter\nThen it will just print move on the else\nstatement will run a different block of\ncode if the same condition is false\nlet's use the AC DC concert analogy\nagain if the user is 17 they cannot go\nto the AC DC concert but they can go to\nthe meatloaf concert represented by the\npurple square if the individual is 19\nthe condition is true they can enter the\nAC DC concert then they can move on as\nbefore the syntax of the else statement\nis similar we simply append the\nstatement else we then add the\nexpression we would like to execute with\nan indent for the case where the age is\n17 we set the value of the variable age\nto 17. we check the if statement the\nstatement is false therefore we progress\nto the else statement we run the\nstatement in the indent this corresponds\nto the individual attending the meatloaf\nconcert the program will then continue\nrunning\nfor the case where the age is 19 we set\nthe value of the variable age to 19. we\ncheck the if statement the statement is\ntrue therefore the program will execute\nthe statement to print you will enter\nthe program skips the expressions in the\nelse statement and continues to run the\nrest of the Expressions the alif\nstatement short for else if allows us to\ncheck additional conditions if the\npreceding condition is false if the\ncondition is true the alternate\nExpressions will be run consider the\nconcert example if the individual is 18\nthey will go to the Pink Floyd concert\ninstead of attending the AC DC or\nmeatloaf concerts person of 18 years of\nage enters the area as they are not over\n19 years of age they cannot see AC DC\nbut as they are 18 years they attend\nPink Floyd after seeing Pink Floyd they\nmove on\nthe syntax of the LF statement is\nsimilar we simply add the statement LF\nwith the condition we then add the\nexpression we would like to execute if\nthe statement is true with an indent\nlet's illustrate the code on the left an\n18 year old enters they are not older\nthan 18 years of age therefore the\ncondition is false so the condition of\nthe LF statement is checked the\ncondition is true so then we would print\ngo see Pink Floyd then we would move on\nas before if the variable age was 17 the\nstatement go see meatloaf would print\nsimilarly if the age was greater than 18\nthe statement you can enter would print\ncheck the labs for more examples\nnow let's take a look at logic operators\nlogic operations take Boolean values and\nproduce different Boolean values the\nfirst operation is the not operator if\nthe input is true the result is a false\nsimilarly if the input is false the\nresult is a true\nlet A and B represent Boolean variables\nthe or operator takes in the two values\nand produces a new Boolean value we can\nuse this table to represent the\ndifferent values the First Column\nrepresents the possible values of a the\nsecond column represents the possible\nvalues of B the final column represents\nthe result of applying the or operation\nwe see the or operator only produces a\nfalse if all the Boolean values are\nfalse the following lines of code will\nprint out this album was made in the 70s\nor 90s if the variable album year does\nnot fall in the 80s let's see what\nhappens when we set the album year to\n1990. the colored number line is green\nwhen the condition is true and red when\nthe condition is false in this case the\ncondition is false examining the second\ncondition we see that 1990 is greater\nthan 1989 so the condition is true\nwe can verify by examining the\ncorresponding second number line in the\nfinal number line the green region\nindicates where the area is true this\nregion corresponds to where at least one\nstatement is true we see that 1990 falls\nin the area therefore we execute the\nstatement let A and B represent Boolean\nvariables the and operator takes in the\ntwo values and produces a new Boolean\nvalue we can use this table to represent\nthe different values the First Column\nrepresents the possible values of a the\nsecond column represents the possible\nvalues of B the final column represents\nthe result of applying the and operation\nwe see the and operator only produces a\ntrue if all the Boolean values are true\nthe following lines of code will print\nout this album was made in the 80s if\nthe variable album year is between 1980\nand 1989. let's see what happens when we\nset the album year to 1983 as before we\ncan use the colored number line to\nexamine where the condition is true in\nthis case 1983 is larger than 1980 so\nthe condition is true examining the\nsecond condition we see that 1990 is\ngreater than 1983. so this condition is\nalso true we can verify by examining the\ncorresponding second number line in the\nfinal number line the green region\nindicates where the area is true\nsimilarly this region corresponds to\nwhere both statements are true we see\nthat 1983 falls in the area therefore we\nexecute the statement branching allows\nus to run different statements for\ndifferent inputs\nforeign\nwe will cover Loops in particular for\nloops and while Loops we will use many\nvisual examples in this video see the\nlabs for examples with Data before we\ntalk about loops let's go over the range\nfunction the range function outputs and\nordered sequence as a list I if the\ninput is a positive integer the output\nis a sequence the sequence contains the\nsame number of elements as the input but\nstarts at zero for example if the input\nis 3 the output is the sequence 0 1 2.\nif the range function has two inputs\nwhere the first input is smaller than\nthe second input the output is a\nsequence that starts at the first input\nthen the sequence iterates up to but not\nincluding the second number for the\ninput 10 and 15 we get the following\nsequence\nsee the labs for more capabilities of\nthe range function please note if you\nuse Python 3 the range function will not\ngenerate a list explicitly like in\nPython 2. in this section we will cover\nfour Loops we will focus on lists but\nmany of the procedures can be used on\ntuples Loops perform a task over and\nover consider the group of colored\nsquares let's say we would like to\nreplace each colored square with a white\nsquare\nlet's give each square a number to make\nthings a little easier and refer to all\nthe group of squares as squares if we\nwanted to tell someone to replace Square\n0 with a white square we would say\nequals replace Square 0 with a white\nsquare or we can say 4 squares 0 in\nsquares Square 0 equals white square\nsimilarly for the next Square we can say\n4 Square 1 in squares Square 1 equals\nwhite square\nfor the next Square we can say 4 Square\n2 in squares Square 2 equals white\nsquare we repeat the process for each\nSquare\nthe only thing that changes is the index\nof the square we are referring to\nif we are going to perform a similar\ntask in Python we cannot use actual\nsquares so let's use a list to represent\nthe boxes each element in the list is a\nstring representing the color we want to\nchange the name of the color in each\nelement to White each element in the\nlist has the following Index this is a\nsyntax to perform a loop in Python\nnotice the indent the range function\ngenerates a list the code will simply\nrepeat everything in the indent 5 times\nif you were to change the value to 6 it\nwould do it six times however the value\nof I is incremented by one each time in\nthis segment we change the ith element\nof the list to the string white the\nvalue of I is set to zero each iteration\nof the loop starts at the beginning of\nthe indent we then run everything in the\nindent the first element in the list is\nset to White we then go to the start of\nthe indent we progress down each line\nwhen we reach the line to change change\nthe value of the list we set the value\nof index 1 to White the value of I\nincreases by 1. we repeat the process\nfor index 2. the process continues for\nthe next index until we have reached the\nfinal element\nwe can also iterate through a list or\nTuple directly in Python we do not even\nneed to use indices here is the list\nsquares each iteration of the list we\npass one element of the list squares to\nthe variable Square let's display the\nvalue of the variable Square on this\nsection for the first iteration the\nvalue of square is red we then start the\nsecond iteration for the second\niteration the value of square is yellow\nwe then start the third iteration for\nthe final iteration the value of square\nis green a useful function for iterating\ndata is enumerate it can be used to\nobtain the index and the element in the\nlist let's use the Box analogy with the\nnumbers representing the index of each\nSquare this is the syntax to iterate\nthrough a list and provide the index of\neach element we use the list squares and\nuse the names of the colors to represent\nthe colored squares the argument of the\nfunction enumerate is the list in this\ncase Square squares the variable I is\nthe index and the variable square is the\ncorresponding element in the list let's\nuse the left part of the screen to\ndisplay the different values of the\nvariable square and I for the various\niterations of the loop for the first\niteration the value of the variable is\nred corresponding to the zeroth index\nand the value for I is zero for the\nsecond iteration the value of the\nvariable square is yellow and the value\nof I corresponds to its index IE one we\nrepeat the process for the last index\nwhile Loops are similar to for Loops but\ninstead of executing a statement a set\nnumber of times a while loop will only\nrun if a condition is met let's say we\nwould like to copy all the orange\nsquares from the list squares to the\nlist new squares but we would like to\nstop if we encounter a non-orange square\nwe don't know the value of the squares\nbeforehand we would simply continue the\nprocess while the square is orange or C\nif the square equals orange if not we\nwould stop for the first example we\nwould check if the square was orange it\nsatisfies the condition so we would copy\nthe square we repeat the process for the\nsecond Square the condition is met so we\ncopy the square\nin the next iteration we encounter a\npurple Square the condition is not met\nso we stop the process this is\nessentially what a while loop does let's\nuse the figure on the left to represent\nthe code we will use a list with the\nnames of the color to represent the\ndifferent squares we create an empty\nlist of new squares in reality the list\nis of indeterminate size we start the\nindex at zero the while statement will\nrepeatedly execute the statements within\nthe indent until the condition inside\nthe bracket is false we append the value\nof the first element of the list squares\nto the list new squares we increase the\nvalue of I by 1. we append the value of\nthe second element of the list squares\nto the list new squares we increment the\nvalue of I now the value in the array\nsquares is purple therefore the\ncondition for the while statement is\nfalse and we exit the loop check out the\nlabs for more examples of loop many with\nreal data\n[Music]\nin this video we will cover functions\nyou will learn how to use sum of\nPython's built-in functions as well as\nhow to build your own function\nfunctions take some input then produce\nsome output or change\nthe function is just a piece of code you\ncan reuse you can Implement your own\nfunction but in many cases you use other\npeople's functions in this case you just\nhave to know how the function works and\nin some cases how to import the\nfunctions\nlet the orange and yellow squares\nrepresent similar blocks of code we can\nrun the code using some input and get an\noutput\nif we Define a function to do the task\nwe just have to call the function\nlet the small squares represent the\nlines of code used to call the function\nwe can replace these long lines of Code\nby just calling the function a few times\nnow we can just call the function our\ncode is much shorter the code performs\nthe same task\nyou can think of the process like this\nwhen we call the function F1 we pass an\ninput to the function these values are\npassed to all those lines of code you\nwrote\nthis returns a value you can use the\nvalue\nfor example you can input this value to\na new function F2 when we call this new\nfunction F2 the value is passed to\nanother set of lines of code\nthe function returns a value\nthe process is repeated passing the\nvalues to the function you call\nyou can save these functions and reuse\nthem or use other people's functions\npython has many built-in functions you\ndon't have to know how those functions\nwork internally but simply what task\nthose functions perform\nthe function Len takes in an input of\ntype sequence such as a string or list\nor type collection such as a dictionary\nor set and Returns the length of that\nsequence or collection consider the\nfollowing list\nthe Len function takes this list as an\nargument and we assign the result to the\nvariable L the function determines there\nare eight items in the list then Returns\nthe length of the list in this case 8.\nthe function sum takes in an iterable\nlike a tuple or list and Returns the\ntotal of all the elements consider the\nfollowing list\nwe pass the list into the sum function\nand assign the result to the variable s\nthe function determines the total of all\nthe elements then returns it in this\ncase the value is 70.\nthere are two ways to sort a list the\nfirst is using the function sorted we\ncan also use the list method sort\nmethods are similar to functions\nlet's use this as an example to\nillustrate the difference\nthe function sorted returns a new sorted\nlist or Tuple consider the list album\nratings\nwe can apply the function sorted to the\nlist album ratings and get a new list\nsorted album rating\nthe result is a new sorted list\nif we look at the list album ratings\nnothing has changed\ngenerally functions take an input in\nthis case a list they produce a new\noutput in this instance a sorted list\nif we use the method sort the list album\nratings will change and no new list will\nbe created\nlet's use the diagram to help illustrate\nthe process\nin this case the rectangle represents\nthe list album ratings\nwhen we apply the method sort to the\nlist the list album rating changes\nunlike the previous case we see that the\nlist album rating has changed in this\ncase no new list is created\nnow that we've gone over how to use\nfunctions in Python let's see how to\nbuild our own functions\nwe will now get you started on building\nyour own functions in Python\nthis is an example of a function in\nPython that returns its input Value Plus\n1. to define a function we start with\nthe keyword def\nthe name of the function should be\ndescriptive of what it does we have the\nfunction formal parameter a in\nparentheses followed by a colon\nwe have a code block with an indent for\nthis case we add 1 to a and assign it to\nB we return or output the value for B\nafter we Define the function we can call\nit the function will add 1 to 5 and\nreturn a 6.\nwe can call the function again this time\nassign it to the variable C\nthe value for C is 11. let's explore\nthis further\nlet's go over an example when you call a\nfunction\nit should be noted that this is a\nsimplified model of python and python\ndoes not work like this under the hood\nwe call the function giving it an input\n5. it helps to think of the value of 5\nas being passed to the function now the\nsequences of commands are run the value\nof a is five b would be assigned a value\nof 6. we then return the value of B in\nthis case as B was assigned a value of 6\nthe function returns a 6.\nif we call the function again the\nprocess starts from scratch we pass in\nan 8.\nthe subsequent operations are performed\neverything that happened the last call\nwill happen again with a different value\nof a\nthe function returns a value in this\ncase 9. again this is just a helpful\nanalogy let's try and make this function\nmore complex it's customary to document\nthe function on the first few lines this\ntells anyone who uses the function what\nit does\nthis documentation is surrounded in\ntriple quotes\nyou can use the help command on the\nfunction to display the documentation as\nfollows\nthis will print out the function name\nand the documentation we will not\ninclude the documentation in the rest of\nthe examples\na function can have multiple parameters\nthe function mult multiplies two numbers\nin other words it finds their product\nif we pass the integers 2 and 3 the\nresult is a new integer if we pass the\ninteger 10 and the float\n3.14 the result is a float 31.4\nif we pass in the integer 2 and the\nstring Michael Jackson the string\nMichael Jackson is repeated two times\nthis is because the multiplication\nsymbol can also mean repeat a sequence\nif you accidentally multiply an integer\nwith a string instead of two integers\nyou won't get an error instead you will\nget a string and your program will\nprogress potentially failing later\nbecause you have a string where you\nexpected an integer this property will\nmake coding simpler but you must test\nyour code more thoroughly\nin many cases a function does not have a\nreturn statement\nin these cases python will return the\nspecial none object\npractically speaking if your function\nhas no return statement you can treat it\nas if the function returns nothing at\nall\nthe function MJ simply prints the name\nMichael Jackson we call the function\nfunction prints Michael Jackson\nlet's define the function no work that\nperforms no task\npython doesn't allow a function to have\nan empty body so we can use the keyword\npass which doesn't do anything but\nsatisfies the requirement of a non-empty\nbody\nif we call the function and print it out\nthe function returns a none\nin the background if the return\nstatement is not called python will\nautomatically return a none\nit is helpful to view the function no\nwork with The Following return statement\nusually functions perform more than one\ntask this function prints a statement\nthen returns a value\nlet's use this table to represent the\ndifferent values as the function is\ncalled\nwe call the function with an input of 2.\nwe find the value of B\nthe function prints the statement with\nthe value of a and b\nfinally the function Returns the value\nof B in this case 3.\nwe can use Loops in functions this\nfunction prints out the values and\nindexes of a loop or Tuple we call the\nfunction with the list album ratings as\nan input let's display the list on the\nright with its corresponding index\nstuff is used as an input to the\nfunction enumerate\nthis operation will pass the index to I\nand the value in the list to s\nthe function would begin to iterate\nthrough the loop\nthe function will print the first index\nand the first value in the list\nwe continue iterating through the loop\nthe values of I and S are updated\nthe print statement is reached similarly\nthe next values of the list and index\nare printed\nthe process is repeated\nthe values of I and S are updated we\ncontinue iterating until the final\nvalues in the list are printed out\nvariatic parameters allow us to input a\nvariable number of elements\nconsider the following function\nthe function has an asterisk on the\nparameter names\nwhen we call the function three\nparameters are packed into the Tuple\nnames we then iterate through the loop\nthe values are printed out accordingly\nif we call the same function with only\ntwo parameters as inputs the variable\nnames only contain two elements\nthe result is only two values are\nprinted out\nthe scope of a variable is the part of\nthe program where that variable is\naccessible\nvariables are defined outside of any\nfunction are said to be within the\nglobal scope meaning they can be\naccessed anywhere after they are defined\nhere we have a function that adds the\nstring DC to the parameter X\nwhen we reach the part where the value\nof x is set to AC this is within the\nglobal scope meaning X is accessible\nanywhere after it is defined\na variable defined in the global scope\nis called a global variable\nwhen we call the function we enter a new\nscope or the scope of add DC we pass as\nan argument to the add DC function in\nthis case AC\nwithin the scope of the function the\nvalue of x is set to AC DC\nthe function Returns the value and is\nassigned to Z within the global scope\nthe value Z is set to AC DC\nafter the value is returned the scope of\nthe function is deleted\nlocal variables only exist within the\nscope of a function consider the\nfunction Thriller the local variable\ndate is set to 1982. when we call the\nfunction we create a new scope\nwithin that scope of the function the\nvalue of the date is set to 1982. the\nvalue of date does not exist within the\nglobal scope\nvariables inside the global scope can\nhave the same name as variables in the\nlocal scope with no conflict\nconsider the function Thriller the local\nvariable date is set to 1982. the global\nvariable date is set to 2017. when we\ncall the function we create a new scope\nwithin that scope the value of the date\nis set to 1982.\nif we call the function it Returns the\nvalue of date in the local scope in this\ncase 1982\nwhen we print in the global scope we use\nthe global variable value\nthe global value of the variable is\n2017. therefore the value is set to\n2017.\nif a variable is not defined within a\nfunction python will check the global\nscope\nconsider the function ACDC the function\nhas the variable rating with no value\nassigned\nif we Define the variable rating in the\nglobal scope then call the function\npython will see there is no value for\nthe variable rating\nas a result python will lead the scope\nand check if the variable ratings exists\nin the global scope\nit will use the value of ratings in the\nglobal scope within the scope of AC DC\nin the function we'll print out a 9.\nthe value of Z in the global scope will\nbe 10 as we added 1. the value of rating\nwill be unchanged within the global\nscope\nconsider the function Pink Floyd if we\nDefine the variable claimed sales with\nthe keyword Global the variable will be\na global variable we call the function\nPink Floyd\nthe variable claimed sales is set to the\nstring 45 million in the global scope\nwhen we print the variable we get a\nvalue of 45 million\nthere is a lot more you can do with\nfunctions check out the lab for more\nexamples\n[Music]\nhello and welcome to exception handling\nafter watching this video you will be\nable to explain exception handling\ndemonstrate the use of exception\nhandling and understand the basics of\nexception handling\nhave you ever mistakenly entered a\nnumber when you were supposed to enter\ntext in an input field most of us have\neither in air or when testing out a\nprogram but do you know why it gave an\nerror message instead of completing and\nterminating the program in order for the\nerror message to appear an event was\ntriggered in the background this event\nwas activated because the program tried\nto perform a computation on the name\nentry and realized the entry contained\nnumbers and not letters by encasing this\ncode in an exception Handler the program\nknew how to deal with this type of error\nand was able to Output the error message\nto continue with the program this is one\nof many errors that can happen when\nasking for user input so let us see how\nexception handling works we will first\nexplore the try accept statement this\ntype of statement will first attempt to\nexecute the code in the try block but if\nan error occurs it will kick out and\nbegin searching for the exception that\nmatches the error once it finds the\ncorrect exception to handle the error it\nwill then execute that line of code for\nexample perhaps you are writing a\nprogram that will open and write a file\nafter starting the program an error\noccurred as the data was not able to be\nread because of this error the program\nskipped over the code lines under the\ntry statement and went directly to the\nexception line since this error fell\nwithin the i o error guidelines it\nprinted unable to open or read the data\nin the file to our console when writing\nsimple programs we can sometimes get\naway with only one accept statement but\nwhat happens if another error occurs\nthat is not caught by the i o error if\nthat happened we would need to add\nanother accept statement for this accept\nstatement you will notice that the type\nof error to catch is not specified while\nthis may seem a logical step so the\nprogram will catch all errors and not\ndetermine donate this is not a best\npractice for example perhaps our small\nprogram was just one section of a much\nlarger program that was over a thousand\nlines of code our task was to debug the\nprogram as it kept throwing an error\ncausing A disruption for our users when\ninvestigating the program you found this\nerror kept appearing because this error\nhad no details you ended up spending\nhours trying to pinpoint and fix the\nerror so far in our program we have\ndefined that an error message should\nprint out if an error occurs but we do\nnot receive any messages that the\nprogram executed properly this is where\nwe can now add an else statement to give\nus that notification by adding this else\nstatement it will provide us a\nnotification to the console that the\nfile was written successfully now that\nwe have defined what will happen if our\nprogram executes properly or if an error\noccurs there is one last statement to\nadd for this example since we are\nopening a file the last thing we need to\ndo is close the file by adding a finally\nstatement it will tell the program to\nclose the file no matter the end result\nand print file is now closed to our\nconsole in this video you learned how to\nwrite a try accept statement why it is\nimportant to always Define errors when\ncreating exceptions and how to add an\nelse and finally statement\nin this module we are going to talk\nabout objects and classes python has\nmany different kinds of data types\nintegers floats strings lists\ndictionaries booleans in Python each is\nan object every object has the following\na type internal representation a set of\nfunctions called Methods to interact\nwith the data an object is an instance\nof a particular type for example we have\ntwo types type 1 and type 2. we can have\nseveral objects of type 1 as shown in\nyellow each object is an instance of\ntype 1. we also have several objects of\ntype 2 shown in green each object is an\ninstance of type 2. let's do several\nless abstract examples\nevery time we create an integer we are\ncreating an instance of type integer or\nwe are creating an integer object in\nthis case we are creating five instances\nof type integer or five integer objects\nsimilarly every time we create a list we\nare creating an instance of type list or\nwe are creating a list object\nin this case we are creating five\ninstances of type list or five list\nobjects\nwe can find out the type of an object by\nusing the type command in this case we\nhave an object of type list we have an\nobject of type integer we have an object\nof type string finally we have an object\nof type dictionary a class or types\nmethods are functions that every\ninstance of that class or type provides\nit's how you interact with the object we\nhave been using methods all this time\nfor example on lists sorting is an\nexample of a method that interacts with\nthe data in the object consider the list\nratings the data is a series of numbers\ncontained within the list the method\nsort will change the data within the\nobject we call the method by adding a\nperiod at the end of the object's name\nand the method's name we would like to\ncall with parentheses\nwe have the ratings list represented in\nOrange the data contained in the list is\na sequence of numbers we call the sort\nmethod this changes the data contained\nin the object you can say it changes the\nstate of the object we can call the\nreverse method on the list changing the\nlist again we call the method reversing\nthe order of the sequence within the\nobject in many cases you don't have to\nknow the inner workings of the class and\nits methods you just have to know how to\nuse them next we will cover how to\nconstruct your own classes you can\ncreate your own type or class in Python\nin this section you will create a class\nthe class has data attributes the class\nhas methods we then create instances or\ninstances of that class or objects\nthe class data attributes Define the\nclass let's create two classes the first\nclass will be a circle the second will\nbe a rectangle let's think about what\nconstitutes a circle\nexamining this image all we need is a\nradius to define a circle and let's add\ncolor to make it easier to distinguish\nbetween different instances of the class\nlater therefore our class data\nattributes are radius and color\nsimilarly examining the image in order\nto define a rectangle we need the height\nand width we will also add color to\ndistinguish between instances later\ntherefore the data attributes are color\nheight and width to create the class\nCircle you will need to include the\nclass definition this tells python you\nare creating your own class the name of\nthe class\nfor this course in parentheses you will\nalways place the term object this is the\nparent of the class\nfor the class rectangle we change the\nname of the class but the rest is kept\nthe same classes are outlines we have to\nset the attributes to create objects\nwe can create an object that is an\ninstance of type Circle the color data\nattribute is red and the data attribute\nradius is 4. we can also create a second\nobject that is an instance of type\nCircle in this case the colored data\nattribute is green and the data\nattribute radius is 2. we can also\ncreate an object that is an instance of\ntype rectangle the color data attribute\nis blue and the data attribute of height\nand width is 2. the second object is\nalso an instance of type rectangle in\nthis case the color data attribute is\nyellow and the height is 1 and the width\nis 3. we now have different objects of\nclass Circle or type Circle\nwe also have different objects of class\nrectangle or type rectangle let us\ncontinue building the circle class in\nPython we Define our class we then\ninitialize each instance of the class\nwith data attributes radius and color\nusing the class Constructor the function\ninit is a Constructor it's a special\nfunction that tells python you are\nmaking a new class\nthere are other special functions in\nPython to make more complex classes the\nradius and color parameters are used to\ninitialize the radius and color data\nattributes of the class instance\nthe self parameter refers to the newly\ncreated instance of the class\nthe parameters radius and color can be\nused in the constructor's body to access\nthe values passed to the class\nConstructor when the class is\nconstructed\nset the value of the radius and color\ndata attributes to the values passed to\nthe Constructor method similarly we can\nDefine the class rectangle in Python the\nname of the class is different\nthis time the class data attributes are\ncolor height and width after we have\ncreated the class in order to create an\nobject of class Circle we introduce a\nvariable this will be the name of the\nobject\nwe create the object by using the object\nConstructor\nthe object instructor consists of the\nname of the class as well as the\nparameters these are the data attributes\nwhen we create a circle object we call\nthe code like a function the arguments\npassed the circle Constructor are used\nto initialize the data attributes of the\nnewly created Circle instance\nit is helpful to think of self as a box\nthat contains all the data attributes of\nthe object\ntyping the object's name followed by a\nDOT and the data attribute name gives us\nthe data attribute value for example\nradius in this case the radius is 10. we\ncan do the same for color\nwe can see the relationship between the\nself parameter and the object\nin Python we can also set or change the\ndata attribute directly typing the\nobject's name followed by a DOT and the\ndata attribute name and set it equal to\nthe corresponding value\nwe can verify that the color data\nattribute has changed usually in order\nto change the data in an object we\nDefine methods in the class\nlet's discuss methods\nwe have seen how data attributes consist\nof the data defining the objects methods\nare functions that interact and change\nthe data attributes changing or using\nthe data attributes of the object let's\nsay we would like to change the size of\na circle this involves changing the\nradius attribute we add a method add\nradius to the class Circle the method is\na function that requires a self as well\nas other parameters in this case we are\ngoing to add a value to the radius we\ndenote that value as R we are going to\nadd R to the data attribute radius let's\nsee how this part of the code works when\nwe create an object and call the add\nradius method as before we create an\nobject with the object Constructor we\npass two arguments to the Constructor\nthe radius is set to 2 and the color is\nset to red\nin the constructor's body the data\nattributes are set we can use the Box\nanalogy to see the current state of the\nobject\nwe call the method by adding a DOT\nfollowed by the method name and\nparentheses in this case the argument of\nthe function is the amount we would like\nto add\nwe do not need to worry about the self\nparameter when calling the method just\nlike with the Constructor python will\ntake care of that for us\nin many cases there may not be any\nparameters other than self specified in\nthe method's definition so we don't pass\nany arguments when calling the function\ninternally the method is called with a\nvalue of 8 and the proper self object\nthe method assigns a new value to\nself.radius\nthis changes the object in particular\nthe radius data attribute when we call\nthe add radius method this changes the\nobject by changing the value of the\nradius data attribute\nwe can add default values to the\nparameters of a class's Constructor in\nthe labs we also create the method\ncalled Draw Circle\nsee the lab for the implementation of\ndraw a circle\nin the labs we can create a new object\nof type circle using the Constructor\nthe color will be red and the radius\nwill be three\nwe can access the data attribute radius\nwe can access the attribute color\nfinally we can use the method draw a\ncircle to draw the circle\nsimilarly we can create a new object of\ntype Circle we can access the data\nattribute of radius we can access the\ndata attribute color we can use the\nmethod draw a circle to draw the circle\nin summary we have created an object of\nclass circle called red circle with a\nradius attribute of 3 and a color\nattribute of red\nwe also created an object of class\ncircle called blue circle with a radius\nattribute of 10 and a color attribute of\nblue\nin the lab we have a similar class for\nrectangle we can create a new object of\ntype rectangle using the Constructor we\ncan access a data attribute of height we\ncan also access the data attribute of\nwidth we can do the same for the data\nattribute of color\nwe can use the method draw a rectangle\nto draw the rectangle\nso we have a class an object that is a\nrealization or instantiation of that\nclass\nfor example we can create two objects of\nclass Circle or two objects of class\nrectangle the dir function is useful for\nobtaining the list of data attributes\nand methods associated with a class\nthe object you're interested in is\npassed as an argument the return value\nis a list of that object's data\nattributes\nthe attributes surrounded by underscores\nare for internal use and you shouldn't\nhave to worry about them\nthe regular looking attributes are the\nones you should concern yourself with\nthese are the objects methods and data\nattributes\nthere is a lot more you can do with\nobjects in Python\ncheckpython.org for more info\n[Music]\nin this section we will use Python's\nbuilt-in open function to create a file\nobject and obtain the data from a txt\nfile\nwe will use Python's open function to\nget a file object we can apply a method\nto that object to read data from the\nfile\nwe can open the file example 1 dot txt\nas follows\nwe use the open function the first\nargument is the file path this is made\nup of the file name and the file\ndirectory\nthe second parameter is the mode common\nvalues used include R for reading W for\nwriting and a for appending we will use\nR for reading finally we have the file\nobject\nwe can now use the file object to obtain\ninformation about the file\nwe can use the data attribute name to\nget the name of the file\nthe result is a string that contains the\nname of the file\nwe can see what mode the object is in\nusing the data attribute mode and R is\nshown representing read you should\nalways close the file object using the\nmethod close this may get tedious\nsometimes so let's use the with\nstatement using a with statement to open\nthe file is better practice because it\nautomatically closes the file\nthe code will run everything in the\nindent block then closes the file\nthis code reads the file\nexample1.txt we can use the file object\nfile 1. the code will perform all\noperations in the indent block then\nclose the file at the end of the indent\nthe method read stores the values of the\nfile in the variable file underscore\nstuff as a string you can print the file\ncontent you can check if the file\ncontent is closed but you cannot read\nfrom it outside the indent but you can\nprint the file content outside the\nindent as well\nwe can print the file content we will\nsee the following\nwhen we examine the raw string we will\nsee the slash n this is so python knows\nto start a new line\nwe can output every line as an element\nin a list using the method read lines\nthe first line corresponds to the first\nelement in the list the second line\ncorresponds to the second element in the\nlist and so on\nwe can use the method read line to read\nthe first line of the file if we run\nthis command it will store the first\nline in the variable file underscore\nstuff then print the first line\nwe can use the method read line twice\nthe first time it's called it will save\nthe first line in the variable file\nunderscore stuff and then print the\nfirst line\nthe second time it's called it will save\nthe second line in the variable file\nunderscore stuff and then print the\nsecond line\ncan use a loop to print out each line\nindividually as follows\nlet's represent every character in a\nstring as a grid we can specify the\nnumber of characters we would like to\nread from a string as an argument to the\nmethod read lines\nwhen we use a 4 as an argument in the\nmethod read lines we print out the first\nfour characters in the file\neach time we call the method we will\nprogress through the text if we call the\nmethod with the argument 16 the first 16\ncharacters are printed out and then the\nnew line\nif we call the method a second time the\nnext five characters are printed out\nfinally if we call the method last time\nwith the argument nine the last nine\ncharacters are printed out\ncheck out the labs for more examples of\nmethods and other file types\n[Music]\nwe can also write to files using the\nopen function\nwe will use Python's open function to\nget a file object to create a text file\nwe can apply method write to write data\nto that file as a result text will be\nwritten to the file\nwe can create the file example 2 dot txt\nas follows we use the open function the\nfirst argument is the file path this is\nmade up of the file name if you have\nthat file in your directory it will be\noverwritten and the file directory we\nset the mode parameter to W for writing\nfinally we have the file object as\nbefore we use the with statement the\ncode will run everything in the indent\nblock then close the file we create the\nfile object file 1. we use the open\nfunction\nthis creates a file\nexample2.txt in your directory we use\nthe method write to write data into the\nfile\nthe argument is the text we would like\ninput into the file\nif we use the right method successively\neach time it's called it will write to\nthe file the first time it is called we\nwill write this is line a with a slash n\nto represent a new line\nthe second time we call the method it\nwill write this is line B then it will\nclose the file\nwe can write each element in a list to a\nfile\nas before we use a with command and the\nopen function to create a file the list\nlines has three elements consisting of\ntext\nwe use a for Loop to read each element\nof the first lines and pass it to the\nvariable line\nthe first iteration of the loop writes\nthe first element of the list to the\nfile example 2. the second iteration\nwrites the second element of the list\nand so on at the end of the loop the\nfile will be closed we can set the mode\nto appended using a lowercase a this\nwill not create a new file but just use\nthe existing file\nif we call the method write\nit will just write to the existing file\nthen add this is line C then close the\nfile\nwe can copy one file to a new file as\nfollows first we read the file example 1\nand interact with it via the file object\nread file then we create a new file\nexample 3 and use the file object write\nfile to interact with it\nthe for Loop takes a line from the file\nobject read file and stores it in the\nfile example 3 using the file object\nwrite file\nthe first iteration copies the first\nline the second iteration copies the\nsecond line till the end of the file is\nreached then both files are closed\ncheck out the labs for more examples\n[Music]\ndependencies or libraries are\npre-written code to help solve problems\nin this video we will introduce pandas a\npopular library for data analysis\nwe can import the library or a\ndependency like pandas using the\nfollowing command we start with the\nimport command followed by the name of\nthe library we now have access to a\nlarge number of pre-built classes and\nfunctions\nthis assumes the library is installed in\nour lab environment all the necessary\nlibraries are installed\nlet's say we would like to load a CSV\nfile using the Panda's built-in function\nread CSV a CSV is a typical file type\nused to store data we simply type the\nword pandas then a DOT and the name of\nthe function with all the inputs typing\npandas all the time may get tedious we\ncan use the as statement to shorten the\nname of the library in this case we use\nthe standard abbreviation PD\nnow we type PD and a DOT followed by the\nname of the function we would like to\nuse in this case read underscore CSV\nwe are not limited to the abbreviation\nPD\nin this case we use the term banana\nwe will stick with PD for the rest of\nthis video Let's examine this code more\nin depth One Way pandas allows you to\nwork with data is with a data frame\nlet's go over the process to go from a\nCSV file to a data frame\nthis variable stores the path of the CSV\nit is used as an argument to the read\nunderscore CSV function\nthe result is stored to the variable DF\nthis is short for data frame\nnow that we have the data in a data\nframe we can work with it\nwe can use the method head to examine\nthe first five rows of a data frame the\nprocess for loading an Excel file is\nsimilar we use the path of the Excel\nfile the function reads Excel\nthe result is a data frame a data frame\nis comprised of rows and columns we can\ncreate a data frame out of a dictionary\nthe keys correspond to the column labels\nthe values are lists corresponding to\nthe rows we then cast the dictionary to\na data frame using the function data\nframe\nwe can see the direct correspondence\nbetween the table the keys correspond to\nthe table headers the values are lists\ncorresponding to the rows\nwe can create a new data frame\nconsisting of one column we just put the\ndata frame name in this case DF and the\nname of the column header enclosed in\ndouble brackets\nthe result is a new data frame comprised\nof the original column\nyou can do the same thing for multiple\ncolumns we just put the data frame name\nin this case DF and the name of the\nmultiple column headers enclosed in\ndouble brackets\nthe result is a new data frame comprised\nof the specified columns\n[Music]\na data frame we can work with the data\nand save the results in other formats\nconsider the stack of 13 blocks of\ndifferent colors we can see there are\nthree unique colors let's say you would\nlike to find out how many unique\nelements are in a column of a data frame\nthis may be much more difficult because\ninstead of 13 elements you may have\nmillions\npandas has the method unique to\ndetermine the unique elements in a\ncolumn of a data frame\nlet's say we would like to determine the\nunique year of the albums in the data\nset\nwe enter the name of the data frame then\nenter the name of the column released\nwithin brackets\nthen we apply the method unique the\nresult is all of the unique elements in\nthe column released\nlet's say we would like to create a new\ndatabase consisting of songs from the\n1980s and after we can look at the\ncolumn released for songs made after\n1979. then select the corresponding rows\nwe can accomplish this within one line\nof code in pandas but let's break up the\nsteps\nwe can use the inequality operators for\nthe entire data frame in pandas the\nresult is a series of Boolean values\nfor our case we simply specify the\ncolumn released and the inequality for\nthe albums after 1979.\nthe result is a series of Boolean values\nthe result is true when the condition is\ntrue and false otherwise\nwe can select the specified columns in\none line we simply use the data frame's\nnames and in square brackets we place\nthe previously mentioned inequality and\nassign it to the variable df1\nwe now have a new data frame where each\nalbum was released after 1979.\nwe can save the new data frame using the\nmethod to underscore CSV the argument is\nthe name of the CSV file make sure you\ninclude a DOT CSV extension there are\nother functions to save the data frame\nin other formats\n[Music]\nin this video we will be covering numpy\nin 1D in particular ND arrays numpy is a\nlibrary for scientific Computing it has\nmany useful functions there are many\nother advantages like speed and memory\nnumpy is also the basis for pandas so\ncheck out our pandas video\nin this video we will be covering the\nbasics and array creation indexing and\nslicing basic operations Universal\nfunctions\nlet's go over how to create a numpy\narray\na python list is a container that allows\nyou to store and access data each\nelement is associated with an index\nwe can access each element using a\nsquare bracket as follows\na numpy array or ND array is similar to\na list it's usually fixed in size and\neach element is of the same type in this\ncase integers\nwe can cast a list to a numpy array by\nfirst importing numpy\nwe then cast The List as follows we can\naccess the data via an index\nas with the lists we can access each\nelement with an integer and a square\nbracket the value of a is stored as\nfollows if we check the type of the\narray we get numpy dot ND array\nas numpy arrays contain data of the same\ntype we can use the attribute D type to\nobtain the data type of the arrays\nelements in this case a 64-bit integer\nlet's review some basic array attributes\nusing the array a\nthe attribute size is the number of\nelements in the array\nas there are five elements the result is\nfive\nthe next two attributes will make more\nsense when we get to higher Dimensions\nbut let's review them the attribute n\ndim represents the number of array\nDimensions or the rank of the array in\nthis case one\nthe attribute shape is a tuple of\nintegers indicating the size of the\narray in each dimension\nwe can create a numpy array with real\nnumbers\nwhen we check the type of the array we\nget numpy dot ND array\nif we examine the attribute d-type we\nsee float 64 as the elements are not\nintegers there are many other attributes\ncheck out numpy.org\nlet's review some indexing and slicing\nmethods\nwe can change the first element of the\narray to a hundred as follows the\narray's first value is now a hundred we\ncan change the fifth element of the\narray as follows the fifth element is\nnow zero\nlike lists and tuples we can slice a\nnumpy array the elements of the array\ncorrespond to the following index we can\nselect the elements from one to three\nand assign it to a new numpy array d as\nfollows\nthe elements in D correspond to the\nindex\nlike lists we do not count the element\ncorresponding to the last index\nwe can assign the corresponding indices\nto new values as follows the array C now\nhas new values\nvia the labs or numpy.org for more\nexamples of what you can do with numpy\nnumpy makes it easier to do many\noperations that are commonly performed\nin data science\nthese same operations are usually\ncomputationally faster and require less\nmemory in numpy compared to regular\npython\nlet's review some of these operations on\none-dimensional arrays\nwe will look at many of the operations\nin the context of euclidean vectors to\nmake things more interesting\nvector addition is a widely used\noperation in data science consider the\nvector U with two elements the elements\nare distinguished by the different\ncolors similarly consider the vector v\nwith two components in vector addition\nwe create a new Vector in this case z\nthe first component of Zed is the\naddition of the first component of\nvectors u and v\nsimilarly the second component is the\nsum of the second components of u and v\nthis new Vector Z is now a linear\ncombination of the vector u and v\nrepresenting vector addition with line\nsegment or arrows is helpful the first\nVector is represented in red the vector\nwill point in the direction of the two\ncomponents the first component of the\nvector is one as a result the arrow is\noffset one unit from the origin in the\nhorizontal Direction\nthe second component is zero we\nrepresent this component in the vertical\ndirection as this component is zero the\nvector does not point in the vertical\nDirection\nwe represent the second Vector in blue\nthe first component is zero therefore\nthe Arrow does not point to the\nhorizontal Direction\nthe second component is one\nas a result the vector points in the\nvertical Direction one unit\nwhen we add the vector u and v we get\nthe new Vector Z\nwe add the first component this\ncorresponds to the horizontal Direction\nwe also add the second component\nit's helpful to use the tip to tail\nmethod when adding vectors placing the\ntail of a vector v on the tip of vector\nU\nthe new Vector Z is constructed by\nconnecting the base of the first Vector\nU with the tail of the second V\nthe following three lines of code will\nadd the two lists and place the result\nin the list Z\nwe can also perform vector addition with\none line of numpy code\nit would require multiple lines to\nperform Vector subtraction on two lists\nas shown on the right side of the screen\nin addition the numpy code will run much\nfaster this is important if you have\nlots of data\nwe can also perform Vector subtraction\nby changing the addition sign to a\nsubtraction sign it would require\nmultiple lines to perform Vector\nsubtraction on two lists as shown on the\nright side of the screen\nVector multiplication with a scalar is\nanother commonly performed operation\nconsider the vector y each component is\nspecified by a different color we simply\nmultiply the vector by a scalar value in\nthis case 2.\neach component of the vector is\nmultiplied by two in this case each\ncomponent is doubled\nwe can use the line segment or arrows to\nvisualize what's going on the original\nVector Y is in purple after multiplying\nit by a scalar value of 2 the vector is\nstretched out by two units as shown in\nred the new Vector is twice as long in\neach Direction\nVector multiplication with a scalar only\nrequires one line of code using numpy it\nwould require multiple lines to perform\nthe same task as shown with python lists\nas shown on the right side of the screen\nin addition the operation would also be\nmuch slower\nhadamard product is another widely used\noperation in data science\nconsider the following two vectors u and\nv the hadamard product of u and v is a\nnew Vector Z the first component of Z is\nthe product of the first element of u\nand v\nsimilarly the second component is the\nproduct of the second element of u and v\nthe resultant Vector consists of the\nentry-wise product of u and v\nwe can also perform hadamard product\nwith one line of code in numpy it would\nrequire multiple lines to perform\nhadamar product on two lists as shown on\nthe right side of the screen\nthe dot product is another widely used\noperation in data science consider the\nvector u and v\nthe dot product is a single number given\nby the following term and represents how\nsimilar two vectors are we multiply the\nfirst component from V and U we then\nmultiply the second component and add\nthe result together\nthe result is a number that represents\nhow similar the two vectors are\nwe can also perform dot product using\nthe numpy function Dot and assign it\nwith the variable result as follows\nconsider the array U the array contains\nthe following elements if we add a\nscalar value to the array numpy will add\nthat value to each element this property\nis known as Broadcasting\na universal function is a function that\noperates on ND arrays\nwe can apply a universal function to a\nnumpy array consider the arrays a we can\ncalculate the mean or average value of\nall the elements in a using the method\nmean\nthis corresponds to the average of all\nthe elements in this case the result is\nzero\nthere are many other functions for\nexample consider the numpy arrays B we\ncan find the maximum value using the\nmethod 5. we see the largest value is 5.\ntherefore the method Max returns a 5.\nwe can use numpy to create functions\nthat map numpy arrays to new numpy\narrays let's Implement some code on the\nleft side of the screen and use the\nright side of the screen to demonstrate\nwhat's going on\nwe can access the value of pi in Num pi\nas follows we can create the following\nnumpy array in radians\nthis array corresponds to the following\nvector\nwe can apply the function sine to the\narray X and assign the values to the\narray y\napplies the sine function to each\nelement in the array\nthis corresponds to applying the sine\nfunction to each component of the vector\nthe result is a new array Y where each\nvalue corresponds to a sine function\nbeing applied to each element in the\narray X\na useful function for plotting\nmathematical functions is line space\nline space returns evenly spaced numbers\nover specified interval\nwe specify the starting point of the\nsequence the ending point of the\nsequence the parameter num indicates the\nnumber of samples to generate in this\ncase five the space between samples is\none\nif we change the parameter num to 9 we\nget 9 evenly spaced numbers over the\ninterval from negative two to two\nthe result is the difference between\nsubsequent samples is 0.5 as opposed to\n1 as before\nwe can use the function line space to\ngenerate 100 evenly spaced samples from\nthe interval 0 to 2 pi\nwe can use the numpy function sine to\nmap the array X to a new array y\nwe can import the library Pi plot as PLT\nto help us plot the function\nas we are using a jupyter notebook we\nuse the command mat plot lib inline to\ndisplay the plot the following command\nplots a graph the first input\ncorresponds to the values for the\nhorizontal or x-axis\nthe second input corresponds to the\nvalues for the vertical or y-axis\nthere's a lot more you can do with numpy\ncheck out the labs at numpy.org for more\nthanks for watching this video\n[Music]\nwe can create numpy arrays with more\nthan one dimension this section will\nfocus only on 2D arrays but you can use\nnumpy to build arrays of much higher\ndimensions\nin this video we will cover the basics\nand array Creation in 2D indexing and\nslicing in 2D and basic operations n2d\nconsider the list a the list contains\nthree nested lists each of equal size\neach list is color-coded for Simplicity\nwe can cast the list to a numpy array as\nfollows it is helpful to visualize the\nnumpy array as a rectangular array each\nnested list corresponds to a different\nrow of The Matrix\nwe can use the attribute and dim to\nobtain the number of axes or Dimensions\nreferred to as the rank\nthe term rank does not refer to the\nnumber of linearly independent columns\nlike a matrix it's useful to think of\nn-dim as the number of nested lists\nthe first list represents the First\nDimension\nthis list contains another set of lists\nthis represents the second dimension or\naxes the number of lists the list\ncontains does not have to do with the\ndimension but the shape of the list\nas with the 1D array the attribute shape\nreturns a tuple it's helpful to use the\nrectangular representation as well the\nfirst element in the Tuple corresponds\nto the number of nested lists contained\nin the original list or the number of\nrows in the rectangular representation\nin this case three\nthe second element corresponds to the\nsize of each of the nested lists or the\nnumber of columns in the rectangular\narray 0. the convention is to label this\naxis zero and this axis 1 as follows\nwe can also use the attribute size to\nget the size of the array we see there\nare three rows and three columns\nmultiplying the number of columns and\nrows together we get the total number of\nelements in this case 9.\ncheck out the labs for arrays of\ndifferent shapes and other attributes\nwe can use rectangular brackets to\naccess the different elements of the\narray the following image demonstrates\nthe relationship between the indexing\nconventions for the list like\nrepresentation the index in the first\nbracket corresponds to the different\nnested lists each a different color\nthe second bracket corresponds to the\nindex of a particular element within the\nnested list\nusing the rectangular representation the\nfirst index corresponds to the row index\nthe second index corresponds to the\ncolumn index\nwe could also use a single bracket to\naccess the elements as follows\nconsider the following syntax this index\ncorresponds to the second row and this\nindex the third column the value is 23.\nconsider this example this index\ncorresponds to the first row and the\nsecond index corresponds to the First\nColumn and a value of 11.\nwe can also use slicing in numpy arrays\nthe first index corresponds to the first\nrow the second index accesses the first\ntwo columns\nconsider this example the first index\ncorresponds the first two rows the\nsecond index accesses the last column\nwe can also add arrays the process is\nidentical to Matrix addition consider\nthe Matrix X each element is colored\ndifferently consider the Matrix y\nsimilarly each element is colored\ndifferently we can add the matrices\nthis corresponds to adding the elements\nin the same position I.E adding elements\ncontained in the same color boxes\ntogether the result is a new Matrix that\nis the same size as Matrix y or X each\nelement in this new Matrix is the sum of\nthe corresponding elements in X and Y to\nadd two arrays in numpy we Define the\narray in this case X then we Define the\nsecond array y we add the arrays the\nresult is identical to Matrix addition\nmultiplying a numpy array by a scalar is\nidentical to multiplying a matrix by a\nscalar consider the Matrix y if we\nmultiply the matrix by the scalar 2 we\nsimply multiply every element in the\nmatrix by 2. the result is a new Matrix\nof the same size where each element is\nmultiplied by two consider the array y\nwe first Define the array we multiply\nthe array by a scalar as follows and\nassign it to the variable Z the result\nis a new array where each element is\nmultiplied by two multiplication of two\narrays corresponds to an element-wise\nproduct or had a marred product consider\narray X and array y\nhadamard product corresponds to\nmultiplying each of the elements in the\nsame position I.E multiplying elements\ncontained in the same color boxes\ntogether\nthe result is a new Matrix that is the\nsame size as Matrix y or X each element\nin this new Matrix is the product of the\ncorresponding elements in X and Y\nconsider the array X and Y we can find\nthe products of two arrays X and Y in\none line and assign it to the variable Z\nas follows the result is identical to\nhadamard product\nwe can also perform matrix\nmultiplication with numpy arrays matrix\nmultiplication is a little more complex\nbut let's provide a basic overview\nconsider the Matrix a where each row is\na different color\nalso consider the Matrix B where each\ncolumn is a different color in linear\nalgebra before we multiply Matrix a by\nmatrix B we must make sure that the\nnumber of columns in Matrix a in this\ncase 3 is equal to the number of rows in\nMatrix B in this case three for matrix\nmultiplication to obtain the ith rho and\njth column of the new Matrix we take the\ndot product of the ith row of a with The\njth Columns of B\nfor the First Column first row we take\nthe dot product of the first row of a\nwith the First Column of b as follows\nthe result is zero\nfor the first row and the second column\nof the new Matrix we take the dot\nproduct of the first row of the Matrix a\nbut this time we use the second column\nof Matrix B the result is two for the\nsecond row and the First Column of the\nnew Matrix we take the dot product of\nthe second row of the Matrix a with the\nFirst Column of Matrix B the result is\nzero finally for the second row and the\nsecond column of the new Matrix we take\nthe dot product of the second row of the\nMatrix a with the second column of\nMatrix B the result is 2. in numpy we\ncan Define the numpy arrays A and B we\ncan perform matrix multiplication and\nassign it to array C the result is the\narray C it corresponds to the matrix\nmultiplication of array A and B\nthere is a lot more you can do with it\nin numpy check out numpy.org thanks for\nwatching this video\nforeign\n[Music]\nwe will discuss application program\ninterfaces or apis for short\nspecifically we will discuss what an API\nis API libraries and rest apis including\nrequest and response and an example with\npi coin gecko an API lets two pieces of\nsoftware talk to each other for example\nyou have your program you have some data\nand you have other software components\nyou use the API to communicate with\nother software via inputs and outputs\njust like a function you don't have to\nknow how the API works just its inputs\nand outputs pandas is actually a set of\nsoftware components much of which are\nnot even written in Python you have some\ndata you have a set of software\ncomponents we use the pandas API to\nprocess the data by communicating with\nthe other software components let us\nclean up the diagram when you create a\ndictionary then create a pandas object\nwith the data frame Constructor in API\nlingo this is an instance the data in\nthe dictionary is passed along to the\npandas API you then use the data frame\nto communicate with the API when you\ncall the method head the data frame\ncommunicates with the API displaying the\nfirst few rows of the data frame when\nyou call the method mean the API will\ncalculate the mean and return the values\nrest apis are another popular type of\nAPI they allow you to communicate\nthrough the internet letting you take\nadvantage of resources like storage\naccess more data artificial intelligence\nalgorithms and much more the re stands\nfor representational the s for state and\nT for transfer in rest apis your program\nis called the client the API\ncommunicates with a web service you call\nthrough the internet there is a set of\nrules regarding communication input or\nrequest and output or response here are\nsome common terms you or your code can\nbe thought of as a client the web\nservice is referred to as a resource the\nclient finds the service via an endpoint\nwe will review this more in the next\nsection the client sends requests to the\nresource and the response to the client\nHTTP methods are a way of transmitting\ndata over the Internet we tell the rest\napis what to do by sending a request the\nrequest is usually communicated via an\nHTTP message the HTTP message usually\ncontains a Json file this contains\ninstructions for what operation we would\nlike the service to perform this\noperation is transmitted to the web\nservice via the Internet and the service\nperforms the operation in a similar\nmanner the web service returns a\nresponse via an HTTP message where the\ninformation is usually returned via a\nJson file and this information is\ntransmitted back to the client\ncryptocurrency data is excellent to use\nin an API because it is constantly\nupdated and is vital to cryptocurrency\ntrading we will use the pi coin gecko\npython client or wrapper for the coin\ngecko API updated every minute by coing\ngecko we use the wrapper or client\nbecause it is easy to use so you can\nfocus on the task of collecting data we\nwill also introduce Panda's time series\nfunctions for dealing with time series\ndata using pi coin gecko to collect data\nis simple all we need is to install and\nimport the library then create a client\nobject and finally use a function to\nrequest our data in this function we are\ngetting data on Bitcoin in US dollars\nfor the past 30 days in this case our\nresponse is a Json file expressed as a\npython dictionary of nested lists\nincluding price market cap and total\nvolumes which contain the Unix timestamp\nand the price at the time we are only\ninterested in price so that is what we\nwill select using the key price to make\nthings simple we can convert our nested\nlist to a data frame with the columns\ntime stamp and price it is difficult to\nunderstand the column timestamp we will\nconvert it to a more readable format\nusing the pandas function to underscore\ndate time using this to underscore date\ntime function we create readable time\ndata the input is the timestamp column\nunit of time is set to milliseconds we\nappend the output to the new column date\nnow we want to create a Candlestick plot\nto get the data for the daily\ncandlesticks we will Group by the date\nto find the minimum maximum first and\nlast price of each day finally we will\nuse plotly to create the Candlestick\nchart and plot it now we can view the\nCandlestick chart by opening the HTML\nfile and clicking trust HTML in the top\nleft of the tab it should look something\nlike this\nthank you\nin this video we will discuss\napplication program interfaces that use\nsome kind of artificial intelligence\nwe will transcribe an audio file using\nthe Watson text to speech API we will\nthen translate the text to a new\nlanguage using the Watson language\ntranslator API in the API call you will\nsend a copy of the audio file to the API\nthis is sometimes called a post request\nthen the API will send the text\ntranscription of what the individual is\nsaying under the hood the API is making\na get request\nwe then send the text we would like to\ntranslate into a second language to a\nsecond API\nthe API will translate the text and send\nthe translation back to you in this case\nwe translate English to Spanish\nwe then provide an overview of API keys\nand endpoints Watson speech to text and\nWatson translate first we will review\nAPI keys and endpoints they will give\nyou access to the API\nan API key is a way to access the API\nit's a unique set of characters that the\nAPI uses to identify you and authorize\nyou\nusually your first call to the API\nincludes the API key this will allow you\naccess to the API\nin many apis you may get charged for\neach call so like your password you\nshould keep your API key a secret\nan endpoint is simply the location of\nthe service it's used to find the API on\nthe internet just like a web address\nnow we will transcribe an audio file\nusing the Watson text to speech API\nbefore you start the lab you should sign\nup for an API key we will download an\naudio file into your directory first we\nimport speech to text V1 from IBM Watson\nthe service endpoint is based on the\nlocation of the service instance we\nstore the information in the variable\nURL underscore s2t to find out which URL\nto use view the service credentials you\nwill do the same for your API key you\ncreate a speech-to-text adapter object\nthe parameters are the endpoint and API\nkey\nyou will use this object to communicate\nwith the Watson speech to text service\nwe have the path of the WAV file we\nwould like to convert to text we create\nthe file object wave with the WAV file\nusing open we set the mode to RB which\nmeans to read the file in binary format\nthe file object allows us access to the\nWAV file that contains the audio\nwe use the method recognize from the\nspeech-to-text adapter object this\nbasically sends the audio file to\nWatson's speech to text service\nthe parameter audio is the file object\nthe content type is the audio file\nformat\nthe service sends a response stored in\nthe object response the attribute result\ncontains a python dictionary the key\nresults value has a list that contains a\ndictionary we are interested in the key\ntranscript we can assign it to the\nvariable recognized underscore text as\nfollows recognized underscore text now\ncontains a string with the transcribed\ntext\nnow let's see how to translate the text\nusing the Watson language translator\nfirst we import language translator V3\nfrom IBM underscore Watson\nwe assign the service endpoint to the\nvariable urlt you can obtain the service\nin the lab instructions\nyou require an API key see the lab\ninstructions on how to obtain the API\nkey\nthis API request requires the date of\nthe version see the documentation\nwe create a language translator object\nlanguage translator\nwe can get a list of the languages that\nthe service can identify as follows the\nmethod Returns the language code\nfor example English has a symbol e n to\nSpanish which has the symbol e s\nin the last section we assigned the\ntranscribed text of the variable to\nrecognized underscore text we can use\nthe method translate this will translate\nthe text the result is a detailed\nresponse object\nthe parameter text is the text\nmodel underscore ID is the type of model\nwe would like to use in this case we set\nit to en hyphen es for English to\nSpanish\nwe use the method get result to get the\ntranslated text and assign it to the\nvariable translation\nthe result is a dictionary that includes\nthe translation word count and character\ncount\nwe can obtain the translation and assign\nit to the variable Spanish underscore\ntranslation as follows\nusing the variable Spanish underscore\ntranslation we can translate the text\nback to English as follows the result is\na dictionary we can obtain the string\nwith the text as follows\nwe can then translate the text to French\nas follows\nthanks for watching this video\n[Music]\nforeign\n[Music]\nwe will discuss the HTTP protocol\nspecifically we will discuss uniform\nresource locator or URL request and\nresponse we touched on rest apis in the\nlast section the HTTP protocol can be\nthought of as a general protocol of\ntransferring information through the web\nthis includes many types of rest apis\nrecall that rest apis function by\nsending a request and the request is\ncommunicated via HTTP message the HTTP\nmessage usually contains a Json file\nwhen you the client use a web page your\nbrowser sends an HTTP request to the\nserver where the page is hosted the\nserver tries to find the desired\nresource by default\nindex.html if your request is successful\nthe server will send the object to the\nclient in an HTTP response this includes\ninformation like the type of the\nresource the length of the research\nsource and other information the table\nunder the web server represents a list\nof resources stored in the web server in\nthis case an HTML file PNG image and a\ntext file when the request is made for\nthe information the web server sends the\nrequested information that is one of the\nfiles\na uniform resource locator or URL is the\nmost popular way to find resources on\nthe web we can break the URL into three\nparts first we have the scheme this is\nthe protocol and for this lab it will\nalways be HTTP colon forward slash\nforward slash the internet address or\nbase URL this will be used to find the\nlocation some examples include\nwww.ibm.com and\nwww.getlab.com and finally the route\nthis is the location on the web server\nfor example slash Images slash\nidsnlogo.png let us review the request\nand response process the following is an\nexample of the request message for the\nget request method there are other HTTP\nmethods we can use in the start line we\nhave the get method this is an HTTP\nmethod in this case it's requesting the\nfile index dot HTML the request header\npasses additional information with an\nHTTP request in the get method the\nrequest header is empty some requests\nhave a body we will have an example of a\nrequest body later the following table\nrepresents the response the response\nstart line contains the version number\nfollowed by a descriptive phrase in this\ncase HTTP 1.0 a status code 200 meaning\nsuccess and the descriptive phrase okay\nwe have status codes later the\nresponse header contains information\nfinally we have the response body\ncontaining the requested file in this\ncase an HTML document\nlet us look at other status codes\nsome status code examples are shown in\nthe table below the prefix indicates the\nclass for example the 100s are\ninformational responses 100 indicates\nthat everything is okay so far the two\nhundreds are successful responses for\nexample 200 the request has succeeded\nanything in the 400s is bad news 401\nmeans the request is unauthorized 500s\nstand for Server errors like 501 for not\nimplemented when an HTTP request is made\nan HTTP method is sent this tells the\nserver what action to perform a list of\nseveral HTTP methods is shown here\nin the next video we will use Python to\napply the get method that retrieves data\nfrom the server and the post method that\nsends data to the server\n[Music]\nin this video we will discuss the HTTP\nprotocol using the requests Library a\npopular method for dealing with the HTTP\nprotocol in Python we will review python\nLibrary requests for working with the\nHTTP protocols and we will provide an\noverview of get requests and post\nrequests\nlet us review the request module in\nPython this is one of several libraries\nincluding HTTP lib and URL lib that can\nwork with the HTTP protocol\nrequests is a python library that allows\nyou to send HTTP 1.1 requests easily we\ncan import the library as follows you\ncan make a get request via the method\nget to\nwww.ibm.com we have the response object\nR this has information about the request\nlike the status of the request we can\nview the status code using the attribute\nstatus underscore code which is 200 for\nok you can view the request headers\nyou can view the request body in the\nfollowing line as there is no body for a\nget request we get a none you can view\nthe HTTP response header using the\nattribute headers this returns a python\ndictionary of HTTP response headers we\ncan look at the dictionary values we can\nobtain the date the request was sent by\nusing the key date the key content type\nindicates the type of data using the\nresponse object R we can also check the\nencoding as the content type is text or\nHTML we can use the attribute text to\ndisplay the HTML in the body we can\nreview the first 100 characters you can\nalso download other content See the lab\nfor more you can use the get method to\nmodify the results of your query for\nexample retrieving data from an API in\nthe lab we will use\nhttpbin.org a simple HTTP request and\nresponse service\nwe send a get request to the server like\nbefore we have the base URL in the route\nwe append slash get this indicates we\nwould like to perform a get request this\nis demonstrated in the following table\nafter get is requested we have the query\nstring this is part of a uniform\nresource locator or URL and this sends\nother information to the web server the\nstart of the query is a question mark\nfollowed by a series of parameter and\nvalue pairs as shown in the table below\nthe first parameter name is name and the\nvalue is Joseph\nthe second parameter name is ID and the\nvalue is one two three each pair\nparameter and value is separated by an\nequal sign the series of pairs is\nseparated by the Ampersand let us\ncomplete an example in Python we have\nthe base URL with get appended to the\nend to create a query string we use the\ndictionary payload the keys are the\nparameter names and the values are the\nvalue of the query string then we pass\nthe dictionary payload to the params\nparameter of the get function\nwe can print out the URL and see the\nname and values we can see the request\nbody as the info is sent in the URL the\nbody has a value of none we can print\nout the status code\nwe can view the response as text and we\ncan look at the key content type to look\nat the content type as the content\ncontent type is in the Json we format it\nusing the method Json it returns a\npython dict the key args has the name\nand values for the query string like a\nget request a post request is used to\nsend data to a server but the post\nrequest sends the data in a request body\nnot the URL in order to send the post\nrequest in the URL we change the route\nto post this endpoint will expect data\nand it is a convenient way to configure\nan HTTP request to send data to a server\nwe have the payload dictionary to make a\npost request we use the post function\nthe variable payload is passed to the\nparameter data comparing the URL using\nthe attribute URL from the response\nobject of the get and post request we\nsee the post request has no name or\nvalue pairs in its URL we can compare\nthe post and get request body we see\nonly the post request has a body and we\ncan view the key form to get the payload\n[Music]\nthank you\nin this video we will review hypertext\nmarkup language or HTML for web scraping\nlots of useful data is available on web\npages such as real estate prices and\nsolutions to coding questions the\nwebsite Wikipedia is a repository of the\nworld's information if you have an\nunderstanding of HTML you can use Python\nto extract this information in this\nvideo you will review the HTML of a\nbasic web page understand the\ncomposition of an HTML tag understand\nHTML trees and understand HTML tables\nlet us say you had a request to find the\nname and salary of players in a national\nbasketball league from the following\npage the web page is comprised of HTML\nit consists of text surrounded by a\nseries of blue text elements enclosed in\nangle brackets called Tags the tags tell\nthe browser how to display the content\nthe data we require is in this text\nthe first portion contains the doctype\nHTML which declares this document is an\nHTML document HTML element is the root\nelement of an HTML page and head element\ncontains meta information about the HTML\npage next we have the body this is what\nis displayed on the web page this is\nusually the data we are interested in we\nsee the elements with an H3 this means\ntype 3 heading which makes the text\nlarger and bold these tags have the\nnames of the players notice the data is\nenclosed in the elements it starts with\nan H3 in Brackets and ends in a slash H3\nin Brackets there is also a different\ntag P this means paragraph each P tag\ncontains a player's salary let us take a\ncloser look at the composition of an\nHTML tag here is an example of an HTML\nanchor tag it will display IBM and when\nyou click it it will send you to ibm.com\nwe have the tag name in this case a this\ntag defines a hyperlink which is used to\nlink from one page to another it is\nhelpful to think of each tag name as a\nclass in Python and each individual tag\nas an instance we have an opening or\nstart tag and we have the end tag this\nhas the tag name preceded by a slash\nthese tags contain the content in this\ncase what is displayed on the web page\nwe have the attribute this is composed\nof the attribute name and attribute\nvalue in this case it is the URL to the\ndestination web page real web pages are\nmore complex and depending on your\nbrowser you can select the HTML element\nthen click inspect the result will give\nyou the ability to inspect the HTML\nthere is also other types of content\nsuch as CSS and JavaScript that we will\nnot go over in this course the actual\nelement is shown here each HTML document\ncan actually be referred to as a\ndocument tree let us go over a simple\nexample tags may contain strings and\nother tags these elements are the tags\nchildren we can represent this as a\nfamily tree each nested tag is a level\nin the tree the tag HTML tag contains\nthe head and body tag The Head and the\nbody tag are the descendants of the HTML\ntag in particular they are the Children\nof the HTML tag HTML tag is their parent\nthe head and body tag are siblings as\nthey are on the same level title tag is\nthe child of the head tag and its parent\nis the head tag the title tag is a\ndescendant of the HTML tag but not its\nchild The Heading and paragraph tags are\nthe children of the body tag and as they\nare all children of the body tag they\nare siblings of each other the Bold tag\nis a child of the heading tag the\ncontent of the tag is also part of the\ntree but this can get unwieldy to draw\nnext let us review HTML tables to Define\nan HTML table we have the table tag each\ntable row is defined with a TR tag and\nyou can also use a table header tag for\nthe first row the table row cell\ncontains a set of TD tags each defines a\ntable cell for the first row first cell\nwe have for the first row second cell we\nhave\nand so on for the second row we have and\nfor the second row first cell we have\nand for the second row second cell we\nhave\nand so on we now have some basic\nknowledge of HTML now let us try and\nextract some data from a web page\n[Music]\nin this video we will cover web scraping\nafter watching this video you will be\nable to Define web scraping understand\nthe role of beautiful soup objects apply\nthe find underscore all method and web\nscrape a website\nwhat would you do if you wanted to\nanalyze hundreds of points of data to\nfind the best players of a sports team\nwould you start manually copying and\npasting information from different\nwebsites into a spreadsheet spending\nhours trying to find the right data and\neventually giving up because the task\nwas too overwhelming that is where web\nscraping can help web scraping is a\nprocess that can be used to\nautomatically extract information from a\nwebsite and can easily be accomplished\nwithin a matter of minutes and not hours\nto get started we just need a little\npython code and the help of two modules\nnamed requests and beautiful soup let us\nsay you were asked to find the name and\nsalary of players in a national\nbasketball league from the following web\npage first we import beautiful soup we\ncan store the webpage HTML as a string\nin the variable HTML to parse a document\npass it into the beautiful soup\nConstructor we get the beautiful soup\nobject soup which represents the\ndocument as a nested data structure\nbeautiful soup represents HTML as a set\nof tree-like objects with methods used\nto parse the HTML we will review the\nbeautiful soup object using the\nbeautiful soup object soup we created\nthe tag object corresponds to an HTML\ntag in the original document for example\nthe tag title consider the tag H3 if\nthere is more than one tag with the same\nname the first element with that tag is\nselected in this case with LeBron James\nwe see the name is enclosed in the Bold\nattribute B to extract it use the tree\nrepresentation so let us use the tree\nrepresentation the variable tag Dash\nobject is located here we can access the\nchild of the tag or navigate down the\nbranch as follows\nyou can navigate up the tree by using\nthe parent attribute the variable tag\nchild is located here and we can access\nthe parent\nthis is the original tag object\nwe can also find The Sibling of tag\nobject we simply use the next Dash\nsibling attribute we can find the\nsibling of sibling one we simply use the\nnext sibling attribute consider the tag\nDash child object you can access the\nattribute name and value as a key value\npair in a dictionary as follows you can\nreturn the content as a navigable string\nthis is like a python string that\nsupports beautiful soup functionality\nnow let us review the method find all\nthis is a filter you can use filters to\nfilter based on a Tag's name its\nattributes the text of a string or on\nsome combination of these and consider\nthe list of pizza places like before\ncreate a beautiful soup object but this\ntime name it table the find underscore\nall method looks through a Tag's\ndescendants and retrieves all\ndescendants that match your filters\napply it to the table with the tag TR\nthe result is a python iterable just\nlike a list each element is a tag object\nfor TR this corresponds to each row in\nthe list including the table header each\nelement is a tag object so consider the\nfirst row for example we can extract the\nfirst table cell we can also iterate\nthrough each table cell first we iterate\nthrough the list table rows via the\nvariable row each element corresponds to\na row in the table we can apply the\nmethod find all to find all the table\ncells then we can iterate through the\nvariable cells for each row for each\niteration the variable cell corresponds\nto an element in the table for that\nparticular row and we continue to\niterate through each element and repeat\nthe process for each row let us see how\nto apply beautiful soup to a web page to\nscrape a web page we also need the\nrequests Library the first step is to\nimport the modules that are needed use\nthe get method from the requests library\nto download the web page the input is\nthe URL use the text attribute to get\nthe text and assign it to the variable\npage then create a beautiful soup object\nsoup from the variable page it will\nallow you to parse through the HTML page\nand you can now scrape the page check\nout the labs for more\n[Music]\nhello welcome to working with different\nfile formats after watching this video\nyou will be able to Define different\nfile formats such as CSV XML and Json\nwrite simple programs to read and output\ndata and list what python libraries are\nneeded to extract data when collecting\ndata you will find there are many\ndifferent file formats that need to be\ncollected or read in order to complete a\ndata-driven story or analysis when\nGathering the data python can make the\nprocess simpler with its predefined\nlibraries but before we explore python\nlet us first check out some of the\nvarious file formats\nlooking at a file name you will notice\nan extension at the end of the title\nthese extensions let you know what type\nof file it is and what is needed to open\nit for instance if you see a title like\nfile\nexample.csv you will know this is a CSV\nfile but this is only one example of\ndifferent file types there are many more\nsuch as Json or XML\nwhen coming across these different file\nformats and trying to access their data\nwe need to utilize python libraries to\nmake this process easier the first\npython library to become familiar with\nis called pandas by importing this\nlibrary in the beginning of the code we\nare then able to easily read the\ndifferent file types\nsince we have now imported the panda\nLibrary let us use it to read the first\nCSV file in this instance we have come\nacross the file example.csv file the\nfirst step is to assign the file to a\nvariable then create another variable to\nread the file with the help of the panda\nLibrary we can then call read underscore\nCSV function to Output the data to the\nscreen\nwith this example there were no headers\nfor the data so it added the first line\nas the header since we do not want the\nfirst line of data as the header let us\nfind out how to correct this issue\nnow that we have learned how to read and\noutput the data from a CSV file let us\nmake it look a little more organized\nfrom the last example we were able to\nprint out the data but because the file\nhad no headers it printed the first line\nof data as the header we easily solve\nthis by adding a data frame attribute we\nuse the variable DF to call the file\nthen add the columns attribute\nby adding this one line to our program\nwe can then neatly organize the data\noutput into the specified headers for\neach column\nthe next file format we will explore is\nthe Json file format in this type of\nfile the text is written in a language\nindependent data format and is similar\nto a python dictionary the first step in\nreading this type of file is to import\nJson\nafter importing Json we can add a line\nto open the file call the load attribute\nof Json to begin and read the file and\nlastly we can then print the file the\nnext file format type is XML also known\nas extensible markup language\nwhile the pandas Library does not have\nan attribute to read this type of file\nlet us explore how to parse this type of\nfile\nthe first step to read this type of file\nis to import XML by importing this\nLibrary we can then use the E tree\nattribute to parse the XML file we then\nadd the column headers and assign them\nto the data frame\nthen create a loop to go through the\ndocument to collect the necessary data\nand append the data to a data frame\nin this video you learned how to\nrecognize different file types how to\nuse Python libraries to extract data and\nhow to use data frames when collecting\ndata\n[Music]\nforeign\n[Music]\nwe will review hypertext markup language\nor HTML for web scraping lots of useful\ndata is available on web pages such as\nreal estate prices and solutions to\ncoding questions the website Wikipedia\nis a repository of the world's\ninformation if you have an understanding\nof HTML you can use Python to extract\nthis information in this video you will\nreview the HTML of a basic web page\nunderstand the composition of an HTML\ntag understand HTML trees and understand\nHTML tables let us say you had a request\nto find the name and salary of players\nin a national basketball league from the\nfollowing page the web page is comprised\nof HTML it consists of text surrounded\nby a series of blue text elements\nenclosed in angle brackets called Tags\nthe tags tell the browser how to display\nthe content the data we require is in\nthis text\nthe first portion contains the doctype\nHTML which declares this document is an\nHTML document HTML element is the root\nelement of an HTML page and head element\ncontains meta information about the HTML\npage next we have the body this is what\nis displayed on the web page this is\nusually the data we are interested in we\nsee the elements with an H3 this means\ntype 3 heading which makes the text\nlarger and bold these tags have the\nnames of the players notice the data is\nenclosed in the elements it starts with\nan H3 in Brackets and ends in a slash H3\nin Brackets there is also a different\ntag P this means paragraph each P tag\ncontains a player's salary let us take a\ncloser look at the composition of an\nHTML tag here is an example of an HTML\nanchor tag it will display IBM and when\nyou click it it will send you to ibm.com\nwe have the tag name in this case a this\ntag defines a hyperlink which is used to\nlink from one page to another it is\nhelpful to think of each tag name as a\nclass in Python and each individual tag\nas an instance we have an opening or\nstart tag and we have the end tag this\nhas the tag name preceded by a slash\nthese tags contain the content in this\ncase what is displayed on the web page\nwe have the attribute this is composed\nof the attribute name and attribute\nvalue in this case it is the URL to the\ndestination web page real web pages are\nmore complex and depending on your\nbrowser you can select the HTML element\nthen click inspect the result will give\nyou the ability to inspect the HTML\nthere is also other types of content\nsuch as CSS and JavaScript that we will\nnot go over in this course the actual\nelement is shown here each HTML document\ncan actually be referred to as a\ndocument tree let us go over a simple\nexample tags may contain strings and\nother tags these elements are the tags\nchildren we can represent this as a\nfamily tree each nested tag is a level\nin the tree the tag HTML tag contains\nthe head and body tag The Head and the\nbody tag are the descendants of the HTML\ntag in particular they are the Children\nof the HTML tag HTML tag is their parent\nthe head and body tag are siblings as\nthey are on the same level title tag is\nthe child of the head tag and its parent\nis the head tag the title tag is a\ndescendant of the HTML tag but not its\nchild The Heading and paragraph tags are\nthe children of the body tag and as they\nare all children of the body tag they\nare siblings of each other the Bold tag\nis a child of the heading tag the\ncontent of the tag is also part of the\ntree but this can get unwieldy to draw\nnext let us review HTML tables to Define\nan HTML table we have the table tag each\ntable row is defined with a TR tag and\nyou can also use a table header tag for\nthe first row the table row cell\ncontains a set of TD tags each defines a\ntable cell for the first row first cell\nwe have for the first row second cell we\nhave\nand so on for the second row we have and\nfor the second row first cell we have\nand for the second row second cell we\nhave\nand so on we now have some basic\nknowledge of HTML now let us try and\nextract some data from a web page\n[Music]\nin this video we will cover web scraping\nafter watching this video you will be\nable to Define web scraping understand\nthe role of beautiful soup objects apply\nthe find underscore all method and web\nscrape a website\nwhat would you do if you wanted to\nanalyze hundreds of points of data to\nfind the best players of a sports team\nwould you start manually copying and\npasting information from different\nwebsites into a spreadsheet spending\nhours trying to find the right data and\neventually giving up because the task\nwas too overwhelming that is where web\nscraping can help web scraping is a\nprocess that can be used to\nautomatically extract information from a\nwebsite and can easily be accomplished\nwithin a matter of minutes and not hours\nto get started we just need a little\npython code and the help of two modules\nnamed requests and beautiful soup let us\nsay you were asked to find the name and\nsalary of players in a national\nbasketball league from the following web\npage first we import beautiful soup we\ncan store the webpage HTML as a string\nin the variable HTML to parse a document\npass it into the beautiful soup\nConstructor we get the beautiful soup\nobject soup which represents the\ndocument as a nested data structure\nbeautiful soup represents HTML as a set\nof tree-like objects with methods used\nto parse the HTML we will review the\nbeautiful soup object using the\nbeautiful soup object soup we created\nthe tag object corresponds to an HTML\ntag in the original document for example\nthe tag title consider the tag H3 if\nthere is more than one tag with the same\nname the first element with that tag is\nselected in this case with LeBron James\nwe see the name is enclosed in the Bold\nattribute B to extract it use the tree\nrepresentation so let us use the tree\nrepresentation the variable tag Dash\nobject is located here we can access the\nchild of the tag or navigate down the\nbranch as follows\nyou can navigate up the tree by using\nthe parent attribute the variable tag\nchild is located here and we can access\nthe parent\nthis is the original tag object\nwe can also find The Sibling of tag\nobject we simply use the next Dash\nsibling attribute we can find the\nsibling of sibling one we simply use the\nnext sibling attribute consider the tag\nDash child object you can access the\nattribute name and value as a key value\npair in a dictionary as follows you can\nreturn the content as a navigable string\nthis is like a python string that\nsupports beautiful soup functionality\nnow let us review the method find all\nthis is a filter you can use filters to\nfilter based on a Tag's name its\nattributes the text of a string or on\nsome combination of these and consider\nthe list of pizza places like before\ncreate a beautiful soup object but this\ntime name it table the find underscore\nall method looks through a tags\ndescendants and retrieves all\ndescendants that match your filters\napply it to the table with the tag TR\nthe result is a python iterable just\nlike a list each element is a tag object\nfor TR this corresponds to each row in\nthe list including the table header each\nelement is a tag object so consider the\nfirst row for example we can extract the\nfirst table cell we can also iterate\nthrough each table cell first we iterate\nthrough the list table rows via the\nvariable row each element corresponds to\na row in the table we can apply the\nmethod find all to find all the table\ncells then we can iterate through the\nvariable cells for each row for each\niteration the variable cell corresponds\nto an element in the table for that\nparticular row and we continue to\niterate through each element and repeat\nthe process for each row let us see how\nto apply beautiful soup to a web page to\nscrape a web page we also need the\nrequests Library the first step is to\nimport the modules that are needed use\nthe get method from the requests library\nto download the web page the input is\nthe URL use the text attribute to get\nthe text and assign it to the variable\npage then create a beautiful soup object\nsoup from the variable page it will\nallow you to parse through the HTML page\nand you can now scrape the page check\nout the labs for more\n[Music]\nhello and welcome to SQL for data\nscience\nthe demand for data scientists is high\nboasting a median-based salary of a\nhundred and ten thousand dollars and job\nsatisfaction score of 4.4 out of 5. it's\nno wonder that it's the top spot on\nglassdoor's best jobs in America\nGlassdoor analyzed data from data\nscientist job postings on Glassdoor and\nfound that SQL is listed as one of the\ntop three skills for a data scientist\nbefore you step into the field of data\nscience it is vitally important that you\nset yourself apart by mastering the\nfoundations of this field\none of the foundational skills that you\nwill require is SQL\nSQL is a powerful language that's used\nfor communicating with databases every\napplication that manipulates any kind of\ndata needs to store that data somewhere\nwhether it's big data or just a table\nwith a few simple rows for government or\na small startup or a big database that\nspans over multiple servers or a mobile\nphone that runs its own small database\nhere are some of the advantages of\nlearning SQL for someone interested in\ndata science\nSQL will boost your Professional Profile\nas a data scientist as it is one of the\nmost sought after skills by hiring\nemployers\nlearning SQL will give you a good\nunderstanding of relational databases\ntapping into all this information\nrequires being able to communicate with\nthe databases that store the data even\nif you work with reporting tools that\ngenerate SQL queries for you it may be\nuseful to write your own SQL statements\nso that you need not wait for other team\nmembers to create SQL statements for you\nin this course you will learn the basics\nof both the SQL language and relational\ndatabases the course includes\ninteresting quizzes and Hands-On lab\nassignments where you can get experience\nworking with databases in the first few\nmodules you work directly with the\ndatabase and develop a working knowledge\nof SQL then you will connect to a\ndatabase and run SQL queries like a data\nscientist typically would where you will\nuse Python and jupyter notebooks to\nconnect to relational databases to\naccess and analyze data there is also an\nassignment included towards the end of\nthe course where you will get an\nopportunity to apply the concepts that\nyou learned so let's get started with\nSQL for data science\n[Music]\nhello and welcome to SQL for data\nscience first we will talk a little bit\nabout what you'll learn in this course\nthis course teaches you the basics of\nthe SQL language and the relational\ndatabase model\nthere will be some lab exercises and at\nthe end of each section there are a few\nreview questions and at the end there is\na final exam\nby the end of this course you will be\nable to discuss SQL Basics and explain\nvarious aspects of the relational\ndatabase model\nin this video we will learn about SQL\nand relational databases by the end of\nthis video you will be able to describe\nSQL data database a relational database\nand list five basic SQL commands but\nwait what is SQL and what is a\nrelational database\nwhat is SQL SQL is a language used for\nrelational databases to query or get\ndata out of a database\nSQL is also referred to as SQL and is\nshort for its original name Structured\nEnglish query language\nso SQL is a language used for a database\nto query data but what is data and what\nis a database\ndata is a collection of facts in the\nform of words numbers or even pictures\ndata is one of the most critical assets\nof any business it is used and collected\npractically everywhere your bank stores\ndata about you your name address phone\nnumber account numbers Etc your credit\ncard company and your PayPal accounts\nalso store data about you data is\nimportant so it needs to be secure and\nit needs to be stored and accessed\nquickly the answer is a database so what\nis a database\ndatabases are everywhere and used every\nday but they are largely taken for\ngranted a database is a repository of\ndata it is a program that stores data a\ndatabase also provides the functionality\nfor adding modifying and querying that\ndata there are different kinds of\ndatabases of different requirements the\ndata can be stored in various forms when\ndata is stored in tabular form the data\nis organized in tables like in a\nspreadsheet which is columns and rows\nthat's a relational database\nThe Columns contain properties about the\nitem such as last name first name email\naddress City\na table is a collection of related\nthings like a list of employees or a\nlist of book authors in a relational\ndatabase you can form relationships\nbetween tables\nso a database is a repository of data a\nset of software tools for the data in\nthe database is called a database\nmanagement system or dbms for short\nthe terms database database server\ndatabase system data server and database\nManagement systems are often used\ninterchangeably\nfor relational databases it's called a\nrelational database management system or\nrdbms\nrdbms is a set of software tools that\ncontrols the data such as access\norganization and storage an rdbms serves\nas the backbone of applications in many\nIndustries including banking\nTransportation health and so on\nexamples of relational database\nManagement systems are MySQL Oracle\ndatabase db2 warehouse and db2 on cloud\nfor the majority of people using a\ndatabase there are five simple commands\nto create a table insert data to\npopulate the table select data from the\ntable\nupdate data in the table delete data\nfrom the table\nso those are the building blocks for SQL\nfor data science\nyou can now describe what is SQL what is\ndata what is a database and what is a\nrelational database\nyou know the rdbms stands for relational\ndatabase management system\nand you can list five basic SQL commands\nto create a table insert data to\npopulate the table select data from the\ntable update data in the table and\ndelete data from the table\nthanks for watching this video\n[Music]\nhello and welcome to retrieving data\nwith the select statement in this video\nwe will learn about retrieving data from\na relational database table by selecting\nColumns of a table at the end of this\nlesson you will be able to retrieve data\nfrom a relational database table Define\nthe use of a predicate identify the\nsyntax of the select statement using the\nwhere clause and list the comparison\noperators supported by a relational\ndatabase management system\nthe main purpose of a database\nmanagement system is not just to store\nthe data but also facilitate retrieval\nof the data so after creating a\nrelational database table and inserting\ndata into the table we want to see the\ndata to see the data we use the select\nstatement\nthe select statement is a data\nmanipulation language statement\ndata manipulation language statements or\nDML statements are used to read and\nmodify data the select statement is\ncalled a query and the output we get\nfrom executing this query is called a\nresult set or a result table\nin its simplest form a select statement\nis Select star from table name\nbased on the book entity example we\nwould create the table using the entity\nname book and the entity attributes as\nThe Columns of the table\nthe data would be added to the book\ntable by adding rows to the table using\nthe insert statement in the book entity\nexamples select star from book gives a\nresult set of four rows\nall the data rows for all columns in the\ntable book are displayed\nin addition you can also retrieve all\nthe rows for all columns by specifying\nthe column names individually in the\nselect statement\nyou don't always have to retrieve all\nthe columns in a table you can retrieve\njust a subset of columns if you want you\ncan retrieve just two columns from the\ntable book for example book underscore\nID and title\nin this case the select statement is\nSelect book underscore ID title from\nbook\nin this case only the two columns\ndisplay for each of the four rows also\nnotice that the order of the columns\ndisplayed always matches the order in\nthe select statement however what if we\nwant to know the title of the book whose\nbook underscore ID is B1\nrelational operation helps us in\nrestricting the results set by allowing\nus to use the Clause where the where\nClause always requires a predicate a\npredicate is a condition that evaluates\nto true false or unknown predicates are\nused in the search condition of the\nwhere clause\nso if we need to know the title of the\nbook whose book underscore ID is B1 we\nuse the where Clause with the predicate\nbook underscore ID equals B1\nselect book underscore ID title from\nbook where book underscore ID equals B1\nnotice that the result set is now\nrestricted to just one row whose\ncondition evaluates to true\nthe previous example used the comparison\noperator equal to in the where clause\nthere are other comparison operators\nsupported by a relational database\nmanagement system equal to greater than\nless than greater than or equal to less\nthan or equal to and not equal to\nnow you can retrieve data and select\ncolumns from a relational database table\nDefine the use of a predicate identify\nthe syntax of the select statement using\nthe where clause and list the comparison\noperators supported by a relational\ndatabase management system\nthanks for watching this video\n[Music]\nhello and welcome in this video we'll\nbriefly present a few useful Expressions\nthat are used with select statements\nthe first one is count\nis a built-in database function that\nretrieves the number of rows that match\nthe query criteria for example get the\ntotal number of rows in a given table\nselect count star from table name\nlet's say you create a table called\nMetals which has a column called country\nand you want to retrieve the number of\nrows where the metal recipient is from\nCanada\nyou can issue a query like this\nselect count country from Metals where\ncountry equals Canada\nthe second expression is distinct\ndistinct is used to remove duplicate\nvalues from a result set example to\nretrieve unique values in a column\nselect distinct column name from table\nname\nin the metals table mentioned earlier a\ncountry may have received a gold medal\nmultiple times\nexample retrieve the list of unique\ncountries that received gold medals that\nis removing all duplicate values of the\nsame country\nselect distinct country from Metals\nWhere Metal type equals gold\nthe third expression is limit limit is\nused for restricting the number of rows\nretrieved from the database example\nretrieve just the first 10 rows in a\ntable\nselect star from table name limit 10.\nthis can be very useful to examine the\nresult set by looking at just a few rows\ninstead of retrieving the entire result\nset which may be very large\nexample retrieve just a few rows in the\nmetals table for a particular year\nselect star from Metals where year\nequals 2018 limit five\nin this video we looked at some useful\nExpressions that are used with select\nstatements namely the count distinct and\nlimit built-in functions\nthanks for watching this video\n[Music]\nhello and welcome to the insert\nstatement in this video we will learn\nabout populating a relational database\ntable at the end of this video you will\nbe able to identify the syntax of the\ninsert statement and explain two methods\nto add rows to a table\nafter a table is created the table needs\nto be populated with data to insert data\ninto a table we use the insert statement\nthe insert statement is used to add new\nrows to a table the insert statement is\none of the data manipulation language\nstatements data manipulation language\nstatements or DML statements are used to\nread and modify data\nbased on the author entity example we\ncreated the table using the entity name\nauthor and the entity attributes as The\nColumns of the table\nnow we will add the data to the author\ntable by adding rows to the table\nto add the data to the author table we\nuse the insert statement the syntax of\nthe insert statement looks like this\ninsert into table name column name\nvalues\nin this statement table name identifies\nthe table the column name list\nidentifies each column in the table and\nthe values Clause specifies the data\nvalues to be added to the columns in the\ntable\nto add a row with the data for Raul\nChong we insert a row with an author\nunderscore ID of A1 the last name is\nChong the first name as Raul the email\nas RFC ibm.com the city s Toronto and\nthe country SCA for Canada the author\ntable has six columns so the insert\nstatement lists the six column names\nseparated by commas followed by a value\nfor each of the columns also separated\nby commas\nit is important that the number of\nvalues provided in the values Clause is\nequal to the number of column names\nspecified in the column name list this\nensures that each column has a value\ntables do not need to be populated one\nrow at a time multiple rows can be\ninserted by specifying each row in the\nvalues clause in the values Clause each\nrow is separated by a comma\nfor example in this insert statement we\nare inserting two rows one for Raul\nChong and one for RAV Ahuja\nnow you can identify the syntax of the\ninsert statement and explain the two\nmethods to add rows to a table one row\nat a time or multiple rows\nthanks for watching this video\n[Music]\nhello and welcome to the update\nstatement and the delete statement in\nthis video we will learn about altering\nand deleting data in a relational\ndatabase table at the end of this lesson\nyou will be able to identify the syntax\nof the update statement and delete\nstatement and explain the importance of\nthe where clause in these statements\nafter a table is created and populated\nwith data the data in a table can be\naltered with the update statement the\nupdate statement is one of the data\nmanipulation language or DML statements\nDML statements are used to read and\nmodify data\nbased on the author entity example we\ncreated the table using the entity name\nauthor and the entity attributes as The\nColumns of the table\nrows were added to the author table to\npopulate the table\nsome time later you want to alter the\ndata in the table\nto alter or modify the data in the\nauthor table we use the update statement\nthe syntax of the update statement looks\nlike this update table name set column\nname equal to Value where condition\nin this statement table name identifies\nthe table the column name identifies the\ncolumn value to be changed as specified\nin the where condition let's look at an\nexample\nin this example you want to update the\nfirst name and last name of the author\nwith author underscore ida2 from RAV\nAhuja to Lakshmi Kata in this example to\nsee the update statement in action we\nstart by selecting all rows from the\nauthor table to see the values\nto change the first name and last name\nto Lakshmi Kata where the author ID is\nequal to A2 enter the update statement\nas follows update author set last name\nequal to Kata first name equal to\nLakshmi where author ID is equal to A2\nnow to see the result of the update\nselect all rows again from the author\ntable and you will see that in Row 2 the\nname changed from Rob Ahuja to Lakshmi\nKata\nnote that if you do not specify the\nwhere Clause all the rows in the table\nwill be updated in this example without\nspecifying the where Clause all rows in\nthe table would have changed the first\nand last names to Lakshmi Kata\nsometime later there might be a need to\nremove one or more rows from a table the\nrows are removed with the delete\nstatement the delete statement is one of\nthe data manipulation language\nstatements used to read and modify data\nthe syntax of the delete statement looks\nlike this delete from table name where\ncondition the rows to be removed are\nspecified in the where condition\nbased on the author entity example we\nwant to delete the rows for author ID A2\nand A3 let's look at an example\ndelete from author where author ID in A2\nA3 note that if you do not specify the\nwhere Clause all the rows in the table\nwill be removed\nnow you can identify the syntax of the\nupdate statement and delete statement\nand explain the importance of the where\nclause in these statements thanks for\nwatching this video\nforeign\n[Music]\nhello and welcome to database Concepts\nin this video we will learn about\ndifferent types of models how we use\nmodels to map data to tables and Define\nrelationships between tables at the end\nof this lesson you will be able to\nexplain the advantage of the relational\nmodel explain how the entity name and\nattributes map to a relational database\ntable describe the difference between an\nentity and an attribute Identify some\ncommonly used data types and describe\nthe function of primary keys\nthe relational model is the most used\ndata model for databases because this\nmodel allows for data Independence data\nis stored in a simple data structure\ntables this provides logical data\nIndependence physical data Independence\nand physical storage Independence\nan entity relationship data model or ER\ndata model is an alternative to a\nrelational data model\nusing a simplified Library database as\nan example this figure shows an entity\nrelationship diagram or ERD that\nrepresents entities called tables and\ntheir relationships\nin the library example we have books a\nbook can be written by one or many\nauthors the library can have one or many\ncopies of a book each copy can be\nBorrowed by only one borrower at a time\nan entity relationship model proposes\nthinking of a database as a collection\nof entities\nrather than being used as a model on its\nown the ER model is used as a tool to\ndesign relational databases\nin the ER model entities are objects\nthat exist independently of any other\nentities in the database\nthe building blocks of an ER diagram are\nentities and attributes an entity can be\na noun person place or thing in an ER\ndiagram an entity is drawn as a\nrectangle entities have attributes which\nare the data elements that characterize\nthe entity attributes tell us more about\nthe entity in an ER diagram attributes\nare drawn as ovals\nusing a simplified Library as an example\nthe book is an example of an entity\nattributes are certain Properties or\ncharacteristics of an entity and tell us\nmore about the entity The Entity book\nhas attributes such as book title the\naddition of the book The Year the book\nwas written\nEtc attributes are connected to exactly\none entity\nThe Entity book becomes a table in the\ndatabase and the attributes become the\ncolumns in a table\na table is a combination of rows and\ncolumns while mapping the entity becomes\nthe table having said that the table has\nnot yet taken the form of rows and\ncolumns the attributes get translated\ninto columns in a table providing the\nactual table form of rows and columns\nlater we add some data values to each of\nthe columns which completes the table\nform\neach attribute stores data values of\ndifferent formats characters numbers\ndates currency and many more besides in\nThe Book Table example the title is made\nup of characters as book titles vary in\nlength we can set the variable character\ndata type for the title column varcar\nfor character columns that do not vary\nin length we use character or car the\naddition and year columns would be\nnumeric the ISBN column would be car\nbecause it contains dashes as well as\nnumbers and so on\nusing the book entity mapping as an\nexample we can create the tables for the\nremainder of our simplified Library\nexample using entity names like author\nauthor list borrower loan and copy The\nEntity attributes will be The Columns of\nthe tables\neach table is assigned a primary key the\nprimary key of A relational table\nuniquely identifies each Tuple or row in\na table preventing duplication of data\nand providing a way of defining\nrelationships between tables\ntables can also contain foreign Keys\nwhich are primary Keys defined in other\ntables creating a link between the\ntables\nnow you know that the key advantage of\nthe relational model is logical and\nphysical data Independence and storage\nIndependence\nentities are independent objects which\ncan have multiple characteristics called\nattributes\nwhen mapping to a relational database\nentities are represented as tables and\nattributes mapped to columns\ncommon data types include characters\nsuch as car and varcar numbers such as\ninteger and decimal and time stamps\nincluding date and time\na primary key uniquely identifies a\nspecific row in a table and prevents\nduplication of data\n[Music]\nhello and welcome this video will cover\nthe key Concepts around databases in the\ncloud in order to learn SQL you first\nneed to have a database available to\npractice your SQL queries an easy way to\ndo so is to create an instance of a\ndatabase in the cloud and use it to\nexecute your SQL queries\nafter completing this lesson you will be\nable to understand basic concepts\nrelated to Cloud databases list a few\nCloud databases describe database\nservice instances as well as demonstrate\nhow to create a service instance on an\nIBM db2 on cloud\na cloud database is a database service\nbuilt and accessed through a cloud\nplatform it serves many of the same\nfunctions as traditional databases with\nthe added flexibility of cloud computing\nsome advantages of using Cloud databases\ninclude ease of use users can access\nCloud databases from virtually anywhere\nusing a vendors API or web interface or\nyour own applications whether on cloud\nor remote\nscalability\nCloud databases can expand and Shrink\ntheir storage and compute capacities\nduring runtime to accommodate changing\nneeds and usage demands so organizations\nonly pay for what they actually use\nDisaster Recovery in the event of a\nnatural disaster or equipment failure or\npower outage data is kept secure through\nbackups on remote servers on cloud in\ngeographically distributed regions\na few examples of relational databases\non cloud include IBM db2 on cloud\ndatabases for postgresql on IBM Cloud\nOracle database cloud service Microsoft\nAzure SQL database and Amazon relational\ndatabase Services these Cloud databases\ncan run in the cloud either as a virtual\nmachine which you can manage or\ndelivered as a managed service depending\non the vendor the database Services can\neither be single or multi-tenant\ndepending on the service plan\nto run a database in Cloud you must\nfirst provision an instance of the\ndatabase service on the cloud platform\nof your choice an instance of a database\nas a service or dbaas provides users\nwith access to database resources in\nCloud without the need for setting up of\nthe underlying Hardware installing the\ndatabase software and administering the\ndatabase\nthe database service instance will hold\nyour data in related tables once your\ndata is loaded into the database\ninstance you can connect to the database\ninstance using a web interface or apis\nin your applications\nonce connected your application can send\nSQL queries across to the database\ninstance the database instance then\nresolves the SQL statements into\noperations against the data and objects\nin the database\nany data retrieved is returned to the\napplication as a result set\nnow let's see how a database instance is\ncreated for db2 on cloud\nIBM db2 on cloud is a SQL database\nprovisioned for you in the cloud\nyou can use db2 on cloud just as you\nwould use any database software but\nwithout the overhead and expensive\nhardware setup or software installation\nand maintenance\nnow let's see how we can set up a\nservice instance of db2 navigate to IBM\nCloud catalog and select the db2 service\nnote there are several variations of the\ndb2 service including db2 hosted and db2\nwarehouse for our purposes we will\nchoose the db2 service which comes with\na free light plan\nselect the light plan if need to change\nthe defaults you can type a service\ninstance name choose the region to\ndeploy to as well as an org and space\nfor the service then click create\nyou can view the IBM db2 service that\nyou created by selecting services from\nyour IBM Cloud dashboard\nfrom this dashboard you can manage your\ndatabase instance for example you can\nclick on the open console button to\nlaunch the web console for your database\ninstance the web console allows you to\ncreate tables load data explore data in\nyour tables and issue SQL queries\nin order to access your database\ninstance from your applications you will\nneed the service credentials for the\nfirst time around you'll need to create\na set of new credentials you can also\nchoose to create multiple sets of\ncredentials for different applications\nand users\nonce a set of service credentials is\ncreated you can view it as a Json\nsnippet the credentials include the\nnecessary details to establish a\nconnection to the database and includes\nthe following a database name and port\nnumber a host name which is the name of\nthe server on the cloud on which your\ndatabase instance resides a username\nwhich is the user ID you'll use to\nconnect along with the password note\nthat your username is also the schema\nname in which your tables will be\ncreated by default\nnow that you know how to create a\ndatabase instance on cloud the next step\nis to actually go and create one thank\nyou for watching this video\n[Music]\nwelcome to types of SQL statements at\nthe end of this video you will be able\nto distinguish between data definition\nlanguage statements and data\nmanipulation language statements\nSQL statements are used for interacting\nwith entities that is tables attributes\nthat is columns and they're tuples or\nrows with data values in relational\ndatabases\nSQL statements fall into two different\ncategories data definition language\nstatements and data manipulation\nlanguage statements\ndata definition language or ddl\nstatements are used to define change or\ndrop database objects such as tables\ncommon ddl statement types include\ncreate alter truncate and drop\ncreate which is used for creating tables\nand defining its columns alter is used\nfor altering tables including adding and\ndropping columns and modifying their\ndata types truncate is used for deleting\ndata in a table but not the table itself\ndrop is used for deleting tables\ndata manipulation language or DML\nstatements are used to read and modify\ndata in tables these are also sometimes\nreferred to as crud operations that is\ncreate read update and delete rows in a\ntable\ncommon DML statement types include\ninsert select update and delete insert\nis used for inserting a row or several\nrows of data into a table select reads\nor selects row or rows from a table\nupdate edits row or rows in a table and\ndelete removes a row or rows of data\nfrom a table\nnow you know that ddl or data definition\nlanguage statements are used for\ndefining or changing objects in a\ndatabase such as tables and DML or data\nmanipulation language statements are\nused for manipulating or working with\ndata in tables thanks for watching this\nvideo\nforeign\n[Music]\ntable statement\nat the end of this video you will be\nable to explain how the entity name and\nattributes are used to create a\nrelational database table now let's look\nat the most common ddl statement create\nthe syntax of the create table is shown\nhere you start with create table\nfollowed by the name of the table you\nwant to create then enclose the rest of\nthe statement inside of pair of\nparentheses or round brackets\neach row inside the parentheses\nspecifies the name of a column followed\nby its data type and possibly some\nadditional optional values that we will\nsee later\neach attribute or column definition is\nseparated by a comma\nfor example if we want to create a table\nfor provinces in Canada you would\nspecify create table provinces open\nparentheses ID car to primary key not\nnull comma name varcar 24 close\nparentheses\nin this example the data types used are\ncar which is a character string of a\nfixed length in this case two and varcar\nwhich is a character string of a\nvariable length in this case the\nvariable character field can be up to 24\ncharacters long\nissuing this statement would create a\ntable in the database with two columns\nthe First Column ID for storing the\nabbreviated two-letter Province\nshortcodes such as a b b c\nEtc and the second column called name\nfor storing the full name of the\nprovince such as Alberta British\nColumbia\nEtc\nnow let's look at a more elaborate\nexample based on the library database\nthis database includes several entities\nsuch as author book borrower Etc let's\nstart by creating the table for the\nauthor entity the name of the table will\nbe author and its attributes such as\nauthor underscore ID first name last\nname Etc will be The Columns of the\ntable\nin this table we will also assign the\nauthor underscore ID attribute as the\nprimary key so that no duplicate values\ncan exist recall the primary key of A\nrelational table uniquely identifies\neach Tuple or row in a table\nto create the author table issue the\nfollowing command create table author\nopen parentheses author underscore ID\nCar 2 primary key not null comma last\nname varcar 15 not null comma first name\nvarcar 15 not null comma email varcar 40\ncomma City varcar 15 comma Country Car 2\nclose parentheses\nnote that the author underscore ID is\nthe primary key this constraint prevents\nduplicate values in the table\nalso note that the last name and first\nname have the constraint not null this\nensures that these fields cannot contain\na null value since an author must have a\nname\nnow you know that create is a ddl\nstatement for creating entities or\ntables in a database and the create\ntable statement includes definition of\nattributes of columns in the table\nincluding names of columns data types of\ncolumns and other optional values if\nrequired such as the primary key\nconstraint thanks for watching this\nvideo\nforeign\n[Music]\ndrop and truncate tables after watching\nthis video you will be able to describe\nthe altar table drop table and truncate\nstatements explain the syntax and use\nthe statements in queries\nyou use the alter table statement to add\nor remove columns from a table to modify\nthe data type of columns to add or\nremove keys and to add or remove\nconstraints\nthe syntax of the alter table statement\nis shown here you start with alter table\nfollowed by the name of the table that\nyou want to alter differently to the\ncreate table statement though you do not\nuse parentheses to enclose the\nparameters for the alter table statement\neach row in the alter table statement\nspecifies one change that you want to\nmake to the table for example to add a\ntelephone number column to the author\ntable in the library database to store\nthe author's telephone number use the\nfollowing statement alter table author\nadd column telephone underscore number\nbig int semicolon in this example the\ndata type for the column is Big int\nwhich can hold the number up to 19\ndigits long you can also use the alter\ntable statement to modify the data type\nof a column\nto do this use the alter column Clause\nspecifying the new data type for the\ncolumn for example using a numeric data\ntype for telephone number means that you\ncannot include parentheses plus signs or\ndashes as part of the number you can\nchange the column to use the card data\ntype to overcome this this code shows\nhow to alter the author table alter\ntable author alter column telephone\nunderscore number set data type car open\nparentheses 20 close parentheses\nsemicolon altering the data type of a\ncolumn containing existing data can\ncause problems though if the existing\ndata is not compatible with the new data\ntype\nfor example changing a column from the\ncar data type to a numeric data type\nwill not work if the column already\ncontains non-numeric data if you try to\ndo this you will see an error message in\nthe notification log and the statement\nwill not run if your spec changes and\nyou no longer need this extra column you\ncan again use the alter table statement\nthis time with the drop column Clause to\nremove the column as shown alter table\nauthor drop column telephone underscore\nnumber semicolon similar to using drop\ncolumn to delete a column from a table\nyou use the drop table statement to\ndelete a table from a database if you\ndelete a table that contains data by\ndefault the data will be deleted\nalongside the table the Syntax for the\ndrop table statement is drop table table\nunderscore name semicolon so you use\nthis statement drop table author\nsemicolon to remove the table from the\ndatabase\nsometimes you might want to just delete\nthe data in a table rather than deleting\nthe table itself while you can use the\ndelete statement without a where Clause\nto do this it is generally quicker and\nmore efficient to truncate the table\ninstead you use the truncate table\nstatement to delete all of the rows in a\ntable the syntax of this statement is\ntruncate table table underscore name\nimmediate semicolon the immediate\nspecifies to process the statement\nimmediately and that it cannot be undone\nso to truncate the author table you use\nthis statement truncate table author\nimmediate semicolon in this video you\nlearned that the alter table statement\nchanges the structure of an existing\ntable for example to add modify or drop\ncolumns the drop table statement deletes\nan existing table and the truncate table\nstatement deletes all rows of data in a\ntable\nforeign\nhello and welcome to retrieving data\nwith select statement string patterns in\nthis video we will learn about some\nAdvanced Techniques in retrieving data\nfrom a relational database table at the\nend of this lesson you will be able to\ndescribe how to simplify a select\nstatement by using string patterns\nranges or sets of values\nthe main purpose of a database\nmanagement system is not just to store\nthe data but also facilitate retrieval\nof the data in its simplest form a\nselect statement is Select star from\ntable name\nbased on our simplified Library database\nmodel and the table book select star\nfrom book gives a result set of four\nrows all the data rows for all columns\nin the table book are displayed or you\ncan retrieve a subset of columns for\nexample just two columns from the table\nbook such as book underscore ID and\ntitle\nor you can restrict the result set by\nusing the where clause for example you\ncan select the title of the book whose\nbook underscore ID is B1\nbut what if we don't know exactly what\nvalue to specify in the where clause\nthe where Clause always requires a\npredicate which is a condition that\nevaluates to true false or unknown\nbut what if we don't know exactly what\nvalue the predicate is\nfor example what if we can't remember\nthe name of the author but we remember\nthat their first name starts with R\nin a relational database we can use\nstring patterns to search data rows that\nmatch this condition\nlet's look at some examples of using\nstring patterns if we can't remember the\nname of the author but we remember that\ntheir name starts with r we use the\nwhere Clause with the like predicate the\nlike predicate is used in a where Clause\nto search for a pattern in a column\nthe percent sign is used to define\nmissing letters the percent sign can be\nplaced before the pattern after the\npattern or both before and after the\npattern\nin this example we use the percent sign\nafter the pattern which is the letter r\nthe percent sign is called a wild card\ncharacter\na wild card character is used to\nsubstitute other characters\nso if we can't remember the name of the\nauthor but we can remember that their\nfirst name starts with the letter R we\nadd the like predicate to the where\nclause\nfor example select first name from\nauthor where first name like R\npercentile\nthis will return all rows in the author\ntable whose author's first name starts\nwith the letter r\nand here is the result set\ntwo rows are returned for authors Raul\nand RAV\nwhat if we wanted to retrieve the list\nof books whose number of pages is more\nthan 290 but less than 300. we could\nwrite the select statement like this\nspecifying the where Clause as where\npages is greater than or equal to 290\nand pages is less than or equal to 300.\nbut in a relational database we can use\na range of numbers to specify the same\ncondition\ninstead of using the comparison\noperators greater than or equal to we\nuse the comparison operator between and\nbetween and Compares two values the\nvalues in the range are inclusive\nin this case we rewrite the query to\nspecify the where Clause as where Pages\nbetween 290 and 300. the result set is\nthe save but the select statement is\neasier and quicker to write\nin some cases there are data values that\ncannot be grouped under ranges for\nexample if we want to know which\ncountries the authors are from\nif we wanted to retrieve authors from\nAustralia or Brazil we could write the\nselect statement with the where Clause\nrepeating the two country values\nhowever what if we want to retrieve\nauthors from Canada India and China\nthe where Clause would become very long\nrepeatedly listing the required country\nconditions\ninstead we can use the in operator the\nin operator allows us to specify a set\nof values in a where Clause this\noperator takes a list of Expressions to\ncompare against in this case the\ncountry's Australia or Brazil\nnow you can describe how to simplify a\nselect statement by using string\npatterns ranges or sets of values\nthanks for watching this video\n[Music]\nhello and welcome to sorting select\nstatement result sets in this video we\nwill learn about some Advanced\nTechniques in retrieving data from a\nrelational database table and sorting\nhow the result set displays\nat the end of this lesson you will be\nable to describe how to sort the result\nset by either ascending or descending\norder and explain how to indicate which\ncolumn to use for the Sorting order\nthe main purpose of a database\nmanagement system is not just to store\nthe data but also facilitate retrieval\nof the data\nin its simplest form a select statement\nis Select star from table name\nbased on our simplified Library database\nmodel and the table book select star\nfrom book gives a result set of four\nrows\nall the data rows for all columns in the\ntable book are displayed\nwe can choose to list the book titles\nonly as shown in this example Select\nTitle from book however the order does\nnot seem to be in any order displaying\nthe result set in alphabetical order\nwould make the result set more\nconvenient to do this we use the order\nby clause\nto display the results set in\nalphabetical order we add the order by\nClause to the select statement\nthe order by Clause is used in a query\nto sort the result set by a specified\ncolumn in this example we have used\norder by on the column title to sort the\nresult set by default the result set is\nsorted in ascending order in this\nexample the result set is sorted in\nalphabetical order by book title\nto sort into sending order use the\nkeyword Des the result set is now sorted\naccording to the column specified which\nis title and is sorted in descending\norder notice the order of the first\nthree rows the first three words of the\ntitle are the same\nso the Sorting starts from the point\nwhere the characters differ\nanother way of specifying the sort\ncolumn is to indicate the column\nsequence number\nin this example Select Title pages from\nbook order by 2 indicates the column\nsequence number in the query for the\nSorting order\ninstead of specifying the column name\nPages the number two is used in the\nselect statement the second column\nspecified in the column list is pages so\nthe sort order is based on the values in\nthe pages column in this case the pages\ncolumn indicates the number of pages in\nthe book\nas you can see the result set is an\nascending order by number of pages\nnow you can describe how to sort the\nresult set by either ascending or\ndescending order and explain how to\nindicate which column to use for the\nSorting order\nthanks for watching this video\n[Music]\nhello and welcome to grouping select\nstatement results sets in this video we\nwill learn about some Advanced\nTechniques in retrieving data from a\nrelational database table and sorting\nand grouping how the result set displays\nat the end of this lesson you will be\nable to explain how to eliminate\nduplicates from a result set and\ndescribe how to further restrict a\nresult set\nat times a select statement result set\ncan contain duplicate values based on\nour simplified Library database model in\nthe author table example the country\ncolumn lists the two-letter country code\nof the author's country\nif we select just the country column we\nget a list of all of the countries for\nexample select country from author order\nby 1. the order by Clause sorts the\nresult set\nthis results at list the countries the\nauthors belong to sorted alphabetically\nby country in this case the result set\ndisplays 20 rows one row for each of the\n20 authors but some of the authors come\nfrom the same country so the result set\ncontains duplicates\nhowever all we need is a list of\ncountries the authors come from\nso in this case duplicates do not make\nsense\nto eliminate duplicates we use the\nkeyword distinct\nusing the keyword distinct reduces the\nresult set to just six rows\nbut what if we wanted to also know how\nmany authors come from the same country\nso now we know that the 20 authors come\nfrom six different countries\nbut we might want to also know how many\nauthors come from the same country\nto display the result set listing the\ncountry and number of authors that come\nfrom that country we add the group by\nClause to the select statement\nthe group by Clause groups result into\nsubsets that has matching values for one\nor more columns in this example\ncountries are grouped and then counted\nusing the count function notice the\ncolumn heading for the second column in\nthe result set the numeric value 2\ndisplays as a column name because the\ncolumn name is not directly available in\nthe table\nthe second column in the result set was\ncalculated by the count function\ninstead of using the column name 2 we\ncan assign a column name to the result\nset\nwe do this using the as keyword in this\nexample we change the derived column\nname 2 to column name count using the as\ncount keyword this helps clarify the\nmeaning of the result set\nnow that we have the count of authors\nfrom different countries we can further\nrestrict the number of rows by passing\nsome conditions for example we can check\nif there are more than four authors from\nthe same country to set a condition to a\ngroup by Clause we use the keyword\nhaving\nthe having Clause is used in combination\nwith the group by clause it is very\nimportant to note that the where Clause\nis for the entire result set but the\nhaving Clause Works only with the group\nby clause\nto check if there are more than four\nauthors from the same country we add the\nfollowing to the select statement having\ncount country greater than four only\ncountries that have five or more authors\nfrom that country are listed in the\nresult set\nin this example those countries are\nChina with six authors and India also\nwith six authors\nnow you can explain how to eliminate\nduplicates from a result set and\ndescribe how to further restrict a\nresult set\nthanks for watching this video\n[Music]\nhello and welcome\nin this video we'll go over SQL\nfunctions built into the database so\nlet's get started\nwhile it is very much possible to First\nfetch data from a database and then\nperform operations on it from your\napplications and notebooks most\ndatabases come with built-in functions\nthese functions can be included in SQL\nstatements allowing you to perform\noperations on data right within the\ndatabase itself\nusing database functions can\nsignificantly reduce the amount of data\nthat needs to be retrieved from the\ndatabase that is reduces Network traffic\nand use of bandwidth\nwhen working with large data sets it may\nbe faster to use built-in functions\nrather than first retrieving the data\ninto your application and then executing\nfunctions on the retrieve data Note that\nit is also possible to create your own\nfunctions that is user-defined functions\nin the database but that is a more\nadvanced topic\nfor the examples in this lesson let's\nconsider this Pet Rescue table in the\ndatabase for a pet rescue organization\nit records rescue transaction details\nand includes the columns ID animal\nquantity cost and rescue date for the\npurposes of this lesson we have\npopulated it with several rows of data\nas shown here\nwhat are aggregate or column functions\nan aggregate function takes a collection\nof like values such as all of the values\nin a column as input and returns a\nsingle value or null\nexamples of aggregate functions include\nsum minimum maximum average\nEtc let's look at some examples based on\nthe Pet Rescue table\nthe sum function is used to add up all\nthe values in a column to use the\nfunction you write the column name\nwithin parentheses after the function\nname\nfor example to add up all of the values\nin the cost column select sum cost from\nPet Rescue\nwhen you use an aggregate function the\ncolumn in the results set by default is\ngiven a number it is possible to\nexplicitly name the resulting column for\nexample let's say we want to call the\noutput column in the previous query as\nsum of cost select sum cost as sum of\ncost from Pet Rescue note the use of as\nin this example\nminimum as the name implies is used to\nget the lowest value similarly maximum\nis used to get the highest value\nfor example to get the maximum quantity\nof any animal rescue in a single\ntransaction select Max quantity from Pet\nRescue\naggregate functions can also be applied\non a subset of data instead of an entire\ncolumn for example to get the minimum\nquantity of ID column for dogs select\nMin ID from Pet Rescue where animal\nequals dog\nthe average function is used to return\nthe average or the mean value for\nexample to specify the average value of\ncost as select average cost from Pet\nRescue\nnote that we can perform mathematical\noperations between columns and then\napply aggregate functions on them for\nexample to calculate the average cost\nper dog select average cost divided by\nquantity from Pet Rescue where animal\nequals dog\nin this case the cost is for multiple\nunits so we first divide the cost by the\nquantity of the rescue now let's look at\nthe scalar and string functions\nscalar functions perform operations on\nindividual values for example to round\nup or down every value in the cost\ncolumn to the nearest integer select\nround cost from Pet Rescue\nthere is a class of scalar functions\ncalled string functions that can be used\nfor operations on strings that is car\nand varcar values\nfor example to retrieve the length of\neach value in animal column select\nlength animal from Pet Rescue\nuppercase and lowercase functions can be\nused to return uppercase or lowercase\nvalues of strings\nfor example to retrieve animal values in\nuppercase select uppercase animal from\nPet Rescue\nscalar functions can be used in the\nwhere clause for example to get\nlowercase values of the animal column\nfor cat select star from Pet Rescue\nwhere lowercase animal equals cat\nthis type of a statement is useful for\nmatching values in the where Clause if\nyou are not sure whether the values are\nstored in upper lower or mixed case in\nthe table\nyou can also have one function operate\non the output of another function for\nexample to get unique cases for animal\ncolumn in uppercase select distinct\nuppercase animal from Pet Rescue\nin this video we looked at some built-in\nSQL aggregate functions such as sum\nminimum maximum and average we also\nlooked at scalar and string functions\nsuch as round lowercase and uppercase\nthank you for watching\n[Music]\nhello and welcome in this video we'll go\nover date and time SQL functions built\ninto the database so let's get started\nmost databases contain special data\ntypes for dates and times db2 contains\ndate time and time stamp types\nin db2 date has eight digits for year\nmonth and day time has six digits hours\nminutes and seconds\ntimestamp has 20 digits year month day\nhour minute seconds and microseconds\nwhere double X represents month and six\nZ's or Zeds represents microseconds\nfunctions exist to extract the day month\nday of month day of week day of year\nweek hour minute and second\nlet us look at some examples of queries\nfor date and time functions the day\nfunction can be used to extract the day\nportion from a date for example to get\nthe day portion for each rescue date\ninvolving cat select day rescue date\nfrom Pet Rescue where animal equals cat\ndate and time functions can be used in\nthe where clause for example to get the\nnumber of rescues during the month of\nMay that is for month 5. select count\nstar from Pet Rescue where month rescue\ndate equals zero five\nyou can also perform date or time\narithmetic for example to find out what\ndate it is three days after each rescue\ndate maybe you want to know this because\nthe rescue needs to be processed within\nthree days select rescue date plus three\ndays from Pet Rescue\nspecial registers current time and\ncurrent date are also available for\nexample to find out how many days have\npassed since each rescue date till now\nselect current date minus rescue date\nfrom Pet Rescue the result will be in\nyears months days\nin this video we looked at different\ntypes of built-in SQL functions for\nworking with dates and times thank you\nfor watching\n[Music]\nhello and welcome in this video you'll\nlearn how to write subqueries or nested\nselect statements\nsub queries or subselects are like\nregular queries but placed within\nparentheses and nested inside another\nquery this allows you to form more\npowerful queries than would have been\notherwise possible\nan example of a nested query is shown\nin this example the sub query is inside\nthe where Clause of another query\nconsider the employees table from the\nprevious video\nthe first few rows of data are shown\nhere\nthe table contains several columns\nincluding an employee ID first name last\nname salary\nEtc\nwe will now go over some examples\ninvolving this table\nlet's consider a scenario which may\nnecessitate the use of sub queries\nlet's say we want to retrieve the list\nof employees who earn more than the\naverage salary\nto do so we could try this code select\nstar from employees where salary is\ngreater than average salary\nhowever running this query will result\nin an error like the one shown\nindicating an invalid use of the\naggregate function\none of the limitations of built-in\naggregate functions like the average\nfunction is that they cannot always be\nevaluated in the where clause\nso to evaluate a function like average\nin the where Clause we can make use of a\nsub-select expression like the one shown\nhere\nselect employee ID first name last name\nsalary from employees where salary is\nless than open parenthesis select\naverage salary from employees close\nparenthesis\nnotice that the average function is\nevaluated in the first part of the sub\nquery allowing us to circumvent the\nlimitation of evaluating it directly in\nthe where clause\nthe sub select doesn't just have to go\nin the where Clause it can also go in\nother parts of the query such as in the\nlist of columns to be selected such sub\nqueries are called column Expressions\nnow let's look at a scenario where we\nmight want to use a column expression\nsay we wanted to compare the salary of\neach employee with the average salary\nwe could try a query like select\nemployee ID salary average salary as\naverage salary from employees\nrunning this query will result in an\nerror indicating that no Group by Clause\nis specified\nwe can circumvent this error by using\nthe average function in a sub query\nplaced in the list of the columns\nfor example\nselect employee ID salary open left\nparenthesis select average salary from\nemployees close right parenthesis as\naverage salary from employees\nanother option is to make the subquery\nbe part of the from clause\nsub queries like these are sometimes\ncalled derived tables or table\nExpressions because the outer query uses\nthe results of the sub query as a data\nsource\nlet's look at an example to create a\ntable expression that contains\nnon-sensitive employee information\nselect star from select employee ID\nfirst name last name Department ID from\nemployees as employee for all\nthe derived table in the sub query does\nnot include sensitive Fields like date\nof birth or salary\nthis example is a trivial one and we\ncould just as easily have included the\ncolumns in the outer query however such\nderived tables can prove to be powerful\nand more complex situations such as when\nworking with multiple tables and doing\njoins\nin this video you have seen how\nsubqueries and nested queries can be\nused to form richer queries and how they\ncan overcome some of the limitations of\naggregate functions\nyou also learn to use subqueries in the\nwhere clause in the list of columns and\nin the from clause\nthanks for watching this video\n[Music]\nhello and welcome in this video you will\nlearn how to write queries that access\nmore than one table\nthere are several ways to access\nmultiple tables in the same query namely\nusing subqueries implicit join and join\noperators such as inner join and outer\njoin in this video we'll examine the\nfirst two options the third option is\ncovered in more detail in other videos\nlet's consider the employees and\ndepartments tables from a previous video\nthe employees table contains several\ncolumns for categories such as employee\nID first name last name and salary to\nname a few\nthe Department's table contains a\ndepartment ID Department name manager ID\nand location ID\nsome sample data from these tables is\nshown here\nwe will utilize these tables for the\nexamples in this video\nin a previous video we learned how to\nuse sub queries now let's use subqueries\nto work with multiple tables\nif we want to retrieve only the employee\nrecords from the employees table for\nwhich a department ID exists in the\nDepartments table we can use a sub query\nas follows\nselect star from employees where\nDepartment ID in select Department ID\nDepartment from departments\nhere the outer query accesses the\nemployees table and the sub query on the\nDepartments table is used for filtering\nthe result set of the outer query\nlet's say we want to retrieve only the\nlist of employees from a specific\nlocation we do not have any location\ninformation in the employees table but\nthe Department's table has a column\ncalled location ID\ntherefore we can use a sub query from\nthe Departments table as input to the\nemployee table query as follows\nselect star from employees where\nDepartment ID in select Department ID\nDepartment from departments where\nlocation ID equals l002\nnow let's retrieve the department ID and\nDepartment name for employees who earn\nmore than seventy thousand dollars\nto do so we will need a sub query on the\nemployees table to satisfy the salary\ncriteria and then feed it as input to an\nouter query on the Department's table in\norder to get the matching Department\ninfo\nselect Department ID Department\nname from departments where Department\nID Department n select Department ID\nfrom employees or salary is greater than\nseventy thousand\nwe can also access multiple Tables by\nspecifying them in the from Clause of\nthe query consider the example select\nstar from employees departments\nhere we specify two tables in the from\nclause\nthis results in a table join but note we\nare not explicitly using the join\noperator\nthe resulting join in this example is\ncalled a full join or Cartesian join\nbecause every Row in the first table is\njoined with every Row in the second\ntable\nif you examine the result set you will\nsee more rows than in both tables\nindividually\nwe can use additional operands to limit\nthe result set\nlet's look at an example where we limit\nthe result set to only rows with\nmatching Department IDs\nselect star from employees departments\nwhere employees Department ID equals\ndepartments Department ID Department\nnotice that in the where Clause we\nprefix the name of the column with the\nname of the table\nthis is to fully qualify the column name\nsince it's possible that different\ntables could have some column names that\nare exactly the same\nsince the table names can sometimes be\nlong we can use shorter aliases for\ntable names as shown here\nselect star from employees e departments\nD where e Department ID equals D\nDepartment ID Department\nhere we Define the Alias e for employees\ntable and D for departments table and\nthen use these aliases in the where\nclause\nif we wanted to see the department name\nfor each employee we would enter the\ncode as follows\nselect employee ID Department name from\nemployees e departments D where e\nDepartment ID equals D Department ID\nDepartment\nsimilar to before the column names in\nthe select Clause can also be prefixed\nby aliases as shown in the query select\ne employee ID D Department ID Department\nfrom employees e departments D where e\nDepartment ID equals D Department ID\nDepartment\nin this lesson we have shown you how to\nwork with multiple tables using\nsubqueries and implicit joins\nthanks for watching\n[Music]\nhello in this video you will learn how\nto access databases using python\ndatabases are powerful tools for data\nscientists after completing this module\nyou will be able to explain the basic\nconcepts related to using python to\nconnect to databases then you will\ncreate tables load data and query data\nusing SQL from jupyter notebooks and\nfinally analyze the data\nin the lab assignments you will learn\nhow to create an instance in the cloud\nconnect to a database query data from\nthe database using SQL and analyze the\ndata using python\nyou will be able to explain the basic\nconcepts related to connecting a python\napplication to a database describe SQL\napis as well as list some of the\nproprietary apis used by popular SQL\nbased dbms systems\nlet's quickly review some of the\nbenefits of using python a popular\nscripting language for connecting to\ndatabases\nthe python ecosystem is very rich and\nprovides easy to use tools for data\nscience\nsome of the most popular packages are\nnumpy pandas matplotlib and SCI pi\nThon is easy to learn and has a simple\nsyntax\ndue to its open source nature python has\nbeen ported to many platforms\nall your python programs can work on any\nof these platforms without requiring any\nchanges at all if you are careful and\navoid any system dependent features\npython supports relational database\nsystems\nwriting python code to access databases\nis made easier by the presence of the\nPython database API commonly referred to\nas the DB API\nand detailed documentation related to\npython is easily available\nnotebooks are also very popular in the\nfield of data science because they run\nin an environment that allows creation\nand sharing of documents that contain\nLive code equations visualizations and\nexplanatory text\na notebook interface is a virtual\nnotebook environment used for\nprogramming\nexamples of notebook interfaces include\nthe mathematica notebook Maple worksheet\nMatlab notebook IPython Jupiter R\nmarkdown Apache Zeppelin Apache spark\nnotebook and the databricks cloud\nin this module we will be using jupyter\nnotebooks The jupyter Notebook is an\nopen source web application that allows\nyou to create and share documents that\ncontain Live code equations\nvisualizations and narrative text\nhere are some of the advantages of using\njupyter notebooks notebook support for\nover 40 programming languages including\npython R Julia and Scala notebooks can\nbe shared with others by email Dropbox\nGitHub and the jupyter notebook viewer\nyour code can produce Rich interactive\noutput HTML images videos latex and\ncustom mime types you can leverage Big\nData tools such as Apache spark from\npython R and Scala and explore that same\ndata with pandas scikit learn ggplot2\nand tensorflow this is how a typical\nuser accesses databases using python\ncode written on a jupyter notebook a\nweb-based editor there is a mechanism by\nwhich the Python program communicates\nwith the dbms the python code connects\nto the database using API calls we will\nexplain the basics of SQL apis and\npython DB apis\nan application programming interface is\na set of functions that you can call to\nget access to some type of service\na SQL API consists of Library function\ncalls as an application programming\ninterface API for the dbms\nto pass SQL statements to the dbms an\napplication program calls functions in\nthe API and it calls other functions to\nretrieve query results and Status\ninformation from the dbms\nthe basic operation of a typical SQL API\nis Illustrated in the figure\nthe application program begins its\ndatabase access with one or more API\ncalls that connect the program to the\ndbms\nto send the SQL statement to the dbms\nthe program builds the statement as a\ntext string in a buffer and then makes\nan API call to pass the buffer contents\nto the dbms\nthe application program makes API calls\nto check the status of its dbms request\nand to handle errors\nthe application program ends its\ndatabase access with an API call that\ndisconnects it from the database\nnow let's learn basic concepts about\nsome of the proprietary apis used by\npopular SQL based dbms systems\neach database system has its own Library\nas you can see the table shows a list of\na few applications and corresponding SQL\napis\nmy SQL C API provides low-level access\nto the MySQL client server protocol and\nenable C programs to access database\ncontents\nthe psycho pg2 API connects python\napplications in postgresql databases\nthe IBM underscore DB API is used to\nconnect python applications to IBM db2\ndatabases\nthe dblib API is used to connect to SQL\nServer databases\nodbc is used for database access for\nMicrosoft Windows OS\nI is used by Oracle databases and\nfinally jdbc is used by Java\napplications thanks for watching this\nvideo\n[Music]\nhello and welcome to writing code using\nDB API\nafter completing this video you will be\nable to explain the basic concepts\nrelated to the python DB API and\ndatabase cursors and also write code\nusing DB apis as we saw in the beginning\nof this module the user writes python\nprograms using a Jupiter notebook there\nis a mechanism by which the python code\ncommunicates with the dbms the python\ncode connects to the database using DB\nAPI calls\nDB API is Python's standard API for\naccessing relational databases it is a\nstandard that allows you to write a\nsingle program that works with multiple\nkinds of relational databases instead of\nwriting a separate program for each one\nso if you learn the DB API functions\nthen you can apply that knowledge to use\nany database with python\nhere are some advantages of using the DB\nAPI it's easy to implement and\nunderstand this API has been defined to\nencourage similarity between the python\nmodules that are used to access\ndatabases\nit achieves consistency which leads to\nmore easily understood modules the code\nis generally more portable across\ndatabases and it has a broader reach of\ndatabase connectivity from python\nas we know each database system has its\nown Library as you can see the table\nshows a list of a few databases and\ncorresponding DB apis to connect to\npython applications the IBM underscore\nDB library is used to connect to an IBM\ndb2 database\nthe my sequel connector python library\nis used to connect to a compose for my\nSQL database the psycho pg2 library is\nused to connect to a compose from\npostgresql database\nand finally the pi library is used\nto connect to a compose from mongodb\ndatabase the two main Concepts in the\npython DB API are connection objects and\nquery objects you use connection objects\nto connect to a database and manage your\ntransactions cursor objects are used to\nrun queries you open a cursor object and\nthen run queries the cursor Works\nsimilar to a cursor in a text processing\nsystem where you scroll down in your\nresult set and get your data into the\napplication cursors are used to scan\nthrough the results of a database\nthe DB API includes a connect\nConstructor for creating a connection to\nthe database it returns a connection\nobject which is then used by the various\nconnection methods these connection\nmethods are the cursor method which\nreturns a new cursor object using the\nconnection the commit method which is\nused to commit any pending transaction\nto the database the rollback method\nwhich causes the database to roll back\nto the start of any pending transaction\nthe close method which is used to close\na database connection\nthese objects represent a database\ncursor which is used to manage the\ncontent of a fetch operation\ncursors created from the same connection\nare not isolated that is any changes\ndone to the database by a cursor are\nimmediately visible by the other cursors\ncursors created from different\nconnections can or cannot be isolated\ndepending on how the transaction support\nis implemented\na database cursor is a control structure\nthat enables transversal over the\nrecords in a database it behaves like a\nfile name or file handle in a\nprogramming language\njust as a program opens a file to access\nits contents it opens a cursor to gain\naccess to the query results\nsimilarly the program closes a file to\nend its access and closes a cursor to\nend access to the query results another\nsimilarity is that Justice File handle\nkeeps track of the program's current\nposition within an open file a cursor\nkeeps track of the program's current\nposition within the query results\nlet's walk through a python application\nthat uses the DB API to query a database\nfirst you import your database module by\nusing the connect API from that module\nto open a connection to the database you\nuse the connect Constructor and pass in\nthe parameters that is the database name\nusername and password the connect\nfunction returns connection object after\nthis you create a cursor object on the\nconnection object the cursor is used to\nrun queries and fetch results after\nrunning the queries using the cursor we\nalso use the cursor to fetch the results\nof the query finally when the system is\ndone running the queries it frees all\nResources by closing the connection\nremember that it is always important to\nclose connections to avoid unused\nconnections taking up resources\nthanks for watching this video\n[Music]\nhello and welcome to connecting to a\ndatabase using the IBM underscore DB API\nafter completing this lesson you will be\nable to understand the IBM underscore DB\nAPI as well as the credentials required\nto connect to a database using python we\nwill also demonstrate how to connect to\nan IBM db2 database using python code\nwritten on a jupyter notebook\nthe IBM underscore DB API provides a\nvariety of useful python functions for\naccessing and manipulating data in an\nIBM data server database including\nfunctions for connecting to a database\npreparing and issuing SQL statements\nfetching rows from result sets calling\nstored procedures committing and rolling\nback transactions handling errors and\nretrieving metadata\nthe IBM underscore DB API uses the IBM\ndata server driver for odbc and CLI apis\nto connect to IBM db2 and infor mix\nwe import the IBM underscore DB Library\ninto our python application\nconnecting to the db2 requires the\nfollowing information a driver name a\ndatabase name a host DNS name or IP\naddress a host port a connection\nprotocol a user ID and a user password\nhere is an example of creating a db2\ndatabase Connection in Python\nwe create a connection object DSN which\nstores the connection credentials the\nconnect function of the IBM underscore\nDB API will be used to create a\nnon-persistent connection\nthe DSN object is passed as a parameter\nto the connection function if a\nconnection has been established with the\ndatabase then the code returns connected\nas the output otherwise the output will\nbe unable to connect to database then we\nfree all Resources by closing the\nconnection remember that it is always\nimportant to close connections so that\nwe can avoid unused connections taking\nup resources\nthank you for watching this video\n[Music]\nhello and welcome to creating tables\nloading data and querying data after\ncompleting this lesson you will be able\nto understand basic concepts related to\ncreating tables loading data and\nquerying data using python as well as\ndemonstrate an example of how to perform\nthese tasks using the IBM db2 on cloud\ndatabase and jupyter notebooks\nfor this example we will be using db2 as\nthe database\nwe first obtain a connection resource by\nconnecting to the database by using the\nconnect method of the IBM underscore DB\nAPI\nthere are different ways of creating\ntables in db2\nOne is using the web console provided by\ndb2 and the other option is to create\ntables from any SQL r or python\nenvironments let's take a look at how to\ncreate tables in db2 from our python\napplication here is a sample table of a\ncommercial trucks database let's see how\nwe can create the trucks table in the\ndb2 using python code to create a table\nwe use the IBM underscore DB exec\nunderscore immediate function the\nparameters for the function are\nconnection which is a valid database\nconnection resource that is returned\nfrom the IBM underscore DB connect or\nIBM underscore DBP connect function\nstatement which is a string that\ncontains the SQL statement and options\nwhich is an optional parameter that\nincludes a dictionary that specifies the\ntype of cursor to return for result sets\nhere is the code to create a table\ncalled trucks in Python\nwe use the IBM underscore DB exec\nunderscore immediate function of the IBM\nunderscore DB API\nthe connection resource that was created\nis passed as the first parameter to this\nfunction\nthe next parameter is the SQL statement\nwhich is the create table query used to\ncreate the trucks table\nthe new table created will have five\ncolumns serial underscore no will be the\nprimary key\nnow let's take a look at loading data we\nuse the IBM underscore DB exec\nunderscore immediate function of the IBM\nunderscore DB API the connection\nresource that was created is passed as\nthe first parameter to this function\nthe next parameter is the SQL statement\nwhich is the insert into query used to\ninsert data in the trucks table a new\nrow will be added to the trucks table\nsimilarly we add more rows to the trucks\ntable using the IBM underscore DB exec\nunderscore immediate function\nnow that your python code has been\nconnected to a database instance and the\ndatabase table has been created and\npopulated with data let's see how we can\nfetch data from the trucks table that we\ncreated on db2 using python code\nwe use the IBM underscore DB exec\nunderscore immediate function of the IBM\nunderscore DB API\nthe connection resource that was created\nis passed as the first parameter to this\nfunction the next parameter is the SQL\nstatement which is the select from table\nquery\nthe python code Returns the output which\nshows the fields of the data in the\ntrucks table\nyou can check if the output returned by\nthe select query shown is correct by\nreferring to the db2 console\nlet's look at how we can use pandas to\nretrieve data from the database tables\npandas is a popular python library that\ncontains high-level data structures and\nmanipulation tools designed to make data\nanalysis fast and easy in Python we load\ndata from the trucks table into a data\nframe called DF a data frame represents\na tabular spreadsheet like data\nstructure containing an ordered\ncollection of columns Each of which can\nbe a different value type\nthanks for watching this video\n[Music]\nhello and welcome to analyzing data with\npython after completing this video you\nwill be able to understand basic\nconcepts related to performing\nexploratory analysis on data we will\ndemonstrate an example of how to store\ndata using the IBM db2 on cloud database\nand then use Python to do some basic\ndata analysis on this data\nin this video we will be using the\nMcDonald's menu nutritional facts data\nfor popular menu items at McDonald's\nwhile using python to perform basic\nexploratory analysis\nMcDonald's is an American fast food\ncompany and the world's largest\nrestaurant chain by Revenue\nalthough McDonald's is known for fast\nfood items such as hamburgers french\nfries soft drinks milkshakes and\ndesserts the company has added to its\nmenu salads fish smoothies and fruit\nMcDonald's provides nutrition analysis\nof their menu items to help you balance\nyour McDonald's meal with other foods\nyou eat the data set used in this lesson\nhas been obtained from the nutritional\nfacts for McDonald's menu from kaggle we\nneed to create a table on db2 to store\nthe McDonald's menu nutrition facts data\nset that we will be using we will also\nbe using the console provided by db2 for\nthis process\nthere are four steps involved in loading\ndata into a table Source Target Define\nand finalize\nwe first load the spreadsheet into the\ndb2 using the console we then select the\ntarget schema and then you will be given\nan option to load the data into an\nexisting table or create a new table\nwhen you choose to create a new table\nyou have the option to specify the table\nname\nnext you will see a preview of the data\nwhere you can also Define The Columns\nand data types review the settings and\nbegin the load\nwhen the loading is complete you can see\nthe statistics on the loaded data next\nview the table to explore further db2\nallows you to analyze data using\nin-database analytics apis rstudio or\npython\nthe data has been loaded into our\nrelational database you can run Python\nscripts that retrieve data from and\nwrite data to a db2 database\nsuch scripts can be powerful tools to\nhelp you analyze your data for example\nyou can use them to generate statistical\nmodels Based on data in your database\nand to plot the results of these models\nin this lesson we will be using Python\nscripts that will be run within a\njupyter notebook now after obtaining a\nconnection resource by connecting to the\ndatabase by using the connect method of\nthe IBM underscore DB API we use the SQL\nselect query to verify the number of\nrows that have been loaded in the table\ncreated the figure shows a snapshot of\nthe output the output obtained is 260\nwhich is similar to the number of rows\nin the db2 console\nnow let's see how we can use pandas to\nretrieve data from the database tables\nwe load data from the McDonald's\nunderscore nutrition table into the data\nframe DF using the read underscore SQL\nmethod the SQL select query and the\nconnection object are passed as\nparameters to the read underscore SQL\nmethod we can view the first few rows of\nthe data frame DF that we created using\nthe head method now it's time to learn\nabout your data Panda's methods are\nequipped with a set of common\nmathematical and statistical methods\nlet's use the describe method to view\nthe summary statistics of the data in\nthe data frame then explore the output\nof the describe method\nwe see that there are 260 observations\nor food items in our data frame we also\nsee that there are nine unique\ncategories of food items in our data\nframe\nwe can also see summary statistics\ninformation such as frequency mean\nmedian standard deviation etc for the\n260 food items across the different\nvariables for example the maximum value\nfor total fat is 118. let's investigate\nthis data further let's try to\nunderstand one of the nutrients in the\nfood items which is sodium a main source\nof sodium is table salt the average\nAmerican eats five or more teaspoons of\nsalt each day this is about 20 times as\nmuch as the body needs sodium is found\nnaturally in foods but a lot of it is\nadded during processing and preparation\nmany foods that do not taste salty may\nstill be high in sodium large amounts of\nsodium can be hidden in canned processed\nand convenience Foods sodium controls\nfluid balance in our bodies and\nmaintains blood volume and blood\npressure eating too much sodium May\nraise blood pressure and cause fluid\nretention which could lead to swelling\nof the legs and feet or other health\nissues when limiting sodium in your diet\na common Target is to eat less than 2\n000 milligrams of sodium per day now\nusing the nutrition data set from\nMcDonald's let's do some basic data\nanalysis to answer the question which\nfood item has the maximum sodium content\nwe first use visualization to explore\nthe sodium content of food items using\nthe Swarm plot method provided by the\nSeabourn package we create a categorical\nscatter plot as shown on the right\nthen give as the input category on the\nx-axis sodium on the y-axis and the data\nwill be the data frame DF that contains\nthe nutritional data set from McDonald's\nthe plot shows the sodium values for the\ndifferent food items by category\nnotice a high value of around 3600 for\nsodium on the scatter plot we will be\nlearning about visualizations later in\nthis module let's further explore this\nhigh sodium value and identify which\nfood items on the menu have this value\nfor sodium let some basic data analysis\nusing python to find which food items on\nthe menu have maximum sodium content to\ncheck the values of sodium levels in the\nfood items within the data set we use\nthe code as shown in code one the\ndescribe method is used to understand\nthe summary statistics associated with\nsodium\nnotice that the maximum value of sodium\nis given as 3600 now let's further\nexplore the row associated with the\nmaximum sodium variable as shown in code\ntwo we use the idx max method to compute\nthe index values at which the maximum\nvalue of sodium is obtained in the data\nframe we see that the output is 82. now\nlet's find the item name associated with\nthe 82nd item in our data frame as shown\nin code 3 we will use the dot at method\nto find the item Name by passing the\nindex of 82 and the column name item to\nbe returned for the 82nd row\nfinally we find that the food item on\nthe menu that has the highest sodium\ncontent is chicken McNuggets 40 pieces\nvisualizations are very useful for\ninitial data exploration they can help\nus understand relationships patterns and\noutliers in the data let's first create\na scatter plot with protein on the\nx-axis and total fat on the y-axis\nScatter Plots are very popular\nvisualization tools and show the\nrelationship between two variables with\na point for each observation to do this\nwe can use the joint plot function\nprovided by the Seaborn package and give\nas input protein on the x-axis and total\nfat on the y-axis and the data will be\nthe data frame DF that contains the\nnutritional data set from McDonald's\nthe output scatter plot is shown on the\nright side the plot has an interesting\nshape it shows the correlation between\nthe two variables protein and fat\ncorrelation is a measure of association\nbetween two variables and has a value of\nbetween negative one and plus one we see\nthat the points on the scatter plot are\ncloser to a straight line in the\npositive direction so we have a positive\ncorrelation between the two variables on\nthe top right corner of the scatter plot\nwe have the values of the Pearson\ncorrelation\n0.81 and the significance of the\ncorrelation denoted as P which is a good\nvalue that shows the variables are\ncertainly correlated\nthe plot also shows two histograms one\non the top and the other on the right\nside the histogram on the top is that of\nthe variable protein and the histogram\non the right side is that of the\nvariable total fat we also notice that\nthere is a point on the scatter plot\noutside the general pattern this is a\npossible outlier now let's see how we\ncan visualize data using box plots box\nplots are charts that indicate the\ndistribution of one or more variables\nthe Box in a box plot captures the\nmiddle fifty percent of data lines and\npoints indicate possible skewness and\noutliers let's create a box plot for\nsugar the function we are going to use\nis box plot from the Seaborn package we\ngive the column name sugars as input to\nthe box plot function the output is\nshown on the right side where we have\nthe box plot with average values of\nsugar and food items around 30 grams we\nalso notice a few outliers that indicate\nfood items with extreme values of sugar\nthere exists food items in the data set\nthat have sugar content of around 128\ngrams candies may be among these high\nsugar content food items on the menu now\nthat you know how to do basic\nexploratory data analysis using pandas\nand visualization tools proceed to the\nlabs in this module where you can\npractice the concepts learned\nthank you for watching this video\n[Music]\nhello and welcome in this video we'll\ngive you a few hints and tips for\nworking with real world data sets\nmany of the real world data sets are\nmade available as dot CSV files these\nare text files which contain data values\ntypically separated by commas in some\ncases a different separator such as a\nsemicolon may be used\nfor this video we will use an example of\na file called dogs.csv\nalthough this is a fictional data set\nthat contains names of dogs and their\nbreeds we will use it to illustrate\nConcepts that you will then apply to\nreal data sets sample contents of the\ndogs dot CSV file are shown here the\nfirst row in the table in many cases\ncontains attribute labels which map to\ncolumn names in a table\nin dogs.csv the first row contains the\nname of three attributes ID is the name\nof the first attribute and the\nsubsequent rows contain ID values of 1 2\nand 3. the name of the dog is the second\nattribute in this case the dog names\nWolfie fluffy and Huggy are the values\nand the third attribute is called breed\neither the dominant breed or pure breed\nname it has values of German Shepherd\nPomeranian and Labrador as we've just\nseen CSV files can have the first or a\nheader row that contains the names of\nthe attributes if you're loading the\ndata into the database using the visual\nload tool in the database console ensure\nthe header in first row is enabled\nthis will map the attribute names in the\nfirst row of the CSV file into column\nnames in the database table and the rest\nof the rows into the data rows in the\ntable as shown here note that the\ndefault column names may not always be\ndatabase or query friendly and if that\nis the case you may want to edit them\nbefore the table is created now let's\ntalk about querying column names that\nare lower or mixed case that is a\ncombination of upper and lowercase\nlet's assume we loaded the dogs.csv file\nusing the default column names from the\nCSV if we try to retrieve the contents\nof the ID column using the query select\nlowercase ID from dogs we'll get an\nerror as shown indicating the ID is not\nvalid this is because the database\nparser assumes uppercase names by\ndefault whereas when we loaded the CSV\nfile into the database it had the ID\ncolumn name in mixed case IE an\nuppercase i and a lowercase D in this\ncase to select data from a column with a\nmixed case name we need to specify the\ncolumn name in its correct case within\ndouble quotes as follows select double\nquotes uppercase i lowercase D and\ndouble quotes from dogs ensure you use\ndouble quotes around the column name and\nnot single quotes\nnext we'll cover querying column names\nthat have spaces and other characters in\na CSV file if the name of the column\ncontains Spaces by default the database\nMay map them to underscores for example\nin the name of dog column there are\nspaces in between the three words the\ndatabase may change it to name\nunderscore of underscore dog\nother special characters like\nparentheses or brackets may also get\nmapped to underscores therefore when you\nwrite a query ensure you use proper case\nformatting within quotes and substitute\nspecial characters to underscores as\nshown in this example select ID name of\ndog breed dominant breed if not pure\nbreed from dogs please note the\nunderscores separating the words within\ndouble quotes also note the double\nunderscore between breed and dominant as\nshown finally it's also important to\nnote the trailing underscore after the\nword breed near the end of the query\nthis is used in place of the closing\nbracket when using quotes in Jupiter\nnotebooks you may be issuing queries in\na notebook by first assigning them to\npython variables in such cases if your\nquery contains double quotes for example\nto specify a mixed case column name you\ncould differentiate the quotes by using\nsingle quotes for the python variable to\nenclose the SQL query and double quotes\nfor the column names for example select\nquery equals open single quote select ID\nand double quotes from dogs close single\nquote now what if you need to specify\nsingle quotes within the query for\nexample to specify a value in the where\nclause\nin this case you can use backslash as\nthe Escape character as follows\nselect query equals open single quote\nselect star from dogs where open double\nquote name of dog close double quote\nequals backslash single quote Huggy\nbackslash single quote close single\nquote\nif you have very long queries such as\njoin queries or nested queries it may be\nuseful to split the query into multiple\nlines for improved readability in Python\nnotebooks you can use the backslash\ncharacter to indicate continuation to\nthe next row as shown in this example\npercent SQL select ID name of dog\nbackslash from dogs backslash or name of\ndog equals huggy it would be helpful at\nthis point to take a moment to review\nthe special characters as shown\nplease keep in mind that you might get\nan error if you split the query into\nmultiple lines in a python notebook\nwithout the backslash\nwhen using SQL magic you can use the\ndouble percent SQL in the first line of\nthe cell in Jupiter notebooks it implies\nthat the rest of the content of the cell\nis to be interpreted by SQL magic for\nexample double percent SQL new row\nselect ID name of dog new row from Dogs\nnew row where name of dog equals huggy\nagain please note the special characters\nas shown\nwhen using double percent SQL the\nbackslash is not needed at the end of\neach line\nat this point you might be asking how\nwould you restrict the number of rows\nretrieved it's a good question because a\ntable may contain thousands or even\nmillions of rows and you may only want\nto see some sample data or look at just\na few rows to see what kind of data the\ntable contains\nyou may be tempted to just do select\nstar from table name to retrieve the\nresults in a pandas data frame and do a\nhead function on it but doing so may\ntake a long time for a query to run\ninstead you can restrict the result set\nby using the limit clause for example\nuse the following query to retrieve just\nthe first three rows in a table called\ncensus data select star from census\nunderscore data limit three\nin this video we looked at some\nconsiderations and tips for working with\nreal world data sets thanks for watching\n[Music]\nhello and welcome\nin this video we'll look at how to get\ninformation about tables and their\ncolumns in a database\nnow how would you get a list of tables\nin the database\nsometimes your database may contain\nseveral tables and you may not remember\nthe correct name\nfor example you may wonder whether the\ntable is called dog dogs or four-legged\nmammals\ndatabase systems typically contain\nsystem or catalog tables from where you\ncan query the list of tables and get\ntheir properties\nin db2 this catalog is called ciscat\ntables in SQL Server it's information\nschema tables and in Oracle it's all\ntables or user tables\nto get a list of tables in a db2\ndatabase you can run the following query\nselect star from syscat tables\nthis select statement will return too\nmany tables including system tables so\nit's better to filter the result as\nshown here\nselect tab schema tab name create\nunderscore time from syscat tables where\ntab schema equals abc12345\nplease ensure that you replace\nabc12345 with your own db2 username\nwhen you do a select star from syscat\ntables you get all the properties of the\ntables\nsometimes we're interested in specific\nproperties such as creation time\nlet's say you've created several tables\nwith similar names for example dog one\ndog underscore test dog test one and so\non but you want to check which of these\ntables was the last one you created\nto do so you can issue a query like\nselect tab schema tab name create\nunderscore time from syscat tables where\ntab schema equals qcm 54853\nthe output will contain the schema name\ntable name and creation time for all\ntables in your schema\nnext let's talk about how to get a list\nof columns in a table\nif you can't recall the exact name of a\ncolumn for example whether it had any\nlowercase characters or an underscore in\nhis name in db2 you can issue a query\nlike the one shown here\nselect star from syscap columns where\ntab name equals dogs\nfor your information in my sequel you\ncan simply run the command show columns\nfrom dogs\nor you may want to know specific\nproperties like the data type and length\nof the data type in db2 you can issue a\nstatement like select distinct name call\ntype length from CIS IBM CIS columns\nwhere TB name equals dogs\nhere we look at the results of\nretrieving column properties for a real\ntable called Chicago crime data from a\nJupiter notebook\nnotice in the output you can tell\ncertain column names show different\ncases for example the column titled\narrest has an uppercase a and the rest\nof the characters are lowercase\nso keep in mind that when you refer to\nthis column in your query not only must\nyou enclose the word arrest within\ndouble quotes you must also preserve the\ncorrect case inside the quotes\nin this video we saw how to retrieve\ntable and column information thanks for\nwatching\n[Music]\nin this video we'll be talking about\ndata analysis and the scenario in which\nwe'll be playing the data analyst or\ndata scientist\nbut before we begin talking about the\nproblem use car prices we should first\nunderstand the importance of data\nanalysis as you know data is collected\neverywhere around us whether it's\ncollected manually by scientists or\ncollected digitally every time you click\non a website or your mobile device\nbut data does not mean information\ndata analysis and in essence data\nscience helps us unlock the information\nand insights from raw data to answer our\nquestions\nso data analysis plays an important role\nby helping us to discover useful\ninformation from the data answer\nquestions and even predict the future or\nthe unknown\nso let's begin with our scenario let's\nsay we have a friend named Tom and Tom\nwants to sell his car but the problem is\nhe doesn't know how much he should sell\nhis car for\nTom wants to sell his car for as much as\nhe can\nbut he also wants to set the price\nreasonably so someone would want to\npurchase it\nso the price he set should represent the\nvalue of the car\nhow can we help Tom determine the best\nprice for his car\nlet's think like data scientists and\nclearly Define some of his problems\nfor example is there data on the prices\nof other cars and their characteristics\nwhat features of cars affect their\nprices color brand does Horsepower also\naffect the selling price or perhaps\nsomething else\nas a data analyst or data scientist\nthese are some of the questions we can\nstart thinking about\nto answer these questions we're going to\nneed some data\nin the next videos we'll be going into\nhow to understand the data how to import\nit into Python and how to begin looking\ninto some basic insights from the data\n[Music]\nin this video we'll be looking at the\ndata set on used car prices\nthe data set used in this course is an\nopen data set by Jeffrey C Schlemmer\nthis data set is in CSV format which\nseparates each of the values with commas\nmaking it very easy to import in most\ntools or applications each line\nrepresents a row in the data set in the\nHands-On lab for this module you'll be\nable to download and use the CSV file do\nyou notice anything different about the\nfirst row\nsometimes the first row is a header\nwhich contains a column name for each of\nthe 26 columns but in this example it's\njust another row of data\nso here's the documentation on what each\nof the 26 columns represent there are a\nlot of columns and I'll just go through\na few of the column names but you can\nalso check out the link at the bottom of\nthe slide to go through the descriptions\nyourself\nthe first attribute symboling\ncorresponds to the insurance risk level\nof a car\ns are initially assigned a risk factor\nsymbol associated with their price then\nif an automobile is more risky this\nsymbol is adjusted by moving it up the\nscale\na value of plus three indicates that the\nauto is risky minus three that it's\nprobably pretty safe\nthe second attribute normalized losses\nis the relative average loss payment per\ninsured vehicle year\nthis value is normalized for all Autos\nwithin a particular size classification\ntwo-door small station wagons Sports\nspecialty Etc and represents the average\nloss per car per year the values range\nfrom 65 to 256. the other attributes are\neasy to understand if you would like to\ncheck out more details refer to the link\nat the bottom of the slide\nokay after we understand the meaning of\neach feature we'll notice that the 26\nattribute is price\nthis is our Target value or label in\nother words this means price is the\nvalue that we want to predict from the\ndata set and the predictor should be all\nthe other variables listed like\nsymboling normalize losses make and so\non thus the goal of this project is to\npredict price in terms of other car\nfeatures just a quick note this data set\nis actually from 1985 so the car prices\nfor the models may seem a little low but\njust bear in mind that the goal of this\nexercise is to learn how to analyze the\ndata\nforeign\nin order to do data analysis in Python\nwe should first tell you a little bit\nabout the main packages relevant to\nanalysis in Python\na python library is a collection of\nfunctions and methods that allow you to\nperform lots of actions without writing\nany code\nthe libraries usually contain built-in\nmodules providing different\nfunctionalities which you can use\ndirectly and there are extensive\nlibraries offering a broad range of\nfacilities we have divided the python\ndata analysis libraries into three\ngroups the first group is called\nscientific Computing libraries\npandas offers data structure and tools\nfor Effective data manipulation and\nAnalysis it provides facts access to\nstructured data the primary instrument\nof pandas is a two-dimensional table\nconsisting of column and row labels\nwhich are called a data frame it is\ndesigned to provide easy indexing\nfunctionality\nthe numpy library uses arrays for its\ninputs and outputs it can be extended to\nobjects for matrices and with minor\ncoding changes developers can perform\nfast array processing\nPSI Pi includes functions for some\nadvanced math problems as listed on this\nslide as well as data visualization\nusing data visualization methods is the\nbest way to communicate with others\nshowing them meaningful results of\nanalysis these libraries enable you to\ncreate graphs charts and maps\nthe map plot lib package is the most\nwell-known library for data\nvisualization it is great for making\ngraphs and plots the graphs are also\nhighly customizable\nanother high-level visualization library\nis Seabourn it is based on matplotlib\nit's very easy to generate various plots\nsuch as heat Maps time series and violin\nplots\nwith machine learning algorithms we're\nable to develop a model using our data\nset and obtain predictions the\nalgorithmic libraries tackle some\nmachine learning tasks from basic to\ncomplex\nhere we introduce two packages the\nscikit learn Library contains tool\nstatistical modeling including\nregression classification clustering and\nso on this library is built on numpy Sci\npi and matplotlib\nstats models is also a python module\nthat allows users to explore data\nestimate statistical models and perform\nstatistical tests\n[Music]\nin this video we'll look at how to read\nin data using Python's pandas package\nonce we have our data in Python then we\ncan perform all the subsequent data\nanalysis procedures we need\ndata acquisition is a process of loading\nand reading data into notebook from\nvarious sources to read any data using\nPython's pandas package there are two\nimportant factors to consider format and\nfell path\nformat is the way data is encoded we can\nusually tell different encoding schemes\nby looking at the ending of the file\nname some common encodings are CSV Json\nxlsx hdf and so forth\nthe path tells us where the data is\nstored usually it is stored either on\nthe computer we are using or online on\nthe internet in our case we found a data\nset of used cars which was obtained from\nthe web address shown on the slide\nwhen Jerry entered the web address in\nhis web browser he saw something like\nthis\neach row is one data point a large\nnumber of properties are associated with\neach data point\nbecause the properties are separated\nfrom each other by commas we can guess\nthe data format as CSV which stands for\ncomma separated values\nat this point these are just numbers and\ndon't mean much to humans but once we\nread in this data we can try to make\nmore sense out of it\nin pandas the read CSV method can read\nin files with columns separated by\ncommas into a panda's data frame\nreading data in pandas can be done\nquickly in three lines\nfirst import pandas then Define a\nvariable with a file path\nand then use the read CSV method to\nimport the data\nhowever read CSV assumes the data\ncontains a header\nour data on used cars has no column\nheaders so we need to specify read CSV\nto not assign headers by setting header\nto none\nafter reading the data set it is a good\nidea to look at the data frame to get a\nbetter intuition and to ensure that\neverything occurred the way you expected\nsince printing the entire data set may\ntake up too much time and resources to\nsave time we can just use dataframe dot\nhead to show the first n rows of the\ndata frame\nsimilarly\ndataframe.tail shows the bottom end rows\nof data frame\nhere we printed out the first five rows\nof data it seems that the data set was\nread successfully\nwe can see the pandas automatically set\nthe column header as a list of integers\nbecause we set header equals none when\nwe read the data\nit is difficult to work with the data\nframe without having meaningful column\nnames however we can assign column names\nand pandas\nin our present case it turned out that\nwe have the column names in a separate\nfile online\nwe first put the column names in a list\ncalled headers then we set df.columns\nequals headers to replace the default\ninteger headers by the list\nif we use the head method introduced in\nthe last slide to check the data set we\nsee the correct headers inserted at the\ntop of each column\nat some point in time after you've done\noperations on your data frame you may\nwant to export your pandas data frame to\na new CSV file\nyou can do this using the method to\nunderscore CSV to do this specify the\nfile path which includes the file name\nthat you want to write to\nfor example if you would like to save\ndata frame DF as\nautomobile.csv to your own computer you\ncan use the syntax\ndf.2 underscore CSV\nfor this course we will only read and\nsave CSV files however pandas also\nsupports importing and exporting of most\ndata file types with different data set\nformats the code Syntax for reading and\nsaving other data formats is very\nsimilar to read or save CSV file each\ncolumn shows a different method to read\nand save files into a different format\n[Music]\nin this video we introduce some simple\npandas methods that all data scientists\nand analysts should know when using\npython pandas and data\nat this point we assume that the data\nhas been loaded it's time for us to\nexplore the data set\npandas has several built-in methods that\ncan be used to understand the data type\nof features or to look at the\ndistribution of data within the data set\nusing these methods gives an overview of\nthe data set and also point out\npotential issues such as the wrong data\ntype of features which may need to be\nresolved later on\ndata has a variety of types the main\ntypes stored in pandas objects are\nobject float int and date time the data\ntype names are somewhat different from\nthose in Native python this table shows\nthe differences and similarities between\nthem\nsome are very similar such as the\nnumeric data types int and Float the\nobject pandas type function similar to\nstring in Python save for the change in\nname while the date time pandas type is\na very useful type for handling time\nseries data there are two reasons to\ncheck data types in a data set\npandas automatically assigns types based\non the encoding it detects from the\noriginal data table for a number of\nreasons this assignment may be incorrect\nfor example it should be awkward if the\ncar price column which we should expect\nto contain continuous numeric numbers is\nassigned the data type of object it\nwould be more natural for it to have the\nfloat type Jerry may need to manually\nchange the data type to float\nthe second reason is that it allows an\nexperienced data scientist to see which\npython functions can be applied to a\nspecific column for example some math\nfunctions can only be applied to\nnumerical data\nif these functions are applied to\nnon-numerical data an error may result\nwhen the d-type method is applied to the\ndata set the data type of each column is\nreturned in a series\na good data scientist's intuition tells\nus that most of the data types make\nsense\nthe make of cars for example are names\nso this information should be of type\nobject\nthe last one on the list could be an\nissue as bore is a dimension of an\nengine we should expect a numerical data\ntype to be used instead the object type\nis used in later sections Jerry will\nhave to correct these type mismatches\nnow we would like to check the\nstatistical summary of each column to\nlearn about the distribution of data in\neach column\nthe statistical metrics can tell the\ndata scientist if there are mathematical\nissues that may exist such as extreme\noutliers and large deviations the data\nscientists may have to address these\nissues later to get the quick statistics\nwe use the describe method it Returns\nthe number of terms in the column as\ncount average column value as mean\ncolumn standard deviation as STD the\nmaximum minimum values as well as the\nboundary of each of the quartiles\nby default the dataframe.describe\nfunction skips rows and columns that do\nnot contain numbers\nit is possible to make the describe\nmethod work for object type columns as\nwell\nto enable a summary of all the columns\nwe could add an argument include equals\nall inside the describe function bracket\nnow the outcome shows the summary of all\nthe 26 columns including object typed\nattributes we see that for the object\ntype columns a different set of\nStatistics is evaluated like unique top\nand frequency\nunique is the number of distinct objects\nin the column top is the most frequently\noccurring object and freak is the number\nof times the top object appears in the\ncolumn\nsome values in the table are shown here\nas Nan which stands for not a number\nthis is because that particular\nstatistical metric cannot be calculated\nfor that specific column data type\nanother method you can use to check your\ndata set is the data frame dot info\nfunction this function shows the top 30\nrows and bottom 30 rows of the data\nframe\n[Music]\nhello in this video you will learn how\nto access databases using python\ndatabases are powerful tools for data\nscientists after completing this module\nyou will be able to explain the basic\nconcepts related to using python to\nconnect to databases this is how a\ntypical user accesses databases using\npython code written on a jupyter\nnotebook a web-based editor there is a\nmechanism by which the Python program\ncommunicates with the dbms the python\ncode connects to the database using API\ncalls we will explain the basics of SQL\napis and python DV apis\nan application programming interface is\na set of functions that you can call to\nget access to some type of service\na SQL API consists of Library function\ncalls as an application programming\ninterface API for the dbms\nto pass SQL statements to the dbms an\napplication program calls functions in\nthe API and it calls other functions to\nretrieve query results and Status\ninformation from the dbms\nthe basic operation of a typical SQL API\nis Illustrated in the figure\nthe application program begins its\ndatabase access with one or more API\ncalls that connect the program to the\ndbms\nto send the SQL statement to the dbms\nthe program builds the statement as a\ntext string in a buffer and then makes\nan API call to pass the buffer contents\nto the dbms\nthe application program makes API calls\nto check the status of its dbms request\nand to handle errors\nthe application program ends its\ndatabase access with an API call that\ndisconnects it from the database\nDB API is python standard API for\naccessing relational databases it is a\nstandard that allows you to write a\nsingle program that works with multiple\nkinds of relational databases instead of\nwriting a separate program for each one\nso if you learn the DB API functions\nthen you can apply that knowledge to use\nany database with python\nthe two main Concepts in the python DB\nAPI are connection objects and query\nobjects who use connection objects to\nconnect to a database and manage your\ntransactions\ncursor objects are used to run queries\nyou open a cursor object and then run\nqueries the cursor Works similar to a\ncursor in a text processing system where\nyou scroll down in your result set and\nget your data into the application\ncursors are used to scan through the\nresults of a database\nhere are the methods used with\nconnection objects the cursor method\nreturns a new cursor object using the\nconnection the commit method is used to\ncommit any pending transaction to the\ndatabase\nthe rollback method causes the database\nto roll back to the start of any pending\ntransaction the close method is used to\nclose a database connection\nlet's walk through a python application\nthat uses the DB API to query a database\nfirst you import your database module by\nusing the connect API from that module\nto open a connection to the database you\nuse the connection function and pass in\nthe parameters that is the database name\nusername and password\nthe connect function returns a\nconnection object\nafter this you create a cursor object on\nthe connection object the cursor is used\nto run queries and fetch results\nafter running the queries using the\ncursor we also use the cursor to fetch\nthe results of the query\nfinally when the system is done running\nthe queries it frees all Resources by\nclosing the connection\nremember that it is always important to\nclose connections to avoid unused\nconnections taking up resources\nthanks for watching this video\n[Music]\nthis video we'll be going through some\ndata pre-processing techniques\nif you're unfamiliar with the term data\npre-processing is a necessary step in\ndata analysis it is the process of\nconverting or mapping data from one raw\nform into another format to make it\nready for further analysis data\npre-processing is often called Data\ncleaning or data wrangling and there are\nlikely other terms here are the topics\nthat we'll be covering in this module\nfirst we'll show you how to identify and\nhandle missing values a missing value\ncondition occurs whenever a data entry\nis left empty then we'll cover data\nformats data from different sources may\nbe in various formats in different units\nor in various conventions we will\nintroduce some methods in Python pandas\nthat can standardize the values into the\nsame format or unit or convention after\nthat we'll cover data normalization\ndifferent Columns of numerical data may\nhave very different ranges and direct\ncomparison is often not meaningful\nnormalization is a way to bring all data\ninto a similar range for more useful\ncomparison specifically we'll focus on\nthe techniques of centering and scaling\nand then we'll introduce data binning\nbinning creates bigger categories from a\nset of numerical values it is\nparticularly useful for comparison\nbetween groups of data and lastly we'll\ntalk about categorical variables and\nshow you how to convert categorical\nvalues into numeric variables to make\nstatistical modeling easier in Python we\nusually perform operations along columns\neach row of the column represents a\nsample I.E a different used car in the\ndatabase\nyou access a column by specifying the\nname of the column for example you can\naccess symboling and body style each of\nthese columns is a panda series\nthere are many ways to manipulate data\nframes in Python for example you can add\na value to each entry of a column to add\n1 to each symboling entry use this\ncommand this changes each value of the\ndata frame column by adding 1 to the\ncurrent value\n[Music]\nin this video we will introduce the\npervasive problem of missing values as\nwell as strategies on what to do when\nyou encounter missing values in your\ndata\nwhen no data value is stored for feature\nfor a particular observation we say this\nfeature has a missing value\nusually missing value in data set\nappears as question mark and a 0 or just\na blank cell\nin the example here the normalized\nlosses feature has a missing value which\nis represented with n a n\nbut how can you deal with missing data\nthere are many ways to deal with missing\nvalues and this is regardless of python\nr or whatever tool you use\nof course each situation is different\nand should be judged differently however\nthese are the typical options you can\nconsider\nthe first is to check if the person or\ngroup that collected the data can go\nback and find what the actual value\nshould be\nanother possibility is just to remove\nthe data where that missing value is\nfound\nwhen you drop data you could either drop\nthe whole variable or just the single\ndata entry with the missing value\nif you don't have a lot of observations\nwith missing data usually dropping the\nparticular entry is the best\nif you're removing data you want to look\nto do something that has the least\namount of impact\nreplacing data is better since no data\nis wasted however it is less accurate\nsince we need to replace missing data\nwith a guess of what the data should be\none standard replacement technique is to\nreplace missing values by the average\nvalue of the entire variable\nas an example suppose we have some\nentries that have missing values for the\nnormalized losses column and the column\naverage for entries with data is 4 500.\nwhile there is no way for us to get an\naccurate guess of what the missing\nvalues under the normalized losses\ncolumn should have been you can\napproximate their values using the\naverage value of the column four\nthousand five hundred\nbut what if the values cannot be\naveraged as with categorical variables\nfor a variable like fuel type there\nisn't an average fuel type since the\nvariable values are not numbers\nin this case one possibility is to try\nusing the mode the most common like\ngasoline\nfinally sometimes we may find another\nway to guess the missing data\nthis is usually because the data\ngatherer knows something additional\nabout the missing data\nfor example he may know that the missing\nvalues tend to be old cars and the\nnormalized losses of old cars are\nsignificantly higher than the average\nvehicle and of course finally in some\ncases you may simply want to leave the\nmissing data as missing data\nfor one reason or another it may be\nuseful to keep that observation even if\nsome features are missing\nnow let's go into how to drop missing\nvalues or replace missing values in\nPython\nto remove data that contains missing\nvalues Panda's library has a built-in\nmethod called drop n a\nessentially with the drop n a method you\ncan choose to drop rows or columns that\ncontain missing values like Nan\nso you'll need to specify access equals\n0 to drop the rows or axis equals 1 to\ndrop the columns that contain the\nmissing values\nin this example there is a missing value\nin the price column\nsince the price of used cars is what\nwe're trying to predict in our upcoming\nanalysis we'd have to remove the cars\nthe rows that don't have a listed price\nit can simply be done in one line of\ncode using dataframe dot drop n a\nsetting the argument in place to True\nallows the modification to be done on\nthe data set directly\nin place equals true just writes the\nresult back into the data frame\nthis is equivalent to this line of code\ndon't forget that this line of code does\nnot change the data frame but it is a\ngood way to make sure that you are\nperforming the correct operation\nto modify the data frame you have to set\nthe parameter in place equal to true you\nshould always check the documentation if\nyou are not familiar with a function or\nmethod the pandas webpage has lots of\nuseful resources\nto replace missing values like n a ends\nwith actual values pandas library has a\nbuilt-in method called replace which can\nbe used to fill in the missing values\nwith the newly calculated values\nas an example assume that we want to\nreplace the missing values of the\nvariable normalized losses by the mean\nvalue of the variable\ntherefore the missing value should be\nreplaced by the average of the entries\nwithin that column in Python first we\ncalculate the mean of the column\nthen we use the method for place to\nspecify the value we would like to be\nreplaced as the first parameter in this\ncase n a n the second parameter is the\nvalue we would like to replace it with\nI.E the mean in this example\nthis is a fairly simplified way of\nreplacing missing values there are of\ncourse other techniques such as\nreplacing missing values for the average\nof the group instead of the entire data\nset\nso we've gone through two ways in Python\nto deal with missing data we learn to\ndrop problematic rows or columns\ncontaining missing values and then we\nlearned how to replace missing values\nwith other values but don't forget the\nother ways to deal with missing data you\ncan always check for a higher quality\ndata set or Source or in some cases you\nmay want to leave the missing data as\nmissing data\n[Music]\nin this video we'll look at the problem\nof data with different formats units and\nconventions and the pandas methods that\nhelp us deal with these issues\ndata is usually collected from different\nplaces by different people which may be\nstored in different formats data\nformatting means bringing data into a\ncommon standard of expression that\nallows users to make meaningful\ncomparisons\nas a part of data set cleaning data\nformatting ensures the data is\nconsistent and easily understandable\nfor example people may use different\nExpressions to represent New York City\nsuch as uppercase n uppercase y\nuppercase n lowercase y uppercase n\nuppercase Y and New York\nsometimes this unclean data is a good\nthing to see\nfor example if you're looking at the\ndifferent ways people tend to write New\nYork then this is exactly the data that\nyou want or if you're looking for ways\nto spot fraud perhaps writing n dot y\ndot is more likely to predict an anomaly\nthan if someone wrote out New York in\nfull but perhaps more often than not we\njust simply want to treat them all as\nthe same entity or format to make\nstatistical analyzes easier down the\nroad\nreferring to our used car data set\nthere's a feature named City miles per\ngallon in the data set which refers to a\ncar fuel consumption in miles per gallon\nunit\nhowever you may be someone who lives in\na country that uses metric units\nso you would want to convert those\nvalues to liters per 100 kilometers the\nmetric version\nto transform miles per gallon to liters\nper hundred kilometers we need to divide\n235 by each value in the city miles per\ngallon column\nin Python this can easily be done in one\nline of code you take the column and set\nit to equal to 235 divided by the entire\ncolumn in the second line of code rename\ncolumn name from City miles per gallon\nto City liters per hundred kilometers\nusing the data frame rename method for a\nnumber of reasons including when you\nimport a data set into python the data\ntype may be incorrectly established for\nexample here we notice that the assigned\ndata type to the price feature is object\nalthough the expected data type should\nreally be an integer or float type\nit is important for later analysis to\nexplore the features data type and\nconvert them to the correct data types\notherwise the develop models later on\nMay behave strangely and totally valid\ndata may end up being treated like\nmissing data\nthere are many data types in pandas\nobjects can be letters or words into 64\nare integers and floats are real numbers\nthere are many others that we will not\ndiscuss\nto identify a feature's data type in\nPython we can use the\ndataframe.dypes method and check the\ndata type of each variable in a data\nframe\nin the case of wrong data types the\nmethod data frame dot as type can be\nused to convert a data type from one\nformat to another\nfor example using as type int for the\nprice column you can convert the object\ncolumn into an integer type variable\n[Music]\nin this video we'll be talking about\ndata normalization an important\ntechnique to understand in data\npre-processing when we take a look at\nthe used car data set we notice in the\ndata that the feature length ranges from\n150 to 250 while feature width and\nheight ranges from 50 to 100 we may want\nto normalize these variables so that the\nrange of the values is consistent this\nnormalization can make some statistical\nanalyzes easier down the road\nby making the ranges consistent between\nvariables normalization enables a fairer\ncomparison between the different\nfeatures\nmaking sure they have the same impact it\nis also important for computational\nreasons\nhere is another example that will help\nyou understand why normalization is\nimportant\nconsider a data set containing two\nfeatures age and income where age ranges\nfrom zero to a hundred while income\nranges from zero to twenty thousand and\nhigher\nincome is about 1 000 times larger than\nage and ranges from twenty thousand to\nfive hundred thousand so these two\nfeatures are in very different ranges\nwhen we do further analysis like linear\nregression for example the attribute\nincome will intrinsically influence the\nresult more due to its larger value but\nthis doesn't necessarily mean it is more\nimportant as a predictor so the nature\nof the data biases the linear regression\nmodel to weigh income more heavily than\nage\nto avoid this we can normalize these two\nvariables into values that range from 0\nto 1.\ncompare the two tables at the right\nafter normalization both variables now\nhave a similar influence on the models\nwe will build later there are several\nways to normalize data I will just\nOutline Three techniques\nthe first method called Simple feature\nscaling just divides each value by the\nmaximum value for that feature this\nmakes the new values range between 0 and\n1. the second method called min max\ntakes each value X underscore old\nsubtract it from the minimum value of\nthat feature then divides by the range\nof that feature again the resulting new\nvalues range between 0 and 1. the third\nmethod is called z-score or standard\nscore\nin this formula for each value you\nsubtract the MU which is the average of\nthe feature and then divide by the\nstandard deviation the sigma\nthe resulting values hover around zero\nand typically range between negative 3\nand positive 3 but can be higher or\nlower\nfollowing our earlier example we can\napply the normalization method on the\nlength feature first we use the simple\nfeature scaling method where we divide\nit by the maximum value in the feature\nusing the pandas method Max this can be\ndone in just one line of code\nhere's the min max method on the length\nfeature we subtract each value by the\nminimum of that column then divide it by\nthe range of that column the max minus\nthe min\nfinally we apply the z-score method on\nlength feature to normalize the values\nhere we apply the mean and STD method on\nthe length feature mean method will\nreturn the average value of the feature\nin the data set an STD method will\nreturn the standard deviation of the\nfeatures in the data set\n[Music]\nin this video we'll be talking about\nbinning as a method of data\npre-processing\nbinning is when you group values\ntogether into bins for example you can\nbend age into 0 to 5 6 to 10 11 to 15\nand so on sometimes binning can improve\naccuracy of the predictive models in\naddition sometimes we use data binning\nto group a set of numerical values into\na smaller number of bins to have a\nbetter understanding of the data\ndistribution\nas example price here is an attribute\nrange from 5000 to 45 500.\nusing binning we categorize the price\ninto three bins low price median price\nand high prices\nin the actual card data set price is a\nnumerical variable ranging from\n5188 to forty five thousand four hundred\nit has 201 unique values we can\ncategorize them into three bins low\nmedium and high priced cars in Python we\ncan easily implement the binning we\nwould like three bins of equal bin width\nso we need four numbers as dividers that\nare equal distance apart\nfirst we use the numpy function linspace\nto return the array bins that contains\nfour equally spaced numbers over the\nspecified interval of the price\nwe create a list group underscore names\nthat contains the different bin names we\nuse the pandas function cut to segment\nand sort the data values into bins\nyou can then use histograms to visualize\nthe distribution of the data after\nthey've been divided into bins this is\nthe histogram that we plotted based on\nthe bidding that we applied in the price\nfeature from the plot it is clear that\nmost cars have a low price and only very\nfew cars have high price\n[Music]\nin this video we'll discuss how to turn\ncategorical variables into quantitative\nvariables in Python\nmost statistical models cannot take in\nobjects or strings as input and for\nmodel training only take the numbers as\ninputs\nin the card data set the fuel type\nfeature has a categorical variable has\ntwo values gas or diesel which are in\nstring format for further analysis Jerry\nhas to convert these variables into some\nform of numeric format\nwe encode the values by adding new\nfeatures corresponding to each unique\nelement in the original feature we would\nlike to encode in the case where the\nfeature fuel has two unique values gas\nand Diesel we create two new features\ngas and Diesel when a value occurs in\nthe original feature we set the\ncorresponding value to 1 in the new\nfeature the rest of the features are set\nto zero in the fuel example for car B\nthe fuel value is diesel therefore we\nset the featured diesel equal to one and\nthe gas feature to zero similarly for\ncar D the fuel value is gas therefore we\nset the feature gas equal to 1 and the\nfeature diesel equal to zero this\ntechnique is often called one hot\nencoding in pandas we can use get\nunderscore dummies method to convert\ncategorical variables to dummy variables\nin Python transforming categorical\nvariables to dummy variables is simple\nfollowing the example PD dot get\nunderscore dummies method gets the fuel\ntype column and creates the data frame\ndummy underscore variable underscore one\nthe get underscore dummies method\nautomatically generates a list of\nnumbers each one corresponding to a\nparticular category of the variable\n[Music]\nin this module we're going to cover the\nbasics of exploratory data analysis\nusing python\nexploratory data analysis or in short\nEda is an approach to analyze data in\norder to summarize main characteristics\nof the data gain better understanding of\nthe data set uncover relationships\nbetween different variables and extract\nimportant variables for the problem\nwe're trying to solve\nthe main question we are trying to\nanswer in this module is what are the\ncharacteristics that have the most\nimpact on the car price we will be going\nthrough a couple of different useful\nexploratory data analysis techniques in\norder to answer this question\nin this module you will learn about\ndescriptive statistics which describe\nbasic features of a data set and obtains\na short summary about the sample and\nmeasures of the data basic of grouping\ndata using Group by and how this can\nhelp to transform our data set the\ncorrelation between different variables\nand lastly Advanced correlation where\nwe'll introduce you to various\ncorrelation statistical methods namely\nPearson correlation and correlation heat\nMaps\nforeign\nwe'll be talking about descriptive\nstatistics\nwhen you begin to analyze data it's\nimportant to first explore your data\nbefore you spend time building\ncomplicated models one easy way to do so\nis to calculate some descriptive\nstatistics for your data descriptive\nstatistical analysis helps to describe\nbasic features of a data set and obtains\na short summary about the sample and\nmeasures of the data let's show you a\ncouple different useful methods\none way in which we can do this is by\nusing the describe function in pandas\nusing the describe function and applying\nit on your data frame the describe\nfunction automatically computes basic\nstatistics for all numerical variables\nit shows the mean the total number of\ndata points the standard deviation the\nquartiles and the extreme values any Nan\nvalues are automatically skipped in\nthese statistics\nthis function will give you a clearer\nidea of the distribution of your\ndifferent variables\nyou could have also categorical\nvariables in your data set these are\nvariables that can be divided up into\ndifferent categories or groups and have\ndiscrete values for example in our data\nset we have the drive system as a\ncategorical variable which consists of\nthe categories forward wheel drive rear\nwheel drive and four-wheel drive\none way you can summarize the\ncategorical data is by using the\nfunction value underscore counts we can\nchange the name of the column to make it\neasier to read\nwe see that we have 118 cars in the\nfront wheel drive category 75 cars in\nthe rear-wheel drive category and eight\ncars in the four-wheel drive category\nbox plots are a great way to visualize\nnumeric data since you can visualize the\nvarious distributions of the data the\nmain features that the box plot shows\nare the median of the data which\nrepresents where the middle data point\nis the upper quartile shows where the\n75th percentile is\nthe lower quartile shows where the 25th\npercentile is the data between the upper\nand lower quartile represents the\ninterquartile range\nnext you have the lower and upper\nextremes these are calculated as 1.5\ntimes the interquartile range above the\n75th percentile and as 1.5 times the IQR\nbelow the 25th percentile\nfinally box plots also display outliers\nas individual dots that occur outside\nthe upper and lower extremes with box\nplots you can easily spot outliers and\nalso see the distribution and skewness\nof the data\nbox plots make it easy to compare\nbetween groups in this example using box\nplot we can see the distribution of\ndifferent categories of the drive Wheels\nfeature over price feature we can see\nthat the distribution of price between\nthe rear wheel drive and the other\ncategories are distinct but the price\nfor front-wheel drive and four-wheel\ndrive are almost indistinguishable\noftentimes we tend to see continuous\nvariables in our data these data points\nare numbers contained in some range for\nexample in our data set price and engine\nsize are continuous variables\nwhat if we want to understand the\nrelationship between engine size and\nprice\ncould engine size possibly predict the\nprice of a car\none good way to visualize this is using\na scatter plot each observation in the\nscatter plot is represented as a point\nthis plot shows the relationship between\ntwo variables the predictor variable is\nthe variable that you are using to\npredict an outcome in this case our\npredictor variable is the engine size\nTarget variable is the variable that you\nare trying to predict in this case our\nTarget variable is the price since this\nwould be the outcome\nin a scatter plot we typically set the\npredictor variable on the x-axis or\nhorizontal axis and we set the target\nvariable on the y-axis or vertical axis\nin this case we will thus plot the\nengine size on the x-axis and the price\non the y-axis we are using the matplot\nlib function scatter here taking in X\nand A Y variable something to note is\nthat it's always important to label your\naxes and write a general plot title so\nthat you know what you're looking at\nnow how is the variable engine size\nrelated to price from the scatter plot\nwe see that as the engine size goes up\nthe price of the car also goes up\nthis is giving us an initial indication\nthat there is a positive linear\nrelationship between these two variables\n[Music]\nin this video we'll cover the basics of\ngrouping and how this can help to\ntransform our data set\nassume you want to know is there any\nrelationship between the different types\nof drive system forward rear and\nfour-wheel drive and the price of the\nvehicles\nif so which type of drive system adds\nthe most value to a vehicle\nit would be nice if we could group all\nthe data by the different types of Drive\nwheels and compare the results of these\ndifferent Drive Wheels against each\nother\nin pandas this can be done using the\ngroup by method the group by method is\nused on categorical variables groups the\ndata into subsets according to the\ndifferent categories of that variable\nyou can Group by a single variable or\nyou can Group by multiple variables by\npassing in multiple variable names\nas an example let's say we are\ninterested in finding the average price\nof vehicles and observe how they differ\nbetween different types of body styles\nand drive Wheels variables\nto do this we first pick out the three\ndata columns we are interested in which\nis done in the first line of code\nwe then group the reduced data according\nto drive wheels and body style in the\nsecond line\nsince we are interested in knowing how\nthe average price differs across the\nboard we can take the mean of each group\nand append it this bit at the very end\nof the line 2.\nthe data is now grouped into\nsubcategories and only the average price\nof each subcategory is shown\nwe can see that according to our data\nrear-wheel drive convertibles and\nrear-wheel drive hard tops have the\nhighest value while four-wheel drive\nhatchbacks have the lowest value\na table of this form isn't the easiest\nto read and also not very easy to\nvisualize to make it easier to\nunderstand we can transform this table\nto a pivot table by using the pivot\nmethod\nin the previous table both Drive wheels\nand body style were listening columns a\npivot table has one variable displayed\nalong the columns and the other variable\ndisplayed along the rows just with one\nline of code and by using the pandas\npivot method we can pivot the body style\nvariable so it is displayed along the\ncolumns and the drive wheels will be\ndisplayed along the rows\nthe price data now becomes a rectangular\ngrid which is easier to visualize this\nis similar to what is usually done in\nExcel spreadsheets\nanother way to represent the pivot table\nis using a heat map plot heat map takes\na rectangular grid of data and assigns a\ncolor intensity based on the data value\nat the grid points it is a great way to\nplot the target variable over multiple\nvariables and through this get visual\nclues of the relationship between these\nvariables and the target\nin this example we use Pi plot's P color\nmethod to plot heat map and convert the\nprevious pivot table into a graphical\nform we specified the red blue color\nscheme in the output plot each type of\nbody style is numbered along the x-axis\nand each type of Drive Wheels is\nnumbered along the y-axis\nthe average prices are plotted with\nvarying colors based on their values\naccording to the color bar we see that\nthe top section of the heat map seems to\nhave higher prices in the bottom section\n[Music]\nin this video we'll talk about the\ncorrelation between different variables\ncorrelation is a statistical metric for\nmeasuring to what extent different\nvariables are interdependent in other\nwords when we look at two variables over\ntime if one variable changes how does\nthis effect change in the other variable\nfor example smoking is known to be\ncorrelated to lung cancer since you have\na higher chance of getting lung cancer\nif you smoke\nin another example there is a\ncorrelation between umbrella and Rain\nvariables where more precipitation means\nmore people use umbrellas also if it\ndoesn't rain people would not carry\numbrellas therefore we can say that\numbrellas and Rain are interdependent\nand by definition they are correlated it\nis important to know that correlation\ndoesn't imply causation in fact we can\nsay that umbrella and Rain are\ncorrelated but we would not have enough\ninformation to say whether the umbrella\ncaused the rain or the rain caused the\numbrella in data science we usually deal\nmore with correlation\nlet's look at the correlation between\nengine size and price\nthis time we'll visualize these two\nvariables using a scatter plot and an\nadded linear line called a regression\nline which indicates the relationship\nbetween the two\nthe main goal of this plot is to see\nwhether the engine size has any impact\non the price\nin this example you can see that the\nstraight line through the data points is\nvery steep which shows that there is a\npositive linear relationship between the\ntwo variables with increase in values of\nengine size values of price go up as\nwell and the slope of the line is\npositive so there is a positive\ncorrelation between engine size and\nprice\nwe can use Seabourn reg plot to create\nthe scatter plot\nas another example now let's look at the\nrelationship between highway miles per\ngallon to see its impact on the car\nprice as we can see in this plot when\nhighway miles per gallon value goes up\nthe value of price goes down therefore\nthere is a negative linear relationship\nbetween highway miles per gallon and\nprice\nalthough this relationship is negative\nthe slope of the line is steep which\nmeans that the highway miles per gallon\nis still a good predictor of price these\ntwo variables are said to have a\nnegative correlation\nfinally we have an example of a weak\ncorrelation for example both low Peak\nRPM and high values of peak RPM have low\nand high prices therefore we cannot use\nRPM to predict the values\n[Music]\nin this video we'll introduce you to\nvarious correlation statistical methods\none way to measure the strength of the\ncorrelation between continuous numerical\nvariables is by using a method called\nPearson correlation Pearson correlation\nmethod will give you two values the\ncorrelation coefficient and the p-value\nso how do we interpret these values\nfor the correlation coefficient a value\nclose to 1 implies a large positive\ncorrelation while a value close to\nnegative 1 implies a large negative\ncorrelation and a value close to zero\nimplies no correlation between the\nvariables\nnext the p-value will tell us how\ncertain we are about the correlation\nthat we calculated\nfor the p-value a value less than .001\ngives us a strong certainty about the\ncorrelation coefficient that we\ncalculated a value between .001 and .05\ngives us moderate certainty a value\nbetween .05 and 0.1 will give us a weak\ncertainty and a p-value larger than\npoint one will give us no certainty of\ncorrelation at all\nwe can say that there is a strong\ncorrelation when the correlation\ncoefficient is close to 1 or negative 1\nand the p-value is less than .001\nthe following plot shows data with\ndifferent correlation values\nin this example we want to look at the\ncorrelation between the variables\nhorsepower and car price\nsee how easy you can calculate the\nPearson correlation using the sci Pi\nstats package\nwe can see that the correlation\ncoefficient is approximately 0.8 and\nthis is close to one so there's a strong\npositive correlation we can also see\nthat the p-value is very small much\nsmaller than .001 and so we can conclude\nthat we are certain about the strong\npositive correlation\ntaking all variables into account we can\nnow create a heat map that indicates the\ncorrelation between each of the\nvariables with one another the color\nscheme indicates the Pearson correlation\ncoefficient indicating the strength of\nthe correlation between two variables\nwe can see a diagonal line with a dark\nred color indicating that all the values\non this diagonal are highly correlated\nthis makes sense because when you look\ncloser the values on the diagonal are\nthe correlation of all variables with\nthemselves which will be always one\nthis correlation heat map gives us a\ngood overview of how the different\nvariables are related to one another and\nmost importantly how these variables are\nrelated to price\n[Music]\n[Music]\nin this video we will learn how to find\nout if there is a relationship between\ntwo categorical variables\nwhen dealing with the relationships\nbetween two categorical variables we\ncan't use the same correlation method\nfor continuous variables we will have to\nemploy the use of the chi-squared test\nfor the association\nthe chi-square test is intended to test\nHow likely it is that an observed\ndistribution is due to chance\nit measures how well the observed\ndistribution of data fits with the\ndistribution that is expected if the\nvariables are independent\nbefore we go into an example let's look\nthrough some important points\nthe chi-square tests a null hypothesis\nthat the variables are independent the\ntest compares the observed data to the\nvalues the model expects if the data was\ndistributed in different categories by\nchance\nanytime The observed data doesn't fit\nwithin the model of the expected values\nthe probability that the variables are\ndependent become stronger thus proving\nthe null hypothesis incorrect\nthe chi-square does not tell you the\ntype of relationship that exists between\nboth variables but only that a\nrelationship exists\nwe will use the car's data set assuming\nwe want to test the relationship between\nfuel type and aspiration these are\ncategorical variables it is either the\nfield type of the car gas or diesel and\nthe aspiration is that either the car is\nstandard or Turbo\nto do this we will find the observed\ncounts of cars in each category\nthis can be done by creating a cross tab\nusing the pandas Library\na cross tab is a table showing the\nrelationship between two or more\nvariables when the table only shows the\nrelationship between two categorical\nvariables the crosstab is also known as\na contingency table\nin our case the cross tab or contingency\ntable shows us the counts in each\ncategory\na standard car with diesel fuel\nstandard car with gas fuel a turbo car\nwith diesel fuel or a turbo car with gas\nfuel\nthe formula for chi-square is given as\nfollows\nthe summation of The observed value I.E\nthe counts in each group minus the\nexpected value all squared divided by\nthe expected value\nexpected values are based on the given\ntotals that is what can we say\nindividual cells would be if we did not\nknow the observed values\nto calculate the expected value of a\nstandard car with diesel we take the row\ntotal which is 20 multiply by the column\ntotal 168 divided by the grand total of\n205.\nthis will give you\n16.39 if we do the same thing for turbo\ncars with gas fuel we will take the row\ntotal 185 multiplied by the column total\n37 and we divide by the grand total of\n205 to get 33.39\nif we repeat the same procedure for all\nof them we get these values\nif we took the row totals column totals\nand grand total we will get the same\nvalues as the totals as The observed\nvalues\nnow going back to this formula if we\ntook a summation of all the observed\nminus the expected values all squared\nand divided by the expected value we\nwill get a chi-square value of 29.6\non the chi-square table we check on the\ndegree of Freedom equals one row and\nfind the value closest to 29.6\nhere we can see that 29.6 will fall in a\np-value less than 0.05\ntherefore we can say the p-value is less\nthan 0.05\nsince the p-value is less than .05 we\nreject the null hypothesis that the two\nvariables are independent and therefore\nwe conclude that there is an association\nbetween fuel type and aspiration\nto do this in Python we will use the\nchi-square contingency function in the\nPSI Pi dot statistics package\nthe function will print out the\nchi-square test value 29.6 the second\nvalue is the p-value which is very close\nto zero and a degree of freedom of 1. if\nyou remember the chi-square table did\nnot give an exact p-value but a range in\nwhich it falls\npython will give the exact p-value we\ncan see the same results as in our\nprevious slides\nit also prints out the expected values\nwhich we also calculated by hand\nsince the p-value is close to zero we\nreject the null hypothesis the two\nvariables are independent and conclude\nthat there is evidence of association\nbetween fuel type and aspiration\n[Music]\nin this video we will examine model\ndevelopment by trying to predict the\nprice of a car using our data set\nin this module you will learn about\nsimple and multiple linear regression\nmodel evaluation using visualization\npolynomial regression and pipelines r\nsquared and MSE for in-sample evaluation\nprediction and decision making and how\nyou can determine a fair value for a\nused car\na model or estimator can be thought of\nas a mathematical equation used to\npredict a value given one or more other\nvalues\nrelating one or more independent\nvariables or features to dependent\nvariables for example you input a car\nmodel's highway miles per gallon as the\nindependent variable or feature the\noutput of the model or dependent\nvariable is the price\nusually the more relevant data you have\nthe more accurate your model is\nfor example you input multiple\nindependent variables or features to\nyour model Therefore your model May\npredict a more accurate price for the\ncar\nto understand why more data is important\nconsider the following situation you\nhave two almost identical cars pink cars\nsell for significantly less\nyou want to use your model to determine\nthe price of two cars one pink one red\nif your model's independent variables or\nfeatures do not include color your model\nwill predict the same price for cars\nthat may sell for much less\nin addition to getting more data you can\ntry different types of models in this\ncourse you will learn about simple\nlinear regression multiple linear\nregression and polynomial regression\n[Music]\nin this video we'll be talking about\nsimple linear regression and multiple\nlinear regression\nlinear regression will refer to one\nindependent variable to make a\nprediction multiple linear regression\nwill refer to multiple independent\nvariables to make a prediction\nsimple linear regression or SLR is a\nmethod to help us understand the\nrelationship between two variables the\npredictor independent variable X and the\ntarget dependent variable y we would\nlike to come up with a linear\nrelationship between the variables shown\nhere\nthe parameter b0 is the intercept\nthe parameter B1 is the slope\nwhen we fit or train the model we will\ncome up with these parameters\nthis step requires lots of math so we\nwill not focus on this part let's\nclarify the prediction step\nit's hard to figure out how much a car\ncosts but the highway miles per gallon\nis in the owner's manual\nif we assume there is a linear\nrelationship between these variables\nwe can use this relationship to\nformulate a model to determine the price\nof the car\nif the highway miles per gallon is 20 we\ncan input this value into the model\nto obtain a prediction of twenty two\nthousand dollars\nin order to determine the line we take\ndata points from our data set marked in\nred here\nwe then use these trading points to fit\nour model\nthe results of the trading points are\nthe parameters\nwe usually store the data points in two\ndata frame or numpy arrays\nthe value we would like to predict is\ncalled the Target that we store in the\narray why we store the independent\nvariable in the data frame or array X\neach sample corresponds to a different\nRow in each data frame or array\nin many cases many factors influence how\nmuch people pay for a car for example\nmake or how old the car is in this model\nthis uncertainty is taken into account\nby assuming a small random value is\nadded to the point on the line This is\ncalled noise\nfigure on the left shows the\ndistribution of the noise the vertical\naxis shows the value added and the\nhorizontal axis illustrates the\nprobability that the value will be added\nusually a small positive value is added\nor a small negative value\nsometimes large values are added\nbut for the most part the values added\nare near zero\nwe can summarize the process like this\nwe have a set of training points we use\nthese trading points to fit or train the\nmodel and get parameters\nwe then use these parameters in the\nmodel we now have a model\nwe use the Hat on the Y to denote the\nmodel as an estimate\nwe can use this model to predict values\nthat we haven't seen for example we have\nno car with 20 highway miles per gallon\nwe can use our model to make a\nprediction for the price of this car but\ndon't forget our model is not always\ncorrect\nwe can see this by comparing the\npredicted value to the actual value\nwe have a sample for 10 highway miles\nper gallon but the predicted value does\nnot match the actual value\nif the linear assumption is correct this\nerror is due to the noise but there can\nbe other reasons\nto fit the model in Python first we\nimport linear model from scikit learn\nthen create a linear regression object\nusing the Constructor\nwe Define the predictor variable and\nTarget variable\nthen use the method fit to fit the model\nand find the parameters b0 and B1\nthe input are the features and the\ntargets we can obtain a prediction using\nthe method predict\nthe output is an array the array has the\nsame number of samples as the input X\nThe Intercept b0 is an attribute of the\nobject LM\nthe slope B1 is also an attribute of the\nobject LM\nthe relationship between price and\nhighway miles per gallon is given by\nthis equation in bold price equals 38\n423.31 minus\n821.73 times highway miles per gallon\nlike the equation we discussed before\nmultiple linear regression is used to\nexplain the relationship between one\ncontinuous Target y variable and two or\nmore predictor X variables\nif we have for example four predictor\nvariables then B zero intercept x equals\nzero B1 the coefficient or parameter of\nX1\nB2 the coefficient of parameter X2 and\nso on\nif there are only two variables then we\ncan visualize the values consider the\nfollowing function the variables X1 and\nX2 can be visualized on a 2d plane Let's\ndo an example on the next slide\nthe table contains different values of\nthe predictor variables X1 and X2 the\nposition of each point is placed on the\n2D plane color coded accordingly\neach value of the predictor variables X1\nand X2 will be mapped to a new value y y\nhat\nthe new values of y y hat are mapped in\nthe vertical Direction with height\nproportional to the value the y-hat\ntakes\nwe can fit the multiple linear\nregression as follows we can extract the\nfour predictor variables and store them\nin the variable Z then train the model\nas before using the method train with\nthe features or dependent variables and\nthe targets colon\nwe can also obtain a prediction using\nthe method predict\nin this case the input is an array or\ndata frame with four columns the number\nof rows corresponds to the number of\nsamples\nthe output is an array with the same\nnumber of elements as number of samples\nThe Intercept is an attribute of the\nobject and the coefficients are also\nattributes it is helpful to visualize\nthe equation replacing the dependent\nvariable names with actual names this is\nidentical to the form we discussed\nearlier\nforeign\nwe'll look at model evaluation using\nvisualization\nregression plots are a good estimate of\nthe relationship between two variables\nthe strength of the correlation and the\ndirection of the relationship positive\nor negative\nthe horizontal axis is the independent\nvariable the vertical axis is the\ndependent variable\neach point represents a different Target\npoint the fitted line represents the\npredicted value\nthere are several ways to plot a\nregression plot a simple way is to use\nreg plot from the Seabourn Library\nfirst import Seaborn then use the reg\nplot function the parameter X is the\nname of the column that contains the\nindependent variable or feature\nthe parameter y contains the name of the\ncolumn that contains the name of the\ndependent variable or Target the\nparameter data is the name of the data\nframe the result is given by the plot\nthe residual plot represents the error\nbetween the actual value\nexamining the predicted value and actual\nvalue we see a difference we obtained\nthat value by subtracting the predicted\nvalue and the actual Target value\nwe then plot that value on the vertical\naxis with an independent variable as the\nhorizontal axis similarly for the second\nsample we repeat the process\nsubtracting the target value from the\npredicted value\nthen plotting the value accordingly\nlooking at the plot gives us some\ninsight into our data we expect to see\nthe results to have zero mean\ndistributed evenly around the x-axis\nwith similar variance there is no\ncurvature\nthis type of residual plot suggests a\nlinear plot is appropriate\nin this residual plot there is a\ncurvature the values of the error change\nwith X for example in the region all the\nresidual errors are positive\nin this area the residuals are negative\nin the final location the error is large\nthe residuals are not randomly separated\nthis suggests the linear assumption is\nincorrect\nthis plot suggests a non-linear function\nwe will deal with this in the next\nsection\nin this plot we see that variants of the\nresiduals increases with X therefore our\nmodel is incorrect\nwe can use Seaborn to create a residual\nplot first import Seaborn we use the\nresid plot function\nfirst parameter is a series of dependent\nvariable or feature the second parameter\nis a series of dependent variable or\nTarget\nwe see in this case the residuals have a\ncurvature\na distribution plot counts the predicted\nvalue versus the actual value these\nplots are extremely useful for\nvisualizing models with more than one\nindependent variable or feature\nlet's look at a simplified example\nwe examine the vertical axis we then\ncount and plot the number of predicted\npoints that are approximately equal to\none\nwe then count and plot the number of\npredicted points that are approximately\nequal to two\nwe repeat the process for predicted\npoints there are approximately equal to\n3. then we repeat the process for the\nTarget values in this case all the\ntarget values are approximately equal to\n2.\nthe values of the targets and predicted\nvalues are continuous\na histogram is for discrete values\ntherefore pandas\nwill convert them to a distribution\nthe vertical axis is scaled to make the\narea under the distribution equal to one\nthis is an example of using a\ndistribution plot the dependent variable\nor feature is price the fitted values\nthat result from the model are in blue\nthe actual values are red we see the\npredicted values for prices in the range\nfrom forty thousand to fifty thousand\nare inaccurate\nthe prices in the region from 10 000 to\n20 000 are much closer to the Target\nvalue in this example we use multiple\nfeatures or independent variables\ncomparing it to the plot on the last\nslide we see predicted values are much\ncloser to the Target values\nhere is the code to create a\ndistribution plot the actual values are\nused as a parameter we want a\ndistribution instead of a histogram so\nwe want the hist parameter set to false\nthe color is red the label is also\nincluded\nthe predicted values are included for\nthe second plot the rest of the\nparameters are set accordingly\n[Music]\nin this video we will cover polynomial\nregression and Pipelines\nwhat do we do when a linear model is not\nthe best fit for our data let's look\ninto another type of regression model\nthe polynomial regression we transform\nour data into a polynomial then use\nlinear regression to fit the parameter\nthen we will discuss pipelines pipelines\nare a way to simplify your code\npolynomial regression is a special case\nof the general linear regression this\nmethod is beneficial for describing\ncurvilinear relationships what is a\ncurvilinear relationship\nit's what you get by squaring or setting\nhigher order terms of the predictor\nvariables in the model transforming the\ndata the model can be quadratic which\nmeans that the predictor variable in the\nmodel is squared we use a bracket to\nindicate it as an exponent this is a\nsecond order polynomial regression with\na figure representing the function\nthe model can be cubic which means that\nthe predictor variable is cubed this is\na third order polynomial regression we\nsee by examining the figure that the\nfunction has more variation\nthere also exists higher order\npolynomial regressions when a good fit\nhasn't been achieved by second or third\norder we can see in figures how much the\ngraphs change when we change the order\nof the polynomial regression the degree\nof the regression makes a big difference\nand can result in a better fit if you\npick the right value\nin all cases the relationship between\nthe variable and the parameter is always\nlinear\nlet's look at an example from our data\nwhere we generate a polynomial\nregression model\nin Python we do this by using the\npolyfit function in this example we\ndevelop a third order polynomial\nregression model base we can print out\nthe model symbolic form for the model is\ngiven by the following expression\nNegative 1.557 X 1 cubed plus\n204.8 X1 squared plus\n8965 X1 plus 1.37 times 10 to the power\nof 5. we can also have multi-dimensional\npolynomial linear regression the\nexpression can get complicated here are\njust some of the terms for a\ntwo-dimensional second-order polynomial\nnumpy's polyfit function cannot perform\nthis type of regression we use the\npre-processing library in scikit learn\nto create a polynomial feature object\nThe Constructor takes the degree of the\npolynomial as a parameter then we\ntransform the features into a polynomial\nfeature with the fit underscore\ntransform method let's do a more\nintuitive example\nconsider the features shown here\napplying the method we transform the\ndata we now have a new set of features\nthat are our transformed version of our\noriginal features as the dimension of\nthe data gets larger we may want to\nnormalize multiple features inside kit\nlearn instead we can use the\npre-processing module to simplify many\ntasks\nfor example we can standardize each\nfeature simultaneously we import\nstandard scalar we train the object\nfit the scale object then transform the\ndata into a new data frame on array X\nunderscore scale\nthere are more normalization methods\navailable in the pre-processing library\nas well as other transformations\nwe can simplify our code by using a\npipeline Library there are many steps to\ngetting a prediction for example\nnormalization polynomial transform and\nlinear regression we simplify the\nprocess using a pipeline\npipelines sequentially perform a series\nof Transformations the last step carries\nout a prediction\nfirst we import all the modules we need\nthen we import the library pipeline we\ncreate a list of tuples the first\nelement in the Tuple contains the name\nof the estimator model\nthe second element contains model\nConstructor\nwe input the list in the pipeline\nConstructor\nwe now have a pipeline object\nwe can train the pipeline by applying\nthe train method to the pipeline object\nwe can also produce a prediction as well\nthe method normalizes the data performs\na polynomial transform then outputs a\nprediction\nforeign\nnow that we've seen how we can evaluate\na model by using visualization we want\nto numerically evaluate our models let's\nlook at some of the measures that we use\nfor in-sample evaluation\nthese measures are a way to numerically\ndetermine how good the model fits on our\ndata two important measures that we\noften use to determine the fit of a\nmodel R mean square error MSE and r\nsquared\nto measure the MSE we find the\ndifference between the actual value Y\nand the predicted value y hat then\nSquare it in this case the actual value\nis 150. the predicted value is 50.\nsubtracting these points we get 100. we\nthen Square the number\nwe then take the mean or average of all\nthe errors by adding them all together\nand dividing by the number of samples\nto find the MSE in Python we can import\nthe mean underscore squared underscore\nerror from scikit learn metrics\nthe mean underscore squared underscore\nerror function gets two inputs the\nactual value of Target variable and the\npredicted value of Target variable r\nsquared is also called the coefficient\nof determination it's a measure to\ndetermine how close the data is to the\nfitted regression line\nso how close is our actual data to our\nestimated model think about it as\ncomparing a regression model to a simple\nmodel I.E the mean of the data points if\nthe variable X is a good predictor our\nmodel should perform much better than\njust the mean in this example the\naverage of the data points Y Bar is 6.\ncoefficient of determination r squared\nis 1 minus the ratio of the MSE of the\nregression lined divided by the MSE of\nthe average of the data points for the\nmost part it takes values between 0 and\n1.\nlet's look at a case where the line\nprovides a relatively good fit the Blue\nLine represents the regression line the\nblue squares represent the MSE of the\nregression line the red line represents\nthe average value of the data points the\nred squares represent the MSE of the red\nline we see the area of the blue squares\nis much smaller than the area of the red\nsquares in this case because the line is\na good fit the mean squared error is\nsmall therefore the numerator is small\nthe mean squared error of the line is\nrelatively large as such the numerator\nis large\na small number divided by a larger\nnumber is an even smaller number taken\nto an extreme this value tends to zero\nif we plug in this value from the\nprevious slide for r squared we get a\nvalue near 1. this means the line is a\ngood fit for the data here is an example\nof a line that does not fit the data\nwell if we just examine the area of the\nred squares compared to the blue squares\nwe see the area is almost identical the\nratio of the areas is close to 1.\nin this case the r squared is near zero\nthis line performs about the same as\njust using the average of the data\npoints therefore this line did not\nperform well\nwe find the r squared value in Python by\nusing the score method in the linear\nregression object from the value that we\nget from this example we can say that\napproximately\n49.695 percent of the variation of price\nis explained by the simple linear model\nyour r squared value is usually between\n0 and 1. if your r squared is negative\nit could be due to overfitting that we\nwill discuss in the next module\n[Music]\nthank you\nin this video our final topic will be on\nprediction and decision making how can\nwe determine if our model is correct\nthe first thing you should do is make\nsure your Model results make sense you\nshould always use visualization\nnumerical measures for evaluation and\ncomparing between different models\nlet's look at an example of prediction\nif you recall we train the model using\nthe fit method now we want to find out\nwhat the price would be for a car that\nhas a highway miles per gallon of 30.\nplugging this value into the predict\nmethod gives us a resulting price of 13\n771.30\nthis seems to make sense for example the\nvalue is not negative extremely high or\nextremely low we can look at the\ncoefficients by examining the co-f\nunderscore attribute\nif you recall the expression for the\nsimple linear model that predicts price\nfrom highway miles per gallon this value\ncorresponds to the multiple of the\nhighway miles per gallon feature\nas such an increase of one unit in\nhighway miles per gallon the value of\nthe car decreases approximately 821\ndollars this value also seems reasonable\nsometimes your model will produce values\nthat don't make sense for example if we\nplot the model out for highway miles per\ngallon in the ranges of zero to one\nhundred we get Negative values for the\nprice\nthis could be because the values in that\nrange are not realistic the linear\nassumption is incorrect or we don't have\ndata for cars in that range in this case\nit is unlikely that a car will have fuel\nmileage in that range so our model seems\nvalid\nto generate a sequence of values in a\nspecified range import numpy then use\nthe numpy arrange function to generate\nthe sequence the sequence starts at 1\nand increments by 1 till we reach 100.\nthe first parameter is the starting\npoint of the sequence the second\nparameter is the endpoint plus one of\nthe sequence the final parameter is the\nstep size between elements in the\nsequence in this case it's one so we\nincrement the sequence one step at a\ntime from one to two and so on\nwe can use the output to predict new\nvalues the output is a numpy array many\nof the values are negative\nusing a regression plot to visualize\nyour data is the first method you should\ntry see the labs for examples of how to\nplot polynomial regression\nfor this example the effect of the\nindependent variable is evident in this\ncase the data Trends down as the\ndependent variable increases the plot\nalso shows some non-linear Behavior\nexamining the residual plot we see in\nthis case the residuals have a curvature\nsuggesting non-linear Behavior\na distribution plot is a good method for\nmultiple linear regression for example\nwe see the predicted values for prices\nin the range from thirty thousand to\nfifty thousand are inaccurate this\nsuggests a non-linear model may be more\nsuitable or we need more data in this\nrange\nthe mean square error is perhaps the\nmost intuitive numerical measure for\ndetermining if a model is good or not\nlet's see how different measures of mean\nsquare error impact the model\nthe figure shows an example of a mean\nsquare error of 3495.\nthis example has a mean square error of\n3652.\nthe final plot has a mean square error\nof twelve thousand eight hundred and\nseventy as the square error increases\nthe targets get further from the\npredicted points\nas we discussed r squared is another\npopular method to evaluate your model it\ntells you how well your line fits into\nthe model r-squared values range from\nzero to one r squared tells us what\npercent of the variability in the\ndependent variable is accounted for by\nthe regression on the independent\nvariable\nan r squared of 1 means that all\nmovements of another dependent variable\nare completely explained by movements in\nthe independent variables in this plot\nwe see the target points in red and the\npredicted line in blue and r squared of\n0.9986 the model appears to be a good\nfit that means that more than 99 percent\nof the variability of the predicted\nvariable is explained by the independent\nvariables\nthis model has an r squared of\n0.9226 there still is a strong linear\nrelationship model is still a good fit\nan r squared of 0806 the data we can\nvisually see that the values are\nscattered around the line they are still\nclose to the line and we can say that 80\npercent of the variability of the\npredicted variable is explained by the\nindependent variables\nand an r squared 0.61 means that\napproximately 61 percent of The observed\nvariation can be explained by the\nindependent variables\nan acceptable value for r squared\ndepends on what field you are studying\nand what your use case is\nFalcon Miller 1992 suggests that an\nacceptable r squared value should be at\nleast 0.1\ndoes a lower mean square error imply\nbetter fit not necessarily mse4 and mlr\nmodel will be smaller than the MSE for\nan SLR model\nsince the errors of the data will\ndecrease when more variables are\nincluded in the model\npolynomial regression will also have a\nsmaller MSE than regular regression in\nthe next section we will look at more\naccurate ways to evaluate the model\n[Music]\nevaluation tells us how our model\nperforms in the real world in the\nprevious module we talked about in\nSample evaluation in Sample evaluation\ntells us how well our model fits the\ndata already given to train it it does\nnot give us an estimate of how well the\ntrain model can predict new data the\nsolution is to split our data up use the\nin-sample data or training data to train\nthe model the rest of the data called\ntest data is used as out-of-sample data\nthis data is then used to approximate\nhow the model performs in the real world\nseparating data into training and\ntesting sets is an important part of\nmodel evaluation we use the test data to\nget an idea how our model will perform\nin the real world when we split a data\nset usually the larger portion of data\nis used for training and a smaller part\nis used for testing for example we can\nuse seventy percent of the data for\ntraining we then use 30 for testing we\nuse training set to build a model and\ndiscover predictive relationships we\nthen use a testing set to evaluate model\nperformance when we have completed\ntesting our model we should use all the\ndata to train the model\na popular function in the sci kit learn\npackage for splitting data sets is the\ntrain test split function this function\nrandomly splits a data set into training\nand testing subsets from the example\ncode snippet this method is imported\nfrom\nsklearn.cross validation the input\nparameters y underscore data is the\ntarget variable in the car appraisal\nexample it would be the price and X\nunderscore data the list of predictor\nvariables in this case it would be all\nthe other variables in the car data set\nthat we are using to try to predict the\nprice\nthe output is an array\nX underscore train and Y underscore\ntrain the subsets for training X\nunderscore test and Y underscore test\nthe subsets for testing in this case the\ntest size is a percentage of the data\nfor the testing set here it is 30\npercent the random state is a random\nseed for random data set splitting\ngeneralization error is a measure of how\nwell our data does at predicting\npreviously unseen data the error we\nobtain using our testing data is an\napproximation of this error this figure\nshows the distribution of the actual\nvalues in red compared to the predicted\nvalues from a linear regression in blue\nwe see the distributions are somewhat\nsimilar if we generate the same plot\nusing the test data we see the\ndistributions are relatively different\nthe difference is due to a\ngeneralization error and represents what\nwe see in the real world\nusing a lot of data for training gives\nus an accurate means of determining how\nwell our model will perform in the real\nworld\nbut the Precision of the performance\nwill be low\nlet's clarify this with an example\nthe center of this Bullseye represents\nthe correct generalization error let's\nsay we take a random sample of the data\nusing ninety percent of the data for\ntraining and 10 percent for testing\nthe first time we experiment we get a\ngood estimate of the training data\nif we experiment again training the\nmodel with a different combination of\nsamples we also get a good result but\nthe results will be different relative\nto the first time we run the experiment\nrepeating the experiment again with a\ndifferent combination of training and\ntesting samples the results are\nrelatively close to the generalization\nerror but distinct from each other\nrepeating the process we get good\napproximation of the generalization\nerror but the Precision is poor I.E all\nthe results are extremely different from\none another\nif we use fewer data points to train the\nmodel and more to test the bottle the\naccuracy of the generalization\nperformance will be less but the model\nwill have good precision\nthe figure above demonstrates this\nall our error estimates are relatively\nclose together but they are further away\nfrom the true generalization performance\nto overcome this problem we use\ncross-validation one of the most common\nout-of-sample evaluation metrics is\ncross-validation in this method the data\nset is split into k equal groups each\ngroup is referred to as a fold\nfor example four Folds\nsome of the folds can be used as a\ntraining set which we use to train the\nmodel and the remaining parts are used\nas a test set which we use to test the\nmodel\nfor example we can use three folds for\ntraining\nthen use one fold for testing\nthis is repeated until each partition is\nused for both training and testing at\nthe end we use the average results as\nthe estimate of out-of-sample error the\nevaluation metric depends on the model\nfor example the r squared the simplest\nway to apply cross validation is to call\nthe cross underscore Val underscore\nscore function\nwhich performs multiple out-of-sample\nevaluations\nthis method is imported from sklearn's\nmodel selection package\nwe then use the function cross\nunderscore Val underscore score\nthe first input parameter is the type of\nmodel we are using to do the cross\nvalidation in this example we initialize\nthe linear regression model or object LR\nwhich we passed the cross underscore Val\nunderscore score function the other\nparameters are X underscore data the\npredictor variable data and Y underscore\ndata the target variable data we can\nmanage the number of partitions with the\nCV parameter here CV equals 3 which\nmeans the data set is split into three\nequal partitions the function returns an\narray of scores one for each partition\nthat was chosen as the testing set we\ncan average the result together to\nestimate out of sample R Squared using\nthe mean function in numpy let's see an\nanimation let's see the result of the\nscore array in the last slide\nfirst we split the data into three folds\nwe use two folds for training the\nremaining fold for testing the model\nwill produce an output we will use the\noutput to calculate a score in the case\nof the r squared IE coefficient of\ndetermination we will store that value\nin an array we will repeat the process\nusing two folds for training and one\nfold for testing\nsave the score then use a different\ncombination for training and the\nremaining fold for testing we store the\nfinal result\nthe cross valve score function returns a\nscore value to tell us the cross\nvalidation result\nwhat if we want a little more\ninformation what if we want to know the\nactual predicted values supplied by our\nmodel before the r squared values are\ncalculated\nto do this we use the cross underscore\nVal underscore predict function the\ninput parameters are exactly the same as\nthe cross file underscore score function\nbut the output is a prediction let's\nillustrate the process\nfirst we split the data into three folds\nwe use two folds for training the\nremaining fold for testing the model\nwill produce an output and we will store\nit in an array\nwe will repeat the process using two\nfolds for training one for testing\nthe model produces an output again\nfinally we use the last two folds for\ntraining then we use the testing data\nthis final testing fold produces an\noutput\nthese predictions are stored in an array\n[Music]\nif you recall in the last module we\ndiscussed polynomial regression\nin this section we will discuss how to\npick the best polynomial order and\nproblems that arise When selecting the\nwrong order polynomial consider the\nfollowing function we assume the\ntraining points come from a polynomial\nfunction plus some noise\nthe goal of model selection is to\ndetermine the order of the polynomial to\nprovide the best estimate of the\nfunction y x\nif we try and fit the function with a\nlinear function the line is not complex\nenough to fit the data as a result there\nare many errors this is called\nunderfitting where the model is too\nsimple to fit the data if we increase\nthe order of the polynomial the model\nfits better but the model is still not\nflexible enough and Exhibits\nunderfitting this is an example of the\neighth order polynomial used to fit the\ndata we see the model does well at\nfitting the data and estimating the\nfunction even at the inflection points\nincreasing it to a 16th order polynomial\nthe model does extremely well at\ntracking the training point but performs\npoorly at estimating the function this\nis especially apparent where there is\nlittle training data the estimated\nfunction oscillates not tracking the\nfunction this is called overfitting\nwhere the model is too flexible and fits\nthe noise rather than the function let's\nlook at a plot of the mean square error\nfor the training and testing set of\ndifferent order polynomials the\nhorizontal axis represents the order of\nthe polynomial the vertical axis is the\nmean square error the training error\ndecreases with the order of the\npolynomial\nthe test error is a better means of\nestimating the error of a polynomial the\nerror decreases till the best order of\nthe polynomial is determined then the\nerror begins to increase we select the\norder that minimizes the test error in\nthis case it was 8. anything on the left\nwould be considered underfitting\nanything on the right is overfitting if\nwe select the best order of the\npolynomial we will still have some\nerrors if you recall the original\nexpression for the training points\nwe see a noise term this term is one\nreason for the error this is because the\nnoise is random and we can't predict it\nthis is sometimes referred to as an\nirreducible error there are other\nsources of errors as well\nfor example our polynomial assumption\nmay be wrong our sample points may have\ncome from a different function for\nexample in this plot the data is\ngenerated from a sine wave the\npolynomial function does not do a good\njob of fitting the sine wave\nfor real data the model may be too\ndifficult to fit or we may not have the\ncorrect type of data to estimate the\nfunction\nlet's try different order polynomials on\nthe real data using horsepower\nthe red points represent the training\ndata the green points represent the test\ndata if we just use the mean of the data\nour model does not perform well\na linear function does fit the data\nbetter\nsecond order model looks similar to the\nlinear function\na third order function also appears to\nincrease like the previous two orders\nhere we see a fourth order polynomial at\naround 200 horsepower the predicted\nprice suddenly decreases this seems\nerroneous\nlet's use r squared to see if our\nassumption is correct\nthe following is a plot of the r squared\nvalue the horizontal axis represents the\norder of polynomial models the closer\nthe r squared is to 1 the more accurate\nthe model is\nhere we see the r squared is optimal\nwhen the order of the polynomial is\nthree\nthe r squared drastically decreases when\nthe order is increased to four\nvalidating our initial assumption\nwe can calculate different r squared\nvalues as follows first we create an\nempty list to store the values we create\na list containing different polynomial\norders we then iterate through the list\nusing a loop we create a polynomial\nfeature object with the order of the\npolynomial as a parameter we transform\nthe training and test data into a\npolynomial using the fit transform\nmethod\nwe fit the regression model using the\ntransform data we then calculate the r\nsquared using the test data and store it\nin the array\n[Music]\nin this video we'll discuss Ridge\nregression\nRich regression prevents overfitting in\nthis video we will focus on polynomial\nregression for visualization but\noverfitting is also a big problem when\nyou have multiple independent variables\nor features consider the following\nfourth order polynomial in Orange the\nblue points are generated from this\nfunction we can use a 10th order\npolynomial to fit the data the estimated\nfunction in blue does a good job at\napproximating the true function in many\ncases real data has outliers for example\nthis point shown here does not appear to\ncome from the function in Orange if we\nuse a 10th order polynomial function to\nfit the data the estimated function in\nblue is incorrect and is not a good\nestimate of the actual function in\nOrange if we examine the expression for\nthe estimated function we see the\nestimated polynomial coefficients have a\nvery large magnitude this is especially\nevident for the higher order polynomials\nRich regression controls the magnitude\nof these polynomial coefficients by\nintroducing the parameter Alpha\nAlpha is a parameter we select before\nfitting or training the model\neach row in the following table\nrepresents an increasing value of alpha\nlet's see how different values of alpha\nchange the model\nthis table represents the polynomial\ncoefficients for different values of\nalpha the column corresponds to the\ndifferent polynomial coefficients and\nthe rows correspond to the different\nvalues of alpha as Alpha increases the\nparameters get smaller this is most\nevident for the higher order polynomial\nfeatures but Alpha must be selected\ncarefully\nif Alpha is too large the coefficients\nwill approach 0 and underfit the data if\nAlpha is zero the overfitting is evident\nfor Alpha equal to\n0.001 the overfitting begins to subside\nfor Alpha equal to 0.01 the estimated\nfunction tracks the actual function when\nAlpha equals 1 we see the first signs of\nunderfitting\nthe estimated function does not have\nenough flexibility at Alpha equals to 10\nwe see extreme underfitting it does not\neven track the two points\nin order to select Alpha we use cross\nvalidation to make a prediction using\nRidge regression import Ridge from SK\nlearn linear models create a ridge\nobject using the Constructor the\nparameter Alpha is one of the arguments\nof the Constructor\nwe train the model using the fit method\nto make a prediction we use the predict\nmethod in order to determine the\nparameter Alpha we use some data for\ntraining we use a second set called\nvalidation data this is similar to test\ndata but it is used to select parameters\nlike Alpha\nwe start with a small value of alpha we\ntrain the model make a prediction using\nthe validation data then calculate the r\nsquared and store the values\nrepeat the value for a larger value of\nalpha\nwe train the model again make a\nprediction using the validation data\nthen calculate the r squared and store\nthe values of r squared we repeat the\nprocess for a different Alpha value\ntraining the model and making a\nprediction\nwe select the value of alpha that\nmaximizes the r squared\nnote that we can use other metrics to\nselect the value of alpha like mean\nsquared error the overfitting problem is\neven worse if we have lots of features\nthe following plot shows the different\nvalues of r squared on the vertical axis\nthe horizontal axis represents different\nvalues for Alpha\nwe use several features from our used\ncar data set and a second order\npolynomial function\nthe training data is in red and\nvalidation data is in blue\nwe see as the value for Alpha increases\nthe value of r squared increases and\nconverges at approximately 0.75\nin this case we select the maximum value\nof alpha because running the experiment\nfor higher values of alpha have little\nimpact\nconversely as Alpha increases the r\nsquared on the test data decreases\nthis is because the term Alpha prevents\noverfitting\nthis may improve the results in the\nUnseen data but the model has worse\nperformance on the test data see the lab\non how to generate this plot\n[Music]\ngrid search allows us to scan through\nmultiple free parameters with few lines\nof code\nparameters like the alpha term discussed\nin the previous video are not part of\nthe fitting or training process\nthese values are called hyper parameters\nscikit learn has a means of\nautomatically iterating over these hyper\nparameters using cross-validation this\nmethod is called grid search grid search\ntakes the model or objects you would\nlike to train and different values of\nthe hyper parameters it then calculates\nthe mean square error or r squared for\nvarious hyper parameter values allowing\nyou to choose the best values let the\nsmall circles represent different hyper\nparameters we start off with one value\nfor hyper parameters and train the model\nwe use different hyper parameters to\ntrain the model\nwe continue the process until we have\nexhausted the different free parameter\nvalues\neach model produces an error we select\nthe hyper parameter that minimizes the\nerror to select the hyper parameter we\nsplit our data set into three parts the\ntraining set validation set and test set\nwe train the model for different hyper\nparameters\nwe use the r squared or mean square\nerror for each model we select the hyper\nparameter that minimizes the mean\nsquared error or maximizes the r squared\non the validation set\nwe finally test our model performance\nusing the test data this is the scikit\nlearn web page where the object\nConstructor parameters are given it\nshould be noted that the attributes of\nan object are also called parameters we\nwill not make the distinction even\nthough some of the options are not hyper\nparameters per se\nin this module we will focus on the\nhyper parameter Alpha and the\nnormalization parameter\nthe value of your grid search is a\npython list that contains a python\ndictionary the key is the name of the\nfree parameter the value of the\ndictionary is the different values of\nthe free parameter\nthis can be viewed as a table with\nvarious free parameter values we also\nhave the object or model\nthe grid search takes on the scoring\nmethod in this case r squared the number\nof folds the model or object and the\nfree parameter values\nsome of the outputs include the\ndifferent scores for different free\nparameter values in this case the r\nsquared along with the free parameter\nvalues that have the best score\nfirst we import the libraries we need\nincluding grid search CV the dictionary\nof parameter values we create a ridge\nregression object or model\nwe then create a grid search CV object\nthe inputs are the ridge regression\nobject\nthe parameter values and the number of\nFolds\nwe will use r squared this is the\ndefault scoring method we fit the object\nwe can find the best values for the free\nparameters using the attribute best\nestimator\nwe can also get information like the\nmean score on the validation data using\nthe attribute CV result\nwhat are the advantages of grid search\nis how quickly we can test multiple\nparameters\nfor example Rich regression has the\noption to normalize the data to see how\nto standardize see module 4 the term\nAlpha is the first element in the\ndictionary the second element is the\nnormalize option\nthe key is the name of the parameter\nthe value is the different options in\nthis case because we can either\nnormalize the data or not the values are\ntrue or false respectively\nthe dictionary is a table or grid that\ncontains two different values as before\nwe need the ridge regression object or\nmodel\nthe procedure is similar except that we\nhave a table or grid of different\nparameter values\nthe output is the score for all the\ndifferent combinations of parameter\nvalues\nthe code is also similar the dictionary\ncontains the different free parameter\nvalues we can find the best value for\nthe free parameters the resulting scores\nthe different free parameters are stored\nin this dictionary\ngrid1.cv underscore results underscore\nwe can print out the score for the\ndifferent free parameter values the\nparameter values are stored as shown\nhere see the course labs for more\nexamples\n[Music]\nhello everyone and welcome to data\nvisualization with python I'm Alex\neccleson a data scientist at IBM and I'm\nyour instructor for this course\nthroughout this course we're going to\nlearn how to create meaningful effective\nand aesthetically pleasing data visuals\nand plots in Python using matplotlib and\na couple of other libraries namely\nSeabourn and folium\nthis course will consist of three\nmodules\nin module 1 we will briefly discuss data\nvisualization and some of the best\npractices to keep in mind when creating\ndata visuals\nwe will then learn about matplotlid its\nhistory architecture and the three\nlayers that form its architecture\nwe will also learn about the data set\nthat we will use throughout the course\nin these lectures as well as the\nHands-On sessions we will essentially be\nworking with the data set that was\ncurated by the United Nations on\nimmigration from different countries to\nCanada from 1980 to 2013. then we will\nstart learning how to use matplotlib to\ncreate plots and visuals and we will\nstart off with line plots\nnow we will generate the majority of our\nplots and visualizations in this course\nusing data stored in pandas data frames\nfor those of you who don't know what\npandas is Panthers is a python library\nfor data manipulation and Analysis so\nbefore we start building visualizations\nand plots we will take a brief crash\ncourse on pandas and learn how to use it\nto read data from CSV files like the one\nshown here\ninto what's called a pandas data frame\nlike the one shown here\nnow if you're interested in learning\nmore about the pandas Library we\nactually cover it in much more detail in\nour next course in this specialization\nwhich is data analysis with python so\nmake sure to complete the next course in\nthis specialization\nin module 2 we will continue on with a\nfew more basic data visualizations such\nas area plots histograms and bar charts\nand learn how to use matplotlib to\ncreate them and even create different\nversions of these plots\nwe will also cover a set of specialized\nvisualizations such as pie charts box\nplots Scatter Plots and bubble plots and\nwe will learn how to create them still\nusing matplotlib\nin module 3 we will learn about more\nadvanced visuals such as waffle charts\nthat provide a fine grained view of the\nproportions of different categories in a\ndata set\nwe will also learn about word clouds\nthat depict word frequency or importance\nin a body of text\nalso in this module we will explore\nanother Library Seaborn which is built\non top of matplotlib to simplify the\nprocess of creating plots and visuals\nand we will get a taste of its\nEffectiveness through the creation of\nregression plots\nfinally in this module we will explore\nanother Library folium which was built\nprimarily to visualize geospatial data\nso you will learn how to create maps of\ndifferent regions of the world\nsuperimposed markers of different shapes\non top of of maps and learn how to\ncreate chloroplath Maps\nnow before I conclude this video let me\nstress one thing data visualization is\nbest learned through Hands-On exercises\nand sessions therefore don't worry if\nyou find some of the videos to be short\nthe labs and the Hands-On sessions are\nvery thorough and cover a lot of the\nconcepts that are discussed in the\nvideos in much more detail so it's very\nimportant that you complete the labs and\nthe Hands-On sessions although they are\nungraded components of the course I hope\nthat you remember this and you keep it\nin mind as you progress in this course\nafter completing this course you will be\nable to use different visualization\nlibraries in Python namely matplotlib\nSeaborn and folium to create expressive\nvisual representations of your data for\ndifferent purposes\nso let's get right into it\nhello everyone and welcome to the first\nmodule of the data visualization with\npython course in this video we're going\nto introduce data visualization and go\nover an example of transforming a given\nvisual into one which is more effective\nattractive and impactive\nso let's get started\nnow one might ask why would I need to\nlearn how to visualize data well data\nvisualization is a way to show complex\ndata in a form that is graphical and\neasy to understand this can be\nespecially useful when one is trying to\nexplore the data and getting acquainted\nwith it also since a picture is worth a\nthousand words then plots and graphs can\nbe very effective in conveying a clear\ndescription of the data especially when\ndisclosing findings to an audience or\nsharing the data with other peer data\nscientists\nalso they can be very valuable when it\ncomes to supporting any recommendations\nyou make to clients managers or other\ndecision makers in your field\nDarkhorse analytics is a company that\nspun out of a research lab at the\nUniversity of Alberta in 2008 and has\ndone fascinating work on data\nvisualization\nDark Horse analytics specialize in\nquantitative Consulting in several areas\nincluding data visualization and\ngeospatial Analysis\ntheir approach when creating a visual\nrevolves around three key points less is\nmore effective it is more attractive and\nit is more impactive in other words any\nfeature or design you incorporate in\nyour plot to make it more attractive or\npleasing should support the message that\nthe plot is meant to get across and not\ndistract from it let's take a look at an\nexample\nso here is a pie chart of what looks\nlike people's preferences when it comes\nto different types of pig meat the\nchart's message is almost half of the\npeople surveyed preferred bacon over the\nother types of pig meat\nbut I'm sure that almost all of you\nagree that there is a lot going on in\nthis pie chart and we're not even sure\nif features such as the blue background\nor the 3D orientation are meant to\nconvey anything\nin fact these additional unnecessary\nfeatures distract from the main message\nand can be confusing to the audience\nso let's apply Darkhorse analytics\napproach to transform this into a visual\nthat's more effective attractive and\nimpactive\nas I mentioned earlier the message here\nis that people are most likely to choose\nbacon over other types of pig meat so\nlet's get rid of everything that can be\ndistracting from this core message\nthe first thing is let's get rid of the\nblue background\nand the gray background\nlet's also get rid of borders as they do\nnot convey any extra information\nAlso let's drop the Redundant Legend\nsince the pie chart is already color\ncoded\n3D isn't adding any extra information so\nlet's say bye to it\ntext building is also unnecessary\nand let's get rid of the different\ncolors\nand the wedges whoa what just happened\nwell let's thicken the lines to make\nthem more meaningful\nnow this looks a little familiar\nyes this is a bar graph after all one\nwith horizontal bars\nand finally let's emphasize bacon so\nthat it stands Out Among the other types\nof pig meat\nnow let's juxtapose the pie chart and\nthe bar graph and compare which is\nbetter and easy to understand I hope\nthat we unanimously agree that the bar\ngraph is the better of the two it is\nsimple cleaner less distracting and much\neasier to read in fact pie charts have\nrecently come under Fire from data\nvisualization experts who argue that\nthey are relevant only in the rarest of\ncircumstances\nbar graphs and charts on the other hand\nare argued to be far superior ways to\nquickly get a message across but don't\nworry about this for now we will come\nback to this point when we learn how to\ncreate pie charts and bar graphs with\nmatplotlib\nfor more similar and interesting\nexamples check out Darkhorse analytics\nwebsite they have a couple more examples\non how to clean bar graphs and maps of\ngeospatial data all these examples\nreinforce the concept of less is more\neffective attractive and impactive\nin this video we will start learning\nabout matplotlib this video will focus\non the history of matplotlib and its\narchitecture\nmatplotlab is one of the most widely\nused if not the most popular data\nvisualization library in Python\nit was created by John Hunter who was a\nneurobiologist and was part of a\nresearch team that was working on\nanalyzing electrochord discography\nsignals ecog for short\nthe team was using a proprietary\nsoftware for the analysis however they\nhad only one license and were taking\nturns in using it\nso in order to overcome this limitation\nJohn set out to replace the proprietary\nsoftware with a matlab-based version\nthat could be utilized by him and his\nteammates and that could be extended by\nmultiple investigators\nas a result\nmatplotlib was originally developed as\nan ecog visualization tool and just like\nMatlab matplotlib was equipped with a\nscripting interface for quick and easy\ngeneration of Graphics represented by\npipelot we will learn more about this in\na moment\nNow map ellipse architecture is composed\nof three main layers\nthe backend layer\nthe artist layer where much of the heavy\nlifting happens and is usually the\nappropriate programming Paradigm when\nwriting a web application server or a UI\napplication or perhaps a script to be\nshared with other Developers\nand the scripting layer which is the\nappropriate layer for everyday purposes\nand is considered a lighter scripting\ninterface to simplify common tasks and\nfor quick and easy generation of\ngraphics and plots now let's go into\neach layer in a little more details\nso the back end layer has three built-in\nabstract interface classes\nfigure canvas which defines and\nencompasses the area on which the figure\nis drawn renderer an instance of the\nrenderer class knows how to draw on the\nfigure canvas\nand finally event which handles user\ninputs such as keyboard strokes and\nmouse clicks\nmoving on to the artist layer it is\ncomposed of one main object which is the\nartist the artist is the object that\nknows how to take the renderer and use\nit to put ink on the canvas everything\nyou see in a matplotlib figure is an\nartist instance the title the lines The\nTick labels the images and so on all\ncorrespondent individual artists\nthere are two types of artist objects\nthe first type is the Primitive type\nsuch as a line a rectangle a circle or\ntext and the second type is the\ncomposite type such as the figure or the\naxes\nthe top level matplotlib object that\ncontains and manages all of the elements\nin a given graphic is the figure artist\nand the most important composite artist\nis the axis because it is where most of\nthe matplotlib API plotting methods are\ndefined including methods to create and\nmanipulate the ticks the axis lines the\nGrid or the plot background\nnow it is important to note that each\ncomposite artist may contain other\ncomposite artists as well as primitive\nartists so a figure artist for example\nwould contain an axis Artist as well as\na rectangle or text artists\nnow let's put the artist layer to use\nand see how we can use it to generate a\ngraphic\nso let's try to generate a histogram of\n10 000 random numbers using the artist\nlayer first we import the figure canvas\nfrom the back end back-end underscore Ag\nand attach the figure artist to it note\nthat AG stands for anti-grain geometry\nwhich is a high performance library that\nproduces attractive images\nthen we import the numpy library to\ngenerate the random numbers\nnext we create an axis artist the axis\nartist is added automatically to the\nfigure axis container fig.xes\nand note here that 111 is from the\nMatlab convention so it creates a grid\nwith one row and one column and uses the\nfirst cell in that grid for the location\nof the new axes\nthen we call the axis method hist to\ngenerate the histogram hiss creates a\nsequence of rectangle artists for each\nhistogram bar and adds them to the axis\ncontainer here 100 means create 100 bins\nfinally we decorate the figure with a\ntitle and we save it\nnow this is the generated histogram and\nso this is how we use the artist layer\nto generate a graphic\nas for the scripting layer it was\ndeveloped for scientists who are not\nprofessional programmers and I'm sure\nyou agree with me based on the histogram\nthat we just created that the artist\nlayer is syntactically heavy as it is\nmeant for developers and not for\nindividuals whose goal is to perform\nquick exploratory analysis of some data\nmatplotlips scripting layer is\nessentially the matplotlib dot Pi plot\ninterface which automates the process of\ndefining a canvas and defining a figure\nartist instant instance and connecting\nthem\nso let's see how the same code that we\nused earlier using the artist layer to\ngenerate a histogram of 10 000 random\nnumbers would now look like\nso first we import the pi plot interface\nand you can see how all the methods\nassociated with creating the histogram\nand other artist objects and\nmanipulating them whether it is the hist\nmethod or showing the figure are part of\nthe pi plot interface\nif you're interested in learning more\nabout the history of matplotlib and its\narchitecture this link will take you to\na chapter written by the creators of\nmatplotlab themselves it is definitely a\nrecommended read\nin this video we will learn how to use\nmatplotlib to create plots\nand we will do so using the Jupiter\nnotebook as our environment\nnow matplotlib is a well-established\ndata visualization library that is well\nsupported in different environments such\nas in Python scripts in the IPython\nshell web application servers and\ngraphical user interface toolkits as\nwell as the Jupiter notebook\nnow for those of you who don't know what\nthe Jupiter notebook is it's an open\nsource web application that allows you\nto create and share documents that\ncontain Live code visualizations and\nsome explanatory text as well\nJupiter has some specialized support for\nmatplotlib and so if you start a jupyter\nnotebook all you have to do is import\nmatplotlib and you're ready to go\nin this course we will be working mostly\nwith the scripting interface in other\nwords we will learn how to create almost\nall of the visualization tools using the\nscripting interface\nas we proceed in the course you will\nappreciate the power of this interface\nwhen you find out that you can literally\ncreate almost all of the conventional\nvisualization tools such as histograms\nbar charts box plots and many others\nusing one function only the plot\nfunction\nlet's start with an example\nlet's first import the scripting\ninterface as PLT\nand let's plot a circular Mark at the\nposition five five so x equals 5 and Y\nequals 5. notice how the plot was\ngenerated within the browser and not in\na separate window for example\nif the plot gets generated in a new\nwindow then we can enforce generating\nplots within the browser using what's\ncalled a magic function a magic function\nstarts with percent sign matplotlib\nand to enforce plots to be rendered\nwithin the browser you pass in inline as\nthe backend\nmatplotlib has a number of different\nbackends available\none limitation of this backhand is that\nyou cannot modify a figure once it's\nrendered so after rendering the above\nfigure there is no way for us to add for\nexample a figure title or label States\naxes you will need to generate a new\nplot and add a type a title and the axis\nlabels before calling the show function\na backend that overcomes this limitation\nis The Notebook backend with the\nnotebook backend in place if a PLT\nfunction is called it checks if an\nactive figure exists and any functions\nyou call will be applied to this active\nfigure\nif a figure does not exist it renders a\nnew figure\nso when we call the plt.plot function to\nplot a circular Mark at position five\nfive the backend checks if an active\nfigure exists\nsince there isn't an active figure it\ngenerates a figure and adds a circular\nMark to position five five\nand what is beautiful about this\nbackhand is that now we can easily add a\ntitle for example or labels to the axes\nafter the plot was rendered without the\nneed to regenerate the figure\nfinally another thing that is great\nabout matplotlib is that pandas also has\na built-in implementation of it\ntherefore plotting in pandas is as\nsimple as calling the plot function on a\ngiven Panda series or data frame\nso say we have a data frame of the\nnumber of immigrants from India and\nChina to Canada from 1980 to 1996.\nand say we're interested in generating a\nline plot of these data all we have to\ndo is call the plot function on this\ndata frame which we called India\nunderscore China underscore DF and set\nthe parameter kind to line\nand there you have it a line plot of the\ndata in the data frame\nplotting a histogram of the data is not\nany different so say we would like to\nplot a histogram of the India column in\nour data frame all we have to do is call\nthe plot function on that column and set\nthe parameter kind to hist for histogram\nand there you have it a histogram of the\nnumber of Indian immigrants to Canada\nfrom 1980 to 1996.\nthis concludes our video on basic\nplotting with matplotlib see you in the\nnext video\nin this video we will learn more about\nthe data set that we will be using\nthroughout the course\nthe population division of the United\nNations compiled immigration data\npertaining to 45 countries the data\nconsists of the total number of\nimmigrants from all over the world to\neach of the 45 countries as well as\nother metadata pertaining to the\nimmigrants countries of origin\nin this course we will focus on\nimmigration to Canada and we will work\nprimarily with the data set involving\nimmigration to the great white North\nhere is a snapshot of the new end data\non immigration to Canada in the form of\nan Excel file as you can see the first\n20 rows contain textual data about the\nUN department and other irrelevant\ninformation Robert 21 contains the\nlabels of the columns\nfollowing that each row represents a\ncountry and contains metadata about the\ncountry such as what continent it\nresides in what region it belongs to and\nwhether the region is developing or\ndeveloped\neach row also contains the total number\nof immigrants from that country for the\nyears 1980 all the way to 2013.\nthroughout this course we will be using\npandas for any analysis of the data\nbefore creating any visualizations\nso in order to start creating different\ntypes of plots of the data whether for\nexploratory analysis or for presentation\nwe will need to import the data into\nappendix data frame\nto do that\nwe will need to import the pandas\nLibrary as well as the xlrd library\nwhich is required to extract data from\nExcel spreadsheets files then we call\nthe pandas function read underscore\nExcel to read the data into appendix\ndata frame and let's name this data\nframe DF underscore can\nnotice how we're skipping the first 20\nrows to read only the data corresponding\nto each country\nif you want to confirm that you have\nimported your data correctly in pandas\nyou can always use the head function to\ndisplay the first five rows of the data\nframe\nso if we call this function on our data\nframe DF underscore can\nhere is the output\nas you can see the output of the head\nfunction looks correct with the columns\nhaving the correct labels and each were\nrepresenting a country and containing\nthe total number of immigrants from that\ncountry\nthis concludes our video on the\nintegration to Canada data set I will\nsee you in the next video\nin this video things will start getting\nmore exciting we will generate our first\nvisualization tool the line plot\nso what is a line plot as its name\nsuggests it is applied in the form of a\nseries of data points connected by\nstraight line segments it is one of the\nmost basic type of chart and is common\nin many fields not just data science\nthe more important question is when to\nuse line plots the best use case for a\nline plot is when you have a continuous\ndata set and you're interested in\nvisualizing the data over a period of\ntime as an example say we're interested\nin the trend of immigrants from Haiti to\nCanada we can generate a line plot and\nthe resulting figure will depict the\ntrend of Haitian immigrants to Canada\nfrom 1980 to 2013.\nbased on this line plot we can then\nresearch for justifications of obvious\nanomalies or changes so in this example\nwe see that there is a spike of\nimmigration from Haiti to Canada in\n2010.\na quick Google search for major events\nin Haiti in 2010 would return the tragic\nearthquake that took place in 2010 and\ntherefore this influx of immigration to\nCanada was mainly due to that tragic\nearthquake okay now how can we generate\nthis line plot\nbefore we go over the code to do that\nlet's do a quick recap of our data set\neach rule represents a country and\ncontains metadata about the country such\nas where it is located geographically\nand whether it is developing or\ndeveloped\neach row also contains numerical figures\nof annual immigration from that country\nto Canada from 1980 to 2013.\nnow let's process the data frame so that\nthe country name becomes the index of\neach row this should make querying\nspecific countries easier also let's add\nan extra column which represents the\ncumulative sum of annual immigration\nfrom each country from 1980 to 2013. so\nfor Afghanistan it is 58\n639 total and for Albania it is 15\n699 and so on and let's name our data\nframe DF underscore Canada\nso now that we know how our data is\nstored in the data frame DF underscore\nCanada let's generate the line plot\ncorresponding to immigration from Haiti\nfirst we import matplotlib as MPL and\nits scripting interface as PLT\nthen we call the plot function on the\nrow corresponding to Haiti and we set\nkind equals line to generate a line plot\nnote that we use the years which is a\nlist containing string format of years\nfrom 1980 to 2013 in order to exclude\nthe column of total integration that we\nadded\nthen to complete the figure we give it a\ntitle and we label its axes\nfinally we call the show function to\ndisplay the figure\nnote that this is the code to generate\nthe line plot using the magic function\npercent sign matplotlib with the inline\nbackend\nand there you have it a line plot that\ndepicts immigration from Haiti to Canada\nfrom 1980 to 2013. in the lab session we\nexplore line plots in more details so\nmake sure to complete this modules lab\nsession\nthis concludes our video online plots\nI'll see you in the next video\nin this video we will learn about\nanother visualization tool the area plot\nwhich is actually an extension of the\nline plot that we learned about in an\nearlier video\nso what is an area plot an area plot\nalso known as an area chart or graph is\na type of plot that depicts accumulated\ntotals using numbers or percentages over\ntime it is based on the line plot and is\ncommonly used when trying to compare two\nor more quantities\nso how can we generate an area plot with\nmatplotlib\nbefore we go over the code to do that\nlet's do a quick recap of our data set\nrecall that each row represents a\ncountry and contains metadata about the\ncountry such as where it is located\ngeographically and whether it is\ndeveloping or developed each row also\ncontains numerical figures of annual\nimmigration from that country to Canada\nfrom 1980 to 2013.\nnow let's process the data frame so that\nthe country name becomes the index of\neach row this should make retrieving\nrows pertaining to specific countries a\nlot easier also let's add an extra\ncolumn which represents the cumulative\nsum of annual immigration from each\ncountry from 1980 to 2013. so for\nAfghanistan it is 58\n639 total and for Albania it is 15\n699 and so on\nand let's name our data frame DF\nunderscore Canada\nso now that we know how our data is\nstored in the data frame DF underscore\nCanada let's try to generate area plots\nfor the countries with the highest\nnumber of integration to Canada\nwe can try to find these countries by\nsorting our data frame in descending\norder of cumulative total immigration\nfrom 1980 to 2013.\nwe use the sort underscore values\nfunction to sort our data frame in\ndescending order and here is the result\nso it turns out that India followed by\nChina then the UK Philippines and\nPakistan are the top five countries with\nthe highest number of immigration to\nCanada\nso can we now go ahead and generate the\narea plots using the first five rows of\nthis data frame not quite yet\nfirst we need to create a new data frame\nof only these five countries\nand we need to exclude the total column\nmore importantly\nto generate the area plots for these\ncountries we need the years to be\nplotted on the horizontal axis and the\nannual immigration to be plotted on the\nvertical axis\nnote that matplotlib plots the indices\nof a data frame on the horizontal axis\nand with the data frame as shown the\ncountries will be plotted on the\nhorizontal axis so to fix this we need\nto take the transpose of the data frame\nlet's see how we can do this\nafter we sort our data frame in\ndescending order of cumulative annual\nimmigration we create a new data frame\nof the top five countries and let's call\nit\nDF underscore top 5. we then select Only\nThe Columns representing the years 1980\nto\n2013. in order to exclude the total\ncolumn before applying the transpose\nmethod\nthe resulting data frame is exactly what\nwe want with five columns where each\ncolumn represents one of the top five\ncountries and the years being the\nindices\nnow we can go ahead and call the plot\nfunction on data frame DF underscore top\n5 to generate the area plots\nto do that first we import matplotlib as\nmlmpl and its scripting interface as PLT\nthen we call the plot function on the\ndata frame DF underscore top 5 and we\nset client equals area to generate an\narea plot\nthen to complete the figure we give it a\ntitle and we label its axes\nfinally we call the show function to\ndisplay the figure note that here we're\ngenerating the area plot using the\ninline backhand\nand there you have it an area plot that\ndepicts the immigration trend\nof the five countries with the highest\nimmigration to Canada from 1980 to 2013.\nin the lab session we explore area plots\nin more details so make sure to complete\nthis modules lab session\nand with this we conclude our video on\narea plots I'll see you in the next\nvideo\nin this video we will learn about\nanother visualization tool the histogram\nand we will learn how to create it using\nmatplotlib\nlet's start by defining what a histogram\nis\na histogram is a way of representing the\nfrequency distribution of a numeric data\nset\nthe way it works is it partitions the\nspread of the numeric data into biz\nsigns each data point in the data set to\na bin\nand then counts the number of data\npoints that have been assigned to each\nbin so the vertical axis is actually the\nfrequency or the number of data points\nin each bin\nfor example let's say the range of the\nnumeric values in the data set is 34\n129.\nnow the first step in creating the\nhistogram is partitioning the horizontal\naxis in say 10 bins of equal width\nand then we construct the histogram by\ncounting how many data points have a\nvalue that is between the limits of the\nfirst pin the second bin the third bin\nand so on\nsay the number of data points having a\nvalue between 0 and\n3413 is 175.\nthen we draw a bar of that height for\nthis bin\nwe repeat the same thing for all the\nother bins\nand if no data points fall into a bin\nthen that bin would have a bar of height\nzero\nso how do we create a histogram using\nmatplotlib\nbefore we go over the code to do that\nlet's do a quick recap of our data set\nrecall that each row represents a\ncountry and contains metadata about the\ncountry such as where it is located\ngeographically and whether it is\ndeveloping or developed\neach row also contains numerical figures\nof annual immigration from that country\nto Canada from 1980 to 2013.\nnow let's process the data frame so that\nthe country name becomes the index of\neach row this should make retrieving\nrows pertaining to specific countries a\nlot easier\nAlso let's add an extra column which\nrepresents the cumulative sum of annual\nintegration from each country from 1980\nto 2013.\nso for Afghanistan for example it is 58\n639 total\nand for Albania it is 15\n699 and so on\nand let's name our data frame DF\nunderscore Canada\nso now that we know how our data is\nstored in the data frame DF underscore\nCanada say we're interested in\nvisualizing the distribution of\nimmigrants to Canada in the year 2013.\nthe simplest way to do that is to\ngenerate a histogram of the data in\ncolumn in 2013\nand let's see how we can do that with\nmatplotlib\nfirst we import matplotlib as MPL\nand its scripting interface as PLT\nthen we call the plot function on the\ndata in column 2013 and we set kind\nequals hist to generate a histogram\nthen to complete the figure we give it a\ntitle and we label its axes\nfinally we call the show function to\ndisplay the figure\nand there you have it a histogram that\ndepicts the distribution of immigration\nto Canada in 2013. but notice how the\nbins are not aligned with the tick marks\non the horizontal axis\nthis can make the histogram hard to read\nso let's try to fix this in order to\nmake our histogram more effective\none way to solve this issue is to borrow\nthe histogram function from the numpy\nlibrary\nso as usual we start by importing\nmatplotlib and its scripting interface\nbut this time we also import the numpy\nlibrary\nthen we call the numpy histogram\nfunction on the data in column 2013.\nwhat this function is going to do is it\nis going to partition the spread of the\ndata in column 2013 into 10 bins of\nequal width compute the number of data\npoints that fall in each bin and then\nreturn this frequency of each bin which\nwe're calling count here and the bin\nedges which we're calling bin underscore\nedges\nwe then pass these bin edges as an\nadditional parameter in our plot\nfunction to generate the histogram\nand there you go a nice looking\nhistogram whose bin edges are aligned\nwith the tick marks on the horizontal\naxis\nin the lab session we explore histograms\nin more details so make sure to complete\nthis modules lab session\nand with this we conclude our video on\nhistograms I'll see you in the next\nvideo\nin this video we will learn about an\nadditional visualization tool namely the\nbar chart and learn how to create it\nusing matplotlib\na bar chart is a very popular\nvisualization tool\nlike a histogram a bar chart also known\nas a bar graph is a type of plot where\nthe length of each bar is proportional\nto the value of the item that it\nrepresents\nit is commonly used to compare the\nvalues of a variable at a given point in\ntime\nfor example say you are interested in\nvisualizing in a discrete fashion how\nimmigration from Iceland to Canada\nlooked like from 1980 to 2013. one way\nto do that is by building a bar chart\nwhere the height of the bar represents\nthe total immigration from Iceland to\nCanada in a particular year\nso how do we do that with matplotlib\nbefore we go over the code to do that\nlet's do a quick recap of our data set\nrecall that each row represents a\ncountry and contains metadata about the\ncountry such as where it is located\ngeographically and whether it is\ndeveloping or developed\neach row also contains numerical figures\nof annual immigration from that country\nto Canada from 1980 to 2013.\nnow let's process the data frame so that\nthe country name becomes the index of\neach row this should make retrieving\nrows pertaining to specific countries a\nlot easier\nAlso let's add an extra column which\nrepresents the cumulative sum of annual\nimmigration from each country from 1980\nto 2013.\nso for Afghanistan for example it is 58\n639 total and for Albania it is 15\n699 and so on\nand let's name our data frame DF\nunderscore Canada\nso now that we know how our data is\nstored in the data frame DF underscore\nCanada let's see how we can use\nmatplotlib to generate a bar chart to\nvisualize how immigration from Iceland\nto Canada looked like from 1980 to 2013.\nas usual we start by importing\nmatplotlib and its scripting interface\nthen we use the years variable to create\na new data frame let's name it DF\nunderscore Iceland which includes the\ndata pertaining to annual immigration\nfrom Iceland to Canada and excluding the\ntotal column\nthen we call the plot function on DF\nunderscore Iceland and we set client\nequals bar to generate a bar chart\nthen to complete the figure we give it a\ntitle\nwe label its axes\nfinally we call the show function to\ndisplay the figure\nand there you have it a bar chart that\ndepicts the immigration from Iceland to\nCanada from 1980 to 2013.\nby examining the bar chart we notice\nthat immigration to Canada from Iceland\nhas seen an increasing Trend since 2010.\nI'm sure that the Curious among you are\nalready wondering who the culprit behind\nthis increasing trend is\nin the lab session we revealed the\nreason and we also learned how to create\na bar chart with horizontal bars so make\nsure to complete this modules lab\nsession\nand with this we can include our video\non bar charts I'll see you in the next\nvideo\nin this video we will learn about\nanother visualization tool the pie chart\nand we will learn how to create it using\nmatplotlib\nso what is a pie chart apply chart is a\ncircular statistical graphic divided\ninto slices to illustrate numerical\nproportion for example here is a pie\nchart of the Canadian federal election\nback in 2015 where the Liberals in red\nwon more than 50 percent of the seats in\nthe House of Commons that is why the red\ncolor occupies more than half of the\ncircle\nso how do we create a pie chart with\nmatplotlib\nbefore we go over the code to do that\nlet's do a quick recap of our data set\nrecall that each row represents a\ncountry and contains metadata about the\ncountry such as where it is located\ngeographically and whether it is\ndeveloping or developed\neach row also contains numerical figures\nof annual immigration from that country\nto Canada from 1980 to 2013.\nnow let's process the data frame so that\nthe country name becomes the index of\neach row this should make retrieving\nrows pertaining to specific countries a\nlot easier\nAlso let's add an extra column which\nrepresents the cumulative sum of annual\nintegration from each country from 1980\nto 2013.\nso for Afghanistan for example it is 58\n639 total\nand for Albania it is 15\n699 and so on\nand let's name our data frame DF\nunderscore Canada\nso now that we know how our data is\nstored in the data frame DF underscore\nCanada say we're interested in\nvisualizing a breakdown of immigration\nto Canada continent-wise\nthe first step is to group our data by\ncontinent using the continent column and\nwe use pandas for this we call the\npandas Group by function on DF\nunderscore Canada and we sum the number\nof immigrants from the countries that\nbelong to the same continent\nhere is a resulting data frame and let's\nname it DF underscore continents the\nresulting data frame has six rows each\nrepresenting a continent and 35 columns\nrepresenting the years from 1980 to 2013\nplus the cumulative sum of integration\nfor each continent\nand now we're ready to start creating\nour pie chart\nwe start with the usual importing\nmatplotlab as MPL and its scripting\nlayer the pi plot interface as PLT\nthen we call the plot function on column\ntotal of the data frame DF underscore\ncontinents and we set kind equals pi to\ngenerate a pie chart\nthen to complete the figure we give it a\ntitle\nfinally we call the show function to\ndisplay the figure and there you have it\na pie chart that depicts each\ncontinent's proportion of immigration to\nCanada from 1980 to 2013.\nin the lab session we will go through\nthe process of creating a very\nprofessional looking and aesthetically\npleasing pie chart and transform the pie\nchart that we just created into one that\nlooks like this so make sure to complete\nthis modules lab session\none last comment on pie charts there are\nsome very vocal opponents to the use of\npie charts under any circumstances\nmost argue that pie charts fail to\naccurately display data with any\nconsistency\nbar charts are much better when it comes\nto representing the data in a consistent\nway and getting the message across\nif you're interested in learning more\nabout the arguments against white charts\nhere is a link to a very interesting\narticle that discusses very clearly the\nflaws of pie charts you can also find\nthe link under the video\nand with this we conclude our video on\npie charts I'll see you in the next\nvideo\n[Music]\nthank you\nin this video we will learn about\nanother visualization tool the box plot\nand how to create one using matplotlib\nso what is a box plot a box plot is a\nway of statistically representing the\ndistribution of given data through five\nmain dimensions\nthe First Dimension is minimum which is\nthe smallest number in the sorted data\nits value can be obtained by subtracting\n1.5 times the IQR where IQR is\ninterquartile range from the first\nquartile\nthe second dimension is first quartile\nwhich is 25 of the way through the\nsorted data in other words a quarter of\nthe data points are less than this value\nthe third dimension is median which is\nthe median of the sorted data the fourth\ndimension is third quartile which is 75\npercent of the way through the sorted\ndata in other words three quarters of\nthe data points are less than this value\nand the final Dimension is maximum which\nis the highest number in the sorted data\nwhere maximum equals third quartile\nsummed with 1.5 multiplied by IQR\nfinally box plots also display outliers\nas individual dots that occur outside\nthe upper and lower extremes\nnow let's see how we can create a box\nplot with matplotlib before we go over\nthe code to do that let's do a quick\nrecap of our data set\nrecall that each row represents a\ncountry and contains metadata about the\ncountry such as where it is located\ngeographically and whether it is\ndeveloping or developed\neach row contains numerical figures of\nannual immigration from that country to\nCanada from 1980 to 2013.\nnow let's process the data frame so that\nthe country name becomes the index of\neach row this should make retrieving\nrows pertaining to specific countries a\nlot easier\nAlso let's add an extra column which\nrepresents the cumulative sum of annual\nimmigration from each country from 1980\nto 2013.\nso for Afghanistan for example it is 58\n639 total and for Albania it is 15\n699 and so on and let's name our data\nframe DF underscore Canada\nso now that we know how our data is\nstored in the data frame DF underscore\nCanada say we're interested in creating\na box plot to visualize immigration from\nJapan to Canada\nas with other tools that we learned so\nfar we start by importing matplotlib as\nMPL and the pi plot interface as PLT\nthen we create a new data frame of the\ndata pertaining to Japan and we're\nexcluding the column total using the\nyear's variable\nthen we transpose the resulting data\nframe to make it in the correct format\nto create the box plot\nlet's name this new data frame DF\nunderscore Japan\nfollowing that we call the plot function\non DF underscore Japan and we set kind\nequals box to generate a box plot\nthen to complete the figure we give it a\ntitle and we label the vertical axis\nfinally we call the show function to\ndisplay the figure and there you have it\na box plot that provides a pleasing\ndistribution of Japanese immigration to\nCanada from 1980 to 2013.\nin the lab session we explore box plots\nin more detail and learn how to create\nmultiple box plots as well as horizontal\nbox plots so make sure to complete this\nmodule's lab session\nand with this we conclude our video on\nbox plots see you in the next video\n[Music]\nin this video we will learn about an\nadditional visualization tool the\nscatter plot and we will learn how to\ncreate it using matplotlib\nso what is a scatter plot a scatter plot\nis a type of plot that displays values\npertaining to typically two variables\nagainst each other\nusually it is a dependent variable to be\nplotted against an independent variable\nin order to determine if any correlation\nbetween the two variables exists\nfor example here is a scatter plot of\nincome versus education\nand by looking at the plotted data one\ncan conclude that an individual with\nmore years of education is likely to\nearn a higher income than an individual\nwith fewer years of education so how can\nwe create a scatter plot with matplotlib\nbefore we go over the code to do that\nlet's do a quick recap of our data set\nrecall that each row represents a\ncountry and contains metadata about the\ncountry such as where it is located\ngeographically and whether it is\ndeveloping or developed\neach row also contains numerical figures\nof annual immigration from that country\nto Canada from 1980 to 2013.\nnow let's process the data frame so that\nthe country name becomes the index of\neach row this should make retrieving\nrows pertaining to specific countries a\nlot easier\nAlso let's add an extra column which\nrepresents the cumulative sum of annual\nintegration from each country from 1980\nto 2013.\nso for Afghanistan for example it is 58\n639 total\nand for Albania it is 15\n699 and so on\nand let's name our data frame DF\nunderscore Canada\nso now that we know how our data is\nstored in the data frame DF underscore\nCanada say we're interested in plotting\na scatter plot of the total annual\nimmigration to Canada from 1980 to 2013.\nto be able to do that we first need to\ncreate a new data frame that shows each\nhere and the corresponding total number\nof immigration from all the countries\nworldwide as shown here\nlet's name this new data frame DF\nunderscore total\nin the lab session we will walk together\nthrough the process of creating DF\nunderscore total from DF underscore\nCanada so make sure to complete this\nmodules lab session\nthen we proceed as usual we import\nmatplotlib as MPL and its scripting\nlayer the pi plot interface as PLT then\nwe call the plot function on the data\nframe DF underscore total and we set\nkind equals scatter to generate a\nscatter plot\nnow unlike the other data visualization\ntools we're only passing the client\nparameter was enough to generate the\nplot with Scatter Plots we also need to\npass the variable to be plotted on the\nhorizontal axis as the X parameter and\nthe variable to be plotted on the\nvertical axis as the Y parameter\nin this case we're passing column year\nas the X parameter and column total as\nthe Y parameter\nthen to complete the figure we give it a\ntitle and we label its axes\nfinally we call the show function to\ndisplay the figure\nand there you have it a scatter plot\nthat shows total integration to Canada\nfrom countries all over the world from\n1980 to 2013.\nthe scatter plot clearly depicts an\noverall Rising trend of immigration with\ntime\nin the lab session we explore Scatter\nPlots in more details and learn about a\nvery interesting variation of the\nscatter plot a plot called the bubble\nplot and we learn how to create it using\nmatplotlid so make sure to complete this\nmodules lab session\nand with this we conclude our video on\nScatter Plots I'll see you in the next\nvideo\nin this video we will learn about what\nsome consider an advanced visualization\ntool namely the waffle chart\nso what is a waffle chart a waffle chart\nis a great way to visualize data in\nrelation to a whole or to highlight\nprogress against a given threshold\nfor example say immigration from\nScandinavia to Canada is comprised only\nof immigration from Denmark Norway and\nSweden\nand we're interested in visualizing the\ncontribution of each of these countries\nto the Scandinavian immigration to\nCanada\nthe main idea here is for a given waffle\nchart whose desired height and width are\ndefined the contribution of each country\nis transformed into a number of tiles\nthat is proportional to the country's\ncontribution to the total\nso the more the contribution the more\nthe tiles\nresulting in what resembles a while Fork\nwhen combined hence the name waffle\nchart\nunfortunately\nmatplotlib does not have a built-in\nfunction to create waffle charts\ntherefore in the lab session I'll walk\nyou through the process of creating your\nown python function to create a waffle\nchart so it's really important that you\ncomplete this module's lab session and\nwith this we conclude our video on\nwaffle charts I'll see you in the next\nvideo\nin this video we will learn about\nanother Advanced visualization tool the\nword cloud\nso what is a word cloud\na word cloud is simply a depiction of\nthe importance of different words in a\nbody of text\na word cloud Works in a simple way the\nmore a specific word appears in a source\nof textual data the bigger and Bolder it\nappears in the world Cloud so given some\nText data on recruitment for example we\ngenerate a cloud of words like this\nThis Cloud is telling us that words such\nas recruitment Talent candidates and so\non are the words that really stand out\nin these text documents\nand assuming that we didn't know\nanything about the content of these\ndocuments a word cloud can be very\nuseful to assign a topic to some unknown\ntextual data\nunfortunately just like waffle charts\nmatplotlib does not have a built-in\nfunction to generate word clouds however\nluckily a python library for cloud word\ngeneration that was created by Andreas\nMuller is publicly available\nso in the lab session we will learn how\nto use Muller's word cloud generator\nand we will also create interesting word\nclouds superimposed on different\nbackground images\nso make sure to complete this modules\nlab session\nand with this we conclude our video on\nword clouds I'll see you in the next\nvideo\nin this video we will learn about a new\nvisualization library in Python which is\nSeaborn\nalthough Seabourn is another data\nvisualization Library it is actually\nbased on matplotlib it was built\nprimarily to provide a high level\ninterface for drawing attractive\nstatistical Graphics such as regression\nplots box plots and so on\nseabon makes creating plots very\nefficient therefore with Seabourn you\ncan generate plots with code that is\nfive times less than with map plot lib\nlet's see how we can use Seaboard to\ncreate a statistical graphic let's look\ninto regression plots\nlet's say we have a data frame called DF\nunderscore total of total immigration to\nCanada from 1980 to 2013.\nwith the year in one column and the\ncorresponding total immigration in\nanother column\nand say we're interested in creating a\nscatter plot along with a regression\nline to highlight any Trends in the data\nwith Seaborn you can do all this with\nliterally one line of code\nthe way to do this we first import C1\nand let's import it as SNS\nthen we call the seaborne reg plot\nfunction\nwe basically tell it to use the data\nframe DF underscore total and to plot\nthe column year on the horizontal axis\nand the column total on the vertical\naxis\nand the output of this one line of code\nis a scatter plot with a regression line\nand not just that but also 95 percent\nconfidence interval isn't that really\namazing\nseaborn's red plot function also accepts\nadditional parameters for any personal\ncustomization\nso you can change the color for example\nusing the color parameter let's go ahead\nand change the color to Green\nalso you can change the marker shape as\nwell using the marker parameter let's go\nahead and change the shape of our\nmarkers to a plus marker instead of the\ndefault circular marker\nin the lab session we explored\nregression plots with Seabourn in more\ndetails so make sure to complete this\nmodules lab session and with this we\nconclude our short introduction to\nSeabourn and regression plots I'll see\nyou in the next video\nin this video we will learn about a very\ninteresting data visualization library\nin Python which is volume\nfolium is a powerful data visualization\nlibrary in Python that was built\nprimarily to help people visualize\ngeospatial data\nwith volume you can create a map of any\nlocation in the world as long as you\nknow its latitude and longitude values\nyou can also create a map and\nsuperimposed markers as well as clusters\nof markers on top of the map for cool\nand very interesting visualizations\nyou can also create maps of different\nstyles such as street level map a\nstatement map and a couple others which\nwe will look into in just a moment\ncreating a world map with volume is\npretty straightforward\nyou simply call the map function and\nthat is all what is really interesting\nabout the maps created by folium is that\nthey are interactive so you can zoom in\nand out after the map is rendered which\nis a super useful feature\nthe default map style is the openstreet\nmap which shows a street view of an area\nwhen you're zoomed in and shows the\nborders of the world countries when\nyou're zoomed all the way out\nnow let's create a world map centered\naround Canada\nto do that we pass in the latitude and\nthe longitude values of Canada using the\nlocation parameter and with folium you\ncan set the initial zoom level using the\nzoom start parameter\nnow I say initial because you can easily\nchange the zoom level after the map is\nrendered by zooming in or zooming out\nyou can play with this parameter to\nfigure out what the initial zoom level\nlooks like for different values now\nlet's set the zoom level for our map of\nCanada to four and there you go here is\na world map centered around Canada\nanother amazing feature of folium is\nthat you can create different map styles\nusing the tiles parameter\nlet's create a statement toner map of\nCanada\nthis style is great for visualizing and\nexploring River meanders and coastal\nzones\nanother style is stament Terrain\nlet's create a map of Canada in\nstatement Terrain\nthis style is great for visualizing Hill\nshading and natural vegetation colors\nand with this we conclude our\nintroduction to volume I'll see you in\nthe next video\nin this video we will continue working\nwith the phonium library and learn how\nto superimpose markers on top of a map\nfor interesting visualizations\nin the previous video we learned how to\ncreate a world map centered around\nCanada\nso let's create this map again and name\nit Canada underscore math this time\nOntario is a Canadian province and\ncontains about 40 percent of the\nCanadian population\nit is considered Canada's most populous\nprovince\nlet's see how we can add a circular Mark\nto the center of Ontario\nto do that we need to create what is\ncalled a feature group\nlet's go ahead and create a feature\ngroup named Ontario\nnow when a feature group is created it\nis empty and that means what's next is\nto start creating what is called\nchildren and adding them to the Future\ngroup\nso let's create a child in the form of a\nred circular Mark located at the center\nof the Ontario Province we specify the\nlocation of the child by passing in its\nlatitude and longitude values\nand once we're done adding children to\nthe Future group we add the future group\nto the map\nand there you have it a red circular\nmark superimposed on top of the map and\nadded to the center of the province of\nOntario\nnow it would be nice if we could\nactually label this marker in order to\nlet other people know what it actually\nrepresents\nto do that we simply use the marker\nfunction and the pop-up parameter to\npass in whatever text we want to add to\nthis marker\nand there you go now our marker displays\nOntario when clicked on\nin the lab session we will look into a\nreal world example and explore crime\nrate in San Francisco\nwe will create a map of San Francisco\nand superimpose thousands of these\nmarkers on top of the map\nnot just that but I'll show you how you\ncan also create clusters of markers in\norder to make your map look less\ncongested\nthis module's lab session is a very\ninteresting one so please make sure to\ncomplete it and with this we conclude\nour video on adding markers to maps with\nvolume I'll see you in the next video\nin this video we will learn how to\ncreate a special type of map called\nchoropleth map with volume\nI'm sure that most of you have seen Maps\nsimilar to this one and this one these\nare what we call choropleth Maps so what\nis a chloropleth map\na choropleth map is a thematic map in\nwhich areas are shaded or patterned in\nproportion to the measurement of the\nstatistical variable being displayed on\nthe map such as population density or\nper capita income\nthe higher the measurement the darker\nthe color\nso the map to the left is a choropleth\nmap of the world showing infant\nmortality rate per 1000 births\nthe darker the color the higher the\ninfant mortality rate\naccording to the map African countries\nhad very high infant mortality rates\nwith some of them reporting a rate that\nis higher than 160 per 1000 births\nsimilarly the map to the right is a\nchoropleth map of the U.S showing\npopulation per square mile by state\nagain the darker the color the higher\nthe population\naccording to the map states in the\neastern part of the U.S tend to be more\npopulous than states in the western part\nwith California being an exception\nin order to create a chloroplast map of\na region of Interest\nvolume requires a junior Json file that\nincludes geospatial data of the region\nfor a chloroplyph map of the world we\nwould need a go Json file that lists\neach country along with any geospatial\ndata to Define its borders and\nboundaries\nhere is an example of what the gojson\nfile would include about each country\nthe example here pertains to the country\nBrunei\nas you can see\nthe file includes the country's name\nits ID\ngeometry shape and the coordinates that\nDefine the country's borders and\nboundaries\nso let's see how we can create a\nchoropleth map of the world like this\none showing immigration to Canada\nbefore we go over the code to do that\nlet's do a quick recap of our data set\nrecall that each row represents a\ncountry and contains metadata about the\ncountry such as where it is located\ngeographically and whether it is\ndeveloping or developed\neach row also contains numerical figures\nof annual immigration from that country\nto Canada from 1980 to 2013.\nnow let's process the data and let's add\nan extra column which represents the\ncumulative sum of annual integration\nfrom each country from 1980 to 2013.\nso for Afghanistan for example it is 58\n639 total and for Albania it is 15\n699 and so on\nand let's name our data frame DF\nunderscore Canada\nso now that we know how our data is\nstored in the data frame DF underscore\nCanada let's see how we can generate a\nchoropleth map of the world showing\nimmigration to Canada\nwe should be experts now in creating\nworld maps with volume so let's go ahead\nand create a world map but this time\nlet's use the matte box bright tile set\nthe result is a nice world map\ndisplaying the name of every country\nnow to convert this map into a\nchoropleth map we first Define a\nvariable that points to our geojson file\nthen we apply the choropleth function to\nour world map and we tell it to use the\ncolumns country and total in our DF\nunderscore Canada data frame and to use\nthe country names to look up the\ngeospatial information about each\ncountry in the Geo Json file\nand there you have it a choropleth map\nof Canada showing the intensity of\nimmigration from different countries\nworldwide\nin the lab session we explore choropleth\nmaps in more details so please make sure\nto complete this modules lab session\nand with this we conclude our video on\nchloropleth maps\nin this video we are going to see how an\ninteractive data application can help\nimprove business performance and the\ntools available for building the\napplication\nwith real-time visuals on the dashboard\nunderstanding a business's moving Parts\nbecomes easy\nbased on the report type and data\nsuitable graphs and charts can be\ncreated in one central location this\nprovides an easy way for stakeholders to\nunderstand what is going right wrong and\nwhat needs to be improved\ngetting the big picture in one place can\nhelp businesses make informed decisions\nthis improves business performance\nin general the best dashboards answer\ncritical business questions\nlet us say you are assigned a task to\nMonitor and Report the performance of\ndomestic U.S flights\nfollowing are the yearly review report\nitems\nthe top 10 Airline carriers in the year\n2019 in terms of number of flights\nthe number of flights in 2019 split by\nmonth\nand the number of travelers from the\nstate of California to other states\nsplit by distance group let us look at\nthe two ways of presenting the report\nfor this type 1 report the information\nis presented through tables with\ninference from tables documented for\nreference\nfor report type 2 we are presenting the\nsame report in the dashboard format\nhovering over each chart will provide\ndetails about the data points in the\nbottom Sunburst chart you can click on\ndifferent numbers drill down into levels\nand get detailed information about each\nsegment\nCan You observe the difference in the\npresentation of the findings\nand what if we need to get the report on\nthe real-time data not the static data\nalso presenting the result using tables\nand documents is time consuming less\nvisually appealing and more difficult to\ncomprehend\na data scientist should be able to\ncreate and deliver a story around the\nfindings in a way stakeholders can\neasily understand\nwith that in mind dashboards are the way\nto go\nlet us take a look at web-based\ndashboarding tool options available in\nPython\nDash is a python framework for building\nweb analytic applications\nit is written on top of flask plotly JS\nand react.js\nDash is well suited for building data\nvisualization apps with highly custom\nuser interfaces\npanel works with visualizations from\nbokeh matplotlib Hollow views and many\nother python plotting libraries making\nthem instantly viewable either\nindividually or when combined with\ninteractive widgets that control them\npanel Works equally well in Jupiter\nnotebooks for creating quick data\nexploration tools panel can also be used\nin Standalone deployed apps and\ndashboards allowing you to easily switch\nbetween those contexts as needed\nvoila turns Jupiter notebooks into\nStandalone web applications\nit can be used with separate layout\ntools like Jupiter Flex or templates\nlike voila beautify\nstreamlit can easily turn data scripts\ninto shareable web apps with three main\napplications\nEmbrace python scripting treat widgets\nas variables and reuse data and\ncomputation\nthere are other tools that can be used\nfor dashboarding\nbokeh is a plotting Library a widget and\napp Library it acts as a server for both\nplots and dashboards panelists one of\nthe web-based dashboarding tools built\non bokeh ippy widgets provides an array\nof Jupiter compatible widgets and an\ninterface supported by many python\nlibraries but sharing a dashboard\nrequires a separate Deployable server\nlike voila\nmatplotlib is a comprehensive library\nfor creating static animated and\ninteractive visualizations in Python\nbowtie allows users to build dashboards\nin pure python\nflask is a python-backed web server that\ncan be used to build arbitrary websites\nincluding those with python plots that\nfunction as flask dashboards\nlearn more about the tools from The\nSource link\nin this course we will be focusing on\ndash\n[Music]\nforeign\nwe are going to provide an overview of\nthe plotly Python Library\nso what is plotly\nplotly is an interactive open source\nplotting library that supports over 40\nunique chart types\nit is available in Python R and\nJavaScript\nplotly python is built on top of plotly\nJavaScript library and includes chart\ntypes like statistical Financial Maps\nscientific and three-dimensional data\nthe web-based visualizations created\nusing plotly python can be displayed in\nJupiter notebook saved to Standalone\nHTML files\nor served as part of pure python built\nweb applications using Dash\nthe focus of this lesson will be on two\nof the plotly sub modules plotly graph\nobjects and plotly express\nplotly graph objects is the low level\ninterface to figures traces and layout\nthe plotly graph objects module provides\nan automatically generated hierarchy of\nclasses figures traces and layout called\ngraph objects\nthese graph objects are used for\nrepresenting figures with a top level\nclass plotly.graph underscore\nobjects.figure\nplotly expresses a high level wrapper\nfor plotly\nit is a recommended starting point for\ncreating most common figures provided by\nplotly using a more simple syntax it\nuses graph objects internally\nlet us see how to use plotly.graph\nunderscore objects submodule by creating\na simple line chart\nfirst import the required packages\nhere we are importing graph objects as\ngo\nthen generate sample data using numpy\nthe plotly.graph contains a Json object\nwhich has a dictionary structure\nsince we imported plotly graph objects\nas go in the previous slide go will be\nthe Json object\nthe chart can be plotted by updating the\nvalues of the go object keywords\nwe will create the figure by adding a\nscatter type Trace\nnext the layout of the figure is updated\nusing the update layout method\nhere we are updating the x-axis y-axis\nand chart title\nthis is the plotted figure now we will\ncreate the same line chart using plotly\nExpress in plotly express the entire\nline chart can be created using a single\ncommand visualization is automatically\ninteractive flotly Express makes\nvisualization easy to create and modify\nand now it's time to play with the\nplotly library next is going to be a lab\nsession\nwe will be using the airline reporting\ndatabase from data asset exchange to\ndemonstrate how to use plotly graph\nobjects and express for creating charts\nhere is a quick overview of the airline\nreporting data set\nthe reporting carrier on-time\nperformance data set contains\ninformation on approximately 200 million\ndomestic U.S flights reported to the\nUnited States Bureau of Transportation\nstatistics the data set contains basic\ninformation about each flight such as\ndate time departure Airport arrival\nairport and if applicable the amount of\ntime the flight was delayed and\ninformation about the reason for the\ndelay now let us start the lab\nforeign\n[Music]\nwe are going to see an overview of Dash\nLibrary Dash is an open source user\ninterface python library for creating\nreactive web-based applications\nit is Enterprise ready and a first-class\nmember of plotley's Open Source tools\nDash applications are web servers\nrunning flask and communicating Json\npackets over HTTP requests Dash's front\nend renders components using react.js\nit is easy to build a graphical user\ninterface using Dash as it abstracts all\nTechnologies required to build the\napplications\nDash's declarative and reactive Dash\noutput can be rendered in web browser\nand can be deployed to servers\nDash uses a simple reactive decorator\nfor binding code to the UI this is\ninherently mobile and cross-platform\nready\nlet us say you are planning to create an\napplication to answer a business\nquestion as a first step you need to\ndetermine the layout of the application\ndecide which chart to use and where to\nplace for example this is called layout\npart in dash the second part is to add\ninteractivity to the application\nthere are two components of Dash first\nis core components we can import core\ncomponents as DCC using the import\nstatement\nnext is HTML components\nwe can import HTML components as HTML\nusing this import statement\nlet us explore these further\nthe dash underscore HTML underscore\ncomponents library has a component for\nevery HTML tag you can compose your\nlayout using python structures with the\ndash dash\nhtml-components Library\nthe dash underscore HTML underscore\ncomponents Library also provides classes\nfor all of the HTML tags\nthe keyword arguments describe the HTML\nattributes like style class name and ID\nno knowledge of HTML or css is required\nbut can help in styling the dashboards\nlet us see an example of how to use HTML\ncomponents\nwe start by creating a dash application\nfrom here we create division in our\napplication layout and then add\ncomponents to it\nin the outer layer division we first\nprovide a name for our application using\nthe HTML heading component H1\nthe style parameter is used to change\nthe font color size and border of the\nheading next we will add paragraph\ncontent to the page using an HTML\nparagraph component p\ndivision can be created inside the outer\ndivision\nhere we are providing division content\nas this is a new Division and styling it\nusing style parameter components\nto put all this together in the\napplication layout create an HTML\nDivision and add components\nmultiple divisions can be added to the\nouter application layout the dash\nunderscore core underscore components\ndescribe higher level components that\nare interactive and generated with\nJavaScript HTML and CSS through the\nreact.js library some examples of core\ncomponents are creating a slider input\narea check items and date picker you can\nexplore other components using the\nreference link provided at the end of\nthe slide\nnow let us see how to add a slicer and\ndrop down to the application\nfor the drop down we use the DCC dot\ndrop down component\nwe will create a drop down list under\nthe options parameter as a dictionary\nlabel will hold the drop down display\nlabel name and value will hold the value\nof the label we can also provide a\ndefault drop down display label using\nvalue parameter for the slider we use\nthe dcc.slider component and provide Min\nand max value to the slider\nthe marks parameter is used for adding a\nslide marker and value parameter for\nadding default value\n[Music]\nin this video we will see how to connect\ncore and HTML components using callbacks\na callback is a python function that is\nautomatically called by Dash whenever an\ninput component's property changes\ncallback function is decorated with at\napp.callbackdecorator\nso what does this decorator tell Dash\nbasically Whenever there is a change in\nthe input component value the Callback\nfunction wrapped by The Decorator is\ncalled followed by the update to the\noutput component children in the\napplication layout\nlet us look at the Callback function\nskeleton first create a function that\nwill perform operations to return the\ndesired result for the output component\ndecorate the Callback function with at\napp.callback decorator this takes two\nparameters output this sets the result\nreturned from the Callback function to a\ncomponent ID and input this sets the\ninput provided to the Callback function\nto a component ID from here we will\nconnect the input and output to desired\nproperties we will see this in action\nwith an example using the airline data\nthe use case here is to extract the top\n10 Airline carriers in the provided\ninput year selected by the number of\nflights based on the input year the\noutput will change\nfirst we import the required packages as\nseen before we will import pandas dash\ndash core and HTML components the new\nentry here has Dash dependencies from\nDash dependencies we will import input\nand output that we will use in the\nCallback function we read the airline\ndata into the pandas data frame we load\nour data frame at the start of the app\nand it can be read inside the Callback\nfunction\nwe will start designing the dash\napplication layout by adding components\nfirst we will provide the title to the\nDash app using the HTML heading\ncomponent H1 and style it using the\nstyle parameter next we will add an HTML\nDivision and text input core component\nin dash the inputs and outputs of the\napplication are simply the properties of\na particular component in this example\nour input is the value property of the\ncomponent that has the ID input Dash\nyear by default the value has 2010. we\nwill update this value in our callback\nfunction lastly we will add a division\nwith a graph core component the core\ncomponent has bar Dash plot as ID which\nwe will update inside the Callback\nfunction note the component IDs we will\nadd a callback decorator app.callback\ninput to the Callback will be the\ncomponent with ID input Dash year and\nproperty value output to the Callback\nwill be the component with ID bar Dash\nplot and property figure component\nunderscore ID and component underscore\nproperty keywords are optional and are\nincluded here for clarity next we will\nDefine the Callback function get\nunderscore graph the entered year will\nbe the input using the year we extracted\nthe required information from data\nfinally the application layout graph is\nupdated and lastly we will run the\napplication\nthis is the output of the code our\ninitial input year is 2010. note that as\nwe update the year the graph is updated\nfor that year\nsecond example is a callback with two\ninputs it is similar to the one input\ncallback except for a few changes\nwe will add a division with one more\ntext input with the component ID input\nDash a b\nnow we will add the new input and\ncomponent ID input Dash a b to The\nDecorator inside the list next we will\nDefine callback function get underscore\ngraph this takes the entered year and\nthe entered State as input parameters\ncomputation is performed to extract the\ninformation and the application layout\nis updated with the graph\nthis is the output of the code our\ninitial input year is 2010 and state is\nAl which is Alabama as I updated the\nyear and state you can observe that the\ngraph is updated in parallel\nnow let us start the lab\n[Music]\ncongratulations on making it this far\nsuccessfully completing this Capstone\nproject will earn you the data analyst\nprofessional certificate\nthis Capstone provides you a practical\nhands-on experience to demonstrate all\nof the skills you have picked up so far\nin this professional certificate program\nas part of the Capstone project you will\ntake on the role of a data analyst with\na global I.T and business services firm\nin this role you will be analyzing\nseveral data sets to help identify\ntrends for emerging Technologies\nin module 1 you will collect data for\nthe technology skills that are in demand\nfrom various sources including job\npostings blog posts and surveys\nin module 2 you will take the collected\ndata and prepare it for analysis by\nusing data wrangling techniques like\nfinding duplicates removing duplicates\nfinding missing values and inputting\nmissing values you'll continue to module\n3 and apply statistical techniques to\nanalyze the data and identify insights\nand trends like what are the top\nprogramming languages that are in demand\nwhat are the top database skills that\nare in demand\nwhat are the most popular Ides\nand demographic data like gender and age\ndistribution of Developers\nin module 4 you'll focus on choosing an\nappropriate visualization based on the\ndata you want to present using charts\nplots and histograms to help Reveal Your\nfindings and trends\nin module 5 you will employ cognos to\ncreate interactive dashboards to help\nyou analyze and present the data\ndynamically\nand in the final module you will use\nyour storytelling skills to provide a\nnarrative and present the findings of\nyour analysis you will be provided with\na presentation template to begin the\nprocess and to help you create a\ncompelling story and present your\nfindings\neach module includes a short quiz to\ntest your knowledge you will be\nevaluated based on the quizzes in each\nmodule the dashboard and the\nstorytelling presentation you create\nwill be reviewed and graded by your\npeers\nto begin I recommend taking a few\nminutes to explore the course site\nreview the material we'll cover each\nweek and preview the assignments you'll\nneed to complete to pass the course\nclick discussions to see forums where\nyou can discuss the course material with\nfellow Learners and course team\nif you have questions about course\ncontent\nplease post them in the forums to get\nhelp from others in the course community\nfor technical problems with the Coursera\nplatform visit the learner help center\nwe are excited to have you join us and\nhope you enjoy the course\ngood luck and let's get started\n[Music]\nwhile finding and cleaning data is an\nimportant first step in data analysis a\nconcept can be lost if you are not able\nto organize and represent the findings\neffectively to your audience in this\nvideo you will learn how to represent\nyour findings by focusing on specific\nelements to create a successful data\nfindings report after the data has been\ncollected cleaned and organized the work\nof interpretation begins you are now\nable to obtain a complete view of the\ndata and hopefully answer the questions\nthat were formed before starting the\nanalysis now you typically begin to\ncompose a findings report that explains\nwhat was learned depending on the\nstakeholders and how they receive the\ninformation the report could vary in\nform this could include a paper style\nreport a slideshow presentation or maybe\neven both the findings report is a\ncrucial part of data analysis as it\nconveys what was discovered when\nbeginning this process the collected\ndata and information may seem a little\nlittle overwhelming the best way to get\nthrough this block is to begin by\ncreating an outline by completing an\noutline you can then get a complete\npicture and begin to write in a precise\nbut simple manner while there are many\ndifferent formats for creating a\ndata-driven presentation we have created\na simple outline that is easy to follow\nyet effective when creating your outline\nalways remember to structure it towards\nyour audience and create a presentation\nthat is appropriate for your situation\nyou first begin with your cover page\nthis beginning section will have the\ntitle of your presentation your name and\nthen the date the next section in your\noutline will be an executive summary and\nthen the table of contents the table of\ncontents will contain the sections and\nsubsections of your report in order to\ngive your audience an overview of the\ncontents this also enables readers to go\ndirectly to a specific section that may\nbe more important to them continue your\npresentation with the introduction\nmethodology result discussion conclusion\nand finally the appendix note that the\ndepth and length for each element may\nvary depending on the audience and\nformat of report\nthe first step in creating your report\nis properly creating an executive\nsummary this summary will briefly\nexplain the details of the project and\nshould be considered a stand-alone\ndocument this information is taken from\nthe main points of your report and while\nit is acceptable to repeat information\nno new information is presented the next\nsection after the table of contents is\nthe introduction the introduction\nexplains the nature of the analysis\nStates the problem and gives the\nquestions that were to be answered by\nperforming the analysis the next section\nis methodology methodology explains the\ndata sources that were used in the\nanalysis and outlines the plan for the\ncollected data for example was the\ncluster or regression method used to\nanalyze the data next we have the\nresults section this section goes into\nthe detail of the data collection how it\nwas organized and how it was analyzed\nthis portion would also contain the\ncharts and graphs that would\nsubstantiate the results and call\nattention to more complex or crucial\nfindings by providing this\ninterpretation of data you are able to\ngive a detailed explanation to the\naudience and convey how it relates to\nthe problem that was stated in the\nintroduction next discuss the report\nfindings and implications for this\nsection you would engage the audience\nwith a discussion of your implications\nthat were drawn from the research for\nexample let's say you were conducting\nresearch for top programming languages\nfor college graduates would you find\nthey need to learn multiple languages to\nremain competitive in the job market or\nwould one language always reign supreme\nwe have now reached the conclusion of\nthe report findings this final section\nshould reiterate the problem given in\nthe introduction and gives an overall\nsummary of the findings it would also\nState the outcome of the analysis and if\nany other steps would be taken in the\nfuture and last we have the appendix\nthis section would contain information\nthat really didn't fit in the main body\nof the report but you deemed it was\nstill important enough to include this\ntype of information could include\nlocations where the raw data was\ncollected or other details such as\nresources acknowledgments or references\nin this video we learned about the\nimportant elements in creating a\nsuccessful data findings report in the\nnext video we will learn the best\npractices when presenting your findings\n[Music]\nthank you okay you've spent weeks maybe\nmonths studying the data and the time\nhas come to report your findings the\nquestions have been answered and you\nfeel good about the story so how will\nyou speak to your audience so they leave\nwith the intended message in this video\nlearn how to present your findings in a\nway that will engage and keep the\nattention of your audience delivering\ndata-driven presentations may seem easy\nbut there are a few important factors to\nremember in accurately conveying your\nmessage make sure charts and graphs are\nnot too small and are clearly labeled\nuse the data only as supporting evidence\nshare only one point from each chart or\ngraph and eliminate data that does not\nsupport the key message\nhave you ever sat through a presentation\nand the information being presented was\ndifficult to read or understand while\nthis may seem apparent small charts and\nlabels can be easily overlooked make\nsure to test the visualizations by\nsitting at different distances like your\naudience and if the data cannot be seen\nclearly then maybe a redesign should be\nconsidered when preparing the report you\nmay feel the only way to explain the\nfindings is to pack the slides with data\nwhile this may seem sensible as a data\nanalyst your audience will probably not\nappreciate the intricacies of the data\nand just see a pile of numbers to\nresolve this issue Begin by forming the\nkey messages that need to be conveyed to\nthe audience and build the story around\nthese messages after forming the outline\ngo back and insert the data to support\nyour findings by not relying heavily on\nthe data and using this method to create\nthe presentation you will create a story\nthat is engaging and interesting to your\naudience\npresenting your data using charts and\ngraphs is the best way to get your\nmessage across however if you are\nsupplying too much information it can be\nconfusing for example look at this pie\nchart can you decipher what the key\nmessage is and what the presenter is\ntrying to convey in the example the\nchart has so much information it is hard\nto determine what point the presenter is\ntrying to make and what the focus should\nbe for the Audience by sticking with one\nidea and not summarizing multiple points\ninto one visualization you are able to\naccurately convey the idea to the\naudience and avoid any confusion data\nanalysts can spend months researching\ndata however some items that seem\ninteresting to the analyst may not be\nrelevant to the project trying to\nexplain every little detail to your\naudience and not recognizing irrelevant\ndata could damage the key message by\neliminating this unnecessary data and\nhighlighting only data points that\nsupport your key ideas you will keep the\npresentation clear and concise in this\nvideo we learned about creating a\ndata-driven presentation that will keep\nyour audience engaged and how to deliver\na clear and concise message\n[Music]\n",
  "words": [
    "thank",
    "welcome",
    "introductory",
    "course",
    "data",
    "analytics",
    "first",
    "series",
    "courses",
    "designed",
    "prepare",
    "career",
    "junior",
    "data",
    "analyst",
    "quote",
    "forester",
    "consulting",
    "report",
    "power",
    "data",
    "transform",
    "business",
    "businesses",
    "today",
    "recognize",
    "untapped",
    "value",
    "data",
    "data",
    "analytics",
    "crucial",
    "factor",
    "business",
    "competitiveness",
    "drive",
    "data",
    "analytics",
    "initiatives",
    "companies",
    "hiring",
    "upskilling",
    "people",
    "expanding",
    "teams",
    "creating",
    "centers",
    "excellence",
    "set",
    "data",
    "analytics",
    "practice",
    "organizations",
    "combined",
    "significant",
    "supply",
    "demand",
    "mismatch",
    "skilled",
    "data",
    "analysts",
    "making",
    "highly",
    "sought",
    "profession",
    "choose",
    "master",
    "data",
    "analytics",
    "career",
    "path",
    "leverage",
    "stepping",
    "stone",
    "branch",
    "data",
    "professions",
    "data",
    "science",
    "data",
    "engineering",
    "business",
    "analytics",
    "business",
    "intelligence",
    "analytics",
    "course",
    "fresh",
    "graduate",
    "stream",
    "working",
    "professional",
    "considering",
    "transition",
    "decision",
    "maker",
    "analytics",
    "enabled",
    "role",
    "course",
    "introduces",
    "core",
    "concepts",
    "processes",
    "tools",
    "need",
    "gain",
    "entry",
    "data",
    "analytics",
    "even",
    "strengthen",
    "current",
    "role",
    "decision",
    "maker",
    "equip",
    "understanding",
    "data",
    "ecosystem",
    "fundamentals",
    "data",
    "analysis",
    "data",
    "gathering",
    "wrangling",
    "mining",
    "analysis",
    "data",
    "visualization",
    "also",
    "get",
    "feel",
    "day",
    "life",
    "data",
    "analyst",
    "practicing",
    "data",
    "analysts",
    "share",
    "experience",
    "gaining",
    "entry",
    "field",
    "career",
    "options",
    "learning",
    "paths",
    "consider",
    "employers",
    "look",
    "data",
    "analyst",
    "also",
    "share",
    "knowledge",
    "best",
    "practices",
    "aspects",
    "data",
    "analysis",
    "process",
    "lies",
    "ahead",
    "truly",
    "exciting",
    "field",
    "data",
    "analyst",
    "congratulations",
    "choosing",
    "journey",
    "good",
    "luck",
    "foreign",
    "music",
    "quote",
    "forbes",
    "2020",
    "report",
    "data",
    "coming",
    "decade",
    "constant",
    "increase",
    "data",
    "processing",
    "speeds",
    "bandwidth",
    "invention",
    "new",
    "tools",
    "creating",
    "sharing",
    "consuming",
    "data",
    "steady",
    "addition",
    "new",
    "data",
    "creators",
    "consumers",
    "around",
    "world",
    "ensure",
    "data",
    "growth",
    "continues",
    "unabated",
    "data",
    "begets",
    "data",
    "constant",
    "virtuous",
    "cycle",
    "modern",
    "data",
    "ecosystem",
    "includes",
    "whole",
    "network",
    "interconnected",
    "independent",
    "continually",
    "evolving",
    "entities",
    "includes",
    "data",
    "integrated",
    "disparate",
    "sources",
    "different",
    "types",
    "analysis",
    "skills",
    "generate",
    "insights",
    "active",
    "stakeholders",
    "collaborate",
    "act",
    "insights",
    "generated",
    "tools",
    "applications",
    "infrastructure",
    "store",
    "process",
    "disseminate",
    "data",
    "required",
    "let",
    "start",
    "data",
    "sources",
    "data",
    "available",
    "variety",
    "structured",
    "unstructured",
    "data",
    "sets",
    "residing",
    "text",
    "images",
    "videos",
    "click",
    "streams",
    "user",
    "conversations",
    "social",
    "media",
    "platforms",
    "internet",
    "things",
    "iot",
    "devices",
    "events",
    "stream",
    "data",
    "legacy",
    "databases",
    "data",
    "sourced",
    "professional",
    "data",
    "providers",
    "agencies",
    "sources",
    "never",
    "diverse",
    "dynamic",
    "working",
    "many",
    "different",
    "sources",
    "data",
    "first",
    "step",
    "pull",
    "copy",
    "data",
    "original",
    "sources",
    "data",
    "repository",
    "stage",
    "looking",
    "acquiring",
    "data",
    "need",
    "working",
    "data",
    "formats",
    "sources",
    "interfaces",
    "data",
    "pulled",
    "reliability",
    "security",
    "integrity",
    "data",
    "acquired",
    "challenges",
    "work",
    "stage",
    "raw",
    "data",
    "common",
    "place",
    "needs",
    "get",
    "organized",
    "cleaned",
    "optimized",
    "access",
    "end",
    "users",
    "data",
    "also",
    "need",
    "conform",
    "compliances",
    "standards",
    "enforced",
    "organization",
    "example",
    "conforming",
    "guidelines",
    "regulate",
    "storage",
    "use",
    "personal",
    "data",
    "health",
    "biometrics",
    "household",
    "data",
    "case",
    "iot",
    "devices",
    "adhering",
    "master",
    "data",
    "tables",
    "within",
    "organization",
    "ensure",
    "standardization",
    "master",
    "data",
    "across",
    "applications",
    "systems",
    "organization",
    "another",
    "example",
    "key",
    "challenges",
    "stage",
    "could",
    "involve",
    "data",
    "management",
    "working",
    "data",
    "repositories",
    "provide",
    "high",
    "availability",
    "flexibility",
    "accessibility",
    "security",
    "finally",
    "business",
    "stakeholders",
    "applications",
    "programmers",
    "analysts",
    "data",
    "science",
    "use",
    "cases",
    "pulling",
    "data",
    "enterprise",
    "data",
    "repository",
    "key",
    "challenges",
    "stage",
    "could",
    "include",
    "interfaces",
    "apis",
    "applications",
    "get",
    "data",
    "end",
    "users",
    "line",
    "specific",
    "needs",
    "example",
    "data",
    "analysts",
    "may",
    "need",
    "raw",
    "data",
    "work",
    "business",
    "stakeholders",
    "may",
    "need",
    "reports",
    "dashboards",
    "applications",
    "may",
    "need",
    "custom",
    "apis",
    "pull",
    "data",
    "important",
    "note",
    "influence",
    "new",
    "emerging",
    "technologies",
    "shaping",
    "today",
    "data",
    "ecosystem",
    "possibilities",
    "example",
    "cloud",
    "computing",
    "machine",
    "learning",
    "big",
    "data",
    "name",
    "thanks",
    "cloud",
    "technologies",
    "every",
    "enterprise",
    "today",
    "access",
    "limitless",
    "storage",
    "high",
    "performance",
    "computing",
    "open",
    "source",
    "technologies",
    "machine",
    "learning",
    "technologies",
    "latest",
    "tools",
    "libraries",
    "data",
    "scientists",
    "creating",
    "predictive",
    "models",
    "training",
    "machine",
    "learning",
    "algorithms",
    "past",
    "data",
    "also",
    "big",
    "data",
    "today",
    "dealing",
    "data",
    "sets",
    "massive",
    "varied",
    "traditional",
    "tools",
    "analysis",
    "methods",
    "longer",
    "adequate",
    "paving",
    "way",
    "new",
    "tools",
    "techniques",
    "also",
    "new",
    "knowledge",
    "insights",
    "learn",
    "big",
    "data",
    "influence",
    "shaping",
    "business",
    "decisions",
    "along",
    "course",
    "music",
    "today",
    "organizations",
    "using",
    "data",
    "uncover",
    "opportunities",
    "applying",
    "knowledge",
    "differentiate",
    "ones",
    "leading",
    "future",
    "whether",
    "looking",
    "patterns",
    "financial",
    "transactions",
    "detect",
    "fraud",
    "using",
    "recommendation",
    "engines",
    "drive",
    "conversion",
    "mining",
    "social",
    "media",
    "posts",
    "customer",
    "voice",
    "brands",
    "personalizing",
    "offers",
    "based",
    "customer",
    "behavior",
    "analysis",
    "business",
    "leaders",
    "realize",
    "data",
    "holds",
    "key",
    "competitive",
    "advantage",
    "get",
    "value",
    "data",
    "need",
    "vast",
    "number",
    "skill",
    "sets",
    "people",
    "playing",
    "different",
    "roles",
    "video",
    "going",
    "look",
    "role",
    "data",
    "engineers",
    "data",
    "analysts",
    "data",
    "scientists",
    "business",
    "analysts",
    "business",
    "intelligence",
    "bi",
    "analysts",
    "play",
    "helping",
    "organizations",
    "tap",
    "vast",
    "amounts",
    "data",
    "turn",
    "actionable",
    "insights",
    "starts",
    "data",
    "engineer",
    "data",
    "engineers",
    "people",
    "develop",
    "maintain",
    "data",
    "architectures",
    "make",
    "data",
    "available",
    "business",
    "operations",
    "analysis",
    "data",
    "engineers",
    "work",
    "within",
    "data",
    "ecosystem",
    "extract",
    "integrate",
    "organize",
    "data",
    "disparate",
    "sources",
    "clean",
    "transform",
    "prepare",
    "data",
    "design",
    "store",
    "manage",
    "data",
    "data",
    "repositories",
    "enable",
    "data",
    "accessible",
    "formats",
    "systems",
    "various",
    "business",
    "applications",
    "well",
    "stakeholders",
    "like",
    "data",
    "analysts",
    "data",
    "scientists",
    "utilize",
    "data",
    "engineer",
    "must",
    "good",
    "knowledge",
    "programming",
    "sound",
    "knowledge",
    "systems",
    "technology",
    "architectures",
    "understanding",
    "relational",
    "databases",
    "data",
    "stores",
    "let",
    "look",
    "role",
    "data",
    "analyst",
    "short",
    "data",
    "analyst",
    "translates",
    "data",
    "numbers",
    "plain",
    "language",
    "organizations",
    "make",
    "decisions",
    "data",
    "analysts",
    "inspect",
    "clean",
    "data",
    "deriving",
    "insights",
    "identify",
    "correlations",
    "find",
    "patterns",
    "apply",
    "statistical",
    "methods",
    "analyze",
    "mine",
    "data",
    "visualize",
    "data",
    "interpret",
    "present",
    "findings",
    "data",
    "analysis",
    "analysts",
    "people",
    "answer",
    "questions",
    "users",
    "search",
    "experiences",
    "generally",
    "good",
    "bad",
    "search",
    "functionality",
    "site",
    "popular",
    "perception",
    "people",
    "regarding",
    "rebranding",
    "initiatives",
    "correlation",
    "sales",
    "one",
    "product",
    "another",
    "data",
    "analysts",
    "require",
    "good",
    "knowledge",
    "spreadsheets",
    "writing",
    "queries",
    "using",
    "statistical",
    "tools",
    "create",
    "charts",
    "dashboards",
    "modern",
    "data",
    "analysts",
    "also",
    "need",
    "programming",
    "skills",
    "also",
    "need",
    "strong",
    "analytical",
    "storytelling",
    "skills",
    "let",
    "look",
    "role",
    "data",
    "scientists",
    "play",
    "ecosystem",
    "data",
    "scientists",
    "analyze",
    "data",
    "actionable",
    "insights",
    "build",
    "machine",
    "learning",
    "deep",
    "learning",
    "models",
    "train",
    "past",
    "data",
    "create",
    "predictive",
    "models",
    "data",
    "scientists",
    "people",
    "answer",
    "questions",
    "many",
    "new",
    "social",
    "media",
    "followers",
    "likely",
    "get",
    "next",
    "month",
    "percentage",
    "customers",
    "likely",
    "lose",
    "competition",
    "next",
    "quarter",
    "financial",
    "transaction",
    "unusual",
    "customer",
    "data",
    "scientists",
    "require",
    "knowledge",
    "mathematics",
    "statistics",
    "fair",
    "understanding",
    "programming",
    "languages",
    "databases",
    "building",
    "data",
    "models",
    "also",
    "need",
    "domain",
    "knowledge",
    "also",
    "business",
    "analysts",
    "bi",
    "analysts",
    "business",
    "analysts",
    "leverage",
    "work",
    "data",
    "analysts",
    "data",
    "scientists",
    "look",
    "possible",
    "implications",
    "business",
    "actions",
    "need",
    "take",
    "recommend",
    "bi",
    "analysts",
    "except",
    "focus",
    "market",
    "forces",
    "external",
    "influences",
    "shape",
    "business",
    "provide",
    "business",
    "intelligence",
    "solutions",
    "organizing",
    "monitoring",
    "data",
    "different",
    "business",
    "functions",
    "exploring",
    "data",
    "extract",
    "insights",
    "actionables",
    "improve",
    "business",
    "performance",
    "summarize",
    "simple",
    "terms",
    "data",
    "engineering",
    "converts",
    "raw",
    "data",
    "usable",
    "data",
    "data",
    "analytics",
    "uses",
    "data",
    "generate",
    "insights",
    "data",
    "scientists",
    "use",
    "data",
    "analytics",
    "data",
    "engineering",
    "predict",
    "future",
    "using",
    "data",
    "past",
    "business",
    "analysts",
    "business",
    "intelligence",
    "analysts",
    "use",
    "insights",
    "predictions",
    "drive",
    "decisions",
    "benefit",
    "grow",
    "business",
    "interestingly",
    "uncommon",
    "data",
    "professionals",
    "start",
    "career",
    "one",
    "data",
    "roles",
    "transition",
    "another",
    "role",
    "within",
    "data",
    "ecosystem",
    "supplementing",
    "skills",
    "data",
    "analysis",
    "process",
    "gathering",
    "cleaning",
    "analyzing",
    "mining",
    "data",
    "interpreting",
    "results",
    "reporting",
    "findings",
    "data",
    "analysis",
    "find",
    "patterns",
    "within",
    "data",
    "correlations",
    "different",
    "data",
    "points",
    "patterns",
    "correlations",
    "insights",
    "generated",
    "conclusions",
    "drawn",
    "data",
    "analysis",
    "helps",
    "businesses",
    "understand",
    "past",
    "performance",
    "informs",
    "decision",
    "making",
    "future",
    "actions",
    "using",
    "data",
    "analysis",
    "businesses",
    "validate",
    "course",
    "action",
    "committing",
    "saving",
    "valuable",
    "time",
    "resources",
    "also",
    "ensuring",
    "greater",
    "success",
    "explore",
    "four",
    "primary",
    "types",
    "data",
    "analysis",
    "different",
    "goal",
    "place",
    "data",
    "analysis",
    "process",
    "descriptive",
    "analytics",
    "helps",
    "answer",
    "questions",
    "happened",
    "given",
    "period",
    "time",
    "summarizing",
    "past",
    "data",
    "presenting",
    "findings",
    "stakeholders",
    "helps",
    "provide",
    "essential",
    "insights",
    "past",
    "events",
    "example",
    "tracking",
    "past",
    "performance",
    "based",
    "organization",
    "key",
    "performance",
    "indicators",
    "cash",
    "flow",
    "analysis",
    "diagnostic",
    "analytics",
    "helps",
    "answer",
    "question",
    "happen",
    "takes",
    "insights",
    "descriptive",
    "analytics",
    "dig",
    "deeper",
    "find",
    "cause",
    "outcome",
    "example",
    "sudden",
    "change",
    "traffic",
    "website",
    "without",
    "obvious",
    "cause",
    "increase",
    "sales",
    "region",
    "change",
    "marketing",
    "predictive",
    "analytics",
    "helps",
    "answer",
    "question",
    "happen",
    "next",
    "historical",
    "data",
    "trends",
    "used",
    "predict",
    "future",
    "outcomes",
    "areas",
    "businesses",
    "apply",
    "predictive",
    "analysis",
    "risk",
    "assessment",
    "sales",
    "forecasts",
    "important",
    "note",
    "purpose",
    "predictive",
    "analytics",
    "say",
    "happen",
    "future",
    "objective",
    "forecast",
    "might",
    "happen",
    "future",
    "predictions",
    "probabilistic",
    "nature",
    "prescriptive",
    "analytics",
    "helps",
    "answer",
    "question",
    "done",
    "analyzing",
    "past",
    "decisions",
    "events",
    "likelihood",
    "different",
    "outcomes",
    "estimated",
    "basis",
    "course",
    "action",
    "decided",
    "cars",
    "good",
    "example",
    "prescriptive",
    "analytics",
    "analyze",
    "environment",
    "make",
    "decisions",
    "regarding",
    "speed",
    "changing",
    "lanes",
    "route",
    "take",
    "etc",
    "airlines",
    "automatically",
    "adjusting",
    "ticket",
    "prices",
    "based",
    "customer",
    "demand",
    "gas",
    "prices",
    "weather",
    "traffic",
    "connecting",
    "routes",
    "let",
    "look",
    "key",
    "steps",
    "data",
    "analysis",
    "process",
    "understanding",
    "problem",
    "desired",
    "result",
    "data",
    "analysis",
    "begins",
    "understanding",
    "problem",
    "needs",
    "solved",
    "desired",
    "outcome",
    "needs",
    "achieved",
    "want",
    "needs",
    "clearly",
    "defined",
    "analysis",
    "process",
    "begin",
    "setting",
    "clear",
    "metric",
    "stage",
    "process",
    "includes",
    "deciding",
    "measured",
    "example",
    "number",
    "product",
    "x",
    "sold",
    "region",
    "measured",
    "example",
    "quarter",
    "festival",
    "season",
    "gathering",
    "data",
    "know",
    "going",
    "measure",
    "going",
    "measure",
    "identify",
    "data",
    "require",
    "data",
    "sources",
    "need",
    "pull",
    "data",
    "best",
    "tools",
    "job",
    "cleaning",
    "data",
    "gathered",
    "data",
    "next",
    "step",
    "fix",
    "quality",
    "issues",
    "data",
    "could",
    "affect",
    "accuracy",
    "analysis",
    "critical",
    "step",
    "accuracy",
    "analysis",
    "ensured",
    "data",
    "clean",
    "clean",
    "data",
    "missing",
    "incomplete",
    "values",
    "outliers",
    "example",
    "customer",
    "demographics",
    "data",
    "age",
    "field",
    "value",
    "150",
    "outlier",
    "also",
    "standardize",
    "data",
    "coming",
    "multiple",
    "sources",
    "analyzing",
    "mining",
    "data",
    "data",
    "clean",
    "extract",
    "analyze",
    "data",
    "different",
    "perspectives",
    "may",
    "need",
    "manipulate",
    "data",
    "several",
    "different",
    "ways",
    "understand",
    "trends",
    "identify",
    "correlations",
    "find",
    "patterns",
    "variations",
    "interpreting",
    "results",
    "analyzing",
    "data",
    "possibly",
    "conducting",
    "research",
    "iterative",
    "loop",
    "time",
    "interpret",
    "results",
    "interpret",
    "results",
    "need",
    "evaluate",
    "analysis",
    "defendable",
    "objections",
    "limitations",
    "circumstances",
    "analysis",
    "may",
    "hold",
    "true",
    "presenting",
    "findings",
    "ultimately",
    "goal",
    "analysis",
    "impact",
    "decision",
    "making",
    "ability",
    "communicate",
    "present",
    "findings",
    "clear",
    "impactful",
    "ways",
    "important",
    "part",
    "data",
    "analysis",
    "process",
    "analysis",
    "reports",
    "dashboards",
    "charts",
    "graphs",
    "maps",
    "case",
    "studies",
    "ways",
    "present",
    "data",
    "thank",
    "thank",
    "video",
    "listen",
    "several",
    "data",
    "professionals",
    "talk",
    "define",
    "data",
    "analytics",
    "term",
    "means",
    "define",
    "data",
    "analytics",
    "process",
    "collecting",
    "information",
    "analyzing",
    "information",
    "confirm",
    "various",
    "hypotheses",
    "data",
    "analytics",
    "also",
    "means",
    "storytelling",
    "data",
    "using",
    "data",
    "clearly",
    "concisely",
    "convey",
    "state",
    "world",
    "people",
    "around",
    "data",
    "analysis",
    "use",
    "information",
    "around",
    "make",
    "decisions",
    "like",
    "get",
    "every",
    "morning",
    "watch",
    "news",
    "weather",
    "report",
    "tell",
    "temperature",
    "day",
    "whether",
    "going",
    "rain",
    "may",
    "dictate",
    "going",
    "wear",
    "activities",
    "data",
    "analysis",
    "abstract",
    "concept",
    "something",
    "naturally",
    "technical",
    "name",
    "people",
    "paid",
    "much",
    "larger",
    "larger",
    "grander",
    "experience",
    "really",
    "complicated",
    "way",
    "put",
    "got",
    "problem",
    "need",
    "use",
    "facts",
    "test",
    "hypothesis",
    "data",
    "analytics",
    "comes",
    "play",
    "process",
    "starts",
    "defining",
    "problem",
    "need",
    "create",
    "hypothesis",
    "test",
    "need",
    "collect",
    "data",
    "clean",
    "data",
    "analyze",
    "data",
    "present",
    "key",
    "stakeholders",
    "data",
    "analytics",
    "really",
    "sense",
    "data",
    "use",
    "review",
    "information",
    "anything",
    "going",
    "help",
    "understand",
    "going",
    "case",
    "cpa",
    "always",
    "looking",
    "financial",
    "statements",
    "always",
    "analyzing",
    "data",
    "predict",
    "someone",
    "right",
    "headed",
    "data",
    "helps",
    "see",
    "almost",
    "predict",
    "future",
    "company",
    "working",
    "data",
    "analytics",
    "collecting",
    "cleansing",
    "analyzing",
    "presenting",
    "ultimately",
    "sharing",
    "data",
    "analysis",
    "able",
    "help",
    "communicate",
    "exactly",
    "going",
    "business",
    "going",
    "data",
    "help",
    "make",
    "better",
    "decisions",
    "would",
    "define",
    "data",
    "analytics",
    "process",
    "better",
    "yet",
    "phenomenon",
    "taking",
    "information",
    "gathered",
    "relevant",
    "population",
    "maybe",
    "customers",
    "social",
    "audience",
    "breaking",
    "information",
    "subsets",
    "using",
    "data",
    "make",
    "decisions",
    "products",
    "services",
    "want",
    "offer",
    "cases",
    "digital",
    "environment",
    "making",
    "decisions",
    "certain",
    "pieces",
    "content",
    "want",
    "publish",
    "appeals",
    "target",
    "audience",
    "foreign",
    "music",
    "role",
    "data",
    "analyst",
    "varies",
    "depending",
    "type",
    "organization",
    "extent",
    "adopted",
    "practices",
    "responsibilities",
    "typical",
    "data",
    "analyst",
    "role",
    "today",
    "organizations",
    "include",
    "acquiring",
    "data",
    "primary",
    "secondary",
    "data",
    "sources",
    "creating",
    "queries",
    "extract",
    "required",
    "data",
    "databases",
    "data",
    "collection",
    "systems",
    "filtering",
    "cleaning",
    "standardizing",
    "reorganizing",
    "data",
    "preparation",
    "data",
    "analysis",
    "using",
    "statistical",
    "tools",
    "interpret",
    "data",
    "sets",
    "using",
    "statistical",
    "techniques",
    "identify",
    "patterns",
    "correlations",
    "data",
    "analyzing",
    "patterns",
    "complex",
    "data",
    "sets",
    "interpreting",
    "trends",
    "preparing",
    "reports",
    "charts",
    "effectively",
    "communicate",
    "trends",
    "patterns",
    "creating",
    "appropriate",
    "documentation",
    "define",
    "demonstrate",
    "steps",
    "data",
    "analysis",
    "process",
    "corresponding",
    "responsibilities",
    "let",
    "look",
    "skills",
    "valuable",
    "data",
    "analyst",
    "data",
    "analysis",
    "process",
    "requires",
    "combination",
    "technical",
    "functional",
    "soft",
    "skills",
    "let",
    "first",
    "look",
    "technical",
    "skills",
    "need",
    "role",
    "data",
    "analyst",
    "include",
    "expertise",
    "using",
    "spreadsheets",
    "microsoft",
    "excel",
    "google",
    "sheets",
    "proficiency",
    "statistical",
    "analysis",
    "visualization",
    "tools",
    "software",
    "ibm",
    "cognos",
    "ibm",
    "spss",
    "oracle",
    "visual",
    "analyzer",
    "microsoft",
    "power",
    "bi",
    "sas",
    "tableau",
    "proficiency",
    "least",
    "one",
    "programming",
    "languages",
    "r",
    "python",
    "cases",
    "c",
    "plus",
    "plus",
    "java",
    "matlab",
    "good",
    "knowledge",
    "sql",
    "ability",
    "work",
    "data",
    "relational",
    "sql",
    "databases",
    "ability",
    "access",
    "extract",
    "data",
    "data",
    "repositories",
    "data",
    "marts",
    "data",
    "warehouses",
    "data",
    "lakes",
    "data",
    "pipelines",
    "familiarity",
    "big",
    "data",
    "processing",
    "tools",
    "hadoop",
    "hive",
    "spark",
    "understand",
    "features",
    "use",
    "cases",
    "programming",
    "languages",
    "databases",
    "data",
    "repositories",
    "big",
    "data",
    "processing",
    "tools",
    "along",
    "course",
    "let",
    "look",
    "functional",
    "skills",
    "require",
    "role",
    "data",
    "analysts",
    "include",
    "proficiency",
    "statistics",
    "help",
    "analyze",
    "data",
    "validate",
    "analysis",
    "identify",
    "fallacies",
    "logical",
    "errors",
    "analytical",
    "skills",
    "help",
    "research",
    "interpret",
    "data",
    "theorize",
    "make",
    "forecasts",
    "problem",
    "solving",
    "skills",
    "ultimately",
    "end",
    "goal",
    "data",
    "analysis",
    "solve",
    "problems",
    "probing",
    "skills",
    "essential",
    "discovery",
    "process",
    "understanding",
    "problem",
    "perspective",
    "varied",
    "stakeholders",
    "users",
    "data",
    "analysis",
    "process",
    "really",
    "begins",
    "clear",
    "articulation",
    "problem",
    "statement",
    "desired",
    "outcome",
    "data",
    "visualization",
    "skills",
    "help",
    "decide",
    "techniques",
    "tools",
    "present",
    "findings",
    "effectively",
    "based",
    "audience",
    "type",
    "data",
    "context",
    "end",
    "goal",
    "analysis",
    "project",
    "management",
    "skills",
    "manage",
    "process",
    "people",
    "dependencies",
    "timelines",
    "initiative",
    "brings",
    "us",
    "soft",
    "skills",
    "data",
    "analyst",
    "data",
    "analysis",
    "science",
    "art",
    "ace",
    "technical",
    "functional",
    "expertise",
    "one",
    "key",
    "differentiators",
    "success",
    "going",
    "soft",
    "skills",
    "includes",
    "ability",
    "work",
    "collaboratively",
    "business",
    "teams",
    "communicate",
    "effectively",
    "report",
    "present",
    "findings",
    "tell",
    "compelling",
    "convincing",
    "story",
    "gather",
    "support",
    "work",
    "curious",
    "heart",
    "data",
    "analysis",
    "course",
    "work",
    "stumble",
    "upon",
    "patterns",
    "phenomena",
    "anomalies",
    "may",
    "show",
    "different",
    "path",
    "ability",
    "allow",
    "new",
    "questions",
    "surface",
    "challenge",
    "assumptions",
    "hypotheses",
    "makes",
    "great",
    "analyst",
    "also",
    "hear",
    "data",
    "analysis",
    "practitioners",
    "talk",
    "intuition",
    "quality",
    "essential",
    "note",
    "intuition",
    "context",
    "ability",
    "sense",
    "future",
    "based",
    "pattern",
    "recognition",
    "past",
    "experiences",
    "music",
    "video",
    "listen",
    "practicing",
    "data",
    "professionals",
    "talk",
    "qualities",
    "skills",
    "required",
    "become",
    "data",
    "analyst",
    "qualities",
    "skills",
    "data",
    "analyst",
    "person",
    "curious",
    "naturally",
    "someone",
    "attention",
    "detail",
    "enjoys",
    "working",
    "computers",
    "curious",
    "person",
    "look",
    "find",
    "answers",
    "even",
    "sometimes",
    "question",
    "mind",
    "researching",
    "looking",
    "areas",
    "may",
    "thought",
    "attention",
    "detail",
    "looking",
    "patterns",
    "walk",
    "room",
    "count",
    "naturally",
    "people",
    "room",
    "set",
    "paying",
    "attention",
    "close",
    "details",
    "enjoying",
    "computers",
    "technology",
    "moving",
    "fast",
    "something",
    "skill",
    "learned",
    "today",
    "two",
    "three",
    "years",
    "may",
    "applicable",
    "need",
    "able",
    "develop",
    "new",
    "skills",
    "learn",
    "new",
    "software",
    "depending",
    "market",
    "industry",
    "changed",
    "definitely",
    "technical",
    "skills",
    "softer",
    "skills",
    "required",
    "technical",
    "skills",
    "include",
    "python",
    "sql",
    "r",
    "tableau",
    "power",
    "bi",
    "soft",
    "skills",
    "interpersonal",
    "skills",
    "mean",
    "whether",
    "know",
    "right",
    "data",
    "utilize",
    "right",
    "tool",
    "use",
    "present",
    "data",
    "key",
    "stakeholders",
    "skill",
    "sets",
    "require",
    "business",
    "acumen",
    "presentation",
    "skills",
    "love",
    "numbers",
    "love",
    "information",
    "willing",
    "look",
    "information",
    "look",
    "surface",
    "dive",
    "deeper",
    "example",
    "ca",
    "take",
    "bank",
    "statement",
    "face",
    "value",
    "actually",
    "look",
    "compare",
    "seal",
    "look",
    "right",
    "especially",
    "today",
    "world",
    "lot",
    "fraud",
    "miscommunication",
    "people",
    "trying",
    "take",
    "information",
    "fraudulently",
    "use",
    "good",
    "data",
    "analyst",
    "able",
    "compare",
    "last",
    "year",
    "information",
    "year",
    "information",
    "see",
    "looks",
    "right",
    "eye",
    "mindset",
    "take",
    "things",
    "face",
    "value",
    "many",
    "qualities",
    "skills",
    "required",
    "data",
    "analyst",
    "break",
    "two",
    "buckets",
    "basically",
    "soft",
    "skills",
    "technical",
    "skills",
    "think",
    "important",
    "soft",
    "skills",
    "data",
    "analyst",
    "really",
    "curious",
    "ask",
    "lot",
    "good",
    "questions",
    "really",
    "thought",
    "full",
    "listen",
    "carefully",
    "understand",
    "user",
    "perspective",
    "perspective",
    "need",
    "data",
    "always",
    "willing",
    "learn",
    "analytics",
    "fast",
    "moving",
    "field",
    "constantly",
    "learning",
    "reading",
    "stay",
    "top",
    "many",
    "technical",
    "skills",
    "required",
    "data",
    "analyst",
    "important",
    "technical",
    "skill",
    "new",
    "data",
    "analyst",
    "learn",
    "sql",
    "far",
    "widely",
    "used",
    "anytime",
    "extracting",
    "data",
    "database",
    "going",
    "need",
    "know",
    "sql",
    "nothing",
    "quite",
    "like",
    "data",
    "analyst",
    "really",
    "really",
    "good",
    "sql",
    "skills",
    "think",
    "sometimes",
    "people",
    "get",
    "ahead",
    "try",
    "bunch",
    "complicated",
    "technologies",
    "getting",
    "basics",
    "sql",
    "think",
    "really",
    "big",
    "mistake",
    "think",
    "always",
    "nice",
    "know",
    "python",
    "r",
    "two",
    "main",
    "programming",
    "languages",
    "used",
    "uh",
    "data",
    "analysis",
    "think",
    "new",
    "data",
    "analyst",
    "need",
    "proficient",
    "really",
    "either",
    "starting",
    "get",
    "good",
    "one",
    "going",
    "really",
    "useful",
    "career",
    "another",
    "important",
    "technical",
    "skill",
    "data",
    "analyst",
    "uh",
    "really",
    "good",
    "least",
    "one",
    "data",
    "visualization",
    "tool",
    "understand",
    "general",
    "principles",
    "data",
    "visualization",
    "today",
    "skill",
    "set",
    "data",
    "analyst",
    "far",
    "dynamic",
    "used",
    "data",
    "analyst",
    "needs",
    "know",
    "problem",
    "trying",
    "solve",
    "data",
    "pulls",
    "data",
    "need",
    "structure",
    "needed",
    "using",
    "sql",
    "data",
    "lake",
    "um",
    "sitting",
    "uh",
    "know",
    "many",
    "different",
    "tables",
    "need",
    "figure",
    "join",
    "pull",
    "data",
    "clean",
    "uh",
    "wrangle",
    "manipulate",
    "mine",
    "able",
    "um",
    "kind",
    "green",
    "insights",
    "present",
    "insights",
    "concisely",
    "clearly",
    "using",
    "good",
    "visualizations",
    "dashboards",
    "words",
    "able",
    "tell",
    "good",
    "story",
    "data",
    "music",
    "day",
    "life",
    "data",
    "analyst",
    "include",
    "number",
    "possibilities",
    "acquiring",
    "data",
    "varied",
    "data",
    "sources",
    "creating",
    "queries",
    "pulling",
    "data",
    "data",
    "repositories",
    "foraging",
    "rows",
    "data",
    "look",
    "insights",
    "creating",
    "reports",
    "dashboards",
    "interacting",
    "stakeholders",
    "gathering",
    "information",
    "presenting",
    "findings",
    "spectrum",
    "yes",
    "big",
    "one",
    "cleaning",
    "preparing",
    "data",
    "findings",
    "credible",
    "basis",
    "way",
    "large",
    "part",
    "data",
    "analyst",
    "may",
    "find",
    "jobs",
    "walk",
    "one",
    "type",
    "day",
    "going",
    "pick",
    "one",
    "foraging",
    "data",
    "looking",
    "insights",
    "part",
    "job",
    "totally",
    "hi",
    "sivaram",
    "jaladi",
    "work",
    "data",
    "analyst",
    "fluent",
    "grid",
    "smart",
    "grid",
    "technology",
    "solutions",
    "company",
    "based",
    "vishakhapatnam",
    "india",
    "fluent",
    "grid",
    "ibm",
    "partner",
    "recipient",
    "ibm",
    "beacon",
    "awards",
    "solutions",
    "areas",
    "smart",
    "energy",
    "smart",
    "city",
    "industry",
    "segments",
    "offer",
    "integrated",
    "operations",
    "center",
    "solutions",
    "power",
    "utilities",
    "smart",
    "cities",
    "leveraging",
    "actionable",
    "intelligence",
    "platform",
    "known",
    "fluent",
    "grid",
    "act",
    "diligence",
    "client",
    "power",
    "utility",
    "company",
    "south",
    "india",
    "noticing",
    "spike",
    "complaints",
    "regarding",
    "overbilling",
    "frequency",
    "complaints",
    "seems",
    "suggest",
    "something",
    "random",
    "occurrences",
    "asked",
    "look",
    "complaints",
    "billing",
    "data",
    "see",
    "spot",
    "something",
    "start",
    "taking",
    "stock",
    "obvious",
    "places",
    "know",
    "going",
    "looking",
    "complaint",
    "data",
    "subscriber",
    "information",
    "data",
    "billing",
    "data",
    "going",
    "starting",
    "point",
    "dive",
    "specifics",
    "data",
    "going",
    "make",
    "list",
    "questions",
    "initial",
    "hypotheses",
    "going",
    "start",
    "usage",
    "pattern",
    "subscribers",
    "reporting",
    "issue",
    "consumption",
    "range",
    "billing",
    "occurring",
    "others",
    "area",
    "wise",
    "concentration",
    "complaints",
    "complaints",
    "concentrated",
    "specific",
    "localities",
    "within",
    "city",
    "three",
    "frequency",
    "occurrence",
    "complaints",
    "based",
    "individual",
    "subscribers",
    "subscribers",
    "reporting",
    "billing",
    "repetitively",
    "yes",
    "frequency",
    "occurrence",
    "repeat",
    "cases",
    "subscriber",
    "billed",
    "overbilling",
    "occur",
    "every",
    "month",
    "first",
    "occurrence",
    "repeat",
    "occurrences",
    "sporadic",
    "get",
    "clear",
    "initial",
    "hypotheses",
    "set",
    "questions",
    "going",
    "start",
    "identify",
    "data",
    "sets",
    "going",
    "isolate",
    "analyze",
    "validate",
    "refute",
    "hypotheses",
    "pull",
    "average",
    "annual",
    "quarterly",
    "monthly",
    "billing",
    "amounts",
    "complainants",
    "look",
    "range",
    "complaints",
    "falling",
    "others",
    "pull",
    "location",
    "data",
    "complainants",
    "see",
    "connection",
    "overbilling",
    "zip",
    "codes",
    "see",
    "seems",
    "concentration",
    "complaints",
    "certain",
    "areas",
    "looked",
    "like",
    "could",
    "add",
    "something",
    "instead",
    "moving",
    "third",
    "hypothesis",
    "decide",
    "get",
    "little",
    "deeper",
    "data",
    "next",
    "pull",
    "date",
    "connection",
    "data",
    "95",
    "percent",
    "complainants",
    "subscribers",
    "seven",
    "years",
    "though",
    "subscribers",
    "seven",
    "year",
    "mark",
    "facing",
    "complaint",
    "see",
    "area",
    "wise",
    "concentration",
    "see",
    "significant",
    "concentration",
    "complaints",
    "based",
    "date",
    "connection",
    "next",
    "pull",
    "make",
    "serial",
    "number",
    "meters",
    "serial",
    "numbers",
    "belonged",
    "batch",
    "meters",
    "provided",
    "supplier",
    "concentration",
    "meters",
    "therefore",
    "complaints",
    "coming",
    "areas",
    "meters",
    "installed",
    "stage",
    "feel",
    "confident",
    "presenting",
    "findings",
    "stakeholders",
    "also",
    "going",
    "share",
    "data",
    "sources",
    "process",
    "arriving",
    "analysis",
    "always",
    "goes",
    "long",
    "way",
    "lending",
    "credibility",
    "findings",
    "could",
    "end",
    "project",
    "may",
    "well",
    "come",
    "back",
    "maybe",
    "complaints",
    "different",
    "commonalities",
    "completely",
    "different",
    "set",
    "complaints",
    "need",
    "find",
    "answers",
    "thank",
    "foreign",
    "data",
    "professionals",
    "talk",
    "applications",
    "data",
    "analytics",
    "today",
    "world",
    "applications",
    "data",
    "analytics",
    "world",
    "today",
    "everywhere",
    "every",
    "commercial",
    "see",
    "someone",
    "analyze",
    "identify",
    "either",
    "consumer",
    "company",
    "information",
    "want",
    "share",
    "know",
    "four",
    "10",
    "dentists",
    "see",
    "information",
    "related",
    "calorie",
    "counts",
    "reactions",
    "certain",
    "things",
    "required",
    "analysis",
    "something",
    "thought",
    "separate",
    "apart",
    "every",
    "day",
    "lives",
    "even",
    "people",
    "monitoring",
    "sugar",
    "level",
    "diabetes",
    "always",
    "analysis",
    "going",
    "applications",
    "universal",
    "great",
    "thing",
    "analytics",
    "day",
    "age",
    "widely",
    "applicable",
    "every",
    "industry",
    "every",
    "vertical",
    "every",
    "function",
    "within",
    "given",
    "organization",
    "benefit",
    "data",
    "analytics",
    "whether",
    "sales",
    "pipeline",
    "analysis",
    "financials",
    "end",
    "month",
    "creating",
    "predefined",
    "standardized",
    "formatted",
    "reports",
    "something",
    "like",
    "head",
    "count",
    "planning",
    "head",
    "count",
    "review",
    "across",
    "every",
    "vertical",
    "said",
    "whether",
    "airlines",
    "pharmaceuticals",
    "banking",
    "functions",
    "within",
    "benefit",
    "analytics",
    "climate",
    "right",
    "pandemic",
    "companies",
    "paying",
    "close",
    "attention",
    "customers",
    "buying",
    "habits",
    "obviously",
    "may",
    "varied",
    "companies",
    "expected",
    "habits",
    "data",
    "analytics",
    "important",
    "need",
    "make",
    "sure",
    "pivot",
    "keep",
    "demand",
    "really",
    "able",
    "cater",
    "clients",
    "customers",
    "want",
    "talk",
    "applications",
    "data",
    "analytics",
    "finance",
    "years",
    "seen",
    "applications",
    "alternative",
    "data",
    "analytics",
    "finance",
    "world",
    "example",
    "use",
    "sentiment",
    "analysis",
    "tweets",
    "new",
    "stories",
    "supplement",
    "traditional",
    "financial",
    "analysis",
    "inform",
    "better",
    "investment",
    "decisions",
    "besides",
    "satellite",
    "imagery",
    "data",
    "used",
    "track",
    "development",
    "industrial",
    "activities",
    "geolocation",
    "data",
    "used",
    "track",
    "store",
    "traffic",
    "predict",
    "sales",
    "volume",
    "foreign",
    "ecosystem",
    "includes",
    "infrastructure",
    "software",
    "tools",
    "frameworks",
    "processes",
    "used",
    "gather",
    "clean",
    "analyze",
    "mine",
    "visualize",
    "data",
    "video",
    "go",
    "quick",
    "overview",
    "ecosystem",
    "going",
    "details",
    "topics",
    "subsequent",
    "videos",
    "let",
    "first",
    "talk",
    "data",
    "based",
    "structure",
    "data",
    "data",
    "categorized",
    "structured",
    "unstructured",
    "data",
    "follows",
    "rigid",
    "format",
    "organized",
    "neatly",
    "rows",
    "columns",
    "structured",
    "data",
    "data",
    "see",
    "typically",
    "databases",
    "spreadsheets",
    "example",
    "data",
    "mix",
    "data",
    "consistent",
    "characteristics",
    "data",
    "conform",
    "rigid",
    "structure",
    "example",
    "emails",
    "email",
    "mix",
    "structured",
    "data",
    "name",
    "sender",
    "recipient",
    "also",
    "contents",
    "email",
    "unstructured",
    "data",
    "unstructured",
    "data",
    "data",
    "complex",
    "mostly",
    "qualitative",
    "information",
    "impossible",
    "reduce",
    "rows",
    "columns",
    "example",
    "photos",
    "videos",
    "text",
    "files",
    "pdfs",
    "social",
    "media",
    "content",
    "type",
    "data",
    "drives",
    "kind",
    "data",
    "reposit",
    "stories",
    "data",
    "collected",
    "stored",
    "also",
    "tools",
    "used",
    "query",
    "process",
    "data",
    "data",
    "also",
    "comes",
    "variety",
    "file",
    "formats",
    "collected",
    "variety",
    "data",
    "sources",
    "ranging",
    "relational",
    "databases",
    "apis",
    "web",
    "services",
    "data",
    "streams",
    "social",
    "platforms",
    "sensor",
    "devices",
    "brings",
    "us",
    "data",
    "repositories",
    "term",
    "includes",
    "databases",
    "data",
    "warehouses",
    "data",
    "marts",
    "data",
    "lakes",
    "big",
    "data",
    "stores",
    "type",
    "format",
    "sources",
    "data",
    "influence",
    "type",
    "data",
    "repositories",
    "could",
    "use",
    "collect",
    "store",
    "clean",
    "analyze",
    "mine",
    "data",
    "analysis",
    "working",
    "big",
    "data",
    "example",
    "need",
    "big",
    "data",
    "warehouses",
    "allow",
    "store",
    "process",
    "large",
    "volume",
    "high",
    "velocity",
    "data",
    "also",
    "frameworks",
    "allow",
    "perform",
    "complex",
    "analytics",
    "real",
    "time",
    "big",
    "data",
    "ecosystem",
    "also",
    "includes",
    "languages",
    "classified",
    "query",
    "languages",
    "programming",
    "languages",
    "shell",
    "scripting",
    "languages",
    "querying",
    "manipulating",
    "data",
    "sql",
    "developing",
    "data",
    "applications",
    "python",
    "writing",
    "shell",
    "scripts",
    "repetitive",
    "operational",
    "tasks",
    "important",
    "components",
    "data",
    "analyst",
    "workbench",
    "automated",
    "tools",
    "frameworks",
    "processes",
    "stages",
    "analytics",
    "process",
    "part",
    "data",
    "analysts",
    "ecosystem",
    "tools",
    "used",
    "gathering",
    "extracting",
    "transforming",
    "loading",
    "data",
    "data",
    "repositories",
    "tools",
    "data",
    "wrangling",
    "data",
    "cleaning",
    "analysis",
    "data",
    "mining",
    "data",
    "visualization",
    "diverse",
    "rich",
    "ecosystem",
    "spreadsheets",
    "jupiter",
    "notebooks",
    "ibm",
    "cognos",
    "examples",
    "cover",
    "data",
    "analytics",
    "tools",
    "greater",
    "detail",
    "subsequent",
    "sections",
    "course",
    "music",
    "data",
    "unorganized",
    "information",
    "processed",
    "make",
    "meaningful",
    "generally",
    "data",
    "comprises",
    "facts",
    "observations",
    "perceptions",
    "numbers",
    "characters",
    "symbols",
    "images",
    "interpreted",
    "derive",
    "meaning",
    "one",
    "ways",
    "data",
    "categorized",
    "structure",
    "data",
    "structured",
    "unstructured",
    "structured",
    "data",
    "structure",
    "adheres",
    "specified",
    "data",
    "model",
    "stored",
    "schemas",
    "databases",
    "many",
    "cases",
    "represented",
    "tabular",
    "manner",
    "rows",
    "columns",
    "structured",
    "data",
    "objective",
    "facts",
    "numbers",
    "collected",
    "exported",
    "stored",
    "organized",
    "typical",
    "databases",
    "sources",
    "structured",
    "data",
    "could",
    "include",
    "sql",
    "databases",
    "online",
    "transaction",
    "processing",
    "oltp",
    "systems",
    "focus",
    "business",
    "transactions",
    "spreadsheets",
    "excel",
    "google",
    "sheets",
    "online",
    "forms",
    "sensors",
    "global",
    "positioning",
    "systems",
    "gps",
    "radio",
    "frequency",
    "identification",
    "rfid",
    "tags",
    "network",
    "web",
    "server",
    "logs",
    "also",
    "easily",
    "examine",
    "structured",
    "data",
    "standard",
    "data",
    "analysis",
    "tools",
    "methods",
    "data",
    "data",
    "organizational",
    "properties",
    "lacks",
    "fixed",
    "rigid",
    "schema",
    "data",
    "stored",
    "form",
    "rows",
    "columns",
    "databases",
    "contains",
    "tags",
    "elements",
    "metadata",
    "used",
    "group",
    "data",
    "organize",
    "hierarchy",
    "sources",
    "data",
    "could",
    "include",
    "emails",
    "xml",
    "markup",
    "languages",
    "binary",
    "executables",
    "tcp",
    "ip",
    "packets",
    "zippered",
    "files",
    "integration",
    "data",
    "different",
    "sources",
    "xml",
    "json",
    "allow",
    "users",
    "define",
    "tags",
    "attributes",
    "store",
    "data",
    "hierarchical",
    "form",
    "used",
    "widely",
    "store",
    "exchange",
    "data",
    "unstructured",
    "data",
    "data",
    "easily",
    "identifiable",
    "structure",
    "therefore",
    "organized",
    "mainstream",
    "relational",
    "database",
    "form",
    "rows",
    "columns",
    "particular",
    "format",
    "sequence",
    "semantics",
    "rules",
    "unstructured",
    "data",
    "deal",
    "heterogeneity",
    "sources",
    "variety",
    "business",
    "intelligence",
    "analytics",
    "applications",
    "sources",
    "unstructured",
    "data",
    "could",
    "include",
    "web",
    "pages",
    "social",
    "media",
    "feeds",
    "images",
    "varied",
    "file",
    "formats",
    "jpeg",
    "gif",
    "png",
    "video",
    "audio",
    "files",
    "documents",
    "pdf",
    "files",
    "powerpoint",
    "presentations",
    "media",
    "logs",
    "surveys",
    "unstructured",
    "data",
    "stored",
    "files",
    "documents",
    "word",
    "document",
    "manual",
    "analysis",
    "nosql",
    "databases",
    "analysis",
    "tools",
    "examining",
    "type",
    "data",
    "summarize",
    "structured",
    "data",
    "data",
    "well",
    "organized",
    "formats",
    "stored",
    "databases",
    "lends",
    "standard",
    "data",
    "analysis",
    "methods",
    "tools",
    "data",
    "data",
    "somewhat",
    "organized",
    "relies",
    "meta",
    "tags",
    "grouping",
    "hierarchy",
    "unstructured",
    "data",
    "data",
    "conventionally",
    "organized",
    "form",
    "rows",
    "columns",
    "particular",
    "format",
    "next",
    "video",
    "learn",
    "different",
    "types",
    "file",
    "structures",
    "foreign",
    "music",
    "data",
    "professional",
    "working",
    "variety",
    "data",
    "file",
    "types",
    "formats",
    "important",
    "understand",
    "underlying",
    "structure",
    "file",
    "formats",
    "along",
    "benefits",
    "limitations",
    "understanding",
    "support",
    "make",
    "right",
    "decisions",
    "formats",
    "best",
    "suited",
    "data",
    "performance",
    "needs",
    "standard",
    "file",
    "formats",
    "cover",
    "video",
    "include",
    "delimited",
    "text",
    "file",
    "formats",
    "microsoft",
    "excel",
    "open",
    "xml",
    "spreadsheet",
    "xlsx",
    "extensible",
    "markup",
    "language",
    "xml",
    "portable",
    "document",
    "format",
    "pdf",
    "javascript",
    "object",
    "notation",
    "json",
    "delimited",
    "text",
    "files",
    "text",
    "files",
    "used",
    "store",
    "data",
    "text",
    "line",
    "row",
    "values",
    "separated",
    "delimiter",
    "delimiter",
    "sequence",
    "one",
    "characters",
    "specifying",
    "boundary",
    "independent",
    "entities",
    "values",
    "character",
    "used",
    "separate",
    "values",
    "common",
    "delimiters",
    "comma",
    "tab",
    "colon",
    "vertical",
    "bar",
    "space",
    "comma",
    "separated",
    "values",
    "csvs",
    "tab",
    "separated",
    "values",
    "tsvs",
    "commonly",
    "used",
    "file",
    "types",
    "category",
    "csvs",
    "delimiter",
    "comma",
    "tsvs",
    "delimiter",
    "tab",
    "literal",
    "commas",
    "present",
    "text",
    "data",
    "therefore",
    "used",
    "delimiters",
    "tsvs",
    "serve",
    "alternative",
    "csv",
    "format",
    "tab",
    "stops",
    "infrequent",
    "running",
    "text",
    "row",
    "horizontal",
    "line",
    "text",
    "file",
    "set",
    "values",
    "separated",
    "delimiter",
    "represents",
    "record",
    "first",
    "row",
    "works",
    "column",
    "header",
    "column",
    "different",
    "type",
    "data",
    "example",
    "column",
    "date",
    "type",
    "another",
    "string",
    "integer",
    "type",
    "data",
    "delimited",
    "files",
    "allow",
    "field",
    "values",
    "length",
    "considered",
    "standard",
    "format",
    "providing",
    "straightforward",
    "information",
    "schema",
    "processed",
    "almost",
    "existing",
    "applications",
    "delimiters",
    "also",
    "represent",
    "one",
    "various",
    "means",
    "specify",
    "boundaries",
    "data",
    "stream",
    "microsoft",
    "excel",
    "open",
    "xml",
    "spreadsheet",
    "xlsx",
    "microsoft",
    "excel",
    "open",
    "xml",
    "file",
    "format",
    "falls",
    "spreadsheet",
    "file",
    "format",
    "xml",
    "based",
    "file",
    "format",
    "created",
    "microsoft",
    "xlsx",
    "also",
    "known",
    "workbook",
    "multiple",
    "worksheets",
    "worksheet",
    "organized",
    "rows",
    "columns",
    "intersection",
    "cell",
    "cell",
    "contains",
    "data",
    "xlsx",
    "uses",
    "open",
    "file",
    "format",
    "means",
    "generally",
    "accessible",
    "applications",
    "use",
    "save",
    "functions",
    "available",
    "excel",
    "also",
    "known",
    "one",
    "secure",
    "file",
    "formats",
    "save",
    "malicious",
    "code",
    "extensible",
    "markup",
    "language",
    "xml",
    "markup",
    "language",
    "set",
    "rules",
    "encoding",
    "data",
    "xml",
    "file",
    "format",
    "readable",
    "humans",
    "machines",
    "language",
    "designed",
    "sending",
    "information",
    "internet",
    "xml",
    "similar",
    "html",
    "respects",
    "also",
    "differences",
    "example",
    "xml",
    "use",
    "predefined",
    "tags",
    "like",
    "html",
    "xml",
    "platform",
    "independent",
    "programming",
    "language",
    "independent",
    "therefore",
    "simplifies",
    "data",
    "sharing",
    "various",
    "systems",
    "portable",
    "document",
    "format",
    "pdf",
    "file",
    "format",
    "developed",
    "adobe",
    "present",
    "documents",
    "independent",
    "application",
    "software",
    "hardware",
    "operating",
    "systems",
    "means",
    "viewed",
    "way",
    "device",
    "format",
    "frequently",
    "used",
    "legal",
    "financial",
    "documents",
    "also",
    "used",
    "fill",
    "data",
    "forms",
    "javascript",
    "object",
    "notation",
    "json",
    "open",
    "standard",
    "designed",
    "transmitting",
    "structured",
    "data",
    "web",
    "file",
    "format",
    "language",
    "independent",
    "data",
    "format",
    "read",
    "programming",
    "language",
    "json",
    "easy",
    "use",
    "compatible",
    "wide",
    "range",
    "browsers",
    "considered",
    "one",
    "best",
    "tools",
    "sharing",
    "data",
    "size",
    "type",
    "even",
    "audio",
    "video",
    "one",
    "reason",
    "many",
    "apis",
    "web",
    "servers",
    "return",
    "data",
    "json",
    "foreign",
    "music",
    "touched",
    "upon",
    "one",
    "previous",
    "videos",
    "data",
    "sources",
    "never",
    "dynamic",
    "diverse",
    "today",
    "video",
    "look",
    "common",
    "sources",
    "relational",
    "databases",
    "flat",
    "files",
    "xml",
    "data",
    "sets",
    "apis",
    "web",
    "services",
    "web",
    "scraping",
    "data",
    "streams",
    "feeds",
    "typically",
    "organizations",
    "internal",
    "applications",
    "support",
    "managing",
    "business",
    "activities",
    "customer",
    "transactions",
    "human",
    "resource",
    "activities",
    "workflows",
    "systems",
    "use",
    "relational",
    "databases",
    "sql",
    "server",
    "oracle",
    "mysql",
    "ibm",
    "db2",
    "store",
    "data",
    "structured",
    "way",
    "data",
    "stored",
    "databases",
    "data",
    "warehouses",
    "used",
    "source",
    "analysis",
    "example",
    "data",
    "retail",
    "transaction",
    "system",
    "used",
    "analyze",
    "sales",
    "different",
    "regions",
    "data",
    "customer",
    "relationship",
    "management",
    "system",
    "used",
    "making",
    "sales",
    "projections",
    "external",
    "organization",
    "publicly",
    "privately",
    "available",
    "data",
    "sets",
    "example",
    "government",
    "organizations",
    "releasing",
    "demographic",
    "economic",
    "data",
    "sets",
    "ongoing",
    "basis",
    "companies",
    "sell",
    "specific",
    "data",
    "example",
    "point",
    "sale",
    "data",
    "financial",
    "data",
    "weather",
    "data",
    "businesses",
    "use",
    "define",
    "strategy",
    "predict",
    "demand",
    "make",
    "decisions",
    "related",
    "distribution",
    "marketing",
    "promotions",
    "among",
    "things",
    "data",
    "sets",
    "typically",
    "made",
    "available",
    "flat",
    "files",
    "spreadsheet",
    "files",
    "xml",
    "documents",
    "flat",
    "files",
    "store",
    "data",
    "plain",
    "text",
    "format",
    "one",
    "record",
    "row",
    "per",
    "line",
    "value",
    "separated",
    "delimiters",
    "commas",
    "semicolons",
    "tabs",
    "data",
    "flat",
    "file",
    "maps",
    "single",
    "table",
    "unlike",
    "relational",
    "databases",
    "contain",
    "multiple",
    "tables",
    "one",
    "common",
    "flat",
    "file",
    "formats",
    "csv",
    "values",
    "separated",
    "commas",
    "spreadsheet",
    "files",
    "special",
    "type",
    "flat",
    "files",
    "also",
    "recognize",
    "data",
    "tabular",
    "format",
    "rows",
    "columns",
    "spreadsheet",
    "contain",
    "multiple",
    "worksheets",
    "worksheet",
    "map",
    "different",
    "table",
    "although",
    "data",
    "spreadsheets",
    "plain",
    "text",
    "files",
    "stored",
    "custom",
    "formats",
    "include",
    "additional",
    "information",
    "formatting",
    "formulas",
    "etc",
    "microsoft",
    "excel",
    "stores",
    "data",
    "xls",
    "xlsx",
    "format",
    "probably",
    "common",
    "spreadsheet",
    "others",
    "include",
    "google",
    "sheets",
    "apple",
    "numbers",
    "libreoffice",
    "xml",
    "files",
    "contain",
    "data",
    "values",
    "identified",
    "marked",
    "using",
    "tags",
    "data",
    "flat",
    "files",
    "flat",
    "maps",
    "single",
    "table",
    "xml",
    "files",
    "support",
    "complex",
    "data",
    "structures",
    "hierarchical",
    "common",
    "uses",
    "xml",
    "include",
    "data",
    "online",
    "surveys",
    "bank",
    "statements",
    "unstructured",
    "data",
    "sets",
    "many",
    "data",
    "providers",
    "websites",
    "provide",
    "apis",
    "application",
    "program",
    "interfaces",
    "web",
    "services",
    "multiple",
    "users",
    "applications",
    "interact",
    "obtain",
    "data",
    "processing",
    "analysis",
    "apis",
    "web",
    "services",
    "typically",
    "listen",
    "incoming",
    "requests",
    "form",
    "web",
    "requests",
    "users",
    "network",
    "requests",
    "applications",
    "return",
    "data",
    "plain",
    "text",
    "xml",
    "html",
    "json",
    "media",
    "files",
    "let",
    "look",
    "popular",
    "examples",
    "apis",
    "used",
    "data",
    "source",
    "data",
    "analytics",
    "use",
    "twitter",
    "facebook",
    "apis",
    "source",
    "data",
    "tweets",
    "posts",
    "performing",
    "tasks",
    "opinion",
    "mining",
    "sentiment",
    "analysis",
    "summarize",
    "amount",
    "appreciation",
    "criticism",
    "given",
    "subject",
    "policies",
    "government",
    "product",
    "service",
    "customer",
    "satisfaction",
    "general",
    "stock",
    "market",
    "apis",
    "used",
    "pulling",
    "data",
    "share",
    "commodity",
    "prices",
    "earnings",
    "per",
    "share",
    "historical",
    "prices",
    "trading",
    "analysis",
    "data",
    "lookup",
    "validation",
    "apis",
    "useful",
    "data",
    "analysts",
    "cleaning",
    "preparing",
    "data",
    "well",
    "data",
    "example",
    "check",
    "city",
    "state",
    "postal",
    "zip",
    "code",
    "belongs",
    "apis",
    "also",
    "used",
    "pulling",
    "data",
    "database",
    "sources",
    "within",
    "external",
    "organization",
    "web",
    "scraping",
    "used",
    "extract",
    "relevant",
    "data",
    "unstructured",
    "sources",
    "also",
    "known",
    "screen",
    "scraping",
    "web",
    "harvesting",
    "web",
    "data",
    "extraction",
    "web",
    "scraping",
    "makes",
    "possible",
    "download",
    "specific",
    "data",
    "web",
    "pages",
    "based",
    "defined",
    "parameters",
    "web",
    "scrapers",
    "among",
    "things",
    "extract",
    "text",
    "contact",
    "information",
    "images",
    "videos",
    "product",
    "items",
    "much",
    "website",
    "popular",
    "uses",
    "web",
    "scraping",
    "include",
    "collecting",
    "product",
    "details",
    "retailers",
    "manufacturers",
    "websites",
    "provide",
    "price",
    "comparisons",
    "generating",
    "sales",
    "leads",
    "public",
    "data",
    "sources",
    "extracting",
    "data",
    "posts",
    "authors",
    "various",
    "forums",
    "communities",
    "collecting",
    "training",
    "testing",
    "data",
    "sets",
    "machine",
    "learning",
    "models",
    "popular",
    "web",
    "scraping",
    "tools",
    "include",
    "beautiful",
    "soup",
    "scrapy",
    "pandas",
    "selenium",
    "data",
    "streams",
    "another",
    "widely",
    "used",
    "source",
    "aggregating",
    "constant",
    "streams",
    "data",
    "flowing",
    "sources",
    "instruments",
    "iot",
    "devices",
    "applications",
    "gps",
    "data",
    "cars",
    "computer",
    "programs",
    "websites",
    "social",
    "media",
    "posts",
    "data",
    "generally",
    "time",
    "stamped",
    "also",
    "geotagged",
    "geographical",
    "identification",
    "data",
    "streams",
    "ways",
    "leveraged",
    "include",
    "stock",
    "market",
    "tickers",
    "financial",
    "trading",
    "retail",
    "transaction",
    "streams",
    "predicting",
    "demand",
    "supply",
    "chain",
    "management",
    "surveillance",
    "video",
    "feeds",
    "threat",
    "detection",
    "social",
    "media",
    "feeds",
    "sentiment",
    "analysis",
    "sensor",
    "data",
    "feeds",
    "monitoring",
    "industrial",
    "farming",
    "machinery",
    "web",
    "click",
    "feeds",
    "monitoring",
    "web",
    "performance",
    "improving",
    "design",
    "flight",
    "events",
    "rebooking",
    "rescheduling",
    "popular",
    "applications",
    "used",
    "process",
    "data",
    "streams",
    "include",
    "apache",
    "kafka",
    "apache",
    "spark",
    "streaming",
    "apache",
    "storm",
    "rss",
    "really",
    "simple",
    "syndication",
    "feeds",
    "another",
    "popular",
    "data",
    "source",
    "typically",
    "used",
    "capturing",
    "updated",
    "data",
    "online",
    "forums",
    "new",
    "sites",
    "data",
    "refreshed",
    "ongoing",
    "basis",
    "using",
    "feed",
    "reader",
    "interface",
    "converts",
    "rss",
    "text",
    "files",
    "stream",
    "updated",
    "data",
    "updates",
    "streamed",
    "user",
    "devices",
    "music",
    "music",
    "video",
    "learn",
    "languages",
    "relevant",
    "work",
    "data",
    "professionals",
    "categorized",
    "query",
    "languages",
    "programming",
    "languages",
    "shell",
    "scripting",
    "proficiency",
    "least",
    "one",
    "language",
    "category",
    "essential",
    "data",
    "professional",
    "simply",
    "stated",
    "query",
    "languages",
    "designed",
    "accessing",
    "manipulating",
    "data",
    "database",
    "example",
    "sql",
    "programming",
    "languages",
    "designed",
    "developing",
    "applications",
    "controlling",
    "application",
    "behavior",
    "example",
    "python",
    "r",
    "java",
    "shell",
    "scripting",
    "languages",
    "unix",
    "linux",
    "shell",
    "powershell",
    "ideal",
    "repetitive",
    "operational",
    "tasks",
    "remaining",
    "video",
    "examine",
    "languages",
    "greater",
    "depth",
    "sql",
    "structured",
    "query",
    "language",
    "querying",
    "language",
    "designed",
    "accessing",
    "manipulating",
    "information",
    "mostly",
    "though",
    "exclusively",
    "relational",
    "databases",
    "using",
    "sql",
    "write",
    "set",
    "instructions",
    "perform",
    "operations",
    "insert",
    "update",
    "delete",
    "records",
    "database",
    "create",
    "new",
    "databases",
    "tables",
    "views",
    "write",
    "stored",
    "procedures",
    "means",
    "write",
    "set",
    "instructions",
    "call",
    "later",
    "use",
    "advantages",
    "using",
    "sql",
    "sql",
    "portable",
    "used",
    "independent",
    "platform",
    "used",
    "querying",
    "data",
    "wide",
    "variety",
    "databases",
    "data",
    "repositories",
    "although",
    "vendor",
    "may",
    "variations",
    "special",
    "extensions",
    "simple",
    "syntax",
    "similar",
    "english",
    "language",
    "syntax",
    "allows",
    "developers",
    "write",
    "programs",
    "fewer",
    "lines",
    "programming",
    "languages",
    "using",
    "basic",
    "keywords",
    "select",
    "insert",
    "update",
    "retrieve",
    "large",
    "amounts",
    "data",
    "quickly",
    "efficiently",
    "runs",
    "interpreter",
    "system",
    "means",
    "code",
    "executed",
    "soon",
    "written",
    "making",
    "prototyping",
    "quick",
    "easy",
    "sql",
    "one",
    "popular",
    "querying",
    "languages",
    "due",
    "large",
    "user",
    "community",
    "sheer",
    "volume",
    "documentation",
    "accumulated",
    "years",
    "continues",
    "provide",
    "uniform",
    "platform",
    "worldwide",
    "users",
    "python",
    "widely",
    "used",
    "open",
    "source",
    "general",
    "purpose",
    "programming",
    "language",
    "syntax",
    "allows",
    "programmers",
    "express",
    "concepts",
    "fewer",
    "lines",
    "code",
    "compared",
    "older",
    "languages",
    "python",
    "perceived",
    "one",
    "easiest",
    "languages",
    "learn",
    "large",
    "developer",
    "community",
    "focus",
    "simplicity",
    "readability",
    "low",
    "learning",
    "curve",
    "ideal",
    "tool",
    "beginning",
    "programmers",
    "great",
    "performing",
    "high",
    "computational",
    "tasks",
    "vast",
    "amounts",
    "data",
    "otherwise",
    "extremely",
    "time",
    "consuming",
    "cumbersome",
    "python",
    "provides",
    "libraries",
    "like",
    "numpy",
    "pandas",
    "eases",
    "task",
    "use",
    "parallel",
    "processing",
    "inbuilt",
    "functions",
    "almost",
    "frequently",
    "used",
    "concepts",
    "python",
    "supports",
    "multiple",
    "programming",
    "paradigms",
    "imperative",
    "functional",
    "procedural",
    "making",
    "suitable",
    "wide",
    "variety",
    "use",
    "cases",
    "let",
    "look",
    "reasons",
    "make",
    "python",
    "one",
    "fastest",
    "growing",
    "programming",
    "languages",
    "world",
    "today",
    "easy",
    "learn",
    "python",
    "advantage",
    "using",
    "fewer",
    "lines",
    "code",
    "accomplish",
    "tasks",
    "compared",
    "languages",
    "open",
    "source",
    "python",
    "free",
    "uses",
    "model",
    "development",
    "runs",
    "windows",
    "linux",
    "environments",
    "ported",
    "multiple",
    "platforms",
    "widespread",
    "community",
    "support",
    "plenty",
    "useful",
    "analytics",
    "libraries",
    "available",
    "several",
    "open",
    "source",
    "libraries",
    "data",
    "manipulation",
    "data",
    "visualization",
    "statistics",
    "mathematics",
    "name",
    "vast",
    "array",
    "libraries",
    "functionalities",
    "also",
    "include",
    "pandas",
    "data",
    "cleaning",
    "analysis",
    "numpy",
    "scipy",
    "statistical",
    "analysis",
    "beautiful",
    "suit",
    "scrapey",
    "web",
    "scraping",
    "matplotlib",
    "seabourn",
    "visually",
    "represent",
    "data",
    "form",
    "bar",
    "graph",
    "histogram",
    "pie",
    "charts",
    "openc",
    "image",
    "processing",
    "r",
    "open",
    "source",
    "programming",
    "language",
    "environment",
    "data",
    "analysis",
    "data",
    "visualization",
    "machine",
    "learning",
    "statistics",
    "widely",
    "used",
    "developing",
    "statistical",
    "software",
    "performing",
    "data",
    "analytics",
    "especially",
    "known",
    "ability",
    "create",
    "compelling",
    "visualizations",
    "giving",
    "edge",
    "languages",
    "space",
    "key",
    "benefits",
    "r",
    "include",
    "following",
    "open",
    "source",
    "platform",
    "independent",
    "programming",
    "language",
    "paired",
    "many",
    "programming",
    "languages",
    "including",
    "python",
    "highly",
    "extensible",
    "means",
    "developers",
    "continue",
    "add",
    "functionalities",
    "defining",
    "new",
    "functions",
    "facilitates",
    "handling",
    "structured",
    "well",
    "unstructured",
    "data",
    "means",
    "comprehensible",
    "data",
    "capability",
    "libraries",
    "ggplot2",
    "plotly",
    "offer",
    "aesthetic",
    "graphical",
    "plots",
    "users",
    "make",
    "reports",
    "data",
    "scripts",
    "embedded",
    "also",
    "interactive",
    "web",
    "apps",
    "allow",
    "users",
    "play",
    "results",
    "data",
    "dominant",
    "among",
    "programming",
    "languages",
    "developing",
    "statistical",
    "tools",
    "java",
    "platform",
    "independent",
    "programming",
    "language",
    "originally",
    "developed",
    "sun",
    "microsystems",
    "among",
    "top",
    "ranked",
    "programming",
    "languages",
    "used",
    "today",
    "java",
    "used",
    "number",
    "processes",
    "data",
    "analytics",
    "including",
    "cleaning",
    "data",
    "importing",
    "exporting",
    "data",
    "statistical",
    "analysis",
    "data",
    "visualization",
    "fact",
    "popular",
    "framework",
    "tools",
    "used",
    "big",
    "data",
    "typically",
    "written",
    "java",
    "hadoop",
    "hive",
    "spark",
    "perfectly",
    "suited",
    "speed",
    "critical",
    "projects",
    "unix",
    "linux",
    "shell",
    "computer",
    "program",
    "written",
    "unix",
    "shell",
    "series",
    "unix",
    "commands",
    "written",
    "plain",
    "text",
    "file",
    "accomplish",
    "specific",
    "task",
    "writing",
    "shell",
    "script",
    "fast",
    "easy",
    "useful",
    "repetitive",
    "tasks",
    "may",
    "time",
    "consuming",
    "execute",
    "typing",
    "one",
    "line",
    "time",
    "typical",
    "operations",
    "performed",
    "shell",
    "scripts",
    "include",
    "file",
    "manipulation",
    "program",
    "execution",
    "system",
    "administration",
    "tasks",
    "disk",
    "backups",
    "evaluating",
    "system",
    "logs",
    "installation",
    "scripts",
    "complex",
    "programs",
    "executing",
    "routine",
    "backups",
    "running",
    "batches",
    "powershell",
    "automation",
    "tool",
    "configuration",
    "framework",
    "microsoft",
    "optimized",
    "working",
    "structured",
    "data",
    "formats",
    "json",
    "csv",
    "xml",
    "rest",
    "apis",
    "websites",
    "office",
    "applications",
    "consists",
    "command",
    "line",
    "shell",
    "scripting",
    "language",
    "powershell",
    "makes",
    "possible",
    "filter",
    "sort",
    "measure",
    "group",
    "compare",
    "many",
    "actions",
    "objects",
    "pass",
    "data",
    "pipeline",
    "also",
    "good",
    "tool",
    "data",
    "mining",
    "building",
    "guis",
    "creating",
    "charts",
    "dashboards",
    "interactive",
    "reports",
    "data",
    "repository",
    "general",
    "term",
    "used",
    "refer",
    "data",
    "collected",
    "organized",
    "isolated",
    "used",
    "business",
    "operations",
    "mined",
    "reporting",
    "data",
    "analysis",
    "small",
    "large",
    "database",
    "infrastructure",
    "one",
    "databases",
    "collect",
    "manage",
    "store",
    "data",
    "sets",
    "video",
    "provide",
    "overview",
    "different",
    "types",
    "repositories",
    "data",
    "might",
    "reside",
    "databases",
    "data",
    "warehouses",
    "big",
    "data",
    "stores",
    "examine",
    "greater",
    "detail",
    "videos",
    "let",
    "begin",
    "databases",
    "database",
    "collection",
    "data",
    "information",
    "designed",
    "input",
    "storage",
    "search",
    "retrieval",
    "modification",
    "data",
    "database",
    "management",
    "system",
    "dbms",
    "set",
    "programs",
    "creates",
    "maintains",
    "database",
    "allows",
    "store",
    "modify",
    "extract",
    "information",
    "database",
    "using",
    "function",
    "called",
    "querying",
    "example",
    "want",
    "find",
    "customers",
    "inactive",
    "six",
    "months",
    "using",
    "querying",
    "function",
    "database",
    "management",
    "system",
    "retrieve",
    "data",
    "customers",
    "database",
    "inactive",
    "six",
    "months",
    "even",
    "though",
    "database",
    "dbms",
    "mean",
    "different",
    "things",
    "terms",
    "often",
    "used",
    "interchangeably",
    "different",
    "types",
    "databases",
    "several",
    "factors",
    "influence",
    "choice",
    "database",
    "data",
    "type",
    "structure",
    "querying",
    "mechanisms",
    "latency",
    "requirements",
    "transaction",
    "speeds",
    "intended",
    "use",
    "data",
    "important",
    "mention",
    "two",
    "main",
    "types",
    "databases",
    "relational",
    "databases",
    "relational",
    "databases",
    "also",
    "referred",
    "rdbms",
    "built",
    "organizational",
    "principles",
    "flat",
    "files",
    "data",
    "organized",
    "tabular",
    "format",
    "rows",
    "columns",
    "following",
    "structure",
    "schema",
    "however",
    "unlike",
    "flat",
    "files",
    "rdbms",
    "optimized",
    "data",
    "operations",
    "querying",
    "involving",
    "many",
    "tables",
    "much",
    "larger",
    "data",
    "volumes",
    "structured",
    "query",
    "language",
    "sql",
    "standard",
    "querying",
    "language",
    "relational",
    "databases",
    "databases",
    "also",
    "known",
    "nosql",
    "sql",
    "databases",
    "emerged",
    "response",
    "volume",
    "diversity",
    "speed",
    "data",
    "generated",
    "today",
    "mainly",
    "influenced",
    "advances",
    "cloud",
    "computing",
    "internet",
    "things",
    "social",
    "media",
    "proliferation",
    "built",
    "speed",
    "flexibility",
    "scale",
    "databases",
    "made",
    "possible",
    "store",
    "data",
    "schema",
    "list",
    "free",
    "form",
    "fashion",
    "sql",
    "widely",
    "used",
    "processing",
    "big",
    "data",
    "data",
    "warehouse",
    "works",
    "central",
    "repository",
    "merges",
    "information",
    "coming",
    "disparate",
    "sources",
    "consolidates",
    "extract",
    "transform",
    "load",
    "process",
    "also",
    "known",
    "etl",
    "process",
    "one",
    "comprehensive",
    "database",
    "analytics",
    "business",
    "intelligence",
    "high",
    "level",
    "etl",
    "process",
    "helps",
    "extract",
    "data",
    "different",
    "data",
    "sources",
    "transform",
    "data",
    "clean",
    "usable",
    "state",
    "load",
    "data",
    "enterprise",
    "data",
    "repository",
    "related",
    "data",
    "warehouses",
    "concepts",
    "data",
    "marts",
    "data",
    "lakes",
    "cover",
    "later",
    "data",
    "marts",
    "data",
    "warehouses",
    "historically",
    "relational",
    "since",
    "much",
    "traditional",
    "enterprise",
    "data",
    "resided",
    "rdbms",
    "however",
    "emergence",
    "sql",
    "technologies",
    "new",
    "sources",
    "data",
    "data",
    "repositories",
    "also",
    "used",
    "data",
    "warehousing",
    "another",
    "category",
    "data",
    "repositories",
    "big",
    "data",
    "stores",
    "include",
    "distributed",
    "computational",
    "storage",
    "infrastructure",
    "store",
    "scale",
    "process",
    "large",
    "data",
    "sets",
    "overall",
    "data",
    "repositories",
    "help",
    "isolate",
    "data",
    "make",
    "reporting",
    "analytics",
    "efficient",
    "credible",
    "also",
    "serving",
    "data",
    "archive",
    "music",
    "relational",
    "database",
    "collection",
    "data",
    "organized",
    "table",
    "structure",
    "tables",
    "linked",
    "related",
    "based",
    "data",
    "common",
    "tables",
    "made",
    "rows",
    "columns",
    "rows",
    "records",
    "columns",
    "attributes",
    "let",
    "take",
    "example",
    "customer",
    "table",
    "maintains",
    "data",
    "customer",
    "company",
    "columns",
    "attributes",
    "customer",
    "table",
    "customer",
    "id",
    "customer",
    "name",
    "customer",
    "address",
    "customer",
    "primary",
    "phone",
    "row",
    "customer",
    "record",
    "let",
    "understand",
    "mean",
    "tables",
    "linked",
    "related",
    "based",
    "data",
    "common",
    "along",
    "customer",
    "table",
    "company",
    "also",
    "maintains",
    "transaction",
    "tables",
    "contain",
    "data",
    "describing",
    "multiple",
    "individual",
    "transactions",
    "pertaining",
    "customer",
    "columns",
    "transaction",
    "table",
    "might",
    "include",
    "transaction",
    "date",
    "customer",
    "id",
    "transaction",
    "amount",
    "payment",
    "method",
    "customer",
    "table",
    "transaction",
    "tables",
    "related",
    "based",
    "common",
    "customer",
    "id",
    "field",
    "query",
    "customer",
    "table",
    "produce",
    "reports",
    "customer",
    "statement",
    "consolidates",
    "transactions",
    "given",
    "period",
    "capability",
    "relating",
    "tables",
    "based",
    "common",
    "data",
    "enables",
    "retrieve",
    "entirely",
    "new",
    "table",
    "data",
    "one",
    "tables",
    "single",
    "query",
    "also",
    "allows",
    "understand",
    "relationships",
    "among",
    "available",
    "data",
    "gain",
    "new",
    "insights",
    "making",
    "better",
    "decisions",
    "relational",
    "databases",
    "use",
    "structured",
    "query",
    "language",
    "sql",
    "querying",
    "data",
    "learn",
    "sql",
    "later",
    "course",
    "relational",
    "databases",
    "build",
    "organizational",
    "principles",
    "flat",
    "files",
    "spreadsheets",
    "data",
    "organized",
    "rows",
    "columns",
    "following",
    "structure",
    "schema",
    "similarity",
    "ends",
    "relational",
    "databases",
    "design",
    "ideal",
    "optimized",
    "storage",
    "retrieval",
    "processing",
    "data",
    "large",
    "volumes",
    "data",
    "unlike",
    "spreadsheets",
    "limited",
    "number",
    "rows",
    "columns",
    "table",
    "relational",
    "database",
    "unique",
    "set",
    "rows",
    "columns",
    "relationships",
    "defined",
    "tables",
    "minimizes",
    "data",
    "redundancy",
    "moreover",
    "restrict",
    "database",
    "fields",
    "specific",
    "data",
    "types",
    "values",
    "minimizes",
    "irregularities",
    "leads",
    "greater",
    "consistency",
    "data",
    "integrity",
    "relational",
    "databases",
    "use",
    "sql",
    "querying",
    "data",
    "gives",
    "advantage",
    "processing",
    "millions",
    "records",
    "retrieving",
    "large",
    "amounts",
    "data",
    "matter",
    "seconds",
    "moreover",
    "security",
    "architecture",
    "relational",
    "databases",
    "provides",
    "controlled",
    "access",
    "data",
    "also",
    "ensures",
    "standards",
    "policies",
    "governing",
    "data",
    "enforced",
    "relational",
    "databases",
    "range",
    "small",
    "desktop",
    "systems",
    "massive",
    "systems",
    "either",
    "open",
    "source",
    "internally",
    "supported",
    "open",
    "source",
    "commercial",
    "support",
    "commercial",
    "systems",
    "ibm",
    "db2",
    "microsoft",
    "sql",
    "server",
    "mysql",
    "oracle",
    "database",
    "postgresql",
    "popular",
    "relational",
    "databases",
    "relational",
    "databases",
    "also",
    "referred",
    "database",
    "service",
    "gaining",
    "wide",
    "use",
    "access",
    "limitless",
    "compute",
    "storage",
    "capabilities",
    "offered",
    "cloud",
    "popular",
    "cloud",
    "relational",
    "databases",
    "include",
    "amazon",
    "relational",
    "database",
    "service",
    "rds",
    "google",
    "cloud",
    "sql",
    "ibm",
    "db2",
    "cloud",
    "oracle",
    "cloud",
    "sql",
    "azure",
    "rdbms",
    "mature",
    "technology",
    "making",
    "easy",
    "learn",
    "find",
    "qualified",
    "talent",
    "one",
    "significant",
    "advantages",
    "relational",
    "database",
    "approach",
    "ability",
    "create",
    "meaningful",
    "information",
    "joining",
    "tables",
    "advantages",
    "include",
    "flexibility",
    "using",
    "sql",
    "add",
    "new",
    "columns",
    "add",
    "new",
    "tables",
    "rename",
    "relations",
    "make",
    "changes",
    "database",
    "running",
    "queries",
    "happening",
    "reduced",
    "redundancy",
    "relational",
    "databases",
    "minimize",
    "data",
    "redundancy",
    "example",
    "information",
    "customer",
    "appears",
    "single",
    "entry",
    "customer",
    "table",
    "transaction",
    "table",
    "pertaining",
    "customer",
    "stores",
    "link",
    "customer",
    "table",
    "ease",
    "backup",
    "disaster",
    "recovery",
    "relational",
    "databases",
    "offer",
    "easy",
    "export",
    "import",
    "options",
    "making",
    "backup",
    "restore",
    "easy",
    "exports",
    "happen",
    "database",
    "running",
    "making",
    "restore",
    "failure",
    "easy",
    "relational",
    "databases",
    "continuous",
    "mirroring",
    "means",
    "loss",
    "data",
    "restore",
    "measured",
    "seconds",
    "less",
    "acid",
    "compliance",
    "asset",
    "stands",
    "atomicity",
    "consistency",
    "isolation",
    "durability",
    "asset",
    "compliance",
    "implies",
    "data",
    "database",
    "remains",
    "accurate",
    "consistent",
    "despite",
    "failures",
    "database",
    "transactions",
    "processed",
    "reliably",
    "look",
    "use",
    "cases",
    "relational",
    "databases",
    "online",
    "transaction",
    "processing",
    "oltp",
    "applications",
    "focused",
    "transaction",
    "oriented",
    "tasks",
    "run",
    "high",
    "rates",
    "relational",
    "databases",
    "well",
    "suited",
    "oltp",
    "applications",
    "accommodate",
    "large",
    "number",
    "users",
    "support",
    "ability",
    "insert",
    "update",
    "delete",
    "small",
    "amounts",
    "data",
    "also",
    "support",
    "frequent",
    "queries",
    "updates",
    "well",
    "fast",
    "response",
    "times",
    "data",
    "warehouses",
    "data",
    "warehousing",
    "environment",
    "relational",
    "databases",
    "optimized",
    "online",
    "analytical",
    "processing",
    "olap",
    "historical",
    "data",
    "analyzed",
    "business",
    "intelligence",
    "iot",
    "solutions",
    "internet",
    "things",
    "iot",
    "solutions",
    "require",
    "speed",
    "well",
    "ability",
    "collect",
    "process",
    "data",
    "edge",
    "devices",
    "need",
    "lightweight",
    "database",
    "solution",
    "brings",
    "us",
    "limitations",
    "rdbms",
    "rdbms",
    "work",
    "well",
    "unstructured",
    "data",
    "therefore",
    "suitable",
    "extensive",
    "analytics",
    "data",
    "migration",
    "two",
    "rdbms",
    "schemas",
    "type",
    "data",
    "need",
    "identical",
    "source",
    "destination",
    "tables",
    "relational",
    "databases",
    "limit",
    "length",
    "data",
    "fields",
    "means",
    "try",
    "enter",
    "information",
    "field",
    "accommodate",
    "information",
    "stored",
    "despite",
    "limitations",
    "evolution",
    "data",
    "times",
    "big",
    "data",
    "cloud",
    "computing",
    "iot",
    "devices",
    "social",
    "media",
    "rdbms",
    "continues",
    "predominant",
    "technology",
    "working",
    "structured",
    "data",
    "foreign",
    "music",
    "stands",
    "sql",
    "sometimes",
    "database",
    "design",
    "provides",
    "flexible",
    "schemas",
    "storage",
    "retrieval",
    "data",
    "sql",
    "databases",
    "existed",
    "many",
    "years",
    "recently",
    "become",
    "popular",
    "era",
    "cloud",
    "big",
    "data",
    "high",
    "volume",
    "web",
    "mobile",
    "applications",
    "chosen",
    "today",
    "attributes",
    "around",
    "scale",
    "performance",
    "ease",
    "use",
    "important",
    "emphasize",
    "sql",
    "abbreviation",
    "actual",
    "word",
    "sql",
    "databases",
    "built",
    "specific",
    "data",
    "models",
    "flexible",
    "schemas",
    "allow",
    "programmers",
    "create",
    "manage",
    "modern",
    "applications",
    "use",
    "traditional",
    "row",
    "column",
    "table",
    "database",
    "design",
    "fixed",
    "schemas",
    "typically",
    "use",
    "structured",
    "query",
    "language",
    "sql",
    "query",
    "data",
    "although",
    "may",
    "support",
    "sql",
    "sql",
    "like",
    "interfaces",
    "sql",
    "allows",
    "data",
    "stored",
    "free",
    "form",
    "fashion",
    "data",
    "structured",
    "unstructured",
    "stored",
    "record",
    "based",
    "model",
    "used",
    "storing",
    "data",
    "four",
    "common",
    "types",
    "sql",
    "databases",
    "key",
    "value",
    "store",
    "document",
    "based",
    "column",
    "based",
    "graph",
    "based",
    "key",
    "value",
    "store",
    "data",
    "key",
    "value",
    "database",
    "stored",
    "collection",
    "key",
    "value",
    "pairs",
    "key",
    "represents",
    "attribute",
    "data",
    "unique",
    "identifier",
    "keys",
    "values",
    "anything",
    "simple",
    "integers",
    "strings",
    "complex",
    "json",
    "documents",
    "key",
    "value",
    "stores",
    "great",
    "storing",
    "user",
    "session",
    "data",
    "user",
    "preferences",
    "making",
    "recommendations",
    "targeted",
    "advertising",
    "data",
    "caching",
    "however",
    "want",
    "able",
    "query",
    "data",
    "specific",
    "data",
    "value",
    "need",
    "relationships",
    "data",
    "values",
    "need",
    "multiple",
    "unique",
    "keys",
    "key",
    "value",
    "store",
    "may",
    "best",
    "fit",
    "redis",
    "memcache",
    "dynamodb",
    "examples",
    "category",
    "document",
    "based",
    "document",
    "databases",
    "store",
    "record",
    "associated",
    "data",
    "within",
    "single",
    "document",
    "enable",
    "flexible",
    "indexing",
    "powerful",
    "queries",
    "analytics",
    "collections",
    "documents",
    "document",
    "databases",
    "preferable",
    "platforms",
    "medical",
    "records",
    "storage",
    "crm",
    "platforms",
    "analytics",
    "platforms",
    "however",
    "looking",
    "run",
    "complex",
    "search",
    "queries",
    "transactions",
    "database",
    "may",
    "best",
    "option",
    "mongodb",
    "documentdb",
    "couchdb",
    "cloudant",
    "popular",
    "databases",
    "column",
    "based",
    "column",
    "based",
    "models",
    "store",
    "data",
    "cells",
    "grouped",
    "columns",
    "data",
    "instead",
    "rows",
    "logical",
    "grouping",
    "columns",
    "columns",
    "usually",
    "accessed",
    "together",
    "called",
    "column",
    "family",
    "example",
    "customer",
    "name",
    "profile",
    "information",
    "likely",
    "accessed",
    "together",
    "purchase",
    "history",
    "customer",
    "name",
    "profile",
    "information",
    "data",
    "grouped",
    "column",
    "family",
    "since",
    "column",
    "databases",
    "store",
    "cells",
    "corresponding",
    "column",
    "continuous",
    "disk",
    "entry",
    "accessing",
    "searching",
    "data",
    "becomes",
    "fast",
    "column",
    "databases",
    "great",
    "systems",
    "require",
    "heavy",
    "write",
    "requests",
    "storing",
    "time",
    "series",
    "data",
    "weather",
    "data",
    "iot",
    "data",
    "need",
    "use",
    "complex",
    "queries",
    "change",
    "querying",
    "patterns",
    "frequently",
    "may",
    "best",
    "option",
    "popular",
    "column",
    "databases",
    "cassandra",
    "hbase",
    "graph",
    "based",
    "databases",
    "use",
    "graphical",
    "model",
    "represent",
    "store",
    "data",
    "particularly",
    "useful",
    "visualizing",
    "analyzing",
    "finding",
    "connections",
    "different",
    "pieces",
    "data",
    "circles",
    "nodes",
    "contain",
    "data",
    "arrows",
    "represent",
    "relationships",
    "graph",
    "databases",
    "excellent",
    "choice",
    "working",
    "connected",
    "data",
    "data",
    "contains",
    "lots",
    "interconnected",
    "relationships",
    "graph",
    "databases",
    "great",
    "social",
    "networks",
    "product",
    "recommendations",
    "network",
    "diagrams",
    "fraud",
    "detection",
    "access",
    "management",
    "want",
    "process",
    "high",
    "volumes",
    "transactions",
    "may",
    "best",
    "choice",
    "graph",
    "databases",
    "optimized",
    "large",
    "volume",
    "analytics",
    "queries",
    "neo4j",
    "cosmos",
    "db",
    "popular",
    "graph",
    "databases",
    "sql",
    "created",
    "response",
    "limitations",
    "traditional",
    "relational",
    "database",
    "technology",
    "primary",
    "advantage",
    "sql",
    "ability",
    "handle",
    "large",
    "volumes",
    "structured",
    "unstructured",
    "data",
    "advantages",
    "include",
    "ability",
    "run",
    "distributed",
    "systems",
    "scaled",
    "across",
    "multiple",
    "data",
    "centers",
    "enables",
    "take",
    "advantage",
    "cloud",
    "computing",
    "infrastructure",
    "efficient",
    "cost",
    "effective",
    "scale",
    "architecture",
    "provides",
    "additional",
    "capacity",
    "performance",
    "addition",
    "new",
    "nodes",
    "simpler",
    "design",
    "better",
    "control",
    "availability",
    "improved",
    "scalability",
    "enables",
    "agile",
    "flexible",
    "iterate",
    "quickly",
    "summarize",
    "key",
    "differences",
    "relational",
    "databases",
    "rdbms",
    "schemas",
    "rigidly",
    "define",
    "data",
    "inserted",
    "database",
    "must",
    "typed",
    "composed",
    "whereas",
    "sql",
    "databases",
    "schema",
    "agnostic",
    "allowing",
    "unstructured",
    "data",
    "stored",
    "manipulated",
    "maintaining",
    "commercial",
    "relational",
    "database",
    "management",
    "systems",
    "expensive",
    "whereas",
    "sql",
    "databases",
    "specifically",
    "designed",
    "commodity",
    "hardware",
    "relational",
    "databases",
    "unlike",
    "nosql",
    "support",
    "acid",
    "compliance",
    "ensures",
    "reliability",
    "transactions",
    "crash",
    "recovery",
    "rdbms",
    "mature",
    "technology",
    "means",
    "risks",
    "less",
    "perceivable",
    "compared",
    "sql",
    "relatively",
    "newer",
    "technology",
    "nonetheless",
    "sql",
    "databases",
    "stay",
    "increasingly",
    "used",
    "mission",
    "critical",
    "applications",
    "foreign",
    "music",
    "earlier",
    "course",
    "examined",
    "databases",
    "data",
    "warehouses",
    "big",
    "data",
    "stores",
    "go",
    "little",
    "deeper",
    "exploration",
    "data",
    "warehouses",
    "data",
    "marts",
    "data",
    "lakes",
    "also",
    "learn",
    "etl",
    "process",
    "data",
    "pipelines",
    "data",
    "warehouse",
    "works",
    "like",
    "storage",
    "different",
    "use",
    "cases",
    "time",
    "data",
    "comes",
    "warehouse",
    "already",
    "modeled",
    "structured",
    "specific",
    "purpose",
    "meaning",
    "analysis",
    "ready",
    "organization",
    "would",
    "opt",
    "data",
    "warehouse",
    "massive",
    "amounts",
    "data",
    "operational",
    "systems",
    "need",
    "readily",
    "available",
    "reporting",
    "analysis",
    "data",
    "warehouses",
    "serve",
    "single",
    "source",
    "truth",
    "storing",
    "current",
    "historical",
    "data",
    "cleansed",
    "conformed",
    "categorized",
    "data",
    "warehouse",
    "enabler",
    "operational",
    "performance",
    "analytics",
    "data",
    "mart",
    "subsection",
    "data",
    "warehouse",
    "built",
    "specifically",
    "particular",
    "business",
    "function",
    "purpose",
    "community",
    "users",
    "idea",
    "provide",
    "stakeholders",
    "data",
    "relevant",
    "need",
    "example",
    "sales",
    "finance",
    "teams",
    "accessing",
    "data",
    "quarterly",
    "reports",
    "projections",
    "since",
    "data",
    "mart",
    "offers",
    "analytical",
    "capabilities",
    "restricted",
    "area",
    "data",
    "warehouse",
    "offers",
    "isolated",
    "security",
    "isolated",
    "performance",
    "important",
    "role",
    "data",
    "mart",
    "business",
    "specific",
    "reporting",
    "analytics",
    "data",
    "lake",
    "storage",
    "repository",
    "store",
    "large",
    "amounts",
    "structured",
    "unstructured",
    "data",
    "native",
    "format",
    "classified",
    "tagged",
    "metadata",
    "data",
    "warehouse",
    "stores",
    "data",
    "processed",
    "specific",
    "need",
    "data",
    "lake",
    "pool",
    "raw",
    "data",
    "data",
    "element",
    "given",
    "unique",
    "identifier",
    "tagged",
    "meta",
    "tags",
    "use",
    "would",
    "opt",
    "data",
    "lake",
    "generate",
    "access",
    "large",
    "volumes",
    "data",
    "ongoing",
    "basis",
    "want",
    "restricted",
    "specific",
    "predefined",
    "use",
    "cases",
    "unlike",
    "data",
    "warehouses",
    "data",
    "lake",
    "would",
    "retain",
    "source",
    "data",
    "without",
    "exclusions",
    "data",
    "could",
    "include",
    "types",
    "data",
    "sources",
    "types",
    "data",
    "lakes",
    "sometimes",
    "also",
    "used",
    "staging",
    "area",
    "data",
    "warehouse",
    "important",
    "role",
    "data",
    "lake",
    "predictive",
    "advanced",
    "analytics",
    "come",
    "process",
    "heart",
    "gaining",
    "value",
    "data",
    "extract",
    "transform",
    "load",
    "process",
    "etl",
    "etl",
    "raw",
    "data",
    "converted",
    "analysis",
    "ready",
    "data",
    "automated",
    "process",
    "gather",
    "raw",
    "data",
    "identified",
    "sources",
    "extract",
    "information",
    "aligns",
    "reporting",
    "analysis",
    "needs",
    "clean",
    "standardize",
    "transform",
    "data",
    "format",
    "usable",
    "context",
    "organization",
    "load",
    "data",
    "repository",
    "etl",
    "generic",
    "process",
    "actual",
    "job",
    "different",
    "usage",
    "utility",
    "complexity",
    "extract",
    "step",
    "data",
    "source",
    "locations",
    "collected",
    "transformation",
    "data",
    "extraction",
    "could",
    "batch",
    "processing",
    "meaning",
    "source",
    "data",
    "moved",
    "large",
    "chunks",
    "source",
    "target",
    "system",
    "scheduled",
    "intervals",
    "tools",
    "batch",
    "processing",
    "include",
    "stitch",
    "blendo",
    "stream",
    "processing",
    "means",
    "source",
    "data",
    "pulled",
    "real",
    "time",
    "source",
    "transformed",
    "transit",
    "loaded",
    "data",
    "repository",
    "tools",
    "stream",
    "processing",
    "include",
    "apache",
    "samsa",
    "apache",
    "storm",
    "apache",
    "kafka",
    "transform",
    "involves",
    "execution",
    "rules",
    "functions",
    "convert",
    "raw",
    "data",
    "data",
    "used",
    "analysis",
    "example",
    "making",
    "date",
    "formats",
    "units",
    "measurement",
    "consistent",
    "across",
    "source",
    "data",
    "removing",
    "duplicate",
    "data",
    "filtering",
    "data",
    "need",
    "enriching",
    "data",
    "example",
    "splitting",
    "full",
    "name",
    "first",
    "middle",
    "last",
    "names",
    "establishing",
    "key",
    "relationships",
    "across",
    "tables",
    "applying",
    "business",
    "rules",
    "data",
    "validations",
    "load",
    "step",
    "process",
    "data",
    "transported",
    "destination",
    "system",
    "data",
    "repository",
    "could",
    "initial",
    "loading",
    "populating",
    "data",
    "repository",
    "incremental",
    "loading",
    "applying",
    "ongoing",
    "updates",
    "modifications",
    "needed",
    "periodically",
    "full",
    "refresh",
    "erasing",
    "contents",
    "one",
    "tables",
    "reloading",
    "fresh",
    "data",
    "load",
    "verification",
    "includes",
    "data",
    "checks",
    "missing",
    "null",
    "values",
    "server",
    "performance",
    "monitoring",
    "load",
    "failures",
    "important",
    "process",
    "step",
    "vital",
    "keep",
    "eye",
    "load",
    "failures",
    "ensure",
    "right",
    "recovery",
    "mechanisms",
    "place",
    "etl",
    "historically",
    "used",
    "batch",
    "workloads",
    "large",
    "scale",
    "however",
    "emergence",
    "streaming",
    "etl",
    "tools",
    "increasingly",
    "used",
    "streaming",
    "event",
    "data",
    "well",
    "common",
    "see",
    "terms",
    "etl",
    "data",
    "pipelines",
    "used",
    "interchangeably",
    "although",
    "move",
    "data",
    "source",
    "destination",
    "data",
    "pipeline",
    "broader",
    "term",
    "encompasses",
    "entire",
    "journey",
    "moving",
    "data",
    "one",
    "system",
    "another",
    "etl",
    "subset",
    "data",
    "pipelines",
    "architected",
    "batch",
    "processing",
    "streaming",
    "data",
    "combination",
    "batch",
    "streaming",
    "data",
    "case",
    "streaming",
    "data",
    "data",
    "processing",
    "transformation",
    "happens",
    "continuous",
    "flow",
    "particularly",
    "useful",
    "data",
    "needs",
    "constant",
    "updating",
    "data",
    "sensor",
    "monitoring",
    "traffic",
    "data",
    "pipeline",
    "high",
    "performing",
    "system",
    "supports",
    "batch",
    "queries",
    "smaller",
    "interactive",
    "queries",
    "destination",
    "data",
    "pipeline",
    "typically",
    "data",
    "lake",
    "although",
    "data",
    "may",
    "also",
    "loaded",
    "different",
    "target",
    "destinations",
    "another",
    "application",
    "visualization",
    "tool",
    "number",
    "data",
    "pipeline",
    "solutions",
    "available",
    "popular",
    "among",
    "apache",
    "beam",
    "data",
    "flow",
    "music",
    "digital",
    "world",
    "everyone",
    "leaves",
    "trace",
    "travel",
    "habits",
    "workouts",
    "entertainment",
    "increasing",
    "number",
    "internet",
    "connected",
    "devices",
    "interact",
    "daily",
    "basis",
    "record",
    "vast",
    "amounts",
    "data",
    "us",
    "even",
    "name",
    "big",
    "data",
    "ernst",
    "young",
    "offers",
    "following",
    "definition",
    "big",
    "data",
    "refers",
    "dynamic",
    "large",
    "disparate",
    "volumes",
    "data",
    "created",
    "people",
    "tools",
    "machines",
    "requires",
    "new",
    "innovative",
    "scalable",
    "technology",
    "collect",
    "host",
    "analytically",
    "process",
    "vast",
    "amount",
    "data",
    "gathered",
    "order",
    "derive",
    "business",
    "insights",
    "relate",
    "consumers",
    "risk",
    "profit",
    "performance",
    "productivity",
    "management",
    "enhanced",
    "shareholder",
    "value",
    "one",
    "definition",
    "big",
    "data",
    "certain",
    "elements",
    "common",
    "across",
    "different",
    "definitions",
    "velocity",
    "volume",
    "variety",
    "veracity",
    "value",
    "v",
    "big",
    "data",
    "velocity",
    "speed",
    "data",
    "accumulates",
    "data",
    "generated",
    "extremely",
    "fast",
    "process",
    "never",
    "stops",
    "near",
    "streaming",
    "local",
    "technologies",
    "process",
    "information",
    "quickly",
    "volume",
    "scale",
    "data",
    "increase",
    "amount",
    "data",
    "stored",
    "drivers",
    "volume",
    "increase",
    "data",
    "sources",
    "higher",
    "resolution",
    "sensors",
    "scalable",
    "infrastructure",
    "variety",
    "diversity",
    "data",
    "structured",
    "data",
    "fits",
    "neatly",
    "rows",
    "columns",
    "relational",
    "databases",
    "unstructured",
    "data",
    "organized",
    "predefined",
    "way",
    "like",
    "tweets",
    "blog",
    "posts",
    "pictures",
    "numbers",
    "video",
    "variety",
    "also",
    "reflects",
    "data",
    "comes",
    "different",
    "sources",
    "machines",
    "people",
    "processes",
    "internal",
    "external",
    "organizations",
    "drivers",
    "mobile",
    "technologies",
    "social",
    "media",
    "wearable",
    "technologies",
    "geotechnologies",
    "video",
    "many",
    "many",
    "veracity",
    "quality",
    "origin",
    "data",
    "conformity",
    "facts",
    "accuracy",
    "attributes",
    "include",
    "consistency",
    "completeness",
    "integrity",
    "ambiguity",
    "drivers",
    "include",
    "cost",
    "need",
    "traceability",
    "large",
    "amount",
    "data",
    "available",
    "debate",
    "rages",
    "accuracy",
    "data",
    "digital",
    "age",
    "information",
    "real",
    "false",
    "value",
    "ability",
    "need",
    "turn",
    "data",
    "value",
    "value",
    "profit",
    "may",
    "medical",
    "social",
    "benefits",
    "well",
    "customer",
    "employee",
    "personal",
    "satisfaction",
    "main",
    "reason",
    "people",
    "invest",
    "time",
    "understand",
    "big",
    "data",
    "derive",
    "value",
    "let",
    "look",
    "examples",
    "v",
    "action",
    "velocity",
    "every",
    "60",
    "seconds",
    "hours",
    "footage",
    "uploaded",
    "youtube",
    "generating",
    "data",
    "think",
    "quickly",
    "data",
    "accumulates",
    "hours",
    "days",
    "years",
    "volume",
    "world",
    "population",
    "approximately",
    "7",
    "billion",
    "people",
    "vast",
    "majority",
    "using",
    "digital",
    "devices",
    "mobile",
    "phones",
    "desktop",
    "laptop",
    "computers",
    "wearable",
    "devices",
    "devices",
    "generate",
    "capture",
    "store",
    "data",
    "approximately",
    "quintillion",
    "bytes",
    "every",
    "day",
    "equivalent",
    "10",
    "million",
    "dvds",
    "variety",
    "let",
    "think",
    "different",
    "types",
    "data",
    "text",
    "pictures",
    "film",
    "sound",
    "health",
    "data",
    "wearable",
    "devices",
    "many",
    "different",
    "types",
    "data",
    "devices",
    "connected",
    "internet",
    "things",
    "veracity",
    "eighty",
    "percent",
    "data",
    "considered",
    "unstructured",
    "must",
    "devise",
    "ways",
    "produce",
    "reliable",
    "accurate",
    "insights",
    "data",
    "must",
    "categorized",
    "analyzed",
    "visualized",
    "data",
    "scientists",
    "today",
    "derive",
    "insights",
    "big",
    "data",
    "cope",
    "challenges",
    "massive",
    "data",
    "sets",
    "present",
    "scale",
    "data",
    "collected",
    "means",
    "feasible",
    "use",
    "conventional",
    "data",
    "analysis",
    "tools",
    "however",
    "alternative",
    "tools",
    "leverage",
    "distributed",
    "computing",
    "power",
    "overcome",
    "problem",
    "tools",
    "apache",
    "spark",
    "hadoop",
    "ecosystem",
    "provides",
    "ways",
    "extract",
    "load",
    "analyze",
    "process",
    "data",
    "across",
    "distributed",
    "compute",
    "resources",
    "providing",
    "new",
    "insights",
    "knowledge",
    "gives",
    "organizations",
    "ways",
    "connect",
    "customers",
    "enrich",
    "services",
    "offer",
    "next",
    "time",
    "strap",
    "smartwatch",
    "unlock",
    "smartphone",
    "track",
    "workout",
    "remember",
    "data",
    "starting",
    "journey",
    "might",
    "take",
    "way",
    "around",
    "world",
    "big",
    "data",
    "analysis",
    "back",
    "foreign",
    "big",
    "data",
    "processing",
    "technologies",
    "provide",
    "ways",
    "work",
    "large",
    "sets",
    "structured",
    "unstructured",
    "data",
    "value",
    "derived",
    "big",
    "data",
    "videos",
    "discussed",
    "big",
    "data",
    "technologies",
    "nosql",
    "databases",
    "data",
    "lakes",
    "video",
    "going",
    "talk",
    "three",
    "open",
    "source",
    "technologies",
    "role",
    "play",
    "big",
    "data",
    "analytics",
    "apache",
    "hadoop",
    "apache",
    "hive",
    "apache",
    "spark",
    "hadoop",
    "collection",
    "tools",
    "provides",
    "distributed",
    "storage",
    "processing",
    "big",
    "data",
    "hive",
    "data",
    "warehouse",
    "data",
    "query",
    "analysis",
    "built",
    "top",
    "hadoop",
    "spark",
    "distributed",
    "data",
    "analytics",
    "framework",
    "designed",
    "perform",
    "complex",
    "data",
    "analytics",
    "real",
    "time",
    "hadoop",
    "java",
    "based",
    "open",
    "source",
    "framework",
    "allows",
    "distributed",
    "storage",
    "processing",
    "large",
    "data",
    "sets",
    "across",
    "clusters",
    "computers",
    "hadoop",
    "distributed",
    "system",
    "node",
    "single",
    "computer",
    "collection",
    "nodes",
    "forms",
    "cluster",
    "hadoop",
    "scale",
    "single",
    "node",
    "number",
    "nodes",
    "offering",
    "local",
    "storage",
    "computation",
    "hadoop",
    "provides",
    "reliable",
    "scalable",
    "solution",
    "storing",
    "data",
    "format",
    "requirements",
    "using",
    "hadoop",
    "incorporate",
    "emerging",
    "data",
    "formats",
    "streaming",
    "audio",
    "video",
    "social",
    "media",
    "sentiment",
    "click",
    "stream",
    "data",
    "along",
    "structured",
    "unstructured",
    "data",
    "traditionally",
    "used",
    "data",
    "warehouse",
    "provide",
    "access",
    "stakeholders",
    "optimize",
    "streamline",
    "costs",
    "enterprise",
    "data",
    "warehouse",
    "consolidating",
    "data",
    "across",
    "organization",
    "moving",
    "cold",
    "data",
    "data",
    "frequent",
    "use",
    "hadoop",
    "based",
    "system",
    "one",
    "four",
    "main",
    "components",
    "hadoop",
    "hadoop",
    "distributed",
    "file",
    "system",
    "hdfs",
    "storage",
    "system",
    "big",
    "data",
    "runs",
    "multiple",
    "commodity",
    "hardware",
    "connected",
    "network",
    "hdfs",
    "provides",
    "scalable",
    "reliable",
    "big",
    "data",
    "storage",
    "partitioning",
    "files",
    "multiple",
    "nodes",
    "splits",
    "large",
    "files",
    "across",
    "multiple",
    "computers",
    "allowing",
    "parallel",
    "access",
    "computations",
    "therefore",
    "run",
    "parallel",
    "node",
    "data",
    "stored",
    "also",
    "replicates",
    "file",
    "blocks",
    "different",
    "nodes",
    "prevent",
    "data",
    "loss",
    "making",
    "fault",
    "tolerant",
    "let",
    "understand",
    "example",
    "consider",
    "file",
    "includes",
    "phone",
    "numbers",
    "everyone",
    "united",
    "states",
    "numbers",
    "people",
    "last",
    "names",
    "starting",
    "might",
    "stored",
    "server",
    "one",
    "b",
    "server",
    "2",
    "hadoop",
    "pieces",
    "phone",
    "book",
    "would",
    "stored",
    "across",
    "cluster",
    "reconstruct",
    "entire",
    "phone",
    "book",
    "program",
    "would",
    "need",
    "blocks",
    "every",
    "server",
    "cluster",
    "hdfs",
    "also",
    "replicates",
    "smaller",
    "pieces",
    "two",
    "additional",
    "servers",
    "default",
    "ensuring",
    "availability",
    "server",
    "fails",
    "addition",
    "higher",
    "availability",
    "offers",
    "multiple",
    "benefits",
    "allows",
    "hadoop",
    "cluster",
    "break",
    "work",
    "smaller",
    "chunks",
    "run",
    "jobs",
    "servers",
    "cluster",
    "better",
    "scalability",
    "finally",
    "gain",
    "benefit",
    "data",
    "locality",
    "process",
    "moving",
    "computation",
    "closer",
    "node",
    "data",
    "resides",
    "critical",
    "working",
    "large",
    "data",
    "sets",
    "minimizes",
    "network",
    "congestion",
    "increases",
    "throughput",
    "benefits",
    "come",
    "using",
    "hdfs",
    "include",
    "fast",
    "recovery",
    "hardware",
    "failures",
    "hdfs",
    "built",
    "detect",
    "faults",
    "automatically",
    "recover",
    "access",
    "streaming",
    "data",
    "hgfs",
    "supports",
    "high",
    "data",
    "throughput",
    "rates",
    "accommodation",
    "large",
    "data",
    "sets",
    "hdfs",
    "scale",
    "hundreds",
    "nodes",
    "computers",
    "single",
    "cluster",
    "portability",
    "hdfs",
    "portable",
    "across",
    "multiple",
    "hardware",
    "platforms",
    "compatible",
    "variety",
    "underlying",
    "operating",
    "systems",
    "hive",
    "open",
    "source",
    "data",
    "warehouse",
    "software",
    "reading",
    "writing",
    "managing",
    "large",
    "data",
    "set",
    "files",
    "stored",
    "directly",
    "either",
    "hdfs",
    "data",
    "storage",
    "systems",
    "apache",
    "hbase",
    "hadoop",
    "intended",
    "long",
    "sequential",
    "scans",
    "hive",
    "based",
    "hadoop",
    "queries",
    "high",
    "latency",
    "means",
    "hive",
    "less",
    "appropriate",
    "applications",
    "need",
    "fast",
    "response",
    "times",
    "hive",
    "suitable",
    "transaction",
    "processing",
    "typically",
    "involves",
    "high",
    "percentage",
    "right",
    "operations",
    "hive",
    "better",
    "suited",
    "data",
    "warehousing",
    "tasks",
    "etl",
    "reporting",
    "data",
    "analysis",
    "includes",
    "tools",
    "enable",
    "easy",
    "access",
    "data",
    "via",
    "sql",
    "brings",
    "us",
    "spark",
    "general",
    "purpose",
    "data",
    "processing",
    "engine",
    "designed",
    "extract",
    "process",
    "large",
    "volumes",
    "data",
    "wide",
    "range",
    "applications",
    "including",
    "interactive",
    "analytics",
    "streams",
    "processing",
    "machine",
    "learning",
    "data",
    "integration",
    "etl",
    "takes",
    "advantage",
    "processing",
    "significantly",
    "increase",
    "speed",
    "computations",
    "spilling",
    "disk",
    "memory",
    "constrained",
    "spark",
    "interfaces",
    "major",
    "programming",
    "languages",
    "java",
    "scala",
    "python",
    "r",
    "sql",
    "run",
    "using",
    "standalone",
    "clustering",
    "technology",
    "well",
    "top",
    "infrastructures",
    "hadoop",
    "access",
    "data",
    "large",
    "variety",
    "data",
    "sources",
    "including",
    "hdfs",
    "hive",
    "making",
    "highly",
    "versatile",
    "ability",
    "process",
    "streaming",
    "data",
    "fast",
    "perform",
    "complex",
    "analytics",
    "real",
    "time",
    "key",
    "use",
    "case",
    "apache",
    "spark",
    "music",
    "stage",
    "understanding",
    "problem",
    "desired",
    "outcome",
    "know",
    "want",
    "also",
    "metric",
    "know",
    "measured",
    "measured",
    "next",
    "step",
    "identify",
    "data",
    "need",
    "use",
    "case",
    "process",
    "identifying",
    "data",
    "begins",
    "determining",
    "information",
    "want",
    "collect",
    "step",
    "make",
    "decisions",
    "regarding",
    "specific",
    "information",
    "need",
    "possible",
    "sources",
    "data",
    "goals",
    "determine",
    "answers",
    "questions",
    "let",
    "take",
    "example",
    "product",
    "company",
    "wants",
    "create",
    "targeted",
    "marketing",
    "campaigns",
    "based",
    "age",
    "group",
    "buys",
    "products",
    "goal",
    "design",
    "reach",
    "outs",
    "appeal",
    "segment",
    "encourages",
    "influence",
    "friends",
    "peers",
    "buying",
    "products",
    "based",
    "use",
    "case",
    "obvious",
    "information",
    "identify",
    "includes",
    "customer",
    "profile",
    "purchase",
    "history",
    "location",
    "age",
    "education",
    "profession",
    "income",
    "marital",
    "status",
    "example",
    "ensure",
    "gain",
    "even",
    "greater",
    "insights",
    "segment",
    "may",
    "also",
    "decide",
    "collect",
    "customer",
    "complaint",
    "data",
    "segment",
    "understand",
    "kind",
    "issues",
    "face",
    "could",
    "discourage",
    "recommending",
    "products",
    "know",
    "satisfied",
    "resolution",
    "issues",
    "could",
    "collect",
    "ratings",
    "customer",
    "service",
    "surveys",
    "taking",
    "step",
    "forward",
    "may",
    "want",
    "understand",
    "customers",
    "talk",
    "products",
    "social",
    "media",
    "many",
    "connections",
    "engage",
    "discussions",
    "example",
    "likes",
    "shares",
    "comments",
    "posts",
    "receive",
    "next",
    "step",
    "process",
    "define",
    "plan",
    "collecting",
    "data",
    "need",
    "establish",
    "time",
    "frame",
    "collecting",
    "data",
    "identified",
    "data",
    "need",
    "may",
    "required",
    "ongoing",
    "basis",
    "defined",
    "period",
    "time",
    "collecting",
    "website",
    "visitor",
    "data",
    "example",
    "may",
    "need",
    "numbers",
    "refreshed",
    "real",
    "time",
    "tracking",
    "data",
    "specific",
    "event",
    "definitive",
    "beginning",
    "end",
    "date",
    "collecting",
    "data",
    "step",
    "also",
    "define",
    "much",
    "data",
    "would",
    "sufficient",
    "reach",
    "credible",
    "analysis",
    "volume",
    "defined",
    "segment",
    "example",
    "customers",
    "within",
    "age",
    "range",
    "21",
    "30",
    "years",
    "data",
    "set",
    "hundred",
    "thousand",
    "customers",
    "within",
    "age",
    "range",
    "21",
    "30",
    "also",
    "use",
    "step",
    "define",
    "dependencies",
    "risks",
    "mitigation",
    "plan",
    "several",
    "factors",
    "relevant",
    "initiative",
    "purpose",
    "plan",
    "establish",
    "clarity",
    "need",
    "execution",
    "third",
    "step",
    "process",
    "determine",
    "data",
    "collection",
    "methods",
    "step",
    "identify",
    "methods",
    "collecting",
    "data",
    "need",
    "define",
    "collect",
    "data",
    "data",
    "sources",
    "identified",
    "internal",
    "systems",
    "social",
    "media",
    "sites",
    "data",
    "providers",
    "methods",
    "depend",
    "type",
    "data",
    "time",
    "frame",
    "need",
    "data",
    "volume",
    "data",
    "plan",
    "data",
    "collection",
    "methods",
    "finalized",
    "implement",
    "data",
    "collection",
    "strategy",
    "start",
    "collecting",
    "data",
    "making",
    "updates",
    "plan",
    "go",
    "along",
    "conditions",
    "evolve",
    "implement",
    "plan",
    "ground",
    "data",
    "identify",
    "source",
    "data",
    "practices",
    "employ",
    "gathering",
    "data",
    "implications",
    "quality",
    "security",
    "privacy",
    "none",
    "considerations",
    "relevant",
    "life",
    "cycle",
    "data",
    "analysis",
    "process",
    "working",
    "data",
    "disparate",
    "sources",
    "without",
    "considering",
    "measures",
    "quality",
    "metric",
    "lead",
    "failure",
    "order",
    "reliable",
    "data",
    "needs",
    "free",
    "errors",
    "accurate",
    "complete",
    "relevant",
    "accessible",
    "need",
    "define",
    "quality",
    "traits",
    "metric",
    "checkpoints",
    "order",
    "ensure",
    "analysis",
    "going",
    "based",
    "quality",
    "data",
    "also",
    "need",
    "watch",
    "issues",
    "pertaining",
    "data",
    "governance",
    "security",
    "regulation",
    "compliances",
    "data",
    "governance",
    "policies",
    "procedures",
    "relate",
    "usability",
    "integrity",
    "availability",
    "data",
    "penalties",
    "run",
    "millions",
    "dollars",
    "hurt",
    "credibility",
    "findings",
    "also",
    "organization",
    "another",
    "important",
    "consideration",
    "data",
    "privacy",
    "data",
    "collect",
    "needs",
    "check",
    "boxes",
    "confidentiality",
    "license",
    "use",
    "compliance",
    "mandated",
    "regulations",
    "checks",
    "validations",
    "audible",
    "trail",
    "needs",
    "planned",
    "loss",
    "trust",
    "data",
    "used",
    "analysis",
    "compromise",
    "process",
    "result",
    "suspect",
    "findings",
    "invite",
    "penalties",
    "identifying",
    "right",
    "data",
    "important",
    "step",
    "data",
    "analysis",
    "process",
    "done",
    "right",
    "ensure",
    "able",
    "look",
    "problem",
    "multiple",
    "perspectives",
    "findings",
    "credible",
    "reliable",
    "music",
    "data",
    "sources",
    "internal",
    "external",
    "organization",
    "primary",
    "secondary",
    "sources",
    "data",
    "let",
    "look",
    "couple",
    "examples",
    "understand",
    "mean",
    "primary",
    "secondary",
    "sources",
    "data",
    "term",
    "primary",
    "data",
    "refers",
    "information",
    "obtained",
    "directly",
    "source",
    "could",
    "internal",
    "sources",
    "data",
    "organization",
    "crm",
    "hr",
    "workflow",
    "applications",
    "could",
    "also",
    "include",
    "data",
    "gather",
    "directly",
    "surveys",
    "interviews",
    "discussions",
    "observations",
    "focus",
    "groups",
    "secondary",
    "data",
    "refers",
    "information",
    "retrieved",
    "existing",
    "sources",
    "external",
    "databases",
    "research",
    "articles",
    "publications",
    "training",
    "material",
    "internet",
    "searches",
    "financial",
    "records",
    "available",
    "public",
    "data",
    "could",
    "also",
    "include",
    "data",
    "collected",
    "externally",
    "conducted",
    "surveys",
    "interviews",
    "discussions",
    "observations",
    "focus",
    "groups",
    "data",
    "data",
    "purchase",
    "aggregators",
    "collect",
    "data",
    "various",
    "sources",
    "combine",
    "comprehensive",
    "data",
    "sets",
    "purely",
    "purpose",
    "selling",
    "data",
    "look",
    "different",
    "sources",
    "could",
    "gathering",
    "data",
    "databases",
    "source",
    "primary",
    "secondary",
    "data",
    "organizations",
    "internal",
    "applications",
    "managing",
    "processes",
    "workflows",
    "customers",
    "external",
    "databases",
    "available",
    "subscription",
    "basis",
    "purchase",
    "significant",
    "number",
    "businesses",
    "currently",
    "moving",
    "cloud",
    "increasingly",
    "becoming",
    "source",
    "accessing",
    "information",
    "insights",
    "web",
    "source",
    "publicly",
    "available",
    "data",
    "available",
    "companies",
    "individuals",
    "free",
    "commercial",
    "use",
    "web",
    "rich",
    "source",
    "data",
    "available",
    "public",
    "domain",
    "could",
    "include",
    "textbooks",
    "government",
    "records",
    "papers",
    "articles",
    "public",
    "consumption",
    "social",
    "media",
    "sites",
    "interactive",
    "platforms",
    "facebook",
    "twitter",
    "google",
    "youtube",
    "instagram",
    "increasingly",
    "used",
    "source",
    "user",
    "data",
    "opinions",
    "businesses",
    "using",
    "data",
    "sources",
    "quantitative",
    "qualitative",
    "insights",
    "existing",
    "potential",
    "customers",
    "sensor",
    "data",
    "produced",
    "wearable",
    "devices",
    "smart",
    "buildings",
    "smart",
    "cities",
    "smartphones",
    "medical",
    "devices",
    "even",
    "household",
    "appliances",
    "widely",
    "used",
    "source",
    "data",
    "data",
    "exchange",
    "source",
    "data",
    "involves",
    "voluntary",
    "sharing",
    "data",
    "data",
    "providers",
    "data",
    "consumers",
    "individuals",
    "organizations",
    "governments",
    "could",
    "data",
    "providers",
    "data",
    "consumers",
    "data",
    "exchanged",
    "could",
    "include",
    "data",
    "coming",
    "business",
    "applications",
    "sensor",
    "devices",
    "social",
    "media",
    "activity",
    "location",
    "data",
    "consumer",
    "behavior",
    "data",
    "surveys",
    "gather",
    "information",
    "questionnaires",
    "distributed",
    "select",
    "group",
    "people",
    "example",
    "gauging",
    "interest",
    "existing",
    "customers",
    "spending",
    "updated",
    "version",
    "product",
    "surveys",
    "web",
    "census",
    "data",
    "also",
    "commonly",
    "used",
    "source",
    "gathering",
    "household",
    "data",
    "wealth",
    "income",
    "population",
    "data",
    "example",
    "interviews",
    "source",
    "gathering",
    "qualitative",
    "data",
    "participants",
    "opinions",
    "experiences",
    "example",
    "interview",
    "conducted",
    "understand",
    "challenges",
    "faced",
    "customer",
    "service",
    "executive",
    "interviews",
    "could",
    "telephonic",
    "web",
    "face",
    "face",
    "observation",
    "studies",
    "include",
    "monitoring",
    "participants",
    "specific",
    "environment",
    "performing",
    "particular",
    "task",
    "example",
    "observing",
    "users",
    "navigate",
    "site",
    "assess",
    "ease",
    "able",
    "find",
    "products",
    "make",
    "purchase",
    "data",
    "surveys",
    "interviews",
    "observation",
    "studies",
    "could",
    "available",
    "primary",
    "secondary",
    "data",
    "data",
    "sources",
    "never",
    "dynamic",
    "diverse",
    "today",
    "also",
    "evolving",
    "continuously",
    "supplementing",
    "primary",
    "data",
    "secondary",
    "data",
    "sources",
    "help",
    "explore",
    "problems",
    "solutions",
    "new",
    "meaningful",
    "ways",
    "foreign",
    "music",
    "learn",
    "different",
    "methods",
    "tools",
    "available",
    "gathering",
    "data",
    "data",
    "sources",
    "discussed",
    "earlier",
    "course",
    "databases",
    "web",
    "sensor",
    "data",
    "data",
    "exchanges",
    "several",
    "sources",
    "leveraged",
    "specific",
    "data",
    "needs",
    "also",
    "learn",
    "importing",
    "data",
    "different",
    "types",
    "data",
    "repositories",
    "sql",
    "structured",
    "query",
    "language",
    "querying",
    "language",
    "used",
    "extracting",
    "information",
    "relational",
    "databases",
    "sql",
    "offers",
    "simple",
    "commands",
    "specify",
    "retrieved",
    "database",
    "table",
    "needs",
    "extracted",
    "grouping",
    "records",
    "matching",
    "values",
    "dictating",
    "sequence",
    "query",
    "results",
    "displayed",
    "limiting",
    "number",
    "results",
    "returned",
    "query",
    "amongst",
    "host",
    "features",
    "functionalities",
    "databases",
    "queried",
    "using",
    "sql",
    "sql",
    "like",
    "query",
    "tools",
    "databases",
    "come",
    "querying",
    "tools",
    "cql",
    "cassandra",
    "graphql",
    "neo4j",
    "application",
    "programming",
    "interfaces",
    "apis",
    "also",
    "popularly",
    "used",
    "extracting",
    "data",
    "variety",
    "data",
    "sources",
    "apis",
    "invoked",
    "applications",
    "require",
    "data",
    "access",
    "endpoint",
    "containing",
    "data",
    "endpoints",
    "include",
    "databases",
    "web",
    "services",
    "data",
    "marketplaces",
    "apis",
    "also",
    "used",
    "data",
    "validation",
    "example",
    "data",
    "analyst",
    "may",
    "use",
    "api",
    "validate",
    "postal",
    "addresses",
    "zip",
    "codes",
    "web",
    "scraping",
    "also",
    "known",
    "screen",
    "scraping",
    "web",
    "harvesting",
    "used",
    "downloading",
    "specific",
    "data",
    "web",
    "pages",
    "based",
    "defined",
    "parameters",
    "among",
    "things",
    "web",
    "scraping",
    "used",
    "extract",
    "data",
    "text",
    "contact",
    "information",
    "images",
    "videos",
    "podcasts",
    "product",
    "items",
    "web",
    "property",
    "rss",
    "feeds",
    "another",
    "source",
    "typically",
    "used",
    "capturing",
    "updated",
    "data",
    "online",
    "forums",
    "new",
    "sites",
    "data",
    "refreshed",
    "ongoing",
    "basis",
    "data",
    "streams",
    "popular",
    "source",
    "aggregating",
    "constant",
    "streams",
    "data",
    "flowing",
    "sources",
    "instruments",
    "iot",
    "devices",
    "applications",
    "gps",
    "data",
    "cars",
    "data",
    "streams",
    "feeds",
    "also",
    "used",
    "extracting",
    "data",
    "social",
    "media",
    "sites",
    "interactive",
    "platforms",
    "data",
    "exchange",
    "platforms",
    "allow",
    "exchange",
    "data",
    "data",
    "providers",
    "data",
    "consumers",
    "data",
    "exchanges",
    "set",
    "exchange",
    "standards",
    "protocols",
    "formats",
    "relevant",
    "exchanging",
    "data",
    "platforms",
    "facilitate",
    "exchange",
    "data",
    "also",
    "ensure",
    "security",
    "governance",
    "maintained",
    "provide",
    "data",
    "licensing",
    "workflows",
    "protection",
    "personal",
    "information",
    "legal",
    "frameworks",
    "quarantined",
    "analytics",
    "environment",
    "examples",
    "popular",
    "data",
    "exchange",
    "platforms",
    "include",
    "aws",
    "data",
    "exchange",
    "crunchbase",
    "low",
    "snowflake",
    "numerous",
    "data",
    "sources",
    "tapped",
    "specific",
    "data",
    "needs",
    "marketing",
    "trends",
    "ad",
    "spending",
    "example",
    "research",
    "firms",
    "like",
    "forester",
    "business",
    "insider",
    "known",
    "provide",
    "reliable",
    "data",
    "research",
    "advisory",
    "firms",
    "gartner",
    "forrester",
    "widely",
    "trusted",
    "sources",
    "strategic",
    "operational",
    "guidance",
    "similarly",
    "many",
    "trusted",
    "names",
    "areas",
    "user",
    "behavior",
    "data",
    "mobile",
    "web",
    "usage",
    "market",
    "surveys",
    "demographic",
    "studies",
    "data",
    "identified",
    "gathered",
    "various",
    "data",
    "sources",
    "needs",
    "loaded",
    "imported",
    "data",
    "repository",
    "wrangled",
    "mined",
    "analyzed",
    "importing",
    "process",
    "involves",
    "combining",
    "data",
    "different",
    "sources",
    "provide",
    "combined",
    "view",
    "single",
    "interface",
    "using",
    "query",
    "manipulate",
    "data",
    "depending",
    "data",
    "type",
    "volume",
    "data",
    "type",
    "destination",
    "repository",
    "may",
    "need",
    "varying",
    "tools",
    "methods",
    "specific",
    "data",
    "repositories",
    "optimized",
    "certain",
    "types",
    "data",
    "relational",
    "databases",
    "store",
    "structured",
    "data",
    "schema",
    "using",
    "relational",
    "database",
    "destination",
    "system",
    "able",
    "store",
    "structured",
    "data",
    "data",
    "oltp",
    "systems",
    "spreadsheets",
    "online",
    "forms",
    "sensors",
    "network",
    "web",
    "logs",
    "structured",
    "data",
    "also",
    "stored",
    "nosql",
    "data",
    "data",
    "organizational",
    "properties",
    "rigid",
    "schema",
    "data",
    "emails",
    "xml",
    "zipped",
    "files",
    "binary",
    "executables",
    "tcp",
    "ip",
    "protocols",
    "stored",
    "sql",
    "clusters",
    "xml",
    "json",
    "commonly",
    "used",
    "storing",
    "exchanging",
    "data",
    "json",
    "also",
    "preferred",
    "data",
    "type",
    "web",
    "services",
    "unstructured",
    "data",
    "data",
    "structure",
    "organized",
    "schema",
    "data",
    "web",
    "pages",
    "social",
    "media",
    "feeds",
    "images",
    "videos",
    "documents",
    "media",
    "logs",
    "surveys",
    "sql",
    "databases",
    "data",
    "lakes",
    "provide",
    "good",
    "option",
    "store",
    "manipulate",
    "large",
    "volumes",
    "unstructured",
    "data",
    "data",
    "lakes",
    "accommodate",
    "data",
    "types",
    "schema",
    "etl",
    "tools",
    "data",
    "pipelines",
    "provide",
    "automated",
    "functions",
    "facilitate",
    "process",
    "importing",
    "data",
    "tools",
    "talent",
    "informatica",
    "programming",
    "languages",
    "python",
    "r",
    "libraries",
    "widely",
    "used",
    "importing",
    "data",
    "foreign",
    "music",
    "data",
    "wrangling",
    "also",
    "known",
    "data",
    "munging",
    "iterative",
    "process",
    "involves",
    "data",
    "exploration",
    "transformation",
    "validation",
    "making",
    "available",
    "credible",
    "meaningful",
    "analysis",
    "includes",
    "range",
    "tasks",
    "involved",
    "preparing",
    "raw",
    "data",
    "clearly",
    "defined",
    "purpose",
    "raw",
    "data",
    "stage",
    "data",
    "collected",
    "various",
    "data",
    "sources",
    "data",
    "repository",
    "data",
    "wrangling",
    "captures",
    "range",
    "tasks",
    "involved",
    "preparing",
    "data",
    "analysis",
    "typically",
    "process",
    "involves",
    "discovery",
    "transformation",
    "validation",
    "publishing",
    "discovery",
    "phase",
    "also",
    "known",
    "exploration",
    "phase",
    "understanding",
    "data",
    "better",
    "respect",
    "use",
    "case",
    "objective",
    "figure",
    "specifically",
    "best",
    "clean",
    "structure",
    "organize",
    "map",
    "data",
    "use",
    "case",
    "next",
    "phase",
    "transformation",
    "phase",
    "forms",
    "bulk",
    "data",
    "wrangling",
    "process",
    "involves",
    "tasks",
    "undertake",
    "transform",
    "data",
    "structuring",
    "normalizing",
    "denormalizing",
    "cleaning",
    "enriching",
    "data",
    "let",
    "begin",
    "first",
    "transformation",
    "task",
    "structuring",
    "task",
    "includes",
    "actions",
    "change",
    "form",
    "schema",
    "data",
    "incoming",
    "data",
    "varied",
    "formats",
    "might",
    "example",
    "data",
    "coming",
    "relational",
    "database",
    "data",
    "web",
    "apis",
    "order",
    "merge",
    "need",
    "change",
    "form",
    "schema",
    "data",
    "change",
    "may",
    "simple",
    "changing",
    "order",
    "fields",
    "within",
    "record",
    "data",
    "set",
    "complex",
    "combining",
    "fields",
    "complex",
    "structures",
    "joins",
    "unions",
    "common",
    "structural",
    "transformations",
    "used",
    "combine",
    "data",
    "one",
    "tables",
    "combine",
    "data",
    "different",
    "joins",
    "combine",
    "columns",
    "two",
    "tables",
    "joined",
    "together",
    "columns",
    "first",
    "source",
    "table",
    "combined",
    "columns",
    "second",
    "source",
    "table",
    "row",
    "row",
    "resultant",
    "table",
    "contains",
    "columns",
    "tables",
    "unions",
    "combine",
    "rows",
    "rows",
    "data",
    "first",
    "source",
    "table",
    "combined",
    "rows",
    "data",
    "second",
    "source",
    "table",
    "single",
    "table",
    "row",
    "resultant",
    "table",
    "one",
    "source",
    "table",
    "another",
    "transformation",
    "also",
    "include",
    "normalization",
    "denormalization",
    "data",
    "normalization",
    "focuses",
    "cleaning",
    "database",
    "unused",
    "data",
    "reducing",
    "redundancy",
    "inconsistency",
    "data",
    "coming",
    "transactional",
    "systems",
    "example",
    "number",
    "insert",
    "update",
    "delete",
    "operations",
    "performed",
    "ongoing",
    "basis",
    "highly",
    "normalized",
    "denormalization",
    "used",
    "combine",
    "data",
    "multiple",
    "tables",
    "single",
    "table",
    "queried",
    "faster",
    "example",
    "normalized",
    "data",
    "coming",
    "transactional",
    "systems",
    "typically",
    "denormalized",
    "running",
    "queries",
    "reporting",
    "analysis",
    "another",
    "transformation",
    "type",
    "cleaning",
    "cleaning",
    "tasks",
    "actions",
    "fix",
    "irregularities",
    "data",
    "order",
    "produce",
    "credible",
    "accurate",
    "analysis",
    "data",
    "inaccurate",
    "missing",
    "incomplete",
    "skew",
    "results",
    "analysis",
    "need",
    "considered",
    "could",
    "also",
    "data",
    "biased",
    "null",
    "values",
    "relevant",
    "fields",
    "outliers",
    "example",
    "may",
    "want",
    "find",
    "demographic",
    "information",
    "sale",
    "certain",
    "product",
    "data",
    "received",
    "capture",
    "gender",
    "either",
    "need",
    "source",
    "data",
    "point",
    "merge",
    "existing",
    "data",
    "set",
    "may",
    "need",
    "remove",
    "consider",
    "records",
    "missing",
    "field",
    "explore",
    "many",
    "examples",
    "data",
    "cleaning",
    "course",
    "enriching",
    "data",
    "fourth",
    "type",
    "transformation",
    "consider",
    "data",
    "look",
    "additional",
    "data",
    "points",
    "could",
    "make",
    "analysis",
    "meaningful",
    "looking",
    "enriching",
    "data",
    "example",
    "large",
    "organization",
    "information",
    "fragmented",
    "across",
    "systems",
    "may",
    "need",
    "enrich",
    "data",
    "set",
    "provided",
    "one",
    "system",
    "information",
    "available",
    "systems",
    "even",
    "public",
    "data",
    "sets",
    "consider",
    "scenario",
    "sell",
    "peripherals",
    "businesses",
    "want",
    "analyze",
    "buying",
    "patterns",
    "customers",
    "last",
    "five",
    "years",
    "customer",
    "master",
    "transaction",
    "tables",
    "captured",
    "customer",
    "information",
    "purchase",
    "history",
    "supplementing",
    "data",
    "set",
    "performance",
    "data",
    "businesses",
    "possibly",
    "available",
    "public",
    "data",
    "set",
    "could",
    "valuable",
    "understand",
    "factors",
    "influencing",
    "purchase",
    "decisions",
    "inserting",
    "metadata",
    "also",
    "enriches",
    "data",
    "example",
    "computing",
    "sentiment",
    "score",
    "customer",
    "feedback",
    "log",
    "collecting",
    "weather",
    "data",
    "resort",
    "location",
    "analyze",
    "occupancy",
    "trends",
    "capturing",
    "published",
    "time",
    "tags",
    "blog",
    "post",
    "transformation",
    "next",
    "phase",
    "data",
    "wrangling",
    "validation",
    "check",
    "quality",
    "data",
    "post",
    "structuring",
    "normalizing",
    "cleaning",
    "enriching",
    "validation",
    "rules",
    "refer",
    "repetitive",
    "programming",
    "steps",
    "used",
    "verify",
    "consistency",
    "quality",
    "security",
    "data",
    "brings",
    "us",
    "publishing",
    "fourth",
    "phase",
    "data",
    "wrangling",
    "process",
    "publishing",
    "involves",
    "delivering",
    "output",
    "wrangled",
    "data",
    "downstream",
    "project",
    "needs",
    "published",
    "transformed",
    "validated",
    "version",
    "input",
    "data",
    "set",
    "along",
    "metadata",
    "data",
    "set",
    "lastly",
    "important",
    "note",
    "criticality",
    "documenting",
    "steps",
    "considerations",
    "taken",
    "convert",
    "raw",
    "data",
    "analysis",
    "ready",
    "data",
    "phases",
    "data",
    "wrangling",
    "iterative",
    "nature",
    "order",
    "replicate",
    "steps",
    "revisit",
    "considerations",
    "performing",
    "steps",
    "vital",
    "document",
    "considerations",
    "actions",
    "music",
    "music",
    "thank",
    "video",
    "look",
    "popularly",
    "used",
    "data",
    "wrangling",
    "software",
    "tools",
    "excel",
    "power",
    "query",
    "spreadsheets",
    "open",
    "refine",
    "google",
    "data",
    "prep",
    "watson",
    "studio",
    "refinery",
    "trifecta",
    "wrangler",
    "python",
    "r",
    "let",
    "begin",
    "basic",
    "software",
    "used",
    "manual",
    "wrangling",
    "spreadsheets",
    "spreadsheets",
    "microsoft",
    "excel",
    "google",
    "sheets",
    "host",
    "features",
    "inbuilt",
    "formulas",
    "help",
    "identify",
    "issues",
    "clean",
    "transform",
    "data",
    "available",
    "allow",
    "import",
    "data",
    "several",
    "different",
    "types",
    "sources",
    "clean",
    "transform",
    "data",
    "needed",
    "microsoft",
    "power",
    "query",
    "excel",
    "google",
    "sheets",
    "query",
    "function",
    "google",
    "sheets",
    "open",
    "refine",
    "open",
    "source",
    "tool",
    "allows",
    "import",
    "export",
    "data",
    "wide",
    "variety",
    "formats",
    "tsv",
    "csv",
    "xls",
    "xml",
    "json",
    "using",
    "open",
    "refine",
    "clean",
    "data",
    "transform",
    "one",
    "format",
    "another",
    "extend",
    "data",
    "web",
    "services",
    "external",
    "data",
    "open",
    "refine",
    "easy",
    "learn",
    "easy",
    "use",
    "offers",
    "operations",
    "means",
    "need",
    "memorize",
    "commands",
    "syntax",
    "google",
    "data",
    "prep",
    "intelligent",
    "cloud",
    "data",
    "service",
    "allows",
    "visually",
    "explore",
    "clean",
    "prepare",
    "structured",
    "unstructured",
    "data",
    "analysis",
    "fully",
    "managed",
    "service",
    "means",
    "need",
    "install",
    "manage",
    "software",
    "infrastructure",
    "data",
    "prep",
    "extremely",
    "easy",
    "use",
    "every",
    "addition",
    "take",
    "get",
    "suggestions",
    "ideal",
    "next",
    "step",
    "dataprep",
    "automatically",
    "detect",
    "schemas",
    "data",
    "types",
    "anomalies",
    "watson",
    "studio",
    "refinery",
    "available",
    "via",
    "ibm",
    "watson",
    "studio",
    "allows",
    "discover",
    "cleanse",
    "transform",
    "data",
    "operations",
    "transforms",
    "large",
    "amounts",
    "raw",
    "data",
    "consumable",
    "quality",
    "information",
    "ready",
    "analytics",
    "data",
    "refinery",
    "offers",
    "flexibility",
    "exporting",
    "data",
    "resigning",
    "spectrum",
    "data",
    "sources",
    "detects",
    "data",
    "types",
    "classifications",
    "automatically",
    "also",
    "enforces",
    "applicable",
    "data",
    "governance",
    "policies",
    "automatically",
    "trifacta",
    "wrangler",
    "interactive",
    "service",
    "cleaning",
    "transforming",
    "data",
    "takes",
    "messy",
    "data",
    "cleans",
    "rearranges",
    "data",
    "tables",
    "exported",
    "excel",
    "tableau",
    "r",
    "known",
    "collaboration",
    "features",
    "allowing",
    "multiple",
    "team",
    "members",
    "work",
    "simultaneously",
    "python",
    "huge",
    "library",
    "set",
    "packages",
    "offer",
    "powerful",
    "data",
    "manipulation",
    "capabilities",
    "let",
    "look",
    "libraries",
    "packages",
    "jupiter",
    "notebook",
    "open",
    "source",
    "web",
    "application",
    "widely",
    "used",
    "data",
    "cleaning",
    "transformation",
    "statistical",
    "modeling",
    "also",
    "data",
    "visualization",
    "numpy",
    "numerical",
    "python",
    "basic",
    "package",
    "python",
    "offers",
    "fast",
    "versatile",
    "interoperable",
    "easy",
    "use",
    "provides",
    "support",
    "large",
    "arrays",
    "matrices",
    "mathematical",
    "functions",
    "operate",
    "arrays",
    "pandas",
    "designed",
    "fast",
    "easy",
    "data",
    "analysis",
    "operations",
    "allows",
    "complex",
    "operations",
    "merging",
    "joining",
    "transforming",
    "huge",
    "chunks",
    "data",
    "performed",
    "using",
    "simple",
    "single",
    "line",
    "commands",
    "using",
    "pandas",
    "prevent",
    "common",
    "errors",
    "result",
    "misaligned",
    "data",
    "coming",
    "different",
    "sources",
    "r",
    "also",
    "offers",
    "series",
    "libraries",
    "packages",
    "explicitly",
    "created",
    "wrangling",
    "messy",
    "data",
    "plier",
    "data",
    "table",
    "json",
    "lite",
    "using",
    "libraries",
    "investigate",
    "manipulate",
    "analyze",
    "data",
    "powerful",
    "library",
    "data",
    "wrangling",
    "precise",
    "straightforward",
    "syntax",
    "data",
    "table",
    "helps",
    "aggregate",
    "large",
    "data",
    "sets",
    "quickly",
    "jason",
    "light",
    "robust",
    "jason",
    "parsing",
    "tool",
    "great",
    "interacting",
    "web",
    "apis",
    "tools",
    "data",
    "wrangling",
    "come",
    "varying",
    "capabilities",
    "dimensions",
    "decision",
    "regarding",
    "best",
    "tool",
    "needs",
    "depend",
    "factors",
    "specific",
    "use",
    "case",
    "infrastructure",
    "teams",
    "supported",
    "data",
    "size",
    "data",
    "structures",
    "cleaning",
    "transformation",
    "capabilities",
    "infrastructure",
    "needs",
    "ease",
    "use",
    "learnability",
    "foreign",
    "music",
    "music",
    "gartner",
    "report",
    "data",
    "quality",
    "poor",
    "quality",
    "data",
    "weekends",
    "organization",
    "competitive",
    "standing",
    "undermines",
    "critical",
    "business",
    "objectives",
    "missing",
    "inconsistent",
    "incorrect",
    "data",
    "lead",
    "false",
    "conclusions",
    "therefore",
    "ineffective",
    "decisions",
    "business",
    "world",
    "costly",
    "data",
    "sets",
    "picked",
    "disparate",
    "sources",
    "could",
    "number",
    "issues",
    "including",
    "missing",
    "values",
    "inaccuracies",
    "duplicates",
    "incorrect",
    "missing",
    "delimiters",
    "inconsistent",
    "records",
    "insufficient",
    "parameters",
    "cases",
    "data",
    "corrected",
    "manually",
    "automatically",
    "help",
    "data",
    "wrangling",
    "tools",
    "scripts",
    "repaired",
    "must",
    "removed",
    "data",
    "set",
    "although",
    "terms",
    "data",
    "cleaning",
    "data",
    "wrangling",
    "sometimes",
    "used",
    "interchangeably",
    "important",
    "keep",
    "mind",
    "data",
    "cleaning",
    "subset",
    "entire",
    "data",
    "wrangling",
    "process",
    "data",
    "cleaning",
    "forms",
    "significant",
    "integral",
    "part",
    "transformation",
    "phase",
    "data",
    "wrangling",
    "workflow",
    "typical",
    "data",
    "cleaning",
    "workflow",
    "includes",
    "inspection",
    "cleaning",
    "verification",
    "first",
    "step",
    "data",
    "cleaning",
    "workflow",
    "detect",
    "different",
    "types",
    "issues",
    "errors",
    "data",
    "set",
    "may",
    "use",
    "scripts",
    "tools",
    "allow",
    "define",
    "specific",
    "rules",
    "constraints",
    "validate",
    "data",
    "rules",
    "constraints",
    "also",
    "use",
    "data",
    "profiling",
    "data",
    "visualization",
    "tools",
    "inspection",
    "data",
    "profiling",
    "helps",
    "inspect",
    "source",
    "data",
    "understand",
    "structure",
    "content",
    "interrelationships",
    "data",
    "uncovers",
    "anomalies",
    "data",
    "quality",
    "issues",
    "example",
    "blank",
    "null",
    "values",
    "duplicate",
    "data",
    "whether",
    "value",
    "field",
    "falls",
    "within",
    "expected",
    "range",
    "visualizing",
    "data",
    "using",
    "statistical",
    "methods",
    "help",
    "spot",
    "outliers",
    "example",
    "plotting",
    "average",
    "income",
    "demographic",
    "data",
    "set",
    "help",
    "spot",
    "outliers",
    "brings",
    "us",
    "actual",
    "cleaning",
    "data",
    "techniques",
    "apply",
    "cleaning",
    "data",
    "set",
    "depend",
    "use",
    "case",
    "type",
    "issues",
    "encounter",
    "let",
    "look",
    "common",
    "data",
    "issues",
    "let",
    "start",
    "missing",
    "values",
    "missing",
    "values",
    "important",
    "deal",
    "cause",
    "unexpected",
    "biased",
    "results",
    "choose",
    "filter",
    "records",
    "missing",
    "values",
    "find",
    "way",
    "source",
    "information",
    "case",
    "intrinsic",
    "use",
    "case",
    "example",
    "missing",
    "age",
    "data",
    "demographic",
    "study",
    "third",
    "option",
    "method",
    "known",
    "imputation",
    "calculates",
    "missing",
    "value",
    "based",
    "statistical",
    "values",
    "decision",
    "course",
    "action",
    "choose",
    "needs",
    "anchored",
    "best",
    "use",
    "case",
    "may",
    "also",
    "come",
    "across",
    "duplicate",
    "data",
    "data",
    "points",
    "repeated",
    "data",
    "set",
    "need",
    "removed",
    "another",
    "type",
    "issue",
    "may",
    "encounter",
    "irrelevant",
    "data",
    "data",
    "fit",
    "within",
    "context",
    "use",
    "case",
    "considered",
    "irrelevant",
    "data",
    "example",
    "analyzing",
    "data",
    "general",
    "health",
    "segment",
    "population",
    "contact",
    "numbers",
    "may",
    "relevant",
    "cleaning",
    "involve",
    "data",
    "type",
    "conversion",
    "well",
    "needed",
    "ensure",
    "values",
    "field",
    "stored",
    "data",
    "type",
    "field",
    "example",
    "numbers",
    "stored",
    "numerical",
    "data",
    "type",
    "dates",
    "stored",
    "date",
    "data",
    "type",
    "may",
    "also",
    "need",
    "clean",
    "data",
    "order",
    "standardize",
    "example",
    "strings",
    "may",
    "want",
    "values",
    "lower",
    "case",
    "similarly",
    "date",
    "formats",
    "units",
    "measurement",
    "need",
    "standardized",
    "may",
    "syntax",
    "errors",
    "example",
    "white",
    "spaces",
    "extra",
    "spaces",
    "beginning",
    "end",
    "string",
    "syntax",
    "error",
    "needs",
    "rectified",
    "also",
    "include",
    "fixing",
    "typos",
    "format",
    "example",
    "state",
    "name",
    "entered",
    "full",
    "form",
    "new",
    "york",
    "versus",
    "abbreviated",
    "form",
    "ny",
    "records",
    "data",
    "also",
    "outliers",
    "values",
    "vastly",
    "different",
    "observations",
    "data",
    "set",
    "outliers",
    "may",
    "may",
    "incorrect",
    "example",
    "age",
    "field",
    "voters",
    "database",
    "value",
    "5",
    "know",
    "incorrect",
    "data",
    "needs",
    "corrected",
    "let",
    "consider",
    "group",
    "people",
    "annual",
    "income",
    "range",
    "one",
    "hundred",
    "thousand",
    "two",
    "hundred",
    "thousand",
    "dollars",
    "except",
    "one",
    "person",
    "earns",
    "million",
    "dollars",
    "year",
    "data",
    "point",
    "incorrect",
    "outlier",
    "needs",
    "looked",
    "depending",
    "use",
    "case",
    "may",
    "need",
    "decide",
    "including",
    "data",
    "skew",
    "results",
    "way",
    "serve",
    "use",
    "case",
    "brings",
    "us",
    "next",
    "step",
    "data",
    "cleaning",
    "workflow",
    "verification",
    "step",
    "inspect",
    "results",
    "establish",
    "effectiveness",
    "accuracy",
    "achieved",
    "result",
    "data",
    "cleaning",
    "operation",
    "need",
    "data",
    "make",
    "sure",
    "rules",
    "constraints",
    "applicable",
    "data",
    "still",
    "hold",
    "corrections",
    "made",
    "end",
    "important",
    "note",
    "changes",
    "undertaken",
    "part",
    "data",
    "cleaning",
    "operation",
    "need",
    "documented",
    "changes",
    "also",
    "reasons",
    "behind",
    "making",
    "changes",
    "quality",
    "currently",
    "stored",
    "data",
    "reporting",
    "healthy",
    "data",
    "crucial",
    "step",
    "music",
    "thank",
    "segment",
    "data",
    "professionals",
    "share",
    "portion",
    "job",
    "involves",
    "gathering",
    "cleaning",
    "preparing",
    "data",
    "analysis",
    "would",
    "say",
    "relatively",
    "big",
    "proportion",
    "job",
    "involves",
    "gathering",
    "preparing",
    "cleaning",
    "data",
    "analysis",
    "work",
    "company",
    "really",
    "great",
    "data",
    "engineering",
    "team",
    "kind",
    "work",
    "much",
    "data",
    "scientists",
    "still",
    "person",
    "working",
    "closely",
    "data",
    "data",
    "scientist",
    "data",
    "analyst",
    "machine",
    "learning",
    "engineer",
    "really",
    "needs",
    "get",
    "comfortable",
    "understanding",
    "data",
    "comes",
    "inevitably",
    "data",
    "set",
    "perfect",
    "always",
    "going",
    "compromises",
    "small",
    "errors",
    "really",
    "important",
    "spend",
    "significant",
    "portion",
    "time",
    "understanding",
    "underlying",
    "data",
    "used",
    "generate",
    "data",
    "set",
    "potential",
    "problems",
    "might",
    "data",
    "job",
    "cpa",
    "involves",
    "lot",
    "analysis",
    "financial",
    "statements",
    "account",
    "activity",
    "assessing",
    "processes",
    "controls",
    "gathering",
    "piece",
    "pretty",
    "simple",
    "long",
    "accounting",
    "information",
    "resides",
    "general",
    "ledger",
    "system",
    "central",
    "repository",
    "data",
    "easy",
    "gather",
    "music",
    "need",
    "prep",
    "data",
    "make",
    "sure",
    "accurate",
    "make",
    "sure",
    "things",
    "adding",
    "make",
    "sure",
    "months",
    "information",
    "example",
    "financial",
    "statement",
    "need",
    "make",
    "sure",
    "people",
    "given",
    "12",
    "months",
    "worth",
    "make",
    "statements",
    "missing",
    "data",
    "enough",
    "information",
    "able",
    "project",
    "forecast",
    "even",
    "look",
    "back",
    "estimate",
    "done",
    "month",
    "based",
    "definitely",
    "segment",
    "data",
    "professionals",
    "talk",
    "steps",
    "take",
    "ensure",
    "data",
    "reliable",
    "one",
    "essential",
    "steps",
    "making",
    "sure",
    "data",
    "reliable",
    "run",
    "summary",
    "statistics",
    "individual",
    "columns",
    "data",
    "make",
    "sure",
    "uh",
    "consistent",
    "reality",
    "example",
    "column",
    "somewhere",
    "records",
    "visits",
    "per",
    "month",
    "website",
    "run",
    "summary",
    "statistics",
    "column",
    "get",
    "minimum",
    "mean",
    "median",
    "max",
    "see",
    "something",
    "funky",
    "like",
    "one",
    "month",
    "negative",
    "visits",
    "something",
    "like",
    "know",
    "data",
    "reliable",
    "financial",
    "information",
    "particular",
    "must",
    "reliable",
    "must",
    "must",
    "free",
    "error",
    "many",
    "attributes",
    "necessary",
    "data",
    "relied",
    "upon",
    "call",
    "logic",
    "check",
    "get",
    "details",
    "transaction",
    "make",
    "sense",
    "high",
    "level",
    "expected",
    "top",
    "line",
    "revenue",
    "increase",
    "see",
    "drastically",
    "decreased",
    "figure",
    "part",
    "first",
    "source",
    "correct",
    "running",
    "query",
    "right",
    "period",
    "pulling",
    "right",
    "general",
    "ledger",
    "account",
    "start",
    "make",
    "sure",
    "basic",
    "data",
    "integrity",
    "questions",
    "addressed",
    "first",
    "know",
    "data",
    "reliable",
    "start",
    "deep",
    "dive",
    "reviews",
    "form",
    "conclusions",
    "financial",
    "performance",
    "based",
    "analysis",
    "data",
    "music",
    "understand",
    "statistical",
    "analysis",
    "relation",
    "data",
    "analysis",
    "specifically",
    "data",
    "mining",
    "let",
    "first",
    "examine",
    "statistics",
    "statistics",
    "branch",
    "mathematics",
    "dealing",
    "collection",
    "analysis",
    "interpretation",
    "presentation",
    "numerical",
    "quantitative",
    "data",
    "around",
    "us",
    "lives",
    "whether",
    "talking",
    "average",
    "income",
    "average",
    "age",
    "highest",
    "paid",
    "professions",
    "statistics",
    "today",
    "statistics",
    "applied",
    "across",
    "industries",
    "decision",
    "making",
    "based",
    "data",
    "example",
    "researchers",
    "using",
    "statistics",
    "analyze",
    "data",
    "production",
    "vaccines",
    "ensure",
    "safety",
    "efficacy",
    "companies",
    "using",
    "statistics",
    "reduce",
    "customer",
    "churn",
    "gaining",
    "greater",
    "insight",
    "customer",
    "requirements",
    "let",
    "look",
    "statistical",
    "analysis",
    "statistical",
    "analysis",
    "application",
    "statistical",
    "methods",
    "sample",
    "data",
    "order",
    "develop",
    "understanding",
    "data",
    "represents",
    "includes",
    "collecting",
    "scrutinizing",
    "every",
    "data",
    "sample",
    "set",
    "items",
    "samples",
    "drawn",
    "sample",
    "statistics",
    "representative",
    "selection",
    "drawn",
    "total",
    "population",
    "population",
    "discrete",
    "group",
    "people",
    "things",
    "identified",
    "least",
    "one",
    "common",
    "characteristic",
    "purposes",
    "data",
    "collection",
    "analysis",
    "example",
    "certain",
    "use",
    "case",
    "population",
    "may",
    "people",
    "state",
    "driving",
    "license",
    "sample",
    "population",
    "part",
    "subset",
    "population",
    "could",
    "men",
    "drivers",
    "age",
    "statistical",
    "methods",
    "mainly",
    "useful",
    "ensure",
    "data",
    "interpreted",
    "correctly",
    "apparent",
    "relationships",
    "meaningful",
    "happening",
    "chance",
    "whenever",
    "collect",
    "data",
    "sample",
    "two",
    "different",
    "types",
    "statistics",
    "run",
    "descriptive",
    "statistics",
    "summarize",
    "information",
    "sample",
    "inferential",
    "statistics",
    "make",
    "inferences",
    "generalizations",
    "broader",
    "population",
    "descriptive",
    "statistics",
    "enables",
    "present",
    "data",
    "meaningful",
    "way",
    "allowing",
    "simpler",
    "interpretation",
    "data",
    "data",
    "described",
    "using",
    "summary",
    "charts",
    "tables",
    "graphs",
    "without",
    "attempts",
    "draw",
    "conclusions",
    "population",
    "sample",
    "taken",
    "objective",
    "make",
    "easier",
    "understand",
    "visualize",
    "raw",
    "data",
    "without",
    "making",
    "conclusions",
    "regarding",
    "hypotheses",
    "made",
    "example",
    "want",
    "describe",
    "english",
    "test",
    "scores",
    "specific",
    "class",
    "25",
    "students",
    "record",
    "test",
    "scores",
    "students",
    "calculate",
    "summary",
    "statistics",
    "produce",
    "graph",
    "common",
    "measures",
    "descriptive",
    "statistical",
    "analysis",
    "include",
    "central",
    "tendency",
    "dispersion",
    "skewness",
    "central",
    "tendency",
    "locating",
    "center",
    "data",
    "sample",
    "common",
    "measures",
    "central",
    "tendency",
    "include",
    "mean",
    "median",
    "mode",
    "measures",
    "tell",
    "values",
    "data",
    "set",
    "fall",
    "earlier",
    "example",
    "mean",
    "score",
    "mathematical",
    "average",
    "class",
    "25",
    "students",
    "would",
    "sum",
    "total",
    "scores",
    "25",
    "students",
    "divided",
    "25",
    "number",
    "students",
    "order",
    "data",
    "set",
    "smallest",
    "score",
    "value",
    "highest",
    "score",
    "value",
    "25",
    "students",
    "pick",
    "middle",
    "value",
    "value",
    "12",
    "values",
    "left",
    "12",
    "values",
    "right",
    "score",
    "value",
    "score",
    "value",
    "would",
    "median",
    "data",
    "set",
    "12",
    "students",
    "scored",
    "less",
    "75",
    "percent",
    "12",
    "students",
    "scored",
    "greater",
    "75",
    "percent",
    "median",
    "median",
    "unique",
    "data",
    "set",
    "affected",
    "outliers",
    "mode",
    "value",
    "occurs",
    "frequently",
    "set",
    "observations",
    "example",
    "common",
    "score",
    "group",
    "25",
    "students",
    "72",
    "percent",
    "mode",
    "data",
    "set",
    "see",
    "looking",
    "data",
    "set",
    "values",
    "help",
    "get",
    "clear",
    "understanding",
    "data",
    "set",
    "dispersion",
    "measure",
    "variability",
    "data",
    "set",
    "common",
    "measures",
    "statistical",
    "dispersion",
    "variance",
    "standard",
    "deviation",
    "range",
    "variance",
    "defines",
    "far",
    "away",
    "data",
    "points",
    "fall",
    "center",
    "distribution",
    "values",
    "distribution",
    "lower",
    "variability",
    "values",
    "data",
    "set",
    "consistent",
    "however",
    "variability",
    "higher",
    "data",
    "points",
    "dissimilar",
    "extreme",
    "values",
    "become",
    "likely",
    "understanding",
    "variability",
    "help",
    "grasp",
    "likelihood",
    "event",
    "happening",
    "standard",
    "deviation",
    "tells",
    "tightly",
    "data",
    "clustered",
    "around",
    "mean",
    "range",
    "gives",
    "distance",
    "smallest",
    "largest",
    "values",
    "data",
    "sets",
    "skewness",
    "measure",
    "whether",
    "distribution",
    "values",
    "symmetrical",
    "around",
    "central",
    "value",
    "skewed",
    "left",
    "right",
    "skewed",
    "data",
    "affect",
    "types",
    "analyzes",
    "valid",
    "perform",
    "basic",
    "common",
    "used",
    "descriptive",
    "statistic",
    "tools",
    "tools",
    "well",
    "example",
    "using",
    "correlation",
    "scatter",
    "plots",
    "assess",
    "relationships",
    "paired",
    "data",
    "second",
    "type",
    "statistical",
    "analysis",
    "inferential",
    "statistics",
    "inferential",
    "statistics",
    "takes",
    "data",
    "sample",
    "make",
    "inferences",
    "larger",
    "population",
    "sample",
    "drawn",
    "using",
    "methods",
    "inferential",
    "statistics",
    "draw",
    "generalizations",
    "apply",
    "results",
    "sample",
    "population",
    "whole",
    "common",
    "methodologies",
    "inferential",
    "statistics",
    "include",
    "hypothesis",
    "testing",
    "confidence",
    "intervals",
    "regression",
    "analysis",
    "hypothesis",
    "testing",
    "example",
    "used",
    "studying",
    "effectiveness",
    "vaccine",
    "comparing",
    "outcomes",
    "control",
    "group",
    "hypothesis",
    "tests",
    "tell",
    "whether",
    "efficacy",
    "vaccine",
    "observed",
    "control",
    "group",
    "likely",
    "exist",
    "population",
    "well",
    "confidence",
    "intervals",
    "incorporate",
    "uncertainty",
    "sample",
    "error",
    "create",
    "range",
    "values",
    "actual",
    "population",
    "value",
    "likely",
    "fall",
    "within",
    "regression",
    "analysis",
    "incorporates",
    "hypothesis",
    "tests",
    "help",
    "determine",
    "whether",
    "relationships",
    "observed",
    "sample",
    "data",
    "actually",
    "exist",
    "population",
    "rather",
    "sample",
    "various",
    "software",
    "packages",
    "perform",
    "statistical",
    "data",
    "analysis",
    "statistical",
    "analysis",
    "system",
    "sas",
    "statistical",
    "package",
    "social",
    "sciences",
    "spss",
    "statsoft",
    "statistics",
    "form",
    "core",
    "data",
    "mining",
    "providing",
    "measures",
    "methodologies",
    "necessary",
    "data",
    "mining",
    "identifying",
    "patterns",
    "help",
    "identify",
    "differences",
    "random",
    "noise",
    "significant",
    "findings",
    "data",
    "mining",
    "learn",
    "course",
    "statistics",
    "techniques",
    "data",
    "analysis",
    "help",
    "better",
    "decision",
    "making",
    "music",
    "thank",
    "data",
    "mining",
    "process",
    "extracting",
    "knowledge",
    "data",
    "heart",
    "data",
    "analysis",
    "process",
    "interdisciplinary",
    "field",
    "involves",
    "use",
    "pattern",
    "recognition",
    "technologies",
    "statistical",
    "analysis",
    "mathematical",
    "techniques",
    "goal",
    "identify",
    "correlations",
    "data",
    "find",
    "patterns",
    "variations",
    "understand",
    "trends",
    "predict",
    "probabilities",
    "hear",
    "patterns",
    "trends",
    "frequently",
    "context",
    "data",
    "analysis",
    "let",
    "first",
    "understand",
    "concepts",
    "pattern",
    "recognition",
    "discovery",
    "regularities",
    "commonalities",
    "data",
    "consider",
    "log",
    "data",
    "logins",
    "application",
    "organization",
    "contains",
    "information",
    "username",
    "login",
    "timestamp",
    "time",
    "spent",
    "login",
    "session",
    "activities",
    "performed",
    "analyze",
    "data",
    "gain",
    "insights",
    "habits",
    "behaviors",
    "users",
    "example",
    "time",
    "day",
    "maximum",
    "users",
    "tend",
    "log",
    "user",
    "roles",
    "typically",
    "spend",
    "maximum",
    "hours",
    "logged",
    "application",
    "modules",
    "workflow",
    "application",
    "used",
    "examining",
    "data",
    "manually",
    "tools",
    "uncover",
    "patterns",
    "hidden",
    "data",
    "trend",
    "hand",
    "general",
    "tendency",
    "set",
    "data",
    "change",
    "time",
    "example",
    "global",
    "warming",
    "short",
    "term",
    "like",
    "basis",
    "temperatures",
    "may",
    "remain",
    "go",
    "degrees",
    "overall",
    "global",
    "temperatures",
    "continue",
    "increase",
    "time",
    "making",
    "global",
    "warming",
    "trend",
    "data",
    "mining",
    "applications",
    "across",
    "industries",
    "disciplines",
    "example",
    "profiling",
    "customer",
    "behaviors",
    "needs",
    "disposable",
    "income",
    "order",
    "offer",
    "targeted",
    "campaigns",
    "financial",
    "institutions",
    "tracking",
    "customer",
    "transactions",
    "unusual",
    "behaviors",
    "flagging",
    "fraudulent",
    "transactions",
    "using",
    "data",
    "mining",
    "models",
    "use",
    "statistical",
    "models",
    "predict",
    "patient",
    "likelihood",
    "specific",
    "health",
    "conditions",
    "prioritizing",
    "treatment",
    "accessing",
    "performance",
    "data",
    "students",
    "predict",
    "achievement",
    "levels",
    "make",
    "focused",
    "effort",
    "provide",
    "support",
    "required",
    "helping",
    "investigation",
    "agencies",
    "deploy",
    "police",
    "force",
    "likelihood",
    "crime",
    "higher",
    "aligning",
    "supply",
    "logistics",
    "demand",
    "forecasts",
    "several",
    "techniques",
    "use",
    "detect",
    "patterns",
    "build",
    "accurate",
    "models",
    "discovery",
    "descriptive",
    "diagnostic",
    "predictive",
    "prescriptive",
    "modeling",
    "let",
    "understand",
    "commonly",
    "used",
    "techniques",
    "classification",
    "technique",
    "classifies",
    "attributes",
    "target",
    "categories",
    "example",
    "classifying",
    "customers",
    "low",
    "medium",
    "high",
    "spenders",
    "based",
    "much",
    "earn",
    "clustering",
    "similar",
    "classification",
    "involves",
    "grouping",
    "data",
    "clusters",
    "treated",
    "groups",
    "example",
    "clustering",
    "customers",
    "based",
    "geographic",
    "regions",
    "anomaly",
    "outlier",
    "detection",
    "technique",
    "helps",
    "find",
    "patterns",
    "data",
    "normal",
    "unexpected",
    "example",
    "spikes",
    "usage",
    "credit",
    "card",
    "flag",
    "possible",
    "misuse",
    "association",
    "rule",
    "mining",
    "technique",
    "helps",
    "establish",
    "relationship",
    "two",
    "data",
    "events",
    "example",
    "purchase",
    "laptop",
    "frequently",
    "accompanied",
    "purchase",
    "cooling",
    "pad",
    "sequential",
    "patterns",
    "technique",
    "traces",
    "series",
    "events",
    "take",
    "place",
    "sequence",
    "example",
    "tracing",
    "customer",
    "shopping",
    "trail",
    "time",
    "log",
    "online",
    "store",
    "time",
    "log",
    "affinity",
    "grouping",
    "technique",
    "used",
    "discover",
    "relationships",
    "technique",
    "widely",
    "used",
    "online",
    "stores",
    "upselling",
    "products",
    "recommending",
    "products",
    "people",
    "based",
    "purchase",
    "history",
    "people",
    "purchase",
    "item",
    "decision",
    "trees",
    "help",
    "build",
    "classification",
    "models",
    "form",
    "tree",
    "structure",
    "multiple",
    "branches",
    "branch",
    "represents",
    "probable",
    "occurrence",
    "technique",
    "helps",
    "build",
    "clear",
    "understanding",
    "relationship",
    "input",
    "output",
    "regression",
    "technique",
    "helps",
    "identify",
    "nature",
    "relationship",
    "two",
    "variables",
    "could",
    "causal",
    "correlational",
    "example",
    "based",
    "factors",
    "location",
    "covered",
    "area",
    "regression",
    "model",
    "could",
    "used",
    "predict",
    "value",
    "house",
    "data",
    "mining",
    "essentially",
    "helps",
    "separate",
    "noise",
    "real",
    "information",
    "helps",
    "businesses",
    "focus",
    "energies",
    "relevant",
    "music",
    "video",
    "learn",
    "commonly",
    "used",
    "software",
    "tools",
    "data",
    "mining",
    "spreadsheets",
    "r",
    "language",
    "python",
    "ibm",
    "spss",
    "statistics",
    "ibm",
    "watson",
    "studio",
    "sas",
    "spreadsheets",
    "microsoft",
    "excel",
    "google",
    "sheets",
    "commonly",
    "used",
    "performing",
    "basic",
    "data",
    "mining",
    "tasks",
    "spreadsheets",
    "used",
    "host",
    "data",
    "exported",
    "systems",
    "easily",
    "accessible",
    "easy",
    "read",
    "format",
    "pivot",
    "tables",
    "showcase",
    "specific",
    "aspects",
    "data",
    "vital",
    "huge",
    "amounts",
    "data",
    "sort",
    "analyze",
    "also",
    "make",
    "relatively",
    "easier",
    "make",
    "comparisons",
    "different",
    "sets",
    "data",
    "available",
    "excel",
    "data",
    "mining",
    "client",
    "excel",
    "excel",
    "miner",
    "knowledge",
    "miner",
    "excel",
    "allow",
    "perform",
    "common",
    "mining",
    "tasks",
    "classification",
    "regression",
    "association",
    "rules",
    "clustering",
    "model",
    "building",
    "google",
    "sheets",
    "also",
    "array",
    "used",
    "analysis",
    "mining",
    "text",
    "analysis",
    "text",
    "mining",
    "google",
    "analytics",
    "r",
    "one",
    "widely",
    "used",
    "languages",
    "performing",
    "statistical",
    "modeling",
    "computations",
    "statisticians",
    "data",
    "miners",
    "r",
    "packaged",
    "hundreds",
    "libraries",
    "explicitly",
    "built",
    "data",
    "mining",
    "operations",
    "regression",
    "classification",
    "data",
    "clustering",
    "association",
    "rule",
    "mining",
    "text",
    "mining",
    "outlier",
    "detection",
    "social",
    "network",
    "analysis",
    "popular",
    "r",
    "packages",
    "include",
    "tm",
    "twitter",
    "tm",
    "framework",
    "text",
    "mining",
    "applications",
    "within",
    "r",
    "provides",
    "functions",
    "text",
    "mining",
    "twitter",
    "provides",
    "framework",
    "mining",
    "tweets",
    "studio",
    "popularly",
    "used",
    "open",
    "source",
    "integrated",
    "development",
    "environment",
    "ide",
    "working",
    "r",
    "programming",
    "language",
    "python",
    "libraries",
    "like",
    "pandas",
    "numpy",
    "commonly",
    "used",
    "data",
    "mining",
    "pandas",
    "open",
    "source",
    "module",
    "working",
    "data",
    "structures",
    "analysis",
    "possibly",
    "one",
    "popular",
    "libraries",
    "data",
    "analysis",
    "python",
    "allows",
    "upload",
    "data",
    "format",
    "provides",
    "simple",
    "platform",
    "organize",
    "sort",
    "manipulate",
    "data",
    "using",
    "pandas",
    "perform",
    "basic",
    "numerical",
    "computations",
    "mean",
    "median",
    "mode",
    "range",
    "calculate",
    "statistics",
    "answer",
    "questions",
    "regarding",
    "correlation",
    "data",
    "distribution",
    "data",
    "explore",
    "data",
    "visually",
    "quantitatively",
    "visualize",
    "data",
    "help",
    "python",
    "libraries",
    "numpy",
    "tool",
    "mathematical",
    "computing",
    "data",
    "preparation",
    "python",
    "numpy",
    "offers",
    "host",
    "functions",
    "capabilities",
    "data",
    "mining",
    "jupiter",
    "notebooks",
    "become",
    "tool",
    "choice",
    "data",
    "scientists",
    "data",
    "analysts",
    "working",
    "python",
    "perform",
    "data",
    "mining",
    "statistical",
    "analysis",
    "spss",
    "stands",
    "statistical",
    "process",
    "social",
    "sciences",
    "name",
    "suggests",
    "original",
    "usage",
    "field",
    "social",
    "sciences",
    "popularly",
    "used",
    "advanced",
    "analytics",
    "text",
    "analytics",
    "trend",
    "analysis",
    "validation",
    "assumptions",
    "translation",
    "business",
    "problems",
    "data",
    "science",
    "solutions",
    "spss",
    "closed",
    "source",
    "requires",
    "license",
    "use",
    "spss",
    "easy",
    "use",
    "interface",
    "requires",
    "minimal",
    "coding",
    "complex",
    "tasks",
    "comprises",
    "efficient",
    "data",
    "management",
    "tools",
    "popular",
    "analysis",
    "capabilities",
    "accurate",
    "data",
    "results",
    "ibm",
    "watson",
    "studio",
    "included",
    "ibm",
    "cloud",
    "pack",
    "data",
    "leverages",
    "collection",
    "open",
    "source",
    "tools",
    "jupiter",
    "notebooks",
    "extends",
    "closed",
    "source",
    "ibm",
    "tools",
    "make",
    "powerful",
    "environment",
    "data",
    "analysis",
    "data",
    "science",
    "available",
    "web",
    "browser",
    "public",
    "cloud",
    "private",
    "cloud",
    "desktop",
    "app",
    "watson",
    "studio",
    "enables",
    "team",
    "members",
    "collaborate",
    "projects",
    "range",
    "simple",
    "exploratory",
    "analysis",
    "building",
    "machine",
    "learning",
    "ai",
    "models",
    "also",
    "includes",
    "spss",
    "modeler",
    "flows",
    "enable",
    "quickly",
    "develop",
    "predictive",
    "models",
    "business",
    "data",
    "sas",
    "enterprise",
    "miner",
    "comprehensive",
    "graphical",
    "workbench",
    "data",
    "mining",
    "provides",
    "powerful",
    "capabilities",
    "interactive",
    "data",
    "exploration",
    "enables",
    "users",
    "identify",
    "relationships",
    "within",
    "data",
    "sas",
    "manage",
    "information",
    "various",
    "sources",
    "mine",
    "transform",
    "data",
    "analyze",
    "statistics",
    "offers",
    "graphical",
    "user",
    "interface",
    "users",
    "sas",
    "identify",
    "patterns",
    "data",
    "using",
    "range",
    "available",
    "modeling",
    "techniques",
    "explore",
    "relationships",
    "anomalies",
    "data",
    "analyze",
    "big",
    "data",
    "validate",
    "reliability",
    "findings",
    "data",
    "analysis",
    "process",
    "sas",
    "easy",
    "use",
    "syntax",
    "also",
    "easy",
    "debug",
    "ability",
    "handle",
    "large",
    "databases",
    "offers",
    "high",
    "security",
    "users",
    "video",
    "learned",
    "data",
    "mining",
    "tools",
    "available",
    "today",
    "decision",
    "regarding",
    "best",
    "tool",
    "needs",
    "driven",
    "data",
    "size",
    "structure",
    "tool",
    "supports",
    "features",
    "offers",
    "data",
    "visualization",
    "capabilities",
    "infrastructure",
    "needs",
    "ease",
    "use",
    "learnability",
    "fairly",
    "common",
    "use",
    "combination",
    "data",
    "mining",
    "tools",
    "meet",
    "needs",
    "music",
    "thank",
    "data",
    "analysis",
    "process",
    "begins",
    "understanding",
    "problem",
    "needs",
    "solved",
    "desired",
    "outcome",
    "needs",
    "achieved",
    "ends",
    "communicating",
    "findings",
    "ways",
    "impact",
    "decision",
    "making",
    "data",
    "projects",
    "result",
    "collaborative",
    "effort",
    "spread",
    "across",
    "business",
    "functions",
    "involving",
    "people",
    "skills",
    "findings",
    "incorporated",
    "larger",
    "business",
    "initiative",
    "success",
    "communication",
    "depends",
    "well",
    "others",
    "understand",
    "trust",
    "insights",
    "take",
    "action",
    "data",
    "analysts",
    "need",
    "tell",
    "story",
    "data",
    "visualizing",
    "insights",
    "clearly",
    "creating",
    "structured",
    "narrative",
    "explicitly",
    "targeted",
    "audience",
    "begin",
    "create",
    "communication",
    "need",
    "reconnect",
    "audience",
    "begin",
    "asking",
    "questions",
    "audience",
    "important",
    "help",
    "trust",
    "audience",
    "mostly",
    "going",
    "diverse",
    "group",
    "terms",
    "business",
    "functions",
    "represent",
    "whether",
    "play",
    "operational",
    "strategic",
    "role",
    "organization",
    "impacted",
    "problem",
    "factors",
    "presentation",
    "needs",
    "framed",
    "around",
    "level",
    "information",
    "audience",
    "already",
    "based",
    "understanding",
    "audience",
    "decide",
    "much",
    "information",
    "essential",
    "enable",
    "better",
    "understanding",
    "findings",
    "tempting",
    "bring",
    "data",
    "working",
    "consider",
    "pieces",
    "important",
    "audience",
    "others",
    "presentation",
    "data",
    "dump",
    "facts",
    "figures",
    "alone",
    "influence",
    "decisions",
    "move",
    "people",
    "action",
    "tell",
    "compelling",
    "story",
    "include",
    "information",
    "needed",
    "address",
    "business",
    "problem",
    "much",
    "information",
    "audience",
    "struggling",
    "understand",
    "point",
    "making",
    "begin",
    "presentation",
    "demonstrating",
    "understanding",
    "business",
    "problem",
    "audience",
    "easy",
    "fall",
    "back",
    "assumption",
    "know",
    "reflecting",
    "understanding",
    "problem",
    "needs",
    "solved",
    "outcome",
    "needs",
    "achieved",
    "great",
    "first",
    "step",
    "winning",
    "attention",
    "starting",
    "trust",
    "speaking",
    "language",
    "organization",
    "business",
    "domain",
    "another",
    "important",
    "factor",
    "building",
    "connection",
    "audience",
    "next",
    "step",
    "designing",
    "communication",
    "structure",
    "organize",
    "presentation",
    "maximum",
    "impact",
    "reference",
    "data",
    "collected",
    "remember",
    "data",
    "basis",
    "everything",
    "communicating",
    "like",
    "black",
    "box",
    "audience",
    "unable",
    "establish",
    "credibility",
    "data",
    "people",
    "know",
    "trust",
    "findings",
    "share",
    "data",
    "sources",
    "hypotheses",
    "validations",
    "work",
    "towards",
    "establishing",
    "credibility",
    "findings",
    "along",
    "way",
    "gloss",
    "key",
    "assumptions",
    "made",
    "analysis",
    "organize",
    "information",
    "logical",
    "categories",
    "based",
    "information",
    "qualitative",
    "quantitative",
    "information",
    "example",
    "deliberate",
    "taking",
    "approach",
    "narrative",
    "effective",
    "depends",
    "audience",
    "use",
    "case",
    "consistent",
    "approach",
    "important",
    "determine",
    "communication",
    "formats",
    "useful",
    "audience",
    "need",
    "take",
    "away",
    "executive",
    "summary",
    "fact",
    "sheet",
    "report",
    "audience",
    "going",
    "use",
    "information",
    "presented",
    "determine",
    "formats",
    "choose",
    "insights",
    "must",
    "explained",
    "way",
    "inspires",
    "action",
    "audience",
    "grasp",
    "significance",
    "insight",
    "unconvinced",
    "utility",
    "insight",
    "drive",
    "value",
    "thousand",
    "word",
    "essay",
    "impact",
    "visual",
    "creating",
    "clear",
    "mental",
    "image",
    "minds",
    "audience",
    "powerful",
    "visualization",
    "tells",
    "story",
    "graphical",
    "depiction",
    "facts",
    "figures",
    "data",
    "visualizations",
    "graphs",
    "charts",
    "diagrams",
    "great",
    "way",
    "bring",
    "data",
    "life",
    "whether",
    "showing",
    "comparison",
    "relationship",
    "distribution",
    "composition",
    "tools",
    "help",
    "show",
    "patterns",
    "conclusions",
    "hypotheses",
    "data",
    "value",
    "stories",
    "tells",
    "audience",
    "must",
    "able",
    "trust",
    "understand",
    "relate",
    "findings",
    "insights",
    "establishing",
    "credibility",
    "findings",
    "presenting",
    "data",
    "within",
    "narrative",
    "supporting",
    "visual",
    "impressions",
    "help",
    "audience",
    "drive",
    "valuable",
    "insights",
    "foreign",
    "music",
    "listen",
    "data",
    "professionals",
    "talk",
    "role",
    "storytelling",
    "plays",
    "life",
    "data",
    "analyst",
    "role",
    "storytelling",
    "data",
    "analyst",
    "life",
    "overstated",
    "super",
    "critical",
    "get",
    "really",
    "good",
    "storytelling",
    "data",
    "think",
    "humans",
    "naturally",
    "understand",
    "world",
    "stories",
    "trying",
    "convince",
    "anyone",
    "anything",
    "data",
    "first",
    "thing",
    "tell",
    "clear",
    "concise",
    "compelling",
    "story",
    "also",
    "think",
    "really",
    "useful",
    "data",
    "analysts",
    "develop",
    "story",
    "anytime",
    "working",
    "data",
    "set",
    "help",
    "better",
    "understand",
    "underlying",
    "data",
    "set",
    "uh",
    "always",
    "going",
    "balance",
    "telling",
    "clear",
    "coherent",
    "simple",
    "story",
    "making",
    "sure",
    "conveying",
    "complexities",
    "might",
    "find",
    "within",
    "data",
    "think",
    "finding",
    "balance",
    "really",
    "challenging",
    "really",
    "critical",
    "art",
    "storytelling",
    "significant",
    "effect",
    "life",
    "data",
    "analyst",
    "matter",
    "much",
    "wonderful",
    "information",
    "come",
    "ca",
    "find",
    "way",
    "communicate",
    "audience",
    "whether",
    "consumer",
    "director",
    "level",
    "executive",
    "level",
    "person",
    "find",
    "way",
    "communicate",
    "usually",
    "best",
    "visual",
    "telling",
    "story",
    "understand",
    "information",
    "useful",
    "say",
    "storytelling",
    "essential",
    "skill",
    "set",
    "like",
    "last",
    "mile",
    "delivery",
    "lot",
    "people",
    "handle",
    "technical",
    "side",
    "short",
    "period",
    "training",
    "however",
    "ability",
    "extract",
    "value",
    "data",
    "communicate",
    "ensure",
    "supply",
    "think",
    "career",
    "think",
    "critical",
    "know",
    "tell",
    "compelling",
    "story",
    "data",
    "storytelling",
    "absolutely",
    "crucial",
    "data",
    "analytics",
    "actually",
    "convey",
    "message",
    "everyone",
    "show",
    "numbers",
    "story",
    "around",
    "compelling",
    "reason",
    "act",
    "ultimately",
    "presenting",
    "going",
    "resonate",
    "audience",
    "study",
    "stanford",
    "people",
    "present",
    "pitches",
    "pitch",
    "simply",
    "kpis",
    "number",
    "statistics",
    "also",
    "told",
    "story",
    "audience",
    "members",
    "quizzed",
    "fact",
    "remembered",
    "presentations",
    "stories",
    "stuck",
    "yes",
    "still",
    "facts",
    "figures",
    "contained",
    "within",
    "story",
    "way",
    "drive",
    "home",
    "emotional",
    "connection",
    "story",
    "understanding",
    "data",
    "really",
    "going",
    "get",
    "people",
    "take",
    "action",
    "want",
    "need",
    "take",
    "music",
    "thank",
    "data",
    "visualization",
    "discipline",
    "communicating",
    "information",
    "use",
    "visual",
    "elements",
    "graphs",
    "charts",
    "maps",
    "goal",
    "make",
    "information",
    "easy",
    "comprehend",
    "interpret",
    "retain",
    "imagine",
    "look",
    "thousands",
    "rows",
    "data",
    "draw",
    "interpretations",
    "compare",
    "visual",
    "representation",
    "data",
    "summarizing",
    "findings",
    "using",
    "data",
    "visualization",
    "provide",
    "summary",
    "relationships",
    "trends",
    "patterns",
    "hidden",
    "data",
    "impossible",
    "would",
    "hard",
    "decipher",
    "data",
    "dump",
    "data",
    "visualization",
    "value",
    "choose",
    "visualization",
    "effectively",
    "delivers",
    "findings",
    "audience",
    "need",
    "begin",
    "asking",
    "questions",
    "relationship",
    "trying",
    "establish",
    "want",
    "compare",
    "relative",
    "proportion",
    "sub",
    "parts",
    "whole",
    "example",
    "contribution",
    "different",
    "product",
    "lines",
    "total",
    "revenue",
    "company",
    "want",
    "compare",
    "multiple",
    "values",
    "number",
    "products",
    "sold",
    "revenues",
    "generated",
    "last",
    "three",
    "years",
    "want",
    "analyze",
    "single",
    "value",
    "time",
    "example",
    "could",
    "mean",
    "sale",
    "one",
    "specific",
    "product",
    "changed",
    "last",
    "three",
    "years",
    "need",
    "audience",
    "see",
    "correlation",
    "two",
    "variables",
    "correlation",
    "weather",
    "conditions",
    "booking",
    "ski",
    "resort",
    "example",
    "want",
    "detect",
    "anomalies",
    "data",
    "example",
    "finding",
    "values",
    "data",
    "could",
    "potentially",
    "skew",
    "findings",
    "question",
    "trying",
    "answer",
    "overarching",
    "question",
    "data",
    "visualization",
    "design",
    "process",
    "need",
    "able",
    "answer",
    "question",
    "audience",
    "every",
    "data",
    "set",
    "information",
    "visualize",
    "also",
    "need",
    "consider",
    "whether",
    "visualization",
    "needs",
    "static",
    "interactive",
    "interactive",
    "visualization",
    "example",
    "allow",
    "change",
    "values",
    "see",
    "effects",
    "related",
    "variable",
    "real",
    "time",
    "think",
    "key",
    "takeaway",
    "audience",
    "anticipate",
    "information",
    "needs",
    "questions",
    "might",
    "plan",
    "visualization",
    "delivers",
    "message",
    "clearly",
    "impactfully",
    "let",
    "look",
    "basic",
    "examples",
    "types",
    "graphs",
    "create",
    "visualizing",
    "data",
    "bar",
    "charts",
    "great",
    "comparing",
    "related",
    "data",
    "sets",
    "parts",
    "whole",
    "example",
    "bar",
    "chart",
    "see",
    "population",
    "numbers",
    "10",
    "different",
    "countries",
    "compare",
    "one",
    "another",
    "column",
    "charts",
    "compare",
    "values",
    "side",
    "side",
    "use",
    "quite",
    "effectively",
    "show",
    "change",
    "time",
    "example",
    "showing",
    "page",
    "views",
    "user",
    "sessions",
    "time",
    "website",
    "changing",
    "basis",
    "although",
    "alike",
    "except",
    "orientation",
    "bar",
    "charts",
    "column",
    "charts",
    "always",
    "used",
    "interchangeably",
    "example",
    "column",
    "chart",
    "may",
    "better",
    "suited",
    "showing",
    "negative",
    "positive",
    "values",
    "pie",
    "charts",
    "show",
    "breakdown",
    "entity",
    "subparts",
    "proportion",
    "subparts",
    "relation",
    "one",
    "another",
    "portion",
    "pie",
    "chart",
    "represents",
    "static",
    "value",
    "category",
    "sum",
    "categories",
    "equal",
    "hundred",
    "percent",
    "example",
    "marketing",
    "campaign",
    "four",
    "marketing",
    "channels",
    "social",
    "sites",
    "native",
    "advertising",
    "paid",
    "influencers",
    "live",
    "events",
    "see",
    "total",
    "number",
    "leads",
    "generated",
    "per",
    "channel",
    "line",
    "charts",
    "display",
    "trends",
    "great",
    "showing",
    "data",
    "value",
    "changing",
    "relation",
    "continuous",
    "variable",
    "example",
    "sale",
    "product",
    "multiple",
    "products",
    "changed",
    "time",
    "time",
    "continuous",
    "variable",
    "line",
    "charts",
    "used",
    "understanding",
    "trends",
    "patterns",
    "variations",
    "data",
    "also",
    "comparing",
    "different",
    "related",
    "data",
    "sets",
    "multiple",
    "series",
    "data",
    "visualization",
    "also",
    "used",
    "build",
    "dashboards",
    "dashboards",
    "organize",
    "display",
    "reports",
    "visualizations",
    "coming",
    "multiple",
    "data",
    "sources",
    "single",
    "graphical",
    "interface",
    "use",
    "dashboards",
    "monitor",
    "daily",
    "progress",
    "overall",
    "health",
    "business",
    "function",
    "even",
    "specific",
    "process",
    "dashboards",
    "present",
    "operational",
    "analytical",
    "data",
    "example",
    "could",
    "marketing",
    "dashboard",
    "monitor",
    "current",
    "marketing",
    "campaign",
    "reach",
    "outs",
    "queries",
    "generated",
    "sales",
    "conversions",
    "real",
    "time",
    "part",
    "dashboard",
    "could",
    "also",
    "seeing",
    "conversion",
    "rate",
    "campaign",
    "compares",
    "conversion",
    "rate",
    "successfully",
    "run",
    "campaigns",
    "past",
    "dashboards",
    "great",
    "tool",
    "present",
    "bird",
    "eye",
    "view",
    "complete",
    "picture",
    "also",
    "allowing",
    "drill",
    "next",
    "level",
    "information",
    "parameter",
    "dashboards",
    "easy",
    "comprehend",
    "average",
    "user",
    "make",
    "collaboration",
    "easy",
    "teams",
    "allow",
    "generate",
    "reports",
    "go",
    "using",
    "dashboards",
    "see",
    "result",
    "variations",
    "data",
    "metrics",
    "almost",
    "instantly",
    "help",
    "evaluate",
    "situation",
    "multiple",
    "perspectives",
    "go",
    "without",
    "go",
    "back",
    "drawing",
    "board",
    "foreign",
    "music",
    "look",
    "commonly",
    "used",
    "data",
    "visualization",
    "software",
    "tools",
    "include",
    "spreadsheets",
    "jupyter",
    "notebook",
    "python",
    "libraries",
    "rstudio",
    "shiny",
    "ibm",
    "cognos",
    "analytics",
    "tableau",
    "microsoft",
    "power",
    "bi",
    "data",
    "analytics",
    "solutions",
    "others",
    "specifically",
    "data",
    "visualization",
    "ranging",
    "free",
    "open",
    "source",
    "tools",
    "commercially",
    "available",
    "solutions",
    "spreadsheets",
    "microsoft",
    "excel",
    "google",
    "sheets",
    "possibly",
    "commonly",
    "used",
    "software",
    "make",
    "graphical",
    "representations",
    "data",
    "sets",
    "spreadsheets",
    "easy",
    "learn",
    "ton",
    "documentation",
    "video",
    "tutorials",
    "available",
    "online",
    "ready",
    "reference",
    "excel",
    "provides",
    "several",
    "chart",
    "types",
    "ranging",
    "basic",
    "bar",
    "line",
    "pi",
    "pivot",
    "charts",
    "advanced",
    "options",
    "scatter",
    "charts",
    "trend",
    "lines",
    "gantt",
    "charts",
    "waterfall",
    "charts",
    "combination",
    "charts",
    "using",
    "combine",
    "one",
    "type",
    "charts",
    "excel",
    "also",
    "provides",
    "recommendations",
    "best",
    "visual",
    "representation",
    "data",
    "set",
    "make",
    "charts",
    "presentable",
    "add",
    "chart",
    "title",
    "change",
    "colors",
    "elements",
    "add",
    "labels",
    "data",
    "google",
    "sheets",
    "also",
    "offers",
    "similar",
    "chart",
    "types",
    "visualization",
    "though",
    "excel",
    "inbuilt",
    "formula",
    "based",
    "options",
    "google",
    "sheets",
    "like",
    "excel",
    "google",
    "sheets",
    "help",
    "choose",
    "right",
    "visualization",
    "highlight",
    "data",
    "wish",
    "visualize",
    "click",
    "chart",
    "button",
    "get",
    "list",
    "suggested",
    "charts",
    "best",
    "suited",
    "data",
    "charts",
    "reports",
    "automatically",
    "update",
    "excel",
    "well",
    "google",
    "sheets",
    "underlying",
    "data",
    "changed",
    "google",
    "sheets",
    "preferred",
    "excel",
    "multiple",
    "users",
    "need",
    "collaborate",
    "jupiter",
    "notebook",
    "open",
    "sourced",
    "web",
    "application",
    "provides",
    "great",
    "way",
    "explore",
    "data",
    "create",
    "visualizations",
    "python",
    "expert",
    "use",
    "jupyter",
    "notebook",
    "python",
    "provides",
    "host",
    "libraries",
    "used",
    "data",
    "visualization",
    "let",
    "look",
    "libraries",
    "matplotlib",
    "widely",
    "used",
    "python",
    "data",
    "visualization",
    "library",
    "provides",
    "different",
    "kinds",
    "2d",
    "3d",
    "plots",
    "flexibility",
    "create",
    "plots",
    "several",
    "different",
    "ways",
    "using",
    "matplotlib",
    "create",
    "high",
    "quality",
    "interactive",
    "graphs",
    "plots",
    "lines",
    "code",
    "large",
    "community",
    "support",
    "support",
    "open",
    "source",
    "tool",
    "bokeh",
    "provides",
    "interactive",
    "charts",
    "plots",
    "known",
    "delivering",
    "high",
    "performance",
    "interactivity",
    "large",
    "streaming",
    "data",
    "sets",
    "bokeh",
    "offers",
    "flexibility",
    "applying",
    "interaction",
    "layouts",
    "different",
    "styling",
    "options",
    "visualize",
    "also",
    "transform",
    "visualizations",
    "written",
    "python",
    "libraries",
    "matplotlib",
    "seaborn",
    "ggplot",
    "dash",
    "python",
    "framework",
    "creating",
    "interactive",
    "visualizations",
    "using",
    "dash",
    "build",
    "highly",
    "interactive",
    "web",
    "applications",
    "using",
    "python",
    "code",
    "knowledge",
    "html",
    "javascript",
    "useful",
    "requirement",
    "dash",
    "easily",
    "maintainable",
    "mobile",
    "ready",
    "using",
    "rstudio",
    "create",
    "basic",
    "visualizations",
    "histograms",
    "bar",
    "charts",
    "line",
    "charts",
    "box",
    "plots",
    "scatter",
    "plots",
    "advanced",
    "visualizations",
    "heat",
    "maps",
    "mosaic",
    "maps",
    "3d",
    "graphs",
    "corelograms",
    "shiny",
    "r",
    "package",
    "helps",
    "build",
    "interactive",
    "web",
    "apps",
    "host",
    "standalone",
    "apps",
    "web",
    "page",
    "web",
    "apps",
    "seamlessly",
    "display",
    "objects",
    "plots",
    "tables",
    "made",
    "live",
    "allow",
    "access",
    "anyone",
    "also",
    "build",
    "dashboards",
    "using",
    "shiny",
    "ease",
    "working",
    "shiny",
    "popularized",
    "among",
    "data",
    "professionals",
    "ibm",
    "cognos",
    "analytics",
    "analytic",
    "solution",
    "visualization",
    "features",
    "provided",
    "cognos",
    "include",
    "importing",
    "custom",
    "visualizations",
    "forecasting",
    "feature",
    "provides",
    "time",
    "series",
    "data",
    "modeling",
    "forecasts",
    "based",
    "data",
    "presented",
    "corresponding",
    "visualizations",
    "recommendation",
    "visualizations",
    "based",
    "data",
    "conditional",
    "formatting",
    "allows",
    "see",
    "distribution",
    "data",
    "highlight",
    "exceptional",
    "data",
    "points",
    "example",
    "highlighting",
    "high",
    "low",
    "sales",
    "numbers",
    "certain",
    "threshold",
    "cognos",
    "known",
    "superior",
    "visualizations",
    "overlaying",
    "data",
    "physical",
    "world",
    "using",
    "geospatial",
    "capabilities",
    "tableau",
    "software",
    "company",
    "produces",
    "interactive",
    "data",
    "visualization",
    "products",
    "using",
    "tableau",
    "products",
    "create",
    "interactive",
    "graphs",
    "charts",
    "form",
    "dashboards",
    "worksheets",
    "drag",
    "drop",
    "gestures",
    "tableau",
    "also",
    "offers",
    "option",
    "publish",
    "results",
    "form",
    "stories",
    "import",
    "r",
    "python",
    "scripts",
    "tableau",
    "take",
    "advantage",
    "visualization",
    "features",
    "far",
    "superior",
    "languages",
    "tableau",
    "visualization",
    "capabilities",
    "easy",
    "intuitive",
    "use",
    "tableau",
    "compatible",
    "excel",
    "files",
    "text",
    "files",
    "relational",
    "databases",
    "cloud",
    "database",
    "sources",
    "google",
    "analytics",
    "amazon",
    "redshift",
    "power",
    "bi",
    "business",
    "analytics",
    "service",
    "microsoft",
    "enables",
    "create",
    "reports",
    "dashboards",
    "powerful",
    "flexible",
    "tool",
    "known",
    "speed",
    "efficiency",
    "easy",
    "use",
    "drag",
    "drop",
    "interface",
    "power",
    "bi",
    "compatible",
    "multiple",
    "sources",
    "including",
    "excel",
    "sql",
    "server",
    "data",
    "repositories",
    "makes",
    "excellent",
    "choice",
    "data",
    "professionals",
    "power",
    "bi",
    "provides",
    "ability",
    "collaborate",
    "share",
    "customized",
    "dashboards",
    "interactive",
    "reports",
    "securely",
    "even",
    "mobiles",
    "power",
    "bi",
    "dashboard",
    "consists",
    "many",
    "visualizations",
    "single",
    "page",
    "help",
    "tell",
    "story",
    "visualizations",
    "called",
    "tiles",
    "pinned",
    "dashboard",
    "dashboard",
    "interactive",
    "means",
    "change",
    "one",
    "tile",
    "affects",
    "deciding",
    "tools",
    "use",
    "need",
    "consider",
    "ease",
    "use",
    "purpose",
    "visualization",
    "terms",
    "tools",
    "available",
    "visualization",
    "capabilities",
    "offer",
    "visualize",
    "create",
    "foreign",
    "music",
    "data",
    "professionals",
    "talk",
    "visualization",
    "tools",
    "rely",
    "visualization",
    "tool",
    "rely",
    "life",
    "cognosis",
    "reasons",
    "one",
    "allows",
    "quickly",
    "import",
    "spreadsheet",
    "connect",
    "database",
    "visualize",
    "data",
    "whether",
    "understanding",
    "want",
    "look",
    "dragging",
    "fields",
    "using",
    "ai",
    "assistant",
    "present",
    "data",
    "help",
    "understand",
    "explore",
    "might",
    "interesting",
    "new",
    "data",
    "set",
    "networked",
    "top",
    "also",
    "go",
    "ahead",
    "start",
    "complex",
    "things",
    "even",
    "robust",
    "analysis",
    "reporting",
    "tool",
    "allow",
    "build",
    "schedule",
    "reports",
    "delivery",
    "wanted",
    "sales",
    "team",
    "pipeline",
    "report",
    "sales",
    "opportunity",
    "report",
    "every",
    "monday",
    "morning",
    "set",
    "use",
    "call",
    "bursky",
    "sent",
    "automatically",
    "every",
    "sunday",
    "night",
    "waiting",
    "morning",
    "top",
    "start",
    "combine",
    "multiple",
    "data",
    "sources",
    "system",
    "help",
    "create",
    "joins",
    "together",
    "able",
    "visualize",
    "simple",
    "simple",
    "dashboard",
    "highly",
    "interactive",
    "allowing",
    "filter",
    "sort",
    "dynamically",
    "well",
    "share",
    "rest",
    "organization",
    "every",
    "user",
    "go",
    "experience",
    "set",
    "dashboard",
    "everyone",
    "access",
    "terms",
    "visualization",
    "tools",
    "rely",
    "looker",
    "data",
    "visualization",
    "tool",
    "sits",
    "atop",
    "company",
    "internal",
    "database",
    "similar",
    "tableau",
    "also",
    "used",
    "past",
    "find",
    "pretty",
    "easy",
    "use",
    "great",
    "thing",
    "data",
    "visualization",
    "tools",
    "like",
    "looker",
    "tableau",
    "let",
    "everyone",
    "throughout",
    "organization",
    "regardless",
    "whether",
    "data",
    "professionals",
    "um",
    "easily",
    "kind",
    "see",
    "data",
    "basic",
    "aggregation",
    "sorting",
    "data",
    "visualization",
    "tool",
    "really",
    "rely",
    "exploratory",
    "data",
    "analysis",
    "r",
    "big",
    "convert",
    "recent",
    "years",
    "effectiveness",
    "basic",
    "data",
    "analysis",
    "data",
    "visualization",
    "r",
    "particularly",
    "using",
    "tidy",
    "burst",
    "collection",
    "packages",
    "help",
    "really",
    "easily",
    "load",
    "data",
    "aggregate",
    "different",
    "levels",
    "also",
    "quickly",
    "easily",
    "visualize",
    "pablo",
    "power",
    "bi",
    "easy",
    "pick",
    "helpful",
    "demonstrate",
    "data",
    "companies",
    "people",
    "start",
    "utilize",
    "templates",
    "libraries",
    "would",
    "say",
    "visual",
    "views",
    "probably",
    "excel",
    "microsoft",
    "suite",
    "looking",
    "using",
    "sums",
    "macros",
    "make",
    "sure",
    "data",
    "even",
    "dive",
    "clean",
    "makes",
    "sense",
    "prepped",
    "needed",
    "foreign",
    "data",
    "analysts",
    "job",
    "openings",
    "exist",
    "across",
    "industry",
    "government",
    "academia",
    "every",
    "industry",
    "banking",
    "finance",
    "insurance",
    "health",
    "care",
    "retail",
    "information",
    "technology",
    "space",
    "skilled",
    "data",
    "analysts",
    "roles",
    "sought",
    "large",
    "businesses",
    "startups",
    "new",
    "ventures",
    "according",
    "forbes",
    "global",
    "big",
    "data",
    "analytics",
    "market",
    "stood",
    "billion",
    "us",
    "dollars",
    "2018",
    "expected",
    "grow",
    "compound",
    "annual",
    "growth",
    "rate",
    "percent",
    "2019",
    "2027",
    "reach",
    "billion",
    "us",
    "dollars",
    "year",
    "currently",
    "demand",
    "skilled",
    "data",
    "analysts",
    "far",
    "outweighs",
    "supply",
    "means",
    "companies",
    "willing",
    "pay",
    "premium",
    "hire",
    "skilled",
    "data",
    "analysts",
    "wide",
    "variety",
    "job",
    "roles",
    "available",
    "data",
    "analysts",
    "understand",
    "career",
    "path",
    "open",
    "broadly",
    "classify",
    "roles",
    "data",
    "analysts",
    "specialist",
    "roles",
    "domain",
    "specialist",
    "roles",
    "data",
    "analysts",
    "specialist",
    "roles",
    "data",
    "analysts",
    "want",
    "stay",
    "focused",
    "grow",
    "technical",
    "functional",
    "aspects",
    "role",
    "path",
    "could",
    "starting",
    "career",
    "associate",
    "junior",
    "data",
    "analyst",
    "work",
    "way",
    "analyst",
    "senior",
    "analyst",
    "lead",
    "analyst",
    "principal",
    "analyst",
    "roles",
    "boundaries",
    "roles",
    "years",
    "experience",
    "qualify",
    "next",
    "level",
    "nature",
    "experience",
    "need",
    "gain",
    "move",
    "could",
    "vary",
    "depending",
    "industry",
    "size",
    "organization",
    "big",
    "team",
    "smaller",
    "teams",
    "example",
    "could",
    "gaining",
    "experience",
    "facets",
    "data",
    "analysis",
    "gathering",
    "data",
    "way",
    "visualizing",
    "presenting",
    "findings",
    "stakeholders",
    "may",
    "happen",
    "within",
    "short",
    "span",
    "time",
    "larger",
    "teams",
    "organizations",
    "roles",
    "may",
    "typically",
    "bifurcated",
    "based",
    "activity",
    "means",
    "could",
    "gaining",
    "experience",
    "one",
    "specific",
    "phase",
    "process",
    "move",
    "next",
    "helps",
    "hone",
    "skills",
    "one",
    "part",
    "process",
    "move",
    "next",
    "journey",
    "associate",
    "data",
    "analyst",
    "lead",
    "principled",
    "data",
    "analyst",
    "continually",
    "advancing",
    "technical",
    "statistical",
    "analytical",
    "skills",
    "foundational",
    "level",
    "expert",
    "level",
    "demonstrating",
    "ability",
    "work",
    "set",
    "tools",
    "platforms",
    "different",
    "aspects",
    "data",
    "analysis",
    "process",
    "wide",
    "variety",
    "use",
    "cases",
    "terms",
    "technical",
    "skills",
    "may",
    "start",
    "knowing",
    "one",
    "querying",
    "tool",
    "programming",
    "language",
    "one",
    "type",
    "data",
    "repository",
    "limited",
    "set",
    "visualization",
    "tools",
    "gather",
    "experience",
    "expected",
    "learn",
    "demonstrate",
    "ability",
    "work",
    "tools",
    "languages",
    "data",
    "repositories",
    "newer",
    "technologies",
    "communication",
    "skills",
    "presentation",
    "skills",
    "stakeholder",
    "management",
    "skills",
    "project",
    "management",
    "skills",
    "need",
    "honed",
    "taken",
    "notch",
    "progressively",
    "lead",
    "principal",
    "analyst",
    "may",
    "also",
    "responsible",
    "establishing",
    "processes",
    "team",
    "making",
    "recommendations",
    "software",
    "tools",
    "team",
    "work",
    "upskilling",
    "team",
    "expanding",
    "team",
    "include",
    "profiles",
    "organizations",
    "responsibilities",
    "could",
    "aligned",
    "manager",
    "level",
    "person",
    "risen",
    "ranks",
    "manage",
    "team",
    "data",
    "analysts",
    "domain",
    "specialists",
    "also",
    "known",
    "functional",
    "analysts",
    "analysts",
    "acquire",
    "specialization",
    "specific",
    "domain",
    "seen",
    "authority",
    "domain",
    "hr",
    "healthcare",
    "sales",
    "finance",
    "social",
    "media",
    "digital",
    "marketing",
    "may",
    "technically",
    "skilled",
    "people",
    "roles",
    "carry",
    "titles",
    "hr",
    "analyst",
    "marketing",
    "analyst",
    "sales",
    "analyst",
    "healthcare",
    "analyst",
    "social",
    "media",
    "analyst",
    "analytics",
    "enabled",
    "job",
    "roles",
    "include",
    "roles",
    "project",
    "managers",
    "marketing",
    "managers",
    "hr",
    "managers",
    "jobs",
    "analytics",
    "skills",
    "lead",
    "greater",
    "efficiency",
    "effectiveness",
    "fair",
    "amount",
    "data",
    "analyst",
    "job",
    "openings",
    "analytics",
    "enabled",
    "organizations",
    "rely",
    "data",
    "decision",
    "making",
    "data",
    "analyst",
    "also",
    "options",
    "exploring",
    "learning",
    "new",
    "skills",
    "gain",
    "entry",
    "data",
    "professions",
    "data",
    "engineering",
    "data",
    "science",
    "example",
    "starting",
    "junior",
    "data",
    "analyst",
    "really",
    "like",
    "working",
    "data",
    "lakes",
    "big",
    "data",
    "repositories",
    "acquire",
    "expertise",
    "technologies",
    "evolve",
    "career",
    "becoming",
    "big",
    "data",
    "engineer",
    "business",
    "side",
    "things",
    "excite",
    "could",
    "similarly",
    "explore",
    "skills",
    "required",
    "making",
    "lateral",
    "move",
    "business",
    "analytics",
    "business",
    "intelligence",
    "analytics",
    "data",
    "analyst",
    "career",
    "landscape",
    "vast",
    "good",
    "thing",
    "plethora",
    "resources",
    "available",
    "help",
    "grow",
    "successful",
    "journey",
    "data",
    "analyst",
    "need",
    "grab",
    "opportunities",
    "want",
    "pursue",
    "ones",
    "present",
    "learn",
    "along",
    "way",
    "music",
    "video",
    "listen",
    "data",
    "professionals",
    "talk",
    "got",
    "profession",
    "current",
    "role",
    "data",
    "professional",
    "exist",
    "took",
    "position",
    "realized",
    "need",
    "company",
    "provide",
    "data",
    "faster",
    "efficient",
    "manner",
    "going",
    "department",
    "would",
    "meeting",
    "discuss",
    "meeting",
    "requirements",
    "would",
    "product",
    "people",
    "satisfied",
    "get",
    "end",
    "line",
    "go",
    "whole",
    "process",
    "get",
    "looking",
    "filling",
    "need",
    "company",
    "provide",
    "reports",
    "two",
    "weeks",
    "put",
    "together",
    "company",
    "database",
    "access",
    "information",
    "analysts",
    "able",
    "meet",
    "unmet",
    "need",
    "company",
    "got",
    "day",
    "professional",
    "role",
    "chance",
    "actually",
    "working",
    "phd",
    "economics",
    "university",
    "illinois",
    "colleague",
    "mine",
    "suggested",
    "masters",
    "statistics",
    "would",
    "also",
    "excellent",
    "value",
    "add",
    "got",
    "statistics",
    "program",
    "well",
    "illinois",
    "started",
    "pretty",
    "hooked",
    "going",
    "back",
    "speak",
    "words",
    "original",
    "goal",
    "becoming",
    "economist",
    "actually",
    "evolved",
    "career",
    "filled",
    "data",
    "modeling",
    "analytics",
    "inside",
    "gathering",
    "communication",
    "um",
    "visualization",
    "course",
    "underlying",
    "problem",
    "solving",
    "got",
    "data",
    "analyst",
    "role",
    "financial",
    "data",
    "company",
    "actually",
    "accident",
    "back",
    "company",
    "started",
    "hire",
    "equity",
    "data",
    "analysts",
    "mainland",
    "china",
    "lucky",
    "join",
    "team",
    "looking",
    "someone",
    "financial",
    "analysis",
    "skill",
    "sets",
    "bring",
    "table",
    "team",
    "started",
    "hire",
    "someone",
    "technical",
    "skill",
    "sets",
    "like",
    "python",
    "r",
    "cycle",
    "always",
    "love",
    "numbers",
    "one",
    "things",
    "happens",
    "work",
    "numbers",
    "much",
    "start",
    "tell",
    "story",
    "ability",
    "look",
    "numbers",
    "tell",
    "story",
    "speaks",
    "always",
    "love",
    "numbers",
    "always",
    "attracted",
    "data",
    "analytics",
    "whether",
    "excel",
    "spreadsheets",
    "whether",
    "quickbooks",
    "sort",
    "data",
    "sets",
    "help",
    "drive",
    "information",
    "looking",
    "especially",
    "financial",
    "industry",
    "looking",
    "profit",
    "loss",
    "balance",
    "sheet",
    "happens",
    "one",
    "company",
    "buys",
    "another",
    "company",
    "always",
    "looking",
    "data",
    "talk",
    "speak",
    "company",
    "history",
    "future",
    "got",
    "current",
    "role",
    "data",
    "scientist",
    "uh",
    "straight",
    "grad",
    "program",
    "master",
    "data",
    "science",
    "grad",
    "program",
    "worked",
    "data",
    "analyst",
    "analytics",
    "manager",
    "music",
    "video",
    "listen",
    "data",
    "professionals",
    "talk",
    "employers",
    "look",
    "data",
    "analyst",
    "employers",
    "look",
    "data",
    "analysts",
    "integrity",
    "hiring",
    "process",
    "ask",
    "choose",
    "one",
    "would",
    "rather",
    "meet",
    "deadline",
    "get",
    "right",
    "answer",
    "always",
    "looking",
    "someone",
    "would",
    "say",
    "want",
    "make",
    "sure",
    "information",
    "right",
    "missing",
    "deadline",
    "detrimental",
    "company",
    "making",
    "dollar",
    "decision",
    "wrong",
    "information",
    "someone",
    "losing",
    "job",
    "pulled",
    "reported",
    "correctly",
    "much",
    "important",
    "integrity",
    "think",
    "number",
    "one",
    "thing",
    "employers",
    "look",
    "data",
    "analysts",
    "someone",
    "communicate",
    "clearly",
    "brilliant",
    "analysis",
    "world",
    "ca",
    "communicate",
    "external",
    "stakeholders",
    "really",
    "worth",
    "anything",
    "think",
    "skill",
    "really",
    "sought",
    "think",
    "another",
    "thing",
    "companies",
    "obviously",
    "look",
    "look",
    "data",
    "analysts",
    "uh",
    "fluency",
    "numbers",
    "ability",
    "understand",
    "complex",
    "analyzes",
    "ability",
    "understand",
    "ap",
    "tests",
    "results",
    "ap",
    "tests",
    "saying",
    "implication",
    "results",
    "also",
    "think",
    "increasingly",
    "employers",
    "looking",
    "data",
    "analysts",
    "really",
    "strong",
    "sql",
    "skills",
    "another",
    "thing",
    "employers",
    "looking",
    "data",
    "analysts",
    "growth",
    "mindset",
    "willingness",
    "learn",
    "industry",
    "changing",
    "really",
    "fast",
    "pace",
    "think",
    "looking",
    "programming",
    "skills",
    "including",
    "python",
    "sickle",
    "time",
    "looking",
    "personalities",
    "whether",
    "whether",
    "like",
    "working",
    "data",
    "whether",
    "problem",
    "solver",
    "forth",
    "employer",
    "hire",
    "people",
    "time",
    "looking",
    "looking",
    "people",
    "somewhat",
    "overachievers",
    "want",
    "front",
    "want",
    "go",
    "looking",
    "people",
    "higher",
    "aspirations",
    "also",
    "able",
    "think",
    "outside",
    "box",
    "going",
    "say",
    "abc",
    "going",
    "going",
    "plus",
    "going",
    "plus",
    "think",
    "give",
    "alternatives",
    "people",
    "able",
    "troubleshoot",
    "something",
    "goes",
    "wrong",
    "going",
    "stop",
    "say",
    "oh",
    "goodness",
    "need",
    "go",
    "talk",
    "supervisor",
    "going",
    "say",
    "problem",
    "thoughts",
    "two",
    "possible",
    "solutions",
    "resolve",
    "job",
    "company",
    "keep",
    "moving",
    "forward",
    "want",
    "good",
    "numbers",
    "also",
    "someone",
    "think",
    "outside",
    "box",
    "able",
    "problem",
    "solve",
    "troubleshoot",
    "going",
    "employers",
    "going",
    "looking",
    "ever",
    "look",
    "ability",
    "know",
    "data",
    "data",
    "mean",
    "several",
    "things",
    "right",
    "comfortable",
    "various",
    "formats",
    "able",
    "think",
    "mean",
    "know",
    "kind",
    "data",
    "want",
    "solve",
    "problems",
    "hand",
    "knowing",
    "data",
    "skill",
    "important",
    "problem",
    "solving",
    "another",
    "key",
    "skill",
    "meaning",
    "um",
    "uh",
    "problem",
    "presented",
    "data",
    "analyst",
    "able",
    "know",
    "tackle",
    "problem",
    "using",
    "data",
    "whatever",
    "format",
    "may",
    "sitting",
    "able",
    "analyze",
    "present",
    "insights",
    "uh",
    "solve",
    "problem",
    "also",
    "need",
    "um",
    "dynamic",
    "um",
    "presented",
    "different",
    "kind",
    "data",
    "set",
    "suddenly",
    "looks",
    "nothing",
    "like",
    "need",
    "able",
    "adapt",
    "um",
    "change",
    "quality",
    "dynamic",
    "adaptable",
    "also",
    "important",
    "also",
    "need",
    "able",
    "pick",
    "technical",
    "skills",
    "quickly",
    "mean",
    "one",
    "kind",
    "um",
    "sql",
    "diagram",
    "used",
    "one",
    "setting",
    "need",
    "able",
    "uh",
    "uh",
    "know",
    "operate",
    "different",
    "paradigm",
    "place",
    "using",
    "studio",
    "know",
    "python",
    "need",
    "able",
    "pick",
    "uh",
    "studio",
    "quickly",
    "kind",
    "thing",
    "able",
    "learn",
    "fast",
    "dynamic",
    "knowing",
    "data",
    "things",
    "employers",
    "look",
    "good",
    "data",
    "analyst",
    "music",
    "thank",
    "various",
    "paths",
    "take",
    "gaining",
    "entry",
    "data",
    "analyst",
    "field",
    "employers",
    "may",
    "ask",
    "academic",
    "degree",
    "prerequisite",
    "even",
    "degree",
    "still",
    "several",
    "options",
    "available",
    "help",
    "gain",
    "entry",
    "even",
    "make",
    "lateral",
    "move",
    "field",
    "data",
    "analysis",
    "let",
    "start",
    "obvious",
    "path",
    "academic",
    "degree",
    "data",
    "analytics",
    "statistics",
    "computer",
    "science",
    "management",
    "information",
    "systems",
    "information",
    "technology",
    "management",
    "start",
    "strong",
    "advantage",
    "could",
    "alternately",
    "enroll",
    "online",
    "training",
    "programs",
    "equip",
    "required",
    "knowledge",
    "comprehensive",
    "online",
    "programs",
    "data",
    "analysis",
    "specializations",
    "offered",
    "learning",
    "platforms",
    "coursera",
    "edx",
    "udacity",
    "courses",
    "designed",
    "delivered",
    "world",
    "best",
    "domain",
    "experts",
    "since",
    "fair",
    "idea",
    "technical",
    "functional",
    "soft",
    "skills",
    "need",
    "order",
    "data",
    "analyst",
    "choosing",
    "right",
    "learning",
    "path",
    "fairly",
    "straightforward",
    "gather",
    "work",
    "experience",
    "keep",
    "advancing",
    "knowledge",
    "skills",
    "specific",
    "areas",
    "example",
    "statistics",
    "spreadsheets",
    "sql",
    "python",
    "data",
    "visualization",
    "problem",
    "solving",
    "storytelling",
    "making",
    "impactful",
    "presentations",
    "courses",
    "also",
    "give",
    "assignments",
    "projects",
    "give",
    "feel",
    "real",
    "world",
    "application",
    "knowledge",
    "skills",
    "even",
    "add",
    "projects",
    "portfolio",
    "academic",
    "qualification",
    "courses",
    "help",
    "gain",
    "opportunities",
    "entry",
    "level",
    "work",
    "way",
    "experience",
    "grows",
    "let",
    "look",
    "scenario",
    "couple",
    "years",
    "experience",
    "different",
    "line",
    "work",
    "want",
    "make",
    "switch",
    "data",
    "analysis",
    "field",
    "good",
    "chance",
    "successfully",
    "plan",
    "well",
    "since",
    "data",
    "analysis",
    "vast",
    "field",
    "would",
    "useful",
    "first",
    "research",
    "knowledge",
    "skills",
    "need",
    "various",
    "job",
    "opportunities",
    "available",
    "growth",
    "opportunities",
    "available",
    "path",
    "may",
    "considering",
    "tap",
    "online",
    "resources",
    "forums",
    "network",
    "friends",
    "colleagues",
    "connect",
    "people",
    "field",
    "gain",
    "insights",
    "scenarios",
    "currently",
    "working",
    "role",
    "may",
    "consider",
    "exploring",
    "domain",
    "specialist",
    "functional",
    "analyst",
    "path",
    "sales",
    "could",
    "consider",
    "starting",
    "journey",
    "positioning",
    "skilling",
    "sales",
    "analyst",
    "position",
    "begin",
    "advantage",
    "industry",
    "experience",
    "skill",
    "areas",
    "statistics",
    "programming",
    "example",
    "currently",
    "working",
    "technical",
    "role",
    "ability",
    "quickly",
    "pick",
    "tools",
    "software",
    "need",
    "data",
    "analyst",
    "role",
    "also",
    "probably",
    "stepping",
    "advantage",
    "good",
    "understanding",
    "domain",
    "industry",
    "skills",
    "problem",
    "solving",
    "project",
    "management",
    "communication",
    "storytelling",
    "may",
    "already",
    "using",
    "capacity",
    "existing",
    "job",
    "always",
    "enhance",
    "skills",
    "trainings",
    "online",
    "courses",
    "communities",
    "practice",
    "forums",
    "data",
    "analysis",
    "fast",
    "moving",
    "field",
    "curious",
    "open",
    "learning",
    "new",
    "things",
    "excited",
    "field",
    "able",
    "forge",
    "path",
    "forward",
    "regardless",
    "formal",
    "qualifications",
    "think",
    "may",
    "missing",
    "music",
    "video",
    "listen",
    "practicing",
    "data",
    "professionals",
    "talk",
    "various",
    "career",
    "options",
    "available",
    "field",
    "whole",
    "data",
    "related",
    "profession",
    "today",
    "also",
    "become",
    "um",
    "uh",
    "colorful",
    "dynamic",
    "evolving",
    "time",
    "also",
    "also",
    "presents",
    "lot",
    "range",
    "options",
    "anyone",
    "wants",
    "enter",
    "field",
    "uh",
    "know",
    "data",
    "professional",
    "ranges",
    "think",
    "various",
    "circles",
    "options",
    "starting",
    "data",
    "analyst",
    "right",
    "um",
    "upskill",
    "lot",
    "become",
    "data",
    "scientist",
    "also",
    "become",
    "statistician",
    "first",
    "started",
    "um",
    "specialize",
    "specific",
    "direction",
    "data",
    "order",
    "become",
    "data",
    "engineer",
    "start",
    "bi",
    "analyst",
    "specialist",
    "go",
    "become",
    "data",
    "engineer",
    "words",
    "either",
    "track",
    "data",
    "analyst",
    "data",
    "scientists",
    "track",
    "bi",
    "analyst",
    "data",
    "engineer",
    "kind",
    "parallel",
    "tracks",
    "within",
    "data",
    "profession",
    "um",
    "also",
    "go",
    "extreme",
    "become",
    "machine",
    "learning",
    "engineer",
    "ai",
    "engineer",
    "many",
    "roles",
    "many",
    "many",
    "rules",
    "um",
    "anyone",
    "interested",
    "field",
    "data",
    "um",
    "really",
    "take",
    "common",
    "career",
    "options",
    "available",
    "data",
    "analysts",
    "get",
    "deeper",
    "weeds",
    "machine",
    "learning",
    "engineering",
    "become",
    "data",
    "scientist",
    "machine",
    "learning",
    "engineer",
    "focus",
    "machine",
    "learning",
    "modeling",
    "another",
    "career",
    "option",
    "available",
    "data",
    "analyst",
    "dive",
    "deeper",
    "business",
    "inform",
    "company",
    "strategy",
    "think",
    "role",
    "really",
    "important",
    "interesting",
    "really",
    "evolved",
    "recent",
    "years",
    "um",
    "another",
    "path",
    "data",
    "analyst",
    "start",
    "become",
    "people",
    "manager",
    "manage",
    "data",
    "analysts",
    "work",
    "triage",
    "uh",
    "gets",
    "worked",
    "always",
    "going",
    "uh",
    "questions",
    "organization",
    "answered",
    "data",
    "people",
    "answer",
    "data",
    "manager",
    "role",
    "really",
    "interesting",
    "critical",
    "terms",
    "making",
    "sure",
    "important",
    "pieces",
    "work",
    "actually",
    "get",
    "worked",
    "bookkeeper",
    "accountant",
    "could",
    "cpa",
    "could",
    "back",
    "broker",
    "financial",
    "analyst",
    "government",
    "lot",
    "large",
    "companies",
    "could",
    "real",
    "estate",
    "broker",
    "lots",
    "people",
    "great",
    "data",
    "analysts",
    "really",
    "like",
    "numbers",
    "really",
    "numbers",
    "jump",
    "page",
    "data",
    "analysts",
    "might",
    "right",
    "thing",
    "thank",
    "music",
    "video",
    "listen",
    "data",
    "professionals",
    "giving",
    "advice",
    "aspiring",
    "data",
    "analysts",
    "one",
    "piece",
    "advice",
    "give",
    "aspiring",
    "data",
    "analyst",
    "keep",
    "learning",
    "get",
    "discouraged",
    "uh",
    "written",
    "analytics",
    "could",
    "ever",
    "learn",
    "lifetime",
    "try",
    "learn",
    "everything",
    "take",
    "time",
    "make",
    "sure",
    "every",
    "week",
    "every",
    "month",
    "every",
    "year",
    "constantly",
    "learning",
    "something",
    "new",
    "think",
    "serve",
    "well",
    "one",
    "piece",
    "advice",
    "given",
    "uh",
    "career",
    "found",
    "really",
    "really",
    "helpful",
    "consider",
    "career",
    "like",
    "uppercase",
    "broad",
    "knowledge",
    "top",
    "represents",
    "kind",
    "broad",
    "knowledge",
    "number",
    "different",
    "areas",
    "although",
    "deep",
    "know",
    "little",
    "bit",
    "least",
    "b",
    "testing",
    "machine",
    "learning",
    "data",
    "visualization",
    "sql",
    "python",
    "r",
    "bottom",
    "part",
    "go",
    "really",
    "deep",
    "least",
    "one",
    "area",
    "one",
    "area",
    "among",
    "ones",
    "mentioned",
    "really",
    "deep",
    "rigorous",
    "understanding",
    "use",
    "every",
    "job",
    "advantage",
    "meaning",
    "something",
    "found",
    "everything",
    "whether",
    "looking",
    "parents",
    "budget",
    "asking",
    "parents",
    "see",
    "checkbooks",
    "work",
    "fast",
    "food",
    "restaurant",
    "um",
    "looking",
    "numbers",
    "many",
    "people",
    "coming",
    "many",
    "many",
    "dollars",
    "turned",
    "talk",
    "manager",
    "next",
    "numbers",
    "actually",
    "mean",
    "talking",
    "potential",
    "employers",
    "examples",
    "ready",
    "necessarily",
    "work",
    "experience",
    "life",
    "experience",
    "analytics",
    "used",
    "analytics",
    "even",
    "personal",
    "life",
    "tell",
    "talk",
    "done",
    "personally",
    "professionally",
    "relates",
    "take",
    "long",
    "way",
    "piece",
    "advice",
    "give",
    "aspiring",
    "data",
    "scientists",
    "build",
    "professional",
    "portfolio",
    "showcases",
    "data",
    "science",
    "data",
    "analytics",
    "skills",
    "looking",
    "fun",
    "data",
    "sets",
    "online",
    "analyzing",
    "data",
    "sets",
    "also",
    "within",
    "job",
    "even",
    "current",
    "job",
    "data",
    "analyst",
    "look",
    "opportunities",
    "crunch",
    "numbers",
    "kind",
    "naturally",
    "lead",
    "nice",
    "portfolio",
    "nice",
    "wins",
    "terms",
    "data",
    "analyst",
    "projects",
    "advice",
    "aspiring",
    "data",
    "analyst",
    "follow",
    "passion",
    "find",
    "job",
    "meets",
    "needs",
    "gives",
    "joy",
    "nothing",
    "worse",
    "waking",
    "every",
    "morning",
    "hating",
    "go",
    "place",
    "employment",
    "many",
    "data",
    "analyst",
    "jobs",
    "various",
    "industries",
    "departments",
    "many",
    "options",
    "need",
    "take",
    "job",
    "job",
    "find",
    "something",
    "really",
    "fuels",
    "passion",
    "gives",
    "something",
    "get",
    "every",
    "morning",
    "foreign",
    "music",
    "listen",
    "women",
    "share",
    "experience",
    "data",
    "professional",
    "advice",
    "women",
    "aspiring",
    "enter",
    "field",
    "woman",
    "data",
    "science",
    "still",
    "run",
    "stereotype",
    "man",
    "job",
    "walked",
    "meetings",
    "people",
    "look",
    "disappointed",
    "confused",
    "take",
    "opportunity",
    "prove",
    "wrong",
    "job",
    "men",
    "person",
    "insight",
    "ability",
    "drive",
    "get",
    "job",
    "done",
    "long",
    "possess",
    "skills",
    "reason",
    "anyone",
    "ca",
    "anything",
    "put",
    "mind",
    "whether",
    "male",
    "female",
    "whether",
    "white",
    "black",
    "opportunity",
    "prove",
    "people",
    "wrong",
    "work",
    "produce",
    "would",
    "say",
    "tough",
    "find",
    "voice",
    "afraid",
    "use",
    "lot",
    "times",
    "women",
    "able",
    "find",
    "voice",
    "speak",
    "afraid",
    "people",
    "going",
    "treat",
    "us",
    "speak",
    "know",
    "important",
    "heard",
    "seen",
    "loud",
    "wrong",
    "data",
    "back",
    "good",
    "content",
    "things",
    "want",
    "say",
    "afraid",
    "raise",
    "hand",
    "let",
    "people",
    "know",
    "thinker",
    "get",
    "done",
    "going",
    "important",
    "progress",
    "real",
    "way",
    "get",
    "ahead",
    "drive",
    "people",
    "know",
    "drive",
    "quiet",
    "quietly",
    "working",
    "away",
    "corner",
    "lot",
    "times",
    "people",
    "ca",
    "see",
    "speak",
    "make",
    "sure",
    "voice",
    "heard",
    "make",
    "sure",
    "seen",
    "woman",
    "knows",
    "grow",
    "help",
    "data",
    "science",
    "field",
    "started",
    "um",
    "mostly",
    "men",
    "class",
    "especially",
    "back",
    "grad",
    "school",
    "um",
    "seeing",
    "data",
    "teams",
    "data",
    "science",
    "data",
    "engineering",
    "teams",
    "filled",
    "lot",
    "women",
    "well",
    "would",
    "um",
    "advise",
    "women",
    "continue",
    "upskilling",
    "um",
    "know",
    "able",
    "fond",
    "um",
    "like",
    "um",
    "know",
    "career",
    "filled",
    "programming",
    "data",
    "problem",
    "solving",
    "um",
    "continue",
    "building",
    "technical",
    "skill",
    "set",
    "represent",
    "landscape",
    "data",
    "professional",
    "strongly",
    "possible",
    "allow",
    "gender",
    "crutch",
    "still",
    "go",
    "hard",
    "put",
    "work",
    "show",
    "world",
    "amazing",
    "talents",
    "roles",
    "set",
    "aside",
    "specific",
    "genders",
    "fortunate",
    "enough",
    "work",
    "profession",
    "thoroughly",
    "enjoy",
    "go",
    "foreign",
    "want",
    "learn",
    "use",
    "spreadsheets",
    "start",
    "analyzing",
    "data",
    "using",
    "excel",
    "course",
    "ibm",
    "designed",
    "help",
    "work",
    "excel",
    "gives",
    "good",
    "grounding",
    "cleaning",
    "analyzing",
    "data",
    "important",
    "parts",
    "skill",
    "set",
    "required",
    "become",
    "data",
    "analyst",
    "learn",
    "data",
    "analysis",
    "techniques",
    "using",
    "spreadsheets",
    "also",
    "practice",
    "using",
    "multiple",
    "labs",
    "throughout",
    "course",
    "module",
    "1",
    "learn",
    "basics",
    "spreadsheets",
    "including",
    "spreadsheet",
    "terminology",
    "interface",
    "navigating",
    "around",
    "worksheets",
    "workbooks",
    "module",
    "2",
    "learn",
    "selecting",
    "data",
    "entering",
    "editing",
    "data",
    "copying",
    "auto",
    "filling",
    "data",
    "formatting",
    "data",
    "using",
    "functions",
    "formulas",
    "module",
    "3",
    "learn",
    "cleaning",
    "wrangling",
    "data",
    "using",
    "spreadsheet",
    "including",
    "fundamentals",
    "data",
    "quality",
    "data",
    "privacy",
    "removing",
    "duplicated",
    "inaccurate",
    "data",
    "removing",
    "empty",
    "rows",
    "removing",
    "data",
    "inconsistencies",
    "white",
    "spaces",
    "using",
    "flash",
    "fill",
    "text",
    "columns",
    "features",
    "module",
    "4",
    "learn",
    "analyzing",
    "data",
    "using",
    "spreadsheets",
    "including",
    "filtering",
    "data",
    "sorting",
    "data",
    "using",
    "common",
    "data",
    "analysis",
    "functions",
    "creating",
    "using",
    "pivot",
    "tables",
    "creating",
    "using",
    "slicers",
    "timelines",
    "end",
    "course",
    "module",
    "5",
    "complete",
    "series",
    "labs",
    "guide",
    "create",
    "first",
    "deliverable",
    "data",
    "analyst",
    "involve",
    "understanding",
    "business",
    "scenario",
    "cleaning",
    "preparing",
    "data",
    "analyzing",
    "data",
    "follow",
    "two",
    "different",
    "business",
    "scenarios",
    "throughout",
    "course",
    "using",
    "data",
    "set",
    "different",
    "scenarios",
    "data",
    "sets",
    "used",
    "lesson",
    "videos",
    "labs",
    "completing",
    "course",
    "able",
    "understand",
    "spreadsheets",
    "used",
    "data",
    "analysis",
    "tool",
    "understand",
    "use",
    "spreadsheets",
    "data",
    "analysis",
    "tool",
    "limitations",
    "create",
    "spreadsheet",
    "explain",
    "basic",
    "functionality",
    "perform",
    "data",
    "wrangling",
    "data",
    "cleaning",
    "tasks",
    "using",
    "excel",
    "analyze",
    "data",
    "using",
    "filter",
    "sort",
    "pivot",
    "table",
    "features",
    "within",
    "excel",
    "spreadsheets",
    "also",
    "perform",
    "intermediate",
    "level",
    "data",
    "wrangling",
    "data",
    "analysis",
    "tasks",
    "address",
    "business",
    "scenario",
    "course",
    "team",
    "peers",
    "available",
    "help",
    "course",
    "discussion",
    "forums",
    "case",
    "require",
    "assistance",
    "let",
    "get",
    "started",
    "next",
    "video",
    "get",
    "introduction",
    "spreadsheets",
    "music",
    "thank",
    "first",
    "video",
    "course",
    "list",
    "common",
    "spreadsheet",
    "applications",
    "available",
    "learn",
    "key",
    "capabilities",
    "spreadsheets",
    "discuss",
    "spreadsheets",
    "might",
    "useful",
    "tool",
    "data",
    "analyst",
    "several",
    "spreadsheet",
    "applications",
    "available",
    "marketplace",
    "widely",
    "known",
    "used",
    "others",
    "free",
    "others",
    "need",
    "paid",
    "far",
    "commonly",
    "used",
    "spreadsheet",
    "application",
    "fully",
    "featured",
    "microsoft",
    "excel",
    "desktop",
    "version",
    "comes",
    "paid",
    "form",
    "part",
    "office",
    "suite",
    "microsoft",
    "365",
    "subscriptions",
    "also",
    "cut",
    "version",
    "called",
    "excel",
    "web",
    "also",
    "known",
    "excel",
    "online",
    "online",
    "version",
    "free",
    "users",
    "microsoft",
    "account",
    "offer",
    "advanced",
    "features",
    "desktop",
    "version",
    "provides",
    "next",
    "popular",
    "google",
    "sheets",
    "offers",
    "lot",
    "though",
    "features",
    "excel",
    "provides",
    "free",
    "google",
    "account",
    "application",
    "integrates",
    "nicely",
    "google",
    "apps",
    "google",
    "forms",
    "google",
    "analytics",
    "google",
    "data",
    "studio",
    "libreoffice",
    "calc",
    "totally",
    "free",
    "open",
    "source",
    "desktop",
    "spreadsheet",
    "application",
    "offers",
    "basic",
    "functionality",
    "excel",
    "google",
    "sheets",
    "still",
    "lot",
    "tools",
    "need",
    "data",
    "analysis",
    "charts",
    "conditional",
    "formatting",
    "pivot",
    "tables",
    "spreadsheet",
    "apps",
    "include",
    "zoho",
    "sheet",
    "fully",
    "featured",
    "application",
    "comparable",
    "google",
    "sheets",
    "openoffice",
    "calc",
    "quip",
    "salesforce",
    "smartsheet",
    "predominantly",
    "project",
    "management",
    "apple",
    "numbers",
    "included",
    "apple",
    "devices",
    "mac",
    "computers",
    "also",
    "available",
    "app",
    "store",
    "apple",
    "devices",
    "many",
    "spreadsheet",
    "application",
    "options",
    "open",
    "fully",
    "featured",
    "basic",
    "desktop",
    "apps",
    "paid",
    "4",
    "free",
    "versions",
    "decide",
    "one",
    "fits",
    "needs",
    "budget",
    "spread",
    "sheets",
    "provide",
    "several",
    "advantages",
    "manual",
    "calculation",
    "methods",
    "example",
    "formulas",
    "correctly",
    "written",
    "assured",
    "calculations",
    "accurate",
    "calculations",
    "performed",
    "automatically",
    "spreadsheets",
    "also",
    "help",
    "keep",
    "data",
    "organized",
    "easily",
    "accessible",
    "data",
    "easily",
    "formatted",
    "filtered",
    "sorted",
    "suit",
    "needs",
    "make",
    "mistakes",
    "data",
    "entry",
    "calculations",
    "easily",
    "edit",
    "undo",
    "use",
    "error",
    "checking",
    "tools",
    "help",
    "remedy",
    "mistakes",
    "lastly",
    "analyze",
    "data",
    "spreadsheets",
    "create",
    "charts",
    "graphs",
    "reports",
    "help",
    "visualize",
    "data",
    "analysis",
    "since",
    "spreadsheet",
    "software",
    "personal",
    "computers",
    "first",
    "appeared",
    "market",
    "1970s",
    "apple",
    "ii",
    "pc",
    "spreadsheets",
    "come",
    "long",
    "way",
    "terms",
    "capabilities",
    "features",
    "offer",
    "businesses",
    "uncomplicated",
    "tables",
    "relatively",
    "simple",
    "computations",
    "powerful",
    "tools",
    "analysis",
    "management",
    "visualization",
    "enormous",
    "sets",
    "data",
    "common",
    "business",
    "uses",
    "spreadsheet",
    "applications",
    "include",
    "following",
    "data",
    "entry",
    "storage",
    "comparing",
    "large",
    "data",
    "sets",
    "modeling",
    "planning",
    "charting",
    "identifying",
    "trends",
    "flow",
    "charts",
    "business",
    "processes",
    "tracking",
    "business",
    "sales",
    "financial",
    "forecasting",
    "statistical",
    "analysis",
    "profit",
    "loss",
    "accounting",
    "budgeting",
    "forensic",
    "auditing",
    "payroll",
    "tax",
    "reporting",
    "invoicing",
    "scheduling",
    "away",
    "business",
    "side",
    "things",
    "typical",
    "uses",
    "include",
    "personal",
    "expenses",
    "household",
    "budgeting",
    "recipe",
    "library",
    "fitness",
    "tracking",
    "calorie",
    "counting",
    "weight",
    "monitoring",
    "sports",
    "leagues",
    "fantasy",
    "football",
    "cataloging",
    "music",
    "libraries",
    "even",
    "contact",
    "lists",
    "shopping",
    "lists",
    "christmas",
    "card",
    "lists",
    "data",
    "analyst",
    "use",
    "spreadsheets",
    "tool",
    "data",
    "analysis",
    "tasks",
    "including",
    "collecting",
    "harvesting",
    "data",
    "one",
    "distributed",
    "different",
    "sources",
    "cleaning",
    "data",
    "remove",
    "duplicates",
    "inaccuracies",
    "errors",
    "resolve",
    "missing",
    "values",
    "improve",
    "quality",
    "data",
    "analyzing",
    "data",
    "filtering",
    "sorting",
    "interpreting",
    "determine",
    "useful",
    "information",
    "gleaned",
    "visualizing",
    "data",
    "help",
    "tell",
    "story",
    "data",
    "analysis",
    "findings",
    "key",
    "business",
    "stakeholders",
    "interested",
    "parties",
    "within",
    "organization",
    "video",
    "introduction",
    "spreadsheets",
    "learned",
    "common",
    "spreadsheet",
    "applications",
    "main",
    "capabilities",
    "spreadsheets",
    "spreadsheets",
    "might",
    "useful",
    "tool",
    "data",
    "analyst",
    "next",
    "video",
    "look",
    "basics",
    "spreadsheets",
    "including",
    "common",
    "spreadsheet",
    "terminology",
    "music",
    "foreign",
    "basic",
    "understanding",
    "spreadsheet",
    "software",
    "available",
    "spreadsheets",
    "might",
    "useful",
    "tool",
    "data",
    "analyst",
    "let",
    "get",
    "started",
    "looking",
    "basics",
    "using",
    "spreadsheet",
    "application",
    "videos",
    "using",
    "full",
    "desktop",
    "version",
    "excel",
    "majority",
    "tasks",
    "perform",
    "also",
    "done",
    "using",
    "excel",
    "online",
    "spreadsheet",
    "applications",
    "google",
    "sheets",
    "let",
    "first",
    "cover",
    "basic",
    "spreadsheet",
    "terminology",
    "open",
    "excel",
    "option",
    "creating",
    "new",
    "blank",
    "workbook",
    "opening",
    "existing",
    "workbook",
    "going",
    "choose",
    "new",
    "blank",
    "workbook",
    "workbooks",
    "highest",
    "level",
    "component",
    "excel",
    "represented",
    "dot",
    "xlsx",
    "file",
    "open",
    "existing",
    "workbook",
    "create",
    "new",
    "workbook",
    "fact",
    "working",
    "dot",
    "xlsx",
    "file",
    "workbook",
    "contains",
    "data",
    "calculations",
    "functions",
    "contains",
    "several",
    "underlying",
    "elements",
    "make",
    "workbook",
    "workbook",
    "consists",
    "one",
    "worksheets",
    "represented",
    "tab",
    "excel",
    "worksheet",
    "given",
    "name",
    "displayed",
    "corresponding",
    "tab",
    "worksheet",
    "default",
    "tab",
    "named",
    "sheet1",
    "sheet",
    "2",
    "make",
    "worksheet",
    "tabs",
    "meaningful",
    "usual",
    "rename",
    "make",
    "sense",
    "relation",
    "worksheet",
    "purpose",
    "example",
    "might",
    "call",
    "worksheet",
    "january",
    "sales",
    "perhaps",
    "name",
    "region",
    "store",
    "even",
    "office",
    "department",
    "tab",
    "choose",
    "rename",
    "instead",
    "rename",
    "also",
    "name",
    "worksheet",
    "tab",
    "rename",
    "essentially",
    "worksheet",
    "tabs",
    "named",
    "anything",
    "want",
    "fit",
    "particular",
    "needs",
    "make",
    "easier",
    "understand",
    "worksheet",
    "represents",
    "note",
    "worksheet",
    "highlighted",
    "tire",
    "sales",
    "worksheet",
    "tab",
    "referred",
    "active",
    "worksheet",
    "want",
    "order",
    "worksheets",
    "different",
    "way",
    "simple",
    "either",
    "drag",
    "worksheet",
    "tab",
    "left",
    "right",
    "drop",
    "place",
    "want",
    "represented",
    "little",
    "black",
    "arrow",
    "comfortable",
    "dragging",
    "dropping",
    "longer",
    "way",
    "worksheet",
    "tab",
    "select",
    "move",
    "copy",
    "list",
    "titled",
    "sheet",
    "select",
    "want",
    "worksheet",
    "tab",
    "placed",
    "click",
    "ok",
    "every",
    "worksheet",
    "made",
    "lot",
    "rectangular",
    "boxes",
    "called",
    "cells",
    "cells",
    "contain",
    "data",
    "may",
    "text",
    "numbers",
    "formulas",
    "calculation",
    "results",
    "organized",
    "columns",
    "run",
    "vertically",
    "screen",
    "use",
    "letter",
    "system",
    "column",
    "b",
    "instance",
    "rows",
    "run",
    "horizontally",
    "across",
    "screen",
    "use",
    "numeric",
    "system",
    "row",
    "7",
    "example",
    "cell",
    "represented",
    "cell",
    "reference",
    "essentially",
    "column",
    "letter",
    "row",
    "number",
    "example",
    "click",
    "somewhere",
    "near",
    "center",
    "worksheet",
    "cell",
    "m20",
    "selected",
    "usually",
    "referred",
    "active",
    "cell",
    "indicated",
    "highlighted",
    "edges",
    "cell",
    "also",
    "look",
    "top",
    "left",
    "corner",
    "worksheet",
    "see",
    "cell",
    "reference",
    "noted",
    "little",
    "box",
    "see",
    "says",
    "m20",
    "one",
    "important",
    "thing",
    "note",
    "cells",
    "always",
    "referenced",
    "column",
    "letter",
    "first",
    "row",
    "number",
    "column",
    "row",
    "last",
    "element",
    "workbook",
    "want",
    "mention",
    "cell",
    "range",
    "identifies",
    "collection",
    "several",
    "cells",
    "selected",
    "together",
    "could",
    "mean",
    "cells",
    "row",
    "column",
    "could",
    "mean",
    "several",
    "rows",
    "columns",
    "together",
    "either",
    "done",
    "using",
    "mouse",
    "selecting",
    "first",
    "cell",
    "dragging",
    "across",
    "include",
    "cells",
    "use",
    "shift",
    "plus",
    "arrow",
    "keys",
    "range",
    "cells",
    "often",
    "referred",
    "array",
    "commonly",
    "used",
    "reference",
    "calculations",
    "formulas",
    "example",
    "want",
    "add",
    "values",
    "column",
    "cells",
    "d9",
    "d19",
    "would",
    "specify",
    "cell",
    "range",
    "within",
    "formula",
    "note",
    "cell",
    "ranges",
    "notated",
    "using",
    "full",
    "colon",
    "cell",
    "references",
    "example",
    "would",
    "d9",
    "colon",
    "d19",
    "specify",
    "cells",
    "row",
    "might",
    "d9",
    "colon",
    "h9",
    "select",
    "several",
    "rows",
    "columns",
    "might",
    "d9",
    "colon",
    "h19",
    "see",
    "notation",
    "use",
    "later",
    "course",
    "start",
    "looking",
    "calculations",
    "formulas",
    "cell",
    "ranges",
    "could",
    "even",
    "reference",
    "point",
    "cells",
    "contained",
    "another",
    "worksheet",
    "usually",
    "referred",
    "3d",
    "reference",
    "close",
    "workbook",
    "need",
    "save",
    "video",
    "learned",
    "basic",
    "terminology",
    "spreadsheet",
    "elements",
    "next",
    "video",
    "discuss",
    "navigate",
    "around",
    "spreadsheet",
    "use",
    "ribbon",
    "menus",
    "select",
    "data",
    "music",
    "basic",
    "understanding",
    "main",
    "elements",
    "make",
    "worksheet",
    "let",
    "see",
    "move",
    "around",
    "spreadsheet",
    "get",
    "familiar",
    "ribbon",
    "menus",
    "learn",
    "select",
    "data",
    "worksheet",
    "open",
    "sample",
    "file",
    "click",
    "file",
    "opens",
    "backstage",
    "view",
    "create",
    "new",
    "workbook",
    "open",
    "save",
    "print",
    "workbook",
    "also",
    "access",
    "excel",
    "option",
    "want",
    "open",
    "sample",
    "file",
    "click",
    "open",
    "either",
    "select",
    "recent",
    "list",
    "click",
    "browse",
    "find",
    "data",
    "file",
    "want",
    "first",
    "thing",
    "get",
    "acquainted",
    "ribbon",
    "menus",
    "notice",
    "ribbon",
    "top",
    "several",
    "tabs",
    "tabs",
    "may",
    "familiar",
    "office",
    "products",
    "home",
    "insert",
    "view",
    "tabs",
    "others",
    "might",
    "new",
    "formulas",
    "data",
    "powerpivot",
    "make",
    "little",
    "workspace",
    "hide",
    "ribbon",
    "double",
    "clicking",
    "tab",
    "unhide",
    "option",
    "use",
    "shortcut",
    "key",
    "control",
    "plus",
    "f1",
    "ribbon",
    "organized",
    "groups",
    "buttons",
    "make",
    "easier",
    "find",
    "home",
    "tab",
    "groups",
    "font",
    "alignment",
    "number",
    "styles",
    "groups",
    "contain",
    "available",
    "buttons",
    "ribbon",
    "viewing",
    "full",
    "screen",
    "styles",
    "cells",
    "ribbon",
    "groups",
    "options",
    "access",
    "clicking",
    "little",
    "arrow",
    "icon",
    "bottom",
    "right",
    "corner",
    "group",
    "seen",
    "number",
    "group",
    "example",
    "next",
    "item",
    "want",
    "point",
    "quick",
    "access",
    "toolbar",
    "top",
    "screen",
    "ribbon",
    "name",
    "suggests",
    "quickly",
    "access",
    "tools",
    "use",
    "often",
    "see",
    "already",
    "tools",
    "toolbar",
    "save",
    "undo",
    "redo",
    "new",
    "open",
    "add",
    "tools",
    "toolbar",
    "wish",
    "click",
    "drop",
    "arrow",
    "toolbar",
    "select",
    "tool",
    "use",
    "lot",
    "sort",
    "ascending",
    "added",
    "also",
    "add",
    "sort",
    "descending",
    "button",
    "need",
    "comfortable",
    "moving",
    "around",
    "worksheet",
    "simply",
    "use",
    "arrow",
    "keys",
    "move",
    "left",
    "right",
    "one",
    "cell",
    "time",
    "also",
    "use",
    "page",
    "page",
    "move",
    "around",
    "bit",
    "faster",
    "especially",
    "useful",
    "lots",
    "rows",
    "data",
    "move",
    "even",
    "quicker",
    "large",
    "data",
    "sheet",
    "use",
    "vertical",
    "scroll",
    "bar",
    "move",
    "left",
    "right",
    "use",
    "horizontal",
    "scroll",
    "bar",
    "useful",
    "large",
    "data",
    "set",
    "also",
    "useful",
    "shortcuts",
    "use",
    "control",
    "plus",
    "home",
    "key",
    "example",
    "takes",
    "back",
    "start",
    "worksheet",
    "cell",
    "a1",
    "control",
    "plus",
    "end",
    "takes",
    "cell",
    "end",
    "data",
    "worksheet",
    "control",
    "plus",
    "arrow",
    "takes",
    "end",
    "column",
    "control",
    "plus",
    "arrow",
    "takes",
    "back",
    "top",
    "column",
    "quick",
    "way",
    "find",
    "many",
    "rows",
    "data",
    "worksheet",
    "go",
    "first",
    "cell",
    "data",
    "press",
    "control",
    "plus",
    "arrow",
    "see",
    "last",
    "row",
    "data",
    "see",
    "160",
    "rows",
    "go",
    "back",
    "top",
    "control",
    "plus",
    "home",
    "far",
    "seen",
    "navigate",
    "around",
    "worksheet",
    "data",
    "need",
    "look",
    "select",
    "data",
    "important",
    "often",
    "need",
    "select",
    "data",
    "move",
    "copy",
    "select",
    "formula",
    "simplest",
    "selection",
    "single",
    "cell",
    "usually",
    "done",
    "mouse",
    "maybe",
    "directional",
    "arrow",
    "key",
    "next",
    "step",
    "select",
    "multiple",
    "cells",
    "together",
    "done",
    "either",
    "mouse",
    "dragging",
    "one",
    "cell",
    "additional",
    "adjoining",
    "cells",
    "use",
    "shift",
    "key",
    "directional",
    "arrow",
    "keys",
    "next",
    "selecting",
    "single",
    "column",
    "row",
    "done",
    "simply",
    "selecting",
    "letter",
    "top",
    "column",
    "number",
    "left",
    "row",
    "progress",
    "selecting",
    "multiple",
    "columns",
    "rows",
    "clicking",
    "mouse",
    "button",
    "holding",
    "dragging",
    "across",
    "columns",
    "comfortable",
    "dragging",
    "also",
    "select",
    "column",
    "first",
    "hold",
    "shift",
    "plus",
    "arrow",
    "keys",
    "select",
    "multiple",
    "columns",
    "applies",
    "rows",
    "however",
    "data",
    "rows",
    "columns",
    "next",
    "select",
    "first",
    "column",
    "use",
    "control",
    "key",
    "select",
    "another",
    "unconnected",
    "column",
    "column",
    "c",
    "f",
    "largest",
    "thing",
    "might",
    "want",
    "select",
    "whole",
    "worksheet",
    "clicking",
    "top",
    "left",
    "corner",
    "cells",
    "however",
    "selects",
    "entire",
    "worksheet",
    "including",
    "empty",
    "rows",
    "columns",
    "want",
    "data",
    "worksheet",
    "use",
    "shortcut",
    "control",
    "plus",
    "word",
    "warning",
    "selecting",
    "data",
    "cells",
    "rows",
    "columns",
    "three",
    "types",
    "cross",
    "symbols",
    "might",
    "see",
    "working",
    "selected",
    "cells",
    "first",
    "one",
    "large",
    "white",
    "cross",
    "see",
    "select",
    "cell",
    "seen",
    "cell",
    "a4",
    "select",
    "cross",
    "using",
    "already",
    "video",
    "select",
    "cells",
    "second",
    "type",
    "might",
    "see",
    "hover",
    "bottom",
    "edge",
    "cell",
    "see",
    "thin",
    "black",
    "symbol",
    "arrows",
    "point",
    "move",
    "symbol",
    "would",
    "move",
    "cell",
    "data",
    "another",
    "location",
    "last",
    "type",
    "small",
    "thin",
    "black",
    "cross",
    "seen",
    "hover",
    "bottom",
    "right",
    "corner",
    "cell",
    "fill",
    "handle",
    "copy",
    "symbol",
    "fills",
    "copies",
    "cell",
    "data",
    "another",
    "location",
    "video",
    "learned",
    "move",
    "around",
    "spreadsheet",
    "become",
    "familiar",
    "ribbon",
    "menus",
    "learn",
    "select",
    "data",
    "worksheet",
    "next",
    "videos",
    "discuss",
    "enter",
    "data",
    "copy",
    "paste",
    "data",
    "format",
    "data",
    "spreadsheet",
    "music",
    "video",
    "listen",
    "several",
    "data",
    "professionals",
    "discuss",
    "advantages",
    "limitations",
    "using",
    "spreadsheets",
    "tool",
    "data",
    "analysis",
    "let",
    "us",
    "start",
    "benefits",
    "advantages",
    "using",
    "spreadsheets",
    "tool",
    "data",
    "analysis",
    "experience",
    "using",
    "spreadsheets",
    "tool",
    "data",
    "analysis",
    "somewhat",
    "mixed",
    "think",
    "really",
    "really",
    "useful",
    "right",
    "context",
    "using",
    "spreadsheets",
    "definitely",
    "limitations",
    "big",
    "pro",
    "using",
    "spreadsheets",
    "see",
    "data",
    "cleanly",
    "laid",
    "front",
    "table",
    "think",
    "clear",
    "anyone",
    "looking",
    "spreadsheet",
    "exactly",
    "data",
    "format",
    "comes",
    "easily",
    "visually",
    "inspect",
    "cpa",
    "use",
    "microsoft",
    "excel",
    "daily",
    "basis",
    "done",
    "duration",
    "career",
    "functionalities",
    "pivots",
    "pivot",
    "tables",
    "charts",
    "etc",
    "also",
    "able",
    "use",
    "formulas",
    "personal",
    "favorite",
    "index",
    "match",
    "using",
    "pretty",
    "simple",
    "way",
    "take",
    "thousands",
    "lines",
    "information",
    "sift",
    "find",
    "specifically",
    "looking",
    "excel",
    "really",
    "shop",
    "perform",
    "calculations",
    "analyze",
    "financial",
    "ratios",
    "even",
    "export",
    "reports",
    "erp",
    "spoke",
    "earlier",
    "customize",
    "need",
    "experience",
    "using",
    "spreadsheets",
    "great",
    "simple",
    "analysis",
    "say",
    "spreadsheets",
    "years",
    "process",
    "improved",
    "systems",
    "improve",
    "technology",
    "improves",
    "spreadsheets",
    "way",
    "go",
    "spreadsheets",
    "overall",
    "probably",
    "anywhere",
    "zero",
    "twenty",
    "thousand",
    "lines",
    "data",
    "good",
    "way",
    "go",
    "really",
    "pull",
    "data",
    "whether",
    "trying",
    "see",
    "much",
    "client",
    "making",
    "per",
    "month",
    "may",
    "know",
    "thousand",
    "transactions",
    "helpful",
    "use",
    "spread",
    "sheet",
    "whittle",
    "actually",
    "going",
    "per",
    "month",
    "want",
    "sum",
    "know",
    "happens",
    "give",
    "number",
    "really",
    "helpful",
    "able",
    "dig",
    "wrap",
    "hands",
    "around",
    "take",
    "something",
    "seems",
    "surface",
    "20",
    "000",
    "lines",
    "seems",
    "almost",
    "unmanageable",
    "take",
    "massage",
    "put",
    "spreadsheet",
    "sort",
    "filter",
    "make",
    "pretty",
    "put",
    "pivot",
    "table",
    "get",
    "need",
    "looking",
    "intimidating",
    "thing",
    "making",
    "manageable",
    "breaking",
    "chunks",
    "spreadsheets",
    "easiest",
    "way",
    "analyze",
    "data",
    "present",
    "data",
    "need",
    "fancy",
    "tools",
    "additional",
    "software",
    "spreadsheets",
    "like",
    "commonly",
    "utilized",
    "language",
    "communicate",
    "thank",
    "insight",
    "let",
    "move",
    "look",
    "side",
    "coin",
    "drawbacks",
    "limitations",
    "using",
    "spreadsheets",
    "tool",
    "data",
    "analysis",
    "think",
    "one",
    "big",
    "cons",
    "terms",
    "analyzing",
    "data",
    "within",
    "spreadsheets",
    "really",
    "hard",
    "reproduce",
    "state",
    "words",
    "load",
    "data",
    "filter",
    "bad",
    "values",
    "impute",
    "missing",
    "values",
    "way",
    "tell",
    "colleagues",
    "future",
    "self",
    "exactly",
    "different",
    "steps",
    "took",
    "uh",
    "create",
    "data",
    "set",
    "modify",
    "data",
    "set",
    "almost",
    "dilemma",
    "plethora",
    "options",
    "available",
    "within",
    "excel",
    "functions",
    "supposedly",
    "make",
    "life",
    "easier",
    "nearly",
    "impossible",
    "know",
    "everything",
    "find",
    "accountants",
    "call",
    "analysis",
    "paralysis",
    "looking",
    "something",
    "long",
    "well",
    "versed",
    "particular",
    "excel",
    "function",
    "may",
    "spend",
    "lot",
    "time",
    "energy",
    "effort",
    "trying",
    "figure",
    "one",
    "thing",
    "done",
    "different",
    "way",
    "maybe",
    "manual",
    "way",
    "probably",
    "could",
    "gotten",
    "solution",
    "lot",
    "easier",
    "downside",
    "using",
    "spreadsheets",
    "complex",
    "formulas",
    "vlookups",
    "statements",
    "times",
    "stop",
    "working",
    "rebuild",
    "found",
    "better",
    "use",
    "excel",
    "simple",
    "analysis",
    "download",
    "information",
    "love",
    "good",
    "spreadsheet",
    "love",
    "using",
    "excel",
    "pivot",
    "tables",
    "get",
    "data",
    "find",
    "start",
    "get",
    "10",
    "20",
    "000",
    "lines",
    "data",
    "gets",
    "little",
    "tricky",
    "sometimes",
    "spreadsheets",
    "crash",
    "might",
    "move",
    "access",
    "tools",
    "use",
    "difficult",
    "handle",
    "extremely",
    "large",
    "data",
    "set",
    "spreadsheet",
    "besides",
    "serashi",
    "less",
    "flexibility",
    "complicated",
    "analysis",
    "presentation",
    "foreign",
    "music",
    "learned",
    "basic",
    "spreadsheet",
    "terminology",
    "navigate",
    "way",
    "around",
    "worksheets",
    "select",
    "data",
    "excel",
    "time",
    "start",
    "entering",
    "data",
    "first",
    "look",
    "handy",
    "viewing",
    "features",
    "provided",
    "excel",
    "enter",
    "data",
    "edit",
    "data",
    "lot",
    "data",
    "worksheet",
    "useful",
    "zoom",
    "closer",
    "specific",
    "area",
    "data",
    "zoom",
    "slider",
    "bottom",
    "right",
    "corner",
    "worksheet",
    "allows",
    "either",
    "click",
    "plus",
    "minus",
    "buttons",
    "drag",
    "slider",
    "select",
    "preferred",
    "zoom",
    "value",
    "also",
    "zoom",
    "controls",
    "ribbon",
    "view",
    "tab",
    "zoom",
    "lets",
    "pick",
    "predefined",
    "zoom",
    "level",
    "custom",
    "one",
    "100",
    "button",
    "zooms",
    "worksheet",
    "back",
    "original",
    "size",
    "zoom",
    "selection",
    "enables",
    "select",
    "area",
    "data",
    "zoom",
    "specific",
    "selection",
    "want",
    "see",
    "several",
    "areas",
    "data",
    "time",
    "zoomed",
    "use",
    "split",
    "button",
    "splits",
    "screen",
    "multiple",
    "sections",
    "scroll",
    "section",
    "separately",
    "want",
    "two",
    "sections",
    "remove",
    "either",
    "horizontal",
    "vertical",
    "split",
    "double",
    "clicking",
    "headings",
    "columns",
    "like",
    "header",
    "row",
    "might",
    "want",
    "remain",
    "screen",
    "move",
    "sheet",
    "need",
    "use",
    "freeze",
    "panes",
    "freeze",
    "top",
    "row",
    "wish",
    "suit",
    "case",
    "select",
    "row",
    "even",
    "cell",
    "row",
    "row",
    "rows",
    "want",
    "freeze",
    "select",
    "freeze",
    "panes",
    "similar",
    "thing",
    "columns",
    "want",
    "freeze",
    "even",
    "freeze",
    "rows",
    "columns",
    "time",
    "trick",
    "first",
    "select",
    "cell",
    "one",
    "row",
    "want",
    "freeze",
    "one",
    "column",
    "right",
    "want",
    "freeze",
    "case",
    "cell",
    "c4",
    "scroll",
    "worksheet",
    "across",
    "worksheet",
    "still",
    "see",
    "header",
    "row",
    "manufacturer",
    "model",
    "columns",
    "multiple",
    "workbooks",
    "open",
    "notice",
    "said",
    "workbooks",
    "work",
    "sheets",
    "switch",
    "using",
    "view",
    "switch",
    "windows",
    "faster",
    "method",
    "use",
    "control",
    "plus",
    "f6",
    "shortcut",
    "let",
    "enter",
    "data",
    "blank",
    "worksheet",
    "easiest",
    "way",
    "open",
    "new",
    "worksheet",
    "within",
    "excel",
    "click",
    "new",
    "button",
    "quick",
    "access",
    "toolbar",
    "control",
    "plus",
    "n",
    "prefer",
    "keyboard",
    "shortcuts",
    "let",
    "enter",
    "headings",
    "across",
    "top",
    "worksheet",
    "typically",
    "referred",
    "header",
    "row",
    "note",
    "press",
    "enter",
    "typing",
    "data",
    "cell",
    "next",
    "active",
    "cell",
    "one",
    "directly",
    "want",
    "case",
    "press",
    "tab",
    "enter",
    "data",
    "cell",
    "selects",
    "next",
    "cell",
    "along",
    "row",
    "active",
    "cell",
    "enter",
    "headings",
    "press",
    "tab",
    "entry",
    "notice",
    "text",
    "slightly",
    "longer",
    "cells",
    "either",
    "gets",
    "partly",
    "hidden",
    "next",
    "cell",
    "overlaps",
    "click",
    "hold",
    "divider",
    "line",
    "two",
    "columns",
    "drag",
    "left",
    "right",
    "resize",
    "manually",
    "want",
    "automatically",
    "divider",
    "line",
    "two",
    "columns",
    "going",
    "headings",
    "columns",
    "let",
    "make",
    "bold",
    "let",
    "add",
    "another",
    "column",
    "parts",
    "accessories",
    "column",
    "simply",
    "select",
    "right",
    "hand",
    "two",
    "columns",
    "right",
    "click",
    "choose",
    "insert",
    "put",
    "another",
    "column",
    "left",
    "selected",
    "column",
    "let",
    "call",
    "servicing",
    "sales",
    "tidy",
    "column",
    "width",
    "simultaneously",
    "select",
    "columns",
    "e",
    "divider",
    "lines",
    "columns",
    "automatically",
    "reduces",
    "increases",
    "column",
    "width",
    "fit",
    "data",
    "column",
    "okay",
    "headings",
    "let",
    "enter",
    "month",
    "data",
    "column",
    "type",
    "jan",
    "cell",
    "a2",
    "press",
    "enter",
    "takes",
    "us",
    "cell",
    "want",
    "case",
    "type",
    "feb",
    "cell",
    "a3",
    "get",
    "december",
    "a13",
    "let",
    "suppose",
    "need",
    "change",
    "couple",
    "headings",
    "several",
    "ways",
    "editing",
    "existing",
    "data",
    "cell",
    "either",
    "select",
    "cell",
    "start",
    "typing",
    "select",
    "cell",
    "press",
    "f2",
    "keyboard",
    "put",
    "cursor",
    "end",
    "cell",
    "make",
    "changes",
    "simply",
    "double",
    "click",
    "somewhere",
    "cell",
    "put",
    "cursor",
    "position",
    "cell",
    "make",
    "changes",
    "even",
    "select",
    "cell",
    "click",
    "formula",
    "bar",
    "edit",
    "cell",
    "data",
    "let",
    "parts",
    "accessories",
    "column",
    "headings",
    "video",
    "learned",
    "viewing",
    "options",
    "excel",
    "learned",
    "enter",
    "edit",
    "data",
    "cells",
    "next",
    "video",
    "learn",
    "copy",
    "fill",
    "data",
    "format",
    "cells",
    "data",
    "worksheet",
    "foreign",
    "music",
    "learned",
    "handy",
    "viewing",
    "features",
    "provided",
    "excel",
    "entered",
    "edited",
    "data",
    "let",
    "discuss",
    "move",
    "copy",
    "fill",
    "data",
    "format",
    "cells",
    "data",
    "suit",
    "needs",
    "first",
    "thing",
    "going",
    "discuss",
    "move",
    "data",
    "select",
    "range",
    "cells",
    "case",
    "headings",
    "a1",
    "e1",
    "hover",
    "top",
    "bottom",
    "edge",
    "selected",
    "cell",
    "see",
    "move",
    "pointer",
    "drag",
    "selection",
    "another",
    "place",
    "worksheet",
    "alternatively",
    "want",
    "copy",
    "data",
    "instead",
    "thing",
    "time",
    "also",
    "hold",
    "ctrl",
    "key",
    "select",
    "drag",
    "selection",
    "another",
    "location",
    "see",
    "copy",
    "pointer",
    "comfortable",
    "dragging",
    "also",
    "use",
    "copy",
    "paste",
    "menu",
    "commands",
    "keyboard",
    "shortcuts",
    "select",
    "data",
    "column",
    "copy",
    "clipboard",
    "simply",
    "select",
    "new",
    "location",
    "paste",
    "copied",
    "data",
    "also",
    "move",
    "copy",
    "worksheets",
    "let",
    "create",
    "new",
    "worksheet",
    "select",
    "data",
    "sheet1",
    "time",
    "let",
    "use",
    "control",
    "plus",
    "c",
    "keyboard",
    "shortcut",
    "copy",
    "clipboard",
    "choose",
    "worksheet",
    "use",
    "control",
    "plus",
    "v",
    "shortcut",
    "paste",
    "data",
    "however",
    "notice",
    "column",
    "widths",
    "original",
    "source",
    "data",
    "let",
    "undo",
    "try",
    "another",
    "paste",
    "option",
    "default",
    "paste",
    "copied",
    "data",
    "uses",
    "column",
    "width",
    "settings",
    "destination",
    "cells",
    "paste",
    "retain",
    "column",
    "widths",
    "source",
    "data",
    "choose",
    "special",
    "option",
    "paste",
    "command",
    "called",
    "keep",
    "source",
    "column",
    "widths",
    "alternative",
    "enter",
    "data",
    "manually",
    "worksheet",
    "use",
    "excel",
    "feature",
    "automatically",
    "fills",
    "cells",
    "data",
    "follows",
    "sequential",
    "series",
    "pattern",
    "feature",
    "called",
    "autofill",
    "especially",
    "useful",
    "need",
    "enter",
    "lots",
    "repetitive",
    "data",
    "excel",
    "date",
    "information",
    "example",
    "enter",
    "month",
    "cell",
    "even",
    "using",
    "shortened",
    "version",
    "name",
    "use",
    "called",
    "fill",
    "handle",
    "select",
    "end",
    "series",
    "autofill",
    "work",
    "series",
    "based",
    "selected",
    "data",
    "let",
    "try",
    "thing",
    "days",
    "week",
    "enter",
    "mun",
    "monday",
    "cell",
    "drag",
    "fill",
    "handle",
    "use",
    "autofill",
    "determine",
    "want",
    "enter",
    "days",
    "week",
    "sequentially",
    "however",
    "also",
    "enter",
    "wednesday",
    "next",
    "cell",
    "select",
    "cells",
    "series",
    "a16",
    "a17",
    "drag",
    "fill",
    "handle",
    "autofill",
    "determines",
    "sequence",
    "changed",
    "every",
    "day",
    "fills",
    "data",
    "series",
    "important",
    "select",
    "cells",
    "determine",
    "pattern",
    "using",
    "autofill",
    "best",
    "determine",
    "pattern",
    "case",
    "cells",
    "a16",
    "a17",
    "similar",
    "thing",
    "applies",
    "numerical",
    "patterns",
    "enter",
    "5",
    "cell",
    "use",
    "fill",
    "handle",
    "fill",
    "data",
    "column",
    "data",
    "name",
    "day",
    "month",
    "example",
    "autofill",
    "ca",
    "determine",
    "pattern",
    "yet",
    "case",
    "copies",
    "value",
    "5",
    "every",
    "selected",
    "cell",
    "however",
    "enter",
    "value",
    "10",
    "b3",
    "use",
    "fill",
    "handle",
    "fill",
    "data",
    "column",
    "autofill",
    "determines",
    "pattern",
    "incrementing",
    "5",
    "time",
    "fills",
    "remainder",
    "data",
    "pattern",
    "going",
    "look",
    "formatting",
    "data",
    "essentially",
    "two",
    "distinct",
    "parts",
    "first",
    "formatting",
    "cells",
    "fill",
    "color",
    "bold",
    "border",
    "example",
    "bold",
    "text",
    "within",
    "formatting",
    "data",
    "cells",
    "example",
    "making",
    "text",
    "format",
    "number",
    "format",
    "specific",
    "currency",
    "accounting",
    "format",
    "let",
    "open",
    "car",
    "sales",
    "worksheet",
    "used",
    "previously",
    "select",
    "headings",
    "cell",
    "a3",
    "p3",
    "either",
    "using",
    "mouse",
    "could",
    "use",
    "shortcut",
    "keys",
    "control",
    "plus",
    "shift",
    "plus",
    "right",
    "arrow",
    "home",
    "tab",
    "click",
    "styles",
    "drop",
    "arrow",
    "select",
    "style",
    "color",
    "cells",
    "make",
    "selected",
    "cells",
    "bold",
    "select",
    "data",
    "manufacturer",
    "column",
    "either",
    "using",
    "mouse",
    "shortcut",
    "keys",
    "control",
    "plus",
    "shift",
    "plus",
    "arrow",
    "styles",
    "drop",
    "arrow",
    "select",
    "another",
    "style",
    "color",
    "selected",
    "cells",
    "make",
    "cells",
    "bold",
    "select",
    "data",
    "model",
    "column",
    "either",
    "using",
    "mouse",
    "shortcut",
    "keys",
    "control",
    "plus",
    "shift",
    "plus",
    "arrow",
    "styles",
    "drop",
    "arrow",
    "select",
    "another",
    "style",
    "color",
    "selected",
    "cells",
    "time",
    "could",
    "make",
    "selected",
    "cells",
    "italic",
    "also",
    "change",
    "font",
    "size",
    "style",
    "lastly",
    "select",
    "cells",
    "data",
    "using",
    "mouse",
    "control",
    "plus",
    "shift",
    "plus",
    "right",
    "arrow",
    "arrow",
    "apply",
    "borders",
    "data",
    "cells",
    "time",
    "format",
    "cell",
    "data",
    "sales",
    "figures",
    "columns",
    "c",
    "formatted",
    "display",
    "one",
    "decimal",
    "place",
    "select",
    "data",
    "click",
    "decrease",
    "decimal",
    "button",
    "also",
    "issue",
    "couple",
    "car",
    "models",
    "look",
    "cells",
    "b129",
    "b130",
    "model",
    "name",
    "supposed",
    "displayed",
    "see",
    "actually",
    "two",
    "dates",
    "listed",
    "instead",
    "look",
    "number",
    "format",
    "box",
    "format",
    "type",
    "custom",
    "happened",
    "model",
    "numbers",
    "supposed",
    "saab",
    "saab",
    "files",
    "imported",
    "csv",
    "files",
    "two",
    "cells",
    "must",
    "incorrectly",
    "determined",
    "date",
    "values",
    "numbers",
    "fix",
    "formatting",
    "two",
    "cells",
    "text",
    "enter",
    "correct",
    "values",
    "9",
    "5",
    "9",
    "last",
    "thing",
    "want",
    "format",
    "data",
    "currency",
    "look",
    "heading",
    "column",
    "f",
    "says",
    "price",
    "thousands",
    "dollars",
    "cell",
    "f4",
    "using",
    "general",
    "format",
    "let",
    "change",
    "format",
    "column",
    "american",
    "currency",
    "format",
    "select",
    "column",
    "f",
    "case",
    "select",
    "number",
    "formats",
    "drop",
    "list",
    "choose",
    "currency",
    "option",
    "correct",
    "currency",
    "symbol",
    "format",
    "done",
    "video",
    "learned",
    "move",
    "copy",
    "fill",
    "data",
    "format",
    "cells",
    "sell",
    "data",
    "suit",
    "needs",
    "next",
    "video",
    "look",
    "basics",
    "formulas",
    "learn",
    "perform",
    "simple",
    "calculations",
    "learn",
    "select",
    "ranges",
    "copy",
    "formulas",
    "music",
    "foreign",
    "learned",
    "move",
    "copy",
    "fill",
    "data",
    "format",
    "cells",
    "data",
    "next",
    "take",
    "look",
    "basics",
    "formulas",
    "including",
    "basic",
    "calculations",
    "selecting",
    "ranges",
    "formulas",
    "copy",
    "formulas",
    "typical",
    "formula",
    "made",
    "several",
    "key",
    "components",
    "equal",
    "sign",
    "starts",
    "formula",
    "lets",
    "excel",
    "know",
    "creating",
    "formula",
    "cell",
    "next",
    "part",
    "function",
    "performs",
    "calculation",
    "example",
    "sum",
    "function",
    "adds",
    "values",
    "referenced",
    "cells",
    "cell",
    "ranges",
    "comes",
    "reference",
    "cell",
    "range",
    "cells",
    "want",
    "include",
    "calculation",
    "need",
    "enclosed",
    "parentheses",
    "also",
    "operators",
    "specify",
    "type",
    "calculation",
    "perform",
    "common",
    "arithmetic",
    "operators",
    "include",
    "addition",
    "subtraction",
    "multiplication",
    "division",
    "represented",
    "symbols",
    "plus",
    "symbol",
    "addition",
    "minus",
    "symbol",
    "subtraction",
    "asterisk",
    "multiplication",
    "forward",
    "slash",
    "division",
    "types",
    "operators",
    "namely",
    "comparison",
    "text",
    "concatenation",
    "reference",
    "may",
    "also",
    "use",
    "constants",
    "formulas",
    "name",
    "suggests",
    "numbers",
    "values",
    "enter",
    "directly",
    "formula",
    "change",
    "might",
    "whole",
    "number",
    "5",
    "might",
    "percentage",
    "10",
    "percent",
    "might",
    "even",
    "date",
    "typical",
    "formula",
    "might",
    "equal",
    "sign",
    "sum",
    "open",
    "parenthesis",
    "b5",
    "asterisk",
    "20",
    "close",
    "parenthesis",
    "would",
    "take",
    "value",
    "cell",
    "b5",
    "multiply",
    "let",
    "start",
    "basic",
    "calculations",
    "suppose",
    "want",
    "add",
    "january",
    "february",
    "sales",
    "accessories",
    "would",
    "start",
    "typing",
    "equal",
    "sign",
    "lets",
    "excel",
    "know",
    "entering",
    "formula",
    "type",
    "function",
    "wish",
    "use",
    "case",
    "sum",
    "function",
    "note",
    "description",
    "next",
    "type",
    "open",
    "parenthesis",
    "select",
    "cell",
    "range",
    "case",
    "would",
    "e2",
    "e3",
    "could",
    "enter",
    "e2",
    "comma",
    "e3",
    "closed",
    "parenthesis",
    "press",
    "enter",
    "wanted",
    "add",
    "march",
    "sales",
    "well",
    "would",
    "extend",
    "cell",
    "range",
    "include",
    "e4",
    "could",
    "type",
    "e2",
    "comma",
    "e3",
    "comma",
    "e4",
    "range",
    "work",
    "remember",
    "edit",
    "cell",
    "select",
    "cell",
    "either",
    "edit",
    "directly",
    "formula",
    "bar",
    "press",
    "f2",
    "cell",
    "however",
    "cumbersome",
    "flexible",
    "way",
    "wanted",
    "add",
    "entire",
    "column",
    "type",
    "every",
    "cell",
    "reference",
    "one",
    "thankfully",
    "better",
    "way",
    "instead",
    "typing",
    "cell",
    "include",
    "reference",
    "put",
    "colon",
    "first",
    "last",
    "values",
    "range",
    "e2",
    "colon",
    "e4",
    "case",
    "wanted",
    "whole",
    "column",
    "would",
    "enter",
    "e2",
    "colon",
    "e13",
    "formula",
    "another",
    "way",
    "using",
    "mouse",
    "select",
    "range",
    "still",
    "type",
    "equal",
    "sign",
    "sum",
    "open",
    "parenthesis",
    "select",
    "range",
    "mouse",
    "shift",
    "plus",
    "arrow",
    "keys",
    "press",
    "enter",
    "excel",
    "add",
    "close",
    "parenthesis",
    "total",
    "columns",
    "add",
    "tags",
    "add",
    "headings",
    "first",
    "subtotals",
    "tax",
    "twenty",
    "percent",
    "formula",
    "need",
    "multiply",
    "value",
    "subtotals",
    "20",
    "percent",
    "wanted",
    "add",
    "column",
    "subtotals",
    "calculate",
    "taxes",
    "would",
    "repeat",
    "previous",
    "process",
    "column",
    "time",
    "consuming",
    "need",
    "excel",
    "neat",
    "tricks",
    "select",
    "fill",
    "handle",
    "bottom",
    "right",
    "corner",
    "cell",
    "drag",
    "across",
    "cells",
    "copy",
    "formula",
    "called",
    "autofill",
    "notice",
    "formula",
    "copied",
    "row",
    "references",
    "change",
    "relation",
    "cell",
    "position",
    "worksheet",
    "e2",
    "colon",
    "e13",
    "become",
    "b2",
    "colon",
    "b13",
    "known",
    "relative",
    "references",
    "later",
    "course",
    "thing",
    "tax",
    "values",
    "row",
    "need",
    "row",
    "showing",
    "totals",
    "calculation",
    "simple",
    "subtotal",
    "value",
    "cell",
    "b15",
    "added",
    "tax",
    "b16",
    "use",
    "fill",
    "handle",
    "copy",
    "formula",
    "across",
    "wanted",
    "total",
    "sales",
    "products",
    "month",
    "add",
    "column",
    "heading",
    "notice",
    "cell",
    "style",
    "copied",
    "new",
    "heading",
    "automatically",
    "remember",
    "widen",
    "column",
    "either",
    "drag",
    "divider",
    "manually",
    "divider",
    "enter",
    "formula",
    "cell",
    "f2",
    "done",
    "however",
    "excel",
    "another",
    "trick",
    "sleeve",
    "called",
    "autosum",
    "found",
    "home",
    "tab",
    "editing",
    "group",
    "great",
    "little",
    "shortcut",
    "simple",
    "common",
    "functions",
    "like",
    "sum",
    "average",
    "count",
    "max",
    "min",
    "choose",
    "functions",
    "want",
    "particular",
    "calculation",
    "notice",
    "also",
    "keyboard",
    "shortcut",
    "alt",
    "plus",
    "equals",
    "press",
    "enter",
    "done",
    "use",
    "fill",
    "handle",
    "copy",
    "remaining",
    "values",
    "hold",
    "one",
    "excel",
    "trick",
    "show",
    "good",
    "one",
    "suppose",
    "column",
    "data",
    "long",
    "might",
    "drag",
    "fill",
    "handle",
    "several",
    "pages",
    "easy",
    "easily",
    "lead",
    "errors",
    "selecting",
    "large",
    "lists",
    "data",
    "values",
    "rather",
    "needing",
    "drag",
    "rest",
    "column",
    "fill",
    "handle",
    "automatically",
    "copy",
    "formula",
    "remaining",
    "cells",
    "column",
    "one",
    "real",
    "time",
    "saver",
    "finally",
    "let",
    "format",
    "values",
    "use",
    "us",
    "dollar",
    "currency",
    "format",
    "video",
    "learned",
    "basics",
    "formulas",
    "perform",
    "simple",
    "calculations",
    "select",
    "ranges",
    "formulas",
    "copy",
    "formulas",
    "next",
    "video",
    "look",
    "use",
    "common",
    "functions",
    "used",
    "data",
    "analysts",
    "discover",
    "advanced",
    "functions",
    "music",
    "learned",
    "basics",
    "formulas",
    "learned",
    "perform",
    "basic",
    "calculations",
    "select",
    "ranges",
    "copy",
    "formulas",
    "next",
    "introduction",
    "functions",
    "including",
    "using",
    "common",
    "statistical",
    "functions",
    "learn",
    "advanced",
    "functions",
    "data",
    "analyst",
    "might",
    "also",
    "use",
    "first",
    "let",
    "look",
    "common",
    "functions",
    "used",
    "statistical",
    "calculations",
    "add",
    "row",
    "headings",
    "average",
    "minimum",
    "maximum",
    "count",
    "median",
    "cell",
    "b20",
    "let",
    "work",
    "average",
    "car",
    "sales",
    "year",
    "table",
    "home",
    "tab",
    "editing",
    "group",
    "click",
    "autosum",
    "drop",
    "list",
    "choose",
    "average",
    "autosum",
    "tries",
    "add",
    "values",
    "directly",
    "column",
    "need",
    "modify",
    "cell",
    "range",
    "b2",
    "b13",
    "use",
    "fill",
    "handle",
    "seen",
    "copy",
    "formula",
    "across",
    "column",
    "e",
    "minimum",
    "calculation",
    "b21",
    "select",
    "min",
    "autosum",
    "list",
    "need",
    "modify",
    "cell",
    "range",
    "calculates",
    "lowest",
    "value",
    "range",
    "fill",
    "across",
    "column",
    "e",
    "maximum",
    "calculation",
    "select",
    "max",
    "list",
    "modify",
    "range",
    "copy",
    "formula",
    "across",
    "calculates",
    "highest",
    "value",
    "range",
    "b23",
    "calculate",
    "count",
    "basically",
    "means",
    "number",
    "values",
    "exist",
    "selected",
    "range",
    "select",
    "count",
    "numbers",
    "list",
    "modify",
    "range",
    "median",
    "calculation",
    "select",
    "functions",
    "autosum",
    "list",
    "select",
    "statistical",
    "category",
    "scroll",
    "find",
    "median",
    "function",
    "median",
    "returns",
    "exact",
    "middle",
    "range",
    "selected",
    "values",
    "note",
    "selecting",
    "odd",
    "number",
    "values",
    "return",
    "figure",
    "middle",
    "value",
    "selected",
    "range",
    "selected",
    "even",
    "number",
    "values",
    "range",
    "return",
    "middle",
    "figure",
    "two",
    "middle",
    "values",
    "range",
    "need",
    "change",
    "cell",
    "range",
    "b2",
    "b13",
    "copy",
    "formula",
    "across",
    "column",
    "e",
    "seen",
    "autosum",
    "common",
    "statistical",
    "functions",
    "excel",
    "another",
    "400",
    "plus",
    "functions",
    "available",
    "let",
    "explore",
    "formulas",
    "tab",
    "function",
    "library",
    "group",
    "lists",
    "several",
    "function",
    "categories",
    "first",
    "list",
    "recently",
    "used",
    "functions",
    "updates",
    "automatically",
    "use",
    "functions",
    "related",
    "financial",
    "calculations",
    "hover",
    "name",
    "function",
    "see",
    "short",
    "description",
    "one",
    "accrued",
    "interest",
    "function",
    "interest",
    "rate",
    "function",
    "logical",
    "list",
    "boolean",
    "operator",
    "functions",
    "several",
    "functions",
    "related",
    "text",
    "concat",
    "updated",
    "version",
    "previous",
    "function",
    "called",
    "concatenate",
    "still",
    "supported",
    "way",
    "backwards",
    "compatibility",
    "find",
    "search",
    "also",
    "several",
    "functions",
    "related",
    "dates",
    "times",
    "network",
    "days",
    "weekday",
    "weeknum",
    "lookup",
    "reference",
    "list",
    "functions",
    "areas",
    "hlookup",
    "sort",
    "vlookup",
    "math",
    "trig",
    "list",
    "find",
    "lots",
    "useful",
    "mathematical",
    "functions",
    "power",
    "sumif",
    "product",
    "alongside",
    "many",
    "functions",
    "trigonometric",
    "purposes",
    "cosine",
    "sine",
    "tangent",
    "also",
    "functions",
    "list",
    "provides",
    "several",
    "function",
    "categories",
    "statistical",
    "engineering",
    "information",
    "statistical",
    "list",
    "find",
    "functions",
    "average",
    "count",
    "max",
    "median",
    "min",
    "saw",
    "used",
    "earlier",
    "video",
    "struggling",
    "find",
    "function",
    "want",
    "lists",
    "also",
    "search",
    "function",
    "click",
    "insert",
    "function",
    "button",
    "formulas",
    "tab",
    "either",
    "browse",
    "category",
    "lists",
    "available",
    "choose",
    "look",
    "alphabetical",
    "list",
    "function",
    "want",
    "alternatively",
    "type",
    "name",
    "function",
    "want",
    "click",
    "go",
    "search",
    "select",
    "one",
    "want",
    "returned",
    "search",
    "video",
    "learned",
    "basics",
    "functions",
    "use",
    "common",
    "functions",
    "data",
    "analyst",
    "might",
    "employ",
    "looked",
    "advanced",
    "functions",
    "available",
    "excel",
    "next",
    "video",
    "look",
    "referencing",
    "data",
    "formulas",
    "specifically",
    "differentiating",
    "relative",
    "absolute",
    "references",
    "error",
    "handling",
    "formulas",
    "music",
    "introduction",
    "functions",
    "seeing",
    "use",
    "common",
    "statistical",
    "functions",
    "learned",
    "advanced",
    "functions",
    "data",
    "analyst",
    "might",
    "use",
    "video",
    "look",
    "difference",
    "relative",
    "absolute",
    "mixed",
    "references",
    "formulas",
    "well",
    "use",
    "learn",
    "formula",
    "errors",
    "excel",
    "important",
    "understand",
    "difference",
    "relative",
    "absolute",
    "references",
    "creating",
    "formulas",
    "default",
    "excel",
    "cell",
    "references",
    "always",
    "relative",
    "references",
    "term",
    "relative",
    "key",
    "means",
    "reference",
    "cell",
    "fact",
    "referencing",
    "cell",
    "position",
    "relation",
    "cell",
    "formula",
    "copying",
    "formulas",
    "one",
    "cell",
    "another",
    "far",
    "course",
    "using",
    "either",
    "copy",
    "paste",
    "fill",
    "handle",
    "needed",
    "modify",
    "cell",
    "references",
    "excel",
    "assumes",
    "using",
    "relative",
    "references",
    "formulas",
    "copied",
    "cell",
    "references",
    "changed",
    "match",
    "relative",
    "positions",
    "cells",
    "copied",
    "know",
    "relative",
    "references",
    "default",
    "excel",
    "make",
    "cell",
    "references",
    "change",
    "copy",
    "need",
    "use",
    "absolute",
    "references",
    "contrast",
    "relative",
    "references",
    "absolute",
    "references",
    "cells",
    "stay",
    "copy",
    "formula",
    "containing",
    "references",
    "lastly",
    "may",
    "also",
    "instances",
    "want",
    "one",
    "cell",
    "reference",
    "identifiers",
    "absolute",
    "one",
    "relative",
    "example",
    "might",
    "want",
    "row",
    "identifier",
    "absolute",
    "column",
    "identifier",
    "relative",
    "vice",
    "versa",
    "called",
    "mixed",
    "references",
    "example",
    "would",
    "equal",
    "sign",
    "dollar",
    "sign",
    "one",
    "plus",
    "dollar",
    "a3",
    "dollar",
    "one",
    "relative",
    "column",
    "absolute",
    "row",
    "dollar",
    "a3",
    "absolute",
    "column",
    "relative",
    "row",
    "contrast",
    "relative",
    "absolute",
    "references",
    "copy",
    "formula",
    "containing",
    "mixed",
    "cell",
    "references",
    "relative",
    "cell",
    "references",
    "change",
    "whereas",
    "absolute",
    "cell",
    "references",
    "stay",
    "copied",
    "formula",
    "first",
    "let",
    "look",
    "example",
    "using",
    "relative",
    "references",
    "formula",
    "example",
    "enter",
    "formula",
    "equals",
    "a1",
    "plus",
    "a3",
    "cell",
    "four",
    "note",
    "blue",
    "red",
    "highlighted",
    "cells",
    "a1",
    "a3",
    "denote",
    "cells",
    "relatively",
    "referenced",
    "formula",
    "copy",
    "formula",
    "cell",
    "directly",
    "using",
    "fill",
    "handle",
    "see",
    "result",
    "changes",
    "look",
    "copied",
    "formula",
    "see",
    "blue",
    "red",
    "cell",
    "references",
    "changed",
    "relative",
    "position",
    "worksheet",
    "formula",
    "changed",
    "equals",
    "a2",
    "plus",
    "a4",
    "copied",
    "formula",
    "cell",
    "reference",
    "moved",
    "one",
    "cell",
    "copy",
    "paste",
    "formula",
    "c7",
    "see",
    "result",
    "also",
    "changes",
    "see",
    "blue",
    "red",
    "cell",
    "references",
    "copied",
    "formula",
    "changed",
    "let",
    "look",
    "example",
    "use",
    "absolute",
    "references",
    "formula",
    "need",
    "make",
    "cell",
    "reference",
    "absolute",
    "put",
    "dollar",
    "sign",
    "front",
    "column",
    "row",
    "identifiers",
    "formula",
    "example",
    "enter",
    "formula",
    "equals",
    "dollar",
    "sign",
    "dollar",
    "one",
    "plus",
    "sign",
    "dollar",
    "dollar",
    "three",
    "cell",
    "e4",
    "note",
    "blue",
    "red",
    "highlighted",
    "cells",
    "a1",
    "a3",
    "denote",
    "cells",
    "absolutely",
    "referenced",
    "formula",
    "copy",
    "formula",
    "using",
    "fill",
    "handle",
    "see",
    "result",
    "stays",
    "time",
    "look",
    "copied",
    "formula",
    "see",
    "blue",
    "red",
    "cell",
    "references",
    "changed",
    "formula",
    "still",
    "equal",
    "sign",
    "dollar",
    "dollar",
    "one",
    "plus",
    "dollar",
    "dollar",
    "three",
    "copied",
    "formula",
    "cell",
    "references",
    "changed",
    "similarly",
    "copy",
    "paste",
    "formula",
    "e7",
    "see",
    "result",
    "stays",
    "time",
    "see",
    "blue",
    "red",
    "cell",
    "references",
    "changed",
    "formula",
    "still",
    "equal",
    "sign",
    "dollar",
    "dollar",
    "one",
    "plus",
    "dollar",
    "dollar",
    "three",
    "copied",
    "formula",
    "cell",
    "references",
    "changed",
    "lastly",
    "look",
    "example",
    "use",
    "mixed",
    "references",
    "formula",
    "enter",
    "formula",
    "equals",
    "dollar",
    "one",
    "plus",
    "dollar",
    "a3",
    "cell",
    "g4",
    "note",
    "blue",
    "red",
    "highlighted",
    "cells",
    "a1",
    "a3",
    "denote",
    "cells",
    "referenced",
    "formula",
    "copy",
    "formula",
    "cell",
    "using",
    "fill",
    "handle",
    "see",
    "result",
    "changes",
    "different",
    "result",
    "previous",
    "examples",
    "look",
    "copied",
    "formula",
    "see",
    "first",
    "blue",
    "cell",
    "reference",
    "stayed",
    "second",
    "red",
    "cell",
    "reference",
    "changed",
    "copy",
    "paste",
    "formula",
    "g7",
    "see",
    "thing",
    "happens",
    "result",
    "changes",
    "see",
    "first",
    "blue",
    "cell",
    "reference",
    "stayed",
    "copied",
    "formula",
    "red",
    "cell",
    "reference",
    "changed",
    "quick",
    "introduction",
    "dealing",
    "formula",
    "errors",
    "excel",
    "complexity",
    "writing",
    "formulas",
    "especially",
    "complicated",
    "ones",
    "bound",
    "occasions",
    "make",
    "mistake",
    "syntax",
    "data",
    "selection",
    "lead",
    "formula",
    "error",
    "errors",
    "typically",
    "denoted",
    "displaying",
    "cell",
    "supposed",
    "displaying",
    "result",
    "one",
    "error",
    "codes",
    "list",
    "see",
    "multiple",
    "hash",
    "symbols",
    "cell",
    "really",
    "error",
    "means",
    "column",
    "either",
    "wide",
    "enough",
    "display",
    "whole",
    "word",
    "value",
    "contains",
    "negative",
    "date",
    "time",
    "value",
    "type",
    "control",
    "plus",
    "semicolon",
    "space",
    "control",
    "plus",
    "shift",
    "plus",
    "semicolon",
    "enters",
    "today",
    "date",
    "current",
    "time",
    "cell",
    "narrow",
    "display",
    "see",
    "multiple",
    "hash",
    "symbols",
    "adjust",
    "column",
    "width",
    "see",
    "cell",
    "contents",
    "said",
    "really",
    "considered",
    "error",
    "however",
    "enter",
    "formula",
    "seen",
    "cell",
    "i7",
    "press",
    "enter",
    "see",
    "hash",
    "name",
    "error",
    "error",
    "caused",
    "trying",
    "use",
    "x",
    "multiplication",
    "operator",
    "fact",
    "asterisk",
    "note",
    "small",
    "green",
    "triangle",
    "top",
    "left",
    "corner",
    "cell",
    "also",
    "note",
    "select",
    "cell",
    "exclamation",
    "mark",
    "appears",
    "providing",
    "hint",
    "caused",
    "error",
    "case",
    "says",
    "formula",
    "contains",
    "unrecognized",
    "text",
    "click",
    "drop",
    "error",
    "next",
    "exclamation",
    "mark",
    "error",
    "see",
    "several",
    "options",
    "first",
    "line",
    "also",
    "gives",
    "clue",
    "nature",
    "error",
    "one",
    "says",
    "invalid",
    "name",
    "error",
    "probably",
    "mistyped",
    "cell",
    "reference",
    "value",
    "function",
    "name",
    "click",
    "help",
    "error",
    "help",
    "pane",
    "opens",
    "specific",
    "information",
    "related",
    "error",
    "click",
    "show",
    "calculation",
    "steps",
    "dialog",
    "box",
    "opens",
    "displaying",
    "current",
    "syntax",
    "error",
    "underlined",
    "try",
    "evaluate",
    "error",
    "certain",
    "error",
    "incorrect",
    "choose",
    "ignore",
    "error",
    "want",
    "edit",
    "formula",
    "click",
    "edit",
    "formula",
    "bar",
    "cursor",
    "focused",
    "formula",
    "bar",
    "try",
    "correct",
    "formula",
    "error",
    "click",
    "error",
    "checking",
    "options",
    "excel",
    "options",
    "dialog",
    "box",
    "opened",
    "section",
    "related",
    "error",
    "checking",
    "rules",
    "modify",
    "options",
    "suit",
    "needs",
    "errors",
    "make",
    "generate",
    "one",
    "error",
    "codes",
    "listed",
    "start",
    "video",
    "different",
    "reason",
    "different",
    "solution",
    "information",
    "errors",
    "typical",
    "solutions",
    "visit",
    "link",
    "provided",
    "video",
    "learned",
    "referencing",
    "data",
    "formulas",
    "specifically",
    "differentiating",
    "relative",
    "absolute",
    "mixed",
    "references",
    "use",
    "learned",
    "formula",
    "errors",
    "excel",
    "music",
    "data",
    "analysis",
    "play",
    "pivotal",
    "role",
    "business",
    "decisions",
    "processes",
    "order",
    "use",
    "data",
    "make",
    "competent",
    "decisions",
    "must",
    "right",
    "information",
    "project",
    "data",
    "must",
    "free",
    "errors",
    "video",
    "learn",
    "profile",
    "data",
    "discover",
    "inconsistencies",
    "whether",
    "working",
    "small",
    "sets",
    "data",
    "analyzing",
    "spreadsheet",
    "thousands",
    "rows",
    "one",
    "difficult",
    "parts",
    "data",
    "analysis",
    "finding",
    "keeping",
    "clean",
    "data",
    "help",
    "process",
    "qualify",
    "data",
    "look",
    "five",
    "traits",
    "accuracy",
    "completeness",
    "reliability",
    "relevance",
    "timeliness",
    "accuracy",
    "first",
    "significant",
    "aspect",
    "data",
    "quality",
    "data",
    "analyst",
    "must",
    "clean",
    "data",
    "set",
    "removing",
    "duplicates",
    "correcting",
    "formatting",
    "errors",
    "removing",
    "blank",
    "rows",
    "another",
    "important",
    "aspect",
    "data",
    "quality",
    "determining",
    "information",
    "required",
    "complete",
    "data",
    "set",
    "readily",
    "available",
    "matter",
    "trait",
    "quality",
    "data",
    "let",
    "say",
    "given",
    "task",
    "calculate",
    "revenues",
    "sales",
    "per",
    "region",
    "collecting",
    "data",
    "discovered",
    "regions",
    "specified",
    "data",
    "would",
    "considered",
    "incomplete",
    "sources",
    "would",
    "considered",
    "obtain",
    "data",
    "required",
    "reliability",
    "another",
    "vital",
    "factor",
    "determining",
    "quality",
    "data",
    "instance",
    "let",
    "say",
    "given",
    "task",
    "determine",
    "agent",
    "revenue",
    "customer",
    "gathering",
    "data",
    "find",
    "agents",
    "keep",
    "records",
    "always",
    "update",
    "information",
    "shared",
    "company",
    "database",
    "factors",
    "mind",
    "would",
    "determine",
    "data",
    "shared",
    "company",
    "database",
    "unreliable",
    "new",
    "processes",
    "would",
    "need",
    "established",
    "ensure",
    "reliable",
    "data",
    "relevance",
    "another",
    "trait",
    "quality",
    "data",
    "collecting",
    "information",
    "data",
    "analyst",
    "must",
    "consider",
    "data",
    "assembled",
    "really",
    "necessary",
    "project",
    "example",
    "reviewing",
    "data",
    "related",
    "sales",
    "revenue",
    "per",
    "customer",
    "information",
    "customer",
    "birthdays",
    "personal",
    "information",
    "also",
    "included",
    "making",
    "determination",
    "early",
    "exclude",
    "personal",
    "information",
    "data",
    "set",
    "analyst",
    "would",
    "save",
    "review",
    "unnecessary",
    "information",
    "last",
    "factor",
    "determining",
    "quality",
    "data",
    "timeliness",
    "trait",
    "refers",
    "availability",
    "accessibility",
    "selected",
    "data",
    "let",
    "say",
    "sales",
    "report",
    "going",
    "used",
    "weekly",
    "employee",
    "reviews",
    "report",
    "refreshed",
    "month",
    "error",
    "refreshing",
    "data",
    "would",
    "cause",
    "report",
    "become",
    "outdated",
    "would",
    "serious",
    "consequences",
    "employee",
    "reviews",
    "video",
    "learned",
    "important",
    "role",
    "data",
    "analyst",
    "qualifying",
    "data",
    "considering",
    "five",
    "traits",
    "good",
    "quality",
    "data",
    "analyst",
    "save",
    "time",
    "avoid",
    "serious",
    "issues",
    "data",
    "free",
    "errors",
    "next",
    "video",
    "take",
    "collected",
    "data",
    "learn",
    "import",
    "spreadsheet",
    "foreign",
    "music",
    "learned",
    "importance",
    "data",
    "quality",
    "video",
    "learn",
    "import",
    "data",
    "text",
    "file",
    "using",
    "text",
    "import",
    "wizard",
    "learn",
    "adjust",
    "column",
    "widths",
    "learn",
    "add",
    "remove",
    "columns",
    "rows",
    "know",
    "default",
    "excel",
    "works",
    "dot",
    "xlsx",
    "dot",
    "xls",
    "files",
    "opens",
    "workbooks",
    "excel",
    "also",
    "use",
    "data",
    "formats",
    "plain",
    "text",
    "data",
    "comma",
    "separated",
    "tab",
    "separated",
    "sometimes",
    "source",
    "files",
    "saved",
    "dot",
    "txt",
    "extension",
    "referred",
    "text",
    "files",
    "others",
    "might",
    "saved",
    "dot",
    "csv",
    "file",
    "extension",
    "typically",
    "referred",
    "csv",
    "files",
    "notepad",
    "opened",
    "text",
    "file",
    "contains",
    "data",
    "car",
    "sales",
    "uses",
    "comma",
    "separated",
    "values",
    "csvs",
    "separate",
    "bit",
    "data",
    "record",
    "notice",
    "top",
    "line",
    "holds",
    "headings",
    "manufacturer",
    "model",
    "engine",
    "size",
    "one",
    "separated",
    "comma",
    "want",
    "become",
    "headers",
    "import",
    "file",
    "excel",
    "line",
    "headings",
    "first",
    "line",
    "real",
    "data",
    "see",
    "piece",
    "data",
    "also",
    "separated",
    "comma",
    "16",
    "headings",
    "also",
    "16",
    "pieces",
    "data",
    "lines",
    "headings",
    "scroll",
    "bottom",
    "see",
    "last",
    "data",
    "record",
    "volvo",
    "s80",
    "open",
    "file",
    "excel",
    "choose",
    "file",
    "open",
    "either",
    "select",
    "file",
    "recently",
    "used",
    "list",
    "click",
    "browse",
    "find",
    "file",
    "want",
    "import",
    "open",
    "file",
    "text",
    "import",
    "wizard",
    "launches",
    "automatically",
    "start",
    "try",
    "determine",
    "file",
    "note",
    "detected",
    "delimited",
    "file",
    "one",
    "data",
    "fields",
    "separated",
    "character",
    "comma",
    "tab",
    "want",
    "headings",
    "become",
    "headers",
    "excel",
    "need",
    "ensure",
    "select",
    "option",
    "data",
    "headers",
    "see",
    "mini",
    "preview",
    "data",
    "preview",
    "box",
    "click",
    "next",
    "proceed",
    "wizard",
    "step",
    "2",
    "wizard",
    "need",
    "select",
    "delimiter",
    "character",
    "separating",
    "pieces",
    "data",
    "select",
    "comma",
    "deselect",
    "others",
    "note",
    "data",
    "preview",
    "starts",
    "show",
    "us",
    "imported",
    "data",
    "look",
    "like",
    "scroll",
    "across",
    "preview",
    "window",
    "ensure",
    "data",
    "going",
    "look",
    "want",
    "expect",
    "looks",
    "okay",
    "continue",
    "wizard",
    "step",
    "3",
    "wizard",
    "set",
    "data",
    "format",
    "column",
    "example",
    "might",
    "want",
    "change",
    "column",
    "text",
    "date",
    "format",
    "case",
    "accept",
    "default",
    "general",
    "format",
    "finish",
    "import",
    "wizard",
    "excel",
    "see",
    "headings",
    "text",
    "file",
    "imported",
    "header",
    "row",
    "also",
    "notice",
    "columns",
    "showing",
    "data",
    "headings",
    "showing",
    "full",
    "data",
    "shown",
    "either",
    "see",
    "number",
    "hashes",
    "cells",
    "column",
    "widths",
    "narrow",
    "cases",
    "remember",
    "manually",
    "adjust",
    "column",
    "width",
    "dragging",
    "divider",
    "across",
    "change",
    "one",
    "go",
    "select",
    "columns",
    "first",
    "one",
    "selected",
    "column",
    "dividers",
    "also",
    "similar",
    "thing",
    "rows",
    "dragging",
    "make",
    "bigger",
    "smaller",
    "row",
    "divider",
    "auto",
    "size",
    "columns",
    "decided",
    "really",
    "need",
    "namely",
    "vehicle",
    "type",
    "latest",
    "launch",
    "let",
    "remove",
    "either",
    "done",
    "using",
    "delete",
    "drop",
    "menu",
    "cells",
    "group",
    "home",
    "tab",
    "select",
    "delete",
    "sheet",
    "columns",
    "selecting",
    "column",
    "deleting",
    "way",
    "add",
    "another",
    "column",
    "simply",
    "select",
    "column",
    "right",
    "want",
    "new",
    "column",
    "right",
    "click",
    "column",
    "choose",
    "insert",
    "give",
    "header",
    "name",
    "year",
    "delete",
    "row",
    "need",
    "select",
    "row",
    "right",
    "click",
    "choose",
    "delete",
    "add",
    "row",
    "select",
    "row",
    "place",
    "want",
    "add",
    "new",
    "row",
    "right",
    "click",
    "row",
    "choose",
    "insert",
    "want",
    "save",
    "file",
    "excel",
    "file",
    "either",
    "choose",
    "file",
    "save",
    "click",
    "save",
    "yellow",
    "tooltip",
    "appeared",
    "top",
    "worksheet",
    "imported",
    "file",
    "would",
    "choose",
    "excel",
    "workbook",
    "dot",
    "xlsx",
    "save",
    "type",
    "box",
    "video",
    "learned",
    "import",
    "data",
    "using",
    "text",
    "import",
    "wizard",
    "learned",
    "adjust",
    "column",
    "widths",
    "learned",
    "add",
    "remove",
    "columns",
    "rows",
    "next",
    "video",
    "discuss",
    "importance",
    "data",
    "privacy",
    "including",
    "sensitive",
    "information",
    "personally",
    "identifiable",
    "data",
    "foreign",
    "music",
    "learn",
    "data",
    "privacy",
    "regulations",
    "govern",
    "collected",
    "data",
    "collecting",
    "customer",
    "data",
    "specific",
    "regulations",
    "apply",
    "data",
    "used",
    "understanding",
    "data",
    "privacy",
    "regulations",
    "getting",
    "familiar",
    "following",
    "three",
    "fundamentals",
    "eliminate",
    "risk",
    "financial",
    "penalties",
    "keep",
    "trust",
    "customers",
    "confidentiality",
    "collection",
    "use",
    "compliance",
    "confidentiality",
    "important",
    "element",
    "data",
    "privacy",
    "acknowledges",
    "customer",
    "personal",
    "information",
    "belongs",
    "types",
    "information",
    "accessed",
    "data",
    "analyst",
    "range",
    "sales",
    "forecasts",
    "employee",
    "information",
    "even",
    "patient",
    "records",
    "accessing",
    "types",
    "records",
    "analyst",
    "must",
    "able",
    "recognize",
    "different",
    "types",
    "personal",
    "data",
    "personal",
    "information",
    "pi",
    "type",
    "information",
    "traced",
    "back",
    "specific",
    "individual",
    "type",
    "information",
    "include",
    "anything",
    "emails",
    "images",
    "personally",
    "identifiable",
    "information",
    "pii",
    "specific",
    "information",
    "could",
    "used",
    "identify",
    "individual",
    "type",
    "information",
    "could",
    "include",
    "social",
    "security",
    "number",
    "driver",
    "license",
    "number",
    "lastly",
    "sensitive",
    "personal",
    "information",
    "spi",
    "may",
    "necessarily",
    "identify",
    "specific",
    "individual",
    "contains",
    "private",
    "information",
    "needs",
    "protected",
    "made",
    "public",
    "could",
    "possibly",
    "used",
    "harm",
    "individual",
    "type",
    "information",
    "include",
    "data",
    "race",
    "sexual",
    "orientation",
    "biometric",
    "genetic",
    "information",
    "understanding",
    "personal",
    "data",
    "associated",
    "regulations",
    "efficiently",
    "anonymize",
    "data",
    "removing",
    "unnecessary",
    "information",
    "type",
    "action",
    "help",
    "build",
    "customer",
    "confidence",
    "continue",
    "develop",
    "free",
    "flow",
    "information",
    "searching",
    "data",
    "analyst",
    "must",
    "know",
    "location",
    "company",
    "collecting",
    "data",
    "location",
    "respondent",
    "knowing",
    "data",
    "collected",
    "essential",
    "element",
    "data",
    "privacy",
    "regulations",
    "must",
    "applied",
    "general",
    "data",
    "protection",
    "regulation",
    "gdpr",
    "regulation",
    "specific",
    "european",
    "union",
    "applies",
    "jurisdiction",
    "individual",
    "new",
    "law",
    "created",
    "brazil",
    "called",
    "lgpd",
    "take",
    "effect",
    "august",
    "new",
    "data",
    "policy",
    "regulations",
    "apply",
    "individuals",
    "within",
    "brazil",
    "ignores",
    "location",
    "data",
    "processor",
    "united",
    "states",
    "one",
    "countrywide",
    "principle",
    "law",
    "data",
    "privacy",
    "individual",
    "states",
    "began",
    "make",
    "regulations",
    "instance",
    "california",
    "created",
    "california",
    "consumer",
    "privacy",
    "act",
    "ccpa",
    "better",
    "protect",
    "customer",
    "data",
    "also",
    "regulations",
    "govern",
    "collection",
    "use",
    "sensitive",
    "personal",
    "data",
    "example",
    "healthcare",
    "hipaa",
    "hipaa",
    "privacy",
    "rules",
    "govern",
    "collection",
    "disclosure",
    "protected",
    "health",
    "information",
    "retail",
    "pci",
    "standards",
    "govern",
    "credit",
    "card",
    "data",
    "failure",
    "safeguard",
    "card",
    "holder",
    "information",
    "result",
    "hefty",
    "fines",
    "basic",
    "understanding",
    "policies",
    "able",
    "remain",
    "compliant",
    "handling",
    "sensitive",
    "information",
    "unfortunately",
    "breaches",
    "customer",
    "data",
    "common",
    "occurrence",
    "understanding",
    "remain",
    "compliant",
    "essential",
    "understanding",
    "data",
    "privacy",
    "regulations",
    "european",
    "union",
    "united",
    "states",
    "countries",
    "well",
    "industries",
    "key",
    "keeping",
    "data",
    "safe",
    "companies",
    "must",
    "comply",
    "privacy",
    "regulations",
    "times",
    "also",
    "make",
    "sure",
    "policies",
    "readily",
    "accessible",
    "employees",
    "example",
    "let",
    "say",
    "data",
    "analyst",
    "downloads",
    "spreadsheet",
    "sensitive",
    "information",
    "order",
    "complete",
    "report",
    "monday",
    "morning",
    "analysts",
    "decided",
    "take",
    "work",
    "laptop",
    "home",
    "weekend",
    "driving",
    "home",
    "analyst",
    "accidentally",
    "left",
    "laptop",
    "car",
    "next",
    "morning",
    "found",
    "car",
    "stolen",
    "along",
    "laptop",
    "responsibility",
    "company",
    "keep",
    "customer",
    "data",
    "safe",
    "breach",
    "privacy",
    "data",
    "left",
    "company",
    "property",
    "type",
    "action",
    "could",
    "cost",
    "company",
    "large",
    "amounts",
    "money",
    "fines",
    "penalties",
    "could",
    "also",
    "reduce",
    "customer",
    "confidence",
    "causing",
    "significant",
    "impact",
    "revenue",
    "data",
    "privacy",
    "applies",
    "data",
    "collected",
    "instances",
    "regulations",
    "apply",
    "order",
    "laws",
    "regulations",
    "apply",
    "particular",
    "collection",
    "data",
    "must",
    "completely",
    "anonymous",
    "make",
    "data",
    "anonymous",
    "means",
    "exclude",
    "data",
    "ties",
    "back",
    "particular",
    "individual",
    "approach",
    "might",
    "practical",
    "circumstances",
    "collecting",
    "data",
    "privacy",
    "mind",
    "could",
    "remove",
    "privacy",
    "limitations",
    "make",
    "data",
    "collections",
    "accessible",
    "video",
    "learned",
    "importance",
    "data",
    "privacy",
    "challenges",
    "data",
    "analysts",
    "face",
    "collecting",
    "sorting",
    "data",
    "videos",
    "next",
    "lesson",
    "learn",
    "different",
    "methods",
    "cleaning",
    "data",
    "spreadsheet",
    "foreign",
    "music",
    "listen",
    "several",
    "data",
    "professionals",
    "discuss",
    "importance",
    "data",
    "quality",
    "data",
    "privacy",
    "relate",
    "data",
    "analysis",
    "let",
    "us",
    "start",
    "importance",
    "data",
    "quality",
    "relates",
    "data",
    "analysis",
    "data",
    "quality",
    "utmost",
    "importance",
    "terms",
    "data",
    "analytics",
    "reason",
    "behind",
    "soon",
    "presenting",
    "align",
    "someone",
    "expects",
    "first",
    "thing",
    "tend",
    "go",
    "get",
    "data",
    "happened",
    "data",
    "transformed",
    "people",
    "like",
    "think",
    "know",
    "understand",
    "business",
    "start",
    "challenge",
    "ground",
    "stand",
    "data",
    "quality",
    "clean",
    "trusted",
    "source",
    "start",
    "get",
    "lot",
    "discussions",
    "lot",
    "debate",
    "ultimately",
    "plot",
    "trying",
    "present",
    "gets",
    "lost",
    "backbone",
    "successful",
    "data",
    "analysis",
    "project",
    "good",
    "quality",
    "data",
    "common",
    "term",
    "computer",
    "science",
    "called",
    "garbage",
    "garbage",
    "essentially",
    "read",
    "bad",
    "quality",
    "data",
    "expect",
    "get",
    "bad",
    "quality",
    "results",
    "really",
    "nothing",
    "important",
    "data",
    "analysis",
    "making",
    "sure",
    "working",
    "good",
    "quality",
    "data",
    "really",
    "important",
    "sense",
    "track",
    "data",
    "really",
    "feel",
    "comfortable",
    "uh",
    "data",
    "using",
    "really",
    "high",
    "quality",
    "data",
    "accuracy",
    "garbage",
    "garbage",
    "waste",
    "time",
    "analyze",
    "data",
    "poor",
    "quality",
    "might",
    "mislead",
    "business",
    "direction",
    "integrity",
    "data",
    "using",
    "providing",
    "someone",
    "else",
    "use",
    "utmost",
    "importance",
    "data",
    "used",
    "determine",
    "launch",
    "product",
    "division",
    "profitable",
    "easy",
    "get",
    "things",
    "confused",
    "paying",
    "attention",
    "details",
    "using",
    "inventory",
    "example",
    "looking",
    "inventory",
    "skew",
    "level",
    "accidentally",
    "pick",
    "wrong",
    "sku",
    "analyze",
    "draw",
    "conclusions",
    "particular",
    "item",
    "profitable",
    "fact",
    "major",
    "major",
    "decision",
    "company",
    "make",
    "obviously",
    "expectation",
    "lots",
    "due",
    "diligence",
    "beginning",
    "start",
    "bad",
    "data",
    "build",
    "later",
    "realize",
    "good",
    "idea",
    "lost",
    "time",
    "energy",
    "effort",
    "cases",
    "trust",
    "thank",
    "viewpoints",
    "importance",
    "data",
    "privacy",
    "relates",
    "data",
    "analysis",
    "data",
    "privacy",
    "incredibly",
    "important",
    "especially",
    "working",
    "industries",
    "like",
    "pharmaceuticals",
    "healthcare",
    "stops",
    "ability",
    "make",
    "sure",
    "users",
    "getting",
    "appropriate",
    "level",
    "data",
    "based",
    "roles",
    "permissions",
    "number",
    "cuts",
    "data",
    "specific",
    "geography",
    "function",
    "tools",
    "cognitive",
    "analytics",
    "start",
    "build",
    "part",
    "model",
    "within",
    "say",
    "access",
    "whether",
    "granular",
    "level",
    "person",
    "see",
    "data",
    "canada",
    "us",
    "whether",
    "simply",
    "person",
    "see",
    "report",
    "entirety",
    "lots",
    "different",
    "ways",
    "handle",
    "data",
    "privacy",
    "utmost",
    "important",
    "across",
    "industries",
    "today",
    "world",
    "data",
    "privacy",
    "huge",
    "thing",
    "tax",
    "side",
    "especially",
    "business",
    "call",
    "pii",
    "personal",
    "identifiable",
    "information",
    "protect",
    "ca",
    "send",
    "things",
    "email",
    "send",
    "tax",
    "returns",
    "even",
    "actually",
    "business",
    "period",
    "send",
    "things",
    "email",
    "sensitive",
    "pii",
    "data",
    "encrypt",
    "make",
    "sure",
    "email",
    "encrypted",
    "use",
    "software",
    "certain",
    "softwares",
    "allow",
    "us",
    "show",
    "social",
    "security",
    "numbers",
    "names",
    "dataverse",
    "happen",
    "certain",
    "sequence",
    "share",
    "client",
    "calling",
    "put",
    "email",
    "certainly",
    "put",
    "email",
    "encrypted",
    "information",
    "want",
    "make",
    "sure",
    "always",
    "safe",
    "make",
    "sure",
    "protecting",
    "cost",
    "music",
    "learned",
    "importance",
    "data",
    "quality",
    "data",
    "privacy",
    "video",
    "learn",
    "deal",
    "inaccurate",
    "data",
    "remove",
    "empty",
    "rows",
    "remove",
    "duplicated",
    "data",
    "common",
    "collecting",
    "importing",
    "data",
    "whether",
    "manual",
    "automated",
    "processes",
    "get",
    "errors",
    "inconsistencies",
    "data",
    "simple",
    "spelling",
    "mistakes",
    "extra",
    "white",
    "space",
    "wrong",
    "case",
    "used",
    "text",
    "empty",
    "rows",
    "missing",
    "values",
    "data",
    "inaccurate",
    "duplicated",
    "data",
    "errors",
    "inconsistencies",
    "data",
    "lead",
    "issues",
    "formulas",
    "working",
    "unsuccessful",
    "sorting",
    "filtering",
    "operations",
    "therefore",
    "inadequately",
    "visualized",
    "presented",
    "data",
    "findings",
    "data",
    "errors",
    "inconsistencies",
    "require",
    "carry",
    "form",
    "data",
    "cleaning",
    "routine",
    "improve",
    "quality",
    "usability",
    "data",
    "let",
    "start",
    "one",
    "easier",
    "tasks",
    "spell",
    "checking",
    "excel",
    "works",
    "pretty",
    "much",
    "way",
    "may",
    "already",
    "encountered",
    "applications",
    "microsoft",
    "word",
    "common",
    "word",
    "processing",
    "applications",
    "data",
    "relating",
    "sales",
    "toy",
    "vehicles",
    "first",
    "thing",
    "need",
    "select",
    "data",
    "wish",
    "check",
    "spelling",
    "case",
    "try",
    "column",
    "k",
    "contains",
    "product",
    "line",
    "data",
    "click",
    "spelling",
    "review",
    "tab",
    "well",
    "seems",
    "okay",
    "let",
    "try",
    "country",
    "information",
    "column",
    "error",
    "country",
    "name",
    "misspelled",
    "likely",
    "mistyped",
    "click",
    "change",
    "happy",
    "spelling",
    "suggestion",
    "could",
    "choose",
    "another",
    "suggestion",
    "list",
    "even",
    "ignore",
    "error",
    "know",
    "data",
    "correct",
    "case",
    "change",
    "another",
    "typo",
    "country",
    "name",
    "one",
    "seems",
    "errors",
    "column",
    "let",
    "try",
    "final",
    "column",
    "deal",
    "size",
    "column",
    "x",
    "misspelling",
    "word",
    "small",
    "another",
    "medium",
    "seems",
    "column",
    "next",
    "inconsistency",
    "look",
    "empty",
    "rows",
    "empty",
    "rows",
    "data",
    "cause",
    "lots",
    "issues",
    "relating",
    "moving",
    "around",
    "data",
    "working",
    "formulas",
    "sorting",
    "filtering",
    "therefore",
    "important",
    "remove",
    "data",
    "remember",
    "earlier",
    "lesson",
    "click",
    "control",
    "plus",
    "arrow",
    "take",
    "us",
    "end",
    "column",
    "data",
    "notice",
    "data",
    "set",
    "cursor",
    "keeps",
    "stopping",
    "get",
    "empty",
    "row",
    "meaning",
    "data",
    "set",
    "essentially",
    "split",
    "multiple",
    "sections",
    "separated",
    "empty",
    "rows",
    "good",
    "let",
    "resolve",
    "couple",
    "options",
    "one",
    "option",
    "manually",
    "scroll",
    "sheet",
    "looking",
    "empty",
    "rows",
    "deleting",
    "one",
    "easy",
    "enough",
    "fine",
    "small",
    "amount",
    "data",
    "imagine",
    "dealing",
    "hundreds",
    "thousands",
    "even",
    "tens",
    "thousands",
    "rows",
    "would",
    "laborious",
    "time",
    "consuming",
    "process",
    "much",
    "better",
    "way",
    "involves",
    "selecting",
    "data",
    "first",
    "either",
    "using",
    "mouse",
    "control",
    "plus",
    "shift",
    "plus",
    "end",
    "keyboard",
    "shortcut",
    "select",
    "filter",
    "icon",
    "data",
    "tab",
    "see",
    "column",
    "filter",
    "icon",
    "next",
    "column",
    "header",
    "select",
    "customer",
    "name",
    "column",
    "filter",
    "column",
    "uncheck",
    "select",
    "scroll",
    "bottom",
    "list",
    "check",
    "item",
    "called",
    "blanks",
    "click",
    "ok",
    "show",
    "empty",
    "rows",
    "top",
    "sheet",
    "quite",
    "hard",
    "see",
    "look",
    "row",
    "numbers",
    "see",
    "rows",
    "28",
    "29",
    "65",
    "73",
    "74",
    "75",
    "117",
    "listed",
    "top",
    "highlighted",
    "blue",
    "text",
    "select",
    "rows",
    "either",
    "using",
    "mouse",
    "going",
    "first",
    "cell",
    "first",
    "data",
    "row",
    "a28",
    "using",
    "control",
    "plus",
    "shift",
    "plus",
    "end",
    "keyboard",
    "shortcut",
    "delete",
    "offending",
    "empty",
    "rows",
    "need",
    "clear",
    "filter",
    "turn",
    "view",
    "data",
    "go",
    "back",
    "first",
    "row",
    "top",
    "data",
    "sheet",
    "try",
    "control",
    "plus",
    "shortcut",
    "go",
    "end",
    "data",
    "column",
    "work",
    "next",
    "inconsistency",
    "look",
    "duplicated",
    "rows",
    "data",
    "quite",
    "common",
    "duplicate",
    "data",
    "rows",
    "exist",
    "imported",
    "data",
    "caused",
    "either",
    "human",
    "input",
    "error",
    "error",
    "import",
    "process",
    "two",
    "ways",
    "excel",
    "first",
    "way",
    "includes",
    "reviewing",
    "data",
    "plan",
    "remove",
    "first",
    "deleting",
    "ensure",
    "deleting",
    "right",
    "data",
    "preferred",
    "method",
    "provides",
    "additional",
    "level",
    "data",
    "security",
    "second",
    "method",
    "also",
    "show",
    "simpler",
    "review",
    "data",
    "removed",
    "first",
    "lacks",
    "security",
    "first",
    "method",
    "important",
    "select",
    "column",
    "data",
    "would",
    "expect",
    "duplicate",
    "values",
    "example",
    "consider",
    "price",
    "column",
    "c",
    "would",
    "expect",
    "lots",
    "values",
    "repeated",
    "unit",
    "price",
    "products",
    "bad",
    "example",
    "column",
    "use",
    "find",
    "duplicates",
    "instead",
    "let",
    "use",
    "sales",
    "column",
    "column",
    "e",
    "far",
    "less",
    "likely",
    "values",
    "duplicated",
    "normal",
    "process",
    "things",
    "total",
    "sales",
    "order",
    "select",
    "column",
    "choose",
    "conditional",
    "formatting",
    "highlight",
    "cells",
    "rules",
    "duplicate",
    "values",
    "click",
    "ok",
    "scroll",
    "sheet",
    "see",
    "values",
    "identified",
    "duplicates",
    "seem",
    "duplicate",
    "values",
    "rows",
    "36",
    "40",
    "rows",
    "74",
    "let",
    "zoom",
    "see",
    "duplicate",
    "sections",
    "together",
    "seems",
    "like",
    "fact",
    "exact",
    "duplicate",
    "entries",
    "likely",
    "input",
    "error",
    "let",
    "delete",
    "second",
    "section",
    "duplicate",
    "rows",
    "sequence",
    "relate",
    "motorcycle",
    "sales",
    "ships",
    "section",
    "sheet",
    "first",
    "recommended",
    "method",
    "removing",
    "duplicate",
    "rows",
    "data",
    "previews",
    "data",
    "removed",
    "first",
    "let",
    "try",
    "second",
    "simpler",
    "less",
    "secure",
    "method",
    "let",
    "go",
    "back",
    "100",
    "zoom",
    "go",
    "back",
    "top",
    "worksheet",
    "time",
    "select",
    "whole",
    "data",
    "sheet",
    "data",
    "tab",
    "use",
    "remove",
    "duplicates",
    "button",
    "unselect",
    "columns",
    "select",
    "sales",
    "column",
    "duplicate",
    "rows",
    "deleted",
    "last",
    "cleaning",
    "process",
    "look",
    "video",
    "using",
    "find",
    "replace",
    "feature",
    "repair",
    "misspelt",
    "surnames",
    "customer",
    "contacts",
    "column",
    "find",
    "replace",
    "tools",
    "find",
    "select",
    "home",
    "page",
    "excel",
    "used",
    "office",
    "products",
    "word",
    "familiar",
    "already",
    "email",
    "swedish",
    "customer",
    "informing",
    "us",
    "surname",
    "spelled",
    "incorrectly",
    "order",
    "sheets",
    "type",
    "misspelled",
    "surname",
    "find",
    "box",
    "click",
    "find",
    "next",
    "click",
    "see",
    "multiple",
    "incorrect",
    "entries",
    "click",
    "find",
    "instances",
    "listed",
    "open",
    "replace",
    "tab",
    "enter",
    "name",
    "replace",
    "incorrect",
    "spellings",
    "surname",
    "larson",
    "double",
    "replace",
    "instances",
    "corrected",
    "spelling",
    "looks",
    "better",
    "finished",
    "video",
    "learned",
    "deal",
    "inaccurate",
    "data",
    "remove",
    "empty",
    "rows",
    "remove",
    "duplicated",
    "data",
    "next",
    "video",
    "look",
    "changing",
    "case",
    "text",
    "fixing",
    "date",
    "formatting",
    "errors",
    "trimming",
    "white",
    "space",
    "data",
    "music",
    "learned",
    "deal",
    "inaccurate",
    "data",
    "remove",
    "empty",
    "rows",
    "remove",
    "duplicated",
    "rows",
    "video",
    "look",
    "changing",
    "case",
    "text",
    "fixing",
    "date",
    "formatting",
    "errors",
    "trimming",
    "white",
    "space",
    "data",
    "collect",
    "receive",
    "data",
    "various",
    "sources",
    "quite",
    "common",
    "find",
    "data",
    "contains",
    "text",
    "mixed",
    "case",
    "sum",
    "uppercase",
    "sum",
    "lowercase",
    "capitalized",
    "proper",
    "case",
    "also",
    "known",
    "sentence",
    "case",
    "may",
    "intentional",
    "often",
    "excel",
    "change",
    "case",
    "button",
    "like",
    "microsoft",
    "word",
    "need",
    "use",
    "methods",
    "perform",
    "data",
    "cleaning",
    "task",
    "methods",
    "functions",
    "namely",
    "upper",
    "lower",
    "proper",
    "functions",
    "use",
    "functions",
    "help",
    "change",
    "case",
    "text",
    "data",
    "see",
    "header",
    "row",
    "using",
    "uppercase",
    "characters",
    "want",
    "change",
    "use",
    "proper",
    "case",
    "need",
    "add",
    "another",
    "row",
    "put",
    "function",
    "referred",
    "helper",
    "row",
    "proper",
    "function",
    "simple",
    "use",
    "type",
    "equals",
    "proper",
    "open",
    "parenthesis",
    "cell",
    "reference",
    "case",
    "a1",
    "close",
    "parenthesis",
    "press",
    "enter",
    "see",
    "result",
    "a2",
    "proper",
    "case",
    "try",
    "drag",
    "formula",
    "right",
    "across",
    "column",
    "x",
    "using",
    "fill",
    "handle",
    "a2",
    "tricky",
    "lot",
    "columns",
    "let",
    "try",
    "another",
    "way",
    "instead",
    "dragging",
    "use",
    "shift",
    "plus",
    "right",
    "arrow",
    "select",
    "columns",
    "across",
    "x",
    "first",
    "press",
    "f2",
    "bring",
    "cursor",
    "focus",
    "cell",
    "a2",
    "hold",
    "control",
    "key",
    "press",
    "enter",
    "fills",
    "across",
    "might",
    "think",
    "could",
    "remove",
    "original",
    "row",
    "look",
    "happens",
    "get",
    "ref",
    "error",
    "formula",
    "referencing",
    "invalid",
    "reference",
    "header",
    "row",
    "cells",
    "contain",
    "failed",
    "formula",
    "rather",
    "actual",
    "header",
    "text",
    "need",
    "undo",
    "instead",
    "copy",
    "contents",
    "helper",
    "row",
    "row",
    "one",
    "paste",
    "need",
    "choose",
    "paste",
    "values",
    "option",
    "header",
    "row",
    "cells",
    "contain",
    "header",
    "text",
    "remove",
    "helper",
    "row",
    "row",
    "let",
    "use",
    "upper",
    "function",
    "change",
    "text",
    "proper",
    "case",
    "uppercase",
    "insert",
    "column",
    "right",
    "column",
    "want",
    "change",
    "helper",
    "column",
    "type",
    "formula",
    "containing",
    "upper",
    "function",
    "first",
    "data",
    "cell",
    "new",
    "helper",
    "column",
    "simple",
    "formula",
    "type",
    "equals",
    "upper",
    "open",
    "parenthesis",
    "cell",
    "reference",
    "case",
    "t2",
    "close",
    "parenthesis",
    "press",
    "enter",
    "see",
    "result",
    "country",
    "name",
    "uppercase",
    "copy",
    "formula",
    "rest",
    "column",
    "double",
    "clicking",
    "fill",
    "handle",
    "cross",
    "symbol",
    "copy",
    "paste",
    "contents",
    "helper",
    "column",
    "original",
    "column",
    "use",
    "paste",
    "values",
    "option",
    "delete",
    "helper",
    "column",
    "next",
    "use",
    "lower",
    "function",
    "change",
    "text",
    "proper",
    "case",
    "lowercase",
    "insert",
    "column",
    "right",
    "column",
    "want",
    "change",
    "another",
    "helper",
    "column",
    "type",
    "formula",
    "containing",
    "lower",
    "function",
    "first",
    "data",
    "cell",
    "helper",
    "column",
    "simple",
    "formula",
    "type",
    "equals",
    "lower",
    "open",
    "parenthesis",
    "cell",
    "reference",
    "case",
    "k2",
    "close",
    "parenthesis",
    "press",
    "enter",
    "see",
    "result",
    "product",
    "line",
    "data",
    "lower",
    "case",
    "copy",
    "formula",
    "rest",
    "column",
    "fill",
    "handle",
    "copy",
    "paste",
    "contents",
    "helper",
    "column",
    "original",
    "column",
    "ensuring",
    "use",
    "paste",
    "values",
    "option",
    "delete",
    "helper",
    "column",
    "quite",
    "common",
    "receive",
    "data",
    "mixture",
    "date",
    "formats",
    "uses",
    "date",
    "format",
    "suitable",
    "region",
    "let",
    "look",
    "change",
    "format",
    "dates",
    "see",
    "date",
    "format",
    "currently",
    "using",
    "two",
    "digit",
    "day",
    "month",
    "four",
    "digit",
    "year",
    "value",
    "open",
    "number",
    "format",
    "dialog",
    "box",
    "see",
    "locale",
    "box",
    "english",
    "united",
    "kingdom",
    "date",
    "format",
    "want",
    "use",
    "us",
    "date",
    "format",
    "first",
    "change",
    "locale",
    "english",
    "united",
    "states",
    "list",
    "see",
    "several",
    "date",
    "options",
    "choose",
    "let",
    "choose",
    "one",
    "uses",
    "full",
    "month",
    "name",
    "day",
    "four",
    "digit",
    "year",
    "value",
    "could",
    "copy",
    "formula",
    "rest",
    "date",
    "cells",
    "however",
    "want",
    "format",
    "dates",
    "using",
    "custom",
    "format",
    "number",
    "format",
    "list",
    "select",
    "custom",
    "choose",
    "existing",
    "format",
    "similar",
    "want",
    "simply",
    "modify",
    "create",
    "new",
    "custom",
    "format",
    "day",
    "three",
    "letter",
    "month",
    "four",
    "digit",
    "year",
    "apply",
    "new",
    "custom",
    "date",
    "format",
    "rest",
    "column",
    "could",
    "either",
    "use",
    "format",
    "painter",
    "tool",
    "select",
    "rest",
    "column",
    "choose",
    "new",
    "column",
    "format",
    "custom",
    "list",
    "number",
    "format",
    "dialog",
    "box",
    "might",
    "find",
    "data",
    "white",
    "space",
    "unwanted",
    "spaces",
    "data",
    "see",
    "spaces",
    "start",
    "spaces",
    "end",
    "unwanted",
    "double",
    "spaces",
    "middle",
    "data",
    "first",
    "look",
    "clean",
    "unwanted",
    "spaces",
    "data",
    "using",
    "find",
    "replace",
    "feature",
    "excel",
    "first",
    "select",
    "data",
    "home",
    "tab",
    "click",
    "find",
    "select",
    "replace",
    "get",
    "rid",
    "double",
    "spaces",
    "enter",
    "double",
    "space",
    "find",
    "box",
    "single",
    "space",
    "replace",
    "box",
    "click",
    "find",
    "next",
    "choose",
    "replace",
    "item",
    "want",
    "change",
    "could",
    "click",
    "replace",
    "fixes",
    "one",
    "go",
    "unless",
    "absolutely",
    "sure",
    "changes",
    "better",
    "practice",
    "check",
    "replace",
    "one",
    "sequence",
    "case",
    "valid",
    "reasons",
    "extra",
    "spaces",
    "large",
    "data",
    "set",
    "might",
    "also",
    "choose",
    "replace",
    "save",
    "lot",
    "time",
    "using",
    "find",
    "replace",
    "feature",
    "got",
    "rid",
    "unwanted",
    "white",
    "spaces",
    "removed",
    "double",
    "spaces",
    "using",
    "feature",
    "also",
    "single",
    "spaces",
    "left",
    "start",
    "end",
    "cells",
    "ca",
    "use",
    "find",
    "replace",
    "remove",
    "single",
    "spaces",
    "otherwise",
    "would",
    "lose",
    "spaces",
    "data",
    "including",
    "standard",
    "spaces",
    "words",
    "want",
    "remove",
    "another",
    "tool",
    "use",
    "clear",
    "spaces",
    "cells",
    "trim",
    "function",
    "use",
    "trim",
    "function",
    "insert",
    "helper",
    "column",
    "trim",
    "function",
    "simple",
    "use",
    "type",
    "equals",
    "trim",
    "open",
    "parenthesis",
    "cell",
    "reference",
    "case",
    "m2",
    "close",
    "parenthesis",
    "press",
    "enter",
    "fill",
    "hand",
    "handle",
    "symbol",
    "copy",
    "formula",
    "remainder",
    "column",
    "need",
    "copy",
    "contents",
    "new",
    "column",
    "n",
    "column",
    "remember",
    "paste",
    "using",
    "paste",
    "values",
    "option",
    "see",
    "erroneous",
    "spaces",
    "removed",
    "accurately",
    "speaking",
    "trimmed",
    "lastly",
    "remove",
    "helper",
    "column",
    "video",
    "learned",
    "change",
    "case",
    "text",
    "change",
    "date",
    "formatting",
    "trim",
    "white",
    "space",
    "data",
    "next",
    "video",
    "discuss",
    "use",
    "flash",
    "fill",
    "text",
    "columns",
    "features",
    "excel",
    "help",
    "clean",
    "data",
    "foreign",
    "music",
    "change",
    "case",
    "text",
    "change",
    "date",
    "formatting",
    "trim",
    "white",
    "space",
    "data",
    "video",
    "discuss",
    "use",
    "flash",
    "fill",
    "text",
    "columns",
    "features",
    "excel",
    "help",
    "clean",
    "data",
    "used",
    "flash",
    "fill",
    "briefly",
    "earlier",
    "course",
    "quick",
    "method",
    "entering",
    "data",
    "fits",
    "specific",
    "pattern",
    "names",
    "months",
    "days",
    "week",
    "also",
    "used",
    "data",
    "cleaning",
    "tool",
    "split",
    "column",
    "full",
    "names",
    "two",
    "separate",
    "columns",
    "four",
    "name",
    "surname",
    "also",
    "help",
    "modify",
    "naming",
    "convention",
    "used",
    "column",
    "names",
    "example",
    "vehicle",
    "toy",
    "sales",
    "worksheet",
    "column",
    "containing",
    "last",
    "names",
    "contacts",
    "another",
    "containing",
    "first",
    "names",
    "want",
    "use",
    "flash",
    "fill",
    "feature",
    "combine",
    "names",
    "one",
    "name",
    "column",
    "first",
    "insert",
    "helper",
    "column",
    "let",
    "call",
    "contact",
    "name",
    "first",
    "row",
    "new",
    "column",
    "enter",
    "full",
    "name",
    "first",
    "contact",
    "format",
    "choice",
    "example",
    "might",
    "want",
    "surname",
    "comma",
    "name",
    "might",
    "want",
    "surname",
    "initial",
    "case",
    "let",
    "enter",
    "name",
    "standard",
    "format",
    "fourname",
    "surname",
    "space",
    "press",
    "enter",
    "next",
    "start",
    "typing",
    "second",
    "contact",
    "name",
    "see",
    "flash",
    "fill",
    "displays",
    "preview",
    "remaining",
    "names",
    "happy",
    "preview",
    "press",
    "enter",
    "fills",
    "remaining",
    "names",
    "write",
    "column",
    "even",
    "works",
    "two",
    "names",
    "one",
    "columns",
    "wing",
    "c",
    "dakuna",
    "remove",
    "original",
    "columns",
    "longer",
    "need",
    "previous",
    "task",
    "saw",
    "combine",
    "two",
    "columns",
    "data",
    "one",
    "column",
    "using",
    "flash",
    "fill",
    "let",
    "see",
    "use",
    "modify",
    "naming",
    "convention",
    "column",
    "let",
    "switch",
    "customer",
    "contacts",
    "worksheet",
    "first",
    "data",
    "row",
    "next",
    "column",
    "b2",
    "type",
    "name",
    "first",
    "contact",
    "using",
    "whatever",
    "naming",
    "convention",
    "want",
    "use",
    "surname",
    "comma",
    "space",
    "forename",
    "press",
    "enter",
    "start",
    "typing",
    "second",
    "contact",
    "name",
    "next",
    "row",
    "b3",
    "flash",
    "fill",
    "detects",
    "pattern",
    "fills",
    "remaining",
    "names",
    "column",
    "b",
    "press",
    "enter",
    "could",
    "copy",
    "paste",
    "column",
    "header",
    "delete",
    "original",
    "column",
    "could",
    "flash",
    "fill",
    "take",
    "single",
    "column",
    "two",
    "names",
    "split",
    "two",
    "separate",
    "columns",
    "need",
    "use",
    "text",
    "columns",
    "feature",
    "close",
    "worksheet",
    "wo",
    "save",
    "changes",
    "let",
    "see",
    "text",
    "columns",
    "feature",
    "help",
    "data",
    "cleaning",
    "name",
    "suggests",
    "unlike",
    "flash",
    "fill",
    "text",
    "columns",
    "feature",
    "take",
    "column",
    "containing",
    "text",
    "split",
    "text",
    "one",
    "columns",
    "useful",
    "splitting",
    "text",
    "names",
    "addresses",
    "separate",
    "component",
    "parts",
    "let",
    "open",
    "customer",
    "contacts",
    "worksheet",
    "add",
    "column",
    "headings",
    "next",
    "two",
    "columns",
    "copy",
    "cell",
    "format",
    "used",
    "first",
    "column",
    "header",
    "widen",
    "columns",
    "select",
    "data",
    "column",
    "a2",
    "a23",
    "data",
    "tab",
    "click",
    "text",
    "columns",
    "wizard",
    "launched",
    "first",
    "page",
    "wizard",
    "ensure",
    "delimited",
    "selected",
    "second",
    "page",
    "ensure",
    "space",
    "selected",
    "delimiter",
    "third",
    "page",
    "wizard",
    "click",
    "little",
    "arrow",
    "next",
    "destination",
    "select",
    "b2",
    "worksheet",
    "click",
    "little",
    "arrow",
    "return",
    "wizard",
    "finished",
    "wizard",
    "see",
    "full",
    "customer",
    "contact",
    "names",
    "column",
    "successfully",
    "split",
    "two",
    "new",
    "columns",
    "b",
    "c",
    "could",
    "remove",
    "column",
    "longer",
    "need",
    "close",
    "worksheet",
    "wo",
    "save",
    "changes",
    "also",
    "achieve",
    "result",
    "using",
    "functions",
    "would",
    "required",
    "using",
    "excel",
    "web",
    "online",
    "version",
    "excel",
    "text",
    "columns",
    "feature",
    "also",
    "bit",
    "flexibility",
    "functions",
    "especially",
    "useful",
    "names",
    "complex",
    "mixed",
    "hyphenated",
    "names",
    "names",
    "middle",
    "name",
    "two",
    "middle",
    "initials",
    "middle",
    "initial",
    "open",
    "customer",
    "contacts",
    "worksheet",
    "add",
    "column",
    "headings",
    "next",
    "two",
    "columns",
    "copy",
    "cell",
    "format",
    "used",
    "first",
    "column",
    "header",
    "widen",
    "columns",
    "next",
    "enter",
    "formula",
    "b2",
    "extract",
    "four",
    "name",
    "part",
    "name",
    "formula",
    "extracts",
    "five",
    "characters",
    "cell",
    "a2",
    "starting",
    "left",
    "including",
    "space",
    "cell",
    "c2",
    "enter",
    "formula",
    "extract",
    "surname",
    "part",
    "name",
    "formula",
    "extracts",
    "seven",
    "characters",
    "cell",
    "a2",
    "starting",
    "right",
    "fill",
    "handle",
    "cell",
    "b2",
    "use",
    "autofill",
    "complete",
    "column",
    "fill",
    "handle",
    "cell",
    "c2",
    "use",
    "autofill",
    "complete",
    "column",
    "also",
    "video",
    "learned",
    "use",
    "flash",
    "fill",
    "text",
    "columns",
    "features",
    "excel",
    "help",
    "clean",
    "data",
    "foreign",
    "music",
    "listen",
    "several",
    "data",
    "professionals",
    "discuss",
    "issues",
    "around",
    "data",
    "quality",
    "tell",
    "us",
    "experience",
    "poor",
    "quality",
    "data",
    "cleaning",
    "data",
    "large",
    "portion",
    "time",
    "spent",
    "cleaning",
    "verifying",
    "checking",
    "data",
    "run",
    "analysis",
    "working",
    "healthcare",
    "information",
    "captured",
    "based",
    "someone",
    "put",
    "humans",
    "ca",
    "calibrated",
    "two",
    "people",
    "similar",
    "situation",
    "look",
    "things",
    "slightly",
    "differently",
    "make",
    "sure",
    "one",
    "describes",
    "something",
    "navy",
    "blue",
    "person",
    "describes",
    "dark",
    "blue",
    "consolidate",
    "make",
    "blue",
    "example",
    "normally",
    "healthcare",
    "thought",
    "always",
    "check",
    "integrity",
    "information",
    "analysis",
    "make",
    "sure",
    "results",
    "accurate",
    "data",
    "going",
    "perfect",
    "unfortunate",
    "reality",
    "world",
    "live",
    "databases",
    "data",
    "collected",
    "broadest",
    "possible",
    "purpose",
    "oftentimes",
    "still",
    "things",
    "missing",
    "quite",
    "format",
    "want",
    "whether",
    "collecting",
    "date",
    "time",
    "single",
    "field",
    "whereas",
    "analysis",
    "want",
    "able",
    "break",
    "day",
    "month",
    "quarter",
    "things",
    "take",
    "consideration",
    "lot",
    "different",
    "cleansing",
    "activities",
    "done",
    "undertaken",
    "help",
    "get",
    "something",
    "specific",
    "works",
    "way",
    "want",
    "work",
    "experiences",
    "poor",
    "quality",
    "data",
    "reviewing",
    "financial",
    "statements",
    "looking",
    "margins",
    "calculating",
    "ratios",
    "trying",
    "understand",
    "looking",
    "number",
    "one",
    "directionally",
    "correct",
    "two",
    "looking",
    "right",
    "thing",
    "costs",
    "current",
    "costs",
    "relevant",
    "period",
    "analyzing",
    "data",
    "captured",
    "revenue",
    "given",
    "month",
    "go",
    "back",
    "look",
    "sources",
    "scrub",
    "information",
    "validate",
    "seeing",
    "correct",
    "accounting",
    "perspective",
    "data",
    "incorrect",
    "period",
    "adjustments",
    "need",
    "made",
    "general",
    "ledger",
    "houses",
    "data",
    "properly",
    "reflect",
    "happening",
    "poor",
    "data",
    "quality",
    "really",
    "come",
    "play",
    "cause",
    "discussions",
    "need",
    "happening",
    "cause",
    "second",
    "guessed",
    "cause",
    "able",
    "firm",
    "present",
    "case",
    "data",
    "reliably",
    "case",
    "several",
    "different",
    "ways",
    "handle",
    "one",
    "go",
    "way",
    "back",
    "source",
    "ensure",
    "source",
    "data",
    "pulled",
    "appropriately",
    "simply",
    "able",
    "outline",
    "specific",
    "direct",
    "terms",
    "transformations",
    "changes",
    "done",
    "data",
    "tracking",
    "something",
    "like",
    "watson",
    "knowledge",
    "catalog",
    "able",
    "present",
    "audience",
    "filtering",
    "sorting",
    "data",
    "find",
    "wrong",
    "go",
    "back",
    "fix",
    "things",
    "time",
    "could",
    "spent",
    "working",
    "deliverables",
    "cause",
    "data",
    "integrity",
    "question",
    "constantly",
    "redo",
    "reiterate",
    "certain",
    "parts",
    "data",
    "quite",
    "frankly",
    "frustrating",
    "times",
    "habitually",
    "paying",
    "attention",
    "details",
    "minutia",
    "wasting",
    "time",
    "backtracking",
    "something",
    "could",
    "fixed",
    "early",
    "many",
    "benefits",
    "ensuring",
    "data",
    "quality",
    "good",
    "foreign",
    "music",
    "learned",
    "collect",
    "clean",
    "data",
    "time",
    "decide",
    "best",
    "method",
    "analysis",
    "video",
    "discuss",
    "importance",
    "filtering",
    "sorting",
    "performing",
    "calculations",
    "shaping",
    "data",
    "provide",
    "meaningful",
    "information",
    "deciding",
    "manipulate",
    "data",
    "sometimes",
    "difficult",
    "make",
    "changes",
    "adjustments",
    "need",
    "visualize",
    "final",
    "output",
    "questions",
    "ask",
    "beginning",
    "task",
    "big",
    "data",
    "set",
    "type",
    "filtering",
    "required",
    "find",
    "necessary",
    "information",
    "data",
    "sorted",
    "type",
    "calculations",
    "needed",
    "visualized",
    "final",
    "output",
    "must",
    "decide",
    "best",
    "approach",
    "shape",
    "data",
    "basic",
    "step",
    "would",
    "filter",
    "sort",
    "data",
    "sorting",
    "data",
    "able",
    "organize",
    "based",
    "conditions",
    "alphabetically",
    "numerically",
    "example",
    "wanted",
    "check",
    "duplicate",
    "order",
    "numbers",
    "could",
    "sort",
    "data",
    "quickly",
    "see",
    "duplicates",
    "sorting",
    "removing",
    "duplicate",
    "row",
    "find",
    "view",
    "needs",
    "specific",
    "meet",
    "requirements",
    "decide",
    "want",
    "see",
    "data",
    "month",
    "november",
    "adding",
    "filter",
    "choose",
    "see",
    "items",
    "month",
    "id",
    "equal",
    "filtering",
    "data",
    "able",
    "see",
    "rows",
    "meet",
    "filter",
    "criteria",
    "allows",
    "us",
    "better",
    "analyze",
    "information",
    "becoming",
    "familiar",
    "tools",
    "analyze",
    "data",
    "seem",
    "daunting",
    "one",
    "key",
    "benefit",
    "using",
    "spreadsheet",
    "ability",
    "use",
    "functions",
    "functions",
    "excel",
    "organized",
    "several",
    "categories",
    "including",
    "mathematical",
    "statistical",
    "logical",
    "financial",
    "date",
    "time",
    "based",
    "let",
    "say",
    "wanted",
    "get",
    "average",
    "company",
    "revenue",
    "month",
    "june",
    "realize",
    "hundred",
    "items",
    "would",
    "need",
    "calculated",
    "normal",
    "circumstances",
    "get",
    "average",
    "would",
    "create",
    "formula",
    "add",
    "row",
    "divide",
    "total",
    "number",
    "rows",
    "type",
    "calculation",
    "would",
    "long",
    "expose",
    "analyst",
    "possibly",
    "making",
    "mistake",
    "use",
    "function",
    "would",
    "able",
    "simplify",
    "calculation",
    "one",
    "easy",
    "step",
    "equals",
    "average",
    "open",
    "parenthesis",
    "b1",
    "colon",
    "b160",
    "close",
    "parenthesis",
    "sorting",
    "filtering",
    "data",
    "spreadsheet",
    "useful",
    "first",
    "converting",
    "data",
    "table",
    "many",
    "benefits",
    "convert",
    "data",
    "table",
    "able",
    "filter",
    "calculate",
    "data",
    "efficiently",
    "one",
    "example",
    "ability",
    "easily",
    "calculate",
    "columns",
    "column",
    "msrp",
    "choose",
    "sum",
    "able",
    "quickly",
    "calculate",
    "sum",
    "column",
    "look",
    "data",
    "want",
    "calculate",
    "msrp",
    "total",
    "based",
    "japan",
    "would",
    "filter",
    "country",
    "column",
    "display",
    "japan",
    "column",
    "would",
    "add",
    "values",
    "rows",
    "associated",
    "japan",
    "data",
    "may",
    "work",
    "table",
    "quite",
    "advantages",
    "formatting",
    "data",
    "table",
    "automatic",
    "calculations",
    "even",
    "filtering",
    "column",
    "headings",
    "never",
    "disappear",
    "banded",
    "rows",
    "make",
    "reading",
    "easier",
    "tables",
    "automatically",
    "expand",
    "adding",
    "new",
    "rows",
    "sometimes",
    "data",
    "needs",
    "organized",
    "basic",
    "tabular",
    "format",
    "give",
    "us",
    "creating",
    "pivot",
    "tables",
    "charts",
    "better",
    "way",
    "analyze",
    "display",
    "required",
    "information",
    "excel",
    "option",
    "creating",
    "pivot",
    "table",
    "display",
    "analyze",
    "data",
    "optionally",
    "associated",
    "pivot",
    "chart",
    "example",
    "let",
    "say",
    "want",
    "know",
    "company",
    "ordered",
    "products",
    "month",
    "october",
    "original",
    "table",
    "data",
    "create",
    "pivot",
    "table",
    "organize",
    "analyze",
    "required",
    "data",
    "along",
    "pivot",
    "chart",
    "display",
    "information",
    "adding",
    "month",
    "filter",
    "newly",
    "created",
    "pivot",
    "table",
    "see",
    "results",
    "month",
    "october",
    "table",
    "changes",
    "automatically",
    "updated",
    "pivot",
    "chart",
    "trying",
    "single",
    "specific",
    "information",
    "large",
    "data",
    "set",
    "pivot",
    "table",
    "nice",
    "way",
    "show",
    "information",
    "required",
    "allows",
    "us",
    "quickly",
    "easily",
    "scan",
    "essential",
    "information",
    "pivot",
    "charts",
    "nice",
    "accessory",
    "pivot",
    "tables",
    "allow",
    "us",
    "visually",
    "process",
    "data",
    "cases",
    "let",
    "audience",
    "grasp",
    "information",
    "quicker",
    "advantages",
    "selecting",
    "pivot",
    "table",
    "chart",
    "manipulate",
    "data",
    "without",
    "using",
    "formulas",
    "quickly",
    "summarize",
    "large",
    "data",
    "sets",
    "ability",
    "display",
    "engaging",
    "charts",
    "graphs",
    "video",
    "learned",
    "importance",
    "filtering",
    "sorting",
    "performing",
    "calculations",
    "shaping",
    "data",
    "provide",
    "meaningful",
    "information",
    "learned",
    "tools",
    "begin",
    "analyzing",
    "data",
    "next",
    "video",
    "learn",
    "filtering",
    "sorting",
    "data",
    "music",
    "foreign",
    "learned",
    "use",
    "flash",
    "fill",
    "text",
    "columns",
    "features",
    "excel",
    "help",
    "clean",
    "data",
    "video",
    "discuss",
    "filter",
    "sort",
    "data",
    "enable",
    "us",
    "control",
    "information",
    "displayed",
    "displayed",
    "worksheets",
    "filtering",
    "data",
    "enables",
    "gain",
    "control",
    "parts",
    "data",
    "displayed",
    "given",
    "time",
    "excel",
    "help",
    "visibility",
    "data",
    "narrowing",
    "data",
    "within",
    "specified",
    "criteria",
    "parameters",
    "also",
    "help",
    "searching",
    "specific",
    "pieces",
    "data",
    "filter",
    "data",
    "first",
    "thing",
    "need",
    "turn",
    "filtering",
    "simple",
    "data",
    "tab",
    "click",
    "filter",
    "see",
    "small",
    "filter",
    "icon",
    "next",
    "column",
    "headers",
    "side",
    "note",
    "want",
    "filter",
    "one",
    "columns",
    "select",
    "columns",
    "first",
    "click",
    "filter",
    "another",
    "side",
    "note",
    "format",
    "data",
    "table",
    "columns",
    "automatically",
    "filter",
    "controls",
    "added",
    "column",
    "filter",
    "applied",
    "data",
    "column",
    "order",
    "date",
    "column",
    "filter",
    "years",
    "product",
    "line",
    "filter",
    "different",
    "product",
    "types",
    "customer",
    "name",
    "filter",
    "customer",
    "name",
    "let",
    "first",
    "filter",
    "year",
    "select",
    "orders",
    "2004",
    "deselecting",
    "year",
    "wanted",
    "could",
    "expand",
    "year",
    "filter",
    "months",
    "also",
    "wo",
    "look",
    "status",
    "bar",
    "bottom",
    "worksheet",
    "see",
    "50",
    "114",
    "records",
    "displayed",
    "want",
    "clear",
    "filter",
    "either",
    "click",
    "clear",
    "filter",
    "option",
    "click",
    "select",
    "item",
    "filter",
    "list",
    "let",
    "filter",
    "product",
    "line",
    "column",
    "display",
    "rows",
    "hold",
    "data",
    "sales",
    "classic",
    "cars",
    "clear",
    "filter",
    "lastly",
    "filter",
    "customer",
    "name",
    "column",
    "display",
    "sales",
    "many",
    "gifts",
    "distributors",
    "limited",
    "clear",
    "filter",
    "far",
    "applied",
    "one",
    "filter",
    "time",
    "suppose",
    "want",
    "filter",
    "greater",
    "degree",
    "enabling",
    "filters",
    "together",
    "displaying",
    "sales",
    "classic",
    "cars",
    "mini",
    "gifts",
    "distributors",
    "limited",
    "remember",
    "want",
    "clear",
    "one",
    "filter",
    "click",
    "filter",
    "button",
    "column",
    "header",
    "click",
    "clear",
    "filter",
    "option",
    "want",
    "quickly",
    "clear",
    "filters",
    "use",
    "clear",
    "button",
    "sort",
    "filter",
    "group",
    "data",
    "tab",
    "far",
    "used",
    "commonly",
    "referred",
    "auto",
    "filters",
    "also",
    "use",
    "custom",
    "filters",
    "specify",
    "criteria",
    "apply",
    "filter",
    "text",
    "numbers",
    "example",
    "wanted",
    "see",
    "sales",
    "orders",
    "certain",
    "value",
    "custom",
    "filters",
    "sales",
    "column",
    "let",
    "add",
    "number",
    "filter",
    "displays",
    "sales",
    "two",
    "thousand",
    "dollars",
    "look",
    "status",
    "bar",
    "see",
    "showing",
    "111",
    "114",
    "records",
    "let",
    "clear",
    "filter",
    "filter",
    "way",
    "display",
    "sales",
    "orders",
    "two",
    "thousand",
    "dollars",
    "see",
    "three",
    "orders",
    "two",
    "thousand",
    "dollars",
    "important",
    "note",
    "data",
    "rows",
    "see",
    "removed",
    "still",
    "hidden",
    "view",
    "filters",
    "indicated",
    "row",
    "numbers",
    "see",
    "left",
    "blue",
    "row",
    "numbers",
    "start",
    "69",
    "jump",
    "large",
    "increments",
    "indicating",
    "many",
    "rows",
    "data",
    "data",
    "set",
    "currently",
    "displayed",
    "let",
    "clear",
    "filters",
    "look",
    "column",
    "filter",
    "column",
    "contains",
    "text",
    "see",
    "menu",
    "item",
    "changes",
    "text",
    "filters",
    "instead",
    "number",
    "filters",
    "see",
    "several",
    "text",
    "filter",
    "options",
    "want",
    "turn",
    "filtering",
    "altogether",
    "worksheet",
    "click",
    "filter",
    "button",
    "data",
    "tab",
    "let",
    "take",
    "look",
    "basic",
    "sorting",
    "capabilities",
    "excel",
    "sorting",
    "important",
    "part",
    "role",
    "typical",
    "data",
    "analyst",
    "might",
    "need",
    "organize",
    "data",
    "alphabetically",
    "number",
    "based",
    "data",
    "numerically",
    "data",
    "chronologically",
    "sort",
    "data",
    "using",
    "logical",
    "parameters",
    "makes",
    "easier",
    "conceptualize",
    "visualize",
    "data",
    "meaningful",
    "way",
    "sorting",
    "data",
    "first",
    "thing",
    "need",
    "select",
    "data",
    "sort",
    "example",
    "want",
    "sort",
    "customers",
    "alphabetically",
    "select",
    "cell",
    "customer",
    "named",
    "column",
    "first",
    "either",
    "sort",
    "z",
    "z",
    "want",
    "sort",
    "sales",
    "figures",
    "numerically",
    "select",
    "cell",
    "sales",
    "column",
    "first",
    "either",
    "sort",
    "smallest",
    "largest",
    "largest",
    "smallest",
    "lastly",
    "want",
    "sort",
    "customers",
    "order",
    "dates",
    "chronologically",
    "select",
    "cell",
    "order",
    "date",
    "column",
    "first",
    "sort",
    "oldest",
    "newest",
    "newest",
    "oldest",
    "also",
    "sort",
    "data",
    "one",
    "column",
    "time",
    "simply",
    "select",
    "cell",
    "data",
    "data",
    "tab",
    "click",
    "sort",
    "either",
    "use",
    "sort",
    "column",
    "suggested",
    "use",
    "drop",
    "list",
    "select",
    "different",
    "column",
    "case",
    "choose",
    "order",
    "date",
    "column",
    "first",
    "sorting",
    "criteria",
    "choose",
    "oldest",
    "newest",
    "order",
    "drop",
    "list",
    "add",
    "sorting",
    "level",
    "click",
    "add",
    "level",
    "choose",
    "another",
    "sort",
    "column",
    "buy",
    "list",
    "case",
    "choose",
    "sales",
    "sort",
    "level",
    "choose",
    "largest",
    "smallest",
    "order",
    "list",
    "header",
    "row",
    "data",
    "ensure",
    "select",
    "data",
    "headers",
    "checkbox",
    "click",
    "ok",
    "sort",
    "data",
    "sorted",
    "list",
    "oldest",
    "orders",
    "order",
    "date",
    "first",
    "within",
    "order",
    "date",
    "multiple",
    "instances",
    "order",
    "date",
    "next",
    "sorting",
    "level",
    "lists",
    "data",
    "largest",
    "order",
    "values",
    "first",
    "smallest",
    "order",
    "values",
    "video",
    "learned",
    "use",
    "filter",
    "sort",
    "tools",
    "excel",
    "filter",
    "sort",
    "data",
    "enable",
    "us",
    "control",
    "information",
    "displayed",
    "displayed",
    "worksheets",
    "music",
    "video",
    "listen",
    "several",
    "data",
    "professionals",
    "discuss",
    "importance",
    "filtering",
    "sorting",
    "data",
    "important",
    "filter",
    "sort",
    "data",
    "filtering",
    "sorting",
    "important",
    "part",
    "analysis",
    "visualization",
    "experience",
    "allows",
    "create",
    "one",
    "single",
    "view",
    "data",
    "provide",
    "function",
    "people",
    "able",
    "analysis",
    "clarify",
    "mean",
    "sorting",
    "tends",
    "highest",
    "lowest",
    "alphabetical",
    "cases",
    "may",
    "want",
    "create",
    "custom",
    "sorting",
    "put",
    "particular",
    "product",
    "offering",
    "start",
    "rest",
    "falling",
    "behind",
    "may",
    "want",
    "group",
    "start",
    "show",
    "direct",
    "competitors",
    "versus",
    "others",
    "love",
    "love",
    "love",
    "filter",
    "sort",
    "feature",
    "microsoft",
    "excel",
    "allows",
    "get",
    "heart",
    "data",
    "drill",
    "see",
    "example",
    "much",
    "revenue",
    "client",
    "specific",
    "time",
    "frame",
    "much",
    "money",
    "made",
    "specific",
    "time",
    "frame",
    "without",
    "looking",
    "lot",
    "rows",
    "whole",
    "lot",
    "information",
    "filtering",
    "sorting",
    "really",
    "allows",
    "narrow",
    "get",
    "specific",
    "get",
    "answers",
    "looking",
    "get",
    "loads",
    "data",
    "necessarily",
    "need",
    "talk",
    "filtering",
    "talk",
    "mean",
    "particular",
    "value",
    "want",
    "see",
    "data",
    "specified",
    "example",
    "bar",
    "chart",
    "showing",
    "sales",
    "months",
    "want",
    "see",
    "particular",
    "geography",
    "particular",
    "product",
    "line",
    "could",
    "available",
    "allow",
    "filter",
    "sales",
    "would",
    "specific",
    "one",
    "geography",
    "one",
    "product",
    "line",
    "music",
    "thank",
    "foreign",
    "use",
    "filter",
    "sort",
    "tools",
    "excel",
    "filter",
    "sort",
    "data",
    "enable",
    "us",
    "control",
    "information",
    "displayed",
    "displayed",
    "worksheets",
    "video",
    "discuss",
    "use",
    "common",
    "functions",
    "data",
    "analyst",
    "might",
    "use",
    "namely",
    "ifs",
    "countif",
    "sum",
    "first",
    "let",
    "look",
    "use",
    "function",
    "function",
    "one",
    "used",
    "logical",
    "functions",
    "excel",
    "function",
    "enables",
    "logically",
    "compare",
    "value",
    "criteria",
    "set",
    "function",
    "return",
    "result",
    "based",
    "whether",
    "result",
    "logical",
    "comparison",
    "true",
    "false",
    "values",
    "text",
    "values",
    "numeric",
    "values",
    "function",
    "essentially",
    "says",
    "something",
    "true",
    "return",
    "value",
    "something",
    "true",
    "return",
    "different",
    "value",
    "something",
    "else",
    "example",
    "vehicle",
    "toy",
    "sales",
    "worksheet",
    "wanted",
    "column",
    "recorded",
    "whether",
    "order",
    "shipped",
    "could",
    "add",
    "new",
    "column",
    "right",
    "existing",
    "column",
    "let",
    "call",
    "shipped",
    "enter",
    "formula",
    "scene",
    "cell",
    "h2",
    "formula",
    "saying",
    "text",
    "g2",
    "says",
    "shipped",
    "return",
    "yes",
    "return",
    "use",
    "fill",
    "handle",
    "copy",
    "formula",
    "column",
    "see",
    "cells",
    "say",
    "yes",
    "order",
    "shipped",
    "one",
    "reason",
    "another",
    "could",
    "also",
    "use",
    "function",
    "emphasize",
    "size",
    "order",
    "add",
    "new",
    "column",
    "right",
    "sales",
    "name",
    "3k",
    "plus",
    "minus",
    "enter",
    "formula",
    "seen",
    "cell",
    "f2",
    "formula",
    "saying",
    "order",
    "three",
    "thousand",
    "return",
    "text",
    "3k",
    "return",
    "text",
    "3k",
    "copy",
    "formula",
    "column",
    "ideal",
    "world",
    "would",
    "use",
    "function",
    "apply",
    "one",
    "two",
    "conditions",
    "may",
    "scenarios",
    "would",
    "want",
    "apply",
    "multiple",
    "conditions",
    "cases",
    "use",
    "nesting",
    "capabilities",
    "functions",
    "bring",
    "together",
    "several",
    "statements",
    "one",
    "formula",
    "called",
    "nested",
    "functions",
    "example",
    "add",
    "another",
    "column",
    "order",
    "size",
    "enter",
    "formula",
    "seen",
    "cell",
    "f2",
    "see",
    "formula",
    "contains",
    "multiple",
    "functions",
    "one",
    "needed",
    "condition",
    "one",
    "large",
    "one",
    "medium",
    "one",
    "small",
    "requires",
    "three",
    "sets",
    "parentheses",
    "relatively",
    "long",
    "complex",
    "formula",
    "work",
    "copy",
    "formula",
    "column",
    "even",
    "though",
    "excel",
    "technically",
    "supports",
    "nesting",
    "64",
    "different",
    "functions",
    "formula",
    "recommended",
    "best",
    "practice",
    "multiple",
    "functions",
    "singular",
    "formula",
    "become",
    "extremely",
    "challenging",
    "manage",
    "example",
    "suppose",
    "come",
    "across",
    "formula",
    "like",
    "used",
    "time",
    "even",
    "worse",
    "created",
    "someone",
    "else",
    "could",
    "quite",
    "difficult",
    "work",
    "used",
    "also",
    "conditions",
    "increase",
    "need",
    "add",
    "conditions",
    "already",
    "quite",
    "complex",
    "long",
    "formula",
    "complicate",
    "matters",
    "resolve",
    "issue",
    "new",
    "function",
    "developed",
    "called",
    "ifs",
    "ifs",
    "function",
    "supported",
    "excel",
    "2019",
    "excel",
    "microsoft",
    "365",
    "excel",
    "web",
    "name",
    "suggests",
    "function",
    "replace",
    "multiple",
    "nested",
    "functions",
    "used",
    "single",
    "formula",
    "simplify",
    "matters",
    "add",
    "column",
    "order",
    "size",
    "time",
    "use",
    "ifs",
    "function",
    "instead",
    "see",
    "cell",
    "g2",
    "formula",
    "one",
    "set",
    "parentheses",
    "instead",
    "three",
    "uses",
    "one",
    "function",
    "instead",
    "three",
    "let",
    "copy",
    "formula",
    "column",
    "two",
    "let",
    "look",
    "another",
    "example",
    "using",
    "function",
    "combine",
    "conditional",
    "formatting",
    "switch",
    "car",
    "sales",
    "worksheet",
    "add",
    "new",
    "column",
    "right",
    "year",
    "resale",
    "value",
    "column",
    "call",
    "retention",
    "percent",
    "enter",
    "formula",
    "scene",
    "cell",
    "g2",
    "divide",
    "year",
    "resale",
    "value",
    "original",
    "retail",
    "price",
    "need",
    "format",
    "percentage",
    "copy",
    "column",
    "next",
    "add",
    "column",
    "highlight",
    "retention",
    "value",
    "car",
    "formula",
    "add",
    "cell",
    "h2",
    "uses",
    "function",
    "state",
    "percentage",
    "previous",
    "column",
    "greater",
    "69",
    "percent",
    "mark",
    "good",
    "mark",
    "poor",
    "copy",
    "formula",
    "column",
    "could",
    "also",
    "use",
    "conditional",
    "formatting",
    "highlight",
    "retention",
    "value",
    "percentages",
    "even",
    "select",
    "h2",
    "home",
    "tab",
    "click",
    "conditional",
    "formatting",
    "make",
    "new",
    "rule",
    "condition",
    "rule",
    "format",
    "cells",
    "contain",
    "specific",
    "text",
    "value",
    "value",
    "word",
    "good",
    "match",
    "condition",
    "format",
    "dark",
    "green",
    "font",
    "fill",
    "cell",
    "pale",
    "green",
    "let",
    "copy",
    "conditional",
    "formatting",
    "rest",
    "column",
    "see",
    "cells",
    "contain",
    "word",
    "good",
    "formatted",
    "defined",
    "cells",
    "containing",
    "word",
    "poor",
    "let",
    "add",
    "another",
    "conditional",
    "format",
    "rule",
    "time",
    "select",
    "manage",
    "rules",
    "going",
    "add",
    "another",
    "rule",
    "existing",
    "rule",
    "new",
    "rule",
    "previous",
    "one",
    "exception",
    "looking",
    "match",
    "word",
    "poor",
    "instead",
    "formatting",
    "matching",
    "cells",
    "red",
    "text",
    "pink",
    "background",
    "fill",
    "copy",
    "column",
    "cells",
    "contain",
    "word",
    "poor",
    "formatted",
    "red",
    "text",
    "pink",
    "cell",
    "fill",
    "let",
    "quick",
    "look",
    "use",
    "countif",
    "function",
    "countif",
    "one",
    "statistical",
    "functions",
    "provided",
    "excel",
    "use",
    "count",
    "number",
    "cells",
    "meet",
    "certain",
    "criterion",
    "number",
    "instances",
    "employee",
    "name",
    "appears",
    "list",
    "sales",
    "invoices",
    "number",
    "occasions",
    "particular",
    "part",
    "number",
    "appears",
    "list",
    "purchase",
    "orders",
    "let",
    "switch",
    "vehicle",
    "toy",
    "sales",
    "worksheet",
    "suppose",
    "want",
    "find",
    "many",
    "sales",
    "orders",
    "list",
    "went",
    "customers",
    "based",
    "united",
    "kingdom",
    "enter",
    "formula",
    "see",
    "cell",
    "ad7",
    "note",
    "using",
    "text",
    "criterion",
    "enclose",
    "text",
    "quotation",
    "marks",
    "six",
    "sales",
    "orders",
    "uk",
    "wanted",
    "discover",
    "thing",
    "french",
    "customers",
    "would",
    "edit",
    "existing",
    "formula",
    "copy",
    "edit",
    "see",
    "14",
    "orders",
    "french",
    "customers",
    "notice",
    "time",
    "text",
    "entered",
    "lower",
    "case",
    "still",
    "works",
    "names",
    "function",
    "case",
    "sensitive",
    "let",
    "united",
    "states",
    "customers",
    "41",
    "orders",
    "customers",
    "based",
    "states",
    "also",
    "newer",
    "function",
    "called",
    "countifs",
    "applies",
    "criterion",
    "cells",
    "across",
    "multiple",
    "ranges",
    "count",
    "number",
    "occasions",
    "criteria",
    "met",
    "removes",
    "need",
    "use",
    "multiple",
    "countif",
    "functions",
    "long",
    "complex",
    "single",
    "formula",
    "countifs",
    "function",
    "supported",
    "excel",
    "2019",
    "excel",
    "microsoft",
    "365",
    "excel",
    "web",
    "let",
    "take",
    "look",
    "use",
    "sum",
    "function",
    "commonly",
    "used",
    "mathematical",
    "function",
    "excel",
    "use",
    "sum",
    "function",
    "sum",
    "values",
    "within",
    "specified",
    "range",
    "meet",
    "specified",
    "criteria",
    "example",
    "might",
    "want",
    "add",
    "salaries",
    "specified",
    "salary",
    "level",
    "might",
    "want",
    "find",
    "total",
    "sales",
    "particular",
    "product",
    "category",
    "enter",
    "formula",
    "scene",
    "cell",
    "ad10",
    "formula",
    "add",
    "sales",
    "orders",
    "total",
    "three",
    "thousand",
    "dollars",
    "notice",
    "used",
    "arithmetic",
    "operator",
    "greater",
    "operator",
    "must",
    "enclose",
    "criterion",
    "quotes",
    "specify",
    "criterion",
    "number",
    "enclose",
    "quotes",
    "total",
    "sum",
    "orders",
    "three",
    "thousand",
    "dollars",
    "almost",
    "four",
    "hundred",
    "seventy",
    "thousand",
    "dollars",
    "also",
    "use",
    "wild",
    "cards",
    "question",
    "mark",
    "asterisk",
    "searching",
    "partial",
    "matches",
    "also",
    "specify",
    "extract",
    "values",
    "different",
    "column",
    "column",
    "specified",
    "criteria",
    "example",
    "enter",
    "formula",
    "see",
    "cell",
    "ad",
    "13",
    "sum",
    "car",
    "sales",
    "column",
    "e",
    "products",
    "product",
    "line",
    "column",
    "end",
    "cars",
    "also",
    "newer",
    "function",
    "called",
    "sumifs",
    "use",
    "cells",
    "based",
    "multiple",
    "criteria",
    "removes",
    "need",
    "use",
    "multiple",
    "sum",
    "functions",
    "long",
    "complex",
    "single",
    "formula",
    "sumifs",
    "function",
    "supported",
    "excel",
    "2019",
    "excel",
    "microsoft",
    "365",
    "excel",
    "web",
    "video",
    "learned",
    "use",
    "ifs",
    "countif",
    "functions",
    "next",
    "video",
    "look",
    "use",
    "vlookup",
    "hlookup",
    "reference",
    "functions",
    "foreign",
    "music",
    "learned",
    "use",
    "ifs",
    "count",
    "functions",
    "video",
    "look",
    "use",
    "vlookup",
    "hlookup",
    "reference",
    "functions",
    "vlookup",
    "one",
    "commonly",
    "used",
    "reference",
    "type",
    "functions",
    "excel",
    "enables",
    "find",
    "data",
    "referenced",
    "lookup",
    "table",
    "stands",
    "vertical",
    "lookup",
    "therefore",
    "useful",
    "tool",
    "want",
    "find",
    "something",
    "table",
    "range",
    "row",
    "shortly",
    "look",
    "hlookup",
    "stands",
    "horizontal",
    "lookup",
    "looks",
    "data",
    "column",
    "instead",
    "vlookup",
    "works",
    "using",
    "common",
    "shared",
    "key",
    "source",
    "data",
    "lookup",
    "data",
    "lookup",
    "table",
    "typical",
    "lookup",
    "formula",
    "would",
    "look",
    "like",
    "equal",
    "sign",
    "vlookup",
    "open",
    "parentheses",
    "b3",
    "comma",
    "a2",
    "colon",
    "b12",
    "comma",
    "2",
    "comma",
    "false",
    "close",
    "parentheses",
    "b3",
    "lookup",
    "value",
    "value",
    "word",
    "looking",
    "a2",
    "colon",
    "b12",
    "lookup",
    "table",
    "range",
    "table",
    "array",
    "range",
    "cells",
    "contains",
    "lookup",
    "value",
    "formula",
    "excel",
    "references",
    "table",
    "underscore",
    "array",
    "lookup",
    "table",
    "worksheet",
    "another",
    "separate",
    "worksheet",
    "two",
    "lookup",
    "column",
    "number",
    "number",
    "column",
    "lookup",
    "table",
    "contains",
    "value",
    "looking",
    "formula",
    "excel",
    "references",
    "call",
    "underscore",
    "index",
    "score",
    "num",
    "false",
    "optional",
    "parameter",
    "determines",
    "whether",
    "match",
    "found",
    "exact",
    "denoted",
    "false",
    "approximate",
    "denoted",
    "true",
    "formula",
    "excel",
    "references",
    "open",
    "square",
    "bracket",
    "range",
    "underscore",
    "lookup",
    "close",
    "square",
    "bracket",
    "square",
    "brackets",
    "round",
    "argument",
    "formula",
    "signifies",
    "optional",
    "argument",
    "whereas",
    "others",
    "required",
    "arguments",
    "vlookup",
    "formula",
    "specify",
    "optional",
    "false",
    "true",
    "parameter",
    "formula",
    "default",
    "false",
    "exact",
    "match",
    "required",
    "also",
    "use",
    "number",
    "zero",
    "instead",
    "false",
    "number",
    "one",
    "instead",
    "true",
    "okay",
    "let",
    "see",
    "vlookup",
    "function",
    "action",
    "car",
    "sales",
    "worksheet",
    "suppose",
    "wanted",
    "quick",
    "price",
    "list",
    "favorite",
    "cars",
    "first",
    "thing",
    "need",
    "put",
    "column",
    "containing",
    "value",
    "want",
    "search",
    "leftmost",
    "column",
    "vlookup",
    "requires",
    "delete",
    "original",
    "column",
    "enter",
    "formula",
    "scene",
    "cell",
    "v16",
    "looking",
    "word",
    "corvette",
    "table",
    "array",
    "cell",
    "a2",
    "g156",
    "looks",
    "value",
    "fifth",
    "column",
    "case",
    "price",
    "column",
    "matches",
    "row",
    "containing",
    "corvette",
    "returns",
    "exact",
    "value",
    "forty",
    "five",
    "thousand",
    "seven",
    "hundred",
    "five",
    "dollars",
    "note",
    "example",
    "using",
    "part",
    "existing",
    "data",
    "table",
    "lookup",
    "table",
    "table",
    "array",
    "let",
    "format",
    "currency",
    "format",
    "zero",
    "decimal",
    "places",
    "fact",
    "rather",
    "use",
    "reference",
    "a25",
    "formula",
    "easier",
    "use",
    "reference",
    "word",
    "corvette",
    "mini",
    "table",
    "worksheet",
    "list",
    "favorite",
    "cars",
    "v5",
    "formula",
    "still",
    "works",
    "let",
    "copy",
    "formula",
    "favorite",
    "car",
    "table",
    "worksheet",
    "problem",
    "copied",
    "formula",
    "cell",
    "references",
    "changed",
    "happened",
    "learned",
    "earlier",
    "course",
    "default",
    "state",
    "cell",
    "references",
    "relative",
    "want",
    "absolute",
    "case",
    "let",
    "undo",
    "copy",
    "operation",
    "make",
    "cell",
    "references",
    "absolute",
    "need",
    "add",
    "dollar",
    "symbols",
    "cell",
    "references",
    "formula",
    "either",
    "done",
    "manually",
    "put",
    "cursor",
    "cell",
    "reference",
    "turn",
    "formula",
    "press",
    "f4",
    "time",
    "automatically",
    "add",
    "dollar",
    "symbols",
    "let",
    "try",
    "copy",
    "formula",
    "time",
    "works",
    "use",
    "fill",
    "handle",
    "cell",
    "w5",
    "copy",
    "rest",
    "cars",
    "work",
    "fact",
    "end",
    "result",
    "every",
    "cell",
    "one",
    "referencing",
    "cells",
    "lookup",
    "value",
    "used",
    "absolute",
    "reference",
    "need",
    "modify",
    "formula",
    "remove",
    "absolute",
    "reference",
    "row",
    "parameter",
    "lookup",
    "value",
    "part",
    "formula",
    "removing",
    "dollar",
    "symbol",
    "cell",
    "w5",
    "change",
    "dollar",
    "v",
    "dollar",
    "five",
    "dollar",
    "v5",
    "comma",
    "drag",
    "fill",
    "handle",
    "copy",
    "formula",
    "correctly",
    "prices",
    "changed",
    "reflect",
    "correct",
    "retail",
    "price",
    "lastly",
    "show",
    "two",
    "tables",
    "connected",
    "vlookup",
    "function",
    "change",
    "retail",
    "price",
    "chevrolet",
    "corvette",
    "main",
    "data",
    "table",
    "cell",
    "e25",
    "price",
    "also",
    "change",
    "favorite",
    "car",
    "price",
    "list",
    "let",
    "take",
    "look",
    "hlookup",
    "function",
    "mentioned",
    "earlier",
    "thing",
    "works",
    "virtually",
    "way",
    "vlookup",
    "function",
    "looks",
    "data",
    "columns",
    "rather",
    "rows",
    "lookup",
    "looks",
    "word",
    "value",
    "top",
    "row",
    "table",
    "returns",
    "value",
    "column",
    "row",
    "specified",
    "table",
    "array",
    "therefore",
    "would",
    "use",
    "hlookup",
    "comparison",
    "values",
    "situated",
    "row",
    "along",
    "top",
    "data",
    "table",
    "contrast",
    "would",
    "use",
    "vlookup",
    "comparison",
    "values",
    "located",
    "column",
    "left",
    "data",
    "want",
    "find",
    "previous",
    "task",
    "two",
    "functions",
    "vlookup",
    "used",
    "far",
    "frequently",
    "hlookup",
    "nature",
    "data",
    "tables",
    "syntax",
    "hlookup",
    "identical",
    "vlookup",
    "except",
    "specify",
    "row",
    "index",
    "number",
    "referenced",
    "formula",
    "excel",
    "row",
    "underscore",
    "index",
    "underscore",
    "num",
    "indicates",
    "number",
    "row",
    "lookup",
    "table",
    "contains",
    "value",
    "looking",
    "let",
    "create",
    "small",
    "lookup",
    "table",
    "right",
    "hand",
    "side",
    "main",
    "data",
    "table",
    "columns",
    "hidden",
    "worksheet",
    "make",
    "viewing",
    "little",
    "easier",
    "got",
    "low",
    "hp",
    "medium",
    "hp",
    "high",
    "hp",
    "top",
    "row",
    "lookup",
    "table",
    "next",
    "add",
    "winding",
    "symbols",
    "ratings",
    "three",
    "horsepower",
    "levels",
    "one",
    "sad",
    "face",
    "low",
    "horsepower",
    "rating",
    "two",
    "neutral",
    "faces",
    "medium",
    "rating",
    "three",
    "happy",
    "faces",
    "high",
    "horsepower",
    "rating",
    "let",
    "add",
    "new",
    "column",
    "right",
    "hp",
    "level",
    "column",
    "call",
    "hp",
    "rating",
    "cell",
    "l2",
    "enter",
    "hlookup",
    "function",
    "function",
    "look",
    "value",
    "cell",
    "k2",
    "case",
    "medium",
    "hp",
    "look",
    "cell",
    "range",
    "21",
    "aa22",
    "little",
    "lookup",
    "table",
    "return",
    "answer",
    "finds",
    "row",
    "2",
    "table",
    "medium",
    "hp",
    "use",
    "exact",
    "value",
    "note",
    "used",
    "absolute",
    "references",
    "formula",
    "notice",
    "returned",
    "text",
    "kk",
    "need",
    "format",
    "cell",
    "using",
    "wingdings",
    "font",
    "fill",
    "handle",
    "whole",
    "column",
    "shows",
    "hp",
    "rating",
    "symbols",
    "relevant",
    "row",
    "hp",
    "level",
    "value",
    "done",
    "although",
    "vlookup",
    "hlookup",
    "regularly",
    "still",
    "used",
    "de",
    "facto",
    "functions",
    "lookup",
    "references",
    "excel",
    "newer",
    "function",
    "called",
    "xlookup",
    "version",
    "supported",
    "excel",
    "desktop",
    "versions",
    "excel",
    "microsoft",
    "365",
    "excel",
    "web",
    "well",
    "excel",
    "ipad",
    "iphone",
    "excel",
    "android",
    "tablets",
    "phones",
    "xlookup",
    "improved",
    "combined",
    "version",
    "vlookup",
    "hlookup",
    "together",
    "work",
    "direction",
    "vertically",
    "horizontally",
    "also",
    "uses",
    "separate",
    "lookup",
    "array",
    "return",
    "array",
    "values",
    "instead",
    "single",
    "table",
    "array",
    "column",
    "row",
    "index",
    "number",
    "video",
    "learned",
    "use",
    "vlookup",
    "hlookup",
    "functions",
    "excel",
    "find",
    "connect",
    "data",
    "referenced",
    "vertical",
    "horizontal",
    "lookup",
    "tables",
    "videos",
    "coming",
    "next",
    "lesson",
    "start",
    "look",
    "using",
    "pivot",
    "tables",
    "excel",
    "music",
    "learned",
    "use",
    "vlookup",
    "hlookup",
    "functions",
    "video",
    "look",
    "create",
    "use",
    "pivot",
    "tables",
    "excel",
    "first",
    "look",
    "format",
    "data",
    "table",
    "create",
    "pivot",
    "tables",
    "use",
    "fields",
    "pivot",
    "table",
    "analyze",
    "data",
    "lastly",
    "see",
    "perform",
    "calculations",
    "pivot",
    "table",
    "worksheet",
    "full",
    "informational",
    "data",
    "well",
    "really",
    "get",
    "use",
    "need",
    "analyze",
    "different",
    "perspectives",
    "find",
    "answers",
    "questions",
    "related",
    "data",
    "already",
    "used",
    "features",
    "filters",
    "formulas",
    "draw",
    "mathematical",
    "logical",
    "conclusions",
    "data",
    "questions",
    "answered",
    "easily",
    "using",
    "filters",
    "formulas",
    "alone",
    "order",
    "obtain",
    "usable",
    "presentable",
    "insights",
    "data",
    "need",
    "something",
    "else",
    "something",
    "else",
    "pivot",
    "tables",
    "pivot",
    "tables",
    "provide",
    "simple",
    "quick",
    "way",
    "spreadsheets",
    "summarize",
    "analyze",
    "data",
    "observe",
    "trends",
    "patterns",
    "data",
    "make",
    "comparisons",
    "data",
    "pivot",
    "table",
    "dynamic",
    "change",
    "add",
    "data",
    "original",
    "data",
    "set",
    "pivot",
    "table",
    "based",
    "analysis",
    "summary",
    "information",
    "changes",
    "data",
    "analyst",
    "use",
    "pivot",
    "tables",
    "draw",
    "useful",
    "relevant",
    "conclusions",
    "create",
    "insights",
    "organization",
    "data",
    "order",
    "present",
    "insights",
    "interested",
    "parties",
    "within",
    "company",
    "start",
    "create",
    "pivot",
    "table",
    "excel",
    "helpful",
    "first",
    "format",
    "data",
    "table",
    "reason",
    "make",
    "organized",
    "defined",
    "add",
    "table",
    "styles",
    "data",
    "primarily",
    "makes",
    "lot",
    "easier",
    "adding",
    "records",
    "data",
    "set",
    "car",
    "sales",
    "worksheet",
    "let",
    "first",
    "select",
    "cell",
    "within",
    "data",
    "home",
    "tab",
    "styles",
    "group",
    "choose",
    "format",
    "table",
    "choose",
    "style",
    "gallery",
    "note",
    "excel",
    "automatically",
    "knows",
    "boundaries",
    "data",
    "range",
    "change",
    "need",
    "ensure",
    "select",
    "table",
    "headers",
    "indeed",
    "click",
    "ok",
    "data",
    "formatted",
    "table",
    "note",
    "filter",
    "drop",
    "downs",
    "top",
    "column",
    "automatically",
    "added",
    "format",
    "table",
    "scroll",
    "bottom",
    "table",
    "start",
    "adding",
    "another",
    "row",
    "data",
    "another",
    "vehicle",
    "click",
    "tab",
    "enter",
    "note",
    "automatically",
    "formatted",
    "included",
    "part",
    "table",
    "okay",
    "let",
    "see",
    "create",
    "basic",
    "pivot",
    "table",
    "use",
    "fields",
    "arrange",
    "data",
    "pivot",
    "table",
    "things",
    "use",
    "checklist",
    "ensure",
    "data",
    "fit",
    "state",
    "make",
    "pivot",
    "table",
    "format",
    "data",
    "table",
    "best",
    "results",
    "ensure",
    "column",
    "headings",
    "correct",
    "one",
    "header",
    "row",
    "column",
    "headings",
    "become",
    "field",
    "names",
    "pivot",
    "table",
    "remove",
    "blank",
    "rows",
    "columns",
    "try",
    "eliminate",
    "blank",
    "cells",
    "also",
    "ensure",
    "value",
    "fields",
    "formatted",
    "numbers",
    "text",
    "ensure",
    "date",
    "fields",
    "formatted",
    "dates",
    "text",
    "worksheet",
    "select",
    "cell",
    "table",
    "insert",
    "tab",
    "click",
    "pivot",
    "table",
    "note",
    "selected",
    "table",
    "range",
    "box",
    "table",
    "name",
    "table",
    "1",
    "already",
    "entered",
    "us",
    "formatted",
    "data",
    "table",
    "would",
    "specify",
    "cell",
    "range",
    "instead",
    "need",
    "decide",
    "whether",
    "want",
    "create",
    "pivot",
    "table",
    "separate",
    "new",
    "blank",
    "worksheet",
    "worksheet",
    "new",
    "worksheet",
    "default",
    "commonly",
    "used",
    "option",
    "new",
    "blank",
    "worksheet",
    "opens",
    "displaying",
    "basic",
    "pivot",
    "table",
    "instructions",
    "graphic",
    "left",
    "worksheet",
    "pivot",
    "table",
    "fields",
    "pane",
    "right",
    "rename",
    "worksheet",
    "pivot",
    "table",
    "wish",
    "build",
    "pivot",
    "table",
    "report",
    "need",
    "add",
    "fields",
    "top",
    "pivot",
    "table",
    "fields",
    "pane",
    "one",
    "sections",
    "bottom",
    "part",
    "pane",
    "example",
    "want",
    "find",
    "total",
    "sales",
    "model",
    "car",
    "let",
    "drag",
    "manufacturer",
    "field",
    "rows",
    "section",
    "report",
    "drag",
    "model",
    "field",
    "really",
    "way",
    "want",
    "look",
    "drag",
    "manufacturer",
    "field",
    "appear",
    "top",
    "rows",
    "section",
    "model",
    "makes",
    "sense",
    "data",
    "next",
    "add",
    "price",
    "field",
    "column",
    "section",
    "really",
    "way",
    "want",
    "view",
    "data",
    "drag",
    "price",
    "values",
    "section",
    "instead",
    "makes",
    "lot",
    "sense",
    "looks",
    "lot",
    "better",
    "next",
    "add",
    "unit",
    "sales",
    "field",
    "values",
    "see",
    "individual",
    "price",
    "model",
    "number",
    "unit",
    "sales",
    "model",
    "let",
    "add",
    "vehicle",
    "type",
    "field",
    "columns",
    "seem",
    "useful",
    "let",
    "remove",
    "field",
    "two",
    "ways",
    "either",
    "using",
    "drop",
    "menu",
    "undo",
    "also",
    "simply",
    "dragging",
    "field",
    "columns",
    "section",
    "either",
    "left",
    "worksheet",
    "top",
    "fields",
    "list",
    "let",
    "look",
    "perform",
    "simple",
    "calculation",
    "pivot",
    "table",
    "look",
    "sum",
    "price",
    "column",
    "pivot",
    "table",
    "see",
    "figures",
    "formatted",
    "general",
    "first",
    "let",
    "change",
    "format",
    "figures",
    "currency",
    "done",
    "modifying",
    "value",
    "field",
    "settings",
    "field",
    "relevant",
    "section",
    "pivot",
    "table",
    "fields",
    "pane",
    "format",
    "field",
    "us",
    "dollars",
    "show",
    "decimal",
    "places",
    "next",
    "add",
    "calculated",
    "field",
    "pivot",
    "table",
    "analyze",
    "tab",
    "using",
    "fields",
    "items",
    "sets",
    "button",
    "want",
    "field",
    "calculate",
    "total",
    "sales",
    "model",
    "multiplying",
    "price",
    "number",
    "unit",
    "sales",
    "create",
    "add",
    "formula",
    "gets",
    "added",
    "pivot",
    "table",
    "fields",
    "pane",
    "field",
    "called",
    "total",
    "model",
    "sales",
    "change",
    "format",
    "make",
    "us",
    "dollars",
    "new",
    "column",
    "called",
    "sum",
    "total",
    "model",
    "sales",
    "appeared",
    "pivot",
    "table",
    "worksheet",
    "row",
    "five",
    "see",
    "360",
    "million",
    "dollars",
    "sales",
    "acura",
    "integra",
    "model",
    "row",
    "7",
    "see",
    "billion",
    "dollars",
    "sales",
    "acura",
    "tl",
    "model",
    "video",
    "learned",
    "format",
    "data",
    "table",
    "create",
    "pivot",
    "table",
    "use",
    "fields",
    "analyze",
    "data",
    "pivot",
    "table",
    "perform",
    "calculations",
    "using",
    "pivot",
    "table",
    "data",
    "next",
    "video",
    "look",
    "features",
    "pivot",
    "tables",
    "foreign",
    "music",
    "listen",
    "several",
    "data",
    "professionals",
    "discuss",
    "experience",
    "using",
    "pivot",
    "tables",
    "analyze",
    "data",
    "experiences",
    "using",
    "pivot",
    "tables",
    "analyze",
    "data",
    "experience",
    "using",
    "pivot",
    "tables",
    "excel",
    "extensive",
    "use",
    "time",
    "thing",
    "keep",
    "mind",
    "sum",
    "average",
    "count",
    "easily",
    "set",
    "group",
    "people",
    "choose",
    "parameters",
    "top",
    "great",
    "got",
    "couple",
    "thousand",
    "records",
    "way",
    "whatever",
    "excel",
    "handle",
    "pivot",
    "table",
    "real",
    "simple",
    "way",
    "manipulation",
    "without",
    "actual",
    "querying",
    "development",
    "language",
    "huge",
    "sales",
    "data",
    "need",
    "analyze",
    "kpis",
    "including",
    "gross",
    "merchandise",
    "volume",
    "take",
    "rates",
    "however",
    "generate",
    "limited",
    "insights",
    "stay",
    "high",
    "level",
    "payment",
    "tables",
    "able",
    "group",
    "data",
    "terms",
    "countries",
    "type",
    "stores",
    "type",
    "products",
    "enable",
    "view",
    "data",
    "analyze",
    "key",
    "kpis",
    "different",
    "levels",
    "granularity",
    "use",
    "pivot",
    "tables",
    "use",
    "pivot",
    "tables",
    "firm",
    "especially",
    "audits",
    "assist",
    "us",
    "help",
    "us",
    "kind",
    "drill",
    "data",
    "pivot",
    "table",
    "helps",
    "take",
    "large",
    "set",
    "data",
    "water",
    "something",
    "meaningful",
    "case",
    "audits",
    "client",
    "might",
    "know",
    "five",
    "hundred",
    "thousand",
    "dollars",
    "worth",
    "maintenance",
    "repair",
    "bills",
    "made",
    "300",
    "invoices",
    "well",
    "want",
    "see",
    "every",
    "invoice",
    "every",
    "dollar",
    "want",
    "see",
    "high",
    "dollar",
    "invoices",
    "going",
    "use",
    "pivot",
    "table",
    "narrow",
    "invoices",
    "actually",
    "going",
    "highest",
    "level",
    "impact",
    "financial",
    "statement",
    "say",
    "excel",
    "pivot",
    "tables",
    "great",
    "way",
    "understand",
    "data",
    "quickly",
    "effectively",
    "able",
    "open",
    "excel",
    "sheet",
    "put",
    "pivot",
    "table",
    "drag",
    "drop",
    "things",
    "get",
    "sense",
    "numbers",
    "look",
    "like",
    "values",
    "really",
    "help",
    "get",
    "good",
    "sense",
    "data",
    "order",
    "start",
    "build",
    "something",
    "little",
    "bit",
    "robust",
    "able",
    "understand",
    "fields",
    "mean",
    "look",
    "like",
    "things",
    "help",
    "start",
    "project",
    "looking",
    "analysis",
    "uh",
    "pivot",
    "tables",
    "incredibly",
    "useful",
    "get",
    "quick",
    "view",
    "data",
    "look",
    "multiple",
    "levels",
    "data",
    "quick",
    "clean",
    "way",
    "easy",
    "create",
    "pivot",
    "table",
    "set",
    "raw",
    "data",
    "aggregate",
    "level",
    "interest",
    "country",
    "know",
    "country",
    "user",
    "um",
    "year",
    "user",
    "joined",
    "uh",
    "anything",
    "else",
    "something",
    "related",
    "time",
    "um",
    "really",
    "good",
    "quickly",
    "uh",
    "seeing",
    "understanding",
    "summaries",
    "hidden",
    "within",
    "data",
    "music",
    "foreign",
    "create",
    "use",
    "pivot",
    "tables",
    "excel",
    "video",
    "look",
    "features",
    "use",
    "pivot",
    "tables",
    "including",
    "recommended",
    "pivot",
    "tables",
    "filters",
    "slicers",
    "timelines",
    "first",
    "let",
    "look",
    "recommended",
    "pivot",
    "tables",
    "exactly",
    "feature",
    "really",
    "list",
    "suggested",
    "different",
    "combinations",
    "data",
    "could",
    "used",
    "creating",
    "pivot",
    "table",
    "recommendations",
    "based",
    "data",
    "select",
    "worksheet",
    "great",
    "way",
    "get",
    "started",
    "creating",
    "pivot",
    "tables",
    "much",
    "experience",
    "yet",
    "example",
    "vehicle",
    "toy",
    "sales",
    "worksheet",
    "select",
    "column",
    "b",
    "contains",
    "data",
    "quantity",
    "items",
    "ordered",
    "choose",
    "recommended",
    "pivot",
    "tables",
    "insert",
    "tab",
    "presented",
    "list",
    "potential",
    "data",
    "combinations",
    "related",
    "order",
    "quantity",
    "information",
    "however",
    "select",
    "column",
    "f",
    "contains",
    "order",
    "size",
    "information",
    "recommended",
    "pivot",
    "table",
    "list",
    "changes",
    "reflect",
    "data",
    "select",
    "column",
    "e",
    "contains",
    "sales",
    "information",
    "pivot",
    "tables",
    "recommended",
    "related",
    "sales",
    "data",
    "let",
    "select",
    "third",
    "one",
    "sum",
    "sales",
    "territory",
    "sounds",
    "like",
    "something",
    "could",
    "get",
    "useful",
    "insight",
    "presenting",
    "pivot",
    "table",
    "note",
    "new",
    "worksheet",
    "opened",
    "containing",
    "recommended",
    "pivot",
    "table",
    "new",
    "pane",
    "opens",
    "right",
    "called",
    "pivot",
    "table",
    "fields",
    "let",
    "rename",
    "worksheet",
    "something",
    "meaningful",
    "pivot",
    "table",
    "fields",
    "pane",
    "see",
    "fields",
    "already",
    "added",
    "rows",
    "values",
    "areas",
    "although",
    "recommended",
    "pivot",
    "table",
    "still",
    "make",
    "adding",
    "fields",
    "example",
    "let",
    "add",
    "product",
    "line",
    "item",
    "columns",
    "area",
    "using",
    "drag",
    "drop",
    "columns",
    "product",
    "lines",
    "pivot",
    "table",
    "motorcycles",
    "ships",
    "trains",
    "pivot",
    "table",
    "manually",
    "expand",
    "field",
    "want",
    "view",
    "contents",
    "see",
    "order",
    "dates",
    "located",
    "underneath",
    "territory",
    "names",
    "pivot",
    "table",
    "note",
    "matches",
    "order",
    "fields",
    "rows",
    "area",
    "pivot",
    "table",
    "fields",
    "pane",
    "manually",
    "collapse",
    "fields",
    "also",
    "option",
    "expanding",
    "fields",
    "collapsing",
    "next",
    "feature",
    "delve",
    "pivot",
    "table",
    "filtering",
    "pivot",
    "table",
    "filters",
    "work",
    "much",
    "way",
    "standard",
    "filters",
    "used",
    "earlier",
    "course",
    "note",
    "already",
    "inbuilt",
    "filtering",
    "pivot",
    "table",
    "example",
    "rows",
    "label",
    "header",
    "filter",
    "filter",
    "listed",
    "territories",
    "japan",
    "like",
    "standard",
    "filters",
    "simple",
    "clear",
    "filter",
    "pivot",
    "table",
    "also",
    "column",
    "labels",
    "filter",
    "allowing",
    "us",
    "filter",
    "product",
    "line",
    "items",
    "pivot",
    "table",
    "example",
    "could",
    "show",
    "data",
    "trains",
    "product",
    "also",
    "option",
    "adding",
    "product",
    "line",
    "field",
    "standard",
    "filter",
    "instead",
    "column",
    "heading",
    "dragging",
    "filters",
    "area",
    "pivot",
    "table",
    "fields",
    "pane",
    "use",
    "standard",
    "filter",
    "done",
    "earlier",
    "course",
    "filter",
    "also",
    "allows",
    "us",
    "select",
    "multiple",
    "filter",
    "items",
    "used",
    "standard",
    "filter",
    "rather",
    "column",
    "header",
    "ca",
    "see",
    "split",
    "information",
    "two",
    "product",
    "lines",
    "see",
    "combined",
    "total",
    "filter",
    "column",
    "header",
    "information",
    "product",
    "line",
    "presented",
    "separately",
    "column",
    "let",
    "display",
    "field",
    "totals",
    "drag",
    "product",
    "line",
    "field",
    "back",
    "columns",
    "area",
    "previously",
    "see",
    "split",
    "different",
    "product",
    "lines",
    "pivot",
    "table",
    "next",
    "pivot",
    "table",
    "feature",
    "look",
    "slicers",
    "slicers",
    "essentially",
    "graphical",
    "filter",
    "objects",
    "enable",
    "filter",
    "data",
    "using",
    "buttons",
    "slicers",
    "make",
    "easy",
    "perform",
    "quick",
    "filtering",
    "pivot",
    "table",
    "data",
    "also",
    "display",
    "current",
    "filter",
    "state",
    "making",
    "easier",
    "know",
    "see",
    "data",
    "currently",
    "shown",
    "hidden",
    "filter",
    "example",
    "remove",
    "product",
    "line",
    "field",
    "pivot",
    "table",
    "dragging",
    "pivot",
    "table",
    "fields",
    "pane",
    "pivot",
    "table",
    "analyze",
    "tab",
    "click",
    "insert",
    "slicer",
    "choose",
    "territory",
    "field",
    "slicer",
    "see",
    "slicer",
    "freely",
    "moved",
    "around",
    "anywhere",
    "worksheet",
    "contains",
    "buttons",
    "territory",
    "names",
    "emea",
    "north",
    "america",
    "japan",
    "also",
    "select",
    "button",
    "filter",
    "multiple",
    "territories",
    "wish",
    "click",
    "clear",
    "filter",
    "button",
    "clear",
    "slicer",
    "filters",
    "let",
    "add",
    "another",
    "slicer",
    "worksheet",
    "product",
    "line",
    "field",
    "however",
    "sure",
    "select",
    "cell",
    "pivot",
    "table",
    "first",
    "insert",
    "slicer",
    "button",
    "wo",
    "work",
    "note",
    "slicers",
    "also",
    "added",
    "filters",
    "group",
    "insert",
    "tab",
    "well",
    "pivot",
    "table",
    "analyze",
    "tab",
    "select",
    "product",
    "line",
    "field",
    "time",
    "slicer",
    "drag",
    "near",
    "top",
    "worksheet",
    "select",
    "one",
    "slicer",
    "item",
    "turn",
    "choose",
    "several",
    "items",
    "filter",
    "slicer",
    "let",
    "clear",
    "slicer",
    "filters",
    "let",
    "filter",
    "using",
    "slicers",
    "note",
    "use",
    "filtering",
    "select",
    "item",
    "fact",
    "filtering",
    "defining",
    "items",
    "displayed",
    "pivot",
    "table",
    "opposite",
    "behavior",
    "selecting",
    "single",
    "items",
    "slicer",
    "displaying",
    "classic",
    "cars",
    "trains",
    "trucks",
    "buses",
    "products",
    "emea",
    "north",
    "america",
    "territories",
    "let",
    "clear",
    "slicer",
    "filters",
    "put",
    "product",
    "line",
    "field",
    "back",
    "columns",
    "area",
    "pivot",
    "table",
    "ready",
    "next",
    "feature",
    "explore",
    "let",
    "move",
    "slicers",
    "way",
    "worksheet",
    "last",
    "useful",
    "feature",
    "pivot",
    "tables",
    "going",
    "look",
    "timelines",
    "timeline",
    "another",
    "type",
    "filter",
    "tool",
    "enables",
    "filter",
    "specifically",
    "date",
    "related",
    "data",
    "pivot",
    "table",
    "much",
    "quicker",
    "effective",
    "way",
    "dynamically",
    "filtering",
    "date",
    "rather",
    "create",
    "adjust",
    "filters",
    "date",
    "columns",
    "add",
    "timeline",
    "pivot",
    "table",
    "either",
    "pivot",
    "table",
    "analyze",
    "tab",
    "insert",
    "tab",
    "ensure",
    "select",
    "cell",
    "pivot",
    "table",
    "first",
    "select",
    "order",
    "date",
    "field",
    "timeline",
    "filter",
    "drag",
    "worksheet",
    "enlarge",
    "default",
    "timeline",
    "display",
    "data",
    "month",
    "also",
    "filter",
    "days",
    "quarters",
    "select",
    "single",
    "quarter",
    "select",
    "range",
    "quarters",
    "case",
    "select",
    "12",
    "months",
    "quarter",
    "3",
    "2003",
    "quarter",
    "two",
    "use",
    "clear",
    "filter",
    "button",
    "clear",
    "timeline",
    "filter",
    "also",
    "filter",
    "years",
    "example",
    "selected",
    "2003",
    "combine",
    "slicers",
    "timelines",
    "filters",
    "pivot",
    "table",
    "example",
    "filter",
    "slicers",
    "display",
    "data",
    "trains",
    "emea",
    "north",
    "america",
    "territories",
    "year",
    "filter",
    "year",
    "2004",
    "instead",
    "see",
    "data",
    "displayed",
    "meaning",
    "sales",
    "trained",
    "products",
    "2004",
    "either",
    "emea",
    "north",
    "american",
    "territories",
    "timelines",
    "slicers",
    "tabs",
    "ribbon",
    "select",
    "properties",
    "modified",
    "change",
    "look",
    "work",
    "example",
    "let",
    "change",
    "timeline",
    "light",
    "green",
    "shade",
    "let",
    "change",
    "slicer",
    "nice",
    "orange",
    "color",
    "lastly",
    "remove",
    "timeline",
    "slicer",
    "either",
    "select",
    "press",
    "delete",
    "key",
    "right",
    "click",
    "choose",
    "cut",
    "video",
    "learned",
    "features",
    "excel",
    "use",
    "pivot",
    "tables",
    "namely",
    "recommended",
    "pivot",
    "tables",
    "filters",
    "slicers",
    "timelines",
    "music",
    "often",
    "said",
    "picture",
    "worth",
    "thousand",
    "words",
    "phrase",
    "especially",
    "relevant",
    "comes",
    "data",
    "analytics",
    "data",
    "visualization",
    "plays",
    "essential",
    "role",
    "representation",
    "small",
    "data",
    "course",
    "ibm",
    "designed",
    "help",
    "tell",
    "compelling",
    "story",
    "data",
    "using",
    "various",
    "visualization",
    "techniques",
    "work",
    "excel",
    "cognos",
    "analytics",
    "acquire",
    "basic",
    "skills",
    "needed",
    "create",
    "different",
    "types",
    "plots",
    "charts",
    "graphs",
    "build",
    "interactive",
    "dashboards",
    "important",
    "parts",
    "skill",
    "set",
    "required",
    "become",
    "data",
    "analyst",
    "learn",
    "data",
    "visualization",
    "techniques",
    "using",
    "excel",
    "cognos",
    "analytics",
    "also",
    "practice",
    "using",
    "multiple",
    "labs",
    "assignments",
    "throughout",
    "course",
    "module",
    "1",
    "learn",
    "different",
    "types",
    "charts",
    "excel",
    "functions",
    "used",
    "create",
    "basic",
    "charts",
    "pivot",
    "chart",
    "visualizations",
    "learning",
    "manipulate",
    "features",
    "creating",
    "visualizations",
    "begin",
    "understand",
    "important",
    "role",
    "charts",
    "play",
    "telling",
    "story",
    "module",
    "2",
    "learn",
    "creating",
    "advanced",
    "charts",
    "learn",
    "basics",
    "dashboarding",
    "create",
    "simple",
    "dashboards",
    "excel",
    "also",
    "learn",
    "dashboards",
    "used",
    "provide",
    "snapshots",
    "key",
    "performance",
    "indicators",
    "module",
    "3",
    "learn",
    "cognos",
    "analytics",
    "including",
    "sign",
    "navigate",
    "around",
    "easily",
    "create",
    "stunning",
    "dashboards",
    "also",
    "learn",
    "advanced",
    "dashboarding",
    "capabilities",
    "cognos",
    "analytics",
    "make",
    "dashboards",
    "interactive",
    "final",
    "module",
    "complete",
    "final",
    "assignment",
    "lab",
    "guide",
    "create",
    "visualizations",
    "excel",
    "create",
    "visualizations",
    "dashboards",
    "cognos",
    "analytics",
    "involve",
    "understanding",
    "scenario",
    "requirements",
    "creating",
    "visualizations",
    "dashboard",
    "fulfill",
    "requirements",
    "follow",
    "two",
    "different",
    "business",
    "scenarios",
    "throughout",
    "course",
    "using",
    "data",
    "set",
    "different",
    "scenarios",
    "data",
    "sets",
    "used",
    "lesson",
    "videos",
    "labs",
    "completing",
    "course",
    "able",
    "explain",
    "role",
    "visualizations",
    "play",
    "conveying",
    "story",
    "data",
    "create",
    "basic",
    "charts",
    "pivot",
    "charts",
    "advanced",
    "charts",
    "excel",
    "spreadsheets",
    "create",
    "simple",
    "dashboard",
    "using",
    "excel",
    "provision",
    "instance",
    "cognos",
    "analytics",
    "cloud",
    "navigate",
    "around",
    "cognos",
    "analytics",
    "interface",
    "leverage",
    "rich",
    "visualization",
    "capabilities",
    "build",
    "interactive",
    "dashboards",
    "using",
    "cognos",
    "analytics",
    "variety",
    "basic",
    "advanced",
    "visualizations",
    "also",
    "perform",
    "intermediate",
    "level",
    "data",
    "visualization",
    "dashboard",
    "creation",
    "tasks",
    "address",
    "business",
    "scenario",
    "course",
    "team",
    "peers",
    "available",
    "help",
    "course",
    "discussion",
    "forums",
    "case",
    "require",
    "assistance",
    "let",
    "get",
    "started",
    "next",
    "video",
    "get",
    "introduction",
    "charts",
    "foreign",
    "music",
    "give",
    "overview",
    "several",
    "different",
    "types",
    "charts",
    "visualizations",
    "discuss",
    "used",
    "tell",
    "story",
    "let",
    "begin",
    "looking",
    "line",
    "chart",
    "comparing",
    "different",
    "related",
    "data",
    "sets",
    "line",
    "chart",
    "great",
    "way",
    "display",
    "information",
    "able",
    "display",
    "trends",
    "show",
    "data",
    "value",
    "changing",
    "relation",
    "continuous",
    "variable",
    "example",
    "time",
    "continuous",
    "variable",
    "sale",
    "product",
    "multiple",
    "products",
    "changed",
    "next",
    "pie",
    "charts",
    "type",
    "chart",
    "show",
    "breakdown",
    "entity",
    "subparts",
    "proportion",
    "subparts",
    "relation",
    "one",
    "another",
    "portion",
    "pie",
    "represents",
    "static",
    "value",
    "category",
    "sum",
    "categories",
    "equal",
    "hundred",
    "percent",
    "example",
    "marketing",
    "campaign",
    "four",
    "distinct",
    "categories",
    "social",
    "sites",
    "native",
    "advertising",
    "paid",
    "influencers",
    "live",
    "events",
    "type",
    "data",
    "representation",
    "easily",
    "see",
    "total",
    "number",
    "leads",
    "generated",
    "per",
    "category",
    "look",
    "one",
    "commonly",
    "used",
    "charts",
    "bar",
    "chart",
    "type",
    "chart",
    "common",
    "easy",
    "create",
    "great",
    "comparing",
    "related",
    "data",
    "sets",
    "parts",
    "whole",
    "example",
    "bar",
    "chart",
    "see",
    "population",
    "numbers",
    "10",
    "different",
    "countries",
    "compare",
    "one",
    "another",
    "also",
    "use",
    "stacked",
    "bars",
    "bar",
    "divided",
    "stacked",
    "end",
    "end",
    "stacked",
    "bar",
    "see",
    "population",
    "country",
    "split",
    "four",
    "age",
    "ranges",
    "would",
    "like",
    "graph",
    "appear",
    "vertical",
    "horizontal",
    "column",
    "charts",
    "would",
    "great",
    "pick",
    "type",
    "chart",
    "used",
    "quite",
    "effectively",
    "show",
    "change",
    "time",
    "compare",
    "values",
    "side",
    "side",
    "example",
    "showing",
    "page",
    "views",
    "versus",
    "user",
    "session",
    "time",
    "website",
    "changes",
    "basis",
    "type",
    "chart",
    "looks",
    "similar",
    "bar",
    "chart",
    "always",
    "used",
    "interchangeably",
    "example",
    "column",
    "chart",
    "may",
    "better",
    "suited",
    "showing",
    "negative",
    "positive",
    "values",
    "next",
    "tree",
    "maps",
    "useful",
    "displaying",
    "complex",
    "hierarchies",
    "using",
    "nested",
    "rectangles",
    "example",
    "tree",
    "map",
    "depicts",
    "statewide",
    "employment",
    "rates",
    "within",
    "population",
    "country",
    "last",
    "year",
    "size",
    "rectangle",
    "represents",
    "population",
    "color",
    "represents",
    "employment",
    "rate",
    "click",
    "region",
    "see",
    "employment",
    "data",
    "within",
    "selected",
    "region",
    "trying",
    "display",
    "pipeline",
    "different",
    "stages",
    "continuous",
    "process",
    "funnel",
    "charts",
    "way",
    "go",
    "example",
    "funnel",
    "chart",
    "showing",
    "conversion",
    "rate",
    "stage",
    "sales",
    "process",
    "lead",
    "generation",
    "final",
    "sale",
    "another",
    "exceptional",
    "chart",
    "scatter",
    "chart",
    "type",
    "chart",
    "circle",
    "colors",
    "represent",
    "categories",
    "data",
    "circle",
    "sizes",
    "indicative",
    "volume",
    "data",
    "example",
    "scatter",
    "chart",
    "see",
    "product",
    "line",
    "number",
    "units",
    "sold",
    "revenue",
    "brings",
    "scatter",
    "chart",
    "great",
    "revealing",
    "trends",
    "clusters",
    "patterns",
    "correlations",
    "data",
    "points",
    "next",
    "look",
    "bubble",
    "charts",
    "variant",
    "scatter",
    "charts",
    "useful",
    "comparing",
    "handful",
    "categories",
    "one",
    "another",
    "terms",
    "relative",
    "significance",
    "example",
    "understanding",
    "areas",
    "significant",
    "expenditure",
    "organization",
    "sales",
    "budgets",
    "lastly",
    "sparklines",
    "sparklines",
    "include",
    "axis",
    "coordinates",
    "yet",
    "display",
    "trends",
    "simply",
    "effectively",
    "great",
    "showing",
    "general",
    "trend",
    "variation",
    "example",
    "stock",
    "market",
    "price",
    "fluctuations",
    "opening",
    "closing",
    "trading",
    "day",
    "video",
    "learned",
    "importance",
    "charts",
    "able",
    "shape",
    "data",
    "provide",
    "meaningful",
    "information",
    "next",
    "video",
    "dive",
    "details",
    "create",
    "configure",
    "different",
    "types",
    "charts",
    "excel",
    "foreign",
    "music",
    "listen",
    "several",
    "data",
    "professionals",
    "discuss",
    "importance",
    "using",
    "visualizations",
    "tell",
    "story",
    "data",
    "tell",
    "us",
    "importance",
    "using",
    "visualizations",
    "tell",
    "story",
    "data",
    "visualizations",
    "critical",
    "storytelling",
    "data",
    "um",
    "think",
    "familiar",
    "phrase",
    "picture",
    "worth",
    "thousand",
    "words",
    "really",
    "true",
    "uh",
    "get",
    "much",
    "clearer",
    "picture",
    "going",
    "uh",
    "data",
    "clean",
    "clear",
    "data",
    "visualizations",
    "also",
    "think",
    "data",
    "visualization",
    "super",
    "helpful",
    "analyst",
    "creates",
    "forces",
    "make",
    "choices",
    "really",
    "important",
    "show",
    "important",
    "show",
    "example",
    "debating",
    "whether",
    "look",
    "things",
    "temporally",
    "debate",
    "like",
    "overall",
    "trend",
    "important",
    "okay",
    "time",
    "series",
    "data",
    "visualization",
    "um",
    "think",
    "comparing",
    "one",
    "group",
    "versus",
    "another",
    "important",
    "likely",
    "bar",
    "column",
    "chart",
    "uh",
    "really",
    "important",
    "clarifying",
    "data",
    "analyst",
    "thinking",
    "visualization",
    "really",
    "important",
    "telling",
    "clear",
    "concise",
    "story",
    "stakeholders",
    "humans",
    "visual",
    "creation",
    "likely",
    "tell",
    "compelling",
    "story",
    "get",
    "buying",
    "visuals",
    "got",
    "job",
    "offer",
    "visualized",
    "resume",
    "created",
    "tableau",
    "one",
    "best",
    "ways",
    "present",
    "data",
    "visually",
    "numbers",
    "part",
    "tend",
    "overwhelm",
    "people",
    "walk",
    "talking",
    "company",
    "meeting",
    "say",
    "well",
    "last",
    "year",
    "2019",
    "hundred",
    "thousand",
    "dollars",
    "could",
    "give",
    "graph",
    "say",
    "2018",
    "75",
    "000",
    "2019",
    "hundred",
    "thousand",
    "2020",
    "projected",
    "hundred",
    "twenty",
    "five",
    "thousand",
    "dollars",
    "put",
    "graph",
    "make",
    "stand",
    "make",
    "pretty",
    "people",
    "people",
    "kind",
    "gravitate",
    "towards",
    "prompt",
    "ask",
    "different",
    "questions",
    "different",
    "ideas",
    "using",
    "maybe",
    "powerpoint",
    "even",
    "excel",
    "excel",
    "create",
    "graphs",
    "data",
    "make",
    "pretty",
    "make",
    "sure",
    "made",
    "pretty",
    "make",
    "sure",
    "highlights",
    "important",
    "information",
    "trying",
    "say",
    "create",
    "drive",
    "conversation",
    "around",
    "needs",
    "done",
    "best",
    "maybe",
    "run",
    "business",
    "make",
    "different",
    "decisions",
    "data",
    "visualization",
    "important",
    "part",
    "helping",
    "people",
    "understand",
    "numbers",
    "trying",
    "present",
    "reason",
    "want",
    "gravitate",
    "towards",
    "visualizations",
    "brain",
    "really",
    "works",
    "brain",
    "much",
    "able",
    "process",
    "high",
    "bar",
    "versus",
    "low",
    "bar",
    "opposed",
    "looking",
    "100",
    "rows",
    "100",
    "lines",
    "spreadsheet",
    "using",
    "visualizations",
    "especially",
    "using",
    "appropriate",
    "visualization",
    "given",
    "task",
    "really",
    "help",
    "make",
    "sure",
    "user",
    "gets",
    "easiest",
    "way",
    "understand",
    "talked",
    "storytelling",
    "really",
    "important",
    "way",
    "us",
    "visualizations",
    "really",
    "tell",
    "story",
    "augment",
    "text",
    "whether",
    "user",
    "generated",
    "system",
    "generated",
    "help",
    "people",
    "really",
    "drill",
    "understanding",
    "starting",
    "visualization",
    "easiest",
    "way",
    "help",
    "people",
    "quickly",
    "effectively",
    "understand",
    "going",
    "discussions",
    "around",
    "exactly",
    "music",
    "video",
    "look",
    "create",
    "basic",
    "types",
    "charts",
    "excel",
    "first",
    "create",
    "line",
    "charts",
    "pie",
    "charts",
    "lastly",
    "bar",
    "charts",
    "first",
    "let",
    "start",
    "line",
    "charts",
    "line",
    "chart",
    "type",
    "graph",
    "used",
    "show",
    "information",
    "series",
    "data",
    "points",
    "connected",
    "straight",
    "lines",
    "line",
    "chart",
    "horizontal",
    "axis",
    "typically",
    "represents",
    "time",
    "similar",
    "category",
    "vertical",
    "axis",
    "typically",
    "represents",
    "numerical",
    "values",
    "line",
    "charts",
    "display",
    "continuous",
    "data",
    "given",
    "time",
    "period",
    "perfect",
    "showing",
    "trends",
    "data",
    "equal",
    "time",
    "intervals",
    "days",
    "months",
    "quarters",
    "years",
    "line",
    "charts",
    "ideal",
    "scenarios",
    "data",
    "arranged",
    "columns",
    "rows",
    "data",
    "contains",
    "multiple",
    "data",
    "series",
    "car",
    "sales",
    "worksheet",
    "car",
    "sales",
    "workbook",
    "let",
    "first",
    "filter",
    "data",
    "display",
    "ford",
    "car",
    "models",
    "let",
    "create",
    "line",
    "chart",
    "data",
    "select",
    "data",
    "two",
    "columns",
    "case",
    "model",
    "price",
    "select",
    "line",
    "chart",
    "2d",
    "line",
    "category",
    "charts",
    "group",
    "let",
    "change",
    "chart",
    "title",
    "price",
    "ford",
    "cars",
    "simply",
    "chart",
    "titled",
    "text",
    "box",
    "editing",
    "text",
    "see",
    "floating",
    "chart",
    "area",
    "containing",
    "line",
    "chart",
    "displays",
    "price",
    "trend",
    "ford",
    "cars",
    "across",
    "models",
    "let",
    "move",
    "line",
    "chart",
    "left",
    "side",
    "worksheet",
    "data",
    "okay",
    "let",
    "move",
    "pie",
    "charts",
    "pie",
    "chart",
    "type",
    "circular",
    "graph",
    "used",
    "show",
    "relative",
    "contribution",
    "different",
    "categories",
    "see",
    "slices",
    "make",
    "overall",
    "total",
    "see",
    "pi",
    "data",
    "points",
    "pie",
    "chart",
    "slices",
    "represented",
    "percentages",
    "complete",
    "pie",
    "charts",
    "provide",
    "simple",
    "visualization",
    "differing",
    "data",
    "results",
    "humans",
    "find",
    "easy",
    "comprehend",
    "pie",
    "charts",
    "best",
    "used",
    "one",
    "data",
    "series",
    "data",
    "contains",
    "maybe",
    "dozen",
    "categories",
    "otherwise",
    "pie",
    "chart",
    "start",
    "look",
    "busy",
    "become",
    "difficult",
    "read",
    "pie",
    "chart",
    "use",
    "model",
    "names",
    "manufactured",
    "ford",
    "along",
    "unit",
    "sales",
    "create",
    "pie",
    "chart",
    "select",
    "data",
    "two",
    "columns",
    "case",
    "model",
    "unit",
    "sales",
    "select",
    "pie",
    "chart",
    "2d",
    "pi",
    "category",
    "charts",
    "group",
    "new",
    "floating",
    "chart",
    "area",
    "contains",
    "pie",
    "chart",
    "displays",
    "relative",
    "contribution",
    "unit",
    "sales",
    "individual",
    "ford",
    "car",
    "models",
    "slices",
    "pie",
    "combine",
    "together",
    "make",
    "overall",
    "total",
    "unit",
    "sales",
    "ford",
    "cars",
    "whole",
    "pie",
    "let",
    "change",
    "chart",
    "style",
    "customize",
    "look",
    "pie",
    "chart",
    "numerous",
    "styles",
    "choose",
    "gallery",
    "even",
    "make",
    "combinations",
    "multiple",
    "styles",
    "example",
    "chosen",
    "style",
    "3",
    "style",
    "7",
    "gives",
    "us",
    "percentage",
    "values",
    "displayed",
    "slice",
    "nice",
    "dark",
    "contrasting",
    "background",
    "color",
    "let",
    "move",
    "chart",
    "time",
    "center",
    "worksheet",
    "data",
    "lastly",
    "let",
    "look",
    "bar",
    "charts",
    "bar",
    "chart",
    "type",
    "graph",
    "used",
    "compare",
    "values",
    "across",
    "categories",
    "either",
    "using",
    "vertical",
    "bars",
    "horizontal",
    "bars",
    "case",
    "column",
    "charts",
    "variety",
    "bar",
    "charts",
    "bar",
    "chart",
    "categories",
    "usually",
    "arranged",
    "vertical",
    "axis",
    "values",
    "horizontal",
    "axis",
    "whereas",
    "column",
    "chart",
    "categories",
    "typically",
    "arranged",
    "horizontal",
    "axis",
    "values",
    "displayed",
    "vertical",
    "axis",
    "create",
    "bar",
    "chart",
    "select",
    "data",
    "two",
    "columns",
    "case",
    "model",
    "retention",
    "percentage",
    "select",
    "style",
    "bar",
    "chart",
    "2d",
    "bar",
    "category",
    "bar",
    "charts",
    "new",
    "floating",
    "chart",
    "area",
    "contains",
    "bar",
    "chart",
    "displays",
    "comparative",
    "values",
    "retention",
    "percentage",
    "different",
    "ford",
    "models",
    "using",
    "horizontal",
    "bars",
    "change",
    "chart",
    "color",
    "customize",
    "look",
    "bar",
    "chart",
    "want",
    "choose",
    "color",
    "scheme",
    "based",
    "palette",
    "colors",
    "rather",
    "style",
    "click",
    "change",
    "colors",
    "button",
    "select",
    "color",
    "palette",
    "list",
    "let",
    "also",
    "move",
    "chart",
    "time",
    "right",
    "side",
    "worksheet",
    "data",
    "video",
    "learned",
    "create",
    "line",
    "pi",
    "bar",
    "charts",
    "excel",
    "next",
    "video",
    "look",
    "use",
    "pivot",
    "chart",
    "feature",
    "excel",
    "music",
    "foreign",
    "create",
    "basic",
    "types",
    "charts",
    "excel",
    "video",
    "look",
    "create",
    "basic",
    "charts",
    "using",
    "pivot",
    "chart",
    "feature",
    "pivot",
    "table",
    "excel",
    "first",
    "create",
    "area",
    "charts",
    "column",
    "charts",
    "pivot",
    "table",
    "please",
    "note",
    "price",
    "resale",
    "values",
    "sample",
    "data",
    "set",
    "real",
    "data",
    "merely",
    "used",
    "explanatory",
    "demonstration",
    "purposes",
    "pivot",
    "chart",
    "used",
    "show",
    "data",
    "series",
    "categories",
    "chart",
    "axes",
    "way",
    "basic",
    "chart",
    "used",
    "connecting",
    "pivot",
    "table",
    "simply",
    "put",
    "pivot",
    "chart",
    "nothing",
    "graphical",
    "representation",
    "pivot",
    "table",
    "excel",
    "useful",
    "pivot",
    "table",
    "containing",
    "complicated",
    "data",
    "pivot",
    "chart",
    "help",
    "us",
    "make",
    "sense",
    "data",
    "let",
    "start",
    "area",
    "charts",
    "area",
    "chart",
    "type",
    "graph",
    "used",
    "show",
    "information",
    "series",
    "data",
    "points",
    "connected",
    "using",
    "straight",
    "lines",
    "filled",
    "area",
    "area",
    "charts",
    "handle",
    "positive",
    "negative",
    "values",
    "like",
    "line",
    "charts",
    "first",
    "let",
    "create",
    "copy",
    "pivot",
    "1",
    "worksheet",
    "car",
    "sales",
    "workbook",
    "copied",
    "worksheet",
    "car",
    "sales",
    "workbook",
    "let",
    "first",
    "filter",
    "data",
    "pivot",
    "table",
    "display",
    "toyota",
    "car",
    "models",
    "expand",
    "field",
    "toyota",
    "see",
    "details",
    "different",
    "models",
    "toyota",
    "average",
    "price",
    "model",
    "average",
    "year",
    "resale",
    "value",
    "let",
    "create",
    "area",
    "chart",
    "using",
    "pivot",
    "chart",
    "feature",
    "data",
    "let",
    "select",
    "area",
    "chart",
    "type",
    "choose",
    "3d",
    "area",
    "chart",
    "see",
    "floating",
    "chart",
    "containing",
    "area",
    "chart",
    "displays",
    "trend",
    "average",
    "price",
    "well",
    "average",
    "year",
    "resale",
    "value",
    "toyota",
    "cars",
    "across",
    "models",
    "note",
    "also",
    "filter",
    "data",
    "pivot",
    "chart",
    "rather",
    "pivot",
    "table",
    "one",
    "key",
    "differences",
    "standard",
    "chart",
    "pivot",
    "chart",
    "pivot",
    "chart",
    "let",
    "filter",
    "data",
    "display",
    "chevrolet",
    "car",
    "models",
    "expand",
    "field",
    "pivot",
    "chart",
    "displays",
    "data",
    "see",
    "seems",
    "higher",
    "priced",
    "models",
    "retain",
    "value",
    "one",
    "year",
    "compared",
    "lower",
    "priced",
    "models",
    "also",
    "use",
    "model",
    "filter",
    "drop",
    "pivot",
    "chart",
    "filter",
    "models",
    "displaying",
    "seven",
    "nine",
    "chevrolet",
    "models",
    "pivot",
    "chart",
    "associated",
    "pivot",
    "table",
    "see",
    "make",
    "change",
    "adding",
    "filter",
    "directly",
    "pivot",
    "chart",
    "changes",
    "immediately",
    "reflected",
    "pivot",
    "table",
    "data",
    "reverse",
    "obviously",
    "also",
    "true",
    "make",
    "change",
    "pivot",
    "table",
    "change",
    "immediately",
    "viewable",
    "pivot",
    "chart",
    "let",
    "look",
    "column",
    "charts",
    "column",
    "chart",
    "type",
    "graph",
    "used",
    "compare",
    "values",
    "across",
    "categories",
    "using",
    "vertical",
    "bars",
    "column",
    "chart",
    "categories",
    "typically",
    "arranged",
    "horizontal",
    "axis",
    "values",
    "displayed",
    "vertical",
    "axis",
    "create",
    "column",
    "chart",
    "let",
    "first",
    "create",
    "another",
    "copy",
    "pivot1",
    "worksheet",
    "car",
    "sales",
    "workbook",
    "copied",
    "worksheet",
    "car",
    "sales",
    "workbook",
    "let",
    "filter",
    "data",
    "pivot",
    "table",
    "time",
    "display",
    "bmw",
    "cadillac",
    "hyundai",
    "car",
    "models",
    "let",
    "create",
    "column",
    "chart",
    "using",
    "pivot",
    "chart",
    "feature",
    "data",
    "let",
    "select",
    "column",
    "chart",
    "type",
    "choose",
    "3d",
    "clustered",
    "column",
    "chart",
    "new",
    "floating",
    "area",
    "contains",
    "column",
    "chart",
    "displays",
    "comparative",
    "values",
    "average",
    "price",
    "well",
    "average",
    "year",
    "resale",
    "value",
    "bmw",
    "cadillac",
    "hyundai",
    "cars",
    "using",
    "vertical",
    "bars",
    "chart",
    "data",
    "see",
    "seems",
    "hyundai",
    "bmw",
    "ranges",
    "retain",
    "resale",
    "value",
    "better",
    "cadillac",
    "models",
    "let",
    "view",
    "bmw",
    "models",
    "table",
    "chart",
    "expanding",
    "cell",
    "pivot",
    "table",
    "note",
    "also",
    "use",
    "plus",
    "minus",
    "buttons",
    "chart",
    "expand",
    "collapse",
    "data",
    "view",
    "buttons",
    "drill",
    "drill",
    "multiple",
    "category",
    "levels",
    "multiple",
    "fields",
    "axis",
    "categories",
    "section",
    "pivot",
    "chart",
    "fields",
    "pane",
    "example",
    "models",
    "categorized",
    "model",
    "variants",
    "engine",
    "capacities",
    "colors",
    "see",
    "models",
    "three",
    "manufacturers",
    "displayed",
    "column",
    "chart",
    "note",
    "however",
    "buttons",
    "used",
    "expand",
    "collapse",
    "fields",
    "want",
    "expand",
    "collapse",
    "one",
    "field",
    "need",
    "pivot",
    "table",
    "rather",
    "chart",
    "previous",
    "step",
    "let",
    "change",
    "chart",
    "style",
    "customize",
    "look",
    "column",
    "chart",
    "numerous",
    "styles",
    "choose",
    "gallery",
    "example",
    "chosen",
    "style",
    "9",
    "gives",
    "us",
    "nice",
    "dark",
    "contrasting",
    "background",
    "color",
    "video",
    "learned",
    "create",
    "area",
    "column",
    "charts",
    "using",
    "pivot",
    "chart",
    "feature",
    "pivot",
    "table",
    "excel",
    "also",
    "learned",
    "filter",
    "data",
    "using",
    "either",
    "pivot",
    "table",
    "pivot",
    "chart",
    "learned",
    "expand",
    "collapse",
    "data",
    "levels",
    "using",
    "pivot",
    "table",
    "pivot",
    "chart",
    "next",
    "video",
    "look",
    "advanced",
    "charts",
    "available",
    "excel",
    "thank",
    "music",
    "foreign",
    "learned",
    "create",
    "basic",
    "charts",
    "video",
    "look",
    "create",
    "advanced",
    "charts",
    "excel",
    "first",
    "create",
    "tree",
    "maps",
    "scatter",
    "charts",
    "lastly",
    "histograms",
    "please",
    "note",
    "price",
    "resale",
    "values",
    "sample",
    "data",
    "set",
    "real",
    "merely",
    "used",
    "explanatory",
    "demonstration",
    "purposes",
    "let",
    "start",
    "tree",
    "maps",
    "tree",
    "map",
    "chart",
    "used",
    "compare",
    "values",
    "across",
    "hierarchy",
    "levels",
    "show",
    "proportions",
    "within",
    "hierarchical",
    "levels",
    "rectangles",
    "tree",
    "maps",
    "good",
    "way",
    "displaying",
    "lots",
    "data",
    "one",
    "graphical",
    "asset",
    "use",
    "color",
    "closeness",
    "proportional",
    "shapes",
    "within",
    "chart",
    "represent",
    "hierarchical",
    "data",
    "categories",
    "difficult",
    "thing",
    "achieve",
    "types",
    "chart",
    "tree",
    "map",
    "worksheet",
    "car",
    "sales",
    "workbook",
    "let",
    "first",
    "select",
    "data",
    "two",
    "columns",
    "model",
    "unit",
    "sales",
    "let",
    "create",
    "tree",
    "map",
    "chart",
    "data",
    "select",
    "tree",
    "map",
    "chart",
    "hierarchy",
    "category",
    "charts",
    "group",
    "see",
    "floating",
    "chart",
    "area",
    "containing",
    "tree",
    "map",
    "chart",
    "displays",
    "proportion",
    "unit",
    "sales",
    "ford",
    "cars",
    "within",
    "hierarchical",
    "levels",
    "rectangles",
    "let",
    "change",
    "chart",
    "title",
    "unit",
    "sales",
    "ford",
    "cars",
    "simply",
    "chart",
    "title",
    "text",
    "box",
    "editing",
    "text",
    "let",
    "change",
    "chart",
    "style",
    "customize",
    "look",
    "tree",
    "map",
    "chart",
    "numerous",
    "styles",
    "choose",
    "gallery",
    "example",
    "chosen",
    "style",
    "easily",
    "see",
    "tree",
    "map",
    "chart",
    "f",
    "series",
    "model",
    "far",
    "biggest",
    "proportion",
    "ford",
    "car",
    "sales",
    "followed",
    "explorer",
    "taurus",
    "models",
    "constitute",
    "similar",
    "proportion",
    "ford",
    "car",
    "sales",
    "contour",
    "model",
    "shows",
    "smallest",
    "proportion",
    "ford",
    "car",
    "sales",
    "next",
    "let",
    "look",
    "scatter",
    "charts",
    "scatter",
    "chart",
    "type",
    "graph",
    "used",
    "compare",
    "two",
    "sets",
    "numerical",
    "data",
    "values",
    "show",
    "relationships",
    "sets",
    "numerical",
    "values",
    "scatter",
    "chart",
    "combines",
    "two",
    "sets",
    "values",
    "x",
    "single",
    "points",
    "data",
    "displays",
    "clusters",
    "chart",
    "reason",
    "also",
    "sometimes",
    "see",
    "referred",
    "xy",
    "charts",
    "common",
    "uses",
    "include",
    "comparison",
    "statistical",
    "scientific",
    "engineering",
    "data",
    "values",
    "create",
    "scatter",
    "chart",
    "let",
    "first",
    "select",
    "data",
    "two",
    "adjacent",
    "columns",
    "price",
    "year",
    "resale",
    "value",
    "scatter",
    "worksheet",
    "car",
    "sales",
    "workbook",
    "let",
    "create",
    "scatter",
    "chart",
    "data",
    "select",
    "scatter",
    "chart",
    "x",
    "scatter",
    "category",
    "charts",
    "group",
    "compares",
    "price",
    "cars",
    "manufacturers",
    "year",
    "resale",
    "value",
    "let",
    "change",
    "chart",
    "title",
    "comparing",
    "price",
    "year",
    "resale",
    "value",
    "simply",
    "chart",
    "titled",
    "text",
    "box",
    "editing",
    "text",
    "let",
    "change",
    "chart",
    "style",
    "customize",
    "look",
    "scatter",
    "chart",
    "numerous",
    "styles",
    "choose",
    "gallery",
    "example",
    "chosen",
    "style",
    "let",
    "add",
    "axis",
    "titles",
    "horizontal",
    "vertical",
    "call",
    "horizontal",
    "retail",
    "price",
    "vertical",
    "year",
    "resale",
    "value",
    "see",
    "scatter",
    "chart",
    "retail",
    "price",
    "increases",
    "differential",
    "retail",
    "price",
    "year",
    "resale",
    "value",
    "generally",
    "speaking",
    "lower",
    "priced",
    "cars",
    "retain",
    "resale",
    "value",
    "one",
    "year",
    "better",
    "higher",
    "priced",
    "cars",
    "lastly",
    "let",
    "look",
    "histograms",
    "histogram",
    "graph",
    "shows",
    "distribution",
    "data",
    "grouped",
    "bins",
    "although",
    "histogram",
    "may",
    "look",
    "like",
    "column",
    "bar",
    "chart",
    "totally",
    "different",
    "bar",
    "chart",
    "used",
    "compare",
    "data",
    "histogram",
    "used",
    "display",
    "distribution",
    "data",
    "create",
    "histogram",
    "let",
    "first",
    "select",
    "data",
    "two",
    "columns",
    "model",
    "price",
    "histogram",
    "worksheet",
    "car",
    "sales",
    "workbook",
    "let",
    "create",
    "histogram",
    "data",
    "select",
    "histogram",
    "statistical",
    "category",
    "charts",
    "group",
    "new",
    "floating",
    "chart",
    "area",
    "contains",
    "histogram",
    "displays",
    "frequency",
    "distribution",
    "price",
    "cars",
    "manufacturers",
    "note",
    "excel",
    "automatically",
    "puts",
    "different",
    "price",
    "ranges",
    "nine",
    "equally",
    "sized",
    "separate",
    "bins",
    "first",
    "bin",
    "contains",
    "cars",
    "priced",
    "nine",
    "thousand",
    "two",
    "hundred",
    "thirty",
    "five",
    "dollars",
    "eighteen",
    "thousand",
    "six",
    "hundred",
    "thirty",
    "five",
    "second",
    "bin",
    "contains",
    "cars",
    "priced",
    "eighteen",
    "thousand",
    "six",
    "hundred",
    "thirty",
    "five",
    "dollars",
    "twenty",
    "eight",
    "thousand",
    "thirty",
    "five",
    "dollars",
    "maximum",
    "price",
    "range",
    "84",
    "435",
    "dollars",
    "ninety",
    "three",
    "thousand",
    "eight",
    "hundred",
    "thirty",
    "five",
    "let",
    "change",
    "chart",
    "title",
    "count",
    "car",
    "models",
    "price",
    "range",
    "simply",
    "double",
    "clicking",
    "chart",
    "title",
    "text",
    "box",
    "editing",
    "text",
    "let",
    "change",
    "chart",
    "style",
    "customize",
    "look",
    "histogram",
    "numerous",
    "styles",
    "choose",
    "gallery",
    "example",
    "chosen",
    "style",
    "three",
    "style",
    "shows",
    "count",
    "values",
    "individual",
    "rectangles",
    "price",
    "range",
    "rather",
    "using",
    "vertical",
    "scale",
    "histogram",
    "chart",
    "easily",
    "see",
    "largest",
    "proportion",
    "car",
    "models",
    "18",
    "635",
    "dollar",
    "twenty",
    "eight",
    "thousand",
    "thirty",
    "five",
    "price",
    "range",
    "count",
    "62",
    "models",
    "range",
    "followed",
    "cheapest",
    "price",
    "range",
    "nine",
    "thousand",
    "two",
    "hundred",
    "thirty",
    "five",
    "eighteen",
    "thousand",
    "six",
    "hundred",
    "thirty",
    "five",
    "dollars",
    "count",
    "42",
    "models",
    "fewest",
    "count",
    "models",
    "price",
    "range",
    "shared",
    "two",
    "expensive",
    "price",
    "ranges",
    "one",
    "model",
    "bin",
    "although",
    "excel",
    "chooses",
    "bin",
    "ranges",
    "automatically",
    "create",
    "histogram",
    "change",
    "bin",
    "sizes",
    "suit",
    "needs",
    "done",
    "opening",
    "formatting",
    "pane",
    "relevant",
    "chart",
    "element",
    "case",
    "horizontal",
    "axis",
    "axis",
    "options",
    "section",
    "choose",
    "display",
    "bins",
    "several",
    "factors",
    "including",
    "bin",
    "width",
    "number",
    "bins",
    "example",
    "change",
    "bin",
    "width",
    "value",
    "see",
    "15",
    "bins",
    "chart",
    "price",
    "ranges",
    "much",
    "narrower",
    "bins",
    "two",
    "three",
    "two",
    "highest",
    "counts",
    "34",
    "33",
    "respectively",
    "bin",
    "14",
    "shows",
    "models",
    "price",
    "range",
    "change",
    "axis",
    "options",
    "display",
    "set",
    "number",
    "bins",
    "histogram",
    "updates",
    "show",
    "price",
    "ranges",
    "split",
    "number",
    "bins",
    "specified",
    "10",
    "bins",
    "see",
    "bin",
    "2",
    "largest",
    "proportion",
    "models",
    "price",
    "range",
    "choose",
    "automatic",
    "histogram",
    "reverts",
    "back",
    "format",
    "started",
    "video",
    "learned",
    "create",
    "tree",
    "maps",
    "scatter",
    "charts",
    "histograms",
    "excel",
    "next",
    "video",
    "look",
    "advanced",
    "charts",
    "available",
    "excel",
    "like",
    "filled",
    "map",
    "charts",
    "sparklines",
    "music",
    "video",
    "look",
    "advanced",
    "charts",
    "excel",
    "first",
    "create",
    "field",
    "map",
    "chart",
    "add",
    "sparklines",
    "data",
    "lastly",
    "briefly",
    "discuss",
    "charts",
    "available",
    "excel",
    "let",
    "start",
    "filled",
    "map",
    "charts",
    "filled",
    "map",
    "chart",
    "type",
    "chart",
    "used",
    "compare",
    "values",
    "show",
    "categories",
    "across",
    "geographical",
    "regions",
    "chart",
    "suitable",
    "data",
    "contains",
    "geographical",
    "regions",
    "like",
    "countries",
    "states",
    "postal",
    "codes",
    "map",
    "chart",
    "worksheet",
    "car",
    "sales",
    "workbook",
    "let",
    "first",
    "copy",
    "data",
    "pivot",
    "table",
    "containing",
    "country",
    "sale",
    "sum",
    "unit",
    "sales",
    "paste",
    "copied",
    "data",
    "beside",
    "table",
    "let",
    "create",
    "filled",
    "map",
    "chart",
    "data",
    "selecting",
    "data",
    "select",
    "fill",
    "map",
    "chart",
    "map",
    "category",
    "charts",
    "group",
    "new",
    "floating",
    "chart",
    "area",
    "contains",
    "filled",
    "map",
    "chart",
    "displays",
    "sum",
    "unit",
    "sales",
    "cars",
    "across",
    "different",
    "countries",
    "sale",
    "let",
    "change",
    "chart",
    "title",
    "sum",
    "unit",
    "sales",
    "cars",
    "country",
    "simply",
    "chart",
    "title",
    "text",
    "box",
    "editing",
    "text",
    "let",
    "change",
    "chart",
    "style",
    "customize",
    "look",
    "filled",
    "map",
    "chart",
    "numerous",
    "styles",
    "choose",
    "gallery",
    "suit",
    "preference",
    "see",
    "field",
    "map",
    "visualization",
    "darker",
    "blue",
    "color",
    "denotes",
    "larger",
    "number",
    "unit",
    "sales",
    "covering",
    "united",
    "states",
    "paler",
    "blue",
    "colors",
    "denote",
    "medium",
    "numbers",
    "unit",
    "sales",
    "covering",
    "areas",
    "canada",
    "western",
    "europe",
    "scandinavia",
    "almost",
    "white",
    "color",
    "denotes",
    "lowest",
    "number",
    "unit",
    "sales",
    "predominantly",
    "covering",
    "eastern",
    "europe",
    "india",
    "japan",
    "australia",
    "next",
    "let",
    "look",
    "sparklines",
    "sparklines",
    "mini",
    "charts",
    "placed",
    "inside",
    "single",
    "cells",
    "represent",
    "selected",
    "range",
    "data",
    "typically",
    "used",
    "show",
    "data",
    "trends",
    "seasonal",
    "increase",
    "decrease",
    "economic",
    "cycles",
    "share",
    "rate",
    "price",
    "fluctuations",
    "also",
    "used",
    "highlight",
    "max",
    "min",
    "values",
    "sparkline",
    "provides",
    "greatest",
    "impact",
    "placed",
    "close",
    "data",
    "represents",
    "create",
    "sparklines",
    "let",
    "first",
    "select",
    "data",
    "four",
    "adjacent",
    "columns",
    "unit",
    "sales",
    "q1",
    "unit",
    "sales",
    "q2",
    "unit",
    "sales",
    "q3",
    "unit",
    "sales",
    "q4",
    "sparklines",
    "worksheet",
    "car",
    "sales",
    "workbook",
    "let",
    "create",
    "sparklines",
    "data",
    "select",
    "line",
    "type",
    "sparkline",
    "sparklines",
    "group",
    "need",
    "specify",
    "would",
    "like",
    "sparkline",
    "appear",
    "worksheet",
    "either",
    "typing",
    "cell",
    "reference",
    "location",
    "range",
    "box",
    "better",
    "still",
    "click",
    "cell",
    "worksheet",
    "want",
    "appear",
    "excel",
    "fill",
    "note",
    "uses",
    "absolute",
    "reference",
    "adding",
    "dollar",
    "symbols",
    "cell",
    "references",
    "copy",
    "sparkline",
    "rest",
    "column",
    "see",
    "column",
    "containing",
    "sparklines",
    "displays",
    "trend",
    "unit",
    "sales",
    "ford",
    "cars",
    "four",
    "quarters",
    "year",
    "let",
    "name",
    "column",
    "header",
    "column",
    "sparklines",
    "quarter",
    "sales",
    "trends",
    "adjust",
    "column",
    "width",
    "also",
    "adjust",
    "row",
    "height",
    "display",
    "sparklines",
    "clearly",
    "let",
    "also",
    "display",
    "maximum",
    "minimum",
    "values",
    "sparklines",
    "change",
    "chart",
    "style",
    "customize",
    "look",
    "sparklines",
    "several",
    "styles",
    "gallery",
    "choose",
    "finally",
    "let",
    "adjust",
    "weight",
    "lines",
    "spark",
    "lines",
    "make",
    "stand",
    "bit",
    "sparklines",
    "show",
    "us",
    "ford",
    "escort",
    "unit",
    "sales",
    "started",
    "low",
    "first",
    "quarter",
    "increased",
    "quarter",
    "two",
    "three",
    "declined",
    "quarter",
    "four",
    "also",
    "determine",
    "generally",
    "across",
    "majority",
    "range",
    "ford",
    "car",
    "models",
    "q3",
    "best",
    "quarter",
    "unit",
    "sales",
    "year",
    "couple",
    "exceptions",
    "mustangs",
    "quarter",
    "4",
    "focus",
    "models",
    "quarter",
    "two",
    "lastly",
    "let",
    "look",
    "available",
    "charts",
    "excel",
    "waterfall",
    "chart",
    "type",
    "used",
    "show",
    "cumulative",
    "effect",
    "series",
    "positive",
    "negative",
    "values",
    "suitable",
    "data",
    "represents",
    "inflows",
    "outflows",
    "like",
    "financial",
    "data",
    "funnel",
    "chart",
    "type",
    "used",
    "show",
    "progressively",
    "smaller",
    "stages",
    "process",
    "suitable",
    "data",
    "shows",
    "progressively",
    "decreasing",
    "proportions",
    "stock",
    "chart",
    "type",
    "used",
    "show",
    "trend",
    "stocks",
    "performance",
    "time",
    "best",
    "suited",
    "data",
    "series",
    "multiple",
    "stock",
    "price",
    "values",
    "like",
    "volume",
    "open",
    "high",
    "low",
    "close",
    "surface",
    "chart",
    "type",
    "used",
    "show",
    "trends",
    "values",
    "across",
    "two",
    "dimensions",
    "3d",
    "surface",
    "areas",
    "2d",
    "contoured",
    "charts",
    "suitable",
    "categories",
    "data",
    "series",
    "numeric",
    "lastly",
    "radar",
    "chart",
    "type",
    "used",
    "show",
    "values",
    "relative",
    "center",
    "point",
    "suitable",
    "categories",
    "directly",
    "comparable",
    "video",
    "looked",
    "create",
    "field",
    "map",
    "charts",
    "sparklines",
    "excel",
    "reviewed",
    "charts",
    "available",
    "music",
    "thank",
    "video",
    "brief",
    "introduction",
    "dashboards",
    "including",
    "consist",
    "useful",
    "component",
    "data",
    "analysts",
    "toolkit",
    "essential",
    "skill",
    "data",
    "analyst",
    "skill",
    "set",
    "term",
    "dashboard",
    "comes",
    "automotive",
    "industry",
    "car",
    "designers",
    "put",
    "important",
    "gauges",
    "display",
    "information",
    "engine",
    "oil",
    "temperature",
    "current",
    "speed",
    "current",
    "rpm",
    "amount",
    "fuel",
    "left",
    "handy",
    "graphical",
    "display",
    "easy",
    "driver",
    "view",
    "understand",
    "originally",
    "displays",
    "analog",
    "digital",
    "use",
    "varying",
    "forms",
    "visualization",
    "including",
    "digital",
    "meters",
    "mini",
    "graphs",
    "take",
    "idea",
    "apply",
    "dashboard",
    "data",
    "analysis",
    "application",
    "designers",
    "types",
    "dashboard",
    "want",
    "put",
    "key",
    "business",
    "information",
    "one",
    "place",
    "form",
    "graphical",
    "displays",
    "make",
    "easier",
    "viewer",
    "understand",
    "dashboards",
    "take",
    "step",
    "also",
    "allowing",
    "user",
    "interact",
    "dashboard",
    "modify",
    "exactly",
    "information",
    "see",
    "using",
    "tools",
    "supplied",
    "dashboard",
    "users",
    "dashboard",
    "therefore",
    "get",
    "consolidated",
    "visualization",
    "business",
    "data",
    "key",
    "performance",
    "indicators",
    "kpis",
    "also",
    "get",
    "controllable",
    "business",
    "intelligence",
    "bi",
    "interface",
    "use",
    "filters",
    "enable",
    "control",
    "precisely",
    "information",
    "see",
    "dashboards",
    "typically",
    "created",
    "data",
    "analysis",
    "application",
    "using",
    "multiple",
    "pivot",
    "tables",
    "charts",
    "visualizations",
    "map",
    "charts",
    "sparklines",
    "filtering",
    "tools",
    "slicers",
    "timelines",
    "pivot",
    "tables",
    "charts",
    "could",
    "created",
    "single",
    "data",
    "source",
    "multiple",
    "data",
    "sources",
    "use",
    "dashboards",
    "data",
    "analysis",
    "application",
    "get",
    "following",
    "benefits",
    "offer",
    "insights",
    "key",
    "data",
    "alert",
    "patterns",
    "trends",
    "data",
    "provide",
    "interactive",
    "experience",
    "user",
    "allowing",
    "filter",
    "data",
    "see",
    "updated",
    "dynamically",
    "source",
    "data",
    "changes",
    "provide",
    "centralized",
    "consolidated",
    "view",
    "business",
    "data",
    "dashboard",
    "useful",
    "tool",
    "areas",
    "business",
    "fiscal",
    "forecasting",
    "reporting",
    "project",
    "management",
    "executive",
    "reporting",
    "human",
    "resources",
    "customer",
    "service",
    "help",
    "desk",
    "issue",
    "tracking",
    "healthcare",
    "monitoring",
    "call",
    "center",
    "analytics",
    "social",
    "media",
    "marketing",
    "many",
    "budding",
    "data",
    "analyst",
    "dashboards",
    "vital",
    "skill",
    "add",
    "arsenal",
    "majority",
    "employers",
    "see",
    "dashboarding",
    "skill",
    "must",
    "rather",
    "nice",
    "show",
    "skills",
    "create",
    "accomplished",
    "spectacular",
    "interactive",
    "yet",
    "easy",
    "view",
    "use",
    "dashboards",
    "whether",
    "spreadsheet",
    "application",
    "microsoft",
    "excel",
    "google",
    "sheets",
    "using",
    "advanced",
    "data",
    "analysis",
    "visualization",
    "application",
    "bokeh",
    "dash",
    "python",
    "studio",
    "shiny",
    "tableau",
    "ibm",
    "cognos",
    "analytics",
    "greatly",
    "help",
    "future",
    "career",
    "data",
    "analyst",
    "video",
    "brief",
    "introduction",
    "dashboards",
    "including",
    "consist",
    "useful",
    "component",
    "data",
    "analysts",
    "toolkit",
    "essential",
    "skill",
    "data",
    "analyst",
    "skill",
    "set",
    "next",
    "videos",
    "learn",
    "create",
    "simple",
    "dashboard",
    "using",
    "spreadsheet",
    "application",
    "music",
    "first",
    "part",
    "video",
    "listen",
    "several",
    "data",
    "professionals",
    "discuss",
    "dashboards",
    "help",
    "presenting",
    "data",
    "results",
    "tell",
    "us",
    "dashboards",
    "help",
    "presenting",
    "data",
    "results",
    "one",
    "thing",
    "particularly",
    "love",
    "data",
    "dashboards",
    "take",
    "fluff",
    "show",
    "important",
    "things",
    "want",
    "see",
    "often",
    "real",
    "time",
    "make",
    "pretty",
    "want",
    "seen",
    "dashboards",
    "frankly",
    "eyesore",
    "trying",
    "cram",
    "much",
    "data",
    "one",
    "dashboard",
    "important",
    "specific",
    "succinct",
    "looking",
    "avoid",
    "sorts",
    "things",
    "lot",
    "times",
    "dashboards",
    "great",
    "executives",
    "business",
    "owners",
    "go",
    "maybe",
    "looking",
    "dashboards",
    "mobile",
    "device",
    "really",
    "space",
    "capacity",
    "mobile",
    "device",
    "look",
    "much",
    "data",
    "dashboards",
    "really",
    "highly",
    "effective",
    "short",
    "amount",
    "time",
    "long",
    "understand",
    "deliverables",
    "stakeholder",
    "wants",
    "see",
    "important",
    "purposes",
    "making",
    "decisions",
    "presenting",
    "information",
    "way",
    "palatable",
    "audience",
    "important",
    "people",
    "getting",
    "value",
    "lot",
    "times",
    "think",
    "data",
    "analysts",
    "general",
    "get",
    "bad",
    "rep",
    "people",
    "think",
    "number",
    "crunchers",
    "think",
    "bigger",
    "problem",
    "done",
    "good",
    "job",
    "could",
    "really",
    "explain",
    "numbers",
    "powerpoint",
    "presentations",
    "graphs",
    "um",
    "graphs",
    "love",
    "graphs",
    "key",
    "performance",
    "indicators",
    "maybe",
    "break",
    "information",
    "different",
    "way",
    "highlight",
    "important",
    "help",
    "also",
    "making",
    "sure",
    "reading",
    "room",
    "meeting",
    "everybody",
    "eyes",
    "glazed",
    "talking",
    "numbers",
    "maybe",
    "need",
    "ask",
    "information",
    "looking",
    "important",
    "go",
    "back",
    "create",
    "next",
    "dashboard",
    "create",
    "next",
    "report",
    "highlight",
    "things",
    "important",
    "audience",
    "always",
    "need",
    "reading",
    "room",
    "need",
    "make",
    "sure",
    "showing",
    "value",
    "showing",
    "people",
    "helping",
    "people",
    "understand",
    "educating",
    "bring",
    "knowledge",
    "base",
    "starts",
    "help",
    "fear",
    "dissipate",
    "fear",
    "number",
    "starts",
    "go",
    "away",
    "would",
    "show",
    "numbers",
    "actually",
    "mean",
    "throwing",
    "numbers",
    "get",
    "overwhelmed",
    "helping",
    "see",
    "graphically",
    "dashboards",
    "kpis",
    "ways",
    "bring",
    "make",
    "real",
    "dashboards",
    "spreadsheet",
    "indicator",
    "action",
    "like",
    "car",
    "dashboard",
    "see",
    "low",
    "fuel",
    "light",
    "means",
    "need",
    "put",
    "gas",
    "car",
    "dashboard",
    "spreadsheet",
    "simple",
    "tell",
    "person",
    "need",
    "focus",
    "immediately",
    "indication",
    "things",
    "need",
    "change",
    "either",
    "going",
    "wrong",
    "direction",
    "going",
    "put",
    "information",
    "nice",
    "know",
    "dashboard",
    "need",
    "know",
    "basis",
    "especially",
    "want",
    "get",
    "action",
    "second",
    "part",
    "video",
    "listen",
    "data",
    "professional",
    "discuss",
    "cognos",
    "analytics",
    "help",
    "create",
    "outstanding",
    "visualization",
    "dashboards",
    "presenting",
    "data",
    "results",
    "tell",
    "us",
    "use",
    "cognos",
    "analytics",
    "create",
    "visualization",
    "dashboards",
    "presenting",
    "data",
    "results",
    "ibm",
    "cognitive",
    "analytics",
    "really",
    "help",
    "create",
    "better",
    "visualization",
    "dashboards",
    "number",
    "different",
    "ways",
    "starting",
    "templates",
    "allowing",
    "quickly",
    "select",
    "template",
    "simply",
    "drag",
    "drop",
    "visualizations",
    "slots",
    "help",
    "create",
    "something",
    "visually",
    "compelling",
    "effectively",
    "easily",
    "also",
    "call",
    "visualization",
    "recommender",
    "grab",
    "couple",
    "fields",
    "drag",
    "onto",
    "canvas",
    "recommend",
    "visualization",
    "like",
    "one",
    "recommend",
    "right",
    "bat",
    "ability",
    "go",
    "start",
    "select",
    "different",
    "visualizations",
    "recommendations",
    "top",
    "also",
    "started",
    "infuse",
    "ai",
    "frame",
    "start",
    "system",
    "actually",
    "generate",
    "entire",
    "dashboard",
    "conversation",
    "assistant",
    "ask",
    "questions",
    "focus",
    "particular",
    "area",
    "interested",
    "simply",
    "say",
    "generate",
    "dashboard",
    "point",
    "get",
    "beautiful",
    "dashboard",
    "created",
    "laid",
    "nicely",
    "start",
    "use",
    "starting",
    "point",
    "discussions",
    "help",
    "really",
    "understand",
    "data",
    "system",
    "couple",
    "things",
    "wanted",
    "highlight",
    "one",
    "advanced",
    "analytic",
    "capabilities",
    "whether",
    "visualizations",
    "like",
    "key",
    "driver",
    "analysis",
    "ai",
    "infused",
    "forecasting",
    "last",
    "thing",
    "would",
    "ability",
    "share",
    "visualizations",
    "dashboards",
    "clicks",
    "whether",
    "sharing",
    "system",
    "link",
    "whether",
    "pushing",
    "email",
    "even",
    "pushing",
    "slack",
    "channel",
    "start",
    "discussion",
    "music",
    "thank",
    "learned",
    "basics",
    "dashboards",
    "essential",
    "tool",
    "data",
    "analyst",
    "video",
    "look",
    "set",
    "configure",
    "relatively",
    "simple",
    "dashboard",
    "excel",
    "help",
    "us",
    "tell",
    "story",
    "data",
    "creating",
    "first",
    "dashboard",
    "would",
    "first",
    "collected",
    "organized",
    "data",
    "verified",
    "data",
    "worksheet",
    "clean",
    "contain",
    "blank",
    "rows",
    "columns",
    "would",
    "formatted",
    "table",
    "next",
    "would",
    "created",
    "pivot",
    "tables",
    "help",
    "us",
    "analyze",
    "data",
    "would",
    "performed",
    "sorting",
    "filtering",
    "data",
    "pivot",
    "tables",
    "highlight",
    "key",
    "aspects",
    "data",
    "analysis",
    "lastly",
    "would",
    "created",
    "various",
    "data",
    "visualizations",
    "charts",
    "maps",
    "slicers",
    "help",
    "us",
    "tell",
    "story",
    "data",
    "findings",
    "example",
    "car",
    "sales",
    "workbook",
    "already",
    "gone",
    "processes",
    "collecting",
    "cleaning",
    "analyzing",
    "visualizing",
    "data",
    "point",
    "combine",
    "data",
    "analysis",
    "visualizations",
    "digital",
    "dashboard",
    "help",
    "us",
    "present",
    "key",
    "data",
    "findings",
    "stakeholders",
    "first",
    "thing",
    "need",
    "create",
    "new",
    "worksheet",
    "host",
    "dashboard",
    "give",
    "name",
    "drag",
    "end",
    "tabs",
    "list",
    "workbook",
    "already",
    "created",
    "several",
    "visualizations",
    "use",
    "populate",
    "dashboard",
    "look",
    "worksheet",
    "tabs",
    "contain",
    "various",
    "visualizations",
    "working",
    "throughout",
    "course",
    "use",
    "copying",
    "charts",
    "visualizations",
    "dashboard",
    "copy",
    "pie",
    "chart",
    "worksheet",
    "paste",
    "dashboard",
    "grab",
    "copy",
    "3d",
    "column",
    "chart",
    "paste",
    "also",
    "copy",
    "3d",
    "area",
    "chart",
    "pivot",
    "chart",
    "sheet",
    "dashboard",
    "grab",
    "tree",
    "map",
    "chart",
    "copy",
    "dashboard",
    "let",
    "copy",
    "scatter",
    "plot",
    "chart",
    "also",
    "copy",
    "histogram",
    "copy",
    "dashboard",
    "worksheet",
    "let",
    "take",
    "copy",
    "map",
    "chart",
    "visualization",
    "let",
    "also",
    "copy",
    "sparklines",
    "visualization",
    "new",
    "dashboard",
    "worksheet",
    "lastly",
    "let",
    "go",
    "back",
    "line",
    "pi",
    "bar",
    "worksheet",
    "select",
    "line",
    "chart",
    "bar",
    "charts",
    "copy",
    "dashboard",
    "worksheet",
    "okay",
    "lot",
    "different",
    "visualizations",
    "dashboard",
    "make",
    "things",
    "look",
    "little",
    "better",
    "resizing",
    "visualization",
    "objects",
    "moving",
    "around",
    "bit",
    "resized",
    "visualizations",
    "moved",
    "things",
    "around",
    "could",
    "zoom",
    "see",
    "visualizations",
    "screen",
    "remember",
    "heard",
    "subject",
    "matter",
    "experts",
    "expert",
    "viewpoints",
    "video",
    "sometimes",
    "less",
    "one",
    "two",
    "experts",
    "mentioned",
    "provide",
    "display",
    "much",
    "information",
    "key",
    "points",
    "sometimes",
    "get",
    "lost",
    "create",
    "copy",
    "dashboard",
    "another",
    "worksheet",
    "thin",
    "amount",
    "visualizations",
    "maybe",
    "make",
    "focused",
    "highlight",
    "one",
    "two",
    "important",
    "views",
    "want",
    "convey",
    "first",
    "make",
    "copy",
    "dashboard",
    "worksheet",
    "move",
    "end",
    "worksheets",
    "tabs",
    "copy",
    "dashboard",
    "2",
    "worksheet",
    "delete",
    "superfluous",
    "charts",
    "let",
    "first",
    "remove",
    "tree",
    "map",
    "giving",
    "us",
    "almost",
    "information",
    "pie",
    "chart",
    "remove",
    "3d",
    "column",
    "chart",
    "essentially",
    "data",
    "3d",
    "area",
    "chart",
    "let",
    "also",
    "lose",
    "scatter",
    "plot",
    "histogram",
    "sparklines",
    "really",
    "key",
    "message",
    "let",
    "copy",
    "slicer",
    "line",
    "pi",
    "bar",
    "worksheet",
    "dashboard",
    "give",
    "us",
    "interactivity",
    "let",
    "zoom",
    "back",
    "arranging",
    "resizing",
    "visualizations",
    "make",
    "dashboard",
    "look",
    "little",
    "sharper",
    "rearranged",
    "resized",
    "visualizations",
    "make",
    "dashboard",
    "look",
    "little",
    "leaner",
    "tidier",
    "also",
    "make",
    "style",
    "color",
    "changes",
    "give",
    "dashboard",
    "consistent",
    "look",
    "feel",
    "apply",
    "style",
    "chart",
    "elements",
    "apply",
    "dark",
    "gray",
    "style",
    "monochromatic",
    "green",
    "colors",
    "3d",
    "area",
    "chart",
    "line",
    "chart",
    "pie",
    "chart",
    "bar",
    "chart",
    "map",
    "chart",
    "recolor",
    "slicer",
    "fit",
    "color",
    "scheme",
    "things",
    "look",
    "lot",
    "better",
    "professional",
    "last",
    "thing",
    "remove",
    "excel",
    "interface",
    "elements",
    "bits",
    "unnecessary",
    "screen",
    "clutter",
    "give",
    "us",
    "nice",
    "clean",
    "looking",
    "dashboard",
    "remove",
    "screen",
    "clutters",
    "grid",
    "lines",
    "formula",
    "bar",
    "headings",
    "collapse",
    "ribbon",
    "either",
    "present",
    "dashboard",
    "email",
    "key",
    "stakeholder",
    "includes",
    "interactivity",
    "via",
    "slicer",
    "also",
    "via",
    "filterable",
    "pivot",
    "chart",
    "use",
    "slicer",
    "select",
    "several",
    "ford",
    "car",
    "models",
    "three",
    "charts",
    "related",
    "data",
    "get",
    "updated",
    "time",
    "modify",
    "filters",
    "3d",
    "area",
    "chart",
    "display",
    "ford",
    "cars",
    "instead",
    "chevrolets",
    "switch",
    "pivot",
    "chart",
    "1",
    "worksheet",
    "see",
    "original",
    "data",
    "also",
    "updated",
    "new",
    "filter",
    "make",
    "changes",
    "original",
    "source",
    "data",
    "increasing",
    "value",
    "unit",
    "sales",
    "cars",
    "australia",
    "map",
    "chart",
    "visualization",
    "worksheet",
    "updates",
    "australia",
    "turns",
    "dark",
    "blue",
    "also",
    "map",
    "chart",
    "visualization",
    "dashboard",
    "gets",
    "updated",
    "see",
    "australia",
    "dark",
    "green",
    "map",
    "chart",
    "shows",
    "live",
    "interactive",
    "data",
    "dashboard",
    "creating",
    "clean",
    "focused",
    "interactive",
    "dashboard",
    "major",
    "asset",
    "trying",
    "tell",
    "story",
    "data",
    "video",
    "learned",
    "set",
    "configure",
    "relatively",
    "simple",
    "dashboard",
    "excel",
    "help",
    "us",
    "tell",
    "story",
    "data",
    "next",
    "video",
    "get",
    "introduction",
    "ibm",
    "cognos",
    "analytics",
    "data",
    "analysis",
    "visualization",
    "business",
    "intelligence",
    "platform",
    "music",
    "video",
    "going",
    "cover",
    "couple",
    "things",
    "first",
    "quick",
    "overview",
    "cognos",
    "analytics",
    "going",
    "show",
    "sign",
    "trial",
    "cognitive",
    "analytics",
    "tool",
    "allowing",
    "perform",
    "mode",
    "1",
    "mode",
    "2",
    "type",
    "analysis",
    "one",
    "product",
    "contains",
    "number",
    "different",
    "tools",
    "ability",
    "model",
    "data",
    "explore",
    "data",
    "create",
    "compelling",
    "advanced",
    "analytic",
    "visualizations",
    "like",
    "key",
    "driver",
    "analysis",
    "display",
    "natural",
    "language",
    "generated",
    "based",
    "data",
    "create",
    "reports",
    "specific",
    "tailored",
    "individual",
    "users",
    "either",
    "filters",
    "ability",
    "create",
    "bursts",
    "also",
    "ability",
    "create",
    "fantastic",
    "dashboards",
    "main",
    "focus",
    "particular",
    "course",
    "sign",
    "trial",
    "going",
    "go",
    "try",
    "underscore",
    "cognos",
    "already",
    "account",
    "log",
    "simply",
    "fill",
    "part",
    "form",
    "go",
    "ahead",
    "fill",
    "form",
    "quickly",
    "key",
    "one",
    "take",
    "note",
    "select",
    "data",
    "center",
    "close",
    "particular",
    "geography",
    "system",
    "spun",
    "us",
    "go",
    "ahead",
    "actually",
    "launch",
    "directly",
    "workflow",
    "go",
    "ahead",
    "either",
    "manage",
    "subscription",
    "button",
    "alternatively",
    "always",
    "system",
    "url",
    "next",
    "video",
    "take",
    "little",
    "bit",
    "around",
    "navigate",
    "use",
    "cognos",
    "dashboard",
    "capabilities",
    "music",
    "particular",
    "video",
    "cover",
    "upload",
    "spreadsheets",
    "general",
    "navigation",
    "cognos",
    "analytics",
    "start",
    "new",
    "dashboard",
    "using",
    "dashboard",
    "templates",
    "well",
    "navigating",
    "within",
    "cognos",
    "analogux",
    "dashboard",
    "environment",
    "two",
    "main",
    "navigation",
    "areas",
    "cognitive",
    "analytics",
    "along",
    "left",
    "hand",
    "side",
    "well",
    "along",
    "top",
    "change",
    "update",
    "based",
    "area",
    "product",
    "today",
    "cognos",
    "connect",
    "number",
    "databases",
    "going",
    "start",
    "simply",
    "uploading",
    "excel",
    "file",
    "one",
    "two",
    "ways",
    "come",
    "new",
    "select",
    "upload",
    "files",
    "navigate",
    "find",
    "file",
    "question",
    "alternatively",
    "drag",
    "drop",
    "file",
    "onto",
    "main",
    "landing",
    "page",
    "take",
    "us",
    "directly",
    "experience",
    "looking",
    "case",
    "dashboard",
    "notice",
    "says",
    "uploaded",
    "content",
    "land",
    "content",
    "left",
    "hand",
    "navigation",
    "whether",
    "plus",
    "upload",
    "still",
    "land",
    "place",
    "content",
    "taken",
    "moved",
    "around",
    "shared",
    "area",
    "within",
    "team",
    "content",
    "file",
    "uploads",
    "notice",
    "see",
    "something",
    "says",
    "analyzing",
    "allows",
    "us",
    "integrate",
    "data",
    "get",
    "understanding",
    "data",
    "order",
    "able",
    "help",
    "make",
    "better",
    "assumptions",
    "decisions",
    "look",
    "build",
    "content",
    "first",
    "thing",
    "go",
    "build",
    "dashboard",
    "select",
    "template",
    "see",
    "number",
    "based",
    "trying",
    "achieve",
    "many",
    "visualizations",
    "types",
    "may",
    "want",
    "select",
    "something",
    "specific",
    "case",
    "choose",
    "one",
    "four",
    "one",
    "larger",
    "space",
    "dashboard",
    "notice",
    "pane",
    "uploaded",
    "file",
    "column",
    "headers",
    "displayed",
    "things",
    "want",
    "highlight",
    "terms",
    "navigation",
    "help",
    "experience",
    "cognos",
    "analytics",
    "second",
    "pin",
    "allows",
    "pin",
    "different",
    "visualizations",
    "reuse",
    "dashboards",
    "across",
    "system",
    "come",
    "back",
    "assistant",
    "future",
    "video",
    "allows",
    "ask",
    "questions",
    "natural",
    "language",
    "system",
    "tell",
    "little",
    "bit",
    "data",
    "well",
    "provide",
    "visualizations",
    "next",
    "system",
    "view",
    "different",
    "visualizations",
    "support",
    "dashboard",
    "well",
    "ability",
    "upload",
    "custom",
    "visualization",
    "one",
    "meets",
    "needs",
    "final",
    "one",
    "additional",
    "widgets",
    "whether",
    "text",
    "images",
    "video",
    "hyperlinks",
    "shapes",
    "viewed",
    "next",
    "video",
    "dive",
    "little",
    "bit",
    "deeper",
    "specifically",
    "create",
    "dashboards",
    "thank",
    "music",
    "video",
    "cover",
    "creating",
    "simple",
    "dashboards",
    "cognos",
    "analytics",
    "cover",
    "variety",
    "different",
    "methods",
    "creating",
    "visualization",
    "whether",
    "automatic",
    "generation",
    "manually",
    "populating",
    "slots",
    "using",
    "assistant",
    "also",
    "cover",
    "filter",
    "within",
    "cognos",
    "analytics",
    "dashboard",
    "mentioned",
    "data",
    "uploaded",
    "took",
    "look",
    "data",
    "tried",
    "understand",
    "types",
    "data",
    "included",
    "denoted",
    "icon",
    "front",
    "elements",
    "case",
    "order",
    "id",
    "actually",
    "want",
    "switch",
    "change",
    "change",
    "properties",
    "measure",
    "identifier",
    "done",
    "let",
    "go",
    "ahead",
    "start",
    "create",
    "visualizations",
    "simply",
    "grab",
    "tree",
    "drag",
    "onto",
    "canvas",
    "case",
    "drop",
    "top",
    "box",
    "fill",
    "space",
    "available",
    "denoted",
    "template",
    "next",
    "look",
    "number",
    "orders",
    "counting",
    "number",
    "order",
    "ids",
    "case",
    "determine",
    "best",
    "visualization",
    "identifier",
    "list",
    "go",
    "ahead",
    "take",
    "look",
    "recommended",
    "visualizations",
    "case",
    "know",
    "want",
    "turn",
    "summary",
    "go",
    "manually",
    "select",
    "next",
    "let",
    "look",
    "quantity",
    "ordered",
    "finally",
    "finish",
    "average",
    "sale",
    "case",
    "drag",
    "sales",
    "onto",
    "canvas",
    "change",
    "summarization",
    "sum",
    "average",
    "like",
    "kpis",
    "able",
    "monitor",
    "track",
    "way",
    "search",
    "create",
    "visualizations",
    "selecting",
    "specific",
    "visualization",
    "want",
    "dragging",
    "onto",
    "canvas",
    "case",
    "interested",
    "looking",
    "sales",
    "across",
    "world",
    "based",
    "countries",
    "case",
    "find",
    "country",
    "alternatively",
    "lot",
    "data",
    "simply",
    "start",
    "type",
    "top",
    "see",
    "country",
    "comes",
    "surface",
    "said",
    "wanted",
    "take",
    "look",
    "sales",
    "case",
    "look",
    "specifically",
    "country",
    "see",
    "go",
    "terms",
    "latitude",
    "longitude",
    "manually",
    "drag",
    "drop",
    "make",
    "big",
    "small",
    "want",
    "see",
    "show",
    "percentages",
    "much",
    "real",
    "estate",
    "actually",
    "taking",
    "course",
    "visualizations",
    "number",
    "properties",
    "wo",
    "get",
    "much",
    "detail",
    "something",
    "looking",
    "take",
    "look",
    "properties",
    "likely",
    "final",
    "way",
    "show",
    "creating",
    "visualizations",
    "assistant",
    "case",
    "may",
    "idea",
    "want",
    "look",
    "may",
    "simply",
    "ask",
    "suggest",
    "questions",
    "offer",
    "insight",
    "may",
    "thinking",
    "case",
    "keep",
    "simple",
    "look",
    "product",
    "line",
    "top",
    "sales",
    "click",
    "presented",
    "visualization",
    "well",
    "alternatives",
    "based",
    "particular",
    "visualization",
    "happy",
    "view",
    "simply",
    "drag",
    "drop",
    "onto",
    "canvas",
    "becomes",
    "visualization",
    "alongside",
    "others",
    "continue",
    "resize",
    "dashboard",
    "designed",
    "meant",
    "interactive",
    "case",
    "interested",
    "seeing",
    "rest",
    "dashboard",
    "specific",
    "lines",
    "classic",
    "cars",
    "click",
    "classic",
    "cars",
    "see",
    "visualizations",
    "updating",
    "specifically",
    "filter",
    "classic",
    "cars",
    "one",
    "way",
    "multiple",
    "clicks",
    "alternatively",
    "take",
    "particular",
    "field",
    "drop",
    "perhaps",
    "interested",
    "particular",
    "status",
    "could",
    "drive",
    "tabs",
    "wanted",
    "specific",
    "tab",
    "able",
    "choose",
    "one",
    "many",
    "case",
    "maybe",
    "want",
    "take",
    "look",
    "much",
    "hold",
    "status",
    "see",
    "updated",
    "reflect",
    "simply",
    "hold",
    "looks",
    "like",
    "worldwide",
    "view",
    "holds",
    "couple",
    "countries",
    "positive",
    "next",
    "video",
    "delve",
    "deeper",
    "advanced",
    "capabilities",
    "dashboard",
    "music",
    "video",
    "going",
    "cover",
    "advanced",
    "capabilities",
    "cognos",
    "analogux",
    "dashboards",
    "cover",
    "create",
    "calculations",
    "leverage",
    "navigation",
    "paths",
    "excludes",
    "visualizations",
    "well",
    "set",
    "top",
    "bottom",
    "visualization",
    "much",
    "like",
    "excel",
    "dashboard",
    "create",
    "calculations",
    "list",
    "number",
    "different",
    "options",
    "take",
    "look",
    "alternatively",
    "simply",
    "start",
    "typing",
    "offer",
    "suggestions",
    "case",
    "interested",
    "looking",
    "msrp",
    "minus",
    "price",
    "sell",
    "unit",
    "give",
    "us",
    "margin",
    "calculation",
    "calculation",
    "treated",
    "exactly",
    "fields",
    "case",
    "let",
    "select",
    "margin",
    "look",
    "product",
    "line",
    "bring",
    "case",
    "see",
    "trains",
    "well",
    "actually",
    "negative",
    "margin",
    "us",
    "may",
    "want",
    "drill",
    "little",
    "bit",
    "create",
    "call",
    "navigation",
    "path",
    "case",
    "choose",
    "field",
    "data",
    "able",
    "drill",
    "case",
    "want",
    "start",
    "product",
    "line",
    "perhaps",
    "want",
    "see",
    "customers",
    "ultimately",
    "specific",
    "orders",
    "right",
    "click",
    "trains",
    "start",
    "drill",
    "case",
    "see",
    "offenders",
    "negatives",
    "look",
    "particular",
    "field",
    "go",
    "ahead",
    "look",
    "something",
    "like",
    "many",
    "gifts",
    "drill",
    "little",
    "bit",
    "see",
    "well",
    "one",
    "positive",
    "ones",
    "negatives",
    "let",
    "take",
    "another",
    "look",
    "something",
    "little",
    "bit",
    "different",
    "look",
    "sales",
    "status",
    "product",
    "line",
    "case",
    "still",
    "filtered",
    "trains",
    "may",
    "want",
    "go",
    "back",
    "navigate",
    "case",
    "still",
    "filtered",
    "trained",
    "let",
    "unclick",
    "get",
    "back",
    "initial",
    "starting",
    "point",
    "case",
    "see",
    "shift",
    "really",
    "dramatically",
    "impact",
    "go",
    "ahead",
    "choose",
    "exclude",
    "shipped",
    "items",
    "get",
    "much",
    "better",
    "review",
    "everything",
    "else",
    "going",
    "statuses",
    "another",
    "thing",
    "could",
    "large",
    "number",
    "data",
    "set",
    "data",
    "points",
    "case",
    "perhaps",
    "customer",
    "sales",
    "customer",
    "name",
    "sales",
    "may",
    "want",
    "filter",
    "important",
    "ones",
    "case",
    "come",
    "sales",
    "right",
    "click",
    "ask",
    "show",
    "us",
    "top",
    "x",
    "number",
    "case",
    "default",
    "see",
    "top",
    "10",
    "customers",
    "one",
    "last",
    "one",
    "fun",
    "actually",
    "create",
    "infographics",
    "fly",
    "case",
    "got",
    "sales",
    "take",
    "one",
    "shapes",
    "perhaps",
    "piggy",
    "bank",
    "drop",
    "top",
    "like",
    "created",
    "infographic",
    "music",
    "type",
    "python",
    "represents",
    "different",
    "types",
    "data",
    "video",
    "discuss",
    "widely",
    "used",
    "types",
    "python",
    "different",
    "types",
    "python",
    "integers",
    "like",
    "11",
    "real",
    "numbers",
    "like",
    "even",
    "words",
    "integers",
    "real",
    "numbers",
    "words",
    "expressed",
    "different",
    "data",
    "types",
    "following",
    "chart",
    "summarizes",
    "three",
    "data",
    "types",
    "last",
    "examples",
    "first",
    "column",
    "indicates",
    "expression",
    "second",
    "column",
    "indicates",
    "data",
    "type",
    "see",
    "actual",
    "data",
    "type",
    "python",
    "using",
    "type",
    "command",
    "int",
    "stands",
    "integer",
    "float",
    "stands",
    "float",
    "essentially",
    "real",
    "number",
    "type",
    "string",
    "sequence",
    "characters",
    "integers",
    "integers",
    "negative",
    "positive",
    "noted",
    "finite",
    "range",
    "integers",
    "quite",
    "large",
    "floats",
    "real",
    "numbers",
    "include",
    "integers",
    "also",
    "numbers",
    "integers",
    "consider",
    "numbers",
    "0",
    "select",
    "numbers",
    "numbers",
    "floats",
    "similarly",
    "consider",
    "numbers",
    "select",
    "numbers",
    "floats",
    "well",
    "continue",
    "process",
    "zooming",
    "different",
    "numbers",
    "course",
    "limit",
    "quite",
    "small",
    "change",
    "type",
    "expression",
    "python",
    "called",
    "typecasting",
    "convert",
    "int",
    "float",
    "example",
    "convert",
    "cast",
    "integer",
    "2",
    "float",
    "nothing",
    "really",
    "changes",
    "cast",
    "float",
    "integer",
    "must",
    "careful",
    "example",
    "cast",
    "float",
    "1",
    "lose",
    "information",
    "string",
    "contains",
    "integer",
    "value",
    "convert",
    "int",
    "convert",
    "string",
    "contains",
    "value",
    "get",
    "error",
    "check",
    "examples",
    "lab",
    "convert",
    "int",
    "string",
    "float",
    "string",
    "boolean",
    "another",
    "important",
    "type",
    "python",
    "boolean",
    "take",
    "two",
    "values",
    "first",
    "value",
    "true",
    "remember",
    "use",
    "uppercase",
    "boolean",
    "values",
    "also",
    "false",
    "uppercase",
    "f",
    "using",
    "type",
    "command",
    "boolean",
    "value",
    "obtain",
    "term",
    "bool",
    "short",
    "boolean",
    "cast",
    "boolean",
    "true",
    "integer",
    "float",
    "get",
    "cast",
    "boolean",
    "false",
    "integer",
    "float",
    "get",
    "zero",
    "cast",
    "one",
    "boolean",
    "get",
    "true",
    "similarly",
    "cast",
    "zero",
    "boolean",
    "get",
    "false",
    "check",
    "labs",
    "examples",
    "check",
    "kinds",
    "types",
    "python",
    "music",
    "video",
    "cover",
    "expressions",
    "variables",
    "expressions",
    "describe",
    "type",
    "operation",
    "computers",
    "perform",
    "expressions",
    "operations",
    "python",
    "performs",
    "example",
    "basic",
    "arithmetic",
    "operations",
    "like",
    "adding",
    "multiple",
    "numbers",
    "result",
    "case",
    "call",
    "numbers",
    "operands",
    "math",
    "symbols",
    "case",
    "addition",
    "called",
    "operators",
    "perform",
    "operations",
    "subtraction",
    "using",
    "subtraction",
    "sign",
    "case",
    "result",
    "negative",
    "number",
    "perform",
    "multiplication",
    "operations",
    "using",
    "asterisk",
    "result",
    "case",
    "operands",
    "given",
    "negative",
    "asterisks",
    "also",
    "perform",
    "division",
    "forward",
    "slash",
    "25",
    "divided",
    "5",
    "5",
    "25",
    "divided",
    "6",
    "approximately",
    "python",
    "3",
    "version",
    "using",
    "course",
    "result",
    "float",
    "use",
    "double",
    "slash",
    "integer",
    "division",
    "result",
    "rounded",
    "aware",
    "cases",
    "results",
    "regular",
    "division",
    "python",
    "follows",
    "mathematical",
    "conventions",
    "performing",
    "mathematical",
    "expressions",
    "following",
    "operations",
    "different",
    "order",
    "cases",
    "python",
    "performs",
    "multiplication",
    "addition",
    "obtain",
    "final",
    "result",
    "lot",
    "operations",
    "python",
    "check",
    "labs",
    "examples",
    "also",
    "covering",
    "complex",
    "operations",
    "throughout",
    "course",
    "expressions",
    "parentheses",
    "performed",
    "first",
    "multiply",
    "result",
    "result",
    "let",
    "look",
    "variables",
    "use",
    "variables",
    "store",
    "values",
    "case",
    "assign",
    "value",
    "1",
    "variable",
    "underscore",
    "variable",
    "using",
    "assignment",
    "operator",
    "equal",
    "sign",
    "use",
    "value",
    "somewhere",
    "else",
    "code",
    "typing",
    "exact",
    "name",
    "variable",
    "use",
    "colon",
    "denote",
    "value",
    "variable",
    "assign",
    "new",
    "value",
    "underscore",
    "variable",
    "using",
    "assignment",
    "operator",
    "assign",
    "value",
    "variable",
    "value",
    "old",
    "value",
    "variable",
    "important",
    "store",
    "results",
    "expressions",
    "example",
    "add",
    "several",
    "values",
    "assign",
    "result",
    "x",
    "x",
    "stores",
    "result",
    "also",
    "perform",
    "operations",
    "x",
    "save",
    "result",
    "new",
    "variable",
    "value",
    "could",
    "also",
    "perform",
    "operations",
    "x",
    "assign",
    "value",
    "x",
    "variable",
    "x",
    "value",
    "old",
    "value",
    "x",
    "important",
    "use",
    "type",
    "command",
    "variables",
    "well",
    "good",
    "practice",
    "use",
    "meaningful",
    "variable",
    "names",
    "keep",
    "track",
    "variable",
    "let",
    "say",
    "would",
    "like",
    "convert",
    "number",
    "minutes",
    "highlighted",
    "examples",
    "number",
    "hours",
    "following",
    "music",
    "data",
    "set",
    "call",
    "variable",
    "contains",
    "total",
    "number",
    "minutes",
    "total",
    "underscore",
    "min",
    "common",
    "use",
    "underscore",
    "represent",
    "start",
    "new",
    "word",
    "could",
    "also",
    "use",
    "capital",
    "letter",
    "call",
    "variable",
    "contains",
    "total",
    "number",
    "hours",
    "total",
    "underscore",
    "hour",
    "obtain",
    "total",
    "number",
    "hours",
    "dividing",
    "total",
    "underscore",
    "min",
    "result",
    "approximately",
    "hours",
    "modify",
    "value",
    "first",
    "variable",
    "value",
    "variable",
    "change",
    "final",
    "result",
    "values",
    "change",
    "accordingly",
    "modify",
    "rest",
    "code",
    "music",
    "python",
    "string",
    "sequence",
    "characters",
    "string",
    "contained",
    "within",
    "two",
    "quotes",
    "could",
    "also",
    "use",
    "single",
    "quotes",
    "string",
    "spaces",
    "digits",
    "string",
    "also",
    "special",
    "characters",
    "bind",
    "assign",
    "string",
    "another",
    "variable",
    "helpful",
    "think",
    "string",
    "ordered",
    "sequence",
    "element",
    "sequence",
    "accessed",
    "using",
    "index",
    "represented",
    "array",
    "numbers",
    "first",
    "index",
    "accessed",
    "follows",
    "access",
    "index",
    "moreover",
    "access",
    "13th",
    "index",
    "also",
    "use",
    "negative",
    "indexing",
    "strings",
    "last",
    "element",
    "given",
    "index",
    "negative",
    "one",
    "first",
    "element",
    "obtained",
    "index",
    "negative",
    "15",
    "bind",
    "string",
    "another",
    "variable",
    "helpful",
    "think",
    "string",
    "list",
    "tuple",
    "treat",
    "string",
    "sequence",
    "perform",
    "sequence",
    "operations",
    "also",
    "input",
    "stride",
    "value",
    "follows",
    "two",
    "indicates",
    "select",
    "every",
    "second",
    "variable",
    "also",
    "incorporate",
    "slicing",
    "case",
    "return",
    "every",
    "second",
    "value",
    "index",
    "use",
    "lend",
    "command",
    "obtain",
    "length",
    "string",
    "15",
    "elements",
    "result",
    "concatenate",
    "combine",
    "strings",
    "use",
    "addition",
    "symbols",
    "result",
    "new",
    "string",
    "combination",
    "replicate",
    "values",
    "string",
    "simply",
    "multiply",
    "string",
    "number",
    "times",
    "would",
    "like",
    "replicate",
    "case",
    "three",
    "result",
    "new",
    "string",
    "new",
    "string",
    "consists",
    "three",
    "copies",
    "original",
    "string",
    "means",
    "change",
    "value",
    "string",
    "create",
    "new",
    "string",
    "example",
    "create",
    "new",
    "string",
    "setting",
    "original",
    "variable",
    "concatenated",
    "new",
    "string",
    "result",
    "new",
    "string",
    "changes",
    "michael",
    "jackson",
    "michael",
    "jackson",
    "best",
    "strings",
    "immutable",
    "backslashes",
    "represent",
    "beginning",
    "escape",
    "sequences",
    "escape",
    "sequences",
    "represent",
    "strings",
    "may",
    "difficult",
    "input",
    "example",
    "backslashes",
    "n",
    "represent",
    "new",
    "line",
    "output",
    "given",
    "new",
    "line",
    "backslashes",
    "n",
    "encountered",
    "similarly",
    "backslash",
    "represents",
    "tab",
    "output",
    "given",
    "tab",
    "backslash",
    "want",
    "place",
    "backslash",
    "string",
    "use",
    "double",
    "backslash",
    "result",
    "backslash",
    "escape",
    "sequence",
    "also",
    "place",
    "r",
    "front",
    "string",
    "let",
    "take",
    "look",
    "string",
    "methods",
    "strings",
    "sequences",
    "apply",
    "methods",
    "work",
    "lists",
    "tuples",
    "strings",
    "also",
    "second",
    "set",
    "methods",
    "work",
    "strings",
    "apply",
    "method",
    "string",
    "get",
    "new",
    "string",
    "b",
    "different",
    "let",
    "examples",
    "let",
    "try",
    "method",
    "upper",
    "method",
    "converts",
    "lowercase",
    "characters",
    "uppercase",
    "characters",
    "example",
    "set",
    "variable",
    "following",
    "value",
    "apply",
    "method",
    "upper",
    "set",
    "equal",
    "b",
    "value",
    "b",
    "similar",
    "characters",
    "uppercase",
    "method",
    "replaces",
    "segment",
    "string",
    "substring",
    "new",
    "string",
    "input",
    "part",
    "string",
    "would",
    "like",
    "change",
    "second",
    "argument",
    "would",
    "like",
    "exchange",
    "segment",
    "result",
    "new",
    "string",
    "segment",
    "changed",
    "method",
    "find",
    "find",
    "substrings",
    "argument",
    "substring",
    "would",
    "like",
    "find",
    "output",
    "first",
    "index",
    "sequence",
    "find",
    "substring",
    "jack",
    "substring",
    "string",
    "output",
    "negative",
    "check",
    "labs",
    "examples",
    "music",
    "video",
    "cover",
    "lists",
    "tuples",
    "called",
    "compound",
    "data",
    "types",
    "one",
    "key",
    "types",
    "data",
    "structures",
    "python",
    "tuples",
    "tuples",
    "ordered",
    "sequence",
    "tuple",
    "ratings",
    "tuples",
    "expressed",
    "comma",
    "separated",
    "elements",
    "within",
    "parentheses",
    "values",
    "inside",
    "parentheses",
    "python",
    "different",
    "types",
    "strings",
    "integer",
    "float",
    "contained",
    "tuple",
    "type",
    "variable",
    "tuple",
    "element",
    "tuple",
    "accessed",
    "via",
    "index",
    "following",
    "table",
    "represents",
    "relationship",
    "index",
    "elements",
    "tuple",
    "first",
    "element",
    "accessed",
    "name",
    "tuple",
    "followed",
    "square",
    "bracket",
    "index",
    "number",
    "case",
    "zero",
    "access",
    "second",
    "element",
    "follows",
    "also",
    "access",
    "last",
    "element",
    "python",
    "use",
    "negative",
    "index",
    "relationship",
    "follows",
    "corresponding",
    "values",
    "shown",
    "concatenate",
    "combine",
    "tuples",
    "adding",
    "result",
    "following",
    "following",
    "index",
    "would",
    "like",
    "multiple",
    "elements",
    "tuple",
    "could",
    "also",
    "slice",
    "tuples",
    "example",
    "want",
    "first",
    "three",
    "elements",
    "use",
    "following",
    "command",
    "last",
    "index",
    "one",
    "larger",
    "index",
    "want",
    "similarly",
    "want",
    "last",
    "two",
    "elements",
    "use",
    "following",
    "command",
    "notice",
    "last",
    "index",
    "one",
    "larger",
    "length",
    "tuple",
    "use",
    "len",
    "command",
    "obtain",
    "length",
    "tuple",
    "five",
    "elements",
    "result",
    "five",
    "tuples",
    "immutable",
    "means",
    "ca",
    "change",
    "see",
    "important",
    "let",
    "see",
    "happens",
    "set",
    "variable",
    "ratings",
    "1",
    "ratings",
    "let",
    "use",
    "image",
    "provide",
    "simplified",
    "explanation",
    "going",
    "variable",
    "contain",
    "tuple",
    "references",
    "immutable",
    "tuple",
    "object",
    "see",
    "objects",
    "classes",
    "module",
    "objects",
    "let",
    "say",
    "want",
    "change",
    "element",
    "index",
    "tuples",
    "immutable",
    "ca",
    "therefore",
    "ratings",
    "1",
    "affected",
    "change",
    "rating",
    "tuple",
    "immutable",
    "ca",
    "change",
    "assign",
    "different",
    "tuple",
    "ratings",
    "variable",
    "variable",
    "ratings",
    "references",
    "another",
    "tuple",
    "consequence",
    "immutability",
    "would",
    "like",
    "manipulate",
    "tuple",
    "must",
    "create",
    "new",
    "tuple",
    "instead",
    "example",
    "would",
    "like",
    "sort",
    "tuple",
    "use",
    "function",
    "sorted",
    "input",
    "original",
    "tuple",
    "output",
    "new",
    "sorted",
    "list",
    "functions",
    "see",
    "video",
    "functions",
    "tuple",
    "contain",
    "tuples",
    "well",
    "complex",
    "data",
    "types",
    "called",
    "nesting",
    "access",
    "elements",
    "using",
    "standard",
    "indexing",
    "methods",
    "select",
    "index",
    "tuple",
    "index",
    "convention",
    "applies",
    "access",
    "values",
    "tuple",
    "example",
    "could",
    "access",
    "second",
    "element",
    "apply",
    "indexing",
    "directly",
    "tuple",
    "variable",
    "nt",
    "helpful",
    "visualize",
    "tree",
    "visualize",
    "nesting",
    "tree",
    "tuple",
    "following",
    "indexes",
    "consider",
    "indexes",
    "tuples",
    "see",
    "tuple",
    "index",
    "2",
    "contains",
    "tuple",
    "two",
    "elements",
    "access",
    "two",
    "indexes",
    "convention",
    "applies",
    "index",
    "access",
    "elements",
    "tuples",
    "well",
    "continue",
    "process",
    "even",
    "access",
    "deeper",
    "levels",
    "tree",
    "adding",
    "another",
    "square",
    "bracket",
    "access",
    "different",
    "characters",
    "string",
    "various",
    "elements",
    "second",
    "tuple",
    "contained",
    "first",
    "lists",
    "also",
    "popular",
    "data",
    "structure",
    "python",
    "lists",
    "also",
    "ordered",
    "sequence",
    "list",
    "l",
    "list",
    "represented",
    "square",
    "brackets",
    "many",
    "respects",
    "lists",
    "like",
    "tuples",
    "one",
    "key",
    "difference",
    "mutable",
    "lists",
    "contain",
    "strings",
    "floats",
    "integers",
    "nest",
    "lists",
    "also",
    "nest",
    "tuples",
    "data",
    "structures",
    "indexing",
    "conventions",
    "apply",
    "nesting",
    "like",
    "tuples",
    "element",
    "list",
    "accessed",
    "via",
    "index",
    "following",
    "table",
    "represents",
    "relationship",
    "index",
    "elements",
    "list",
    "first",
    "element",
    "accessed",
    "name",
    "list",
    "followed",
    "square",
    "bracket",
    "index",
    "number",
    "case",
    "zero",
    "access",
    "second",
    "element",
    "follows",
    "also",
    "access",
    "last",
    "element",
    "python",
    "use",
    "negative",
    "index",
    "relationship",
    "follows",
    "corresponding",
    "indexes",
    "follows",
    "also",
    "perform",
    "slicing",
    "lists",
    "example",
    "want",
    "last",
    "two",
    "elements",
    "list",
    "use",
    "following",
    "command",
    "notice",
    "last",
    "index",
    "one",
    "larger",
    "length",
    "list",
    "index",
    "conventions",
    "lists",
    "tuples",
    "identical",
    "check",
    "labs",
    "examples",
    "concatenate",
    "combine",
    "lists",
    "adding",
    "result",
    "following",
    "new",
    "list",
    "following",
    "indices",
    "lists",
    "mutable",
    "therefore",
    "change",
    "example",
    "apply",
    "method",
    "extends",
    "adding",
    "dot",
    "followed",
    "name",
    "method",
    "parentheses",
    "argument",
    "inside",
    "parentheses",
    "new",
    "list",
    "going",
    "concatenate",
    "original",
    "list",
    "case",
    "instead",
    "creating",
    "new",
    "list",
    "l1",
    "original",
    "list",
    "l",
    "modified",
    "adding",
    "two",
    "new",
    "elements",
    "learn",
    "methods",
    "check",
    "video",
    "objects",
    "classes",
    "another",
    "similar",
    "method",
    "append",
    "apply",
    "pen",
    "instead",
    "extended",
    "add",
    "one",
    "element",
    "list",
    "look",
    "index",
    "one",
    "element",
    "index",
    "3",
    "contains",
    "list",
    "appended",
    "every",
    "time",
    "apply",
    "method",
    "list",
    "changes",
    "apply",
    "extend",
    "add",
    "two",
    "new",
    "elements",
    "list",
    "list",
    "l",
    "modified",
    "adding",
    "two",
    "new",
    "elements",
    "append",
    "string",
    "change",
    "list",
    "adding",
    "string",
    "lists",
    "mutable",
    "change",
    "example",
    "change",
    "first",
    "element",
    "follows",
    "list",
    "becomes",
    "hard",
    "rock",
    "10",
    "delete",
    "element",
    "list",
    "using",
    "dell",
    "command",
    "simply",
    "indicate",
    "list",
    "item",
    "would",
    "like",
    "remove",
    "argument",
    "example",
    "would",
    "like",
    "remove",
    "first",
    "element",
    "result",
    "becomes",
    "10",
    "delete",
    "second",
    "element",
    "operation",
    "removes",
    "second",
    "element",
    "list",
    "convert",
    "string",
    "list",
    "using",
    "split",
    "example",
    "method",
    "split",
    "converts",
    "every",
    "group",
    "characters",
    "separated",
    "space",
    "element",
    "list",
    "use",
    "split",
    "function",
    "separate",
    "strings",
    "specific",
    "character",
    "known",
    "delimiter",
    "simply",
    "pass",
    "delimiter",
    "would",
    "like",
    "split",
    "argument",
    "case",
    "comma",
    "result",
    "list",
    "element",
    "corresponds",
    "set",
    "characters",
    "separated",
    "comma",
    "set",
    "one",
    "variable",
    "b",
    "equal",
    "b",
    "referencing",
    "list",
    "multiple",
    "names",
    "referring",
    "object",
    "known",
    "aliasing",
    "know",
    "list",
    "slide",
    "first",
    "element",
    "b",
    "set",
    "hard",
    "rock",
    "change",
    "first",
    "element",
    "banana",
    "get",
    "side",
    "effect",
    "value",
    "b",
    "change",
    "consequence",
    "b",
    "referencing",
    "list",
    "therefore",
    "change",
    "list",
    "b",
    "also",
    "changes",
    "check",
    "first",
    "element",
    "b",
    "changing",
    "list",
    "get",
    "banana",
    "instead",
    "hard",
    "rock",
    "clone",
    "list",
    "using",
    "following",
    "syntax",
    "variable",
    "references",
    "one",
    "list",
    "variable",
    "b",
    "references",
    "new",
    "copy",
    "clone",
    "original",
    "list",
    "change",
    "b",
    "change",
    "get",
    "info",
    "list",
    "tuples",
    "many",
    "objects",
    "python",
    "using",
    "help",
    "command",
    "simply",
    "pass",
    "list",
    "tuple",
    "python",
    "object",
    "see",
    "labs",
    "things",
    "lists",
    "thank",
    "let",
    "cover",
    "dictionaries",
    "python",
    "dictionaries",
    "type",
    "collection",
    "python",
    "recall",
    "list",
    "integer",
    "indexes",
    "like",
    "addresses",
    "list",
    "also",
    "elements",
    "dictionary",
    "keys",
    "values",
    "key",
    "analogous",
    "index",
    "like",
    "addresses",
    "integers",
    "usually",
    "characters",
    "values",
    "similar",
    "element",
    "list",
    "contain",
    "information",
    "create",
    "dictionary",
    "use",
    "curly",
    "brackets",
    "keys",
    "first",
    "elements",
    "must",
    "immutable",
    "unique",
    "key",
    "followed",
    "value",
    "separated",
    "colon",
    "values",
    "immutable",
    "mutable",
    "duplicates",
    "key",
    "value",
    "pair",
    "separated",
    "comma",
    "consider",
    "following",
    "example",
    "dictionary",
    "album",
    "title",
    "key",
    "value",
    "release",
    "data",
    "use",
    "yellow",
    "highlight",
    "keys",
    "leave",
    "values",
    "white",
    "helpful",
    "use",
    "table",
    "visualize",
    "dictionary",
    "first",
    "column",
    "represents",
    "keys",
    "second",
    "column",
    "represents",
    "values",
    "add",
    "examples",
    "dictionary",
    "also",
    "assign",
    "dictionary",
    "variable",
    "key",
    "used",
    "look",
    "value",
    "use",
    "square",
    "brackets",
    "argument",
    "key",
    "outputs",
    "value",
    "using",
    "key",
    "back",
    "black",
    "returns",
    "value",
    "key",
    "dark",
    "side",
    "moon",
    "gives",
    "us",
    "value",
    "1973",
    "using",
    "key",
    "bodyguard",
    "gives",
    "us",
    "value",
    "1992",
    "add",
    "new",
    "entry",
    "dictionary",
    "follows",
    "add",
    "value",
    "2007",
    "new",
    "key",
    "called",
    "graduation",
    "delete",
    "entry",
    "follows",
    "gets",
    "rid",
    "key",
    "thriller",
    "value",
    "verify",
    "element",
    "dictionary",
    "using",
    "command",
    "follows",
    "command",
    "checks",
    "keys",
    "dictionary",
    "return",
    "true",
    "try",
    "command",
    "key",
    "dictionary",
    "get",
    "false",
    "order",
    "see",
    "keys",
    "dictionary",
    "use",
    "method",
    "keys",
    "get",
    "keys",
    "output",
    "list",
    "like",
    "object",
    "keys",
    "way",
    "obtain",
    "values",
    "using",
    "method",
    "values",
    "check",
    "labs",
    "examples",
    "info",
    "dictionaries",
    "music",
    "let",
    "cover",
    "sets",
    "also",
    "type",
    "collection",
    "sets",
    "type",
    "collection",
    "means",
    "like",
    "lists",
    "tuples",
    "input",
    "different",
    "python",
    "types",
    "unlike",
    "lists",
    "tuples",
    "unordered",
    "means",
    "sets",
    "record",
    "element",
    "position",
    "sets",
    "unique",
    "elements",
    "means",
    "one",
    "particular",
    "element",
    "set",
    "define",
    "set",
    "use",
    "curly",
    "brackets",
    "place",
    "elements",
    "set",
    "within",
    "curly",
    "brackets",
    "notice",
    "duplicate",
    "items",
    "actual",
    "set",
    "created",
    "duplicate",
    "items",
    "present",
    "convert",
    "list",
    "set",
    "using",
    "function",
    "set",
    "called",
    "type",
    "casting",
    "simply",
    "use",
    "list",
    "input",
    "function",
    "set",
    "result",
    "list",
    "converted",
    "set",
    "let",
    "go",
    "example",
    "start",
    "list",
    "input",
    "list",
    "function",
    "set",
    "function",
    "set",
    "returns",
    "set",
    "notice",
    "duplicate",
    "elements",
    "let",
    "go",
    "set",
    "operations",
    "used",
    "change",
    "set",
    "consider",
    "set",
    "let",
    "represent",
    "set",
    "circle",
    "familiar",
    "sets",
    "part",
    "venn",
    "diagram",
    "venn",
    "diagram",
    "tool",
    "uses",
    "shapes",
    "usually",
    "represent",
    "sets",
    "add",
    "item",
    "set",
    "using",
    "add",
    "method",
    "put",
    "set",
    "name",
    "followed",
    "dot",
    "add",
    "method",
    "argument",
    "new",
    "element",
    "set",
    "would",
    "like",
    "add",
    "case",
    "sync",
    "set",
    "sync",
    "item",
    "add",
    "item",
    "twice",
    "nothing",
    "happen",
    "duplicates",
    "set",
    "let",
    "say",
    "would",
    "like",
    "remove",
    "sync",
    "set",
    "also",
    "remove",
    "item",
    "set",
    "using",
    "remove",
    "method",
    "put",
    "set",
    "name",
    "followed",
    "dot",
    "remove",
    "method",
    "argument",
    "element",
    "set",
    "would",
    "like",
    "remove",
    "case",
    "sync",
    "remove",
    "method",
    "applied",
    "set",
    "set",
    "contain",
    "item",
    "sync",
    "use",
    "method",
    "item",
    "set",
    "verify",
    "element",
    "set",
    "using",
    "command",
    "follows",
    "command",
    "checks",
    "item",
    "case",
    "ac",
    "dc",
    "set",
    "item",
    "set",
    "returns",
    "true",
    "look",
    "item",
    "set",
    "case",
    "item",
    "item",
    "set",
    "get",
    "false",
    "types",
    "mathematical",
    "set",
    "operations",
    "operations",
    "lots",
    "useful",
    "mathematical",
    "operations",
    "sets",
    "let",
    "define",
    "set",
    "album",
    "set",
    "one",
    "represent",
    "using",
    "red",
    "circle",
    "venn",
    "diagram",
    "similarly",
    "define",
    "set",
    "album",
    "set",
    "also",
    "represent",
    "using",
    "blue",
    "circle",
    "venn",
    "diagram",
    "intersection",
    "two",
    "sets",
    "new",
    "set",
    "containing",
    "elements",
    "sets",
    "helpful",
    "use",
    "venn",
    "diagrams",
    "two",
    "circles",
    "represent",
    "sets",
    "combine",
    "overlap",
    "represents",
    "new",
    "set",
    "overlap",
    "comprised",
    "red",
    "circle",
    "blue",
    "circle",
    "define",
    "intersection",
    "terms",
    "python",
    "use",
    "ampersand",
    "find",
    "intersection",
    "two",
    "sets",
    "overlay",
    "values",
    "set",
    "circle",
    "placing",
    "common",
    "elements",
    "overlapping",
    "area",
    "see",
    "correspondence",
    "applying",
    "intersection",
    "operation",
    "items",
    "sets",
    "disappear",
    "python",
    "simply",
    "place",
    "ampersand",
    "two",
    "sets",
    "see",
    "ac",
    "dc",
    "back",
    "black",
    "sets",
    "result",
    "new",
    "set",
    "album",
    "set",
    "three",
    "containing",
    "elements",
    "album",
    "set",
    "one",
    "album",
    "set",
    "two",
    "union",
    "two",
    "sets",
    "new",
    "set",
    "elements",
    "contain",
    "items",
    "sets",
    "find",
    "union",
    "sets",
    "album",
    "set",
    "one",
    "album",
    "set",
    "2",
    "follows",
    "result",
    "new",
    "set",
    "elements",
    "album",
    "set",
    "one",
    "album",
    "set",
    "two",
    "new",
    "set",
    "represented",
    "green",
    "consider",
    "new",
    "album",
    "set",
    "album",
    "set",
    "three",
    "set",
    "contains",
    "elements",
    "ac",
    "dc",
    "back",
    "black",
    "represent",
    "venn",
    "diagram",
    "elements",
    "album",
    "set",
    "3",
    "album",
    "set",
    "one",
    "circle",
    "representing",
    "album",
    "set",
    "1",
    "encapsulates",
    "circle",
    "representing",
    "album",
    "set",
    "check",
    "set",
    "subset",
    "using",
    "subset",
    "method",
    "album",
    "set",
    "3",
    "subset",
    "album",
    "set",
    "one",
    "result",
    "true",
    "lot",
    "sets",
    "check",
    "lab",
    "examples",
    "music",
    "thank",
    "video",
    "learn",
    "conditions",
    "branching",
    "comparison",
    "operations",
    "compare",
    "value",
    "operand",
    "based",
    "condition",
    "produce",
    "boolean",
    "let",
    "say",
    "assign",
    "value",
    "use",
    "equality",
    "operator",
    "denoted",
    "two",
    "equal",
    "signs",
    "determine",
    "two",
    "values",
    "equal",
    "case",
    "7",
    "equal",
    "six",
    "case",
    "6",
    "equal",
    "7",
    "result",
    "false",
    "performed",
    "equality",
    "test",
    "value",
    "6",
    "two",
    "values",
    "would",
    "equal",
    "result",
    "would",
    "get",
    "true",
    "consider",
    "following",
    "equality",
    "comparison",
    "operator",
    "value",
    "left",
    "operand",
    "case",
    "variable",
    "greater",
    "value",
    "right",
    "operand",
    "case",
    "5",
    "condition",
    "becomes",
    "true",
    "else",
    "get",
    "false",
    "let",
    "display",
    "values",
    "left",
    "let",
    "see",
    "values",
    "greater",
    "5",
    "green",
    "rest",
    "red",
    "set",
    "equal",
    "6",
    "see",
    "6",
    "larger",
    "5",
    "result",
    "get",
    "true",
    "also",
    "apply",
    "operations",
    "floats",
    "modify",
    "operator",
    "follows",
    "left",
    "operand",
    "greater",
    "equal",
    "value",
    "right",
    "operand",
    "case",
    "5",
    "condition",
    "becomes",
    "true",
    "case",
    "include",
    "value",
    "5",
    "number",
    "line",
    "color",
    "changes",
    "green",
    "accordingly",
    "set",
    "value",
    "equal",
    "5",
    "operand",
    "produce",
    "true",
    "set",
    "value",
    "2",
    "would",
    "get",
    "false",
    "2",
    "less",
    "change",
    "inequality",
    "value",
    "left",
    "operand",
    "case",
    "less",
    "value",
    "right",
    "operand",
    "case",
    "6",
    "condition",
    "becomes",
    "true",
    "represent",
    "colored",
    "number",
    "line",
    "areas",
    "inequality",
    "true",
    "marked",
    "green",
    "red",
    "inequality",
    "false",
    "value",
    "set",
    "2",
    "result",
    "true",
    "2",
    "less",
    "inequality",
    "test",
    "uses",
    "explanation",
    "mark",
    "preceding",
    "equal",
    "sign",
    "two",
    "operands",
    "equal",
    "condition",
    "becomes",
    "true",
    "use",
    "number",
    "line",
    "condition",
    "true",
    "corresponding",
    "numbers",
    "marked",
    "green",
    "red",
    "condition",
    "false",
    "set",
    "equal",
    "2",
    "operator",
    "true",
    "2",
    "equal",
    "compare",
    "strings",
    "well",
    "comparing",
    "ac",
    "dc",
    "michael",
    "jackson",
    "using",
    "equality",
    "test",
    "get",
    "false",
    "strings",
    "using",
    "inequality",
    "test",
    "get",
    "true",
    "strings",
    "different",
    "see",
    "labs",
    "examples",
    "branching",
    "allows",
    "us",
    "run",
    "different",
    "statements",
    "different",
    "input",
    "helpful",
    "think",
    "statement",
    "locked",
    "room",
    "statement",
    "true",
    "enter",
    "room",
    "program",
    "run",
    "predefined",
    "task",
    "statement",
    "false",
    "program",
    "skip",
    "task",
    "example",
    "consider",
    "blue",
    "rectangle",
    "representing",
    "ac",
    "dc",
    "concert",
    "individual",
    "18",
    "older",
    "enter",
    "ac",
    "dc",
    "concert",
    "age",
    "18",
    "enter",
    "concert",
    "individual",
    "proceeds",
    "concert",
    "age",
    "17",
    "therefore",
    "granted",
    "access",
    "concert",
    "must",
    "move",
    "individual",
    "19",
    "condition",
    "true",
    "enter",
    "concert",
    "move",
    "syntax",
    "statement",
    "previous",
    "example",
    "statement",
    "expression",
    "true",
    "false",
    "brackets",
    "necessary",
    "colon",
    "within",
    "indent",
    "expression",
    "run",
    "condition",
    "true",
    "statements",
    "statement",
    "run",
    "regardless",
    "condition",
    "true",
    "false",
    "case",
    "age",
    "17",
    "set",
    "value",
    "variable",
    "age",
    "check",
    "statement",
    "statement",
    "false",
    "therefore",
    "program",
    "execute",
    "statement",
    "print",
    "enter",
    "case",
    "print",
    "move",
    "case",
    "age",
    "19",
    "set",
    "value",
    "variable",
    "age",
    "check",
    "statement",
    "statement",
    "true",
    "therefore",
    "program",
    "execute",
    "statement",
    "print",
    "enter",
    "print",
    "move",
    "else",
    "statement",
    "run",
    "different",
    "block",
    "code",
    "condition",
    "false",
    "let",
    "use",
    "ac",
    "dc",
    "concert",
    "analogy",
    "user",
    "17",
    "go",
    "ac",
    "dc",
    "concert",
    "go",
    "meatloaf",
    "concert",
    "represented",
    "purple",
    "square",
    "individual",
    "19",
    "condition",
    "true",
    "enter",
    "ac",
    "dc",
    "concert",
    "move",
    "syntax",
    "else",
    "statement",
    "similar",
    "simply",
    "append",
    "statement",
    "else",
    "add",
    "expression",
    "would",
    "like",
    "execute",
    "indent",
    "case",
    "age",
    "17",
    "set",
    "value",
    "variable",
    "age",
    "check",
    "statement",
    "statement",
    "false",
    "therefore",
    "progress",
    "else",
    "statement",
    "run",
    "statement",
    "indent",
    "corresponds",
    "individual",
    "attending",
    "meatloaf",
    "concert",
    "program",
    "continue",
    "running",
    "case",
    "age",
    "19",
    "set",
    "value",
    "variable",
    "age",
    "check",
    "statement",
    "statement",
    "true",
    "therefore",
    "program",
    "execute",
    "statement",
    "print",
    "enter",
    "program",
    "skips",
    "expressions",
    "else",
    "statement",
    "continues",
    "run",
    "rest",
    "expressions",
    "alif",
    "statement",
    "short",
    "else",
    "allows",
    "us",
    "check",
    "additional",
    "conditions",
    "preceding",
    "condition",
    "false",
    "condition",
    "true",
    "alternate",
    "expressions",
    "run",
    "consider",
    "concert",
    "example",
    "individual",
    "18",
    "go",
    "pink",
    "floyd",
    "concert",
    "instead",
    "attending",
    "ac",
    "dc",
    "meatloaf",
    "concerts",
    "person",
    "18",
    "years",
    "age",
    "enters",
    "area",
    "19",
    "years",
    "age",
    "see",
    "ac",
    "dc",
    "18",
    "years",
    "attend",
    "pink",
    "floyd",
    "seeing",
    "pink",
    "floyd",
    "move",
    "syntax",
    "lf",
    "statement",
    "similar",
    "simply",
    "add",
    "statement",
    "lf",
    "condition",
    "add",
    "expression",
    "would",
    "like",
    "execute",
    "statement",
    "true",
    "indent",
    "let",
    "illustrate",
    "code",
    "left",
    "18",
    "year",
    "old",
    "enters",
    "older",
    "18",
    "years",
    "age",
    "therefore",
    "condition",
    "false",
    "condition",
    "lf",
    "statement",
    "checked",
    "condition",
    "true",
    "would",
    "print",
    "go",
    "see",
    "pink",
    "floyd",
    "would",
    "move",
    "variable",
    "age",
    "17",
    "statement",
    "go",
    "see",
    "meatloaf",
    "would",
    "print",
    "similarly",
    "age",
    "greater",
    "18",
    "statement",
    "enter",
    "would",
    "print",
    "check",
    "labs",
    "examples",
    "let",
    "take",
    "look",
    "logic",
    "operators",
    "logic",
    "operations",
    "take",
    "boolean",
    "values",
    "produce",
    "different",
    "boolean",
    "values",
    "first",
    "operation",
    "operator",
    "input",
    "true",
    "result",
    "false",
    "similarly",
    "input",
    "false",
    "result",
    "true",
    "let",
    "b",
    "represent",
    "boolean",
    "variables",
    "operator",
    "takes",
    "two",
    "values",
    "produces",
    "new",
    "boolean",
    "value",
    "use",
    "table",
    "represent",
    "different",
    "values",
    "first",
    "column",
    "represents",
    "possible",
    "values",
    "second",
    "column",
    "represents",
    "possible",
    "values",
    "b",
    "final",
    "column",
    "represents",
    "result",
    "applying",
    "operation",
    "see",
    "operator",
    "produces",
    "false",
    "boolean",
    "values",
    "false",
    "following",
    "lines",
    "code",
    "print",
    "album",
    "made",
    "70s",
    "90s",
    "variable",
    "album",
    "year",
    "fall",
    "80s",
    "let",
    "see",
    "happens",
    "set",
    "album",
    "year",
    "colored",
    "number",
    "line",
    "green",
    "condition",
    "true",
    "red",
    "condition",
    "false",
    "case",
    "condition",
    "false",
    "examining",
    "second",
    "condition",
    "see",
    "1990",
    "greater",
    "1989",
    "condition",
    "true",
    "verify",
    "examining",
    "corresponding",
    "second",
    "number",
    "line",
    "final",
    "number",
    "line",
    "green",
    "region",
    "indicates",
    "area",
    "true",
    "region",
    "corresponds",
    "least",
    "one",
    "statement",
    "true",
    "see",
    "1990",
    "falls",
    "area",
    "therefore",
    "execute",
    "statement",
    "let",
    "b",
    "represent",
    "boolean",
    "variables",
    "operator",
    "takes",
    "two",
    "values",
    "produces",
    "new",
    "boolean",
    "value",
    "use",
    "table",
    "represent",
    "different",
    "values",
    "first",
    "column",
    "represents",
    "possible",
    "values",
    "second",
    "column",
    "represents",
    "possible",
    "values",
    "b",
    "final",
    "column",
    "represents",
    "result",
    "applying",
    "operation",
    "see",
    "operator",
    "produces",
    "true",
    "boolean",
    "values",
    "true",
    "following",
    "lines",
    "code",
    "print",
    "album",
    "made",
    "80s",
    "variable",
    "album",
    "year",
    "1980",
    "let",
    "see",
    "happens",
    "set",
    "album",
    "year",
    "1983",
    "use",
    "colored",
    "number",
    "line",
    "examine",
    "condition",
    "true",
    "case",
    "1983",
    "larger",
    "1980",
    "condition",
    "true",
    "examining",
    "second",
    "condition",
    "see",
    "1990",
    "greater",
    "condition",
    "also",
    "true",
    "verify",
    "examining",
    "corresponding",
    "second",
    "number",
    "line",
    "final",
    "number",
    "line",
    "green",
    "region",
    "indicates",
    "area",
    "true",
    "similarly",
    "region",
    "corresponds",
    "statements",
    "true",
    "see",
    "1983",
    "falls",
    "area",
    "therefore",
    "execute",
    "statement",
    "branching",
    "allows",
    "us",
    "run",
    "different",
    "statements",
    "different",
    "inputs",
    "foreign",
    "cover",
    "loops",
    "particular",
    "loops",
    "loops",
    "use",
    "many",
    "visual",
    "examples",
    "video",
    "see",
    "labs",
    "examples",
    "data",
    "talk",
    "loops",
    "let",
    "go",
    "range",
    "function",
    "range",
    "function",
    "outputs",
    "ordered",
    "sequence",
    "list",
    "input",
    "positive",
    "integer",
    "output",
    "sequence",
    "sequence",
    "contains",
    "number",
    "elements",
    "input",
    "starts",
    "zero",
    "example",
    "input",
    "3",
    "output",
    "sequence",
    "0",
    "1",
    "range",
    "function",
    "two",
    "inputs",
    "first",
    "input",
    "smaller",
    "second",
    "input",
    "output",
    "sequence",
    "starts",
    "first",
    "input",
    "sequence",
    "iterates",
    "including",
    "second",
    "number",
    "input",
    "10",
    "15",
    "get",
    "following",
    "sequence",
    "see",
    "labs",
    "capabilities",
    "range",
    "function",
    "please",
    "note",
    "use",
    "python",
    "3",
    "range",
    "function",
    "generate",
    "list",
    "explicitly",
    "like",
    "python",
    "section",
    "cover",
    "four",
    "loops",
    "focus",
    "lists",
    "many",
    "procedures",
    "used",
    "tuples",
    "loops",
    "perform",
    "task",
    "consider",
    "group",
    "colored",
    "squares",
    "let",
    "say",
    "would",
    "like",
    "replace",
    "colored",
    "square",
    "white",
    "square",
    "let",
    "give",
    "square",
    "number",
    "make",
    "things",
    "little",
    "easier",
    "refer",
    "group",
    "squares",
    "squares",
    "wanted",
    "tell",
    "someone",
    "replace",
    "square",
    "0",
    "white",
    "square",
    "would",
    "say",
    "equals",
    "replace",
    "square",
    "0",
    "white",
    "square",
    "say",
    "4",
    "squares",
    "0",
    "squares",
    "square",
    "0",
    "equals",
    "white",
    "square",
    "similarly",
    "next",
    "square",
    "say",
    "4",
    "square",
    "1",
    "squares",
    "square",
    "1",
    "equals",
    "white",
    "square",
    "next",
    "square",
    "say",
    "4",
    "square",
    "2",
    "squares",
    "square",
    "2",
    "equals",
    "white",
    "square",
    "repeat",
    "process",
    "square",
    "thing",
    "changes",
    "index",
    "square",
    "referring",
    "going",
    "perform",
    "similar",
    "task",
    "python",
    "use",
    "actual",
    "squares",
    "let",
    "use",
    "list",
    "represent",
    "boxes",
    "element",
    "list",
    "string",
    "representing",
    "color",
    "want",
    "change",
    "name",
    "color",
    "element",
    "white",
    "element",
    "list",
    "following",
    "index",
    "syntax",
    "perform",
    "loop",
    "python",
    "notice",
    "indent",
    "range",
    "function",
    "generates",
    "list",
    "code",
    "simply",
    "repeat",
    "everything",
    "indent",
    "5",
    "times",
    "change",
    "value",
    "6",
    "would",
    "six",
    "times",
    "however",
    "value",
    "incremented",
    "one",
    "time",
    "segment",
    "change",
    "ith",
    "element",
    "list",
    "string",
    "white",
    "value",
    "set",
    "zero",
    "iteration",
    "loop",
    "starts",
    "beginning",
    "indent",
    "run",
    "everything",
    "indent",
    "first",
    "element",
    "list",
    "set",
    "white",
    "go",
    "start",
    "indent",
    "progress",
    "line",
    "reach",
    "line",
    "change",
    "change",
    "value",
    "list",
    "set",
    "value",
    "index",
    "1",
    "white",
    "value",
    "increases",
    "repeat",
    "process",
    "index",
    "process",
    "continues",
    "next",
    "index",
    "reached",
    "final",
    "element",
    "also",
    "iterate",
    "list",
    "tuple",
    "directly",
    "python",
    "even",
    "need",
    "use",
    "indices",
    "list",
    "squares",
    "iteration",
    "list",
    "pass",
    "one",
    "element",
    "list",
    "squares",
    "variable",
    "square",
    "let",
    "display",
    "value",
    "variable",
    "square",
    "section",
    "first",
    "iteration",
    "value",
    "square",
    "red",
    "start",
    "second",
    "iteration",
    "second",
    "iteration",
    "value",
    "square",
    "yellow",
    "start",
    "third",
    "iteration",
    "final",
    "iteration",
    "value",
    "square",
    "green",
    "useful",
    "function",
    "iterating",
    "data",
    "enumerate",
    "used",
    "obtain",
    "index",
    "element",
    "list",
    "let",
    "use",
    "box",
    "analogy",
    "numbers",
    "representing",
    "index",
    "square",
    "syntax",
    "iterate",
    "list",
    "provide",
    "index",
    "element",
    "use",
    "list",
    "squares",
    "use",
    "names",
    "colors",
    "represent",
    "colored",
    "squares",
    "argument",
    "function",
    "enumerate",
    "list",
    "case",
    "square",
    "squares",
    "variable",
    "index",
    "variable",
    "square",
    "corresponding",
    "element",
    "list",
    "let",
    "use",
    "left",
    "part",
    "screen",
    "display",
    "different",
    "values",
    "variable",
    "square",
    "various",
    "iterations",
    "loop",
    "first",
    "iteration",
    "value",
    "variable",
    "red",
    "corresponding",
    "zeroth",
    "index",
    "value",
    "zero",
    "second",
    "iteration",
    "value",
    "variable",
    "square",
    "yellow",
    "value",
    "corresponds",
    "index",
    "ie",
    "one",
    "repeat",
    "process",
    "last",
    "index",
    "loops",
    "similar",
    "loops",
    "instead",
    "executing",
    "statement",
    "set",
    "number",
    "times",
    "loop",
    "run",
    "condition",
    "met",
    "let",
    "say",
    "would",
    "like",
    "copy",
    "orange",
    "squares",
    "list",
    "squares",
    "list",
    "new",
    "squares",
    "would",
    "like",
    "stop",
    "encounter",
    "square",
    "know",
    "value",
    "squares",
    "beforehand",
    "would",
    "simply",
    "continue",
    "process",
    "square",
    "orange",
    "c",
    "square",
    "equals",
    "orange",
    "would",
    "stop",
    "first",
    "example",
    "would",
    "check",
    "square",
    "orange",
    "satisfies",
    "condition",
    "would",
    "copy",
    "square",
    "repeat",
    "process",
    "second",
    "square",
    "condition",
    "met",
    "copy",
    "square",
    "next",
    "iteration",
    "encounter",
    "purple",
    "square",
    "condition",
    "met",
    "stop",
    "process",
    "essentially",
    "loop",
    "let",
    "use",
    "figure",
    "left",
    "represent",
    "code",
    "use",
    "list",
    "names",
    "color",
    "represent",
    "different",
    "squares",
    "create",
    "empty",
    "list",
    "new",
    "squares",
    "reality",
    "list",
    "indeterminate",
    "size",
    "start",
    "index",
    "zero",
    "statement",
    "repeatedly",
    "execute",
    "statements",
    "within",
    "indent",
    "condition",
    "inside",
    "bracket",
    "false",
    "append",
    "value",
    "first",
    "element",
    "list",
    "squares",
    "list",
    "new",
    "squares",
    "increase",
    "value",
    "append",
    "value",
    "second",
    "element",
    "list",
    "squares",
    "list",
    "new",
    "squares",
    "increment",
    "value",
    "value",
    "array",
    "squares",
    "purple",
    "therefore",
    "condition",
    "statement",
    "false",
    "exit",
    "loop",
    "check",
    "labs",
    "examples",
    "loop",
    "many",
    "real",
    "data",
    "music",
    "video",
    "cover",
    "functions",
    "learn",
    "use",
    "sum",
    "python",
    "functions",
    "well",
    "build",
    "function",
    "functions",
    "take",
    "input",
    "produce",
    "output",
    "change",
    "function",
    "piece",
    "code",
    "reuse",
    "implement",
    "function",
    "many",
    "cases",
    "use",
    "people",
    "functions",
    "case",
    "know",
    "function",
    "works",
    "cases",
    "import",
    "functions",
    "let",
    "orange",
    "yellow",
    "squares",
    "represent",
    "similar",
    "blocks",
    "code",
    "run",
    "code",
    "using",
    "input",
    "get",
    "output",
    "define",
    "function",
    "task",
    "call",
    "function",
    "let",
    "small",
    "squares",
    "represent",
    "lines",
    "code",
    "used",
    "call",
    "function",
    "replace",
    "long",
    "lines",
    "code",
    "calling",
    "function",
    "times",
    "call",
    "function",
    "code",
    "much",
    "shorter",
    "code",
    "performs",
    "task",
    "think",
    "process",
    "like",
    "call",
    "function",
    "f1",
    "pass",
    "input",
    "function",
    "values",
    "passed",
    "lines",
    "code",
    "wrote",
    "returns",
    "value",
    "use",
    "value",
    "example",
    "input",
    "value",
    "new",
    "function",
    "f2",
    "call",
    "new",
    "function",
    "f2",
    "value",
    "passed",
    "another",
    "set",
    "lines",
    "code",
    "function",
    "returns",
    "value",
    "process",
    "repeated",
    "passing",
    "values",
    "function",
    "call",
    "save",
    "functions",
    "reuse",
    "use",
    "people",
    "functions",
    "python",
    "many",
    "functions",
    "know",
    "functions",
    "work",
    "internally",
    "simply",
    "task",
    "functions",
    "perform",
    "function",
    "len",
    "takes",
    "input",
    "type",
    "sequence",
    "string",
    "list",
    "type",
    "collection",
    "dictionary",
    "set",
    "returns",
    "length",
    "sequence",
    "collection",
    "consider",
    "following",
    "list",
    "len",
    "function",
    "takes",
    "list",
    "argument",
    "assign",
    "result",
    "variable",
    "l",
    "function",
    "determines",
    "eight",
    "items",
    "list",
    "returns",
    "length",
    "list",
    "case",
    "function",
    "sum",
    "takes",
    "iterable",
    "like",
    "tuple",
    "list",
    "returns",
    "total",
    "elements",
    "consider",
    "following",
    "list",
    "pass",
    "list",
    "sum",
    "function",
    "assign",
    "result",
    "variable",
    "function",
    "determines",
    "total",
    "elements",
    "returns",
    "case",
    "value",
    "two",
    "ways",
    "sort",
    "list",
    "first",
    "using",
    "function",
    "sorted",
    "also",
    "use",
    "list",
    "method",
    "sort",
    "methods",
    "similar",
    "functions",
    "let",
    "use",
    "example",
    "illustrate",
    "difference",
    "function",
    "sorted",
    "returns",
    "new",
    "sorted",
    "list",
    "tuple",
    "consider",
    "list",
    "album",
    "ratings",
    "apply",
    "function",
    "sorted",
    "list",
    "album",
    "ratings",
    "get",
    "new",
    "list",
    "sorted",
    "album",
    "rating",
    "result",
    "new",
    "sorted",
    "list",
    "look",
    "list",
    "album",
    "ratings",
    "nothing",
    "changed",
    "generally",
    "functions",
    "take",
    "input",
    "case",
    "list",
    "produce",
    "new",
    "output",
    "instance",
    "sorted",
    "list",
    "use",
    "method",
    "sort",
    "list",
    "album",
    "ratings",
    "change",
    "new",
    "list",
    "created",
    "let",
    "use",
    "diagram",
    "help",
    "illustrate",
    "process",
    "case",
    "rectangle",
    "represents",
    "list",
    "album",
    "ratings",
    "apply",
    "method",
    "sort",
    "list",
    "list",
    "album",
    "rating",
    "changes",
    "unlike",
    "previous",
    "case",
    "see",
    "list",
    "album",
    "rating",
    "changed",
    "case",
    "new",
    "list",
    "created",
    "gone",
    "use",
    "functions",
    "python",
    "let",
    "see",
    "build",
    "functions",
    "get",
    "started",
    "building",
    "functions",
    "python",
    "example",
    "function",
    "python",
    "returns",
    "input",
    "value",
    "plus",
    "define",
    "function",
    "start",
    "keyword",
    "def",
    "name",
    "function",
    "descriptive",
    "function",
    "formal",
    "parameter",
    "parentheses",
    "followed",
    "colon",
    "code",
    "block",
    "indent",
    "case",
    "add",
    "1",
    "assign",
    "b",
    "return",
    "output",
    "value",
    "b",
    "define",
    "function",
    "call",
    "function",
    "add",
    "1",
    "5",
    "return",
    "call",
    "function",
    "time",
    "assign",
    "variable",
    "c",
    "value",
    "c",
    "let",
    "explore",
    "let",
    "go",
    "example",
    "call",
    "function",
    "noted",
    "simplified",
    "model",
    "python",
    "python",
    "work",
    "like",
    "hood",
    "call",
    "function",
    "giving",
    "input",
    "helps",
    "think",
    "value",
    "5",
    "passed",
    "function",
    "sequences",
    "commands",
    "run",
    "value",
    "five",
    "b",
    "would",
    "assigned",
    "value",
    "return",
    "value",
    "b",
    "case",
    "b",
    "assigned",
    "value",
    "6",
    "function",
    "returns",
    "call",
    "function",
    "process",
    "starts",
    "scratch",
    "pass",
    "subsequent",
    "operations",
    "performed",
    "everything",
    "happened",
    "last",
    "call",
    "happen",
    "different",
    "value",
    "function",
    "returns",
    "value",
    "case",
    "helpful",
    "analogy",
    "let",
    "try",
    "make",
    "function",
    "complex",
    "customary",
    "document",
    "function",
    "first",
    "lines",
    "tells",
    "anyone",
    "uses",
    "function",
    "documentation",
    "surrounded",
    "triple",
    "quotes",
    "use",
    "help",
    "command",
    "function",
    "display",
    "documentation",
    "follows",
    "print",
    "function",
    "name",
    "documentation",
    "include",
    "documentation",
    "rest",
    "examples",
    "function",
    "multiple",
    "parameters",
    "function",
    "mult",
    "multiplies",
    "two",
    "numbers",
    "words",
    "finds",
    "product",
    "pass",
    "integers",
    "2",
    "3",
    "result",
    "new",
    "integer",
    "pass",
    "integer",
    "10",
    "float",
    "result",
    "float",
    "pass",
    "integer",
    "2",
    "string",
    "michael",
    "jackson",
    "string",
    "michael",
    "jackson",
    "repeated",
    "two",
    "times",
    "multiplication",
    "symbol",
    "also",
    "mean",
    "repeat",
    "sequence",
    "accidentally",
    "multiply",
    "integer",
    "string",
    "instead",
    "two",
    "integers",
    "wo",
    "get",
    "error",
    "instead",
    "get",
    "string",
    "program",
    "progress",
    "potentially",
    "failing",
    "later",
    "string",
    "expected",
    "integer",
    "property",
    "make",
    "coding",
    "simpler",
    "must",
    "test",
    "code",
    "thoroughly",
    "many",
    "cases",
    "function",
    "return",
    "statement",
    "cases",
    "python",
    "return",
    "special",
    "none",
    "object",
    "practically",
    "speaking",
    "function",
    "return",
    "statement",
    "treat",
    "function",
    "returns",
    "nothing",
    "function",
    "mj",
    "simply",
    "prints",
    "name",
    "michael",
    "jackson",
    "call",
    "function",
    "function",
    "prints",
    "michael",
    "jackson",
    "let",
    "define",
    "function",
    "work",
    "performs",
    "task",
    "python",
    "allow",
    "function",
    "empty",
    "body",
    "use",
    "keyword",
    "pass",
    "anything",
    "satisfies",
    "requirement",
    "body",
    "call",
    "function",
    "print",
    "function",
    "returns",
    "none",
    "background",
    "return",
    "statement",
    "called",
    "python",
    "automatically",
    "return",
    "none",
    "helpful",
    "view",
    "function",
    "work",
    "following",
    "return",
    "statement",
    "usually",
    "functions",
    "perform",
    "one",
    "task",
    "function",
    "prints",
    "statement",
    "returns",
    "value",
    "let",
    "use",
    "table",
    "represent",
    "different",
    "values",
    "function",
    "called",
    "call",
    "function",
    "input",
    "find",
    "value",
    "b",
    "function",
    "prints",
    "statement",
    "value",
    "b",
    "finally",
    "function",
    "returns",
    "value",
    "b",
    "case",
    "use",
    "loops",
    "functions",
    "function",
    "prints",
    "values",
    "indexes",
    "loop",
    "tuple",
    "call",
    "function",
    "list",
    "album",
    "ratings",
    "input",
    "let",
    "display",
    "list",
    "right",
    "corresponding",
    "index",
    "stuff",
    "used",
    "input",
    "function",
    "enumerate",
    "operation",
    "pass",
    "index",
    "value",
    "list",
    "function",
    "would",
    "begin",
    "iterate",
    "loop",
    "function",
    "print",
    "first",
    "index",
    "first",
    "value",
    "list",
    "continue",
    "iterating",
    "loop",
    "values",
    "updated",
    "print",
    "statement",
    "reached",
    "similarly",
    "next",
    "values",
    "list",
    "index",
    "printed",
    "process",
    "repeated",
    "values",
    "updated",
    "continue",
    "iterating",
    "final",
    "values",
    "list",
    "printed",
    "variatic",
    "parameters",
    "allow",
    "us",
    "input",
    "variable",
    "number",
    "elements",
    "consider",
    "following",
    "function",
    "function",
    "asterisk",
    "parameter",
    "names",
    "call",
    "function",
    "three",
    "parameters",
    "packed",
    "tuple",
    "names",
    "iterate",
    "loop",
    "values",
    "printed",
    "accordingly",
    "call",
    "function",
    "two",
    "parameters",
    "inputs",
    "variable",
    "names",
    "contain",
    "two",
    "elements",
    "result",
    "two",
    "values",
    "printed",
    "scope",
    "variable",
    "part",
    "program",
    "variable",
    "accessible",
    "variables",
    "defined",
    "outside",
    "function",
    "said",
    "within",
    "global",
    "scope",
    "meaning",
    "accessed",
    "anywhere",
    "defined",
    "function",
    "adds",
    "string",
    "dc",
    "parameter",
    "x",
    "reach",
    "part",
    "value",
    "x",
    "set",
    "ac",
    "within",
    "global",
    "scope",
    "meaning",
    "x",
    "accessible",
    "anywhere",
    "defined",
    "variable",
    "defined",
    "global",
    "scope",
    "called",
    "global",
    "variable",
    "call",
    "function",
    "enter",
    "new",
    "scope",
    "scope",
    "add",
    "dc",
    "pass",
    "argument",
    "add",
    "dc",
    "function",
    "case",
    "ac",
    "within",
    "scope",
    "function",
    "value",
    "x",
    "set",
    "ac",
    "dc",
    "function",
    "returns",
    "value",
    "assigned",
    "z",
    "within",
    "global",
    "scope",
    "value",
    "z",
    "set",
    "ac",
    "dc",
    "value",
    "returned",
    "scope",
    "function",
    "deleted",
    "local",
    "variables",
    "exist",
    "within",
    "scope",
    "function",
    "consider",
    "function",
    "thriller",
    "local",
    "variable",
    "date",
    "set",
    "call",
    "function",
    "create",
    "new",
    "scope",
    "within",
    "scope",
    "function",
    "value",
    "date",
    "set",
    "value",
    "date",
    "exist",
    "within",
    "global",
    "scope",
    "variables",
    "inside",
    "global",
    "scope",
    "name",
    "variables",
    "local",
    "scope",
    "conflict",
    "consider",
    "function",
    "thriller",
    "local",
    "variable",
    "date",
    "set",
    "global",
    "variable",
    "date",
    "set",
    "call",
    "function",
    "create",
    "new",
    "scope",
    "within",
    "scope",
    "value",
    "date",
    "set",
    "call",
    "function",
    "returns",
    "value",
    "date",
    "local",
    "scope",
    "case",
    "1982",
    "print",
    "global",
    "scope",
    "use",
    "global",
    "variable",
    "value",
    "global",
    "value",
    "variable",
    "therefore",
    "value",
    "set",
    "variable",
    "defined",
    "within",
    "function",
    "python",
    "check",
    "global",
    "scope",
    "consider",
    "function",
    "acdc",
    "function",
    "variable",
    "rating",
    "value",
    "assigned",
    "define",
    "variable",
    "rating",
    "global",
    "scope",
    "call",
    "function",
    "python",
    "see",
    "value",
    "variable",
    "rating",
    "result",
    "python",
    "lead",
    "scope",
    "check",
    "variable",
    "ratings",
    "exists",
    "global",
    "scope",
    "use",
    "value",
    "ratings",
    "global",
    "scope",
    "within",
    "scope",
    "ac",
    "dc",
    "function",
    "print",
    "value",
    "z",
    "global",
    "scope",
    "10",
    "added",
    "value",
    "rating",
    "unchanged",
    "within",
    "global",
    "scope",
    "consider",
    "function",
    "pink",
    "floyd",
    "define",
    "variable",
    "claimed",
    "sales",
    "keyword",
    "global",
    "variable",
    "global",
    "variable",
    "call",
    "function",
    "pink",
    "floyd",
    "variable",
    "claimed",
    "sales",
    "set",
    "string",
    "45",
    "million",
    "global",
    "scope",
    "print",
    "variable",
    "get",
    "value",
    "45",
    "million",
    "lot",
    "functions",
    "check",
    "lab",
    "examples",
    "music",
    "hello",
    "welcome",
    "exception",
    "handling",
    "watching",
    "video",
    "able",
    "explain",
    "exception",
    "handling",
    "demonstrate",
    "use",
    "exception",
    "handling",
    "understand",
    "basics",
    "exception",
    "handling",
    "ever",
    "mistakenly",
    "entered",
    "number",
    "supposed",
    "enter",
    "text",
    "input",
    "field",
    "us",
    "either",
    "air",
    "testing",
    "program",
    "know",
    "gave",
    "error",
    "message",
    "instead",
    "completing",
    "terminating",
    "program",
    "order",
    "error",
    "message",
    "appear",
    "event",
    "triggered",
    "background",
    "event",
    "activated",
    "program",
    "tried",
    "perform",
    "computation",
    "name",
    "entry",
    "realized",
    "entry",
    "contained",
    "numbers",
    "letters",
    "encasing",
    "code",
    "exception",
    "handler",
    "program",
    "knew",
    "deal",
    "type",
    "error",
    "able",
    "output",
    "error",
    "message",
    "continue",
    "program",
    "one",
    "many",
    "errors",
    "happen",
    "asking",
    "user",
    "input",
    "let",
    "us",
    "see",
    "exception",
    "handling",
    "works",
    "first",
    "explore",
    "try",
    "accept",
    "statement",
    "type",
    "statement",
    "first",
    "attempt",
    "execute",
    "code",
    "try",
    "block",
    "error",
    "occurs",
    "kick",
    "begin",
    "searching",
    "exception",
    "matches",
    "error",
    "finds",
    "correct",
    "exception",
    "handle",
    "error",
    "execute",
    "line",
    "code",
    "example",
    "perhaps",
    "writing",
    "program",
    "open",
    "write",
    "file",
    "starting",
    "program",
    "error",
    "occurred",
    "data",
    "able",
    "read",
    "error",
    "program",
    "skipped",
    "code",
    "lines",
    "try",
    "statement",
    "went",
    "directly",
    "exception",
    "line",
    "since",
    "error",
    "fell",
    "within",
    "error",
    "guidelines",
    "printed",
    "unable",
    "open",
    "read",
    "data",
    "file",
    "console",
    "writing",
    "simple",
    "programs",
    "sometimes",
    "get",
    "away",
    "one",
    "accept",
    "statement",
    "happens",
    "another",
    "error",
    "occurs",
    "caught",
    "error",
    "happened",
    "would",
    "need",
    "add",
    "another",
    "accept",
    "statement",
    "accept",
    "statement",
    "notice",
    "type",
    "error",
    "catch",
    "specified",
    "may",
    "seem",
    "logical",
    "step",
    "program",
    "catch",
    "errors",
    "determine",
    "donate",
    "best",
    "practice",
    "example",
    "perhaps",
    "small",
    "program",
    "one",
    "section",
    "much",
    "larger",
    "program",
    "thousand",
    "lines",
    "code",
    "task",
    "debug",
    "program",
    "kept",
    "throwing",
    "error",
    "causing",
    "disruption",
    "users",
    "investigating",
    "program",
    "found",
    "error",
    "kept",
    "appearing",
    "error",
    "details",
    "ended",
    "spending",
    "hours",
    "trying",
    "pinpoint",
    "fix",
    "error",
    "far",
    "program",
    "defined",
    "error",
    "message",
    "print",
    "error",
    "occurs",
    "receive",
    "messages",
    "program",
    "executed",
    "properly",
    "add",
    "else",
    "statement",
    "give",
    "us",
    "notification",
    "adding",
    "else",
    "statement",
    "provide",
    "us",
    "notification",
    "console",
    "file",
    "written",
    "successfully",
    "defined",
    "happen",
    "program",
    "executes",
    "properly",
    "error",
    "occurs",
    "one",
    "last",
    "statement",
    "add",
    "example",
    "since",
    "opening",
    "file",
    "last",
    "thing",
    "need",
    "close",
    "file",
    "adding",
    "finally",
    "statement",
    "tell",
    "program",
    "close",
    "file",
    "matter",
    "end",
    "result",
    "print",
    "file",
    "closed",
    "console",
    "video",
    "learned",
    "write",
    "try",
    "accept",
    "statement",
    "important",
    "always",
    "define",
    "errors",
    "creating",
    "exceptions",
    "add",
    "else",
    "finally",
    "statement",
    "module",
    "going",
    "talk",
    "objects",
    "classes",
    "python",
    "many",
    "different",
    "kinds",
    "data",
    "types",
    "integers",
    "floats",
    "strings",
    "lists",
    "dictionaries",
    "booleans",
    "python",
    "object",
    "every",
    "object",
    "following",
    "type",
    "internal",
    "representation",
    "set",
    "functions",
    "called",
    "methods",
    "interact",
    "data",
    "object",
    "instance",
    "particular",
    "type",
    "example",
    "two",
    "types",
    "type",
    "1",
    "type",
    "several",
    "objects",
    "type",
    "1",
    "shown",
    "yellow",
    "object",
    "instance",
    "type",
    "also",
    "several",
    "objects",
    "type",
    "2",
    "shown",
    "green",
    "object",
    "instance",
    "type",
    "let",
    "several",
    "less",
    "abstract",
    "examples",
    "every",
    "time",
    "create",
    "integer",
    "creating",
    "instance",
    "type",
    "integer",
    "creating",
    "integer",
    "object",
    "case",
    "creating",
    "five",
    "instances",
    "type",
    "integer",
    "five",
    "integer",
    "objects",
    "similarly",
    "every",
    "time",
    "create",
    "list",
    "creating",
    "instance",
    "type",
    "list",
    "creating",
    "list",
    "object",
    "case",
    "creating",
    "five",
    "instances",
    "type",
    "list",
    "five",
    "list",
    "objects",
    "find",
    "type",
    "object",
    "using",
    "type",
    "command",
    "case",
    "object",
    "type",
    "list",
    "object",
    "type",
    "integer",
    "object",
    "type",
    "string",
    "finally",
    "object",
    "type",
    "dictionary",
    "class",
    "types",
    "methods",
    "functions",
    "every",
    "instance",
    "class",
    "type",
    "provides",
    "interact",
    "object",
    "using",
    "methods",
    "time",
    "example",
    "lists",
    "sorting",
    "example",
    "method",
    "interacts",
    "data",
    "object",
    "consider",
    "list",
    "ratings",
    "data",
    "series",
    "numbers",
    "contained",
    "within",
    "list",
    "method",
    "sort",
    "change",
    "data",
    "within",
    "object",
    "call",
    "method",
    "adding",
    "period",
    "end",
    "object",
    "name",
    "method",
    "name",
    "would",
    "like",
    "call",
    "parentheses",
    "ratings",
    "list",
    "represented",
    "orange",
    "data",
    "contained",
    "list",
    "sequence",
    "numbers",
    "call",
    "sort",
    "method",
    "changes",
    "data",
    "contained",
    "object",
    "say",
    "changes",
    "state",
    "object",
    "call",
    "reverse",
    "method",
    "list",
    "changing",
    "list",
    "call",
    "method",
    "reversing",
    "order",
    "sequence",
    "within",
    "object",
    "many",
    "cases",
    "know",
    "inner",
    "workings",
    "class",
    "methods",
    "know",
    "use",
    "next",
    "cover",
    "construct",
    "classes",
    "create",
    "type",
    "class",
    "python",
    "section",
    "create",
    "class",
    "class",
    "data",
    "attributes",
    "class",
    "methods",
    "create",
    "instances",
    "instances",
    "class",
    "objects",
    "class",
    "data",
    "attributes",
    "define",
    "class",
    "let",
    "create",
    "two",
    "classes",
    "first",
    "class",
    "circle",
    "second",
    "rectangle",
    "let",
    "think",
    "constitutes",
    "circle",
    "examining",
    "image",
    "need",
    "radius",
    "define",
    "circle",
    "let",
    "add",
    "color",
    "make",
    "easier",
    "distinguish",
    "different",
    "instances",
    "class",
    "later",
    "therefore",
    "class",
    "data",
    "attributes",
    "radius",
    "color",
    "similarly",
    "examining",
    "image",
    "order",
    "define",
    "rectangle",
    "need",
    "height",
    "width",
    "also",
    "add",
    "color",
    "distinguish",
    "instances",
    "later",
    "therefore",
    "data",
    "attributes",
    "color",
    "height",
    "width",
    "create",
    "class",
    "circle",
    "need",
    "include",
    "class",
    "definition",
    "tells",
    "python",
    "creating",
    "class",
    "name",
    "class",
    "course",
    "parentheses",
    "always",
    "place",
    "term",
    "object",
    "parent",
    "class",
    "class",
    "rectangle",
    "change",
    "name",
    "class",
    "rest",
    "kept",
    "classes",
    "outlines",
    "set",
    "attributes",
    "create",
    "objects",
    "create",
    "object",
    "instance",
    "type",
    "circle",
    "color",
    "data",
    "attribute",
    "red",
    "data",
    "attribute",
    "radius",
    "also",
    "create",
    "second",
    "object",
    "instance",
    "type",
    "circle",
    "case",
    "colored",
    "data",
    "attribute",
    "green",
    "data",
    "attribute",
    "radius",
    "also",
    "create",
    "object",
    "instance",
    "type",
    "rectangle",
    "color",
    "data",
    "attribute",
    "blue",
    "data",
    "attribute",
    "height",
    "width",
    "second",
    "object",
    "also",
    "instance",
    "type",
    "rectangle",
    "case",
    "color",
    "data",
    "attribute",
    "yellow",
    "height",
    "1",
    "width",
    "different",
    "objects",
    "class",
    "circle",
    "type",
    "circle",
    "also",
    "different",
    "objects",
    "class",
    "rectangle",
    "type",
    "rectangle",
    "let",
    "us",
    "continue",
    "building",
    "circle",
    "class",
    "python",
    "define",
    "class",
    "initialize",
    "instance",
    "class",
    "data",
    "attributes",
    "radius",
    "color",
    "using",
    "class",
    "constructor",
    "function",
    "init",
    "constructor",
    "special",
    "function",
    "tells",
    "python",
    "making",
    "new",
    "class",
    "special",
    "functions",
    "python",
    "make",
    "complex",
    "classes",
    "radius",
    "color",
    "parameters",
    "used",
    "initialize",
    "radius",
    "color",
    "data",
    "attributes",
    "class",
    "instance",
    "self",
    "parameter",
    "refers",
    "newly",
    "created",
    "instance",
    "class",
    "parameters",
    "radius",
    "color",
    "used",
    "constructor",
    "body",
    "access",
    "values",
    "passed",
    "class",
    "constructor",
    "class",
    "constructed",
    "set",
    "value",
    "radius",
    "color",
    "data",
    "attributes",
    "values",
    "passed",
    "constructor",
    "method",
    "similarly",
    "define",
    "class",
    "rectangle",
    "python",
    "name",
    "class",
    "different",
    "time",
    "class",
    "data",
    "attributes",
    "color",
    "height",
    "width",
    "created",
    "class",
    "order",
    "create",
    "object",
    "class",
    "circle",
    "introduce",
    "variable",
    "name",
    "object",
    "create",
    "object",
    "using",
    "object",
    "constructor",
    "object",
    "instructor",
    "consists",
    "name",
    "class",
    "well",
    "parameters",
    "data",
    "attributes",
    "create",
    "circle",
    "object",
    "call",
    "code",
    "like",
    "function",
    "arguments",
    "passed",
    "circle",
    "constructor",
    "used",
    "initialize",
    "data",
    "attributes",
    "newly",
    "created",
    "circle",
    "instance",
    "helpful",
    "think",
    "self",
    "box",
    "contains",
    "data",
    "attributes",
    "object",
    "typing",
    "object",
    "name",
    "followed",
    "dot",
    "data",
    "attribute",
    "name",
    "gives",
    "us",
    "data",
    "attribute",
    "value",
    "example",
    "radius",
    "case",
    "radius",
    "color",
    "see",
    "relationship",
    "self",
    "parameter",
    "object",
    "python",
    "also",
    "set",
    "change",
    "data",
    "attribute",
    "directly",
    "typing",
    "object",
    "name",
    "followed",
    "dot",
    "data",
    "attribute",
    "name",
    "set",
    "equal",
    "corresponding",
    "value",
    "verify",
    "color",
    "data",
    "attribute",
    "changed",
    "usually",
    "order",
    "change",
    "data",
    "object",
    "define",
    "methods",
    "class",
    "let",
    "discuss",
    "methods",
    "seen",
    "data",
    "attributes",
    "consist",
    "data",
    "defining",
    "objects",
    "methods",
    "functions",
    "interact",
    "change",
    "data",
    "attributes",
    "changing",
    "using",
    "data",
    "attributes",
    "object",
    "let",
    "say",
    "would",
    "like",
    "change",
    "size",
    "circle",
    "involves",
    "changing",
    "radius",
    "attribute",
    "add",
    "method",
    "add",
    "radius",
    "class",
    "circle",
    "method",
    "function",
    "requires",
    "self",
    "well",
    "parameters",
    "case",
    "going",
    "add",
    "value",
    "radius",
    "denote",
    "value",
    "r",
    "going",
    "add",
    "r",
    "data",
    "attribute",
    "radius",
    "let",
    "see",
    "part",
    "code",
    "works",
    "create",
    "object",
    "call",
    "add",
    "radius",
    "method",
    "create",
    "object",
    "object",
    "constructor",
    "pass",
    "two",
    "arguments",
    "constructor",
    "radius",
    "set",
    "2",
    "color",
    "set",
    "red",
    "constructor",
    "body",
    "data",
    "attributes",
    "set",
    "use",
    "box",
    "analogy",
    "see",
    "current",
    "state",
    "object",
    "call",
    "method",
    "adding",
    "dot",
    "followed",
    "method",
    "name",
    "parentheses",
    "case",
    "argument",
    "function",
    "amount",
    "would",
    "like",
    "add",
    "need",
    "worry",
    "self",
    "parameter",
    "calling",
    "method",
    "like",
    "constructor",
    "python",
    "take",
    "care",
    "us",
    "many",
    "cases",
    "may",
    "parameters",
    "self",
    "specified",
    "method",
    "definition",
    "pass",
    "arguments",
    "calling",
    "function",
    "internally",
    "method",
    "called",
    "value",
    "8",
    "proper",
    "self",
    "object",
    "method",
    "assigns",
    "new",
    "value",
    "changes",
    "object",
    "particular",
    "radius",
    "data",
    "attribute",
    "call",
    "add",
    "radius",
    "method",
    "changes",
    "object",
    "changing",
    "value",
    "radius",
    "data",
    "attribute",
    "add",
    "default",
    "values",
    "parameters",
    "class",
    "constructor",
    "labs",
    "also",
    "create",
    "method",
    "called",
    "draw",
    "circle",
    "see",
    "lab",
    "implementation",
    "draw",
    "circle",
    "labs",
    "create",
    "new",
    "object",
    "type",
    "circle",
    "using",
    "constructor",
    "color",
    "red",
    "radius",
    "three",
    "access",
    "data",
    "attribute",
    "radius",
    "access",
    "attribute",
    "color",
    "finally",
    "use",
    "method",
    "draw",
    "circle",
    "draw",
    "circle",
    "similarly",
    "create",
    "new",
    "object",
    "type",
    "circle",
    "access",
    "data",
    "attribute",
    "radius",
    "access",
    "data",
    "attribute",
    "color",
    "use",
    "method",
    "draw",
    "circle",
    "draw",
    "circle",
    "summary",
    "created",
    "object",
    "class",
    "circle",
    "called",
    "red",
    "circle",
    "radius",
    "attribute",
    "3",
    "color",
    "attribute",
    "red",
    "also",
    "created",
    "object",
    "class",
    "circle",
    "called",
    "blue",
    "circle",
    "radius",
    "attribute",
    "10",
    "color",
    "attribute",
    "blue",
    "lab",
    "similar",
    "class",
    "rectangle",
    "create",
    "new",
    "object",
    "type",
    "rectangle",
    "using",
    "constructor",
    "access",
    "data",
    "attribute",
    "height",
    "also",
    "access",
    "data",
    "attribute",
    "width",
    "data",
    "attribute",
    "color",
    "use",
    "method",
    "draw",
    "rectangle",
    "draw",
    "rectangle",
    "class",
    "object",
    "realization",
    "instantiation",
    "class",
    "example",
    "create",
    "two",
    "objects",
    "class",
    "circle",
    "two",
    "objects",
    "class",
    "rectangle",
    "dir",
    "function",
    "useful",
    "obtaining",
    "list",
    "data",
    "attributes",
    "methods",
    "associated",
    "class",
    "object",
    "interested",
    "passed",
    "argument",
    "return",
    "value",
    "list",
    "object",
    "data",
    "attributes",
    "attributes",
    "surrounded",
    "underscores",
    "internal",
    "use",
    "worry",
    "regular",
    "looking",
    "attributes",
    "ones",
    "concern",
    "objects",
    "methods",
    "data",
    "attributes",
    "lot",
    "objects",
    "python",
    "info",
    "music",
    "section",
    "use",
    "python",
    "open",
    "function",
    "create",
    "file",
    "object",
    "obtain",
    "data",
    "txt",
    "file",
    "use",
    "python",
    "open",
    "function",
    "get",
    "file",
    "object",
    "apply",
    "method",
    "object",
    "read",
    "data",
    "file",
    "open",
    "file",
    "example",
    "1",
    "dot",
    "txt",
    "follows",
    "use",
    "open",
    "function",
    "first",
    "argument",
    "file",
    "path",
    "made",
    "file",
    "name",
    "file",
    "directory",
    "second",
    "parameter",
    "mode",
    "common",
    "values",
    "used",
    "include",
    "r",
    "reading",
    "w",
    "writing",
    "appending",
    "use",
    "r",
    "reading",
    "finally",
    "file",
    "object",
    "use",
    "file",
    "object",
    "obtain",
    "information",
    "file",
    "use",
    "data",
    "attribute",
    "name",
    "get",
    "name",
    "file",
    "result",
    "string",
    "contains",
    "name",
    "file",
    "see",
    "mode",
    "object",
    "using",
    "data",
    "attribute",
    "mode",
    "r",
    "shown",
    "representing",
    "read",
    "always",
    "close",
    "file",
    "object",
    "using",
    "method",
    "close",
    "may",
    "get",
    "tedious",
    "sometimes",
    "let",
    "use",
    "statement",
    "using",
    "statement",
    "open",
    "file",
    "better",
    "practice",
    "automatically",
    "closes",
    "file",
    "code",
    "run",
    "everything",
    "indent",
    "block",
    "closes",
    "file",
    "code",
    "reads",
    "file",
    "use",
    "file",
    "object",
    "file",
    "code",
    "perform",
    "operations",
    "indent",
    "block",
    "close",
    "file",
    "end",
    "indent",
    "method",
    "read",
    "stores",
    "values",
    "file",
    "variable",
    "file",
    "underscore",
    "stuff",
    "string",
    "print",
    "file",
    "content",
    "check",
    "file",
    "content",
    "closed",
    "read",
    "outside",
    "indent",
    "print",
    "file",
    "content",
    "outside",
    "indent",
    "well",
    "print",
    "file",
    "content",
    "see",
    "following",
    "examine",
    "raw",
    "string",
    "see",
    "slash",
    "n",
    "python",
    "knows",
    "start",
    "new",
    "line",
    "output",
    "every",
    "line",
    "element",
    "list",
    "using",
    "method",
    "read",
    "lines",
    "first",
    "line",
    "corresponds",
    "first",
    "element",
    "list",
    "second",
    "line",
    "corresponds",
    "second",
    "element",
    "list",
    "use",
    "method",
    "read",
    "line",
    "read",
    "first",
    "line",
    "file",
    "run",
    "command",
    "store",
    "first",
    "line",
    "variable",
    "file",
    "underscore",
    "stuff",
    "print",
    "first",
    "line",
    "use",
    "method",
    "read",
    "line",
    "twice",
    "first",
    "time",
    "called",
    "save",
    "first",
    "line",
    "variable",
    "file",
    "underscore",
    "stuff",
    "print",
    "first",
    "line",
    "second",
    "time",
    "called",
    "save",
    "second",
    "line",
    "variable",
    "file",
    "underscore",
    "stuff",
    "print",
    "second",
    "line",
    "use",
    "loop",
    "print",
    "line",
    "individually",
    "follows",
    "let",
    "represent",
    "every",
    "character",
    "string",
    "grid",
    "specify",
    "number",
    "characters",
    "would",
    "like",
    "read",
    "string",
    "argument",
    "method",
    "read",
    "lines",
    "use",
    "4",
    "argument",
    "method",
    "read",
    "lines",
    "print",
    "first",
    "four",
    "characters",
    "file",
    "time",
    "call",
    "method",
    "progress",
    "text",
    "call",
    "method",
    "argument",
    "16",
    "first",
    "16",
    "characters",
    "printed",
    "new",
    "line",
    "call",
    "method",
    "second",
    "time",
    "next",
    "five",
    "characters",
    "printed",
    "finally",
    "call",
    "method",
    "last",
    "time",
    "argument",
    "nine",
    "last",
    "nine",
    "characters",
    "printed",
    "check",
    "labs",
    "examples",
    "methods",
    "file",
    "types",
    "music",
    "also",
    "write",
    "files",
    "using",
    "open",
    "function",
    "use",
    "python",
    "open",
    "function",
    "get",
    "file",
    "object",
    "create",
    "text",
    "file",
    "apply",
    "method",
    "write",
    "write",
    "data",
    "file",
    "result",
    "text",
    "written",
    "file",
    "create",
    "file",
    "example",
    "2",
    "dot",
    "txt",
    "follows",
    "use",
    "open",
    "function",
    "first",
    "argument",
    "file",
    "path",
    "made",
    "file",
    "name",
    "file",
    "directory",
    "overwritten",
    "file",
    "directory",
    "set",
    "mode",
    "parameter",
    "w",
    "writing",
    "finally",
    "file",
    "object",
    "use",
    "statement",
    "code",
    "run",
    "everything",
    "indent",
    "block",
    "close",
    "file",
    "create",
    "file",
    "object",
    "file",
    "use",
    "open",
    "function",
    "creates",
    "file",
    "directory",
    "use",
    "method",
    "write",
    "write",
    "data",
    "file",
    "argument",
    "text",
    "would",
    "like",
    "input",
    "file",
    "use",
    "right",
    "method",
    "successively",
    "time",
    "called",
    "write",
    "file",
    "first",
    "time",
    "called",
    "write",
    "line",
    "slash",
    "n",
    "represent",
    "new",
    "line",
    "second",
    "time",
    "call",
    "method",
    "write",
    "line",
    "b",
    "close",
    "file",
    "write",
    "element",
    "list",
    "file",
    "use",
    "command",
    "open",
    "function",
    "create",
    "file",
    "list",
    "lines",
    "three",
    "elements",
    "consisting",
    "text",
    "use",
    "loop",
    "read",
    "element",
    "first",
    "lines",
    "pass",
    "variable",
    "line",
    "first",
    "iteration",
    "loop",
    "writes",
    "first",
    "element",
    "list",
    "file",
    "example",
    "second",
    "iteration",
    "writes",
    "second",
    "element",
    "list",
    "end",
    "loop",
    "file",
    "closed",
    "set",
    "mode",
    "appended",
    "using",
    "lowercase",
    "create",
    "new",
    "file",
    "use",
    "existing",
    "file",
    "call",
    "method",
    "write",
    "write",
    "existing",
    "file",
    "add",
    "line",
    "c",
    "close",
    "file",
    "copy",
    "one",
    "file",
    "new",
    "file",
    "follows",
    "first",
    "read",
    "file",
    "example",
    "1",
    "interact",
    "via",
    "file",
    "object",
    "read",
    "file",
    "create",
    "new",
    "file",
    "example",
    "3",
    "use",
    "file",
    "object",
    "write",
    "file",
    "interact",
    "loop",
    "takes",
    "line",
    "file",
    "object",
    "read",
    "file",
    "stores",
    "file",
    "example",
    "3",
    "using",
    "file",
    "object",
    "write",
    "file",
    "first",
    "iteration",
    "copies",
    "first",
    "line",
    "second",
    "iteration",
    "copies",
    "second",
    "line",
    "till",
    "end",
    "file",
    "reached",
    "files",
    "closed",
    "check",
    "labs",
    "examples",
    "music",
    "dependencies",
    "libraries",
    "code",
    "help",
    "solve",
    "problems",
    "video",
    "introduce",
    "pandas",
    "popular",
    "library",
    "data",
    "analysis",
    "import",
    "library",
    "dependency",
    "like",
    "pandas",
    "using",
    "following",
    "command",
    "start",
    "import",
    "command",
    "followed",
    "name",
    "library",
    "access",
    "large",
    "number",
    "classes",
    "functions",
    "assumes",
    "library",
    "installed",
    "lab",
    "environment",
    "necessary",
    "libraries",
    "installed",
    "let",
    "say",
    "would",
    "like",
    "load",
    "csv",
    "file",
    "using",
    "panda",
    "function",
    "read",
    "csv",
    "csv",
    "typical",
    "file",
    "type",
    "used",
    "store",
    "data",
    "simply",
    "type",
    "word",
    "pandas",
    "dot",
    "name",
    "function",
    "inputs",
    "typing",
    "pandas",
    "time",
    "may",
    "get",
    "tedious",
    "use",
    "statement",
    "shorten",
    "name",
    "library",
    "case",
    "use",
    "standard",
    "abbreviation",
    "pd",
    "type",
    "pd",
    "dot",
    "followed",
    "name",
    "function",
    "would",
    "like",
    "use",
    "case",
    "read",
    "underscore",
    "csv",
    "limited",
    "abbreviation",
    "pd",
    "case",
    "use",
    "term",
    "banana",
    "stick",
    "pd",
    "rest",
    "video",
    "let",
    "examine",
    "code",
    "depth",
    "one",
    "way",
    "pandas",
    "allows",
    "work",
    "data",
    "data",
    "frame",
    "let",
    "go",
    "process",
    "go",
    "csv",
    "file",
    "data",
    "frame",
    "variable",
    "stores",
    "path",
    "csv",
    "used",
    "argument",
    "read",
    "underscore",
    "csv",
    "function",
    "result",
    "stored",
    "variable",
    "df",
    "short",
    "data",
    "frame",
    "data",
    "data",
    "frame",
    "work",
    "use",
    "method",
    "head",
    "examine",
    "first",
    "five",
    "rows",
    "data",
    "frame",
    "process",
    "loading",
    "excel",
    "file",
    "similar",
    "use",
    "path",
    "excel",
    "file",
    "function",
    "reads",
    "excel",
    "result",
    "data",
    "frame",
    "data",
    "frame",
    "comprised",
    "rows",
    "columns",
    "create",
    "data",
    "frame",
    "dictionary",
    "keys",
    "correspond",
    "column",
    "labels",
    "values",
    "lists",
    "corresponding",
    "rows",
    "cast",
    "dictionary",
    "data",
    "frame",
    "using",
    "function",
    "data",
    "frame",
    "see",
    "direct",
    "correspondence",
    "table",
    "keys",
    "correspond",
    "table",
    "headers",
    "values",
    "lists",
    "corresponding",
    "rows",
    "create",
    "new",
    "data",
    "frame",
    "consisting",
    "one",
    "column",
    "put",
    "data",
    "frame",
    "name",
    "case",
    "df",
    "name",
    "column",
    "header",
    "enclosed",
    "double",
    "brackets",
    "result",
    "new",
    "data",
    "frame",
    "comprised",
    "original",
    "column",
    "thing",
    "multiple",
    "columns",
    "put",
    "data",
    "frame",
    "name",
    "case",
    "df",
    "name",
    "multiple",
    "column",
    "headers",
    "enclosed",
    "double",
    "brackets",
    "result",
    "new",
    "data",
    "frame",
    "comprised",
    "specified",
    "columns",
    "music",
    "data",
    "frame",
    "work",
    "data",
    "save",
    "results",
    "formats",
    "consider",
    "stack",
    "13",
    "blocks",
    "different",
    "colors",
    "see",
    "three",
    "unique",
    "colors",
    "let",
    "say",
    "would",
    "like",
    "find",
    "many",
    "unique",
    "elements",
    "column",
    "data",
    "frame",
    "may",
    "much",
    "difficult",
    "instead",
    "13",
    "elements",
    "may",
    "millions",
    "pandas",
    "method",
    "unique",
    "determine",
    "unique",
    "elements",
    "column",
    "data",
    "frame",
    "let",
    "say",
    "would",
    "like",
    "determine",
    "unique",
    "year",
    "albums",
    "data",
    "set",
    "enter",
    "name",
    "data",
    "frame",
    "enter",
    "name",
    "column",
    "released",
    "within",
    "brackets",
    "apply",
    "method",
    "unique",
    "result",
    "unique",
    "elements",
    "column",
    "released",
    "let",
    "say",
    "would",
    "like",
    "create",
    "new",
    "database",
    "consisting",
    "songs",
    "1980s",
    "look",
    "column",
    "released",
    "songs",
    "made",
    "select",
    "corresponding",
    "rows",
    "accomplish",
    "within",
    "one",
    "line",
    "code",
    "pandas",
    "let",
    "break",
    "steps",
    "use",
    "inequality",
    "operators",
    "entire",
    "data",
    "frame",
    "pandas",
    "result",
    "series",
    "boolean",
    "values",
    "case",
    "simply",
    "specify",
    "column",
    "released",
    "inequality",
    "albums",
    "result",
    "series",
    "boolean",
    "values",
    "result",
    "true",
    "condition",
    "true",
    "false",
    "otherwise",
    "select",
    "specified",
    "columns",
    "one",
    "line",
    "simply",
    "use",
    "data",
    "frame",
    "names",
    "square",
    "brackets",
    "place",
    "previously",
    "mentioned",
    "inequality",
    "assign",
    "variable",
    "df1",
    "new",
    "data",
    "frame",
    "album",
    "released",
    "save",
    "new",
    "data",
    "frame",
    "using",
    "method",
    "underscore",
    "csv",
    "argument",
    "name",
    "csv",
    "file",
    "make",
    "sure",
    "include",
    "dot",
    "csv",
    "extension",
    "functions",
    "save",
    "data",
    "frame",
    "formats",
    "music",
    "video",
    "covering",
    "numpy",
    "1d",
    "particular",
    "nd",
    "arrays",
    "numpy",
    "library",
    "scientific",
    "computing",
    "many",
    "useful",
    "functions",
    "many",
    "advantages",
    "like",
    "speed",
    "memory",
    "numpy",
    "also",
    "basis",
    "pandas",
    "check",
    "pandas",
    "video",
    "video",
    "covering",
    "basics",
    "array",
    "creation",
    "indexing",
    "slicing",
    "basic",
    "operations",
    "universal",
    "functions",
    "let",
    "go",
    "create",
    "numpy",
    "array",
    "python",
    "list",
    "container",
    "allows",
    "store",
    "access",
    "data",
    "element",
    "associated",
    "index",
    "access",
    "element",
    "using",
    "square",
    "bracket",
    "follows",
    "numpy",
    "array",
    "nd",
    "array",
    "similar",
    "list",
    "usually",
    "fixed",
    "size",
    "element",
    "type",
    "case",
    "integers",
    "cast",
    "list",
    "numpy",
    "array",
    "first",
    "importing",
    "numpy",
    "cast",
    "list",
    "follows",
    "access",
    "data",
    "via",
    "index",
    "lists",
    "access",
    "element",
    "integer",
    "square",
    "bracket",
    "value",
    "stored",
    "follows",
    "check",
    "type",
    "array",
    "get",
    "numpy",
    "dot",
    "nd",
    "array",
    "numpy",
    "arrays",
    "contain",
    "data",
    "type",
    "use",
    "attribute",
    "type",
    "obtain",
    "data",
    "type",
    "arrays",
    "elements",
    "case",
    "integer",
    "let",
    "review",
    "basic",
    "array",
    "attributes",
    "using",
    "array",
    "attribute",
    "size",
    "number",
    "elements",
    "array",
    "five",
    "elements",
    "result",
    "five",
    "next",
    "two",
    "attributes",
    "make",
    "sense",
    "get",
    "higher",
    "dimensions",
    "let",
    "review",
    "attribute",
    "n",
    "dim",
    "represents",
    "number",
    "array",
    "dimensions",
    "rank",
    "array",
    "case",
    "one",
    "attribute",
    "shape",
    "tuple",
    "integers",
    "indicating",
    "size",
    "array",
    "dimension",
    "create",
    "numpy",
    "array",
    "real",
    "numbers",
    "check",
    "type",
    "array",
    "get",
    "numpy",
    "dot",
    "nd",
    "array",
    "examine",
    "attribute",
    "see",
    "float",
    "64",
    "elements",
    "integers",
    "many",
    "attributes",
    "check",
    "let",
    "review",
    "indexing",
    "slicing",
    "methods",
    "change",
    "first",
    "element",
    "array",
    "hundred",
    "follows",
    "array",
    "first",
    "value",
    "hundred",
    "change",
    "fifth",
    "element",
    "array",
    "follows",
    "fifth",
    "element",
    "zero",
    "like",
    "lists",
    "tuples",
    "slice",
    "numpy",
    "array",
    "elements",
    "array",
    "correspond",
    "following",
    "index",
    "select",
    "elements",
    "one",
    "three",
    "assign",
    "new",
    "numpy",
    "array",
    "follows",
    "elements",
    "correspond",
    "index",
    "like",
    "lists",
    "count",
    "element",
    "corresponding",
    "last",
    "index",
    "assign",
    "corresponding",
    "indices",
    "new",
    "values",
    "follows",
    "array",
    "c",
    "new",
    "values",
    "via",
    "labs",
    "examples",
    "numpy",
    "numpy",
    "makes",
    "easier",
    "many",
    "operations",
    "commonly",
    "performed",
    "data",
    "science",
    "operations",
    "usually",
    "computationally",
    "faster",
    "require",
    "less",
    "memory",
    "numpy",
    "compared",
    "regular",
    "python",
    "let",
    "review",
    "operations",
    "arrays",
    "look",
    "many",
    "operations",
    "context",
    "euclidean",
    "vectors",
    "make",
    "things",
    "interesting",
    "vector",
    "addition",
    "widely",
    "used",
    "operation",
    "data",
    "science",
    "consider",
    "vector",
    "u",
    "two",
    "elements",
    "elements",
    "distinguished",
    "different",
    "colors",
    "similarly",
    "consider",
    "vector",
    "v",
    "two",
    "components",
    "vector",
    "addition",
    "create",
    "new",
    "vector",
    "case",
    "z",
    "first",
    "component",
    "zed",
    "addition",
    "first",
    "component",
    "vectors",
    "u",
    "v",
    "similarly",
    "second",
    "component",
    "sum",
    "second",
    "components",
    "u",
    "v",
    "new",
    "vector",
    "z",
    "linear",
    "combination",
    "vector",
    "u",
    "v",
    "representing",
    "vector",
    "addition",
    "line",
    "segment",
    "arrows",
    "helpful",
    "first",
    "vector",
    "represented",
    "red",
    "vector",
    "point",
    "direction",
    "two",
    "components",
    "first",
    "component",
    "vector",
    "one",
    "result",
    "arrow",
    "offset",
    "one",
    "unit",
    "origin",
    "horizontal",
    "direction",
    "second",
    "component",
    "zero",
    "represent",
    "component",
    "vertical",
    "direction",
    "component",
    "zero",
    "vector",
    "point",
    "vertical",
    "direction",
    "represent",
    "second",
    "vector",
    "blue",
    "first",
    "component",
    "zero",
    "therefore",
    "arrow",
    "point",
    "horizontal",
    "direction",
    "second",
    "component",
    "one",
    "result",
    "vector",
    "points",
    "vertical",
    "direction",
    "one",
    "unit",
    "add",
    "vector",
    "u",
    "v",
    "get",
    "new",
    "vector",
    "z",
    "add",
    "first",
    "component",
    "corresponds",
    "horizontal",
    "direction",
    "also",
    "add",
    "second",
    "component",
    "helpful",
    "use",
    "tip",
    "tail",
    "method",
    "adding",
    "vectors",
    "placing",
    "tail",
    "vector",
    "v",
    "tip",
    "vector",
    "u",
    "new",
    "vector",
    "z",
    "constructed",
    "connecting",
    "base",
    "first",
    "vector",
    "u",
    "tail",
    "second",
    "v",
    "following",
    "three",
    "lines",
    "code",
    "add",
    "two",
    "lists",
    "place",
    "result",
    "list",
    "z",
    "also",
    "perform",
    "vector",
    "addition",
    "one",
    "line",
    "numpy",
    "code",
    "would",
    "require",
    "multiple",
    "lines",
    "perform",
    "vector",
    "subtraction",
    "two",
    "lists",
    "shown",
    "right",
    "side",
    "screen",
    "addition",
    "numpy",
    "code",
    "run",
    "much",
    "faster",
    "important",
    "lots",
    "data",
    "also",
    "perform",
    "vector",
    "subtraction",
    "changing",
    "addition",
    "sign",
    "subtraction",
    "sign",
    "would",
    "require",
    "multiple",
    "lines",
    "perform",
    "vector",
    "subtraction",
    "two",
    "lists",
    "shown",
    "right",
    "side",
    "screen",
    "vector",
    "multiplication",
    "scalar",
    "another",
    "commonly",
    "performed",
    "operation",
    "consider",
    "vector",
    "component",
    "specified",
    "different",
    "color",
    "simply",
    "multiply",
    "vector",
    "scalar",
    "value",
    "case",
    "component",
    "vector",
    "multiplied",
    "two",
    "case",
    "component",
    "doubled",
    "use",
    "line",
    "segment",
    "arrows",
    "visualize",
    "going",
    "original",
    "vector",
    "purple",
    "multiplying",
    "scalar",
    "value",
    "2",
    "vector",
    "stretched",
    "two",
    "units",
    "shown",
    "red",
    "new",
    "vector",
    "twice",
    "long",
    "direction",
    "vector",
    "multiplication",
    "scalar",
    "requires",
    "one",
    "line",
    "code",
    "using",
    "numpy",
    "would",
    "require",
    "multiple",
    "lines",
    "perform",
    "task",
    "shown",
    "python",
    "lists",
    "shown",
    "right",
    "side",
    "screen",
    "addition",
    "operation",
    "would",
    "also",
    "much",
    "slower",
    "hadamard",
    "product",
    "another",
    "widely",
    "used",
    "operation",
    "data",
    "science",
    "consider",
    "following",
    "two",
    "vectors",
    "u",
    "v",
    "hadamard",
    "product",
    "u",
    "v",
    "new",
    "vector",
    "z",
    "first",
    "component",
    "z",
    "product",
    "first",
    "element",
    "u",
    "v",
    "similarly",
    "second",
    "component",
    "product",
    "second",
    "element",
    "u",
    "v",
    "resultant",
    "vector",
    "consists",
    "product",
    "u",
    "v",
    "also",
    "perform",
    "hadamard",
    "product",
    "one",
    "line",
    "code",
    "numpy",
    "would",
    "require",
    "multiple",
    "lines",
    "perform",
    "hadamar",
    "product",
    "two",
    "lists",
    "shown",
    "right",
    "side",
    "screen",
    "dot",
    "product",
    "another",
    "widely",
    "used",
    "operation",
    "data",
    "science",
    "consider",
    "vector",
    "u",
    "v",
    "dot",
    "product",
    "single",
    "number",
    "given",
    "following",
    "term",
    "represents",
    "similar",
    "two",
    "vectors",
    "multiply",
    "first",
    "component",
    "v",
    "u",
    "multiply",
    "second",
    "component",
    "add",
    "result",
    "together",
    "result",
    "number",
    "represents",
    "similar",
    "two",
    "vectors",
    "also",
    "perform",
    "dot",
    "product",
    "using",
    "numpy",
    "function",
    "dot",
    "assign",
    "variable",
    "result",
    "follows",
    "consider",
    "array",
    "u",
    "array",
    "contains",
    "following",
    "elements",
    "add",
    "scalar",
    "value",
    "array",
    "numpy",
    "add",
    "value",
    "element",
    "property",
    "known",
    "broadcasting",
    "universal",
    "function",
    "function",
    "operates",
    "nd",
    "arrays",
    "apply",
    "universal",
    "function",
    "numpy",
    "array",
    "consider",
    "arrays",
    "calculate",
    "mean",
    "average",
    "value",
    "elements",
    "using",
    "method",
    "mean",
    "corresponds",
    "average",
    "elements",
    "case",
    "result",
    "zero",
    "many",
    "functions",
    "example",
    "consider",
    "numpy",
    "arrays",
    "b",
    "find",
    "maximum",
    "value",
    "using",
    "method",
    "see",
    "largest",
    "value",
    "therefore",
    "method",
    "max",
    "returns",
    "use",
    "numpy",
    "create",
    "functions",
    "map",
    "numpy",
    "arrays",
    "new",
    "numpy",
    "arrays",
    "let",
    "implement",
    "code",
    "left",
    "side",
    "screen",
    "use",
    "right",
    "side",
    "screen",
    "demonstrate",
    "going",
    "access",
    "value",
    "pi",
    "num",
    "pi",
    "follows",
    "create",
    "following",
    "numpy",
    "array",
    "radians",
    "array",
    "corresponds",
    "following",
    "vector",
    "apply",
    "function",
    "sine",
    "array",
    "x",
    "assign",
    "values",
    "array",
    "applies",
    "sine",
    "function",
    "element",
    "array",
    "corresponds",
    "applying",
    "sine",
    "function",
    "component",
    "vector",
    "result",
    "new",
    "array",
    "value",
    "corresponds",
    "sine",
    "function",
    "applied",
    "element",
    "array",
    "x",
    "useful",
    "function",
    "plotting",
    "mathematical",
    "functions",
    "line",
    "space",
    "line",
    "space",
    "returns",
    "evenly",
    "spaced",
    "numbers",
    "specified",
    "interval",
    "specify",
    "starting",
    "point",
    "sequence",
    "ending",
    "point",
    "sequence",
    "parameter",
    "num",
    "indicates",
    "number",
    "samples",
    "generate",
    "case",
    "five",
    "space",
    "samples",
    "one",
    "change",
    "parameter",
    "num",
    "9",
    "get",
    "9",
    "evenly",
    "spaced",
    "numbers",
    "interval",
    "negative",
    "two",
    "two",
    "result",
    "difference",
    "subsequent",
    "samples",
    "opposed",
    "1",
    "use",
    "function",
    "line",
    "space",
    "generate",
    "100",
    "evenly",
    "spaced",
    "samples",
    "interval",
    "0",
    "2",
    "pi",
    "use",
    "numpy",
    "function",
    "sine",
    "map",
    "array",
    "x",
    "new",
    "array",
    "import",
    "library",
    "pi",
    "plot",
    "plt",
    "help",
    "us",
    "plot",
    "function",
    "using",
    "jupyter",
    "notebook",
    "use",
    "command",
    "mat",
    "plot",
    "lib",
    "inline",
    "display",
    "plot",
    "following",
    "command",
    "plots",
    "graph",
    "first",
    "input",
    "corresponds",
    "values",
    "horizontal",
    "second",
    "input",
    "corresponds",
    "values",
    "vertical",
    "lot",
    "numpy",
    "check",
    "labs",
    "thanks",
    "watching",
    "video",
    "music",
    "create",
    "numpy",
    "arrays",
    "one",
    "dimension",
    "section",
    "focus",
    "2d",
    "arrays",
    "use",
    "numpy",
    "build",
    "arrays",
    "much",
    "higher",
    "dimensions",
    "video",
    "cover",
    "basics",
    "array",
    "creation",
    "2d",
    "indexing",
    "slicing",
    "2d",
    "basic",
    "operations",
    "n2d",
    "consider",
    "list",
    "list",
    "contains",
    "three",
    "nested",
    "lists",
    "equal",
    "size",
    "list",
    "simplicity",
    "cast",
    "list",
    "numpy",
    "array",
    "follows",
    "helpful",
    "visualize",
    "numpy",
    "array",
    "rectangular",
    "array",
    "nested",
    "list",
    "corresponds",
    "different",
    "row",
    "matrix",
    "use",
    "attribute",
    "dim",
    "obtain",
    "number",
    "axes",
    "dimensions",
    "referred",
    "rank",
    "term",
    "rank",
    "refer",
    "number",
    "linearly",
    "independent",
    "columns",
    "like",
    "matrix",
    "useful",
    "think",
    "number",
    "nested",
    "lists",
    "first",
    "list",
    "represents",
    "first",
    "dimension",
    "list",
    "contains",
    "another",
    "set",
    "lists",
    "represents",
    "second",
    "dimension",
    "axes",
    "number",
    "lists",
    "list",
    "contains",
    "dimension",
    "shape",
    "list",
    "1d",
    "array",
    "attribute",
    "shape",
    "returns",
    "tuple",
    "helpful",
    "use",
    "rectangular",
    "representation",
    "well",
    "first",
    "element",
    "tuple",
    "corresponds",
    "number",
    "nested",
    "lists",
    "contained",
    "original",
    "list",
    "number",
    "rows",
    "rectangular",
    "representation",
    "case",
    "three",
    "second",
    "element",
    "corresponds",
    "size",
    "nested",
    "lists",
    "number",
    "columns",
    "rectangular",
    "array",
    "convention",
    "label",
    "axis",
    "zero",
    "axis",
    "1",
    "follows",
    "also",
    "use",
    "attribute",
    "size",
    "get",
    "size",
    "array",
    "see",
    "three",
    "rows",
    "three",
    "columns",
    "multiplying",
    "number",
    "columns",
    "rows",
    "together",
    "get",
    "total",
    "number",
    "elements",
    "case",
    "check",
    "labs",
    "arrays",
    "different",
    "shapes",
    "attributes",
    "use",
    "rectangular",
    "brackets",
    "access",
    "different",
    "elements",
    "array",
    "following",
    "image",
    "demonstrates",
    "relationship",
    "indexing",
    "conventions",
    "list",
    "like",
    "representation",
    "index",
    "first",
    "bracket",
    "corresponds",
    "different",
    "nested",
    "lists",
    "different",
    "color",
    "second",
    "bracket",
    "corresponds",
    "index",
    "particular",
    "element",
    "within",
    "nested",
    "list",
    "using",
    "rectangular",
    "representation",
    "first",
    "index",
    "corresponds",
    "row",
    "index",
    "second",
    "index",
    "corresponds",
    "column",
    "index",
    "could",
    "also",
    "use",
    "single",
    "bracket",
    "access",
    "elements",
    "follows",
    "consider",
    "following",
    "syntax",
    "index",
    "corresponds",
    "second",
    "row",
    "index",
    "third",
    "column",
    "value",
    "consider",
    "example",
    "index",
    "corresponds",
    "first",
    "row",
    "second",
    "index",
    "corresponds",
    "first",
    "column",
    "value",
    "also",
    "use",
    "slicing",
    "numpy",
    "arrays",
    "first",
    "index",
    "corresponds",
    "first",
    "row",
    "second",
    "index",
    "accesses",
    "first",
    "two",
    "columns",
    "consider",
    "example",
    "first",
    "index",
    "corresponds",
    "first",
    "two",
    "rows",
    "second",
    "index",
    "accesses",
    "last",
    "column",
    "also",
    "add",
    "arrays",
    "process",
    "identical",
    "matrix",
    "addition",
    "consider",
    "matrix",
    "x",
    "element",
    "colored",
    "differently",
    "consider",
    "matrix",
    "similarly",
    "element",
    "colored",
    "differently",
    "add",
    "matrices",
    "corresponds",
    "adding",
    "elements",
    "position",
    "adding",
    "elements",
    "contained",
    "color",
    "boxes",
    "together",
    "result",
    "new",
    "matrix",
    "size",
    "matrix",
    "x",
    "element",
    "new",
    "matrix",
    "sum",
    "corresponding",
    "elements",
    "x",
    "add",
    "two",
    "arrays",
    "numpy",
    "define",
    "array",
    "case",
    "x",
    "define",
    "second",
    "array",
    "add",
    "arrays",
    "result",
    "identical",
    "matrix",
    "addition",
    "multiplying",
    "numpy",
    "array",
    "scalar",
    "identical",
    "multiplying",
    "matrix",
    "scalar",
    "consider",
    "matrix",
    "multiply",
    "matrix",
    "scalar",
    "2",
    "simply",
    "multiply",
    "every",
    "element",
    "matrix",
    "result",
    "new",
    "matrix",
    "size",
    "element",
    "multiplied",
    "two",
    "consider",
    "array",
    "first",
    "define",
    "array",
    "multiply",
    "array",
    "scalar",
    "follows",
    "assign",
    "variable",
    "z",
    "result",
    "new",
    "array",
    "element",
    "multiplied",
    "two",
    "multiplication",
    "two",
    "arrays",
    "corresponds",
    "product",
    "marred",
    "product",
    "consider",
    "array",
    "x",
    "array",
    "hadamard",
    "product",
    "corresponds",
    "multiplying",
    "elements",
    "position",
    "multiplying",
    "elements",
    "contained",
    "color",
    "boxes",
    "together",
    "result",
    "new",
    "matrix",
    "size",
    "matrix",
    "x",
    "element",
    "new",
    "matrix",
    "product",
    "corresponding",
    "elements",
    "x",
    "consider",
    "array",
    "x",
    "find",
    "products",
    "two",
    "arrays",
    "x",
    "one",
    "line",
    "assign",
    "variable",
    "z",
    "follows",
    "result",
    "identical",
    "hadamard",
    "product",
    "also",
    "perform",
    "matrix",
    "multiplication",
    "numpy",
    "arrays",
    "matrix",
    "multiplication",
    "little",
    "complex",
    "let",
    "provide",
    "basic",
    "overview",
    "consider",
    "matrix",
    "row",
    "different",
    "color",
    "also",
    "consider",
    "matrix",
    "b",
    "column",
    "different",
    "color",
    "linear",
    "algebra",
    "multiply",
    "matrix",
    "matrix",
    "b",
    "must",
    "make",
    "sure",
    "number",
    "columns",
    "matrix",
    "case",
    "3",
    "equal",
    "number",
    "rows",
    "matrix",
    "b",
    "case",
    "three",
    "matrix",
    "multiplication",
    "obtain",
    "ith",
    "rho",
    "jth",
    "column",
    "new",
    "matrix",
    "take",
    "dot",
    "product",
    "ith",
    "row",
    "jth",
    "columns",
    "b",
    "first",
    "column",
    "first",
    "row",
    "take",
    "dot",
    "product",
    "first",
    "row",
    "first",
    "column",
    "b",
    "follows",
    "result",
    "zero",
    "first",
    "row",
    "second",
    "column",
    "new",
    "matrix",
    "take",
    "dot",
    "product",
    "first",
    "row",
    "matrix",
    "time",
    "use",
    "second",
    "column",
    "matrix",
    "b",
    "result",
    "two",
    "second",
    "row",
    "first",
    "column",
    "new",
    "matrix",
    "take",
    "dot",
    "product",
    "second",
    "row",
    "matrix",
    "first",
    "column",
    "matrix",
    "b",
    "result",
    "zero",
    "finally",
    "second",
    "row",
    "second",
    "column",
    "new",
    "matrix",
    "take",
    "dot",
    "product",
    "second",
    "row",
    "matrix",
    "second",
    "column",
    "matrix",
    "b",
    "result",
    "numpy",
    "define",
    "numpy",
    "arrays",
    "b",
    "perform",
    "matrix",
    "multiplication",
    "assign",
    "array",
    "c",
    "result",
    "array",
    "c",
    "corresponds",
    "matrix",
    "multiplication",
    "array",
    "b",
    "lot",
    "numpy",
    "check",
    "thanks",
    "watching",
    "video",
    "foreign",
    "music",
    "discuss",
    "application",
    "program",
    "interfaces",
    "apis",
    "short",
    "specifically",
    "discuss",
    "api",
    "api",
    "libraries",
    "rest",
    "apis",
    "including",
    "request",
    "response",
    "example",
    "pi",
    "coin",
    "gecko",
    "api",
    "lets",
    "two",
    "pieces",
    "software",
    "talk",
    "example",
    "program",
    "data",
    "software",
    "components",
    "use",
    "api",
    "communicate",
    "software",
    "via",
    "inputs",
    "outputs",
    "like",
    "function",
    "know",
    "api",
    "works",
    "inputs",
    "outputs",
    "pandas",
    "actually",
    "set",
    "software",
    "components",
    "much",
    "even",
    "written",
    "python",
    "data",
    "set",
    "software",
    "components",
    "use",
    "pandas",
    "api",
    "process",
    "data",
    "communicating",
    "software",
    "components",
    "let",
    "us",
    "clean",
    "diagram",
    "create",
    "dictionary",
    "create",
    "pandas",
    "object",
    "data",
    "frame",
    "constructor",
    "api",
    "lingo",
    "instance",
    "data",
    "dictionary",
    "passed",
    "along",
    "pandas",
    "api",
    "use",
    "data",
    "frame",
    "communicate",
    "api",
    "call",
    "method",
    "head",
    "data",
    "frame",
    "communicates",
    "api",
    "displaying",
    "first",
    "rows",
    "data",
    "frame",
    "call",
    "method",
    "mean",
    "api",
    "calculate",
    "mean",
    "return",
    "values",
    "rest",
    "apis",
    "another",
    "popular",
    "type",
    "api",
    "allow",
    "communicate",
    "internet",
    "letting",
    "take",
    "advantage",
    "resources",
    "like",
    "storage",
    "access",
    "data",
    "artificial",
    "intelligence",
    "algorithms",
    "much",
    "stands",
    "representational",
    "state",
    "transfer",
    "rest",
    "apis",
    "program",
    "called",
    "client",
    "api",
    "communicates",
    "web",
    "service",
    "call",
    "internet",
    "set",
    "rules",
    "regarding",
    "communication",
    "input",
    "request",
    "output",
    "response",
    "common",
    "terms",
    "code",
    "thought",
    "client",
    "web",
    "service",
    "referred",
    "resource",
    "client",
    "finds",
    "service",
    "via",
    "endpoint",
    "review",
    "next",
    "section",
    "client",
    "sends",
    "requests",
    "resource",
    "response",
    "client",
    "http",
    "methods",
    "way",
    "transmitting",
    "data",
    "internet",
    "tell",
    "rest",
    "apis",
    "sending",
    "request",
    "request",
    "usually",
    "communicated",
    "via",
    "http",
    "message",
    "http",
    "message",
    "usually",
    "contains",
    "json",
    "file",
    "contains",
    "instructions",
    "operation",
    "would",
    "like",
    "service",
    "perform",
    "operation",
    "transmitted",
    "web",
    "service",
    "via",
    "internet",
    "service",
    "performs",
    "operation",
    "similar",
    "manner",
    "web",
    "service",
    "returns",
    "response",
    "via",
    "http",
    "message",
    "information",
    "usually",
    "returned",
    "via",
    "json",
    "file",
    "information",
    "transmitted",
    "back",
    "client",
    "cryptocurrency",
    "data",
    "excellent",
    "use",
    "api",
    "constantly",
    "updated",
    "vital",
    "cryptocurrency",
    "trading",
    "use",
    "pi",
    "coin",
    "gecko",
    "python",
    "client",
    "wrapper",
    "coin",
    "gecko",
    "api",
    "updated",
    "every",
    "minute",
    "coing",
    "gecko",
    "use",
    "wrapper",
    "client",
    "easy",
    "use",
    "focus",
    "task",
    "collecting",
    "data",
    "also",
    "introduce",
    "panda",
    "time",
    "series",
    "functions",
    "dealing",
    "time",
    "series",
    "data",
    "using",
    "pi",
    "coin",
    "gecko",
    "collect",
    "data",
    "simple",
    "need",
    "install",
    "import",
    "library",
    "create",
    "client",
    "object",
    "finally",
    "use",
    "function",
    "request",
    "data",
    "function",
    "getting",
    "data",
    "bitcoin",
    "us",
    "dollars",
    "past",
    "30",
    "days",
    "case",
    "response",
    "json",
    "file",
    "expressed",
    "python",
    "dictionary",
    "nested",
    "lists",
    "including",
    "price",
    "market",
    "cap",
    "total",
    "volumes",
    "contain",
    "unix",
    "timestamp",
    "price",
    "time",
    "interested",
    "price",
    "select",
    "using",
    "key",
    "price",
    "make",
    "things",
    "simple",
    "convert",
    "nested",
    "list",
    "data",
    "frame",
    "columns",
    "time",
    "stamp",
    "price",
    "difficult",
    "understand",
    "column",
    "timestamp",
    "convert",
    "readable",
    "format",
    "using",
    "pandas",
    "function",
    "underscore",
    "date",
    "time",
    "using",
    "underscore",
    "date",
    "time",
    "function",
    "create",
    "readable",
    "time",
    "data",
    "input",
    "timestamp",
    "column",
    "unit",
    "time",
    "set",
    "milliseconds",
    "append",
    "output",
    "new",
    "column",
    "date",
    "want",
    "create",
    "candlestick",
    "plot",
    "get",
    "data",
    "daily",
    "candlesticks",
    "group",
    "date",
    "find",
    "minimum",
    "maximum",
    "first",
    "last",
    "price",
    "day",
    "finally",
    "use",
    "plotly",
    "create",
    "candlestick",
    "chart",
    "plot",
    "view",
    "candlestick",
    "chart",
    "opening",
    "html",
    "file",
    "clicking",
    "trust",
    "html",
    "top",
    "left",
    "tab",
    "look",
    "something",
    "like",
    "thank",
    "video",
    "discuss",
    "application",
    "program",
    "interfaces",
    "use",
    "kind",
    "artificial",
    "intelligence",
    "transcribe",
    "audio",
    "file",
    "using",
    "watson",
    "text",
    "speech",
    "api",
    "translate",
    "text",
    "new",
    "language",
    "using",
    "watson",
    "language",
    "translator",
    "api",
    "api",
    "call",
    "send",
    "copy",
    "audio",
    "file",
    "api",
    "sometimes",
    "called",
    "post",
    "request",
    "api",
    "send",
    "text",
    "transcription",
    "individual",
    "saying",
    "hood",
    "api",
    "making",
    "get",
    "request",
    "send",
    "text",
    "would",
    "like",
    "translate",
    "second",
    "language",
    "second",
    "api",
    "api",
    "translate",
    "text",
    "send",
    "translation",
    "back",
    "case",
    "translate",
    "english",
    "spanish",
    "provide",
    "overview",
    "api",
    "keys",
    "endpoints",
    "watson",
    "speech",
    "text",
    "watson",
    "translate",
    "first",
    "review",
    "api",
    "keys",
    "endpoints",
    "give",
    "access",
    "api",
    "api",
    "key",
    "way",
    "access",
    "api",
    "unique",
    "set",
    "characters",
    "api",
    "uses",
    "identify",
    "authorize",
    "usually",
    "first",
    "call",
    "api",
    "includes",
    "api",
    "key",
    "allow",
    "access",
    "api",
    "many",
    "apis",
    "may",
    "get",
    "charged",
    "call",
    "like",
    "password",
    "keep",
    "api",
    "key",
    "secret",
    "endpoint",
    "simply",
    "location",
    "service",
    "used",
    "find",
    "api",
    "internet",
    "like",
    "web",
    "address",
    "transcribe",
    "audio",
    "file",
    "using",
    "watson",
    "text",
    "speech",
    "api",
    "start",
    "lab",
    "sign",
    "api",
    "key",
    "download",
    "audio",
    "file",
    "directory",
    "first",
    "import",
    "speech",
    "text",
    "v1",
    "ibm",
    "watson",
    "service",
    "endpoint",
    "based",
    "location",
    "service",
    "instance",
    "store",
    "information",
    "variable",
    "url",
    "underscore",
    "s2t",
    "find",
    "url",
    "use",
    "view",
    "service",
    "credentials",
    "api",
    "key",
    "create",
    "adapter",
    "object",
    "parameters",
    "endpoint",
    "api",
    "key",
    "use",
    "object",
    "communicate",
    "watson",
    "speech",
    "text",
    "service",
    "path",
    "wav",
    "file",
    "would",
    "like",
    "convert",
    "text",
    "create",
    "file",
    "object",
    "wave",
    "wav",
    "file",
    "using",
    "open",
    "set",
    "mode",
    "rb",
    "means",
    "read",
    "file",
    "binary",
    "format",
    "file",
    "object",
    "allows",
    "us",
    "access",
    "wav",
    "file",
    "contains",
    "audio",
    "use",
    "method",
    "recognize",
    "adapter",
    "object",
    "basically",
    "sends",
    "audio",
    "file",
    "watson",
    "speech",
    "text",
    "service",
    "parameter",
    "audio",
    "file",
    "object",
    "content",
    "type",
    "audio",
    "file",
    "format",
    "service",
    "sends",
    "response",
    "stored",
    "object",
    "response",
    "attribute",
    "result",
    "contains",
    "python",
    "dictionary",
    "key",
    "results",
    "value",
    "list",
    "contains",
    "dictionary",
    "interested",
    "key",
    "transcript",
    "assign",
    "variable",
    "recognized",
    "underscore",
    "text",
    "follows",
    "recognized",
    "underscore",
    "text",
    "contains",
    "string",
    "transcribed",
    "text",
    "let",
    "see",
    "translate",
    "text",
    "using",
    "watson",
    "language",
    "translator",
    "first",
    "import",
    "language",
    "translator",
    "v3",
    "ibm",
    "underscore",
    "watson",
    "assign",
    "service",
    "endpoint",
    "variable",
    "urlt",
    "obtain",
    "service",
    "lab",
    "instructions",
    "require",
    "api",
    "key",
    "see",
    "lab",
    "instructions",
    "obtain",
    "api",
    "key",
    "api",
    "request",
    "requires",
    "date",
    "version",
    "see",
    "documentation",
    "create",
    "language",
    "translator",
    "object",
    "language",
    "translator",
    "get",
    "list",
    "languages",
    "service",
    "identify",
    "follows",
    "method",
    "returns",
    "language",
    "code",
    "example",
    "english",
    "symbol",
    "e",
    "n",
    "spanish",
    "symbol",
    "e",
    "last",
    "section",
    "assigned",
    "transcribed",
    "text",
    "variable",
    "recognized",
    "underscore",
    "text",
    "use",
    "method",
    "translate",
    "translate",
    "text",
    "result",
    "detailed",
    "response",
    "object",
    "parameter",
    "text",
    "text",
    "model",
    "underscore",
    "id",
    "type",
    "model",
    "would",
    "like",
    "use",
    "case",
    "set",
    "en",
    "hyphen",
    "es",
    "english",
    "spanish",
    "use",
    "method",
    "get",
    "result",
    "get",
    "translated",
    "text",
    "assign",
    "variable",
    "translation",
    "result",
    "dictionary",
    "includes",
    "translation",
    "word",
    "count",
    "character",
    "count",
    "obtain",
    "translation",
    "assign",
    "variable",
    "spanish",
    "underscore",
    "translation",
    "follows",
    "using",
    "variable",
    "spanish",
    "underscore",
    "translation",
    "translate",
    "text",
    "back",
    "english",
    "follows",
    "result",
    "dictionary",
    "obtain",
    "string",
    "text",
    "follows",
    "translate",
    "text",
    "french",
    "follows",
    "thanks",
    "watching",
    "video",
    "music",
    "foreign",
    "music",
    "discuss",
    "http",
    "protocol",
    "specifically",
    "discuss",
    "uniform",
    "resource",
    "locator",
    "url",
    "request",
    "response",
    "touched",
    "rest",
    "apis",
    "last",
    "section",
    "http",
    "protocol",
    "thought",
    "general",
    "protocol",
    "transferring",
    "information",
    "web",
    "includes",
    "many",
    "types",
    "rest",
    "apis",
    "recall",
    "rest",
    "apis",
    "function",
    "sending",
    "request",
    "request",
    "communicated",
    "via",
    "http",
    "message",
    "http",
    "message",
    "usually",
    "contains",
    "json",
    "file",
    "client",
    "use",
    "web",
    "page",
    "browser",
    "sends",
    "http",
    "request",
    "server",
    "page",
    "hosted",
    "server",
    "tries",
    "find",
    "desired",
    "resource",
    "default",
    "request",
    "successful",
    "server",
    "send",
    "object",
    "client",
    "http",
    "response",
    "includes",
    "information",
    "like",
    "type",
    "resource",
    "length",
    "research",
    "source",
    "information",
    "table",
    "web",
    "server",
    "represents",
    "list",
    "resources",
    "stored",
    "web",
    "server",
    "case",
    "html",
    "file",
    "png",
    "image",
    "text",
    "file",
    "request",
    "made",
    "information",
    "web",
    "server",
    "sends",
    "requested",
    "information",
    "one",
    "files",
    "uniform",
    "resource",
    "locator",
    "url",
    "popular",
    "way",
    "find",
    "resources",
    "web",
    "break",
    "url",
    "three",
    "parts",
    "first",
    "scheme",
    "protocol",
    "lab",
    "always",
    "http",
    "colon",
    "forward",
    "slash",
    "forward",
    "slash",
    "internet",
    "address",
    "base",
    "url",
    "used",
    "find",
    "location",
    "examples",
    "include",
    "finally",
    "route",
    "location",
    "web",
    "server",
    "example",
    "slash",
    "images",
    "slash",
    "let",
    "us",
    "review",
    "request",
    "response",
    "process",
    "following",
    "example",
    "request",
    "message",
    "get",
    "request",
    "method",
    "http",
    "methods",
    "use",
    "start",
    "line",
    "get",
    "method",
    "http",
    "method",
    "case",
    "requesting",
    "file",
    "index",
    "dot",
    "html",
    "request",
    "header",
    "passes",
    "additional",
    "information",
    "http",
    "request",
    "get",
    "method",
    "request",
    "header",
    "empty",
    "requests",
    "body",
    "example",
    "request",
    "body",
    "later",
    "following",
    "table",
    "represents",
    "response",
    "response",
    "start",
    "line",
    "contains",
    "version",
    "number",
    "followed",
    "descriptive",
    "phrase",
    "case",
    "http",
    "status",
    "code",
    "200",
    "meaning",
    "success",
    "descriptive",
    "phrase",
    "okay",
    "status",
    "codes",
    "later",
    "response",
    "header",
    "contains",
    "information",
    "finally",
    "response",
    "body",
    "containing",
    "requested",
    "file",
    "case",
    "html",
    "document",
    "let",
    "us",
    "look",
    "status",
    "codes",
    "status",
    "code",
    "examples",
    "shown",
    "table",
    "prefix",
    "indicates",
    "class",
    "example",
    "100s",
    "informational",
    "responses",
    "100",
    "indicates",
    "everything",
    "okay",
    "far",
    "two",
    "hundreds",
    "successful",
    "responses",
    "example",
    "200",
    "request",
    "succeeded",
    "anything",
    "400s",
    "bad",
    "news",
    "401",
    "means",
    "request",
    "unauthorized",
    "500s",
    "stand",
    "server",
    "errors",
    "like",
    "501",
    "implemented",
    "http",
    "request",
    "made",
    "http",
    "method",
    "sent",
    "tells",
    "server",
    "action",
    "perform",
    "list",
    "several",
    "http",
    "methods",
    "shown",
    "next",
    "video",
    "use",
    "python",
    "apply",
    "get",
    "method",
    "retrieves",
    "data",
    "server",
    "post",
    "method",
    "sends",
    "data",
    "server",
    "music",
    "video",
    "discuss",
    "http",
    "protocol",
    "using",
    "requests",
    "library",
    "popular",
    "method",
    "dealing",
    "http",
    "protocol",
    "python",
    "review",
    "python",
    "library",
    "requests",
    "working",
    "http",
    "protocols",
    "provide",
    "overview",
    "get",
    "requests",
    "post",
    "requests",
    "let",
    "us",
    "review",
    "request",
    "module",
    "python",
    "one",
    "several",
    "libraries",
    "including",
    "http",
    "lib",
    "url",
    "lib",
    "work",
    "http",
    "protocol",
    "requests",
    "python",
    "library",
    "allows",
    "send",
    "http",
    "requests",
    "easily",
    "import",
    "library",
    "follows",
    "make",
    "get",
    "request",
    "via",
    "method",
    "get",
    "response",
    "object",
    "r",
    "information",
    "request",
    "like",
    "status",
    "request",
    "view",
    "status",
    "code",
    "using",
    "attribute",
    "status",
    "underscore",
    "code",
    "200",
    "ok",
    "view",
    "request",
    "headers",
    "view",
    "request",
    "body",
    "following",
    "line",
    "body",
    "get",
    "request",
    "get",
    "none",
    "view",
    "http",
    "response",
    "header",
    "using",
    "attribute",
    "headers",
    "returns",
    "python",
    "dictionary",
    "http",
    "response",
    "headers",
    "look",
    "dictionary",
    "values",
    "obtain",
    "date",
    "request",
    "sent",
    "using",
    "key",
    "date",
    "key",
    "content",
    "type",
    "indicates",
    "type",
    "data",
    "using",
    "response",
    "object",
    "r",
    "also",
    "check",
    "encoding",
    "content",
    "type",
    "text",
    "html",
    "use",
    "attribute",
    "text",
    "display",
    "html",
    "body",
    "review",
    "first",
    "100",
    "characters",
    "also",
    "download",
    "content",
    "see",
    "lab",
    "use",
    "get",
    "method",
    "modify",
    "results",
    "query",
    "example",
    "retrieving",
    "data",
    "api",
    "lab",
    "use",
    "simple",
    "http",
    "request",
    "response",
    "service",
    "send",
    "get",
    "request",
    "server",
    "like",
    "base",
    "url",
    "route",
    "append",
    "slash",
    "get",
    "indicates",
    "would",
    "like",
    "perform",
    "get",
    "request",
    "demonstrated",
    "following",
    "table",
    "get",
    "requested",
    "query",
    "string",
    "part",
    "uniform",
    "resource",
    "locator",
    "url",
    "sends",
    "information",
    "web",
    "server",
    "start",
    "query",
    "question",
    "mark",
    "followed",
    "series",
    "parameter",
    "value",
    "pairs",
    "shown",
    "table",
    "first",
    "parameter",
    "name",
    "name",
    "value",
    "joseph",
    "second",
    "parameter",
    "name",
    "id",
    "value",
    "one",
    "two",
    "three",
    "pair",
    "parameter",
    "value",
    "separated",
    "equal",
    "sign",
    "series",
    "pairs",
    "separated",
    "ampersand",
    "let",
    "us",
    "complete",
    "example",
    "python",
    "base",
    "url",
    "get",
    "appended",
    "end",
    "create",
    "query",
    "string",
    "use",
    "dictionary",
    "payload",
    "keys",
    "parameter",
    "names",
    "values",
    "value",
    "query",
    "string",
    "pass",
    "dictionary",
    "payload",
    "params",
    "parameter",
    "get",
    "function",
    "print",
    "url",
    "see",
    "name",
    "values",
    "see",
    "request",
    "body",
    "info",
    "sent",
    "url",
    "body",
    "value",
    "none",
    "print",
    "status",
    "code",
    "view",
    "response",
    "text",
    "look",
    "key",
    "content",
    "type",
    "look",
    "content",
    "type",
    "content",
    "content",
    "type",
    "json",
    "format",
    "using",
    "method",
    "json",
    "returns",
    "python",
    "dict",
    "key",
    "args",
    "name",
    "values",
    "query",
    "string",
    "like",
    "get",
    "request",
    "post",
    "request",
    "used",
    "send",
    "data",
    "server",
    "post",
    "request",
    "sends",
    "data",
    "request",
    "body",
    "url",
    "order",
    "send",
    "post",
    "request",
    "url",
    "change",
    "route",
    "post",
    "endpoint",
    "expect",
    "data",
    "convenient",
    "way",
    "configure",
    "http",
    "request",
    "send",
    "data",
    "server",
    "payload",
    "dictionary",
    "make",
    "post",
    "request",
    "use",
    "post",
    "function",
    "variable",
    "payload",
    "passed",
    "parameter",
    "data",
    "comparing",
    "url",
    "using",
    "attribute",
    "url",
    "response",
    "object",
    "get",
    "post",
    "request",
    "see",
    "post",
    "request",
    "name",
    "value",
    "pairs",
    "url",
    "compare",
    "post",
    "get",
    "request",
    "body",
    "see",
    "post",
    "request",
    "body",
    "view",
    "key",
    "form",
    "get",
    "payload",
    "music",
    "thank",
    "video",
    "review",
    "hypertext",
    "markup",
    "language",
    "html",
    "web",
    "scraping",
    "lots",
    "useful",
    "data",
    "available",
    "web",
    "pages",
    "real",
    "estate",
    "prices",
    "solutions",
    "coding",
    "questions",
    "website",
    "wikipedia",
    "repository",
    "world",
    "information",
    "understanding",
    "html",
    "use",
    "python",
    "extract",
    "information",
    "video",
    "review",
    "html",
    "basic",
    "web",
    "page",
    "understand",
    "composition",
    "html",
    "tag",
    "understand",
    "html",
    "trees",
    "understand",
    "html",
    "tables",
    "let",
    "us",
    "say",
    "request",
    "find",
    "name",
    "salary",
    "players",
    "national",
    "basketball",
    "league",
    "following",
    "page",
    "web",
    "page",
    "comprised",
    "html",
    "consists",
    "text",
    "surrounded",
    "series",
    "blue",
    "text",
    "elements",
    "enclosed",
    "angle",
    "brackets",
    "called",
    "tags",
    "tags",
    "tell",
    "browser",
    "display",
    "content",
    "data",
    "require",
    "text",
    "first",
    "portion",
    "contains",
    "doctype",
    "html",
    "declares",
    "document",
    "html",
    "document",
    "html",
    "element",
    "root",
    "element",
    "html",
    "page",
    "head",
    "element",
    "contains",
    "meta",
    "information",
    "html",
    "page",
    "next",
    "body",
    "displayed",
    "web",
    "page",
    "usually",
    "data",
    "interested",
    "see",
    "elements",
    "h3",
    "means",
    "type",
    "3",
    "heading",
    "makes",
    "text",
    "larger",
    "bold",
    "tags",
    "names",
    "players",
    "notice",
    "data",
    "enclosed",
    "elements",
    "starts",
    "h3",
    "brackets",
    "ends",
    "slash",
    "h3",
    "brackets",
    "also",
    "different",
    "tag",
    "p",
    "means",
    "paragraph",
    "p",
    "tag",
    "contains",
    "player",
    "salary",
    "let",
    "us",
    "take",
    "closer",
    "look",
    "composition",
    "html",
    "tag",
    "example",
    "html",
    "anchor",
    "tag",
    "display",
    "ibm",
    "click",
    "send",
    "tag",
    "name",
    "case",
    "tag",
    "defines",
    "hyperlink",
    "used",
    "link",
    "one",
    "page",
    "another",
    "helpful",
    "think",
    "tag",
    "name",
    "class",
    "python",
    "individual",
    "tag",
    "instance",
    "opening",
    "start",
    "tag",
    "end",
    "tag",
    "tag",
    "name",
    "preceded",
    "slash",
    "tags",
    "contain",
    "content",
    "case",
    "displayed",
    "web",
    "page",
    "attribute",
    "composed",
    "attribute",
    "name",
    "attribute",
    "value",
    "case",
    "url",
    "destination",
    "web",
    "page",
    "real",
    "web",
    "pages",
    "complex",
    "depending",
    "browser",
    "select",
    "html",
    "element",
    "click",
    "inspect",
    "result",
    "give",
    "ability",
    "inspect",
    "html",
    "also",
    "types",
    "content",
    "css",
    "javascript",
    "go",
    "course",
    "actual",
    "element",
    "shown",
    "html",
    "document",
    "actually",
    "referred",
    "document",
    "tree",
    "let",
    "us",
    "go",
    "simple",
    "example",
    "tags",
    "may",
    "contain",
    "strings",
    "tags",
    "elements",
    "tags",
    "children",
    "represent",
    "family",
    "tree",
    "nested",
    "tag",
    "level",
    "tree",
    "tag",
    "html",
    "tag",
    "contains",
    "head",
    "body",
    "tag",
    "head",
    "body",
    "tag",
    "descendants",
    "html",
    "tag",
    "particular",
    "children",
    "html",
    "tag",
    "html",
    "tag",
    "parent",
    "head",
    "body",
    "tag",
    "siblings",
    "level",
    "title",
    "tag",
    "child",
    "head",
    "tag",
    "parent",
    "head",
    "tag",
    "title",
    "tag",
    "descendant",
    "html",
    "tag",
    "child",
    "heading",
    "paragraph",
    "tags",
    "children",
    "body",
    "tag",
    "children",
    "body",
    "tag",
    "siblings",
    "bold",
    "tag",
    "child",
    "heading",
    "tag",
    "content",
    "tag",
    "also",
    "part",
    "tree",
    "get",
    "unwieldy",
    "draw",
    "next",
    "let",
    "us",
    "review",
    "html",
    "tables",
    "define",
    "html",
    "table",
    "table",
    "tag",
    "table",
    "row",
    "defined",
    "tr",
    "tag",
    "also",
    "use",
    "table",
    "header",
    "tag",
    "first",
    "row",
    "table",
    "row",
    "cell",
    "contains",
    "set",
    "td",
    "tags",
    "defines",
    "table",
    "cell",
    "first",
    "row",
    "first",
    "cell",
    "first",
    "row",
    "second",
    "cell",
    "second",
    "row",
    "second",
    "row",
    "first",
    "cell",
    "second",
    "row",
    "second",
    "cell",
    "basic",
    "knowledge",
    "html",
    "let",
    "us",
    "try",
    "extract",
    "data",
    "web",
    "page",
    "music",
    "video",
    "cover",
    "web",
    "scraping",
    "watching",
    "video",
    "able",
    "define",
    "web",
    "scraping",
    "understand",
    "role",
    "beautiful",
    "soup",
    "objects",
    "apply",
    "find",
    "underscore",
    "method",
    "web",
    "scrape",
    "website",
    "would",
    "wanted",
    "analyze",
    "hundreds",
    "points",
    "data",
    "find",
    "best",
    "players",
    "sports",
    "team",
    "would",
    "start",
    "manually",
    "copying",
    "pasting",
    "information",
    "different",
    "websites",
    "spreadsheet",
    "spending",
    "hours",
    "trying",
    "find",
    "right",
    "data",
    "eventually",
    "giving",
    "task",
    "overwhelming",
    "web",
    "scraping",
    "help",
    "web",
    "scraping",
    "process",
    "used",
    "automatically",
    "extract",
    "information",
    "website",
    "easily",
    "accomplished",
    "within",
    "matter",
    "minutes",
    "hours",
    "get",
    "started",
    "need",
    "little",
    "python",
    "code",
    "help",
    "two",
    "modules",
    "named",
    "requests",
    "beautiful",
    "soup",
    "let",
    "us",
    "say",
    "asked",
    "find",
    "name",
    "salary",
    "players",
    "national",
    "basketball",
    "league",
    "following",
    "web",
    "page",
    "first",
    "import",
    "beautiful",
    "soup",
    "store",
    "webpage",
    "html",
    "string",
    "variable",
    "html",
    "parse",
    "document",
    "pass",
    "beautiful",
    "soup",
    "constructor",
    "get",
    "beautiful",
    "soup",
    "object",
    "soup",
    "represents",
    "document",
    "nested",
    "data",
    "structure",
    "beautiful",
    "soup",
    "represents",
    "html",
    "set",
    "objects",
    "methods",
    "used",
    "parse",
    "html",
    "review",
    "beautiful",
    "soup",
    "object",
    "using",
    "beautiful",
    "soup",
    "object",
    "soup",
    "created",
    "tag",
    "object",
    "corresponds",
    "html",
    "tag",
    "original",
    "document",
    "example",
    "tag",
    "title",
    "consider",
    "tag",
    "h3",
    "one",
    "tag",
    "name",
    "first",
    "element",
    "tag",
    "selected",
    "case",
    "lebron",
    "james",
    "see",
    "name",
    "enclosed",
    "bold",
    "attribute",
    "b",
    "extract",
    "use",
    "tree",
    "representation",
    "let",
    "us",
    "use",
    "tree",
    "representation",
    "variable",
    "tag",
    "dash",
    "object",
    "located",
    "access",
    "child",
    "tag",
    "navigate",
    "branch",
    "follows",
    "navigate",
    "tree",
    "using",
    "parent",
    "attribute",
    "variable",
    "tag",
    "child",
    "located",
    "access",
    "parent",
    "original",
    "tag",
    "object",
    "also",
    "find",
    "sibling",
    "tag",
    "object",
    "simply",
    "use",
    "next",
    "dash",
    "sibling",
    "attribute",
    "find",
    "sibling",
    "sibling",
    "one",
    "simply",
    "use",
    "next",
    "sibling",
    "attribute",
    "consider",
    "tag",
    "dash",
    "child",
    "object",
    "access",
    "attribute",
    "name",
    "value",
    "key",
    "value",
    "pair",
    "dictionary",
    "follows",
    "return",
    "content",
    "navigable",
    "string",
    "like",
    "python",
    "string",
    "supports",
    "beautiful",
    "soup",
    "functionality",
    "let",
    "us",
    "review",
    "method",
    "find",
    "filter",
    "use",
    "filters",
    "filter",
    "based",
    "tag",
    "name",
    "attributes",
    "text",
    "string",
    "combination",
    "consider",
    "list",
    "pizza",
    "places",
    "like",
    "create",
    "beautiful",
    "soup",
    "object",
    "time",
    "name",
    "table",
    "find",
    "underscore",
    "method",
    "looks",
    "tag",
    "descendants",
    "retrieves",
    "descendants",
    "match",
    "filters",
    "apply",
    "table",
    "tag",
    "tr",
    "result",
    "python",
    "iterable",
    "like",
    "list",
    "element",
    "tag",
    "object",
    "tr",
    "corresponds",
    "row",
    "list",
    "including",
    "table",
    "header",
    "element",
    "tag",
    "object",
    "consider",
    "first",
    "row",
    "example",
    "extract",
    "first",
    "table",
    "cell",
    "also",
    "iterate",
    "table",
    "cell",
    "first",
    "iterate",
    "list",
    "table",
    "rows",
    "via",
    "variable",
    "row",
    "element",
    "corresponds",
    "row",
    "table",
    "apply",
    "method",
    "find",
    "find",
    "table",
    "cells",
    "iterate",
    "variable",
    "cells",
    "row",
    "iteration",
    "variable",
    "cell",
    "corresponds",
    "element",
    "table",
    "particular",
    "row",
    "continue",
    "iterate",
    "element",
    "repeat",
    "process",
    "row",
    "let",
    "us",
    "see",
    "apply",
    "beautiful",
    "soup",
    "web",
    "page",
    "scrape",
    "web",
    "page",
    "also",
    "need",
    "requests",
    "library",
    "first",
    "step",
    "import",
    "modules",
    "needed",
    "use",
    "get",
    "method",
    "requests",
    "library",
    "download",
    "web",
    "page",
    "input",
    "url",
    "use",
    "text",
    "attribute",
    "get",
    "text",
    "assign",
    "variable",
    "page",
    "create",
    "beautiful",
    "soup",
    "object",
    "soup",
    "variable",
    "page",
    "allow",
    "parse",
    "html",
    "page",
    "scrape",
    "page",
    "check",
    "labs",
    "music",
    "hello",
    "welcome",
    "working",
    "different",
    "file",
    "formats",
    "watching",
    "video",
    "able",
    "define",
    "different",
    "file",
    "formats",
    "csv",
    "xml",
    "json",
    "write",
    "simple",
    "programs",
    "read",
    "output",
    "data",
    "list",
    "python",
    "libraries",
    "needed",
    "extract",
    "data",
    "collecting",
    "data",
    "find",
    "many",
    "different",
    "file",
    "formats",
    "need",
    "collected",
    "read",
    "order",
    "complete",
    "story",
    "analysis",
    "gathering",
    "data",
    "python",
    "make",
    "process",
    "simpler",
    "predefined",
    "libraries",
    "explore",
    "python",
    "let",
    "us",
    "first",
    "check",
    "various",
    "file",
    "formats",
    "looking",
    "file",
    "name",
    "notice",
    "extension",
    "end",
    "title",
    "extensions",
    "let",
    "know",
    "type",
    "file",
    "needed",
    "open",
    "instance",
    "see",
    "title",
    "like",
    "file",
    "know",
    "csv",
    "file",
    "one",
    "example",
    "different",
    "file",
    "types",
    "many",
    "json",
    "xml",
    "coming",
    "across",
    "different",
    "file",
    "formats",
    "trying",
    "access",
    "data",
    "need",
    "utilize",
    "python",
    "libraries",
    "make",
    "process",
    "easier",
    "first",
    "python",
    "library",
    "become",
    "familiar",
    "called",
    "pandas",
    "importing",
    "library",
    "beginning",
    "code",
    "able",
    "easily",
    "read",
    "different",
    "file",
    "types",
    "since",
    "imported",
    "panda",
    "library",
    "let",
    "us",
    "use",
    "read",
    "first",
    "csv",
    "file",
    "instance",
    "come",
    "across",
    "file",
    "file",
    "first",
    "step",
    "assign",
    "file",
    "variable",
    "create",
    "another",
    "variable",
    "read",
    "file",
    "help",
    "panda",
    "library",
    "call",
    "read",
    "underscore",
    "csv",
    "function",
    "output",
    "data",
    "screen",
    "example",
    "headers",
    "data",
    "added",
    "first",
    "line",
    "header",
    "since",
    "want",
    "first",
    "line",
    "data",
    "header",
    "let",
    "us",
    "find",
    "correct",
    "issue",
    "learned",
    "read",
    "output",
    "data",
    "csv",
    "file",
    "let",
    "us",
    "make",
    "look",
    "little",
    "organized",
    "last",
    "example",
    "able",
    "print",
    "data",
    "file",
    "headers",
    "printed",
    "first",
    "line",
    "data",
    "header",
    "easily",
    "solve",
    "adding",
    "data",
    "frame",
    "attribute",
    "use",
    "variable",
    "df",
    "call",
    "file",
    "add",
    "columns",
    "attribute",
    "adding",
    "one",
    "line",
    "program",
    "neatly",
    "organize",
    "data",
    "output",
    "specified",
    "headers",
    "column",
    "next",
    "file",
    "format",
    "explore",
    "json",
    "file",
    "format",
    "type",
    "file",
    "text",
    "written",
    "language",
    "independent",
    "data",
    "format",
    "similar",
    "python",
    "dictionary",
    "first",
    "step",
    "reading",
    "type",
    "file",
    "import",
    "json",
    "importing",
    "json",
    "add",
    "line",
    "open",
    "file",
    "call",
    "load",
    "attribute",
    "json",
    "begin",
    "read",
    "file",
    "lastly",
    "print",
    "file",
    "next",
    "file",
    "format",
    "type",
    "xml",
    "also",
    "known",
    "extensible",
    "markup",
    "language",
    "pandas",
    "library",
    "attribute",
    "read",
    "type",
    "file",
    "let",
    "us",
    "explore",
    "parse",
    "type",
    "file",
    "first",
    "step",
    "read",
    "type",
    "file",
    "import",
    "xml",
    "importing",
    "library",
    "use",
    "e",
    "tree",
    "attribute",
    "parse",
    "xml",
    "file",
    "add",
    "column",
    "headers",
    "assign",
    "data",
    "frame",
    "create",
    "loop",
    "go",
    "document",
    "collect",
    "necessary",
    "data",
    "append",
    "data",
    "data",
    "frame",
    "video",
    "learned",
    "recognize",
    "different",
    "file",
    "types",
    "use",
    "python",
    "libraries",
    "extract",
    "data",
    "use",
    "data",
    "frames",
    "collecting",
    "data",
    "music",
    "foreign",
    "music",
    "review",
    "hypertext",
    "markup",
    "language",
    "html",
    "web",
    "scraping",
    "lots",
    "useful",
    "data",
    "available",
    "web",
    "pages",
    "real",
    "estate",
    "prices",
    "solutions",
    "coding",
    "questions",
    "website",
    "wikipedia",
    "repository",
    "world",
    "information",
    "understanding",
    "html",
    "use",
    "python",
    "extract",
    "information",
    "video",
    "review",
    "html",
    "basic",
    "web",
    "page",
    "understand",
    "composition",
    "html",
    "tag",
    "understand",
    "html",
    "trees",
    "understand",
    "html",
    "tables",
    "let",
    "us",
    "say",
    "request",
    "find",
    "name",
    "salary",
    "players",
    "national",
    "basketball",
    "league",
    "following",
    "page",
    "web",
    "page",
    "comprised",
    "html",
    "consists",
    "text",
    "surrounded",
    "series",
    "blue",
    "text",
    "elements",
    "enclosed",
    "angle",
    "brackets",
    "called",
    "tags",
    "tags",
    "tell",
    "browser",
    "display",
    "content",
    "data",
    "require",
    "text",
    "first",
    "portion",
    "contains",
    "doctype",
    "html",
    "declares",
    "document",
    "html",
    "document",
    "html",
    "element",
    "root",
    "element",
    "html",
    "page",
    "head",
    "element",
    "contains",
    "meta",
    "information",
    "html",
    "page",
    "next",
    "body",
    "displayed",
    "web",
    "page",
    "usually",
    "data",
    "interested",
    "see",
    "elements",
    "h3",
    "means",
    "type",
    "3",
    "heading",
    "makes",
    "text",
    "larger",
    "bold",
    "tags",
    "names",
    "players",
    "notice",
    "data",
    "enclosed",
    "elements",
    "starts",
    "h3",
    "brackets",
    "ends",
    "slash",
    "h3",
    "brackets",
    "also",
    "different",
    "tag",
    "p",
    "means",
    "paragraph",
    "p",
    "tag",
    "contains",
    "player",
    "salary",
    "let",
    "us",
    "take",
    "closer",
    "look",
    "composition",
    "html",
    "tag",
    "example",
    "html",
    "anchor",
    "tag",
    "display",
    "ibm",
    "click",
    "send",
    "tag",
    "name",
    "case",
    "tag",
    "defines",
    "hyperlink",
    "used",
    "link",
    "one",
    "page",
    "another",
    "helpful",
    "think",
    "tag",
    "name",
    "class",
    "python",
    "individual",
    "tag",
    "instance",
    "opening",
    "start",
    "tag",
    "end",
    "tag",
    "tag",
    "name",
    "preceded",
    "slash",
    "tags",
    "contain",
    "content",
    "case",
    "displayed",
    "web",
    "page",
    "attribute",
    "composed",
    "attribute",
    "name",
    "attribute",
    "value",
    "case",
    "url",
    "destination",
    "web",
    "page",
    "real",
    "web",
    "pages",
    "complex",
    "depending",
    "browser",
    "select",
    "html",
    "element",
    "click",
    "inspect",
    "result",
    "give",
    "ability",
    "inspect",
    "html",
    "also",
    "types",
    "content",
    "css",
    "javascript",
    "go",
    "course",
    "actual",
    "element",
    "shown",
    "html",
    "document",
    "actually",
    "referred",
    "document",
    "tree",
    "let",
    "us",
    "go",
    "simple",
    "example",
    "tags",
    "may",
    "contain",
    "strings",
    "tags",
    "elements",
    "tags",
    "children",
    "represent",
    "family",
    "tree",
    "nested",
    "tag",
    "level",
    "tree",
    "tag",
    "html",
    "tag",
    "contains",
    "head",
    "body",
    "tag",
    "head",
    "body",
    "tag",
    "descendants",
    "html",
    "tag",
    "particular",
    "children",
    "html",
    "tag",
    "html",
    "tag",
    "parent",
    "head",
    "body",
    "tag",
    "siblings",
    "level",
    "title",
    "tag",
    "child",
    "head",
    "tag",
    "parent",
    "head",
    "tag",
    "title",
    "tag",
    "descendant",
    "html",
    "tag",
    "child",
    "heading",
    "paragraph",
    "tags",
    "children",
    "body",
    "tag",
    "children",
    "body",
    "tag",
    "siblings",
    "bold",
    "tag",
    "child",
    "heading",
    "tag",
    "content",
    "tag",
    "also",
    "part",
    "tree",
    "get",
    "unwieldy",
    "draw",
    "next",
    "let",
    "us",
    "review",
    "html",
    "tables",
    "define",
    "html",
    "table",
    "table",
    "tag",
    "table",
    "row",
    "defined",
    "tr",
    "tag",
    "also",
    "use",
    "table",
    "header",
    "tag",
    "first",
    "row",
    "table",
    "row",
    "cell",
    "contains",
    "set",
    "td",
    "tags",
    "defines",
    "table",
    "cell",
    "first",
    "row",
    "first",
    "cell",
    "first",
    "row",
    "second",
    "cell",
    "second",
    "row",
    "second",
    "row",
    "first",
    "cell",
    "second",
    "row",
    "second",
    "cell",
    "basic",
    "knowledge",
    "html",
    "let",
    "us",
    "try",
    "extract",
    "data",
    "web",
    "page",
    "music",
    "video",
    "cover",
    "web",
    "scraping",
    "watching",
    "video",
    "able",
    "define",
    "web",
    "scraping",
    "understand",
    "role",
    "beautiful",
    "soup",
    "objects",
    "apply",
    "find",
    "underscore",
    "method",
    "web",
    "scrape",
    "website",
    "would",
    "wanted",
    "analyze",
    "hundreds",
    "points",
    "data",
    "find",
    "best",
    "players",
    "sports",
    "team",
    "would",
    "start",
    "manually",
    "copying",
    "pasting",
    "information",
    "different",
    "websites",
    "spreadsheet",
    "spending",
    "hours",
    "trying",
    "find",
    "right",
    "data",
    "eventually",
    "giving",
    "task",
    "overwhelming",
    "web",
    "scraping",
    "help",
    "web",
    "scraping",
    "process",
    "used",
    "automatically",
    "extract",
    "information",
    "website",
    "easily",
    "accomplished",
    "within",
    "matter",
    "minutes",
    "hours",
    "get",
    "started",
    "need",
    "little",
    "python",
    "code",
    "help",
    "two",
    "modules",
    "named",
    "requests",
    "beautiful",
    "soup",
    "let",
    "us",
    "say",
    "asked",
    "find",
    "name",
    "salary",
    "players",
    "national",
    "basketball",
    "league",
    "following",
    "web",
    "page",
    "first",
    "import",
    "beautiful",
    "soup",
    "store",
    "webpage",
    "html",
    "string",
    "variable",
    "html",
    "parse",
    "document",
    "pass",
    "beautiful",
    "soup",
    "constructor",
    "get",
    "beautiful",
    "soup",
    "object",
    "soup",
    "represents",
    "document",
    "nested",
    "data",
    "structure",
    "beautiful",
    "soup",
    "represents",
    "html",
    "set",
    "objects",
    "methods",
    "used",
    "parse",
    "html",
    "review",
    "beautiful",
    "soup",
    "object",
    "using",
    "beautiful",
    "soup",
    "object",
    "soup",
    "created",
    "tag",
    "object",
    "corresponds",
    "html",
    "tag",
    "original",
    "document",
    "example",
    "tag",
    "title",
    "consider",
    "tag",
    "h3",
    "one",
    "tag",
    "name",
    "first",
    "element",
    "tag",
    "selected",
    "case",
    "lebron",
    "james",
    "see",
    "name",
    "enclosed",
    "bold",
    "attribute",
    "b",
    "extract",
    "use",
    "tree",
    "representation",
    "let",
    "us",
    "use",
    "tree",
    "representation",
    "variable",
    "tag",
    "dash",
    "object",
    "located",
    "access",
    "child",
    "tag",
    "navigate",
    "branch",
    "follows",
    "navigate",
    "tree",
    "using",
    "parent",
    "attribute",
    "variable",
    "tag",
    "child",
    "located",
    "access",
    "parent",
    "original",
    "tag",
    "object",
    "also",
    "find",
    "sibling",
    "tag",
    "object",
    "simply",
    "use",
    "next",
    "dash",
    "sibling",
    "attribute",
    "find",
    "sibling",
    "sibling",
    "one",
    "simply",
    "use",
    "next",
    "sibling",
    "attribute",
    "consider",
    "tag",
    "dash",
    "child",
    "object",
    "access",
    "attribute",
    "name",
    "value",
    "key",
    "value",
    "pair",
    "dictionary",
    "follows",
    "return",
    "content",
    "navigable",
    "string",
    "like",
    "python",
    "string",
    "supports",
    "beautiful",
    "soup",
    "functionality",
    "let",
    "us",
    "review",
    "method",
    "find",
    "filter",
    "use",
    "filters",
    "filter",
    "based",
    "tag",
    "name",
    "attributes",
    "text",
    "string",
    "combination",
    "consider",
    "list",
    "pizza",
    "places",
    "like",
    "create",
    "beautiful",
    "soup",
    "object",
    "time",
    "name",
    "table",
    "find",
    "underscore",
    "method",
    "looks",
    "tags",
    "descendants",
    "retrieves",
    "descendants",
    "match",
    "filters",
    "apply",
    "table",
    "tag",
    "tr",
    "result",
    "python",
    "iterable",
    "like",
    "list",
    "element",
    "tag",
    "object",
    "tr",
    "corresponds",
    "row",
    "list",
    "including",
    "table",
    "header",
    "element",
    "tag",
    "object",
    "consider",
    "first",
    "row",
    "example",
    "extract",
    "first",
    "table",
    "cell",
    "also",
    "iterate",
    "table",
    "cell",
    "first",
    "iterate",
    "list",
    "table",
    "rows",
    "via",
    "variable",
    "row",
    "element",
    "corresponds",
    "row",
    "table",
    "apply",
    "method",
    "find",
    "find",
    "table",
    "cells",
    "iterate",
    "variable",
    "cells",
    "row",
    "iteration",
    "variable",
    "cell",
    "corresponds",
    "element",
    "table",
    "particular",
    "row",
    "continue",
    "iterate",
    "element",
    "repeat",
    "process",
    "row",
    "let",
    "us",
    "see",
    "apply",
    "beautiful",
    "soup",
    "web",
    "page",
    "scrape",
    "web",
    "page",
    "also",
    "need",
    "requests",
    "library",
    "first",
    "step",
    "import",
    "modules",
    "needed",
    "use",
    "get",
    "method",
    "requests",
    "library",
    "download",
    "web",
    "page",
    "input",
    "url",
    "use",
    "text",
    "attribute",
    "get",
    "text",
    "assign",
    "variable",
    "page",
    "create",
    "beautiful",
    "soup",
    "object",
    "soup",
    "variable",
    "page",
    "allow",
    "parse",
    "html",
    "page",
    "scrape",
    "page",
    "check",
    "labs",
    "music",
    "hello",
    "welcome",
    "sql",
    "data",
    "science",
    "demand",
    "data",
    "scientists",
    "high",
    "boasting",
    "salary",
    "hundred",
    "ten",
    "thousand",
    "dollars",
    "job",
    "satisfaction",
    "score",
    "wonder",
    "top",
    "spot",
    "glassdoor",
    "best",
    "jobs",
    "america",
    "glassdoor",
    "analyzed",
    "data",
    "data",
    "scientist",
    "job",
    "postings",
    "glassdoor",
    "found",
    "sql",
    "listed",
    "one",
    "top",
    "three",
    "skills",
    "data",
    "scientist",
    "step",
    "field",
    "data",
    "science",
    "vitally",
    "important",
    "set",
    "apart",
    "mastering",
    "foundations",
    "field",
    "one",
    "foundational",
    "skills",
    "require",
    "sql",
    "sql",
    "powerful",
    "language",
    "used",
    "communicating",
    "databases",
    "every",
    "application",
    "manipulates",
    "kind",
    "data",
    "needs",
    "store",
    "data",
    "somewhere",
    "whether",
    "big",
    "data",
    "table",
    "simple",
    "rows",
    "government",
    "small",
    "startup",
    "big",
    "database",
    "spans",
    "multiple",
    "servers",
    "mobile",
    "phone",
    "runs",
    "small",
    "database",
    "advantages",
    "learning",
    "sql",
    "someone",
    "interested",
    "data",
    "science",
    "sql",
    "boost",
    "professional",
    "profile",
    "data",
    "scientist",
    "one",
    "sought",
    "skills",
    "hiring",
    "employers",
    "learning",
    "sql",
    "give",
    "good",
    "understanding",
    "relational",
    "databases",
    "tapping",
    "information",
    "requires",
    "able",
    "communicate",
    "databases",
    "store",
    "data",
    "even",
    "work",
    "reporting",
    "tools",
    "generate",
    "sql",
    "queries",
    "may",
    "useful",
    "write",
    "sql",
    "statements",
    "need",
    "wait",
    "team",
    "members",
    "create",
    "sql",
    "statements",
    "course",
    "learn",
    "basics",
    "sql",
    "language",
    "relational",
    "databases",
    "course",
    "includes",
    "interesting",
    "quizzes",
    "lab",
    "assignments",
    "get",
    "experience",
    "working",
    "databases",
    "first",
    "modules",
    "work",
    "directly",
    "database",
    "develop",
    "working",
    "knowledge",
    "sql",
    "connect",
    "database",
    "run",
    "sql",
    "queries",
    "like",
    "data",
    "scientist",
    "typically",
    "would",
    "use",
    "python",
    "jupyter",
    "notebooks",
    "connect",
    "relational",
    "databases",
    "access",
    "analyze",
    "data",
    "also",
    "assignment",
    "included",
    "towards",
    "end",
    "course",
    "get",
    "opportunity",
    "apply",
    "concepts",
    "learned",
    "let",
    "get",
    "started",
    "sql",
    "data",
    "science",
    "music",
    "hello",
    "welcome",
    "sql",
    "data",
    "science",
    "first",
    "talk",
    "little",
    "bit",
    "learn",
    "course",
    "course",
    "teaches",
    "basics",
    "sql",
    "language",
    "relational",
    "database",
    "model",
    "lab",
    "exercises",
    "end",
    "section",
    "review",
    "questions",
    "end",
    "final",
    "exam",
    "end",
    "course",
    "able",
    "discuss",
    "sql",
    "basics",
    "explain",
    "various",
    "aspects",
    "relational",
    "database",
    "model",
    "video",
    "learn",
    "sql",
    "relational",
    "databases",
    "end",
    "video",
    "able",
    "describe",
    "sql",
    "data",
    "database",
    "relational",
    "database",
    "list",
    "five",
    "basic",
    "sql",
    "commands",
    "wait",
    "sql",
    "relational",
    "database",
    "sql",
    "sql",
    "language",
    "used",
    "relational",
    "databases",
    "query",
    "get",
    "data",
    "database",
    "sql",
    "also",
    "referred",
    "sql",
    "short",
    "original",
    "name",
    "structured",
    "english",
    "query",
    "language",
    "sql",
    "language",
    "used",
    "database",
    "query",
    "data",
    "data",
    "database",
    "data",
    "collection",
    "facts",
    "form",
    "words",
    "numbers",
    "even",
    "pictures",
    "data",
    "one",
    "critical",
    "assets",
    "business",
    "used",
    "collected",
    "practically",
    "everywhere",
    "bank",
    "stores",
    "data",
    "name",
    "address",
    "phone",
    "number",
    "account",
    "numbers",
    "etc",
    "credit",
    "card",
    "company",
    "paypal",
    "accounts",
    "also",
    "store",
    "data",
    "data",
    "important",
    "needs",
    "secure",
    "needs",
    "stored",
    "accessed",
    "quickly",
    "answer",
    "database",
    "database",
    "databases",
    "everywhere",
    "used",
    "every",
    "day",
    "largely",
    "taken",
    "granted",
    "database",
    "repository",
    "data",
    "program",
    "stores",
    "data",
    "database",
    "also",
    "provides",
    "functionality",
    "adding",
    "modifying",
    "querying",
    "data",
    "different",
    "kinds",
    "databases",
    "different",
    "requirements",
    "data",
    "stored",
    "various",
    "forms",
    "data",
    "stored",
    "tabular",
    "form",
    "data",
    "organized",
    "tables",
    "like",
    "spreadsheet",
    "columns",
    "rows",
    "relational",
    "database",
    "columns",
    "contain",
    "properties",
    "item",
    "last",
    "name",
    "first",
    "name",
    "email",
    "address",
    "city",
    "table",
    "collection",
    "related",
    "things",
    "like",
    "list",
    "employees",
    "list",
    "book",
    "authors",
    "relational",
    "database",
    "form",
    "relationships",
    "tables",
    "database",
    "repository",
    "data",
    "set",
    "software",
    "tools",
    "data",
    "database",
    "called",
    "database",
    "management",
    "system",
    "dbms",
    "short",
    "terms",
    "database",
    "database",
    "server",
    "database",
    "system",
    "data",
    "server",
    "database",
    "management",
    "systems",
    "often",
    "used",
    "interchangeably",
    "relational",
    "databases",
    "called",
    "relational",
    "database",
    "management",
    "system",
    "rdbms",
    "rdbms",
    "set",
    "software",
    "tools",
    "controls",
    "data",
    "access",
    "organization",
    "storage",
    "rdbms",
    "serves",
    "backbone",
    "applications",
    "many",
    "industries",
    "including",
    "banking",
    "transportation",
    "health",
    "examples",
    "relational",
    "database",
    "management",
    "systems",
    "mysql",
    "oracle",
    "database",
    "db2",
    "warehouse",
    "db2",
    "cloud",
    "majority",
    "people",
    "using",
    "database",
    "five",
    "simple",
    "commands",
    "create",
    "table",
    "insert",
    "data",
    "populate",
    "table",
    "select",
    "data",
    "table",
    "update",
    "data",
    "table",
    "delete",
    "data",
    "table",
    "building",
    "blocks",
    "sql",
    "data",
    "science",
    "describe",
    "sql",
    "data",
    "database",
    "relational",
    "database",
    "know",
    "rdbms",
    "stands",
    "relational",
    "database",
    "management",
    "system",
    "list",
    "five",
    "basic",
    "sql",
    "commands",
    "create",
    "table",
    "insert",
    "data",
    "populate",
    "table",
    "select",
    "data",
    "table",
    "update",
    "data",
    "table",
    "delete",
    "data",
    "table",
    "thanks",
    "watching",
    "video",
    "music",
    "hello",
    "welcome",
    "retrieving",
    "data",
    "select",
    "statement",
    "video",
    "learn",
    "retrieving",
    "data",
    "relational",
    "database",
    "table",
    "selecting",
    "columns",
    "table",
    "end",
    "lesson",
    "able",
    "retrieve",
    "data",
    "relational",
    "database",
    "table",
    "define",
    "use",
    "predicate",
    "identify",
    "syntax",
    "select",
    "statement",
    "using",
    "clause",
    "list",
    "comparison",
    "operators",
    "supported",
    "relational",
    "database",
    "management",
    "system",
    "main",
    "purpose",
    "database",
    "management",
    "system",
    "store",
    "data",
    "also",
    "facilitate",
    "retrieval",
    "data",
    "creating",
    "relational",
    "database",
    "table",
    "inserting",
    "data",
    "table",
    "want",
    "see",
    "data",
    "see",
    "data",
    "use",
    "select",
    "statement",
    "select",
    "statement",
    "data",
    "manipulation",
    "language",
    "statement",
    "data",
    "manipulation",
    "language",
    "statements",
    "dml",
    "statements",
    "used",
    "read",
    "modify",
    "data",
    "select",
    "statement",
    "called",
    "query",
    "output",
    "get",
    "executing",
    "query",
    "called",
    "result",
    "set",
    "result",
    "table",
    "simplest",
    "form",
    "select",
    "statement",
    "select",
    "star",
    "table",
    "name",
    "based",
    "book",
    "entity",
    "example",
    "would",
    "create",
    "table",
    "using",
    "entity",
    "name",
    "book",
    "entity",
    "attributes",
    "columns",
    "table",
    "data",
    "would",
    "added",
    "book",
    "table",
    "adding",
    "rows",
    "table",
    "using",
    "insert",
    "statement",
    "book",
    "entity",
    "examples",
    "select",
    "star",
    "book",
    "gives",
    "result",
    "set",
    "four",
    "rows",
    "data",
    "rows",
    "columns",
    "table",
    "book",
    "displayed",
    "addition",
    "also",
    "retrieve",
    "rows",
    "columns",
    "specifying",
    "column",
    "names",
    "individually",
    "select",
    "statement",
    "always",
    "retrieve",
    "columns",
    "table",
    "retrieve",
    "subset",
    "columns",
    "want",
    "retrieve",
    "two",
    "columns",
    "table",
    "book",
    "example",
    "book",
    "underscore",
    "id",
    "title",
    "case",
    "select",
    "statement",
    "select",
    "book",
    "underscore",
    "id",
    "title",
    "book",
    "case",
    "two",
    "columns",
    "display",
    "four",
    "rows",
    "also",
    "notice",
    "order",
    "columns",
    "displayed",
    "always",
    "matches",
    "order",
    "select",
    "statement",
    "however",
    "want",
    "know",
    "title",
    "book",
    "whose",
    "book",
    "underscore",
    "id",
    "b1",
    "relational",
    "operation",
    "helps",
    "us",
    "restricting",
    "results",
    "set",
    "allowing",
    "us",
    "use",
    "clause",
    "clause",
    "always",
    "requires",
    "predicate",
    "predicate",
    "condition",
    "evaluates",
    "true",
    "false",
    "unknown",
    "predicates",
    "used",
    "search",
    "condition",
    "clause",
    "need",
    "know",
    "title",
    "book",
    "whose",
    "book",
    "underscore",
    "id",
    "b1",
    "use",
    "clause",
    "predicate",
    "book",
    "underscore",
    "id",
    "equals",
    "b1",
    "select",
    "book",
    "underscore",
    "id",
    "title",
    "book",
    "book",
    "underscore",
    "id",
    "equals",
    "b1",
    "notice",
    "result",
    "set",
    "restricted",
    "one",
    "row",
    "whose",
    "condition",
    "evaluates",
    "true",
    "previous",
    "example",
    "used",
    "comparison",
    "operator",
    "equal",
    "clause",
    "comparison",
    "operators",
    "supported",
    "relational",
    "database",
    "management",
    "system",
    "equal",
    "greater",
    "less",
    "greater",
    "equal",
    "less",
    "equal",
    "equal",
    "retrieve",
    "data",
    "select",
    "columns",
    "relational",
    "database",
    "table",
    "define",
    "use",
    "predicate",
    "identify",
    "syntax",
    "select",
    "statement",
    "using",
    "clause",
    "list",
    "comparison",
    "operators",
    "supported",
    "relational",
    "database",
    "management",
    "system",
    "thanks",
    "watching",
    "video",
    "music",
    "hello",
    "welcome",
    "video",
    "briefly",
    "present",
    "useful",
    "expressions",
    "used",
    "select",
    "statements",
    "first",
    "one",
    "count",
    "database",
    "function",
    "retrieves",
    "number",
    "rows",
    "match",
    "query",
    "criteria",
    "example",
    "get",
    "total",
    "number",
    "rows",
    "given",
    "table",
    "select",
    "count",
    "star",
    "table",
    "name",
    "let",
    "say",
    "create",
    "table",
    "called",
    "metals",
    "column",
    "called",
    "country",
    "want",
    "retrieve",
    "number",
    "rows",
    "metal",
    "recipient",
    "canada",
    "issue",
    "query",
    "like",
    "select",
    "count",
    "country",
    "metals",
    "country",
    "equals",
    "canada",
    "second",
    "expression",
    "distinct",
    "distinct",
    "used",
    "remove",
    "duplicate",
    "values",
    "result",
    "set",
    "example",
    "retrieve",
    "unique",
    "values",
    "column",
    "select",
    "distinct",
    "column",
    "name",
    "table",
    "name",
    "metals",
    "table",
    "mentioned",
    "earlier",
    "country",
    "may",
    "received",
    "gold",
    "medal",
    "multiple",
    "times",
    "example",
    "retrieve",
    "list",
    "unique",
    "countries",
    "received",
    "gold",
    "medals",
    "removing",
    "duplicate",
    "values",
    "country",
    "select",
    "distinct",
    "country",
    "metals",
    "metal",
    "type",
    "equals",
    "gold",
    "third",
    "expression",
    "limit",
    "limit",
    "used",
    "restricting",
    "number",
    "rows",
    "retrieved",
    "database",
    "example",
    "retrieve",
    "first",
    "10",
    "rows",
    "table",
    "select",
    "star",
    "table",
    "name",
    "limit",
    "useful",
    "examine",
    "result",
    "set",
    "looking",
    "rows",
    "instead",
    "retrieving",
    "entire",
    "result",
    "set",
    "may",
    "large",
    "example",
    "retrieve",
    "rows",
    "metals",
    "table",
    "particular",
    "year",
    "select",
    "star",
    "metals",
    "year",
    "equals",
    "2018",
    "limit",
    "five",
    "video",
    "looked",
    "useful",
    "expressions",
    "used",
    "select",
    "statements",
    "namely",
    "count",
    "distinct",
    "limit",
    "functions",
    "thanks",
    "watching",
    "video",
    "music",
    "hello",
    "welcome",
    "insert",
    "statement",
    "video",
    "learn",
    "populating",
    "relational",
    "database",
    "table",
    "end",
    "video",
    "able",
    "identify",
    "syntax",
    "insert",
    "statement",
    "explain",
    "two",
    "methods",
    "add",
    "rows",
    "table",
    "table",
    "created",
    "table",
    "needs",
    "populated",
    "data",
    "insert",
    "data",
    "table",
    "use",
    "insert",
    "statement",
    "insert",
    "statement",
    "used",
    "add",
    "new",
    "rows",
    "table",
    "insert",
    "statement",
    "one",
    "data",
    "manipulation",
    "language",
    "statements",
    "data",
    "manipulation",
    "language",
    "statements",
    "dml",
    "statements",
    "used",
    "read",
    "modify",
    "data",
    "based",
    "author",
    "entity",
    "example",
    "created",
    "table",
    "using",
    "entity",
    "name",
    "author",
    "entity",
    "attributes",
    "columns",
    "table",
    "add",
    "data",
    "author",
    "table",
    "adding",
    "rows",
    "table",
    "add",
    "data",
    "author",
    "table",
    "use",
    "insert",
    "statement",
    "syntax",
    "insert",
    "statement",
    "looks",
    "like",
    "insert",
    "table",
    "name",
    "column",
    "name",
    "values",
    "statement",
    "table",
    "name",
    "identifies",
    "table",
    "column",
    "name",
    "list",
    "identifies",
    "column",
    "table",
    "values",
    "clause",
    "specifies",
    "data",
    "values",
    "added",
    "columns",
    "table",
    "add",
    "row",
    "data",
    "raul",
    "chong",
    "insert",
    "row",
    "author",
    "underscore",
    "id",
    "a1",
    "last",
    "name",
    "chong",
    "first",
    "name",
    "raul",
    "email",
    "rfc",
    "city",
    "toronto",
    "country",
    "sca",
    "canada",
    "author",
    "table",
    "six",
    "columns",
    "insert",
    "statement",
    "lists",
    "six",
    "column",
    "names",
    "separated",
    "commas",
    "followed",
    "value",
    "columns",
    "also",
    "separated",
    "commas",
    "important",
    "number",
    "values",
    "provided",
    "values",
    "clause",
    "equal",
    "number",
    "column",
    "names",
    "specified",
    "column",
    "name",
    "list",
    "ensures",
    "column",
    "value",
    "tables",
    "need",
    "populated",
    "one",
    "row",
    "time",
    "multiple",
    "rows",
    "inserted",
    "specifying",
    "row",
    "values",
    "clause",
    "values",
    "clause",
    "row",
    "separated",
    "comma",
    "example",
    "insert",
    "statement",
    "inserting",
    "two",
    "rows",
    "one",
    "raul",
    "chong",
    "one",
    "rav",
    "ahuja",
    "identify",
    "syntax",
    "insert",
    "statement",
    "explain",
    "two",
    "methods",
    "add",
    "rows",
    "table",
    "one",
    "row",
    "time",
    "multiple",
    "rows",
    "thanks",
    "watching",
    "video",
    "music",
    "hello",
    "welcome",
    "update",
    "statement",
    "delete",
    "statement",
    "video",
    "learn",
    "altering",
    "deleting",
    "data",
    "relational",
    "database",
    "table",
    "end",
    "lesson",
    "able",
    "identify",
    "syntax",
    "update",
    "statement",
    "delete",
    "statement",
    "explain",
    "importance",
    "clause",
    "statements",
    "table",
    "created",
    "populated",
    "data",
    "data",
    "table",
    "altered",
    "update",
    "statement",
    "update",
    "statement",
    "one",
    "data",
    "manipulation",
    "language",
    "dml",
    "statements",
    "dml",
    "statements",
    "used",
    "read",
    "modify",
    "data",
    "based",
    "author",
    "entity",
    "example",
    "created",
    "table",
    "using",
    "entity",
    "name",
    "author",
    "entity",
    "attributes",
    "columns",
    "table",
    "rows",
    "added",
    "author",
    "table",
    "populate",
    "table",
    "time",
    "later",
    "want",
    "alter",
    "data",
    "table",
    "alter",
    "modify",
    "data",
    "author",
    "table",
    "use",
    "update",
    "statement",
    "syntax",
    "update",
    "statement",
    "looks",
    "like",
    "update",
    "table",
    "name",
    "set",
    "column",
    "name",
    "equal",
    "value",
    "condition",
    "statement",
    "table",
    "name",
    "identifies",
    "table",
    "column",
    "name",
    "identifies",
    "column",
    "value",
    "changed",
    "specified",
    "condition",
    "let",
    "look",
    "example",
    "example",
    "want",
    "update",
    "first",
    "name",
    "last",
    "name",
    "author",
    "author",
    "underscore",
    "ida2",
    "rav",
    "ahuja",
    "lakshmi",
    "kata",
    "example",
    "see",
    "update",
    "statement",
    "action",
    "start",
    "selecting",
    "rows",
    "author",
    "table",
    "see",
    "values",
    "change",
    "first",
    "name",
    "last",
    "name",
    "lakshmi",
    "kata",
    "author",
    "id",
    "equal",
    "a2",
    "enter",
    "update",
    "statement",
    "follows",
    "update",
    "author",
    "set",
    "last",
    "name",
    "equal",
    "kata",
    "first",
    "name",
    "equal",
    "lakshmi",
    "author",
    "id",
    "equal",
    "a2",
    "see",
    "result",
    "update",
    "select",
    "rows",
    "author",
    "table",
    "see",
    "row",
    "2",
    "name",
    "changed",
    "rob",
    "ahuja",
    "lakshmi",
    "kata",
    "note",
    "specify",
    "clause",
    "rows",
    "table",
    "updated",
    "example",
    "without",
    "specifying",
    "clause",
    "rows",
    "table",
    "would",
    "changed",
    "first",
    "last",
    "names",
    "lakshmi",
    "kata",
    "sometime",
    "later",
    "might",
    "need",
    "remove",
    "one",
    "rows",
    "table",
    "rows",
    "removed",
    "delete",
    "statement",
    "delete",
    "statement",
    "one",
    "data",
    "manipulation",
    "language",
    "statements",
    "used",
    "read",
    "modify",
    "data",
    "syntax",
    "delete",
    "statement",
    "looks",
    "like",
    "delete",
    "table",
    "name",
    "condition",
    "rows",
    "removed",
    "specified",
    "condition",
    "based",
    "author",
    "entity",
    "example",
    "want",
    "delete",
    "rows",
    "author",
    "id",
    "a2",
    "a3",
    "let",
    "look",
    "example",
    "delete",
    "author",
    "author",
    "id",
    "a2",
    "a3",
    "note",
    "specify",
    "clause",
    "rows",
    "table",
    "removed",
    "identify",
    "syntax",
    "update",
    "statement",
    "delete",
    "statement",
    "explain",
    "importance",
    "clause",
    "statements",
    "thanks",
    "watching",
    "video",
    "foreign",
    "music",
    "hello",
    "welcome",
    "database",
    "concepts",
    "video",
    "learn",
    "different",
    "types",
    "models",
    "use",
    "models",
    "map",
    "data",
    "tables",
    "define",
    "relationships",
    "tables",
    "end",
    "lesson",
    "able",
    "explain",
    "advantage",
    "relational",
    "model",
    "explain",
    "entity",
    "name",
    "attributes",
    "map",
    "relational",
    "database",
    "table",
    "describe",
    "difference",
    "entity",
    "attribute",
    "identify",
    "commonly",
    "used",
    "data",
    "types",
    "describe",
    "function",
    "primary",
    "keys",
    "relational",
    "model",
    "used",
    "data",
    "model",
    "databases",
    "model",
    "allows",
    "data",
    "independence",
    "data",
    "stored",
    "simple",
    "data",
    "structure",
    "tables",
    "provides",
    "logical",
    "data",
    "independence",
    "physical",
    "data",
    "independence",
    "physical",
    "storage",
    "independence",
    "entity",
    "relationship",
    "data",
    "model",
    "er",
    "data",
    "model",
    "alternative",
    "relational",
    "data",
    "model",
    "using",
    "simplified",
    "library",
    "database",
    "example",
    "figure",
    "shows",
    "entity",
    "relationship",
    "diagram",
    "erd",
    "represents",
    "entities",
    "called",
    "tables",
    "relationships",
    "library",
    "example",
    "books",
    "book",
    "written",
    "one",
    "many",
    "authors",
    "library",
    "one",
    "many",
    "copies",
    "book",
    "copy",
    "borrowed",
    "one",
    "borrower",
    "time",
    "entity",
    "relationship",
    "model",
    "proposes",
    "thinking",
    "database",
    "collection",
    "entities",
    "rather",
    "used",
    "model",
    "er",
    "model",
    "used",
    "tool",
    "design",
    "relational",
    "databases",
    "er",
    "model",
    "entities",
    "objects",
    "exist",
    "independently",
    "entities",
    "database",
    "building",
    "blocks",
    "er",
    "diagram",
    "entities",
    "attributes",
    "entity",
    "noun",
    "person",
    "place",
    "thing",
    "er",
    "diagram",
    "entity",
    "drawn",
    "rectangle",
    "entities",
    "attributes",
    "data",
    "elements",
    "characterize",
    "entity",
    "attributes",
    "tell",
    "us",
    "entity",
    "er",
    "diagram",
    "attributes",
    "drawn",
    "ovals",
    "using",
    "simplified",
    "library",
    "example",
    "book",
    "example",
    "entity",
    "attributes",
    "certain",
    "properties",
    "characteristics",
    "entity",
    "tell",
    "us",
    "entity",
    "entity",
    "book",
    "attributes",
    "book",
    "title",
    "addition",
    "book",
    "year",
    "book",
    "written",
    "etc",
    "attributes",
    "connected",
    "exactly",
    "one",
    "entity",
    "entity",
    "book",
    "becomes",
    "table",
    "database",
    "attributes",
    "become",
    "columns",
    "table",
    "table",
    "combination",
    "rows",
    "columns",
    "mapping",
    "entity",
    "becomes",
    "table",
    "said",
    "table",
    "yet",
    "taken",
    "form",
    "rows",
    "columns",
    "attributes",
    "get",
    "translated",
    "columns",
    "table",
    "providing",
    "actual",
    "table",
    "form",
    "rows",
    "columns",
    "later",
    "add",
    "data",
    "values",
    "columns",
    "completes",
    "table",
    "form",
    "attribute",
    "stores",
    "data",
    "values",
    "different",
    "formats",
    "characters",
    "numbers",
    "dates",
    "currency",
    "many",
    "besides",
    "book",
    "table",
    "example",
    "title",
    "made",
    "characters",
    "book",
    "titles",
    "vary",
    "length",
    "set",
    "variable",
    "character",
    "data",
    "type",
    "title",
    "column",
    "varcar",
    "character",
    "columns",
    "vary",
    "length",
    "use",
    "character",
    "car",
    "addition",
    "year",
    "columns",
    "would",
    "numeric",
    "isbn",
    "column",
    "would",
    "car",
    "contains",
    "dashes",
    "well",
    "numbers",
    "using",
    "book",
    "entity",
    "mapping",
    "example",
    "create",
    "tables",
    "remainder",
    "simplified",
    "library",
    "example",
    "using",
    "entity",
    "names",
    "like",
    "author",
    "author",
    "list",
    "borrower",
    "loan",
    "copy",
    "entity",
    "attributes",
    "columns",
    "tables",
    "table",
    "assigned",
    "primary",
    "key",
    "primary",
    "key",
    "relational",
    "table",
    "uniquely",
    "identifies",
    "tuple",
    "row",
    "table",
    "preventing",
    "duplication",
    "data",
    "providing",
    "way",
    "defining",
    "relationships",
    "tables",
    "tables",
    "also",
    "contain",
    "foreign",
    "keys",
    "primary",
    "keys",
    "defined",
    "tables",
    "creating",
    "link",
    "tables",
    "know",
    "key",
    "advantage",
    "relational",
    "model",
    "logical",
    "physical",
    "data",
    "independence",
    "storage",
    "independence",
    "entities",
    "independent",
    "objects",
    "multiple",
    "characteristics",
    "called",
    "attributes",
    "mapping",
    "relational",
    "database",
    "entities",
    "represented",
    "tables",
    "attributes",
    "mapped",
    "columns",
    "common",
    "data",
    "types",
    "include",
    "characters",
    "car",
    "varcar",
    "numbers",
    "integer",
    "decimal",
    "time",
    "stamps",
    "including",
    "date",
    "time",
    "primary",
    "key",
    "uniquely",
    "identifies",
    "specific",
    "row",
    "table",
    "prevents",
    "duplication",
    "data",
    "music",
    "hello",
    "welcome",
    "video",
    "cover",
    "key",
    "concepts",
    "around",
    "databases",
    "cloud",
    "order",
    "learn",
    "sql",
    "first",
    "need",
    "database",
    "available",
    "practice",
    "sql",
    "queries",
    "easy",
    "way",
    "create",
    "instance",
    "database",
    "cloud",
    "use",
    "execute",
    "sql",
    "queries",
    "completing",
    "lesson",
    "able",
    "understand",
    "basic",
    "concepts",
    "related",
    "cloud",
    "databases",
    "list",
    "cloud",
    "databases",
    "describe",
    "database",
    "service",
    "instances",
    "well",
    "demonstrate",
    "create",
    "service",
    "instance",
    "ibm",
    "db2",
    "cloud",
    "cloud",
    "database",
    "database",
    "service",
    "built",
    "accessed",
    "cloud",
    "platform",
    "serves",
    "many",
    "functions",
    "traditional",
    "databases",
    "added",
    "flexibility",
    "cloud",
    "computing",
    "advantages",
    "using",
    "cloud",
    "databases",
    "include",
    "ease",
    "use",
    "users",
    "access",
    "cloud",
    "databases",
    "virtually",
    "anywhere",
    "using",
    "vendors",
    "api",
    "web",
    "interface",
    "applications",
    "whether",
    "cloud",
    "remote",
    "scalability",
    "cloud",
    "databases",
    "expand",
    "shrink",
    "storage",
    "compute",
    "capacities",
    "runtime",
    "accommodate",
    "changing",
    "needs",
    "usage",
    "demands",
    "organizations",
    "pay",
    "actually",
    "use",
    "disaster",
    "recovery",
    "event",
    "natural",
    "disaster",
    "equipment",
    "failure",
    "power",
    "outage",
    "data",
    "kept",
    "secure",
    "backups",
    "remote",
    "servers",
    "cloud",
    "geographically",
    "distributed",
    "regions",
    "examples",
    "relational",
    "databases",
    "cloud",
    "include",
    "ibm",
    "db2",
    "cloud",
    "databases",
    "postgresql",
    "ibm",
    "cloud",
    "oracle",
    "database",
    "cloud",
    "service",
    "microsoft",
    "azure",
    "sql",
    "database",
    "amazon",
    "relational",
    "database",
    "services",
    "cloud",
    "databases",
    "run",
    "cloud",
    "either",
    "virtual",
    "machine",
    "manage",
    "delivered",
    "managed",
    "service",
    "depending",
    "vendor",
    "database",
    "services",
    "either",
    "single",
    "depending",
    "service",
    "plan",
    "run",
    "database",
    "cloud",
    "must",
    "first",
    "provision",
    "instance",
    "database",
    "service",
    "cloud",
    "platform",
    "choice",
    "instance",
    "database",
    "service",
    "dbaas",
    "provides",
    "users",
    "access",
    "database",
    "resources",
    "cloud",
    "without",
    "need",
    "setting",
    "underlying",
    "hardware",
    "installing",
    "database",
    "software",
    "administering",
    "database",
    "database",
    "service",
    "instance",
    "hold",
    "data",
    "related",
    "tables",
    "data",
    "loaded",
    "database",
    "instance",
    "connect",
    "database",
    "instance",
    "using",
    "web",
    "interface",
    "apis",
    "applications",
    "connected",
    "application",
    "send",
    "sql",
    "queries",
    "across",
    "database",
    "instance",
    "database",
    "instance",
    "resolves",
    "sql",
    "statements",
    "operations",
    "data",
    "objects",
    "database",
    "data",
    "retrieved",
    "returned",
    "application",
    "result",
    "set",
    "let",
    "see",
    "database",
    "instance",
    "created",
    "db2",
    "cloud",
    "ibm",
    "db2",
    "cloud",
    "sql",
    "database",
    "provisioned",
    "cloud",
    "use",
    "db2",
    "cloud",
    "would",
    "use",
    "database",
    "software",
    "without",
    "overhead",
    "expensive",
    "hardware",
    "setup",
    "software",
    "installation",
    "maintenance",
    "let",
    "see",
    "set",
    "service",
    "instance",
    "db2",
    "navigate",
    "ibm",
    "cloud",
    "catalog",
    "select",
    "db2",
    "service",
    "note",
    "several",
    "variations",
    "db2",
    "service",
    "including",
    "db2",
    "hosted",
    "db2",
    "warehouse",
    "purposes",
    "choose",
    "db2",
    "service",
    "comes",
    "free",
    "light",
    "plan",
    "select",
    "light",
    "plan",
    "need",
    "change",
    "defaults",
    "type",
    "service",
    "instance",
    "name",
    "choose",
    "region",
    "deploy",
    "well",
    "org",
    "space",
    "service",
    "click",
    "create",
    "view",
    "ibm",
    "db2",
    "service",
    "created",
    "selecting",
    "services",
    "ibm",
    "cloud",
    "dashboard",
    "dashboard",
    "manage",
    "database",
    "instance",
    "example",
    "click",
    "open",
    "console",
    "button",
    "launch",
    "web",
    "console",
    "database",
    "instance",
    "web",
    "console",
    "allows",
    "create",
    "tables",
    "load",
    "data",
    "explore",
    "data",
    "tables",
    "issue",
    "sql",
    "queries",
    "order",
    "access",
    "database",
    "instance",
    "applications",
    "need",
    "service",
    "credentials",
    "first",
    "time",
    "around",
    "need",
    "create",
    "set",
    "new",
    "credentials",
    "also",
    "choose",
    "create",
    "multiple",
    "sets",
    "credentials",
    "different",
    "applications",
    "users",
    "set",
    "service",
    "credentials",
    "created",
    "view",
    "json",
    "snippet",
    "credentials",
    "include",
    "necessary",
    "details",
    "establish",
    "connection",
    "database",
    "includes",
    "following",
    "database",
    "name",
    "port",
    "number",
    "host",
    "name",
    "name",
    "server",
    "cloud",
    "database",
    "instance",
    "resides",
    "username",
    "user",
    "id",
    "use",
    "connect",
    "along",
    "password",
    "note",
    "username",
    "also",
    "schema",
    "name",
    "tables",
    "created",
    "default",
    "know",
    "create",
    "database",
    "instance",
    "cloud",
    "next",
    "step",
    "actually",
    "go",
    "create",
    "one",
    "thank",
    "watching",
    "video",
    "music",
    "welcome",
    "types",
    "sql",
    "statements",
    "end",
    "video",
    "able",
    "distinguish",
    "data",
    "definition",
    "language",
    "statements",
    "data",
    "manipulation",
    "language",
    "statements",
    "sql",
    "statements",
    "used",
    "interacting",
    "entities",
    "tables",
    "attributes",
    "columns",
    "tuples",
    "rows",
    "data",
    "values",
    "relational",
    "databases",
    "sql",
    "statements",
    "fall",
    "two",
    "different",
    "categories",
    "data",
    "definition",
    "language",
    "statements",
    "data",
    "manipulation",
    "language",
    "statements",
    "data",
    "definition",
    "language",
    "ddl",
    "statements",
    "used",
    "define",
    "change",
    "drop",
    "database",
    "objects",
    "tables",
    "common",
    "ddl",
    "statement",
    "types",
    "include",
    "create",
    "alter",
    "truncate",
    "drop",
    "create",
    "used",
    "creating",
    "tables",
    "defining",
    "columns",
    "alter",
    "used",
    "altering",
    "tables",
    "including",
    "adding",
    "dropping",
    "columns",
    "modifying",
    "data",
    "types",
    "truncate",
    "used",
    "deleting",
    "data",
    "table",
    "table",
    "drop",
    "used",
    "deleting",
    "tables",
    "data",
    "manipulation",
    "language",
    "dml",
    "statements",
    "used",
    "read",
    "modify",
    "data",
    "tables",
    "also",
    "sometimes",
    "referred",
    "crud",
    "operations",
    "create",
    "read",
    "update",
    "delete",
    "rows",
    "table",
    "common",
    "dml",
    "statement",
    "types",
    "include",
    "insert",
    "select",
    "update",
    "delete",
    "insert",
    "used",
    "inserting",
    "row",
    "several",
    "rows",
    "data",
    "table",
    "select",
    "reads",
    "selects",
    "row",
    "rows",
    "table",
    "update",
    "edits",
    "row",
    "rows",
    "table",
    "delete",
    "removes",
    "row",
    "rows",
    "data",
    "table",
    "know",
    "ddl",
    "data",
    "definition",
    "language",
    "statements",
    "used",
    "defining",
    "changing",
    "objects",
    "database",
    "tables",
    "dml",
    "data",
    "manipulation",
    "language",
    "statements",
    "used",
    "manipulating",
    "working",
    "data",
    "tables",
    "thanks",
    "watching",
    "video",
    "foreign",
    "music",
    "table",
    "statement",
    "end",
    "video",
    "able",
    "explain",
    "entity",
    "name",
    "attributes",
    "used",
    "create",
    "relational",
    "database",
    "table",
    "let",
    "look",
    "common",
    "ddl",
    "statement",
    "create",
    "syntax",
    "create",
    "table",
    "shown",
    "start",
    "create",
    "table",
    "followed",
    "name",
    "table",
    "want",
    "create",
    "enclose",
    "rest",
    "statement",
    "inside",
    "pair",
    "parentheses",
    "round",
    "brackets",
    "row",
    "inside",
    "parentheses",
    "specifies",
    "name",
    "column",
    "followed",
    "data",
    "type",
    "possibly",
    "additional",
    "optional",
    "values",
    "see",
    "later",
    "attribute",
    "column",
    "definition",
    "separated",
    "comma",
    "example",
    "want",
    "create",
    "table",
    "provinces",
    "canada",
    "would",
    "specify",
    "create",
    "table",
    "provinces",
    "open",
    "parentheses",
    "id",
    "car",
    "primary",
    "key",
    "null",
    "comma",
    "name",
    "varcar",
    "24",
    "close",
    "parentheses",
    "example",
    "data",
    "types",
    "used",
    "car",
    "character",
    "string",
    "fixed",
    "length",
    "case",
    "two",
    "varcar",
    "character",
    "string",
    "variable",
    "length",
    "case",
    "variable",
    "character",
    "field",
    "24",
    "characters",
    "long",
    "issuing",
    "statement",
    "would",
    "create",
    "table",
    "database",
    "two",
    "columns",
    "first",
    "column",
    "id",
    "storing",
    "abbreviated",
    "province",
    "shortcodes",
    "b",
    "b",
    "c",
    "etc",
    "second",
    "column",
    "called",
    "name",
    "storing",
    "full",
    "name",
    "province",
    "alberta",
    "british",
    "columbia",
    "etc",
    "let",
    "look",
    "elaborate",
    "example",
    "based",
    "library",
    "database",
    "database",
    "includes",
    "several",
    "entities",
    "author",
    "book",
    "borrower",
    "etc",
    "let",
    "start",
    "creating",
    "table",
    "author",
    "entity",
    "name",
    "table",
    "author",
    "attributes",
    "author",
    "underscore",
    "id",
    "first",
    "name",
    "last",
    "name",
    "etc",
    "columns",
    "table",
    "table",
    "also",
    "assign",
    "author",
    "underscore",
    "id",
    "attribute",
    "primary",
    "key",
    "duplicate",
    "values",
    "exist",
    "recall",
    "primary",
    "key",
    "relational",
    "table",
    "uniquely",
    "identifies",
    "tuple",
    "row",
    "table",
    "create",
    "author",
    "table",
    "issue",
    "following",
    "command",
    "create",
    "table",
    "author",
    "open",
    "parentheses",
    "author",
    "underscore",
    "id",
    "car",
    "2",
    "primary",
    "key",
    "null",
    "comma",
    "last",
    "name",
    "varcar",
    "15",
    "null",
    "comma",
    "first",
    "name",
    "varcar",
    "15",
    "null",
    "comma",
    "email",
    "varcar",
    "40",
    "comma",
    "city",
    "varcar",
    "15",
    "comma",
    "country",
    "car",
    "2",
    "close",
    "parentheses",
    "note",
    "author",
    "underscore",
    "id",
    "primary",
    "key",
    "constraint",
    "prevents",
    "duplicate",
    "values",
    "table",
    "also",
    "note",
    "last",
    "name",
    "first",
    "name",
    "constraint",
    "null",
    "ensures",
    "fields",
    "contain",
    "null",
    "value",
    "since",
    "author",
    "must",
    "name",
    "know",
    "create",
    "ddl",
    "statement",
    "creating",
    "entities",
    "tables",
    "database",
    "create",
    "table",
    "statement",
    "includes",
    "definition",
    "attributes",
    "columns",
    "table",
    "including",
    "names",
    "columns",
    "data",
    "types",
    "columns",
    "optional",
    "values",
    "required",
    "primary",
    "key",
    "constraint",
    "thanks",
    "watching",
    "video",
    "foreign",
    "music",
    "drop",
    "truncate",
    "tables",
    "watching",
    "video",
    "able",
    "describe",
    "altar",
    "table",
    "drop",
    "table",
    "truncate",
    "statements",
    "explain",
    "syntax",
    "use",
    "statements",
    "queries",
    "use",
    "alter",
    "table",
    "statement",
    "add",
    "remove",
    "columns",
    "table",
    "modify",
    "data",
    "type",
    "columns",
    "add",
    "remove",
    "keys",
    "add",
    "remove",
    "constraints",
    "syntax",
    "alter",
    "table",
    "statement",
    "shown",
    "start",
    "alter",
    "table",
    "followed",
    "name",
    "table",
    "want",
    "alter",
    "differently",
    "create",
    "table",
    "statement",
    "though",
    "use",
    "parentheses",
    "enclose",
    "parameters",
    "alter",
    "table",
    "statement",
    "row",
    "alter",
    "table",
    "statement",
    "specifies",
    "one",
    "change",
    "want",
    "make",
    "table",
    "example",
    "add",
    "telephone",
    "number",
    "column",
    "author",
    "table",
    "library",
    "database",
    "store",
    "author",
    "telephone",
    "number",
    "use",
    "following",
    "statement",
    "alter",
    "table",
    "author",
    "add",
    "column",
    "telephone",
    "underscore",
    "number",
    "big",
    "int",
    "semicolon",
    "example",
    "data",
    "type",
    "column",
    "big",
    "int",
    "hold",
    "number",
    "19",
    "digits",
    "long",
    "also",
    "use",
    "alter",
    "table",
    "statement",
    "modify",
    "data",
    "type",
    "column",
    "use",
    "alter",
    "column",
    "clause",
    "specifying",
    "new",
    "data",
    "type",
    "column",
    "example",
    "using",
    "numeric",
    "data",
    "type",
    "telephone",
    "number",
    "means",
    "include",
    "parentheses",
    "plus",
    "signs",
    "dashes",
    "part",
    "number",
    "change",
    "column",
    "use",
    "card",
    "data",
    "type",
    "overcome",
    "code",
    "shows",
    "alter",
    "author",
    "table",
    "alter",
    "table",
    "author",
    "alter",
    "column",
    "telephone",
    "underscore",
    "number",
    "set",
    "data",
    "type",
    "car",
    "open",
    "parentheses",
    "20",
    "close",
    "parentheses",
    "semicolon",
    "altering",
    "data",
    "type",
    "column",
    "containing",
    "existing",
    "data",
    "cause",
    "problems",
    "though",
    "existing",
    "data",
    "compatible",
    "new",
    "data",
    "type",
    "example",
    "changing",
    "column",
    "car",
    "data",
    "type",
    "numeric",
    "data",
    "type",
    "work",
    "column",
    "already",
    "contains",
    "data",
    "try",
    "see",
    "error",
    "message",
    "notification",
    "log",
    "statement",
    "run",
    "spec",
    "changes",
    "longer",
    "need",
    "extra",
    "column",
    "use",
    "alter",
    "table",
    "statement",
    "time",
    "drop",
    "column",
    "clause",
    "remove",
    "column",
    "shown",
    "alter",
    "table",
    "author",
    "drop",
    "column",
    "telephone",
    "underscore",
    "number",
    "semicolon",
    "similar",
    "using",
    "drop",
    "column",
    "delete",
    "column",
    "table",
    "use",
    "drop",
    "table",
    "statement",
    "delete",
    "table",
    "database",
    "delete",
    "table",
    "contains",
    "data",
    "default",
    "data",
    "deleted",
    "alongside",
    "table",
    "syntax",
    "drop",
    "table",
    "statement",
    "drop",
    "table",
    "table",
    "underscore",
    "name",
    "semicolon",
    "use",
    "statement",
    "drop",
    "table",
    "author",
    "semicolon",
    "remove",
    "table",
    "database",
    "sometimes",
    "might",
    "want",
    "delete",
    "data",
    "table",
    "rather",
    "deleting",
    "table",
    "use",
    "delete",
    "statement",
    "without",
    "clause",
    "generally",
    "quicker",
    "efficient",
    "truncate",
    "table",
    "instead",
    "use",
    "truncate",
    "table",
    "statement",
    "delete",
    "rows",
    "table",
    "syntax",
    "statement",
    "truncate",
    "table",
    "table",
    "underscore",
    "name",
    "immediate",
    "semicolon",
    "immediate",
    "specifies",
    "process",
    "statement",
    "immediately",
    "undone",
    "truncate",
    "author",
    "table",
    "use",
    "statement",
    "truncate",
    "table",
    "author",
    "immediate",
    "semicolon",
    "video",
    "learned",
    "alter",
    "table",
    "statement",
    "changes",
    "structure",
    "existing",
    "table",
    "example",
    "add",
    "modify",
    "drop",
    "columns",
    "drop",
    "table",
    "statement",
    "deletes",
    "existing",
    "table",
    "truncate",
    "table",
    "statement",
    "deletes",
    "rows",
    "data",
    "table",
    "foreign",
    "hello",
    "welcome",
    "retrieving",
    "data",
    "select",
    "statement",
    "string",
    "patterns",
    "video",
    "learn",
    "advanced",
    "techniques",
    "retrieving",
    "data",
    "relational",
    "database",
    "table",
    "end",
    "lesson",
    "able",
    "describe",
    "simplify",
    "select",
    "statement",
    "using",
    "string",
    "patterns",
    "ranges",
    "sets",
    "values",
    "main",
    "purpose",
    "database",
    "management",
    "system",
    "store",
    "data",
    "also",
    "facilitate",
    "retrieval",
    "data",
    "simplest",
    "form",
    "select",
    "statement",
    "select",
    "star",
    "table",
    "name",
    "based",
    "simplified",
    "library",
    "database",
    "model",
    "table",
    "book",
    "select",
    "star",
    "book",
    "gives",
    "result",
    "set",
    "four",
    "rows",
    "data",
    "rows",
    "columns",
    "table",
    "book",
    "displayed",
    "retrieve",
    "subset",
    "columns",
    "example",
    "two",
    "columns",
    "table",
    "book",
    "book",
    "underscore",
    "id",
    "title",
    "restrict",
    "result",
    "set",
    "using",
    "clause",
    "example",
    "select",
    "title",
    "book",
    "whose",
    "book",
    "underscore",
    "id",
    "b1",
    "know",
    "exactly",
    "value",
    "specify",
    "clause",
    "clause",
    "always",
    "requires",
    "predicate",
    "condition",
    "evaluates",
    "true",
    "false",
    "unknown",
    "know",
    "exactly",
    "value",
    "predicate",
    "example",
    "ca",
    "remember",
    "name",
    "author",
    "remember",
    "first",
    "name",
    "starts",
    "r",
    "relational",
    "database",
    "use",
    "string",
    "patterns",
    "search",
    "data",
    "rows",
    "match",
    "condition",
    "let",
    "look",
    "examples",
    "using",
    "string",
    "patterns",
    "ca",
    "remember",
    "name",
    "author",
    "remember",
    "name",
    "starts",
    "r",
    "use",
    "clause",
    "like",
    "predicate",
    "like",
    "predicate",
    "used",
    "clause",
    "search",
    "pattern",
    "column",
    "percent",
    "sign",
    "used",
    "define",
    "missing",
    "letters",
    "percent",
    "sign",
    "placed",
    "pattern",
    "pattern",
    "pattern",
    "example",
    "use",
    "percent",
    "sign",
    "pattern",
    "letter",
    "r",
    "percent",
    "sign",
    "called",
    "wild",
    "card",
    "character",
    "wild",
    "card",
    "character",
    "used",
    "substitute",
    "characters",
    "ca",
    "remember",
    "name",
    "author",
    "remember",
    "first",
    "name",
    "starts",
    "letter",
    "r",
    "add",
    "like",
    "predicate",
    "clause",
    "example",
    "select",
    "first",
    "name",
    "author",
    "first",
    "name",
    "like",
    "r",
    "percentile",
    "return",
    "rows",
    "author",
    "table",
    "whose",
    "author",
    "first",
    "name",
    "starts",
    "letter",
    "r",
    "result",
    "set",
    "two",
    "rows",
    "returned",
    "authors",
    "raul",
    "rav",
    "wanted",
    "retrieve",
    "list",
    "books",
    "whose",
    "number",
    "pages",
    "290",
    "less",
    "could",
    "write",
    "select",
    "statement",
    "like",
    "specifying",
    "clause",
    "pages",
    "greater",
    "equal",
    "290",
    "pages",
    "less",
    "equal",
    "relational",
    "database",
    "use",
    "range",
    "numbers",
    "specify",
    "condition",
    "instead",
    "using",
    "comparison",
    "operators",
    "greater",
    "equal",
    "use",
    "comparison",
    "operator",
    "compares",
    "two",
    "values",
    "values",
    "range",
    "inclusive",
    "case",
    "rewrite",
    "query",
    "specify",
    "clause",
    "pages",
    "290",
    "result",
    "set",
    "save",
    "select",
    "statement",
    "easier",
    "quicker",
    "write",
    "cases",
    "data",
    "values",
    "grouped",
    "ranges",
    "example",
    "want",
    "know",
    "countries",
    "authors",
    "wanted",
    "retrieve",
    "authors",
    "australia",
    "brazil",
    "could",
    "write",
    "select",
    "statement",
    "clause",
    "repeating",
    "two",
    "country",
    "values",
    "however",
    "want",
    "retrieve",
    "authors",
    "canada",
    "india",
    "china",
    "clause",
    "would",
    "become",
    "long",
    "repeatedly",
    "listing",
    "required",
    "country",
    "conditions",
    "instead",
    "use",
    "operator",
    "operator",
    "allows",
    "us",
    "specify",
    "set",
    "values",
    "clause",
    "operator",
    "takes",
    "list",
    "expressions",
    "compare",
    "case",
    "country",
    "australia",
    "brazil",
    "describe",
    "simplify",
    "select",
    "statement",
    "using",
    "string",
    "patterns",
    "ranges",
    "sets",
    "values",
    "thanks",
    "watching",
    "video",
    "music",
    "hello",
    "welcome",
    "sorting",
    "select",
    "statement",
    "result",
    "sets",
    "video",
    "learn",
    "advanced",
    "techniques",
    "retrieving",
    "data",
    "relational",
    "database",
    "table",
    "sorting",
    "result",
    "set",
    "displays",
    "end",
    "lesson",
    "able",
    "describe",
    "sort",
    "result",
    "set",
    "either",
    "ascending",
    "descending",
    "order",
    "explain",
    "indicate",
    "column",
    "use",
    "sorting",
    "order",
    "main",
    "purpose",
    "database",
    "management",
    "system",
    "store",
    "data",
    "also",
    "facilitate",
    "retrieval",
    "data",
    "simplest",
    "form",
    "select",
    "statement",
    "select",
    "star",
    "table",
    "name",
    "based",
    "simplified",
    "library",
    "database",
    "model",
    "table",
    "book",
    "select",
    "star",
    "book",
    "gives",
    "result",
    "set",
    "four",
    "rows",
    "data",
    "rows",
    "columns",
    "table",
    "book",
    "displayed",
    "choose",
    "list",
    "book",
    "titles",
    "shown",
    "example",
    "select",
    "title",
    "book",
    "however",
    "order",
    "seem",
    "order",
    "displaying",
    "result",
    "set",
    "alphabetical",
    "order",
    "would",
    "make",
    "result",
    "set",
    "convenient",
    "use",
    "order",
    "clause",
    "display",
    "results",
    "set",
    "alphabetical",
    "order",
    "add",
    "order",
    "clause",
    "select",
    "statement",
    "order",
    "clause",
    "used",
    "query",
    "sort",
    "result",
    "set",
    "specified",
    "column",
    "example",
    "used",
    "order",
    "column",
    "title",
    "sort",
    "result",
    "set",
    "default",
    "result",
    "set",
    "sorted",
    "ascending",
    "order",
    "example",
    "result",
    "set",
    "sorted",
    "alphabetical",
    "order",
    "book",
    "title",
    "sort",
    "sending",
    "order",
    "use",
    "keyword",
    "des",
    "result",
    "set",
    "sorted",
    "according",
    "column",
    "specified",
    "title",
    "sorted",
    "descending",
    "order",
    "notice",
    "order",
    "first",
    "three",
    "rows",
    "first",
    "three",
    "words",
    "title",
    "sorting",
    "starts",
    "point",
    "characters",
    "differ",
    "another",
    "way",
    "specifying",
    "sort",
    "column",
    "indicate",
    "column",
    "sequence",
    "number",
    "example",
    "select",
    "title",
    "pages",
    "book",
    "order",
    "2",
    "indicates",
    "column",
    "sequence",
    "number",
    "query",
    "sorting",
    "order",
    "instead",
    "specifying",
    "column",
    "name",
    "pages",
    "number",
    "two",
    "used",
    "select",
    "statement",
    "second",
    "column",
    "specified",
    "column",
    "list",
    "pages",
    "sort",
    "order",
    "based",
    "values",
    "pages",
    "column",
    "case",
    "pages",
    "column",
    "indicates",
    "number",
    "pages",
    "book",
    "see",
    "result",
    "set",
    "ascending",
    "order",
    "number",
    "pages",
    "describe",
    "sort",
    "result",
    "set",
    "either",
    "ascending",
    "descending",
    "order",
    "explain",
    "indicate",
    "column",
    "use",
    "sorting",
    "order",
    "thanks",
    "watching",
    "video",
    "music",
    "hello",
    "welcome",
    "grouping",
    "select",
    "statement",
    "results",
    "sets",
    "video",
    "learn",
    "advanced",
    "techniques",
    "retrieving",
    "data",
    "relational",
    "database",
    "table",
    "sorting",
    "grouping",
    "result",
    "set",
    "displays",
    "end",
    "lesson",
    "able",
    "explain",
    "eliminate",
    "duplicates",
    "result",
    "set",
    "describe",
    "restrict",
    "result",
    "set",
    "times",
    "select",
    "statement",
    "result",
    "set",
    "contain",
    "duplicate",
    "values",
    "based",
    "simplified",
    "library",
    "database",
    "model",
    "author",
    "table",
    "example",
    "country",
    "column",
    "lists",
    "country",
    "code",
    "author",
    "country",
    "select",
    "country",
    "column",
    "get",
    "list",
    "countries",
    "example",
    "select",
    "country",
    "author",
    "order",
    "order",
    "clause",
    "sorts",
    "result",
    "set",
    "results",
    "list",
    "countries",
    "authors",
    "belong",
    "sorted",
    "alphabetically",
    "country",
    "case",
    "result",
    "set",
    "displays",
    "20",
    "rows",
    "one",
    "row",
    "20",
    "authors",
    "authors",
    "come",
    "country",
    "result",
    "set",
    "contains",
    "duplicates",
    "however",
    "need",
    "list",
    "countries",
    "authors",
    "come",
    "case",
    "duplicates",
    "make",
    "sense",
    "eliminate",
    "duplicates",
    "use",
    "keyword",
    "distinct",
    "using",
    "keyword",
    "distinct",
    "reduces",
    "result",
    "set",
    "six",
    "rows",
    "wanted",
    "also",
    "know",
    "many",
    "authors",
    "come",
    "country",
    "know",
    "20",
    "authors",
    "come",
    "six",
    "different",
    "countries",
    "might",
    "want",
    "also",
    "know",
    "many",
    "authors",
    "come",
    "country",
    "display",
    "result",
    "set",
    "listing",
    "country",
    "number",
    "authors",
    "come",
    "country",
    "add",
    "group",
    "clause",
    "select",
    "statement",
    "group",
    "clause",
    "groups",
    "result",
    "subsets",
    "matching",
    "values",
    "one",
    "columns",
    "example",
    "countries",
    "grouped",
    "counted",
    "using",
    "count",
    "function",
    "notice",
    "column",
    "heading",
    "second",
    "column",
    "result",
    "set",
    "numeric",
    "value",
    "2",
    "displays",
    "column",
    "name",
    "column",
    "name",
    "directly",
    "available",
    "table",
    "second",
    "column",
    "result",
    "set",
    "calculated",
    "count",
    "function",
    "instead",
    "using",
    "column",
    "name",
    "2",
    "assign",
    "column",
    "name",
    "result",
    "set",
    "using",
    "keyword",
    "example",
    "change",
    "derived",
    "column",
    "name",
    "2",
    "column",
    "name",
    "count",
    "using",
    "count",
    "keyword",
    "helps",
    "clarify",
    "meaning",
    "result",
    "set",
    "count",
    "authors",
    "different",
    "countries",
    "restrict",
    "number",
    "rows",
    "passing",
    "conditions",
    "example",
    "check",
    "four",
    "authors",
    "country",
    "set",
    "condition",
    "group",
    "clause",
    "use",
    "keyword",
    "clause",
    "used",
    "combination",
    "group",
    "clause",
    "important",
    "note",
    "clause",
    "entire",
    "result",
    "set",
    "clause",
    "works",
    "group",
    "clause",
    "check",
    "four",
    "authors",
    "country",
    "add",
    "following",
    "select",
    "statement",
    "count",
    "country",
    "greater",
    "four",
    "countries",
    "five",
    "authors",
    "country",
    "listed",
    "result",
    "set",
    "example",
    "countries",
    "china",
    "six",
    "authors",
    "india",
    "also",
    "six",
    "authors",
    "explain",
    "eliminate",
    "duplicates",
    "result",
    "set",
    "describe",
    "restrict",
    "result",
    "set",
    "thanks",
    "watching",
    "video",
    "music",
    "hello",
    "welcome",
    "video",
    "go",
    "sql",
    "functions",
    "built",
    "database",
    "let",
    "get",
    "started",
    "much",
    "possible",
    "first",
    "fetch",
    "data",
    "database",
    "perform",
    "operations",
    "applications",
    "notebooks",
    "databases",
    "come",
    "functions",
    "functions",
    "included",
    "sql",
    "statements",
    "allowing",
    "perform",
    "operations",
    "data",
    "right",
    "within",
    "database",
    "using",
    "database",
    "functions",
    "significantly",
    "reduce",
    "amount",
    "data",
    "needs",
    "retrieved",
    "database",
    "reduces",
    "network",
    "traffic",
    "use",
    "bandwidth",
    "working",
    "large",
    "data",
    "sets",
    "may",
    "faster",
    "use",
    "functions",
    "rather",
    "first",
    "retrieving",
    "data",
    "application",
    "executing",
    "functions",
    "retrieve",
    "data",
    "note",
    "also",
    "possible",
    "create",
    "functions",
    "functions",
    "database",
    "advanced",
    "topic",
    "examples",
    "lesson",
    "let",
    "consider",
    "pet",
    "rescue",
    "table",
    "database",
    "pet",
    "rescue",
    "organization",
    "records",
    "rescue",
    "transaction",
    "details",
    "includes",
    "columns",
    "id",
    "animal",
    "quantity",
    "cost",
    "rescue",
    "date",
    "purposes",
    "lesson",
    "populated",
    "several",
    "rows",
    "data",
    "shown",
    "aggregate",
    "column",
    "functions",
    "aggregate",
    "function",
    "takes",
    "collection",
    "like",
    "values",
    "values",
    "column",
    "input",
    "returns",
    "single",
    "value",
    "null",
    "examples",
    "aggregate",
    "functions",
    "include",
    "sum",
    "minimum",
    "maximum",
    "average",
    "etc",
    "let",
    "look",
    "examples",
    "based",
    "pet",
    "rescue",
    "table",
    "sum",
    "function",
    "used",
    "add",
    "values",
    "column",
    "use",
    "function",
    "write",
    "column",
    "name",
    "within",
    "parentheses",
    "function",
    "name",
    "example",
    "add",
    "values",
    "cost",
    "column",
    "select",
    "sum",
    "cost",
    "pet",
    "rescue",
    "use",
    "aggregate",
    "function",
    "column",
    "results",
    "set",
    "default",
    "given",
    "number",
    "possible",
    "explicitly",
    "name",
    "resulting",
    "column",
    "example",
    "let",
    "say",
    "want",
    "call",
    "output",
    "column",
    "previous",
    "query",
    "sum",
    "cost",
    "select",
    "sum",
    "cost",
    "sum",
    "cost",
    "pet",
    "rescue",
    "note",
    "use",
    "example",
    "minimum",
    "name",
    "implies",
    "used",
    "get",
    "lowest",
    "value",
    "similarly",
    "maximum",
    "used",
    "get",
    "highest",
    "value",
    "example",
    "get",
    "maximum",
    "quantity",
    "animal",
    "rescue",
    "single",
    "transaction",
    "select",
    "max",
    "quantity",
    "pet",
    "rescue",
    "aggregate",
    "functions",
    "also",
    "applied",
    "subset",
    "data",
    "instead",
    "entire",
    "column",
    "example",
    "get",
    "minimum",
    "quantity",
    "id",
    "column",
    "dogs",
    "select",
    "min",
    "id",
    "pet",
    "rescue",
    "animal",
    "equals",
    "dog",
    "average",
    "function",
    "used",
    "return",
    "average",
    "mean",
    "value",
    "example",
    "specify",
    "average",
    "value",
    "cost",
    "select",
    "average",
    "cost",
    "pet",
    "rescue",
    "note",
    "perform",
    "mathematical",
    "operations",
    "columns",
    "apply",
    "aggregate",
    "functions",
    "example",
    "calculate",
    "average",
    "cost",
    "per",
    "dog",
    "select",
    "average",
    "cost",
    "divided",
    "quantity",
    "pet",
    "rescue",
    "animal",
    "equals",
    "dog",
    "case",
    "cost",
    "multiple",
    "units",
    "first",
    "divide",
    "cost",
    "quantity",
    "rescue",
    "let",
    "look",
    "scalar",
    "string",
    "functions",
    "scalar",
    "functions",
    "perform",
    "operations",
    "individual",
    "values",
    "example",
    "round",
    "every",
    "value",
    "cost",
    "column",
    "nearest",
    "integer",
    "select",
    "round",
    "cost",
    "pet",
    "rescue",
    "class",
    "scalar",
    "functions",
    "called",
    "string",
    "functions",
    "used",
    "operations",
    "strings",
    "car",
    "varcar",
    "values",
    "example",
    "retrieve",
    "length",
    "value",
    "animal",
    "column",
    "select",
    "length",
    "animal",
    "pet",
    "rescue",
    "uppercase",
    "lowercase",
    "functions",
    "used",
    "return",
    "uppercase",
    "lowercase",
    "values",
    "strings",
    "example",
    "retrieve",
    "animal",
    "values",
    "uppercase",
    "select",
    "uppercase",
    "animal",
    "pet",
    "rescue",
    "scalar",
    "functions",
    "used",
    "clause",
    "example",
    "get",
    "lowercase",
    "values",
    "animal",
    "column",
    "cat",
    "select",
    "star",
    "pet",
    "rescue",
    "lowercase",
    "animal",
    "equals",
    "cat",
    "type",
    "statement",
    "useful",
    "matching",
    "values",
    "clause",
    "sure",
    "whether",
    "values",
    "stored",
    "upper",
    "lower",
    "mixed",
    "case",
    "table",
    "also",
    "one",
    "function",
    "operate",
    "output",
    "another",
    "function",
    "example",
    "get",
    "unique",
    "cases",
    "animal",
    "column",
    "uppercase",
    "select",
    "distinct",
    "uppercase",
    "animal",
    "pet",
    "rescue",
    "video",
    "looked",
    "sql",
    "aggregate",
    "functions",
    "sum",
    "minimum",
    "maximum",
    "average",
    "also",
    "looked",
    "scalar",
    "string",
    "functions",
    "round",
    "lowercase",
    "uppercase",
    "thank",
    "watching",
    "music",
    "hello",
    "welcome",
    "video",
    "go",
    "date",
    "time",
    "sql",
    "functions",
    "built",
    "database",
    "let",
    "get",
    "started",
    "databases",
    "contain",
    "special",
    "data",
    "types",
    "dates",
    "times",
    "db2",
    "contains",
    "date",
    "time",
    "time",
    "stamp",
    "types",
    "db2",
    "date",
    "eight",
    "digits",
    "year",
    "month",
    "day",
    "time",
    "six",
    "digits",
    "hours",
    "minutes",
    "seconds",
    "timestamp",
    "20",
    "digits",
    "year",
    "month",
    "day",
    "hour",
    "minute",
    "seconds",
    "microseconds",
    "double",
    "x",
    "represents",
    "month",
    "six",
    "z",
    "zeds",
    "represents",
    "microseconds",
    "functions",
    "exist",
    "extract",
    "day",
    "month",
    "day",
    "month",
    "day",
    "week",
    "day",
    "year",
    "week",
    "hour",
    "minute",
    "second",
    "let",
    "us",
    "look",
    "examples",
    "queries",
    "date",
    "time",
    "functions",
    "day",
    "function",
    "used",
    "extract",
    "day",
    "portion",
    "date",
    "example",
    "get",
    "day",
    "portion",
    "rescue",
    "date",
    "involving",
    "cat",
    "select",
    "day",
    "rescue",
    "date",
    "pet",
    "rescue",
    "animal",
    "equals",
    "cat",
    "date",
    "time",
    "functions",
    "used",
    "clause",
    "example",
    "get",
    "number",
    "rescues",
    "month",
    "may",
    "month",
    "select",
    "count",
    "star",
    "pet",
    "rescue",
    "month",
    "rescue",
    "date",
    "equals",
    "zero",
    "five",
    "also",
    "perform",
    "date",
    "time",
    "arithmetic",
    "example",
    "find",
    "date",
    "three",
    "days",
    "rescue",
    "date",
    "maybe",
    "want",
    "know",
    "rescue",
    "needs",
    "processed",
    "within",
    "three",
    "days",
    "select",
    "rescue",
    "date",
    "plus",
    "three",
    "days",
    "pet",
    "rescue",
    "special",
    "registers",
    "current",
    "time",
    "current",
    "date",
    "also",
    "available",
    "example",
    "find",
    "many",
    "days",
    "passed",
    "since",
    "rescue",
    "date",
    "till",
    "select",
    "current",
    "date",
    "minus",
    "rescue",
    "date",
    "pet",
    "rescue",
    "result",
    "years",
    "months",
    "days",
    "video",
    "looked",
    "different",
    "types",
    "sql",
    "functions",
    "working",
    "dates",
    "times",
    "thank",
    "watching",
    "music",
    "hello",
    "welcome",
    "video",
    "learn",
    "write",
    "subqueries",
    "nested",
    "select",
    "statements",
    "sub",
    "queries",
    "subselects",
    "like",
    "regular",
    "queries",
    "placed",
    "within",
    "parentheses",
    "nested",
    "inside",
    "another",
    "query",
    "allows",
    "form",
    "powerful",
    "queries",
    "would",
    "otherwise",
    "possible",
    "example",
    "nested",
    "query",
    "shown",
    "example",
    "sub",
    "query",
    "inside",
    "clause",
    "another",
    "query",
    "consider",
    "employees",
    "table",
    "previous",
    "video",
    "first",
    "rows",
    "data",
    "shown",
    "table",
    "contains",
    "several",
    "columns",
    "including",
    "employee",
    "id",
    "first",
    "name",
    "last",
    "name",
    "salary",
    "etc",
    "go",
    "examples",
    "involving",
    "table",
    "let",
    "consider",
    "scenario",
    "may",
    "necessitate",
    "use",
    "sub",
    "queries",
    "let",
    "say",
    "want",
    "retrieve",
    "list",
    "employees",
    "earn",
    "average",
    "salary",
    "could",
    "try",
    "code",
    "select",
    "star",
    "employees",
    "salary",
    "greater",
    "average",
    "salary",
    "however",
    "running",
    "query",
    "result",
    "error",
    "like",
    "one",
    "shown",
    "indicating",
    "invalid",
    "use",
    "aggregate",
    "function",
    "one",
    "limitations",
    "aggregate",
    "functions",
    "like",
    "average",
    "function",
    "always",
    "evaluated",
    "clause",
    "evaluate",
    "function",
    "like",
    "average",
    "clause",
    "make",
    "use",
    "expression",
    "like",
    "one",
    "shown",
    "select",
    "employee",
    "id",
    "first",
    "name",
    "last",
    "name",
    "salary",
    "employees",
    "salary",
    "less",
    "open",
    "parenthesis",
    "select",
    "average",
    "salary",
    "employees",
    "close",
    "parenthesis",
    "notice",
    "average",
    "function",
    "evaluated",
    "first",
    "part",
    "sub",
    "query",
    "allowing",
    "us",
    "circumvent",
    "limitation",
    "evaluating",
    "directly",
    "clause",
    "sub",
    "select",
    "go",
    "clause",
    "also",
    "go",
    "parts",
    "query",
    "list",
    "columns",
    "selected",
    "sub",
    "queries",
    "called",
    "column",
    "expressions",
    "let",
    "look",
    "scenario",
    "might",
    "want",
    "use",
    "column",
    "expression",
    "say",
    "wanted",
    "compare",
    "salary",
    "employee",
    "average",
    "salary",
    "could",
    "try",
    "query",
    "like",
    "select",
    "employee",
    "id",
    "salary",
    "average",
    "salary",
    "average",
    "salary",
    "employees",
    "running",
    "query",
    "result",
    "error",
    "indicating",
    "group",
    "clause",
    "specified",
    "circumvent",
    "error",
    "using",
    "average",
    "function",
    "sub",
    "query",
    "placed",
    "list",
    "columns",
    "example",
    "select",
    "employee",
    "id",
    "salary",
    "open",
    "left",
    "parenthesis",
    "select",
    "average",
    "salary",
    "employees",
    "close",
    "right",
    "parenthesis",
    "average",
    "salary",
    "employees",
    "another",
    "option",
    "make",
    "subquery",
    "part",
    "clause",
    "sub",
    "queries",
    "like",
    "sometimes",
    "called",
    "derived",
    "tables",
    "table",
    "expressions",
    "outer",
    "query",
    "uses",
    "results",
    "sub",
    "query",
    "data",
    "source",
    "let",
    "look",
    "example",
    "create",
    "table",
    "expression",
    "contains",
    "employee",
    "information",
    "select",
    "star",
    "select",
    "employee",
    "id",
    "first",
    "name",
    "last",
    "name",
    "department",
    "id",
    "employees",
    "employee",
    "derived",
    "table",
    "sub",
    "query",
    "include",
    "sensitive",
    "fields",
    "like",
    "date",
    "birth",
    "salary",
    "example",
    "trivial",
    "one",
    "could",
    "easily",
    "included",
    "columns",
    "outer",
    "query",
    "however",
    "derived",
    "tables",
    "prove",
    "powerful",
    "complex",
    "situations",
    "working",
    "multiple",
    "tables",
    "joins",
    "video",
    "seen",
    "subqueries",
    "nested",
    "queries",
    "used",
    "form",
    "richer",
    "queries",
    "overcome",
    "limitations",
    "aggregate",
    "functions",
    "also",
    "learn",
    "use",
    "subqueries",
    "clause",
    "list",
    "columns",
    "clause",
    "thanks",
    "watching",
    "video",
    "music",
    "hello",
    "welcome",
    "video",
    "learn",
    "write",
    "queries",
    "access",
    "one",
    "table",
    "several",
    "ways",
    "access",
    "multiple",
    "tables",
    "query",
    "namely",
    "using",
    "subqueries",
    "implicit",
    "join",
    "join",
    "operators",
    "inner",
    "join",
    "outer",
    "join",
    "video",
    "examine",
    "first",
    "two",
    "options",
    "third",
    "option",
    "covered",
    "detail",
    "videos",
    "let",
    "consider",
    "employees",
    "departments",
    "tables",
    "previous",
    "video",
    "employees",
    "table",
    "contains",
    "several",
    "columns",
    "categories",
    "employee",
    "id",
    "first",
    "name",
    "last",
    "name",
    "salary",
    "name",
    "department",
    "table",
    "contains",
    "department",
    "id",
    "department",
    "name",
    "manager",
    "id",
    "location",
    "id",
    "sample",
    "data",
    "tables",
    "shown",
    "utilize",
    "tables",
    "examples",
    "video",
    "previous",
    "video",
    "learned",
    "use",
    "sub",
    "queries",
    "let",
    "use",
    "subqueries",
    "work",
    "multiple",
    "tables",
    "want",
    "retrieve",
    "employee",
    "records",
    "employees",
    "table",
    "department",
    "id",
    "exists",
    "departments",
    "table",
    "use",
    "sub",
    "query",
    "follows",
    "select",
    "star",
    "employees",
    "department",
    "id",
    "select",
    "department",
    "id",
    "department",
    "departments",
    "outer",
    "query",
    "accesses",
    "employees",
    "table",
    "sub",
    "query",
    "departments",
    "table",
    "used",
    "filtering",
    "result",
    "set",
    "outer",
    "query",
    "let",
    "say",
    "want",
    "retrieve",
    "list",
    "employees",
    "specific",
    "location",
    "location",
    "information",
    "employees",
    "table",
    "department",
    "table",
    "column",
    "called",
    "location",
    "id",
    "therefore",
    "use",
    "sub",
    "query",
    "departments",
    "table",
    "input",
    "employee",
    "table",
    "query",
    "follows",
    "select",
    "star",
    "employees",
    "department",
    "id",
    "select",
    "department",
    "id",
    "department",
    "departments",
    "location",
    "id",
    "equals",
    "l002",
    "let",
    "retrieve",
    "department",
    "id",
    "department",
    "name",
    "employees",
    "earn",
    "seventy",
    "thousand",
    "dollars",
    "need",
    "sub",
    "query",
    "employees",
    "table",
    "satisfy",
    "salary",
    "criteria",
    "feed",
    "input",
    "outer",
    "query",
    "department",
    "table",
    "order",
    "get",
    "matching",
    "department",
    "info",
    "select",
    "department",
    "id",
    "department",
    "name",
    "departments",
    "department",
    "id",
    "department",
    "n",
    "select",
    "department",
    "id",
    "employees",
    "salary",
    "greater",
    "seventy",
    "thousand",
    "also",
    "access",
    "multiple",
    "tables",
    "specifying",
    "clause",
    "query",
    "consider",
    "example",
    "select",
    "star",
    "employees",
    "departments",
    "specify",
    "two",
    "tables",
    "clause",
    "results",
    "table",
    "join",
    "note",
    "explicitly",
    "using",
    "join",
    "operator",
    "resulting",
    "join",
    "example",
    "called",
    "full",
    "join",
    "cartesian",
    "join",
    "every",
    "row",
    "first",
    "table",
    "joined",
    "every",
    "row",
    "second",
    "table",
    "examine",
    "result",
    "set",
    "see",
    "rows",
    "tables",
    "individually",
    "use",
    "additional",
    "operands",
    "limit",
    "result",
    "set",
    "let",
    "look",
    "example",
    "limit",
    "result",
    "set",
    "rows",
    "matching",
    "department",
    "ids",
    "select",
    "star",
    "employees",
    "departments",
    "employees",
    "department",
    "id",
    "equals",
    "departments",
    "department",
    "id",
    "department",
    "notice",
    "clause",
    "prefix",
    "name",
    "column",
    "name",
    "table",
    "fully",
    "qualify",
    "column",
    "name",
    "since",
    "possible",
    "different",
    "tables",
    "could",
    "column",
    "names",
    "exactly",
    "since",
    "table",
    "names",
    "sometimes",
    "long",
    "use",
    "shorter",
    "aliases",
    "table",
    "names",
    "shown",
    "select",
    "star",
    "employees",
    "e",
    "departments",
    "e",
    "department",
    "id",
    "equals",
    "department",
    "id",
    "department",
    "define",
    "alias",
    "e",
    "employees",
    "table",
    "departments",
    "table",
    "use",
    "aliases",
    "clause",
    "wanted",
    "see",
    "department",
    "name",
    "employee",
    "would",
    "enter",
    "code",
    "follows",
    "select",
    "employee",
    "id",
    "department",
    "name",
    "employees",
    "e",
    "departments",
    "e",
    "department",
    "id",
    "equals",
    "department",
    "id",
    "department",
    "similar",
    "column",
    "names",
    "select",
    "clause",
    "also",
    "prefixed",
    "aliases",
    "shown",
    "query",
    "select",
    "e",
    "employee",
    "id",
    "department",
    "id",
    "department",
    "employees",
    "e",
    "departments",
    "e",
    "department",
    "id",
    "equals",
    "department",
    "id",
    "department",
    "lesson",
    "shown",
    "work",
    "multiple",
    "tables",
    "using",
    "subqueries",
    "implicit",
    "joins",
    "thanks",
    "watching",
    "music",
    "hello",
    "video",
    "learn",
    "access",
    "databases",
    "using",
    "python",
    "databases",
    "powerful",
    "tools",
    "data",
    "scientists",
    "completing",
    "module",
    "able",
    "explain",
    "basic",
    "concepts",
    "related",
    "using",
    "python",
    "connect",
    "databases",
    "create",
    "tables",
    "load",
    "data",
    "query",
    "data",
    "using",
    "sql",
    "jupyter",
    "notebooks",
    "finally",
    "analyze",
    "data",
    "lab",
    "assignments",
    "learn",
    "create",
    "instance",
    "cloud",
    "connect",
    "database",
    "query",
    "data",
    "database",
    "using",
    "sql",
    "analyze",
    "data",
    "using",
    "python",
    "able",
    "explain",
    "basic",
    "concepts",
    "related",
    "connecting",
    "python",
    "application",
    "database",
    "describe",
    "sql",
    "apis",
    "well",
    "list",
    "proprietary",
    "apis",
    "used",
    "popular",
    "sql",
    "based",
    "dbms",
    "systems",
    "let",
    "quickly",
    "review",
    "benefits",
    "using",
    "python",
    "popular",
    "scripting",
    "language",
    "connecting",
    "databases",
    "python",
    "ecosystem",
    "rich",
    "provides",
    "easy",
    "use",
    "tools",
    "data",
    "science",
    "popular",
    "packages",
    "numpy",
    "pandas",
    "matplotlib",
    "sci",
    "pi",
    "thon",
    "easy",
    "learn",
    "simple",
    "syntax",
    "due",
    "open",
    "source",
    "nature",
    "python",
    "ported",
    "many",
    "platforms",
    "python",
    "programs",
    "work",
    "platforms",
    "without",
    "requiring",
    "changes",
    "careful",
    "avoid",
    "system",
    "dependent",
    "features",
    "python",
    "supports",
    "relational",
    "database",
    "systems",
    "writing",
    "python",
    "code",
    "access",
    "databases",
    "made",
    "easier",
    "presence",
    "python",
    "database",
    "api",
    "commonly",
    "referred",
    "db",
    "api",
    "detailed",
    "documentation",
    "related",
    "python",
    "easily",
    "available",
    "notebooks",
    "also",
    "popular",
    "field",
    "data",
    "science",
    "run",
    "environment",
    "allows",
    "creation",
    "sharing",
    "documents",
    "contain",
    "live",
    "code",
    "equations",
    "visualizations",
    "explanatory",
    "text",
    "notebook",
    "interface",
    "virtual",
    "notebook",
    "environment",
    "used",
    "programming",
    "examples",
    "notebook",
    "interfaces",
    "include",
    "mathematica",
    "notebook",
    "maple",
    "worksheet",
    "matlab",
    "notebook",
    "ipython",
    "jupiter",
    "r",
    "markdown",
    "apache",
    "zeppelin",
    "apache",
    "spark",
    "notebook",
    "databricks",
    "cloud",
    "module",
    "using",
    "jupyter",
    "notebooks",
    "jupyter",
    "notebook",
    "open",
    "source",
    "web",
    "application",
    "allows",
    "create",
    "share",
    "documents",
    "contain",
    "live",
    "code",
    "equations",
    "visualizations",
    "narrative",
    "text",
    "advantages",
    "using",
    "jupyter",
    "notebooks",
    "notebook",
    "support",
    "40",
    "programming",
    "languages",
    "including",
    "python",
    "r",
    "julia",
    "scala",
    "notebooks",
    "shared",
    "others",
    "email",
    "dropbox",
    "github",
    "jupyter",
    "notebook",
    "viewer",
    "code",
    "produce",
    "rich",
    "interactive",
    "output",
    "html",
    "images",
    "videos",
    "latex",
    "custom",
    "mime",
    "types",
    "leverage",
    "big",
    "data",
    "tools",
    "apache",
    "spark",
    "python",
    "r",
    "scala",
    "explore",
    "data",
    "pandas",
    "scikit",
    "learn",
    "ggplot2",
    "tensorflow",
    "typical",
    "user",
    "accesses",
    "databases",
    "using",
    "python",
    "code",
    "written",
    "jupyter",
    "notebook",
    "editor",
    "mechanism",
    "python",
    "program",
    "communicates",
    "dbms",
    "python",
    "code",
    "connects",
    "database",
    "using",
    "api",
    "calls",
    "explain",
    "basics",
    "sql",
    "apis",
    "python",
    "db",
    "apis",
    "application",
    "programming",
    "interface",
    "set",
    "functions",
    "call",
    "get",
    "access",
    "type",
    "service",
    "sql",
    "api",
    "consists",
    "library",
    "function",
    "calls",
    "application",
    "programming",
    "interface",
    "api",
    "dbms",
    "pass",
    "sql",
    "statements",
    "dbms",
    "application",
    "program",
    "calls",
    "functions",
    "api",
    "calls",
    "functions",
    "retrieve",
    "query",
    "results",
    "status",
    "information",
    "dbms",
    "basic",
    "operation",
    "typical",
    "sql",
    "api",
    "illustrated",
    "figure",
    "application",
    "program",
    "begins",
    "database",
    "access",
    "one",
    "api",
    "calls",
    "connect",
    "program",
    "dbms",
    "send",
    "sql",
    "statement",
    "dbms",
    "program",
    "builds",
    "statement",
    "text",
    "string",
    "buffer",
    "makes",
    "api",
    "call",
    "pass",
    "buffer",
    "contents",
    "dbms",
    "application",
    "program",
    "makes",
    "api",
    "calls",
    "check",
    "status",
    "dbms",
    "request",
    "handle",
    "errors",
    "application",
    "program",
    "ends",
    "database",
    "access",
    "api",
    "call",
    "disconnects",
    "database",
    "let",
    "learn",
    "basic",
    "concepts",
    "proprietary",
    "apis",
    "used",
    "popular",
    "sql",
    "based",
    "dbms",
    "systems",
    "database",
    "system",
    "library",
    "see",
    "table",
    "shows",
    "list",
    "applications",
    "corresponding",
    "sql",
    "apis",
    "sql",
    "c",
    "api",
    "provides",
    "access",
    "mysql",
    "client",
    "server",
    "protocol",
    "enable",
    "c",
    "programs",
    "access",
    "database",
    "contents",
    "psycho",
    "pg2",
    "api",
    "connects",
    "python",
    "applications",
    "postgresql",
    "databases",
    "ibm",
    "underscore",
    "db",
    "api",
    "used",
    "connect",
    "python",
    "applications",
    "ibm",
    "db2",
    "databases",
    "dblib",
    "api",
    "used",
    "connect",
    "sql",
    "server",
    "databases",
    "odbc",
    "used",
    "database",
    "access",
    "microsoft",
    "windows",
    "os",
    "used",
    "oracle",
    "databases",
    "finally",
    "jdbc",
    "used",
    "java",
    "applications",
    "thanks",
    "watching",
    "video",
    "music",
    "hello",
    "welcome",
    "writing",
    "code",
    "using",
    "db",
    "api",
    "completing",
    "video",
    "able",
    "explain",
    "basic",
    "concepts",
    "related",
    "python",
    "db",
    "api",
    "database",
    "cursors",
    "also",
    "write",
    "code",
    "using",
    "db",
    "apis",
    "saw",
    "beginning",
    "module",
    "user",
    "writes",
    "python",
    "programs",
    "using",
    "jupiter",
    "notebook",
    "mechanism",
    "python",
    "code",
    "communicates",
    "dbms",
    "python",
    "code",
    "connects",
    "database",
    "using",
    "db",
    "api",
    "calls",
    "db",
    "api",
    "python",
    "standard",
    "api",
    "accessing",
    "relational",
    "databases",
    "standard",
    "allows",
    "write",
    "single",
    "program",
    "works",
    "multiple",
    "kinds",
    "relational",
    "databases",
    "instead",
    "writing",
    "separate",
    "program",
    "one",
    "learn",
    "db",
    "api",
    "functions",
    "apply",
    "knowledge",
    "use",
    "database",
    "python",
    "advantages",
    "using",
    "db",
    "api",
    "easy",
    "implement",
    "understand",
    "api",
    "defined",
    "encourage",
    "similarity",
    "python",
    "modules",
    "used",
    "access",
    "databases",
    "achieves",
    "consistency",
    "leads",
    "easily",
    "understood",
    "modules",
    "code",
    "generally",
    "portable",
    "across",
    "databases",
    "broader",
    "reach",
    "database",
    "connectivity",
    "python",
    "know",
    "database",
    "system",
    "library",
    "see",
    "table",
    "shows",
    "list",
    "databases",
    "corresponding",
    "db",
    "apis",
    "connect",
    "python",
    "applications",
    "ibm",
    "underscore",
    "db",
    "library",
    "used",
    "connect",
    "ibm",
    "db2",
    "database",
    "sequel",
    "connector",
    "python",
    "library",
    "used",
    "connect",
    "compose",
    "sql",
    "database",
    "psycho",
    "pg2",
    "library",
    "used",
    "connect",
    "compose",
    "postgresql",
    "database",
    "finally",
    "pi",
    "library",
    "used",
    "connect",
    "compose",
    "mongodb",
    "database",
    "two",
    "main",
    "concepts",
    "python",
    "db",
    "api",
    "connection",
    "objects",
    "query",
    "objects",
    "use",
    "connection",
    "objects",
    "connect",
    "database",
    "manage",
    "transactions",
    "cursor",
    "objects",
    "used",
    "run",
    "queries",
    "open",
    "cursor",
    "object",
    "run",
    "queries",
    "cursor",
    "works",
    "similar",
    "cursor",
    "text",
    "processing",
    "system",
    "scroll",
    "result",
    "set",
    "get",
    "data",
    "application",
    "cursors",
    "used",
    "scan",
    "results",
    "database",
    "db",
    "api",
    "includes",
    "connect",
    "constructor",
    "creating",
    "connection",
    "database",
    "returns",
    "connection",
    "object",
    "used",
    "various",
    "connection",
    "methods",
    "connection",
    "methods",
    "cursor",
    "method",
    "returns",
    "new",
    "cursor",
    "object",
    "using",
    "connection",
    "commit",
    "method",
    "used",
    "commit",
    "pending",
    "transaction",
    "database",
    "rollback",
    "method",
    "causes",
    "database",
    "roll",
    "back",
    "start",
    "pending",
    "transaction",
    "close",
    "method",
    "used",
    "close",
    "database",
    "connection",
    "objects",
    "represent",
    "database",
    "cursor",
    "used",
    "manage",
    "content",
    "fetch",
    "operation",
    "cursors",
    "created",
    "connection",
    "isolated",
    "changes",
    "done",
    "database",
    "cursor",
    "immediately",
    "visible",
    "cursors",
    "cursors",
    "created",
    "different",
    "connections",
    "isolated",
    "depending",
    "transaction",
    "support",
    "implemented",
    "database",
    "cursor",
    "control",
    "structure",
    "enables",
    "transversal",
    "records",
    "database",
    "behaves",
    "like",
    "file",
    "name",
    "file",
    "handle",
    "programming",
    "language",
    "program",
    "opens",
    "file",
    "access",
    "contents",
    "opens",
    "cursor",
    "gain",
    "access",
    "query",
    "results",
    "similarly",
    "program",
    "closes",
    "file",
    "end",
    "access",
    "closes",
    "cursor",
    "end",
    "access",
    "query",
    "results",
    "another",
    "similarity",
    "justice",
    "file",
    "handle",
    "keeps",
    "track",
    "program",
    "current",
    "position",
    "within",
    "open",
    "file",
    "cursor",
    "keeps",
    "track",
    "program",
    "current",
    "position",
    "within",
    "query",
    "results",
    "let",
    "walk",
    "python",
    "application",
    "uses",
    "db",
    "api",
    "query",
    "database",
    "first",
    "import",
    "database",
    "module",
    "using",
    "connect",
    "api",
    "module",
    "open",
    "connection",
    "database",
    "use",
    "connect",
    "constructor",
    "pass",
    "parameters",
    "database",
    "name",
    "username",
    "password",
    "connect",
    "function",
    "returns",
    "connection",
    "object",
    "create",
    "cursor",
    "object",
    "connection",
    "object",
    "cursor",
    "used",
    "run",
    "queries",
    "fetch",
    "results",
    "running",
    "queries",
    "using",
    "cursor",
    "also",
    "use",
    "cursor",
    "fetch",
    "results",
    "query",
    "finally",
    "system",
    "done",
    "running",
    "queries",
    "frees",
    "resources",
    "closing",
    "connection",
    "remember",
    "always",
    "important",
    "close",
    "connections",
    "avoid",
    "unused",
    "connections",
    "taking",
    "resources",
    "thanks",
    "watching",
    "video",
    "music",
    "hello",
    "welcome",
    "connecting",
    "database",
    "using",
    "ibm",
    "underscore",
    "db",
    "api",
    "completing",
    "lesson",
    "able",
    "understand",
    "ibm",
    "underscore",
    "db",
    "api",
    "well",
    "credentials",
    "required",
    "connect",
    "database",
    "using",
    "python",
    "also",
    "demonstrate",
    "connect",
    "ibm",
    "db2",
    "database",
    "using",
    "python",
    "code",
    "written",
    "jupyter",
    "notebook",
    "ibm",
    "underscore",
    "db",
    "api",
    "provides",
    "variety",
    "useful",
    "python",
    "functions",
    "accessing",
    "manipulating",
    "data",
    "ibm",
    "data",
    "server",
    "database",
    "including",
    "functions",
    "connecting",
    "database",
    "preparing",
    "issuing",
    "sql",
    "statements",
    "fetching",
    "rows",
    "result",
    "sets",
    "calling",
    "stored",
    "procedures",
    "committing",
    "rolling",
    "back",
    "transactions",
    "handling",
    "errors",
    "retrieving",
    "metadata",
    "ibm",
    "underscore",
    "db",
    "api",
    "uses",
    "ibm",
    "data",
    "server",
    "driver",
    "odbc",
    "cli",
    "apis",
    "connect",
    "ibm",
    "db2",
    "infor",
    "mix",
    "import",
    "ibm",
    "underscore",
    "db",
    "library",
    "python",
    "application",
    "connecting",
    "db2",
    "requires",
    "following",
    "information",
    "driver",
    "name",
    "database",
    "name",
    "host",
    "dns",
    "name",
    "ip",
    "address",
    "host",
    "port",
    "connection",
    "protocol",
    "user",
    "id",
    "user",
    "password",
    "example",
    "creating",
    "db2",
    "database",
    "connection",
    "python",
    "create",
    "connection",
    "object",
    "dsn",
    "stores",
    "connection",
    "credentials",
    "connect",
    "function",
    "ibm",
    "underscore",
    "db",
    "api",
    "used",
    "create",
    "connection",
    "dsn",
    "object",
    "passed",
    "parameter",
    "connection",
    "function",
    "connection",
    "established",
    "database",
    "code",
    "returns",
    "connected",
    "output",
    "otherwise",
    "output",
    "unable",
    "connect",
    "database",
    "free",
    "resources",
    "closing",
    "connection",
    "remember",
    "always",
    "important",
    "close",
    "connections",
    "avoid",
    "unused",
    "connections",
    "taking",
    "resources",
    "thank",
    "watching",
    "video",
    "music",
    "hello",
    "welcome",
    "creating",
    "tables",
    "loading",
    "data",
    "querying",
    "data",
    "completing",
    "lesson",
    "able",
    "understand",
    "basic",
    "concepts",
    "related",
    "creating",
    "tables",
    "loading",
    "data",
    "querying",
    "data",
    "using",
    "python",
    "well",
    "demonstrate",
    "example",
    "perform",
    "tasks",
    "using",
    "ibm",
    "db2",
    "cloud",
    "database",
    "jupyter",
    "notebooks",
    "example",
    "using",
    "db2",
    "database",
    "first",
    "obtain",
    "connection",
    "resource",
    "connecting",
    "database",
    "using",
    "connect",
    "method",
    "ibm",
    "underscore",
    "db",
    "api",
    "different",
    "ways",
    "creating",
    "tables",
    "db2",
    "one",
    "using",
    "web",
    "console",
    "provided",
    "db2",
    "option",
    "create",
    "tables",
    "sql",
    "r",
    "python",
    "environments",
    "let",
    "take",
    "look",
    "create",
    "tables",
    "db2",
    "python",
    "application",
    "sample",
    "table",
    "commercial",
    "trucks",
    "database",
    "let",
    "see",
    "create",
    "trucks",
    "table",
    "db2",
    "using",
    "python",
    "code",
    "create",
    "table",
    "use",
    "ibm",
    "underscore",
    "db",
    "exec",
    "underscore",
    "immediate",
    "function",
    "parameters",
    "function",
    "connection",
    "valid",
    "database",
    "connection",
    "resource",
    "returned",
    "ibm",
    "underscore",
    "db",
    "connect",
    "ibm",
    "underscore",
    "dbp",
    "connect",
    "function",
    "statement",
    "string",
    "contains",
    "sql",
    "statement",
    "options",
    "optional",
    "parameter",
    "includes",
    "dictionary",
    "specifies",
    "type",
    "cursor",
    "return",
    "result",
    "sets",
    "code",
    "create",
    "table",
    "called",
    "trucks",
    "python",
    "use",
    "ibm",
    "underscore",
    "db",
    "exec",
    "underscore",
    "immediate",
    "function",
    "ibm",
    "underscore",
    "db",
    "api",
    "connection",
    "resource",
    "created",
    "passed",
    "first",
    "parameter",
    "function",
    "next",
    "parameter",
    "sql",
    "statement",
    "create",
    "table",
    "query",
    "used",
    "create",
    "trucks",
    "table",
    "new",
    "table",
    "created",
    "five",
    "columns",
    "serial",
    "underscore",
    "primary",
    "key",
    "let",
    "take",
    "look",
    "loading",
    "data",
    "use",
    "ibm",
    "underscore",
    "db",
    "exec",
    "underscore",
    "immediate",
    "function",
    "ibm",
    "underscore",
    "db",
    "api",
    "connection",
    "resource",
    "created",
    "passed",
    "first",
    "parameter",
    "function",
    "next",
    "parameter",
    "sql",
    "statement",
    "insert",
    "query",
    "used",
    "insert",
    "data",
    "trucks",
    "table",
    "new",
    "row",
    "added",
    "trucks",
    "table",
    "similarly",
    "add",
    "rows",
    "trucks",
    "table",
    "using",
    "ibm",
    "underscore",
    "db",
    "exec",
    "underscore",
    "immediate",
    "function",
    "python",
    "code",
    "connected",
    "database",
    "instance",
    "database",
    "table",
    "created",
    "populated",
    "data",
    "let",
    "see",
    "fetch",
    "data",
    "trucks",
    "table",
    "created",
    "db2",
    "using",
    "python",
    "code",
    "use",
    "ibm",
    "underscore",
    "db",
    "exec",
    "underscore",
    "immediate",
    "function",
    "ibm",
    "underscore",
    "db",
    "api",
    "connection",
    "resource",
    "created",
    "passed",
    "first",
    "parameter",
    "function",
    "next",
    "parameter",
    "sql",
    "statement",
    "select",
    "table",
    "query",
    "python",
    "code",
    "returns",
    "output",
    "shows",
    "fields",
    "data",
    "trucks",
    "table",
    "check",
    "output",
    "returned",
    "select",
    "query",
    "shown",
    "correct",
    "referring",
    "db2",
    "console",
    "let",
    "look",
    "use",
    "pandas",
    "retrieve",
    "data",
    "database",
    "tables",
    "pandas",
    "popular",
    "python",
    "library",
    "contains",
    "data",
    "structures",
    "manipulation",
    "tools",
    "designed",
    "make",
    "data",
    "analysis",
    "fast",
    "easy",
    "python",
    "load",
    "data",
    "trucks",
    "table",
    "data",
    "frame",
    "called",
    "df",
    "data",
    "frame",
    "represents",
    "tabular",
    "spreadsheet",
    "like",
    "data",
    "structure",
    "containing",
    "ordered",
    "collection",
    "columns",
    "different",
    "value",
    "type",
    "thanks",
    "watching",
    "video",
    "music",
    "hello",
    "welcome",
    "analyzing",
    "data",
    "python",
    "completing",
    "video",
    "able",
    "understand",
    "basic",
    "concepts",
    "related",
    "performing",
    "exploratory",
    "analysis",
    "data",
    "demonstrate",
    "example",
    "store",
    "data",
    "using",
    "ibm",
    "db2",
    "cloud",
    "database",
    "use",
    "python",
    "basic",
    "data",
    "analysis",
    "data",
    "video",
    "using",
    "mcdonald",
    "menu",
    "nutritional",
    "facts",
    "data",
    "popular",
    "menu",
    "items",
    "mcdonald",
    "using",
    "python",
    "perform",
    "basic",
    "exploratory",
    "analysis",
    "mcdonald",
    "american",
    "fast",
    "food",
    "company",
    "world",
    "largest",
    "restaurant",
    "chain",
    "revenue",
    "although",
    "mcdonald",
    "known",
    "fast",
    "food",
    "items",
    "hamburgers",
    "french",
    "fries",
    "soft",
    "drinks",
    "milkshakes",
    "desserts",
    "company",
    "added",
    "menu",
    "salads",
    "fish",
    "smoothies",
    "fruit",
    "mcdonald",
    "provides",
    "nutrition",
    "analysis",
    "menu",
    "items",
    "help",
    "balance",
    "mcdonald",
    "meal",
    "foods",
    "eat",
    "data",
    "set",
    "used",
    "lesson",
    "obtained",
    "nutritional",
    "facts",
    "mcdonald",
    "menu",
    "kaggle",
    "need",
    "create",
    "table",
    "db2",
    "store",
    "mcdonald",
    "menu",
    "nutrition",
    "facts",
    "data",
    "set",
    "using",
    "also",
    "using",
    "console",
    "provided",
    "db2",
    "process",
    "four",
    "steps",
    "involved",
    "loading",
    "data",
    "table",
    "source",
    "target",
    "define",
    "finalize",
    "first",
    "load",
    "spreadsheet",
    "db2",
    "using",
    "console",
    "select",
    "target",
    "schema",
    "given",
    "option",
    "load",
    "data",
    "existing",
    "table",
    "create",
    "new",
    "table",
    "choose",
    "create",
    "new",
    "table",
    "option",
    "specify",
    "table",
    "name",
    "next",
    "see",
    "preview",
    "data",
    "also",
    "define",
    "columns",
    "data",
    "types",
    "review",
    "settings",
    "begin",
    "load",
    "loading",
    "complete",
    "see",
    "statistics",
    "loaded",
    "data",
    "next",
    "view",
    "table",
    "explore",
    "db2",
    "allows",
    "analyze",
    "data",
    "using",
    "analytics",
    "apis",
    "rstudio",
    "python",
    "data",
    "loaded",
    "relational",
    "database",
    "run",
    "python",
    "scripts",
    "retrieve",
    "data",
    "write",
    "data",
    "db2",
    "database",
    "scripts",
    "powerful",
    "tools",
    "help",
    "analyze",
    "data",
    "example",
    "use",
    "generate",
    "statistical",
    "models",
    "based",
    "data",
    "database",
    "plot",
    "results",
    "models",
    "lesson",
    "using",
    "python",
    "scripts",
    "run",
    "within",
    "jupyter",
    "notebook",
    "obtaining",
    "connection",
    "resource",
    "connecting",
    "database",
    "using",
    "connect",
    "method",
    "ibm",
    "underscore",
    "db",
    "api",
    "use",
    "sql",
    "select",
    "query",
    "verify",
    "number",
    "rows",
    "loaded",
    "table",
    "created",
    "figure",
    "shows",
    "snapshot",
    "output",
    "output",
    "obtained",
    "260",
    "similar",
    "number",
    "rows",
    "db2",
    "console",
    "let",
    "see",
    "use",
    "pandas",
    "retrieve",
    "data",
    "database",
    "tables",
    "load",
    "data",
    "mcdonald",
    "underscore",
    "nutrition",
    "table",
    "data",
    "frame",
    "df",
    "using",
    "read",
    "underscore",
    "sql",
    "method",
    "sql",
    "select",
    "query",
    "connection",
    "object",
    "passed",
    "parameters",
    "read",
    "underscore",
    "sql",
    "method",
    "view",
    "first",
    "rows",
    "data",
    "frame",
    "df",
    "created",
    "using",
    "head",
    "method",
    "time",
    "learn",
    "data",
    "panda",
    "methods",
    "equipped",
    "set",
    "common",
    "mathematical",
    "statistical",
    "methods",
    "let",
    "use",
    "describe",
    "method",
    "view",
    "summary",
    "statistics",
    "data",
    "data",
    "frame",
    "explore",
    "output",
    "describe",
    "method",
    "see",
    "260",
    "observations",
    "food",
    "items",
    "data",
    "frame",
    "also",
    "see",
    "nine",
    "unique",
    "categories",
    "food",
    "items",
    "data",
    "frame",
    "also",
    "see",
    "summary",
    "statistics",
    "information",
    "frequency",
    "mean",
    "median",
    "standard",
    "deviation",
    "etc",
    "260",
    "food",
    "items",
    "across",
    "different",
    "variables",
    "example",
    "maximum",
    "value",
    "total",
    "fat",
    "let",
    "investigate",
    "data",
    "let",
    "try",
    "understand",
    "one",
    "nutrients",
    "food",
    "items",
    "sodium",
    "main",
    "source",
    "sodium",
    "table",
    "salt",
    "average",
    "american",
    "eats",
    "five",
    "teaspoons",
    "salt",
    "day",
    "20",
    "times",
    "much",
    "body",
    "needs",
    "sodium",
    "found",
    "naturally",
    "foods",
    "lot",
    "added",
    "processing",
    "preparation",
    "many",
    "foods",
    "taste",
    "salty",
    "may",
    "still",
    "high",
    "sodium",
    "large",
    "amounts",
    "sodium",
    "hidden",
    "canned",
    "processed",
    "convenience",
    "foods",
    "sodium",
    "controls",
    "fluid",
    "balance",
    "bodies",
    "maintains",
    "blood",
    "volume",
    "blood",
    "pressure",
    "eating",
    "much",
    "sodium",
    "may",
    "raise",
    "blood",
    "pressure",
    "cause",
    "fluid",
    "retention",
    "could",
    "lead",
    "swelling",
    "legs",
    "feet",
    "health",
    "issues",
    "limiting",
    "sodium",
    "diet",
    "common",
    "target",
    "eat",
    "less",
    "2",
    "000",
    "milligrams",
    "sodium",
    "per",
    "day",
    "using",
    "nutrition",
    "data",
    "set",
    "mcdonald",
    "let",
    "basic",
    "data",
    "analysis",
    "answer",
    "question",
    "food",
    "item",
    "maximum",
    "sodium",
    "content",
    "first",
    "use",
    "visualization",
    "explore",
    "sodium",
    "content",
    "food",
    "items",
    "using",
    "swarm",
    "plot",
    "method",
    "provided",
    "seabourn",
    "package",
    "create",
    "categorical",
    "scatter",
    "plot",
    "shown",
    "right",
    "give",
    "input",
    "category",
    "sodium",
    "data",
    "data",
    "frame",
    "df",
    "contains",
    "nutritional",
    "data",
    "set",
    "mcdonald",
    "plot",
    "shows",
    "sodium",
    "values",
    "different",
    "food",
    "items",
    "category",
    "notice",
    "high",
    "value",
    "around",
    "3600",
    "sodium",
    "scatter",
    "plot",
    "learning",
    "visualizations",
    "later",
    "module",
    "let",
    "explore",
    "high",
    "sodium",
    "value",
    "identify",
    "food",
    "items",
    "menu",
    "value",
    "sodium",
    "let",
    "basic",
    "data",
    "analysis",
    "using",
    "python",
    "find",
    "food",
    "items",
    "menu",
    "maximum",
    "sodium",
    "content",
    "check",
    "values",
    "sodium",
    "levels",
    "food",
    "items",
    "within",
    "data",
    "set",
    "use",
    "code",
    "shown",
    "code",
    "one",
    "describe",
    "method",
    "used",
    "understand",
    "summary",
    "statistics",
    "associated",
    "sodium",
    "notice",
    "maximum",
    "value",
    "sodium",
    "given",
    "3600",
    "let",
    "explore",
    "row",
    "associated",
    "maximum",
    "sodium",
    "variable",
    "shown",
    "code",
    "two",
    "use",
    "idx",
    "max",
    "method",
    "compute",
    "index",
    "values",
    "maximum",
    "value",
    "sodium",
    "obtained",
    "data",
    "frame",
    "see",
    "output",
    "let",
    "find",
    "item",
    "name",
    "associated",
    "82nd",
    "item",
    "data",
    "frame",
    "shown",
    "code",
    "3",
    "use",
    "dot",
    "method",
    "find",
    "item",
    "name",
    "passing",
    "index",
    "82",
    "column",
    "name",
    "item",
    "returned",
    "82nd",
    "row",
    "finally",
    "find",
    "food",
    "item",
    "menu",
    "highest",
    "sodium",
    "content",
    "chicken",
    "mcnuggets",
    "40",
    "pieces",
    "visualizations",
    "useful",
    "initial",
    "data",
    "exploration",
    "help",
    "us",
    "understand",
    "relationships",
    "patterns",
    "outliers",
    "data",
    "let",
    "first",
    "create",
    "scatter",
    "plot",
    "protein",
    "total",
    "fat",
    "scatter",
    "plots",
    "popular",
    "visualization",
    "tools",
    "show",
    "relationship",
    "two",
    "variables",
    "point",
    "observation",
    "use",
    "joint",
    "plot",
    "function",
    "provided",
    "seaborn",
    "package",
    "give",
    "input",
    "protein",
    "total",
    "fat",
    "data",
    "data",
    "frame",
    "df",
    "contains",
    "nutritional",
    "data",
    "set",
    "mcdonald",
    "output",
    "scatter",
    "plot",
    "shown",
    "right",
    "side",
    "plot",
    "interesting",
    "shape",
    "shows",
    "correlation",
    "two",
    "variables",
    "protein",
    "fat",
    "correlation",
    "measure",
    "association",
    "two",
    "variables",
    "value",
    "negative",
    "one",
    "plus",
    "one",
    "see",
    "points",
    "scatter",
    "plot",
    "closer",
    "straight",
    "line",
    "positive",
    "direction",
    "positive",
    "correlation",
    "two",
    "variables",
    "top",
    "right",
    "corner",
    "scatter",
    "plot",
    "values",
    "pearson",
    "correlation",
    "significance",
    "correlation",
    "denoted",
    "p",
    "good",
    "value",
    "shows",
    "variables",
    "certainly",
    "correlated",
    "plot",
    "also",
    "shows",
    "two",
    "histograms",
    "one",
    "top",
    "right",
    "side",
    "histogram",
    "top",
    "variable",
    "protein",
    "histogram",
    "right",
    "side",
    "variable",
    "total",
    "fat",
    "also",
    "notice",
    "point",
    "scatter",
    "plot",
    "outside",
    "general",
    "pattern",
    "possible",
    "outlier",
    "let",
    "see",
    "visualize",
    "data",
    "using",
    "box",
    "plots",
    "box",
    "plots",
    "charts",
    "indicate",
    "distribution",
    "one",
    "variables",
    "box",
    "box",
    "plot",
    "captures",
    "middle",
    "fifty",
    "percent",
    "data",
    "lines",
    "points",
    "indicate",
    "possible",
    "skewness",
    "outliers",
    "let",
    "create",
    "box",
    "plot",
    "sugar",
    "function",
    "going",
    "use",
    "box",
    "plot",
    "seaborn",
    "package",
    "give",
    "column",
    "name",
    "sugars",
    "input",
    "box",
    "plot",
    "function",
    "output",
    "shown",
    "right",
    "side",
    "box",
    "plot",
    "average",
    "values",
    "sugar",
    "food",
    "items",
    "around",
    "30",
    "grams",
    "also",
    "notice",
    "outliers",
    "indicate",
    "food",
    "items",
    "extreme",
    "values",
    "sugar",
    "exists",
    "food",
    "items",
    "data",
    "set",
    "sugar",
    "content",
    "around",
    "128",
    "grams",
    "candies",
    "may",
    "among",
    "high",
    "sugar",
    "content",
    "food",
    "items",
    "menu",
    "know",
    "basic",
    "exploratory",
    "data",
    "analysis",
    "using",
    "pandas",
    "visualization",
    "tools",
    "proceed",
    "labs",
    "module",
    "practice",
    "concepts",
    "learned",
    "thank",
    "watching",
    "video",
    "music",
    "hello",
    "welcome",
    "video",
    "give",
    "hints",
    "tips",
    "working",
    "real",
    "world",
    "data",
    "sets",
    "many",
    "real",
    "world",
    "data",
    "sets",
    "made",
    "available",
    "dot",
    "csv",
    "files",
    "text",
    "files",
    "contain",
    "data",
    "values",
    "typically",
    "separated",
    "commas",
    "cases",
    "different",
    "separator",
    "semicolon",
    "may",
    "used",
    "video",
    "use",
    "example",
    "file",
    "called",
    "although",
    "fictional",
    "data",
    "set",
    "contains",
    "names",
    "dogs",
    "breeds",
    "use",
    "illustrate",
    "concepts",
    "apply",
    "real",
    "data",
    "sets",
    "sample",
    "contents",
    "dogs",
    "dot",
    "csv",
    "file",
    "shown",
    "first",
    "row",
    "table",
    "many",
    "cases",
    "contains",
    "attribute",
    "labels",
    "map",
    "column",
    "names",
    "table",
    "first",
    "row",
    "contains",
    "name",
    "three",
    "attributes",
    "id",
    "name",
    "first",
    "attribute",
    "subsequent",
    "rows",
    "contain",
    "id",
    "values",
    "1",
    "2",
    "name",
    "dog",
    "second",
    "attribute",
    "case",
    "dog",
    "names",
    "wolfie",
    "fluffy",
    "huggy",
    "values",
    "third",
    "attribute",
    "called",
    "breed",
    "either",
    "dominant",
    "breed",
    "pure",
    "breed",
    "name",
    "values",
    "german",
    "shepherd",
    "pomeranian",
    "labrador",
    "seen",
    "csv",
    "files",
    "first",
    "header",
    "row",
    "contains",
    "names",
    "attributes",
    "loading",
    "data",
    "database",
    "using",
    "visual",
    "load",
    "tool",
    "database",
    "console",
    "ensure",
    "header",
    "first",
    "row",
    "enabled",
    "map",
    "attribute",
    "names",
    "first",
    "row",
    "csv",
    "file",
    "column",
    "names",
    "database",
    "table",
    "rest",
    "rows",
    "data",
    "rows",
    "table",
    "shown",
    "note",
    "default",
    "column",
    "names",
    "may",
    "always",
    "database",
    "query",
    "friendly",
    "case",
    "may",
    "want",
    "edit",
    "table",
    "created",
    "let",
    "talk",
    "querying",
    "column",
    "names",
    "lower",
    "mixed",
    "case",
    "combination",
    "upper",
    "lowercase",
    "let",
    "assume",
    "loaded",
    "file",
    "using",
    "default",
    "column",
    "names",
    "csv",
    "try",
    "retrieve",
    "contents",
    "id",
    "column",
    "using",
    "query",
    "select",
    "lowercase",
    "id",
    "dogs",
    "get",
    "error",
    "shown",
    "indicating",
    "id",
    "valid",
    "database",
    "parser",
    "assumes",
    "uppercase",
    "names",
    "default",
    "whereas",
    "loaded",
    "csv",
    "file",
    "database",
    "id",
    "column",
    "name",
    "mixed",
    "case",
    "ie",
    "uppercase",
    "lowercase",
    "case",
    "select",
    "data",
    "column",
    "mixed",
    "case",
    "name",
    "need",
    "specify",
    "column",
    "name",
    "correct",
    "case",
    "within",
    "double",
    "quotes",
    "follows",
    "select",
    "double",
    "quotes",
    "uppercase",
    "lowercase",
    "double",
    "quotes",
    "dogs",
    "ensure",
    "use",
    "double",
    "quotes",
    "around",
    "column",
    "name",
    "single",
    "quotes",
    "next",
    "cover",
    "querying",
    "column",
    "names",
    "spaces",
    "characters",
    "csv",
    "file",
    "name",
    "column",
    "contains",
    "spaces",
    "default",
    "database",
    "may",
    "map",
    "underscores",
    "example",
    "name",
    "dog",
    "column",
    "spaces",
    "three",
    "words",
    "database",
    "may",
    "change",
    "name",
    "underscore",
    "underscore",
    "dog",
    "special",
    "characters",
    "like",
    "parentheses",
    "brackets",
    "may",
    "also",
    "get",
    "mapped",
    "underscores",
    "therefore",
    "write",
    "query",
    "ensure",
    "use",
    "proper",
    "case",
    "formatting",
    "within",
    "quotes",
    "substitute",
    "special",
    "characters",
    "underscores",
    "shown",
    "example",
    "select",
    "id",
    "name",
    "dog",
    "breed",
    "dominant",
    "breed",
    "pure",
    "breed",
    "dogs",
    "please",
    "note",
    "underscores",
    "separating",
    "words",
    "within",
    "double",
    "quotes",
    "also",
    "note",
    "double",
    "underscore",
    "breed",
    "dominant",
    "shown",
    "finally",
    "also",
    "important",
    "note",
    "trailing",
    "underscore",
    "word",
    "breed",
    "near",
    "end",
    "query",
    "used",
    "place",
    "closing",
    "bracket",
    "using",
    "quotes",
    "jupiter",
    "notebooks",
    "may",
    "issuing",
    "queries",
    "notebook",
    "first",
    "assigning",
    "python",
    "variables",
    "cases",
    "query",
    "contains",
    "double",
    "quotes",
    "example",
    "specify",
    "mixed",
    "case",
    "column",
    "name",
    "could",
    "differentiate",
    "quotes",
    "using",
    "single",
    "quotes",
    "python",
    "variable",
    "enclose",
    "sql",
    "query",
    "double",
    "quotes",
    "column",
    "names",
    "example",
    "select",
    "query",
    "equals",
    "open",
    "single",
    "quote",
    "select",
    "id",
    "double",
    "quotes",
    "dogs",
    "close",
    "single",
    "quote",
    "need",
    "specify",
    "single",
    "quotes",
    "within",
    "query",
    "example",
    "specify",
    "value",
    "clause",
    "case",
    "use",
    "backslash",
    "escape",
    "character",
    "follows",
    "select",
    "query",
    "equals",
    "open",
    "single",
    "quote",
    "select",
    "star",
    "dogs",
    "open",
    "double",
    "quote",
    "name",
    "dog",
    "close",
    "double",
    "quote",
    "equals",
    "backslash",
    "single",
    "quote",
    "huggy",
    "backslash",
    "single",
    "quote",
    "close",
    "single",
    "quote",
    "long",
    "queries",
    "join",
    "queries",
    "nested",
    "queries",
    "may",
    "useful",
    "split",
    "query",
    "multiple",
    "lines",
    "improved",
    "readability",
    "python",
    "notebooks",
    "use",
    "backslash",
    "character",
    "indicate",
    "continuation",
    "next",
    "row",
    "shown",
    "example",
    "percent",
    "sql",
    "select",
    "id",
    "name",
    "dog",
    "backslash",
    "dogs",
    "backslash",
    "name",
    "dog",
    "equals",
    "huggy",
    "would",
    "helpful",
    "point",
    "take",
    "moment",
    "review",
    "special",
    "characters",
    "shown",
    "please",
    "keep",
    "mind",
    "might",
    "get",
    "error",
    "split",
    "query",
    "multiple",
    "lines",
    "python",
    "notebook",
    "without",
    "backslash",
    "using",
    "sql",
    "magic",
    "use",
    "double",
    "percent",
    "sql",
    "first",
    "line",
    "cell",
    "jupiter",
    "notebooks",
    "implies",
    "rest",
    "content",
    "cell",
    "interpreted",
    "sql",
    "magic",
    "example",
    "double",
    "percent",
    "sql",
    "new",
    "row",
    "select",
    "id",
    "name",
    "dog",
    "new",
    "row",
    "dogs",
    "new",
    "row",
    "name",
    "dog",
    "equals",
    "huggy",
    "please",
    "note",
    "special",
    "characters",
    "shown",
    "using",
    "double",
    "percent",
    "sql",
    "backslash",
    "needed",
    "end",
    "line",
    "point",
    "might",
    "asking",
    "would",
    "restrict",
    "number",
    "rows",
    "retrieved",
    "good",
    "question",
    "table",
    "may",
    "contain",
    "thousands",
    "even",
    "millions",
    "rows",
    "may",
    "want",
    "see",
    "sample",
    "data",
    "look",
    "rows",
    "see",
    "kind",
    "data",
    "table",
    "contains",
    "may",
    "tempted",
    "select",
    "star",
    "table",
    "name",
    "retrieve",
    "results",
    "pandas",
    "data",
    "frame",
    "head",
    "function",
    "may",
    "take",
    "long",
    "time",
    "query",
    "run",
    "instead",
    "restrict",
    "result",
    "set",
    "using",
    "limit",
    "clause",
    "example",
    "use",
    "following",
    "query",
    "retrieve",
    "first",
    "three",
    "rows",
    "table",
    "called",
    "census",
    "data",
    "select",
    "star",
    "census",
    "underscore",
    "data",
    "limit",
    "three",
    "video",
    "looked",
    "considerations",
    "tips",
    "working",
    "real",
    "world",
    "data",
    "sets",
    "thanks",
    "watching",
    "music",
    "hello",
    "welcome",
    "video",
    "look",
    "get",
    "information",
    "tables",
    "columns",
    "database",
    "would",
    "get",
    "list",
    "tables",
    "database",
    "sometimes",
    "database",
    "may",
    "contain",
    "several",
    "tables",
    "may",
    "remember",
    "correct",
    "name",
    "example",
    "may",
    "wonder",
    "whether",
    "table",
    "called",
    "dog",
    "dogs",
    "mammals",
    "database",
    "systems",
    "typically",
    "contain",
    "system",
    "catalog",
    "tables",
    "query",
    "list",
    "tables",
    "get",
    "properties",
    "db2",
    "catalog",
    "called",
    "ciscat",
    "tables",
    "sql",
    "server",
    "information",
    "schema",
    "tables",
    "oracle",
    "tables",
    "user",
    "tables",
    "get",
    "list",
    "tables",
    "db2",
    "database",
    "run",
    "following",
    "query",
    "select",
    "star",
    "syscat",
    "tables",
    "select",
    "statement",
    "return",
    "many",
    "tables",
    "including",
    "system",
    "tables",
    "better",
    "filter",
    "result",
    "shown",
    "select",
    "tab",
    "schema",
    "tab",
    "name",
    "create",
    "underscore",
    "time",
    "syscat",
    "tables",
    "tab",
    "schema",
    "equals",
    "abc12345",
    "please",
    "ensure",
    "replace",
    "abc12345",
    "db2",
    "username",
    "select",
    "star",
    "syscat",
    "tables",
    "get",
    "properties",
    "tables",
    "sometimes",
    "interested",
    "specific",
    "properties",
    "creation",
    "time",
    "let",
    "say",
    "created",
    "several",
    "tables",
    "similar",
    "names",
    "example",
    "dog",
    "one",
    "dog",
    "underscore",
    "test",
    "dog",
    "test",
    "one",
    "want",
    "check",
    "tables",
    "last",
    "one",
    "created",
    "issue",
    "query",
    "like",
    "select",
    "tab",
    "schema",
    "tab",
    "name",
    "create",
    "underscore",
    "time",
    "syscat",
    "tables",
    "tab",
    "schema",
    "equals",
    "qcm",
    "54853",
    "output",
    "contain",
    "schema",
    "name",
    "table",
    "name",
    "creation",
    "time",
    "tables",
    "schema",
    "next",
    "let",
    "talk",
    "get",
    "list",
    "columns",
    "table",
    "ca",
    "recall",
    "exact",
    "name",
    "column",
    "example",
    "whether",
    "lowercase",
    "characters",
    "underscore",
    "name",
    "db2",
    "issue",
    "query",
    "like",
    "one",
    "shown",
    "select",
    "star",
    "syscap",
    "columns",
    "tab",
    "name",
    "equals",
    "dogs",
    "information",
    "sequel",
    "simply",
    "run",
    "command",
    "show",
    "columns",
    "dogs",
    "may",
    "want",
    "know",
    "specific",
    "properties",
    "like",
    "data",
    "type",
    "length",
    "data",
    "type",
    "db2",
    "issue",
    "statement",
    "like",
    "select",
    "distinct",
    "name",
    "call",
    "type",
    "length",
    "cis",
    "ibm",
    "cis",
    "columns",
    "tb",
    "name",
    "equals",
    "dogs",
    "look",
    "results",
    "retrieving",
    "column",
    "properties",
    "real",
    "table",
    "called",
    "chicago",
    "crime",
    "data",
    "jupiter",
    "notebook",
    "notice",
    "output",
    "tell",
    "certain",
    "column",
    "names",
    "show",
    "different",
    "cases",
    "example",
    "column",
    "titled",
    "arrest",
    "uppercase",
    "rest",
    "characters",
    "lowercase",
    "keep",
    "mind",
    "refer",
    "column",
    "query",
    "must",
    "enclose",
    "word",
    "arrest",
    "within",
    "double",
    "quotes",
    "must",
    "also",
    "preserve",
    "correct",
    "case",
    "inside",
    "quotes",
    "video",
    "saw",
    "retrieve",
    "table",
    "column",
    "information",
    "thanks",
    "watching",
    "music",
    "video",
    "talking",
    "data",
    "analysis",
    "scenario",
    "playing",
    "data",
    "analyst",
    "data",
    "scientist",
    "begin",
    "talking",
    "problem",
    "use",
    "car",
    "prices",
    "first",
    "understand",
    "importance",
    "data",
    "analysis",
    "know",
    "data",
    "collected",
    "everywhere",
    "around",
    "us",
    "whether",
    "collected",
    "manually",
    "scientists",
    "collected",
    "digitally",
    "every",
    "time",
    "click",
    "website",
    "mobile",
    "device",
    "data",
    "mean",
    "information",
    "data",
    "analysis",
    "essence",
    "data",
    "science",
    "helps",
    "us",
    "unlock",
    "information",
    "insights",
    "raw",
    "data",
    "answer",
    "questions",
    "data",
    "analysis",
    "plays",
    "important",
    "role",
    "helping",
    "us",
    "discover",
    "useful",
    "information",
    "data",
    "answer",
    "questions",
    "even",
    "predict",
    "future",
    "unknown",
    "let",
    "begin",
    "scenario",
    "let",
    "say",
    "friend",
    "named",
    "tom",
    "tom",
    "wants",
    "sell",
    "car",
    "problem",
    "know",
    "much",
    "sell",
    "car",
    "tom",
    "wants",
    "sell",
    "car",
    "much",
    "also",
    "wants",
    "set",
    "price",
    "reasonably",
    "someone",
    "would",
    "want",
    "purchase",
    "price",
    "set",
    "represent",
    "value",
    "car",
    "help",
    "tom",
    "determine",
    "best",
    "price",
    "car",
    "let",
    "think",
    "like",
    "data",
    "scientists",
    "clearly",
    "define",
    "problems",
    "example",
    "data",
    "prices",
    "cars",
    "characteristics",
    "features",
    "cars",
    "affect",
    "prices",
    "color",
    "brand",
    "horsepower",
    "also",
    "affect",
    "selling",
    "price",
    "perhaps",
    "something",
    "else",
    "data",
    "analyst",
    "data",
    "scientist",
    "questions",
    "start",
    "thinking",
    "answer",
    "questions",
    "going",
    "need",
    "data",
    "next",
    "videos",
    "going",
    "understand",
    "data",
    "import",
    "python",
    "begin",
    "looking",
    "basic",
    "insights",
    "data",
    "music",
    "video",
    "looking",
    "data",
    "set",
    "used",
    "car",
    "prices",
    "data",
    "set",
    "used",
    "course",
    "open",
    "data",
    "set",
    "jeffrey",
    "c",
    "schlemmer",
    "data",
    "set",
    "csv",
    "format",
    "separates",
    "values",
    "commas",
    "making",
    "easy",
    "import",
    "tools",
    "applications",
    "line",
    "represents",
    "row",
    "data",
    "set",
    "lab",
    "module",
    "able",
    "download",
    "use",
    "csv",
    "file",
    "notice",
    "anything",
    "different",
    "first",
    "row",
    "sometimes",
    "first",
    "row",
    "header",
    "contains",
    "column",
    "name",
    "26",
    "columns",
    "example",
    "another",
    "row",
    "data",
    "documentation",
    "26",
    "columns",
    "represent",
    "lot",
    "columns",
    "go",
    "column",
    "names",
    "also",
    "check",
    "link",
    "bottom",
    "slide",
    "go",
    "descriptions",
    "first",
    "attribute",
    "symboling",
    "corresponds",
    "insurance",
    "risk",
    "level",
    "car",
    "initially",
    "assigned",
    "risk",
    "factor",
    "symbol",
    "associated",
    "price",
    "automobile",
    "risky",
    "symbol",
    "adjusted",
    "moving",
    "scale",
    "value",
    "plus",
    "three",
    "indicates",
    "auto",
    "risky",
    "minus",
    "three",
    "probably",
    "pretty",
    "safe",
    "second",
    "attribute",
    "normalized",
    "losses",
    "relative",
    "average",
    "loss",
    "payment",
    "per",
    "insured",
    "vehicle",
    "year",
    "value",
    "normalized",
    "autos",
    "within",
    "particular",
    "size",
    "classification",
    "small",
    "station",
    "wagons",
    "sports",
    "specialty",
    "etc",
    "represents",
    "average",
    "loss",
    "per",
    "car",
    "per",
    "year",
    "values",
    "range",
    "65",
    "attributes",
    "easy",
    "understand",
    "would",
    "like",
    "check",
    "details",
    "refer",
    "link",
    "bottom",
    "slide",
    "okay",
    "understand",
    "meaning",
    "feature",
    "notice",
    "26",
    "attribute",
    "price",
    "target",
    "value",
    "label",
    "words",
    "means",
    "price",
    "value",
    "want",
    "predict",
    "data",
    "set",
    "predictor",
    "variables",
    "listed",
    "like",
    "symboling",
    "normalize",
    "losses",
    "make",
    "thus",
    "goal",
    "project",
    "predict",
    "price",
    "terms",
    "car",
    "features",
    "quick",
    "note",
    "data",
    "set",
    "actually",
    "1985",
    "car",
    "prices",
    "models",
    "may",
    "seem",
    "little",
    "low",
    "bear",
    "mind",
    "goal",
    "exercise",
    "learn",
    "analyze",
    "data",
    "foreign",
    "order",
    "data",
    "analysis",
    "python",
    "first",
    "tell",
    "little",
    "bit",
    "main",
    "packages",
    "relevant",
    "analysis",
    "python",
    "python",
    "library",
    "collection",
    "functions",
    "methods",
    "allow",
    "perform",
    "lots",
    "actions",
    "without",
    "writing",
    "code",
    "libraries",
    "usually",
    "contain",
    "modules",
    "providing",
    "different",
    "functionalities",
    "use",
    "directly",
    "extensive",
    "libraries",
    "offering",
    "broad",
    "range",
    "facilities",
    "divided",
    "python",
    "data",
    "analysis",
    "libraries",
    "three",
    "groups",
    "first",
    "group",
    "called",
    "scientific",
    "computing",
    "libraries",
    "pandas",
    "offers",
    "data",
    "structure",
    "tools",
    "effective",
    "data",
    "manipulation",
    "analysis",
    "provides",
    "facts",
    "access",
    "structured",
    "data",
    "primary",
    "instrument",
    "pandas",
    "table",
    "consisting",
    "column",
    "row",
    "labels",
    "called",
    "data",
    "frame",
    "designed",
    "provide",
    "easy",
    "indexing",
    "functionality",
    "numpy",
    "library",
    "uses",
    "arrays",
    "inputs",
    "outputs",
    "extended",
    "objects",
    "matrices",
    "minor",
    "coding",
    "changes",
    "developers",
    "perform",
    "fast",
    "array",
    "processing",
    "psi",
    "pi",
    "includes",
    "functions",
    "advanced",
    "math",
    "problems",
    "listed",
    "slide",
    "well",
    "data",
    "visualization",
    "using",
    "data",
    "visualization",
    "methods",
    "best",
    "way",
    "communicate",
    "others",
    "showing",
    "meaningful",
    "results",
    "analysis",
    "libraries",
    "enable",
    "create",
    "graphs",
    "charts",
    "maps",
    "map",
    "plot",
    "lib",
    "package",
    "library",
    "data",
    "visualization",
    "great",
    "making",
    "graphs",
    "plots",
    "graphs",
    "also",
    "highly",
    "customizable",
    "another",
    "visualization",
    "library",
    "seabourn",
    "based",
    "matplotlib",
    "easy",
    "generate",
    "various",
    "plots",
    "heat",
    "maps",
    "time",
    "series",
    "violin",
    "plots",
    "machine",
    "learning",
    "algorithms",
    "able",
    "develop",
    "model",
    "using",
    "data",
    "set",
    "obtain",
    "predictions",
    "algorithmic",
    "libraries",
    "tackle",
    "machine",
    "learning",
    "tasks",
    "basic",
    "complex",
    "introduce",
    "two",
    "packages",
    "scikit",
    "learn",
    "library",
    "contains",
    "tool",
    "statistical",
    "modeling",
    "including",
    "regression",
    "classification",
    "clustering",
    "library",
    "built",
    "numpy",
    "sci",
    "pi",
    "matplotlib",
    "stats",
    "models",
    "also",
    "python",
    "module",
    "allows",
    "users",
    "explore",
    "data",
    "estimate",
    "statistical",
    "models",
    "perform",
    "statistical",
    "tests",
    "music",
    "video",
    "look",
    "read",
    "data",
    "using",
    "python",
    "pandas",
    "package",
    "data",
    "python",
    "perform",
    "subsequent",
    "data",
    "analysis",
    "procedures",
    "need",
    "data",
    "acquisition",
    "process",
    "loading",
    "reading",
    "data",
    "notebook",
    "various",
    "sources",
    "read",
    "data",
    "using",
    "python",
    "pandas",
    "package",
    "two",
    "important",
    "factors",
    "consider",
    "format",
    "fell",
    "path",
    "format",
    "way",
    "data",
    "encoded",
    "usually",
    "tell",
    "different",
    "encoding",
    "schemes",
    "looking",
    "ending",
    "file",
    "name",
    "common",
    "encodings",
    "csv",
    "json",
    "xlsx",
    "hdf",
    "forth",
    "path",
    "tells",
    "us",
    "data",
    "stored",
    "usually",
    "stored",
    "either",
    "computer",
    "using",
    "online",
    "internet",
    "case",
    "found",
    "data",
    "set",
    "used",
    "cars",
    "obtained",
    "web",
    "address",
    "shown",
    "slide",
    "jerry",
    "entered",
    "web",
    "address",
    "web",
    "browser",
    "saw",
    "something",
    "like",
    "row",
    "one",
    "data",
    "point",
    "large",
    "number",
    "properties",
    "associated",
    "data",
    "point",
    "properties",
    "separated",
    "commas",
    "guess",
    "data",
    "format",
    "csv",
    "stands",
    "comma",
    "separated",
    "values",
    "point",
    "numbers",
    "mean",
    "much",
    "humans",
    "read",
    "data",
    "try",
    "make",
    "sense",
    "pandas",
    "read",
    "csv",
    "method",
    "read",
    "files",
    "columns",
    "separated",
    "commas",
    "panda",
    "data",
    "frame",
    "reading",
    "data",
    "pandas",
    "done",
    "quickly",
    "three",
    "lines",
    "first",
    "import",
    "pandas",
    "define",
    "variable",
    "file",
    "path",
    "use",
    "read",
    "csv",
    "method",
    "import",
    "data",
    "however",
    "read",
    "csv",
    "assumes",
    "data",
    "contains",
    "header",
    "data",
    "used",
    "cars",
    "column",
    "headers",
    "need",
    "specify",
    "read",
    "csv",
    "assign",
    "headers",
    "setting",
    "header",
    "none",
    "reading",
    "data",
    "set",
    "good",
    "idea",
    "look",
    "data",
    "frame",
    "get",
    "better",
    "intuition",
    "ensure",
    "everything",
    "occurred",
    "way",
    "expected",
    "since",
    "printing",
    "entire",
    "data",
    "set",
    "may",
    "take",
    "much",
    "time",
    "resources",
    "save",
    "time",
    "use",
    "dataframe",
    "dot",
    "head",
    "show",
    "first",
    "n",
    "rows",
    "data",
    "frame",
    "similarly",
    "shows",
    "bottom",
    "end",
    "rows",
    "data",
    "frame",
    "printed",
    "first",
    "five",
    "rows",
    "data",
    "seems",
    "data",
    "set",
    "read",
    "successfully",
    "see",
    "pandas",
    "automatically",
    "set",
    "column",
    "header",
    "list",
    "integers",
    "set",
    "header",
    "equals",
    "none",
    "read",
    "data",
    "difficult",
    "work",
    "data",
    "frame",
    "without",
    "meaningful",
    "column",
    "names",
    "however",
    "assign",
    "column",
    "names",
    "pandas",
    "present",
    "case",
    "turned",
    "column",
    "names",
    "separate",
    "file",
    "online",
    "first",
    "put",
    "column",
    "names",
    "list",
    "called",
    "headers",
    "set",
    "equals",
    "headers",
    "replace",
    "default",
    "integer",
    "headers",
    "list",
    "use",
    "head",
    "method",
    "introduced",
    "last",
    "slide",
    "check",
    "data",
    "set",
    "see",
    "correct",
    "headers",
    "inserted",
    "top",
    "column",
    "point",
    "time",
    "done",
    "operations",
    "data",
    "frame",
    "may",
    "want",
    "export",
    "pandas",
    "data",
    "frame",
    "new",
    "csv",
    "file",
    "using",
    "method",
    "underscore",
    "csv",
    "specify",
    "file",
    "path",
    "includes",
    "file",
    "name",
    "want",
    "write",
    "example",
    "would",
    "like",
    "save",
    "data",
    "frame",
    "df",
    "computer",
    "use",
    "syntax",
    "underscore",
    "csv",
    "course",
    "read",
    "save",
    "csv",
    "files",
    "however",
    "pandas",
    "also",
    "supports",
    "importing",
    "exporting",
    "data",
    "file",
    "types",
    "different",
    "data",
    "set",
    "formats",
    "code",
    "syntax",
    "reading",
    "saving",
    "data",
    "formats",
    "similar",
    "read",
    "save",
    "csv",
    "file",
    "column",
    "shows",
    "different",
    "method",
    "read",
    "save",
    "files",
    "different",
    "format",
    "music",
    "video",
    "introduce",
    "simple",
    "pandas",
    "methods",
    "data",
    "scientists",
    "analysts",
    "know",
    "using",
    "python",
    "pandas",
    "data",
    "point",
    "assume",
    "data",
    "loaded",
    "time",
    "us",
    "explore",
    "data",
    "set",
    "pandas",
    "several",
    "methods",
    "used",
    "understand",
    "data",
    "type",
    "features",
    "look",
    "distribution",
    "data",
    "within",
    "data",
    "set",
    "using",
    "methods",
    "gives",
    "overview",
    "data",
    "set",
    "also",
    "point",
    "potential",
    "issues",
    "wrong",
    "data",
    "type",
    "features",
    "may",
    "need",
    "resolved",
    "later",
    "data",
    "variety",
    "types",
    "main",
    "types",
    "stored",
    "pandas",
    "objects",
    "object",
    "float",
    "int",
    "date",
    "time",
    "data",
    "type",
    "names",
    "somewhat",
    "different",
    "native",
    "python",
    "table",
    "shows",
    "differences",
    "similarities",
    "similar",
    "numeric",
    "data",
    "types",
    "int",
    "float",
    "object",
    "pandas",
    "type",
    "function",
    "similar",
    "string",
    "python",
    "save",
    "change",
    "name",
    "date",
    "time",
    "pandas",
    "type",
    "useful",
    "type",
    "handling",
    "time",
    "series",
    "data",
    "two",
    "reasons",
    "check",
    "data",
    "types",
    "data",
    "set",
    "pandas",
    "automatically",
    "assigns",
    "types",
    "based",
    "encoding",
    "detects",
    "original",
    "data",
    "table",
    "number",
    "reasons",
    "assignment",
    "may",
    "incorrect",
    "example",
    "awkward",
    "car",
    "price",
    "column",
    "expect",
    "contain",
    "continuous",
    "numeric",
    "numbers",
    "assigned",
    "data",
    "type",
    "object",
    "would",
    "natural",
    "float",
    "type",
    "jerry",
    "may",
    "need",
    "manually",
    "change",
    "data",
    "type",
    "float",
    "second",
    "reason",
    "allows",
    "experienced",
    "data",
    "scientist",
    "see",
    "python",
    "functions",
    "applied",
    "specific",
    "column",
    "example",
    "math",
    "functions",
    "applied",
    "numerical",
    "data",
    "functions",
    "applied",
    "data",
    "error",
    "may",
    "result",
    "method",
    "applied",
    "data",
    "set",
    "data",
    "type",
    "column",
    "returned",
    "series",
    "good",
    "data",
    "scientist",
    "intuition",
    "tells",
    "us",
    "data",
    "types",
    "make",
    "sense",
    "make",
    "cars",
    "example",
    "names",
    "information",
    "type",
    "object",
    "last",
    "one",
    "list",
    "could",
    "issue",
    "bore",
    "dimension",
    "engine",
    "expect",
    "numerical",
    "data",
    "type",
    "used",
    "instead",
    "object",
    "type",
    "used",
    "later",
    "sections",
    "jerry",
    "correct",
    "type",
    "mismatches",
    "would",
    "like",
    "check",
    "statistical",
    "summary",
    "column",
    "learn",
    "distribution",
    "data",
    "column",
    "statistical",
    "metrics",
    "tell",
    "data",
    "scientist",
    "mathematical",
    "issues",
    "may",
    "exist",
    "extreme",
    "outliers",
    "large",
    "deviations",
    "data",
    "scientists",
    "may",
    "address",
    "issues",
    "later",
    "get",
    "quick",
    "statistics",
    "use",
    "describe",
    "method",
    "returns",
    "number",
    "terms",
    "column",
    "count",
    "average",
    "column",
    "value",
    "mean",
    "column",
    "standard",
    "deviation",
    "std",
    "maximum",
    "minimum",
    "values",
    "well",
    "boundary",
    "quartiles",
    "default",
    "function",
    "skips",
    "rows",
    "columns",
    "contain",
    "numbers",
    "possible",
    "make",
    "describe",
    "method",
    "work",
    "object",
    "type",
    "columns",
    "well",
    "enable",
    "summary",
    "columns",
    "could",
    "add",
    "argument",
    "include",
    "equals",
    "inside",
    "describe",
    "function",
    "bracket",
    "outcome",
    "shows",
    "summary",
    "26",
    "columns",
    "including",
    "object",
    "typed",
    "attributes",
    "see",
    "object",
    "type",
    "columns",
    "different",
    "set",
    "statistics",
    "evaluated",
    "like",
    "unique",
    "top",
    "frequency",
    "unique",
    "number",
    "distinct",
    "objects",
    "column",
    "top",
    "frequently",
    "occurring",
    "object",
    "freak",
    "number",
    "times",
    "top",
    "object",
    "appears",
    "column",
    "values",
    "table",
    "shown",
    "nan",
    "stands",
    "number",
    "particular",
    "statistical",
    "metric",
    "calculated",
    "specific",
    "column",
    "data",
    "type",
    "another",
    "method",
    "use",
    "check",
    "data",
    "set",
    "data",
    "frame",
    "dot",
    "info",
    "function",
    "function",
    "shows",
    "top",
    "30",
    "rows",
    "bottom",
    "30",
    "rows",
    "data",
    "frame",
    "music",
    "hello",
    "video",
    "learn",
    "access",
    "databases",
    "using",
    "python",
    "databases",
    "powerful",
    "tools",
    "data",
    "scientists",
    "completing",
    "module",
    "able",
    "explain",
    "basic",
    "concepts",
    "related",
    "using",
    "python",
    "connect",
    "databases",
    "typical",
    "user",
    "accesses",
    "databases",
    "using",
    "python",
    "code",
    "written",
    "jupyter",
    "notebook",
    "editor",
    "mechanism",
    "python",
    "program",
    "communicates",
    "dbms",
    "python",
    "code",
    "connects",
    "database",
    "using",
    "api",
    "calls",
    "explain",
    "basics",
    "sql",
    "apis",
    "python",
    "dv",
    "apis",
    "application",
    "programming",
    "interface",
    "set",
    "functions",
    "call",
    "get",
    "access",
    "type",
    "service",
    "sql",
    "api",
    "consists",
    "library",
    "function",
    "calls",
    "application",
    "programming",
    "interface",
    "api",
    "dbms",
    "pass",
    "sql",
    "statements",
    "dbms",
    "application",
    "program",
    "calls",
    "functions",
    "api",
    "calls",
    "functions",
    "retrieve",
    "query",
    "results",
    "status",
    "information",
    "dbms",
    "basic",
    "operation",
    "typical",
    "sql",
    "api",
    "illustrated",
    "figure",
    "application",
    "program",
    "begins",
    "database",
    "access",
    "one",
    "api",
    "calls",
    "connect",
    "program",
    "dbms",
    "send",
    "sql",
    "statement",
    "dbms",
    "program",
    "builds",
    "statement",
    "text",
    "string",
    "buffer",
    "makes",
    "api",
    "call",
    "pass",
    "buffer",
    "contents",
    "dbms",
    "application",
    "program",
    "makes",
    "api",
    "calls",
    "check",
    "status",
    "dbms",
    "request",
    "handle",
    "errors",
    "application",
    "program",
    "ends",
    "database",
    "access",
    "api",
    "call",
    "disconnects",
    "database",
    "db",
    "api",
    "python",
    "standard",
    "api",
    "accessing",
    "relational",
    "databases",
    "standard",
    "allows",
    "write",
    "single",
    "program",
    "works",
    "multiple",
    "kinds",
    "relational",
    "databases",
    "instead",
    "writing",
    "separate",
    "program",
    "one",
    "learn",
    "db",
    "api",
    "functions",
    "apply",
    "knowledge",
    "use",
    "database",
    "python",
    "two",
    "main",
    "concepts",
    "python",
    "db",
    "api",
    "connection",
    "objects",
    "query",
    "objects",
    "use",
    "connection",
    "objects",
    "connect",
    "database",
    "manage",
    "transactions",
    "cursor",
    "objects",
    "used",
    "run",
    "queries",
    "open",
    "cursor",
    "object",
    "run",
    "queries",
    "cursor",
    "works",
    "similar",
    "cursor",
    "text",
    "processing",
    "system",
    "scroll",
    "result",
    "set",
    "get",
    "data",
    "application",
    "cursors",
    "used",
    "scan",
    "results",
    "database",
    "methods",
    "used",
    "connection",
    "objects",
    "cursor",
    "method",
    "returns",
    "new",
    "cursor",
    "object",
    "using",
    "connection",
    "commit",
    "method",
    "used",
    "commit",
    "pending",
    "transaction",
    "database",
    "rollback",
    "method",
    "causes",
    "database",
    "roll",
    "back",
    "start",
    "pending",
    "transaction",
    "close",
    "method",
    "used",
    "close",
    "database",
    "connection",
    "let",
    "walk",
    "python",
    "application",
    "uses",
    "db",
    "api",
    "query",
    "database",
    "first",
    "import",
    "database",
    "module",
    "using",
    "connect",
    "api",
    "module",
    "open",
    "connection",
    "database",
    "use",
    "connection",
    "function",
    "pass",
    "parameters",
    "database",
    "name",
    "username",
    "password",
    "connect",
    "function",
    "returns",
    "connection",
    "object",
    "create",
    "cursor",
    "object",
    "connection",
    "object",
    "cursor",
    "used",
    "run",
    "queries",
    "fetch",
    "results",
    "running",
    "queries",
    "using",
    "cursor",
    "also",
    "use",
    "cursor",
    "fetch",
    "results",
    "query",
    "finally",
    "system",
    "done",
    "running",
    "queries",
    "frees",
    "resources",
    "closing",
    "connection",
    "remember",
    "always",
    "important",
    "close",
    "connections",
    "avoid",
    "unused",
    "connections",
    "taking",
    "resources",
    "thanks",
    "watching",
    "video",
    "music",
    "video",
    "going",
    "data",
    "techniques",
    "unfamiliar",
    "term",
    "data",
    "necessary",
    "step",
    "data",
    "analysis",
    "process",
    "converting",
    "mapping",
    "data",
    "one",
    "raw",
    "form",
    "another",
    "format",
    "make",
    "ready",
    "analysis",
    "data",
    "often",
    "called",
    "data",
    "cleaning",
    "data",
    "wrangling",
    "likely",
    "terms",
    "topics",
    "covering",
    "module",
    "first",
    "show",
    "identify",
    "handle",
    "missing",
    "values",
    "missing",
    "value",
    "condition",
    "occurs",
    "whenever",
    "data",
    "entry",
    "left",
    "empty",
    "cover",
    "data",
    "formats",
    "data",
    "different",
    "sources",
    "may",
    "various",
    "formats",
    "different",
    "units",
    "various",
    "conventions",
    "introduce",
    "methods",
    "python",
    "pandas",
    "standardize",
    "values",
    "format",
    "unit",
    "convention",
    "cover",
    "data",
    "normalization",
    "different",
    "columns",
    "numerical",
    "data",
    "may",
    "different",
    "ranges",
    "direct",
    "comparison",
    "often",
    "meaningful",
    "normalization",
    "way",
    "bring",
    "data",
    "similar",
    "range",
    "useful",
    "comparison",
    "specifically",
    "focus",
    "techniques",
    "centering",
    "scaling",
    "introduce",
    "data",
    "binning",
    "binning",
    "creates",
    "bigger",
    "categories",
    "set",
    "numerical",
    "values",
    "particularly",
    "useful",
    "comparison",
    "groups",
    "data",
    "lastly",
    "talk",
    "categorical",
    "variables",
    "show",
    "convert",
    "categorical",
    "values",
    "numeric",
    "variables",
    "make",
    "statistical",
    "modeling",
    "easier",
    "python",
    "usually",
    "perform",
    "operations",
    "along",
    "columns",
    "row",
    "column",
    "represents",
    "sample",
    "different",
    "used",
    "car",
    "database",
    "access",
    "column",
    "specifying",
    "name",
    "column",
    "example",
    "access",
    "symboling",
    "body",
    "style",
    "columns",
    "panda",
    "series",
    "many",
    "ways",
    "manipulate",
    "data",
    "frames",
    "python",
    "example",
    "add",
    "value",
    "entry",
    "column",
    "add",
    "1",
    "symboling",
    "entry",
    "use",
    "command",
    "changes",
    "value",
    "data",
    "frame",
    "column",
    "adding",
    "1",
    "current",
    "value",
    "music",
    "video",
    "introduce",
    "pervasive",
    "problem",
    "missing",
    "values",
    "well",
    "strategies",
    "encounter",
    "missing",
    "values",
    "data",
    "data",
    "value",
    "stored",
    "feature",
    "particular",
    "observation",
    "say",
    "feature",
    "missing",
    "value",
    "usually",
    "missing",
    "value",
    "data",
    "set",
    "appears",
    "question",
    "mark",
    "0",
    "blank",
    "cell",
    "example",
    "normalized",
    "losses",
    "feature",
    "missing",
    "value",
    "represented",
    "n",
    "n",
    "deal",
    "missing",
    "data",
    "many",
    "ways",
    "deal",
    "missing",
    "values",
    "regardless",
    "python",
    "r",
    "whatever",
    "tool",
    "use",
    "course",
    "situation",
    "different",
    "judged",
    "differently",
    "however",
    "typical",
    "options",
    "consider",
    "first",
    "check",
    "person",
    "group",
    "collected",
    "data",
    "go",
    "back",
    "find",
    "actual",
    "value",
    "another",
    "possibility",
    "remove",
    "data",
    "missing",
    "value",
    "found",
    "drop",
    "data",
    "could",
    "either",
    "drop",
    "whole",
    "variable",
    "single",
    "data",
    "entry",
    "missing",
    "value",
    "lot",
    "observations",
    "missing",
    "data",
    "usually",
    "dropping",
    "particular",
    "entry",
    "best",
    "removing",
    "data",
    "want",
    "look",
    "something",
    "least",
    "amount",
    "impact",
    "replacing",
    "data",
    "better",
    "since",
    "data",
    "wasted",
    "however",
    "less",
    "accurate",
    "since",
    "need",
    "replace",
    "missing",
    "data",
    "guess",
    "data",
    "one",
    "standard",
    "replacement",
    "technique",
    "replace",
    "missing",
    "values",
    "average",
    "value",
    "entire",
    "variable",
    "example",
    "suppose",
    "entries",
    "missing",
    "values",
    "normalized",
    "losses",
    "column",
    "column",
    "average",
    "entries",
    "data",
    "4",
    "way",
    "us",
    "get",
    "accurate",
    "guess",
    "missing",
    "values",
    "normalized",
    "losses",
    "column",
    "approximate",
    "values",
    "using",
    "average",
    "value",
    "column",
    "four",
    "thousand",
    "five",
    "hundred",
    "values",
    "averaged",
    "categorical",
    "variables",
    "variable",
    "like",
    "fuel",
    "type",
    "average",
    "fuel",
    "type",
    "since",
    "variable",
    "values",
    "numbers",
    "case",
    "one",
    "possibility",
    "try",
    "using",
    "mode",
    "common",
    "like",
    "gasoline",
    "finally",
    "sometimes",
    "may",
    "find",
    "another",
    "way",
    "guess",
    "missing",
    "data",
    "usually",
    "data",
    "gatherer",
    "knows",
    "something",
    "additional",
    "missing",
    "data",
    "example",
    "may",
    "know",
    "missing",
    "values",
    "tend",
    "old",
    "cars",
    "normalized",
    "losses",
    "old",
    "cars",
    "significantly",
    "higher",
    "average",
    "vehicle",
    "course",
    "finally",
    "cases",
    "may",
    "simply",
    "want",
    "leave",
    "missing",
    "data",
    "missing",
    "data",
    "one",
    "reason",
    "another",
    "may",
    "useful",
    "keep",
    "observation",
    "even",
    "features",
    "missing",
    "let",
    "go",
    "drop",
    "missing",
    "values",
    "replace",
    "missing",
    "values",
    "python",
    "remove",
    "data",
    "contains",
    "missing",
    "values",
    "panda",
    "library",
    "method",
    "called",
    "drop",
    "n",
    "essentially",
    "drop",
    "n",
    "method",
    "choose",
    "drop",
    "rows",
    "columns",
    "contain",
    "missing",
    "values",
    "like",
    "nan",
    "need",
    "specify",
    "access",
    "equals",
    "0",
    "drop",
    "rows",
    "axis",
    "equals",
    "1",
    "drop",
    "columns",
    "contain",
    "missing",
    "values",
    "example",
    "missing",
    "value",
    "price",
    "column",
    "since",
    "price",
    "used",
    "cars",
    "trying",
    "predict",
    "upcoming",
    "analysis",
    "remove",
    "cars",
    "rows",
    "listed",
    "price",
    "simply",
    "done",
    "one",
    "line",
    "code",
    "using",
    "dataframe",
    "dot",
    "drop",
    "n",
    "setting",
    "argument",
    "place",
    "true",
    "allows",
    "modification",
    "done",
    "data",
    "set",
    "directly",
    "place",
    "equals",
    "true",
    "writes",
    "result",
    "back",
    "data",
    "frame",
    "equivalent",
    "line",
    "code",
    "forget",
    "line",
    "code",
    "change",
    "data",
    "frame",
    "good",
    "way",
    "make",
    "sure",
    "performing",
    "correct",
    "operation",
    "modify",
    "data",
    "frame",
    "set",
    "parameter",
    "place",
    "equal",
    "true",
    "always",
    "check",
    "documentation",
    "familiar",
    "function",
    "method",
    "pandas",
    "webpage",
    "lots",
    "useful",
    "resources",
    "replace",
    "missing",
    "values",
    "like",
    "n",
    "ends",
    "actual",
    "values",
    "pandas",
    "library",
    "method",
    "called",
    "replace",
    "used",
    "fill",
    "missing",
    "values",
    "newly",
    "calculated",
    "values",
    "example",
    "assume",
    "want",
    "replace",
    "missing",
    "values",
    "variable",
    "normalized",
    "losses",
    "mean",
    "value",
    "variable",
    "therefore",
    "missing",
    "value",
    "replaced",
    "average",
    "entries",
    "within",
    "column",
    "python",
    "first",
    "calculate",
    "mean",
    "column",
    "use",
    "method",
    "place",
    "specify",
    "value",
    "would",
    "like",
    "replaced",
    "first",
    "parameter",
    "case",
    "n",
    "n",
    "second",
    "parameter",
    "value",
    "would",
    "like",
    "replace",
    "mean",
    "example",
    "fairly",
    "simplified",
    "way",
    "replacing",
    "missing",
    "values",
    "course",
    "techniques",
    "replacing",
    "missing",
    "values",
    "average",
    "group",
    "instead",
    "entire",
    "data",
    "set",
    "gone",
    "two",
    "ways",
    "python",
    "deal",
    "missing",
    "data",
    "learn",
    "drop",
    "problematic",
    "rows",
    "columns",
    "containing",
    "missing",
    "values",
    "learned",
    "replace",
    "missing",
    "values",
    "values",
    "forget",
    "ways",
    "deal",
    "missing",
    "data",
    "always",
    "check",
    "higher",
    "quality",
    "data",
    "set",
    "source",
    "cases",
    "may",
    "want",
    "leave",
    "missing",
    "data",
    "missing",
    "data",
    "music",
    "video",
    "look",
    "problem",
    "data",
    "different",
    "formats",
    "units",
    "conventions",
    "pandas",
    "methods",
    "help",
    "us",
    "deal",
    "issues",
    "data",
    "usually",
    "collected",
    "different",
    "places",
    "different",
    "people",
    "may",
    "stored",
    "different",
    "formats",
    "data",
    "formatting",
    "means",
    "bringing",
    "data",
    "common",
    "standard",
    "expression",
    "allows",
    "users",
    "make",
    "meaningful",
    "comparisons",
    "part",
    "data",
    "set",
    "cleaning",
    "data",
    "formatting",
    "ensures",
    "data",
    "consistent",
    "easily",
    "understandable",
    "example",
    "people",
    "may",
    "use",
    "different",
    "expressions",
    "represent",
    "new",
    "york",
    "city",
    "uppercase",
    "n",
    "uppercase",
    "uppercase",
    "n",
    "lowercase",
    "uppercase",
    "n",
    "uppercase",
    "new",
    "york",
    "sometimes",
    "unclean",
    "data",
    "good",
    "thing",
    "see",
    "example",
    "looking",
    "different",
    "ways",
    "people",
    "tend",
    "write",
    "new",
    "york",
    "exactly",
    "data",
    "want",
    "looking",
    "ways",
    "spot",
    "fraud",
    "perhaps",
    "writing",
    "n",
    "dot",
    "dot",
    "likely",
    "predict",
    "anomaly",
    "someone",
    "wrote",
    "new",
    "york",
    "full",
    "perhaps",
    "often",
    "simply",
    "want",
    "treat",
    "entity",
    "format",
    "make",
    "statistical",
    "analyzes",
    "easier",
    "road",
    "referring",
    "used",
    "car",
    "data",
    "set",
    "feature",
    "named",
    "city",
    "miles",
    "per",
    "gallon",
    "data",
    "set",
    "refers",
    "car",
    "fuel",
    "consumption",
    "miles",
    "per",
    "gallon",
    "unit",
    "however",
    "may",
    "someone",
    "lives",
    "country",
    "uses",
    "metric",
    "units",
    "would",
    "want",
    "convert",
    "values",
    "liters",
    "per",
    "100",
    "kilometers",
    "metric",
    "version",
    "transform",
    "miles",
    "per",
    "gallon",
    "liters",
    "per",
    "hundred",
    "kilometers",
    "need",
    "divide",
    "235",
    "value",
    "city",
    "miles",
    "per",
    "gallon",
    "column",
    "python",
    "easily",
    "done",
    "one",
    "line",
    "code",
    "take",
    "column",
    "set",
    "equal",
    "235",
    "divided",
    "entire",
    "column",
    "second",
    "line",
    "code",
    "rename",
    "column",
    "name",
    "city",
    "miles",
    "per",
    "gallon",
    "city",
    "liters",
    "per",
    "hundred",
    "kilometers",
    "using",
    "data",
    "frame",
    "rename",
    "method",
    "number",
    "reasons",
    "including",
    "import",
    "data",
    "set",
    "python",
    "data",
    "type",
    "may",
    "incorrectly",
    "established",
    "example",
    "notice",
    "assigned",
    "data",
    "type",
    "price",
    "feature",
    "object",
    "although",
    "expected",
    "data",
    "type",
    "really",
    "integer",
    "float",
    "type",
    "important",
    "later",
    "analysis",
    "explore",
    "features",
    "data",
    "type",
    "convert",
    "correct",
    "data",
    "types",
    "otherwise",
    "develop",
    "models",
    "later",
    "may",
    "behave",
    "strangely",
    "totally",
    "valid",
    "data",
    "may",
    "end",
    "treated",
    "like",
    "missing",
    "data",
    "many",
    "data",
    "types",
    "pandas",
    "objects",
    "letters",
    "words",
    "64",
    "integers",
    "floats",
    "real",
    "numbers",
    "many",
    "others",
    "discuss",
    "identify",
    "feature",
    "data",
    "type",
    "python",
    "use",
    "method",
    "check",
    "data",
    "type",
    "variable",
    "data",
    "frame",
    "case",
    "wrong",
    "data",
    "types",
    "method",
    "data",
    "frame",
    "dot",
    "type",
    "used",
    "convert",
    "data",
    "type",
    "one",
    "format",
    "another",
    "example",
    "using",
    "type",
    "int",
    "price",
    "column",
    "convert",
    "object",
    "column",
    "integer",
    "type",
    "variable",
    "music",
    "video",
    "talking",
    "data",
    "normalization",
    "important",
    "technique",
    "understand",
    "data",
    "take",
    "look",
    "used",
    "car",
    "data",
    "set",
    "notice",
    "data",
    "feature",
    "length",
    "ranges",
    "150",
    "250",
    "feature",
    "width",
    "height",
    "ranges",
    "50",
    "100",
    "may",
    "want",
    "normalize",
    "variables",
    "range",
    "values",
    "consistent",
    "normalization",
    "make",
    "statistical",
    "analyzes",
    "easier",
    "road",
    "making",
    "ranges",
    "consistent",
    "variables",
    "normalization",
    "enables",
    "fairer",
    "comparison",
    "different",
    "features",
    "making",
    "sure",
    "impact",
    "also",
    "important",
    "computational",
    "reasons",
    "another",
    "example",
    "help",
    "understand",
    "normalization",
    "important",
    "consider",
    "data",
    "set",
    "containing",
    "two",
    "features",
    "age",
    "income",
    "age",
    "ranges",
    "zero",
    "hundred",
    "income",
    "ranges",
    "zero",
    "twenty",
    "thousand",
    "higher",
    "income",
    "1",
    "000",
    "times",
    "larger",
    "age",
    "ranges",
    "twenty",
    "thousand",
    "five",
    "hundred",
    "thousand",
    "two",
    "features",
    "different",
    "ranges",
    "analysis",
    "like",
    "linear",
    "regression",
    "example",
    "attribute",
    "income",
    "intrinsically",
    "influence",
    "result",
    "due",
    "larger",
    "value",
    "necessarily",
    "mean",
    "important",
    "predictor",
    "nature",
    "data",
    "biases",
    "linear",
    "regression",
    "model",
    "weigh",
    "income",
    "heavily",
    "age",
    "avoid",
    "normalize",
    "two",
    "variables",
    "values",
    "range",
    "0",
    "compare",
    "two",
    "tables",
    "right",
    "normalization",
    "variables",
    "similar",
    "influence",
    "models",
    "build",
    "later",
    "several",
    "ways",
    "normalize",
    "data",
    "outline",
    "three",
    "techniques",
    "first",
    "method",
    "called",
    "simple",
    "feature",
    "scaling",
    "divides",
    "value",
    "maximum",
    "value",
    "feature",
    "makes",
    "new",
    "values",
    "range",
    "0",
    "second",
    "method",
    "called",
    "min",
    "max",
    "takes",
    "value",
    "x",
    "underscore",
    "old",
    "subtract",
    "minimum",
    "value",
    "feature",
    "divides",
    "range",
    "feature",
    "resulting",
    "new",
    "values",
    "range",
    "0",
    "third",
    "method",
    "called",
    "standard",
    "score",
    "formula",
    "value",
    "subtract",
    "mu",
    "average",
    "feature",
    "divide",
    "standard",
    "deviation",
    "sigma",
    "resulting",
    "values",
    "hover",
    "around",
    "zero",
    "typically",
    "range",
    "negative",
    "3",
    "positive",
    "3",
    "higher",
    "lower",
    "following",
    "earlier",
    "example",
    "apply",
    "normalization",
    "method",
    "length",
    "feature",
    "first",
    "use",
    "simple",
    "feature",
    "scaling",
    "method",
    "divide",
    "maximum",
    "value",
    "feature",
    "using",
    "pandas",
    "method",
    "max",
    "done",
    "one",
    "line",
    "code",
    "min",
    "max",
    "method",
    "length",
    "feature",
    "subtract",
    "value",
    "minimum",
    "column",
    "divide",
    "range",
    "column",
    "max",
    "minus",
    "min",
    "finally",
    "apply",
    "method",
    "length",
    "feature",
    "normalize",
    "values",
    "apply",
    "mean",
    "std",
    "method",
    "length",
    "feature",
    "mean",
    "method",
    "return",
    "average",
    "value",
    "feature",
    "data",
    "set",
    "std",
    "method",
    "return",
    "standard",
    "deviation",
    "features",
    "data",
    "set",
    "music",
    "video",
    "talking",
    "binning",
    "method",
    "data",
    "binning",
    "group",
    "values",
    "together",
    "bins",
    "example",
    "bend",
    "age",
    "0",
    "5",
    "6",
    "10",
    "11",
    "15",
    "sometimes",
    "binning",
    "improve",
    "accuracy",
    "predictive",
    "models",
    "addition",
    "sometimes",
    "use",
    "data",
    "binning",
    "group",
    "set",
    "numerical",
    "values",
    "smaller",
    "number",
    "bins",
    "better",
    "understanding",
    "data",
    "distribution",
    "example",
    "price",
    "attribute",
    "range",
    "5000",
    "45",
    "using",
    "binning",
    "categorize",
    "price",
    "three",
    "bins",
    "low",
    "price",
    "median",
    "price",
    "high",
    "prices",
    "actual",
    "card",
    "data",
    "set",
    "price",
    "numerical",
    "variable",
    "ranging",
    "5188",
    "forty",
    "five",
    "thousand",
    "four",
    "hundred",
    "201",
    "unique",
    "values",
    "categorize",
    "three",
    "bins",
    "low",
    "medium",
    "high",
    "priced",
    "cars",
    "python",
    "easily",
    "implement",
    "binning",
    "would",
    "like",
    "three",
    "bins",
    "equal",
    "bin",
    "width",
    "need",
    "four",
    "numbers",
    "dividers",
    "equal",
    "distance",
    "apart",
    "first",
    "use",
    "numpy",
    "function",
    "linspace",
    "return",
    "array",
    "bins",
    "contains",
    "four",
    "equally",
    "spaced",
    "numbers",
    "specified",
    "interval",
    "price",
    "create",
    "list",
    "group",
    "underscore",
    "names",
    "contains",
    "different",
    "bin",
    "names",
    "use",
    "pandas",
    "function",
    "cut",
    "segment",
    "sort",
    "data",
    "values",
    "bins",
    "use",
    "histograms",
    "visualize",
    "distribution",
    "data",
    "divided",
    "bins",
    "histogram",
    "plotted",
    "based",
    "bidding",
    "applied",
    "price",
    "feature",
    "plot",
    "clear",
    "cars",
    "low",
    "price",
    "cars",
    "high",
    "price",
    "music",
    "video",
    "discuss",
    "turn",
    "categorical",
    "variables",
    "quantitative",
    "variables",
    "python",
    "statistical",
    "models",
    "take",
    "objects",
    "strings",
    "input",
    "model",
    "training",
    "take",
    "numbers",
    "inputs",
    "card",
    "data",
    "set",
    "fuel",
    "type",
    "feature",
    "categorical",
    "variable",
    "two",
    "values",
    "gas",
    "diesel",
    "string",
    "format",
    "analysis",
    "jerry",
    "convert",
    "variables",
    "form",
    "numeric",
    "format",
    "encode",
    "values",
    "adding",
    "new",
    "features",
    "corresponding",
    "unique",
    "element",
    "original",
    "feature",
    "would",
    "like",
    "encode",
    "case",
    "feature",
    "fuel",
    "two",
    "unique",
    "values",
    "gas",
    "diesel",
    "create",
    "two",
    "new",
    "features",
    "gas",
    "diesel",
    "value",
    "occurs",
    "original",
    "feature",
    "set",
    "corresponding",
    "value",
    "1",
    "new",
    "feature",
    "rest",
    "features",
    "set",
    "zero",
    "fuel",
    "example",
    "car",
    "b",
    "fuel",
    "value",
    "diesel",
    "therefore",
    "set",
    "featured",
    "diesel",
    "equal",
    "one",
    "gas",
    "feature",
    "zero",
    "similarly",
    "car",
    "fuel",
    "value",
    "gas",
    "therefore",
    "set",
    "feature",
    "gas",
    "equal",
    "1",
    "feature",
    "diesel",
    "equal",
    "zero",
    "technique",
    "often",
    "called",
    "one",
    "hot",
    "encoding",
    "pandas",
    "use",
    "get",
    "underscore",
    "dummies",
    "method",
    "convert",
    "categorical",
    "variables",
    "dummy",
    "variables",
    "python",
    "transforming",
    "categorical",
    "variables",
    "dummy",
    "variables",
    "simple",
    "following",
    "example",
    "pd",
    "dot",
    "get",
    "underscore",
    "dummies",
    "method",
    "gets",
    "fuel",
    "type",
    "column",
    "creates",
    "data",
    "frame",
    "dummy",
    "underscore",
    "variable",
    "underscore",
    "one",
    "get",
    "underscore",
    "dummies",
    "method",
    "automatically",
    "generates",
    "list",
    "numbers",
    "one",
    "corresponding",
    "particular",
    "category",
    "variable",
    "music",
    "module",
    "going",
    "cover",
    "basics",
    "exploratory",
    "data",
    "analysis",
    "using",
    "python",
    "exploratory",
    "data",
    "analysis",
    "short",
    "eda",
    "approach",
    "analyze",
    "data",
    "order",
    "summarize",
    "main",
    "characteristics",
    "data",
    "gain",
    "better",
    "understanding",
    "data",
    "set",
    "uncover",
    "relationships",
    "different",
    "variables",
    "extract",
    "important",
    "variables",
    "problem",
    "trying",
    "solve",
    "main",
    "question",
    "trying",
    "answer",
    "module",
    "characteristics",
    "impact",
    "car",
    "price",
    "going",
    "couple",
    "different",
    "useful",
    "exploratory",
    "data",
    "analysis",
    "techniques",
    "order",
    "answer",
    "question",
    "module",
    "learn",
    "descriptive",
    "statistics",
    "describe",
    "basic",
    "features",
    "data",
    "set",
    "obtains",
    "short",
    "summary",
    "sample",
    "measures",
    "data",
    "basic",
    "grouping",
    "data",
    "using",
    "group",
    "help",
    "transform",
    "data",
    "set",
    "correlation",
    "different",
    "variables",
    "lastly",
    "advanced",
    "correlation",
    "introduce",
    "various",
    "correlation",
    "statistical",
    "methods",
    "namely",
    "pearson",
    "correlation",
    "correlation",
    "heat",
    "maps",
    "foreign",
    "talking",
    "descriptive",
    "statistics",
    "begin",
    "analyze",
    "data",
    "important",
    "first",
    "explore",
    "data",
    "spend",
    "time",
    "building",
    "complicated",
    "models",
    "one",
    "easy",
    "way",
    "calculate",
    "descriptive",
    "statistics",
    "data",
    "descriptive",
    "statistical",
    "analysis",
    "helps",
    "describe",
    "basic",
    "features",
    "data",
    "set",
    "obtains",
    "short",
    "summary",
    "sample",
    "measures",
    "data",
    "let",
    "show",
    "couple",
    "different",
    "useful",
    "methods",
    "one",
    "way",
    "using",
    "describe",
    "function",
    "pandas",
    "using",
    "describe",
    "function",
    "applying",
    "data",
    "frame",
    "describe",
    "function",
    "automatically",
    "computes",
    "basic",
    "statistics",
    "numerical",
    "variables",
    "shows",
    "mean",
    "total",
    "number",
    "data",
    "points",
    "standard",
    "deviation",
    "quartiles",
    "extreme",
    "values",
    "nan",
    "values",
    "automatically",
    "skipped",
    "statistics",
    "function",
    "give",
    "clearer",
    "idea",
    "distribution",
    "different",
    "variables",
    "could",
    "also",
    "categorical",
    "variables",
    "data",
    "set",
    "variables",
    "divided",
    "different",
    "categories",
    "groups",
    "discrete",
    "values",
    "example",
    "data",
    "set",
    "drive",
    "system",
    "categorical",
    "variable",
    "consists",
    "categories",
    "forward",
    "wheel",
    "drive",
    "rear",
    "wheel",
    "drive",
    "drive",
    "one",
    "way",
    "summarize",
    "categorical",
    "data",
    "using",
    "function",
    "value",
    "underscore",
    "counts",
    "change",
    "name",
    "column",
    "make",
    "easier",
    "read",
    "see",
    "118",
    "cars",
    "front",
    "wheel",
    "drive",
    "category",
    "75",
    "cars",
    "drive",
    "category",
    "eight",
    "cars",
    "drive",
    "category",
    "box",
    "plots",
    "great",
    "way",
    "visualize",
    "numeric",
    "data",
    "since",
    "visualize",
    "various",
    "distributions",
    "data",
    "main",
    "features",
    "box",
    "plot",
    "shows",
    "median",
    "data",
    "represents",
    "middle",
    "data",
    "point",
    "upper",
    "quartile",
    "shows",
    "75th",
    "percentile",
    "lower",
    "quartile",
    "shows",
    "25th",
    "percentile",
    "data",
    "upper",
    "lower",
    "quartile",
    "represents",
    "interquartile",
    "range",
    "next",
    "lower",
    "upper",
    "extremes",
    "calculated",
    "times",
    "interquartile",
    "range",
    "75th",
    "percentile",
    "times",
    "iqr",
    "25th",
    "percentile",
    "finally",
    "box",
    "plots",
    "also",
    "display",
    "outliers",
    "individual",
    "dots",
    "occur",
    "outside",
    "upper",
    "lower",
    "extremes",
    "box",
    "plots",
    "easily",
    "spot",
    "outliers",
    "also",
    "see",
    "distribution",
    "skewness",
    "data",
    "box",
    "plots",
    "make",
    "easy",
    "compare",
    "groups",
    "example",
    "using",
    "box",
    "plot",
    "see",
    "distribution",
    "different",
    "categories",
    "drive",
    "wheels",
    "feature",
    "price",
    "feature",
    "see",
    "distribution",
    "price",
    "rear",
    "wheel",
    "drive",
    "categories",
    "distinct",
    "price",
    "drive",
    "drive",
    "almost",
    "indistinguishable",
    "oftentimes",
    "tend",
    "see",
    "continuous",
    "variables",
    "data",
    "data",
    "points",
    "numbers",
    "contained",
    "range",
    "example",
    "data",
    "set",
    "price",
    "engine",
    "size",
    "continuous",
    "variables",
    "want",
    "understand",
    "relationship",
    "engine",
    "size",
    "price",
    "could",
    "engine",
    "size",
    "possibly",
    "predict",
    "price",
    "car",
    "one",
    "good",
    "way",
    "visualize",
    "using",
    "scatter",
    "plot",
    "observation",
    "scatter",
    "plot",
    "represented",
    "point",
    "plot",
    "shows",
    "relationship",
    "two",
    "variables",
    "predictor",
    "variable",
    "variable",
    "using",
    "predict",
    "outcome",
    "case",
    "predictor",
    "variable",
    "engine",
    "size",
    "target",
    "variable",
    "variable",
    "trying",
    "predict",
    "case",
    "target",
    "variable",
    "price",
    "since",
    "would",
    "outcome",
    "scatter",
    "plot",
    "typically",
    "set",
    "predictor",
    "variable",
    "horizontal",
    "axis",
    "set",
    "target",
    "variable",
    "vertical",
    "axis",
    "case",
    "thus",
    "plot",
    "engine",
    "size",
    "price",
    "using",
    "matplot",
    "lib",
    "function",
    "scatter",
    "taking",
    "x",
    "variable",
    "something",
    "note",
    "always",
    "important",
    "label",
    "axes",
    "write",
    "general",
    "plot",
    "title",
    "know",
    "looking",
    "variable",
    "engine",
    "size",
    "related",
    "price",
    "scatter",
    "plot",
    "see",
    "engine",
    "size",
    "goes",
    "price",
    "car",
    "also",
    "goes",
    "giving",
    "us",
    "initial",
    "indication",
    "positive",
    "linear",
    "relationship",
    "two",
    "variables",
    "music",
    "video",
    "cover",
    "basics",
    "grouping",
    "help",
    "transform",
    "data",
    "set",
    "assume",
    "want",
    "know",
    "relationship",
    "different",
    "types",
    "drive",
    "system",
    "forward",
    "rear",
    "drive",
    "price",
    "vehicles",
    "type",
    "drive",
    "system",
    "adds",
    "value",
    "vehicle",
    "would",
    "nice",
    "could",
    "group",
    "data",
    "different",
    "types",
    "drive",
    "wheels",
    "compare",
    "results",
    "different",
    "drive",
    "wheels",
    "pandas",
    "done",
    "using",
    "group",
    "method",
    "group",
    "method",
    "used",
    "categorical",
    "variables",
    "groups",
    "data",
    "subsets",
    "according",
    "different",
    "categories",
    "variable",
    "group",
    "single",
    "variable",
    "group",
    "multiple",
    "variables",
    "passing",
    "multiple",
    "variable",
    "names",
    "example",
    "let",
    "say",
    "interested",
    "finding",
    "average",
    "price",
    "vehicles",
    "observe",
    "differ",
    "different",
    "types",
    "body",
    "styles",
    "drive",
    "wheels",
    "variables",
    "first",
    "pick",
    "three",
    "data",
    "columns",
    "interested",
    "done",
    "first",
    "line",
    "code",
    "group",
    "reduced",
    "data",
    "according",
    "drive",
    "wheels",
    "body",
    "style",
    "second",
    "line",
    "since",
    "interested",
    "knowing",
    "average",
    "price",
    "differs",
    "across",
    "board",
    "take",
    "mean",
    "group",
    "append",
    "bit",
    "end",
    "line",
    "data",
    "grouped",
    "subcategories",
    "average",
    "price",
    "subcategory",
    "shown",
    "see",
    "according",
    "data",
    "drive",
    "convertibles",
    "drive",
    "hard",
    "tops",
    "highest",
    "value",
    "drive",
    "hatchbacks",
    "lowest",
    "value",
    "table",
    "form",
    "easiest",
    "read",
    "also",
    "easy",
    "visualize",
    "make",
    "easier",
    "understand",
    "transform",
    "table",
    "pivot",
    "table",
    "using",
    "pivot",
    "method",
    "previous",
    "table",
    "drive",
    "wheels",
    "body",
    "style",
    "listening",
    "columns",
    "pivot",
    "table",
    "one",
    "variable",
    "displayed",
    "along",
    "columns",
    "variable",
    "displayed",
    "along",
    "rows",
    "one",
    "line",
    "code",
    "using",
    "pandas",
    "pivot",
    "method",
    "pivot",
    "body",
    "style",
    "variable",
    "displayed",
    "along",
    "columns",
    "drive",
    "wheels",
    "displayed",
    "along",
    "rows",
    "price",
    "data",
    "becomes",
    "rectangular",
    "grid",
    "easier",
    "visualize",
    "similar",
    "usually",
    "done",
    "excel",
    "spreadsheets",
    "another",
    "way",
    "represent",
    "pivot",
    "table",
    "using",
    "heat",
    "map",
    "plot",
    "heat",
    "map",
    "takes",
    "rectangular",
    "grid",
    "data",
    "assigns",
    "color",
    "intensity",
    "based",
    "data",
    "value",
    "grid",
    "points",
    "great",
    "way",
    "plot",
    "target",
    "variable",
    "multiple",
    "variables",
    "get",
    "visual",
    "clues",
    "relationship",
    "variables",
    "target",
    "example",
    "use",
    "pi",
    "plot",
    "p",
    "color",
    "method",
    "plot",
    "heat",
    "map",
    "convert",
    "previous",
    "pivot",
    "table",
    "graphical",
    "form",
    "specified",
    "red",
    "blue",
    "color",
    "scheme",
    "output",
    "plot",
    "type",
    "body",
    "style",
    "numbered",
    "along",
    "type",
    "drive",
    "wheels",
    "numbered",
    "along",
    "average",
    "prices",
    "plotted",
    "varying",
    "colors",
    "based",
    "values",
    "according",
    "color",
    "bar",
    "see",
    "top",
    "section",
    "heat",
    "map",
    "seems",
    "higher",
    "prices",
    "bottom",
    "section",
    "music",
    "video",
    "talk",
    "correlation",
    "different",
    "variables",
    "correlation",
    "statistical",
    "metric",
    "measuring",
    "extent",
    "different",
    "variables",
    "interdependent",
    "words",
    "look",
    "two",
    "variables",
    "time",
    "one",
    "variable",
    "changes",
    "effect",
    "change",
    "variable",
    "example",
    "smoking",
    "known",
    "correlated",
    "lung",
    "cancer",
    "since",
    "higher",
    "chance",
    "getting",
    "lung",
    "cancer",
    "smoke",
    "another",
    "example",
    "correlation",
    "umbrella",
    "rain",
    "variables",
    "precipitation",
    "means",
    "people",
    "use",
    "umbrellas",
    "also",
    "rain",
    "people",
    "would",
    "carry",
    "umbrellas",
    "therefore",
    "say",
    "umbrellas",
    "rain",
    "interdependent",
    "definition",
    "correlated",
    "important",
    "know",
    "correlation",
    "imply",
    "causation",
    "fact",
    "say",
    "umbrella",
    "rain",
    "correlated",
    "would",
    "enough",
    "information",
    "say",
    "whether",
    "umbrella",
    "caused",
    "rain",
    "rain",
    "caused",
    "umbrella",
    "data",
    "science",
    "usually",
    "deal",
    "correlation",
    "let",
    "look",
    "correlation",
    "engine",
    "size",
    "price",
    "time",
    "visualize",
    "two",
    "variables",
    "using",
    "scatter",
    "plot",
    "added",
    "linear",
    "line",
    "called",
    "regression",
    "line",
    "indicates",
    "relationship",
    "two",
    "main",
    "goal",
    "plot",
    "see",
    "whether",
    "engine",
    "size",
    "impact",
    "price",
    "example",
    "see",
    "straight",
    "line",
    "data",
    "points",
    "steep",
    "shows",
    "positive",
    "linear",
    "relationship",
    "two",
    "variables",
    "increase",
    "values",
    "engine",
    "size",
    "values",
    "price",
    "go",
    "well",
    "slope",
    "line",
    "positive",
    "positive",
    "correlation",
    "engine",
    "size",
    "price",
    "use",
    "seabourn",
    "reg",
    "plot",
    "create",
    "scatter",
    "plot",
    "another",
    "example",
    "let",
    "look",
    "relationship",
    "highway",
    "miles",
    "per",
    "gallon",
    "see",
    "impact",
    "car",
    "price",
    "see",
    "plot",
    "highway",
    "miles",
    "per",
    "gallon",
    "value",
    "goes",
    "value",
    "price",
    "goes",
    "therefore",
    "negative",
    "linear",
    "relationship",
    "highway",
    "miles",
    "per",
    "gallon",
    "price",
    "although",
    "relationship",
    "negative",
    "slope",
    "line",
    "steep",
    "means",
    "highway",
    "miles",
    "per",
    "gallon",
    "still",
    "good",
    "predictor",
    "price",
    "two",
    "variables",
    "said",
    "negative",
    "correlation",
    "finally",
    "example",
    "weak",
    "correlation",
    "example",
    "low",
    "peak",
    "rpm",
    "high",
    "values",
    "peak",
    "rpm",
    "low",
    "high",
    "prices",
    "therefore",
    "use",
    "rpm",
    "predict",
    "values",
    "music",
    "video",
    "introduce",
    "various",
    "correlation",
    "statistical",
    "methods",
    "one",
    "way",
    "measure",
    "strength",
    "correlation",
    "continuous",
    "numerical",
    "variables",
    "using",
    "method",
    "called",
    "pearson",
    "correlation",
    "pearson",
    "correlation",
    "method",
    "give",
    "two",
    "values",
    "correlation",
    "coefficient",
    "interpret",
    "values",
    "correlation",
    "coefficient",
    "value",
    "close",
    "1",
    "implies",
    "large",
    "positive",
    "correlation",
    "value",
    "close",
    "negative",
    "1",
    "implies",
    "large",
    "negative",
    "correlation",
    "value",
    "close",
    "zero",
    "implies",
    "correlation",
    "variables",
    "next",
    "tell",
    "us",
    "certain",
    "correlation",
    "calculated",
    "value",
    "less",
    "gives",
    "us",
    "strong",
    "certainty",
    "correlation",
    "coefficient",
    "calculated",
    "value",
    "gives",
    "us",
    "moderate",
    "certainty",
    "value",
    "give",
    "us",
    "weak",
    "certainty",
    "larger",
    "point",
    "one",
    "give",
    "us",
    "certainty",
    "correlation",
    "say",
    "strong",
    "correlation",
    "correlation",
    "coefficient",
    "close",
    "1",
    "negative",
    "1",
    "less",
    "following",
    "plot",
    "shows",
    "data",
    "different",
    "correlation",
    "values",
    "example",
    "want",
    "look",
    "correlation",
    "variables",
    "horsepower",
    "car",
    "price",
    "see",
    "easy",
    "calculate",
    "pearson",
    "correlation",
    "using",
    "sci",
    "pi",
    "stats",
    "package",
    "see",
    "correlation",
    "coefficient",
    "approximately",
    "close",
    "one",
    "strong",
    "positive",
    "correlation",
    "also",
    "see",
    "small",
    "much",
    "smaller",
    "conclude",
    "certain",
    "strong",
    "positive",
    "correlation",
    "taking",
    "variables",
    "account",
    "create",
    "heat",
    "map",
    "indicates",
    "correlation",
    "variables",
    "one",
    "another",
    "color",
    "scheme",
    "indicates",
    "pearson",
    "correlation",
    "coefficient",
    "indicating",
    "strength",
    "correlation",
    "two",
    "variables",
    "see",
    "diagonal",
    "line",
    "dark",
    "red",
    "color",
    "indicating",
    "values",
    "diagonal",
    "highly",
    "correlated",
    "makes",
    "sense",
    "look",
    "closer",
    "values",
    "diagonal",
    "correlation",
    "variables",
    "always",
    "one",
    "correlation",
    "heat",
    "map",
    "gives",
    "us",
    "good",
    "overview",
    "different",
    "variables",
    "related",
    "one",
    "another",
    "importantly",
    "variables",
    "related",
    "price",
    "music",
    "music",
    "video",
    "learn",
    "find",
    "relationship",
    "two",
    "categorical",
    "variables",
    "dealing",
    "relationships",
    "two",
    "categorical",
    "variables",
    "ca",
    "use",
    "correlation",
    "method",
    "continuous",
    "variables",
    "employ",
    "use",
    "test",
    "association",
    "test",
    "intended",
    "test",
    "likely",
    "observed",
    "distribution",
    "due",
    "chance",
    "measures",
    "well",
    "observed",
    "distribution",
    "data",
    "fits",
    "distribution",
    "expected",
    "variables",
    "independent",
    "go",
    "example",
    "let",
    "look",
    "important",
    "points",
    "tests",
    "null",
    "hypothesis",
    "variables",
    "independent",
    "test",
    "compares",
    "observed",
    "data",
    "values",
    "model",
    "expects",
    "data",
    "distributed",
    "different",
    "categories",
    "chance",
    "anytime",
    "observed",
    "data",
    "fit",
    "within",
    "model",
    "expected",
    "values",
    "probability",
    "variables",
    "dependent",
    "become",
    "stronger",
    "thus",
    "proving",
    "null",
    "hypothesis",
    "incorrect",
    "tell",
    "type",
    "relationship",
    "exists",
    "variables",
    "relationship",
    "exists",
    "use",
    "car",
    "data",
    "set",
    "assuming",
    "want",
    "test",
    "relationship",
    "fuel",
    "type",
    "aspiration",
    "categorical",
    "variables",
    "either",
    "field",
    "type",
    "car",
    "gas",
    "diesel",
    "aspiration",
    "either",
    "car",
    "standard",
    "turbo",
    "find",
    "observed",
    "counts",
    "cars",
    "category",
    "done",
    "creating",
    "cross",
    "tab",
    "using",
    "pandas",
    "library",
    "cross",
    "tab",
    "table",
    "showing",
    "relationship",
    "two",
    "variables",
    "table",
    "shows",
    "relationship",
    "two",
    "categorical",
    "variables",
    "crosstab",
    "also",
    "known",
    "contingency",
    "table",
    "case",
    "cross",
    "tab",
    "contingency",
    "table",
    "shows",
    "us",
    "counts",
    "category",
    "standard",
    "car",
    "diesel",
    "fuel",
    "standard",
    "car",
    "gas",
    "fuel",
    "turbo",
    "car",
    "diesel",
    "fuel",
    "turbo",
    "car",
    "gas",
    "fuel",
    "formula",
    "given",
    "follows",
    "summation",
    "observed",
    "value",
    "counts",
    "group",
    "minus",
    "expected",
    "value",
    "squared",
    "divided",
    "expected",
    "value",
    "expected",
    "values",
    "based",
    "given",
    "totals",
    "say",
    "individual",
    "cells",
    "would",
    "know",
    "observed",
    "values",
    "calculate",
    "expected",
    "value",
    "standard",
    "car",
    "diesel",
    "take",
    "row",
    "total",
    "20",
    "multiply",
    "column",
    "total",
    "168",
    "divided",
    "grand",
    "total",
    "give",
    "thing",
    "turbo",
    "cars",
    "gas",
    "fuel",
    "take",
    "row",
    "total",
    "185",
    "multiplied",
    "column",
    "total",
    "37",
    "divide",
    "grand",
    "total",
    "205",
    "get",
    "repeat",
    "procedure",
    "get",
    "values",
    "took",
    "row",
    "totals",
    "column",
    "totals",
    "grand",
    "total",
    "get",
    "values",
    "totals",
    "observed",
    "values",
    "going",
    "back",
    "formula",
    "took",
    "summation",
    "observed",
    "minus",
    "expected",
    "values",
    "squared",
    "divided",
    "expected",
    "value",
    "get",
    "value",
    "table",
    "check",
    "degree",
    "freedom",
    "equals",
    "one",
    "row",
    "find",
    "value",
    "closest",
    "see",
    "fall",
    "less",
    "therefore",
    "say",
    "less",
    "since",
    "less",
    "reject",
    "null",
    "hypothesis",
    "two",
    "variables",
    "independent",
    "therefore",
    "conclude",
    "association",
    "fuel",
    "type",
    "aspiration",
    "python",
    "use",
    "contingency",
    "function",
    "psi",
    "pi",
    "dot",
    "statistics",
    "package",
    "function",
    "print",
    "test",
    "value",
    "second",
    "value",
    "close",
    "zero",
    "degree",
    "freedom",
    "remember",
    "table",
    "give",
    "exact",
    "range",
    "falls",
    "python",
    "give",
    "exact",
    "see",
    "results",
    "previous",
    "slides",
    "also",
    "prints",
    "expected",
    "values",
    "also",
    "calculated",
    "hand",
    "since",
    "close",
    "zero",
    "reject",
    "null",
    "hypothesis",
    "two",
    "variables",
    "independent",
    "conclude",
    "evidence",
    "association",
    "fuel",
    "type",
    "aspiration",
    "music",
    "video",
    "examine",
    "model",
    "development",
    "trying",
    "predict",
    "price",
    "car",
    "using",
    "data",
    "set",
    "module",
    "learn",
    "simple",
    "multiple",
    "linear",
    "regression",
    "model",
    "evaluation",
    "using",
    "visualization",
    "polynomial",
    "regression",
    "pipelines",
    "r",
    "squared",
    "mse",
    "evaluation",
    "prediction",
    "decision",
    "making",
    "determine",
    "fair",
    "value",
    "used",
    "car",
    "model",
    "estimator",
    "thought",
    "mathematical",
    "equation",
    "used",
    "predict",
    "value",
    "given",
    "one",
    "values",
    "relating",
    "one",
    "independent",
    "variables",
    "features",
    "dependent",
    "variables",
    "example",
    "input",
    "car",
    "model",
    "highway",
    "miles",
    "per",
    "gallon",
    "independent",
    "variable",
    "feature",
    "output",
    "model",
    "dependent",
    "variable",
    "price",
    "usually",
    "relevant",
    "data",
    "accurate",
    "model",
    "example",
    "input",
    "multiple",
    "independent",
    "variables",
    "features",
    "model",
    "therefore",
    "model",
    "may",
    "predict",
    "accurate",
    "price",
    "car",
    "understand",
    "data",
    "important",
    "consider",
    "following",
    "situation",
    "two",
    "almost",
    "identical",
    "cars",
    "pink",
    "cars",
    "sell",
    "significantly",
    "less",
    "want",
    "use",
    "model",
    "determine",
    "price",
    "two",
    "cars",
    "one",
    "pink",
    "one",
    "red",
    "model",
    "independent",
    "variables",
    "features",
    "include",
    "color",
    "model",
    "predict",
    "price",
    "cars",
    "may",
    "sell",
    "much",
    "less",
    "addition",
    "getting",
    "data",
    "try",
    "different",
    "types",
    "models",
    "course",
    "learn",
    "simple",
    "linear",
    "regression",
    "multiple",
    "linear",
    "regression",
    "polynomial",
    "regression",
    "music",
    "video",
    "talking",
    "simple",
    "linear",
    "regression",
    "multiple",
    "linear",
    "regression",
    "linear",
    "regression",
    "refer",
    "one",
    "independent",
    "variable",
    "make",
    "prediction",
    "multiple",
    "linear",
    "regression",
    "refer",
    "multiple",
    "independent",
    "variables",
    "make",
    "prediction",
    "simple",
    "linear",
    "regression",
    "slr",
    "method",
    "help",
    "us",
    "understand",
    "relationship",
    "two",
    "variables",
    "predictor",
    "independent",
    "variable",
    "x",
    "target",
    "dependent",
    "variable",
    "would",
    "like",
    "come",
    "linear",
    "relationship",
    "variables",
    "shown",
    "parameter",
    "b0",
    "intercept",
    "parameter",
    "b1",
    "slope",
    "fit",
    "train",
    "model",
    "come",
    "parameters",
    "step",
    "requires",
    "lots",
    "math",
    "focus",
    "part",
    "let",
    "clarify",
    "prediction",
    "step",
    "hard",
    "figure",
    "much",
    "car",
    "costs",
    "highway",
    "miles",
    "per",
    "gallon",
    "owner",
    "manual",
    "assume",
    "linear",
    "relationship",
    "variables",
    "use",
    "relationship",
    "formulate",
    "model",
    "determine",
    "price",
    "car",
    "highway",
    "miles",
    "per",
    "gallon",
    "20",
    "input",
    "value",
    "model",
    "obtain",
    "prediction",
    "twenty",
    "two",
    "thousand",
    "dollars",
    "order",
    "determine",
    "line",
    "take",
    "data",
    "points",
    "data",
    "set",
    "marked",
    "red",
    "use",
    "trading",
    "points",
    "fit",
    "model",
    "results",
    "trading",
    "points",
    "parameters",
    "usually",
    "store",
    "data",
    "points",
    "two",
    "data",
    "frame",
    "numpy",
    "arrays",
    "value",
    "would",
    "like",
    "predict",
    "called",
    "target",
    "store",
    "array",
    "store",
    "independent",
    "variable",
    "data",
    "frame",
    "array",
    "x",
    "sample",
    "corresponds",
    "different",
    "row",
    "data",
    "frame",
    "array",
    "many",
    "cases",
    "many",
    "factors",
    "influence",
    "much",
    "people",
    "pay",
    "car",
    "example",
    "make",
    "old",
    "car",
    "model",
    "uncertainty",
    "taken",
    "account",
    "assuming",
    "small",
    "random",
    "value",
    "added",
    "point",
    "line",
    "called",
    "noise",
    "figure",
    "left",
    "shows",
    "distribution",
    "noise",
    "vertical",
    "axis",
    "shows",
    "value",
    "added",
    "horizontal",
    "axis",
    "illustrates",
    "probability",
    "value",
    "added",
    "usually",
    "small",
    "positive",
    "value",
    "added",
    "small",
    "negative",
    "value",
    "sometimes",
    "large",
    "values",
    "added",
    "part",
    "values",
    "added",
    "near",
    "zero",
    "summarize",
    "process",
    "like",
    "set",
    "training",
    "points",
    "use",
    "trading",
    "points",
    "fit",
    "train",
    "model",
    "get",
    "parameters",
    "use",
    "parameters",
    "model",
    "model",
    "use",
    "hat",
    "denote",
    "model",
    "estimate",
    "use",
    "model",
    "predict",
    "values",
    "seen",
    "example",
    "car",
    "20",
    "highway",
    "miles",
    "per",
    "gallon",
    "use",
    "model",
    "make",
    "prediction",
    "price",
    "car",
    "forget",
    "model",
    "always",
    "correct",
    "see",
    "comparing",
    "predicted",
    "value",
    "actual",
    "value",
    "sample",
    "10",
    "highway",
    "miles",
    "per",
    "gallon",
    "predicted",
    "value",
    "match",
    "actual",
    "value",
    "linear",
    "assumption",
    "correct",
    "error",
    "due",
    "noise",
    "reasons",
    "fit",
    "model",
    "python",
    "first",
    "import",
    "linear",
    "model",
    "scikit",
    "learn",
    "create",
    "linear",
    "regression",
    "object",
    "using",
    "constructor",
    "define",
    "predictor",
    "variable",
    "target",
    "variable",
    "use",
    "method",
    "fit",
    "fit",
    "model",
    "find",
    "parameters",
    "b0",
    "b1",
    "input",
    "features",
    "targets",
    "obtain",
    "prediction",
    "using",
    "method",
    "predict",
    "output",
    "array",
    "array",
    "number",
    "samples",
    "input",
    "x",
    "intercept",
    "b0",
    "attribute",
    "object",
    "lm",
    "slope",
    "b1",
    "also",
    "attribute",
    "object",
    "lm",
    "relationship",
    "price",
    "highway",
    "miles",
    "per",
    "gallon",
    "given",
    "equation",
    "bold",
    "price",
    "equals",
    "38",
    "minus",
    "times",
    "highway",
    "miles",
    "per",
    "gallon",
    "like",
    "equation",
    "discussed",
    "multiple",
    "linear",
    "regression",
    "used",
    "explain",
    "relationship",
    "one",
    "continuous",
    "target",
    "variable",
    "two",
    "predictor",
    "x",
    "variables",
    "example",
    "four",
    "predictor",
    "variables",
    "b",
    "zero",
    "intercept",
    "x",
    "equals",
    "zero",
    "b1",
    "coefficient",
    "parameter",
    "x1",
    "b2",
    "coefficient",
    "parameter",
    "x2",
    "two",
    "variables",
    "visualize",
    "values",
    "consider",
    "following",
    "function",
    "variables",
    "x1",
    "x2",
    "visualized",
    "2d",
    "plane",
    "let",
    "example",
    "next",
    "slide",
    "table",
    "contains",
    "different",
    "values",
    "predictor",
    "variables",
    "x1",
    "x2",
    "position",
    "point",
    "placed",
    "2d",
    "plane",
    "color",
    "coded",
    "accordingly",
    "value",
    "predictor",
    "variables",
    "x1",
    "x2",
    "mapped",
    "new",
    "value",
    "hat",
    "new",
    "values",
    "hat",
    "mapped",
    "vertical",
    "direction",
    "height",
    "proportional",
    "value",
    "takes",
    "fit",
    "multiple",
    "linear",
    "regression",
    "follows",
    "extract",
    "four",
    "predictor",
    "variables",
    "store",
    "variable",
    "z",
    "train",
    "model",
    "using",
    "method",
    "train",
    "features",
    "dependent",
    "variables",
    "targets",
    "colon",
    "also",
    "obtain",
    "prediction",
    "using",
    "method",
    "predict",
    "case",
    "input",
    "array",
    "data",
    "frame",
    "four",
    "columns",
    "number",
    "rows",
    "corresponds",
    "number",
    "samples",
    "output",
    "array",
    "number",
    "elements",
    "number",
    "samples",
    "intercept",
    "attribute",
    "object",
    "coefficients",
    "also",
    "attributes",
    "helpful",
    "visualize",
    "equation",
    "replacing",
    "dependent",
    "variable",
    "names",
    "actual",
    "names",
    "identical",
    "form",
    "discussed",
    "earlier",
    "foreign",
    "look",
    "model",
    "evaluation",
    "using",
    "visualization",
    "regression",
    "plots",
    "good",
    "estimate",
    "relationship",
    "two",
    "variables",
    "strength",
    "correlation",
    "direction",
    "relationship",
    "positive",
    "negative",
    "horizontal",
    "axis",
    "independent",
    "variable",
    "vertical",
    "axis",
    "dependent",
    "variable",
    "point",
    "represents",
    "different",
    "target",
    "point",
    "fitted",
    "line",
    "represents",
    "predicted",
    "value",
    "several",
    "ways",
    "plot",
    "regression",
    "plot",
    "simple",
    "way",
    "use",
    "reg",
    "plot",
    "seabourn",
    "library",
    "first",
    "import",
    "seaborn",
    "use",
    "reg",
    "plot",
    "function",
    "parameter",
    "x",
    "name",
    "column",
    "contains",
    "independent",
    "variable",
    "feature",
    "parameter",
    "contains",
    "name",
    "column",
    "contains",
    "name",
    "dependent",
    "variable",
    "target",
    "parameter",
    "data",
    "name",
    "data",
    "frame",
    "result",
    "given",
    "plot",
    "residual",
    "plot",
    "represents",
    "error",
    "actual",
    "value",
    "examining",
    "predicted",
    "value",
    "actual",
    "value",
    "see",
    "difference",
    "obtained",
    "value",
    "subtracting",
    "predicted",
    "value",
    "actual",
    "target",
    "value",
    "plot",
    "value",
    "vertical",
    "axis",
    "independent",
    "variable",
    "horizontal",
    "axis",
    "similarly",
    "second",
    "sample",
    "repeat",
    "process",
    "subtracting",
    "target",
    "value",
    "predicted",
    "value",
    "plotting",
    "value",
    "accordingly",
    "looking",
    "plot",
    "gives",
    "us",
    "insight",
    "data",
    "expect",
    "see",
    "results",
    "zero",
    "mean",
    "distributed",
    "evenly",
    "around",
    "similar",
    "variance",
    "curvature",
    "type",
    "residual",
    "plot",
    "suggests",
    "linear",
    "plot",
    "appropriate",
    "residual",
    "plot",
    "curvature",
    "values",
    "error",
    "change",
    "x",
    "example",
    "region",
    "residual",
    "errors",
    "positive",
    "area",
    "residuals",
    "negative",
    "final",
    "location",
    "error",
    "large",
    "residuals",
    "randomly",
    "separated",
    "suggests",
    "linear",
    "assumption",
    "incorrect",
    "plot",
    "suggests",
    "function",
    "deal",
    "next",
    "section",
    "plot",
    "see",
    "variants",
    "residuals",
    "increases",
    "x",
    "therefore",
    "model",
    "incorrect",
    "use",
    "seaborn",
    "create",
    "residual",
    "plot",
    "first",
    "import",
    "seaborn",
    "use",
    "resid",
    "plot",
    "function",
    "first",
    "parameter",
    "series",
    "dependent",
    "variable",
    "feature",
    "second",
    "parameter",
    "series",
    "dependent",
    "variable",
    "target",
    "see",
    "case",
    "residuals",
    "curvature",
    "distribution",
    "plot",
    "counts",
    "predicted",
    "value",
    "versus",
    "actual",
    "value",
    "plots",
    "extremely",
    "useful",
    "visualizing",
    "models",
    "one",
    "independent",
    "variable",
    "feature",
    "let",
    "look",
    "simplified",
    "example",
    "examine",
    "vertical",
    "axis",
    "count",
    "plot",
    "number",
    "predicted",
    "points",
    "approximately",
    "equal",
    "one",
    "count",
    "plot",
    "number",
    "predicted",
    "points",
    "approximately",
    "equal",
    "two",
    "repeat",
    "process",
    "predicted",
    "points",
    "approximately",
    "equal",
    "repeat",
    "process",
    "target",
    "values",
    "case",
    "target",
    "values",
    "approximately",
    "equal",
    "values",
    "targets",
    "predicted",
    "values",
    "continuous",
    "histogram",
    "discrete",
    "values",
    "therefore",
    "pandas",
    "convert",
    "distribution",
    "vertical",
    "axis",
    "scaled",
    "make",
    "area",
    "distribution",
    "equal",
    "one",
    "example",
    "using",
    "distribution",
    "plot",
    "dependent",
    "variable",
    "feature",
    "price",
    "fitted",
    "values",
    "result",
    "model",
    "blue",
    "actual",
    "values",
    "red",
    "see",
    "predicted",
    "values",
    "prices",
    "range",
    "forty",
    "thousand",
    "fifty",
    "thousand",
    "inaccurate",
    "prices",
    "region",
    "10",
    "000",
    "20",
    "000",
    "much",
    "closer",
    "target",
    "value",
    "example",
    "use",
    "multiple",
    "features",
    "independent",
    "variables",
    "comparing",
    "plot",
    "last",
    "slide",
    "see",
    "predicted",
    "values",
    "much",
    "closer",
    "target",
    "values",
    "code",
    "create",
    "distribution",
    "plot",
    "actual",
    "values",
    "used",
    "parameter",
    "want",
    "distribution",
    "instead",
    "histogram",
    "want",
    "hist",
    "parameter",
    "set",
    "false",
    "color",
    "red",
    "label",
    "also",
    "included",
    "predicted",
    "values",
    "included",
    "second",
    "plot",
    "rest",
    "parameters",
    "set",
    "accordingly",
    "music",
    "video",
    "cover",
    "polynomial",
    "regression",
    "pipelines",
    "linear",
    "model",
    "best",
    "fit",
    "data",
    "let",
    "look",
    "another",
    "type",
    "regression",
    "model",
    "polynomial",
    "regression",
    "transform",
    "data",
    "polynomial",
    "use",
    "linear",
    "regression",
    "fit",
    "parameter",
    "discuss",
    "pipelines",
    "pipelines",
    "way",
    "simplify",
    "code",
    "polynomial",
    "regression",
    "special",
    "case",
    "general",
    "linear",
    "regression",
    "method",
    "beneficial",
    "describing",
    "curvilinear",
    "relationships",
    "curvilinear",
    "relationship",
    "get",
    "squaring",
    "setting",
    "higher",
    "order",
    "terms",
    "predictor",
    "variables",
    "model",
    "transforming",
    "data",
    "model",
    "quadratic",
    "means",
    "predictor",
    "variable",
    "model",
    "squared",
    "use",
    "bracket",
    "indicate",
    "exponent",
    "second",
    "order",
    "polynomial",
    "regression",
    "figure",
    "representing",
    "function",
    "model",
    "cubic",
    "means",
    "predictor",
    "variable",
    "cubed",
    "third",
    "order",
    "polynomial",
    "regression",
    "see",
    "examining",
    "figure",
    "function",
    "variation",
    "also",
    "exists",
    "higher",
    "order",
    "polynomial",
    "regressions",
    "good",
    "fit",
    "achieved",
    "second",
    "third",
    "order",
    "see",
    "figures",
    "much",
    "graphs",
    "change",
    "change",
    "order",
    "polynomial",
    "regression",
    "degree",
    "regression",
    "makes",
    "big",
    "difference",
    "result",
    "better",
    "fit",
    "pick",
    "right",
    "value",
    "cases",
    "relationship",
    "variable",
    "parameter",
    "always",
    "linear",
    "let",
    "look",
    "example",
    "data",
    "generate",
    "polynomial",
    "regression",
    "model",
    "python",
    "using",
    "polyfit",
    "function",
    "example",
    "develop",
    "third",
    "order",
    "polynomial",
    "regression",
    "model",
    "base",
    "print",
    "model",
    "symbolic",
    "form",
    "model",
    "given",
    "following",
    "expression",
    "negative",
    "x",
    "1",
    "cubed",
    "plus",
    "x1",
    "squared",
    "plus",
    "8965",
    "x1",
    "plus",
    "times",
    "10",
    "power",
    "also",
    "polynomial",
    "linear",
    "regression",
    "expression",
    "get",
    "complicated",
    "terms",
    "polynomial",
    "numpy",
    "polyfit",
    "function",
    "perform",
    "type",
    "regression",
    "use",
    "library",
    "scikit",
    "learn",
    "create",
    "polynomial",
    "feature",
    "object",
    "constructor",
    "takes",
    "degree",
    "polynomial",
    "parameter",
    "transform",
    "features",
    "polynomial",
    "feature",
    "fit",
    "underscore",
    "transform",
    "method",
    "let",
    "intuitive",
    "example",
    "consider",
    "features",
    "shown",
    "applying",
    "method",
    "transform",
    "data",
    "new",
    "set",
    "features",
    "transformed",
    "version",
    "original",
    "features",
    "dimension",
    "data",
    "gets",
    "larger",
    "may",
    "want",
    "normalize",
    "multiple",
    "features",
    "inside",
    "kit",
    "learn",
    "instead",
    "use",
    "module",
    "simplify",
    "many",
    "tasks",
    "example",
    "standardize",
    "feature",
    "simultaneously",
    "import",
    "standard",
    "scalar",
    "train",
    "object",
    "fit",
    "scale",
    "object",
    "transform",
    "data",
    "new",
    "data",
    "frame",
    "array",
    "x",
    "underscore",
    "scale",
    "normalization",
    "methods",
    "available",
    "library",
    "well",
    "transformations",
    "simplify",
    "code",
    "using",
    "pipeline",
    "library",
    "many",
    "steps",
    "getting",
    "prediction",
    "example",
    "normalization",
    "polynomial",
    "transform",
    "linear",
    "regression",
    "simplify",
    "process",
    "using",
    "pipeline",
    "pipelines",
    "sequentially",
    "perform",
    "series",
    "transformations",
    "last",
    "step",
    "carries",
    "prediction",
    "first",
    "import",
    "modules",
    "need",
    "import",
    "library",
    "pipeline",
    "create",
    "list",
    "tuples",
    "first",
    "element",
    "tuple",
    "contains",
    "name",
    "estimator",
    "model",
    "second",
    "element",
    "contains",
    "model",
    "constructor",
    "input",
    "list",
    "pipeline",
    "constructor",
    "pipeline",
    "object",
    "train",
    "pipeline",
    "applying",
    "train",
    "method",
    "pipeline",
    "object",
    "also",
    "produce",
    "prediction",
    "well",
    "method",
    "normalizes",
    "data",
    "performs",
    "polynomial",
    "transform",
    "outputs",
    "prediction",
    "foreign",
    "seen",
    "evaluate",
    "model",
    "using",
    "visualization",
    "want",
    "numerically",
    "evaluate",
    "models",
    "let",
    "look",
    "measures",
    "use",
    "evaluation",
    "measures",
    "way",
    "numerically",
    "determine",
    "good",
    "model",
    "fits",
    "data",
    "two",
    "important",
    "measures",
    "often",
    "use",
    "determine",
    "fit",
    "model",
    "r",
    "mean",
    "square",
    "error",
    "mse",
    "r",
    "squared",
    "measure",
    "mse",
    "find",
    "difference",
    "actual",
    "value",
    "predicted",
    "value",
    "hat",
    "square",
    "case",
    "actual",
    "value",
    "predicted",
    "value",
    "subtracting",
    "points",
    "get",
    "square",
    "number",
    "take",
    "mean",
    "average",
    "errors",
    "adding",
    "together",
    "dividing",
    "number",
    "samples",
    "find",
    "mse",
    "python",
    "import",
    "mean",
    "underscore",
    "squared",
    "underscore",
    "error",
    "scikit",
    "learn",
    "metrics",
    "mean",
    "underscore",
    "squared",
    "underscore",
    "error",
    "function",
    "gets",
    "two",
    "inputs",
    "actual",
    "value",
    "target",
    "variable",
    "predicted",
    "value",
    "target",
    "variable",
    "r",
    "squared",
    "also",
    "called",
    "coefficient",
    "determination",
    "measure",
    "determine",
    "close",
    "data",
    "fitted",
    "regression",
    "line",
    "close",
    "actual",
    "data",
    "estimated",
    "model",
    "think",
    "comparing",
    "regression",
    "model",
    "simple",
    "model",
    "mean",
    "data",
    "points",
    "variable",
    "x",
    "good",
    "predictor",
    "model",
    "perform",
    "much",
    "better",
    "mean",
    "example",
    "average",
    "data",
    "points",
    "bar",
    "coefficient",
    "determination",
    "r",
    "squared",
    "1",
    "minus",
    "ratio",
    "mse",
    "regression",
    "lined",
    "divided",
    "mse",
    "average",
    "data",
    "points",
    "part",
    "takes",
    "values",
    "0",
    "let",
    "look",
    "case",
    "line",
    "provides",
    "relatively",
    "good",
    "fit",
    "blue",
    "line",
    "represents",
    "regression",
    "line",
    "blue",
    "squares",
    "represent",
    "mse",
    "regression",
    "line",
    "red",
    "line",
    "represents",
    "average",
    "value",
    "data",
    "points",
    "red",
    "squares",
    "represent",
    "mse",
    "red",
    "line",
    "see",
    "area",
    "blue",
    "squares",
    "much",
    "smaller",
    "area",
    "red",
    "squares",
    "case",
    "line",
    "good",
    "fit",
    "mean",
    "squared",
    "error",
    "small",
    "therefore",
    "numerator",
    "small",
    "mean",
    "squared",
    "error",
    "line",
    "relatively",
    "large",
    "numerator",
    "large",
    "small",
    "number",
    "divided",
    "larger",
    "number",
    "even",
    "smaller",
    "number",
    "taken",
    "extreme",
    "value",
    "tends",
    "zero",
    "plug",
    "value",
    "previous",
    "slide",
    "r",
    "squared",
    "get",
    "value",
    "near",
    "means",
    "line",
    "good",
    "fit",
    "data",
    "example",
    "line",
    "fit",
    "data",
    "well",
    "examine",
    "area",
    "red",
    "squares",
    "compared",
    "blue",
    "squares",
    "see",
    "area",
    "almost",
    "identical",
    "ratio",
    "areas",
    "close",
    "case",
    "r",
    "squared",
    "near",
    "zero",
    "line",
    "performs",
    "using",
    "average",
    "data",
    "points",
    "therefore",
    "line",
    "perform",
    "well",
    "find",
    "r",
    "squared",
    "value",
    "python",
    "using",
    "score",
    "method",
    "linear",
    "regression",
    "object",
    "value",
    "get",
    "example",
    "say",
    "approximately",
    "percent",
    "variation",
    "price",
    "explained",
    "simple",
    "linear",
    "model",
    "r",
    "squared",
    "value",
    "usually",
    "0",
    "r",
    "squared",
    "negative",
    "could",
    "due",
    "overfitting",
    "discuss",
    "next",
    "module",
    "music",
    "thank",
    "video",
    "final",
    "topic",
    "prediction",
    "decision",
    "making",
    "determine",
    "model",
    "correct",
    "first",
    "thing",
    "make",
    "sure",
    "model",
    "results",
    "make",
    "sense",
    "always",
    "use",
    "visualization",
    "numerical",
    "measures",
    "evaluation",
    "comparing",
    "different",
    "models",
    "let",
    "look",
    "example",
    "prediction",
    "recall",
    "train",
    "model",
    "using",
    "fit",
    "method",
    "want",
    "find",
    "price",
    "would",
    "car",
    "highway",
    "miles",
    "per",
    "gallon",
    "plugging",
    "value",
    "predict",
    "method",
    "gives",
    "us",
    "resulting",
    "price",
    "13",
    "seems",
    "make",
    "sense",
    "example",
    "value",
    "negative",
    "extremely",
    "high",
    "extremely",
    "low",
    "look",
    "coefficients",
    "examining",
    "underscore",
    "attribute",
    "recall",
    "expression",
    "simple",
    "linear",
    "model",
    "predicts",
    "price",
    "highway",
    "miles",
    "per",
    "gallon",
    "value",
    "corresponds",
    "multiple",
    "highway",
    "miles",
    "per",
    "gallon",
    "feature",
    "increase",
    "one",
    "unit",
    "highway",
    "miles",
    "per",
    "gallon",
    "value",
    "car",
    "decreases",
    "approximately",
    "821",
    "dollars",
    "value",
    "also",
    "seems",
    "reasonable",
    "sometimes",
    "model",
    "produce",
    "values",
    "make",
    "sense",
    "example",
    "plot",
    "model",
    "highway",
    "miles",
    "per",
    "gallon",
    "ranges",
    "zero",
    "one",
    "hundred",
    "get",
    "negative",
    "values",
    "price",
    "could",
    "values",
    "range",
    "realistic",
    "linear",
    "assumption",
    "incorrect",
    "data",
    "cars",
    "range",
    "case",
    "unlikely",
    "car",
    "fuel",
    "mileage",
    "range",
    "model",
    "seems",
    "valid",
    "generate",
    "sequence",
    "values",
    "specified",
    "range",
    "import",
    "numpy",
    "use",
    "numpy",
    "arrange",
    "function",
    "generate",
    "sequence",
    "sequence",
    "starts",
    "1",
    "increments",
    "1",
    "till",
    "reach",
    "first",
    "parameter",
    "starting",
    "point",
    "sequence",
    "second",
    "parameter",
    "endpoint",
    "plus",
    "one",
    "sequence",
    "final",
    "parameter",
    "step",
    "size",
    "elements",
    "sequence",
    "case",
    "one",
    "increment",
    "sequence",
    "one",
    "step",
    "time",
    "one",
    "two",
    "use",
    "output",
    "predict",
    "new",
    "values",
    "output",
    "numpy",
    "array",
    "many",
    "values",
    "negative",
    "using",
    "regression",
    "plot",
    "visualize",
    "data",
    "first",
    "method",
    "try",
    "see",
    "labs",
    "examples",
    "plot",
    "polynomial",
    "regression",
    "example",
    "effect",
    "independent",
    "variable",
    "evident",
    "case",
    "data",
    "trends",
    "dependent",
    "variable",
    "increases",
    "plot",
    "also",
    "shows",
    "behavior",
    "examining",
    "residual",
    "plot",
    "see",
    "case",
    "residuals",
    "curvature",
    "suggesting",
    "behavior",
    "distribution",
    "plot",
    "good",
    "method",
    "multiple",
    "linear",
    "regression",
    "example",
    "see",
    "predicted",
    "values",
    "prices",
    "range",
    "thirty",
    "thousand",
    "fifty",
    "thousand",
    "inaccurate",
    "suggests",
    "model",
    "may",
    "suitable",
    "need",
    "data",
    "range",
    "mean",
    "square",
    "error",
    "perhaps",
    "intuitive",
    "numerical",
    "measure",
    "determining",
    "model",
    "good",
    "let",
    "see",
    "different",
    "measures",
    "mean",
    "square",
    "error",
    "impact",
    "model",
    "figure",
    "shows",
    "example",
    "mean",
    "square",
    "error",
    "example",
    "mean",
    "square",
    "error",
    "final",
    "plot",
    "mean",
    "square",
    "error",
    "twelve",
    "thousand",
    "eight",
    "hundred",
    "seventy",
    "square",
    "error",
    "increases",
    "targets",
    "get",
    "predicted",
    "points",
    "discussed",
    "r",
    "squared",
    "another",
    "popular",
    "method",
    "evaluate",
    "model",
    "tells",
    "well",
    "line",
    "fits",
    "model",
    "values",
    "range",
    "zero",
    "one",
    "r",
    "squared",
    "tells",
    "us",
    "percent",
    "variability",
    "dependent",
    "variable",
    "accounted",
    "regression",
    "independent",
    "variable",
    "r",
    "squared",
    "1",
    "means",
    "movements",
    "another",
    "dependent",
    "variable",
    "completely",
    "explained",
    "movements",
    "independent",
    "variables",
    "plot",
    "see",
    "target",
    "points",
    "red",
    "predicted",
    "line",
    "blue",
    "r",
    "squared",
    "model",
    "appears",
    "good",
    "fit",
    "means",
    "99",
    "percent",
    "variability",
    "predicted",
    "variable",
    "explained",
    "independent",
    "variables",
    "model",
    "r",
    "squared",
    "still",
    "strong",
    "linear",
    "relationship",
    "model",
    "still",
    "good",
    "fit",
    "r",
    "squared",
    "0806",
    "data",
    "visually",
    "see",
    "values",
    "scattered",
    "around",
    "line",
    "still",
    "close",
    "line",
    "say",
    "80",
    "percent",
    "variability",
    "predicted",
    "variable",
    "explained",
    "independent",
    "variables",
    "r",
    "squared",
    "means",
    "approximately",
    "61",
    "percent",
    "observed",
    "variation",
    "explained",
    "independent",
    "variables",
    "acceptable",
    "value",
    "r",
    "squared",
    "depends",
    "field",
    "studying",
    "use",
    "case",
    "falcon",
    "miller",
    "1992",
    "suggests",
    "acceptable",
    "r",
    "squared",
    "value",
    "least",
    "lower",
    "mean",
    "square",
    "error",
    "imply",
    "better",
    "fit",
    "necessarily",
    "mse4",
    "mlr",
    "model",
    "smaller",
    "mse",
    "slr",
    "model",
    "since",
    "errors",
    "data",
    "decrease",
    "variables",
    "included",
    "model",
    "polynomial",
    "regression",
    "also",
    "smaller",
    "mse",
    "regular",
    "regression",
    "next",
    "section",
    "look",
    "accurate",
    "ways",
    "evaluate",
    "model",
    "music",
    "evaluation",
    "tells",
    "us",
    "model",
    "performs",
    "real",
    "world",
    "previous",
    "module",
    "talked",
    "sample",
    "evaluation",
    "sample",
    "evaluation",
    "tells",
    "us",
    "well",
    "model",
    "fits",
    "data",
    "already",
    "given",
    "train",
    "give",
    "us",
    "estimate",
    "well",
    "train",
    "model",
    "predict",
    "new",
    "data",
    "solution",
    "split",
    "data",
    "use",
    "data",
    "training",
    "data",
    "train",
    "model",
    "rest",
    "data",
    "called",
    "test",
    "data",
    "used",
    "data",
    "data",
    "used",
    "approximate",
    "model",
    "performs",
    "real",
    "world",
    "separating",
    "data",
    "training",
    "testing",
    "sets",
    "important",
    "part",
    "model",
    "evaluation",
    "use",
    "test",
    "data",
    "get",
    "idea",
    "model",
    "perform",
    "real",
    "world",
    "split",
    "data",
    "set",
    "usually",
    "larger",
    "portion",
    "data",
    "used",
    "training",
    "smaller",
    "part",
    "used",
    "testing",
    "example",
    "use",
    "seventy",
    "percent",
    "data",
    "training",
    "use",
    "30",
    "testing",
    "use",
    "training",
    "set",
    "build",
    "model",
    "discover",
    "predictive",
    "relationships",
    "use",
    "testing",
    "set",
    "evaluate",
    "model",
    "performance",
    "completed",
    "testing",
    "model",
    "use",
    "data",
    "train",
    "model",
    "popular",
    "function",
    "sci",
    "kit",
    "learn",
    "package",
    "splitting",
    "data",
    "sets",
    "train",
    "test",
    "split",
    "function",
    "function",
    "randomly",
    "splits",
    "data",
    "set",
    "training",
    "testing",
    "subsets",
    "example",
    "code",
    "snippet",
    "method",
    "imported",
    "validation",
    "input",
    "parameters",
    "underscore",
    "data",
    "target",
    "variable",
    "car",
    "appraisal",
    "example",
    "would",
    "price",
    "x",
    "underscore",
    "data",
    "list",
    "predictor",
    "variables",
    "case",
    "would",
    "variables",
    "car",
    "data",
    "set",
    "using",
    "try",
    "predict",
    "price",
    "output",
    "array",
    "x",
    "underscore",
    "train",
    "underscore",
    "train",
    "subsets",
    "training",
    "x",
    "underscore",
    "test",
    "underscore",
    "test",
    "subsets",
    "testing",
    "case",
    "test",
    "size",
    "percentage",
    "data",
    "testing",
    "set",
    "30",
    "percent",
    "random",
    "state",
    "random",
    "seed",
    "random",
    "data",
    "set",
    "splitting",
    "generalization",
    "error",
    "measure",
    "well",
    "data",
    "predicting",
    "previously",
    "unseen",
    "data",
    "error",
    "obtain",
    "using",
    "testing",
    "data",
    "approximation",
    "error",
    "figure",
    "shows",
    "distribution",
    "actual",
    "values",
    "red",
    "compared",
    "predicted",
    "values",
    "linear",
    "regression",
    "blue",
    "see",
    "distributions",
    "somewhat",
    "similar",
    "generate",
    "plot",
    "using",
    "test",
    "data",
    "see",
    "distributions",
    "relatively",
    "different",
    "difference",
    "due",
    "generalization",
    "error",
    "represents",
    "see",
    "real",
    "world",
    "using",
    "lot",
    "data",
    "training",
    "gives",
    "us",
    "accurate",
    "means",
    "determining",
    "well",
    "model",
    "perform",
    "real",
    "world",
    "precision",
    "performance",
    "low",
    "let",
    "clarify",
    "example",
    "center",
    "bullseye",
    "represents",
    "correct",
    "generalization",
    "error",
    "let",
    "say",
    "take",
    "random",
    "sample",
    "data",
    "using",
    "ninety",
    "percent",
    "data",
    "training",
    "10",
    "percent",
    "testing",
    "first",
    "time",
    "experiment",
    "get",
    "good",
    "estimate",
    "training",
    "data",
    "experiment",
    "training",
    "model",
    "different",
    "combination",
    "samples",
    "also",
    "get",
    "good",
    "result",
    "results",
    "different",
    "relative",
    "first",
    "time",
    "run",
    "experiment",
    "repeating",
    "experiment",
    "different",
    "combination",
    "training",
    "testing",
    "samples",
    "results",
    "relatively",
    "close",
    "generalization",
    "error",
    "distinct",
    "repeating",
    "process",
    "get",
    "good",
    "approximation",
    "generalization",
    "error",
    "precision",
    "poor",
    "results",
    "extremely",
    "different",
    "one",
    "another",
    "use",
    "fewer",
    "data",
    "points",
    "train",
    "model",
    "test",
    "bottle",
    "accuracy",
    "generalization",
    "performance",
    "less",
    "model",
    "good",
    "precision",
    "figure",
    "demonstrates",
    "error",
    "estimates",
    "relatively",
    "close",
    "together",
    "away",
    "true",
    "generalization",
    "performance",
    "overcome",
    "problem",
    "use",
    "one",
    "common",
    "evaluation",
    "metrics",
    "method",
    "data",
    "set",
    "split",
    "k",
    "equal",
    "groups",
    "group",
    "referred",
    "fold",
    "example",
    "four",
    "folds",
    "folds",
    "used",
    "training",
    "set",
    "use",
    "train",
    "model",
    "remaining",
    "parts",
    "used",
    "test",
    "set",
    "use",
    "test",
    "model",
    "example",
    "use",
    "three",
    "folds",
    "training",
    "use",
    "one",
    "fold",
    "testing",
    "repeated",
    "partition",
    "used",
    "training",
    "testing",
    "end",
    "use",
    "average",
    "results",
    "estimate",
    "error",
    "evaluation",
    "metric",
    "depends",
    "model",
    "example",
    "r",
    "squared",
    "simplest",
    "way",
    "apply",
    "cross",
    "validation",
    "call",
    "cross",
    "underscore",
    "val",
    "underscore",
    "score",
    "function",
    "performs",
    "multiple",
    "evaluations",
    "method",
    "imported",
    "sklearn",
    "model",
    "selection",
    "package",
    "use",
    "function",
    "cross",
    "underscore",
    "val",
    "underscore",
    "score",
    "first",
    "input",
    "parameter",
    "type",
    "model",
    "using",
    "cross",
    "validation",
    "example",
    "initialize",
    "linear",
    "regression",
    "model",
    "object",
    "lr",
    "passed",
    "cross",
    "underscore",
    "val",
    "underscore",
    "score",
    "function",
    "parameters",
    "x",
    "underscore",
    "data",
    "predictor",
    "variable",
    "data",
    "underscore",
    "data",
    "target",
    "variable",
    "data",
    "manage",
    "number",
    "partitions",
    "cv",
    "parameter",
    "cv",
    "equals",
    "3",
    "means",
    "data",
    "set",
    "split",
    "three",
    "equal",
    "partitions",
    "function",
    "returns",
    "array",
    "scores",
    "one",
    "partition",
    "chosen",
    "testing",
    "set",
    "average",
    "result",
    "together",
    "estimate",
    "sample",
    "r",
    "squared",
    "using",
    "mean",
    "function",
    "numpy",
    "let",
    "see",
    "animation",
    "let",
    "see",
    "result",
    "score",
    "array",
    "last",
    "slide",
    "first",
    "split",
    "data",
    "three",
    "folds",
    "use",
    "two",
    "folds",
    "training",
    "remaining",
    "fold",
    "testing",
    "model",
    "produce",
    "output",
    "use",
    "output",
    "calculate",
    "score",
    "case",
    "r",
    "squared",
    "ie",
    "coefficient",
    "determination",
    "store",
    "value",
    "array",
    "repeat",
    "process",
    "using",
    "two",
    "folds",
    "training",
    "one",
    "fold",
    "testing",
    "save",
    "score",
    "use",
    "different",
    "combination",
    "training",
    "remaining",
    "fold",
    "testing",
    "store",
    "final",
    "result",
    "cross",
    "valve",
    "score",
    "function",
    "returns",
    "score",
    "value",
    "tell",
    "us",
    "cross",
    "validation",
    "result",
    "want",
    "little",
    "information",
    "want",
    "know",
    "actual",
    "predicted",
    "values",
    "supplied",
    "model",
    "r",
    "squared",
    "values",
    "calculated",
    "use",
    "cross",
    "underscore",
    "val",
    "underscore",
    "predict",
    "function",
    "input",
    "parameters",
    "exactly",
    "cross",
    "file",
    "underscore",
    "score",
    "function",
    "output",
    "prediction",
    "let",
    "illustrate",
    "process",
    "first",
    "split",
    "data",
    "three",
    "folds",
    "use",
    "two",
    "folds",
    "training",
    "remaining",
    "fold",
    "testing",
    "model",
    "produce",
    "output",
    "store",
    "array",
    "repeat",
    "process",
    "using",
    "two",
    "folds",
    "training",
    "one",
    "testing",
    "model",
    "produces",
    "output",
    "finally",
    "use",
    "last",
    "two",
    "folds",
    "training",
    "use",
    "testing",
    "data",
    "final",
    "testing",
    "fold",
    "produces",
    "output",
    "predictions",
    "stored",
    "array",
    "music",
    "recall",
    "last",
    "module",
    "discussed",
    "polynomial",
    "regression",
    "section",
    "discuss",
    "pick",
    "best",
    "polynomial",
    "order",
    "problems",
    "arise",
    "selecting",
    "wrong",
    "order",
    "polynomial",
    "consider",
    "following",
    "function",
    "assume",
    "training",
    "points",
    "come",
    "polynomial",
    "function",
    "plus",
    "noise",
    "goal",
    "model",
    "selection",
    "determine",
    "order",
    "polynomial",
    "provide",
    "best",
    "estimate",
    "function",
    "x",
    "try",
    "fit",
    "function",
    "linear",
    "function",
    "line",
    "complex",
    "enough",
    "fit",
    "data",
    "result",
    "many",
    "errors",
    "called",
    "underfitting",
    "model",
    "simple",
    "fit",
    "data",
    "increase",
    "order",
    "polynomial",
    "model",
    "fits",
    "better",
    "model",
    "still",
    "flexible",
    "enough",
    "exhibits",
    "underfitting",
    "example",
    "eighth",
    "order",
    "polynomial",
    "used",
    "fit",
    "data",
    "see",
    "model",
    "well",
    "fitting",
    "data",
    "estimating",
    "function",
    "even",
    "inflection",
    "points",
    "increasing",
    "16th",
    "order",
    "polynomial",
    "model",
    "extremely",
    "well",
    "tracking",
    "training",
    "point",
    "performs",
    "poorly",
    "estimating",
    "function",
    "especially",
    "apparent",
    "little",
    "training",
    "data",
    "estimated",
    "function",
    "oscillates",
    "tracking",
    "function",
    "called",
    "overfitting",
    "model",
    "flexible",
    "fits",
    "noise",
    "rather",
    "function",
    "let",
    "look",
    "plot",
    "mean",
    "square",
    "error",
    "training",
    "testing",
    "set",
    "different",
    "order",
    "polynomials",
    "horizontal",
    "axis",
    "represents",
    "order",
    "polynomial",
    "vertical",
    "axis",
    "mean",
    "square",
    "error",
    "training",
    "error",
    "decreases",
    "order",
    "polynomial",
    "test",
    "error",
    "better",
    "means",
    "estimating",
    "error",
    "polynomial",
    "error",
    "decreases",
    "till",
    "best",
    "order",
    "polynomial",
    "determined",
    "error",
    "begins",
    "increase",
    "select",
    "order",
    "minimizes",
    "test",
    "error",
    "case",
    "anything",
    "left",
    "would",
    "considered",
    "underfitting",
    "anything",
    "right",
    "overfitting",
    "select",
    "best",
    "order",
    "polynomial",
    "still",
    "errors",
    "recall",
    "original",
    "expression",
    "training",
    "points",
    "see",
    "noise",
    "term",
    "term",
    "one",
    "reason",
    "error",
    "noise",
    "random",
    "ca",
    "predict",
    "sometimes",
    "referred",
    "irreducible",
    "error",
    "sources",
    "errors",
    "well",
    "example",
    "polynomial",
    "assumption",
    "may",
    "wrong",
    "sample",
    "points",
    "may",
    "come",
    "different",
    "function",
    "example",
    "plot",
    "data",
    "generated",
    "sine",
    "wave",
    "polynomial",
    "function",
    "good",
    "job",
    "fitting",
    "sine",
    "wave",
    "real",
    "data",
    "model",
    "may",
    "difficult",
    "fit",
    "may",
    "correct",
    "type",
    "data",
    "estimate",
    "function",
    "let",
    "try",
    "different",
    "order",
    "polynomials",
    "real",
    "data",
    "using",
    "horsepower",
    "red",
    "points",
    "represent",
    "training",
    "data",
    "green",
    "points",
    "represent",
    "test",
    "data",
    "use",
    "mean",
    "data",
    "model",
    "perform",
    "well",
    "linear",
    "function",
    "fit",
    "data",
    "better",
    "second",
    "order",
    "model",
    "looks",
    "similar",
    "linear",
    "function",
    "third",
    "order",
    "function",
    "also",
    "appears",
    "increase",
    "like",
    "previous",
    "two",
    "orders",
    "see",
    "fourth",
    "order",
    "polynomial",
    "around",
    "200",
    "horsepower",
    "predicted",
    "price",
    "suddenly",
    "decreases",
    "seems",
    "erroneous",
    "let",
    "use",
    "r",
    "squared",
    "see",
    "assumption",
    "correct",
    "following",
    "plot",
    "r",
    "squared",
    "value",
    "horizontal",
    "axis",
    "represents",
    "order",
    "polynomial",
    "models",
    "closer",
    "r",
    "squared",
    "1",
    "accurate",
    "model",
    "see",
    "r",
    "squared",
    "optimal",
    "order",
    "polynomial",
    "three",
    "r",
    "squared",
    "drastically",
    "decreases",
    "order",
    "increased",
    "four",
    "validating",
    "initial",
    "assumption",
    "calculate",
    "different",
    "r",
    "squared",
    "values",
    "follows",
    "first",
    "create",
    "empty",
    "list",
    "store",
    "values",
    "create",
    "list",
    "containing",
    "different",
    "polynomial",
    "orders",
    "iterate",
    "list",
    "using",
    "loop",
    "create",
    "polynomial",
    "feature",
    "object",
    "order",
    "polynomial",
    "parameter",
    "transform",
    "training",
    "test",
    "data",
    "polynomial",
    "using",
    "fit",
    "transform",
    "method",
    "fit",
    "regression",
    "model",
    "using",
    "transform",
    "data",
    "calculate",
    "r",
    "squared",
    "using",
    "test",
    "data",
    "store",
    "array",
    "music",
    "video",
    "discuss",
    "ridge",
    "regression",
    "rich",
    "regression",
    "prevents",
    "overfitting",
    "video",
    "focus",
    "polynomial",
    "regression",
    "visualization",
    "overfitting",
    "also",
    "big",
    "problem",
    "multiple",
    "independent",
    "variables",
    "features",
    "consider",
    "following",
    "fourth",
    "order",
    "polynomial",
    "orange",
    "blue",
    "points",
    "generated",
    "function",
    "use",
    "10th",
    "order",
    "polynomial",
    "fit",
    "data",
    "estimated",
    "function",
    "blue",
    "good",
    "job",
    "approximating",
    "true",
    "function",
    "many",
    "cases",
    "real",
    "data",
    "outliers",
    "example",
    "point",
    "shown",
    "appear",
    "come",
    "function",
    "orange",
    "use",
    "10th",
    "order",
    "polynomial",
    "function",
    "fit",
    "data",
    "estimated",
    "function",
    "blue",
    "incorrect",
    "good",
    "estimate",
    "actual",
    "function",
    "orange",
    "examine",
    "expression",
    "estimated",
    "function",
    "see",
    "estimated",
    "polynomial",
    "coefficients",
    "large",
    "magnitude",
    "especially",
    "evident",
    "higher",
    "order",
    "polynomials",
    "rich",
    "regression",
    "controls",
    "magnitude",
    "polynomial",
    "coefficients",
    "introducing",
    "parameter",
    "alpha",
    "alpha",
    "parameter",
    "select",
    "fitting",
    "training",
    "model",
    "row",
    "following",
    "table",
    "represents",
    "increasing",
    "value",
    "alpha",
    "let",
    "see",
    "different",
    "values",
    "alpha",
    "change",
    "model",
    "table",
    "represents",
    "polynomial",
    "coefficients",
    "different",
    "values",
    "alpha",
    "column",
    "corresponds",
    "different",
    "polynomial",
    "coefficients",
    "rows",
    "correspond",
    "different",
    "values",
    "alpha",
    "alpha",
    "increases",
    "parameters",
    "get",
    "smaller",
    "evident",
    "higher",
    "order",
    "polynomial",
    "features",
    "alpha",
    "must",
    "selected",
    "carefully",
    "alpha",
    "large",
    "coefficients",
    "approach",
    "0",
    "underfit",
    "data",
    "alpha",
    "zero",
    "overfitting",
    "evident",
    "alpha",
    "equal",
    "overfitting",
    "begins",
    "subside",
    "alpha",
    "equal",
    "estimated",
    "function",
    "tracks",
    "actual",
    "function",
    "alpha",
    "equals",
    "1",
    "see",
    "first",
    "signs",
    "underfitting",
    "estimated",
    "function",
    "enough",
    "flexibility",
    "alpha",
    "equals",
    "10",
    "see",
    "extreme",
    "underfitting",
    "even",
    "track",
    "two",
    "points",
    "order",
    "select",
    "alpha",
    "use",
    "cross",
    "validation",
    "make",
    "prediction",
    "using",
    "ridge",
    "regression",
    "import",
    "ridge",
    "sk",
    "learn",
    "linear",
    "models",
    "create",
    "ridge",
    "object",
    "using",
    "constructor",
    "parameter",
    "alpha",
    "one",
    "arguments",
    "constructor",
    "train",
    "model",
    "using",
    "fit",
    "method",
    "make",
    "prediction",
    "use",
    "predict",
    "method",
    "order",
    "determine",
    "parameter",
    "alpha",
    "use",
    "data",
    "training",
    "use",
    "second",
    "set",
    "called",
    "validation",
    "data",
    "similar",
    "test",
    "data",
    "used",
    "select",
    "parameters",
    "like",
    "alpha",
    "start",
    "small",
    "value",
    "alpha",
    "train",
    "model",
    "make",
    "prediction",
    "using",
    "validation",
    "data",
    "calculate",
    "r",
    "squared",
    "store",
    "values",
    "repeat",
    "value",
    "larger",
    "value",
    "alpha",
    "train",
    "model",
    "make",
    "prediction",
    "using",
    "validation",
    "data",
    "calculate",
    "r",
    "squared",
    "store",
    "values",
    "r",
    "squared",
    "repeat",
    "process",
    "different",
    "alpha",
    "value",
    "training",
    "model",
    "making",
    "prediction",
    "select",
    "value",
    "alpha",
    "maximizes",
    "r",
    "squared",
    "note",
    "use",
    "metrics",
    "select",
    "value",
    "alpha",
    "like",
    "mean",
    "squared",
    "error",
    "overfitting",
    "problem",
    "even",
    "worse",
    "lots",
    "features",
    "following",
    "plot",
    "shows",
    "different",
    "values",
    "r",
    "squared",
    "vertical",
    "axis",
    "horizontal",
    "axis",
    "represents",
    "different",
    "values",
    "alpha",
    "use",
    "several",
    "features",
    "used",
    "car",
    "data",
    "set",
    "second",
    "order",
    "polynomial",
    "function",
    "training",
    "data",
    "red",
    "validation",
    "data",
    "blue",
    "see",
    "value",
    "alpha",
    "increases",
    "value",
    "r",
    "squared",
    "increases",
    "converges",
    "approximately",
    "case",
    "select",
    "maximum",
    "value",
    "alpha",
    "running",
    "experiment",
    "higher",
    "values",
    "alpha",
    "little",
    "impact",
    "conversely",
    "alpha",
    "increases",
    "r",
    "squared",
    "test",
    "data",
    "decreases",
    "term",
    "alpha",
    "prevents",
    "overfitting",
    "may",
    "improve",
    "results",
    "unseen",
    "data",
    "model",
    "worse",
    "performance",
    "test",
    "data",
    "see",
    "lab",
    "generate",
    "plot",
    "music",
    "grid",
    "search",
    "allows",
    "us",
    "scan",
    "multiple",
    "free",
    "parameters",
    "lines",
    "code",
    "parameters",
    "like",
    "alpha",
    "term",
    "discussed",
    "previous",
    "video",
    "part",
    "fitting",
    "training",
    "process",
    "values",
    "called",
    "hyper",
    "parameters",
    "scikit",
    "learn",
    "means",
    "automatically",
    "iterating",
    "hyper",
    "parameters",
    "using",
    "method",
    "called",
    "grid",
    "search",
    "grid",
    "search",
    "takes",
    "model",
    "objects",
    "would",
    "like",
    "train",
    "different",
    "values",
    "hyper",
    "parameters",
    "calculates",
    "mean",
    "square",
    "error",
    "r",
    "squared",
    "various",
    "hyper",
    "parameter",
    "values",
    "allowing",
    "choose",
    "best",
    "values",
    "let",
    "small",
    "circles",
    "represent",
    "different",
    "hyper",
    "parameters",
    "start",
    "one",
    "value",
    "hyper",
    "parameters",
    "train",
    "model",
    "use",
    "different",
    "hyper",
    "parameters",
    "train",
    "model",
    "continue",
    "process",
    "exhausted",
    "different",
    "free",
    "parameter",
    "values",
    "model",
    "produces",
    "error",
    "select",
    "hyper",
    "parameter",
    "minimizes",
    "error",
    "select",
    "hyper",
    "parameter",
    "split",
    "data",
    "set",
    "three",
    "parts",
    "training",
    "set",
    "validation",
    "set",
    "test",
    "set",
    "train",
    "model",
    "different",
    "hyper",
    "parameters",
    "use",
    "r",
    "squared",
    "mean",
    "square",
    "error",
    "model",
    "select",
    "hyper",
    "parameter",
    "minimizes",
    "mean",
    "squared",
    "error",
    "maximizes",
    "r",
    "squared",
    "validation",
    "set",
    "finally",
    "test",
    "model",
    "performance",
    "using",
    "test",
    "data",
    "scikit",
    "learn",
    "web",
    "page",
    "object",
    "constructor",
    "parameters",
    "given",
    "noted",
    "attributes",
    "object",
    "also",
    "called",
    "parameters",
    "make",
    "distinction",
    "even",
    "though",
    "options",
    "hyper",
    "parameters",
    "per",
    "se",
    "module",
    "focus",
    "hyper",
    "parameter",
    "alpha",
    "normalization",
    "parameter",
    "value",
    "grid",
    "search",
    "python",
    "list",
    "contains",
    "python",
    "dictionary",
    "key",
    "name",
    "free",
    "parameter",
    "value",
    "dictionary",
    "different",
    "values",
    "free",
    "parameter",
    "viewed",
    "table",
    "various",
    "free",
    "parameter",
    "values",
    "also",
    "object",
    "model",
    "grid",
    "search",
    "takes",
    "scoring",
    "method",
    "case",
    "r",
    "squared",
    "number",
    "folds",
    "model",
    "object",
    "free",
    "parameter",
    "values",
    "outputs",
    "include",
    "different",
    "scores",
    "different",
    "free",
    "parameter",
    "values",
    "case",
    "r",
    "squared",
    "along",
    "free",
    "parameter",
    "values",
    "best",
    "score",
    "first",
    "import",
    "libraries",
    "need",
    "including",
    "grid",
    "search",
    "cv",
    "dictionary",
    "parameter",
    "values",
    "create",
    "ridge",
    "regression",
    "object",
    "model",
    "create",
    "grid",
    "search",
    "cv",
    "object",
    "inputs",
    "ridge",
    "regression",
    "object",
    "parameter",
    "values",
    "number",
    "folds",
    "use",
    "r",
    "squared",
    "default",
    "scoring",
    "method",
    "fit",
    "object",
    "find",
    "best",
    "values",
    "free",
    "parameters",
    "using",
    "attribute",
    "best",
    "estimator",
    "also",
    "get",
    "information",
    "like",
    "mean",
    "score",
    "validation",
    "data",
    "using",
    "attribute",
    "cv",
    "result",
    "advantages",
    "grid",
    "search",
    "quickly",
    "test",
    "multiple",
    "parameters",
    "example",
    "rich",
    "regression",
    "option",
    "normalize",
    "data",
    "see",
    "standardize",
    "see",
    "module",
    "4",
    "term",
    "alpha",
    "first",
    "element",
    "dictionary",
    "second",
    "element",
    "normalize",
    "option",
    "key",
    "name",
    "parameter",
    "value",
    "different",
    "options",
    "case",
    "either",
    "normalize",
    "data",
    "values",
    "true",
    "false",
    "respectively",
    "dictionary",
    "table",
    "grid",
    "contains",
    "two",
    "different",
    "values",
    "need",
    "ridge",
    "regression",
    "object",
    "model",
    "procedure",
    "similar",
    "except",
    "table",
    "grid",
    "different",
    "parameter",
    "values",
    "output",
    "score",
    "different",
    "combinations",
    "parameter",
    "values",
    "code",
    "also",
    "similar",
    "dictionary",
    "contains",
    "different",
    "free",
    "parameter",
    "values",
    "find",
    "best",
    "value",
    "free",
    "parameters",
    "resulting",
    "scores",
    "different",
    "free",
    "parameters",
    "stored",
    "dictionary",
    "underscore",
    "results",
    "underscore",
    "print",
    "score",
    "different",
    "free",
    "parameter",
    "values",
    "parameter",
    "values",
    "stored",
    "shown",
    "see",
    "course",
    "labs",
    "examples",
    "music",
    "hello",
    "everyone",
    "welcome",
    "data",
    "visualization",
    "python",
    "alex",
    "eccleson",
    "data",
    "scientist",
    "ibm",
    "instructor",
    "course",
    "throughout",
    "course",
    "going",
    "learn",
    "create",
    "meaningful",
    "effective",
    "aesthetically",
    "pleasing",
    "data",
    "visuals",
    "plots",
    "python",
    "using",
    "matplotlib",
    "couple",
    "libraries",
    "namely",
    "seabourn",
    "folium",
    "course",
    "consist",
    "three",
    "modules",
    "module",
    "1",
    "briefly",
    "discuss",
    "data",
    "visualization",
    "best",
    "practices",
    "keep",
    "mind",
    "creating",
    "data",
    "visuals",
    "learn",
    "matplotlid",
    "history",
    "architecture",
    "three",
    "layers",
    "form",
    "architecture",
    "also",
    "learn",
    "data",
    "set",
    "use",
    "throughout",
    "course",
    "lectures",
    "well",
    "sessions",
    "essentially",
    "working",
    "data",
    "set",
    "curated",
    "united",
    "nations",
    "immigration",
    "different",
    "countries",
    "canada",
    "1980",
    "start",
    "learning",
    "use",
    "matplotlib",
    "create",
    "plots",
    "visuals",
    "start",
    "line",
    "plots",
    "generate",
    "majority",
    "plots",
    "visualizations",
    "course",
    "using",
    "data",
    "stored",
    "pandas",
    "data",
    "frames",
    "know",
    "pandas",
    "panthers",
    "python",
    "library",
    "data",
    "manipulation",
    "analysis",
    "start",
    "building",
    "visualizations",
    "plots",
    "take",
    "brief",
    "crash",
    "course",
    "pandas",
    "learn",
    "use",
    "read",
    "data",
    "csv",
    "files",
    "like",
    "one",
    "shown",
    "called",
    "pandas",
    "data",
    "frame",
    "like",
    "one",
    "shown",
    "interested",
    "learning",
    "pandas",
    "library",
    "actually",
    "cover",
    "much",
    "detail",
    "next",
    "course",
    "specialization",
    "data",
    "analysis",
    "python",
    "make",
    "sure",
    "complete",
    "next",
    "course",
    "specialization",
    "module",
    "2",
    "continue",
    "basic",
    "data",
    "visualizations",
    "area",
    "plots",
    "histograms",
    "bar",
    "charts",
    "learn",
    "use",
    "matplotlib",
    "create",
    "even",
    "create",
    "different",
    "versions",
    "plots",
    "also",
    "cover",
    "set",
    "specialized",
    "visualizations",
    "pie",
    "charts",
    "box",
    "plots",
    "scatter",
    "plots",
    "bubble",
    "plots",
    "learn",
    "create",
    "still",
    "using",
    "matplotlib",
    "module",
    "3",
    "learn",
    "advanced",
    "visuals",
    "waffle",
    "charts",
    "provide",
    "fine",
    "grained",
    "view",
    "proportions",
    "different",
    "categories",
    "data",
    "set",
    "also",
    "learn",
    "word",
    "clouds",
    "depict",
    "word",
    "frequency",
    "importance",
    "body",
    "text",
    "also",
    "module",
    "explore",
    "another",
    "library",
    "seaborn",
    "built",
    "top",
    "matplotlib",
    "simplify",
    "process",
    "creating",
    "plots",
    "visuals",
    "get",
    "taste",
    "effectiveness",
    "creation",
    "regression",
    "plots",
    "finally",
    "module",
    "explore",
    "another",
    "library",
    "folium",
    "built",
    "primarily",
    "visualize",
    "geospatial",
    "data",
    "learn",
    "create",
    "maps",
    "different",
    "regions",
    "world",
    "superimposed",
    "markers",
    "different",
    "shapes",
    "top",
    "maps",
    "learn",
    "create",
    "chloroplath",
    "maps",
    "conclude",
    "video",
    "let",
    "stress",
    "one",
    "thing",
    "data",
    "visualization",
    "best",
    "learned",
    "exercises",
    "sessions",
    "therefore",
    "worry",
    "find",
    "videos",
    "short",
    "labs",
    "sessions",
    "thorough",
    "cover",
    "lot",
    "concepts",
    "discussed",
    "videos",
    "much",
    "detail",
    "important",
    "complete",
    "labs",
    "sessions",
    "although",
    "ungraded",
    "components",
    "course",
    "hope",
    "remember",
    "keep",
    "mind",
    "progress",
    "course",
    "completing",
    "course",
    "able",
    "use",
    "different",
    "visualization",
    "libraries",
    "python",
    "namely",
    "matplotlib",
    "seaborn",
    "folium",
    "create",
    "expressive",
    "visual",
    "representations",
    "data",
    "different",
    "purposes",
    "let",
    "get",
    "right",
    "hello",
    "everyone",
    "welcome",
    "first",
    "module",
    "data",
    "visualization",
    "python",
    "course",
    "video",
    "going",
    "introduce",
    "data",
    "visualization",
    "go",
    "example",
    "transforming",
    "given",
    "visual",
    "one",
    "effective",
    "attractive",
    "impactive",
    "let",
    "get",
    "started",
    "one",
    "might",
    "ask",
    "would",
    "need",
    "learn",
    "visualize",
    "data",
    "well",
    "data",
    "visualization",
    "way",
    "show",
    "complex",
    "data",
    "form",
    "graphical",
    "easy",
    "understand",
    "especially",
    "useful",
    "one",
    "trying",
    "explore",
    "data",
    "getting",
    "acquainted",
    "also",
    "since",
    "picture",
    "worth",
    "thousand",
    "words",
    "plots",
    "graphs",
    "effective",
    "conveying",
    "clear",
    "description",
    "data",
    "especially",
    "disclosing",
    "findings",
    "audience",
    "sharing",
    "data",
    "peer",
    "data",
    "scientists",
    "also",
    "valuable",
    "comes",
    "supporting",
    "recommendations",
    "make",
    "clients",
    "managers",
    "decision",
    "makers",
    "field",
    "darkhorse",
    "analytics",
    "company",
    "spun",
    "research",
    "lab",
    "university",
    "alberta",
    "2008",
    "done",
    "fascinating",
    "work",
    "data",
    "visualization",
    "dark",
    "horse",
    "analytics",
    "specialize",
    "quantitative",
    "consulting",
    "several",
    "areas",
    "including",
    "data",
    "visualization",
    "geospatial",
    "analysis",
    "approach",
    "creating",
    "visual",
    "revolves",
    "around",
    "three",
    "key",
    "points",
    "less",
    "effective",
    "attractive",
    "impactive",
    "words",
    "feature",
    "design",
    "incorporate",
    "plot",
    "make",
    "attractive",
    "pleasing",
    "support",
    "message",
    "plot",
    "meant",
    "get",
    "across",
    "distract",
    "let",
    "take",
    "look",
    "example",
    "pie",
    "chart",
    "looks",
    "like",
    "people",
    "preferences",
    "comes",
    "different",
    "types",
    "pig",
    "meat",
    "chart",
    "message",
    "almost",
    "half",
    "people",
    "surveyed",
    "preferred",
    "bacon",
    "types",
    "pig",
    "meat",
    "sure",
    "almost",
    "agree",
    "lot",
    "going",
    "pie",
    "chart",
    "even",
    "sure",
    "features",
    "blue",
    "background",
    "3d",
    "orientation",
    "meant",
    "convey",
    "anything",
    "fact",
    "additional",
    "unnecessary",
    "features",
    "distract",
    "main",
    "message",
    "confusing",
    "audience",
    "let",
    "apply",
    "darkhorse",
    "analytics",
    "approach",
    "transform",
    "visual",
    "effective",
    "attractive",
    "impactive",
    "mentioned",
    "earlier",
    "message",
    "people",
    "likely",
    "choose",
    "bacon",
    "types",
    "pig",
    "meat",
    "let",
    "get",
    "rid",
    "everything",
    "distracting",
    "core",
    "message",
    "first",
    "thing",
    "let",
    "get",
    "rid",
    "blue",
    "background",
    "gray",
    "background",
    "let",
    "also",
    "get",
    "rid",
    "borders",
    "convey",
    "extra",
    "information",
    "also",
    "let",
    "drop",
    "redundant",
    "legend",
    "since",
    "pie",
    "chart",
    "already",
    "color",
    "coded",
    "3d",
    "adding",
    "extra",
    "information",
    "let",
    "say",
    "bye",
    "text",
    "building",
    "also",
    "unnecessary",
    "let",
    "get",
    "rid",
    "different",
    "colors",
    "wedges",
    "whoa",
    "happened",
    "well",
    "let",
    "thicken",
    "lines",
    "make",
    "meaningful",
    "looks",
    "little",
    "familiar",
    "yes",
    "bar",
    "graph",
    "one",
    "horizontal",
    "bars",
    "finally",
    "let",
    "emphasize",
    "bacon",
    "stands",
    "among",
    "types",
    "pig",
    "meat",
    "let",
    "juxtapose",
    "pie",
    "chart",
    "bar",
    "graph",
    "compare",
    "better",
    "easy",
    "understand",
    "hope",
    "unanimously",
    "agree",
    "bar",
    "graph",
    "better",
    "two",
    "simple",
    "cleaner",
    "less",
    "distracting",
    "much",
    "easier",
    "read",
    "fact",
    "pie",
    "charts",
    "recently",
    "come",
    "fire",
    "data",
    "visualization",
    "experts",
    "argue",
    "relevant",
    "rarest",
    "circumstances",
    "bar",
    "graphs",
    "charts",
    "hand",
    "argued",
    "far",
    "superior",
    "ways",
    "quickly",
    "get",
    "message",
    "across",
    "worry",
    "come",
    "back",
    "point",
    "learn",
    "create",
    "pie",
    "charts",
    "bar",
    "graphs",
    "matplotlib",
    "similar",
    "interesting",
    "examples",
    "check",
    "darkhorse",
    "analytics",
    "website",
    "couple",
    "examples",
    "clean",
    "bar",
    "graphs",
    "maps",
    "geospatial",
    "data",
    "examples",
    "reinforce",
    "concept",
    "less",
    "effective",
    "attractive",
    "impactive",
    "video",
    "start",
    "learning",
    "matplotlib",
    "video",
    "focus",
    "history",
    "matplotlib",
    "architecture",
    "matplotlab",
    "one",
    "widely",
    "used",
    "popular",
    "data",
    "visualization",
    "library",
    "python",
    "created",
    "john",
    "hunter",
    "neurobiologist",
    "part",
    "research",
    "team",
    "working",
    "analyzing",
    "electrochord",
    "discography",
    "signals",
    "ecog",
    "short",
    "team",
    "using",
    "proprietary",
    "software",
    "analysis",
    "however",
    "one",
    "license",
    "taking",
    "turns",
    "using",
    "order",
    "overcome",
    "limitation",
    "john",
    "set",
    "replace",
    "proprietary",
    "software",
    "version",
    "could",
    "utilized",
    "teammates",
    "could",
    "extended",
    "multiple",
    "investigators",
    "result",
    "matplotlib",
    "originally",
    "developed",
    "ecog",
    "visualization",
    "tool",
    "like",
    "matlab",
    "matplotlib",
    "equipped",
    "scripting",
    "interface",
    "quick",
    "easy",
    "generation",
    "graphics",
    "represented",
    "pipelot",
    "learn",
    "moment",
    "map",
    "ellipse",
    "architecture",
    "composed",
    "three",
    "main",
    "layers",
    "backend",
    "layer",
    "artist",
    "layer",
    "much",
    "heavy",
    "lifting",
    "happens",
    "usually",
    "appropriate",
    "programming",
    "paradigm",
    "writing",
    "web",
    "application",
    "server",
    "ui",
    "application",
    "perhaps",
    "script",
    "shared",
    "developers",
    "scripting",
    "layer",
    "appropriate",
    "layer",
    "everyday",
    "purposes",
    "considered",
    "lighter",
    "scripting",
    "interface",
    "simplify",
    "common",
    "tasks",
    "quick",
    "easy",
    "generation",
    "graphics",
    "plots",
    "let",
    "go",
    "layer",
    "little",
    "details",
    "back",
    "end",
    "layer",
    "three",
    "abstract",
    "interface",
    "classes",
    "figure",
    "canvas",
    "defines",
    "encompasses",
    "area",
    "figure",
    "drawn",
    "renderer",
    "instance",
    "renderer",
    "class",
    "knows",
    "draw",
    "figure",
    "canvas",
    "finally",
    "event",
    "handles",
    "user",
    "inputs",
    "keyboard",
    "strokes",
    "mouse",
    "clicks",
    "moving",
    "artist",
    "layer",
    "composed",
    "one",
    "main",
    "object",
    "artist",
    "artist",
    "object",
    "knows",
    "take",
    "renderer",
    "use",
    "put",
    "ink",
    "canvas",
    "everything",
    "see",
    "matplotlib",
    "figure",
    "artist",
    "instance",
    "title",
    "lines",
    "tick",
    "labels",
    "images",
    "correspondent",
    "individual",
    "artists",
    "two",
    "types",
    "artist",
    "objects",
    "first",
    "type",
    "primitive",
    "type",
    "line",
    "rectangle",
    "circle",
    "text",
    "second",
    "type",
    "composite",
    "type",
    "figure",
    "axes",
    "top",
    "level",
    "matplotlib",
    "object",
    "contains",
    "manages",
    "elements",
    "given",
    "graphic",
    "figure",
    "artist",
    "important",
    "composite",
    "artist",
    "axis",
    "matplotlib",
    "api",
    "plotting",
    "methods",
    "defined",
    "including",
    "methods",
    "create",
    "manipulate",
    "ticks",
    "axis",
    "lines",
    "grid",
    "plot",
    "background",
    "important",
    "note",
    "composite",
    "artist",
    "may",
    "contain",
    "composite",
    "artists",
    "well",
    "primitive",
    "artists",
    "figure",
    "artist",
    "example",
    "would",
    "contain",
    "axis",
    "artist",
    "well",
    "rectangle",
    "text",
    "artists",
    "let",
    "put",
    "artist",
    "layer",
    "use",
    "see",
    "use",
    "generate",
    "graphic",
    "let",
    "try",
    "generate",
    "histogram",
    "10",
    "000",
    "random",
    "numbers",
    "using",
    "artist",
    "layer",
    "first",
    "import",
    "figure",
    "canvas",
    "back",
    "end",
    "underscore",
    "ag",
    "attach",
    "figure",
    "artist",
    "note",
    "ag",
    "stands",
    "geometry",
    "high",
    "performance",
    "library",
    "produces",
    "attractive",
    "images",
    "import",
    "numpy",
    "library",
    "generate",
    "random",
    "numbers",
    "next",
    "create",
    "axis",
    "artist",
    "axis",
    "artist",
    "added",
    "automatically",
    "figure",
    "axis",
    "container",
    "note",
    "111",
    "matlab",
    "convention",
    "creates",
    "grid",
    "one",
    "row",
    "one",
    "column",
    "uses",
    "first",
    "cell",
    "grid",
    "location",
    "new",
    "axes",
    "call",
    "axis",
    "method",
    "hist",
    "generate",
    "histogram",
    "hiss",
    "creates",
    "sequence",
    "rectangle",
    "artists",
    "histogram",
    "bar",
    "adds",
    "axis",
    "container",
    "100",
    "means",
    "create",
    "100",
    "bins",
    "finally",
    "decorate",
    "figure",
    "title",
    "save",
    "generated",
    "histogram",
    "use",
    "artist",
    "layer",
    "generate",
    "graphic",
    "scripting",
    "layer",
    "developed",
    "scientists",
    "professional",
    "programmers",
    "sure",
    "agree",
    "based",
    "histogram",
    "created",
    "artist",
    "layer",
    "syntactically",
    "heavy",
    "meant",
    "developers",
    "individuals",
    "whose",
    "goal",
    "perform",
    "quick",
    "exploratory",
    "analysis",
    "data",
    "matplotlips",
    "scripting",
    "layer",
    "essentially",
    "matplotlib",
    "dot",
    "pi",
    "plot",
    "interface",
    "automates",
    "process",
    "defining",
    "canvas",
    "defining",
    "figure",
    "artist",
    "instant",
    "instance",
    "connecting",
    "let",
    "see",
    "code",
    "used",
    "earlier",
    "using",
    "artist",
    "layer",
    "generate",
    "histogram",
    "10",
    "000",
    "random",
    "numbers",
    "would",
    "look",
    "like",
    "first",
    "import",
    "pi",
    "plot",
    "interface",
    "see",
    "methods",
    "associated",
    "creating",
    "histogram",
    "artist",
    "objects",
    "manipulating",
    "whether",
    "hist",
    "method",
    "showing",
    "figure",
    "part",
    "pi",
    "plot",
    "interface",
    "interested",
    "learning",
    "history",
    "matplotlib",
    "architecture",
    "link",
    "take",
    "chapter",
    "written",
    "creators",
    "matplotlab",
    "definitely",
    "recommended",
    "read",
    "video",
    "learn",
    "use",
    "matplotlib",
    "create",
    "plots",
    "using",
    "jupiter",
    "notebook",
    "environment",
    "matplotlib",
    "data",
    "visualization",
    "library",
    "well",
    "supported",
    "different",
    "environments",
    "python",
    "scripts",
    "ipython",
    "shell",
    "web",
    "application",
    "servers",
    "graphical",
    "user",
    "interface",
    "toolkits",
    "well",
    "jupiter",
    "notebook",
    "know",
    "jupiter",
    "notebook",
    "open",
    "source",
    "web",
    "application",
    "allows",
    "create",
    "share",
    "documents",
    "contain",
    "live",
    "code",
    "visualizations",
    "explanatory",
    "text",
    "well",
    "jupiter",
    "specialized",
    "support",
    "matplotlib",
    "start",
    "jupyter",
    "notebook",
    "import",
    "matplotlib",
    "ready",
    "go",
    "course",
    "working",
    "mostly",
    "scripting",
    "interface",
    "words",
    "learn",
    "create",
    "almost",
    "visualization",
    "tools",
    "using",
    "scripting",
    "interface",
    "proceed",
    "course",
    "appreciate",
    "power",
    "interface",
    "find",
    "literally",
    "create",
    "almost",
    "conventional",
    "visualization",
    "tools",
    "histograms",
    "bar",
    "charts",
    "box",
    "plots",
    "many",
    "others",
    "using",
    "one",
    "function",
    "plot",
    "function",
    "let",
    "start",
    "example",
    "let",
    "first",
    "import",
    "scripting",
    "interface",
    "plt",
    "let",
    "plot",
    "circular",
    "mark",
    "position",
    "five",
    "five",
    "x",
    "equals",
    "5",
    "equals",
    "notice",
    "plot",
    "generated",
    "within",
    "browser",
    "separate",
    "window",
    "example",
    "plot",
    "gets",
    "generated",
    "new",
    "window",
    "enforce",
    "generating",
    "plots",
    "within",
    "browser",
    "using",
    "called",
    "magic",
    "function",
    "magic",
    "function",
    "starts",
    "percent",
    "sign",
    "matplotlib",
    "enforce",
    "plots",
    "rendered",
    "within",
    "browser",
    "pass",
    "inline",
    "backend",
    "matplotlib",
    "number",
    "different",
    "backends",
    "available",
    "one",
    "limitation",
    "backhand",
    "modify",
    "figure",
    "rendered",
    "rendering",
    "figure",
    "way",
    "us",
    "add",
    "example",
    "figure",
    "title",
    "label",
    "states",
    "axes",
    "need",
    "generate",
    "new",
    "plot",
    "add",
    "type",
    "title",
    "axis",
    "labels",
    "calling",
    "show",
    "function",
    "backend",
    "overcomes",
    "limitation",
    "notebook",
    "backend",
    "notebook",
    "backend",
    "place",
    "plt",
    "function",
    "called",
    "checks",
    "active",
    "figure",
    "exists",
    "functions",
    "call",
    "applied",
    "active",
    "figure",
    "figure",
    "exist",
    "renders",
    "new",
    "figure",
    "call",
    "function",
    "plot",
    "circular",
    "mark",
    "position",
    "five",
    "five",
    "backend",
    "checks",
    "active",
    "figure",
    "exists",
    "since",
    "active",
    "figure",
    "generates",
    "figure",
    "adds",
    "circular",
    "mark",
    "position",
    "five",
    "five",
    "beautiful",
    "backhand",
    "easily",
    "add",
    "title",
    "example",
    "labels",
    "axes",
    "plot",
    "rendered",
    "without",
    "need",
    "regenerate",
    "figure",
    "finally",
    "another",
    "thing",
    "great",
    "matplotlib",
    "pandas",
    "also",
    "implementation",
    "therefore",
    "plotting",
    "pandas",
    "simple",
    "calling",
    "plot",
    "function",
    "given",
    "panda",
    "series",
    "data",
    "frame",
    "say",
    "data",
    "frame",
    "number",
    "immigrants",
    "india",
    "china",
    "canada",
    "1980",
    "say",
    "interested",
    "generating",
    "line",
    "plot",
    "data",
    "call",
    "plot",
    "function",
    "data",
    "frame",
    "called",
    "india",
    "underscore",
    "china",
    "underscore",
    "df",
    "set",
    "parameter",
    "kind",
    "line",
    "line",
    "plot",
    "data",
    "data",
    "frame",
    "plotting",
    "histogram",
    "data",
    "different",
    "say",
    "would",
    "like",
    "plot",
    "histogram",
    "india",
    "column",
    "data",
    "frame",
    "call",
    "plot",
    "function",
    "column",
    "set",
    "parameter",
    "kind",
    "hist",
    "histogram",
    "histogram",
    "number",
    "indian",
    "immigrants",
    "canada",
    "1980",
    "concludes",
    "video",
    "basic",
    "plotting",
    "matplotlib",
    "see",
    "next",
    "video",
    "video",
    "learn",
    "data",
    "set",
    "using",
    "throughout",
    "course",
    "population",
    "division",
    "united",
    "nations",
    "compiled",
    "immigration",
    "data",
    "pertaining",
    "45",
    "countries",
    "data",
    "consists",
    "total",
    "number",
    "immigrants",
    "world",
    "45",
    "countries",
    "well",
    "metadata",
    "pertaining",
    "immigrants",
    "countries",
    "origin",
    "course",
    "focus",
    "immigration",
    "canada",
    "work",
    "primarily",
    "data",
    "set",
    "involving",
    "immigration",
    "great",
    "white",
    "north",
    "snapshot",
    "new",
    "end",
    "data",
    "immigration",
    "canada",
    "form",
    "excel",
    "file",
    "see",
    "first",
    "20",
    "rows",
    "contain",
    "textual",
    "data",
    "un",
    "department",
    "irrelevant",
    "information",
    "robert",
    "21",
    "contains",
    "labels",
    "columns",
    "following",
    "row",
    "represents",
    "country",
    "contains",
    "metadata",
    "country",
    "continent",
    "resides",
    "region",
    "belongs",
    "whether",
    "region",
    "developing",
    "developed",
    "row",
    "also",
    "contains",
    "total",
    "number",
    "immigrants",
    "country",
    "years",
    "1980",
    "way",
    "throughout",
    "course",
    "using",
    "pandas",
    "analysis",
    "data",
    "creating",
    "visualizations",
    "order",
    "start",
    "creating",
    "different",
    "types",
    "plots",
    "data",
    "whether",
    "exploratory",
    "analysis",
    "presentation",
    "need",
    "import",
    "data",
    "appendix",
    "data",
    "frame",
    "need",
    "import",
    "pandas",
    "library",
    "well",
    "xlrd",
    "library",
    "required",
    "extract",
    "data",
    "excel",
    "spreadsheets",
    "files",
    "call",
    "pandas",
    "function",
    "read",
    "underscore",
    "excel",
    "read",
    "data",
    "appendix",
    "data",
    "frame",
    "let",
    "name",
    "data",
    "frame",
    "df",
    "underscore",
    "notice",
    "skipping",
    "first",
    "20",
    "rows",
    "read",
    "data",
    "corresponding",
    "country",
    "want",
    "confirm",
    "imported",
    "data",
    "correctly",
    "pandas",
    "always",
    "use",
    "head",
    "function",
    "display",
    "first",
    "five",
    "rows",
    "data",
    "frame",
    "call",
    "function",
    "data",
    "frame",
    "df",
    "underscore",
    "output",
    "see",
    "output",
    "head",
    "function",
    "looks",
    "correct",
    "columns",
    "correct",
    "labels",
    "representing",
    "country",
    "containing",
    "total",
    "number",
    "immigrants",
    "country",
    "concludes",
    "video",
    "integration",
    "canada",
    "data",
    "set",
    "see",
    "next",
    "video",
    "video",
    "things",
    "start",
    "getting",
    "exciting",
    "generate",
    "first",
    "visualization",
    "tool",
    "line",
    "plot",
    "line",
    "plot",
    "name",
    "suggests",
    "applied",
    "form",
    "series",
    "data",
    "points",
    "connected",
    "straight",
    "line",
    "segments",
    "one",
    "basic",
    "type",
    "chart",
    "common",
    "many",
    "fields",
    "data",
    "science",
    "important",
    "question",
    "use",
    "line",
    "plots",
    "best",
    "use",
    "case",
    "line",
    "plot",
    "continuous",
    "data",
    "set",
    "interested",
    "visualizing",
    "data",
    "period",
    "time",
    "example",
    "say",
    "interested",
    "trend",
    "immigrants",
    "haiti",
    "canada",
    "generate",
    "line",
    "plot",
    "resulting",
    "figure",
    "depict",
    "trend",
    "haitian",
    "immigrants",
    "canada",
    "1980",
    "based",
    "line",
    "plot",
    "research",
    "justifications",
    "obvious",
    "anomalies",
    "changes",
    "example",
    "see",
    "spike",
    "immigration",
    "haiti",
    "canada",
    "quick",
    "google",
    "search",
    "major",
    "events",
    "haiti",
    "2010",
    "would",
    "return",
    "tragic",
    "earthquake",
    "took",
    "place",
    "2010",
    "therefore",
    "influx",
    "immigration",
    "canada",
    "mainly",
    "due",
    "tragic",
    "earthquake",
    "okay",
    "generate",
    "line",
    "plot",
    "go",
    "code",
    "let",
    "quick",
    "recap",
    "data",
    "set",
    "rule",
    "represents",
    "country",
    "contains",
    "metadata",
    "country",
    "located",
    "geographically",
    "whether",
    "developing",
    "developed",
    "row",
    "also",
    "contains",
    "numerical",
    "figures",
    "annual",
    "immigration",
    "country",
    "canada",
    "1980",
    "let",
    "process",
    "data",
    "frame",
    "country",
    "name",
    "becomes",
    "index",
    "row",
    "make",
    "querying",
    "specific",
    "countries",
    "easier",
    "also",
    "let",
    "add",
    "extra",
    "column",
    "represents",
    "cumulative",
    "sum",
    "annual",
    "immigration",
    "country",
    "1980",
    "afghanistan",
    "58",
    "639",
    "total",
    "albania",
    "15",
    "699",
    "let",
    "name",
    "data",
    "frame",
    "df",
    "underscore",
    "canada",
    "know",
    "data",
    "stored",
    "data",
    "frame",
    "df",
    "underscore",
    "canada",
    "let",
    "generate",
    "line",
    "plot",
    "corresponding",
    "immigration",
    "haiti",
    "first",
    "import",
    "matplotlib",
    "mpl",
    "scripting",
    "interface",
    "plt",
    "call",
    "plot",
    "function",
    "row",
    "corresponding",
    "haiti",
    "set",
    "kind",
    "equals",
    "line",
    "generate",
    "line",
    "plot",
    "note",
    "use",
    "years",
    "list",
    "containing",
    "string",
    "format",
    "years",
    "1980",
    "2013",
    "order",
    "exclude",
    "column",
    "total",
    "integration",
    "added",
    "complete",
    "figure",
    "give",
    "title",
    "label",
    "axes",
    "finally",
    "call",
    "show",
    "function",
    "display",
    "figure",
    "note",
    "code",
    "generate",
    "line",
    "plot",
    "using",
    "magic",
    "function",
    "percent",
    "sign",
    "matplotlib",
    "inline",
    "backend",
    "line",
    "plot",
    "depicts",
    "immigration",
    "haiti",
    "canada",
    "1980",
    "lab",
    "session",
    "explore",
    "line",
    "plots",
    "details",
    "make",
    "sure",
    "complete",
    "modules",
    "lab",
    "session",
    "concludes",
    "video",
    "online",
    "plots",
    "see",
    "next",
    "video",
    "video",
    "learn",
    "another",
    "visualization",
    "tool",
    "area",
    "plot",
    "actually",
    "extension",
    "line",
    "plot",
    "learned",
    "earlier",
    "video",
    "area",
    "plot",
    "area",
    "plot",
    "also",
    "known",
    "area",
    "chart",
    "graph",
    "type",
    "plot",
    "depicts",
    "accumulated",
    "totals",
    "using",
    "numbers",
    "percentages",
    "time",
    "based",
    "line",
    "plot",
    "commonly",
    "used",
    "trying",
    "compare",
    "two",
    "quantities",
    "generate",
    "area",
    "plot",
    "matplotlib",
    "go",
    "code",
    "let",
    "quick",
    "recap",
    "data",
    "set",
    "recall",
    "row",
    "represents",
    "country",
    "contains",
    "metadata",
    "country",
    "located",
    "geographically",
    "whether",
    "developing",
    "developed",
    "row",
    "also",
    "contains",
    "numerical",
    "figures",
    "annual",
    "immigration",
    "country",
    "canada",
    "1980",
    "let",
    "process",
    "data",
    "frame",
    "country",
    "name",
    "becomes",
    "index",
    "row",
    "make",
    "retrieving",
    "rows",
    "pertaining",
    "specific",
    "countries",
    "lot",
    "easier",
    "also",
    "let",
    "add",
    "extra",
    "column",
    "represents",
    "cumulative",
    "sum",
    "annual",
    "immigration",
    "country",
    "1980",
    "afghanistan",
    "58",
    "639",
    "total",
    "albania",
    "15",
    "699",
    "let",
    "name",
    "data",
    "frame",
    "df",
    "underscore",
    "canada",
    "know",
    "data",
    "stored",
    "data",
    "frame",
    "df",
    "underscore",
    "canada",
    "let",
    "try",
    "generate",
    "area",
    "plots",
    "countries",
    "highest",
    "number",
    "integration",
    "canada",
    "try",
    "find",
    "countries",
    "sorting",
    "data",
    "frame",
    "descending",
    "order",
    "cumulative",
    "total",
    "immigration",
    "1980",
    "use",
    "sort",
    "underscore",
    "values",
    "function",
    "sort",
    "data",
    "frame",
    "descending",
    "order",
    "result",
    "turns",
    "india",
    "followed",
    "china",
    "uk",
    "philippines",
    "pakistan",
    "top",
    "five",
    "countries",
    "highest",
    "number",
    "immigration",
    "canada",
    "go",
    "ahead",
    "generate",
    "area",
    "plots",
    "using",
    "first",
    "five",
    "rows",
    "data",
    "frame",
    "quite",
    "yet",
    "first",
    "need",
    "create",
    "new",
    "data",
    "frame",
    "five",
    "countries",
    "need",
    "exclude",
    "total",
    "column",
    "importantly",
    "generate",
    "area",
    "plots",
    "countries",
    "need",
    "years",
    "plotted",
    "horizontal",
    "axis",
    "annual",
    "immigration",
    "plotted",
    "vertical",
    "axis",
    "note",
    "matplotlib",
    "plots",
    "indices",
    "data",
    "frame",
    "horizontal",
    "axis",
    "data",
    "frame",
    "shown",
    "countries",
    "plotted",
    "horizontal",
    "axis",
    "fix",
    "need",
    "take",
    "transpose",
    "data",
    "frame",
    "let",
    "see",
    "sort",
    "data",
    "frame",
    "descending",
    "order",
    "cumulative",
    "annual",
    "immigration",
    "create",
    "new",
    "data",
    "frame",
    "top",
    "five",
    "countries",
    "let",
    "call",
    "df",
    "underscore",
    "top",
    "select",
    "columns",
    "representing",
    "years",
    "1980",
    "order",
    "exclude",
    "total",
    "column",
    "applying",
    "transpose",
    "method",
    "resulting",
    "data",
    "frame",
    "exactly",
    "want",
    "five",
    "columns",
    "column",
    "represents",
    "one",
    "top",
    "five",
    "countries",
    "years",
    "indices",
    "go",
    "ahead",
    "call",
    "plot",
    "function",
    "data",
    "frame",
    "df",
    "underscore",
    "top",
    "5",
    "generate",
    "area",
    "plots",
    "first",
    "import",
    "matplotlib",
    "mlmpl",
    "scripting",
    "interface",
    "plt",
    "call",
    "plot",
    "function",
    "data",
    "frame",
    "df",
    "underscore",
    "top",
    "5",
    "set",
    "client",
    "equals",
    "area",
    "generate",
    "area",
    "plot",
    "complete",
    "figure",
    "give",
    "title",
    "label",
    "axes",
    "finally",
    "call",
    "show",
    "function",
    "display",
    "figure",
    "note",
    "generating",
    "area",
    "plot",
    "using",
    "inline",
    "backhand",
    "area",
    "plot",
    "depicts",
    "immigration",
    "trend",
    "five",
    "countries",
    "highest",
    "immigration",
    "canada",
    "1980",
    "lab",
    "session",
    "explore",
    "area",
    "plots",
    "details",
    "make",
    "sure",
    "complete",
    "modules",
    "lab",
    "session",
    "conclude",
    "video",
    "area",
    "plots",
    "see",
    "next",
    "video",
    "video",
    "learn",
    "another",
    "visualization",
    "tool",
    "histogram",
    "learn",
    "create",
    "using",
    "matplotlib",
    "let",
    "start",
    "defining",
    "histogram",
    "histogram",
    "way",
    "representing",
    "frequency",
    "distribution",
    "numeric",
    "data",
    "set",
    "way",
    "works",
    "partitions",
    "spread",
    "numeric",
    "data",
    "biz",
    "signs",
    "data",
    "point",
    "data",
    "set",
    "bin",
    "counts",
    "number",
    "data",
    "points",
    "assigned",
    "bin",
    "vertical",
    "axis",
    "actually",
    "frequency",
    "number",
    "data",
    "points",
    "bin",
    "example",
    "let",
    "say",
    "range",
    "numeric",
    "values",
    "data",
    "set",
    "34",
    "first",
    "step",
    "creating",
    "histogram",
    "partitioning",
    "horizontal",
    "axis",
    "say",
    "10",
    "bins",
    "equal",
    "width",
    "construct",
    "histogram",
    "counting",
    "many",
    "data",
    "points",
    "value",
    "limits",
    "first",
    "pin",
    "second",
    "bin",
    "third",
    "bin",
    "say",
    "number",
    "data",
    "points",
    "value",
    "0",
    "3413",
    "draw",
    "bar",
    "height",
    "bin",
    "repeat",
    "thing",
    "bins",
    "data",
    "points",
    "fall",
    "bin",
    "bin",
    "would",
    "bar",
    "height",
    "zero",
    "create",
    "histogram",
    "using",
    "matplotlib",
    "go",
    "code",
    "let",
    "quick",
    "recap",
    "data",
    "set",
    "recall",
    "row",
    "represents",
    "country",
    "contains",
    "metadata",
    "country",
    "located",
    "geographically",
    "whether",
    "developing",
    "developed",
    "row",
    "also",
    "contains",
    "numerical",
    "figures",
    "annual",
    "immigration",
    "country",
    "canada",
    "1980",
    "let",
    "process",
    "data",
    "frame",
    "country",
    "name",
    "becomes",
    "index",
    "row",
    "make",
    "retrieving",
    "rows",
    "pertaining",
    "specific",
    "countries",
    "lot",
    "easier",
    "also",
    "let",
    "add",
    "extra",
    "column",
    "represents",
    "cumulative",
    "sum",
    "annual",
    "integration",
    "country",
    "1980",
    "afghanistan",
    "example",
    "58",
    "639",
    "total",
    "albania",
    "15",
    "699",
    "let",
    "name",
    "data",
    "frame",
    "df",
    "underscore",
    "canada",
    "know",
    "data",
    "stored",
    "data",
    "frame",
    "df",
    "underscore",
    "canada",
    "say",
    "interested",
    "visualizing",
    "distribution",
    "immigrants",
    "canada",
    "year",
    "simplest",
    "way",
    "generate",
    "histogram",
    "data",
    "column",
    "2013",
    "let",
    "see",
    "matplotlib",
    "first",
    "import",
    "matplotlib",
    "mpl",
    "scripting",
    "interface",
    "plt",
    "call",
    "plot",
    "function",
    "data",
    "column",
    "2013",
    "set",
    "kind",
    "equals",
    "hist",
    "generate",
    "histogram",
    "complete",
    "figure",
    "give",
    "title",
    "label",
    "axes",
    "finally",
    "call",
    "show",
    "function",
    "display",
    "figure",
    "histogram",
    "depicts",
    "distribution",
    "immigration",
    "canada",
    "notice",
    "bins",
    "aligned",
    "tick",
    "marks",
    "horizontal",
    "axis",
    "make",
    "histogram",
    "hard",
    "read",
    "let",
    "try",
    "fix",
    "order",
    "make",
    "histogram",
    "effective",
    "one",
    "way",
    "solve",
    "issue",
    "borrow",
    "histogram",
    "function",
    "numpy",
    "library",
    "usual",
    "start",
    "importing",
    "matplotlib",
    "scripting",
    "interface",
    "time",
    "also",
    "import",
    "numpy",
    "library",
    "call",
    "numpy",
    "histogram",
    "function",
    "data",
    "column",
    "function",
    "going",
    "going",
    "partition",
    "spread",
    "data",
    "column",
    "2013",
    "10",
    "bins",
    "equal",
    "width",
    "compute",
    "number",
    "data",
    "points",
    "fall",
    "bin",
    "return",
    "frequency",
    "bin",
    "calling",
    "count",
    "bin",
    "edges",
    "calling",
    "bin",
    "underscore",
    "edges",
    "pass",
    "bin",
    "edges",
    "additional",
    "parameter",
    "plot",
    "function",
    "generate",
    "histogram",
    "go",
    "nice",
    "looking",
    "histogram",
    "whose",
    "bin",
    "edges",
    "aligned",
    "tick",
    "marks",
    "horizontal",
    "axis",
    "lab",
    "session",
    "explore",
    "histograms",
    "details",
    "make",
    "sure",
    "complete",
    "modules",
    "lab",
    "session",
    "conclude",
    "video",
    "histograms",
    "see",
    "next",
    "video",
    "video",
    "learn",
    "additional",
    "visualization",
    "tool",
    "namely",
    "bar",
    "chart",
    "learn",
    "create",
    "using",
    "matplotlib",
    "bar",
    "chart",
    "popular",
    "visualization",
    "tool",
    "like",
    "histogram",
    "bar",
    "chart",
    "also",
    "known",
    "bar",
    "graph",
    "type",
    "plot",
    "length",
    "bar",
    "proportional",
    "value",
    "item",
    "represents",
    "commonly",
    "used",
    "compare",
    "values",
    "variable",
    "given",
    "point",
    "time",
    "example",
    "say",
    "interested",
    "visualizing",
    "discrete",
    "fashion",
    "immigration",
    "iceland",
    "canada",
    "looked",
    "like",
    "1980",
    "one",
    "way",
    "building",
    "bar",
    "chart",
    "height",
    "bar",
    "represents",
    "total",
    "immigration",
    "iceland",
    "canada",
    "particular",
    "year",
    "matplotlib",
    "go",
    "code",
    "let",
    "quick",
    "recap",
    "data",
    "set",
    "recall",
    "row",
    "represents",
    "country",
    "contains",
    "metadata",
    "country",
    "located",
    "geographically",
    "whether",
    "developing",
    "developed",
    "row",
    "also",
    "contains",
    "numerical",
    "figures",
    "annual",
    "immigration",
    "country",
    "canada",
    "1980",
    "let",
    "process",
    "data",
    "frame",
    "country",
    "name",
    "becomes",
    "index",
    "row",
    "make",
    "retrieving",
    "rows",
    "pertaining",
    "specific",
    "countries",
    "lot",
    "easier",
    "also",
    "let",
    "add",
    "extra",
    "column",
    "represents",
    "cumulative",
    "sum",
    "annual",
    "immigration",
    "country",
    "1980",
    "afghanistan",
    "example",
    "58",
    "639",
    "total",
    "albania",
    "15",
    "699",
    "let",
    "name",
    "data",
    "frame",
    "df",
    "underscore",
    "canada",
    "know",
    "data",
    "stored",
    "data",
    "frame",
    "df",
    "underscore",
    "canada",
    "let",
    "see",
    "use",
    "matplotlib",
    "generate",
    "bar",
    "chart",
    "visualize",
    "immigration",
    "iceland",
    "canada",
    "looked",
    "like",
    "1980",
    "usual",
    "start",
    "importing",
    "matplotlib",
    "scripting",
    "interface",
    "use",
    "years",
    "variable",
    "create",
    "new",
    "data",
    "frame",
    "let",
    "name",
    "df",
    "underscore",
    "iceland",
    "includes",
    "data",
    "pertaining",
    "annual",
    "immigration",
    "iceland",
    "canada",
    "excluding",
    "total",
    "column",
    "call",
    "plot",
    "function",
    "df",
    "underscore",
    "iceland",
    "set",
    "client",
    "equals",
    "bar",
    "generate",
    "bar",
    "chart",
    "complete",
    "figure",
    "give",
    "title",
    "label",
    "axes",
    "finally",
    "call",
    "show",
    "function",
    "display",
    "figure",
    "bar",
    "chart",
    "depicts",
    "immigration",
    "iceland",
    "canada",
    "1980",
    "examining",
    "bar",
    "chart",
    "notice",
    "immigration",
    "canada",
    "iceland",
    "seen",
    "increasing",
    "trend",
    "since",
    "sure",
    "curious",
    "among",
    "already",
    "wondering",
    "culprit",
    "behind",
    "increasing",
    "trend",
    "lab",
    "session",
    "revealed",
    "reason",
    "also",
    "learned",
    "create",
    "bar",
    "chart",
    "horizontal",
    "bars",
    "make",
    "sure",
    "complete",
    "modules",
    "lab",
    "session",
    "include",
    "video",
    "bar",
    "charts",
    "see",
    "next",
    "video",
    "video",
    "learn",
    "another",
    "visualization",
    "tool",
    "pie",
    "chart",
    "learn",
    "create",
    "using",
    "matplotlib",
    "pie",
    "chart",
    "apply",
    "chart",
    "circular",
    "statistical",
    "graphic",
    "divided",
    "slices",
    "illustrate",
    "numerical",
    "proportion",
    "example",
    "pie",
    "chart",
    "canadian",
    "federal",
    "election",
    "back",
    "2015",
    "liberals",
    "red",
    "50",
    "percent",
    "seats",
    "house",
    "commons",
    "red",
    "color",
    "occupies",
    "half",
    "circle",
    "create",
    "pie",
    "chart",
    "matplotlib",
    "go",
    "code",
    "let",
    "quick",
    "recap",
    "data",
    "set",
    "recall",
    "row",
    "represents",
    "country",
    "contains",
    "metadata",
    "country",
    "located",
    "geographically",
    "whether",
    "developing",
    "developed",
    "row",
    "also",
    "contains",
    "numerical",
    "figures",
    "annual",
    "immigration",
    "country",
    "canada",
    "1980",
    "let",
    "process",
    "data",
    "frame",
    "country",
    "name",
    "becomes",
    "index",
    "row",
    "make",
    "retrieving",
    "rows",
    "pertaining",
    "specific",
    "countries",
    "lot",
    "easier",
    "also",
    "let",
    "add",
    "extra",
    "column",
    "represents",
    "cumulative",
    "sum",
    "annual",
    "integration",
    "country",
    "1980",
    "afghanistan",
    "example",
    "58",
    "639",
    "total",
    "albania",
    "15",
    "699",
    "let",
    "name",
    "data",
    "frame",
    "df",
    "underscore",
    "canada",
    "know",
    "data",
    "stored",
    "data",
    "frame",
    "df",
    "underscore",
    "canada",
    "say",
    "interested",
    "visualizing",
    "breakdown",
    "immigration",
    "canada",
    "first",
    "step",
    "group",
    "data",
    "continent",
    "using",
    "continent",
    "column",
    "use",
    "pandas",
    "call",
    "pandas",
    "group",
    "function",
    "df",
    "underscore",
    "canada",
    "sum",
    "number",
    "immigrants",
    "countries",
    "belong",
    "continent",
    "resulting",
    "data",
    "frame",
    "let",
    "name",
    "df",
    "underscore",
    "continents",
    "resulting",
    "data",
    "frame",
    "six",
    "rows",
    "representing",
    "continent",
    "35",
    "columns",
    "representing",
    "years",
    "1980",
    "2013",
    "plus",
    "cumulative",
    "sum",
    "integration",
    "continent",
    "ready",
    "start",
    "creating",
    "pie",
    "chart",
    "start",
    "usual",
    "importing",
    "matplotlab",
    "mpl",
    "scripting",
    "layer",
    "pi",
    "plot",
    "interface",
    "plt",
    "call",
    "plot",
    "function",
    "column",
    "total",
    "data",
    "frame",
    "df",
    "underscore",
    "continents",
    "set",
    "kind",
    "equals",
    "pi",
    "generate",
    "pie",
    "chart",
    "complete",
    "figure",
    "give",
    "title",
    "finally",
    "call",
    "show",
    "function",
    "display",
    "figure",
    "pie",
    "chart",
    "depicts",
    "continent",
    "proportion",
    "immigration",
    "canada",
    "1980",
    "lab",
    "session",
    "go",
    "process",
    "creating",
    "professional",
    "looking",
    "aesthetically",
    "pleasing",
    "pie",
    "chart",
    "transform",
    "pie",
    "chart",
    "created",
    "one",
    "looks",
    "like",
    "make",
    "sure",
    "complete",
    "modules",
    "lab",
    "session",
    "one",
    "last",
    "comment",
    "pie",
    "charts",
    "vocal",
    "opponents",
    "use",
    "pie",
    "charts",
    "circumstances",
    "argue",
    "pie",
    "charts",
    "fail",
    "accurately",
    "display",
    "data",
    "consistency",
    "bar",
    "charts",
    "much",
    "better",
    "comes",
    "representing",
    "data",
    "consistent",
    "way",
    "getting",
    "message",
    "across",
    "interested",
    "learning",
    "arguments",
    "white",
    "charts",
    "link",
    "interesting",
    "article",
    "discusses",
    "clearly",
    "flaws",
    "pie",
    "charts",
    "also",
    "find",
    "link",
    "video",
    "conclude",
    "video",
    "pie",
    "charts",
    "see",
    "next",
    "video",
    "music",
    "thank",
    "video",
    "learn",
    "another",
    "visualization",
    "tool",
    "box",
    "plot",
    "create",
    "one",
    "using",
    "matplotlib",
    "box",
    "plot",
    "box",
    "plot",
    "way",
    "statistically",
    "representing",
    "distribution",
    "given",
    "data",
    "five",
    "main",
    "dimensions",
    "first",
    "dimension",
    "minimum",
    "smallest",
    "number",
    "sorted",
    "data",
    "value",
    "obtained",
    "subtracting",
    "times",
    "iqr",
    "iqr",
    "interquartile",
    "range",
    "first",
    "quartile",
    "second",
    "dimension",
    "first",
    "quartile",
    "25",
    "way",
    "sorted",
    "data",
    "words",
    "quarter",
    "data",
    "points",
    "less",
    "value",
    "third",
    "dimension",
    "median",
    "median",
    "sorted",
    "data",
    "fourth",
    "dimension",
    "third",
    "quartile",
    "75",
    "percent",
    "way",
    "sorted",
    "data",
    "words",
    "three",
    "quarters",
    "data",
    "points",
    "less",
    "value",
    "final",
    "dimension",
    "maximum",
    "highest",
    "number",
    "sorted",
    "data",
    "maximum",
    "equals",
    "third",
    "quartile",
    "summed",
    "multiplied",
    "iqr",
    "finally",
    "box",
    "plots",
    "also",
    "display",
    "outliers",
    "individual",
    "dots",
    "occur",
    "outside",
    "upper",
    "lower",
    "extremes",
    "let",
    "see",
    "create",
    "box",
    "plot",
    "matplotlib",
    "go",
    "code",
    "let",
    "quick",
    "recap",
    "data",
    "set",
    "recall",
    "row",
    "represents",
    "country",
    "contains",
    "metadata",
    "country",
    "located",
    "geographically",
    "whether",
    "developing",
    "developed",
    "row",
    "contains",
    "numerical",
    "figures",
    "annual",
    "immigration",
    "country",
    "canada",
    "1980",
    "let",
    "process",
    "data",
    "frame",
    "country",
    "name",
    "becomes",
    "index",
    "row",
    "make",
    "retrieving",
    "rows",
    "pertaining",
    "specific",
    "countries",
    "lot",
    "easier",
    "also",
    "let",
    "add",
    "extra",
    "column",
    "represents",
    "cumulative",
    "sum",
    "annual",
    "immigration",
    "country",
    "1980",
    "afghanistan",
    "example",
    "58",
    "639",
    "total",
    "albania",
    "15",
    "699",
    "let",
    "name",
    "data",
    "frame",
    "df",
    "underscore",
    "canada",
    "know",
    "data",
    "stored",
    "data",
    "frame",
    "df",
    "underscore",
    "canada",
    "say",
    "interested",
    "creating",
    "box",
    "plot",
    "visualize",
    "immigration",
    "japan",
    "canada",
    "tools",
    "learned",
    "far",
    "start",
    "importing",
    "matplotlib",
    "mpl",
    "pi",
    "plot",
    "interface",
    "plt",
    "create",
    "new",
    "data",
    "frame",
    "data",
    "pertaining",
    "japan",
    "excluding",
    "column",
    "total",
    "using",
    "year",
    "variable",
    "transpose",
    "resulting",
    "data",
    "frame",
    "make",
    "correct",
    "format",
    "create",
    "box",
    "plot",
    "let",
    "name",
    "new",
    "data",
    "frame",
    "df",
    "underscore",
    "japan",
    "following",
    "call",
    "plot",
    "function",
    "df",
    "underscore",
    "japan",
    "set",
    "kind",
    "equals",
    "box",
    "generate",
    "box",
    "plot",
    "complete",
    "figure",
    "give",
    "title",
    "label",
    "vertical",
    "axis",
    "finally",
    "call",
    "show",
    "function",
    "display",
    "figure",
    "box",
    "plot",
    "provides",
    "pleasing",
    "distribution",
    "japanese",
    "immigration",
    "canada",
    "1980",
    "lab",
    "session",
    "explore",
    "box",
    "plots",
    "detail",
    "learn",
    "create",
    "multiple",
    "box",
    "plots",
    "well",
    "horizontal",
    "box",
    "plots",
    "make",
    "sure",
    "complete",
    "module",
    "lab",
    "session",
    "conclude",
    "video",
    "box",
    "plots",
    "see",
    "next",
    "video",
    "music",
    "video",
    "learn",
    "additional",
    "visualization",
    "tool",
    "scatter",
    "plot",
    "learn",
    "create",
    "using",
    "matplotlib",
    "scatter",
    "plot",
    "scatter",
    "plot",
    "type",
    "plot",
    "displays",
    "values",
    "pertaining",
    "typically",
    "two",
    "variables",
    "usually",
    "dependent",
    "variable",
    "plotted",
    "independent",
    "variable",
    "order",
    "determine",
    "correlation",
    "two",
    "variables",
    "exists",
    "example",
    "scatter",
    "plot",
    "income",
    "versus",
    "education",
    "looking",
    "plotted",
    "data",
    "one",
    "conclude",
    "individual",
    "years",
    "education",
    "likely",
    "earn",
    "higher",
    "income",
    "individual",
    "fewer",
    "years",
    "education",
    "create",
    "scatter",
    "plot",
    "matplotlib",
    "go",
    "code",
    "let",
    "quick",
    "recap",
    "data",
    "set",
    "recall",
    "row",
    "represents",
    "country",
    "contains",
    "metadata",
    "country",
    "located",
    "geographically",
    "whether",
    "developing",
    "developed",
    "row",
    "also",
    "contains",
    "numerical",
    "figures",
    "annual",
    "immigration",
    "country",
    "canada",
    "1980",
    "let",
    "process",
    "data",
    "frame",
    "country",
    "name",
    "becomes",
    "index",
    "row",
    "make",
    "retrieving",
    "rows",
    "pertaining",
    "specific",
    "countries",
    "lot",
    "easier",
    "also",
    "let",
    "add",
    "extra",
    "column",
    "represents",
    "cumulative",
    "sum",
    "annual",
    "integration",
    "country",
    "1980",
    "afghanistan",
    "example",
    "58",
    "639",
    "total",
    "albania",
    "15",
    "699",
    "let",
    "name",
    "data",
    "frame",
    "df",
    "underscore",
    "canada",
    "know",
    "data",
    "stored",
    "data",
    "frame",
    "df",
    "underscore",
    "canada",
    "say",
    "interested",
    "plotting",
    "scatter",
    "plot",
    "total",
    "annual",
    "immigration",
    "canada",
    "1980",
    "able",
    "first",
    "need",
    "create",
    "new",
    "data",
    "frame",
    "shows",
    "corresponding",
    "total",
    "number",
    "immigration",
    "countries",
    "worldwide",
    "shown",
    "let",
    "name",
    "new",
    "data",
    "frame",
    "df",
    "underscore",
    "total",
    "lab",
    "session",
    "walk",
    "together",
    "process",
    "creating",
    "df",
    "underscore",
    "total",
    "df",
    "underscore",
    "canada",
    "make",
    "sure",
    "complete",
    "modules",
    "lab",
    "session",
    "proceed",
    "usual",
    "import",
    "matplotlib",
    "mpl",
    "scripting",
    "layer",
    "pi",
    "plot",
    "interface",
    "plt",
    "call",
    "plot",
    "function",
    "data",
    "frame",
    "df",
    "underscore",
    "total",
    "set",
    "kind",
    "equals",
    "scatter",
    "generate",
    "scatter",
    "plot",
    "unlike",
    "data",
    "visualization",
    "tools",
    "passing",
    "client",
    "parameter",
    "enough",
    "generate",
    "plot",
    "scatter",
    "plots",
    "also",
    "need",
    "pass",
    "variable",
    "plotted",
    "horizontal",
    "axis",
    "x",
    "parameter",
    "variable",
    "plotted",
    "vertical",
    "axis",
    "parameter",
    "case",
    "passing",
    "column",
    "year",
    "x",
    "parameter",
    "column",
    "total",
    "parameter",
    "complete",
    "figure",
    "give",
    "title",
    "label",
    "axes",
    "finally",
    "call",
    "show",
    "function",
    "display",
    "figure",
    "scatter",
    "plot",
    "shows",
    "total",
    "integration",
    "canada",
    "countries",
    "world",
    "1980",
    "scatter",
    "plot",
    "clearly",
    "depicts",
    "overall",
    "rising",
    "trend",
    "immigration",
    "time",
    "lab",
    "session",
    "explore",
    "scatter",
    "plots",
    "details",
    "learn",
    "interesting",
    "variation",
    "scatter",
    "plot",
    "plot",
    "called",
    "bubble",
    "plot",
    "learn",
    "create",
    "using",
    "matplotlid",
    "make",
    "sure",
    "complete",
    "modules",
    "lab",
    "session",
    "conclude",
    "video",
    "scatter",
    "plots",
    "see",
    "next",
    "video",
    "video",
    "learn",
    "consider",
    "advanced",
    "visualization",
    "tool",
    "namely",
    "waffle",
    "chart",
    "waffle",
    "chart",
    "waffle",
    "chart",
    "great",
    "way",
    "visualize",
    "data",
    "relation",
    "whole",
    "highlight",
    "progress",
    "given",
    "threshold",
    "example",
    "say",
    "immigration",
    "scandinavia",
    "canada",
    "comprised",
    "immigration",
    "denmark",
    "norway",
    "sweden",
    "interested",
    "visualizing",
    "contribution",
    "countries",
    "scandinavian",
    "immigration",
    "canada",
    "main",
    "idea",
    "given",
    "waffle",
    "chart",
    "whose",
    "desired",
    "height",
    "width",
    "defined",
    "contribution",
    "country",
    "transformed",
    "number",
    "tiles",
    "proportional",
    "country",
    "contribution",
    "total",
    "contribution",
    "tiles",
    "resulting",
    "resembles",
    "fork",
    "combined",
    "hence",
    "name",
    "waffle",
    "chart",
    "unfortunately",
    "matplotlib",
    "function",
    "create",
    "waffle",
    "charts",
    "therefore",
    "lab",
    "session",
    "walk",
    "process",
    "creating",
    "python",
    "function",
    "create",
    "waffle",
    "chart",
    "really",
    "important",
    "complete",
    "module",
    "lab",
    "session",
    "conclude",
    "video",
    "waffle",
    "charts",
    "see",
    "next",
    "video",
    "video",
    "learn",
    "another",
    "advanced",
    "visualization",
    "tool",
    "word",
    "cloud",
    "word",
    "cloud",
    "word",
    "cloud",
    "simply",
    "depiction",
    "importance",
    "different",
    "words",
    "body",
    "text",
    "word",
    "cloud",
    "works",
    "simple",
    "way",
    "specific",
    "word",
    "appears",
    "source",
    "textual",
    "data",
    "bigger",
    "bolder",
    "appears",
    "world",
    "cloud",
    "given",
    "text",
    "data",
    "recruitment",
    "example",
    "generate",
    "cloud",
    "words",
    "like",
    "cloud",
    "telling",
    "us",
    "words",
    "recruitment",
    "talent",
    "candidates",
    "words",
    "really",
    "stand",
    "text",
    "documents",
    "assuming",
    "know",
    "anything",
    "content",
    "documents",
    "word",
    "cloud",
    "useful",
    "assign",
    "topic",
    "unknown",
    "textual",
    "data",
    "unfortunately",
    "like",
    "waffle",
    "charts",
    "matplotlib",
    "function",
    "generate",
    "word",
    "clouds",
    "however",
    "luckily",
    "python",
    "library",
    "cloud",
    "word",
    "generation",
    "created",
    "andreas",
    "muller",
    "publicly",
    "available",
    "lab",
    "session",
    "learn",
    "use",
    "muller",
    "word",
    "cloud",
    "generator",
    "also",
    "create",
    "interesting",
    "word",
    "clouds",
    "superimposed",
    "different",
    "background",
    "images",
    "make",
    "sure",
    "complete",
    "modules",
    "lab",
    "session",
    "conclude",
    "video",
    "word",
    "clouds",
    "see",
    "next",
    "video",
    "video",
    "learn",
    "new",
    "visualization",
    "library",
    "python",
    "seaborn",
    "although",
    "seabourn",
    "another",
    "data",
    "visualization",
    "library",
    "actually",
    "based",
    "matplotlib",
    "built",
    "primarily",
    "provide",
    "high",
    "level",
    "interface",
    "drawing",
    "attractive",
    "statistical",
    "graphics",
    "regression",
    "plots",
    "box",
    "plots",
    "seabon",
    "makes",
    "creating",
    "plots",
    "efficient",
    "therefore",
    "seabourn",
    "generate",
    "plots",
    "code",
    "five",
    "times",
    "less",
    "map",
    "plot",
    "lib",
    "let",
    "see",
    "use",
    "seaboard",
    "create",
    "statistical",
    "graphic",
    "let",
    "look",
    "regression",
    "plots",
    "let",
    "say",
    "data",
    "frame",
    "called",
    "df",
    "underscore",
    "total",
    "total",
    "immigration",
    "canada",
    "1980",
    "year",
    "one",
    "column",
    "corresponding",
    "total",
    "immigration",
    "another",
    "column",
    "say",
    "interested",
    "creating",
    "scatter",
    "plot",
    "along",
    "regression",
    "line",
    "highlight",
    "trends",
    "data",
    "seaborn",
    "literally",
    "one",
    "line",
    "code",
    "way",
    "first",
    "import",
    "c1",
    "let",
    "import",
    "sns",
    "call",
    "seaborne",
    "reg",
    "plot",
    "function",
    "basically",
    "tell",
    "use",
    "data",
    "frame",
    "df",
    "underscore",
    "total",
    "plot",
    "column",
    "year",
    "horizontal",
    "axis",
    "column",
    "total",
    "vertical",
    "axis",
    "output",
    "one",
    "line",
    "code",
    "scatter",
    "plot",
    "regression",
    "line",
    "also",
    "95",
    "percent",
    "confidence",
    "interval",
    "really",
    "amazing",
    "seaborn",
    "red",
    "plot",
    "function",
    "also",
    "accepts",
    "additional",
    "parameters",
    "personal",
    "customization",
    "change",
    "color",
    "example",
    "using",
    "color",
    "parameter",
    "let",
    "go",
    "ahead",
    "change",
    "color",
    "green",
    "also",
    "change",
    "marker",
    "shape",
    "well",
    "using",
    "marker",
    "parameter",
    "let",
    "go",
    "ahead",
    "change",
    "shape",
    "markers",
    "plus",
    "marker",
    "instead",
    "default",
    "circular",
    "marker",
    "lab",
    "session",
    "explored",
    "regression",
    "plots",
    "seabourn",
    "details",
    "make",
    "sure",
    "complete",
    "modules",
    "lab",
    "session",
    "conclude",
    "short",
    "introduction",
    "seabourn",
    "regression",
    "plots",
    "see",
    "next",
    "video",
    "video",
    "learn",
    "interesting",
    "data",
    "visualization",
    "library",
    "python",
    "volume",
    "folium",
    "powerful",
    "data",
    "visualization",
    "library",
    "python",
    "built",
    "primarily",
    "help",
    "people",
    "visualize",
    "geospatial",
    "data",
    "volume",
    "create",
    "map",
    "location",
    "world",
    "long",
    "know",
    "latitude",
    "longitude",
    "values",
    "also",
    "create",
    "map",
    "superimposed",
    "markers",
    "well",
    "clusters",
    "markers",
    "top",
    "map",
    "cool",
    "interesting",
    "visualizations",
    "also",
    "create",
    "maps",
    "different",
    "styles",
    "street",
    "level",
    "map",
    "statement",
    "map",
    "couple",
    "others",
    "look",
    "moment",
    "creating",
    "world",
    "map",
    "volume",
    "pretty",
    "straightforward",
    "simply",
    "call",
    "map",
    "function",
    "really",
    "interesting",
    "maps",
    "created",
    "folium",
    "interactive",
    "zoom",
    "map",
    "rendered",
    "super",
    "useful",
    "feature",
    "default",
    "map",
    "style",
    "openstreet",
    "map",
    "shows",
    "street",
    "view",
    "area",
    "zoomed",
    "shows",
    "borders",
    "world",
    "countries",
    "zoomed",
    "way",
    "let",
    "create",
    "world",
    "map",
    "centered",
    "around",
    "canada",
    "pass",
    "latitude",
    "longitude",
    "values",
    "canada",
    "using",
    "location",
    "parameter",
    "folium",
    "set",
    "initial",
    "zoom",
    "level",
    "using",
    "zoom",
    "start",
    "parameter",
    "say",
    "initial",
    "easily",
    "change",
    "zoom",
    "level",
    "map",
    "rendered",
    "zooming",
    "zooming",
    "play",
    "parameter",
    "figure",
    "initial",
    "zoom",
    "level",
    "looks",
    "like",
    "different",
    "values",
    "let",
    "set",
    "zoom",
    "level",
    "map",
    "canada",
    "four",
    "go",
    "world",
    "map",
    "centered",
    "around",
    "canada",
    "another",
    "amazing",
    "feature",
    "folium",
    "create",
    "different",
    "map",
    "styles",
    "using",
    "tiles",
    "parameter",
    "let",
    "create",
    "statement",
    "toner",
    "map",
    "canada",
    "style",
    "great",
    "visualizing",
    "exploring",
    "river",
    "meanders",
    "coastal",
    "zones",
    "another",
    "style",
    "stament",
    "terrain",
    "let",
    "create",
    "map",
    "canada",
    "statement",
    "terrain",
    "style",
    "great",
    "visualizing",
    "hill",
    "shading",
    "natural",
    "vegetation",
    "colors",
    "conclude",
    "introduction",
    "volume",
    "see",
    "next",
    "video",
    "video",
    "continue",
    "working",
    "phonium",
    "library",
    "learn",
    "superimpose",
    "markers",
    "top",
    "map",
    "interesting",
    "visualizations",
    "previous",
    "video",
    "learned",
    "create",
    "world",
    "map",
    "centered",
    "around",
    "canada",
    "let",
    "create",
    "map",
    "name",
    "canada",
    "underscore",
    "math",
    "time",
    "ontario",
    "canadian",
    "province",
    "contains",
    "40",
    "percent",
    "canadian",
    "population",
    "considered",
    "canada",
    "populous",
    "province",
    "let",
    "see",
    "add",
    "circular",
    "mark",
    "center",
    "ontario",
    "need",
    "create",
    "called",
    "feature",
    "group",
    "let",
    "go",
    "ahead",
    "create",
    "feature",
    "group",
    "named",
    "ontario",
    "feature",
    "group",
    "created",
    "empty",
    "means",
    "next",
    "start",
    "creating",
    "called",
    "children",
    "adding",
    "future",
    "group",
    "let",
    "create",
    "child",
    "form",
    "red",
    "circular",
    "mark",
    "located",
    "center",
    "ontario",
    "province",
    "specify",
    "location",
    "child",
    "passing",
    "latitude",
    "longitude",
    "values",
    "done",
    "adding",
    "children",
    "future",
    "group",
    "add",
    "future",
    "group",
    "map",
    "red",
    "circular",
    "mark",
    "superimposed",
    "top",
    "map",
    "added",
    "center",
    "province",
    "ontario",
    "would",
    "nice",
    "could",
    "actually",
    "label",
    "marker",
    "order",
    "let",
    "people",
    "know",
    "actually",
    "represents",
    "simply",
    "use",
    "marker",
    "function",
    "parameter",
    "pass",
    "whatever",
    "text",
    "want",
    "add",
    "marker",
    "go",
    "marker",
    "displays",
    "ontario",
    "clicked",
    "lab",
    "session",
    "look",
    "real",
    "world",
    "example",
    "explore",
    "crime",
    "rate",
    "san",
    "francisco",
    "create",
    "map",
    "san",
    "francisco",
    "superimpose",
    "thousands",
    "markers",
    "top",
    "map",
    "show",
    "also",
    "create",
    "clusters",
    "markers",
    "order",
    "make",
    "map",
    "look",
    "less",
    "congested",
    "module",
    "lab",
    "session",
    "interesting",
    "one",
    "please",
    "make",
    "sure",
    "complete",
    "conclude",
    "video",
    "adding",
    "markers",
    "maps",
    "volume",
    "see",
    "next",
    "video",
    "video",
    "learn",
    "create",
    "special",
    "type",
    "map",
    "called",
    "choropleth",
    "map",
    "volume",
    "sure",
    "seen",
    "maps",
    "similar",
    "one",
    "one",
    "call",
    "choropleth",
    "maps",
    "chloropleth",
    "map",
    "choropleth",
    "map",
    "thematic",
    "map",
    "areas",
    "shaded",
    "patterned",
    "proportion",
    "measurement",
    "statistical",
    "variable",
    "displayed",
    "map",
    "population",
    "density",
    "per",
    "capita",
    "income",
    "higher",
    "measurement",
    "darker",
    "color",
    "map",
    "left",
    "choropleth",
    "map",
    "world",
    "showing",
    "infant",
    "mortality",
    "rate",
    "per",
    "1000",
    "births",
    "darker",
    "color",
    "higher",
    "infant",
    "mortality",
    "rate",
    "according",
    "map",
    "african",
    "countries",
    "high",
    "infant",
    "mortality",
    "rates",
    "reporting",
    "rate",
    "higher",
    "160",
    "per",
    "1000",
    "births",
    "similarly",
    "map",
    "right",
    "choropleth",
    "map",
    "showing",
    "population",
    "per",
    "square",
    "mile",
    "state",
    "darker",
    "color",
    "higher",
    "population",
    "according",
    "map",
    "states",
    "eastern",
    "part",
    "tend",
    "populous",
    "states",
    "western",
    "part",
    "california",
    "exception",
    "order",
    "create",
    "chloroplast",
    "map",
    "region",
    "interest",
    "volume",
    "requires",
    "junior",
    "json",
    "file",
    "includes",
    "geospatial",
    "data",
    "region",
    "chloroplyph",
    "map",
    "world",
    "would",
    "need",
    "go",
    "json",
    "file",
    "lists",
    "country",
    "along",
    "geospatial",
    "data",
    "define",
    "borders",
    "boundaries",
    "example",
    "gojson",
    "file",
    "would",
    "include",
    "country",
    "example",
    "pertains",
    "country",
    "brunei",
    "see",
    "file",
    "includes",
    "country",
    "name",
    "id",
    "geometry",
    "shape",
    "coordinates",
    "define",
    "country",
    "borders",
    "boundaries",
    "let",
    "see",
    "create",
    "choropleth",
    "map",
    "world",
    "like",
    "one",
    "showing",
    "immigration",
    "canada",
    "go",
    "code",
    "let",
    "quick",
    "recap",
    "data",
    "set",
    "recall",
    "row",
    "represents",
    "country",
    "contains",
    "metadata",
    "country",
    "located",
    "geographically",
    "whether",
    "developing",
    "developed",
    "row",
    "also",
    "contains",
    "numerical",
    "figures",
    "annual",
    "immigration",
    "country",
    "canada",
    "1980",
    "let",
    "process",
    "data",
    "let",
    "add",
    "extra",
    "column",
    "represents",
    "cumulative",
    "sum",
    "annual",
    "integration",
    "country",
    "1980",
    "afghanistan",
    "example",
    "58",
    "639",
    "total",
    "albania",
    "15",
    "699",
    "let",
    "name",
    "data",
    "frame",
    "df",
    "underscore",
    "canada",
    "know",
    "data",
    "stored",
    "data",
    "frame",
    "df",
    "underscore",
    "canada",
    "let",
    "see",
    "generate",
    "choropleth",
    "map",
    "world",
    "showing",
    "immigration",
    "canada",
    "experts",
    "creating",
    "world",
    "maps",
    "volume",
    "let",
    "go",
    "ahead",
    "create",
    "world",
    "map",
    "time",
    "let",
    "use",
    "matte",
    "box",
    "bright",
    "tile",
    "set",
    "result",
    "nice",
    "world",
    "map",
    "displaying",
    "name",
    "every",
    "country",
    "convert",
    "map",
    "choropleth",
    "map",
    "first",
    "define",
    "variable",
    "points",
    "geojson",
    "file",
    "apply",
    "choropleth",
    "function",
    "world",
    "map",
    "tell",
    "use",
    "columns",
    "country",
    "total",
    "df",
    "underscore",
    "canada",
    "data",
    "frame",
    "use",
    "country",
    "names",
    "look",
    "geospatial",
    "information",
    "country",
    "geo",
    "json",
    "file",
    "choropleth",
    "map",
    "canada",
    "showing",
    "intensity",
    "immigration",
    "different",
    "countries",
    "worldwide",
    "lab",
    "session",
    "explore",
    "choropleth",
    "maps",
    "details",
    "please",
    "make",
    "sure",
    "complete",
    "modules",
    "lab",
    "session",
    "conclude",
    "video",
    "chloropleth",
    "maps",
    "video",
    "going",
    "see",
    "interactive",
    "data",
    "application",
    "help",
    "improve",
    "business",
    "performance",
    "tools",
    "available",
    "building",
    "application",
    "visuals",
    "dashboard",
    "understanding",
    "business",
    "moving",
    "parts",
    "becomes",
    "easy",
    "based",
    "report",
    "type",
    "data",
    "suitable",
    "graphs",
    "charts",
    "created",
    "one",
    "central",
    "location",
    "provides",
    "easy",
    "way",
    "stakeholders",
    "understand",
    "going",
    "right",
    "wrong",
    "needs",
    "improved",
    "getting",
    "big",
    "picture",
    "one",
    "place",
    "help",
    "businesses",
    "make",
    "informed",
    "decisions",
    "improves",
    "business",
    "performance",
    "general",
    "best",
    "dashboards",
    "answer",
    "critical",
    "business",
    "questions",
    "let",
    "us",
    "say",
    "assigned",
    "task",
    "monitor",
    "report",
    "performance",
    "domestic",
    "flights",
    "following",
    "yearly",
    "review",
    "report",
    "items",
    "top",
    "10",
    "airline",
    "carriers",
    "year",
    "2019",
    "terms",
    "number",
    "flights",
    "number",
    "flights",
    "2019",
    "split",
    "month",
    "number",
    "travelers",
    "state",
    "california",
    "states",
    "split",
    "distance",
    "group",
    "let",
    "us",
    "look",
    "two",
    "ways",
    "presenting",
    "report",
    "type",
    "1",
    "report",
    "information",
    "presented",
    "tables",
    "inference",
    "tables",
    "documented",
    "reference",
    "report",
    "type",
    "2",
    "presenting",
    "report",
    "dashboard",
    "format",
    "hovering",
    "chart",
    "provide",
    "details",
    "data",
    "points",
    "bottom",
    "sunburst",
    "chart",
    "click",
    "different",
    "numbers",
    "drill",
    "levels",
    "get",
    "detailed",
    "information",
    "segment",
    "observe",
    "difference",
    "presentation",
    "findings",
    "need",
    "get",
    "report",
    "data",
    "static",
    "data",
    "also",
    "presenting",
    "result",
    "using",
    "tables",
    "documents",
    "time",
    "consuming",
    "less",
    "visually",
    "appealing",
    "difficult",
    "comprehend",
    "data",
    "scientist",
    "able",
    "create",
    "deliver",
    "story",
    "around",
    "findings",
    "way",
    "stakeholders",
    "easily",
    "understand",
    "mind",
    "dashboards",
    "way",
    "go",
    "let",
    "us",
    "take",
    "look",
    "dashboarding",
    "tool",
    "options",
    "available",
    "python",
    "dash",
    "python",
    "framework",
    "building",
    "web",
    "analytic",
    "applications",
    "written",
    "top",
    "flask",
    "plotly",
    "js",
    "dash",
    "well",
    "suited",
    "building",
    "data",
    "visualization",
    "apps",
    "highly",
    "custom",
    "user",
    "interfaces",
    "panel",
    "works",
    "visualizations",
    "bokeh",
    "matplotlib",
    "hollow",
    "views",
    "many",
    "python",
    "plotting",
    "libraries",
    "making",
    "instantly",
    "viewable",
    "either",
    "individually",
    "combined",
    "interactive",
    "widgets",
    "control",
    "panel",
    "works",
    "equally",
    "well",
    "jupiter",
    "notebooks",
    "creating",
    "quick",
    "data",
    "exploration",
    "tools",
    "panel",
    "also",
    "used",
    "standalone",
    "deployed",
    "apps",
    "dashboards",
    "allowing",
    "easily",
    "switch",
    "contexts",
    "needed",
    "voila",
    "turns",
    "jupiter",
    "notebooks",
    "standalone",
    "web",
    "applications",
    "used",
    "separate",
    "layout",
    "tools",
    "like",
    "jupiter",
    "flex",
    "templates",
    "like",
    "voila",
    "beautify",
    "streamlit",
    "easily",
    "turn",
    "data",
    "scripts",
    "shareable",
    "web",
    "apps",
    "three",
    "main",
    "applications",
    "embrace",
    "python",
    "scripting",
    "treat",
    "widgets",
    "variables",
    "reuse",
    "data",
    "computation",
    "tools",
    "used",
    "dashboarding",
    "bokeh",
    "plotting",
    "library",
    "widget",
    "app",
    "library",
    "acts",
    "server",
    "plots",
    "dashboards",
    "panelists",
    "one",
    "dashboarding",
    "tools",
    "built",
    "bokeh",
    "ippy",
    "widgets",
    "provides",
    "array",
    "jupiter",
    "compatible",
    "widgets",
    "interface",
    "supported",
    "many",
    "python",
    "libraries",
    "sharing",
    "dashboard",
    "requires",
    "separate",
    "deployable",
    "server",
    "like",
    "voila",
    "matplotlib",
    "comprehensive",
    "library",
    "creating",
    "static",
    "animated",
    "interactive",
    "visualizations",
    "python",
    "bowtie",
    "allows",
    "users",
    "build",
    "dashboards",
    "pure",
    "python",
    "flask",
    "web",
    "server",
    "used",
    "build",
    "arbitrary",
    "websites",
    "including",
    "python",
    "plots",
    "function",
    "flask",
    "dashboards",
    "learn",
    "tools",
    "source",
    "link",
    "course",
    "focusing",
    "dash",
    "music",
    "foreign",
    "going",
    "provide",
    "overview",
    "plotly",
    "python",
    "library",
    "plotly",
    "plotly",
    "interactive",
    "open",
    "source",
    "plotting",
    "library",
    "supports",
    "40",
    "unique",
    "chart",
    "types",
    "available",
    "python",
    "r",
    "javascript",
    "plotly",
    "python",
    "built",
    "top",
    "plotly",
    "javascript",
    "library",
    "includes",
    "chart",
    "types",
    "like",
    "statistical",
    "financial",
    "maps",
    "scientific",
    "data",
    "visualizations",
    "created",
    "using",
    "plotly",
    "python",
    "displayed",
    "jupiter",
    "notebook",
    "saved",
    "standalone",
    "html",
    "files",
    "served",
    "part",
    "pure",
    "python",
    "built",
    "web",
    "applications",
    "using",
    "dash",
    "focus",
    "lesson",
    "two",
    "plotly",
    "sub",
    "modules",
    "plotly",
    "graph",
    "objects",
    "plotly",
    "express",
    "plotly",
    "graph",
    "objects",
    "low",
    "level",
    "interface",
    "figures",
    "traces",
    "layout",
    "plotly",
    "graph",
    "objects",
    "module",
    "provides",
    "automatically",
    "generated",
    "hierarchy",
    "classes",
    "figures",
    "traces",
    "layout",
    "called",
    "graph",
    "objects",
    "graph",
    "objects",
    "used",
    "representing",
    "figures",
    "top",
    "level",
    "class",
    "underscore",
    "plotly",
    "expresses",
    "high",
    "level",
    "wrapper",
    "plotly",
    "recommended",
    "starting",
    "point",
    "creating",
    "common",
    "figures",
    "provided",
    "plotly",
    "using",
    "simple",
    "syntax",
    "uses",
    "graph",
    "objects",
    "internally",
    "let",
    "us",
    "see",
    "use",
    "underscore",
    "objects",
    "submodule",
    "creating",
    "simple",
    "line",
    "chart",
    "first",
    "import",
    "required",
    "packages",
    "importing",
    "graph",
    "objects",
    "go",
    "generate",
    "sample",
    "data",
    "using",
    "numpy",
    "contains",
    "json",
    "object",
    "dictionary",
    "structure",
    "since",
    "imported",
    "plotly",
    "graph",
    "objects",
    "go",
    "previous",
    "slide",
    "go",
    "json",
    "object",
    "chart",
    "plotted",
    "updating",
    "values",
    "go",
    "object",
    "keywords",
    "create",
    "figure",
    "adding",
    "scatter",
    "type",
    "trace",
    "next",
    "layout",
    "figure",
    "updated",
    "using",
    "update",
    "layout",
    "method",
    "updating",
    "chart",
    "title",
    "plotted",
    "figure",
    "create",
    "line",
    "chart",
    "using",
    "plotly",
    "express",
    "plotly",
    "express",
    "entire",
    "line",
    "chart",
    "created",
    "using",
    "single",
    "command",
    "visualization",
    "automatically",
    "interactive",
    "flotly",
    "express",
    "makes",
    "visualization",
    "easy",
    "create",
    "modify",
    "time",
    "play",
    "plotly",
    "library",
    "next",
    "going",
    "lab",
    "session",
    "using",
    "airline",
    "reporting",
    "database",
    "data",
    "asset",
    "exchange",
    "demonstrate",
    "use",
    "plotly",
    "graph",
    "objects",
    "express",
    "creating",
    "charts",
    "quick",
    "overview",
    "airline",
    "reporting",
    "data",
    "set",
    "reporting",
    "carrier",
    "performance",
    "data",
    "set",
    "contains",
    "information",
    "approximately",
    "200",
    "million",
    "domestic",
    "flights",
    "reported",
    "united",
    "states",
    "bureau",
    "transportation",
    "statistics",
    "data",
    "set",
    "contains",
    "basic",
    "information",
    "flight",
    "date",
    "time",
    "departure",
    "airport",
    "arrival",
    "airport",
    "applicable",
    "amount",
    "time",
    "flight",
    "delayed",
    "information",
    "reason",
    "delay",
    "let",
    "us",
    "start",
    "lab",
    "foreign",
    "music",
    "going",
    "see",
    "overview",
    "dash",
    "library",
    "dash",
    "open",
    "source",
    "user",
    "interface",
    "python",
    "library",
    "creating",
    "reactive",
    "applications",
    "enterprise",
    "ready",
    "member",
    "plotley",
    "open",
    "source",
    "tools",
    "dash",
    "applications",
    "web",
    "servers",
    "running",
    "flask",
    "communicating",
    "json",
    "packets",
    "http",
    "requests",
    "dash",
    "front",
    "end",
    "renders",
    "components",
    "using",
    "easy",
    "build",
    "graphical",
    "user",
    "interface",
    "using",
    "dash",
    "abstracts",
    "technologies",
    "required",
    "build",
    "applications",
    "dash",
    "declarative",
    "reactive",
    "dash",
    "output",
    "rendered",
    "web",
    "browser",
    "deployed",
    "servers",
    "dash",
    "uses",
    "simple",
    "reactive",
    "decorator",
    "binding",
    "code",
    "ui",
    "inherently",
    "mobile",
    "ready",
    "let",
    "us",
    "say",
    "planning",
    "create",
    "application",
    "answer",
    "business",
    "question",
    "first",
    "step",
    "need",
    "determine",
    "layout",
    "application",
    "decide",
    "chart",
    "use",
    "place",
    "example",
    "called",
    "layout",
    "part",
    "dash",
    "second",
    "part",
    "add",
    "interactivity",
    "application",
    "two",
    "components",
    "dash",
    "first",
    "core",
    "components",
    "import",
    "core",
    "components",
    "dcc",
    "using",
    "import",
    "statement",
    "next",
    "html",
    "components",
    "import",
    "html",
    "components",
    "html",
    "using",
    "import",
    "statement",
    "let",
    "us",
    "explore",
    "dash",
    "underscore",
    "html",
    "underscore",
    "components",
    "library",
    "component",
    "every",
    "html",
    "tag",
    "compose",
    "layout",
    "using",
    "python",
    "structures",
    "dash",
    "dash",
    "library",
    "dash",
    "underscore",
    "html",
    "underscore",
    "components",
    "library",
    "also",
    "provides",
    "classes",
    "html",
    "tags",
    "keyword",
    "arguments",
    "describe",
    "html",
    "attributes",
    "like",
    "style",
    "class",
    "name",
    "id",
    "knowledge",
    "html",
    "css",
    "required",
    "help",
    "styling",
    "dashboards",
    "let",
    "us",
    "see",
    "example",
    "use",
    "html",
    "components",
    "start",
    "creating",
    "dash",
    "application",
    "create",
    "division",
    "application",
    "layout",
    "add",
    "components",
    "outer",
    "layer",
    "division",
    "first",
    "provide",
    "name",
    "application",
    "using",
    "html",
    "heading",
    "component",
    "h1",
    "style",
    "parameter",
    "used",
    "change",
    "font",
    "color",
    "size",
    "border",
    "heading",
    "next",
    "add",
    "paragraph",
    "content",
    "page",
    "using",
    "html",
    "paragraph",
    "component",
    "p",
    "division",
    "created",
    "inside",
    "outer",
    "division",
    "providing",
    "division",
    "content",
    "new",
    "division",
    "styling",
    "using",
    "style",
    "parameter",
    "components",
    "put",
    "together",
    "application",
    "layout",
    "create",
    "html",
    "division",
    "add",
    "components",
    "multiple",
    "divisions",
    "added",
    "outer",
    "application",
    "layout",
    "dash",
    "underscore",
    "core",
    "underscore",
    "components",
    "describe",
    "higher",
    "level",
    "components",
    "interactive",
    "generated",
    "javascript",
    "html",
    "css",
    "library",
    "examples",
    "core",
    "components",
    "creating",
    "slider",
    "input",
    "area",
    "check",
    "items",
    "date",
    "picker",
    "explore",
    "components",
    "using",
    "reference",
    "link",
    "provided",
    "end",
    "slide",
    "let",
    "us",
    "see",
    "add",
    "slicer",
    "drop",
    "application",
    "drop",
    "use",
    "dcc",
    "dot",
    "drop",
    "component",
    "create",
    "drop",
    "list",
    "options",
    "parameter",
    "dictionary",
    "label",
    "hold",
    "drop",
    "display",
    "label",
    "name",
    "value",
    "hold",
    "value",
    "label",
    "also",
    "provide",
    "default",
    "drop",
    "display",
    "label",
    "using",
    "value",
    "parameter",
    "slider",
    "use",
    "component",
    "provide",
    "min",
    "max",
    "value",
    "slider",
    "marks",
    "parameter",
    "used",
    "adding",
    "slide",
    "marker",
    "value",
    "parameter",
    "adding",
    "default",
    "value",
    "music",
    "video",
    "see",
    "connect",
    "core",
    "html",
    "components",
    "using",
    "callbacks",
    "callback",
    "python",
    "function",
    "automatically",
    "called",
    "dash",
    "whenever",
    "input",
    "component",
    "property",
    "changes",
    "callback",
    "function",
    "decorated",
    "decorator",
    "tell",
    "dash",
    "basically",
    "whenever",
    "change",
    "input",
    "component",
    "value",
    "callback",
    "function",
    "wrapped",
    "decorator",
    "called",
    "followed",
    "update",
    "output",
    "component",
    "children",
    "application",
    "layout",
    "let",
    "us",
    "look",
    "callback",
    "function",
    "skeleton",
    "first",
    "create",
    "function",
    "perform",
    "operations",
    "return",
    "desired",
    "result",
    "output",
    "component",
    "decorate",
    "callback",
    "function",
    "decorator",
    "takes",
    "two",
    "parameters",
    "output",
    "sets",
    "result",
    "returned",
    "callback",
    "function",
    "component",
    "id",
    "input",
    "sets",
    "input",
    "provided",
    "callback",
    "function",
    "component",
    "id",
    "connect",
    "input",
    "output",
    "desired",
    "properties",
    "see",
    "action",
    "example",
    "using",
    "airline",
    "data",
    "use",
    "case",
    "extract",
    "top",
    "10",
    "airline",
    "carriers",
    "provided",
    "input",
    "year",
    "selected",
    "number",
    "flights",
    "based",
    "input",
    "year",
    "output",
    "change",
    "first",
    "import",
    "required",
    "packages",
    "seen",
    "import",
    "pandas",
    "dash",
    "dash",
    "core",
    "html",
    "components",
    "new",
    "entry",
    "dash",
    "dependencies",
    "dash",
    "dependencies",
    "import",
    "input",
    "output",
    "use",
    "callback",
    "function",
    "read",
    "airline",
    "data",
    "pandas",
    "data",
    "frame",
    "load",
    "data",
    "frame",
    "start",
    "app",
    "read",
    "inside",
    "callback",
    "function",
    "start",
    "designing",
    "dash",
    "application",
    "layout",
    "adding",
    "components",
    "first",
    "provide",
    "title",
    "dash",
    "app",
    "using",
    "html",
    "heading",
    "component",
    "h1",
    "style",
    "using",
    "style",
    "parameter",
    "next",
    "add",
    "html",
    "division",
    "text",
    "input",
    "core",
    "component",
    "dash",
    "inputs",
    "outputs",
    "application",
    "simply",
    "properties",
    "particular",
    "component",
    "example",
    "input",
    "value",
    "property",
    "component",
    "id",
    "input",
    "dash",
    "year",
    "default",
    "value",
    "update",
    "value",
    "callback",
    "function",
    "lastly",
    "add",
    "division",
    "graph",
    "core",
    "component",
    "core",
    "component",
    "bar",
    "dash",
    "plot",
    "id",
    "update",
    "inside",
    "callback",
    "function",
    "note",
    "component",
    "ids",
    "add",
    "callback",
    "decorator",
    "input",
    "callback",
    "component",
    "id",
    "input",
    "dash",
    "year",
    "property",
    "value",
    "output",
    "callback",
    "component",
    "id",
    "bar",
    "dash",
    "plot",
    "property",
    "figure",
    "component",
    "underscore",
    "id",
    "component",
    "underscore",
    "property",
    "keywords",
    "optional",
    "included",
    "clarity",
    "next",
    "define",
    "callback",
    "function",
    "get",
    "underscore",
    "graph",
    "entered",
    "year",
    "input",
    "using",
    "year",
    "extracted",
    "required",
    "information",
    "data",
    "finally",
    "application",
    "layout",
    "graph",
    "updated",
    "lastly",
    "run",
    "application",
    "output",
    "code",
    "initial",
    "input",
    "year",
    "note",
    "update",
    "year",
    "graph",
    "updated",
    "year",
    "second",
    "example",
    "callback",
    "two",
    "inputs",
    "similar",
    "one",
    "input",
    "callback",
    "except",
    "changes",
    "add",
    "division",
    "one",
    "text",
    "input",
    "component",
    "id",
    "input",
    "dash",
    "b",
    "add",
    "new",
    "input",
    "component",
    "id",
    "input",
    "dash",
    "b",
    "decorator",
    "inside",
    "list",
    "next",
    "define",
    "callback",
    "function",
    "get",
    "underscore",
    "graph",
    "takes",
    "entered",
    "year",
    "entered",
    "state",
    "input",
    "parameters",
    "computation",
    "performed",
    "extract",
    "information",
    "application",
    "layout",
    "updated",
    "graph",
    "output",
    "code",
    "initial",
    "input",
    "year",
    "2010",
    "state",
    "al",
    "alabama",
    "updated",
    "year",
    "state",
    "observe",
    "graph",
    "updated",
    "parallel",
    "let",
    "us",
    "start",
    "lab",
    "music",
    "congratulations",
    "making",
    "far",
    "successfully",
    "completing",
    "capstone",
    "project",
    "earn",
    "data",
    "analyst",
    "professional",
    "certificate",
    "capstone",
    "provides",
    "practical",
    "experience",
    "demonstrate",
    "skills",
    "picked",
    "far",
    "professional",
    "certificate",
    "program",
    "part",
    "capstone",
    "project",
    "take",
    "role",
    "data",
    "analyst",
    "global",
    "business",
    "services",
    "firm",
    "role",
    "analyzing",
    "several",
    "data",
    "sets",
    "help",
    "identify",
    "trends",
    "emerging",
    "technologies",
    "module",
    "1",
    "collect",
    "data",
    "technology",
    "skills",
    "demand",
    "various",
    "sources",
    "including",
    "job",
    "postings",
    "blog",
    "posts",
    "surveys",
    "module",
    "2",
    "take",
    "collected",
    "data",
    "prepare",
    "analysis",
    "using",
    "data",
    "wrangling",
    "techniques",
    "like",
    "finding",
    "duplicates",
    "removing",
    "duplicates",
    "finding",
    "missing",
    "values",
    "inputting",
    "missing",
    "values",
    "continue",
    "module",
    "3",
    "apply",
    "statistical",
    "techniques",
    "analyze",
    "data",
    "identify",
    "insights",
    "trends",
    "like",
    "top",
    "programming",
    "languages",
    "demand",
    "top",
    "database",
    "skills",
    "demand",
    "popular",
    "ides",
    "demographic",
    "data",
    "like",
    "gender",
    "age",
    "distribution",
    "developers",
    "module",
    "4",
    "focus",
    "choosing",
    "appropriate",
    "visualization",
    "based",
    "data",
    "want",
    "present",
    "using",
    "charts",
    "plots",
    "histograms",
    "help",
    "reveal",
    "findings",
    "trends",
    "module",
    "5",
    "employ",
    "cognos",
    "create",
    "interactive",
    "dashboards",
    "help",
    "analyze",
    "present",
    "data",
    "dynamically",
    "final",
    "module",
    "use",
    "storytelling",
    "skills",
    "provide",
    "narrative",
    "present",
    "findings",
    "analysis",
    "provided",
    "presentation",
    "template",
    "begin",
    "process",
    "help",
    "create",
    "compelling",
    "story",
    "present",
    "findings",
    "module",
    "includes",
    "short",
    "quiz",
    "test",
    "knowledge",
    "evaluated",
    "based",
    "quizzes",
    "module",
    "dashboard",
    "storytelling",
    "presentation",
    "create",
    "reviewed",
    "graded",
    "peers",
    "begin",
    "recommend",
    "taking",
    "minutes",
    "explore",
    "course",
    "site",
    "review",
    "material",
    "cover",
    "week",
    "preview",
    "assignments",
    "need",
    "complete",
    "pass",
    "course",
    "click",
    "discussions",
    "see",
    "forums",
    "discuss",
    "course",
    "material",
    "fellow",
    "learners",
    "course",
    "team",
    "questions",
    "course",
    "content",
    "please",
    "post",
    "forums",
    "get",
    "help",
    "others",
    "course",
    "community",
    "technical",
    "problems",
    "coursera",
    "platform",
    "visit",
    "learner",
    "help",
    "center",
    "excited",
    "join",
    "us",
    "hope",
    "enjoy",
    "course",
    "good",
    "luck",
    "let",
    "get",
    "started",
    "music",
    "finding",
    "cleaning",
    "data",
    "important",
    "first",
    "step",
    "data",
    "analysis",
    "concept",
    "lost",
    "able",
    "organize",
    "represent",
    "findings",
    "effectively",
    "audience",
    "video",
    "learn",
    "represent",
    "findings",
    "focusing",
    "specific",
    "elements",
    "create",
    "successful",
    "data",
    "findings",
    "report",
    "data",
    "collected",
    "cleaned",
    "organized",
    "work",
    "interpretation",
    "begins",
    "able",
    "obtain",
    "complete",
    "view",
    "data",
    "hopefully",
    "answer",
    "questions",
    "formed",
    "starting",
    "analysis",
    "typically",
    "begin",
    "compose",
    "findings",
    "report",
    "explains",
    "learned",
    "depending",
    "stakeholders",
    "receive",
    "information",
    "report",
    "could",
    "vary",
    "form",
    "could",
    "include",
    "paper",
    "style",
    "report",
    "slideshow",
    "presentation",
    "maybe",
    "even",
    "findings",
    "report",
    "crucial",
    "part",
    "data",
    "analysis",
    "conveys",
    "discovered",
    "beginning",
    "process",
    "collected",
    "data",
    "information",
    "may",
    "seem",
    "little",
    "little",
    "overwhelming",
    "best",
    "way",
    "get",
    "block",
    "begin",
    "creating",
    "outline",
    "completing",
    "outline",
    "get",
    "complete",
    "picture",
    "begin",
    "write",
    "precise",
    "simple",
    "manner",
    "many",
    "different",
    "formats",
    "creating",
    "presentation",
    "created",
    "simple",
    "outline",
    "easy",
    "follow",
    "yet",
    "effective",
    "creating",
    "outline",
    "always",
    "remember",
    "structure",
    "towards",
    "audience",
    "create",
    "presentation",
    "appropriate",
    "situation",
    "first",
    "begin",
    "cover",
    "page",
    "beginning",
    "section",
    "title",
    "presentation",
    "name",
    "date",
    "next",
    "section",
    "outline",
    "executive",
    "summary",
    "table",
    "contents",
    "table",
    "contents",
    "contain",
    "sections",
    "subsections",
    "report",
    "order",
    "give",
    "audience",
    "overview",
    "contents",
    "also",
    "enables",
    "readers",
    "go",
    "directly",
    "specific",
    "section",
    "may",
    "important",
    "continue",
    "presentation",
    "introduction",
    "methodology",
    "result",
    "discussion",
    "conclusion",
    "finally",
    "appendix",
    "note",
    "depth",
    "length",
    "element",
    "may",
    "vary",
    "depending",
    "audience",
    "format",
    "report",
    "first",
    "step",
    "creating",
    "report",
    "properly",
    "creating",
    "executive",
    "summary",
    "summary",
    "briefly",
    "explain",
    "details",
    "project",
    "considered",
    "document",
    "information",
    "taken",
    "main",
    "points",
    "report",
    "acceptable",
    "repeat",
    "information",
    "new",
    "information",
    "presented",
    "next",
    "section",
    "table",
    "contents",
    "introduction",
    "introduction",
    "explains",
    "nature",
    "analysis",
    "states",
    "problem",
    "gives",
    "questions",
    "answered",
    "performing",
    "analysis",
    "next",
    "section",
    "methodology",
    "methodology",
    "explains",
    "data",
    "sources",
    "used",
    "analysis",
    "outlines",
    "plan",
    "collected",
    "data",
    "example",
    "cluster",
    "regression",
    "method",
    "used",
    "analyze",
    "data",
    "next",
    "results",
    "section",
    "section",
    "goes",
    "detail",
    "data",
    "collection",
    "organized",
    "analyzed",
    "portion",
    "would",
    "also",
    "contain",
    "charts",
    "graphs",
    "would",
    "substantiate",
    "results",
    "call",
    "attention",
    "complex",
    "crucial",
    "findings",
    "providing",
    "interpretation",
    "data",
    "able",
    "give",
    "detailed",
    "explanation",
    "audience",
    "convey",
    "relates",
    "problem",
    "stated",
    "introduction",
    "next",
    "discuss",
    "report",
    "findings",
    "implications",
    "section",
    "would",
    "engage",
    "audience",
    "discussion",
    "implications",
    "drawn",
    "research",
    "example",
    "let",
    "say",
    "conducting",
    "research",
    "top",
    "programming",
    "languages",
    "college",
    "graduates",
    "would",
    "find",
    "need",
    "learn",
    "multiple",
    "languages",
    "remain",
    "competitive",
    "job",
    "market",
    "would",
    "one",
    "language",
    "always",
    "reign",
    "supreme",
    "reached",
    "conclusion",
    "report",
    "findings",
    "final",
    "section",
    "reiterate",
    "problem",
    "given",
    "introduction",
    "gives",
    "overall",
    "summary",
    "findings",
    "would",
    "also",
    "state",
    "outcome",
    "analysis",
    "steps",
    "would",
    "taken",
    "future",
    "last",
    "appendix",
    "section",
    "would",
    "contain",
    "information",
    "really",
    "fit",
    "main",
    "body",
    "report",
    "deemed",
    "still",
    "important",
    "enough",
    "include",
    "type",
    "information",
    "could",
    "include",
    "locations",
    "raw",
    "data",
    "collected",
    "details",
    "resources",
    "acknowledgments",
    "references",
    "video",
    "learned",
    "important",
    "elements",
    "creating",
    "successful",
    "data",
    "findings",
    "report",
    "next",
    "video",
    "learn",
    "best",
    "practices",
    "presenting",
    "findings",
    "music",
    "thank",
    "okay",
    "spent",
    "weeks",
    "maybe",
    "months",
    "studying",
    "data",
    "time",
    "come",
    "report",
    "findings",
    "questions",
    "answered",
    "feel",
    "good",
    "story",
    "speak",
    "audience",
    "leave",
    "intended",
    "message",
    "video",
    "learn",
    "present",
    "findings",
    "way",
    "engage",
    "keep",
    "attention",
    "audience",
    "delivering",
    "presentations",
    "may",
    "seem",
    "easy",
    "important",
    "factors",
    "remember",
    "accurately",
    "conveying",
    "message",
    "make",
    "sure",
    "charts",
    "graphs",
    "small",
    "clearly",
    "labeled",
    "use",
    "data",
    "supporting",
    "evidence",
    "share",
    "one",
    "point",
    "chart",
    "graph",
    "eliminate",
    "data",
    "support",
    "key",
    "message",
    "ever",
    "sat",
    "presentation",
    "information",
    "presented",
    "difficult",
    "read",
    "understand",
    "may",
    "seem",
    "apparent",
    "small",
    "charts",
    "labels",
    "easily",
    "overlooked",
    "make",
    "sure",
    "test",
    "visualizations",
    "sitting",
    "different",
    "distances",
    "like",
    "audience",
    "data",
    "seen",
    "clearly",
    "maybe",
    "redesign",
    "considered",
    "preparing",
    "report",
    "may",
    "feel",
    "way",
    "explain",
    "findings",
    "pack",
    "slides",
    "data",
    "may",
    "seem",
    "sensible",
    "data",
    "analyst",
    "audience",
    "probably",
    "appreciate",
    "intricacies",
    "data",
    "see",
    "pile",
    "numbers",
    "resolve",
    "issue",
    "begin",
    "forming",
    "key",
    "messages",
    "need",
    "conveyed",
    "audience",
    "build",
    "story",
    "around",
    "messages",
    "forming",
    "outline",
    "go",
    "back",
    "insert",
    "data",
    "support",
    "findings",
    "relying",
    "heavily",
    "data",
    "using",
    "method",
    "create",
    "presentation",
    "create",
    "story",
    "engaging",
    "interesting",
    "audience",
    "presenting",
    "data",
    "using",
    "charts",
    "graphs",
    "best",
    "way",
    "get",
    "message",
    "across",
    "however",
    "supplying",
    "much",
    "information",
    "confusing",
    "example",
    "look",
    "pie",
    "chart",
    "decipher",
    "key",
    "message",
    "presenter",
    "trying",
    "convey",
    "example",
    "chart",
    "much",
    "information",
    "hard",
    "determine",
    "point",
    "presenter",
    "trying",
    "make",
    "focus",
    "audience",
    "sticking",
    "one",
    "idea",
    "summarizing",
    "multiple",
    "points",
    "one",
    "visualization",
    "able",
    "accurately",
    "convey",
    "idea",
    "audience",
    "avoid",
    "confusion",
    "data",
    "analysts",
    "spend",
    "months",
    "researching",
    "data",
    "however",
    "items",
    "seem",
    "interesting",
    "analyst",
    "may",
    "relevant",
    "project",
    "trying",
    "explain",
    "every",
    "little",
    "detail",
    "audience",
    "recognizing",
    "irrelevant",
    "data",
    "could",
    "damage",
    "key",
    "message",
    "eliminating",
    "unnecessary",
    "data",
    "highlighting",
    "data",
    "points",
    "support",
    "key",
    "ideas",
    "keep",
    "presentation",
    "clear",
    "concise",
    "video",
    "learned",
    "creating",
    "presentation",
    "keep",
    "audience",
    "engaged",
    "deliver",
    "clear",
    "concise",
    "message",
    "music"
  ],
  "keywords": [
    "thank",
    "welcome",
    "course",
    "data",
    "analytics",
    "first",
    "series",
    "designed",
    "career",
    "analyst",
    "report",
    "power",
    "transform",
    "business",
    "businesses",
    "today",
    "value",
    "drive",
    "people",
    "creating",
    "set",
    "organizations",
    "analysts",
    "making",
    "choose",
    "path",
    "science",
    "intelligence",
    "working",
    "professional",
    "decision",
    "role",
    "concepts",
    "processes",
    "tools",
    "need",
    "gain",
    "entry",
    "even",
    "current",
    "understanding",
    "ecosystem",
    "analysis",
    "gathering",
    "wrangling",
    "mining",
    "visualization",
    "also",
    "get",
    "day",
    "share",
    "experience",
    "field",
    "options",
    "learning",
    "consider",
    "look",
    "knowledge",
    "best",
    "process",
    "ahead",
    "good",
    "foreign",
    "music",
    "coming",
    "increase",
    "processing",
    "new",
    "addition",
    "around",
    "world",
    "ensure",
    "includes",
    "whole",
    "independent",
    "entities",
    "sources",
    "different",
    "types",
    "skills",
    "generate",
    "insights",
    "stakeholders",
    "generated",
    "applications",
    "store",
    "required",
    "let",
    "start",
    "available",
    "variety",
    "structured",
    "unstructured",
    "sets",
    "text",
    "images",
    "videos",
    "click",
    "user",
    "social",
    "media",
    "platforms",
    "internet",
    "things",
    "devices",
    "databases",
    "many",
    "step",
    "copy",
    "original",
    "repository",
    "looking",
    "formats",
    "security",
    "work",
    "raw",
    "common",
    "place",
    "needs",
    "organized",
    "access",
    "end",
    "users",
    "organization",
    "example",
    "storage",
    "use",
    "personal",
    "case",
    "tables",
    "within",
    "across",
    "systems",
    "another",
    "key",
    "could",
    "management",
    "repositories",
    "provide",
    "high",
    "finally",
    "cases",
    "include",
    "apis",
    "line",
    "specific",
    "may",
    "reports",
    "dashboards",
    "custom",
    "important",
    "note",
    "technologies",
    "cloud",
    "machine",
    "big",
    "name",
    "thanks",
    "every",
    "performance",
    "open",
    "source",
    "libraries",
    "scientists",
    "models",
    "training",
    "methods",
    "way",
    "techniques",
    "learn",
    "decisions",
    "along",
    "using",
    "future",
    "whether",
    "patterns",
    "financial",
    "transactions",
    "customer",
    "offers",
    "based",
    "advantage",
    "number",
    "skill",
    "roles",
    "video",
    "going",
    "bi",
    "amounts",
    "starts",
    "make",
    "operations",
    "extract",
    "clean",
    "manage",
    "enable",
    "various",
    "well",
    "like",
    "must",
    "programming",
    "technology",
    "relational",
    "stores",
    "short",
    "numbers",
    "language",
    "identify",
    "find",
    "apply",
    "statistical",
    "analyze",
    "visualize",
    "present",
    "findings",
    "answer",
    "questions",
    "search",
    "popular",
    "correlation",
    "sales",
    "one",
    "product",
    "require",
    "spreadsheets",
    "writing",
    "queries",
    "create",
    "charts",
    "storytelling",
    "build",
    "train",
    "likely",
    "next",
    "month",
    "customers",
    "quarter",
    "transaction",
    "statistics",
    "languages",
    "building",
    "possible",
    "take",
    "focus",
    "solutions",
    "functions",
    "simple",
    "terms",
    "uses",
    "predict",
    "professionals",
    "cleaning",
    "analyzing",
    "results",
    "reporting",
    "points",
    "helps",
    "understand",
    "action",
    "time",
    "resources",
    "greater",
    "explore",
    "four",
    "primary",
    "goal",
    "descriptive",
    "given",
    "presenting",
    "essential",
    "question",
    "takes",
    "change",
    "website",
    "without",
    "region",
    "marketing",
    "trends",
    "used",
    "areas",
    "purpose",
    "say",
    "might",
    "done",
    "basis",
    "cars",
    "environment",
    "changing",
    "etc",
    "automatically",
    "prices",
    "steps",
    "problem",
    "result",
    "want",
    "clearly",
    "defined",
    "begin",
    "clear",
    "x",
    "know",
    "job",
    "quality",
    "issues",
    "missing",
    "values",
    "outliers",
    "age",
    "multiple",
    "several",
    "ways",
    "loop",
    "hold",
    "true",
    "impact",
    "ability",
    "communicate",
    "part",
    "graphs",
    "maps",
    "listen",
    "talk",
    "define",
    "term",
    "means",
    "collecting",
    "information",
    "state",
    "tell",
    "something",
    "technical",
    "much",
    "larger",
    "really",
    "put",
    "test",
    "comes",
    "collect",
    "sense",
    "review",
    "anything",
    "help",
    "always",
    "statements",
    "someone",
    "right",
    "see",
    "almost",
    "company",
    "able",
    "exactly",
    "better",
    "would",
    "relevant",
    "population",
    "maybe",
    "audience",
    "products",
    "services",
    "offer",
    "certain",
    "content",
    "target",
    "type",
    "typical",
    "collection",
    "filtering",
    "complex",
    "corresponding",
    "requires",
    "combination",
    "microsoft",
    "excel",
    "google",
    "sheets",
    "software",
    "ibm",
    "cognos",
    "visual",
    "tableau",
    "r",
    "python",
    "c",
    "plus",
    "sql",
    "hadoop",
    "features",
    "errors",
    "statement",
    "project",
    "us",
    "story",
    "support",
    "show",
    "allow",
    "makes",
    "great",
    "pattern",
    "become",
    "person",
    "sometimes",
    "count",
    "close",
    "details",
    "moving",
    "fast",
    "learned",
    "two",
    "three",
    "years",
    "changed",
    "mean",
    "tool",
    "presentation",
    "ca",
    "actually",
    "compare",
    "especially",
    "lot",
    "trying",
    "last",
    "year",
    "looks",
    "think",
    "full",
    "top",
    "far",
    "widely",
    "database",
    "quite",
    "try",
    "basics",
    "nice",
    "main",
    "uh",
    "either",
    "starting",
    "useful",
    "general",
    "structure",
    "needed",
    "um",
    "figure",
    "join",
    "kind",
    "green",
    "visualizations",
    "words",
    "rows",
    "large",
    "grid",
    "center",
    "known",
    "client",
    "seems",
    "point",
    "list",
    "initial",
    "issue",
    "range",
    "others",
    "area",
    "individual",
    "repeat",
    "average",
    "annual",
    "location",
    "connection",
    "add",
    "instead",
    "third",
    "little",
    "date",
    "percent",
    "mark",
    "provided",
    "therefore",
    "long",
    "come",
    "back",
    "10",
    "related",
    "separate",
    "level",
    "thing",
    "vertical",
    "function",
    "pipeline",
    "head",
    "expected",
    "sure",
    "pivot",
    "keep",
    "seen",
    "volume",
    "go",
    "quick",
    "overview",
    "follows",
    "format",
    "columns",
    "typically",
    "email",
    "contents",
    "files",
    "collected",
    "stored",
    "query",
    "file",
    "web",
    "perform",
    "real",
    "scripting",
    "querying",
    "developing",
    "tasks",
    "components",
    "jupiter",
    "notebooks",
    "examples",
    "cover",
    "meaningful",
    "characters",
    "specified",
    "model",
    "represented",
    "online",
    "global",
    "tags",
    "server",
    "easily",
    "examine",
    "standard",
    "properties",
    "schema",
    "form",
    "contains",
    "elements",
    "metadata",
    "group",
    "xml",
    "json",
    "attributes",
    "particular",
    "sequence",
    "rules",
    "deal",
    "pages",
    "documents",
    "word",
    "document",
    "examining",
    "spreadsheet",
    "object",
    "row",
    "separated",
    "character",
    "comma",
    "tab",
    "colon",
    "bar",
    "space",
    "commonly",
    "category",
    "csv",
    "running",
    "horizontal",
    "represents",
    "works",
    "column",
    "header",
    "string",
    "integer",
    "length",
    "considered",
    "existing",
    "represent",
    "specify",
    "created",
    "workbook",
    "worksheet",
    "cell",
    "save",
    "code",
    "similar",
    "html",
    "developed",
    "application",
    "fill",
    "read",
    "easy",
    "size",
    "reason",
    "return",
    "previous",
    "scraping",
    "resource",
    "db2",
    "system",
    "relationship",
    "distribution",
    "made",
    "per",
    "single",
    "table",
    "contain",
    "special",
    "map",
    "although",
    "additional",
    "formatting",
    "formulas",
    "program",
    "obtain",
    "requests",
    "performing",
    "amount",
    "service",
    "lookup",
    "validation",
    "check",
    "screen",
    "parameters",
    "items",
    "price",
    "authors",
    "testing",
    "beautiful",
    "soup",
    "pandas",
    "apache",
    "updated",
    "interface",
    "simply",
    "write",
    "insert",
    "update",
    "delete",
    "records",
    "call",
    "later",
    "advantages",
    "syntax",
    "allows",
    "lines",
    "basic",
    "select",
    "retrieve",
    "quickly",
    "written",
    "low",
    "provides",
    "numpy",
    "task",
    "free",
    "manipulation",
    "array",
    "matplotlib",
    "graph",
    "histogram",
    "pie",
    "following",
    "including",
    "continue",
    "plotly",
    "graphical",
    "plots",
    "interactive",
    "importing",
    "fact",
    "typing",
    "rest",
    "command",
    "filter",
    "sort",
    "objects",
    "pass",
    "small",
    "input",
    "dbms",
    "modify",
    "called",
    "six",
    "often",
    "referred",
    "rdbms",
    "built",
    "however",
    "response",
    "scale",
    "warehouse",
    "load",
    "etl",
    "since",
    "distributed",
    "id",
    "pertaining",
    "method",
    "produce",
    "enables",
    "relationships",
    "unique",
    "fields",
    "gives",
    "retrieving",
    "capabilities",
    "changes",
    "link",
    "import",
    "continuous",
    "less",
    "stands",
    "accurate",
    "run",
    "times",
    "enter",
    "actual",
    "attribute",
    "keys",
    "integers",
    "strings",
    "session",
    "fit",
    "associated",
    "powerful",
    "option",
    "cells",
    "usually",
    "together",
    "purchase",
    "becomes",
    "visualizing",
    "lots",
    "db",
    "handle",
    "cost",
    "effective",
    "control",
    "iterate",
    "allowing",
    "specifically",
    "relatively",
    "earlier",
    "already",
    "ready",
    "element",
    "advanced",
    "transformation",
    "involves",
    "convert",
    "removing",
    "duplicate",
    "names",
    "null",
    "move",
    "entire",
    "smaller",
    "order",
    "v",
    "higher",
    "false",
    "employee",
    "hours",
    "days",
    "approximately",
    "connect",
    "remember",
    "states",
    "b",
    "2",
    "book",
    "default",
    "directly",
    "via",
    "engine",
    "determine",
    "segment",
    "income",
    "status",
    "ratings",
    "plan",
    "frame",
    "hundred",
    "thousand",
    "privacy",
    "measures",
    "lead",
    "complete",
    "dollars",
    "regulations",
    "couple",
    "groups",
    "combine",
    "version",
    "navigate",
    "displayed",
    "containing",
    "api",
    "similarly",
    "view",
    "second",
    "normalization",
    "remove",
    "five",
    "score",
    "post",
    "output",
    "lastly",
    "watson",
    "team",
    "library",
    "notebook",
    "numerical",
    "package",
    "arrays",
    "mathematical",
    "aggregate",
    "incorrect",
    "duplicates",
    "manually",
    "lower",
    "white",
    "spaces",
    "extra",
    "error",
    "5",
    "operation",
    "still",
    "proportion",
    "scientist",
    "adding",
    "summary",
    "minimum",
    "median",
    "max",
    "negative",
    "correct",
    "highest",
    "applied",
    "sample",
    "total",
    "draw",
    "easier",
    "describe",
    "class",
    "calculate",
    "mode",
    "sum",
    "divided",
    "left",
    "tells",
    "scatter",
    "regression",
    "comparing",
    "exist",
    "rather",
    "maximum",
    "modules",
    "trend",
    "levels",
    "categories",
    "item",
    "tree",
    "variables",
    "essentially",
    "module",
    "figures",
    "reference",
    "everything",
    "box",
    "sheet",
    "showing",
    "comparison",
    "side",
    "message",
    "contained",
    "home",
    "representation",
    "relative",
    "sub",
    "parts",
    "variable",
    "chart",
    "countries",
    "page",
    "positive",
    "entity",
    "equal",
    "display",
    "dashboard",
    "parameter",
    "jupyter",
    "pi",
    "title",
    "colors",
    "formula",
    "highlight",
    "button",
    "3d",
    "dash",
    "feature",
    "drag",
    "drop",
    "dragging",
    "interesting",
    "wanted",
    "sorting",
    "helpful",
    "position",
    "department",
    "discuss",
    "started",
    "inside",
    "dollar",
    "wrong",
    "give",
    "ranges",
    "direction",
    "interested",
    "uppercase",
    "bit",
    "bottom",
    "food",
    "departments",
    "labs",
    "1",
    "selecting",
    "3",
    "empty",
    "slicers",
    "lesson",
    "completing",
    "explain",
    "introduction",
    "calculation",
    "calculations",
    "sorted",
    "lists",
    "component",
    "dot",
    "arrow",
    "instance",
    "numeric",
    "selected",
    "mouse",
    "shift",
    "references",
    "ribbon",
    "print",
    "notice",
    "double",
    "shortcut",
    "styles",
    "added",
    "scroll",
    "press",
    "cross",
    "symbol",
    "paste",
    "mixed",
    "index",
    "zero",
    "20",
    "difficult",
    "zoom",
    "split",
    "section",
    "headings",
    "n",
    "width",
    "e",
    "okay",
    "a2",
    "cursor",
    "menu",
    "copied",
    "distinct",
    "color",
    "car",
    "style",
    "heading",
    "sign",
    "parentheses",
    "multiplication",
    "division",
    "slash",
    "parenthesis",
    "multiply",
    "equals",
    "returns",
    "boolean",
    "operator",
    "hlookup",
    "vlookup",
    "absolute",
    "instances",
    "blue",
    "red",
    "pane",
    "importance",
    "wizard",
    "headers",
    "shown",
    "employees",
    "plot",
    "else",
    "canada",
    "send",
    "country",
    "final",
    "unit",
    "recommended",
    "replace",
    "lowercase",
    "upper",
    "helper",
    "displays",
    "orders",
    "filters",
    "z",
    "nested",
    "condition",
    "resale",
    "salary",
    "quotes",
    "underscore",
    "square",
    "bracket",
    "brackets",
    "argument",
    "located",
    "indicates",
    "rating",
    "shows",
    "label",
    "slicer",
    "lab",
    "rectangle",
    "circle",
    "sparklines",
    "axis",
    "ford",
    "axes",
    "followed",
    "bins",
    "bin",
    "15",
    "height",
    "fuel",
    "url",
    "expression",
    "float",
    "0",
    "expressions",
    "assign",
    "tuple",
    "backslash",
    "tuples",
    "corresponds",
    "slide",
    "recall",
    "dictionary",
    "album",
    "ac",
    "dc",
    "representing",
    "concert",
    "indent",
    "1980",
    "inputs",
    "squares",
    "iteration",
    "passed",
    "body",
    "scope",
    "hello",
    "watching",
    "radius",
    "constructor",
    "df",
    "vector",
    "u",
    "linear",
    "scalar",
    "matrix",
    "request",
    "http",
    "tag",
    "child",
    "clause",
    "star",
    "author",
    "alter",
    "pet",
    "rescue",
    "animal",
    "dogs",
    "dog",
    "dependent",
    "calls",
    "sodium",
    "categorical",
    "predictor",
    "miles",
    "gallon",
    "highway",
    "conclude",
    "squared",
    "polynomial",
    "prediction",
    "predicted",
    "alpha",
    "hyper",
    "immigration",
    "layer",
    "artist",
    "layout",
    "callback"
  ]
}