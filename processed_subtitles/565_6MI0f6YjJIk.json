{
  "text": "what's happening guys my name is\nnicholas ronatt and in this video\nwe're going to be taking a look at a\nipad text generation using\na gpt3 clone called gpt neo in\njust four lines of code let's take a\ndeeper look at\nwhat we'll be going through so first up\nwhat is gpt3\nwell gpt3 is a deep learning powered\nlanguage model\ntrained on 175 billion parameters\nby open ai now this means that it would\ntake a\nhuge amount of time to train something\nas sophisticated as this on a consumer\ngpu\nthe amazing thing about this particular\nmodel is that it's really really\nflexible and performs really really well\non\na range of natural language tasks\nspecifically like text generation\nq a sentiment and classification now\nthe unfortunate thing about gpt3 is that\nit is only available through a closed\nbeta\nthe great thing however is that you're\nable to leverage a gpg3\nclone called gpt neo now the model that\nwe're going to be taking a look in this\nparticular video\nis trained on 2.7 billion parameters so\nit's not exactly the 175 billion\nparameter model the open ai built but it\nis really really sophisticated and\nyou'll see that a little bit later so\nlet's take a look as to what we'll\nactually be going through so first up\nwhat we're going to be doing is\ninstalling gpt neo so gpt neo is going\nto give us a gpt3\nclone which is trained on 2.7 billion\nparameters and can definitely be\nfine-tuned so if you'd like to see a\nvideo on fine-tuning this\nby all means do let me know so once\nwe've installed it we're going to be\nable to generate text\nin just four lines of code so it's\nreally really straightforward and what\nwe'll also do is we'll save that output\nto disk so you can pick it up as a text\nfile and leverage it later on\nnow you're probably thinking how is this\nall going to work well let's take a look\nso first up what we're going to be doing\nis we're going to be leveraging the\nhugging face transformers library to\nload\nour pre-trained gpt neo model then we'll\npass through a text prompt so say for\nexample we might ask\nwhat is the meaning to life import\npandas is pd if we wanted to generate\npython code\nwe could even generate some sql\nstatements as well and then once we've\ngenerated that text or once our models\ngenerated that text will then be able to\noutput that result to a text file using\na standard python with statement\nready to do it let's get to it alrighty\nguys so in order to get started with gpt\nnero there's going to be\nfour things that we need to do now we're\ngoing to keep this tutorial\nrelatively short and sharp we're just\ngoing to power through it and ideally\nby the end of this you should be able to\nget up to speed with gpt neo and start\ngenerating some of your own text so the\nfour things that we need to do\nare install and import our dependencies\nset up our pipeline or our generator\nthen pass through some text and generate\ntext using a prompt\nand then what we're going to do is\noutput that text and save it to a file\nso first things first let's go ahead and\ninstall and import our dependencies now\nthe first dependency that you're going\nto need\nis pytorch so the easiest way to install\nthis is if you just go over to the\npytorch website so pytorch.org\nand again all the code for this as well\nas links to relevant documentation will\nbe in the description below so you can\npick this up and run with it\nso what we're going to go on ahead and\ndo is go to the pytorch website and then\ntowards the bottom you're going to see\nthis section called\ninstall pytorch now all we need to do\nhere is choose\nthe build that we want so we're going to\nchoose stable in this case\nchoose your operating system in this\ncase i'm on a windows machine so i'll\nchoose windows\nchoose what package you want to install\nso i'm going to use pip but you could\nuse conda\nas well if you wanted to in this case\nwe're going to be working with python so\nwe're going to choose python\nwe're leveraging gpu acceleration using\ncuda 11.1\nnow gpu acceleration really isn't going\nto kick in unless you've got a massive\ngpu that's\nable to handle this particular model but\nthat's fine we'll install it using cuda\n11.1 anyway\nso once we've got that you're sort of\ngoing to get this command down the\nbottom here so i'm just going to copy\nthis\nand paste it into my notebook now in\norder to run\na command line within your notebook you\njust need to include an exclamation mark\nand i'm just going to remove the three\nfrom the pip command because i'm just\nusing standard pip and then all we need\nto do is just run this cell so that's\ngoing to go\nahead and install pi torch now i've\nalready got it installed so it went\nrelatively quickly\nso that's our first install done so\ninstalling pytorch remember all you need\nto do is go to pytorch.org\nselect your different options and copy\nthat command run it in a cell\nnow the next thing that we need to do is\nactually install transformers so\ntransformers is a\nreally powerful and probably one of my\nfavorite natural language processing\nlibraries\nand the beautiful thing about\ntransformers is that you get a bunch of\nthese pipelines so you get a\nconversational pipeline feature\nextraction pipeline\ntext generation pipeline a translation\npipeline a whole bunch of pipelines that\nallow you to leverage\nreally really sophisticated nlp models\nrelatively easily so we're going to be\nusing\ntransformers exactly for that so let's\ngo ahead and install transform so this\none's relatively straightforward\nso in order to install transformers all\nwe've gone and done is run\nexclamation mark pip install\ntransformers and that's going to go on\nahead and install\nall of this good stuff here for us so\nthose are our two dependencies\nnow installed now all we need to do is\nimport our main dependency which is\ngoing to be transform\nso let's do it\nokay so that is our transformers library\nnow imported so in order to do that i've\nwritten from\ntransformers import pipeline so this is\nour first line of code so first line\nnow this pipeline over here is\neffectively going to be giving us\nall of these pipelines available now\nwe're going to be using the text\ngeneration pipeline\nso in a second you'll see that we pass\nthrough the text generation\nargument to that particular pipeline to\nbe able to leverage\nour text generation using gpt near but\nagain if you want to deeper dive into\nthis by all means do let me know in the\ncomments below i was thinking a mega\ntutorial might be useful for gpt\nmight also be useful for transformers\nparticularly transformers because\nthere's a bunch of stuff in here\nnow in this case that's our pipeline now\nimported now what we need to do is set\nup our generator so we're going to write\na second line of code\nalrighty that's our second line of code\nnow done\nand dusted so this line of code here is\nactually going on ahead and\nloading up our gpt neo model which is\ngoing to give us our gpt3 clone\nso in this case what we've written is\ngenerator equals pipeline and then to\nthat pipeline we've passed what type of\npipeline we want\nin this case we're going to be\nleveraging the text generation pipeline\nso to do that we've written\ninside of a string text dash generation\nand then i've passed through a comma and\nthen i've pass through a keyword\nparameter so this next keyword parameter\nis what defines\nwhat type of natural language model or\nwhat type of language model you're going\nto be loading into that pipeline\nnow in this particular case we're going\nto be leveraging the gpt\nneo model with 2.7 billion parameters\nso to do that we've written eleuther a i\nforward slash\ngpt dash neo dash 2.7\nb so this means that we're going to be\nleveraging the eluther ai which are the\nguys that have actually gone and built\nthe gpt neo model\nand then by passing through slash gpt\nneo dash 2.7\nb we're importing the 2.7 billion\nparameter model\nnow if you're doing this for the first\ntime it's actually going to download the\nmodel so i believe it is about\n10 gigabytes so it might take a little\nbit of time to download\nbut it will do everything that you need\nto do for you so you don't actually need\nto go and do anything else it will just\ndownload it for you onto disk so you're\nable to leverage it\nthere is also a 1.3 billion parameter\nmodel so if your computer is running a\nlittle bit slow and you wanted to run a\nsmaller model you can do that\nso let's let that go on ahead and load\nand then\nwe'll be able to run our model\nokay so that is our generator now loaded\nso you can see here that that particular\ncell is run so we're no longer have a\nlittle asterisk in there so we're now\nable to run it within our notebook\nthe next thing that we're actually going\nto go on ahead and do and so this is our\nsecond line of code\nsecond line next thing that we're going\nto go ahead and do is start generating\nsome text using a prompt now this prompt\ncould really be whatever you wanted to\nso if you wanted to write a love story\nwrite a poem\nand get some answers to what is the\nmeaning of life this is where you could\npass it through\nso in this case what i'm actually going\nto do is let's start off with that so\nwe'll type in what is the meaning of\nlife\nand what will actually happen so let's\njust make sure this is prompt\nso what will actually happen is when we\npass this prompt to\nour gpt neo model it's actually going to\ntry to generate text\nusing that prompt so you'll actually see\nthat it's trying to answer that maybe\nwrite a bit of a blog post and you'll\nactually get some answers generated\nusing the gpt model which i think is\nabsolutely fascinating\nbut anyway let's actually go on ahead\nand do it so what i've done is i've\ncreated a new variable called prompt so\np-r-o-m-p-t and then i've just set that\nequal to a string\nand you'll see in a second we'll change\nthe string we'll try generating some\nother styles of text maybe some code as\nwell\nthen what we need to do is actually pass\nthat prompt to our generator to be able\nto actually generate code so let's do\nthat\nalrighty before we go ahead and run that\nnext line of code let's take a look at\nwhat we actually wrote let's actually\ninclude some additional cells so we can\nsee this\nso this is our third line of code up\nhere this\nis our fourth line so after this we'll\nactually have our generated text\nof fourth line now in\nthis particular case what i've gone and\ndone is created a new variable called\nres\nfor results and then i've set that equal\nto our generator so in this case you can\nsee that we set up our generator here\nwhat we're doing now is passing some\narguments and keyword arguments\nto that particular generator to generate\ntext so\nhere what we've gone and written is\ngenerator and then to that we've passed\nthrough our prompt which is this\nstring over here then we've just gone\nand set some keyword arguments so you\ncan play around with these if you wanted\nto and this will\ninfluence the results you get back so\nthe first argument\nis max underscore length equals 50. so\nthis defines how long\nyour output is going to be in this case\ni've set it to a limit of 50.\nthen i've passed all 50 words then the\nnext keyword argument is do\nunderscore sample equals true so this is\ngoing to allow us to leverage sampling\nwithin our model\nand then we've also gone and set our\ntemperature to 0.9 so this influences\nhow it actually determines results going\nforward from\na particular token that it's actually\nhad returned back\nso again you can play around with these\nparameters tune them play around\ntake a look at the documentation again\nthis tutorial is going to be super fast\nand we're not going to delve into it too\nmuch\nbut on that note let's go ahead and run\nthis line and generate our text\nokay so that line of code is now run now\nthe speed of which that actually\ngenerates is really dependent on your\nmachine\nso in my case it took about 20 30\nseconds to generate\na string with a max length of 50 words\nbut in this case if you were to pass\nthrough a higher maximum length number\nit will take longer\nnow what we can actually do is take a\nlook at our results if i type in res\ndown here\nyou can actually see that it's gone and\ngenerated this big block of text so you\ncan see that it's gone and says what is\nthe meaning of life\nwhy does it matter oh it's not exactly\nthat happy at the moment\nwhere do i go to find the meaning or at\nleast some sort of explanation for what\ni'm experiencing here and now\ni've been asking this a dozen times now\nnow if we actually go\nand pass this result so if we grab the\nfirst result and type in\ndot generated text this is actually\ngoing to give us our raw string so you\ncan see and if we print this out we'll\nget our string formatting\nso you can see we've actually got our\nline spaces so in this particular case\njust by passing through this short\nprompt we've gone and got this entire\nresult out now if we wanted to generate\nmore text we can just\nchange the maximum length so say i set\nit to 100 run that again\nwe're going to get a longer string\ngenerated so let's let that go on ahead\nand run and then we'll\nideally get a longer answer to what is\nthe meaning of life\nthere you go so it's now gone and\ngenerated a new block of text so all we\nreally did there is we changed the max\nlength parameter\nand in this particular case it's gone\nand generated a bigger block of text so\nwhat is the meaning of life so it still\nstarts out with that prompt in a recent\nconversation with a friend\ni heard him say you must go through life\nwith the attitude that you are never\ngoing to leave\ni had to check on whether he actually\nsaid this to me or if it was in the form\nof a quote or something similar i\ndecided to find the original source of\nthis quote after reading about it in a\nbook on self-help\nquickly found a website so in this case\nit's writing a slightly different\nit's going down a completely different\nroute but again this is just\na random property say for example we\nwanted something a little bit more\ncontextual where so i'm going to set\nour max length back to 50 and what if we\nsaid\nsomething about bitcoin so if we said\nbitcoin\nis going to and then rend that\nparticular\nprompt so if we run that now let's go\nand see what gpt neo\nnow generates\nthere you go so it's now gone and\ngenerated a new text so if you take a\nlook it's gone and written bitcoin is\ngoing to be the most important currency\nin 2020.\nthe crypto market is on the rise and\nbitcoin has gone from a joke in late\n2016 to the world's favorite\ncryptocurrency in 2018. well it's not\nwrong\ni mean 2021 and it's super popular\nthere's been a massive rally in 2018 and\n2019 and again we've cut it off at 50\nbut you can see that it's actually\ngenerating some really really\ninteresting text results now you could\nuse this to generate blog posts maybe\nwrite a song write a poem so on and so\nforth\nbut my particular favorite thing is\nactually using it to write some code\nnow i was testing this out earlier this\nweek and i thought it was super\nfascinating\nso instead of writing our prompt as text\nwhat happens if we wrote\none of the most common lines of code\nthat i wrote so import pandas\nas pd and run that now\nso let's go and see if it actually goes\nand generates some valid python code\nand there you go so what it's actually\ngone and written is import pandas is pd\nwhich was our original prompt\nbut then it's gone and passed through a\nbunch of additional imports so from\ncollections import counter import os\nimport sys import numpy is np so it's\nalmost like it's importing some pretty\nstandard\ndata science libraries i mean the fact\nthat it's got numpy it's got time\nit's got nltk down here so you can see\nthat it's actually really really\ncontextually aware\nand it's able to generate a whole bunch\nof stuff i'm probably going to be\nplaying with this\nall weekend but you can sort of see\nwhat's possible with gpt neo\nnow if you wanted to go on ahead and\nexport this text\nyou could do that really easily so let's\ngo ahead and do that\nokay so before we go on ahead and run\nthat so i just want to sort of show what\ni've written\nso with open and then to that we've\npassed through the name of the file that\nwe want to generate or output\nso in this case i've called it gpt text\ndot txt so you can see that there\nand then we've passed through the w flag\nbecause we want to write it out\nand then we specified as f so this means\nthat we're going to be able to work with\nour file as a variable called\nf then in order to write out our text\ni've just written f\ndot write lines and then i've passed\nthrough this text block here\nso this text block is exactly the same\nas what we were printing out up here now\nwe're just outputting it so if we\nactually go and\nrun that block of text and if we take a\nlook at the folder that we're working in\nlet me bring it up\nyou can see that we've now got this file\ncalled gpt\ntext if we zoom in a little bit so you\ncan see that better\nso you can see that we've got gpt text\nthere and if we actually go and open\nthat up\nyou can see that it's exported all of\nour python code so maybe you could write\nthat use this to write an\nentire data science workflow who knows\nwhat's possible and where you can take\nthis to\nand again if you wanted to use a\ndifferent prompt so say for example we\nwrote something about the current stock\nmarket\ncurrent stock market\nand just run that we could now go\nand export different blocks of text so\nagain whatever you pass around that\nprompt\nthis particular workflow is going to\noutput that to a text file\nso let's let that run and we'll take a\nlook just to make sure that it's now\noutputting our new block of text\nso there you go so what we've now gone\nor what gpt's now gone and written so\nis the current stock market is a unique\nmarket in that it incorporates some\nfundamental market characteristics\ncorrect\nuh together with market psychology human\njudgment\nand human biases such as market timers\nprice momentum and crowd psychology\nthe stock market is like any market for\ngoods and services and if we go and\ncheck out\nour file so you can see that it's now\ngone and exported the text that we had\nexactly as we had inside of our notebook\npretty cool right so this sort of shows\nyou what's possible with gpt neo in a\nnutshell now again\nall we did is we installed and imported\nour dependencies so we went and\ninstalled pytorch and transformers\nand then we wrote four lines of code to\nallow us to go and generate our new\nblocks of text using gpt neo so we wrote\nour\nimport our generator our prompt and then\nwe actually went and ran our prompt so\nagain really really quickly you're able\nto get up to speed with this\nand then you're able to output this text\nso again you might take this further you\nmight use this to automatically post\nto a wordpress website you could\ngenerate uh\ndifferent articles you could generate\nblog posts i don't know research papers\nthere's a whole bunch of different use\ncases that are possible for gpt neo\non that note that about wraps it up\nthanks so much for joining guys\nhopefully you enjoyed this video if you\ndid be sure to give it a thumbs up hit\nsubscribe and tick that bell\nand let me know how you went with\nleveraging gpt neo i'd love to hear your\nthoughts thanks again for tuning in\npeace\n",
  "words": [
    "happening",
    "guys",
    "name",
    "nicholas",
    "ronatt",
    "video",
    "going",
    "taking",
    "look",
    "ipad",
    "text",
    "generation",
    "using",
    "gpt3",
    "clone",
    "called",
    "gpt",
    "neo",
    "four",
    "lines",
    "code",
    "let",
    "take",
    "deeper",
    "look",
    "going",
    "first",
    "gpt3",
    "well",
    "gpt3",
    "deep",
    "learning",
    "powered",
    "language",
    "model",
    "trained",
    "175",
    "billion",
    "parameters",
    "open",
    "ai",
    "means",
    "would",
    "take",
    "huge",
    "amount",
    "time",
    "train",
    "something",
    "sophisticated",
    "consumer",
    "gpu",
    "amazing",
    "thing",
    "particular",
    "model",
    "really",
    "really",
    "flexible",
    "performs",
    "really",
    "really",
    "well",
    "range",
    "natural",
    "language",
    "tasks",
    "specifically",
    "like",
    "text",
    "generation",
    "q",
    "sentiment",
    "classification",
    "unfortunate",
    "thing",
    "gpt3",
    "available",
    "closed",
    "beta",
    "great",
    "thing",
    "however",
    "able",
    "leverage",
    "gpg3",
    "clone",
    "called",
    "gpt",
    "neo",
    "model",
    "going",
    "taking",
    "look",
    "particular",
    "video",
    "trained",
    "billion",
    "parameters",
    "exactly",
    "175",
    "billion",
    "parameter",
    "model",
    "open",
    "ai",
    "built",
    "really",
    "really",
    "sophisticated",
    "see",
    "little",
    "bit",
    "later",
    "let",
    "take",
    "look",
    "actually",
    "going",
    "first",
    "going",
    "installing",
    "gpt",
    "neo",
    "gpt",
    "neo",
    "going",
    "give",
    "us",
    "gpt3",
    "clone",
    "trained",
    "billion",
    "parameters",
    "definitely",
    "like",
    "see",
    "video",
    "means",
    "let",
    "know",
    "installed",
    "going",
    "able",
    "generate",
    "text",
    "four",
    "lines",
    "code",
    "really",
    "really",
    "straightforward",
    "also",
    "save",
    "output",
    "disk",
    "pick",
    "text",
    "file",
    "leverage",
    "later",
    "probably",
    "thinking",
    "going",
    "work",
    "well",
    "let",
    "take",
    "look",
    "first",
    "going",
    "going",
    "leveraging",
    "hugging",
    "face",
    "transformers",
    "library",
    "load",
    "gpt",
    "neo",
    "model",
    "pass",
    "text",
    "prompt",
    "say",
    "example",
    "might",
    "ask",
    "meaning",
    "life",
    "import",
    "pandas",
    "pd",
    "wanted",
    "generate",
    "python",
    "code",
    "could",
    "even",
    "generate",
    "sql",
    "statements",
    "well",
    "generated",
    "text",
    "models",
    "generated",
    "text",
    "able",
    "output",
    "result",
    "text",
    "file",
    "using",
    "standard",
    "python",
    "statement",
    "ready",
    "let",
    "get",
    "alrighty",
    "guys",
    "order",
    "get",
    "started",
    "gpt",
    "nero",
    "going",
    "four",
    "things",
    "need",
    "going",
    "keep",
    "tutorial",
    "relatively",
    "short",
    "sharp",
    "going",
    "power",
    "ideally",
    "end",
    "able",
    "get",
    "speed",
    "gpt",
    "neo",
    "start",
    "generating",
    "text",
    "four",
    "things",
    "need",
    "install",
    "import",
    "dependencies",
    "set",
    "pipeline",
    "generator",
    "pass",
    "text",
    "generate",
    "text",
    "using",
    "prompt",
    "going",
    "output",
    "text",
    "save",
    "file",
    "first",
    "things",
    "first",
    "let",
    "go",
    "ahead",
    "install",
    "import",
    "dependencies",
    "first",
    "dependency",
    "going",
    "need",
    "pytorch",
    "easiest",
    "way",
    "install",
    "go",
    "pytorch",
    "website",
    "code",
    "well",
    "links",
    "relevant",
    "documentation",
    "description",
    "pick",
    "run",
    "going",
    "go",
    "ahead",
    "go",
    "pytorch",
    "website",
    "towards",
    "bottom",
    "going",
    "see",
    "section",
    "called",
    "install",
    "pytorch",
    "need",
    "choose",
    "build",
    "want",
    "going",
    "choose",
    "stable",
    "case",
    "choose",
    "operating",
    "system",
    "case",
    "windows",
    "machine",
    "choose",
    "windows",
    "choose",
    "package",
    "want",
    "install",
    "going",
    "use",
    "pip",
    "could",
    "use",
    "conda",
    "well",
    "wanted",
    "case",
    "going",
    "working",
    "python",
    "going",
    "choose",
    "python",
    "leveraging",
    "gpu",
    "acceleration",
    "using",
    "cuda",
    "gpu",
    "acceleration",
    "really",
    "going",
    "kick",
    "unless",
    "got",
    "massive",
    "gpu",
    "able",
    "handle",
    "particular",
    "model",
    "fine",
    "install",
    "using",
    "cuda",
    "anyway",
    "got",
    "sort",
    "going",
    "get",
    "command",
    "bottom",
    "going",
    "copy",
    "paste",
    "notebook",
    "order",
    "run",
    "command",
    "line",
    "within",
    "notebook",
    "need",
    "include",
    "exclamation",
    "mark",
    "going",
    "remove",
    "three",
    "pip",
    "command",
    "using",
    "standard",
    "pip",
    "need",
    "run",
    "cell",
    "going",
    "go",
    "ahead",
    "install",
    "pi",
    "torch",
    "already",
    "got",
    "installed",
    "went",
    "relatively",
    "quickly",
    "first",
    "install",
    "done",
    "installing",
    "pytorch",
    "remember",
    "need",
    "go",
    "select",
    "different",
    "options",
    "copy",
    "command",
    "run",
    "cell",
    "next",
    "thing",
    "need",
    "actually",
    "install",
    "transformers",
    "transformers",
    "really",
    "powerful",
    "probably",
    "one",
    "favorite",
    "natural",
    "language",
    "processing",
    "libraries",
    "beautiful",
    "thing",
    "transformers",
    "get",
    "bunch",
    "pipelines",
    "get",
    "conversational",
    "pipeline",
    "feature",
    "extraction",
    "pipeline",
    "text",
    "generation",
    "pipeline",
    "translation",
    "pipeline",
    "whole",
    "bunch",
    "pipelines",
    "allow",
    "leverage",
    "really",
    "really",
    "sophisticated",
    "nlp",
    "models",
    "relatively",
    "easily",
    "going",
    "using",
    "transformers",
    "exactly",
    "let",
    "go",
    "ahead",
    "install",
    "transform",
    "one",
    "relatively",
    "straightforward",
    "order",
    "install",
    "transformers",
    "gone",
    "done",
    "run",
    "exclamation",
    "mark",
    "pip",
    "install",
    "transformers",
    "going",
    "go",
    "ahead",
    "install",
    "good",
    "stuff",
    "us",
    "two",
    "dependencies",
    "installed",
    "need",
    "import",
    "main",
    "dependency",
    "going",
    "transform",
    "let",
    "okay",
    "transformers",
    "library",
    "imported",
    "order",
    "written",
    "transformers",
    "import",
    "pipeline",
    "first",
    "line",
    "code",
    "first",
    "line",
    "pipeline",
    "effectively",
    "going",
    "giving",
    "us",
    "pipelines",
    "available",
    "going",
    "using",
    "text",
    "generation",
    "pipeline",
    "second",
    "see",
    "pass",
    "text",
    "generation",
    "argument",
    "particular",
    "pipeline",
    "able",
    "leverage",
    "text",
    "generation",
    "using",
    "gpt",
    "near",
    "want",
    "deeper",
    "dive",
    "means",
    "let",
    "know",
    "comments",
    "thinking",
    "mega",
    "tutorial",
    "might",
    "useful",
    "gpt",
    "might",
    "also",
    "useful",
    "transformers",
    "particularly",
    "transformers",
    "bunch",
    "stuff",
    "case",
    "pipeline",
    "imported",
    "need",
    "set",
    "generator",
    "going",
    "write",
    "second",
    "line",
    "code",
    "alrighty",
    "second",
    "line",
    "code",
    "done",
    "dusted",
    "line",
    "code",
    "actually",
    "going",
    "ahead",
    "loading",
    "gpt",
    "neo",
    "model",
    "going",
    "give",
    "us",
    "gpt3",
    "clone",
    "case",
    "written",
    "generator",
    "equals",
    "pipeline",
    "pipeline",
    "passed",
    "type",
    "pipeline",
    "want",
    "case",
    "going",
    "leveraging",
    "text",
    "generation",
    "pipeline",
    "written",
    "inside",
    "string",
    "text",
    "dash",
    "generation",
    "passed",
    "comma",
    "pass",
    "keyword",
    "parameter",
    "next",
    "keyword",
    "parameter",
    "defines",
    "type",
    "natural",
    "language",
    "model",
    "type",
    "language",
    "model",
    "going",
    "loading",
    "pipeline",
    "particular",
    "case",
    "going",
    "leveraging",
    "gpt",
    "neo",
    "model",
    "billion",
    "parameters",
    "written",
    "eleuther",
    "forward",
    "slash",
    "gpt",
    "dash",
    "neo",
    "dash",
    "b",
    "means",
    "going",
    "leveraging",
    "eluther",
    "ai",
    "guys",
    "actually",
    "gone",
    "built",
    "gpt",
    "neo",
    "model",
    "passing",
    "slash",
    "gpt",
    "neo",
    "dash",
    "b",
    "importing",
    "billion",
    "parameter",
    "model",
    "first",
    "time",
    "actually",
    "going",
    "download",
    "model",
    "believe",
    "10",
    "gigabytes",
    "might",
    "take",
    "little",
    "bit",
    "time",
    "download",
    "everything",
    "need",
    "actually",
    "need",
    "go",
    "anything",
    "else",
    "download",
    "onto",
    "disk",
    "able",
    "leverage",
    "also",
    "billion",
    "parameter",
    "model",
    "computer",
    "running",
    "little",
    "bit",
    "slow",
    "wanted",
    "run",
    "smaller",
    "model",
    "let",
    "let",
    "go",
    "ahead",
    "load",
    "able",
    "run",
    "model",
    "okay",
    "generator",
    "loaded",
    "see",
    "particular",
    "cell",
    "run",
    "longer",
    "little",
    "asterisk",
    "able",
    "run",
    "within",
    "notebook",
    "next",
    "thing",
    "actually",
    "going",
    "go",
    "ahead",
    "second",
    "line",
    "code",
    "second",
    "line",
    "next",
    "thing",
    "going",
    "go",
    "ahead",
    "start",
    "generating",
    "text",
    "using",
    "prompt",
    "prompt",
    "could",
    "really",
    "whatever",
    "wanted",
    "wanted",
    "write",
    "love",
    "story",
    "write",
    "poem",
    "get",
    "answers",
    "meaning",
    "life",
    "could",
    "pass",
    "case",
    "actually",
    "going",
    "let",
    "start",
    "type",
    "meaning",
    "life",
    "actually",
    "happen",
    "let",
    "make",
    "sure",
    "prompt",
    "actually",
    "happen",
    "pass",
    "prompt",
    "gpt",
    "neo",
    "model",
    "actually",
    "going",
    "try",
    "generate",
    "text",
    "using",
    "prompt",
    "actually",
    "see",
    "trying",
    "answer",
    "maybe",
    "write",
    "bit",
    "blog",
    "post",
    "actually",
    "get",
    "answers",
    "generated",
    "using",
    "gpt",
    "model",
    "think",
    "absolutely",
    "fascinating",
    "anyway",
    "let",
    "actually",
    "go",
    "ahead",
    "done",
    "created",
    "new",
    "variable",
    "called",
    "prompt",
    "set",
    "equal",
    "string",
    "see",
    "second",
    "change",
    "string",
    "try",
    "generating",
    "styles",
    "text",
    "maybe",
    "code",
    "well",
    "need",
    "actually",
    "pass",
    "prompt",
    "generator",
    "able",
    "actually",
    "generate",
    "code",
    "let",
    "alrighty",
    "go",
    "ahead",
    "run",
    "next",
    "line",
    "code",
    "let",
    "take",
    "look",
    "actually",
    "wrote",
    "let",
    "actually",
    "include",
    "additional",
    "cells",
    "see",
    "third",
    "line",
    "code",
    "fourth",
    "line",
    "actually",
    "generated",
    "text",
    "fourth",
    "line",
    "particular",
    "case",
    "gone",
    "done",
    "created",
    "new",
    "variable",
    "called",
    "res",
    "results",
    "set",
    "equal",
    "generator",
    "case",
    "see",
    "set",
    "generator",
    "passing",
    "arguments",
    "keyword",
    "arguments",
    "particular",
    "generator",
    "generate",
    "text",
    "gone",
    "written",
    "generator",
    "passed",
    "prompt",
    "string",
    "gone",
    "set",
    "keyword",
    "arguments",
    "play",
    "around",
    "wanted",
    "influence",
    "results",
    "get",
    "back",
    "first",
    "argument",
    "max",
    "underscore",
    "length",
    "equals",
    "defines",
    "long",
    "output",
    "going",
    "case",
    "set",
    "limit",
    "passed",
    "50",
    "words",
    "next",
    "keyword",
    "argument",
    "underscore",
    "sample",
    "equals",
    "true",
    "going",
    "allow",
    "us",
    "leverage",
    "sampling",
    "within",
    "model",
    "also",
    "gone",
    "set",
    "temperature",
    "influences",
    "actually",
    "determines",
    "results",
    "going",
    "forward",
    "particular",
    "token",
    "actually",
    "returned",
    "back",
    "play",
    "around",
    "parameters",
    "tune",
    "play",
    "around",
    "take",
    "look",
    "documentation",
    "tutorial",
    "going",
    "super",
    "fast",
    "going",
    "delve",
    "much",
    "note",
    "let",
    "go",
    "ahead",
    "run",
    "line",
    "generate",
    "text",
    "okay",
    "line",
    "code",
    "run",
    "speed",
    "actually",
    "generates",
    "really",
    "dependent",
    "machine",
    "case",
    "took",
    "20",
    "30",
    "seconds",
    "generate",
    "string",
    "max",
    "length",
    "50",
    "words",
    "case",
    "pass",
    "higher",
    "maximum",
    "length",
    "number",
    "take",
    "longer",
    "actually",
    "take",
    "look",
    "results",
    "type",
    "res",
    "actually",
    "see",
    "gone",
    "generated",
    "big",
    "block",
    "text",
    "see",
    "gone",
    "says",
    "meaning",
    "life",
    "matter",
    "oh",
    "exactly",
    "happy",
    "moment",
    "go",
    "find",
    "meaning",
    "least",
    "sort",
    "explanation",
    "experiencing",
    "asking",
    "dozen",
    "times",
    "actually",
    "go",
    "pass",
    "result",
    "grab",
    "first",
    "result",
    "type",
    "dot",
    "generated",
    "text",
    "actually",
    "going",
    "give",
    "us",
    "raw",
    "string",
    "see",
    "print",
    "get",
    "string",
    "formatting",
    "see",
    "actually",
    "got",
    "line",
    "spaces",
    "particular",
    "case",
    "passing",
    "short",
    "prompt",
    "gone",
    "got",
    "entire",
    "result",
    "wanted",
    "generate",
    "text",
    "change",
    "maximum",
    "length",
    "say",
    "set",
    "100",
    "run",
    "going",
    "get",
    "longer",
    "string",
    "generated",
    "let",
    "let",
    "go",
    "ahead",
    "run",
    "ideally",
    "get",
    "longer",
    "answer",
    "meaning",
    "life",
    "go",
    "gone",
    "generated",
    "new",
    "block",
    "text",
    "really",
    "changed",
    "max",
    "length",
    "parameter",
    "particular",
    "case",
    "gone",
    "generated",
    "bigger",
    "block",
    "text",
    "meaning",
    "life",
    "still",
    "starts",
    "prompt",
    "recent",
    "conversation",
    "friend",
    "heard",
    "say",
    "must",
    "go",
    "life",
    "attitude",
    "never",
    "going",
    "leave",
    "check",
    "whether",
    "actually",
    "said",
    "form",
    "quote",
    "something",
    "similar",
    "decided",
    "find",
    "original",
    "source",
    "quote",
    "reading",
    "book",
    "quickly",
    "found",
    "website",
    "case",
    "writing",
    "slightly",
    "different",
    "going",
    "completely",
    "different",
    "route",
    "random",
    "property",
    "say",
    "example",
    "wanted",
    "something",
    "little",
    "bit",
    "contextual",
    "going",
    "set",
    "max",
    "length",
    "back",
    "50",
    "said",
    "something",
    "bitcoin",
    "said",
    "bitcoin",
    "going",
    "rend",
    "particular",
    "prompt",
    "run",
    "let",
    "go",
    "see",
    "gpt",
    "neo",
    "generates",
    "go",
    "gone",
    "generated",
    "new",
    "text",
    "take",
    "look",
    "gone",
    "written",
    "bitcoin",
    "going",
    "important",
    "currency",
    "crypto",
    "market",
    "rise",
    "bitcoin",
    "gone",
    "joke",
    "late",
    "2016",
    "world",
    "favorite",
    "cryptocurrency",
    "well",
    "wrong",
    "mean",
    "2021",
    "super",
    "popular",
    "massive",
    "rally",
    "2018",
    "2019",
    "cut",
    "50",
    "see",
    "actually",
    "generating",
    "really",
    "really",
    "interesting",
    "text",
    "results",
    "could",
    "use",
    "generate",
    "blog",
    "posts",
    "maybe",
    "write",
    "song",
    "write",
    "poem",
    "forth",
    "particular",
    "favorite",
    "thing",
    "actually",
    "using",
    "write",
    "code",
    "testing",
    "earlier",
    "week",
    "thought",
    "super",
    "fascinating",
    "instead",
    "writing",
    "prompt",
    "text",
    "happens",
    "wrote",
    "one",
    "common",
    "lines",
    "code",
    "wrote",
    "import",
    "pandas",
    "pd",
    "run",
    "let",
    "go",
    "see",
    "actually",
    "goes",
    "generates",
    "valid",
    "python",
    "code",
    "go",
    "actually",
    "gone",
    "written",
    "import",
    "pandas",
    "pd",
    "original",
    "prompt",
    "gone",
    "passed",
    "bunch",
    "additional",
    "imports",
    "collections",
    "import",
    "counter",
    "import",
    "os",
    "import",
    "sys",
    "import",
    "numpy",
    "np",
    "almost",
    "like",
    "importing",
    "pretty",
    "standard",
    "data",
    "science",
    "libraries",
    "mean",
    "fact",
    "got",
    "numpy",
    "got",
    "time",
    "got",
    "nltk",
    "see",
    "actually",
    "really",
    "really",
    "contextually",
    "aware",
    "able",
    "generate",
    "whole",
    "bunch",
    "stuff",
    "probably",
    "going",
    "playing",
    "weekend",
    "sort",
    "see",
    "possible",
    "gpt",
    "neo",
    "wanted",
    "go",
    "ahead",
    "export",
    "text",
    "could",
    "really",
    "easily",
    "let",
    "go",
    "ahead",
    "okay",
    "go",
    "ahead",
    "run",
    "want",
    "sort",
    "show",
    "written",
    "open",
    "passed",
    "name",
    "file",
    "want",
    "generate",
    "output",
    "case",
    "called",
    "gpt",
    "text",
    "dot",
    "txt",
    "see",
    "passed",
    "w",
    "flag",
    "want",
    "write",
    "specified",
    "f",
    "means",
    "going",
    "able",
    "work",
    "file",
    "variable",
    "called",
    "f",
    "order",
    "write",
    "text",
    "written",
    "f",
    "dot",
    "write",
    "lines",
    "passed",
    "text",
    "block",
    "text",
    "block",
    "exactly",
    "printing",
    "outputting",
    "actually",
    "go",
    "run",
    "block",
    "text",
    "take",
    "look",
    "folder",
    "working",
    "let",
    "bring",
    "see",
    "got",
    "file",
    "called",
    "gpt",
    "text",
    "zoom",
    "little",
    "bit",
    "see",
    "better",
    "see",
    "got",
    "gpt",
    "text",
    "actually",
    "go",
    "open",
    "see",
    "exported",
    "python",
    "code",
    "maybe",
    "could",
    "write",
    "use",
    "write",
    "entire",
    "data",
    "science",
    "workflow",
    "knows",
    "possible",
    "take",
    "wanted",
    "use",
    "different",
    "prompt",
    "say",
    "example",
    "wrote",
    "something",
    "current",
    "stock",
    "market",
    "current",
    "stock",
    "market",
    "run",
    "could",
    "go",
    "export",
    "different",
    "blocks",
    "text",
    "whatever",
    "pass",
    "around",
    "prompt",
    "particular",
    "workflow",
    "going",
    "output",
    "text",
    "file",
    "let",
    "let",
    "run",
    "take",
    "look",
    "make",
    "sure",
    "outputting",
    "new",
    "block",
    "text",
    "go",
    "gone",
    "gpt",
    "gone",
    "written",
    "current",
    "stock",
    "market",
    "unique",
    "market",
    "incorporates",
    "fundamental",
    "market",
    "characteristics",
    "correct",
    "uh",
    "together",
    "market",
    "psychology",
    "human",
    "judgment",
    "human",
    "biases",
    "market",
    "timers",
    "price",
    "momentum",
    "crowd",
    "psychology",
    "stock",
    "market",
    "like",
    "market",
    "goods",
    "services",
    "go",
    "check",
    "file",
    "see",
    "gone",
    "exported",
    "text",
    "exactly",
    "inside",
    "notebook",
    "pretty",
    "cool",
    "right",
    "sort",
    "shows",
    "possible",
    "gpt",
    "neo",
    "nutshell",
    "installed",
    "imported",
    "dependencies",
    "went",
    "installed",
    "pytorch",
    "transformers",
    "wrote",
    "four",
    "lines",
    "code",
    "allow",
    "us",
    "go",
    "generate",
    "new",
    "blocks",
    "text",
    "using",
    "gpt",
    "neo",
    "wrote",
    "import",
    "generator",
    "prompt",
    "actually",
    "went",
    "ran",
    "prompt",
    "really",
    "really",
    "quickly",
    "able",
    "get",
    "speed",
    "able",
    "output",
    "text",
    "might",
    "take",
    "might",
    "use",
    "automatically",
    "post",
    "wordpress",
    "website",
    "could",
    "generate",
    "uh",
    "different",
    "articles",
    "could",
    "generate",
    "blog",
    "posts",
    "know",
    "research",
    "papers",
    "whole",
    "bunch",
    "different",
    "use",
    "cases",
    "possible",
    "gpt",
    "neo",
    "note",
    "wraps",
    "thanks",
    "much",
    "joining",
    "guys",
    "hopefully",
    "enjoyed",
    "video",
    "sure",
    "give",
    "thumbs",
    "hit",
    "subscribe",
    "tick",
    "bell",
    "let",
    "know",
    "went",
    "leveraging",
    "gpt",
    "neo",
    "love",
    "hear",
    "thoughts",
    "thanks",
    "tuning",
    "peace"
  ],
  "keywords": [
    "guys",
    "video",
    "going",
    "look",
    "text",
    "generation",
    "using",
    "gpt3",
    "clone",
    "called",
    "gpt",
    "neo",
    "four",
    "lines",
    "code",
    "let",
    "take",
    "first",
    "well",
    "language",
    "model",
    "billion",
    "parameters",
    "open",
    "means",
    "time",
    "something",
    "gpu",
    "thing",
    "particular",
    "really",
    "like",
    "able",
    "leverage",
    "exactly",
    "parameter",
    "see",
    "little",
    "bit",
    "actually",
    "give",
    "us",
    "know",
    "installed",
    "generate",
    "also",
    "output",
    "file",
    "leveraging",
    "transformers",
    "pass",
    "prompt",
    "say",
    "might",
    "meaning",
    "life",
    "import",
    "wanted",
    "python",
    "could",
    "generated",
    "result",
    "get",
    "order",
    "need",
    "relatively",
    "generating",
    "install",
    "dependencies",
    "set",
    "pipeline",
    "generator",
    "go",
    "ahead",
    "pytorch",
    "website",
    "run",
    "choose",
    "want",
    "case",
    "use",
    "pip",
    "got",
    "sort",
    "command",
    "notebook",
    "line",
    "went",
    "done",
    "different",
    "next",
    "bunch",
    "gone",
    "okay",
    "written",
    "second",
    "write",
    "passed",
    "type",
    "string",
    "dash",
    "keyword",
    "longer",
    "maybe",
    "new",
    "wrote",
    "results",
    "around",
    "max",
    "length",
    "50",
    "block",
    "bitcoin",
    "market",
    "possible",
    "stock"
  ]
}