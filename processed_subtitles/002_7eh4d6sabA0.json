{
  "text": "[Music]\nif you're looking for a machine learning\ntutorial with python and jupyter\nnotebook\nthis tutorial is for you you're going to\nlearn how to solve a real world problem\nusing machine learning and python we're\ngoing to start off with a brief\nintroduction to machine learning\nthen we're going to talk about the tools\nyou need and after that we're going to\njump straight into the problem we're\ngoing to solve\nyou'll learn how to build a model that\ncan learn and predict the kind of music\npeople like\nso by the end of this one hour tutorial\nyou will have a good understanding of\nmachine learning basics\nand you'll be able to learn more\nintermediate to advanced level concepts\nyou don't need any prior knowledge in\nmachine learning but you need to know\npython fairly well\nif you don't i've got a couple of\ntutorials for you here on my channel the\nlinks are below this video\ni'm ashamed only and i'm super excited\nto be your instructor on this channel i\nhave tons of programming tutorials that\nyou might find helpful\nso be sure to subscribe as i upload new\ntutorials every week\nnow let's jump in and get started\nin this section you're going to learn\nabout machine learning which is a subset\nof ai or\nartificial intelligence it's one of the\ntrending topics in the world these days\nand it's going to have a lot of\napplications in the future\nhere's an example imagine i ask you to\nwrite a program\nto scan an image and tell if it's a cat\nor a doc\nif you want to build this program using\ntraditional programming techniques\nyour program is going to get overly\ncomplex you will have to come up with\nlots of rules to look for specific\ncurves\nedges and colors in an image to tell if\nit's a cat or a dog\nbut if i give you a black and white\nphoto your rules may not work\nthey may break then you'll have to\nrewrite them or i might give you a\npicture of a cat or a dog\nfrom a different angle that you did not\npredict before\nso solving this problem using\ntraditional programming techniques is\ngoing to get\noverly complex or sometimes impossible\nnow to make the matter worse what if in\nthe future i ask you to extend this\nprogram\nsuch that it supports three kinds of\nanimals cats\ndogs and horses once again you'll have\nto rewrite all those rules\nthat's not gonna work so machine\nlearning is a technique to solve these\nkind of problems\nand this is how it works we build a\nmodel or an engine\nand give it lots and lots of data for\nexample we give you\nthousands or tens of thousands of\npictures of cats and dogs\nour model will then find and learn\npatterns in the input data\nso we can give it a new picture of a cat\nthat it hasn't seen before\nand ask it is it a cat or a dog or a\nhorse and it will tell us with a certain\nlevel of accuracy\nthe more input data we give it the more\naccurate our model\nis going to be so that was a very basic\nexample\nbut machine learning has other\napplications in self-driving cars\nrobotics language processing vision\nprocessing\nforecasting things like stock market\ntrends and the weather\ngames and so on so that's the basic idea\nabout machine learning\nnext we'll look at machine learning in\naction\na machine learning project involves a\nnumber of steps the first step is to\nimport our data which often comes in the\nform of a csv file\nyou might have a database with lots of\ndata we can simply export that data\nand store it in a csv file for the\npurpose of our machine learning project\nso we import our data next we need to\nclean it and this involves tasks\nsuch as removing duplicated data if you\nhave duplicates in the data\nwe don't want to feed this to our model\nbecause otherwise our model will learn\nbad patterns in the data and it will\nproduce the wrong result\nso we should make sure that our input\ndata is in a good and clean shape\nif there are data that is irrelevant we\nshould remove them if they are\nduplicated or\nincomplete we can remove or modify them\nif our data is text-based\nlike the name of countries or genres of\nmusic\nor cats and dogs we need to convert them\nto numerical values\nso this step really depends on the kind\nof data we're working with\nevery project is different now that we\nhave a clean data set we need to split\nit into\ntwo segments one for training our model\nand the other for testing it\nto make sure that our model produces the\nright result\nfor example if you have a thousand\npictures of cats and dogs\nwe can reserve eighty percent for\ntraining and the other 20\nfor testing the next step is to create a\nmodel\nand this involves selecting an algorithm\nto analyze the data\nthere are so many different machine\nlearning algorithms out there such as\ndecision trees\nneural networks and so on each algorithm\nhas pros and cons\nin terms of accuracy and performance so\nthe algorithm you choose\ndepends on the kind of problem you're\ntrying to solve and your input data\nnow the good news is that we don't have\nto explicitly program an\nalgorithm there are libraries out there\nthat provide these algorithms\none of the most popular ones which we\nare going to look at in this tutorial\nis scikit-learn so we build a model\nusing an algorithm\nnext we need to train our model so we\nfitted our training data\nour model will then look for the\npatterns in the data so next we can ask\nit to make predictions\nback to our example of cats and dogs we\ncan ask our model\nis this a cat or a dog and our model\nwill make a prediction\nnow the prediction is not always\naccurate in fact when you start out\nit's very likely that your predictions\nare inaccurate so we need to evaluate\nthe predictions and measure\ntheir accuracy then we need to get back\nto our model\nand either select a different algorithm\nthat is going to produce\na more accurate result for the kind of\nproblem we're trying to solve\nor fine-tune the parameters of our model\nso each algorithm has parameters that we\ncan modify to optimize the accuracy\nso these are the high level steps that\nyou follow in a machine learning project\nnext we'll look at the libraries and\ntools for machine learning\nin this lecture we're going to look at\nthe popular python libraries that we use\nin machine learning projects\nthe first one is numpy which provides a\nmulti-dimensional array\nvery very popular library the second one\nis pandas which is a data analysis\nlibrary that provides a concept called\ndata frame\na data frame is a two-dimensional data\nstructure similar to an excel\nspreadsheet\nso we have rows and columns we can\nselect data in a row or a column\nor a range of rows and columns again\nvery very popular in machine learning\nand data science projects the third\nlibrary\nis matplotlib which is a two-dimensional\nplotting library\nfor creating graphs and plots the next\nlibrary is scikit-learn which is one of\nthe most popular machine learning\nlibraries\nthat provides all these common\nalgorithms like decision trees\nneural networks and so on now when\nworking with machine learning projects\nwe use an environment called jupiter for\nwriting our code\ntechnically we can still use vs code or\nany other code editors\nbut these editors are not ideal for\nmachine learning projects\nbecause we frequently need to inspect\nthe data and that is really hard\nin environments like vs code and\nterminal if you're working with a table\nof 10 or 20 columns\nvisualizing this data in a terminal\nwindow is really really difficult and\nmessy\nso that's why we use jupiter it makes it\nreally easy to inspect our data\nnow to install jupyter we're going to\nuse a platform called anaconda\nso head over to anaconda.com\ndownload on this page you can download\nanaconda distribution for your operating\nsystem\nso we have distributions for windows mac\nand linux so let's go ahead and\ninstall anaconda for python 3.7\ndownload\nall right so here's anaconda downloaded\non my machine let's double click this\nall right first it's going to run a\nprogram to determine if the software can\nbe installed\nso let's continue and once again\ncontinue\ncontinue pretty easy continue one more\ntime\ni agree with the license agreement okay\nyou can use the default installation\nlocation so don't worry about that\njust click install give it a few seconds\nnow the beautiful thing about anaconda\nis that it will install jupyter\nas well as all those popular data\nscience libraries like numpy\npandas and so on so we don't have to\nmanually install this using pip\nall right now as part of the next step\nanaconda is suggesting to install\nmicrosoft vs code we already have this\non our machine so\nwe don't have to install it we can go\nwith continue and\nclose the installation now finally we\ncan move this to trash because we don't\nneed this installer in the future\nall right now open up a terminal window\nand type\njupyter with a y space\nnotebook this will start the notebook\nserver on your machine\nso enter there you go this will start\nthe notebook server on your machine you\ncan see these default messages here\ndon't worry about them now it\nautomatically opens a browser window\npointing to localhost port 888\nthis is what we call jupiter dashboard\non this dashboard we have a few tabs the\nfirst tab\nis the files tab and by default this\npoints to your home directory\nso every user on your machine has a home\ndirectory this is my home directory on\nmac\nyou can see here we have a desktop\nfolder as well as documents\ndownloads and so on on your machine\nyou're going to see different folders\nso someone on your machine you need to\ncreate a jupyter notebook\ni'm going to go to desktop here's my\ndesktop i don't have anything here\nand then click new i want to create a\nnotebook\nfor python 3. in this notebook we can\nwrite python code\nand execute it line by line we can\neasily visualize our data as you will\nsee over the next few videos\nso let's go ahead with this\nall right here's our first notebook you\ncan see by default it's called\nuntitled let's change that to hello\nworld\nso this is going to be the hello world\nof our machine learning project\nlet's rename this now if you look at\nyour desktop you can see this file\nhelloworld.i\npi nb this is a jupiter notebook\nit's kind of similar to our pi files\nwhere we write our python code\nbut it includes additional data that\njupiter uses to execute our code\nso back to our notebook let's do a\nprint hello world and then\nclick this run button here and\nhere's the result printed in jupyter so\nwe don't have to navigate back and forth\nbetween the terminal window\nwe can see all the result right here\nnext i'm going to show you how to load a\ndata set from a csv file in jupyter\nall right in this lecture we're going to\ndownload a data set from a very popular\nwebsite called\nkaggle.com gaggle is basically a place\nto do data science projects\nso the first thing you need to do is to\ncreate an account you can sign up with\nfacebook google or using a custom email\nand password\nonce you sign up then come back here on\nkaggle.com\nhere in the search bar search for\nvideo game sales this is the name of a\nvery popular data set that we're going\nto use in this lecture\nso here in this list you can see the\nfirst item\nwith this kind of reddish icon so let's\ngo with that\nas you can see this data set includes\nthe sales data for more than 16\n000 video games on this page you can see\nthe description\nof various columns in this data set we\nhave rank\nname platform year and so on so here's\nour data source it's a csv file called\nvgsales.csv\nas you can see there are over 16 000\nrows\nand 11 columns in this data set right\nbelow that you can see the first few\nrecords\nof this data set so here's our first\nrecord the ranking for this game is one\nit's the wii sports game for we as the\nplatform and it was released in year\n2006\nnow what i want you to do is to go ahead\nand\ndownload this data set and as i told you\nbefore you need to sign in before you\ncan download this\nso this will give you a zip file as you\ncan see here\nhere's our csv file now i want you to\nput this\nright next to your jupyter notebook on\nmy machine that is on my desktop\nso i'm going to drag and drop this onto\nthe desktop folder\nnow if you look at the desktop you can\nsee here is my\njupyter hello world notebook and right\nnext to that we have\nvgsales.csv with that\nwe go back to our jupyter notebook let's\nremove the first line\nand instead import\npandas as pd\nwith this we're importing pandas module\nand renaming it to pd\nso we don't have to type pandas dot\nseveral times in this code\nnow let's type pd dot read\nunderline csv and pass the name of our\ncsv file\nthat is vg sales.csv now because this\ncsv file is in the current folder\nright next to our jupyter notebook we\ncan easily load it otherwise we'll have\nto supply the full path to this file\nso this returns a data frame object\nwhich is like an excel spreadsheet let\nme show you so\nwe store it here and then we can simply\ntype\ndf to inspect it so one more time let's\nrun this program\nhere's our data frame with these rows\nand columns so we have rank\nname platform and so on now this data\nframe object has lots of attributes and\nmethods\nthat we're not going to cover in this\ntutorial that's really beyond the scope\nof what we're going to do\nso i'll leave it up to you to read\npanda's documentation or follow other\ntutorials to learn about pandas data\nframes\nbut in this lecture i'm going to show\nyou some of the most useful methods\nand attributes the first one is shape so\nshape let's run this one more time so\nhere's the shape of this data set\nwe have over 16 000 records and\n11 columns technically this is a two\ndimensional array\nof sixteen thousand and eleven okay\nnow you can see here we have another\nsegment for writing code so we don't\nhave to write all the code in the first\nsegment\nso here in the second segment we can\ncall one of the methods of the data\nframe\nthat is df dot describe\nnow when we run this program we can see\nthe output for each segment\nright next to it so here's our first\nsegment here we have\nthese three lines and this is the output\nof the last line below that we have our\nsecond segment\nhere we're calling the describe method\nand right below that we have\nthe output of this segment so this is\nthe beauty of jupiter\nwe can easily visualize our data doing\nthis with vs code and terminal windows\nis really tedious and clunky\nso what is this describe method\nreturning basically it's returning some\nbasic information about each column\nin this data set so as you saw earlier\nwe have columns like rank\nyear and so on these are the columns\nwith numerical values\nnow for each column we have the count\nwhich is the number of records in that\ncolumn\nyou can see our rank column has 16\n598 records whereas the year column has\n16 327 records\nso this shows that some of our records\ndon't have the value for the year column\nwe have no values so in a real data\nscience or\nmachine learning project we'll have to\nuse some techniques to clean up our data\nset\none option is to remove the records that\ndon't have a value for the year column\nor we can assign them a default value\nthat really depends on the project\nnow another attribute for each column is\nmean so this is the average\nof all the values now in the case of the\nrank column this value doesn't really\nmatter\nbut look at the year so the average year\nfor all these video games in our data\nset\nis 2006 and this might be important in\nthe problem we're trying to solve\nwe also have standard deviation which is\na measure\nto quantify the amount of variation in\nour set of values\nbelow that we have min as an example the\nminimum value for the year column\nis 1980. so quite often when we work\nwith a new data set\nwe call the describe method to get some\nbasic statistics about our data\nlet me show you another useful attribute\nso in the next segment let's type\ndf.values let's run this\nas you can see this returns a\ntwo-dimensional array this square\nbracket indicates\nthe outer array and the second one\nrepresents the inner array so the first\nelement\nin our outer array is an array itself\nthese are the values in this array which\nbasically represent the first row\nin our data set so the video game with\nranking 1\nwhich is called wii sports so this was a\nbasic\noverview of pando's data frames in the\nnext lecture i'm going to show you some\nof the useful shortcuts of jupyter\nin this lecture i'm going to show you\nsome of the most useful shortcuts in\njupyter\nnow the first thing i want you to pay\nattention to is this green bar\non the left this indicates that this\ncell is currently in the edit mode so\nwe can write code here now if we press\nthe escape key green turns to blue and\nthat means this cell is currently in the\ncommand mode\nso basically the activated cell can be\neither in the edit mode or\nthe command mode depending on the mode\nwe have different shortcuts\nso here we're currently in the command\nmode if we press\nh we can see the list of all the\nkeyboard\nshortcuts right above this list you can\nsee\nmac os modifier keys these are the extra\nkeys that we have on a mac keyboard\nif you're a windows user you're not\ngoing to see this so as an example here\nis the shape of the command key this is\ncontrol this is\noption and so on with this guideline you\ncan easily understand the shortcut\nassociated with each command\nlet me show you so here we have all the\ncommands\nwhen a cell is in the command mode for\nexample we have this command\nopen the command palette this is exactly\nlike the command palette that we have in\nvs code\nhere's a shortcut to execute this\ncommand that is\ncommand shift and f okay so here we have\nlots of shortcuts of course you're not\ngoing to use all of them all the time\nbut it's good to have a quick look here\nto see what is available for you\nwith this shortcuts you can write code\nmuch faster so let me show you some of\nthe most useful ones\ni'm going to close this now with our\nfirst cell\nin the command mode i'm going to press b\nand this inserts a new cell below this\ncell\nwe can also go back to our first cell\npress escape\nnow the cell is in the command mode we\ncan insert an empty cell\nabove this cell by pressing a\nso either a or b a for above and b\nfor below okay now if you don't want\nthis cell you can press\nd twice to delete it like this\nnow in the cell i'm going to print a\nhello world message so\nprint hello world now\nto run the code in this cell we can\nclick on the run button here\nso here's our print function and right\nbelow that you can see\nthe output of this function but note\nthat when you run a cell\nthis will only execute the code in that\ncell\nin other words the code in other cells\nwill not be executed let me show you\nwhat i mean\nso in the cell below this cell i'm going\nto delete the call\nto describe method instead i'm going to\nprint\nocean now i'm going to put the cursor\nback in this cell where we print the\nhello world message\nand run this cell so you can see hello\nworld\nis displayed here but the cell below is\nstill displaying\nthe described table so we don't see the\nchanges here\nnow to solve this problem we can go to\nthe cell menu on the top\nand run all cells together\nthis can work for small projects but\nsometimes you're working with a large\ndata set\nso if you want to run all these cells\ntogether it's going to take a lot of\ntime\nthat is the reason jupiter saves the\noutput of itself so we don't have to\nrerun that code\nif it hasn't changed so this notebook\nfile that we have here\nincludes our source code organized in\ncells\nas well as the output for each cell that\nis why it's different\nfrom a regular pi file where we only\nhave the source code\nhere we also have autocompletion and\nintellisense\nso in the cell let's call\ndf dataframe dot\nnow if you press tab we can see all the\nattributes and methods\nin this object so let's call\ndescribe now with the cursor on the name\nof the method we can press\nshift and tab to see this tooltip that\ndescribes\nwhat this method does and what parameter\nit takes so here in front of signature\nyou can see\nthe describe method these are the\nparameters\nand their default value and right below\nthat you can see\nthe description of what this method does\nin this case it generates\ndescriptive statistics that summarize\nthe central tendency and so on\nsimilar to vs code we can also convert a\nline to comment\nby pressing command and slash on mac or\ncontrol slash on windows\nlike this now this line is a comment we\ncan press the same shortcut\none more time to remove the comment\nso these were some of the most useful\nshortcuts in jupyter\nnow over the next few lectures we're\ngoing to work on a real machine learning\nproject\nbut before we get there let's delete all\nthe cells here so we start with\nonly a single empty cell so here in this\ncell\nfirst i'm going to press the escape\nbutton now the cell is blue\nso we are in the command mode and we can\ndelete the cell by pressing d\ntwice there you go now the next cell\nis activated and it's in the command\nmode so let's delete this as well\nwe have two more cells to delete there\nyou go and the last one\nlike this so now we have an empty\nnotebook with a single cell\nhey guys i just wanted to let you know\nthat i have an online coding school at\ncordwindmarch.com where you can find\nplenty of courses on web and mobile\ndevelopment\nin fact i have a comprehensive python\ncourse that teaches you everything about\npython from the basics to more advanced\nconcepts\nso after you watch this tutorial if you\nwant to learn more you may want to look\nat my python course it comes with a 30\nday money back guarantee\nand a certificate of completion you can\nadd to your resume in case you're\ninterested\nthe link is below this video\nover the next few lectures we're going\nto work on a real machine learning\nproject\nimagine we have an online music store\nwhen our users sign up we ask their age\nand gender and based on their profile we\nrecommend\nvarious music albums they're likely to\nbuy so in this project we want to use\nmachine learning to\nincrease sales so we want to build a\nmodel\nwe feed this model with some sample data\nbased on the existing users\nour model will learn the patterns in our\ndata so we can ask it to make\npredictions\nwhen a user signs up we tell our model\nhey we have a new user with this profile\nwhat is the kind of music that this user\nis interested in\nour model will say jazz or hip hop or\nwhatever\nand based on that we can make\nsuggestions to the user so this is the\nproblem we're going to solve\nnow back to the list of steps in a\nmachine learning project\nfirst we need to import our data then we\nshould prepare or clean it\nnext we select a machine learning\nalgorithm to build a model\nwe train our model and ask it to make\npredictions\nand finally we evaluate our algorithm to\nsee its accuracy\nif it's not accurate we either fine tune\nour model\nor select a different algorithm so let's\nfocus on the first step\ndownload the csv file below this video\nthis is a very basic csv that i've\ncreated for this project\nit's just some random made up data it's\nnot real\nso we have a table with three columns\nage gender\nand genre gender can either be one which\nrepresents a male\nor zero which represents a female here\ni'm making a few assumptions\ni'm assuming that men between 20 and 25\nlike hip-hop\nmen between 26 and 30 like jazz\nand after the age of 30 they like\nclassical music\nfor women i'm assuming that if they're\nbetween 20 and 25 they like dance music\nif they're between 26 and 30 they like\nacoustic music\nand just like men after the age of 30\nthey like classical music\nonce again this is a made-up pattern\nit's not the representation of the\nreality\nso let's go ahead and download this csv\nclick on this\ndot dot icon here and download this file\nin my downloads folder here we have this\nmusic.csv\ni'm going to drag and drop this onto\ndesktop because that's where\ni've stored this hello world notebook so\ni want you to put the csv file\nright next to your jupyter notebook\nnow back to our notebook we need to read\nthe csv file\nso just like before first we need to\nimport the pandas module\nso import pandas as pd\nand then we'll call pd that read analyze\ncsv\nand the name of our file is music.csv\nas you saw earlier this returns a data\nframe which is a two-dimensional array\nsimilar to an excel spreadsheet so let's\ncall that\nmusic underline data\nnow let's inspect this music underline\ndata to make sure we loaded everything\nproperly\nso run so here's our data frame\nbeautiful next minute to prepare or\nclean the data\nand that's the topic for the next\nlecture\nthe second step in a machine learning\nproject is cleaning or preparing the\ndata\nand that involves tasks such as removing\nduplicates\nnull values and so on now in this\nparticular data set we don't have to do\nany kind of cleaning because we don't\nhave any duplicates\nand as you can see all rows have values\nfor all columns so we don't have null\nvalues but there is one thing we need to\ndo\nwe should split this data set into two\nseparate data sets\none with the first two columns which we\nrefer to as the input set\nand the other with the last column which\nwe refer to as the output set\nso when we train a model we give it two\nseparate data sets\nthe input set and the output set the\noutput set\nwhich is in this case the genre column\ncontains\nthe predictions so we're telling our\nmodel that if we have\na user who's 20 years old and is a male\nthey like\nhip hop once we train our model then we\ngive it a new input set\nfor example we say hey we have a new\nuser who is 21 years old\nand is a male what is the genre of the\nmusic that this user probably likes\nas you can see in our input set we don't\nhave a sample for a 21 year old male\nso we're going to ask our model to\npredict that\nthat is the reason we need to split this\ndata set into two separate sets\ninput and output so back to our code\nthis data frame object has a method\ncalled drop\nnow if you put the cursor under method\nname and press\nshift and tab you can see this tooltip\nso this is the signature of this drop\nmethod these are the parameters that we\ncan pass here\nthe parameter we're going to use in this\nlecture is columns which is set to none\nby default\nwith this parameter we can specify the\ncolumns we want to drop\nso in this case we set columns\nto an array with one string genre\nnow this method doesn't actually modify\nthe original data set\nin fact it will create a new data set\nbut without\nthis column so by convention we use a\ncapital x\nto represent that data set so capital x\nequals this expression now\nlet's inspect x so as you can\nsee our input set or x includes these\ntwo columns\nage and gender it doesn't have the\noutput or predictions\nnext we need to create our output set so\nonce again we start with our data frame\nmusic data\nusing square brackets we can get all the\nvalues in a given column\nin this case genre once again this\nreturns\na new data set by convention we use a\nlowercase y\nto represent that so that is our output\ndata set\nlet's inspect that as well\nso in this data set we only have the\npredictions or\nthe answers so we have prepared our data\nnext we need to create a model using an\nalgorithm\nthe next step is to build a model using\na machine learning algorithm\nthere are so many algorithms out there\nand each algorithm has its pros and cons\nin terms of the performance and accuracy\nin this lecture we're going to use a\nvery simple algorithm called\ndecision tree now the good news is that\nwe don't have to explicitly\nprogram these algorithms they're already\nimplemented for us in a library called\nscikit-learn so here on the top\nfrom sklearn.3\nlet's import the decision\ntree classifier so sklearn\nis the package that comes with\nscikit-learn library this is the most\npopular machine learning library in\npython\nin this package we have a module called\ntree and in this module we have a class\ncalled\ndecision tree classifier this class\nimplements\nthe decision tree algorithm okay so\nnow we need to create a new instance of\nthis class\nso at the end let's create an object\ncalled\nmodel and set it to a new instance of\ndecision\ntree classifier\nlike this so now we have a model next we\nneed to train it so it learns\npatterns in the data and that is pretty\neasy we call\nmodel that fit this method takes two\ndata sets\nthe input set and the output set so\nthey are capital x and y\nnow finally we need to ask our model to\nmake a prediction\nso we can ask it what is the kind of\nmusic that a 21 year old male likes\nnow before we do that let's temporarily\ninspect\nour initial data set that is music data\nso look what we got here\nas i told you earlier i've assumed that\nmen between 20\nand 25 like hip-hop music but here we\nonly have\nthree samples for men aged 20\n23 and 25 we don't have a sample for a\n21 year old male\nso if you ask our model to predict the\nkind of music that a 21 year old male\nlikes we expect it to say\nhip hop similarly i've assumed that\nwomen between 20 and 25\nlike dance music but we don't have a\nsample for a 22 year old female\nso once again if you ask our model to\npredict the kind of music\nthat a 22 year old woman likes we expect\nit to say\ndance so with these assumptions\nlet's go ahead and ask our model to make\npredictions\nso let's remove\nthe last line and instead we're going to\ncall\nmodel dot predict this method\ntakes a two dimensional array so here's\nthe outer array\nin this array each element is an array\nso i'm going to pass\nanother array here and in this array i'm\ngoing to pass\na new input set a 21 year old male\nso 21 comma one that is like a new\nrecord\nin this table okay so this is one input\nset\nlet's pass another input set for a\n22-year female\nso here's another array here we add 22\ncomma zero so we're asking our model to\nmake two predictions at the same time\nwe get the result and store it in a\nvariable called predictions\nand finally let's inspect that in our\nnotebook\nrun look what we got\nour model is saying that a 21 year old\nmale\nlikes hip hop and a 22 year old female\nlikes\ndance music so our model could\nsuccessfully make predictions here\nbeautiful but wait a second building a\nmodel that makes predictions accurately\nis not always that easy\nas i told you earlier after we build a\nmodel we need to measure its accuracy\nand if it's not accurate enough we\nshould either fine tune it or build a\nmodel using a different algorithm\nso in the next lecture i'm going to show\nyou how to measure the accuracy of a\nmodel\nin this lecture i'm going to show you\nhow to measure the accuracy of your\nmodels\nnow in order to do so first we need to\nsplit our data set\ninto two sets one for training and the\nother for testing\nbecause right now we're passing the\nentire data set\nfor training the model and we're using\ntwo samples\nfor making predictions that is not\nenough to calculate the accuracy of a\nmodel\na general rule of thumb is to allocate\n70 to 80 percent of our data\nfor training and the other twenty to\nthirty percent for testing\nthen instead of passing only two samples\nfor making predictions\nwe can pass the data set we have for\ntesting we'll get the predictions\nand then we can compare these\npredictions with the actual values\nin the test set based on that we can\ncalculate the accuracy\nthat's really easy all we have to do is\nto import a couple of functions\nand call them in this code let me show\nyou so first on the top\nfrom sklearn the model\nunderline selection module we import\na function called train test split\nwith this function we can easily split\nour data set into two sets\nfor training and testing now\nright here after we define x and y sets\nwe call this function\nso train test split\nwe give it three arguments x y\nand a keyboard argument that specifies\nthe size of our test data set\nso test underline size we set it to 0.2\nso we are allocating 20 of our data for\ntesting\nnow this function returns a tuple so we\ncan unpack it into four variables\nright here x underline train\nx underline test y underline train\nand y underline test\nso the first two variables are the input\nsets for training\nand testing and the other are the output\nsets\nfor training and testing now when\ntraining our model\ninstead of passing the entire data set\nwe want to pass only\nthe training data set so x\nunderline train and y\nunderline train also when making\npredictions\ninstead of passing these two samples we\npass x\nunderline test so that is the data set\nthat contains\ninput values for testing now we get\nthe predictions to calculate the\naccuracy we simply have to compare these\npredictions\nwith the actual values we have in our\noutput set\nfor testing that is very easy first on\nthe top we need to import\na function so from sklearn.metrics\nmetrics\nimport accuracy underlying score\nnow at the very end we call this\nfunction so accuracy\nscore and\ngive it two arguments y underline test\nwhich contains\nthe expected values and predictions\nwhich contains the actual values now\nthis function returns\nan accuracy score between zero to one so\nwe can store it here\nand simply display it on the console\nso let's go ahead and run this program\nso the accuracy score is one or 100\npercent\nbut if we run this one more time we're\ngoing to see a different result\nbecause every time we split our data set\ninto training and test sets\nwe'll have different data sets because\nthis function randomly picks data\nfor training and testing let me show you\nso put the cursor\nin the cell now you can see this cell is\nactivated note that if you click this\nbutton here\nit will run this cell and also inserts a\nnew cell\nbelow this cell let me show you so if i\ngo to the second cell\npress escape button now we are in the\ncommand mode\npress d twice okay now it's deleted\nif we click the run button you can see\nthis code was executed and now we have a\nnew cell\nso if you want to run our first cell\nmultiple times every time we have to\nclick this\nand then run it and then click again and\nrun it it's a little bit tedious\nso i'll show you a shortcut activate the\nfirst cell\nand press ctrl and enter\nthis runs the current cell without\nadding a new cell\nbelow it so back here let's run it\nmultiple times\nokay now look the accuracy dropped to\n0.75\nit's still good so the accuracy score\nhere is somewhere between\n75 to 100 but let me show you something\nif i change the test size from 0.2\nto 0.8 so essentially we're using only\n20\nof our data for training this model and\nwe're using the other 80\nfor testing now let's see what happens\nwhen we run this cell multiple times\nso control and enter look the accuracy\nimmediately dropped to 0.4\none more time now 46 percent\n40 26 it's really really bad\nthe reason this is happening is because\nwe are using very little data\nfor training this model this is one of\nthe key concepts in machine learning\nthe more data we give to our model and\nthe cleaner the data is\nwe get the better result so if we have\nduplicates\nirrelevant data or incomplete values our\nmodel will learn\nbad patterns in our data that is why\nit's really important to clean our data\nbefore training our model now let's\nchange this back to 0.2\nrun this one more time okay now the\naccuracy is one\n75 percent now we drop to 50\nagain the reason this is happening is\nbecause we don't have enough data\nsome machine learning problems require\nthousands or even millions of samples\nto train a model the more complex the\nproblem is the more data we need\nfor example here we're only dealing with\na table of three columns\nbut if you want to build a model to tell\nif a picture is a cat or a dog or a\nhorse or a lion\nwe'll need millions of pictures the more\nanimals we want to support the more\npictures we need\nin the next lecture we're going to talk\nabout model persistence\nso this is a very basic implementation\nof building and training a model to make\npredictions\nnow to simplify things i have removed\nall the code that we wrote in the last\nlecture for\ncalculating the accuracy because in this\nlecture we're going to focus\non a different topic so basically we\nimport our data set\ncreate a model train it and then\nask it to make predictions now this\npiece of code that you see\nhere is not what we want to run every\ntime we have a new user or every time we\nwant to make recommendations\nto an existing user because training a\nmodel can sometimes be really time\nconsuming\nin this example we're dealing with a\nvery small data set that has\nonly 20 records but in real applications\nwe might have a data set\nwith thousands or millions of samples\ntraining a model for that might take\nseconds\nminutes or even hours so that is why\nmodel persistence is important\nonce in a while we build and train our\nmodel and then we'll save it to a file\nnow next time we want to make\npredictions we simply load the model\nfrom the file and\nask it to make predictions that model is\nalready trained we don't need to retrain\nit\nit's like an intelligent person so let\nme show you how to do this it's very\nvery easy\non the top from sklearn.externals\nmodule we import\nlib this job live object has methods for\nsaving\nand loading models so after\nwe train our model we simply call\njoblib dot dump\nand give it two arguments our model and\nthe name of the file\nin which we want to store this model\nlet's call that\nmusic dash recommender\ndot job lib that's all we have to do\nnow temporarily i'm going to comment out\nthis line we don't want to make any\npredictions we just want to store our\ntrained model in a file\nso let's run this cell with control and\nslash\nokay look in the output we have an array\nthat contains the name of our model file\nso this is the return value of the dump\nmethod\nnow back to our desktop right next to my\nnotebook you can see our job live file\nthis is where our model is stored it's\nsimply a binary file\nnow back to our jupyter notebook as i\ntold you before in a real application we\ndon't want to train a model\nevery time so let's comment out\nthese few lines so i've selected these\nfew lines on mac we can press\ncommand and slash on windows control\nslash\nokay these lines are commented out now\nthis time instead of dumping our model\nwe're going to load it so we call the\nload method we don't have the model we\nsimply pass\nthe name of our model file this returns\nour trained\nmodel now with these two lines we can\nsimply\nmake predictions so earlier we assumed\nthat men between 20 and 25\nlike hip-hop music let's print\npredictions and see if our model is\nbehaving correctly or not\nso control and enter there you go\nso this is how we persist and load\nmodels\nearlier in this section i told you that\ndecision trees are the easiest to\nunderstand and that's why we started\nmachine learning\nwith decision trees in this lecture\nwe're going to export our model in a\nvisual format\nso you will see how this model makes\npredictions\nthat is really really cool let me show\nyou so\nonce again i've simplified this code so\nwe simply import\nour data set create input and output\nsets\ncreate a model and train it\nthat's all we are doing now i want you\nto follow along with me\ntype everything exactly as i show you in\nthis lecture don't worry about\nwhat everything means we're going to\ncome back to it shortly so\non the top from sklearn\nimport tree this object\nhas a method for exporting our decision\ntree in a graphical format\nso after we train our model let's call\ntree dot export underline\ngraph vis now here are a few arguments\nwe need to pass\nthe first argument is our model the\nsecond is the name of the output file\nso here we're going to use keyword\narguments because this method takes so\nmany parameters and we want to\nselectively pass\nkeyword arguments without worrying about\ntheir order\nso the parameter we're going to set is\nout\nunderline file let's set this to\nmusic dash recommender dot\nd o t this is the dot format which is a\ngraph\ndescription language you'll see that\nshortly\nthe other parameter we want to set is\nfeature\nunderline names we set this to an array\nof two strings age and\ngender these are the features or the\ncolumns\nof our data set so they are the\nproperties or features of our data\nokay the other parameter is class names\nso class underline names we should set\nthis to the list of classes\nor labels we have in our output data set\nlike hip hop jazz classical and so on\nso this y data set includes all the\ngenres or all the classes of our data\nbut they're repeated a few times in this\ndata set so\nhere we call y dot unique this returns\nthe unique list of classes now we should\nsort this alphabetically\nso we call the sorted function and\npass the result a y dot unique\nthe next parameter is label we set this\nto a string\nall once again don't worry about the\ndetails of these parameters we're going\nto come back to this shortly\nso set label to all then\nround it to true and finally\nfilled to true so this is the end result\nnow let's run this cell using control\nand enter\nokay here we have a new file\nmusic recommender dot dot that's a\nlittle bit funny\nso we want to open this file with vs\ncode so drag and drop this\ninto a vs code window\nokay here's a dot format it's a textual\nlanguage for describing graphs\nnow to visualize this graph we need to\ninstall an extension in vs code\nso on the left side click the extensions\npanel\nand search for dot dot\nlook at the second extension here\ngraphviz or dot\nlanguage by staphon vs\ngo ahead and install this extension and\nthen reload vs code\nonce you do that you can visualize this\ndot file\nso let me close this tab all right\nlook at this dot dot here on the right\nside click this\nyou should have a new menu open preview\nto the site\nso click that all right here's the\nvisualization\nof our decision tree let's close the dot\nfile\nthere you go this is exactly how our\nmodel makes predictions\nso we have this binary tree which means\nevery node can have\na maximum of two children on top of each\nnode we have\na condition if this condition is true we\ngo to the child node on the left side\notherwise we go to the child node on the\nright side so let's see what's happening\nhere\nthe first condition is age less than or\nequal to 30.5\nif this condition is false that means\nthat user is 30 years or older\nso the genre of the music that they're\ninterested in is classical\nso here we're classifying people based\non their profile\nthat is the reason we have the word\nclass here so a user who is 30 years or\nolder\nbelongs to the class of classical or\npeople who like\nclassical music now what if this\ncondition is true\nthat means that user is younger than 30.\nso now we check the gender if it's less\nthan\n0.5 which basically means if it equals\nto 0\nthen we're dealing with a female so we\ngo to the child node here\nnow once again we have another condition\nso we're dealing with a female who is\nyounger than 30.\nonce again we need to check their age so\nis the age\nless than 25.5 if that's the case then\nthat user likes dance music otherwise\nthey like acoustic music\nso this is the decision tree that our\nmodel uses to make\npredictions now if you're wondering why\nwe have these floating point numbers\nlike 25.5 these are basically the rules\nthat our model generates\nbased on the patterns that it finds in\nour data set\nas we give our model more data these\nrules will change so they're not always\nthe same\nalso the more columns or more features\nwe have our decision tree is going to\nget more complex\ncurrently we have only two features age\nand gender\nnow back to our code let me quickly\nexplain the meaning of all these\nparameters\nwe set fill to true so each box or each\nnode is filled with a color\nwe set rounded to true so they have\nrounded corners\nwe set label to all so every node has\nlabels that we can read\nwe set class names to the unique list of\ngenres\nand that's for displaying the class for\neach node right here\nand we set feature names to age and\ngender\nso we can see the rules in our notes\nhey thank you for watching my tutorial i\nhope you learned a lot and you're\nexcited to learn more\nif you enjoyed this tutorial please like\nand share it with others and be sure to\nsubscribe to my channel\nas i upload new videos every week once\nagain thank you and i wish you all the\n[Music]\nbest\n",
  "words": [
    "music",
    "looking",
    "machine",
    "learning",
    "tutorial",
    "python",
    "jupyter",
    "notebook",
    "tutorial",
    "going",
    "learn",
    "solve",
    "real",
    "world",
    "problem",
    "using",
    "machine",
    "learning",
    "python",
    "going",
    "start",
    "brief",
    "introduction",
    "machine",
    "learning",
    "going",
    "talk",
    "tools",
    "need",
    "going",
    "jump",
    "straight",
    "problem",
    "going",
    "solve",
    "learn",
    "build",
    "model",
    "learn",
    "predict",
    "kind",
    "music",
    "people",
    "like",
    "end",
    "one",
    "hour",
    "tutorial",
    "good",
    "understanding",
    "machine",
    "learning",
    "basics",
    "able",
    "learn",
    "intermediate",
    "advanced",
    "level",
    "concepts",
    "need",
    "prior",
    "knowledge",
    "machine",
    "learning",
    "need",
    "know",
    "python",
    "fairly",
    "well",
    "got",
    "couple",
    "tutorials",
    "channel",
    "links",
    "video",
    "ashamed",
    "super",
    "excited",
    "instructor",
    "channel",
    "tons",
    "programming",
    "tutorials",
    "might",
    "find",
    "helpful",
    "sure",
    "subscribe",
    "upload",
    "new",
    "tutorials",
    "every",
    "week",
    "let",
    "jump",
    "get",
    "started",
    "section",
    "going",
    "learn",
    "machine",
    "learning",
    "subset",
    "ai",
    "artificial",
    "intelligence",
    "one",
    "trending",
    "topics",
    "world",
    "days",
    "going",
    "lot",
    "applications",
    "future",
    "example",
    "imagine",
    "ask",
    "write",
    "program",
    "scan",
    "image",
    "tell",
    "cat",
    "doc",
    "want",
    "build",
    "program",
    "using",
    "traditional",
    "programming",
    "techniques",
    "program",
    "going",
    "get",
    "overly",
    "complex",
    "come",
    "lots",
    "rules",
    "look",
    "specific",
    "curves",
    "edges",
    "colors",
    "image",
    "tell",
    "cat",
    "dog",
    "give",
    "black",
    "white",
    "photo",
    "rules",
    "may",
    "work",
    "may",
    "break",
    "rewrite",
    "might",
    "give",
    "picture",
    "cat",
    "dog",
    "different",
    "angle",
    "predict",
    "solving",
    "problem",
    "using",
    "traditional",
    "programming",
    "techniques",
    "going",
    "get",
    "overly",
    "complex",
    "sometimes",
    "impossible",
    "make",
    "matter",
    "worse",
    "future",
    "ask",
    "extend",
    "program",
    "supports",
    "three",
    "kinds",
    "animals",
    "cats",
    "dogs",
    "horses",
    "rewrite",
    "rules",
    "gon",
    "na",
    "work",
    "machine",
    "learning",
    "technique",
    "solve",
    "kind",
    "problems",
    "works",
    "build",
    "model",
    "engine",
    "give",
    "lots",
    "lots",
    "data",
    "example",
    "give",
    "thousands",
    "tens",
    "thousands",
    "pictures",
    "cats",
    "dogs",
    "model",
    "find",
    "learn",
    "patterns",
    "input",
    "data",
    "give",
    "new",
    "picture",
    "cat",
    "seen",
    "ask",
    "cat",
    "dog",
    "horse",
    "tell",
    "us",
    "certain",
    "level",
    "accuracy",
    "input",
    "data",
    "give",
    "accurate",
    "model",
    "going",
    "basic",
    "example",
    "machine",
    "learning",
    "applications",
    "cars",
    "robotics",
    "language",
    "processing",
    "vision",
    "processing",
    "forecasting",
    "things",
    "like",
    "stock",
    "market",
    "trends",
    "weather",
    "games",
    "basic",
    "idea",
    "machine",
    "learning",
    "next",
    "look",
    "machine",
    "learning",
    "action",
    "machine",
    "learning",
    "project",
    "involves",
    "number",
    "steps",
    "first",
    "step",
    "import",
    "data",
    "often",
    "comes",
    "form",
    "csv",
    "file",
    "might",
    "database",
    "lots",
    "data",
    "simply",
    "export",
    "data",
    "store",
    "csv",
    "file",
    "purpose",
    "machine",
    "learning",
    "project",
    "import",
    "data",
    "next",
    "need",
    "clean",
    "involves",
    "tasks",
    "removing",
    "duplicated",
    "data",
    "duplicates",
    "data",
    "want",
    "feed",
    "model",
    "otherwise",
    "model",
    "learn",
    "bad",
    "patterns",
    "data",
    "produce",
    "wrong",
    "result",
    "make",
    "sure",
    "input",
    "data",
    "good",
    "clean",
    "shape",
    "data",
    "irrelevant",
    "remove",
    "duplicated",
    "incomplete",
    "remove",
    "modify",
    "data",
    "like",
    "name",
    "countries",
    "genres",
    "music",
    "cats",
    "dogs",
    "need",
    "convert",
    "numerical",
    "values",
    "step",
    "really",
    "depends",
    "kind",
    "data",
    "working",
    "every",
    "project",
    "different",
    "clean",
    "data",
    "set",
    "need",
    "split",
    "two",
    "segments",
    "one",
    "training",
    "model",
    "testing",
    "make",
    "sure",
    "model",
    "produces",
    "right",
    "result",
    "example",
    "thousand",
    "pictures",
    "cats",
    "dogs",
    "reserve",
    "eighty",
    "percent",
    "training",
    "20",
    "testing",
    "next",
    "step",
    "create",
    "model",
    "involves",
    "selecting",
    "algorithm",
    "analyze",
    "data",
    "many",
    "different",
    "machine",
    "learning",
    "algorithms",
    "decision",
    "trees",
    "neural",
    "networks",
    "algorithm",
    "pros",
    "cons",
    "terms",
    "accuracy",
    "performance",
    "algorithm",
    "choose",
    "depends",
    "kind",
    "problem",
    "trying",
    "solve",
    "input",
    "data",
    "good",
    "news",
    "explicitly",
    "program",
    "algorithm",
    "libraries",
    "provide",
    "algorithms",
    "one",
    "popular",
    "ones",
    "going",
    "look",
    "tutorial",
    "build",
    "model",
    "using",
    "algorithm",
    "next",
    "need",
    "train",
    "model",
    "fitted",
    "training",
    "data",
    "model",
    "look",
    "patterns",
    "data",
    "next",
    "ask",
    "make",
    "predictions",
    "back",
    "example",
    "cats",
    "dogs",
    "ask",
    "model",
    "cat",
    "dog",
    "model",
    "make",
    "prediction",
    "prediction",
    "always",
    "accurate",
    "fact",
    "start",
    "likely",
    "predictions",
    "inaccurate",
    "need",
    "evaluate",
    "predictions",
    "measure",
    "accuracy",
    "need",
    "get",
    "back",
    "model",
    "either",
    "select",
    "different",
    "algorithm",
    "going",
    "produce",
    "accurate",
    "result",
    "kind",
    "problem",
    "trying",
    "solve",
    "parameters",
    "model",
    "algorithm",
    "parameters",
    "modify",
    "optimize",
    "accuracy",
    "high",
    "level",
    "steps",
    "follow",
    "machine",
    "learning",
    "project",
    "next",
    "look",
    "libraries",
    "tools",
    "machine",
    "learning",
    "lecture",
    "going",
    "look",
    "popular",
    "python",
    "libraries",
    "use",
    "machine",
    "learning",
    "projects",
    "first",
    "one",
    "numpy",
    "provides",
    "array",
    "popular",
    "library",
    "second",
    "one",
    "pandas",
    "data",
    "analysis",
    "library",
    "provides",
    "concept",
    "called",
    "data",
    "frame",
    "data",
    "frame",
    "data",
    "structure",
    "similar",
    "excel",
    "spreadsheet",
    "rows",
    "columns",
    "select",
    "data",
    "row",
    "column",
    "range",
    "rows",
    "columns",
    "popular",
    "machine",
    "learning",
    "data",
    "science",
    "projects",
    "third",
    "library",
    "matplotlib",
    "plotting",
    "library",
    "creating",
    "graphs",
    "plots",
    "next",
    "library",
    "one",
    "popular",
    "machine",
    "learning",
    "libraries",
    "provides",
    "common",
    "algorithms",
    "like",
    "decision",
    "trees",
    "neural",
    "networks",
    "working",
    "machine",
    "learning",
    "projects",
    "use",
    "environment",
    "called",
    "jupiter",
    "writing",
    "code",
    "technically",
    "still",
    "use",
    "vs",
    "code",
    "code",
    "editors",
    "editors",
    "ideal",
    "machine",
    "learning",
    "projects",
    "frequently",
    "need",
    "inspect",
    "data",
    "really",
    "hard",
    "environments",
    "like",
    "vs",
    "code",
    "terminal",
    "working",
    "table",
    "10",
    "20",
    "columns",
    "visualizing",
    "data",
    "terminal",
    "window",
    "really",
    "really",
    "difficult",
    "messy",
    "use",
    "jupiter",
    "makes",
    "really",
    "easy",
    "inspect",
    "data",
    "install",
    "jupyter",
    "going",
    "use",
    "platform",
    "called",
    "anaconda",
    "head",
    "download",
    "page",
    "download",
    "anaconda",
    "distribution",
    "operating",
    "system",
    "distributions",
    "windows",
    "mac",
    "linux",
    "let",
    "go",
    "ahead",
    "install",
    "anaconda",
    "python",
    "download",
    "right",
    "anaconda",
    "downloaded",
    "machine",
    "let",
    "double",
    "click",
    "right",
    "first",
    "going",
    "run",
    "program",
    "determine",
    "software",
    "installed",
    "let",
    "continue",
    "continue",
    "continue",
    "pretty",
    "easy",
    "continue",
    "one",
    "time",
    "agree",
    "license",
    "agreement",
    "okay",
    "use",
    "default",
    "installation",
    "location",
    "worry",
    "click",
    "install",
    "give",
    "seconds",
    "beautiful",
    "thing",
    "anaconda",
    "install",
    "jupyter",
    "well",
    "popular",
    "data",
    "science",
    "libraries",
    "like",
    "numpy",
    "pandas",
    "manually",
    "install",
    "using",
    "pip",
    "right",
    "part",
    "next",
    "step",
    "anaconda",
    "suggesting",
    "install",
    "microsoft",
    "vs",
    "code",
    "already",
    "machine",
    "install",
    "go",
    "continue",
    "close",
    "installation",
    "finally",
    "move",
    "trash",
    "need",
    "installer",
    "future",
    "right",
    "open",
    "terminal",
    "window",
    "type",
    "jupyter",
    "space",
    "notebook",
    "start",
    "notebook",
    "server",
    "machine",
    "enter",
    "go",
    "start",
    "notebook",
    "server",
    "machine",
    "see",
    "default",
    "messages",
    "worry",
    "automatically",
    "opens",
    "browser",
    "window",
    "pointing",
    "localhost",
    "port",
    "888",
    "call",
    "jupiter",
    "dashboard",
    "dashboard",
    "tabs",
    "first",
    "tab",
    "files",
    "tab",
    "default",
    "points",
    "home",
    "directory",
    "every",
    "user",
    "machine",
    "home",
    "directory",
    "home",
    "directory",
    "mac",
    "see",
    "desktop",
    "folder",
    "well",
    "documents",
    "downloads",
    "machine",
    "going",
    "see",
    "different",
    "folders",
    "someone",
    "machine",
    "need",
    "create",
    "jupyter",
    "notebook",
    "going",
    "go",
    "desktop",
    "desktop",
    "anything",
    "click",
    "new",
    "want",
    "create",
    "notebook",
    "python",
    "notebook",
    "write",
    "python",
    "code",
    "execute",
    "line",
    "line",
    "easily",
    "visualize",
    "data",
    "see",
    "next",
    "videos",
    "let",
    "go",
    "ahead",
    "right",
    "first",
    "notebook",
    "see",
    "default",
    "called",
    "untitled",
    "let",
    "change",
    "hello",
    "world",
    "going",
    "hello",
    "world",
    "machine",
    "learning",
    "project",
    "let",
    "rename",
    "look",
    "desktop",
    "see",
    "file",
    "pi",
    "nb",
    "jupiter",
    "notebook",
    "kind",
    "similar",
    "pi",
    "files",
    "write",
    "python",
    "code",
    "includes",
    "additional",
    "data",
    "jupiter",
    "uses",
    "execute",
    "code",
    "back",
    "notebook",
    "let",
    "print",
    "hello",
    "world",
    "click",
    "run",
    "button",
    "result",
    "printed",
    "jupyter",
    "navigate",
    "back",
    "forth",
    "terminal",
    "window",
    "see",
    "result",
    "right",
    "next",
    "going",
    "show",
    "load",
    "data",
    "set",
    "csv",
    "file",
    "jupyter",
    "right",
    "lecture",
    "going",
    "download",
    "data",
    "set",
    "popular",
    "website",
    "called",
    "gaggle",
    "basically",
    "place",
    "data",
    "science",
    "projects",
    "first",
    "thing",
    "need",
    "create",
    "account",
    "sign",
    "facebook",
    "google",
    "using",
    "custom",
    "email",
    "password",
    "sign",
    "come",
    "back",
    "search",
    "bar",
    "search",
    "video",
    "game",
    "sales",
    "name",
    "popular",
    "data",
    "set",
    "going",
    "use",
    "lecture",
    "list",
    "see",
    "first",
    "item",
    "kind",
    "reddish",
    "icon",
    "let",
    "go",
    "see",
    "data",
    "set",
    "includes",
    "sales",
    "data",
    "16",
    "000",
    "video",
    "games",
    "page",
    "see",
    "description",
    "various",
    "columns",
    "data",
    "set",
    "rank",
    "name",
    "platform",
    "year",
    "data",
    "source",
    "csv",
    "file",
    "called",
    "see",
    "16",
    "000",
    "rows",
    "11",
    "columns",
    "data",
    "set",
    "right",
    "see",
    "first",
    "records",
    "data",
    "set",
    "first",
    "record",
    "ranking",
    "game",
    "one",
    "wii",
    "sports",
    "game",
    "platform",
    "released",
    "year",
    "2006",
    "want",
    "go",
    "ahead",
    "download",
    "data",
    "set",
    "told",
    "need",
    "sign",
    "download",
    "give",
    "zip",
    "file",
    "see",
    "csv",
    "file",
    "want",
    "put",
    "right",
    "next",
    "jupyter",
    "notebook",
    "machine",
    "desktop",
    "going",
    "drag",
    "drop",
    "onto",
    "desktop",
    "folder",
    "look",
    "desktop",
    "see",
    "jupyter",
    "hello",
    "world",
    "notebook",
    "right",
    "next",
    "go",
    "back",
    "jupyter",
    "notebook",
    "let",
    "remove",
    "first",
    "line",
    "instead",
    "import",
    "pandas",
    "pd",
    "importing",
    "pandas",
    "module",
    "renaming",
    "pd",
    "type",
    "pandas",
    "dot",
    "several",
    "times",
    "code",
    "let",
    "type",
    "pd",
    "dot",
    "read",
    "underline",
    "csv",
    "pass",
    "name",
    "csv",
    "file",
    "vg",
    "csv",
    "file",
    "current",
    "folder",
    "right",
    "next",
    "jupyter",
    "notebook",
    "easily",
    "load",
    "otherwise",
    "supply",
    "full",
    "path",
    "file",
    "returns",
    "data",
    "frame",
    "object",
    "like",
    "excel",
    "spreadsheet",
    "let",
    "show",
    "store",
    "simply",
    "type",
    "df",
    "inspect",
    "one",
    "time",
    "let",
    "run",
    "program",
    "data",
    "frame",
    "rows",
    "columns",
    "rank",
    "name",
    "platform",
    "data",
    "frame",
    "object",
    "lots",
    "attributes",
    "methods",
    "going",
    "cover",
    "tutorial",
    "really",
    "beyond",
    "scope",
    "going",
    "leave",
    "read",
    "panda",
    "documentation",
    "follow",
    "tutorials",
    "learn",
    "pandas",
    "data",
    "frames",
    "lecture",
    "going",
    "show",
    "useful",
    "methods",
    "attributes",
    "first",
    "one",
    "shape",
    "shape",
    "let",
    "run",
    "one",
    "time",
    "shape",
    "data",
    "set",
    "16",
    "000",
    "records",
    "11",
    "columns",
    "technically",
    "two",
    "dimensional",
    "array",
    "sixteen",
    "thousand",
    "eleven",
    "okay",
    "see",
    "another",
    "segment",
    "writing",
    "code",
    "write",
    "code",
    "first",
    "segment",
    "second",
    "segment",
    "call",
    "one",
    "methods",
    "data",
    "frame",
    "df",
    "dot",
    "describe",
    "run",
    "program",
    "see",
    "output",
    "segment",
    "right",
    "next",
    "first",
    "segment",
    "three",
    "lines",
    "output",
    "last",
    "line",
    "second",
    "segment",
    "calling",
    "describe",
    "method",
    "right",
    "output",
    "segment",
    "beauty",
    "jupiter",
    "easily",
    "visualize",
    "data",
    "vs",
    "code",
    "terminal",
    "windows",
    "really",
    "tedious",
    "clunky",
    "describe",
    "method",
    "returning",
    "basically",
    "returning",
    "basic",
    "information",
    "column",
    "data",
    "set",
    "saw",
    "earlier",
    "columns",
    "like",
    "rank",
    "year",
    "columns",
    "numerical",
    "values",
    "column",
    "count",
    "number",
    "records",
    "column",
    "see",
    "rank",
    "column",
    "16",
    "598",
    "records",
    "whereas",
    "year",
    "column",
    "16",
    "327",
    "records",
    "shows",
    "records",
    "value",
    "year",
    "column",
    "values",
    "real",
    "data",
    "science",
    "machine",
    "learning",
    "project",
    "use",
    "techniques",
    "clean",
    "data",
    "set",
    "one",
    "option",
    "remove",
    "records",
    "value",
    "year",
    "column",
    "assign",
    "default",
    "value",
    "really",
    "depends",
    "project",
    "another",
    "attribute",
    "column",
    "mean",
    "average",
    "values",
    "case",
    "rank",
    "column",
    "value",
    "really",
    "matter",
    "look",
    "year",
    "average",
    "year",
    "video",
    "games",
    "data",
    "set",
    "2006",
    "might",
    "important",
    "problem",
    "trying",
    "solve",
    "also",
    "standard",
    "deviation",
    "measure",
    "quantify",
    "amount",
    "variation",
    "set",
    "values",
    "min",
    "example",
    "minimum",
    "value",
    "year",
    "column",
    "quite",
    "often",
    "work",
    "new",
    "data",
    "set",
    "call",
    "describe",
    "method",
    "get",
    "basic",
    "statistics",
    "data",
    "let",
    "show",
    "another",
    "useful",
    "attribute",
    "next",
    "segment",
    "let",
    "type",
    "let",
    "run",
    "see",
    "returns",
    "array",
    "square",
    "bracket",
    "indicates",
    "outer",
    "array",
    "second",
    "one",
    "represents",
    "inner",
    "array",
    "first",
    "element",
    "outer",
    "array",
    "array",
    "values",
    "array",
    "basically",
    "represent",
    "first",
    "row",
    "data",
    "set",
    "video",
    "game",
    "ranking",
    "1",
    "called",
    "wii",
    "sports",
    "basic",
    "overview",
    "pando",
    "data",
    "frames",
    "next",
    "lecture",
    "going",
    "show",
    "useful",
    "shortcuts",
    "jupyter",
    "lecture",
    "going",
    "show",
    "useful",
    "shortcuts",
    "jupyter",
    "first",
    "thing",
    "want",
    "pay",
    "attention",
    "green",
    "bar",
    "left",
    "indicates",
    "cell",
    "currently",
    "edit",
    "mode",
    "write",
    "code",
    "press",
    "escape",
    "key",
    "green",
    "turns",
    "blue",
    "means",
    "cell",
    "currently",
    "command",
    "mode",
    "basically",
    "activated",
    "cell",
    "either",
    "edit",
    "mode",
    "command",
    "mode",
    "depending",
    "mode",
    "different",
    "shortcuts",
    "currently",
    "command",
    "mode",
    "press",
    "h",
    "see",
    "list",
    "keyboard",
    "shortcuts",
    "right",
    "list",
    "see",
    "mac",
    "os",
    "modifier",
    "keys",
    "extra",
    "keys",
    "mac",
    "keyboard",
    "windows",
    "user",
    "going",
    "see",
    "example",
    "shape",
    "command",
    "key",
    "control",
    "option",
    "guideline",
    "easily",
    "understand",
    "shortcut",
    "associated",
    "command",
    "let",
    "show",
    "commands",
    "cell",
    "command",
    "mode",
    "example",
    "command",
    "open",
    "command",
    "palette",
    "exactly",
    "like",
    "command",
    "palette",
    "vs",
    "code",
    "shortcut",
    "execute",
    "command",
    "command",
    "shift",
    "f",
    "okay",
    "lots",
    "shortcuts",
    "course",
    "going",
    "use",
    "time",
    "good",
    "quick",
    "look",
    "see",
    "available",
    "shortcuts",
    "write",
    "code",
    "much",
    "faster",
    "let",
    "show",
    "useful",
    "ones",
    "going",
    "close",
    "first",
    "cell",
    "command",
    "mode",
    "going",
    "press",
    "b",
    "inserts",
    "new",
    "cell",
    "cell",
    "also",
    "go",
    "back",
    "first",
    "cell",
    "press",
    "escape",
    "cell",
    "command",
    "mode",
    "insert",
    "empty",
    "cell",
    "cell",
    "pressing",
    "either",
    "b",
    "b",
    "okay",
    "want",
    "cell",
    "press",
    "twice",
    "delete",
    "like",
    "cell",
    "going",
    "print",
    "hello",
    "world",
    "message",
    "print",
    "hello",
    "world",
    "run",
    "code",
    "cell",
    "click",
    "run",
    "button",
    "print",
    "function",
    "right",
    "see",
    "output",
    "function",
    "note",
    "run",
    "cell",
    "execute",
    "code",
    "cell",
    "words",
    "code",
    "cells",
    "executed",
    "let",
    "show",
    "mean",
    "cell",
    "cell",
    "going",
    "delete",
    "call",
    "describe",
    "method",
    "instead",
    "going",
    "print",
    "ocean",
    "going",
    "put",
    "cursor",
    "back",
    "cell",
    "print",
    "hello",
    "world",
    "message",
    "run",
    "cell",
    "see",
    "hello",
    "world",
    "displayed",
    "cell",
    "still",
    "displaying",
    "described",
    "table",
    "see",
    "changes",
    "solve",
    "problem",
    "go",
    "cell",
    "menu",
    "top",
    "run",
    "cells",
    "together",
    "work",
    "small",
    "projects",
    "sometimes",
    "working",
    "large",
    "data",
    "set",
    "want",
    "run",
    "cells",
    "together",
    "going",
    "take",
    "lot",
    "time",
    "reason",
    "jupiter",
    "saves",
    "output",
    "rerun",
    "code",
    "changed",
    "notebook",
    "file",
    "includes",
    "source",
    "code",
    "organized",
    "cells",
    "well",
    "output",
    "cell",
    "different",
    "regular",
    "pi",
    "file",
    "source",
    "code",
    "also",
    "autocompletion",
    "intellisense",
    "cell",
    "let",
    "call",
    "df",
    "dataframe",
    "dot",
    "press",
    "tab",
    "see",
    "attributes",
    "methods",
    "object",
    "let",
    "call",
    "describe",
    "cursor",
    "name",
    "method",
    "press",
    "shift",
    "tab",
    "see",
    "tooltip",
    "describes",
    "method",
    "parameter",
    "takes",
    "front",
    "signature",
    "see",
    "describe",
    "method",
    "parameters",
    "default",
    "value",
    "right",
    "see",
    "description",
    "method",
    "case",
    "generates",
    "descriptive",
    "statistics",
    "summarize",
    "central",
    "tendency",
    "similar",
    "vs",
    "code",
    "also",
    "convert",
    "line",
    "comment",
    "pressing",
    "command",
    "slash",
    "mac",
    "control",
    "slash",
    "windows",
    "like",
    "line",
    "comment",
    "press",
    "shortcut",
    "one",
    "time",
    "remove",
    "comment",
    "useful",
    "shortcuts",
    "jupyter",
    "next",
    "lectures",
    "going",
    "work",
    "real",
    "machine",
    "learning",
    "project",
    "get",
    "let",
    "delete",
    "cells",
    "start",
    "single",
    "empty",
    "cell",
    "cell",
    "first",
    "going",
    "press",
    "escape",
    "button",
    "cell",
    "blue",
    "command",
    "mode",
    "delete",
    "cell",
    "pressing",
    "twice",
    "go",
    "next",
    "cell",
    "activated",
    "command",
    "mode",
    "let",
    "delete",
    "well",
    "two",
    "cells",
    "delete",
    "go",
    "last",
    "one",
    "like",
    "empty",
    "notebook",
    "single",
    "cell",
    "hey",
    "guys",
    "wanted",
    "let",
    "know",
    "online",
    "coding",
    "school",
    "find",
    "plenty",
    "courses",
    "web",
    "mobile",
    "development",
    "fact",
    "comprehensive",
    "python",
    "course",
    "teaches",
    "everything",
    "python",
    "basics",
    "advanced",
    "concepts",
    "watch",
    "tutorial",
    "want",
    "learn",
    "may",
    "want",
    "look",
    "python",
    "course",
    "comes",
    "30",
    "day",
    "money",
    "back",
    "guarantee",
    "certificate",
    "completion",
    "add",
    "resume",
    "case",
    "interested",
    "link",
    "video",
    "next",
    "lectures",
    "going",
    "work",
    "real",
    "machine",
    "learning",
    "project",
    "imagine",
    "online",
    "music",
    "store",
    "users",
    "sign",
    "ask",
    "age",
    "gender",
    "based",
    "profile",
    "recommend",
    "various",
    "music",
    "albums",
    "likely",
    "buy",
    "project",
    "want",
    "use",
    "machine",
    "learning",
    "increase",
    "sales",
    "want",
    "build",
    "model",
    "feed",
    "model",
    "sample",
    "data",
    "based",
    "existing",
    "users",
    "model",
    "learn",
    "patterns",
    "data",
    "ask",
    "make",
    "predictions",
    "user",
    "signs",
    "tell",
    "model",
    "hey",
    "new",
    "user",
    "profile",
    "kind",
    "music",
    "user",
    "interested",
    "model",
    "say",
    "jazz",
    "hip",
    "hop",
    "whatever",
    "based",
    "make",
    "suggestions",
    "user",
    "problem",
    "going",
    "solve",
    "back",
    "list",
    "steps",
    "machine",
    "learning",
    "project",
    "first",
    "need",
    "import",
    "data",
    "prepare",
    "clean",
    "next",
    "select",
    "machine",
    "learning",
    "algorithm",
    "build",
    "model",
    "train",
    "model",
    "ask",
    "make",
    "predictions",
    "finally",
    "evaluate",
    "algorithm",
    "see",
    "accuracy",
    "accurate",
    "either",
    "fine",
    "tune",
    "model",
    "select",
    "different",
    "algorithm",
    "let",
    "focus",
    "first",
    "step",
    "download",
    "csv",
    "file",
    "video",
    "basic",
    "csv",
    "created",
    "project",
    "random",
    "made",
    "data",
    "real",
    "table",
    "three",
    "columns",
    "age",
    "gender",
    "genre",
    "gender",
    "either",
    "one",
    "represents",
    "male",
    "zero",
    "represents",
    "female",
    "making",
    "assumptions",
    "assuming",
    "men",
    "20",
    "25",
    "like",
    "men",
    "26",
    "30",
    "like",
    "jazz",
    "age",
    "30",
    "like",
    "classical",
    "music",
    "women",
    "assuming",
    "20",
    "25",
    "like",
    "dance",
    "music",
    "26",
    "30",
    "like",
    "acoustic",
    "music",
    "like",
    "men",
    "age",
    "30",
    "like",
    "classical",
    "music",
    "pattern",
    "representation",
    "reality",
    "let",
    "go",
    "ahead",
    "download",
    "csv",
    "click",
    "dot",
    "dot",
    "icon",
    "download",
    "file",
    "downloads",
    "folder",
    "going",
    "drag",
    "drop",
    "onto",
    "desktop",
    "stored",
    "hello",
    "world",
    "notebook",
    "want",
    "put",
    "csv",
    "file",
    "right",
    "next",
    "jupyter",
    "notebook",
    "back",
    "notebook",
    "need",
    "read",
    "csv",
    "file",
    "like",
    "first",
    "need",
    "import",
    "pandas",
    "module",
    "import",
    "pandas",
    "pd",
    "call",
    "pd",
    "read",
    "analyze",
    "csv",
    "name",
    "file",
    "saw",
    "earlier",
    "returns",
    "data",
    "frame",
    "array",
    "similar",
    "excel",
    "spreadsheet",
    "let",
    "call",
    "music",
    "underline",
    "data",
    "let",
    "inspect",
    "music",
    "underline",
    "data",
    "make",
    "sure",
    "loaded",
    "everything",
    "properly",
    "run",
    "data",
    "frame",
    "beautiful",
    "next",
    "minute",
    "prepare",
    "clean",
    "data",
    "topic",
    "next",
    "lecture",
    "second",
    "step",
    "machine",
    "learning",
    "project",
    "cleaning",
    "preparing",
    "data",
    "involves",
    "tasks",
    "removing",
    "duplicates",
    "null",
    "values",
    "particular",
    "data",
    "set",
    "kind",
    "cleaning",
    "duplicates",
    "see",
    "rows",
    "values",
    "columns",
    "null",
    "values",
    "one",
    "thing",
    "need",
    "split",
    "data",
    "set",
    "two",
    "separate",
    "data",
    "sets",
    "one",
    "first",
    "two",
    "columns",
    "refer",
    "input",
    "set",
    "last",
    "column",
    "refer",
    "output",
    "set",
    "train",
    "model",
    "give",
    "two",
    "separate",
    "data",
    "sets",
    "input",
    "set",
    "output",
    "set",
    "output",
    "set",
    "case",
    "genre",
    "column",
    "contains",
    "predictions",
    "telling",
    "model",
    "user",
    "20",
    "years",
    "old",
    "male",
    "like",
    "hip",
    "hop",
    "train",
    "model",
    "give",
    "new",
    "input",
    "set",
    "example",
    "say",
    "hey",
    "new",
    "user",
    "21",
    "years",
    "old",
    "male",
    "genre",
    "music",
    "user",
    "probably",
    "likes",
    "see",
    "input",
    "set",
    "sample",
    "21",
    "year",
    "old",
    "male",
    "going",
    "ask",
    "model",
    "predict",
    "reason",
    "need",
    "split",
    "data",
    "set",
    "two",
    "separate",
    "sets",
    "input",
    "output",
    "back",
    "code",
    "data",
    "frame",
    "object",
    "method",
    "called",
    "drop",
    "put",
    "cursor",
    "method",
    "name",
    "press",
    "shift",
    "tab",
    "see",
    "tooltip",
    "signature",
    "drop",
    "method",
    "parameters",
    "pass",
    "parameter",
    "going",
    "use",
    "lecture",
    "columns",
    "set",
    "none",
    "default",
    "parameter",
    "specify",
    "columns",
    "want",
    "drop",
    "case",
    "set",
    "columns",
    "array",
    "one",
    "string",
    "genre",
    "method",
    "actually",
    "modify",
    "original",
    "data",
    "set",
    "fact",
    "create",
    "new",
    "data",
    "set",
    "without",
    "column",
    "convention",
    "use",
    "capital",
    "x",
    "represent",
    "data",
    "set",
    "capital",
    "x",
    "equals",
    "expression",
    "let",
    "inspect",
    "x",
    "see",
    "input",
    "set",
    "x",
    "includes",
    "two",
    "columns",
    "age",
    "gender",
    "output",
    "predictions",
    "next",
    "need",
    "create",
    "output",
    "set",
    "start",
    "data",
    "frame",
    "music",
    "data",
    "using",
    "square",
    "brackets",
    "get",
    "values",
    "given",
    "column",
    "case",
    "genre",
    "returns",
    "new",
    "data",
    "set",
    "convention",
    "use",
    "lowercase",
    "represent",
    "output",
    "data",
    "set",
    "let",
    "inspect",
    "well",
    "data",
    "set",
    "predictions",
    "answers",
    "prepared",
    "data",
    "next",
    "need",
    "create",
    "model",
    "using",
    "algorithm",
    "next",
    "step",
    "build",
    "model",
    "using",
    "machine",
    "learning",
    "algorithm",
    "many",
    "algorithms",
    "algorithm",
    "pros",
    "cons",
    "terms",
    "performance",
    "accuracy",
    "lecture",
    "going",
    "use",
    "simple",
    "algorithm",
    "called",
    "decision",
    "tree",
    "good",
    "news",
    "explicitly",
    "program",
    "algorithms",
    "already",
    "implemented",
    "us",
    "library",
    "called",
    "top",
    "let",
    "import",
    "decision",
    "tree",
    "classifier",
    "sklearn",
    "package",
    "comes",
    "library",
    "popular",
    "machine",
    "learning",
    "library",
    "python",
    "package",
    "module",
    "called",
    "tree",
    "module",
    "class",
    "called",
    "decision",
    "tree",
    "classifier",
    "class",
    "implements",
    "decision",
    "tree",
    "algorithm",
    "okay",
    "need",
    "create",
    "new",
    "instance",
    "class",
    "end",
    "let",
    "create",
    "object",
    "called",
    "model",
    "set",
    "new",
    "instance",
    "decision",
    "tree",
    "classifier",
    "like",
    "model",
    "next",
    "need",
    "train",
    "learns",
    "patterns",
    "data",
    "pretty",
    "easy",
    "call",
    "model",
    "fit",
    "method",
    "takes",
    "two",
    "data",
    "sets",
    "input",
    "set",
    "output",
    "set",
    "capital",
    "x",
    "finally",
    "need",
    "ask",
    "model",
    "make",
    "prediction",
    "ask",
    "kind",
    "music",
    "21",
    "year",
    "old",
    "male",
    "likes",
    "let",
    "temporarily",
    "inspect",
    "initial",
    "data",
    "set",
    "music",
    "data",
    "look",
    "got",
    "told",
    "earlier",
    "assumed",
    "men",
    "20",
    "25",
    "like",
    "music",
    "three",
    "samples",
    "men",
    "aged",
    "20",
    "23",
    "25",
    "sample",
    "21",
    "year",
    "old",
    "male",
    "ask",
    "model",
    "predict",
    "kind",
    "music",
    "21",
    "year",
    "old",
    "male",
    "likes",
    "expect",
    "say",
    "hip",
    "hop",
    "similarly",
    "assumed",
    "women",
    "20",
    "25",
    "like",
    "dance",
    "music",
    "sample",
    "22",
    "year",
    "old",
    "female",
    "ask",
    "model",
    "predict",
    "kind",
    "music",
    "22",
    "year",
    "old",
    "woman",
    "likes",
    "expect",
    "say",
    "dance",
    "assumptions",
    "let",
    "go",
    "ahead",
    "ask",
    "model",
    "make",
    "predictions",
    "let",
    "remove",
    "last",
    "line",
    "instead",
    "going",
    "call",
    "model",
    "dot",
    "predict",
    "method",
    "takes",
    "two",
    "dimensional",
    "array",
    "outer",
    "array",
    "array",
    "element",
    "array",
    "going",
    "pass",
    "another",
    "array",
    "array",
    "going",
    "pass",
    "new",
    "input",
    "set",
    "21",
    "year",
    "old",
    "male",
    "21",
    "comma",
    "one",
    "like",
    "new",
    "record",
    "table",
    "okay",
    "one",
    "input",
    "set",
    "let",
    "pass",
    "another",
    "input",
    "set",
    "female",
    "another",
    "array",
    "add",
    "22",
    "comma",
    "zero",
    "asking",
    "model",
    "make",
    "two",
    "predictions",
    "time",
    "get",
    "result",
    "store",
    "variable",
    "called",
    "predictions",
    "finally",
    "let",
    "inspect",
    "notebook",
    "run",
    "look",
    "got",
    "model",
    "saying",
    "21",
    "year",
    "old",
    "male",
    "likes",
    "hip",
    "hop",
    "22",
    "year",
    "old",
    "female",
    "likes",
    "dance",
    "music",
    "model",
    "could",
    "successfully",
    "make",
    "predictions",
    "beautiful",
    "wait",
    "second",
    "building",
    "model",
    "makes",
    "predictions",
    "accurately",
    "always",
    "easy",
    "told",
    "earlier",
    "build",
    "model",
    "need",
    "measure",
    "accuracy",
    "accurate",
    "enough",
    "either",
    "fine",
    "tune",
    "build",
    "model",
    "using",
    "different",
    "algorithm",
    "next",
    "lecture",
    "going",
    "show",
    "measure",
    "accuracy",
    "model",
    "lecture",
    "going",
    "show",
    "measure",
    "accuracy",
    "models",
    "order",
    "first",
    "need",
    "split",
    "data",
    "set",
    "two",
    "sets",
    "one",
    "training",
    "testing",
    "right",
    "passing",
    "entire",
    "data",
    "set",
    "training",
    "model",
    "using",
    "two",
    "samples",
    "making",
    "predictions",
    "enough",
    "calculate",
    "accuracy",
    "model",
    "general",
    "rule",
    "thumb",
    "allocate",
    "70",
    "80",
    "percent",
    "data",
    "training",
    "twenty",
    "thirty",
    "percent",
    "testing",
    "instead",
    "passing",
    "two",
    "samples",
    "making",
    "predictions",
    "pass",
    "data",
    "set",
    "testing",
    "get",
    "predictions",
    "compare",
    "predictions",
    "actual",
    "values",
    "test",
    "set",
    "based",
    "calculate",
    "accuracy",
    "really",
    "easy",
    "import",
    "couple",
    "functions",
    "call",
    "code",
    "let",
    "show",
    "first",
    "top",
    "sklearn",
    "model",
    "underline",
    "selection",
    "module",
    "import",
    "function",
    "called",
    "train",
    "test",
    "split",
    "function",
    "easily",
    "split",
    "data",
    "set",
    "two",
    "sets",
    "training",
    "testing",
    "right",
    "define",
    "x",
    "sets",
    "call",
    "function",
    "train",
    "test",
    "split",
    "give",
    "three",
    "arguments",
    "x",
    "keyboard",
    "argument",
    "specifies",
    "size",
    "test",
    "data",
    "set",
    "test",
    "underline",
    "size",
    "set",
    "allocating",
    "20",
    "data",
    "testing",
    "function",
    "returns",
    "tuple",
    "unpack",
    "four",
    "variables",
    "right",
    "x",
    "underline",
    "train",
    "x",
    "underline",
    "test",
    "underline",
    "train",
    "underline",
    "test",
    "first",
    "two",
    "variables",
    "input",
    "sets",
    "training",
    "testing",
    "output",
    "sets",
    "training",
    "testing",
    "training",
    "model",
    "instead",
    "passing",
    "entire",
    "data",
    "set",
    "want",
    "pass",
    "training",
    "data",
    "set",
    "x",
    "underline",
    "train",
    "underline",
    "train",
    "also",
    "making",
    "predictions",
    "instead",
    "passing",
    "two",
    "samples",
    "pass",
    "x",
    "underline",
    "test",
    "data",
    "set",
    "contains",
    "input",
    "values",
    "testing",
    "get",
    "predictions",
    "calculate",
    "accuracy",
    "simply",
    "compare",
    "predictions",
    "actual",
    "values",
    "output",
    "set",
    "testing",
    "easy",
    "first",
    "top",
    "need",
    "import",
    "function",
    "metrics",
    "import",
    "accuracy",
    "underlying",
    "score",
    "end",
    "call",
    "function",
    "accuracy",
    "score",
    "give",
    "two",
    "arguments",
    "underline",
    "test",
    "contains",
    "expected",
    "values",
    "predictions",
    "contains",
    "actual",
    "values",
    "function",
    "returns",
    "accuracy",
    "score",
    "zero",
    "one",
    "store",
    "simply",
    "display",
    "console",
    "let",
    "go",
    "ahead",
    "run",
    "program",
    "accuracy",
    "score",
    "one",
    "100",
    "percent",
    "run",
    "one",
    "time",
    "going",
    "see",
    "different",
    "result",
    "every",
    "time",
    "split",
    "data",
    "set",
    "training",
    "test",
    "sets",
    "different",
    "data",
    "sets",
    "function",
    "randomly",
    "picks",
    "data",
    "training",
    "testing",
    "let",
    "show",
    "put",
    "cursor",
    "cell",
    "see",
    "cell",
    "activated",
    "note",
    "click",
    "button",
    "run",
    "cell",
    "also",
    "inserts",
    "new",
    "cell",
    "cell",
    "let",
    "show",
    "go",
    "second",
    "cell",
    "press",
    "escape",
    "button",
    "command",
    "mode",
    "press",
    "twice",
    "okay",
    "deleted",
    "click",
    "run",
    "button",
    "see",
    "code",
    "executed",
    "new",
    "cell",
    "want",
    "run",
    "first",
    "cell",
    "multiple",
    "times",
    "every",
    "time",
    "click",
    "run",
    "click",
    "run",
    "little",
    "bit",
    "tedious",
    "show",
    "shortcut",
    "activate",
    "first",
    "cell",
    "press",
    "ctrl",
    "enter",
    "runs",
    "current",
    "cell",
    "without",
    "adding",
    "new",
    "cell",
    "back",
    "let",
    "run",
    "multiple",
    "times",
    "okay",
    "look",
    "accuracy",
    "dropped",
    "still",
    "good",
    "accuracy",
    "score",
    "somewhere",
    "75",
    "100",
    "let",
    "show",
    "something",
    "change",
    "test",
    "size",
    "essentially",
    "using",
    "20",
    "data",
    "training",
    "model",
    "using",
    "80",
    "testing",
    "let",
    "see",
    "happens",
    "run",
    "cell",
    "multiple",
    "times",
    "control",
    "enter",
    "look",
    "accuracy",
    "immediately",
    "dropped",
    "one",
    "time",
    "46",
    "percent",
    "40",
    "26",
    "really",
    "really",
    "bad",
    "reason",
    "happening",
    "using",
    "little",
    "data",
    "training",
    "model",
    "one",
    "key",
    "concepts",
    "machine",
    "learning",
    "data",
    "give",
    "model",
    "cleaner",
    "data",
    "get",
    "better",
    "result",
    "duplicates",
    "irrelevant",
    "data",
    "incomplete",
    "values",
    "model",
    "learn",
    "bad",
    "patterns",
    "data",
    "really",
    "important",
    "clean",
    "data",
    "training",
    "model",
    "let",
    "change",
    "back",
    "run",
    "one",
    "time",
    "okay",
    "accuracy",
    "one",
    "75",
    "percent",
    "drop",
    "50",
    "reason",
    "happening",
    "enough",
    "data",
    "machine",
    "learning",
    "problems",
    "require",
    "thousands",
    "even",
    "millions",
    "samples",
    "train",
    "model",
    "complex",
    "problem",
    "data",
    "need",
    "example",
    "dealing",
    "table",
    "three",
    "columns",
    "want",
    "build",
    "model",
    "tell",
    "picture",
    "cat",
    "dog",
    "horse",
    "lion",
    "need",
    "millions",
    "pictures",
    "animals",
    "want",
    "support",
    "pictures",
    "need",
    "next",
    "lecture",
    "going",
    "talk",
    "model",
    "persistence",
    "basic",
    "implementation",
    "building",
    "training",
    "model",
    "make",
    "predictions",
    "simplify",
    "things",
    "removed",
    "code",
    "wrote",
    "last",
    "lecture",
    "calculating",
    "accuracy",
    "lecture",
    "going",
    "focus",
    "different",
    "topic",
    "basically",
    "import",
    "data",
    "set",
    "create",
    "model",
    "train",
    "ask",
    "make",
    "predictions",
    "piece",
    "code",
    "see",
    "want",
    "run",
    "every",
    "time",
    "new",
    "user",
    "every",
    "time",
    "want",
    "make",
    "recommendations",
    "existing",
    "user",
    "training",
    "model",
    "sometimes",
    "really",
    "time",
    "consuming",
    "example",
    "dealing",
    "small",
    "data",
    "set",
    "20",
    "records",
    "real",
    "applications",
    "might",
    "data",
    "set",
    "thousands",
    "millions",
    "samples",
    "training",
    "model",
    "might",
    "take",
    "seconds",
    "minutes",
    "even",
    "hours",
    "model",
    "persistence",
    "important",
    "build",
    "train",
    "model",
    "save",
    "file",
    "next",
    "time",
    "want",
    "make",
    "predictions",
    "simply",
    "load",
    "model",
    "file",
    "ask",
    "make",
    "predictions",
    "model",
    "already",
    "trained",
    "need",
    "retrain",
    "like",
    "intelligent",
    "person",
    "let",
    "show",
    "easy",
    "top",
    "module",
    "import",
    "lib",
    "job",
    "live",
    "object",
    "methods",
    "saving",
    "loading",
    "models",
    "train",
    "model",
    "simply",
    "call",
    "joblib",
    "dot",
    "dump",
    "give",
    "two",
    "arguments",
    "model",
    "name",
    "file",
    "want",
    "store",
    "model",
    "let",
    "call",
    "music",
    "dash",
    "recommender",
    "dot",
    "job",
    "lib",
    "temporarily",
    "going",
    "comment",
    "line",
    "want",
    "make",
    "predictions",
    "want",
    "store",
    "trained",
    "model",
    "file",
    "let",
    "run",
    "cell",
    "control",
    "slash",
    "okay",
    "look",
    "output",
    "array",
    "contains",
    "name",
    "model",
    "file",
    "return",
    "value",
    "dump",
    "method",
    "back",
    "desktop",
    "right",
    "next",
    "notebook",
    "see",
    "job",
    "live",
    "file",
    "model",
    "stored",
    "simply",
    "binary",
    "file",
    "back",
    "jupyter",
    "notebook",
    "told",
    "real",
    "application",
    "want",
    "train",
    "model",
    "every",
    "time",
    "let",
    "comment",
    "lines",
    "selected",
    "lines",
    "mac",
    "press",
    "command",
    "slash",
    "windows",
    "control",
    "slash",
    "okay",
    "lines",
    "commented",
    "time",
    "instead",
    "dumping",
    "model",
    "going",
    "load",
    "call",
    "load",
    "method",
    "model",
    "simply",
    "pass",
    "name",
    "model",
    "file",
    "returns",
    "trained",
    "model",
    "two",
    "lines",
    "simply",
    "make",
    "predictions",
    "earlier",
    "assumed",
    "men",
    "20",
    "25",
    "like",
    "music",
    "let",
    "print",
    "predictions",
    "see",
    "model",
    "behaving",
    "correctly",
    "control",
    "enter",
    "go",
    "persist",
    "load",
    "models",
    "earlier",
    "section",
    "told",
    "decision",
    "trees",
    "easiest",
    "understand",
    "started",
    "machine",
    "learning",
    "decision",
    "trees",
    "lecture",
    "going",
    "export",
    "model",
    "visual",
    "format",
    "see",
    "model",
    "makes",
    "predictions",
    "really",
    "really",
    "cool",
    "let",
    "show",
    "simplified",
    "code",
    "simply",
    "import",
    "data",
    "set",
    "create",
    "input",
    "output",
    "sets",
    "create",
    "model",
    "train",
    "want",
    "follow",
    "along",
    "type",
    "everything",
    "exactly",
    "show",
    "lecture",
    "worry",
    "everything",
    "means",
    "going",
    "come",
    "back",
    "shortly",
    "top",
    "sklearn",
    "import",
    "tree",
    "object",
    "method",
    "exporting",
    "decision",
    "tree",
    "graphical",
    "format",
    "train",
    "model",
    "let",
    "call",
    "tree",
    "dot",
    "export",
    "underline",
    "graph",
    "vis",
    "arguments",
    "need",
    "pass",
    "first",
    "argument",
    "model",
    "second",
    "name",
    "output",
    "file",
    "going",
    "use",
    "keyword",
    "arguments",
    "method",
    "takes",
    "many",
    "parameters",
    "want",
    "selectively",
    "pass",
    "keyword",
    "arguments",
    "without",
    "worrying",
    "order",
    "parameter",
    "going",
    "set",
    "underline",
    "file",
    "let",
    "set",
    "music",
    "dash",
    "recommender",
    "dot",
    "dot",
    "format",
    "graph",
    "description",
    "language",
    "see",
    "shortly",
    "parameter",
    "want",
    "set",
    "feature",
    "underline",
    "names",
    "set",
    "array",
    "two",
    "strings",
    "age",
    "gender",
    "features",
    "columns",
    "data",
    "set",
    "properties",
    "features",
    "data",
    "okay",
    "parameter",
    "class",
    "names",
    "class",
    "underline",
    "names",
    "set",
    "list",
    "classes",
    "labels",
    "output",
    "data",
    "set",
    "like",
    "hip",
    "hop",
    "jazz",
    "classical",
    "data",
    "set",
    "includes",
    "genres",
    "classes",
    "data",
    "repeated",
    "times",
    "data",
    "set",
    "call",
    "dot",
    "unique",
    "returns",
    "unique",
    "list",
    "classes",
    "sort",
    "alphabetically",
    "call",
    "sorted",
    "function",
    "pass",
    "result",
    "dot",
    "unique",
    "next",
    "parameter",
    "label",
    "set",
    "string",
    "worry",
    "details",
    "parameters",
    "going",
    "come",
    "back",
    "shortly",
    "set",
    "label",
    "round",
    "true",
    "finally",
    "filled",
    "true",
    "end",
    "result",
    "let",
    "run",
    "cell",
    "using",
    "control",
    "enter",
    "okay",
    "new",
    "file",
    "music",
    "recommender",
    "dot",
    "dot",
    "little",
    "bit",
    "funny",
    "want",
    "open",
    "file",
    "vs",
    "code",
    "drag",
    "drop",
    "vs",
    "code",
    "window",
    "okay",
    "dot",
    "format",
    "textual",
    "language",
    "describing",
    "graphs",
    "visualize",
    "graph",
    "need",
    "install",
    "extension",
    "vs",
    "code",
    "left",
    "side",
    "click",
    "extensions",
    "panel",
    "search",
    "dot",
    "dot",
    "look",
    "second",
    "extension",
    "graphviz",
    "dot",
    "language",
    "staphon",
    "vs",
    "go",
    "ahead",
    "install",
    "extension",
    "reload",
    "vs",
    "code",
    "visualize",
    "dot",
    "file",
    "let",
    "close",
    "tab",
    "right",
    "look",
    "dot",
    "dot",
    "right",
    "side",
    "click",
    "new",
    "menu",
    "open",
    "preview",
    "site",
    "click",
    "right",
    "visualization",
    "decision",
    "tree",
    "let",
    "close",
    "dot",
    "file",
    "go",
    "exactly",
    "model",
    "makes",
    "predictions",
    "binary",
    "tree",
    "means",
    "every",
    "node",
    "maximum",
    "two",
    "children",
    "top",
    "node",
    "condition",
    "condition",
    "true",
    "go",
    "child",
    "node",
    "left",
    "side",
    "otherwise",
    "go",
    "child",
    "node",
    "right",
    "side",
    "let",
    "see",
    "happening",
    "first",
    "condition",
    "age",
    "less",
    "equal",
    "condition",
    "false",
    "means",
    "user",
    "30",
    "years",
    "older",
    "genre",
    "music",
    "interested",
    "classical",
    "classifying",
    "people",
    "based",
    "profile",
    "reason",
    "word",
    "class",
    "user",
    "30",
    "years",
    "older",
    "belongs",
    "class",
    "classical",
    "people",
    "like",
    "classical",
    "music",
    "condition",
    "true",
    "means",
    "user",
    "younger",
    "check",
    "gender",
    "less",
    "basically",
    "means",
    "equals",
    "0",
    "dealing",
    "female",
    "go",
    "child",
    "node",
    "another",
    "condition",
    "dealing",
    "female",
    "younger",
    "need",
    "check",
    "age",
    "age",
    "less",
    "case",
    "user",
    "likes",
    "dance",
    "music",
    "otherwise",
    "like",
    "acoustic",
    "music",
    "decision",
    "tree",
    "model",
    "uses",
    "make",
    "predictions",
    "wondering",
    "floating",
    "point",
    "numbers",
    "like",
    "basically",
    "rules",
    "model",
    "generates",
    "based",
    "patterns",
    "finds",
    "data",
    "set",
    "give",
    "model",
    "data",
    "rules",
    "change",
    "always",
    "also",
    "columns",
    "features",
    "decision",
    "tree",
    "going",
    "get",
    "complex",
    "currently",
    "two",
    "features",
    "age",
    "gender",
    "back",
    "code",
    "let",
    "quickly",
    "explain",
    "meaning",
    "parameters",
    "set",
    "fill",
    "true",
    "box",
    "node",
    "filled",
    "color",
    "set",
    "rounded",
    "true",
    "rounded",
    "corners",
    "set",
    "label",
    "every",
    "node",
    "labels",
    "read",
    "set",
    "class",
    "names",
    "unique",
    "list",
    "genres",
    "displaying",
    "class",
    "node",
    "right",
    "set",
    "feature",
    "names",
    "age",
    "gender",
    "see",
    "rules",
    "notes",
    "hey",
    "thank",
    "watching",
    "tutorial",
    "hope",
    "learned",
    "lot",
    "excited",
    "learn",
    "enjoyed",
    "tutorial",
    "please",
    "like",
    "share",
    "others",
    "sure",
    "subscribe",
    "channel",
    "upload",
    "new",
    "videos",
    "every",
    "week",
    "thank",
    "wish",
    "music",
    "best"
  ],
  "keywords": [
    "music",
    "machine",
    "learning",
    "tutorial",
    "python",
    "jupyter",
    "notebook",
    "going",
    "learn",
    "solve",
    "real",
    "world",
    "problem",
    "using",
    "start",
    "need",
    "build",
    "model",
    "predict",
    "kind",
    "like",
    "one",
    "good",
    "well",
    "video",
    "might",
    "sure",
    "new",
    "every",
    "let",
    "get",
    "example",
    "ask",
    "write",
    "program",
    "tell",
    "cat",
    "want",
    "lots",
    "rules",
    "look",
    "dog",
    "give",
    "work",
    "different",
    "make",
    "three",
    "cats",
    "dogs",
    "data",
    "patterns",
    "input",
    "accuracy",
    "accurate",
    "basic",
    "next",
    "project",
    "first",
    "step",
    "import",
    "csv",
    "file",
    "simply",
    "store",
    "clean",
    "result",
    "shape",
    "remove",
    "name",
    "values",
    "really",
    "set",
    "split",
    "two",
    "training",
    "testing",
    "right",
    "percent",
    "20",
    "create",
    "algorithm",
    "algorithms",
    "decision",
    "libraries",
    "popular",
    "train",
    "predictions",
    "back",
    "measure",
    "either",
    "parameters",
    "lecture",
    "use",
    "projects",
    "array",
    "library",
    "second",
    "pandas",
    "called",
    "frame",
    "rows",
    "columns",
    "column",
    "jupiter",
    "code",
    "vs",
    "inspect",
    "terminal",
    "table",
    "window",
    "easy",
    "install",
    "anaconda",
    "download",
    "windows",
    "mac",
    "go",
    "ahead",
    "click",
    "run",
    "continue",
    "time",
    "okay",
    "default",
    "finally",
    "type",
    "enter",
    "see",
    "call",
    "tab",
    "user",
    "desktop",
    "line",
    "easily",
    "hello",
    "includes",
    "print",
    "button",
    "show",
    "load",
    "basically",
    "list",
    "16",
    "rank",
    "year",
    "records",
    "told",
    "put",
    "drop",
    "instead",
    "pd",
    "module",
    "dot",
    "times",
    "read",
    "underline",
    "pass",
    "returns",
    "object",
    "methods",
    "useful",
    "another",
    "segment",
    "describe",
    "output",
    "lines",
    "last",
    "method",
    "earlier",
    "value",
    "case",
    "also",
    "shortcuts",
    "cell",
    "mode",
    "press",
    "means",
    "command",
    "control",
    "delete",
    "function",
    "cells",
    "top",
    "reason",
    "parameter",
    "comment",
    "slash",
    "30",
    "age",
    "gender",
    "based",
    "hip",
    "hop",
    "genre",
    "male",
    "female",
    "men",
    "25",
    "classical",
    "dance",
    "sets",
    "contains",
    "old",
    "21",
    "likes",
    "x",
    "tree",
    "class",
    "samples",
    "test",
    "arguments",
    "score",
    "names",
    "true",
    "node",
    "condition"
  ]
}