{
  "text": "when you first become a junior developer\nyour code will look like Playdoh snakes\nbut as you progress to senior developer\nand learn about software design patterns\nyour code will look like the cysteine\nchapel but when you then progress to\nprincipal engineer you'll realize that\nnobody wants to maintain the cine Chapel\nfor a silly website and go back to\nmaking Play-Doh snakes in today's video\nyou'll learn about 10 different software\ndesign patterns along with the pros and\ncons of using them which can be very\nsubjective and controversial one of the\nmost influential books in the history of\nprogramming is design patterns by four\nC++ Engineers called The Gang of four it\nbreaks down 23 different approaches to\naddress recurring problems that\nprogrammers face which are categorized\nas creational patterns how objects are\ncreated structural patterns how objects\nrelate to each other and behavioral\npatterns how objects communicate with\neach other becoming a proficient\nsoftware engineer is not about\nmemorizing the syntax of a programming\nlanguage but rather the ability to solve\nproblems with it by the end of this\nvideo you'll understand a variety of\ndifferent patterns for solving problems\nas they relate to Modern app developers\nbefore we get started I want to give a\nbig shout out to refactoring doguru they\ngave me permission to use some of their\nGraphics that explain design patterns\nbetter than anything else out there\nthey're based in Ukraine and it's\nseriously one of the coolest programming\nwebsites on the internet design patterns\nare really interesting because they're\nnot just like algorithms that you can\ncopy and paste from stack Overflow you\nactually need to use your brain to\nimplement them it can be tempting to\nimplement them all over the place but\nwhen used improperly they can add\nadditional complexity and boilerplate to\na code basee the book is not the Bible\nand there are many criticisms of it\nregardless knowing how to write\nrecognized design patterns will help you\nlevel up as a programmer the first\npattern we'll look at is Singleton which\nis very easy to understand it's a type\nof object that can only be instantiated\nonce in typescript we might Implement a\nSingleton class called settings to\nrepresent the global app settings data\nwe'll give it a static instance property\nand then make its Constructor private so\nthat it cannot be instantiated with the\nnew keyword we then create a static get\ninstance method that will check to see\nif the instance has already been created\nand if not it will create a new one and\nthat ensures that only one object can be\ncreated that's great and all but here's\nwhere things become a little more\nnuanced in JavaScript we have object\nliterals and also the concept of global\ndata and objects are passed around by\nreference we get all the same basic\ncharacteristics as this pattern by\nsimply creating a global object the\npattern itself is really just extra\nboiler plate that we don't need it's an\nentirely different story in C++ but the\nmoral is to lean on your languages\nbuilt-in features before implementing a\nfancy design pattern now let's take a\nlook at the Prototype pattern which is\njust a fancy word for clone if you've\ndone object oriented programming you\nshould be familiar with inheritance\nwhere a class can be extended with a\nsubclass one problem with inheritance is\nthat it can lead to a complex hierarchy\nof code the Prototype pattern is an\nalternative way to implement inheritance\nbut instead of inheriting functionality\nfrom a class it comes from an object\nthat's already been created this creates\na flat prototype chain that makes it\nmuch easier to share functionality\nbetween objects especially in a dynamic\nlanguage like JavaScript which supports\nprototypal inheritance out of the box\nimagine we have an object named zombie\nthis is our prototyp type but now we\nwant to create a new object based on it\nthat also has a name we can do that with\nobject create by passing the zombie as\nthe Prototype then specify additional\nproperties like name for the new object\nthe interesting thing is that if you log\nthis object you'll only see the name and\nnot the eat brain's method however if\nyou try to call that method it will\nstill work that's because JavaScript\nwill go up the Prototype chain until it\nreaches the root looking for any methods\nor properties on the parent objects you\ncan always get the Prototype from an\nobject by using this Proto property\nhowever that's not a modern best\npractice and instead you should use\nobject get prototype of now when it\ncomes to classes in JavaScript prototype\nrefers to its Constructor and that means\nthat we can extend a class with\nadditional functions if we want to\nhowever that's also generally considered\na bad practice now let's switch gears to\nthe Builder pattern imagine you're\nrunning a hot dog stand and when a\ncustomer places an order they need to\ntell you everything they want in the\nsandwich and the Constructor that works\nbut it's kind of hard to keep track of\nall these options and we might want to\ndefer each step to a later point with\nthe builder pattern we create the object\nstep by step using methods rather than\nthe Constructor and we could even\ndelegate the building logic to an\nentirely different class in JavaScript\nWe'll have each method return this which\nis a reference to the object instance\nthat allows us to implement method\nchaining where we instantiate an object\nthen chain methods to it but always get\nthe object as the return value you'll\ncome across this pattern frequently with\nlibraries like jQuery but it's gone a\nbit out of style in recent years another\npattern you may come across is Factory\ninstead of using the new keyword to\ninstantiate an object you use a function\nor method to do it for you that may\nsound trivial but here's a practical\nexample let's imagine we're building a\ncrossplatform app that runs on both IOS\nand Android they both have the same\ninterface but in our code we're doing a\nbunch of conditional checking to\ndetermine which button to show that's\nnot very maintainable instead we can\ncreate a subass or function that will\ndetermine which object to instantiate\nnow instead of repeating the same logic\nwe use the factory to determine which\nbutton should be rendered now we're\nready to look at the first structural\npattern facade a facade is the face of a\nbuilding inside that building there's\nall kinds of shenanigans corruption and\ncomplexity that the end user doesn't\nneed to know about a facade is basically\njust a simplified API to hide other\nlow-level details in your code base\nlet's imagine we have classes for the\nplumbing system and electrical system\nand inside of them we have all kinds of\ncomplex stuff going on like pressure and\nvoltage the people living in the house\ndon't need access to these low-level\ndetails so we create a facade class that\ncontains the low-l systems as\ndependencies but then simplifies their\noperation like we might combine all the\nelectrical and plumbing details into a\nsingle method so the end user can simply\nturn them on or off with a single method\nalmost every package that you install\nwith JavaScript could be considered a\nfacade in some way like jQuery is a\ngreat example of a facade for the more\nannoying low-level JavaScript features\nthe next structural pattern we'll look\nat is proxy which is just a fancy word\nfor a substitute like in school you\nmight have a substitute teacher to\nreplace the real thing in programming\nyou can replace a Target object with a\nproxy but why would you ever want to do\nthat well well a great case study is the\nreactivity system in vue.js in view you\ncreate data but the framework itself\nneeds a way to intercept that data and\nupdate the UI whenever that data changes\nthe way view handles that is by\nreplacing the original object with a\nproxy a proxy takes the original object\nas the first argument then a Handler as\nthe second argument inside of which we\ncan override methods like get and set\nwhich allows us to run code whenever a\nproperty is accessed on the object or\nchanged for example inside of set we\nmight tell the framework to render use\nreflect to update the data on the\noriginal object the end user can now\nwork with the proxy just like the\noriginal object but it can trigger the\nside effects behind the scenes proxies\nare also commonly used when you have a\nvery large object that would be\nexpensive to duplicate in memory and now\nwe're ready to look at some behavioral\npatterns starting with iterator the\niterator pattern allows you to Traverse\nthrough a collection of objects modern\nlanguages already provide abstractions\nfor the iterator pattern like the for\nLoop when you Loop over an array of\nitems you're using the iterator pattern\nbut one thing that really chaps my ass\nabout JavaScript is that there's no\nbuilt-in range function what I wish I\ncould do is easily iterate 10 times at a\ncertain interval we can actually do that\nfairly easily by implementing our own\niterator pattern in JavaScript you can\ndo that by defining an object that has a\nnext method on it that function needs to\nreturn an object that has a value which\nwould be the current value in the loop\nand a done property so it knows when to\nfinish iterating in this case we will\nkeep moving on to the next step if the\nstart value is less than the end value\nbut for each iteration we will increment\nthe start value with a step eventually\nthe start will be greater than the end\nat which point we can return an object\nwith the done property as true and that\ntells JavaScript to stop iterating now a\ncool technique here is that we can add\nsymbol iterator to this object which\nallows us to use it in a regular four of\nloop at the end of the day with\niteration you start with a collection\nand then write some code that determines\nhow to get from the beginning to the end\nit's a pole-based system unlike the next\npattern we'll look at Observer which is\na push based system The Observer pattern\nallows many objects to subscribe to\nevents that are broadcast by another\nobject it's a on to many relationship in\nthe real world you might have a radio\ntower that sends out a signal then a\nbunch of receivers who listen in at the\nsame time this pattern is used all over\nthe place in app development like in\nFirebase when your data changes on the\nserver all your client apps are\nsubscribed to it and automatically\nupdated with the latest data in our code\nhere I'm going to bring in the rxjs\nlibrary to simplify the demonstration of\nthis pattern it provides a subject class\nwhich is the data that we want to listen\nto now once we have a subject we can add\nmultiple subscriptions to it the subject\nwill keep track of all these\nsubscriptions and call their callback\nfunctions whenever the data changes\nexperiment with this pattern right now\nby clicking like And subscribe on this\nvideo now at some later point we can\ncall the next method to push a new value\nto the subject whenever that happens\nevery subscription will be notified\npersonally I like to think of this as a\nloop that unfolds over the dimension of\ntime but now let's move on to the\nmediator pattern a mediator is like a\nmiddleman or broker imagine we have a\nclass for airplane and Runway we might\nhave multiple runways and multiple\nairplanes and somehow we need to figure\nout if an airplane is clear to land on a\ngiven Runway currently to do that all\nthese objects would have to communicate\nwith each other we have a many to many\nrelationship that's very dangerous both\nin real life and in programming a\nsolution is to create a mediator like an\nair traffic controller that sits between\nthe runways and the airplanes to provide\ncoordination and communication here's a\nmore prac iCal example in the expressjs\nweb framework there is a middleware\nsystem you have incoming requests and\noutgoing responses middleware sits in\nthe middle by intercepting every request\nlike an airplane and transforms it into\nthe proper format for the response the\nrunway it provides a separation of\nconcerns and eliminates code duplication\nand that brings us to our 10th and final\ndesign pattern state where an object\nbehaves differently based on a finite\nnumber of states in your code you've\nlikely Ed conditional logic or switch\nstatements to handle a bunch of\ndifferent possibili ities based on the\nstate or data in your application code\nlike this generally doesn't scale very\nwell the state pattern allows you to\nstart with one base class then provide\nit with different functionality based on\nits internal State the idea is related\nto finite State machines in libraries\nlike xstate where the goal is to make an\nobject's Behavior predictable based on\nits underlying state in this example we\nhave a human class that will think\nsomething different based on its mood\ncurrently we're doing that with a switch\nstatement but another way to go about it\nwould be to create a separate class\nclass for each possible State inside\neach class we will have an identical\nmethod that behaves differently now in\nthe human class we set the state as a\nproperty and whenever that method is\ncalled we delegate it to its current\nstate that means whenever the state\nchanges the object will behave in a\ncompletely different way but at the same\ntime we don't have to change the API or\nuse a bunch of conditional logic I'm\ngoing to keep things simple and wrap it\nup there but remember there are a bunch\nof other designed patterns out there to\nlearn become a PR member at fireship iio\nto learn how to apply patterns like this\nin real applications thanks for watching\nand I will see you in the next one\n",
  "words": [
    "first",
    "become",
    "junior",
    "developer",
    "code",
    "look",
    "like",
    "playdoh",
    "snakes",
    "progress",
    "senior",
    "developer",
    "learn",
    "software",
    "design",
    "patterns",
    "code",
    "look",
    "like",
    "cysteine",
    "chapel",
    "progress",
    "principal",
    "engineer",
    "realize",
    "nobody",
    "wants",
    "maintain",
    "cine",
    "chapel",
    "silly",
    "website",
    "go",
    "back",
    "making",
    "snakes",
    "today",
    "video",
    "learn",
    "10",
    "different",
    "software",
    "design",
    "patterns",
    "along",
    "pros",
    "cons",
    "using",
    "subjective",
    "controversial",
    "one",
    "influential",
    "books",
    "history",
    "programming",
    "design",
    "patterns",
    "four",
    "engineers",
    "called",
    "gang",
    "four",
    "breaks",
    "23",
    "different",
    "approaches",
    "address",
    "recurring",
    "problems",
    "programmers",
    "face",
    "categorized",
    "creational",
    "patterns",
    "objects",
    "created",
    "structural",
    "patterns",
    "objects",
    "relate",
    "behavioral",
    "patterns",
    "objects",
    "communicate",
    "becoming",
    "proficient",
    "software",
    "engineer",
    "memorizing",
    "syntax",
    "programming",
    "language",
    "rather",
    "ability",
    "solve",
    "problems",
    "end",
    "video",
    "understand",
    "variety",
    "different",
    "patterns",
    "solving",
    "problems",
    "relate",
    "modern",
    "app",
    "developers",
    "get",
    "started",
    "want",
    "give",
    "big",
    "shout",
    "refactoring",
    "doguru",
    "gave",
    "permission",
    "use",
    "graphics",
    "explain",
    "design",
    "patterns",
    "better",
    "anything",
    "else",
    "based",
    "ukraine",
    "seriously",
    "one",
    "coolest",
    "programming",
    "websites",
    "internet",
    "design",
    "patterns",
    "really",
    "interesting",
    "like",
    "algorithms",
    "copy",
    "paste",
    "stack",
    "overflow",
    "actually",
    "need",
    "use",
    "brain",
    "implement",
    "tempting",
    "implement",
    "place",
    "used",
    "improperly",
    "add",
    "additional",
    "complexity",
    "boilerplate",
    "code",
    "basee",
    "book",
    "bible",
    "many",
    "criticisms",
    "regardless",
    "knowing",
    "write",
    "recognized",
    "design",
    "patterns",
    "help",
    "level",
    "programmer",
    "first",
    "pattern",
    "look",
    "singleton",
    "easy",
    "understand",
    "type",
    "object",
    "instantiated",
    "typescript",
    "might",
    "implement",
    "singleton",
    "class",
    "called",
    "settings",
    "represent",
    "global",
    "app",
    "settings",
    "data",
    "give",
    "static",
    "instance",
    "property",
    "make",
    "constructor",
    "private",
    "instantiated",
    "new",
    "keyword",
    "create",
    "static",
    "get",
    "instance",
    "method",
    "check",
    "see",
    "instance",
    "already",
    "created",
    "create",
    "new",
    "one",
    "ensures",
    "one",
    "object",
    "created",
    "great",
    "things",
    "become",
    "little",
    "nuanced",
    "javascript",
    "object",
    "literals",
    "also",
    "concept",
    "global",
    "data",
    "objects",
    "passed",
    "around",
    "reference",
    "get",
    "basic",
    "characteristics",
    "pattern",
    "simply",
    "creating",
    "global",
    "object",
    "pattern",
    "really",
    "extra",
    "boiler",
    "plate",
    "need",
    "entirely",
    "different",
    "story",
    "moral",
    "lean",
    "languages",
    "features",
    "implementing",
    "fancy",
    "design",
    "pattern",
    "let",
    "take",
    "look",
    "prototype",
    "pattern",
    "fancy",
    "word",
    "clone",
    "done",
    "object",
    "oriented",
    "programming",
    "familiar",
    "inheritance",
    "class",
    "extended",
    "subclass",
    "one",
    "problem",
    "inheritance",
    "lead",
    "complex",
    "hierarchy",
    "code",
    "prototype",
    "pattern",
    "alternative",
    "way",
    "implement",
    "inheritance",
    "instead",
    "inheriting",
    "functionality",
    "class",
    "comes",
    "object",
    "already",
    "created",
    "creates",
    "flat",
    "prototype",
    "chain",
    "makes",
    "much",
    "easier",
    "share",
    "functionality",
    "objects",
    "especially",
    "dynamic",
    "language",
    "like",
    "javascript",
    "supports",
    "prototypal",
    "inheritance",
    "box",
    "imagine",
    "object",
    "named",
    "zombie",
    "prototyp",
    "type",
    "want",
    "create",
    "new",
    "object",
    "based",
    "also",
    "name",
    "object",
    "create",
    "passing",
    "zombie",
    "prototype",
    "specify",
    "additional",
    "properties",
    "like",
    "name",
    "new",
    "object",
    "interesting",
    "thing",
    "log",
    "object",
    "see",
    "name",
    "eat",
    "brain",
    "method",
    "however",
    "try",
    "call",
    "method",
    "still",
    "work",
    "javascript",
    "go",
    "prototype",
    "chain",
    "reaches",
    "root",
    "looking",
    "methods",
    "properties",
    "parent",
    "objects",
    "always",
    "get",
    "prototype",
    "object",
    "using",
    "proto",
    "property",
    "however",
    "modern",
    "best",
    "practice",
    "instead",
    "use",
    "object",
    "get",
    "prototype",
    "comes",
    "classes",
    "javascript",
    "prototype",
    "refers",
    "constructor",
    "means",
    "extend",
    "class",
    "additional",
    "functions",
    "want",
    "however",
    "also",
    "generally",
    "considered",
    "bad",
    "practice",
    "let",
    "switch",
    "gears",
    "builder",
    "pattern",
    "imagine",
    "running",
    "hot",
    "dog",
    "stand",
    "customer",
    "places",
    "order",
    "need",
    "tell",
    "everything",
    "want",
    "sandwich",
    "constructor",
    "works",
    "kind",
    "hard",
    "keep",
    "track",
    "options",
    "might",
    "want",
    "defer",
    "step",
    "later",
    "point",
    "builder",
    "pattern",
    "create",
    "object",
    "step",
    "step",
    "using",
    "methods",
    "rather",
    "constructor",
    "could",
    "even",
    "delegate",
    "building",
    "logic",
    "entirely",
    "different",
    "class",
    "javascript",
    "method",
    "return",
    "reference",
    "object",
    "instance",
    "allows",
    "us",
    "implement",
    "method",
    "chaining",
    "instantiate",
    "object",
    "chain",
    "methods",
    "always",
    "get",
    "object",
    "return",
    "value",
    "come",
    "across",
    "pattern",
    "frequently",
    "libraries",
    "like",
    "jquery",
    "gone",
    "bit",
    "style",
    "recent",
    "years",
    "another",
    "pattern",
    "may",
    "come",
    "across",
    "factory",
    "instead",
    "using",
    "new",
    "keyword",
    "instantiate",
    "object",
    "use",
    "function",
    "method",
    "may",
    "sound",
    "trivial",
    "practical",
    "example",
    "let",
    "imagine",
    "building",
    "crossplatform",
    "app",
    "runs",
    "ios",
    "android",
    "interface",
    "code",
    "bunch",
    "conditional",
    "checking",
    "determine",
    "button",
    "show",
    "maintainable",
    "instead",
    "create",
    "subass",
    "function",
    "determine",
    "object",
    "instantiate",
    "instead",
    "repeating",
    "logic",
    "use",
    "factory",
    "determine",
    "button",
    "rendered",
    "ready",
    "look",
    "first",
    "structural",
    "pattern",
    "facade",
    "facade",
    "face",
    "building",
    "inside",
    "building",
    "kinds",
    "shenanigans",
    "corruption",
    "complexity",
    "end",
    "user",
    "need",
    "know",
    "facade",
    "basically",
    "simplified",
    "api",
    "hide",
    "details",
    "code",
    "base",
    "let",
    "imagine",
    "classes",
    "plumbing",
    "system",
    "electrical",
    "system",
    "inside",
    "kinds",
    "complex",
    "stuff",
    "going",
    "like",
    "pressure",
    "voltage",
    "people",
    "living",
    "house",
    "need",
    "access",
    "details",
    "create",
    "facade",
    "class",
    "contains",
    "systems",
    "dependencies",
    "simplifies",
    "operation",
    "like",
    "might",
    "combine",
    "electrical",
    "plumbing",
    "details",
    "single",
    "method",
    "end",
    "user",
    "simply",
    "turn",
    "single",
    "method",
    "almost",
    "every",
    "package",
    "install",
    "javascript",
    "could",
    "considered",
    "facade",
    "way",
    "like",
    "jquery",
    "great",
    "example",
    "facade",
    "annoying",
    "javascript",
    "features",
    "next",
    "structural",
    "pattern",
    "look",
    "proxy",
    "fancy",
    "word",
    "substitute",
    "like",
    "school",
    "might",
    "substitute",
    "teacher",
    "replace",
    "real",
    "thing",
    "programming",
    "replace",
    "target",
    "object",
    "proxy",
    "would",
    "ever",
    "want",
    "well",
    "well",
    "great",
    "case",
    "study",
    "reactivity",
    "system",
    "view",
    "create",
    "data",
    "framework",
    "needs",
    "way",
    "intercept",
    "data",
    "update",
    "ui",
    "whenever",
    "data",
    "changes",
    "way",
    "view",
    "handles",
    "replacing",
    "original",
    "object",
    "proxy",
    "proxy",
    "takes",
    "original",
    "object",
    "first",
    "argument",
    "handler",
    "second",
    "argument",
    "inside",
    "override",
    "methods",
    "like",
    "get",
    "set",
    "allows",
    "us",
    "run",
    "code",
    "whenever",
    "property",
    "accessed",
    "object",
    "changed",
    "example",
    "inside",
    "set",
    "might",
    "tell",
    "framework",
    "render",
    "use",
    "reflect",
    "update",
    "data",
    "original",
    "object",
    "end",
    "user",
    "work",
    "proxy",
    "like",
    "original",
    "object",
    "trigger",
    "side",
    "effects",
    "behind",
    "scenes",
    "proxies",
    "also",
    "commonly",
    "used",
    "large",
    "object",
    "would",
    "expensive",
    "duplicate",
    "memory",
    "ready",
    "look",
    "behavioral",
    "patterns",
    "starting",
    "iterator",
    "iterator",
    "pattern",
    "allows",
    "traverse",
    "collection",
    "objects",
    "modern",
    "languages",
    "already",
    "provide",
    "abstractions",
    "iterator",
    "pattern",
    "like",
    "loop",
    "loop",
    "array",
    "items",
    "using",
    "iterator",
    "pattern",
    "one",
    "thing",
    "really",
    "chaps",
    "ass",
    "javascript",
    "range",
    "function",
    "wish",
    "could",
    "easily",
    "iterate",
    "10",
    "times",
    "certain",
    "interval",
    "actually",
    "fairly",
    "easily",
    "implementing",
    "iterator",
    "pattern",
    "javascript",
    "defining",
    "object",
    "next",
    "method",
    "function",
    "needs",
    "return",
    "object",
    "value",
    "would",
    "current",
    "value",
    "loop",
    "done",
    "property",
    "knows",
    "finish",
    "iterating",
    "case",
    "keep",
    "moving",
    "next",
    "step",
    "start",
    "value",
    "less",
    "end",
    "value",
    "iteration",
    "increment",
    "start",
    "value",
    "step",
    "eventually",
    "start",
    "greater",
    "end",
    "point",
    "return",
    "object",
    "done",
    "property",
    "true",
    "tells",
    "javascript",
    "stop",
    "iterating",
    "cool",
    "technique",
    "add",
    "symbol",
    "iterator",
    "object",
    "allows",
    "us",
    "use",
    "regular",
    "four",
    "loop",
    "end",
    "day",
    "iteration",
    "start",
    "collection",
    "write",
    "code",
    "determines",
    "get",
    "beginning",
    "end",
    "system",
    "unlike",
    "next",
    "pattern",
    "look",
    "observer",
    "push",
    "based",
    "system",
    "observer",
    "pattern",
    "allows",
    "many",
    "objects",
    "subscribe",
    "events",
    "broadcast",
    "another",
    "object",
    "many",
    "relationship",
    "real",
    "world",
    "might",
    "radio",
    "tower",
    "sends",
    "signal",
    "bunch",
    "receivers",
    "listen",
    "time",
    "pattern",
    "used",
    "place",
    "app",
    "development",
    "like",
    "firebase",
    "data",
    "changes",
    "server",
    "client",
    "apps",
    "subscribed",
    "automatically",
    "updated",
    "latest",
    "data",
    "code",
    "going",
    "bring",
    "rxjs",
    "library",
    "simplify",
    "demonstration",
    "pattern",
    "provides",
    "subject",
    "class",
    "data",
    "want",
    "listen",
    "subject",
    "add",
    "multiple",
    "subscriptions",
    "subject",
    "keep",
    "track",
    "subscriptions",
    "call",
    "callback",
    "functions",
    "whenever",
    "data",
    "changes",
    "experiment",
    "pattern",
    "right",
    "clicking",
    "like",
    "subscribe",
    "video",
    "later",
    "point",
    "call",
    "next",
    "method",
    "push",
    "new",
    "value",
    "subject",
    "whenever",
    "happens",
    "every",
    "subscription",
    "notified",
    "personally",
    "like",
    "think",
    "loop",
    "unfolds",
    "dimension",
    "time",
    "let",
    "move",
    "mediator",
    "pattern",
    "mediator",
    "like",
    "middleman",
    "broker",
    "imagine",
    "class",
    "airplane",
    "runway",
    "might",
    "multiple",
    "runways",
    "multiple",
    "airplanes",
    "somehow",
    "need",
    "figure",
    "airplane",
    "clear",
    "land",
    "given",
    "runway",
    "currently",
    "objects",
    "would",
    "communicate",
    "many",
    "many",
    "relationship",
    "dangerous",
    "real",
    "life",
    "programming",
    "solution",
    "create",
    "mediator",
    "like",
    "air",
    "traffic",
    "controller",
    "sits",
    "runways",
    "airplanes",
    "provide",
    "coordination",
    "communication",
    "prac",
    "ical",
    "example",
    "expressjs",
    "web",
    "framework",
    "middleware",
    "system",
    "incoming",
    "requests",
    "outgoing",
    "responses",
    "middleware",
    "sits",
    "middle",
    "intercepting",
    "every",
    "request",
    "like",
    "airplane",
    "transforms",
    "proper",
    "format",
    "response",
    "runway",
    "provides",
    "separation",
    "concerns",
    "eliminates",
    "code",
    "duplication",
    "brings",
    "us",
    "10th",
    "final",
    "design",
    "pattern",
    "state",
    "object",
    "behaves",
    "differently",
    "based",
    "finite",
    "number",
    "states",
    "code",
    "likely",
    "ed",
    "conditional",
    "logic",
    "switch",
    "statements",
    "handle",
    "bunch",
    "different",
    "possibili",
    "ities",
    "based",
    "state",
    "data",
    "application",
    "code",
    "like",
    "generally",
    "scale",
    "well",
    "state",
    "pattern",
    "allows",
    "start",
    "one",
    "base",
    "class",
    "provide",
    "different",
    "functionality",
    "based",
    "internal",
    "state",
    "idea",
    "related",
    "finite",
    "state",
    "machines",
    "libraries",
    "like",
    "xstate",
    "goal",
    "make",
    "object",
    "behavior",
    "predictable",
    "based",
    "underlying",
    "state",
    "example",
    "human",
    "class",
    "think",
    "something",
    "different",
    "based",
    "mood",
    "currently",
    "switch",
    "statement",
    "another",
    "way",
    "go",
    "would",
    "create",
    "separate",
    "class",
    "class",
    "possible",
    "state",
    "inside",
    "class",
    "identical",
    "method",
    "behaves",
    "differently",
    "human",
    "class",
    "set",
    "state",
    "property",
    "whenever",
    "method",
    "called",
    "delegate",
    "current",
    "state",
    "means",
    "whenever",
    "state",
    "changes",
    "object",
    "behave",
    "completely",
    "different",
    "way",
    "time",
    "change",
    "api",
    "use",
    "bunch",
    "conditional",
    "logic",
    "going",
    "keep",
    "things",
    "simple",
    "wrap",
    "remember",
    "bunch",
    "designed",
    "patterns",
    "learn",
    "become",
    "pr",
    "member",
    "fireship",
    "iio",
    "learn",
    "apply",
    "patterns",
    "like",
    "real",
    "applications",
    "thanks",
    "watching",
    "see",
    "next",
    "one"
  ],
  "keywords": [
    "first",
    "become",
    "code",
    "look",
    "like",
    "learn",
    "software",
    "design",
    "patterns",
    "go",
    "video",
    "different",
    "using",
    "one",
    "programming",
    "four",
    "called",
    "problems",
    "objects",
    "created",
    "structural",
    "end",
    "modern",
    "app",
    "get",
    "want",
    "use",
    "based",
    "really",
    "need",
    "implement",
    "used",
    "add",
    "additional",
    "many",
    "pattern",
    "object",
    "might",
    "class",
    "global",
    "data",
    "instance",
    "property",
    "constructor",
    "new",
    "create",
    "method",
    "see",
    "already",
    "great",
    "javascript",
    "also",
    "fancy",
    "let",
    "prototype",
    "done",
    "inheritance",
    "way",
    "instead",
    "functionality",
    "chain",
    "imagine",
    "name",
    "thing",
    "however",
    "call",
    "methods",
    "switch",
    "keep",
    "step",
    "point",
    "could",
    "building",
    "logic",
    "return",
    "allows",
    "us",
    "instantiate",
    "value",
    "another",
    "function",
    "example",
    "bunch",
    "conditional",
    "determine",
    "facade",
    "inside",
    "user",
    "details",
    "system",
    "going",
    "every",
    "next",
    "proxy",
    "real",
    "would",
    "well",
    "framework",
    "whenever",
    "changes",
    "original",
    "set",
    "iterator",
    "provide",
    "loop",
    "start",
    "time",
    "subject",
    "multiple",
    "mediator",
    "airplane",
    "runway",
    "state"
  ]
}