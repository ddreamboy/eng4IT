{
  "text": "the most common way to package and share\nyour code is by using Python's built-in\nset of tools if you package your code\npublish it then others can use it by\nsharing binary files source code using a\npackage manager that stores your python\npackage in online repository like Pi Pi\nwhich is the official python repository\nbut how do you do that how do you\npublish a package and what do terms like\nwheel or egg info actually mean so\nthat's what I'll cover in today's video\nmake sure you watch this till the end\nbecause at the end I'll share five\nthings that are really important to\nthink about when you want to publish\nyour code\none thing that's important in any case\nto make sure that your code is high\nquality so that others can actually use\nit how do you determine the quality of\nyour code well I have a free workshop on\ncode diagnosis that you can get at 500\ngoals slash diagnosis this is going to\nhelp you become better at review code\nunderstanding where the problems are\nit's about half an hour contains lots of\npractical advice I Review production\ncode to illustrate how it works so you\ncan apply the same ideas to your own\ncode so iron.codes slash diagnosis that\naccess for free and the link is also in\ndescription of this video in this video\nI'm going to use a simple example\napplication for packaging and Publishing\non Pi Pi what this Library does is\ngenerates a bunch of different IDs so\nfor example something that generates a\npassword of a given length doesn't\nreally matter what the code is exactly\nbut it just checks that some particular\ntypes of characters are in the string I\nhave a function to generate a GUI ID a\nfunction to generate a credit card\nnumber that uses the Loon checks on test\nsomething that generates a PIN number\nand something that generates an object\nID of course we can add a bunch of extra\nID generator functions here that's not\nreally the point of this video the only\nthing I want to do is show you how you\ncan take a library like this and then\npackage and publish it next to the ID\ngenerator module there's also a utils\nmodule now normally I'm not a big fan of\ncalling files utils because it's not\nreally clear what users is but in this\ncase it's pretty small I could maybe\neven have called this just loom.pi and\nit would also been fine what I've also\nadded is software tests so here we have\ntest ID generator and there you see well\nwe import the different functions that\nwe want to test and then I have a unit\ntest test case where a test generating a\npassword GUI ID and a couple of extra\ntests now these are not very complete\nyou could also build out on this test\nand test all kinds of different edge\ncases but it's just to show you how to\nset this up let's also take a quick look\nat how the project is actually organized\nso I a setup file that will talk about\nmore in a minute I have a license that\ndescribes how people are allowed to use\nthe code and they have an app folder\nthat contains the ID generator package\nand inside that package we have all the\nfiles that I just showed you on the\nresource folder and then there's readme\nfile that contains some information\nabout how to use this particular package\nso you see how to use some example\ncommands you can of course expand on\nthis when you publish a package like\nthis now knowing the structure is\nobviously important because that's going\nto dictate the files and directories\nthat you're going to refer to in the\nvarious steps of packaging and\nPublishing when is packaging actually\nuseful well especially if you're working\non a better code base you're going to\nrun into situations where you have code\nthat you're going to need to reuse in\nvarious parts of your project for\nexample you might want to have a\nmechanism for generating IDs both in the\nfront end and in the back end because in\nthe back end you might use it to\ngenerate database IDs in front end you\nmight use it to generate passwords\nautomatically for a user or PIN numbers\nor whatever you might use to test your\ncode for example if you want to test\npayment method you want to generate\ncredit card numbers so there's various\nareas where you're going to want to have\npackages that you're going to use and\npackages allow you to structure those\ndependencies just like you're depending\non other third-party packages or\nlibraries this is also going to make\nyour code easier to manage because\nyou're forced to split up things in neat\npackages that are sort of independent of\nthe rest of your code and that's\ntypically a good thing you might use it\nfor cloud computing where you need to\nrely on Amazon these packages to perform\ncertain tasks you might want to\ncontainerize your application and then\nyou also are going to need some sort of\nsolution to deal with dependencies\nproperly so in Python there is a bunch\nof different tools that you can use for\npackaging and Publishing but the\nbuilt-in one is called setup tools and\nthis is a standard but python library\nthat builds on dist utils and makes it\neasier to package and publish your code\nnow the thing to know about setup tools\nthat is going to use some terms that\nmight look confusing at first so the\nfirst is a wheel what is a wheel exactly\nwell this is basically a packaged\nversion a binary version of your code\nthat's ready for publication this\ncontains basically everything that the\npython package manager needs to know in\norder to install the package it contains\nall the metadata and if you want to\ncreate this binary distribution this\nwheel then the only thing that you need\nto type is in your folder python\nsetup.pi so that's going to use the\nsetup tools package and then you write B\nthis\nwheel so this is the binary distribution\nwheel so if I run this then you see that\nit's actually created a bunch of stuff\nand here it creates a build and a dist\nfolder and in the dist folder we have\nlet me make this a bit larger we see\nthat we have the wheel and this is\nactually the binary file containing\neverything that is needed now before you\ncan actually do this you have to make\nsure that you've actually installed\nthe wheel package because otherwise\npython is not able to do this job and\nyou're going to get an error but I\nalready did that so I don't have to do\nit now the second thing that you're\ngoing to see is the sdist file and this\nis a tarte gzipped file that is not a\nbinary file but it contains the source\ncode this is the source code together\nwith the setup Pi file and that's useful\nbecause that means with that source code\nyou're able to rebuild it if necessary\nin order to create a source distribution\nyou run Python and also setup.pi\nas test Source distribution so now it's\ncreated a source distribution file you\nalso see there's a second file here if\nwe expand this then we see here we have\nthe source distribution that has now\nbeen added there's a couple of other\nthings here as well for example you see\nhere the build folder so this contains\nall the built files so this is now empty\nbut in lib we see that we here have the\nactual python files that are going to be\npart of this build so it copies that\nover and then prepares it in order to be\nable to create the binary and Source\ndistributions and finally there's now\nanother folder called\nidgenerator.ag info and as you can see\nthis contains things like the\ndependencies requires the different\nsource files that are going to be part\nof the app that you're going to\ndistribute so this is more like the um\nthe metadata the additional information\nthat's going to be included with the\npython project AG info is actually being\nreplaced by wheel so I'm I'm not\nentirely certain if this is still\nactually being used if you use the wheel\npackage but it does build it so maybe it\nuses that as an intermediate step or\nsomething I'm not completely sure if you\nhave a better idea of whether egg info\nis still being used let me know in the\ncomments now very interesting part of\nthis is of course how you set all of\nthis up in the setup.pi file because\nthat's a file that you're actually going\nto have to create so let's take a closer\nlook at how I set this up so we are\nimporting from setup tools which is the\npackage that I'm using to package and\npublish this code and what I'm doing is\nas a first step I'm opening the readme\nfile so that's this file right here and\nthis file contains a longer description\nof what this package does and I'm using\nthat to fill in a long description\nvariable and then I have a setup\nfunction so that comes from setup tools\nand what this has is basically all the\nmeta data about this particular package\nso the name of the package is ID\ngenerator it has a version so whenever\nwe want to publish an updated version we\nbump the version number here we have a\ndescription and then there is some\nsettings for where the setup tools\npackets can find the source files of\nthis particular app we have the long\ndescription what type of content is this\nwhile this is markdown we have a URL of\nthis package an author email of the\nauthor we have a license so this is an\nMIT license and that also matches the\nlicense file that we have here so this\nis going to be published alongside the\npackage so what else we have we have\nclassifiers these are sorts of keywords\nand we have a specification of what is\nrequired for this particular package\nwhat's nice about including the requires\nhere is that we really have all the\nnecessary information about the package\nin setup.pi so in this case our package\nrequires bson which we use to generate\nobject IDs but there's also some extra\nrequires namely there's ply test because\nwe need to test the code and you have\ntwine which is the tool that you use to\npublish the package to the repository\nand finally you can indicate that well\nif you use this package you need python\n3.10 or newer what's also nice about\nthis is that actually in this case you\ndon't need a requirements.txt file\nbecause all your dependencies are\ndefined in setup.pi there's a couple of\nthings you need to be aware of well\nfirst you need to make sure that the app\nfolder and subfolders contains init.pi\nfiles so that setup tool actually\nrecognizes this as a package otherwise\nit's not going to be able to find the\nfiles and under ID generator you also\nsee that in the init thunder.pi file we\nactually import all the different\nfunctions on the top level so that when\nwe use this package we don't have to\nwrite from ID generator dot Source dot\nID generator import and then the\nfunction name we can simply directly\nimport it from the ID package directly\nso that's obviously a lot easier to use\nby the way you don't have to use the\nsetup.pi route you can also create a\nsetup.cfg file a config file where you\nspecify these things but in this video\nI've used a pi file because I think it's\nnice and it also allows me for example\nto load the long description from the\nreadme file and this wouldn't be\npossible with a config file by the way\nif you're enjoying this video so far\ngive the like and consider subscribing\nif you want to keep learning more about\nPython and software design so how do we\nbuild and install this well like I\nshowed you before we need to use Python\nsetup.pi and I want to have the binary\ndistribution so that's the wheel and we\nalso want to have Source distribution so\nI can simply write both of them and\npython set of tools is going to build\nboth of them like so if you want to\ninstall the package locally before\nactually shipping it which might be good\nbecause then you can test it you can\nactually do clip install\nDot and then it's going to install ID\ngenerate so you see I've already\ninstalled it before so it's uninstalling\nit and then installing it again but the\nfirst time you do this it's just going\nto install ID generator so now I have\nthe package ready for me to use locally\nso it's not yet been published and\nrepository but I can actually use it\nlocally and I have an example file here\nrun.pi and here you see that I simply\nimport these functions from the ID\ngenerator package which is my own\npackage that I just created and then I\nprint a bunch of function calls just to\nsee what's happening of course this is\nnot a test but you can use this to play\naround with the package make sure that\neverything works correctly as expected\nso when I run this then you see it's\ngoing to print a bunch of IDs passwords\nand PIN codes so locally the package is\nnow working we've been able to package\nit up we've been able to install it\nlocally and then we can use it in our\nPython scripts so this might already be\nenough for you if you just have a a\nbunch of different packages that contain\nsome common tools that you're using in\nyour script this could be a great way to\nkeep things really simple just build\nthem install them locally and then you\ncan use them everywhere in your projects\nof course things are going to be\ndifferent if you want to publish those\nprojects and you want other people to\nactually also use that code because then\nyou're going to need to publish the\npackages as well now I'm quite sure that\nyou have encountered this website this\nis\npi-fi.org here you can browse and search\nfor packages for example let's say I\nwant to look up e\ndone this package so then you see hey we\nhave here pandas to 1.5.3 which is\nreleased well last month and then you\ncan find information about this project\nwhereas the source goes and sets right\nnow the thing is that if you install\npanelists or any other package it\nactually retrieves the package from the\nPi Pi repository it is the official\npython repository that contains all of\nthis code so that means that if you want\nother people to be able to use your\npackage you need to upload it publish it\nto Pipeline and how do you do that well\nfirst you're going to need an account so\nthere's a register button here and this\nallows you to enter name email address\npassword and then you create a Pi Pi\naccount where you can then upload a\npackage now obviously if you want to\npublish your package for the first time\nit's going to be a bit dangerous to just\nupload a bunch of stuff to buy buy and\nthen you realize you made a mistake and\nthen there's a project that's actually\nwrong and then you have all kinds of\nproblems so there is actually a test\nsite as well foreign\nand this looks exactly the same as the\npi file website except this is just used\nfor testing so before you actually try\nto publish anything to Pie by you can\nupload it to the test report story just\nto make sure that everything is working\nas expected how do you upload a package\nto Pi Pi or the Pi Pi test repository\nwell that's why I use the twine tool so\nI've added it here to setup.pi as a\ndevelopment dependency so it's right\nhere just like Pi test so it's already\ninstalled but twine basically helps you\nto do some checks like making sure that\nall the relevant information is there\nand that allows you to upload the\npackage to the Pi Pi repository before\nyou publish package you should let twine\ncheck that all the necessary files and\ninformation is there so you simply do\nthat by twine check and the files are in\nthe disk folder so I just wanted to\ncheck everything in this folder so they\nsee it checks the wheel which passed and\nit also checks The Source distribution\nfile so the this looks good it basically\nmeans that now we're ready to publish\nthis to the repository publishing your\npackage to the Pi Pi repository is now\nreally easy you simply use twine to do\nthis so you write twine\nupload and then you simply write this\nslash asterisk and now it's going to\nupload the distribution to bypi you have\nto enter your username and your password\nand then it's going to do that so I'm\nnot going to upload it to Pi Pi because\nthis is not a real package and you\nshouldn't do that either because you\nshould first upload your package to the\ntest repository to make sure that\neverything is as you'd expect it to be\nand you can also do that with twine it's\nalso really easy it's simply type twine\nupload\nand then you specify the repository with\nminus r and this is test bye bye and we\nalso want to distribute the same files\nand again this works in exactly the same\nway you enter your username and your\npassword and then it's going to upload\nthe package once you've uploaded this\nyou can actually see the project on the\ntest by by repository just as it will\nlook like when you upload it to the real\nrepository so you can open this and then\nit's going to contain the project\ndescription there's going to be a home\npage there's also going to be the\nlicense you see that we have the\nclassifications here that I showed you\nin the setup.bi file before so in\nprinciple everything is now right here\nand you even have the install command\nfrom the test repo story so once you're\nhappy with this once you're happy with\nthe description once you're happy with\neverything else you can simply use the\nsame process to publish it to the actual\nbuy buy reposter it's really easy to\nconclude this video I'll share five\nthings with you that you should think\nabout if you're planning to publish a\npackage plan to publish difficult the\nfirst thing you should do is make sure\nthat it actually makes sense to package\nyour code as you call it then set up in\nmodules that are nicely decoupled that\nyou use abstractions to make sure that\npeople can easily use it did you think\nabout the architecture of your package\ndoes it make sense the way that the\ndifferent classes functions modules are\norganized if your application requires\nextra data will that data be part of\nyour package or is that going to be\navailable somewhere externally so\nsomething you might have to think about\nin some cases second thing is if you\npublish a package well there's going to\nbe not just metadata but you might have\nto do a lot more for people in order to\nbe able to use the package you might\nhave to write extensive documentation of\nhow it works you may even want to create\na separate website where you talk about\nwhat the package does and how people can\nuse it tutorials maybe even record\nvideos or anything that you could do to\nmake the package easier to use and of\ncourse up to you how far you go with\nthis but the more of those matter of\nthings you do the easier it's going to\nbe for people to find and actually use\nyour package third thing that's really\nimportant is that you think about a\nproper software license if you release\nyour software without any license\nwhatsoever it's not clear whether people\ncan actually use it and they will\nprobably not use it especially if the\npart of a company or company just wants\nto make sure that the licenses of the\npackages and tools they use are in order\nbecause otherwise they could get sued or\nsomething so make sure to always license\nyour code properly there's of course\nlots and lots of options of different\nlicenses on each of these licenses have\ndifferent implications so there's the\nMIT license there's the new license\nthere's a couple of sites that are\nuseful for this like tldr legal or\nchooserlicense.com I've put links to\nthose sites in the description so you\ncan take a look yeah you might find that\nhelpful the fourth one is you need to\nmake sure that if it's a package that\nyou're going to be regularly updating\nwhich you should typically do if you\nwant people to keep using it you need to\nup to date with the latest developments\nobviously so every time you release a\npackage of course you have to bump the\nversion number and do some tasks related\nto releasing the package and you might\nalso want to think about how you\nstructure that a bit better there are\nsome packages that can help you with\nthis for example bump version that does\nsome of the version management for you\nmakes that a bit easier but in general\nyou might want to think about how you're\ngoing to do this and how you're going to\norganize that so that it doesn't become\na lot of work for you using versioning\ntools actually a good idea especially if\nyou want to avoid clashes with version\nnumbers on Pipeline and finally it's a\ngood idea to really rely on classifiers\nso here I have my setup file again so\nyou see I've added three of these\nclassifiers one is about the license so\nI've used the MIT license in this case\nprogramming language operating system\nand you can use more classifiers and\nthis is going to be helpful for\ndevelopers that are looking for packages\nthat fit what they need for example some\ndevelopers might only want to use\npackages that have been released under\nthe MIT license so then they can use\nthis classifier to filter packages so\nthat they're sure that they're not using\nanything that they're not allowed to use\nin their company you can find all the\npossible classifiers on the pi by\nwebsite on the pipel.org classifiers you\nsee an example so there's classifiers\nthat are related to the development\nstatus the type of environments whether\nit uses a particular GPU that's like as\nyou can see there's like tons and tons\nof different classifiers and probably\nmakes a lot of sense for you to think\nabout which classifiers are going to fit\nbest with your particular package so I\nhope you enjoyed this video as an\nintroduction to packaging and it helps\nyou take the steps to publish your code\nto the world\nof course another way of publishing your\nwork is by actually not releasing the\ncode but also deploying it to the cloud\nso that other people can actually use\nyour code as a service if you want to\nlearn more about that here's a video\nwhere I show a very simple setup using\nDocker that allows you to very easily\ncontainerize and deploy a python\napplication thanks for watching and see\nyou next week\n",
  "words": [
    "common",
    "way",
    "package",
    "share",
    "code",
    "using",
    "python",
    "set",
    "tools",
    "package",
    "code",
    "publish",
    "others",
    "use",
    "sharing",
    "binary",
    "files",
    "source",
    "code",
    "using",
    "package",
    "manager",
    "stores",
    "python",
    "package",
    "online",
    "repository",
    "like",
    "pi",
    "pi",
    "official",
    "python",
    "repository",
    "publish",
    "package",
    "terms",
    "like",
    "wheel",
    "egg",
    "info",
    "actually",
    "mean",
    "cover",
    "today",
    "video",
    "make",
    "sure",
    "watch",
    "till",
    "end",
    "end",
    "share",
    "five",
    "things",
    "really",
    "important",
    "think",
    "want",
    "publish",
    "code",
    "one",
    "thing",
    "important",
    "case",
    "make",
    "sure",
    "code",
    "high",
    "quality",
    "others",
    "actually",
    "use",
    "determine",
    "quality",
    "code",
    "well",
    "free",
    "workshop",
    "code",
    "diagnosis",
    "get",
    "500",
    "goals",
    "slash",
    "diagnosis",
    "going",
    "help",
    "become",
    "better",
    "review",
    "code",
    "understanding",
    "problems",
    "half",
    "hour",
    "contains",
    "lots",
    "practical",
    "advice",
    "review",
    "production",
    "code",
    "illustrate",
    "works",
    "apply",
    "ideas",
    "code",
    "slash",
    "diagnosis",
    "access",
    "free",
    "link",
    "also",
    "description",
    "video",
    "video",
    "going",
    "use",
    "simple",
    "example",
    "application",
    "packaging",
    "publishing",
    "pi",
    "pi",
    "library",
    "generates",
    "bunch",
    "different",
    "ids",
    "example",
    "something",
    "generates",
    "password",
    "given",
    "length",
    "really",
    "matter",
    "code",
    "exactly",
    "checks",
    "particular",
    "types",
    "characters",
    "string",
    "function",
    "generate",
    "gui",
    "id",
    "function",
    "generate",
    "credit",
    "card",
    "number",
    "uses",
    "loon",
    "checks",
    "test",
    "something",
    "generates",
    "pin",
    "number",
    "something",
    "generates",
    "object",
    "id",
    "course",
    "add",
    "bunch",
    "extra",
    "id",
    "generator",
    "functions",
    "really",
    "point",
    "video",
    "thing",
    "want",
    "show",
    "take",
    "library",
    "like",
    "package",
    "publish",
    "next",
    "id",
    "generator",
    "module",
    "also",
    "utils",
    "module",
    "normally",
    "big",
    "fan",
    "calling",
    "files",
    "utils",
    "really",
    "clear",
    "users",
    "case",
    "pretty",
    "small",
    "could",
    "maybe",
    "even",
    "called",
    "would",
    "also",
    "fine",
    "also",
    "added",
    "software",
    "tests",
    "test",
    "id",
    "generator",
    "see",
    "well",
    "import",
    "different",
    "functions",
    "want",
    "test",
    "unit",
    "test",
    "test",
    "case",
    "test",
    "generating",
    "password",
    "gui",
    "id",
    "couple",
    "extra",
    "tests",
    "complete",
    "could",
    "also",
    "build",
    "test",
    "test",
    "kinds",
    "different",
    "edge",
    "cases",
    "show",
    "set",
    "let",
    "also",
    "take",
    "quick",
    "look",
    "project",
    "actually",
    "organized",
    "setup",
    "file",
    "talk",
    "minute",
    "license",
    "describes",
    "people",
    "allowed",
    "use",
    "code",
    "app",
    "folder",
    "contains",
    "id",
    "generator",
    "package",
    "inside",
    "package",
    "files",
    "showed",
    "resource",
    "folder",
    "readme",
    "file",
    "contains",
    "information",
    "use",
    "particular",
    "package",
    "see",
    "use",
    "example",
    "commands",
    "course",
    "expand",
    "publish",
    "package",
    "like",
    "knowing",
    "structure",
    "obviously",
    "important",
    "going",
    "dictate",
    "files",
    "directories",
    "going",
    "refer",
    "various",
    "steps",
    "packaging",
    "publishing",
    "packaging",
    "actually",
    "useful",
    "well",
    "especially",
    "working",
    "better",
    "code",
    "base",
    "going",
    "run",
    "situations",
    "code",
    "going",
    "need",
    "reuse",
    "various",
    "parts",
    "project",
    "example",
    "might",
    "want",
    "mechanism",
    "generating",
    "ids",
    "front",
    "end",
    "back",
    "end",
    "back",
    "end",
    "might",
    "use",
    "generate",
    "database",
    "ids",
    "front",
    "end",
    "might",
    "use",
    "generate",
    "passwords",
    "automatically",
    "user",
    "pin",
    "numbers",
    "whatever",
    "might",
    "use",
    "test",
    "code",
    "example",
    "want",
    "test",
    "payment",
    "method",
    "want",
    "generate",
    "credit",
    "card",
    "numbers",
    "various",
    "areas",
    "going",
    "want",
    "packages",
    "going",
    "use",
    "packages",
    "allow",
    "structure",
    "dependencies",
    "like",
    "depending",
    "packages",
    "libraries",
    "also",
    "going",
    "make",
    "code",
    "easier",
    "manage",
    "forced",
    "split",
    "things",
    "neat",
    "packages",
    "sort",
    "independent",
    "rest",
    "code",
    "typically",
    "good",
    "thing",
    "might",
    "use",
    "cloud",
    "computing",
    "need",
    "rely",
    "amazon",
    "packages",
    "perform",
    "certain",
    "tasks",
    "might",
    "want",
    "containerize",
    "application",
    "also",
    "going",
    "need",
    "sort",
    "solution",
    "deal",
    "dependencies",
    "properly",
    "python",
    "bunch",
    "different",
    "tools",
    "use",
    "packaging",
    "publishing",
    "one",
    "called",
    "setup",
    "tools",
    "standard",
    "python",
    "library",
    "builds",
    "dist",
    "utils",
    "makes",
    "easier",
    "package",
    "publish",
    "code",
    "thing",
    "know",
    "setup",
    "tools",
    "going",
    "use",
    "terms",
    "might",
    "look",
    "confusing",
    "first",
    "first",
    "wheel",
    "wheel",
    "exactly",
    "well",
    "basically",
    "packaged",
    "version",
    "binary",
    "version",
    "code",
    "ready",
    "publication",
    "contains",
    "basically",
    "everything",
    "python",
    "package",
    "manager",
    "needs",
    "know",
    "order",
    "install",
    "package",
    "contains",
    "metadata",
    "want",
    "create",
    "binary",
    "distribution",
    "wheel",
    "thing",
    "need",
    "type",
    "folder",
    "python",
    "going",
    "use",
    "setup",
    "tools",
    "package",
    "write",
    "b",
    "wheel",
    "binary",
    "distribution",
    "wheel",
    "run",
    "see",
    "actually",
    "created",
    "bunch",
    "stuff",
    "creates",
    "build",
    "dist",
    "folder",
    "dist",
    "folder",
    "let",
    "make",
    "bit",
    "larger",
    "see",
    "wheel",
    "actually",
    "binary",
    "file",
    "containing",
    "everything",
    "needed",
    "actually",
    "make",
    "sure",
    "actually",
    "installed",
    "wheel",
    "package",
    "otherwise",
    "python",
    "able",
    "job",
    "going",
    "get",
    "error",
    "already",
    "second",
    "thing",
    "going",
    "see",
    "sdist",
    "file",
    "tarte",
    "gzipped",
    "file",
    "binary",
    "file",
    "contains",
    "source",
    "code",
    "source",
    "code",
    "together",
    "setup",
    "pi",
    "file",
    "useful",
    "means",
    "source",
    "code",
    "able",
    "rebuild",
    "necessary",
    "order",
    "create",
    "source",
    "distribution",
    "run",
    "python",
    "also",
    "test",
    "source",
    "distribution",
    "created",
    "source",
    "distribution",
    "file",
    "also",
    "see",
    "second",
    "file",
    "expand",
    "see",
    "source",
    "distribution",
    "added",
    "couple",
    "things",
    "well",
    "example",
    "see",
    "build",
    "folder",
    "contains",
    "built",
    "files",
    "empty",
    "lib",
    "see",
    "actual",
    "python",
    "files",
    "going",
    "part",
    "build",
    "copies",
    "prepares",
    "order",
    "able",
    "create",
    "binary",
    "source",
    "distributions",
    "finally",
    "another",
    "folder",
    "called",
    "info",
    "see",
    "contains",
    "things",
    "like",
    "dependencies",
    "requires",
    "different",
    "source",
    "files",
    "going",
    "part",
    "app",
    "going",
    "distribute",
    "like",
    "um",
    "metadata",
    "additional",
    "information",
    "going",
    "included",
    "python",
    "project",
    "ag",
    "info",
    "actually",
    "replaced",
    "wheel",
    "entirely",
    "certain",
    "still",
    "actually",
    "used",
    "use",
    "wheel",
    "package",
    "build",
    "maybe",
    "uses",
    "intermediate",
    "step",
    "something",
    "completely",
    "sure",
    "better",
    "idea",
    "whether",
    "egg",
    "info",
    "still",
    "used",
    "let",
    "know",
    "comments",
    "interesting",
    "part",
    "course",
    "set",
    "file",
    "file",
    "actually",
    "going",
    "create",
    "let",
    "take",
    "closer",
    "look",
    "set",
    "importing",
    "setup",
    "tools",
    "package",
    "using",
    "package",
    "publish",
    "code",
    "first",
    "step",
    "opening",
    "readme",
    "file",
    "file",
    "right",
    "file",
    "contains",
    "longer",
    "description",
    "package",
    "using",
    "fill",
    "long",
    "description",
    "variable",
    "setup",
    "function",
    "comes",
    "setup",
    "tools",
    "basically",
    "meta",
    "data",
    "particular",
    "package",
    "name",
    "package",
    "id",
    "generator",
    "version",
    "whenever",
    "want",
    "publish",
    "updated",
    "version",
    "bump",
    "version",
    "number",
    "description",
    "settings",
    "setup",
    "tools",
    "packets",
    "find",
    "source",
    "files",
    "particular",
    "app",
    "long",
    "description",
    "type",
    "content",
    "markdown",
    "url",
    "package",
    "author",
    "email",
    "author",
    "license",
    "mit",
    "license",
    "also",
    "matches",
    "license",
    "file",
    "going",
    "published",
    "alongside",
    "package",
    "else",
    "classifiers",
    "sorts",
    "keywords",
    "specification",
    "required",
    "particular",
    "package",
    "nice",
    "including",
    "requires",
    "really",
    "necessary",
    "information",
    "package",
    "case",
    "package",
    "requires",
    "bson",
    "use",
    "generate",
    "object",
    "ids",
    "also",
    "extra",
    "requires",
    "namely",
    "ply",
    "test",
    "need",
    "test",
    "code",
    "twine",
    "tool",
    "use",
    "publish",
    "package",
    "repository",
    "finally",
    "indicate",
    "well",
    "use",
    "package",
    "need",
    "python",
    "newer",
    "also",
    "nice",
    "actually",
    "case",
    "need",
    "file",
    "dependencies",
    "defined",
    "couple",
    "things",
    "need",
    "aware",
    "well",
    "first",
    "need",
    "make",
    "sure",
    "app",
    "folder",
    "subfolders",
    "contains",
    "files",
    "setup",
    "tool",
    "actually",
    "recognizes",
    "package",
    "otherwise",
    "going",
    "able",
    "find",
    "files",
    "id",
    "generator",
    "also",
    "see",
    "init",
    "file",
    "actually",
    "import",
    "different",
    "functions",
    "top",
    "level",
    "use",
    "package",
    "write",
    "id",
    "generator",
    "dot",
    "source",
    "dot",
    "id",
    "generator",
    "import",
    "function",
    "name",
    "simply",
    "directly",
    "import",
    "id",
    "package",
    "directly",
    "obviously",
    "lot",
    "easier",
    "use",
    "way",
    "use",
    "route",
    "also",
    "create",
    "file",
    "config",
    "file",
    "specify",
    "things",
    "video",
    "used",
    "pi",
    "file",
    "think",
    "nice",
    "also",
    "allows",
    "example",
    "load",
    "long",
    "description",
    "readme",
    "file",
    "would",
    "possible",
    "config",
    "file",
    "way",
    "enjoying",
    "video",
    "far",
    "give",
    "like",
    "consider",
    "subscribing",
    "want",
    "keep",
    "learning",
    "python",
    "software",
    "design",
    "build",
    "install",
    "well",
    "like",
    "showed",
    "need",
    "use",
    "python",
    "want",
    "binary",
    "distribution",
    "wheel",
    "also",
    "want",
    "source",
    "distribution",
    "simply",
    "write",
    "python",
    "set",
    "tools",
    "going",
    "build",
    "like",
    "want",
    "install",
    "package",
    "locally",
    "actually",
    "shipping",
    "might",
    "good",
    "test",
    "actually",
    "clip",
    "install",
    "dot",
    "going",
    "install",
    "id",
    "generate",
    "see",
    "already",
    "installed",
    "uninstalling",
    "installing",
    "first",
    "time",
    "going",
    "install",
    "id",
    "generator",
    "package",
    "ready",
    "use",
    "locally",
    "yet",
    "published",
    "repository",
    "actually",
    "use",
    "locally",
    "example",
    "file",
    "see",
    "simply",
    "import",
    "functions",
    "id",
    "generator",
    "package",
    "package",
    "created",
    "print",
    "bunch",
    "function",
    "calls",
    "see",
    "happening",
    "course",
    "test",
    "use",
    "play",
    "around",
    "package",
    "make",
    "sure",
    "everything",
    "works",
    "correctly",
    "expected",
    "run",
    "see",
    "going",
    "print",
    "bunch",
    "ids",
    "passwords",
    "pin",
    "codes",
    "locally",
    "package",
    "working",
    "able",
    "package",
    "able",
    "install",
    "locally",
    "use",
    "python",
    "scripts",
    "might",
    "already",
    "enough",
    "bunch",
    "different",
    "packages",
    "contain",
    "common",
    "tools",
    "using",
    "script",
    "could",
    "great",
    "way",
    "keep",
    "things",
    "really",
    "simple",
    "build",
    "install",
    "locally",
    "use",
    "everywhere",
    "projects",
    "course",
    "things",
    "going",
    "different",
    "want",
    "publish",
    "projects",
    "want",
    "people",
    "actually",
    "also",
    "use",
    "code",
    "going",
    "need",
    "publish",
    "packages",
    "well",
    "quite",
    "sure",
    "encountered",
    "website",
    "browse",
    "search",
    "packages",
    "example",
    "let",
    "say",
    "want",
    "look",
    "e",
    "done",
    "package",
    "see",
    "hey",
    "pandas",
    "released",
    "well",
    "last",
    "month",
    "find",
    "information",
    "project",
    "whereas",
    "source",
    "goes",
    "sets",
    "right",
    "thing",
    "install",
    "panelists",
    "package",
    "actually",
    "retrieves",
    "package",
    "pi",
    "pi",
    "repository",
    "official",
    "python",
    "repository",
    "contains",
    "code",
    "means",
    "want",
    "people",
    "able",
    "use",
    "package",
    "need",
    "upload",
    "publish",
    "pipeline",
    "well",
    "first",
    "going",
    "need",
    "account",
    "register",
    "button",
    "allows",
    "enter",
    "name",
    "email",
    "address",
    "password",
    "create",
    "pi",
    "pi",
    "account",
    "upload",
    "package",
    "obviously",
    "want",
    "publish",
    "package",
    "first",
    "time",
    "going",
    "bit",
    "dangerous",
    "upload",
    "bunch",
    "stuff",
    "buy",
    "buy",
    "realize",
    "made",
    "mistake",
    "project",
    "actually",
    "wrong",
    "kinds",
    "problems",
    "actually",
    "test",
    "site",
    "well",
    "foreign",
    "looks",
    "exactly",
    "pi",
    "file",
    "website",
    "except",
    "used",
    "testing",
    "actually",
    "try",
    "publish",
    "anything",
    "pie",
    "upload",
    "test",
    "report",
    "story",
    "make",
    "sure",
    "everything",
    "working",
    "expected",
    "upload",
    "package",
    "pi",
    "pi",
    "pi",
    "pi",
    "test",
    "repository",
    "well",
    "use",
    "twine",
    "tool",
    "added",
    "development",
    "dependency",
    "right",
    "like",
    "pi",
    "test",
    "already",
    "installed",
    "twine",
    "basically",
    "helps",
    "checks",
    "like",
    "making",
    "sure",
    "relevant",
    "information",
    "allows",
    "upload",
    "package",
    "pi",
    "pi",
    "repository",
    "publish",
    "package",
    "let",
    "twine",
    "check",
    "necessary",
    "files",
    "information",
    "simply",
    "twine",
    "check",
    "files",
    "disk",
    "folder",
    "wanted",
    "check",
    "everything",
    "folder",
    "see",
    "checks",
    "wheel",
    "passed",
    "also",
    "checks",
    "source",
    "distribution",
    "file",
    "looks",
    "good",
    "basically",
    "means",
    "ready",
    "publish",
    "repository",
    "publishing",
    "package",
    "pi",
    "pi",
    "repository",
    "really",
    "easy",
    "simply",
    "use",
    "twine",
    "write",
    "twine",
    "upload",
    "simply",
    "write",
    "slash",
    "asterisk",
    "going",
    "upload",
    "distribution",
    "bypi",
    "enter",
    "username",
    "password",
    "going",
    "going",
    "upload",
    "pi",
    "pi",
    "real",
    "package",
    "either",
    "first",
    "upload",
    "package",
    "test",
    "repository",
    "make",
    "sure",
    "everything",
    "expect",
    "also",
    "twine",
    "also",
    "really",
    "easy",
    "simply",
    "type",
    "twine",
    "upload",
    "specify",
    "repository",
    "minus",
    "r",
    "test",
    "bye",
    "bye",
    "also",
    "want",
    "distribute",
    "files",
    "works",
    "exactly",
    "way",
    "enter",
    "username",
    "password",
    "going",
    "upload",
    "package",
    "uploaded",
    "actually",
    "see",
    "project",
    "test",
    "repository",
    "look",
    "like",
    "upload",
    "real",
    "repository",
    "open",
    "going",
    "contain",
    "project",
    "description",
    "going",
    "home",
    "page",
    "also",
    "going",
    "license",
    "see",
    "classifications",
    "showed",
    "file",
    "principle",
    "everything",
    "right",
    "even",
    "install",
    "command",
    "test",
    "repo",
    "story",
    "happy",
    "happy",
    "description",
    "happy",
    "everything",
    "else",
    "simply",
    "use",
    "process",
    "publish",
    "actual",
    "buy",
    "buy",
    "reposter",
    "really",
    "easy",
    "conclude",
    "video",
    "share",
    "five",
    "things",
    "think",
    "planning",
    "publish",
    "package",
    "plan",
    "publish",
    "difficult",
    "first",
    "thing",
    "make",
    "sure",
    "actually",
    "makes",
    "sense",
    "package",
    "code",
    "call",
    "set",
    "modules",
    "nicely",
    "decoupled",
    "use",
    "abstractions",
    "make",
    "sure",
    "people",
    "easily",
    "use",
    "think",
    "architecture",
    "package",
    "make",
    "sense",
    "way",
    "different",
    "classes",
    "functions",
    "modules",
    "organized",
    "application",
    "requires",
    "extra",
    "data",
    "data",
    "part",
    "package",
    "going",
    "available",
    "somewhere",
    "externally",
    "something",
    "might",
    "think",
    "cases",
    "second",
    "thing",
    "publish",
    "package",
    "well",
    "going",
    "metadata",
    "might",
    "lot",
    "people",
    "order",
    "able",
    "use",
    "package",
    "might",
    "write",
    "extensive",
    "documentation",
    "works",
    "may",
    "even",
    "want",
    "create",
    "separate",
    "website",
    "talk",
    "package",
    "people",
    "use",
    "tutorials",
    "maybe",
    "even",
    "record",
    "videos",
    "anything",
    "could",
    "make",
    "package",
    "easier",
    "use",
    "course",
    "far",
    "go",
    "matter",
    "things",
    "easier",
    "going",
    "people",
    "find",
    "actually",
    "use",
    "package",
    "third",
    "thing",
    "really",
    "important",
    "think",
    "proper",
    "software",
    "license",
    "release",
    "software",
    "without",
    "license",
    "whatsoever",
    "clear",
    "whether",
    "people",
    "actually",
    "use",
    "probably",
    "use",
    "especially",
    "part",
    "company",
    "company",
    "wants",
    "make",
    "sure",
    "licenses",
    "packages",
    "tools",
    "use",
    "order",
    "otherwise",
    "could",
    "get",
    "sued",
    "something",
    "make",
    "sure",
    "always",
    "license",
    "code",
    "properly",
    "course",
    "lots",
    "lots",
    "options",
    "different",
    "licenses",
    "licenses",
    "different",
    "implications",
    "mit",
    "license",
    "new",
    "license",
    "couple",
    "sites",
    "useful",
    "like",
    "tldr",
    "legal",
    "put",
    "links",
    "sites",
    "description",
    "take",
    "look",
    "yeah",
    "might",
    "find",
    "helpful",
    "fourth",
    "one",
    "need",
    "make",
    "sure",
    "package",
    "going",
    "regularly",
    "updating",
    "typically",
    "want",
    "people",
    "keep",
    "using",
    "need",
    "date",
    "latest",
    "developments",
    "obviously",
    "every",
    "time",
    "release",
    "package",
    "course",
    "bump",
    "version",
    "number",
    "tasks",
    "related",
    "releasing",
    "package",
    "might",
    "also",
    "want",
    "think",
    "structure",
    "bit",
    "better",
    "packages",
    "help",
    "example",
    "bump",
    "version",
    "version",
    "management",
    "makes",
    "bit",
    "easier",
    "general",
    "might",
    "want",
    "think",
    "going",
    "going",
    "organize",
    "become",
    "lot",
    "work",
    "using",
    "versioning",
    "tools",
    "actually",
    "good",
    "idea",
    "especially",
    "want",
    "avoid",
    "clashes",
    "version",
    "numbers",
    "pipeline",
    "finally",
    "good",
    "idea",
    "really",
    "rely",
    "classifiers",
    "setup",
    "file",
    "see",
    "added",
    "three",
    "classifiers",
    "one",
    "license",
    "used",
    "mit",
    "license",
    "case",
    "programming",
    "language",
    "operating",
    "system",
    "use",
    "classifiers",
    "going",
    "helpful",
    "developers",
    "looking",
    "packages",
    "fit",
    "need",
    "example",
    "developers",
    "might",
    "want",
    "use",
    "packages",
    "released",
    "mit",
    "license",
    "use",
    "classifier",
    "filter",
    "packages",
    "sure",
    "using",
    "anything",
    "allowed",
    "use",
    "company",
    "find",
    "possible",
    "classifiers",
    "pi",
    "website",
    "classifiers",
    "see",
    "example",
    "classifiers",
    "related",
    "development",
    "status",
    "type",
    "environments",
    "whether",
    "uses",
    "particular",
    "gpu",
    "like",
    "see",
    "like",
    "tons",
    "tons",
    "different",
    "classifiers",
    "probably",
    "makes",
    "lot",
    "sense",
    "think",
    "classifiers",
    "going",
    "fit",
    "best",
    "particular",
    "package",
    "hope",
    "enjoyed",
    "video",
    "introduction",
    "packaging",
    "helps",
    "take",
    "steps",
    "publish",
    "code",
    "world",
    "course",
    "another",
    "way",
    "publishing",
    "work",
    "actually",
    "releasing",
    "code",
    "also",
    "deploying",
    "cloud",
    "people",
    "actually",
    "use",
    "code",
    "service",
    "want",
    "learn",
    "video",
    "show",
    "simple",
    "setup",
    "using",
    "docker",
    "allows",
    "easily",
    "containerize",
    "deploy",
    "python",
    "application",
    "thanks",
    "watching",
    "see",
    "next",
    "week"
  ],
  "keywords": [
    "way",
    "package",
    "code",
    "using",
    "python",
    "set",
    "tools",
    "publish",
    "use",
    "binary",
    "files",
    "source",
    "repository",
    "like",
    "pi",
    "wheel",
    "info",
    "actually",
    "video",
    "make",
    "sure",
    "end",
    "things",
    "really",
    "important",
    "think",
    "want",
    "one",
    "thing",
    "case",
    "well",
    "going",
    "better",
    "contains",
    "works",
    "also",
    "description",
    "example",
    "application",
    "packaging",
    "publishing",
    "generates",
    "bunch",
    "different",
    "ids",
    "something",
    "password",
    "exactly",
    "checks",
    "particular",
    "function",
    "generate",
    "id",
    "number",
    "test",
    "course",
    "extra",
    "generator",
    "functions",
    "take",
    "could",
    "even",
    "added",
    "software",
    "see",
    "import",
    "couple",
    "build",
    "let",
    "look",
    "project",
    "setup",
    "file",
    "license",
    "people",
    "app",
    "folder",
    "information",
    "obviously",
    "run",
    "need",
    "might",
    "packages",
    "dependencies",
    "easier",
    "good",
    "makes",
    "first",
    "basically",
    "version",
    "everything",
    "order",
    "install",
    "create",
    "distribution",
    "type",
    "write",
    "bit",
    "able",
    "already",
    "part",
    "requires",
    "used",
    "right",
    "find",
    "mit",
    "classifiers",
    "twine",
    "simply",
    "lot",
    "allows",
    "locally",
    "website",
    "upload",
    "buy"
  ]
}