{
  "text": "JavaScript It's a Wonderful programming\nlanguage to learn for beginners it's\nalso a horrible programming language to\nlearn for beginners on one hand you can\nbuild almost anything with it and get a\njob anywhere if you master it on the\nother hand it's weird ugly and\nsurrounded by a dystopian Wasteland of\nFrameworks and libraries don't want to\nsound like a dick or nothing but uh it\nsays on your chart that you're [ __ ] up\nwelcome to JavaScript 101 over the next\nfew minutes you'll learn 101 different\nthings you need to know about JavaScript\nlike how to use it where to use it and\nwhy it is the way it is by the end of\nthis video you'll be able to build a\nwebsite a mobile app a desktop app a\nserver an operating system artificial\nintelligence and all kinds of other\nstuff you shouldn't build with it it was\ncreated in 1993 by Brendan Ike at\nNetscape at the time the web browser was\ncutting edge technology that connected\neverybody on the planet via the\nworldwide web now that I've gotten on\nthe internet I'd rather be on my\ncomputer than doing just about anything\nat the time websites were completely\nstatic with pure HTML JavaScript was\ndesigned as an easyto use highle\nlanguage to help developers make these\nwebsites interactive today it's arguably\nthe most popular language in the world\nand its standard implementation is\ncalled ecmascript and is the default\nlanguage in all web browsers in fact\nit's the only code that natively runs in\na browser aside from web assembly\nhowever the browser is not the only\nruntime and you can also run JavaScript\ncode on a server thanks to tools like\nnode.js and Dino as the name implies\nJavaScript is a scripting language that\nmeans you can execute code on the Fly by\nopening up the console in your browser\nDev tools to run some code that changes\nthe appearance of a website at any time\nit's interpreted line by line as opposed\nto other languages like C that are\ncompiled ahead of time however\ninterpreted is not the most accurate\nterm to use here under the hood of the\nbrowser there's an engine called V8 it\nmakes JavaScript run extremely fast by\ntaking your code and converting it to\nmachine code with a process called Just\nin Time compilation but none of this\nstuff really matters let's jump into\nsome code to use JavaScript on a web\npage you'll first need an HTML document\ninside of which we'll have script tag\nyou can write code inside the tag\ndirectly or reference an external file\nwith the source attribute now to say\nhello world use console log which is\njavascript's built-in tool for printing\nto the standard output now open the HTML\nfile in a browser and you should see the\nvalue printed out in the dev tools there\nare several different ways to Define\nvariables the most common of which today\nis let start by giving it a name which\nwill normally be in camel case then\nassign a value to it it's a dynamically\ntyped language which means no data type\nannotations are necessary in this case\nI've assigned a number which is one of\nthe seven primitive data types built\ninto the language however we don't need\nto assign the variable a value right now\nbecause it can be reassigned later\nwithout an assignment it automatically\nuses the Primitive value of undefined as\nits default value however we can\nexplicitly represent an empty value\nusing null and later on we could\nreassign that same variable to a string\nit's an entirely different data type but\nthat's perfectly okay now any value\nthat's not a primitive will inherit from\nthe object class but more on that later\nright now now we need to talk about this\nsemicolon technically semicolons are\noptional because if you leave them out\nthe JavaScript parser will add them\nautomatically in real life JavaScript\ndevelopers will often fight to the death\nover whether or not to use semicolons\nbut let is not the only way to define a\nvariable another common option is const\nwhich is used for variables that cannot\nbe reassigned later but the original way\nto declare a variable is VAR I would\nrecommend ignoring its existence\naltogether although you will find it out\nin the wild the reason we have so many\ndifferent ways to Define variables has\nto do with the lexical environment which\ndetermines where variables work and\nwhere they don't there's Global scope\nwhich is where we are right now which\nmeans this variable will be available\neverywhere however if we Define a\nvariable inside a function it then\nbecomes local to that function and\ncannot be used outside of it and finally\nif you have a statement like an if\ncondition variables can be scoped inside\nthe braces or block unless you use VAR\nfor that variable which is not block\nscope in which case it will be hoisted\nup into the local scope for that\nfunction and trust me you don't want\nthat weirdness in your life when the\nfunction keyword is used by itself it's\ncalled a function definition or\nstatement functions are one of the main\nbuilding blocks in JavaScript and they\nwork by taking an input or argument then\noptionally return a value that can be\nused somewhere else now functions are\njust objects which means they can also\nbe used as Expressions allowing them to\nbe used as variables or to construct\nhigher order functions where a function\nis used as an argument or a return value\nfunctions can also be nested to create a\nclosure that encapsulates data and logic\nfrom the rest of the program normally\nwhen you call a function that has a\nvariable with a primitive value it's\nstored on the call stack which is the\nbrowser's short-term memory however when\nyou create a closure the inner function\ncan still access variables in the outer\nfunction even after the initial function\ncall that happens because JavaScript\nautomatically stores the data in the\nouter function in the Heap memory which\nwill persist between function calls\nyou'll rarely have to think about that\nas a developer but what you're more\nlikely to run into is this it's a\nkeyword that references an object based\non how a function is called when called\nfrom the global scope it references the\nwindow object in the browser however if\nthat same function is attached to an\nobject and called by that object this\nwill be a reference to that object and\nyou can manually bind a function to some\nother object using the bind method this\ncan be rather confusing but modern\nJavaScript has another way to define\nfunctions using the arrow syntax Arrow\nfunctions don't have their own this\nvalue and they're always Anonymous which\nmakes them ideal for function\nExpressions now one last thing you need\nto know about functions is that when\npassing arguments a primitive like a\nnumber is passed by value which means a\ncopy is created of the original variable\nhowever if the argument is an object\nthat means it's stored in the Heap and\nit's passed by reference that means\nmultiple parts of the code might be\nmutating the same object speaking of\nwhich let's talk about objects the\neasiest way to define one is with the\nobject literal syntax using braces but\nthere's also an object type that can be\ncreated with a Constructor using the new\nkeyword an object contains a collection\nof key value pairs or properties and\nvalues what's interesting interesting is\nthat objects can inherit properties from\neach other thanks to a mechanism called\nthe Prototype chain every object has a\nprivate property that links to exactly\none prototype this differs from\nclass-based inheritance found in many\nother languages because we're dealing\nwith real objects that take up memory as\nopposed to abstract classes in your code\nnow what's confusing is Javascript\nsupports object-oriented programming\nwith a class keyword however classes are\njust syntactic sugar for prototypal\ninheritance and objects a class can\ndefine a Constructor which is a function\nthat's called when the object is first\ncreated it can also have properties and\noptionally create Getters and Setters to\naccess them and it more easily\nencapsulates functions by organizing\nthem as methods on an object instance or\nmaking them Global to the class name\nwith the static keyword in addition to\nobjects JavaScript has a bunch of\nbuilt-in data structures like an array\nfor holding a dynamic collection of\nindexed items or a set to hold a\ncollection of unique items or map which\nalso holds a key value pair like an\nobject but can be more easily looped\nover along with a variety of other\nfeatures now what you should also know\nat this point is that JavaScript is\ngarbage collected that means it will\nautomatically deallocate objects from\nmemory when they're no longer referenced\nin your code however when you have a map\nall the properties will always be\nreferenced if that's not optimal there's\na weak map and weak set that contain\nproperties that can be garbage collected\nto reduce memory usage now that we have\na basic idea of what JavaScript looks\nlike let's talk about one of its most\ninteresting features which is its\nnon-blocking event Loop normally when\nyou write code in a script it's executed\nsynchronously line by line which means\nthe next line can't start until the\nprevious line finishes with an event\nLoop we can write a synchronous code in\nJavaScript that runs in a separate\nthreadpool while the rest of the\napplication continues to execute this is\nreally important because modern websites\noften have multiple things going on at\nthe same time but they only have access\nto a single thread for computing called\nthe main thread without asynchronous\ncode it would be impossible to multitask\nan easy way to demonstrate this is with\nset timeout which takes a function as an\nargument but won't call that function\nuntil X number of milliseconds have\nelapsed this is called a call back\nfunction because it gets in cued in the\nevent Loop only to be called back later\nwhen it's ready to execute on the main\nthread callback functions are very\ncommon but when they're overused and\nbecome too deeply nested it leads to a\nsituation called call back hell luckily\nthere are better ways to write a sync\ncode like a promise A promise is a\nwrapper for a value that's unknown right\nnow but that will resolve to a value in\nthe future like maybe a call to a third\nparty API that resolves to some data if\nsomething goes wrong the promise can\nreject to raise an error now the\nconsumer of the promise can use methods\nlike then and catch to handle these two\npossible outcomes or better yet you can\ndefine an async function that will\nautomatically return a promise then in\nthe body of the function we can pause\nits execution using the await keyword to\nwait for other promises to resolve this\nresults in nice readable code however in\norder to implement error handling you\nwant to wrap this code in a TR catch\nblock now as your code grows in\ncomplexity it won't all fit in a single\nfile luckily we can use modules to share\ncode between files by default all the\ncode in a file or module is private to\nthat file however if there's some code\nwe want to use elsewhere like a function\nwe can make it a default export this\nallows us to go into a different file\nand use an import statement to use the\nfunction there as well it's also\npossible to export multiple values from\na single file and then import them by\nname in the other file but often what\nyou'll do in JavaScript land is use code\nwritten by an entirely different\ndeveloper the largest JavaScript package\nmanager is npm when you install a\npackage from npm it downloads its code\ninto the node modules folder in your\nproject it also provides a package Json\nfile that will list out all the\ndependencies used in your project now\nlet's go into the code and assume we're\nbuilding a website on the web the code\nwill run in the browser which is based\non the document object model where the\nUI is represented as a tree of HTML\nelements or nodes the browser provides\napis to interact with these nodes with\nthe most important object being the\ndocument the document allows us to grab\nan individ ual HTML element using a\nmethod called query selector it takes a\nCSS selector as an argument and we'll\nfind the HTML element that has the same\nclass Name ID or tag name it returns an\ninstance of the element class which\nitself has a variety of properties and\nmethods to get information about it or\nchange its behavior in addition we can\ngrab multiple elements at the same time\nusing query selector all most\nimportantly we can listen to events that\nhappen to it like when a button is\nclicked with add event listener we can\nassign a function that will be called\nwhenever that event takes place much of\nweb development revolves around\nlistening to events and updating the UI\naccordingly however one thing that many\ndevelopers dislike about vanilla\nJavaScript is that it results in\nimperative code where the UI is mutated\ndirectly many developers now use\nfront-end Frameworks that produce\ndeclarative code where the UI is a\nfunction of its input data these\nlibraries encapsulate JavaScript HTML\nand CSS into components which are then\nused together to form a component tree\nto represent the UI most importantly\ninside a component data is reactive it\ncan be from the JavaScript directly to\nthe HTML that means anytime data changes\nthe UI will be updated automatically now\nafter you build a complete Javascript\napp you'll need to take all of your\nJavaScript files and combine them into a\nsingle bundle that can be used by the\nbrowser to handle this process\nefficiently you'll need a tool called a\nmodule bundler like V or webpack one\nproblem though is that sometimes this\nJavascript file can get too big which\naffects the page load performance and\nthis can be measured by the network\nwaterfall in your browser Dev tools\nluckily it's possible to split this\nJavaScript bundle into multiple files\nthen use Dynamic Imports in your code to\nonly import that JavaScript when it\nbecomes needed now JavaScript doesn't\njust run in the browser but also on the\nserver node.js is the most popular\nruntime and you can execute JavaScript\ncode at any time using the node command\nthis opens the door to Frameworks like\nelectron which combine node.js with a\nbrowser to create full stack desktop\napps with JavaScript or IOS and Android\napps with react native at this point\nyou've got 99 problems and JavaScript is\nevery single one of them if you want to\nmake life easier here use a tool like\ntypescript or ES lent that does static\nanalysis to improve your code quality\ncongratulations for reaching the end of\nJavaScript 101 if you want to go beyond\nthis video I just released a brand new\nJavaScript course on fireship IO this\nvideo is the introduction to that course\nwhich is followed by a deeper dive into\nthese Concepts then we work on some\nHands-On projects with a bunch of\nquizzes along the way thanks for\nwatching and I will see you in the next\none\n",
  "words": [
    "javascript",
    "wonderful",
    "programming",
    "language",
    "learn",
    "beginners",
    "also",
    "horrible",
    "programming",
    "language",
    "learn",
    "beginners",
    "one",
    "hand",
    "build",
    "almost",
    "anything",
    "get",
    "job",
    "anywhere",
    "master",
    "hand",
    "weird",
    "ugly",
    "surrounded",
    "dystopian",
    "wasteland",
    "frameworks",
    "libraries",
    "want",
    "sound",
    "like",
    "dick",
    "nothing",
    "uh",
    "says",
    "chart",
    "welcome",
    "javascript",
    "101",
    "next",
    "minutes",
    "learn",
    "101",
    "different",
    "things",
    "need",
    "know",
    "javascript",
    "like",
    "use",
    "use",
    "way",
    "end",
    "video",
    "able",
    "build",
    "website",
    "mobile",
    "app",
    "desktop",
    "app",
    "server",
    "operating",
    "system",
    "artificial",
    "intelligence",
    "kinds",
    "stuff",
    "build",
    "created",
    "1993",
    "brendan",
    "ike",
    "netscape",
    "time",
    "web",
    "browser",
    "cutting",
    "edge",
    "technology",
    "connected",
    "everybody",
    "planet",
    "via",
    "worldwide",
    "web",
    "gotten",
    "internet",
    "rather",
    "computer",
    "anything",
    "time",
    "websites",
    "completely",
    "static",
    "pure",
    "html",
    "javascript",
    "designed",
    "easyto",
    "use",
    "highle",
    "language",
    "help",
    "developers",
    "make",
    "websites",
    "interactive",
    "today",
    "arguably",
    "popular",
    "language",
    "world",
    "standard",
    "implementation",
    "called",
    "ecmascript",
    "default",
    "language",
    "web",
    "browsers",
    "fact",
    "code",
    "natively",
    "runs",
    "browser",
    "aside",
    "web",
    "assembly",
    "however",
    "browser",
    "runtime",
    "also",
    "run",
    "javascript",
    "code",
    "server",
    "thanks",
    "tools",
    "like",
    "dino",
    "name",
    "implies",
    "javascript",
    "scripting",
    "language",
    "means",
    "execute",
    "code",
    "fly",
    "opening",
    "console",
    "browser",
    "dev",
    "tools",
    "run",
    "code",
    "changes",
    "appearance",
    "website",
    "time",
    "interpreted",
    "line",
    "line",
    "opposed",
    "languages",
    "like",
    "c",
    "compiled",
    "ahead",
    "time",
    "however",
    "interpreted",
    "accurate",
    "term",
    "use",
    "hood",
    "browser",
    "engine",
    "called",
    "v8",
    "makes",
    "javascript",
    "run",
    "extremely",
    "fast",
    "taking",
    "code",
    "converting",
    "machine",
    "code",
    "process",
    "called",
    "time",
    "compilation",
    "none",
    "stuff",
    "really",
    "matters",
    "let",
    "jump",
    "code",
    "use",
    "javascript",
    "web",
    "page",
    "first",
    "need",
    "html",
    "document",
    "inside",
    "script",
    "tag",
    "write",
    "code",
    "inside",
    "tag",
    "directly",
    "reference",
    "external",
    "file",
    "source",
    "attribute",
    "say",
    "hello",
    "world",
    "use",
    "console",
    "log",
    "javascript",
    "tool",
    "printing",
    "standard",
    "output",
    "open",
    "html",
    "file",
    "browser",
    "see",
    "value",
    "printed",
    "dev",
    "tools",
    "several",
    "different",
    "ways",
    "define",
    "variables",
    "common",
    "today",
    "let",
    "start",
    "giving",
    "name",
    "normally",
    "camel",
    "case",
    "assign",
    "value",
    "dynamically",
    "typed",
    "language",
    "means",
    "data",
    "type",
    "annotations",
    "necessary",
    "case",
    "assigned",
    "number",
    "one",
    "seven",
    "primitive",
    "data",
    "types",
    "built",
    "language",
    "however",
    "need",
    "assign",
    "variable",
    "value",
    "right",
    "reassigned",
    "later",
    "without",
    "assignment",
    "automatically",
    "uses",
    "primitive",
    "value",
    "undefined",
    "default",
    "value",
    "however",
    "explicitly",
    "represent",
    "empty",
    "value",
    "using",
    "null",
    "later",
    "could",
    "reassign",
    "variable",
    "string",
    "entirely",
    "different",
    "data",
    "type",
    "perfectly",
    "okay",
    "value",
    "primitive",
    "inherit",
    "object",
    "class",
    "later",
    "right",
    "need",
    "talk",
    "semicolon",
    "technically",
    "semicolons",
    "optional",
    "leave",
    "javascript",
    "parser",
    "add",
    "automatically",
    "real",
    "life",
    "javascript",
    "developers",
    "often",
    "fight",
    "death",
    "whether",
    "use",
    "semicolons",
    "let",
    "way",
    "define",
    "variable",
    "another",
    "common",
    "option",
    "const",
    "used",
    "variables",
    "reassigned",
    "later",
    "original",
    "way",
    "declare",
    "variable",
    "var",
    "would",
    "recommend",
    "ignoring",
    "existence",
    "altogether",
    "although",
    "find",
    "wild",
    "reason",
    "many",
    "different",
    "ways",
    "define",
    "variables",
    "lexical",
    "environment",
    "determines",
    "variables",
    "work",
    "global",
    "scope",
    "right",
    "means",
    "variable",
    "available",
    "everywhere",
    "however",
    "define",
    "variable",
    "inside",
    "function",
    "becomes",
    "local",
    "function",
    "used",
    "outside",
    "finally",
    "statement",
    "like",
    "condition",
    "variables",
    "scoped",
    "inside",
    "braces",
    "block",
    "unless",
    "use",
    "var",
    "variable",
    "block",
    "scope",
    "case",
    "hoisted",
    "local",
    "scope",
    "function",
    "trust",
    "want",
    "weirdness",
    "life",
    "function",
    "keyword",
    "used",
    "called",
    "function",
    "definition",
    "statement",
    "functions",
    "one",
    "main",
    "building",
    "blocks",
    "javascript",
    "work",
    "taking",
    "input",
    "argument",
    "optionally",
    "return",
    "value",
    "used",
    "somewhere",
    "else",
    "functions",
    "objects",
    "means",
    "also",
    "used",
    "expressions",
    "allowing",
    "used",
    "variables",
    "construct",
    "higher",
    "order",
    "functions",
    "function",
    "used",
    "argument",
    "return",
    "value",
    "functions",
    "also",
    "nested",
    "create",
    "closure",
    "encapsulates",
    "data",
    "logic",
    "rest",
    "program",
    "normally",
    "call",
    "function",
    "variable",
    "primitive",
    "value",
    "stored",
    "call",
    "stack",
    "browser",
    "memory",
    "however",
    "create",
    "closure",
    "inner",
    "function",
    "still",
    "access",
    "variables",
    "outer",
    "function",
    "even",
    "initial",
    "function",
    "call",
    "happens",
    "javascript",
    "automatically",
    "stores",
    "data",
    "outer",
    "function",
    "heap",
    "memory",
    "persist",
    "function",
    "calls",
    "rarely",
    "think",
    "developer",
    "likely",
    "run",
    "keyword",
    "references",
    "object",
    "based",
    "function",
    "called",
    "called",
    "global",
    "scope",
    "references",
    "window",
    "object",
    "browser",
    "however",
    "function",
    "attached",
    "object",
    "called",
    "object",
    "reference",
    "object",
    "manually",
    "bind",
    "function",
    "object",
    "using",
    "bind",
    "method",
    "rather",
    "confusing",
    "modern",
    "javascript",
    "another",
    "way",
    "define",
    "functions",
    "using",
    "arrow",
    "syntax",
    "arrow",
    "functions",
    "value",
    "always",
    "anonymous",
    "makes",
    "ideal",
    "function",
    "expressions",
    "one",
    "last",
    "thing",
    "need",
    "know",
    "functions",
    "passing",
    "arguments",
    "primitive",
    "like",
    "number",
    "passed",
    "value",
    "means",
    "copy",
    "created",
    "original",
    "variable",
    "however",
    "argument",
    "object",
    "means",
    "stored",
    "heap",
    "passed",
    "reference",
    "means",
    "multiple",
    "parts",
    "code",
    "might",
    "mutating",
    "object",
    "speaking",
    "let",
    "talk",
    "objects",
    "easiest",
    "way",
    "define",
    "one",
    "object",
    "literal",
    "syntax",
    "using",
    "braces",
    "also",
    "object",
    "type",
    "created",
    "constructor",
    "using",
    "new",
    "keyword",
    "object",
    "contains",
    "collection",
    "key",
    "value",
    "pairs",
    "properties",
    "values",
    "interesting",
    "interesting",
    "objects",
    "inherit",
    "properties",
    "thanks",
    "mechanism",
    "called",
    "prototype",
    "chain",
    "every",
    "object",
    "private",
    "property",
    "links",
    "exactly",
    "one",
    "prototype",
    "differs",
    "inheritance",
    "found",
    "many",
    "languages",
    "dealing",
    "real",
    "objects",
    "take",
    "memory",
    "opposed",
    "abstract",
    "classes",
    "code",
    "confusing",
    "javascript",
    "supports",
    "programming",
    "class",
    "keyword",
    "however",
    "classes",
    "syntactic",
    "sugar",
    "prototypal",
    "inheritance",
    "objects",
    "class",
    "define",
    "constructor",
    "function",
    "called",
    "object",
    "first",
    "created",
    "also",
    "properties",
    "optionally",
    "create",
    "getters",
    "setters",
    "access",
    "easily",
    "encapsulates",
    "functions",
    "organizing",
    "methods",
    "object",
    "instance",
    "making",
    "global",
    "class",
    "name",
    "static",
    "keyword",
    "addition",
    "objects",
    "javascript",
    "bunch",
    "data",
    "structures",
    "like",
    "array",
    "holding",
    "dynamic",
    "collection",
    "indexed",
    "items",
    "set",
    "hold",
    "collection",
    "unique",
    "items",
    "map",
    "also",
    "holds",
    "key",
    "value",
    "pair",
    "like",
    "object",
    "easily",
    "looped",
    "along",
    "variety",
    "features",
    "also",
    "know",
    "point",
    "javascript",
    "garbage",
    "collected",
    "means",
    "automatically",
    "deallocate",
    "objects",
    "memory",
    "longer",
    "referenced",
    "code",
    "however",
    "map",
    "properties",
    "always",
    "referenced",
    "optimal",
    "weak",
    "map",
    "weak",
    "set",
    "contain",
    "properties",
    "garbage",
    "collected",
    "reduce",
    "memory",
    "usage",
    "basic",
    "idea",
    "javascript",
    "looks",
    "like",
    "let",
    "talk",
    "one",
    "interesting",
    "features",
    "event",
    "loop",
    "normally",
    "write",
    "code",
    "script",
    "executed",
    "synchronously",
    "line",
    "line",
    "means",
    "next",
    "line",
    "ca",
    "start",
    "previous",
    "line",
    "finishes",
    "event",
    "loop",
    "write",
    "synchronous",
    "code",
    "javascript",
    "runs",
    "separate",
    "threadpool",
    "rest",
    "application",
    "continues",
    "execute",
    "really",
    "important",
    "modern",
    "websites",
    "often",
    "multiple",
    "things",
    "going",
    "time",
    "access",
    "single",
    "thread",
    "computing",
    "called",
    "main",
    "thread",
    "without",
    "asynchronous",
    "code",
    "would",
    "impossible",
    "multitask",
    "easy",
    "way",
    "demonstrate",
    "set",
    "timeout",
    "takes",
    "function",
    "argument",
    "wo",
    "call",
    "function",
    "x",
    "number",
    "milliseconds",
    "elapsed",
    "called",
    "call",
    "back",
    "function",
    "gets",
    "cued",
    "event",
    "loop",
    "called",
    "back",
    "later",
    "ready",
    "execute",
    "main",
    "thread",
    "callback",
    "functions",
    "common",
    "overused",
    "become",
    "deeply",
    "nested",
    "leads",
    "situation",
    "called",
    "call",
    "back",
    "hell",
    "luckily",
    "better",
    "ways",
    "write",
    "sync",
    "code",
    "like",
    "promise",
    "promise",
    "wrapper",
    "value",
    "unknown",
    "right",
    "resolve",
    "value",
    "future",
    "like",
    "maybe",
    "call",
    "third",
    "party",
    "api",
    "resolves",
    "data",
    "something",
    "goes",
    "wrong",
    "promise",
    "reject",
    "raise",
    "error",
    "consumer",
    "promise",
    "use",
    "methods",
    "like",
    "catch",
    "handle",
    "two",
    "possible",
    "outcomes",
    "better",
    "yet",
    "define",
    "async",
    "function",
    "automatically",
    "return",
    "promise",
    "body",
    "function",
    "pause",
    "execution",
    "using",
    "await",
    "keyword",
    "wait",
    "promises",
    "resolve",
    "results",
    "nice",
    "readable",
    "code",
    "however",
    "order",
    "implement",
    "error",
    "handling",
    "want",
    "wrap",
    "code",
    "tr",
    "catch",
    "block",
    "code",
    "grows",
    "complexity",
    "wo",
    "fit",
    "single",
    "file",
    "luckily",
    "use",
    "modules",
    "share",
    "code",
    "files",
    "default",
    "code",
    "file",
    "module",
    "private",
    "file",
    "however",
    "code",
    "want",
    "use",
    "elsewhere",
    "like",
    "function",
    "make",
    "default",
    "export",
    "allows",
    "us",
    "go",
    "different",
    "file",
    "use",
    "import",
    "statement",
    "use",
    "function",
    "well",
    "also",
    "possible",
    "export",
    "multiple",
    "values",
    "single",
    "file",
    "import",
    "name",
    "file",
    "often",
    "javascript",
    "land",
    "use",
    "code",
    "written",
    "entirely",
    "different",
    "developer",
    "largest",
    "javascript",
    "package",
    "manager",
    "npm",
    "install",
    "package",
    "npm",
    "downloads",
    "code",
    "node",
    "modules",
    "folder",
    "project",
    "also",
    "provides",
    "package",
    "json",
    "file",
    "list",
    "dependencies",
    "used",
    "project",
    "let",
    "go",
    "code",
    "assume",
    "building",
    "website",
    "web",
    "code",
    "run",
    "browser",
    "based",
    "document",
    "object",
    "model",
    "ui",
    "represented",
    "tree",
    "html",
    "elements",
    "nodes",
    "browser",
    "provides",
    "apis",
    "interact",
    "nodes",
    "important",
    "object",
    "document",
    "document",
    "allows",
    "us",
    "grab",
    "individ",
    "ual",
    "html",
    "element",
    "using",
    "method",
    "called",
    "query",
    "selector",
    "takes",
    "css",
    "selector",
    "argument",
    "find",
    "html",
    "element",
    "class",
    "name",
    "id",
    "tag",
    "name",
    "returns",
    "instance",
    "element",
    "class",
    "variety",
    "properties",
    "methods",
    "get",
    "information",
    "change",
    "behavior",
    "addition",
    "grab",
    "multiple",
    "elements",
    "time",
    "using",
    "query",
    "selector",
    "importantly",
    "listen",
    "events",
    "happen",
    "like",
    "button",
    "clicked",
    "add",
    "event",
    "listener",
    "assign",
    "function",
    "called",
    "whenever",
    "event",
    "takes",
    "place",
    "much",
    "web",
    "development",
    "revolves",
    "around",
    "listening",
    "events",
    "updating",
    "ui",
    "accordingly",
    "however",
    "one",
    "thing",
    "many",
    "developers",
    "dislike",
    "vanilla",
    "javascript",
    "results",
    "imperative",
    "code",
    "ui",
    "mutated",
    "directly",
    "many",
    "developers",
    "use",
    "frameworks",
    "produce",
    "declarative",
    "code",
    "ui",
    "function",
    "input",
    "data",
    "libraries",
    "encapsulate",
    "javascript",
    "html",
    "css",
    "components",
    "used",
    "together",
    "form",
    "component",
    "tree",
    "represent",
    "ui",
    "importantly",
    "inside",
    "component",
    "data",
    "reactive",
    "javascript",
    "directly",
    "html",
    "means",
    "anytime",
    "data",
    "changes",
    "ui",
    "updated",
    "automatically",
    "build",
    "complete",
    "javascript",
    "app",
    "need",
    "take",
    "javascript",
    "files",
    "combine",
    "single",
    "bundle",
    "used",
    "browser",
    "handle",
    "process",
    "efficiently",
    "need",
    "tool",
    "called",
    "module",
    "bundler",
    "like",
    "v",
    "webpack",
    "one",
    "problem",
    "though",
    "sometimes",
    "javascript",
    "file",
    "get",
    "big",
    "affects",
    "page",
    "load",
    "performance",
    "measured",
    "network",
    "waterfall",
    "browser",
    "dev",
    "tools",
    "luckily",
    "possible",
    "split",
    "javascript",
    "bundle",
    "multiple",
    "files",
    "use",
    "dynamic",
    "imports",
    "code",
    "import",
    "javascript",
    "becomes",
    "needed",
    "javascript",
    "run",
    "browser",
    "also",
    "server",
    "popular",
    "runtime",
    "execute",
    "javascript",
    "code",
    "time",
    "using",
    "node",
    "command",
    "opens",
    "door",
    "frameworks",
    "like",
    "electron",
    "combine",
    "browser",
    "create",
    "full",
    "stack",
    "desktop",
    "apps",
    "javascript",
    "ios",
    "android",
    "apps",
    "react",
    "native",
    "point",
    "got",
    "99",
    "problems",
    "javascript",
    "every",
    "single",
    "one",
    "want",
    "make",
    "life",
    "easier",
    "use",
    "tool",
    "like",
    "typescript",
    "es",
    "lent",
    "static",
    "analysis",
    "improve",
    "code",
    "quality",
    "congratulations",
    "reaching",
    "end",
    "javascript",
    "101",
    "want",
    "go",
    "beyond",
    "video",
    "released",
    "brand",
    "new",
    "javascript",
    "course",
    "fireship",
    "io",
    "video",
    "introduction",
    "course",
    "followed",
    "deeper",
    "dive",
    "concepts",
    "work",
    "projects",
    "bunch",
    "quizzes",
    "along",
    "way",
    "thanks",
    "watching",
    "see",
    "next",
    "one"
  ],
  "keywords": [
    "javascript",
    "programming",
    "language",
    "learn",
    "also",
    "one",
    "build",
    "get",
    "frameworks",
    "want",
    "like",
    "101",
    "next",
    "different",
    "need",
    "know",
    "use",
    "way",
    "video",
    "website",
    "app",
    "server",
    "created",
    "time",
    "web",
    "browser",
    "websites",
    "static",
    "html",
    "developers",
    "make",
    "called",
    "default",
    "code",
    "however",
    "run",
    "thanks",
    "tools",
    "name",
    "means",
    "execute",
    "dev",
    "line",
    "let",
    "document",
    "inside",
    "tag",
    "write",
    "directly",
    "reference",
    "file",
    "tool",
    "value",
    "ways",
    "define",
    "variables",
    "common",
    "normally",
    "case",
    "assign",
    "data",
    "type",
    "number",
    "primitive",
    "variable",
    "right",
    "later",
    "automatically",
    "using",
    "object",
    "class",
    "talk",
    "life",
    "often",
    "used",
    "many",
    "work",
    "global",
    "scope",
    "function",
    "statement",
    "block",
    "keyword",
    "functions",
    "main",
    "argument",
    "return",
    "objects",
    "create",
    "call",
    "memory",
    "access",
    "multiple",
    "collection",
    "properties",
    "interesting",
    "methods",
    "set",
    "map",
    "event",
    "loop",
    "single",
    "thread",
    "takes",
    "back",
    "luckily",
    "promise",
    "possible",
    "files",
    "go",
    "import",
    "package",
    "ui",
    "element",
    "selector"
  ]
}