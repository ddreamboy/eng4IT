{
  "text": "so in this video we will learn about one\nof the popular devops platforms called\nazure devops we will see what it is and\nwhat you can do with azure devops\nplatform how to use it for your software\ndevelopment projects and generally how\nis this relevant for you as an engineer\nwe will see different features and use\ncases of azure devops how it all works\nand how you can implement the whole\nsoftware development and deployment\nlifecycle with it we will also review\nthe azure devops architecture and how it\nworks in the background and finally we\nwill also compare it with alternative\ntools and talk a bit about which of\nthese tools you need to learn for your\ncareer with so many alternative options\nso let's get started so first of all\nwhat is azure devops as the name\nsuggests it is a devops platform it is a\nsoftware as a service offering which was\ncreated to basically be a one-stop shop\nfor implementing\nall your devops processes for your\nproject and it had many names before it\nbecame known as azure devops it was\ncalled team foundation server then\nvisual studio team services so it had a\nbunch of other names before azure devops\nbecause it extended from existing\nservices and tools so it kind of got\nnames of these tools and even though it\nwas for the same purpose of implementing\nthe devops processes at that time devops\nwas still practiced by a smaller group\nof projects so that's why the name\ndevops never actually came up in the\nname of the platform itself however\nsince devops became more mainstream and\nas it is now used\nin\nlots of projects worldwide it was\nactually renamed to azure devops which\nis pretty smart because devops is\nalready a popular term everybody knows\nwhat it is so just by the name you know\nthat it's a platform for devops but it\nstill sounds too general because what is\na devops platform devops is many things\nright\nso what is a platform for devops and to\nanswer that question let's look at what\nazure devops is exactly and how it helps\nin implementing devops processes well\ndevops as i said is many things it is a\ncombination of concepts and tools and\nbasically anything that makes developing\nand releasing applications fast in an\nautomated way and with high quality\npossible so a project needs to implement\ndevops practices in order to achieve\nan efficient workflow if you want to go\nmore in detail about devops and learn it\nin more depth all its tools and concepts\netc i actually have a separate video on\nthat but shortly explained it's to make\nthe software development lifecycle as\nefficient as possible by fully or mostly\nautomating it and azure devops is\nbasically a technological implementation\nof that devops process which covers the\nwhole software development lifecycle and\nit has features for each part of this\nlifecycle so let's go through the steps\nor parts of that software development\nlifecycle and see how the various azure\ndevops features map to those parts\nnow what does a software development\nlifecycle include\nit's not just developing the application\nor writing the code it actually starts\nbefore you have\nwritten a single line of code\nbecause before coding any feature or an\nimprovement needs to be planned first\nright mostly by a product manager so the\nfirst step is to define what we are\ndeveloping and why are we developing it\nor in other words what's the business\nvalue behind it and there are several\nways of defining the workflow of how the\nproject team will work on the\napplication which roles they have within\nthe team how they will divide and split\nthe tasks etc\ntwo of the most popular workflows are\nagile and scrum many modern projects use\none of these approaches for their\ndevelopment so once you have created a\nproject in azure devops for your\napplication\nthe first feature you will probably use\nhere will be azure boards and depending\non which workflow you use for your\nprojects in your company generally like\nagile scrum or even some basic workflow\nyou can choose the corresponding board\nfor this project because as i said azure\ndevops or any other similar platform is\nbasically just a tool that gives you\nvarious features to implement whatever\nworkflows you have in your company\nso on azure boards you can create\ntickets or tasks for features\nimprovements or fixes for your\napplications as part of that agile or\nscrum processes you can assign it to\npeople to work on and you can also track\nprogress of those features or\nimprovements while they are being\ndeveloped now developers need to take\nthat planned task and actually develop\nit right in that process they may have\nquestions about the task so azure boards\ncan be used for communicating between\nthe developers testers product owner etc\nwithin the task description plus it can\nbe used to have an overview and\ntransparency over the status of the\nfeature as it is being developed who is\nworking on it what stage it is in what's\nits progress status has it been deployed\nalready etc\nnow the application code that developers\nare creating is also part of that life\ncycle actually the main part of it\nan azure repository feature is what you\ncan use in order to host that code\nnow of course you know the popular code\nrepositories like github gitlab\nbitbucket etc which are all based on git\nand that's basically an alternative to\nthose platforms so editor repository\nalso supports git which is the most\npopular version control tool so\ndevelopers can host their code in azure\nrepository and push their changes to it\nhowever the code repositories have\nactually evolved and became much more\nfeature reached and just hosting code is\none of the many features that they\nprovide so azure repository also it's\nnot just for hosting the code as part of\nthe devops life cycle developers\ncollaborate and work together to develop\nhigh quality code so in the repository\nas part of the git workflow\nyou have features such as pull requests\nbranches\nvarious collaboration features and so on\nso when developer starts a task they\ncreate a temporary branch when done they\ncreate a pull request and other\ndevelopers can review and comment on the\npull request they can communicate and\ncollaborate until the pull request is\ngood enough to be merged into the main\nbranch\nnow this is what's called a git workflow\nso basically how your team decides to\nwork on the code and to make sure that\nthe quality of code is very good\nand there are many git workflows or the\nway teams use git and all its features\nand different companies may use\ndifferent approaches or different\nworkflows but the key point here is that\nwith azure repository you have the tool\nthat enables you to implement whatever\ngit workflow you choose to work with\nplus note that the repository and\nbranches and the pull requests are all\nlinked back to the feature task so you\nsee the activity and status of\ndevelopment\nthere as well\nnow once the feature is developed and\npull request is approved and merged into\nthe main branch it needs to be released\nright that's the reason we're developing\nthe feature in the first place so we can\nrelease it and the end users can use it\nso in order to release our code changes\nwe first need to test it and package it\ninto an artifact which is a deliverable\nthat we can then deploy on the end\nenvironment and again devops is all\nabout automating things and workflows so\nthat it's fast and efficient so this\nprocess of testing and building the\napplication is done by an automated ci\nor continuous integration process and\nfor building the ci pipeline azure has\nwhat's called azure pipelines section\npipelines can be written in yemo which\nmeans you can have your pipeline script\nas part of your code\nthe main building blocks of azure build\npipelines are steps for example if we\nwant to test and package the application\nwe may have steps to run tests package\napplication build an image push that\nimage to an image repository\nso that later it can be deployed so each\nstep will execute a certain command\nto run the test to package the\napplication build a docker image\nand so on and this is an example\npipeline for building a.net application\nwhich is a common type of application\nbuilt on azure devops platform since\nasp.net is also part of the microsoft\ntechnology stack in the first two steps\nin this pipeline we test and build the\napplication with net commands and then\nbuild the image with a docker command\nand as you see we execute commands in\nscript attribute\nhowever we have another option for\nexecuting step commands instead of\nscripting it directly in yemo ourselves\nso in addition to writing the scripts\nyourself you can use what's called a\ntask instead\nso what is the task and how does it work\nin azure devops you have loads of tasks\nalready available to choose from\nfor different use cases\nand they can be selected and configured\nusing a ui\nyou can select the tasks directly from\nthe list of available tasks on the right\nside of the pipeline's yaml editor and\nconfigure any needed parameters for the\ntask and when you have the task\nconfigured basically you fill in and set\nall the parameters you can add the task\nback to your yaml pipeline it will be\nautomatically converted and edit as yaml\ncode and of course you can adjust or add\nany additional configuration to it\nso here for example if you look for\nasp.net task you will find one\nfor executing various.net commands like\ntest build etc\nand once configured you can add the test\ntask in place of the script you can do\nthe same for docker\nyou can search for docker tasks and find\nthe one with build and push commands and\nadd that task to your yaml pipeline and\nthis obviously can be convenient in many\nuse cases because you don't have to know\nthe commands exactly you don't even have\nto know or memorize the exact syntax for\nthe pipeline and you also don't have to\nscript the steps from scratch so this\nbasically gives you a simple um an\neasier high level approach to adding\nsteps to your pipeline now this is a\nvery simple scenario of a pipeline with\none single job that has all the steps\nbut in practice we often have more\ncomplex scenarios where we would need\nmultiple jobs in a single pipeline let's\nsay we want to execute the test step on\ntwo different operating systems we want\nto test the application on linux and\nwindows before we build it\nor let's say we test and deploy our\napplication on linux machine but we need\na database for our application which\nmust run on a windows machine for this\nuse case we would need two separate jobs\nnow i'm mentioning jobs but we haven't\nseen a job defined in our simple\npipeline yet so what is a job exactly\nwell all these steps actually belong to\none job and can be defined like this so\na job is basically a group of multiple\nsteps however when we have only one job\nin our pipeline we don't need to\nexplicitly define it that's why we could\nskip this in a simple pipeline but when\nwe have multiple jobs we need to define\nthem within\njobs attribute so we have multiple jobs\neach with multiple steps and now we can\nactually execute\neach job so all the steps within the job\non a different environment also called\nan agent so agent is a machine that will\nexecute the tasks or the steps of the\npipeline like running the test building\nan image etc and an agent is selected\nfrom an agent pool like pool of windows\nmachines or linux machines or mac os\nmachines etc\nand that's why we have a pull attribute\nin the job to define what kind of\nmachine we want to dedicate for that job\nand as you see inside the pool we can\ndefine if the end image that specifies\nwhat kind of operating system we want\nand you can also specify what version of\nthat operating system you want to run\nthat step or that job\nanother very common use case for\nmultiple jobs would be if we have a set\nof steps that can run in parallel so\nthat the build overall is faster this\ncould be running multiple tasks that can\nrun at the same time testing different\nparts of the application so they don't\nhave to wait for each other to complete\nthey can all\nrun at once\nso by creating multiple jobs for all\nthese tests you can actually run them in\nparallel on different environments\nso overall the main task of this build\npipeline is to test the code changes and\nif everything is fine produce an\nartifact that we can deploy\nbefore moving on i want to give a shout\nout to polumi who made this video\npossible polomi is a universal\ninfrastructure as koto and the cool\nthing about polomi is that you can use\nyour familiar programming languages\ntools and engineering practices to\ndeploy and manage your cloud\ninfrastructure you can use polami for\nany cloud but for azure specifically it\nhas the most complete infrastructure as\ncode support for the azure platform and\nis the only one with guaranteed same day\nsupport thanks to\nas your native provider polomi can\neasily integrate into any cicd platform\nfor azure devops they actually build a\ntask extension that lets you easily use\npolumi in your ci cd pipelines it can be\nused with azure pipeline's wizard ui or\nthe yaml configuration if you want to\nlearn more about polomi i actually have\na separate video on it where you can see\nfully how it works in practice with that\nlet's move on to azure artifacts\nnow traditionally depending on the\napplication programming language the\nartifact produced will be different\ncould be a jar or war file for a java\napplication a new ga file for net\na zip file tar file etc\nand for storing this kind of artifacts\nyou actually have another feature in\nazure devops called azure artifacts and\nazure artifacts actually currently\nsupports three types of artifacts which\nare maven packages nuka packages and npm\npackages so if you're developing and\nbuilding your application with any of\nthese tools then you can\nstore the artifacts produced in the\nbuild pipeline in the azure artifacts\nhowever in the modern software\ndevelopment we usually don't produce\nsuch artifacts anymore to deploy them\ninstead we create docker images is\nartifacts so no matter what language you\nuse\nwhat tools you use the artifact is\nalways the same which is a container\nimage so if you have 10 microservices\nall in different languages you can still\nproduce the same container image type of\nartifacts\nand images actually need a dedicated\ntype of repository so if your build\npipeline produces docker images you will\nconnect your azure devops to some docker\nregistry like docker hub azure container\nregistry etc and basically store your\nimages\nin that repository\nnow let's say we successfully built\nour application\ninto a docker image\nwe pushed it to a docker repository and\nnow it's time to deploy it to the end\nenvironment this would be the next stage\nof the pipeline which is also called the\ncd or continuous deployment or\ncontinuous delivery if you're not\ntotally new to devops you already know\nthat at the heart of devops there is the\nci cd pipeline which is ideally the\nfully automated process of taking the\ncode changes and deploying it all the\nway to the production\nby testing and validating all parts of\nthose changing from is the application\nfunctioning is it secure\netc and in that process we have these\ntwo main parts which is build stage and\nthe deploy stage again we haven't\ndefined a stage in the pipeline yet\nsince we only had one stage with all the\nbuild jobs when we have multiple stages\nhowever we need to configure that as\nwell so in order to create a complete ci\ncd pipeline we'll have the stages in our\nyaml pipeline script for building and\nfor deploying the application and by the\nway we can use a specific type of job in\nthe deploy stage which is called\ndeployment which is specifically meant\nfor deploy job and has some features for\nthat purpose for example it doesn't\ncheck out the code like job type does\netc now when we are deploying the new\napplication version usually we don't\ndirectly deploy to the production\ninstead we deploy to intermediate\nenvironments we test it extensively and\ngradually promote it to the production\nwhen we're almost 100 sure everything is\nfine common is to have development\ntesting\nand production environments so we can\nhave all these as separate stages\nafter the build stage deployed to\ndevelopment deployed to testing deployed\nto production\nnow the code for deployment to different\nenvironments will be pretty much the\nsame except for a couple of parameters\nso how can we avoid repeating the\npipeline configuration code in this case\nor maybe we have multiple applications\nthat all have the same pipeline logic\nso we don't want to write the same\npipeline configuration for each\napplication in our company instead\nideally we want to write that logic once\nproperly and then reuse it for all the\napplications that may need it in azure\ndevops pipelines yaml syntax we can\nactually put any code that is repeated\nand extract it in what's called a\ntemplate which is a separate file and\ncan be referenced in the pipeline\nusing template attribute and it can even\nbe configured with parameters so it's\nlike a reusable piece of configuration\nthat you can reference in different\npipelines\nso you can split your entire pipeline\ninto multiple individual files\nand these files can even be stored and\nmanaged in a dedicated separate\nrepository and as i said all the\npipelines can reference them and by the\nway you can have a template for a job a\nstep or stage so for any of these levels\nand you can also have templates within\nthe templates creating a hierarchy like\nthis\nnow when you have multiple\nenvironments for multiple applications\nit may become difficult to have an\noverview of what version of what branch\nis deployed where\nor when the code was last deployed to a\nspecific environment and so on and\nthat's where the environment feature\ncomes in which is part of azure\npipelines we can create environments in\nazure devops which will map to the\nactual deployment environments and then\nyou can configure in your pipeline which\nof these azure devops environments you\nwant to deploy to so you kind of have\nthis abstraction there and once the\napplication gets deployed to these\nvarious environments you can actually\nview the deployment history per\nenvironment so this can actually be some\nadditional valuable ui feature that\ngives you a better overview of your\ndeployments plus the deployment status\ncan also be linked back to the original\nticket so you have that additional\ninformation\nfor the feature or improvement to which\nstages or environments it has been\ndeployed to already which again can be\npretty convenient\nnow that deployment process or\ndeployment part of the pipeline which as\ni said is called cd or continuous\ndeployment\non azure devops can also be built as a\nseparate pipeline called release\npipeline interesting to note that many\nci cd platforms like jenkins gitlab csd\netc they have one pipeline for the whole\nprocess so we have one file and one ui\nunit for both\nin this case it will be split into\nseparate ci and cd pipelines so the way\nit works is that you select a build\npipeline that produces an artifact\nor you choose the already built artifact\nlocation or source and you create a\nrelease pipeline for that artifact note\nthat release pipelines in azure devops\ncan only be created using the ui so you\nhave no yaml file for that however the\npipeline structure itself is the same\nyou can create steps by choosing from\navailable tasks and also have multiple\nstages like deployment to development\ntesting and production so with release\npipelines you say when this build\npipeline completes and successfully\ncreates the docker image artifacts for\nexample trigger this release pipeline so\nthis way you chain them but as i quickly\nmentioned as the artifact source you can\nactually use not only the build pipeline\noutput but also already built artifact\nfrom various sources\nnow generally it's usually a better idea\nto always have one ci cd pipeline\ndefined in yemel instead of splitting\nthat into two plus you have all the\nbenefits of scripting your pipeline and\nmaking use of the reusable templates etc\nso the release pipelines is probably for\nmore specific use cases\nmaybe when you want to deploy existing\nartifacts from the artifact repository\ndirectly but as i said usually you\nshould have one pipeline for the\ncomplete cicd process\nnow an important part of an application\nrelease process is testing and you need\nto extensively test your code changes\nbefore deploying it to production and of\ncourse the more complex the application\nthe more tests you need so in azure\ndevops you actually have a dedicated\nsection for tests and here you can\nactually create a unified central view\nof all the test cases or many of your\ntest cases that need to be checked\nbefore giving a green light to\nproduction deployment and here you can\ncreate manual test cases or plans\nso when a new feature is being released\na tester can go through these steps and\ntest the application\nbut this could also be automated tests\nwhich will be executed as part of the ci\ncd process and the test reports from the\npipelines can be published and viewed\nhere\nand the main advantage of this is that\nyou have own centralized place with an\noverview of all the test plans whenever\nreleasing your application whether these\nare automated tests that were run in the\npipeline or manual tests from developers\nproduct owners testers etc and again you\ncan see the results of those test\nexecutions in your feature descriptions\nto decide whether you can release the\nchanges or not and you can even view and\nrun the test cases related to a feature\ndirectly from the convent board\nnow the pipelines execute tasks like\nrunning tests building an image etc and\nas i mentioned you can execute these\ntasks on different machines with\ndifferent operating systems\nso where are those machines exactly and\nhow do we get access to them\nto run our tasks and which machines and\nwhich environment do we get to answer\nthis question let's look at the azure\ndevops architecture on a high level\nat the core we have what's called the\nazure devops services a software as a\nservice or the managed online solution\nfrom azure and that's the main part\nwhere configurations are made pipelines\nand repositories are created and stored\netc so these are all dedicated machines\nfor those things but the pipeline tasks\nthemselves\nrun on separate machines called agents\nwhich are connected to the azure devops\nservices platform\nnow\nwho manages these agent machines well\nazure offers managed agents as well so\nyou can let microsoft actually manage\nthe whole setup for you including the\nmain service which holds the\nconfiguration plus the machines that\nactually execute the pipelines however\nin practice many companies need control\nover these machines plus they want to\nremain flexible and save costs maybe\nthey have these machines on premise or\neven on another cloud platform so they\nwant to make use of this so you have an\noption to configure your own agents and\nconnect them to the azure devops\nplatform or you can even have a mixture\nof both and this is actually pretty\nsimilar architecture to what other\nsimilar platforms like eclipse icd etc\nlook like so nothing really\nextraordinary here and since this is a\nmanaged service of course you have to\npay for these services and using for\nthese resources but azure devops does\nhave a free tier to get started with\nthat basically includes a certain amount\nof free resources that you can use to\nget started with including using managed\nagents for your pipeline jobs\ngreat so till now we actually saw\nvarious features of azure devops that\nmap to different parts of the\napplication development life cycle\nstarting from planning the task all the\nway to developing and deploying it to\nthe end environment\nnow throughout these processes we\nactually have tasks that we execute on\nother platforms for example when we\nbuild and push an image that needs to be\npushed or stored in an external image\nrepository right which is outside of\nazure devops or when we deploy to a\nremote server it will be on some cloud\nplatform like azure aws or even\non-premise or maybe we deploy to\nkubernetes cluster etc plus we may have\nthe pipeline connected to the external\ncode repository in github instead of\nusing the azure repository so for all\nthese tasks azure devops needs to\nconnect to those platforms right and\nnormally you have credentials like\nusername and password or access token\nfrom these platforms that you need to\nmake available in azure devops so that\nit can connect and authenticate itself\nwith those platforms now for those use\ncases in azure devops you have what's\ncalled service connections feature\nwhich makes managing access to external\nplatforms much easier\nfirst of all it's less configuration\neffort because you don't have to create\nthese credentials in the respective\nsurveys and then replicate in azure\ndevops instead the credentials are\ncreated automatically when azure devops\nconnects to those services and second\nadvantage is that it's more secure\nactually because service connections use\nshort-lived credentials which as i said\ngets generated on the fly when the\nconnection is established so you don't\nhave to worry about rotating or\ninvalidating credentials and so on\nand the service connections can be\ncreated in the project settings section\nso you have a separate section for\nadministering the project here you can\nmanage settings for all the features\nlike boards repositories pipelines test\nplans and artifacts plus as i mentioned\nyou can use self-hosted agents\nto run your pipelines and this is also\nwhere admins can configure these agents\nas well\nnow after learning all the various\nfeatures of azure devops and what the\nazure devops platform even is\nyou're probably wondering if this is so\ngreat why aren't all the projects using\nit or is it that great and what is the\ndifference from other similar platforms\nlike aws or gitlab etc and which one are\nyou supposed to learn should you become\nan expert in azure devops and ignore all\nother tools so let's look at comparison\nwith\nsimilar tools and answer the question\nabout which one to learn first let's\ncompare it with traditional ci cd tools\nlike jenkins or modern ones like argo cd\ncircle ci etc the main difference here\nis that these are exclusively ci cd\ntools right so jenkins circle ci etc\nthey're specifically built to\ncreate and manage cicd processes but\nazure devops actually strives to be the\ncomplete devops platform not only the ci\ncd so any feature you need for covering\nthe whole devops process including the\nci cd is in one place which can be\nextremely convenient as i said because\nin devops you need multiple tools for\ndifferent parts of the process\nlike jenkins for build code repository\njira board\nartifact repository etc\nwhich means you need to integrate these\ntools together so you have an effort in\nputting all these tools together\nlike connecting git repository with\njenkins connecting jenkins with jira to\nupdate status of feature tasks etc so\nwhen you use a platform that offers\nthese services in one place obviously\nit's more convenient because they are\nalready integrated\nand plus you get a better traceability\nmeaning you have links between all parts\nof the process feature task has links to\ncorresponding feature branch or pull\nrequests to its pipelines maybe the\nartifact that was produced with the\nversion and so on so you have a better\noverview because you have linked data\nfrom all features a direct comparison to\nazure devops is however gitlab because\ngitlab which started off as a git\nrepository actually made a turn and\ndecided to create an all-in-one devops\nplatform as well\nand to be honest many of the features\nand use cases are pretty similar between\ngitlab and azure devops or generally how\nthe things work\nand if you're interested i actually have\na crash course as well as full course on\ngitlab ci cd\nfor building complete devops processes\nwith it\nyou can also compare it with aws however\naws is way bigger and way more\nencompassing than just the devops\nprocesses\nand here i want to mention an\ninteresting note about comparing azure\nwith aws and where azure devops platform\nactually plays a role in that as we know\nazure and aws are both cloud platforms\nwhere you can create and configure your\ncomplete virtual infrastructure create\nvirtual servers and use a bunch of other\nservices as well but while aws has all\nits services on one place with one\naccount azure platform and azure devops\nplatforms are more separated so you have\ntwo separate accounts for them and you\ncan manage them separately and even use\neach platform without the other however\nthey are both obviously microsoft\nproducts part of the same ecosystem so\nthey have some integration so\nessentially they are still connected so\nfor example the hosted runners for azure\ndevops run on azure platform as well as\nthe code on azure devops repositories\nare also hosted on azure platform and\nyou can also integrate the azure active\ndirectory which is one of the azure\nservices in your azure devops account so\nthey're two separate platforms but\nintegrated with each other for various\nuse cases and that means when you want\nto deploy to azure virtual machines\nazure app services etc or azure\nkubernetes service from azure devops you\nbasically have to connect to just like\nyou would to any other cloud platform to\ndeploy to it and an interesting use case\nin many projects many companies is that\nprojects who use azure devops actually\ndeploy to multiple\ninfrastructure environments or cloud\nplatforms so they may deploy from azure\ndevops pipeline to azure\nvirtual machines and aws virtual\nmachines and that's probably the main\nexample that may answer the question of\nwhich technology you should learn\nor whether you should learn azure devops\nand the answer is\nusually companies that already use azure\nplatform or already use\nmicrosoft services and products they\nactually tend to use azure devops as\nwell however in terms of cloud\ntechnologies um or cloud platforms aws\nis still the winner and number one in\nthis category and on the other end in\nterms of the cicd tools themselves\nusually the open source solutions like\ngitlab scarcity or jenkins etc are\npreferred\nrather than using proprietary services\nlike azure devops and very often you\nhave a case where company already has\ntools and processes it has been using\nfor years like they work with jira and\njenkins and aws platform they use\ninternal docker registry and github\nrepository so they want and they can't\njust move everything to azure device so\nas an engineer when learning new tools\none of the things you should ask\nyourself is\nwhen you get a job what tools you will\nmost likely be working with based on\nwhich tools are mostly used by companies\ntoday and as i said tools like jenkins\naws platform gitlab or github platforms\netc in devops are still the most\ncommonly used ones\nand the leaders in their own categories\nso you should definitely look at those\ntools first and since many viewers\nactually ask that that's the main reason\nwhy in our devops educational bootcamp\nwe teach exactly those technologies\nwhich are the most popular and most used\nin each category even if there are\ncooler or better alternative tools\nfor those technologies\nbut again some companies that already\nuse microsoft services may decide to go\nfor azure devops or you may be in a\nproject or interviewing for a job where\nyou need this knowledge in which case of\ncourse you should learn and get\nexpertise in azure devops now i hope i\nwas able to give you clarity on what\nazure devops is and give you all the\nneeded information to get started with\nit i will add any relevant links in the\nvideo description so you can check them\nout there as well as share in the\ncomment section\nwhether you already have experience or\nhave worked with azure devops or what is\nyour experience with any comparative\ntools\nand which one you would recommend\nand with that thank you for watching and\nsee you in the next video\n",
  "words": [
    "video",
    "learn",
    "one",
    "popular",
    "devops",
    "platforms",
    "called",
    "azure",
    "devops",
    "see",
    "azure",
    "devops",
    "platform",
    "use",
    "software",
    "development",
    "projects",
    "generally",
    "relevant",
    "engineer",
    "see",
    "different",
    "features",
    "use",
    "cases",
    "azure",
    "devops",
    "works",
    "implement",
    "whole",
    "software",
    "development",
    "deployment",
    "lifecycle",
    "also",
    "review",
    "azure",
    "devops",
    "architecture",
    "works",
    "background",
    "finally",
    "also",
    "compare",
    "alternative",
    "tools",
    "talk",
    "bit",
    "tools",
    "need",
    "learn",
    "career",
    "many",
    "alternative",
    "options",
    "let",
    "get",
    "started",
    "first",
    "azure",
    "devops",
    "name",
    "suggests",
    "devops",
    "platform",
    "software",
    "service",
    "offering",
    "created",
    "basically",
    "shop",
    "implementing",
    "devops",
    "processes",
    "project",
    "many",
    "names",
    "became",
    "known",
    "azure",
    "devops",
    "called",
    "team",
    "foundation",
    "server",
    "visual",
    "studio",
    "team",
    "services",
    "bunch",
    "names",
    "azure",
    "devops",
    "extended",
    "existing",
    "services",
    "tools",
    "kind",
    "got",
    "names",
    "tools",
    "even",
    "though",
    "purpose",
    "implementing",
    "devops",
    "processes",
    "time",
    "devops",
    "still",
    "practiced",
    "smaller",
    "group",
    "projects",
    "name",
    "devops",
    "never",
    "actually",
    "came",
    "name",
    "platform",
    "however",
    "since",
    "devops",
    "became",
    "mainstream",
    "used",
    "lots",
    "projects",
    "worldwide",
    "actually",
    "renamed",
    "azure",
    "devops",
    "pretty",
    "smart",
    "devops",
    "already",
    "popular",
    "term",
    "everybody",
    "knows",
    "name",
    "know",
    "platform",
    "devops",
    "still",
    "sounds",
    "general",
    "devops",
    "platform",
    "devops",
    "many",
    "things",
    "right",
    "platform",
    "devops",
    "answer",
    "question",
    "let",
    "look",
    "azure",
    "devops",
    "exactly",
    "helps",
    "implementing",
    "devops",
    "processes",
    "well",
    "devops",
    "said",
    "many",
    "things",
    "combination",
    "concepts",
    "tools",
    "basically",
    "anything",
    "makes",
    "developing",
    "releasing",
    "applications",
    "fast",
    "automated",
    "way",
    "high",
    "quality",
    "possible",
    "project",
    "needs",
    "implement",
    "devops",
    "practices",
    "order",
    "achieve",
    "efficient",
    "workflow",
    "want",
    "go",
    "detail",
    "devops",
    "learn",
    "depth",
    "tools",
    "concepts",
    "etc",
    "actually",
    "separate",
    "video",
    "shortly",
    "explained",
    "make",
    "software",
    "development",
    "lifecycle",
    "efficient",
    "possible",
    "fully",
    "mostly",
    "automating",
    "azure",
    "devops",
    "basically",
    "technological",
    "implementation",
    "devops",
    "process",
    "covers",
    "whole",
    "software",
    "development",
    "lifecycle",
    "features",
    "part",
    "lifecycle",
    "let",
    "go",
    "steps",
    "parts",
    "software",
    "development",
    "lifecycle",
    "see",
    "various",
    "azure",
    "devops",
    "features",
    "map",
    "parts",
    "software",
    "development",
    "lifecycle",
    "include",
    "developing",
    "application",
    "writing",
    "code",
    "actually",
    "starts",
    "written",
    "single",
    "line",
    "code",
    "coding",
    "feature",
    "improvement",
    "needs",
    "planned",
    "first",
    "right",
    "mostly",
    "product",
    "manager",
    "first",
    "step",
    "define",
    "developing",
    "developing",
    "words",
    "business",
    "value",
    "behind",
    "several",
    "ways",
    "defining",
    "workflow",
    "project",
    "team",
    "work",
    "application",
    "roles",
    "within",
    "team",
    "divide",
    "split",
    "tasks",
    "etc",
    "two",
    "popular",
    "workflows",
    "agile",
    "scrum",
    "many",
    "modern",
    "projects",
    "use",
    "one",
    "approaches",
    "development",
    "created",
    "project",
    "azure",
    "devops",
    "application",
    "first",
    "feature",
    "probably",
    "use",
    "azure",
    "boards",
    "depending",
    "workflow",
    "use",
    "projects",
    "company",
    "generally",
    "like",
    "agile",
    "scrum",
    "even",
    "basic",
    "workflow",
    "choose",
    "corresponding",
    "board",
    "project",
    "said",
    "azure",
    "devops",
    "similar",
    "platform",
    "basically",
    "tool",
    "gives",
    "various",
    "features",
    "implement",
    "whatever",
    "workflows",
    "company",
    "azure",
    "boards",
    "create",
    "tickets",
    "tasks",
    "features",
    "improvements",
    "fixes",
    "applications",
    "part",
    "agile",
    "scrum",
    "processes",
    "assign",
    "people",
    "work",
    "also",
    "track",
    "progress",
    "features",
    "improvements",
    "developed",
    "developers",
    "need",
    "take",
    "planned",
    "task",
    "actually",
    "develop",
    "right",
    "process",
    "may",
    "questions",
    "task",
    "azure",
    "boards",
    "used",
    "communicating",
    "developers",
    "testers",
    "product",
    "owner",
    "etc",
    "within",
    "task",
    "description",
    "plus",
    "used",
    "overview",
    "transparency",
    "status",
    "feature",
    "developed",
    "working",
    "stage",
    "progress",
    "status",
    "deployed",
    "already",
    "etc",
    "application",
    "code",
    "developers",
    "creating",
    "also",
    "part",
    "life",
    "cycle",
    "actually",
    "main",
    "part",
    "azure",
    "repository",
    "feature",
    "use",
    "order",
    "host",
    "code",
    "course",
    "know",
    "popular",
    "code",
    "repositories",
    "like",
    "github",
    "gitlab",
    "bitbucket",
    "etc",
    "based",
    "git",
    "basically",
    "alternative",
    "platforms",
    "editor",
    "repository",
    "also",
    "supports",
    "git",
    "popular",
    "version",
    "control",
    "tool",
    "developers",
    "host",
    "code",
    "azure",
    "repository",
    "push",
    "changes",
    "however",
    "code",
    "repositories",
    "actually",
    "evolved",
    "became",
    "much",
    "feature",
    "reached",
    "hosting",
    "code",
    "one",
    "many",
    "features",
    "provide",
    "azure",
    "repository",
    "also",
    "hosting",
    "code",
    "part",
    "devops",
    "life",
    "cycle",
    "developers",
    "collaborate",
    "work",
    "together",
    "develop",
    "high",
    "quality",
    "code",
    "repository",
    "part",
    "git",
    "workflow",
    "features",
    "pull",
    "requests",
    "branches",
    "various",
    "collaboration",
    "features",
    "developer",
    "starts",
    "task",
    "create",
    "temporary",
    "branch",
    "done",
    "create",
    "pull",
    "request",
    "developers",
    "review",
    "comment",
    "pull",
    "request",
    "communicate",
    "collaborate",
    "pull",
    "request",
    "good",
    "enough",
    "merged",
    "main",
    "branch",
    "called",
    "git",
    "workflow",
    "basically",
    "team",
    "decides",
    "work",
    "code",
    "make",
    "sure",
    "quality",
    "code",
    "good",
    "many",
    "git",
    "workflows",
    "way",
    "teams",
    "use",
    "git",
    "features",
    "different",
    "companies",
    "may",
    "use",
    "different",
    "approaches",
    "different",
    "workflows",
    "key",
    "point",
    "azure",
    "repository",
    "tool",
    "enables",
    "implement",
    "whatever",
    "git",
    "workflow",
    "choose",
    "work",
    "plus",
    "note",
    "repository",
    "branches",
    "pull",
    "requests",
    "linked",
    "back",
    "feature",
    "task",
    "see",
    "activity",
    "status",
    "development",
    "well",
    "feature",
    "developed",
    "pull",
    "request",
    "approved",
    "merged",
    "main",
    "branch",
    "needs",
    "released",
    "right",
    "reason",
    "developing",
    "feature",
    "first",
    "place",
    "release",
    "end",
    "users",
    "use",
    "order",
    "release",
    "code",
    "changes",
    "first",
    "need",
    "test",
    "package",
    "artifact",
    "deliverable",
    "deploy",
    "end",
    "environment",
    "devops",
    "automating",
    "things",
    "workflows",
    "fast",
    "efficient",
    "process",
    "testing",
    "building",
    "application",
    "done",
    "automated",
    "ci",
    "continuous",
    "integration",
    "process",
    "building",
    "ci",
    "pipeline",
    "azure",
    "called",
    "azure",
    "pipelines",
    "section",
    "pipelines",
    "written",
    "yemo",
    "means",
    "pipeline",
    "script",
    "part",
    "code",
    "main",
    "building",
    "blocks",
    "azure",
    "build",
    "pipelines",
    "steps",
    "example",
    "want",
    "test",
    "package",
    "application",
    "may",
    "steps",
    "run",
    "tests",
    "package",
    "application",
    "build",
    "image",
    "push",
    "image",
    "image",
    "repository",
    "later",
    "deployed",
    "step",
    "execute",
    "certain",
    "command",
    "run",
    "test",
    "package",
    "application",
    "build",
    "docker",
    "image",
    "example",
    "pipeline",
    "building",
    "application",
    "common",
    "type",
    "application",
    "built",
    "azure",
    "devops",
    "platform",
    "since",
    "also",
    "part",
    "microsoft",
    "technology",
    "stack",
    "first",
    "two",
    "steps",
    "pipeline",
    "test",
    "build",
    "application",
    "net",
    "commands",
    "build",
    "image",
    "docker",
    "command",
    "see",
    "execute",
    "commands",
    "script",
    "attribute",
    "however",
    "another",
    "option",
    "executing",
    "step",
    "commands",
    "instead",
    "scripting",
    "directly",
    "yemo",
    "addition",
    "writing",
    "scripts",
    "use",
    "called",
    "task",
    "instead",
    "task",
    "work",
    "azure",
    "devops",
    "loads",
    "tasks",
    "already",
    "available",
    "choose",
    "different",
    "use",
    "cases",
    "selected",
    "configured",
    "using",
    "ui",
    "select",
    "tasks",
    "directly",
    "list",
    "available",
    "tasks",
    "right",
    "side",
    "pipeline",
    "yaml",
    "editor",
    "configure",
    "needed",
    "parameters",
    "task",
    "task",
    "configured",
    "basically",
    "fill",
    "set",
    "parameters",
    "add",
    "task",
    "back",
    "yaml",
    "pipeline",
    "automatically",
    "converted",
    "edit",
    "yaml",
    "code",
    "course",
    "adjust",
    "add",
    "additional",
    "configuration",
    "example",
    "look",
    "task",
    "find",
    "one",
    "executing",
    "commands",
    "like",
    "test",
    "build",
    "etc",
    "configured",
    "add",
    "test",
    "task",
    "place",
    "script",
    "docker",
    "search",
    "docker",
    "tasks",
    "find",
    "one",
    "build",
    "push",
    "commands",
    "add",
    "task",
    "yaml",
    "pipeline",
    "obviously",
    "convenient",
    "many",
    "use",
    "cases",
    "know",
    "commands",
    "exactly",
    "even",
    "know",
    "memorize",
    "exact",
    "syntax",
    "pipeline",
    "also",
    "script",
    "steps",
    "scratch",
    "basically",
    "gives",
    "simple",
    "um",
    "easier",
    "high",
    "level",
    "approach",
    "adding",
    "steps",
    "pipeline",
    "simple",
    "scenario",
    "pipeline",
    "one",
    "single",
    "job",
    "steps",
    "practice",
    "often",
    "complex",
    "scenarios",
    "would",
    "need",
    "multiple",
    "jobs",
    "single",
    "pipeline",
    "let",
    "say",
    "want",
    "execute",
    "test",
    "step",
    "two",
    "different",
    "operating",
    "systems",
    "want",
    "test",
    "application",
    "linux",
    "windows",
    "build",
    "let",
    "say",
    "test",
    "deploy",
    "application",
    "linux",
    "machine",
    "need",
    "database",
    "application",
    "must",
    "run",
    "windows",
    "machine",
    "use",
    "case",
    "would",
    "need",
    "two",
    "separate",
    "jobs",
    "mentioning",
    "jobs",
    "seen",
    "job",
    "defined",
    "simple",
    "pipeline",
    "yet",
    "job",
    "exactly",
    "well",
    "steps",
    "actually",
    "belong",
    "one",
    "job",
    "defined",
    "like",
    "job",
    "basically",
    "group",
    "multiple",
    "steps",
    "however",
    "one",
    "job",
    "pipeline",
    "need",
    "explicitly",
    "define",
    "could",
    "skip",
    "simple",
    "pipeline",
    "multiple",
    "jobs",
    "need",
    "define",
    "within",
    "jobs",
    "attribute",
    "multiple",
    "jobs",
    "multiple",
    "steps",
    "actually",
    "execute",
    "job",
    "steps",
    "within",
    "job",
    "different",
    "environment",
    "also",
    "called",
    "agent",
    "agent",
    "machine",
    "execute",
    "tasks",
    "steps",
    "pipeline",
    "like",
    "running",
    "test",
    "building",
    "image",
    "etc",
    "agent",
    "selected",
    "agent",
    "pool",
    "like",
    "pool",
    "windows",
    "machines",
    "linux",
    "machines",
    "mac",
    "os",
    "machines",
    "etc",
    "pull",
    "attribute",
    "job",
    "define",
    "kind",
    "machine",
    "want",
    "dedicate",
    "job",
    "see",
    "inside",
    "pool",
    "define",
    "end",
    "image",
    "specifies",
    "kind",
    "operating",
    "system",
    "want",
    "also",
    "specify",
    "version",
    "operating",
    "system",
    "want",
    "run",
    "step",
    "job",
    "another",
    "common",
    "use",
    "case",
    "multiple",
    "jobs",
    "would",
    "set",
    "steps",
    "run",
    "parallel",
    "build",
    "overall",
    "faster",
    "could",
    "running",
    "multiple",
    "tasks",
    "run",
    "time",
    "testing",
    "different",
    "parts",
    "application",
    "wait",
    "complete",
    "run",
    "creating",
    "multiple",
    "jobs",
    "tests",
    "actually",
    "run",
    "parallel",
    "different",
    "environments",
    "overall",
    "main",
    "task",
    "build",
    "pipeline",
    "test",
    "code",
    "changes",
    "everything",
    "fine",
    "produce",
    "artifact",
    "deploy",
    "moving",
    "want",
    "give",
    "shout",
    "polumi",
    "made",
    "video",
    "possible",
    "polomi",
    "universal",
    "infrastructure",
    "koto",
    "cool",
    "thing",
    "polomi",
    "use",
    "familiar",
    "programming",
    "languages",
    "tools",
    "engineering",
    "practices",
    "deploy",
    "manage",
    "cloud",
    "infrastructure",
    "use",
    "polami",
    "cloud",
    "azure",
    "specifically",
    "complete",
    "infrastructure",
    "code",
    "support",
    "azure",
    "platform",
    "one",
    "guaranteed",
    "day",
    "support",
    "thanks",
    "native",
    "provider",
    "polomi",
    "easily",
    "integrate",
    "cicd",
    "platform",
    "azure",
    "devops",
    "actually",
    "build",
    "task",
    "extension",
    "lets",
    "easily",
    "use",
    "polumi",
    "ci",
    "cd",
    "pipelines",
    "used",
    "azure",
    "pipeline",
    "wizard",
    "ui",
    "yaml",
    "configuration",
    "want",
    "learn",
    "polomi",
    "actually",
    "separate",
    "video",
    "see",
    "fully",
    "works",
    "practice",
    "let",
    "move",
    "azure",
    "artifacts",
    "traditionally",
    "depending",
    "application",
    "programming",
    "language",
    "artifact",
    "produced",
    "different",
    "could",
    "jar",
    "war",
    "file",
    "java",
    "application",
    "new",
    "ga",
    "file",
    "net",
    "zip",
    "file",
    "tar",
    "file",
    "etc",
    "storing",
    "kind",
    "artifacts",
    "actually",
    "another",
    "feature",
    "azure",
    "devops",
    "called",
    "azure",
    "artifacts",
    "azure",
    "artifacts",
    "actually",
    "currently",
    "supports",
    "three",
    "types",
    "artifacts",
    "maven",
    "packages",
    "nuka",
    "packages",
    "npm",
    "packages",
    "developing",
    "building",
    "application",
    "tools",
    "store",
    "artifacts",
    "produced",
    "build",
    "pipeline",
    "azure",
    "artifacts",
    "however",
    "modern",
    "software",
    "development",
    "usually",
    "produce",
    "artifacts",
    "anymore",
    "deploy",
    "instead",
    "create",
    "docker",
    "images",
    "artifacts",
    "matter",
    "language",
    "use",
    "tools",
    "use",
    "artifact",
    "always",
    "container",
    "image",
    "10",
    "microservices",
    "different",
    "languages",
    "still",
    "produce",
    "container",
    "image",
    "type",
    "artifacts",
    "images",
    "actually",
    "need",
    "dedicated",
    "type",
    "repository",
    "build",
    "pipeline",
    "produces",
    "docker",
    "images",
    "connect",
    "azure",
    "devops",
    "docker",
    "registry",
    "like",
    "docker",
    "hub",
    "azure",
    "container",
    "registry",
    "etc",
    "basically",
    "store",
    "images",
    "repository",
    "let",
    "say",
    "successfully",
    "built",
    "application",
    "docker",
    "image",
    "pushed",
    "docker",
    "repository",
    "time",
    "deploy",
    "end",
    "environment",
    "would",
    "next",
    "stage",
    "pipeline",
    "also",
    "called",
    "cd",
    "continuous",
    "deployment",
    "continuous",
    "delivery",
    "totally",
    "new",
    "devops",
    "already",
    "know",
    "heart",
    "devops",
    "ci",
    "cd",
    "pipeline",
    "ideally",
    "fully",
    "automated",
    "process",
    "taking",
    "code",
    "changes",
    "deploying",
    "way",
    "production",
    "testing",
    "validating",
    "parts",
    "changing",
    "application",
    "functioning",
    "secure",
    "etc",
    "process",
    "two",
    "main",
    "parts",
    "build",
    "stage",
    "deploy",
    "stage",
    "defined",
    "stage",
    "pipeline",
    "yet",
    "since",
    "one",
    "stage",
    "build",
    "jobs",
    "multiple",
    "stages",
    "however",
    "need",
    "configure",
    "well",
    "order",
    "create",
    "complete",
    "ci",
    "cd",
    "pipeline",
    "stages",
    "yaml",
    "pipeline",
    "script",
    "building",
    "deploying",
    "application",
    "way",
    "use",
    "specific",
    "type",
    "job",
    "deploy",
    "stage",
    "called",
    "deployment",
    "specifically",
    "meant",
    "deploy",
    "job",
    "features",
    "purpose",
    "example",
    "check",
    "code",
    "like",
    "job",
    "type",
    "etc",
    "deploying",
    "new",
    "application",
    "version",
    "usually",
    "directly",
    "deploy",
    "production",
    "instead",
    "deploy",
    "intermediate",
    "environments",
    "test",
    "extensively",
    "gradually",
    "promote",
    "production",
    "almost",
    "100",
    "sure",
    "everything",
    "fine",
    "common",
    "development",
    "testing",
    "production",
    "environments",
    "separate",
    "stages",
    "build",
    "stage",
    "deployed",
    "development",
    "deployed",
    "testing",
    "deployed",
    "production",
    "code",
    "deployment",
    "different",
    "environments",
    "pretty",
    "much",
    "except",
    "couple",
    "parameters",
    "avoid",
    "repeating",
    "pipeline",
    "configuration",
    "code",
    "case",
    "maybe",
    "multiple",
    "applications",
    "pipeline",
    "logic",
    "want",
    "write",
    "pipeline",
    "configuration",
    "application",
    "company",
    "instead",
    "ideally",
    "want",
    "write",
    "logic",
    "properly",
    "reuse",
    "applications",
    "may",
    "need",
    "azure",
    "devops",
    "pipelines",
    "yaml",
    "syntax",
    "actually",
    "put",
    "code",
    "repeated",
    "extract",
    "called",
    "template",
    "separate",
    "file",
    "referenced",
    "pipeline",
    "using",
    "template",
    "attribute",
    "even",
    "configured",
    "parameters",
    "like",
    "reusable",
    "piece",
    "configuration",
    "reference",
    "different",
    "pipelines",
    "split",
    "entire",
    "pipeline",
    "multiple",
    "individual",
    "files",
    "files",
    "even",
    "stored",
    "managed",
    "dedicated",
    "separate",
    "repository",
    "said",
    "pipelines",
    "reference",
    "way",
    "template",
    "job",
    "step",
    "stage",
    "levels",
    "also",
    "templates",
    "within",
    "templates",
    "creating",
    "hierarchy",
    "like",
    "multiple",
    "environments",
    "multiple",
    "applications",
    "may",
    "become",
    "difficult",
    "overview",
    "version",
    "branch",
    "deployed",
    "code",
    "last",
    "deployed",
    "specific",
    "environment",
    "environment",
    "feature",
    "comes",
    "part",
    "azure",
    "pipelines",
    "create",
    "environments",
    "azure",
    "devops",
    "map",
    "actual",
    "deployment",
    "environments",
    "configure",
    "pipeline",
    "azure",
    "devops",
    "environments",
    "want",
    "deploy",
    "kind",
    "abstraction",
    "application",
    "gets",
    "deployed",
    "various",
    "environments",
    "actually",
    "view",
    "deployment",
    "history",
    "per",
    "environment",
    "actually",
    "additional",
    "valuable",
    "ui",
    "feature",
    "gives",
    "better",
    "overview",
    "deployments",
    "plus",
    "deployment",
    "status",
    "also",
    "linked",
    "back",
    "original",
    "ticket",
    "additional",
    "information",
    "feature",
    "improvement",
    "stages",
    "environments",
    "deployed",
    "already",
    "pretty",
    "convenient",
    "deployment",
    "process",
    "deployment",
    "part",
    "pipeline",
    "said",
    "called",
    "cd",
    "continuous",
    "deployment",
    "azure",
    "devops",
    "also",
    "built",
    "separate",
    "pipeline",
    "called",
    "release",
    "pipeline",
    "interesting",
    "note",
    "many",
    "ci",
    "cd",
    "platforms",
    "like",
    "jenkins",
    "gitlab",
    "csd",
    "etc",
    "one",
    "pipeline",
    "whole",
    "process",
    "one",
    "file",
    "one",
    "ui",
    "unit",
    "case",
    "split",
    "separate",
    "ci",
    "cd",
    "pipelines",
    "way",
    "works",
    "select",
    "build",
    "pipeline",
    "produces",
    "artifact",
    "choose",
    "already",
    "built",
    "artifact",
    "location",
    "source",
    "create",
    "release",
    "pipeline",
    "artifact",
    "note",
    "release",
    "pipelines",
    "azure",
    "devops",
    "created",
    "using",
    "ui",
    "yaml",
    "file",
    "however",
    "pipeline",
    "structure",
    "create",
    "steps",
    "choosing",
    "available",
    "tasks",
    "also",
    "multiple",
    "stages",
    "like",
    "deployment",
    "development",
    "testing",
    "production",
    "release",
    "pipelines",
    "say",
    "build",
    "pipeline",
    "completes",
    "successfully",
    "creates",
    "docker",
    "image",
    "artifacts",
    "example",
    "trigger",
    "release",
    "pipeline",
    "way",
    "chain",
    "quickly",
    "mentioned",
    "artifact",
    "source",
    "actually",
    "use",
    "build",
    "pipeline",
    "output",
    "also",
    "already",
    "built",
    "artifact",
    "various",
    "sources",
    "generally",
    "usually",
    "better",
    "idea",
    "always",
    "one",
    "ci",
    "cd",
    "pipeline",
    "defined",
    "yemel",
    "instead",
    "splitting",
    "two",
    "plus",
    "benefits",
    "scripting",
    "pipeline",
    "making",
    "use",
    "reusable",
    "templates",
    "etc",
    "release",
    "pipelines",
    "probably",
    "specific",
    "use",
    "cases",
    "maybe",
    "want",
    "deploy",
    "existing",
    "artifacts",
    "artifact",
    "repository",
    "directly",
    "said",
    "usually",
    "one",
    "pipeline",
    "complete",
    "cicd",
    "process",
    "important",
    "part",
    "application",
    "release",
    "process",
    "testing",
    "need",
    "extensively",
    "test",
    "code",
    "changes",
    "deploying",
    "production",
    "course",
    "complex",
    "application",
    "tests",
    "need",
    "azure",
    "devops",
    "actually",
    "dedicated",
    "section",
    "tests",
    "actually",
    "create",
    "unified",
    "central",
    "view",
    "test",
    "cases",
    "many",
    "test",
    "cases",
    "need",
    "checked",
    "giving",
    "green",
    "light",
    "production",
    "deployment",
    "create",
    "manual",
    "test",
    "cases",
    "plans",
    "new",
    "feature",
    "released",
    "tester",
    "go",
    "steps",
    "test",
    "application",
    "could",
    "also",
    "automated",
    "tests",
    "executed",
    "part",
    "ci",
    "cd",
    "process",
    "test",
    "reports",
    "pipelines",
    "published",
    "viewed",
    "main",
    "advantage",
    "centralized",
    "place",
    "overview",
    "test",
    "plans",
    "whenever",
    "releasing",
    "application",
    "whether",
    "automated",
    "tests",
    "run",
    "pipeline",
    "manual",
    "tests",
    "developers",
    "product",
    "owners",
    "testers",
    "etc",
    "see",
    "results",
    "test",
    "executions",
    "feature",
    "descriptions",
    "decide",
    "whether",
    "release",
    "changes",
    "even",
    "view",
    "run",
    "test",
    "cases",
    "related",
    "feature",
    "directly",
    "convent",
    "board",
    "pipelines",
    "execute",
    "tasks",
    "like",
    "running",
    "tests",
    "building",
    "image",
    "etc",
    "mentioned",
    "execute",
    "tasks",
    "different",
    "machines",
    "different",
    "operating",
    "systems",
    "machines",
    "exactly",
    "get",
    "access",
    "run",
    "tasks",
    "machines",
    "environment",
    "get",
    "answer",
    "question",
    "let",
    "look",
    "azure",
    "devops",
    "architecture",
    "high",
    "level",
    "core",
    "called",
    "azure",
    "devops",
    "services",
    "software",
    "service",
    "managed",
    "online",
    "solution",
    "azure",
    "main",
    "part",
    "configurations",
    "made",
    "pipelines",
    "repositories",
    "created",
    "stored",
    "etc",
    "dedicated",
    "machines",
    "things",
    "pipeline",
    "tasks",
    "run",
    "separate",
    "machines",
    "called",
    "agents",
    "connected",
    "azure",
    "devops",
    "services",
    "platform",
    "manages",
    "agent",
    "machines",
    "well",
    "azure",
    "offers",
    "managed",
    "agents",
    "well",
    "let",
    "microsoft",
    "actually",
    "manage",
    "whole",
    "setup",
    "including",
    "main",
    "service",
    "holds",
    "configuration",
    "plus",
    "machines",
    "actually",
    "execute",
    "pipelines",
    "however",
    "practice",
    "many",
    "companies",
    "need",
    "control",
    "machines",
    "plus",
    "want",
    "remain",
    "flexible",
    "save",
    "costs",
    "maybe",
    "machines",
    "premise",
    "even",
    "another",
    "cloud",
    "platform",
    "want",
    "make",
    "use",
    "option",
    "configure",
    "agents",
    "connect",
    "azure",
    "devops",
    "platform",
    "even",
    "mixture",
    "actually",
    "pretty",
    "similar",
    "architecture",
    "similar",
    "platforms",
    "like",
    "eclipse",
    "icd",
    "etc",
    "look",
    "like",
    "nothing",
    "really",
    "extraordinary",
    "since",
    "managed",
    "service",
    "course",
    "pay",
    "services",
    "using",
    "resources",
    "azure",
    "devops",
    "free",
    "tier",
    "get",
    "started",
    "basically",
    "includes",
    "certain",
    "amount",
    "free",
    "resources",
    "use",
    "get",
    "started",
    "including",
    "using",
    "managed",
    "agents",
    "pipeline",
    "jobs",
    "great",
    "till",
    "actually",
    "saw",
    "various",
    "features",
    "azure",
    "devops",
    "map",
    "different",
    "parts",
    "application",
    "development",
    "life",
    "cycle",
    "starting",
    "planning",
    "task",
    "way",
    "developing",
    "deploying",
    "end",
    "environment",
    "throughout",
    "processes",
    "actually",
    "tasks",
    "execute",
    "platforms",
    "example",
    "build",
    "push",
    "image",
    "needs",
    "pushed",
    "stored",
    "external",
    "image",
    "repository",
    "right",
    "outside",
    "azure",
    "devops",
    "deploy",
    "remote",
    "server",
    "cloud",
    "platform",
    "like",
    "azure",
    "aws",
    "even",
    "maybe",
    "deploy",
    "kubernetes",
    "cluster",
    "etc",
    "plus",
    "may",
    "pipeline",
    "connected",
    "external",
    "code",
    "repository",
    "github",
    "instead",
    "using",
    "azure",
    "repository",
    "tasks",
    "azure",
    "devops",
    "needs",
    "connect",
    "platforms",
    "right",
    "normally",
    "credentials",
    "like",
    "username",
    "password",
    "access",
    "token",
    "platforms",
    "need",
    "make",
    "available",
    "azure",
    "devops",
    "connect",
    "authenticate",
    "platforms",
    "use",
    "cases",
    "azure",
    "devops",
    "called",
    "service",
    "connections",
    "feature",
    "makes",
    "managing",
    "access",
    "external",
    "platforms",
    "much",
    "easier",
    "first",
    "less",
    "configuration",
    "effort",
    "create",
    "credentials",
    "respective",
    "surveys",
    "replicate",
    "azure",
    "devops",
    "instead",
    "credentials",
    "created",
    "automatically",
    "azure",
    "devops",
    "connects",
    "services",
    "second",
    "advantage",
    "secure",
    "actually",
    "service",
    "connections",
    "use",
    "credentials",
    "said",
    "gets",
    "generated",
    "fly",
    "connection",
    "established",
    "worry",
    "rotating",
    "invalidating",
    "credentials",
    "service",
    "connections",
    "created",
    "project",
    "settings",
    "section",
    "separate",
    "section",
    "administering",
    "project",
    "manage",
    "settings",
    "features",
    "like",
    "boards",
    "repositories",
    "pipelines",
    "test",
    "plans",
    "artifacts",
    "plus",
    "mentioned",
    "use",
    "agents",
    "run",
    "pipelines",
    "also",
    "admins",
    "configure",
    "agents",
    "well",
    "learning",
    "various",
    "features",
    "azure",
    "devops",
    "azure",
    "devops",
    "platform",
    "even",
    "probably",
    "wondering",
    "great",
    "projects",
    "using",
    "great",
    "difference",
    "similar",
    "platforms",
    "like",
    "aws",
    "gitlab",
    "etc",
    "one",
    "supposed",
    "learn",
    "become",
    "expert",
    "azure",
    "devops",
    "ignore",
    "tools",
    "let",
    "look",
    "comparison",
    "similar",
    "tools",
    "answer",
    "question",
    "one",
    "learn",
    "first",
    "let",
    "compare",
    "traditional",
    "ci",
    "cd",
    "tools",
    "like",
    "jenkins",
    "modern",
    "ones",
    "like",
    "argo",
    "cd",
    "circle",
    "ci",
    "etc",
    "main",
    "difference",
    "exclusively",
    "ci",
    "cd",
    "tools",
    "right",
    "jenkins",
    "circle",
    "ci",
    "etc",
    "specifically",
    "built",
    "create",
    "manage",
    "cicd",
    "processes",
    "azure",
    "devops",
    "actually",
    "strives",
    "complete",
    "devops",
    "platform",
    "ci",
    "cd",
    "feature",
    "need",
    "covering",
    "whole",
    "devops",
    "process",
    "including",
    "ci",
    "cd",
    "one",
    "place",
    "extremely",
    "convenient",
    "said",
    "devops",
    "need",
    "multiple",
    "tools",
    "different",
    "parts",
    "process",
    "like",
    "jenkins",
    "build",
    "code",
    "repository",
    "jira",
    "board",
    "artifact",
    "repository",
    "etc",
    "means",
    "need",
    "integrate",
    "tools",
    "together",
    "effort",
    "putting",
    "tools",
    "together",
    "like",
    "connecting",
    "git",
    "repository",
    "jenkins",
    "connecting",
    "jenkins",
    "jira",
    "update",
    "status",
    "feature",
    "tasks",
    "etc",
    "use",
    "platform",
    "offers",
    "services",
    "one",
    "place",
    "obviously",
    "convenient",
    "already",
    "integrated",
    "plus",
    "get",
    "better",
    "traceability",
    "meaning",
    "links",
    "parts",
    "process",
    "feature",
    "task",
    "links",
    "corresponding",
    "feature",
    "branch",
    "pull",
    "requests",
    "pipelines",
    "maybe",
    "artifact",
    "produced",
    "version",
    "better",
    "overview",
    "linked",
    "data",
    "features",
    "direct",
    "comparison",
    "azure",
    "devops",
    "however",
    "gitlab",
    "gitlab",
    "started",
    "git",
    "repository",
    "actually",
    "made",
    "turn",
    "decided",
    "create",
    "devops",
    "platform",
    "well",
    "honest",
    "many",
    "features",
    "use",
    "cases",
    "pretty",
    "similar",
    "gitlab",
    "azure",
    "devops",
    "generally",
    "things",
    "work",
    "interested",
    "actually",
    "crash",
    "course",
    "well",
    "full",
    "course",
    "gitlab",
    "ci",
    "cd",
    "building",
    "complete",
    "devops",
    "processes",
    "also",
    "compare",
    "aws",
    "however",
    "aws",
    "way",
    "bigger",
    "way",
    "encompassing",
    "devops",
    "processes",
    "want",
    "mention",
    "interesting",
    "note",
    "comparing",
    "azure",
    "aws",
    "azure",
    "devops",
    "platform",
    "actually",
    "plays",
    "role",
    "know",
    "azure",
    "aws",
    "cloud",
    "platforms",
    "create",
    "configure",
    "complete",
    "virtual",
    "infrastructure",
    "create",
    "virtual",
    "servers",
    "use",
    "bunch",
    "services",
    "well",
    "aws",
    "services",
    "one",
    "place",
    "one",
    "account",
    "azure",
    "platform",
    "azure",
    "devops",
    "platforms",
    "separated",
    "two",
    "separate",
    "accounts",
    "manage",
    "separately",
    "even",
    "use",
    "platform",
    "without",
    "however",
    "obviously",
    "microsoft",
    "products",
    "part",
    "ecosystem",
    "integration",
    "essentially",
    "still",
    "connected",
    "example",
    "hosted",
    "runners",
    "azure",
    "devops",
    "run",
    "azure",
    "platform",
    "well",
    "code",
    "azure",
    "devops",
    "repositories",
    "also",
    "hosted",
    "azure",
    "platform",
    "also",
    "integrate",
    "azure",
    "active",
    "directory",
    "one",
    "azure",
    "services",
    "azure",
    "devops",
    "account",
    "two",
    "separate",
    "platforms",
    "integrated",
    "various",
    "use",
    "cases",
    "means",
    "want",
    "deploy",
    "azure",
    "virtual",
    "machines",
    "azure",
    "app",
    "services",
    "etc",
    "azure",
    "kubernetes",
    "service",
    "azure",
    "devops",
    "basically",
    "connect",
    "like",
    "would",
    "cloud",
    "platform",
    "deploy",
    "interesting",
    "use",
    "case",
    "many",
    "projects",
    "many",
    "companies",
    "projects",
    "use",
    "azure",
    "devops",
    "actually",
    "deploy",
    "multiple",
    "infrastructure",
    "environments",
    "cloud",
    "platforms",
    "may",
    "deploy",
    "azure",
    "devops",
    "pipeline",
    "azure",
    "virtual",
    "machines",
    "aws",
    "virtual",
    "machines",
    "probably",
    "main",
    "example",
    "may",
    "answer",
    "question",
    "technology",
    "learn",
    "whether",
    "learn",
    "azure",
    "devops",
    "answer",
    "usually",
    "companies",
    "already",
    "use",
    "azure",
    "platform",
    "already",
    "use",
    "microsoft",
    "services",
    "products",
    "actually",
    "tend",
    "use",
    "azure",
    "devops",
    "well",
    "however",
    "terms",
    "cloud",
    "technologies",
    "um",
    "cloud",
    "platforms",
    "aws",
    "still",
    "winner",
    "number",
    "one",
    "category",
    "end",
    "terms",
    "cicd",
    "tools",
    "usually",
    "open",
    "source",
    "solutions",
    "like",
    "gitlab",
    "scarcity",
    "jenkins",
    "etc",
    "preferred",
    "rather",
    "using",
    "proprietary",
    "services",
    "like",
    "azure",
    "devops",
    "often",
    "case",
    "company",
    "already",
    "tools",
    "processes",
    "using",
    "years",
    "like",
    "work",
    "jira",
    "jenkins",
    "aws",
    "platform",
    "use",
    "internal",
    "docker",
    "registry",
    "github",
    "repository",
    "want",
    "ca",
    "move",
    "everything",
    "azure",
    "device",
    "engineer",
    "learning",
    "new",
    "tools",
    "one",
    "things",
    "ask",
    "get",
    "job",
    "tools",
    "likely",
    "working",
    "based",
    "tools",
    "mostly",
    "used",
    "companies",
    "today",
    "said",
    "tools",
    "like",
    "jenkins",
    "aws",
    "platform",
    "gitlab",
    "github",
    "platforms",
    "etc",
    "devops",
    "still",
    "commonly",
    "used",
    "ones",
    "leaders",
    "categories",
    "definitely",
    "look",
    "tools",
    "first",
    "since",
    "many",
    "viewers",
    "actually",
    "ask",
    "main",
    "reason",
    "devops",
    "educational",
    "bootcamp",
    "teach",
    "exactly",
    "technologies",
    "popular",
    "used",
    "category",
    "even",
    "cooler",
    "better",
    "alternative",
    "tools",
    "technologies",
    "companies",
    "already",
    "use",
    "microsoft",
    "services",
    "may",
    "decide",
    "go",
    "azure",
    "devops",
    "may",
    "project",
    "interviewing",
    "job",
    "need",
    "knowledge",
    "case",
    "course",
    "learn",
    "get",
    "expertise",
    "azure",
    "devops",
    "hope",
    "able",
    "give",
    "clarity",
    "azure",
    "devops",
    "give",
    "needed",
    "information",
    "get",
    "started",
    "add",
    "relevant",
    "links",
    "video",
    "description",
    "check",
    "well",
    "share",
    "comment",
    "section",
    "whether",
    "already",
    "experience",
    "worked",
    "azure",
    "devops",
    "experience",
    "comparative",
    "tools",
    "one",
    "would",
    "recommend",
    "thank",
    "watching",
    "see",
    "next",
    "video"
  ],
  "keywords": [
    "video",
    "learn",
    "one",
    "popular",
    "devops",
    "platforms",
    "called",
    "azure",
    "see",
    "platform",
    "use",
    "software",
    "development",
    "projects",
    "generally",
    "different",
    "features",
    "cases",
    "works",
    "implement",
    "whole",
    "deployment",
    "lifecycle",
    "also",
    "alternative",
    "tools",
    "need",
    "many",
    "let",
    "get",
    "started",
    "first",
    "name",
    "service",
    "created",
    "basically",
    "processes",
    "project",
    "team",
    "services",
    "kind",
    "even",
    "still",
    "actually",
    "however",
    "since",
    "used",
    "pretty",
    "already",
    "know",
    "things",
    "right",
    "answer",
    "question",
    "look",
    "exactly",
    "well",
    "said",
    "developing",
    "applications",
    "automated",
    "way",
    "high",
    "needs",
    "order",
    "workflow",
    "want",
    "go",
    "etc",
    "separate",
    "make",
    "process",
    "part",
    "steps",
    "parts",
    "various",
    "application",
    "code",
    "feature",
    "step",
    "define",
    "work",
    "within",
    "tasks",
    "two",
    "workflows",
    "probably",
    "boards",
    "company",
    "like",
    "choose",
    "similar",
    "create",
    "developers",
    "task",
    "may",
    "plus",
    "overview",
    "status",
    "stage",
    "deployed",
    "main",
    "repository",
    "course",
    "repositories",
    "github",
    "gitlab",
    "git",
    "version",
    "push",
    "changes",
    "pull",
    "branch",
    "request",
    "companies",
    "note",
    "place",
    "release",
    "end",
    "test",
    "package",
    "artifact",
    "deploy",
    "environment",
    "testing",
    "building",
    "ci",
    "continuous",
    "pipeline",
    "pipelines",
    "section",
    "script",
    "build",
    "example",
    "run",
    "tests",
    "image",
    "execute",
    "docker",
    "type",
    "built",
    "microsoft",
    "commands",
    "attribute",
    "another",
    "instead",
    "directly",
    "available",
    "configured",
    "using",
    "ui",
    "yaml",
    "configure",
    "parameters",
    "add",
    "configuration",
    "convenient",
    "simple",
    "job",
    "would",
    "multiple",
    "jobs",
    "say",
    "operating",
    "machine",
    "case",
    "defined",
    "could",
    "agent",
    "machines",
    "complete",
    "environments",
    "polomi",
    "infrastructure",
    "manage",
    "cloud",
    "cicd",
    "cd",
    "artifacts",
    "file",
    "new",
    "usually",
    "images",
    "dedicated",
    "connect",
    "deploying",
    "production",
    "stages",
    "maybe",
    "managed",
    "better",
    "jenkins",
    "whether",
    "agents",
    "aws",
    "credentials",
    "virtual"
  ]
}