{
  "text": "hello everyone my name is Joe Franti and\nI am a developer Advocate at Dino and uh\nyou may have seen our big news recently\nwe just launched\ndino2 uh for those of you who don't know\nwhat Dino is we are a JavaScript runtime\nuh we're super fast we're built by the\nguy who originally built node Ryan Dal\nand his aim in doing so in building Doo\nwas to make JavaScript and typescript\ndevelopment simple and fun and\npleasurable and\ndelightful um and I remember you know\nwhen I first became a web developer and\nthis is dating myself slightly um but\nnode was still very new at the time all\nthe web developers were using jQuery you\nhad to learn HTML javascripts CSS jQuery\nand that was basically it and I remember\nwhen I first started I think I taught\nmyself those over maybe a summer and\nthen I started applying for entrylevel\njobs and I feel like developers these\ndays like I really feel for new\ndevelopers the entire ecosystem the tool\nchain is super complicated there's so\nmuch to configure so much to learn so\nmany tools to choose before you can even\nget\nstarted um and Dino aims to reduce this\ncomplexity by com combining a lot of the\ntools that you'll find yourself needing\nright into the\nruntime so Dino comes with its own\nlinter it comes with a format uh it's\ngot typescript support uh out the box uh\nit's got testing built in and it also\ncomes with a lot of the standard web\napis that you know and love from the\nbrowser already baked in so you can use\nthings like fetch you can use websockets\nyou can use web storage and the whole\nhope is that we're making backend\ndevelopment for JavaScript developers\nfeel a lot more like home feel a lot\nmore like the web development that we're\nused to and if you're coming from node\ndon't worry Dino has full compatibility\nwith node so your node projects will\njust work in Dino you'll be able to run\nthem and we'll take a look at that a bit\nlater on um and any mpm packages that\nyou have used in your node projects that\nare written with modern JavaScript\nstandards will also work fine with\nDino so to coin a phrase let's put my\nmoney where my mouth is I'm going to\nshow you a couple of projects we're\ngoing to build a couple of apps with\nDino we're going to take a look at some\nof its cool features and we're going to\nsee what the what the dev experience is\nlike and you can sort of see for\nyourselves whether you think this is a\ndelightful\nexperience uh so first of all if you\ndon't have Dino installed you're going\nto need to do\nso uh you can can in find you can find\nthe install command on the dino site and\nnow is when we're going to test out my\nfancy setup so awesome okay so you can\nfind the installed command that you need\nfor your particular operating system on\nthe doo doc site this is Dino uh docs.\ndino.com\nruntime um and then you can you can\nchoose the one that you need I've I'm on\nWindows I've already got it installed so\nI'm not going to install it now but um\nthis is the command that you would need\nand then you can check whether you've\ninstalled it correctly with doo minus V\nso if I jump over into my\neditor and I type\nin Fe we can see I'm running Dino 2 so I\nhave Dino installed awesome um and then\nyou're also going to want to install the\ndino extension for vs code which is\ngoing to give you some nice autocomplete\nhelp as you write your apps uh so vs\ncode you can go to extensions type in\nDino and just get the uh dino language\nto have a client installed as well and\nthis is going to just make editing with\nDino in vs code much more\npleasant so the first thing we're going\nto do is we're going to create a new\nproject and Dino can actually scaffold a\nbasic project for you so we're going to\ndo that to\nstart uh so I'm going to in in my\nconsole use the dino inet\ncommand and that's going to initialize a\nnew project for me and oh let's get into\nthe right\nuh so\nDino Adit and I'm going to call this\nproject we're going to make a chat app\num which is going to show off Dino's\nbuilt-in support for websockets so I'm\njust going to call it chat app\nand we'll do that and you can see D has\ncreated us a project and it says that we\nneed to CD into the project and then we\ncan run so let's do that CD chat\napp and let's open it up in Visual\nStudio code there we go awesome so this\nis the basic project that Dino scaffold\nout for you so I don't know if you can\nsee let me zoom in a little bit there we\ngo so D scaffolded out three files for\nus we've got a main TS uh which uh is\nwhere we're going to write our code uh\nto actually run the app um and we can\nrun this let me open up my terminal\n[Music]\nagain with the Dino Run command so we\ncan say Dino Run uh what's it called the\nname\nTS and you can see it's going to Output\nuh we've just got a little add function\nwhich is going to add two numbers\ntogether um I can update\nthat run it\nagain and uh it's run nice uh dino also\nuh has we we really support testing like\nwe think people should write tests for\ntheir code um so the scaffolded lout\nproject actually comes with a test\nalready built\nin and in order to run our tests we just\nneed to know\ntest and we can see that test is passed\num so we're just using this assert\nequals function so if I change this here\nuh and we run Dino test\nagain we can see that our test t has\nfailed this time um and so I didn't have\nto install anything in order to run\nthese tests I didn't have to configure a\ntest Runner this is all stuff that is\njust built in with Dino uh and the final\num exciting thing to look at here is the\ndino Json file now those of you who are\ncoming from node will be already\nfamiliar with the idea of a package Json\nDino Json is where you can configure the\nruntime um and it's also where you can\ndo things like add uh scripts which we\ncall tasks or add your dependencies\nwhich we call Imports um and these are\nthings that you should all this should\nbe fairly uh you know these are things\nyou should recognize from node\n[Music]\num since we're starting fresh we're\ngoing to I'm going to continue using\nthis Doo Json but but if you already\nhave a node project that you're porting\nover to dino dino does actually support\na package Json as well so we could use a\npackage Json here instead um I'm just\ngoing to use a dino Json because that\nwhat is what is set up by uh dino\nandit uh and Dino also comes with its\nown set of standard modules that you can\nimport to use in your project so if we\nhave a look in here in the in this Dino\nJson you can see in this list of imports\nhere you can see we're already importing\nsomething which is this SCD assert um\nand that's actually what is being used\nin our test so we're using this assert\nequals to assert that 2+ 3 equals five\nin this case uh and yeah Doo comes with\nthis uh standard Library which is a\nwhole collection of blocks of code that\nyou're likely find yourself needing\nacross multiple projects the idea is\nthat we don't want you wasting your time\nsort of Reinventing the wheel as it were\nso the standard library is there for you\nto use to get going quickly uh with\nblocks of code that you're going to use\nfairly frequently uh to leave you time\nto focus on your application logic um\nand you can browse the standard Library\nmodules on jsr so uh if I just swap over\nour browser and our editor again if you\ngo to jsr you can see all of the\npackages that are available to you in\nthe dino standard library and these are\npackages that are guaranteed to work\nthat have been thoroughly checked and\ntested by our\ndevelopers um so this is stuff that you\nknow we want you to use to make your own\ntime\neasier uh so we're going to build a\nlittle chat app so let's do that now and\nthe idea of this chat app is we're going\nto be able to open up multiple browser\nwindows and chck between the two showing\nthe sent messages in both and we're\ngoing to use websockets to send these\nmessages um and websockets are just a\nway it's a protocol that enables two-way\ncommunication between a browser and a\nserver so websockets allow you to send\nand receive messages between a browser\nand a Ser between a client and a server\nwithout having to constantly Poll for\nupdates um so what we're going to need\nto do is we're going to need to set up a\nserver which is going to manage the\nwebsocket connections and which is going\nto receive the messages and then\nbroadcast them out to all the connected\nbrowsers and in order to do that we are\ngoing to use a package from jsr called\nOak so let's just have a quick look at\nthat so Oak is a really great middleware\nframework for um as it says here for\nhandling HTTP so we're going to add the\noak package to our new project so let's\njump back into our\neditor and in the command line we're\njust going to say Dino\nadd and we use the specifiers in Dino so\nif you want to add an mpm package it\nwould be mpm colon the package name\nbecause we're importing this from jsr\nit's going to be jsr colon and our\npackage name which is\nOak\nOak and you can see that Dino has added\nthat into the dino Json file here and\nnow we can import it into our\nproject uh so in our main.ts I'm going\nto get rid of all of this helpful code\nhere that Dino has added for us and\nwe're going to import the modules that\nwe want from that Oak middleware so\nlet's do that and you're going to have\nto watch me fail to type here thank\ngoodness for co-pilot so we're going to\nimport\napplication and\ncontext and\n[Applause]\nrouter\nfrom SL\nOak and because we've set it up in the\nJson with the\nname uh oak oak we can see that now in\nour main TS and we can use it with that\nname uh so then what we're going to do\nis we're going to initiate uh the oak\napplication instance in fact there we go\nlooks like uh co-pilot has our back\nalready uh we're going to set up a\nport and we're going to\nset up a router as\nwell and just to get started oh look\nco-pilot's got my back already we're\njust going to set up a really basic\nroute at slash um which is just the at\nthe at the base uh and this will help us\ntest whether our server is up and\nrunning uh we'll integrate the rout into\nthe application and we will use LOD I\ndon't know how people write without\nco-pilot these days so finally we're\ngoing to start the\nserver there we go and we\nwill await uh incoming requests so now\nif we visit Local Host in our browser we\nshould see Hello World\nreturned Let's test it out\nSW over to the\nbrowser oh no we're not going to see\nanything returned because I'm not\nactually running the project so the the\nthing that I didn't talk about yet is um\nback in our Dino Json we have this idea\nof tasks so when I ran the project\nearlier I did dinor run\nmain.ts um and Dino comes with uh this\nidea of a permissions based model so\nvery like when you're doing web\ndevelopment and you want to use\nsomebody's uh media like their their\nmicrophone or their camera or um uh\nanything else that's connected the\nbrowser will prompt for permission Dino\ndoes the same thing so what's happening\nhere is Dino is saying I need something\nI need to access something across a\nnetwork so you need to allow network\naccess um and it just keeps your\nprojects a little bit more secure than\nuh the sort of the wild west of node\nwhich just allows access to everything\nso um what I could do here is I could\nsay instead of Dina run I could say\nminus minus allow net or I can which is\ngoing to be a pain in the ass to type\nconstantly so we set up these things\ncalled task\nyou may you won't have seen that prompt\nthat I just got so I just got this\nsecurity prompt here um which is saying\ndo you want to allow network access um\nand I can either say yes or I can run\nthe prompt I can run Dino Run again with\nuh the minus minus allow net flag or I\ncan set up this task here which is going\nto run the Dina run command for us so\nwhat I'm going to just say\nallow net in here and then in my uh\ncommand line which I've just seen you\ncan't actually see because it's just off\nthe can you see that on the screen it\nlooks like it's just off the bottom let\nme\nuh just that a bit smaller for\nyou there you go\ncool uh so now here I can instead do D\ntask\nand I spell allow\nwrong let's try that again there we go\nokay and now my server is running on\nPort\n8000 if we open it up in the\nbrowser you can see my little hello\nworld in there excellent so uh that's a\nsuper basic uh HTTP server set up with\nOak now let's actually SCA P out some\ninteresting uh functionality for our\nchat app um so I don't want to use for\nthis example I don't want to use feet or\nset up any other tools I wanted to show\nyou how to make a really Bare Bones\napplication um we'll look at something a\nlittle bit more tooled out later but for\nnow let's just set up a super basic Dev\nserver which is going to serve some HTML\nand some CSS and some client side\nJavaScript so let's jump back into the\neditor and in our main.ts file we're\njust going to uh so we'll get rid of\nthis rout for now and instead we're\ngoing to say that we want uh to app. use\nthere we go and we're going to set the\nroot to the current working directory uh\nin a public folder which we will make\nand our index is going to be\nindex.html nice okay\nso this is just going to send a file as\nan HTTP response and doo. CWD is the\ncurrent working\ndirectory um and uh yeah so that's just\ngoing to set the index file to be the\ndefault file to serve when the root URL\nis accessed so now let's make that\nfolder\nso make public and inside there we will\nmake an index.html\nand we're just going to scaffold out a\nreally basic chat app so we're going to\nhave uh a text input we're going to have\na button to send we're going to have a\nlist of online users and we're going to\nhave a div which is going to contain the\nconversation\nitself let's try that\nagain so that just gave me a little bit\nof boil plate what should we call it uh\nchat\napp and in the body uh I'm going to\ncheat this for\ntime so we have in here just a boring\nold header with an H1 and the side uh\nwhich is going to be where we show our\nonline\nusers um and then a container div which\nis going to hold all of the messages a\nform which has an input and a send\nbutton um and I'm going to add some CSS\nin too just um because at the moment it\nlooks quite boring uh let's\nsee oh okay so I don't know if you saw\nthat I\num I refreshed a browser and Dino said\nwait a second uh you you've asked me to\nuh server file so I need read access to\nthis file so in my doo Json I'm just\ngoing to add in the\nallow read in\nthere and we'll run that task\nagain and now if we just have a look in\nthe\nbrowser we have a very ugly chat app so\nlet's just quickly add in some CSS this\nis going to be a here one I made earlier\nso\nsituation\nuh we can have a look through the CSS\nlater if you would like\nto so in here I'm going to make another\nnew folder a new\nfile\nstyle.css paste in a bunch of\nstyles\nand if I refresh in the browser\nso I\ndon't that need to be such\npublic oh it's style singular\nthere we go okay uh we open up the\nbrowser again you can now see my\nbeautiful chat\napp let's change the size of that window\nif we can\ndo so you can actually see it there we\ngo stunning beautiful chat app\nnice uh but it doesn't do anything at\nthe moment so I can type in here and\nclick Send and nothing happens I don't\nknow who's online because I haven't\nasked anybody who's online I haven't uh\ncollected anybody's names um and it's\nnot going to do anything functional\nbecause at the moment we don't have any\nJavaScript so let's add some client side\nJavaScript into the mix so back in our\neditor we're just going to also add in a\nscript tag\nand we're going to\ndefer and it's going to\nbe type module and Source it's going to\nbe sure we'll call it script.js why\nnot awesome okay um and we can just put\na console log in\nhere just to test that that has worked\nhello from script.js\nif I open up my browser again you can\nsee there howo from script yes awesome\nso we're getting all of those assets\nserved by our little server um but at\nthe moment we have no way of knowing uh\nlike who's on our chat um we have no\nfunctionality so let's start by\nprompting the user for their name so in\nour little script JS we're going to set\nup a new part\nusername and we're going to I mean this\nis super lowy we're going to prompt and\nsay uh y enter be a bit more polite than\nco-pilot please enter your username um\nand if they don't if they just close the\nprompt then we're just going to call\nthem\nAnonymous um and next we're going to\nconstruct a new URL for the web socket\nconnection uh so we'll set up a\nURL uh\nand this is going to be so we're going\nto do it on um SL\nwebsocket oh let's do WS for typing ease\nand I'm also going to give the username\nas a\nparameter there we go uh thank you again\ncoob we don't need window there awesome\nso all we're doing here is saying uh\nwe're going to set up a new web circuit\nconnection um and then we're going to uh\nreplace the protocol so instead of HTTP\nit's going to be WS so we will say url.\nprotocol equals yep there we go url.\nprotocol. replace HTTP with with ws and\nthen we're going to open the websocket\nconnection on that constructed URL there\nwe go not\nat and uh then we're going to update the\nserver to actually do something when\nthat web circuit connection is made so\nif we jump back into our server\nSL uh we can in\nhere do our rout to.get again except\nwe're going to put it on WS now and\nwe're going to pass\nin context\nno um and you'll see here that I'm\nwriting typescript and again I didn't\nneed to configure anything in order to\ndo that uh typescript is supported out\nof the box with Dino uh so it just just\nworks it would just work if I could\ntype so we're going to get the user name\nfrom the parameters of that URL and then\nfor now we'll just console\nlog that person is connected uh so now\nif I open up the browser\n[Music]\nagain and I\nrefresh I should be prompted for my\nusername I can say\nJoe and you can't see that but in my\neditor we just got a little console log\nsaying Joe has\nconnected awesome okay\nuh we're going to now actually build out\nthe chap application logic um I like to\nkeep my files nice and neat so I'm going\nto split the chat app logic into its own\nfile which I'm going to call chat\nserver.\nTS and uh in our .ts let's just import\nthe chat\nserver\nno helpful but not quite helpful enough\nCo\npilot thank you uh and uh let's actually\nbuild out some of the chat server so the\nchat server is going going to need the\ncontext as well from that request so\nlet's import context from\nOak and uh this is just going to give us\ninformation about the HTTP request so it\ngives us access to things like headers\nto URL parameters to the body and\nimportantly it's what lets us upgrade\nour connection from HTTP to websockets\nso uh we're going to\nexport uh we'll just call it chat server\nyep and uh I'm going to put in a a\nmethod in here called handle connection\nwhich is going to handle our connection\n[Music]\nuh which will get the context let's see\nuh and what is it done here\nuh and in the wrong place on the\nkeyboard\nsocket so we're going to upgrade so\nthat's um what's going to allow us to\nmove from polling to websockets and then\nwe're going to get the username and\nwe'll just console log\nit uh yeah so now uh we should be able\nto jump back into our main.ts and\nactually use that method that we just\nexported um so let's do\nthat uh where are we going to put this\nlet's put it uh here\nno I want\nlowercase and uh we will then uh change\nthis so instead of because we've just\nput we've just passed all of that across\nthrough to the chat server so we're\ngoing to say chat server do handle\nconnection and pass it context nice okay\nuh so let me just briefly jump back into\nthe browser\nrefresh make sure this is still\nworking and yeah you can see Joe\nconnected awesome\nokay uh so now we know that a user is\nonline we can go into our server side\nJavaScript and actually add their name\nto a list of online users so uh sorry\nonto our client side JavaScript is what\nI meant uh so let's do that um so let's\nmake a new function\ncalled uh update user\nlist and we're going to\nusernames and uh let's see if co-pilot\ncan work out what I'm going to do no\nwe're not going to in a HTML\nand we're going to say uh yeah create a\nlist create a bunch of Lis uh add each\nusername into an lii and append that to\nthe list of usern to the uh username\nuh list uh I can't remember what did I\ncall I don't think I called it user list\ndid I I called it users excellent okay\nand uh we also know that we want the\nuser to be able to type their message\ninto the input uh so let's make a\nselector for the input and make a\nselector for the form as\nwell did I call them input and form in\nmy\nHTML I called it form and input\nexcellent uh and I want the cursor Focus\nto go straight onto the input when\nthey've finished entering their name so\nthat they can start typing a message\nimmediately so I'm just going to do\ninput.\nFocus just a nice bit of extra usability\nthere and then um I'm going to when the\nform is submitted I want to send a\nmessage across the socket so let's do\nthat\nform.\nonsubmit e prevent default message is\ninput value we empty at the thing and\nthen we're going\nto socket. send we're going to\nstringify the m message along with what\nI'm going to call a message\nevent so we will\n[Music]\nsend and then send the message itself as\nwell\nuh so because we've made the form of\nHTML form the submit happens on pressing\nthe submit button or on pressing enter\nso we don't need to do any like\nlistening for keyboards or listening for\nclicks or anything like that we just\nhave our own submit um but now we need\nto update the server to actually do\nsomething with this message so we've\ndone our our web socket. send we need to\nactually update the chat server to do\nsomething with\nit uh so um we're writing typescript\nhere as I mentioned uh so the first\nthing I'm going to do is uh set up some\ntypes for us to use so I'm just going to\nuh extend the web socket type to include\nthe\nusername so let's just make a nice new\ntype\nuh there we go thank you co-pilot so all\nall that is is we've got a web socket\nand it's also going to have a username\nand then I'm going to set up a type for\nthe app event as well\nuh which is going to just be a\nuh which is a\nstring\nand cool nice and then we can upgrade\nour socket here to be as circuit with\nusername very nice\num and then I'm going to also set up a\nuh a new uh property which I'm going to\ncall connected clients which is going to\nstore a connection of all of the\nwebsocket store a collection of all of\nthe web sockets\n[Music]\nconnections yes perfect okay um and then\nwe're going to stop people from being\nable to take usernames that already\nexist uh so once we've got the username\nwe will say if this do connected clients\nthat has\nusername uh we'll do socket.\nclose uh with a\n108 user already connected\nlovely uh and this is\ncomplaining\nbecause okay just going to Che that um\nso because we know that\nwe're the username is always going to be\nassigned it's either going to be\nsomething they typed in or it's going to\nbe the word anonymous I'm just going to\ncheat that for now uh awesome and then\nwe're going to return\nhere so they'll just be asked to give a\ndifferent username and now let's set up\nsome more methods to actually flesh out\nour app so we know we're going to want\nto send a\nmessage so let's set that up we know we\nare going to want to do something when a\nclient\ndisconnects and we're going to want to\nupdate the list of usernames when a\nclient joins or when a client connects\nuh so let's build out first the client\nis\nconnected uh and we're going to need to\npass a\nusername string and we're just going to\nsay when the client disconnects delete\nthe username from the list and broadcast\nthe list of new usernames copilot\nalready did I spell connected with three\nends\namazing let's fix\nthat thank goodness for spell check\nbuilt into vs code um awesome okay uh so\nwhen the client disconnects we're just\ngoing to remove and we're going to\nrebroadcast the list of usernames um\nso let's update now the broadcast names\nfunction since we're going to be doing\nthat um so what we're going to do is\nwe're going to extract the keys from the\nconnected clients map to get the list of\nthe usernames and then we'll create an\narray of them and then we're just going\nto broadcast a message with that new\narray so we will say\n[Music]\n[Music]\nuh something I haven't actually\nmentioned yet uh because I'm very bad at\nremembering to put semicolons on the end\nof lines uh dino comes with a built-in\nform matter um so if you work with\npeople who do bizarre things to the to\nthe shap of their code you can actually\nrun Dino format and it'll Auto format\nyour file for you so it looks beautiful\num and it'll add semicolons onto lines\nwhere you could have gotten to add them\nwhich is my\ncrime um and obviously the format is\nfully customizable so you can change the\nrules that it uses so if you're someone\nwho doesn't like semicolons you don't\nhave to have them um and the dino Json\nis where you would set up the rules for\nthe formatter for the lenter for the uh\ntest Runner uh yeah just a little aside\nthere so um yes what are we doing uh\nwe're going to\nthen\nbroadcast those\nuh usernames with an event of update\nusers\nand also usernames there we go okay\nawesome uh so now I've just made a me\nmethod called broadcast which doesn't\nexist so let's create\nthat uh which is going to indeed need an\napp\nevent and it's going to take the message\nstring uh it's going to sorry create a\nit's going to stringify the message and\nthen send that message\nso yeah in\nfact nice and naming there uh four\nyep okay awesome so for each of the\nclients uh send that\nmessage and finally let's make that send\nfunction put some spaces in between here\ngive this a bit of breathing room there\nwe go that's a bit nicer isn't it uh so\nwe will we need to give this some\ninformation so it's going to need the\nusername and the\nmessage not\nevent and yep so we're going to say\nclass\ndata is\nuh message.\ndata I've lost a bracket there\nsomehow and\nif it's not equal to send message just\nreturn we like to return early and often\nhere\nis that telling me I've got extra\nbracket there yes I have okay\nexcellent and uh otherwise this\nbroadcast um and we're going to\nbroadcast event is going to be uh send\nmessage the username is going to be the\nusername and\nthe message is going to be message data\nlovely\nokay let's format\nagain okay awesome so now we can\nactually call these m methods to\nactually do things when the webset\nconnection uh when stuff happens on the\nweb soet connection so either a message\nis sent someone connects or someone\ndisconnects so let's do that next so uh\nup\nhere where we\nyeah we so in our uh handle connection\nwe are going to say uh socket.\nusername is going to be username and\nsocket onop we're going to say uh so on\nopen we want to broadcast the uh\nusernames so we will say\ncast usernames and we're going to bind\nit uh the\nthis and then we're going to say\nsocket\nclose and on close we want to run our\nclient\ndisconnected and give it the username\nand then when a message is received so\nsock. on\nmessage uh exactly that we're going to\nsay this do send\nuh socket. username uh and the\nmessage and then finally we're going to\nset the connected clients up with the\nusername and the connection so we will\nsay this copilot already knows what I\nneed to do uh so the final thing that we\nneed to do now is actually update our\nclient side JavaScript to deal with the\nmessages that it is going to receive\nuh okay we're all good here so let's\njump back into our\nscript.js um so when we were receive a\nmessage from the websocket server it's\ngoing to contain a username and it's\ngoing to contain some sort of message\ntext we want to be able to display both\nin the browser um and we could do this\nwith you know um creating elements in\nJavaScript and appending them but I\nthink it's actually\nnicer to use a template in the HTML\num templates are super cool uh in fact\nI'm just going\nto to copy pter again for uh gravity\nsake so all I've done here is uh so\nwe've got a template which I've given an\nID of message inside that template is\njust a container div for styling span\nwhich is going to contain the username\nand a paragraph which is going to\ncontain the message itself then back in\nour script s uh we can create a function\nto run when the message is received\nwhich is going to get that template and\npopulate it and append it to the HTML so\nlet's put that in here so we'll call it\nadd\nmessage it's going get the\n[Music]\nusername the\nmessage and uh C template\nis yeah what did I call it I just called\nit messages didn't\nI I\nthink message\nsingular uh we will clone that yep uh\nwe'll\ndo\nexcept I'm not doing that we're just\ngetting a\nSpam we're setting the context to be the\ntext to be the username name can't spell\nthat says\nSpin and then we'll grab the p and we'll\nput the message in\nthere and then I'm going to do something\nclever here so\nuh you'll see here um co-pilot has\nsuggested that we are pend I'm going to\nprepend and the reason for\nthat is\num you know when you when you're writing\nin a text chat you want the messages to\nscroll off the top of the screen as they\ncome in um and obviously by default uh\nit will be adding them in but our scroll\nbar won't move so what I've done in the\nCSS is actually invert the\ncontainer um and then what we're doing\nis prepending so we're putting the thing\nat the bottom and our scroll will\nactually move down as new messages come\nin uh which was a hack that I found on\nuh w3c I think of all places and I quite\nlike it um so now when a message is\nreceived let's actually do something\nwith it uh so under here we are going\nto ws. on message\nwe're going to PA our yep exactly\nthat who exactly that okay so what we're\ngoing we're going to create a new\nvariable which is going to contain the\ndata which is going to be the past data\nand then we're going to make a switch\nstatement which is going to say in the\ncase that we are updating\nusers we're going to update our user\nlist with the uh usernames\nand in the case that it is a send\nmessage uh we're going to add the\nmessage data so we'll get the username\nand the message and we will run our add\nmessage function that we just\nmade okay that was a whirlwind uh\nintroduction uh so let's take a quick\nlook at that in the browser and see if\nit actually works\ncome\non process failed what did I get\nwrong chat\nserver what a typo\nsomewhere if I lost a bracket\nsomewhere\nokay that seems to be running\n[Music]\nnow there we go okay awesome so\nhello cannot read properties of no have\nI uh missed a name on something\nget element by D\nmessage oh y I bet I didn't call it that\ndid I what did I call it\nconversation there we go\n[Music]\nyay okay awesome and let's open it up in\nanother browser\nwindow hooray okay so that was a super\nSpeedy uh building of an entire chat app\nso something else that I wanted to show\nyou very briefly\num was that your node projects can also\nwork in\nDino um so let's just make an entire new\nproject and I won't perhaps we won't\nbuild out an entire second app but we\nwill just have a quick look at using a\ntool chain that you might know and love\num so uh I know a lot of people\nobviously are using next right now and\nit's really important that Dino runs\nyour next project so I just wanted to\nprove to everybody that it does that\nyour package Json completely works that\nyour mpm Imports completely work in Dino\nso let's make a brand new uh next\nproject so we can do doo run minus a and\nwhat minus a does we saw those\npermission prompts earlier minus a is\njust saying allow everything so allow\naccess to everything it's kind of like\nthe default setting in node uh and we're\ngoing to say\nmpm create next app\nlatest and we'll call it uh\ntest next\napp and we'll just take all of the\ndefaults and we'll watch it\ninstall this is when we pray that my\ninternet is fast enough for this\num so\nuh my original Hope was to build out an\nentire uh next project with you as well\nbut I took way too long on that chat app\nso while we're watching this install\nI'll just show you some resources that\nyou can use uh for uh building next app\nso if you go to docs. dino.com\nruntime uh we've got a whole load of\ntutorial in here so if you're using\nreact if you're using next if you're\nusing view uh you can absolutely use\nthose uh in Dino um the app that I was\ngoing to build with you is actually all\nwritten out here so if you want to\nfollow along you can totally build an\nentire Dinosaur app in here um but let's\njust jump back into my editor so you can\nsee we've so we've built a next app so\nif we CD into test next\napp and we open that up in\n[Music]\nhere I can so you'll see here I mean\nthis is just a standard next app we've\nall seen this before it has a package\nJson which has scripts and dependencies\nI can do Dino Run Dev no Doo task\nDev and it's going to run and set\nup\na little next app for us\nuh which should open up in my browser\nonce it's finished\ncompiling there we go uh so we have a\nfully functional next app um which works\nexactly as you would expect next to work\num you can run it with Dino you can if\nyou want to you know add dependencies\ninto the package Json and Dino will be\nable to use them you can also if you\nwant to add a dino Json if you want to\ndo things like start configuring the\nformat or the\nler um or indeed if you just prefer\nadding your dependencies in there Dino\nwill be able to work fine with both a\npackage Json and a dino Json in there um\nthat's no problem uh yeah so if you want\nto see the code of the project that we\nbuilt today you absolutely can it is on\nGitHub let me get you the\nlink\nuh in fact let's go let's open up the\nbrowser and actually have a look at it\nso um the tutorial that I walked through\ntoday was our chat\napp and the finished project is here so\nlet me just paste that into\nthe chat um\nor I can zoom in here for anyone who's\nwatching\nonline uh so if you want the code you\ncan see it here we also have a whole\nbunch of other tutorials in this\nrepository so if you go to the dino\nrepository and search for\ntutorial\nSt there we go there's a whole bunch of\ntutorials in here and I am adding more\nuh every day so check back for more um\nand if there's particular libraries that\nyou're interested in I would love to\nhear um and I can add those in um but\nthe takeaway message should be Dino just\nworks you shouldn't have to do anything\nspecial there shouldn't be any giant\nsort of porting job when migrating from\nnode to dino the things that you know\nand love will just work with Dino um and\nif the mpm packages that you're trying\nto use don't use es modules you will\nneed to update them but we also have\nsome helpful uh advice on how to do that\nso if you go to\nuh\nthe doo documentation we have a whole\nload of advice on upgrading upgrading\nfrom Comm JS to es modules over\nthere okay that was um a well wind of an\nintroduction to dino uh I hope that that\nwas interesting I haven't seen any\nquestions come in I don't know if we've\nhad any questions at\nall there there was at least one um\nwhich um was basically\naround essentially what you kind of\nwe're covering here somebody who is\nexperiencing like trying to run an\nexisting node app on Doo um and sharing\nsome of the errors that they they came\nacross um including um like a relative\nimport path module not prefixed with uh\nI guess you it says to use node colon\nmodule like is there so is there\nsomething like if you have an existing\nnode app and you want to go ahead and\nPort it over are there things you're\ngoing to run into like that or is there\nsome kind of configuration maybe that's\nlike you have to run it with that- a or\nsomething like that or or so I mean it\nwill depend entirely on you know it'll\ndepend on the project itself we do have\na guide I'm just trying to find it now\num so we have a whole guide for things\nthat you might run into so the majority\nof project should just work there are\nhowever um you know a bunch of node\nbuild buin that you may need to do you\nknow the node specifier so for example\nif you're using um OS you might or\nyou're using node specific FS for\nexample you would need to do node colon\nFS or node colon OS to use those\nbuilt-in node modules but then Doo will\nsupport them um if you're using your mpm\npackages again the mpm specifier is the\nway to go um and then as I mentioned if\nit's not using ES modules you will need\nto update it to use es modules do you\nknow only supports es modules doesn't\nsupport\ncommonjs um but we do also have some\ntooling that'll help you uh swap over so\nthe uh the place to look is\num docs. dino.com\nruntime fundamentals\nnode Okay so yeah I think the other\nerror they were running into was uh was\nsomething along those lines which is cuz\nit it says require is not a Define is\nnot right like so yeah so anything the\nusers require you're going to have to go\nahead and update you're gonna have\nto okay so then the the follow-up\nquestion for me would be like okay let's\nsay I have a node project like that and\nI Port it over to dino what are some of\nlike the things the benefits that I\nmight see as as you know for doing that\nso uh the dino well Dino is built in\nRust so it's um it's actually slightly\nfaster than node so that's the first\nthing but we're we're talking you know\nseconds difference there so that may not\nbe enough for people um one so the\nthings that I spoke about you know the\nbuilt-in support for typescript the\nbuilt-in test Runner the built-in linta\nthe built-in formata all of these things\njust mean that you can sort of flatten\nyour project a lot more we don't need to\nbe importing a load of dependencies we\ndon't need to be doing a load of\nconfiguration like it keeps your project\nfolders a lot\nneater uh dino also um if you're uh\nbuilding a dino project from scratch\nDino you will notice doesn't have that\nnode modules folder which is just it\nuses a centralized Global cache instead\nuh which again just keeps your project a\nlittle bit neater um and then the other\nthing that we looked at was the security\nangle\nso it can be a bit of a wild west out\nthere and sometimes especially if you're\ninstalling a bunch of dependencies and\nyou're not looking at exactly what all\nof them are doing they may be accessing\nthings that you're not expecting them to\nand getting that warning in the um in\nthe console is actually quite nice way\nto keep an eye on what's accessing what\nso know I set up a an HTTP server and it\nasked for network access like yes of\ncourse you can have network access you\nneed that but if I'd installed some\ndependency and suddenly something was\nasking for network access I might you\nknow want to look at what was happening\nin that dependency it just it just keeps\nyou a little bit\nsafer yeah in fact that I think our last\npresentation about a month ago was about\nspecifically about dependencies and the\nkind of security nightmares they can\ncause um node being among you know the\nnpm registry being among the biggest\nlike kind of potential attack vectors\nthat that you could find um so that that\nmakes a lot of sense uh but if I have an\nexisting one I mean I guess can is there\nlike a path for transitioning off of npm\nnow that I can I've got full npm\ncompatibility but like maybe I want to\nstart kind of taking the benefits of\nthose security like I can transition\ninto moving some of those yeah I mean\nyou will still you will still get that\nsecurity so as soon as you start running\nin node as soon as you type you know\nDino task Dev it's going to\nsay you need access to these this this\nthis this this and this it's\nautomatically going to prompt if those\nthings are needed so it's a nice way to\nactually find out if your program is\ndoing stuff that you don't know what\nit's\ndoing okay yeah okay so I don't even I\ndon't even need to use the dino\ncentralized cache version of anything\nthat you get that security automatically\neven with\nthe that's very cool excellent um yeah\nand I think one of the things that that\nlike you showed is just that this isn't\nlearning something entirely new like the\nlearning curve is pretty low and now\nwith mpm compatibility should be about\nas low as as you know possible um so we\nDino has to vote for um you know the the\nwhole of the of nodes apis uh so\neverything all that knowledge that you\nalready have like a lot of the people\nthat IAL to were like I don't want to\nlearn an entirely new thing all of that\nknowledge is fully compatible you can\nyou can bring it all over we're not\nnobody wants to learn everything from\nscratch you know you've got 10 so more\nyears of experience in node now like it\nwould be ridiculous to ask people to\nlearn an entirely new tool like and and\nDino fully recognizes that um so you can\nactually check out the API compatibility\nthat we have\nuh again in the doo docs uh so if you go\nto docs. dino.com\nAPI uh you can have a look at all of the\ndino apis you can see all of the web\napis that Doo supports and you can see\nall of the node apis in there as well\nwhich Dino also supports so all of the\ndocumentation is there awesome and I'm\nhope hopefully we can even get you back\nin the future maybe talk about like some\nof the dino deploy and Edge stuff that\nyou all have yeah absolutely I'd really\nlove to show deploying a whole project\num next\ntime the next episode\n",
  "words": [
    "hello",
    "everyone",
    "name",
    "joe",
    "franti",
    "developer",
    "advocate",
    "dino",
    "uh",
    "may",
    "seen",
    "big",
    "news",
    "recently",
    "launched",
    "dino2",
    "uh",
    "know",
    "dino",
    "javascript",
    "runtime",
    "uh",
    "super",
    "fast",
    "built",
    "guy",
    "originally",
    "built",
    "node",
    "ryan",
    "dal",
    "aim",
    "building",
    "doo",
    "make",
    "javascript",
    "typescript",
    "development",
    "simple",
    "fun",
    "pleasurable",
    "delightful",
    "um",
    "remember",
    "know",
    "first",
    "became",
    "web",
    "developer",
    "dating",
    "slightly",
    "um",
    "node",
    "still",
    "new",
    "time",
    "web",
    "developers",
    "using",
    "jquery",
    "learn",
    "html",
    "javascripts",
    "css",
    "jquery",
    "basically",
    "remember",
    "first",
    "started",
    "think",
    "taught",
    "maybe",
    "summer",
    "started",
    "applying",
    "entrylevel",
    "jobs",
    "feel",
    "like",
    "developers",
    "days",
    "like",
    "really",
    "feel",
    "new",
    "developers",
    "entire",
    "ecosystem",
    "tool",
    "chain",
    "super",
    "complicated",
    "much",
    "configure",
    "much",
    "learn",
    "many",
    "tools",
    "choose",
    "even",
    "get",
    "started",
    "um",
    "dino",
    "aims",
    "reduce",
    "complexity",
    "com",
    "combining",
    "lot",
    "tools",
    "find",
    "needing",
    "right",
    "runtime",
    "dino",
    "comes",
    "linter",
    "comes",
    "format",
    "uh",
    "got",
    "typescript",
    "support",
    "uh",
    "box",
    "uh",
    "got",
    "testing",
    "built",
    "also",
    "comes",
    "lot",
    "standard",
    "web",
    "apis",
    "know",
    "love",
    "browser",
    "already",
    "baked",
    "use",
    "things",
    "like",
    "fetch",
    "use",
    "websockets",
    "use",
    "web",
    "storage",
    "whole",
    "hope",
    "making",
    "backend",
    "development",
    "javascript",
    "developers",
    "feel",
    "lot",
    "like",
    "home",
    "feel",
    "lot",
    "like",
    "web",
    "development",
    "used",
    "coming",
    "node",
    "worry",
    "dino",
    "full",
    "compatibility",
    "node",
    "node",
    "projects",
    "work",
    "dino",
    "able",
    "run",
    "take",
    "look",
    "bit",
    "later",
    "um",
    "mpm",
    "packages",
    "used",
    "node",
    "projects",
    "written",
    "modern",
    "javascript",
    "standards",
    "also",
    "work",
    "fine",
    "dino",
    "coin",
    "phrase",
    "let",
    "put",
    "money",
    "mouth",
    "going",
    "show",
    "couple",
    "projects",
    "going",
    "build",
    "couple",
    "apps",
    "dino",
    "going",
    "take",
    "look",
    "cool",
    "features",
    "going",
    "see",
    "dev",
    "experience",
    "like",
    "sort",
    "see",
    "whether",
    "think",
    "delightful",
    "experience",
    "uh",
    "first",
    "dino",
    "installed",
    "going",
    "need",
    "uh",
    "find",
    "find",
    "install",
    "command",
    "dino",
    "site",
    "going",
    "test",
    "fancy",
    "setup",
    "awesome",
    "okay",
    "find",
    "installed",
    "command",
    "need",
    "particular",
    "operating",
    "system",
    "doo",
    "doc",
    "site",
    "dino",
    "uh",
    "docs",
    "runtime",
    "um",
    "choose",
    "one",
    "need",
    "windows",
    "already",
    "got",
    "installed",
    "going",
    "install",
    "um",
    "command",
    "would",
    "need",
    "check",
    "whether",
    "installed",
    "correctly",
    "doo",
    "minus",
    "v",
    "jump",
    "editor",
    "type",
    "fe",
    "see",
    "running",
    "dino",
    "2",
    "dino",
    "installed",
    "awesome",
    "um",
    "also",
    "going",
    "want",
    "install",
    "dino",
    "extension",
    "vs",
    "code",
    "going",
    "give",
    "nice",
    "autocomplete",
    "help",
    "write",
    "apps",
    "uh",
    "vs",
    "code",
    "go",
    "extensions",
    "type",
    "dino",
    "get",
    "uh",
    "dino",
    "language",
    "client",
    "installed",
    "well",
    "going",
    "make",
    "editing",
    "dino",
    "vs",
    "code",
    "much",
    "pleasant",
    "first",
    "thing",
    "going",
    "going",
    "create",
    "new",
    "project",
    "dino",
    "actually",
    "scaffold",
    "basic",
    "project",
    "going",
    "start",
    "uh",
    "going",
    "console",
    "use",
    "dino",
    "inet",
    "command",
    "going",
    "initialize",
    "new",
    "project",
    "oh",
    "let",
    "get",
    "right",
    "uh",
    "dino",
    "adit",
    "going",
    "call",
    "project",
    "going",
    "make",
    "chat",
    "app",
    "um",
    "going",
    "show",
    "dino",
    "support",
    "websockets",
    "going",
    "call",
    "chat",
    "app",
    "see",
    "created",
    "us",
    "project",
    "says",
    "need",
    "cd",
    "project",
    "run",
    "let",
    "cd",
    "chat",
    "app",
    "let",
    "open",
    "visual",
    "studio",
    "code",
    "go",
    "awesome",
    "basic",
    "project",
    "dino",
    "scaffold",
    "know",
    "see",
    "let",
    "zoom",
    "little",
    "bit",
    "go",
    "scaffolded",
    "three",
    "files",
    "us",
    "got",
    "main",
    "ts",
    "uh",
    "uh",
    "going",
    "write",
    "code",
    "uh",
    "actually",
    "run",
    "app",
    "um",
    "run",
    "let",
    "open",
    "terminal",
    "music",
    "dino",
    "run",
    "command",
    "say",
    "dino",
    "run",
    "uh",
    "called",
    "name",
    "ts",
    "see",
    "going",
    "output",
    "uh",
    "got",
    "little",
    "add",
    "function",
    "going",
    "add",
    "two",
    "numbers",
    "together",
    "um",
    "update",
    "run",
    "uh",
    "run",
    "nice",
    "uh",
    "dino",
    "also",
    "uh",
    "really",
    "support",
    "testing",
    "like",
    "think",
    "people",
    "write",
    "tests",
    "code",
    "um",
    "scaffolded",
    "lout",
    "project",
    "actually",
    "comes",
    "test",
    "already",
    "built",
    "order",
    "run",
    "tests",
    "need",
    "know",
    "test",
    "see",
    "test",
    "passed",
    "um",
    "using",
    "assert",
    "equals",
    "function",
    "change",
    "uh",
    "run",
    "dino",
    "test",
    "see",
    "test",
    "failed",
    "time",
    "um",
    "install",
    "anything",
    "order",
    "run",
    "tests",
    "configure",
    "test",
    "runner",
    "stuff",
    "built",
    "dino",
    "uh",
    "final",
    "um",
    "exciting",
    "thing",
    "look",
    "dino",
    "json",
    "file",
    "coming",
    "node",
    "already",
    "familiar",
    "idea",
    "package",
    "json",
    "dino",
    "json",
    "configure",
    "runtime",
    "um",
    "also",
    "things",
    "like",
    "add",
    "uh",
    "scripts",
    "call",
    "tasks",
    "add",
    "dependencies",
    "call",
    "imports",
    "um",
    "things",
    "fairly",
    "uh",
    "know",
    "things",
    "recognize",
    "node",
    "music",
    "um",
    "since",
    "starting",
    "fresh",
    "going",
    "going",
    "continue",
    "using",
    "doo",
    "json",
    "already",
    "node",
    "project",
    "porting",
    "dino",
    "dino",
    "actually",
    "support",
    "package",
    "json",
    "well",
    "could",
    "use",
    "package",
    "json",
    "instead",
    "um",
    "going",
    "use",
    "dino",
    "json",
    "set",
    "uh",
    "dino",
    "andit",
    "uh",
    "dino",
    "also",
    "comes",
    "set",
    "standard",
    "modules",
    "import",
    "use",
    "project",
    "look",
    "dino",
    "json",
    "see",
    "list",
    "imports",
    "see",
    "already",
    "importing",
    "something",
    "scd",
    "assert",
    "um",
    "actually",
    "used",
    "test",
    "using",
    "assert",
    "equals",
    "assert",
    "3",
    "equals",
    "five",
    "case",
    "uh",
    "yeah",
    "doo",
    "comes",
    "uh",
    "standard",
    "library",
    "whole",
    "collection",
    "blocks",
    "code",
    "likely",
    "find",
    "needing",
    "across",
    "multiple",
    "projects",
    "idea",
    "want",
    "wasting",
    "time",
    "sort",
    "reinventing",
    "wheel",
    "standard",
    "library",
    "use",
    "get",
    "going",
    "quickly",
    "uh",
    "blocks",
    "code",
    "going",
    "use",
    "fairly",
    "frequently",
    "uh",
    "leave",
    "time",
    "focus",
    "application",
    "logic",
    "um",
    "browse",
    "standard",
    "library",
    "modules",
    "jsr",
    "uh",
    "swap",
    "browser",
    "editor",
    "go",
    "jsr",
    "see",
    "packages",
    "available",
    "dino",
    "standard",
    "library",
    "packages",
    "guaranteed",
    "work",
    "thoroughly",
    "checked",
    "tested",
    "developers",
    "um",
    "stuff",
    "know",
    "want",
    "use",
    "make",
    "time",
    "easier",
    "uh",
    "going",
    "build",
    "little",
    "chat",
    "app",
    "let",
    "idea",
    "chat",
    "app",
    "going",
    "able",
    "open",
    "multiple",
    "browser",
    "windows",
    "chck",
    "two",
    "showing",
    "sent",
    "messages",
    "going",
    "use",
    "websockets",
    "send",
    "messages",
    "um",
    "websockets",
    "way",
    "protocol",
    "enables",
    "communication",
    "browser",
    "server",
    "websockets",
    "allow",
    "send",
    "receive",
    "messages",
    "browser",
    "ser",
    "client",
    "server",
    "without",
    "constantly",
    "poll",
    "updates",
    "um",
    "going",
    "need",
    "going",
    "need",
    "set",
    "server",
    "going",
    "manage",
    "websocket",
    "connections",
    "going",
    "receive",
    "messages",
    "broadcast",
    "connected",
    "browsers",
    "order",
    "going",
    "use",
    "package",
    "jsr",
    "called",
    "oak",
    "let",
    "quick",
    "look",
    "oak",
    "really",
    "great",
    "middleware",
    "framework",
    "um",
    "says",
    "handling",
    "http",
    "going",
    "add",
    "oak",
    "package",
    "new",
    "project",
    "let",
    "jump",
    "back",
    "editor",
    "command",
    "line",
    "going",
    "say",
    "dino",
    "add",
    "use",
    "specifiers",
    "dino",
    "want",
    "add",
    "mpm",
    "package",
    "would",
    "mpm",
    "colon",
    "package",
    "name",
    "importing",
    "jsr",
    "going",
    "jsr",
    "colon",
    "package",
    "name",
    "oak",
    "oak",
    "see",
    "dino",
    "added",
    "dino",
    "json",
    "file",
    "import",
    "project",
    "uh",
    "going",
    "get",
    "rid",
    "helpful",
    "code",
    "dino",
    "added",
    "us",
    "going",
    "import",
    "modules",
    "want",
    "oak",
    "middleware",
    "let",
    "going",
    "watch",
    "fail",
    "type",
    "thank",
    "goodness",
    "going",
    "import",
    "application",
    "context",
    "applause",
    "router",
    "sl",
    "oak",
    "set",
    "json",
    "name",
    "uh",
    "oak",
    "oak",
    "see",
    "main",
    "ts",
    "use",
    "name",
    "uh",
    "going",
    "going",
    "initiate",
    "uh",
    "oak",
    "application",
    "instance",
    "fact",
    "go",
    "looks",
    "like",
    "uh",
    "back",
    "already",
    "uh",
    "going",
    "set",
    "port",
    "going",
    "set",
    "router",
    "well",
    "get",
    "started",
    "oh",
    "look",
    "got",
    "back",
    "already",
    "going",
    "set",
    "really",
    "basic",
    "route",
    "slash",
    "um",
    "base",
    "uh",
    "help",
    "us",
    "test",
    "whether",
    "server",
    "running",
    "uh",
    "integrate",
    "rout",
    "application",
    "use",
    "lod",
    "know",
    "people",
    "write",
    "without",
    "days",
    "finally",
    "going",
    "start",
    "server",
    "go",
    "await",
    "uh",
    "incoming",
    "requests",
    "visit",
    "local",
    "host",
    "browser",
    "see",
    "hello",
    "world",
    "returned",
    "let",
    "test",
    "sw",
    "browser",
    "oh",
    "going",
    "see",
    "anything",
    "returned",
    "actually",
    "running",
    "project",
    "thing",
    "talk",
    "yet",
    "um",
    "back",
    "dino",
    "json",
    "idea",
    "tasks",
    "ran",
    "project",
    "earlier",
    "dinor",
    "run",
    "um",
    "dino",
    "comes",
    "uh",
    "idea",
    "permissions",
    "based",
    "model",
    "like",
    "web",
    "development",
    "want",
    "use",
    "somebody",
    "uh",
    "media",
    "like",
    "microphone",
    "camera",
    "um",
    "uh",
    "anything",
    "else",
    "connected",
    "browser",
    "prompt",
    "permission",
    "dino",
    "thing",
    "happening",
    "dino",
    "saying",
    "need",
    "something",
    "need",
    "access",
    "something",
    "across",
    "network",
    "need",
    "allow",
    "network",
    "access",
    "um",
    "keeps",
    "projects",
    "little",
    "bit",
    "secure",
    "uh",
    "sort",
    "wild",
    "west",
    "node",
    "allows",
    "access",
    "everything",
    "um",
    "could",
    "could",
    "say",
    "instead",
    "dina",
    "run",
    "could",
    "say",
    "minus",
    "minus",
    "allow",
    "net",
    "going",
    "pain",
    "ass",
    "type",
    "constantly",
    "set",
    "things",
    "called",
    "task",
    "may",
    "wo",
    "seen",
    "prompt",
    "got",
    "got",
    "security",
    "prompt",
    "um",
    "saying",
    "want",
    "allow",
    "network",
    "access",
    "um",
    "either",
    "say",
    "yes",
    "run",
    "prompt",
    "run",
    "dino",
    "run",
    "uh",
    "minus",
    "minus",
    "allow",
    "net",
    "flag",
    "set",
    "task",
    "going",
    "run",
    "dina",
    "run",
    "command",
    "us",
    "going",
    "say",
    "allow",
    "net",
    "uh",
    "command",
    "line",
    "seen",
    "ca",
    "actually",
    "see",
    "see",
    "screen",
    "looks",
    "like",
    "bottom",
    "let",
    "uh",
    "bit",
    "smaller",
    "go",
    "cool",
    "uh",
    "instead",
    "task",
    "spell",
    "allow",
    "wrong",
    "let",
    "try",
    "go",
    "okay",
    "server",
    "running",
    "port",
    "8000",
    "open",
    "browser",
    "see",
    "little",
    "hello",
    "world",
    "excellent",
    "uh",
    "super",
    "basic",
    "uh",
    "http",
    "server",
    "set",
    "oak",
    "let",
    "actually",
    "sca",
    "p",
    "interesting",
    "uh",
    "functionality",
    "chat",
    "app",
    "um",
    "want",
    "use",
    "example",
    "want",
    "use",
    "feet",
    "set",
    "tools",
    "wanted",
    "show",
    "make",
    "really",
    "bare",
    "bones",
    "application",
    "um",
    "look",
    "something",
    "little",
    "bit",
    "tooled",
    "later",
    "let",
    "set",
    "super",
    "basic",
    "dev",
    "server",
    "going",
    "serve",
    "html",
    "css",
    "client",
    "side",
    "javascript",
    "let",
    "jump",
    "back",
    "editor",
    "file",
    "going",
    "uh",
    "get",
    "rid",
    "rout",
    "instead",
    "going",
    "say",
    "want",
    "uh",
    "app",
    "use",
    "go",
    "going",
    "set",
    "root",
    "current",
    "working",
    "directory",
    "uh",
    "public",
    "folder",
    "make",
    "index",
    "going",
    "nice",
    "okay",
    "going",
    "send",
    "file",
    "http",
    "response",
    "doo",
    "cwd",
    "current",
    "working",
    "directory",
    "um",
    "uh",
    "yeah",
    "going",
    "set",
    "index",
    "file",
    "default",
    "file",
    "serve",
    "root",
    "url",
    "accessed",
    "let",
    "make",
    "folder",
    "make",
    "public",
    "inside",
    "make",
    "going",
    "scaffold",
    "really",
    "basic",
    "chat",
    "app",
    "going",
    "uh",
    "text",
    "input",
    "going",
    "button",
    "send",
    "going",
    "list",
    "online",
    "users",
    "going",
    "div",
    "going",
    "contain",
    "conversation",
    "let",
    "try",
    "gave",
    "little",
    "bit",
    "boil",
    "plate",
    "call",
    "uh",
    "chat",
    "app",
    "body",
    "uh",
    "going",
    "cheat",
    "time",
    "boring",
    "old",
    "header",
    "h1",
    "side",
    "uh",
    "going",
    "show",
    "online",
    "users",
    "um",
    "container",
    "div",
    "going",
    "hold",
    "messages",
    "form",
    "input",
    "send",
    "button",
    "um",
    "going",
    "add",
    "css",
    "um",
    "moment",
    "looks",
    "quite",
    "boring",
    "uh",
    "let",
    "see",
    "oh",
    "okay",
    "know",
    "saw",
    "um",
    "refreshed",
    "browser",
    "dino",
    "said",
    "wait",
    "second",
    "uh",
    "asked",
    "uh",
    "server",
    "file",
    "need",
    "read",
    "access",
    "file",
    "doo",
    "json",
    "going",
    "add",
    "allow",
    "read",
    "run",
    "task",
    "look",
    "browser",
    "ugly",
    "chat",
    "app",
    "let",
    "quickly",
    "add",
    "css",
    "going",
    "one",
    "made",
    "earlier",
    "situation",
    "uh",
    "look",
    "css",
    "later",
    "would",
    "like",
    "going",
    "make",
    "another",
    "new",
    "folder",
    "new",
    "file",
    "paste",
    "bunch",
    "styles",
    "refresh",
    "browser",
    "need",
    "public",
    "oh",
    "style",
    "singular",
    "go",
    "okay",
    "uh",
    "open",
    "browser",
    "see",
    "beautiful",
    "chat",
    "app",
    "let",
    "change",
    "size",
    "window",
    "actually",
    "see",
    "go",
    "stunning",
    "beautiful",
    "chat",
    "app",
    "nice",
    "uh",
    "anything",
    "moment",
    "type",
    "click",
    "send",
    "nothing",
    "happens",
    "know",
    "online",
    "asked",
    "anybody",
    "online",
    "uh",
    "collected",
    "anybody",
    "names",
    "um",
    "going",
    "anything",
    "functional",
    "moment",
    "javascript",
    "let",
    "add",
    "client",
    "side",
    "javascript",
    "mix",
    "back",
    "editor",
    "going",
    "also",
    "add",
    "script",
    "tag",
    "going",
    "defer",
    "going",
    "type",
    "module",
    "source",
    "going",
    "sure",
    "call",
    "awesome",
    "okay",
    "um",
    "put",
    "console",
    "log",
    "test",
    "worked",
    "hello",
    "open",
    "browser",
    "see",
    "howo",
    "script",
    "yes",
    "awesome",
    "getting",
    "assets",
    "served",
    "little",
    "server",
    "um",
    "moment",
    "way",
    "knowing",
    "uh",
    "like",
    "chat",
    "um",
    "functionality",
    "let",
    "start",
    "prompting",
    "user",
    "name",
    "little",
    "script",
    "js",
    "going",
    "set",
    "new",
    "part",
    "username",
    "going",
    "mean",
    "super",
    "lowy",
    "going",
    "prompt",
    "say",
    "uh",
    "enter",
    "bit",
    "polite",
    "please",
    "enter",
    "username",
    "um",
    "close",
    "prompt",
    "going",
    "call",
    "anonymous",
    "um",
    "next",
    "going",
    "construct",
    "new",
    "url",
    "web",
    "socket",
    "connection",
    "uh",
    "set",
    "url",
    "uh",
    "going",
    "going",
    "um",
    "sl",
    "websocket",
    "oh",
    "let",
    "ws",
    "typing",
    "ease",
    "also",
    "going",
    "give",
    "username",
    "parameter",
    "go",
    "uh",
    "thank",
    "coob",
    "need",
    "window",
    "awesome",
    "saying",
    "uh",
    "going",
    "set",
    "new",
    "web",
    "circuit",
    "connection",
    "um",
    "going",
    "uh",
    "replace",
    "protocol",
    "instead",
    "http",
    "going",
    "ws",
    "say",
    "url",
    "protocol",
    "equals",
    "yep",
    "go",
    "url",
    "protocol",
    "replace",
    "http",
    "ws",
    "going",
    "open",
    "websocket",
    "connection",
    "constructed",
    "url",
    "go",
    "uh",
    "going",
    "update",
    "server",
    "actually",
    "something",
    "web",
    "circuit",
    "connection",
    "made",
    "jump",
    "back",
    "server",
    "sl",
    "uh",
    "rout",
    "except",
    "going",
    "put",
    "ws",
    "going",
    "pass",
    "context",
    "um",
    "see",
    "writing",
    "typescript",
    "need",
    "configure",
    "anything",
    "order",
    "uh",
    "typescript",
    "supported",
    "box",
    "dino",
    "uh",
    "works",
    "would",
    "work",
    "could",
    "type",
    "going",
    "get",
    "user",
    "name",
    "parameters",
    "url",
    "console",
    "log",
    "person",
    "connected",
    "uh",
    "open",
    "browser",
    "music",
    "refresh",
    "prompted",
    "username",
    "say",
    "joe",
    "ca",
    "see",
    "editor",
    "got",
    "little",
    "console",
    "log",
    "saying",
    "joe",
    "connected",
    "awesome",
    "okay",
    "uh",
    "going",
    "actually",
    "build",
    "chap",
    "application",
    "logic",
    "um",
    "like",
    "keep",
    "files",
    "nice",
    "neat",
    "going",
    "split",
    "chat",
    "app",
    "logic",
    "file",
    "going",
    "call",
    "chat",
    "server",
    "ts",
    "uh",
    "let",
    "import",
    "chat",
    "server",
    "helpful",
    "quite",
    "helpful",
    "enough",
    "co",
    "pilot",
    "thank",
    "uh",
    "uh",
    "let",
    "actually",
    "build",
    "chat",
    "server",
    "chat",
    "server",
    "going",
    "going",
    "need",
    "context",
    "well",
    "request",
    "let",
    "import",
    "context",
    "oak",
    "uh",
    "going",
    "give",
    "us",
    "information",
    "http",
    "request",
    "gives",
    "us",
    "access",
    "things",
    "like",
    "headers",
    "url",
    "parameters",
    "body",
    "importantly",
    "lets",
    "us",
    "upgrade",
    "connection",
    "http",
    "websockets",
    "uh",
    "going",
    "export",
    "uh",
    "call",
    "chat",
    "server",
    "yep",
    "uh",
    "going",
    "put",
    "method",
    "called",
    "handle",
    "connection",
    "going",
    "handle",
    "connection",
    "music",
    "uh",
    "get",
    "context",
    "let",
    "see",
    "uh",
    "done",
    "uh",
    "wrong",
    "place",
    "keyboard",
    "socket",
    "going",
    "upgrade",
    "um",
    "going",
    "allow",
    "us",
    "move",
    "polling",
    "websockets",
    "going",
    "get",
    "username",
    "console",
    "log",
    "uh",
    "yeah",
    "uh",
    "able",
    "jump",
    "back",
    "actually",
    "use",
    "method",
    "exported",
    "um",
    "let",
    "uh",
    "going",
    "put",
    "let",
    "put",
    "uh",
    "want",
    "lowercase",
    "uh",
    "uh",
    "change",
    "instead",
    "put",
    "passed",
    "across",
    "chat",
    "server",
    "going",
    "say",
    "chat",
    "server",
    "handle",
    "connection",
    "pass",
    "context",
    "nice",
    "okay",
    "uh",
    "let",
    "briefly",
    "jump",
    "back",
    "browser",
    "refresh",
    "make",
    "sure",
    "still",
    "working",
    "yeah",
    "see",
    "joe",
    "connected",
    "awesome",
    "okay",
    "uh",
    "know",
    "user",
    "online",
    "go",
    "server",
    "side",
    "javascript",
    "actually",
    "add",
    "name",
    "list",
    "online",
    "users",
    "uh",
    "sorry",
    "onto",
    "client",
    "side",
    "javascript",
    "meant",
    "uh",
    "let",
    "um",
    "let",
    "make",
    "new",
    "function",
    "called",
    "uh",
    "update",
    "user",
    "list",
    "going",
    "usernames",
    "uh",
    "let",
    "see",
    "work",
    "going",
    "going",
    "html",
    "going",
    "say",
    "uh",
    "yeah",
    "create",
    "list",
    "create",
    "bunch",
    "lis",
    "uh",
    "add",
    "username",
    "lii",
    "append",
    "list",
    "usern",
    "uh",
    "username",
    "uh",
    "list",
    "uh",
    "ca",
    "remember",
    "call",
    "think",
    "called",
    "user",
    "list",
    "called",
    "users",
    "excellent",
    "okay",
    "uh",
    "also",
    "know",
    "want",
    "user",
    "able",
    "type",
    "message",
    "input",
    "uh",
    "let",
    "make",
    "selector",
    "input",
    "make",
    "selector",
    "form",
    "well",
    "call",
    "input",
    "form",
    "html",
    "called",
    "form",
    "input",
    "excellent",
    "uh",
    "want",
    "cursor",
    "focus",
    "go",
    "straight",
    "onto",
    "input",
    "finished",
    "entering",
    "name",
    "start",
    "typing",
    "message",
    "immediately",
    "going",
    "input",
    "focus",
    "nice",
    "bit",
    "extra",
    "usability",
    "um",
    "going",
    "form",
    "submitted",
    "want",
    "send",
    "message",
    "across",
    "socket",
    "let",
    "form",
    "onsubmit",
    "e",
    "prevent",
    "default",
    "message",
    "input",
    "value",
    "empty",
    "thing",
    "going",
    "socket",
    "send",
    "going",
    "stringify",
    "message",
    "along",
    "going",
    "call",
    "message",
    "event",
    "music",
    "send",
    "send",
    "message",
    "well",
    "uh",
    "made",
    "form",
    "html",
    "form",
    "submit",
    "happens",
    "pressing",
    "submit",
    "button",
    "pressing",
    "enter",
    "need",
    "like",
    "listening",
    "keyboards",
    "listening",
    "clicks",
    "anything",
    "like",
    "submit",
    "um",
    "need",
    "update",
    "server",
    "actually",
    "something",
    "message",
    "done",
    "web",
    "socket",
    "send",
    "need",
    "actually",
    "update",
    "chat",
    "server",
    "something",
    "uh",
    "um",
    "writing",
    "typescript",
    "mentioned",
    "uh",
    "first",
    "thing",
    "going",
    "uh",
    "set",
    "types",
    "us",
    "use",
    "going",
    "uh",
    "extend",
    "web",
    "socket",
    "type",
    "include",
    "username",
    "let",
    "make",
    "nice",
    "new",
    "type",
    "uh",
    "go",
    "thank",
    "got",
    "web",
    "socket",
    "also",
    "going",
    "username",
    "going",
    "set",
    "type",
    "app",
    "event",
    "well",
    "uh",
    "going",
    "uh",
    "string",
    "cool",
    "nice",
    "upgrade",
    "socket",
    "circuit",
    "username",
    "nice",
    "um",
    "going",
    "also",
    "set",
    "uh",
    "new",
    "uh",
    "property",
    "going",
    "call",
    "connected",
    "clients",
    "going",
    "store",
    "connection",
    "websocket",
    "store",
    "collection",
    "web",
    "sockets",
    "music",
    "connections",
    "yes",
    "perfect",
    "okay",
    "um",
    "going",
    "stop",
    "people",
    "able",
    "take",
    "usernames",
    "already",
    "exist",
    "uh",
    "got",
    "username",
    "say",
    "connected",
    "clients",
    "username",
    "uh",
    "socket",
    "close",
    "uh",
    "108",
    "user",
    "already",
    "connected",
    "lovely",
    "uh",
    "complaining",
    "okay",
    "going",
    "che",
    "um",
    "know",
    "username",
    "always",
    "going",
    "assigned",
    "either",
    "going",
    "something",
    "typed",
    "going",
    "word",
    "anonymous",
    "going",
    "cheat",
    "uh",
    "awesome",
    "going",
    "return",
    "asked",
    "give",
    "different",
    "username",
    "let",
    "set",
    "methods",
    "actually",
    "flesh",
    "app",
    "know",
    "going",
    "want",
    "send",
    "message",
    "let",
    "set",
    "know",
    "going",
    "want",
    "something",
    "client",
    "disconnects",
    "going",
    "want",
    "update",
    "list",
    "usernames",
    "client",
    "joins",
    "client",
    "connects",
    "uh",
    "let",
    "build",
    "first",
    "client",
    "connected",
    "uh",
    "going",
    "need",
    "pass",
    "username",
    "string",
    "going",
    "say",
    "client",
    "disconnects",
    "delete",
    "username",
    "list",
    "broadcast",
    "list",
    "new",
    "usernames",
    "copilot",
    "already",
    "spell",
    "connected",
    "three",
    "ends",
    "amazing",
    "let",
    "fix",
    "thank",
    "goodness",
    "spell",
    "check",
    "built",
    "vs",
    "code",
    "um",
    "awesome",
    "okay",
    "uh",
    "client",
    "disconnects",
    "going",
    "remove",
    "going",
    "rebroadcast",
    "list",
    "usernames",
    "um",
    "let",
    "update",
    "broadcast",
    "names",
    "function",
    "since",
    "going",
    "um",
    "going",
    "going",
    "extract",
    "keys",
    "connected",
    "clients",
    "map",
    "get",
    "list",
    "usernames",
    "create",
    "array",
    "going",
    "broadcast",
    "message",
    "new",
    "array",
    "say",
    "music",
    "music",
    "uh",
    "something",
    "actually",
    "mentioned",
    "yet",
    "uh",
    "bad",
    "remembering",
    "put",
    "semicolons",
    "end",
    "lines",
    "uh",
    "dino",
    "comes",
    "form",
    "matter",
    "um",
    "work",
    "people",
    "bizarre",
    "things",
    "shap",
    "code",
    "actually",
    "run",
    "dino",
    "format",
    "auto",
    "format",
    "file",
    "looks",
    "beautiful",
    "um",
    "add",
    "semicolons",
    "onto",
    "lines",
    "could",
    "gotten",
    "add",
    "crime",
    "um",
    "obviously",
    "format",
    "fully",
    "customizable",
    "change",
    "rules",
    "uses",
    "someone",
    "like",
    "semicolons",
    "um",
    "dino",
    "json",
    "would",
    "set",
    "rules",
    "formatter",
    "lenter",
    "uh",
    "test",
    "runner",
    "uh",
    "yeah",
    "little",
    "aside",
    "um",
    "yes",
    "uh",
    "going",
    "broadcast",
    "uh",
    "usernames",
    "event",
    "update",
    "users",
    "also",
    "usernames",
    "go",
    "okay",
    "awesome",
    "uh",
    "made",
    "method",
    "called",
    "broadcast",
    "exist",
    "let",
    "create",
    "uh",
    "going",
    "indeed",
    "need",
    "app",
    "event",
    "going",
    "take",
    "message",
    "string",
    "uh",
    "going",
    "sorry",
    "create",
    "going",
    "stringify",
    "message",
    "send",
    "message",
    "yeah",
    "fact",
    "nice",
    "naming",
    "uh",
    "four",
    "yep",
    "okay",
    "awesome",
    "clients",
    "uh",
    "send",
    "message",
    "finally",
    "let",
    "make",
    "send",
    "function",
    "put",
    "spaces",
    "give",
    "bit",
    "breathing",
    "room",
    "go",
    "bit",
    "nicer",
    "uh",
    "need",
    "give",
    "information",
    "going",
    "need",
    "username",
    "message",
    "event",
    "yep",
    "going",
    "say",
    "class",
    "data",
    "uh",
    "message",
    "data",
    "lost",
    "bracket",
    "somehow",
    "equal",
    "send",
    "message",
    "return",
    "like",
    "return",
    "early",
    "often",
    "telling",
    "got",
    "extra",
    "bracket",
    "yes",
    "okay",
    "excellent",
    "uh",
    "otherwise",
    "broadcast",
    "um",
    "going",
    "broadcast",
    "event",
    "going",
    "uh",
    "send",
    "message",
    "username",
    "going",
    "username",
    "message",
    "going",
    "message",
    "data",
    "lovely",
    "okay",
    "let",
    "format",
    "okay",
    "awesome",
    "actually",
    "call",
    "methods",
    "actually",
    "things",
    "webset",
    "connection",
    "uh",
    "stuff",
    "happens",
    "web",
    "soet",
    "connection",
    "either",
    "message",
    "sent",
    "someone",
    "connects",
    "someone",
    "disconnects",
    "let",
    "next",
    "uh",
    "yeah",
    "uh",
    "handle",
    "connection",
    "going",
    "say",
    "uh",
    "socket",
    "username",
    "going",
    "username",
    "socket",
    "onop",
    "going",
    "say",
    "uh",
    "open",
    "want",
    "broadcast",
    "uh",
    "usernames",
    "say",
    "cast",
    "usernames",
    "going",
    "bind",
    "uh",
    "going",
    "say",
    "socket",
    "close",
    "close",
    "want",
    "run",
    "client",
    "disconnected",
    "give",
    "username",
    "message",
    "received",
    "sock",
    "message",
    "uh",
    "exactly",
    "going",
    "say",
    "send",
    "uh",
    "socket",
    "username",
    "uh",
    "message",
    "finally",
    "going",
    "set",
    "connected",
    "clients",
    "username",
    "connection",
    "say",
    "copilot",
    "already",
    "knows",
    "need",
    "uh",
    "final",
    "thing",
    "need",
    "actually",
    "update",
    "client",
    "side",
    "javascript",
    "deal",
    "messages",
    "going",
    "receive",
    "uh",
    "okay",
    "good",
    "let",
    "jump",
    "back",
    "um",
    "receive",
    "message",
    "websocket",
    "server",
    "going",
    "contain",
    "username",
    "going",
    "contain",
    "sort",
    "message",
    "text",
    "want",
    "able",
    "display",
    "browser",
    "um",
    "could",
    "know",
    "um",
    "creating",
    "elements",
    "javascript",
    "appending",
    "think",
    "actually",
    "nicer",
    "use",
    "template",
    "html",
    "um",
    "templates",
    "super",
    "cool",
    "uh",
    "fact",
    "going",
    "copy",
    "pter",
    "uh",
    "gravity",
    "sake",
    "done",
    "uh",
    "got",
    "template",
    "given",
    "id",
    "message",
    "inside",
    "template",
    "container",
    "div",
    "styling",
    "span",
    "going",
    "contain",
    "username",
    "paragraph",
    "going",
    "contain",
    "message",
    "back",
    "script",
    "uh",
    "create",
    "function",
    "run",
    "message",
    "received",
    "going",
    "get",
    "template",
    "populate",
    "append",
    "html",
    "let",
    "put",
    "call",
    "add",
    "message",
    "going",
    "get",
    "music",
    "username",
    "message",
    "uh",
    "c",
    "template",
    "yeah",
    "call",
    "called",
    "messages",
    "think",
    "message",
    "singular",
    "uh",
    "clone",
    "yep",
    "uh",
    "except",
    "getting",
    "spam",
    "setting",
    "context",
    "text",
    "username",
    "name",
    "ca",
    "spell",
    "says",
    "spin",
    "grab",
    "p",
    "put",
    "message",
    "going",
    "something",
    "clever",
    "uh",
    "see",
    "um",
    "suggested",
    "pend",
    "going",
    "prepend",
    "reason",
    "um",
    "know",
    "writing",
    "text",
    "chat",
    "want",
    "messages",
    "scroll",
    "top",
    "screen",
    "come",
    "um",
    "obviously",
    "default",
    "uh",
    "adding",
    "scroll",
    "bar",
    "wo",
    "move",
    "done",
    "css",
    "actually",
    "invert",
    "container",
    "um",
    "prepending",
    "putting",
    "thing",
    "bottom",
    "scroll",
    "actually",
    "move",
    "new",
    "messages",
    "come",
    "uh",
    "hack",
    "found",
    "uh",
    "w3c",
    "think",
    "places",
    "quite",
    "like",
    "um",
    "message",
    "received",
    "let",
    "actually",
    "something",
    "uh",
    "going",
    "ws",
    "message",
    "going",
    "pa",
    "yep",
    "exactly",
    "exactly",
    "okay",
    "going",
    "going",
    "create",
    "new",
    "variable",
    "going",
    "contain",
    "data",
    "going",
    "past",
    "data",
    "going",
    "make",
    "switch",
    "statement",
    "going",
    "say",
    "case",
    "updating",
    "users",
    "going",
    "update",
    "user",
    "list",
    "uh",
    "usernames",
    "case",
    "send",
    "message",
    "uh",
    "going",
    "add",
    "message",
    "data",
    "get",
    "username",
    "message",
    "run",
    "add",
    "message",
    "function",
    "made",
    "okay",
    "whirlwind",
    "uh",
    "introduction",
    "uh",
    "let",
    "take",
    "quick",
    "look",
    "browser",
    "see",
    "actually",
    "works",
    "come",
    "process",
    "failed",
    "get",
    "wrong",
    "chat",
    "server",
    "typo",
    "somewhere",
    "lost",
    "bracket",
    "somewhere",
    "okay",
    "seems",
    "running",
    "music",
    "go",
    "okay",
    "awesome",
    "hello",
    "read",
    "properties",
    "uh",
    "missed",
    "name",
    "something",
    "get",
    "element",
    "message",
    "oh",
    "bet",
    "call",
    "call",
    "conversation",
    "go",
    "music",
    "yay",
    "okay",
    "awesome",
    "let",
    "open",
    "another",
    "browser",
    "window",
    "hooray",
    "okay",
    "super",
    "speedy",
    "uh",
    "building",
    "entire",
    "chat",
    "app",
    "something",
    "else",
    "wanted",
    "show",
    "briefly",
    "um",
    "node",
    "projects",
    "also",
    "work",
    "dino",
    "um",
    "let",
    "make",
    "entire",
    "new",
    "project",
    "wo",
    "perhaps",
    "wo",
    "build",
    "entire",
    "second",
    "app",
    "quick",
    "look",
    "using",
    "tool",
    "chain",
    "might",
    "know",
    "love",
    "um",
    "uh",
    "know",
    "lot",
    "people",
    "obviously",
    "using",
    "next",
    "right",
    "really",
    "important",
    "dino",
    "runs",
    "next",
    "project",
    "wanted",
    "prove",
    "everybody",
    "package",
    "json",
    "completely",
    "works",
    "mpm",
    "imports",
    "completely",
    "work",
    "dino",
    "let",
    "make",
    "brand",
    "new",
    "uh",
    "next",
    "project",
    "doo",
    "run",
    "minus",
    "minus",
    "saw",
    "permission",
    "prompts",
    "earlier",
    "minus",
    "saying",
    "allow",
    "everything",
    "allow",
    "access",
    "everything",
    "kind",
    "like",
    "default",
    "setting",
    "node",
    "uh",
    "going",
    "say",
    "mpm",
    "create",
    "next",
    "app",
    "latest",
    "call",
    "uh",
    "test",
    "next",
    "app",
    "take",
    "defaults",
    "watch",
    "install",
    "pray",
    "internet",
    "fast",
    "enough",
    "um",
    "uh",
    "original",
    "hope",
    "build",
    "entire",
    "uh",
    "next",
    "project",
    "well",
    "took",
    "way",
    "long",
    "chat",
    "app",
    "watching",
    "install",
    "show",
    "resources",
    "use",
    "uh",
    "uh",
    "building",
    "next",
    "app",
    "go",
    "docs",
    "runtime",
    "uh",
    "got",
    "whole",
    "load",
    "tutorial",
    "using",
    "react",
    "using",
    "next",
    "using",
    "view",
    "uh",
    "absolutely",
    "use",
    "uh",
    "dino",
    "um",
    "app",
    "going",
    "build",
    "actually",
    "written",
    "want",
    "follow",
    "along",
    "totally",
    "build",
    "entire",
    "dinosaur",
    "app",
    "um",
    "let",
    "jump",
    "back",
    "editor",
    "see",
    "built",
    "next",
    "app",
    "cd",
    "test",
    "next",
    "app",
    "open",
    "music",
    "see",
    "mean",
    "standard",
    "next",
    "app",
    "seen",
    "package",
    "json",
    "scripts",
    "dependencies",
    "dino",
    "run",
    "dev",
    "doo",
    "task",
    "dev",
    "going",
    "run",
    "set",
    "little",
    "next",
    "app",
    "us",
    "uh",
    "open",
    "browser",
    "finished",
    "compiling",
    "go",
    "uh",
    "fully",
    "functional",
    "next",
    "app",
    "um",
    "works",
    "exactly",
    "would",
    "expect",
    "next",
    "work",
    "um",
    "run",
    "dino",
    "want",
    "know",
    "add",
    "dependencies",
    "package",
    "json",
    "dino",
    "able",
    "use",
    "also",
    "want",
    "add",
    "dino",
    "json",
    "want",
    "things",
    "like",
    "start",
    "configuring",
    "format",
    "ler",
    "um",
    "indeed",
    "prefer",
    "adding",
    "dependencies",
    "dino",
    "able",
    "work",
    "fine",
    "package",
    "json",
    "dino",
    "json",
    "um",
    "problem",
    "uh",
    "yeah",
    "want",
    "see",
    "code",
    "project",
    "built",
    "today",
    "absolutely",
    "github",
    "let",
    "get",
    "link",
    "uh",
    "fact",
    "let",
    "go",
    "let",
    "open",
    "browser",
    "actually",
    "look",
    "um",
    "tutorial",
    "walked",
    "today",
    "chat",
    "app",
    "finished",
    "project",
    "let",
    "paste",
    "chat",
    "um",
    "zoom",
    "anyone",
    "watching",
    "online",
    "uh",
    "want",
    "code",
    "see",
    "also",
    "whole",
    "bunch",
    "tutorials",
    "repository",
    "go",
    "dino",
    "repository",
    "search",
    "tutorial",
    "st",
    "go",
    "whole",
    "bunch",
    "tutorials",
    "adding",
    "uh",
    "every",
    "day",
    "check",
    "back",
    "um",
    "particular",
    "libraries",
    "interested",
    "would",
    "love",
    "hear",
    "um",
    "add",
    "um",
    "takeaway",
    "message",
    "dino",
    "works",
    "anything",
    "special",
    "giant",
    "sort",
    "porting",
    "job",
    "migrating",
    "node",
    "dino",
    "things",
    "know",
    "love",
    "work",
    "dino",
    "um",
    "mpm",
    "packages",
    "trying",
    "use",
    "use",
    "es",
    "modules",
    "need",
    "update",
    "also",
    "helpful",
    "uh",
    "advice",
    "go",
    "uh",
    "doo",
    "documentation",
    "whole",
    "load",
    "advice",
    "upgrading",
    "upgrading",
    "comm",
    "js",
    "es",
    "modules",
    "okay",
    "um",
    "well",
    "wind",
    "introduction",
    "dino",
    "uh",
    "hope",
    "interesting",
    "seen",
    "questions",
    "come",
    "know",
    "questions",
    "least",
    "one",
    "um",
    "um",
    "basically",
    "around",
    "essentially",
    "kind",
    "covering",
    "somebody",
    "experiencing",
    "like",
    "trying",
    "run",
    "existing",
    "node",
    "app",
    "doo",
    "um",
    "sharing",
    "errors",
    "came",
    "across",
    "um",
    "including",
    "um",
    "like",
    "relative",
    "import",
    "path",
    "module",
    "prefixed",
    "uh",
    "guess",
    "says",
    "use",
    "node",
    "colon",
    "module",
    "like",
    "something",
    "like",
    "existing",
    "node",
    "app",
    "want",
    "go",
    "ahead",
    "port",
    "things",
    "going",
    "run",
    "like",
    "kind",
    "configuration",
    "maybe",
    "like",
    "run",
    "something",
    "like",
    "mean",
    "depend",
    "entirely",
    "know",
    "depend",
    "project",
    "guide",
    "trying",
    "find",
    "um",
    "whole",
    "guide",
    "things",
    "might",
    "run",
    "majority",
    "project",
    "work",
    "however",
    "um",
    "know",
    "bunch",
    "node",
    "build",
    "buin",
    "may",
    "need",
    "know",
    "node",
    "specifier",
    "example",
    "using",
    "um",
    "os",
    "might",
    "using",
    "node",
    "specific",
    "fs",
    "example",
    "would",
    "need",
    "node",
    "colon",
    "fs",
    "node",
    "colon",
    "os",
    "use",
    "node",
    "modules",
    "doo",
    "support",
    "um",
    "using",
    "mpm",
    "packages",
    "mpm",
    "specifier",
    "way",
    "go",
    "um",
    "mentioned",
    "using",
    "es",
    "modules",
    "need",
    "update",
    "use",
    "es",
    "modules",
    "know",
    "supports",
    "es",
    "modules",
    "support",
    "commonjs",
    "um",
    "also",
    "tooling",
    "help",
    "uh",
    "swap",
    "uh",
    "place",
    "look",
    "um",
    "docs",
    "runtime",
    "fundamentals",
    "node",
    "okay",
    "yeah",
    "think",
    "error",
    "running",
    "uh",
    "something",
    "along",
    "lines",
    "cuz",
    "says",
    "require",
    "define",
    "right",
    "like",
    "yeah",
    "anything",
    "users",
    "require",
    "going",
    "go",
    "ahead",
    "update",
    "gon",
    "na",
    "okay",
    "question",
    "would",
    "like",
    "okay",
    "let",
    "say",
    "node",
    "project",
    "like",
    "port",
    "dino",
    "like",
    "things",
    "benefits",
    "might",
    "see",
    "know",
    "uh",
    "dino",
    "well",
    "dino",
    "built",
    "rust",
    "um",
    "actually",
    "slightly",
    "faster",
    "node",
    "first",
    "thing",
    "talking",
    "know",
    "seconds",
    "difference",
    "may",
    "enough",
    "people",
    "um",
    "one",
    "things",
    "spoke",
    "know",
    "support",
    "typescript",
    "test",
    "runner",
    "linta",
    "formata",
    "things",
    "mean",
    "sort",
    "flatten",
    "project",
    "lot",
    "need",
    "importing",
    "load",
    "dependencies",
    "need",
    "load",
    "configuration",
    "like",
    "keeps",
    "project",
    "folders",
    "lot",
    "neater",
    "uh",
    "dino",
    "also",
    "um",
    "uh",
    "building",
    "dino",
    "project",
    "scratch",
    "dino",
    "notice",
    "node",
    "modules",
    "folder",
    "uses",
    "centralized",
    "global",
    "cache",
    "instead",
    "uh",
    "keeps",
    "project",
    "little",
    "bit",
    "neater",
    "um",
    "thing",
    "looked",
    "security",
    "angle",
    "bit",
    "wild",
    "west",
    "sometimes",
    "especially",
    "installing",
    "bunch",
    "dependencies",
    "looking",
    "exactly",
    "may",
    "accessing",
    "things",
    "expecting",
    "getting",
    "warning",
    "um",
    "console",
    "actually",
    "quite",
    "nice",
    "way",
    "keep",
    "eye",
    "accessing",
    "know",
    "set",
    "http",
    "server",
    "asked",
    "network",
    "access",
    "like",
    "yes",
    "course",
    "network",
    "access",
    "need",
    "installed",
    "dependency",
    "suddenly",
    "something",
    "asking",
    "network",
    "access",
    "might",
    "know",
    "want",
    "look",
    "happening",
    "dependency",
    "keeps",
    "little",
    "bit",
    "safer",
    "yeah",
    "fact",
    "think",
    "last",
    "presentation",
    "month",
    "ago",
    "specifically",
    "dependencies",
    "kind",
    "security",
    "nightmares",
    "cause",
    "um",
    "node",
    "among",
    "know",
    "npm",
    "registry",
    "among",
    "biggest",
    "like",
    "kind",
    "potential",
    "attack",
    "vectors",
    "could",
    "find",
    "um",
    "makes",
    "lot",
    "sense",
    "uh",
    "existing",
    "one",
    "mean",
    "guess",
    "like",
    "path",
    "transitioning",
    "npm",
    "got",
    "full",
    "npm",
    "compatibility",
    "like",
    "maybe",
    "want",
    "start",
    "kind",
    "taking",
    "benefits",
    "security",
    "like",
    "transition",
    "moving",
    "yeah",
    "mean",
    "still",
    "still",
    "get",
    "security",
    "soon",
    "start",
    "running",
    "node",
    "soon",
    "type",
    "know",
    "dino",
    "task",
    "dev",
    "going",
    "say",
    "need",
    "access",
    "automatically",
    "going",
    "prompt",
    "things",
    "needed",
    "nice",
    "way",
    "actually",
    "find",
    "program",
    "stuff",
    "know",
    "okay",
    "yeah",
    "okay",
    "even",
    "even",
    "need",
    "use",
    "dino",
    "centralized",
    "cache",
    "version",
    "anything",
    "get",
    "security",
    "automatically",
    "even",
    "cool",
    "excellent",
    "um",
    "yeah",
    "think",
    "one",
    "things",
    "like",
    "showed",
    "learning",
    "something",
    "entirely",
    "new",
    "like",
    "learning",
    "curve",
    "pretty",
    "low",
    "mpm",
    "compatibility",
    "low",
    "know",
    "possible",
    "um",
    "dino",
    "vote",
    "um",
    "know",
    "whole",
    "nodes",
    "apis",
    "uh",
    "everything",
    "knowledge",
    "already",
    "like",
    "lot",
    "people",
    "ial",
    "like",
    "want",
    "learn",
    "entirely",
    "new",
    "thing",
    "knowledge",
    "fully",
    "compatible",
    "bring",
    "nobody",
    "wants",
    "learn",
    "everything",
    "scratch",
    "know",
    "got",
    "10",
    "years",
    "experience",
    "node",
    "like",
    "would",
    "ridiculous",
    "ask",
    "people",
    "learn",
    "entirely",
    "new",
    "tool",
    "like",
    "dino",
    "fully",
    "recognizes",
    "um",
    "actually",
    "check",
    "api",
    "compatibility",
    "uh",
    "doo",
    "docs",
    "uh",
    "go",
    "docs",
    "api",
    "uh",
    "look",
    "dino",
    "apis",
    "see",
    "web",
    "apis",
    "doo",
    "supports",
    "see",
    "node",
    "apis",
    "well",
    "dino",
    "also",
    "supports",
    "documentation",
    "awesome",
    "hope",
    "hopefully",
    "even",
    "get",
    "back",
    "future",
    "maybe",
    "talk",
    "like",
    "dino",
    "deploy",
    "edge",
    "stuff",
    "yeah",
    "absolutely",
    "really",
    "love",
    "show",
    "deploying",
    "whole",
    "project",
    "um",
    "next",
    "time",
    "next",
    "episode"
  ],
  "keywords": [
    "hello",
    "name",
    "dino",
    "uh",
    "may",
    "seen",
    "know",
    "javascript",
    "runtime",
    "super",
    "built",
    "node",
    "doo",
    "make",
    "typescript",
    "um",
    "first",
    "web",
    "new",
    "time",
    "developers",
    "using",
    "learn",
    "html",
    "css",
    "think",
    "like",
    "really",
    "entire",
    "even",
    "get",
    "lot",
    "find",
    "comes",
    "format",
    "got",
    "support",
    "also",
    "standard",
    "apis",
    "love",
    "browser",
    "already",
    "use",
    "things",
    "websockets",
    "whole",
    "projects",
    "work",
    "able",
    "run",
    "take",
    "look",
    "bit",
    "mpm",
    "packages",
    "let",
    "put",
    "going",
    "show",
    "build",
    "cool",
    "see",
    "dev",
    "sort",
    "installed",
    "need",
    "install",
    "command",
    "test",
    "awesome",
    "okay",
    "docs",
    "one",
    "would",
    "minus",
    "jump",
    "editor",
    "type",
    "running",
    "want",
    "code",
    "give",
    "nice",
    "go",
    "client",
    "well",
    "thing",
    "create",
    "project",
    "actually",
    "basic",
    "start",
    "console",
    "oh",
    "call",
    "chat",
    "app",
    "us",
    "says",
    "open",
    "little",
    "music",
    "say",
    "called",
    "add",
    "function",
    "update",
    "people",
    "anything",
    "stuff",
    "json",
    "file",
    "idea",
    "package",
    "dependencies",
    "could",
    "instead",
    "set",
    "modules",
    "import",
    "list",
    "something",
    "yeah",
    "across",
    "application",
    "jsr",
    "messages",
    "send",
    "way",
    "server",
    "allow",
    "websocket",
    "broadcast",
    "connected",
    "oak",
    "http",
    "back",
    "colon",
    "thank",
    "context",
    "fact",
    "prompt",
    "saying",
    "access",
    "network",
    "everything",
    "task",
    "security",
    "yes",
    "excellent",
    "side",
    "url",
    "input",
    "online",
    "users",
    "contain",
    "form",
    "made",
    "bunch",
    "user",
    "username",
    "mean",
    "next",
    "socket",
    "connection",
    "ws",
    "yep",
    "works",
    "usernames",
    "message",
    "event",
    "clients",
    "data",
    "exactly",
    "template",
    "might",
    "kind",
    "es"
  ]
}