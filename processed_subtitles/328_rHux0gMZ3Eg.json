{
  "text": "welcome to the ultimate django course\nin this course i'm going to teach you\neverything you need to know about django\nfrom the very basics to more advanced\nconcepts\nso by the end of this course you'll be\nable to use django to build\nproduction-grade back-ends for your web\nand mobile apps if you have always\nwanted to learn web development with\npython you are in the right place\nwe'll use python and django to build and\ndeploy the backend for an\ne-commerce application if you're looking\nfor a comprehensive\norganized and practical course that\ntakes you from zero to hero\nand prepares you for the job this is the\nright django course for you\neverything you need to know about django\nis in one place in the right order\nso you don't need to jump back and forth\nbetween random tutorials\namash hamadani i have taught millions of\npeople how to advance their software\nengineering skills\nthrough my youtube channel and online\nschool code with mosh.com\nif you're new here be sure to subscribe\nas i upload new videos\nall the time now let's jump in and get\nstarted\nlet's talk about what you need to know\nto take this course for starters\nyou need to know python you need to know\nthe basics of python\nas well as object-oriented programming\nconcepts such as classes\ninheritance polymorphism and so on you\nshould also know the basics of\nrelational databases\nso you should be familiar with concepts\nsuch as tables columns\nprimary and foreign keys relationships\nand so on if you need to refresh the\nfundamentals i have a couple of beginner\nlevel tutorials on my youtube channel\nas well as comprehensive courses on my\nwebsite codewithmosh.com i'll put the\nlinks down below in case you're\ninterested\nall right so i'm assuming that you're\nthe right student for this course now\nlet's talk about how you should take\nthis course\nfirst and foremost i want you to watch\nthis entire course\nall the way from the beginning to the\nend even if you're familiar with django\nbecause\nalong the way i will share a lot of tips\nand tricks and i don't want you to miss\nout on any of them\nif you have taken any of my other\ncourses you know that i'm not gonna\nwaste your time with\nrepetitive or useless stuff so make sure\nto watch every lesson\nnow while watching each lesson i want\nyou to take notes\nyou can just write down some keywords on\na piece of paper if you don't want to\nwrite a lot of notes\ni strongly believe that the act of\nwriting things down will help you\nremember new things that you learn\nthen after each lesson go through your\nnotes and repeat the same steps i showed\nyou in the video\nthis is exactly how i personally learn\nnew things also\ni've carefully designed tons of\nexercises that help you understand and\nremember the materials so make sure to\ndo all these exercises because the more\nyou practice\nthe better you'll be at django or coding\nin general\nwelcome back to the ultimate django\ncourse in this section we're going to\ntalk about the basics of django\nfirst i will give you a quick\nintroduction to what django is and\nwhy it's so popular then we'll talk\nabout the fundamental web development\nconcepts that every web developer must\nknow\nnext we'll set up our machine for\ndevelopment and create\nour first django project once that\nproject is up and running\ni will show you two essential techniques\nfor debugging django applications\nthis is going to be a short and sweet\nintroduction to django so\nlet's jump in and get started\nso what is django and why is it so\npopular well\ndjango is a free and open source\nframework for building web applications\nwith python\nit's not the only web framework for\npython but it's the most\npopular one because it helps us build a\nwebsite in less time\nwith fewer lines of code that's why a\nlot of companies like youtube\ninstagram spotify and dropbox use django\nin their tech stack\nnow django is what we call a batteries\nincluded framework which means\nit comes with a lot of features out of\nthe box so we don't have to code them\nfrom scratch\nfor example it gives us an admin\ninterface for managing our data which is\na huge time\nsaver it also has an object relational\nmapper that abstracts the database\nso we can query or persist data without\nwriting a lot of sql code\nit also comes with an authentication\npackage for identifying users\nit also has a package for caching data\nand much much more\nso since django offers all these amazing\nfeatures\nwe can focus on our application and its\nrequirements we don't have to reinvent\nthe wheel\nand code all these features from scratch\nnow once in a while you might come\nacross\nsomeone like our popular superstar\ndeveloper john smith who thinks django\nis a piece of crap\nbecause it's old and bloated with so\nmany features he used it\nhated it and then rewrote his entire\nproject with a new shiny framework that\nis faster\nwell saying a framework is better than\ndjango because it's faster it's kind of\nlike saying\na ferrari is better than a truck because\nit's faster\nwhat if you want to move something\nyou're not going to use your ferrari for\nthat right\nso a wise software engineer doesn't pick\nup a framework\nmerely based on his performance there\nare so many other things you need to\ntake into account\nlike the maturity of the framework how\nstable it is from one version to another\nits learning curve the size of the\ncommunity and so on\ndjango has been around for a long time\nand it has a huge community\nso there are tons of django packages\nbuilt by the community that you can\nreuse in your applications\nalso if you get stuck there's always\nsomeone out there to help you\nif you want to hire people there are\ntons of people to choose from so these\nare the benefits of having a huge\ncommunity around the framework\nnow regarding django features yes django\ncomes with a lot of features\nbut you don't have to use or even learn\nall of them because\nall these features are optional so you\ncan use the features that make sense for\nyour application\nso in my opinion debates about the best\nframework in the world are useless\nwe all like different things and just\nbecause someone doesn't like django it\ndoesn't mean it's bad\na lot of companies are using django and\nare looking for django developers\nhere in the us the average salary of a\ndjango developer is just over\n117 000 a year so\nif you like python and want to get into\nweb development learning django is a\ngood investment for your future\n[Music]\nso you learned that django is a\nframework for building web applications\nwith python\nnow let's talk about some of the\nfundamental concepts you need to\nunderstand to build web applications\nlet's say we're going to build an online\nstore and publish it at moshby.com\nnow this website is going to have two\nparts or two applications\na front end and a backend the front end\nis the part that is loaded\ninside a web browser on a client machine\nit's the part that the user sees and\ninteracts with\nthe backend is the part that runs on a\nweb server\nand is responsible for data processing\nvalidating business rules and so on\nnow let's imagine that alice wants to\nvisit our website\nso she points her browser to moshby.com\nthis address is also called a url which\nis short for uniform\nresource locator it's basically a way to\nlocate a resource on our internet\na resource can be a web page an image a\nvideo\na pdf and so on so alice types\nmoshby.com in her browser and presses\nenter\nat this moment a browser sends a request\nto the web server that hosts our website\nand says\nhey alice wants to see the home page so\nthe web server should take this request\nprocess it and return a response back to\nthe client\nthis data exchange is defined by a\nprotocol called http\nwhich is short for hypertext transfer\nprotocol\nit defines how clients and servers can\ncommunicate\nso this is the big picture as alice\nnavigates our website\nfor each page her browser sends an http\nrequest to the server\nand receives an http response now as\npart of building the backend for this\nwebsite\nwe need to decide how we're going to\nrespond to clients one option is to\ngenerate the requested page on the\nserver\nand return it to the client we use html\nfor that html is short for\nhypertext markup language it's a simple\nlanguage for\nrepresenting web pages and their content\nevery webpage you have seen on internet\nis built using html\nso one option is to generate the page on\nthe server and return an html\ndocument to the client the other option\nis to return only the data needed on the\nrequested page\nand have the client generate the page so\ninstead of putting a complete page or\na complete html document in an http\nresponse\nwe only return the data like the list of\nproducts\nnow what is the difference well if we\npush this responsibility to the client\nwe can free up the server so it can\nserve more clients\nour application will be more scalable\nthat's why over the past few years\nthis approach has become more trendy and\nis now considered the industry best\npractice\nthese days we have tools like react\nangular and vue for generating web pages\non the client\nthese are all client-side tools that are\nused by front-end developers\nin contrast we have server-side tools\nfor building back-ends\ndjango falls in this category so you\nshould not compare django with let's say\nreact\nyou may compare django with other\nserver-side frameworks like asp.net core\nwhich is used by c-sharp developers\nexpress used by javascript developers\nand so on\nso if we push the responsibility of\ngenerating web pages to the client\nthe server essentially becomes a gateway\nto the data\non the server we can provide endpoints\nthat the client can talk to\nto get or save various pieces of data\nfor example we can provide one endpoint\nto get the list of products and another\nendpoint to get the list of orders\nsomeone has placed\nnow all these endpoints together\nrepresent the interface that clients use\nto talk to the server\nin technical terms we say the server\nprovides an api\nor an application programming interface\nto clients this api is essentially like\nthe buttons on a remote control\nall these buttons together represent the\ninterface or the api we use to interact\nwith the tv\nokay so in this course our focus will be\non using django\nto build an api for our online store\nclient applications can use this api to\nget or save the data\nhow these clients are built is\nirrelevant here we can use react\nangular or even plain javascript that\nfalls under front-end development which\nhas nothing to do with django\nonce we build this api if you know\nfront-end development you can\nalways build a client app that talks to\nthis api\nalright now that you understand the big\npicture we are ready to set up our\ndevelopment environment\nand that's what we will do next\n[Music]\nall right let's make sure you have the\nright setup before we start coding\nthe first thing i want you to do is\nupgrade your python to the latest\nversion\nso head over to python.org downloads and\ndownload the latest version of python\nfor your operating system\nonce you do that then open up your\nterminal window and run\npython version to make sure you have\nupgraded your python correctly\nnow here we see python 2.7 because on\nmac we have two different versions of\npython running side by side\nwe have the old python 2 which is now\ndeprecated\nand we also have python 3. so if you're\nusing a mac\nyou have to run python3 dash dash\nversion\nbut if you're on windows or linux you\nhave to run python\nversion okay so here i'm using python\n3.9.5 great next we're going to use pip\nor pip3 if you're on mac to install\npip n i talked about paypal in my python\ncourse\nit's basically a dependency management\ntool for installing our application\ndependencies\nin virtual environments this way our\napplication dependencies will not clash\nwith other applications dependencies\nokay so\nlet's go ahead and install this\nnow in this course just like my other\ncourses i'm going to use visual studio\ncode or vs code as my editor it's just\nmy personal preference\nif you have a preference for a different\ntool like pycharm that's totally fine\nhaving said that i highly encourage you\nto use vs code\nbecause throughout the course i'm going\nto show you a lot of shortcuts and\ntime saving tips that will not apply to\nyour editor\nin case you don't have vs code you can\nget it from code.visualstudio.com\nnow once you run it i want you to go to\nthe extensions panel over here\nand search for python make sure\nto install this extension because with\nthis we get features such as\nintelligence debugging code navigation\nand so on\nall right now that we have installed all\nthe necessary tools let's create our\nfirst django project\nso here in the terminal window i'm going\nto go to my desktop\nyou can go anywhere on your machine it\ndoesn't really matter now we're going to\ncreate\na directory called store front that is\nthe name of our project\nnext we go inside this directory and run\npip and install django so we're going to\ninstall django\nusing pip app inside a virtual\nenvironment\nnow let's go ahead\nall right well take a look so over here\nyou can see that p-band has created a\nvirtual environment for this project\ndown below you can see the path to this\nvirtual environment\nbut if you're on windows you're going to\nsee something like c drive\nbackslash whatever now if you're on a\nmac and using z shell which is this\nfancy\ncolorful terminal window you can hold\ndown the command key\nand click on this path to go into it\notherwise we can just copy this\nand use the cd command to go inside this\ndirectory\nnow take a look so here's our virtual\nenvironment\nin this environment we have this bin\nfolder that contains a bunch of binaries\nfor example we have python pip django\nadmin and so on\nso back to the terminal pbn created a\nvirtual environment and\ninstalled django inside that environment\nbut in addition to this\nppm also created two files in this\ndirectory\npip file and pay file.log so i'm going\nto open this directory using visual\nstudio code\nby running code period if this doesn't\nwork on your machine\njust drag and drop this folder onto vs\ncode\nalright so here's our pip file this is\nlike package.json for javascript\nprojects\nso in this file we can see that our\nproject needs\nthis particular version of python and\nunder packages you can see\nthe packages that our application is\ndependent upon\nso here we have django equals asterisk\nthat means\nany version or the latest version of\ndjango\nif we installed a particular version of\ndjango we would see that version here\nnow back to the terminal window we need\nto activate this virtual environment\nso we'll use the python interpreter\ninside this virtual environment\nnot the one that is installed globally\non this machine to do that we're going\nto run\nppm shell\nokay next we're going to use django\nadmin\nto start a new project django admin is a\nutility that comes with django\nso if you run it we can see all these\ncommands that we can use\nto work with django projects as we go\nthrough the course\nyou will become familiar with this\ncommand in this lesson we're going to\nuse\ndjango admin start project\nand we're going to call that project\nstore front\nnow back to vs code django admin created\nthis directory for our project\nand inside this directory it created\nanother directory\nthat is the core of our application in\nthis directory we have these files which\ni'm going to talk about in a second\nbut before i do so let's get rid of this\nredundancy\nbecause we have three storefront\ndirectories\nthe top one is the one that we created\nearlier in the terminal\nand then we have these two other\ndirectories one for the project\none for the core of our application so\ni'm gonna delete\nthis project directory now we're back in\nthe previous step so we don't have a\ndjango project at this stage\nnow back in terminal let's bring up the\nlast command\nbut type it period at the end this tells\ndjango\nto use the current directory as the\nproject directory so django is not going\nto create\nan additional directory for our project\nokay now take a look so we have this\ndirectory\nwhich is the core of our application in\nthis directory we have\nthis init file which defines this\ndirectory as a package\nwe have this settings module where we\ndefine our application settings\nwe have the urls module where we define\nthe urls of our application\nand these two other modules that are\nused for deployment\nfor now don't worry about them now next\nto this directory we have\nthis file manage.pi this is a wrapper\naround django admin so going forward\ninstead of django admin we're going to\nuse manage.pi\nthe reason for this is that manage.pi\ntakes the settings of this project into\naccount\nlet me show you what i mean so now that\nwe have a project\nwe want to run a web server so another\ncommand that django admin provides is\nrun server however if you're on django\nadmin\nrun server we get an error saying\nrequested setting debug but settings are\nnot configured\nbecause at this point django admin\ndoesn't know about the\nsettings of our project so now that we\nhave a project\ninstead of django admin we're going to\nrun python\nmanage.pi now look we see the same\ncommands\nthat django admin provides so here we\ncan say\npython manage.pi run server\nnow optionally we can supply a port\nnumber\nif we don't supply this by default this\nwill use port 8000 but you might have\nanother application running on port 8000\nin that case you might want to\nexplicitly set the port number\nso let's go ahead with that now we don't\nget an error\nbecause manage the pi knows about the\nsettings of our project\nnow here we get this warning saying you\nhave 18\nunapplied migrations don't worry about\nthis yet we'll talk about this soon\nso if you look over here you can see\nthat django has started\na development server at this address so\nwe can copy this and paste it into\nbrowser\nor if you're on a mac and using z shell\nyou can hold down the command key and\nclick this all right beautiful\nour first django project is running\nsuccessfully so let's move on to the\nnext lesson\n[Music]\nso far i've been using a separate\nterminal window but vs code also has\nan integrated terminal window that is\neasier to use but to use that we have to\nproperly configure it to use the python\ninterpreter\ninside our virtual environment let me\nshow you how to do this\nso back to our terminal window first\nwe're going to stop the web server\nby pressing ctrl and c okay\nnow back in vs code on the top under the\nview menu\nlook we have this command pallet the\nshortcut on mac is\nshift command and p\nnow here we're going to search for\npython interpreter\nso currently vs code is using this\npython interpreter that is installed\nglobally on this machine we don't want\nto use this you want to use the one\ninside our virtual environment but how\ncan we find the path to our virtual\nenvironment\nvery easy so back to the terminal\nlet's run pip and dash dash vm\nall right here's the path so let's copy\nthis\ngood now back to vs code we're going to\nselect\nenter interpreter path then we're going\nto paste the path\nand append slash bin slash\npython at the end if you're on windows\ninstead of a forward slash you have to\nuse a backslash\nokay good now\nin this project we have an extra\ndirectory vs code\nwe have a settings file and here we have\nthe path\nto a python interpreter good with this\nwe can go to the view menu\nnow look we have this integrated\nterminal the shortcut on mac\nis control and backtick\nnow vs code automatically activates the\nvirtual environment for this project\nso here we can run python manage.pi\nrun server good so going forward\ni'm going to use the integrated terminal\nwindow here it's easier\nwe can always hide it by pressing ctrl\nand backtick\nor bring it back we can maximize it move\nit around and so on\nnow one quick tip sometimes when running\nthis command\nyou might get a syntax error saying\ninvalid syntax\nthis happens every now and then when vs\ncode fails to\nactivate the virtual environment for\nthis project to solve this problem all\nyou have to do\nis open a new terminal window and look\nvs code executed this command to\nactivate\nthe virtual environment for this project\nnow we can run\npython manage.pi run server\ngreat hey guys bosh here i just wanted\nto let you know that this tutorial you\nhave been watching\nis actually the first hour of my\nultimate django course\nthe complete course is about 10 hours\nand goes way beyond this tutorial\nso if you're serious about learning\ndjango and are looking for a job as a\nback-end\ndeveloper i highly encourage you to\nenroll in the course the course comes\nwith tons of exercises and solutions\na full e-commerce project that you will\neventually deploy to the cloud\nplus a 30-day money-back guarantee and a\ncertificate of completion you can add\nyour resume\nin case you're interested i'll put the\nlink down below and if not that's\ntotally fine let's move on to the next\nlesson\n[Music]\nall right let's talk about apps so every\ndjango project\nis essentially a collection of various\napps each providing\ncertain functionality just like the apps\non your mobile phone\neach app provides a certain\nfunctionality right django projects are\nexactly the same so in this project\nlet's open up the storefront directory\nand then look at our settings module\nnow we can collapse this panel by\npressing command and b on mac\nor ctrl and b on windows okay now in\nthis module we have a bunch of different\nsettings\nin this lesson we're going to look at\nthe install apps\nso every django project by default\nincludes these apps\nthe first app is the admin app which\ngives us an admin interface for\nmanaging our data then we have the auth\napp which is used for\nauthenticating users then we have\ncontent types app which we'll talk about\nlater in the course\nnext we have the sessions app which is\nkind of legacy we don't use sessions\nanymore\na session is a temporary memory on the\nserver for managing users data\nthese days when building apis with\ndjango we don't use the sessions app\nso we can come here and delete this app\nthen we have the messages app\nwhich is used for displaying one-time\nnotifications to the user\nand finally we have the static files app\nfor serving static files like images\ncss files and so on so each app provides\na certain piece of functionality okay\nnow we can also create our own apps here\nso let's save this file now let's open\nup the terminal window by pressing\ncontrol and backtick so here's our\nterminal window where we have\nour development server running we're\ngoing to open a new terminal window\nokay now let's expand this to clear the\nwindow we simply press\nctrl and l now we're going to run python\nmanage.pi start app and we're going to\ncall this app\nplayground okay so\nlet's close the screen now and open up\nthe explorer panel\nall right look here's our new app which\nis represented using a folder with a\nspecial structure\nso every django app has the exact same\nstructure\nhere we have the migrations folder for\ngenerating database tables we'll talk\nabout that later in the course we have a\ncomplete section about this topic\nwe have the admin module where we define\nhow the admin interface for this app is\ngoing to look like\nnext we have the apps module where we\nconfigure this app\nso the name is misleading i don't know\nwhy django developers decided to call\nthis module apps\nit would be better if it was called\nconfig that's just my two cents\nnext we have the models module where we\ndefine the model classes for this app\nwe use model classes to pull out data\nfrom the database and present to the\nuser\nnext we have the tests module where we\nwrite our unit tests\nand finally we have the views module\nwhich we'll talk about in the next\nlesson\nagain the name is misleading this is not\nthe view that you think if you come from\na front-end development background\nso what we have here is essentially a\nrequest handler it's not a view it\ndoesn't have\na template or html again we'll talk\nabout that in the next lesson\nso we created a new app now we need to\nregister this app in the settings module\nso every time you create a new app\nyou need to register it here in the list\nof installed apps\nwe simply add the name of the app which\nis called playground\nsave the changes done in the next lesson\nwe're going to talk about views\n[Music]\nalright let's talk about views so\nearlier you learned that http\nis a request response protocol so every\ndata exchange\ninvolves a request and a response this\nis where we use views in django\nso here in the playground folder let's\nopen up the views module\nthis is where we define our views or\nview functions\na view function is a function that takes\na request\nand returns a response so more\naccurately\nit's a request handler in some\nframeworks it's called\nan action in django it's called a view\nbut i don't agree with this name because\nfrom an architectural point of view a\nview is often associated with something\nthat the user sees\nthat part in django is called a template\nand we'll talk about that later in this\nsection\nnow that aside let's create our first\nview function\nso we're going to create a function we\ncan call it anything we want\ni'm going to call it say hello\nnow this function should take a request\nobject and return a response\nso first on the top from django.http\npackage\nwe're going to import the http response\nclass\nnow in this function we can do anything\nwe want in a real-world scenario we can\npull data from a database we can\ntransform data\nwe can send emails and so on for now\nlet's just return\na simple response so we're going to\nreturn\nan instance of the http response class\nand in this object in this response you\nwant to add a simple string\nso let's say hello world okay\nso this is our first view or first view\nfunction\nnow we need to map this view to a url so\nwhen we get a request at that url\nthis function will be called and that's\nwhat we're going to do next\n[Music]\nalright here's our django project now\nlet's say whenever we send\na request to playground slash hello\nour view function should be called and\nreturn hello world to the user\nlet's see how we can do that so back to\nour project\nhere in the playground folder we're\ngoing to add a new file\ncalled urls.pi you could call it\nanything the name doesn't matter\nbut by convention we call it urls now\nin this module we're going to map our\nurls to our view functions\nso on the top we're going to import the\npath function from django.urls\nso from django.urls we're going to\nimport the path function\nnow don't worry about memorizing any of\nthese as you practice\nall of this will become second nature\nalso\nfrom the current folder we should import\nthe views module\nso we can reference our view function\nnow we should define\na special variable called url patterns\nall in lower case make sure to split it\nproperly because this is what django\nlooks for\nwe should set this to an array of url\npattern objects\nwe use the path function to create a url\npattern object\nso if we call this function look at the\nsignature of this function\nthis function has a bunch of parameters\nthe first one is route\nwhich is a string the notation you see\nhere is called type annotation which is\nkind of a new feature in python\nwith type annotation we can see the type\nof parameters\nand the return value of a function so\nthe first parameter is route which is a\nstring\nthe second parameter is view which is a\nfunction that returns\nhttp response object now look over here\nthis notation represents the return type\nof this function\nso the path function returns a url\npattern object\nso i'm going to call this function and\ngive it two arguments a route or a url\nwhich is playground slash hello and\na view function so from the views module\nwe're going to get\nsay hello note that i'm not calling this\nfunction so here we don't have a pair of\nparentheses\nwe're just passing a reference to this\nfunction okay\nso what we have here is called a url\nconf module\nthat basically means url configuration\nso every app\ncan have its own url configuration but\nnow we need to import this url\nconfiguration\ninto the main url configuration for this\nproject\nwhere is it you saw it earlier so\nback to the explorer panel here in the\nstorefront folder\nwe have another url's module\nup here we have a bunch of comments\nabout how we should use this module\nnow look over here if you want to\ninclude another\nurl conf there are two things we need to\ndo first we need to import the include\nfunction\nfrom django.urls so over here we have\nfrom django.urls\nwe're going to import the include\nfunction next we need to add\na url to url patterns\nso in this module we also have a url\npatterns object which is an array\nof url patterns object so here we're\ngoing to call path\ngive it a route and then we use the\ninclude function\nto reference the url configuration\nmodule\nin this app so\nwe're going to call path and say\nany urls that start with playground\nfollowed by a forward slash should be\nrouted to\nour playground app so this is where we\nuse the include function\nnow the include function requires a\nparameter that is a string\nhere we're going to reference playground\ndot urls\nso if we send the request to playground\nslash hello django knows that\nall requests that start with playground\nshould be handled by this\napp so it's going to chop off the first\npart of this url\nand pass the rest to the url\nconfiguration module\nin the playground app so back to this\nurl's module\nwe no longer need to add playground here\nbecause we added it once\nin the main url configuration module\nso we simply add hello followed by a\nforward slash i forgot to add that we\nalways end our routes with a forward\nslash\nso let's save the changes now whenever\nwe change our code\ndjango web server automatically restores\nitself\nso let's open up the terminal window\nmake sure we don't have any arrows good\nso back to the browser let's send a\nrequest to this endpoint\ngreat we see hello world on the screen\nso this is how we can map\nurls to view functions next we're going\nto talk about templates\nso i told you that views in django are\nnot really views they're more like\nrequest handlers or actions\nwhat we often call a view in other\nframeworks is called a template in\ndjango\nso let's see how we can use a template\nto return html content to the client\nso here in the playground app we're\ngoing to add\na new folder called templates\nand in this folder we're going to add a\nnew file called\nhello.html and of course we could call\nit anything\nand here we can write some html markup\nfor example we can type\nh1 and press tab to add an h1 heading\nand say hello world now don't worry if\nyou don't know html we're not going to\nuse it in this course\ni just want to show you how django\ntemplates work\nso let's save the changes now back to\nour view function\ninstead of returning a plain http\nresponse\nwe're going to use the render function\nto render a template and return\nhtml markup to the client so let's\nremove this line\nand call the render function now look at\nthe return type\nof this function it returns an http\nresponse object\nso here we're going to return the\nresponse\nnow let's remove the brackets and type\nthem again so we can see the function\nsignature\nthe first parameter here is a request\nobject and\nthe type of this is http request\nso we're going to pass this request\nobject\nright here now the second parameter\nthat's the name of our template which is\na string\nso here i'm going to say hello.html\nthe other parameters are optional so\ndon't worry about them at this point\nnow save the changes let's make sure our\nproject works up to this point\nso back in the browser refresh beautiful\nnow we see html content we can verify it\nby right clicking on this page and\nlooking at the page source so look we\nare returning\nhtml content great now let's make this a\nbit more interesting\nso back to our template instead of hello\nworld\nwe can dynamically render some value so\nback to review function let's type a\ncomma\nto see the next parameter that is a\ncontext object\nand the type of this is a mapping of\nstring\nto any that means we can pass any\nmapping object\nthat maps a string value to any other\ntype of\nobject so here we can pass a dictionary\nso let's pass a dictionary the type of\nthe key should be a string so we can\ncall that name\nand we're going to set that to a value\nlike let's say mosh\nnow back to our template\ninstead of hello world we can render the\nname that we passed here\nso we type two pairs of braces and in\nbetween\nwe type the name of the key save\nrefresh beautiful now in this template\nwe can also write some logic so we can\ntype an if statement so we type braces\nand in between them we add two\npercentage signs\nin between them we can write an if\nstatement so we can say\nif name is set we can render it here\notherwise\nwe can render hello world\nand of course we need an end if clause\nas well so\nand if now this syntax is kind of ugly\nbut the good thing about django is that\nit's modular so you can easily replace\ndjango's default template engine with\nyour preferred template engine but once\nagain we don't really use templates in\ndjango\nprojects that often these days there are\nspecial cases for them but\nfor the most part we use django to build\napis that return data\nnot html content so i just included this\nlesson\nso you know what templates are and how\nthey work we're not going to spend any\nmore time on templates for now\nunless we encounter a situation where we\nreally need them\n[Music]\nlet's talk about debugging django\napplications in vs code\nthis is particularly useful if our\napplication doesn't produce the right\nresult and we want to run it line by\nline and see\nwhere exactly something has gone wrong\nso click on this icon\nto open the run and debug panel now the\nfirst time you see this message saying\nwe should create a launch.json file\nbasically we need to create a launch\nprofile\nso vs code knows how to run or debug\nthis application\nso let's click on this now in this list\nselect django all right here's our\nlaunch.json file\nwhat you see here is kind of like a\ndictionary in python we have a bunch of\nkey value pairs\nthese key value pairs define a launch\nprofile\nso vs code knows that to run this\napplication\nit should use the current python\ninterpreter\nto run manage.pi which exists\nin our workspace folder and then as an\nargument\nit should pass run server to it here we\ncan add\nan additional argument to specify the\nport\nso it doesn't clash with port 8000 which\nis currently in use\nokay save the changes we're done with\nthis file\nso let's close it now if you're curious\nlet me show you where this file exists\nit's added to our project up here inside\nthe vs code folder so here's our launch\nprofile\nnow that we have a launch profile if we\ngo to the run and debug panel\nwe see something else so here we can\nstart our application for debugging\nbut before doing so i want to write some\ndummy code here in our view function\nso let's set x to 1 and\ny to 2. now i'm going to click on this\nline\nto insert a breakpoint when we add a\nbreakpoint\nvia scope will execute every line of\ncode until\nit hits our breakpoint from that point\nonward\nwe can execute our code line by line so\nlet's add a breakpoint and then start\nthe application for debugging\nall right let me collapse this window\ngood\nso in this new terminal window we have a\ndevelopment server\nlistening on port 9000 so let's hold\ndown the command key on mac or\ncontrol on windows and click on this\nlink\nall right here's what we get the home\npage of our project is gone\nbecause we have registered a custom\nroute that is playground\nhello so we see the homepage only the\nfirst time we run our django project\nso let's go to playground hello\nall right our breakpoint is activated\nand we are on this line\nnow on the left side in the variables\nsection you can see the local variables\nso currently we have the request object\nthat is the request object that\nwe receive in this function so we can\nexpand it\nand inspect its various attributes\nwe don't want to do that for now so\nlet's close this\nwe want to execute our code line by line\nso here we have a bunch of functions\nthe first one is step over and the\nshortcut for this is f10\nwith this we can step over the current\nline so if we press f10\nthis line gets executed and now we are\non the second line\nnow look over here in the list of local\nvariables we have\nx and its value is one this is very\nuseful when debugging applications\nso if something is not calculated\nproperly we can inspect it here\nnow most of the time you can see your\nlocal variables here\nbut if not you can always add them in\nthe watch window\nso before recording this video i was\npracticing that's why you see x here\nlet me select this and delete it so in\nyour watch section you're not going to\nhave any variables\nto add one we simply click on this and\nthen type\nthe name of our variable okay so this is\nhow we can step over\nvarious lines so we can press f10 again\nand again\nso this function is executed and now\nback in the browser\nwe see the final result now let's do\nsomething more interesting\nso back to our code let's close\nthe terminal window so we have more\nspace i'm going to define\na function here called calculate\nand here we're going to set x to 1 y to\n2 and return x\njust some dummy code now over here\nwe're going to call the calculate\nfunction okay\nnow save the changes back in the browser\nlet's refresh so our view function gets\ncaught\nnow we are right here now this time\ninstead of stepping over this line\nwe want to step into it because if you\nstep over this line\nwe're not going to see what happened in\nthe calculate function\nwe see the final result so we see x is\nset to 1 and\nwe can verify that over here as well but\nsometimes we need to step into a\nfunction to see\nwhat is happening there maybe there is a\nbug inside the calculate function\nso let's restart the debugger\nokay i'm going to close this back in the\nbrowser\nlet's refresh this page\nokay we're back to this line now this\ntime we're going to step into this\nfunction\nso look over here this is the icon for\nstepping into a function\nand as you can see the shortcut is f11\nso if you press f11\nwe go inside the calculate function now\nwe can execute each line\nusing f10 or step over and see where\nsomething has gone wrong\nnow let's imagine this calculate\nfunction is a large function with a lot\nof code\nat some point we want to step out of it\nwithout having to execute\nevery line of code in this function\nthere's a shortcut for this\nso look over here that is step\nout the shortcut is shift and f11\nso if we press shift and f11 we get back\nto the previous function so this is how\nwe can debug django applications in vs\ncode\nnow once we're done it's always a good\npractice\nto remove these breakpoints otherwise\nthey get in the way\nso as you debug your applications you\nplace various breakpoints in different\nparts of your code\nand you will hit them all the time so\nalways remove your breakpoints\nonce you're done with them so we're done\nwith this debugging session\nnow we can disconnect by pressing shift\nand f5 or clicking on this icon\nall right now one last tip before we\nfinish this lesson\non the top under the run menu look\nwe have a command called run without\ndebugging\nthe shortcut on mac is control and f5 so\nif we use this shortcut we can start our\napplication\nwithout having to run python manage.pi\nrun server let me show you what i mean\nso\nfirst let's bring up our terminal window\nhere's the second terminal window that\nwe use for debugging\ni'm going to delete this here's the\nfirst terminal window where\nwe started our application by running\npython manage.pi\nrun server so let's press ctrl and c\nto stop the server good i'm also going\nto delete this terminal window\nlet's imagine we just opened this\nproject in vs code day one\nnow to run this application without\ndebugging we can press\nctrl and f5\nnow our application has started on port\n9000\nso we can go to this address and then\nhit playground hello\nso this is how we can run our\napplication without debugging\njust remember that if you use this\ncommand your breakpoints are not going\nto get hit\nso if you want to debug your\napplications you should start it\nin the debug mode\n[Music]\nthere is another way to debug django\napplications using a powerful tool\ncalled\ndjango debug toolbar so if you go to\ngoogle and\nsearch for django debug toolbar you're\ngoing to find this page\nover here you're going to find the\ninstallation instructions\nso i highly encourage you to follow\nalong with me and repeat the same steps\nso we installed this toolbar together so\nfirst we have to use pip or ppf to\ninstall\ndjango debug toolbar so back to vs code\ni'm going to open up a new terminal\nwindow\nand as you can see vs code used the\nsource command to activate our virtual\nenvironment\nso now let's run pipen install\ndjango dash debug dash toolbar\ngood now back to the documentation\nthe next step is to add debug toolbar in\nthe list of installed apps\nin our settings module so back to vs\ncode\nwe can press command and p on mac or\ncontrol and p on windows\nto bring up the search box now we search\nfor our settings module\ngood now in the list of install apps at\nthe end\nwe're going to add debug underline\ntoolbar\ngood now the next step\nthe next step is to add a new url\npattern in our main url conf module\nso i'm going to copy this line and back\nto vs code let's bring up the urls\nmodule\nwe're going to pick the one in the\nstorefront folder\nokay now we add a comma here and paste\nthat line\nnow here we have a compilation error\nbecause debug toolbar is a module that\nwe have to import on the top\nso if you look at the documentation you\ncan see that over here\nimport debug toolbar so copy this and\npaste it right here\ngood now back to the documentation\nthe next step is to add a middleware we\nuse middleware to hook into django's\nrequest response processing\nso in our settings module we have a\nsetting for middleware\nwe're going to add this line in that\nfile so copy this\nback to the settings module here we have\nthe install apps\nright after that you can see the\nmiddleware setting\nso we're going to add that on the top\nnow the final step is to add our ip\naddress\nin the internal ips setting so for local\ndevelopment\nwe should use 127.001\nso i'm going to copy this entire setting\nbecause by default\nthis doesn't exist in a new django\nproject so copy this\nand i'm going to paste it anywhere in\nthis settings file it doesn't really\nmatter\nokay save so we have completed all the\nsteps\nnow back in the browser if you go to\nthis url playground\nslash hello we don't see the toolbar it\nshould appear here\nbecause the toolbar only appears when we\nreturn a proper html document\nif you right click here and look at the\npage source\nyou can see that we are not returning a\nproper html document\nso we don't have the html head and body\nelements\nso let's open up hello.html now on the\ntop we type\nhtml press tab now inside these elements\nwe're going to add\na body and then inside the body\nwe're going to add the code that we had\nearlier so let's move that right here\ngood now we have a proper html document\nof course the head element is missing\nbut it doesn't really matter\nnow back to the browser refresh and\nhere's django debug toolbar\nhere we have different panels like\nhistory for seeing the urls we have hit\nso far\nwe have versions to see the version of\ndjango python and\ndebug toolbar we're running we have\nprocessing time\nwe have our settings we have request\nheaders and so on\nnow my personal favorite panel is the\nsql or\nsql panel here we can see the queries\nthat are sent to the database so later\nin the course\nwhere we talk about querying the\ndatabase using django's\nobject relational mapper we're going to\ncome back to this panel and see\nwhat queries django will generate and\nsend to the database\nso that's it for this lesson we're done\nwith this section in the next section\nwe're going to talk about\nbuilding a data model so i'll see you in\nthe next section\nwelcome back to another section of the\nultimate django course\nin this section we're going to talk\nabout models which are used to store and\nretrieve data\nwe'll start off by quick introduction to\ndata modeling to make sure you know the\nessential concepts\nthen we're going to design the data\nmodel for an e-commerce application\nnext we're going to talk about\norganizing our models in apps to improve\nreusability\nthis is one of the areas that is often\nmisunderstood so i'm going to demystify\nit once for all\nand then we'll spend the rest of this\nsection in coding model classes\nwe'll use these classes to store and\nretrieve data throughout the course\nso let's jump in and get started\n[Music]\nthe first step in every django project\nis figuring out the pieces of data we\nwant to store\nso what entities or concepts do we have\nin an e-commerce application\nwell for starters we need the concept of\na product with attributes like title\ndescription price and inventory now in a\nreal scenario\na product entity might have other\nattributes it really depends on the\nrequirements of our application\nfor now we just want to keep things\nsimple okay now quite often\nour products are divided in different\ncategories like shoes\nbeauty products fruits and so on so we\nneed another entity called collection or\ncategory with an attribute called title\nnow we need to add a relationship or an\nassociation between these entities\nso we can start from one end and\nnavigate to the other end\nfor example we can get a collection and\nfind all the products in that collection\nokay now let's assume that in our\napplication\na product can belong to one and only one\ncollection\nand a collection can have multiple\nproducts\nso an asterisk represents many we could\nalso use an\nn here okay now we have a one-to-many\nrelationship\nbetween collection and product so\nrelationships can be one-to-one\none-to-many and many too many back to\nour diagram\nnow over here we can add a label called\nproducts and that means\nwhen we code these entities or these\nclasses in the collection class we're\ngoing to have an\nattribute called products for now i just\nwant to hide this for simplicity okay\nnow sometimes we can have multiple\nrelationships or\nmultiple associations between two\nentities so let's imagine that a\ncollection\ncan optionally have a featured product\nthat is the product\nwhose picture we want to show to the\nuser so we can add a second relationship\nbetween\nthese entities now look at this number\nhere zero to one means\na collection can have zero to one\nproduct\nand we're gonna call that attribute\nfeatured product so once again\nthat means in the collection class we're\ngoing to have an attribute\ncalled featured product okay now you\nmight ask\nwhat about the id attribute shouldn't\nevery entity have an id\nattribute yes but django is going to\nautomatically create that for us\nthat's why i haven't shown it here now a\nlittle exercise\nfor you grab a piece of paper and\nidentify the\nother essential entities we need in an\ne-commerce application\njust the bare minimum don't go ahead and\ncreate a complex diagram like this\ni don't want this there are only five\nentities that i want you to identify\nso spend a couple minutes and identify\nthese entities along with the attributes\nand\nrelationships then come back see my\nsolution\nall right so this is what we ended up\nwith in the previous lesson we have a\none-to-many relationship\nbetween collections and products now\ndon't take this as a hard and fast rule\nmaybe in your application a product can\nbelong to many collections\nthen you're gonna have a many-to-many\nrelationship between products and\ncollections okay\nso back to our model i'm gonna remove\nthe collection from here\nso we have some free space on the screen\nnow what else do we need here\nwell in every e-commerce application we\nhave the concept of a shopping cart\nright so we're going to have an entity\nor a model or a class called\ncart with an attribute called created at\nlet's assume that we need to know when\neach card is created\nso every now and then we can do a clean\nup and remove cards that are 30 days old\ni just made this up but in a real\nscenario you should always design your\nmodels\nbased on the requirements of your\nproject don't make up your own rules\nokay\nnow we need a relationship or an\nassociation between products and cards\nbecause a card can have multiple\nproducts and a product might be in\ndifferent cards\nso here we have a many-to-many\nrelationship between product\nand cart now sometimes the relationship\nbetween two entities can have\nattributes for example if a product is\nin a shopping cart\nwe need to know how many instances of\nthat product we have in the shopping\ncart\nso this relationship itself should have\nan attribute called\nquantity so we're going to add a new\nentity here called\ncart item now look at the notation i've\nused to represent this concept\ni've connected cart item to the\nrelationship using a dashed line\nthat means cart item represents the\nrelationship between these two entities\nproduct and cart this is what we call an\nassociation class\nso cart item is an association class\nokay\nnow there's another way to show this\ninstead of using an association class we\ncan add a relationship between\ncart and cart item because a cart might\ncontain\nmultiple items and an item belongs to\none and only one cart\nsimilarly we can add a relationship\nbetween product and card item because\neach card item represents\na single product and a product might be\nreferenced by\nmany card items so here we have two\none too many relationships between these\nentities\nnow compare this with the association\nclass notation\nso we can either add a many-to-many\nrelationship with an association class\nor two one-to-many relationships it's a\nmatter of personal preference okay\nso we're done with the shopping cart but\nyou might ask what about the user or the\ncustomer that owns this cart\nwhere is that in the diagram well i\nhaven't connected cart with an entity\nlike\ncustomer because we don't want to force\npeople to register and log in\nbefore they can add products to their\nshopping cart okay so there is no\nrelationship between cards and customers\nso cars are essentially anonymous anyone\ncan have a cart\nwhether they're anonymous users or\nregistered customers okay\nso we're done with the cart now let's\ntalk about customers\nso our customer entity can have\nattributes like name\nemail username password and so on now\nfor simplicity\ni'm only showing name and email here now\na customer can have\nmany orders and each order belongs to\none and\nonly one customer so we need a\none-to-many relationship between\ncustomers and orders\nnow once again the order entity might\nhave multiple attributes\nfor now we just want to know when this\norder was placed okay\nnow an order can contain multiple\nproducts and a product can be in\nmultiple orders\nso we have a many-to-many relationship\nbetween orders and products\nand similar to the shopping cart example\nthis relationship itself needs\nattributes\nso here we need another entity called\norder item with an attribute called\nquantity that's our association class\nalternatively\nyou could add a relationship between\norder and order item\nbecause each order may contain multiple\nitems and each order item\nbelongs to one and only one order\nsimilarly an order item references one\nand only one product\nwhile a given product might be\nreferenced by multiple\norder items so two one-to-many\nrelationships\nso these are the entities that i wanted\nyou to identify but to make this project\nmore interesting\ni decided to throw in one more entity\ntag\nhere we have a minute-to-many\nrelationship between products and tags\nbecause the product can have many tags\nand the tag might be referenced by\ndifferent products we'll come back to\nthis entity in the next lesson\n[Music]\nso i told you that a django project\ncontains one or more apps\nand just like the apps on your phone\neach app in a django project provides\na specific piece of functionality so\nthat means\neach app is going to have its own data\nmodel so in this lesson we're going to\nlook at a few different ways to\norganize our entities in different apps\none way is to have a single app called\nthe store\nand drop all of our entities here now we\ncan bundle and distribute this app via\npip\nand this way anyone can install this app\nin their project\nand get all these models and the\nfunctionality around them\nso next time we're working on an\necommerce project we don't have to\nrewrite the same functionality\nover and over we simply install this app\nin our project\nand write extra code for customization\ngreat\nbut there's a problem here as this\napplication grows and\ngets more complex it gets bloated with\ntoo many things\nlike too many models too many views and\nother stuff\nthis is what we call a monolith like a\nlarge heavy piece of stone\nso at some point our application might\nbecome hard to understand\nhard to maintain and hard to reuse it\nbecomes like one of those remote\ncontrols with too many buttons\nwhen designing these apps we want to\nfollow the unix philosophy\nso each app should do one thing and do\nit well\nso here's another solution we can break\ndown this project into four small apps\nthe products app which represents a\nproduct catalog\nso here we're gonna have three entities\nproduct collection\nand tag then we're going to have the\ncustomers app for\nmanaging customers we're going to have\nthe shopping cart app\nfor adding the shopping cart\nfunctionality and the orders app\nfor adding the ordering functionality\nnot bad right\nwell this is actually a poor way of\nbreaking down this project for a number\nof reasons\nlook at the coupling or dependency\nbetween these apps\nthe orders app is dependent on the\nshopping cart app which is dependent on\nthe products app\nso next time we're working on an\ne-commerce project we'll have to install\nall these apps one by one first we have\nto install the products app\nfollowed by the shopping cart app the\ncustomers app and the orders app\nideally each app should be\nself-contained so we can easily drop it\ninto a new project the other problem is\nthat if we publish a new version of the\nproducts app\nthat might cause a breaking change in\nthe shopping cart and\nsubsequently orders apps so anyone using\nthese apps have to upgrade\nall these apps together again more and\nmore work\nalso it doesn't really make sense to\nhave the shopping cart functionality\nwithout having a product catalog right\nwhy would we ever want to add the\nshopping cart functionality to a project\nwithout a product catalog so shopping\ncart functionality and product catalog\nalways go together by the same token\nwhy would we ever want to add the\nshopping cart functionality to a project\nwithout the ability to place an order\njust to allow people to add something to\ntheir shopping cart\nthen what again it doesn't really make\nsense so these concepts are highly\nrelated and should be bundled together\nif we separate them we increase coupling\nbetween apps and we end up with the\nproblems i just talked about\nso does it mean we have to go back to\nthe monolithic design no\nthere is a middle ground here look at\nthe tag entity\nthe ability to tag products is optional\nwe don't necessarily need it in every\ne-commerce application\nin fact we might need it in other types\nof applications like your blog\nor video platform and so on so tagging\nis not specific to products or an\ne-commerce application\nit's a separate piece of functionality\nso i'm going to move the tag entity to a\nseparate app called\ntags and here we're going to have\nanother entity called\ntagged item which represents an item\nthat is tagged\nit can be a product an article a video\nand so on it's an\nabstract concept now with this\nseparation\neach app is self-contained and provides\na specific piece of functionality\nso we can use either or both of them in\na new project\ndepending on what we're going to build\nplus we have zero coupling between these\napps\nso we can independently change and\ndeploy them without affecting other apps\nthis is the proper way to break down\nthis project into multiple apps\nso here's the takeaway if our app\nboundary is so large\nwe'll end up with a monolith that gets\nbloated and becomes hard to reuse\non the other hand if our app boundaries\nare so small and fine grained\nwe'll end up with a lot of coupling\nbetween them a good design is one with\nminimal coupling\nand high cohesion meaning high focus so\neach app is focused on a specific piece\nof functionality and\nincludes everything needed to fulfill\nthat piece of functionality\nokay so back to vs code we're going to\ncreate two new apps\nso we run python manage.pi\nstart app the first app is store\nand the second one is tags\nokay now as i told you before every time\nwe create a new app\nwe should add it in the list of\ninstalled apps so\nlet's close this window and go to our\nsettings module\nhere's the list of install apps i'm\ngoing to add those apps\nright here so store and tags\nall right we're done with this step\nstarting from the next lesson we're\ngoing to create the model classes for\nthese apps\nhey guys bosh here i just wanted to let\nyou know that this tutorial you have\nbeen watching is\nactually the first hour of my ultimate\ndjango course\nthe complete course is about 10 hours\nand goes way beyond this tutorial\nso if you're serious about learning\ndjango and are looking for a job as a\nback-end developer i highly encourage\nyou to enroll in the course\nthe course comes with tons of exercises\nand solutions\na full e-commerce project that you will\neventually deploy to the cloud\nplus a 30-day money-back guarantee and a\ncertificate of completion you can add\nyour resume\nin case you're interested i'll put the\nlink down below so thank you for\nwatching and i hope to see you in the\ncourse\nyou\n",
  "words": [
    "welcome",
    "ultimate",
    "django",
    "course",
    "course",
    "going",
    "teach",
    "everything",
    "need",
    "know",
    "django",
    "basics",
    "advanced",
    "concepts",
    "end",
    "course",
    "able",
    "use",
    "django",
    "build",
    "web",
    "mobile",
    "apps",
    "always",
    "wanted",
    "learn",
    "web",
    "development",
    "python",
    "right",
    "place",
    "use",
    "python",
    "django",
    "build",
    "deploy",
    "backend",
    "application",
    "looking",
    "comprehensive",
    "organized",
    "practical",
    "course",
    "takes",
    "zero",
    "hero",
    "prepares",
    "job",
    "right",
    "django",
    "course",
    "everything",
    "need",
    "know",
    "django",
    "one",
    "place",
    "right",
    "order",
    "need",
    "jump",
    "back",
    "forth",
    "random",
    "tutorials",
    "amash",
    "hamadani",
    "taught",
    "millions",
    "people",
    "advance",
    "software",
    "engineering",
    "skills",
    "youtube",
    "channel",
    "online",
    "school",
    "code",
    "new",
    "sure",
    "subscribe",
    "upload",
    "new",
    "videos",
    "time",
    "let",
    "jump",
    "get",
    "started",
    "let",
    "talk",
    "need",
    "know",
    "take",
    "course",
    "starters",
    "need",
    "know",
    "python",
    "need",
    "know",
    "basics",
    "python",
    "well",
    "programming",
    "concepts",
    "classes",
    "inheritance",
    "polymorphism",
    "also",
    "know",
    "basics",
    "relational",
    "databases",
    "familiar",
    "concepts",
    "tables",
    "columns",
    "primary",
    "foreign",
    "keys",
    "relationships",
    "need",
    "refresh",
    "fundamentals",
    "couple",
    "beginner",
    "level",
    "tutorials",
    "youtube",
    "channel",
    "well",
    "comprehensive",
    "courses",
    "website",
    "put",
    "links",
    "case",
    "interested",
    "right",
    "assuming",
    "right",
    "student",
    "course",
    "let",
    "talk",
    "take",
    "course",
    "first",
    "foremost",
    "want",
    "watch",
    "entire",
    "course",
    "way",
    "beginning",
    "end",
    "even",
    "familiar",
    "django",
    "along",
    "way",
    "share",
    "lot",
    "tips",
    "tricks",
    "want",
    "miss",
    "taken",
    "courses",
    "know",
    "gon",
    "na",
    "waste",
    "time",
    "repetitive",
    "useless",
    "stuff",
    "make",
    "sure",
    "watch",
    "every",
    "lesson",
    "watching",
    "lesson",
    "want",
    "take",
    "notes",
    "write",
    "keywords",
    "piece",
    "paper",
    "want",
    "write",
    "lot",
    "notes",
    "strongly",
    "believe",
    "act",
    "writing",
    "things",
    "help",
    "remember",
    "new",
    "things",
    "learn",
    "lesson",
    "go",
    "notes",
    "repeat",
    "steps",
    "showed",
    "video",
    "exactly",
    "personally",
    "learn",
    "new",
    "things",
    "also",
    "carefully",
    "designed",
    "tons",
    "exercises",
    "help",
    "understand",
    "remember",
    "materials",
    "make",
    "sure",
    "exercises",
    "practice",
    "better",
    "django",
    "coding",
    "general",
    "welcome",
    "back",
    "ultimate",
    "django",
    "course",
    "section",
    "going",
    "talk",
    "basics",
    "django",
    "first",
    "give",
    "quick",
    "introduction",
    "django",
    "popular",
    "talk",
    "fundamental",
    "web",
    "development",
    "concepts",
    "every",
    "web",
    "developer",
    "must",
    "know",
    "next",
    "set",
    "machine",
    "development",
    "create",
    "first",
    "django",
    "project",
    "project",
    "running",
    "show",
    "two",
    "essential",
    "techniques",
    "debugging",
    "django",
    "applications",
    "going",
    "short",
    "sweet",
    "introduction",
    "django",
    "let",
    "jump",
    "get",
    "started",
    "django",
    "popular",
    "well",
    "django",
    "free",
    "open",
    "source",
    "framework",
    "building",
    "web",
    "applications",
    "python",
    "web",
    "framework",
    "python",
    "popular",
    "one",
    "helps",
    "us",
    "build",
    "website",
    "less",
    "time",
    "fewer",
    "lines",
    "code",
    "lot",
    "companies",
    "like",
    "youtube",
    "instagram",
    "spotify",
    "dropbox",
    "use",
    "django",
    "tech",
    "stack",
    "django",
    "call",
    "batteries",
    "included",
    "framework",
    "means",
    "comes",
    "lot",
    "features",
    "box",
    "code",
    "scratch",
    "example",
    "gives",
    "us",
    "admin",
    "interface",
    "managing",
    "data",
    "huge",
    "time",
    "saver",
    "also",
    "object",
    "relational",
    "mapper",
    "abstracts",
    "database",
    "query",
    "persist",
    "data",
    "without",
    "writing",
    "lot",
    "sql",
    "code",
    "also",
    "comes",
    "authentication",
    "package",
    "identifying",
    "users",
    "also",
    "package",
    "caching",
    "data",
    "much",
    "much",
    "since",
    "django",
    "offers",
    "amazing",
    "features",
    "focus",
    "application",
    "requirements",
    "reinvent",
    "wheel",
    "code",
    "features",
    "scratch",
    "might",
    "come",
    "across",
    "someone",
    "like",
    "popular",
    "superstar",
    "developer",
    "john",
    "smith",
    "thinks",
    "django",
    "piece",
    "crap",
    "old",
    "bloated",
    "many",
    "features",
    "used",
    "hated",
    "rewrote",
    "entire",
    "project",
    "new",
    "shiny",
    "framework",
    "faster",
    "well",
    "saying",
    "framework",
    "better",
    "django",
    "faster",
    "kind",
    "like",
    "saying",
    "ferrari",
    "better",
    "truck",
    "faster",
    "want",
    "move",
    "something",
    "going",
    "use",
    "ferrari",
    "right",
    "wise",
    "software",
    "engineer",
    "pick",
    "framework",
    "merely",
    "based",
    "performance",
    "many",
    "things",
    "need",
    "take",
    "account",
    "like",
    "maturity",
    "framework",
    "stable",
    "one",
    "version",
    "another",
    "learning",
    "curve",
    "size",
    "community",
    "django",
    "around",
    "long",
    "time",
    "huge",
    "community",
    "tons",
    "django",
    "packages",
    "built",
    "community",
    "reuse",
    "applications",
    "also",
    "get",
    "stuck",
    "always",
    "someone",
    "help",
    "want",
    "hire",
    "people",
    "tons",
    "people",
    "choose",
    "benefits",
    "huge",
    "community",
    "around",
    "framework",
    "regarding",
    "django",
    "features",
    "yes",
    "django",
    "comes",
    "lot",
    "features",
    "use",
    "even",
    "learn",
    "features",
    "optional",
    "use",
    "features",
    "make",
    "sense",
    "application",
    "opinion",
    "debates",
    "best",
    "framework",
    "world",
    "useless",
    "like",
    "different",
    "things",
    "someone",
    "like",
    "django",
    "mean",
    "bad",
    "lot",
    "companies",
    "using",
    "django",
    "looking",
    "django",
    "developers",
    "us",
    "average",
    "salary",
    "django",
    "developer",
    "117",
    "000",
    "year",
    "like",
    "python",
    "want",
    "get",
    "web",
    "development",
    "learning",
    "django",
    "good",
    "investment",
    "future",
    "music",
    "learned",
    "django",
    "framework",
    "building",
    "web",
    "applications",
    "python",
    "let",
    "talk",
    "fundamental",
    "concepts",
    "need",
    "understand",
    "build",
    "web",
    "applications",
    "let",
    "say",
    "going",
    "build",
    "online",
    "store",
    "publish",
    "website",
    "going",
    "two",
    "parts",
    "two",
    "applications",
    "front",
    "end",
    "backend",
    "front",
    "end",
    "part",
    "loaded",
    "inside",
    "web",
    "browser",
    "client",
    "machine",
    "part",
    "user",
    "sees",
    "interacts",
    "backend",
    "part",
    "runs",
    "web",
    "server",
    "responsible",
    "data",
    "processing",
    "validating",
    "business",
    "rules",
    "let",
    "imagine",
    "alice",
    "wants",
    "visit",
    "website",
    "points",
    "browser",
    "address",
    "also",
    "called",
    "url",
    "short",
    "uniform",
    "resource",
    "locator",
    "basically",
    "way",
    "locate",
    "resource",
    "internet",
    "resource",
    "web",
    "page",
    "image",
    "video",
    "pdf",
    "alice",
    "types",
    "browser",
    "presses",
    "enter",
    "moment",
    "browser",
    "sends",
    "request",
    "web",
    "server",
    "hosts",
    "website",
    "says",
    "hey",
    "alice",
    "wants",
    "see",
    "home",
    "page",
    "web",
    "server",
    "take",
    "request",
    "process",
    "return",
    "response",
    "back",
    "client",
    "data",
    "exchange",
    "defined",
    "protocol",
    "called",
    "http",
    "short",
    "hypertext",
    "transfer",
    "protocol",
    "defines",
    "clients",
    "servers",
    "communicate",
    "big",
    "picture",
    "alice",
    "navigates",
    "website",
    "page",
    "browser",
    "sends",
    "http",
    "request",
    "server",
    "receives",
    "http",
    "response",
    "part",
    "building",
    "backend",
    "website",
    "need",
    "decide",
    "going",
    "respond",
    "clients",
    "one",
    "option",
    "generate",
    "requested",
    "page",
    "server",
    "return",
    "client",
    "use",
    "html",
    "html",
    "short",
    "hypertext",
    "markup",
    "language",
    "simple",
    "language",
    "representing",
    "web",
    "pages",
    "content",
    "every",
    "webpage",
    "seen",
    "internet",
    "built",
    "using",
    "html",
    "one",
    "option",
    "generate",
    "page",
    "server",
    "return",
    "html",
    "document",
    "client",
    "option",
    "return",
    "data",
    "needed",
    "requested",
    "page",
    "client",
    "generate",
    "page",
    "instead",
    "putting",
    "complete",
    "page",
    "complete",
    "html",
    "document",
    "http",
    "response",
    "return",
    "data",
    "like",
    "list",
    "products",
    "difference",
    "well",
    "push",
    "responsibility",
    "client",
    "free",
    "server",
    "serve",
    "clients",
    "application",
    "scalable",
    "past",
    "years",
    "approach",
    "become",
    "trendy",
    "considered",
    "industry",
    "best",
    "practice",
    "days",
    "tools",
    "like",
    "react",
    "angular",
    "vue",
    "generating",
    "web",
    "pages",
    "client",
    "tools",
    "used",
    "developers",
    "contrast",
    "tools",
    "building",
    "django",
    "falls",
    "category",
    "compare",
    "django",
    "let",
    "say",
    "react",
    "may",
    "compare",
    "django",
    "frameworks",
    "like",
    "core",
    "used",
    "developers",
    "express",
    "used",
    "javascript",
    "developers",
    "push",
    "responsibility",
    "generating",
    "web",
    "pages",
    "client",
    "server",
    "essentially",
    "becomes",
    "gateway",
    "data",
    "server",
    "provide",
    "endpoints",
    "client",
    "talk",
    "get",
    "save",
    "various",
    "pieces",
    "data",
    "example",
    "provide",
    "one",
    "endpoint",
    "get",
    "list",
    "products",
    "another",
    "endpoint",
    "get",
    "list",
    "orders",
    "someone",
    "placed",
    "endpoints",
    "together",
    "represent",
    "interface",
    "clients",
    "use",
    "talk",
    "server",
    "technical",
    "terms",
    "say",
    "server",
    "provides",
    "api",
    "application",
    "programming",
    "interface",
    "clients",
    "api",
    "essentially",
    "like",
    "buttons",
    "remote",
    "control",
    "buttons",
    "together",
    "represent",
    "interface",
    "api",
    "use",
    "interact",
    "tv",
    "okay",
    "course",
    "focus",
    "using",
    "django",
    "build",
    "api",
    "online",
    "store",
    "client",
    "applications",
    "use",
    "api",
    "get",
    "save",
    "data",
    "clients",
    "built",
    "irrelevant",
    "use",
    "react",
    "angular",
    "even",
    "plain",
    "javascript",
    "falls",
    "development",
    "nothing",
    "django",
    "build",
    "api",
    "know",
    "development",
    "always",
    "build",
    "client",
    "app",
    "talks",
    "api",
    "alright",
    "understand",
    "big",
    "picture",
    "ready",
    "set",
    "development",
    "environment",
    "next",
    "music",
    "right",
    "let",
    "make",
    "sure",
    "right",
    "setup",
    "start",
    "coding",
    "first",
    "thing",
    "want",
    "upgrade",
    "python",
    "latest",
    "version",
    "head",
    "downloads",
    "download",
    "latest",
    "version",
    "python",
    "operating",
    "system",
    "open",
    "terminal",
    "window",
    "run",
    "python",
    "version",
    "make",
    "sure",
    "upgraded",
    "python",
    "correctly",
    "see",
    "python",
    "mac",
    "two",
    "different",
    "versions",
    "python",
    "running",
    "side",
    "side",
    "old",
    "python",
    "2",
    "deprecated",
    "also",
    "python",
    "using",
    "mac",
    "run",
    "python3",
    "dash",
    "dash",
    "version",
    "windows",
    "linux",
    "run",
    "python",
    "version",
    "okay",
    "using",
    "python",
    "great",
    "next",
    "going",
    "use",
    "pip",
    "pip3",
    "mac",
    "install",
    "pip",
    "n",
    "talked",
    "paypal",
    "python",
    "course",
    "basically",
    "dependency",
    "management",
    "tool",
    "installing",
    "application",
    "dependencies",
    "virtual",
    "environments",
    "way",
    "application",
    "dependencies",
    "clash",
    "applications",
    "dependencies",
    "okay",
    "let",
    "go",
    "ahead",
    "install",
    "course",
    "like",
    "courses",
    "going",
    "use",
    "visual",
    "studio",
    "code",
    "vs",
    "code",
    "editor",
    "personal",
    "preference",
    "preference",
    "different",
    "tool",
    "like",
    "pycharm",
    "totally",
    "fine",
    "said",
    "highly",
    "encourage",
    "use",
    "vs",
    "code",
    "throughout",
    "course",
    "going",
    "show",
    "lot",
    "shortcuts",
    "time",
    "saving",
    "tips",
    "apply",
    "editor",
    "case",
    "vs",
    "code",
    "get",
    "run",
    "want",
    "go",
    "extensions",
    "panel",
    "search",
    "python",
    "make",
    "sure",
    "install",
    "extension",
    "get",
    "features",
    "intelligence",
    "debugging",
    "code",
    "navigation",
    "right",
    "installed",
    "necessary",
    "tools",
    "let",
    "create",
    "first",
    "django",
    "project",
    "terminal",
    "window",
    "going",
    "go",
    "desktop",
    "go",
    "anywhere",
    "machine",
    "really",
    "matter",
    "going",
    "create",
    "directory",
    "called",
    "store",
    "front",
    "name",
    "project",
    "next",
    "go",
    "inside",
    "directory",
    "run",
    "pip",
    "install",
    "django",
    "going",
    "install",
    "django",
    "using",
    "pip",
    "app",
    "inside",
    "virtual",
    "environment",
    "let",
    "go",
    "ahead",
    "right",
    "well",
    "take",
    "look",
    "see",
    "created",
    "virtual",
    "environment",
    "project",
    "see",
    "path",
    "virtual",
    "environment",
    "windows",
    "going",
    "see",
    "something",
    "like",
    "c",
    "drive",
    "backslash",
    "whatever",
    "mac",
    "using",
    "z",
    "shell",
    "fancy",
    "colorful",
    "terminal",
    "window",
    "hold",
    "command",
    "key",
    "click",
    "path",
    "go",
    "otherwise",
    "copy",
    "use",
    "cd",
    "command",
    "go",
    "inside",
    "directory",
    "take",
    "look",
    "virtual",
    "environment",
    "environment",
    "bin",
    "folder",
    "contains",
    "bunch",
    "binaries",
    "example",
    "python",
    "pip",
    "django",
    "admin",
    "back",
    "terminal",
    "pbn",
    "created",
    "virtual",
    "environment",
    "installed",
    "django",
    "inside",
    "environment",
    "addition",
    "ppm",
    "also",
    "created",
    "two",
    "files",
    "directory",
    "pip",
    "file",
    "pay",
    "going",
    "open",
    "directory",
    "using",
    "visual",
    "studio",
    "code",
    "running",
    "code",
    "period",
    "work",
    "machine",
    "drag",
    "drop",
    "folder",
    "onto",
    "vs",
    "code",
    "alright",
    "pip",
    "file",
    "like",
    "javascript",
    "projects",
    "file",
    "see",
    "project",
    "needs",
    "particular",
    "version",
    "python",
    "packages",
    "see",
    "packages",
    "application",
    "dependent",
    "upon",
    "django",
    "equals",
    "asterisk",
    "means",
    "version",
    "latest",
    "version",
    "django",
    "installed",
    "particular",
    "version",
    "django",
    "would",
    "see",
    "version",
    "back",
    "terminal",
    "window",
    "need",
    "activate",
    "virtual",
    "environment",
    "use",
    "python",
    "interpreter",
    "inside",
    "virtual",
    "environment",
    "one",
    "installed",
    "globally",
    "machine",
    "going",
    "run",
    "ppm",
    "shell",
    "okay",
    "next",
    "going",
    "use",
    "django",
    "admin",
    "start",
    "new",
    "project",
    "django",
    "admin",
    "utility",
    "comes",
    "django",
    "run",
    "see",
    "commands",
    "use",
    "work",
    "django",
    "projects",
    "go",
    "course",
    "become",
    "familiar",
    "command",
    "lesson",
    "going",
    "use",
    "django",
    "admin",
    "start",
    "project",
    "going",
    "call",
    "project",
    "store",
    "front",
    "back",
    "vs",
    "code",
    "django",
    "admin",
    "created",
    "directory",
    "project",
    "inside",
    "directory",
    "created",
    "another",
    "directory",
    "core",
    "application",
    "directory",
    "files",
    "going",
    "talk",
    "second",
    "let",
    "get",
    "rid",
    "redundancy",
    "three",
    "storefront",
    "directories",
    "top",
    "one",
    "one",
    "created",
    "earlier",
    "terminal",
    "two",
    "directories",
    "one",
    "project",
    "one",
    "core",
    "application",
    "gon",
    "na",
    "delete",
    "project",
    "directory",
    "back",
    "previous",
    "step",
    "django",
    "project",
    "stage",
    "back",
    "terminal",
    "let",
    "bring",
    "last",
    "command",
    "type",
    "period",
    "end",
    "tells",
    "django",
    "use",
    "current",
    "directory",
    "project",
    "directory",
    "django",
    "going",
    "create",
    "additional",
    "directory",
    "project",
    "okay",
    "take",
    "look",
    "directory",
    "core",
    "application",
    "directory",
    "init",
    "file",
    "defines",
    "directory",
    "package",
    "settings",
    "module",
    "define",
    "application",
    "settings",
    "urls",
    "module",
    "define",
    "urls",
    "application",
    "two",
    "modules",
    "used",
    "deployment",
    "worry",
    "next",
    "directory",
    "file",
    "wrapper",
    "around",
    "django",
    "admin",
    "going",
    "forward",
    "instead",
    "django",
    "admin",
    "going",
    "use",
    "reason",
    "takes",
    "settings",
    "project",
    "account",
    "let",
    "show",
    "mean",
    "project",
    "want",
    "run",
    "web",
    "server",
    "another",
    "command",
    "django",
    "admin",
    "provides",
    "run",
    "server",
    "however",
    "django",
    "admin",
    "run",
    "server",
    "get",
    "error",
    "saying",
    "requested",
    "setting",
    "debug",
    "settings",
    "configured",
    "point",
    "django",
    "admin",
    "know",
    "settings",
    "project",
    "project",
    "instead",
    "django",
    "admin",
    "going",
    "run",
    "python",
    "look",
    "see",
    "commands",
    "django",
    "admin",
    "provides",
    "say",
    "python",
    "run",
    "server",
    "optionally",
    "supply",
    "port",
    "number",
    "supply",
    "default",
    "use",
    "port",
    "8000",
    "might",
    "another",
    "application",
    "running",
    "port",
    "8000",
    "case",
    "might",
    "want",
    "explicitly",
    "set",
    "port",
    "number",
    "let",
    "go",
    "ahead",
    "get",
    "error",
    "manage",
    "pi",
    "knows",
    "settings",
    "project",
    "get",
    "warning",
    "saying",
    "18",
    "unapplied",
    "migrations",
    "worry",
    "yet",
    "talk",
    "soon",
    "look",
    "see",
    "django",
    "started",
    "development",
    "server",
    "address",
    "copy",
    "paste",
    "browser",
    "mac",
    "using",
    "z",
    "shell",
    "hold",
    "command",
    "key",
    "click",
    "right",
    "beautiful",
    "first",
    "django",
    "project",
    "running",
    "successfully",
    "let",
    "move",
    "next",
    "lesson",
    "music",
    "far",
    "using",
    "separate",
    "terminal",
    "window",
    "vs",
    "code",
    "also",
    "integrated",
    "terminal",
    "window",
    "easier",
    "use",
    "use",
    "properly",
    "configure",
    "use",
    "python",
    "interpreter",
    "inside",
    "virtual",
    "environment",
    "let",
    "show",
    "back",
    "terminal",
    "window",
    "first",
    "going",
    "stop",
    "web",
    "server",
    "pressing",
    "ctrl",
    "c",
    "okay",
    "back",
    "vs",
    "code",
    "top",
    "view",
    "menu",
    "look",
    "command",
    "pallet",
    "shortcut",
    "mac",
    "shift",
    "command",
    "p",
    "going",
    "search",
    "python",
    "interpreter",
    "currently",
    "vs",
    "code",
    "using",
    "python",
    "interpreter",
    "installed",
    "globally",
    "machine",
    "want",
    "use",
    "want",
    "use",
    "one",
    "inside",
    "virtual",
    "environment",
    "find",
    "path",
    "virtual",
    "environment",
    "easy",
    "back",
    "terminal",
    "let",
    "run",
    "pip",
    "dash",
    "dash",
    "vm",
    "right",
    "path",
    "let",
    "copy",
    "good",
    "back",
    "vs",
    "code",
    "going",
    "select",
    "enter",
    "interpreter",
    "path",
    "going",
    "paste",
    "path",
    "append",
    "slash",
    "bin",
    "slash",
    "python",
    "end",
    "windows",
    "instead",
    "forward",
    "slash",
    "use",
    "backslash",
    "okay",
    "good",
    "project",
    "extra",
    "directory",
    "vs",
    "code",
    "settings",
    "file",
    "path",
    "python",
    "interpreter",
    "good",
    "go",
    "view",
    "menu",
    "look",
    "integrated",
    "terminal",
    "shortcut",
    "mac",
    "control",
    "backtick",
    "vs",
    "code",
    "automatically",
    "activates",
    "virtual",
    "environment",
    "project",
    "run",
    "python",
    "run",
    "server",
    "good",
    "going",
    "forward",
    "going",
    "use",
    "integrated",
    "terminal",
    "window",
    "easier",
    "always",
    "hide",
    "pressing",
    "ctrl",
    "backtick",
    "bring",
    "back",
    "maximize",
    "move",
    "around",
    "one",
    "quick",
    "tip",
    "sometimes",
    "running",
    "command",
    "might",
    "get",
    "syntax",
    "error",
    "saying",
    "invalid",
    "syntax",
    "happens",
    "every",
    "vs",
    "code",
    "fails",
    "activate",
    "virtual",
    "environment",
    "project",
    "solve",
    "problem",
    "open",
    "new",
    "terminal",
    "window",
    "look",
    "vs",
    "code",
    "executed",
    "command",
    "activate",
    "virtual",
    "environment",
    "project",
    "run",
    "python",
    "run",
    "server",
    "great",
    "hey",
    "guys",
    "bosh",
    "wanted",
    "let",
    "know",
    "tutorial",
    "watching",
    "actually",
    "first",
    "hour",
    "ultimate",
    "django",
    "course",
    "complete",
    "course",
    "10",
    "hours",
    "goes",
    "way",
    "beyond",
    "tutorial",
    "serious",
    "learning",
    "django",
    "looking",
    "job",
    "developer",
    "highly",
    "encourage",
    "enroll",
    "course",
    "course",
    "comes",
    "tons",
    "exercises",
    "solutions",
    "full",
    "project",
    "eventually",
    "deploy",
    "cloud",
    "plus",
    "guarantee",
    "certificate",
    "completion",
    "add",
    "resume",
    "case",
    "interested",
    "put",
    "link",
    "totally",
    "fine",
    "let",
    "move",
    "next",
    "lesson",
    "music",
    "right",
    "let",
    "talk",
    "apps",
    "every",
    "django",
    "project",
    "essentially",
    "collection",
    "various",
    "apps",
    "providing",
    "certain",
    "functionality",
    "like",
    "apps",
    "mobile",
    "phone",
    "app",
    "provides",
    "certain",
    "functionality",
    "right",
    "django",
    "projects",
    "exactly",
    "project",
    "let",
    "open",
    "storefront",
    "directory",
    "look",
    "settings",
    "module",
    "collapse",
    "panel",
    "pressing",
    "command",
    "b",
    "mac",
    "ctrl",
    "b",
    "windows",
    "okay",
    "module",
    "bunch",
    "different",
    "settings",
    "lesson",
    "going",
    "look",
    "install",
    "apps",
    "every",
    "django",
    "project",
    "default",
    "includes",
    "apps",
    "first",
    "app",
    "admin",
    "app",
    "gives",
    "us",
    "admin",
    "interface",
    "managing",
    "data",
    "auth",
    "app",
    "used",
    "authenticating",
    "users",
    "content",
    "types",
    "app",
    "talk",
    "later",
    "course",
    "next",
    "sessions",
    "app",
    "kind",
    "legacy",
    "use",
    "sessions",
    "anymore",
    "session",
    "temporary",
    "memory",
    "server",
    "managing",
    "users",
    "data",
    "days",
    "building",
    "apis",
    "django",
    "use",
    "sessions",
    "app",
    "come",
    "delete",
    "app",
    "messages",
    "app",
    "used",
    "displaying",
    "notifications",
    "user",
    "finally",
    "static",
    "files",
    "app",
    "serving",
    "static",
    "files",
    "like",
    "images",
    "css",
    "files",
    "app",
    "provides",
    "certain",
    "piece",
    "functionality",
    "okay",
    "also",
    "create",
    "apps",
    "let",
    "save",
    "file",
    "let",
    "open",
    "terminal",
    "window",
    "pressing",
    "control",
    "backtick",
    "terminal",
    "window",
    "development",
    "server",
    "running",
    "going",
    "open",
    "new",
    "terminal",
    "window",
    "okay",
    "let",
    "expand",
    "clear",
    "window",
    "simply",
    "press",
    "ctrl",
    "l",
    "going",
    "run",
    "python",
    "start",
    "app",
    "going",
    "call",
    "app",
    "playground",
    "okay",
    "let",
    "close",
    "screen",
    "open",
    "explorer",
    "panel",
    "right",
    "look",
    "new",
    "app",
    "represented",
    "using",
    "folder",
    "special",
    "structure",
    "every",
    "django",
    "app",
    "exact",
    "structure",
    "migrations",
    "folder",
    "generating",
    "database",
    "tables",
    "talk",
    "later",
    "course",
    "complete",
    "section",
    "topic",
    "admin",
    "module",
    "define",
    "admin",
    "interface",
    "app",
    "going",
    "look",
    "like",
    "next",
    "apps",
    "module",
    "configure",
    "app",
    "name",
    "misleading",
    "know",
    "django",
    "developers",
    "decided",
    "call",
    "module",
    "apps",
    "would",
    "better",
    "called",
    "config",
    "two",
    "cents",
    "next",
    "models",
    "module",
    "define",
    "model",
    "classes",
    "app",
    "use",
    "model",
    "classes",
    "pull",
    "data",
    "database",
    "present",
    "user",
    "next",
    "tests",
    "module",
    "write",
    "unit",
    "tests",
    "finally",
    "views",
    "module",
    "talk",
    "next",
    "lesson",
    "name",
    "misleading",
    "view",
    "think",
    "come",
    "development",
    "background",
    "essentially",
    "request",
    "handler",
    "view",
    "template",
    "html",
    "talk",
    "next",
    "lesson",
    "created",
    "new",
    "app",
    "need",
    "register",
    "app",
    "settings",
    "module",
    "every",
    "time",
    "create",
    "new",
    "app",
    "need",
    "register",
    "list",
    "installed",
    "apps",
    "simply",
    "add",
    "name",
    "app",
    "called",
    "playground",
    "save",
    "changes",
    "done",
    "next",
    "lesson",
    "going",
    "talk",
    "views",
    "music",
    "alright",
    "let",
    "talk",
    "views",
    "earlier",
    "learned",
    "http",
    "request",
    "response",
    "protocol",
    "every",
    "data",
    "exchange",
    "involves",
    "request",
    "response",
    "use",
    "views",
    "django",
    "playground",
    "folder",
    "let",
    "open",
    "views",
    "module",
    "define",
    "views",
    "view",
    "functions",
    "view",
    "function",
    "function",
    "takes",
    "request",
    "returns",
    "response",
    "accurately",
    "request",
    "handler",
    "frameworks",
    "called",
    "action",
    "django",
    "called",
    "view",
    "agree",
    "name",
    "architectural",
    "point",
    "view",
    "view",
    "often",
    "associated",
    "something",
    "user",
    "sees",
    "part",
    "django",
    "called",
    "template",
    "talk",
    "later",
    "section",
    "aside",
    "let",
    "create",
    "first",
    "view",
    "function",
    "going",
    "create",
    "function",
    "call",
    "anything",
    "want",
    "going",
    "call",
    "say",
    "hello",
    "function",
    "take",
    "request",
    "object",
    "return",
    "response",
    "first",
    "top",
    "package",
    "going",
    "import",
    "http",
    "response",
    "class",
    "function",
    "anything",
    "want",
    "scenario",
    "pull",
    "data",
    "database",
    "transform",
    "data",
    "send",
    "emails",
    "let",
    "return",
    "simple",
    "response",
    "going",
    "return",
    "instance",
    "http",
    "response",
    "class",
    "object",
    "response",
    "want",
    "add",
    "simple",
    "string",
    "let",
    "say",
    "hello",
    "world",
    "okay",
    "first",
    "view",
    "first",
    "view",
    "function",
    "need",
    "map",
    "view",
    "url",
    "get",
    "request",
    "url",
    "function",
    "called",
    "going",
    "next",
    "music",
    "alright",
    "django",
    "project",
    "let",
    "say",
    "whenever",
    "send",
    "request",
    "playground",
    "slash",
    "hello",
    "view",
    "function",
    "called",
    "return",
    "hello",
    "world",
    "user",
    "let",
    "see",
    "back",
    "project",
    "playground",
    "folder",
    "going",
    "add",
    "new",
    "file",
    "called",
    "could",
    "call",
    "anything",
    "name",
    "matter",
    "convention",
    "call",
    "urls",
    "module",
    "going",
    "map",
    "urls",
    "view",
    "functions",
    "top",
    "going",
    "import",
    "path",
    "function",
    "going",
    "import",
    "path",
    "function",
    "worry",
    "memorizing",
    "practice",
    "become",
    "second",
    "nature",
    "also",
    "current",
    "folder",
    "import",
    "views",
    "module",
    "reference",
    "view",
    "function",
    "define",
    "special",
    "variable",
    "called",
    "url",
    "patterns",
    "lower",
    "case",
    "make",
    "sure",
    "split",
    "properly",
    "django",
    "looks",
    "set",
    "array",
    "url",
    "pattern",
    "objects",
    "use",
    "path",
    "function",
    "create",
    "url",
    "pattern",
    "object",
    "call",
    "function",
    "look",
    "signature",
    "function",
    "function",
    "bunch",
    "parameters",
    "first",
    "one",
    "route",
    "string",
    "notation",
    "see",
    "called",
    "type",
    "annotation",
    "kind",
    "new",
    "feature",
    "python",
    "type",
    "annotation",
    "see",
    "type",
    "parameters",
    "return",
    "value",
    "function",
    "first",
    "parameter",
    "route",
    "string",
    "second",
    "parameter",
    "view",
    "function",
    "returns",
    "http",
    "response",
    "object",
    "look",
    "notation",
    "represents",
    "return",
    "type",
    "function",
    "path",
    "function",
    "returns",
    "url",
    "pattern",
    "object",
    "going",
    "call",
    "function",
    "give",
    "two",
    "arguments",
    "route",
    "url",
    "playground",
    "slash",
    "hello",
    "view",
    "function",
    "views",
    "module",
    "going",
    "get",
    "say",
    "hello",
    "note",
    "calling",
    "function",
    "pair",
    "parentheses",
    "passing",
    "reference",
    "function",
    "okay",
    "called",
    "url",
    "conf",
    "module",
    "basically",
    "means",
    "url",
    "configuration",
    "every",
    "app",
    "url",
    "configuration",
    "need",
    "import",
    "url",
    "configuration",
    "main",
    "url",
    "configuration",
    "project",
    "saw",
    "earlier",
    "back",
    "explorer",
    "panel",
    "storefront",
    "folder",
    "another",
    "url",
    "module",
    "bunch",
    "comments",
    "use",
    "module",
    "look",
    "want",
    "include",
    "another",
    "url",
    "conf",
    "two",
    "things",
    "need",
    "first",
    "need",
    "import",
    "include",
    "function",
    "going",
    "import",
    "include",
    "function",
    "next",
    "need",
    "add",
    "url",
    "url",
    "patterns",
    "module",
    "also",
    "url",
    "patterns",
    "object",
    "array",
    "url",
    "patterns",
    "object",
    "going",
    "call",
    "path",
    "give",
    "route",
    "use",
    "include",
    "function",
    "reference",
    "url",
    "configuration",
    "module",
    "app",
    "going",
    "call",
    "path",
    "say",
    "urls",
    "start",
    "playground",
    "followed",
    "forward",
    "slash",
    "routed",
    "playground",
    "app",
    "use",
    "include",
    "function",
    "include",
    "function",
    "requires",
    "parameter",
    "string",
    "going",
    "reference",
    "playground",
    "dot",
    "urls",
    "send",
    "request",
    "playground",
    "slash",
    "hello",
    "django",
    "knows",
    "requests",
    "start",
    "playground",
    "handled",
    "app",
    "going",
    "chop",
    "first",
    "part",
    "url",
    "pass",
    "rest",
    "url",
    "configuration",
    "module",
    "playground",
    "app",
    "back",
    "url",
    "module",
    "longer",
    "need",
    "add",
    "playground",
    "added",
    "main",
    "url",
    "configuration",
    "module",
    "simply",
    "add",
    "hello",
    "followed",
    "forward",
    "slash",
    "forgot",
    "add",
    "always",
    "end",
    "routes",
    "forward",
    "slash",
    "let",
    "save",
    "changes",
    "whenever",
    "change",
    "code",
    "django",
    "web",
    "server",
    "automatically",
    "restores",
    "let",
    "open",
    "terminal",
    "window",
    "make",
    "sure",
    "arrows",
    "good",
    "back",
    "browser",
    "let",
    "send",
    "request",
    "endpoint",
    "great",
    "see",
    "hello",
    "world",
    "screen",
    "map",
    "urls",
    "view",
    "functions",
    "next",
    "going",
    "talk",
    "templates",
    "told",
    "views",
    "django",
    "really",
    "views",
    "like",
    "request",
    "handlers",
    "actions",
    "often",
    "call",
    "view",
    "frameworks",
    "called",
    "template",
    "django",
    "let",
    "see",
    "use",
    "template",
    "return",
    "html",
    "content",
    "client",
    "playground",
    "app",
    "going",
    "add",
    "new",
    "folder",
    "called",
    "templates",
    "folder",
    "going",
    "add",
    "new",
    "file",
    "called",
    "course",
    "could",
    "call",
    "anything",
    "write",
    "html",
    "markup",
    "example",
    "type",
    "h1",
    "press",
    "tab",
    "add",
    "h1",
    "heading",
    "say",
    "hello",
    "world",
    "worry",
    "know",
    "html",
    "going",
    "use",
    "course",
    "want",
    "show",
    "django",
    "templates",
    "work",
    "let",
    "save",
    "changes",
    "back",
    "view",
    "function",
    "instead",
    "returning",
    "plain",
    "http",
    "response",
    "going",
    "use",
    "render",
    "function",
    "render",
    "template",
    "return",
    "html",
    "markup",
    "client",
    "let",
    "remove",
    "line",
    "call",
    "render",
    "function",
    "look",
    "return",
    "type",
    "function",
    "returns",
    "http",
    "response",
    "object",
    "going",
    "return",
    "response",
    "let",
    "remove",
    "brackets",
    "type",
    "see",
    "function",
    "signature",
    "first",
    "parameter",
    "request",
    "object",
    "type",
    "http",
    "request",
    "going",
    "pass",
    "request",
    "object",
    "right",
    "second",
    "parameter",
    "name",
    "template",
    "string",
    "going",
    "say",
    "parameters",
    "optional",
    "worry",
    "point",
    "save",
    "changes",
    "let",
    "make",
    "sure",
    "project",
    "works",
    "point",
    "back",
    "browser",
    "refresh",
    "beautiful",
    "see",
    "html",
    "content",
    "verify",
    "right",
    "clicking",
    "page",
    "looking",
    "page",
    "source",
    "look",
    "returning",
    "html",
    "content",
    "great",
    "let",
    "make",
    "bit",
    "interesting",
    "back",
    "template",
    "instead",
    "hello",
    "world",
    "dynamically",
    "render",
    "value",
    "back",
    "review",
    "function",
    "let",
    "type",
    "comma",
    "see",
    "next",
    "parameter",
    "context",
    "object",
    "type",
    "mapping",
    "string",
    "means",
    "pass",
    "mapping",
    "object",
    "maps",
    "string",
    "value",
    "type",
    "object",
    "pass",
    "dictionary",
    "let",
    "pass",
    "dictionary",
    "type",
    "key",
    "string",
    "call",
    "name",
    "going",
    "set",
    "value",
    "like",
    "let",
    "say",
    "mosh",
    "back",
    "template",
    "instead",
    "hello",
    "world",
    "render",
    "name",
    "passed",
    "type",
    "two",
    "pairs",
    "braces",
    "type",
    "name",
    "key",
    "save",
    "refresh",
    "beautiful",
    "template",
    "also",
    "write",
    "logic",
    "type",
    "statement",
    "type",
    "braces",
    "add",
    "two",
    "percentage",
    "signs",
    "write",
    "statement",
    "say",
    "name",
    "set",
    "render",
    "otherwise",
    "render",
    "hello",
    "world",
    "course",
    "need",
    "end",
    "clause",
    "well",
    "syntax",
    "kind",
    "ugly",
    "good",
    "thing",
    "django",
    "modular",
    "easily",
    "replace",
    "django",
    "default",
    "template",
    "engine",
    "preferred",
    "template",
    "engine",
    "really",
    "use",
    "templates",
    "django",
    "projects",
    "often",
    "days",
    "special",
    "cases",
    "part",
    "use",
    "django",
    "build",
    "apis",
    "return",
    "data",
    "html",
    "content",
    "included",
    "lesson",
    "know",
    "templates",
    "work",
    "going",
    "spend",
    "time",
    "templates",
    "unless",
    "encounter",
    "situation",
    "really",
    "need",
    "music",
    "let",
    "talk",
    "debugging",
    "django",
    "applications",
    "vs",
    "code",
    "particularly",
    "useful",
    "application",
    "produce",
    "right",
    "result",
    "want",
    "run",
    "line",
    "line",
    "see",
    "exactly",
    "something",
    "gone",
    "wrong",
    "click",
    "icon",
    "open",
    "run",
    "debug",
    "panel",
    "first",
    "time",
    "see",
    "message",
    "saying",
    "create",
    "file",
    "basically",
    "need",
    "create",
    "launch",
    "profile",
    "vs",
    "code",
    "knows",
    "run",
    "debug",
    "application",
    "let",
    "click",
    "list",
    "select",
    "django",
    "right",
    "file",
    "see",
    "kind",
    "like",
    "dictionary",
    "python",
    "bunch",
    "key",
    "value",
    "pairs",
    "key",
    "value",
    "pairs",
    "define",
    "launch",
    "profile",
    "vs",
    "code",
    "knows",
    "run",
    "application",
    "use",
    "current",
    "python",
    "interpreter",
    "run",
    "exists",
    "workspace",
    "folder",
    "argument",
    "pass",
    "run",
    "server",
    "add",
    "additional",
    "argument",
    "specify",
    "port",
    "clash",
    "port",
    "8000",
    "currently",
    "use",
    "okay",
    "save",
    "changes",
    "done",
    "file",
    "let",
    "close",
    "curious",
    "let",
    "show",
    "file",
    "exists",
    "added",
    "project",
    "inside",
    "vs",
    "code",
    "folder",
    "launch",
    "profile",
    "launch",
    "profile",
    "go",
    "run",
    "debug",
    "panel",
    "see",
    "something",
    "else",
    "start",
    "application",
    "debugging",
    "want",
    "write",
    "dummy",
    "code",
    "view",
    "function",
    "let",
    "set",
    "x",
    "1",
    "going",
    "click",
    "line",
    "insert",
    "breakpoint",
    "add",
    "breakpoint",
    "via",
    "scope",
    "execute",
    "every",
    "line",
    "code",
    "hits",
    "breakpoint",
    "point",
    "onward",
    "execute",
    "code",
    "line",
    "line",
    "let",
    "add",
    "breakpoint",
    "start",
    "application",
    "debugging",
    "right",
    "let",
    "collapse",
    "window",
    "good",
    "new",
    "terminal",
    "window",
    "development",
    "server",
    "listening",
    "port",
    "9000",
    "let",
    "hold",
    "command",
    "key",
    "mac",
    "control",
    "windows",
    "click",
    "link",
    "right",
    "get",
    "home",
    "page",
    "project",
    "gone",
    "registered",
    "custom",
    "route",
    "playground",
    "hello",
    "see",
    "homepage",
    "first",
    "time",
    "run",
    "django",
    "project",
    "let",
    "go",
    "playground",
    "hello",
    "right",
    "breakpoint",
    "activated",
    "line",
    "left",
    "side",
    "variables",
    "section",
    "see",
    "local",
    "variables",
    "currently",
    "request",
    "object",
    "request",
    "object",
    "receive",
    "function",
    "expand",
    "inspect",
    "various",
    "attributes",
    "want",
    "let",
    "close",
    "want",
    "execute",
    "code",
    "line",
    "line",
    "bunch",
    "functions",
    "first",
    "one",
    "step",
    "shortcut",
    "f10",
    "step",
    "current",
    "line",
    "press",
    "f10",
    "line",
    "gets",
    "executed",
    "second",
    "line",
    "look",
    "list",
    "local",
    "variables",
    "x",
    "value",
    "one",
    "useful",
    "debugging",
    "applications",
    "something",
    "calculated",
    "properly",
    "inspect",
    "time",
    "see",
    "local",
    "variables",
    "always",
    "add",
    "watch",
    "window",
    "recording",
    "video",
    "practicing",
    "see",
    "x",
    "let",
    "select",
    "delete",
    "watch",
    "section",
    "going",
    "variables",
    "add",
    "one",
    "simply",
    "click",
    "type",
    "name",
    "variable",
    "okay",
    "step",
    "various",
    "lines",
    "press",
    "f10",
    "function",
    "executed",
    "back",
    "browser",
    "see",
    "final",
    "result",
    "let",
    "something",
    "interesting",
    "back",
    "code",
    "let",
    "close",
    "terminal",
    "window",
    "space",
    "going",
    "define",
    "function",
    "called",
    "calculate",
    "going",
    "set",
    "x",
    "1",
    "2",
    "return",
    "x",
    "dummy",
    "code",
    "going",
    "call",
    "calculate",
    "function",
    "okay",
    "save",
    "changes",
    "back",
    "browser",
    "let",
    "refresh",
    "view",
    "function",
    "gets",
    "caught",
    "right",
    "time",
    "instead",
    "stepping",
    "line",
    "want",
    "step",
    "step",
    "line",
    "going",
    "see",
    "happened",
    "calculate",
    "function",
    "see",
    "final",
    "result",
    "see",
    "x",
    "set",
    "1",
    "verify",
    "well",
    "sometimes",
    "need",
    "step",
    "function",
    "see",
    "happening",
    "maybe",
    "bug",
    "inside",
    "calculate",
    "function",
    "let",
    "restart",
    "debugger",
    "okay",
    "going",
    "close",
    "back",
    "browser",
    "let",
    "refresh",
    "page",
    "okay",
    "back",
    "line",
    "time",
    "going",
    "step",
    "function",
    "look",
    "icon",
    "stepping",
    "function",
    "see",
    "shortcut",
    "f11",
    "press",
    "f11",
    "go",
    "inside",
    "calculate",
    "function",
    "execute",
    "line",
    "using",
    "f10",
    "step",
    "see",
    "something",
    "gone",
    "wrong",
    "let",
    "imagine",
    "calculate",
    "function",
    "large",
    "function",
    "lot",
    "code",
    "point",
    "want",
    "step",
    "without",
    "execute",
    "every",
    "line",
    "code",
    "function",
    "shortcut",
    "look",
    "step",
    "shortcut",
    "shift",
    "f11",
    "press",
    "shift",
    "f11",
    "get",
    "back",
    "previous",
    "function",
    "debug",
    "django",
    "applications",
    "vs",
    "code",
    "done",
    "always",
    "good",
    "practice",
    "remove",
    "breakpoints",
    "otherwise",
    "get",
    "way",
    "debug",
    "applications",
    "place",
    "various",
    "breakpoints",
    "different",
    "parts",
    "code",
    "hit",
    "time",
    "always",
    "remove",
    "breakpoints",
    "done",
    "done",
    "debugging",
    "session",
    "disconnect",
    "pressing",
    "shift",
    "f5",
    "clicking",
    "icon",
    "right",
    "one",
    "last",
    "tip",
    "finish",
    "lesson",
    "top",
    "run",
    "menu",
    "look",
    "command",
    "called",
    "run",
    "without",
    "debugging",
    "shortcut",
    "mac",
    "control",
    "f5",
    "use",
    "shortcut",
    "start",
    "application",
    "without",
    "run",
    "python",
    "run",
    "server",
    "let",
    "show",
    "mean",
    "first",
    "let",
    "bring",
    "terminal",
    "window",
    "second",
    "terminal",
    "window",
    "use",
    "debugging",
    "going",
    "delete",
    "first",
    "terminal",
    "window",
    "started",
    "application",
    "running",
    "python",
    "run",
    "server",
    "let",
    "press",
    "ctrl",
    "c",
    "stop",
    "server",
    "good",
    "also",
    "going",
    "delete",
    "terminal",
    "window",
    "let",
    "imagine",
    "opened",
    "project",
    "vs",
    "code",
    "day",
    "one",
    "run",
    "application",
    "without",
    "debugging",
    "press",
    "ctrl",
    "f5",
    "application",
    "started",
    "port",
    "9000",
    "go",
    "address",
    "hit",
    "playground",
    "hello",
    "run",
    "application",
    "without",
    "debugging",
    "remember",
    "use",
    "command",
    "breakpoints",
    "going",
    "get",
    "hit",
    "want",
    "debug",
    "applications",
    "start",
    "debug",
    "mode",
    "music",
    "another",
    "way",
    "debug",
    "django",
    "applications",
    "using",
    "powerful",
    "tool",
    "called",
    "django",
    "debug",
    "toolbar",
    "go",
    "google",
    "search",
    "django",
    "debug",
    "toolbar",
    "going",
    "find",
    "page",
    "going",
    "find",
    "installation",
    "instructions",
    "highly",
    "encourage",
    "follow",
    "along",
    "repeat",
    "steps",
    "installed",
    "toolbar",
    "together",
    "first",
    "use",
    "pip",
    "ppf",
    "install",
    "django",
    "debug",
    "toolbar",
    "back",
    "vs",
    "code",
    "going",
    "open",
    "new",
    "terminal",
    "window",
    "see",
    "vs",
    "code",
    "used",
    "source",
    "command",
    "activate",
    "virtual",
    "environment",
    "let",
    "run",
    "pipen",
    "install",
    "django",
    "dash",
    "debug",
    "dash",
    "toolbar",
    "good",
    "back",
    "documentation",
    "next",
    "step",
    "add",
    "debug",
    "toolbar",
    "list",
    "installed",
    "apps",
    "settings",
    "module",
    "back",
    "vs",
    "code",
    "press",
    "command",
    "p",
    "mac",
    "control",
    "p",
    "windows",
    "bring",
    "search",
    "box",
    "search",
    "settings",
    "module",
    "good",
    "list",
    "install",
    "apps",
    "end",
    "going",
    "add",
    "debug",
    "underline",
    "toolbar",
    "good",
    "next",
    "step",
    "next",
    "step",
    "add",
    "new",
    "url",
    "pattern",
    "main",
    "url",
    "conf",
    "module",
    "going",
    "copy",
    "line",
    "back",
    "vs",
    "code",
    "let",
    "bring",
    "urls",
    "module",
    "going",
    "pick",
    "one",
    "storefront",
    "folder",
    "okay",
    "add",
    "comma",
    "paste",
    "line",
    "compilation",
    "error",
    "debug",
    "toolbar",
    "module",
    "import",
    "top",
    "look",
    "documentation",
    "see",
    "import",
    "debug",
    "toolbar",
    "copy",
    "paste",
    "right",
    "good",
    "back",
    "documentation",
    "next",
    "step",
    "add",
    "middleware",
    "use",
    "middleware",
    "hook",
    "django",
    "request",
    "response",
    "processing",
    "settings",
    "module",
    "setting",
    "middleware",
    "going",
    "add",
    "line",
    "file",
    "copy",
    "back",
    "settings",
    "module",
    "install",
    "apps",
    "right",
    "see",
    "middleware",
    "setting",
    "going",
    "add",
    "top",
    "final",
    "step",
    "add",
    "ip",
    "address",
    "internal",
    "ips",
    "setting",
    "local",
    "development",
    "use",
    "going",
    "copy",
    "entire",
    "setting",
    "default",
    "exist",
    "new",
    "django",
    "project",
    "copy",
    "going",
    "paste",
    "anywhere",
    "settings",
    "file",
    "really",
    "matter",
    "okay",
    "save",
    "completed",
    "steps",
    "back",
    "browser",
    "go",
    "url",
    "playground",
    "slash",
    "hello",
    "see",
    "toolbar",
    "appear",
    "toolbar",
    "appears",
    "return",
    "proper",
    "html",
    "document",
    "right",
    "click",
    "look",
    "page",
    "source",
    "see",
    "returning",
    "proper",
    "html",
    "document",
    "html",
    "head",
    "body",
    "elements",
    "let",
    "open",
    "top",
    "type",
    "html",
    "press",
    "tab",
    "inside",
    "elements",
    "going",
    "add",
    "body",
    "inside",
    "body",
    "going",
    "add",
    "code",
    "earlier",
    "let",
    "move",
    "right",
    "good",
    "proper",
    "html",
    "document",
    "course",
    "head",
    "element",
    "missing",
    "really",
    "matter",
    "back",
    "browser",
    "refresh",
    "django",
    "debug",
    "toolbar",
    "different",
    "panels",
    "like",
    "history",
    "seeing",
    "urls",
    "hit",
    "far",
    "versions",
    "see",
    "version",
    "django",
    "python",
    "debug",
    "toolbar",
    "running",
    "processing",
    "time",
    "settings",
    "request",
    "headers",
    "personal",
    "favorite",
    "panel",
    "sql",
    "sql",
    "panel",
    "see",
    "queries",
    "sent",
    "database",
    "later",
    "course",
    "talk",
    "querying",
    "database",
    "using",
    "django",
    "object",
    "relational",
    "mapper",
    "going",
    "come",
    "back",
    "panel",
    "see",
    "queries",
    "django",
    "generate",
    "send",
    "database",
    "lesson",
    "done",
    "section",
    "next",
    "section",
    "going",
    "talk",
    "building",
    "data",
    "model",
    "see",
    "next",
    "section",
    "welcome",
    "back",
    "another",
    "section",
    "ultimate",
    "django",
    "course",
    "section",
    "going",
    "talk",
    "models",
    "used",
    "store",
    "retrieve",
    "data",
    "start",
    "quick",
    "introduction",
    "data",
    "modeling",
    "make",
    "sure",
    "know",
    "essential",
    "concepts",
    "going",
    "design",
    "data",
    "model",
    "application",
    "next",
    "going",
    "talk",
    "organizing",
    "models",
    "apps",
    "improve",
    "reusability",
    "one",
    "areas",
    "often",
    "misunderstood",
    "going",
    "demystify",
    "spend",
    "rest",
    "section",
    "coding",
    "model",
    "classes",
    "use",
    "classes",
    "store",
    "retrieve",
    "data",
    "throughout",
    "course",
    "let",
    "jump",
    "get",
    "started",
    "music",
    "first",
    "step",
    "every",
    "django",
    "project",
    "figuring",
    "pieces",
    "data",
    "want",
    "store",
    "entities",
    "concepts",
    "application",
    "well",
    "starters",
    "need",
    "concept",
    "product",
    "attributes",
    "like",
    "title",
    "description",
    "price",
    "inventory",
    "real",
    "scenario",
    "product",
    "entity",
    "might",
    "attributes",
    "really",
    "depends",
    "requirements",
    "application",
    "want",
    "keep",
    "things",
    "simple",
    "okay",
    "quite",
    "often",
    "products",
    "divided",
    "different",
    "categories",
    "like",
    "shoes",
    "beauty",
    "products",
    "fruits",
    "need",
    "another",
    "entity",
    "called",
    "collection",
    "category",
    "attribute",
    "called",
    "title",
    "need",
    "add",
    "relationship",
    "association",
    "entities",
    "start",
    "one",
    "end",
    "navigate",
    "end",
    "example",
    "get",
    "collection",
    "find",
    "products",
    "collection",
    "okay",
    "let",
    "assume",
    "application",
    "product",
    "belong",
    "one",
    "one",
    "collection",
    "collection",
    "multiple",
    "products",
    "asterisk",
    "represents",
    "many",
    "could",
    "also",
    "use",
    "n",
    "okay",
    "relationship",
    "collection",
    "product",
    "relationships",
    "many",
    "many",
    "back",
    "diagram",
    "add",
    "label",
    "called",
    "products",
    "means",
    "code",
    "entities",
    "classes",
    "collection",
    "class",
    "going",
    "attribute",
    "called",
    "products",
    "want",
    "hide",
    "simplicity",
    "okay",
    "sometimes",
    "multiple",
    "relationships",
    "multiple",
    "associations",
    "two",
    "entities",
    "let",
    "imagine",
    "collection",
    "optionally",
    "featured",
    "product",
    "product",
    "whose",
    "picture",
    "want",
    "show",
    "user",
    "add",
    "second",
    "relationship",
    "entities",
    "look",
    "number",
    "zero",
    "one",
    "means",
    "collection",
    "zero",
    "one",
    "product",
    "gon",
    "na",
    "call",
    "attribute",
    "featured",
    "product",
    "means",
    "collection",
    "class",
    "going",
    "attribute",
    "called",
    "featured",
    "product",
    "okay",
    "might",
    "ask",
    "id",
    "attribute",
    "every",
    "entity",
    "id",
    "attribute",
    "yes",
    "django",
    "going",
    "automatically",
    "create",
    "us",
    "shown",
    "little",
    "exercise",
    "grab",
    "piece",
    "paper",
    "identify",
    "essential",
    "entities",
    "need",
    "application",
    "bare",
    "minimum",
    "go",
    "ahead",
    "create",
    "complex",
    "diagram",
    "like",
    "want",
    "five",
    "entities",
    "want",
    "identify",
    "spend",
    "couple",
    "minutes",
    "identify",
    "entities",
    "along",
    "attributes",
    "relationships",
    "come",
    "back",
    "see",
    "solution",
    "right",
    "ended",
    "previous",
    "lesson",
    "relationship",
    "collections",
    "products",
    "take",
    "hard",
    "fast",
    "rule",
    "maybe",
    "application",
    "product",
    "belong",
    "many",
    "collections",
    "gon",
    "na",
    "relationship",
    "products",
    "collections",
    "okay",
    "back",
    "model",
    "gon",
    "na",
    "remove",
    "collection",
    "free",
    "space",
    "screen",
    "else",
    "need",
    "well",
    "every",
    "application",
    "concept",
    "shopping",
    "cart",
    "right",
    "going",
    "entity",
    "model",
    "class",
    "called",
    "cart",
    "attribute",
    "called",
    "created",
    "let",
    "assume",
    "need",
    "know",
    "card",
    "created",
    "every",
    "clean",
    "remove",
    "cards",
    "30",
    "days",
    "old",
    "made",
    "real",
    "scenario",
    "always",
    "design",
    "models",
    "based",
    "requirements",
    "project",
    "make",
    "rules",
    "okay",
    "need",
    "relationship",
    "association",
    "products",
    "cards",
    "card",
    "multiple",
    "products",
    "product",
    "might",
    "different",
    "cards",
    "relationship",
    "product",
    "cart",
    "sometimes",
    "relationship",
    "two",
    "entities",
    "attributes",
    "example",
    "product",
    "shopping",
    "cart",
    "need",
    "know",
    "many",
    "instances",
    "product",
    "shopping",
    "cart",
    "relationship",
    "attribute",
    "called",
    "quantity",
    "going",
    "add",
    "new",
    "entity",
    "called",
    "cart",
    "item",
    "look",
    "notation",
    "used",
    "represent",
    "concept",
    "connected",
    "cart",
    "item",
    "relationship",
    "using",
    "dashed",
    "line",
    "means",
    "cart",
    "item",
    "represents",
    "relationship",
    "two",
    "entities",
    "product",
    "cart",
    "call",
    "association",
    "class",
    "cart",
    "item",
    "association",
    "class",
    "okay",
    "another",
    "way",
    "show",
    "instead",
    "using",
    "association",
    "class",
    "add",
    "relationship",
    "cart",
    "cart",
    "item",
    "cart",
    "might",
    "contain",
    "multiple",
    "items",
    "item",
    "belongs",
    "one",
    "one",
    "cart",
    "similarly",
    "add",
    "relationship",
    "product",
    "card",
    "item",
    "card",
    "item",
    "represents",
    "single",
    "product",
    "product",
    "might",
    "referenced",
    "many",
    "card",
    "items",
    "two",
    "one",
    "many",
    "relationships",
    "entities",
    "compare",
    "association",
    "class",
    "notation",
    "either",
    "add",
    "relationship",
    "association",
    "class",
    "two",
    "relationships",
    "matter",
    "personal",
    "preference",
    "okay",
    "done",
    "shopping",
    "cart",
    "might",
    "ask",
    "user",
    "customer",
    "owns",
    "cart",
    "diagram",
    "well",
    "connected",
    "cart",
    "entity",
    "like",
    "customer",
    "want",
    "force",
    "people",
    "register",
    "log",
    "add",
    "products",
    "shopping",
    "cart",
    "okay",
    "relationship",
    "cards",
    "customers",
    "cars",
    "essentially",
    "anonymous",
    "anyone",
    "cart",
    "whether",
    "anonymous",
    "users",
    "registered",
    "customers",
    "okay",
    "done",
    "cart",
    "let",
    "talk",
    "customers",
    "customer",
    "entity",
    "attributes",
    "like",
    "name",
    "email",
    "username",
    "password",
    "simplicity",
    "showing",
    "name",
    "email",
    "customer",
    "many",
    "orders",
    "order",
    "belongs",
    "one",
    "one",
    "customer",
    "need",
    "relationship",
    "customers",
    "orders",
    "order",
    "entity",
    "might",
    "multiple",
    "attributes",
    "want",
    "know",
    "order",
    "placed",
    "okay",
    "order",
    "contain",
    "multiple",
    "products",
    "product",
    "multiple",
    "orders",
    "relationship",
    "orders",
    "products",
    "similar",
    "shopping",
    "cart",
    "example",
    "relationship",
    "needs",
    "attributes",
    "need",
    "another",
    "entity",
    "called",
    "order",
    "item",
    "attribute",
    "called",
    "quantity",
    "association",
    "class",
    "alternatively",
    "could",
    "add",
    "relationship",
    "order",
    "order",
    "item",
    "order",
    "may",
    "contain",
    "multiple",
    "items",
    "order",
    "item",
    "belongs",
    "one",
    "one",
    "order",
    "similarly",
    "order",
    "item",
    "references",
    "one",
    "one",
    "product",
    "given",
    "product",
    "might",
    "referenced",
    "multiple",
    "order",
    "items",
    "two",
    "relationships",
    "entities",
    "wanted",
    "identify",
    "make",
    "project",
    "interesting",
    "decided",
    "throw",
    "one",
    "entity",
    "tag",
    "relationship",
    "products",
    "tags",
    "product",
    "many",
    "tags",
    "tag",
    "might",
    "referenced",
    "different",
    "products",
    "come",
    "back",
    "entity",
    "next",
    "lesson",
    "music",
    "told",
    "django",
    "project",
    "contains",
    "one",
    "apps",
    "like",
    "apps",
    "phone",
    "app",
    "django",
    "project",
    "provides",
    "specific",
    "piece",
    "functionality",
    "means",
    "app",
    "going",
    "data",
    "model",
    "lesson",
    "going",
    "look",
    "different",
    "ways",
    "organize",
    "entities",
    "different",
    "apps",
    "one",
    "way",
    "single",
    "app",
    "called",
    "store",
    "drop",
    "entities",
    "bundle",
    "distribute",
    "app",
    "via",
    "pip",
    "way",
    "anyone",
    "install",
    "app",
    "project",
    "get",
    "models",
    "functionality",
    "around",
    "next",
    "time",
    "working",
    "ecommerce",
    "project",
    "rewrite",
    "functionality",
    "simply",
    "install",
    "app",
    "project",
    "write",
    "extra",
    "code",
    "customization",
    "great",
    "problem",
    "application",
    "grows",
    "gets",
    "complex",
    "gets",
    "bloated",
    "many",
    "things",
    "like",
    "many",
    "models",
    "many",
    "views",
    "stuff",
    "call",
    "monolith",
    "like",
    "large",
    "heavy",
    "piece",
    "stone",
    "point",
    "application",
    "might",
    "become",
    "hard",
    "understand",
    "hard",
    "maintain",
    "hard",
    "reuse",
    "becomes",
    "like",
    "one",
    "remote",
    "controls",
    "many",
    "buttons",
    "designing",
    "apps",
    "want",
    "follow",
    "unix",
    "philosophy",
    "app",
    "one",
    "thing",
    "well",
    "another",
    "solution",
    "break",
    "project",
    "four",
    "small",
    "apps",
    "products",
    "app",
    "represents",
    "product",
    "catalog",
    "gon",
    "na",
    "three",
    "entities",
    "product",
    "collection",
    "tag",
    "going",
    "customers",
    "app",
    "managing",
    "customers",
    "going",
    "shopping",
    "cart",
    "app",
    "adding",
    "shopping",
    "cart",
    "functionality",
    "orders",
    "app",
    "adding",
    "ordering",
    "functionality",
    "bad",
    "right",
    "well",
    "actually",
    "poor",
    "way",
    "breaking",
    "project",
    "number",
    "reasons",
    "look",
    "coupling",
    "dependency",
    "apps",
    "orders",
    "app",
    "dependent",
    "shopping",
    "cart",
    "app",
    "dependent",
    "products",
    "app",
    "next",
    "time",
    "working",
    "project",
    "install",
    "apps",
    "one",
    "one",
    "first",
    "install",
    "products",
    "app",
    "followed",
    "shopping",
    "cart",
    "app",
    "customers",
    "app",
    "orders",
    "app",
    "ideally",
    "app",
    "easily",
    "drop",
    "new",
    "project",
    "problem",
    "publish",
    "new",
    "version",
    "products",
    "app",
    "might",
    "cause",
    "breaking",
    "change",
    "shopping",
    "cart",
    "subsequently",
    "orders",
    "apps",
    "anyone",
    "using",
    "apps",
    "upgrade",
    "apps",
    "together",
    "work",
    "also",
    "really",
    "make",
    "sense",
    "shopping",
    "cart",
    "functionality",
    "without",
    "product",
    "catalog",
    "right",
    "would",
    "ever",
    "want",
    "add",
    "shopping",
    "cart",
    "functionality",
    "project",
    "without",
    "product",
    "catalog",
    "shopping",
    "cart",
    "functionality",
    "product",
    "catalog",
    "always",
    "go",
    "together",
    "token",
    "would",
    "ever",
    "want",
    "add",
    "shopping",
    "cart",
    "functionality",
    "project",
    "without",
    "ability",
    "place",
    "order",
    "allow",
    "people",
    "add",
    "something",
    "shopping",
    "cart",
    "really",
    "make",
    "sense",
    "concepts",
    "highly",
    "related",
    "bundled",
    "together",
    "separate",
    "increase",
    "coupling",
    "apps",
    "end",
    "problems",
    "talked",
    "mean",
    "go",
    "back",
    "monolithic",
    "design",
    "middle",
    "ground",
    "look",
    "tag",
    "entity",
    "ability",
    "tag",
    "products",
    "optional",
    "necessarily",
    "need",
    "every",
    "application",
    "fact",
    "might",
    "need",
    "types",
    "applications",
    "like",
    "blog",
    "video",
    "platform",
    "tagging",
    "specific",
    "products",
    "application",
    "separate",
    "piece",
    "functionality",
    "going",
    "move",
    "tag",
    "entity",
    "separate",
    "app",
    "called",
    "tags",
    "going",
    "another",
    "entity",
    "called",
    "tagged",
    "item",
    "represents",
    "item",
    "tagged",
    "product",
    "article",
    "video",
    "abstract",
    "concept",
    "separation",
    "app",
    "provides",
    "specific",
    "piece",
    "functionality",
    "use",
    "either",
    "new",
    "project",
    "depending",
    "going",
    "build",
    "plus",
    "zero",
    "coupling",
    "apps",
    "independently",
    "change",
    "deploy",
    "without",
    "affecting",
    "apps",
    "proper",
    "way",
    "break",
    "project",
    "multiple",
    "apps",
    "takeaway",
    "app",
    "boundary",
    "large",
    "end",
    "monolith",
    "gets",
    "bloated",
    "becomes",
    "hard",
    "reuse",
    "hand",
    "app",
    "boundaries",
    "small",
    "fine",
    "grained",
    "end",
    "lot",
    "coupling",
    "good",
    "design",
    "one",
    "minimal",
    "coupling",
    "high",
    "cohesion",
    "meaning",
    "high",
    "focus",
    "app",
    "focused",
    "specific",
    "piece",
    "functionality",
    "includes",
    "everything",
    "needed",
    "fulfill",
    "piece",
    "functionality",
    "okay",
    "back",
    "vs",
    "code",
    "going",
    "create",
    "two",
    "new",
    "apps",
    "run",
    "python",
    "start",
    "app",
    "first",
    "app",
    "store",
    "second",
    "one",
    "tags",
    "okay",
    "told",
    "every",
    "time",
    "create",
    "new",
    "app",
    "add",
    "list",
    "installed",
    "apps",
    "let",
    "close",
    "window",
    "go",
    "settings",
    "module",
    "list",
    "install",
    "apps",
    "going",
    "add",
    "apps",
    "right",
    "store",
    "tags",
    "right",
    "done",
    "step",
    "starting",
    "next",
    "lesson",
    "going",
    "create",
    "model",
    "classes",
    "apps",
    "hey",
    "guys",
    "bosh",
    "wanted",
    "let",
    "know",
    "tutorial",
    "watching",
    "actually",
    "first",
    "hour",
    "ultimate",
    "django",
    "course",
    "complete",
    "course",
    "10",
    "hours",
    "goes",
    "way",
    "beyond",
    "tutorial",
    "serious",
    "learning",
    "django",
    "looking",
    "job",
    "developer",
    "highly",
    "encourage",
    "enroll",
    "course",
    "course",
    "comes",
    "tons",
    "exercises",
    "solutions",
    "full",
    "project",
    "eventually",
    "deploy",
    "cloud",
    "plus",
    "guarantee",
    "certificate",
    "completion",
    "add",
    "resume",
    "case",
    "interested",
    "put",
    "link",
    "thank",
    "watching",
    "hope",
    "see",
    "course"
  ],
  "keywords": [
    "ultimate",
    "django",
    "course",
    "going",
    "need",
    "know",
    "concepts",
    "end",
    "use",
    "build",
    "web",
    "apps",
    "always",
    "development",
    "python",
    "right",
    "application",
    "looking",
    "one",
    "order",
    "back",
    "people",
    "code",
    "new",
    "sure",
    "time",
    "let",
    "get",
    "started",
    "talk",
    "take",
    "well",
    "classes",
    "also",
    "relationships",
    "refresh",
    "website",
    "case",
    "first",
    "want",
    "way",
    "lot",
    "gon",
    "na",
    "make",
    "every",
    "lesson",
    "write",
    "piece",
    "things",
    "go",
    "video",
    "tons",
    "section",
    "developer",
    "next",
    "set",
    "machine",
    "create",
    "project",
    "running",
    "show",
    "two",
    "debugging",
    "applications",
    "open",
    "framework",
    "building",
    "us",
    "like",
    "call",
    "means",
    "comes",
    "features",
    "example",
    "admin",
    "interface",
    "data",
    "object",
    "database",
    "without",
    "might",
    "come",
    "many",
    "used",
    "saying",
    "kind",
    "move",
    "something",
    "version",
    "another",
    "around",
    "world",
    "different",
    "using",
    "developers",
    "good",
    "music",
    "say",
    "store",
    "part",
    "inside",
    "browser",
    "client",
    "user",
    "server",
    "called",
    "url",
    "page",
    "request",
    "see",
    "return",
    "response",
    "http",
    "clients",
    "html",
    "content",
    "document",
    "instead",
    "complete",
    "list",
    "products",
    "essentially",
    "save",
    "various",
    "orders",
    "together",
    "provides",
    "api",
    "control",
    "okay",
    "app",
    "environment",
    "start",
    "terminal",
    "window",
    "run",
    "mac",
    "dash",
    "windows",
    "great",
    "pip",
    "install",
    "virtual",
    "vs",
    "highly",
    "panel",
    "search",
    "installed",
    "really",
    "matter",
    "directory",
    "name",
    "look",
    "created",
    "path",
    "command",
    "key",
    "click",
    "copy",
    "folder",
    "bunch",
    "files",
    "file",
    "work",
    "interpreter",
    "second",
    "top",
    "delete",
    "step",
    "bring",
    "type",
    "settings",
    "module",
    "define",
    "urls",
    "worry",
    "forward",
    "setting",
    "debug",
    "point",
    "port",
    "paste",
    "pressing",
    "ctrl",
    "view",
    "shortcut",
    "slash",
    "add",
    "collection",
    "functionality",
    "simply",
    "press",
    "playground",
    "close",
    "models",
    "model",
    "views",
    "template",
    "changes",
    "done",
    "function",
    "often",
    "hello",
    "import",
    "class",
    "send",
    "string",
    "route",
    "value",
    "parameter",
    "represents",
    "configuration",
    "include",
    "pass",
    "templates",
    "render",
    "remove",
    "line",
    "x",
    "breakpoint",
    "execute",
    "variables",
    "attributes",
    "gets",
    "calculate",
    "toolbar",
    "entities",
    "product",
    "entity",
    "attribute",
    "relationship",
    "association",
    "multiple",
    "hard",
    "shopping",
    "cart",
    "card",
    "item",
    "customer",
    "customers",
    "tag",
    "tags",
    "coupling"
  ]
}