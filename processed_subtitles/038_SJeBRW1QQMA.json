{
  "text": "JavaScript is a nearly perfect\nprogramming language the only thing it's\nmissing is a good framework for building\nwebsites now I've got a body count like\nWill Chamberlain when it comes to\nJavaScript Frameworks I've tried nearly\nall of them and each one does some nice\ntricks but none of them are marriage\nmaterial they all have their trade-offs\nwhich I'll explain throughout this video\nso you can understand what drives a\ndeveloper to the point of Madness where\nthey're left with no choice but to\ncreate their own JavaScript framework\nin my case God told me to do it allow me\nto introduce you to Holy JS actually\nnever mind somebody already took that\nname on npm let's go ahead and pivot to\nthe devil and call it flamethrower I\nthink that really captures the essence\nof JavaScript programming now at this\npoint you may be wondering if I'm joking\nthe sad reality is no I did actually\ncreate a game-changing platform for\nbuilding blazingly fast highly\ninteractive experiences on the jam stack\nI also raised millions of dollars for my\ncompany flamethrower Inc to Hype it up I\nstole 99 of my ideas from other tools\nbut I'm going to tell you that\neverything else sucks give it an MIT\nlicense and then call you out if you try\nto steal it so one day I might be as\nsuccessful as remix alright that part\nwas a joke about some Twitter drama but\nwhat I really want to teach you in this\nvideo is the trade-offs between all the\ndifferent major JavaScript Frameworks\nout there here's the normal flowchart I\nwould go through when choosing a\nframework for a new project the first\nquestion to ask is is the project highly\ninteractive like are you building an app\nwith user authentication with all kinds\nof data that can be manipulated by the\ncurrent user if the answer is no it\nsounds like you're building a regular\nwebsite AI in which case you don't need\na JavaScript framework life will be much\neasier with a static site generator like\nHugo or 11t and if you do end up needing\nJavaScript you can always drop in\nsomething like Alpine or petite view as\nopposed to a heavyweight framework or an\neven better option could be Astro which\ngenerates static HTML but allows you to\nbring in interactivity from any\nframework as needed now if you are\nbuilding a highly interactive app the\nnext question you might ask is does it\nneed to be search engine friendly or\ndoes it need to render HTML and data on\na server if the answer is no then just\nuse your favorite framework to build a\nsingle page application if you don't\nneed to render content in advance for\nsearch Bots then you can focus 100 on\nthe front end ux however if you do need\nSEO then your next question will be how\noften does the content change if it's\nlike a Blog where the content doesn't\nchange very often it sounds like you\nhave a jam stack application it\ntypically makes more sense to pre-render\nyour content and cache it on a CDN then\nallow a JavaScript framework to hydrate\nit and take over after the initial page\nload Frameworks like next.js and spell\nkit can do this in in SSG mode but you\nalso have tools like Gatsby that are\ndedicated to this use case although it's\nkind of fallen from Grace recently now\nif your content is highly Dynamic and\nconstantly changing then you'll likely\nneed full server-side rendering to\nregenerate the static content on the\nserver whenever a new request comes in\nthis is what tools like nexjs next and\nspill kit are designed to do and if\nyou're not exactly sure how your project\nis going to evolve I would default to a\nfull SSR framework\nthat gives you a simple framework for\nchoosing the right framework but things\ncan get a lot more complicated from here\nwhat I'm building is a platform to host\nmy courses it requires user\nauthentication and is highly interactive\nand also needs to have really good SEO\nthe content doesn't change all that\noften so that would lead us to the jam\nstack option I started working on the\nproject with spelled kit which is an\nawesome framework but is more general\npurpose and doesn't have a ton of\nfeatures for Content management compared\nto something like Hugo that leads to the\nquestion of how do I manage tons of\ncontent one option is I could stick with\nspell kit and just re-implement all\nthese content management features on my\nown don't get me wrong I love\nReinventing the wheel as much as the\nnext JavaScript developer but one other\nissue is that I'm worried these\nFrameworks won't be fast enough when\nrendering a lot of markdown the creator\nof 11t made a good Benchmark comparing\nthem option b would be to pay for a\nheadless CMS like contentful or sanity\nbut then I have to add another paid\nservice to my stack strappy is another\ngood option that you can self-host but\nthen I have to manage a separate server\nand database just to manage my content\nwhat I really want to do is just write\nall my content and work down and manage\nit in a git repository GitHub is\nactually an awesome free content\nmanagement system for developers\nalthough that's not its intended use\nthat line of thinking takes me back to\nstatic site generators which are the\nbest at handling markdown and templating\nAstro seems like a perfect choice here\nbut it brings up one other question\nwhich is how do I share data or state\nbetween different routes on Astro you'll\nnotice that when you navigate you get a\nfull page load for each route that means\nthe JavaScript reboots and even if you\nuse something like Nano stores or\nspelled stores the information from the\nprevious route is lost it's not like\nnext.js where the client-side router\ntakes over and renders the UI with\nJavaScript on all routes after the\ninitial page load this can be a problem\nif you're managing authentication state\nwith Json web tokens in something like\nFirebase and want to show the current\nuser up in the nav bar along with some\ndata from a database that might update\nin real time so basically that leads us\nback to next.js or any other framework\nthat fully hydrates after the initial\npage load there's also new Cutting Edge\nFrameworks like quick and solid start\nthat could be good options in the future\nbut I just need to get this project done\nis ASAP as possible and of course the\nmost efficient way to do that is to\nbuild your own JavaScript framework the\nquestion that led to this is how do I\ntake a static site ensure JavaScript\nfunctionality and data between routes\nwith zero latency on the page transition\nand without the need for a framework to\ntake over the entire Dom in other words\nI want a spa-like router for static\nsites and that's basically what I built\nit has zero dependencies and relies\nentirely on browser native technology\nlike fetch a long time ago when I first\nstarted working as a web developer there\nwas a library called pjax that would\nasynchronously fetch fragments of HTML\nfrom your server and update the Dom\nrather than do a full page reload this\napproach evolved into a library called\nturbo links which is still very popular\ntoday and receives more npm downloads\nthan most JavaScript Frameworks out\nthere the way it works is when you click\non a link it prevents that default\nBehavior then uses fetch to grab the\npage you want to navigate to it swaps\nout the body of the page then updates\nthe head with the delta or changes on\nthe new page that means if you already\nexecuted JavaScript on the previous page\nlike a global State Management Library\nit doesn't need to be re-executed on the\nnext page load that's really interesting\nbehavior and I'll explain why in just a\nminute but was the main inspiration for\nmy framework well actually it's just a\nlibrary technically the reason I didn't\njust use turbo links is because it's\nrather large and does a bunch of stuff\nthat I don't really need and there's a\nfew special features that I wanted to\nadd to my library to create a truly\nnext-gen holistic platform one of the\nbiggest things that annoys me about\nmodern web development is that when\nyou're building a big content-driven\nsite 99 of the UI is static HTML that\ndoesn't do anything however the common\napproach is to take this HTML and manage\nit 100 in a JavaScript framework there\nare some definite benefits to doing that\nbut it requires all kinds of special\ntooling things like virtual Dom and\nrequires you to stay married to just one\nframework as a polygamist I demand more\nfor my framework we can actually take an\nentirely different approach that's\nnatively supported in all browsers using\nweb components a lot of people like to\ntalk about web components for\nvarious reasons but basically it's just\na browser API for creating custom\nelements that encapsulate their own\nJavaScript and CSS there are Frameworks\ndedicated to building web components\nlike lit and stencil but all the major\nFrameworks can compile to web components\nas well one awesome thing about web\ncomponents is that you can use them\nanywhere like regular HTML elements you\ncan even use them in markdown without\nany extra plugins or dependencies on top\nof that you can use them between\nFrameworks for example I could build a\nweb component with svelte and then\naccess it from a react and angular app\nin my case web components are awesome\nbecause I can use a static site\ngenerator then add interactivity to my\ntemplates by simply declaring my custom\nelements it's kind of like the islands\narchitecture where you have islands of\ninteractivity but one thing to keep in\nmind is that web components will never\nbe server rendered they're only rendered\non the client although interestingly you\ncan project server rendered content in a\nweb component which I think would be\nperfectly indexable by search engines\nnow here's where things get really cool\nwhen you combine web components with the\nrouter they render instantly between\nroute changes what I have here is a\nstatically generated site with a counter\nweb component generated by spelled that\ngets its data from a spelled store when\nthe router is disabled it does a full\npage load and the current count is lost\nwhen we go to the next page now if we\nenable the router notice how the count\ndata is not lost between route changes\njust like a single page application not\nto mention the page transition feels\nmuch faster for the end user in this\ncode base I have an 11t project inside\nof which has an extra app directory that\ncontains a filter app configured to\ncompile to custom elements from a\ndevelopment standpoint the only thing\nyou really need to do differently is\nDefine a tag for each component then you\nexport each component individually the\nlast thing I'm doing is starting the\nflamethrower router by calling it as a\nfunction the router has a couple of\nextra features that you wouldn't find in\nsomething like turbo links for one it\nwill find all of the visible links on\nthe page and automatically tell the\nbrowser to pre-fetch them the browser\nwill automatically download these pages\nin the background so they're ready to\nrender as soon as a user clicks on a\nlink that's made possible with\nprefetched link tags and I also use the\nintersection Observer API to only\npre-fetch the links that are visible on\nthe screen because those are the ones\nthe user is more likely to click in\nother words as you scroll down it will\nlazily pre-fetch the links that come\ninto view if you want to see the actual\nlatency between route changes set log to\ntrue and it will add a timer to every\nfetch operation it should be blazingly\nfast like well under 100 milliseconds in\naddition I threw in a little bonus\nfeature that takes advantage of the new\npage transitions API this API isn't\nsupported in browsers yet and you'll\nneed to enable it with a flag but\nbasically it allows you to animate\nnatively between page transitions kind\nof like you would expect in a native\nmobile app as you can see by default it\ndoes a Crossfade animation the bottom\nline though is that this router has\nallowed me to create my own little meta\nframework using svelt compiled to web\ncomponents along with Hugo a static site\ngenerator which gives me awesome CMS\nfeatures with extremely fast builds with\nrouting that feels like a single page\napplication that's pretty much it the\nreal question is who's coming with me\nwho's coming with me\nwho's coming with me this is a proven\ntechnique and used on big sites like\ndev2 with turbo but currently\nflamethrower isn't meme status and I\nwouldn't recommend using it in\nproduction until it reaches Alpha I have\nthe luxury of doing weird experimental\nstuff like this but if you're building a\nserious app for yourself don't go\nchasing waterfalls stick to the\nlibraries and Frameworks that you're\nused to like next spell kit Astro and so\non now that I've hyped up my\ngame-changing JavaScript framework my\nnext step is to abandon it then ask for\ndonations via open Collective to start\nan SEO link Farm which is the most\nreliable way to fund open source I've\ngot to feed my family somehow thanks for\nwatching and I will see you in the next\none\n",
  "words": [
    "javascript",
    "nearly",
    "perfect",
    "programming",
    "language",
    "thing",
    "missing",
    "good",
    "framework",
    "building",
    "websites",
    "got",
    "body",
    "count",
    "like",
    "chamberlain",
    "comes",
    "javascript",
    "frameworks",
    "tried",
    "nearly",
    "one",
    "nice",
    "tricks",
    "none",
    "marriage",
    "material",
    "explain",
    "throughout",
    "video",
    "understand",
    "drives",
    "developer",
    "point",
    "madness",
    "left",
    "choice",
    "create",
    "javascript",
    "framework",
    "case",
    "god",
    "told",
    "allow",
    "introduce",
    "holy",
    "js",
    "actually",
    "never",
    "mind",
    "somebody",
    "already",
    "took",
    "name",
    "npm",
    "let",
    "go",
    "ahead",
    "pivot",
    "devil",
    "call",
    "flamethrower",
    "think",
    "really",
    "captures",
    "essence",
    "javascript",
    "programming",
    "point",
    "may",
    "wondering",
    "joking",
    "sad",
    "reality",
    "actually",
    "create",
    "platform",
    "building",
    "blazingly",
    "fast",
    "highly",
    "interactive",
    "experiences",
    "jam",
    "stack",
    "also",
    "raised",
    "millions",
    "dollars",
    "company",
    "flamethrower",
    "inc",
    "hype",
    "stole",
    "99",
    "ideas",
    "tools",
    "going",
    "tell",
    "everything",
    "else",
    "sucks",
    "give",
    "mit",
    "license",
    "call",
    "try",
    "steal",
    "one",
    "day",
    "might",
    "successful",
    "remix",
    "alright",
    "part",
    "joke",
    "twitter",
    "drama",
    "really",
    "want",
    "teach",
    "video",
    "different",
    "major",
    "javascript",
    "frameworks",
    "normal",
    "flowchart",
    "would",
    "go",
    "choosing",
    "framework",
    "new",
    "project",
    "first",
    "question",
    "ask",
    "project",
    "highly",
    "interactive",
    "like",
    "building",
    "app",
    "user",
    "authentication",
    "kinds",
    "data",
    "manipulated",
    "current",
    "user",
    "answer",
    "sounds",
    "like",
    "building",
    "regular",
    "website",
    "ai",
    "case",
    "need",
    "javascript",
    "framework",
    "life",
    "much",
    "easier",
    "static",
    "site",
    "generator",
    "like",
    "hugo",
    "11t",
    "end",
    "needing",
    "javascript",
    "always",
    "drop",
    "something",
    "like",
    "alpine",
    "petite",
    "view",
    "opposed",
    "heavyweight",
    "framework",
    "even",
    "better",
    "option",
    "could",
    "astro",
    "generates",
    "static",
    "html",
    "allows",
    "bring",
    "interactivity",
    "framework",
    "needed",
    "building",
    "highly",
    "interactive",
    "app",
    "next",
    "question",
    "might",
    "ask",
    "need",
    "search",
    "engine",
    "friendly",
    "need",
    "render",
    "html",
    "data",
    "server",
    "answer",
    "use",
    "favorite",
    "framework",
    "build",
    "single",
    "page",
    "application",
    "need",
    "render",
    "content",
    "advance",
    "search",
    "bots",
    "focus",
    "100",
    "front",
    "end",
    "ux",
    "however",
    "need",
    "seo",
    "next",
    "question",
    "often",
    "content",
    "change",
    "like",
    "blog",
    "content",
    "change",
    "often",
    "sounds",
    "like",
    "jam",
    "stack",
    "application",
    "typically",
    "makes",
    "sense",
    "content",
    "cache",
    "cdn",
    "allow",
    "javascript",
    "framework",
    "hydrate",
    "take",
    "initial",
    "page",
    "load",
    "frameworks",
    "like",
    "spell",
    "kit",
    "ssg",
    "mode",
    "also",
    "tools",
    "like",
    "gatsby",
    "dedicated",
    "use",
    "case",
    "although",
    "kind",
    "fallen",
    "grace",
    "recently",
    "content",
    "highly",
    "dynamic",
    "constantly",
    "changing",
    "likely",
    "need",
    "full",
    "rendering",
    "regenerate",
    "static",
    "content",
    "server",
    "whenever",
    "new",
    "request",
    "comes",
    "tools",
    "like",
    "nexjs",
    "next",
    "spill",
    "kit",
    "designed",
    "exactly",
    "sure",
    "project",
    "going",
    "evolve",
    "would",
    "default",
    "full",
    "ssr",
    "framework",
    "gives",
    "simple",
    "framework",
    "choosing",
    "right",
    "framework",
    "things",
    "get",
    "lot",
    "complicated",
    "building",
    "platform",
    "host",
    "courses",
    "requires",
    "user",
    "authentication",
    "highly",
    "interactive",
    "also",
    "needs",
    "really",
    "good",
    "seo",
    "content",
    "change",
    "often",
    "would",
    "lead",
    "us",
    "jam",
    "stack",
    "option",
    "started",
    "working",
    "project",
    "spelled",
    "kit",
    "awesome",
    "framework",
    "general",
    "purpose",
    "ton",
    "features",
    "content",
    "management",
    "compared",
    "something",
    "like",
    "hugo",
    "leads",
    "question",
    "manage",
    "tons",
    "content",
    "one",
    "option",
    "could",
    "stick",
    "spell",
    "kit",
    "content",
    "management",
    "features",
    "get",
    "wrong",
    "love",
    "reinventing",
    "wheel",
    "much",
    "next",
    "javascript",
    "developer",
    "one",
    "issue",
    "worried",
    "frameworks",
    "wo",
    "fast",
    "enough",
    "rendering",
    "lot",
    "markdown",
    "creator",
    "11t",
    "made",
    "good",
    "benchmark",
    "comparing",
    "option",
    "b",
    "would",
    "pay",
    "headless",
    "cms",
    "like",
    "contentful",
    "sanity",
    "add",
    "another",
    "paid",
    "service",
    "stack",
    "strappy",
    "another",
    "good",
    "option",
    "manage",
    "separate",
    "server",
    "database",
    "manage",
    "content",
    "really",
    "want",
    "write",
    "content",
    "work",
    "manage",
    "git",
    "repository",
    "github",
    "actually",
    "awesome",
    "free",
    "content",
    "management",
    "system",
    "developers",
    "although",
    "intended",
    "use",
    "line",
    "thinking",
    "takes",
    "back",
    "static",
    "site",
    "generators",
    "best",
    "handling",
    "markdown",
    "templating",
    "astro",
    "seems",
    "like",
    "perfect",
    "choice",
    "brings",
    "one",
    "question",
    "share",
    "data",
    "state",
    "different",
    "routes",
    "astro",
    "notice",
    "navigate",
    "get",
    "full",
    "page",
    "load",
    "route",
    "means",
    "javascript",
    "reboots",
    "even",
    "use",
    "something",
    "like",
    "nano",
    "stores",
    "spelled",
    "stores",
    "information",
    "previous",
    "route",
    "lost",
    "like",
    "router",
    "takes",
    "renders",
    "ui",
    "javascript",
    "routes",
    "initial",
    "page",
    "load",
    "problem",
    "managing",
    "authentication",
    "state",
    "json",
    "web",
    "tokens",
    "something",
    "like",
    "firebase",
    "want",
    "show",
    "current",
    "user",
    "nav",
    "bar",
    "along",
    "data",
    "database",
    "might",
    "update",
    "real",
    "time",
    "basically",
    "leads",
    "us",
    "back",
    "framework",
    "fully",
    "hydrates",
    "initial",
    "page",
    "load",
    "also",
    "new",
    "cutting",
    "edge",
    "frameworks",
    "like",
    "quick",
    "solid",
    "start",
    "could",
    "good",
    "options",
    "future",
    "need",
    "get",
    "project",
    "done",
    "asap",
    "possible",
    "course",
    "efficient",
    "way",
    "build",
    "javascript",
    "framework",
    "question",
    "led",
    "take",
    "static",
    "site",
    "ensure",
    "javascript",
    "functionality",
    "data",
    "routes",
    "zero",
    "latency",
    "page",
    "transition",
    "without",
    "need",
    "framework",
    "take",
    "entire",
    "dom",
    "words",
    "want",
    "router",
    "static",
    "sites",
    "basically",
    "built",
    "zero",
    "dependencies",
    "relies",
    "entirely",
    "browser",
    "native",
    "technology",
    "like",
    "fetch",
    "long",
    "time",
    "ago",
    "first",
    "started",
    "working",
    "web",
    "developer",
    "library",
    "called",
    "pjax",
    "would",
    "asynchronously",
    "fetch",
    "fragments",
    "html",
    "server",
    "update",
    "dom",
    "rather",
    "full",
    "page",
    "reload",
    "approach",
    "evolved",
    "library",
    "called",
    "turbo",
    "links",
    "still",
    "popular",
    "today",
    "receives",
    "npm",
    "downloads",
    "javascript",
    "frameworks",
    "way",
    "works",
    "click",
    "link",
    "prevents",
    "default",
    "behavior",
    "uses",
    "fetch",
    "grab",
    "page",
    "want",
    "navigate",
    "swaps",
    "body",
    "page",
    "updates",
    "head",
    "delta",
    "changes",
    "new",
    "page",
    "means",
    "already",
    "executed",
    "javascript",
    "previous",
    "page",
    "like",
    "global",
    "state",
    "management",
    "library",
    "need",
    "next",
    "page",
    "load",
    "really",
    "interesting",
    "behavior",
    "explain",
    "minute",
    "main",
    "inspiration",
    "framework",
    "well",
    "actually",
    "library",
    "technically",
    "reason",
    "use",
    "turbo",
    "links",
    "rather",
    "large",
    "bunch",
    "stuff",
    "really",
    "need",
    "special",
    "features",
    "wanted",
    "add",
    "library",
    "create",
    "truly",
    "holistic",
    "platform",
    "one",
    "biggest",
    "things",
    "annoys",
    "modern",
    "web",
    "development",
    "building",
    "big",
    "site",
    "99",
    "ui",
    "static",
    "html",
    "anything",
    "however",
    "common",
    "approach",
    "take",
    "html",
    "manage",
    "100",
    "javascript",
    "framework",
    "definite",
    "benefits",
    "requires",
    "kinds",
    "special",
    "tooling",
    "things",
    "like",
    "virtual",
    "dom",
    "requires",
    "stay",
    "married",
    "one",
    "framework",
    "polygamist",
    "demand",
    "framework",
    "actually",
    "take",
    "entirely",
    "different",
    "approach",
    "natively",
    "supported",
    "browsers",
    "using",
    "web",
    "components",
    "lot",
    "people",
    "like",
    "talk",
    "web",
    "components",
    "various",
    "reasons",
    "basically",
    "browser",
    "api",
    "creating",
    "custom",
    "elements",
    "encapsulate",
    "javascript",
    "css",
    "frameworks",
    "dedicated",
    "building",
    "web",
    "components",
    "like",
    "lit",
    "stencil",
    "major",
    "frameworks",
    "compile",
    "web",
    "components",
    "well",
    "one",
    "awesome",
    "thing",
    "web",
    "components",
    "use",
    "anywhere",
    "like",
    "regular",
    "html",
    "elements",
    "even",
    "use",
    "markdown",
    "without",
    "extra",
    "plugins",
    "dependencies",
    "top",
    "use",
    "frameworks",
    "example",
    "could",
    "build",
    "web",
    "component",
    "svelte",
    "access",
    "react",
    "angular",
    "app",
    "case",
    "web",
    "components",
    "awesome",
    "use",
    "static",
    "site",
    "generator",
    "add",
    "interactivity",
    "templates",
    "simply",
    "declaring",
    "custom",
    "elements",
    "kind",
    "like",
    "islands",
    "architecture",
    "islands",
    "interactivity",
    "one",
    "thing",
    "keep",
    "mind",
    "web",
    "components",
    "never",
    "server",
    "rendered",
    "rendered",
    "client",
    "although",
    "interestingly",
    "project",
    "server",
    "rendered",
    "content",
    "web",
    "component",
    "think",
    "would",
    "perfectly",
    "indexable",
    "search",
    "engines",
    "things",
    "get",
    "really",
    "cool",
    "combine",
    "web",
    "components",
    "router",
    "render",
    "instantly",
    "route",
    "changes",
    "statically",
    "generated",
    "site",
    "counter",
    "web",
    "component",
    "generated",
    "spelled",
    "gets",
    "data",
    "spelled",
    "store",
    "router",
    "disabled",
    "full",
    "page",
    "load",
    "current",
    "count",
    "lost",
    "go",
    "next",
    "page",
    "enable",
    "router",
    "notice",
    "count",
    "data",
    "lost",
    "route",
    "changes",
    "like",
    "single",
    "page",
    "application",
    "mention",
    "page",
    "transition",
    "feels",
    "much",
    "faster",
    "end",
    "user",
    "code",
    "base",
    "11t",
    "project",
    "inside",
    "extra",
    "app",
    "directory",
    "contains",
    "filter",
    "app",
    "configured",
    "compile",
    "custom",
    "elements",
    "development",
    "standpoint",
    "thing",
    "really",
    "need",
    "differently",
    "define",
    "tag",
    "component",
    "export",
    "component",
    "individually",
    "last",
    "thing",
    "starting",
    "flamethrower",
    "router",
    "calling",
    "function",
    "router",
    "couple",
    "extra",
    "features",
    "would",
    "find",
    "something",
    "like",
    "turbo",
    "links",
    "one",
    "find",
    "visible",
    "links",
    "page",
    "automatically",
    "tell",
    "browser",
    "browser",
    "automatically",
    "download",
    "pages",
    "background",
    "ready",
    "render",
    "soon",
    "user",
    "clicks",
    "link",
    "made",
    "possible",
    "prefetched",
    "link",
    "tags",
    "also",
    "use",
    "intersection",
    "observer",
    "api",
    "links",
    "visible",
    "screen",
    "ones",
    "user",
    "likely",
    "click",
    "words",
    "scroll",
    "lazily",
    "links",
    "come",
    "view",
    "want",
    "see",
    "actual",
    "latency",
    "route",
    "changes",
    "set",
    "log",
    "true",
    "add",
    "timer",
    "every",
    "fetch",
    "operation",
    "blazingly",
    "fast",
    "like",
    "well",
    "100",
    "milliseconds",
    "addition",
    "threw",
    "little",
    "bonus",
    "feature",
    "takes",
    "advantage",
    "new",
    "page",
    "transitions",
    "api",
    "api",
    "supported",
    "browsers",
    "yet",
    "need",
    "enable",
    "flag",
    "basically",
    "allows",
    "animate",
    "natively",
    "page",
    "transitions",
    "kind",
    "like",
    "would",
    "expect",
    "native",
    "mobile",
    "app",
    "see",
    "default",
    "crossfade",
    "animation",
    "bottom",
    "line",
    "though",
    "router",
    "allowed",
    "create",
    "little",
    "meta",
    "framework",
    "using",
    "svelt",
    "compiled",
    "web",
    "components",
    "along",
    "hugo",
    "static",
    "site",
    "generator",
    "gives",
    "awesome",
    "cms",
    "features",
    "extremely",
    "fast",
    "builds",
    "routing",
    "feels",
    "like",
    "single",
    "page",
    "application",
    "pretty",
    "much",
    "real",
    "question",
    "coming",
    "coming",
    "coming",
    "proven",
    "technique",
    "used",
    "big",
    "sites",
    "like",
    "dev2",
    "turbo",
    "currently",
    "flamethrower",
    "meme",
    "status",
    "would",
    "recommend",
    "using",
    "production",
    "reaches",
    "alpha",
    "luxury",
    "weird",
    "experimental",
    "stuff",
    "like",
    "building",
    "serious",
    "app",
    "go",
    "chasing",
    "waterfalls",
    "stick",
    "libraries",
    "frameworks",
    "used",
    "like",
    "next",
    "spell",
    "kit",
    "astro",
    "hyped",
    "javascript",
    "framework",
    "next",
    "step",
    "abandon",
    "ask",
    "donations",
    "via",
    "open",
    "collective",
    "start",
    "seo",
    "link",
    "farm",
    "reliable",
    "way",
    "fund",
    "open",
    "source",
    "got",
    "feed",
    "family",
    "somehow",
    "thanks",
    "watching",
    "see",
    "next",
    "one"
  ],
  "keywords": [
    "javascript",
    "thing",
    "good",
    "framework",
    "building",
    "count",
    "like",
    "frameworks",
    "one",
    "developer",
    "create",
    "case",
    "actually",
    "go",
    "flamethrower",
    "really",
    "platform",
    "fast",
    "highly",
    "interactive",
    "jam",
    "stack",
    "also",
    "tools",
    "might",
    "want",
    "different",
    "would",
    "new",
    "project",
    "question",
    "ask",
    "app",
    "user",
    "authentication",
    "data",
    "current",
    "need",
    "much",
    "static",
    "site",
    "generator",
    "hugo",
    "11t",
    "end",
    "something",
    "even",
    "option",
    "could",
    "astro",
    "html",
    "interactivity",
    "next",
    "search",
    "render",
    "server",
    "use",
    "build",
    "single",
    "page",
    "application",
    "content",
    "100",
    "seo",
    "often",
    "change",
    "take",
    "initial",
    "load",
    "spell",
    "kit",
    "although",
    "kind",
    "full",
    "default",
    "things",
    "get",
    "lot",
    "requires",
    "spelled",
    "awesome",
    "features",
    "management",
    "manage",
    "markdown",
    "add",
    "takes",
    "state",
    "routes",
    "route",
    "lost",
    "router",
    "web",
    "basically",
    "way",
    "dom",
    "browser",
    "fetch",
    "library",
    "approach",
    "turbo",
    "links",
    "link",
    "changes",
    "well",
    "using",
    "components",
    "api",
    "custom",
    "elements",
    "extra",
    "component",
    "rendered",
    "see",
    "coming"
  ]
}