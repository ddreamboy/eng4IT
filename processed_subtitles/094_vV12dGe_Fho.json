{
  "text": "hey youtube in this video we're going to\ntalk about time series forecast using\nmachine learning and python time series\nforecasting is a very common problem\nthat you face as a data scientist where\nyou have historic data and you want to\npredict into the future in this video we\nare specifically going to be using a\nmachine learning algorithm called\nxgboost and depending who you asked\nbojan many believe xgboost is one of the\nbest out of box machine learning models\nto use on tabular data and even time\nseries problems like this what's even\nbetter we're going to be working\ncompletely in a kaggle notebook so you\ncan just click the copy button on the\ntop of it and if you have a kaggle\naccount you can edit the same code that\nwe're working with today and explore it\nyourself my name is rob i make videos\nabout data science machine learning and\ncoding in python if you enjoy this video\nplease consider liking and subscribing\nit really encourages me to keep on\nmaking videos like this in the future\nokay let's get into the code so a little\nbackground on the data set that we're\ngoing to be using for this tutorial and\nwe're going to be using\nan hourly energy consumption data set\nthat i actually uploaded to kaggle a\nwhile ago it's been very popular and\nwhat it has is energy consumptions for\ndifferent regions\nin a portion of the country\nand we have those values at an hourly\nbasis for over 10 years so here we are\nin a kaggle notebook and if i look over\non the right side i can show you that we\nhave this hourly energy consumption data\nset imported that we'll be using a\nlittle bit later but let's get started\nby doing some imports so we're going to\nimport pandas as pd\nimport\nnumpy\nas np import matplotlib\npi plot as plt\nand let's also import seaborn as sns\nand then for our modeling we're going to\nimport xg\nboost\nas xgb this is going to be the model\nthat we use for our forecasting\nnow before we even get into the data we\nneed to talk about how there are\ndifferent types of time series data now\nif we had\ndata time series data that was just\ncompletely random there'd be no point in\nmodeling at all\nbut there can also be other trends in\nour data that we want to account for\nthere can be\nexponential growth something like you\nmight see in the stock market\nincreasing or decreasing linear trend\nseasonal patterns and also there can be\na combination of any of these so\nseasonal patterns with growth the type\nof data that we're going to be looking\nat today we will see is mainly seasonal\nnow sometimes people refer to this as\nthe time series being stationary or\nnon-stationary\nbut for more most time series it won't\nactually fall into exactly one bucket\nand this actually boost model that we're\ngonna use\nworks pretty well with changes to the\ndata over time but you're gonna have to\naccount for this depending on what your\ndata set looks like now let's go ahead\nand read in this data set by using\npandas read csv\nwe're going to open up the hourly energy\nconsumption\nand we're going to read pgm east hourly\nand call this df for data frame\nif we quickly run just a head command on\nthis we can see the first few rows\nand we see that we have going back to\n2002\nthe hourly energy consumption value and\nif i run a tail command on it i can see\nit goes all the way up to 2018 with\npandas it's pretty common to set our\nindex to be the date time\ncolumn since that will be consistent in\nthis time series data set and let's go\nahead and save that off\nand then it'll be\nit's a good idea to actually visualize\nit so let's make this a plot\nwith a style of\ndots instead of a line\nlet's give it a\nfigure size\nlet's also pull the color palette from\nseaborne so we can use that when we're\nplotting and put this up here by our\nimports\nand we will just make the color the\nfirst color in this color palette we\ncould put this up here and maybe give it\na title\npjm east\nenergy\nuse in\nmegawatts and we can show it now another\nthing i'm noticing is it looks like this\ndata fram index\nis just\nan object type so we might want to cast\nthis as a date time\nby running pandas to date time on the\nindex and now our our index d type is\nactually a date time 64\ntype which is uh much better for this\ncase instead of just having this be a\nstring we'll do this when we load in our\ndata and now if we plot it\nthe x-axis looks a little bit easier to\nread\nbecause it's formatted as a date time\ninstead of\na string value i'm just going to go\nahead here and split these lines to make\nit a little easier to read and then\nwe're going to go\ninto the\ntrain\ntest split\nnow if you're really building a model\nthat you're going to productionize there\nare some ways to do full cross\nvalidation\nin a time series data set\nwe're not going to go into that in\ndetail in this video but i do have\nanother video about cross validation\nthat you should check out but here just\nfor learning's sake we are going to take\nour data and we are going to split on\nthe date january 2015\nand have everything prior to january\n2015 be our training data and keep our\ntest data as\nthe following dates\nso we can make uh we can do that pretty\neasily by taking the index and finding\nwhere it's less than january 1st 2015\nlocating those\nrows in our data set\nand then calling this train\nand similarly we'll call this test if\nit's greater than or equal\nto those dates\njust to visualize this i'm going to\nactually plot both of these\nin the same plot by making a matplotlib\nsubplot we're gonna plot train\nand we're gonna plot test\nand we'll add labels to each so the\nfirst one is training set\nand the second one is\ntest set and we'll do plot.show\nthe colors are going to be different\nand we can see here that we have split\nhere\njanuary 2015. actually let's just make a\nline there too\nwe'll make a line there on that date\nwith the color being black and the style\nline style being dashed lines\nand i'm going to add in a legend so this\nname actually looks correct let's add\nthis title here that call this train\ntest split\nbeautiful\nnow another thing we might want to look\nat while we're exploring this data is\njust\nto get an idea of what's one single week\nof data looks like let's take january\n1st\n2010\nand\nup until january\n8th\n2010\nthis should just be one week of data\nand let's go ahead and plot this\nso we can notice a few things here it\nlooks like within each day there are two\ndifferent peaks this is pretty common in\nenergy consumption and there are also\nvalleys during the nights\nit also looks like you have a weekend\neffect here where\none of these days actually january 1st\nwould even be a holiday will be affected\nby\nthat day either being a weekday or a\nweekend so that brings us to our next\nstep which is feature creation we're\ngoing to create some features with this\ndata using the time series index luckily\npandas makes this very easy for us so if\nwe take the just the index we see here\nwe have a list of all the dates but we\ncan actually use the\ndot hour on this and we'll get a number\nvalue for each of these dates which is\njust the hour component so we're going\nto go ahead and add this as a\nnew column in our data set called hour\nwe're going to do the same thing for the\nday of week\nby doing df index dot\nday\nof week\nnow these values will start i think as a\nmonday but we can always look these up\nin the documentation you see that day of\nweek here monday is a zero and sunday is\na six\nwe can pull out the quarter which will\nbe\nsplitting the year into four different\ngroups\nand then of course the month\nwe can do\nthe year\nwe can even do the day of year\nso let's go ahead and add these in as\nfeatures\nand just to clean this up we are going\nto make this into a function called\ncreate features\nthat will take in a data frame\nand return the data frame with the\nfeatures added let's also give it a\nquick doc string that says\ncreate time series features based on\ntime series index\nand we'll run this function\non our data frame now let's go ahead and\nvisualize\nour feature to target\nrelationship now one of the ways we can\nvisualize our feature versus our target\nis by using seaborne's box plots box\nplots are nice because they get you give\nyou an idea of the distribution of the\ndata set so we're going to give it the\ndata of this data frame\nour x variable is going to be the hour\nand our y variable is going to be\npjm\neast megawatt and let's give this a\nbigger fig size\nand go give it a title megawatts by hour\nso we can see here that early in the\nmorning there seems to be a dip in\nenergy use and it tends to get higher\nlater in the evening now we can do the\nsame thing with month\nlet's give it a different color palette\nand there we can see that the megawatt\nuses by month\ntends to\npeak here two times in the winter season\nthen in the fall and spring it has lower\nin another peak in the middle of summer\nwhen everyone's running their ac units\nokay now that we've created features and\nwe know our target and we have some idea\nof the relationship between the two we\nare going to create\nour model we're going to create our\nmodel based on the training data and\nevaluate it on the test data set so\nlet's actually import a metric i forgot\nto do this earlier but from\nfrom\nsk learn metrics\nwe're going to import mean\nmean squared error as our metric mean\nsquared error will give us more penalty\nfor any predictions that's way off\nversus just a little bit off but the\ntype of metric you might want to use for\nyour data set will really depend on what\nyou're looking to do now this is a\nregression test so we're going to create\na regression model using xgboose's\nregressor xgb regressor\nnow there are a lot of things that you\ncan tune in xgboost but we're going to\nstart with the number of estimators\nthat's basically just how many trees\nthis boosted tree algorithm will create\nwe're gonna set that to a thousand\nand then we're gonna go ahead and fit\nthis\non our training set\nbut before we do we need to take our\ntraining\nand test data set\nand run them through the create features\nfunction\ni'm going to add df copy here to create\nfeatures that'll make sure that we're\nactually editing a copy of our data\nframe when we run it through here it'll\nget rid of that error\nand then let's also define our features\nwhich are all of the columns that we\ncreated\ntime series features\nand our target\nwhich is this pjm\neast megawatts\nnow we're going to actually make a\nfeatures data set from our training data\nset and call it x train\nand that's just going to be all of the\nfeatures\nfrom our training data set we're also\ngoing to make a y train which is our\ntarget and that's just going to be the\ntarget column from our data set and\nwe're going to do the same thing with\nour test\nnow we can feed this through our model\nso we'll give this our fit method takes\nx train\nand y train\nand we're actually going to give it a\nvaluation set\nwhich is\ngoing to be both our x train\nand x test y test\nwe're going to have the model training\nstop early if it\nif the test set does not improve\nafter 50 trees and we're going to make\nthis verbose\nso actually it's saying that we need to\nput the early stopping rounds here\nwhen we create the model itself\nnow as we train here we can see that the\nroot mean squared error as trends are\nbeing added to the model on the training\nset\nbegin to go down\nand also the root mean square error\nvalue on the test set or validation set\nstarts to go down\nbut then the validation set starts to\nget worse and this is overfitting and\nthat's what we would like to avoid\nearly stopping will stop our model\ntraining once it sees this occur since\nwe've given an evaluation set\nbut also another thing we can do is\nlower our learning rate to make sure\nthat it doesn't over fit too quickly\nlet's try this again\nand when we actually provided this\nverbose we can tell it give it a number\ninstead of true that'll tell us just to\nprint out the training and validation\nscore\nevery 100 trees that are built\nnow what you can see here it stopped\nafter 436 trees that's because our test\nor validation set started to actually\nget worse after that many trees were\nbuilt\nnow one of the nice things about our\nmodel now that it's trained with xgboost\nwe couldn't check out the feature\nimportances and we do that by just\nrunning feature importances off of the\nregressor that we've created and that'll\ngive us the importance values based on\nhow much these features were used in\neach of the trees built by the xg boost\nmodel\nbut these values by themselves aren't\nvery helpful so let's make a pandas data\nframe\nwhere the data\nis these features importances\nand our index is\nthe feature names\nlet's also call the\ncolumns\nis importance\nand call this data frame fi for short\nwe can sort the values\nby importance\nand\nplot as a\nhorizontal bar plot with the title\nof feature\nimportance\nput this up here\nand now we can see that the model has\nreally been using the hour feature and\nthe month feature the day of week and\nday of year feature less and then\nyear is down here at the bottom there's\nsome overlap in these types of features\nif we removed month\nday of year would just be used in its\nplace so keep in mind that when you have\nhighly correlated features this feature\nimportance\nfunctionality really will not tell you\nexactly how important each feature is\nindividually more so as a collective in\nthis complete model there are other\nthere are other packages out there for\nexploring future importances more but\nthis gives us a good idea of what our\nmodel is using\nall right now we're gonna forecast on\nthe test set with our trained model\nwe can do this simply with just taking\nour regressor and doing predict\non our x test set and we're provided a\nnumpy array of all the predictions for\nthe test set let's take our test data\nand make a new column called prediction\nwhere we will store these predictions\nthen because i would like to see these\nnext to all of the training data let's\nmerge this\non the test set\nlet's do uh\nhow equals left\nand\nlet's do left index is true and right\nindex is true to say that we'll merge\nthese two data frames\non the index columns\nand we don't want to copy over all the\nfeatures so we're just going to take\nthis\nprediction\ncolumn and merge it over\nnow in our main data set that we first\nstarted with we now have a prediction\ncolumn for our test set\nand if we plot\npjm east\nand\nplot our prediction\nnow we can plot our\nrod\ndata\nand predictions\nlet's give this a legend so putting this\nall together we can see our predictions\nplotted on top of\nthe training data set\nand similar to what we did before let's\ntry to take a look at this one week of\npredictions\nbut we're gonna have to do 2018 because\nthat's in the test set\nso what i've done here is i'm plotting\nthe predictions and the ground truth\nover one week and you can see that the\nmodel isn't perfect there's a lot of\nimprovement that can be made\nsome ideas include doing better\nparameter tuning we did not tune this\nmodel at all\nwe could also\nadd in features for specific\ndays of the year like holidays that\nmight carry forward\nto\neither increase or decrease the energy\nuse that it would predict for those days\nthere's a lot that can be done to make\nthis better but you could see that our\npredictions on the test set in this week\ndo actually follow the trend that you\nwould expect to see\ngoing up and down having the dips during\nthe\nthe night times\nand we can even run our evaluation\nmetric on this\nby using our test predictions\nwell let's do mean squared error\nwhich takes first the true value and\nthen the prediction so that would be our\ntest\npjm east megawatt\nand then our prediction now i'm actually\ngoing to run the square root of the mean\nsquared error this will get us the root\nmean squared error which is the same\nmetric that we were using here rmsc when\nwe're evaluating the model as it trained\nso our root mean squared error on the\ntest set\nis\nthree three thousand seven hundred and\nfourteen\nto improve this model we would want to\nreduce that score so i'm gonna print\nthis here\nand we're gonna print out the score with\nlet's do four decimal pl points there\ntwo decimal points looks pretty good\nanother thing we can do is just\ncalculate the error so let's take our\ntest data set\nand our target value\nand subtract our predictions\nprediction and then let's take the\nabsolute value of this so that the\nnegative and positive don't matter but\nit'll just give us a general error value\nfor each of our predictions\nand let's look at the worst and best\npredicted\ndays\nso what i'm going to do here in the test\nset is take the index\nand then take the date\nso that each date's going to have its\nown value and make that a new column\nand if we group by date\ntake our error\nand the mean value\nthis will give us the average error for\neach\nday that we've predicted and then if we\njust sort values all right if i do\nascending equals false and then we take\nthe head of the five\nthen we can see that the worst predicted\ndays all seem to be\nin the middle of august of 2016.\nand if i do the opposite way with a\nsending equals true we can see that some\nof the best predictions were made\nin 2016 as well so by calculating error\nwe can then see which dates we actually\npredict for the worst and try to improve\nthose going forward\nnow in terms of next steps\nthat you would want to do if you were\nactually running this yourselves would\nbe to\ncreate a more\nrobust cross validation\nto add more features\nif you could get them from external\nsources like maybe the weather forecast\nor\nholidays\nand add those in as features to the\nmodel and see how it improves things\nthanks so much for watching this quick\ntutorial on how to use machine learning\nfor time series forecasting if you like\nthis video please consider liking and\nsubscribing that way you'll get alerted\nevery time i create a new video let me\nknow in the comments if you have any\nfeedback or things you'd like me to see\nmake videos about in the future see you\nnext time\n",
  "words": [
    "hey",
    "youtube",
    "video",
    "going",
    "talk",
    "time",
    "series",
    "forecast",
    "using",
    "machine",
    "learning",
    "python",
    "time",
    "series",
    "forecasting",
    "common",
    "problem",
    "face",
    "data",
    "scientist",
    "historic",
    "data",
    "want",
    "predict",
    "future",
    "video",
    "specifically",
    "going",
    "using",
    "machine",
    "learning",
    "algorithm",
    "called",
    "xgboost",
    "depending",
    "asked",
    "bojan",
    "many",
    "believe",
    "xgboost",
    "one",
    "best",
    "box",
    "machine",
    "learning",
    "models",
    "use",
    "tabular",
    "data",
    "even",
    "time",
    "series",
    "problems",
    "like",
    "even",
    "better",
    "going",
    "working",
    "completely",
    "kaggle",
    "notebook",
    "click",
    "copy",
    "button",
    "top",
    "kaggle",
    "account",
    "edit",
    "code",
    "working",
    "today",
    "explore",
    "name",
    "rob",
    "make",
    "videos",
    "data",
    "science",
    "machine",
    "learning",
    "coding",
    "python",
    "enjoy",
    "video",
    "please",
    "consider",
    "liking",
    "subscribing",
    "really",
    "encourages",
    "keep",
    "making",
    "videos",
    "like",
    "future",
    "okay",
    "let",
    "get",
    "code",
    "little",
    "background",
    "data",
    "set",
    "going",
    "using",
    "tutorial",
    "going",
    "using",
    "hourly",
    "energy",
    "consumption",
    "data",
    "set",
    "actually",
    "uploaded",
    "kaggle",
    "ago",
    "popular",
    "energy",
    "consumptions",
    "different",
    "regions",
    "portion",
    "country",
    "values",
    "hourly",
    "basis",
    "10",
    "years",
    "kaggle",
    "notebook",
    "look",
    "right",
    "side",
    "show",
    "hourly",
    "energy",
    "consumption",
    "data",
    "set",
    "imported",
    "using",
    "little",
    "bit",
    "later",
    "let",
    "get",
    "started",
    "imports",
    "going",
    "import",
    "pandas",
    "pd",
    "import",
    "numpy",
    "np",
    "import",
    "matplotlib",
    "pi",
    "plot",
    "plt",
    "let",
    "also",
    "import",
    "seaborn",
    "sns",
    "modeling",
    "going",
    "import",
    "xg",
    "boost",
    "xgb",
    "going",
    "model",
    "use",
    "forecasting",
    "even",
    "get",
    "data",
    "need",
    "talk",
    "different",
    "types",
    "time",
    "series",
    "data",
    "data",
    "time",
    "series",
    "data",
    "completely",
    "random",
    "point",
    "modeling",
    "also",
    "trends",
    "data",
    "want",
    "account",
    "exponential",
    "growth",
    "something",
    "like",
    "might",
    "see",
    "stock",
    "market",
    "increasing",
    "decreasing",
    "linear",
    "trend",
    "seasonal",
    "patterns",
    "also",
    "combination",
    "seasonal",
    "patterns",
    "growth",
    "type",
    "data",
    "going",
    "looking",
    "today",
    "see",
    "mainly",
    "seasonal",
    "sometimes",
    "people",
    "refer",
    "time",
    "series",
    "stationary",
    "time",
    "series",
    "wo",
    "actually",
    "fall",
    "exactly",
    "one",
    "bucket",
    "actually",
    "boost",
    "model",
    "gon",
    "na",
    "use",
    "works",
    "pretty",
    "well",
    "changes",
    "data",
    "time",
    "gon",
    "na",
    "account",
    "depending",
    "data",
    "set",
    "looks",
    "like",
    "let",
    "go",
    "ahead",
    "read",
    "data",
    "set",
    "using",
    "pandas",
    "read",
    "csv",
    "going",
    "open",
    "hourly",
    "energy",
    "consumption",
    "going",
    "read",
    "pgm",
    "east",
    "hourly",
    "call",
    "df",
    "data",
    "frame",
    "quickly",
    "run",
    "head",
    "command",
    "see",
    "first",
    "rows",
    "see",
    "going",
    "back",
    "2002",
    "hourly",
    "energy",
    "consumption",
    "value",
    "run",
    "tail",
    "command",
    "see",
    "goes",
    "way",
    "2018",
    "pandas",
    "pretty",
    "common",
    "set",
    "index",
    "date",
    "time",
    "column",
    "since",
    "consistent",
    "time",
    "series",
    "data",
    "set",
    "let",
    "go",
    "ahead",
    "save",
    "good",
    "idea",
    "actually",
    "visualize",
    "let",
    "make",
    "plot",
    "style",
    "dots",
    "instead",
    "line",
    "let",
    "give",
    "figure",
    "size",
    "let",
    "also",
    "pull",
    "color",
    "palette",
    "seaborne",
    "use",
    "plotting",
    "put",
    "imports",
    "make",
    "color",
    "first",
    "color",
    "color",
    "palette",
    "could",
    "put",
    "maybe",
    "give",
    "title",
    "pjm",
    "east",
    "energy",
    "use",
    "megawatts",
    "show",
    "another",
    "thing",
    "noticing",
    "looks",
    "like",
    "data",
    "fram",
    "index",
    "object",
    "type",
    "might",
    "want",
    "cast",
    "date",
    "time",
    "running",
    "pandas",
    "date",
    "time",
    "index",
    "index",
    "type",
    "actually",
    "date",
    "time",
    "64",
    "type",
    "uh",
    "much",
    "better",
    "case",
    "instead",
    "string",
    "load",
    "data",
    "plot",
    "looks",
    "little",
    "bit",
    "easier",
    "read",
    "formatted",
    "date",
    "time",
    "instead",
    "string",
    "value",
    "going",
    "go",
    "ahead",
    "split",
    "lines",
    "make",
    "little",
    "easier",
    "read",
    "going",
    "go",
    "train",
    "test",
    "split",
    "really",
    "building",
    "model",
    "going",
    "productionize",
    "ways",
    "full",
    "cross",
    "validation",
    "time",
    "series",
    "data",
    "set",
    "going",
    "go",
    "detail",
    "video",
    "another",
    "video",
    "cross",
    "validation",
    "check",
    "learning",
    "sake",
    "going",
    "take",
    "data",
    "going",
    "split",
    "date",
    "january",
    "2015",
    "everything",
    "prior",
    "january",
    "2015",
    "training",
    "data",
    "keep",
    "test",
    "data",
    "following",
    "dates",
    "make",
    "uh",
    "pretty",
    "easily",
    "taking",
    "index",
    "finding",
    "less",
    "january",
    "1st",
    "2015",
    "locating",
    "rows",
    "data",
    "set",
    "calling",
    "train",
    "similarly",
    "call",
    "test",
    "greater",
    "equal",
    "dates",
    "visualize",
    "going",
    "actually",
    "plot",
    "plot",
    "making",
    "matplotlib",
    "subplot",
    "gon",
    "na",
    "plot",
    "train",
    "gon",
    "na",
    "plot",
    "test",
    "add",
    "labels",
    "first",
    "one",
    "training",
    "set",
    "second",
    "one",
    "test",
    "set",
    "colors",
    "going",
    "different",
    "see",
    "split",
    "january",
    "actually",
    "let",
    "make",
    "line",
    "make",
    "line",
    "date",
    "color",
    "black",
    "style",
    "line",
    "style",
    "dashed",
    "lines",
    "going",
    "add",
    "legend",
    "name",
    "actually",
    "looks",
    "correct",
    "let",
    "add",
    "title",
    "call",
    "train",
    "test",
    "split",
    "beautiful",
    "another",
    "thing",
    "might",
    "want",
    "look",
    "exploring",
    "data",
    "get",
    "idea",
    "one",
    "single",
    "week",
    "data",
    "looks",
    "like",
    "let",
    "take",
    "january",
    "1st",
    "2010",
    "january",
    "8th",
    "2010",
    "one",
    "week",
    "data",
    "let",
    "go",
    "ahead",
    "plot",
    "notice",
    "things",
    "looks",
    "like",
    "within",
    "day",
    "two",
    "different",
    "peaks",
    "pretty",
    "common",
    "energy",
    "consumption",
    "also",
    "valleys",
    "nights",
    "also",
    "looks",
    "like",
    "weekend",
    "effect",
    "one",
    "days",
    "actually",
    "january",
    "1st",
    "would",
    "even",
    "holiday",
    "affected",
    "day",
    "either",
    "weekday",
    "weekend",
    "brings",
    "us",
    "next",
    "step",
    "feature",
    "creation",
    "going",
    "create",
    "features",
    "data",
    "using",
    "time",
    "series",
    "index",
    "luckily",
    "pandas",
    "makes",
    "easy",
    "us",
    "take",
    "index",
    "see",
    "list",
    "dates",
    "actually",
    "use",
    "dot",
    "hour",
    "get",
    "number",
    "value",
    "dates",
    "hour",
    "component",
    "going",
    "go",
    "ahead",
    "add",
    "new",
    "column",
    "data",
    "set",
    "called",
    "hour",
    "going",
    "thing",
    "day",
    "week",
    "df",
    "index",
    "dot",
    "day",
    "week",
    "values",
    "start",
    "think",
    "monday",
    "always",
    "look",
    "documentation",
    "see",
    "day",
    "week",
    "monday",
    "zero",
    "sunday",
    "six",
    "pull",
    "quarter",
    "splitting",
    "year",
    "four",
    "different",
    "groups",
    "course",
    "month",
    "year",
    "even",
    "day",
    "year",
    "let",
    "go",
    "ahead",
    "add",
    "features",
    "clean",
    "going",
    "make",
    "function",
    "called",
    "create",
    "features",
    "take",
    "data",
    "frame",
    "return",
    "data",
    "frame",
    "features",
    "added",
    "let",
    "also",
    "give",
    "quick",
    "doc",
    "string",
    "says",
    "create",
    "time",
    "series",
    "features",
    "based",
    "time",
    "series",
    "index",
    "run",
    "function",
    "data",
    "frame",
    "let",
    "go",
    "ahead",
    "visualize",
    "feature",
    "target",
    "relationship",
    "one",
    "ways",
    "visualize",
    "feature",
    "versus",
    "target",
    "using",
    "seaborne",
    "box",
    "plots",
    "box",
    "plots",
    "nice",
    "get",
    "give",
    "idea",
    "distribution",
    "data",
    "set",
    "going",
    "give",
    "data",
    "data",
    "frame",
    "x",
    "variable",
    "going",
    "hour",
    "variable",
    "going",
    "pjm",
    "east",
    "megawatt",
    "let",
    "give",
    "bigger",
    "fig",
    "size",
    "go",
    "give",
    "title",
    "megawatts",
    "hour",
    "see",
    "early",
    "morning",
    "seems",
    "dip",
    "energy",
    "use",
    "tends",
    "get",
    "higher",
    "later",
    "evening",
    "thing",
    "month",
    "let",
    "give",
    "different",
    "color",
    "palette",
    "see",
    "megawatt",
    "uses",
    "month",
    "tends",
    "peak",
    "two",
    "times",
    "winter",
    "season",
    "fall",
    "spring",
    "lower",
    "another",
    "peak",
    "middle",
    "summer",
    "everyone",
    "running",
    "ac",
    "units",
    "okay",
    "created",
    "features",
    "know",
    "target",
    "idea",
    "relationship",
    "two",
    "going",
    "create",
    "model",
    "going",
    "create",
    "model",
    "based",
    "training",
    "data",
    "evaluate",
    "test",
    "data",
    "set",
    "let",
    "actually",
    "import",
    "metric",
    "forgot",
    "earlier",
    "sk",
    "learn",
    "metrics",
    "going",
    "import",
    "mean",
    "mean",
    "squared",
    "error",
    "metric",
    "mean",
    "squared",
    "error",
    "give",
    "us",
    "penalty",
    "predictions",
    "way",
    "versus",
    "little",
    "bit",
    "type",
    "metric",
    "might",
    "want",
    "use",
    "data",
    "set",
    "really",
    "depend",
    "looking",
    "regression",
    "test",
    "going",
    "create",
    "regression",
    "model",
    "using",
    "xgboose",
    "regressor",
    "xgb",
    "regressor",
    "lot",
    "things",
    "tune",
    "xgboost",
    "going",
    "start",
    "number",
    "estimators",
    "basically",
    "many",
    "trees",
    "boosted",
    "tree",
    "algorithm",
    "create",
    "gon",
    "na",
    "set",
    "thousand",
    "gon",
    "na",
    "go",
    "ahead",
    "fit",
    "training",
    "set",
    "need",
    "take",
    "training",
    "test",
    "data",
    "set",
    "run",
    "create",
    "features",
    "function",
    "going",
    "add",
    "df",
    "copy",
    "create",
    "features",
    "make",
    "sure",
    "actually",
    "editing",
    "copy",
    "data",
    "frame",
    "run",
    "get",
    "rid",
    "error",
    "let",
    "also",
    "define",
    "features",
    "columns",
    "created",
    "time",
    "series",
    "features",
    "target",
    "pjm",
    "east",
    "megawatts",
    "going",
    "actually",
    "make",
    "features",
    "data",
    "set",
    "training",
    "data",
    "set",
    "call",
    "x",
    "train",
    "going",
    "features",
    "training",
    "data",
    "set",
    "also",
    "going",
    "make",
    "train",
    "target",
    "going",
    "target",
    "column",
    "data",
    "set",
    "going",
    "thing",
    "test",
    "feed",
    "model",
    "give",
    "fit",
    "method",
    "takes",
    "x",
    "train",
    "train",
    "actually",
    "going",
    "give",
    "valuation",
    "set",
    "going",
    "x",
    "train",
    "x",
    "test",
    "test",
    "going",
    "model",
    "training",
    "stop",
    "early",
    "test",
    "set",
    "improve",
    "50",
    "trees",
    "going",
    "make",
    "verbose",
    "actually",
    "saying",
    "need",
    "put",
    "early",
    "stopping",
    "rounds",
    "create",
    "model",
    "train",
    "see",
    "root",
    "mean",
    "squared",
    "error",
    "trends",
    "added",
    "model",
    "training",
    "set",
    "begin",
    "go",
    "also",
    "root",
    "mean",
    "square",
    "error",
    "value",
    "test",
    "set",
    "validation",
    "set",
    "starts",
    "go",
    "validation",
    "set",
    "starts",
    "get",
    "worse",
    "overfitting",
    "would",
    "like",
    "avoid",
    "early",
    "stopping",
    "stop",
    "model",
    "training",
    "sees",
    "occur",
    "since",
    "given",
    "evaluation",
    "set",
    "also",
    "another",
    "thing",
    "lower",
    "learning",
    "rate",
    "make",
    "sure",
    "fit",
    "quickly",
    "let",
    "try",
    "actually",
    "provided",
    "verbose",
    "tell",
    "give",
    "number",
    "instead",
    "true",
    "tell",
    "us",
    "print",
    "training",
    "validation",
    "score",
    "every",
    "100",
    "trees",
    "built",
    "see",
    "stopped",
    "436",
    "trees",
    "test",
    "validation",
    "set",
    "started",
    "actually",
    "get",
    "worse",
    "many",
    "trees",
    "built",
    "one",
    "nice",
    "things",
    "model",
    "trained",
    "xgboost",
    "could",
    "check",
    "feature",
    "importances",
    "running",
    "feature",
    "importances",
    "regressor",
    "created",
    "give",
    "us",
    "importance",
    "values",
    "based",
    "much",
    "features",
    "used",
    "trees",
    "built",
    "xg",
    "boost",
    "model",
    "values",
    "helpful",
    "let",
    "make",
    "pandas",
    "data",
    "frame",
    "data",
    "features",
    "importances",
    "index",
    "feature",
    "names",
    "let",
    "also",
    "call",
    "columns",
    "importance",
    "call",
    "data",
    "frame",
    "fi",
    "short",
    "sort",
    "values",
    "importance",
    "plot",
    "horizontal",
    "bar",
    "plot",
    "title",
    "feature",
    "importance",
    "put",
    "see",
    "model",
    "really",
    "using",
    "hour",
    "feature",
    "month",
    "feature",
    "day",
    "week",
    "day",
    "year",
    "feature",
    "less",
    "year",
    "bottom",
    "overlap",
    "types",
    "features",
    "removed",
    "month",
    "day",
    "year",
    "would",
    "used",
    "place",
    "keep",
    "mind",
    "highly",
    "correlated",
    "features",
    "feature",
    "importance",
    "functionality",
    "really",
    "tell",
    "exactly",
    "important",
    "feature",
    "individually",
    "collective",
    "complete",
    "model",
    "packages",
    "exploring",
    "future",
    "importances",
    "gives",
    "us",
    "good",
    "idea",
    "model",
    "using",
    "right",
    "gon",
    "na",
    "forecast",
    "test",
    "set",
    "trained",
    "model",
    "simply",
    "taking",
    "regressor",
    "predict",
    "x",
    "test",
    "set",
    "provided",
    "numpy",
    "array",
    "predictions",
    "test",
    "set",
    "let",
    "take",
    "test",
    "data",
    "make",
    "new",
    "column",
    "called",
    "prediction",
    "store",
    "predictions",
    "would",
    "like",
    "see",
    "next",
    "training",
    "data",
    "let",
    "merge",
    "test",
    "set",
    "let",
    "uh",
    "equals",
    "left",
    "let",
    "left",
    "index",
    "true",
    "right",
    "index",
    "true",
    "say",
    "merge",
    "two",
    "data",
    "frames",
    "index",
    "columns",
    "want",
    "copy",
    "features",
    "going",
    "take",
    "prediction",
    "column",
    "merge",
    "main",
    "data",
    "set",
    "first",
    "started",
    "prediction",
    "column",
    "test",
    "set",
    "plot",
    "pjm",
    "east",
    "plot",
    "prediction",
    "plot",
    "rod",
    "data",
    "predictions",
    "let",
    "give",
    "legend",
    "putting",
    "together",
    "see",
    "predictions",
    "plotted",
    "top",
    "training",
    "data",
    "set",
    "similar",
    "let",
    "try",
    "take",
    "look",
    "one",
    "week",
    "predictions",
    "gon",
    "na",
    "2018",
    "test",
    "set",
    "done",
    "plotting",
    "predictions",
    "ground",
    "truth",
    "one",
    "week",
    "see",
    "model",
    "perfect",
    "lot",
    "improvement",
    "made",
    "ideas",
    "include",
    "better",
    "parameter",
    "tuning",
    "tune",
    "model",
    "could",
    "also",
    "add",
    "features",
    "specific",
    "days",
    "year",
    "like",
    "holidays",
    "might",
    "carry",
    "forward",
    "either",
    "increase",
    "decrease",
    "energy",
    "use",
    "would",
    "predict",
    "days",
    "lot",
    "done",
    "make",
    "better",
    "could",
    "see",
    "predictions",
    "test",
    "set",
    "week",
    "actually",
    "follow",
    "trend",
    "would",
    "expect",
    "see",
    "going",
    "dips",
    "night",
    "times",
    "even",
    "run",
    "evaluation",
    "metric",
    "using",
    "test",
    "predictions",
    "well",
    "let",
    "mean",
    "squared",
    "error",
    "takes",
    "first",
    "true",
    "value",
    "prediction",
    "would",
    "test",
    "pjm",
    "east",
    "megawatt",
    "prediction",
    "actually",
    "going",
    "run",
    "square",
    "root",
    "mean",
    "squared",
    "error",
    "get",
    "us",
    "root",
    "mean",
    "squared",
    "error",
    "metric",
    "using",
    "rmsc",
    "evaluating",
    "model",
    "trained",
    "root",
    "mean",
    "squared",
    "error",
    "test",
    "set",
    "three",
    "three",
    "thousand",
    "seven",
    "hundred",
    "fourteen",
    "improve",
    "model",
    "would",
    "want",
    "reduce",
    "score",
    "gon",
    "na",
    "print",
    "gon",
    "na",
    "print",
    "score",
    "let",
    "four",
    "decimal",
    "pl",
    "points",
    "two",
    "decimal",
    "points",
    "looks",
    "pretty",
    "good",
    "another",
    "thing",
    "calculate",
    "error",
    "let",
    "take",
    "test",
    "data",
    "set",
    "target",
    "value",
    "subtract",
    "predictions",
    "prediction",
    "let",
    "take",
    "absolute",
    "value",
    "negative",
    "positive",
    "matter",
    "give",
    "us",
    "general",
    "error",
    "value",
    "predictions",
    "let",
    "look",
    "worst",
    "best",
    "predicted",
    "days",
    "going",
    "test",
    "set",
    "take",
    "index",
    "take",
    "date",
    "date",
    "going",
    "value",
    "make",
    "new",
    "column",
    "group",
    "date",
    "take",
    "error",
    "mean",
    "value",
    "give",
    "us",
    "average",
    "error",
    "day",
    "predicted",
    "sort",
    "values",
    "right",
    "ascending",
    "equals",
    "false",
    "take",
    "head",
    "five",
    "see",
    "worst",
    "predicted",
    "days",
    "seem",
    "middle",
    "august",
    "opposite",
    "way",
    "sending",
    "equals",
    "true",
    "see",
    "best",
    "predictions",
    "made",
    "2016",
    "well",
    "calculating",
    "error",
    "see",
    "dates",
    "actually",
    "predict",
    "worst",
    "try",
    "improve",
    "going",
    "forward",
    "terms",
    "next",
    "steps",
    "would",
    "want",
    "actually",
    "running",
    "would",
    "create",
    "robust",
    "cross",
    "validation",
    "add",
    "features",
    "could",
    "get",
    "external",
    "sources",
    "like",
    "maybe",
    "weather",
    "forecast",
    "holidays",
    "add",
    "features",
    "model",
    "see",
    "improves",
    "things",
    "thanks",
    "much",
    "watching",
    "quick",
    "tutorial",
    "use",
    "machine",
    "learning",
    "time",
    "series",
    "forecasting",
    "like",
    "video",
    "please",
    "consider",
    "liking",
    "subscribing",
    "way",
    "get",
    "alerted",
    "every",
    "time",
    "create",
    "new",
    "video",
    "let",
    "know",
    "comments",
    "feedback",
    "things",
    "like",
    "see",
    "make",
    "videos",
    "future",
    "see",
    "next",
    "time"
  ],
  "keywords": [
    "video",
    "going",
    "time",
    "series",
    "using",
    "machine",
    "learning",
    "data",
    "want",
    "predict",
    "future",
    "called",
    "xgboost",
    "one",
    "use",
    "even",
    "like",
    "better",
    "kaggle",
    "copy",
    "make",
    "really",
    "let",
    "get",
    "little",
    "set",
    "hourly",
    "energy",
    "consumption",
    "actually",
    "different",
    "values",
    "look",
    "right",
    "import",
    "pandas",
    "plot",
    "also",
    "model",
    "might",
    "see",
    "type",
    "gon",
    "na",
    "pretty",
    "looks",
    "go",
    "ahead",
    "read",
    "east",
    "call",
    "frame",
    "run",
    "first",
    "value",
    "way",
    "index",
    "date",
    "column",
    "idea",
    "visualize",
    "instead",
    "line",
    "give",
    "color",
    "put",
    "could",
    "title",
    "pjm",
    "another",
    "thing",
    "running",
    "split",
    "train",
    "test",
    "validation",
    "take",
    "january",
    "training",
    "dates",
    "add",
    "week",
    "things",
    "day",
    "two",
    "days",
    "would",
    "us",
    "next",
    "feature",
    "create",
    "features",
    "hour",
    "new",
    "year",
    "month",
    "target",
    "x",
    "early",
    "metric",
    "mean",
    "squared",
    "error",
    "predictions",
    "regressor",
    "trees",
    "root",
    "true",
    "importances",
    "importance",
    "prediction"
  ]
}