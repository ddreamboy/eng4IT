{
  "text": "Cyril communication is always handy when\nyou need to send digital data using few\nconnections there are a lot of serial\ncommunication protocols but a few are\nmore popular than the other especially\nwhen using basic microcontrollers such\nas the peak or the Arduino today we will\nsee what is a civil communication\nprotocol and we will see three main\nexamples what communication I Square C\nand spi I will tell you the main\ncharacteristics of each one of these\nshow you how they work and why you use\none and not the other and also show you\na small example using the Arduino we\nshould also see the signals on the\noscilloscope in order to get a better\nview and by that understand more so\nlet's see how the word I square C and\nSPI work but before make sure you\nsubscribe and activate a notification\nbell and also thanks to all my patrons\nfor the support so let's get started the\nsponsor of this video is JAL CPCB thanks\nto all users feedback they are improving\ntheir services every day even this is\nyour first time ordering pcbs is very\neasy and all you have to do is to upload\nthe Gerber files to genesee PCB dot-com\nselect the settings that you want and\nyou could get five PCBs of any color for\nonly $2 what's up my friends welcome\nback so what is a serial communication\nprotocol well it's a way of transmitting\ndata in a line one data after the other\nand in this case we are talking about\ndigital data imagine that you want to\nsend the number 198 which in binary\nwhich are just ones and zeros will be 1\n1 0 0 0 1 1 0 you could connect a wire\nfor each bit and send the height digital\npoles for once and the low value for\nzeros and do that at the same time so in\njust one moment you can send all the\nbits at the same time this is called a\nPerl communication the downside of this\nkind of communication is that we have to\nuse 8 connections plus the ground\nreference so a total of 9 cable\nbut this is for 8-bits imagine that you\nwant to send a 16-bit data in that case\nwho will need 17 cables and usually we\nwant fewer connections so instead of\nsending the data each bit at the same\ntime what we will do is to place the\nbits in series and then we send each one\none after the other\nusing just one cable but you could\nalready see the downside of this type of\ncommunication if we send 16 bits in\nparallel we need only one clock post to\nsend all the data if we send the same\ndata using serial communication we'll\nneed 16 clock pulses to save the same\namount of data so this will be 16 times\nslower so that's the main disadvantage\nof using serial communication as\nexamples for Silla communication we have\nthe S bus the PPM the JTAG connection\nword I square C the can SPI\nMIDI usb RS 233 and more and even the\nMorse code could be a serial\ncommunication okay guys so we have\nmentioned that clock pulses before\ndepending on this clock co communication\ncould be synchronous or asynchronous and\nthe main difference is that one uses the\nclock to send the data at a specific\nspeed and time and the asynchronous\ndoesn't have a clock so how do you know\nwhere one bit will end and where the\nnext bit will start if you don't have\nany clock to understand that we start\nwith the most basic a synchronous i/o\ncommunication what or universal a\nsynchronous receiver transmitter this\ntype of communication uses only one\ncable to send the data plus the ground\nreference the transmitter cable will be\nnamed TX and the receiver will be rx the\ntransmitter starts sending bits whenever\nit wants so how does the receiver know\nwhen the incoming data starts where it\nends when we have a bit or the other and\nso on for that what communication will\nneed to play some common configuration\nbetween the transmitter and receiver\nbefore making the connections you need\nto make sure that both the X and the Rx\nwill work with the same settings three\nof these settings are the transmission\nspeed in both per second the data length\nin bits and how is the start and the\nstop bit so let's see what are these\nimagine that you want to send the number\nbefore 198 the representation in digital\nprocess of this will be this one so with\nthis data we already know that we will\nsend 8 bits so now we know the data\nlength the transmitter and receiver must\nhave the same configuration but if we\nanalyze the word signal we won't see\nonly these 8 bits we will see something\nlike this that's because word needs a\nstart bit and an end bit usually the\nword signal is always high and the start\nbit will be represented by a low pause\nso that makes very easy for the receiver\nto detect when the data starts each time\nwe detect a low pause we know that we\nneed to start reading the input data and\nnow here comes the third configuration\nthe speed of transmission without\nknowing the speed the receiver won't be\nable to know when one bit will end and\nthe other one will start and by that it\nwill ring the wrong value for that we\nneed to set the speed in bouts per\nsecond a very common word speed is 9600\ndots per second that means that the\nlength of the bit will be 1 divided by\n9600 and that equals to 104 microseconds\nso now all the receiver has to do after\ndetecting the start bit is to count time\nwe count 104 microseconds and then we\nare at the beginning of the first input\nbit but we don't usually save the value\nhere because the data is unstable so we\nwill go in the middle of the bit so we\ncount 52 microseconds more and now we\nsave the first bit and then we count 104\nmicroseconds more and save the second\nbit and so on once the receiver has Oh 8\nbits\nwe'll wait for the stop bit which is\nrepresented by high posts and then we\ncan send the receive data from the\nbuffer to the rest of the system this\nexact same setup could be made with\ndifferent speeds or different amount of\nbits for the same data usually the start\nand stop bits are always like this so\nthat's how the word communication works\nanother version of the word\ncommunication is the rs-232 that is used\nby all computers the arduino for example\nuses the word communication to upload\nthe codes or send the data to the serial\nmonitor\nthis right here is a wired chip and you\nalso see that it has a DTR pin and\nsometimes you will see a CTS pin these\npins are used to notify that the data\nterminal is ready and that the receiver\nis clear to receive so in this way we\nwon't have flow problems I connect the\nArduino and here have the word signal on\nthe oscilloscope and right now I'm\nsending the number before 198 as you can\nsee we have exactly the representation\nbefore the start beat the data and the\nstop beat and the rest of the time the\nsignal is high usually devices will have\nbody TX and the rx pins so they could\nboot send and receive data with the same\nprotocol okay guys next we need to take\na look at the first synchronous serial\ncommunication and this is the ice-crazy\nor the inter integrated circuit this\nprotocol was developed by Philips\nand in this case we need two connections\nplus the ground reference one wire will\nsend the data and this will have the\nname of SDA and the second wire is the\nclock because this is a synchronous\ncommunication and it will have the name\nof SCL once again we need to specify the\namount of bits that we will send and\nalso to note the cut frequency for both\nthe transmitter and receiver usually I\nsquare C could work with speed up to 400\nkilobits per second and it will send\ndata of 15 or 16 bits in this case at\nthe same time that we send the data we\nalso create a clock post with the same\nfrequency as the bit of the data so the\nreceiver will know exactly when one bit\nwill end and the next one will start so\nthis can go faster since we don't need\nto count the time as in the word\ncommunication also using I square C the\ntransmitter will send all kind of data\nbut only certain receiver will be able\nto save the values we do that with the\nuse of the slave address each receiver\nwill have a different slave address so\nthe transmitter will first send the\naddress which for example could be 68\nthen it will send the data so only the\nreceiver with the 68 slave address will\nstore the data into its buffer so the\nword communication is a one-to-one\ncommunication but the I square C could\nbe used with multiple receivers for\nexample this ampule 6050 module uses\nhead classic communication\nI connect my oscilloscope to the data\nand Clark pins and now we can see the\nsignal on the oscilloscope as you can\nsee we have a square signal as a clock\nand then we have the same data each time\nwe send a new value we also enable the\nclock signal and also send the slave\naddress before sending the new data okay\nguys so that was ice crazy finally let's\ntake a look at another synchronous\nserial communication SPI\nor Cir peripheral interface in this case\nwe still have the clock connection but\nwe also need three more wires\nmossie which is the master output slave\ninput Mesa which is master input slave\noutput and the chip select wire plus the\nground reference so using a total of\nfive connections we could send the data\nonce again we have a master transmitter\nand the slate that could receive the\ndata the most wire will send the data to\nthe slaves but the master device could\nalso receive data from the slaves using\nthe miso wires in this case we don't use\na slave address as for the I square C\ninstead of that we have the chip select\nto start a new transmission\nthe Master will put a chip select pin to\nlow and then we send the clock and the\ndata signals so if you want more slave\ndevices connected you will need a chip\nselect connection for each one the\nadvantages of this type of communication\nis that it's full duplex in a full\nduplex mode both devices can transmit\nthe signal at the same time so we could\nboth send and receive we can do that\nwith I square C because that is a\nsimplest communication also at the same\ntime the speed of transmission for the\nSPI is way higher than the I square C or\nwhat communication and at the same time\nthe power consumption is also lower we\ncan set the amount of bits that we want\nto send in the code but unfortunately\nthis communication can send the data for\nlong ranges as we can do with the rs-232\nor the can bus also these communications\nhave no acknowledged pins so the master\ncould send the data even if you don't\nhave a slave connected and the data\nwon't be receive by any device in case\nof the word communication we could have\nthe DTR or CTR pins to do that now this\nother f24 radio module uses SPI\ncommunication I connect it to the\nArduino and I hook up the oscilloscope\nwe can see four signals for clock MOSI\nmiso and chip select as you can see when\nwe want to\nthe data chief selectees low then we\nhave the clock signal and the master or\nthe slave we'll send the data so that\nwas SPI now you should know more or less\nhow art I Square C&S pay communications\nwork leave a comment below if you want\nto see other protocols such as the JTAG\nthe kent communication USB and so on\ni've made this video with these three\nbecause these are the most common used\nwith everyday microcontrollers as you\ncould see the arduino has all these\ntypes of communication on the same board\nso i hope that you learn something new\nif so give a like to this video and if\nyou are not subscribed consider\nsubscribing for more videos also\nremember to activate the notification\nbell so thanks again and see you later\nguys\n[Music]\n",
  "words": [
    "cyril",
    "communication",
    "always",
    "handy",
    "need",
    "send",
    "digital",
    "data",
    "using",
    "connections",
    "lot",
    "serial",
    "communication",
    "protocols",
    "popular",
    "especially",
    "using",
    "basic",
    "microcontrollers",
    "peak",
    "arduino",
    "today",
    "see",
    "civil",
    "communication",
    "protocol",
    "see",
    "three",
    "main",
    "examples",
    "communication",
    "square",
    "c",
    "spi",
    "tell",
    "main",
    "characteristics",
    "one",
    "show",
    "work",
    "use",
    "one",
    "also",
    "show",
    "small",
    "example",
    "using",
    "arduino",
    "also",
    "see",
    "signals",
    "oscilloscope",
    "order",
    "get",
    "better",
    "view",
    "understand",
    "let",
    "see",
    "word",
    "square",
    "c",
    "spi",
    "work",
    "make",
    "sure",
    "subscribe",
    "activate",
    "notification",
    "bell",
    "also",
    "thanks",
    "patrons",
    "support",
    "let",
    "get",
    "started",
    "sponsor",
    "video",
    "jal",
    "cpcb",
    "thanks",
    "users",
    "feedback",
    "improving",
    "services",
    "every",
    "day",
    "even",
    "first",
    "time",
    "ordering",
    "pcbs",
    "easy",
    "upload",
    "gerber",
    "files",
    "genesee",
    "pcb",
    "select",
    "settings",
    "want",
    "could",
    "get",
    "five",
    "pcbs",
    "color",
    "2",
    "friends",
    "welcome",
    "back",
    "serial",
    "communication",
    "protocol",
    "well",
    "way",
    "transmitting",
    "data",
    "line",
    "one",
    "data",
    "case",
    "talking",
    "digital",
    "data",
    "imagine",
    "want",
    "send",
    "number",
    "198",
    "binary",
    "ones",
    "zeros",
    "1",
    "1",
    "0",
    "0",
    "0",
    "1",
    "1",
    "0",
    "could",
    "connect",
    "wire",
    "bit",
    "send",
    "height",
    "digital",
    "poles",
    "low",
    "value",
    "zeros",
    "time",
    "one",
    "moment",
    "send",
    "bits",
    "time",
    "called",
    "perl",
    "communication",
    "downside",
    "kind",
    "communication",
    "use",
    "8",
    "connections",
    "plus",
    "ground",
    "reference",
    "total",
    "9",
    "cable",
    "imagine",
    "want",
    "send",
    "data",
    "case",
    "need",
    "17",
    "cables",
    "usually",
    "want",
    "fewer",
    "connections",
    "instead",
    "sending",
    "data",
    "bit",
    "time",
    "place",
    "bits",
    "series",
    "send",
    "one",
    "one",
    "using",
    "one",
    "cable",
    "could",
    "already",
    "see",
    "downside",
    "type",
    "communication",
    "send",
    "16",
    "bits",
    "parallel",
    "need",
    "one",
    "clock",
    "post",
    "send",
    "data",
    "send",
    "data",
    "using",
    "serial",
    "communication",
    "need",
    "16",
    "clock",
    "pulses",
    "save",
    "amount",
    "data",
    "16",
    "times",
    "slower",
    "main",
    "disadvantage",
    "using",
    "serial",
    "communication",
    "examples",
    "silla",
    "communication",
    "bus",
    "ppm",
    "jtag",
    "connection",
    "word",
    "square",
    "c",
    "spi",
    "midi",
    "usb",
    "rs",
    "233",
    "even",
    "morse",
    "code",
    "could",
    "serial",
    "communication",
    "okay",
    "guys",
    "mentioned",
    "clock",
    "pulses",
    "depending",
    "clock",
    "co",
    "communication",
    "could",
    "synchronous",
    "asynchronous",
    "main",
    "difference",
    "one",
    "uses",
    "clock",
    "send",
    "data",
    "specific",
    "speed",
    "time",
    "asynchronous",
    "clock",
    "know",
    "one",
    "bit",
    "end",
    "next",
    "bit",
    "start",
    "clock",
    "understand",
    "start",
    "basic",
    "synchronous",
    "communication",
    "universal",
    "synchronous",
    "receiver",
    "transmitter",
    "type",
    "communication",
    "uses",
    "one",
    "cable",
    "send",
    "data",
    "plus",
    "ground",
    "reference",
    "transmitter",
    "cable",
    "named",
    "tx",
    "receiver",
    "rx",
    "transmitter",
    "starts",
    "sending",
    "bits",
    "whenever",
    "wants",
    "receiver",
    "know",
    "incoming",
    "data",
    "starts",
    "ends",
    "bit",
    "communication",
    "need",
    "play",
    "common",
    "configuration",
    "transmitter",
    "receiver",
    "making",
    "connections",
    "need",
    "make",
    "sure",
    "x",
    "rx",
    "work",
    "settings",
    "three",
    "settings",
    "transmission",
    "speed",
    "per",
    "second",
    "data",
    "length",
    "bits",
    "start",
    "stop",
    "bit",
    "let",
    "see",
    "imagine",
    "want",
    "send",
    "number",
    "198",
    "representation",
    "digital",
    "process",
    "one",
    "data",
    "already",
    "know",
    "send",
    "8",
    "bits",
    "know",
    "data",
    "length",
    "transmitter",
    "receiver",
    "must",
    "configuration",
    "analyze",
    "word",
    "signal",
    "wo",
    "see",
    "8",
    "bits",
    "see",
    "something",
    "like",
    "word",
    "needs",
    "start",
    "bit",
    "end",
    "bit",
    "usually",
    "word",
    "signal",
    "always",
    "high",
    "start",
    "bit",
    "represented",
    "low",
    "pause",
    "makes",
    "easy",
    "receiver",
    "detect",
    "data",
    "starts",
    "time",
    "detect",
    "low",
    "pause",
    "know",
    "need",
    "start",
    "reading",
    "input",
    "data",
    "comes",
    "third",
    "configuration",
    "speed",
    "transmission",
    "without",
    "knowing",
    "speed",
    "receiver",
    "wo",
    "able",
    "know",
    "one",
    "bit",
    "end",
    "one",
    "start",
    "ring",
    "wrong",
    "value",
    "need",
    "set",
    "speed",
    "bouts",
    "per",
    "second",
    "common",
    "word",
    "speed",
    "9600",
    "dots",
    "per",
    "second",
    "means",
    "length",
    "bit",
    "1",
    "divided",
    "9600",
    "equals",
    "104",
    "microseconds",
    "receiver",
    "detecting",
    "start",
    "bit",
    "count",
    "time",
    "count",
    "104",
    "microseconds",
    "beginning",
    "first",
    "input",
    "bit",
    "usually",
    "save",
    "value",
    "data",
    "unstable",
    "go",
    "middle",
    "bit",
    "count",
    "52",
    "microseconds",
    "save",
    "first",
    "bit",
    "count",
    "104",
    "microseconds",
    "save",
    "second",
    "bit",
    "receiver",
    "oh",
    "8",
    "bits",
    "wait",
    "stop",
    "bit",
    "represented",
    "high",
    "posts",
    "send",
    "receive",
    "data",
    "buffer",
    "rest",
    "system",
    "exact",
    "setup",
    "could",
    "made",
    "different",
    "speeds",
    "different",
    "amount",
    "bits",
    "data",
    "usually",
    "start",
    "stop",
    "bits",
    "always",
    "like",
    "word",
    "communication",
    "works",
    "another",
    "version",
    "word",
    "communication",
    "used",
    "computers",
    "arduino",
    "example",
    "uses",
    "word",
    "communication",
    "upload",
    "codes",
    "send",
    "data",
    "serial",
    "monitor",
    "right",
    "wired",
    "chip",
    "also",
    "see",
    "dtr",
    "pin",
    "sometimes",
    "see",
    "cts",
    "pin",
    "pins",
    "used",
    "notify",
    "data",
    "terminal",
    "ready",
    "receiver",
    "clear",
    "receive",
    "way",
    "wo",
    "flow",
    "problems",
    "connect",
    "arduino",
    "word",
    "signal",
    "oscilloscope",
    "right",
    "sending",
    "number",
    "198",
    "see",
    "exactly",
    "representation",
    "start",
    "beat",
    "data",
    "stop",
    "beat",
    "rest",
    "time",
    "signal",
    "high",
    "usually",
    "devices",
    "body",
    "tx",
    "rx",
    "pins",
    "could",
    "boot",
    "send",
    "receive",
    "data",
    "protocol",
    "okay",
    "guys",
    "next",
    "need",
    "take",
    "look",
    "first",
    "synchronous",
    "serial",
    "communication",
    "inter",
    "integrated",
    "circuit",
    "protocol",
    "developed",
    "philips",
    "case",
    "need",
    "two",
    "connections",
    "plus",
    "ground",
    "reference",
    "one",
    "wire",
    "send",
    "data",
    "name",
    "sda",
    "second",
    "wire",
    "clock",
    "synchronous",
    "communication",
    "name",
    "scl",
    "need",
    "specify",
    "amount",
    "bits",
    "send",
    "also",
    "note",
    "cut",
    "frequency",
    "transmitter",
    "receiver",
    "usually",
    "square",
    "c",
    "could",
    "work",
    "speed",
    "400",
    "kilobits",
    "per",
    "second",
    "send",
    "data",
    "15",
    "16",
    "bits",
    "case",
    "time",
    "send",
    "data",
    "also",
    "create",
    "clock",
    "post",
    "frequency",
    "bit",
    "data",
    "receiver",
    "know",
    "exactly",
    "one",
    "bit",
    "end",
    "next",
    "one",
    "start",
    "go",
    "faster",
    "since",
    "need",
    "count",
    "time",
    "word",
    "communication",
    "also",
    "using",
    "square",
    "c",
    "transmitter",
    "send",
    "kind",
    "data",
    "certain",
    "receiver",
    "able",
    "save",
    "values",
    "use",
    "slave",
    "address",
    "receiver",
    "different",
    "slave",
    "address",
    "transmitter",
    "first",
    "send",
    "address",
    "example",
    "could",
    "68",
    "send",
    "data",
    "receiver",
    "68",
    "slave",
    "address",
    "store",
    "data",
    "buffer",
    "word",
    "communication",
    "communication",
    "square",
    "c",
    "could",
    "used",
    "multiple",
    "receivers",
    "example",
    "ampule",
    "6050",
    "module",
    "uses",
    "head",
    "classic",
    "communication",
    "connect",
    "oscilloscope",
    "data",
    "clark",
    "pins",
    "see",
    "signal",
    "oscilloscope",
    "see",
    "square",
    "signal",
    "clock",
    "data",
    "time",
    "send",
    "new",
    "value",
    "also",
    "enable",
    "clock",
    "signal",
    "also",
    "send",
    "slave",
    "address",
    "sending",
    "new",
    "data",
    "okay",
    "guys",
    "ice",
    "crazy",
    "finally",
    "let",
    "take",
    "look",
    "another",
    "synchronous",
    "serial",
    "communication",
    "spi",
    "cir",
    "peripheral",
    "interface",
    "case",
    "still",
    "clock",
    "connection",
    "also",
    "need",
    "three",
    "wires",
    "mossie",
    "master",
    "output",
    "slave",
    "input",
    "mesa",
    "master",
    "input",
    "slave",
    "output",
    "chip",
    "select",
    "wire",
    "plus",
    "ground",
    "reference",
    "using",
    "total",
    "five",
    "connections",
    "could",
    "send",
    "data",
    "master",
    "transmitter",
    "slate",
    "could",
    "receive",
    "data",
    "wire",
    "send",
    "data",
    "slaves",
    "master",
    "device",
    "could",
    "also",
    "receive",
    "data",
    "slaves",
    "using",
    "miso",
    "wires",
    "case",
    "use",
    "slave",
    "address",
    "square",
    "c",
    "instead",
    "chip",
    "select",
    "start",
    "new",
    "transmission",
    "master",
    "put",
    "chip",
    "select",
    "pin",
    "low",
    "send",
    "clock",
    "data",
    "signals",
    "want",
    "slave",
    "devices",
    "connected",
    "need",
    "chip",
    "select",
    "connection",
    "one",
    "advantages",
    "type",
    "communication",
    "full",
    "duplex",
    "full",
    "duplex",
    "mode",
    "devices",
    "transmit",
    "signal",
    "time",
    "could",
    "send",
    "receive",
    "square",
    "c",
    "simplest",
    "communication",
    "also",
    "time",
    "speed",
    "transmission",
    "spi",
    "way",
    "higher",
    "square",
    "c",
    "communication",
    "time",
    "power",
    "consumption",
    "also",
    "lower",
    "set",
    "amount",
    "bits",
    "want",
    "send",
    "code",
    "unfortunately",
    "communication",
    "send",
    "data",
    "long",
    "ranges",
    "bus",
    "also",
    "communications",
    "acknowledged",
    "pins",
    "master",
    "could",
    "send",
    "data",
    "even",
    "slave",
    "connected",
    "data",
    "wo",
    "receive",
    "device",
    "case",
    "word",
    "communication",
    "could",
    "dtr",
    "ctr",
    "pins",
    "f24",
    "radio",
    "module",
    "uses",
    "spi",
    "communication",
    "connect",
    "arduino",
    "hook",
    "oscilloscope",
    "see",
    "four",
    "signals",
    "clock",
    "mosi",
    "miso",
    "chip",
    "select",
    "see",
    "want",
    "data",
    "chief",
    "selectees",
    "low",
    "clock",
    "signal",
    "master",
    "slave",
    "send",
    "data",
    "spi",
    "know",
    "less",
    "art",
    "square",
    "c",
    "pay",
    "communications",
    "work",
    "leave",
    "comment",
    "want",
    "see",
    "protocols",
    "jtag",
    "kent",
    "communication",
    "usb",
    "made",
    "video",
    "three",
    "common",
    "used",
    "everyday",
    "microcontrollers",
    "could",
    "see",
    "arduino",
    "types",
    "communication",
    "board",
    "hope",
    "learn",
    "something",
    "new",
    "give",
    "like",
    "video",
    "subscribed",
    "consider",
    "subscribing",
    "videos",
    "also",
    "remember",
    "activate",
    "notification",
    "bell",
    "thanks",
    "see",
    "later",
    "guys",
    "music"
  ],
  "keywords": [
    "communication",
    "always",
    "need",
    "send",
    "digital",
    "data",
    "using",
    "connections",
    "serial",
    "arduino",
    "see",
    "protocol",
    "three",
    "main",
    "square",
    "c",
    "spi",
    "one",
    "work",
    "use",
    "also",
    "example",
    "signals",
    "oscilloscope",
    "get",
    "let",
    "word",
    "thanks",
    "video",
    "even",
    "first",
    "time",
    "select",
    "settings",
    "want",
    "could",
    "way",
    "case",
    "imagine",
    "number",
    "198",
    "1",
    "0",
    "connect",
    "wire",
    "bit",
    "low",
    "value",
    "bits",
    "8",
    "plus",
    "ground",
    "reference",
    "cable",
    "usually",
    "sending",
    "type",
    "16",
    "clock",
    "save",
    "amount",
    "connection",
    "okay",
    "guys",
    "synchronous",
    "uses",
    "speed",
    "know",
    "end",
    "next",
    "start",
    "receiver",
    "transmitter",
    "rx",
    "starts",
    "common",
    "configuration",
    "transmission",
    "per",
    "second",
    "length",
    "stop",
    "signal",
    "wo",
    "like",
    "high",
    "input",
    "104",
    "microseconds",
    "count",
    "receive",
    "different",
    "used",
    "chip",
    "pin",
    "pins",
    "devices",
    "slave",
    "address",
    "new",
    "master"
  ]
}