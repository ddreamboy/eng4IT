{
  "text": "which javascript framework is the best\nif we go off of downloads react wins but\nbased on github stars view is the best\nbut svelt is the most loved framework\naccording to the 2021 stack overflow\nsurvey and some people out there might\neven tell you that you don't need a\njavascript framework and whether you're\na new developer or have 20 years of\nexperience it can be very difficult to\nchoose which framework you want to marry\nwhich is the single most important\ndecision you'll make related to your\nfrontend code there's no absolute best\nframework and the only way to find out\nwhich one will make you happy is to\nbuild something with all of them in\ntoday's video we'll build the same app\nwith 10 different javascript frameworks\nincluding angular react vue svelt lit\nalpine solid stencil mithril and vanilla\nin the process you'll learn the\ntrade-offs between each of these\nframeworks so you can make the best\nchoice for your next project this video\nwas a ton of work so make sure to\nsubscribe and hit the like button then\nleave a comment below with your favorite\nframework and i'll choose a few random\nones to win a free t-shirt next week the\nfirst thing we'll do is build a basic\nto-do app with vanilla javascript about\nonce a year a hot take will go viral\nsaying that you don't need a javascript\nframework at all any expert web\ndeveloper needs to have a solid\nunderstanding of vanilla js but even if\nyou're a javascript god attempting to\nbuild a non-trivial app with it is a\nrecipe for disaster what you'll end up\ndoing is building your own shitty\njavascript framework and the last thing\nthe world needs is another javascript\nframework to build an app from scratch\nall we have to do is create an html file\nthen add a script tag to the body what\nwe want to build here is a to do app\nwhere the user can write some text into\na form input then submit the form and\nhave that item appear in the list in\naddition we'll save those items to local\nstorage as kind of a mock database so\nthat when the user refreshes the page\nthose items are still present pretty\nsimple concept but there's actually a\nlot going on there like state management\ndata binding events and the application\nlife cycle to think about the one thing\nthat all frameworks do and vanilla js\ndoesn't is provide a way to bind or\nconnect your html to the javascript\nautomatically in vanilla we need to\nimperatively grab the html elements that\nwe're working with from the dom and i\ncan tell you right now this is a very\nannoying way to build a complex\napplication as you can see here in the\ndom we have an unordered list for the to\ndo's and then below that we have a form\nwith an input and a button to submit the\nform now going into the javascript the\nfirst thing i'll do is write some code\nusing document query selector to grab\neach one of these items from the dom now\nthat we have access to the html elements\ni'm setting up an empty array here to\nrepresent the actual to-do items in the\nlist in addition to keeping track of the\ndata we also need to update the actual\nui when that data changes for that i'm\ndefining a function called add to do\nthat takes a new to-do item as its\nargument now this is where things start\nto get ugly with vanilla in order to\nupdate the ui we need to manually create\na new list item element by calling\ndocument create element then we need to\nimperatively update its inner html to\nthe to-do text and finally append it to\nthe unordered list in the dom and as an\nadded touch i'll save the data to local\nstorage so we can access it when the\npage is refreshed the problem with this\ncode is that the application data or\nstate is completely decoupled from the\nui itself and that makes it very hard to\nkeep the data in sync with the ui now\nthat we have this function in place we\nneed a way to call it when the user\nsubmits the form for that we need to\nregister an event listener on the\nforum's on submit event when that event\nis fired we'll first call prevent\ndefault to prevent it from refreshing\nthe page then call the add to do\nfunction with the current value in the\ntext input at this point we should have\na working to-do list but one important\nthing to notice here is that if you look\nat the html markup you really have no\nidea what it's doing there's no way to\ntell this form has an event listener\nattached to it unless you go search\nthrough the javascript code itself which\nis extremely difficult in a complex\napplication now one final thing to think\nabout is the application lifecycle when\nthe app is first initialized what we\nwant to do here is grab the existing\nto-do items from the local storage and\nrender them in the to-do list if they\nexist if there are existing to-do's in\nlocal storage we can loop over them with\nfour each and call the add to do\nfunction for each one of them\ncongratulations you just built a to-do\napp with vanilla js but this code is not\ngoing to scale complexity very well and\nthere's likely many other features we'd\nwant to add like routing or animation\nthat we'd have to implement from scratch\nand that's why the vast majority of\ndevelopers choose to build their apps\nwith a framework first we have react\nwhich most people would consider the\nmost popular framework some people call\nit a library but it doesn't really\nmatter because it's a tool that becomes\nthe main driver of your project\nrequiring you the developer to do\neverything the react way i don't mean\nthat in a bad way because react was\ncreated by very smart people at facebook\nto build complex uis like the facebook\nui react is minimal by design and relies\non the open source community to handle\nother concerns like routing animation\nstate management and so on it's not\nopinionated about how you organize your\ncode which requires you to make a lot of\ndecisions about which libraries to bring\nin and how to make things maintainable\nand scalable react is by far the most\npopular framework with over 10 million\nweekly downloads on npm and over 170 000\ngithub stars its popularity alone makes\nit a great skill to learn because there\nare many employers out there looking to\nhire react developers and you'll find\ntons of other react developers in the\nindustry to collaborate with react has\nan official cli called create react app\nwe can create a new react project by\nrunning the create react app command\nfrom the terminal now it's worth noting\nthat many people opt for other tools\nwhen building a react project like next\njs or gatsby that would replace the\ndefault cli when you generate a new\nproject with create react app you'll\nnotice it has a package json and the\nroot of the project inside of which\nthere's a start script to serve the app\nlocally under the hood it uses a tool\ncalled webpack to bundle all your code\ntogether into a single javascript file\nin react and most other frameworks your\napplication is organized as a tree of\ncomponents these components encapsulate\nparts of the ui and have ways to\ncommunicate with each other this allows\nyou to organize your app in a\ndeclarative way where for a given set of\napplication data the end result of the\nui will always be the same now in the\napp.js file you'll first notice a\nfunction called app that function\nrepresents a component in the ui and\npersonally i love the simplicity of that\nnow the return value of the function is\njsx which itself looks like html but has\nbeen extended with an additional syntax\nallowing you to insert javascript into\nyour html for the to-do list we can\ndefine reactive state on the component\nwith the use state hook the hook is just\na function that will return us with two\nvalues the first item is the value of\nthe to-do list as reactive state which\nmeans any time it's updated the ui will\nre-render to show the latest state and\nthen the second item is a function to\nupdate the state now if we go back down\nto the jsx we can loop over the to do\nitems in the array and render them out\ndirectly in the ui as a list item then\nbelow that we have an html form but the\ncool thing about react is that we can\nbind an event directly to this form\nusing on submit then on the right side\nof it we can reference a function that\nwill be called whenever the submit event\nfires and that function will update the\nstate and store the result and local\nstorage you'll also notice that i'm\nusing the usref hook to grab the current\nvalue of the form input one thing to\nnotice here is that the html is a lot\nmore descriptive we know exactly which\nelements our data and events are bound\nto now the final thing we need to do\nhere is run a life cycle hook in react\nthat can be handled with the use effect\nhook which will grab the items from\nlocal storage when the component is\nfirst initialized this hook can be\nreally confusing though if you're just\ngetting started to only run it when the\ncomponent is first initialized i need to\nadd an array as the second argument and\nin my opinion this code is just really\nhard to look at unless you really know\nwhat's going on with the use effect hook\nin any case react is the gold standard\nfor declarative ui frameworks but\nthere's more than one way to get the job\ndone next we have react's arch nemesis\nangular which is developed and\nmaintained by google and unlike react is\nvery opinionated about how to organize\nand structure a project it has 75 000\ngithub stars and as the second most\ndownloaded framework on npm it comes\nwith officially supported libraries for\nrouting animation and server side\nrendering and because it follows a set\nof predictable conventions all angular\nprojects are structured relatively the\nsame and have awesome tooling to go\nalong with them in fact you are actually\nrequired to use typescript google uses\nit internally to build hundreds of\ndifferent web apps throughout their\nproduct line it's a great option for big\nteams but may be a little overwhelming\nif you're a beginner to start an angular\nproject run ng-new from the command line\nthat'll give us a fairly large project\nto get started that's already configured\nwith typescript we can build a component\nin the appcomponent.ts file or we could\nuse the cli to generate a brand new\ncomponent automatically in fact angular\nhas the most powerful cli of all the\nframeworks by a pretty wide margin and\nyou'll notice the component itself is\nrepresented as a typescript class that\nhas a component decorator on top of it\nnow it is possible to define an entire\ncomponent in this ts file however most\nangular apps break components down into\nat least three separate files one for\nyour typescript one for the html and\nanother for the css\nto add reactive state to the component\nsimply define a property on the class\nfrom there we can define a method on the\nclass to update the state in addition we\ncan manage the lifecycle of the\ncomponent in the class by implementing\nspecial methods like ng on init this\nmethod will be called whenever that\ncomponent is first initialized now if we\ngo into the template you'll notice this\nlooks like html but it's been extended\nor empowered with a special templating\nlanguage that makes it possible to loop\nover an array of items using the ng4\ndirectory unlike react which brings html\ninto your javascript angular does the\nopposite and brings javascript into your\nhtml then in the form itself we can bind\nto the submit event and run the add to\ndo method whenever that event is fired\nthen to get the actual value from the\nform input we can use two-way data\nbinding using the ng model directive\nthis binds the form value to the to do\ntext property on the class however to\nuse this we need to go into the app\nmodule and import the angular forms\nmodule there because it's required for\nthat directive to work and for that\nreason among many others it tends to\nhave a much higher learning curve than\nother frameworks but everything is here\nfor a reason and angular is very\nopinionated about how to structure a\nproject that will scale well and that\ntends to make it very popular with\nenterprise applications and that brings\nme to vue.js which is independently\ndeveloped and maintained by evan yu and\nfeels very similar to angular but in a\npackage that's more approachable for\nindependent developers it has official\npackages for things like routing and\nstate management and a huge ecosystem of\nthird-party packages it has the most\ngithub stars at a hundred and eighty\nseven thousand and is basically tied\nwith angular for second place on npm\ndownloads vue also has a very powerful\ncli for example we can hit the view ui\ncommand which will bring up an actual\nbrowser window and walk us through all\nthe different dependencies and features\nthat we can add when generating the\ninitial app this creates a really nice\ndeveloper experience but it doesn't\ngenerate components and is just not\nquite as powerful as the angular cli\nyou'll notice it generates a far more\nsimplified project structure but in the\nmain.js file we can add additional\nplugins for other functionality like\nrouting or state management as it\nbecomes needed components are defined in\nfiles that end in dot view the code is\norganized into three parts a template a\nscript and the styles the component\nitself is represented as a plain\njavascript object and we can define\nreactive data or state on it using that\ndata property now to change the state we\nhave the methods property where we can\ndefine our add to do method that can be\ncalled when certain events are triggered\nthen to tap into the component life\ncycle we have methods like mounted that\nwill be called when the component is\nfirst initialized very similar concepts\nto react in angular the main difference\nbeing that we're working within the\ncontext of a plain javascript object\ninstead of a function or class in the\ntemplate we have a setup that's very\nsimilar to angular that uses directives\nto handle things like v4 to loop over\nthe to do items or v on submit to handle\nthe form submission one thing that's\nnice here is that you can automatically\nprevent the default behavior by just\nadding dot prevent to this directive\ninstead of implementing that code in the\nmethod itself you'll find a lot of\nlittle things like that in view that\nmake your life easier and lastly we have\nthe v model directive to bind the to-do\ntext to the form input value view is\nawesome and has a big community but\nanother independent option is spelt it\nwas the most loved framework on the 2021\nstack overflow survey and has about 50\n000 github stars it's not as common as\nthe other three in the wild but is very\nwell loved by the people who do use it\nlike react it's designed as a minimal\nlibrary and relies on the open source\ncommunity for other features like\nrouting one thing that makes it unique\nfrom the other frameworks is that it\ndoesn't ship a runtime like virtual dom\nto the browser instead it works as a\ncompiler to turn your code into plain\njavascript when you generate a new\nproject you'll have a rollup or webpack\nconfig if you choose which is used to\nbundle your code and all the other cli\ntools attempt to abstract that part away\nfrom you when building a smelt project\nyou may need to learn a little bit about\nmodule bundlers whereas the other\nframeworks try to hide that detail from\nyou components are defined in dot spell\nfiles and just like view they have three\nparts the script the template and the\nstyles to create reactive state on the\ncomponent just declare a variable with\nthe let keyword then to modify the state\ndefine a plain javascript function what\ni like about this is that it feels very\nnatural it looks like regular javascript\nwith minimal abstractions going on\ncompared to something like react now to\ndeal with lifecycle hooks we can import\nthe on mount function from svelt and\nregister a callback for when the\ncomponent is first initialized now down\nin the template we have a special syntax\nthat makes it easy to loop over things\nlike each to loop over each to do in the\narray then to handle the form submission\nwe have on submit and we can also add a\nbar with preventdefault to avoid\nimplementing that detail in the function\nand lastly we'll implement two-way data\nbinding using the bind directive with\nvalue followed by the to do text\nvariable in my opinion this is the\ncleanest implementation that we've\nlooked at it has the fewest lines of\ncode and is fairly easy to read if\nyou're a javascript developer that has\nnever used spelt before the drawback\nthough is that the community is much\nsmaller than something like react so if\nyou need to use a supporting library or\nif you're looking to get a job you might\nrun into some more roadblocks than if\nyou used a more popular framework and\nthe same goes for all the other\nframeworks that we'll look at from here\nstarting with lit lit is a google\nsponsored project that's focused on\nbuilding web components if you're not\nfamiliar web components are a browser\nstandard that allows you to create\ncustom elements that can work across\nmultiple frameworks sounds great but the\nweb components api is notoriously\ndifficult to work with the cool thing\nabout lit is that when you define a\ncomponent it's creating a standard\ncustom element under the hood now other\nframeworks can do that as well but for\nmost of them it's just an afterthought\nand the developer experience is usually\nnot ideal if your goal is to build\nstandard web components lit doesn't have\na cli of its own but there is a starter\nproject to get us going i'm using the\ntypescript version here but that part is\noptional inside the lit app ts file\nyou'll notice that it's calling window\ncustom elements which is part of the web\ncomponents api in the browser that's\njust a unique point that you won't see\nin other frameworks by default\ncomponents themselves are defined as a\nclass that extends lit element reactive\ndata can be defined as properties on the\nclass using the property decorator then\nmethods can be defined on the class to\nupdate the state lifecycle hooks are\nbased on the ones defined in the actual\nweb components api like connected\ncallback by implementing the\nconnectedcallback method we can run code\nwhen the component is first initialized\nnow one thing that's really interesting\nabout lit is the way that it handles\ntemplates it uses the existing template\nliterals that we have in javascript or\nin other words a string that starts with\nbackticks this allows you to interpolate\njavascript into an html string using\ndollar sign braces the end result is\nsomething that feels kind of similar to\njsx and react but the html can also have\ndirectives like submit or dot value to\nbind to the form submit event or the\ninput value and as far as i can tell it\ndoesn't support two-way data binding so\ni had to set up an event listener here\non the input change event to update the\nto-do text whenever that event fires the\nbottom line with lit is that you get a\nmuch nicer way to build standard web\ncomponents without having to be an\nexpert on the underlying apis and that\nbrings me to an alternative framework\nthat is also focused on web components\ncalled stencil this one comes from the\nteam behind the ionic framework which\nitself is actually a component library\nfor mobile development that's built with\nstencil they use web components for the\npurpose of making ionic compatible with\nreact angular and vue out of the box\ncreate a new app by running npm init\nstencil and that will give you a\ntypescript project to get started just\nlike lit it will take each component and\ncompile it down to a standard web\ncomponent a component itself is a class\nwith the component decorator which looks\nvery similar to angular then reactive\ndata can be defined as properties with\nthe state decorator custom methods can\nbe defined to update the state then we\nhave life cycle hooks like component\nwill load to run code when the component\nis first initialized at this point this\ncomponent looks almost exactly like an\nangular component but for templating it\nuses jsx like react that gives you the\nbest or worst of both worlds depending\non who you ask the template looks almost\nexactly like the react app but it\ndoesn't appear to support two-way data\nbinding which means i've also added an\nextra event listener for on input to\nupdate the to-do text when the user\ntypes into the form stencil is another\ngreat option for building web components\nbut now we're going to move on to a\nframework that i get a ton of requests\nfor solid js it's a tool for building ui\ncomponents and feels very inspired by\nreact but the main difference is that it\ndoesn't use the virtual dom instead it\ncompiles your code down to native dom\nnodes similar to spelt and because of\nthis it hits very high performance marks\nacross every benchmark you can think of\nit like a faster more developer friendly\nversion of react but the drawback is\nthat it has a smaller community to draw\nfrom when you generate a new project it\nuses veet as the build tool which is\ncool then you have components defined in\njsx files just like react components are\ndefined as functions then to define\nreactive state on the component we use\nsomething very similar to a react hook\ncalled a signal it returns us with a\nreactive value and a function to update\nthat value we can then define a function\nto update the state and if we want to\nuse a life cycle hook instead of use\neffect we have the much more readable on\nmount hook that will run when the\ncomponent is first initialized now for\nthe ui itself we use jsx it looks pretty\nmuch identical to the react code but\ni've noticed that solid does things to\nmake your life easier for example we can\nbind the form value to a variable using\nref and unlike react we don't need to\nimport the used ref hook to do that\noverall solid js feels like a more well\nthought out and faster version of react\nbut now let's look at something totally\ndifferent alpine js it's a tiny library\nat around four kilobytes that allows you\nto extend your existing html with\nreactive data and many of the features\nthat you would find in the frameworks\nwe've already looked at instead of\nprimarily focusing on javascript with\nalpine you generally focus on your html\nif you've ever used tailwind for css you\ncan think of alpine as the equivalent in\njavascript it has over 17 000 github\nstars and is a popular replacement for\njquery to get started create an html\nfile then add the alpine script to the\nhead reactive data can be stored\ndirectly in a dom node using the x data\nattribute that data can then be used in\na child element with something like x4\nto loop over the array of to do's then\ndown in the form we can use x on submit\nand also prevent default and then bind\nit to a function in our javascript the\nconcepts here are very similar to the\nother frameworks that we've looked at\nbut in this case we're working with raw\nhtml as opposed to some custom\ntemplating language or jsx now if we do\nwant to write some plain javascript we\ncan do that in a script tag and alpine\nactually has a mechanism called alpine\nstore that allows us to store data and\nshare it between multiple components in\nthe ui that's what we'll need to do for\nour to-do's so that we can load them\nfrom local storage to handle that when\nthe component is first initialized we\ncan call document add event listener to\nthe custom alpine init event and then\nupdate the data from the store when that\nevent fires and that gives us a complete\napp with very minimal code in my opinion\nalpine feels like an awesome option when\nyou just want to add a little bit of\njavascript interactivity to an existing\nhtml page but at the same time i don't\nthink alpine could replace something\nlike react view or angular so if you're\nbuilding a very complicated single page\napplication it might be best to stick\nwith one of those and that brings us to\nthe final wild wildcard framework\nmithril it's also very lightweight and\ntends to perform better than the big\nframeworks it uses virtual dom like\nreact and view but the overall developer\nexperience is a lot different to get\nstarted create an index.html file then\nadd the mithral script tag to it you can\nactually create components from\nfunctions classes or as we're doing here\na plain javascript object we can add\ndata and methods to the component as\nproperties on the object there are also\nspecial properties like on init which is\nthe life cycle hook for when the\ncomponent is first initialized then we\nhave view to define the ui itself to\ndefine a dom node we use the m function\nand pass the name of that node as the\nfirst argument then options about the\nnode as the second argument like the\nclass name for example or you can pass\nchildren as a second argument like we're\ndoing here to map an array of list items\nthen down on the form element we're\ndefining a handler for the on submit\nevent what you have here is something\nthat is kind of similar to jsx but the\nui is truly defined in pure javascript\nif you hate html and never want to touch\nit you might like this system but\npersonally i found it a bit awkward and\nthe mithril app actually took me the\nlongest amount of time to build but like\ni said before it really comes down to\npersonal preference and i could see why\nsomeone would really like this and there\nyou have 10 different ways to build the\nexact same javascript app there are new\nframeworks popping up every couple days\nso this video will likely be very\noutdated by the time you finish watching\nit the bottom line is that all these\nframeworks can do the same basic thing\nit's really just a matter of choosing\nthe one that makes you and your\nteammates happy if you want to see\nframeworks like angular react and view\nin action consider becoming a pro member\nat fireship io to get access to my full\ncourses thanks for watching and i will\nsee you in the next one\n",
  "words": [
    "javascript",
    "framework",
    "best",
    "go",
    "downloads",
    "react",
    "wins",
    "based",
    "github",
    "stars",
    "view",
    "best",
    "svelt",
    "loved",
    "framework",
    "according",
    "2021",
    "stack",
    "overflow",
    "survey",
    "people",
    "might",
    "even",
    "tell",
    "need",
    "javascript",
    "framework",
    "whether",
    "new",
    "developer",
    "20",
    "years",
    "experience",
    "difficult",
    "choose",
    "framework",
    "want",
    "marry",
    "single",
    "important",
    "decision",
    "make",
    "related",
    "frontend",
    "code",
    "absolute",
    "best",
    "framework",
    "way",
    "find",
    "one",
    "make",
    "happy",
    "build",
    "something",
    "today",
    "video",
    "build",
    "app",
    "10",
    "different",
    "javascript",
    "frameworks",
    "including",
    "angular",
    "react",
    "vue",
    "svelt",
    "lit",
    "alpine",
    "solid",
    "stencil",
    "mithril",
    "vanilla",
    "process",
    "learn",
    "frameworks",
    "make",
    "best",
    "choice",
    "next",
    "project",
    "video",
    "ton",
    "work",
    "make",
    "sure",
    "subscribe",
    "hit",
    "like",
    "button",
    "leave",
    "comment",
    "favorite",
    "framework",
    "choose",
    "random",
    "ones",
    "win",
    "free",
    "next",
    "week",
    "first",
    "thing",
    "build",
    "basic",
    "app",
    "vanilla",
    "javascript",
    "year",
    "hot",
    "take",
    "go",
    "viral",
    "saying",
    "need",
    "javascript",
    "framework",
    "expert",
    "web",
    "developer",
    "needs",
    "solid",
    "understanding",
    "vanilla",
    "js",
    "even",
    "javascript",
    "god",
    "attempting",
    "build",
    "app",
    "recipe",
    "disaster",
    "end",
    "building",
    "shitty",
    "javascript",
    "framework",
    "last",
    "thing",
    "world",
    "needs",
    "another",
    "javascript",
    "framework",
    "build",
    "app",
    "scratch",
    "create",
    "html",
    "file",
    "add",
    "script",
    "tag",
    "body",
    "want",
    "build",
    "app",
    "user",
    "write",
    "text",
    "form",
    "input",
    "submit",
    "form",
    "item",
    "appear",
    "list",
    "addition",
    "save",
    "items",
    "local",
    "storage",
    "kind",
    "mock",
    "database",
    "user",
    "refreshes",
    "page",
    "items",
    "still",
    "present",
    "pretty",
    "simple",
    "concept",
    "actually",
    "lot",
    "going",
    "like",
    "state",
    "management",
    "data",
    "binding",
    "events",
    "application",
    "life",
    "cycle",
    "think",
    "one",
    "thing",
    "frameworks",
    "vanilla",
    "js",
    "provide",
    "way",
    "bind",
    "connect",
    "html",
    "javascript",
    "automatically",
    "vanilla",
    "need",
    "imperatively",
    "grab",
    "html",
    "elements",
    "working",
    "dom",
    "tell",
    "right",
    "annoying",
    "way",
    "build",
    "complex",
    "application",
    "see",
    "dom",
    "unordered",
    "list",
    "form",
    "input",
    "button",
    "submit",
    "form",
    "going",
    "javascript",
    "first",
    "thing",
    "write",
    "code",
    "using",
    "document",
    "query",
    "selector",
    "grab",
    "one",
    "items",
    "dom",
    "access",
    "html",
    "elements",
    "setting",
    "empty",
    "array",
    "represent",
    "actual",
    "items",
    "list",
    "addition",
    "keeping",
    "track",
    "data",
    "also",
    "need",
    "update",
    "actual",
    "ui",
    "data",
    "changes",
    "defining",
    "function",
    "called",
    "add",
    "takes",
    "new",
    "item",
    "argument",
    "things",
    "start",
    "get",
    "ugly",
    "vanilla",
    "order",
    "update",
    "ui",
    "need",
    "manually",
    "create",
    "new",
    "list",
    "item",
    "element",
    "calling",
    "document",
    "create",
    "element",
    "need",
    "imperatively",
    "update",
    "inner",
    "html",
    "text",
    "finally",
    "append",
    "unordered",
    "list",
    "dom",
    "added",
    "touch",
    "save",
    "data",
    "local",
    "storage",
    "access",
    "page",
    "refreshed",
    "problem",
    "code",
    "application",
    "data",
    "state",
    "completely",
    "decoupled",
    "ui",
    "makes",
    "hard",
    "keep",
    "data",
    "sync",
    "ui",
    "function",
    "place",
    "need",
    "way",
    "call",
    "user",
    "submits",
    "form",
    "need",
    "register",
    "event",
    "listener",
    "forum",
    "submit",
    "event",
    "event",
    "fired",
    "first",
    "call",
    "prevent",
    "default",
    "prevent",
    "refreshing",
    "page",
    "call",
    "add",
    "function",
    "current",
    "value",
    "text",
    "input",
    "point",
    "working",
    "list",
    "one",
    "important",
    "thing",
    "notice",
    "look",
    "html",
    "markup",
    "really",
    "idea",
    "way",
    "tell",
    "form",
    "event",
    "listener",
    "attached",
    "unless",
    "go",
    "search",
    "javascript",
    "code",
    "extremely",
    "difficult",
    "complex",
    "application",
    "one",
    "final",
    "thing",
    "think",
    "application",
    "lifecycle",
    "app",
    "first",
    "initialized",
    "want",
    "grab",
    "existing",
    "items",
    "local",
    "storage",
    "render",
    "list",
    "exist",
    "existing",
    "local",
    "storage",
    "loop",
    "four",
    "call",
    "add",
    "function",
    "one",
    "congratulations",
    "built",
    "app",
    "vanilla",
    "js",
    "code",
    "going",
    "scale",
    "complexity",
    "well",
    "likely",
    "many",
    "features",
    "want",
    "add",
    "like",
    "routing",
    "animation",
    "implement",
    "scratch",
    "vast",
    "majority",
    "developers",
    "choose",
    "build",
    "apps",
    "framework",
    "first",
    "react",
    "people",
    "would",
    "consider",
    "popular",
    "framework",
    "people",
    "call",
    "library",
    "really",
    "matter",
    "tool",
    "becomes",
    "main",
    "driver",
    "project",
    "requiring",
    "developer",
    "everything",
    "react",
    "way",
    "mean",
    "bad",
    "way",
    "react",
    "created",
    "smart",
    "people",
    "facebook",
    "build",
    "complex",
    "uis",
    "like",
    "facebook",
    "ui",
    "react",
    "minimal",
    "design",
    "relies",
    "open",
    "source",
    "community",
    "handle",
    "concerns",
    "like",
    "routing",
    "animation",
    "state",
    "management",
    "opinionated",
    "organize",
    "code",
    "requires",
    "make",
    "lot",
    "decisions",
    "libraries",
    "bring",
    "make",
    "things",
    "maintainable",
    "scalable",
    "react",
    "far",
    "popular",
    "framework",
    "10",
    "million",
    "weekly",
    "downloads",
    "npm",
    "170",
    "000",
    "github",
    "stars",
    "popularity",
    "alone",
    "makes",
    "great",
    "skill",
    "learn",
    "many",
    "employers",
    "looking",
    "hire",
    "react",
    "developers",
    "find",
    "tons",
    "react",
    "developers",
    "industry",
    "collaborate",
    "react",
    "official",
    "cli",
    "called",
    "create",
    "react",
    "app",
    "create",
    "new",
    "react",
    "project",
    "running",
    "create",
    "react",
    "app",
    "command",
    "terminal",
    "worth",
    "noting",
    "many",
    "people",
    "opt",
    "tools",
    "building",
    "react",
    "project",
    "like",
    "next",
    "js",
    "gatsby",
    "would",
    "replace",
    "default",
    "cli",
    "generate",
    "new",
    "project",
    "create",
    "react",
    "app",
    "notice",
    "package",
    "json",
    "root",
    "project",
    "inside",
    "start",
    "script",
    "serve",
    "app",
    "locally",
    "hood",
    "uses",
    "tool",
    "called",
    "webpack",
    "bundle",
    "code",
    "together",
    "single",
    "javascript",
    "file",
    "react",
    "frameworks",
    "application",
    "organized",
    "tree",
    "components",
    "components",
    "encapsulate",
    "parts",
    "ui",
    "ways",
    "communicate",
    "allows",
    "organize",
    "app",
    "declarative",
    "way",
    "given",
    "set",
    "application",
    "data",
    "end",
    "result",
    "ui",
    "always",
    "file",
    "first",
    "notice",
    "function",
    "called",
    "app",
    "function",
    "represents",
    "component",
    "ui",
    "personally",
    "love",
    "simplicity",
    "return",
    "value",
    "function",
    "jsx",
    "looks",
    "like",
    "html",
    "extended",
    "additional",
    "syntax",
    "allowing",
    "insert",
    "javascript",
    "html",
    "list",
    "define",
    "reactive",
    "state",
    "component",
    "use",
    "state",
    "hook",
    "hook",
    "function",
    "return",
    "us",
    "two",
    "values",
    "first",
    "item",
    "value",
    "list",
    "reactive",
    "state",
    "means",
    "time",
    "updated",
    "ui",
    "show",
    "latest",
    "state",
    "second",
    "item",
    "function",
    "update",
    "state",
    "go",
    "back",
    "jsx",
    "loop",
    "items",
    "array",
    "render",
    "directly",
    "ui",
    "list",
    "item",
    "html",
    "form",
    "cool",
    "thing",
    "react",
    "bind",
    "event",
    "directly",
    "form",
    "using",
    "submit",
    "right",
    "side",
    "reference",
    "function",
    "called",
    "whenever",
    "submit",
    "event",
    "fires",
    "function",
    "update",
    "state",
    "store",
    "result",
    "local",
    "storage",
    "also",
    "notice",
    "using",
    "usref",
    "hook",
    "grab",
    "current",
    "value",
    "form",
    "input",
    "one",
    "thing",
    "notice",
    "html",
    "lot",
    "descriptive",
    "know",
    "exactly",
    "elements",
    "data",
    "events",
    "bound",
    "final",
    "thing",
    "need",
    "run",
    "life",
    "cycle",
    "hook",
    "react",
    "handled",
    "use",
    "effect",
    "hook",
    "grab",
    "items",
    "local",
    "storage",
    "component",
    "first",
    "initialized",
    "hook",
    "really",
    "confusing",
    "though",
    "getting",
    "started",
    "run",
    "component",
    "first",
    "initialized",
    "need",
    "add",
    "array",
    "second",
    "argument",
    "opinion",
    "code",
    "really",
    "hard",
    "look",
    "unless",
    "really",
    "know",
    "going",
    "use",
    "effect",
    "hook",
    "case",
    "react",
    "gold",
    "standard",
    "declarative",
    "ui",
    "frameworks",
    "one",
    "way",
    "get",
    "job",
    "done",
    "next",
    "react",
    "arch",
    "nemesis",
    "angular",
    "developed",
    "maintained",
    "google",
    "unlike",
    "react",
    "opinionated",
    "organize",
    "structure",
    "project",
    "75",
    "000",
    "github",
    "stars",
    "second",
    "downloaded",
    "framework",
    "npm",
    "comes",
    "officially",
    "supported",
    "libraries",
    "routing",
    "animation",
    "server",
    "side",
    "rendering",
    "follows",
    "set",
    "predictable",
    "conventions",
    "angular",
    "projects",
    "structured",
    "relatively",
    "awesome",
    "tooling",
    "go",
    "along",
    "fact",
    "actually",
    "required",
    "use",
    "typescript",
    "google",
    "uses",
    "internally",
    "build",
    "hundreds",
    "different",
    "web",
    "apps",
    "throughout",
    "product",
    "line",
    "great",
    "option",
    "big",
    "teams",
    "may",
    "little",
    "overwhelming",
    "beginner",
    "start",
    "angular",
    "project",
    "run",
    "command",
    "line",
    "give",
    "us",
    "fairly",
    "large",
    "project",
    "get",
    "started",
    "already",
    "configured",
    "typescript",
    "build",
    "component",
    "file",
    "could",
    "use",
    "cli",
    "generate",
    "brand",
    "new",
    "component",
    "automatically",
    "fact",
    "angular",
    "powerful",
    "cli",
    "frameworks",
    "pretty",
    "wide",
    "margin",
    "notice",
    "component",
    "represented",
    "typescript",
    "class",
    "component",
    "decorator",
    "top",
    "possible",
    "define",
    "entire",
    "component",
    "ts",
    "file",
    "however",
    "angular",
    "apps",
    "break",
    "components",
    "least",
    "three",
    "separate",
    "files",
    "one",
    "typescript",
    "one",
    "html",
    "another",
    "css",
    "add",
    "reactive",
    "state",
    "component",
    "simply",
    "define",
    "property",
    "class",
    "define",
    "method",
    "class",
    "update",
    "state",
    "addition",
    "manage",
    "lifecycle",
    "component",
    "class",
    "implementing",
    "special",
    "methods",
    "like",
    "ng",
    "init",
    "method",
    "called",
    "whenever",
    "component",
    "first",
    "initialized",
    "go",
    "template",
    "notice",
    "looks",
    "like",
    "html",
    "extended",
    "empowered",
    "special",
    "templating",
    "language",
    "makes",
    "possible",
    "loop",
    "array",
    "items",
    "using",
    "ng4",
    "directory",
    "unlike",
    "react",
    "brings",
    "html",
    "javascript",
    "angular",
    "opposite",
    "brings",
    "javascript",
    "html",
    "form",
    "bind",
    "submit",
    "event",
    "run",
    "add",
    "method",
    "whenever",
    "event",
    "fired",
    "get",
    "actual",
    "value",
    "form",
    "input",
    "use",
    "data",
    "binding",
    "using",
    "ng",
    "model",
    "directive",
    "binds",
    "form",
    "value",
    "text",
    "property",
    "class",
    "however",
    "use",
    "need",
    "go",
    "app",
    "module",
    "import",
    "angular",
    "forms",
    "module",
    "required",
    "directive",
    "work",
    "reason",
    "among",
    "many",
    "others",
    "tends",
    "much",
    "higher",
    "learning",
    "curve",
    "frameworks",
    "everything",
    "reason",
    "angular",
    "opinionated",
    "structure",
    "project",
    "scale",
    "well",
    "tends",
    "make",
    "popular",
    "enterprise",
    "applications",
    "brings",
    "independently",
    "developed",
    "maintained",
    "evan",
    "yu",
    "feels",
    "similar",
    "angular",
    "package",
    "approachable",
    "independent",
    "developers",
    "official",
    "packages",
    "things",
    "like",
    "routing",
    "state",
    "management",
    "huge",
    "ecosystem",
    "packages",
    "github",
    "stars",
    "hundred",
    "eighty",
    "seven",
    "thousand",
    "basically",
    "tied",
    "angular",
    "second",
    "place",
    "npm",
    "downloads",
    "vue",
    "also",
    "powerful",
    "cli",
    "example",
    "hit",
    "view",
    "ui",
    "command",
    "bring",
    "actual",
    "browser",
    "window",
    "walk",
    "us",
    "different",
    "dependencies",
    "features",
    "add",
    "generating",
    "initial",
    "app",
    "creates",
    "really",
    "nice",
    "developer",
    "experience",
    "generate",
    "components",
    "quite",
    "powerful",
    "angular",
    "cli",
    "notice",
    "generates",
    "far",
    "simplified",
    "project",
    "structure",
    "file",
    "add",
    "additional",
    "plugins",
    "functionality",
    "like",
    "routing",
    "state",
    "management",
    "becomes",
    "needed",
    "components",
    "defined",
    "files",
    "end",
    "dot",
    "view",
    "code",
    "organized",
    "three",
    "parts",
    "template",
    "script",
    "styles",
    "component",
    "represented",
    "plain",
    "javascript",
    "object",
    "define",
    "reactive",
    "data",
    "state",
    "using",
    "data",
    "property",
    "change",
    "state",
    "methods",
    "property",
    "define",
    "add",
    "method",
    "called",
    "certain",
    "events",
    "triggered",
    "tap",
    "component",
    "life",
    "cycle",
    "methods",
    "like",
    "mounted",
    "called",
    "component",
    "first",
    "initialized",
    "similar",
    "concepts",
    "react",
    "angular",
    "main",
    "difference",
    "working",
    "within",
    "context",
    "plain",
    "javascript",
    "object",
    "instead",
    "function",
    "class",
    "template",
    "setup",
    "similar",
    "angular",
    "uses",
    "directives",
    "handle",
    "things",
    "like",
    "v4",
    "loop",
    "items",
    "v",
    "submit",
    "handle",
    "form",
    "submission",
    "one",
    "thing",
    "nice",
    "automatically",
    "prevent",
    "default",
    "behavior",
    "adding",
    "dot",
    "prevent",
    "directive",
    "instead",
    "implementing",
    "code",
    "method",
    "find",
    "lot",
    "little",
    "things",
    "like",
    "view",
    "make",
    "life",
    "easier",
    "lastly",
    "v",
    "model",
    "directive",
    "bind",
    "text",
    "form",
    "input",
    "value",
    "view",
    "awesome",
    "big",
    "community",
    "another",
    "independent",
    "option",
    "spelt",
    "loved",
    "framework",
    "2021",
    "stack",
    "overflow",
    "survey",
    "50",
    "000",
    "github",
    "stars",
    "common",
    "three",
    "wild",
    "well",
    "loved",
    "people",
    "use",
    "like",
    "react",
    "designed",
    "minimal",
    "library",
    "relies",
    "open",
    "source",
    "community",
    "features",
    "like",
    "routing",
    "one",
    "thing",
    "makes",
    "unique",
    "frameworks",
    "ship",
    "runtime",
    "like",
    "virtual",
    "dom",
    "browser",
    "instead",
    "works",
    "compiler",
    "turn",
    "code",
    "plain",
    "javascript",
    "generate",
    "new",
    "project",
    "rollup",
    "webpack",
    "config",
    "choose",
    "used",
    "bundle",
    "code",
    "cli",
    "tools",
    "attempt",
    "abstract",
    "part",
    "away",
    "building",
    "smelt",
    "project",
    "may",
    "need",
    "learn",
    "little",
    "bit",
    "module",
    "bundlers",
    "whereas",
    "frameworks",
    "try",
    "hide",
    "detail",
    "components",
    "defined",
    "dot",
    "spell",
    "files",
    "like",
    "view",
    "three",
    "parts",
    "script",
    "template",
    "styles",
    "create",
    "reactive",
    "state",
    "component",
    "declare",
    "variable",
    "let",
    "keyword",
    "modify",
    "state",
    "define",
    "plain",
    "javascript",
    "function",
    "like",
    "feels",
    "natural",
    "looks",
    "like",
    "regular",
    "javascript",
    "minimal",
    "abstractions",
    "going",
    "compared",
    "something",
    "like",
    "react",
    "deal",
    "lifecycle",
    "hooks",
    "import",
    "mount",
    "function",
    "svelt",
    "register",
    "callback",
    "component",
    "first",
    "initialized",
    "template",
    "special",
    "syntax",
    "makes",
    "easy",
    "loop",
    "things",
    "like",
    "loop",
    "array",
    "handle",
    "form",
    "submission",
    "submit",
    "also",
    "add",
    "bar",
    "preventdefault",
    "avoid",
    "implementing",
    "detail",
    "function",
    "lastly",
    "implement",
    "data",
    "binding",
    "using",
    "bind",
    "directive",
    "value",
    "followed",
    "text",
    "variable",
    "opinion",
    "cleanest",
    "implementation",
    "looked",
    "fewest",
    "lines",
    "code",
    "fairly",
    "easy",
    "read",
    "javascript",
    "developer",
    "never",
    "used",
    "spelt",
    "drawback",
    "though",
    "community",
    "much",
    "smaller",
    "something",
    "like",
    "react",
    "need",
    "use",
    "supporting",
    "library",
    "looking",
    "get",
    "job",
    "might",
    "run",
    "roadblocks",
    "used",
    "popular",
    "framework",
    "goes",
    "frameworks",
    "look",
    "starting",
    "lit",
    "lit",
    "google",
    "sponsored",
    "project",
    "focused",
    "building",
    "web",
    "components",
    "familiar",
    "web",
    "components",
    "browser",
    "standard",
    "allows",
    "create",
    "custom",
    "elements",
    "work",
    "across",
    "multiple",
    "frameworks",
    "sounds",
    "great",
    "web",
    "components",
    "api",
    "notoriously",
    "difficult",
    "work",
    "cool",
    "thing",
    "lit",
    "define",
    "component",
    "creating",
    "standard",
    "custom",
    "element",
    "hood",
    "frameworks",
    "well",
    "afterthought",
    "developer",
    "experience",
    "usually",
    "ideal",
    "goal",
    "build",
    "standard",
    "web",
    "components",
    "lit",
    "cli",
    "starter",
    "project",
    "get",
    "us",
    "going",
    "using",
    "typescript",
    "version",
    "part",
    "optional",
    "inside",
    "lit",
    "app",
    "ts",
    "file",
    "notice",
    "calling",
    "window",
    "custom",
    "elements",
    "part",
    "web",
    "components",
    "api",
    "browser",
    "unique",
    "point",
    "wo",
    "see",
    "frameworks",
    "default",
    "components",
    "defined",
    "class",
    "extends",
    "lit",
    "element",
    "reactive",
    "data",
    "defined",
    "properties",
    "class",
    "using",
    "property",
    "decorator",
    "methods",
    "defined",
    "class",
    "update",
    "state",
    "lifecycle",
    "hooks",
    "based",
    "ones",
    "defined",
    "actual",
    "web",
    "components",
    "api",
    "like",
    "connected",
    "callback",
    "implementing",
    "connectedcallback",
    "method",
    "run",
    "code",
    "component",
    "first",
    "initialized",
    "one",
    "thing",
    "really",
    "interesting",
    "lit",
    "way",
    "handles",
    "templates",
    "uses",
    "existing",
    "template",
    "literals",
    "javascript",
    "words",
    "string",
    "starts",
    "backticks",
    "allows",
    "interpolate",
    "javascript",
    "html",
    "string",
    "using",
    "dollar",
    "sign",
    "braces",
    "end",
    "result",
    "something",
    "feels",
    "kind",
    "similar",
    "jsx",
    "react",
    "html",
    "also",
    "directives",
    "like",
    "submit",
    "dot",
    "value",
    "bind",
    "form",
    "submit",
    "event",
    "input",
    "value",
    "far",
    "tell",
    "support",
    "data",
    "binding",
    "set",
    "event",
    "listener",
    "input",
    "change",
    "event",
    "update",
    "text",
    "whenever",
    "event",
    "fires",
    "bottom",
    "line",
    "lit",
    "get",
    "much",
    "nicer",
    "way",
    "build",
    "standard",
    "web",
    "components",
    "without",
    "expert",
    "underlying",
    "apis",
    "brings",
    "alternative",
    "framework",
    "also",
    "focused",
    "web",
    "components",
    "called",
    "stencil",
    "one",
    "comes",
    "team",
    "behind",
    "ionic",
    "framework",
    "actually",
    "component",
    "library",
    "mobile",
    "development",
    "built",
    "stencil",
    "use",
    "web",
    "components",
    "purpose",
    "making",
    "ionic",
    "compatible",
    "react",
    "angular",
    "vue",
    "box",
    "create",
    "new",
    "app",
    "running",
    "npm",
    "init",
    "stencil",
    "give",
    "typescript",
    "project",
    "get",
    "started",
    "like",
    "lit",
    "take",
    "component",
    "compile",
    "standard",
    "web",
    "component",
    "component",
    "class",
    "component",
    "decorator",
    "looks",
    "similar",
    "angular",
    "reactive",
    "data",
    "defined",
    "properties",
    "state",
    "decorator",
    "custom",
    "methods",
    "defined",
    "update",
    "state",
    "life",
    "cycle",
    "hooks",
    "like",
    "component",
    "load",
    "run",
    "code",
    "component",
    "first",
    "initialized",
    "point",
    "component",
    "looks",
    "almost",
    "exactly",
    "like",
    "angular",
    "component",
    "templating",
    "uses",
    "jsx",
    "like",
    "react",
    "gives",
    "best",
    "worst",
    "worlds",
    "depending",
    "ask",
    "template",
    "looks",
    "almost",
    "exactly",
    "like",
    "react",
    "app",
    "appear",
    "support",
    "data",
    "binding",
    "means",
    "also",
    "added",
    "extra",
    "event",
    "listener",
    "input",
    "update",
    "text",
    "user",
    "types",
    "form",
    "stencil",
    "another",
    "great",
    "option",
    "building",
    "web",
    "components",
    "going",
    "move",
    "framework",
    "get",
    "ton",
    "requests",
    "solid",
    "js",
    "tool",
    "building",
    "ui",
    "components",
    "feels",
    "inspired",
    "react",
    "main",
    "difference",
    "use",
    "virtual",
    "dom",
    "instead",
    "compiles",
    "code",
    "native",
    "dom",
    "nodes",
    "similar",
    "spelt",
    "hits",
    "high",
    "performance",
    "marks",
    "across",
    "every",
    "benchmark",
    "think",
    "like",
    "faster",
    "developer",
    "friendly",
    "version",
    "react",
    "drawback",
    "smaller",
    "community",
    "draw",
    "generate",
    "new",
    "project",
    "uses",
    "veet",
    "build",
    "tool",
    "cool",
    "components",
    "defined",
    "jsx",
    "files",
    "like",
    "react",
    "components",
    "defined",
    "functions",
    "define",
    "reactive",
    "state",
    "component",
    "use",
    "something",
    "similar",
    "react",
    "hook",
    "called",
    "signal",
    "returns",
    "us",
    "reactive",
    "value",
    "function",
    "update",
    "value",
    "define",
    "function",
    "update",
    "state",
    "want",
    "use",
    "life",
    "cycle",
    "hook",
    "instead",
    "use",
    "effect",
    "much",
    "readable",
    "mount",
    "hook",
    "run",
    "component",
    "first",
    "initialized",
    "ui",
    "use",
    "jsx",
    "looks",
    "pretty",
    "much",
    "identical",
    "react",
    "code",
    "noticed",
    "solid",
    "things",
    "make",
    "life",
    "easier",
    "example",
    "bind",
    "form",
    "value",
    "variable",
    "using",
    "ref",
    "unlike",
    "react",
    "need",
    "import",
    "used",
    "ref",
    "hook",
    "overall",
    "solid",
    "js",
    "feels",
    "like",
    "well",
    "thought",
    "faster",
    "version",
    "react",
    "let",
    "look",
    "something",
    "totally",
    "different",
    "alpine",
    "js",
    "tiny",
    "library",
    "around",
    "four",
    "kilobytes",
    "allows",
    "extend",
    "existing",
    "html",
    "reactive",
    "data",
    "many",
    "features",
    "would",
    "find",
    "frameworks",
    "already",
    "looked",
    "instead",
    "primarily",
    "focusing",
    "javascript",
    "alpine",
    "generally",
    "focus",
    "html",
    "ever",
    "used",
    "tailwind",
    "css",
    "think",
    "alpine",
    "equivalent",
    "javascript",
    "17",
    "000",
    "github",
    "stars",
    "popular",
    "replacement",
    "jquery",
    "get",
    "started",
    "create",
    "html",
    "file",
    "add",
    "alpine",
    "script",
    "head",
    "reactive",
    "data",
    "stored",
    "directly",
    "dom",
    "node",
    "using",
    "x",
    "data",
    "attribute",
    "data",
    "used",
    "child",
    "element",
    "something",
    "like",
    "x4",
    "loop",
    "array",
    "form",
    "use",
    "x",
    "submit",
    "also",
    "prevent",
    "default",
    "bind",
    "function",
    "javascript",
    "concepts",
    "similar",
    "frameworks",
    "looked",
    "case",
    "working",
    "raw",
    "html",
    "opposed",
    "custom",
    "templating",
    "language",
    "jsx",
    "want",
    "write",
    "plain",
    "javascript",
    "script",
    "tag",
    "alpine",
    "actually",
    "mechanism",
    "called",
    "alpine",
    "store",
    "allows",
    "us",
    "store",
    "data",
    "share",
    "multiple",
    "components",
    "ui",
    "need",
    "load",
    "local",
    "storage",
    "handle",
    "component",
    "first",
    "initialized",
    "call",
    "document",
    "add",
    "event",
    "listener",
    "custom",
    "alpine",
    "init",
    "event",
    "update",
    "data",
    "store",
    "event",
    "fires",
    "gives",
    "us",
    "complete",
    "app",
    "minimal",
    "code",
    "opinion",
    "alpine",
    "feels",
    "like",
    "awesome",
    "option",
    "want",
    "add",
    "little",
    "bit",
    "javascript",
    "interactivity",
    "existing",
    "html",
    "page",
    "time",
    "think",
    "alpine",
    "could",
    "replace",
    "something",
    "like",
    "react",
    "view",
    "angular",
    "building",
    "complicated",
    "single",
    "page",
    "application",
    "might",
    "best",
    "stick",
    "one",
    "brings",
    "us",
    "final",
    "wild",
    "wildcard",
    "framework",
    "mithril",
    "also",
    "lightweight",
    "tends",
    "perform",
    "better",
    "big",
    "frameworks",
    "uses",
    "virtual",
    "dom",
    "like",
    "react",
    "view",
    "overall",
    "developer",
    "experience",
    "lot",
    "different",
    "get",
    "started",
    "create",
    "file",
    "add",
    "mithral",
    "script",
    "tag",
    "actually",
    "create",
    "components",
    "functions",
    "classes",
    "plain",
    "javascript",
    "object",
    "add",
    "data",
    "methods",
    "component",
    "properties",
    "object",
    "also",
    "special",
    "properties",
    "like",
    "init",
    "life",
    "cycle",
    "hook",
    "component",
    "first",
    "initialized",
    "view",
    "define",
    "ui",
    "define",
    "dom",
    "node",
    "use",
    "function",
    "pass",
    "name",
    "node",
    "first",
    "argument",
    "options",
    "node",
    "second",
    "argument",
    "like",
    "class",
    "name",
    "example",
    "pass",
    "children",
    "second",
    "argument",
    "like",
    "map",
    "array",
    "list",
    "items",
    "form",
    "element",
    "defining",
    "handler",
    "submit",
    "event",
    "something",
    "kind",
    "similar",
    "jsx",
    "ui",
    "truly",
    "defined",
    "pure",
    "javascript",
    "hate",
    "html",
    "never",
    "want",
    "touch",
    "might",
    "like",
    "system",
    "personally",
    "found",
    "bit",
    "awkward",
    "mithril",
    "app",
    "actually",
    "took",
    "longest",
    "amount",
    "time",
    "build",
    "like",
    "said",
    "really",
    "comes",
    "personal",
    "preference",
    "could",
    "see",
    "someone",
    "would",
    "really",
    "like",
    "10",
    "different",
    "ways",
    "build",
    "exact",
    "javascript",
    "app",
    "new",
    "frameworks",
    "popping",
    "every",
    "couple",
    "days",
    "video",
    "likely",
    "outdated",
    "time",
    "finish",
    "watching",
    "bottom",
    "line",
    "frameworks",
    "basic",
    "thing",
    "really",
    "matter",
    "choosing",
    "one",
    "makes",
    "teammates",
    "happy",
    "want",
    "see",
    "frameworks",
    "like",
    "angular",
    "react",
    "view",
    "action",
    "consider",
    "becoming",
    "pro",
    "member",
    "fireship",
    "io",
    "get",
    "access",
    "full",
    "courses",
    "thanks",
    "watching",
    "see",
    "next",
    "one"
  ],
  "keywords": [
    "javascript",
    "framework",
    "best",
    "go",
    "react",
    "github",
    "stars",
    "view",
    "people",
    "might",
    "tell",
    "need",
    "new",
    "developer",
    "experience",
    "choose",
    "want",
    "make",
    "code",
    "way",
    "find",
    "one",
    "build",
    "something",
    "app",
    "different",
    "frameworks",
    "angular",
    "lit",
    "alpine",
    "solid",
    "stencil",
    "vanilla",
    "next",
    "project",
    "work",
    "like",
    "first",
    "thing",
    "web",
    "js",
    "end",
    "building",
    "another",
    "create",
    "html",
    "file",
    "add",
    "script",
    "user",
    "text",
    "form",
    "input",
    "submit",
    "item",
    "list",
    "items",
    "local",
    "storage",
    "page",
    "actually",
    "lot",
    "going",
    "state",
    "management",
    "data",
    "binding",
    "application",
    "life",
    "cycle",
    "think",
    "bind",
    "grab",
    "elements",
    "working",
    "dom",
    "see",
    "using",
    "array",
    "actual",
    "also",
    "update",
    "ui",
    "function",
    "called",
    "argument",
    "things",
    "get",
    "element",
    "makes",
    "call",
    "event",
    "listener",
    "prevent",
    "default",
    "value",
    "notice",
    "look",
    "really",
    "lifecycle",
    "initialized",
    "existing",
    "loop",
    "well",
    "many",
    "features",
    "routing",
    "developers",
    "would",
    "popular",
    "library",
    "tool",
    "minimal",
    "community",
    "handle",
    "npm",
    "000",
    "great",
    "cli",
    "generate",
    "uses",
    "components",
    "allows",
    "component",
    "jsx",
    "looks",
    "define",
    "reactive",
    "use",
    "hook",
    "us",
    "time",
    "second",
    "whenever",
    "store",
    "run",
    "started",
    "standard",
    "typescript",
    "line",
    "option",
    "little",
    "class",
    "decorator",
    "three",
    "files",
    "property",
    "method",
    "implementing",
    "special",
    "methods",
    "init",
    "template",
    "brings",
    "directive",
    "much",
    "feels",
    "similar",
    "browser",
    "defined",
    "dot",
    "plain",
    "object",
    "instead",
    "used",
    "custom",
    "properties",
    "node"
  ]
}