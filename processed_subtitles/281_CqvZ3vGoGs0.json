{
  "text": "hey there how's it going everybody in\nthis video we'll be learning how to\nimport modules we'll start by importing\nmodules that we've written and then\nwe'll explore a bit of the standard\nlibrary and how we can import those\nmodules to solve a lot of common\nproblems so I have a module here called\nmy module. py now within this module we\nhave a print statement and we'll talk\nabout that in just a minute we also have\nthis test variable set to test string\nand then we have this function called\nfind index and this find index function\ntakes in two arguments takes in a list\nto search and a Target that we're\nlooking for and we can see that we have\nsome documentation here that just says\nthat this finds the index of a value in\na sequence um and then it returns that\nindex but if it doesn't find that value\nthen it just returns negative one so\nlet's say that we wrote this function\nand that we want to use this in other\nmodules or scripts so what we're going\nto want to do is import this so I have\nanother module over here uh which is\njust our intro. piy file that we've been\nworking with now within this file we\nhave this courses variable that is just\na list of course names so let's say that\nwe want to use that find index function\nfrom my module now I actually created\nthis my module in the same directory as\nmy intro. so that means that we're going\nto be able to directly import that now\nwhen we import a file it actually runs\nall of the code from the module that we\nimport so that's how it creates all the\nfunctions and variables but if we have\nany other code like print statements or\nanything like that then that will be run\nas as well so that's why I have the\nprint statement here in my module so\nthat we can see when that happens so to\nimport this module we can just come to\nthe top of the file here and say import\nmy module and again we can import that\ndirectly because it's in the same\ndirectory as our intro. py file and now\nif we run this with this import then we\ncan see that it imported successfully\nbecause it printed out that print\nstatement within that module okay so\nlet's say that we want to use that find\nindex function now when when importing\nmodules like this we just can't call our\nfind index function we instead have to\ntype the module name first and then what\nwe want to grab from that module so if\nwe wanted to use that then we could say\nlet's say index is equal to my\nmodule. find index and now we'll pass in\nthe list that we want to search which is\ncourses and now the Target that we're\nlooking for so we'll go ahead and say\nthat we're looking for Math and now\nlet's print out that index and run that\nso now we can see that that works it\nreturned one and one is the index of the\nmath value okay so if we're using this\nfind index function multiple times\nthroughout our script then it might get\na little old and take up a lot of room\nto keep typing my module. find index\neverywhere we can actually specify a\nname that we want to use for our\nimported module and usually this is used\nto make the module name shorter so for\nexample when we're importing my module\nhere at the top we could instead say\nimport my module as mm or any other name\nthat we come up with and now when using\nthis import throughout the script\ninstead of typing out my module\neverywhere we can instead just use mm so\nif I save that and run it then we'll see\nthat that still works now you'll see\nthis a lot with modules like numpy or\npandas so you might see someone who does\nan import and they'll do import numpy as\nNP or something like that now you might\nbe wondering if there's a way that we\ncan import the function itself and there\nis a way to do this so instead we could\nsay from my module import and then what\nwe want to import from that module so we\nwant to import find index so now when we\nuse this throughout the code now we can\njust use that find index function\nanywhere and that really cuts down on\nthe typing so now we can save that and\nrun it and see that it still works now\none thing to note about that approach is\nthat it only gives us access to that\nfind index function and not everything\nelse in the module so for example you'll\nremember that we had this test variable\nequal to this test string so when we do\nthe import this way now we don't have\naccess to that test variable since we're\nonly now importing the find index\nfunction now if we wanted to import that\nvariable then we would have to include\nit by putting in a comma and then\nspecifying what we want so we want to\nsay from my module import find index\ncomma and test so now down below here we\ncan print out that test variable and if\nwe run that then we can see that we do\nhave access to that test variable now\nnow when doing the import this way we\nstill have access to that as keyword so\nif we wanted to make this even shorter\nhand then we can say import find index\nas fi and now throughout our code we can\nreplace that with Fi and run that you\ncan see that it still works now at this\npoint that's not really readable anymore\nso don't rename something like that\nunless it's still readable and Mak sense\nto others who are reading your code so\nnow let's go ahead and just undo that\nchange now using this method of\nimporting we'd have to add commas and\nspecify each value that we want to\nimport now there is a way to just import\neverything and I'll show you how to do\nthis but I have to be honest I never use\nthis and it's pretty frowned upon um and\nwe'll see why that is but if we wanted\nto just import everything then we could\nsay from my module import Star so if we\nrun this then we can see that everything\nstill works we still have access to this\nfind index function and this test\nvariable but the reason that this is\nfrowned upon is because now we can't\ntell what came from that imported module\nand what didn't so if we're having\nproblems with this find index function\nthen we might try to track down where\nthat function came from or where it was\ndefined and with that asteris it's just\nnot obvious that it came from that\nmodule that was imported so instead\nwe'll go back to importing both of those\ndirectly so basically importing\neverything with that asteris just makes\nit harder to track down problems so it's\nbetter to do it this way okay so when we\nimport a module how does it know where\nto find this module so we didn't pass in\na file path or tell python where to find\nthis module it just found it so the way\nthat this works is that when we import a\nmodule it checks multiple locations and\nthe locations that it checks is within a\nlist called cy. paath and we can\nactually see this list if we import the\nCIS module so I'll import CIS and now\ndown here we'll comment out these two\nprint statements and now let's print out\nthat sis. paath and run that so this is\nthe list of directories on my machine\nwhere python looks for modules when we\nrun an import and it looks in this order\nnow this first value here is just the\ndirectory where I'm currently running\nthe script from and the my module python\nfile that we were importing is within\nthat directory also so that's how it\nfound it okay so what directories are\nadded to this cy. paath list so\ndirectories get added in this order\nfirst the directory containing the\nscript that we're running so that is why\nthis directory where we're running the\nscript is the first value in cy. paath\nso you can always import modules from\nthe same directory and next it adds\ndirectories listed in the python p path\nenvironment variable and we'll talk more\nabout the python path environment\nvariable in just a minute and then after\nthe python path it then adds the\nstandard Library directories and that's\nhow we can import those modules from the\nstandard library and lastly it adds the\nsite packages direct directory for\nthird-party packages and we'll look at\nall of these so first let's see what it\nlooks like when the module that we want\nto import isn't in the same directory as\nthe script that we're trying to import\nit from so I'm going to move the module\nthat we've been importing from the same\ndirectory into a directory on our\ndesktop so I've got finder pulled up\nhere and I'm just going to drag this my\nmodule over here into this my modules\ndirectory that is on my desktop so now\nthat module that we're trying to import\nis in a completely different location on\nour machine so if we go back to here to\nour script and now try to run this then\nwe can see that we get this eror module\nnot found no module named my module now\nthere are a couple of approaches that we\ncan take here first is that we can\nactually manually add that directory to\nour cy. paath list so this cy. path is a\nlist just like any other that we've been\nlooking at and we can treat it like one\nso before we try to import my module we\ncould add that directory to cy. paath so\nI'm going to import this here at the top\nbefore we try to import that module and\nthen I'll say sis. paath do append and\nthe location on my machine this is\nprobably going to be different on yours\nbut the location on mine is you uh users\ndy- desktop dmy modules and I believe I\nneed a dash here at the beginning as\nwell so if I save that and run it we can\nsee that when we appended that directory\nto our cy. path that we were now able to\nimport that module and run our code but\nthis isn't the best looking approach\nbecause we're pending this directory\nbefore our other Imports and also if we\nwere to import our module and we had\nthis manually hardcoded in multiple\nlocations then we'd have to change all\nof those so instead we can make this\nchange in the next place CIS path looks\nand if we remember that is the python\npath environment variable now changing\nthe environment variables is different\non Mac and windows so we'll show how to\ndo this on both really quick so first\nwe'll see how to do this on a Mac and to\ndo this I'm going to pull up my terminal\nand we can set environment variables by\nadding them to the bashore profile file\nin our home directory and you can edit\nthis file with any text editor but I'm\ngoing to use the one built into the\nterminal here called Nano since Nano is\neasy for anyone to use so we're going to\nsay Nano and then a Tilda Dash just\nmakes sure that we're working within our\nhome directory then we'll say bashore\nprofile now I might have more stuff in\nthis file than you do these are just\npersonal preferences and customizations\nbut I'm going to scroll down here to the\nend of the file and set my python path\nbut you can set this anywhere in this\nfile that you'd like so we're going to\nset this by saying export python path\nall uppercase and then equals and now we\nwant to set that location so I'm just\ngoing to come over here and grab that\nlocation and paste that in those quotes\nand we want it to look just like that no\nspace in between the equals and the path\nso to save that we can just hit contr X\nand then y to save and then enter to\nkeep the same file name and now we can\neither restart our terminal or run a\nsource command on that file but I'll\njust restart the terminal here and pull\nthis up and now if we run python then\nlet's see if we can import that module\nso import my module and we can see that\nthat worked and the reason that that\nworked is because if we import CIS and\nlook at our cy. paath then we can see\nthat after our current directory that we\nhave the directory that was added there\nand the reason that it's added is\nbecause we added it to our python path\nenvironment variable so now let's take a\nlook at how to set this environment\nvariable on\nWindows now to set this environment\nvariable on Windows we can click on our\nstart button here and then rightclick on\ncomputer and go to properties and from\nproperties we want to go to Advanced\nsystem settings and from here at the\nvery bottom we can click on environment\nvariables and and now we can create a\nnew environment variable so we'll click\nnew and we'll name this python path all\nuppercase there and then for the\nlocation that's going to be C we're\ngoing to go to the desktop again so\nagain this is uh specific to my desktop\nbut it may be a little bit different on\nyours so Corey Ms desktop and then the\nname of that directory is my- modules\nand again this python path is going to\nbe unique unque to your own machine so\nlet's hit okay there and okay to save\nthose and exit out of that and now if we\nopen up our Command Prompt by going to\nstart run CMD and then typing in Python\nand now we should be able to import that\nmodule just by saying import my module\nand if we run that then we can see that\nit imported that module successfully now\nthe reason that worked is because if we\nimport CIS and look at our cy. path then\nafter our current directory you can see\nthat our directory that we added to our\npython path is the second one that it\nlooks at here so that is how we add that\nenvironment variable on windows so now\nI'll switch back to my native\nOS now I do want to point out that if\nyou're using an editor like Sublime Tex\nor eclipse or pycharm then these may\nneed to have their environment variables\nset in a different way and that's\ndifferent for every program so instead\nof going through each individual one and\nshowing how uh you can likely find out\nhow to do that just by searching for\nyour editor plus python path and there\nshould be plenty of resources showing\nyou how to do that okay so going back to\nthis cy. path now after the directories\nin the python path environment variable\nthat we just looked at uh after that cy.\npaath looks at the standard Library\ndirectories now this is what allows us\nto import modules directly from the\nstandard Library so when something is\npart of the standard Library it means\nthat we're able to use it without\ninstalling anything separate so the\nstandard library is incredibly useful\nbecause if you're performing a common\ntask then most likely someone has\nalready written the functionality and if\nwe use it from the standard library then\nwe can be sure that it's been written by\nsome of the best programmers in the\nworld and has been optimized to be as\nperformant as possible now that's not to\nsay that you shouldn't try to write your\nown versions of some of these things uh\njust to get some practice but as far as\nusing any of that functionality in\nproduction it's probably a good idea to\nuse the tried and true standard Library\nso for example let's say that we wanted\nto grab a random value from a list of\nvalues so you could probably write\nsomething to do this on your own but\nthat functionality is already available\nto us when we use the random module from\nthe standard Library so let's go ahead\nand take a look at this so I'll get rid\nof everything here just to clean up\nexcept for our courses list now this\nrandom module is just part of the\nstandard library and we can just say\nimport random and if we wanted to grab a\nrandom value from our courses list then\nwe could just say random course is equal\nto random. Choice and then pass in our\ncourse's list so now if we print out\nthat random course and run that then we\ncan see it gave us a random value and if\nwe run this multiple times then we can\nsee that it gives us a random value just\nabout every time we run through now I'm\nnot going to go through all of the\nfunctionality in the standard library\nbut I will create a future video to go\nover some of these modules in depth but\nright now I just want to give you an\nidea of what's available to us so here\nare a few more useful standard Library\nmodules so if we need to perform some\ncommon mathematical operations then we\ncan import the math module and now we\ncan do some mathematic calculations so\nif we needed to convert 90 Dees into\nradians then we could say RADS is equal\nto math. radians and pass in 90 and then\nif we print RADS and run that then we\ncan see that we get that conversion and\nif we wanted to get the sign of that\nvalue then we could pass those radians\ninto the sign method so I can say math.\nsign pass in those radians and if I run\nthat then we can see that one is the\nsign of 90° okay and another useful\nmodule from the standard library is the\ndatetime module now this allows us to\nwork with dates and times and while\nwe're at it let's also go ahead and\nimport the calendar module now these\nhave some similar ilities but they're\nalso very different so for example if I\nwanted today's date then we could just\nsay today is equal to date time. dat.\ntoday and if we print this\nout and run that then we can see that\nthat gives us today's date now with the\ncalendar module we can ask for example\nis 2017 a leap year so I could print out\nand say calendar. is leap and pass in\n2017 if I run that we can see that\nthat's false but if I instead change\nthat to 2020 and run that then you can\nsee that that is true and the last\nstandard Library module that we'll look\nat for now is the OS module so I will\nimport OS now this is going to give us\naccess to the underlying operating\nsystem so for example if I wanted to see\nwhat directory we're currently in with\nthis script then I could print out\nos. CWD which is current working\ndirectory so if we run that then we can\nsee that it prints out the current\nworking directory where this script is\nlocated now this o module has a ton of\nother functionality it gives us the\nability to scan the file system and\ncreate files delete files and all of\nthat so you can see how these standard\nLibrary modules provide a ton of\nfunctionality that might be tricky or\ntake forever for us to write ourselves\nso python comes with a ton of stuff\navailable to us and makes it super easy\nto get them imported and and running so\nanother great thing about python is that\nthese modules are just python files\nthemselves and we can view the location\nof a module just by printing out its\nDunder file method or its Dunder file\nattribute I'm sorry so if we print out\nos. Dunder file and Dunder just means\ntwo underscores and don't worry why\nthose are double underscores that'll be\na topic for a future video so if we run\nthis then we can see that it prints out\nthe location of this file on our file\nsystem and if we open up that python\ndirectory where that file lives then we\ncould see the entire standard Library so\nI actually have this open right here so\nlet me open this up real quick so I\nactually have open that python 36\ndirectory where the entire standard\nLibrary lives now I know that this may\nbe a little small over here for you to\nsee on my screen um but let's go ahead\nand look through a couple of these files\nso these are all in alphabetical order\nso one of the first files in the\nstandard library is actually this\nanti-gravity module now this is kind of\na joke in the python community so there\nthis is a module that you can import\ncalled anti-gravity that will open up a\nweb comic on your machine and even\nthough this is part of the standard\nLibrary we can just open up this module\nhere and see exactly how this is done so\nwe can see that basically it just\nImports this web browser module and\nopens up the web browser to this page\nhere and I know that people are probably\ngoing to be curious what this comic is\nnow so let's go ahead and import that so\nback in\nintro. I'll just delete everything and\ndo import anti-gravity and run this\nfile then we can see it just opens up\nour web browser to this comic and I'll\nleave this open while we close out here\nso if you get a chance then don't be\nafraid to go into the standard library\nand look around at how different things\nare done um it's a great way to learn\nnow I'm not going to lie there's\ndefinitely some complicated code in\nthere but you'll be surprised how much\nyou can understand if you just poke\naround a bit okay so I think that's\ngoing to do it for this video so where\ndid we go from here so so far in this\nseries we've covered a lot of the\nfundamentals in working with python so\nwe've learned about different data types\nconditionals Loops functions and\nimporting modules and a bit of the\nstandard library now I think that just\nabout anyone would agree that no matter\nwhat specialty you plan on going into\nfor python whether it's back-end web\ndevelopment data science building\ndesktop applications no matter what\nroute you decide to take you're going to\nneed the fundamentals that we've covered\nup until this point but now that you\nunderstand these fundamentals the next\ntopics that you learn are up to you so\nyou can jump into learning\nobjectoriented programming in Python you\ncan learn how to work with files and\nfile data start learning about a web\nframework basically anything that you\nwant so I'm going to keep adding\nadditional videos onto this playlist\nthat I believe will be a good\nprogression as you continue to Learn\nPython but these videos won't be\nnumbered anymore after this video and\nthe reason for that is that I don't want\nto give the impression that you have to\nwatch one before understanding the\nothers so I don't want them to be\nnumbered to make you feel like you have\nto understand virtual environments\nbefore learning how to work with file\nobjects or something like that so you\ncan just skip around depending on what\nit is that you're wanting to learn so I\nhope that that makes sense now if anyone\nhas any questions about what we covered\nin this video then feel free to ask in\nthe comment section below and I'll do my\nbest to answer those if you enjoy these\ntutorials and would like to support them\nthen there are several ways you can do\nthat the easiest way is to Simply like\nthe video and give it a thumbs up and\nalso it's a huge help to share these\nvideos with anyone who you think would\nfind them useful and if you have the\nmemes you can contribute through patreon\nand there's a link to that page in the\ndescription section below be sure to\nsubscribe for future videos and thank\nyou all for watching\n",
  "words": [
    "hey",
    "going",
    "everybody",
    "video",
    "learning",
    "import",
    "modules",
    "start",
    "importing",
    "modules",
    "written",
    "explore",
    "bit",
    "standard",
    "library",
    "import",
    "modules",
    "solve",
    "lot",
    "common",
    "problems",
    "module",
    "called",
    "module",
    "py",
    "within",
    "module",
    "print",
    "statement",
    "talk",
    "minute",
    "also",
    "test",
    "variable",
    "set",
    "test",
    "string",
    "function",
    "called",
    "find",
    "index",
    "find",
    "index",
    "function",
    "takes",
    "two",
    "arguments",
    "takes",
    "list",
    "search",
    "target",
    "looking",
    "see",
    "documentation",
    "says",
    "finds",
    "index",
    "value",
    "sequence",
    "um",
    "returns",
    "index",
    "find",
    "value",
    "returns",
    "negative",
    "one",
    "let",
    "say",
    "wrote",
    "function",
    "want",
    "use",
    "modules",
    "scripts",
    "going",
    "want",
    "import",
    "another",
    "module",
    "uh",
    "intro",
    "piy",
    "file",
    "working",
    "within",
    "file",
    "courses",
    "variable",
    "list",
    "course",
    "names",
    "let",
    "say",
    "want",
    "use",
    "find",
    "index",
    "function",
    "module",
    "actually",
    "created",
    "module",
    "directory",
    "intro",
    "means",
    "going",
    "able",
    "directly",
    "import",
    "import",
    "file",
    "actually",
    "runs",
    "code",
    "module",
    "import",
    "creates",
    "functions",
    "variables",
    "code",
    "like",
    "print",
    "statements",
    "anything",
    "like",
    "run",
    "well",
    "print",
    "statement",
    "module",
    "see",
    "happens",
    "import",
    "module",
    "come",
    "top",
    "file",
    "say",
    "import",
    "module",
    "import",
    "directly",
    "directory",
    "intro",
    "py",
    "file",
    "run",
    "import",
    "see",
    "imported",
    "successfully",
    "printed",
    "print",
    "statement",
    "within",
    "module",
    "okay",
    "let",
    "say",
    "want",
    "use",
    "find",
    "index",
    "function",
    "importing",
    "modules",
    "like",
    "ca",
    "call",
    "find",
    "index",
    "function",
    "instead",
    "type",
    "module",
    "name",
    "first",
    "want",
    "grab",
    "module",
    "wanted",
    "use",
    "could",
    "say",
    "let",
    "say",
    "index",
    "equal",
    "module",
    "find",
    "index",
    "pass",
    "list",
    "want",
    "search",
    "courses",
    "target",
    "looking",
    "go",
    "ahead",
    "say",
    "looking",
    "math",
    "let",
    "print",
    "index",
    "run",
    "see",
    "works",
    "returned",
    "one",
    "one",
    "index",
    "math",
    "value",
    "okay",
    "using",
    "find",
    "index",
    "function",
    "multiple",
    "times",
    "throughout",
    "script",
    "might",
    "get",
    "little",
    "old",
    "take",
    "lot",
    "room",
    "keep",
    "typing",
    "module",
    "find",
    "index",
    "everywhere",
    "actually",
    "specify",
    "name",
    "want",
    "use",
    "imported",
    "module",
    "usually",
    "used",
    "make",
    "module",
    "name",
    "shorter",
    "example",
    "importing",
    "module",
    "top",
    "could",
    "instead",
    "say",
    "import",
    "module",
    "mm",
    "name",
    "come",
    "using",
    "import",
    "throughout",
    "script",
    "instead",
    "typing",
    "module",
    "everywhere",
    "instead",
    "use",
    "mm",
    "save",
    "run",
    "see",
    "still",
    "works",
    "see",
    "lot",
    "modules",
    "like",
    "numpy",
    "pandas",
    "might",
    "see",
    "someone",
    "import",
    "import",
    "numpy",
    "np",
    "something",
    "like",
    "might",
    "wondering",
    "way",
    "import",
    "function",
    "way",
    "instead",
    "could",
    "say",
    "module",
    "import",
    "want",
    "import",
    "module",
    "want",
    "import",
    "find",
    "index",
    "use",
    "throughout",
    "code",
    "use",
    "find",
    "index",
    "function",
    "anywhere",
    "really",
    "cuts",
    "typing",
    "save",
    "run",
    "see",
    "still",
    "works",
    "one",
    "thing",
    "note",
    "approach",
    "gives",
    "us",
    "access",
    "find",
    "index",
    "function",
    "everything",
    "else",
    "module",
    "example",
    "remember",
    "test",
    "variable",
    "equal",
    "test",
    "string",
    "import",
    "way",
    "access",
    "test",
    "variable",
    "since",
    "importing",
    "find",
    "index",
    "function",
    "wanted",
    "import",
    "variable",
    "would",
    "include",
    "putting",
    "comma",
    "specifying",
    "want",
    "want",
    "say",
    "module",
    "import",
    "find",
    "index",
    "comma",
    "test",
    "print",
    "test",
    "variable",
    "run",
    "see",
    "access",
    "test",
    "variable",
    "import",
    "way",
    "still",
    "access",
    "keyword",
    "wanted",
    "make",
    "even",
    "shorter",
    "hand",
    "say",
    "import",
    "find",
    "index",
    "fi",
    "throughout",
    "code",
    "replace",
    "fi",
    "run",
    "see",
    "still",
    "works",
    "point",
    "really",
    "readable",
    "anymore",
    "rename",
    "something",
    "like",
    "unless",
    "still",
    "readable",
    "mak",
    "sense",
    "others",
    "reading",
    "code",
    "let",
    "go",
    "ahead",
    "undo",
    "change",
    "using",
    "method",
    "importing",
    "add",
    "commas",
    "specify",
    "value",
    "want",
    "import",
    "way",
    "import",
    "everything",
    "show",
    "honest",
    "never",
    "use",
    "pretty",
    "frowned",
    "upon",
    "um",
    "see",
    "wanted",
    "import",
    "everything",
    "could",
    "say",
    "module",
    "import",
    "star",
    "run",
    "see",
    "everything",
    "still",
    "works",
    "still",
    "access",
    "find",
    "index",
    "function",
    "test",
    "variable",
    "reason",
    "frowned",
    "upon",
    "ca",
    "tell",
    "came",
    "imported",
    "module",
    "problems",
    "find",
    "index",
    "function",
    "might",
    "try",
    "track",
    "function",
    "came",
    "defined",
    "asteris",
    "obvious",
    "came",
    "module",
    "imported",
    "instead",
    "go",
    "back",
    "importing",
    "directly",
    "basically",
    "importing",
    "everything",
    "asteris",
    "makes",
    "harder",
    "track",
    "problems",
    "better",
    "way",
    "okay",
    "import",
    "module",
    "know",
    "find",
    "module",
    "pass",
    "file",
    "path",
    "tell",
    "python",
    "find",
    "module",
    "found",
    "way",
    "works",
    "import",
    "module",
    "checks",
    "multiple",
    "locations",
    "locations",
    "checks",
    "within",
    "list",
    "called",
    "cy",
    "paath",
    "actually",
    "see",
    "list",
    "import",
    "cis",
    "module",
    "import",
    "cis",
    "comment",
    "two",
    "print",
    "statements",
    "let",
    "print",
    "sis",
    "paath",
    "run",
    "list",
    "directories",
    "machine",
    "python",
    "looks",
    "modules",
    "run",
    "import",
    "looks",
    "order",
    "first",
    "value",
    "directory",
    "currently",
    "running",
    "script",
    "module",
    "python",
    "file",
    "importing",
    "within",
    "directory",
    "also",
    "found",
    "okay",
    "directories",
    "added",
    "cy",
    "paath",
    "list",
    "directories",
    "get",
    "added",
    "order",
    "first",
    "directory",
    "containing",
    "script",
    "running",
    "directory",
    "running",
    "script",
    "first",
    "value",
    "cy",
    "paath",
    "always",
    "import",
    "modules",
    "directory",
    "next",
    "adds",
    "directories",
    "listed",
    "python",
    "p",
    "path",
    "environment",
    "variable",
    "talk",
    "python",
    "path",
    "environment",
    "variable",
    "minute",
    "python",
    "path",
    "adds",
    "standard",
    "library",
    "directories",
    "import",
    "modules",
    "standard",
    "library",
    "lastly",
    "adds",
    "site",
    "packages",
    "direct",
    "directory",
    "packages",
    "look",
    "first",
    "let",
    "see",
    "looks",
    "like",
    "module",
    "want",
    "import",
    "directory",
    "script",
    "trying",
    "import",
    "going",
    "move",
    "module",
    "importing",
    "directory",
    "directory",
    "desktop",
    "got",
    "finder",
    "pulled",
    "going",
    "drag",
    "module",
    "modules",
    "directory",
    "desktop",
    "module",
    "trying",
    "import",
    "completely",
    "different",
    "location",
    "machine",
    "go",
    "back",
    "script",
    "try",
    "run",
    "see",
    "get",
    "eror",
    "module",
    "found",
    "module",
    "named",
    "module",
    "couple",
    "approaches",
    "take",
    "first",
    "actually",
    "manually",
    "add",
    "directory",
    "cy",
    "paath",
    "list",
    "cy",
    "path",
    "list",
    "like",
    "looking",
    "treat",
    "like",
    "one",
    "try",
    "import",
    "module",
    "could",
    "add",
    "directory",
    "cy",
    "paath",
    "going",
    "import",
    "top",
    "try",
    "import",
    "module",
    "say",
    "sis",
    "paath",
    "append",
    "location",
    "machine",
    "probably",
    "going",
    "different",
    "location",
    "mine",
    "uh",
    "users",
    "desktop",
    "dmy",
    "modules",
    "believe",
    "need",
    "dash",
    "beginning",
    "well",
    "save",
    "run",
    "see",
    "appended",
    "directory",
    "cy",
    "path",
    "able",
    "import",
    "module",
    "run",
    "code",
    "best",
    "looking",
    "approach",
    "pending",
    "directory",
    "imports",
    "also",
    "import",
    "module",
    "manually",
    "hardcoded",
    "multiple",
    "locations",
    "change",
    "instead",
    "make",
    "change",
    "next",
    "place",
    "cis",
    "path",
    "looks",
    "remember",
    "python",
    "path",
    "environment",
    "variable",
    "changing",
    "environment",
    "variables",
    "different",
    "mac",
    "windows",
    "show",
    "really",
    "quick",
    "first",
    "see",
    "mac",
    "going",
    "pull",
    "terminal",
    "set",
    "environment",
    "variables",
    "adding",
    "bashore",
    "profile",
    "file",
    "home",
    "directory",
    "edit",
    "file",
    "text",
    "editor",
    "going",
    "use",
    "one",
    "built",
    "terminal",
    "called",
    "nano",
    "since",
    "nano",
    "easy",
    "anyone",
    "use",
    "going",
    "say",
    "nano",
    "tilda",
    "dash",
    "makes",
    "sure",
    "working",
    "within",
    "home",
    "directory",
    "say",
    "bashore",
    "profile",
    "might",
    "stuff",
    "file",
    "personal",
    "preferences",
    "customizations",
    "going",
    "scroll",
    "end",
    "file",
    "set",
    "python",
    "path",
    "set",
    "anywhere",
    "file",
    "like",
    "going",
    "set",
    "saying",
    "export",
    "python",
    "path",
    "uppercase",
    "equals",
    "want",
    "set",
    "location",
    "going",
    "come",
    "grab",
    "location",
    "paste",
    "quotes",
    "want",
    "look",
    "like",
    "space",
    "equals",
    "path",
    "save",
    "hit",
    "contr",
    "x",
    "save",
    "enter",
    "keep",
    "file",
    "name",
    "either",
    "restart",
    "terminal",
    "run",
    "source",
    "command",
    "file",
    "restart",
    "terminal",
    "pull",
    "run",
    "python",
    "let",
    "see",
    "import",
    "module",
    "import",
    "module",
    "see",
    "worked",
    "reason",
    "worked",
    "import",
    "cis",
    "look",
    "cy",
    "paath",
    "see",
    "current",
    "directory",
    "directory",
    "added",
    "reason",
    "added",
    "added",
    "python",
    "path",
    "environment",
    "variable",
    "let",
    "take",
    "look",
    "set",
    "environment",
    "variable",
    "windows",
    "set",
    "environment",
    "variable",
    "windows",
    "click",
    "start",
    "button",
    "rightclick",
    "computer",
    "go",
    "properties",
    "properties",
    "want",
    "go",
    "advanced",
    "system",
    "settings",
    "bottom",
    "click",
    "environment",
    "variables",
    "create",
    "new",
    "environment",
    "variable",
    "click",
    "new",
    "name",
    "python",
    "path",
    "uppercase",
    "location",
    "going",
    "c",
    "going",
    "go",
    "desktop",
    "uh",
    "specific",
    "desktop",
    "may",
    "little",
    "bit",
    "different",
    "corey",
    "ms",
    "desktop",
    "name",
    "directory",
    "modules",
    "python",
    "path",
    "going",
    "unique",
    "unque",
    "machine",
    "let",
    "hit",
    "okay",
    "okay",
    "save",
    "exit",
    "open",
    "command",
    "prompt",
    "going",
    "start",
    "run",
    "cmd",
    "typing",
    "python",
    "able",
    "import",
    "module",
    "saying",
    "import",
    "module",
    "run",
    "see",
    "imported",
    "module",
    "successfully",
    "reason",
    "worked",
    "import",
    "cis",
    "look",
    "cy",
    "path",
    "current",
    "directory",
    "see",
    "directory",
    "added",
    "python",
    "path",
    "second",
    "one",
    "looks",
    "add",
    "environment",
    "variable",
    "windows",
    "switch",
    "back",
    "native",
    "os",
    "want",
    "point",
    "using",
    "editor",
    "like",
    "sublime",
    "tex",
    "eclipse",
    "pycharm",
    "may",
    "need",
    "environment",
    "variables",
    "set",
    "different",
    "way",
    "different",
    "every",
    "program",
    "instead",
    "going",
    "individual",
    "one",
    "showing",
    "uh",
    "likely",
    "find",
    "searching",
    "editor",
    "plus",
    "python",
    "path",
    "plenty",
    "resources",
    "showing",
    "okay",
    "going",
    "back",
    "cy",
    "path",
    "directories",
    "python",
    "path",
    "environment",
    "variable",
    "looked",
    "uh",
    "cy",
    "paath",
    "looks",
    "standard",
    "library",
    "directories",
    "allows",
    "us",
    "import",
    "modules",
    "directly",
    "standard",
    "library",
    "something",
    "part",
    "standard",
    "library",
    "means",
    "able",
    "use",
    "without",
    "installing",
    "anything",
    "separate",
    "standard",
    "library",
    "incredibly",
    "useful",
    "performing",
    "common",
    "task",
    "likely",
    "someone",
    "already",
    "written",
    "functionality",
    "use",
    "standard",
    "library",
    "sure",
    "written",
    "best",
    "programmers",
    "world",
    "optimized",
    "performant",
    "possible",
    "say",
    "try",
    "write",
    "versions",
    "things",
    "uh",
    "get",
    "practice",
    "far",
    "using",
    "functionality",
    "production",
    "probably",
    "good",
    "idea",
    "use",
    "tried",
    "true",
    "standard",
    "library",
    "example",
    "let",
    "say",
    "wanted",
    "grab",
    "random",
    "value",
    "list",
    "values",
    "could",
    "probably",
    "write",
    "something",
    "functionality",
    "already",
    "available",
    "us",
    "use",
    "random",
    "module",
    "standard",
    "library",
    "let",
    "go",
    "ahead",
    "take",
    "look",
    "get",
    "rid",
    "everything",
    "clean",
    "except",
    "courses",
    "list",
    "random",
    "module",
    "part",
    "standard",
    "library",
    "say",
    "import",
    "random",
    "wanted",
    "grab",
    "random",
    "value",
    "courses",
    "list",
    "could",
    "say",
    "random",
    "course",
    "equal",
    "random",
    "choice",
    "pass",
    "course",
    "list",
    "print",
    "random",
    "course",
    "run",
    "see",
    "gave",
    "us",
    "random",
    "value",
    "run",
    "multiple",
    "times",
    "see",
    "gives",
    "us",
    "random",
    "value",
    "every",
    "time",
    "run",
    "going",
    "go",
    "functionality",
    "standard",
    "library",
    "create",
    "future",
    "video",
    "go",
    "modules",
    "depth",
    "right",
    "want",
    "give",
    "idea",
    "available",
    "us",
    "useful",
    "standard",
    "library",
    "modules",
    "need",
    "perform",
    "common",
    "mathematical",
    "operations",
    "import",
    "math",
    "module",
    "mathematic",
    "calculations",
    "needed",
    "convert",
    "90",
    "dees",
    "radians",
    "could",
    "say",
    "rads",
    "equal",
    "math",
    "radians",
    "pass",
    "90",
    "print",
    "rads",
    "run",
    "see",
    "get",
    "conversion",
    "wanted",
    "get",
    "sign",
    "value",
    "could",
    "pass",
    "radians",
    "sign",
    "method",
    "say",
    "math",
    "sign",
    "pass",
    "radians",
    "run",
    "see",
    "one",
    "sign",
    "okay",
    "another",
    "useful",
    "module",
    "standard",
    "library",
    "datetime",
    "module",
    "allows",
    "us",
    "work",
    "dates",
    "times",
    "let",
    "also",
    "go",
    "ahead",
    "import",
    "calendar",
    "module",
    "similar",
    "ilities",
    "also",
    "different",
    "example",
    "wanted",
    "today",
    "date",
    "could",
    "say",
    "today",
    "equal",
    "date",
    "time",
    "dat",
    "today",
    "print",
    "run",
    "see",
    "gives",
    "us",
    "today",
    "date",
    "calendar",
    "module",
    "ask",
    "example",
    "2017",
    "leap",
    "year",
    "could",
    "print",
    "say",
    "calendar",
    "leap",
    "pass",
    "2017",
    "run",
    "see",
    "false",
    "instead",
    "change",
    "2020",
    "run",
    "see",
    "true",
    "last",
    "standard",
    "library",
    "module",
    "look",
    "os",
    "module",
    "import",
    "os",
    "going",
    "give",
    "us",
    "access",
    "underlying",
    "operating",
    "system",
    "example",
    "wanted",
    "see",
    "directory",
    "currently",
    "script",
    "could",
    "print",
    "os",
    "cwd",
    "current",
    "working",
    "directory",
    "run",
    "see",
    "prints",
    "current",
    "working",
    "directory",
    "script",
    "located",
    "module",
    "ton",
    "functionality",
    "gives",
    "us",
    "ability",
    "scan",
    "file",
    "system",
    "create",
    "files",
    "delete",
    "files",
    "see",
    "standard",
    "library",
    "modules",
    "provide",
    "ton",
    "functionality",
    "might",
    "tricky",
    "take",
    "forever",
    "us",
    "write",
    "python",
    "comes",
    "ton",
    "stuff",
    "available",
    "us",
    "makes",
    "super",
    "easy",
    "get",
    "imported",
    "running",
    "another",
    "great",
    "thing",
    "python",
    "modules",
    "python",
    "files",
    "view",
    "location",
    "module",
    "printing",
    "dunder",
    "file",
    "method",
    "dunder",
    "file",
    "attribute",
    "sorry",
    "print",
    "os",
    "dunder",
    "file",
    "dunder",
    "means",
    "two",
    "underscores",
    "worry",
    "double",
    "underscores",
    "topic",
    "future",
    "video",
    "run",
    "see",
    "prints",
    "location",
    "file",
    "file",
    "system",
    "open",
    "python",
    "directory",
    "file",
    "lives",
    "could",
    "see",
    "entire",
    "standard",
    "library",
    "actually",
    "open",
    "right",
    "let",
    "open",
    "real",
    "quick",
    "actually",
    "open",
    "python",
    "36",
    "directory",
    "entire",
    "standard",
    "library",
    "lives",
    "know",
    "may",
    "little",
    "small",
    "see",
    "screen",
    "um",
    "let",
    "go",
    "ahead",
    "look",
    "couple",
    "files",
    "alphabetical",
    "order",
    "one",
    "first",
    "files",
    "standard",
    "library",
    "actually",
    "module",
    "kind",
    "joke",
    "python",
    "community",
    "module",
    "import",
    "called",
    "open",
    "web",
    "comic",
    "machine",
    "even",
    "though",
    "part",
    "standard",
    "library",
    "open",
    "module",
    "see",
    "exactly",
    "done",
    "see",
    "basically",
    "imports",
    "web",
    "browser",
    "module",
    "opens",
    "web",
    "browser",
    "page",
    "know",
    "people",
    "probably",
    "going",
    "curious",
    "comic",
    "let",
    "go",
    "ahead",
    "import",
    "back",
    "intro",
    "delete",
    "everything",
    "import",
    "run",
    "file",
    "see",
    "opens",
    "web",
    "browser",
    "comic",
    "leave",
    "open",
    "close",
    "get",
    "chance",
    "afraid",
    "go",
    "standard",
    "library",
    "look",
    "around",
    "different",
    "things",
    "done",
    "um",
    "great",
    "way",
    "learn",
    "going",
    "lie",
    "definitely",
    "complicated",
    "code",
    "surprised",
    "much",
    "understand",
    "poke",
    "around",
    "bit",
    "okay",
    "think",
    "going",
    "video",
    "go",
    "far",
    "series",
    "covered",
    "lot",
    "fundamentals",
    "working",
    "python",
    "learned",
    "different",
    "data",
    "types",
    "conditionals",
    "loops",
    "functions",
    "importing",
    "modules",
    "bit",
    "standard",
    "library",
    "think",
    "anyone",
    "would",
    "agree",
    "matter",
    "specialty",
    "plan",
    "going",
    "python",
    "whether",
    "web",
    "development",
    "data",
    "science",
    "building",
    "desktop",
    "applications",
    "matter",
    "route",
    "decide",
    "take",
    "going",
    "need",
    "fundamentals",
    "covered",
    "point",
    "understand",
    "fundamentals",
    "next",
    "topics",
    "learn",
    "jump",
    "learning",
    "objectoriented",
    "programming",
    "python",
    "learn",
    "work",
    "files",
    "file",
    "data",
    "start",
    "learning",
    "web",
    "framework",
    "basically",
    "anything",
    "want",
    "going",
    "keep",
    "adding",
    "additional",
    "videos",
    "onto",
    "playlist",
    "believe",
    "good",
    "progression",
    "continue",
    "learn",
    "python",
    "videos",
    "wo",
    "numbered",
    "anymore",
    "video",
    "reason",
    "want",
    "give",
    "impression",
    "watch",
    "one",
    "understanding",
    "others",
    "want",
    "numbered",
    "make",
    "feel",
    "like",
    "understand",
    "virtual",
    "environments",
    "learning",
    "work",
    "file",
    "objects",
    "something",
    "like",
    "skip",
    "around",
    "depending",
    "wanting",
    "learn",
    "hope",
    "makes",
    "sense",
    "anyone",
    "questions",
    "covered",
    "video",
    "feel",
    "free",
    "ask",
    "comment",
    "section",
    "best",
    "answer",
    "enjoy",
    "tutorials",
    "would",
    "like",
    "support",
    "several",
    "ways",
    "easiest",
    "way",
    "simply",
    "like",
    "video",
    "give",
    "thumbs",
    "also",
    "huge",
    "help",
    "share",
    "videos",
    "anyone",
    "think",
    "would",
    "find",
    "useful",
    "memes",
    "contribute",
    "patreon",
    "link",
    "page",
    "description",
    "section",
    "sure",
    "subscribe",
    "future",
    "videos",
    "thank",
    "watching"
  ],
  "keywords": [
    "going",
    "video",
    "learning",
    "import",
    "modules",
    "start",
    "importing",
    "bit",
    "standard",
    "library",
    "lot",
    "module",
    "called",
    "within",
    "print",
    "also",
    "test",
    "variable",
    "set",
    "function",
    "find",
    "index",
    "list",
    "looking",
    "see",
    "value",
    "um",
    "one",
    "let",
    "say",
    "want",
    "use",
    "uh",
    "intro",
    "file",
    "working",
    "courses",
    "course",
    "actually",
    "directory",
    "able",
    "directly",
    "code",
    "variables",
    "like",
    "run",
    "imported",
    "okay",
    "instead",
    "name",
    "first",
    "grab",
    "wanted",
    "could",
    "equal",
    "pass",
    "go",
    "ahead",
    "math",
    "works",
    "using",
    "multiple",
    "throughout",
    "script",
    "might",
    "get",
    "take",
    "typing",
    "make",
    "example",
    "save",
    "still",
    "something",
    "way",
    "gives",
    "us",
    "access",
    "everything",
    "would",
    "change",
    "add",
    "reason",
    "try",
    "back",
    "makes",
    "path",
    "python",
    "cy",
    "paath",
    "cis",
    "directories",
    "machine",
    "looks",
    "running",
    "added",
    "environment",
    "look",
    "desktop",
    "different",
    "location",
    "probably",
    "need",
    "windows",
    "terminal",
    "anyone",
    "current",
    "system",
    "open",
    "os",
    "useful",
    "functionality",
    "random",
    "give",
    "radians",
    "sign",
    "today",
    "files",
    "dunder",
    "web",
    "learn",
    "videos"
  ]
}