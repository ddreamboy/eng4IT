{
  "text": "Transfer learning has become quite\npopular in the\nfield of image classification and\nNatural Language Processing.\nHere we take a pre-trained model and\nthen we try to retrain it for\nthe new problem. So if you remember from\nour data augmentation tutorial,\nwe had flowers dataset where we are\ntrying to classify\nfive type of flowers. So in this video we\nwill use\na Mobilenet pre-trained model from\nGoogle's Tensorflow hub and\nwe will use that pre-trained model to\nclassify our flowers dataset and you\nwill see that\npreviously it used to take many epochs\nto train the complete model and achieve\nhigh accuracy.\nIn this case using a pre-trained model\nit takes only like two or five iteration\nor\nepochs to get a superb accuracy.\nSo using transfer learning saves lot\nof computation\npower because many times these\npre-trained models that\nyou can get from places like Tensorflow\nhub\nthey are trained on millions of images.\nIf you try to train that model on your\ncomputer it might take\ndays or even months. But all you're doing\nis you're taking that\npre-trained model, you're getting\nall the weights and everything and then\nyou kind of change only the last layer\nor last few layers for your new problem\nand then uh you can get a superb high\naccuracy\nuh with this kind of approach. So let's\nget started we'll go over some theory\nand then we'll uh do coding.\nThis is Wikipedia's definition of\nTransfer Learning which is\nyou focus on storing knowledge gained\nwhile solving one problem and apply it\nto a different\nbut related problem. For example if you\nhave a model that can recognize cars\nit can be used to recognize trucks as\nwell because the basic features,\nfor example the tires, the steering wheel\nand some of the components between cars\nand trucks will be still\nsimilar. So you can use this knowledge of\nthis visual world\nto transfer that knowledge into solving\na different problem.\nIn today's coding problem what we are\ngoing to do is\nwe will take a Google's trained\nMobilenet V2 model which is trained on\n1.4 million images\nand total thousand classes. So this is a\ndeep learning model that is trained at\nGoogle\nit would have taken a long time and a\nlot of computational resources\nyou can see 1.5 4 million images is\npretty huge dataset\nand the output is 1000 classes and these\nclasses are little diverse you know. You\nhave a goldfish,\nshark, some animals then some\nHammerhead military uniform so you have\nit's not just the animals it's animals\nand some other objects total thousand\nclasses\nand when this model is trained\nit will have input layer, then some deep\nlayers and\nhidden layers in between then in the end\nyou have a softmax layer\nwhich is just you know classifying it\ninto thousand categories.\nIn deep learning what happens is\nwe freeze all the layers except the last\none.\nSo you know all these layers that you\nsee, we will freeze it\nand then we'll use this model to\nclassify flowers\nwhich could be one of the five flower\ntypes which I have shown here\nand we are going to use same dataset\nthat we use in our data eggman\naugmentation tutorial.\nSo when you freeze this layer what\nhappens is\nthe model weights don't change. So now\nwhen I'm performing my training,\nso by the way you take the model and\nthen you still have to perform the\ntraining that's very important.\nBut when you're performing a training\nthe\nthe weights in these frozen layers are\nnot changing.\nSo it almost you know looks like a\ncon equation. So you are having this one\nbig non-linear equation so you are\npassing\nyour flower and this is a training phase,\nand then during using this weight\nyou will get a feature vector. You are\nalmost doing a feature engineering\nand then you use soft mix\nto classify into five classes instead of\nthousand.\nSo I hope you get an idea that you're\nalmost generating the\nfeatures feature vector using this\nfrozen layers. So during the training\nnone of the weights nothing changes\nokay, and omitting the last layer\nis a very common approach in some\napproaches they also\nfreeze only let's say three layers or\ntwo layers and remaining layers\nuh go through the usual neural network\ntraining okay?\nSo we're going to now uh do a python\ncoding\nuh to use Mobilenet\nV2 model and then use it to classify the\nflowers. We will download a pre-trained\nmodel from a place called Tensorflow hub.\nSo Google has come up with this\nTensorflow hub where you can\nget an access of different pre-trained\nmodels.\nSo right now for tax domain problems\nthey have all these models, for example\nfor embedding they have 176 models,\nfor image classification they have 188\nmodels.\nSo these are like pre-trained models\nwhich are trained on a\nhuge dataset which you can import and\ndirectly use it.\nFor video also see they have some video\nand audio so they have some problem.\nSo if I look at image classification\nhere there is this model called\nMobilenet V2 okay?\nSo this is the model we are going to use\nso this model as I said is\ntrained on 1.4 million\nuh images and 1000 different classes,\nand the image is like 2224 by 224.\nyou know it is that dimension.\nSo now here in my jupyter notebook I\nhave imported\nall essential libraries,\nand the first thing I am going to do\nis create is basically import that\nMobilenet V2 classification model. So\nthis is how we import it.\nSo I have imported Tensorflow\nhub now this doesn't come with your\nregular tensorflow\ninstallation you have to install it\nseparately. So make sure you run pip\ninstall Tensorflow hub\notherwise it will give you model not\nfound error.\nHere I am creating a classifier\ndirectly using this particular\nMobilenet. So if you look at\nsee so you have to give this this\nparticular string\nor you know they have a code snippet. So\nyou just copy that\nand by the way I have uh used some of\nthe code\nfrom Tensorflow uh official tutorial. So\nthanks Tensorflow credit goes to you.\nBut I have made it little simpler,\nyou know so I have I have omitted the\nthings which are not needed.\nSo it is I have done some customization,\nso now here\nthe image shape you know the image shape\nas you saw\nwas 225 4 by 224,\nso you need to give\ntwo to four, two to four\nand I'm adding the third dimension for\nthe channel. So\nwhat happens is when you do this in\nnumpy\nokay let me just import it it will\njust make it 224 by 224 by 3\nokay? So whenever it comes up you see\nthat\nso that is the input shape I am giving\nand once you do that\nsee you have the the model ready only.\nSo now if you want to classify among\nthose thousand classes okay, so let me\nopen the file that I have\nso here in my\ncurrent project directory I have\ndownloaded the\nthose thousand classes and if I open\nthat file these are the classes see\ntotal thousand classes and uh\ngoldfish is one of the class. So I'm like\nokay let me\ntry to classify goldfish. So I downloaded\ngoldfish\npicture and I'm going to\nuse this model to classify that. So\nI have imported a pillow model and image\nfrom that,\nand you know you can just say image.\nopen\nthe file name is gold\ngoldfish\nthis is how the image looks but we have\nto resize it to\n224. So I will just say resize\nto image shape,\nand I will just\nstore it here\nokay? So it's a smaller image now and let\nme try to\nclassify this image. So now before you\nclassify it you have to\nuh scale it you've seen in all of our\nprevious tutorials that\nbefore giving it for classification or\ntraining,\nwe always scale or normalize the image\nand how do you do that.\nWell the the color scale is 0 to 255 so\nyou divide it by 255.\nSo see here I'm dividing it by 255\nand when you do that uh the value of\ngoldfish\nis like like if you look at just this\narray,\nsee now these values are in between zero\nand one range\nokay? I'm gonna do one more thing\nwhich is see when you do something like\nthis,\nwhat you're doing is you are changing\nyou are adding uh\none more dimension which is one, and the\nreason I am doing it is because\nwhen you do prediction you know\nprediction accepts\nmultiple image as an input. You cannot\nhave like only one image\nas an input so that is the only reason I\nam doing it. So now I can do classifier\npredict\nlike this so now uh\nyou have a total thousand classes okay?\nSo this is making a prediction for each\nclasses, each class like zero classes\nthis probability one class has this\nprobability and so on.\nSo here I am going to store this in less\na result\nand let's look at result.shape\nit's thousand okay? Now\nI need to get the max. So when you do np\n.arg max from result\nit will give you the value the index\nwhich has a maximum value\nand if you notice previously say it's\nvery upfront\n0,1,2\nsee this has a this has a bigger value\nat least in this view\n9. So that's what it is giving you. Now\nhow do I know which class\n9 is? Well uh if you look at\nthe just a second if you look at our\nimage labels two classes goldfish\nokay, so it's very clear but just to make\nit proper\nhere what I will do is I will\nuh open this file so I will just say\nwith\nopen okay with open what\nwell this particular file\nas f and f.read will read the files\nand when you do split lines it will\nsplit the lines,\nand you want to store this into an array\ncalled image labels\nokay? So image label is nothing but\na label array and if you look at\nthese labels you will find that now you\nare having those\nthousand classification labels, and if\nyou supply your predicted label\nindex you get a goldfish here.\nSo this looks good so far.\nWe used pre-trained model and we just\ndid classification straight away\nthis is like you know almost loading a\npickled model and doing a classification.\nNow we want to do a classification for\nour flowers dataset\nand you can download flowers dataset by\nrunning this command.\nNow we have done data augmentation\ntutorial on this flower dataset before\nin the previous video\nand majority of the code is same. That's\nwhy I'm not going into too much details.\nBut if you check this code here all\nyou're doing is\ndownloading this zip file of all the\nflowers from\nGoogle website this is how you\nyou you download it and if you look at\ndata directory\nthe directory is dot means local\ndirectory that has data set folder that\nhas flower photos.\nSo if you look at our folder\nsee dataset folder has flower photos\nand that has all five flowers. So daisy\nwill have daisy flowers\nsee daisy will have daisy, roses will\nhave resist flower and so on. So let's\nuh use a pathlib\ndirect path lib python module to convert\nthis path this is a string path all I'm\ndoing is converting it into windows path.\nNow why am I doing it? Well so that\nI can do functions like this\nso when I have Windows path and if I do\nstar.jpg\nit will go recursively into all the\ndirectories\nand get me the file path of individual\nimages,\nand those paths will be needed and if\nyou look at image count\nwe have these many images and now I am\ngoing to get all the roses images so\nfrom data directory I am saying go to\nroses folder,\nroses folder and star means get me all\nthe files,\nand that file path you are getting in\nthis roses' is\nour directory our roses are list\nokay? Let's try opening some files\nyou know. So I'm using this image is a\npillow library so you can use this code\nto\nopen first row's image, second row's image\nand so on\nsee similar thing you can do with\nTulips. So if I let's say supply Tulips\nhere\nand what is this Tulips? Tulips is the\nname of the folder\nyou see Tulips here is a name of the\nfolder and if you do that\nyou get all this Tulips and if you\nopen some Tulips images Tu lip s\nso you get all this beautiful looking\nimages. Now I'm going to conver\nmake a python dictionary so that the key\nof the dictionary is the flower name,\nand the value is the list of images.\nSo in this dictionary now if I do roses\nthis will give me a pile path of all\nrose images.\nSimilarly Tulips gives me all Tulips\nimages\nokay? We have we have seen all of this in\nprevious videos so you should be aware\nand I'm creating a label directory as\nwell\nbecause machine learning module doesn't\nunderstand text. So you need to say okay\nroses is 0, daisy is 1 and so on.\nNow if you um look at let's say any\nparticular file\npath it looks something like this, and\nthis you can now\nread into opencv. So cv2 is opencv model\nwhich I have imported at the top,\nand I am saying iamread which means\nimage read\nand this thing is same as this. So I'm\nlet's say\nreading one image and if you look at\nimage path\nyou know image paths are image shape\nsorry\nimage shapes are different. So I need to\nresize it\nbecause I want to in before training\nyour model\nyou need to make sure all images are of\nsame size.\nSo here I will\nmake image the same size see this is how\nwe do it.\nSo now I will run a for loop on my\ndictionary and create x and y this is\nsomething again we did in the previous\nvideo that's why I'm not going into\ndetail.\nBut if you this code is very simple\nyou're going through your\nthis particular dictionary, for each rose\nyou're going through each images. So\ngoing through each image is a second for\nloop,\nthen you read image one by one then you\nresize it\nand you append the resize image to x\nand you append the label you know\nto y.\nSo if you look at x of zero it's a three\ndimensional array\nof between 0 and 255. But we saw in\nprevious videos that\nbefore doing image classification\ntraining we have to divide it by\n255 so that it can scale.\nSee if you do that it will bring it\nbring the value to 0 to 1.\nAnd if you want to do it on the entire\ndataset\nthis is a numpy is so convenient,\nyou can um\nconvert first into numpy array then we'll\ndivide it into 255.\nSo let's do train test\nsplit first. This is a standard code we\nhave seen in enough video so it doesn't\nneed any explanation,\nand then we can divide it divide\nthese images by 255. So\nwhen I look at this thing\nyou know it's it's in this range 0 to\n255.\nNow I want to use that pre-trained model\nand classify some of these images. So\nlet's say first one is daisy,\nthe second one is a beautiful rose,\nthe third image is let's say\nagain it's another rose. So let's try to\nuse our classifier to predict this model.\nSo this classifier is what? Well we saw\npreviously,\nit is our pre-trained model that we\nimported from Tensorflow hub you know\nready-made model,\nand I can now predict x of 0.\nBut you know this takes numpy array. So\nyou have to\ngive numpy array I will\nI will give x of 0, x of 1,\nand x of 2\nokay,\nand it return this um\narray of predicted arrays. So I will\nstore it in predicted\nand then I can do an argmax\narg mix will give you the maximum\nargument and what it is saying is\nthe first flower this flower is 7 9 95\nthis flower is 880 the third flower is\n795.\nSo what is 795? Well we had our image\nlevels remember\nin that if you supply 795\nit's saying this is a flower curtain.\nMaybe on Mobilenet when\nwhen Google trained it maybe if some\nshower curtain had this flower\npattern that's why it is saying. Even 795\nthat\nthis image is also saying it's a flower\ncurtain\nand 880 what is 880? So\nwhat is this?\nOh this it is predicting as umbrella. So\nyou see\nyou cannot here use your ready-made\nmodel\nbecause ready-made model only has daisy\nas a flower. It even doesn't have all\nthese\nor four different flowers. So\nit's gonna make some random guess out of\nthose\nthousand classes, thousand meaning all\nthese classes.\nAnd by the way this file and this\nnotebook everything is in available in\nvideo description below.\nSo make sure you download this from my\nGithub.\nNow I'm going to retrain this model\nand here I have a feature extractor\nmodel.\nSo how is it different than the previous\none?\nSo previously if you remember look at it\nthis whole path is same the only thing I\nhave classification here,\nhere I have feature vector. So this\ngives the same model as the previous one\nexcept the last layer.\nSo if you look at our presentation\nyou know this is the whole model but\nfrom that model\nyou want to take only the layers which\ndoesn't include the last layer,\nand all these layers excluding last\nlayer\nis given by this feature vector.\nSo you can now create a model\nlike this: so again I'm using Tensorflow\nhub\ncreating Keraslayer and passing this\nURL here\ninput shape is standard shape, this is an\nimportant parameter. You are saying\ntrainable false which means freeze.\nSee freeze means do not train. So when\nnow you perform a training\nall those layers will have their fixed\nweights,\nand then I can create my model like this.\nSo I am putting\nthat that ready-made model\nand then creating the last layer which\nis that\nthe classification of five flowers. See,\nso only last layer is mine the previous\nlayers are\nare already trained,\nand then I will run only five epochs by\nthe way.\nSo these parameters are standard Adam,\nSparse category, cross entropy, etc.,\nand I am now running only five epochs.\nNow if you remember from our data\naugmentation tutorial,\nto train the same model with CNN\npreviously it took us you know 30 epochs.\nIn 30 epochs we got 85% accuracy.\nNow check this- in second epoch you got\n85%\naccuracy so you can see that\ndeep learning training is very expensive.\nWhen you run so many trainings uh so\nmany epochs\nyour GPU, CPU your electricity power is\nburnt.\nYou might get a big electricity bill,\nbut with transfer learning\nyou can save all that computation time.\nIt is not just the bill\nsometimes when you're building a\ntraining a big model, it might take you\ndays,\nweeks or months. But with pre-trained\nmodel\nyou can retrain it for your problem\nso much easily and let's look at the\nthe performance of our test dataset-\nthat is also very good 85 percent.\nSo this is the reason why transfer\nlearning is\nso popular in computer vision and nature\nlanguage processing.\nIf you are solving any computer vision\nor NLP problem\ntry to see if you can use transfer\nlearning. If you cannot then only try to\nbuild the model from scratch.\nI hope you like this video the notebook\nand other\nlinks are available in the video\ndescription below so make sure you check\nit,\nand make sure you watch all these videos\nin this deep learning series.\nI have a separate tutorial series on\nmachine learning\npython, I'm doing python projects as well\nnowadays so if you want to learn python\nor small projects. I have a complete\nplaylist on\nvariety of projects as well. So make sure\nyou check it out,\nand thank you for watching! Goodbye!\n",
  "words": [
    "transfer",
    "learning",
    "become",
    "quite",
    "popular",
    "field",
    "image",
    "classification",
    "natural",
    "language",
    "processing",
    "take",
    "model",
    "try",
    "retrain",
    "new",
    "problem",
    "remember",
    "data",
    "augmentation",
    "tutorial",
    "flowers",
    "dataset",
    "trying",
    "classify",
    "five",
    "type",
    "flowers",
    "video",
    "use",
    "mobilenet",
    "model",
    "google",
    "tensorflow",
    "hub",
    "use",
    "model",
    "classify",
    "flowers",
    "dataset",
    "see",
    "previously",
    "used",
    "take",
    "many",
    "epochs",
    "train",
    "complete",
    "model",
    "achieve",
    "high",
    "accuracy",
    "case",
    "using",
    "model",
    "takes",
    "like",
    "two",
    "five",
    "iteration",
    "epochs",
    "get",
    "superb",
    "accuracy",
    "using",
    "transfer",
    "learning",
    "saves",
    "lot",
    "computation",
    "power",
    "many",
    "times",
    "models",
    "get",
    "places",
    "like",
    "tensorflow",
    "hub",
    "trained",
    "millions",
    "images",
    "try",
    "train",
    "model",
    "computer",
    "might",
    "take",
    "days",
    "even",
    "months",
    "taking",
    "model",
    "getting",
    "weights",
    "everything",
    "kind",
    "change",
    "last",
    "layer",
    "last",
    "layers",
    "new",
    "problem",
    "uh",
    "get",
    "superb",
    "high",
    "accuracy",
    "uh",
    "kind",
    "approach",
    "let",
    "get",
    "started",
    "go",
    "theory",
    "uh",
    "coding",
    "wikipedia",
    "definition",
    "transfer",
    "learning",
    "focus",
    "storing",
    "knowledge",
    "gained",
    "solving",
    "one",
    "problem",
    "apply",
    "different",
    "related",
    "problem",
    "example",
    "model",
    "recognize",
    "cars",
    "used",
    "recognize",
    "trucks",
    "well",
    "basic",
    "features",
    "example",
    "tires",
    "steering",
    "wheel",
    "components",
    "cars",
    "trucks",
    "still",
    "similar",
    "use",
    "knowledge",
    "visual",
    "world",
    "transfer",
    "knowledge",
    "solving",
    "different",
    "problem",
    "today",
    "coding",
    "problem",
    "going",
    "take",
    "google",
    "trained",
    "mobilenet",
    "v2",
    "model",
    "trained",
    "million",
    "images",
    "total",
    "thousand",
    "classes",
    "deep",
    "learning",
    "model",
    "trained",
    "google",
    "would",
    "taken",
    "long",
    "time",
    "lot",
    "computational",
    "resources",
    "see",
    "4",
    "million",
    "images",
    "pretty",
    "huge",
    "dataset",
    "output",
    "1000",
    "classes",
    "classes",
    "little",
    "diverse",
    "know",
    "goldfish",
    "shark",
    "animals",
    "hammerhead",
    "military",
    "uniform",
    "animals",
    "animals",
    "objects",
    "total",
    "thousand",
    "classes",
    "model",
    "trained",
    "input",
    "layer",
    "deep",
    "layers",
    "hidden",
    "layers",
    "end",
    "softmax",
    "layer",
    "know",
    "classifying",
    "thousand",
    "categories",
    "deep",
    "learning",
    "happens",
    "freeze",
    "layers",
    "except",
    "last",
    "one",
    "know",
    "layers",
    "see",
    "freeze",
    "use",
    "model",
    "classify",
    "flowers",
    "could",
    "one",
    "five",
    "flower",
    "types",
    "shown",
    "going",
    "use",
    "dataset",
    "use",
    "data",
    "eggman",
    "augmentation",
    "tutorial",
    "freeze",
    "layer",
    "happens",
    "model",
    "weights",
    "change",
    "performing",
    "training",
    "way",
    "take",
    "model",
    "still",
    "perform",
    "training",
    "important",
    "performing",
    "training",
    "weights",
    "frozen",
    "layers",
    "changing",
    "almost",
    "know",
    "looks",
    "like",
    "con",
    "equation",
    "one",
    "big",
    "equation",
    "passing",
    "flower",
    "training",
    "phase",
    "using",
    "weight",
    "get",
    "feature",
    "vector",
    "almost",
    "feature",
    "engineering",
    "use",
    "soft",
    "mix",
    "classify",
    "five",
    "classes",
    "instead",
    "thousand",
    "hope",
    "get",
    "idea",
    "almost",
    "generating",
    "features",
    "feature",
    "vector",
    "using",
    "frozen",
    "layers",
    "training",
    "none",
    "weights",
    "nothing",
    "changes",
    "okay",
    "omitting",
    "last",
    "layer",
    "common",
    "approach",
    "approaches",
    "also",
    "freeze",
    "let",
    "say",
    "three",
    "layers",
    "two",
    "layers",
    "remaining",
    "layers",
    "uh",
    "go",
    "usual",
    "neural",
    "network",
    "training",
    "okay",
    "going",
    "uh",
    "python",
    "coding",
    "uh",
    "use",
    "mobilenet",
    "v2",
    "model",
    "use",
    "classify",
    "flowers",
    "download",
    "model",
    "place",
    "called",
    "tensorflow",
    "hub",
    "google",
    "come",
    "tensorflow",
    "hub",
    "get",
    "access",
    "different",
    "models",
    "right",
    "tax",
    "domain",
    "problems",
    "models",
    "example",
    "embedding",
    "176",
    "models",
    "image",
    "classification",
    "188",
    "models",
    "like",
    "models",
    "trained",
    "huge",
    "dataset",
    "import",
    "directly",
    "use",
    "video",
    "also",
    "see",
    "video",
    "audio",
    "problem",
    "look",
    "image",
    "classification",
    "model",
    "called",
    "mobilenet",
    "v2",
    "okay",
    "model",
    "going",
    "use",
    "model",
    "said",
    "trained",
    "million",
    "uh",
    "images",
    "1000",
    "different",
    "classes",
    "image",
    "like",
    "2224",
    "know",
    "dimension",
    "jupyter",
    "notebook",
    "imported",
    "essential",
    "libraries",
    "first",
    "thing",
    "going",
    "create",
    "basically",
    "import",
    "mobilenet",
    "v2",
    "classification",
    "model",
    "import",
    "imported",
    "tensorflow",
    "hub",
    "come",
    "regular",
    "tensorflow",
    "installation",
    "install",
    "separately",
    "make",
    "sure",
    "run",
    "pip",
    "install",
    "tensorflow",
    "hub",
    "otherwise",
    "give",
    "model",
    "found",
    "error",
    "creating",
    "classifier",
    "directly",
    "using",
    "particular",
    "mobilenet",
    "look",
    "see",
    "give",
    "particular",
    "string",
    "know",
    "code",
    "snippet",
    "copy",
    "way",
    "uh",
    "used",
    "code",
    "tensorflow",
    "uh",
    "official",
    "tutorial",
    "thanks",
    "tensorflow",
    "credit",
    "goes",
    "made",
    "little",
    "simpler",
    "know",
    "omitted",
    "things",
    "needed",
    "done",
    "customization",
    "image",
    "shape",
    "know",
    "image",
    "shape",
    "saw",
    "225",
    "4",
    "224",
    "need",
    "give",
    "two",
    "four",
    "two",
    "four",
    "adding",
    "third",
    "dimension",
    "channel",
    "happens",
    "numpy",
    "okay",
    "let",
    "import",
    "make",
    "224",
    "224",
    "3",
    "okay",
    "whenever",
    "comes",
    "see",
    "input",
    "shape",
    "giving",
    "see",
    "model",
    "ready",
    "want",
    "classify",
    "among",
    "thousand",
    "classes",
    "okay",
    "let",
    "open",
    "file",
    "current",
    "project",
    "directory",
    "downloaded",
    "thousand",
    "classes",
    "open",
    "file",
    "classes",
    "see",
    "total",
    "thousand",
    "classes",
    "uh",
    "goldfish",
    "one",
    "class",
    "like",
    "okay",
    "let",
    "try",
    "classify",
    "goldfish",
    "downloaded",
    "goldfish",
    "picture",
    "going",
    "use",
    "model",
    "classify",
    "imported",
    "pillow",
    "model",
    "image",
    "know",
    "say",
    "image",
    "open",
    "file",
    "name",
    "gold",
    "goldfish",
    "image",
    "looks",
    "resize",
    "say",
    "resize",
    "image",
    "shape",
    "store",
    "okay",
    "smaller",
    "image",
    "let",
    "try",
    "classify",
    "image",
    "classify",
    "uh",
    "scale",
    "seen",
    "previous",
    "tutorials",
    "giving",
    "classification",
    "training",
    "always",
    "scale",
    "normalize",
    "image",
    "well",
    "color",
    "scale",
    "0",
    "255",
    "divide",
    "see",
    "dividing",
    "255",
    "uh",
    "value",
    "goldfish",
    "like",
    "like",
    "look",
    "array",
    "see",
    "values",
    "zero",
    "one",
    "range",
    "okay",
    "gon",
    "na",
    "one",
    "thing",
    "see",
    "something",
    "like",
    "changing",
    "adding",
    "uh",
    "one",
    "dimension",
    "one",
    "reason",
    "prediction",
    "know",
    "prediction",
    "accepts",
    "multiple",
    "image",
    "input",
    "like",
    "one",
    "image",
    "input",
    "reason",
    "classifier",
    "predict",
    "like",
    "uh",
    "total",
    "thousand",
    "classes",
    "okay",
    "making",
    "prediction",
    "classes",
    "class",
    "like",
    "zero",
    "classes",
    "probability",
    "one",
    "class",
    "probability",
    "going",
    "store",
    "less",
    "result",
    "let",
    "look",
    "thousand",
    "okay",
    "need",
    "get",
    "max",
    "np",
    "max",
    "result",
    "give",
    "value",
    "index",
    "maximum",
    "value",
    "notice",
    "previously",
    "say",
    "upfront",
    "see",
    "bigger",
    "value",
    "least",
    "view",
    "giving",
    "know",
    "class",
    "9",
    "well",
    "uh",
    "look",
    "second",
    "look",
    "image",
    "labels",
    "two",
    "classes",
    "goldfish",
    "okay",
    "clear",
    "make",
    "proper",
    "uh",
    "open",
    "file",
    "say",
    "open",
    "okay",
    "open",
    "well",
    "particular",
    "file",
    "f",
    "read",
    "files",
    "split",
    "lines",
    "split",
    "lines",
    "want",
    "store",
    "array",
    "called",
    "image",
    "labels",
    "okay",
    "image",
    "label",
    "nothing",
    "label",
    "array",
    "look",
    "labels",
    "find",
    "thousand",
    "classification",
    "labels",
    "supply",
    "predicted",
    "label",
    "index",
    "get",
    "goldfish",
    "looks",
    "good",
    "far",
    "used",
    "model",
    "classification",
    "straight",
    "away",
    "like",
    "know",
    "almost",
    "loading",
    "pickled",
    "model",
    "classification",
    "want",
    "classification",
    "flowers",
    "dataset",
    "download",
    "flowers",
    "dataset",
    "running",
    "command",
    "done",
    "data",
    "augmentation",
    "tutorial",
    "flower",
    "dataset",
    "previous",
    "video",
    "majority",
    "code",
    "going",
    "much",
    "details",
    "check",
    "code",
    "downloading",
    "zip",
    "file",
    "flowers",
    "google",
    "website",
    "download",
    "look",
    "data",
    "directory",
    "directory",
    "dot",
    "means",
    "local",
    "directory",
    "data",
    "set",
    "folder",
    "flower",
    "photos",
    "look",
    "folder",
    "see",
    "dataset",
    "folder",
    "flower",
    "photos",
    "five",
    "flowers",
    "daisy",
    "daisy",
    "flowers",
    "see",
    "daisy",
    "daisy",
    "roses",
    "resist",
    "flower",
    "let",
    "uh",
    "use",
    "pathlib",
    "direct",
    "path",
    "lib",
    "python",
    "module",
    "convert",
    "path",
    "string",
    "path",
    "converting",
    "windows",
    "path",
    "well",
    "functions",
    "like",
    "windows",
    "path",
    "go",
    "recursively",
    "directories",
    "get",
    "file",
    "path",
    "individual",
    "images",
    "paths",
    "needed",
    "look",
    "image",
    "count",
    "many",
    "images",
    "going",
    "get",
    "roses",
    "images",
    "data",
    "directory",
    "saying",
    "go",
    "roses",
    "folder",
    "roses",
    "folder",
    "star",
    "means",
    "get",
    "files",
    "file",
    "path",
    "getting",
    "roses",
    "directory",
    "roses",
    "list",
    "okay",
    "let",
    "try",
    "opening",
    "files",
    "know",
    "using",
    "image",
    "pillow",
    "library",
    "use",
    "code",
    "open",
    "first",
    "row",
    "image",
    "second",
    "row",
    "image",
    "see",
    "similar",
    "thing",
    "tulips",
    "let",
    "say",
    "supply",
    "tulips",
    "tulips",
    "tulips",
    "name",
    "folder",
    "see",
    "tulips",
    "name",
    "folder",
    "get",
    "tulips",
    "open",
    "tulips",
    "images",
    "tu",
    "lip",
    "get",
    "beautiful",
    "looking",
    "images",
    "going",
    "conver",
    "make",
    "python",
    "dictionary",
    "key",
    "dictionary",
    "flower",
    "name",
    "value",
    "list",
    "images",
    "dictionary",
    "roses",
    "give",
    "pile",
    "path",
    "rose",
    "images",
    "similarly",
    "tulips",
    "gives",
    "tulips",
    "images",
    "okay",
    "seen",
    "previous",
    "videos",
    "aware",
    "creating",
    "label",
    "directory",
    "well",
    "machine",
    "learning",
    "module",
    "understand",
    "text",
    "need",
    "say",
    "okay",
    "roses",
    "0",
    "daisy",
    "1",
    "um",
    "look",
    "let",
    "say",
    "particular",
    "file",
    "path",
    "looks",
    "something",
    "like",
    "read",
    "opencv",
    "cv2",
    "opencv",
    "model",
    "imported",
    "top",
    "saying",
    "iamread",
    "means",
    "image",
    "read",
    "thing",
    "let",
    "say",
    "reading",
    "one",
    "image",
    "look",
    "image",
    "path",
    "know",
    "image",
    "paths",
    "image",
    "shape",
    "sorry",
    "image",
    "shapes",
    "different",
    "need",
    "resize",
    "want",
    "training",
    "model",
    "need",
    "make",
    "sure",
    "images",
    "size",
    "make",
    "image",
    "size",
    "see",
    "run",
    "loop",
    "dictionary",
    "create",
    "x",
    "something",
    "previous",
    "video",
    "going",
    "detail",
    "code",
    "simple",
    "going",
    "particular",
    "dictionary",
    "rose",
    "going",
    "images",
    "going",
    "image",
    "second",
    "loop",
    "read",
    "image",
    "one",
    "one",
    "resize",
    "append",
    "resize",
    "image",
    "x",
    "append",
    "label",
    "know",
    "look",
    "x",
    "zero",
    "three",
    "dimensional",
    "array",
    "0",
    "saw",
    "previous",
    "videos",
    "image",
    "classification",
    "training",
    "divide",
    "255",
    "scale",
    "see",
    "bring",
    "bring",
    "value",
    "0",
    "want",
    "entire",
    "dataset",
    "numpy",
    "convenient",
    "um",
    "convert",
    "first",
    "numpy",
    "array",
    "divide",
    "let",
    "train",
    "test",
    "split",
    "first",
    "standard",
    "code",
    "seen",
    "enough",
    "video",
    "need",
    "explanation",
    "divide",
    "divide",
    "images",
    "look",
    "thing",
    "know",
    "range",
    "0",
    "want",
    "use",
    "model",
    "classify",
    "images",
    "let",
    "say",
    "first",
    "one",
    "daisy",
    "second",
    "one",
    "beautiful",
    "rose",
    "third",
    "image",
    "let",
    "say",
    "another",
    "rose",
    "let",
    "try",
    "use",
    "classifier",
    "predict",
    "model",
    "classifier",
    "well",
    "saw",
    "previously",
    "model",
    "imported",
    "tensorflow",
    "hub",
    "know",
    "model",
    "predict",
    "x",
    "know",
    "takes",
    "numpy",
    "array",
    "give",
    "numpy",
    "array",
    "give",
    "x",
    "0",
    "x",
    "1",
    "x",
    "2",
    "okay",
    "return",
    "um",
    "array",
    "predicted",
    "arrays",
    "store",
    "predicted",
    "argmax",
    "arg",
    "mix",
    "give",
    "maximum",
    "argument",
    "saying",
    "first",
    "flower",
    "flower",
    "7",
    "9",
    "95",
    "flower",
    "880",
    "third",
    "flower",
    "795",
    "well",
    "image",
    "levels",
    "remember",
    "supply",
    "795",
    "saying",
    "flower",
    "curtain",
    "maybe",
    "mobilenet",
    "google",
    "trained",
    "maybe",
    "shower",
    "curtain",
    "flower",
    "pattern",
    "saying",
    "even",
    "795",
    "image",
    "also",
    "saying",
    "flower",
    "curtain",
    "880",
    "880",
    "oh",
    "predicting",
    "umbrella",
    "see",
    "use",
    "model",
    "model",
    "daisy",
    "flower",
    "even",
    "four",
    "different",
    "flowers",
    "gon",
    "na",
    "make",
    "random",
    "guess",
    "thousand",
    "classes",
    "thousand",
    "meaning",
    "classes",
    "way",
    "file",
    "notebook",
    "everything",
    "available",
    "video",
    "description",
    "make",
    "sure",
    "download",
    "github",
    "going",
    "retrain",
    "model",
    "feature",
    "extractor",
    "model",
    "different",
    "previous",
    "one",
    "previously",
    "remember",
    "look",
    "whole",
    "path",
    "thing",
    "classification",
    "feature",
    "vector",
    "gives",
    "model",
    "previous",
    "one",
    "except",
    "last",
    "layer",
    "look",
    "presentation",
    "know",
    "whole",
    "model",
    "model",
    "want",
    "take",
    "layers",
    "include",
    "last",
    "layer",
    "layers",
    "excluding",
    "last",
    "layer",
    "given",
    "feature",
    "vector",
    "create",
    "model",
    "like",
    "using",
    "tensorflow",
    "hub",
    "creating",
    "keraslayer",
    "passing",
    "url",
    "input",
    "shape",
    "standard",
    "shape",
    "important",
    "parameter",
    "saying",
    "trainable",
    "false",
    "means",
    "freeze",
    "see",
    "freeze",
    "means",
    "train",
    "perform",
    "training",
    "layers",
    "fixed",
    "weights",
    "create",
    "model",
    "like",
    "putting",
    "model",
    "creating",
    "last",
    "layer",
    "classification",
    "five",
    "flowers",
    "see",
    "last",
    "layer",
    "mine",
    "previous",
    "layers",
    "already",
    "trained",
    "run",
    "five",
    "epochs",
    "way",
    "parameters",
    "standard",
    "adam",
    "sparse",
    "category",
    "cross",
    "entropy",
    "running",
    "five",
    "epochs",
    "remember",
    "data",
    "augmentation",
    "tutorial",
    "train",
    "model",
    "cnn",
    "previously",
    "took",
    "us",
    "know",
    "30",
    "epochs",
    "30",
    "epochs",
    "got",
    "85",
    "accuracy",
    "check",
    "second",
    "epoch",
    "got",
    "85",
    "accuracy",
    "see",
    "deep",
    "learning",
    "training",
    "expensive",
    "run",
    "many",
    "trainings",
    "uh",
    "many",
    "epochs",
    "gpu",
    "cpu",
    "electricity",
    "power",
    "burnt",
    "might",
    "get",
    "big",
    "electricity",
    "bill",
    "transfer",
    "learning",
    "save",
    "computation",
    "time",
    "bill",
    "sometimes",
    "building",
    "training",
    "big",
    "model",
    "might",
    "take",
    "days",
    "weeks",
    "months",
    "model",
    "retrain",
    "problem",
    "much",
    "easily",
    "let",
    "look",
    "performance",
    "test",
    "also",
    "good",
    "85",
    "percent",
    "reason",
    "transfer",
    "learning",
    "popular",
    "computer",
    "vision",
    "nature",
    "language",
    "processing",
    "solving",
    "computer",
    "vision",
    "nlp",
    "problem",
    "try",
    "see",
    "use",
    "transfer",
    "learning",
    "try",
    "build",
    "model",
    "scratch",
    "hope",
    "like",
    "video",
    "notebook",
    "links",
    "available",
    "video",
    "description",
    "make",
    "sure",
    "check",
    "make",
    "sure",
    "watch",
    "videos",
    "deep",
    "learning",
    "series",
    "separate",
    "tutorial",
    "series",
    "machine",
    "learning",
    "python",
    "python",
    "projects",
    "well",
    "nowadays",
    "want",
    "learn",
    "python",
    "small",
    "projects",
    "complete",
    "playlist",
    "variety",
    "projects",
    "well",
    "make",
    "sure",
    "check",
    "thank",
    "watching",
    "goodbye"
  ],
  "keywords": [
    "transfer",
    "learning",
    "image",
    "classification",
    "take",
    "model",
    "try",
    "problem",
    "remember",
    "data",
    "augmentation",
    "tutorial",
    "flowers",
    "dataset",
    "classify",
    "five",
    "video",
    "use",
    "mobilenet",
    "google",
    "tensorflow",
    "hub",
    "see",
    "previously",
    "used",
    "many",
    "epochs",
    "train",
    "accuracy",
    "using",
    "like",
    "two",
    "get",
    "models",
    "trained",
    "images",
    "weights",
    "last",
    "layer",
    "layers",
    "uh",
    "let",
    "go",
    "one",
    "different",
    "well",
    "going",
    "v2",
    "total",
    "thousand",
    "classes",
    "deep",
    "know",
    "goldfish",
    "input",
    "freeze",
    "flower",
    "training",
    "way",
    "almost",
    "looks",
    "feature",
    "vector",
    "okay",
    "also",
    "say",
    "python",
    "download",
    "import",
    "look",
    "imported",
    "first",
    "thing",
    "create",
    "make",
    "sure",
    "run",
    "give",
    "creating",
    "classifier",
    "particular",
    "code",
    "shape",
    "need",
    "numpy",
    "want",
    "open",
    "file",
    "directory",
    "class",
    "name",
    "resize",
    "store",
    "scale",
    "previous",
    "0",
    "divide",
    "value",
    "array",
    "second",
    "labels",
    "read",
    "label",
    "check",
    "means",
    "folder",
    "daisy",
    "roses",
    "path",
    "saying",
    "tulips",
    "dictionary",
    "rose",
    "x"
  ]
}