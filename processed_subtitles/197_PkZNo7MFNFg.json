{
  "text": "Beau:  This is the Beginner’s Javascript course \nyou are looking for.\nMy name is Beau Carnes.\nAnd I’m with freeCodeCamp.org.\nIn this full Javascript course you will learn everything \nyou need to know to get started with Javascript.\nThis course is perfect for beginners or anyone that \njust wants a refresher on basic Javascript syntax.\nThis course actually goes along with the \nfreeCodeCamp.org Javascript curriculum.\nSo, if you want some live coding challenges \nto go along with every part of this course, \nyou can check the link in the description \nto that curriculum.\nBut this is a completely standalone video.\nSo, you don’t need to go through freeCodeCamp.org, \nbut it could be helpful.\nAlso, after this course, you’re going to want to \ncomplete some, or build some Javascript projects.\nSo, I have a link in the description \nto some project tutorials.\nBut then after that, you’re going to want to \ncreate some projects on your own.\nThat’s how you really learn Javascript.\nYou have to create things without going \nthrough a tutorial \nand just use a search engine to find the things \nthat you don’t know or need to learn.\nTo go along with the freeCodeCamp curriculum, \nI have all the ES6 stuff in the second part of this course.\nThat’s pretty much it.\nLet’s learn some Javascript.\n[Running Javascript]\nSo, how exactly do you install Javascript?\nWell, for the most part, you don’t.\nActually, all web browsers can run Javascript.\nWhich is great because a lot of devices \nhave web browsers on them.\nSo, when you write something with Javascript, \nit will run on all sorts of devices \nand operating systems.\nSo, you have a few options for writing Javascript.\nLet me show you a few things you can do \nto follow along with this course.\nYou could download a code editor.\nHere, I have Sublime Text.\nYou can also use Visual Studio Code or Atom \nor any code editor.\nAnd I’ve created an HTML file because HTML files \ncan be opened in web browsers.\nAnd I have these  tags – these are HTML tags.\nBut within our  tags, we have our Javascript.\nSo, if I open up this file in a web browser, \nit looks like this.\nWell, I can open up my Javascript console.\nAnd in the console, you can see it says “hello world.”\nThat’s right from my Javascript program.\nSo, whenever you do console.log, \nit’s going to show on the console here.\nYou can also just use the code editor \nthat’s included on freeCodeCamp.org.\nLike I mentioned, this course follows along with the Javascript curriculum on freeCodeCamp.org.\nAnd there’s a built-in Javascript editor right in here.\nAnd then it shows you the console down here.\nAnother option would be to use CodePen.\nIf you go to CodePen.io, going to go to Create Pen.\nAnd then there’s going to be three windows.\nHTML, CSS, and Javascript.\nWell, we just care about the Javascript.\nAnd in this course, we're not going to be doing \nanything with HTML and CSS.\nWe just need the Javascript and the Javascript console.\nSo, if I do console.log and then do (“Hello World”) \nthen we can see right in the console \"Hello world.”\nThe final thing you can do would be use Scrimba.\nMost of the course I actually recorded \nusing Scrimba.com.\nSo, if you want, you can use Scrimba.com \nto follow along.\nOnce you log in, just click the [Plus] button.\nI’m going to [Javascript] [Playground] \nand then [Confirm].\nAnd it’s going to open up a new Javascript window.\nNow, I can increase the font size here.\nAnd it already has console.log “Hello from Javascript.”\nAnd you can see in the console right here \n“Hello from Javascript.”\nAlso, if you hit [Reload], it reloads everything.\nAnd you'll see this popup “Hello from Javascript.”\nSo, that’s something interesting about Scrimba \nis that has two ways of logging in the console.\nWe have the popup and then \nwe have the console here.\nYou’ll see that in this course too, \nthe two different ways of logging to the console.\n[Comment Your Javascript Code]\nThe first thing we'll talk about \nin Javascript is comments.\nComments are lines of code \nthat Javascript will intentionally ignore.\nThey don’t do anything.\nThey’re just used to create notes for yourself \nand others about what the code does.\nSo, if you do a // you can make an in-line comment.\nAn in-line comment means it’s at the end \nof a line of code.\nFor instance, I can put var number = 5.\nThat’s a way to declare a variable.\nAnd we'll talk more about that later.\nBut right now we're just talking about comments.\nYou can see that this code is in color because the code \neditor knows that that’s code that’s going to run.\nAnd the comment is automatically grayed out \nbecause it’s not going to run.\nWe can also do an in-line comment \nor I mean a multi-line comment.\nIf we do a /* and I can put \"this is a,” \nand then I can put \"multi-line comment.”\nAnd I'm going to end with a */.\nSo, it begins with a /*\nand ends with a */.\nAnd you can put as much text as you want \nin between these.\nAnd you can see this is all grayed out \nbecause it’s all a comment.\nAnd then afterwards I can put number = 9 \nand you can see it will be in color again \nbecause it’s no longer commented out.\n[Data Types and Variables]\nNow we're going to talk about \ndata types and variables.\nIn computer science, data is anything that is \nmeaningful to the computer.\nAnd Javascript provides seven different data types \nthat you can use within Javascript.\nNow, some of the more obvious and most common \nare strings and numbers.\nA string is just any sort of text.\nA number is a number.\nNow let’s go from the top.\nSo, undefined is something that hasn’t been defined.\nYou may have a variable that you haven’t \nset to be anything yet.\nNull means nothing.\nSo, you’ve set this to be something \nand that thing is nothing.\nSo, you can say this is null or nothing.\nA boolean means true or false.\nWe talked about string.\nA symbol is an immutable primitive value \nthat is unique.\nNow we'll tall more about those later.\nA number is a number.\nAnd an object can store a lot \nof different key value pairs.\nAgain, we'll talk more about those later.\nNow, you are often going to set data into a variable.\nA variable allows computers to store \nand manipulate data in a dynamic fashion.\nIt’s basically a label to point to the data.\nA variable is almost like a box.\nAnd you can fill it with anything.\nYou’ll fill it with the data that you want.\nSo, to declare a variable, \none way is to use the var keyword.\nVar stands for variable.\nAnd I can say myName.\nI can set this to anything.\nIt can be any of the datatypes above.\nBut it’s common to set something to a string.\nSo, I can set my name to be “Beau.”\nNow later, you can set it to be something else.\nI can say myName = 8.\nAnd you can just set it to other data types later.\nNow, there are actually three ways \nto declare a variable in Javascript.\nSo, var is one of them.\nAnd for a while, that was the only way.\nBut there are other ways too.\nThere’s a way called \"Let.”\nSo, I can say let ourName = “freeCodeCamp”.\nAnd then the other thing would be const.\nSo, I can do const Pi = 3,1004.\nNow, the difference between var, let, and const, \na var is going to be able to be used \nthroughout your whole program.\nLet will only be used within the scope \nof where you declared that.\nNow, we're going to be talking about let \nand const more later.\nSo, I’m just giving you a brief overview \nof what they are now.\nConst is a variable that should never change.\nIt can never change.\nSo, like right up here, I declared myName, \nbut then we changed it here.\nSo, it started out to be Beau and we changed it to 8.\nConst, you can never change it.\nIf you do try to change it, you’ll get an ERROR.\nOkay, that’s all for now.\nBut like I said.\nWe'll be talking more about \nthe different types of variables later.\n[Storing Values with Assignment Operator]\nThere’s a difference between declaring variables \nand assigning variables.\nHere’s how you assign a variable.\nvar a and then a semicolon.\nI didn’t mention this earlier, but you end all lines \nin Javascript with a semicolon.\nWell, it’s not actually required.\nYou can actually just skip the semicolons completely, \nbut most people recommend that you put a semicolon\njust so it’s obvious where the end of the line is.\nSo, here, we are just declaring a variable \nto be called a.\nAnd then here, we are assigning a variable.\nWe’re declaring and assigning in one line.\nSo, we're declaring it “var b” And then the equals sign \nis the assignment operator.\nIt means that 2 is being assigned to b.\nWe're not checking if b = 2.\nWe're just assigning 2 to be.\nSo, after that, we can actually assign other things.\nSo, I can say a = 7.\nSo, now I’ve just assigned 7 to a.\nI didn’t have to declare a because \nit was already declared.\nAnd I can also say that b = a.\nSo, I’ve now assigned the contents of a to b.\nAnd I’ll put the semicolon there.\nOne thing I want to tell you about is console.log.\nConsole.log allows you to see things in the console.\nSo, I’m going to console.log(a).\nAnd if I load this here, you can see down here \nin the console it shows 7.\nSo, right now we've assigned a to be 7.\nAnd so, when we console.log(a) \nit shows 7 down there.\nIf we put another console.log right here, \nthis will allow us to show what a was up here \nand then down there.\nSo, console.log.\nNow, if I run that, we can see at first, a was null.\nAnd then now it’s 7.\nSo, here is null.\nAnd then it’s 7 down here.\nSo, you can check what variables \nare at various points in your program.\n[Initializing Variables w/ Assignment Operator]\nNow I’ll show you another example \nof initializing a variable \nto an initial value at the same time it’s declared.\nSo, I’m going to say var a = 9.\nSo, the var a is declaring it.\nAnd the = 9 is initializing it with the assignment \noperator, which is the = sign.\n[Uninitialized Variables]\nBefore we do anything to these variables, \nthey are uninitialized.\nThat means their value is undefined.\nWe have not set them to anything.\nBut it’s simple to fix that.\nI’ll just set this to five.\nI’ll set b to 10 and then we can set c to a string.\nThat’s going to be “I am a string”.\nAnd we always have to put it in \nquotation marks like that.\nSo, you can see a + 1 is going to equal 6.\n5 + 1 = 6.\nb = b + 5.\nThat’s going to be 15.\nAnd then c is now going to say \"I am a string”.\n[Case Sensitivity in Variables]\nVariable names and function names \nin Javascript are case sensitive.\nThat means that capitalization matters.\nSo, this declaration here is not the same \nas this assignment.\nEven though letters are the same, \nthe capitalization is not the same.\nSo, it’s not going to assign correctly.\nAnd in here, you’ll see there’s an ERROR if we try \nto run it because this has not been defined.\nIt has not been declared.\nIt’s generally common practice to use camelCase.\nSo, let me show you how we do that instead of \nStUdLyCapVar, it’s going to be studlyCapVar.\nSo, the first letter is always going to be lowercase.\nAny time you have a new word or a new section \nof a word, you just capitalize the first letter.\nAnd so, we can change this.\nThis one is correct.\nSo, now we just go down here.\nstudlyCapVar.\nAnd then we just do properCamelCase.\nAnd then titleCaseOver.\nSo, now all of these should be defined.\nSo, we declare them here.\nWe assign them right here.\nAnd then this is not going to give us any errors.\nIt’s going to behave exactly how we want it to behave.\n[Adding Numbers]\nAdding two numbers in Javascript \nis pretty straight forward.\nYou just use the plus operator.\nSo, this says 10 + 0 which equals 10.\nWe can also do, 10 + 10 which is going to equal 20, \nif we do a console.log, and I can put sum here.\nAnd then you’ll be able to see that \nthe answer is 20 right in the console.\n10 + 10 is 20.\n[Subtracting Numbers]\nAnd subtraction is also what you would expect.\nWe have the subtraction sign here.\nThis says 45 – 0.\nWe can also do 45 – 33.\nAnd then that would equal 12.\nSo, the difference variable equals 12 now.\n[Multiplying Numbers]\nMultiplication in Javascript uses this *\nor a star symbol here.\nSo, this says 8 * 0 which is 0.\nOr we can change it to 8 * 10 which is 80.\nSo now the product variable equals 80.\n[Dividing Numbers]\nYou can divide in Javascript with this / symbol.\nSo, this says 66/0.\nWe can change this to 33.\nSo, now 66/33 is 2.\nQuotient equals 2.\n[Incrementing Numbers]\nTo increment a number means to add 1 to it.\nSo, here we’re incrementing myVar by 1.\nSo, it starts at 87.\n87 + 1 is 88.\nThere is a quicker way to increment a number.\nInstead of doing this, we can just myVar++.\nmyVar++.\nAnd now we have incremented myVar from 87 to 88.\n[Decrement Numbers]\nWe learned about incrementing a number with ++.\nYou can also decrement a number with --.\nThat means subtracting one.\nSo, right now, myVar is going to equal 10.\n11-1 = 10.\nWe can do the same thing with the -- operator.\nSo, now, myVar still equals 10.\n[Decimal Numbers]\nWe can also create decimal numbers with Javascript.\nThese are sometimes referred to \nas floating point numbers or floats.\nYou can see this is one here – 5,700.\nIt can be anything.\nI’m going to make one called myDecimal.\nAnd then I’m going to store a 0,00009.\nAnything that has a decimal point in it, \nis a decimal point number.\n[Multiply Decimals]\nMultiplying decimal point or floating point numbers \nis the same as multiplying integers.\nSo, we have 2,000 times 0,000.\nIf I just change this to 2,500, \nnow the answer to product is going to be 5.\nAnd I can console.log that so you can see.\nIf I just put (product).\nAnd then if we do the browser here, \nyou’ll see that the answer is five.\n[Divide Decimals]\nYou can also divide decimal point numbers.\nSo, in this case I’m going to change this to 4,400.\nSo, now the answer to quotient is 2,200.\nQuotient equals 2,200.\n[Finding a Remainder]\nThe remainder operator looks like a %.\nAnd it gives the remainder of the division \nof two numbers.\nSo, for instance, if I want to find out the remainder \nof 11 divided by 3, I can do remainder = 11.\nAnd then I’m going to put the percent sign %, \nwhich is the remainder operator, 3.\nAnd 11 divided by 3 is 9.\n11-9 is 2.\nSo, the remainder is going to be 2.\n11 remainder 3 is 2.\nThe remainder operator is often used to determine \nif a number is even or odd.\nIf you can divide a number by 2 and the remainder \nis 0, that means the number is even.\n[Compound Assignment with Augmented Addition]\nIt’s common to want to add a number \nto a variable like this.\nSee, A = A + 12.\nWell, A starts at 3, plus 12 is 15.\nSo, we're just adding 12 to whatever A is.\nHere we're adding 9 to whatever B is.\nHere, we’re adding 7 to whatever C is.\nThis is such a common pattern that there’s a shortcut \nto do the same thing.\nIt’s the += operator.\nSo, instead of A = A + 12, we can do A += 12.\nSo, this equals the same thing.\nSo, instead of B = 9 + B.\nWe can do B += 9.\nSo, now we're adding the value to the variable \nand assigning the answer to that variable.\nSo, again here, we can do += 7.\nSo, that’s just a shortcut.\n[Compound Assignment with Augmented Subtraction] \nPreviously, we learned about +=.\nWell, -= does the same thing, but subtracting.\nSo, this says A = A - 6.\nWe started at 11, minus 6 is going to be 5.\nSo, the new A is going to be 5.\nBut we can shorten that.\nInstead of A = A - 6, we can do -=.\nThis is just a shortcut that Javascript has \nthat means the same thing.\nThat means A = A - 6.\nBut it’s shortened.\nSame here.\nSo, we can do -= 15.\nC = C - 1.\nWe can do C -= 1.\nSo, it just subtracts the number from the original \nvalue and then assigns that new value to the variable.\n[Compound Assignment \nwith Augmented Multiplication]\nHere we have A = A * 5.\nWell, we can do the same thing as before.\nWe can shorten this to A *= 5.\nSo, that means the same thing.\nHere, we can do A *= 3.\nAnd then C = C * 10.\nWe can shorten this to C *= 10.\nAnd that’s another shortcut for Javascript.\n[Compound Assignment with Augmented Division]\nAnd there’s also a /=.\nSo, A = A / 12.\nWe can do A /=12.\nAnd here, we can just do /=4.\nOr /= 11.\nSo, another way of just dividing the variable by a new \nnumber and assigning that answer to the variable.\n[Declare String Variables]\nWe’ve already mentioned strings a little bit.\nBut anytime you have some characters surrounded \nby quotation marks, \nthey can either be single quotation marks, \ndouble quotation marks, or backticks.\nIt’s a string.\nThese are called \"String literals.”\nAnd you can create them just like you see above.\nI’m going to do a few more.\nSo, var myFirstName = “Beau”.\nAnd var myLastName = “Carnes”.\nSo, that’s how you create a string in Javascript.\n[Escaping Literal Quotes in Strings]\nSometimes your string contains the quote symbol.\nNow, normally the quotes identify the beginning \nand the ending of the string.\nBut what if you assign like this?\n“I am a ‘double quoted’ string inside ‘double quotes.’”\nI’m actually trying to use these quotes right inside \nthe string, \nbut the Javascript doesn’t know what to do about it.\nIt thinks that this is the whole string.\nWhen it sees the first quote inside the string, \nit thinks we're at the end of the string.\nSo, there’s something called an escape character.\nSo, if you want to escape a quote, that means \nit will no longer be considered the end of the string.\nI’m going to put a \\.\nSo, if I put a \\ before each of these quotation marks, \nJavascript no longer interprets \nas being the last character in the string.\nSo, now you can see this is a full string.\nAnd then if I log this count console.log \nand I put (myStr), \nyou’ll see that it’s not going to show \nthe quotation marks.\nSo, I mean it’s not going to show the / and the \\.\nIt shows the quotation marks without the \\ \nbecause when we put \\” Javascript knows \nthat this should just mean a quotation mark.\n[Quoting Strings with Single Quotes]\nWe talked about escaping a quote character like this, \nwhere you put a \\ before the quote character \nso Javascript knows that this is supposed to be \na literal quote character inside the string.\nHowever, you’re not going to have to \nescape quote characters very often \nbecause there are other methods \nof accomplishing the same thing \nof having a quote character within a string.\nSo, a common way is to use – \ninstead of having your string start with double quotes, \nhave it start with a single quote.\nSo, a string can either be surrounded by ‘single quotes’ or “double quotes”.\nSo, this time we're just going to have ‘single quotes’.\nAnd now I can remove all of these escape characters \nfrom inside the string here.\nOkay, so now you can see that Javascript \nstill knows that this is a string, \neven though it has these double quotes inside.\nAn additional thing you can do is use backticks.\nSo, if I put backticks before – at the beginning \nand the end of the string, \nnow I actually can use single quotes \nand double quotes both within the string.\nBut right now, I’m just going to focus on showing you \nthe double quotes or the single quotes\nwith the “double quotes” inside.\n[Escape Sequences in Strings]\nWe talked about escaping a double quote \ncharacter by using the \\ before the double quote.\nThere’s actually quite a few other things \nyou can escape out.\nYou can escape out a single quote character.\nYou can escape out a backslash.\nIn fact, anytime you’re going to use a \\, \nyou’re going to have to put two backslashes \nso the Javascript knows that \nyou’re not trying to escape a character.\nYou can also add a new line character, \nor a carriage return, a tab, a backspace, \nor a form feed, all with doing a slash \nand the corresponding letter here.\nSo, let me show you an example.\nI’m going to put a var myString = \nand we're going to make a multiline string.\nSo, we're going to have the “FirstLine.”\nAnd now, I’m going to put \\n to add a second line.\nAnd then I’m going to put a tab.\nSo, \\t for the tab.\nAnd \\\\ to add a \\.\nNow, it’s going to say SecondLine.\nNow, I’ll do a \\ and then I’ll just say ThirdLine.\nAnd if I were able to logout all of that, \nyou would see three different lines.\nAnd you would see the tab and then the backslash character.\n[Concatenating Strings with Plus Operator]\nYou can concatenate strings with the + operator.\nYou can see here that we have two strings.\n“I come first” and “I come second”.\nThey’ve been added together \nor concatenated with this.\nSo, the ourStr, our string, \nis now one long string that says \"I come first.\nI come second”.\nI’ll give you another example here.\nSo, we can say, myStr = “This is the start.”\nAnd then I’m going to put a space \nbefore the end quotation mark \nbecause when these get concatenated together \nwe want there to be a space between \nthese two sentences.\nAnd I’ll say \"This is the end.”\nNow let’s just see what that looks like.\nI’ll do a console.log.\nAnd do a (myStr) and let’s see.\nIf I run this, we can see “This is the start.\nThis is the end.”\nJust one long string.\n[Concatenating Strings with Plus Equals Operator]\nYou can also concatenate strings \nusing the += operator.\nYou can see here in this example \nwe have the ourStr = “I come first”.\nAnd then we have the ourString += “I come second.”\nSo, remember, just like when you’re using numbers, \n+= means that you take whatever is on the end here \nand add it to the variable.\nSo, we’ve just added \"I come second.”\nonto the end of “I come first.”\nLet’s do another example down here.\nmyStr = “This is the first sentence.”\nAnd then I’ll put a space at the end \nbecause we're going to do a, myStr – \nand here I’ll do the += “This is the second sentence.”\nNow, if I just do a console.log here of (myStr) \nwe should see that those sentences have gone together.\n“This is the first sentence.\nThis is the second sentence.”\nGood.\n[Constructing Strings with Variables]\nYou can concatenate strings together with variables.\nYou can see here ourName = “freeCodeCamp”;.\n“Hello, our name is “ and then we add this variable, \nthe ourName variable which is freeCodeCamp.\n“Hello, our name is freeCodeCamp.\nHow are you?”\nWell, we're going to do the same thing down here.\nSo, I’m going to do myName = “Beau”;.\nAnd then myStr is going to equal “My name is “ \nAnd then I’m going to add the variable name \nwhich is my name.\nAnd then I’ll continue the string here.\nThat’s supposed to be a + here.\n“ and I am well!”\nSee that I put a space here and here because you \nhave to make sure you put appropriate spaces in.\nAnd let’s see what that looks like.\nI’ll do a console.log.\nI’ll just put (myStr) here.\nIf I show that \"My name is Beau and I am well!” \nLooks good.\n[Appending Variables to Strings]\nYou can append variables to strings \nwith this += operator.\nYou can see where this variable anAdjective \nwhich is set to the word “awesome”.\nAnd then we have another variable \n\"freeCodeCamp is “.\nAnd then we have the ourStr variable += anAdjective.\nSo, now our string is going to equal \n“freeCodeCame is awesome!”.\nSo, let me show you another example.\nWe're going to say someAdjective = “worthwhile”.\nAnd now, I’m going to use the +=, \nso myStr += and then I can put someAdjective.\nSo, now after we do the myStr += someAdjective, \nmyStr is going to say “Learning to code is worthwhile.”\n[Find Length of String]\nSometimes you want to find the length of a string.\nJavascript makes this easy.\nSo, we have the firstName is set to “Ada”.\nBut we just use the .length property \nto find the length.\nSo, firstName.length.\nRemember, firsName is “Ada” here.\nAnd then .length will return an integer, a number \nthat has the number of characters in the string.\nSo, that will be three.\nSo, let’s try this again.\nHere’s another example.\nlastNameLength = lastName.\nWe just have to type in .length.\nAnd just to show you, let me console.log that\nand you'll be able to see if I put in (lastNameLength) \nand if I run that you'll see 8 because \nthere are 8 characters in the word “Lovelace”.\n[Bracket Notation to Find First Character in String]\nBracket notation is a way to get a character \nat a specific index within a string.\nSo, you can see right here, \nwe have the firstName = “Ada”.\nAnd right here we the have firstName.\nAnd then here’s the bracket notation.\nYou can see there’s brackets with a number inside.\nSo, most modern programming languages like \nJavascript don’t start counting at 1 like humans do.\nThey start at 0 which is called \"Zero-based Indexing.”\nSo, with the number 0, that refers to first index \nof the string which would be the A.\nSo, the A would be 0.\nD = 1.\nAnd then A = 2.\nSo, this first letter of firstName, if we do firstName \nwith the bracket notation with a zero, \nthat’s going to = A.\nSo, let me show you another example.\nLet’s say we want to get the first letter \nof the last name.\nAgain, I’m just going to do the bracket notation \nand put a zero here.\nIf I wanted the second letter, \nthe O, I would put a 1 here.\nSo, if I console.log we can see what it came up with.\nSo, console.log.\n(firstLetterOfLastName).\nAnd if we look in the console \"L”\nbecause the first letter of the last name is L.\n[String Immutability]\nStrings are immutable, meaning \nthey cannot be altered once created.\nThis does not mean that they cannot be changed, \njust that the individual characters of a string literal \ncannot be changed.\nSo, look at this example.\nmyStr and then we're going to use bracket notation \nto choose the first letter.\nSo, it currently says \"Jello World”.\nWe want the first letter to change to an H \nto say “Hello World”.\nBut if I run that, there’s going to be an error \nbecause of the immutability of strings.\nNow, we can still change this to “Hello World” \nbut we can’t just change an individual letter like that.\nSo, we're going to have to do myStr = \nand I’m just going to have to type in the whole thing \nwhich is “Hello World”.\nAnd now, it will change to the word “Hello World.”\n[Bracket Notation to Find Nth Character in String]\nYou can use bracket notation to get \nany character position in a string.\nSo, earlier we did the first position, \nbut here’s how you get the second position.\nRemember, the 0 index.\nSo, [1] is the second position.\n[0] is the first position.\nWe can also get the third letter of the last name \nusing the brackets.\nWe’ll just put [2] in the brackets \nto get the third letter of the last name.\n[Bracket Notation to Find Last Character in String]\nYou can also use bracket notation \nto find the last letter in a string \neven if you don’t know how many letters \nare in the string.\nYou do it based on the length.\nSo, if you look really here, in the brackets \nwe have an expression to be evaluated.\n[firstName.length-1].\nSo, the length is 3.\n3-1 is 2.\nThe reason why we’re doing a -1 \nis because remember we count starting at 0.\nSo .length-1 is going to be the last index of the name.\nSo, you can do that same thing here \nto get the last letter of the last name, \nI can just do lastName[lastName.length - 1].\nAnd that’s going to get the last letter of the last name \nwhich is the E right here.\n[Bracket Notation to Find Nth-to-Last \nCharacter in String]\nWe saw how to use bracket notation \nto get the last letter of a string.\nYou can also do the third to last letter \nor fourth to last letter.\nSo, you just subtract however much you want \nfrom the length of the string.\nSo, we have the bracket notation, \n[firstName.length - 3].\nThat’s going to get the third to last letter.\nSo, we want the second to last letter.\nInto this variable here we do something similar.\nWe just do [lastName.length].\nAnd then we're going to subtract 2 to get \nthe second to last character of the string.\n[Word Blanks]\nWe’re going to use our knowledge of strings \nto build a Mad Libs style word game.\nIn a Mad Lib game you are provided sentences \nwith some missing words like \nnouns, verbs, adjectives, and adverbs.\nAnd then you fill in the missing pieces \nwith words of your choice \nto make a sentence that could be funny \nand hopefully makes a little bit of sense.\nSo, let me show you how you do this.\nThis also uses a function.\nNow, we haven’t talked about functions yet.\nI’m going to explain those more later.\nBut for now just go with it because \nthat’s not the point of this lesson for now.\nBut this function called wordBlanks, \nyou can call the function \nand you have to pass in certain types of words.\nYou pass in a noun, an adjective, a verb, \nand an adverb.\nSo, down here, you can see that \nwe're calling the function called wordBlanks.\nThat’s the function name here.\nAnd we're passing in a noun, \nan adjective, a verb, and an adverb.\nSo, the point is that we are going to use all these \nwords that are passed in to make a sentence.\nSo, we know that var result = an empty string at first.\nAnd then we have to use all these words in result.\nAnd then the result is going to be returned \nfrom this function.\nAnd eventually, it’ll be logged out onto this screen \nwith this console.log.\nSo, what I’m going to do here is do result +=.\nWe're going to use the += to add something \nto this result using all the noun, \nthe adjective, the verb, and the adverb.\nSo, let’s see.\nIt’s going to say “The “ and then we'll use \nthe adjective myAdjective.\nIn this case, the big.\nThe big and then let’s put the noun.\nmyNoun because adjectives are words \nthat describe nouns.\nThe big dog.\nAnd then we're going to say what this now is doing – \nthe verb.\nmyVerb.\nThe big dog ran.\nAnd then where does he run to?\n“to the store ”.\nAnd then we're going to add – \noh, we need a space here.\nSo, there’s a space between “ to the store “.\nAnd then we're going to add \nthe final adverb.\nSo, now, we have to add a period.\nAnd there’s one more thing we have to add, \nor a few more things.\nSo, right now myAdjective, myNoun, myVerb.\nAnd there’s no spaces in between those.\nSo, if I run that you can see what \nthat’s going to look like in the console.\nIt just said,\nwith no spaces.\nSo, we're going to have to add some spaces \nin here also.\nLet’s do that.\nAnd now, it’s going to take in the noun, adjective, \nverb, and adverb and then put it into that sentence.\nSo, one cool thing is we can actually pass in \nsome different words.\nSo, like for instance, if I copy this, I’m going to paste it.\nInstead of “dog” I will put for the noun “bike”.\nAnd an adjective I’ll put “slow”.\nAnd then for the verb, I’ll put “flew”.\nAnd the adverb I’ll put “slowly”.\nAnd now if we look in the console \nwe have two sentences.\nThe big dog ran to the store quickly.\nThe slow bike flew to the store slowly.\n[Store Multiple Values with Arrays]\nArrays allow you to store \nseveral pieces of data in one place.\nSo, look at this example, ourArray.\nNow, arrays always start with a bracket \nand then end with a bracket \nto show the beginning and ending of the array.\nAnd every element in the array \nis separated by a comma.\nSo, you can see here the first element is a string.\nThe second element is a number.\nAnd you can have more and more elements.\nYou just put comma and you can keep adding elements.\nAnd the elements can be any data type.\nYou can see here we have a string and a number, \nbut you can also use arrays or floating numbers \nor really any sort of data type in your array.\nSo, lets see another example.\nSo, let’s do myArray = [“Quincy”].\nAnd then for a number we’ll do 1\nbecause Quincy is number 1.\n[Nested Arrays]\nWhen one of the elements in an array \nis another array, \nthat’s called a nested array \nor a multidimensional array.\nYou can see here’s the beginning of the array \nand here’s the end of the array.\nBut the first element in this array is another array \nwith two elements of its own.\nSame with here.\nThe second element is an array.\nSo, this is two arrays within another array.\nSo, we can do that here.\nHere’s another example.\nSo, let’s our first element in the array will be an array \nwith a string and a number.\nAnd then I’ll put a comma to put \nthe second element of the array \nwhich will be another array with a string \nand a number.\n[Accesses Array Data with Indexes]\nEarlier we learned how to use bracket notation \nto find a specific index in a string.\nYou can do the same thing with arrays.\nSo, look at this array, ourArray.\nWe have three elements.\n[50, 60, 70].\nAnd these have the indexes [0, 1, 2].\nSo, with this ourArray with the bracket notation \nand the [0], that’s going to be index 1, \nwhich is going to equal 50.\nSo, we can do the same thing here.\nmyArray = [50, 60, 70].\nSo, let’s try to find the first element in that array.\nSo, var myData = myArray.\nAnd then I’m going to do index [0].\nI can do index [1], index [2].\nAnd then if we console.log that, \nwe can see for sure what that is.\nSo, if I put (myData) \nand we can see in the console it’s 50.\n[Modify Array Data With Indexes]\nYou can use array indexes to modify arrays.\nNow, we tried to do this earlier with strings \nusing bracket notation \nand we were not able to modify a string \nusing bracket notation.\nBut with arrays, you can.\nSo, the original array is [18, 64, 99].\nAnd then we're going to use the array index of [1].\nNow, [1] is going to be the second number.\nRemember, [0, 1, 2].\nAnd this number 64 is going to be set to 45.\nSo, the new array is going to be [18, 45, 99].\nLet’s try it again with this, [18, 64, 99].\nSo, let’s do myArray \nand then instead of doing the second digit, \nI’m going to do the first digit in then array, \nthe first index which would be index [0].\nAnd I will say = 45.\nSo, now this array has been updated.\nSo, if I do a console.log and then do (myArray], \nwe'll see that the array is now [45, 64, 99].\n[Access Multi-Dimensional Arrays With Indexes]\nYou can also use bracket notation to select \nan element in a multi-dimensional or array of arrays.\nSo, you can see this array here, \nwe have our outer array.\nBut inside that array are more arrays.\nThe elements of the array are other arrays.\nAnd the last element of the array actually \nhas an array in this.\nSo, this is a three-layer deep array right here.\nSo, to access an array of arrays or an element \nwithin an array that’s within an array, \nyou use a double bracket notation.\nSo, if you see this example here, myArray, \nthe first bracket is [0].\nThat’s going to get the first element in the array \nwhich will be right here.\nAnd then that element is an array.\nSo, the second bracket would be the index \nof the array within the array.\nSo, this zero would point to here.\nSo, let’s try to figure out how we can select \na value equal to 8.\nWell, let’s see.\nI see an 8 right here.\nSo, let’s figure out what this first number should be.\nWell, let's count.\nZero, one, two.\nSo, the third array would be index [2].\nNow, we want to go zero, one – now we have to do \nindex [1] to get the second number in the third array.\nSo, let’s test to see if that equals 8.\nSo, I’ll do a console.log and then do (myData) here.\nAnd we'll see if that equals 8.\nAnd it does.\nWe did it.\n[Manipulate Arrays with push()]\nYou can have pinned data to the end of an array \nwith the push function.\nSo, see, an array has been set up here, ourArray.\n[“Stimpson” \"J” \"cat”] \nAnd then we take ourArray right here \nand use the push function to push into the next \nelement in the array another array here.\nSo, now it’s going to look like this.\nWe can see at the end of the original array, \nwe’ve pushed this other array at the end.\nSo, let’s try it again down here.\nWe have myArray.\nAnd you can see we have each element \nin the array is another array.\nSo, I am going to do myArray.push().\nAnd then I can push something on the end here \nwhich will be like above, another array.\nSo, this is going to say [“dog”, 3].\nAnd now we've pushed this onto the array.\n[Manipulate Arrays with pop()]\nWe can remove an item from an array \nwith the pop() function here.\nSo, see this pop() here?\nAnd then we know it’s a function because \nof the parenthesis at the end of the word pop.\nSo, the array starts with [1,2,3].\nSo, now we do this -- ourArray.pop() \nand it’s going to remove the last element \nwhich is the 3 and then it’s going to put it \nright into this variable here.\nSo, now as you can see down here, \nremovedFromOurArray now equals 3.\nAnd then ourArray is going to equal [1,2] \nbecause the 3 has been popped off.\nSo, we can do the same thing here.\nSo, removedFromMyArray = myArray.pop() \nand we can see what the array is going to equal\nnow if I just do a console.log(myArray).\nAnd if you do this, we can see that the array only has \nthe one item, the one array instead of the two arrays.\n[Manipulate Arrays with shift()]\nThe shift function is very similar to the pop function \nexcept it removes the first element of the array \ninstead of the final element.\nSo, we see the shift function \non the end of the array here.\nAnd the array is the same as before.\nBut now the first element “Stimpson” \nis being removed.\nAfter we shift off the first element the array \nis going to equal “J” \"cat”.\nAnd the removedFromOurArray \nis going to equal “Stimpson”.\nSo, let’s do another example down here.\nWe're going to do a shift() again.\nSo, I’m going to do = myArray.shift().\nAnd now myArray is just going to equal \n[“Dog”, 3].\nAnd the removedFromMyArray \nis going to equal [“John”, 23].\n[Manipulate Arrays with unshift()]\nThe unshift() function is similar \nto the push() array function.\nWhile push() adds an element to the end of the array, \nunshift() adds at element \nto the beginning of the array.\nSo, let’s look through this example code.\nWe have the array – \n[“Stimpson” \"J” \"cat”].\nWe're going to shift off the first element,\n remove the first element.\nSo ourArray is \n[“J” \"cat”].\nNow, we're going to unshift() or add an element \nat the beginning which is the string “Happy”.\nSo, the array will now be \n[“Happy” \"J” \"cat”].\nSo, let’s try again.\nThis time the array is \n[[“John”, 23], [“dog”, 3]].\nBecause of the shift, \nwe’ve shifted off the [“John”, 23].\nAnd now I’m going to unshift() something.\nSo, I’ll do myArray.unshift().\nNow we're going to add something \nto the beginning of the array.\nWe’ll do ([“Paul”, 35]).\nSo, now the array is just going to be \n[[“Paul”, 35], [“dog”, 3]].\n[Shopping List]\nLet me give you another example of nested arrays.\nThis will be a shopping list.\nSo, inside this array we're going \nto have another array.\nAnd we're going to have items.\nCereal – how many boxes?\n3 boxes.\nWe also need some milk.\nLet’s get two cartons of milk.\nLet’s get some bananas.\nThree bunches of three bananas.\nWe'll also get some juice.\nTwo containers of juice.\nAnd finally, we will get some eggs.\nWe'll get 12 eggs.\nAnd now we've created an array of arrays \nwhich is our shopping list.\n[Write Reusable Code with functions]\nFunctions allow us to create \nreusable code in Javascript.\nThis is how a function is set up.\nWe have the word function.\nThen we have the function name.\nThere’s always parenthesis here.\nAnd you can pass information into the parenthesis.\nWe'll talk about that later.\nAnd then we have these curly brackets.\nSo, this is the opening curly bracket {.\nAnd then we have the closing curly bracket }.\nAnd everything inside the curly bracket is run \nanytime the function is called or invoked.\nSo, here the function is being called by just putting \nthe function name with parenthesis after the name.\nSo, every time this function is called, just like this, \nthe console is going to say \"Heyya, World”.\nSo, if we load the console right now \nyou can see it says \"Heyya, World”.\nAnd if I just copy this and paste it a few times \nwe'll see that it’s going to say \"Heyya, World.\nHeyya, World. \nHeyya, World” in the console.\nSince we have run the function three times, \nwe see the words “Heyya, World” three times.\nSo now I’m going to create my own function \nthat’s going to be very similar.\nSo, we'll do function reusable function().\nAnd this time it’s going to \nsay something slightly different.\nIt’s going to say “Hi world” instead of “Heyya, World.”\nAnd now I can call the function down here, \njust like this – reusableFunction.\nOh, forgot to put the parenthesis.\nThat’s important.\nNow you see \"Heyya, World” and “Hi World” \nin the console.\n[Passing Values to Functions with Arguments]\nParameters are variables \nthat act as place holders for the values \nthat are to be input to a function when it is called.\nSo, we have defined a function right here \ncalled ourFunctionWithargs.\nAnd inside the parenthesis we see the letters (a, b).\nNow, these could be any name.\nWe could call these anything, not just (a,b).\nThey can really be any words up here.\nAnd that means that when this function is called \nwe're going to pass data into the function.\nOr input data into the function.\nSo, you can see the example here \nwhere we're calling the function.\nAnd instead of saying, (a,b) in the parenthesis, \nwe're actually passing the values (10, 5).\nSo, when the function runs, it can use the information \nthat’s passed into the function.\nSo, in this case it says console.log(a-b).\nWell, that’s going to be 10-5 because the numbers \n10 and 5 have been passed into the function.\nAnd that’s going to output 5.\nSo, I’m going to create a function that’s very similar \nto that that function.\nThis one is going to be called functionWithArgs.\nAnd it’s also going to accept an (a, b), \nbut we could call it anything we want.\nAnd inside instead of subtracting a-b, \nwe're going to do (a+b).\nNow, I’m just going to call this function \nfunctionWithArgs and I’ll pass in (10, 5) \nand let’s see what that looks like in the console.\nSo, first it outputted 5 for this one.\nAnd then it output 10 for this one.\n[Global Scope and Functions]\nScope refers to the visibility of variables.\nVariables which are defined outside \nof a function block have global scope.\nGlobal scope means they can be seen \neverywhere in your Javascript code.\nFor instance, I’m going to declare a variable \nright here called myGlobal.\nI’ll set it to 10.\nNow since this is set outside of a function, \nwe can see it anywhere in the whole code.\nEven in this function right here called fun2.\nWe can see that we reference it here and here.\nAnd we're going to be able to see it.\nNow, this is an if statement.\nWhich we will talk more about later.\nBut we're checking if the type of myGlobal \ndoes not equal “undefined”.\nSo, it will not equal “undefined” if it has been defined \nand the program knows about the variable.\nSince this is global scope, it does not equal undefined.\nIt equals 10.\nThe program knows about the variable \nbecause this is in global scope.\nSo, since this function can \naccess the myGlobal variable, \nit will run what’s in this if statement where we just \nadd to this output variable, myGlobal.\nAnd then we put the value of myGlobal which is 10.\nNow, here’s another example where we're going to \nsee if the type of oopsGlobal equal “undefined”.\nWell, we're going to set that here.\nSo, it is possible to set a variable without \nusing the var keyword.\nSo, I’m going to set this to oopsGlobal = 5.\nSo, you can see here that there is no var keyword.\nSo, normally if you do use a var keyword, since this is \nwithin a function, it will be scoped to that function.\nIf we have the var keyword here, \nthis would be scoped to this function \nso you would not be able to see it in this function.\nHowever, since we forgot to put the var keyword \nin this example, \nthere’s no var keyword, it becomes \nglobal automatically.\nThat means you can access it anywhere else \nin the program including here.\nSo, if we put the var keyword, then oopsGlobal \nwould equal “undefined”.\nAnd then we would never have this line in the output.\nHowever, since we did not put the var keyword, \noopsGlobal = 5 \nand this will be added to the output – \noopsGlobal and then the colon 5.\nSo, when we console.log the output \nit’s going to say myGlobal 10, oopsGlobal 5.\nNow actually it’s not going to say that \nbecause this is in Scrimba.\nAnd in Scrimba it’s more careful and just enforces \nthe fact that you have to use a var keyword.\nBut if we were in our browser \nit would not enforce the var keyword.\nAnd then it would actually show myGlobal 10, \noopsGlobal 5.\nIf this was a little complicated, \ndon’t worry about that \nbecause a lot of these concepts we’ll be going over \nagain later with additional examples.\n[Local Scope and Functions]\nVariables which are declared within a function as well \nas the function parameters have local scope.\nThat means they’re only visible from \nwithin the function.\nLet me show you what I mean.\nIf I declare a variable right here, myVar = 5.\nSo, we've declared this variable inside a function.\nSo, this variable, myVar is only visible \ninside the function.\nSo, it says console.log(myVar).\nIt should console.log the 5.\nSo, we're going to call the function here.\nAnd it’s going to console.log myVar.\nBut then the program is going to run this console.log \nthat’s outside of the function.\nIt’s still going to try to access myVar.\nAnd so, let’s see what happens.\nYou can see in the console that first there’s a 5 \nbecause it console.log within the function, \nthen there’s an error because it tried to access \nmyVar outside of the function.\nSo, really, we just need to delete this where we try \nto access the variable outside of the function.\nAnd now there is no error.\n[Global vs Local Scope in Functions]\nIt is possible to have both local and global variables \nwith the same name.\nWhen you do this, the local variable takes precedent \nover the global variable.\nLet me show you an example.\nHere we have a function called myOutfit \nthat’s going to return outerWear.\nThat’s this variable up here.\nThis is a global variable because \nit is declared outside of the function.\nSo, when we console.log the output \nof the myOutfit function, \nthe myOutfit function is going to return outerWear \nwhich is the word “T-Shirt”.\nSo, let’s just check the console \nand you can see, yep \"T-Shirt” is there.\nHowever, let’s change this up a bit.\nSo, you have some space here because \nI’m going to put var outerWear = “sweater”.\nSo, now if I run this program \nyou can see in the console \nit’s going to say “sweater” instead of “T-Shirt”.\nIt’s because this local variable outerWear took \nprecedence over the global variable.\nAnother interesting thing about this, \nif I do a console.log.\nAnd I console.log the outerWear variable, \nwe'll see that it’s still “T-Shirt.”\nSo, first you see in the console it says \nsweater and T-Shirt.\nSo, first we console.log this function \nwhich is sweater – it returns sweater.\nAnd then we console.log the global variable \nwhich is T-Shirt.\n[Return a Value from a Function with Return]\nYou can return a value from a function \nwith this return statement.\nSo, we have this function here.\nAnd we’re passing a number into it – the num.\nAnd then it’s going to return \nwhatever is after the return keyword.\nIn this case, num-7.\nSo, here we're going to console.log the function.\nAnd it returns the result of -7, is this 10-7, which is 3.\nSo, it’s going to console.log the number 3.\nIf we look in the console, yep, it console.log \nthe number 3 because the function returns 3.\nLet’s try creating another one.\nThis function is going to be called timesFive.\nAgain, we'll pass in a number.\nAnd it’s just going to return something.\nIt’s going to return the num * 5.\nAnd then just like before, we can test it \nusing a console.log (timesFive) \nand we'll pass in the number 5 here.\nAnd if I run this, we'll see that it retuns \nthe number 25.\n[Understanding Undefined Value Returned \nfrom a Function]\nFunctions can have return statements, \nbut they don’t have to.\nIn this case, this function adds 3 to the sum variable \nwhich is a global variable \nbecause it’s defined before the function.\nIt does not return anything.\nSo, if you don’t specify a return value, \nthe return value is just undefined.\nNow I’m going to create another function \nthat is similar.\nThis is going to be called addFive().\nAnd this time we'll just do sum = sum+5.\nOr we can shorten this to use the +=.\nSo now that’s going to add five to the sum also, \nbut it’s not going to return anything.\nSo, if we log this out, it would be undefined.\n[Assignment with a Returned Value]\nIt’s simple to assign a returned value to a variable.\nSee right here we have the function change.\nAnd you pass in a number and it’s going to return \nthe result of this mathematical expression.\nSo, when we call the function change \nand pass in the 10, \nthe value that is returned from this function \nis going to be stored in this variable here.\nWe can do the same thing down here.\nFirst we initialize the variable processed \nand processedArg.\nIt’s going to return the result \nof this mathematical expression.\nSo, I can set processed to equal \nwhat this function returns.\nSo, I can say processedArg.\nAnd then I’ll just pass in the number 7 here.\nAnd now processed equals the result \nof this mathematical expression.\n[Stand in Line]\nIn computer science a cue is an abstract data structure \nwhere items are kept in order.\nNew items can be added to the back of the cue and \nold items are taken off from the front of the cue.\nWe're going to simulate that right now, some of the \nfunctionality of a cue using this nextInLine function.\nSo, the purpose of this is to show \nthat in this nextInLine function \nyou can add an item to the array that’s passed in.\nAnd then it’s going to return the first item on the list.\nFor instance, if we have this array right here, \nif we add an item to this array \nit should come after at the end.\nSo, it should come after 5.\nAnd then it should return the first item on the list.\nIn this case, it’s 1.\nSo, you see, we had some console.log set up.\nSo, it should show what the list looks like, \nthe array looks like beforehand.\nAnd then show what it looks like afterwards.\nThis JSON.stringify is just a way \nto change an array into a string \nthat can easily be printed out to the screen.\nSo, to do this, we're just going to have to do two \nthings that we've learned about already.\nSo, the first thing is to add the item onto the list.\nSo, we see right here, nextInLine passed \nin the testArr and 6.\nSo, we're calling this function nextInLine.\nWe're passing in this testArr here.\nAnd the number 6.\nWe want the number 6 to be added \nto the end of the array.\nSo, we'll just do arr.push().\nAnd then I’ll put in (num).\nJust like that.\nOh, actually, it’s (item).\nSo, what we did, we took this array \nthat was passed in here which is in this case, testArr.\nAnd we push the time that was passed in.\nAnd in this case here, it’s item 6.\nNow we want to return the first item on the list.\nWe want to remove and return this item.\nSo, that we console.log here \nit should show the number 1.\nSo, instead of returning item, \nI’m going to return arr.shift().\nThat’s what shift does.\nShift moves the first item \nand returns that first item.\nSo, let’s check this out.\nOkay, you can see before, [1,2,3,4,5].\nThen we've popped off the 1 \nand after it is [2,3,4,5,6].\nWe did it.\n[Boolean Values]\nBooleans are another datatype in Javascript.\nThere are only two values, true or false.\nThey’re basically little on/off switches \nwhere true is on and false is off.\nThey don’t use quotation marks around the Boolean.\nSee, it just says return false.\nSo, this is a function here.\nIt should be indented, where it’s going to \nreturn false when you call this function.\nIt could also be true.\nSo, we could return true.\nYou can use true and false in more places \nthan just function returns \nand we'll be talking more about that later.\n[Use Conditional Logic with If Statements]\nAn if statement is used to make decisions in code.\nThe keyword If tells Javascript to execute \nthe code in the curly braces \nunder certain conditions defined in the parenthesis.\nSo, here is a full if statement right here.\nAnd there’s always parenthesis after the keyword if.\nAnd here’s the condition.\nSo, if the stuff inside these parenthesis \nevaluates to true,\nthen the code within these curly braces \nwill be evaluated or run.\nSo, in this case, it’s a variable.\nSo, if the isItTrue variable is true, \nit will return “Yes, it’s true”.\nNow if this is not true, then we'll get to \nthe second return statement \"No, it’s false”.\nSo, this whole function here takes in a variable.\nAnd we check if that’s true or not.\nSo, I’m going to make another example just like this.\nWe have another function \nthat hasn’t been filled out yet, trueOrFalse.\nAnd there’s a variable that’s passed in (wasThatTrue).\nSo, we'll say if – and then the parenthesis \n(wasThatTrue).\nIf that’s true, we're going to return something.\nIt will be a string just like before.\nAnd the string is \"Yes, that was true”.\nIf it’s not true, then we'll get to the second return \nstatement in the function.\nAnd we'll return a different string.\nWe'll return “No, that was false”.\nI’ll just add some semicolons, \nand then I can run this.\nAnd we'll see what happens.\nOh, return needs to be spelled correctly.\nSo, let me spell return correctly.\nSo, before I run this, I’m going to add a console.log.\nSo we can console.log the answer.\nSo, this is the function call here, true or false.\nWe’re passing in true.\nAnd then we're going to log what is returned here.\n“Yes, that was true”.\nSince we passed in true, this if statement evaluates \nto true and this code is run right here.\n[Comparison with the Equality Operator]\nThere are many comparison operators in Javascript \nthat will return a Boolean of true or false.\nThe most common is the equality operator.\nAnd it’s often used in an if statement.\nSo, here it just says if (val).\nSo, we have this whole if statement right here, if (val).\nWe're going to see if if (val) = 12.\nNow, to check if it equals 12, \nwe're going to have to use the ==.\nThat is the equality operator \nand we'll say if (val == 12).\nThe reason why we can’t just use a single equal sign \nis that a single equal sign is the assignment operator.\nIf we just had a single equal sign, \nthat would mean that we were setting the value \nof the val variable to equal 12.\nWe're not trying to set this to equal 12, we're trying \nto check if the value of this variable equals 12, \nso we have to use the double equal sign.\nSo, now, this testEqual function is going to test \nto see if the number we pass in is equal to 12.\nI can do a console.log here.\nConsole.log.\nAnd then we can see what appears \nin the console here.\n“Not Equal” because 10 does not equal 12.\n[Comparison with the Strict Equality Operator]\nWe learned about the equality operator \nwhich is the double equal == sign.\nThere’s also the strict equality operator, \nthe triple equal sign ===.\nSo, here we're checking if 3 equals 3 \nwith the strict equality operator.\nSo, the difference is that the equality operator, \nthe double equals sign attempts to convert \nboth values being compared to a common type \nwhile the strict equality operator \ndoes not do the type conversion.\nSo, this is going to evaluate to true, the 3 === 3.\nBut the 3 === ‘3’ with the string on the side \nis going to evaluate to false.\nBoth of these would be true if we were \nusing the double equals sign == \nbecause the string would be converted \nto a number and it would be equal to true.\nBut with the === it does not get converted to \na number, so it would be evaluated to false – \nthis second one with the three equal signs.\nSo-and-so, here, we're just going to use it \nright in this if statement.\nAnd do === 7.\nSo, now we can pass in the number 7 \nand it’s going to evaluate to true.\nBut if we pass in a string 7, it will evaluate to false.\n[Practice Comparing Different Values]\nWe will do one more review with the equality \noperator and the strict equality operator.\nSo, if I run this here, we'll see in the console \nit says \"Equal” \nbecause it’s checking if the number 10 \nand the string “10” are equal.\nSo, if a = b, the number 10 equals a strict number 10, \nreturn “Equal”.\nSince we're using the equality operator with \ntwo equal signs, it performs a type conversion.\nAnd it converts the string into a number.\nBut if we use the strict equality operator \nwith three equal signs, \nI’ll run that again, and you’ll see “Not Equal” \nin the console \nbecause now it’s not converting the types \nand it’s just checking if a number is equal to a string, \nwhich it’s not, so we get not equal.\n[Comparison with the Inequality Operator]\nNow I will show you the inequality operator \nwhich is basically the opposite \nof the equality operator.\nSo, I’m going to do the inequality operator \nwith an exclamation point and an equal sign.\nIn this case, I’m going to see if the value \nis not equal to 99.\nAnd again, just like the equality operator, \nthis does type conversion.\nSo, let’s just run this program \nand we'll see it is “Not Equal” \nbecause 10 – we passed in 10 \ninto the function here.\nAnd 10 is not equal to 99, so we get “Not Equal”.\n[Comparison with the Strict Inequality Operator]\nThe strict inequality operator is basically \nthe opposite of the strict equality operator.\nNow, it works like this.\nSo, it says if (val) – I’m going to do \nif (val) does not equal 17.\nSo, this is the strict inequality operator.\nInstead of one equal sign we have two equal signs.\nAnd that means it’s going to check if this is not true.\nBut it’s not going to convert types.\nSo, for instance, if we were checking if the number 3 \ndoes not equal the string 3, that would be true.\nSo, in this example, we're just checking \nif 10 does not equal 17.\nIf we run this, we will see it’s not equal.\n[Comparisons with the Logical And Operator]\nWe can also use the greater than operator.\nSo, in this function we're checking \nif a value is over 100.\nSo, I’m going to put greater than 100.\nAnd then here we're checking if a value is over 10, \nso I’ll put greater than 10.\nSo, here we call the function.\nWe pass in 10.\nAnd if I run that function, you'll see \n“10 or Under” because we're not over 100.\nWe’re not over 10.\n10 or under, because we passed in 10.\n[Comparison with the Greater Than \nOr Equal To Operator]\nWe can also use the greater than \nor equal to operator.\nSo, we'll finish this function by using greater than \nor equal to.\nIt’s just a >=.\nAnd we'll put 20 down here.\nJust greater than or equal to 10.\nIf I run that, we should see “10 or Over” \nbecause we're passing in 10 \nand it’s greater than or equal to 10.\n[Comparisons with the Less Than Operator]\nNow I’ll show you an example \nof the less than operator.\nWith this function, we're going to check \nif the value is less than 25.\nAnd then up here we're checking \nif a value is less than 55.\nSo, here, it’s a trick I use to remember which symbol \nis less than and which symbol is more than.\nIf you see the less than symbol looks kind of like \nthe letter L which is the first letter in less than.\nAnd then the more than symbol is just the opposite.\n[Comparisons with the Less Than \nOr Equal To Operator]\nAnd we also have the less than \nor equal to operator we can use in Javascript.\nSo, here, we're going to check if it’s less than \nor equal to 12.\nSo, we just put the less than operator 12.\nEqual – less than or equal.\nThat’s an important part.\nHere it’s the less than or equal to 24 \nto make this statement true.\nAnd if we run, we see “Small Than or Equal to 12”.\nThe number 10 we passed in.\n[Comparisons with the Logical And Operator]\nSometimes you want to check if 2 things \nare true at the same time.\nFor instance, you may want to check \nif this value is less than or equal to 50.\nAnd you also want to check if the value \nis more than or equal to 25.\nSo, here we have a nested if statement.\nSo, it’s going to check if it’s less than equal to 50 \nand if it’s more than equal to 25, \nthen it’s going to return “Yes”.\nBut there’s an easier way to do this.\nSo, what I’m going to do is copy this \nwhere it says value is more than or equal to 25, \nI’m going to delete this nested if statement.\nSo, we don’t need that if statement.\nAnd I’m going to use the And operator.\nSo, we have less than or equal to 50.\nAnd if I put two ampersands, like this, \nthat means and.\nNow, I’m going to put value is more than \nor equal to 25.\nSo, this says if value is less than or equal to 50 and the value is also more than or equal 25, \nthen we're going to return “Yes.”\nSo, both this statement \nand this statement \nhave to be true to get inside \nthis if statement here.\n[Comparisons with the Logical Or Operator]\nIn this code here, we’re checking \nif the value is not between 10 and 20.\nSo, if the value is less than 10, \nwe return “Outside”.\nAnd if the value is more than 20, \nwe return “Outside”.\nThere is an easier way to do this \nwith the logical Or operator.\nSo, I’m just going to delete this \nwhole if statement here.\nAnd then I can add an or statement.\nWhich is just two pipes.\nSo, I’m going to put val is more than 20 here.\nSo, now, we're checking if the value is less than 10 \nor if the value is more than 20.\nEither way, we're going to return “Outside”.\nAnd if it’s not true, we'll return “Inside”.\n[Else Statements]\nWhen an if statement is true, normally the block of \ncode right after the if statement will be evaluated.\nAnd if it’s not true, nothing happens.\nBut with an else statement, an alternate block of code \ncan be executed when it’s not true.\nSo, this is a perfect use case.\nIf value is more than 5, the result is bigger than 5.\nIf the value is less or equal to 5, \nthe result is 5 or smaller.\nWe can do this with an else statement.\nSo, I’m just going to type in else here.\nAnd then we can just delete this whole if statement.\nJust like that.\nAnd now we have if the value is less than 5.\nThe result is going to be “Bigger than 5”.\nElse, if it’s not more than 5, \nwe'll return “5 or Smaller”.\n[Else If Statements]\nIf you have multiple conditions that need to be \naddressed, you can use else if statements.\nIt’s a way of chaining if statements together.\nIn this example, we have three conditions.\nIf value is more than 10, \nwe're going to return greater than 10.\nIf it’s less than 5, return smaller than 5, \nor else we're going to return 5 and up.\nSo, this is a perfect use case for an else if statement.\nSo, this is how we do it.\nWe’ll do else and then just we're going to add \nthe if statement at the end of the else.\nI’m just going to delete all of this stuff.\nSo, else if value is less than 5, \nand then we're going to have one final else statement.\nElse – and I’m going to put this statement here.\nThis final return.\nJust going to cut that.\nAnd then paste in right in there.\nSo now, instead of using multiple if statements, \nwe have the if and then we have the else if, \nand then we have the else.\n[Logical Order in If Else Statements]\nWhen you’re using else if statements order \nis very important.\nLet’s look at this example here.\nIn this function, first we check if the value \nis less than 10 and return less than 10, \nthen else if we check if the value is less than 5, \nand return less than 5.\nWell, if we look at this example \nand we pass in the number 7.\nIf I run this, you’ll see it’s going to say \"Less than 10” \nwhich is what we want.\nHowever, if we put 3 it’s still just going to say \n“Less than 10”.\nReally, we want this to say \"Less than 5” \nbecause it is actually less than 5.\nHowever, this is in the wrong order.\nSo, what we need to do is change the order.\nSo, this should be 5.\nThis should be 5.\nAnd this should be 10.\nAnd this should be 10.\nSo, once the first condition is met, it doesn’t even \ncheck for the rest of and conditions.\nSo, that’s why it’s important to think \nabout the order.\nSo, if we run this now, yeah \"Less than 5”.\nThat’s what we want.\n[Chaining If Else Statements]\nYou can also chain if and else if statements.\nSo, I’m going to complete \nthe following challenge here.\nWrite chained if/else if statements \nto fulfill the following conditions.\nSo, we have these conditions.\nIf the number is less than 5, \nwe're going to return “Tiny”.\nIf it’s less than 10, return “Small”, and so on.\nSo, what I’m going to do is actually just copy this \nright here because this is written –\n part of it is written exactly how \nwe want it to be written.\nI’ll just paste it here.\nAnd I’m going to just add the if and else statements.\nSo, it’s going to be if – \nand then we put this in parenthesis \nbecause the condition is always in paranthesis.\nIf number is less than 5, then we're going to use the \ncurly braces and we're going to return “Tiny”.\nSo, I’ll just move that up here.\nI’ll cut it and paste it.\nNow, we're going to use an else if statement.\nAnd I got the curly braces.\nFirst of all, also I need to put the condition \nin these parenthesis.\nI’m just going to cut this.\nNumber is less than 10.\nPut it right here.\nAnd we're going to return this “Small”.\nSo, I’ll put that in the curly braces here.\nAnd then we have another else if statement.\nElse if and the condition.\nJust like before, the number is less than 15.\nPut that in there.\nWe always need the curly braces to show \nwhat’s going to happen in the if statement.\nSo, I’m just cutting and pasting this text again.\nWe have an else if.\nAnd then we have this here.\nAnd we have return “Large”.\nAnother – actually, the final thing \nis just going to be else.\nWe don’t even need an else if \nwith this statement at the end.\nWe don’t even need to put the condition \nbecause if it’s more than or equal to 20 \nthat’s going to be everything else.\nSo, I’m just going to cut this.\nWe don’t need any of this stuff here.\nAnd we're just going to return “Large”.\nSo, with this one test here, for test 7, \nwe can actually console.log that.\nConsole.log.\nAnd see what it returns for 7.\nWe can try a few different things.\nOh, we have an error here.\nOh, forgot to – I put this parenthesis the wrong way.\nLet’s try that again.\n“Small” but if this is 20, it should be “Huge”.\nAnd if it’s 19, which would be less than 20, \nwe should see “Large”.\nYep, that worked.\n[Golf Code]\nIn the game of golf each hole has a par \nwhich means the average number of strokes you’re \nsupposed to use to get the ball into the hole.\nSo, depending on how far above or below par \nyour strokes are, there’s a different nickname.\nSo, here are some of the nicknames \n\"Hole-in-one!” “Eagle” “Birdie” “Par” \nand we're going to write a function where you pass in \nthe par and you also pass in the strokes.\nYou can see up here, par and strokes.\nAnd it’s going to return the nickname.\nSo, that’s what we're going to write.\nYou can see this table here shows what we have to do.\nIf the strokes are 1, then you get “Hole-in-one!”.\nIf the stroke is less than or equal to par-2, \nyou get an “Eagle”.\nAnd so on.\nAnd we also have this array that’s \ngoing to make it easier \nbecause we can just use things from this array \ninstead of typing out the words.\nSo, we're going to start with an if statement.\nIf – and then we have to put the condition.\nIf (strokes) == that’s the equality operator.\nWe don’t want to use a single equals sign \nbecause that would be the assignment operator.\nIf it equals 1, then we can return.\nAnd we can see down here, \nwe're going to return “Hole-in-one!”.\nBut we can just use it from this names array.\nSo, it’s going to be names.\nAnd this is going to be index zero of the array.\nSo, we'll do names and then [0].\nAnd then we can do an else if.\nElse if – and then we can put the condition, (strokes).\nI have to spell strokes right.\nStrokes.\nAnd then we can just actually copy this \nright from here.\nLess than or equal to par-2.\nAnd then we are going to return name \nand this will be the index[1] which is an “Eagle”.\nAt this point, I can do some copy and pasting.\nI’m going to copy this whole thing \nbecause a lot of the rest of this will be else if.\nSo, else if strokes is – this time \nit’s going to be equal to par-1.\nAnd we're going to return “Birdie” \nwhich is array index[2].\nAnd I’m going to continue just like this.\nSo, this time it’s if strokes equal par, \nwe're going to return name index[3].\nSee?\nZero. One. Two. Three.\nIt’s going to be the word par up.\nKeep just like this.\nNow it’s going to be par+1.\nAnd we'll change this to [4].\nNow it’s going to be par+2.\nAnd we’ll change this to [5] \nwhich is going to be the double bogie.\nAnd finally, if strokes is – change this to more than \nor equal to par+3 \nthat means you did very poorly \nso you should just go home.\nSo, it’s going to be name index[6].\nAnd we don’t need this anymore.\nSo, now we're going to do some tests here.\nI’m going to do a console.log.\nAnd we're going to pass in the function \nthat we're calling.\nSo, in this case, the par is 5 \nand the strokes are 4.\nSo, that should return “Birdie”.\nLet’s see what happens.\nNull.\nOkay.\nThat’s not what I expected.\nIt’s because this should be names.\nI spelled this wrong.\nThat’s why it’s sometimes better to check \nbefore you go through the whole thing.\nYou can test things as you go.\nBut let’s do that again.\nYep \"Birdie”.\nAnd if I type in 2 here \"Eagle”.\nIf I type in 8, it’s probably going to tell us to go Home.\n“Go Home!” Yep.\nWe just completed this challenge.\n[Switch Statements]\nInstead of using chained else if statements \nyou can use a switch statement.\nA switch statement tests a value and can have many \ncase statements which define various possible values.\nSo, let me show you how that works.\nHere we're going to write a switch statement \nwhich tests val and sets the answer \nto the following conditions.\nIf we pass in 1, the answer should be “alpha”.\nIf we pass in 2, the answer should be “beta”.\nAnd so on.\nSo, let me show you how that works.\nWe'll just type in the word switch.\nThat’s the keyword here.\nAnd we're testing the val that’s passed \ninto this function.\nSo, it starts off kind of like an if statement.\nAnd right now – so, we're going to compare \nthe val to the different cases that we have.\nSo, we'll have case and the first number \nis going to be 1.\nSo, here we're saying if the case of val is 1, if val = 1 \nand it’s using the strict equality operator, \nso it’s like the ===, \nit’s going to make sure that the type \nof the variable are the same.\nSo, a string ‘1’ and a number 1 will not be equal.\nBut if the case is 1, then we're going to \nset answer to = “alpha”.\nAnd then we're going to break.\nBreak means that we're at the end \nof that case statement.\nAnd once you break it, it just goes to the end \nof the switch statement \nand doesn’t evaluate anything else \nin the switch statement \nSo, we're also going to have case 2.\nAnd one thing I forgot, that we're going to indent that \nso it’s easier to see the different cases.\nAnd case 2, the answer is going to equal to “beta”.\nAnd then we also need the break statement.\nIf you don’t have a break statement it will just run \nthrough to the next case statement automatically.\nSo, if the case was 1 and you did not have a break \nhere, first it would set the answer to “alpha”.\nAnd then it would set the answer to “beta”.\nIt would just skip over to the next case statement. \nThe break is here.\nIt’s going to go out of the\nswitch statement completely.\nSo, it would go – start running the code \nafter this last curly bracket.\nSo, now we're going to do case 3.\nWe’ll just do some copying and pasting here.\nAnd we're going to have 4 cases \nso I’ll just do the rest of the pasting here.\nSo, we’ll have 3 and 4.\n“alpha” “beta” and then we have \n“gamma” and “delta”.\nAnd we know that the switch statement is over \nbecause we have this final curly bracket.\nAnd then we're just going to return answer.\nSo, let’s do some tests.\nTo really test this, we're going to have to add a \nconsole.log here to log what it’s going to be.\nAnd I’ll run this.\n“Alpha” good.\nNow 2 should be “beta”.\n3 should be “gamma”.\nGood.\nAnd we'll just assume 4 is correct so we're done.\n[Default Option in Switch Statements]\nNow we'll talk to you about the default option \nin a switch statement.\nThe default option is kind of like else \nin an if else statement.\nSo, here’s a switch statement that’s very similar \nto the one we already saw.\nAnd it’s inside this function \nwhere we pass in a value into the function.\nAnd we're going to check if the value equals a.\nIf it equals a the answer is going \nto be sent to “apple”.\nB, answer set to “birds”.\nC \"cat”.\nSo, in this example we can see \nthat we passed in here \n– we passed in the a and it returned “apple” \nbecause that was one of the options.\nBut what if we pass in something else?\nIf I pass in the number 2 here it’s going to return \nan empty string.\nThat’s because the answer is set to an empty string \nand we never override the answer here \nso it just returns the empty string.\nWhat if we want to return something \nanytime a, b, or c is not passed through.\nSo, for anything else that’s passed into the function, \nwe're going to do default.\nThis is like the else statement.\nSo, the default, we're going to do answer = “stuff”.\nAgain, we're going to have the break.\nBut now, whenever we pass in something \nthat’s not a, b, or c, it’s going to return “stuff”.\nSo, we can pass in 5.\nIt’s going to return “stuff”.\nBut if I go back to passing in c, one of the things \nwe have a case for, it’ll return “cat”.\nAnd that’s the switch statement.\n[Multiple Identical Options in Switch Statements]\nSometimes you want a switch statement \nwhere multiple inputs give the same output.\nWell, that’s easy enough by omitting \nthe break statement.\nLet me show you how that works.\nSo, let’s get a switch statement here.\nAnd we're going to have val, \nthat’s what’s passed into the function.\nAnd then this case we want the case \nof 1, 2, and 3 all to return the answer of low.\nSo, I can do it like this, case 1 – \nand I can go straight into case 2.\nAnd then I can go straight into case 3.\nAnd since I don’t have any break statement \nbetween these cases, \nit will just keep going to the next one automatically.\nAnd now, I’m going to say that \nthe answer is going to be set to equal “Low”.\nAnd here is where I put the break statement.\nOkay, now we're going to do the same thing \nwith cases 4 through 6.\nAnd actually, I’m just going to do \nsome copying and pasting.\nI’m going to copy all this.\nAnd now we're going to paste.\nThat’s 4, 5, 6.\nWe're going to do the same thing with 7, 8, 9.\nSo, I’m going to do copy and paste again.\nAnd then I’m just going to update the code.\nSo, this is going to be 4, 5, 6.\nAnd we'll have 7, 8, 9.\nAnd we're going to have “Mid” and “High”.\nSo, if the case is 1, 2, or 3 – like for instance, if it’s 1, \nit’s going to pass through 2 and 3 to get low.\nAnd then it’s going to break about it.\nIf it’s 4, 5, or 6, it’s going to pass through to get to \n“Mid” and then it’s going to break out 7, 8, and 9.\nIt’s going to pass through to the “High” and break out.\nSo, let’s test this out and see.\nSince we're passing in the number 1 here \nit’s going to be “Low”.\nBut if we pass in 5, we should get “Mid.”\nAnd if it’s 7, 8, or 9, we should get “High”.\n[Replacing If Else Chains with Switch]\nSometimes a switch statement can be easier \nto write and easier to understand \nthan a chain of if else statements.\nSo, we're going to change this chain \nof else if statements to become a switch statement.\nSo, let’s do that right now.\nSo, we're going to start with the switch keyword \nand we're going to be evaluating \nthe value with open curly bracket, \nand we'll have to make sure to have \nan end curly bracket at the end.\nSo, for a case “bob” we're going to set \nthe answer to “Marley”.\nAnd then we need to have a break in here.\nFor case 42 we're going to set \nthe answer to “The Answer”.\nFor case 1 we’ll set the answer to \n“There is no \n1”.\nWe need a break up here.\nFor case 99 the answer is \n“Missed me by this much!”.\nAnd then we need a break.\nNow we have for case 7 – 7, 8, 9, and break.\nAnd now we just changed that chain \nof else if statements into a switch statement.\n[Returning Boolean Values from Functions]\nHere’s a little trick when you want a function \nto return a Boolean, a true or false value.\nYou can see in this function, \nwe're checking if a is less than b.\nAnd if so, we return true, else we return false.\nYou may remember from before the all comparison \noperators return a Boolean true or false value.\nSo, instead of using this if statement here \nwe can just – \nwe can actually delete all of this \nand just return the result of this, return – \nwe’re just returning the result of a is less than b.\nSo, this is going to be true or false.\nAnd we can just skip that whole if statement logic \nand just return this.\nSo, if we console.log this out, console.log, \nwe should be able to see if 10 is less than 15.\nIt is less than 15.\nIt’s true.\nBut if we put a 20 here then it’s false.\n[Returning Early Pattern from Functions]\nWe've already seen a few examples of this.\nBut you can return early from a function \nwith the return statement.\nSo, if you see this function right here, \nwe return at the very end of the function, \nso it leaves the function and returns this value \nfrom the function.\nBut you can leave the function any time \nwith a return statement.\nSo, we're going to modify this function \nso that if a or b are less than 0 \nthe function will immediately exit \nwith the value of “undefined”.\nSo, let’s do that.\nWe're going to set an if statement.\nIf a is less than 0, or – that’s two pipes.\nB is less than 0 then we're going to return undefined.\nSo, we can do a test here, console.log.\n8.\nBut what if this is a negative number?\nIt’s going to return undefined.\nScrimba has a little quirk here where it just shows null.\nBut in a browser it will show undefined.\n[Counting Cards]\nWe are going to create a blackjack \ncard counting function.\nSo, how card counting works, at least \nhow this function is going to work, \nis that when you see a low card, \nthe count goes up.\nAnd when you see a high card, \nthe count goes down.\nAnd if it’s a middle value card, \nthe count stays the same.\nAnd then when the count is positive, \nthe player should bet high.\nAnd when the count is a zero or negative, \nthe player should bet low.\nSo, we are going to use a switch statement \nto figure out what card has been passed in \nand what to do about it.\nYou can see that the function looks like this – \ncc and we pass in card.\nAnd depending on what the card is, \nit’s going to increase this global count variable \nor it’s going to decrease it, \nor it’s going to stay the same.\nAnd then we are going to return two things.\nWe're not going to return “Change Me”.\nWe're going to return the current count value \nand whether the player should hold or bet.\nSo, every time you call the cc function it’s going to \nchange this count value and return the total count.\nSo, let’s see how this is going to work.\nWe are going to use the switch statement, like I said.\nAnd we're going to check the card value \nthat was passed in.\nSo, if the case is 2, 3, 4, 5, 6, we are going \nto increment the count variable.\nSo, we're going to do it like this – case 2.\nI’m going to do some copying and pasting.\nIf the case is 2, 3, 4, 5, 6, we'll just have \nto change these values.\n3, 4, 5, 6.\nNow, there are many ways to write any program.\nThis could be done with if statements \nand else statements.\nIt could be even done with other ways \nthat we haven’t even talked about yet.\nAs long as the program works, in this case, \nthat’s all that matters.\nSo, if you find a different way to write this program, \nthat’s great.\nSo, if the case is 2, 3, 4, 5, or 6, \nwe are going to take the count value.\nAnd if we just do ++, it increments it by 1.\nAnd then we're going to break.\nNow, if the case is 7, 8, 9 – \nso let’s paste in three of these.\nWe’ll do 7, 8, 9.\nActually, we're going to do nothing.\nThe count is not going to change at all.\nSo, we don’t even need case 7, 8, or 9.\nSo, instead of doing 7, 8, 9, we just need to check \nin the case that something is actually going to happen.\nSo, we are going to decrement the count variable \nif we have 10, Jack, Queen, King, or Ace.\nSo, that’s what we're going to change this to.\n10 \"Jack”.\n“Queen”.\n“King”.\nor “Ace”.\nIn this case, we're going to decrement the count.\nSo, we're going to do count --.\nSo, that’s the same as count = count -1.\nAnd then we will break.\nNow we've taken care of the count \nand updating the count, \nnow we have to take care of \nwhat we're going to return.\nWe are going to return the count.\nAnd we're also going to return \nwhether we are going to hold or bet.\nSo, we're going to actually return a variable.\nBut first there’s going to be a space.\nThere’s a space between the number \nand then we're going to return the hold variable.\nNow, this is a variable we haven’t created yet.\nNormally, this would be the perfect time \nto use the turn area operator, \nbut we haven’t learn that yet and we're not going to \nlearn that for a few more lessons \nso I won’t use that now.\nWe are going to set what that hold bet value is.\nFirst, we’ll create the holdbet variable.\nVariable holdbet.\nAnd we’ll set it to ‘Hold’.\nHowever, if (count) is more than 0, \nthen we can set holdbet to equal ‘Bet’.\nSo, now this should work.\nLet’s test it out and see \nif we’ve made any mistakes yet.\nholtbet is not defined.\nWe have it right here.\nOh, we spelled that wrong.\nSo, instead of holtbet that should be holdbet.\nOkay.\nIn this case, we're going to bet \nbecause we had a bunch of positive numbers \nand then negative numbers.\nBut if we change this to ‘K’ \nand we change this to 10, let’s see what happens.\nNow we're going to hold.\nOkay, it worked.\n[Build Javascript Objects]\nObjects! \nObjects are similar to arrays \nexcept that instead of using indexes to access data, \nyou use properties.\nSo, here’s an object called ourDog.\nObjects are going to be defined with these \ncurly braces at the beginning and the end.\nAnd these are the properties.\nNow, the properties are everything before the colons.\nSo, we have “name” that’s a property.\n“legs” is a property.\nAnd then the values are the things \nafter the colons here.\nSo, the name is “Camper”.\nThe legs, 4.\nTails, there’s only one tail on this dog.\nAnd “friends” are “everything”.\nNow you can see that the properties can be strings.\nThey can be numbers.\nThey can be arrays.\nThey can be any datatype in Javascript.\nSo, now we are going to create our own dog.\nSo, this is going to have a “name”.\nPersonally, I like the name “Quincy”.\nSo, we'll use that for our dog’s name.\nAlso, we're going to have “legs”.\nUnfortunately, our dog has had an accident.\nHe only has 3 legs.\nBut to make up for only having three legs, \nhe does have 2 tails.\nAnd for “friends”, another unfortunate thing, \nit’s an empty array.\nHe has no friends.\nOkay.\nWe’ve now created our own object.\n[Accessing Object Properties with Dot Notation]\nThere are two main ways to access a property \non an object.\nThe first I will talk about is dot notation.\nSo, we have this testObj.\nAnd we have “hat” “shirt” and “shoes”.\nAnd we want to find out the value of these properties.\nSo, right here the hatvalue \nwe're going to set to testObj.\nNow here’s where we use the dot notation.\nWe just put a dot or a period \nand then I put the name of the property, .hat.\nAnd then for the shirt value, I will do .shirt.\nSo, see this word right here is just a word here.\nSo, the value of hatValue, testObject.hat \nis now going to be “ballcap”.\nAnd the value of the shirtValue is going to be “jersey”\n[Accessing Object Properties with Bracket Notation]\nBesides using dot notation you can also use bracket \nnotation to access a property in an object.\nYou can use bracket notation anytime \nbut it is required if the name has a space in it.\nYou can see in this object we have three properties.\nAnd each of them have a space.\nSo, to get the value of these properties \nwe're going to have to these bracket notation.\nSo, the entreeValue we're going to do testObj.\nThat’s the name of the object.\nAnd then we're going to put brackets \nkind of like an array index.\nSo, you need the opening and closing brackets.\nAnd inside we will put the name of the property.\nSo, I’ll do “an entree”.\nAnd then we can do it again down here \nfor the drink value.\nI’ll use a single quote this time instead of a double \nquote to show that each of those will work.\n‘the drink’.\nAnd then we need the closing brackets here.\nSo now, entreeValue is set to equal hamburger.\nAnd drinkValue is set to equal “water”.\n[Accessing Object Properties with Variables]\nBracket notation can also be used to look up \nobject properties using variables.\nSo, here we have this testObj.\nWe have these different numbers associated \nwith these names here.\nAnd we are going to set this variable \nto be one of the numbers.\nSo, I’ll set this to be 16.\nSo, now we can – in this testObj, 16 is “Montana”.\nAnd we can look that up using the variable name \ninstead of the number.\nSo, instead of putting 16, I’m going \nto put [playerNumber] in here.\nAnd now player is set to the word, \nthe string \"Montana”.\nAnd we use these variable to look up \nthe object property.\n[Updating Object Properties]\nWe can use dot notation to update object properties.\nHere you can see an object called ourDog.\nIt has a name, legs, tails, friends.\nAnd the name is “Camper”.\nHowever, here we used dot notation ourDog.name.\nAnd use the assignment operator, the equals sign, \nto set the name to “Happy Camper”.\nSo, if we do console.log on ourDog.name \nit would no longer be “Camper” \nit would be “Happy Camper”.\nWell, we have another dog here \nwith the name of “Coder”.\nBut we want to change \nthe name to “Happy Coder”.\nSo, that’s what I’ll do right here.\nSo, myDog.name = “Happy Coder”.\nSo, just like above, we use dot notation \nto set the object property to a new value.\n[Add New Properties to an Object]\nYou can add new properties to an object \nusing dot notation or bracket notation.\nSo, here’s an example right here.\nWe have this object, ourDog.\nAnd there’s four properties here.\nBut down here we're adding a new property.\nourDog.bark = “bow-wow”.\nSo, it had four properties but now it has \n5 properties as the property bark as well.\nNow down here we'll add a property \nto the myDog object.\nSo, we can do myDog.\nAnd then here I’m going to use bracket notation \ninstead of dot notation.\n‘bark’.\nI’m going to set that to equal “woof”.\nAnd because he’s yelling it \nwe’ll have an exclamation point.\nAnd that’s how you add properties to objects.\n[Delete Properties From an Object]\nIt’s simple to delete a property from an object.\nOur ourDog object has all these properties.\nAnd with the delete keyword, delete ourDog.bark.\nSo, now this property here, the bark, has been deleted \nand is no longer in the object after we’ve deleted it.\nSo, we can do the same thing down here.\nAnd this time we will delete the tails property \nmyDog.tails.\nSo, now the myDog object no longer \nhas a tails property.\n[Using Objects for Lookups]\nObjects can be thought of as a key value storage \nlike a dictionary.\nYou can use an object too lookup values.\nSo, in this case we have a switch statement \nthat returns certain values.\nSo, when you pass in “alpha” to the function \nit returns “Adams”.\nIf you pass in “bravo” it returns “Boston”.\nWe can replace this switch statement with an object \nand use the object for lookups \ninstead of the switch statement.\nLet me show you how that’s down.\nI’m going to create var lookup.\nThis is going to be an object here.\nAnd the object is going to have \na bunch of key value pairs.\nSo, we have alpha \nand that’s going to be “Adams”.\nAnd then we have “bravo”.\nAnd the value for “bravo” \nis going to be “Boston”.\nAnd that’s it.\nSo, we can now delete this whole switch statement \nand now we can say result = lookup.\nAnd bracket notation we put the value \nthat was passed in.\nAnd then I forgot one thing which was the equals sign \nhere because lookup equals this object.\nAnd let’s do a test.\nSo, let me put console.log \nso we can actually see what happens here.\nSo, if we do “charlie” we're going to get “Chicago”.\nIf we do “foxtrot” the result will be “frank”.\nSo, it works.\n[Testing Objects for Properties]\nYou can check if an object has a property \nwith the hasown property method.\nLet me show you how to use this method \nand finish making this function \nwhere we check if an object has a specific property.\nIf it doesn’t have the property \nwe’ll return “Not found”.\nSo, let me show you how that’s going to work.\nWe’ll do myObj – that’s the object up above.\n.hasOwnProperty.\nAnd then we pass in the property \nwe're going to check which is checkProp.\nThis is either going to come back as true or false \nif it has the property.\nSo, let’s make this into an if statement.\nif (myObj.hasOwnProperty(checkProp)).\nBut if that’s true, we're going to return myObj \nand then use bracket notation [checkProp].\nSo, we're going to return the value of that property.\nElse we're going to return “Not Found”.\nSo, let’s take off this other return statement.\nAnd I’ll do a test.\nSo, when we pass in “gift” here, we returned “pony”.\nBut let’s say we pass in “hello.”\nLoad that \"Not Found”.\nOkay, it works.\n[Manipulating Complex Objects]\nA Javascript object is a way to store flexible data.\nSo, you can store strings, numbers, and arrays.\nAnd even other objects.\nSo, in this example we have an array called myMusic.\nWe can see it’s an array because \nwe have the open bracket and closed bracket.\nBut inside the array are objects.\nSo, this is one of the objects.\nAnd inside the objects are all these key value pairs \nwith the strings and the numbers and so on.\nSo, I’m going to add another object.\nSo, since this is an array, after each element \nin an array, you have to have a comma.\nSo, I’m going to add a comma here.\nAnd then I’m going to add my next record \nright below this comment here.\nAnd we're going to have just like above, \nwe're going to have an “artist”.\nThe artist is going to be “Beau Carnes”.\nAnd then we have a “title”.\nThe title will be “Cereal Man”.\n“release_year” will be “2003”.\nAnd for “formats” this is going to be an array, \njust like above.\nSo, we can have any format.\nI’m going to put “YouTube video”.\nAnd now we've created a second object \nin our myMusic array.\nAnd each object holds data and a property \nwhich is the key value format.\nThis is very similar to JSON \nwhich we will talk more about later.\n[Accessing Nested Objects]\nHere we have an object with \nother objects nested inside that.\nSo, in order to access sub-properties of an object \nyou can chain together the dot or bracket notation.\nSo, I’m trying to get the gloveBoxContents.\nSo, I’m going to take away this undefined here \nand I’ll do a myStorage.car.inside.\nAnd then now the next thing \"car” “inside” \nand the last thing is “glove box”.\nBecause there’s a space here \nwe have to use bracket notation.\nSo, I’m going to use bracket notation on the end here \nand say “glove box”.\nAnd now if we run this – \nsee, we're going to console.log.\nSo, let’s see if we get the contents here.\nYeah \"maps”.\nIt worked.\n[Accessing Nested Arrays]\nArray bracket notation can be changed \nto access nested arrays.\nYou can see we have this array here.\nAnd inside this array are two objects.\nThe first element in the array is this object.\nThe second element of the array is this object.\nAnd then inside the object we have a key value pair.\nThe key is list and the value is another array here.\nSo, we can combine dot notation \nand bracket notation to access the second tree.\nThat’s what we're trying to do here.\nSo, let’s do that.\nFirst we need to do myPlants.\nAnd the trees are the second element \nin the myPlants array, which is index [1].\nNow we need to get the list.\nSo, the list of trees here, \nso I’m going to do .list.\nAnd since .list is an array, I can use the \nbracket notation to get the second list element \nwhich again is array index [1].\nSo, if we run this it’s going to console.log \nand we see “pine”.\nThat’s the second tree here.\n[Record Collection]\nThis is a coding challenge we're going to do.\nWe're given this object here \nwhich is a record collection.\nEach record has an ID and then also has different \npieces of information about the record.\nThey don’t all have the same information.\nBut see, we have “album” “artist” “tracks” \n\"album” “artist” “tracks”.\nThis just say “artist” “tracks” \nand this just has album here.\nAnd we are supposed to create \nthis updateRecords function \nwhere we can pass in the ID, the property, \nand the value.\nAnd it’s going to update our record collection \nwith the property and the value.\nSo, for instance, if we pass in the ID \"2468” \nand we put the property “artist”.\nAnd if we set a different value, like “Quincy” \nor something like that, \nthen we should update this whole object.\nSo now it says “Quincy” instead of Prince.\nAnd we should return the full collection.\nSo, it’s going to update the collection \nand then return the collection.\nIf we have an empty string for the value, \nit should just completely delete that property.\nAlso, if we have the property of tracks \nand then we have a value, \ninstead of updating the whole tracks here \nwith what we put in, \nit’s just going to add the track \nto the end of this array.\nSo, if you look really here, the comment says \n\"Keep a copy of the collection for tests”.\nThis JSON.parse and JSON.stringify \nand then collection, this is just a fancy way \nin Javascript to make a copy of the object.\nRemember, in our function we are going \nto be changing the collection object.\nBut we want to have a copy of the original object \nbefore anything was changed.\nSo, that’s what that’s for.\nSo, let’s go ahead and do that.\nSo, we're just updating this function here.\nThis update records function.\nOkay, so let’s get to this.\nSo we'll do if (value)=== blank.\nBecause the first condition we are going to test for \nis if we need to delete the property.\nRemember, if the value is set to blank \nwe delete that property.\nSo, if the value is blank, \nwe are going to delete collection.\nAnd then we have to use bracket notation [ID] \nand then [prop].\nThe collection[ID][prop], that’s the collection here.\nIf we pass in the ID 1248, it’ll go to there.\nThe property, if we pass in album for the property \nit would go to here.\nAnd then it would just delete that whole thing \nif our value is an empty string.\nOkay, the next condition we have to look for \nis if the property is “tracks”.\nBecause for most properties we're just going to \noverride that property \nwith the value passed into the function.\nBut if the property is tracks, we're going to push \nonto the end of the array.\nSo, let’s do an else if.\nElse if (prop) === “tracks”), then we just have to push \nonto the end of the array.\nSo, there’s also another condition here \nwhich is if the tracks property is empty.\nIf the tracks property is empty, we need to create it.\nHere’s a fancy way to do that.\nCollection[ID][prop] So if prop = tracks, \nwe are going to set the tracks – \nbecause remember prop is going to equal tracks.\nWe're going to set the tracks to equal.\nIt’s going to either equal itself if it exists.\nOr if it doesn’t exist, we're going to create it.\nI’ll show you how.\nCollection[ID][prop].\nIt’s going to equal itself.\nOr – if the or operator is going to equal \nan empty array.\nSo, if this already exists \nwe're going to set it to equal itself.\nBut if itself doesn’t exist, \nwe'll just set it to equal an empty array.\nSo, that’s just a way to create that property \nif it doesn’t already exist.\nSo, now that we know it exists we can just push \nthe value to the end of the array.\nCollection[ID][prop].\nAnd we'll just do the .push \nand then put in the parenthesis, the value.\nSo we're able to push the value that was passed in \nto the function onto the end of the array.\nOkay, there’s only one last condition \nwhich is the kind of the default condition.\nElse.\nSo, if the value isn’t blank \nand the property isn’t tracks, \nthen we just push the value onto the property.\nThen we just set the property to equal the value, \njust like this.\ncollection[ID][prop]=value.\nOkay. Let’s test this out.\nSo, we already have this example down here, \nbut to see if it actually worked, \nwe're going to do a console.log \nso we can see the output there.\nAnd if I run that – oh, let me open up the console \nso we can really see it.\nSo, let’s see what we changed.\nGo to 5439 and we set the artist \nwhich didn’t previously exist to “ABBA”.\nSo, let’s look down here.\nIn the console, 5439 and the artist is “ABBA”.\nLet’s see what happens when we add a track.\nSo, we'll do one more example here.\nI’ll just put it right above here, updateRecords.\nAnd I’m going to pass in something.\nI’ll pass in – let’s see, the ID 2468.\nAnd we'll pass in the key which is going to be “tracks”.\nAnd then for the value, we'll put “test”.\nSo, let’s see what happens here.\nIf we run that, it’s going to update the record here.\nAnd then it’s going to update the record again, \nbut we don’t care about that.\nWe mainly care that it’s going to console.log \nwhat the final value is.\nSo, if we look at 2468 here.\n2468, let’s see the tracks.\nWe got “1999” “Little Red Corvette” and “test”, \nso it’s working.\nGreat.\n[Iterate with While Loops]\nLoops allow you to run the same code multiple times.\nI’m going to talk to you about a while loop \nthat runs while a specified condition is true \nand stops once it’s no longer true.\nSo, we are going to push the digit 0 through 4 \nonto this array.\nHere’s how it’s going to work.\nwhile is the while loop.\nwhile i is less than 5.\nAnd we're going to do something while that’s true.\nFirst, we have to set what i starts off at.\nSo, var i = 0.\nSo, while i is less than 5, \nwe'll do myArray.push(i).\nJust push it onto the array.\nAnd to make sure this loop eventually ends, \nI’ll have to do i++ which increments i.\nSo, then I will test this out by doing console.log.\nAnd I’m going to console.log the myArray.\nSo, let’s see if this works.\nI’ll run this and check the console.\n[0, 1, 2, 3, 4].\nThe while loop worked.\nEvery time it went through this five different times \nand pushed 0, 1, 2, 3 and 4 onto the loop.\n[Iterate with For Loops]\nA for loop is the most common type of loop \nin Javascript.\nSo here is an example of a for loop.\nYou start with the keyword for.\nAnd then we have these parentheses with three \ndifferent items and they’re separated by semicolons.\nThe first thing is the initialization.\nThen we have the condition.\nThen we have the final expression.\nSo, the initialization happens \nbefore any of the code inside the loop runs.\nSo, we will start by initializing i to equal 0.\nSo, this is what most for loops start with, \nis you have a variable that you’re going to initialize \nfor the for loop.\nThen the next thing is the condition.\nSo, once this evaluates to false we break out \nof the loop.\nSo, while i is less than 5 we'll continue to \nrun through the loop over and over \nuntil this is false and we break out of the loop.\nThe final thing is what we do at the end \nof each iteration.\nAt the end of each iteration, we will increment i by 1.\nIn this example, we are filling our array \nwith the numbers 0 through 4.\nI’m going to do another example where we fill \nan array with the numbers 1 through 5.\nSo, we'll start with 4.\nNow, we're going to initialize i to equal 1.\nWe're starting with 1 instead of 0 this time.\nAnd we're going to do i is less than 6.\nSo while i is less than 6 or until i is more than 6, \nwe are going to run all the code in this loop.\nAnd at the end of each iteration, \nwe are going to increment i.\nNow I can just do what we have before.\nmyArray.push(i).\nSo, the final thing we will do is test this.\nI will do console.log and put myArray inside here.\nAnd I’ll just load this and see what we see \nin the console.\n[1, 2, 3, 4, 5].\nIt worked.\nWe iterated five different times and each time \nwe pushed a new digit onto the array.\nAnd at the end of each iteration we incremented i \nso it pushed a larger number onto the array.\n[Iterate Odd Numbers with a For Loop]\nLoops don’t just have to increment one at a time.\nLook at this for loop here.\nWe have our initialization where we initialize i to 0.\nAnd then we are going to run the loop \nuntil i is less than 10.\nAnd finally, our increment, instead of \nincrementing i by 1, we're incrementing i by 2.\nSo, now this is going to push all the even numbers \nonto the array.\nWe have console.log, so let’s log it out \nand see what it looks like.\n[0, 2, 4, 6, 8].\nI’m going to write another loop right now \nthat creates an array of odd numbers.\nSo, let’s do that.\nfor (var) i = 1.\nWe’ll start at 1.\nWhile i is less than 10.\nI can use 10 again.\nI’m going to do i +=2.\nSo, we're still going to count by 2s, \nbut since we're starting at 1 instead of 0 \nthis should give us the odd numbers.\nSo, let’s see what’s going to be inside our loop.\nmyArray.push and I’ll just put i there.\nSo, let’s log this out and see if we did it right.\nconsole.log(myarray).\nAnd I’ll run that.\n[1, 3, 5, 7, 9].\nIt worked.\n[Count Backwards with a For Loop]\nA for loop can also be used to count backwards.\nSo, if we see this for loop here, \nwe’re initializing i to 10.\nWe're starting at 10 and we're going back to 0.\nSo, we're going to iterate through this loop \nwhile i is more than 0.\nWe’re going to keep iterating.\nAnd at the end of each iteration we're going to \ndecrement i instead of increment it.\nWe're going to go down by 2.\ni -= 2 means i=i-2.\nSo, we're going to continue pushing the lower and \nlower numbers onto the array until i is less than 0.\nSo, let’s log this out and see what ourArray becomes.\nYou can see [10, 8, 6, 4, 2].\nWell, I’m going to write another where we’re going to \npush the odd numbers from 9 through 1 to myArray.\nSo, another for loop.\nAnd I’m going to do var i = 9 \nbecause we want to start at 9.\nNow we’ll still do i is more than 0.\nSo while i is more than 0 we're going to \nkeep going through this array.\nAnd we'll do i – and everything else is really the same.\n-= 2.\nAnd this is going to get all the odd numbers \nonto the array.\nSo, we just have to do myArray.push \nand then push on the i there.\nNow we'll just console.log \nso we can see what it ended up as.\nmyArray.\nAnd I’ll run the code.\n[9, 7, 5, 3, 1] We did it.\n[Iterate Through an Array with a For Loop]\nIt is common in Javascript to iterate \nthrough the contents of an array.\nSo, look at this example.\nWe have this array here.\nBefore, we were always adding items to the array.\nBut this time the array already exists.\nRight here, ourArr = [9, 10, 11, 12].\nSo, we are going to start at 0.\nBut now instead of going to a specific number of \niterations, we are going to the OurArr.length.\nSo, the length is 4 here.\nBut if we added elements to this array, \nthat means this loop would just go even longer \nuntil we went through every element of that array.\nAnd then at the end we're going to increment i by one \nat the end of each iteration.\nSo, look at what we're doing inside the array.\nWe're going doing ourTotal that starts off \nat 0 up here.\nAnd we’re doing +=.\nThat means we're going to do ourTotal = ourTotal \nplus something else.\nSo, we're going to keep adding to the total \nwhatever is in the array at that index.\nSo, ourArr[i].\nSo, it starts at 0.\nAnd then it goes 1, 2, 3 until it gets to 4 \nwhich is the length of the array \nand it doesn’t even run the iteration at 4.\nAnd there is no index[4] on the array.\nRemember, it’s 0, 1, 2, 3.\nSo this is just going to add up all those numbers.\nIf we run this we can see it adds up to 42.\nI’m going to write another for loop down here that’s \ngoing to add up all the numbers in this array here.\nSo, we'll do for (var i = 0).\nAnd then we’ll do i is less than myArr.length.\nAnd i++.\nSo, just like before.\nFor each element in myArr we're going to do a total \n+= myArr index [i].\nSo, we have to initialize the total variable \nright up here.\nSo, we'll do a var total = 0.\nAnd then at the end we’ll just console.log that out \nto see what the total is.\nSo, if I just run this we can see that the total \nthis time is 20.\n[Nesting For Loops]\nIf you have a multidimensional or nested array, \nyou can use nested for loops to access \nall the array elements.\nSo, for instance, we have this multiple all function.\nIt’s defined up here, but we're calling it here \nand we're passing in this multidimensional array.\nWhich is basically an array with the arrays \ninside the array.\nSo, inside the first array there are three elements.\nOne.\nTwo.\nThree.\nAnd you can see each of those elements are in array \nwith their own set of elements.\nSo, we are going to use nested for loops \nwithin this multiply all function \nto multiply every number in these nested arrays here.\nSo, let’s get started.\nWe're going to start with a for loop.\nAnd it’s going to look just like the other for loops \nthat we started.\ni = 0.\nWe’re going to initialize i to 0.\nAnd then we're going to say \nwhile i is less than arr.length.\nAnd then we're just going to \nincrement i at the end of each iteration.\nNow, arr.length, that’s going to start off \nas 3 because we're passing in this array.\nAnd the first level of the array, there’s just\none, two, three elements.\nSo, that’s going to be 3.\nBut now, we're going to go inside this for loop \nand create another for loop.\nSo, we're going to do var j = 0.\nNormally, it’s standard practice to call \nthe variable that we're incrementing i, \nbut we already have an i within this scope.\nSo, we need to create another name and it’s pretty \nstandard to call the next variable j because j is after i.\nSo, now we're going to do a j.\nwhile j is less than – \nnow this is where it gets a little tricky.\nWe're going to do while a \nis less than arr index[i].length.\nAlso, we're going to increment j here.\nSo, this is going to change.\nSo, the first iteration of this outer for loop, \nwe're looking at the length of this array.\nThen we're looking at the length of this array.\nThen we're looking at the length of this array.\nThe index is going to be different every time \nso we're going to be going to each different array \ninside the nested array.\nSo, at this point, we just have to multiply \nall the numbers together.\nSo, we already have the product \nthat we've defined above.\nSo, we're going to do product *= \nwhich is just going to multiply everything together.\nAnd we're going to do arr[i][j].\nSo, the i references the outer array \nand the j references the inner array \nwithin what we're passing in.\nAnd now we're done.\nSo, let’s – we have the console.log here \nso let’s run this and see what happens.\nAnd 5040.\n[Iterate with Do…While Loops]\nNext I’m going to talk about do while loops.\nNow we already talked about while loops \nand I’m going to review this while loop \nand then I will tell you how a do while loop \nis different than a while loop.\nSo, this while loop first checks the condition \nbefore it runs any code within the loop.\nA do while loop will always run at least one time \nand then it will check the condition.\nSo, here we have this empty array.\nWe have i = 10.\nSo, while i is less than 5, well, i is not less than 5 \nso it’ not going to do anything.\nLet’s see what happens.\nSo, we see it logged out 10 \nand then an empty array because i started as 10 \nand myArray started as this empty array.\nSo, you were logging the i in myArray.\nWith a do while loop, it’s different.\nSo, what I’m going to do is cut this line up here \nand put it at the end.\nAnd then at the beginning \nI’m going to put the keyword do.\nIn a do while loop, this is always run at least once \nbefore it checks the condition.\nSo, first it’s going to do these things \nand then it’s going to check the condition.\nIn this case, it’s going to find out the condition is false \nand it’s going to break out of the loop.\nLet’s see what happens here.\nSee, now i is 11 and the array has the 10 added to it.\n[Profile Lookup]\nThis is a coding challenge.\nWe have this array of objects in our contacts list.\nAnd you’ll see each object is one of our contacts.\nWhat the first name, a last name, a number, and likes.\nSo, these are key value pairs here.\nSo, what we want to do is create this lookUpProfile \nfunction where we pass in a name.\nThis is a first name.\nAnd the property.\nand it’s going to return the value of that property.\nFor instance, if we pass in the name “Kristian” here \nand we pass in the property of “number” \nit should return “unknown”.\nIf we pass in the first name of “Sherlock” up here \nand we return the property \nand we pass in the property of “likes” it should return \nthe array “Intriguing Cases” and “Violin”.\nIf the name that’s passed in does not correspond \nto any contacts, \nthen our function should return “No such contact”.\nAnd if there’s no property, it should return \n“No such property”.\nSo, let’s go to this function here and start creating it.\nSo, the first thing we're going to have to do is iterate \nthrough each element in the contacts list.\nSo, let’s make a for loop.\nSo, for (var i = 0) while i is less than contacts.length.\nAnd at the end of each iteration we'll do i++ \nto increment that.\nSo, for each of these contacts the first thing we're \ngoing to check is if the name is a name in this list.\nSo, if(contacts[i].firstName ===\nThe name that was passed in.\nSo, we're checking each item to see \nif it was the name that was passed in.\nAnd if so, we're going to do something.\nNow, if not, we're going to do something else, \nso let’s do that now.\nRemember, if the name that was passed in \nis not in the array, \nwe're going to return “No such contact”.\nIf it is in the array we're going to go something else.\nIf the name is in the contacts list we're going to return \nthe value of the property that was passed in.\nSo, return contacts[i][prop].\nSo, this will return the value of that property \nthat was passed in.\nHowever, there’s another case which is if the property \ndoes not exist we return “No such property”.\nSo, a fancy way in Javascript of \nsaying use this value if it exists, \nbut otherwise use a different value \nis to use the or operator.\nSo, we'll say return contacts[i][prop] or if it doesn’t \nexist, we're going to return “No such property”.\nAnd just so you know, there would be a way to do this \nwithout using this or operator \nas long as that your code passes the requirements, \nthat’s all that’s important.\nThere’s many ways of doing this.\nBut let’s check it.\nSo, right now we have our lookUpProfile.\nWe're passing in “Akira” and we're trying \nto find the “likes”.\nAnd we're console.logging the data.\nAnd “Pizza” \"Coding” \"Brownie Points”.\nSo, what if we passed in something else?\nIf we passed in “Shirlock”.\nPass in “lastName”.\n“No such contact.”\nWell, that’s working \nbecause I spelled “Sherlock” wrong.\nThis is E.\nSo, this is a good way to test that.\n“Holmes”.\nAnd the last thing we'll check is if we pass in \na property that does not exist.\nI’ll just say “Hello”.\nAnd “No such property”.\nSo, our function works.\n[Generate Random Fractions]\nThere is a simple way to create \na random decimal number in Javascript.\nIt’s with the math.random function.\nSo, we have this function here \nwhich just says randomFraction.\nAnd it’s returning 0 currently.\nBut we're going to use the math.random function.\nAnd you well see that when I run this \nwe have 0,2003813741 and so on.\nSo, it’s always going to be a number \nbetween 0 and it could be 0.\nBetween 0 and 1, but it could not be 1.\n[Generate Random Whole Numbers]\nOften you want a random whole number \ninstead of a random decimal number.\nThat can be accomplished with Math.floor.\nWe have Math.floor here.\nThis rounds down to the nearest whole number.\nSo, we pass in (Math.random() * 20).\nAnd then we round down \nto the nearest whole number.\nThis is going to create a \nrandom whole number between 0 and 19.\nRemember Math.random can never be 1.\nIt can be 0, but it can ever be quite 1.\nSo, when we multiply it by 20 we’re going to get a \nnumber between 0 and 20, but not including 20.\nAnd then we round down, \nwhich will end up being 0 to 19.\nSo, let me show you another example \nwhere we're going to get a random whole number \nbetween 0 and 9.\nIt’s going to look just like this.\nSo, we're going to modify this function.\nSo, this Math.random we're going to pass \nthat into Math.floor.\nSo, I have to put the parenthesis \nbecause we're passing that in to that function.\nAnd it’s Math.random * 10.\nAnd that’s going to give us a random number \nbetween 0 and 9.\nSo, if I reload this I can see.\nEvery time I load it, it’s a different random number.\n[Generate Random Whole Numbers within a Range]\nYou can also generate random \nwhole numbers within a range.\nSo, look at this function here, ourRandomRange.\nIt takes a minimum number and a maximum number \nand then it just runs through this calculation here.\nSo, we have the Math.random and we multiply it \nby the maximum or min number + 1.\nAnd then we get the floor which is rounding down.\nAnd we add all that to our minimum number.\nSo, this is just a calculation to get a random number \nbetween the min and max.\nSo, as practiced, I’m going to rewrite it down here.\nSo, we have the random range.\nAnd instead of ourMin and ourMax, \nwe have myMin and myMax.\nHowever, the equation is going to be the same.\nSo, we have Math.floor.\nYou can take a chance to actually just look over the \nequation and see if you can understand how it works.\nmyMax minus myMin.\nAnd then we just have to do + 1.\nAnd then this whole thing is going to be + myMin.\nSo, we already have this example test set up \ndown here.\nrandomRange between 5 and 15 \nand we're going to log it out here.\nSo, let’s try that.\nSee, every number is between 5 and 15 \nwhenever I run it.\n[Use the parseInt Function]\nAnother useful function is the parseInt function.\nIt takes a string and returns an integer.\nA lot of times you want to make sure you’re dealing \nwith integers and not strings \nfor different calculations and things like that.\nIf the string cannot be converted into an integer \nit returns in NaN for Not a Number.\nSo, let me show you how it works.\nFrom this convertToInteger function \nwe are going to return.\nAnd we're going to return the string except \nwe're going to convert it into an integer first.\nSo, we'll do parseInt.\nAnd then I’ll pass in the string.\nNow, it was a string because you can see here \nwe're passing in the string of “56” \nbut it’s going to return it as a number and integer.\n[Use the parseInt Function with a Radix]\nThe parseInt function can also be used with a radix.\nThe radix specifies the base of the number \nin the string.\nSuch as base 2 or base 7 or base 8.\nA base 2 would be binary.\nSo, that’s one of the most common ones to use.\nNow the default is base 10.\nThat’s what we use normally every day.\nBut let me show you how that would work.\nWe're going to convert this number \nwhich is a binary number to an integer.\nSo, we'll do return.\nAnd I will do the parseInt.\nI’ll pass in the string as before, but now we'll have \na second argument after the comma \nwhich is going to be the number 2.\nSo, instead of the default of base 10 \nwe'll be passing it as base 2.\nSo, the computer knows that this is a binary number.\n[Use the Conditional (Ternary) Operator]\nI love the ternary operator.\nIt’s like a one line if else expression.\nNow this is what it looks like.\nYou have your condition just like in an if statement.\nAnd then you would have a question mark.\nAfter the question mark you have what’s \ngoing to happen if the condition is true.\nThen you have a colon.\nThen you have what’s going to happen \nif the condition is false.\nSo, we can replace an if else statement like this \ninto something using the ternary operator.\nSo, here we have if this condition is true, \nwe're going to return true.\nElse, we're going to return false.\nLet’s change this.\nSo, now we're going to use the ternary operator.\nSo now it’s just going to say return a === b.\nThat’s the condition.\nThen we use the question mark.\nSo if it’s true, we're going to return true.\nAnd then we have a colon.\nAnd after the colon we have what’s going to happen \nif it’s false, which is we're going to return false.\nNow I’m going to be honest.\nYou would never write a line like this in real life \nbecause you could just write return a === b.\nAnd this line is actually going to do \nthe same thing as this line.\nHowever, I just want to give you \na simple example of using the ternary operator.\n[Use Multiple Conditional (Ternary) Operators]\nOne of the great things about conditional \nor ternary operators \nis that you can nest them within each other \nwhich gives them even more power.\nSo, we're going to write a function here.\nThe function checkSign.\nAnd it’s going to return the string “Positive” \nif this number is positive \"Negative” \nif the number is negative, or 0.\nAnd we're going to use a nested conditional operator.\nSo, here it is.\nreturn.\nAnd first we're going to check if num is more than 0.\nAnd then we'll use the ternary operator.\nIf so, the first thing after the question mark \nis if it’s true.\nIf it’s true, we're going to return “positive”.\nIf it’s false, if the number is not more than 0 \nwe'll do something else.\nHere is where we're going to have \nanother ternary operator.\nWe're going to check if num is less than 0.\nSo, if the number is less than 0, well, if that’s true, \nwe have to have the question mark \nfor the ternary operator.\nIf that’s true, we're going to return “negative”.\nAnd if it’s false, that’s where the colon comes in, \nwe're going to return “zero”.\nSo, let’s do this checkSign.\nI’m going to do a console.log \nso we can see what this returns here.\nAnd we can see this is going to return “positive”.\nIf we have a negative number here \nit’s going to return “negative”.\nOr if we have a 0 it’s going to return “zero”.\nNow you’ll see that after this colon \nwe have an entire ternary operator.\nSo, if this is true we just return “positive”.\nIf it’s false, then we do everything here \nwhich is another ternary operator \nwhere it checks if this is true.\nAnd if that’s true, we return “negative”.\nAnd if it’s false, it would return “zero”.\n[Differences Between the var and let Keywords]\nFor a long time in Javascript if you were going to \ndeclare a variable you had to use the var keyword.\nBut starting with ES6 in 2015 we can now \ndeclare variables with let and const as well.\nOver the next few lessons I will be talking about \nwhat let and const do that is different than var.\nBut one of the things is that let does not let you \ndeclare a variable twice.\nSo, let’s look at this example.\nYou have var catName = “Quincy”.\nAnd then down here, var catName = “Beau”.\nAnd if I just run this code you’ll see \nthat nothing is happening.\nIt’s just allowing us to set the catName twice \nand declare it twice with the var keyword.\nHowever, if we change this to let.\nWe're going to change all the var to let.\nAnd you’ll see that when we load it again, \nyou’ll see an error, Duplicate declaration “catName”.\nSo, this is good that it’s creating this error \nbecause you usually don’t want to declare a variable \ntwo times in the same scope.\nSo, this allows your program to give you an error \nto tell you that you’ve done something wrong.\nNow you can still reset it.\nSo if we don’t use the word let here \nwe could just set the catName variable.\nAnd now we're not going to get an error.\nIn this case, we're declaring the variable \nhere to be “Quincy” \nand we're setting the same variable \nto a new name here.\nThis is one of the few reasons \nthat many people only use let and const \nand never use var to declare variables.\nAnother thing in this code you can see is “use strict”.\nNow this enables strict mode which catches common \ncoding mistakes and unsafe actions.\nSo, a lot of people will use “use strict” \nat the top of a full Javascript file \nor maybe just in a function to catch coding mistakes.\nSuch as if you create a variable and don’t declare it \nwith var, let, or const.\n[Compare Scopes of the var and let Keywords]\nAnother major difference \nbetween the var and let keywords \nis that when you declare a variable with var, \nit is declared globally or locally \nif declared inside a function.\nHowever, let – the scope of let is limited to the block \nstatement or expression that it was declared in.\nSo, let’s look at this example here.\nIf you see this code, we have this checkScope function \nand we're calling it down here.\nAnd it’s setting i with a var here, the var keyword, \nto “function scope”.\nThen we're setting it to “Block scope” in here.\nAnd you can see it’s console.logging \n“Block scope i is:  “.\nAnd it says “Block scope”.\nAnd when we get down here \"Function scope” \nit’s still “Block scope”.\nIf we want this to be “function scope” down here, \nwe're going to have to use let.\nSo, we would use let here \nand then we would use let here.\nAnd if we run the code, now you can see in the \nconsole \"\"Block scope i is:  “block scope”.\n“Function scope i is:  “function scope”.\nSo, even though we set i to block scope here \ninside this block.\nNow, a block is just anything inside \nthese squiggly braces here.\nSo, with an i inside this block to “block scope”.\nBut then when we get out here, it’s now back to \n“function scope” because of this up here.\nHere’s another thing I want to show you.\nIf this is – if we comment this line out and we change \nthis to var, what do you think is going to happen?\nWell, let’s run it and find out.\nLook, we set the var inside this block here \nto “block scope”.\nAnd it says Block scope is:  “block scope”.\nBut then when we're outside of the block, \nwhen we're outside of this squiggly braces here, \nwe can still access i here.\nAnd it’s set to block scope.\nBut if this was a let and we're declaring it \ninside this block.\nIf we run that now when we get outside the block, \nwe get an error because it’s not defined.\nSo, that’s another reason why people use let \ninstead of var\nis so that they can make sure the variable is only \ndefined in the area they want it to be defined in.\nBut for now I’ll uncomment this out.\n[Declare a Read-Only Variable \nwith the const Keyword]\nConst is another way to declare a variable.\nIt has all the features of let but it’s also read-only.\nYou cannot reassign a const.\nSo, let’s look at this program here.\nWe’re running this printManyTimes.\nAnd it’s going to log out this sentence.\nAnd the sentence is up here.\nvar sentence is declared.\nAnd then we reassign it here.\nSo, first we declare the sentence to be the string \n“ is cool!”.\nThen it’s reassigned to be the string \n“ is amazing!”.\nSo, if we run that it should work.\nIt prints freeCodeCamp is amazing! many times.\nBut if we change this to const let’s see what happens.\nNow I’ll run this and we get an error.\n“sentence” is read-only.\nIf you declare a variable with the const keyword \nyou cannot reassign it afterwards.\nThis can be very helpful to prevent you from accidentally making mistakes later.\nIf you know for sure that you never want to \nreassign a variable, \nalways use const so you don’t accidentally reassign \nit when you don’t mean to.\nAnother thing is when you’re using const \nit’s very common to use all capital letters.\nSo, like this, SENTENCE like that.\nAnd that’s another away to remember that \nit’s a constant.\nSo, if I rename this here, \nI’m also going to have to repeat it here.\nAnd while we're at it, we're going to change this to let \nbecause for the most part \nyou should only use const or let, \nbut there are certain circumstances \nwhere you would use var.\nAnd also in some other videos \nin this course I’ll be using var.\nBut in your own code you should mainly use \nconst and let.\nLet’s reload this to see what happens.\nAnd it worked.\nfreeCodeCamp is cool! many times.\nWe can no longer say that freeCodeCamp is awesome, \neven though we know it actually is.\n[Mutate an Array Declared with const]\nWhile you cannot reassign a variable declare with \nconst you can mutate an array.\nSo, look at this example that’s not going to work.\nFirst we declare the variable s \nand we assign it to an array.\nWe declare with const.\nAnd now we're going to reassign the variable s here.\nBut if we do that we're going to get the error “s” \nis read-only.\nHowever, we can update the array \nusing bracket notation.\nSo, I’ll just comment that out.\nAnd using bracket notation, I’ll do index [0].\nI’ll assign to the 2.\nIndex [1], I’ll assign that to 5.\nAnd then index [2] I’ll assign that to 7.\nAnd just like that it is going to reassign the array.\nSo, if I just do a console.log here.\nConsole.log and put the array in there, \nwe should see the new array here, [2, 5, 7].\n[Prevent Object Mutation]\nAs seen previously, a const declaration alone \ndoesn’t really protect your data from mutation.\nIf you have an object or an array, you can still \nmutate it even if it’s declared with const.\nThere is something called object.freeze \nthat will prevent data mutation.\nSo, let me talk to you about object.freeze.\nFirst of all, let’s understand this function here.\nWe're using this function to demonstrate \nobject.freeze.\nSo, it’s going to create this constant, \na math constant with the Pi in it.\nThis is an object.\nAnd right now this can still be changed.\nSo, if we look down here, this is a try catch block.\nWe'll talk about try catch blocks in more detail later.\nBut for now, you just have to know that it’s going to \ntry what’s in the first part of the block.\nAnd if there’s an error, then it’s going to go into \nthe catch part and it’s going to log it out.\nSo, right now we're going to try to change \nMATH_CONSTANTS.PI to 99.\nAnd if you can see right here, we're going \nto return the MATH_CONSTANTS.PI.\nAnd down here we are putting it \ninto a variable called PI.\nSo, if we run this you’ll see \nthat we console.log PI and it’s 99.\nBut wait a second, we don’t want PI to change \nbecause we know that PI never changes.\nThat’s why we're going to use object.freeze.\nSo, I’ll put it right here.\nI’m going to do object.freeze.\nAnd in parenthesis I’ll put the object \nwhich is (MATH_CONSTANTS).\nNow I’ve frozen MATH_CONSTANTS.\nSo when it tries to change MATH_CONSTANTS.PI \nhere it’s not going to work \nand it’s going to go into this catch block \nand it’s going to log out the error or the exception.\nSo, let me run that.\nAnd you’ll see.\nSo, we had an error.\nAnd we can see here that PI stays the same at 3,1004.\nSo whenever you have an object and you don’t want \nany of the items in the object to change, \nuse object.freeze.\n[Use Arrow Functions to Write Concise Anonymous Functions]\nThis function here is called an anonymous function.\nIt doesn’t have a name.\nIt is assigned to this variable magic.\nBut there’s no word right before the function keyword \nto assign the name to the function.\nWhenever you have an anonymous function \nyou can convert it into an arrow function.\nThat makes it a little quicker to write.\nSo, instead of the word function, \nI’m going to take that out completely.\nAnd then put an arrow here.\nSo, this is the same thing except \nit’s just a little quicker to write.\nBut we can shorten this even more.\nIf we're just returning one value here \nwe don’t even need the return keyword.\nAnd we don’t need the curly braces.\nSo, I can delete all this.\nAnd I can delete all this here.\nAnd now this is the full function from before, \nbut it’s just really shortened up.\nAnd to make this even nicer, \nwe're not going to use var.\nI’m going to change this to const.\n[Write Arrow Functions with Parameters]\nJust like in a normal function, \nyou can pass arguments to arrow functions.\nSo let me show you how to convert this function \ninto an arrow function.\nSo, it’s a normal function now \nand it has two arguments.\nAnd then it’s going to concatenate \nthe two arrays passed in.\nSo, first we'll take off the function keyword.\nWe're going to leave these parenthesis \nwith the parameters.\nNow I’ll put the arrow.\nSince all we're doing is returning this, \nwe don’t even need the return keyword \nand we don’t need the curly braces.\nSo, I’ll take that off.\nWe'll take this off.\nAnd now we’ve done this.\nI just converted that function into an arrow function \nand it has these two parameters.\nSo, we just have the parameters in parenthesis.\nWe have the arrow.\nAnd then we have what’s being returned \nright after the arrow.\nSo, if I run that you’ll see that we concatenate \nthe two arrays that are passed in in this example.\nAnd then for good measure we'll change this to const.\n[Write Higher Order Arrow Functions]\nArrow functions work really well with higher order \nfunctions such as map, filter, and reduce.\nI’ll go into more detail at a different time \nabout map, filter, and reduce.\nBut the main thing to know is that they take functions \nas arguments for processing collections of data.\nWhenever one function takes another function as an \nargument, that’s a good time for an arrow function.\nSo, what we're going to do here \nis we're going to update this function right here.\nWe want it to compute the square \nof only the positive integers in the array.\nSo, it’s passed in this array which is this.\nAnd we want to filter out everything \nthat’s not a positive integer.\nSo, I’m going to use the filter \nand map functions to do that.\nBut the main thing I want you to look at is the arrow \nfunctions that I’m passing in to filter and map.\nThis line is going to be a lot more succinct \nbecause of the arrow functions.\nSo, ,we have the squaredIntegers \nis going to be the arr.\nAnd we're going to filter this.\nSo, .filter.\nNow, again, I’m not really going to explain in detail \nwhat the filter function does, \nbut that will be something for another time.\nJust look at this arrow function.\nWe're going to create this arrow function.\nWe're starting it just like this.\nNow before I showed you that you passed an \narguments in parenthesis for an arrow function.\nBut if you only have a single argument like this, \nthe number argument, \nyou don’t need parenthesis around the argument.\nYou can just put the argument and then the arrow.\nSo, this is the beginning of the arrow function.\nAnd then we'll see what’s returned\n from the arrow function.\nFirst we want to filter this array \nso we only have numbers that are integers \nand numbers that are more than zero.\nSo, we'll do Number.isInteger.\nAnd then we will pass in the number.\nAnd number is more than 0.\nSo, let me complete the parenthesis here.\nNow the result of this filter command \nwill be an array with all the numbers \nthat are more than 0 and also integers.\nSo, that will be 4, 42, and 6.\nBut after we get that new array we want to get t\nhe square of each number in that array.\nSo, that’s where we’re going to use the map function.\nNow the map function takes a function as its argument.\nBut instead of writing a full function out \nwe can use an arrow function.\nSo, we're going to pass in x to the function.\nAnd then there’s going to be an arrow function.\nNow x just means every element from the array \nthat’s being passed to it.\nSo, remember the map is getting the array for 42, 6.\nx means for every element in the array \nthis is what we're going to do to it.\nx * x because it’s going to be squared.\nAgain, the main point of the lesson is not \nto understand the filter and map functions, \nbut to see that we can put an arrow function, \nwe can pass in an arrow function and it makes it \nso we can fit everything really succinctly on one line.\nSo, let’s reload this and see if it works.\nNow we have [16, 1764, 36].\n[Write Higher Order Arrow Functions]\nIn order to create more flexible functions \nyou can use default parameters.\nThe default parameter kicks in when the argument \nis not specified or is undefined.\nSo, for instance, with this increment function \nwe want to change it.\nWe want to change the increment function.\nSo, you can pass in two arguments, \nthe 5 and 2 to increment by 2.\nOr you can just pass in the one argument, \nthe 5 if you want to increment by 1.\nSo, here are the numbers we're passing in.\nA number and a value.\nSo, we just have to put value = 1.\nSo now if a value isn’t passed in, \nit will be set to 1 automatically, \nbut if it is passed in, it will be set to \nwhatever is passed in.\nSo, if we run this we can look on the console, \nwe have 7 for this first one and 6 for the second.\n[Use the Rest Operator with Function Parameters]\nThe rest operator allows you to create a function \nthat takes a variable number of arguments.\nThe rest operator is three dots.\nSo, we have this function here.\nAnd it’s taking three arguments, x, y, and z \nand it’s summing them.\nSo, at first it’s converting these x, y, z \ninto an array called args.\nAnd then it’s reducing them.\nSo, it’s summing them all up here \nand then returning the results.\nSo, right now if we just run this, \nit’s going to log 6 because 1 + 2 + 3 is 6.\nBut we can change this to use the rest operator.\nSo, we're still going to pass in 1, 2, 3.\nBut where it’s accepted here, where we have the \narguments here, x, y, z, I’m just going to put ....\nThat’s the rest operator.\nJust ....\nAnd I’m going to put args.\nSo, with this rest operator, ..., \nit will convert everything that’s passed in \ninto one array and the array is called args.\nSo, now we don’t need this anymore.\nAnd it should work the same.\nIf we run this, we'll get 6.\nBut we can also now add any number of numbers.\nSo, I’ll put a 4 on the end and 10.\nIt’s going to add those numbers together.\nSo, before we could only pass in three arguments.\nAnd now, we can have any number of arguments.\n[Use the Spread Operator to Evaluate Arrays In-Place]\nThe spread operator looks just like the rest operator.\nThree dots.\nBut it expands an already existing array.\nOr it spreads out an array.\nSo, it takes an array and spreads it out \ninto its individual parts.\nSo, here we have an array with some months.\nAnd the spread operator can spread this array, \nthis arr1 into the individual months \ninstead of the actual array here.\nYou can only use it in an argument \nto a function or in an array literal.\nSo, let’s look at this.\nSo, right now we're setting arr2 to equal arr1.\nIn this example we're not actually copying it.\nBecause if we change arr1, \nif we set the index of arr1 to ‘potato’ \nand we log arr2, you’ll see that index [0] is “potato” \neven though we're logging arr2 \nand we only changed arr1 \nbecause these are equal.\narr2 and arr1 are the same.\nBut what if we want arr2 to be a copy of arr1 ?\nWe can use the spread operator.\nNow we can’t just use the spread operator like this.\nThat’s not going to work.\nBut if we put this inside brackets, which is an array,\n it will spread out the contents of arr1 \ninto this new array.\nSo, we're not making arr2 equal to arr1.\nWe're making arr2 equal all of the contents of arr1 \nso they’ll be different.\nSo, if we run this again, \nyou’ll see that it says “January” for the first element \nin the array instead of “potato”.\n[Use Destructuring Assignment \nto Assign Variables from Objects]\nThe next few lesson will be about \ndestructuring assignment.\nThis is a special syntax for neatly assigning values \ntaken directly from an object to a variable.\nSo, look at this object here.\nWe have this object with three elements.\nWe have the x, y, and z with their values.\nAnd it’s all in the voxel variable.\nSo, if we want to take each individual element \nin this object \nand assign it to its own variable, \nthis is the old way of doing it.\nSo, we can do vox with an x.\nThis stores x.\nvoxel.y stores y.\nvoxel.z stores z.\nNow with destructuring, there’s a simpler and quicker \nway to assign variables for each element in an object.\nSo, here’s the destructuring syntax right here.\nThis time, we are creating variables a, b, and c \nand assigning them to a values \nfrom the object x, y, and z.\nWe can see we put it in curly braces here.\nAnd we just say it equals the object.\nIt equals voxel.\nYou can read it like this, get the field of x \nand copy into the value a.\nSo, get the field of x from the object, \ncopy into the value a.\nGet the field of y from the object, \ncopy into the value b.\nGet the field of z, copy it into the value c.\nSo, this is just a quicker way of assigning things \nfrom an object into variables.\nNow we're going to use destructuring to obtain \nthe average temperature for tomorrow \nfrom the input object AVG_TEMPERATURES.\nSo, we have AVG_TEMPERATURES.\nIt has today and tomorrow’s temperatures.\nAnd then the average temperature \nis inputted into this function here.\nSo, I’m going to change this line here \nto use destructuring \nand destructure the AVG_TEMPERATURES \nobject here that’s passed into this function.\nSo, first I’m just going to put \nthe AVG_TEMPERATURES variable here.\nAnd then on this side of the equals sign \nI’m going to have to use the destructuring.\nSo, I’ll put the curly braces.\nAnd we'll put tomorrow.\nAnd then a colon, and then the other curly brace.\nSo, this is saying get the tomorrow field \nfrom the AVG_TEMPERATURES object \nand assign it to the tempOfTomorrow variable.\nSo, if we run this, we should see it says 79 in console \nbecause we got the tempOfTomorrow variable.\nWe returned tempOfTomorrow, \nand it was logged right here.\nSo, we successfully used destructuring to get the \ntomorrow variable out of AVG_TEMPERATURES.\n[Destructuring Assignment with Nested Objects]\nWe can also use destructuring assignment \nto assign variables from nested objects.\nWe have this nested object right here, \nthe local forecast.\nAnd inside we have some nested objects.\nSo, we have the forecast from today \nand the forecast for tomorrow.\nSo, here we have getMaxOfTmrw \nwhere we’re going to pass in the forecast.\nAnd here we can see the LOCAL_FORECAST \nbecomes the forecast variable.\nAnd we're trying to figure out the maxOfTomorrow.\nSo, we are going to use destructuring \nto figure that out.\nSo, it’s going to equal forecast.\nAnd remember that is a nested object.\nSo, here, when you’re destructuring \nyou’re always going to use the curly braces.\nAnd we are first going to get tomorrow.\nAnd on the other side of the colon we're going to \nhave some more curly braces because it’s nested.\nSo, we need to go inside of the tomorrow object \nand we need the max.\nSo, we'll do max.\nAnd then we have the colon.\nAnd maxOfTomorrow.\nNow we need two sets of squiggly braces here.\nSo, we have this one.\nAnd this one.\nAnd so we’ve destructured two times.\nAnd the variable is maxOfTomorrow.\nSo, we’ve set the max that was inside tomorrow \nto maxOfTomorrow.\nSo, if I run this, you’ll see it’s 84,600.\n[Use Destructuring Assignment \nto Assign Variables from Arrays]\nYou can use destructuring assignment \nto assign variables from arrays.\nLook at this example here.\nSo, we have this array of [1, 2, 3, 4, 5, 6] \nand we're assigning the variable z and x to the first \ntwo numbers of the array, 1 and 2.\nThe difference between destructuring \nfrom arrays and destructuring from objects \nis that you cannot specify which element \nfrom the array to go into a variable.\nIt just goes in order.\nHowever, if we wanted number 4 to be going to \na variable, we can just do like this.\nWe would just add some commas.\nSo, we put a comma with nothing in it, like that.\nTwo commas in a row.\nAnd I’ll put a y here.\nSo, now we have the first element, \nthe second element, we skip the third element, \nand then we have the fourth element.\nSo, if I console.log z, x, and y \nwe should see 1, 2, and 4.\nHere’s another thing you can do.\nYou can use destructuring of arrays \nto switch the places of variables.\nLet me uncomment out these.\nAnd what I’m going to do is use destructuring \nto switch the places of a and b.\nSo, it’ll be like this.\nI’ll say [a, b].\nAnd I’ll say = [b, a].\nSo now it’s just taking this and switching the places.\nSo instead of a being 8 and b equals 6, \nit’s now going to log out 6 and 8.\nSo, let’s see.\nYeah, it worked.\n[Use Destructuring assignment \nwith the Rest Operator]\nWe can use destructuring assignment \nwith the rest operator to reassign array elements.\nWe can see in this example we have this array, \nthe digits 1 through 10 in the array.\nAnd we have this removeFirstTwo function.\nWe’re calling it here.\nAnd we're passing in the source.\nThat’s the source array.\nAnd it becomes the list.\nSo, we want to return the array \nwith the first two elements removed.\nSo, let’s use the rest operator inside an array here.\nSo, we'll use the rest operator, the three little dots.\nAnd to remove the first two, I just have to put two \ncommas here with nothing in between them.\nSo, it’s saying do nothing for the first element, \ndo nothing for second element.\nEverything else, put into the arr variable.\nWe could have assigned the first two numbers \nin the array to two other variables.\nI could do a, b, and then a would be 1, b would be 2, \nand then arr would be an array of 3, 4, 5, 6, 7, 8, 9, 10.\nBut right now we just need to return the array \nwith the first two elements missing.\nSo, if I run that you’ll see that we did that.\nIf you look in the console, we've logged the array \nand the first two elements are missing.\nAnd then we have the original array down here.\n[Use Destructuring Assignment to Pass an Object \nas a Function’s Parameters]\nYou can use destructuring assignment \nto pass an object as a function’s parameter.\nLet me show you what I mean.\nRight now we have this half function.\nAnd it’s getting the stats argument.\nSo, the stats is being passed what is called down here.\nAnd it’s passing in this whole object, \nso this whole stats object.\nBut you can see within this function \nwe're only using stats.max and stats.min.\nSo, instead of passing the entire stats into this \nfunction, we can just pass in what we need.\nSo, this is what we're going to do.\nI’m going to put in some curly braces here \nand just put max and min.\nSo, now when the stats get passed in, \nit’s destructured into just the max and min variables.\nAnd the max and min from the function \ngets passed in.\nSo now instead of doing stats.max \nwe can just do max.\nInstead of stats.min we can do min.\nSo, if we reload that it’s going to work \nexactly like it did before, \nbut now we only pass in what we need.\nThis is commonly used with API calls.\nWhen you are getting information \nfrom an Ajax request or an API request, \nit will often have a lot more information \nthan what you need.\nAnd you can use destructuring to get it down to \nwhat we actually want to work with.\n[Create Strings using Template Literals]\nTemplate literals are a special type of string \nthat makes creating complex strings easier.\nYou make them with this backtick.\nSo, here’s an example of a template literal right here.\nWe have the beginning backtick \nand we have the ending backtick.\nThis would be in place of using a quotation, \na single or double quotation mark.\nA few advantages of using these template literals, \nthese backticks instead of quotation marks, are one, \nyou can make multiline strings.\nYou can see this has two lines.\nHere’s the first line and here’s the second line.\nAnd if we log the greeting, it’s going to \nput the new line right in there.\nAnother thing is you can add single or double \nquotation marks right in the string \nand you don’t have to escape them.\nThe third thing is you can put variables \nright in the string.\nSo, if we see this, see the $.\nAnd then we have these curly braces.\nAnd so, anything in between these curly braces \nthat start with the $ is Javascript.\nSo, right now we just have this variable,\n person.name which gets the name from up here.\nAnd then here we have person.age \nwhich gets the age from right there.\nSo, it makes things easier \nthat you can put variables right in the strings.\nSo, if we run that, you’ll see.\nAnd normally it would actually also be printed \nwith a new line.\nBut with this exact code editor and console, \nit doesn’t show the new line.\nSo, there’s going to be a coding challenge \nthat we're going to do right down here.\nWe have this makeList function.\nAnd we want it to create a list based \non the array that’s passed in.\nSo, when we call makeList, we pass in result.failure.\nWell, here’s result.\nresult.failure is this array here.\nAnd we want it to return an array that looks like this.\nEach element in the array is a template literal \nthat has some HTML in it \nand then it also has this no-var, var-on-top, \nand linebreak that comes right from this array \nthat’s passed in.\nSo, let’s use template literal to create that.\nSo, instead of setting this to equal null, \nI’m going to start this off to be an empty array.\nNow, there’s many ways to do this, \nbut I’m going to use the classic for loop.\nSo, we'll do for().\nAnd hopefully, you’ll remember \nhow to make a for loop.\nWe'll do (let i = 0 while i is less than arr.length).\nAnd then at the end we will increment i.\nSo, inside this for loop we'll do \nresultDisplayArray.push.\nAnd then here is where I’m going to \nuse the template literal.\nPut a backtick.\nAnd I’ll put this HTML code here.\n.\nAnd now this next part is going to be a variable \nbecause it changes for each array element here.\nSo, I’m going to do dollar sign \nand then the curly braces.\nAnd now I can just do arr.\nAnd then index[i].\nNow end curly brace.\nAnd then I can just put the .\nOkay.\nAnd if we console.log this out \nbecause we just finished that, \nI do console.log(resultDisplayArray) \nthe array looks just like it’s supposed to be.\nIf you look in the console, it returns correctly.\n[Write Concise Object Literal Declarations \nUsing Simple Fields]\nES6 added some nice support \nfor easily defining object literals.\nIf we look at this function here, \nthis function is an arrow function.\nIt takes in three variables, name, age, and gender.\nAnd it’s going to return an object.\nAnd the object is going to have a series of key value \npairs where the key is the name, age, and gender.\nAnd the values are the passed in variable names.\nThe passed in names, age, and gender.\nSo, if you look in the console \nyou can see this currently does.\nWe did the createPerson.\nWe passed in a name, age, and gender.\nAnd you can see in the console, the object is name.\nAnd “Zodiac Hasbro”, age 56, gender:  “male”.\nSo, you can see there’s some repetition.\nWe’re repeating name:  \nname, age:  age, gender:  gender.\nNow the first name is the key \nand the second name is the value.\nBut there’s a way to just make this simpler.\nIf you know that you want to create an object \nwhere the key is the name of the variable \nand the value is the value of the variable, \nthere’s an easier way to do it.\nWe can actually delete this whole thing here.\nAnd this is how we're going to do it.\nWe'll just do name, age, gender.\nJavascript knows that it’s going to return this object \nand it’s going to have three key value pairs, \nthe name, age and gender.\nSo, if I reload this, you’ll see in the console \nit looks exactly the same \nbecause this code does the same thing \nthat the previous code did.\n[Write Concise Declarative Functions]\nAn object can contain a function.\nThis is the long way to put a function within an object.\nBut there is a simpler way.\nWe have the setGear function.\nBut instead of using the function keyword \nand this colon, we can just delete all that.\nAnd the now this is the new way.\nIf I load this again, you’ll see 3 in the console \njust like it was before.\nBecause we've been able to set the gear \nusing that function.\n[Use class Syntax to Define a Constructor Function]\nES6 provides a syntax to create objects \nusing the class keyword.\nSo, here’s the older way to create an object.\nIt’s with the new keyword.\nWe can instantiate an object using this new keyword.\nAnd we're instantiating the SpaceShuttle object.\nWe have to have this constructor function up here.\nSo, we use this to construct the object.\nWhere we pass in the target planet, ‘Jupiter’.\nAnd we said the targetPlanet of this.targetPlanet.\nOnce we create the new object like this, \nthat allows us to do zeus.targetPlanet.\nSo, zeus.targetPlanet which we set to Jupiter.\nSo, in the console you can see Jupiter.\nThe class syntax replaces \nthe constructor function creation.\nSo, I’m going to delete that.\nWe're going to use the class syntax.\nSo, I’ll do class SpaceShuttle.\nAnd then we have the curly brace here.\nAnd so, inside here we have a constructor.\nSo, do constructor(targetPlanet).\nAnd then that’s all.\nWe just have to put in the curly brace.\nAnd this works exactly the same as before.\nWe’re using the class keyword and this constructor.\nSo, down here we are going to do the same thing \nfor a vegetable class.\nSo, for the vegetable class, \nwe'll have class Vegetable.\nAnd we're going to have a constructor \nwith the (name).\nthis.name = name.\nSo, now that we have this, we can set this Vegetable \nto makeClass which will return a Vegetable class.\nSo, that’s up here.\nAnd then when we do new Vegetable \nand passing ‘carrot’, this carrot will go into here.\nAnd it’ll get set as this.name.\nSo, when we console.log carrot.name, \nwe should get carrot.\n[Use getters and setters to Control Access \nto an Object]\nWith the class object you often want to obtain \nvalues from the object \nand set a value of a property within an object.\nThis are often called getters and setters.\nSo in this class object, we have the constructor \nwhich we already talked about.\nWe also have a getter and setter \nto get and set the writer.\nSo we can get the writer \nand we can set the writer.\nGetter functions are meant to simply return \nor get the value of an object’s private variable \nto the user \nwithout the user directly accessing \nthe private variable.\nSo, the private variable is this _author \nthat gets set when you construct the object.\nAnd then when we do get writer, \nit’s going to return this ._author.\nSo, you never actually interact directly \nwith this variable, \nbut it’s going to get the writer \nwhich is the author here.\nAnd when you’re setting, it’s the same.\nSo, you’re never interacting with the _author, \nbut you can set that with the writer setter.\nThis change could invoke calculations or even \noverriding the previous value completely.\nSo, you can have any number of code lines \nin this setter \nto ultimately maybe do different calculations before \nyou set it or calculations before you get the property.\nSo, what we're going to do is make our own getter \nand setter for the Thermostat class.\nWe're going to create a Thermostat class \nand we're going to have a getter and setter.\nSo, here’s the thing about this challenge, \nis that when we construct the class, \nit’s going to accept Fahrenheit temperature, \nbut we're going to create a getter and setter \nin the class to obtain the temperature in Celsius.\nSo, it’s going to have to do the calculation \nright within the class.\nSo, let’s do that.\nWe're going to do a class of Thermostat.\nAnd in this class we need the constructor.\nWhen you first create the Thermostat \nyou’re going to pass in a temperature.\nAnd remember, this is going to be Fahrenheit.\nNow within this constructor, \nwe're going to set a private variable.\nthis._temp.\nSo, the word this just means that this variable \nis only accessible within this class here.\nAnd the _temp – whenever you start a variable \nwith an _ \nthat’s going to generally signify \nthat it’s a private variable.\nThat you’re not supposed to access it \noutside of that scope or outside of that class.\nSo, we're going to set the temp.\nAnd we're not going to just put this._temp = temp \nbecause it’s passed in as a Fahrenheit \nand we want to convert it to Celsius.\nI just happen to have the equation for Celsius, \nso it’s 5/9 * (temp – 32).\nSo, now we can create the getter and setter.\nSo, for getter we’ll do get temperature.\nAnd we're just going to return this._temp.\nWhich now it’s in Celsius \nbecause we're storing the value in Celsius \neven though the thermostat is created in Fahrenheit.\nSo, with the setter, it’s going to be the same.\nset temperature(updatedTemp).\nAnd it’s now going to still be in Celsus.\nSo, this._temp = updatedTemp.\nSo, let’s look at the code down here, \nhow we're using it.\nSo, the const Thermostat = makeClass().\nThis makeClass function is going to return \nthis thermostat object here.\nAnd then we're going to do \nconst thermos = new Thermostat.\nSo, when you’re instantiating an object \nyou always use the new keyword.\nnew thermostat, that’s this.\nAnd we're passing in 76.\nThat goes into the constructor, the temp.\nAnd so we do this calculation to convent that \nFahrenheit to the Celsius in this local variable here.\nAnd then let temp = themos.temperature.\nSo, thermos.temperature is going to use the getter, \nget temperature, and it’s going to return this._temp.\nSo, a key thing to look at is that there are now parenthesis after this.\nSo, generally, if something is a function, \nyou would see parenthesis after the function name, \nbut if it’s a variable or a property name, \nit’s going to not have parenthesis.\nSo, getters and setters \nare accessed similar to properties.\nAnd then we can use the setter here, \nthermo.temperature = 26, \nand then it sets it with the updated temperature.\nAnd now we can say \ntemp = thermos.temperature.\nAnd if we do a console.log here, \nwe can do that with the temp.\nAnd it should have the new temperature if load that.\n26.\n[Understand the Differences Between \nimport and require]\nIn the past people would use the require function \nto import functions and code from other files.\nBut now we have import and export.\nYou can export code in one file and then import it \nin another file.\nIt also allows you to only import certain functions \nfrom a file or certain variables.\nLet me show you how it works.\nSo, in this file, we have this capitalized string function.\nWe're passing in this string “hello”.\nAnd we want to log out the capitalized strings.\nBut right now it just has an error because \nthere is no capitalizeString function in this file.\nHowever, in this other file, \nwe do have a capitalizeString function.\nIn this string function .js we have export.\nThis is the export statement I was talking about.\nAnd then it’s exporting this function.\nIt’s actually a variable.\nCapitalize string, that’s set to equal a function.\nThis is an arrow function, where we pass in a string.\nAnd then we return the string.toUpperCase.\nNow toUpperCase is just a string function \nthat makes ever letter uppercase.\nSo, we can import this in our other file.\nSo, let’s go back to our other file.\nAnd I will import – and with the import statement \nwe're going to use curly braces.\nAnd then I’ll put capitalizeString.\nAnd then we have to say \nwhat we're importing it from.\nWe want to import it from.\nAnd this is where I put the file name.\nNow normally you’re going to start with a ./ \nwhich just means the current directory.\nAnd I’ll type in the file name.\n“string_function”.\nNow, the file name has a .js after it, \nbut that’s assumed.\nSo, you don’t have to put .js.\nYou can just put the file name without the extension.\nSo, if I run this, you can see HELLO! \nin all capital letters.\nIt successfully imported this function \nfrom the other file and we used it in this file.\n[Use export to Reuse a Code Block]\nI’ve talked a little bit about export in the last lesson, \nbut now I’m going to go into more detail.\nYou export functions and variables from one file \nso that you can import them into another file.\nThat’s how you can reuse different code.\nSo, we have this function here.\nThis is a capitalizeString function.\nIt actually just capitalizes the first letter of the string.\nAnd then leaves the rest of the string lowercase.\nAnd before, I showed you \nyou can just put export right before here.\nBut we can export it a different way.\nSo, I’ll do export and then curly braces \ncapitalizeString.\nAnd so now we just exported this function.\nAnd to export a variable like this \nwe have const foo =”bar”, const bar = “foo”.\nTo export these variables \nyou just type in export before.\nSo now in this file, we're exporting this function \nand these two variables.\nAnd then we can import them into another file.\n[Use * to Import Everything from a File]\nIf a file exports multiple different things, \nyou can import each thing individually \nor you can import everything.\nSo, let me show you how you would import \neverything from a file.\nIt’s just import.\nAnd then you’re going to put an asterisk or a star.\nAnd then you’re going to put as.\nimport * as.\nAnd then you have to create an object \nto store everything in.\nSo, I’m going to import stuff from a file \ncalled capitalizeStrings.\nI’m going to call this captalizeStrings.\nSo, this could really be anything.\nI’m creating an object with this.\nAnd then I’m going to see what I’m importing it from.\nAnd then I just put the file name.\nIn this case, it’s just going to be “capitalize_strings”.\nSometimes you would have to put a ./ \nif it’s in the same directory there.\nAnd then I’ll make sure to put a semicolon at the end.\nSo, if you’re importing everything, \nyou always start off with import * as.\nAnd then this could be anything.\nIt could be any object name that you create.\nAnd then you’re going to put from.\nAnd then you put the “file name” \nin quotation marks just like that.\n[Create an Export Fallback with export default]\nBefore when I talked about exports, \nI was talking about named exports.\nThere’s also something called an export default.\nThis is a fallback export.\nAnd it’s often used if you only want to \nexport one thing from a file.\nSo, let’s say I want this to be my fallback export.\nI’m just going to only export this one thing \nfrom the file.\nI can just put export default.\nSo, now we know that this is just the fallback.\nBasically, just the one thing we're going to \nexport from this file.\n[Import a Default Export]\nSo, we talked about exporting a default export.\nNow I’m going to show you how to import \na default export.\nIt’s pretty much the same as before \nbut there is a slight difference.\nSo we are going to pretend we have a file \ncalled math_functions \nthat has a default export name subtract.\nSo, let me show you how you would import that.\nSo, it’s going to be import subtract.\nAnd we’ve already reached the difference here.\nIf it’s not a default export, \nyou’ll put curly braces around this.\nBut it is a default export so we are not \ngoing to use curly braces.\nBut we still have to say what it’s from.\nSo, from “math_functions”.\nOkay, so that is how you would \nimport a default export.\nWell, thanks for watching.\nDon’t forget to subscribe.\nAnd remember, use your code for good.\nVisit freeCodeCamp.org\n",
  "words": [
    "beau",
    "beginner",
    "javascript",
    "course",
    "looking",
    "name",
    "beau",
    "carnes",
    "full",
    "javascript",
    "course",
    "learn",
    "everything",
    "need",
    "know",
    "get",
    "started",
    "javascript",
    "course",
    "perfect",
    "beginners",
    "anyone",
    "wants",
    "refresher",
    "basic",
    "javascript",
    "syntax",
    "course",
    "actually",
    "goes",
    "along",
    "javascript",
    "curriculum",
    "want",
    "live",
    "coding",
    "challenges",
    "go",
    "along",
    "every",
    "part",
    "course",
    "check",
    "link",
    "description",
    "curriculum",
    "completely",
    "standalone",
    "video",
    "need",
    "go",
    "could",
    "helpful",
    "also",
    "course",
    "going",
    "want",
    "complete",
    "build",
    "javascript",
    "projects",
    "link",
    "description",
    "project",
    "tutorials",
    "going",
    "want",
    "create",
    "projects",
    "really",
    "learn",
    "javascript",
    "create",
    "things",
    "without",
    "going",
    "tutorial",
    "use",
    "search",
    "engine",
    "find",
    "things",
    "know",
    "need",
    "learn",
    "go",
    "along",
    "freecodecamp",
    "curriculum",
    "es6",
    "stuff",
    "second",
    "part",
    "course",
    "pretty",
    "much",
    "let",
    "learn",
    "javascript",
    "running",
    "javascript",
    "exactly",
    "install",
    "javascript",
    "well",
    "part",
    "actually",
    "web",
    "browsers",
    "run",
    "javascript",
    "great",
    "lot",
    "devices",
    "web",
    "browsers",
    "write",
    "something",
    "javascript",
    "run",
    "sorts",
    "devices",
    "operating",
    "systems",
    "options",
    "writing",
    "javascript",
    "let",
    "show",
    "things",
    "follow",
    "along",
    "course",
    "could",
    "download",
    "code",
    "editor",
    "sublime",
    "text",
    "also",
    "use",
    "visual",
    "studio",
    "code",
    "atom",
    "code",
    "editor",
    "created",
    "html",
    "file",
    "html",
    "files",
    "opened",
    "web",
    "browsers",
    "tags",
    "html",
    "tags",
    "within",
    "tags",
    "javascript",
    "open",
    "file",
    "web",
    "browser",
    "looks",
    "like",
    "well",
    "open",
    "javascript",
    "console",
    "console",
    "see",
    "says",
    "hello",
    "right",
    "javascript",
    "program",
    "whenever",
    "going",
    "show",
    "console",
    "also",
    "use",
    "code",
    "editor",
    "included",
    "like",
    "mentioned",
    "course",
    "follows",
    "along",
    "javascript",
    "curriculum",
    "javascript",
    "editor",
    "right",
    "shows",
    "console",
    "another",
    "option",
    "would",
    "use",
    "codepen",
    "go",
    "going",
    "go",
    "create",
    "pen",
    "going",
    "three",
    "windows",
    "html",
    "css",
    "javascript",
    "well",
    "care",
    "javascript",
    "course",
    "going",
    "anything",
    "html",
    "css",
    "need",
    "javascript",
    "javascript",
    "console",
    "hello",
    "world",
    "see",
    "right",
    "console",
    "hello",
    "final",
    "thing",
    "would",
    "use",
    "scrimba",
    "course",
    "actually",
    "recorded",
    "using",
    "want",
    "use",
    "follow",
    "along",
    "log",
    "click",
    "plus",
    "button",
    "going",
    "javascript",
    "playground",
    "confirm",
    "going",
    "open",
    "new",
    "javascript",
    "window",
    "increase",
    "font",
    "size",
    "already",
    "hello",
    "see",
    "console",
    "right",
    "hello",
    "also",
    "hit",
    "reload",
    "reloads",
    "everything",
    "see",
    "popup",
    "hello",
    "something",
    "interesting",
    "scrimba",
    "two",
    "ways",
    "logging",
    "console",
    "popup",
    "console",
    "see",
    "course",
    "two",
    "different",
    "ways",
    "logging",
    "console",
    "comment",
    "javascript",
    "code",
    "first",
    "thing",
    "talk",
    "javascript",
    "comments",
    "comments",
    "lines",
    "code",
    "javascript",
    "intentionally",
    "ignore",
    "anything",
    "used",
    "create",
    "notes",
    "others",
    "code",
    "make",
    "comment",
    "comment",
    "means",
    "end",
    "line",
    "code",
    "instance",
    "put",
    "var",
    "number",
    "way",
    "declare",
    "variable",
    "talk",
    "later",
    "right",
    "talking",
    "comments",
    "see",
    "code",
    "color",
    "code",
    "editor",
    "knows",
    "code",
    "going",
    "run",
    "comment",
    "automatically",
    "grayed",
    "going",
    "run",
    "also",
    "comment",
    "mean",
    "comment",
    "put",
    "put",
    "going",
    "end",
    "begins",
    "ends",
    "put",
    "much",
    "text",
    "want",
    "see",
    "grayed",
    "comment",
    "afterwards",
    "put",
    "number",
    "9",
    "see",
    "color",
    "longer",
    "commented",
    "data",
    "types",
    "variables",
    "going",
    "talk",
    "data",
    "types",
    "variables",
    "computer",
    "science",
    "data",
    "anything",
    "meaningful",
    "computer",
    "javascript",
    "provides",
    "seven",
    "different",
    "data",
    "types",
    "use",
    "within",
    "javascript",
    "obvious",
    "common",
    "strings",
    "numbers",
    "string",
    "sort",
    "text",
    "number",
    "number",
    "let",
    "go",
    "top",
    "undefined",
    "something",
    "defined",
    "may",
    "variable",
    "set",
    "anything",
    "yet",
    "null",
    "means",
    "nothing",
    "set",
    "something",
    "thing",
    "nothing",
    "say",
    "null",
    "nothing",
    "boolean",
    "means",
    "true",
    "false",
    "talked",
    "string",
    "symbol",
    "immutable",
    "primitive",
    "value",
    "unique",
    "tall",
    "later",
    "number",
    "number",
    "object",
    "store",
    "lot",
    "different",
    "key",
    "value",
    "pairs",
    "talk",
    "later",
    "often",
    "going",
    "set",
    "data",
    "variable",
    "variable",
    "allows",
    "computers",
    "store",
    "manipulate",
    "data",
    "dynamic",
    "fashion",
    "basically",
    "label",
    "point",
    "data",
    "variable",
    "almost",
    "like",
    "box",
    "fill",
    "anything",
    "fill",
    "data",
    "want",
    "declare",
    "variable",
    "one",
    "way",
    "use",
    "var",
    "keyword",
    "var",
    "stands",
    "variable",
    "say",
    "myname",
    "set",
    "anything",
    "datatypes",
    "common",
    "set",
    "something",
    "string",
    "set",
    "name",
    "later",
    "set",
    "something",
    "else",
    "say",
    "myname",
    "set",
    "data",
    "types",
    "later",
    "actually",
    "three",
    "ways",
    "declare",
    "variable",
    "javascript",
    "var",
    "one",
    "way",
    "ways",
    "way",
    "called",
    "say",
    "let",
    "ourname",
    "freecodecamp",
    "thing",
    "would",
    "const",
    "const",
    "pi",
    "difference",
    "var",
    "let",
    "const",
    "var",
    "going",
    "able",
    "used",
    "throughout",
    "whole",
    "program",
    "let",
    "used",
    "within",
    "scope",
    "declared",
    "going",
    "talking",
    "let",
    "const",
    "later",
    "giving",
    "brief",
    "overview",
    "const",
    "variable",
    "never",
    "change",
    "never",
    "change",
    "like",
    "right",
    "declared",
    "myname",
    "changed",
    "started",
    "beau",
    "changed",
    "const",
    "never",
    "change",
    "try",
    "change",
    "get",
    "error",
    "okay",
    "like",
    "said",
    "talking",
    "different",
    "types",
    "variables",
    "later",
    "storing",
    "values",
    "assignment",
    "operator",
    "difference",
    "declaring",
    "variables",
    "assigning",
    "variables",
    "assign",
    "variable",
    "var",
    "semicolon",
    "mention",
    "earlier",
    "end",
    "lines",
    "javascript",
    "semicolon",
    "well",
    "actually",
    "required",
    "actually",
    "skip",
    "semicolons",
    "completely",
    "people",
    "recommend",
    "put",
    "semicolon",
    "obvious",
    "end",
    "line",
    "declaring",
    "variable",
    "called",
    "assigning",
    "variable",
    "declaring",
    "assigning",
    "one",
    "line",
    "declaring",
    "var",
    "b",
    "equals",
    "sign",
    "assignment",
    "operator",
    "means",
    "2",
    "assigned",
    "checking",
    "b",
    "assigning",
    "2",
    "actually",
    "assign",
    "things",
    "say",
    "assigned",
    "7",
    "declare",
    "already",
    "declared",
    "also",
    "say",
    "b",
    "assigned",
    "contents",
    "put",
    "semicolon",
    "one",
    "thing",
    "want",
    "tell",
    "allows",
    "see",
    "things",
    "console",
    "going",
    "load",
    "see",
    "console",
    "shows",
    "right",
    "assigned",
    "shows",
    "7",
    "put",
    "another",
    "right",
    "allow",
    "us",
    "show",
    "run",
    "see",
    "first",
    "null",
    "null",
    "7",
    "check",
    "variables",
    "various",
    "points",
    "program",
    "initializing",
    "variables",
    "assignment",
    "operator",
    "show",
    "another",
    "example",
    "initializing",
    "variable",
    "initial",
    "value",
    "time",
    "declared",
    "going",
    "say",
    "var",
    "var",
    "declaring",
    "9",
    "initializing",
    "assignment",
    "operator",
    "sign",
    "uninitialized",
    "variables",
    "anything",
    "variables",
    "uninitialized",
    "means",
    "value",
    "undefined",
    "set",
    "anything",
    "simple",
    "fix",
    "set",
    "five",
    "set",
    "b",
    "10",
    "set",
    "c",
    "string",
    "going",
    "string",
    "always",
    "put",
    "quotation",
    "marks",
    "like",
    "see",
    "1",
    "going",
    "equal",
    "6",
    "5",
    "1",
    "b",
    "b",
    "going",
    "c",
    "going",
    "say",
    "string",
    "case",
    "sensitivity",
    "variables",
    "variable",
    "names",
    "function",
    "names",
    "javascript",
    "case",
    "sensitive",
    "means",
    "capitalization",
    "matters",
    "declaration",
    "assignment",
    "even",
    "though",
    "letters",
    "capitalization",
    "going",
    "assign",
    "correctly",
    "see",
    "error",
    "try",
    "run",
    "defined",
    "declared",
    "generally",
    "common",
    "practice",
    "use",
    "camelcase",
    "let",
    "show",
    "instead",
    "studlycapvar",
    "going",
    "studlycapvar",
    "first",
    "letter",
    "always",
    "going",
    "lowercase",
    "time",
    "new",
    "word",
    "new",
    "section",
    "word",
    "capitalize",
    "first",
    "letter",
    "change",
    "one",
    "correct",
    "go",
    "studlycapvar",
    "propercamelcase",
    "titlecaseover",
    "defined",
    "declare",
    "assign",
    "right",
    "going",
    "give",
    "us",
    "errors",
    "going",
    "behave",
    "exactly",
    "want",
    "behave",
    "adding",
    "numbers",
    "adding",
    "two",
    "numbers",
    "javascript",
    "pretty",
    "straight",
    "forward",
    "use",
    "plus",
    "operator",
    "says",
    "10",
    "0",
    "equals",
    "also",
    "10",
    "10",
    "going",
    "equal",
    "20",
    "put",
    "sum",
    "able",
    "see",
    "answer",
    "20",
    "right",
    "console",
    "10",
    "10",
    "20",
    "subtracting",
    "numbers",
    "subtraction",
    "also",
    "would",
    "expect",
    "subtraction",
    "sign",
    "says",
    "45",
    "also",
    "45",
    "would",
    "equal",
    "difference",
    "variable",
    "equals",
    "12",
    "multiplying",
    "numbers",
    "multiplication",
    "javascript",
    "uses",
    "star",
    "symbol",
    "says",
    "8",
    "0",
    "change",
    "8",
    "10",
    "product",
    "variable",
    "equals",
    "80",
    "dividing",
    "numbers",
    "divide",
    "javascript",
    "symbol",
    "says",
    "change",
    "quotient",
    "equals",
    "2",
    "incrementing",
    "numbers",
    "increment",
    "number",
    "means",
    "add",
    "1",
    "incrementing",
    "myvar",
    "starts",
    "87",
    "87",
    "1",
    "quicker",
    "way",
    "increment",
    "number",
    "instead",
    "incremented",
    "myvar",
    "87",
    "88",
    "decrement",
    "numbers",
    "learned",
    "incrementing",
    "number",
    "also",
    "decrement",
    "number",
    "means",
    "subtracting",
    "one",
    "right",
    "myvar",
    "going",
    "equal",
    "10",
    "thing",
    "operator",
    "myvar",
    "still",
    "equals",
    "10",
    "decimal",
    "numbers",
    "also",
    "create",
    "decimal",
    "numbers",
    "javascript",
    "sometimes",
    "referred",
    "floating",
    "point",
    "numbers",
    "floats",
    "see",
    "one",
    "anything",
    "going",
    "make",
    "one",
    "called",
    "mydecimal",
    "going",
    "store",
    "anything",
    "decimal",
    "point",
    "decimal",
    "point",
    "number",
    "multiply",
    "decimals",
    "multiplying",
    "decimal",
    "point",
    "floating",
    "point",
    "numbers",
    "multiplying",
    "integers",
    "times",
    "change",
    "answer",
    "product",
    "going",
    "see",
    "put",
    "product",
    "browser",
    "see",
    "answer",
    "five",
    "divide",
    "decimals",
    "also",
    "divide",
    "decimal",
    "point",
    "numbers",
    "case",
    "going",
    "change",
    "answer",
    "quotient",
    "quotient",
    "equals",
    "finding",
    "remainder",
    "remainder",
    "operator",
    "looks",
    "like",
    "gives",
    "remainder",
    "division",
    "two",
    "numbers",
    "instance",
    "want",
    "find",
    "remainder",
    "11",
    "divided",
    "3",
    "remainder",
    "going",
    "put",
    "percent",
    "sign",
    "remainder",
    "operator",
    "11",
    "divided",
    "3",
    "9",
    "remainder",
    "going",
    "2",
    "11",
    "remainder",
    "3",
    "remainder",
    "operator",
    "often",
    "used",
    "determine",
    "number",
    "even",
    "odd",
    "divide",
    "number",
    "2",
    "remainder",
    "0",
    "means",
    "number",
    "even",
    "compound",
    "assignment",
    "augmented",
    "addition",
    "common",
    "want",
    "add",
    "number",
    "variable",
    "like",
    "see",
    "well",
    "starts",
    "3",
    "plus",
    "12",
    "adding",
    "12",
    "whatever",
    "adding",
    "9",
    "whatever",
    "b",
    "adding",
    "7",
    "whatever",
    "c",
    "common",
    "pattern",
    "shortcut",
    "thing",
    "operator",
    "instead",
    "12",
    "equals",
    "thing",
    "instead",
    "b",
    "9",
    "b",
    "adding",
    "value",
    "variable",
    "assigning",
    "answer",
    "variable",
    "shortcut",
    "compound",
    "assignment",
    "augmented",
    "subtraction",
    "previously",
    "learned",
    "well",
    "thing",
    "subtracting",
    "says",
    "started",
    "11",
    "minus",
    "6",
    "going",
    "new",
    "going",
    "shorten",
    "instead",
    "6",
    "shortcut",
    "javascript",
    "means",
    "thing",
    "means",
    "shortened",
    "c",
    "c",
    "c",
    "subtracts",
    "number",
    "original",
    "value",
    "assigns",
    "new",
    "value",
    "variable",
    "compound",
    "assignment",
    "augmented",
    "multiplication",
    "well",
    "thing",
    "shorten",
    "means",
    "thing",
    "c",
    "c",
    "shorten",
    "c",
    "another",
    "shortcut",
    "javascript",
    "compound",
    "assignment",
    "augmented",
    "division",
    "also",
    "another",
    "way",
    "dividing",
    "variable",
    "new",
    "number",
    "assigning",
    "answer",
    "variable",
    "declare",
    "string",
    "variables",
    "already",
    "mentioned",
    "strings",
    "little",
    "bit",
    "anytime",
    "characters",
    "surrounded",
    "quotation",
    "marks",
    "either",
    "single",
    "quotation",
    "marks",
    "double",
    "quotation",
    "marks",
    "backticks",
    "string",
    "called",
    "string",
    "create",
    "like",
    "see",
    "going",
    "var",
    "myfirstname",
    "beau",
    "var",
    "mylastname",
    "carnes",
    "create",
    "string",
    "javascript",
    "escaping",
    "literal",
    "quotes",
    "strings",
    "sometimes",
    "string",
    "contains",
    "quote",
    "symbol",
    "normally",
    "quotes",
    "identify",
    "beginning",
    "ending",
    "string",
    "assign",
    "like",
    "double",
    "quoted",
    "string",
    "inside",
    "double",
    "actually",
    "trying",
    "use",
    "quotes",
    "right",
    "inside",
    "string",
    "javascript",
    "know",
    "thinks",
    "whole",
    "string",
    "sees",
    "first",
    "quote",
    "inside",
    "string",
    "thinks",
    "end",
    "string",
    "something",
    "called",
    "escape",
    "character",
    "want",
    "escape",
    "quote",
    "means",
    "longer",
    "considered",
    "end",
    "string",
    "going",
    "put",
    "put",
    "quotation",
    "marks",
    "javascript",
    "longer",
    "interprets",
    "last",
    "character",
    "string",
    "see",
    "full",
    "string",
    "log",
    "count",
    "put",
    "mystr",
    "see",
    "going",
    "show",
    "quotation",
    "marks",
    "mean",
    "going",
    "show",
    "shows",
    "quotation",
    "marks",
    "without",
    "put",
    "javascript",
    "knows",
    "mean",
    "quotation",
    "mark",
    "quoting",
    "strings",
    "single",
    "quotes",
    "talked",
    "escaping",
    "quote",
    "character",
    "like",
    "put",
    "quote",
    "character",
    "javascript",
    "knows",
    "supposed",
    "literal",
    "quote",
    "character",
    "inside",
    "string",
    "however",
    "going",
    "escape",
    "quote",
    "characters",
    "often",
    "methods",
    "accomplishing",
    "thing",
    "quote",
    "character",
    "within",
    "string",
    "common",
    "way",
    "use",
    "instead",
    "string",
    "start",
    "double",
    "quotes",
    "start",
    "single",
    "quote",
    "string",
    "either",
    "surrounded",
    "single",
    "quotes",
    "double",
    "quotes",
    "time",
    "going",
    "single",
    "quotes",
    "remove",
    "escape",
    "characters",
    "inside",
    "string",
    "okay",
    "see",
    "javascript",
    "still",
    "knows",
    "string",
    "even",
    "though",
    "double",
    "quotes",
    "inside",
    "additional",
    "thing",
    "use",
    "backticks",
    "put",
    "backticks",
    "beginning",
    "end",
    "string",
    "actually",
    "use",
    "single",
    "quotes",
    "double",
    "quotes",
    "within",
    "string",
    "right",
    "going",
    "focus",
    "showing",
    "double",
    "quotes",
    "single",
    "quotes",
    "double",
    "quotes",
    "inside",
    "escape",
    "sequences",
    "strings",
    "talked",
    "escaping",
    "double",
    "quote",
    "character",
    "using",
    "double",
    "quote",
    "actually",
    "quite",
    "things",
    "escape",
    "escape",
    "single",
    "quote",
    "character",
    "escape",
    "backslash",
    "fact",
    "anytime",
    "going",
    "use",
    "going",
    "put",
    "two",
    "backslashes",
    "javascript",
    "knows",
    "trying",
    "escape",
    "character",
    "also",
    "add",
    "new",
    "line",
    "character",
    "carriage",
    "return",
    "tab",
    "backspace",
    "form",
    "feed",
    "slash",
    "corresponding",
    "letter",
    "let",
    "show",
    "example",
    "going",
    "put",
    "var",
    "mystring",
    "going",
    "make",
    "multiline",
    "string",
    "going",
    "going",
    "put",
    "add",
    "second",
    "line",
    "going",
    "put",
    "tab",
    "tab",
    "add",
    "going",
    "say",
    "secondline",
    "say",
    "thirdline",
    "able",
    "logout",
    "would",
    "see",
    "three",
    "different",
    "lines",
    "would",
    "see",
    "tab",
    "backslash",
    "character",
    "concatenating",
    "strings",
    "plus",
    "operator",
    "concatenate",
    "strings",
    "operator",
    "see",
    "two",
    "strings",
    "come",
    "first",
    "come",
    "second",
    "added",
    "together",
    "concatenated",
    "ourstr",
    "string",
    "one",
    "long",
    "string",
    "says",
    "come",
    "first",
    "come",
    "second",
    "give",
    "another",
    "example",
    "say",
    "mystr",
    "going",
    "put",
    "space",
    "end",
    "quotation",
    "mark",
    "get",
    "concatenated",
    "together",
    "want",
    "space",
    "two",
    "sentences",
    "say",
    "let",
    "see",
    "looks",
    "like",
    "mystr",
    "let",
    "see",
    "run",
    "see",
    "start",
    "one",
    "long",
    "string",
    "concatenating",
    "strings",
    "plus",
    "equals",
    "operator",
    "also",
    "concatenate",
    "strings",
    "using",
    "operator",
    "see",
    "example",
    "ourstr",
    "come",
    "first",
    "ourstring",
    "come",
    "remember",
    "like",
    "using",
    "numbers",
    "means",
    "take",
    "whatever",
    "end",
    "add",
    "variable",
    "added",
    "come",
    "onto",
    "end",
    "come",
    "let",
    "another",
    "example",
    "mystr",
    "first",
    "put",
    "space",
    "end",
    "going",
    "mystr",
    "second",
    "mystr",
    "see",
    "sentences",
    "gone",
    "together",
    "first",
    "sentence",
    "second",
    "good",
    "constructing",
    "strings",
    "variables",
    "concatenate",
    "strings",
    "together",
    "variables",
    "see",
    "ourname",
    "freecodecamp",
    "hello",
    "name",
    "add",
    "variable",
    "ourname",
    "variable",
    "freecodecamp",
    "hello",
    "name",
    "freecodecamp",
    "well",
    "going",
    "thing",
    "going",
    "myname",
    "beau",
    "mystr",
    "going",
    "equal",
    "name",
    "going",
    "add",
    "variable",
    "name",
    "name",
    "continue",
    "string",
    "supposed",
    "well",
    "see",
    "put",
    "space",
    "make",
    "sure",
    "put",
    "appropriate",
    "spaces",
    "let",
    "see",
    "looks",
    "like",
    "put",
    "mystr",
    "show",
    "name",
    "beau",
    "well",
    "looks",
    "good",
    "appending",
    "variables",
    "strings",
    "append",
    "variables",
    "strings",
    "operator",
    "see",
    "variable",
    "anadjective",
    "set",
    "word",
    "awesome",
    "another",
    "variable",
    "freecodecamp",
    "ourstr",
    "variable",
    "anadjective",
    "string",
    "going",
    "equal",
    "freecodecame",
    "awesome",
    "let",
    "show",
    "another",
    "example",
    "going",
    "say",
    "someadjective",
    "worthwhile",
    "going",
    "use",
    "mystr",
    "put",
    "someadjective",
    "mystr",
    "someadjective",
    "mystr",
    "going",
    "say",
    "learning",
    "code",
    "find",
    "length",
    "string",
    "sometimes",
    "want",
    "find",
    "length",
    "string",
    "javascript",
    "makes",
    "easy",
    "firstname",
    "set",
    "ada",
    "use",
    "property",
    "find",
    "length",
    "remember",
    "firsname",
    "ada",
    "return",
    "integer",
    "number",
    "number",
    "characters",
    "string",
    "three",
    "let",
    "try",
    "another",
    "example",
    "lastnamelength",
    "lastname",
    "type",
    "show",
    "let",
    "able",
    "see",
    "put",
    "lastnamelength",
    "run",
    "see",
    "8",
    "8",
    "characters",
    "word",
    "lovelace",
    "bracket",
    "notation",
    "find",
    "first",
    "character",
    "string",
    "bracket",
    "notation",
    "way",
    "get",
    "character",
    "specific",
    "index",
    "within",
    "string",
    "see",
    "right",
    "firstname",
    "ada",
    "right",
    "firstname",
    "bracket",
    "notation",
    "see",
    "brackets",
    "number",
    "inside",
    "modern",
    "programming",
    "languages",
    "like",
    "javascript",
    "start",
    "counting",
    "1",
    "like",
    "humans",
    "start",
    "0",
    "called",
    "number",
    "0",
    "refers",
    "first",
    "index",
    "string",
    "would",
    "would",
    "first",
    "letter",
    "firstname",
    "firstname",
    "bracket",
    "notation",
    "zero",
    "going",
    "let",
    "show",
    "another",
    "example",
    "let",
    "say",
    "want",
    "get",
    "first",
    "letter",
    "last",
    "name",
    "going",
    "bracket",
    "notation",
    "put",
    "zero",
    "wanted",
    "second",
    "letter",
    "would",
    "put",
    "1",
    "see",
    "came",
    "firstletteroflastname",
    "look",
    "console",
    "l",
    "first",
    "letter",
    "last",
    "name",
    "string",
    "immutability",
    "strings",
    "immutable",
    "meaning",
    "altered",
    "created",
    "mean",
    "changed",
    "individual",
    "characters",
    "string",
    "literal",
    "changed",
    "look",
    "example",
    "mystr",
    "going",
    "use",
    "bracket",
    "notation",
    "choose",
    "first",
    "letter",
    "currently",
    "says",
    "jello",
    "world",
    "want",
    "first",
    "letter",
    "change",
    "h",
    "say",
    "hello",
    "world",
    "run",
    "going",
    "error",
    "immutability",
    "strings",
    "still",
    "change",
    "hello",
    "world",
    "change",
    "individual",
    "letter",
    "like",
    "going",
    "mystr",
    "going",
    "type",
    "whole",
    "thing",
    "hello",
    "world",
    "change",
    "word",
    "hello",
    "bracket",
    "notation",
    "find",
    "nth",
    "character",
    "string",
    "use",
    "bracket",
    "notation",
    "get",
    "character",
    "position",
    "string",
    "earlier",
    "first",
    "position",
    "get",
    "second",
    "position",
    "remember",
    "0",
    "index",
    "1",
    "second",
    "position",
    "0",
    "first",
    "position",
    "also",
    "get",
    "third",
    "letter",
    "last",
    "name",
    "using",
    "brackets",
    "put",
    "2",
    "brackets",
    "get",
    "third",
    "letter",
    "last",
    "name",
    "bracket",
    "notation",
    "find",
    "last",
    "character",
    "string",
    "also",
    "use",
    "bracket",
    "notation",
    "find",
    "last",
    "letter",
    "string",
    "even",
    "know",
    "many",
    "letters",
    "string",
    "based",
    "length",
    "look",
    "really",
    "brackets",
    "expression",
    "evaluated",
    "length",
    "3",
    "reason",
    "remember",
    "count",
    "starting",
    "going",
    "last",
    "index",
    "name",
    "thing",
    "get",
    "last",
    "letter",
    "last",
    "name",
    "lastname",
    "1",
    "going",
    "get",
    "last",
    "letter",
    "last",
    "name",
    "e",
    "right",
    "bracket",
    "notation",
    "find",
    "character",
    "string",
    "saw",
    "use",
    "bracket",
    "notation",
    "get",
    "last",
    "letter",
    "string",
    "also",
    "third",
    "last",
    "letter",
    "fourth",
    "last",
    "letter",
    "subtract",
    "however",
    "much",
    "want",
    "length",
    "string",
    "bracket",
    "notation",
    "3",
    "going",
    "get",
    "third",
    "last",
    "letter",
    "want",
    "second",
    "last",
    "letter",
    "variable",
    "something",
    "similar",
    "going",
    "subtract",
    "2",
    "get",
    "second",
    "last",
    "character",
    "string",
    "word",
    "blanks",
    "going",
    "use",
    "knowledge",
    "strings",
    "build",
    "mad",
    "libs",
    "style",
    "word",
    "game",
    "mad",
    "lib",
    "game",
    "provided",
    "sentences",
    "missing",
    "words",
    "like",
    "nouns",
    "verbs",
    "adjectives",
    "adverbs",
    "fill",
    "missing",
    "pieces",
    "words",
    "choice",
    "make",
    "sentence",
    "could",
    "funny",
    "hopefully",
    "makes",
    "little",
    "bit",
    "sense",
    "let",
    "show",
    "also",
    "uses",
    "function",
    "talked",
    "functions",
    "yet",
    "going",
    "explain",
    "later",
    "go",
    "point",
    "lesson",
    "function",
    "called",
    "wordblanks",
    "call",
    "function",
    "pass",
    "certain",
    "types",
    "words",
    "pass",
    "noun",
    "adjective",
    "verb",
    "adverb",
    "see",
    "calling",
    "function",
    "called",
    "wordblanks",
    "function",
    "name",
    "passing",
    "noun",
    "adjective",
    "verb",
    "adverb",
    "point",
    "going",
    "use",
    "words",
    "passed",
    "make",
    "sentence",
    "know",
    "var",
    "result",
    "empty",
    "string",
    "first",
    "use",
    "words",
    "result",
    "result",
    "going",
    "returned",
    "function",
    "eventually",
    "logged",
    "onto",
    "screen",
    "going",
    "result",
    "going",
    "use",
    "add",
    "something",
    "result",
    "using",
    "noun",
    "adjective",
    "verb",
    "adverb",
    "let",
    "see",
    "going",
    "say",
    "use",
    "adjective",
    "myadjective",
    "case",
    "big",
    "big",
    "let",
    "put",
    "noun",
    "mynoun",
    "adjectives",
    "words",
    "describe",
    "nouns",
    "big",
    "dog",
    "going",
    "say",
    "verb",
    "myverb",
    "big",
    "dog",
    "ran",
    "run",
    "store",
    "going",
    "add",
    "oh",
    "need",
    "space",
    "space",
    "store",
    "going",
    "add",
    "final",
    "adverb",
    "add",
    "period",
    "one",
    "thing",
    "add",
    "things",
    "right",
    "myadjective",
    "mynoun",
    "myverb",
    "spaces",
    "run",
    "see",
    "going",
    "look",
    "like",
    "console",
    "said",
    "spaces",
    "going",
    "add",
    "spaces",
    "also",
    "let",
    "going",
    "take",
    "noun",
    "adjective",
    "verb",
    "adverb",
    "put",
    "sentence",
    "one",
    "cool",
    "thing",
    "actually",
    "pass",
    "different",
    "words",
    "like",
    "instance",
    "copy",
    "going",
    "paste",
    "instead",
    "dog",
    "put",
    "noun",
    "bike",
    "adjective",
    "put",
    "slow",
    "verb",
    "put",
    "flew",
    "adverb",
    "put",
    "slowly",
    "look",
    "console",
    "two",
    "sentences",
    "big",
    "dog",
    "ran",
    "store",
    "quickly",
    "slow",
    "bike",
    "flew",
    "store",
    "slowly",
    "store",
    "multiple",
    "values",
    "arrays",
    "arrays",
    "allow",
    "store",
    "several",
    "pieces",
    "data",
    "one",
    "place",
    "look",
    "example",
    "ourarray",
    "arrays",
    "always",
    "start",
    "bracket",
    "end",
    "bracket",
    "show",
    "beginning",
    "ending",
    "array",
    "every",
    "element",
    "array",
    "separated",
    "comma",
    "see",
    "first",
    "element",
    "string",
    "second",
    "element",
    "number",
    "elements",
    "put",
    "comma",
    "keep",
    "adding",
    "elements",
    "elements",
    "data",
    "type",
    "see",
    "string",
    "number",
    "also",
    "use",
    "arrays",
    "floating",
    "numbers",
    "really",
    "sort",
    "data",
    "type",
    "array",
    "lets",
    "see",
    "another",
    "example",
    "let",
    "myarray",
    "quincy",
    "number",
    "1",
    "quincy",
    "number",
    "1",
    "nested",
    "arrays",
    "one",
    "elements",
    "array",
    "another",
    "array",
    "called",
    "nested",
    "array",
    "multidimensional",
    "array",
    "see",
    "beginning",
    "array",
    "end",
    "array",
    "first",
    "element",
    "array",
    "another",
    "array",
    "two",
    "elements",
    "second",
    "element",
    "array",
    "two",
    "arrays",
    "within",
    "another",
    "array",
    "another",
    "example",
    "let",
    "first",
    "element",
    "array",
    "array",
    "string",
    "number",
    "put",
    "comma",
    "put",
    "second",
    "element",
    "array",
    "another",
    "array",
    "string",
    "number",
    "accesses",
    "array",
    "data",
    "indexes",
    "earlier",
    "learned",
    "use",
    "bracket",
    "notation",
    "find",
    "specific",
    "index",
    "string",
    "thing",
    "arrays",
    "look",
    "array",
    "ourarray",
    "three",
    "elements",
    "50",
    "60",
    "70",
    "indexes",
    "0",
    "1",
    "2",
    "ourarray",
    "bracket",
    "notation",
    "0",
    "going",
    "index",
    "1",
    "going",
    "equal",
    "thing",
    "myarray",
    "50",
    "60",
    "70",
    "let",
    "try",
    "find",
    "first",
    "element",
    "array",
    "var",
    "mydata",
    "myarray",
    "going",
    "index",
    "0",
    "index",
    "1",
    "index",
    "2",
    "see",
    "sure",
    "put",
    "mydata",
    "see",
    "console",
    "50",
    "modify",
    "array",
    "data",
    "indexes",
    "use",
    "array",
    "indexes",
    "modify",
    "arrays",
    "tried",
    "earlier",
    "strings",
    "using",
    "bracket",
    "notation",
    "able",
    "modify",
    "string",
    "using",
    "bracket",
    "notation",
    "arrays",
    "original",
    "array",
    "18",
    "64",
    "99",
    "going",
    "use",
    "array",
    "index",
    "1",
    "1",
    "going",
    "second",
    "number",
    "remember",
    "0",
    "1",
    "2",
    "number",
    "64",
    "going",
    "set",
    "new",
    "array",
    "going",
    "18",
    "45",
    "99",
    "let",
    "try",
    "18",
    "64",
    "99",
    "let",
    "myarray",
    "instead",
    "second",
    "digit",
    "going",
    "first",
    "digit",
    "array",
    "first",
    "index",
    "would",
    "index",
    "0",
    "say",
    "array",
    "updated",
    "myarray",
    "see",
    "array",
    "45",
    "64",
    "99",
    "access",
    "arrays",
    "indexes",
    "also",
    "use",
    "bracket",
    "notation",
    "select",
    "element",
    "array",
    "arrays",
    "see",
    "array",
    "outer",
    "array",
    "inside",
    "array",
    "arrays",
    "elements",
    "array",
    "arrays",
    "last",
    "element",
    "array",
    "actually",
    "array",
    "deep",
    "array",
    "right",
    "access",
    "array",
    "arrays",
    "element",
    "within",
    "array",
    "within",
    "array",
    "use",
    "double",
    "bracket",
    "notation",
    "see",
    "example",
    "myarray",
    "first",
    "bracket",
    "0",
    "going",
    "get",
    "first",
    "element",
    "array",
    "right",
    "element",
    "array",
    "second",
    "bracket",
    "would",
    "index",
    "array",
    "within",
    "array",
    "zero",
    "would",
    "point",
    "let",
    "try",
    "figure",
    "select",
    "value",
    "equal",
    "well",
    "let",
    "see",
    "see",
    "8",
    "right",
    "let",
    "figure",
    "first",
    "number",
    "well",
    "let",
    "count",
    "zero",
    "one",
    "two",
    "third",
    "array",
    "would",
    "index",
    "2",
    "want",
    "go",
    "zero",
    "one",
    "index",
    "1",
    "get",
    "second",
    "number",
    "third",
    "array",
    "let",
    "test",
    "see",
    "equals",
    "mydata",
    "see",
    "equals",
    "manipulate",
    "arrays",
    "push",
    "pinned",
    "data",
    "end",
    "array",
    "push",
    "function",
    "see",
    "array",
    "set",
    "ourarray",
    "stimpson",
    "j",
    "cat",
    "take",
    "ourarray",
    "right",
    "use",
    "push",
    "function",
    "push",
    "next",
    "element",
    "array",
    "another",
    "array",
    "going",
    "look",
    "like",
    "see",
    "end",
    "original",
    "array",
    "pushed",
    "array",
    "end",
    "let",
    "try",
    "myarray",
    "see",
    "element",
    "array",
    "another",
    "array",
    "going",
    "push",
    "something",
    "end",
    "like",
    "another",
    "array",
    "going",
    "say",
    "dog",
    "3",
    "pushed",
    "onto",
    "array",
    "manipulate",
    "arrays",
    "pop",
    "remove",
    "item",
    "array",
    "pop",
    "function",
    "see",
    "pop",
    "know",
    "function",
    "parenthesis",
    "end",
    "word",
    "pop",
    "array",
    "starts",
    "going",
    "remove",
    "last",
    "element",
    "3",
    "going",
    "put",
    "right",
    "variable",
    "see",
    "removedfromourarray",
    "equals",
    "ourarray",
    "going",
    "equal",
    "3",
    "popped",
    "thing",
    "removedfrommyarray",
    "see",
    "array",
    "going",
    "equal",
    "myarray",
    "see",
    "array",
    "one",
    "item",
    "one",
    "array",
    "instead",
    "two",
    "arrays",
    "manipulate",
    "arrays",
    "shift",
    "shift",
    "function",
    "similar",
    "pop",
    "function",
    "except",
    "removes",
    "first",
    "element",
    "array",
    "instead",
    "final",
    "element",
    "see",
    "shift",
    "function",
    "end",
    "array",
    "array",
    "first",
    "element",
    "stimpson",
    "removed",
    "shift",
    "first",
    "element",
    "array",
    "going",
    "equal",
    "j",
    "cat",
    "removedfromourarray",
    "going",
    "equal",
    "stimpson",
    "let",
    "another",
    "example",
    "going",
    "shift",
    "going",
    "myarray",
    "going",
    "equal",
    "dog",
    "3",
    "removedfrommyarray",
    "going",
    "equal",
    "john",
    "23",
    "manipulate",
    "arrays",
    "unshift",
    "unshift",
    "function",
    "similar",
    "push",
    "array",
    "function",
    "push",
    "adds",
    "element",
    "end",
    "array",
    "unshift",
    "adds",
    "element",
    "beginning",
    "array",
    "let",
    "look",
    "example",
    "code",
    "array",
    "stimpson",
    "j",
    "cat",
    "going",
    "shift",
    "first",
    "element",
    "remove",
    "first",
    "element",
    "ourarray",
    "j",
    "cat",
    "going",
    "unshift",
    "add",
    "element",
    "beginning",
    "string",
    "happy",
    "array",
    "happy",
    "j",
    "cat",
    "let",
    "try",
    "time",
    "array",
    "john",
    "23",
    "dog",
    "3",
    "shift",
    "shifted",
    "john",
    "23",
    "going",
    "unshift",
    "something",
    "going",
    "add",
    "something",
    "beginning",
    "array",
    "paul",
    "35",
    "array",
    "going",
    "paul",
    "35",
    "dog",
    "3",
    "shopping",
    "list",
    "let",
    "give",
    "another",
    "example",
    "nested",
    "arrays",
    "shopping",
    "list",
    "inside",
    "array",
    "going",
    "another",
    "array",
    "going",
    "items",
    "cereal",
    "many",
    "boxes",
    "3",
    "boxes",
    "also",
    "need",
    "milk",
    "let",
    "get",
    "two",
    "cartons",
    "milk",
    "let",
    "get",
    "bananas",
    "three",
    "bunches",
    "three",
    "bananas",
    "also",
    "get",
    "juice",
    "two",
    "containers",
    "juice",
    "finally",
    "get",
    "eggs",
    "get",
    "12",
    "eggs",
    "created",
    "array",
    "arrays",
    "shopping",
    "list",
    "write",
    "reusable",
    "code",
    "functions",
    "functions",
    "allow",
    "us",
    "create",
    "reusable",
    "code",
    "javascript",
    "function",
    "set",
    "word",
    "function",
    "function",
    "name",
    "always",
    "parenthesis",
    "pass",
    "information",
    "parenthesis",
    "talk",
    "later",
    "curly",
    "brackets",
    "opening",
    "curly",
    "bracket",
    "closing",
    "curly",
    "bracket",
    "everything",
    "inside",
    "curly",
    "bracket",
    "run",
    "anytime",
    "function",
    "called",
    "invoked",
    "function",
    "called",
    "putting",
    "function",
    "name",
    "parenthesis",
    "name",
    "every",
    "time",
    "function",
    "called",
    "like",
    "console",
    "going",
    "say",
    "heyya",
    "world",
    "load",
    "console",
    "right",
    "see",
    "says",
    "heyya",
    "world",
    "copy",
    "paste",
    "times",
    "see",
    "going",
    "say",
    "heyya",
    "world",
    "heyya",
    "world",
    "heyya",
    "world",
    "console",
    "since",
    "run",
    "function",
    "three",
    "times",
    "see",
    "words",
    "heyya",
    "world",
    "three",
    "times",
    "going",
    "create",
    "function",
    "going",
    "similar",
    "function",
    "reusable",
    "function",
    "time",
    "going",
    "say",
    "something",
    "slightly",
    "different",
    "going",
    "say",
    "hi",
    "world",
    "instead",
    "heyya",
    "call",
    "function",
    "like",
    "reusablefunction",
    "oh",
    "forgot",
    "put",
    "parenthesis",
    "important",
    "see",
    "heyya",
    "world",
    "hi",
    "world",
    "console",
    "passing",
    "values",
    "functions",
    "arguments",
    "parameters",
    "variables",
    "act",
    "place",
    "holders",
    "values",
    "input",
    "function",
    "called",
    "defined",
    "function",
    "right",
    "called",
    "ourfunctionwithargs",
    "inside",
    "parenthesis",
    "see",
    "letters",
    "b",
    "could",
    "name",
    "could",
    "call",
    "anything",
    "b",
    "really",
    "words",
    "means",
    "function",
    "called",
    "going",
    "pass",
    "data",
    "function",
    "input",
    "data",
    "function",
    "see",
    "example",
    "calling",
    "function",
    "instead",
    "saying",
    "b",
    "parenthesis",
    "actually",
    "passing",
    "values",
    "10",
    "5",
    "function",
    "runs",
    "use",
    "information",
    "passed",
    "function",
    "case",
    "says",
    "well",
    "going",
    "numbers",
    "10",
    "5",
    "passed",
    "function",
    "going",
    "output",
    "going",
    "create",
    "function",
    "similar",
    "function",
    "one",
    "going",
    "called",
    "functionwithargs",
    "also",
    "going",
    "accept",
    "b",
    "could",
    "call",
    "anything",
    "want",
    "inside",
    "instead",
    "subtracting",
    "going",
    "going",
    "call",
    "function",
    "functionwithargs",
    "pass",
    "10",
    "5",
    "let",
    "see",
    "looks",
    "like",
    "console",
    "first",
    "outputted",
    "5",
    "one",
    "output",
    "10",
    "one",
    "global",
    "scope",
    "functions",
    "scope",
    "refers",
    "visibility",
    "variables",
    "variables",
    "defined",
    "outside",
    "function",
    "block",
    "global",
    "scope",
    "global",
    "scope",
    "means",
    "seen",
    "everywhere",
    "javascript",
    "code",
    "instance",
    "going",
    "declare",
    "variable",
    "right",
    "called",
    "myglobal",
    "set",
    "since",
    "set",
    "outside",
    "function",
    "see",
    "anywhere",
    "whole",
    "code",
    "even",
    "function",
    "right",
    "called",
    "fun2",
    "see",
    "reference",
    "going",
    "able",
    "see",
    "statement",
    "talk",
    "later",
    "checking",
    "type",
    "myglobal",
    "equal",
    "undefined",
    "equal",
    "undefined",
    "defined",
    "program",
    "knows",
    "variable",
    "since",
    "global",
    "scope",
    "equal",
    "undefined",
    "equals",
    "program",
    "knows",
    "variable",
    "global",
    "scope",
    "since",
    "function",
    "access",
    "myglobal",
    "variable",
    "run",
    "statement",
    "add",
    "output",
    "variable",
    "myglobal",
    "put",
    "value",
    "myglobal",
    "another",
    "example",
    "going",
    "see",
    "type",
    "oopsglobal",
    "equal",
    "undefined",
    "well",
    "going",
    "set",
    "possible",
    "set",
    "variable",
    "without",
    "using",
    "var",
    "keyword",
    "going",
    "set",
    "oopsglobal",
    "see",
    "var",
    "keyword",
    "normally",
    "use",
    "var",
    "keyword",
    "since",
    "within",
    "function",
    "scoped",
    "function",
    "var",
    "keyword",
    "would",
    "scoped",
    "function",
    "would",
    "able",
    "see",
    "function",
    "however",
    "since",
    "forgot",
    "put",
    "var",
    "keyword",
    "example",
    "var",
    "keyword",
    "becomes",
    "global",
    "automatically",
    "means",
    "access",
    "anywhere",
    "else",
    "program",
    "including",
    "put",
    "var",
    "keyword",
    "oopsglobal",
    "would",
    "equal",
    "undefined",
    "would",
    "never",
    "line",
    "output",
    "however",
    "since",
    "put",
    "var",
    "keyword",
    "oopsglobal",
    "5",
    "added",
    "output",
    "oopsglobal",
    "colon",
    "output",
    "going",
    "say",
    "myglobal",
    "10",
    "oopsglobal",
    "actually",
    "going",
    "say",
    "scrimba",
    "scrimba",
    "careful",
    "enforces",
    "fact",
    "use",
    "var",
    "keyword",
    "browser",
    "would",
    "enforce",
    "var",
    "keyword",
    "would",
    "actually",
    "show",
    "myglobal",
    "10",
    "oopsglobal",
    "little",
    "complicated",
    "worry",
    "lot",
    "concepts",
    "going",
    "later",
    "additional",
    "examples",
    "local",
    "scope",
    "functions",
    "variables",
    "declared",
    "within",
    "function",
    "well",
    "function",
    "parameters",
    "local",
    "scope",
    "means",
    "visible",
    "within",
    "function",
    "let",
    "show",
    "mean",
    "declare",
    "variable",
    "right",
    "myvar",
    "declared",
    "variable",
    "inside",
    "function",
    "variable",
    "myvar",
    "visible",
    "inside",
    "function",
    "says",
    "myvar",
    "going",
    "call",
    "function",
    "going",
    "myvar",
    "program",
    "going",
    "run",
    "outside",
    "function",
    "still",
    "going",
    "try",
    "access",
    "myvar",
    "let",
    "see",
    "happens",
    "see",
    "console",
    "first",
    "5",
    "within",
    "function",
    "error",
    "tried",
    "access",
    "myvar",
    "outside",
    "function",
    "really",
    "need",
    "delete",
    "try",
    "access",
    "variable",
    "outside",
    "function",
    "error",
    "global",
    "vs",
    "local",
    "scope",
    "functions",
    "possible",
    "local",
    "global",
    "variables",
    "name",
    "local",
    "variable",
    "takes",
    "precedent",
    "global",
    "variable",
    "let",
    "show",
    "example",
    "function",
    "called",
    "myoutfit",
    "going",
    "return",
    "outerwear",
    "variable",
    "global",
    "variable",
    "declared",
    "outside",
    "function",
    "output",
    "myoutfit",
    "function",
    "myoutfit",
    "function",
    "going",
    "return",
    "outerwear",
    "word",
    "let",
    "check",
    "console",
    "see",
    "yep",
    "however",
    "let",
    "change",
    "bit",
    "space",
    "going",
    "put",
    "var",
    "outerwear",
    "sweater",
    "run",
    "program",
    "see",
    "console",
    "going",
    "say",
    "sweater",
    "instead",
    "local",
    "variable",
    "outerwear",
    "took",
    "precedence",
    "global",
    "variable",
    "another",
    "interesting",
    "thing",
    "outerwear",
    "variable",
    "see",
    "still",
    "first",
    "see",
    "console",
    "says",
    "sweater",
    "first",
    "function",
    "sweater",
    "returns",
    "sweater",
    "global",
    "variable",
    "return",
    "value",
    "function",
    "return",
    "return",
    "value",
    "function",
    "return",
    "statement",
    "function",
    "passing",
    "number",
    "num",
    "going",
    "return",
    "whatever",
    "return",
    "keyword",
    "case",
    "going",
    "function",
    "returns",
    "result",
    "going",
    "number",
    "look",
    "console",
    "yep",
    "number",
    "3",
    "function",
    "returns",
    "let",
    "try",
    "creating",
    "another",
    "one",
    "function",
    "going",
    "called",
    "timesfive",
    "pass",
    "number",
    "going",
    "return",
    "something",
    "going",
    "return",
    "num",
    "like",
    "test",
    "using",
    "timesfive",
    "pass",
    "number",
    "5",
    "run",
    "see",
    "retuns",
    "number",
    "25",
    "understanding",
    "undefined",
    "value",
    "returned",
    "function",
    "functions",
    "return",
    "statements",
    "case",
    "function",
    "adds",
    "3",
    "sum",
    "variable",
    "global",
    "variable",
    "defined",
    "function",
    "return",
    "anything",
    "specify",
    "return",
    "value",
    "return",
    "value",
    "undefined",
    "going",
    "create",
    "another",
    "function",
    "similar",
    "going",
    "called",
    "addfive",
    "time",
    "sum",
    "shorten",
    "use",
    "going",
    "add",
    "five",
    "sum",
    "also",
    "going",
    "return",
    "anything",
    "log",
    "would",
    "undefined",
    "assignment",
    "returned",
    "value",
    "simple",
    "assign",
    "returned",
    "value",
    "variable",
    "see",
    "right",
    "function",
    "change",
    "pass",
    "number",
    "going",
    "return",
    "result",
    "mathematical",
    "expression",
    "call",
    "function",
    "change",
    "pass",
    "10",
    "value",
    "returned",
    "function",
    "going",
    "stored",
    "variable",
    "thing",
    "first",
    "initialize",
    "variable",
    "processed",
    "processedarg",
    "going",
    "return",
    "result",
    "mathematical",
    "expression",
    "set",
    "processed",
    "equal",
    "function",
    "returns",
    "say",
    "processedarg",
    "pass",
    "number",
    "7",
    "processed",
    "equals",
    "result",
    "mathematical",
    "expression",
    "stand",
    "line",
    "computer",
    "science",
    "cue",
    "abstract",
    "data",
    "structure",
    "items",
    "kept",
    "order",
    "new",
    "items",
    "added",
    "back",
    "cue",
    "old",
    "items",
    "taken",
    "front",
    "cue",
    "going",
    "simulate",
    "right",
    "functionality",
    "cue",
    "using",
    "nextinline",
    "function",
    "purpose",
    "show",
    "nextinline",
    "function",
    "add",
    "item",
    "array",
    "passed",
    "going",
    "return",
    "first",
    "item",
    "list",
    "instance",
    "array",
    "right",
    "add",
    "item",
    "array",
    "come",
    "end",
    "come",
    "return",
    "first",
    "item",
    "list",
    "case",
    "see",
    "set",
    "show",
    "list",
    "looks",
    "like",
    "array",
    "looks",
    "like",
    "beforehand",
    "show",
    "looks",
    "like",
    "afterwards",
    "way",
    "change",
    "array",
    "string",
    "easily",
    "printed",
    "screen",
    "going",
    "two",
    "things",
    "learned",
    "already",
    "first",
    "thing",
    "add",
    "item",
    "onto",
    "list",
    "see",
    "right",
    "nextinline",
    "passed",
    "testarr",
    "calling",
    "function",
    "nextinline",
    "passing",
    "testarr",
    "number",
    "want",
    "number",
    "6",
    "added",
    "end",
    "array",
    "put",
    "num",
    "like",
    "oh",
    "actually",
    "item",
    "took",
    "array",
    "passed",
    "case",
    "testarr",
    "push",
    "time",
    "passed",
    "case",
    "item",
    "want",
    "return",
    "first",
    "item",
    "list",
    "want",
    "remove",
    "return",
    "item",
    "show",
    "number",
    "instead",
    "returning",
    "item",
    "going",
    "return",
    "shift",
    "shift",
    "moves",
    "first",
    "item",
    "returns",
    "first",
    "item",
    "let",
    "check",
    "okay",
    "see",
    "popped",
    "1",
    "boolean",
    "values",
    "booleans",
    "another",
    "datatype",
    "javascript",
    "two",
    "values",
    "true",
    "false",
    "basically",
    "little",
    "switches",
    "true",
    "false",
    "use",
    "quotation",
    "marks",
    "around",
    "boolean",
    "see",
    "says",
    "return",
    "false",
    "function",
    "indented",
    "going",
    "return",
    "false",
    "call",
    "function",
    "could",
    "also",
    "true",
    "could",
    "return",
    "true",
    "use",
    "true",
    "false",
    "places",
    "function",
    "returns",
    "talking",
    "later",
    "use",
    "conditional",
    "logic",
    "statements",
    "statement",
    "used",
    "make",
    "decisions",
    "code",
    "keyword",
    "tells",
    "javascript",
    "execute",
    "code",
    "curly",
    "braces",
    "certain",
    "conditions",
    "defined",
    "parenthesis",
    "full",
    "statement",
    "right",
    "always",
    "parenthesis",
    "keyword",
    "condition",
    "stuff",
    "inside",
    "parenthesis",
    "evaluates",
    "true",
    "code",
    "within",
    "curly",
    "braces",
    "evaluated",
    "run",
    "case",
    "variable",
    "isittrue",
    "variable",
    "true",
    "return",
    "yes",
    "true",
    "true",
    "get",
    "second",
    "return",
    "statement",
    "false",
    "whole",
    "function",
    "takes",
    "variable",
    "check",
    "true",
    "going",
    "make",
    "another",
    "example",
    "like",
    "another",
    "function",
    "filled",
    "yet",
    "trueorfalse",
    "variable",
    "passed",
    "wasthattrue",
    "say",
    "parenthesis",
    "wasthattrue",
    "true",
    "going",
    "return",
    "something",
    "string",
    "like",
    "string",
    "yes",
    "true",
    "true",
    "get",
    "second",
    "return",
    "statement",
    "function",
    "return",
    "different",
    "string",
    "return",
    "false",
    "add",
    "semicolons",
    "run",
    "see",
    "happens",
    "oh",
    "return",
    "needs",
    "spelled",
    "correctly",
    "let",
    "spell",
    "return",
    "correctly",
    "run",
    "going",
    "add",
    "answer",
    "function",
    "call",
    "true",
    "false",
    "passing",
    "true",
    "going",
    "log",
    "returned",
    "yes",
    "true",
    "since",
    "passed",
    "true",
    "statement",
    "evaluates",
    "true",
    "code",
    "run",
    "right",
    "comparison",
    "equality",
    "operator",
    "many",
    "comparison",
    "operators",
    "javascript",
    "return",
    "boolean",
    "true",
    "false",
    "common",
    "equality",
    "operator",
    "often",
    "used",
    "statement",
    "says",
    "val",
    "whole",
    "statement",
    "right",
    "val",
    "going",
    "see",
    "val",
    "check",
    "equals",
    "12",
    "going",
    "use",
    "equality",
    "operator",
    "say",
    "val",
    "12",
    "reason",
    "use",
    "single",
    "equal",
    "sign",
    "single",
    "equal",
    "sign",
    "assignment",
    "operator",
    "single",
    "equal",
    "sign",
    "would",
    "mean",
    "setting",
    "value",
    "val",
    "variable",
    "equal",
    "trying",
    "set",
    "equal",
    "12",
    "trying",
    "check",
    "value",
    "variable",
    "equals",
    "12",
    "use",
    "double",
    "equal",
    "sign",
    "testequal",
    "function",
    "going",
    "test",
    "see",
    "number",
    "pass",
    "equal",
    "see",
    "appears",
    "console",
    "equal",
    "10",
    "equal",
    "12",
    "comparison",
    "strict",
    "equality",
    "operator",
    "learned",
    "equality",
    "operator",
    "double",
    "equal",
    "sign",
    "also",
    "strict",
    "equality",
    "operator",
    "triple",
    "equal",
    "sign",
    "checking",
    "3",
    "equals",
    "3",
    "strict",
    "equality",
    "operator",
    "difference",
    "equality",
    "operator",
    "double",
    "equals",
    "sign",
    "attempts",
    "convert",
    "values",
    "compared",
    "common",
    "type",
    "strict",
    "equality",
    "operator",
    "type",
    "conversion",
    "going",
    "evaluate",
    "true",
    "3",
    "3",
    "3",
    "string",
    "side",
    "going",
    "evaluate",
    "false",
    "would",
    "true",
    "using",
    "double",
    "equals",
    "sign",
    "string",
    "would",
    "converted",
    "number",
    "would",
    "equal",
    "true",
    "get",
    "converted",
    "number",
    "would",
    "evaluated",
    "false",
    "second",
    "one",
    "three",
    "equal",
    "signs",
    "going",
    "use",
    "right",
    "statement",
    "pass",
    "number",
    "7",
    "going",
    "evaluate",
    "true",
    "pass",
    "string",
    "7",
    "evaluate",
    "false",
    "practice",
    "comparing",
    "different",
    "values",
    "one",
    "review",
    "equality",
    "operator",
    "strict",
    "equality",
    "operator",
    "run",
    "see",
    "console",
    "says",
    "equal",
    "checking",
    "number",
    "10",
    "string",
    "10",
    "equal",
    "b",
    "number",
    "10",
    "equals",
    "strict",
    "number",
    "10",
    "return",
    "equal",
    "since",
    "using",
    "equality",
    "operator",
    "two",
    "equal",
    "signs",
    "performs",
    "type",
    "conversion",
    "converts",
    "string",
    "number",
    "use",
    "strict",
    "equality",
    "operator",
    "three",
    "equal",
    "signs",
    "run",
    "see",
    "equal",
    "console",
    "converting",
    "types",
    "checking",
    "number",
    "equal",
    "string",
    "get",
    "equal",
    "comparison",
    "inequality",
    "operator",
    "show",
    "inequality",
    "operator",
    "basically",
    "opposite",
    "equality",
    "operator",
    "going",
    "inequality",
    "operator",
    "exclamation",
    "point",
    "equal",
    "sign",
    "case",
    "going",
    "see",
    "value",
    "equal",
    "like",
    "equality",
    "operator",
    "type",
    "conversion",
    "let",
    "run",
    "program",
    "see",
    "equal",
    "10",
    "passed",
    "10",
    "function",
    "10",
    "equal",
    "99",
    "get",
    "equal",
    "comparison",
    "strict",
    "inequality",
    "operator",
    "strict",
    "inequality",
    "operator",
    "basically",
    "opposite",
    "strict",
    "equality",
    "operator",
    "works",
    "like",
    "says",
    "val",
    "going",
    "val",
    "equal",
    "strict",
    "inequality",
    "operator",
    "instead",
    "one",
    "equal",
    "sign",
    "two",
    "equal",
    "signs",
    "means",
    "going",
    "check",
    "true",
    "going",
    "convert",
    "types",
    "instance",
    "checking",
    "number",
    "3",
    "equal",
    "string",
    "3",
    "would",
    "true",
    "example",
    "checking",
    "10",
    "equal",
    "run",
    "see",
    "equal",
    "comparisons",
    "logical",
    "operator",
    "also",
    "use",
    "greater",
    "operator",
    "function",
    "checking",
    "value",
    "going",
    "put",
    "greater",
    "checking",
    "value",
    "10",
    "put",
    "greater",
    "call",
    "function",
    "pass",
    "run",
    "function",
    "see",
    "10",
    "10",
    "10",
    "passed",
    "10",
    "comparison",
    "greater",
    "equal",
    "operator",
    "also",
    "use",
    "greater",
    "equal",
    "operator",
    "finish",
    "function",
    "using",
    "greater",
    "equal",
    "put",
    "20",
    "greater",
    "equal",
    "run",
    "see",
    "10",
    "passing",
    "10",
    "greater",
    "equal",
    "10",
    "comparisons",
    "less",
    "operator",
    "show",
    "example",
    "less",
    "operator",
    "function",
    "going",
    "check",
    "value",
    "less",
    "checking",
    "value",
    "less",
    "trick",
    "use",
    "remember",
    "symbol",
    "less",
    "symbol",
    "see",
    "less",
    "symbol",
    "looks",
    "kind",
    "like",
    "letter",
    "l",
    "first",
    "letter",
    "less",
    "symbol",
    "opposite",
    "comparisons",
    "less",
    "equal",
    "operator",
    "also",
    "less",
    "equal",
    "operator",
    "use",
    "javascript",
    "going",
    "check",
    "less",
    "equal",
    "put",
    "less",
    "operator",
    "equal",
    "less",
    "equal",
    "important",
    "part",
    "less",
    "equal",
    "24",
    "make",
    "statement",
    "true",
    "run",
    "see",
    "small",
    "equal",
    "12",
    "number",
    "10",
    "passed",
    "comparisons",
    "logical",
    "operator",
    "sometimes",
    "want",
    "check",
    "2",
    "things",
    "true",
    "time",
    "instance",
    "may",
    "want",
    "check",
    "value",
    "less",
    "equal",
    "also",
    "want",
    "check",
    "value",
    "equal",
    "nested",
    "statement",
    "going",
    "check",
    "less",
    "equal",
    "50",
    "equal",
    "25",
    "going",
    "return",
    "yes",
    "easier",
    "way",
    "going",
    "copy",
    "says",
    "value",
    "equal",
    "25",
    "going",
    "delete",
    "nested",
    "statement",
    "need",
    "statement",
    "going",
    "use",
    "operator",
    "less",
    "equal",
    "put",
    "two",
    "ampersands",
    "like",
    "means",
    "going",
    "put",
    "value",
    "equal",
    "says",
    "value",
    "less",
    "equal",
    "50",
    "value",
    "also",
    "equal",
    "25",
    "going",
    "return",
    "statement",
    "statement",
    "true",
    "get",
    "inside",
    "statement",
    "comparisons",
    "logical",
    "operator",
    "code",
    "checking",
    "value",
    "10",
    "value",
    "less",
    "10",
    "return",
    "outside",
    "value",
    "20",
    "return",
    "outside",
    "easier",
    "way",
    "logical",
    "operator",
    "going",
    "delete",
    "whole",
    "statement",
    "add",
    "statement",
    "two",
    "pipes",
    "going",
    "put",
    "val",
    "20",
    "checking",
    "value",
    "less",
    "10",
    "value",
    "either",
    "way",
    "going",
    "return",
    "outside",
    "true",
    "return",
    "inside",
    "else",
    "statements",
    "statement",
    "true",
    "normally",
    "block",
    "code",
    "right",
    "statement",
    "evaluated",
    "true",
    "nothing",
    "happens",
    "else",
    "statement",
    "alternate",
    "block",
    "code",
    "executed",
    "true",
    "perfect",
    "use",
    "case",
    "value",
    "5",
    "result",
    "bigger",
    "value",
    "less",
    "equal",
    "5",
    "result",
    "5",
    "smaller",
    "else",
    "statement",
    "going",
    "type",
    "else",
    "delete",
    "whole",
    "statement",
    "like",
    "value",
    "less",
    "result",
    "going",
    "bigger",
    "5",
    "else",
    "5",
    "return",
    "5",
    "smaller",
    "else",
    "statements",
    "multiple",
    "conditions",
    "need",
    "addressed",
    "use",
    "else",
    "statements",
    "way",
    "chaining",
    "statements",
    "together",
    "example",
    "three",
    "conditions",
    "value",
    "10",
    "going",
    "return",
    "greater",
    "less",
    "5",
    "return",
    "smaller",
    "5",
    "else",
    "going",
    "return",
    "5",
    "perfect",
    "use",
    "case",
    "else",
    "statement",
    "else",
    "going",
    "add",
    "statement",
    "end",
    "else",
    "going",
    "delete",
    "stuff",
    "else",
    "value",
    "less",
    "5",
    "going",
    "one",
    "final",
    "else",
    "statement",
    "else",
    "going",
    "put",
    "statement",
    "final",
    "return",
    "going",
    "cut",
    "paste",
    "right",
    "instead",
    "using",
    "multiple",
    "statements",
    "else",
    "else",
    "logical",
    "order",
    "else",
    "statements",
    "using",
    "else",
    "statements",
    "order",
    "important",
    "let",
    "look",
    "example",
    "function",
    "first",
    "check",
    "value",
    "less",
    "10",
    "return",
    "less",
    "10",
    "else",
    "check",
    "value",
    "less",
    "5",
    "return",
    "less",
    "well",
    "look",
    "example",
    "pass",
    "number",
    "run",
    "see",
    "going",
    "say",
    "less",
    "10",
    "want",
    "however",
    "put",
    "3",
    "still",
    "going",
    "say",
    "less",
    "10",
    "really",
    "want",
    "say",
    "less",
    "5",
    "actually",
    "less",
    "however",
    "wrong",
    "order",
    "need",
    "change",
    "order",
    "first",
    "condition",
    "met",
    "even",
    "check",
    "rest",
    "conditions",
    "important",
    "think",
    "order",
    "run",
    "yeah",
    "less",
    "5",
    "want",
    "chaining",
    "else",
    "statements",
    "also",
    "chain",
    "else",
    "statements",
    "going",
    "complete",
    "following",
    "challenge",
    "write",
    "chained",
    "statements",
    "fulfill",
    "following",
    "conditions",
    "conditions",
    "number",
    "less",
    "5",
    "going",
    "return",
    "tiny",
    "less",
    "10",
    "return",
    "small",
    "going",
    "actually",
    "copy",
    "right",
    "written",
    "part",
    "written",
    "exactly",
    "want",
    "written",
    "paste",
    "going",
    "add",
    "else",
    "statements",
    "going",
    "put",
    "parenthesis",
    "condition",
    "always",
    "paranthesis",
    "number",
    "less",
    "5",
    "going",
    "use",
    "curly",
    "braces",
    "going",
    "return",
    "tiny",
    "move",
    "cut",
    "paste",
    "going",
    "use",
    "else",
    "statement",
    "got",
    "curly",
    "braces",
    "first",
    "also",
    "need",
    "put",
    "condition",
    "parenthesis",
    "going",
    "cut",
    "number",
    "less",
    "put",
    "right",
    "going",
    "return",
    "small",
    "put",
    "curly",
    "braces",
    "another",
    "else",
    "statement",
    "else",
    "condition",
    "like",
    "number",
    "less",
    "put",
    "always",
    "need",
    "curly",
    "braces",
    "show",
    "going",
    "happen",
    "statement",
    "cutting",
    "pasting",
    "text",
    "else",
    "return",
    "large",
    "another",
    "actually",
    "final",
    "thing",
    "going",
    "else",
    "even",
    "need",
    "else",
    "statement",
    "end",
    "even",
    "need",
    "put",
    "condition",
    "equal",
    "20",
    "going",
    "everything",
    "else",
    "going",
    "cut",
    "need",
    "stuff",
    "going",
    "return",
    "large",
    "one",
    "test",
    "test",
    "7",
    "actually",
    "see",
    "returns",
    "try",
    "different",
    "things",
    "oh",
    "error",
    "oh",
    "forgot",
    "put",
    "parenthesis",
    "wrong",
    "way",
    "let",
    "try",
    "small",
    "20",
    "huge",
    "19",
    "would",
    "less",
    "20",
    "see",
    "large",
    "yep",
    "worked",
    "golf",
    "code",
    "game",
    "golf",
    "hole",
    "par",
    "means",
    "average",
    "number",
    "strokes",
    "supposed",
    "use",
    "get",
    "ball",
    "hole",
    "depending",
    "far",
    "par",
    "strokes",
    "different",
    "nickname",
    "nicknames",
    "eagle",
    "birdie",
    "par",
    "going",
    "write",
    "function",
    "pass",
    "par",
    "also",
    "pass",
    "strokes",
    "see",
    "par",
    "strokes",
    "going",
    "return",
    "nickname",
    "going",
    "write",
    "see",
    "table",
    "shows",
    "strokes",
    "1",
    "get",
    "stroke",
    "less",
    "equal",
    "get",
    "eagle",
    "also",
    "array",
    "going",
    "make",
    "easier",
    "use",
    "things",
    "array",
    "instead",
    "typing",
    "words",
    "going",
    "start",
    "statement",
    "put",
    "condition",
    "strokes",
    "equality",
    "operator",
    "want",
    "use",
    "single",
    "equals",
    "sign",
    "would",
    "assignment",
    "operator",
    "equals",
    "1",
    "return",
    "see",
    "going",
    "return",
    "use",
    "names",
    "array",
    "going",
    "names",
    "going",
    "index",
    "zero",
    "array",
    "names",
    "0",
    "else",
    "else",
    "put",
    "condition",
    "strokes",
    "spell",
    "strokes",
    "right",
    "strokes",
    "actually",
    "copy",
    "right",
    "less",
    "equal",
    "going",
    "return",
    "name",
    "index",
    "1",
    "eagle",
    "point",
    "copy",
    "pasting",
    "going",
    "copy",
    "whole",
    "thing",
    "lot",
    "rest",
    "else",
    "else",
    "strokes",
    "time",
    "going",
    "equal",
    "going",
    "return",
    "birdie",
    "array",
    "index",
    "2",
    "going",
    "continue",
    "like",
    "time",
    "strokes",
    "equal",
    "par",
    "going",
    "return",
    "name",
    "index",
    "3",
    "see",
    "zero",
    "one",
    "two",
    "three",
    "going",
    "word",
    "par",
    "keep",
    "like",
    "going",
    "change",
    "4",
    "going",
    "change",
    "5",
    "going",
    "double",
    "bogie",
    "finally",
    "strokes",
    "change",
    "equal",
    "means",
    "poorly",
    "go",
    "home",
    "going",
    "name",
    "index",
    "6",
    "need",
    "anymore",
    "going",
    "tests",
    "going",
    "going",
    "pass",
    "function",
    "calling",
    "case",
    "par",
    "5",
    "strokes",
    "return",
    "birdie",
    "let",
    "see",
    "happens",
    "null",
    "okay",
    "expected",
    "names",
    "spelled",
    "wrong",
    "sometimes",
    "better",
    "check",
    "go",
    "whole",
    "thing",
    "test",
    "things",
    "go",
    "let",
    "yep",
    "birdie",
    "type",
    "2",
    "eagle",
    "type",
    "8",
    "probably",
    "going",
    "tell",
    "us",
    "go",
    "home",
    "go",
    "home",
    "yep",
    "completed",
    "challenge",
    "switch",
    "statements",
    "instead",
    "using",
    "chained",
    "else",
    "statements",
    "use",
    "switch",
    "statement",
    "switch",
    "statement",
    "tests",
    "value",
    "many",
    "case",
    "statements",
    "define",
    "various",
    "possible",
    "values",
    "let",
    "show",
    "works",
    "going",
    "write",
    "switch",
    "statement",
    "tests",
    "val",
    "sets",
    "answer",
    "following",
    "conditions",
    "pass",
    "1",
    "answer",
    "alpha",
    "pass",
    "2",
    "answer",
    "beta",
    "let",
    "show",
    "works",
    "type",
    "word",
    "switch",
    "keyword",
    "testing",
    "val",
    "passed",
    "function",
    "starts",
    "kind",
    "like",
    "statement",
    "right",
    "going",
    "compare",
    "val",
    "different",
    "cases",
    "case",
    "first",
    "number",
    "going",
    "saying",
    "case",
    "val",
    "1",
    "val",
    "1",
    "using",
    "strict",
    "equality",
    "operator",
    "like",
    "going",
    "make",
    "sure",
    "type",
    "variable",
    "string",
    "1",
    "number",
    "1",
    "equal",
    "case",
    "1",
    "going",
    "set",
    "answer",
    "alpha",
    "going",
    "break",
    "break",
    "means",
    "end",
    "case",
    "statement",
    "break",
    "goes",
    "end",
    "switch",
    "statement",
    "evaluate",
    "anything",
    "else",
    "switch",
    "statement",
    "also",
    "going",
    "case",
    "one",
    "thing",
    "forgot",
    "going",
    "indent",
    "easier",
    "see",
    "different",
    "cases",
    "case",
    "2",
    "answer",
    "going",
    "equal",
    "beta",
    "also",
    "need",
    "break",
    "statement",
    "break",
    "statement",
    "run",
    "next",
    "case",
    "statement",
    "automatically",
    "case",
    "1",
    "break",
    "first",
    "would",
    "set",
    "answer",
    "alpha",
    "would",
    "set",
    "answer",
    "beta",
    "would",
    "skip",
    "next",
    "case",
    "statement",
    "break",
    "going",
    "go",
    "switch",
    "statement",
    "completely",
    "would",
    "go",
    "start",
    "running",
    "code",
    "last",
    "curly",
    "bracket",
    "going",
    "case",
    "copying",
    "pasting",
    "going",
    "4",
    "cases",
    "rest",
    "pasting",
    "3",
    "4",
    "alpha",
    "beta",
    "gamma",
    "delta",
    "know",
    "switch",
    "statement",
    "final",
    "curly",
    "bracket",
    "going",
    "return",
    "answer",
    "let",
    "tests",
    "really",
    "test",
    "going",
    "add",
    "log",
    "going",
    "run",
    "alpha",
    "good",
    "2",
    "beta",
    "3",
    "gamma",
    "good",
    "assume",
    "4",
    "correct",
    "done",
    "default",
    "option",
    "switch",
    "statements",
    "talk",
    "default",
    "option",
    "switch",
    "statement",
    "default",
    "option",
    "kind",
    "like",
    "else",
    "else",
    "statement",
    "switch",
    "statement",
    "similar",
    "one",
    "already",
    "saw",
    "inside",
    "function",
    "pass",
    "value",
    "function",
    "going",
    "check",
    "value",
    "equals",
    "equals",
    "answer",
    "going",
    "sent",
    "apple",
    "b",
    "answer",
    "set",
    "birds",
    "c",
    "cat",
    "example",
    "see",
    "passed",
    "passed",
    "returned",
    "apple",
    "one",
    "options",
    "pass",
    "something",
    "else",
    "pass",
    "number",
    "2",
    "going",
    "return",
    "empty",
    "string",
    "answer",
    "set",
    "empty",
    "string",
    "never",
    "override",
    "answer",
    "returns",
    "empty",
    "string",
    "want",
    "return",
    "something",
    "anytime",
    "b",
    "c",
    "passed",
    "anything",
    "else",
    "passed",
    "function",
    "going",
    "default",
    "like",
    "else",
    "statement",
    "default",
    "going",
    "answer",
    "stuff",
    "going",
    "break",
    "whenever",
    "pass",
    "something",
    "b",
    "c",
    "going",
    "return",
    "stuff",
    "pass",
    "going",
    "return",
    "stuff",
    "go",
    "back",
    "passing",
    "c",
    "one",
    "things",
    "case",
    "return",
    "cat",
    "switch",
    "statement",
    "multiple",
    "identical",
    "options",
    "switch",
    "statements",
    "sometimes",
    "want",
    "switch",
    "statement",
    "multiple",
    "inputs",
    "give",
    "output",
    "well",
    "easy",
    "enough",
    "omitting",
    "break",
    "statement",
    "let",
    "show",
    "works",
    "let",
    "get",
    "switch",
    "statement",
    "going",
    "val",
    "passed",
    "function",
    "case",
    "want",
    "case",
    "1",
    "2",
    "3",
    "return",
    "answer",
    "low",
    "like",
    "case",
    "1",
    "go",
    "straight",
    "case",
    "go",
    "straight",
    "case",
    "since",
    "break",
    "statement",
    "cases",
    "keep",
    "going",
    "next",
    "one",
    "automatically",
    "going",
    "say",
    "answer",
    "going",
    "set",
    "equal",
    "low",
    "put",
    "break",
    "statement",
    "okay",
    "going",
    "thing",
    "cases",
    "4",
    "actually",
    "going",
    "copying",
    "pasting",
    "going",
    "copy",
    "going",
    "paste",
    "4",
    "5",
    "going",
    "thing",
    "7",
    "8",
    "going",
    "copy",
    "paste",
    "going",
    "update",
    "code",
    "going",
    "4",
    "5",
    "7",
    "8",
    "going",
    "mid",
    "high",
    "case",
    "1",
    "2",
    "3",
    "like",
    "instance",
    "1",
    "going",
    "pass",
    "2",
    "3",
    "get",
    "low",
    "going",
    "break",
    "4",
    "5",
    "6",
    "going",
    "pass",
    "get",
    "mid",
    "going",
    "break",
    "7",
    "8",
    "going",
    "pass",
    "high",
    "break",
    "let",
    "test",
    "see",
    "since",
    "passing",
    "number",
    "1",
    "going",
    "low",
    "pass",
    "5",
    "get",
    "7",
    "8",
    "9",
    "get",
    "high",
    "replacing",
    "else",
    "chains",
    "switch",
    "sometimes",
    "switch",
    "statement",
    "easier",
    "write",
    "easier",
    "understand",
    "chain",
    "else",
    "statements",
    "going",
    "change",
    "chain",
    "else",
    "statements",
    "become",
    "switch",
    "statement",
    "let",
    "right",
    "going",
    "start",
    "switch",
    "keyword",
    "going",
    "evaluating",
    "value",
    "open",
    "curly",
    "bracket",
    "make",
    "sure",
    "end",
    "curly",
    "bracket",
    "end",
    "case",
    "bob",
    "going",
    "set",
    "answer",
    "marley",
    "need",
    "break",
    "case",
    "42",
    "going",
    "set",
    "answer",
    "answer",
    "case",
    "1",
    "set",
    "answer",
    "1",
    "need",
    "break",
    "case",
    "99",
    "answer",
    "missed",
    "much",
    "need",
    "break",
    "case",
    "7",
    "7",
    "8",
    "9",
    "break",
    "changed",
    "chain",
    "else",
    "statements",
    "switch",
    "statement",
    "returning",
    "boolean",
    "values",
    "functions",
    "little",
    "trick",
    "want",
    "function",
    "return",
    "boolean",
    "true",
    "false",
    "value",
    "see",
    "function",
    "checking",
    "less",
    "return",
    "true",
    "else",
    "return",
    "false",
    "may",
    "remember",
    "comparison",
    "operators",
    "return",
    "boolean",
    "true",
    "false",
    "value",
    "instead",
    "using",
    "statement",
    "actually",
    "delete",
    "return",
    "result",
    "return",
    "returning",
    "result",
    "less",
    "going",
    "true",
    "false",
    "skip",
    "whole",
    "statement",
    "logic",
    "return",
    "able",
    "see",
    "10",
    "less",
    "less",
    "true",
    "put",
    "20",
    "false",
    "returning",
    "early",
    "pattern",
    "functions",
    "already",
    "seen",
    "examples",
    "return",
    "early",
    "function",
    "return",
    "statement",
    "see",
    "function",
    "right",
    "return",
    "end",
    "function",
    "leaves",
    "function",
    "returns",
    "value",
    "function",
    "leave",
    "function",
    "time",
    "return",
    "statement",
    "going",
    "modify",
    "function",
    "b",
    "less",
    "0",
    "function",
    "immediately",
    "exit",
    "value",
    "undefined",
    "let",
    "going",
    "set",
    "statement",
    "less",
    "0",
    "two",
    "pipes",
    "b",
    "less",
    "0",
    "going",
    "return",
    "undefined",
    "test",
    "negative",
    "number",
    "going",
    "return",
    "undefined",
    "scrimba",
    "little",
    "quirk",
    "shows",
    "null",
    "browser",
    "show",
    "undefined",
    "counting",
    "cards",
    "going",
    "create",
    "blackjack",
    "card",
    "counting",
    "function",
    "card",
    "counting",
    "works",
    "least",
    "function",
    "going",
    "work",
    "see",
    "low",
    "card",
    "count",
    "goes",
    "see",
    "high",
    "card",
    "count",
    "goes",
    "middle",
    "value",
    "card",
    "count",
    "stays",
    "count",
    "positive",
    "player",
    "bet",
    "high",
    "count",
    "zero",
    "negative",
    "player",
    "bet",
    "low",
    "going",
    "use",
    "switch",
    "statement",
    "figure",
    "card",
    "passed",
    "see",
    "function",
    "looks",
    "like",
    "cc",
    "pass",
    "card",
    "depending",
    "card",
    "going",
    "increase",
    "global",
    "count",
    "variable",
    "going",
    "decrease",
    "going",
    "stay",
    "going",
    "return",
    "two",
    "things",
    "going",
    "return",
    "change",
    "going",
    "return",
    "current",
    "count",
    "value",
    "whether",
    "player",
    "hold",
    "bet",
    "every",
    "time",
    "call",
    "cc",
    "function",
    "going",
    "change",
    "count",
    "value",
    "return",
    "total",
    "count",
    "let",
    "see",
    "going",
    "work",
    "going",
    "use",
    "switch",
    "statement",
    "like",
    "said",
    "going",
    "check",
    "card",
    "value",
    "passed",
    "case",
    "2",
    "3",
    "4",
    "5",
    "6",
    "going",
    "increment",
    "count",
    "variable",
    "going",
    "like",
    "case",
    "going",
    "copying",
    "pasting",
    "case",
    "2",
    "3",
    "4",
    "5",
    "6",
    "change",
    "values",
    "3",
    "4",
    "5",
    "many",
    "ways",
    "write",
    "program",
    "could",
    "done",
    "statements",
    "else",
    "statements",
    "could",
    "even",
    "done",
    "ways",
    "even",
    "talked",
    "yet",
    "long",
    "program",
    "works",
    "case",
    "matters",
    "find",
    "different",
    "way",
    "write",
    "program",
    "great",
    "case",
    "2",
    "3",
    "4",
    "5",
    "6",
    "going",
    "take",
    "count",
    "value",
    "increments",
    "going",
    "break",
    "case",
    "7",
    "8",
    "9",
    "let",
    "paste",
    "three",
    "7",
    "8",
    "actually",
    "going",
    "nothing",
    "count",
    "going",
    "change",
    "even",
    "need",
    "case",
    "7",
    "8",
    "instead",
    "7",
    "8",
    "9",
    "need",
    "check",
    "case",
    "something",
    "actually",
    "going",
    "happen",
    "going",
    "decrement",
    "count",
    "variable",
    "10",
    "jack",
    "queen",
    "king",
    "ace",
    "going",
    "change",
    "10",
    "jack",
    "queen",
    "king",
    "ace",
    "case",
    "going",
    "decrement",
    "count",
    "going",
    "count",
    "count",
    "count",
    "break",
    "taken",
    "care",
    "count",
    "updating",
    "count",
    "take",
    "care",
    "going",
    "return",
    "going",
    "return",
    "count",
    "also",
    "going",
    "return",
    "whether",
    "going",
    "hold",
    "bet",
    "going",
    "actually",
    "return",
    "variable",
    "first",
    "going",
    "space",
    "space",
    "number",
    "going",
    "return",
    "hold",
    "variable",
    "variable",
    "created",
    "yet",
    "normally",
    "would",
    "perfect",
    "time",
    "use",
    "turn",
    "area",
    "operator",
    "learn",
    "yet",
    "going",
    "learn",
    "lessons",
    "use",
    "going",
    "set",
    "hold",
    "bet",
    "value",
    "first",
    "create",
    "holdbet",
    "variable",
    "variable",
    "holdbet",
    "set",
    "hold",
    "however",
    "count",
    "0",
    "set",
    "holdbet",
    "equal",
    "bet",
    "work",
    "let",
    "test",
    "see",
    "made",
    "mistakes",
    "yet",
    "holtbet",
    "defined",
    "right",
    "oh",
    "spelled",
    "wrong",
    "instead",
    "holtbet",
    "holdbet",
    "okay",
    "case",
    "going",
    "bet",
    "bunch",
    "positive",
    "numbers",
    "negative",
    "numbers",
    "change",
    "k",
    "change",
    "10",
    "let",
    "see",
    "happens",
    "going",
    "hold",
    "okay",
    "worked",
    "build",
    "javascript",
    "objects",
    "objects",
    "objects",
    "similar",
    "arrays",
    "except",
    "instead",
    "using",
    "indexes",
    "access",
    "data",
    "use",
    "properties",
    "object",
    "called",
    "ourdog",
    "objects",
    "going",
    "defined",
    "curly",
    "braces",
    "beginning",
    "end",
    "properties",
    "properties",
    "everything",
    "colons",
    "name",
    "property",
    "legs",
    "property",
    "values",
    "things",
    "colons",
    "name",
    "camper",
    "legs",
    "tails",
    "one",
    "tail",
    "dog",
    "friends",
    "everything",
    "see",
    "properties",
    "strings",
    "numbers",
    "arrays",
    "datatype",
    "javascript",
    "going",
    "create",
    "dog",
    "going",
    "name",
    "personally",
    "like",
    "name",
    "quincy",
    "use",
    "dog",
    "name",
    "also",
    "going",
    "legs",
    "unfortunately",
    "dog",
    "accident",
    "3",
    "legs",
    "make",
    "three",
    "legs",
    "2",
    "tails",
    "friends",
    "another",
    "unfortunate",
    "thing",
    "empty",
    "array",
    "friends",
    "okay",
    "created",
    "object",
    "accessing",
    "object",
    "properties",
    "dot",
    "notation",
    "two",
    "main",
    "ways",
    "access",
    "property",
    "object",
    "first",
    "talk",
    "dot",
    "notation",
    "testobj",
    "hat",
    "shirt",
    "shoes",
    "want",
    "find",
    "value",
    "properties",
    "right",
    "hatvalue",
    "going",
    "set",
    "testobj",
    "use",
    "dot",
    "notation",
    "put",
    "dot",
    "period",
    "put",
    "name",
    "property",
    "shirt",
    "value",
    "see",
    "word",
    "right",
    "word",
    "value",
    "hatvalue",
    "going",
    "ballcap",
    "value",
    "shirtvalue",
    "going",
    "jersey",
    "accessing",
    "object",
    "properties",
    "bracket",
    "notation",
    "besides",
    "using",
    "dot",
    "notation",
    "also",
    "use",
    "bracket",
    "notation",
    "access",
    "property",
    "object",
    "use",
    "bracket",
    "notation",
    "anytime",
    "required",
    "name",
    "space",
    "see",
    "object",
    "three",
    "properties",
    "space",
    "get",
    "value",
    "properties",
    "going",
    "bracket",
    "notation",
    "entreevalue",
    "going",
    "testobj",
    "name",
    "object",
    "going",
    "put",
    "brackets",
    "kind",
    "like",
    "array",
    "index",
    "need",
    "opening",
    "closing",
    "brackets",
    "inside",
    "put",
    "name",
    "property",
    "entree",
    "drink",
    "value",
    "use",
    "single",
    "quote",
    "time",
    "instead",
    "double",
    "quote",
    "show",
    "work",
    "drink",
    "need",
    "closing",
    "brackets",
    "entreevalue",
    "set",
    "equal",
    "hamburger",
    "drinkvalue",
    "set",
    "equal",
    "water",
    "accessing",
    "object",
    "properties",
    "variables",
    "bracket",
    "notation",
    "also",
    "used",
    "look",
    "object",
    "properties",
    "using",
    "variables",
    "testobj",
    "different",
    "numbers",
    "associated",
    "names",
    "going",
    "set",
    "variable",
    "one",
    "numbers",
    "set",
    "testobj",
    "16",
    "montana",
    "look",
    "using",
    "variable",
    "name",
    "instead",
    "number",
    "instead",
    "putting",
    "16",
    "going",
    "put",
    "playernumber",
    "player",
    "set",
    "word",
    "string",
    "montana",
    "use",
    "variable",
    "look",
    "object",
    "property",
    "updating",
    "object",
    "properties",
    "use",
    "dot",
    "notation",
    "update",
    "object",
    "properties",
    "see",
    "object",
    "called",
    "ourdog",
    "name",
    "legs",
    "tails",
    "friends",
    "name",
    "camper",
    "however",
    "used",
    "dot",
    "notation",
    "use",
    "assignment",
    "operator",
    "equals",
    "sign",
    "set",
    "name",
    "happy",
    "camper",
    "would",
    "longer",
    "camper",
    "would",
    "happy",
    "camper",
    "well",
    "another",
    "dog",
    "name",
    "coder",
    "want",
    "change",
    "name",
    "happy",
    "coder",
    "right",
    "happy",
    "coder",
    "like",
    "use",
    "dot",
    "notation",
    "set",
    "object",
    "property",
    "new",
    "value",
    "add",
    "new",
    "properties",
    "object",
    "add",
    "new",
    "properties",
    "object",
    "using",
    "dot",
    "notation",
    "bracket",
    "notation",
    "example",
    "right",
    "object",
    "ourdog",
    "four",
    "properties",
    "adding",
    "new",
    "property",
    "four",
    "properties",
    "5",
    "properties",
    "property",
    "bark",
    "well",
    "add",
    "property",
    "mydog",
    "object",
    "mydog",
    "going",
    "use",
    "bracket",
    "notation",
    "instead",
    "dot",
    "notation",
    "bark",
    "going",
    "set",
    "equal",
    "woof",
    "yelling",
    "exclamation",
    "point",
    "add",
    "properties",
    "objects",
    "delete",
    "properties",
    "object",
    "simple",
    "delete",
    "property",
    "object",
    "ourdog",
    "object",
    "properties",
    "delete",
    "keyword",
    "delete",
    "property",
    "bark",
    "deleted",
    "longer",
    "object",
    "deleted",
    "thing",
    "time",
    "delete",
    "tails",
    "property",
    "mydog",
    "object",
    "longer",
    "tails",
    "property",
    "using",
    "objects",
    "lookups",
    "objects",
    "thought",
    "key",
    "value",
    "storage",
    "like",
    "dictionary",
    "use",
    "object",
    "lookup",
    "values",
    "case",
    "switch",
    "statement",
    "returns",
    "certain",
    "values",
    "pass",
    "alpha",
    "function",
    "returns",
    "adams",
    "pass",
    "bravo",
    "returns",
    "boston",
    "replace",
    "switch",
    "statement",
    "object",
    "use",
    "object",
    "lookups",
    "instead",
    "switch",
    "statement",
    "let",
    "show",
    "going",
    "create",
    "var",
    "lookup",
    "going",
    "object",
    "object",
    "going",
    "bunch",
    "key",
    "value",
    "pairs",
    "alpha",
    "going",
    "adams",
    "bravo",
    "value",
    "bravo",
    "going",
    "boston",
    "delete",
    "whole",
    "switch",
    "statement",
    "say",
    "result",
    "lookup",
    "bracket",
    "notation",
    "put",
    "value",
    "passed",
    "forgot",
    "one",
    "thing",
    "equals",
    "sign",
    "lookup",
    "equals",
    "object",
    "let",
    "test",
    "let",
    "put",
    "actually",
    "see",
    "happens",
    "charlie",
    "going",
    "get",
    "chicago",
    "foxtrot",
    "result",
    "frank",
    "works",
    "testing",
    "objects",
    "properties",
    "check",
    "object",
    "property",
    "hasown",
    "property",
    "method",
    "let",
    "show",
    "use",
    "method",
    "finish",
    "making",
    "function",
    "check",
    "object",
    "specific",
    "property",
    "property",
    "return",
    "found",
    "let",
    "show",
    "going",
    "work",
    "myobj",
    "object",
    "pass",
    "property",
    "going",
    "check",
    "checkprop",
    "either",
    "going",
    "come",
    "back",
    "true",
    "false",
    "property",
    "let",
    "make",
    "statement",
    "checkprop",
    "true",
    "going",
    "return",
    "myobj",
    "use",
    "bracket",
    "notation",
    "checkprop",
    "going",
    "return",
    "value",
    "property",
    "else",
    "going",
    "return",
    "found",
    "let",
    "take",
    "return",
    "statement",
    "test",
    "pass",
    "gift",
    "returned",
    "pony",
    "let",
    "say",
    "pass",
    "load",
    "found",
    "okay",
    "works",
    "manipulating",
    "complex",
    "objects",
    "javascript",
    "object",
    "way",
    "store",
    "flexible",
    "data",
    "store",
    "strings",
    "numbers",
    "arrays",
    "even",
    "objects",
    "example",
    "array",
    "called",
    "mymusic",
    "see",
    "array",
    "open",
    "bracket",
    "closed",
    "bracket",
    "inside",
    "array",
    "objects",
    "one",
    "objects",
    "inside",
    "objects",
    "key",
    "value",
    "pairs",
    "strings",
    "numbers",
    "going",
    "add",
    "another",
    "object",
    "since",
    "array",
    "element",
    "array",
    "comma",
    "going",
    "add",
    "comma",
    "going",
    "add",
    "next",
    "record",
    "right",
    "comment",
    "going",
    "like",
    "going",
    "artist",
    "artist",
    "going",
    "beau",
    "carnes",
    "title",
    "title",
    "cereal",
    "man",
    "2003",
    "formats",
    "going",
    "array",
    "like",
    "format",
    "going",
    "put",
    "youtube",
    "video",
    "created",
    "second",
    "object",
    "mymusic",
    "array",
    "object",
    "holds",
    "data",
    "property",
    "key",
    "value",
    "format",
    "similar",
    "json",
    "talk",
    "later",
    "accessing",
    "nested",
    "objects",
    "object",
    "objects",
    "nested",
    "inside",
    "order",
    "access",
    "object",
    "chain",
    "together",
    "dot",
    "bracket",
    "notation",
    "trying",
    "get",
    "gloveboxcontents",
    "going",
    "take",
    "away",
    "undefined",
    "next",
    "thing",
    "car",
    "inside",
    "last",
    "thing",
    "glove",
    "box",
    "space",
    "use",
    "bracket",
    "notation",
    "going",
    "use",
    "bracket",
    "notation",
    "end",
    "say",
    "glove",
    "box",
    "run",
    "see",
    "going",
    "let",
    "see",
    "get",
    "contents",
    "yeah",
    "maps",
    "worked",
    "accessing",
    "nested",
    "arrays",
    "array",
    "bracket",
    "notation",
    "changed",
    "access",
    "nested",
    "arrays",
    "see",
    "array",
    "inside",
    "array",
    "two",
    "objects",
    "first",
    "element",
    "array",
    "object",
    "second",
    "element",
    "array",
    "object",
    "inside",
    "object",
    "key",
    "value",
    "pair",
    "key",
    "list",
    "value",
    "another",
    "array",
    "combine",
    "dot",
    "notation",
    "bracket",
    "notation",
    "access",
    "second",
    "tree",
    "trying",
    "let",
    "first",
    "need",
    "myplants",
    "trees",
    "second",
    "element",
    "myplants",
    "array",
    "index",
    "1",
    "need",
    "get",
    "list",
    "list",
    "trees",
    "going",
    "since",
    "array",
    "use",
    "bracket",
    "notation",
    "get",
    "second",
    "list",
    "element",
    "array",
    "index",
    "1",
    "run",
    "going",
    "see",
    "pine",
    "second",
    "tree",
    "record",
    "collection",
    "coding",
    "challenge",
    "going",
    "given",
    "object",
    "record",
    "collection",
    "record",
    "id",
    "also",
    "different",
    "pieces",
    "information",
    "record",
    "information",
    "see",
    "album",
    "artist",
    "tracks",
    "album",
    "artist",
    "tracks",
    "say",
    "artist",
    "tracks",
    "album",
    "supposed",
    "create",
    "updaterecords",
    "function",
    "pass",
    "id",
    "property",
    "value",
    "going",
    "update",
    "record",
    "collection",
    "property",
    "value",
    "instance",
    "pass",
    "id",
    "2468",
    "put",
    "property",
    "artist",
    "set",
    "different",
    "value",
    "like",
    "quincy",
    "something",
    "like",
    "update",
    "whole",
    "object",
    "says",
    "quincy",
    "instead",
    "prince",
    "return",
    "full",
    "collection",
    "going",
    "update",
    "collection",
    "return",
    "collection",
    "empty",
    "string",
    "value",
    "completely",
    "delete",
    "property",
    "also",
    "property",
    "tracks",
    "value",
    "instead",
    "updating",
    "whole",
    "tracks",
    "put",
    "going",
    "add",
    "track",
    "end",
    "array",
    "look",
    "really",
    "comment",
    "says",
    "keep",
    "copy",
    "collection",
    "tests",
    "collection",
    "fancy",
    "way",
    "javascript",
    "make",
    "copy",
    "object",
    "remember",
    "function",
    "going",
    "changing",
    "collection",
    "object",
    "want",
    "copy",
    "original",
    "object",
    "anything",
    "changed",
    "let",
    "go",
    "ahead",
    "updating",
    "function",
    "update",
    "records",
    "function",
    "okay",
    "let",
    "get",
    "value",
    "blank",
    "first",
    "condition",
    "going",
    "test",
    "need",
    "delete",
    "property",
    "remember",
    "value",
    "set",
    "blank",
    "delete",
    "property",
    "value",
    "blank",
    "going",
    "delete",
    "collection",
    "use",
    "bracket",
    "notation",
    "id",
    "prop",
    "collection",
    "id",
    "prop",
    "collection",
    "pass",
    "id",
    "1248",
    "go",
    "property",
    "pass",
    "album",
    "property",
    "would",
    "go",
    "would",
    "delete",
    "whole",
    "thing",
    "value",
    "empty",
    "string",
    "okay",
    "next",
    "condition",
    "look",
    "property",
    "tracks",
    "properties",
    "going",
    "override",
    "property",
    "value",
    "passed",
    "function",
    "property",
    "tracks",
    "going",
    "push",
    "onto",
    "end",
    "array",
    "let",
    "else",
    "else",
    "prop",
    "tracks",
    "push",
    "onto",
    "end",
    "array",
    "also",
    "another",
    "condition",
    "tracks",
    "property",
    "empty",
    "tracks",
    "property",
    "empty",
    "need",
    "create",
    "fancy",
    "way",
    "collection",
    "id",
    "prop",
    "prop",
    "tracks",
    "going",
    "set",
    "tracks",
    "remember",
    "prop",
    "going",
    "equal",
    "tracks",
    "going",
    "set",
    "tracks",
    "equal",
    "going",
    "either",
    "equal",
    "exists",
    "exist",
    "going",
    "create",
    "show",
    "collection",
    "id",
    "prop",
    "going",
    "equal",
    "operator",
    "going",
    "equal",
    "empty",
    "array",
    "already",
    "exists",
    "going",
    "set",
    "equal",
    "exist",
    "set",
    "equal",
    "empty",
    "array",
    "way",
    "create",
    "property",
    "already",
    "exist",
    "know",
    "exists",
    "push",
    "value",
    "end",
    "array",
    "collection",
    "id",
    "prop",
    "put",
    "parenthesis",
    "value",
    "able",
    "push",
    "value",
    "passed",
    "function",
    "onto",
    "end",
    "array",
    "okay",
    "one",
    "last",
    "condition",
    "kind",
    "default",
    "condition",
    "else",
    "value",
    "blank",
    "property",
    "tracks",
    "push",
    "value",
    "onto",
    "property",
    "set",
    "property",
    "equal",
    "value",
    "like",
    "collection",
    "id",
    "prop",
    "okay",
    "let",
    "test",
    "already",
    "example",
    "see",
    "actually",
    "worked",
    "going",
    "see",
    "output",
    "run",
    "oh",
    "let",
    "open",
    "console",
    "really",
    "see",
    "let",
    "see",
    "changed",
    "go",
    "5439",
    "set",
    "artist",
    "previously",
    "exist",
    "abba",
    "let",
    "look",
    "console",
    "5439",
    "artist",
    "abba",
    "let",
    "see",
    "happens",
    "add",
    "track",
    "one",
    "example",
    "put",
    "right",
    "updaterecords",
    "going",
    "pass",
    "something",
    "pass",
    "let",
    "see",
    "id",
    "pass",
    "key",
    "going",
    "tracks",
    "value",
    "put",
    "test",
    "let",
    "see",
    "happens",
    "run",
    "going",
    "update",
    "record",
    "going",
    "update",
    "record",
    "care",
    "mainly",
    "care",
    "going",
    "final",
    "value",
    "look",
    "2468",
    "2468",
    "let",
    "see",
    "tracks",
    "got",
    "1999",
    "little",
    "red",
    "corvette",
    "test",
    "working",
    "great",
    "iterate",
    "loops",
    "loops",
    "allow",
    "run",
    "code",
    "multiple",
    "times",
    "going",
    "talk",
    "loop",
    "runs",
    "specified",
    "condition",
    "true",
    "stops",
    "longer",
    "true",
    "going",
    "push",
    "digit",
    "0",
    "4",
    "onto",
    "array",
    "going",
    "work",
    "loop",
    "less",
    "going",
    "something",
    "true",
    "first",
    "set",
    "starts",
    "var",
    "less",
    "5",
    "push",
    "onto",
    "array",
    "make",
    "sure",
    "loop",
    "eventually",
    "ends",
    "increments",
    "test",
    "going",
    "myarray",
    "let",
    "see",
    "works",
    "run",
    "check",
    "console",
    "0",
    "1",
    "2",
    "3",
    "4",
    "loop",
    "worked",
    "every",
    "time",
    "went",
    "five",
    "different",
    "times",
    "pushed",
    "0",
    "1",
    "2",
    "3",
    "4",
    "onto",
    "loop",
    "iterate",
    "loops",
    "loop",
    "common",
    "type",
    "loop",
    "javascript",
    "example",
    "loop",
    "start",
    "keyword",
    "parentheses",
    "three",
    "different",
    "items",
    "separated",
    "semicolons",
    "first",
    "thing",
    "initialization",
    "condition",
    "final",
    "expression",
    "initialization",
    "happens",
    "code",
    "inside",
    "loop",
    "runs",
    "start",
    "initializing",
    "equal",
    "loops",
    "start",
    "variable",
    "going",
    "initialize",
    "loop",
    "next",
    "thing",
    "condition",
    "evaluates",
    "false",
    "break",
    "loop",
    "less",
    "5",
    "continue",
    "run",
    "loop",
    "false",
    "break",
    "loop",
    "final",
    "thing",
    "end",
    "iteration",
    "end",
    "iteration",
    "increment",
    "example",
    "filling",
    "array",
    "numbers",
    "0",
    "going",
    "another",
    "example",
    "fill",
    "array",
    "numbers",
    "1",
    "start",
    "going",
    "initialize",
    "equal",
    "starting",
    "1",
    "instead",
    "0",
    "time",
    "going",
    "less",
    "less",
    "6",
    "6",
    "going",
    "run",
    "code",
    "loop",
    "end",
    "iteration",
    "going",
    "increment",
    "final",
    "thing",
    "test",
    "put",
    "myarray",
    "inside",
    "load",
    "see",
    "see",
    "console",
    "1",
    "2",
    "3",
    "4",
    "5",
    "worked",
    "iterated",
    "five",
    "different",
    "times",
    "time",
    "pushed",
    "new",
    "digit",
    "onto",
    "array",
    "end",
    "iteration",
    "incremented",
    "pushed",
    "larger",
    "number",
    "onto",
    "array",
    "iterate",
    "odd",
    "numbers",
    "loop",
    "loops",
    "increment",
    "one",
    "time",
    "look",
    "loop",
    "initialization",
    "initialize",
    "going",
    "run",
    "loop",
    "less",
    "finally",
    "increment",
    "instead",
    "incrementing",
    "1",
    "incrementing",
    "going",
    "push",
    "even",
    "numbers",
    "onto",
    "array",
    "let",
    "log",
    "see",
    "looks",
    "like",
    "0",
    "2",
    "4",
    "6",
    "8",
    "going",
    "write",
    "another",
    "loop",
    "right",
    "creates",
    "array",
    "odd",
    "numbers",
    "let",
    "var",
    "start",
    "less",
    "use",
    "10",
    "going",
    "still",
    "going",
    "count",
    "2s",
    "since",
    "starting",
    "1",
    "instead",
    "0",
    "give",
    "us",
    "odd",
    "numbers",
    "let",
    "see",
    "going",
    "inside",
    "loop",
    "put",
    "let",
    "log",
    "see",
    "right",
    "myarray",
    "run",
    "1",
    "3",
    "5",
    "7",
    "9",
    "worked",
    "count",
    "backwards",
    "loop",
    "loop",
    "also",
    "used",
    "count",
    "backwards",
    "see",
    "loop",
    "initializing",
    "starting",
    "10",
    "going",
    "back",
    "going",
    "iterate",
    "loop",
    "going",
    "keep",
    "iterating",
    "end",
    "iteration",
    "going",
    "decrement",
    "instead",
    "increment",
    "going",
    "go",
    "2",
    "means",
    "going",
    "continue",
    "pushing",
    "lower",
    "lower",
    "numbers",
    "onto",
    "array",
    "less",
    "let",
    "log",
    "see",
    "ourarray",
    "becomes",
    "see",
    "10",
    "8",
    "6",
    "4",
    "2",
    "well",
    "going",
    "write",
    "another",
    "going",
    "push",
    "odd",
    "numbers",
    "9",
    "1",
    "myarray",
    "another",
    "loop",
    "going",
    "var",
    "9",
    "want",
    "start",
    "still",
    "0",
    "going",
    "keep",
    "going",
    "array",
    "everything",
    "else",
    "really",
    "going",
    "get",
    "odd",
    "numbers",
    "onto",
    "array",
    "push",
    "see",
    "ended",
    "myarray",
    "run",
    "code",
    "9",
    "7",
    "5",
    "3",
    "1",
    "iterate",
    "array",
    "loop",
    "common",
    "javascript",
    "iterate",
    "contents",
    "array",
    "look",
    "example",
    "array",
    "always",
    "adding",
    "items",
    "array",
    "time",
    "array",
    "already",
    "exists",
    "right",
    "ourarr",
    "9",
    "10",
    "11",
    "12",
    "going",
    "start",
    "instead",
    "going",
    "specific",
    "number",
    "iterations",
    "going",
    "length",
    "4",
    "added",
    "elements",
    "array",
    "means",
    "loop",
    "would",
    "go",
    "even",
    "longer",
    "went",
    "every",
    "element",
    "array",
    "end",
    "going",
    "increment",
    "one",
    "end",
    "iteration",
    "look",
    "inside",
    "array",
    "going",
    "ourtotal",
    "starts",
    "0",
    "means",
    "going",
    "ourtotal",
    "ourtotal",
    "plus",
    "something",
    "else",
    "going",
    "keep",
    "adding",
    "total",
    "whatever",
    "array",
    "index",
    "ourarr",
    "starts",
    "goes",
    "1",
    "2",
    "3",
    "gets",
    "4",
    "length",
    "array",
    "even",
    "run",
    "iteration",
    "index",
    "4",
    "array",
    "remember",
    "0",
    "1",
    "2",
    "going",
    "add",
    "numbers",
    "run",
    "see",
    "adds",
    "going",
    "write",
    "another",
    "loop",
    "going",
    "add",
    "numbers",
    "array",
    "var",
    "0",
    "less",
    "like",
    "element",
    "myarr",
    "going",
    "total",
    "myarr",
    "index",
    "initialize",
    "total",
    "variable",
    "right",
    "var",
    "total",
    "end",
    "see",
    "total",
    "run",
    "see",
    "total",
    "time",
    "20",
    "nesting",
    "loops",
    "multidimensional",
    "nested",
    "array",
    "use",
    "nested",
    "loops",
    "access",
    "array",
    "elements",
    "instance",
    "multiple",
    "function",
    "defined",
    "calling",
    "passing",
    "multidimensional",
    "array",
    "basically",
    "array",
    "arrays",
    "inside",
    "array",
    "inside",
    "first",
    "array",
    "three",
    "elements",
    "one",
    "two",
    "three",
    "see",
    "elements",
    "array",
    "set",
    "elements",
    "going",
    "use",
    "nested",
    "loops",
    "within",
    "multiply",
    "function",
    "multiply",
    "every",
    "number",
    "nested",
    "arrays",
    "let",
    "get",
    "started",
    "going",
    "start",
    "loop",
    "going",
    "look",
    "like",
    "loops",
    "started",
    "going",
    "initialize",
    "going",
    "say",
    "less",
    "going",
    "increment",
    "end",
    "iteration",
    "going",
    "start",
    "3",
    "passing",
    "array",
    "first",
    "level",
    "array",
    "one",
    "two",
    "three",
    "elements",
    "going",
    "going",
    "go",
    "inside",
    "loop",
    "create",
    "another",
    "loop",
    "going",
    "var",
    "j",
    "normally",
    "standard",
    "practice",
    "call",
    "variable",
    "incrementing",
    "already",
    "within",
    "scope",
    "need",
    "create",
    "another",
    "name",
    "pretty",
    "standard",
    "call",
    "next",
    "variable",
    "j",
    "j",
    "going",
    "j",
    "less",
    "gets",
    "little",
    "tricky",
    "going",
    "less",
    "arr",
    "index",
    "also",
    "going",
    "increment",
    "j",
    "going",
    "change",
    "first",
    "iteration",
    "outer",
    "loop",
    "looking",
    "length",
    "array",
    "looking",
    "length",
    "array",
    "looking",
    "length",
    "array",
    "index",
    "going",
    "different",
    "every",
    "time",
    "going",
    "going",
    "different",
    "array",
    "inside",
    "nested",
    "array",
    "point",
    "multiply",
    "numbers",
    "together",
    "already",
    "product",
    "defined",
    "going",
    "product",
    "going",
    "multiply",
    "everything",
    "together",
    "going",
    "arr",
    "j",
    "references",
    "outer",
    "array",
    "j",
    "references",
    "inner",
    "array",
    "within",
    "passing",
    "done",
    "let",
    "let",
    "run",
    "see",
    "happens",
    "5040",
    "iterate",
    "loops",
    "next",
    "going",
    "talk",
    "loops",
    "already",
    "talked",
    "loops",
    "going",
    "review",
    "loop",
    "tell",
    "loop",
    "different",
    "loop",
    "loop",
    "first",
    "checks",
    "condition",
    "runs",
    "code",
    "within",
    "loop",
    "loop",
    "always",
    "run",
    "least",
    "one",
    "time",
    "check",
    "condition",
    "empty",
    "array",
    "less",
    "5",
    "well",
    "less",
    "5",
    "going",
    "anything",
    "let",
    "see",
    "happens",
    "see",
    "logged",
    "10",
    "empty",
    "array",
    "started",
    "10",
    "myarray",
    "started",
    "empty",
    "array",
    "logging",
    "myarray",
    "loop",
    "different",
    "going",
    "cut",
    "line",
    "put",
    "end",
    "beginning",
    "going",
    "put",
    "keyword",
    "loop",
    "always",
    "run",
    "least",
    "checks",
    "condition",
    "first",
    "going",
    "things",
    "going",
    "check",
    "condition",
    "case",
    "going",
    "find",
    "condition",
    "false",
    "going",
    "break",
    "loop",
    "let",
    "see",
    "happens",
    "see",
    "11",
    "array",
    "10",
    "added",
    "profile",
    "lookup",
    "coding",
    "challenge",
    "array",
    "objects",
    "contacts",
    "list",
    "see",
    "object",
    "one",
    "contacts",
    "first",
    "name",
    "last",
    "name",
    "number",
    "likes",
    "key",
    "value",
    "pairs",
    "want",
    "create",
    "lookupprofile",
    "function",
    "pass",
    "name",
    "first",
    "name",
    "property",
    "going",
    "return",
    "value",
    "property",
    "instance",
    "pass",
    "name",
    "kristian",
    "pass",
    "property",
    "number",
    "return",
    "unknown",
    "pass",
    "first",
    "name",
    "sherlock",
    "return",
    "property",
    "pass",
    "property",
    "likes",
    "return",
    "array",
    "intriguing",
    "cases",
    "violin",
    "name",
    "passed",
    "correspond",
    "contacts",
    "function",
    "return",
    "contact",
    "property",
    "return",
    "property",
    "let",
    "go",
    "function",
    "start",
    "creating",
    "first",
    "thing",
    "going",
    "iterate",
    "element",
    "contacts",
    "list",
    "let",
    "make",
    "loop",
    "var",
    "0",
    "less",
    "end",
    "iteration",
    "increment",
    "contacts",
    "first",
    "thing",
    "going",
    "check",
    "name",
    "name",
    "list",
    "contacts",
    "name",
    "passed",
    "checking",
    "item",
    "see",
    "name",
    "passed",
    "going",
    "something",
    "going",
    "something",
    "else",
    "let",
    "remember",
    "name",
    "passed",
    "array",
    "going",
    "return",
    "contact",
    "array",
    "going",
    "go",
    "something",
    "else",
    "name",
    "contacts",
    "list",
    "going",
    "return",
    "value",
    "property",
    "passed",
    "return",
    "contacts",
    "prop",
    "return",
    "value",
    "property",
    "passed",
    "however",
    "another",
    "case",
    "property",
    "exist",
    "return",
    "property",
    "fancy",
    "way",
    "javascript",
    "saying",
    "use",
    "value",
    "exists",
    "otherwise",
    "use",
    "different",
    "value",
    "use",
    "operator",
    "say",
    "return",
    "contacts",
    "prop",
    "exist",
    "going",
    "return",
    "property",
    "know",
    "would",
    "way",
    "without",
    "using",
    "operator",
    "long",
    "code",
    "passes",
    "requirements",
    "important",
    "many",
    "ways",
    "let",
    "check",
    "right",
    "lookupprofile",
    "passing",
    "akira",
    "trying",
    "find",
    "likes",
    "data",
    "pizza",
    "coding",
    "brownie",
    "points",
    "passed",
    "something",
    "else",
    "passed",
    "shirlock",
    "pass",
    "lastname",
    "well",
    "working",
    "spelled",
    "sherlock",
    "wrong",
    "good",
    "way",
    "test",
    "holmes",
    "last",
    "thing",
    "check",
    "pass",
    "property",
    "exist",
    "say",
    "hello",
    "property",
    "function",
    "works",
    "generate",
    "random",
    "fractions",
    "simple",
    "way",
    "create",
    "random",
    "decimal",
    "number",
    "javascript",
    "function",
    "function",
    "says",
    "randomfraction",
    "returning",
    "0",
    "currently",
    "going",
    "use",
    "function",
    "well",
    "see",
    "run",
    "always",
    "going",
    "number",
    "0",
    "could",
    "0",
    "1",
    "could",
    "1",
    "generate",
    "random",
    "whole",
    "numbers",
    "often",
    "want",
    "random",
    "whole",
    "number",
    "instead",
    "random",
    "decimal",
    "number",
    "accomplished",
    "rounds",
    "nearest",
    "whole",
    "number",
    "pass",
    "20",
    "round",
    "nearest",
    "whole",
    "number",
    "going",
    "create",
    "random",
    "whole",
    "number",
    "0",
    "remember",
    "never",
    "0",
    "ever",
    "quite",
    "multiply",
    "20",
    "going",
    "get",
    "number",
    "0",
    "20",
    "including",
    "round",
    "end",
    "0",
    "let",
    "show",
    "another",
    "example",
    "going",
    "get",
    "random",
    "whole",
    "number",
    "0",
    "going",
    "look",
    "like",
    "going",
    "modify",
    "function",
    "going",
    "pass",
    "put",
    "parenthesis",
    "passing",
    "function",
    "going",
    "give",
    "us",
    "random",
    "number",
    "0",
    "reload",
    "see",
    "every",
    "time",
    "load",
    "different",
    "random",
    "number",
    "generate",
    "random",
    "whole",
    "numbers",
    "within",
    "range",
    "also",
    "generate",
    "random",
    "whole",
    "numbers",
    "within",
    "range",
    "look",
    "function",
    "ourrandomrange",
    "takes",
    "minimum",
    "number",
    "maximum",
    "number",
    "runs",
    "calculation",
    "multiply",
    "maximum",
    "min",
    "number",
    "get",
    "floor",
    "rounding",
    "add",
    "minimum",
    "number",
    "calculation",
    "get",
    "random",
    "number",
    "min",
    "max",
    "practiced",
    "going",
    "rewrite",
    "random",
    "range",
    "instead",
    "ourmin",
    "ourmax",
    "mymin",
    "mymax",
    "however",
    "equation",
    "going",
    "take",
    "chance",
    "actually",
    "look",
    "equation",
    "see",
    "understand",
    "works",
    "mymax",
    "minus",
    "mymin",
    "whole",
    "thing",
    "going",
    "mymin",
    "already",
    "example",
    "test",
    "set",
    "randomrange",
    "5",
    "15",
    "going",
    "log",
    "let",
    "try",
    "see",
    "every",
    "number",
    "5",
    "15",
    "whenever",
    "run",
    "use",
    "parseint",
    "function",
    "another",
    "useful",
    "function",
    "parseint",
    "function",
    "takes",
    "string",
    "returns",
    "integer",
    "lot",
    "times",
    "want",
    "make",
    "sure",
    "dealing",
    "integers",
    "strings",
    "different",
    "calculations",
    "things",
    "like",
    "string",
    "converted",
    "integer",
    "returns",
    "nan",
    "number",
    "let",
    "show",
    "works",
    "converttointeger",
    "function",
    "going",
    "return",
    "going",
    "return",
    "string",
    "except",
    "going",
    "convert",
    "integer",
    "first",
    "parseint",
    "pass",
    "string",
    "string",
    "see",
    "passing",
    "string",
    "56",
    "going",
    "return",
    "number",
    "integer",
    "use",
    "parseint",
    "function",
    "radix",
    "parseint",
    "function",
    "also",
    "used",
    "radix",
    "radix",
    "specifies",
    "base",
    "number",
    "string",
    "base",
    "2",
    "base",
    "7",
    "base",
    "base",
    "2",
    "would",
    "binary",
    "one",
    "common",
    "ones",
    "use",
    "default",
    "base",
    "use",
    "normally",
    "every",
    "day",
    "let",
    "show",
    "would",
    "work",
    "going",
    "convert",
    "number",
    "binary",
    "number",
    "integer",
    "return",
    "parseint",
    "pass",
    "string",
    "second",
    "argument",
    "comma",
    "going",
    "number",
    "instead",
    "default",
    "base",
    "10",
    "passing",
    "base",
    "computer",
    "knows",
    "binary",
    "number",
    "use",
    "conditional",
    "ternary",
    "operator",
    "love",
    "ternary",
    "operator",
    "like",
    "one",
    "line",
    "else",
    "expression",
    "looks",
    "like",
    "condition",
    "like",
    "statement",
    "would",
    "question",
    "mark",
    "question",
    "mark",
    "going",
    "happen",
    "condition",
    "true",
    "colon",
    "going",
    "happen",
    "condition",
    "false",
    "replace",
    "else",
    "statement",
    "like",
    "something",
    "using",
    "ternary",
    "operator",
    "condition",
    "true",
    "going",
    "return",
    "true",
    "else",
    "going",
    "return",
    "false",
    "let",
    "change",
    "going",
    "use",
    "ternary",
    "operator",
    "going",
    "say",
    "return",
    "condition",
    "use",
    "question",
    "mark",
    "true",
    "going",
    "return",
    "true",
    "colon",
    "colon",
    "going",
    "happen",
    "false",
    "going",
    "return",
    "false",
    "going",
    "honest",
    "would",
    "never",
    "write",
    "line",
    "like",
    "real",
    "life",
    "could",
    "write",
    "return",
    "line",
    "actually",
    "going",
    "thing",
    "line",
    "however",
    "want",
    "give",
    "simple",
    "example",
    "using",
    "ternary",
    "operator",
    "use",
    "multiple",
    "conditional",
    "ternary",
    "operators",
    "one",
    "great",
    "things",
    "conditional",
    "ternary",
    "operators",
    "nest",
    "within",
    "gives",
    "even",
    "power",
    "going",
    "write",
    "function",
    "function",
    "checksign",
    "going",
    "return",
    "string",
    "positive",
    "number",
    "positive",
    "negative",
    "number",
    "negative",
    "going",
    "use",
    "nested",
    "conditional",
    "operator",
    "return",
    "first",
    "going",
    "check",
    "num",
    "use",
    "ternary",
    "operator",
    "first",
    "thing",
    "question",
    "mark",
    "true",
    "true",
    "going",
    "return",
    "positive",
    "false",
    "number",
    "0",
    "something",
    "else",
    "going",
    "another",
    "ternary",
    "operator",
    "going",
    "check",
    "num",
    "less",
    "number",
    "less",
    "0",
    "well",
    "true",
    "question",
    "mark",
    "ternary",
    "operator",
    "true",
    "going",
    "return",
    "negative",
    "false",
    "colon",
    "comes",
    "going",
    "return",
    "zero",
    "let",
    "checksign",
    "going",
    "see",
    "returns",
    "see",
    "going",
    "return",
    "positive",
    "negative",
    "number",
    "going",
    "return",
    "negative",
    "0",
    "going",
    "return",
    "zero",
    "see",
    "colon",
    "entire",
    "ternary",
    "operator",
    "true",
    "return",
    "positive",
    "false",
    "everything",
    "another",
    "ternary",
    "operator",
    "checks",
    "true",
    "true",
    "return",
    "negative",
    "false",
    "would",
    "return",
    "zero",
    "differences",
    "var",
    "let",
    "keywords",
    "long",
    "time",
    "javascript",
    "going",
    "declare",
    "variable",
    "use",
    "var",
    "keyword",
    "starting",
    "es6",
    "2015",
    "declare",
    "variables",
    "let",
    "const",
    "well",
    "next",
    "lessons",
    "talking",
    "let",
    "const",
    "different",
    "var",
    "one",
    "things",
    "let",
    "let",
    "declare",
    "variable",
    "twice",
    "let",
    "look",
    "example",
    "var",
    "catname",
    "quincy",
    "var",
    "catname",
    "beau",
    "run",
    "code",
    "see",
    "nothing",
    "happening",
    "allowing",
    "us",
    "set",
    "catname",
    "twice",
    "declare",
    "twice",
    "var",
    "keyword",
    "however",
    "change",
    "let",
    "going",
    "change",
    "var",
    "let",
    "see",
    "load",
    "see",
    "error",
    "duplicate",
    "declaration",
    "catname",
    "good",
    "creating",
    "error",
    "usually",
    "want",
    "declare",
    "variable",
    "two",
    "times",
    "scope",
    "allows",
    "program",
    "give",
    "error",
    "tell",
    "done",
    "something",
    "wrong",
    "still",
    "reset",
    "use",
    "word",
    "let",
    "could",
    "set",
    "catname",
    "variable",
    "going",
    "get",
    "error",
    "case",
    "declaring",
    "variable",
    "quincy",
    "setting",
    "variable",
    "new",
    "name",
    "one",
    "reasons",
    "many",
    "people",
    "use",
    "let",
    "const",
    "never",
    "use",
    "var",
    "declare",
    "variables",
    "another",
    "thing",
    "code",
    "see",
    "use",
    "strict",
    "enables",
    "strict",
    "mode",
    "catches",
    "common",
    "coding",
    "mistakes",
    "unsafe",
    "actions",
    "lot",
    "people",
    "use",
    "use",
    "strict",
    "top",
    "full",
    "javascript",
    "file",
    "maybe",
    "function",
    "catch",
    "coding",
    "mistakes",
    "create",
    "variable",
    "declare",
    "var",
    "let",
    "const",
    "compare",
    "scopes",
    "var",
    "let",
    "keywords",
    "another",
    "major",
    "difference",
    "var",
    "let",
    "keywords",
    "declare",
    "variable",
    "var",
    "declared",
    "globally",
    "locally",
    "declared",
    "inside",
    "function",
    "however",
    "let",
    "scope",
    "let",
    "limited",
    "block",
    "statement",
    "expression",
    "declared",
    "let",
    "look",
    "example",
    "see",
    "code",
    "checkscope",
    "function",
    "calling",
    "setting",
    "var",
    "var",
    "keyword",
    "function",
    "scope",
    "setting",
    "block",
    "scope",
    "see",
    "block",
    "scope",
    "says",
    "block",
    "scope",
    "get",
    "function",
    "scope",
    "still",
    "block",
    "scope",
    "want",
    "function",
    "scope",
    "going",
    "use",
    "let",
    "would",
    "use",
    "let",
    "would",
    "use",
    "let",
    "run",
    "code",
    "see",
    "console",
    "block",
    "scope",
    "block",
    "scope",
    "function",
    "scope",
    "function",
    "scope",
    "even",
    "though",
    "set",
    "block",
    "scope",
    "inside",
    "block",
    "block",
    "anything",
    "inside",
    "squiggly",
    "braces",
    "inside",
    "block",
    "block",
    "scope",
    "get",
    "back",
    "function",
    "scope",
    "another",
    "thing",
    "want",
    "show",
    "comment",
    "line",
    "change",
    "var",
    "think",
    "going",
    "happen",
    "well",
    "let",
    "run",
    "find",
    "look",
    "set",
    "var",
    "inside",
    "block",
    "block",
    "scope",
    "says",
    "block",
    "scope",
    "block",
    "scope",
    "outside",
    "block",
    "outside",
    "squiggly",
    "braces",
    "still",
    "access",
    "set",
    "block",
    "scope",
    "let",
    "declaring",
    "inside",
    "block",
    "run",
    "get",
    "outside",
    "block",
    "get",
    "error",
    "defined",
    "another",
    "reason",
    "people",
    "use",
    "let",
    "instead",
    "var",
    "make",
    "sure",
    "variable",
    "defined",
    "area",
    "want",
    "defined",
    "uncomment",
    "declare",
    "variable",
    "const",
    "keyword",
    "const",
    "another",
    "way",
    "declare",
    "variable",
    "features",
    "let",
    "also",
    "reassign",
    "const",
    "let",
    "look",
    "program",
    "running",
    "printmanytimes",
    "going",
    "log",
    "sentence",
    "sentence",
    "var",
    "sentence",
    "declared",
    "reassign",
    "first",
    "declare",
    "sentence",
    "string",
    "cool",
    "reassigned",
    "string",
    "amazing",
    "run",
    "work",
    "prints",
    "freecodecamp",
    "amazing",
    "many",
    "times",
    "change",
    "const",
    "let",
    "see",
    "happens",
    "run",
    "get",
    "error",
    "sentence",
    "declare",
    "variable",
    "const",
    "keyword",
    "reassign",
    "afterwards",
    "helpful",
    "prevent",
    "accidentally",
    "making",
    "mistakes",
    "later",
    "know",
    "sure",
    "never",
    "want",
    "reassign",
    "variable",
    "always",
    "use",
    "const",
    "accidentally",
    "reassign",
    "mean",
    "another",
    "thing",
    "using",
    "const",
    "common",
    "use",
    "capital",
    "letters",
    "like",
    "sentence",
    "like",
    "another",
    "away",
    "remember",
    "constant",
    "rename",
    "also",
    "going",
    "repeat",
    "going",
    "change",
    "let",
    "part",
    "use",
    "const",
    "let",
    "certain",
    "circumstances",
    "would",
    "use",
    "var",
    "also",
    "videos",
    "course",
    "using",
    "var",
    "code",
    "mainly",
    "use",
    "const",
    "let",
    "let",
    "reload",
    "see",
    "happens",
    "worked",
    "freecodecamp",
    "cool",
    "many",
    "times",
    "longer",
    "say",
    "freecodecamp",
    "awesome",
    "even",
    "though",
    "know",
    "actually",
    "mutate",
    "array",
    "declared",
    "const",
    "reassign",
    "variable",
    "declare",
    "const",
    "mutate",
    "array",
    "look",
    "example",
    "going",
    "work",
    "first",
    "declare",
    "variable",
    "assign",
    "array",
    "declare",
    "const",
    "going",
    "reassign",
    "variable",
    "going",
    "get",
    "error",
    "however",
    "update",
    "array",
    "using",
    "bracket",
    "notation",
    "comment",
    "using",
    "bracket",
    "notation",
    "index",
    "0",
    "assign",
    "index",
    "1",
    "assign",
    "index",
    "2",
    "assign",
    "like",
    "going",
    "reassign",
    "array",
    "put",
    "array",
    "see",
    "new",
    "array",
    "2",
    "5",
    "7",
    "prevent",
    "object",
    "mutation",
    "seen",
    "previously",
    "const",
    "declaration",
    "alone",
    "really",
    "protect",
    "data",
    "mutation",
    "object",
    "array",
    "still",
    "mutate",
    "even",
    "declared",
    "const",
    "something",
    "called",
    "prevent",
    "data",
    "mutation",
    "let",
    "talk",
    "first",
    "let",
    "understand",
    "function",
    "using",
    "function",
    "demonstrate",
    "going",
    "create",
    "constant",
    "math",
    "constant",
    "pi",
    "object",
    "right",
    "still",
    "changed",
    "look",
    "try",
    "catch",
    "block",
    "talk",
    "try",
    "catch",
    "blocks",
    "detail",
    "later",
    "know",
    "going",
    "try",
    "first",
    "part",
    "block",
    "error",
    "going",
    "go",
    "catch",
    "part",
    "going",
    "log",
    "right",
    "going",
    "try",
    "change",
    "see",
    "right",
    "going",
    "return",
    "putting",
    "variable",
    "called",
    "pi",
    "run",
    "see",
    "pi",
    "wait",
    "second",
    "want",
    "pi",
    "change",
    "know",
    "pi",
    "never",
    "changes",
    "going",
    "use",
    "put",
    "right",
    "going",
    "parenthesis",
    "put",
    "object",
    "frozen",
    "tries",
    "change",
    "going",
    "work",
    "going",
    "go",
    "catch",
    "block",
    "going",
    "log",
    "error",
    "exception",
    "let",
    "run",
    "see",
    "error",
    "see",
    "pi",
    "stays",
    "whenever",
    "object",
    "want",
    "items",
    "object",
    "change",
    "use",
    "use",
    "arrow",
    "functions",
    "write",
    "concise",
    "anonymous",
    "functions",
    "function",
    "called",
    "anonymous",
    "function",
    "name",
    "assigned",
    "variable",
    "magic",
    "word",
    "right",
    "function",
    "keyword",
    "assign",
    "name",
    "function",
    "whenever",
    "anonymous",
    "function",
    "convert",
    "arrow",
    "function",
    "makes",
    "little",
    "quicker",
    "write",
    "instead",
    "word",
    "function",
    "going",
    "take",
    "completely",
    "put",
    "arrow",
    "thing",
    "except",
    "little",
    "quicker",
    "write",
    "shorten",
    "even",
    "returning",
    "one",
    "value",
    "even",
    "need",
    "return",
    "keyword",
    "need",
    "curly",
    "braces",
    "delete",
    "delete",
    "full",
    "function",
    "really",
    "shortened",
    "make",
    "even",
    "nicer",
    "going",
    "use",
    "var",
    "going",
    "change",
    "const",
    "write",
    "arrow",
    "functions",
    "parameters",
    "like",
    "normal",
    "function",
    "pass",
    "arguments",
    "arrow",
    "functions",
    "let",
    "show",
    "convert",
    "function",
    "arrow",
    "function",
    "normal",
    "function",
    "two",
    "arguments",
    "going",
    "concatenate",
    "two",
    "arrays",
    "passed",
    "first",
    "take",
    "function",
    "keyword",
    "going",
    "leave",
    "parenthesis",
    "parameters",
    "put",
    "arrow",
    "since",
    "returning",
    "even",
    "need",
    "return",
    "keyword",
    "need",
    "curly",
    "braces",
    "take",
    "take",
    "done",
    "converted",
    "function",
    "arrow",
    "function",
    "two",
    "parameters",
    "parameters",
    "parenthesis",
    "arrow",
    "returned",
    "right",
    "arrow",
    "run",
    "see",
    "concatenate",
    "two",
    "arrays",
    "passed",
    "example",
    "good",
    "measure",
    "change",
    "const",
    "write",
    "higher",
    "order",
    "arrow",
    "functions",
    "arrow",
    "functions",
    "work",
    "really",
    "well",
    "higher",
    "order",
    "functions",
    "map",
    "filter",
    "reduce",
    "go",
    "detail",
    "different",
    "time",
    "map",
    "filter",
    "reduce",
    "main",
    "thing",
    "know",
    "take",
    "functions",
    "arguments",
    "processing",
    "collections",
    "data",
    "whenever",
    "one",
    "function",
    "takes",
    "another",
    "function",
    "argument",
    "good",
    "time",
    "arrow",
    "function",
    "going",
    "going",
    "update",
    "function",
    "right",
    "want",
    "compute",
    "square",
    "positive",
    "integers",
    "array",
    "passed",
    "array",
    "want",
    "filter",
    "everything",
    "positive",
    "integer",
    "going",
    "use",
    "filter",
    "map",
    "functions",
    "main",
    "thing",
    "want",
    "look",
    "arrow",
    "functions",
    "passing",
    "filter",
    "map",
    "line",
    "going",
    "lot",
    "succinct",
    "arrow",
    "functions",
    "squaredintegers",
    "going",
    "arr",
    "going",
    "filter",
    "really",
    "going",
    "explain",
    "detail",
    "filter",
    "function",
    "something",
    "another",
    "time",
    "look",
    "arrow",
    "function",
    "going",
    "create",
    "arrow",
    "function",
    "starting",
    "like",
    "showed",
    "passed",
    "arguments",
    "parenthesis",
    "arrow",
    "function",
    "single",
    "argument",
    "like",
    "number",
    "argument",
    "need",
    "parenthesis",
    "around",
    "argument",
    "put",
    "argument",
    "arrow",
    "beginning",
    "arrow",
    "function",
    "see",
    "returned",
    "arrow",
    "function",
    "first",
    "want",
    "filter",
    "array",
    "numbers",
    "integers",
    "numbers",
    "zero",
    "pass",
    "number",
    "number",
    "let",
    "complete",
    "parenthesis",
    "result",
    "filter",
    "command",
    "array",
    "numbers",
    "0",
    "also",
    "integers",
    "4",
    "42",
    "get",
    "new",
    "array",
    "want",
    "get",
    "square",
    "number",
    "array",
    "going",
    "use",
    "map",
    "function",
    "map",
    "function",
    "takes",
    "function",
    "argument",
    "instead",
    "writing",
    "full",
    "function",
    "use",
    "arrow",
    "function",
    "going",
    "pass",
    "x",
    "function",
    "going",
    "arrow",
    "function",
    "x",
    "means",
    "every",
    "element",
    "array",
    "passed",
    "remember",
    "map",
    "getting",
    "array",
    "42",
    "x",
    "means",
    "every",
    "element",
    "array",
    "going",
    "x",
    "x",
    "going",
    "squared",
    "main",
    "point",
    "lesson",
    "understand",
    "filter",
    "map",
    "functions",
    "see",
    "put",
    "arrow",
    "function",
    "pass",
    "arrow",
    "function",
    "makes",
    "fit",
    "everything",
    "really",
    "succinctly",
    "one",
    "line",
    "let",
    "reload",
    "see",
    "works",
    "16",
    "1764",
    "36",
    "write",
    "higher",
    "order",
    "arrow",
    "functions",
    "order",
    "create",
    "flexible",
    "functions",
    "use",
    "default",
    "parameters",
    "default",
    "parameter",
    "kicks",
    "argument",
    "specified",
    "undefined",
    "instance",
    "increment",
    "function",
    "want",
    "change",
    "want",
    "change",
    "increment",
    "function",
    "pass",
    "two",
    "arguments",
    "5",
    "2",
    "increment",
    "pass",
    "one",
    "argument",
    "5",
    "want",
    "increment",
    "numbers",
    "passing",
    "number",
    "value",
    "put",
    "value",
    "value",
    "passed",
    "set",
    "1",
    "automatically",
    "passed",
    "set",
    "whatever",
    "passed",
    "run",
    "look",
    "console",
    "7",
    "first",
    "one",
    "6",
    "second",
    "use",
    "rest",
    "operator",
    "function",
    "parameters",
    "rest",
    "operator",
    "allows",
    "create",
    "function",
    "takes",
    "variable",
    "number",
    "arguments",
    "rest",
    "operator",
    "three",
    "dots",
    "function",
    "taking",
    "three",
    "arguments",
    "x",
    "z",
    "summing",
    "first",
    "converting",
    "x",
    "z",
    "array",
    "called",
    "args",
    "reducing",
    "summing",
    "returning",
    "results",
    "right",
    "run",
    "going",
    "log",
    "6",
    "1",
    "2",
    "3",
    "change",
    "use",
    "rest",
    "operator",
    "still",
    "going",
    "pass",
    "1",
    "2",
    "accepted",
    "arguments",
    "x",
    "z",
    "going",
    "put",
    "rest",
    "operator",
    "going",
    "put",
    "args",
    "rest",
    "operator",
    "convert",
    "everything",
    "passed",
    "one",
    "array",
    "array",
    "called",
    "args",
    "need",
    "anymore",
    "work",
    "run",
    "get",
    "also",
    "add",
    "number",
    "numbers",
    "put",
    "4",
    "end",
    "going",
    "add",
    "numbers",
    "together",
    "could",
    "pass",
    "three",
    "arguments",
    "number",
    "arguments",
    "use",
    "spread",
    "operator",
    "evaluate",
    "arrays",
    "spread",
    "operator",
    "looks",
    "like",
    "rest",
    "operator",
    "three",
    "dots",
    "expands",
    "already",
    "existing",
    "array",
    "spreads",
    "array",
    "takes",
    "array",
    "spreads",
    "individual",
    "parts",
    "array",
    "months",
    "spread",
    "operator",
    "spread",
    "array",
    "arr1",
    "individual",
    "months",
    "instead",
    "actual",
    "array",
    "use",
    "argument",
    "function",
    "array",
    "literal",
    "let",
    "look",
    "right",
    "setting",
    "arr2",
    "equal",
    "arr1",
    "example",
    "actually",
    "copying",
    "change",
    "arr1",
    "set",
    "index",
    "arr1",
    "potato",
    "log",
    "arr2",
    "see",
    "index",
    "0",
    "potato",
    "even",
    "though",
    "logging",
    "arr2",
    "changed",
    "arr1",
    "equal",
    "arr2",
    "arr1",
    "want",
    "arr2",
    "copy",
    "arr1",
    "use",
    "spread",
    "operator",
    "use",
    "spread",
    "operator",
    "like",
    "going",
    "work",
    "put",
    "inside",
    "brackets",
    "array",
    "spread",
    "contents",
    "arr1",
    "new",
    "array",
    "making",
    "arr2",
    "equal",
    "arr1",
    "making",
    "arr2",
    "equal",
    "contents",
    "arr1",
    "different",
    "run",
    "see",
    "says",
    "january",
    "first",
    "element",
    "array",
    "instead",
    "potato",
    "use",
    "destructuring",
    "assignment",
    "assign",
    "variables",
    "objects",
    "next",
    "lesson",
    "destructuring",
    "assignment",
    "special",
    "syntax",
    "neatly",
    "assigning",
    "values",
    "taken",
    "directly",
    "object",
    "variable",
    "look",
    "object",
    "object",
    "three",
    "elements",
    "x",
    "z",
    "values",
    "voxel",
    "variable",
    "want",
    "take",
    "individual",
    "element",
    "object",
    "assign",
    "variable",
    "old",
    "way",
    "vox",
    "stores",
    "stores",
    "stores",
    "destructuring",
    "simpler",
    "quicker",
    "way",
    "assign",
    "variables",
    "element",
    "object",
    "destructuring",
    "syntax",
    "right",
    "time",
    "creating",
    "variables",
    "b",
    "c",
    "assigning",
    "values",
    "object",
    "x",
    "see",
    "put",
    "curly",
    "braces",
    "say",
    "equals",
    "object",
    "equals",
    "voxel",
    "read",
    "like",
    "get",
    "field",
    "x",
    "copy",
    "value",
    "get",
    "field",
    "x",
    "object",
    "copy",
    "value",
    "get",
    "field",
    "object",
    "copy",
    "value",
    "get",
    "field",
    "z",
    "copy",
    "value",
    "quicker",
    "way",
    "assigning",
    "things",
    "object",
    "variables",
    "going",
    "use",
    "destructuring",
    "obtain",
    "average",
    "temperature",
    "tomorrow",
    "input",
    "object",
    "today",
    "tomorrow",
    "temperatures",
    "average",
    "temperature",
    "inputted",
    "function",
    "going",
    "change",
    "line",
    "use",
    "destructuring",
    "destructure",
    "object",
    "passed",
    "function",
    "first",
    "going",
    "put",
    "variable",
    "side",
    "equals",
    "sign",
    "going",
    "use",
    "destructuring",
    "put",
    "curly",
    "braces",
    "put",
    "tomorrow",
    "colon",
    "curly",
    "brace",
    "saying",
    "get",
    "tomorrow",
    "field",
    "object",
    "assign",
    "tempoftomorrow",
    "variable",
    "run",
    "see",
    "says",
    "79",
    "console",
    "got",
    "tempoftomorrow",
    "variable",
    "returned",
    "tempoftomorrow",
    "logged",
    "right",
    "successfully",
    "used",
    "destructuring",
    "get",
    "tomorrow",
    "variable",
    "destructuring",
    "assignment",
    "nested",
    "objects",
    "also",
    "use",
    "destructuring",
    "assignment",
    "assign",
    "variables",
    "nested",
    "objects",
    "nested",
    "object",
    "right",
    "local",
    "forecast",
    "inside",
    "nested",
    "objects",
    "forecast",
    "today",
    "forecast",
    "tomorrow",
    "getmaxoftmrw",
    "going",
    "pass",
    "forecast",
    "see",
    "becomes",
    "forecast",
    "variable",
    "trying",
    "figure",
    "maxoftomorrow",
    "going",
    "use",
    "destructuring",
    "figure",
    "going",
    "equal",
    "forecast",
    "remember",
    "nested",
    "object",
    "destructuring",
    "always",
    "going",
    "use",
    "curly",
    "braces",
    "first",
    "going",
    "get",
    "tomorrow",
    "side",
    "colon",
    "going",
    "curly",
    "braces",
    "nested",
    "need",
    "go",
    "inside",
    "tomorrow",
    "object",
    "need",
    "max",
    "max",
    "colon",
    "maxoftomorrow",
    "need",
    "two",
    "sets",
    "squiggly",
    "braces",
    "one",
    "one",
    "destructured",
    "two",
    "times",
    "variable",
    "maxoftomorrow",
    "set",
    "max",
    "inside",
    "tomorrow",
    "maxoftomorrow",
    "run",
    "see",
    "use",
    "destructuring",
    "assignment",
    "assign",
    "variables",
    "arrays",
    "use",
    "destructuring",
    "assignment",
    "assign",
    "variables",
    "arrays",
    "look",
    "example",
    "array",
    "1",
    "2",
    "3",
    "4",
    "5",
    "6",
    "assigning",
    "variable",
    "z",
    "x",
    "first",
    "two",
    "numbers",
    "array",
    "1",
    "difference",
    "destructuring",
    "arrays",
    "destructuring",
    "objects",
    "specify",
    "element",
    "array",
    "go",
    "variable",
    "goes",
    "order",
    "however",
    "wanted",
    "number",
    "4",
    "going",
    "variable",
    "like",
    "would",
    "add",
    "commas",
    "put",
    "comma",
    "nothing",
    "like",
    "two",
    "commas",
    "row",
    "put",
    "first",
    "element",
    "second",
    "element",
    "skip",
    "third",
    "element",
    "fourth",
    "element",
    "z",
    "x",
    "see",
    "1",
    "2",
    "another",
    "thing",
    "use",
    "destructuring",
    "arrays",
    "switch",
    "places",
    "variables",
    "let",
    "uncomment",
    "going",
    "use",
    "destructuring",
    "switch",
    "places",
    "like",
    "say",
    "b",
    "say",
    "b",
    "taking",
    "switching",
    "places",
    "instead",
    "8",
    "b",
    "equals",
    "6",
    "going",
    "log",
    "6",
    "let",
    "see",
    "yeah",
    "worked",
    "use",
    "destructuring",
    "assignment",
    "rest",
    "operator",
    "use",
    "destructuring",
    "assignment",
    "rest",
    "operator",
    "reassign",
    "array",
    "elements",
    "see",
    "example",
    "array",
    "digits",
    "1",
    "10",
    "array",
    "removefirsttwo",
    "function",
    "calling",
    "passing",
    "source",
    "source",
    "array",
    "becomes",
    "list",
    "want",
    "return",
    "array",
    "first",
    "two",
    "elements",
    "removed",
    "let",
    "use",
    "rest",
    "operator",
    "inside",
    "array",
    "use",
    "rest",
    "operator",
    "three",
    "little",
    "dots",
    "remove",
    "first",
    "two",
    "put",
    "two",
    "commas",
    "nothing",
    "saying",
    "nothing",
    "first",
    "element",
    "nothing",
    "second",
    "element",
    "everything",
    "else",
    "put",
    "arr",
    "variable",
    "could",
    "assigned",
    "first",
    "two",
    "numbers",
    "array",
    "two",
    "variables",
    "could",
    "b",
    "would",
    "1",
    "b",
    "would",
    "2",
    "arr",
    "would",
    "array",
    "3",
    "4",
    "5",
    "6",
    "7",
    "8",
    "9",
    "right",
    "need",
    "return",
    "array",
    "first",
    "two",
    "elements",
    "missing",
    "run",
    "see",
    "look",
    "console",
    "logged",
    "array",
    "first",
    "two",
    "elements",
    "missing",
    "original",
    "array",
    "use",
    "destructuring",
    "assignment",
    "pass",
    "object",
    "function",
    "parameters",
    "use",
    "destructuring",
    "assignment",
    "pass",
    "object",
    "function",
    "parameter",
    "let",
    "show",
    "mean",
    "right",
    "half",
    "function",
    "getting",
    "stats",
    "argument",
    "stats",
    "passed",
    "called",
    "passing",
    "whole",
    "object",
    "whole",
    "stats",
    "object",
    "see",
    "within",
    "function",
    "using",
    "instead",
    "passing",
    "entire",
    "stats",
    "function",
    "pass",
    "need",
    "going",
    "going",
    "put",
    "curly",
    "braces",
    "put",
    "max",
    "min",
    "stats",
    "get",
    "passed",
    "destructured",
    "max",
    "min",
    "variables",
    "max",
    "min",
    "function",
    "gets",
    "passed",
    "instead",
    "max",
    "instead",
    "min",
    "reload",
    "going",
    "work",
    "exactly",
    "like",
    "pass",
    "need",
    "commonly",
    "used",
    "api",
    "calls",
    "getting",
    "information",
    "ajax",
    "request",
    "api",
    "request",
    "often",
    "lot",
    "information",
    "need",
    "use",
    "destructuring",
    "get",
    "actually",
    "want",
    "work",
    "create",
    "strings",
    "using",
    "template",
    "literals",
    "template",
    "literals",
    "special",
    "type",
    "string",
    "makes",
    "creating",
    "complex",
    "strings",
    "easier",
    "make",
    "backtick",
    "example",
    "template",
    "literal",
    "right",
    "beginning",
    "backtick",
    "ending",
    "backtick",
    "would",
    "place",
    "using",
    "quotation",
    "single",
    "double",
    "quotation",
    "mark",
    "advantages",
    "using",
    "template",
    "literals",
    "backticks",
    "instead",
    "quotation",
    "marks",
    "one",
    "make",
    "multiline",
    "strings",
    "see",
    "two",
    "lines",
    "first",
    "line",
    "second",
    "line",
    "log",
    "greeting",
    "going",
    "put",
    "new",
    "line",
    "right",
    "another",
    "thing",
    "add",
    "single",
    "double",
    "quotation",
    "marks",
    "right",
    "string",
    "escape",
    "third",
    "thing",
    "put",
    "variables",
    "right",
    "string",
    "see",
    "see",
    "curly",
    "braces",
    "anything",
    "curly",
    "braces",
    "start",
    "javascript",
    "right",
    "variable",
    "gets",
    "name",
    "gets",
    "age",
    "right",
    "makes",
    "things",
    "easier",
    "put",
    "variables",
    "right",
    "strings",
    "run",
    "see",
    "normally",
    "would",
    "actually",
    "also",
    "printed",
    "new",
    "line",
    "exact",
    "code",
    "editor",
    "console",
    "show",
    "new",
    "line",
    "going",
    "coding",
    "challenge",
    "going",
    "right",
    "makelist",
    "function",
    "want",
    "create",
    "list",
    "based",
    "array",
    "passed",
    "call",
    "makelist",
    "pass",
    "well",
    "result",
    "array",
    "want",
    "return",
    "array",
    "looks",
    "like",
    "element",
    "array",
    "template",
    "literal",
    "html",
    "also",
    "linebreak",
    "comes",
    "right",
    "array",
    "passed",
    "let",
    "use",
    "template",
    "literal",
    "create",
    "instead",
    "setting",
    "equal",
    "null",
    "going",
    "start",
    "empty",
    "array",
    "many",
    "ways",
    "going",
    "use",
    "classic",
    "loop",
    "hopefully",
    "remember",
    "make",
    "loop",
    "let",
    "0",
    "less",
    "end",
    "increment",
    "inside",
    "loop",
    "going",
    "use",
    "template",
    "literal",
    "put",
    "backtick",
    "put",
    "html",
    "code",
    "next",
    "part",
    "going",
    "variable",
    "changes",
    "array",
    "element",
    "going",
    "dollar",
    "sign",
    "curly",
    "braces",
    "arr",
    "index",
    "end",
    "curly",
    "brace",
    "put",
    "okay",
    "finished",
    "resultdisplayarray",
    "array",
    "looks",
    "like",
    "supposed",
    "look",
    "console",
    "returns",
    "correctly",
    "write",
    "concise",
    "object",
    "literal",
    "declarations",
    "using",
    "simple",
    "fields",
    "es6",
    "added",
    "nice",
    "support",
    "easily",
    "defining",
    "object",
    "literals",
    "look",
    "function",
    "function",
    "arrow",
    "function",
    "takes",
    "three",
    "variables",
    "name",
    "age",
    "gender",
    "going",
    "return",
    "object",
    "object",
    "going",
    "series",
    "key",
    "value",
    "pairs",
    "key",
    "name",
    "age",
    "gender",
    "values",
    "passed",
    "variable",
    "names",
    "passed",
    "names",
    "age",
    "gender",
    "look",
    "console",
    "see",
    "currently",
    "createperson",
    "passed",
    "name",
    "age",
    "gender",
    "see",
    "console",
    "object",
    "name",
    "zodiac",
    "hasbro",
    "age",
    "56",
    "gender",
    "male",
    "see",
    "repetition",
    "repeating",
    "name",
    "name",
    "age",
    "age",
    "gender",
    "gender",
    "first",
    "name",
    "key",
    "second",
    "name",
    "value",
    "way",
    "make",
    "simpler",
    "know",
    "want",
    "create",
    "object",
    "key",
    "name",
    "variable",
    "value",
    "value",
    "variable",
    "easier",
    "way",
    "actually",
    "delete",
    "whole",
    "thing",
    "going",
    "name",
    "age",
    "gender",
    "javascript",
    "knows",
    "going",
    "return",
    "object",
    "going",
    "three",
    "key",
    "value",
    "pairs",
    "name",
    "age",
    "gender",
    "reload",
    "see",
    "console",
    "looks",
    "exactly",
    "code",
    "thing",
    "previous",
    "code",
    "write",
    "concise",
    "declarative",
    "functions",
    "object",
    "contain",
    "function",
    "long",
    "way",
    "put",
    "function",
    "within",
    "object",
    "simpler",
    "way",
    "setgear",
    "function",
    "instead",
    "using",
    "function",
    "keyword",
    "colon",
    "delete",
    "new",
    "way",
    "load",
    "see",
    "3",
    "console",
    "like",
    "able",
    "set",
    "gear",
    "using",
    "function",
    "use",
    "class",
    "syntax",
    "define",
    "constructor",
    "function",
    "es6",
    "provides",
    "syntax",
    "create",
    "objects",
    "using",
    "class",
    "keyword",
    "older",
    "way",
    "create",
    "object",
    "new",
    "keyword",
    "instantiate",
    "object",
    "using",
    "new",
    "keyword",
    "instantiating",
    "spaceshuttle",
    "object",
    "constructor",
    "function",
    "use",
    "construct",
    "object",
    "pass",
    "target",
    "planet",
    "jupiter",
    "said",
    "targetplanet",
    "create",
    "new",
    "object",
    "like",
    "allows",
    "us",
    "set",
    "jupiter",
    "console",
    "see",
    "jupiter",
    "class",
    "syntax",
    "replaces",
    "constructor",
    "function",
    "creation",
    "going",
    "delete",
    "going",
    "use",
    "class",
    "syntax",
    "class",
    "spaceshuttle",
    "curly",
    "brace",
    "inside",
    "constructor",
    "constructor",
    "targetplanet",
    "put",
    "curly",
    "brace",
    "works",
    "exactly",
    "using",
    "class",
    "keyword",
    "constructor",
    "going",
    "thing",
    "vegetable",
    "class",
    "vegetable",
    "class",
    "class",
    "vegetable",
    "going",
    "constructor",
    "name",
    "name",
    "set",
    "vegetable",
    "makeclass",
    "return",
    "vegetable",
    "class",
    "new",
    "vegetable",
    "passing",
    "carrot",
    "carrot",
    "go",
    "get",
    "set",
    "get",
    "carrot",
    "use",
    "getters",
    "setters",
    "control",
    "access",
    "object",
    "class",
    "object",
    "often",
    "want",
    "obtain",
    "values",
    "object",
    "set",
    "value",
    "property",
    "within",
    "object",
    "often",
    "called",
    "getters",
    "setters",
    "class",
    "object",
    "constructor",
    "already",
    "talked",
    "also",
    "getter",
    "setter",
    "get",
    "set",
    "writer",
    "get",
    "writer",
    "set",
    "writer",
    "getter",
    "functions",
    "meant",
    "simply",
    "return",
    "get",
    "value",
    "object",
    "private",
    "variable",
    "user",
    "without",
    "user",
    "directly",
    "accessing",
    "private",
    "variable",
    "private",
    "variable",
    "gets",
    "set",
    "construct",
    "object",
    "get",
    "writer",
    "going",
    "return",
    "never",
    "actually",
    "interact",
    "directly",
    "variable",
    "going",
    "get",
    "writer",
    "author",
    "setting",
    "never",
    "interacting",
    "set",
    "writer",
    "setter",
    "change",
    "could",
    "invoke",
    "calculations",
    "even",
    "overriding",
    "previous",
    "value",
    "completely",
    "number",
    "code",
    "lines",
    "setter",
    "ultimately",
    "maybe",
    "different",
    "calculations",
    "set",
    "calculations",
    "get",
    "property",
    "going",
    "make",
    "getter",
    "setter",
    "thermostat",
    "class",
    "going",
    "create",
    "thermostat",
    "class",
    "going",
    "getter",
    "setter",
    "thing",
    "challenge",
    "construct",
    "class",
    "going",
    "accept",
    "fahrenheit",
    "temperature",
    "going",
    "create",
    "getter",
    "setter",
    "class",
    "obtain",
    "temperature",
    "celsius",
    "going",
    "calculation",
    "right",
    "within",
    "class",
    "let",
    "going",
    "class",
    "thermostat",
    "class",
    "need",
    "constructor",
    "first",
    "create",
    "thermostat",
    "going",
    "pass",
    "temperature",
    "remember",
    "going",
    "fahrenheit",
    "within",
    "constructor",
    "going",
    "set",
    "private",
    "variable",
    "word",
    "means",
    "variable",
    "accessible",
    "within",
    "class",
    "whenever",
    "start",
    "variable",
    "going",
    "generally",
    "signify",
    "private",
    "variable",
    "supposed",
    "access",
    "outside",
    "scope",
    "outside",
    "class",
    "going",
    "set",
    "temp",
    "going",
    "put",
    "temp",
    "passed",
    "fahrenheit",
    "want",
    "convert",
    "celsius",
    "happen",
    "equation",
    "celsius",
    "temp",
    "32",
    "create",
    "getter",
    "setter",
    "getter",
    "get",
    "temperature",
    "going",
    "return",
    "celsius",
    "storing",
    "value",
    "celsius",
    "even",
    "though",
    "thermostat",
    "created",
    "fahrenheit",
    "setter",
    "going",
    "set",
    "temperature",
    "updatedtemp",
    "going",
    "still",
    "celsus",
    "updatedtemp",
    "let",
    "look",
    "code",
    "using",
    "const",
    "thermostat",
    "makeclass",
    "makeclass",
    "function",
    "going",
    "return",
    "thermostat",
    "object",
    "going",
    "const",
    "thermos",
    "new",
    "thermostat",
    "instantiating",
    "object",
    "always",
    "use",
    "new",
    "keyword",
    "new",
    "thermostat",
    "passing",
    "goes",
    "constructor",
    "temp",
    "calculation",
    "convent",
    "fahrenheit",
    "celsius",
    "local",
    "variable",
    "let",
    "temp",
    "going",
    "use",
    "getter",
    "get",
    "temperature",
    "going",
    "return",
    "key",
    "thing",
    "look",
    "parenthesis",
    "generally",
    "something",
    "function",
    "would",
    "see",
    "parenthesis",
    "function",
    "name",
    "variable",
    "property",
    "name",
    "going",
    "parenthesis",
    "getters",
    "setters",
    "accessed",
    "similar",
    "properties",
    "use",
    "setter",
    "26",
    "sets",
    "updated",
    "temperature",
    "say",
    "temp",
    "temp",
    "new",
    "temperature",
    "load",
    "26",
    "understand",
    "differences",
    "import",
    "require",
    "past",
    "people",
    "would",
    "use",
    "require",
    "function",
    "import",
    "functions",
    "code",
    "files",
    "import",
    "export",
    "export",
    "code",
    "one",
    "file",
    "import",
    "another",
    "file",
    "also",
    "allows",
    "import",
    "certain",
    "functions",
    "file",
    "certain",
    "variables",
    "let",
    "show",
    "works",
    "file",
    "capitalized",
    "string",
    "function",
    "passing",
    "string",
    "hello",
    "want",
    "log",
    "capitalized",
    "strings",
    "right",
    "error",
    "capitalizestring",
    "function",
    "file",
    "however",
    "file",
    "capitalizestring",
    "function",
    "string",
    "function",
    "export",
    "export",
    "statement",
    "talking",
    "exporting",
    "function",
    "actually",
    "variable",
    "capitalize",
    "string",
    "set",
    "equal",
    "function",
    "arrow",
    "function",
    "pass",
    "string",
    "return",
    "touppercase",
    "string",
    "function",
    "makes",
    "ever",
    "letter",
    "uppercase",
    "import",
    "file",
    "let",
    "go",
    "back",
    "file",
    "import",
    "import",
    "statement",
    "going",
    "use",
    "curly",
    "braces",
    "put",
    "capitalizestring",
    "say",
    "importing",
    "want",
    "import",
    "put",
    "file",
    "name",
    "normally",
    "going",
    "start",
    "means",
    "current",
    "directory",
    "type",
    "file",
    "name",
    "file",
    "name",
    "assumed",
    "put",
    "put",
    "file",
    "name",
    "without",
    "extension",
    "run",
    "see",
    "hello",
    "capital",
    "letters",
    "successfully",
    "imported",
    "function",
    "file",
    "used",
    "file",
    "use",
    "export",
    "reuse",
    "code",
    "block",
    "talked",
    "little",
    "bit",
    "export",
    "last",
    "lesson",
    "going",
    "go",
    "detail",
    "export",
    "functions",
    "variables",
    "one",
    "file",
    "import",
    "another",
    "file",
    "reuse",
    "different",
    "code",
    "function",
    "capitalizestring",
    "function",
    "actually",
    "capitalizes",
    "first",
    "letter",
    "string",
    "leaves",
    "rest",
    "string",
    "lowercase",
    "showed",
    "put",
    "export",
    "right",
    "export",
    "different",
    "way",
    "export",
    "curly",
    "braces",
    "capitalizestring",
    "exported",
    "function",
    "export",
    "variable",
    "like",
    "const",
    "foo",
    "bar",
    "const",
    "bar",
    "foo",
    "export",
    "variables",
    "type",
    "export",
    "file",
    "exporting",
    "function",
    "two",
    "variables",
    "import",
    "another",
    "file",
    "use",
    "import",
    "everything",
    "file",
    "file",
    "exports",
    "multiple",
    "different",
    "things",
    "import",
    "thing",
    "individually",
    "import",
    "everything",
    "let",
    "show",
    "would",
    "import",
    "everything",
    "file",
    "import",
    "going",
    "put",
    "asterisk",
    "star",
    "going",
    "put",
    "import",
    "create",
    "object",
    "store",
    "everything",
    "going",
    "import",
    "stuff",
    "file",
    "called",
    "capitalizestrings",
    "going",
    "call",
    "captalizestrings",
    "could",
    "really",
    "anything",
    "creating",
    "object",
    "going",
    "see",
    "importing",
    "put",
    "file",
    "name",
    "case",
    "going",
    "sometimes",
    "would",
    "put",
    "directory",
    "make",
    "sure",
    "put",
    "semicolon",
    "end",
    "importing",
    "everything",
    "always",
    "start",
    "import",
    "could",
    "anything",
    "could",
    "object",
    "name",
    "create",
    "going",
    "put",
    "put",
    "file",
    "name",
    "quotation",
    "marks",
    "like",
    "create",
    "export",
    "fallback",
    "export",
    "default",
    "talked",
    "exports",
    "talking",
    "named",
    "exports",
    "also",
    "something",
    "called",
    "export",
    "default",
    "fallback",
    "export",
    "often",
    "used",
    "want",
    "export",
    "one",
    "thing",
    "file",
    "let",
    "say",
    "want",
    "fallback",
    "export",
    "going",
    "export",
    "one",
    "thing",
    "file",
    "put",
    "export",
    "default",
    "know",
    "fallback",
    "basically",
    "one",
    "thing",
    "going",
    "export",
    "file",
    "import",
    "default",
    "export",
    "talked",
    "exporting",
    "default",
    "export",
    "going",
    "show",
    "import",
    "default",
    "export",
    "pretty",
    "much",
    "slight",
    "difference",
    "going",
    "pretend",
    "file",
    "called",
    "default",
    "export",
    "name",
    "subtract",
    "let",
    "show",
    "would",
    "import",
    "going",
    "import",
    "subtract",
    "already",
    "reached",
    "difference",
    "default",
    "export",
    "put",
    "curly",
    "braces",
    "around",
    "default",
    "export",
    "going",
    "use",
    "curly",
    "braces",
    "still",
    "say",
    "okay",
    "would",
    "import",
    "default",
    "export",
    "well",
    "thanks",
    "watching",
    "forget",
    "subscribe",
    "remember",
    "use",
    "code",
    "good",
    "visit"
  ],
  "keywords": [
    "javascript",
    "course",
    "name",
    "everything",
    "need",
    "know",
    "get",
    "actually",
    "want",
    "go",
    "every",
    "part",
    "check",
    "could",
    "also",
    "going",
    "create",
    "really",
    "things",
    "use",
    "find",
    "freecodecamp",
    "second",
    "let",
    "well",
    "run",
    "write",
    "something",
    "show",
    "code",
    "file",
    "within",
    "looks",
    "like",
    "console",
    "see",
    "says",
    "hello",
    "right",
    "program",
    "another",
    "would",
    "three",
    "anything",
    "world",
    "final",
    "thing",
    "using",
    "log",
    "new",
    "already",
    "two",
    "ways",
    "different",
    "comment",
    "first",
    "talk",
    "used",
    "make",
    "means",
    "end",
    "line",
    "instance",
    "put",
    "var",
    "number",
    "way",
    "declare",
    "variable",
    "later",
    "knows",
    "9",
    "longer",
    "data",
    "variables",
    "common",
    "strings",
    "numbers",
    "string",
    "undefined",
    "defined",
    "set",
    "nothing",
    "say",
    "true",
    "false",
    "talked",
    "value",
    "object",
    "store",
    "key",
    "often",
    "point",
    "one",
    "keyword",
    "else",
    "called",
    "const",
    "able",
    "whole",
    "scope",
    "declared",
    "never",
    "change",
    "changed",
    "try",
    "error",
    "okay",
    "values",
    "assignment",
    "operator",
    "assigning",
    "assign",
    "b",
    "equals",
    "sign",
    "2",
    "checking",
    "7",
    "example",
    "time",
    "10",
    "c",
    "always",
    "quotation",
    "marks",
    "1",
    "equal",
    "6",
    "5",
    "case",
    "names",
    "function",
    "even",
    "instead",
    "letter",
    "word",
    "adding",
    "0",
    "20",
    "answer",
    "12",
    "8",
    "increment",
    "add",
    "myvar",
    "still",
    "times",
    "remainder",
    "3",
    "little",
    "single",
    "double",
    "literal",
    "quotes",
    "quote",
    "beginning",
    "inside",
    "escape",
    "character",
    "last",
    "count",
    "mystr",
    "however",
    "start",
    "return",
    "come",
    "together",
    "space",
    "remember",
    "take",
    "onto",
    "sentence",
    "good",
    "sure",
    "length",
    "property",
    "type",
    "bracket",
    "notation",
    "index",
    "brackets",
    "zero",
    "look",
    "many",
    "similar",
    "words",
    "functions",
    "call",
    "pass",
    "passing",
    "passed",
    "result",
    "empty",
    "returned",
    "dog",
    "copy",
    "multiple",
    "arrays",
    "array",
    "element",
    "elements",
    "myarray",
    "nested",
    "access",
    "test",
    "push",
    "j",
    "next",
    "item",
    "parenthesis",
    "shift",
    "list",
    "curly",
    "since",
    "arguments",
    "parameters",
    "output",
    "global",
    "outside",
    "block",
    "statement",
    "colon",
    "happens",
    "delete",
    "takes",
    "returns",
    "statements",
    "order",
    "braces",
    "condition",
    "equality",
    "val",
    "strict",
    "works",
    "greater",
    "less",
    "easier",
    "rest",
    "worked",
    "strokes",
    "4",
    "switch",
    "break",
    "default",
    "update",
    "negative",
    "card",
    "work",
    "positive",
    "objects",
    "properties",
    "dot",
    "collection",
    "id",
    "tracks",
    "prop",
    "loops",
    "loop",
    "iteration",
    "contacts",
    "random",
    "argument",
    "ternary",
    "reassign",
    "arrow",
    "filter",
    "x",
    "arr1",
    "destructuring",
    "temperature",
    "tomorrow",
    "age",
    "gender",
    "class",
    "constructor",
    "setter",
    "thermostat",
    "import",
    "export"
  ]
}