{
  "text": "right from the start software\ndevelopment comprise two different\ndepartments the development team that\ndevelops the plan designs and builds the\nsystem from scratch and the operation\nteam for testing and implementation of\nwhatever is developed the operations\nteam gave the development team feedback\non any bugs that needed fixing and any\nrework required invariably the\ndevelopment team would be idle awaiting\nfeedback from the operations team\nthis undoubtedly extended timelines and\ndelayed the entire software development\ncycle there would be instances where the\ndevelopment team moves on to the next\nproject while the operations team\ncontinues to provide feedback for the\nprevious code\nthis meant weeks or even months for the\nproject to be closed and final code to\nbe developed now what if the two\ndepartments came together and worked in\ncollaboration with each other what if\nthe wall of confusion was broken\nand this is called the devops approach\nthe devops symbol resembles an infinity\nsign suggesting that it is a continuous\nprocess of improving efficiency and\nconstant activity the devops approach\nmakes companies adapt faster to updates\nand development changes the teams can\nnow deliver quickly and the deployments\nare more consistent and smooth though\nthere may be communication challenges\ndevops manages a streamlined flow\nbetween the teams and makes the software\ndevelopment process successful the\ndevops culture is implemented in several\nphases with the help of several tools\nlet's have a look at these phases\nthe first phase is the planning phase\nwhere the development team puts down a\nplan keeping in mind the application\nobjectives that are to be delivered to\nthe customer\nonce the plan is made the coding begins\nthe development team works on the same\ncode and different versions of the code\nare stored into a repository with the\nhelp of tools like get and merged when\nrequired this process is called version\ncontrol the code is then made executable\nwith tools like maven and gradle in the\nbuild stage\nafter the code is successfully built it\nis then tested for any bugs or errors\nthe most popular tool for automation\ntesting is selenium\nonce the code has passed several manual\nand automated tests we can say that it\nis ready for deployment and is sent to\nthe operations team\nthe operations team now deploys the code\nto the working environment the most\nprominent tools used to automate these\nphases are ansible docker and kubernetes\nafter the deployment the product is\ncontinuously monitored and nagios is one\nof the top tools used to automate this\nphase\nthe feedback received after this phase\nis sent back to the planning phase and\nthis is what forms the core of the\ndevops life cycle that is the\nintegration phase\njenkins is the tool that sends the code\nfor building and testing if the code\npasses the test it is sent for\ndeployment and this is referred to as\ncontinuous integration\nthere are many tech giants and\norganizations that have opted for the\ndevops approach for example amazon\nnetflix walmart facebook and adobe\nnetflix introduced its online streaming\nservice in 2007.\nin 2014 it was estimated that a downtime\nfor about an hour would cost netflix 200\n000\nhowever now netflix can cope with such\nissues they opted for devops in the most\nfantastic way\nnetflix developed a tool called the\nsimeon army that continuously created\nbugs in the environment without\naffecting the users\nthis chaos motivated the developers to\nbuild a system that does not fall apart\nwhen any such thing happens\nso on this note here is a quiz for you\nmatch the devops tool with the phase it\nis used in\na\nb\nc\n[Music]\nd\nnone of the above\ntoday more and more companies lean\ntowards automation with the aim of\nreducing its delivery time and the gap\nbetween its development and operations\nteams to attain all of these there's\njust one gateway\ndevops\nand if you're also looking forward to\ndoing the same and excel in devops check\nout simply learn's post-graduate program\nin devops design and collaboration with\ncaltech ctme\nthe program can help you master several\nin-demand devops skills and tools like\ncontinuous integration and delivery\ndevops on cloud kubernetes docker and\nmuch more we hope you enjoyed this video\nif you did a thumbs up would be really\nappreciated here's your reminder to\nsubscribe to our channel and to click on\nthe bell icon for more on the latest\ntechnologies and trends thank you for\nwatching and stay tuned for more from\nsimplylearn\nyou\n",
  "words": [
    "right",
    "start",
    "software",
    "development",
    "comprise",
    "two",
    "different",
    "departments",
    "development",
    "team",
    "develops",
    "plan",
    "designs",
    "builds",
    "system",
    "scratch",
    "operation",
    "team",
    "testing",
    "implementation",
    "whatever",
    "developed",
    "operations",
    "team",
    "gave",
    "development",
    "team",
    "feedback",
    "bugs",
    "needed",
    "fixing",
    "rework",
    "required",
    "invariably",
    "development",
    "team",
    "would",
    "idle",
    "awaiting",
    "feedback",
    "operations",
    "team",
    "undoubtedly",
    "extended",
    "timelines",
    "delayed",
    "entire",
    "software",
    "development",
    "cycle",
    "would",
    "instances",
    "development",
    "team",
    "moves",
    "next",
    "project",
    "operations",
    "team",
    "continues",
    "provide",
    "feedback",
    "previous",
    "code",
    "meant",
    "weeks",
    "even",
    "months",
    "project",
    "closed",
    "final",
    "code",
    "developed",
    "two",
    "departments",
    "came",
    "together",
    "worked",
    "collaboration",
    "wall",
    "confusion",
    "broken",
    "called",
    "devops",
    "approach",
    "devops",
    "symbol",
    "resembles",
    "infinity",
    "sign",
    "suggesting",
    "continuous",
    "process",
    "improving",
    "efficiency",
    "constant",
    "activity",
    "devops",
    "approach",
    "makes",
    "companies",
    "adapt",
    "faster",
    "updates",
    "development",
    "changes",
    "teams",
    "deliver",
    "quickly",
    "deployments",
    "consistent",
    "smooth",
    "though",
    "may",
    "communication",
    "challenges",
    "devops",
    "manages",
    "streamlined",
    "flow",
    "teams",
    "makes",
    "software",
    "development",
    "process",
    "successful",
    "devops",
    "culture",
    "implemented",
    "several",
    "phases",
    "help",
    "several",
    "tools",
    "let",
    "look",
    "phases",
    "first",
    "phase",
    "planning",
    "phase",
    "development",
    "team",
    "puts",
    "plan",
    "keeping",
    "mind",
    "application",
    "objectives",
    "delivered",
    "customer",
    "plan",
    "made",
    "coding",
    "begins",
    "development",
    "team",
    "works",
    "code",
    "different",
    "versions",
    "code",
    "stored",
    "repository",
    "help",
    "tools",
    "like",
    "get",
    "merged",
    "required",
    "process",
    "called",
    "version",
    "control",
    "code",
    "made",
    "executable",
    "tools",
    "like",
    "maven",
    "gradle",
    "build",
    "stage",
    "code",
    "successfully",
    "built",
    "tested",
    "bugs",
    "errors",
    "popular",
    "tool",
    "automation",
    "testing",
    "selenium",
    "code",
    "passed",
    "several",
    "manual",
    "automated",
    "tests",
    "say",
    "ready",
    "deployment",
    "sent",
    "operations",
    "team",
    "operations",
    "team",
    "deploys",
    "code",
    "working",
    "environment",
    "prominent",
    "tools",
    "used",
    "automate",
    "phases",
    "ansible",
    "docker",
    "kubernetes",
    "deployment",
    "product",
    "continuously",
    "monitored",
    "nagios",
    "one",
    "top",
    "tools",
    "used",
    "automate",
    "phase",
    "feedback",
    "received",
    "phase",
    "sent",
    "back",
    "planning",
    "phase",
    "forms",
    "core",
    "devops",
    "life",
    "cycle",
    "integration",
    "phase",
    "jenkins",
    "tool",
    "sends",
    "code",
    "building",
    "testing",
    "code",
    "passes",
    "test",
    "sent",
    "deployment",
    "referred",
    "continuous",
    "integration",
    "many",
    "tech",
    "giants",
    "organizations",
    "opted",
    "devops",
    "approach",
    "example",
    "amazon",
    "netflix",
    "walmart",
    "facebook",
    "adobe",
    "netflix",
    "introduced",
    "online",
    "streaming",
    "service",
    "2014",
    "estimated",
    "downtime",
    "hour",
    "would",
    "cost",
    "netflix",
    "200",
    "000",
    "however",
    "netflix",
    "cope",
    "issues",
    "opted",
    "devops",
    "fantastic",
    "way",
    "netflix",
    "developed",
    "tool",
    "called",
    "simeon",
    "army",
    "continuously",
    "created",
    "bugs",
    "environment",
    "without",
    "affecting",
    "users",
    "chaos",
    "motivated",
    "developers",
    "build",
    "system",
    "fall",
    "apart",
    "thing",
    "happens",
    "note",
    "quiz",
    "match",
    "devops",
    "tool",
    "phase",
    "used",
    "b",
    "c",
    "music",
    "none",
    "today",
    "companies",
    "lean",
    "towards",
    "automation",
    "aim",
    "reducing",
    "delivery",
    "time",
    "gap",
    "development",
    "operations",
    "teams",
    "attain",
    "one",
    "gateway",
    "devops",
    "also",
    "looking",
    "forward",
    "excel",
    "devops",
    "check",
    "simply",
    "learn",
    "program",
    "devops",
    "design",
    "collaboration",
    "caltech",
    "ctme",
    "program",
    "help",
    "master",
    "several",
    "devops",
    "skills",
    "tools",
    "like",
    "continuous",
    "integration",
    "delivery",
    "devops",
    "cloud",
    "kubernetes",
    "docker",
    "much",
    "hope",
    "enjoyed",
    "video",
    "thumbs",
    "would",
    "really",
    "appreciated",
    "reminder",
    "subscribe",
    "channel",
    "click",
    "bell",
    "icon",
    "latest",
    "technologies",
    "trends",
    "thank",
    "watching",
    "stay",
    "tuned",
    "simplylearn"
  ],
  "keywords": [
    "software",
    "development",
    "two",
    "different",
    "departments",
    "team",
    "plan",
    "system",
    "testing",
    "developed",
    "operations",
    "feedback",
    "bugs",
    "required",
    "would",
    "cycle",
    "project",
    "code",
    "collaboration",
    "called",
    "devops",
    "approach",
    "continuous",
    "process",
    "makes",
    "companies",
    "teams",
    "several",
    "phases",
    "help",
    "tools",
    "phase",
    "planning",
    "made",
    "like",
    "build",
    "tool",
    "automation",
    "deployment",
    "sent",
    "environment",
    "used",
    "automate",
    "docker",
    "kubernetes",
    "continuously",
    "one",
    "integration",
    "opted",
    "netflix",
    "delivery",
    "program"
  ]
}