{
  "text": "this is a web app this is a web app this\nthing here also a web app dude why am I\ndoing this again I built the same app 10\ntimes with 10 different Frameworks using\n10 different programming languages it\nwas a horrible experience but I learned\na lot and I figured out which Full stack\nframework is the greatest of all time\nwhich will be revealed in dramatic\nfashion at the end of this video to\nmaximize the watch time on this journey\nyou will meet 10 different serers side\nFrameworks like rails Django laravel\nspring.net nextjs Phoenix rocket Jin\nvapor and Kor I realize that's 11 but\nyou don't need to be good at math to be\na programmer this video was insanely\ndifficult because each one of these\nFrameworks uses a different programming\nlanguage for each one of them we will\nlook at the overall developer experience\nincluding things like setup routing\ndatabase integration and the overall\narchitecture now before we get started\nhere's a warning the framework you\nchoose by the end of this video is going\nto dictate your life for the next 10\nyears as you grow your startup into a\nDeca unicorn if your startup fails it's\n100% because you didn't choose the right\nframework reminds me of one my dad made\nme choose which of my pet calves to\nslaughter with my own hands for for my\nsixth birthday now before we look at the\ncode let's first answer the question of\nwhat does a web framework actually do\nthere are three main things you should\nknow first they provide an abstraction\nover your relational database they\ntypically have a built-in object\nrelational mapper that can migrate code\nfrom your preferred programming language\ninto SQL code that can be used by the\ndatabase second they provide routing\nthat can map a URL in the browser to\ncode that you want to run on the server\nand third they provide a way to\ndynamically insert data from your\ndatabase directly into HTML for the UI\ntogether these three elements make up\nthe model view controller architecture\nor MVC which is by far the most common\napproach when building a full stack web\napp the first framework we'll look at is\nRuby on Rails made famous for building\nsome of the biggest companies in the\nworld like Shopify Airbnb and GitHub\nrails was revolutionary when it came out\nbecause it dramatically simplified web\ndevelopment compared to other approaches\nof the day it's still very popular in\n2022 and is kind of a rebel in the web\ndevelopment space it has adjacent\nlibraries like hot wire stimulus and\nturbo that take an HTML Centric approach\nto building web apps which goes against\nthe approach you might see in front in\nFrameworks like react angular and view\nto get started with rails you'll first\nneed to have Ruby installed then install\nthe rails Gem and run rails new I'm\ndeveloping this app on a fresh install\nof Debian Linux and I did run into some\nissues with the initial setup these were\nerrors that could easily be solved with\na Google search but the initial setup\nwas a little more error prone than other\nFrameworks once you get the project set\nup though the rail CLI is extremely\npowerful not only does it do things like\nserve the application with rail server\nbut but it can also generate a ton of\ncode for you automatically with commands\nlike scaffold now if we look in the file\nexplorer you'll notice a bunch of\ndifferent folders here and that's\nbecause rails is a batteries included\nframework it handles your relational\ndatabase testing logging and a bunch of\nother stuff it might look pretty\noverwhelming at first your main\napplication code is contained in the app\ndirectory where you'll find folders for\nmodels views and controllers the first\nthing we'll look at is routing in the\nroutes.rb file from this file we can map\nURLs to actions in a controller\nresources create all the routes we would\nneed need for a basic cred feature\nautomatically it's kind of magical but\nwhat it's actually doing is setting up a\nmapping between URLs in the browser and\ncontroller actions now when the user\nvisits a URL it will trigger one of\nthese actions on the server that action\nmight go and retrieve some data from\nyour database the logic for that data is\ncontained in the model but before we can\nuse the data in the database we need to\nrun a migration which will take the code\nin the model and sync it up with the\nactual database and all the data is\nmanaged with an object relational mapper\ncalled active record and then finally\nyou have a view which is an html.erb\nfile Erb stands for embedded Ruby and it\nallows you to render your data\ndynamically inside an HTML file overall\nthis provides a very nice separation of\nconcerns and rails is very opinionated\nwhich means you can achieve a lot of\nfunctionality with very little code the\nscaffold not only retrieves items from\nthe database but it also provides UI to\ncreate and update that data as well but\ntoo much magic can also be a bad thing\ndepending on who you ask and Ruby is not\nthe most popular language in the world\nbut python is what if there's way we\ncould build web apps like this with\npython and that's where D Jango comes in\nit's also extremely popular and has been\nused to build massive sites like Spotify\nand bit bucket when you generate a new\nJango app you'll notice the file\nstructure is far less overwhelming than\nrails but at the same time it's still\nvery much a batteries included framework\nin addition your code tends to be a lot\nmore explicit for example we have this\nmanage py file that contains the code\nfor the actual command line interface to\ngenerate things in the project we could\nuse it to serve the app locally or\ngenerate an app to represent a feature\nof the website it also follows the MBC\narchitecture with routes being defined\nin the urls.py file and controllers are\nrepresented as python functions in the\nviews.py file a route points to one of\nthese functions which itself might want\nto access data from one of our models a\nmodel is a python class that represents\nthe structure of data in an SQL database\naka the object relational mapper and\nfinally we have our HTML templates that\nallow you to embed python directly into\nthe code that's pretty cool but one\nextra superpower of D Jango is that it\nhas an admin feature built into it\ndirectly as you define models in your\napplication you can register them with\nthe admin app to easily manage all of\nyour data in the browser this is really\nuseful and not something that you'd want\nto roll out on your own Python's great\nand all but the original serers side\nlanguage of the web was PHP there have\nbeen countless PHP Frameworks over the\nyears and high Lev tools like WordPress\nbut the most popular one today is LEL\nthe PHP framework for web Artisans to\nuse it you'll first want to install PHP\nand a tool called compos Er When I\ngenerated my initial app it took a long\ntime and downloaded a lot of packages\nand as you can see the initial project\nhas a lot of batteries included even\nmore so than rails if we look at routes\nyou can see it not only handles web\nroutes but also API routes and channels\nfor real-time communication with\nwebsockets now if we go into the app\ncode you'll notice it's already been\nconfigured with things like user\nauthentication via providers a provider\nis like a shared service that you can\nuse anywhere in the application in the\nHTTP directory we will find our\ncontrollers and just like r s we have a\nclass that contains a bunch of different\nmethods that can access data and render\na specific template now our database\nmodels use a tool called eloquent omm\nwhich is based on the same active record\npattern as rails now when it comes to\nviews PHP is a language that's designed\nto work with HTML out of the box LL\nmakes it even easier by building on top\nof PHP with blade templates another cool\npoint about the ecosystem is that they\nput a lot of thought into how to\nintegrate front-end Frameworks like\nreact and view it has an adjacent tool\ncalled inertia that can bridge the gap\nbetween front-end and backend Frameworks\nthe next framework we'll look at is\nnextjs which allows us to build a full\nstack application entirely with\nJavaScript now in the JavaScript world\nthere's a million different options we\ncould have chosen here like njs angular\nUniversal spel kit nestjs Adonis and\nmany others maybe I'll make a top 10\nvideo Just For Those to get started with\nnext we run npx create next app and that\nwill generate a starter project now the\none thing you'll notice about next right\noff the bat is that it doesn't provide\nany integration for your database there\nare a million different solutions to\nchoose from but one of my personal\nfavorites is Prisma so I'm going to add\nPrisma to this project the fact that\nnextjs doesn't have a database out of\nthe box is a good thing in my opinion\nthe JavaScript ecosystem is just way too\ncrazy it's nice to start with a very\ngood minimal framework and then add\nwhatever database integration you want\non top of it now that we have a database\nintegrated let's take a look at the\nPage's directory one thing that's\ndifferent about next is that routing is\nhandled with the file system each file\ndefined in the Pages directory defines a\ndifferent URL in the browser Dynamic\nroutes can be created by wrapping the\nfile name in bracket now each one of\nthese files exports a react component to\ndefine the UI or view this is actually\nreally convenient because many other\nFrameworks will ultimately want to have\nsome kind of front-end framework having\nreact fundamentally integrated into the\nframework can streamline your\nproductivity big time now things get\nmore complex when you think about data\nfetching normally in a react app you're\nthinking about client side code but in\nnextjs you can also run server side code\nwith functions like get serers side\nprops this function will run on the\nserver with no JS and as you can see\ninside of it we're using Prisma to fetch\nsome items from the database these items\ncan then be delivered as props to the\nreact component where they're rendered\nin the UI both your server side and\nclient side code is tightly coupled\ntogether which may feel like a bad\nseparation of concerns but generally\nspeaking it actually works very well\noverall nextjs feels very minimal\ncompared to other Frameworks in this\nlist but it does a ton of stuff behind\nthe scenes to simplify the annoying\nparts of web development now speaking of\nsimple we're going to do the polar\nopposite and see what Java has to offer\neven though Java is a boiler play driven\nlanguage for writing instant Legacy code\nthe spring framework actually makes it\nvery enjoyable to work with the first\nthing you'll notice when building with\nit is that it's kind of like a create\nyour own adventure story it has a\ngenerator that allows you to start with\na framework and you can even use cotlin\nor groovy if you'd like then you choose\nall the different dependencies that you\nwant to add to this project now even\nthough Java does have a lot of boiler\nplate the code pretty much writes itself\nand in my opinion it feels a lot more\nrobust compared to the dynamic languages\nthat we've looked at so far you'll find\nthe source code way down in this deeply\nnested folder and it also follows the\nMBC pattern the controller is is a class\nand a route is defined using a decorator\non each one of its methods spring relies\non a lot of metaprogramming to keep your\ncode nice and simple it feels very much\nlike angular in the JavaScript world the\ndatabase models are based on code with\nthe Java persistence API then we can use\nthat data in templates using time Leaf\nwhere you add these attributes to your\nHTML to Define where your data should go\nto be honest though I didn't have a very\ngood time using time leaf and that\nbrings me to Java's arch nemesis C and\nThe NET Framework or asp.net it's an\nopen source project maintained by\nMicrosoft and obviously feels very\nMicrosoft but is extremely popular and\nreliable it's evolved very nicely over\nthe years and has modern supporting\nlibraries like Blazer that allow you to\nbuild client side apps using web\nassembly and C to use it install the net\nSDK then generate a new MVC application\nI really like the initial project\nstructure everything is clearly named\nand it's not too overwhelming and you\nget all the awesome tooling and static\ntyping like you do in Java when it comes\nto routing the URLs are inferred from\nthe class names in your controllers here\nwe have an animal controller which gives\nus the animals URL then we have methods\nin that class that then represent the\nnext URL segment the method can take an\nargument to create a dynamic URL to\nrepresent our data we have a model that\nis managed by an omm called The Entity\ncore framework and then finally we have\nour views which are written in CSH HTML\nat the top of one of these files you'll\nnotice a model where we can access our\ndata and we can also declare additional\ndata here in C like a title it's more\nverbose than other templating languages\nbut you get full intellisense inside of\nit which is really helpful over overall\nnet is really impressive the only real\ndrawback is that you have to sell your\nsoul to the big giant Tech Corporation\nif you want to take the righteous path\nanother awesome framework to check out\nis Phoenix which is based on the Elixir\nprogramming language it's a functional\nlanguage that feels much different than\nmost of the objectoriented languages\nthat we've looked at throughout the\nvideo Don't Worry a 100 second video is\ncoming soon install it then generate a\nnew project like Ruby on Rails it has a\nvery powerful CLI that can automatically\nscaffold an entire cred application for\nyou routing is also very similar to\nrails where we have sources that map all\nthe necessary cred URLs to the\ncontroller in the controller we have\nfunctions namespaced under a module that\naccess data and render the appropriate\ntemplate the model uses an object\nrelational mapper called Ecto and\ntemplates use embedded Elixir which\nagain feels very similar to rails\nhowever Phenix has a huge advantage in\nperformance because Elixir is a compiled\nlanguage as an added bonus every app has\na built-in live dashboard to closely\nmonitor performance and that brings us\nto another high performance framework\nworth checking out Jin which is powered\nby the go language it easily wins the\nbest logo award to get started we're not\ngoing to use a fancy CLI but instead\ncreate a go project from scratch Jin is\na minimal HTTP framework and is not\nconcerned with the model view controller\narchitecture we'll have to figure that\nout on our own it also doesn't contain\nan omm for the database so for that\nwe'll bring in another package called\ngorm the nice thing about this approach\nis that we don't really need to follow\nthe MVC conventions of a framework which\nis probably overkill for many\napplications instead we can write some\nvery focused functions and do things in\na way that makes sense for our our exact\nbusiness needs like in this app we just\nhave two routes that need to retrieve\nsome data from a database which itself\nis modeled with a struct using the or\nthen go has its own built-in templating\nlanguage so we can simply create a\ncouple of template files here in the\nproject and interpolate the values that\nwe retrieve from the database the end\nresult is a much smaller code base with\na lot more low-level control however as\nthis application grows bigger it's going\nto get harder and harder so you really\nkind of have to know what you're doing\nand that brings us to our next language\nrust and the web framework rocket as far\nas I know the rust ecosystem doesn't\nhave a full-blown MVC framework like\nrails and to be honest I found it very\ndifficult to build a basic application\nmy Approach was to use rocket for HTTP\nand routing then combine it with diesel\nwhich is a rust based omm and then\nfinally a templating language to use the\ndata in HTML called ascoma I think this\nis a reasonable approach but I didn't\nquite get to a full workking demo with\nrust it's a systems language that gives\nyou low-level control over memory which\nthe average web application developer\ndoesn't really need I quickly realized\nthat it would take more time and\ndedication than I'm willing to give for\nthe tail end of a silly YouTube video\nhowever there is one rust based library\nthat I want to bring to your attention\ncalled you it's a component based\nframework for building web apps with web\nassembly and it's coming to a fireship\ntutorial near you soon and that brings\nus to the final framework in this list\nVapor which is based on the Swift\nprogramming language this is the only\napp that I built on my Mac because I\nfound that anything with swift just\nworks better on a Mac it provides you\nwith a project structure that looks like\nthis it's well organized with\ncontrollers models and routes routes\npoint to methods in the controller which\ncan access data from a model it it uses\nan orm called fluent which uses classes\nalong with decorators to model your data\nSwift is a very well-designed language\nand I found it very enjoyable to work\nwith for stuff like this the code is\nconcise and readable yet statically\ntyped with awesome tooling like you\nwould get in Java or C I also like how\nit Embraces async of weight when\nfetching data from your models for\ntemplating it has an engine called Leaf\nwhich also felt very modern and\npractical now that we look at Vapor I\nwant to also mention Kor which is a\ncotlin based web application framework\nit's a lot more minimal than something\nlike spring but also something worth\nchecking out and with that we've looked\nat 10 full stack Frameworks now I'm\nready to show you the best full stack\nframework in the world you're looking at\nyour own reflection in the mirror yes it\nwas you all along without you the\nframework would be nothing actually no\nno that's that's just dumb Ruby on Rails\nis by far the best framework nothing\nelse even comes close it's like the\nmagic Jordan of web Frameworks thanks\nfor watching and I will see you in the\nnext one\n",
  "words": [
    "web",
    "app",
    "web",
    "app",
    "thing",
    "also",
    "web",
    "app",
    "dude",
    "built",
    "app",
    "10",
    "times",
    "10",
    "different",
    "frameworks",
    "using",
    "10",
    "different",
    "programming",
    "languages",
    "horrible",
    "experience",
    "learned",
    "lot",
    "figured",
    "full",
    "stack",
    "framework",
    "greatest",
    "time",
    "revealed",
    "dramatic",
    "fashion",
    "end",
    "video",
    "maximize",
    "watch",
    "time",
    "journey",
    "meet",
    "10",
    "different",
    "serers",
    "side",
    "frameworks",
    "like",
    "rails",
    "django",
    "laravel",
    "nextjs",
    "phoenix",
    "rocket",
    "jin",
    "vapor",
    "kor",
    "realize",
    "11",
    "need",
    "good",
    "math",
    "programmer",
    "video",
    "insanely",
    "difficult",
    "one",
    "frameworks",
    "uses",
    "different",
    "programming",
    "language",
    "one",
    "look",
    "overall",
    "developer",
    "experience",
    "including",
    "things",
    "like",
    "setup",
    "routing",
    "database",
    "integration",
    "overall",
    "architecture",
    "get",
    "started",
    "warning",
    "framework",
    "choose",
    "end",
    "video",
    "going",
    "dictate",
    "life",
    "next",
    "10",
    "years",
    "grow",
    "startup",
    "deca",
    "unicorn",
    "startup",
    "fails",
    "100",
    "choose",
    "right",
    "framework",
    "reminds",
    "one",
    "dad",
    "made",
    "choose",
    "pet",
    "calves",
    "slaughter",
    "hands",
    "sixth",
    "birthday",
    "look",
    "code",
    "let",
    "first",
    "answer",
    "question",
    "web",
    "framework",
    "actually",
    "three",
    "main",
    "things",
    "know",
    "first",
    "provide",
    "abstraction",
    "relational",
    "database",
    "typically",
    "object",
    "relational",
    "mapper",
    "migrate",
    "code",
    "preferred",
    "programming",
    "language",
    "sql",
    "code",
    "used",
    "database",
    "second",
    "provide",
    "routing",
    "map",
    "url",
    "browser",
    "code",
    "want",
    "run",
    "server",
    "third",
    "provide",
    "way",
    "dynamically",
    "insert",
    "data",
    "database",
    "directly",
    "html",
    "ui",
    "together",
    "three",
    "elements",
    "make",
    "model",
    "view",
    "controller",
    "architecture",
    "mvc",
    "far",
    "common",
    "approach",
    "building",
    "full",
    "stack",
    "web",
    "app",
    "first",
    "framework",
    "look",
    "ruby",
    "rails",
    "made",
    "famous",
    "building",
    "biggest",
    "companies",
    "world",
    "like",
    "shopify",
    "airbnb",
    "github",
    "rails",
    "revolutionary",
    "came",
    "dramatically",
    "simplified",
    "web",
    "development",
    "compared",
    "approaches",
    "day",
    "still",
    "popular",
    "2022",
    "kind",
    "rebel",
    "web",
    "development",
    "space",
    "adjacent",
    "libraries",
    "like",
    "hot",
    "wire",
    "stimulus",
    "turbo",
    "take",
    "html",
    "centric",
    "approach",
    "building",
    "web",
    "apps",
    "goes",
    "approach",
    "might",
    "see",
    "front",
    "frameworks",
    "like",
    "react",
    "angular",
    "view",
    "get",
    "started",
    "rails",
    "first",
    "need",
    "ruby",
    "installed",
    "install",
    "rails",
    "gem",
    "run",
    "rails",
    "new",
    "developing",
    "app",
    "fresh",
    "install",
    "debian",
    "linux",
    "run",
    "issues",
    "initial",
    "setup",
    "errors",
    "could",
    "easily",
    "solved",
    "google",
    "search",
    "initial",
    "setup",
    "little",
    "error",
    "prone",
    "frameworks",
    "get",
    "project",
    "set",
    "though",
    "rail",
    "cli",
    "extremely",
    "powerful",
    "things",
    "like",
    "serve",
    "application",
    "rail",
    "server",
    "also",
    "generate",
    "ton",
    "code",
    "automatically",
    "commands",
    "like",
    "scaffold",
    "look",
    "file",
    "explorer",
    "notice",
    "bunch",
    "different",
    "folders",
    "rails",
    "batteries",
    "included",
    "framework",
    "handles",
    "relational",
    "database",
    "testing",
    "logging",
    "bunch",
    "stuff",
    "might",
    "look",
    "pretty",
    "overwhelming",
    "first",
    "main",
    "application",
    "code",
    "contained",
    "app",
    "directory",
    "find",
    "folders",
    "models",
    "views",
    "controllers",
    "first",
    "thing",
    "look",
    "routing",
    "file",
    "file",
    "map",
    "urls",
    "actions",
    "controller",
    "resources",
    "create",
    "routes",
    "would",
    "need",
    "need",
    "basic",
    "cred",
    "feature",
    "automatically",
    "kind",
    "magical",
    "actually",
    "setting",
    "mapping",
    "urls",
    "browser",
    "controller",
    "actions",
    "user",
    "visits",
    "url",
    "trigger",
    "one",
    "actions",
    "server",
    "action",
    "might",
    "go",
    "retrieve",
    "data",
    "database",
    "logic",
    "data",
    "contained",
    "model",
    "use",
    "data",
    "database",
    "need",
    "run",
    "migration",
    "take",
    "code",
    "model",
    "sync",
    "actual",
    "database",
    "data",
    "managed",
    "object",
    "relational",
    "mapper",
    "called",
    "active",
    "record",
    "finally",
    "view",
    "file",
    "erb",
    "stands",
    "embedded",
    "ruby",
    "allows",
    "render",
    "data",
    "dynamically",
    "inside",
    "html",
    "file",
    "overall",
    "provides",
    "nice",
    "separation",
    "concerns",
    "rails",
    "opinionated",
    "means",
    "achieve",
    "lot",
    "functionality",
    "little",
    "code",
    "scaffold",
    "retrieves",
    "items",
    "database",
    "also",
    "provides",
    "ui",
    "create",
    "update",
    "data",
    "well",
    "much",
    "magic",
    "also",
    "bad",
    "thing",
    "depending",
    "ask",
    "ruby",
    "popular",
    "language",
    "world",
    "python",
    "way",
    "could",
    "build",
    "web",
    "apps",
    "like",
    "python",
    "jango",
    "comes",
    "also",
    "extremely",
    "popular",
    "used",
    "build",
    "massive",
    "sites",
    "like",
    "spotify",
    "bit",
    "bucket",
    "generate",
    "new",
    "jango",
    "app",
    "notice",
    "file",
    "structure",
    "far",
    "less",
    "overwhelming",
    "rails",
    "time",
    "still",
    "much",
    "batteries",
    "included",
    "framework",
    "addition",
    "code",
    "tends",
    "lot",
    "explicit",
    "example",
    "manage",
    "py",
    "file",
    "contains",
    "code",
    "actual",
    "command",
    "line",
    "interface",
    "generate",
    "things",
    "project",
    "could",
    "use",
    "serve",
    "app",
    "locally",
    "generate",
    "app",
    "represent",
    "feature",
    "website",
    "also",
    "follows",
    "mbc",
    "architecture",
    "routes",
    "defined",
    "file",
    "controllers",
    "represented",
    "python",
    "functions",
    "file",
    "route",
    "points",
    "one",
    "functions",
    "might",
    "want",
    "access",
    "data",
    "one",
    "models",
    "model",
    "python",
    "class",
    "represents",
    "structure",
    "data",
    "sql",
    "database",
    "aka",
    "object",
    "relational",
    "mapper",
    "finally",
    "html",
    "templates",
    "allow",
    "embed",
    "python",
    "directly",
    "code",
    "pretty",
    "cool",
    "one",
    "extra",
    "superpower",
    "jango",
    "admin",
    "feature",
    "built",
    "directly",
    "define",
    "models",
    "application",
    "register",
    "admin",
    "app",
    "easily",
    "manage",
    "data",
    "browser",
    "really",
    "useful",
    "something",
    "want",
    "roll",
    "python",
    "great",
    "original",
    "serers",
    "side",
    "language",
    "web",
    "php",
    "countless",
    "php",
    "frameworks",
    "years",
    "high",
    "lev",
    "tools",
    "like",
    "wordpress",
    "popular",
    "one",
    "today",
    "lel",
    "php",
    "framework",
    "web",
    "artisans",
    "use",
    "first",
    "want",
    "install",
    "php",
    "tool",
    "called",
    "compos",
    "er",
    "generated",
    "initial",
    "app",
    "took",
    "long",
    "time",
    "downloaded",
    "lot",
    "packages",
    "see",
    "initial",
    "project",
    "lot",
    "batteries",
    "included",
    "even",
    "rails",
    "look",
    "routes",
    "see",
    "handles",
    "web",
    "routes",
    "also",
    "api",
    "routes",
    "channels",
    "communication",
    "websockets",
    "go",
    "app",
    "code",
    "notice",
    "already",
    "configured",
    "things",
    "like",
    "user",
    "authentication",
    "via",
    "providers",
    "provider",
    "like",
    "shared",
    "service",
    "use",
    "anywhere",
    "application",
    "http",
    "directory",
    "find",
    "controllers",
    "like",
    "r",
    "class",
    "contains",
    "bunch",
    "different",
    "methods",
    "access",
    "data",
    "render",
    "specific",
    "template",
    "database",
    "models",
    "use",
    "tool",
    "called",
    "eloquent",
    "omm",
    "based",
    "active",
    "record",
    "pattern",
    "rails",
    "comes",
    "views",
    "php",
    "language",
    "designed",
    "work",
    "html",
    "box",
    "makes",
    "even",
    "easier",
    "building",
    "top",
    "php",
    "blade",
    "templates",
    "another",
    "cool",
    "point",
    "ecosystem",
    "put",
    "lot",
    "thought",
    "integrate",
    "frameworks",
    "like",
    "react",
    "view",
    "adjacent",
    "tool",
    "called",
    "inertia",
    "bridge",
    "gap",
    "backend",
    "frameworks",
    "next",
    "framework",
    "look",
    "nextjs",
    "allows",
    "us",
    "build",
    "full",
    "stack",
    "application",
    "entirely",
    "javascript",
    "javascript",
    "world",
    "million",
    "different",
    "options",
    "could",
    "chosen",
    "like",
    "njs",
    "angular",
    "universal",
    "spel",
    "kit",
    "nestjs",
    "adonis",
    "many",
    "others",
    "maybe",
    "make",
    "top",
    "10",
    "video",
    "get",
    "started",
    "next",
    "run",
    "npx",
    "create",
    "next",
    "app",
    "generate",
    "starter",
    "project",
    "one",
    "thing",
    "notice",
    "next",
    "right",
    "bat",
    "provide",
    "integration",
    "database",
    "million",
    "different",
    "solutions",
    "choose",
    "one",
    "personal",
    "favorites",
    "prisma",
    "going",
    "add",
    "prisma",
    "project",
    "fact",
    "nextjs",
    "database",
    "box",
    "good",
    "thing",
    "opinion",
    "javascript",
    "ecosystem",
    "way",
    "crazy",
    "nice",
    "start",
    "good",
    "minimal",
    "framework",
    "add",
    "whatever",
    "database",
    "integration",
    "want",
    "top",
    "database",
    "integrated",
    "let",
    "take",
    "look",
    "page",
    "directory",
    "one",
    "thing",
    "different",
    "next",
    "routing",
    "handled",
    "file",
    "system",
    "file",
    "defined",
    "pages",
    "directory",
    "defines",
    "different",
    "url",
    "browser",
    "dynamic",
    "routes",
    "created",
    "wrapping",
    "file",
    "name",
    "bracket",
    "one",
    "files",
    "exports",
    "react",
    "component",
    "define",
    "ui",
    "view",
    "actually",
    "really",
    "convenient",
    "many",
    "frameworks",
    "ultimately",
    "want",
    "kind",
    "framework",
    "react",
    "fundamentally",
    "integrated",
    "framework",
    "streamline",
    "productivity",
    "big",
    "time",
    "things",
    "get",
    "complex",
    "think",
    "data",
    "fetching",
    "normally",
    "react",
    "app",
    "thinking",
    "client",
    "side",
    "code",
    "nextjs",
    "also",
    "run",
    "server",
    "side",
    "code",
    "functions",
    "like",
    "get",
    "serers",
    "side",
    "props",
    "function",
    "run",
    "server",
    "js",
    "see",
    "inside",
    "using",
    "prisma",
    "fetch",
    "items",
    "database",
    "items",
    "delivered",
    "props",
    "react",
    "component",
    "rendered",
    "ui",
    "server",
    "side",
    "client",
    "side",
    "code",
    "tightly",
    "coupled",
    "together",
    "may",
    "feel",
    "like",
    "bad",
    "separation",
    "concerns",
    "generally",
    "speaking",
    "actually",
    "works",
    "well",
    "overall",
    "nextjs",
    "feels",
    "minimal",
    "compared",
    "frameworks",
    "list",
    "ton",
    "stuff",
    "behind",
    "scenes",
    "simplify",
    "annoying",
    "parts",
    "web",
    "development",
    "speaking",
    "simple",
    "going",
    "polar",
    "opposite",
    "see",
    "java",
    "offer",
    "even",
    "though",
    "java",
    "boiler",
    "play",
    "driven",
    "language",
    "writing",
    "instant",
    "legacy",
    "code",
    "spring",
    "framework",
    "actually",
    "makes",
    "enjoyable",
    "work",
    "first",
    "thing",
    "notice",
    "building",
    "kind",
    "like",
    "create",
    "adventure",
    "story",
    "generator",
    "allows",
    "start",
    "framework",
    "even",
    "use",
    "cotlin",
    "groovy",
    "like",
    "choose",
    "different",
    "dependencies",
    "want",
    "add",
    "project",
    "even",
    "though",
    "java",
    "lot",
    "boiler",
    "plate",
    "code",
    "pretty",
    "much",
    "writes",
    "opinion",
    "feels",
    "lot",
    "robust",
    "compared",
    "dynamic",
    "languages",
    "looked",
    "far",
    "find",
    "source",
    "code",
    "way",
    "deeply",
    "nested",
    "folder",
    "also",
    "follows",
    "mbc",
    "pattern",
    "controller",
    "class",
    "route",
    "defined",
    "using",
    "decorator",
    "one",
    "methods",
    "spring",
    "relies",
    "lot",
    "metaprogramming",
    "keep",
    "code",
    "nice",
    "simple",
    "feels",
    "much",
    "like",
    "angular",
    "javascript",
    "world",
    "database",
    "models",
    "based",
    "code",
    "java",
    "persistence",
    "api",
    "use",
    "data",
    "templates",
    "using",
    "time",
    "leaf",
    "add",
    "attributes",
    "html",
    "define",
    "data",
    "go",
    "honest",
    "though",
    "good",
    "time",
    "using",
    "time",
    "leaf",
    "brings",
    "java",
    "arch",
    "nemesis",
    "c",
    "net",
    "framework",
    "open",
    "source",
    "project",
    "maintained",
    "microsoft",
    "obviously",
    "feels",
    "microsoft",
    "extremely",
    "popular",
    "reliable",
    "evolved",
    "nicely",
    "years",
    "modern",
    "supporting",
    "libraries",
    "like",
    "blazer",
    "allow",
    "build",
    "client",
    "side",
    "apps",
    "using",
    "web",
    "assembly",
    "c",
    "use",
    "install",
    "net",
    "sdk",
    "generate",
    "new",
    "mvc",
    "application",
    "really",
    "like",
    "initial",
    "project",
    "structure",
    "everything",
    "clearly",
    "named",
    "overwhelming",
    "get",
    "awesome",
    "tooling",
    "static",
    "typing",
    "like",
    "java",
    "comes",
    "routing",
    "urls",
    "inferred",
    "class",
    "names",
    "controllers",
    "animal",
    "controller",
    "gives",
    "us",
    "animals",
    "url",
    "methods",
    "class",
    "represent",
    "next",
    "url",
    "segment",
    "method",
    "take",
    "argument",
    "create",
    "dynamic",
    "url",
    "represent",
    "data",
    "model",
    "managed",
    "omm",
    "called",
    "entity",
    "core",
    "framework",
    "finally",
    "views",
    "written",
    "csh",
    "html",
    "top",
    "one",
    "files",
    "notice",
    "model",
    "access",
    "data",
    "also",
    "declare",
    "additional",
    "data",
    "c",
    "like",
    "title",
    "verbose",
    "templating",
    "languages",
    "get",
    "full",
    "intellisense",
    "inside",
    "really",
    "helpful",
    "overall",
    "net",
    "really",
    "impressive",
    "real",
    "drawback",
    "sell",
    "soul",
    "big",
    "giant",
    "tech",
    "corporation",
    "want",
    "take",
    "righteous",
    "path",
    "another",
    "awesome",
    "framework",
    "check",
    "phoenix",
    "based",
    "elixir",
    "programming",
    "language",
    "functional",
    "language",
    "feels",
    "much",
    "different",
    "objectoriented",
    "languages",
    "looked",
    "throughout",
    "video",
    "worry",
    "100",
    "second",
    "video",
    "coming",
    "soon",
    "install",
    "generate",
    "new",
    "project",
    "like",
    "ruby",
    "rails",
    "powerful",
    "cli",
    "automatically",
    "scaffold",
    "entire",
    "cred",
    "application",
    "routing",
    "also",
    "similar",
    "rails",
    "sources",
    "map",
    "necessary",
    "cred",
    "urls",
    "controller",
    "controller",
    "functions",
    "namespaced",
    "module",
    "access",
    "data",
    "render",
    "appropriate",
    "template",
    "model",
    "uses",
    "object",
    "relational",
    "mapper",
    "called",
    "ecto",
    "templates",
    "use",
    "embedded",
    "elixir",
    "feels",
    "similar",
    "rails",
    "however",
    "phenix",
    "huge",
    "advantage",
    "performance",
    "elixir",
    "compiled",
    "language",
    "added",
    "bonus",
    "every",
    "app",
    "live",
    "dashboard",
    "closely",
    "monitor",
    "performance",
    "brings",
    "us",
    "another",
    "high",
    "performance",
    "framework",
    "worth",
    "checking",
    "jin",
    "powered",
    "go",
    "language",
    "easily",
    "wins",
    "best",
    "logo",
    "award",
    "get",
    "started",
    "going",
    "use",
    "fancy",
    "cli",
    "instead",
    "create",
    "go",
    "project",
    "scratch",
    "jin",
    "minimal",
    "http",
    "framework",
    "concerned",
    "model",
    "view",
    "controller",
    "architecture",
    "figure",
    "also",
    "contain",
    "omm",
    "database",
    "bring",
    "another",
    "package",
    "called",
    "gorm",
    "nice",
    "thing",
    "approach",
    "really",
    "need",
    "follow",
    "mvc",
    "conventions",
    "framework",
    "probably",
    "overkill",
    "many",
    "applications",
    "instead",
    "write",
    "focused",
    "functions",
    "things",
    "way",
    "makes",
    "sense",
    "exact",
    "business",
    "needs",
    "like",
    "app",
    "two",
    "routes",
    "need",
    "retrieve",
    "data",
    "database",
    "modeled",
    "struct",
    "using",
    "go",
    "templating",
    "language",
    "simply",
    "create",
    "couple",
    "template",
    "files",
    "project",
    "interpolate",
    "values",
    "retrieve",
    "database",
    "end",
    "result",
    "much",
    "smaller",
    "code",
    "base",
    "lot",
    "control",
    "however",
    "application",
    "grows",
    "bigger",
    "going",
    "get",
    "harder",
    "harder",
    "really",
    "kind",
    "know",
    "brings",
    "us",
    "next",
    "language",
    "rust",
    "web",
    "framework",
    "rocket",
    "far",
    "know",
    "rust",
    "ecosystem",
    "mvc",
    "framework",
    "like",
    "rails",
    "honest",
    "found",
    "difficult",
    "build",
    "basic",
    "application",
    "approach",
    "use",
    "rocket",
    "http",
    "routing",
    "combine",
    "diesel",
    "rust",
    "based",
    "omm",
    "finally",
    "templating",
    "language",
    "use",
    "data",
    "html",
    "called",
    "ascoma",
    "think",
    "reasonable",
    "approach",
    "quite",
    "get",
    "full",
    "workking",
    "demo",
    "rust",
    "systems",
    "language",
    "gives",
    "control",
    "memory",
    "average",
    "web",
    "application",
    "developer",
    "really",
    "need",
    "quickly",
    "realized",
    "would",
    "take",
    "time",
    "dedication",
    "willing",
    "give",
    "tail",
    "end",
    "silly",
    "youtube",
    "video",
    "however",
    "one",
    "rust",
    "based",
    "library",
    "want",
    "bring",
    "attention",
    "called",
    "component",
    "based",
    "framework",
    "building",
    "web",
    "apps",
    "web",
    "assembly",
    "coming",
    "fireship",
    "tutorial",
    "near",
    "soon",
    "brings",
    "us",
    "final",
    "framework",
    "list",
    "vapor",
    "based",
    "swift",
    "programming",
    "language",
    "app",
    "built",
    "mac",
    "found",
    "anything",
    "swift",
    "works",
    "better",
    "mac",
    "provides",
    "project",
    "structure",
    "looks",
    "like",
    "well",
    "organized",
    "controllers",
    "models",
    "routes",
    "routes",
    "point",
    "methods",
    "controller",
    "access",
    "data",
    "model",
    "uses",
    "orm",
    "called",
    "fluent",
    "uses",
    "classes",
    "along",
    "decorators",
    "model",
    "data",
    "swift",
    "language",
    "found",
    "enjoyable",
    "work",
    "stuff",
    "like",
    "code",
    "concise",
    "readable",
    "yet",
    "statically",
    "typed",
    "awesome",
    "tooling",
    "like",
    "would",
    "get",
    "java",
    "c",
    "also",
    "like",
    "embraces",
    "async",
    "weight",
    "fetching",
    "data",
    "models",
    "templating",
    "engine",
    "called",
    "leaf",
    "also",
    "felt",
    "modern",
    "practical",
    "look",
    "vapor",
    "want",
    "also",
    "mention",
    "kor",
    "cotlin",
    "based",
    "web",
    "application",
    "framework",
    "lot",
    "minimal",
    "something",
    "like",
    "spring",
    "also",
    "something",
    "worth",
    "checking",
    "looked",
    "10",
    "full",
    "stack",
    "frameworks",
    "ready",
    "show",
    "best",
    "full",
    "stack",
    "framework",
    "world",
    "looking",
    "reflection",
    "mirror",
    "yes",
    "along",
    "without",
    "framework",
    "would",
    "nothing",
    "actually",
    "dumb",
    "ruby",
    "rails",
    "far",
    "best",
    "framework",
    "nothing",
    "else",
    "even",
    "comes",
    "close",
    "like",
    "magic",
    "jordan",
    "web",
    "frameworks",
    "thanks",
    "watching",
    "see",
    "next",
    "one"
  ],
  "keywords": [
    "web",
    "app",
    "thing",
    "also",
    "built",
    "10",
    "different",
    "frameworks",
    "using",
    "programming",
    "languages",
    "lot",
    "full",
    "stack",
    "framework",
    "time",
    "end",
    "video",
    "serers",
    "side",
    "like",
    "rails",
    "nextjs",
    "rocket",
    "jin",
    "vapor",
    "need",
    "good",
    "one",
    "uses",
    "language",
    "look",
    "overall",
    "things",
    "setup",
    "routing",
    "database",
    "integration",
    "architecture",
    "get",
    "started",
    "choose",
    "going",
    "next",
    "years",
    "code",
    "first",
    "actually",
    "know",
    "provide",
    "relational",
    "object",
    "mapper",
    "map",
    "url",
    "browser",
    "want",
    "run",
    "server",
    "way",
    "data",
    "directly",
    "html",
    "ui",
    "model",
    "view",
    "controller",
    "mvc",
    "far",
    "approach",
    "building",
    "ruby",
    "world",
    "development",
    "compared",
    "popular",
    "kind",
    "take",
    "apps",
    "might",
    "see",
    "react",
    "angular",
    "install",
    "new",
    "initial",
    "could",
    "easily",
    "project",
    "though",
    "cli",
    "extremely",
    "application",
    "generate",
    "automatically",
    "scaffold",
    "file",
    "notice",
    "bunch",
    "batteries",
    "included",
    "stuff",
    "pretty",
    "overwhelming",
    "directory",
    "find",
    "models",
    "views",
    "controllers",
    "urls",
    "actions",
    "create",
    "routes",
    "would",
    "cred",
    "feature",
    "go",
    "retrieve",
    "use",
    "called",
    "finally",
    "allows",
    "render",
    "inside",
    "provides",
    "nice",
    "items",
    "well",
    "much",
    "python",
    "build",
    "jango",
    "comes",
    "structure",
    "represent",
    "defined",
    "functions",
    "access",
    "class",
    "templates",
    "define",
    "really",
    "something",
    "php",
    "tool",
    "even",
    "http",
    "methods",
    "template",
    "omm",
    "based",
    "work",
    "makes",
    "top",
    "another",
    "ecosystem",
    "us",
    "javascript",
    "many",
    "prisma",
    "add",
    "minimal",
    "dynamic",
    "files",
    "component",
    "client",
    "feels",
    "java",
    "spring",
    "looked",
    "leaf",
    "brings",
    "c",
    "net",
    "awesome",
    "templating",
    "elixir",
    "however",
    "performance",
    "best",
    "rust",
    "found",
    "swift"
  ]
}