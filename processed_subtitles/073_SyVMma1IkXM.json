{
  "text": "hi guys welcome to this complete\nblockchain tutorial by simply learn my\nname is sandeep and in the next few\nhours we'll be teaching you everything\nyou need to know about blockchain\nguiding you on this learning journey is\nsaurav our industry expert with over\nfive years of experience in the field of\nblockchain bitcoin and other\ncryptocurrencies\nfirst off we'll go through a short\nanimated introduction to blockchain\nfollowed by a tutorial on how blockchain\nworks\nwe'll then teach you about what a\ncryptocurrency is and the different\ntypes of cryptocurrencies in the market\navailable to you\nnext we'll teach you about ethereum and\nhow smart contracts work then you will\nlearn about the process of bitcoin\nmining and how bitcoin wallets work\nafter that we look into how ethereum and\nbitcoin are different from each other\nthen we will tell you about the five\nindustries blockchain will disrupt\nfollowed by 10 things you probably\ndidn't know about bitcoin\nwe will then talk about some of the\npopular applications of blockchain and\nhow you can become a blockchain\ndeveloper and finally we have handpicked\n30 of the most important questions you\nmight face in a blockchain interview\nbefore we begin make sure to subscribe\nto our channel and click on the bell\nicon to never miss an update from simply\nlearn with that out of the way let's\nlook at our animated video ever wonder\nif there's an easier way to complete\ntransactions without having to deal with\nonline wallets banks and third-party\napplications well it's possible thanks\nto blockchain here's everything you need\nto know about blockchain imagine four\nfriends jack ted sam and phil meet up\nfor dinner after they're done jack pays\nthe bill and all of them decide to split\nthe expense amongst each other now on\nthe next day when phil sends his share\nto jack via online money transfer the\ntransaction goes through without a hitch\nthen ted and sam send their respective\nshares to jack but their transactions\ndon't go through the failed transaction\ncites some issues at the bank that's\nwhen jack comes to know about the many\nways a bank transaction could fail it\ncould be due to technical issues at the\nbank one of their accounts were hacked\ndaily transfer limits being exceeded and\nsometimes additional charges like\ntransfer charges associated with\ntransferring money to solve these\nproblems the concept of cryptocurrency\ncame into existence cryptocurrencies are\na form of digital or virtual currency\nthat run on a technology known as\nblockchain thanks to blockchain\ncryptocurrencies are immune to\ncounterfeiting don't require a central\nauthority and are protected by strong\nand complex encryption algorithms and in\na market of more than thousands of\ncryptocurrencies like litecoin ethereum\nc cash and so on one reign supreme\nbitcoin now let's go back to our\nprevious example and have phil ted and\nsam send jack two bitcoins each as their\ncontribution to the previous night's\ndinner let's assume phil ted and sam\nhave three bitcoins in reserve while\njack has five first phil sends two\nbitcoins to jack a record is created in\nthe form of a block the transaction\ndetails between them is permanently\ninscribed in this block this record also\nholds the number of bitcoins each of the\nfriends own so after phil's transaction\njack has seven bitcoins while phil has\none following this sam and ted send two\nbitcoins to jack a new block is created\nfor each of these transactions these\nblocks hold the transaction details as\nwell as how many bitcoins sam ted and\njack have in reserve these blocks are\nlinked to each other as each of them\ntakes reference from the previous one\nfor the number of bitcoins each brand\nowns this chain of records or blocks is\ncalled a ledger and this ledger is\nshared among all the friends which acts\nas a public distributed ledger this\nforms the basis of blockchain so what\nhappens when phil has only one bitcoin\nleft and he tries to send two more\nbitcoins to jack the transaction will\nnot go through this is because all his\nfriends have copies of the ledger and\nit's clear that phil has only one\nbitcoin left his friends will flag this\ntransaction as invalid a hacker will not\nbe able to alter the data in the\nblockchain because each user has a copy\nof the ledger the data within the blocks\nare encrypted by complex algorithms all\nof this is made possible with the help\nof blockchain technology blockchain can\nbe described as a collection of records\nlinked with each other strongly\nresistant to alteration and protected\nusing cryptography now let's have a\ncloser look at the bitcoin transaction\nbetween jack and phil and find out how\nit works every user in the bitcoin\nnetwork has two keys a public key and a\nprivate key the public key is an address\nthat everyone in the network knows of\nlike an email address of a user the\nprivate key is a unique address that\nonly the user has knowledge of something\nlike a password first phil passes the\nnumber of bitcoins he wants to send to\njack along with his and jack's unique\nwallet address through a hashing\nalgorithm all of this is part of the\ntransaction details these details are\nencrypted using encryption algorithms\nand using phil's unique private key this\nis done to digitally sign the\ntransaction and to indicate that the\ntransactions came from fill this output\nis now transmitted across the world\nusing jack's public key with this the\nmessage or transaction can be decrypted\nonly by jack's private key which only\njack has knowledge of different\ncryptocurrencies use different hashing\nalgorithms while bitcoin uses the\nsha-256 algorithm ethereum which is also\na famous cryptocurrency uses one known\nas ethash\nthis transaction and several other\nsimilar ones are taking place all around\nthe world these transactions are\nvalidated and then added block by block\nthe people who validate these blocks are\ncalled miners\nfor a block to be validated and added to\na blockchain miners need to solve a\ncomplex mathematical problem the miner\nwho solves this first adds the block to\nthe blockchain and is rewarded with 12.5\nbitcoins the process of solving the\ncomplex mathematical problem is called\nproof of work and the process of adding\na block to the blockchain is called\nmining\nwith this phil and jack's wallets are\nupdated just like every person in the\nnetwork who has completed a transaction\nnow that you know about blockchain and\nits important concepts time for a small\nquiz what is the concept of blockchain\nthat ensures data cannot be altered by\nany of the users within the network a\npublic distributed ledger b\nproof of work\nc\nproof of stake d\nhash encryption let us know what you\nthink is the right answer in the\ncomments below i'm hoping you guys\nenjoyed this\nnow we have saurabh to tell us about\nblockchain hello everyone and welcome to\nthis session of blockchain my name is\nsaurabh and i'm part of the simply learn\nteam so let's get started so what's in\nit for you today we are here to\nunderstand the concepts of why do we\nneed blockchain what is bitcoin and\nblockchain how does blockchain work\nconcepts around blockchain like sha-256\nencryption public and private key\ndistributed public ledger concept the\nproof of work and mining then we will\nalso look at different applications of\nblockchain in different industries who\nuses blockchain and a demo now why we\nneed blockchain imagine there are two\nentities a and b living far away and\nwant to transfer money to each other one\nis in america and one is in asia as of\ntoday in order to transfer the money\nthey rely on a third party on which they\nhave to trust now what are the possible\nresults by doing this way any\ntransaction there are high transaction\nfees associated with it there could be\nproblem of double spending there could\nbe internet based frauds and poor data\nrecovery now let's see what does all\nthese means high transaction fee for any\ntransaction bank will charge a\nrelatively very high amount of\ntransaction free as compared to what as\nof today cryptocurrency charges double\nspending double spending is a digital\nerror where money can be spent twice\nfrom your account so for example if you\nhave eight hundred dollars in your\naccount and you might end up spending\nthousand dollars which is an invalid\ntransaction hackers might attack\nfinancial institutions and gain\nunauthorized access to steal your money\npoor data recovery retrieving lost data\nis very difficult in a centralized\nsystem as there is only a single copy of\ninformation but as compared to the\ndistributed databases the distributed\nledger technology like blockchain it is\neasy as the information is distributed\nacross multiple nodes now these problems\ncan be solved using bitcoin and\nblockchain technology and we will see\nhow so let's first understand what is\nbitcoin and blockchain bitcoin bitcoin\nis a digital currency which is used to\nsend and receive money across the world\nit is a barrier-free currency in a\ndecentralized manner with minimum\ntransfer fee or we can say it's gonna be\nrelatively very very less as compared to\nwhat bank charges it doesn't involve a\nthird party no intermediate reason\ninvolved thereby reducing the cost of\ntransaction fast and cheap transfer is\npossible personal information identity\nof a user is hidden and all the\ntransactions are cryptographically\nsecure as they are being signed using\nyour private key bitcoin does this by\nstoring and transacting the money over a\ndistributed peer-to-peer network called\nblockchain so therefore it becomes very\nimportant for us in order to understand\nif how bitcoin works we also need to\nunderstand what is blockchain because\nthat is the underlying technology so\nwhat is blockchain blockchain is a\ndistributed database of immutable\nrecords called blocks which are secured\nusing cryptography now here we can see\nonce the data is recorded it cannot be\nchanged it cannot be altered and that is\nthe attribute of immutability of\nblockchain a block is a record book\nwhich contains the details of\ntransactional data every block is given\nan aggregated set of transactions to be\nvalidated verified and added to itself\nso basically a block consists of four\nprimary details which we will take a\nlook at it contains the hash of a\nprevious block it contains an aggregated\nlist of transactions it also contains\nthe value of nonce and the hash for the\nblock itself which itself is like a\ndigital signature of the block so hash\nof previous block it holds the hash\nvalue of the previous block to which it\nis connected contains details of several\ntransactions which are aggregated in\nthis block nonce nonce is a random\nnumber a random value which is generated\nto derive a hash value which should be\nless than the target decided for the\nblock and hash is alphanumeric value\nwhich is used to identify the block\nitself and it is unique now let's deep\ndive into blockchain blockchain creates\na chain of blocks as we can see here in\na blockchain the previous hash value of\na block is always equal to the hash\nvalue of its previous block so as we can\nsee here the previous hash value of\nblock number two is 23a which is the\nhash value of block one also the\nprevious hash value of block one is zero\nbecause it is the first block in the\nblockchain and it is called the genesis\nblock so the first block is called the\ngenesis block and does not have any\nprevious hash value so consider an\nexample now where a person tries to\ntamper the block block number two then\nhe will try to change the hash of block\nnumber 2 will change thereby the\nprevious hash value of block number 3\nnow does not stand valid now the hash\nvalue of block 2 and block 3 does not\nmatch which will make the following\nblocks the blocks ahead of block number\ntwo invalid now this particular feature\nof blockchain helps us eliminate data\ntampering now let's see how does\nblockchain work jack wants to send money\nto elsa the requested transaction of\njack wanting to send money to elsa will\nbe sent to all the peer nodes on the\nnetwork of computers now the transaction\nsent to nodes is verify by a set of\npeople or a typical set of nodes called\nminers once verified the transaction is\ncombined with other transactions to\ncreate a new block in the blockchain and\nas a result the receiving party elsa\nreceives the amount in blockchain a\ntransaction could be for a\ncryptocurrency for data or any kind of\nasset so the transaction can be for any\ndigital asset which holds value on the\nnetwork now let's take a look at what\nare the typical features of blockchain\nthese are typical features of blockchain\nit involves sha-256 algorithm-based\nencryption proof-of-work consensus\nalgorithm usage of public and private\nkey in order to sign the messages on the\nnetwork the role of miners in order to\nvalidate and verify the transactions and\nhow to create a now a distributed public\nledger now what is sha 256 encryption\nfor a transaction blockchain uses\ncryptographic keys to secure identities\nand hash function to make the blockchain\nunalterable so cryptographic keys\nincludes two kind of keys private and\npublic key and it uses a hash function\nwhich includes sha-256 now\nsha-256 stands for the number of bit it\ntakes up in memory secure hashing\nalgorithm now hash function takes an\ninput data and always return an alpha\nnumeric output of 64 characters which is\n256 bits so as you can see over here if\nyou feed any data like we are here\nfeeding an example of welcome to simply\nlearn the hashing function will return\nyou 256 bit value and now that hash\nvalue is unique the value returned by a\nhash function is called hash value it is\nimpossible to decode the original\nmessage using the hash value itself so\nhash value does not discloses the\noriginal message in the hash function a\nminor change in the input data will\nresult in a different hash value and\nthat is the unique feature of the\nhashing function you make a small change\nand the hashing value will change all\ntogether completely now sha-256\nis a one-way function you give an input\npass it through the hashing function you\nget the output but the reverse is not\npossible so in simple terms decrypting\nback the original text is not possible\nusing sha-256 which makes it very very\nsecure now cryptography uses public and\nprivate trees to encrypt and decrypt\ndata but a private key is always kept\nsecret with the user so if i have to\nsend a message to someone i will sign it\nwith my private key which is secret to\nme but i'll share my public key in order\nfor users to decrypt the message and\nvalidate that yes the sender of the\nmessage is me so in the blockchain\nnetwork public key can be shared with\nall the bitcoin users in order to do the\ntransaction so let's take a look what is\nthe entire verification process so when\nyou initiate a transaction it is passed\nthrough a hashing function which in our\ncase is sha-256 the output is passed\nthrough a signature algorithm with the\nuser's private key again and then we\nreceive a digitally signed document so\nthe hashing output plus my private key\nis used to generate a digitally signed\ndocument which is then floated on the\nnetwork with my public key then the\nencrypted output is distributed to the\nbitcoin network using the public key so\nthe digitally signed document and the\npublic key is used by the miners to\nverify the transaction and once that is\ndone they include the transaction on the\nblock and the transaction is then marked\nas completed so what is distributed\npublic ledger a blockchain is a\ndistributed ledger in which the digital\ndata is recorded and verified by each\nnode for preventing tempering of data so\nif you can see over here we have a\nnetwork of nodes amongst these nodes few\nmight be the miners who are taking the\nresponsibility of verifying and\nvalidating the transactions on each\nblock and in view of that verification\nthey will be rewarded so we will see\nwhen we will be talking about mining so\nlet's take an example over here jack is\nsending 10 btc to el elsa now which is\nverified by john in the network john is\nthe miner now once the transaction is\nverified by john the result is being\nbroadcasted is transferred to other\nnodes as a result the block becomes\nvalid and gets added to the blockchain\nand once it is transferred to other\nnodes the ledger of each node records\nthis transaction\nand all the ledgers now have the same\ninformation on the network to note only\na valid transaction is propagated across\nthe bitcoin users while if any invalid\ntransaction is identified it is\ndiscarded at the first node itself which\nreceived it now what if any user tries\nto tamper the data every user in the\nblockchain maintains a copy of the\nledger so as i said once the\ntransactions are verified they are\ndistributed across the nodes all the\nledgers are updated now if someone goes\nback in the blockchain and tries to\ntamper the data in one of the blocks the\nother nodes will be able to identify the\ninvalid block and will discard it so if\nanyone tries to modify the data the\nalternate transaction copies with other\nusers will negate the alteration now\nlet's take a look at the proof of work\nalgorithm proof of work is a consensus\nalgorithm which is used in the bitcoin\nnetwork it is the process to determine a\nnumber called as nonce along with the\ncryptographic hashing algorithm to\nproduce a hash value lower than the\npredefined target for the block so if\nyou see over here the miners main task\nis to identify the nonce which is the\nrandom number in order to generate the\nhash value which is less than the target\nnow generally the target is something\nlike the hash value should have leading\nzeroes like here in the example we can\nsee it is having leading zeros of two\nleading zeros so in order to generate a\nhash value with leading zeros like two\nor three it takes huge amount of\ncomputing power for the miners to\ndetermine that so in order to determine\nthe nouns the miners need to try about\n20.6 quadrillion nouns values to get a\none valid hash now how it works\ntransaction data is distributed across\nthe users of bitcoin network miners will\nvalidate the unverified transactions add\nthem to the block that is their task to\ndo so miners compete to solve a\ndifficult mathematical puzzle which is\nthe generation of the nonce value based\non cryptographic hashing function and\nthis whole process is known as proof of\nwork the first miner who solves the\npuzzle gets rewarded and this is the\npurpose for which the miner has made the\ninvestment in the hardware in the\ncomputing power the energy which the\nmining machine is consuming in order to\nget the reward once the miner has\nverified the block it is added to the\nblockchain now let's take a look at the\nprocess using the sha-256\nyou generate a hash value use nonce as\nan input to the hashing function if the\nhash value is less than the target no\nthen you modify the nonce value you\nrepeat this activity if it is less than\nthe target value yes then you are deemed\nto get the reward your puzzle is solved\nnote in the bitcoin network the target\nis adjusted every two 2016 blocks so as\ni mentioned the target of having leading\nthree zeros or having leading four zeros\nthat is revised after every two zero one\nsix blocks on an average a block is\nmined every 10 minutes the difficulty of\nthe puzzle is maintained in such a way\nthat it never deviates too much from the\naverage time taken to minor block now\ncandidate block proof of work so let's\nconsider an example where a miner jack\nis competing to validate the block\nnumber thousand now while jack was\nmining block number thousand he was also\nlistening for new transactions so in the\ntransaction pool the transaction are\nstored they are basically parked until\nthey get verified and gets included in a\nnew block now unfortunately before jack\ncould bind thousands someone else mined\nit and earned the reward now block\nthousand has a valid proof of work now\nit is a verified block so now jack will\nstart constructing a candidate block\nwhich will be on the subsequent block\nsequential 1001 by gathering the\nunverified transaction now from the\ntransaction pool so jack has now started\ncreating a candidate block pulling the\ntransactions from the transaction pool\ninto block number 1001 the current block\nnow is the candidate block because it\nhas not been validated and does not have\nany proof of work yet this block 1001\ngets validated once any miner succeeds\nin solving the proof of work it could be\njack or it could be again someone else\ncompeting mining in blockchain when the\ntransaction contained are considered\nconfirmed a new block is added to the\nexisting blockchain and the bitcoins\nconcerned in the transaction now can be\nspent now as of today the miner who\nsolves a puzzle gets a reward of 12.5\nbitcoins the amount of bitcoin rewarded\nfor each block added to the blockchain\nis half for every 2 lakh 10 000 blocks\nwhich is approximately every four year\nso this is called the huffing concept of\nbitcoin so approximately whenever the\nfour-year threshold will be reached the\nreward will get reduced to 6.25 bitcoins\nnow let's take a look of applications of\nblockchain in different industries\nvoting blockchain is a is a very\ntrustworthy mechanism which has\nincreased transparency in the voting\nprocess supply chain uses the attributes\nof blockchain of provenance and\ntraceability to detect to identify and\ntrace the supply of any asset from its\npoint of origin to its final destination\nand if in due course any defect is\ndetected it can easily identify where in\nthe journey of the asset the defect was\ngenerated insurance has a huge adoption\nthey are utilizing blockchain for\neliminating forgery and preventing false\nclaims as all the records and\ntransactions will be maintained in\nblockchain immutable ledger it will be\nvery difficult for anyone to apply for\nany false claim so as an example if the\nhealth records are there on blockchain\nthe insurance companies can easily\nvalidate the health claims made by any\npatient through the blockchain digital\nreports accounting it virtually\nmaintains a record of accurate financial\ninformation all the financial\ntransactions if maintained on an\nimmutable ledger can easily be validated\nand verified and makes accounting simple\nnow who uses blockchain there are\norganizations across the globe who are\nadopting and have started using\nblockchain example walmart due to\nblockchain's decentralized system the\ncompany is able to protect its data from\nhacking and detoleration british airways\nwith blockchain flight data from various\nsources are merged together and help\npassengers receive accurate information\nmaersk with blockchain the company is\nable to provide an efficient transparent\nand secure service in global trade\nbrilliant earth in order to track and\ntrace the provenance of high value\ngemstones they are using blockchain now\nlet's take a look at a demo let's go\nover to some concepts which we have just\nlearned now here i want to demonstrate a\nusage of the hashing function so as we\nhad learned the hashing function is a\n256 big hashing function sha-256 you can\ntype in any data and it will always\ngenerate a 256 bit hash and it's gonna\nbe unique it's a one way function so it\nis not possible that you will be able to\nderive the data from the hash value and\nif i type the same data it will generate\nthe same hash value so the hash value\nfor blank is the same and if i type\nanything it will always generate the\nsame hash value for the same data set\nnow let's see how can we use the hashing\nfunction in our block now here we have a\nblock which has its attributes which is\nthe block number a nonce value and like\nthe similar hashing function we have the\ndata set and a hash value now the\ndifficulty level the target is already\nset for the hashing function to have\nfour leading zeros so whenever i'll be\nmining the job of the miner here is to\ngenerate a hash which should have four\nleading zeroes in the hash value and it\nwill use it will guess the nonce value\nin order to generate such a hash which\nis having four leading zeros so suppose\nif i type a data set now the hash which\nis right now you're seeing on the screen\nis not mined and it does not have the\nleading zeros the four leading zeros so\nwhen i'll click mine the nonce value\nwill change the miner has to guess the\nnonce value to get the hash which is\nhaving four leading zeros\nhere it is so the non switch is\ngenerated now which is 57 480. it takes\nhuge amount of time processing power so\nit could have gone a pretty high value\nbut it was able to guess it at a decent\namount of time now as soon as i'll\nchange the value again the block has\nturned pink which means it is not\nverified the hash has to be generated\nnow we will see the same concept we will\nhave multiple blocks in our blockchain\nnow here we have multiple blocks but we\nhave a new extra attribute called\nprevious hash so if you notice the\nblocks right now currently have all the\nprevious values of the hash which are of\ntheir previous blocks block number 2 has\nthe previous hash value of 4015 which is\nthe hash value of its previous block and\nthis is how a typical blockchain is\nconstructed now there are few things to\nbe noted here suppose i modify the data\nin the last block so if you see the\nblock hash now needs to be changed\nbecause the data has changed its hash\nhas to be regenerated so the previous\nhash value is the same which was the\nhash value of the previous block now the\nnew hash has been generated for this\nblock which starts with four leading\nzeros another thing to be noted is\nsuppose i go back in the sequence and\nmodify the data of any of the previous\nblocks so all the blocks ahead of this\nblock number three now have to be\nverified again because the signature of\nblock number three has changed therefore\nthe values of the previous hash have to\nbe updated for block number four and\nfive so when i'll mine block number\nthree it has now generated a hash value\nwhich is as per the target block number\nfour also has to be mined and blocked\nnumber five also has to be mined now\nthis way we have created our valid\nblockchain so this demonstrates if\nsomeone in a regular blockchain a\nmainnet blockchain which has high number\nof blockchains blocks so if they go and\ntamper any block in the past all the\nsubsequent blocks ahead of that block\nhave to be mined again which will take\nhuge huge amount of time and processing\npower which makes it impossible now we\nwill see this concept when we'll take\nthis concept of distributed now here we\nhave a distributed ledger we have three\npeers pra peer b prc all have the same\ncopy of the ledgers\nnow suppose there is someone who has\nmodified the data on pra and generated a\nblock updated the block but the hash\nvalue of\nblock in peer a or for block number five\nis different for what is of block number\nfive at prp prb which is the four time\nzero e4 and pse also has the same hash\nsignature for as peer b so easily the\nparticipants in the distributed network\nwill able to be identify that someone\nhas modified block number five at pra\nwhich is not a valid block and it can\nget disregarded now whatever example i\nhave been showing this has all been\nrandom data we can take a look at the\ntypical transaction which actually\nhappens on a bitcoin network now rather\nthan sending random data we can see here\nthe exact examples of the transactions\nthe transfer of money which actually\nhappens from one account to another so\nthis is a very good way to see that\nthese are the ways typically the\ntransactions are aggregated and mined in\na block and we can see in a typical\nfashion all the three peers have the\nsame set of information on the\ndistributed ledger now if i modify any\nof the transaction the block will get\ninvalidated and it would have to be\nremind blockchain tutorial part one so\nlet's get started and understand what's\nin it for us today so let's check in\nhypothesis in a city not so far away\nsomebody was up to something bad so\nthere's a hacker who hates the bank who\nwants to steal the money of all the\npeople lying in the bank\nnow here's why i hate them even more\nwhat are the nuances and the problem\nareas of the banking system the banking\nsystem has higher transactional and\ninternational transfer costs a lot of\ndocumentation is required for setting up\nan account for opening an account and\nonboarding a customer and the banking\nsystem is not always accessible it's not\n24x7 it's closed on banking holidays and\nit has other limitations also like\ntransfer limits in a day and you know\nyou can't transfer x amount within a\nstipulated time now banks in such an\necosystem acts as a center point of\nfailure it is a centralized based system\nwhich is prone to failure from a\ncentralized point of view so if the bank\nfails all the transactions will come to\nan halt which are dependent on the bank\nnow let's see what happens if the hacker\nis able to get into the banking system\nand hacks the bank all the investors or\nthe people associated with the bank the\ninformation associated with them will\nget corrupted will get jeopardized and\nit can lead to huge losses to the bank\nand to the individuals and all this can\nhappen with a click of a button it's as\nsimple as that so once a hacker has\naccess to the system he can manipulate\nthe system compromise the information\nshare it with the parties which are not\nsupposed to have that information and\nlot can go wrong though the hackers can\nbe caught right it is possible through\ncyber security and various means but\nonce the information is compromised it\nis very difficult to roll that back and\nthat's why we need more secure systems\nand systems which are not dependent on a\ncentralized authority which work in a\nmore decentralized fashion thereby\nmaking it hack proof plus lowering the\ntransaction cost also now this incident\nof course will catch the bank manager's\nattention now he will go to his advisors\nand want to make sure this does not\nhappen again so the technology com\npeople the advisors will make sure that\nthis does not happen but what is the\nremedy so the remedy is setting up a\nblockchain now of course the manager\nwho's looking into the banking functions\nmight not be aware of the technology and\nwhat benefits blockchain bring onto the\ntable in order to prevent such an\nincident so that's what we are here for\nwe will learn before we go and\nunderstand what can blockchain actually\nachieve for us so we will understand\ntoday what is blockchain the bitcoin\nstory the features of blockchain like\npublic distributed ledger the hashing\nencryption the proof of work consensus\nalgorithm and the concept of mining and\nthen we will cover up a use case where\nhow blockchain can be used for banking\noperations now what is blockchain\nblockchain is a list of records called\nblocks which stores data publicly and in\na chronological order and the entire\ninformation is persisted using\ncryptography it is secured using\ncryptography so cryptography ensures\nthat the privacy of the user is\nmaintained and data cannot be altered\ninformation on a blockchain network is\nnot controlled by a centralized\nauthority so unlike modern financial\ninstitutions nobody controls the data\nwithin a blockchain the data is\nmaintained by the participants of the\nnetwork and they are the democratic\nauthority in order to approve any\ntransaction which can happen on a\nblockchain network access to anyone on\nthe network so a typical blockchain\nnetwork is a public blockchain so as\nlong as you have access to the network\nyou have access to the data within the\nblockchain if you are a participant on\nthe blockchain network you will have the\nsame copy of the ledger which all other\nparticipants have so therefore everyone\nevery participant on the network has the\nsame copy of the data so everyone in the\nnetwork has a copy of the blockchain\ndata which is used for ensuring the data\nremains untempered so even if one node\nor data on one particular participant\ncomputer gets corrupted the other\nparticipants will come to know\nimmediately that this particular\ninstance or node has gone corrupted and\nthey will rectify it as soon as possible\nso basically the question is is this the\nsame technology that bitcoin works on\nand the answer is yes bitcoin could not\nhave been possible without blockchain so\nwe will understand how bitcoin adopted\nblockchain in order to reach to its\njourney today so bitcoin was introduced\nin 2009 by someone or a group of people\nknown as satoshi nakamoto it aimed to\nsolve the problem faced by fiat\ncurrencies with the help of blockchain\ntechnology now as of today in 2018 there\nare more than 1600 cryptocurrencies that\nfollow the concepts of bitcoin and\nblockchain for example the other popular\ncryptocurrencies are like ethereum\nlitecoin dash ripple and many more now\nlet me explain how a bitcoin transaction\nworks the sender transmits the\ntransaction details worldwide basically\nwhenever a sender has to do a\ntransaction he has to send bitcoins to a\nreceiver he will submit the transaction\non the public blockchain network of\nbitcoin and transmit it now verification\nto authenticate users it is done by the\nminers around the world so basically\nthere are specific participants in the\nbitcoin network which are called as\nminers whose job is to verify the\nauthenticity of the sender and the\nreceiver and also validate whether the\nsender has the right amount of balance\nfor the bitcoin which he is trying to\nsend to the receiver and ensuring that\nthe sanity of the underlying blockchain\nnetwork to the bitcoin remains correct\nand not get corrupted so once the miner\nhas authenticated the transaction\nverified all the parameters the\ntransaction is added to a block and then\nthat block is made part of the main\nblockchain once the block is added to\nthe blockchain the money the\ntransactions which were associated in\nthe block then gets executed money is\ndeducted from the sender's wallet and is\nadded to the receiver wallet thereby\nonce the transaction is completed the\nblock is added and the ledger across all\nthe nodes are updated each and every\nparticipant ledger copy is updated with\nthat particular block which has been\nadded in the blockchain so therefore all\nthe participants have the same copy of\nthe information now so what makes\nblockchain special now these are the\nspecial four features of blockchain\nwhich we're going to talk about in\ndetail it is a public distributed ledger\nit works using a hashing encryption each\nand every block has a hash value which\nis the digital signature of the block\nall the transactions are approved and\nverified on the blockchain network using\nproof of work consensus algorithm and\nthe blockchain network utilizes the\nresources of the miners who are there to\nvalidate the transaction and the miners\nin lieu of putting up investing in the\nresources and validating the\ntransactions get rewards in terms of\nbitcoin and that process is called\nmining now public distributed ledger\nlet's imagine four friends sharing a\nparticular document amongst each other\ncorrect now if there was only a single\ncopy of that document and one of them\nalter the data it may go unnoticed\nhowever the outcome would be different\nif each one of them had a copy of the\ndata so therefore if each and every\nparticipant has the same copy of the\ndata even if one of them changed the\ndata the others would find that the data\ndoes not match with their own so\nblockchain works in a similar fashion\nthe data within a blockchain is\naccessible to everyone so with this as\nlong as you are part of the network you\ncould access the entire history of\ntransactions that have taken place since\nthe blockchain was created since\ninception and the first block in any\nblockchain is called the genesis block\nso from the genesis block to the current\nblock you will have the access to the\nentire chain any additions to blocking\nhave to be approved by the participant\nusers in the blockchain network so a\nmajority of the members within the\nnetwork have to approve of any additions\nto the blockchain this is the public\npart of the ledger and this is important\nbecause any additions made to the\nblockchain are permanent and are\nimmutable so immutable transactions are\nthe transactions which cannot be altered\nonce registered they cannot be modified\nand are available for audit and\nverification 24x7 so this means that\neach and every detail is recorded and\nany alterations can be detected by\nverifying it against everyone's personal\nversion of the blockchain so if\nsomeone's tried to modify a data on a\nblock on a particular node then the\nother ledgers which are having the same\ninformation will come to know that\nsomeone has modified data on a one\nparticular node and they will try to\nrectify and the fourth property no\ncentral authority is controlling the\nworking of this blockchain network it is\na decentralized network so this is where\nbeing decentralized helps everyone has a\ncopy of the blockchain which means there\nis no central point of failure there is\na single source of truth even if things\ngo wrong the data can be recovered if\none node goes wrong the data can be\nrecovered from other nodes but what\nabout security how is privacy maintained\nif everything is so public and here\nhashing encryptions comes into picture\nit takes care of that now we will talk\nabout the second feature which is\nhashing encryption but to understand\nhashing encryption we need to understand\nthe contents what are the contents of a\nblock so a block in a blockchain is like\na container that holds aggregated\ntransactions it contains certain set of\ntransactions so we will see what all\nthings construct a particular block so a\nblock has two parts it has a header and\nit has the second part is the\ntransaction details it is the set of\ntransactions which are aggregated in\nthis block now the header has following\nset of attributes it has the block\nversion number it has the hash of the\nprevious block to which it is linked the\ncurrent timestamp the timestamp at which\nthe block was verified the nonce nonce\nwe will see what is the attribute what\nis the meaning of nonce and target value\nnow the transaction details are nothing\nbut the example which we talked about\nearlier it is the transaction which the\nsender and receiver are sharing the\nsender is trying to send certain amount\nof bitcoin from his account to the\nreceiver's account now it is represented\nin the form of a 256 bit hash value in\nthe header called as merkle root or the\nhash root so basically the merkle root\nis the hash of all the transactions\nstructured in a merkle tree called\nbinary tree it's a kind of a binary tree\nand the hash value of the root node of\nthe merkle tree is called the merkle\nroot hash so the transaction details of\na block are contained in the header in a\nhex value known as merkle root the\nmerkle root can be calculated in this\nway so basically the list of transaction\neach transaction is passed through a\nhashing algorithm then all the hashes of\nthe transactions are paired and then\nagain passed through another hashing\nalgorithm until only one value remains\nand which will be the root now let me\ntell you how a hash function works\nblockchain utilizes a hash function to\nperform cryptography data from a data\nset of random size is sent as input to a\nhashing function to get an encrypted\nvalue of fixed size and that is the\nfeature of any hashing function so some\nunique properties of hashing function\nare these are deterministic the same\ninput will always produce the same hash\noutput small changes in the data can\ndrastically change the output so\nbasically\nany small change to the input produces\nan output that's drastically different\nfrom its previous obtained outputs it\ncan be computed easily the output values\ncan be obtained without a whole lot of\ncalculation and hashing functions are\none-way functions basically you won't be\nable to determine the input based on the\noutput value so you can't do the reverse\ncalculation now let's go back to our\nblock we were talking about earlier so\nas we were discussing what are the\nfeatures in the header the previous hash\nis the resultant hash of the previous\nblock in the blockchain and this is the\nway two blocks are linked together now\ntransaction details these are used to\nprovide details about the sender\nreceiver and how much money they want to\nexchange between them and this is a list\nof transactions and they are structured\nin a merkle tree and the hash of the\nmerkle root is put in the header nonce\nis a value that is varied to create a\nunique hash address of the block which\nshould be less than the target hash\nvalue so this is the structure of the\nheader it has a block version number\nbasically the sequence number of the\nblock it has the hash of the previous\nblock the timestamp when the block was\nmined and verified the nonce value the\nheader is then this entire header is\nthen passed through a hashing algorithm\nin the case of a bitcoin network it is\nsha-256 and a hash value is generated\nand now this hash value becomes the hash\nvalue of the block now this value is a\n256 bit value that is used to uniquely\nidentify the particular block so she 256\nensures that alterations to data can be\neasily detected so for example consider\nthese two blocks in the blockchain they\nhave a similar structure and definitely\ndifferent hash values now if someone\nalters the transaction details in the\nfirst block the corresponding hash value\nof the block would change too now the\nvalues of hash value of the first block\nand the previous hash value of the other\nblock will not match basically the block\nsubsequent to the hacked block will get\ndealing now this will raise an alarm\namong the users informing them that data\nalteration has taken place the users\nwill then be able to flag the block so\nthe alteration can be easily identified\nand rectified immediately to ensure\nsecurity blockchains also include\ndigital signatures these ensure that the\nmessage come from the right identity\nright person and that the message is not\ntampered with users are provided their\nown private and public key so whenever a\nuser onboard a public blockchain he is\nprovided a pair of public and private\nkey now private key is used by the user\nto control his her own account this is\nkept as a secret by the user so\nbasically it is like his own password\nand public key public key is used to\nidentify the user on the network this is\nshared by the user along with the\ntransaction on the network for others to\nverify so these are the steps involved\nin creating and authenticating a digital\nsignature so at the center side the\nmessage to be transmitted is passed\nthrough the hashing algorithm in in this\ncase of bitcoin it is she-256 and the\nhash is generated plus the private key\nis used to generate a digital signature\nnow this output is passed through a\nsignature algorithm along with the\nuser's private key to create a digital\nsignature now during the transmission\nthe user's message their digital\nfingerprint which was generated in the\nprevious step plus the public key are\ntransmitted across the network so these\nthree things are published on the\nnetwork for the validators for the\nminers to use and verify the\nauthenticity of the sender now at the\nreceiver's end first the message is\npassed through a hashing algorithm now\nat the same time the sender's public key\nand his or her digital signature are\npassed through a very fictional\nalgorithm now both the functions will\ngenerate a hash if both the hashes are\ncompared and if they match then the\ntransaction and the identity of the\nsender is approved otherwise it is\nrejected so basically this is the\nprocess by comparing the hash values to\nauthenticate the identity of the sender\nnow what about the people who verify\nthese transactions and how do they\nactually do it so remember that one\nfield in the block header called norms\nthat becomes very important in order to\nverify the transaction so now we will\ntalk about the third feature which is\nthe proof of work consensus algorithm so\nproof of work involves people around the\nworld the participants in the network\ncalled miners competing to be the first\none to add a block to the blockchain and\nin lieu of this they will be rewarded\nthere are competing miners around the\nworld they are trying to solve a\nmathematical puzzle to be the first one\nto be rewarded and to add a block to the\nblockchain so this is the reward so\nthereby they invest in the computing\npower they invest in the resources in\norder to mine and validate a transaction\nto get that reward now what is the\nmathematical puzzle so basically they\nneed to find a hash value that satisfies\ncertain predefined conditions now in\norder to find the hash value they will\nuse norms so this target hash value is\ndecided months in advance for every\nblock the miners keep variating the\nnonce value to find out an output that\nfalls within the target requirement so\nthey keep on generating a hash value\nusing the norms and if it is less than\nthe target the hash value is accepted\nand if it is greater than the hash value\nis rejected the minus effort is not\nconsidered valid now a minor transmits\nacross the world that he has found a\nnonce that satisfies the target\nrequirement as soon as he find it and\nthanks to the hashing algorithm used\nthis claim can be easily verified by\nothers so basically the proof of work\nalgorithm it is very hard to generate\nthe nonce and get the hash value but it\nis very easy to verify the transaction\nby the other miners so that's a whole\nlot of work what a miner's payoff is so\nfor all his or her hard work they get\npaid in the bitcoins and this is the\nonly way the bitcoins get added to the\nnetwork sometimes they get other forms\nof remuneration as well and this is the\nconcept of mining so the entire process\nwhen the miner has done the proof of\nwork consensus they are rewarded and\nthis is called as mining so mining is\nthe process of adding a block to the\nblockchain this miner is the first\nperson who found a nonce value that fell\nwithin the target requirement right now\nfor doing this the miner is rewarded as\nof today on the bitcoin network a miner\nis paid 12.5 bitcoins for adding a block\nonto the blockchain but the reward a\nminer gets reduced by half every four\nyears so when the fourth year will\napproach for the threshold the bitcoin\nreward will go down to 6.25 bitcoins and\nminers also get the sum of all the\ntransaction fees for that particular\nblock so the 12.5 bitcoin reward is\njustified as mining is a very expensive\nprocess it has a heavy toll on\nelectricity computing power and other\nresources on which the miner has\ninvested now we will take a look at the\nuse cases where blockchain is applicable\nin banks so we have been incorporating a\nprogram where banks can validate user\nidentity as of now a user needs to do\nthe process over and over again in each\nbank he has to go and prove the identity\nin each bank is there a way we can ease\nthe process with blockchain and the\nanswer is yes we can we will be using\ntruffle ethereum ganache and smart\ncontracts all of these blockchain\ntechnology ecosystem to make it work and\nwelcome to this demo for how to build\nyour kyc blockchain application now i'm\ngonna show you all the steps required to\ndeploy your kyc application what all\ncomponents are to be developed and how\nto go about deploying and testing your\napplication so primarily this kyc\napplication will allow banks to do us\ndecentralized kyc of the customers which\ncome to their banks so in the demo we\nwill see when a customer walks into the\ninitiating bank will do the kyc for a\ncustomer enter its details and verify it\nand if any subsequent bank wants to use\nthe kyc done by another bank he or she\nneeds to take the permission of the\ncustomer and then he can use the same\nkyc for verification so we will see how\ncan we do that so just to start off with\nwe have developed a kyc\nsolidity contract\nwhich has all the necessary functions in\norder to do the actions required\nfor doing a kyc of a particular entity\nby the bank now once this contract is\nready we will be placing it in our\nsample truffle package so this is my\ntruffle package and in this i have the\ncontracts folder in the contracts folder\ni have kept my kyc dot solve file\nnow in the command prompt i will\ncompile my contracts\nwe can ignore the warnings\nso here is my ganache client which i\nhave just started and in my ganache\nclient as you can see it is running on\nport 8545 and it has already given me 10\naccounts pre-funded with 100 ether now i\nhad already mentioned that my truffle is\nconnected to localhost 8545. so now when\ni'll do my truffle migrate command it\nwill connect to my ganache\nand deploy my kyc contract so now i can\ngo to full control and for me it's very\nimportant to see at which particular\naddress my solidity contract has been\ndeployed i'll copy it\nand in my\nui code under root jscontractdetails.js\ni will make the change of this address\nwhere my contract has now been deployed\nnow after doing these steps my\napplication is ready to interact with my\nsolidity contract which is being\ndeployed on my local blockchain network\nnow as you can see when i deployed the\ncontract this is my primary account from\nwhich the ethers were deducted in order\nto deploy the contract now there are\ncertain steps in order to get the\napplication up and running so first we\nneed to sign up the banks\nso suppose i say bank one and the\npassword should be the first address of\nthe bank so basically we are associating\none bank with one account which we have\non our ethereum network so we will sign\nup now bank one is successfully\nregistered so i now in order to login i\ncan check\nnow bank one i have logged in now i need\nto do add a kyc for a particular\ncustomer\nnow after filling the basic details i\nwill create the customer and the\nusername i have kept is customer1\nideally this is the unique identity of\nthe customer it can be any social\nsecurity number or the number or any\nunique identity which is attached to the\ncustomer or the email id and can be used\nas the unique identifier for the\ncustomer now once customer profile is\nsuccessfully created we need to login as\na customer to allow this bank to see the\nkyc details now suppose if i say\ncustomer one and search it it is saying\naccess denied and take the permission\nfrom customer to proceed so\nbefore the bank can do the kyc complete\nthe customer need to approve it so i am\ncreating the credentials for the\ncustomer\nnow customer can see his details\nwhatever were filled by bank one and he\ncan see that there is a request from\nbank one to allow to view his kyc now\nbefore we allow i will also create\nanother bank bank 2 and associate it\nwith my another address\nand try to log in with it\nnow bank 2 is also logged in now bank 2\nhas not done the original kyc right but\nit is trying to look up and its access\nis also denied so it needs to explicitly\ntake permission so the bank will take\nexplicit requests from the customer\nso now the customer has requests from\nbank one and bank two for the kyc it is\nup to the customer whether he or she\nwants to allow and deny the kyc request\nafter the permission has been granted\nthen only the banks can be able to view\nthe kyc so if i say bank one allow and\nbank to deny\nnow all the requests are done from the\nqueue so bank one was allowed and bank\ntwo was denied so if i again log in with\nbank one\nand the password is my first address\nview kyc customer one\nso here it is the bank one is able to\nsee the details now if i log in as\nbank two and give password and try to\nsee the it is saying permission denied\nso let's ask bank 2 to again request\nnow bank 2 is now again requesting and\nnow this time it allows\nnow bank 2 can see the details so all\nthese transactions in the back end are\nhappening on the blockchain network\nwhich is interfacing with the contract\nthrough its subsequent methods now the\nprimary details of the contract are in\nthe\ncontractdetails.javascript where we have\nto provide the address at which the\ncontract was deployed the abi file the\napi so you can get the api at here this\nis the avi and you can paste it here and\nthis is the binary data\nwhich has to be\npasted over here so the binary data can\nbe fetched\nfrom remix\nthis is the binary data for the contract\nit has to be copied and pasted over here\nnow with these essential inputs provided\nour application allows us to interact in\na decentralized fashion to access the\nkyc records of a particular customer now\nwe can modify\nthe details also\nand we can add a new customer again so\nthis is a basic demo of how a typical\nkyc application works in a banking\nenvironment blockchain tutorial part two\nso let's get started today and let's see\nwhat's in store for us so hey thanks for\ncoming back to explain how blockchain\nwork so in our last session just let's\ndo a quick recap what we have learned so\nlet's look down the memory lane and\ndiscover what we had learned we learned\nabout what blockchain is so a blockchain\nis a list of records which stores data\npublicly in a chronological order it\napplies security using cryptography it\nis not controlled by a centralized\nauthority any information on a\nblockchain network is accessible to\nanyone on the network and as it is a\ndistributed ledger it's a shared ledger\neveryone has the copy of the data so\nthese are the primary attributes of a\nblockchain also you learned about\nbitcoin and how it works just to do a\nquick recap it was introduced in 2009 by\nsomeone or a group of pseudonymous\npeople known as satoshi nakamoto it\naimed to solve the problems faced by\nfiat currencies with the help of\nblockchain technology so the objective\nwas to introduce a new asset class of\ncryptocurrencies which can be used in\nday-to-day transactions now as of in\n2018 there are more than 1600\ncryptocurrencies that follow the concept\nof bitcoin and blockchain and are very\npopular in our day-to-day lives now\nlet's talk about the features of\nblockchain is a public distributed\nledger it uses a hashing encryption to\nencrypt all the information on the\nblockchain it uses proof of work\nconsensus algorithm for a consensus\nmechanism and it works with the concept\nof mining in order to reward the miners\nfor keeping them and maintaining the\nsanity of the network and finally about\nhow you can implement blockchain in a\nbanking system so we talked about how to\nimplement a kyc based blockchain\ndecentralized app and how it allows you\nto create a decentralized banking system\nwhere a kyc done by a one bank can be\nleveraged by another bank and the\ncustomer does not have to go through\nmultiple kyc iterations with each and\nevery bank whom he or she wants to\ntransact with now we will get a little\ndeeper into blockchain and today we will\ntalk about these topics we will talk\nabout what is a candidate block we will\ntalk about byzantine fault tolerance\nwhich was one of the earlier consensus\nmechanisms then we will talk about the\nproblem of if we have to add two blocks\nat the same time then how does\nblockchain handles that then we will\ntalk about the concept of forking what\nare soft folks what are hard folks and\nother areas where blockchain is getting\nused what is the future of blockchain\nand what are the upcoming blockchain\njobs and the profiles which are upcoming\nin the market and then in the end we\nwill do a quick demo on how to create a\nsmart contract and deploy it for a\nparticular use case now before a block\ncan be mined a miner has to make a very\nimportant decision which transactions\nwould be added to his block so before\ntransactions are added to the blockchain\nthey are collected in a temporary\ncontainer called a memory pool the\nminers select transactions from the\nschool and they put it in a temporary\nblock called candidate block so\nbasically the candidate block is a\ntemporary block which a miner hopes to\nadd to a blockchain it's a candidate to\nbe added to a blockchain so the\ncandidate block holds transactions that\nthe miner selects from the memory pool\nthe miner then tries to be the first\nperson to find the nonce value that\nsatisfy the hash requirements now the\nquestion comes if someone in a\nblockchain wanted to input the wrong\ndata by spreading wrong information\naround would he or she be able to get\naway with it and that's why we had\nsomething known as byzantine fault\ntolerance so in order to maintain the\nsanity of the network and to have the\ncorrect consensus there was something\ncalled as byzantine fault tolerance\nconsensus algorithm to understand this\nyou need to know what the byzantine\ngeneral's problem is so let's imagine a\nbyzantine general and three other\nlieutenants need to take over this town\nhowever they are at different places and\ncan't directly communicate with each\nother so here we have the general and\nhis three lieutenants the general has to\nensure that all lieutenants follow the\nsame order he or she gives them to\nattack or to retreat now this has to be\nensured even if one of the lieutenants\nis a traitor so this is the byzantine\ngeneral's problem that how does the\ngeneral communicates the correct\ndecision which he has taken to all his\nlieutenants in his network irrespective\nif someone is a traitor in this case a\ntraitor could ruin the unity of the\ngroup by sending different messages to\ndifferent lieutenants now here we can\nsee that general is giving all his\ndefinitions the command to attack the\ntraitor could ruin this by sending every\nother left hand the command to retreat\nthe opposite now in this suspicion the\ntraitor would make others believe that\nthe general asks them to retreat so as\nwe can see the lieutenant in brown is\nthe traitor and he could communicate to\nother lieutenants the wrong information\nand make them act on his behalf as a\ntraitor in themselves now this would\ncause the lieutenants to retreat and the\ngeneral's attack to fail so how do we\ntackle this the only way an attack or a\nretreat will be successful is by having\na majority supporting that particular\naction to achieve this the lieutenants\nkeep a tally of the orders they receive\nso in this scenario the general sends\nthe attack order to each of his\nlieutenants the lieutenants in turn\ncollect the order they receive and pass\nit on to the left in end near to them so\neach left-hand will pass this order to\nthe nearest left in it the traitor also\nwill do the same but sends the retreat\norder to the other left lanes however\nthis will not be successful because each\nlieutenant now has a majority of attack\nand minority of retreat so this shows\nthat the majority of the lieutenants\nwould follow the general's command and\nthe attack will be successful the\nscenario i mentioned before is byzantine\nfault tolerance now the same situation\ncan be encountered in blockchain as well\nthe traitor would add invalid\ntransactions into the blockchain the\ntrader would send the inconsistent\ninformation to other nodes in a\nblockchain this would affect the\nreliability of blockchain network\nblockchain are able to achieve byzantine\nfault tolerance with the help of proof\nof work let's see how it is effective it\nis effective because the process of\nadding a block to a blockchain is a work\nintensive process which involves a\nhashing algorithm the process is very\nhard very computative because it is\nheavily reliant on value obtained from\nthe existing blockchain to have any\nmeaningful impact the hacker would have\nto take a lot of time\nresources producing sufficient proof of\nwork interesting imagine if you and i\nwere miners and we both add a block to\nthe blockchain at the same time how do\nwe handle the situation so although this\ndoes not happen very often there is a\nway to decide whose block should be\nadded to the blockchain in an ideal\nscenario you just need to be the first\none to find the hash value you need to\nbe the first miner to generate that hash\nvalue and win the block so adding two\nblocks at the same time the hash value\nof the block only needs to be within the\npredetermined limit if the generated\nhash value is less than the target then\nthe value is accepted and the block is\nadded to the blockchain but if it is\ngreater than the target then the value\nis denied and the block is not added to\nthe blockchain but in this case if two\npeople have obtained a satisfactory hash\nvalue at the same time so minor one and\nminor two were able to find the hash\nwhich was less than the target then what\nwill happen whether minus one block will\nget added to the blockchain or minus two\nblock will get added to the blockchain\nnow fifty percent of the network has\naccepted minus one block and suppose\nrest has accepted minus two blocks so\nhalf of the network continues to work\nconsidering minus one block to be the\nright block and the other half network\ncontinues to work considering minus two\nblock to be the right block however only\none minus blockchain can be allowed to\nremain we cannot have two blockchains\nrunning it will defeat the purpose now\nthis is achieved by selecting the sub\nchain to which miners have first added a\nblock so suppose miner 3 adds a new\nblock to miners 1 blockchain this block\nnow added by miner 3 is verified by\neveryone in the network it is then\naccepted as the dominant blockchain and\nis used by everyone else in the network\nthe other version of the blockchain the\nminer 2 is completely discarded and the\nentire network now accepts miner one's\nblockchain and we have now a single\nblockchain existing now this efficient\nis also called an accidental fork so i\nheard about a version of bitcoin called\nbitcoin cash what's the difference\nbetween them there are other kinds too\nlike bitcoin gold and bitcoin private\nthese are all outcomes of a fork so what\nis a fork a fork is said to have taken\nplace when a blockchain diverges into\ntwo potential parts a fork happens when\nthe users of a network cannot come to an\nagreement with regards to a network's\ntransaction details and the new rules to\nvalidate those transactions so there are\ntwo types of forks which can exist\neither it can be a soft work or it can\nbe a hard fork a soft fork occurs when a\nchange in the soft protocol makes new\nblocks added to the blockchain following\nthe new rules but are backward\ncompatible but in order to have a\nsoftware it requires a majority of the\nusers to commit to that change to be\nsuccessful so a soft fork could have\nmultiple uses it could be for tighter\nrules it could be for cosmetic changes\naddition of new functions but not\naffecting the structure so consider the\nscenario where the accepted block size\nis to be reduced from 1 mb to 100 kb so\nfirst of all it has to be approved by a\nmajority of the network now the old\nversion will be running on 1 mb block\nsize but once approved the new version\nwill start working on a block size of\n100 kb so anything which is less than\n100 kb will be approved and will be\nadded to the new block so over time\npeople following the older version of\nthe blockchain would be forced to move\nto the new one since none of the\ntransactions would go through so\nbasically people using the old\nblockchain they will be using the 1mb\nblock size their transactions will not\nsucceed and they will be forced to use\nthe 100kb block now let's talk about\nhard fork a hard fork involves a change\nin the software protocol so radical that\nit forces a new blockchain to be created\naltogether so basically in a hard fork\nthere will be two versions there will be\none blockchain that hasn't upgraded and\nthere will be a blockchain that has\nupgraded according to the new software\nprotocols both these blockchains will be\nconsidered valid and legitimate the new\npath would follow new updated rules\nwhile the other one keeps following the\nold path so the old one will not be\ndiscarded and will remain into existence\nnow bitcoin performed a hard fork on\nfirst august 2017 which created bitcoin\ncash so thereby both bitcoin and bitcoin\ncash remain existent now bitcoin cash\nwas different from regular bitcoin\nbecause it increased the block size from\n1 mb to 8 mb so thereby it helped\nreducing the transaction cost\nsignificantly lesser than that of the\noriginal bitcoin network now other than\nwith bitcoin where else is blockchain\nused the other areas are for preventing\nvoter fraud blockchain helps in ensuring\nthat there is only one vote per person\nensuring that the data is not being\ntampered with or any false alterations\nare done it helps creating an immutable\nledger to record the votes as tallied so\nonce a transaction or a vote is recorded\nit cannot be modified it is also used in\nquality assurance ensuring the products\nare of highest quality being able to\nidentify problem areas easily so where\ndo you think blockchain is going to be\nused in the future so blockchain is\nseeing wide range of adoption amongst\norganizations as of now only one percent\nof all organizations have begun using\nblockchain technologies but this\npercentage is expected to increase in\nthe next five years or so then there is\na need for blockchain regulations the\nrules and regulations surrounding\nblockchain are not very clear for\norganizations to be comfortable using it\nand move towards faster adoption also\nthere's a need for removing this\nnegative speculations surrounding\nblockchain several industries fear that\nblockchain will disrupt their normal\nfunctioning and believe that the\nadoption of a blockchain system isn't\nworth the effort and there is an\nincrease in job opportunities for\nskilled personnel so as the technology\nis maturing there would be a huge\nrequirement for individuals who can\nunderstand and implement the concepts of\nblockchain so what options do people\nhave for jobs involving blockchain at\nthe moment there are many job\nopportunities but the two most famous\nones are blockchain architect and\nblockchain developer blockchain\ndeveloper is a profile which requires\ndesigning implementing and supporting a\ndistributed blockchain network analyze\nuser requirements design technology\naround a certain business model to build\nand launch a blockchain network\nblockchain architect profile requires to\ndesign and architect blockchain industry\nsolutions creates blockchain networks\nleveraging blockchain technology\nplatforms produce high quality code\nbased on project requirements\nconceptualize design and build\nblockchain frameworks and assets\nso let's have a quick demo on how to\ndeploy a rating smart contract and have\ndecentralized application running on a\nlocal blockchain network we will be\nusing truffle and solidity to build this\napplication so in order to build this\napplication we should have installed\ntruffle and ganache on our local system\nso this is a ganache client which is\nrunning on my local host it is running\non port\n8545 and network id 5778 whenever you\nrun a ganache client it is preceded with\n10 accounts and 100 ether balance now\nthis is my movie rating app and in this\napp i am going to deploy a smart\ncontract called rating.soul which is\ngonna capture the ratings for a certain\nset of movies which i will predefine and\nthe users will be able to set the\nratings on a blockchain network in a\ndecentralized fashion and we will be\nable to see that in every transaction a\nblock is getting generated in my ganache\nclient so in my movie rating app under\nthe rating folder i will run the command\ntrough compile and it will compile my\nsmart contract rating dot soul now the\nnext command which i have to run is\ntrough migrate\nnow at this instance the trough migrate\ncommand will deploy\nmy smart contract on my ganache client\nso if you see there are four blocks\nwhich have been created and\nmy contract was created in this\ntransaction and this is the address of\nthe contract at which my contract is\ndeployed so i can go back to my command\nprompt and say trust console and check\nthe address of my\ncontract so this is 0x695\nwhich is this address now when i\ndeployed my smart contract i had given\nthe entry of deployment in a file called\ndeploy contract.js under rating\nmigrations and in that i had given this\nentry i had given the path to my rating\nsolidity file and i had initialized my\nsmart contract with three movies star\nwars avatar and inception and given some\npredefined gas\nnow once these steps are done and i know\nthe address at which my contract is\ndeployed i will copy that\nand paste it\nin the file of ethereum setup.js which\nis lying under my rating app ui source\nfolder and i'll just change this address\nnow once this rating address is changed\ni have to go back to my movie rating app\nfolder under app ui i have to give the\ncommand npm start\nnow my application is up and running on\nlocalhost 3000 and as you see i'm able\nto do the voting and at each rating\nlevel\nmy block is gonna increase block six\ninception block seven and as and when my\nrating is increasing a block is getting\nadded so this demonstrates the usage of\ntruffle and ganache in order to build\nyour decentralized app wow blockchain is\namazing thanks for explaining these\nthings to me i'm glad i could help you\nthanks saurabh now we have rahul to help\nyou guys understand cryptocurrencies i'm\nrahul from simply learn and this is\ncryptocurrency explained since man\nevolved currency has been a very\nimportant part of our lives in the\ncaveman era they use the barter system\nnow the barter system involves goods and\nservices being exchanged among each\nother so now we have a situation where a\ncaveman is exchanging seven apples and\ngetting oranges in return now the barter\nsystem fell out of use because it had\nsome glaring flaws now these flaws\ninclude having people's requirements\ncoincide for example say you have five\napples and your friend has five oranges\nyou want some of his oranges now until\nand unless your friend has a requirement\nfor the apples that you own he'll not be\nready to make in exchange for it there's\nno common measure of value now since\nthere's no common measure in terms of\nwhich value of a commodity can be\nexpressed there's a problem when you\nhave to decide how many apples you're\nready to trade for one orange or a mango\nnot all goods can be divided or\nsubdivided for example you can't divide\na live animal into different smaller\nunits the goods cannot be transported\neasily now unlike how modern currency\nfits in your wallet or your mobile phone\nthe goods that you own cannot be taken\nwith you everywhere you go after\nrealizing that the barter system didn't\nwork very well currency went through a\nfew iterations in 110 bc an official\ncurrency was minted in thousand 250 a.d\ngold plated florence was introduced and\nthis was used across europe and from\n1680 to 1980 paper currency gained\nwidespread popularity and was used\nacross the world this is how modern\ncurrency as we know it came into\nexistence modern currency included paper\ncurrency in coins credit cards and\ndigital wallets for example you have\napple pay amazon pay paytm paypal and so\non all of this was controlled by banks\nand governments now this means that\nthere was a centralized regulatory\nauthority that limited how paper\ncurrency and credit cards worked now\nimagine the scenario of doing an online\ntransaction here you're thanking your\nfriend for paying for your lunch and\nyou're saying that you're sending them\nmoney to their account now this\ntransaction takes place successfully but\nthere are several ways where this could\nhave gone wrong there could have been a\ntechnical issue at the bank for example\ntheir systems could have been down the\nmachines weren't working properly and so\non that means there's a central point of\nfailure which is the bank the users\naccounts could have gotten hacked for\nexample there could have been a ddos\nattack or identity theft and so on or\nthe transfer limits for that account\nwere exceeded this is why the future of\ncurrency lies with cryptocurrency now\nimagine the transaction between two\npeople in the future one of them has the\nbitcoin app and there's a notification\nasking whether they're sure they're\nready to transfer five bitcoins if yes\nprocessing takes place here we're\nauthenticating the user's identity\nchecking whether they have the required\nbalance to make that transaction and\nother things now after that's done the\npayment is transferred and the payment\nis received all of this happens in a\nmatter of minutes and is as simple as\nthat this in turn removes all the\nproblems of modern banking there's no\nlimits to the funds you can transfer\nyour accounts cannot be hacked and\nthere's no central point of failure now\nas of 2018 there's more than 1600\ncryptocurrencies available now there are\nsome popular ones like bitcoin litecoin\nethereum and zcash and a new\ncryptocurrency crops up every single day\nnow considering how much growth they're\nhaving at the moment there's a good\nchance there's plenty more to come in\nthe upcoming years so what exactly is\ncryptocurrency a cryptocurrency is a\ndigital or virtual currency that is\nmeant to be a medium of exchange now\ncryptocurrency is quite similar to real\nworld currency just that it does not\nhave any physical embodiment it also\nuses cryptography to work the way it\ndoes now some of the features of\ncryptocurrency are that there's a limit\nto how many units can exist with bitcoin\nthis limit exists at 21 million now\nafter this no more bitcoins will be\nproduced you can easily verify the\ntransfer of funds now the hashing\nalgorithms that bitcoin uses makes it\nvery easy for users to determine whether\na transaction is valid or not they\noperate independent of a bank or a\ncentral authority they work in a\ndecentralized manner now new units can\nbe added only after certain conditions\nare met for example for bitcoin only\nafter block has been added to the\nblockchain will the miner be rewarded\nwith bitcoins and this is the only way\nnew bitcoins can be generated so what\nmakes cryptocurrency so special firstly\nthere's little to no transaction costs\nnow if you use the digital wallet you'll\nknow that if you're transferring money\nfrom your wallet to your bank account\nyou'll lose some amount of money you\nhave 24 7 access to money you can't just\nwalk up to your bank at 3am in the\nmorning and say that you want to\nwithdraw some money there's no limits on\npurchases and withdrawals there's\nfreedom for anyone to use for example if\nyou're setting up an account in your\nbank you need to do some amount of\npaperwork and documentation with\ncryptocurrencies all of that can be\navoided international transactions are\nfaster now wire transfers take about\nhalf a day to transfer money from one\nplace to another but with\ncryptocurrencies it only takes a matter\nof minutes or seconds what's the crypto\nin cryptocurrencies crypto refers to\ncryptography it's a method of using\nencryption and decryption to secure\ncommunication in the presence of third\nparties with ill intent now this refers\nto third parties who want to steal your\ndata or want to eavesdrop on your\nconversation cryptography uses\ncomputational algorithms like ssj256\nwhich is the hashing algorithm that\nbitcoin uses a public key which is like\na digital identity of the user which he\nshares with everyone and a private key\nwhich is the digital signature of the\nuser which he keeps hidden now let's\ntalk about a normal bitcoin transaction\nfirst you have the transaction details\nnow this details who you want to send it\nto and how much bitcoins you want to\nsend them then it's passed through a\nhashing algorithm for bitcoin we use the\nssj256 algorithm the output that you\nobtain is passed through a signature\nalgorithm with the user's private key\nnow this is used to uniquely identify\nthe user this output is then distributed\nacross the network for people to verify\nthis is done by using the sender's\npublic key the people who verify the\ntransaction to check whether it's valid\nor not are known as miners now after\nthis is done the transaction and several\nothers are added to the blockchain where\nit cannot be changed again if the\nconcepts of hashing seem a little\ndifficult to you i would suggest you\nclick on the top right corner and watch\nthe blockchain explain video so that you\ncan understand better now the sha-256\nalgorithm like i told you earlier looks\nsomething like this\nnow seeing how complicated it looks i'm\nsure it's safe to say that the\nencryption is very difficult to hack\ntoday we'll be focusing on two major\ncryptocurrencies bitcoin and ether now\nbitcoin is a digital currency that is\ndecentralized and works on the\nblockchain technology it uses a\npeer-to-peer network to perform\ntransactions let's talk about ether\nether is a currency that's accepted in\nthe ethereum network now the ethereum\nnetwork uses blockchain technology to\ncreate an open source platform for\nbuilding and deploying decentralized\napplications now let's talk about the\nsimilarities between bitcoin and ether\nthey are the biggest and most valuable\ncryptocurrencies in the market right now\nboth of them use blockchain technology\nbut is nothing but a technology that\ninvolves transactions being added to a\ncontainer called block and creating a\nchain of blocks in which data cannot be\naltered currency is mined using a method\ncalled proof of work which is a form of\nmathematical puzzle that needs to be\nsolved before a block can be added to\nthe blockchain finally these are widely\nused across the world now let's talk\nabout the differences with bitcoin it is\nused to send money to someone this is\nvery similar to how real life currency\nworks with ether it is used as a\ncurrency within the ethereum network\nalthough it can be used for real-life\ntransactions as well bitcoin\ntransactions are manual which means you\nhave to personally perform these\ntransactions with ether you have the\noption to make these transactions manual\nor automatic or programmable which means\nthat these transactions will take place\nwhen a certain condition has been met\nfor bitcoin it takes 10 minutes to\nperform a transaction which is the\namount of time it takes for a block to\nbe added to the blockchain with ether it\ntakes about 20 seconds to do a\ntransaction now blockchain is used like\nmoney for real-world transactions and\nether is used to power the ethereum\nnetwork and power real-life transactions\nas well ether is used as fuel within the\nethereum network to power both of these\nthings now there's a limit to how many\nbitcoins can exist which is 21 million\nwe're supposed to hit this number by the\nyear 2140 ether is expected to be around\nfor a while but not to exceed 100\nmillion units now bitcoin is used for\ntransactions involving goods and\nservices and ether uses blockchain\ntechnology to create a ledger to trigger\na transaction when a certain condition\nis met for bitcoin we use an algorithm\ncalled sha-256 for hashing and with\nethereum we use et hash as of july 23\n2018 one bitcoin equals\nhundred and sixty eight dollars for\nether it costs four hundred and sixty\nfour dollars now what's the future of\ncryptocurrencies the whole world is\nclearly divided when it comes to\ncryptocurrencies on one side you have\nsupporters like bill gates al gore and\nrichard branson who say that\ncryptocurrencies are better than regular\ncurrencies on the other side we have\npeople completely against it people like\nwarren buffet paul krugman and richard\nschiller who are both nobel prize\nwinners in the field of economics they\ncall it a ponzi scheme and means for\ncriminal activities in the future\nthere's going to be a conflict between\nregulation and anonymity since several\ncryptocurrencies have been linked with\nterrorist attacks governments would want\nto regulate how cryptocurrencies would\nwork ethereum so now let's take a look\nwhat's in it for all of us today we will\nbe talking about what is ethereum the\nfeatures of ethereum like cryptocurrency\nsmart contracts ethereum virtual machine\ndecentralized application and it uses\nand decentralized autonomous\norganization we'll be also looking at\napplications of ethereum and a demo on\nsmart contract deployment on a locally\nrunning ethereum client now what is\nethereum ethereum is a blockchain based\ncomputing platform that enables\ndevelopers to build and deploy these\ncentralized applications so basically\nethereum is a platform where we can\nbuild applications which are not run by\na centralized authority you can create a\ndecentralized application where the\nparticipants of that particular\napplication are the decision making\nauthority so here we can see ethereum\nallows us to build and deploy dap\napplications now what are the typical\nfeatures of ethereum ethereum allows you\nto use its own cryptocurrency called\nit allows development and deployment of\nsmart contracts it provides you the\nunderlying technology the architecture\nthe software which understands smart\ncontracts and allow you to interact with\nit which is called ethereum virtual\nmachine then it allows eventually to\ncreate consolidated applications called\ndecentralized applications and also it\nallows you to create decentralized\nautonomous organization now let's talk\nabout ethereum cryptocurrency ether eth\nis a cryptocurrency that runs on\nethereum network basically it is the\nfuel which is running the ethereum\nnetwork it is used to pay for the\ncomputational resources and the\ntransaction fees for any transaction to\nbe executed on an ethereum network like\nbitcoin ether is also a peer-to-peer\ncurrency apart from paying for\ntransaction ether is also used to buy\ngas which is used to pay for computation\nof any transaction you make on an\nethereum network also if you have to\ndeploy a contract on ethereum network\nyou will need gas and you would have to\npay for that gas in ethers so gas is the\nexecution fee paid by a user for running\na transaction in ethereum ether can be\nutilized for building decentralized\napplications for building your smart\ncontracts and making standard\npeer-to-peer payments now what is a\nsmart contract a smart contract is a\nsimple computer program that facilitates\nthe exchange of any valuable asset\nbetween two parties it could be money it\ncould be shares it could be property or\nit could be any other digital asset\nwhich you want to exchange these\ncontracts can be created by anyone on\nthe ethereum network and primarily the\ncontract consists of the terms and\nconditions mutually agreed between the\nparties between the peers and the\nprimary feature of a smart contract is\nthat once it is executed it cannot be\naltered and any transaction done on top\nof a smart contract is registered\npermanently it is immutable so even in\nfuture you modify the smart contract the\ntransactions correlated with the\noriginal contract does not get altered\nor you cannot modify them so for the\nverification process smart contract is\ncarried out amongst the anonymous\nparties of the network without the need\nof a centralized authority and that's\nwhat makes any smart contract execution\non ethereum a decentralized execution it\nprovides the transfer of any asset or\ncurrency in a transparent and a\ntrustworthy manner as the two entities\nare totally unaware their identity is\nsecure on the ethereum network though\nthe transactions weren't successfully\ndone the accounts of the sender and\nreceiver are updated accordingly and\nthere's why it generates a trust between\nthe parties who are transacting using\nthe ethereum network now what happens in\ntraditional system of contract in\ntraditional systems of contract you sign\nan agreement then you trust a third\nparty hire a third party for execution\nnow the problem is that in such an\nengagement the data tampering is\npossible now if we talk about the new\nsmart contract the agreement is coded in\na program now result is not verified by\na centralized authority it is verified\nby the participants on ethereum based\nblockchain network now once a contract\nis executed the transaction is\nregistered and it cannot be altered or\ntampered so it removes the risk of any\ndata manipulation or alteration now\nlet's take another example where zac has\ngiven a contract of 500\nto elsa for developing his company's\nwebsite now the developers code the\nagreement of smart contract using\nethereum's programming language now the\nsmart contract has all the conditions\nthe requirements for building the\nwebsite once the code is written it is\nuploaded and deployed on the ethereum\nevm virtual machine evm is a runtime\ncompiler to execute your smart contract\nonce the code is deployed on the evm\nevery participant on the network has a\ncopy of the contract now now when elsa\nsubmits the work on ethereum for\nevaluation each node on the ethereum\nnetwork will evaluate and confirm\nwhether the result given by elsa is done\nas per the coding requirements and once\napproved and verified the contract worth\n500\nwill be self-executed and the payment\nwill be paid to elsa in ethers so john's\naccount the person who had gone into a\ncontract his account will be\nautomatically debited and elsa will be\ncredited with 500 in ether denomination\nhere we will now take a look we will do\na demo small demo on a deployment of a\nsmart contract so for in order to\nexecute our smart contract we will need\ntwo set of softwares ganache and truffle\nand we will show you in the demo how to\ninstall these two softwares on your\nmachine now we will be giving a demo on\nthe following smart contract this is a\nsmart contract where we are writing a\nsimple contract of a greeter we have a\nvariable called greeting which we will\nbe initializing using a constructor and\nthen in our demo we will be showing how\nyou can change the value of the variable\ngreeting using the setgridding method\nand read the value using the greet\nmethod this is the other contract where\nwe will be defining that whoever is\ndeploying the contract on the blockchain\nnetwork is always the owner of the\ncontract and then we have defined\ncertain mandatory functions in order to\nkill the contract on the ethereum\nnetwork so only the owner of the\ncontract can kill it now let's talk\nabout what is an ethereum virtual\nmachine each virtual machine is designed\nto operate as a runtime environment for\ncompiling and deploying ethereum based\nsmart contracts basically evm is the\nengine which understands the language of\nsmart contracts which are written in\nsolidity language for ethereum evm is\noperated in a sandbox environment\nbasically you can deploy your own\nstandalone environment which can act as\na testing and a development environment\nand you can n number of times test your\nsmart contract deploy it verify it and\nthen once you are satisfied with the\nperformance and the functionality of the\nsmart contract you can deploy it on the\nethereum main net now any programming\nlanguage in the smart contract is\ncompiled into the byte code which the\nevm understands this byte code can be\nread and executed you using an ethereum\nfeature called ethereum virtual machine\nso basically evm machine understands a\nbyte code so one of the most popular\nlanguages for writing a smart contract\nis solidity so once you write your smart\ncontract on solidity that contract gets\nconverted into the byte code and gets\ndeployed on the ev and thereby evm\nguarantees security from cyber attack\nnow how does evm work so suppose a wants\nto pay b 10 ethers the transaction will\nbe sent to the evm using a smart\ncontract for a funds transfer from a to\nb now in order to validate the\ntransaction the ethereum network will\nperform the proof of work consensus\nalgorithm the minor nodes on the\nethereum will validate this transaction\nwhether the first the identity of a\nexist or not a has the relevant amount\nof balance to transfer 10 ether to b and\nin will validate the transaction once\nvalidated the ether will be debited from\na's wallet and will be credited to b's\nwallet and during this course the miners\nwill charge a fees in order to validate\nthis transaction and will earn a reward\nnow all the nodes on ethereum network\nexecute smart contract using their\nrespective evms now how does proof of\nwork works every node in the ethereum\nnetwork has the entire history of all\nthe transactions the entire chain it has\nthe history of smart contract with\nbasically the address at which the smart\ncontract is deployed the transactions\nassociated with the smart contract and\nalso it has the handle to the current\nstate of the smart contract now the goal\nof the miners on the ethereum blockchain\nnetwork is to validate the block for\neach block of transaction miners use the\ncomputational power and resources to get\nthe appropriate hash value by varying\nthe nonce now the miners will vary the\nnonce and pass it through a hashing\nalgorithm in case of ethereum it is the\nit hash algorithm this produces a hash\nvalue which should be lesser than the\npredefined target as per the proof of\nwork consensus if the hash value\ngenerated is less than the target value\nthen only the block is considered to be\nverified and the miner gets rewarded\nonly then now when the proof of work is\nsolved result is broadcasted and shared\nwith all the other nodes in order to\nupdate their ledger if other nodes\naccept the hash block as valid then the\nblock gets added to the ethereum mainnet\nblockchain and as a result the miner\nreceives a reward which as of today\nstands at three ethers plus the miner\nreceives the transaction fees which has\nbeen generated for verifying the block\nall the transactions which are\naggregated in the block the cumulative\ntransaction fees associated with all the\ntransactions is also rewarded to the\nminer now do you know in ethereum a\nprocess called proof of stake is also\nunder development and it is an\nalternative to proof of work it is meant\nto be a solution to minimize the use of\nexpensive resources you spend for mining\nusing proof of work now in proof of\nstake the miner is actually the\nvalidator can validate the transactions\nbased on the amount of crypto coins he\nor she holds before he or she can start\nthe mining so based on the accumulation\nor the repository of crypto coins with\nthe miner beforehand will give him the\nhigher probability of mining the block\nnow however proof of stake is not widely\nadopted as of now as compared to proof\nof work algorithm now let's understand\nthe concept of gas now ethereum virtual\nmachine has a concept of gas and why do\nwe need it so like we need fuel to run\ncar in the same way in order to run\napplication on ethereum network we need\ngas now what is gas to perform any\ntransactional ethereum network a user\nhas to make a payment has to shell out\nethers in order to get the execution\ndone the transaction done and the\nintermediary monetary value is called as\ngas on ethereum network gas is a unit\nthat measures the computational power\nrequired to run a smart contract or a\ntransaction so if you have to do a\ntransaction which is updating the\nblockchain you would have to shell out\ngas and that gas will come with the\nprice in ethers now how is the gas fees\ncalculated in ethereum the transaction\nfees is calculated in ethereum using the\nbelow formula for every transaction\nthere is a gas and the correlated gas\nprice so the amount of gas required to\nexecute a transaction multiplied by the\ngas price you generate the transaction\nfees so gas limit on ethereum network\nrefers to the amount of gas which is\nused for the computation and the amount\nof ether a user is required to pay for\nthe gas now here we have a screenshot\nfrom the ethereum mainnet where the cost\nof transaction is being shown so if you\nsee for this particular example\ntransaction the gas limit was 21 000 the\ngas used by the transaction was 21 000\nand the gas price was 21 gui which is\nthe lowest denomination so 21\ngui into 21 000 gave you the actual\ntransaction fees which is\n0.00441 ether which is approximately\n0.21 cents as of today's ether market\nvalue now this transaction fee goes to\nthe miner who has validated the\ntransaction to understand the gas limit\nand the gas price in a better way let's\nconsider an example of a car suppose\nyour car has a mileage of 10 kilometers\nand the price of petrol is one dollar\nper liter then driving a car for 50\nkilometers will cost you five liters of\npatrol which will be worth five dollars\nsimilarly to perform an operation or to\nrun a code on ethereum you need to\nobtain certain amount of gas like the\npatrol where each gas has a per unit\nprice called gas price now if the user\nprovides less amount of gas to run a\nparticular operation then the process\nwill fail and the user will be given a\nmessage of out of gas and gui is the\nlowest denomination of ether which is\nused for measuring unit of a gas price\nnow how is ethereum's mining different\nfrom bitcoin mining the hashing\nalgorithm is the primary difference the\nbitcoin uses sha-256 ethereum uses it\nhash the average time taken on bitcoin\nfor mining a block is 10 minutes whereas\nin ethereum it is 12 to 15 seconds as of\ntoday the mining reward for bitcoin is\n12.5 btc but for ethereum is this three\nethers plus the transaction fee the\naccumulated transaction fee for all the\ntransactions for a block now as of 23rd\njuly the bitcoin value was seven\nthousand six hundred and sixty seven\ndollars whereas one ether stands at 466\ndollars now here we have a screenshot of\nethereum reward which has been given to\nthe miner of the block now as you can\nsee here is the breakup of the reward\nthree ethers plus the total accumulated\ntransaction fee of all the underlying\ntransactions in this block which is\n0.0666 ethos now what is a decentralized\napplication now let's compare it with\nour traditional applications our\ntraditional websites which are currently\nrunning so for example when you log into\ntwitter a web application gets displayed\nwhich is rendered using an html page now\nthe page will call an api to access your\npersonal data your information which is\ncentrally hosted now it's a simple\nprocess your front end executes a\nbackend api and the api goes and fetches\nthe information from a centralized db\nnow if we transform this application\ninto a decentralized application then\nnow when you will log in the same web\napplication will get rendered but it\nwill be calling a smart contract based\napi to fetch the information from the\nblockchain network so the api gets\nreplaced with the smart contract\ninterface and the smart contract will\nfetch the information from the\nblockchain network which is its backend\nand that blockchain network is not a\ncentralized db it's a decentralized\nnetwork where the participants of the\nnetwork the miners of the network are\nvalidating verifying all the\ntransactions which are happening using\nthe smart contract on the blockchain\nnetwork so thereby any now any\ntransaction or any action happening on\nthe twitter kind of application which\nhas been transformed will now cannot be\nclaimed as a centralized uh transaction\nit will be a decentralized transaction a\ndap a decentralized application consists\nof back-end code that runs on a\ndistributed peer-to-peer network it is a\nsoftware designed to work on an ethereum\nnetwork without being controlled by a\ncentralized system and that is the\nprimary difference it provides the\ndirect interaction between the end users\nand the decentralized application\nproviders now an application qualifies\nas dap when it is open sourced its code\nis there on github and it uses a public\nblockchain based token in order to run\nthe application a token acts as a fuel\nfor the decentralized application to run\ndap allows the backend code and data to\nbe decentralized and that is the primary\narchitecture of any dap now let's\ndiscuss what are decentralized\nautonomous organizations daos is a\ndigital organizations that wants to\noperate without any need of a\nhierarchical management it wants to\noperate in a decentralized and a\ndemocratized fashion so basically a dao\nis an organization where the\ndecision-making should not be in the\nhands of a centralized authority but it\nshould be in the hands of certain\ndesignated authorities or a group of\ndesignated people as a part of authority\nit exists on a blockchain network where\nit is governed by the protocols embedded\nin a smart contract and thereby they\nrely on a smart contract for decision\nmaking all the business decisions are\ndriven by the smart contracts or we can\nsay a decentralized voting system within\nthe organization so any organizational\ndecision before being taken has to go\nthrough the voting system which is\nrunning on a decentralized application\nso how it work people add funds to the\ndow because dao requires funding in\norder to execute and take decisions\nbased on that each member is given a\ntoken on a percentage basis which\nrepresents the percentage of shares of\nthat particular member in the dow now\nthose tokens are used to vote in the dow\nwhere the proposal status is decided\nbased on the maximum votes so every\ndecision within the organization has to\ngo through this voting process now let's\ntake a look what are the applications of\nethereum in real world and where it is\ngetting used so as we have seen with dao\nvoting systems are adopting it the\nresults of the polls are publicly\navailable where it ensures a transparent\nand fair democracy by eliminating voting\nmalpractices it is getting adopted\nwidely in a banking scenarios and\nbanking systems with ethereum's\ndecentralized system it is becoming very\ndifficult for hackers to have\nunauthorized access and it also allows\npayments on an ethereum based network so\nbanks are also using ethereum as a\nchannel to make remittances and payments\nshipping deploying ethereum and shipping\nhelps tracking of cargo and prevents\ngoods from being misplaced or\ncounterfeited so basically ethereum is\nproviding you of the provenance and\ntracking framework for any kind of asset\nrequired in a typical supply chain now\nwith ethereum's smart contract\nagreements can be maintained and\nexecuted without any alteration so any\nindustry which has fragmented\nparticipants is subject to disputes and\nwhich requires and digital contracts to\nbe present then ethereum can definitely\nbe used as a technology for developing\nyour smart contract and digitally\nrecording the agreements and the\ntransactions based on those agreements\nso let's get started for a demo\non how to deploy\nan ethereum smart contract locally so in\norder to deploy a smart contract we will\nbe first installing\nganache client which allows you to host\na local ethereum client on which you can\ndeploy your smart contract so as we are\nworking on the windows environment when\nwe are downloading the ganache setup\nwe can also download\nnode order to install truffle on our\nmachines\nnow as the node has been downloaded we\nwill install node\nso now node is successfully installed\nnow we are going to install ganache\nlocally\nnow we will run ganache a little later\nbefore that we will perform certain\nsteps or we can run ganache and see\nso once ganache is up and running i'll\nshow you the interface how it looks\nso when ganache\nis brought up it automatically creates\n10 accounts with pre-funded balance of\n100 ethers it is running on localhost\nport number\n7545 now as you see there is no\ntransaction or anything which has\ncurrently happened so the current block\nis 0 which is the genesis block there\nare no transactions and there are no\nblocks as of now so there are no\ntransactions in block which have been\ngenerated so using this ganache client\nnow we will be deploying our greeter\ncontract now as we have installed node\nwe will be installing truffle ruffle is\nthe utility which allows us to compile\nand deploy\nethereum contracts\nokay now once a truffle is installed\nwe need to create a directory called\ngreeter\nnow we need to run the command truffle\nnow once we run this command\nruffle by default\ncreates a package structure which has\nthree folders called contracts\nmigrations test truffle.js and\ntruffleconfig now we will be writing our\nsmart contract called greeter.soul\nand we will compile and deploy basically\nour\ngreater.soul\nwill be under contracts folder and we\ncan\nour contract is created and it is lying\nunder contracts folder now we need to\nadd another file under migrations folder\ncalled as deploy contract.js\nso we will name it as deploy contract\nnow in this\ndeploy contract we need to put line of\ncode now in this file we are asking\ntruffle to deploy our newly created\ngreeter.soul file now in the greater\ncontract we have a constructor we are\ninitializing the greater contract with a\nvalue high hello and we are passing a\ngas value so this gas is currently at a\nhigher limits and we know that this gas\nvalue the contract will get executed but\notherwise you can also evaluate the gas\nvalue of a contract using remix now once\nthis file has been saved you go to the\ntruffle.js\nand make the following entry\nnow here we are telling truffle that our\nlocalhost ganache client is running on\nlocalhost at port number 7545\nand network id can be anything though\nthe current ganache client is running on\nport network id five triple seven but we\nhave kept it open that we can connect to\nany network id now after this step i\nneed to go back to my command prompt and\nsay\nreferral\ncompile\nnow if you get this error if we are\ngetting this kind of error in windows\nthen we need to do one quick fix\nwe need to go to the users directory and\nrename truffle.cmd to trough so i'll go\nto my drive\nusers\njust\nnow here now instead of truffle i have\nto say trough\nnow there might be certain compilation\nwarnings we can ignore that now my\ncontract has been compiled now i need to\nrun the next command trough my great\nat this stage my smart contract is\ndeployed and now you can see\nthis is the step this is the place where\nthe contract has been called and this is\nthe transaction where\nthe\ndefault value of my variable greeter has\nbeen set to high hello so we will see\nnow i need to run command trough console\nto interact with my contract now as on\nmy craft console\ni can check at what address is my\ncontract deployed so my contract is\ndeployed at address\n0x37 which matches with the address\n0x373\nnow\ni need to check\nthe default value which i had set while\ndeploying my contract so this is my\nvalue hi hello now i can\nchange the value to something else\nbecause in my greater contract i have a\nmethod called\nset greeting now whenever when i'll be\nperforming this action\na new block will get generated and the\nblock count will increase from 4 to 5\nbecause i'm making a change on the\nblockchain as you can see now a new\ntransaction has been created this was\nthe gas used this is the default gas\nprice in ganache and block number five\nhas been mined now i can re-read the\nvalue of the variable now it will return\nme latest value which is change greet\nvalue so this demonstrates\nhow to use\na solidity contract how to compile it\ndeploy it on a locally running\nblockchain network you can connect\nmultiple nodes to this ganache client\nand all the nodes should be running on\nthe same network id should have the same\nnetwork id but they can be running on a\ndifferent machine so here we can see all\nthe other details the block the\ntransactions which have happened if i\nperform the action again\nnumber six has been generated has\nanother transaction associated with it\nand i can get the latest value so let's\nget started and understand what is a\nsmart contract what's in it for us today\nlet's understand why do we need a smart\ncontract what is a smart contract usage\nof solidity for building smart contract\nadvantages of smart contract blockchain\nimplementation of smart contracts we\nlook at certain examples of voting and\ndigital token and also we will take\nanother use case of how smart contracts\nhelp us do crowdfunding now why smart\ncontract now let's take a look\ntraditionally how contracts used to\nhappen if suppose two parties a and b\nhave to get into a contract they will\nutilize the services of a third party\nwhom they have to trust and get the\ncontract executed now with the\nintroduction of smart contracts and the\ntechnology which is evolving removes the\ndependency on such third parties and\nautomates the execution of such smart\ncontracts so if we compare traditional\nversus the new smart contract in\ntraditional we used to have governments\nlawyers or any other third party on\nwhich we can trust in smart contracts we\ndon't need any third party we don't need\nany intermediate execution time\ndefinitely there's higher execution time\nin traditional contracts because as many\nnumber of middlemen and their\nintermediary layers that many number of\ndays and time it takes smart contract is\njust a matter of minutes it gets\nexecuted because it is automated\nprogrammable running on a computer and\nit has some predefined condition\nremittance if any remittance of either\nof the parties have to happen then it's\na manual process approvals workflows\nprocesses\nand these manual processes take time\nunder traditional contracting system but\nin a smart contract as the conditions\nare predefined pre-embedded as soon as a\ncondition is met the remittance happens\nautomatically either of the parties who\nhave to be credited with an amount is\ncredited automatically and that is the\nprimary advantage of using a smart\ncontract transparency\nis not available 100 in traditional\ncontracts the transparency is bound\nperipheral between the parties and the\nentities and the intermediaries involved\nas compared to smart contract\ntransparency is 100 available 24x7\nonline anyone can go and review audit\nand validate the transactions executed\nby the smart contracts archiving\narchiving is a big difficult problem for\ntraditional contracts as most of the\ntransactions are paper-based or the\nrecords are maintained offline it\nbecomes very difficult to maintain and\nidentify the traceability provenance of\nall the transactions which have happened\nin a traditional contract whereby in a\nsmart contract it becomes easy as all\nthe transactions have happened through\nthe smart contract there's a hundred\npercent traceability available from the\nprovenance point of view you can trace\nthe transaction from its day one the\npoint of origin till present day and\narchiving is automatically happening the\nlog the audit the transaction history is\nautomatically getting generated security\ndefinitely is a concern in traditional\ncontracts as the intermediaries and\ninvolved manual processes involved\nsecurity can be compromised at any level\nat any stage but in a smart contract the\nsecurity is maintained through\ncryptography mainly through public key\ninfrastructure the public and private\nkey infrastructure it is a very secure\nway of maintaining security and\ncryptography of the transactions using a\nsmart contract cost yes traditional\ncontracts are expensive the cost of\ntransaction is high as compared to smart\ncontracts as the middlemen are involved\nsmart contract the cost is low as we\ndon't have any intermediaries and only\nthe cost of transaction is charged by\nthe underlying infrastructure of the\nblockchain network which is running the\nsmart contracts signatures its manual\nprocess all the transactions are signed\nmanually and verified manually but here\nin the smart contracts all the\ntransactions are digitally signed using\nthe private key of the entities and can\nonly be decoded by the public key shared\nby the parties involved in the smart\ncontract so in a nutshell smart\ncontracts give us n number of advantages\nthe primary advantages are listed here\nand these are the advantages which\nenforce us to move towards an economy\nand to a system where we start using\nsmart contracts for our transactions to\navoid any disputes to keep the\ntransaction cost low thereby giving the\nadvantage to the end consumer now what\nis a smart contract let's consider a\nreal life example where you are taking\nout a chocolate from a vending machine\nyou deposit a two dollar note in a\nvending machine after that you hit a1\nbutton which is mapped against the\nchocolate bar that you want to buy as a\nresult a liver in the vending machine\nmoves and pushes out the chocolate so\nbasically even button is programmed to\nthe lever in order to move the chocolate\nout now a smart contract is very similar\nto a vending machine it eliminates the\nneed of an intermediary in case of the\nvending machine is replacing a direct\nseller and allowing you to make a\npurchase without a middleman and it\neliminates the need of escrow services\nnow smart contracts are self-executing\ncontract which contain the terms and\nconditions of an agreement between the\nparties and the peers who are involved\nin that english so the terms and\nconditions of an agreement are written\nin a piece of code and it is executed on\na blockchain based decentralized\nplatform now these agreements\nfacilitates exchange of any digital\nasset it could be digital currency it\ncould be shares it could be property or\nit could be anything which you want to\ntransact so a blockchain based\ndecentralized platform gives you a\ndemocratic system where the transactions\nare authorized by the majority of the\nparticipants and the identity of the\nparticipants is also kept anonymous now\nlet's consider an example where rachel\nis at the airport and her flight is\ndelayed but this inconvenience could\nhave been beneficial to richard as smart\ncontract insurance would ensure she is\ngiven a compensation for the flight's\ndelay instantly so just imagine there is\na smart contract which the insurance\ncompany has already deployed and it's\nmonitoring the flights delay rachel has\nalready taken that insurance for delay\nin flights so as soon as that condition\nis met for a delay of flight above x\namount of hours for example two hours\nthen in that case the insurance company\nwill automatically get that trigger and\nrachel will be credited with that amount\nfor which she is insured in her account\nso let's see how smart contract can be\nhelpful here so axa flight delay\ninsurance is one of the examples of\nethereum smart contract axa is an\ninsurance company the smart contract is\nlinked to the databases that record\nflight status so that smart contract is\nconnected to the databases it is\nfetching that information and evaluating\nthe delay it enables automatic\ncompensation when there is a delay for\ntwo hours or more so that is the\ncondition when the flight delay is\nbeyond to ours then the insurance\ncontract will get executed and rachel\nwill get paid a smart contract is\ncreated based on the terms and\nconditions so condition compensation is\nequal to flight delay is less than two\nhours based on the code smart contract\nholds the company's money until a\ncertain condition is satisfied this\nsmart contract is submitted to the nodes\non the blockchain network to their evms\nfor evaluation so evm is a runtime\ncompiler to execute smart contracts code\nit is the brain it is the electronic\nvirtual machine which executes the smart\ncontract all nodes on the network\nexecuting the code using the evm must\ncome to the same result because all the\nevms would have the same copy of the\nsmart contract deployed if the flight is\ndelayed two or more hours smart contract\nwill be self-executed and the\ncompensation amount will be given to\nrachel and that is the objective of the\nsmart contract without involvement of\nany middleman paperwork which rachel has\nto do to submit and then the insurance\ncompany going through the manual process\nall that has been bypassed and rachel\nhas been compensated directly now let's\nunderstand why do we need solidity for\ndeveloping our smart contracts now here\ncomes the important question which\nprogramming language does a smart\ncontract use there are two widely used\nprogramming languages for writing\nethereum smart contracts solidity and\nserpent however on blockchain platforms\nsolidity is widely used for implementing\nsmart contracts and this is what we were\ngoing to talk about in our subsequent\nslides now solidity is a high level\nprogramming language used for\nimplementing smart contracts it enables\nto check the program at runtime rather\nthan compile time solidity is a turing\ncomplete language it has all the\nconditions all the while loops for root\noperators etc which are there in any\nmature programming language in order to\nwrite your code in order to write your\nconditions if you have certain loop if\nyou have while conditions etc now what\nare the advantages of smart contract as\nwe have already discussed there are no\nintermediaries involved the process\nexecutes without the need of a third\nparty it's an automated process they are\nautomated with the code which eliminates\nmanual effort for execution it's a high\nspeed highly computative smart contracts\nwhich runs on programming code the speed\nof its execution is higher than a\ntraditional contract as the data is\nstored in the decentralized system the\nchances of modifying the data is\ndifficult and i would say more than\nimpossible accuracy based on the\nrequirements terms and condition of a\ncontract is recorded accurately so as\nsoon as any transaction is recorded it\nis registered on a blockchain network\nand it is immutable transaction no one\ncan modify or make changes in any record\nwhich has been added onto a blockchain\nnetwork through a smart contract now\nlet's take a look at certain blockchain\nimplementation of a smart contract using\nblockchain in voting process\ncan eliminate voting malpractices a\ncentralized voting system faces a lot of\nproblems when it comes to tracking votes\nthere could be manipulated identities\nthere could be manipulation in counting\nthere could be biased decision making a\nsmart contract is introduced to\neliminate all these malpractices there\nare certain predefined terms and\nconditions which are already set in the\ncontract no voter can vote from a\ndigital identity of any other voter the\ncounting is full proof every vote is\nregistered on a blockchain network and\nthe accounting is happening\nautomatically without any interference\nfrom a third party or dependency on a\nmanual process so terms and condition\neach id should be attributed to just one\nvote the validation is done by the users\non the blockchain network itself so the\nvoting process can be in a public\nblockchain or it could be in a\ndecentralized autonomous\norganization-based blockchain setup also\nbut it is 100 transparent and every\nvoting transaction is recorded result\nevery voters would get recorded on the\nledger and that information cannot be\nmodified it is transparently publicly\navailable for audit and verification now\nlet's take a look at one of the examples\nof our voting solidity contract so here\nwe have our voting solidity contract it\nis built in solidity and i'll just give\nyou a brief overview of what are the\nprimary functions in this so if we look\nat this particular contract this\ncontract gives you certain basic\nparameters like what should be the\nminimum number of participants or\nproposals which are required for voting\nthen what should be the minimum amount\nof time for debate that needs to pass\nbefore the vote can be executed then the\nmargin of votes for majority a proposal\npasses if there are more than 50 percent\nof the votes plus the margin so\nbasically we are defining what is the\nwinning condition what is the majority\nmargin for any word to be accepted then\nyou have data structure where you are\naccepting the proposals right and then\nsubsequently we are defining data\nstructures for members who are\nparticipating in the proposals who are\nsubmitting the proposals we are fetching\nthe addresses of the members basically\nthis is the digital identity of the\nmembers who are submitting the proposals\nand etc so the smart contracts basically\nallows you to create a voting system\nwhere you can add members we can remove\nthe members you can change certain\nvoting rules based on certain conditions\nlike if you want to increase the minimum\nquorum if you want to change the\ndebating period minutes or the majority\nrule changes then this is a function for\nsubmitting a new proposal for which the\nvoting has to happen so basically this\nexample is about if i have to take a\nvote within a decentralized autonomous\norganization for a particular decision\nso rather than a central authority\ntaking a decision you can have a voting\nmechanism within your organization to\ngive a majority to your proposal if you\nget the majority the proposal is\naccepted otherwise reject then there are\nperipheral functions like check proposal\ncode then there is a voting function the\nactual vote happens and for a particular\nproposal you start increasing or\ndecreasing the number of votes then you\nexecute the proposal if the majority has\nbeen achieved now let's take a look on\nhow to deploy a smart contract so here\nwe have our voting smart contract now we\nwill take a look on how to deploy our\nvoting smart contract on the ethereum\ntest network called robston this is our\nvoting smart contract now when you open\nremix you should also have meta mask\nwhich is a chrome plugin installed this\nis a utility in order to connect to the\nrobston test net which is an ethereum\ntest network so basically you say\noption.etherscan.io and this is the\nethereum test network on which we will\ndeploy our contract so once you log in\ninto the metamask you will have a\naccount created and in that account you\nshould have some test ethers already so\nthat you can use them to deploy your\ncontract so when you create an account\non uh robsten you can buy certain ethers\nusing the robston test faucet\nso when you reach this site that option\ntest faucet has already taken the\naddress for the account for which you\nare raising the request and you can\nraise request of one ether now whenever\nthis transaction will get processed your\naccount balance will get incremented by\none so as i already have ethers in it i\ncan utilize it to deploy my contract now\nin order to compile and deploy my\ncontract i have copy pasted it here and\nif i go to my run my remix has already\ncommunicated via injected web 3 to the\nmeta mask and taken my account which has\n7.83 ether\nnow i need to do some settings\nnow as my contract is compiled you can\nsee it has taken all the contracts you\ncan see the drop down and congress is my\nmajor contract now i will deploy my\ncontract so on the run section you will\nbe able to see in the drop down the name\nof the contracts which are there in my\nsmart contract like i had owned token\nrecipient then there's an interface and\nthere is a congress so i need to deploy\nmy congress contract now in order to\ndeploy this contract there is a\nconstructor which requires certain\ninputs so i can give certain values like\nwhat minimum number of proposals i need\n100 then minimum number of debates 10\nand margin of votes for majority so i\nsaid deploy now as soon as i'll click\ndeploy it is going to request me for gas\nbecause when the contract gets deployed\nit will deduct certain ethers from my\naccount so when i'll say submit\nif you notice now this transaction has\ngot initiated on the robsten\netherscan.io i click on it so this is\nthe transaction on which the contract is\ngetting deployed it is taking time and\nthe contract is getting processed on the\nethereum network now once it will get\ndeployed we will be able to see the\naddress at which the contract has got\ncreated and deployed now as you can see\nmy contract has got deployed at the\naddress 0xcc i can load it now this is\nthe contract address and this is the\namount of actual ether which was spent\nfrom my account in order to deploy the\ncontract\nnow there are certain attributes on the\noption ether scan which you can go and\ncheck you can verify and publish your\nsmart contract over here so that others\ncan also view the code and utilize your\nsmart contract and if you go and check\nyour meta mask this is the transaction\nwhich has just been done in your account\nand if you click it will take you to the\nsame transaction which we opened here\nnow after you have deployed the contract\nyou can interact with your contract\ndirectly through remix just to test your\ncontract all the pink members are the\nones which make changes onto the\nblockchain and all the blue ones are the\nones which are only performing read\noperations so in order to do any read\noperation you will not be requested to\nspend any gas so there will be no\npop-ups for metamask requesting for gas\nspending but if you do any of these pink\nactions then you will be required to\nspend gas as it will be requiring to\nmake some changes onto the blockchain so\nthis was a example of a voting smart\ncontract and this will be available as a\nlink for you to take a look now all our\nother contracts which we will be\ncovering subsequently will be deployed\nin a similar fashion on the robstone\ntest net now let's take another example\nif you want to use smart contract to\nissue your own cryptocurrency or called\ndigital token you can use ethereum based\nsmart contract to create your own\ndigital tokens for performing\ntransactions a design and issue your own\ndigital currency create a tradable\ncomputerized token that can be utilized\nas a currency share or any asset which\nyou want to transact these tokens use a\nstandard coin api like in case of\nethereum we have standardizations of\nerc20 etc which allows contract to\nautomatically access any wallet for\nexchange as a result you build a\ntradable token with a suffix supply and\nthis particular platform becomes like a\ncentral bank issuing a digital money\nyour smart contract becomes the bank\nissuing the money so let's take this\nexample here so this is a implementation\nof a erc20 token which is a\nspecification by ethereum and\nthe primary attribute for this token is\nthat you need to provide a name of your\ntoken a symbol the decimals to which you\nsupport and the most primary is the\npredefined supply so just like in an\neconomy you have limited supply of money\nhere also you have to define what will\nbe the supply of your tokens and it will\nbe capped that will be the supply so you\nneed to redefine these parameters\nand then you create certain data\nstructures within solidity to keep a tap\non the balances of the entities to which\nyou are giving the tokens and how much\nallowance you want to keep per address\nthen there are certain methods which you\nhave to implement as per the erc20\nspecification like transfer transfer\nfrom approve and call etc so all these\nmethods in a typical token allows you to\ndo the transaction send and receive your\ncustom token among multiple parties so\nthis would also be available as a link\nfor you to take a look now let's take\nanother example of a use case for\ncrowdfunding using smart contracts to\ncrowdfund your project so suppose you\nwant to start a business and for a\nbusiness you need a lot of funding which\nis required but who would lend that\nmoney to someone whom they don't trust\nhow will you generate that money for\nsuch problems smart contract plays a\nmajor role with ethereum you can build a\nsmart contract that will hold a\ncontributor's funds unless a given date\nor a goal is met based on the result the\nfunds will be released to the contract\nowners or will be sent back to the\ncontributors so basically you can create\na crowdfunding project for yourself if\nyou want to raise certain amount of\nmoney and the contributors or the\ninvestors will give you the money but\nthe amount will be kept on hold till the\ntime your project goal or date has been\nmet and accordingly the investor will\nget you the token which you have\ndeveloped for crowdfunding in us or his\naccount accordingly now centralized\ncrowdfunding system has plenty of issues\nwith management systems so therefore a\ndow a decentralized autonomous\norganization is utilized for\ncrowdfunding the terms and conditions\nare transparently set in the contract\nevery individual participating in the\nfunding is given a token and the token\nis credited to their ethereum based\naccount now every contribution gets\nrecorded on the blockchain because then\nthe token transfer has happened from the\ndow to the individual investor that\ntransaction get recorded on the\nblockchain network so let's uh quickly\ntake a look at the uh contract for a\ncrowdsale also so a crowdsale contract\nprovides you the basic attributes like\nwhat is the goal of the funding how much\nmoney you need to raise what is the\namount raised real time you can keep a\ntrack what is the deadline right and\nwhat is the price of the token in\nethereum basically what is the your\ntoken amount in ethereum then there\ncould be that you might give certain\ntokens in reward then you can have\nattributes for your reward and then you\nhave your methods in order to keep a\ncheck that once you have received the\nfunds you can withdraw the funds you can\ncheck whether you have reached the goal\nfor funding and then you have the\nmethods for transferring tokens from the\nsender to your own account this\nparticular kind of contract allows you\nto maintain and keep a check on amount\nof funding you have received or you want\nto receive have you achieved your target\nwho are the investors in your token how\nmuch percentage share belongs to your\naccount and how much percentage share\nhas been already been distributed on\namongst the investors etc so everything\ncan be tracked so the smart contract can\nbuild in such a fashion that there are\nmethods and utilities available in order\nto run your entire crowdfunding so this\ncontract is also available in the link\nand you can take a look now that that's\ndone saurabh will teach us about bitcoin\nmining and how bitcoin wallets work so\nlet's get started and let's talk about\nwhat is bitcoin mining so what is\nbitcoin so let's take an example so\nthere is someone who wants to send five\nbitcoins to rachel now we will see how\nthis transaction can happen now bitcoin\nis based on the concept of digital\ncurrency anyone across the globe can\ntransfer amount in bitcoin irrespective\nof the geography from anyone to anyone\nso basically you need to just open an\naccount on the bitcoin network have some\nbitcoins in it and you can transfer it\neither you can purchase the bitcoins\nonline through some exchanges or you can\nmine it so once you have bitcoins in\nyour account you can transfer it to\nsomeone you want whose address you have\nnow do you want to know how this\ntransaction work well this transaction\nis done by bitcoin mining so we will go\ndeep and understand that\nhow the bitcoin transaction works what\nall entities are involved behind the\nscenes in order to maintain the sanity\nof the bitcoin network and make sure\nthat whomever you wanted the bitcoin to\nreach to has reached and there is no\nloss of bitcoin in the network and it is\na successful transaction so let's\nunderstand certain basics so what's in\nit for us today we need to know what is\nbitcoin we will understand the\nunderlying technology blockchain so we\nwill talk about that then we will see\nwhat are the advantages of bitcoin as\ncompared to other digital currencies and\nother digital technologies then we will\ngo into the concepts of bitcoin mining\nthen what is bitcoin mining and we will\ndo a demo on certain aspects of bitcoin\nmining now what is bitcoin bitcoin is\nthe first decentralized digital currency\nthat allows users to transfer money\npeer-to-peer without any intermediaries\nlike banks governments agents brokers\nnothing is involved and all this is done\nusing blockchain technology so as we saw\nin our previous example two parties\nwants to exchange money transfer money\nthey don't need an intermediary now\nbitcoin can be used for online purchases\ne-commerce transactions it can be used\nas an investment instrument and it can\nbe primarily used for payments to buy\ngoods and services now it was created in\n2009 it came into existence by a person\nor a group of people called satoshi\nnakamoto now\nbitcoin helps transferring of assets\nfaster than regular fiat currencies it\nhas definitely lower transaction fees\nbecause as it has removed the\nintermediaries from between the cost of\ntransaction also goes down and it is\ncryptographically secure it uses\ncryptography infrastructure and thereby\nthe identities of the sender and the\nreceiver are also secure and entire\ntransaction is cryptographically signed\nand the user's information who are doing\nthe transactions or are part of the\nnetworker is also hidden and secure now\nwhat are the advantages of bitcoin so it\nallows fast and quick peer-to-peer\ntransactions it is impossible to\ncounterfeit or hack the transactions\nwhich are running on a bitcoin network\nand it's an overall decentralized\nprocess there is no centralized body\nwhich is controlling the transactions or\ncharging a fees in order to validate the\ntransaction it is the participants in\nthe decentralized network who are taking\ncare of the sanity of the network\nthereby making sure that the overall\ntransaction cost is low all the\ninformation is accessible to public it\nis available publicly on a public ledger\nanyone can go and view the transactions\nand the volume of the transactions\nhappening on the bitcoin network and it\nis a low fee transaction it is\ncomparatively low to other mediums and\nchannels through which today digital\ntransactions are made now what is\nblockchain so bitcoin runs on the\nunderlying technology of blockchain\nblockchain is a public distributed\nledger in which transactions made in\nbitcoins or any other digital currency\nare recorded in a chronological order so\nlet's see certain features it is\ncryptographically secure signed using\nyour private key and then shared on the\nnetwork with the public key it is\nimmutable any record or any transaction\nadded on the blockchain cannot be\nmodified or altered it is run by a\ndecentralized system there is no\ncentralized authority on the body and\nthe transactions are stored in\ncontainers aggregated in containers\ncalled blocks so a block is the smallest\nunit of a blockchain which records all\nthe transaction a basic structure of a\nblock is something like this it has four\nfields these are the primary attributes\nfor block it has something called as\nprevious hash so the previous hash\nattribute stores the value of the hash\nof the previous block and that's how the\nblocks are linked to each other data\nthis is the aggregated set of\ntransactions which are included in this\nblock so these are the set of\ntransactions which were mined and\nvalidated and included in the block\nnonce so in proof of work consensus\nalgorithm which is used in bitcoin nonce\nis a random value which is used to vary\nthe output of the hash value so every\nblock is supposed to generate a hash\nvalue and nonce is the parameter which\nis used to generate that hash value and\nthe proof of work is the process of\ntransaction verification done in\nblockchain now hash is the resultant\nhash value obtained by passing the\nprevious hash value the data and the\nnonce through the sha-256 algorithm to\ngenerate the hash of this block so this\nis the digital signature of the block\nwhich is generated and this is the\nbasically identity of this block now\nshk-256 is a cryptographic hash\nalgorithm which produces a unique 256\nbit alphanumeric hash value for any\ngiven input and that is the unique\nfeature of this cryptographic algorithm\nwhatever input you give it will always\nproduce a 256-bit hash now let's\nunderstand the concepts of bitcoin\nmining what is bitcoin mining bitcoin\nmining is the process of verifying\nbitcoin transactions and recording them\nonto the public blockchain ledger in\nblockchain the transactions are verified\nby bitcoin users so basically the\ntransactions have to be verified by none\nother than the participants of the\nnetwork those who have the required\nhardware and computing power and those\nentities are called miners so we will be\ntalking about them later but the point\nto be highlighted is that there is\nnothing like a centralized body as in\ncase of legacy transactions where we\nused to be dependent on a regulatory or\ngoverning body or a bank to make our\ntransactions go through now in bitcoin\nhere any user with mining hardware and\ninternet access can take apart that kind\nof computer can be a participant and\ncontribute to the mining community\nprocess is solved based on a difficult\nmathematical puzzle called proof of work\nso every miners job is to solve the\nmathematical puzzle which is called\nproof of work in order to validate the\ntransaction and earn the reward and all\nthe miners as they are competing amongst\nthemselves to mine a particular\ntransaction the miner who first solves\nthe puzzle gets the reward now users\ntrying to sell the puzzle as i said are\ncalled miners they are the participants\nin the network who have the necessary\nhardware and computing power to do all\nthe transactions to validate the\ntransactions and validate it they are\ncalled as miners now in order to\nunderstand bitcoin mining we need to\nunderstand three major concepts of\nblockchain it is based on distributed\npublic ledger it uses sha-256 encryption\nalgorithm and proof of work is the\nunderlying consensus algorithm for\nbitcoin mining so distributed public\nledger a distributed ledger is a record\nof all transactions maintained in the\nblockchain network across the globe in\nthe network the validations of\ntransaction is done by bitcoin users\ncalled as miners sha-256\nnow blockchain prevents unauthorized\naccess by using a hash function called\nsha-256 to ensure that the blocks are\nkept secure they are digitally signed\ntheir hash value once generated cannot\nbe altered now seq 256 it takes an input\nstring of any size and returns a fixed\nlength 256 bit output value and that is\nthe primary feature of shf 256\nencryption algorithm you give any input\nit will always give you a 256-bit output\nand it is a one-way function you cannot\nderive the input reversally from the\noutput what you have generated and third\nis the proof of work in blockchain\nmining is a process to validate\ntransactions by solving a difficult\nmathematical puzzle called proof of work\nnow in order to do that the primary\nobjective of the minor is to determine\nthe nonce value and that nonce value is\nthat mathematical puzzle that miner is\nrequired to solve in order to generate a\nhash which is less than the target\ndefined by the network for a particular\nblock now in the bitcoin network users\ntrying to solve mathematical puzzle are\ncalled as minus now the puzzle is solved\nby varying a nonce which produces a hash\nvalue lower than a predefined condition\nwhich is called as the target miners\nverify the transactions and add the\nblock to the blockchain when confirmed\nand verified as of today the miners who\nsolve the puzzle gets a reward of 12.5\nbitcoins now once a block is added to\nthe blockchain the bitcoins associate\nwith the transactions can be spent so\nonce the block is validated then the\ntransfer of bitcoins associated with the\ntransactions aggregated in the block the\ntransfers are made then from one account\nto the another now in order to generate\nthe hash let's see you use the sha-256\nhashing algorithm you define the hash\nvalue if it is less than the defined\ncondition the target then the puzzle is\ndeemed to be solved and if not then you\nkeep on incrementing nonce value and you\nrepeat the sha-256 hashing function\npassing on to the nonce value and you\ndefine generate the hash value again and\nyou keep doing this process till the\ntime you get the hash value which is\nless than the target now let's take an\nexample so for example beyonce wants to\nshare 10 bitcoin with jennifer now in\norder to do that what will be the steps\nso beyond transaction data is shared\nwith bitcoin users the miners from the\nmemory code the transaction goes and\nsits in a memory pool of unmined\ntransactions so in a memory pool set of\nunmined or unconfirmed transactions wait\nuntil they are verified and included in\na new block they remain in that\nunconfirmed transaction pool now miners\ncompeting to validate the transaction\nusing proof of work they keep on\ncontinuously pulling the unconfirmed\ntransaction pool they pick up those\ntransactions and start validating those\ntransactions they aggregate in a data\nblock and start validating they start\nsolving the puzzle the miner who solves\nthe puzzle first shares his result\nacross the other nodes the other set of\nminers now once the block has been\nverified the nonce has been generated\nthen the nodes will start granting their\napproval if maximum nodes grant their\napproval the block becomes valid and is\nadded to the blockchain now\nsimultaneously the miner who has solved\nthe puzzle will also receive the reward\nin the meanwhile which will be of 12.5\nbitcoin which as of today stands at 98k\naround dollars now the bitcoins the 10\nbtc for which the transaction was\ninitiated now will get triggered and\nwill get transferred from beyond to\njennifer now let's take a look at\ncertain facts in proof of work a\npredefined condition the target is\nadjusted for every 2016 block which is\napproximately every 14 days and an\naverage time to mine a block is 10\nminutes so basically the target keeps\nautomatically adjusting itself to keep\nthe block generation within the 10\nminute time frame so this is the\nrepresentation so in order to keep the\ntime frame for block generation within\n10 minutes the target keeps on adjusting\nitself now the difficulty of the puzzle\nchanges the target changes depending on\nthe time it takes to mine a block so\nthis is how a difficulty of a block is\nbeing generated it is the hash target of\nthe first block divided by the hash\ntarget of the current block so this is\nthe difficulty which is being changed\nafter every 2016 blocks so basically it\nis very hard to generate the proof of\nwork but it is very easy to verify by\nthe miners so once you have solved the\npuzzle and you have broadcasted that yes\nyou have earned you have validated a\nrecord you have determined the puzzle\nfor other miners it is very easy to\nverify what you have done and once they\ngive their consensus the majority then\nthe block gets validated and gets added\nto the blockchain now since the\ndifficulty depends on the hash target\nits value keep on changing after every\n2016 block as i said and as you can see\nin due course from the day of inception\nof bitcoin in 2009 till today difficulty\nhas increased exponentially and it has\nbeen increasing and thereby the entire\neffort of mining and the computing power\nis also increasing so as of what was the\nresources which were required to do\nmining in 2009 you require more hashing\npower more computing power in order to\ndo the mining today now what if someone\ntries to hack the data so let's see\nblockchain is a chain of blocks abc now\neach block has solved a puzzle and\ngenerated a hash value of its own which\nis its identifier now suppose a person\ntries to tamper a block block b and\ntries to change the data which is\naggregated in the block so if the data\nof the block will change the hash value\nwhich is the digital signature of the\nblock will also change thereby it will\ncorrupt the chain which is subsequent to\nit basically the blocks ahead of block b\nwill all get dealing because the\nprevious hash value of block c will not\nremain valid so in order for the hacker\nto make the entire blockchain valid for\nthe block b which he has changed he has\nto change the hash value of all the\nblocks ahead of block b which will\nrequire huge huge amount of computing\npower which will be next to impossible\nso as you see the results in the\nfollowing block being invalid so with\nthis whole thing the blockchain is\nmaking sure that the entire sequence\nremains non-hackable and prevent data\nmodification now let's see what are the\nunderlying hardware requirements for\nbitcoin mining and how the hardware has\nevolved so in the early days miners used\nto solve the puzzles using regular\nprocessors the controlling processor\nunit cpus now but it used to take a lot\nof time for mining though the difficulty\nlevels were low but still it used to\ntake a lot of time now as i said the\ndifficulties never keep on changing and\ngrowing so the miners also had to\nincrease the processing power so this\ndiscovered that graphical processing\nunits gpus proved to be more efficient\nthan regular cpus so but this also had a\ndrawback of consumption of electricity\nso any miner who has to calculate the\nreturn on investment on the hardware he\nalso has to accommodate the cost of\nelectricity and other resources which\nare going in in order to do the mining\nso finally as of today they are using a\nhardware called asic application\nspecific integrated circuit which was\nspecifically introduced for mining which\nconsumes less power and has a higher\ncomputing power and a better hardware\nfor mining so miners are profitable when\ntheir cost of resources to mine one\nblock is less than the price of the\nreward they receive so definitely they\nhave to have the investment less than\nthe reward what they own so as of today\nin blockchain miners use their resources\nto verify a transaction they each time a\nblock is mined new bitcoins are created\nin the network so the bitcoin total\nsupply is limited it is at 21 million\ndollars approximately 21 million bitcoin\nare in supply 17 to 18 million bitcoins\nhave already been mined so only three to\nfour million are left as of today a\nreward of 12.5 bitcoin is given to the\nminer on doing the transaction\nverification but the bitcoin mining\nreward goes by the huffing principle the\nreward given to a miner is half every\n210 000 blocks which is approximately\nevery four years so then after that\nthreshold is reached the bitcoin reward\nwill go down to 6.25 bitcoins so let's\ntake an example of a lottery ticket\nwhere your chances of winning is\ndifficult so we are talking about what\nis bitcoin mining pool your chances of\nwinning the lottery is difficult but in\na community if individuals buy multiple\nlottery tickets and pool their tickets\ntogether then this will increase their\nprobability and chances of winning more\nso suppose you won the lottery then\nbased on the contribution the reward is\ndistributed among all the participants\nbitcoin mining pool is a similar thing\nit's a process where multiple nodes\nshare their resources together to mine a\nblock now when a block is solved the\nminers split the reward equally based on\nthe amount of processing power they have\ninvested so it takes the pool members to\ngenerate a final hash value then it\nchecks how much amount of work was\ncontributed by each pool member and as a\nresult the bitcoin reward gets\ndistributed proportionally amongst the\nparticipants now let's take a look at a\ndemo on how can you see what is the\nbitcoin reward now this is a actual\nblock of the bitcoin network as you can\nsee this is a block and\nthis is the block reward 12.5 bitcoin so\nthis was a block which was mined\nthis is the block number and\nthese are the set of transactions which\nwere part of this block now once this\nblock was mined by the miner all these\ntransactions then be done these are the\ntransfers of bitcoin from one account to\nthe other this is the nonce which was\ngenerated by the miner or the mining\npool in order to mine the block and\nthese are the other attributes\nand if you take a look at this url this\nis an example of a mining pool it's a\ndemo account where the participants have\nshared their mining resources and they\nare mining it in a pool and see this is\nthe reward for which they are mining\nthis is the unconfirmed reward this is\nthe confirmed reward this is what they\nhave already validated and this is what\nthey have earned so far and let's see\nwhat's in store for us today so what's\nin it for you today we're gonna\nunderstand why do we need blockchain\nwallet what is a blockchain wallet how\ndo these wallet work what are the\ndifferent types of blockchain wallets\nthere are comparisons and a demo on the\nusage of these blockchain wallets and we\nwill try to do certain transactions\nusing these wallets now before these\nblockchain wallets came into existence\nwhat were the means in order for us to\ndo the transactions and what were the\ndrawbacks in the old days the\ntransactions with whatever medium and\nchannels we had the problems were that\nthe transactions were slow and banks\nwere the central point of failure\nbasically any transaction which has to\ngo through has to go through some\nintermediary channels and has to pass\nthrough certain intermediaries like bank\nwhich makes them a single point of\nfailure also there are issues in keeping\ntrack of all accounts and balances data\nget jeopardized manipulated or even get\ncorrupted across multiple systems where\nthe accounts and balances are maintained\nnow here comes into existence what is\ncalled as blockchain wallet now what is\nblockchain wallet a blockchain wallet is\na cryptocurrency wallet that allows\nusers to manage different kind of\ncryptocurrencies for example bitcoin\nethereum etc now a blockchain wallet\nhelps exchanging of funds easily\ntransactions are secure as they are\ncryptographically signed the wallet is\naccessible from web or mobile devices\nand the privacy and identity of the user\nis maintained so therefore a blockchain\nwallet provides all the features which\nare necessary for a safe and secure\ntransfer and exchange of funds between\ndifferent parties a blockchain wallet is\na typical cryptocurrency wallet that\nallows users to manage cryptocurrencies\nit is very similar to the process of\nsending or receiving money through\npaypal or any other gateway which you\nuse today but now you can use\ncryptocurrency instead similar to paypal\nwhich you're using for making\ntransactions with your fiat currency now\nlet's take a look at the ecosystem of\nblockchain wallets here are certain\nexamples like electrum blockchain.info\njaxx mycelium samurai and bitcoin paper\nwallet these are just to name a few\nblockchain wallets which are existing in\nthe market but there are many more based\non the requirement you have based on the\nsecurity you require and based on the\nkind of wallet which suffices your need\nso we will see what are the\ncategorizations of these kind of wallets\nare now how do blockchain wallets work\nlet's take a look so before we move on\nto how blockchain wallets work let's\nunderstand what a private and a public\nkey is and how are these keys related to\na blockchain wallet now whenever you\ncreate a blockchain wallet you are also\nprovided a private and a public key\nwhich is associated with your wallet now\nlet's check an example in order to\nunderstand this imagine a person knowing\nyour email address is sending you an\nemail so in our regular day to day\nactivity if we want to receive an email\nfrom someone we give him or her our\nemail id and expect an email from them\nnow what if an unknown person is able to\nsend emails through my account so i am\ngiving my email address for receiving\nemail but when i am disclosing my email\nid i am not assuming that someone will\nbe able to send emails through my\naccount because then for that he has to\nbe aware of my email account password so\nknowing your email address will not give\na person the ability to send an email\nfrom your account you are not giving\nyour password to the person to send an\nemail you're just giving the email\naddress to send an email from a\nparticular email address an individual\nhas to be aware of the password\nassociated with it now blockchain wallet\nfollows a similar process using public\nkey and private key both together public\nkey is similar to your email address so\nbasically whenever your wallet is\ngenerated a public key is generated you\ncan share that public key with anyone in\norder to receive funds private key is\ntop secret it's similar to your password\nit should not get hacked or you should\nnot disclose it to anyone and you use\nthis private key to spend your funds so\nnow instead of sending an email imagine\nyou want to transfer money to your\nfriend this transfer process is done\nthrough your blockchain wallet with\nblockchain wallets you can now send and\nreceive cryptocurrencies so as i said a\nblockchain wallet has two keys a public\nkey and a private key public key is\nshared with everyone just like an email\naddress private key is just like your\npassword which should be kept secret\nwith the sender so with blockchain\nwallet no one will be able to send\ncrypto coins just like emails through\nyour public key until they know your\nprivate key but if someone gets access\nto your private key there is a high\npossibility that your account is hacked\nand you might end up losing all the\ncryptocurrency deposits in your account\nnow let's take a look what are the\ntypical features of a blockchain wallet\nit's easy to use it's just like any\nother software or a wallet which you use\nfor your day-to-day transactions it is\nhighly secure it is just a matter of you\nsecuring your private key and it allows\ninstant transactions across geographies\nbarrier free without intermediaries and\nalso these transactions charges you low\ncost fee and these wallets help you do\ntransactions across multiple\ncryptocurrencies so you can make\npayments across cryptocurrencies so\nwhich helps you do easy currency\nconversions now let's talk about what\nare the different type of blockchain\nwallets now basically there are two\ntypes of blockchain wallets based on the\nprivate keys one is hot wallet and\nanother is the cold wallet hot wallets\nare like normal wallets which we carry\nfor day-to-day transactions and these\nwallets are user-friendly cold wallets\ncold wallets are similar to a vault\nwhere cryptocurrencies are stored with a\nhigh level of security now let's take a\nlook at the differences hot wallets are\nonline wallets through which\ncryptocurrencies can be transferred\nquickly they are available online on\ninternet example coinbase\nblockchain.info cold wallets they are\ndigital offline wallets where the\ntransactions are signed offline and then\nlater disclosed online so they are not\nmaintained on the cloud on the internet\nthey are maintained offline to have high\nsecurity and the examples of cold wallet\nare trezor and ledger now in case of hot\nwallets private keys are stored in the\ncloud for faster transfer in case of\ncold wallets private keys are stored in\na separate hardware which are\ndisconnected from the internet or the\ncloud or are stored in a paper based\ndocument hot wallet they are easy to\naccess available online 24 7. it can be\naccessed through desktop or mobile but\nhas a risk of unrecoverable theft when\nhacked cold wallets this method of\ntransaction helps in protecting the\nwallet from unauthorized access from\nhacking and other online vulnerabilities\nnow the wallet can be further\ndistinguished on these criterias there\ncan be software wallets they can be\nhardware wallets which are like kind of\nusb driven and you plug into your usb\ndrive and your hardware wallet can be\nused or they are a typical paper based\nwallet where you print your public key\nand a private key on a paper and keep it\nin a secure place let's talk about\nsoftware wallet a software wallet is an\napplication that is downloaded on a\ndevice either it could be a desktop or a\nmobile or it could be a web-based wallet\nwhich can be accessed online now here\nare certain examples dax bread wallet\nand copay are the popular software\nwallets so software wallet can be\nfurther categorized into desktop wallet\nonline or we can call it web wallets or\nmobile wallets now desktop wallets are\nlike cold wallets in which the private\nkeys are stored in cold servers\nbasically the desktop wallets the\nprivate keys are stored in your desktop\nyou can unplug it from the internet do\nsome offline transactions and then bring\nit back online now in case the main\nserver is lost then a cold server\nbasically your desktop is used as a\nbackup server these wallets can be\ndownloaded on any computer but can only\nbe accessed from the system they are\ninstalled on so you make sure the\ndesktop or the machine on which you i\nhave downloaded the desktop wallet is\nsafe has a backup you're maintaining the\nhardware you're not letting the machine\ngo anywhere and it is on a secure\nlocation now these wallets are\ndefinitely cost efficient and one of the\nexamples is electrum and is one of the\nmost popular desktop wallet online\nwallets are the other kind of hot\nwallets that run on the cloud that are\navailable on the internet now here users\nhave the benefit of accessing these\nwallets across any device it could be\ntablet desktop or you can use it from\nyour mobile browser the private keys are\nstored online and are managed by a third\nparty you have to be dependent on a\nthird party service now for example\ngreen address is a bitcoin wallet which\nis available on the web has an android\napp is available on a desktop and also\nis available on ios apple mobile wallets\nmobile wallets are like similar to\nonline wallets except that they are\nbuilt only for mobile phone usage and\naccessibility these wallets are also\nuser friendly and they have a user\nfriendly interface for which helps you\nin doing transactions easily the example\nis mycelium which is the best available\nmobile wallet hardware wallet hardware\nwallet is a type of cold storage device\ntypically like a usb which stores the\nuser's private key in a protected\nhardware device\nthese wallets are similar to portable\ndevices that can be connected to the\ncomputer can be plugged in as i said\nearlier it is less prone to malware\nattacks malicious attacks and it is hack\nproof examples are nano ledger trezor\nand kiki are the top hardware wallets\navailable in the market to make a\ntransaction from your hardware wallet\nyou have to ensure the hardware wallet\nis plugged into your computer system\nbefore you can do a transaction from\nyour hardware wallet paper wallet a\npaper wallet is an offline process for\nstoring cryptocurrencies this wallet is\na printed paper consisting of both your\nprivate key and a public key which are\naccessed using a qr code now since these\nwallets are safe they are widely used\nfor storing large amount of\ncryptocurrencies now for example our\nbitcoin paper wallet and my ether wallet\nare one of the widely used paper wallets\nbut the question arises how do i add\ncryptocurrency in my paper wallet in\norder to make a transaction with your\npaper wallet paper wallet works with\nyour software wallets the online wallets\nto transfer funds from your software\nwallet to the public address shown on\nyour paper wallet so basically first you\npark your funds in a software wallet\nthen you transfer the funds from your\nsoftware wallet to the public address\nprinted on your paper wallet now let's\ndo the comparison blocked in info\nblockchain info is a cryptocurrency\nwallet which supports bitcoin and\nethereum it is easy to use and has a low\ntransaction fee it has its apis exposed\nyou can easily use them to order to make\nyour own custom wallets also ledger nano\nledger nano is a hardware wallet which\noffers a high security to your account\nit is available for bitcoin ethereum and\nlitecoin users it is also possible to\nmaintain multiple accounts and access\nthem anytime bitcoin paper wallet paper\nwallet helps you to print your own\ntamper resistant bitcoin wallet it\nminimizes the threat of hacking jacks\njax is a software wallet which enables a\nuser to exchange currencies within the\nwallet it is available for bitcoin\nethereum litecoin and many other\ncryptocurrencies with jax a user can\nview his updated balance as soon as the\nprocessing is complete now let's take a\nlook at certain demos for the different\nkind of wallets we have talked about so\nlet's first take an example of paper\nwallet so bit address dot org provides\nyou a paper wallet it uses the client\nside javascript in order to generate a\nrandom hash for your wallet so you keep\nmoving your mouse and it will generate a\nhash public and private key it is\nrecommended that when you are doing this\nprocess you should be disconnected from\nthe internet and once these keys are\ngenerated you can print it and keep it\nsecure and clear the cache of your\nbrowser so as you can see on the screen\nthis is my public key for receiving my\nbitcoins and this is the private key for\nme to spend it i can print it and keep\nit handy with me but of course the\nsafety of these physical documents\ncannot be entirely guaranteed if a\nhacker discovers the location of your\npaper wallet and physically steals it\nthen they can access your bitcoin\nholdings so basically it is of high\nimportance that you keep the paper\nwallet in a very very secure location\nsome users hide or disguise the paper\nwallet it should be protected from\nphysical damage if the keys fade or can\nno longer be scanned then the user will\nnever again be able to access the\nbitcoin which are parked in that address\nalso take care if you are using an\nincorrect type of printer that also may\ndamage the paper wallet\nnow let's take a look for our second\nexample of online wallet here we are\ntaking an example of bitpay so you can\ndownload bitpay online and create your\naccount over here\nyou can create a personal wallet you can\ncreate a shared wallet or a joint share\nwallet once you create a wallet like if\nyou see the example over here this is my\npersonal wallet and i have 3.645\ntest bitcoins over here\nnow in order to receive test bitcoins in\nmy account you can receive these test\nbitcoins from testnet dot coin faucet\ndot eu's hyphen in\nnow in order to receive it you just need\nto\ncopy\nyour bitcoin address in the testnet\naddress\nso the test net has given me 0.87\nbitcoin so now my balance has increased\nfrom 3.5 to 3.64 and i can see this\ntransaction\nsee three minutes ago i just received\n0.872287 bitcoin the transaction is\nstill in process but in a while as this\ntransaction is getting mined on the test\nnet i will receive it now as i have\nreceived it i can even make a\ntransaction and send it to someone\nso from my personal account i can send\nbitcoin to\nsomeone whose bitcoin address i have and\ni have to just paste it over here\ntransfer to bitcoin wallet either i can\nselect one of my own wallets or i can\nsearch for any other bitcoin address\nwhich someone has shared with me and i\ncan send it to that particular address\nnow let's take an example of our\nhardware wallet how does hardware wallet\nworks with the online wallets so here we\nhave metamask which has a feature of\nconnecting with hardware wallet so once\nyou have metamask installed you will see\nthis option of connect hardware wallet\nnow metamask has provided support for\ntrezor so now once you connect your\nhardware wallet the usb with your\ncomputer\nyou can select an account you want to\nview on that particular hardware wallet\nand you can only choose one at a time\nand then you can start using that\nparticular wallet for your decentralized\napps so basically once you have your\nhardware connected it is integrated with\nyour meta mask and then you can start\nrunning your decentralized apps so that\nthey can start using the tokens or the\ncurrency in the particular hardware\nwallet so use your hardware account like\nyou would with any ethereum account log\ninto dapps and send ethereums buy and\nstore erc20 tokens and non-fungible\ntokens like cryptokitties so if you\nclick connect to trezor over here\nmetamask will start looking out for the\nconnected treasure device thank you for\na fascinating session saurabh now let us\nlearn how blockchain and ethereum are\ndifferent from one another after which\nwe will tell you 10 things you probably\ndidn't know about bitcoin some\napplications of blockchain and how you\ncan become a blockchain developer and\ntoday we're going to talk about bitcoin\nversus ethereum now before we get into\nit let's see what the nobel prize winner\nin economics milton friedman had to say\nin 1999 he believed that the internet\nwas going to be one of the major forces\nin reducing the role of the government\nhe also believed that the one thing that\nwas missing was reliable electronic cash\nand just like he predicted in 2009 the\ncryptocurrency bitcoin was born so what\nexactly is a cryptocurrency\na cryptocurrency works very similar to\nhow our normal currency works now normal\ncurrency could be dollar euro pound yen\nrupees and so on now any form of\ncurrency that isn't a cryptocurrency\nfalls under the banner of normal\ncurrency the normal currency is also\nknown as fiat currency now the major\ndifference between cryptocurrencies and\nfiat currencies is that cryptocurrencies\nare decentralized what does that mean\nthis means that cryptocurrencies don't\nhave a central authority controlling\nthem now for example they don't have a\nbank or a government that regulate how\nthe cryptocurrency works in a way the\ncryptocurrency works in a very\ndemocratic fashion any change that needs\nto take place is done only after a\nmajority of the people using the\ncryptocurrency agree to it\ncryptocurrencies and fiat currencies are\nsimilar because both them were created\nas a medium of exchange however that's\nwhere the similarity ends with\ncryptocurrencies there are no third\nparties involved for example with fiat\ncurrencies you have banks your money\nlenders governments and so on with\ncryptocurrencies we have cryptographic\nfunctions to ensure that the\ntransactions are kept secure bitcoin\nuses the sha-256 algorithm to ensure\nthat the transactions are kept secure\nbut most importantly cryptocurrencies\nuse blockchain\nnow a blockchain is a set of records\nthat are placed into a container known\nas a block now these transactions are\nkept public and in a chronological order\nso what is bitcoin bitcoin which was\nreleased in 2009 by the still unknown\nsatoshi nakamoto is a cryptocurrency\nthat's decentralized which means that\nthere's no central authority that\ncontrols how it works it works using\nencryption techniques like the sha-256\nalgorithm to help people send and\nreceive money across the world now as i\nmentioned before the payments are\nsecured using cryptography the most\nimportant point about bitcoin is that it\nhelps keep the identity of the people\nsending and receiving money anonymous\nthe transaction fee is also very low now\nwe all know that when we perform a\ntransaction with the bank some amount of\nmoney or service charge is levied on us\nhowever with bitcoin this value is very\nvery low so what is ether or ethereum\nethereum which was created in 2015 by\nvitalik buterin is a cryptocurrency\nwhich provides ether tokens this is\nequivalent to bitcoins that you find in\nthe bitcoin network ether is used by\nusers to build and deploy decentralized\napplications now these are applications\nwhose back-end code is placed in a\ndistributed peer-to-peer network now\nthis is different from a regular\napplication as the backend code is\nplaced in a centralized server in this\ncase ether is also used to pay for\nservices like the computational power\nthat is required before a block can be\nadded to the blockchain and as\ntransaction fees ether also works very\nsimilar to how bitcoin works and can be\nused for peer-to-peer payments ether can\nalso be used to create smart contracts\nnow smart contracts work in such a way\nthat when a certain set of predefined\nrules are satisfied a particular output\ntakes place if you're interested in\nlearning more about smart contracts i\nsuggest you click on the top right\ncorner and watch our what is a smart\ncontract video and now for the thing\nyou've been waiting for bitcoin versus\nethereum now on one side we have bitcoin\nnow bitcoin has proven itself to be a\nvery popular and well-known\ncryptocurrency among everyone in the\nworld it also has the highest market cap\namong all the cryptocurrencies available\nright now in a way it's the current\nworld champion when it comes to\ncryptocurrencies on the other side we\nhave the underdog ethereum now ethereum\ndid not have the revolutionary effect\nthat bitcoin did but it learned from\nbitcoin and produced more\nfunctionalities on the concepts of\nbitcoin it is the second most valuable\ncryptocurrency in the market right now\nso in a way this is the fight between\nthe underdog and the world champion who\ndo you think will win now let's\nunderstand how bitcoin and ethereum are\ndifferent from each other bitcoin was\nthe first cryptocurrency to be ever\ncreated it was released in 2009 by a\ngroup of people or a person known as\nsatoshi nakamoto no one really knows if\nthis person is alive or dead however\nwith this technology came the concept of\nblockchain which is still\nrevolutionizing institutions around the\nworld on the other side ethereum was\nreleased in 2015 by a researcher and a\nprogrammer named vitalik buterin now\nvitalik used the concepts of blockchain\nand bitcoin and improved upon it\nproviding a lot more functionality\ncreating the ethereum platform for\ndistributed applications and smart\ncontracts bitcoin enables peer-to-peer\ntransactions bitcoin in this case acts\nas a replacement for fiat currencies\njust that it removes all the problems\nassociated with fiat currencies for\nstarters you don't have to pay high\ntransaction fees for a transaction at\nthe same time you also don't have a\ncentralized authority that regulates how\nbitcoins work on the other hand we have\nethereum which enables peer-to-peer\ntransactions and also provides a\nplatform for creating and building smart\ncontracts and distributed applications a\nsmart contract allows users to exchange\njust about anything of value be it\nshares money real estate and so on\nin bitcoin miners are able to validate\ntransactions with a method known as\nproof of work this is the same with\nethereum as well proof of work involves\nminers around the world trying to solve\na complicated mathematical puzzle to be\nthe first one to add a block to the\nblockchain ethereum however will be\nmoving to something known as\nproof-of-stake the concept of\nproof-of-stake works in such a way that\na person can mine or validate\ntransactions in a block based on how\nmany coins he or she owns the more the\namount of coins that a person owns the\nlarger their mining power will be in the\ncase of bitcoin every time a miner adds\na block to the blockchain they're\nrewarded with 12.5 bitcoins this reward\nthat they receive is expected to have\nevery 210 000 blocks now the next time\nthe reward is going to have is in the\nyear 2020 where the reward will reduce\nfrom 12.5 bitcoins to 6.25 bitcoins per\nblock in the case of ethereum a miner or\na validator receives a value of three\nether every time a block is added to the\nblockchain the transaction fees in\nbitcoin is completely optional you can\npay the miner more amounts of money to\nhave them give special attention to your\ntransaction however as i mentioned\nbefore the transaction will go through\neven if you don't provide any money on\nthe other hand it is absolutely\nnecessary that you provide some amount\nof ether for your transaction to be\nsuccessful the ether that you provide\nwill get converted into a unit called\ngas now this gas drives the computation\nthat allows your transaction to be added\nto the blockchain now let's talk about\nthe average amount of time it takes to\nadd a block to the blockchain in the\ncase of bitcoin it takes 10 minutes to\nadd a block to the blockchain in the\ncase of ethereum it takes only about 12\nto 15 seconds for the same process now\nlet's talk about hashing algorithms or\nhow these systems can maintain their\nprivacy and ensure security bitcoin uses\na hashing algorithm known as sha-256\nethereum uses a cryptographic algorithm\ncalled et hash now let's talk about some\nimportant values associated with bitcoin\nand ethereum the total number of coins\nthat each of them have are 17 million\nbitcoins and 101 million ether now you\ncan see that ethereum has easily crossed\nthe 100 million mark however the market\ncapitalization for bitcoins is 110\nbillion us dollars whereas for ethereum\nit's only 28 billion so even though\nethereum has a larger number of coins in\nthe market does not reach up to the\nlevel of bitcoin the number of\ntransactions that take place in a day\nfor bitcoin is 219 000 and at the same\ntime for ethereum it's 659 000. now you\ncan see this throughout july where the\nnumber of transactions per day stay more\nor less the same for bitcoin and\nethereum now the number of blocks that\nare created for bitcoin is 537 000 for\nethereum that grows up to 6 billion now\nthis has more to do with the fact that\nthe amount of time it takes for a block\nto be added to ethereum is much less as\ncompared to bitcoin now the block size\nfor bitcoin is 628.286\nkilobytes and 25.134 kilobytes for\nethereum now you can see that the market\nvalue of bitcoin is significantly higher\nthan any form of digital currency in the\nmarket right now it is however closely\nfollowed by ether which hopes to take\nover one day and now for the big\nquestion which one is better the answer\ndepends entirely on your requirements\nbitcoin works better as a peer-to-peer\ntransaction system and ethereum works\nwell when you need to create and build\ndistributed applications and smart\ncontracts at the end of the day the\nchoice is entirely up to you 5\nindustries that blockchain will disrupt\nlet's start with banking suppose you're\nin san francisco and you want to send\nmoney to your friend now for this\ntransfer to take place you need the help\nof a central authority in this case it's\nthe bank now say you're sending them a\nhundred dollars now out of this hundred\ndollars ten dollars goes as transaction\nfee to the bank the rest goes to your\nfriend which is ninety dollars now this\ntransaction fee at times can be\nexpensive the process of transferring\nmoney can also be time consuming the act\nof sending money overseas is also a lot\nmore complicated due to the exchange\nrates and other hidden fees now\nblockchain is disrupting the system by\nproviding a peer-to-peer payment system\nnow this provides high security and\ndoesn't cost as much this system\neliminates the need of a central\nauthority now blockchain provides fast\ncheap and borderless payments across the\nworld you can perform transfers to any\npart of the world now cryptocurrencies\nlike bitcoin eliminates the need for a\nthird party in this case a bank to make\ntransactions now blockchain records all\nthe transactions in a decentralized\nledger this ledger is accessible by any\nof the bitcoin users for example let's\ntalk about a cryptocurrency application\ncaller this provides peer-to-peer money\ntransfers now this application allows\nusers to store transfer and receive\ndigital money which can be stored in\ntheir mobile phones or pcs the recipient\ncan withdraw this cash via anabra teller\nthe most important thing here is that\nusers don't need to have a bank account\nto use this service next up we have\ncyber security now imagine you're in\noffice one day and you find out that\nyour data has been modified the previous\nevening someone went through your data\nand altered it now cyber attacks are a\nhuge cause of concern among the public\nit can have huge repercussions to a\nperson's life so it's essential that we\nfind an effective solution against\npeople going through our data\nunauthorized and tampering it that's\nwhere blockchain comes in blockchain\nwith its decentralized system makes it\nsuitable for environments where there's\na lot of security required all the\ninformation that's stored inside the\nbitcoin networks are verified and\nencrypted using a cryptographic\nalgorithm now this ensures that there's\nno single point of entrance for a wide\nscale attack now with blockchain it's\nalso easy to identify malicious attacks\ndue to the peer-to-peer connections\nwhere data cannot be ordered or tampered\nby ensuring that there's no central\nauthority blockchain provides a\ntransparent and secure way of recording\ntransactions this is at the same time\nensuring that none of your private\ninformation is disclosed to anyone for\nexample let me tell you about a company\ncalled guard time that secures his data\nusing blockchain technology now\nguardtime uses a completely unorthodox\nmethod as opposed to a centralized\nsystem this company uses blockchain\ntechnology it distributes the data among\nthe nodes of its users now let's talk\nabout supply chain management say you\nordered for some food from online you\nget the delivery for the food you get\nthe food delivered to you and you find\nout that the food has surprisingly low\nquality now with blockchain technology\nyou can trace the supply chain back to\nits beginning to find out where things\nwent wrong for example you can find out\nwhere the farm is where the product is\ngrown how the production was whether\nsomething went wrong with the\ndistributor whether something went wrong\nwith the retailer or something went\nwrong at your hand now in supply chain\nmanagement blockchain provides permanent\ntransparency and validation of\ntransaction shared by multiple supply\nchain partners that means you can\nvalidate each and every step of the\nsupply chain all the blockchain entries\nare permanent and transparent this makes\nit easier for the customer to view the\ntransaction history of the product they\njust purchased in a blockchain\ntransactions are recorded in a\ndecentralized distributed ledger each\ntransaction is recorded into a block and\nanyone can verify the authenticity or\nstatus of a product being delivered now\nit can also be used for seafood\nverification here we can track the\nseafood from ocean to the market now\ntake the example of the pacific tuna\nproject now you have three blocks here\neach one containing fishing details\nexported import details and purchasing\ndetails the blockchain supply chain\nmanagement provides a step-by-step\nverification to track the tuna fish in\nthe process this prevents illegal\nphishing next up we have healthcare say\nyou're in a hospital and you're asking\nfor reports for a medical test you did\nyesterday the receptionist tells you to\nwait and even after 4 hours you still\ndon't get your report apart from this\nannoying delay have you realized that\nany person who has access to the system\ncan corrupt the data apart from this\nannoying delay have you realized that\nany person who has access to the system\ncan corrupt the data since information\nis stored in the physical memory of a\nsystem blockchain eliminates a central\nauthority and ensures that you have\nrapid access to data here each block is\nconnected to another block and the data\nis distributed across the nodes this\nmakes it difficult for a hacker to\ncorrupt the data another major problem\nin healthcare is counterfeit medication\nthe main issue is that counterfeit\nmedicines are difficult to distinguish\nfrom real medicines the solution comes\nin the form of blockchain with the help\nof supply chain management here the\nmedicine's provenance can be traced for\nexample united healthcare has improved\nits privacy security and\ninteroperability of medical records\nusing blockchain now time for some\nhonorable mentions the insurance\nindustry with blockchain's decentralized\nsystem insurance companies can easily\nidentify false claims and prevent\nforgeries transportation utilizing\nblockchain enables traceability in the\ntransportation industry where the\nshipment of goods can be easily tracked\nnow let me tell you about cloud storage\nwith an example storage is a\ndecentralized cloud storage by\neliminating servers and utilizing\nblockchain it can securely store its\ndata in the cloud with high speed and\nlow cost users can earn money by sharing\ntheir extra hard drive space on the\nstorage network real estate deploying\nblockchain technology in real estate\nincreases the speed of the conveyance\nprocess and eliminates the necessity for\nmoney exchanges let's talk about the\ngovernment in a traditional voting\nprocess electoral fraud is an illegal\nactivity that takes place almost always\nnow most citizens who want to vote must\nwait in a queue and cast their word to a\nlocal authority this can be very time\nconsuming process why not bring this\nprocess online online voting systems\nfail due to the lack of security\nblockchain can be used to solve these\nissues it can be used for counting votes\nand verifying voters using blockchain\nvoters can submit their votes without\nrevealing their identity in public\nofficials can count the words with\nabsolute accuracy knowing that each id\nhas only one vote associated with it\nfake quotes cannot be created as data\ndampering is closely impossible with\nblockchain once your vote is added to\nthe ledger the information can never be\nerased now let me tell you an example of\nme vote now miwot is a token based\nblockchain platform which is very\nsimilar to a digital ballot box now with\nme mode people are able to go through a\nsmartphone so voters cast their vote\nafter the verification the word gets\nrecorded in the blockchain the voter\nidentities are secured and the results\nare not modified but blockchain is also\nuseful in some other things for digital\nasset registries with blockchain fast\nand secure registration of any asset is\npossible it can be used with the notary\nutilizing blockchains technology with\nthe notary seal can be a really fast way\nto prove a document's authenticity with\ntax deploying blockchain can result in\nquicker tax payments lower rates of tax\nevasion and lesser efforts in tax\nauditing blockchain can increase\nsecurity and transparency in\ngovernmental systems by 2020 dubai hopes\nto become 100 blockchain government by\nmaking all of its government services\navailable on the blockchain technology\n10 things you didn't know about bitcoin\nfirstly we have the mysterious creator\nnow in 2009 a person or a group of\npeople known as satoshi nakamoto\nintroduced bitcoin to the world he\nvanished off the internet in late 2010\nhe hasn't been heard from since now just\nlike his identity is shorter than\nmystery nobody really knows if he's even\nalive or dead the only communication\npeople had with him were through emails\nand forums his bitcoin wallet holds\naround 980hz 000 bitcoins which makes\nhim one of the richest people on the\nplanet next up we have the satoshi now\nas a sign of respect for the bitcoins\ncreator the smallest unit of a bitcoin\nis known as a satoshi one satoshi is\nvalued at around 0.00\n669 for us dollars which is a very very\nlow value now to make one bitcoin you\nneed approximately 100 million satoshi's\nnow according to the current bitcoin\nvalues which fluctuates a lot to make a\ndollar you'd need close to 15 800\nsatoshi's losing bitcoins losing your\nbitcoin address which is also known as\nyour private key not only means losing\nyour unique identification it also means\nyou lose all the bitcoins in your wallet\nresearch shows that at least 60 percent\nof all bitcoin addresses are ghosts\nwhich means a huge chunk of the\npopulation that's using the bitcoin\nnetwork have lost their addresses now\nthese are the people who have lost their\naddresses and have no way to access\ntheir wallet liberland now in april 2015\na micro nation between croatia and\nserbia known as liberland was born now\nthis was founded by virgilka a\npolitician publicist activist and the\npresident of liberland now the official\ncurrency of liberland is bitcoin now the\ngovernment took this move believing that\nbitcoin and its underlying concepts of\nblockchain provides a secure and\ntransparent method for recording\nelectronic financial and physical assets\nprocessing power the process of mining\nbitcoins is a expensive process now you\npay a high toll to do this like your\nmoney your time and electricity now\nmining bitcoins require servers that are\nused for that specific purpose alone now\nthe faster you process the data the\nfaster the block can be added to the\nblockchain and the faster you're\nrewarded with bitcoins power consumption\nnow just imagine how much electricity\nireland consumes in a year approximately\nfive thousand kilowatt hour now how much\ndo you think all the bitcoin mining\nfarms together consume 60 terawatt all\nwhich is approximately 6 into 10 raised\nto 10 kilowatt hours which is a large\namount of power now the entire country\nof ireland which is the second most\npopulated city in europe and has 84 421\nkilometer square of area consumes lesser\nelectricity than all these farms\ncombined bitcoin ban now although\nseveral countries around the world like\ncanada and america have wholeheartedly\naccepted bitcoin there are some that\nhaven't countries like bolivia iceland\nbangladesh and ecuador have completely\nbanned the usage of bitcoins there are\nalso countries like india thailand and\niran who ask their residents to be\ncareful while using cryptocurrencies\nthey haven't completely banned it\nhowever they do not accept it as a legal\ntender low limited number there's a\nlimit to how many bitcoins can exist in\nthe market this number is capped at 21\nmillion bitcoins as of this moment 17\nmillion bitcoins are already in\ncirculation to give you an idea that's\nalmost 80 percent of the 21 million\nalready done but don't worry until 2140\nwe'll still have bitcoins to mine this\nis because of how miners are rewarded\nnow miners are rewarded with 12.5\nbitcoins for each block added to the\nblockchain and every four years the\nreward reduces by half the next halving\nis supposed to occur in 2020 where the\nreward reduces to 6.25 bitcoins the\npower of b the terms bitcoin with an\nuppercase b and bitcoin with the\nlowercase b mean two different things\nthe only thing that differentiates the\ntwo into two completely different things\nis the letter b the lowercase b in\nbitcoin refers to the cryptocurrency\nthat is used to perform the transactions\nthe uppercase b in bitcoin refers to the\nledger that stores information regarding\nthese transactions faster than\nsupercomputers the world's fastest\nsupercomputer the summit works at 122.3\npetaflops which is nothing but a\nquadrillion floating point operations\nper second now if you take the bitcoin\nnetwork completely into consideration\nthe processing power is about 80 million\n704 290 petaflops but the only thing\nhere is that a supercomputer can do\nseveral different things but the only\nthing the bitcoin network does is add\nblocks to the blockchain and with that\nwe've reached the end of the video i\nhope you guys enjoyed it and i've\nlearned something new about bitcoin if\nyou feel like we've missed out on\nsomething interesting that you've come\nacross let us know in the comments below\nand today we're going to do something\nvery interesting today we're going to go\nthrough some of the applications of\nblockchain now before we get into it let\nme tell you what exactly is a blockchain\nnow a blockchain is a list of records or\nblocks which stores data publicly and in\na chronological order now the data\nwithin these blocks or records are\nsecured using cryptography they don't\nhave a central authority controlling\nthem anyone has access to the data\nwithin this network but not everyone can\nalter the data and everyone has copies\nof this data so now that you know what\nblockchain is let's get into this video\ntoday we'll be talking about blockchain\nwhen it's used in supply chain\nmanagement blockchain and cyber security\nhow blockchain is used for voting and\nother applications of blockchain so now\nlet's have a look at supply chain\nmanagement now let's look at a scenario\nbefore blockchain so there's a delivery\nboy bringing john his order of apples\nnow john thanks him and sees that his\napples are rotten and john says that he\nwants his money back however the\ndelivery boy says he can't help since\nhe's just the delivery boy not the\nperson who created the product so these\nproblems are the ones that were faced\nbefore blockchain but with blockchain\ntechnology there is traceability across\nthe supply chain this means that you can\ntrace back to what happened to the\nproduct at each step of the supply chain\nblockchain technology enables these\ntransactions to be tracked in a very\nsecure and transparent manner now some\nbenefits of using blockchain technology\nother there's a single record policy\nwhich means there's a single record\nthroughout the entire supply chain\nthere's reduced costs since there's no\nrequirement for multiple records across\nthe entire supply chain there's\neliminating error and less human\nintervention now the last two points\ncome somewhat in correlation since the\nless of the human intervention usually\nthe lesser the amount of error let's\nhave a look at an example of a supply\nchain management so the product starts\nfrom the farm goes through storage\nundergoes food processing it's\nmanufactured distributed given to the\nretailer and finally reaches the\ncustomer now in supply chain management\nblockchain is able to provide a\npermanent record a whole lot of\ntransparency and the ability to validate\nthe transactions that are shared across\nmultiple supply chain partners with\nblockchain the transactions are recorded\nin a decentralized distributed ledger\nnow the advantage of this is that anyone\ncan verify the authenticity or the\nstatus of a product that is being\ndelivered now if you want to look at a\nreal life example you have to look no\nfurther than walmart walmart is building\na blockchain distributed ledger so that\nthey can connect and track poke\nsuppliers shippers purchases and other\nunits involved in its supply chain that\nare delivering the food product across\nchina now this is done to reduce the\nrisk of data tampering or inaccuracy or\ninaccuracy now let's have a look at how\nblockchain helps cyber security imagine\nthe scenario where a is sending twenty\ndollars to b a sends this money and this\ntransaction details are stored in the\ncloud now what if a hacker hacks the\ndata within the cloud and tampers this\nhe tampers this in such a way that he\nreceives the 20 instead of b here you\ncan see the hacker being all smug about\nit now this is the main problem with the\ncurrent banking system now it is prone\nto cyber attacks because it has a\ncentralized network this can also lead\nto fraud as well as data theft cyber\nattacks are one of the biggest threats\nthat the public has to face however\nblockchain is a solution that makes sure\nthat your data is protected from\ntampering as well as helps improving\ncyber security across a number of\ndifferent industries some of the\nbenefits are that it provides high\nsecurity with the help of the\ncryptography that i mentioned before it\nhas a decentralized storage quick\ntransactions which take only about 10\nminutes and lower cost as compared to\nbanking transaction costs now let's look\nat the same scenario but with the help\nof bitcoins or blockchain now a is\nsending\n0.0025 bitcoins to b which amounts to\napproximately 20 dollars these bitcoins\nare sent and blockchain which is a\ndistributed ledger distributes the data\nacross multiple nodes within the network\nand secures this data using cryptography\nanother thing that you have to remember\nis that each node has a copy of the\nledger and cryptography protects the\ndata within it against any changes\nmaking it immutable now imagine a hacker\ntrying to hack the data here he's\nunsuccessful because the peer-to-peer\nconnection which prevents data from\nbeing altered as well as tampered now\nand finally b receives the twenty\ndollars in bitcoins now for a real life\napplication mastercard has its own\nblockchain project where mastercard is\nusing blockchain for sending as well as\nreceiving money it also allows the\nexchange of currency without the need of\na central authority now let's have a\nlook at how blockchain can help with the\nvoting process now before blockchain a\nvoter would have to submit their voter\nid their water ids need to be verified\nand after the verification the water\nwould submit his or her word to the evm\nor the electronic voting machine after\nthat the voting is complete however it\nis possible for the evm to be hacked\nsince it's a centralized system this can\nlead to some amount of manipulation with\nthe word count however with the\ndecentralized system like blockchain it\nis possible to completely eliminate any\nscope of forgery as well as data\nmanipulation now let's have a look at\nhow voting can be performed with the\nhelp of blockchain now first the water\ndownloads a voting application\nthe voter submits a voter id and\nregisters for the election after the\nverification is complete the voter has\nbeen authorized to cast his or her vote\nand the water submits his or her word\nwithout revealing their identity to the\npublic now once the support has been\nadded to the blockchain the information\nwithin the blockchain can never be\nerased after this the officials can\ncount these words knowing that each id\ncan be attributed to just one vote now\nwith blockchain voters can also count\nthe number of votes themselves using\nblockchain in the voting process\nprovides complete transparency by\neliminating any need for third-party\nsystems to be involved along with that\nit can also eliminate voter fraud as\nwell as election rigging it increases\nthe transparency in the voting process\nand reduces the expense of conducting\nthe elections now in real life examples\nmeewort which is a token based\nblockchain platform works very similar\nto that of a digital ballot box now it\nprotects the integrity of the ward as\nwell as protects the security of the\nelection process now this is already\nimplemented in australia so it's only a\nmatter of time before this or similar\ntechnologies can be set up across the\nworld now let's have a look at some of\nthe other applications there's insurance\nwhere with blockchain they can eliminate\nforgery as well as false claims and real\nestate where this increases the speed of\nthe conveyance process and eliminates\nany requirement for money exchanges so\nif talking about blockchain and its\napplications have caught your interest i\nsuggest we get on to simplylearn.com i'm\ngoing to tell you how you can become a\nblockchain developer now before we begin\nlet's see the current situation of the\nmarket 84 percent of companies are now\ndabbling into blockchain blockchain is\nthe fastest growing skill in the u.s\nfreelance job market apple st wozniak is\ngetting involved with blockchain\nprojects and jpmorgan cio believes that\nblockchain will replace existing\ntechnology as we can see with the amount\nof focus organizations are putting on\nblockchain and what tech influencers\naround the world have to say about it we\ncan see clearly that they really believe\nthat blockchain can have a tremendous\npositive impact on our lives and the\nmarket as a whole so it's no surprise\nthat blockchain has worldwide acclaim\nnow it's created a huge number of job\nopportunities across the world and one\nsuch job is that of a blockchain\ndeveloper so here's what we're going to\nlearn today who is a blockchain\ndeveloper what are the types of\nblockchain developers the steps you have\nto follow to become a blockchain\ndeveloper the obstacles you might face\nwhile learning blockchain the salaries\noffered to blockchain developers and how\ncompanies are using blockchain right now\nso who is a blockchain developer a\nblockchain developer is someone who\ndesigns implements and supports a\nblockchain network so in a way they are\nresponsible for setting up the\nblockchain network and then ensuring\nthat it works properly they create and\noptimize blockchain protocols for\nexample is the network a public network\nthey create such protocols and then\noptimize it based on that usage or\nrequirement they develop distributed\napplications and smart contracts on the\nblockchain network now let's talk about\nthe different types of blockchain\ndevelopers so they fall under two major\ncategories core blockchain developers\nand blockchain software developers a\ncore blockchain developer works on the\ncore features and the architecture of\nthe blockchain network basically they're\nin charge of the entire blockchain\nnetwork they manage the architecture of\nthe network supervise the blockchain\nnetwork they work on consensus\nalgorithms for example there's the\nproof-of-work algorithm in bitcoin and\nset up blockchain protocols a core\nblockchain developer works very much\nlike a core web developer now the main\nthing is that they both work on course\nconcepts now just like blockchain\ndevelopers work on protocols you have\nweb developers working on protocols like\nhttp or tcpip and so on now let's talk\nabout a blockchain software developer\nnow they work on blockchain to create\napplications now they create smart\ncontracts develop distributed\napplications and work on the front and\nback end application development\nblockchain software developers are also\nvery similar to web application\ndevelopers both of them create\napplications on a network that's already\nset up by core developers so how do you\nbecome a blockchain developer so before\nyou start off on your path to becoming a\nblockchain developer there are some\nthings that you really have to know now\nwe're going to talk about the\nprerequisites first up you have\nprogramming languages now it is\nabsolutely necessary that you be\nwell-versed in programming languages\nbefore you can get onto blockchain\ndevelopment most blockchains are created\nin languages like java c plus plus\njavascript go python c sharp and so on\nso let me emphasize how important it is\nthat you know programming languages now\nfor core blockchain development any of\nthese aforementioned languages will do\nthe job for you however in case you have\nto create distributed applications and\nsmart contracts on ethereum it is\nmandatory that you learn the programming\nlanguage solidity then you need to\nunderstand the fundamentals of object\noriented programming now the concepts of\nobject-oriented programming which anyone\nwho codes will know is the wrapping up\nof data and functions into a single unit\nthis is exactly what blockchains\nfunction on for example you have the\nethereum block here it has two\ncomponents data and function the user\ndetails act as the data now this data\nincludes the person who's sending the\ntransaction or how much money they're\nplanning to transfer then you have the\nfunction which is the command to send\nand receive payments then you need to\nlearn about flat and relational\ndatabases now blockchain was created on\nthe basis of these two types of\ndatabases a flat database stores data in\na single table structure and a\nrelational database uses a number of\ntables and can cross-reference records\nacross tables so it is necessary that\nyou understand how these two databases\nwork to completely understand how\nblockchain was created from their\nconcepts then you need to learn what\ndata structures are you need to\nunderstand the working of data\nstructures like stack linked list queue\nand so on this is because blockchain by\nitself is a backlinked list each block\nin a blockchain references the previous\nblock now this is done by a field in the\nblocks header known as the previous hash\nthat holds the hash value of the\npreceding block knowledge about web\napplication development by being well\nversed in web app development you're\nopening yourself to a wide range of\nopportunities to create web and mobile\napplications using blockchain technology\nbecause regardless of whether the\napplication works on blockchain\ntechnology the front end can be created\nonly with web application development\nthen you need to know about networking\nblockchains work on the internet so you\nneed to understand the many concepts\nregarding networks for example how\nsystems are able to communicate with\neach other how the network works and so\nmuch more now after you're done with all\nof this you're ready to start your\njourney to become a blockchain developer\nthe first step is to understand the\nconcepts of blockchain now satoshi\nnakamoto's white paper bitcoin appeared\nto peer electronic cash system gives a\ndetailed account on how bitcoin works\nand introduces us to the concept of\nblockchain so if you want to learn\nfirsthand how blockchain works from the\ncreator of bitcoin himself i would\nsuggest you go to satoshi nakamoto's\npaper\nnext you need to learn important terms\nrelated to blockchain for example what\nis a minor what is a block what is a\npublic distributed ledger hash\nencryption proof of work mining and so\nmuch more then you can learn how systems\nother than bitcoin like ethereum\nhyperledger hashgraph and so on use\nblockchain to work with their technology\nthe second step involves understanding\nthe economics behind cryptocurrencies in\nblockchain blockchain technologies work\non crypto economics which is nothing but\nthe combination of two words\ncryptography and economics cryptography\nin blockchain involves hashing digital\nsignatures and proof of work hashing is\ninvolved in maintaining the privacy of a\nuser within the network this is made\npossible with the help of cryptographic\nalgorithms for example in bitcoin we\nhave the sha-256 algorithm and eth in\nethereum digital signatures help\nvalidate a particular user within the\nnetwork this is made possible with the\ncombination of the user's public and\nprivate keys proof of work involves\nminers around the world trying to solve\na complex mathematical puzzle to be able\nto add a block to the blockchain on the\neconomic side you need to understand how\nminers are incentivized the users who\nadd and take part in the blockchain are\ngiven cryptocurrencies now people who\ntake decisions also have the right to\ncharge a fee for their service for\nexample if a person has a block and he\nhas to decide what transactions he's\ngoing to add to that block he has the\nright to charge you some amount of money\nif you want your transaction to be added\nto his block good users of the network\nare rewarded with monetary compensation\nor the ability to take decisions bad\nusers of the network have to pay a fine\nor have their rights to take decisions\nstripped away step three is to\nunderstand how cryptocurrencies work\nwith cryptocurrencies there's a whole\nnumber of steps before a process is\ncomplete you need to understand how each\nand every step works for example first\nhow a sender begins the transaction to\nsend money to the receiver how the\nmessage is encrypted and transmitted\nacross the network how miners are able\nto verify that transaction how the block\nis added to the blockchain how money is\ndeducted from each of the participants\nwallets you need to understand the\nrelationship between each and every step\nof the process and how they interact\nwith each other step 4 getting some\nhands-on experience now after you're\ndone with all the steps that i mentioned\nbefore this one's the hardest practical\napplication so even if you know all the\ntheory if you don't have any practical\nexperience it won't have a very large\nimpact so you need to start coding and\ncreating your own smart contracts you\nneed to create your own distributed\napplications on the ethereum platform\nalso let me remind you for you to be\nable to create smart contracts or\ndistributed applications you need to\nhave learned the programming language\nsolidity and finally you can invest in\nbitcoins or other cryptocurrencies so\nthat you can have an understanding of\nhow they actually work now it's very\nimportant that you also keep yourself\nupdated regarding cryptocurrencies and\nblockchains and bitcoins by reading up\non blogs and forums you can take part in\ndiscard chat rooms you can use the\ntelegram application which has a very\nactive community on cryptocurrencies and\nblockchain you can involve yourself in\nsubreddits like our slash blockchain our\nslash bitcoin and other related\nsubreddits you can get on coin market\ncap that talks about market\ncapitalizations of several\ncryptocurrencies coin market cal and so\nmuch more there's an abundance of\nresources on the internet that you can\ntake advantage of now let's talk about\nthe obstacles that you might face while\nlearning blockchain now you've noticed\nthat blockchain isn't very easy there's\na lot of content to cover now to make\nmatters worse you could also face some\nof these problems first of them is\noutdated content now the tutorials and\ncontent that you might find online\ncannot possibly keep up with the\nconstantly changing technology so it's\nonly natural that the content that you\nmight get might be a little outdated\nwhich isn't what you want you want the\nlatest and the most highest quality\ncontent secondly lack of quality content\nnow there's an abundance of sources that\nyou can learn from and since there's\nsuch a wide variety it's possible that\nyou might end up using a type of source\nthat's of low quality or of substandard\nquality now let's talk about salaries\nthat you can get in a blockchain job now\nin the united states blockchain\ndevelopers earn 130 000 per annum\naccording to burning glass technologies\nin the more tech oriented areas of u.s\nlike silicon valley new york and boston\nthey earn up to 150 000 per annum\nseveral companies around the world have\ninvested heavily into incorporating\nblockchain into their processes now you\nhave companies like alphabet bank of\namerica wells fargo apple microsoft and\nso on so this is a clear indication that\ncompanies are very interested in hiring\npeople who are skilled enough in the\nconcepts of blockchain and finally how\nare companies using blockchain walmart\nuses blockchain to keep track of each\nand every step in the supply chain with\nthis they are able to track down where\nthe problem area is and to ensure that\nthat problem is solved before it can\nhappen again you have jpmorgan chase and\nco this company created their own\nblockchain application called quorum\nthat solves the processing that allows\nprivate transactions to take place in a\ngroup of participants whose identities\nare known the agricultural bank of china\ncreated a learning system using\nblockchain that aim to help small and\nmedium-sized agricultural businesses\nthat didn't have a good credit record\nnow how can simply learn help you\nsimply learn provides certification\ncourses that give you an introductory or\nan advanced understanding into the\nconcepts of blockchain the introductory\nblockchain basics course provides 12\nhours of self-paced learning and covers\nall the concepts related to bitcoin and\nblockchain data structures moreover it\ngives you an introduction into\nblockchain bitcoin blockchain mining\nbuying and selling bitcoins emerging\ntrends in blockchain and so much more\nnow the advanced course or the\nblockchain certification training course\nprovides 32 hours of instructor-led\ntraining 50-plus hands-on exercises\nusing blockchain technology nine\npractical projects covering ethereum\nhyperledger and bitcoin case studies and\nso on it also helps you understand\nsolidity programming ethereum coding\nadvanced smart contracts ethereum\napplication architecture real life\nprojects and so much more the content of\nthese courses are constantly updated to\nkeep up with emerging trends in the\nmarket now saurabh will take you through\n30 hand-picked questions you might face\nin a blockchain interview so let's get\nstarted and understand what kind of\ninterview questions can come for a\nblockchain interview so let's start with\ncertain beginner level questions now\nwhen you face a blockchain interview you\ncan get different variety of questions\nso we will be covering that what kind of\nquestions can be asked at each level\nintermediate and expert level so one of\nthe few questions which you could be\nasked is what is the difference between\nblockchain and hyperledger blockchain is\nbasically the underlying concept\nblockchain is a decentralized technology\nof immutable records called blocks which\nare secured using cryptography whereas\nhyperledger is a platform or an\norganization that allows people to build\nprivate blockchain so basically\nblockchain is a concept is a technology\nusing blockchain you can build public\nand private blockchains but hyperledger\nis a specific technology which allows\nyou to build only private blockchains\nnow blockchain is divided into public\nprivate and consortium blockchains\nhyperledger is specifically a private\nblockchain technology with access to\nblockchain data is limited to predefined\nusers and it is defined\nusing certain configurations and\nprogramming blockchain can be used in\nmultiple fields like business\ngovernments healthcare other different\nkind of domains and etc hyperledger is\nprimarily used in blockchain for\nenterprise-based solutions so wherever\nwe are talking about public blockchain\nis like usage of blockchain on internet\nand hyper ledger based blockchain\nsolutions are solutions which are meant\nfor internet within an organization\nwithin a corporation second how do you\nexplain blocked in technology to someone\nwho doesn't know it so basically in\nsimple terms blockchain technology is a\ndistributed ledger which stores\ntransaction details in the form of\nimmutable records non-modifiable records\nwhich are called blocks which are\nsecured using cryptography so in order\nto explain simplistically let's consider\nan example of a school where blockchain\nis similar to a digital report card of a\nstudent now each block contains students\nrecords which has a label stating the\ndate and time of when the record was\nentered or when the record was\nregistered on the blockchain now neither\nthe teacher nor the student can modify\nthe details of the block cannot modify\nthe record of report cards therefore the\nrecord becomes non-modifiable immutable\nalso the teacher owns a private key that\nallows him or her to make new records\nand the student owns a public key to\nview and access the report card at any\ntime so basically the teacher owns the\nright to update the record but the\nstudent only owns the right to view the\nrecord now this method makes the data\nboth active and secure and this is what\nblockchain brings on the table these are\nthe primary attributes for which\nblockchain is getting widely adopted to\nhave immutable records available for\nview to the public and available for\nupdating in an untemperable way now what\nis a merkle tree merkle tree is a data\nstructure which is used for verifying a\nblock it is in a form of a binary tree\ncontaining cryptographic hashes of each\nblock so basically a merkle tree is\nstructured similar to a binary tree each\nleaf node is a hash of a block of\ntransactional data so each leaf node is\nbasically a transaction which is hashed\nand each non-leaf node is a hash of its\nleaf node so basically hash a a is the\nhash of two blocks a and hash b merkle\nroot or the hash root is the final hash\nof all the transaction hashes so\nbasically merkel root is the hash of\nhash a a and bb so it encompasses all\nthe transactions which are underlying\nall the non-leaf nodes what do you mean\nby blocks in the blockchain technology\nwhat is the definition of a block so\nblockchain is a distributed database of\nimmutable records called blocks which\nare secured using cryptography now as\nyou see there are the certain attributes\nof a block which are displayed here you\nhave previous hash transaction details\nnonce and a target hash value a block is\nlike a record of transactions each time\na block is verified it gets recorded in\nchronological order on the main\nblockchain so as you can see as it is\nrepresented over here every time a new\nblock is verified it gets added to the\nmain blockchain with all those\nattributes populated now once the data\nis recorded it cannot be modified it\ncannot be changed now another question\nwhich could come into your interview is\nhow is blockchain distributed ledger\ndifferent from a traditional ledger it\nis a very important question we need to\nknow the basic difference and\njustification if we have to move from a\ntraditional database to a blockchain\nbased distributed ledger what benefit it\nbring on the table so certain\ndifferences which are very visible are\ntransparency blockchain distributed\nledger is highly transparent as compared\nto traditional database distributed\nledgers are irreversible once any\ninformation is registered on a\ndistributed ledger cannot be modified\nwhereas on a traditional ledger it is\nreversible basically distributed ledger\nis more secure it uses cryptography\nevery transaction is hashed and recorded\nin a traditional ledger the security can\nbe compromised in a distributed ledger\nthere is no central authority it's a\ndistributed system the participants of\nthe network holds the authority to\nmaintain the sanity of the network and\nare responsible for validating the\ntransactions whereas traditional ledgers\nare based on the concept of centralized\nauthority and control and all the\ntransactions are controlled by the\ncentralized authority in a distributed\nledger identities are unknown and are\nhidden whereas in a traditional ledger\nidentities of all the participants have\nto be known before the transaction can\nhappen in a distributed ledger there is\nnot a single point of failure as the\ndata is distributed information is\nshared across multiple nodes even if a\nsingle node fails the other nodes carry\nthe same copy of the information whereas\nin a traditional ledger in a centralized\ndatabase ledger based system that\nparticular system becomes a single point\nof failure if the single system crashes\nthe entire application or the entire\nnetwork comes to a standstill ability to\nmodify data no once the data or a\ntransaction is registered it cannot be\naltered and a traditional ledger it is\npossible how validation is done so in a\ndistributed ledger it is done by the\nparticipants of the network in a\ntraditional ledger it is controlled by\nthe centralized authority copy of ledger\nis shared amongst all the participants\nof a distributed ledger each participant\nconsists the same information in the\nledger in a traditional ledger only a\nsingle copy is maintained at a\ncentralized location it is not shared\namongst all the participants thereby\nagain it remains as a single point of\nfailure if you have any queries you can\nput your comments in the comments\nsection of this video and we will\ndefinitely come back to you how can you\nidentify a block what are the attributes\nof a block in order to understand it so\nevery block consists of four fields it\nholds the hash value of the previous\nblock therefore it gets linked in a\nblockchain it contains the details of\nthe aggregated transactions which are\naggregated in the block it has a value\ncalled non nonce is a random value which\nis used to vary the value of the hash in\norder to generate the hash value less\nthan the target and then finally you\nhave a hash of the block itself it is\nthe digital signature of this block a\nunique hash for this block it is a\nalphanumeric value which is used to\nidentify a block so that is the identity\nof the block the hash address is the\nunique identification of a block it is a\nhex value of 64 characters that has both\nletters and digit it is obtained by\nusing sha-256 algorithm now this is the\nway it is structured the hash of the\nprevious block the transaction data and\nthe nouns consolidate the header of the\nblock they all together are passed\nthrough a hashing function and then the\nhash value the digital signature of the\nblock is then generated what is\ncryptography and what is its role in\nblockchain blockchain uses cryptography\nprimarily to secure users identities and\nensure the transactions are done safely\nwith the hash function so all the user\nidentities and the transaction on a\nblockchain are encrypted cryptography\nuses public and private keys to encrypt\nand decrypt data so basically it uses\nthe public and private key\ninfrastructure in order to maintain the\nencryption of the information on a\nblockchain network in blockchain network\npublic key can be shared with all the\nbitcoin users all the blockchain users\nso public key is just like your address\nwhich you can share it with anyone but a\nprivate key is like your password it is\nkept secret with the user so basically\nblockchain uses cryptography to secure\nuser identities and ensure transactions\nare done safely and how does it do it it\nuses sha-256 algorithm which is secure\nwhich provides a unique hash output for\nevery input and it is a very popular\nalgorithm the basic feature of sha-256\nis that whatever input you pass it will\ngive you a standard output alphanumeric\noutput of 64 characters so basically it\nis a one-way function you can derive an\nencrypted value from the input but you\ncan't do vice versa now what are the\ndifferent types of blockchains which\nexist there are three different types of\nblockchains public blockchain private\nblockchain and consortium blockchain\npublic blockchain ledgers are visible to\nall the users on the internet and any\nuser can verify and add a block of\ntransactions to the blockchain basically\nit's publicly available anyone can\nparticipate in the network and get\nhooked up so examples are bitcoin and\nethereum private blockchain ledgers are\nvisible to all the users on the internet\nbut only specific users in the\norganization can verify an ad\ntransaction so it's a kind of a\npermissioned blockchain though the\ninformation can be available publicly\nbut the controllers and the validators\nof the blockchain are within the\norganizations and are pre-determined the\nexample is block stack consortium\nblockchain here the consensus process is\ncontrolled by only specific nodes\nhowever ledgers are visible to all the\nparticipants in the consortium\nblockchain example is ripple now what\nhappens when you try to deploy a file\nwith multiple contracts in blockchain\ndeploying a file with multiple contracts\nis not possible the compiler only\ndeploys the last contract from the\nuploaded file and the remaining\ncontracts are neglected and this is the\nway a smart contract is deployed on a\nblockchain network now very interesting\nquestion what is a genesis block it's a\nvery important question and could be\nasked in an interview multiple times so\nbasically genesis block is the first\nblock in the blockchain which is also\nknown as block zero so as you can see\nthe sequence number of this block is\nzero and in blockchain it is the only\nblock that does not refer to any\nprevious block so the hash value of the\nprevious block will be all zeros because\nit is the first block also it defines\nparameters of the blockchain such as\nlevel of difficulty consensus mechanisms\netc to mine the block so basically it\ndefines the primary attributes of the\nblockchain which is going to get\ninitiated from the genesis block onwards\nnow let's look at some of the questions\nwhich would come if you are at an\nintermediate level now how is the hash\nof a block signature generated in\nblockchain to generate a digital\nsignature transaction details are passed\nthrough a one-way hashing function for\nexample\nsha-256 then the output value is passed\nthrough a signature algorithm like ecdsa\nwith the user's private key then the\nencrypted hash along with the other\ninformation such as the hashing\nalgorithm is called as the digitally\nsigned document and is called the\ndigital signature so this is the entire\nprocess of generating a digitally signed\nblock list down some of the extensively\nused cryptographic algorithms these are\nthe few popular algorithms which are\nextensively used sha-256 bitcoin uses it\nit has ethereum uses it rsa is one of\nthe other popular algorithm\nblowfish triple des so it's very\nimportant to memorize these algorithms\nthe names of these algorithms when asked\nand shu 256 and it hash are used in two\nof the popular public blockchain\nnetworks what is a smart contract and\nlist some of its application so smart\ncontracts are self-executing contracts\nthese are basically digital contracts\nwhich contains the terms and conditions\nof an agreement between two parties\nbetween two peers now some of the\napplications can be used in\ntransportation where shipment of goods\ncan be easily tracked using smart\ncontracts so as there's a movement of\ngoods and it is exchanging hands between\ndifferent parties there could be need of\na contract and a smart contract between\nthe parties it is also used in\nprotecting copyrighted content like\nmusic or books or the literature which\nyou have written so smart contracts can\nprotect the ownership rights it can also\nbe used in insurance it can be used to\nidentify false claims and prevent\nforgeries employment contract smart\ncontracts can be helpful to facilitate\nwage payments and it can be used as a\nproof of employment now another\nimportant question what is ethereum\nnetwork and how many ethereum networks\nare you familiar with ethereum is a\nblockchain based distributed computing\nplatform featuring smart contract\nfunctionality that enable users to\ncreate and deploy their decentralized\napplications called dapps there are\nthree types of network in ethereum live\nnetwork the main net then there are\ncouple of test networks like robston\ncoven and rink b and then you can also\ncreate your own private network using\nethereum smart contracts are deployed on\nthe main network they are publicly\navailable and can be used by others also\ntest networks allows you to run your\nsmart contracts on a test net validate\nthe gas which is being used you can just\nuse these test networks as the main net\ndeploy your contracts verify your\ndecentralized application and then move\non to the main net private networks are\nthose which are not connected to the\nmain network which run within the\npremises of the organization but carry\nthe features of an ethereum network now\nwhere do nodes run smart contract code\nnodes run smart contract codes on\nethereum virtual machine it is a virtual\nmachine designed to operate as a runtime\nenvironment for ethereum based smart\ncontracts evm is operated in a sandbox\nenvironment or isolated from the main\nnet and it is a perfect testing\nenvironment so you can download the evm\nrun your smart contact locally in an\nisolated manner and once you have tested\nand verified it then you can deploy it\non the mainline now very important and a\nvery good question what is adapt and how\nis it different from a normal\napplication we need to understand these\ndifferences very thoroughly in order to\nclear our interview so adap is a\ndecentralized application which is\ndeployed using smart contract the\ninformation on a dap is distributed and\nshared in a normal application it has a\ncentralized database which is running on\na centralized server so you have a\nsingle server and a single code which is\nmaintaining the entire application no\ninformation is shared and it is a single\npoint of failure a dapp has its backend\ncode a smart contract which runs on a\ndecentralized peer-to-peer network in a\nnormal application it's a typical\ncomputer software application that is\nhosted on a central server so if you see\nin the differences in the process you\nhave a front end then in the middle you\nhave a smart contract which is acting as\nthe back end code and then the entire\ntransaction executed on a smart contract\nis shared between the blockchain\nparticipants in the p2p network whereas\nin a normal application the front end\ninteracts with a centralized api which\nperforms basic crud operations create\nread update delete on a centralized\ndatabase and it is a single copy of the\ninformation name some leading open\nsource platforms for developing\nblockchain applications so ethereum is\none of the popular platforms for\nbuilding blockchain-based applications\nand it is widely getting adopted aeris\nis also used for building\nenterprise-based solutions and also some\nof the widely used platforms for\nbuilding blockchain are listed below\nhyperledger multi-chain open chain are\navailable in the market what is the very\nfirst thing you must specify in a\nsolidity file now it is necessary to\nspecify the version number of solidity\nat the beginning of a code as it\neliminates incompatibility errors which\ncan arise while compiling with another\nversion it is a mandatory clause which\nhas to be there at the top of any\nsolidity code which you write and you\nneed to mention the correct version\nnumber for which you have written the\ncode now what is the difference between\nbitcoin and ethereum and it's a very\nimportant question which i also ask in\nlot of interviews and it's important for\nyou to remember these differences so\nbitcoin the concept is purely p2p\ncurrency based transaction but in\nethereum you can do both p2p currency\ntransaction plus you can deploy smart\ncontracts bitcoin is primarily working\non proof of work consensus mechanism\nethereum is shifting from proof of work\nto proof of stake bitcoin uses sha-256\nhashing algorithm whereas ethereum uses\nit hash time taken to mine a block\ncurrently on bitcoin is approximately 10\nminutes whereas in ethereum it gets\nprocessed in 12 to 15 seconds the reward\nfor mining on bitcoin as of today is\n12.5 bitcoin whereas in ethereum it is\nthree ethers plus the transaction fees\non bitcoin the transaction fees are\noptional whereas in ethereum the fees is\ncalculated based on the gas which is\nbeing consumed on a smart contract per\ntransaction value of bitcoin as of 21st\naugust was captured at\n6934 us dollars whereas ethereum stands\nat 278 dollars now what is nonce and how\nis it used in mining in blockchain\nmining is a process to validate\ntransactions by solving a difficult\nmathematical puzzle called proof of work\nnow proof of work is the process to\ndetermine a number a nonce that is the\nnumber along with the cryptographic hash\nalgorithm to produce a hash value which\nis lower than a predefined target nonce\nis a random value which is used to vary\nthe hash value so that the final hash\nvalue meets the hashing condition so the\nnonce is the value which is being\ngenerated by the miner in order to guess\nthe hash value which should be less than\nthe target value and then only the miner\ncan claim the reward for if he's mining\na bitcoin network of 12.5 btc and\nethereum network of three ethers now\nlet's look at some of the advanced level\nquestions name the steps that are\ninvolved in a blockchain project\nimplementation so in a typical\nblockchain based project implementation\nwe start off with requirement\nidentification we need to understand the\nproblem and goal we need to identify the\nsuitable consensus mechanism what is the\nmost suitable platform which can solve\nthe problem and then identify the\nimplementation and deployment cost we\nneed to give an roi to the client then\nwe move on to the planning stage in this\nstep an individual evaluates all the\nrequirements list them down prioritize\nthem and decides a suitable blockchain\nplatform which has to be used to\nimplement this particular problem then\nkicks off the development and\nimplementation of the project you design\nthe architecture you design the user\ninterfaces and start building the apis\nand then comes controlling and\nmonitoring the project you apply the\nproof of concept you start off with that\nand then start building the application\non top of it and then once the basic\nversion of the application is available\nyou start identifying bugs and start\nfixing them explain a real life use case\nwhere blockchain is being used so supply\nchain is the biggest adopter of\nblockchain and as you can see as the raw\nmaterial moves is exchanged between\ndifferent entities in a supply chain the\ntraceability of that particular digital\nasset which in this case is raw material\nis a big case study on blockchain in\nsupply chain management smart contracts\nprovide permanent transparency\ntraceability and validation of\ntransaction shared by multiple supply\nchain partners so at each level each\nsupply chain partner has to register a\ntransaction when it receives a product\nand then when it passes it on so\nbasically the purchaser when consuming\nthe end product can see the entire\njourney of the product list and explain\nthe parts of evm memory so the memory of\nan evm is divided into three parts\nstorage memory and stack storage values\nare stored permanently on the blockchain\nnetwork and it is extremely expensive so\nwhenever you will try to modify a\nstorage based variable you would have to\npay gas for it memory variables are\ntemporary modifiable storage area it can\nbe accessed only during the contract\nexecution and once the execution is\nfinished the data is wiped off vanished\nand lost stack on the other way is a\ntemporary and a non-modifiable storage\nhere when the execution is completed the\ncontent is lost so basically memory and\nstack are relatively much cheaper than\nstorage variables now what happens if\nthe execution of a smart contract costs\nmore than the specified gas initially\nyour transaction will be executed but if\nthe execution of a smart contract costs\nmore than the specified gas then the\nminers will stop validating your\ncontract the blockchain will record the\ntransaction as fail as highlighted and\nalso the user does not get a refund so\nit becomes of utmost important that when\nyou are deploying your smart contract\nyou do the calculation of the gas\nconsumption in the most correct fashion\nwhat does the gas usage in a transaction\ndepend on and how is transaction fee\ncalculated so gas usage depends upon the\namount of storage you are using if you\nare using storage based variables and\nthe cost of the transactions will be\nhigh the gas will be high and the set of\ninstruction codes use in a smart\ncontract basically what operations you\nare performing on the storage based\nvariables either they are costly and if\nyou are using huge amount of storage\nvariables then automatically the cost of\nyour smart contract will keep on\nincreasing so basically the transaction\nfee is calculated in ethers which is\ngiven as the gas price which you have\ndetermined for your smart contract and\nmultiplied by the gas limit and this is\nhow your transaction fee is evaluated\nnow what is fork and what are some of\nthe types of forking so in simple terms\nupdating a cryptocurrency protocol or\ncode is called forking fork implies that\na blockchain splits into two branches\nand is done when you want to\nmodify certain attributes of an existing\nblockchain network it can happen when\nthe participants of the network cannot\ncome to an agreement with regards to\neither the consensus algorithm or they\nwant new rules for validation so there\nare three types of forking heart forking\nsoft forking and accidental force what\nis the difference between proof of work\nversus proof of stake and it's a very\nimportant question in blockchain proof\nof work is the process of solving a\ncomplex mathematical puzzle called\nmining whereas proof of stake is an\nalternative proof of work by which the\nblockchain aims to achieve distributed\nconsensus in proof of work probability\nof mining a block is based upon the\namount of computational work done by a\nminer basically it consumes huge amount\nof resources electricity resources and\ncomputational resources of the miner\nwhereas in proof of take the probability\nof validating the block relies upon the\namount of token you own beforehand so\nthe more the tokens you have the more\nthe chance you get to validate a block\nso basically proof of stock has been\nintroduced in order to reduce the\npressure on the resources which has been\nput by the proof-of-work consensus\nalgorithm miners spend a lot of\ncomputing power for solving the\ncryptographic puzzle along with the\nhardware and it's a huge cost so\nbasically proof of stake was created as\na solution to minimize the use of\nexpensive resources spent in mining what\nis a 51 attack in blockchain 51 attack\nrefers to a vulnerability where an\nindividual or group of people can\ncontrol the majority of the mining power\nor hash rate so basically they can take\nover the 50 percent of the blockchain\nnetwork this would allow the attackers\nto prevent new transactions from being\nconfirmed further they can double spend\nthe coins now in 51 attack smaller\ncryptocurrencies are primarily being\nattacked which does not have a huge\nnetwork which has a small consumer base\nwater function modifiers and solidity\nand mentioned the most widely used\nmodifiers in solidity function modifiers\nare used to easily modify behavior of\nyour smart contract it can be associated\nwith a function and then whenever a\nfunction is called the modifier is\ncalled before the main function in\nsimple terms it can build additional\nfeatures or apply restrictions on the\nfunction of smart contracts the most\nextensively used function modifiers in\nsolidity are view view functions are\nfunctions that cannot modify the state\nof a smart contract they are only read\nonly functions here is an example you\nhave a function get simply learn name\nand it is having a modifier view which\nonly returns a value but you are allowed\nto use some inbuilt solidity functions\nlike msg.sender but in case of pure pure\nfunctions are functions that neither\nread nor write the state of smart\ncontracts they return the same result\ndetermined by its input variables so\nbasically you can even access the\ninbuilt functions of solidity so here\nyou have a function called calculate you\ncan only use the input variables you\ncannot use any of the inbuilt functions\nalso of solidity now let's take a look\nof an example in order to write a crowd\nsales smart contract code in solidity\nprogramming language so here in the\nexample you have a smart contract where\nyou have defined certain smart contract\nvariables of solidity like address and\nyou went now the address function is if\nyou want to send your token to someone\nand your uint is the funding goal in\nethers basically how much amount of\nethers you want to generate in your\ncrowd sale\nproject then what is the duration of\nyour project then cost of each token in\nethers then address of token used as\nreward so these are the primary\nattributes which you have defined then\nyou have your public functions which are\ndefined over here the beneficiary is\nsuccessfully sent to the funding goal\nthe deadline of your crowd sale and the\nprice now here is your default function\nwhich is defined in a solidity contract\nwhich does not have any function name\nand is called by default in your smart\ncontract if anyone invokes a method in\nyour smart contract which does not exist\nin this function you are making sure\nthat all the amount which has been\npassed to the smart contract is passed\nto your address basically you are the\noriginator of your crowdsale function\ncrowdsale smart contract so you should\nbe receiving the amount then in your\ncrowdsale smart contract you can have a\nmethod which is called as safe\nwithdrawal and you have appended it with\na modifier called after deadline so\nwhich basically\nchecks that you can only do a withdrawal\nafter the deadline has been achieved and\nin this function you are checking the\nbalance then you are withdrawing that\namount from the sender and transferring\nit to your own account as the sender has\nsent that amount to you so you do the\nbasic validations whether the sender has\nthat balance and then you do that\ntransfer to your account thanks saurabh\ni hope this will help you in your\ninterviews with that we've reached the\nend of this complete blockchain tutorial\nby simplylearn\ni hope you guys enjoyed this video do\nlike and share it thank you for watching\nand stay tuned for more from simplylearn\n[Music]\n",
  "words": [
    "hi",
    "guys",
    "welcome",
    "complete",
    "blockchain",
    "tutorial",
    "simply",
    "learn",
    "name",
    "sandeep",
    "next",
    "hours",
    "teaching",
    "everything",
    "need",
    "know",
    "blockchain",
    "guiding",
    "learning",
    "journey",
    "saurav",
    "industry",
    "expert",
    "five",
    "years",
    "experience",
    "field",
    "blockchain",
    "bitcoin",
    "cryptocurrencies",
    "first",
    "go",
    "short",
    "animated",
    "introduction",
    "blockchain",
    "followed",
    "tutorial",
    "blockchain",
    "works",
    "teach",
    "cryptocurrency",
    "different",
    "types",
    "cryptocurrencies",
    "market",
    "available",
    "next",
    "teach",
    "ethereum",
    "smart",
    "contracts",
    "work",
    "learn",
    "process",
    "bitcoin",
    "mining",
    "bitcoin",
    "wallets",
    "work",
    "look",
    "ethereum",
    "bitcoin",
    "different",
    "tell",
    "five",
    "industries",
    "blockchain",
    "disrupt",
    "followed",
    "10",
    "things",
    "probably",
    "know",
    "bitcoin",
    "talk",
    "popular",
    "applications",
    "blockchain",
    "become",
    "blockchain",
    "developer",
    "finally",
    "handpicked",
    "30",
    "important",
    "questions",
    "might",
    "face",
    "blockchain",
    "interview",
    "begin",
    "make",
    "sure",
    "subscribe",
    "channel",
    "click",
    "bell",
    "icon",
    "never",
    "miss",
    "update",
    "simply",
    "learn",
    "way",
    "let",
    "look",
    "animated",
    "video",
    "ever",
    "wonder",
    "easier",
    "way",
    "complete",
    "transactions",
    "without",
    "deal",
    "online",
    "wallets",
    "banks",
    "applications",
    "well",
    "possible",
    "thanks",
    "blockchain",
    "everything",
    "need",
    "know",
    "blockchain",
    "imagine",
    "four",
    "friends",
    "jack",
    "ted",
    "sam",
    "phil",
    "meet",
    "dinner",
    "done",
    "jack",
    "pays",
    "bill",
    "decide",
    "split",
    "expense",
    "amongst",
    "next",
    "day",
    "phil",
    "sends",
    "share",
    "jack",
    "via",
    "online",
    "money",
    "transfer",
    "transaction",
    "goes",
    "without",
    "hitch",
    "ted",
    "sam",
    "send",
    "respective",
    "shares",
    "jack",
    "transactions",
    "go",
    "failed",
    "transaction",
    "cites",
    "issues",
    "bank",
    "jack",
    "comes",
    "know",
    "many",
    "ways",
    "bank",
    "transaction",
    "could",
    "fail",
    "could",
    "due",
    "technical",
    "issues",
    "bank",
    "one",
    "accounts",
    "hacked",
    "daily",
    "transfer",
    "limits",
    "exceeded",
    "sometimes",
    "additional",
    "charges",
    "like",
    "transfer",
    "charges",
    "associated",
    "transferring",
    "money",
    "solve",
    "problems",
    "concept",
    "cryptocurrency",
    "came",
    "existence",
    "cryptocurrencies",
    "form",
    "digital",
    "virtual",
    "currency",
    "run",
    "technology",
    "known",
    "blockchain",
    "thanks",
    "blockchain",
    "cryptocurrencies",
    "immune",
    "counterfeiting",
    "require",
    "central",
    "authority",
    "protected",
    "strong",
    "complex",
    "encryption",
    "algorithms",
    "market",
    "thousands",
    "cryptocurrencies",
    "like",
    "litecoin",
    "ethereum",
    "c",
    "cash",
    "one",
    "reign",
    "supreme",
    "bitcoin",
    "let",
    "go",
    "back",
    "previous",
    "example",
    "phil",
    "ted",
    "sam",
    "send",
    "jack",
    "two",
    "bitcoins",
    "contribution",
    "previous",
    "night",
    "dinner",
    "let",
    "assume",
    "phil",
    "ted",
    "sam",
    "three",
    "bitcoins",
    "reserve",
    "jack",
    "five",
    "first",
    "phil",
    "sends",
    "two",
    "bitcoins",
    "jack",
    "record",
    "created",
    "form",
    "block",
    "transaction",
    "details",
    "permanently",
    "inscribed",
    "block",
    "record",
    "also",
    "holds",
    "number",
    "bitcoins",
    "friends",
    "phil",
    "transaction",
    "jack",
    "seven",
    "bitcoins",
    "phil",
    "one",
    "following",
    "sam",
    "ted",
    "send",
    "two",
    "bitcoins",
    "jack",
    "new",
    "block",
    "created",
    "transactions",
    "blocks",
    "hold",
    "transaction",
    "details",
    "well",
    "many",
    "bitcoins",
    "sam",
    "ted",
    "jack",
    "reserve",
    "blocks",
    "linked",
    "takes",
    "reference",
    "previous",
    "one",
    "number",
    "bitcoins",
    "brand",
    "owns",
    "chain",
    "records",
    "blocks",
    "called",
    "ledger",
    "ledger",
    "shared",
    "among",
    "friends",
    "acts",
    "public",
    "distributed",
    "ledger",
    "forms",
    "basis",
    "blockchain",
    "happens",
    "phil",
    "one",
    "bitcoin",
    "left",
    "tries",
    "send",
    "two",
    "bitcoins",
    "jack",
    "transaction",
    "go",
    "friends",
    "copies",
    "ledger",
    "clear",
    "phil",
    "one",
    "bitcoin",
    "left",
    "friends",
    "flag",
    "transaction",
    "invalid",
    "hacker",
    "able",
    "alter",
    "data",
    "blockchain",
    "user",
    "copy",
    "ledger",
    "data",
    "within",
    "blocks",
    "encrypted",
    "complex",
    "algorithms",
    "made",
    "possible",
    "help",
    "blockchain",
    "technology",
    "blockchain",
    "described",
    "collection",
    "records",
    "linked",
    "strongly",
    "resistant",
    "alteration",
    "protected",
    "using",
    "cryptography",
    "let",
    "closer",
    "look",
    "bitcoin",
    "transaction",
    "jack",
    "phil",
    "find",
    "works",
    "every",
    "user",
    "bitcoin",
    "network",
    "two",
    "keys",
    "public",
    "key",
    "private",
    "key",
    "public",
    "key",
    "address",
    "everyone",
    "network",
    "knows",
    "like",
    "email",
    "address",
    "user",
    "private",
    "key",
    "unique",
    "address",
    "user",
    "knowledge",
    "something",
    "like",
    "password",
    "first",
    "phil",
    "passes",
    "number",
    "bitcoins",
    "wants",
    "send",
    "jack",
    "along",
    "jack",
    "unique",
    "wallet",
    "address",
    "hashing",
    "algorithm",
    "part",
    "transaction",
    "details",
    "details",
    "encrypted",
    "using",
    "encryption",
    "algorithms",
    "using",
    "phil",
    "unique",
    "private",
    "key",
    "done",
    "digitally",
    "sign",
    "transaction",
    "indicate",
    "transactions",
    "came",
    "fill",
    "output",
    "transmitted",
    "across",
    "world",
    "using",
    "jack",
    "public",
    "key",
    "message",
    "transaction",
    "decrypted",
    "jack",
    "private",
    "key",
    "jack",
    "knowledge",
    "different",
    "cryptocurrencies",
    "use",
    "different",
    "hashing",
    "algorithms",
    "bitcoin",
    "uses",
    "algorithm",
    "ethereum",
    "also",
    "famous",
    "cryptocurrency",
    "uses",
    "one",
    "known",
    "ethash",
    "transaction",
    "several",
    "similar",
    "ones",
    "taking",
    "place",
    "around",
    "world",
    "transactions",
    "validated",
    "added",
    "block",
    "block",
    "people",
    "validate",
    "blocks",
    "called",
    "miners",
    "block",
    "validated",
    "added",
    "blockchain",
    "miners",
    "need",
    "solve",
    "complex",
    "mathematical",
    "problem",
    "miner",
    "solves",
    "first",
    "adds",
    "block",
    "blockchain",
    "rewarded",
    "bitcoins",
    "process",
    "solving",
    "complex",
    "mathematical",
    "problem",
    "called",
    "proof",
    "work",
    "process",
    "adding",
    "block",
    "blockchain",
    "called",
    "mining",
    "phil",
    "jack",
    "wallets",
    "updated",
    "like",
    "every",
    "person",
    "network",
    "completed",
    "transaction",
    "know",
    "blockchain",
    "important",
    "concepts",
    "time",
    "small",
    "quiz",
    "concept",
    "blockchain",
    "ensures",
    "data",
    "altered",
    "users",
    "within",
    "network",
    "public",
    "distributed",
    "ledger",
    "b",
    "proof",
    "work",
    "c",
    "proof",
    "stake",
    "hash",
    "encryption",
    "let",
    "us",
    "know",
    "think",
    "right",
    "answer",
    "comments",
    "hoping",
    "guys",
    "enjoyed",
    "saurabh",
    "tell",
    "us",
    "blockchain",
    "hello",
    "everyone",
    "welcome",
    "session",
    "blockchain",
    "name",
    "saurabh",
    "part",
    "simply",
    "learn",
    "team",
    "let",
    "get",
    "started",
    "today",
    "understand",
    "concepts",
    "need",
    "blockchain",
    "bitcoin",
    "blockchain",
    "blockchain",
    "work",
    "concepts",
    "around",
    "blockchain",
    "like",
    "encryption",
    "public",
    "private",
    "key",
    "distributed",
    "public",
    "ledger",
    "concept",
    "proof",
    "work",
    "mining",
    "also",
    "look",
    "different",
    "applications",
    "blockchain",
    "different",
    "industries",
    "uses",
    "blockchain",
    "demo",
    "need",
    "blockchain",
    "imagine",
    "two",
    "entities",
    "b",
    "living",
    "far",
    "away",
    "want",
    "transfer",
    "money",
    "one",
    "america",
    "one",
    "asia",
    "today",
    "order",
    "transfer",
    "money",
    "rely",
    "third",
    "party",
    "trust",
    "possible",
    "results",
    "way",
    "transaction",
    "high",
    "transaction",
    "fees",
    "associated",
    "could",
    "problem",
    "double",
    "spending",
    "could",
    "internet",
    "based",
    "frauds",
    "poor",
    "data",
    "recovery",
    "let",
    "see",
    "means",
    "high",
    "transaction",
    "fee",
    "transaction",
    "bank",
    "charge",
    "relatively",
    "high",
    "amount",
    "transaction",
    "free",
    "compared",
    "today",
    "cryptocurrency",
    "charges",
    "double",
    "spending",
    "double",
    "spending",
    "digital",
    "error",
    "money",
    "spent",
    "twice",
    "account",
    "example",
    "eight",
    "hundred",
    "dollars",
    "account",
    "might",
    "end",
    "spending",
    "thousand",
    "dollars",
    "invalid",
    "transaction",
    "hackers",
    "might",
    "attack",
    "financial",
    "institutions",
    "gain",
    "unauthorized",
    "access",
    "steal",
    "money",
    "poor",
    "data",
    "recovery",
    "retrieving",
    "lost",
    "data",
    "difficult",
    "centralized",
    "system",
    "single",
    "copy",
    "information",
    "compared",
    "distributed",
    "databases",
    "distributed",
    "ledger",
    "technology",
    "like",
    "blockchain",
    "easy",
    "information",
    "distributed",
    "across",
    "multiple",
    "nodes",
    "problems",
    "solved",
    "using",
    "bitcoin",
    "blockchain",
    "technology",
    "see",
    "let",
    "first",
    "understand",
    "bitcoin",
    "blockchain",
    "bitcoin",
    "bitcoin",
    "digital",
    "currency",
    "used",
    "send",
    "receive",
    "money",
    "across",
    "world",
    "currency",
    "decentralized",
    "manner",
    "minimum",
    "transfer",
    "fee",
    "say",
    "gon",
    "na",
    "relatively",
    "less",
    "compared",
    "bank",
    "charges",
    "involve",
    "third",
    "party",
    "intermediate",
    "reason",
    "involved",
    "thereby",
    "reducing",
    "cost",
    "transaction",
    "fast",
    "cheap",
    "transfer",
    "possible",
    "personal",
    "information",
    "identity",
    "user",
    "hidden",
    "transactions",
    "cryptographically",
    "secure",
    "signed",
    "using",
    "private",
    "key",
    "bitcoin",
    "storing",
    "transacting",
    "money",
    "distributed",
    "network",
    "called",
    "blockchain",
    "therefore",
    "becomes",
    "important",
    "us",
    "order",
    "understand",
    "bitcoin",
    "works",
    "also",
    "need",
    "understand",
    "blockchain",
    "underlying",
    "technology",
    "blockchain",
    "blockchain",
    "distributed",
    "database",
    "immutable",
    "records",
    "called",
    "blocks",
    "secured",
    "using",
    "cryptography",
    "see",
    "data",
    "recorded",
    "changed",
    "altered",
    "attribute",
    "immutability",
    "blockchain",
    "block",
    "record",
    "book",
    "contains",
    "details",
    "transactional",
    "data",
    "every",
    "block",
    "given",
    "aggregated",
    "set",
    "transactions",
    "validated",
    "verified",
    "added",
    "basically",
    "block",
    "consists",
    "four",
    "primary",
    "details",
    "take",
    "look",
    "contains",
    "hash",
    "previous",
    "block",
    "contains",
    "aggregated",
    "list",
    "transactions",
    "also",
    "contains",
    "value",
    "nonce",
    "hash",
    "block",
    "like",
    "digital",
    "signature",
    "block",
    "hash",
    "previous",
    "block",
    "holds",
    "hash",
    "value",
    "previous",
    "block",
    "connected",
    "contains",
    "details",
    "several",
    "transactions",
    "aggregated",
    "block",
    "nonce",
    "nonce",
    "random",
    "number",
    "random",
    "value",
    "generated",
    "derive",
    "hash",
    "value",
    "less",
    "target",
    "decided",
    "block",
    "hash",
    "alphanumeric",
    "value",
    "used",
    "identify",
    "block",
    "unique",
    "let",
    "deep",
    "dive",
    "blockchain",
    "blockchain",
    "creates",
    "chain",
    "blocks",
    "see",
    "blockchain",
    "previous",
    "hash",
    "value",
    "block",
    "always",
    "equal",
    "hash",
    "value",
    "previous",
    "block",
    "see",
    "previous",
    "hash",
    "value",
    "block",
    "number",
    "two",
    "23a",
    "hash",
    "value",
    "block",
    "one",
    "also",
    "previous",
    "hash",
    "value",
    "block",
    "one",
    "zero",
    "first",
    "block",
    "blockchain",
    "called",
    "genesis",
    "block",
    "first",
    "block",
    "called",
    "genesis",
    "block",
    "previous",
    "hash",
    "value",
    "consider",
    "example",
    "person",
    "tries",
    "tamper",
    "block",
    "block",
    "number",
    "two",
    "try",
    "change",
    "hash",
    "block",
    "number",
    "2",
    "change",
    "thereby",
    "previous",
    "hash",
    "value",
    "block",
    "number",
    "3",
    "stand",
    "valid",
    "hash",
    "value",
    "block",
    "2",
    "block",
    "3",
    "match",
    "make",
    "following",
    "blocks",
    "blocks",
    "ahead",
    "block",
    "number",
    "two",
    "invalid",
    "particular",
    "feature",
    "blockchain",
    "helps",
    "us",
    "eliminate",
    "data",
    "tampering",
    "let",
    "see",
    "blockchain",
    "work",
    "jack",
    "wants",
    "send",
    "money",
    "elsa",
    "requested",
    "transaction",
    "jack",
    "wanting",
    "send",
    "money",
    "elsa",
    "sent",
    "peer",
    "nodes",
    "network",
    "computers",
    "transaction",
    "sent",
    "nodes",
    "verify",
    "set",
    "people",
    "typical",
    "set",
    "nodes",
    "called",
    "miners",
    "verified",
    "transaction",
    "combined",
    "transactions",
    "create",
    "new",
    "block",
    "blockchain",
    "result",
    "receiving",
    "party",
    "elsa",
    "receives",
    "amount",
    "blockchain",
    "transaction",
    "could",
    "cryptocurrency",
    "data",
    "kind",
    "asset",
    "transaction",
    "digital",
    "asset",
    "holds",
    "value",
    "network",
    "let",
    "take",
    "look",
    "typical",
    "features",
    "blockchain",
    "typical",
    "features",
    "blockchain",
    "involves",
    "encryption",
    "consensus",
    "algorithm",
    "usage",
    "public",
    "private",
    "key",
    "order",
    "sign",
    "messages",
    "network",
    "role",
    "miners",
    "order",
    "validate",
    "verify",
    "transactions",
    "create",
    "distributed",
    "public",
    "ledger",
    "sha",
    "256",
    "encryption",
    "transaction",
    "blockchain",
    "uses",
    "cryptographic",
    "keys",
    "secure",
    "identities",
    "hash",
    "function",
    "make",
    "blockchain",
    "unalterable",
    "cryptographic",
    "keys",
    "includes",
    "two",
    "kind",
    "keys",
    "private",
    "public",
    "key",
    "uses",
    "hash",
    "function",
    "includes",
    "stands",
    "number",
    "bit",
    "takes",
    "memory",
    "secure",
    "hashing",
    "algorithm",
    "hash",
    "function",
    "takes",
    "input",
    "data",
    "always",
    "return",
    "alpha",
    "numeric",
    "output",
    "64",
    "characters",
    "256",
    "bits",
    "see",
    "feed",
    "data",
    "like",
    "feeding",
    "example",
    "welcome",
    "simply",
    "learn",
    "hashing",
    "function",
    "return",
    "256",
    "bit",
    "value",
    "hash",
    "value",
    "unique",
    "value",
    "returned",
    "hash",
    "function",
    "called",
    "hash",
    "value",
    "impossible",
    "decode",
    "original",
    "message",
    "using",
    "hash",
    "value",
    "hash",
    "value",
    "discloses",
    "original",
    "message",
    "hash",
    "function",
    "minor",
    "change",
    "input",
    "data",
    "result",
    "different",
    "hash",
    "value",
    "unique",
    "feature",
    "hashing",
    "function",
    "make",
    "small",
    "change",
    "hashing",
    "value",
    "change",
    "together",
    "completely",
    "function",
    "give",
    "input",
    "pass",
    "hashing",
    "function",
    "get",
    "output",
    "reverse",
    "possible",
    "simple",
    "terms",
    "decrypting",
    "back",
    "original",
    "text",
    "possible",
    "using",
    "makes",
    "secure",
    "cryptography",
    "uses",
    "public",
    "private",
    "trees",
    "encrypt",
    "decrypt",
    "data",
    "private",
    "key",
    "always",
    "kept",
    "secret",
    "user",
    "send",
    "message",
    "someone",
    "sign",
    "private",
    "key",
    "secret",
    "share",
    "public",
    "key",
    "order",
    "users",
    "decrypt",
    "message",
    "validate",
    "yes",
    "sender",
    "message",
    "blockchain",
    "network",
    "public",
    "key",
    "shared",
    "bitcoin",
    "users",
    "order",
    "transaction",
    "let",
    "take",
    "look",
    "entire",
    "verification",
    "process",
    "initiate",
    "transaction",
    "passed",
    "hashing",
    "function",
    "case",
    "output",
    "passed",
    "signature",
    "algorithm",
    "user",
    "private",
    "key",
    "receive",
    "digitally",
    "signed",
    "document",
    "hashing",
    "output",
    "plus",
    "private",
    "key",
    "used",
    "generate",
    "digitally",
    "signed",
    "document",
    "floated",
    "network",
    "public",
    "key",
    "encrypted",
    "output",
    "distributed",
    "bitcoin",
    "network",
    "using",
    "public",
    "key",
    "digitally",
    "signed",
    "document",
    "public",
    "key",
    "used",
    "miners",
    "verify",
    "transaction",
    "done",
    "include",
    "transaction",
    "block",
    "transaction",
    "marked",
    "completed",
    "distributed",
    "public",
    "ledger",
    "blockchain",
    "distributed",
    "ledger",
    "digital",
    "data",
    "recorded",
    "verified",
    "node",
    "preventing",
    "tempering",
    "data",
    "see",
    "network",
    "nodes",
    "amongst",
    "nodes",
    "might",
    "miners",
    "taking",
    "responsibility",
    "verifying",
    "validating",
    "transactions",
    "block",
    "view",
    "verification",
    "rewarded",
    "see",
    "talking",
    "mining",
    "let",
    "take",
    "example",
    "jack",
    "sending",
    "10",
    "btc",
    "el",
    "elsa",
    "verified",
    "john",
    "network",
    "john",
    "miner",
    "transaction",
    "verified",
    "john",
    "result",
    "broadcasted",
    "transferred",
    "nodes",
    "result",
    "block",
    "becomes",
    "valid",
    "gets",
    "added",
    "blockchain",
    "transferred",
    "nodes",
    "ledger",
    "node",
    "records",
    "transaction",
    "ledgers",
    "information",
    "network",
    "note",
    "valid",
    "transaction",
    "propagated",
    "across",
    "bitcoin",
    "users",
    "invalid",
    "transaction",
    "identified",
    "discarded",
    "first",
    "node",
    "received",
    "user",
    "tries",
    "tamper",
    "data",
    "every",
    "user",
    "blockchain",
    "maintains",
    "copy",
    "ledger",
    "said",
    "transactions",
    "verified",
    "distributed",
    "across",
    "nodes",
    "ledgers",
    "updated",
    "someone",
    "goes",
    "back",
    "blockchain",
    "tries",
    "tamper",
    "data",
    "one",
    "blocks",
    "nodes",
    "able",
    "identify",
    "invalid",
    "block",
    "discard",
    "anyone",
    "tries",
    "modify",
    "data",
    "alternate",
    "transaction",
    "copies",
    "users",
    "negate",
    "alteration",
    "let",
    "take",
    "look",
    "proof",
    "work",
    "algorithm",
    "proof",
    "work",
    "consensus",
    "algorithm",
    "used",
    "bitcoin",
    "network",
    "process",
    "determine",
    "number",
    "called",
    "nonce",
    "along",
    "cryptographic",
    "hashing",
    "algorithm",
    "produce",
    "hash",
    "value",
    "lower",
    "predefined",
    "target",
    "block",
    "see",
    "miners",
    "main",
    "task",
    "identify",
    "nonce",
    "random",
    "number",
    "order",
    "generate",
    "hash",
    "value",
    "less",
    "target",
    "generally",
    "target",
    "something",
    "like",
    "hash",
    "value",
    "leading",
    "zeroes",
    "like",
    "example",
    "see",
    "leading",
    "zeros",
    "two",
    "leading",
    "zeros",
    "order",
    "generate",
    "hash",
    "value",
    "leading",
    "zeros",
    "like",
    "two",
    "three",
    "takes",
    "huge",
    "amount",
    "computing",
    "power",
    "miners",
    "determine",
    "order",
    "determine",
    "nouns",
    "miners",
    "need",
    "try",
    "quadrillion",
    "nouns",
    "values",
    "get",
    "one",
    "valid",
    "hash",
    "works",
    "transaction",
    "data",
    "distributed",
    "across",
    "users",
    "bitcoin",
    "network",
    "miners",
    "validate",
    "unverified",
    "transactions",
    "add",
    "block",
    "task",
    "miners",
    "compete",
    "solve",
    "difficult",
    "mathematical",
    "puzzle",
    "generation",
    "nonce",
    "value",
    "based",
    "cryptographic",
    "hashing",
    "function",
    "whole",
    "process",
    "known",
    "proof",
    "work",
    "first",
    "miner",
    "solves",
    "puzzle",
    "gets",
    "rewarded",
    "purpose",
    "miner",
    "made",
    "investment",
    "hardware",
    "computing",
    "power",
    "energy",
    "mining",
    "machine",
    "consuming",
    "order",
    "get",
    "reward",
    "miner",
    "verified",
    "block",
    "added",
    "blockchain",
    "let",
    "take",
    "look",
    "process",
    "using",
    "generate",
    "hash",
    "value",
    "use",
    "nonce",
    "input",
    "hashing",
    "function",
    "hash",
    "value",
    "less",
    "target",
    "modify",
    "nonce",
    "value",
    "repeat",
    "activity",
    "less",
    "target",
    "value",
    "yes",
    "deemed",
    "get",
    "reward",
    "puzzle",
    "solved",
    "note",
    "bitcoin",
    "network",
    "target",
    "adjusted",
    "every",
    "two",
    "2016",
    "blocks",
    "mentioned",
    "target",
    "leading",
    "three",
    "zeros",
    "leading",
    "four",
    "zeros",
    "revised",
    "every",
    "two",
    "zero",
    "one",
    "six",
    "blocks",
    "average",
    "block",
    "mined",
    "every",
    "10",
    "minutes",
    "difficulty",
    "puzzle",
    "maintained",
    "way",
    "never",
    "deviates",
    "much",
    "average",
    "time",
    "taken",
    "minor",
    "block",
    "candidate",
    "block",
    "proof",
    "work",
    "let",
    "consider",
    "example",
    "miner",
    "jack",
    "competing",
    "validate",
    "block",
    "number",
    "thousand",
    "jack",
    "mining",
    "block",
    "number",
    "thousand",
    "also",
    "listening",
    "new",
    "transactions",
    "transaction",
    "pool",
    "transaction",
    "stored",
    "basically",
    "parked",
    "get",
    "verified",
    "gets",
    "included",
    "new",
    "block",
    "unfortunately",
    "jack",
    "could",
    "bind",
    "thousands",
    "someone",
    "else",
    "mined",
    "earned",
    "reward",
    "block",
    "thousand",
    "valid",
    "proof",
    "work",
    "verified",
    "block",
    "jack",
    "start",
    "constructing",
    "candidate",
    "block",
    "subsequent",
    "block",
    "sequential",
    "1001",
    "gathering",
    "unverified",
    "transaction",
    "transaction",
    "pool",
    "jack",
    "started",
    "creating",
    "candidate",
    "block",
    "pulling",
    "transactions",
    "transaction",
    "pool",
    "block",
    "number",
    "1001",
    "current",
    "block",
    "candidate",
    "block",
    "validated",
    "proof",
    "work",
    "yet",
    "block",
    "1001",
    "gets",
    "validated",
    "miner",
    "succeeds",
    "solving",
    "proof",
    "work",
    "could",
    "jack",
    "could",
    "someone",
    "else",
    "competing",
    "mining",
    "blockchain",
    "transaction",
    "contained",
    "considered",
    "confirmed",
    "new",
    "block",
    "added",
    "existing",
    "blockchain",
    "bitcoins",
    "concerned",
    "transaction",
    "spent",
    "today",
    "miner",
    "solves",
    "puzzle",
    "gets",
    "reward",
    "bitcoins",
    "amount",
    "bitcoin",
    "rewarded",
    "block",
    "added",
    "blockchain",
    "half",
    "every",
    "2",
    "lakh",
    "10",
    "000",
    "blocks",
    "approximately",
    "every",
    "four",
    "year",
    "called",
    "huffing",
    "concept",
    "bitcoin",
    "approximately",
    "whenever",
    "threshold",
    "reached",
    "reward",
    "get",
    "reduced",
    "bitcoins",
    "let",
    "take",
    "look",
    "applications",
    "blockchain",
    "different",
    "industries",
    "voting",
    "blockchain",
    "trustworthy",
    "mechanism",
    "increased",
    "transparency",
    "voting",
    "process",
    "supply",
    "chain",
    "uses",
    "attributes",
    "blockchain",
    "provenance",
    "traceability",
    "detect",
    "identify",
    "trace",
    "supply",
    "asset",
    "point",
    "origin",
    "final",
    "destination",
    "due",
    "course",
    "defect",
    "detected",
    "easily",
    "identify",
    "journey",
    "asset",
    "defect",
    "generated",
    "insurance",
    "huge",
    "adoption",
    "utilizing",
    "blockchain",
    "eliminating",
    "forgery",
    "preventing",
    "false",
    "claims",
    "records",
    "transactions",
    "maintained",
    "blockchain",
    "immutable",
    "ledger",
    "difficult",
    "anyone",
    "apply",
    "false",
    "claim",
    "example",
    "health",
    "records",
    "blockchain",
    "insurance",
    "companies",
    "easily",
    "validate",
    "health",
    "claims",
    "made",
    "patient",
    "blockchain",
    "digital",
    "reports",
    "accounting",
    "virtually",
    "maintains",
    "record",
    "accurate",
    "financial",
    "information",
    "financial",
    "transactions",
    "maintained",
    "immutable",
    "ledger",
    "easily",
    "validated",
    "verified",
    "makes",
    "accounting",
    "simple",
    "uses",
    "blockchain",
    "organizations",
    "across",
    "globe",
    "adopting",
    "started",
    "using",
    "blockchain",
    "example",
    "walmart",
    "due",
    "blockchain",
    "decentralized",
    "system",
    "company",
    "able",
    "protect",
    "data",
    "hacking",
    "detoleration",
    "british",
    "airways",
    "blockchain",
    "flight",
    "data",
    "various",
    "sources",
    "merged",
    "together",
    "help",
    "passengers",
    "receive",
    "accurate",
    "information",
    "maersk",
    "blockchain",
    "company",
    "able",
    "provide",
    "efficient",
    "transparent",
    "secure",
    "service",
    "global",
    "trade",
    "brilliant",
    "earth",
    "order",
    "track",
    "trace",
    "provenance",
    "high",
    "value",
    "gemstones",
    "using",
    "blockchain",
    "let",
    "take",
    "look",
    "demo",
    "let",
    "go",
    "concepts",
    "learned",
    "want",
    "demonstrate",
    "usage",
    "hashing",
    "function",
    "learned",
    "hashing",
    "function",
    "256",
    "big",
    "hashing",
    "function",
    "type",
    "data",
    "always",
    "generate",
    "256",
    "bit",
    "hash",
    "gon",
    "na",
    "unique",
    "one",
    "way",
    "function",
    "possible",
    "able",
    "derive",
    "data",
    "hash",
    "value",
    "type",
    "data",
    "generate",
    "hash",
    "value",
    "hash",
    "value",
    "blank",
    "type",
    "anything",
    "always",
    "generate",
    "hash",
    "value",
    "data",
    "set",
    "let",
    "see",
    "use",
    "hashing",
    "function",
    "block",
    "block",
    "attributes",
    "block",
    "number",
    "nonce",
    "value",
    "like",
    "similar",
    "hashing",
    "function",
    "data",
    "set",
    "hash",
    "value",
    "difficulty",
    "level",
    "target",
    "already",
    "set",
    "hashing",
    "function",
    "four",
    "leading",
    "zeros",
    "whenever",
    "mining",
    "job",
    "miner",
    "generate",
    "hash",
    "four",
    "leading",
    "zeroes",
    "hash",
    "value",
    "use",
    "guess",
    "nonce",
    "value",
    "order",
    "generate",
    "hash",
    "four",
    "leading",
    "zeros",
    "suppose",
    "type",
    "data",
    "set",
    "hash",
    "right",
    "seeing",
    "screen",
    "mined",
    "leading",
    "zeros",
    "four",
    "leading",
    "zeros",
    "click",
    "mine",
    "nonce",
    "value",
    "change",
    "miner",
    "guess",
    "nonce",
    "value",
    "get",
    "hash",
    "four",
    "leading",
    "zeros",
    "non",
    "switch",
    "generated",
    "57",
    "takes",
    "huge",
    "amount",
    "time",
    "processing",
    "power",
    "could",
    "gone",
    "pretty",
    "high",
    "value",
    "able",
    "guess",
    "decent",
    "amount",
    "time",
    "soon",
    "change",
    "value",
    "block",
    "turned",
    "pink",
    "means",
    "verified",
    "hash",
    "generated",
    "see",
    "concept",
    "multiple",
    "blocks",
    "blockchain",
    "multiple",
    "blocks",
    "new",
    "extra",
    "attribute",
    "called",
    "previous",
    "hash",
    "notice",
    "blocks",
    "right",
    "currently",
    "previous",
    "values",
    "hash",
    "previous",
    "blocks",
    "block",
    "number",
    "2",
    "previous",
    "hash",
    "value",
    "4015",
    "hash",
    "value",
    "previous",
    "block",
    "typical",
    "blockchain",
    "constructed",
    "things",
    "noted",
    "suppose",
    "modify",
    "data",
    "last",
    "block",
    "see",
    "block",
    "hash",
    "needs",
    "changed",
    "data",
    "changed",
    "hash",
    "regenerated",
    "previous",
    "hash",
    "value",
    "hash",
    "value",
    "previous",
    "block",
    "new",
    "hash",
    "generated",
    "block",
    "starts",
    "four",
    "leading",
    "zeros",
    "another",
    "thing",
    "noted",
    "suppose",
    "go",
    "back",
    "sequence",
    "modify",
    "data",
    "previous",
    "blocks",
    "blocks",
    "ahead",
    "block",
    "number",
    "three",
    "verified",
    "signature",
    "block",
    "number",
    "three",
    "changed",
    "therefore",
    "values",
    "previous",
    "hash",
    "updated",
    "block",
    "number",
    "four",
    "five",
    "mine",
    "block",
    "number",
    "three",
    "generated",
    "hash",
    "value",
    "per",
    "target",
    "block",
    "number",
    "four",
    "also",
    "mined",
    "blocked",
    "number",
    "five",
    "also",
    "mined",
    "way",
    "created",
    "valid",
    "blockchain",
    "demonstrates",
    "someone",
    "regular",
    "blockchain",
    "mainnet",
    "blockchain",
    "high",
    "number",
    "blockchains",
    "blocks",
    "go",
    "tamper",
    "block",
    "past",
    "subsequent",
    "blocks",
    "ahead",
    "block",
    "mined",
    "take",
    "huge",
    "huge",
    "amount",
    "time",
    "processing",
    "power",
    "makes",
    "impossible",
    "see",
    "concept",
    "take",
    "concept",
    "distributed",
    "distributed",
    "ledger",
    "three",
    "peers",
    "pra",
    "peer",
    "b",
    "prc",
    "copy",
    "ledgers",
    "suppose",
    "someone",
    "modified",
    "data",
    "pra",
    "generated",
    "block",
    "updated",
    "block",
    "hash",
    "value",
    "block",
    "peer",
    "block",
    "number",
    "five",
    "different",
    "block",
    "number",
    "five",
    "prp",
    "prb",
    "four",
    "time",
    "zero",
    "e4",
    "pse",
    "also",
    "hash",
    "signature",
    "peer",
    "b",
    "easily",
    "participants",
    "distributed",
    "network",
    "able",
    "identify",
    "someone",
    "modified",
    "block",
    "number",
    "five",
    "pra",
    "valid",
    "block",
    "get",
    "disregarded",
    "whatever",
    "example",
    "showing",
    "random",
    "data",
    "take",
    "look",
    "typical",
    "transaction",
    "actually",
    "happens",
    "bitcoin",
    "network",
    "rather",
    "sending",
    "random",
    "data",
    "see",
    "exact",
    "examples",
    "transactions",
    "transfer",
    "money",
    "actually",
    "happens",
    "one",
    "account",
    "another",
    "good",
    "way",
    "see",
    "ways",
    "typically",
    "transactions",
    "aggregated",
    "mined",
    "block",
    "see",
    "typical",
    "fashion",
    "three",
    "peers",
    "set",
    "information",
    "distributed",
    "ledger",
    "modify",
    "transaction",
    "block",
    "get",
    "invalidated",
    "would",
    "remind",
    "blockchain",
    "tutorial",
    "part",
    "one",
    "let",
    "get",
    "started",
    "understand",
    "us",
    "today",
    "let",
    "check",
    "hypothesis",
    "city",
    "far",
    "away",
    "somebody",
    "something",
    "bad",
    "hacker",
    "hates",
    "bank",
    "wants",
    "steal",
    "money",
    "people",
    "lying",
    "bank",
    "hate",
    "even",
    "nuances",
    "problem",
    "areas",
    "banking",
    "system",
    "banking",
    "system",
    "higher",
    "transactional",
    "international",
    "transfer",
    "costs",
    "lot",
    "documentation",
    "required",
    "setting",
    "account",
    "opening",
    "account",
    "onboarding",
    "customer",
    "banking",
    "system",
    "always",
    "accessible",
    "24x7",
    "closed",
    "banking",
    "holidays",
    "limitations",
    "also",
    "like",
    "transfer",
    "limits",
    "day",
    "know",
    "ca",
    "transfer",
    "x",
    "amount",
    "within",
    "stipulated",
    "time",
    "banks",
    "ecosystem",
    "acts",
    "center",
    "point",
    "failure",
    "centralized",
    "based",
    "system",
    "prone",
    "failure",
    "centralized",
    "point",
    "view",
    "bank",
    "fails",
    "transactions",
    "come",
    "halt",
    "dependent",
    "bank",
    "let",
    "see",
    "happens",
    "hacker",
    "able",
    "get",
    "banking",
    "system",
    "hacks",
    "bank",
    "investors",
    "people",
    "associated",
    "bank",
    "information",
    "associated",
    "get",
    "corrupted",
    "get",
    "jeopardized",
    "lead",
    "huge",
    "losses",
    "bank",
    "individuals",
    "happen",
    "click",
    "button",
    "simple",
    "hacker",
    "access",
    "system",
    "manipulate",
    "system",
    "compromise",
    "information",
    "share",
    "parties",
    "supposed",
    "information",
    "lot",
    "go",
    "wrong",
    "though",
    "hackers",
    "caught",
    "right",
    "possible",
    "cyber",
    "security",
    "various",
    "means",
    "information",
    "compromised",
    "difficult",
    "roll",
    "back",
    "need",
    "secure",
    "systems",
    "systems",
    "dependent",
    "centralized",
    "authority",
    "work",
    "decentralized",
    "fashion",
    "thereby",
    "making",
    "hack",
    "proof",
    "plus",
    "lowering",
    "transaction",
    "cost",
    "also",
    "incident",
    "course",
    "catch",
    "bank",
    "manager",
    "attention",
    "go",
    "advisors",
    "want",
    "make",
    "sure",
    "happen",
    "technology",
    "com",
    "people",
    "advisors",
    "make",
    "sure",
    "happen",
    "remedy",
    "remedy",
    "setting",
    "blockchain",
    "course",
    "manager",
    "looking",
    "banking",
    "functions",
    "might",
    "aware",
    "technology",
    "benefits",
    "blockchain",
    "bring",
    "onto",
    "table",
    "order",
    "prevent",
    "incident",
    "learn",
    "go",
    "understand",
    "blockchain",
    "actually",
    "achieve",
    "us",
    "understand",
    "today",
    "blockchain",
    "bitcoin",
    "story",
    "features",
    "blockchain",
    "like",
    "public",
    "distributed",
    "ledger",
    "hashing",
    "encryption",
    "proof",
    "work",
    "consensus",
    "algorithm",
    "concept",
    "mining",
    "cover",
    "use",
    "case",
    "blockchain",
    "used",
    "banking",
    "operations",
    "blockchain",
    "blockchain",
    "list",
    "records",
    "called",
    "blocks",
    "stores",
    "data",
    "publicly",
    "chronological",
    "order",
    "entire",
    "information",
    "persisted",
    "using",
    "cryptography",
    "secured",
    "using",
    "cryptography",
    "cryptography",
    "ensures",
    "privacy",
    "user",
    "maintained",
    "data",
    "altered",
    "information",
    "blockchain",
    "network",
    "controlled",
    "centralized",
    "authority",
    "unlike",
    "modern",
    "financial",
    "institutions",
    "nobody",
    "controls",
    "data",
    "within",
    "blockchain",
    "data",
    "maintained",
    "participants",
    "network",
    "democratic",
    "authority",
    "order",
    "approve",
    "transaction",
    "happen",
    "blockchain",
    "network",
    "access",
    "anyone",
    "network",
    "typical",
    "blockchain",
    "network",
    "public",
    "blockchain",
    "long",
    "access",
    "network",
    "access",
    "data",
    "within",
    "blockchain",
    "participant",
    "blockchain",
    "network",
    "copy",
    "ledger",
    "participants",
    "therefore",
    "everyone",
    "every",
    "participant",
    "network",
    "copy",
    "data",
    "everyone",
    "network",
    "copy",
    "blockchain",
    "data",
    "used",
    "ensuring",
    "data",
    "remains",
    "untempered",
    "even",
    "one",
    "node",
    "data",
    "one",
    "particular",
    "participant",
    "computer",
    "gets",
    "corrupted",
    "participants",
    "come",
    "know",
    "immediately",
    "particular",
    "instance",
    "node",
    "gone",
    "corrupted",
    "rectify",
    "soon",
    "possible",
    "basically",
    "question",
    "technology",
    "bitcoin",
    "works",
    "answer",
    "yes",
    "bitcoin",
    "could",
    "possible",
    "without",
    "blockchain",
    "understand",
    "bitcoin",
    "adopted",
    "blockchain",
    "order",
    "reach",
    "journey",
    "today",
    "bitcoin",
    "introduced",
    "2009",
    "someone",
    "group",
    "people",
    "known",
    "satoshi",
    "nakamoto",
    "aimed",
    "solve",
    "problem",
    "faced",
    "fiat",
    "currencies",
    "help",
    "blockchain",
    "technology",
    "today",
    "2018",
    "1600",
    "cryptocurrencies",
    "follow",
    "concepts",
    "bitcoin",
    "blockchain",
    "example",
    "popular",
    "cryptocurrencies",
    "like",
    "ethereum",
    "litecoin",
    "dash",
    "ripple",
    "many",
    "let",
    "explain",
    "bitcoin",
    "transaction",
    "works",
    "sender",
    "transmits",
    "transaction",
    "details",
    "worldwide",
    "basically",
    "whenever",
    "sender",
    "transaction",
    "send",
    "bitcoins",
    "receiver",
    "submit",
    "transaction",
    "public",
    "blockchain",
    "network",
    "bitcoin",
    "transmit",
    "verification",
    "authenticate",
    "users",
    "done",
    "miners",
    "around",
    "world",
    "basically",
    "specific",
    "participants",
    "bitcoin",
    "network",
    "called",
    "miners",
    "whose",
    "job",
    "verify",
    "authenticity",
    "sender",
    "receiver",
    "also",
    "validate",
    "whether",
    "sender",
    "right",
    "amount",
    "balance",
    "bitcoin",
    "trying",
    "send",
    "receiver",
    "ensuring",
    "sanity",
    "underlying",
    "blockchain",
    "network",
    "bitcoin",
    "remains",
    "correct",
    "get",
    "corrupted",
    "miner",
    "authenticated",
    "transaction",
    "verified",
    "parameters",
    "transaction",
    "added",
    "block",
    "block",
    "made",
    "part",
    "main",
    "blockchain",
    "block",
    "added",
    "blockchain",
    "money",
    "transactions",
    "associated",
    "block",
    "gets",
    "executed",
    "money",
    "deducted",
    "sender",
    "wallet",
    "added",
    "receiver",
    "wallet",
    "thereby",
    "transaction",
    "completed",
    "block",
    "added",
    "ledger",
    "across",
    "nodes",
    "updated",
    "every",
    "participant",
    "ledger",
    "copy",
    "updated",
    "particular",
    "block",
    "added",
    "blockchain",
    "therefore",
    "participants",
    "copy",
    "information",
    "makes",
    "blockchain",
    "special",
    "special",
    "four",
    "features",
    "blockchain",
    "going",
    "talk",
    "detail",
    "public",
    "distributed",
    "ledger",
    "works",
    "using",
    "hashing",
    "encryption",
    "every",
    "block",
    "hash",
    "value",
    "digital",
    "signature",
    "block",
    "transactions",
    "approved",
    "verified",
    "blockchain",
    "network",
    "using",
    "proof",
    "work",
    "consensus",
    "algorithm",
    "blockchain",
    "network",
    "utilizes",
    "resources",
    "miners",
    "validate",
    "transaction",
    "miners",
    "lieu",
    "putting",
    "investing",
    "resources",
    "validating",
    "transactions",
    "get",
    "rewards",
    "terms",
    "bitcoin",
    "process",
    "called",
    "mining",
    "public",
    "distributed",
    "ledger",
    "let",
    "imagine",
    "four",
    "friends",
    "sharing",
    "particular",
    "document",
    "amongst",
    "correct",
    "single",
    "copy",
    "document",
    "one",
    "alter",
    "data",
    "may",
    "go",
    "unnoticed",
    "however",
    "outcome",
    "would",
    "different",
    "one",
    "copy",
    "data",
    "therefore",
    "every",
    "participant",
    "copy",
    "data",
    "even",
    "one",
    "changed",
    "data",
    "others",
    "would",
    "find",
    "data",
    "match",
    "blockchain",
    "works",
    "similar",
    "fashion",
    "data",
    "within",
    "blockchain",
    "accessible",
    "everyone",
    "long",
    "part",
    "network",
    "could",
    "access",
    "entire",
    "history",
    "transactions",
    "taken",
    "place",
    "since",
    "blockchain",
    "created",
    "since",
    "inception",
    "first",
    "block",
    "blockchain",
    "called",
    "genesis",
    "block",
    "genesis",
    "block",
    "current",
    "block",
    "access",
    "entire",
    "chain",
    "additions",
    "blocking",
    "approved",
    "participant",
    "users",
    "blockchain",
    "network",
    "majority",
    "members",
    "within",
    "network",
    "approve",
    "additions",
    "blockchain",
    "public",
    "part",
    "ledger",
    "important",
    "additions",
    "made",
    "blockchain",
    "permanent",
    "immutable",
    "immutable",
    "transactions",
    "transactions",
    "altered",
    "registered",
    "modified",
    "available",
    "audit",
    "verification",
    "24x7",
    "means",
    "every",
    "detail",
    "recorded",
    "alterations",
    "detected",
    "verifying",
    "everyone",
    "personal",
    "version",
    "blockchain",
    "someone",
    "tried",
    "modify",
    "data",
    "block",
    "particular",
    "node",
    "ledgers",
    "information",
    "come",
    "know",
    "someone",
    "modified",
    "data",
    "one",
    "particular",
    "node",
    "try",
    "rectify",
    "fourth",
    "property",
    "central",
    "authority",
    "controlling",
    "working",
    "blockchain",
    "network",
    "decentralized",
    "network",
    "decentralized",
    "helps",
    "everyone",
    "copy",
    "blockchain",
    "means",
    "central",
    "point",
    "failure",
    "single",
    "source",
    "truth",
    "even",
    "things",
    "go",
    "wrong",
    "data",
    "recovered",
    "one",
    "node",
    "goes",
    "wrong",
    "data",
    "recovered",
    "nodes",
    "security",
    "privacy",
    "maintained",
    "everything",
    "public",
    "hashing",
    "encryptions",
    "comes",
    "picture",
    "takes",
    "care",
    "talk",
    "second",
    "feature",
    "hashing",
    "encryption",
    "understand",
    "hashing",
    "encryption",
    "need",
    "understand",
    "contents",
    "contents",
    "block",
    "block",
    "blockchain",
    "like",
    "container",
    "holds",
    "aggregated",
    "transactions",
    "contains",
    "certain",
    "set",
    "transactions",
    "see",
    "things",
    "construct",
    "particular",
    "block",
    "block",
    "two",
    "parts",
    "header",
    "second",
    "part",
    "transaction",
    "details",
    "set",
    "transactions",
    "aggregated",
    "block",
    "header",
    "following",
    "set",
    "attributes",
    "block",
    "version",
    "number",
    "hash",
    "previous",
    "block",
    "linked",
    "current",
    "timestamp",
    "timestamp",
    "block",
    "verified",
    "nonce",
    "nonce",
    "see",
    "attribute",
    "meaning",
    "nonce",
    "target",
    "value",
    "transaction",
    "details",
    "nothing",
    "example",
    "talked",
    "earlier",
    "transaction",
    "sender",
    "receiver",
    "sharing",
    "sender",
    "trying",
    "send",
    "certain",
    "amount",
    "bitcoin",
    "account",
    "receiver",
    "account",
    "represented",
    "form",
    "256",
    "bit",
    "hash",
    "value",
    "header",
    "called",
    "merkle",
    "root",
    "hash",
    "root",
    "basically",
    "merkle",
    "root",
    "hash",
    "transactions",
    "structured",
    "merkle",
    "tree",
    "called",
    "binary",
    "tree",
    "kind",
    "binary",
    "tree",
    "hash",
    "value",
    "root",
    "node",
    "merkle",
    "tree",
    "called",
    "merkle",
    "root",
    "hash",
    "transaction",
    "details",
    "block",
    "contained",
    "header",
    "hex",
    "value",
    "known",
    "merkle",
    "root",
    "merkle",
    "root",
    "calculated",
    "way",
    "basically",
    "list",
    "transaction",
    "transaction",
    "passed",
    "hashing",
    "algorithm",
    "hashes",
    "transactions",
    "paired",
    "passed",
    "another",
    "hashing",
    "algorithm",
    "one",
    "value",
    "remains",
    "root",
    "let",
    "tell",
    "hash",
    "function",
    "works",
    "blockchain",
    "utilizes",
    "hash",
    "function",
    "perform",
    "cryptography",
    "data",
    "data",
    "set",
    "random",
    "size",
    "sent",
    "input",
    "hashing",
    "function",
    "get",
    "encrypted",
    "value",
    "fixed",
    "size",
    "feature",
    "hashing",
    "function",
    "unique",
    "properties",
    "hashing",
    "function",
    "deterministic",
    "input",
    "always",
    "produce",
    "hash",
    "output",
    "small",
    "changes",
    "data",
    "drastically",
    "change",
    "output",
    "basically",
    "small",
    "change",
    "input",
    "produces",
    "output",
    "drastically",
    "different",
    "previous",
    "obtained",
    "outputs",
    "computed",
    "easily",
    "output",
    "values",
    "obtained",
    "without",
    "whole",
    "lot",
    "calculation",
    "hashing",
    "functions",
    "functions",
    "basically",
    "wo",
    "able",
    "determine",
    "input",
    "based",
    "output",
    "value",
    "ca",
    "reverse",
    "calculation",
    "let",
    "go",
    "back",
    "block",
    "talking",
    "earlier",
    "discussing",
    "features",
    "header",
    "previous",
    "hash",
    "resultant",
    "hash",
    "previous",
    "block",
    "blockchain",
    "way",
    "two",
    "blocks",
    "linked",
    "together",
    "transaction",
    "details",
    "used",
    "provide",
    "details",
    "sender",
    "receiver",
    "much",
    "money",
    "want",
    "exchange",
    "list",
    "transactions",
    "structured",
    "merkle",
    "tree",
    "hash",
    "merkle",
    "root",
    "put",
    "header",
    "nonce",
    "value",
    "varied",
    "create",
    "unique",
    "hash",
    "address",
    "block",
    "less",
    "target",
    "hash",
    "value",
    "structure",
    "header",
    "block",
    "version",
    "number",
    "basically",
    "sequence",
    "number",
    "block",
    "hash",
    "previous",
    "block",
    "timestamp",
    "block",
    "mined",
    "verified",
    "nonce",
    "value",
    "header",
    "entire",
    "header",
    "passed",
    "hashing",
    "algorithm",
    "case",
    "bitcoin",
    "network",
    "hash",
    "value",
    "generated",
    "hash",
    "value",
    "becomes",
    "hash",
    "value",
    "block",
    "value",
    "256",
    "bit",
    "value",
    "used",
    "uniquely",
    "identify",
    "particular",
    "block",
    "256",
    "ensures",
    "alterations",
    "data",
    "easily",
    "detected",
    "example",
    "consider",
    "two",
    "blocks",
    "blockchain",
    "similar",
    "structure",
    "definitely",
    "different",
    "hash",
    "values",
    "someone",
    "alters",
    "transaction",
    "details",
    "first",
    "block",
    "corresponding",
    "hash",
    "value",
    "block",
    "would",
    "change",
    "values",
    "hash",
    "value",
    "first",
    "block",
    "previous",
    "hash",
    "value",
    "block",
    "match",
    "basically",
    "block",
    "subsequent",
    "hacked",
    "block",
    "get",
    "dealing",
    "raise",
    "alarm",
    "among",
    "users",
    "informing",
    "data",
    "alteration",
    "taken",
    "place",
    "users",
    "able",
    "flag",
    "block",
    "alteration",
    "easily",
    "identified",
    "rectified",
    "immediately",
    "ensure",
    "security",
    "blockchains",
    "also",
    "include",
    "digital",
    "signatures",
    "ensure",
    "message",
    "come",
    "right",
    "identity",
    "right",
    "person",
    "message",
    "tampered",
    "users",
    "provided",
    "private",
    "public",
    "key",
    "whenever",
    "user",
    "onboard",
    "public",
    "blockchain",
    "provided",
    "pair",
    "public",
    "private",
    "key",
    "private",
    "key",
    "used",
    "user",
    "control",
    "account",
    "kept",
    "secret",
    "user",
    "basically",
    "like",
    "password",
    "public",
    "key",
    "public",
    "key",
    "used",
    "identify",
    "user",
    "network",
    "shared",
    "user",
    "along",
    "transaction",
    "network",
    "others",
    "verify",
    "steps",
    "involved",
    "creating",
    "authenticating",
    "digital",
    "signature",
    "center",
    "side",
    "message",
    "transmitted",
    "passed",
    "hashing",
    "algorithm",
    "case",
    "bitcoin",
    "hash",
    "generated",
    "plus",
    "private",
    "key",
    "used",
    "generate",
    "digital",
    "signature",
    "output",
    "passed",
    "signature",
    "algorithm",
    "along",
    "user",
    "private",
    "key",
    "create",
    "digital",
    "signature",
    "transmission",
    "user",
    "message",
    "digital",
    "fingerprint",
    "generated",
    "previous",
    "step",
    "plus",
    "public",
    "key",
    "transmitted",
    "across",
    "network",
    "three",
    "things",
    "published",
    "network",
    "validators",
    "miners",
    "use",
    "verify",
    "authenticity",
    "sender",
    "receiver",
    "end",
    "first",
    "message",
    "passed",
    "hashing",
    "algorithm",
    "time",
    "sender",
    "public",
    "key",
    "digital",
    "signature",
    "passed",
    "fictional",
    "algorithm",
    "functions",
    "generate",
    "hash",
    "hashes",
    "compared",
    "match",
    "transaction",
    "identity",
    "sender",
    "approved",
    "otherwise",
    "rejected",
    "basically",
    "process",
    "comparing",
    "hash",
    "values",
    "authenticate",
    "identity",
    "sender",
    "people",
    "verify",
    "transactions",
    "actually",
    "remember",
    "one",
    "field",
    "block",
    "header",
    "called",
    "norms",
    "becomes",
    "important",
    "order",
    "verify",
    "transaction",
    "talk",
    "third",
    "feature",
    "proof",
    "work",
    "consensus",
    "algorithm",
    "proof",
    "work",
    "involves",
    "people",
    "around",
    "world",
    "participants",
    "network",
    "called",
    "miners",
    "competing",
    "first",
    "one",
    "add",
    "block",
    "blockchain",
    "lieu",
    "rewarded",
    "competing",
    "miners",
    "around",
    "world",
    "trying",
    "solve",
    "mathematical",
    "puzzle",
    "first",
    "one",
    "rewarded",
    "add",
    "block",
    "blockchain",
    "reward",
    "thereby",
    "invest",
    "computing",
    "power",
    "invest",
    "resources",
    "order",
    "mine",
    "validate",
    "transaction",
    "get",
    "reward",
    "mathematical",
    "puzzle",
    "basically",
    "need",
    "find",
    "hash",
    "value",
    "satisfies",
    "certain",
    "predefined",
    "conditions",
    "order",
    "find",
    "hash",
    "value",
    "use",
    "norms",
    "target",
    "hash",
    "value",
    "decided",
    "months",
    "advance",
    "every",
    "block",
    "miners",
    "keep",
    "variating",
    "nonce",
    "value",
    "find",
    "output",
    "falls",
    "within",
    "target",
    "requirement",
    "keep",
    "generating",
    "hash",
    "value",
    "using",
    "norms",
    "less",
    "target",
    "hash",
    "value",
    "accepted",
    "greater",
    "hash",
    "value",
    "rejected",
    "minus",
    "effort",
    "considered",
    "valid",
    "minor",
    "transmits",
    "across",
    "world",
    "found",
    "nonce",
    "satisfies",
    "target",
    "requirement",
    "soon",
    "find",
    "thanks",
    "hashing",
    "algorithm",
    "used",
    "claim",
    "easily",
    "verified",
    "others",
    "basically",
    "proof",
    "work",
    "algorithm",
    "hard",
    "generate",
    "nonce",
    "get",
    "hash",
    "value",
    "easy",
    "verify",
    "transaction",
    "miners",
    "whole",
    "lot",
    "work",
    "miner",
    "payoff",
    "hard",
    "work",
    "get",
    "paid",
    "bitcoins",
    "way",
    "bitcoins",
    "get",
    "added",
    "network",
    "sometimes",
    "get",
    "forms",
    "remuneration",
    "well",
    "concept",
    "mining",
    "entire",
    "process",
    "miner",
    "done",
    "proof",
    "work",
    "consensus",
    "rewarded",
    "called",
    "mining",
    "mining",
    "process",
    "adding",
    "block",
    "blockchain",
    "miner",
    "first",
    "person",
    "found",
    "nonce",
    "value",
    "fell",
    "within",
    "target",
    "requirement",
    "right",
    "miner",
    "rewarded",
    "today",
    "bitcoin",
    "network",
    "miner",
    "paid",
    "bitcoins",
    "adding",
    "block",
    "onto",
    "blockchain",
    "reward",
    "miner",
    "gets",
    "reduced",
    "half",
    "every",
    "four",
    "years",
    "fourth",
    "year",
    "approach",
    "threshold",
    "bitcoin",
    "reward",
    "go",
    "bitcoins",
    "miners",
    "also",
    "get",
    "sum",
    "transaction",
    "fees",
    "particular",
    "block",
    "bitcoin",
    "reward",
    "justified",
    "mining",
    "expensive",
    "process",
    "heavy",
    "toll",
    "electricity",
    "computing",
    "power",
    "resources",
    "miner",
    "invested",
    "take",
    "look",
    "use",
    "cases",
    "blockchain",
    "applicable",
    "banks",
    "incorporating",
    "program",
    "banks",
    "validate",
    "user",
    "identity",
    "user",
    "needs",
    "process",
    "bank",
    "go",
    "prove",
    "identity",
    "bank",
    "way",
    "ease",
    "process",
    "blockchain",
    "answer",
    "yes",
    "using",
    "truffle",
    "ethereum",
    "ganache",
    "smart",
    "contracts",
    "blockchain",
    "technology",
    "ecosystem",
    "make",
    "work",
    "welcome",
    "demo",
    "build",
    "kyc",
    "blockchain",
    "application",
    "gon",
    "na",
    "show",
    "steps",
    "required",
    "deploy",
    "kyc",
    "application",
    "components",
    "developed",
    "go",
    "deploying",
    "testing",
    "application",
    "primarily",
    "kyc",
    "application",
    "allow",
    "banks",
    "us",
    "decentralized",
    "kyc",
    "customers",
    "come",
    "banks",
    "demo",
    "see",
    "customer",
    "walks",
    "initiating",
    "bank",
    "kyc",
    "customer",
    "enter",
    "details",
    "verify",
    "subsequent",
    "bank",
    "wants",
    "use",
    "kyc",
    "done",
    "another",
    "bank",
    "needs",
    "take",
    "permission",
    "customer",
    "use",
    "kyc",
    "verification",
    "see",
    "start",
    "developed",
    "kyc",
    "solidity",
    "contract",
    "necessary",
    "functions",
    "order",
    "actions",
    "required",
    "kyc",
    "particular",
    "entity",
    "bank",
    "contract",
    "ready",
    "placing",
    "sample",
    "truffle",
    "package",
    "truffle",
    "package",
    "contracts",
    "folder",
    "contracts",
    "folder",
    "kept",
    "kyc",
    "dot",
    "solve",
    "file",
    "command",
    "prompt",
    "compile",
    "contracts",
    "ignore",
    "warnings",
    "ganache",
    "client",
    "started",
    "ganache",
    "client",
    "see",
    "running",
    "port",
    "8545",
    "already",
    "given",
    "10",
    "accounts",
    "100",
    "ether",
    "already",
    "mentioned",
    "truffle",
    "connected",
    "localhost",
    "truffle",
    "migrate",
    "command",
    "connect",
    "ganache",
    "deploy",
    "kyc",
    "contract",
    "go",
    "full",
    "control",
    "important",
    "see",
    "particular",
    "address",
    "solidity",
    "contract",
    "deployed",
    "copy",
    "ui",
    "code",
    "root",
    "make",
    "change",
    "address",
    "contract",
    "deployed",
    "steps",
    "application",
    "ready",
    "interact",
    "solidity",
    "contract",
    "deployed",
    "local",
    "blockchain",
    "network",
    "see",
    "deployed",
    "contract",
    "primary",
    "account",
    "ethers",
    "deducted",
    "order",
    "deploy",
    "contract",
    "certain",
    "steps",
    "order",
    "get",
    "application",
    "running",
    "first",
    "need",
    "sign",
    "banks",
    "suppose",
    "say",
    "bank",
    "one",
    "password",
    "first",
    "address",
    "bank",
    "basically",
    "associating",
    "one",
    "bank",
    "one",
    "account",
    "ethereum",
    "network",
    "sign",
    "bank",
    "one",
    "successfully",
    "registered",
    "order",
    "login",
    "check",
    "bank",
    "one",
    "logged",
    "need",
    "add",
    "kyc",
    "particular",
    "customer",
    "filling",
    "basic",
    "details",
    "create",
    "customer",
    "username",
    "kept",
    "customer1",
    "ideally",
    "unique",
    "identity",
    "customer",
    "social",
    "security",
    "number",
    "number",
    "unique",
    "identity",
    "attached",
    "customer",
    "email",
    "id",
    "used",
    "unique",
    "identifier",
    "customer",
    "customer",
    "profile",
    "successfully",
    "created",
    "need",
    "login",
    "customer",
    "allow",
    "bank",
    "see",
    "kyc",
    "details",
    "suppose",
    "say",
    "customer",
    "one",
    "search",
    "saying",
    "access",
    "denied",
    "take",
    "permission",
    "customer",
    "proceed",
    "bank",
    "kyc",
    "complete",
    "customer",
    "need",
    "approve",
    "creating",
    "credentials",
    "customer",
    "customer",
    "see",
    "details",
    "whatever",
    "filled",
    "bank",
    "one",
    "see",
    "request",
    "bank",
    "one",
    "allow",
    "view",
    "kyc",
    "allow",
    "also",
    "create",
    "another",
    "bank",
    "bank",
    "2",
    "associate",
    "another",
    "address",
    "try",
    "log",
    "bank",
    "2",
    "also",
    "logged",
    "bank",
    "2",
    "done",
    "original",
    "kyc",
    "right",
    "trying",
    "look",
    "access",
    "also",
    "denied",
    "needs",
    "explicitly",
    "take",
    "permission",
    "bank",
    "take",
    "explicit",
    "requests",
    "customer",
    "customer",
    "requests",
    "bank",
    "one",
    "bank",
    "two",
    "kyc",
    "customer",
    "whether",
    "wants",
    "allow",
    "deny",
    "kyc",
    "request",
    "permission",
    "granted",
    "banks",
    "able",
    "view",
    "kyc",
    "say",
    "bank",
    "one",
    "allow",
    "bank",
    "deny",
    "requests",
    "done",
    "queue",
    "bank",
    "one",
    "allowed",
    "bank",
    "two",
    "denied",
    "log",
    "bank",
    "one",
    "password",
    "first",
    "address",
    "view",
    "kyc",
    "customer",
    "one",
    "bank",
    "one",
    "able",
    "see",
    "details",
    "log",
    "bank",
    "two",
    "give",
    "password",
    "try",
    "see",
    "saying",
    "permission",
    "denied",
    "let",
    "ask",
    "bank",
    "2",
    "request",
    "bank",
    "2",
    "requesting",
    "time",
    "allows",
    "bank",
    "2",
    "see",
    "details",
    "transactions",
    "back",
    "end",
    "happening",
    "blockchain",
    "network",
    "interfacing",
    "contract",
    "subsequent",
    "methods",
    "primary",
    "details",
    "contract",
    "provide",
    "address",
    "contract",
    "deployed",
    "abi",
    "file",
    "api",
    "get",
    "api",
    "avi",
    "paste",
    "binary",
    "data",
    "pasted",
    "binary",
    "data",
    "fetched",
    "remix",
    "binary",
    "data",
    "contract",
    "copied",
    "pasted",
    "essential",
    "inputs",
    "provided",
    "application",
    "allows",
    "us",
    "interact",
    "decentralized",
    "fashion",
    "access",
    "kyc",
    "records",
    "particular",
    "customer",
    "modify",
    "details",
    "also",
    "add",
    "new",
    "customer",
    "basic",
    "demo",
    "typical",
    "kyc",
    "application",
    "works",
    "banking",
    "environment",
    "blockchain",
    "tutorial",
    "part",
    "two",
    "let",
    "get",
    "started",
    "today",
    "let",
    "see",
    "store",
    "us",
    "hey",
    "thanks",
    "coming",
    "back",
    "explain",
    "blockchain",
    "work",
    "last",
    "session",
    "let",
    "quick",
    "recap",
    "learned",
    "let",
    "look",
    "memory",
    "lane",
    "discover",
    "learned",
    "learned",
    "blockchain",
    "blockchain",
    "list",
    "records",
    "stores",
    "data",
    "publicly",
    "chronological",
    "order",
    "applies",
    "security",
    "using",
    "cryptography",
    "controlled",
    "centralized",
    "authority",
    "information",
    "blockchain",
    "network",
    "accessible",
    "anyone",
    "network",
    "distributed",
    "ledger",
    "shared",
    "ledger",
    "everyone",
    "copy",
    "data",
    "primary",
    "attributes",
    "blockchain",
    "also",
    "learned",
    "bitcoin",
    "works",
    "quick",
    "recap",
    "introduced",
    "2009",
    "someone",
    "group",
    "pseudonymous",
    "people",
    "known",
    "satoshi",
    "nakamoto",
    "aimed",
    "solve",
    "problems",
    "faced",
    "fiat",
    "currencies",
    "help",
    "blockchain",
    "technology",
    "objective",
    "introduce",
    "new",
    "asset",
    "class",
    "cryptocurrencies",
    "used",
    "transactions",
    "2018",
    "1600",
    "cryptocurrencies",
    "follow",
    "concept",
    "bitcoin",
    "blockchain",
    "popular",
    "lives",
    "let",
    "talk",
    "features",
    "blockchain",
    "public",
    "distributed",
    "ledger",
    "uses",
    "hashing",
    "encryption",
    "encrypt",
    "information",
    "blockchain",
    "uses",
    "proof",
    "work",
    "consensus",
    "algorithm",
    "consensus",
    "mechanism",
    "works",
    "concept",
    "mining",
    "order",
    "reward",
    "miners",
    "keeping",
    "maintaining",
    "sanity",
    "network",
    "finally",
    "implement",
    "blockchain",
    "banking",
    "system",
    "talked",
    "implement",
    "kyc",
    "based",
    "blockchain",
    "decentralized",
    "app",
    "allows",
    "create",
    "decentralized",
    "banking",
    "system",
    "kyc",
    "done",
    "one",
    "bank",
    "leveraged",
    "another",
    "bank",
    "customer",
    "go",
    "multiple",
    "kyc",
    "iterations",
    "every",
    "bank",
    "wants",
    "transact",
    "get",
    "little",
    "deeper",
    "blockchain",
    "today",
    "talk",
    "topics",
    "talk",
    "candidate",
    "block",
    "talk",
    "byzantine",
    "fault",
    "tolerance",
    "one",
    "earlier",
    "consensus",
    "mechanisms",
    "talk",
    "problem",
    "add",
    "two",
    "blocks",
    "time",
    "blockchain",
    "handles",
    "talk",
    "concept",
    "forking",
    "soft",
    "folks",
    "hard",
    "folks",
    "areas",
    "blockchain",
    "getting",
    "used",
    "future",
    "blockchain",
    "upcoming",
    "blockchain",
    "jobs",
    "profiles",
    "upcoming",
    "market",
    "end",
    "quick",
    "demo",
    "create",
    "smart",
    "contract",
    "deploy",
    "particular",
    "use",
    "case",
    "block",
    "mined",
    "miner",
    "make",
    "important",
    "decision",
    "transactions",
    "would",
    "added",
    "block",
    "transactions",
    "added",
    "blockchain",
    "collected",
    "temporary",
    "container",
    "called",
    "memory",
    "pool",
    "miners",
    "select",
    "transactions",
    "school",
    "put",
    "temporary",
    "block",
    "called",
    "candidate",
    "block",
    "basically",
    "candidate",
    "block",
    "temporary",
    "block",
    "miner",
    "hopes",
    "add",
    "blockchain",
    "candidate",
    "added",
    "blockchain",
    "candidate",
    "block",
    "holds",
    "transactions",
    "miner",
    "selects",
    "memory",
    "pool",
    "miner",
    "tries",
    "first",
    "person",
    "find",
    "nonce",
    "value",
    "satisfy",
    "hash",
    "requirements",
    "question",
    "comes",
    "someone",
    "blockchain",
    "wanted",
    "input",
    "wrong",
    "data",
    "spreading",
    "wrong",
    "information",
    "around",
    "would",
    "able",
    "get",
    "away",
    "something",
    "known",
    "byzantine",
    "fault",
    "tolerance",
    "order",
    "maintain",
    "sanity",
    "network",
    "correct",
    "consensus",
    "something",
    "called",
    "byzantine",
    "fault",
    "tolerance",
    "consensus",
    "algorithm",
    "understand",
    "need",
    "know",
    "byzantine",
    "general",
    "problem",
    "let",
    "imagine",
    "byzantine",
    "general",
    "three",
    "lieutenants",
    "need",
    "take",
    "town",
    "however",
    "different",
    "places",
    "ca",
    "directly",
    "communicate",
    "general",
    "three",
    "lieutenants",
    "general",
    "ensure",
    "lieutenants",
    "follow",
    "order",
    "gives",
    "attack",
    "retreat",
    "ensured",
    "even",
    "one",
    "lieutenants",
    "traitor",
    "byzantine",
    "general",
    "problem",
    "general",
    "communicates",
    "correct",
    "decision",
    "taken",
    "lieutenants",
    "network",
    "irrespective",
    "someone",
    "traitor",
    "case",
    "traitor",
    "could",
    "ruin",
    "unity",
    "group",
    "sending",
    "different",
    "messages",
    "different",
    "lieutenants",
    "see",
    "general",
    "giving",
    "definitions",
    "command",
    "attack",
    "traitor",
    "could",
    "ruin",
    "sending",
    "every",
    "left",
    "hand",
    "command",
    "retreat",
    "opposite",
    "suspicion",
    "traitor",
    "would",
    "make",
    "others",
    "believe",
    "general",
    "asks",
    "retreat",
    "see",
    "lieutenant",
    "brown",
    "traitor",
    "could",
    "communicate",
    "lieutenants",
    "wrong",
    "information",
    "make",
    "act",
    "behalf",
    "traitor",
    "would",
    "cause",
    "lieutenants",
    "retreat",
    "general",
    "attack",
    "fail",
    "tackle",
    "way",
    "attack",
    "retreat",
    "successful",
    "majority",
    "supporting",
    "particular",
    "action",
    "achieve",
    "lieutenants",
    "keep",
    "tally",
    "orders",
    "receive",
    "scenario",
    "general",
    "sends",
    "attack",
    "order",
    "lieutenants",
    "lieutenants",
    "turn",
    "collect",
    "order",
    "receive",
    "pass",
    "left",
    "end",
    "near",
    "pass",
    "order",
    "nearest",
    "left",
    "traitor",
    "also",
    "sends",
    "retreat",
    "order",
    "left",
    "lanes",
    "however",
    "successful",
    "lieutenant",
    "majority",
    "attack",
    "minority",
    "retreat",
    "shows",
    "majority",
    "lieutenants",
    "would",
    "follow",
    "general",
    "command",
    "attack",
    "successful",
    "scenario",
    "mentioned",
    "byzantine",
    "fault",
    "tolerance",
    "situation",
    "encountered",
    "blockchain",
    "well",
    "traitor",
    "would",
    "add",
    "invalid",
    "transactions",
    "blockchain",
    "trader",
    "would",
    "send",
    "inconsistent",
    "information",
    "nodes",
    "blockchain",
    "would",
    "affect",
    "reliability",
    "blockchain",
    "network",
    "blockchain",
    "able",
    "achieve",
    "byzantine",
    "fault",
    "tolerance",
    "help",
    "proof",
    "work",
    "let",
    "see",
    "effective",
    "effective",
    "process",
    "adding",
    "block",
    "blockchain",
    "work",
    "intensive",
    "process",
    "involves",
    "hashing",
    "algorithm",
    "process",
    "hard",
    "computative",
    "heavily",
    "reliant",
    "value",
    "obtained",
    "existing",
    "blockchain",
    "meaningful",
    "impact",
    "hacker",
    "would",
    "take",
    "lot",
    "time",
    "resources",
    "producing",
    "sufficient",
    "proof",
    "work",
    "interesting",
    "imagine",
    "miners",
    "add",
    "block",
    "blockchain",
    "time",
    "handle",
    "situation",
    "although",
    "happen",
    "often",
    "way",
    "decide",
    "whose",
    "block",
    "added",
    "blockchain",
    "ideal",
    "scenario",
    "need",
    "first",
    "one",
    "find",
    "hash",
    "value",
    "need",
    "first",
    "miner",
    "generate",
    "hash",
    "value",
    "win",
    "block",
    "adding",
    "two",
    "blocks",
    "time",
    "hash",
    "value",
    "block",
    "needs",
    "within",
    "predetermined",
    "limit",
    "generated",
    "hash",
    "value",
    "less",
    "target",
    "value",
    "accepted",
    "block",
    "added",
    "blockchain",
    "greater",
    "target",
    "value",
    "denied",
    "block",
    "added",
    "blockchain",
    "case",
    "two",
    "people",
    "obtained",
    "satisfactory",
    "hash",
    "value",
    "time",
    "minor",
    "one",
    "minor",
    "two",
    "able",
    "find",
    "hash",
    "less",
    "target",
    "happen",
    "whether",
    "minus",
    "one",
    "block",
    "get",
    "added",
    "blockchain",
    "minus",
    "two",
    "block",
    "get",
    "added",
    "blockchain",
    "fifty",
    "percent",
    "network",
    "accepted",
    "minus",
    "one",
    "block",
    "suppose",
    "rest",
    "accepted",
    "minus",
    "two",
    "blocks",
    "half",
    "network",
    "continues",
    "work",
    "considering",
    "minus",
    "one",
    "block",
    "right",
    "block",
    "half",
    "network",
    "continues",
    "work",
    "considering",
    "minus",
    "two",
    "block",
    "right",
    "block",
    "however",
    "one",
    "minus",
    "blockchain",
    "allowed",
    "remain",
    "two",
    "blockchains",
    "running",
    "defeat",
    "purpose",
    "achieved",
    "selecting",
    "sub",
    "chain",
    "miners",
    "first",
    "added",
    "block",
    "suppose",
    "miner",
    "3",
    "adds",
    "new",
    "block",
    "miners",
    "1",
    "blockchain",
    "block",
    "added",
    "miner",
    "3",
    "verified",
    "everyone",
    "network",
    "accepted",
    "dominant",
    "blockchain",
    "used",
    "everyone",
    "else",
    "network",
    "version",
    "blockchain",
    "miner",
    "2",
    "completely",
    "discarded",
    "entire",
    "network",
    "accepts",
    "miner",
    "one",
    "blockchain",
    "single",
    "blockchain",
    "existing",
    "efficient",
    "also",
    "called",
    "accidental",
    "fork",
    "heard",
    "version",
    "bitcoin",
    "called",
    "bitcoin",
    "cash",
    "difference",
    "kinds",
    "like",
    "bitcoin",
    "gold",
    "bitcoin",
    "private",
    "outcomes",
    "fork",
    "fork",
    "fork",
    "said",
    "taken",
    "place",
    "blockchain",
    "diverges",
    "two",
    "potential",
    "parts",
    "fork",
    "happens",
    "users",
    "network",
    "come",
    "agreement",
    "regards",
    "network",
    "transaction",
    "details",
    "new",
    "rules",
    "validate",
    "transactions",
    "two",
    "types",
    "forks",
    "exist",
    "either",
    "soft",
    "work",
    "hard",
    "fork",
    "soft",
    "fork",
    "occurs",
    "change",
    "soft",
    "protocol",
    "makes",
    "new",
    "blocks",
    "added",
    "blockchain",
    "following",
    "new",
    "rules",
    "backward",
    "compatible",
    "order",
    "software",
    "requires",
    "majority",
    "users",
    "commit",
    "change",
    "successful",
    "soft",
    "fork",
    "could",
    "multiple",
    "uses",
    "could",
    "tighter",
    "rules",
    "could",
    "cosmetic",
    "changes",
    "addition",
    "new",
    "functions",
    "affecting",
    "structure",
    "consider",
    "scenario",
    "accepted",
    "block",
    "size",
    "reduced",
    "1",
    "mb",
    "100",
    "kb",
    "first",
    "approved",
    "majority",
    "network",
    "old",
    "version",
    "running",
    "1",
    "mb",
    "block",
    "size",
    "approved",
    "new",
    "version",
    "start",
    "working",
    "block",
    "size",
    "100",
    "kb",
    "anything",
    "less",
    "100",
    "kb",
    "approved",
    "added",
    "new",
    "block",
    "time",
    "people",
    "following",
    "older",
    "version",
    "blockchain",
    "would",
    "forced",
    "move",
    "new",
    "one",
    "since",
    "none",
    "transactions",
    "would",
    "go",
    "basically",
    "people",
    "using",
    "old",
    "blockchain",
    "using",
    "1mb",
    "block",
    "size",
    "transactions",
    "succeed",
    "forced",
    "use",
    "100kb",
    "block",
    "let",
    "talk",
    "hard",
    "fork",
    "hard",
    "fork",
    "involves",
    "change",
    "software",
    "protocol",
    "radical",
    "forces",
    "new",
    "blockchain",
    "created",
    "altogether",
    "basically",
    "hard",
    "fork",
    "two",
    "versions",
    "one",
    "blockchain",
    "upgraded",
    "blockchain",
    "upgraded",
    "according",
    "new",
    "software",
    "protocols",
    "blockchains",
    "considered",
    "valid",
    "legitimate",
    "new",
    "path",
    "would",
    "follow",
    "new",
    "updated",
    "rules",
    "one",
    "keeps",
    "following",
    "old",
    "path",
    "old",
    "one",
    "discarded",
    "remain",
    "existence",
    "bitcoin",
    "performed",
    "hard",
    "fork",
    "first",
    "august",
    "2017",
    "created",
    "bitcoin",
    "cash",
    "thereby",
    "bitcoin",
    "bitcoin",
    "cash",
    "remain",
    "existent",
    "bitcoin",
    "cash",
    "different",
    "regular",
    "bitcoin",
    "increased",
    "block",
    "size",
    "1",
    "mb",
    "8",
    "mb",
    "thereby",
    "helped",
    "reducing",
    "transaction",
    "cost",
    "significantly",
    "lesser",
    "original",
    "bitcoin",
    "network",
    "bitcoin",
    "else",
    "blockchain",
    "used",
    "areas",
    "preventing",
    "voter",
    "fraud",
    "blockchain",
    "helps",
    "ensuring",
    "one",
    "vote",
    "per",
    "person",
    "ensuring",
    "data",
    "tampered",
    "false",
    "alterations",
    "done",
    "helps",
    "creating",
    "immutable",
    "ledger",
    "record",
    "votes",
    "tallied",
    "transaction",
    "vote",
    "recorded",
    "modified",
    "also",
    "used",
    "quality",
    "assurance",
    "ensuring",
    "products",
    "highest",
    "quality",
    "able",
    "identify",
    "problem",
    "areas",
    "easily",
    "think",
    "blockchain",
    "going",
    "used",
    "future",
    "blockchain",
    "seeing",
    "wide",
    "range",
    "adoption",
    "amongst",
    "organizations",
    "one",
    "percent",
    "organizations",
    "begun",
    "using",
    "blockchain",
    "technologies",
    "percentage",
    "expected",
    "increase",
    "next",
    "five",
    "years",
    "need",
    "blockchain",
    "regulations",
    "rules",
    "regulations",
    "surrounding",
    "blockchain",
    "clear",
    "organizations",
    "comfortable",
    "using",
    "move",
    "towards",
    "faster",
    "adoption",
    "also",
    "need",
    "removing",
    "negative",
    "speculations",
    "surrounding",
    "blockchain",
    "several",
    "industries",
    "fear",
    "blockchain",
    "disrupt",
    "normal",
    "functioning",
    "believe",
    "adoption",
    "blockchain",
    "system",
    "worth",
    "effort",
    "increase",
    "job",
    "opportunities",
    "skilled",
    "personnel",
    "technology",
    "maturing",
    "would",
    "huge",
    "requirement",
    "individuals",
    "understand",
    "implement",
    "concepts",
    "blockchain",
    "options",
    "people",
    "jobs",
    "involving",
    "blockchain",
    "moment",
    "many",
    "job",
    "opportunities",
    "two",
    "famous",
    "ones",
    "blockchain",
    "architect",
    "blockchain",
    "developer",
    "blockchain",
    "developer",
    "profile",
    "requires",
    "designing",
    "implementing",
    "supporting",
    "distributed",
    "blockchain",
    "network",
    "analyze",
    "user",
    "requirements",
    "design",
    "technology",
    "around",
    "certain",
    "business",
    "model",
    "build",
    "launch",
    "blockchain",
    "network",
    "blockchain",
    "architect",
    "profile",
    "requires",
    "design",
    "architect",
    "blockchain",
    "industry",
    "solutions",
    "creates",
    "blockchain",
    "networks",
    "leveraging",
    "blockchain",
    "technology",
    "platforms",
    "produce",
    "high",
    "quality",
    "code",
    "based",
    "project",
    "requirements",
    "conceptualize",
    "design",
    "build",
    "blockchain",
    "frameworks",
    "assets",
    "let",
    "quick",
    "demo",
    "deploy",
    "rating",
    "smart",
    "contract",
    "decentralized",
    "application",
    "running",
    "local",
    "blockchain",
    "network",
    "using",
    "truffle",
    "solidity",
    "build",
    "application",
    "order",
    "build",
    "application",
    "installed",
    "truffle",
    "ganache",
    "local",
    "system",
    "ganache",
    "client",
    "running",
    "local",
    "host",
    "running",
    "port",
    "8545",
    "network",
    "id",
    "5778",
    "whenever",
    "run",
    "ganache",
    "client",
    "preceded",
    "10",
    "accounts",
    "100",
    "ether",
    "balance",
    "movie",
    "rating",
    "app",
    "app",
    "going",
    "deploy",
    "smart",
    "contract",
    "called",
    "gon",
    "na",
    "capture",
    "ratings",
    "certain",
    "set",
    "movies",
    "predefine",
    "users",
    "able",
    "set",
    "ratings",
    "blockchain",
    "network",
    "decentralized",
    "fashion",
    "able",
    "see",
    "every",
    "transaction",
    "block",
    "getting",
    "generated",
    "ganache",
    "client",
    "movie",
    "rating",
    "app",
    "rating",
    "folder",
    "run",
    "command",
    "trough",
    "compile",
    "compile",
    "smart",
    "contract",
    "rating",
    "dot",
    "soul",
    "next",
    "command",
    "run",
    "trough",
    "migrate",
    "instance",
    "trough",
    "migrate",
    "command",
    "deploy",
    "smart",
    "contract",
    "ganache",
    "client",
    "see",
    "four",
    "blocks",
    "created",
    "contract",
    "created",
    "transaction",
    "address",
    "contract",
    "contract",
    "deployed",
    "go",
    "back",
    "command",
    "prompt",
    "say",
    "trust",
    "console",
    "check",
    "address",
    "contract",
    "0x695",
    "address",
    "deployed",
    "smart",
    "contract",
    "given",
    "entry",
    "deployment",
    "file",
    "called",
    "deploy",
    "rating",
    "migrations",
    "given",
    "entry",
    "given",
    "path",
    "rating",
    "solidity",
    "file",
    "initialized",
    "smart",
    "contract",
    "three",
    "movies",
    "star",
    "wars",
    "avatar",
    "inception",
    "given",
    "predefined",
    "gas",
    "steps",
    "done",
    "know",
    "address",
    "contract",
    "deployed",
    "copy",
    "paste",
    "file",
    "ethereum",
    "lying",
    "rating",
    "app",
    "ui",
    "source",
    "folder",
    "change",
    "address",
    "rating",
    "address",
    "changed",
    "go",
    "back",
    "movie",
    "rating",
    "app",
    "folder",
    "app",
    "ui",
    "give",
    "command",
    "npm",
    "start",
    "application",
    "running",
    "localhost",
    "3000",
    "see",
    "able",
    "voting",
    "rating",
    "level",
    "block",
    "gon",
    "na",
    "increase",
    "block",
    "six",
    "inception",
    "block",
    "seven",
    "rating",
    "increasing",
    "block",
    "getting",
    "added",
    "demonstrates",
    "usage",
    "truffle",
    "ganache",
    "order",
    "build",
    "decentralized",
    "app",
    "wow",
    "blockchain",
    "amazing",
    "thanks",
    "explaining",
    "things",
    "glad",
    "could",
    "help",
    "thanks",
    "saurabh",
    "rahul",
    "help",
    "guys",
    "understand",
    "cryptocurrencies",
    "rahul",
    "simply",
    "learn",
    "cryptocurrency",
    "explained",
    "since",
    "man",
    "evolved",
    "currency",
    "important",
    "part",
    "lives",
    "caveman",
    "era",
    "use",
    "barter",
    "system",
    "barter",
    "system",
    "involves",
    "goods",
    "services",
    "exchanged",
    "among",
    "situation",
    "caveman",
    "exchanging",
    "seven",
    "apples",
    "getting",
    "oranges",
    "return",
    "barter",
    "system",
    "fell",
    "use",
    "glaring",
    "flaws",
    "flaws",
    "include",
    "people",
    "requirements",
    "coincide",
    "example",
    "say",
    "five",
    "apples",
    "friend",
    "five",
    "oranges",
    "want",
    "oranges",
    "unless",
    "friend",
    "requirement",
    "apples",
    "ready",
    "make",
    "exchange",
    "common",
    "measure",
    "value",
    "since",
    "common",
    "measure",
    "terms",
    "value",
    "commodity",
    "expressed",
    "problem",
    "decide",
    "many",
    "apples",
    "ready",
    "trade",
    "one",
    "orange",
    "mango",
    "goods",
    "divided",
    "subdivided",
    "example",
    "ca",
    "divide",
    "live",
    "animal",
    "different",
    "smaller",
    "units",
    "goods",
    "transported",
    "easily",
    "unlike",
    "modern",
    "currency",
    "fits",
    "wallet",
    "mobile",
    "phone",
    "goods",
    "taken",
    "everywhere",
    "go",
    "realizing",
    "barter",
    "system",
    "work",
    "well",
    "currency",
    "went",
    "iterations",
    "110",
    "bc",
    "official",
    "currency",
    "minted",
    "thousand",
    "250",
    "gold",
    "plated",
    "florence",
    "introduced",
    "used",
    "across",
    "europe",
    "1680",
    "1980",
    "paper",
    "currency",
    "gained",
    "widespread",
    "popularity",
    "used",
    "across",
    "world",
    "modern",
    "currency",
    "know",
    "came",
    "existence",
    "modern",
    "currency",
    "included",
    "paper",
    "currency",
    "coins",
    "credit",
    "cards",
    "digital",
    "wallets",
    "example",
    "apple",
    "pay",
    "amazon",
    "pay",
    "paytm",
    "paypal",
    "controlled",
    "banks",
    "governments",
    "means",
    "centralized",
    "regulatory",
    "authority",
    "limited",
    "paper",
    "currency",
    "credit",
    "cards",
    "worked",
    "imagine",
    "scenario",
    "online",
    "transaction",
    "thanking",
    "friend",
    "paying",
    "lunch",
    "saying",
    "sending",
    "money",
    "account",
    "transaction",
    "takes",
    "place",
    "successfully",
    "several",
    "ways",
    "could",
    "gone",
    "wrong",
    "could",
    "technical",
    "issue",
    "bank",
    "example",
    "systems",
    "could",
    "machines",
    "working",
    "properly",
    "means",
    "central",
    "point",
    "failure",
    "bank",
    "users",
    "accounts",
    "could",
    "gotten",
    "hacked",
    "example",
    "could",
    "ddos",
    "attack",
    "identity",
    "theft",
    "transfer",
    "limits",
    "account",
    "exceeded",
    "future",
    "currency",
    "lies",
    "cryptocurrency",
    "imagine",
    "transaction",
    "two",
    "people",
    "future",
    "one",
    "bitcoin",
    "app",
    "notification",
    "asking",
    "whether",
    "sure",
    "ready",
    "transfer",
    "five",
    "bitcoins",
    "yes",
    "processing",
    "takes",
    "place",
    "authenticating",
    "user",
    "identity",
    "checking",
    "whether",
    "required",
    "balance",
    "make",
    "transaction",
    "things",
    "done",
    "payment",
    "transferred",
    "payment",
    "received",
    "happens",
    "matter",
    "minutes",
    "simple",
    "turn",
    "removes",
    "problems",
    "modern",
    "banking",
    "limits",
    "funds",
    "transfer",
    "accounts",
    "hacked",
    "central",
    "point",
    "failure",
    "2018",
    "1600",
    "cryptocurrencies",
    "available",
    "popular",
    "ones",
    "like",
    "bitcoin",
    "litecoin",
    "ethereum",
    "zcash",
    "new",
    "cryptocurrency",
    "crops",
    "every",
    "single",
    "day",
    "considering",
    "much",
    "growth",
    "moment",
    "good",
    "chance",
    "plenty",
    "come",
    "upcoming",
    "years",
    "exactly",
    "cryptocurrency",
    "cryptocurrency",
    "digital",
    "virtual",
    "currency",
    "meant",
    "medium",
    "exchange",
    "cryptocurrency",
    "quite",
    "similar",
    "real",
    "world",
    "currency",
    "physical",
    "embodiment",
    "also",
    "uses",
    "cryptography",
    "work",
    "way",
    "features",
    "cryptocurrency",
    "limit",
    "many",
    "units",
    "exist",
    "bitcoin",
    "limit",
    "exists",
    "21",
    "million",
    "bitcoins",
    "produced",
    "easily",
    "verify",
    "transfer",
    "funds",
    "hashing",
    "algorithms",
    "bitcoin",
    "uses",
    "makes",
    "easy",
    "users",
    "determine",
    "whether",
    "transaction",
    "valid",
    "operate",
    "independent",
    "bank",
    "central",
    "authority",
    "work",
    "decentralized",
    "manner",
    "new",
    "units",
    "added",
    "certain",
    "conditions",
    "met",
    "example",
    "bitcoin",
    "block",
    "added",
    "blockchain",
    "miner",
    "rewarded",
    "bitcoins",
    "way",
    "new",
    "bitcoins",
    "generated",
    "makes",
    "cryptocurrency",
    "special",
    "firstly",
    "little",
    "transaction",
    "costs",
    "use",
    "digital",
    "wallet",
    "know",
    "transferring",
    "money",
    "wallet",
    "bank",
    "account",
    "lose",
    "amount",
    "money",
    "24",
    "7",
    "access",
    "money",
    "ca",
    "walk",
    "bank",
    "3am",
    "morning",
    "say",
    "want",
    "withdraw",
    "money",
    "limits",
    "purchases",
    "withdrawals",
    "freedom",
    "anyone",
    "use",
    "example",
    "setting",
    "account",
    "bank",
    "need",
    "amount",
    "paperwork",
    "documentation",
    "cryptocurrencies",
    "avoided",
    "international",
    "transactions",
    "faster",
    "wire",
    "transfers",
    "take",
    "half",
    "day",
    "transfer",
    "money",
    "one",
    "place",
    "another",
    "cryptocurrencies",
    "takes",
    "matter",
    "minutes",
    "seconds",
    "crypto",
    "cryptocurrencies",
    "crypto",
    "refers",
    "cryptography",
    "method",
    "using",
    "encryption",
    "decryption",
    "secure",
    "communication",
    "presence",
    "third",
    "parties",
    "ill",
    "intent",
    "refers",
    "third",
    "parties",
    "want",
    "steal",
    "data",
    "want",
    "eavesdrop",
    "conversation",
    "cryptography",
    "uses",
    "computational",
    "algorithms",
    "like",
    "ssj256",
    "hashing",
    "algorithm",
    "bitcoin",
    "uses",
    "public",
    "key",
    "like",
    "digital",
    "identity",
    "user",
    "shares",
    "everyone",
    "private",
    "key",
    "digital",
    "signature",
    "user",
    "keeps",
    "hidden",
    "let",
    "talk",
    "normal",
    "bitcoin",
    "transaction",
    "first",
    "transaction",
    "details",
    "details",
    "want",
    "send",
    "much",
    "bitcoins",
    "want",
    "send",
    "passed",
    "hashing",
    "algorithm",
    "bitcoin",
    "use",
    "ssj256",
    "algorithm",
    "output",
    "obtain",
    "passed",
    "signature",
    "algorithm",
    "user",
    "private",
    "key",
    "used",
    "uniquely",
    "identify",
    "user",
    "output",
    "distributed",
    "across",
    "network",
    "people",
    "verify",
    "done",
    "using",
    "sender",
    "public",
    "key",
    "people",
    "verify",
    "transaction",
    "check",
    "whether",
    "valid",
    "known",
    "miners",
    "done",
    "transaction",
    "several",
    "others",
    "added",
    "blockchain",
    "changed",
    "concepts",
    "hashing",
    "seem",
    "little",
    "difficult",
    "would",
    "suggest",
    "click",
    "top",
    "right",
    "corner",
    "watch",
    "blockchain",
    "explain",
    "video",
    "understand",
    "better",
    "algorithm",
    "like",
    "told",
    "earlier",
    "looks",
    "something",
    "like",
    "seeing",
    "complicated",
    "looks",
    "sure",
    "safe",
    "say",
    "encryption",
    "difficult",
    "hack",
    "today",
    "focusing",
    "two",
    "major",
    "cryptocurrencies",
    "bitcoin",
    "ether",
    "bitcoin",
    "digital",
    "currency",
    "decentralized",
    "works",
    "blockchain",
    "technology",
    "uses",
    "network",
    "perform",
    "transactions",
    "let",
    "talk",
    "ether",
    "ether",
    "currency",
    "accepted",
    "ethereum",
    "network",
    "ethereum",
    "network",
    "uses",
    "blockchain",
    "technology",
    "create",
    "open",
    "source",
    "platform",
    "building",
    "deploying",
    "decentralized",
    "applications",
    "let",
    "talk",
    "similarities",
    "bitcoin",
    "ether",
    "biggest",
    "valuable",
    "cryptocurrencies",
    "market",
    "right",
    "use",
    "blockchain",
    "technology",
    "nothing",
    "technology",
    "involves",
    "transactions",
    "added",
    "container",
    "called",
    "block",
    "creating",
    "chain",
    "blocks",
    "data",
    "altered",
    "currency",
    "mined",
    "using",
    "method",
    "called",
    "proof",
    "work",
    "form",
    "mathematical",
    "puzzle",
    "needs",
    "solved",
    "block",
    "added",
    "blockchain",
    "finally",
    "widely",
    "used",
    "across",
    "world",
    "let",
    "talk",
    "differences",
    "bitcoin",
    "used",
    "send",
    "money",
    "someone",
    "similar",
    "real",
    "life",
    "currency",
    "works",
    "ether",
    "used",
    "currency",
    "within",
    "ethereum",
    "network",
    "although",
    "used",
    "transactions",
    "well",
    "bitcoin",
    "transactions",
    "manual",
    "means",
    "personally",
    "perform",
    "transactions",
    "ether",
    "option",
    "make",
    "transactions",
    "manual",
    "automatic",
    "programmable",
    "means",
    "transactions",
    "take",
    "place",
    "certain",
    "condition",
    "met",
    "bitcoin",
    "takes",
    "10",
    "minutes",
    "perform",
    "transaction",
    "amount",
    "time",
    "takes",
    "block",
    "added",
    "blockchain",
    "ether",
    "takes",
    "20",
    "seconds",
    "transaction",
    "blockchain",
    "used",
    "like",
    "money",
    "transactions",
    "ether",
    "used",
    "power",
    "ethereum",
    "network",
    "power",
    "transactions",
    "well",
    "ether",
    "used",
    "fuel",
    "within",
    "ethereum",
    "network",
    "power",
    "things",
    "limit",
    "many",
    "bitcoins",
    "exist",
    "21",
    "million",
    "supposed",
    "hit",
    "number",
    "year",
    "2140",
    "ether",
    "expected",
    "around",
    "exceed",
    "100",
    "million",
    "units",
    "bitcoin",
    "used",
    "transactions",
    "involving",
    "goods",
    "services",
    "ether",
    "uses",
    "blockchain",
    "technology",
    "create",
    "ledger",
    "trigger",
    "transaction",
    "certain",
    "condition",
    "met",
    "bitcoin",
    "use",
    "algorithm",
    "called",
    "hashing",
    "ethereum",
    "use",
    "et",
    "hash",
    "july",
    "23",
    "2018",
    "one",
    "bitcoin",
    "equals",
    "hundred",
    "sixty",
    "eight",
    "dollars",
    "ether",
    "costs",
    "four",
    "hundred",
    "sixty",
    "four",
    "dollars",
    "future",
    "cryptocurrencies",
    "whole",
    "world",
    "clearly",
    "divided",
    "comes",
    "cryptocurrencies",
    "one",
    "side",
    "supporters",
    "like",
    "bill",
    "gates",
    "al",
    "gore",
    "richard",
    "branson",
    "say",
    "cryptocurrencies",
    "better",
    "regular",
    "currencies",
    "side",
    "people",
    "completely",
    "people",
    "like",
    "warren",
    "buffet",
    "paul",
    "krugman",
    "richard",
    "schiller",
    "nobel",
    "prize",
    "winners",
    "field",
    "economics",
    "call",
    "ponzi",
    "scheme",
    "means",
    "criminal",
    "activities",
    "future",
    "going",
    "conflict",
    "regulation",
    "anonymity",
    "since",
    "several",
    "cryptocurrencies",
    "linked",
    "terrorist",
    "attacks",
    "governments",
    "would",
    "want",
    "regulate",
    "cryptocurrencies",
    "would",
    "work",
    "ethereum",
    "let",
    "take",
    "look",
    "us",
    "today",
    "talking",
    "ethereum",
    "features",
    "ethereum",
    "like",
    "cryptocurrency",
    "smart",
    "contracts",
    "ethereum",
    "virtual",
    "machine",
    "decentralized",
    "application",
    "uses",
    "decentralized",
    "autonomous",
    "organization",
    "also",
    "looking",
    "applications",
    "ethereum",
    "demo",
    "smart",
    "contract",
    "deployment",
    "locally",
    "running",
    "ethereum",
    "client",
    "ethereum",
    "ethereum",
    "blockchain",
    "based",
    "computing",
    "platform",
    "enables",
    "developers",
    "build",
    "deploy",
    "centralized",
    "applications",
    "basically",
    "ethereum",
    "platform",
    "build",
    "applications",
    "run",
    "centralized",
    "authority",
    "create",
    "decentralized",
    "application",
    "participants",
    "particular",
    "application",
    "decision",
    "making",
    "authority",
    "see",
    "ethereum",
    "allows",
    "us",
    "build",
    "deploy",
    "dap",
    "applications",
    "typical",
    "features",
    "ethereum",
    "ethereum",
    "allows",
    "use",
    "cryptocurrency",
    "called",
    "allows",
    "development",
    "deployment",
    "smart",
    "contracts",
    "provides",
    "underlying",
    "technology",
    "architecture",
    "software",
    "understands",
    "smart",
    "contracts",
    "allow",
    "interact",
    "called",
    "ethereum",
    "virtual",
    "machine",
    "allows",
    "eventually",
    "create",
    "consolidated",
    "applications",
    "called",
    "decentralized",
    "applications",
    "also",
    "allows",
    "create",
    "decentralized",
    "autonomous",
    "organization",
    "let",
    "talk",
    "ethereum",
    "cryptocurrency",
    "ether",
    "eth",
    "cryptocurrency",
    "runs",
    "ethereum",
    "network",
    "basically",
    "fuel",
    "running",
    "ethereum",
    "network",
    "used",
    "pay",
    "computational",
    "resources",
    "transaction",
    "fees",
    "transaction",
    "executed",
    "ethereum",
    "network",
    "like",
    "bitcoin",
    "ether",
    "also",
    "currency",
    "apart",
    "paying",
    "transaction",
    "ether",
    "also",
    "used",
    "buy",
    "gas",
    "used",
    "pay",
    "computation",
    "transaction",
    "make",
    "ethereum",
    "network",
    "also",
    "deploy",
    "contract",
    "ethereum",
    "network",
    "need",
    "gas",
    "would",
    "pay",
    "gas",
    "ethers",
    "gas",
    "execution",
    "fee",
    "paid",
    "user",
    "running",
    "transaction",
    "ethereum",
    "ether",
    "utilized",
    "building",
    "decentralized",
    "applications",
    "building",
    "smart",
    "contracts",
    "making",
    "standard",
    "payments",
    "smart",
    "contract",
    "smart",
    "contract",
    "simple",
    "computer",
    "program",
    "facilitates",
    "exchange",
    "valuable",
    "asset",
    "two",
    "parties",
    "could",
    "money",
    "could",
    "shares",
    "could",
    "property",
    "could",
    "digital",
    "asset",
    "want",
    "exchange",
    "contracts",
    "created",
    "anyone",
    "ethereum",
    "network",
    "primarily",
    "contract",
    "consists",
    "terms",
    "conditions",
    "mutually",
    "agreed",
    "parties",
    "peers",
    "primary",
    "feature",
    "smart",
    "contract",
    "executed",
    "altered",
    "transaction",
    "done",
    "top",
    "smart",
    "contract",
    "registered",
    "permanently",
    "immutable",
    "even",
    "future",
    "modify",
    "smart",
    "contract",
    "transactions",
    "correlated",
    "original",
    "contract",
    "get",
    "altered",
    "modify",
    "verification",
    "process",
    "smart",
    "contract",
    "carried",
    "amongst",
    "anonymous",
    "parties",
    "network",
    "without",
    "need",
    "centralized",
    "authority",
    "makes",
    "smart",
    "contract",
    "execution",
    "ethereum",
    "decentralized",
    "execution",
    "provides",
    "transfer",
    "asset",
    "currency",
    "transparent",
    "trustworthy",
    "manner",
    "two",
    "entities",
    "totally",
    "unaware",
    "identity",
    "secure",
    "ethereum",
    "network",
    "though",
    "transactions",
    "successfully",
    "done",
    "accounts",
    "sender",
    "receiver",
    "updated",
    "accordingly",
    "generates",
    "trust",
    "parties",
    "transacting",
    "using",
    "ethereum",
    "network",
    "happens",
    "traditional",
    "system",
    "contract",
    "traditional",
    "systems",
    "contract",
    "sign",
    "agreement",
    "trust",
    "third",
    "party",
    "hire",
    "third",
    "party",
    "execution",
    "problem",
    "engagement",
    "data",
    "tampering",
    "possible",
    "talk",
    "new",
    "smart",
    "contract",
    "agreement",
    "coded",
    "program",
    "result",
    "verified",
    "centralized",
    "authority",
    "verified",
    "participants",
    "ethereum",
    "based",
    "blockchain",
    "network",
    "contract",
    "executed",
    "transaction",
    "registered",
    "altered",
    "tampered",
    "removes",
    "risk",
    "data",
    "manipulation",
    "alteration",
    "let",
    "take",
    "another",
    "example",
    "zac",
    "given",
    "contract",
    "500",
    "elsa",
    "developing",
    "company",
    "website",
    "developers",
    "code",
    "agreement",
    "smart",
    "contract",
    "using",
    "ethereum",
    "programming",
    "language",
    "smart",
    "contract",
    "conditions",
    "requirements",
    "building",
    "website",
    "code",
    "written",
    "uploaded",
    "deployed",
    "ethereum",
    "evm",
    "virtual",
    "machine",
    "evm",
    "runtime",
    "compiler",
    "execute",
    "smart",
    "contract",
    "code",
    "deployed",
    "evm",
    "every",
    "participant",
    "network",
    "copy",
    "contract",
    "elsa",
    "submits",
    "work",
    "ethereum",
    "evaluation",
    "node",
    "ethereum",
    "network",
    "evaluate",
    "confirm",
    "whether",
    "result",
    "given",
    "elsa",
    "done",
    "per",
    "coding",
    "requirements",
    "approved",
    "verified",
    "contract",
    "worth",
    "500",
    "payment",
    "paid",
    "elsa",
    "ethers",
    "john",
    "account",
    "person",
    "gone",
    "contract",
    "account",
    "automatically",
    "debited",
    "elsa",
    "credited",
    "500",
    "ether",
    "denomination",
    "take",
    "look",
    "demo",
    "small",
    "demo",
    "deployment",
    "smart",
    "contract",
    "order",
    "execute",
    "smart",
    "contract",
    "need",
    "two",
    "set",
    "softwares",
    "ganache",
    "truffle",
    "show",
    "demo",
    "install",
    "two",
    "softwares",
    "machine",
    "giving",
    "demo",
    "following",
    "smart",
    "contract",
    "smart",
    "contract",
    "writing",
    "simple",
    "contract",
    "greeter",
    "variable",
    "called",
    "greeting",
    "initializing",
    "using",
    "constructor",
    "demo",
    "showing",
    "change",
    "value",
    "variable",
    "greeting",
    "using",
    "setgridding",
    "method",
    "read",
    "value",
    "using",
    "greet",
    "method",
    "contract",
    "defining",
    "whoever",
    "deploying",
    "contract",
    "blockchain",
    "network",
    "always",
    "owner",
    "contract",
    "defined",
    "certain",
    "mandatory",
    "functions",
    "order",
    "kill",
    "contract",
    "ethereum",
    "network",
    "owner",
    "contract",
    "kill",
    "let",
    "talk",
    "ethereum",
    "virtual",
    "machine",
    "virtual",
    "machine",
    "designed",
    "operate",
    "runtime",
    "environment",
    "compiling",
    "deploying",
    "ethereum",
    "based",
    "smart",
    "contracts",
    "basically",
    "evm",
    "engine",
    "understands",
    "language",
    "smart",
    "contracts",
    "written",
    "solidity",
    "language",
    "ethereum",
    "evm",
    "operated",
    "sandbox",
    "environment",
    "basically",
    "deploy",
    "standalone",
    "environment",
    "act",
    "testing",
    "development",
    "environment",
    "n",
    "number",
    "times",
    "test",
    "smart",
    "contract",
    "deploy",
    "verify",
    "satisfied",
    "performance",
    "functionality",
    "smart",
    "contract",
    "deploy",
    "ethereum",
    "main",
    "net",
    "programming",
    "language",
    "smart",
    "contract",
    "compiled",
    "byte",
    "code",
    "evm",
    "understands",
    "byte",
    "code",
    "read",
    "executed",
    "using",
    "ethereum",
    "feature",
    "called",
    "ethereum",
    "virtual",
    "machine",
    "basically",
    "evm",
    "machine",
    "understands",
    "byte",
    "code",
    "one",
    "popular",
    "languages",
    "writing",
    "smart",
    "contract",
    "solidity",
    "write",
    "smart",
    "contract",
    "solidity",
    "contract",
    "gets",
    "converted",
    "byte",
    "code",
    "gets",
    "deployed",
    "ev",
    "thereby",
    "evm",
    "guarantees",
    "security",
    "cyber",
    "attack",
    "evm",
    "work",
    "suppose",
    "wants",
    "pay",
    "b",
    "10",
    "ethers",
    "transaction",
    "sent",
    "evm",
    "using",
    "smart",
    "contract",
    "funds",
    "transfer",
    "b",
    "order",
    "validate",
    "transaction",
    "ethereum",
    "network",
    "perform",
    "proof",
    "work",
    "consensus",
    "algorithm",
    "minor",
    "nodes",
    "ethereum",
    "validate",
    "transaction",
    "whether",
    "first",
    "identity",
    "exist",
    "relevant",
    "amount",
    "balance",
    "transfer",
    "10",
    "ether",
    "b",
    "validate",
    "transaction",
    "validated",
    "ether",
    "debited",
    "wallet",
    "credited",
    "b",
    "wallet",
    "course",
    "miners",
    "charge",
    "fees",
    "order",
    "validate",
    "transaction",
    "earn",
    "reward",
    "nodes",
    "ethereum",
    "network",
    "execute",
    "smart",
    "contract",
    "using",
    "respective",
    "evms",
    "proof",
    "work",
    "works",
    "every",
    "node",
    "ethereum",
    "network",
    "entire",
    "history",
    "transactions",
    "entire",
    "chain",
    "history",
    "smart",
    "contract",
    "basically",
    "address",
    "smart",
    "contract",
    "deployed",
    "transactions",
    "associated",
    "smart",
    "contract",
    "also",
    "handle",
    "current",
    "state",
    "smart",
    "contract",
    "goal",
    "miners",
    "ethereum",
    "blockchain",
    "network",
    "validate",
    "block",
    "block",
    "transaction",
    "miners",
    "use",
    "computational",
    "power",
    "resources",
    "get",
    "appropriate",
    "hash",
    "value",
    "varying",
    "nonce",
    "miners",
    "vary",
    "nonce",
    "pass",
    "hashing",
    "algorithm",
    "case",
    "ethereum",
    "hash",
    "algorithm",
    "produces",
    "hash",
    "value",
    "lesser",
    "predefined",
    "target",
    "per",
    "proof",
    "work",
    "consensus",
    "hash",
    "value",
    "generated",
    "less",
    "target",
    "value",
    "block",
    "considered",
    "verified",
    "miner",
    "gets",
    "rewarded",
    "proof",
    "work",
    "solved",
    "result",
    "broadcasted",
    "shared",
    "nodes",
    "order",
    "update",
    "ledger",
    "nodes",
    "accept",
    "hash",
    "block",
    "valid",
    "block",
    "gets",
    "added",
    "ethereum",
    "mainnet",
    "blockchain",
    "result",
    "miner",
    "receives",
    "reward",
    "today",
    "stands",
    "three",
    "ethers",
    "plus",
    "miner",
    "receives",
    "transaction",
    "fees",
    "generated",
    "verifying",
    "block",
    "transactions",
    "aggregated",
    "block",
    "cumulative",
    "transaction",
    "fees",
    "associated",
    "transactions",
    "also",
    "rewarded",
    "miner",
    "know",
    "ethereum",
    "process",
    "called",
    "proof",
    "stake",
    "also",
    "development",
    "alternative",
    "proof",
    "work",
    "meant",
    "solution",
    "minimize",
    "use",
    "expensive",
    "resources",
    "spend",
    "mining",
    "using",
    "proof",
    "work",
    "proof",
    "stake",
    "miner",
    "actually",
    "validator",
    "validate",
    "transactions",
    "based",
    "amount",
    "crypto",
    "coins",
    "holds",
    "start",
    "mining",
    "based",
    "accumulation",
    "repository",
    "crypto",
    "coins",
    "miner",
    "beforehand",
    "give",
    "higher",
    "probability",
    "mining",
    "block",
    "however",
    "proof",
    "stake",
    "widely",
    "adopted",
    "compared",
    "proof",
    "work",
    "algorithm",
    "let",
    "understand",
    "concept",
    "gas",
    "ethereum",
    "virtual",
    "machine",
    "concept",
    "gas",
    "need",
    "like",
    "need",
    "fuel",
    "run",
    "car",
    "way",
    "order",
    "run",
    "application",
    "ethereum",
    "network",
    "need",
    "gas",
    "gas",
    "perform",
    "transactional",
    "ethereum",
    "network",
    "user",
    "make",
    "payment",
    "shell",
    "ethers",
    "order",
    "get",
    "execution",
    "done",
    "transaction",
    "done",
    "intermediary",
    "monetary",
    "value",
    "called",
    "gas",
    "ethereum",
    "network",
    "gas",
    "unit",
    "measures",
    "computational",
    "power",
    "required",
    "run",
    "smart",
    "contract",
    "transaction",
    "transaction",
    "updating",
    "blockchain",
    "would",
    "shell",
    "gas",
    "gas",
    "come",
    "price",
    "ethers",
    "gas",
    "fees",
    "calculated",
    "ethereum",
    "transaction",
    "fees",
    "calculated",
    "ethereum",
    "using",
    "formula",
    "every",
    "transaction",
    "gas",
    "correlated",
    "gas",
    "price",
    "amount",
    "gas",
    "required",
    "execute",
    "transaction",
    "multiplied",
    "gas",
    "price",
    "generate",
    "transaction",
    "fees",
    "gas",
    "limit",
    "ethereum",
    "network",
    "refers",
    "amount",
    "gas",
    "used",
    "computation",
    "amount",
    "ether",
    "user",
    "required",
    "pay",
    "gas",
    "screenshot",
    "ethereum",
    "mainnet",
    "cost",
    "transaction",
    "shown",
    "see",
    "particular",
    "example",
    "transaction",
    "gas",
    "limit",
    "21",
    "000",
    "gas",
    "used",
    "transaction",
    "21",
    "000",
    "gas",
    "price",
    "21",
    "gui",
    "lowest",
    "denomination",
    "21",
    "gui",
    "21",
    "000",
    "gave",
    "actual",
    "transaction",
    "fees",
    "ether",
    "approximately",
    "cents",
    "today",
    "ether",
    "market",
    "value",
    "transaction",
    "fee",
    "goes",
    "miner",
    "validated",
    "transaction",
    "understand",
    "gas",
    "limit",
    "gas",
    "price",
    "better",
    "way",
    "let",
    "consider",
    "example",
    "car",
    "suppose",
    "car",
    "mileage",
    "10",
    "kilometers",
    "price",
    "petrol",
    "one",
    "dollar",
    "per",
    "liter",
    "driving",
    "car",
    "50",
    "kilometers",
    "cost",
    "five",
    "liters",
    "patrol",
    "worth",
    "five",
    "dollars",
    "similarly",
    "perform",
    "operation",
    "run",
    "code",
    "ethereum",
    "need",
    "obtain",
    "certain",
    "amount",
    "gas",
    "like",
    "patrol",
    "gas",
    "per",
    "unit",
    "price",
    "called",
    "gas",
    "price",
    "user",
    "provides",
    "less",
    "amount",
    "gas",
    "run",
    "particular",
    "operation",
    "process",
    "fail",
    "user",
    "given",
    "message",
    "gas",
    "gui",
    "lowest",
    "denomination",
    "ether",
    "used",
    "measuring",
    "unit",
    "gas",
    "price",
    "ethereum",
    "mining",
    "different",
    "bitcoin",
    "mining",
    "hashing",
    "algorithm",
    "primary",
    "difference",
    "bitcoin",
    "uses",
    "ethereum",
    "uses",
    "hash",
    "average",
    "time",
    "taken",
    "bitcoin",
    "mining",
    "block",
    "10",
    "minutes",
    "whereas",
    "ethereum",
    "12",
    "15",
    "seconds",
    "today",
    "mining",
    "reward",
    "bitcoin",
    "btc",
    "ethereum",
    "three",
    "ethers",
    "plus",
    "transaction",
    "fee",
    "accumulated",
    "transaction",
    "fee",
    "transactions",
    "block",
    "23rd",
    "july",
    "bitcoin",
    "value",
    "seven",
    "thousand",
    "six",
    "hundred",
    "sixty",
    "seven",
    "dollars",
    "whereas",
    "one",
    "ether",
    "stands",
    "466",
    "dollars",
    "screenshot",
    "ethereum",
    "reward",
    "given",
    "miner",
    "block",
    "see",
    "breakup",
    "reward",
    "three",
    "ethers",
    "plus",
    "total",
    "accumulated",
    "transaction",
    "fee",
    "underlying",
    "transactions",
    "block",
    "ethos",
    "decentralized",
    "application",
    "let",
    "compare",
    "traditional",
    "applications",
    "traditional",
    "websites",
    "currently",
    "running",
    "example",
    "log",
    "twitter",
    "web",
    "application",
    "gets",
    "displayed",
    "rendered",
    "using",
    "html",
    "page",
    "page",
    "call",
    "api",
    "access",
    "personal",
    "data",
    "information",
    "centrally",
    "hosted",
    "simple",
    "process",
    "front",
    "end",
    "executes",
    "backend",
    "api",
    "api",
    "goes",
    "fetches",
    "information",
    "centralized",
    "db",
    "transform",
    "application",
    "decentralized",
    "application",
    "log",
    "web",
    "application",
    "get",
    "rendered",
    "calling",
    "smart",
    "contract",
    "based",
    "api",
    "fetch",
    "information",
    "blockchain",
    "network",
    "api",
    "gets",
    "replaced",
    "smart",
    "contract",
    "interface",
    "smart",
    "contract",
    "fetch",
    "information",
    "blockchain",
    "network",
    "backend",
    "blockchain",
    "network",
    "centralized",
    "db",
    "decentralized",
    "network",
    "participants",
    "network",
    "miners",
    "network",
    "validating",
    "verifying",
    "transactions",
    "happening",
    "using",
    "smart",
    "contract",
    "blockchain",
    "network",
    "thereby",
    "transaction",
    "action",
    "happening",
    "twitter",
    "kind",
    "application",
    "transformed",
    "claimed",
    "centralized",
    "uh",
    "transaction",
    "decentralized",
    "transaction",
    "dap",
    "decentralized",
    "application",
    "consists",
    "code",
    "runs",
    "distributed",
    "network",
    "software",
    "designed",
    "work",
    "ethereum",
    "network",
    "without",
    "controlled",
    "centralized",
    "system",
    "primary",
    "difference",
    "provides",
    "direct",
    "interaction",
    "end",
    "users",
    "decentralized",
    "application",
    "providers",
    "application",
    "qualifies",
    "dap",
    "open",
    "sourced",
    "code",
    "github",
    "uses",
    "public",
    "blockchain",
    "based",
    "token",
    "order",
    "run",
    "application",
    "token",
    "acts",
    "fuel",
    "decentralized",
    "application",
    "run",
    "dap",
    "allows",
    "backend",
    "code",
    "data",
    "decentralized",
    "primary",
    "architecture",
    "dap",
    "let",
    "discuss",
    "decentralized",
    "autonomous",
    "organizations",
    "daos",
    "digital",
    "organizations",
    "wants",
    "operate",
    "without",
    "need",
    "hierarchical",
    "management",
    "wants",
    "operate",
    "decentralized",
    "democratized",
    "fashion",
    "basically",
    "dao",
    "organization",
    "hands",
    "centralized",
    "authority",
    "hands",
    "certain",
    "designated",
    "authorities",
    "group",
    "designated",
    "people",
    "part",
    "authority",
    "exists",
    "blockchain",
    "network",
    "governed",
    "protocols",
    "embedded",
    "smart",
    "contract",
    "thereby",
    "rely",
    "smart",
    "contract",
    "decision",
    "making",
    "business",
    "decisions",
    "driven",
    "smart",
    "contracts",
    "say",
    "decentralized",
    "voting",
    "system",
    "within",
    "organization",
    "organizational",
    "decision",
    "taken",
    "go",
    "voting",
    "system",
    "running",
    "decentralized",
    "application",
    "work",
    "people",
    "add",
    "funds",
    "dow",
    "dao",
    "requires",
    "funding",
    "order",
    "execute",
    "take",
    "decisions",
    "based",
    "member",
    "given",
    "token",
    "percentage",
    "basis",
    "represents",
    "percentage",
    "shares",
    "particular",
    "member",
    "dow",
    "tokens",
    "used",
    "vote",
    "dow",
    "proposal",
    "status",
    "decided",
    "based",
    "maximum",
    "votes",
    "every",
    "decision",
    "within",
    "organization",
    "go",
    "voting",
    "process",
    "let",
    "take",
    "look",
    "applications",
    "ethereum",
    "real",
    "world",
    "getting",
    "used",
    "seen",
    "dao",
    "voting",
    "systems",
    "adopting",
    "results",
    "polls",
    "publicly",
    "available",
    "ensures",
    "transparent",
    "fair",
    "democracy",
    "eliminating",
    "voting",
    "malpractices",
    "getting",
    "adopted",
    "widely",
    "banking",
    "scenarios",
    "banking",
    "systems",
    "ethereum",
    "decentralized",
    "system",
    "becoming",
    "difficult",
    "hackers",
    "unauthorized",
    "access",
    "also",
    "allows",
    "payments",
    "ethereum",
    "based",
    "network",
    "banks",
    "also",
    "using",
    "ethereum",
    "channel",
    "make",
    "remittances",
    "payments",
    "shipping",
    "deploying",
    "ethereum",
    "shipping",
    "helps",
    "tracking",
    "cargo",
    "prevents",
    "goods",
    "misplaced",
    "counterfeited",
    "basically",
    "ethereum",
    "providing",
    "provenance",
    "tracking",
    "framework",
    "kind",
    "asset",
    "required",
    "typical",
    "supply",
    "chain",
    "ethereum",
    "smart",
    "contract",
    "agreements",
    "maintained",
    "executed",
    "without",
    "alteration",
    "industry",
    "fragmented",
    "participants",
    "subject",
    "disputes",
    "requires",
    "digital",
    "contracts",
    "present",
    "ethereum",
    "definitely",
    "used",
    "technology",
    "developing",
    "smart",
    "contract",
    "digitally",
    "recording",
    "agreements",
    "transactions",
    "based",
    "agreements",
    "let",
    "get",
    "started",
    "demo",
    "deploy",
    "ethereum",
    "smart",
    "contract",
    "locally",
    "order",
    "deploy",
    "smart",
    "contract",
    "first",
    "installing",
    "ganache",
    "client",
    "allows",
    "host",
    "local",
    "ethereum",
    "client",
    "deploy",
    "smart",
    "contract",
    "working",
    "windows",
    "environment",
    "downloading",
    "ganache",
    "setup",
    "also",
    "download",
    "node",
    "order",
    "install",
    "truffle",
    "machines",
    "node",
    "downloaded",
    "install",
    "node",
    "node",
    "successfully",
    "installed",
    "going",
    "install",
    "ganache",
    "locally",
    "run",
    "ganache",
    "little",
    "later",
    "perform",
    "certain",
    "steps",
    "run",
    "ganache",
    "see",
    "ganache",
    "running",
    "show",
    "interface",
    "looks",
    "ganache",
    "brought",
    "automatically",
    "creates",
    "10",
    "accounts",
    "balance",
    "100",
    "ethers",
    "running",
    "localhost",
    "port",
    "number",
    "7545",
    "see",
    "transaction",
    "anything",
    "currently",
    "happened",
    "current",
    "block",
    "0",
    "genesis",
    "block",
    "transactions",
    "blocks",
    "transactions",
    "block",
    "generated",
    "using",
    "ganache",
    "client",
    "deploying",
    "greeter",
    "contract",
    "installed",
    "node",
    "installing",
    "truffle",
    "ruffle",
    "utility",
    "allows",
    "us",
    "compile",
    "deploy",
    "ethereum",
    "contracts",
    "okay",
    "truffle",
    "installed",
    "need",
    "create",
    "directory",
    "called",
    "greeter",
    "need",
    "run",
    "command",
    "truffle",
    "run",
    "command",
    "ruffle",
    "default",
    "creates",
    "package",
    "structure",
    "three",
    "folders",
    "called",
    "contracts",
    "migrations",
    "test",
    "truffleconfig",
    "writing",
    "smart",
    "contract",
    "called",
    "compile",
    "deploy",
    "basically",
    "contracts",
    "folder",
    "contract",
    "created",
    "lying",
    "contracts",
    "folder",
    "need",
    "add",
    "another",
    "file",
    "migrations",
    "folder",
    "called",
    "deploy",
    "name",
    "deploy",
    "contract",
    "deploy",
    "contract",
    "need",
    "put",
    "line",
    "code",
    "file",
    "asking",
    "truffle",
    "deploy",
    "newly",
    "created",
    "file",
    "greater",
    "contract",
    "constructor",
    "initializing",
    "greater",
    "contract",
    "value",
    "high",
    "hello",
    "passing",
    "gas",
    "value",
    "gas",
    "currently",
    "higher",
    "limits",
    "know",
    "gas",
    "value",
    "contract",
    "get",
    "executed",
    "otherwise",
    "also",
    "evaluate",
    "gas",
    "value",
    "contract",
    "using",
    "remix",
    "file",
    "saved",
    "go",
    "make",
    "following",
    "entry",
    "telling",
    "truffle",
    "localhost",
    "ganache",
    "client",
    "running",
    "localhost",
    "port",
    "number",
    "7545",
    "network",
    "id",
    "anything",
    "though",
    "current",
    "ganache",
    "client",
    "running",
    "port",
    "network",
    "id",
    "five",
    "triple",
    "seven",
    "kept",
    "open",
    "connect",
    "network",
    "id",
    "step",
    "need",
    "go",
    "back",
    "command",
    "prompt",
    "say",
    "referral",
    "compile",
    "get",
    "error",
    "getting",
    "kind",
    "error",
    "windows",
    "need",
    "one",
    "quick",
    "fix",
    "need",
    "go",
    "users",
    "directory",
    "rename",
    "trough",
    "go",
    "drive",
    "users",
    "instead",
    "truffle",
    "say",
    "trough",
    "might",
    "certain",
    "compilation",
    "warnings",
    "ignore",
    "contract",
    "compiled",
    "need",
    "run",
    "next",
    "command",
    "trough",
    "great",
    "stage",
    "smart",
    "contract",
    "deployed",
    "see",
    "step",
    "place",
    "contract",
    "called",
    "transaction",
    "default",
    "value",
    "variable",
    "greeter",
    "set",
    "high",
    "hello",
    "see",
    "need",
    "run",
    "command",
    "trough",
    "console",
    "interact",
    "contract",
    "craft",
    "console",
    "check",
    "address",
    "contract",
    "deployed",
    "contract",
    "deployed",
    "address",
    "0x37",
    "matches",
    "address",
    "0x373",
    "need",
    "check",
    "default",
    "value",
    "set",
    "deploying",
    "contract",
    "value",
    "hi",
    "hello",
    "change",
    "value",
    "something",
    "else",
    "greater",
    "contract",
    "method",
    "called",
    "set",
    "greeting",
    "whenever",
    "performing",
    "action",
    "new",
    "block",
    "get",
    "generated",
    "block",
    "count",
    "increase",
    "4",
    "5",
    "making",
    "change",
    "blockchain",
    "see",
    "new",
    "transaction",
    "created",
    "gas",
    "used",
    "default",
    "gas",
    "price",
    "ganache",
    "block",
    "number",
    "five",
    "mined",
    "value",
    "variable",
    "return",
    "latest",
    "value",
    "change",
    "greet",
    "value",
    "demonstrates",
    "use",
    "solidity",
    "contract",
    "compile",
    "deploy",
    "locally",
    "running",
    "blockchain",
    "network",
    "connect",
    "multiple",
    "nodes",
    "ganache",
    "client",
    "nodes",
    "running",
    "network",
    "id",
    "network",
    "id",
    "running",
    "different",
    "machine",
    "see",
    "details",
    "block",
    "transactions",
    "happened",
    "perform",
    "action",
    "number",
    "six",
    "generated",
    "another",
    "transaction",
    "associated",
    "get",
    "latest",
    "value",
    "let",
    "get",
    "started",
    "understand",
    "smart",
    "contract",
    "us",
    "today",
    "let",
    "understand",
    "need",
    "smart",
    "contract",
    "smart",
    "contract",
    "usage",
    "solidity",
    "building",
    "smart",
    "contract",
    "advantages",
    "smart",
    "contract",
    "blockchain",
    "implementation",
    "smart",
    "contracts",
    "look",
    "certain",
    "examples",
    "voting",
    "digital",
    "token",
    "also",
    "take",
    "another",
    "use",
    "case",
    "smart",
    "contracts",
    "help",
    "us",
    "crowdfunding",
    "smart",
    "contract",
    "let",
    "take",
    "look",
    "traditionally",
    "contracts",
    "used",
    "happen",
    "suppose",
    "two",
    "parties",
    "b",
    "get",
    "contract",
    "utilize",
    "services",
    "third",
    "party",
    "trust",
    "get",
    "contract",
    "executed",
    "introduction",
    "smart",
    "contracts",
    "technology",
    "evolving",
    "removes",
    "dependency",
    "third",
    "parties",
    "automates",
    "execution",
    "smart",
    "contracts",
    "compare",
    "traditional",
    "versus",
    "new",
    "smart",
    "contract",
    "traditional",
    "used",
    "governments",
    "lawyers",
    "third",
    "party",
    "trust",
    "smart",
    "contracts",
    "need",
    "third",
    "party",
    "need",
    "intermediate",
    "execution",
    "time",
    "definitely",
    "higher",
    "execution",
    "time",
    "traditional",
    "contracts",
    "many",
    "number",
    "middlemen",
    "intermediary",
    "layers",
    "many",
    "number",
    "days",
    "time",
    "takes",
    "smart",
    "contract",
    "matter",
    "minutes",
    "gets",
    "executed",
    "automated",
    "programmable",
    "running",
    "computer",
    "predefined",
    "condition",
    "remittance",
    "remittance",
    "either",
    "parties",
    "happen",
    "manual",
    "process",
    "approvals",
    "workflows",
    "processes",
    "manual",
    "processes",
    "take",
    "time",
    "traditional",
    "contracting",
    "system",
    "smart",
    "contract",
    "conditions",
    "predefined",
    "soon",
    "condition",
    "met",
    "remittance",
    "happens",
    "automatically",
    "either",
    "parties",
    "credited",
    "amount",
    "credited",
    "automatically",
    "primary",
    "advantage",
    "using",
    "smart",
    "contract",
    "transparency",
    "available",
    "100",
    "traditional",
    "contracts",
    "transparency",
    "bound",
    "peripheral",
    "parties",
    "entities",
    "intermediaries",
    "involved",
    "compared",
    "smart",
    "contract",
    "transparency",
    "100",
    "available",
    "24x7",
    "online",
    "anyone",
    "go",
    "review",
    "audit",
    "validate",
    "transactions",
    "executed",
    "smart",
    "contracts",
    "archiving",
    "archiving",
    "big",
    "difficult",
    "problem",
    "traditional",
    "contracts",
    "transactions",
    "records",
    "maintained",
    "offline",
    "becomes",
    "difficult",
    "maintain",
    "identify",
    "traceability",
    "provenance",
    "transactions",
    "happened",
    "traditional",
    "contract",
    "whereby",
    "smart",
    "contract",
    "becomes",
    "easy",
    "transactions",
    "happened",
    "smart",
    "contract",
    "hundred",
    "percent",
    "traceability",
    "available",
    "provenance",
    "point",
    "view",
    "trace",
    "transaction",
    "day",
    "one",
    "point",
    "origin",
    "till",
    "present",
    "day",
    "archiving",
    "automatically",
    "happening",
    "log",
    "audit",
    "transaction",
    "history",
    "automatically",
    "getting",
    "generated",
    "security",
    "definitely",
    "concern",
    "traditional",
    "contracts",
    "intermediaries",
    "involved",
    "manual",
    "processes",
    "involved",
    "security",
    "compromised",
    "level",
    "stage",
    "smart",
    "contract",
    "security",
    "maintained",
    "cryptography",
    "mainly",
    "public",
    "key",
    "infrastructure",
    "public",
    "private",
    "key",
    "infrastructure",
    "secure",
    "way",
    "maintaining",
    "security",
    "cryptography",
    "transactions",
    "using",
    "smart",
    "contract",
    "cost",
    "yes",
    "traditional",
    "contracts",
    "expensive",
    "cost",
    "transaction",
    "high",
    "compared",
    "smart",
    "contracts",
    "middlemen",
    "involved",
    "smart",
    "contract",
    "cost",
    "low",
    "intermediaries",
    "cost",
    "transaction",
    "charged",
    "underlying",
    "infrastructure",
    "blockchain",
    "network",
    "running",
    "smart",
    "contracts",
    "signatures",
    "manual",
    "process",
    "transactions",
    "signed",
    "manually",
    "verified",
    "manually",
    "smart",
    "contracts",
    "transactions",
    "digitally",
    "signed",
    "using",
    "private",
    "key",
    "entities",
    "decoded",
    "public",
    "key",
    "shared",
    "parties",
    "involved",
    "smart",
    "contract",
    "nutshell",
    "smart",
    "contracts",
    "give",
    "us",
    "n",
    "number",
    "advantages",
    "primary",
    "advantages",
    "listed",
    "advantages",
    "enforce",
    "us",
    "move",
    "towards",
    "economy",
    "system",
    "start",
    "using",
    "smart",
    "contracts",
    "transactions",
    "avoid",
    "disputes",
    "keep",
    "transaction",
    "cost",
    "low",
    "thereby",
    "giving",
    "advantage",
    "end",
    "consumer",
    "smart",
    "contract",
    "let",
    "consider",
    "real",
    "life",
    "example",
    "taking",
    "chocolate",
    "vending",
    "machine",
    "deposit",
    "two",
    "dollar",
    "note",
    "vending",
    "machine",
    "hit",
    "a1",
    "button",
    "mapped",
    "chocolate",
    "bar",
    "want",
    "buy",
    "result",
    "liver",
    "vending",
    "machine",
    "moves",
    "pushes",
    "chocolate",
    "basically",
    "even",
    "button",
    "programmed",
    "lever",
    "order",
    "move",
    "chocolate",
    "smart",
    "contract",
    "similar",
    "vending",
    "machine",
    "eliminates",
    "need",
    "intermediary",
    "case",
    "vending",
    "machine",
    "replacing",
    "direct",
    "seller",
    "allowing",
    "make",
    "purchase",
    "without",
    "middleman",
    "eliminates",
    "need",
    "escrow",
    "services",
    "smart",
    "contracts",
    "contract",
    "contain",
    "terms",
    "conditions",
    "agreement",
    "parties",
    "peers",
    "involved",
    "english",
    "terms",
    "conditions",
    "agreement",
    "written",
    "piece",
    "code",
    "executed",
    "blockchain",
    "based",
    "decentralized",
    "platform",
    "agreements",
    "facilitates",
    "exchange",
    "digital",
    "asset",
    "could",
    "digital",
    "currency",
    "could",
    "shares",
    "could",
    "property",
    "could",
    "anything",
    "want",
    "transact",
    "blockchain",
    "based",
    "decentralized",
    "platform",
    "gives",
    "democratic",
    "system",
    "transactions",
    "authorized",
    "majority",
    "participants",
    "identity",
    "participants",
    "also",
    "kept",
    "anonymous",
    "let",
    "consider",
    "example",
    "rachel",
    "airport",
    "flight",
    "delayed",
    "inconvenience",
    "could",
    "beneficial",
    "richard",
    "smart",
    "contract",
    "insurance",
    "would",
    "ensure",
    "given",
    "compensation",
    "flight",
    "delay",
    "instantly",
    "imagine",
    "smart",
    "contract",
    "insurance",
    "company",
    "already",
    "deployed",
    "monitoring",
    "flights",
    "delay",
    "rachel",
    "already",
    "taken",
    "insurance",
    "delay",
    "flights",
    "soon",
    "condition",
    "met",
    "delay",
    "flight",
    "x",
    "amount",
    "hours",
    "example",
    "two",
    "hours",
    "case",
    "insurance",
    "company",
    "automatically",
    "get",
    "trigger",
    "rachel",
    "credited",
    "amount",
    "insured",
    "account",
    "let",
    "see",
    "smart",
    "contract",
    "helpful",
    "axa",
    "flight",
    "delay",
    "insurance",
    "one",
    "examples",
    "ethereum",
    "smart",
    "contract",
    "axa",
    "insurance",
    "company",
    "smart",
    "contract",
    "linked",
    "databases",
    "record",
    "flight",
    "status",
    "smart",
    "contract",
    "connected",
    "databases",
    "fetching",
    "information",
    "evaluating",
    "delay",
    "enables",
    "automatic",
    "compensation",
    "delay",
    "two",
    "hours",
    "condition",
    "flight",
    "delay",
    "beyond",
    "insurance",
    "contract",
    "get",
    "executed",
    "rachel",
    "get",
    "paid",
    "smart",
    "contract",
    "created",
    "based",
    "terms",
    "conditions",
    "condition",
    "compensation",
    "equal",
    "flight",
    "delay",
    "less",
    "two",
    "hours",
    "based",
    "code",
    "smart",
    "contract",
    "holds",
    "company",
    "money",
    "certain",
    "condition",
    "satisfied",
    "smart",
    "contract",
    "submitted",
    "nodes",
    "blockchain",
    "network",
    "evms",
    "evaluation",
    "evm",
    "runtime",
    "compiler",
    "execute",
    "smart",
    "contracts",
    "code",
    "brain",
    "electronic",
    "virtual",
    "machine",
    "executes",
    "smart",
    "contract",
    "nodes",
    "network",
    "executing",
    "code",
    "using",
    "evm",
    "must",
    "come",
    "result",
    "evms",
    "would",
    "copy",
    "smart",
    "contract",
    "deployed",
    "flight",
    "delayed",
    "two",
    "hours",
    "smart",
    "contract",
    "compensation",
    "amount",
    "given",
    "rachel",
    "objective",
    "smart",
    "contract",
    "without",
    "involvement",
    "middleman",
    "paperwork",
    "rachel",
    "submit",
    "insurance",
    "company",
    "going",
    "manual",
    "process",
    "bypassed",
    "rachel",
    "compensated",
    "directly",
    "let",
    "understand",
    "need",
    "solidity",
    "developing",
    "smart",
    "contracts",
    "comes",
    "important",
    "question",
    "programming",
    "language",
    "smart",
    "contract",
    "use",
    "two",
    "widely",
    "used",
    "programming",
    "languages",
    "writing",
    "ethereum",
    "smart",
    "contracts",
    "solidity",
    "serpent",
    "however",
    "blockchain",
    "platforms",
    "solidity",
    "widely",
    "used",
    "implementing",
    "smart",
    "contracts",
    "going",
    "talk",
    "subsequent",
    "slides",
    "solidity",
    "high",
    "level",
    "programming",
    "language",
    "used",
    "implementing",
    "smart",
    "contracts",
    "enables",
    "check",
    "program",
    "runtime",
    "rather",
    "compile",
    "time",
    "solidity",
    "turing",
    "complete",
    "language",
    "conditions",
    "loops",
    "root",
    "operators",
    "etc",
    "mature",
    "programming",
    "language",
    "order",
    "write",
    "code",
    "order",
    "write",
    "conditions",
    "certain",
    "loop",
    "conditions",
    "etc",
    "advantages",
    "smart",
    "contract",
    "already",
    "discussed",
    "intermediaries",
    "involved",
    "process",
    "executes",
    "without",
    "need",
    "third",
    "party",
    "automated",
    "process",
    "automated",
    "code",
    "eliminates",
    "manual",
    "effort",
    "execution",
    "high",
    "speed",
    "highly",
    "computative",
    "smart",
    "contracts",
    "runs",
    "programming",
    "code",
    "speed",
    "execution",
    "higher",
    "traditional",
    "contract",
    "data",
    "stored",
    "decentralized",
    "system",
    "chances",
    "modifying",
    "data",
    "difficult",
    "would",
    "say",
    "impossible",
    "accuracy",
    "based",
    "requirements",
    "terms",
    "condition",
    "contract",
    "recorded",
    "accurately",
    "soon",
    "transaction",
    "recorded",
    "registered",
    "blockchain",
    "network",
    "immutable",
    "transaction",
    "one",
    "modify",
    "make",
    "changes",
    "record",
    "added",
    "onto",
    "blockchain",
    "network",
    "smart",
    "contract",
    "let",
    "take",
    "look",
    "certain",
    "blockchain",
    "implementation",
    "smart",
    "contract",
    "using",
    "blockchain",
    "voting",
    "process",
    "eliminate",
    "voting",
    "malpractices",
    "centralized",
    "voting",
    "system",
    "faces",
    "lot",
    "problems",
    "comes",
    "tracking",
    "votes",
    "could",
    "manipulated",
    "identities",
    "could",
    "manipulation",
    "counting",
    "could",
    "biased",
    "decision",
    "making",
    "smart",
    "contract",
    "introduced",
    "eliminate",
    "malpractices",
    "certain",
    "predefined",
    "terms",
    "conditions",
    "already",
    "set",
    "contract",
    "voter",
    "vote",
    "digital",
    "identity",
    "voter",
    "counting",
    "full",
    "proof",
    "every",
    "vote",
    "registered",
    "blockchain",
    "network",
    "accounting",
    "happening",
    "automatically",
    "without",
    "interference",
    "third",
    "party",
    "dependency",
    "manual",
    "process",
    "terms",
    "condition",
    "id",
    "attributed",
    "one",
    "vote",
    "validation",
    "done",
    "users",
    "blockchain",
    "network",
    "voting",
    "process",
    "public",
    "blockchain",
    "could",
    "decentralized",
    "autonomous",
    "blockchain",
    "setup",
    "also",
    "100",
    "transparent",
    "every",
    "voting",
    "transaction",
    "recorded",
    "result",
    "every",
    "voters",
    "would",
    "get",
    "recorded",
    "ledger",
    "information",
    "modified",
    "transparently",
    "publicly",
    "available",
    "audit",
    "verification",
    "let",
    "take",
    "look",
    "one",
    "examples",
    "voting",
    "solidity",
    "contract",
    "voting",
    "solidity",
    "contract",
    "built",
    "solidity",
    "give",
    "brief",
    "overview",
    "primary",
    "functions",
    "look",
    "particular",
    "contract",
    "contract",
    "gives",
    "certain",
    "basic",
    "parameters",
    "like",
    "minimum",
    "number",
    "participants",
    "proposals",
    "required",
    "voting",
    "minimum",
    "amount",
    "time",
    "debate",
    "needs",
    "pass",
    "vote",
    "executed",
    "margin",
    "votes",
    "majority",
    "proposal",
    "passes",
    "50",
    "percent",
    "votes",
    "plus",
    "margin",
    "basically",
    "defining",
    "winning",
    "condition",
    "majority",
    "margin",
    "word",
    "accepted",
    "data",
    "structure",
    "accepting",
    "proposals",
    "right",
    "subsequently",
    "defining",
    "data",
    "structures",
    "members",
    "participating",
    "proposals",
    "submitting",
    "proposals",
    "fetching",
    "addresses",
    "members",
    "basically",
    "digital",
    "identity",
    "members",
    "submitting",
    "proposals",
    "etc",
    "smart",
    "contracts",
    "basically",
    "allows",
    "create",
    "voting",
    "system",
    "add",
    "members",
    "remove",
    "members",
    "change",
    "certain",
    "voting",
    "rules",
    "based",
    "certain",
    "conditions",
    "like",
    "want",
    "increase",
    "minimum",
    "quorum",
    "want",
    "change",
    "debating",
    "period",
    "minutes",
    "majority",
    "rule",
    "changes",
    "function",
    "submitting",
    "new",
    "proposal",
    "voting",
    "happen",
    "basically",
    "example",
    "take",
    "vote",
    "within",
    "decentralized",
    "autonomous",
    "organization",
    "particular",
    "decision",
    "rather",
    "central",
    "authority",
    "taking",
    "decision",
    "voting",
    "mechanism",
    "within",
    "organization",
    "give",
    "majority",
    "proposal",
    "get",
    "majority",
    "proposal",
    "accepted",
    "otherwise",
    "reject",
    "peripheral",
    "functions",
    "like",
    "check",
    "proposal",
    "code",
    "voting",
    "function",
    "actual",
    "vote",
    "happens",
    "particular",
    "proposal",
    "start",
    "increasing",
    "decreasing",
    "number",
    "votes",
    "execute",
    "proposal",
    "majority",
    "achieved",
    "let",
    "take",
    "look",
    "deploy",
    "smart",
    "contract",
    "voting",
    "smart",
    "contract",
    "take",
    "look",
    "deploy",
    "voting",
    "smart",
    "contract",
    "ethereum",
    "test",
    "network",
    "called",
    "robston",
    "voting",
    "smart",
    "contract",
    "open",
    "remix",
    "also",
    "meta",
    "mask",
    "chrome",
    "plugin",
    "installed",
    "utility",
    "order",
    "connect",
    "robston",
    "test",
    "net",
    "ethereum",
    "test",
    "network",
    "basically",
    "say",
    "ethereum",
    "test",
    "network",
    "deploy",
    "contract",
    "log",
    "metamask",
    "account",
    "created",
    "account",
    "test",
    "ethers",
    "already",
    "use",
    "deploy",
    "contract",
    "create",
    "account",
    "uh",
    "robsten",
    "buy",
    "certain",
    "ethers",
    "using",
    "robston",
    "test",
    "faucet",
    "reach",
    "site",
    "option",
    "test",
    "faucet",
    "already",
    "taken",
    "address",
    "account",
    "raising",
    "request",
    "raise",
    "request",
    "one",
    "ether",
    "whenever",
    "transaction",
    "get",
    "processed",
    "account",
    "balance",
    "get",
    "incremented",
    "one",
    "already",
    "ethers",
    "utilize",
    "deploy",
    "contract",
    "order",
    "compile",
    "deploy",
    "contract",
    "copy",
    "pasted",
    "go",
    "run",
    "remix",
    "already",
    "communicated",
    "via",
    "injected",
    "web",
    "3",
    "meta",
    "mask",
    "taken",
    "account",
    "ether",
    "need",
    "settings",
    "contract",
    "compiled",
    "see",
    "taken",
    "contracts",
    "see",
    "drop",
    "congress",
    "major",
    "contract",
    "deploy",
    "contract",
    "run",
    "section",
    "able",
    "see",
    "drop",
    "name",
    "contracts",
    "smart",
    "contract",
    "like",
    "owned",
    "token",
    "recipient",
    "interface",
    "congress",
    "need",
    "deploy",
    "congress",
    "contract",
    "order",
    "deploy",
    "contract",
    "constructor",
    "requires",
    "certain",
    "inputs",
    "give",
    "certain",
    "values",
    "like",
    "minimum",
    "number",
    "proposals",
    "need",
    "100",
    "minimum",
    "number",
    "debates",
    "10",
    "margin",
    "votes",
    "majority",
    "said",
    "deploy",
    "soon",
    "click",
    "deploy",
    "going",
    "request",
    "gas",
    "contract",
    "gets",
    "deployed",
    "deduct",
    "certain",
    "ethers",
    "account",
    "say",
    "submit",
    "notice",
    "transaction",
    "got",
    "initiated",
    "robsten",
    "click",
    "transaction",
    "contract",
    "getting",
    "deployed",
    "taking",
    "time",
    "contract",
    "getting",
    "processed",
    "ethereum",
    "network",
    "get",
    "deployed",
    "able",
    "see",
    "address",
    "contract",
    "got",
    "created",
    "deployed",
    "see",
    "contract",
    "got",
    "deployed",
    "address",
    "0xcc",
    "load",
    "contract",
    "address",
    "amount",
    "actual",
    "ether",
    "spent",
    "account",
    "order",
    "deploy",
    "contract",
    "certain",
    "attributes",
    "option",
    "ether",
    "scan",
    "go",
    "check",
    "verify",
    "publish",
    "smart",
    "contract",
    "others",
    "also",
    "view",
    "code",
    "utilize",
    "smart",
    "contract",
    "go",
    "check",
    "meta",
    "mask",
    "transaction",
    "done",
    "account",
    "click",
    "take",
    "transaction",
    "opened",
    "deployed",
    "contract",
    "interact",
    "contract",
    "directly",
    "remix",
    "test",
    "contract",
    "pink",
    "members",
    "ones",
    "make",
    "changes",
    "onto",
    "blockchain",
    "blue",
    "ones",
    "ones",
    "performing",
    "read",
    "operations",
    "order",
    "read",
    "operation",
    "requested",
    "spend",
    "gas",
    "metamask",
    "requesting",
    "gas",
    "spending",
    "pink",
    "actions",
    "required",
    "spend",
    "gas",
    "requiring",
    "make",
    "changes",
    "onto",
    "blockchain",
    "example",
    "voting",
    "smart",
    "contract",
    "available",
    "link",
    "take",
    "look",
    "contracts",
    "covering",
    "subsequently",
    "deployed",
    "similar",
    "fashion",
    "robstone",
    "test",
    "net",
    "let",
    "take",
    "another",
    "example",
    "want",
    "use",
    "smart",
    "contract",
    "issue",
    "cryptocurrency",
    "called",
    "digital",
    "token",
    "use",
    "ethereum",
    "based",
    "smart",
    "contract",
    "create",
    "digital",
    "tokens",
    "performing",
    "transactions",
    "design",
    "issue",
    "digital",
    "currency",
    "create",
    "tradable",
    "computerized",
    "token",
    "utilized",
    "currency",
    "share",
    "asset",
    "want",
    "transact",
    "tokens",
    "use",
    "standard",
    "coin",
    "api",
    "like",
    "case",
    "ethereum",
    "standardizations",
    "erc20",
    "etc",
    "allows",
    "contract",
    "automatically",
    "access",
    "wallet",
    "exchange",
    "result",
    "build",
    "tradable",
    "token",
    "suffix",
    "supply",
    "particular",
    "platform",
    "becomes",
    "like",
    "central",
    "bank",
    "issuing",
    "digital",
    "money",
    "smart",
    "contract",
    "becomes",
    "bank",
    "issuing",
    "money",
    "let",
    "take",
    "example",
    "implementation",
    "erc20",
    "token",
    "specification",
    "ethereum",
    "primary",
    "attribute",
    "token",
    "need",
    "provide",
    "name",
    "token",
    "symbol",
    "decimals",
    "support",
    "primary",
    "predefined",
    "supply",
    "like",
    "economy",
    "limited",
    "supply",
    "money",
    "also",
    "define",
    "supply",
    "tokens",
    "capped",
    "supply",
    "need",
    "redefine",
    "parameters",
    "create",
    "certain",
    "data",
    "structures",
    "within",
    "solidity",
    "keep",
    "tap",
    "balances",
    "entities",
    "giving",
    "tokens",
    "much",
    "allowance",
    "want",
    "keep",
    "per",
    "address",
    "certain",
    "methods",
    "implement",
    "per",
    "erc20",
    "specification",
    "like",
    "transfer",
    "transfer",
    "approve",
    "call",
    "etc",
    "methods",
    "typical",
    "token",
    "allows",
    "transaction",
    "send",
    "receive",
    "custom",
    "token",
    "among",
    "multiple",
    "parties",
    "would",
    "also",
    "available",
    "link",
    "take",
    "look",
    "let",
    "take",
    "another",
    "example",
    "use",
    "case",
    "crowdfunding",
    "using",
    "smart",
    "contracts",
    "crowdfund",
    "project",
    "suppose",
    "want",
    "start",
    "business",
    "business",
    "need",
    "lot",
    "funding",
    "required",
    "would",
    "lend",
    "money",
    "someone",
    "trust",
    "generate",
    "money",
    "problems",
    "smart",
    "contract",
    "plays",
    "major",
    "role",
    "ethereum",
    "build",
    "smart",
    "contract",
    "hold",
    "contributor",
    "funds",
    "unless",
    "given",
    "date",
    "goal",
    "met",
    "based",
    "result",
    "funds",
    "released",
    "contract",
    "owners",
    "sent",
    "back",
    "contributors",
    "basically",
    "create",
    "crowdfunding",
    "project",
    "want",
    "raise",
    "certain",
    "amount",
    "money",
    "contributors",
    "investors",
    "give",
    "money",
    "amount",
    "kept",
    "hold",
    "till",
    "time",
    "project",
    "goal",
    "date",
    "met",
    "accordingly",
    "investor",
    "get",
    "token",
    "developed",
    "crowdfunding",
    "us",
    "account",
    "accordingly",
    "centralized",
    "crowdfunding",
    "system",
    "plenty",
    "issues",
    "management",
    "systems",
    "therefore",
    "dow",
    "decentralized",
    "autonomous",
    "organization",
    "utilized",
    "crowdfunding",
    "terms",
    "conditions",
    "transparently",
    "set",
    "contract",
    "every",
    "individual",
    "participating",
    "funding",
    "given",
    "token",
    "token",
    "credited",
    "ethereum",
    "based",
    "account",
    "every",
    "contribution",
    "gets",
    "recorded",
    "blockchain",
    "token",
    "transfer",
    "happened",
    "dow",
    "individual",
    "investor",
    "transaction",
    "get",
    "recorded",
    "blockchain",
    "network",
    "let",
    "uh",
    "quickly",
    "take",
    "look",
    "uh",
    "contract",
    "crowdsale",
    "also",
    "crowdsale",
    "contract",
    "provides",
    "basic",
    "attributes",
    "like",
    "goal",
    "funding",
    "much",
    "money",
    "need",
    "raise",
    "amount",
    "raised",
    "real",
    "time",
    "keep",
    "track",
    "deadline",
    "right",
    "price",
    "token",
    "ethereum",
    "basically",
    "token",
    "amount",
    "ethereum",
    "could",
    "might",
    "give",
    "certain",
    "tokens",
    "reward",
    "attributes",
    "reward",
    "methods",
    "order",
    "keep",
    "check",
    "received",
    "funds",
    "withdraw",
    "funds",
    "check",
    "whether",
    "reached",
    "goal",
    "funding",
    "methods",
    "transferring",
    "tokens",
    "sender",
    "account",
    "particular",
    "kind",
    "contract",
    "allows",
    "maintain",
    "keep",
    "check",
    "amount",
    "funding",
    "received",
    "want",
    "receive",
    "achieved",
    "target",
    "investors",
    "token",
    "much",
    "percentage",
    "share",
    "belongs",
    "account",
    "much",
    "percentage",
    "share",
    "already",
    "distributed",
    "amongst",
    "investors",
    "etc",
    "everything",
    "tracked",
    "smart",
    "contract",
    "build",
    "fashion",
    "methods",
    "utilities",
    "available",
    "order",
    "run",
    "entire",
    "crowdfunding",
    "contract",
    "also",
    "available",
    "link",
    "take",
    "look",
    "done",
    "saurabh",
    "teach",
    "us",
    "bitcoin",
    "mining",
    "bitcoin",
    "wallets",
    "work",
    "let",
    "get",
    "started",
    "let",
    "talk",
    "bitcoin",
    "mining",
    "bitcoin",
    "let",
    "take",
    "example",
    "someone",
    "wants",
    "send",
    "five",
    "bitcoins",
    "rachel",
    "see",
    "transaction",
    "happen",
    "bitcoin",
    "based",
    "concept",
    "digital",
    "currency",
    "anyone",
    "across",
    "globe",
    "transfer",
    "amount",
    "bitcoin",
    "irrespective",
    "geography",
    "anyone",
    "anyone",
    "basically",
    "need",
    "open",
    "account",
    "bitcoin",
    "network",
    "bitcoins",
    "transfer",
    "either",
    "purchase",
    "bitcoins",
    "online",
    "exchanges",
    "mine",
    "bitcoins",
    "account",
    "transfer",
    "someone",
    "want",
    "whose",
    "address",
    "want",
    "know",
    "transaction",
    "work",
    "well",
    "transaction",
    "done",
    "bitcoin",
    "mining",
    "go",
    "deep",
    "understand",
    "bitcoin",
    "transaction",
    "works",
    "entities",
    "involved",
    "behind",
    "scenes",
    "order",
    "maintain",
    "sanity",
    "bitcoin",
    "network",
    "make",
    "sure",
    "whomever",
    "wanted",
    "bitcoin",
    "reach",
    "reached",
    "loss",
    "bitcoin",
    "network",
    "successful",
    "transaction",
    "let",
    "understand",
    "certain",
    "basics",
    "us",
    "today",
    "need",
    "know",
    "bitcoin",
    "understand",
    "underlying",
    "technology",
    "blockchain",
    "talk",
    "see",
    "advantages",
    "bitcoin",
    "compared",
    "digital",
    "currencies",
    "digital",
    "technologies",
    "go",
    "concepts",
    "bitcoin",
    "mining",
    "bitcoin",
    "mining",
    "demo",
    "certain",
    "aspects",
    "bitcoin",
    "mining",
    "bitcoin",
    "bitcoin",
    "first",
    "decentralized",
    "digital",
    "currency",
    "allows",
    "users",
    "transfer",
    "money",
    "without",
    "intermediaries",
    "like",
    "banks",
    "governments",
    "agents",
    "brokers",
    "nothing",
    "involved",
    "done",
    "using",
    "blockchain",
    "technology",
    "saw",
    "previous",
    "example",
    "two",
    "parties",
    "wants",
    "exchange",
    "money",
    "transfer",
    "money",
    "need",
    "intermediary",
    "bitcoin",
    "used",
    "online",
    "purchases",
    "transactions",
    "used",
    "investment",
    "instrument",
    "primarily",
    "used",
    "payments",
    "buy",
    "goods",
    "services",
    "created",
    "2009",
    "came",
    "existence",
    "person",
    "group",
    "people",
    "called",
    "satoshi",
    "nakamoto",
    "bitcoin",
    "helps",
    "transferring",
    "assets",
    "faster",
    "regular",
    "fiat",
    "currencies",
    "definitely",
    "lower",
    "transaction",
    "fees",
    "removed",
    "intermediaries",
    "cost",
    "transaction",
    "also",
    "goes",
    "cryptographically",
    "secure",
    "uses",
    "cryptography",
    "infrastructure",
    "thereby",
    "identities",
    "sender",
    "receiver",
    "also",
    "secure",
    "entire",
    "transaction",
    "cryptographically",
    "signed",
    "user",
    "information",
    "transactions",
    "part",
    "networker",
    "also",
    "hidden",
    "secure",
    "advantages",
    "bitcoin",
    "allows",
    "fast",
    "quick",
    "transactions",
    "impossible",
    "counterfeit",
    "hack",
    "transactions",
    "running",
    "bitcoin",
    "network",
    "overall",
    "decentralized",
    "process",
    "centralized",
    "body",
    "controlling",
    "transactions",
    "charging",
    "fees",
    "order",
    "validate",
    "transaction",
    "participants",
    "decentralized",
    "network",
    "taking",
    "care",
    "sanity",
    "network",
    "thereby",
    "making",
    "sure",
    "overall",
    "transaction",
    "cost",
    "low",
    "information",
    "accessible",
    "public",
    "available",
    "publicly",
    "public",
    "ledger",
    "anyone",
    "go",
    "view",
    "transactions",
    "volume",
    "transactions",
    "happening",
    "bitcoin",
    "network",
    "low",
    "fee",
    "transaction",
    "comparatively",
    "low",
    "mediums",
    "channels",
    "today",
    "digital",
    "transactions",
    "made",
    "blockchain",
    "bitcoin",
    "runs",
    "underlying",
    "technology",
    "blockchain",
    "blockchain",
    "public",
    "distributed",
    "ledger",
    "transactions",
    "made",
    "bitcoins",
    "digital",
    "currency",
    "recorded",
    "chronological",
    "order",
    "let",
    "see",
    "certain",
    "features",
    "cryptographically",
    "secure",
    "signed",
    "using",
    "private",
    "key",
    "shared",
    "network",
    "public",
    "key",
    "immutable",
    "record",
    "transaction",
    "added",
    "blockchain",
    "modified",
    "altered",
    "run",
    "decentralized",
    "system",
    "centralized",
    "authority",
    "body",
    "transactions",
    "stored",
    "containers",
    "aggregated",
    "containers",
    "called",
    "blocks",
    "block",
    "smallest",
    "unit",
    "blockchain",
    "records",
    "transaction",
    "basic",
    "structure",
    "block",
    "something",
    "like",
    "four",
    "fields",
    "primary",
    "attributes",
    "block",
    "something",
    "called",
    "previous",
    "hash",
    "previous",
    "hash",
    "attribute",
    "stores",
    "value",
    "hash",
    "previous",
    "block",
    "blocks",
    "linked",
    "data",
    "aggregated",
    "set",
    "transactions",
    "included",
    "block",
    "set",
    "transactions",
    "mined",
    "validated",
    "included",
    "block",
    "nonce",
    "proof",
    "work",
    "consensus",
    "algorithm",
    "used",
    "bitcoin",
    "nonce",
    "random",
    "value",
    "used",
    "vary",
    "output",
    "hash",
    "value",
    "every",
    "block",
    "supposed",
    "generate",
    "hash",
    "value",
    "nonce",
    "parameter",
    "used",
    "generate",
    "hash",
    "value",
    "proof",
    "work",
    "process",
    "transaction",
    "verification",
    "done",
    "blockchain",
    "hash",
    "resultant",
    "hash",
    "value",
    "obtained",
    "passing",
    "previous",
    "hash",
    "value",
    "data",
    "nonce",
    "algorithm",
    "generate",
    "hash",
    "block",
    "digital",
    "signature",
    "block",
    "generated",
    "basically",
    "identity",
    "block",
    "cryptographic",
    "hash",
    "algorithm",
    "produces",
    "unique",
    "256",
    "bit",
    "alphanumeric",
    "hash",
    "value",
    "given",
    "input",
    "unique",
    "feature",
    "cryptographic",
    "algorithm",
    "whatever",
    "input",
    "give",
    "always",
    "produce",
    "hash",
    "let",
    "understand",
    "concepts",
    "bitcoin",
    "mining",
    "bitcoin",
    "mining",
    "bitcoin",
    "mining",
    "process",
    "verifying",
    "bitcoin",
    "transactions",
    "recording",
    "onto",
    "public",
    "blockchain",
    "ledger",
    "blockchain",
    "transactions",
    "verified",
    "bitcoin",
    "users",
    "basically",
    "transactions",
    "verified",
    "none",
    "participants",
    "network",
    "required",
    "hardware",
    "computing",
    "power",
    "entities",
    "called",
    "miners",
    "talking",
    "later",
    "point",
    "highlighted",
    "nothing",
    "like",
    "centralized",
    "body",
    "case",
    "legacy",
    "transactions",
    "used",
    "dependent",
    "regulatory",
    "governing",
    "body",
    "bank",
    "make",
    "transactions",
    "go",
    "bitcoin",
    "user",
    "mining",
    "hardware",
    "internet",
    "access",
    "take",
    "apart",
    "kind",
    "computer",
    "participant",
    "contribute",
    "mining",
    "community",
    "process",
    "solved",
    "based",
    "difficult",
    "mathematical",
    "puzzle",
    "called",
    "proof",
    "work",
    "every",
    "miners",
    "job",
    "solve",
    "mathematical",
    "puzzle",
    "called",
    "proof",
    "work",
    "order",
    "validate",
    "transaction",
    "earn",
    "reward",
    "miners",
    "competing",
    "amongst",
    "mine",
    "particular",
    "transaction",
    "miner",
    "first",
    "solves",
    "puzzle",
    "gets",
    "reward",
    "users",
    "trying",
    "sell",
    "puzzle",
    "said",
    "called",
    "miners",
    "participants",
    "network",
    "necessary",
    "hardware",
    "computing",
    "power",
    "transactions",
    "validate",
    "transactions",
    "validate",
    "called",
    "miners",
    "order",
    "understand",
    "bitcoin",
    "mining",
    "need",
    "understand",
    "three",
    "major",
    "concepts",
    "blockchain",
    "based",
    "distributed",
    "public",
    "ledger",
    "uses",
    "encryption",
    "algorithm",
    "proof",
    "work",
    "underlying",
    "consensus",
    "algorithm",
    "bitcoin",
    "mining",
    "distributed",
    "public",
    "ledger",
    "distributed",
    "ledger",
    "record",
    "transactions",
    "maintained",
    "blockchain",
    "network",
    "across",
    "globe",
    "network",
    "validations",
    "transaction",
    "done",
    "bitcoin",
    "users",
    "called",
    "miners",
    "blockchain",
    "prevents",
    "unauthorized",
    "access",
    "using",
    "hash",
    "function",
    "called",
    "ensure",
    "blocks",
    "kept",
    "secure",
    "digitally",
    "signed",
    "hash",
    "value",
    "generated",
    "altered",
    "seq",
    "256",
    "takes",
    "input",
    "string",
    "size",
    "returns",
    "fixed",
    "length",
    "256",
    "bit",
    "output",
    "value",
    "primary",
    "feature",
    "shf",
    "256",
    "encryption",
    "algorithm",
    "give",
    "input",
    "always",
    "give",
    "output",
    "function",
    "derive",
    "input",
    "reversally",
    "output",
    "generated",
    "third",
    "proof",
    "work",
    "blockchain",
    "mining",
    "process",
    "validate",
    "transactions",
    "solving",
    "difficult",
    "mathematical",
    "puzzle",
    "called",
    "proof",
    "work",
    "order",
    "primary",
    "objective",
    "minor",
    "determine",
    "nonce",
    "value",
    "nonce",
    "value",
    "mathematical",
    "puzzle",
    "miner",
    "required",
    "solve",
    "order",
    "generate",
    "hash",
    "less",
    "target",
    "defined",
    "network",
    "particular",
    "block",
    "bitcoin",
    "network",
    "users",
    "trying",
    "solve",
    "mathematical",
    "puzzle",
    "called",
    "minus",
    "puzzle",
    "solved",
    "varying",
    "nonce",
    "produces",
    "hash",
    "value",
    "lower",
    "predefined",
    "condition",
    "called",
    "target",
    "miners",
    "verify",
    "transactions",
    "add",
    "block",
    "blockchain",
    "confirmed",
    "verified",
    "today",
    "miners",
    "solve",
    "puzzle",
    "gets",
    "reward",
    "bitcoins",
    "block",
    "added",
    "blockchain",
    "bitcoins",
    "associate",
    "transactions",
    "spent",
    "block",
    "validated",
    "transfer",
    "bitcoins",
    "associated",
    "transactions",
    "aggregated",
    "block",
    "transfers",
    "made",
    "one",
    "account",
    "another",
    "order",
    "generate",
    "hash",
    "let",
    "see",
    "use",
    "hashing",
    "algorithm",
    "define",
    "hash",
    "value",
    "less",
    "defined",
    "condition",
    "target",
    "puzzle",
    "deemed",
    "solved",
    "keep",
    "incrementing",
    "nonce",
    "value",
    "repeat",
    "hashing",
    "function",
    "passing",
    "nonce",
    "value",
    "define",
    "generate",
    "hash",
    "value",
    "keep",
    "process",
    "till",
    "time",
    "get",
    "hash",
    "value",
    "less",
    "target",
    "let",
    "take",
    "example",
    "example",
    "beyonce",
    "wants",
    "share",
    "10",
    "bitcoin",
    "jennifer",
    "order",
    "steps",
    "beyond",
    "transaction",
    "data",
    "shared",
    "bitcoin",
    "users",
    "miners",
    "memory",
    "code",
    "transaction",
    "goes",
    "sits",
    "memory",
    "pool",
    "unmined",
    "transactions",
    "memory",
    "pool",
    "set",
    "unmined",
    "unconfirmed",
    "transactions",
    "wait",
    "verified",
    "included",
    "new",
    "block",
    "remain",
    "unconfirmed",
    "transaction",
    "pool",
    "miners",
    "competing",
    "validate",
    "transaction",
    "using",
    "proof",
    "work",
    "keep",
    "continuously",
    "pulling",
    "unconfirmed",
    "transaction",
    "pool",
    "pick",
    "transactions",
    "start",
    "validating",
    "transactions",
    "aggregate",
    "data",
    "block",
    "start",
    "validating",
    "start",
    "solving",
    "puzzle",
    "miner",
    "solves",
    "puzzle",
    "first",
    "shares",
    "result",
    "across",
    "nodes",
    "set",
    "miners",
    "block",
    "verified",
    "nonce",
    "generated",
    "nodes",
    "start",
    "granting",
    "approval",
    "maximum",
    "nodes",
    "grant",
    "approval",
    "block",
    "becomes",
    "valid",
    "added",
    "blockchain",
    "simultaneously",
    "miner",
    "solved",
    "puzzle",
    "also",
    "receive",
    "reward",
    "meanwhile",
    "bitcoin",
    "today",
    "stands",
    "98k",
    "around",
    "dollars",
    "bitcoins",
    "10",
    "btc",
    "transaction",
    "initiated",
    "get",
    "triggered",
    "get",
    "transferred",
    "beyond",
    "jennifer",
    "let",
    "take",
    "look",
    "certain",
    "facts",
    "proof",
    "work",
    "predefined",
    "condition",
    "target",
    "adjusted",
    "every",
    "2016",
    "block",
    "approximately",
    "every",
    "14",
    "days",
    "average",
    "time",
    "mine",
    "block",
    "10",
    "minutes",
    "basically",
    "target",
    "keeps",
    "automatically",
    "adjusting",
    "keep",
    "block",
    "generation",
    "within",
    "10",
    "minute",
    "time",
    "frame",
    "representation",
    "order",
    "keep",
    "time",
    "frame",
    "block",
    "generation",
    "within",
    "10",
    "minutes",
    "target",
    "keeps",
    "adjusting",
    "difficulty",
    "puzzle",
    "changes",
    "target",
    "changes",
    "depending",
    "time",
    "takes",
    "mine",
    "block",
    "difficulty",
    "block",
    "generated",
    "hash",
    "target",
    "first",
    "block",
    "divided",
    "hash",
    "target",
    "current",
    "block",
    "difficulty",
    "changed",
    "every",
    "2016",
    "blocks",
    "basically",
    "hard",
    "generate",
    "proof",
    "work",
    "easy",
    "verify",
    "miners",
    "solved",
    "puzzle",
    "broadcasted",
    "yes",
    "earned",
    "validated",
    "record",
    "determined",
    "puzzle",
    "miners",
    "easy",
    "verify",
    "done",
    "give",
    "consensus",
    "majority",
    "block",
    "gets",
    "validated",
    "gets",
    "added",
    "blockchain",
    "since",
    "difficulty",
    "depends",
    "hash",
    "target",
    "value",
    "keep",
    "changing",
    "every",
    "2016",
    "block",
    "said",
    "see",
    "due",
    "course",
    "day",
    "inception",
    "bitcoin",
    "2009",
    "till",
    "today",
    "difficulty",
    "increased",
    "exponentially",
    "increasing",
    "thereby",
    "entire",
    "effort",
    "mining",
    "computing",
    "power",
    "also",
    "increasing",
    "resources",
    "required",
    "mining",
    "2009",
    "require",
    "hashing",
    "power",
    "computing",
    "power",
    "order",
    "mining",
    "today",
    "someone",
    "tries",
    "hack",
    "data",
    "let",
    "see",
    "blockchain",
    "chain",
    "blocks",
    "abc",
    "block",
    "solved",
    "puzzle",
    "generated",
    "hash",
    "value",
    "identifier",
    "suppose",
    "person",
    "tries",
    "tamper",
    "block",
    "block",
    "b",
    "tries",
    "change",
    "data",
    "aggregated",
    "block",
    "data",
    "block",
    "change",
    "hash",
    "value",
    "digital",
    "signature",
    "block",
    "also",
    "change",
    "thereby",
    "corrupt",
    "chain",
    "subsequent",
    "basically",
    "blocks",
    "ahead",
    "block",
    "b",
    "get",
    "dealing",
    "previous",
    "hash",
    "value",
    "block",
    "c",
    "remain",
    "valid",
    "order",
    "hacker",
    "make",
    "entire",
    "blockchain",
    "valid",
    "block",
    "b",
    "changed",
    "change",
    "hash",
    "value",
    "blocks",
    "ahead",
    "block",
    "b",
    "require",
    "huge",
    "huge",
    "amount",
    "computing",
    "power",
    "next",
    "impossible",
    "see",
    "results",
    "following",
    "block",
    "invalid",
    "whole",
    "thing",
    "blockchain",
    "making",
    "sure",
    "entire",
    "sequence",
    "remains",
    "prevent",
    "data",
    "modification",
    "let",
    "see",
    "underlying",
    "hardware",
    "requirements",
    "bitcoin",
    "mining",
    "hardware",
    "evolved",
    "early",
    "days",
    "miners",
    "used",
    "solve",
    "puzzles",
    "using",
    "regular",
    "processors",
    "controlling",
    "processor",
    "unit",
    "cpus",
    "used",
    "take",
    "lot",
    "time",
    "mining",
    "though",
    "difficulty",
    "levels",
    "low",
    "still",
    "used",
    "take",
    "lot",
    "time",
    "said",
    "difficulties",
    "never",
    "keep",
    "changing",
    "growing",
    "miners",
    "also",
    "increase",
    "processing",
    "power",
    "discovered",
    "graphical",
    "processing",
    "units",
    "gpus",
    "proved",
    "efficient",
    "regular",
    "cpus",
    "also",
    "drawback",
    "consumption",
    "electricity",
    "miner",
    "calculate",
    "return",
    "investment",
    "hardware",
    "also",
    "accommodate",
    "cost",
    "electricity",
    "resources",
    "going",
    "order",
    "mining",
    "finally",
    "today",
    "using",
    "hardware",
    "called",
    "asic",
    "application",
    "specific",
    "integrated",
    "circuit",
    "specifically",
    "introduced",
    "mining",
    "consumes",
    "less",
    "power",
    "higher",
    "computing",
    "power",
    "better",
    "hardware",
    "mining",
    "miners",
    "profitable",
    "cost",
    "resources",
    "mine",
    "one",
    "block",
    "less",
    "price",
    "reward",
    "receive",
    "definitely",
    "investment",
    "less",
    "reward",
    "today",
    "blockchain",
    "miners",
    "use",
    "resources",
    "verify",
    "transaction",
    "time",
    "block",
    "mined",
    "new",
    "bitcoins",
    "created",
    "network",
    "bitcoin",
    "total",
    "supply",
    "limited",
    "21",
    "million",
    "dollars",
    "approximately",
    "21",
    "million",
    "bitcoin",
    "supply",
    "17",
    "18",
    "million",
    "bitcoins",
    "already",
    "mined",
    "three",
    "four",
    "million",
    "left",
    "today",
    "reward",
    "bitcoin",
    "given",
    "miner",
    "transaction",
    "verification",
    "bitcoin",
    "mining",
    "reward",
    "goes",
    "huffing",
    "principle",
    "reward",
    "given",
    "miner",
    "half",
    "every",
    "210",
    "000",
    "blocks",
    "approximately",
    "every",
    "four",
    "years",
    "threshold",
    "reached",
    "bitcoin",
    "reward",
    "go",
    "bitcoins",
    "let",
    "take",
    "example",
    "lottery",
    "ticket",
    "chances",
    "winning",
    "difficult",
    "talking",
    "bitcoin",
    "mining",
    "pool",
    "chances",
    "winning",
    "lottery",
    "difficult",
    "community",
    "individuals",
    "buy",
    "multiple",
    "lottery",
    "tickets",
    "pool",
    "tickets",
    "together",
    "increase",
    "probability",
    "chances",
    "winning",
    "suppose",
    "lottery",
    "based",
    "contribution",
    "reward",
    "distributed",
    "among",
    "participants",
    "bitcoin",
    "mining",
    "pool",
    "similar",
    "thing",
    "process",
    "multiple",
    "nodes",
    "share",
    "resources",
    "together",
    "mine",
    "block",
    "block",
    "solved",
    "miners",
    "split",
    "reward",
    "equally",
    "based",
    "amount",
    "processing",
    "power",
    "invested",
    "takes",
    "pool",
    "members",
    "generate",
    "final",
    "hash",
    "value",
    "checks",
    "much",
    "amount",
    "work",
    "contributed",
    "pool",
    "member",
    "result",
    "bitcoin",
    "reward",
    "gets",
    "distributed",
    "proportionally",
    "amongst",
    "participants",
    "let",
    "take",
    "look",
    "demo",
    "see",
    "bitcoin",
    "reward",
    "actual",
    "block",
    "bitcoin",
    "network",
    "see",
    "block",
    "block",
    "reward",
    "bitcoin",
    "block",
    "mined",
    "block",
    "number",
    "set",
    "transactions",
    "part",
    "block",
    "block",
    "mined",
    "miner",
    "transactions",
    "done",
    "transfers",
    "bitcoin",
    "one",
    "account",
    "nonce",
    "generated",
    "miner",
    "mining",
    "pool",
    "order",
    "mine",
    "block",
    "attributes",
    "take",
    "look",
    "url",
    "example",
    "mining",
    "pool",
    "demo",
    "account",
    "participants",
    "shared",
    "mining",
    "resources",
    "mining",
    "pool",
    "see",
    "reward",
    "mining",
    "unconfirmed",
    "reward",
    "confirmed",
    "reward",
    "already",
    "validated",
    "earned",
    "far",
    "let",
    "see",
    "store",
    "us",
    "today",
    "today",
    "gon",
    "na",
    "understand",
    "need",
    "blockchain",
    "wallet",
    "blockchain",
    "wallet",
    "wallet",
    "work",
    "different",
    "types",
    "blockchain",
    "wallets",
    "comparisons",
    "demo",
    "usage",
    "blockchain",
    "wallets",
    "try",
    "certain",
    "transactions",
    "using",
    "wallets",
    "blockchain",
    "wallets",
    "came",
    "existence",
    "means",
    "order",
    "us",
    "transactions",
    "drawbacks",
    "old",
    "days",
    "transactions",
    "whatever",
    "medium",
    "channels",
    "problems",
    "transactions",
    "slow",
    "banks",
    "central",
    "point",
    "failure",
    "basically",
    "transaction",
    "go",
    "go",
    "intermediary",
    "channels",
    "pass",
    "certain",
    "intermediaries",
    "like",
    "bank",
    "makes",
    "single",
    "point",
    "failure",
    "also",
    "issues",
    "keeping",
    "track",
    "accounts",
    "balances",
    "data",
    "get",
    "jeopardized",
    "manipulated",
    "even",
    "get",
    "corrupted",
    "across",
    "multiple",
    "systems",
    "accounts",
    "balances",
    "maintained",
    "comes",
    "existence",
    "called",
    "blockchain",
    "wallet",
    "blockchain",
    "wallet",
    "blockchain",
    "wallet",
    "cryptocurrency",
    "wallet",
    "allows",
    "users",
    "manage",
    "different",
    "kind",
    "cryptocurrencies",
    "example",
    "bitcoin",
    "ethereum",
    "etc",
    "blockchain",
    "wallet",
    "helps",
    "exchanging",
    "funds",
    "easily",
    "transactions",
    "secure",
    "cryptographically",
    "signed",
    "wallet",
    "accessible",
    "web",
    "mobile",
    "devices",
    "privacy",
    "identity",
    "user",
    "maintained",
    "therefore",
    "blockchain",
    "wallet",
    "provides",
    "features",
    "necessary",
    "safe",
    "secure",
    "transfer",
    "exchange",
    "funds",
    "different",
    "parties",
    "blockchain",
    "wallet",
    "typical",
    "cryptocurrency",
    "wallet",
    "allows",
    "users",
    "manage",
    "cryptocurrencies",
    "similar",
    "process",
    "sending",
    "receiving",
    "money",
    "paypal",
    "gateway",
    "use",
    "today",
    "use",
    "cryptocurrency",
    "instead",
    "similar",
    "paypal",
    "using",
    "making",
    "transactions",
    "fiat",
    "currency",
    "let",
    "take",
    "look",
    "ecosystem",
    "blockchain",
    "wallets",
    "certain",
    "examples",
    "like",
    "electrum",
    "jaxx",
    "mycelium",
    "samurai",
    "bitcoin",
    "paper",
    "wallet",
    "name",
    "blockchain",
    "wallets",
    "existing",
    "market",
    "many",
    "based",
    "requirement",
    "based",
    "security",
    "require",
    "based",
    "kind",
    "wallet",
    "suffices",
    "need",
    "see",
    "categorizations",
    "kind",
    "wallets",
    "blockchain",
    "wallets",
    "work",
    "let",
    "take",
    "look",
    "move",
    "blockchain",
    "wallets",
    "work",
    "let",
    "understand",
    "private",
    "public",
    "key",
    "keys",
    "related",
    "blockchain",
    "wallet",
    "whenever",
    "create",
    "blockchain",
    "wallet",
    "also",
    "provided",
    "private",
    "public",
    "key",
    "associated",
    "wallet",
    "let",
    "check",
    "example",
    "order",
    "understand",
    "imagine",
    "person",
    "knowing",
    "email",
    "address",
    "sending",
    "email",
    "regular",
    "day",
    "day",
    "activity",
    "want",
    "receive",
    "email",
    "someone",
    "give",
    "email",
    "id",
    "expect",
    "email",
    "unknown",
    "person",
    "able",
    "send",
    "emails",
    "account",
    "giving",
    "email",
    "address",
    "receiving",
    "email",
    "disclosing",
    "email",
    "id",
    "assuming",
    "someone",
    "able",
    "send",
    "emails",
    "account",
    "aware",
    "email",
    "account",
    "password",
    "knowing",
    "email",
    "address",
    "give",
    "person",
    "ability",
    "send",
    "email",
    "account",
    "giving",
    "password",
    "person",
    "send",
    "email",
    "giving",
    "email",
    "address",
    "send",
    "email",
    "particular",
    "email",
    "address",
    "individual",
    "aware",
    "password",
    "associated",
    "blockchain",
    "wallet",
    "follows",
    "similar",
    "process",
    "using",
    "public",
    "key",
    "private",
    "key",
    "together",
    "public",
    "key",
    "similar",
    "email",
    "address",
    "basically",
    "whenever",
    "wallet",
    "generated",
    "public",
    "key",
    "generated",
    "share",
    "public",
    "key",
    "anyone",
    "order",
    "receive",
    "funds",
    "private",
    "key",
    "top",
    "secret",
    "similar",
    "password",
    "get",
    "hacked",
    "disclose",
    "anyone",
    "use",
    "private",
    "key",
    "spend",
    "funds",
    "instead",
    "sending",
    "email",
    "imagine",
    "want",
    "transfer",
    "money",
    "friend",
    "transfer",
    "process",
    "done",
    "blockchain",
    "wallet",
    "blockchain",
    "wallets",
    "send",
    "receive",
    "cryptocurrencies",
    "said",
    "blockchain",
    "wallet",
    "two",
    "keys",
    "public",
    "key",
    "private",
    "key",
    "public",
    "key",
    "shared",
    "everyone",
    "like",
    "email",
    "address",
    "private",
    "key",
    "like",
    "password",
    "kept",
    "secret",
    "sender",
    "blockchain",
    "wallet",
    "one",
    "able",
    "send",
    "crypto",
    "coins",
    "like",
    "emails",
    "public",
    "key",
    "know",
    "private",
    "key",
    "someone",
    "gets",
    "access",
    "private",
    "key",
    "high",
    "possibility",
    "account",
    "hacked",
    "might",
    "end",
    "losing",
    "cryptocurrency",
    "deposits",
    "account",
    "let",
    "take",
    "look",
    "typical",
    "features",
    "blockchain",
    "wallet",
    "easy",
    "use",
    "like",
    "software",
    "wallet",
    "use",
    "transactions",
    "highly",
    "secure",
    "matter",
    "securing",
    "private",
    "key",
    "allows",
    "instant",
    "transactions",
    "across",
    "geographies",
    "barrier",
    "free",
    "without",
    "intermediaries",
    "also",
    "transactions",
    "charges",
    "low",
    "cost",
    "fee",
    "wallets",
    "help",
    "transactions",
    "across",
    "multiple",
    "cryptocurrencies",
    "make",
    "payments",
    "across",
    "cryptocurrencies",
    "helps",
    "easy",
    "currency",
    "conversions",
    "let",
    "talk",
    "different",
    "type",
    "blockchain",
    "wallets",
    "basically",
    "two",
    "types",
    "blockchain",
    "wallets",
    "based",
    "private",
    "keys",
    "one",
    "hot",
    "wallet",
    "another",
    "cold",
    "wallet",
    "hot",
    "wallets",
    "like",
    "normal",
    "wallets",
    "carry",
    "transactions",
    "wallets",
    "cold",
    "wallets",
    "cold",
    "wallets",
    "similar",
    "vault",
    "cryptocurrencies",
    "stored",
    "high",
    "level",
    "security",
    "let",
    "take",
    "look",
    "differences",
    "hot",
    "wallets",
    "online",
    "wallets",
    "cryptocurrencies",
    "transferred",
    "quickly",
    "available",
    "online",
    "internet",
    "example",
    "coinbase",
    "cold",
    "wallets",
    "digital",
    "offline",
    "wallets",
    "transactions",
    "signed",
    "offline",
    "later",
    "disclosed",
    "online",
    "maintained",
    "cloud",
    "internet",
    "maintained",
    "offline",
    "high",
    "security",
    "examples",
    "cold",
    "wallet",
    "trezor",
    "ledger",
    "case",
    "hot",
    "wallets",
    "private",
    "keys",
    "stored",
    "cloud",
    "faster",
    "transfer",
    "case",
    "cold",
    "wallets",
    "private",
    "keys",
    "stored",
    "separate",
    "hardware",
    "disconnected",
    "internet",
    "cloud",
    "stored",
    "paper",
    "based",
    "document",
    "hot",
    "wallet",
    "easy",
    "access",
    "available",
    "online",
    "24",
    "accessed",
    "desktop",
    "mobile",
    "risk",
    "unrecoverable",
    "theft",
    "hacked",
    "cold",
    "wallets",
    "method",
    "transaction",
    "helps",
    "protecting",
    "wallet",
    "unauthorized",
    "access",
    "hacking",
    "online",
    "vulnerabilities",
    "wallet",
    "distinguished",
    "criterias",
    "software",
    "wallets",
    "hardware",
    "wallets",
    "like",
    "kind",
    "usb",
    "driven",
    "plug",
    "usb",
    "drive",
    "hardware",
    "wallet",
    "used",
    "typical",
    "paper",
    "based",
    "wallet",
    "print",
    "public",
    "key",
    "private",
    "key",
    "paper",
    "keep",
    "secure",
    "place",
    "let",
    "talk",
    "software",
    "wallet",
    "software",
    "wallet",
    "application",
    "downloaded",
    "device",
    "either",
    "could",
    "desktop",
    "mobile",
    "could",
    "wallet",
    "accessed",
    "online",
    "certain",
    "examples",
    "dax",
    "bread",
    "wallet",
    "copay",
    "popular",
    "software",
    "wallets",
    "software",
    "wallet",
    "categorized",
    "desktop",
    "wallet",
    "online",
    "call",
    "web",
    "wallets",
    "mobile",
    "wallets",
    "desktop",
    "wallets",
    "like",
    "cold",
    "wallets",
    "private",
    "keys",
    "stored",
    "cold",
    "servers",
    "basically",
    "desktop",
    "wallets",
    "private",
    "keys",
    "stored",
    "desktop",
    "unplug",
    "internet",
    "offline",
    "transactions",
    "bring",
    "back",
    "online",
    "case",
    "main",
    "server",
    "lost",
    "cold",
    "server",
    "basically",
    "desktop",
    "used",
    "backup",
    "server",
    "wallets",
    "downloaded",
    "computer",
    "accessed",
    "system",
    "installed",
    "make",
    "sure",
    "desktop",
    "machine",
    "downloaded",
    "desktop",
    "wallet",
    "safe",
    "backup",
    "maintaining",
    "hardware",
    "letting",
    "machine",
    "go",
    "anywhere",
    "secure",
    "location",
    "wallets",
    "definitely",
    "cost",
    "efficient",
    "one",
    "examples",
    "electrum",
    "one",
    "popular",
    "desktop",
    "wallet",
    "online",
    "wallets",
    "kind",
    "hot",
    "wallets",
    "run",
    "cloud",
    "available",
    "internet",
    "users",
    "benefit",
    "accessing",
    "wallets",
    "across",
    "device",
    "could",
    "tablet",
    "desktop",
    "use",
    "mobile",
    "browser",
    "private",
    "keys",
    "stored",
    "online",
    "managed",
    "third",
    "party",
    "dependent",
    "third",
    "party",
    "service",
    "example",
    "green",
    "address",
    "bitcoin",
    "wallet",
    "available",
    "web",
    "android",
    "app",
    "available",
    "desktop",
    "also",
    "available",
    "ios",
    "apple",
    "mobile",
    "wallets",
    "mobile",
    "wallets",
    "like",
    "similar",
    "online",
    "wallets",
    "except",
    "built",
    "mobile",
    "phone",
    "usage",
    "accessibility",
    "wallets",
    "also",
    "user",
    "friendly",
    "user",
    "friendly",
    "interface",
    "helps",
    "transactions",
    "easily",
    "example",
    "mycelium",
    "best",
    "available",
    "mobile",
    "wallet",
    "hardware",
    "wallet",
    "hardware",
    "wallet",
    "type",
    "cold",
    "storage",
    "device",
    "typically",
    "like",
    "usb",
    "stores",
    "user",
    "private",
    "key",
    "protected",
    "hardware",
    "device",
    "wallets",
    "similar",
    "portable",
    "devices",
    "connected",
    "computer",
    "plugged",
    "said",
    "earlier",
    "less",
    "prone",
    "malware",
    "attacks",
    "malicious",
    "attacks",
    "hack",
    "proof",
    "examples",
    "nano",
    "ledger",
    "trezor",
    "kiki",
    "top",
    "hardware",
    "wallets",
    "available",
    "market",
    "make",
    "transaction",
    "hardware",
    "wallet",
    "ensure",
    "hardware",
    "wallet",
    "plugged",
    "computer",
    "system",
    "transaction",
    "hardware",
    "wallet",
    "paper",
    "wallet",
    "paper",
    "wallet",
    "offline",
    "process",
    "storing",
    "cryptocurrencies",
    "wallet",
    "printed",
    "paper",
    "consisting",
    "private",
    "key",
    "public",
    "key",
    "accessed",
    "using",
    "qr",
    "code",
    "since",
    "wallets",
    "safe",
    "widely",
    "used",
    "storing",
    "large",
    "amount",
    "cryptocurrencies",
    "example",
    "bitcoin",
    "paper",
    "wallet",
    "ether",
    "wallet",
    "one",
    "widely",
    "used",
    "paper",
    "wallets",
    "question",
    "arises",
    "add",
    "cryptocurrency",
    "paper",
    "wallet",
    "order",
    "make",
    "transaction",
    "paper",
    "wallet",
    "paper",
    "wallet",
    "works",
    "software",
    "wallets",
    "online",
    "wallets",
    "transfer",
    "funds",
    "software",
    "wallet",
    "public",
    "address",
    "shown",
    "paper",
    "wallet",
    "basically",
    "first",
    "park",
    "funds",
    "software",
    "wallet",
    "transfer",
    "funds",
    "software",
    "wallet",
    "public",
    "address",
    "printed",
    "paper",
    "wallet",
    "let",
    "comparison",
    "blocked",
    "info",
    "blockchain",
    "info",
    "cryptocurrency",
    "wallet",
    "supports",
    "bitcoin",
    "ethereum",
    "easy",
    "use",
    "low",
    "transaction",
    "fee",
    "apis",
    "exposed",
    "easily",
    "use",
    "order",
    "make",
    "custom",
    "wallets",
    "also",
    "ledger",
    "nano",
    "ledger",
    "nano",
    "hardware",
    "wallet",
    "offers",
    "high",
    "security",
    "account",
    "available",
    "bitcoin",
    "ethereum",
    "litecoin",
    "users",
    "also",
    "possible",
    "maintain",
    "multiple",
    "accounts",
    "access",
    "anytime",
    "bitcoin",
    "paper",
    "wallet",
    "paper",
    "wallet",
    "helps",
    "print",
    "tamper",
    "resistant",
    "bitcoin",
    "wallet",
    "minimizes",
    "threat",
    "hacking",
    "jacks",
    "jax",
    "software",
    "wallet",
    "enables",
    "user",
    "exchange",
    "currencies",
    "within",
    "wallet",
    "available",
    "bitcoin",
    "ethereum",
    "litecoin",
    "many",
    "cryptocurrencies",
    "jax",
    "user",
    "view",
    "updated",
    "balance",
    "soon",
    "processing",
    "complete",
    "let",
    "take",
    "look",
    "certain",
    "demos",
    "different",
    "kind",
    "wallets",
    "talked",
    "let",
    "first",
    "take",
    "example",
    "paper",
    "wallet",
    "bit",
    "address",
    "dot",
    "org",
    "provides",
    "paper",
    "wallet",
    "uses",
    "client",
    "side",
    "javascript",
    "order",
    "generate",
    "random",
    "hash",
    "wallet",
    "keep",
    "moving",
    "mouse",
    "generate",
    "hash",
    "public",
    "private",
    "key",
    "recommended",
    "process",
    "disconnected",
    "internet",
    "keys",
    "generated",
    "print",
    "keep",
    "secure",
    "clear",
    "cache",
    "browser",
    "see",
    "screen",
    "public",
    "key",
    "receiving",
    "bitcoins",
    "private",
    "key",
    "spend",
    "print",
    "keep",
    "handy",
    "course",
    "safety",
    "physical",
    "documents",
    "entirely",
    "guaranteed",
    "hacker",
    "discovers",
    "location",
    "paper",
    "wallet",
    "physically",
    "steals",
    "access",
    "bitcoin",
    "holdings",
    "basically",
    "high",
    "importance",
    "keep",
    "paper",
    "wallet",
    "secure",
    "location",
    "users",
    "hide",
    "disguise",
    "paper",
    "wallet",
    "protected",
    "physical",
    "damage",
    "keys",
    "fade",
    "longer",
    "scanned",
    "user",
    "never",
    "able",
    "access",
    "bitcoin",
    "parked",
    "address",
    "also",
    "take",
    "care",
    "using",
    "incorrect",
    "type",
    "printer",
    "also",
    "may",
    "damage",
    "paper",
    "wallet",
    "let",
    "take",
    "look",
    "second",
    "example",
    "online",
    "wallet",
    "taking",
    "example",
    "bitpay",
    "download",
    "bitpay",
    "online",
    "create",
    "account",
    "create",
    "personal",
    "wallet",
    "create",
    "shared",
    "wallet",
    "joint",
    "share",
    "wallet",
    "create",
    "wallet",
    "like",
    "see",
    "example",
    "personal",
    "wallet",
    "test",
    "bitcoins",
    "order",
    "receive",
    "test",
    "bitcoins",
    "account",
    "receive",
    "test",
    "bitcoins",
    "testnet",
    "dot",
    "coin",
    "faucet",
    "dot",
    "eu",
    "hyphen",
    "order",
    "receive",
    "need",
    "copy",
    "bitcoin",
    "address",
    "testnet",
    "address",
    "test",
    "net",
    "given",
    "bitcoin",
    "balance",
    "increased",
    "see",
    "transaction",
    "see",
    "three",
    "minutes",
    "ago",
    "received",
    "bitcoin",
    "transaction",
    "still",
    "process",
    "transaction",
    "getting",
    "mined",
    "test",
    "net",
    "receive",
    "received",
    "even",
    "make",
    "transaction",
    "send",
    "someone",
    "personal",
    "account",
    "send",
    "bitcoin",
    "someone",
    "whose",
    "bitcoin",
    "address",
    "paste",
    "transfer",
    "bitcoin",
    "wallet",
    "either",
    "select",
    "one",
    "wallets",
    "search",
    "bitcoin",
    "address",
    "someone",
    "shared",
    "send",
    "particular",
    "address",
    "let",
    "take",
    "example",
    "hardware",
    "wallet",
    "hardware",
    "wallet",
    "works",
    "online",
    "wallets",
    "metamask",
    "feature",
    "connecting",
    "hardware",
    "wallet",
    "metamask",
    "installed",
    "see",
    "option",
    "connect",
    "hardware",
    "wallet",
    "metamask",
    "provided",
    "support",
    "trezor",
    "connect",
    "hardware",
    "wallet",
    "usb",
    "computer",
    "select",
    "account",
    "want",
    "view",
    "particular",
    "hardware",
    "wallet",
    "choose",
    "one",
    "time",
    "start",
    "using",
    "particular",
    "wallet",
    "decentralized",
    "apps",
    "basically",
    "hardware",
    "connected",
    "integrated",
    "meta",
    "mask",
    "start",
    "running",
    "decentralized",
    "apps",
    "start",
    "using",
    "tokens",
    "currency",
    "particular",
    "hardware",
    "wallet",
    "use",
    "hardware",
    "account",
    "like",
    "would",
    "ethereum",
    "account",
    "log",
    "dapps",
    "send",
    "ethereums",
    "buy",
    "store",
    "erc20",
    "tokens",
    "tokens",
    "like",
    "cryptokitties",
    "click",
    "connect",
    "trezor",
    "metamask",
    "start",
    "looking",
    "connected",
    "treasure",
    "device",
    "thank",
    "fascinating",
    "session",
    "saurabh",
    "let",
    "us",
    "learn",
    "blockchain",
    "ethereum",
    "different",
    "one",
    "another",
    "tell",
    "10",
    "things",
    "probably",
    "know",
    "bitcoin",
    "applications",
    "blockchain",
    "become",
    "blockchain",
    "developer",
    "today",
    "going",
    "talk",
    "bitcoin",
    "versus",
    "ethereum",
    "get",
    "let",
    "see",
    "nobel",
    "prize",
    "winner",
    "economics",
    "milton",
    "friedman",
    "say",
    "1999",
    "believed",
    "internet",
    "going",
    "one",
    "major",
    "forces",
    "reducing",
    "role",
    "government",
    "also",
    "believed",
    "one",
    "thing",
    "missing",
    "reliable",
    "electronic",
    "cash",
    "like",
    "predicted",
    "2009",
    "cryptocurrency",
    "bitcoin",
    "born",
    "exactly",
    "cryptocurrency",
    "cryptocurrency",
    "works",
    "similar",
    "normal",
    "currency",
    "works",
    "normal",
    "currency",
    "could",
    "dollar",
    "euro",
    "pound",
    "yen",
    "rupees",
    "form",
    "currency",
    "cryptocurrency",
    "falls",
    "banner",
    "normal",
    "currency",
    "normal",
    "currency",
    "also",
    "known",
    "fiat",
    "currency",
    "major",
    "difference",
    "cryptocurrencies",
    "fiat",
    "currencies",
    "cryptocurrencies",
    "decentralized",
    "mean",
    "means",
    "cryptocurrencies",
    "central",
    "authority",
    "controlling",
    "example",
    "bank",
    "government",
    "regulate",
    "cryptocurrency",
    "works",
    "way",
    "cryptocurrency",
    "works",
    "democratic",
    "fashion",
    "change",
    "needs",
    "take",
    "place",
    "done",
    "majority",
    "people",
    "using",
    "cryptocurrency",
    "agree",
    "cryptocurrencies",
    "fiat",
    "currencies",
    "similar",
    "created",
    "medium",
    "exchange",
    "however",
    "similarity",
    "ends",
    "cryptocurrencies",
    "third",
    "parties",
    "involved",
    "example",
    "fiat",
    "currencies",
    "banks",
    "money",
    "lenders",
    "governments",
    "cryptocurrencies",
    "cryptographic",
    "functions",
    "ensure",
    "transactions",
    "kept",
    "secure",
    "bitcoin",
    "uses",
    "algorithm",
    "ensure",
    "transactions",
    "kept",
    "secure",
    "importantly",
    "cryptocurrencies",
    "use",
    "blockchain",
    "blockchain",
    "set",
    "records",
    "placed",
    "container",
    "known",
    "block",
    "transactions",
    "kept",
    "public",
    "chronological",
    "order",
    "bitcoin",
    "bitcoin",
    "released",
    "2009",
    "still",
    "unknown",
    "satoshi",
    "nakamoto",
    "cryptocurrency",
    "decentralized",
    "means",
    "central",
    "authority",
    "controls",
    "works",
    "works",
    "using",
    "encryption",
    "techniques",
    "like",
    "algorithm",
    "help",
    "people",
    "send",
    "receive",
    "money",
    "across",
    "world",
    "mentioned",
    "payments",
    "secured",
    "using",
    "cryptography",
    "important",
    "point",
    "bitcoin",
    "helps",
    "keep",
    "identity",
    "people",
    "sending",
    "receiving",
    "money",
    "anonymous",
    "transaction",
    "fee",
    "also",
    "low",
    "know",
    "perform",
    "transaction",
    "bank",
    "amount",
    "money",
    "service",
    "charge",
    "levied",
    "us",
    "however",
    "bitcoin",
    "value",
    "low",
    "ether",
    "ethereum",
    "ethereum",
    "created",
    "2015",
    "vitalik",
    "buterin",
    "cryptocurrency",
    "provides",
    "ether",
    "tokens",
    "equivalent",
    "bitcoins",
    "find",
    "bitcoin",
    "network",
    "ether",
    "used",
    "users",
    "build",
    "deploy",
    "decentralized",
    "applications",
    "applications",
    "whose",
    "code",
    "placed",
    "distributed",
    "network",
    "different",
    "regular",
    "application",
    "backend",
    "code",
    "placed",
    "centralized",
    "server",
    "case",
    "ether",
    "also",
    "used",
    "pay",
    "services",
    "like",
    "computational",
    "power",
    "required",
    "block",
    "added",
    "blockchain",
    "transaction",
    "fees",
    "ether",
    "also",
    "works",
    "similar",
    "bitcoin",
    "works",
    "used",
    "payments",
    "ether",
    "also",
    "used",
    "create",
    "smart",
    "contracts",
    "smart",
    "contracts",
    "work",
    "way",
    "certain",
    "set",
    "predefined",
    "rules",
    "satisfied",
    "particular",
    "output",
    "takes",
    "place",
    "interested",
    "learning",
    "smart",
    "contracts",
    "suggest",
    "click",
    "top",
    "right",
    "corner",
    "watch",
    "smart",
    "contract",
    "video",
    "thing",
    "waiting",
    "bitcoin",
    "versus",
    "ethereum",
    "one",
    "side",
    "bitcoin",
    "bitcoin",
    "proven",
    "popular",
    "cryptocurrency",
    "among",
    "everyone",
    "world",
    "also",
    "highest",
    "market",
    "cap",
    "among",
    "cryptocurrencies",
    "available",
    "right",
    "way",
    "current",
    "world",
    "champion",
    "comes",
    "cryptocurrencies",
    "side",
    "underdog",
    "ethereum",
    "ethereum",
    "revolutionary",
    "effect",
    "bitcoin",
    "learned",
    "bitcoin",
    "produced",
    "functionalities",
    "concepts",
    "bitcoin",
    "second",
    "valuable",
    "cryptocurrency",
    "market",
    "right",
    "way",
    "fight",
    "underdog",
    "world",
    "champion",
    "think",
    "win",
    "let",
    "understand",
    "bitcoin",
    "ethereum",
    "different",
    "bitcoin",
    "first",
    "cryptocurrency",
    "ever",
    "created",
    "released",
    "2009",
    "group",
    "people",
    "person",
    "known",
    "satoshi",
    "nakamoto",
    "one",
    "really",
    "knows",
    "person",
    "alive",
    "dead",
    "however",
    "technology",
    "came",
    "concept",
    "blockchain",
    "still",
    "revolutionizing",
    "institutions",
    "around",
    "world",
    "side",
    "ethereum",
    "released",
    "2015",
    "researcher",
    "programmer",
    "named",
    "vitalik",
    "buterin",
    "vitalik",
    "used",
    "concepts",
    "blockchain",
    "bitcoin",
    "improved",
    "upon",
    "providing",
    "lot",
    "functionality",
    "creating",
    "ethereum",
    "platform",
    "distributed",
    "applications",
    "smart",
    "contracts",
    "bitcoin",
    "enables",
    "transactions",
    "bitcoin",
    "case",
    "acts",
    "replacement",
    "fiat",
    "currencies",
    "removes",
    "problems",
    "associated",
    "fiat",
    "currencies",
    "starters",
    "pay",
    "high",
    "transaction",
    "fees",
    "transaction",
    "time",
    "also",
    "centralized",
    "authority",
    "regulates",
    "bitcoins",
    "work",
    "hand",
    "ethereum",
    "enables",
    "transactions",
    "also",
    "provides",
    "platform",
    "creating",
    "building",
    "smart",
    "contracts",
    "distributed",
    "applications",
    "smart",
    "contract",
    "allows",
    "users",
    "exchange",
    "anything",
    "value",
    "shares",
    "money",
    "real",
    "estate",
    "bitcoin",
    "miners",
    "able",
    "validate",
    "transactions",
    "method",
    "known",
    "proof",
    "work",
    "ethereum",
    "well",
    "proof",
    "work",
    "involves",
    "miners",
    "around",
    "world",
    "trying",
    "solve",
    "complicated",
    "mathematical",
    "puzzle",
    "first",
    "one",
    "add",
    "block",
    "blockchain",
    "ethereum",
    "however",
    "moving",
    "something",
    "known",
    "concept",
    "works",
    "way",
    "person",
    "mine",
    "validate",
    "transactions",
    "block",
    "based",
    "many",
    "coins",
    "owns",
    "amount",
    "coins",
    "person",
    "owns",
    "larger",
    "mining",
    "power",
    "case",
    "bitcoin",
    "every",
    "time",
    "miner",
    "adds",
    "block",
    "blockchain",
    "rewarded",
    "bitcoins",
    "reward",
    "receive",
    "expected",
    "every",
    "210",
    "000",
    "blocks",
    "next",
    "time",
    "reward",
    "going",
    "year",
    "2020",
    "reward",
    "reduce",
    "bitcoins",
    "bitcoins",
    "per",
    "block",
    "case",
    "ethereum",
    "miner",
    "validator",
    "receives",
    "value",
    "three",
    "ether",
    "every",
    "time",
    "block",
    "added",
    "blockchain",
    "transaction",
    "fees",
    "bitcoin",
    "completely",
    "optional",
    "pay",
    "miner",
    "amounts",
    "money",
    "give",
    "special",
    "attention",
    "transaction",
    "however",
    "mentioned",
    "transaction",
    "go",
    "even",
    "provide",
    "money",
    "hand",
    "absolutely",
    "necessary",
    "provide",
    "amount",
    "ether",
    "transaction",
    "successful",
    "ether",
    "provide",
    "get",
    "converted",
    "unit",
    "called",
    "gas",
    "gas",
    "drives",
    "computation",
    "allows",
    "transaction",
    "added",
    "blockchain",
    "let",
    "talk",
    "average",
    "amount",
    "time",
    "takes",
    "add",
    "block",
    "blockchain",
    "case",
    "bitcoin",
    "takes",
    "10",
    "minutes",
    "add",
    "block",
    "blockchain",
    "case",
    "ethereum",
    "takes",
    "12",
    "15",
    "seconds",
    "process",
    "let",
    "talk",
    "hashing",
    "algorithms",
    "systems",
    "maintain",
    "privacy",
    "ensure",
    "security",
    "bitcoin",
    "uses",
    "hashing",
    "algorithm",
    "known",
    "ethereum",
    "uses",
    "cryptographic",
    "algorithm",
    "called",
    "et",
    "hash",
    "let",
    "talk",
    "important",
    "values",
    "associated",
    "bitcoin",
    "ethereum",
    "total",
    "number",
    "coins",
    "17",
    "million",
    "bitcoins",
    "101",
    "million",
    "ether",
    "see",
    "ethereum",
    "easily",
    "crossed",
    "100",
    "million",
    "mark",
    "however",
    "market",
    "capitalization",
    "bitcoins",
    "110",
    "billion",
    "us",
    "dollars",
    "whereas",
    "ethereum",
    "28",
    "billion",
    "even",
    "though",
    "ethereum",
    "larger",
    "number",
    "coins",
    "market",
    "reach",
    "level",
    "bitcoin",
    "number",
    "transactions",
    "take",
    "place",
    "day",
    "bitcoin",
    "219",
    "000",
    "time",
    "ethereum",
    "659",
    "see",
    "throughout",
    "july",
    "number",
    "transactions",
    "per",
    "day",
    "stay",
    "less",
    "bitcoin",
    "ethereum",
    "number",
    "blocks",
    "created",
    "bitcoin",
    "537",
    "000",
    "ethereum",
    "grows",
    "6",
    "billion",
    "fact",
    "amount",
    "time",
    "takes",
    "block",
    "added",
    "ethereum",
    "much",
    "less",
    "compared",
    "bitcoin",
    "block",
    "size",
    "bitcoin",
    "kilobytes",
    "kilobytes",
    "ethereum",
    "see",
    "market",
    "value",
    "bitcoin",
    "significantly",
    "higher",
    "form",
    "digital",
    "currency",
    "market",
    "right",
    "however",
    "closely",
    "followed",
    "ether",
    "hopes",
    "take",
    "one",
    "day",
    "big",
    "question",
    "one",
    "better",
    "answer",
    "depends",
    "entirely",
    "requirements",
    "bitcoin",
    "works",
    "better",
    "transaction",
    "system",
    "ethereum",
    "works",
    "well",
    "need",
    "create",
    "build",
    "distributed",
    "applications",
    "smart",
    "contracts",
    "end",
    "day",
    "choice",
    "entirely",
    "5",
    "industries",
    "blockchain",
    "disrupt",
    "let",
    "start",
    "banking",
    "suppose",
    "san",
    "francisco",
    "want",
    "send",
    "money",
    "friend",
    "transfer",
    "take",
    "place",
    "need",
    "help",
    "central",
    "authority",
    "case",
    "bank",
    "say",
    "sending",
    "hundred",
    "dollars",
    "hundred",
    "dollars",
    "ten",
    "dollars",
    "goes",
    "transaction",
    "fee",
    "bank",
    "rest",
    "goes",
    "friend",
    "ninety",
    "dollars",
    "transaction",
    "fee",
    "times",
    "expensive",
    "process",
    "transferring",
    "money",
    "also",
    "time",
    "consuming",
    "act",
    "sending",
    "money",
    "overseas",
    "also",
    "lot",
    "complicated",
    "due",
    "exchange",
    "rates",
    "hidden",
    "fees",
    "blockchain",
    "disrupting",
    "system",
    "providing",
    "payment",
    "system",
    "provides",
    "high",
    "security",
    "cost",
    "much",
    "system",
    "eliminates",
    "need",
    "central",
    "authority",
    "blockchain",
    "provides",
    "fast",
    "cheap",
    "borderless",
    "payments",
    "across",
    "world",
    "perform",
    "transfers",
    "part",
    "world",
    "cryptocurrencies",
    "like",
    "bitcoin",
    "eliminates",
    "need",
    "third",
    "party",
    "case",
    "bank",
    "make",
    "transactions",
    "blockchain",
    "records",
    "transactions",
    "decentralized",
    "ledger",
    "ledger",
    "accessible",
    "bitcoin",
    "users",
    "example",
    "let",
    "talk",
    "cryptocurrency",
    "application",
    "caller",
    "provides",
    "money",
    "transfers",
    "application",
    "allows",
    "users",
    "store",
    "transfer",
    "receive",
    "digital",
    "money",
    "stored",
    "mobile",
    "phones",
    "pcs",
    "recipient",
    "withdraw",
    "cash",
    "via",
    "anabra",
    "teller",
    "important",
    "thing",
    "users",
    "need",
    "bank",
    "account",
    "use",
    "service",
    "next",
    "cyber",
    "security",
    "imagine",
    "office",
    "one",
    "day",
    "find",
    "data",
    "modified",
    "previous",
    "evening",
    "someone",
    "went",
    "data",
    "altered",
    "cyber",
    "attacks",
    "huge",
    "cause",
    "concern",
    "among",
    "public",
    "huge",
    "repercussions",
    "person",
    "life",
    "essential",
    "find",
    "effective",
    "solution",
    "people",
    "going",
    "data",
    "unauthorized",
    "tampering",
    "blockchain",
    "comes",
    "blockchain",
    "decentralized",
    "system",
    "makes",
    "suitable",
    "environments",
    "lot",
    "security",
    "required",
    "information",
    "stored",
    "inside",
    "bitcoin",
    "networks",
    "verified",
    "encrypted",
    "using",
    "cryptographic",
    "algorithm",
    "ensures",
    "single",
    "point",
    "entrance",
    "wide",
    "scale",
    "attack",
    "blockchain",
    "also",
    "easy",
    "identify",
    "malicious",
    "attacks",
    "due",
    "connections",
    "data",
    "ordered",
    "tampered",
    "ensuring",
    "central",
    "authority",
    "blockchain",
    "provides",
    "transparent",
    "secure",
    "way",
    "recording",
    "transactions",
    "time",
    "ensuring",
    "none",
    "private",
    "information",
    "disclosed",
    "anyone",
    "example",
    "let",
    "tell",
    "company",
    "called",
    "guard",
    "time",
    "secures",
    "data",
    "using",
    "blockchain",
    "technology",
    "guardtime",
    "uses",
    "completely",
    "unorthodox",
    "method",
    "opposed",
    "centralized",
    "system",
    "company",
    "uses",
    "blockchain",
    "technology",
    "distributes",
    "data",
    "among",
    "nodes",
    "users",
    "let",
    "talk",
    "supply",
    "chain",
    "management",
    "say",
    "ordered",
    "food",
    "online",
    "get",
    "delivery",
    "food",
    "get",
    "food",
    "delivered",
    "find",
    "food",
    "surprisingly",
    "low",
    "quality",
    "blockchain",
    "technology",
    "trace",
    "supply",
    "chain",
    "back",
    "beginning",
    "find",
    "things",
    "went",
    "wrong",
    "example",
    "find",
    "farm",
    "product",
    "grown",
    "production",
    "whether",
    "something",
    "went",
    "wrong",
    "distributor",
    "whether",
    "something",
    "went",
    "wrong",
    "retailer",
    "something",
    "went",
    "wrong",
    "hand",
    "supply",
    "chain",
    "management",
    "blockchain",
    "provides",
    "permanent",
    "transparency",
    "validation",
    "transaction",
    "shared",
    "multiple",
    "supply",
    "chain",
    "partners",
    "means",
    "validate",
    "every",
    "step",
    "supply",
    "chain",
    "blockchain",
    "entries",
    "permanent",
    "transparent",
    "makes",
    "easier",
    "customer",
    "view",
    "transaction",
    "history",
    "product",
    "purchased",
    "blockchain",
    "transactions",
    "recorded",
    "decentralized",
    "distributed",
    "ledger",
    "transaction",
    "recorded",
    "block",
    "anyone",
    "verify",
    "authenticity",
    "status",
    "product",
    "delivered",
    "also",
    "used",
    "seafood",
    "verification",
    "track",
    "seafood",
    "ocean",
    "market",
    "take",
    "example",
    "pacific",
    "tuna",
    "project",
    "three",
    "blocks",
    "one",
    "containing",
    "fishing",
    "details",
    "exported",
    "import",
    "details",
    "purchasing",
    "details",
    "blockchain",
    "supply",
    "chain",
    "management",
    "provides",
    "verification",
    "track",
    "tuna",
    "fish",
    "process",
    "prevents",
    "illegal",
    "phishing",
    "next",
    "healthcare",
    "say",
    "hospital",
    "asking",
    "reports",
    "medical",
    "test",
    "yesterday",
    "receptionist",
    "tells",
    "wait",
    "even",
    "4",
    "hours",
    "still",
    "get",
    "report",
    "apart",
    "annoying",
    "delay",
    "realized",
    "person",
    "access",
    "system",
    "corrupt",
    "data",
    "apart",
    "annoying",
    "delay",
    "realized",
    "person",
    "access",
    "system",
    "corrupt",
    "data",
    "since",
    "information",
    "stored",
    "physical",
    "memory",
    "system",
    "blockchain",
    "eliminates",
    "central",
    "authority",
    "ensures",
    "rapid",
    "access",
    "data",
    "block",
    "connected",
    "another",
    "block",
    "data",
    "distributed",
    "across",
    "nodes",
    "makes",
    "difficult",
    "hacker",
    "corrupt",
    "data",
    "another",
    "major",
    "problem",
    "healthcare",
    "counterfeit",
    "medication",
    "main",
    "issue",
    "counterfeit",
    "medicines",
    "difficult",
    "distinguish",
    "real",
    "medicines",
    "solution",
    "comes",
    "form",
    "blockchain",
    "help",
    "supply",
    "chain",
    "management",
    "medicine",
    "provenance",
    "traced",
    "example",
    "united",
    "healthcare",
    "improved",
    "privacy",
    "security",
    "interoperability",
    "medical",
    "records",
    "using",
    "blockchain",
    "time",
    "honorable",
    "mentions",
    "insurance",
    "industry",
    "blockchain",
    "decentralized",
    "system",
    "insurance",
    "companies",
    "easily",
    "identify",
    "false",
    "claims",
    "prevent",
    "forgeries",
    "transportation",
    "utilizing",
    "blockchain",
    "enables",
    "traceability",
    "transportation",
    "industry",
    "shipment",
    "goods",
    "easily",
    "tracked",
    "let",
    "tell",
    "cloud",
    "storage",
    "example",
    "storage",
    "decentralized",
    "cloud",
    "storage",
    "eliminating",
    "servers",
    "utilizing",
    "blockchain",
    "securely",
    "store",
    "data",
    "cloud",
    "high",
    "speed",
    "low",
    "cost",
    "users",
    "earn",
    "money",
    "sharing",
    "extra",
    "hard",
    "drive",
    "space",
    "storage",
    "network",
    "real",
    "estate",
    "deploying",
    "blockchain",
    "technology",
    "real",
    "estate",
    "increases",
    "speed",
    "conveyance",
    "process",
    "eliminates",
    "necessity",
    "money",
    "exchanges",
    "let",
    "talk",
    "government",
    "traditional",
    "voting",
    "process",
    "electoral",
    "fraud",
    "illegal",
    "activity",
    "takes",
    "place",
    "almost",
    "always",
    "citizens",
    "want",
    "vote",
    "must",
    "wait",
    "queue",
    "cast",
    "word",
    "local",
    "authority",
    "time",
    "consuming",
    "process",
    "bring",
    "process",
    "online",
    "online",
    "voting",
    "systems",
    "fail",
    "due",
    "lack",
    "security",
    "blockchain",
    "used",
    "solve",
    "issues",
    "used",
    "counting",
    "votes",
    "verifying",
    "voters",
    "using",
    "blockchain",
    "voters",
    "submit",
    "votes",
    "without",
    "revealing",
    "identity",
    "public",
    "officials",
    "count",
    "words",
    "absolute",
    "accuracy",
    "knowing",
    "id",
    "one",
    "vote",
    "associated",
    "fake",
    "quotes",
    "created",
    "data",
    "dampering",
    "closely",
    "impossible",
    "blockchain",
    "vote",
    "added",
    "ledger",
    "information",
    "never",
    "erased",
    "let",
    "tell",
    "example",
    "vote",
    "miwot",
    "token",
    "based",
    "blockchain",
    "platform",
    "similar",
    "digital",
    "ballot",
    "box",
    "mode",
    "people",
    "able",
    "go",
    "smartphone",
    "voters",
    "cast",
    "vote",
    "verification",
    "word",
    "gets",
    "recorded",
    "blockchain",
    "voter",
    "identities",
    "secured",
    "results",
    "modified",
    "blockchain",
    "also",
    "useful",
    "things",
    "digital",
    "asset",
    "registries",
    "blockchain",
    "fast",
    "secure",
    "registration",
    "asset",
    "possible",
    "used",
    "notary",
    "utilizing",
    "blockchains",
    "technology",
    "notary",
    "seal",
    "really",
    "fast",
    "way",
    "prove",
    "document",
    "authenticity",
    "tax",
    "deploying",
    "blockchain",
    "result",
    "quicker",
    "tax",
    "payments",
    "lower",
    "rates",
    "tax",
    "evasion",
    "lesser",
    "efforts",
    "tax",
    "auditing",
    "blockchain",
    "increase",
    "security",
    "transparency",
    "governmental",
    "systems",
    "2020",
    "dubai",
    "hopes",
    "become",
    "100",
    "blockchain",
    "government",
    "making",
    "government",
    "services",
    "available",
    "blockchain",
    "technology",
    "10",
    "things",
    "know",
    "bitcoin",
    "firstly",
    "mysterious",
    "creator",
    "2009",
    "person",
    "group",
    "people",
    "known",
    "satoshi",
    "nakamoto",
    "introduced",
    "bitcoin",
    "world",
    "vanished",
    "internet",
    "late",
    "2010",
    "heard",
    "since",
    "like",
    "identity",
    "shorter",
    "mystery",
    "nobody",
    "really",
    "knows",
    "even",
    "alive",
    "dead",
    "communication",
    "people",
    "emails",
    "forums",
    "bitcoin",
    "wallet",
    "holds",
    "around",
    "980hz",
    "000",
    "bitcoins",
    "makes",
    "one",
    "richest",
    "people",
    "planet",
    "next",
    "satoshi",
    "sign",
    "respect",
    "bitcoins",
    "creator",
    "smallest",
    "unit",
    "bitcoin",
    "known",
    "satoshi",
    "one",
    "satoshi",
    "valued",
    "around",
    "669",
    "us",
    "dollars",
    "low",
    "value",
    "make",
    "one",
    "bitcoin",
    "need",
    "approximately",
    "100",
    "million",
    "satoshi",
    "according",
    "current",
    "bitcoin",
    "values",
    "fluctuates",
    "lot",
    "make",
    "dollar",
    "need",
    "close",
    "15",
    "800",
    "satoshi",
    "losing",
    "bitcoins",
    "losing",
    "bitcoin",
    "address",
    "also",
    "known",
    "private",
    "key",
    "means",
    "losing",
    "unique",
    "identification",
    "also",
    "means",
    "lose",
    "bitcoins",
    "wallet",
    "research",
    "shows",
    "least",
    "60",
    "percent",
    "bitcoin",
    "addresses",
    "ghosts",
    "means",
    "huge",
    "chunk",
    "population",
    "using",
    "bitcoin",
    "network",
    "lost",
    "addresses",
    "people",
    "lost",
    "addresses",
    "way",
    "access",
    "wallet",
    "liberland",
    "april",
    "2015",
    "micro",
    "nation",
    "croatia",
    "serbia",
    "known",
    "liberland",
    "born",
    "founded",
    "virgilka",
    "politician",
    "publicist",
    "activist",
    "president",
    "liberland",
    "official",
    "currency",
    "liberland",
    "bitcoin",
    "government",
    "took",
    "move",
    "believing",
    "bitcoin",
    "underlying",
    "concepts",
    "blockchain",
    "provides",
    "secure",
    "transparent",
    "method",
    "recording",
    "electronic",
    "financial",
    "physical",
    "assets",
    "processing",
    "power",
    "process",
    "mining",
    "bitcoins",
    "expensive",
    "process",
    "pay",
    "high",
    "toll",
    "like",
    "money",
    "time",
    "electricity",
    "mining",
    "bitcoins",
    "require",
    "servers",
    "used",
    "specific",
    "purpose",
    "alone",
    "faster",
    "process",
    "data",
    "faster",
    "block",
    "added",
    "blockchain",
    "faster",
    "rewarded",
    "bitcoins",
    "power",
    "consumption",
    "imagine",
    "much",
    "electricity",
    "ireland",
    "consumes",
    "year",
    "approximately",
    "five",
    "thousand",
    "kilowatt",
    "hour",
    "much",
    "think",
    "bitcoin",
    "mining",
    "farms",
    "together",
    "consume",
    "60",
    "terawatt",
    "approximately",
    "6",
    "10",
    "raised",
    "10",
    "kilowatt",
    "hours",
    "large",
    "amount",
    "power",
    "entire",
    "country",
    "ireland",
    "second",
    "populated",
    "city",
    "europe",
    "84",
    "421",
    "kilometer",
    "square",
    "area",
    "consumes",
    "lesser",
    "electricity",
    "farms",
    "combined",
    "bitcoin",
    "ban",
    "although",
    "several",
    "countries",
    "around",
    "world",
    "like",
    "canada",
    "america",
    "wholeheartedly",
    "accepted",
    "bitcoin",
    "countries",
    "like",
    "bolivia",
    "iceland",
    "bangladesh",
    "ecuador",
    "completely",
    "banned",
    "usage",
    "bitcoins",
    "also",
    "countries",
    "like",
    "india",
    "thailand",
    "iran",
    "ask",
    "residents",
    "careful",
    "using",
    "cryptocurrencies",
    "completely",
    "banned",
    "however",
    "accept",
    "legal",
    "tender",
    "low",
    "limited",
    "number",
    "limit",
    "many",
    "bitcoins",
    "exist",
    "market",
    "number",
    "capped",
    "21",
    "million",
    "bitcoins",
    "moment",
    "17",
    "million",
    "bitcoins",
    "already",
    "circulation",
    "give",
    "idea",
    "almost",
    "80",
    "percent",
    "21",
    "million",
    "already",
    "done",
    "worry",
    "2140",
    "still",
    "bitcoins",
    "mine",
    "miners",
    "rewarded",
    "miners",
    "rewarded",
    "bitcoins",
    "block",
    "added",
    "blockchain",
    "every",
    "four",
    "years",
    "reward",
    "reduces",
    "half",
    "next",
    "halving",
    "supposed",
    "occur",
    "2020",
    "reward",
    "reduces",
    "bitcoins",
    "power",
    "b",
    "terms",
    "bitcoin",
    "uppercase",
    "b",
    "bitcoin",
    "lowercase",
    "b",
    "mean",
    "two",
    "different",
    "things",
    "thing",
    "differentiates",
    "two",
    "two",
    "completely",
    "different",
    "things",
    "letter",
    "b",
    "lowercase",
    "b",
    "bitcoin",
    "refers",
    "cryptocurrency",
    "used",
    "perform",
    "transactions",
    "uppercase",
    "b",
    "bitcoin",
    "refers",
    "ledger",
    "stores",
    "information",
    "regarding",
    "transactions",
    "faster",
    "supercomputers",
    "world",
    "fastest",
    "supercomputer",
    "summit",
    "works",
    "petaflops",
    "nothing",
    "quadrillion",
    "floating",
    "point",
    "operations",
    "per",
    "second",
    "take",
    "bitcoin",
    "network",
    "completely",
    "consideration",
    "processing",
    "power",
    "80",
    "million",
    "704",
    "290",
    "petaflops",
    "thing",
    "supercomputer",
    "several",
    "different",
    "things",
    "thing",
    "bitcoin",
    "network",
    "add",
    "blocks",
    "blockchain",
    "reached",
    "end",
    "video",
    "hope",
    "guys",
    "enjoyed",
    "learned",
    "something",
    "new",
    "bitcoin",
    "feel",
    "like",
    "missed",
    "something",
    "interesting",
    "come",
    "across",
    "let",
    "us",
    "know",
    "comments",
    "today",
    "going",
    "something",
    "interesting",
    "today",
    "going",
    "go",
    "applications",
    "blockchain",
    "get",
    "let",
    "tell",
    "exactly",
    "blockchain",
    "blockchain",
    "list",
    "records",
    "blocks",
    "stores",
    "data",
    "publicly",
    "chronological",
    "order",
    "data",
    "within",
    "blocks",
    "records",
    "secured",
    "using",
    "cryptography",
    "central",
    "authority",
    "controlling",
    "anyone",
    "access",
    "data",
    "within",
    "network",
    "everyone",
    "alter",
    "data",
    "everyone",
    "copies",
    "data",
    "know",
    "blockchain",
    "let",
    "get",
    "video",
    "today",
    "talking",
    "blockchain",
    "used",
    "supply",
    "chain",
    "management",
    "blockchain",
    "cyber",
    "security",
    "blockchain",
    "used",
    "voting",
    "applications",
    "blockchain",
    "let",
    "look",
    "supply",
    "chain",
    "management",
    "let",
    "look",
    "scenario",
    "blockchain",
    "delivery",
    "boy",
    "bringing",
    "john",
    "order",
    "apples",
    "john",
    "thanks",
    "sees",
    "apples",
    "rotten",
    "john",
    "says",
    "wants",
    "money",
    "back",
    "however",
    "delivery",
    "boy",
    "says",
    "ca",
    "help",
    "since",
    "delivery",
    "boy",
    "person",
    "created",
    "product",
    "problems",
    "ones",
    "faced",
    "blockchain",
    "blockchain",
    "technology",
    "traceability",
    "across",
    "supply",
    "chain",
    "means",
    "trace",
    "back",
    "happened",
    "product",
    "step",
    "supply",
    "chain",
    "blockchain",
    "technology",
    "enables",
    "transactions",
    "tracked",
    "secure",
    "transparent",
    "manner",
    "benefits",
    "using",
    "blockchain",
    "technology",
    "single",
    "record",
    "policy",
    "means",
    "single",
    "record",
    "throughout",
    "entire",
    "supply",
    "chain",
    "reduced",
    "costs",
    "since",
    "requirement",
    "multiple",
    "records",
    "across",
    "entire",
    "supply",
    "chain",
    "eliminating",
    "error",
    "less",
    "human",
    "intervention",
    "last",
    "two",
    "points",
    "come",
    "somewhat",
    "correlation",
    "since",
    "less",
    "human",
    "intervention",
    "usually",
    "lesser",
    "amount",
    "error",
    "let",
    "look",
    "example",
    "supply",
    "chain",
    "management",
    "product",
    "starts",
    "farm",
    "goes",
    "storage",
    "undergoes",
    "food",
    "processing",
    "manufactured",
    "distributed",
    "given",
    "retailer",
    "finally",
    "reaches",
    "customer",
    "supply",
    "chain",
    "management",
    "blockchain",
    "able",
    "provide",
    "permanent",
    "record",
    "whole",
    "lot",
    "transparency",
    "ability",
    "validate",
    "transactions",
    "shared",
    "across",
    "multiple",
    "supply",
    "chain",
    "partners",
    "blockchain",
    "transactions",
    "recorded",
    "decentralized",
    "distributed",
    "ledger",
    "advantage",
    "anyone",
    "verify",
    "authenticity",
    "status",
    "product",
    "delivered",
    "want",
    "look",
    "real",
    "life",
    "example",
    "look",
    "walmart",
    "walmart",
    "building",
    "blockchain",
    "distributed",
    "ledger",
    "connect",
    "track",
    "poke",
    "suppliers",
    "shippers",
    "purchases",
    "units",
    "involved",
    "supply",
    "chain",
    "delivering",
    "food",
    "product",
    "across",
    "china",
    "done",
    "reduce",
    "risk",
    "data",
    "tampering",
    "inaccuracy",
    "inaccuracy",
    "let",
    "look",
    "blockchain",
    "helps",
    "cyber",
    "security",
    "imagine",
    "scenario",
    "sending",
    "twenty",
    "dollars",
    "b",
    "sends",
    "money",
    "transaction",
    "details",
    "stored",
    "cloud",
    "hacker",
    "hacks",
    "data",
    "within",
    "cloud",
    "tampers",
    "tampers",
    "way",
    "receives",
    "20",
    "instead",
    "b",
    "see",
    "hacker",
    "smug",
    "main",
    "problem",
    "current",
    "banking",
    "system",
    "prone",
    "cyber",
    "attacks",
    "centralized",
    "network",
    "also",
    "lead",
    "fraud",
    "well",
    "data",
    "theft",
    "cyber",
    "attacks",
    "one",
    "biggest",
    "threats",
    "public",
    "face",
    "however",
    "blockchain",
    "solution",
    "makes",
    "sure",
    "data",
    "protected",
    "tampering",
    "well",
    "helps",
    "improving",
    "cyber",
    "security",
    "across",
    "number",
    "different",
    "industries",
    "benefits",
    "provides",
    "high",
    "security",
    "help",
    "cryptography",
    "mentioned",
    "decentralized",
    "storage",
    "quick",
    "transactions",
    "take",
    "10",
    "minutes",
    "lower",
    "cost",
    "compared",
    "banking",
    "transaction",
    "costs",
    "let",
    "look",
    "scenario",
    "help",
    "bitcoins",
    "blockchain",
    "sending",
    "bitcoins",
    "b",
    "amounts",
    "approximately",
    "20",
    "dollars",
    "bitcoins",
    "sent",
    "blockchain",
    "distributed",
    "ledger",
    "distributes",
    "data",
    "across",
    "multiple",
    "nodes",
    "within",
    "network",
    "secures",
    "data",
    "using",
    "cryptography",
    "another",
    "thing",
    "remember",
    "node",
    "copy",
    "ledger",
    "cryptography",
    "protects",
    "data",
    "within",
    "changes",
    "making",
    "immutable",
    "imagine",
    "hacker",
    "trying",
    "hack",
    "data",
    "unsuccessful",
    "connection",
    "prevents",
    "data",
    "altered",
    "well",
    "tampered",
    "finally",
    "b",
    "receives",
    "twenty",
    "dollars",
    "bitcoins",
    "real",
    "life",
    "application",
    "mastercard",
    "blockchain",
    "project",
    "mastercard",
    "using",
    "blockchain",
    "sending",
    "well",
    "receiving",
    "money",
    "also",
    "allows",
    "exchange",
    "currency",
    "without",
    "need",
    "central",
    "authority",
    "let",
    "look",
    "blockchain",
    "help",
    "voting",
    "process",
    "blockchain",
    "voter",
    "would",
    "submit",
    "voter",
    "id",
    "water",
    "ids",
    "need",
    "verified",
    "verification",
    "water",
    "would",
    "submit",
    "word",
    "evm",
    "electronic",
    "voting",
    "machine",
    "voting",
    "complete",
    "however",
    "possible",
    "evm",
    "hacked",
    "since",
    "centralized",
    "system",
    "lead",
    "amount",
    "manipulation",
    "word",
    "count",
    "however",
    "decentralized",
    "system",
    "like",
    "blockchain",
    "possible",
    "completely",
    "eliminate",
    "scope",
    "forgery",
    "well",
    "data",
    "manipulation",
    "let",
    "look",
    "voting",
    "performed",
    "help",
    "blockchain",
    "first",
    "water",
    "downloads",
    "voting",
    "application",
    "voter",
    "submits",
    "voter",
    "id",
    "registers",
    "election",
    "verification",
    "complete",
    "voter",
    "authorized",
    "cast",
    "vote",
    "water",
    "submits",
    "word",
    "without",
    "revealing",
    "identity",
    "public",
    "support",
    "added",
    "blockchain",
    "information",
    "within",
    "blockchain",
    "never",
    "erased",
    "officials",
    "count",
    "words",
    "knowing",
    "id",
    "attributed",
    "one",
    "vote",
    "blockchain",
    "voters",
    "also",
    "count",
    "number",
    "votes",
    "using",
    "blockchain",
    "voting",
    "process",
    "provides",
    "complete",
    "transparency",
    "eliminating",
    "need",
    "systems",
    "involved",
    "along",
    "also",
    "eliminate",
    "voter",
    "fraud",
    "well",
    "election",
    "rigging",
    "increases",
    "transparency",
    "voting",
    "process",
    "reduces",
    "expense",
    "conducting",
    "elections",
    "real",
    "life",
    "examples",
    "meewort",
    "token",
    "based",
    "blockchain",
    "platform",
    "works",
    "similar",
    "digital",
    "ballot",
    "box",
    "protects",
    "integrity",
    "ward",
    "well",
    "protects",
    "security",
    "election",
    "process",
    "already",
    "implemented",
    "australia",
    "matter",
    "time",
    "similar",
    "technologies",
    "set",
    "across",
    "world",
    "let",
    "look",
    "applications",
    "insurance",
    "blockchain",
    "eliminate",
    "forgery",
    "well",
    "false",
    "claims",
    "real",
    "estate",
    "increases",
    "speed",
    "conveyance",
    "process",
    "eliminates",
    "requirement",
    "money",
    "exchanges",
    "talking",
    "blockchain",
    "applications",
    "caught",
    "interest",
    "suggest",
    "get",
    "going",
    "tell",
    "become",
    "blockchain",
    "developer",
    "begin",
    "let",
    "see",
    "current",
    "situation",
    "market",
    "84",
    "percent",
    "companies",
    "dabbling",
    "blockchain",
    "blockchain",
    "fastest",
    "growing",
    "skill",
    "freelance",
    "job",
    "market",
    "apple",
    "st",
    "wozniak",
    "getting",
    "involved",
    "blockchain",
    "projects",
    "jpmorgan",
    "cio",
    "believes",
    "blockchain",
    "replace",
    "existing",
    "technology",
    "see",
    "amount",
    "focus",
    "organizations",
    "putting",
    "blockchain",
    "tech",
    "influencers",
    "around",
    "world",
    "say",
    "see",
    "clearly",
    "really",
    "believe",
    "blockchain",
    "tremendous",
    "positive",
    "impact",
    "lives",
    "market",
    "whole",
    "surprise",
    "blockchain",
    "worldwide",
    "acclaim",
    "created",
    "huge",
    "number",
    "job",
    "opportunities",
    "across",
    "world",
    "one",
    "job",
    "blockchain",
    "developer",
    "going",
    "learn",
    "today",
    "blockchain",
    "developer",
    "types",
    "blockchain",
    "developers",
    "steps",
    "follow",
    "become",
    "blockchain",
    "developer",
    "obstacles",
    "might",
    "face",
    "learning",
    "blockchain",
    "salaries",
    "offered",
    "blockchain",
    "developers",
    "companies",
    "using",
    "blockchain",
    "right",
    "blockchain",
    "developer",
    "blockchain",
    "developer",
    "someone",
    "designs",
    "implements",
    "supports",
    "blockchain",
    "network",
    "way",
    "responsible",
    "setting",
    "blockchain",
    "network",
    "ensuring",
    "works",
    "properly",
    "create",
    "optimize",
    "blockchain",
    "protocols",
    "example",
    "network",
    "public",
    "network",
    "create",
    "protocols",
    "optimize",
    "based",
    "usage",
    "requirement",
    "develop",
    "distributed",
    "applications",
    "smart",
    "contracts",
    "blockchain",
    "network",
    "let",
    "talk",
    "different",
    "types",
    "blockchain",
    "developers",
    "fall",
    "two",
    "major",
    "categories",
    "core",
    "blockchain",
    "developers",
    "blockchain",
    "software",
    "developers",
    "core",
    "blockchain",
    "developer",
    "works",
    "core",
    "features",
    "architecture",
    "blockchain",
    "network",
    "basically",
    "charge",
    "entire",
    "blockchain",
    "network",
    "manage",
    "architecture",
    "network",
    "supervise",
    "blockchain",
    "network",
    "work",
    "consensus",
    "algorithms",
    "example",
    "algorithm",
    "bitcoin",
    "set",
    "blockchain",
    "protocols",
    "core",
    "blockchain",
    "developer",
    "works",
    "much",
    "like",
    "core",
    "web",
    "developer",
    "main",
    "thing",
    "work",
    "course",
    "concepts",
    "like",
    "blockchain",
    "developers",
    "work",
    "protocols",
    "web",
    "developers",
    "working",
    "protocols",
    "like",
    "http",
    "tcpip",
    "let",
    "talk",
    "blockchain",
    "software",
    "developer",
    "work",
    "blockchain",
    "create",
    "applications",
    "create",
    "smart",
    "contracts",
    "develop",
    "distributed",
    "applications",
    "work",
    "front",
    "back",
    "end",
    "application",
    "development",
    "blockchain",
    "software",
    "developers",
    "also",
    "similar",
    "web",
    "application",
    "developers",
    "create",
    "applications",
    "network",
    "already",
    "set",
    "core",
    "developers",
    "become",
    "blockchain",
    "developer",
    "start",
    "path",
    "becoming",
    "blockchain",
    "developer",
    "things",
    "really",
    "know",
    "going",
    "talk",
    "prerequisites",
    "first",
    "programming",
    "languages",
    "absolutely",
    "necessary",
    "programming",
    "languages",
    "get",
    "onto",
    "blockchain",
    "development",
    "blockchains",
    "created",
    "languages",
    "like",
    "java",
    "c",
    "plus",
    "plus",
    "javascript",
    "go",
    "python",
    "c",
    "sharp",
    "let",
    "emphasize",
    "important",
    "know",
    "programming",
    "languages",
    "core",
    "blockchain",
    "development",
    "aforementioned",
    "languages",
    "job",
    "however",
    "case",
    "create",
    "distributed",
    "applications",
    "smart",
    "contracts",
    "ethereum",
    "mandatory",
    "learn",
    "programming",
    "language",
    "solidity",
    "need",
    "understand",
    "fundamentals",
    "object",
    "oriented",
    "programming",
    "concepts",
    "programming",
    "anyone",
    "codes",
    "know",
    "wrapping",
    "data",
    "functions",
    "single",
    "unit",
    "exactly",
    "blockchains",
    "function",
    "example",
    "ethereum",
    "block",
    "two",
    "components",
    "data",
    "function",
    "user",
    "details",
    "act",
    "data",
    "data",
    "includes",
    "person",
    "sending",
    "transaction",
    "much",
    "money",
    "planning",
    "transfer",
    "function",
    "command",
    "send",
    "receive",
    "payments",
    "need",
    "learn",
    "flat",
    "relational",
    "databases",
    "blockchain",
    "created",
    "basis",
    "two",
    "types",
    "databases",
    "flat",
    "database",
    "stores",
    "data",
    "single",
    "table",
    "structure",
    "relational",
    "database",
    "uses",
    "number",
    "tables",
    "records",
    "across",
    "tables",
    "necessary",
    "understand",
    "two",
    "databases",
    "work",
    "completely",
    "understand",
    "blockchain",
    "created",
    "concepts",
    "need",
    "learn",
    "data",
    "structures",
    "need",
    "understand",
    "working",
    "data",
    "structures",
    "like",
    "stack",
    "linked",
    "list",
    "queue",
    "blockchain",
    "backlinked",
    "list",
    "block",
    "blockchain",
    "references",
    "previous",
    "block",
    "done",
    "field",
    "blocks",
    "header",
    "known",
    "previous",
    "hash",
    "holds",
    "hash",
    "value",
    "preceding",
    "block",
    "knowledge",
    "web",
    "application",
    "development",
    "well",
    "versed",
    "web",
    "app",
    "development",
    "opening",
    "wide",
    "range",
    "opportunities",
    "create",
    "web",
    "mobile",
    "applications",
    "using",
    "blockchain",
    "technology",
    "regardless",
    "whether",
    "application",
    "works",
    "blockchain",
    "technology",
    "front",
    "end",
    "created",
    "web",
    "application",
    "development",
    "need",
    "know",
    "networking",
    "blockchains",
    "work",
    "internet",
    "need",
    "understand",
    "many",
    "concepts",
    "regarding",
    "networks",
    "example",
    "systems",
    "able",
    "communicate",
    "network",
    "works",
    "much",
    "done",
    "ready",
    "start",
    "journey",
    "become",
    "blockchain",
    "developer",
    "first",
    "step",
    "understand",
    "concepts",
    "blockchain",
    "satoshi",
    "nakamoto",
    "white",
    "paper",
    "bitcoin",
    "appeared",
    "peer",
    "electronic",
    "cash",
    "system",
    "gives",
    "detailed",
    "account",
    "bitcoin",
    "works",
    "introduces",
    "us",
    "concept",
    "blockchain",
    "want",
    "learn",
    "firsthand",
    "blockchain",
    "works",
    "creator",
    "bitcoin",
    "would",
    "suggest",
    "go",
    "satoshi",
    "nakamoto",
    "paper",
    "next",
    "need",
    "learn",
    "important",
    "terms",
    "related",
    "blockchain",
    "example",
    "minor",
    "block",
    "public",
    "distributed",
    "ledger",
    "hash",
    "encryption",
    "proof",
    "work",
    "mining",
    "much",
    "learn",
    "systems",
    "bitcoin",
    "like",
    "ethereum",
    "hyperledger",
    "hashgraph",
    "use",
    "blockchain",
    "work",
    "technology",
    "second",
    "step",
    "involves",
    "understanding",
    "economics",
    "behind",
    "cryptocurrencies",
    "blockchain",
    "blockchain",
    "technologies",
    "work",
    "crypto",
    "economics",
    "nothing",
    "combination",
    "two",
    "words",
    "cryptography",
    "economics",
    "cryptography",
    "blockchain",
    "involves",
    "hashing",
    "digital",
    "signatures",
    "proof",
    "work",
    "hashing",
    "involved",
    "maintaining",
    "privacy",
    "user",
    "within",
    "network",
    "made",
    "possible",
    "help",
    "cryptographic",
    "algorithms",
    "example",
    "bitcoin",
    "algorithm",
    "eth",
    "ethereum",
    "digital",
    "signatures",
    "help",
    "validate",
    "particular",
    "user",
    "within",
    "network",
    "made",
    "possible",
    "combination",
    "user",
    "public",
    "private",
    "keys",
    "proof",
    "work",
    "involves",
    "miners",
    "around",
    "world",
    "trying",
    "solve",
    "complex",
    "mathematical",
    "puzzle",
    "able",
    "add",
    "block",
    "blockchain",
    "economic",
    "side",
    "need",
    "understand",
    "miners",
    "incentivized",
    "users",
    "add",
    "take",
    "part",
    "blockchain",
    "given",
    "cryptocurrencies",
    "people",
    "take",
    "decisions",
    "also",
    "right",
    "charge",
    "fee",
    "service",
    "example",
    "person",
    "block",
    "decide",
    "transactions",
    "going",
    "add",
    "block",
    "right",
    "charge",
    "amount",
    "money",
    "want",
    "transaction",
    "added",
    "block",
    "good",
    "users",
    "network",
    "rewarded",
    "monetary",
    "compensation",
    "ability",
    "take",
    "decisions",
    "bad",
    "users",
    "network",
    "pay",
    "fine",
    "rights",
    "take",
    "decisions",
    "stripped",
    "away",
    "step",
    "three",
    "understand",
    "cryptocurrencies",
    "work",
    "cryptocurrencies",
    "whole",
    "number",
    "steps",
    "process",
    "complete",
    "need",
    "understand",
    "every",
    "step",
    "works",
    "example",
    "first",
    "sender",
    "begins",
    "transaction",
    "send",
    "money",
    "receiver",
    "message",
    "encrypted",
    "transmitted",
    "across",
    "network",
    "miners",
    "able",
    "verify",
    "transaction",
    "block",
    "added",
    "blockchain",
    "money",
    "deducted",
    "participants",
    "wallets",
    "need",
    "understand",
    "relationship",
    "every",
    "step",
    "process",
    "interact",
    "step",
    "4",
    "getting",
    "experience",
    "done",
    "steps",
    "mentioned",
    "one",
    "hardest",
    "practical",
    "application",
    "even",
    "know",
    "theory",
    "practical",
    "experience",
    "wo",
    "large",
    "impact",
    "need",
    "start",
    "coding",
    "creating",
    "smart",
    "contracts",
    "need",
    "create",
    "distributed",
    "applications",
    "ethereum",
    "platform",
    "also",
    "let",
    "remind",
    "able",
    "create",
    "smart",
    "contracts",
    "distributed",
    "applications",
    "need",
    "learned",
    "programming",
    "language",
    "solidity",
    "finally",
    "invest",
    "bitcoins",
    "cryptocurrencies",
    "understanding",
    "actually",
    "work",
    "important",
    "also",
    "keep",
    "updated",
    "regarding",
    "cryptocurrencies",
    "blockchains",
    "bitcoins",
    "reading",
    "blogs",
    "forums",
    "take",
    "part",
    "discard",
    "chat",
    "rooms",
    "use",
    "telegram",
    "application",
    "active",
    "community",
    "cryptocurrencies",
    "blockchain",
    "involve",
    "subreddits",
    "like",
    "slash",
    "blockchain",
    "slash",
    "bitcoin",
    "related",
    "subreddits",
    "get",
    "coin",
    "market",
    "cap",
    "talks",
    "market",
    "capitalizations",
    "several",
    "cryptocurrencies",
    "coin",
    "market",
    "cal",
    "much",
    "abundance",
    "resources",
    "internet",
    "take",
    "advantage",
    "let",
    "talk",
    "obstacles",
    "might",
    "face",
    "learning",
    "blockchain",
    "noticed",
    "blockchain",
    "easy",
    "lot",
    "content",
    "cover",
    "make",
    "matters",
    "worse",
    "could",
    "also",
    "face",
    "problems",
    "first",
    "outdated",
    "content",
    "tutorials",
    "content",
    "might",
    "find",
    "online",
    "possibly",
    "keep",
    "constantly",
    "changing",
    "technology",
    "natural",
    "content",
    "might",
    "get",
    "might",
    "little",
    "outdated",
    "want",
    "want",
    "latest",
    "highest",
    "quality",
    "content",
    "secondly",
    "lack",
    "quality",
    "content",
    "abundance",
    "sources",
    "learn",
    "since",
    "wide",
    "variety",
    "possible",
    "might",
    "end",
    "using",
    "type",
    "source",
    "low",
    "quality",
    "substandard",
    "quality",
    "let",
    "talk",
    "salaries",
    "get",
    "blockchain",
    "job",
    "united",
    "states",
    "blockchain",
    "developers",
    "earn",
    "130",
    "000",
    "per",
    "annum",
    "according",
    "burning",
    "glass",
    "technologies",
    "tech",
    "oriented",
    "areas",
    "like",
    "silicon",
    "valley",
    "new",
    "york",
    "boston",
    "earn",
    "150",
    "000",
    "per",
    "annum",
    "several",
    "companies",
    "around",
    "world",
    "invested",
    "heavily",
    "incorporating",
    "blockchain",
    "processes",
    "companies",
    "like",
    "alphabet",
    "bank",
    "america",
    "wells",
    "fargo",
    "apple",
    "microsoft",
    "clear",
    "indication",
    "companies",
    "interested",
    "hiring",
    "people",
    "skilled",
    "enough",
    "concepts",
    "blockchain",
    "finally",
    "companies",
    "using",
    "blockchain",
    "walmart",
    "uses",
    "blockchain",
    "keep",
    "track",
    "every",
    "step",
    "supply",
    "chain",
    "able",
    "track",
    "problem",
    "area",
    "ensure",
    "problem",
    "solved",
    "happen",
    "jpmorgan",
    "chase",
    "co",
    "company",
    "created",
    "blockchain",
    "application",
    "called",
    "quorum",
    "solves",
    "processing",
    "allows",
    "private",
    "transactions",
    "take",
    "place",
    "group",
    "participants",
    "whose",
    "identities",
    "known",
    "agricultural",
    "bank",
    "china",
    "created",
    "learning",
    "system",
    "using",
    "blockchain",
    "aim",
    "help",
    "small",
    "agricultural",
    "businesses",
    "good",
    "credit",
    "record",
    "simply",
    "learn",
    "help",
    "simply",
    "learn",
    "provides",
    "certification",
    "courses",
    "give",
    "introductory",
    "advanced",
    "understanding",
    "concepts",
    "blockchain",
    "introductory",
    "blockchain",
    "basics",
    "course",
    "provides",
    "12",
    "hours",
    "learning",
    "covers",
    "concepts",
    "related",
    "bitcoin",
    "blockchain",
    "data",
    "structures",
    "moreover",
    "gives",
    "introduction",
    "blockchain",
    "bitcoin",
    "blockchain",
    "mining",
    "buying",
    "selling",
    "bitcoins",
    "emerging",
    "trends",
    "blockchain",
    "much",
    "advanced",
    "course",
    "blockchain",
    "certification",
    "training",
    "course",
    "provides",
    "32",
    "hours",
    "training",
    "exercises",
    "using",
    "blockchain",
    "technology",
    "nine",
    "practical",
    "projects",
    "covering",
    "ethereum",
    "hyperledger",
    "bitcoin",
    "case",
    "studies",
    "also",
    "helps",
    "understand",
    "solidity",
    "programming",
    "ethereum",
    "coding",
    "advanced",
    "smart",
    "contracts",
    "ethereum",
    "application",
    "architecture",
    "real",
    "life",
    "projects",
    "much",
    "content",
    "courses",
    "constantly",
    "updated",
    "keep",
    "emerging",
    "trends",
    "market",
    "saurabh",
    "take",
    "30",
    "questions",
    "might",
    "face",
    "blockchain",
    "interview",
    "let",
    "get",
    "started",
    "understand",
    "kind",
    "interview",
    "questions",
    "come",
    "blockchain",
    "interview",
    "let",
    "start",
    "certain",
    "beginner",
    "level",
    "questions",
    "face",
    "blockchain",
    "interview",
    "get",
    "different",
    "variety",
    "questions",
    "covering",
    "kind",
    "questions",
    "asked",
    "level",
    "intermediate",
    "expert",
    "level",
    "one",
    "questions",
    "could",
    "asked",
    "difference",
    "blockchain",
    "hyperledger",
    "blockchain",
    "basically",
    "underlying",
    "concept",
    "blockchain",
    "decentralized",
    "technology",
    "immutable",
    "records",
    "called",
    "blocks",
    "secured",
    "using",
    "cryptography",
    "whereas",
    "hyperledger",
    "platform",
    "organization",
    "allows",
    "people",
    "build",
    "private",
    "blockchain",
    "basically",
    "blockchain",
    "concept",
    "technology",
    "using",
    "blockchain",
    "build",
    "public",
    "private",
    "blockchains",
    "hyperledger",
    "specific",
    "technology",
    "allows",
    "build",
    "private",
    "blockchains",
    "blockchain",
    "divided",
    "public",
    "private",
    "consortium",
    "blockchains",
    "hyperledger",
    "specifically",
    "private",
    "blockchain",
    "technology",
    "access",
    "blockchain",
    "data",
    "limited",
    "predefined",
    "users",
    "defined",
    "using",
    "certain",
    "configurations",
    "programming",
    "blockchain",
    "used",
    "multiple",
    "fields",
    "like",
    "business",
    "governments",
    "healthcare",
    "different",
    "kind",
    "domains",
    "etc",
    "hyperledger",
    "primarily",
    "used",
    "blockchain",
    "solutions",
    "wherever",
    "talking",
    "public",
    "blockchain",
    "like",
    "usage",
    "blockchain",
    "internet",
    "hyper",
    "ledger",
    "based",
    "blockchain",
    "solutions",
    "solutions",
    "meant",
    "internet",
    "within",
    "organization",
    "within",
    "corporation",
    "second",
    "explain",
    "blocked",
    "technology",
    "someone",
    "know",
    "basically",
    "simple",
    "terms",
    "blockchain",
    "technology",
    "distributed",
    "ledger",
    "stores",
    "transaction",
    "details",
    "form",
    "immutable",
    "records",
    "records",
    "called",
    "blocks",
    "secured",
    "using",
    "cryptography",
    "order",
    "explain",
    "simplistically",
    "let",
    "consider",
    "example",
    "school",
    "blockchain",
    "similar",
    "digital",
    "report",
    "card",
    "student",
    "block",
    "contains",
    "students",
    "records",
    "label",
    "stating",
    "date",
    "time",
    "record",
    "entered",
    "record",
    "registered",
    "blockchain",
    "neither",
    "teacher",
    "student",
    "modify",
    "details",
    "block",
    "modify",
    "record",
    "report",
    "cards",
    "therefore",
    "record",
    "becomes",
    "immutable",
    "also",
    "teacher",
    "owns",
    "private",
    "key",
    "allows",
    "make",
    "new",
    "records",
    "student",
    "owns",
    "public",
    "key",
    "view",
    "access",
    "report",
    "card",
    "time",
    "basically",
    "teacher",
    "owns",
    "right",
    "update",
    "record",
    "student",
    "owns",
    "right",
    "view",
    "record",
    "method",
    "makes",
    "data",
    "active",
    "secure",
    "blockchain",
    "brings",
    "table",
    "primary",
    "attributes",
    "blockchain",
    "getting",
    "widely",
    "adopted",
    "immutable",
    "records",
    "available",
    "view",
    "public",
    "available",
    "updating",
    "untemperable",
    "way",
    "merkle",
    "tree",
    "merkle",
    "tree",
    "data",
    "structure",
    "used",
    "verifying",
    "block",
    "form",
    "binary",
    "tree",
    "containing",
    "cryptographic",
    "hashes",
    "block",
    "basically",
    "merkle",
    "tree",
    "structured",
    "similar",
    "binary",
    "tree",
    "leaf",
    "node",
    "hash",
    "block",
    "transactional",
    "data",
    "leaf",
    "node",
    "basically",
    "transaction",
    "hashed",
    "node",
    "hash",
    "leaf",
    "node",
    "basically",
    "hash",
    "hash",
    "two",
    "blocks",
    "hash",
    "b",
    "merkle",
    "root",
    "hash",
    "root",
    "final",
    "hash",
    "transaction",
    "hashes",
    "basically",
    "merkel",
    "root",
    "hash",
    "hash",
    "bb",
    "encompasses",
    "transactions",
    "underlying",
    "nodes",
    "mean",
    "blocks",
    "blockchain",
    "technology",
    "definition",
    "block",
    "blockchain",
    "distributed",
    "database",
    "immutable",
    "records",
    "called",
    "blocks",
    "secured",
    "using",
    "cryptography",
    "see",
    "certain",
    "attributes",
    "block",
    "displayed",
    "previous",
    "hash",
    "transaction",
    "details",
    "nonce",
    "target",
    "hash",
    "value",
    "block",
    "like",
    "record",
    "transactions",
    "time",
    "block",
    "verified",
    "gets",
    "recorded",
    "chronological",
    "order",
    "main",
    "blockchain",
    "see",
    "represented",
    "every",
    "time",
    "new",
    "block",
    "verified",
    "gets",
    "added",
    "main",
    "blockchain",
    "attributes",
    "populated",
    "data",
    "recorded",
    "modified",
    "changed",
    "another",
    "question",
    "could",
    "come",
    "interview",
    "blockchain",
    "distributed",
    "ledger",
    "different",
    "traditional",
    "ledger",
    "important",
    "question",
    "need",
    "know",
    "basic",
    "difference",
    "justification",
    "move",
    "traditional",
    "database",
    "blockchain",
    "based",
    "distributed",
    "ledger",
    "benefit",
    "bring",
    "table",
    "certain",
    "differences",
    "visible",
    "transparency",
    "blockchain",
    "distributed",
    "ledger",
    "highly",
    "transparent",
    "compared",
    "traditional",
    "database",
    "distributed",
    "ledgers",
    "irreversible",
    "information",
    "registered",
    "distributed",
    "ledger",
    "modified",
    "whereas",
    "traditional",
    "ledger",
    "reversible",
    "basically",
    "distributed",
    "ledger",
    "secure",
    "uses",
    "cryptography",
    "every",
    "transaction",
    "hashed",
    "recorded",
    "traditional",
    "ledger",
    "security",
    "compromised",
    "distributed",
    "ledger",
    "central",
    "authority",
    "distributed",
    "system",
    "participants",
    "network",
    "holds",
    "authority",
    "maintain",
    "sanity",
    "network",
    "responsible",
    "validating",
    "transactions",
    "whereas",
    "traditional",
    "ledgers",
    "based",
    "concept",
    "centralized",
    "authority",
    "control",
    "transactions",
    "controlled",
    "centralized",
    "authority",
    "distributed",
    "ledger",
    "identities",
    "unknown",
    "hidden",
    "whereas",
    "traditional",
    "ledger",
    "identities",
    "participants",
    "known",
    "transaction",
    "happen",
    "distributed",
    "ledger",
    "single",
    "point",
    "failure",
    "data",
    "distributed",
    "information",
    "shared",
    "across",
    "multiple",
    "nodes",
    "even",
    "single",
    "node",
    "fails",
    "nodes",
    "carry",
    "copy",
    "information",
    "whereas",
    "traditional",
    "ledger",
    "centralized",
    "database",
    "ledger",
    "based",
    "system",
    "particular",
    "system",
    "becomes",
    "single",
    "point",
    "failure",
    "single",
    "system",
    "crashes",
    "entire",
    "application",
    "entire",
    "network",
    "comes",
    "standstill",
    "ability",
    "modify",
    "data",
    "data",
    "transaction",
    "registered",
    "altered",
    "traditional",
    "ledger",
    "possible",
    "validation",
    "done",
    "distributed",
    "ledger",
    "done",
    "participants",
    "network",
    "traditional",
    "ledger",
    "controlled",
    "centralized",
    "authority",
    "copy",
    "ledger",
    "shared",
    "amongst",
    "participants",
    "distributed",
    "ledger",
    "participant",
    "consists",
    "information",
    "ledger",
    "traditional",
    "ledger",
    "single",
    "copy",
    "maintained",
    "centralized",
    "location",
    "shared",
    "amongst",
    "participants",
    "thereby",
    "remains",
    "single",
    "point",
    "failure",
    "queries",
    "put",
    "comments",
    "comments",
    "section",
    "video",
    "definitely",
    "come",
    "back",
    "identify",
    "block",
    "attributes",
    "block",
    "order",
    "understand",
    "every",
    "block",
    "consists",
    "four",
    "fields",
    "holds",
    "hash",
    "value",
    "previous",
    "block",
    "therefore",
    "gets",
    "linked",
    "blockchain",
    "contains",
    "details",
    "aggregated",
    "transactions",
    "aggregated",
    "block",
    "value",
    "called",
    "non",
    "nonce",
    "random",
    "value",
    "used",
    "vary",
    "value",
    "hash",
    "order",
    "generate",
    "hash",
    "value",
    "less",
    "target",
    "finally",
    "hash",
    "block",
    "digital",
    "signature",
    "block",
    "unique",
    "hash",
    "block",
    "alphanumeric",
    "value",
    "used",
    "identify",
    "block",
    "identity",
    "block",
    "hash",
    "address",
    "unique",
    "identification",
    "block",
    "hex",
    "value",
    "64",
    "characters",
    "letters",
    "digit",
    "obtained",
    "using",
    "algorithm",
    "way",
    "structured",
    "hash",
    "previous",
    "block",
    "transaction",
    "data",
    "nouns",
    "consolidate",
    "header",
    "block",
    "together",
    "passed",
    "hashing",
    "function",
    "hash",
    "value",
    "digital",
    "signature",
    "block",
    "generated",
    "cryptography",
    "role",
    "blockchain",
    "blockchain",
    "uses",
    "cryptography",
    "primarily",
    "secure",
    "users",
    "identities",
    "ensure",
    "transactions",
    "done",
    "safely",
    "hash",
    "function",
    "user",
    "identities",
    "transaction",
    "blockchain",
    "encrypted",
    "cryptography",
    "uses",
    "public",
    "private",
    "keys",
    "encrypt",
    "decrypt",
    "data",
    "basically",
    "uses",
    "public",
    "private",
    "key",
    "infrastructure",
    "order",
    "maintain",
    "encryption",
    "information",
    "blockchain",
    "network",
    "blockchain",
    "network",
    "public",
    "key",
    "shared",
    "bitcoin",
    "users",
    "blockchain",
    "users",
    "public",
    "key",
    "like",
    "address",
    "share",
    "anyone",
    "private",
    "key",
    "like",
    "password",
    "kept",
    "secret",
    "user",
    "basically",
    "blockchain",
    "uses",
    "cryptography",
    "secure",
    "user",
    "identities",
    "ensure",
    "transactions",
    "done",
    "safely",
    "uses",
    "algorithm",
    "secure",
    "provides",
    "unique",
    "hash",
    "output",
    "every",
    "input",
    "popular",
    "algorithm",
    "basic",
    "feature",
    "whatever",
    "input",
    "pass",
    "give",
    "standard",
    "output",
    "alphanumeric",
    "output",
    "64",
    "characters",
    "basically",
    "function",
    "derive",
    "encrypted",
    "value",
    "input",
    "ca",
    "vice",
    "versa",
    "different",
    "types",
    "blockchains",
    "exist",
    "three",
    "different",
    "types",
    "blockchains",
    "public",
    "blockchain",
    "private",
    "blockchain",
    "consortium",
    "blockchain",
    "public",
    "blockchain",
    "ledgers",
    "visible",
    "users",
    "internet",
    "user",
    "verify",
    "add",
    "block",
    "transactions",
    "blockchain",
    "basically",
    "publicly",
    "available",
    "anyone",
    "participate",
    "network",
    "get",
    "hooked",
    "examples",
    "bitcoin",
    "ethereum",
    "private",
    "blockchain",
    "ledgers",
    "visible",
    "users",
    "internet",
    "specific",
    "users",
    "organization",
    "verify",
    "ad",
    "transaction",
    "kind",
    "permissioned",
    "blockchain",
    "though",
    "information",
    "available",
    "publicly",
    "controllers",
    "validators",
    "blockchain",
    "within",
    "organizations",
    "example",
    "block",
    "stack",
    "consortium",
    "blockchain",
    "consensus",
    "process",
    "controlled",
    "specific",
    "nodes",
    "however",
    "ledgers",
    "visible",
    "participants",
    "consortium",
    "blockchain",
    "example",
    "ripple",
    "happens",
    "try",
    "deploy",
    "file",
    "multiple",
    "contracts",
    "blockchain",
    "deploying",
    "file",
    "multiple",
    "contracts",
    "possible",
    "compiler",
    "deploys",
    "last",
    "contract",
    "uploaded",
    "file",
    "remaining",
    "contracts",
    "neglected",
    "way",
    "smart",
    "contract",
    "deployed",
    "blockchain",
    "network",
    "interesting",
    "question",
    "genesis",
    "block",
    "important",
    "question",
    "could",
    "asked",
    "interview",
    "multiple",
    "times",
    "basically",
    "genesis",
    "block",
    "first",
    "block",
    "blockchain",
    "also",
    "known",
    "block",
    "zero",
    "see",
    "sequence",
    "number",
    "block",
    "zero",
    "blockchain",
    "block",
    "refer",
    "previous",
    "block",
    "hash",
    "value",
    "previous",
    "block",
    "zeros",
    "first",
    "block",
    "also",
    "defines",
    "parameters",
    "blockchain",
    "level",
    "difficulty",
    "consensus",
    "mechanisms",
    "etc",
    "mine",
    "block",
    "basically",
    "defines",
    "primary",
    "attributes",
    "blockchain",
    "going",
    "get",
    "initiated",
    "genesis",
    "block",
    "onwards",
    "let",
    "look",
    "questions",
    "would",
    "come",
    "intermediate",
    "level",
    "hash",
    "block",
    "signature",
    "generated",
    "blockchain",
    "generate",
    "digital",
    "signature",
    "transaction",
    "details",
    "passed",
    "hashing",
    "function",
    "example",
    "output",
    "value",
    "passed",
    "signature",
    "algorithm",
    "like",
    "ecdsa",
    "user",
    "private",
    "key",
    "encrypted",
    "hash",
    "along",
    "information",
    "hashing",
    "algorithm",
    "called",
    "digitally",
    "signed",
    "document",
    "called",
    "digital",
    "signature",
    "entire",
    "process",
    "generating",
    "digitally",
    "signed",
    "block",
    "list",
    "extensively",
    "used",
    "cryptographic",
    "algorithms",
    "popular",
    "algorithms",
    "extensively",
    "used",
    "bitcoin",
    "uses",
    "ethereum",
    "uses",
    "rsa",
    "one",
    "popular",
    "algorithm",
    "blowfish",
    "triple",
    "des",
    "important",
    "memorize",
    "algorithms",
    "names",
    "algorithms",
    "asked",
    "shu",
    "256",
    "hash",
    "used",
    "two",
    "popular",
    "public",
    "blockchain",
    "networks",
    "smart",
    "contract",
    "list",
    "application",
    "smart",
    "contracts",
    "contracts",
    "basically",
    "digital",
    "contracts",
    "contains",
    "terms",
    "conditions",
    "agreement",
    "two",
    "parties",
    "two",
    "peers",
    "applications",
    "used",
    "transportation",
    "shipment",
    "goods",
    "easily",
    "tracked",
    "using",
    "smart",
    "contracts",
    "movement",
    "goods",
    "exchanging",
    "hands",
    "different",
    "parties",
    "could",
    "need",
    "contract",
    "smart",
    "contract",
    "parties",
    "also",
    "used",
    "protecting",
    "copyrighted",
    "content",
    "like",
    "music",
    "books",
    "literature",
    "written",
    "smart",
    "contracts",
    "protect",
    "ownership",
    "rights",
    "also",
    "used",
    "insurance",
    "used",
    "identify",
    "false",
    "claims",
    "prevent",
    "forgeries",
    "employment",
    "contract",
    "smart",
    "contracts",
    "helpful",
    "facilitate",
    "wage",
    "payments",
    "used",
    "proof",
    "employment",
    "another",
    "important",
    "question",
    "ethereum",
    "network",
    "many",
    "ethereum",
    "networks",
    "familiar",
    "ethereum",
    "blockchain",
    "based",
    "distributed",
    "computing",
    "platform",
    "featuring",
    "smart",
    "contract",
    "functionality",
    "enable",
    "users",
    "create",
    "deploy",
    "decentralized",
    "applications",
    "called",
    "dapps",
    "three",
    "types",
    "network",
    "ethereum",
    "live",
    "network",
    "main",
    "net",
    "couple",
    "test",
    "networks",
    "like",
    "robston",
    "coven",
    "rink",
    "b",
    "also",
    "create",
    "private",
    "network",
    "using",
    "ethereum",
    "smart",
    "contracts",
    "deployed",
    "main",
    "network",
    "publicly",
    "available",
    "used",
    "others",
    "also",
    "test",
    "networks",
    "allows",
    "run",
    "smart",
    "contracts",
    "test",
    "net",
    "validate",
    "gas",
    "used",
    "use",
    "test",
    "networks",
    "main",
    "net",
    "deploy",
    "contracts",
    "verify",
    "decentralized",
    "application",
    "move",
    "main",
    "net",
    "private",
    "networks",
    "connected",
    "main",
    "network",
    "run",
    "within",
    "premises",
    "organization",
    "carry",
    "features",
    "ethereum",
    "network",
    "nodes",
    "run",
    "smart",
    "contract",
    "code",
    "nodes",
    "run",
    "smart",
    "contract",
    "codes",
    "ethereum",
    "virtual",
    "machine",
    "virtual",
    "machine",
    "designed",
    "operate",
    "runtime",
    "environment",
    "ethereum",
    "based",
    "smart",
    "contracts",
    "evm",
    "operated",
    "sandbox",
    "environment",
    "isolated",
    "main",
    "net",
    "perfect",
    "testing",
    "environment",
    "download",
    "evm",
    "run",
    "smart",
    "contact",
    "locally",
    "isolated",
    "manner",
    "tested",
    "verified",
    "deploy",
    "mainline",
    "important",
    "good",
    "question",
    "adapt",
    "different",
    "normal",
    "application",
    "need",
    "understand",
    "differences",
    "thoroughly",
    "order",
    "clear",
    "interview",
    "adap",
    "decentralized",
    "application",
    "deployed",
    "using",
    "smart",
    "contract",
    "information",
    "dap",
    "distributed",
    "shared",
    "normal",
    "application",
    "centralized",
    "database",
    "running",
    "centralized",
    "server",
    "single",
    "server",
    "single",
    "code",
    "maintaining",
    "entire",
    "application",
    "information",
    "shared",
    "single",
    "point",
    "failure",
    "dapp",
    "backend",
    "code",
    "smart",
    "contract",
    "runs",
    "decentralized",
    "network",
    "normal",
    "application",
    "typical",
    "computer",
    "software",
    "application",
    "hosted",
    "central",
    "server",
    "see",
    "differences",
    "process",
    "front",
    "end",
    "middle",
    "smart",
    "contract",
    "acting",
    "back",
    "end",
    "code",
    "entire",
    "transaction",
    "executed",
    "smart",
    "contract",
    "shared",
    "blockchain",
    "participants",
    "p2p",
    "network",
    "whereas",
    "normal",
    "application",
    "front",
    "end",
    "interacts",
    "centralized",
    "api",
    "performs",
    "basic",
    "crud",
    "operations",
    "create",
    "read",
    "update",
    "delete",
    "centralized",
    "database",
    "single",
    "copy",
    "information",
    "name",
    "leading",
    "open",
    "source",
    "platforms",
    "developing",
    "blockchain",
    "applications",
    "ethereum",
    "one",
    "popular",
    "platforms",
    "building",
    "applications",
    "widely",
    "getting",
    "adopted",
    "aeris",
    "also",
    "used",
    "building",
    "solutions",
    "also",
    "widely",
    "used",
    "platforms",
    "building",
    "blockchain",
    "listed",
    "hyperledger",
    "open",
    "chain",
    "available",
    "market",
    "first",
    "thing",
    "must",
    "specify",
    "solidity",
    "file",
    "necessary",
    "specify",
    "version",
    "number",
    "solidity",
    "beginning",
    "code",
    "eliminates",
    "incompatibility",
    "errors",
    "arise",
    "compiling",
    "another",
    "version",
    "mandatory",
    "clause",
    "top",
    "solidity",
    "code",
    "write",
    "need",
    "mention",
    "correct",
    "version",
    "number",
    "written",
    "code",
    "difference",
    "bitcoin",
    "ethereum",
    "important",
    "question",
    "also",
    "ask",
    "lot",
    "interviews",
    "important",
    "remember",
    "differences",
    "bitcoin",
    "concept",
    "purely",
    "p2p",
    "currency",
    "based",
    "transaction",
    "ethereum",
    "p2p",
    "currency",
    "transaction",
    "plus",
    "deploy",
    "smart",
    "contracts",
    "bitcoin",
    "primarily",
    "working",
    "proof",
    "work",
    "consensus",
    "mechanism",
    "ethereum",
    "shifting",
    "proof",
    "work",
    "proof",
    "stake",
    "bitcoin",
    "uses",
    "hashing",
    "algorithm",
    "whereas",
    "ethereum",
    "uses",
    "hash",
    "time",
    "taken",
    "mine",
    "block",
    "currently",
    "bitcoin",
    "approximately",
    "10",
    "minutes",
    "whereas",
    "ethereum",
    "gets",
    "processed",
    "12",
    "15",
    "seconds",
    "reward",
    "mining",
    "bitcoin",
    "today",
    "bitcoin",
    "whereas",
    "ethereum",
    "three",
    "ethers",
    "plus",
    "transaction",
    "fees",
    "bitcoin",
    "transaction",
    "fees",
    "optional",
    "whereas",
    "ethereum",
    "fees",
    "calculated",
    "based",
    "gas",
    "consumed",
    "smart",
    "contract",
    "per",
    "transaction",
    "value",
    "bitcoin",
    "21st",
    "august",
    "captured",
    "6934",
    "us",
    "dollars",
    "whereas",
    "ethereum",
    "stands",
    "278",
    "dollars",
    "nonce",
    "used",
    "mining",
    "blockchain",
    "mining",
    "process",
    "validate",
    "transactions",
    "solving",
    "difficult",
    "mathematical",
    "puzzle",
    "called",
    "proof",
    "work",
    "proof",
    "work",
    "process",
    "determine",
    "number",
    "nonce",
    "number",
    "along",
    "cryptographic",
    "hash",
    "algorithm",
    "produce",
    "hash",
    "value",
    "lower",
    "predefined",
    "target",
    "nonce",
    "random",
    "value",
    "used",
    "vary",
    "hash",
    "value",
    "final",
    "hash",
    "value",
    "meets",
    "hashing",
    "condition",
    "nonce",
    "value",
    "generated",
    "miner",
    "order",
    "guess",
    "hash",
    "value",
    "less",
    "target",
    "value",
    "miner",
    "claim",
    "reward",
    "mining",
    "bitcoin",
    "network",
    "btc",
    "ethereum",
    "network",
    "three",
    "ethers",
    "let",
    "look",
    "advanced",
    "level",
    "questions",
    "name",
    "steps",
    "involved",
    "blockchain",
    "project",
    "implementation",
    "typical",
    "blockchain",
    "based",
    "project",
    "implementation",
    "start",
    "requirement",
    "identification",
    "need",
    "understand",
    "problem",
    "goal",
    "need",
    "identify",
    "suitable",
    "consensus",
    "mechanism",
    "suitable",
    "platform",
    "solve",
    "problem",
    "identify",
    "implementation",
    "deployment",
    "cost",
    "need",
    "give",
    "roi",
    "client",
    "move",
    "planning",
    "stage",
    "step",
    "individual",
    "evaluates",
    "requirements",
    "list",
    "prioritize",
    "decides",
    "suitable",
    "blockchain",
    "platform",
    "used",
    "implement",
    "particular",
    "problem",
    "kicks",
    "development",
    "implementation",
    "project",
    "design",
    "architecture",
    "design",
    "user",
    "interfaces",
    "start",
    "building",
    "apis",
    "comes",
    "controlling",
    "monitoring",
    "project",
    "apply",
    "proof",
    "concept",
    "start",
    "start",
    "building",
    "application",
    "top",
    "basic",
    "version",
    "application",
    "available",
    "start",
    "identifying",
    "bugs",
    "start",
    "fixing",
    "explain",
    "real",
    "life",
    "use",
    "case",
    "blockchain",
    "used",
    "supply",
    "chain",
    "biggest",
    "adopter",
    "blockchain",
    "see",
    "raw",
    "material",
    "moves",
    "exchanged",
    "different",
    "entities",
    "supply",
    "chain",
    "traceability",
    "particular",
    "digital",
    "asset",
    "case",
    "raw",
    "material",
    "big",
    "case",
    "study",
    "blockchain",
    "supply",
    "chain",
    "management",
    "smart",
    "contracts",
    "provide",
    "permanent",
    "transparency",
    "traceability",
    "validation",
    "transaction",
    "shared",
    "multiple",
    "supply",
    "chain",
    "partners",
    "level",
    "supply",
    "chain",
    "partner",
    "register",
    "transaction",
    "receives",
    "product",
    "passes",
    "basically",
    "purchaser",
    "consuming",
    "end",
    "product",
    "see",
    "entire",
    "journey",
    "product",
    "list",
    "explain",
    "parts",
    "evm",
    "memory",
    "memory",
    "evm",
    "divided",
    "three",
    "parts",
    "storage",
    "memory",
    "stack",
    "storage",
    "values",
    "stored",
    "permanently",
    "blockchain",
    "network",
    "extremely",
    "expensive",
    "whenever",
    "try",
    "modify",
    "storage",
    "based",
    "variable",
    "would",
    "pay",
    "gas",
    "memory",
    "variables",
    "temporary",
    "modifiable",
    "storage",
    "area",
    "accessed",
    "contract",
    "execution",
    "execution",
    "finished",
    "data",
    "wiped",
    "vanished",
    "lost",
    "stack",
    "way",
    "temporary",
    "storage",
    "execution",
    "completed",
    "content",
    "lost",
    "basically",
    "memory",
    "stack",
    "relatively",
    "much",
    "cheaper",
    "storage",
    "variables",
    "happens",
    "execution",
    "smart",
    "contract",
    "costs",
    "specified",
    "gas",
    "initially",
    "transaction",
    "executed",
    "execution",
    "smart",
    "contract",
    "costs",
    "specified",
    "gas",
    "miners",
    "stop",
    "validating",
    "contract",
    "blockchain",
    "record",
    "transaction",
    "fail",
    "highlighted",
    "also",
    "user",
    "get",
    "refund",
    "becomes",
    "utmost",
    "important",
    "deploying",
    "smart",
    "contract",
    "calculation",
    "gas",
    "consumption",
    "correct",
    "fashion",
    "gas",
    "usage",
    "transaction",
    "depend",
    "transaction",
    "fee",
    "calculated",
    "gas",
    "usage",
    "depends",
    "upon",
    "amount",
    "storage",
    "using",
    "using",
    "storage",
    "based",
    "variables",
    "cost",
    "transactions",
    "high",
    "gas",
    "high",
    "set",
    "instruction",
    "codes",
    "use",
    "smart",
    "contract",
    "basically",
    "operations",
    "performing",
    "storage",
    "based",
    "variables",
    "either",
    "costly",
    "using",
    "huge",
    "amount",
    "storage",
    "variables",
    "automatically",
    "cost",
    "smart",
    "contract",
    "keep",
    "increasing",
    "basically",
    "transaction",
    "fee",
    "calculated",
    "ethers",
    "given",
    "gas",
    "price",
    "determined",
    "smart",
    "contract",
    "multiplied",
    "gas",
    "limit",
    "transaction",
    "fee",
    "evaluated",
    "fork",
    "types",
    "forking",
    "simple",
    "terms",
    "updating",
    "cryptocurrency",
    "protocol",
    "code",
    "called",
    "forking",
    "fork",
    "implies",
    "blockchain",
    "splits",
    "two",
    "branches",
    "done",
    "want",
    "modify",
    "certain",
    "attributes",
    "existing",
    "blockchain",
    "network",
    "happen",
    "participants",
    "network",
    "come",
    "agreement",
    "regards",
    "either",
    "consensus",
    "algorithm",
    "want",
    "new",
    "rules",
    "validation",
    "three",
    "types",
    "forking",
    "heart",
    "forking",
    "soft",
    "forking",
    "accidental",
    "force",
    "difference",
    "proof",
    "work",
    "versus",
    "proof",
    "stake",
    "important",
    "question",
    "blockchain",
    "proof",
    "work",
    "process",
    "solving",
    "complex",
    "mathematical",
    "puzzle",
    "called",
    "mining",
    "whereas",
    "proof",
    "stake",
    "alternative",
    "proof",
    "work",
    "blockchain",
    "aims",
    "achieve",
    "distributed",
    "consensus",
    "proof",
    "work",
    "probability",
    "mining",
    "block",
    "based",
    "upon",
    "amount",
    "computational",
    "work",
    "done",
    "miner",
    "basically",
    "consumes",
    "huge",
    "amount",
    "resources",
    "electricity",
    "resources",
    "computational",
    "resources",
    "miner",
    "whereas",
    "proof",
    "take",
    "probability",
    "validating",
    "block",
    "relies",
    "upon",
    "amount",
    "token",
    "beforehand",
    "tokens",
    "chance",
    "get",
    "validate",
    "block",
    "basically",
    "proof",
    "stock",
    "introduced",
    "order",
    "reduce",
    "pressure",
    "resources",
    "put",
    "consensus",
    "algorithm",
    "miners",
    "spend",
    "lot",
    "computing",
    "power",
    "solving",
    "cryptographic",
    "puzzle",
    "along",
    "hardware",
    "huge",
    "cost",
    "basically",
    "proof",
    "stake",
    "created",
    "solution",
    "minimize",
    "use",
    "expensive",
    "resources",
    "spent",
    "mining",
    "51",
    "attack",
    "blockchain",
    "51",
    "attack",
    "refers",
    "vulnerability",
    "individual",
    "group",
    "people",
    "control",
    "majority",
    "mining",
    "power",
    "hash",
    "rate",
    "basically",
    "take",
    "50",
    "percent",
    "blockchain",
    "network",
    "would",
    "allow",
    "attackers",
    "prevent",
    "new",
    "transactions",
    "confirmed",
    "double",
    "spend",
    "coins",
    "51",
    "attack",
    "smaller",
    "cryptocurrencies",
    "primarily",
    "attacked",
    "huge",
    "network",
    "small",
    "consumer",
    "base",
    "water",
    "function",
    "modifiers",
    "solidity",
    "mentioned",
    "widely",
    "used",
    "modifiers",
    "solidity",
    "function",
    "modifiers",
    "used",
    "easily",
    "modify",
    "behavior",
    "smart",
    "contract",
    "associated",
    "function",
    "whenever",
    "function",
    "called",
    "modifier",
    "called",
    "main",
    "function",
    "simple",
    "terms",
    "build",
    "additional",
    "features",
    "apply",
    "restrictions",
    "function",
    "smart",
    "contracts",
    "extensively",
    "used",
    "function",
    "modifiers",
    "solidity",
    "view",
    "view",
    "functions",
    "functions",
    "modify",
    "state",
    "smart",
    "contract",
    "read",
    "functions",
    "example",
    "function",
    "get",
    "simply",
    "learn",
    "name",
    "modifier",
    "view",
    "returns",
    "value",
    "allowed",
    "use",
    "inbuilt",
    "solidity",
    "functions",
    "like",
    "case",
    "pure",
    "pure",
    "functions",
    "functions",
    "neither",
    "read",
    "write",
    "state",
    "smart",
    "contracts",
    "return",
    "result",
    "determined",
    "input",
    "variables",
    "basically",
    "even",
    "access",
    "inbuilt",
    "functions",
    "solidity",
    "function",
    "called",
    "calculate",
    "use",
    "input",
    "variables",
    "use",
    "inbuilt",
    "functions",
    "also",
    "solidity",
    "let",
    "take",
    "look",
    "example",
    "order",
    "write",
    "crowd",
    "sales",
    "smart",
    "contract",
    "code",
    "solidity",
    "programming",
    "language",
    "example",
    "smart",
    "contract",
    "defined",
    "certain",
    "smart",
    "contract",
    "variables",
    "solidity",
    "like",
    "address",
    "went",
    "address",
    "function",
    "want",
    "send",
    "token",
    "someone",
    "uint",
    "funding",
    "goal",
    "ethers",
    "basically",
    "much",
    "amount",
    "ethers",
    "want",
    "generate",
    "crowd",
    "sale",
    "project",
    "duration",
    "project",
    "cost",
    "token",
    "ethers",
    "address",
    "token",
    "used",
    "reward",
    "primary",
    "attributes",
    "defined",
    "public",
    "functions",
    "defined",
    "beneficiary",
    "successfully",
    "sent",
    "funding",
    "goal",
    "deadline",
    "crowd",
    "sale",
    "price",
    "default",
    "function",
    "defined",
    "solidity",
    "contract",
    "function",
    "name",
    "called",
    "default",
    "smart",
    "contract",
    "anyone",
    "invokes",
    "method",
    "smart",
    "contract",
    "exist",
    "function",
    "making",
    "sure",
    "amount",
    "passed",
    "smart",
    "contract",
    "passed",
    "address",
    "basically",
    "originator",
    "crowdsale",
    "function",
    "crowdsale",
    "smart",
    "contract",
    "receiving",
    "amount",
    "crowdsale",
    "smart",
    "contract",
    "method",
    "called",
    "safe",
    "withdrawal",
    "appended",
    "modifier",
    "called",
    "deadline",
    "basically",
    "checks",
    "withdrawal",
    "deadline",
    "achieved",
    "function",
    "checking",
    "balance",
    "withdrawing",
    "amount",
    "sender",
    "transferring",
    "account",
    "sender",
    "sent",
    "amount",
    "basic",
    "validations",
    "whether",
    "sender",
    "balance",
    "transfer",
    "account",
    "thanks",
    "saurabh",
    "hope",
    "help",
    "interviews",
    "reached",
    "end",
    "complete",
    "blockchain",
    "tutorial",
    "simplylearn",
    "hope",
    "guys",
    "enjoyed",
    "video",
    "like",
    "share",
    "thank",
    "watching",
    "stay",
    "tuned",
    "simplylearn",
    "music"
  ],
  "keywords": [
    "complete",
    "blockchain",
    "simply",
    "learn",
    "name",
    "next",
    "hours",
    "need",
    "know",
    "five",
    "bitcoin",
    "cryptocurrencies",
    "first",
    "go",
    "works",
    "cryptocurrency",
    "different",
    "types",
    "market",
    "available",
    "ethereum",
    "smart",
    "contracts",
    "work",
    "process",
    "mining",
    "wallets",
    "look",
    "tell",
    "10",
    "things",
    "talk",
    "popular",
    "applications",
    "become",
    "developer",
    "finally",
    "important",
    "questions",
    "might",
    "face",
    "interview",
    "make",
    "sure",
    "click",
    "way",
    "let",
    "video",
    "transactions",
    "without",
    "online",
    "banks",
    "well",
    "possible",
    "thanks",
    "imagine",
    "four",
    "jack",
    "phil",
    "done",
    "amongst",
    "day",
    "share",
    "money",
    "transfer",
    "transaction",
    "goes",
    "send",
    "shares",
    "bank",
    "comes",
    "many",
    "could",
    "due",
    "one",
    "accounts",
    "hacked",
    "like",
    "associated",
    "solve",
    "problems",
    "concept",
    "form",
    "digital",
    "virtual",
    "currency",
    "run",
    "technology",
    "known",
    "central",
    "authority",
    "encryption",
    "algorithms",
    "cash",
    "back",
    "previous",
    "example",
    "two",
    "bitcoins",
    "three",
    "record",
    "created",
    "block",
    "details",
    "also",
    "holds",
    "number",
    "following",
    "new",
    "blocks",
    "linked",
    "takes",
    "owns",
    "chain",
    "records",
    "called",
    "ledger",
    "shared",
    "among",
    "public",
    "distributed",
    "happens",
    "left",
    "tries",
    "invalid",
    "hacker",
    "able",
    "data",
    "user",
    "copy",
    "within",
    "encrypted",
    "made",
    "help",
    "using",
    "cryptography",
    "find",
    "every",
    "network",
    "keys",
    "key",
    "private",
    "address",
    "everyone",
    "email",
    "unique",
    "something",
    "password",
    "wants",
    "along",
    "wallet",
    "hashing",
    "algorithm",
    "part",
    "digitally",
    "sign",
    "output",
    "across",
    "world",
    "message",
    "use",
    "uses",
    "several",
    "similar",
    "ones",
    "taking",
    "place",
    "around",
    "validated",
    "added",
    "people",
    "validate",
    "miners",
    "mathematical",
    "problem",
    "miner",
    "rewarded",
    "solving",
    "proof",
    "updated",
    "person",
    "concepts",
    "time",
    "small",
    "altered",
    "users",
    "b",
    "stake",
    "hash",
    "us",
    "right",
    "saurabh",
    "get",
    "started",
    "today",
    "understand",
    "demo",
    "entities",
    "want",
    "order",
    "third",
    "party",
    "trust",
    "high",
    "fees",
    "internet",
    "based",
    "see",
    "means",
    "fee",
    "amount",
    "compared",
    "account",
    "hundred",
    "dollars",
    "end",
    "thousand",
    "attack",
    "access",
    "difficult",
    "centralized",
    "system",
    "single",
    "information",
    "easy",
    "multiple",
    "nodes",
    "solved",
    "used",
    "receive",
    "decentralized",
    "say",
    "less",
    "involved",
    "thereby",
    "cost",
    "identity",
    "secure",
    "signed",
    "therefore",
    "becomes",
    "underlying",
    "database",
    "immutable",
    "secured",
    "recorded",
    "changed",
    "contains",
    "given",
    "aggregated",
    "set",
    "verified",
    "basically",
    "primary",
    "take",
    "list",
    "value",
    "nonce",
    "signature",
    "connected",
    "random",
    "generated",
    "target",
    "identify",
    "always",
    "genesis",
    "consider",
    "try",
    "change",
    "2",
    "valid",
    "particular",
    "feature",
    "helps",
    "elsa",
    "sent",
    "verify",
    "typical",
    "create",
    "result",
    "receiving",
    "receives",
    "kind",
    "asset",
    "features",
    "involves",
    "consensus",
    "usage",
    "256",
    "cryptographic",
    "identities",
    "function",
    "bit",
    "memory",
    "input",
    "minor",
    "together",
    "completely",
    "give",
    "pass",
    "simple",
    "terms",
    "makes",
    "kept",
    "someone",
    "yes",
    "sender",
    "entire",
    "verification",
    "passed",
    "case",
    "document",
    "plus",
    "generate",
    "node",
    "verifying",
    "validating",
    "view",
    "talking",
    "sending",
    "john",
    "gets",
    "ledgers",
    "said",
    "anyone",
    "modify",
    "determine",
    "predefined",
    "main",
    "leading",
    "zeros",
    "huge",
    "computing",
    "power",
    "values",
    "add",
    "puzzle",
    "whole",
    "hardware",
    "machine",
    "reward",
    "mentioned",
    "mined",
    "minutes",
    "difficulty",
    "maintained",
    "much",
    "taken",
    "candidate",
    "pool",
    "stored",
    "start",
    "subsequent",
    "creating",
    "current",
    "half",
    "000",
    "approximately",
    "whenever",
    "voting",
    "transparency",
    "supply",
    "attributes",
    "traceability",
    "point",
    "course",
    "easily",
    "insurance",
    "companies",
    "organizations",
    "company",
    "flight",
    "provide",
    "transparent",
    "track",
    "learned",
    "type",
    "level",
    "already",
    "job",
    "suppose",
    "mine",
    "processing",
    "soon",
    "needs",
    "another",
    "thing",
    "per",
    "regular",
    "blockchains",
    "modified",
    "participants",
    "examples",
    "fashion",
    "would",
    "check",
    "even",
    "banking",
    "higher",
    "costs",
    "lot",
    "required",
    "customer",
    "ca",
    "failure",
    "come",
    "happen",
    "parties",
    "wrong",
    "cyber",
    "security",
    "systems",
    "making",
    "functions",
    "onto",
    "stores",
    "publicly",
    "controlled",
    "participant",
    "ensuring",
    "computer",
    "question",
    "introduced",
    "2009",
    "group",
    "satoshi",
    "nakamoto",
    "fiat",
    "currencies",
    "explain",
    "receiver",
    "whether",
    "balance",
    "trying",
    "executed",
    "going",
    "approved",
    "resources",
    "however",
    "others",
    "since",
    "majority",
    "members",
    "registered",
    "version",
    "working",
    "second",
    "certain",
    "header",
    "merkle",
    "root",
    "tree",
    "binary",
    "perform",
    "size",
    "changes",
    "exchange",
    "structure",
    "definitely",
    "ensure",
    "steps",
    "side",
    "step",
    "conditions",
    "keep",
    "requirement",
    "accepted",
    "minus",
    "hard",
    "expensive",
    "electricity",
    "truffle",
    "ganache",
    "build",
    "kyc",
    "application",
    "deploy",
    "deploying",
    "primarily",
    "allow",
    "solidity",
    "contract",
    "necessary",
    "folder",
    "file",
    "command",
    "compile",
    "client",
    "running",
    "100",
    "ether",
    "connect",
    "deployed",
    "code",
    "ethers",
    "basic",
    "id",
    "log",
    "allows",
    "api",
    "environment",
    "quick",
    "app",
    "byzantine",
    "getting",
    "future",
    "decision",
    "requirements",
    "maintain",
    "general",
    "lieutenants",
    "retreat",
    "traitor",
    "giving",
    "scenario",
    "limit",
    "percent",
    "fork",
    "difference",
    "agreement",
    "rules",
    "exist",
    "either",
    "software",
    "move",
    "protocols",
    "voter",
    "vote",
    "votes",
    "quality",
    "increase",
    "faster",
    "normal",
    "networks",
    "project",
    "rating",
    "installed",
    "trough",
    "gas",
    "goods",
    "services",
    "mobile",
    "went",
    "paper",
    "coins",
    "pay",
    "funds",
    "real",
    "21",
    "million",
    "met",
    "method",
    "computational",
    "top",
    "major",
    "open",
    "platform",
    "building",
    "widely",
    "life",
    "manual",
    "condition",
    "attacks",
    "organization",
    "enables",
    "developers",
    "development",
    "provides",
    "execution",
    "payments",
    "traditional",
    "programming",
    "language",
    "evm",
    "execute",
    "automatically",
    "read",
    "defined",
    "test",
    "net",
    "languages",
    "goal",
    "spend",
    "unit",
    "price",
    "whereas",
    "web",
    "token",
    "management",
    "funding",
    "tokens",
    "proposal",
    "advantages",
    "implementation",
    "crowdfunding",
    "intermediaries",
    "low",
    "eliminates",
    "rachel",
    "delay",
    "etc",
    "cold",
    "cloud",
    "desktop",
    "server",
    "storage",
    "product",
    "core",
    "hyperledger",
    "content",
    "variables"
  ]
}