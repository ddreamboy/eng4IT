{
  "text": "hey what's going on everybody it's bro\nhope you're doing well\nand in this video i'm going to help you\nget started with python so\nsit back relax and enjoy the show\nif you wouldn't mind please like comment\nand subscribe\none like equals one prayer for the\nyoutube algorithm\ni'm gonna tell you why you need to learn\npython it's the easiest programming\nlanguage to learn as well as being the\nmost popular in the world right now\nand according to glassdoor the salary\nfor new python developers in the united\nstates is\n64 000 if any of this sounds good to you\nwell then\nlet's get started if you need to\ndownload python go to\npython.org downloads and click this\nyellow download python\nbutton open when done check add\npython 3.9 or another version to path\ninstall now and then give it a little\nbit it states here that setup was\nsuccessful so let's close out of this\nour next step is to download an ide\nthat's an acronym for\nintegrated development environment think\nof it as\nsoftware that helps us write other\nsoftware one ide that i recommend\nis pycharm you can find it at\njetbrains.com\npycharm go to download if you would like\nto pay for a professional version you\ncan click\nthis download button but since i don't\nlike to pay for things i'm going to use\nthe free community version at this point\nwe just have to follow the standard\ninstallation procedure\nclick next you can pick a destination\nfolder but i'll keep the default\nnext if you would like a desktop\nshortcut\nthen check this i would also recommend\nupdating the\npath variable next\ninstall and then give it a minute or two\nthen after finishing i have a desktop\nshortcut so i can just click on this to\nrun pycharm\nlet's create a new project name this\nproject whatever you like i'm going to\nname this project\nhello world and i recommend not creating\na\nmain dot pi welcome script right now\ni'll show you how to do that manually\nand let's create\nif you need a python file to work with\nthis is how to create one go to\nfile new python file and i'm going to\nname\nthis main and then click python file\nall right ladies and gentlemen we now\nhave an empty python script that we can\nuse to begin coding\nnow if you checked this box create a\nmain.pi welcome script and then created\na new project\nthen your main python file will probably\nlook a little something like this but\nthat's completely fine we can just\ndelete this\ni don't know about you guys but the font\nis very small for me\nso let's change that we can change that\nby going to file\nsettings editor font and you can\nincrease the font size\nlet's say 25 you can also change the\nfont too\nwhat's a good one uh how about\nthat then click apply and\nokay much better we can actually see\nsomething\nto run a python script just click the\nscreen play button in the corner\nalternatively you can go to the run tab\nand then go to run\nokay so this box that appeared at the\nbottom this is referred to as a terminal\nwindow this will display\nany output that your program has and\nthis line at the end\nprocess finished with exit code zero\nthat just means that there were no\nerrors in this program\nso currently this program doesn't do\nanything but let's change that let's\nprint something\nlet's print a message so to print a\nmessage to the terminal window\ntype print and then add a set of\nparentheses\nand then you can type a message but it\nhas to be within quotes\neither double quotes or single quotes it\ndoesn't matter\nso let's think of a message i don't know\ni\nlove pizza then let me run this\nand in my terminal window it says i love\npizza\nto print another line just add another\nprint statement\nprint and then your message within\nquotes\nit's really good\nand well what do you know it printed i\nlove pizza\nit's really good so ladies and gentlemen\nyou just wrote your first python program\nby the way you can change the font as\nwell as the font color of your terminal\nwindow by going to\nfile settings then go to editor\ncolor scheme console font and console\ncolors\nlet's change the font let's say i would\nlike\nwhatever this font is then click apply\nlet's change the font color too by going\nto console colors\nfor any output you can click number two\nand select a color let's say i would\nlike\nbright green that should be decent\nand for anything else let's say this\nwill be a dark color so i can barely see\nit\nso then let's click apply and okay\noh yeah that's much better well\neverybody that was your very first\npython program i'll post\nany useful links and timestamps for this\nvideo in the comments section down below\nbut yeah welcome to coding with python\nhey you yeah i'm talking to you if you\nlearned something new\nthen help me help you in three easy\nsteps\nby smashing that like button drop a\ncomment down below\nand subscribe if you'd like to become a\nfellow bro\n[Music]\nhey what's going on everybody it's bro\nhope you're doing well and in this video\ni'm going to explain how\nvariables work in python so sit back\nrelax\nand enjoy the show\nif you find this video helpful please\nremember to like\ncomment and subscribe your support will\nhelp keep this channel running\nall right let's do this a variable is a\ncontainer for a value it behaves as the\nvalue that it contains\nit's much like in algebra lessons back\nin the day where we had to solve for\nwhatever value\nx was and then we can reuse x and it\nbehaved exactly as that value\nwell with programming we can do that\nplus we can assign variables of\ndifferent data types\nso they are not limited to just numbers\nwe can assign whole words\nnumbers and even these things called\nbooleans which are either true or false\nbut i'll get more in depth into data\ntypes a little bit later on in this\nvideo\nso let's create a variable and this is\nhow to do so we need a unique name for\nthis variable\nlet's say name name equals some value\nnow the first data type that we'll cover\nis strings a string\nis a series of characters so to create a\nstring\nwe can either use single quotes or\ndouble quotes in python\nand we can assign this a value of\nwhatever your own name is\nso i will assign this variable name a\nvalue of bro\nnow this variable will behave exactly as\nif it was\nthis value this name and then we can\nreuse this variable for something\nso let's print whatever our name is\nprint\nname and this will print whatever your\nname is to the console window\nnow when you print your variable make\nsure you don't put it within quotes\nbecause what we're doing then is\nliterally printing\nthe word name as you can see here so\nif you need to use your variable for\nsomething make sure it's not within\nquotes\nnow we can combine our string variable\nwith another string so within our print\nstatement let's print\na string literal such as hello space\nplus name so we are combining strings\nand then we're printing the results to\nthe console window so this will print\nhello bro now you can actually check the\ndata type of a variable\nso i'm going to turn this line into a\ncomment so what you'll do\nis take the name of the variable\nsurround this with a set of parentheses\nand then precede the set of parentheses\nwith the type\nfunction and this will print the data\ntype of this variable to the console\nwindow\nand you can see that it says class str\nshort for string\na string is a series of characters a\nname is a good example of a string\na series of characters so that is how to\ncheck the data type\nof a variable just use the type function\nnow you can actually combine variables\ntogether as long as they're of the same\ndata type so let's change our name to\nmaybe first name and we'll create a\nsecond variable called lastname\nnow a common naming convention with\nvariables if it has\ntwo words separate each word with an\nunderscore\nit's not necessary but it's common\npractice for python and honestly i\nsometimes forget about that but don't\ntell anybody\nso let's create another variable called\nlast name last\nname equals whatever your last name is\nand then let's create a third variable\ncalled full name\nfull underscore name and let's combine\nfirst name plus last\nname and let us display full name\nalong with hello plus full name\nnow these two names were combined\ntogether to create a whole\nnew variable actually what i think i'll\ndo is add a space\nwithin my variable so i'm doing a bunch\nof string concatenation i'm combining\nthe variable first name plus a space\ncharacter plus\nlast name so the result is hello\nwhatever your first name and last name\nis\nso that is a variable of the string data\ntype it is a series of characters\nnow with strings we cannot normally use\nthese for any sort of math\nthat's where the next data type comes in\nfor the time being i just turned all of\nthese lines into comments and we are\ngoing to move on to the int\ndata type short for integer this time\nlet's create a variable called\nage and we will assign this a value of\nwhatever your age is\nlet's just say that i'm 21 now when you\nassign\na value of the int data type make sure\nthat it is\nnot within quotes because then\ntechnically it would be a string then\nand you can see that the color scheme\nfor this number actually changed\nso if this was a string we would treat\nit different\nthan an int data type because with\nstrings we cannot normally use them for\nany sort of math\nso we now have a variable called edge\nand we can actually\nincrease or decrease or do whatever we\nwant with the edge\nlet's increase our age by one let's say\nit's our birthday to do so we would say\nage\nequals age plus one and then let's print\nour edge to the console window\nprint edge and you can see that it says\ni am 22.\nnow there's a shorthand way of writing\nthis what you'll do is type\nage plus equals one so that's kind of\nlike a shortcut and this would work the\nsame too\nnow let's print the data type of our\ninch variable because we can within a\nprint statement i will print the edge\nand add my edge variable to this type\nfunction and this will print the data\ntype of my edge variable to the console\nwindow\nand i will turn this line into a comment\njust so that it doesn't get in the way\nnow if i were to print the data type of\nmy age variable\nas you can see it is of the int data\ntype short for integer\nit only stores a whole integer number\nnow what if this was a string so what\ni'm going to do\nis surround my value within a set of\nquotes\nand i will turn this line into a comment\nso that it does not get in the way\nyou can see that the data type of my age\nvariable is now\na string and with strings we cannot\nnormally use them for any sort of math\nso let's attempt to increase our age\nvariable by one\nand we ran into an error a type air can\nonly concatenate string\nto string not end now the point being is\nthat\nit's important to use the appropriate\ndata type because\nwith strings we cannot normally use them\nfor any sort of math you'll want to use\na data type of a numeric value\nan int or a float which we'll discuss a\nlittle bit later now here's a situation\nto consider\nwhat if we would like to display our\nedge variable along with a string\nliteral much like what we did with this\nline involving a string literal such as\nhello\nplus the user's full name so let's\nattempt to do so and this is not going\nto work and i'll explain why\nso within our print statement let's say\nsomething such as\nyour age is plus\nedge now we're going to run into a type\nerror\nthat's because we attempted to use\nstring concatenation with a string\nliteral\nand a variable of a different data type\na variable of the\nint data type in order to display our\nedge along with the string we would need\nto convert our edge variable to the\nstring\ndata type and one way in which we can do\nthat is by type casting\nand we'll cover this more in the next\nvideo so we're going to surround\nour age variable that is of the in data\ntype with a set of parentheses\nand precede this with str short for\nstring and this will convert our\nvariable\nto a string that will allow us to\ndisplay it with another string\nnow if we were to run this program this\nway this will now display\nyour age is and in this case 22 so if\nyou need to display a variable of a\ndifferent data type\nalong with the string you would just\nneed to use a stringcast to convert that\ndata type to a string\nbut we'll cover this more in the next\nvideo on typecasting\nso that is the int data type it stores a\nwhole integer number and the next data\ntype is the\nfloat data type and i'm going to turn\nthese lines into comments and we can\nmove on\nnow the float data type is a numeric\nvalue that can store\na number that includes a decimal portion\nan int data type cannot store a decimal\nportion that's why it's in\nshort for integer it only stores a whole\nnumber this time let's say we have a\nheight\nand i will assign this a perfectly\nnormal height of maybe 250.5\ncentimeters so this decimal portion is\nimportant\nthat's indicating that this is a\nfloating point number a float for short\nso let's print our height to the console\nwindow print\nheight and this will print whatever my\nheight is and now\nlet's check the type of our height using\nthe type function\nso within a print statement i'm going to\nadd my height\nsurround this with another set of\nparentheses and precede this\nwith the type function and the data type\nof my variable height is a float short\nfor a floating point number\na numeric value that contains a decimal\nportion\nand now for practice let's print our\nheight along with a string\nliteral so let's create a string literal\nsuch as\nyour height is\nplus height but guess what we're going\nto do some type casting\nso surround height with a set of\nparentheses and precede this with\nstr so that we convert height to a\nstring so that we can use\nstring concatenation within this print\nstatement and this will print the\nmessage\nyour height is 250.5 actually let's add\ncentimeters to the end so\nplus cm\nand there we go and that is what a\nfloating point number is\nfloat for short it is a numeric value\nthat contains a decimal portion\nnow the last data type that we're going\nto cover is the boolean\ndata type it is a variable that can only\nstore true\nor false let's say we have a variable\ncalled human\nif we were to assign this a boolean\nvalue this would be either true or\nfalse and we can print whatever this\nvalue is let's print whatever\nhuman is and this will display false now\nthe reason that you may want to use\nbooleans instead of strings even though\nyou can still store\na string representation of the word\nfalse or true\nis that these are very useful when we\nget to if statements\nwe can check to see if some statement is\ntrue so that is a good use of\nboolean values now let's check the data\ntype of\nmy human variable so let's print\ntype human and this will print to the\nconsole window\nbool short for boolean now make sure\nyou're not putting this within quotes\nbecause then it's technically a string\nand they behave differently\nnow the data type is a string and you\nmay have noticed as well that the font\ncolor has changed between\nstrings and boolean values so that's\nanother good indicator\nnow what if you need to display your\nvalue along with a string using string\nconcatenation\nwell guess what we're going to typecast\nagain so let's print something\nr u a human\nso we need to use string concatenation\nso i will convert\nmy boolean variable of human to a string\nand i have been programmed to inform you\nthat\nyes i am in fact a human that is true\nwell everyone\nthat is the basics of variables it is a\ncontainer for a value and they behave\nas the value that they contain there are\nfour basic data types\nstrings which store a series of\ncharacters inc\nwhich store a whole integer floats which\nare floating point numbers a numeric\nvalue with a decimal\nand booleans which only store true or\nfalse\nand they're very useful with if\nstatements so that is it for variables\nif you would like a copy of all this\ncode i will copy and paste all of this\nto the comments section down below\nbut yeah that is how variables work in\npython\nhey people what's going on it's bro hope\nyou're doing well\nand in this video i'm going to explain\nmultiple assignment in python so\nsit back relax and enjoy the show\nwell then since you clicked on this\nvideo i should probably explain what\nmultiple assignment is\nnow multiple assignment allows us to\nassign multiple variables\nat the same time using one line of code\nhere's an example of us\nusing standard assignment let's say we\nhave a variable\nname and i will set this to a value of\nmy name but you can use your name for\nthis example\nlet's say edge equals 21 and how about a\nvariable called\nattractive i think i'm going to set this\nto true\nokay so we have a bunch of variables and\nthen we can print\nthe value of these variables with some\nprint statements\nso let's print name age and attractive\nso we have name age attractive\nand as you would expect this prints bro\n21 and true\nnow another way in which we could write\nthe same code is to use\nmultiple assignment and this allows us\nto assign multiple variables\nat the same time using one line of code\nso i'm going to turn\nall of these lines into comments and\nthis time\nwe will only use one line of code but to\ndo this we're going to list all of our\nvariables\nseparated with a comma so that would be\nname\ncomma edge comma attractive\nand we will set them equal to those\nvalues\nbut in the same order separated by\ncommas so that would be\nbro comma 21 comma true\nand this would do the same thing only\nusing one line of code\nhere's another example let's say we have\nfour variables\nspongebob patrick sandy and squidward\nand\nlet's pretend that they're all around\nmaybe 30 years old\nat least it seems like they're around 30\nyears old but i could be wrong\ni'm not too familiar with spongebob lore\nso let's set them all equal to 30.\nnow we could write this using four lines\nof code or\nwe could use multiple assignment to\nwrite the same thing\nusing one line of code so if all of\nthese variables\nare all equal to the same value there's\na little bit of different syntax here\nso let's begin with the first variable\nof spongebob\nequals patrick\nequals sandy equals\nsquidward then we're going to set them\nall equal to 30 and\nthis should work just fine using only\none line of code\nwell everybody that's pretty much it for\nmultiple assignment it allows us to\nassign\nmultiple variables at the same time\nusing one line of code\ni will post all of this code in the\ncomments section down below\nand well yeah that's how multiple\nassignment works in python\nhey what's going on everybody it's bro\nhope you're doing well\nand in this video i'm going to\ndemonstrate some useful string methods\nin python so\nsit back relax and enjoy the show\nall right let's do this in this video\ni'm going to be explaining and\ndemonstrating\na few useful methods available to us for\nstrings\nnow let's create a variable called name\nfor this example and you can use your\nown name if you want\nso we now have a variable called name\nand for my first example\nlet's print the length of our name\nvariable\nso to do that we can surround our name\nvariable with the length method and this\nwill print\nand return how long the length of our\nstring is\nand for me the length of my name\nvariable is three\nfor three characters if i were to\nincrease the size of my name\nwell then that's going to change to a so\nthat is\nthe length method and i'm just going to\nturn this line into a comment\nand let's move on so next we have the\nfind method\ni just copy and pasted print name so i\ncan reuse it\nname dot and actually if you have\nintellisense setup\nif you add dot after your variable\nyou'll get a suggestion or a few\nsuggestions of\ndifferent methods and other features\nthat you have access to so\nlet's find find which is\nuh screw this i'll just type find find\nthen we can find the first index of\nwhere this character is\nlet's say i would like to find where\ncapital b is\nwell that is at index zero because\ncomputers always start with zero\nso this first character would be zero\nthen r\nwould be one and then o would be\ntwo for this example all right so that\nis how to find a character\nwithin a string moving on so let's\ncapitalize our name and i should\nprobably make this lowercase\nso name dot capitalize\nand this will make my name capitalized\nbut if there's any spaces\nand then additional words it's not going\nto capitalize that\nonly the first letter and your string\nnext we have upper this will make your\nstring all uppercase\nname upper and now\nit is uppercase guess what's next\nlower name dot lower\nand i should probably make this capital\nagain\nand everything is lowercase\nwe're making some good progress today\nnext we have\nis digit this will return true or false\ndepending on if our string is a digit\nwhich it's not so this will print false\nif i changed my string to a bunch of\nnumbers like 1 2\n3 then this will return true let's\nchange that back\nand move on next we have\nis alpha\nare these alphabetical characters\noh make sure you add the parentheses\nafterwards my bad\nfalse because we added a space within\nhere\nnow it's true so you can use is alpha to\ncheck to see\nif your string contains only letters\nalphabetical letters\nnext we have count\nwe can count how many characters are\nwithin our string\ni would like to count how many o's are\nin here and this should return\ntwo that's right okay we're almost at\nthe end\nwe can replace characters within our\nstring\nso we use the replace method\nand we pass in two arguments the\ncharacter we would like to\nreplace and the character we would like\nto replace our character with\ni would like to change all o's to a's\nand now\nmy name is brock hod oh you guys are\ngonna like this next one\nthis isn't technically a method but it's\na really neat feature\nso one thing that we can do that's\navailable to us with python is that we\ncan display a string\nmultiple times by multiplying that\nstring by a given number\nso let's say i would like to display my\nname three times i can just take my\nstring variable\nthen add times three and this will print\nmy name\nthree times bro bro bro like i said not\ntechnically\na method but it's a useful feature that\nyou might be interested in that's\nrelated\nall right everybody so that is a few\nuseful methods available to us for\nstrings if you would like a copy of all\nthis code\ni will post this in the comments section\ndown below but yeah those are\na few useful methods available to us for\nstrings\nhey what's going on everybody it's you\nbro hope you're doing well and in this\nvideo i'm going to teach you guys all\nabout typecasting in python so\nsit back relax and enjoy the show\nall right welcome back everybody i have\na super quick video for you guys today\non the subject of typecasting now\ntypecasting is the ability to convert\nthe data type of a value to another data\ntype\nhere's an example that i've written\nalready i'm just going to paste it\ni have three variables for this example\nx y\nand z x contains one this is a whole\ninteger\ninto for short y contains two point zero\nthis is a floating point number\nfloat four short you can tell it's a\nfloat because it ends with a decimal\nportion\nand z contains a string of three a\nstring\nis a series of characters and you can\ntell it's a string because it's\nsurrounded with a set of quotes\nand remember with strings we cannot\nnormally perform math on strings\nso i have three print statements for x y\nand z and as you would expect they\ncontain the values of\none two point zero and three now let's\nbegin by converting both y\nand z to the integer data type via\ntypecasting in order to perform\ntypecasting\non a value or variable type that value\nor variable and surround this with a set\nof parentheses whoops i missed and then\npre-save this\nwith the data type you'd like to convert\nthis value or variable to\ni would like to convert y to an integer\nand then you can use this for whatever\nyou need\nso i'm going to replace y within my\nprint statement\nwith y after we typecast it as\nan integer and this will display 1 2\nnot 2.0 it's the whole integer\nof 2 and then 3. so this is not a\npermanent change\nif you need to make this as a permanent\nchange to y\nyou'd have to reassign it so let's say y\nequals y and then we're going to\ntypecast y\nso let's round this with a set of\nparentheses and precede this with the\ndata type we'd like to convert\ny2 so now y is a whole\ninteger and then we will print y without\ntypecast this time and our result is\none two three now z z is storing a\nstring and with strings we cannot\nnormally perform any math on strings\nfor example within my print statement i\nwill state z\ntimes three you would think that the\nresult would be nine right\nwell you're wrong it's going to print\nthree three times\nif you need to convert a string to a int\nor a float you would just have to\ntypecast it so this time let's type cast\nz as an integer z\nint and we will type cast z as an\ninteger so then if we have z times three\nthe result is now 9 instead of 333\nso that's the basic formula for type\ncasting now let's convert these to\nfloating point numbers but let's include\nx as well because\nx is feeling left out so let's convert x\nto\na floating point number so float\nparenthesis and we will surround\nthis with x and display x\nand actually let's convert y and z to\nfloats as well because why not\nthe results are now 1.0 2.0 and 9.0\nremember that we multiplied z times\nthree\nand then if we need to convert these\nvalues to a string\nwe would use the string cast\nso the results now are 1 2.0\nand 333 now you might be thinking to\nyourself\nwhen would you need to convert an\ninteger or a float to a string\nhere's a situation let's say within our\nprint statements we need to print\nthese variables along with another\nstring so within our print statement\nlet's say x is plus\nx we would like to display these\ntogether\nand let me copy this and do the same\nthing for y\nwe'll say y is plus y\nyou cannot normally display a string\nalong with an integer\nor a float because we're using some\nstring concatenation\nso this will result in a compilation\nerror can only concatenate\nstring not int to string so that's a\nsituation\nin which you might need to use\ntypecasting to convert an\ninteger or float to a string so let's\ndisplay\nx and y as strings via typecasting\nso we'll surround x and y with a set of\nparentheses and precede this with the\ndata type we'd like to convert these\nvalues to\nwe would like to convert x and y to both\nstrings and now this will compile and\nrun\njust fine well everybody that's the\nbasics of typecasting\nif you would like a copy of all my code\ni will post everything in the comments\ndown below\nif you found this video helpful don't be\nafraid to help me out by smashing that\nlike button\ndrop a comment down below and subscribe\nif you'd like to become a fellow bro\nhey what's going on everybody it's bro\nhope you're doing well\nand in this video i'm going to teach you\nguys how we can accept some user input\nin python so sit\nback relax and enjoy the show\nladies and gentlemen this is where the\nfun begins in this video i'm going to\nexplain how we can accept some user\ninput in python\nand we do so by using the input function\nand then we type in our input to the\nconsole window\nbut it would probably be good practice\nto let the user know what we want them\nto type in exactly\nso let's ask for somebody's name within\nquotes inside the input function i'm\ngoing to type\nwhat is your name and now\nour program will wait for us to enter in\nsome user input\nso you can use your own name for this\nexample i'm going to type bro\nnow to submit some user input you just\ntype or press\nenter now you can see that my process\nfinished with exit code zero that means\nthe program is done running\nso we should probably do something with\nthis value we can actually assign it to\na variable so we can use it elsewhere in\nour program\nso to do so we precede input with\na variable like name works name equals\ninput\nand when we accept some user input we\nwill assign it to this variable that we\ncalled them\nand now we can do something with it so\nlet's print a message\ninvolving our name variable that we have\nso how about\nhello plus name\nnow when i run this program we can\naccept some user input\nand then do something with that input\nsuch as display message that says\nhello bro and then you can type in\nwhatever you want for your name\nlet's say i'm dude what is your name\ndude hello dude\nnow this next part is very important\nwhen we accept user input it is always\nof the string\ndata type a series of characters what if\nwe need to accept a number\nwell you can but you can't normally\nperform any math on it because it's of\nthe string data type\nwe would need to cast it as either of\nthe integer data type\nor of the float data type so here's an\nexample of why we can't perform any math\non a string let's say we have a variable\ncalled\nedge age equals input and let's\nask how old somebody is how old\nare you now i will add one to somebody's\nage let's pretend it's their birthday\nage equals age plus one this will add\none to their age\nnow let's try and run this what is your\nname bro\nhow old are you let's say that i'm 21.\nokay we ran into an error a type error\ncan only concatenate string to string\nwith what i mentioned previously we\ncannot normally use\nstrings for any sort of mathematical\nequation or operation\nwe'll want to cast it to the integer or\nthe float\ndata type so let's cast our user input\nto the integer data type and we will\nsurround our user input with a cast\nsurround your input with a set of\nparenthesis and precede this with\nint and now we can use this user input\nin a mathematical operation\nso let's try it even though this won't\ndisplay age yet so\nwhat is your name bro 21 and our program\nfinished with\nan x a code of zero there were no\nproblems now let's attempt to display\nthis edge\nso i will print\nu r plus\nage plus years\nold we're doing some string\nconcatenation here\nwhat is your name bro how old are you 21\nall right we ran into a type error again\ncan only concatenate string to string\nyou cannot normally display a variable\nof the integer data type\nalong with strings because we're doing\nstring concatenation we're adding\nstrings together\nwe would need to convert this variable\nback to the string\ndata type so we can cast it we'll\nsurround\nour edge variable with a cast now this\nis what's going to happen we will accept\nsome user input it will be of the string\ndata type and then we will\nimmediately cast it to be of the integer\ndata type so that we can treat it\nas a number instead of a character and\nthen if we need to display this\nedge we will need to convert it back to\na string so that we can use\nsome string concatenation and display\nall of these strings together\nand now let's try this theory so what is\nyour name bro\nhow old are you let's say i'm 21 hello\nbro you\nare 22 years old here's a situation what\nif we enter\na number that contains a decimal portion\nso let's try this again\nlet's say i'm 21.5 years old\nwell now we ran into a different issue a\nvalue error\ninvalid literal for int with base 10\nthat means if we cast a string as an\ninteger\nit can only be a whole number a portion\nthat does not contain\na decimal and that is where the float\ndata type would come in\nit is a data type that can contain a\ndecimal portion\nfor this example let's create a third\nvariable called height and we will ask\nfor somebody's height\ninput we'll create a prompt that says\nhow tall are you\nand we will cast this to be of the float\ndata type\nso that our string our user input\ncan contain a decimal portion and then\nwe can treat it as a number instead of a\nseries of characters\nand i think i will delete this line we\nwon't really need it anymore\nand then let's print their height along\nwith a message\nu r plus then\nheight but we need to cast this back to\nbeing a string\nso we'll surround our height with a cast\nplus let's say cm\ntall all right let's test this\nwhat is your name bro how old are you\nlet's say i'm 21 how tall are you let's\npretend that i'm 250.5 centimeters tall\ni'm adding the 0.5 just to test to see\nif this will accept a floating point\nnumber\nhello bro you are 21 years old you are\n250.5 centimeters tall\nnot really all right everybody so that\nis the basics of\nuser input in python normally with user\ninput it will give you\na value of the string data type if you\nneed to use that value for any sort of\nmath\nyou'll probably need to cast it to be of\nthe integer or the float data\ntype so if you would like a copy of this\ncode i will post this in the comment\nsection down below\nbut yeah that's how to accept user input\nin python\nhey what's going on everybody it's bro\nhope you're doing well and in this video\ni'm going to demonstrate a few useful\nfunctions related to numbers in python\nso\nsit back relax and enjoy the show\nokay let's begin in this video i'm going\nto be demonstrating a bunch of useful\nfunctions related to numbers\nand a bunch of these functions are\nlocated within the math\nmodule now let's create a variable for\nthis example let's say\npi equals 3.14 just the first few digits\nof pi is fine for this example\nand now here's a bunch of useful\nfunctions that you guys would probably\nbe interested in\nthe first is round round is a built-in\nfunction and all we do is type round\nthen add a set of parenthesis and then\nwe can pass in\na value or a variable as an argument and\nthe round function\nwill round that number for us so pi\nrounded to the nearest whole integer\nis you guessed it three now we can round\na number up\nby using the seal function of the math\nclass seal\nshort for ceiling so let's print\nour result and in order to access this\nfunction within the math module\nwe would type the name of the module dot\nand here's a bunch of functions that we\nhave access to\nso we are looking for seal and it's\nactually at the top here for me\nand at seal we'll round a number up to\nthe nearest whole integer\nso pi rounded up is four\nthen on the flip side we can round a\nnumber down by using\nfloor and that is also located within\nthe math module\nso let's type math dot floor and\npi rounded down would be three\nup next i have the absolute value\nfunction but it's abs\nfor short abs will give you the absolute\nvalue of a number\nso the absolute value of pi actually\nlet's make this negative 3.14\nthe absolute value will tell you how far\na number\nis away from zero so if you pass in a\nnegative number\nit will give you a positive number so\nthat is\nabs short for absolute value next we\nhave\nthe pow function pow will raise\na base number to a power let's raise\npi to the power of two so we pass in\ntwo arguments a base and an exponent\npi to the power of two is nine point\neight\nand some change so that is the pow\nfunction\nnext we have square root\nso this is located within the math\nmodule we'll type\nmath dot s q r\nt short for square root and the square\nroot of pi\nis let's find out oh i guess we can't\npass in pi\nuh let's round a different number like\n420\noh i guess that's because i made pi\nnegative okay so the square root of 420\nis\n20.4 and some change so that is the\nsquare\nroot function all right we have two left\nwe have the max function\nthe max function will find the largest\nof a varying amount\nof values so let's create three\nvariables for this example\nlet's say x equals one y equals two\nand z equals three we can use the max\nfunction to find\nthe largest of these values so within a\nprint statement\nlet's use the max function and pass in\nall of the different values or variables\nthat you would like to compare\nso i would like to find the largest\nvalue between\nx y and z and the result in this example\nis three now the min function will find\nthe lowest\nso min and then pass in your values or\nvariables\nso i would like to find the minimum\nvalue between x\ny and z and in this case it is one\nwell everybody those are a few useful\nfunctions that you guys might be\ninterested in\nif you guys would like a copy of this\ncode i will post this in the comments\nsection down below\nbut yeah those are a few useful\nfunctions related to numbers\nin python hey what's going on everybody\nit's bro hope you're doing well and in\nthis video i'm going to explain string\nslicing in python so sit back\nrelax and enjoy the show\nall right then let's talk about slicing\nslicing can be used to create a\nsubstring by extracting elements from\nanother string\nthe same principle can also be applied\nto different collections as well\nbut in this video we're going to be\nfocusing on slicing strings\nnow to slice a string we can either use\nthe indexing operator\nwhich is a set of square brackets or by\nuse of the slice function\nto create a slice object this is a\nlittle more complex\nwe'll discuss the slice function near\nthe end of this video\nso with slicing there are three optional\narguments\nthree fields that we can fill in\ndepending on where\nand how we want to slice our string a\nstarting index\na stopping index and a step let's begin\nwith the starting index\nnow for this example let's say we have a\nstring\nvariable called name and this will store\na value of whatever your\nown full name is yes i legally change my\nname to bro code you can use your own\nname for this if you want\nso what i would like to do is to create\na substring\nbased off a sliced portion of my full\nname\nso what i would like to do is create a\nsubstring based off of just the first\npart of my name just bro\nso let's begin by creating a substring\nmaybe i'll call this first\nname equals now to slice a string\ntype in a string or the name of a\nvariable that contains your string\nand follow this with the indexing\noperator and like i said we'll discuss\nthe slice function a little bit later so\nwe need\na starting index and a stopping index\nbut we'll begin with the starting index\nwhere do we want to begin\nour slice so computers they always start\nwith zero\nso the first character in your string\nwill have an index\nof zero i would like my slice to begin\nat index 0\nso i'll list that for the starting\nposition the starting index\nso let's test this just to be sure it\nworks i'll just print\nfirst name and let's see if this prints\ncapital b\nwhich it does so following that same\npattern the next character\nwithin my string would have an index of\none that would be\nr then the next index two would be\no and three should be an empty space\nall right so that is the starting index\nwithin string slicing if we would like\nto slice an entire portion of our string\nnot just one letter we need a stopping\nindex as well\nand both of these fields are separated\nwith a colon\nso let's say i would like to slice the\nfirst three characters of my string\nso this would have an index of zero one\ntwo and this isn't going to work as you\nwould imagine and i'll explain\nwhy so you would think that indexes\n0 through 2 would give us three letters\nright but it only gives us two\nso this first index is inclusive\nthe stopping index is exclusive so if i\nwant the first\nthree characters the first three letters\nin the string\ni would need the starting index to be\nzero\nand the stopping index to be three and\nnow this should print\nmy first name and not anything else\nthere is a shorthand way of writing this\ntoo\nso if you were to leave this first index\nblank\nfor start well python is going to assume\nthat this is zero\nthe beginning of your string so this\nwould be\nno different than what we had previously\njust having colon\nthree now let's try and create a\nseparate substring\nfor a last name so last\nname name now we need a\nstarting index and a stopping index so\nwe need the starting index at least so\nthis would be\nzero one two three four\nfour colon and where do we want this to\nstop\nzero one two three four five\nsix seven and remember that this is\nexclusive\nso we're going to place eight here and\nnow i would like to display\nlast name and this should just display\ncode\nand a shortcut is that if you were to\nleave\nstop blank but you still have that colon\nthis is a shorthand way of writing\ni would like every character starting at\nindex four\nand everything after until the end so\nthere would be no change to this\nas well you can write it either way okay\nso we still have to discuss\nstep step is an optional field that we\ncan set a value to\nso step is how much we're increasing our\nindex by\nbetween starting and stopping so it is\nentirely possible\nto create a substring that will count\nonly\nevery second character after the first\nnormally step is one by default\nbut if we were to set that to two we're\ngoing to count only\nevery second character so let's try this\nmaybe i'll create a new\nvariable called funky name because i\nreally don't know what else to call this\nfor this example\nlet's say funky name equals name and i'm\ngoing to count\nonly every second character including\nthe first\nso the indexes would be zero colon\neight for my example but if you're using\nyour own name that's probably going to\nbe something different\nso the default first step is one and if\ni were to display funky name as it\nis currently this will just display my\nfull name\nbut if we set step to two this will only\ndisplay\nevery second character including the\nfirst so funky name is now\nfor me at least b o c d now if step\nwas three this will print only every\nthird character including the first\nwhere it's b space d a shorthand way of\nwriting this\nis that you could leave start and stop\nempty but the important thing is to have\nthese two colons\npython is going to assume that if you\nleave your starting index\nempty you're referring to index 0 the\nbeginning\nif your second index your stopping index\nis empty\npython will assume this will be the very\nend of your string\nso just having two colons and then step\nthree would be\nno different than what we had previously\nor this next part i'm going to explain\nhow we can reverse a string in python so\nlet's create a new substring variable\ncalled\nreversed name equals name i would like\nto use the entire string\nso i can just use two colons python will\nfill in the rest\nso for the step this is going to be\nnegative one\nit's kind of like we're counting\nbackwards and we're going to create\na new sub string based off my name but\nin reverse\nso if i were to print my reversed name\nthis is now\nedok orb i think that's how you\npronounce it\nso that's how to reverse a string in\npython using slicing\nnow let's move on to part two of this\nvideo i'm going to be explaining the\nslice function and we can use the slice\nfunction to create a slice\nobject which is actually reusable so\nthat's somewhat convenient\nlet's take a different scenario this\ntime let's say we have a website url\nwebsite equals http colon2forwardslashes\ngoogle.com but use whatever website you\nwant what i would like to do for this\nprogram\nis remove and create a substring based\noff the website name\nand not anything else i would like to\nexclude the http portion as well as the\ndot-com portion\nof this website url so let's break it\ndown step by step\nour first step is to create a slice\nobject so i will name the slice object\nas slice\nslice equals and i will invoke the slice\nfunction\nso within the parentheses of the slice\nfunction we can add up to\nthree values a start a stop and a step\nexactly the same as what we did with\nindexing however with the slice function\nwe separate each of these values with a\ncomma\ninstead of a colon but it works the same\nway so we would like\nour substring to begin where the name of\nthe website begins\nso we would like our start to be zero\none two three four five six seven\nso i will pass in seven for where my\nsubstring will begin\nand now each value within the slice\nfunction will be separated with\na comma instead of a colon like what we\ndid with the indexing operator\nnow for the stop index that's going to\nbe a little bit tricky\nand let me explain why one issue that\nwe're going to run into\nis that not all website names are\nconsistent with their length they can\nreally vary\nso it is not possible for us to use the\nsame stopping index\nfor each of these website urls so one\nway in which we can account for that\nis to use what is called a negative\nindex each character within a string\nhas a positive index as well as a\nnegative index\nand a negative index works almost\nexactly the same way\nexcept the character most on the right\nbegins with a negative index\nof minus one and the character on the\nleft\nof that would be negative two negative\nthree and negative four\nit's as if you're counting backwards so\nwith indexing we can use some\ncombination of\npositive and negative indexing so i\nwould like\nmy substring to end where this dot is so\nthis would have\na index of minus one minus two\nminus three minus four and remember that\nthis is exclusive\nso i would like my slice to begin at\nindex seven\nand a negative index of four for the\nstopping position\nso that will give me just the website\nname and remove\nthe http portion as well as the dot com\nportion of my website url\nand now we have a slice object and we\ncan reuse this\nso to apply your slice object type in\nthe name your string\nindex operator and place your slice\nright within here\nand let's print this so print\nour website and apply the slice to it\nand now this should give us\njust the website name and now let's test\nthis with maybe another website\ni'll rename this as website one and\nlet's create website2\nand let's try a different website name\nfor goodmeasure\nso let's try wikipedia so we can reuse\nour slice object\nand we will apply our slice to website\ntwo this time\nand this should remove the url portions\nhttp as well as\ncom all right everybody so that is\nslicing strings\nin python you can either use the\nindexing operator\nor the slice function to create a slice\nobject\nif you would like a copy of all this\ncode i will post all of this in the\ncomments section down below\nbut yeah that is how string slicing\nworks in python\nhey what's going on people it's you bro\nhope you're doing well and in this video\ni'm going to explain\nif statements else if statements and\nelse statements and python so\nsit back relax and enjoy the show\nall right people let's talk about if\nstatements an if statement is a block of\ncode\nthat will execute only if its condition\nis true\nit's a very basic form of decision\nmaking with programming\nfor this example let's create a prompt\nwhere we will ask a user\nfor their age and depending on what\ntheir age is we will print a response\nso let's say age equals input and then\nwe will add a prompt\nhow old are you now this will return a\nstring\nso we should probably cast this as an\ninteger data type\nso we now have a variable called age\nwhere we will accept some user input\nlet's check somebody's age with a\nvariety of if statements\nso let's check to see if somebody's age\nis greater than or equal to 18\nso to create an if statement type if and\nthen some sort of condition\nif age is greater than or equal to 18\nto finish this if statement add a colon\nat the end\nnow pay attention to this if i move down\nto the next line you'll notice that my\ncursor is now\nindented any indented code underneath an\nif statement is the block of code for\nthat if statement\nso if this condition is true we will\nexecute some\nblock of code if it's false we'll skip\nover it so if somebody's age is greater\nthan or equal to 18\nlet's print you are an\nadult and let's try this program how old\nare you\nlet's say i'm 21 so my condition when we\nget to the if statement\nis going to check to see if this\ncondition is true if it is true we're\ngoing to\nexecute this block of code if it's not\nwe skip over it\nso how old are you let's say i'm 21 i'm\ngoing to hit enter\nand my if statement is true so we\nexecute this block of code which prints\nyou are an adult so what if this\ncondition is false\nlet's say i'm 12. well then we're just\ngoing to skip over this block of code\nand continue on with the rest of the\nprogram\nif you would like your program to take\nsome other course of action\nif this condition is false we can add an\nelse\nstatement so after the if statement add\nelse\nmake sure you get the indentation right\nyou don't want this within the block of\ncode for the if statement\nso if this condition is false we can\ntake\nsome other course of action so if\nsomebody's age\nis less than 18 let's print\nyou are a child\nso let's try this again i'm going to\nenter that i\nam 12 years old not really but let's\njust pretend i am\nso this will now print you are a child\nif\nthis condition is false perform this\nblock of code for the else statement\nso with if statements we can check more\nthan one condition before reaching the\nelse statement by using an\nelse if statement and we add that after\nan if statement so it's shortened to e l\ni f for else if so let's check to see if\nsomebody's age\nis less than zero for some reason\nso let's print\nyou haven't been born yet\nso with if statements we start at the\ntop we first check\nthe if statement if this is false we\nmove down to the next\nstatement to check then we check our\nelse if statement\nif this is also false then we resort to\nthe else statement\nthe else statement is sort of like a\nlast resort if all conditions\nevaluate to be false then we execute the\nelse statement\nso let's try this how old are you let's\nsay i'm negative\n1 years old you haven't been born yet\nso with if statements we always begin\nwith an if statement and we check\nthat condition if that condition\nevaluates to be false\nthen we will skip this block of code and\nmove down to the else if statement\nif there is one it's optional if this\ncondition\nis also false then we will use our else\nstatement as a last resort\nif there is one if there is no else\nstatement then we just skip over all of\nthis then and continue on with the rest\nof the program\nso you can add more than one else if\nstatement so let's check something else\nlet's check to see else if age\nis equal to 100 so if you need to check\nto see\nif a value is equal to a particular\nvalue\nmake sure you use double equal signs\nthis is the comparison\noperator for equality if you use just\none equal sign that's the assignment\noperator and\npython thinks you're attempting to set\nage equal to 100\nso if you want to check to see if age is\nequal to 100\nthen use double equals so let's check to\nsee if somebody's age is\nequal to 100 so let's print\nyou are a century\nold now pay attention to this if i were\nto run this program\nhow old are you let's say i'm 100. so\nthis is printing you are an adult that's\nbecause we first check\nour if statement and well we're 100\nyears old and 100\nis greater than or equal to 18. so we\nprint\nthis block of code we execute this block\nof code and then we skip\neverything else even though age is equal\nto 100 within\nour else if statement so the order of\nyour if statements\ndoes matter so let's change this around\nlet's add this\nto the very beginning and this will be\nour\nif statement and we will set age\nis greater than or equal to 18 to be an\nelse if statement\nso we're first going to check to see if\nage is equal to 100\nif not we will check to see if age is\ngreater than or equal to 18\nand we just follow that order so let's\ntry this again how old are you\ni am 100 years old you are\na century old so we first check our if\nstatement\nif this condition is true we will\nexecute this block of code\nif it's false we just go down the order\ntill we reach our else statement\nwell everybody that is the basics of if\nstatements we have if statements\nelse if statements and else statements\nso if you would like a copy of this code\ni will post this in the comments down\nbelow\nbut yeah that is how if statements work\nin python\nhey what's going on everybody it's bro\nhope you're doing well in this video i'm\ngoing to explain\nlogical operators in python so sit back\nrelax\nand enjoy the show\nall right everybody let's talk about\nlogical operators\nthese are used to check if two or more\nconditional statements\nare true so we'll be discussing the and\nas well as the or\nlogical operators there's also a third\none called\nnot but that works a little bit\ndifferent and i'll explain why\nso let's create a program to demonstrate\nthis let's create a program\nwhere we will ask somebody for the\ntemperature outside and then depending\non the temperature if it falls within a\ncertain range\nwe will print a message so we'll need to\nuse and as well as or logical operators\nto do this\nso here i have a prompt temp for\ntemperature equals input what is the\ntemperature outside\nso i'm going to cast this as an integer\ndata type\nso what if we want to check to see if\nour temperature is within a certain\nrange\nwe can use the and logical operator to\ncheck\ntwo or more conditional statements this\nis how we might do that\nlet's check if temp\nis greater than or equal to zero zero\ndegrees celsius\nand we can check another condition too\nif temp\nis less than or equal to 30 degrees\ncelsius\nso we need to add a colon at the end to\nfinish this if statement\nand let me just fix some of the spacing\nokay so\nwith the and logical operator in order\nfor this entire condition to be true\nboth conditions must be true this needs\nto be true\nand this needs to be true so if our\ntemperature\nis equal to or above 0 as well\nas being less than or equal to 30 that\nmeans our temperature\nfalls within a certain range so let's\nprint a message\nsuch as the temperature\nis good today\nprint go\noutside all right let's try it\nso what is the temperature outside let's\nsay it's 20 degrees celsius\nwell the temperature is good today go\noutside\nthis condition is true 20 is greater\nthan or equal to zero\nand temperature is less than or equal to\n30.\nlet's try a different temperature like\nnegative 20 degrees celsius so it's\nreally freaking cold outside right now\nas you can see nothing happened because\nour first condition\nwas false our temperature is not greater\nthan or equal to zero\nbut our temperature is less than or\nequal to 30 so\nour second condition is true but our\nfirst condition was false\nand in order for this entire statement\nto be true since we're using the and\nlogical operator\nboth conditions must be true in order\nfor this statement\nto be true now let's discuss the or\nlogical operator\nwe can check to see if our temperature\nis below\nor above a certain range so let's write\nelse if\ntemp is less than zero or\ntemp is greater than 30. so that means\nit's going to be either\nvery cold outside or very hot outside so\nlet's print a message\nthe temperature\nis bad today\nprint stay\ninside all right let's try this again\nwhat is the temperature outside it is\nnegative 20 degrees outside\nthe temperature is bad today stay inside\nso with the\norological operator as long as one of\nthese conditions\nis true then the entire statement is\ntrue it doesn't matter if one of them is\nfalse as long as one of them is true\nthen the entire statement\nis true last but not least we have the\nnot logical operator this works a little\nbit different from the\nand as well as the or logical operator\nbecause we can check\none or more conditional statements\ninstead of two or more conditional\nstatements\nso what the not logical operator will do\nis that it'll take\na conditional statement if it's true\nit's going to flip it to false\nif it's normally false it's going to\nflip it to true so for this example we\nhave another way in which we could write\nthis\nalthough it's a little more complex so\nif our statement\nis true what we can do is that we can\nflip it to false using the\nnot logical operator if it's normally\nfalse we can change it to true\nso what we'll do is surround one or more\nconditional statements with a set of\nparentheses\nand precede everything within the\nparentheses with the not\nlogical operator so if the statement is\nnormally true\nit's going to become false using the not\nlogical operator\nif it's normally false it's going to be\ntrue then let's do the same with the\nelse if statement\nso surround one or more conditional\nstatements with the not\nlogical operator so now these roles are\ngoing to be kind of reversed so let's\ntry this again what is the temperature\noutside it is negative 20 degrees\noutside\nthe temperature is good today go outside\nso what we should probably do\nis kind of reverse these rolls so i'm\njust going to swap\neverything within these if statements\nwith each other\nand now this should work the same as it\ndid before but we just wrote it a little\nbit different\nwhat is the temperature outside it is 15\ndegrees outside\n15 degrees celsius the temperature is\ngood today go outside\nso with the not logical operator you can\nsurround one\nor more conditional statements with the\nnot logical operator and what this will\ndo\nis flip it from being false to true or\nfrom true to false\nwell everybody that's the basics of\nlogical operators in python if you would\nlike a copy of all this code i will post\nthis in the comments\ndown below but yeah that's the basics of\nlogical operators\nin python hey what's going on everybody\nit's bro hope you're doing well and in\nthis video i'm going to explain while\nloops in python so sit back\nrelax and enjoy the show\nso while loops a while loop is a\nstatement that will execute its block of\ncode\nas long as its condition remains true\nlater on in this video for this example\nwe're going to create\na program where we will prompt a user to\nenter their name\nif they attempt to skip that prompt then\nwe will continually ask the user to\nenter their name\nand they can't continue on with the rest\nof the program until they do so the key\nthing to keep in mind with while loops\nis that you'll want some way to\neventually escape the while loop if you\ndon't have any way to escape the while\nloop that's referred to as an\ninfinite loop so let's create an example\nof an infinite loop because it's fun\nso to create a while loop type while and\nthen some sort of condition\nso for our condition let's say while one\nis equal to one\nso this will always be true now what do\nwe want to do\nwhen we execute this block of code let's\nprint something\nprint help i'm\nstuck in a loop all right so let's try\nthis\nwhile one is equal to one print this\nstatement\nand we will just continue on and on\nwithin this while loop because we have\nno way to escape this while loop\nso now let's use this concept and write\na program where we will prompt a user to\ntype in their name\nif they don't type in anything then we\nwill continue to prompt them to type in\nat least something\nso let's say name is equal to\nand then to just keep this blank we'll\njust set this to a set of quotes\nand then let's write a while loop here\nwhile name\nand let's check the length of name if\nthe length\nof our name is equal\nto zero then we will ask the user to\ntype in their name\nname equals input\nenter your name\nso then once we escape the while loop\nlet's print something\nprint hello plus\nname whoops hello plus name\nalright so when i run this we are giving\nthe user a way to escape the while loop\nthey have to type in something for their\nname\nas long as the length of my name is\nequal to zero\nkeep on printing this prompt enter your\nname\nso i'm just going to hit enter a bunch\nof times enter your name\nno enter your name no enter your name no\nso we are stuck within this loop until\nwe enter something for our name\nso this time let me type in a name then\nhit enter\nso therefore our condition is now false\nthe length\nof my name is now one two three so\nthree is not equal to zero therefore our\nwhile statement our while loop is false\nand we continue on with the rest of the\nprogram there are a few variations in\nwhich you could write the same program\nso\nlet's write this a different way what we\ncould do is say\nname is equal to none while\nnot name and this will pretty much do\nthe same thing it's just another way of\nwriting this\nwell everybody that's the basics of\nwhile loops a while loop is a statement\nthat will execute\nits block of code as long as its\ncondition remains true\nfor our example we asked the user to\ntype in their name\nif they were to leave it empty or blank\nwe would keep on asking the user to type\nin their name\nso if you would like a copy of this code\ni will post this in the comments section\ndown below\nbut yeah that's the basics of while\nloops in python\nhey what's going on everybody it's bro\nhope you're doing well and in this video\ni'm going to explain for loops in python\nand at the end of this video we're going\nto create a countdown timer so\nsit back relax and enjoy the show\nall right guys and gals let's talk about\nfor loops a for loop is a statement that\nwill execute its block of code a\nlimited amount of times it's similar but\ndifferent from a while loop because a\nwhile loop\ncould iterate an unlimited or infinite\namount of times depending on the\ncondition a for loop\nwill only iterate a limited amount of\ntimes and before we start executing\nits block of code we already know how\nmany times we're going to repeat this\nblock of code\nso for this example let's create a for\nloop that will simply count it to 10\nand then we'll create a few more\nsophisticated examples\nso to create a for loop that will count\nup to 10 this is what we'll type\nfour and then we need some sort of\ncounter people usually either write\nindex or they shorten it to just i i for\nindex\nfour i in and we can set a range range\nten so we will execute this for loop ten\ntimes\nand to finish this for loop just add a\ncolon at the end\nso the next line or lines will be\nindented so that's the block of code for\nthe for loop\nwhat do we want to do during each\niteration let's just print what\ni is and let's take a look to see what\nwould happen\nso we executed this for loop ten times\nexcept with computers computers always\nstart with zero\nso when we said four i in range ten\nwe're counting numbers\nzero through nine so it's as if this\nnumber\nis exclusive so there's two ways we can\nchange this we could say range ten\nplus one or what i would do is say print\ni\nplus one so this will give us numbers\none\nthrough ten so that's a for loop it will\nexecute a limited amount of times\nthis time let's count a range between\ntwo numbers\nnot necessarily 0 to 10 but something\nelse so let's say 4i\nin range maybe the numbers 50 through\n100\nso within my range function i will pass\nin two numbers\nthe first number will be the starting\npoint and the second number is the\nending point\nthis first number is inclusive and the\nsecond number is exclusive\nso let's print this print whatever i is\nso this will count\n50 through 99 actually if you wanted to\ninclude this last number since it's\nexclusive what we could do is just add\none to the end so this would give\nus 50 through 100 except that\nthis will iterate 51 times since we're\ncounting 50.\nso you just have to pay attention to\nyour range and the numbers that it's\ncounting now one thing that you can do\nwith the range function is that you can\nadd a third argument and this will\nfunction as the step\nhow much you want to count up or down by\nso this time let's count up by two\nso i'll add comma two we're passing in a\nthird argument this time\nso this program will now count up by two\nstarting at fifty and go all the way\nto one hundred a benefit of for loops is\nthat we can iterate through anything\nthat is considered\niterable this could include a string the\nletters in a string\nor any sort of collection so this time\nlet's create a for loop that will\niterate\nonce through each letter in maybe a name\nso for\ni in and let's type a name here type in\nwhatever your first name and last name\nis\nand then we will print whatever i is\nfor i in whatever your name is print\neach letter\nin the string so when i run this each\nletter\nwithin my name will be printed to a new\nline\nall right people for my last trick we're\ngoing to create a program\nwhere we will simulate a countdown\nstarting at 10 and count down to zero\nand then maybe once we reach zero we can\nprint something such as\nhappy new year so to create this program\nwe'll need an import so at the top\nwe're going to import the time module\nbecause we'll be waiting\none second after each iteration of this\nfor loop\nso to create this program let's say four\nyou could say i but you can really write\nanything here and\nto demonstrate that let's say four\nseconds four seconds\nin range so the starting point is going\nto be ten\nthe ending point will be zero and we'll\nadd a step\nwhat do we want to count up or down by\nlet's set this to negative one so this\nwill be a countdown\nstarting at ten and ending at zero so\nafter each iteration\nlet's print whatever i is or in this\ncase\nseconds and then we can sleep have our\nthread sleep\nfor a number of seconds too so after we\nprint seconds\ntype time dot sleep and pass in\nhow long you want to sleep for i would\nlike to sleep for one second\nand then at the end let's print happy\nnew year make sure this isn't within the\nfor loop\nprint happy new year and well\nthat's it let's test this so we'll begin\nat 10 and count down to zero and you can\nsee that my thread that is running this\nprogram\nis sleeping for one second after each\niteration of this for loop\nthen once we reach zero it will display\nhappy new year\nwell everybody that's the basics of for\nloops a for loop is a statement\nthat will execute its block of code a\nlimited amount of times\nit's different from a while loop because\na while loop could execute\nan infinite or unlimited amount of times\nwith for loops they execute limited\namounts of times\nand before we enter the for loop we\nalready know how many times we're going\nto iterate this for loop\nif you'd like a copy of all this code i\nwill post this in the comments down\nbelow\nbut yeah that's how for loops work in\npython\nhey what's going on everybody it's you\nbro hope you're doing well and in this\nvideo i'm going to explain nested loops\nin python so\nsit back relax and enjoy the show\nhey all you people let's talk about\nnested loops a nested loop is a general\nconcept of having\none loop inside of another loop and\nthat's really it it doesn't matter if\nit's a for loop or a while loop\nso the inner loop will finish all of its\niterations\nbefore we finish one iteration of the\nouter loop\nand to best demonstrate this we're going\nto create a program where we will draw a\nrectangle made out of a certain symbol\nthat we choose\nwe need to set a width and a height and\nto best do this we'll need to use a\nnested loop we'll create a few prompts\none for rows\ncolumns and a symbol that we want to\nmake a rectangle of\nso let's begin with rows rows equals\ninput how many\nrows and we'll need to cast this as an\ninteger data type\nbecause we're working with numbers okay\nlet's do the same thing for columns\nso replace rows with columns for this\nnext line\ninput how many columns\nand we'll create a symbol variable\nsymbol\nequals input and this we don't have to\ncast\nenter a symbol to\nuse now it's time for the nested loops\nwe're going to create an outer for loop\nas well as an inner for loop\nthe outer for loop will be in charge of\nthe rows the inner for loop will be in\ncharge of the columns\nso let's begin by creating our outer\nloop so\nwe'll write 4 i in range\nrows we would like our outer for loop to\niterate as many times\nas we have rows and we're going to\ncreate an inner for loop that will\niterate as many times as we have columns\nso within the block of code for the\nouter for loop we're going to create\nanother for loop\nthis time it'll be four and a common\nconvention\nfor inner loops is to write j as an\nindex because\nj comes after i i guess so for j\nin range columns\nso our inner for loop will iterate for\nas many times\nas we have columns all we'll do within\nthe\ninner for loop is print our symbol that\nwe have\nexcept we'll have one issue using a\nprint statement\nafter we use the print statement we will\nenter a new line character and move down\nto the next line\nwe can actually prevent that by adding\ncomma\nand equals quotes so after using a print\nstatement\nthis will prevent our cursor from moving\ndown to the next line\nso pay attention to the indentation too\nso there's kind of two levels of\nindentation\nwe're currently within the inner for\nloop so that's pretty much it for the\ninner for loop now we're going to\nprint a new line once we exit the inner\nfor loop\nand you can see that the indentation is\non\nthis line right here we're within the\nouter for loop now\nand that's pretty much it so let's try\nthis program\nhow many rows let's say five rows how\nmany columns perhaps six\nwhat symbol do we want to use let's say\nthe dollar sign\nand let's try it there we go there's our\nrectangle\nso we have let's see six columns one\ntwo three four five six and five rows\none\ntwo three four five in summary\na nested loop is really just this\nconcept of having\none loop inside of another loop it\ndoesn't matter if it's a while loop or a\nfor a loop it's really situational\nthe inner loop will finish all of its\niterations before finishing\none iteration of the outer loop so what\nwe did to demonstrate that is that we\nhad\nthe outer loop in charge the rows and an\ninner loop in charge of the columns for\nour rectangle program\nso if you would like a copy of this\nprogram i will post this in the comment\nsection down below\nbut yeah that's the basics of nested\nloops in python\nhey what's going on everybody it's bro\nhope you're doing well\nand in this video i'm going to explain\nloop control statements in python\nso sit back relax and enjoy the show\nall right ladies and gentlemen let's\ntalk about loop control statements\nthese are used to change a loop's\nexecution from its normal sequence\nand there are three we're going to\ndiscuss break continue\nand pass let's begin with break break is\nused to terminate the loop entirely\nnow here's a good example of where a\nbreak would be useful\nlet's say while true we're going to\ncontinually ask\nfor somebody's name if they don't type\nin anything then we'll continue the\nwhile loop over and over again\nso let's say name equals input\nenter your name now\nif name does not equal\na set of quotes that means they don't\ntype in anything then\nwe will break and break out of this\nwhile loop and let's test it\nenter your name nah i don't think so i'm\ntoo lazy to enter my name\nall right i can see that i'm not going\nto escape this while loop so i'm going\nto type in my name because i give up\nand hit enter therefore i will break and\nexit out of this while loop\nso a break is used to terminate the loop\nentirely when it's encountered\nnext we have continue continue skips to\nthe next iteration of the loop\nnow let's say we have a phone number\nphone\nunderscore number and i will set the\nsequel to\nlet's say a random phone number\nincluding dashes 123-456-7890\nwhat i would like to do is to display\nthis number within the console window\nwithout these dashes\nthis is how to do that using a continue\ncontrol statement\nfor i in phone number\nso for each character within our string\nof phone number\nwhat we'll do is check to see if we\nencounter a dash character\nif i i is our index is\nequal to a dash then we want to\ncontinue and skip over this iteration of\nthe loop\nso continue\nthen i would like to print\nwhatever our indexes whatever character\nwe're working on\nso if i were to run this as it is it's\ngoing to print each digit\non a new line so with print statements\nthey will add a new line character to\nthe end of your string\nand you can actually change that by\nadding to the end comma\nend equals and then a set of quotes so\nthis will print my phone number without\nany dashes\none two three four five six seven eight\nnine zero so that's a use of\nthe continue control statement it skips\nto the next iteration of the loop\nlast but not least we have pass pass\ndoes nothing\nit acts as a placeholder let's say that\ni would like to print the numbers\n1 through 20 using a for loop for i\nin range 1 through 21 and remember that\nthe second digit is\nexclusive so this will iterate once\nthrough the digits of 1\nthrough 20. let's pretend that i'm\nhighly superstitious and i don't want to\nprint\nthe number 13 because 13 is considered\nan unlucky number\nif i is equal to 13\nwhat we'll do is pass and pass acts as a\nplaceholder and it won't do anything\nelse print\ni that's one i there we go\nthis will print the numbers 1 through 20\nand skip 13 because we used\nthe past control statement which does\nnothing it acts as a placeholder\nso everybody those are loop control\nstatements they change\na loop's execution from its normal\nsequence we have break\ncontinue and pass so if you would like a\ncopy of all this code\ni will post all of this in the comments\nsection down below but yeah those are a\nfew\nloop control statements in python what's\ngoing on everybody\nit's bro hope you're doing well and in\nthis video i'm going to explain\nlists in python so sit back relax\nand enjoy the show\nall right ladies and gentlemen let's get\ndown to business i got to explain\nlists to you all now a list is used to\nstore\nmultiple items within a single variable\nfor example let's say we have a variable\ncalled food\nand i will store a string value of pizza\nbecause i like pizza\nwhat we could do is that we can store\nmultiple items within this\nvariable by turning this variable into a\nlist\nand in order to do so we're going to\nsurround all of the values that we would\nlike to add\nto our list with a set of square\nbrackets\nand boom there you have it we now have a\nlist called food it is no longer\na variable so what we could do is add\nmultiple items to this list of food so\nlet's add some other food items that we\nmight like\nlet's see i also like maybe some\nhamburgers\nand a hot dog\nand maybe some spaghetti i think i\nsmelled spaghetti right\nokay so we now have a list called food\nnow what happens if we attempt to print\nthis list of food\nso print food so this will\nprint all of the elements found in this\nlist\neach item in a list is referred to as an\nelement\nif we need to access a certain element\nof\nthis list we have to list the index so\nnext to our list we'll add a set of\nsquare brackets again\nand we need to list the numbered index\nof the element that we're trying to\naccess\nnow computers they always start with\nzero so the first\nelement in our list would be element\nnumber zero\nthe next one would be one two and three\nso if we need to access element zero\nwhich is in the first position we would\nsay food square brackets\nand then within here list the index so\nthe first position\nis zero and this will now print the\nfirst element of our list\nwhich is pizza let's attempt to access\nsome of these other elements\nso the element at index one would be\nyou guessed it hamburger two\nwould be hot dog and three would be\nspaghetti\nnow what happens if we attempt to access\nthe element at index four\nwell currently that's out of range\nbecause we did not assign\na value so we're experiencing an error\nan index\nout of range error but if i were to add\nanother element\nlet's say pudding alright well then\nthe element at index 4 would be putting\nthen\none important concept with lists is that\nyou can always\nupdate and change the elements found\nwithin a list\nlater on in the program after you\ndeclare one so let's say we would like\nto\nimmediately change one of these elements\nlet's say\nfood at index zero i want to\nreplace with maybe sushi because sushi\nis great\nso if i were to print the element at\nindex\n0 this would no longer be pizza because\nwe updated element 0 to be\nsushi then and this prints sushi now if\nyou need to display\nall of the elements found within a list\nyou can easily do so with a standard for\nloop\nwhat we'll do is say for x in\nthe name of our list which is food\nprint x and let me turn this line into a\ncomment\nall right so this for loop will print\nall of the elements found within our\nlist\nof food and the results are sushi\nhamburger hot dog spaghetti and pudding\nall right people for this next portion\ni'm going to demonstrate a few useful\nfunctions of\nlists and to access some of these\nfunctions type the name of your list\ndot and there's a bunch to choose from\nhere let's begin with\nevent we can add an element to this list\nlet's say at the end i would like to add\nice cream so then if i were to display\nmy list we now have ice cream at the end\nbecause we appended\nthis value to my list of food so let's\ngo over a few others\nso we can also remove a value food\ndot remove let's say i would like to\nremove\nhotdog so i'm going to type that within\nmy function and this will remove hotdog\nand that is no longer here\nnext we can pop food.pop\npop will remove the last element so this\nwill remove\npudding\nwe can insert a value at a given index\nfood dot insert we need to list an index\nlet's say zero that would be the first\nposition technically that's where pizza\nis currently\nand i would like to add cake\nand at index 0 we now have cake\nso next up we have sort\nfood dot sort this will sort a list\nalphabetically\nso in the first position we have\nhamburger hot dog pudding spaghetti\nthen sushi we can also clear a list\nfood dot clear and this will remove\nall of the elements of a list so this\nwill not print anything because we\ncleared the list\nwell everyone in conclusion a list is\nreally just a variable that can store\nmultiple values think of it that way so\nif you would like a copy\nof all the code that we have written\nhere today i will post all of this in\nthe comments down below\nbut yeah that's how lists work in python\nhow's it going everybody it's bro hope\nyou're doing well\nand in this video i'm going to explain\n2d lists in python so sit back\nrelax and enjoy the show\ni have a super quick video for you all\ntoday on\n2d lists also referred to as\nmulti-dimensional lists\nall it is is a list of separate lists\nso let's begin by creating a few\nseparate lists let's say we have a list\ncalled drinks and let's assign a few\nvalues\nlet's say we have coffee as well\nas soda and maybe some tea\nall right so we currently have one list\nlet's make maybe two more let's make a\nlist called\ndinner and maybe in here we'll place\npizza then hamburger\nand hot dog okay\nthen let's create one more for this\nexample let's say dessert\nand maybe we'll add two items\nthey all don't need the same amount of\nitems or elements so we have cake\nand ice cream\nall right so we have three lists one\ncalled drinks\ndinner and dessert so what we can do is\nadd\nall of these lists to one list\nand let's create a list called food food\nequals and for each of these elements\nwe're going to place\nour lists so we have drinks dinner\nand dessert check this out what if i\nwere to\nprint my 2d list of food\nso what ends up happening is that this\nwill print all of the elements\nfound within each individual list and\nthey're all grouped together\nso this first portion is my drinks list\nwhich contains coffee soda tea this next\nelement\nis my dinner list which contains pizza\nhamburger hot dog and the last element\ndessert contains cake and ice cream if i\nneed to access\njust one of these lists i will add an\nindex\nafter my food 2d list and\nset an index number so index zero is\nreferring to my first\nlist of drinks and this will display all\nof the elements found within my first\nlist\nand if i need just one of these elements\ni will add\na second set of square brackets and list\nthe index of the item that i'm trying to\naccess\nso this very first item coffee would be\nindex zero and then index zero again so\nwe need\ntwo sets of square brackets and if i\nwere to print this\nthis will display coffee so if i go down\nthe list\nthe next element would be soda\nand then t if i were to change the index\nwithin\nthis first set of square brackets well\nnow we're working with\na different list this time we're working\nwith our dinner list\nso the element at index 1\nindex 2 that would be our dinner list\nand this will display the element of hot\ndog\nif i change this to the next list which\nwould be dessert\nwell we're going to receive an index out\nof range error because\nwe only have two values within this list\ncake and ice cream there is no element\nat index 2 because we only added two\nelements\nto this list of dessert all right\neverybody so that\nis 2d lists also referred to as\nmulti-dimensional lists\nit's a list of separate lists if you\nneed to access\none of the elements within your 2d list\nyou need\ntwo sets of square brackets so if you\nwould like a copy of this code\ni will post this in the comments down\nbelow but yeah that's how\n2d lists work in python hey what's going\non people\nit's you bro hope you're doing well and\nin this video i'm going to explain\ntuples in python so\nsit back relax and enjoy the show\nso tuples they are collections which are\nordered\nand unchangeable they're very similar to\nlists but they're ordered\nand we can't change them they're useful\nfor grouping together related data\nlet's say we would like to create some\nsort of student record\nso we can create a tuple to take care of\nthat for us so let's say we would like\nto create a tuple called student\nthe process of creating a tuple is very\nsimilar to lists\nbut instead of using a set of square\nbrackets to place all of the values\nwithin\nwe're going to use a set of parentheses\nand now we can add a bunch of values\nrelated to this collection of student\nso let's add some student information\nlet's say that this student's name is\nbro\nlet's give him an age as well as a\ngender\nall right so there you have it we now\nhave a tuple called student\nand let's take a look at some of the\nfunctions related to tuples\nand you can access them by typing\nstudent dot\nand then there are a few here not as\nmany as lists we have count and we have\nindex\nso we can find the count of how many\ntimes a value appears\nlet's count how many times the value of\nbro appears\nso we'll need to put this within a print\nstatement so we can actually see it\nso bro appears\none time within this tuple there is also\nan index method as well\nso type the name of your tuple dot\nand we will use the index method we can\nfind the index of a certain value\nlet's say we would like to find the\nindex of mail\nand then i will just print this to the\nconsole window\nso the index of the value mail would be\nat two zero one\ntwo that's it for the methods available\nto tuples\na few tricks that you can do with tuples\nis that you can display\nall of the contents within a tuple using\na for loop\nlet's say 4x in student\nwe will print x so\nthis will iterate once through all the\nvalues found within our tuple\nof student and we can also check to see\nif a certain value\nexists within our tuple using an if\nstatement let's say if\nbro in student\nif this is true then what do we want to\ndo let's say\nprint bro is here\nall right so since bro is within here\nthis will be true and this will print\nour\nstatement of bro is here all right\neverybody like i said this is a super\nquick video on tuples\nthey're very similar to lists except\nthey are ordered and unchangeable if\nyou'd like a copy of all this code i\nwill post all of this in the comments\ndown below\nand don't forget to smash that like\nbutton drop a comment down below\nand subscribe if you'd like to become a\nfellow bro\nhey what's going on everybody it's you\nbro hope you're doing well\nand in this video i'm going to explain\nwhat a set is in python so\nsit back relax and enjoy the show\na set is a collection which is unordered\nas well as being\nunindexed they do not allow any\nduplicate values\nfor example let's create a set of\nsilverware\nso in order to create a set we need a\nname for this set\nlet's call it utensils equals\nand in order to create a set we need to\nsurround all values with a set\nof curly braces now let's add a few\nutensils\nto the set called utensils let's add a\nfork\na spoon and maybe a knife and that\nshould be good\nand let's display all of the values for\nx in utensils\nprint x now with sets\nthey're different from lists because\nthey're unordered as well as being\nunindexed\nif i were to print all of the elements\nin utensils\nthey might not necessarily be in the\nsame order in which we placed them\nfor example when we printed all of the\nelements found within utensils\nfirst we had a knife a fork and then a\nspoon if i were to run this again\nthey might be in a different order kind\nof like that\nso a set is actually faster than a list\nif you need to check to see if something\nis within a set compared to a list and\nthey do not allow any duplicate values\nlet me add a bunch of knives and let's\nsee what happens\nso i'll have a total of three knives but\nwhen we print all of the elements\nof the set only one knife appears so\nhere's a few useful methods of sets\nthe first method is that we can add an\nitem to our set\nso type in the name of the set in this\ncase it's utensils dot and here's a\nbunch of methods that you can use\ni am looking for add and we can add an\nelement to the set\ni would like to add a napkin\nand then if we were to print the set we\ndo have a napkin\nwithin the set we can also remove an\nelement\nutensils dot remove\nand i would like to remove the fork\nand now our fork is gone we can also\nclear\nutensils dot clear\nand all the elements within our set\nshould be gone\nso let me turn these lines into a\ncomment\nall right for this next example we'll\nneed a second set\nlet's create a second set called dishes\nand then we need a set of curly braces\nand\nlet's add a bowl\na plate and a cup\nour next method is that we're going to\nadd one set to another by using the\nupdate method\nlet's say we would like to add our\ndishes set to our utensil set\nso let's type utensils dot and use the\nupdate method\nand within this method we will pass in\nthe set that we would like to add\nso utensils update dishes this will add\nall of the elements found within dishes\nto our utensil set and you can see that\nwhen we print our utensils\nwe have a bowl a plate and a cup in here\nas well\nand then if i were to switch these\naround let's say dishes\nupdate utensils and then i will\nprint everything found within dishes now\nthere's a fork a spoon\nand a knife in here as well we can also\njoin\ntwo sets together and create a new set\nentirely\nso let's create a set called dinner\ntable like we're setting up a dinner\ntable and we need a fork a spoon a knife\na bowl a plate and a cup\nso we have a dinner table set\nwe're going to set the sequel to either\nutensils\ndot union\ndishes or we could do dishes\nunion utensils either way would work and\nlet's display all the elements found\nwithin dinner table\nand we should now have elements from\nboth sets utensils\nand dishes as well there are also some\nmethods in which we can compare\nthe similarities as well as the\ndifferences between\nthe elements found within two sets let's\nsay i would like to check to see\nwhat utensils has that dishes doesn't\nand for this example i think i'll add a\nknife\nto my dishes set just so that they have\nat least one thing in common\nso i would like to see what utensils has\nthat dishes doesn't so we can do so\nusing the\ndifference method and i will print the\nresults with a print statement\nso i'm going to compare utensils against\ndishes utensils\ndishes and this will print what utensils\nhas\nthat dishes doesn't which is a fork as\nwell as a spoon\nand we can reverse the rolls too we\ncould say dishes difference\nutensils what do dishes have that\nutensils doesn't\nand dishes has a cup a bowl and a plate\nthey both have knives so that's why\nknife isn't appearing\nwe can also check to see if there's\nanything that they have in common\nusing the intersection method so i'll\nturn this line into a comment\nwe'll print utensils\ndot intersection\ndishes and this will return whatever\nelement that they have in common\nwhich is a knife all right everybody in\nconclusion a set\nis a collection which is unordered as\nwell as being\nunindexed they do not allow any\nduplicate values\nand you can do things like compare two\nsets see if there's anything that they\nhave in common any differences\nand we can add or remove elements to a\nset if you'd like a copy of all this\ncode i will post all of this in the\ncomments down below\ndon't be afraid to smash that like\nbutton drop a comment down below\nand subscribe if you'd like to become a\nfellow bro hey what's going on everybody\nit's you bro hope you're doing well and\nin this video i'm going to explain\nhow dictionaries work in python so sit\nback\nrelax and enjoy the show\nall right let's get down to business a\ndictionary is a\nchangeable unordered collection of\nunique key value pairs they're fast\nbecause they use hashing\nand they allow us to access a value\nquickly\nnow to create a dictionary it's very\nsimilar to creating a\nset based on the last video except we're\ngoing to store\nunique key value pairs let's create a\ndictionary\nof countries and their capitals we can\nstore those\nas key value pairs so let's call this\ndictionary\ncapitals capitals equals then we need a\nset of curly braces much like what we\nuse\nwith sets now we need a key\nand a value let's say we have the usa as\na key\nand the capital of the usa would be\nwashington dc\nso in order to associate a value with\nthe key we'll follow the key with a\ncolon\nand then add some value and the data\ntype really doesn't matter but\nin this case we're just using strings so\nthe capital of the usa\nwould be washington dc\nand to add another key value pair we'll\nseparate each with a comma\nand let's add a few others for good\nmeasure so let's say we have india next\nas a key and the value would be\nnew delhi and we'll add two more\nlet's say we have china\nand the capital of china is beijing\nand lastly let's add russia\nand the capital of russia is moscow\nand there you have it ladies and\ngentlemen we now have a dictionary\ncalled capitals\nthat has unique key value pairs so\nremember with\ndictionaries they are unordered in order\nto access one of these values\ninstead of using a numbered index we're\ngoing to use the associated key with\nthat value\nhere's an example let's say i would like\nto print the capital\nof russia so i need to use this key of\nrussia\nso in order to do this type in the name\nof the dictionary\nfollowed by a set of straight brackets\nand then instead of an\nindex number like 0 or 1 2 3\ni'm going to use the key so i would like\nto print\nthe value that's stored or associated\nwith the key\nof russia so when i run this this will\nprint\nthat value which is moscow so this isn't\nalways safe\nlet's say we have a key that doesn't\nexist like germany\ngermany is not currently within my\ndictionary so if i were to run this\nwell then my program is going to\nencounter an error\nand this will interrupt the normal flow\nof my program\na much safer way to access a key\nto check to see if it's there or not is\nto use the get method\nof dictionaries so i'm going to turn\nthis line into a comment and let's try\nthis again but this time we'll use the\nget method\nso type in the name of the dictionary\ndot get\nand list the key that you want to use\nso i would like to see if germany\nis within my dictionary currently there\nisn't so this will return\nnone and we will not encounter an error\nso this is a much\nsafer way of checking to see if there is\na key within your dictionary\nhere's a few other useful methods there\nis a method to print only the keys\nso we type in the name of the dictionary\ncapitals\nand here's a listing of all of the\nmethods that we have access to\ni'm looking for the keys method and this\nwill print\nonly the keys and not the values we can\nalso print\njust the values and not the keys so type\nin the name of the dictionary again\ncapitals dot values\nand this will print only the values or\nyou could print everything\nboth the keys and the values and you do\nso by using\nthe items method capitals\ndot items\nand this will print your entire\ndictionary one other way in which we can\ndisplay\nall of the key value pairs in a\ndictionary is to use a for loop\nso at the end let's create a for loop\nfor\nkey comma value in\ncapitals dot items\nthis is going to iterate once for each\nkey value pair\nin my dictionary for each key value in\ncapitals\ndot items print\nkey comma value\nand this will print my entire dictionary\na feature of dictionaries\nis that they are mutable that means we\ncan change them or alter them\nafter the program is already running so\none way in which we can do that\nis to use the update method of\ndictionaries\nso let's add germany as a key and give\nit a value\nof berlin so type in the name of the\ndictionary capitals\nand we'll use the update method and\nwithin the parentheses of this method\nwe'll add a set of curly braces and now\nwe can add a new\nkey value pair so let's add germany\nand a value of berlin so if i were to\nrun this and display\nall of the key value pairs found within\nmy dictionary we now have\ngermany as a key and berlin as its value\nnot only can you use the update method\nto add a new\nkey value pair but you can update an\nexisting one let's say we would like to\nchange the\ncapital of usa so capitals\ndot update parentheses curly braces\nlist the key usa colon\nand then we can give the usa a new value\nlet's pretend that the united states\ngovernment has decided to relocate\ntheir capital to las vegas\nso this will now update our key of usa\nwith a new value and if i were to print\nall of the key value pairs found within\nmy dictionary of capitals the usa has a\nnew value\nof las vegas so the last two methods i'm\ngoing to cover are both pop\nand clear you can use the pop method to\nremove\na key value pair so capitals\ndot pop parentheses and list the key\nof the key value pair that you would\nlike to remove so let's say we would\nlike to remove china\nso we'll list that key and then when we\nuse the pop method\nthat will remove this key value pair\nfrom my dictionary\nand then of course we have clear as well\nwhich will just remove everything\ncapitals dot clear\nand this will clear my dictionary all\nright everybody\nso in conclusion a dictionary is a\nchangeable\nunordered collection of unique key value\npairs\nthey're fast because they use hashing\nand they allow us to access a value\nquickly\nwell that's the basics of dictionaries\nin python\nif you would like a copy of all this\ncode i will post all of this in the\ncomments down below\nbut yeah that's how dictionaries work in\npython\nhey what's going on everybody it's bro\nhope you're doing well and in this video\ni'm going to teach you guys all about\nthe index\noperator in python so sit back relax\nand enjoy the show\nall right people let's begin i'm going\nto be explaining the index operator\nwhich is represented by\na set of square brackets now they give\naccess\nto a sequences elements they include but\nare not limited to\nstrings lists and tuples for this\nexample we're going to be working with\nstrings because strings are easy to work\nwith\nlet's say we have a name and name equals\nwhatever your first\nand last name is we can use the index\noperator to access\nan element of the sequence our string\nso let's check to see if the first\nletter in our name\nis lowercase and i should probably\nchange that to lowercase for this\nexample\nso within an if statement if name and we\ncan add a set\nof square brackets after our sequence\nwhich is a string and we can check\na given element of our sequence let's\ncheck to see\nif the first letter is lowercase\nnow with computers they always start at\nzero if you need to access the first\nelement\nin a sequence that would be index zero\nand then the next sequence well the next\nelement in the sequence would be one\nthen two then you followed that pattern\nso i would like to check to see if\nname at index zero that would be the\nfirst character\nis lowercase so there is a method to\ncheck that\ndot is lower this will return\ntrue or false if the first letter is\nlowercase\nthen our if statement is going to be\nresolved to true\nand what i could do is that i can\nperhaps change it\nto uppercase then so let's reassign\nname to equal name dot\nand there is a capitalize function here\nand then let's print our name print\nname so when we run this\nthe first letter in my name is now\ncapitalized\nso if you need to access an element\nwithin a sequence a string or\nlist or a tuple you would add a set\nof square brackets afterwards and then\nyou list an integer\nof the element that you're trying to\naccess so here's a few other examples\ni'm going to turn\nthis as well as this into a comment\nand let's say we would like to create\nsome substrings and we can do so\nusing our index operator so i would like\nto\ncreate a substring from the first part\nof my name\nso what i'll do is create a new variable\nfirst\nname equals name index operator\nso you can specify a range for an index\noperator\nso you would set the starting position\non the left hand side followed by a\ncolon and then your ending position\nso i would like the substring to begin\nat index 0 and\nend at 3 so that would be 0 colon\nthen three all right and then i would\nlike to make this all\nuppercase for some reason and then let's\nprint my first name\nso with the index operator we specified\na range\nwe would like to access elements 0\nthrough\n3. turn them up your case and assign\nthem to a new\nvariable of first name here's a shortcut\nthat you might find useful\nif the index for your range begins with\nzero you can actually delete that you\ndon't even necessarily need that zero\nnow we just have a colon three and this\nwould work the same as it did before\nso that's a useful shortcut and we're\ngoing to bring it up later if we need to\naccess the last element in a sequence\nthis time let's create a\nsubstring of last name so last\nname equals name index operator\nthis time i would like to access the\nelement at index let's see 0 1\n2 3 4. all right so i'm going to say\nfor colon and we're not really sure\nwhere our name our last name is going to\nend\nso what you could do is just say colon\nand then leave\nthe next index blank so that will be\nthe index beginning at four and\neverything afterwards\nand let's say two lower to make this all\nlowercase for some reason\nso let's print our last name print\nlast name so this should\ntake everything starting at index 4\nand after that and turn it into its own\nsubstring of last name\nnow you can access the last element in a\nsequence by using what's called\nnegative indexing so let's add\na exclamation point to the end of our\nname so let's say\nwe have a new variable called last\ncharacter and i would like to store\nthe last character in my name to this\nnew\nvariable this new substring so to access\nthe last\nelement in a sequence within the index\noperator we can use\nnegative indexing so the last element\nwould be\nnegative one all right and then let's\nprint\nwhatever our last character is so this\nshould print an exclamation point\nyep which did so then if this was\nnegative 2\nthat would be the second to last element\nin a sequence\nso now that would be e because e is in\nthe second to last\nelement in my sequence all right\neverybody so that's the basics of the\nindex operator\nyou can add a set of square brackets\nafter a string\na list or a tuple and then list an\ninteger or a range\nof the elements that you're trying to\naccess so if you would like a copy of\nall this code i will post everything in\nthe comments down below\ndon't be afraid to help me out and smash\nthat like button drop a comment down\nbelow\nand subscribe if you'd like to become a\nfellow bro\nhey what's going on everybody it's you\nbro hope you're doing well\nand in this video i'm going to explain\nhow functions work in python so\nsit back relax and enjoy the show\nif you find this video helpful please\nremember to like\ncomment and subscribe your support will\nhelp keep this channel running\nokay let's do this thing a function\nis a block of code which is executed\nonly when it is called\nthis process is also known as invoking a\nfunction\nwith programming we try not to repeat\ncode if we don't have to\nthat's why functions are useful because\nour function can perform\nsome specific task for us some block of\ncode for us\nwhenever it is called so we only need to\nwrite that block of code\nonce and if we need to repeat it we just\ncall this function one more time\nso let's define and create a function\nwe'll create a function called hello\nand in order to define a function we'll\ntype def\nand then a unique function name so let's\ncall this function hello\nand with functions they always end with\na set of parentheses\nand lastly to finish defining this\nfunction we'll add\na colon at the end so if you go down to\nthe next line\ntake notice that my cursor is now\nindented\nany code underneath a function that is\nindented\nbelongs to that specific function and\nwill only execute\nwhenever that function is called so for\nnow we need to type in something\nif you don't know what you want your\nfunction to do you can always type pass\nfor now\nbut let's print something print the word\nhello and in order to call this function\nall we need to do within our program is\ntype the name of the function which is\nhello\nand then add a set of parentheses\nbecause functions always end with a set\nof parentheses\nso what this will do is execute my\nfunction\nonce and perform this block of code\nwhenever it is called\nif i were to remove this well our\nprogram currently isn't going to do\nanything\nbecause functions only execute their\nblock of code\nonly when it is called so this time\nlet's print the word\nhello three times so i will call this\nfunction\nthree separate times hello hello hello\nso when i run this our hello function\nwill be called\nthree separate times now with functions\nthey are not limited to just one line\nthis is an entire block of code so maybe\nwe can do something else too\nlet's print have a nice\nday now if i were to run this my hello\nfunction is going to execute\nthis entire block of code three separate\ntimes hello\nhave a nice day now an important feature\nof functions\nis that we can send our function some\ninformation\nand our function can do something with\nthat information that it receives\nlet's say this time i would like to\nprint hello plus somebody's name\ncurrently name is an unresolved\nreference what we can do\nwhen we call this function is send our\nfunction some information\nthis can be a value a variable a\ncollection\nall sorts of different things so if you\nneed to send your function some\ninformation\nwithin the parentheses when you call\nthat function just list the data that\nyou want to send your function\nso let's say i would like to send my\nfunction a string\nvalue of bro whatever your first name is\nwhen you send information\nto a function these are called arguments\nthey are the information that you're\nsending to a function\nand when you define that function you\nneed a matching\nset of what is known as parameters\nso our hello function is going to\nreceive one argument a string value\nwe need a matching number of parameters\ncurrently this isn't going to work you\ncan see here that hello\ntakes zero positional arguments but one\nwas given\nour function needs a matching number of\nparameters\nso think of it this way when we receive\nthis value\nwe're going to give a nickname to this\nvalue\nso when we receive the string value what\ndo we want to call it\nwell let's call it name so in order to\nadd parameters\nto your function just list the\nparameters within\nthe parentheses of that function and\nwell this should work now\nwe have a matching set of arguments and\nparameters when we call the hello\nfunction this time we are sending\none argument over and when our hello\nfunction\nreceives this argument we're going to\ngive it a temporary nickname of\nname or you can call this whatever you\nwant to and then we can use\nthis value for whatever we want within\nour function\nnow if we were to run this this will\nprint hello bro\nhave a nice day now i can send maybe a\ndifferent value\nlet's say hello and then i will send a\nstring value of dude\nhello dude have a nice day so this isn't\nlimited to\njust values we can send variables to\nlet's say we have a\nvariable called name equals\nbro and this time i'm going to send\nthis variable over hello and then send\nname so these don't need to be the\nexact same let's say this is\nmy name and i'm going to send\nmy name over and i will temporarily give\nthis value a nickname of just name\nand then i can use this variable for\nsomething hello bro\nhave a nice day now with arguments you\ncan send\nmore than one value over let's say this\ntime i would like to send\ntwo values over so let's send pro\nmaybe for a first name and code for a\nsecond name but\nyou can use your first name and last\nname so this isn't going to work because\nwe do not have a matching set\nof arguments and parameters we're\nsending\ntwo arguments over but our function is\nonly designed\nto accept one argument because we have\none parameter so let's rename\nname as first name and we need\ntwo parameters this time so what are we\ngoing to call\nthis value when we receive it let's call\nthis last name\nso this time we are going to receive two\nvalues\nthey will be nicknamed first name and\nlast name so this time\nlet's print hello first name\nmaybe i'll add a space plus\nlast name and this is now valid\nhello bro code have a nice day with\narguments\nyou can mix and match the data types\nthat you're sending\nas arguments so currently we're sending\ntwo\nstring values as arguments this time\nlet's send an integer value\nlet's say we would like to send an edge\nover to our hello function\nso i'll just send maybe the value of 21.\nso currently this isn't going to work\nbecause the hello function takes two\npositional arguments\nbut three were given when we call this\nhello function we're sending\nthis argument over but our function\ndoesn't know what to do with this\nargument\nso we need a matching parameter for this\nvalue that it receives\nso let's call this value maybe edge as a\ntemporary nickname\nand then we can do something with this\nvalue when we receive it\nso let's print an additional message\nperhaps u r plus\nage plus years\nold so if you need to display an\ninteger or number along with the string\nyou do need to convert it to a string\nso let's just cast our edge as a string\nwhen we display this\nso this should work now we now have a\nmatching number\nof arguments and parameters so this will\ndisplay\nhello bro code you are 21 years old have\na nice day\nso ladies and gentlemen in conclusion a\nfunction\nis a block of code which is executed\nonly when it is called\nif i were to remove this function call\nwell then\nour program is just going to completely\nignore this function and\nthis block of code would not be executed\nwhen we call this function we can pass\ninformation known as arguments but we\nneed a\nmatching number of parameters set up to\nreceive\nthese arguments there are a few advanced\nfeatures of parameters but\ni'll hopefully get to that in future\nvideos we'll just stick with the basics\nfor now of functions\nso that's the basics of functions if you\nwould like a copy of this code\ni will post this in the comments down\nbelow but yeah that is how functions\nwork in python hey what's going on\neverybody it's you bro hope you're doing\nwell\nand in this video i'm going to explain\nthe return statement in python so\nsit back relax and enjoy the show\nall right people let's begin the return\nstatement is used within functions\nto send python values or objects back to\nthe caller\nthese values or objects are known as the\nfunction's\nreturn value so do you know how with\nfunctions we can pass\narguments to a function and then our\nfunction can do something with those\narguments\nwell not only that but our function can\npass some value or\nobject back to the caller so what we'll\ndo for this example is create\na function that will simply multiply two\nnumbers together\nand return the result back to the caller\nso let's define\na function called multiply and we'll set\nup two parameters for this function\nlet's say number one and number two\nand what we'll do is say result\nequals number one times number two\nand then at the end we can return\nsomething what do we want to return\nlet's return whatever the result is now\nwhen we call this function we will pass\nin two values as arguments let's say we\nwould like to multiply\nsix times eight so when we run this well\nwe can't actually see anything\nwhen we return the result after\nmultiplying numbers\none and two it's going to return the\nresult back to the caller\nin order to see the value that is\nreturned back to the caller\none way in which we can do this is to\nprint\nthe value that is returned within a\nprint statement\nso what we'll do is print the value that\nis returned after calling the multiply\nfunction\nso 6 times 8 is really great 6 times 8\nis 48\nnow one other thing that we can do is\nstore the returned value within a\nvariable\nso let's say x equals multiply\n6 times 8 and then we will print\nwhatever x is\nso the result is still the same of 48\nnow with the return value there is\nanother way in which we could write this\nthat uses\nless lines of code so we'll delete this\nfirst line and instead of returning\na variable called result what we'll do\nis just return\nnumber one times number two and this\nwould work the same as it does before\nbut it's written in less lines of code\nso that's another way in which you could\nwrite this\nall right everybody so that is the\nreturn statement functions can send\npython values or objects back to the\ncaller\nthese values or objects are known as the\nfunctions return\nvalue you can either print this value\ndirectly to the console window\nor you can store it within a variable or\nsome other location\nand well ladies and gentlemen that is\nhow the return statement works in python\nwhat's going on everybody it's bro hope\nyou're doing well\nand in this video i'm going to explain\nkeyword arguments in python so\nsit back relax and enjoy the show\nall right everybody let's discuss\nkeyword arguments\nthese are arguments that are preceded by\nan identifier when we pass them to a\nfunction\nthe order of the arguments doesn't\nmatter unlike positional arguments\nwhich do matter and we've been working\nwith positional arguments already\nand python knows the names of the\narguments that our function receives\nwhen we use keyword arguments here's an\nexample of us\nusing positional arguments and then i'll\ndemonstrate the benefits of\nkeyword arguments let's say we have a\nfunction called hello\nthat accepts three arguments a first\nname a middle name and a last name\nand the output will be hello first name\nmiddle name last name\nso if i were to run this this will\ndisplay hello bro\ndude code so we're using positional\narguments\nthe order of the arguments does matter\nwhat do you think's gonna happen if i\nwere to replace some of these values\nlet's say i will swap the first argument\nwith the\nthird argument so let's try it again\nhello code dude bro so obviously the\norder of the arguments matters\nand now if we were to use keyword\narguments then the order of the\narguments\ndoesn't matter but with each argument we\nneed to precede each argument with\na unique identifier and that identifier\nis the name of the parameter we want to\nassociate each argument with\nso for my intended last name i will use\nan identifier of\nlast to match this parameter so\ndude will be middle middle equals dude\nand bro\nwill be first even though they're not in\nthe correct order so let's try this\nagain\nand my output is hello bro dude code\nso that's all about keyword arguments\nthey are arguments\npreceded with an identifier when we pass\nthem to a function\nthe order of the arguments doesn't\nmatter unlike positional arguments\nwhich do matter and then python knows\nthe names of the arguments\nthat our function receives when we use\nkeyword arguments\nso that's it for keyword arguments if\nyou would like a copy of this code\ni will post this in the comment section\ndown below but yeah that's how keyword\narguments\nwork in python hey what's going on\neverybody it's you bro hope you're doing\nwell and in this video i'm going to\nexplain\nnested function calls in python so sit\nback\nrelax and enjoy the show\nall right people nested function calls\nthese are function calls\ninside of other function calls and this\nis possible because\ncertain functions will return a value\nand we can immediately use that value as\nan argument for the next function\nso here's an example let's say that we\nhave the small program\nwhere we will ask a user to type in a\nwhole positive number\nand let's say i don't let's say i type\nin negative 3.14\nand then i'm storing that value within a\nvariable\nnamed num what i'm going to do is\nconvert that number\nto a floating point number because\ncurrently it's a string when you accept\nuser input\ni will find the absolute value of num\nand then round it to the nearest whole\nnumber\nand then print the value so we can\nactually do this using less lines of\ncode with nested function calls\nso let's start with the first function\nwhich will be accepting some user input\nthe input function so this will be in\nthe very center\nof our nested function calls and then\nthe next function we would like to apply\nto\nthe variable that is returned the value\nthat is returned\nwe will pass in as an argument to our\nnext function of casting\nthis data type to a float so we'll\nsurround\nour function with another function and\nuse\nthe float function and then we'll just\nkeep on adding layers to this\nso we have the absolute value function\nnext\nso we'll add another layer and we have\nthe round function\nso we'll add a layer to that and\nlastly we're going to print and that'll\nbe the outermost layer\nso this program will do the exact same\nthing\nlet's say negative 3.14 except we've\nwritten this with\none line of code so basically we start\nwith the innermost function and resolve\nthat first\nwhatever value is returned we use as an\nargument to the next outermost function\nand in this case it would be float then\nwe resolve that then move on to absolute\nvalue then round and then print\nso it's just another way of writing code\nthat takes up less\nlines but this is more of an extreme\nexample you probably won't see\nlike four or five nested functions well\neverybody those are nested function\ncalls\nif you would like a copy of this code i\nwill post all of this to the comment\nsection down below\nbut yeah those are nested function calls\nin python\nhey what's going on people it's your bro\nhope you're doing well and in this video\ni'm going to show you how variable scope\nworks in python so\nsit back relax and enjoy the show\nall right let's do a thing people let's\ndiscuss the scope of a variable\nnow the scope of a variable is the\nregion that a variable\nis recognized a variable is only\navailable from inside the region\nthat it is created let's say that we\nhave a function and i just gave this\nfunction a name of display name\ni created a variable inside of this\nfunction named name\nand you can assign this a value of\nwhatever your name is\npreferably a last name for this example\nand what i'll do is just print\nwhatever my name is so this variable is\nknown to have\na local scope because it's declared\ninside of a function\nand a variable is only recognized inside\nof the region\nthat it is created this variable of name\nsince it's created inside\nof this function it is known as a local\nvariable\nthat has a local scope it's only\navailable\ninside of this function that it's\ncreated now let's attempt to access this\nvariable from\noutside of our function so i'm going to\nprint my\nname variable but we'll have an issue\nthough\nso name name is not defined so\nlocal variables are declared inside of a\nfunction\nand they have a local scope they are\nonly\navailable inside of this function in\nwhich they're created\non the other hand a global variable is a\nvariable that is declared\noutside of any function but within your\nmodule that you're working with\na global variable is known to have a\nglobal scope\nthey are available inside and outside of\nany functions\nnow if i was to print my name variable\nthis is going to print\nbro or whatever your first name is and\nit is entirely possible to have both\na global and local version of the same\nnamed variable\nso we have both a global version of name\nas well as a local version of name\nif i was to print my name variable from\noutside of this function\nit's going to print my global version\nhowever if i print\nmy version of name inside of that\nfunction in which it's created\nwe're going to first use the local\nversion before the\nglobal version of name and let's try\nthat so i'm going to call\nmy display name function\nand this will print my last name\ncode and then my first name of bro so it\nis possible to have a global\nand local version of the same named\nvariable\nnow if i was to remove this line where\nwe declare a local version\nof name well then the next best\navailable name to us would be\nthe global version of name so if you use\na variable inside of a function\nyou'll first use a local version of that\nvariable\nif it's available if not you'll use a\nglobal version instead\nand python will follow this rule known\nas the legb\nrule you use any local variables first\nthen\nenclosed variables then global and then\nany built-in variables in that order\nso that's the main difference between\nlocal scope and\nglobal scope the scope of a variable is\nthe region in which it's available\nand it's limited to the region in which\nit's created a local scope\nis available only inside of the function\nin which that variable is created\na global scoped variable is a variable\nthat is available\ninside and outside of any functions but\nwithin your module that you're working\nwith\nso that's variable scope in python if\nyou would like a copy of this code i\nwill post this code to the comment\nsection down below\nand well yeah that's how variable scope\nworks in python\nhey what's going on everybody it's bro\nhope you're doing well\nand in this video i'm going to explain\nthe arcs parameter in python so sit back\nrelax and enjoy the show\nall right guys and gals let's talk about\nargs\nnow args is a parameter that will pack\nall arguments into a tuple\nit's useful so that a function can\naccept a varying amount of arguments\nhere's an example of why it would be\nuseful let's say we have a function\ncalled add that will accept two numbers\nas arguments\nand add them together and return the sum\nso this works as intended right as long\nas we pass in\nonly two numbers but what if we need to\npass in three numbers as arguments\nwell we can no longer use this add\nfunction because we have two parameters\nset up\nbut we're passing in three arguments you\ncan see here within my console window\nthat we have a type error\nadd takes two positional arguments but\nthree were given\nand one way in which we can solve this\nissue is to use this\nargs parameter so what we're going to do\nis replace all of our parameters\nwith asterisk args and actually\nthe args portion isn't as important as\nthe asterisk\nargs is short for arguments and you can\nreally name this whatever you want just\nbe sure that you have this asterisk\nbecause with this asterisk we're doing a\nform of packing\nwhat we're doing is passing all of these\narguments and packing them\ninto a tuple so let's rewrite this\nprogram so let's say maybe sum\nequals zero and then we will need to\niterate through all of the items within\nour tuple because\ntuples are iterable so let's say for i\nin args what we'll do is say sum\nplus equals whatever i is and at the end\nwhen we escape the for loop we will\nreturn\nour sum so let's try it again and see if\nit works\nwell would you look at that it works\nlet's pass in a few other arguments for\ngood measure\nlet's pass in six arguments this time\nall right look at that\nthis does in fact work so you can\nactually name this whatever you want the\nimportant thing is to have this asterisk\nso let's rename this as i don't know\nstuff\nand let's try this again yep\nit still works with tuples they are\nordered\nand unchangeable let's attempt to edit\none of these values\nso let's say stuff at\nindex zero is equal to\nzero and let's try and change it so you\ncan see that tuple object does not\nsupport\nitem assignment if you need to change\none of the values\nwithin your tuple after you pack all of\nthese arguments\nyou might need to convert this to a\ndifferent collection one way in which we\ncan do that is to cast it\nlet's say stuff equals and we'll cast\nour tuple as a list because a list\ncan be changeable it's mutable so let's\nattempt this again we'll cast\nour tuple as a list and then edit one of\nthe values\nand then add all the values together so\nto change one of the values\nsay the name your collection stuff in\nthis case let's say at index zero\nthis now equals zero so now if we were\nto add all these items together\nthey should equal 20. there we go so\nyeah that's basically the args parameter\nthe name isn't as important as the\nasterisk because you can really name it\nwhatever you want\na common convention is to just name this\nargs it's a parameter that will pack\nall arguments into a tuple it's useful\nso that a function can accept\na varying amount of arguments well that\nis all about args\nif you would like a copy of this code i\nwill post this in the comments section\ndown below\nbut yeah that is how the args parameter\nworks in python\nhey what's going on everybody it's bro\nhope you're doing well and in this video\ni'm going to be explaining quarks\nin python so sit back relax\nand enjoy the show\nall right everybody let's talk about\nquarkx now this is a parameter that will\npack\nall arguments into a dictionary it's\nuseful so that a function can accept a\nvarying amount of keyword arguments it's\nidentical\nto args except with args args will\naccept a varying amount of positional\narguments\nand pack them into a tuple with quarks\nthis will accept a varying amount of\nkeyword arguments\nand pack them into a dictionary so\nhere's an example of why this would be\nuseful\nlet's say we have a function called\nhello that accepts two keyword arguments\na first name\nand a last name all this will do is\noutput hello\nyour first name and last name but what\nif somebody has more than two names\nlet's say somebody has a middle name\nand for this example i'll just say my\nmiddle name is dude\nso if i were to run this well this hello\nfunction is no longer going to work\nas you can see in the console window we\nhave a type error\nthe hello function got an unexpected\nkeyword argument middle\none way in which we can solve this we\ncan use this quark's\nparameter so we can accept a varying\namount\nof keyword arguments so what we'll do is\nreplace\nour parameters with two asterisks then\nquarks now if i would like the same\noutput as i had before i'm going to need\nto change a few things around\nin order to access a value within a\ndictionary you type the name of the\ndictionary\nsquare brackets and then within quotes\nlist your key\nso i would like to access the value at\nthis key of first\nand let's repeat the process for last\nname\nso the key is going to be last we'll\naccess this value\nat this key and this should work the\nsame as it did before\nnow let's take this a step further let's\nsay we would like to display\nsomebody's full name based on the amount\nof keyword arguments that they pass into\nthis function\nwell there's a few different ways in\nwhich we could do this one easy way is\nthat we could write our program like\nthis\nlet's print the word hello\nand we will need to iterate once through\neach key value pair within this\ndictionary\nand we can use a for loop to do that so\nto iterate\nonce through each key value pair in your\ndictionary\nwe'll type for key value\nin the name of our dictionary quarks in\nthis case\ndot items and then we will print\neach value\nso there's one more thing that we need\nto do this kind of works as intended but\nit's going to\nprint each value including our word\nhello\non a new line so with a standard print\nstatement\nthis will print a new line character\nafter each print statement as if we're\nhitting enter\nwe can actually change that so after\nyour string\nadd and equals and we can replace that\nnew line character with something else\nmaybe a space\nand let's do the same thing for our for\nloop so value\ncomma end and then just add space now\nthis will print\nall of your names on the same line hello\nbro\ndude code and now we can pass in a\nvarying amount of keyword arguments\nbased on how long our name is\nperhaps we have like a title title\nequals\nmr and we can print that as well\nhello mr bro dude code here's a fun\nfact of the day you don't necessarily\nneed to name this parameter as quarks\nthe important thing is to have\nthese double asterisks that precede it\nquarks is just a\ncommon naming convention it's short for\nkeyword arguments\nyou could name this as something else\nperhaps something more descriptive like\nnames since we're passing in a bunch of\nnames so the name of our dictionary\nis now names and this would work the\nsame as it did before\nthe important thing is to have these\ndouble asterisks that precede the name\nof your dictionary\nbut quarks is the common naming\nconvention\nwell everybody that's all about quarkx\nit's a parameter that will pack\na varying amount of keyword arguments\ninto a\ndictionary if you would like a copy of\nall this code i will post\nthis in the comments section down below\nbut yeah that is how quarkx\nworks in python hey what's going on\neverybody\nit's your bro hope you're doing well and\nin this video i'm going to teach you\nguys all about the format method\nin python so sit back relax and enjoy\nthe show\nokay ladies and gentlemen let's begin\nthe format method\nis a method available to strings it's\noptional and it gives users\nmore control when displaying output to\nbest demonstrate this i'm going to use a\nline\nfrom a popular nursery rhyme titled hey\ndiddle diddle because well\nyou know i'm a mature adult like that\ni'll be printing\nthis line to my console window the cow\njumped over\nthe moon let's do so using a standard\nprint statement\nand then i'll show you the benefits of\nusing the format method later\nfor this example i have two variables a\nvariable called animal and i'm going to\nstore\na string of cow and item and i'll be\nstoring an item name\nwhich is moon when we compile and run\nthis as you would expect\nthe output is the cow jumped over the\nmoon\nthere's a more elegant way of writing\nthis line of code\nand that is by using the format method\navailable to strings\ni'm going to turn this line into a\ncomment and we're instead\ngoing to produce the same output but use\nthe format method\ninstead so we need a standard print\nstatement like usual\nand then a string that we would like to\nformat so\nwe're going to write the same thing but\nin place of the variables we're going to\nadd a placeholder\nthe instead of the variable name or\nvalue name i'm going to add\na set of curly braces so that functions\nas a placeholder\nfor a value or a variable the\nthis should be cow jumped over\nthe and i'm going to insert another\nplaceholder\nnow this is a string we can format the\nstring by following\nthis string with dot format parenthesis\nand within the parentheses of the format\nmethod we can insert\nsome values or variables let's begin\nwith some\nvalues i would like to insert cow\nas well as moon so this will produce\nthe same output but it's written a\nlittle more elegantly\nwe can also replace these with variables\nbecause\nthey store these values so i'm going to\nreplace cow\nwith animal and moon with item\nand this will create the same output as\nit did before\nthese curly braces are what's known as\nformat fields\nthey function as a placeholder for a\nvalue or\na variable and they work in order the\nfirst format field will insert the first\nvalue\nat this location if you have another set\nor more sets of this format field you'll\ninsert\nthe next value that's listed within the\nformat method\nso if we were to switch these around\nwe'll switch the position of animal with\nitem\nwell then the first format field is\ngoing to insert\nour item and the second format field\nwill insert our animal\nthis time the moon jumped over the cow\nan additional way of inserting values at\na given place holder would be to use\nwhat's referred to as a\npositional argument\nwithin these format fields we will list\nthe index of the value that we would\nlike to insert at this location\nif you need to insert the first value\nwell that has an index\nof zero because computers always start\nwith zero and following that pattern\nthe next index would be one if you had\nlet's say three values that you need to\ninsert if you had another placeholder\nthat would be two then so you would just\nfollow that pattern\nso there's going to be no visible change\nbut what we could do\nis reverse the positional arguments of\nthese placeholders\nso what do you think would happen if i\nswitched one with zero at these\nlocations\nwell this format field is going to\ninsert the value found at index\none this first value is index zero and\nthe second one\nis index one so now the roles are\nreversed this time the moon\njumped over the cow our last way of\ninserting some values at a given format\nfield would be to use what's referred to\nas a\nkeyword argument within\nthe format method we're going to list\nsome keyword argument pairs\nwe need a keyword name followed by a\nvalue\nso let's say animal is going to be the\nkeyword we're going to say equals\nsome value animal equals cow and\nitem equals moon and you may have\nnoticed that the color of your text\nmight have changed\nso we no longer need these variables\nactually um but i'm going to comment out\nthese two print statements because we\nwill get an error then\nso these are in keyword argument pairs\nand within our format field instead of\nkeeping these empty\nor using an index we can use the keyword\nname at my first format field i'm going\nto insert my keyword\nof animal and at my second format field\ni would like to insert\nthe item keyword so the result is going\nto be\nthe cow jumped over the moon so let's\nreverse these now\nwe'll place our item keyword here and\nthen at the second format field we will\ninsert\nour animal and this time the moon\njumped over the cow here's an important\nconcept that i'd like to bring to your\nattention\nwith these values found within the\nformat method you can actually reuse\nsome of these\nmore than once so let's say we would\nlike to state\nthe animal jumped over the animal we're\ngoing to use\nthis animal keyword twice and our output\nis going to be\nthe cow jumped over the cow if we're\ndoing the same thing with positional\narguments\nwe can reuse the same index this time\nlet's say\nthat the moon jumped over the moon so\nour item has an\nindex of one so within our first format\nfield we'll state\nthe index will be one and our second\nformat field will also be one\nso our output's going to be the moon\njumped over the moon\nall right let's take things up a level\nthere's an even more elegant way in\nwhich we could write all of this\nwhat we'll do is store our string that\nwe would like to format\nwithin a variable let's turn this line\ninto a comment and let's create a\nvariable called\ntext text equals the string that we\nwould like to format\nwhich is the format field\njumped over the format field\nand if we need to format this variable\nwe can just call the format method on it\nso within a print statement let's say\ntext dot and then use the format method\nand pass\nin the values that we would like to\ninsert at these placeholders\nso we're going to insert animal as well\nas item so our result as you would\nimagine\nis the cow jumped over the moon this\nnext section i'm going to explain how we\ncan add some padding\nto a string when we display it using the\nformat method\nlet's say we have a name variable and\nassign this a value of whatever your\nname is\nso i would like to display my name along\nwith the custom message\nlet's say hello my name\nis and then i'll use a format field here\nso let's follow this string by using the\nformat method\nand i would like to insert my name at\nthis location\nso currently this will display hello my\nname is bro\nor whatever else your name is so we can\nadd some padding\neither before our name after or we can\nadd some padding to the left and the\nright hand side\nof our value that we have so what we'll\ndo to begin\nis let's add some padding to the right\nhand side of\nour name that we have so within our\nformat field if we need to add some\npadding\nwithin the format field add a colon and\nthen the amount of space you would like\nto allocate\nto displaying your value so let's say 10\nso i'm going to allocate 10 spaces worth\nof room\nto display my name you can't really see\nit right now but let's take a look\nso i can't move my cursor past this line\nat the end of my name\nbut with my second line i have all of\nthis room to work with\nso if i were to change my string that i\nhave let's say\nnice to meet you well then\nall of this padding that i have is going\nto be more evident\nso we can add a number preceding with a\ncolon to add some padding\nto a value and then you can left align\nthis right align it or center align it\nso what i'll do is copy this line that i\nhave\nif you need to left align it you use the\nless than sign\nbut there's going to be no visible\nchange because that's already the\ndefault\nif you need to write a line precede your\nnumber with a greater than sign\nso your value is going to be right\naligned\nif you need to center this value then\nuse\nthe carrot so this will center align\nyour value within the padding that you\nhave allotted\none question that you might have for me\nand i'll try and answer that now because\nit's relevant what if we need to add a\npositional argument or a\nkeyword argument to our format field if\nthere's already some text within here\nso what you would do before the colon\nyou would just precede the colon\nwith either your positional argument or\nyour keyword argument\nfollowed by colon and then whatever you\nwant to add afterwards to format\nyour value that you have alright ladies\nand gentlemen we are near the end and i\npromise that this is the last section\nhow can we format some numbers let's say\nwe have a\nnumber variable and this will equal the\nfirst few digits of pi\n3.14159 let's pretend that we would like\nto\ndisplay only the first two digits after\nthe decimal so we can do so using the\nformat method\nlet's print the number\npi is and then i'll use a format field\nhere\nand we will call the format method and\ninsert our\nnumber that we have so if i need to\ndisplay only the first two digits after\nthe decimal\nwithin the format field i will add\ncolon dot to f\nf is for floating point numbers that's\nanything with a decimal portion\nso the result is that this will display\nonly the first\ntwo digits after my decimal because we\nplaced two within\nthe format field so if this was three\npoint three f this would display three\ndigits\nafter the decimal portion oh and\napparently this will round your number\nso that's something that you should keep\nin mind\nso this time let's change our number to\nsomething larger like\n1000 and i will copy this line and make\na few changes\nlet's say the number is\nand i would like to add a comma at the\nthousands place\nso after the colon within the format\nfield i will add a comma\nso this will automatically add a comma\nto all 1000s places\nanother cool thing that you can do is\nthat you can display your number as\nbinary so within the format field add\ncolon b\nthis will display a binary\nrepresentation of your number\nyou can do the same thing with octal by\nadding colon\no so our number is now being displayed\nas an octal number\nand you can do the same thing with\nhexadecimal lowercase x\nfor lowercase or uppercase x for all\nuppercase\nso my number 1000 is now in hexadecimal\nand lastly we can display this number\nin scientific notation using either\nlowercase e for lowercase or capital e\nfor uppercase\nand mynumber 1000 is now in scientific\nnotation\nall right everybody so that's a few\nthings that you can do with the format\nmethod it's an optional method that\ngives users\nmore control when displaying output if\nyou would like a copy of all the code\nthat we've written here today i will\npost everything in the comments down\nbelow\ndon't be afraid to smash that like\nbutton drop a comment down below and\nsubscribe if you'd like to become a\nfellow bro\nhey what's going on everybody it's bro\nhope you're doing well and in this video\ni'm going to explain a few useful\nmethods of the random module\nso sit back relax and enjoy the show\nokay people in this video i'm going to\nexplain how we can generate some random\nnumbers\nas well as a few other useful methods of\nthe random module\nnow we're not going to be creating true\nrandom numbers but something called\npseudorandom numbers which are fairly\ndarn close so the first step\nis to import the random module at the\ntop import\nrandom we now have access to everything\nthat the random module has to offer\nlet's begin by generating a random\nnumber between one and six\nlike we're rolling a dice so what i'm\ngoing to do is say x\nequals random dot rand\nand we can generate a random integer\nbetween a certain range\nif i want one through six i will state\none\ncomma six and then we can generate a\nrandom number between one and six like\nwe're rolling a dice\nso if i were to print the value of x\nthen we will get a random number between\none and six for example i just got a one\na two a three and a six all right\nwe can also generate a random floating\npoint number two\nlet's say y equals random dot\nrandom so this will give us a random\nnumber between\n0 and 1. this time i'm going to print\ny so we have 0.49 and some change\n0.145 and 0.858\nwe can also generate a random choice\nfrom a list or other collection\nlet's say we're playing a game of rock\npaper scissors so let's create a list\ni'll just call this my list equals\nsquare brackets and we will have three\nchoices\nrock paper and\nscissors\nso let's say z\nwill be the random string that we\ngenerate\nz equals random dot\nchoice and we will pass in my list\nand let's print z so this will generate\na\nrandom choice from my list called my\nlist\nso we got scissors paper and\nrock we can also use the shuffle method\nof the random module to\nshuffle a list or other collection let's\nsay we're working with a deck of cards\ncards equals let's say one\nthrough nine\nand we have a jack a queen\na king and an ace this won't be a full\ndeck of cards it'll just be one suit\nso we can actually shuffle this list by\nusing the shuffle method\nrandom dot shuffle what do we want to\nshuffle\nwe want to shuffle our cards and i will\ndisplay\nmy cards with a print statement so the\nshuffle method will shuffle a list or\nother collection for you\nwell everybody that's a few useful\nmethods of the random module\nif you would like a copy of all this\ncode i will post this in the comments\ndown below\ndon't be afraid to smash that like\nbutton drop a comment down below\nand subscribe if you'd like to become a\nfellow bro hey what's going on everybody\nit's\nbro hope you're doing well and in this\nvideo i'm going to explain exception\nhandling in python\nso sit back relax and enjoy the show\nwell everyone let's talk about\nexceptions an exception is an event\ndetected\nduring execution that interrupts the\nnormal flow of a program\nhere's a program that i've written and\nwe're intentionally going to cause an\nexception\nso this program that i've written we\nwill accept a numerator and a\ndenominator from the user\nwe'll divide the numerator by the\ndenominator we'll get a result\nand print the result so what if i were\nto divide a number such as 5\ndivided by 0 which we cannot\nmathematically do\nwell this will cause an exception an\nevent detected\nduring execution that interrupts the\nflow of a program\nso our program was interrupted and\nwithin our console window we have this\ntraceback message\nwhich states what went wrong and a name\nfor this exception that occurred\nthis specific exception that occurred is\na zero division error\nso this video is all about handling\nthese exceptions so they do not\ninterrupt the normal flow of a program\nnow a very basic form of exception\nhandling\nis to surround any code that is\nconsidered dangerous as in it might\ncause an exception\nwithin a try block anytime you accept\nuser input would be a good indicator too\nso this code is considered dangerous\nbecause we don't know what the user is\ngoing to type in\nso we will try all of this code if an\nexception occurs\nwe can catch it and handle it so to do\nthat\nwe'll add an accept block accept and\nthen we will catch\nexception normally having this block by\nitself\nisn't considered good practice but i'll\nexplain why later so\nthis accept exception block will catch\nall sorts of different exceptions\nand it will prevent our program from\nbeing interrupted and we can do\nsomething else entirely such as print a\nmessage\nsomething went wrong so let's try this\nagain\nwe will divide five by zero which we\ncannot do\nwe no longer have that traceback message\nwithin our console window\nwe caught the exception and we did\nsomething else we printed\nsomething went wrong like i said before\nit's not considered good practice to\nhave a single\naccept block that will handle all\nexceptions it's much better to first\nhandle specific exceptions when they\noccur\nand we can do so by writing additional\naccept blocks\nso let's create an additional accept\nblock that will catch\nany zero division error exceptions\nthat occurs when somebody attempts to\ndivide by zero so if\nthis exception occurs how do we want to\nhandle it let's just print the message\nlet's print you can't divide\nby zero idiot\nand let's try this again so five divided\nby zero\nyou can't divide by zero idiot here's\nanother one i'm going to turn\nthis accept block into a comment so we\ncan take a look at something\nwhat if i divide by something that's not\na number like we take\n5 and divide it by the word pizza well\npizza is not a number\nand we ran into a value error exception\nso we should probably handle this too so\nlet's create another accept block that\nwill handle that\naccept value error\nand how do we want to handle this let's\nprint something\nenter only numbers\nplease okay let's try this again and see\nif\nthis exception is caught five divided by\nthe word\npizza enter only numbers please\nnot only that but you can also add the\naccept exception block at the very end\njust in case there's something you won't\nanticipate\nbut it's always considered good practice\nto first catch any specific exceptions\nand let the user know exactly what went\nwrong an additional way in which we can\nhandle these exceptions\nis that we could display the exception\nthat occurs although it is completely\noptional\nso to do that what we'll do is that\nafter each of these accept block\ndefinitions\nlet's add as e so we're calling the\nexception as\ne that's just standard practice although\nit's not necessary\nso let's do that for each of these\nexcept blocks\nand then we can print whatever e is so\nlet's add that\nto each of these blocks so\nit should now look something like this\nso when we encounter an exception\nwe can display what exception occurred\ntoo as well\nso let's divide five by pizza invalid\nliteral for int with base 10 pizza\nenter only numbers please so like i said\nthis\nis an additional way in which you could\nhandle an exception although it's\nentirely optional\nanother thing that you can do is that\nyou can add an else statement\nto the end of your accept blocks so\nwhat's happening here is that we're\ngoing to\ntry all of this code if an exception\nhappens\nthen catch it and handle it if not then\ndo something else\nso why don't we print our result only if\nthere are no\nexceptions that occur so if there are no\nexceptions we will execute\nthis else statement if not then we won't\nso\nlet's divide five by an actual number\nthis time like\ntwo so there are no exceptions that\noccurred so\nwe executed this else statement whatever\ncode is within\nour else block and this printed the\nresult of 2.5\nbut if an exception were to occur like\nwe divide 5 by\n0 then we will catch our exception and\nhandle it\nand we do not execute whatever block of\ncode is within\nour else statement there is one other\nclause that you should be aware of that\nis the\nfinal clause this is always at the end\nhow this works\nis that whether or not we catch an\nexception we will always execute any\ncode\nthat is within the block of code for our\nfinal clause\nso this is a good opportunity if you\nopen files\nto close them within the finally block\nbut\nwe haven't dealt with opening files yet\nso we won't do that\nall we'll do is just print something\nprint this\nwill always execute so\nwhether or not we encounter an exception\nthis finally block will always execute\nat the end\nso let's try this again so this time\nlet's cause an exception\nlet's divide five by zero you can't\ndivide by\nzero this will always execute and this\ntime let's take this seriously and\ndivide\nfive by another number such as three so\nthis will give us a result\nand like i said the finally clause the\ncode within the finally clause will\nalways execute\nbut we won't really be working with this\nuntil we get to the section on file\nhandling\nwell everybody those are exceptions in\npython they are events detected\nduring execution that interrupt the flow\nof a program\nand we can handle these exceptions by\nusing try and accept blocks\nso if you would like a copy of all this\ncode i will post all of this in the\ncomments down below\nbut yeah that is how exceptions work in\npython\nhey what's going on everybody it's bro\nhope you're doing well\nand in this video we're going to be\ncovering some basic file detection using\npython so\nsit back relax and enjoy the show\nwelcome ladies and gentlemen to the\nbeginning of a mini series involving\ndoing stuff with files using python and\nin this video we're going to be doing\nsome basic\nfile detection and in order to do so i\nrecommend\nimporting the os module it's already\nincluded with the standard python\nlibrary\nall you need to do is import it all\nwe'll be doing is checking to see if a\nfile\nexists someplace on our computer so\nwe'll probably need a file to work with\nwhat i'm going to do is go to my desktop\nfor convenience\nand just create a new text document i\nwill call this test.txt\nnow i probably need the file location so\ni'm going to copy that\nand then we can use this so let's create\na variable called path\nthat will include the path to the file\nthat i would like to detect\nso that was test.txt now if you have\nbackslashes in your file path you'll\nprobably need\ndouble backslashes because that's the\nescape sequence for a backslash within a\nstring\nso we now have this variable path that\nwe can work with\nnow i would like to check to see if this\nlocation\nexists on my computer so if os\ndot path dot exists and you can see that\nwe can pass in\nour path as an argument so i will pass\nin my path\nand if this returns true if that\nlocation exists i will print\nthat location exists\nso this will not tell me if this is a\nfile or not\nwe'll be covering that later else\nlet's print that location\ndoesn't exist\nall right so if this location exists\nthis will return true\nif not this will execute our else\nstatement\nthat location exists so what if i were\nto delete this file\nand we run this program again that\nlocation doesn't exist\nnow this won't tell you if the location\nyou're dealing with\nis a file or not there is a separate\nfunction for that\nit is if os\ndot path dot is file\nwhat we'll do is pass in our path and\nprint\nthat is a file\nall right so let's create another file\nbecause i deleted the previous one\ntest.txt it's in the same location let's\nrun this again\nthat location exists that is a file now\nwhat if this was a folder\nso i'm going to create a new folder i\nwill call this folder\ni will delete my test document\nand let's change the location to folder\nthat location exists but it is not a\nfile you can check to see if a location\nis a directory\nso let's write an else if statement os\ndot path dot is directory and we will\npass in our path\nand let's print that\nis a directory\nall right so we have our folder we're\ngoing to check to see\nif this location exists and if it's a\nfile or\na directory that location exists that is\na directory\nwell everyone that is the basics of file\ndetection\nwe'll be building upon this concept in\nfuture videos\nso if you would like a copy of this code\ni will post this in the comment section\ndown below\nbut yeah that is the basics of simple\nfile detection using python\nhey what's going on everybody it's bro\nhope you're doing well and in this video\nwe're going to be reading a file in\npython so\nsit back relax and enjoy the show\nwelcome back guys and gals in this video\ni'm going to explain how we can read the\ncontents of a file using python\nso we'll probably need some sort of file\nto work with i created a plain text file\ncalled\ntest.txt it's a plain text file and all\nthis says\nis omg you can read this have a nice day\nlike comment and subscribe so what i\nwould like to do is to read\nthe contents of that file line by line\nand print it to the console window\nand here's how and honestly we only need\ntwo lines of code to do this\nso what we'll do is type with open\nthen within the open function list the\nname of your file\nor the file path this file of mine is\nwithin my project folder\nso i only need to list the file name if\nthis was someplace else you'll probably\nneed\nthe file path so let's say this was on\nmy desktop\nwell i'll probably need to list the file\npath of where that file is located\nand i'll need to use double backslashes\nbecause that's the escape sequence for a\nbackslash\nbut since this file is within my project\nfolder i only need to list the file name\nso with open then the name your file or\nthe file path\nas file then what we're going to do\nis print file dot\nread and that is it so let's test it\nand it works omg you can read this have\na nice day\nlike comment and subscribe so this will\nactually\nclose files automatically after opening\nthem\nso that's kind of convenient and let's\njust test that theory\nso i'm going to print file dot\nclosed if my file is in fact closed this\nwill print\ntrue if it's still open this will print\nfalse\nso normally when you read a file it's\nnormally open and you need to\nclose it manually but if you write your\nprogram this way\nwith open this will close the file\nautomatically for you\nso using with open will close any files\nautomatically for you\nafter they've been opened however this\ndoes not catch\nand handle any exceptions that might\noccur like if we cannot locate this file\nso let's say that i mistyped the\nextension for this file\nlet's say that i type in test.tx\nthat's kind of funny because tx is the\nabbreviation for\ntexas it's a texas file so this will\ncause\na file not found error and this will\ninterrupt the flow of our program and we\nwould probably like to prevent that\nso what we could do is write a try and\nan accept block\nso we will try all of this code if we\ncannot find\nthis file we can handle this exception\nfile not found error\nso we'll place all of this code within\nthe try block then\nif an exception happens we will catch\nthat exception\nexcept we would like to catch any file\nnot found air\nexceptions and let's handle this by\nprinting\nthat file was not found\nso if i were to run this again we will\ncatch and handle this exception and this\nwill not\ninterrupt the normal flow of our program\nwell everybody that's how to open and\nread\na file in python if you'd like a copy of\nall this code i will post this in the\ncomment section down below\nbut yeah that's how to open and read a\nfile using python\nhey what's going on everybody it's bro\nhope you're doing well and in this video\nwe're going to be writing files in\npython so sit back\nrelax and enjoy the show\nso to begin it's kind of similar to the\nlast video on reading files\nwith open within the open function list\nthe file name or the file path so what\ndo you want to call this file\ni will call this file test dot txt\nnow normally with the open function\nthere is a mode\nand you can actually change that there's\na second argument that you can pass in\nby default this is r for read but if you\nwant to write a file this would be\nw so now we're going to write a file\ncalled\ntest.txt so to finish with open\nas file what are we going to do file\ndot write and within the write function\nwe can write some text\nso let's create a text variable and we\nwill add a string\nso let's say text equals\nyo and if you need to go down to a new\nline\nbe sure to use the new line character so\nafter this new line character\nthe text that comes after is going to be\non the next line as if we're hitting\nenter\nso yo this is some\ntext have\na good one\nall right so after i run this program we\nshould have\na file a text file within our project\nfolder that appears\nand it is right here and it says yo this\nis some text\nhave a good one now this is in write\nmode\nif this text was something else it will\nactually\noverwrite your current file so if i were\nto change this to\nuh oh this text has\nbeen over written well then\nthis will overwrite the text that we\nhave\nuh oh this text has been overwritten so\nyou can actually append a file by\nchanging the mode\nto a for append so let me change this\nback\nwe will rewrite this this will save over\nour current file\nnow we can append some text so let's add\nmaybe a new line\nuh have a nice\nday see ya so i would like to append\nsome text to this file i'm going to\nchange the mode to a\nfor append and we can now append some\ntext onto the end of this file\nwell everybody that's how to write to a\nfile and or append a file if you would\nlike a copy of this code\ni will post this in the comment section\ndown below but yeah that's how to\nwrite to and or append a file in python\nhey what's going on everybody it's bro\nhope you're doing well\nand in this video we're going to be\ncopying files in python so\nsit back relax and enjoy the show\nwelcome back to another video regarding\ndoing stuff with files using python and\nin this video we're going to be\ncopying some files and in order to do so\ni recommend\nimporting the shuttle module there's\nother ways of doing this too\nbut i tend to like using the shuttle\nmodule now\nwith this module there are three basic\nfunctions\nto copy a file starting at the top they\nare copy file\ncopy and copy to so copy file is what\nwe'll be working with\nthis will copy the contents of a file\ncopy\nwill do everything that copy file does\nplus copy\nthe permissions mode and the destination\ncan be a directory\nand lastly copy 2 this will do\neverything\nthat copy does plus it copies the\nmetadata\nof that file including the files\ncreation and modification times\nso depending on the project or the\nprogram you're working with\nyou may need to use copy or copy too but\nin this video we're going to be using\ncopy file just to copy the contents of a\nfile\nnow after you import the shuttle module\nthis is all you need to do to copy a\nfile\nshuttle dot then use the appropriate\nfunction that you need to copy your file\nwe're going to be using copy file copy\nfile and within this function there are\ntwo arguments\na source and a destination so within my\nproject folder i have a plain\ntext file called test test.txt\nall this says is yo this is some text\nsee ya what i would like to do is copy\nthis file because it's cool\nnow since this file is within my project\nfolder i only have to list the file name\notherwise if this is someplace else i\nwould list the file path here\nso this file is test.txt\nthis is the source file and now i need a\ndestination\nso the second argument will be separated\nwith the comma i'm going to list\na destination so you can actually rename\nthis to\ni would like to name this as copy.txt\nso the destination is my project folder\nso when i create a copy of this file\ntest.txt\nthis copy will appear in my project\nfolder and say the same thing\nso after running this we now have a\nfile named copy.txt that says the same\nthing\nas my test file and remember what i said\nyou can copy\nthis file to a different location on\nyour computer so you could list the file\npath\nso this file path would go to my desktop\nand then when i run this\nthis will copy my original file my\nsource and then copy it to\nwherever my destination is oh and i\nalmost forgot so if you need to use copy\nor copy 2\nthe arguments are exactly the same so if\nyou needed to use copy\nthis would be a shuttle dot copy instead\nof copy file\nthen copy 2 is shuttle dot copy 2.\nthe arguments are exactly the same but\neach of these functions will copy\ndifferent things depending on what you\nneed for your own program or project\nall right everybody so that's the basics\nof copying files and\npython i will post this in the comment\nsection down below\nbut yeah that is how to copy files using\npython\nhey what's going on everybody it's bro\nhope you're doing well and in this video\ni'm going to explain how we can move\nfiles using python so sit back relax\nand enjoy the show\nwelcome back everybody to another video\nregarding that thing that we do called\nprogramming and in this video we're\ngoing to be moving files using python\nand in order to do so i recommend\nimporting the os module\nthis is included with the standard\npython library all you need to do is\nimport it\nand now let's create two variables a\nvariable called source\nthat will hold the location of where our\nsource file is located\nas well as a variable called destination\nto function as well\nthe destination now for this video i'm\ngoing\nto move a file within my project folder\nto my desktop\nso to do so i'm going to create a new\nfile\ni will name this test.txt but take the\nliberty to name this whatever you want\nso i'm going to list the location of\nwhere\nmy test file is located since this is\nwithin my project folder i only need\nthe file name if this was someplace else\non your computer you would probably need\nthe file path\nand now where would i like to move this\nfile to i would like to move this file\nto my desktop\nso i just need the file path so i'm\ngoing to go to my desktop\nright click go to properties i'm going\nto copy\nthis location and paste it within my\ndestination\nand i will add slash desktop\nslash test.txt you can also rename this\ntoo if you want i will just keep it the\nsame\nnow if you have single backslashes\nyou'll likely need to change these\nto double backslashes because that is\nthe escape sequence\nto print a backslash within a string so\nwe have a\nsource location as well as a destination\nlocation\nnow we can begin i would recommend\nwriting our code within a try and accept\nblock to\nhandle any exceptions so i would like to\nhandle any file\nnot found error exceptions just in case\nour program cannot locate our source\nfile so let's print a message if that is\nthe case\nperhaps source plus was not\nfound now within our try block let's\ncheck to see if there is already a file\nat this destination\nbecause i would not like to save over it\nif there's already a file there\nso let's do some basic file detection if\nos\ndot path dot exists\nand i will pass in my destination as an\nargument to the exists\nfunction so if there is already a file\nhere i should probably let the user know\nprint there is already a\nfile there else\nwe can replace our files honestly if you\ndo not care about saving over any files\nyou can omit this part so else os\ndot replace and we will pass\nin our source and our destination\nas arguments and let's print a message\nto the console window to let the user\nknow\nthat source plus was\nmoved all right let's try this oh i\naccidentally deleted my\nfile test.txt all right\nnow this should disappear in three\ntwo one and it's gone\ntest.txt was moved and it should now be\non my desktop\nwhich it is now you can also use this to\nmove a directory as well\ni'm going to create a new directory i\nwill name this folder\nand i will change source to folder\nand the destination from test.txt to\nfolder and now this should move my\nfolder\nthere is already a file there\noh let's delete that okay\nfolder was moved all right everybody so\nthat is how\nto move a file and or directory using\npython\nif you would like a copy of this code i\nwill post this in the comment section\ndown below\nbut yeah that is how to move a file and\nor directory\nusing python hey what's going on\neverybody\nit's bro hope you're doing well and in\nthis video i'm going to teach you guys\nhow we can delete files using python so\nsit back relax and enjoy the show\nall right everybody so in this video\nwe're going to be deleting files using\npython and in order to do so i recommend\nimporting the os module\nthis is already included with the\nstandard python library all you need to\ndo\nis import it and now we need a file to\nwork with\nso let's right click on our projects\nfolder and go to new\nfile i will name this test.txt\nand we now have a file that we can work\nwith but you know what i would like to\ndelete this file because it's lame\nso let's do that in order to delete this\nfile let's type os\ndot remove and we're going to list the\nfile path here\nsince this file is within my project\nfolder i only need to list\nthe file path test.txt if this was\nsomeplace else on my computer i would\nprobably need the file path\nlike that but since this file is within\nmy project folder i only need\nthe file name another thing that you can\ndo too at least what i like to do\nis that i like to pass in a variable\ncalled path i will make this a variable\nand assign it a\nstring value of whatever the path to my\nfile is\nso i will assign path the name to my\nfile\ntest.txt now when i run this this will\ndelete my file\ntest.txt and you can see that it's no\nlonger there\nnow what if we attempt to delete a file\nthat doesn't exist\nwell we'll encounter an exception so if\nyou want\nthis is optional we can do some\nexception handling so let's write\nthe remove function within a try block\nand we will catch\nthis exception file not found error and\nlet's print something\nprint that file was not found\nnow if you attempt to delete a file that\ndoesn't exist\nyour program will not be interrupted and\ninstead you'll print something\nthat file was not found now this\nfunction\ndoes not remove empty folders this is\nhow to do so\nand actually let's test that so let's\ncreate a new directory\ni'll call this empty underscore folder\nnow i will attempt to delete this empty\nfolder\nempty folder\nwe encountered a permission error access\nis denied so let's create an accept\nblock for that\naccept permission error\nprint i don't know you do\nnot have permission to\ndelete that right to delete\nan empty folder there is a different\nfunction\nos dot rmdir\nshort for remove directory we're going\nto list the file path\nand pass that in as an argument and\nlet's create an else block as well\nbecause we can\nelse if there are no exceptions let's\nprint\npath plus was\ndeleted all right so rmdir\nremove directory will delete an empty\ndirectory\nempty folder was deleted now this\nfunction\nwill not delete a folder that contains\nfiles and let's try that\nso let's create a new directory i'll\njust call this folder\nand within this folder i will create a\nnew file\ntest.txt\nall right let's attempt to delete this\nfolder i will probably need to change\nthe file name\nlet's change that to folder and we\nencountered an\nos error that directory is not empty so\nlet's handle this exception we don't\nneed to but i like to\naccept os air print\nyou cannot delete that\nusing that function\nokay to delete a folder that contains\nfiles\nwe'll need the shuttle module import\nshuttle and the function that we're\nlooking for is\nshuttle dot rm tree\nshort for remove tree and we will pass\nin our path\nnow be careful with this function it is\nconsidered dangerous\nbecause it will delete a directory and\nall files contained within\nso now we can delete a folder that\ncontains files\nfolder was deleted in conclusion these\nare\nthree basic functions to delete a file\nor directory they\nare remove which deletes a file rmdir\nwhich is an abbreviation for remove\ndirectory\nwhich will delete an empty directory and\nlastly\nrmtree which is an abbreviation for\nremove tree\nand this is of the shuttle module and\nthis will delete a directory containing\nfiles\nso if you would like a copy of all this\ncode i will post this in the comments\nsection down below\nbut yeah that is how to delete files and\nor directories\nusing python yo what's going on\neverybody it's you bro hope you're doing\nwell\nand in today's video i'm going to be\ndiscussing modules in python so\nsit back relax and enjoy the show\nall right well welcome back we're\ntalking about modules today\na module is a file containing python\ncode\nit may contain functions classes etc\nit's used with modular programming which\nis this concept of separating a program\ninto useful different parts we're\ncurrently working within our main module\nand mine is named hello youtube this is\nhow to create a separate module\nright click on your project folder go to\nnew python file\ni think i'll create a module filled with\nmaybe message functions\nso i'll call this messages and click\npython file\nall right we have two tabs one for our\nmain module mine is called hello youtube\nand a separate module\nfor messages and i can write whatever i\nwant within here since we're using\nmodular programming i'll place a bunch\nof useful functions within this module\nand i'll import them to the main module\nthat we're currently working with\nlet's define a function called hello all\nthis will do is print\nhello have a nice\nday and i'll create a second function\nfor good measure\nlet's call this pie\nlet's say bye have\na wonderful time\nnow if we would like access to this\nmodule we need to import it\ni will head back to my main module and\nat the top write this\nimport then the name of the module and\nfor this example we used the name of\nmessages\nfor our separate module and to use a\nfunction from that module\ntype the name of the module dot and then\nthe name of the function\nso messages.hello will call the hello\nfunction\nfound within the messages module and i\ncan also call the\nbuy function as well messages dot bye\nand that will print bye have a wonderful\ntime\nno it can be somewhat tedious to have to\nwrite the name the module followed by\nthe function name what we could do to\nshorten things up\nis to give our messages module an alias\nalso known as a nickname\nso at the top write import messages\nas and what sort of nickname should we\ngive messages\nlet's say msg for short so we'll replace\nmessages with\nmsg msg hello and msg buy\nand this would work the same and it\ninvolves less typing there's also an\nadditional way of\nimporting a module and it goes a little\nsomething like this from\nthe name of the module import and then\nlist all of the functions or classes you\nwould like to import\ni would like to import hello comma buy\nand we no longer need the module name\nbefore calling one of these functions\ni can simply just call hello and vi\ndirectly another way in which this could\nbe written is\nfrom messages import asterisk that means\nto\nimport all and i actually would not\nrecommend using this if you're working\non a large program or something that\ncontains\nmany modules because you can run into a\nnaming conflict\nbecause some of these modules may have\nthe same named function names or\nvariables\nso if you're working on a small program\ni really don't think it's a big deal but\nif you have multiple modules i would\nactually refrain from using import alt\nit's much safer to write the name of the\nmodule followed by the name of the\nfunction that you want to use\nnow another cool thing is that python\nhas a bunch of pre-written modules that\nyou have access to if you would like a\ncomprehensive list of them type help\nand pass in the word modules and within\nmy console window this will populate a\nlisting of all the modules available to\nus\nhere they are let's see if math is in\nhere yep\nthere it is so yeah feel free to take a\nlook through some of these modules\nbecause there are some fairly useful\ntools within some of these modules\ni suppose you can also go to python's\nofficial documentation and search for\nthe python module index and here's a\nlisting of all the different modules too\nthey have access to\nwell everyone those are modules they are\nfiles containing python code and they\nmay contain functions classes etc\nif you would like a copy of all this\ncode i will post all of this to the\ncomments section down below\nbut yeah those are modules in python i\nguess there's a module called pickle\nhey what's going on everybody it's bro\nhope you're doing well\nand in this video we're going to be\ncreating a basic game of rock paper\nscissors in python so\nsit back relax and enjoy the show\nlet's begin by importing the random\nmodule\nbecause we're going to need the computer\nto pick a random choice and we'll create\na\nlist of possible choices so we have\nthree strings within here\nrock paper and scissors\ni think i spelled scissors wrong there\nwe go\nokay and we will have our computer pick\na\nrandom dot choice from our list\nof choices and let's test it by printing\nwhatever the computer picks\nso the computer picked paper paper\nscissors\nand scissors okay what about the player\nchoice\nlet's say player equals\ninput rock\npaper or\nscissors\nand let's print what the player has\nprint\nplayer and let's print the computer too\nmaybe i'll add a string before these so\nlet's say\ncomputer call in space\nwhatever the computer chooses and same\nthing with the player\nplayer all right\nlet's see if this works rock paper or\nscissors let's say rock\nthe computer picks paper and i pick rock\nso i would technically lose this round\nnow what if the player doesn't pick rock\npaper or scissors what if they type in\ngun so we would like some way to prevent\nthat\nso let's put our input for our player\nwithin a while loop\nwhile player\nnot in choices\nso we're going to need to initialize\nplayer because right now it's an\nunresolved reference\nso let's say player equals none\nfor the time being okay now let's test\nour choices\nour player choices rock paper or\nscissors i pick\nthe gun and it's going to keep on asking\nme until i pick\nsomething from my list of choices so\nif i type in that still won't accept it\nnow let's type in\nrock again there we go now what if\nsomebody types in one of these choices\neither all caps or\ncapitalized well that technically\nwouldn't be in choices because\nthese strings are case sensitive so why\ndon't we take our user input and make it\nlowercase\nand i'll just add on dot lower and use\nthe lower method\nso therefore we can now type in any\ninput that is either all caps or\nuppercase\nand then that will still be accepted\nbecause we're going to take our player\ninput\nand then make it lower case so that it\nmatches one of these choices\nokay let's work on the win conditions\nnext so first\nlet's check to see if we encountered a\ntie\nif player is equal to computer that\nmeans that\nwe both chose the same thing so let's\nprint whatever the computer picked\nwhat we picked and we will print\ntie now let's write an else\nif statement e l i\nf player equals\nrock so if we pick rock and then we will\ncreate\na nested if statement if computer\nequals paper\nthat means we lose so let's print\neverything we have here except we're\ngoing to change\ntie to you\nlose now if the computer picks\nlet's say scissors then we win\nso scissors and you\nwin okay then let's just repeat this\nprocess\nfor scissors and paper\nso this will be another else if\nstatement\nif we pick\nscissors and the computer picks\nrock then we lose if the computer picks\npaper then you win\nand lastly we have paper as the player\nchoice\nso else if player equals paper\nand the computer picks scissors then we\nlose\nif the computer picks rock well then\npaper covers rock\nand we win now let's test it\nrock paper or scissors again i'll try\nand pick the gun\nwhich i can't let's take this seriously\ni will pick rock\nthe computer picked rock so it's a tie\ni'm feeling like paper today oh it's\nanother tie i guess\nand how about scissors okay\nso i win this round i picked uh scissors\nand the computer picked paper\ntherefore i win let's try and lose this\ntime\njust to verify it so i won again let's\ntry rock again\nokay so i lost that round so we know\nthat the win conditions are working now\nhow about we add a feature where we will\nask the player if they would like to\nplay again\nplay another round i think the best way\nto do that would be to write\nall of this code within a while loop so\nat the top\nlet's write while true and we'll need to\nindent everything so that it's within\nthe while loop so let's just indent\neverything here\nnow at the bottom we will ask the user\nif they would like to play again and i\nwill store this within a variable\nnamed play again play again equals input\nand the prompt will be play again\nyes slash no and depending on their\ninput\nlet's just make it all lower case\nif play again\ndoes not equal yes\nthat means they would like to quit so\nlet's use a break statement to break out\nof our while loop that we're in\nand at the end let's print by\nand pay attention to the indentation\nthis input and\nthis if statement should be within the\nwhile loop so they should have at least\none indentation and our print statement\nhere we'll just say bye\nand you can see that there is no\nindentation so that is outside of the\nwhile loop\nokay let's test this one last time\nrock paper scissors i'm going to pick\nthe\ncannon okay that's not valid input how\nabout rock\nokay the computer picks rock i pick rock\nso it's a tie do i want to play again\ni'm going to select actually yes all\ncaps\nthat should still be acceptable elbow\npaper this time\nit's a tie again man the computer is\nreally good at this game\ni'd like to play again i'll pick\nscissors\nokay so i lose i would like to play\nagain and i want to win this time\nokay computer pick scissors i pick rock\nyou win do you want to play again\nnah and it will print\nbye well everybody that's a simple game\nof rock paper scissors i'll post all of\nthis code to the comment section down\nbelow\nand well yeah that's a basic game of\nrock paper scissors in python\nhey what's going on everybody it's you\nbro hope you're doing well\nand in this video i'm going to show you\nguys how we can build a basic quiz game\nin python\nso sit back relax and enjoy the show\nto begin this project i think it would\nbe wise for us to create a skeletal\nstructure for how this program is going\nto operate\nand then we'll fill in the gaps later as\nwe go along so to begin\nlet's define all of the functions that\nwe'll need we'll need four\nwe'll create a function that is named\nnew game\nwhenever we call this function it will\ncreate a new quiz game for us\nand for the time being let's write pass\njust as a placeholder\nwe'll have a total of four functions new\ngame\na function to check our answer\na function to display our score\nand lastly a function to\nplay again\nall right now i'm just going to add some\ncomments here\njust to separate each of these functions\nthat we have just so that it's a little\nbit easier to read\nalthough this part is not really\nnecessary so i just want to separate\neach of these functions for some\nreadability\nokay those are all the functions that\nwe'll need what we'll need now\nis some sort of collection to hold all\nof the questions and answers that we\nhave and i think a dictionary would be\nperfect for this\nso what i did is that i created a\ndictionary named questions\na dictionary has key value pairs\neach key is a question that i would like\nto ask and each question\nhas an associated value we'll have the\nuser guess between\nanswers of a b c or d so these would be\nall of the correct answers all of the\nvalues within this dictionary\nso here are some of the questions that i\nwant to ask feel free to come up with\nyour own questions\nif you would like you can copy the\nquestions that i have they should be\nposted in the comment section\ndown below so the questions that i'm\ngoing to ask are\nwho created python what year was python\ncreated\npython is attributed to which comedy\ngroup and lastly is the earth round\ni couldn't think of a fourth question so\ni just threw in a random stupid question\nand the correct answers to all of these\nquestions in order would be\na b c and a but feel free to come up\nwith your own\nwell we have our questions but we'll\nneed some sort of collection to hold all\nof the different possible answers\nto each of these questions and i think a\n2d list would work perfect for this\nso i have a list of lists a list of\ntuples could work too i suppose\nso here are all of the answers for the\nfirst question\nand the correct answer is a i believe\nhis name is\nguido van rossum hey if you're listening\nman i'm sorry if i'm mispronouncing your\nname i'm really trying here\nthe second list corresponds to the\nsecond question\nwhat year was python created it was\ncreated in 1991\nat least according to wikipedia python\nis attributed to which comedy group\nthe answer is c monty python like monty\npython and the holy grail\ngood movie by the way and lastly is the\nearth round\nthis is a highly debated topic but the\nanswer is hey\nthe earth is in fact round so i have a\nlist of lists\neach list corresponds to a key value\npair within my dictionary of questions\nand this is a lot to type if you want\nyou can just copy the code that i posted\nin the comments down below\njust copy and paste and you'll have all\nof this or if you want you can pause the\nvideo and type it\ni don't care so now that you have your\nquestions and your options we're ready\nto begin\nso the first thing that we'll do within\nour program is to call the\nnew game function to begin a new game so\nafter\nwe have our questions and options\ncreated let's create a\nnew game by calling the new game\nfunction\nnow when we run this program we'll\ngenerate our dictionary of questions\nand our 2d list of different options for\neach question\nand then we will call the new game\nfunction to begin a new game\nso let's head to the new game function\nand fill in everything within our new\ngame function\nso at the top let's declare a few things\nlet's say we have\na list named guesses and guesses will be\nan empty list for now\ni will declare a variable called correct\nguesses set it equal to zero because we\nhaven't guessed anything yet\nand we will set a current question\nnumber\nand set the sequel to one to represent\nthe first question\nokay now we need to display all of the\nquestions within our dictionary of\nquestions\nand we can use a for loop for that so\nfor\nkey in questions\ni'm going to print my key\nand let's just test this okay yeah\nhere's all my questions\ni think what i'll do is actually print\nsomething to separate each question\nlet's say one of these lines i think it\nwould look better with them\nokay i'll print this line and then we'll\nmove on to a question\nall right now after re-running this we\nhave each question and i added just a\nline break between each of these to make\nit look kind of fancy\nnow i need to display all of the\ndifferent options for each question\nand we can do that with a nested for\nloop\nso if i were to write i in\noptions print i\nlet me show you what happens now with\nthe way this for loop is written now\nit's going to display\nall of the different options available\nto us for the entire quiz game\nwhat i would like instead is to display\nonly the first\nlist for the first question and then the\nsecond list\nfor the second question and follow that\npattern so we're going to change our for\nloop around\n4i in options and we'll set an index for\noptions\nthe index is going to be our question\nnumber\nminus one now remember what i said in\nprevious videos where different\ncollections including\nlists tuples etc the first element in a\ncollection\nhas an index of zero because computers\nalways start with zero\nthen the next element would therefore\nhave an index of one\nthen two three then you follow that\npattern we're using this question number\nvariable\nas some sort of counter and since we\ninitially set this to one\ni'm just going to subtract one so that\nwe effectively\nreceive zero as the index and now we\njust need to increment our question\nnumber\nafter each iteration so let's do that\ni will add that to the end here after we\nfinish displaying all of the options\nlet's increment question number by one\nby typing question num plus equals one\nand if i were to run this currently\nwe'll display all of the different\noptions for each question\nwho created python here's all of the\nassociated options\nwhat year is python created python is\nattributed to which comedy group\nand lastly is the earth round now it's\ntime for some user input\nso i'm going to create a variable called\nguess\nand make sure you don't put it within\nyour inner for loop it should be within\nthe outer for loop\nguess equals input and i'll create a\nprompt\nenter a b\nc or d\nhere's something to consider we would\nlike the user to type in either capital\na\nb c or d with strings they're case\nsensitive what if the user typed in\none of these letters but lowercase if\nthey're correct we would still like to\ngive them their point\nwhy don't we take our guess and make it\nuppercase\nso guess equals guess and we can make\nthis uppercase\nusing the upper method of strings at the\nend of this game i'm going to compare\nour guesses to the correct answers so we\nhave an empty\nlist named guesses and i'm going to\nappend our current guest that we're\nworking on\nto our list of guesses so guesses\ndot append and we will append our\nguess this round now that we have our\nguess\nand we've appended our guess to our list\nof guesses\nlet's check to see if it's the correct\nanswer or not so we're just about to\nfill in\nthis check answer function next\nso we are going to call this function\nand pass in a few items as arguments\nso let's use the check answer function\nand we'll pass in the key for the\ncurrent question that we're on\nso the key is the correct answer so that\nwould be\nour questions\ndot get key\nthis would be the answer and we'll also\npass in\nour guess and we are going to fill in\nthe check answer function but we need to\nset up the parameters\nwe're receiving effectively our answer\nas well as our guess so i'm going to\nname these as\nanswer and guess and we are going to\ncheck to see if\nour answer is equal to our guess\nif answer is equal\nto guess let's print something\nprint correct\nand i think we should give the user a\npoint we'll have our check answer\nfunction return\none for one point return one\nelse if this is not the correct answer\nlet's print\nwrong and we will return\nzero they do not get a point\nand since this is returning a value we\nshould assign that\nso let's assign the point we may or may\nnot receive\nto our variable of correct guesses which\nis initially set to zero\nso we'll type correct guesses plus\nequals check answer and check answer\nwill return\none if we scored a point or zero if we\ndid not score a point and make sure you\nhave\nplus equals because if you just set this\nto equals\nthen we cannot score more than one point\nit will either be\nzero or one so we are effectively\nincrementing our correct\nguesses by one for each point that we\nscore\nand now we're going to work on the\ndisplay score\nfunction and we'll call that at the end\nafter we finish all of our questions\nthat we have\nso make sure that you do not write this\nwithin the for loop it should be outside\nof it\nbecause once we finish iterating through\nall of our questions we're going to\ndisplay a final score\nso let's call the display score\nfunction and we'll need to pass in some\narguments\nour correct guesses as well\nas our list of guesses\nokay let's head to the display score\nfunction\nso we have as parameters\ncorrect guesses as well as\nguesses i need to remove this pass i'm\ngoing to add\none of these fancy lines in just to\nseparate the questions\nfrom the results and i will print\nresults\nand maybe another one of these lines\nokay\nso i need to print all of the answers\nanswers\nand i do not want to end on a new line\nso i'm going to set\nend equal to nothing and i need to\ndisplay all of the values within\nour dictionary all of the answers i will\ndo that using\na for loop for i\nin questions\nprint questions\ndot get i\nand i do not want to end on a new line\nso i'm going to set\nend equal to nothing effectively\nand then i'll print a new line okay\nlet's work on the guesses i think i'm\njust going to copy all this\nand make some changes i'll replace\nanswers\nwith guesses for\ni in guesses\nprint i\nokay let's just be sure that\neverything's working we're not\ncalculating a score\nquite yet so i'm just going to answer a\nthen b c and d\non second thought after printing each of\nthese answers and guesses\ni'm going to add a space after each of\nthese so\nwithin each of these four loops at the\nend i will add a space\nlet me try that again a b\nc d okay not too bad\nnow let's calculate the final score and\nwe're still within our display score\nfunction\nlet's set score equal to\ncorrect\nguesses divided by\nthe length of our questions\nand let me add a set of parentheses\naround here\nthen i'm going to multiply our score by\n100\nand if you don't want a decimal portion\nbecause we'll display a percentage we\ncan cast this as an end\nokay that all looks good and we'll print\nthe final score\nprint your score\nis plus\nwe need to cast our score to a string\nbecause we're using string concatenation\nplus i'll add a percent sign\nall right let's try it i'm intentionally\ngoing to get the last question wrong\nso we should have a 75 if we have four\nquestions\nso that would be a b c\nis the earth round what's earth i'm\ngonna guess d\nanswers a b c a your guess is a b c\nd your score is 75 okay let's test it\nbut getting all wrong answers d d d\nd your score is zero percent\ncongratulations\nand we'll test it one more time but get\nall the right answers\nwe just want to be sure that we have 100\nthat's a\nb c a your score is 100\nnow the last thing that you can add is\nthat we can play again if we want\nand i have a separate function for that\nif you would like to add this option\nhere's how to do so\nlet's remove that pass\nlet's set a variable named response\nequal to\nsome input do you\nwant to play again\nlet's ask for yes or no\nactually let me remove that okay\nand depending on the user's response it\nmight be a lowercase so let's make it\nuppercase\nresponse equals response\nand use the upper method\nif response is equal to\nyes all caps if response is equal to yes\nthen return true\nelse we will return\nfalse and that is it for this function\nthe last thing we need to do\nis to create a while loop that will\ncontinue to ask the player if they want\nto play again\nthis will be after we call the new game\nfunction\nwhile play again\nand remember this will return either\ntrue or\nfalse depending on the user's response\nwhile\nplay again new game\nand call the new game function to create\na new game for us\nif we escape the while loop that means\nthe user doesn't want to play again\nso let's print the message\nsuch as by e\nall right let's test it i'm going to get\nall of the correct answers this time a b\nc a all right your score is 100\ndo you want to play again i'm going to\ntype\nyes all right then we can play again\nd d d d your score is zero percent do\nyou want to play again\nno i think i mastered this game\nbye all right everybody so that's how\nyou can use python to create a simple\nquiz game\ni will post all of this code to the\ncomment section down below\nbut well yeah that's a basic quiz game\nin python for you all\nhey what's going on everybody it's bro\nhope you're doing well\nand in this video i'm going to explain\nobject-oriented programming in python so\nsit back relax and enjoy the show\nwelcome to today's topic on python\nobject oriented programming\nalso known as pop and in today's video\nwe're going to be creating objects\nan object is an instance of a class by\nusing programming we can create\nrepresentations of real-life objects so\nlook around you wherever you're sitting\nor standing right now you are surrounded\nby objects next to me i have a phone\na television some snacks and i'm talking\ninto a microphone\npoint being we can use programming to\nmimic real world objects by assigning a\ncombination of attributes\nwhat an object is or has and methods\nwhat an object can do now in order to\ncreate an object we'll need to create a\nclass\na class can function as a blueprint that\nwill describe what attributes and\nmethods\nthat our distinct type of object will\nhave you can either create your class\nwithin your main module\nor you could create a separate file\ndedicated solely for your class\nnow to create a class we would type\nclass and then the name of the object\nthat we would like to create so today i\nwould like to create some car objects\nbecause i like cars\nso we would type car and a common naming\nconvention\nwith class names is that they should be\ncapital so car is going to have a\ncapital c\nand for the time being we need to type\nin something i'll just type in pass as a\nplaceholder\nso if you have a small program it may be\nbetter to write your class within your\nmain\nmodule but if your class is fairly large\nyou may want to consider placing your\nclass within a separate module\nso if you were to take that route we\nwould go to file\nnew python file and we would name this\ncar\nclick python file and we would declare\nour class within\nthe separate module so class car and for\nnow i'll type in pass\nthen we just need to import this class\nso within our main module we would type\nfrom the name of the module import the\nname of the class\nfrom car import car now objects can have\nsome combination of attributes and\nmethods attributes describe what an\nobject is or has\nso what are a few attributes that cars\nmight have they might have a make so\nlet's create a few variables\nfor the time being i'm just going to use\nnone as a placeholder\ncars can have a model a year\nand a color\nnow objects can also have methods what\nkinds of methods could cars perform\nperhaps a drive method and a stop method\nso let's define those\ndef let's say drive and we'll have one\nargument\nself self refers to the object that is\nusing this method\nnow what do we want to do when we call\nthis method\nlet's say this car\nis driving let's create a stop method as\nwell\ndef stop\nand we will print this\ncar is stopped we now have all of the\ndifferent attributes and methods we\nwould like our car objects to have but\nthere is one more thing that we need\nit is a special method called the init\nmethod that will construct\nobjects for us in other programming\nlanguages this is known as the\nconstructor\nso we need a special method that will\ncreate objects for us\nso we need to define this method def and\nthe syntax on this is somewhat strange\nit is\ntwo underscores init it's short for\ninitialize\n200 scores again and then we need at\nleast self as an argument\nand then we can actually assign our car\nobjects unique variables so take all of\nthese attributes that we have\nand we're going to place them within\nthis init method now we can receive\narguments\nwhen we create car objects but we need\nto pass them in\nas arguments to our init method so we\nneed to set up some parameters\nlet's say in order to create a car\nobject we need a make\na model a year and a color\nthen when we receive these arguments we\ncan actually assign them to\neach car's specific attributes but we\nneed to precede each of these with self\nself is referring to the object that\nwe're currently working on\nor creating so self.make self.model\nself.ear and self.color\nand then when we assign these we're\ngoing to say self.make\nequals whatever make that we receive\nwhen it's passed in as an argument\nself.model equals model and continue\nthat pattern for year\nand color all right that is all we need\nfor our class car we have a constructor\nwe're assigning\narguments that we receive to the\nattributes of our car object\nand we also have two methods one for\ndrive and one for stop\nnow we can start creating some car\nobjects so going back to my main file\nhere\nto create an object we need a unique\nname for it let's call this first car\njust car one\nequals the name of the class car then a\nset of parentheses\nnow in order to construct a car object\nwe need to pass in a matching\nset of arguments you can see here that\nwe need to pass in a make a model a year\nand a color\nso what kind of car should we make let's\nsay that the make is going to be\nchevy we need a model\nperhaps corvette a year\n2021 is good and a color let's say blue\nalright now let's actually access some\nof these cars attributes\nand i should probably put this one in a\nprint statement so print car ones\nmake and this should print chevy\nthen we can do the same thing for model\nyear and color\nso let's change some of these around\nmodel\nyear and color\nyep this object is a chevy corvette 2021\nand the color is blue\nand we should have two methods as well\nso car one\ni would like this car to use its drive\nmethod\nthis car is driving and let's have this\ncar use it stop method\ncar one dot stop\nthis car is stopped there's one thing\nthat i should mention real quick because\ni forgot to mention it earlier\nso within our init method you can see\nthat we need five\narguments in order to construct a car\nobject self\nmake model year in color but when we\npass in\nour arguments we're not passing in\nanything for self we only have\nfour arguments here that's because with\npython we do not need to pass itself\nthat's done automatically for us we're\nreferring to the object that we're\ndealing with\nas you can see with our drive and stop\nmethod we need\nto pass in self in order to execute our\nmethod\nbut when we call this method we do not\nneed to do so so just remember with\npython with self we do not need to pass\nin anything for this argument that is\nall\nnow the nice thing about this is that we\ncan reuse this class\nas a blueprint to create more car\nobjects we just call that\ninit method that constructor so this\ntime let's create a second car called\ncar\n2 and this will be a different kind of\ncar\nwhat kinds of arguments should we pass\nit let's say this is a ford\nmustang the year will be 2022 and the\ncolor will be red\nall right let's check card to use\nattributes\nand let's have car 2 use its drive and\nstop method\nthis is a ford mustang the year is 2022\nthe color is red\nthis car is driving and this car is\nstopped one other thing that we can do\ntoo\nis that within our methods here let's\nreplace car with\nthe name of the model that we're working\nwith so this\nplus self dot model\nplus is driving now this self keyword\nthink of it as you're replacing self\nwith the name of the object that we're\nworking on if car one\nis using its drive method replace itself\nwith car one\nif this is car two that called this\nmethod then replace itself with car 2.\nthink of it that way and let's do the\nsame thing for stop\nthis plus self dot model\nplus is stopped all right\nprobably don't need these anymore so\nlet's have car one\nuse its drive and stop method this\ncorvette is driving this corvette is\nstopped\nlet's try this with car two this mustang\nis driving\nthis mustang is stopped now you can have\nthem do things independently too let's\nhave car 1 use its drive method and car\n2 uses stop method\nthis corvette is driving and this\nmustang is stopped in conclusion\na class can function as a blueprint to\ncreate objects\nwe can assign attributes what describe\nan object is or\nhas and methods what each object\ncan do and then within our class we have\na special method called the init method\nwe can pass in some arguments and assign\nthese arguments to each\nobject's attributes and then we can\nreuse this class as if it was a\nblueprint\nso we can create more objects out of it\nso\nthat is the basics of object oriented\nprogramming in python if you would like\na copy of all this code i will post this\nin the comment section down below\nbut yeah that's the basics of object\noriented programming\nin python hey what's going on everybody\nit's bro hope you're doing well and in\nthis video i'm going to explain\nthe basics of class variables in python\nso sit back\nrelax and enjoy the show\nhere's a super quick video on the\ndifferences between class and instance\nvariables\nfor this example let's say we have two\ncar objects\nnamed car one and car two and i'm just\npassing in a bunch of values to each of\nthese car constructors\nnow within my class car i have my init\nmethod\nalso known as the constructor and what\ni'm doing is assigning all of these\nvalues\nto the variables found within my car\nconstructor\nthese variables declared inside the\nconstructor\nare known as instance variables and each\nobject\ncan have their own unique values\nassigned to each\nof these variables now where a class\nvariable is different\nis that a class variable is declared\ninside the class but outside of the\nconstructor and what we can do\nis set some default values for some\nvariables\nlet's say we would like to add an\nadditional variable let's say wheels\nwheels equals and we can set a default\nvalue\nfor all instances of this class for each\ncar object that we create\nso we set wheels to equal four this is\nan example of a class\nvariable whenever we create a car object\nwe can pass in a unique\nmake model year in color but by default\nthey will all have\nfour wheels now if i was to print the\namount of wheels\nthat car 1 and car 2 have they will both\nhave\nfour wheels it's as if we're setting a\ndefault value\nif i change this to two wheels well then\nthese cars have two wheels\nmaybe their motorcycles or something now\nyou can actually\nchange these values each object will\nhave their own\ncopy of this variable but you can set it\nto a default value\nso let's say car one\nis a motorcycle car one dot wheels\nequals two so if i were to print car\none's wheels along with card two\ncar one will have two wheels but car two\nis still using that default amount of\nwheels which is four\nnow there's another way in which you can\naccess a class variable\nyou don't necessarily need to create an\nobject to do so you can just use the\nname of the class\nso what i'm going to do is turn all of\nthese lines into comments\nand i will print the amount of wheels\nthat our class has so type in the name\nof the class car with a capital c\nit should be the same name as your class\nname followed by the name of the class\nvariable\ncar dot wheels but make sure you spell\nit right\nall right so this will display four\nwheels\nnow what if we decide to change the\nclass variable\nthrough our class well that will affect\nall\ninstances of our class so let's say car\ndot wheels equals two it's as if we\nchange our mind and we have decided to\ncreate motorcycles instead of cars\nwell if we were to change the wheels\nclass variable through the use of our\ncar class\nwell then it's going to affect it for\nall instances of this class\nyou can see that both car 1 and car 2\nnow have two wheels\nwhen we just changed car 1's wheels it\ndid not affect\ncar 2 at all so that's the main\ndifference between a class variable and\nan instance variable\nan instance variable is declared inside\nof constructor\nand they can be given unique values with\nclass variables\nthey are declared within a class but\noutside of the constructor\nand you can set a default value for all\ninstances of this class\nfor all unique objects that are created\nand then you can change those values\nlater too\nso if you would like a copy of all this\ncode i will post all of this in the\ncomment section down below\nbut yeah that is the basics of class\nvariables\nin python hey what's going on everybody\nit's you bro hope you're doing well and\nin this video i'm going to explain\ninheritance in python so\nsit back relax and enjoy the show\nlet's talk about irritants the term\ninherit means to receive derive or\nbe left with and we can apply this\nconcept to programming classes can\ninherit something\nusually attributes and methods from\nanother class these classes can form\nparent-child relationships where a child\nwill receive everything\nthat the parent class has much like you\ninherit jeans from your parents\nand classes can have children and give\nwhatever they own to their children\nand in today's video we'll be creating a\nparent class called animal\nand children of the animal class will\ninherit the common attributes and\nmethods\nthat all animals might have to kick off\nthis video i think what we'll do\nis keep all of our classes within the\nsame file just so that it's easier for\nus to read and understand\nlet's begin by creating a class called\nanimal so at the top\ntype class animal and what are some\nattributes and methods that all animals\nshould have\nlet's say we have a class variable\ncalled alive and we'll set this to true\nif you're an animal you begin by being\nalive and what are some methods\nhow about an eat and sleep method so\nlet's define those\ndef eat what are we gonna do when we\ncall this method\nlet's print something let's print this\nanimal\nis eating let's also create a sleep\nmethod def\nsleep what are we gonna do when we call\nthis method let's print something as\nwell\nthis animal is sleeping and we now have\nour animal class\nnow let's create separate classes for\nspecific types of animals let's say\na class for rabbit a fish and a hawk so\nwe can make\nobjects of those classes so let's begin\nwith a\nrabbit class class rabbit now to use\ninheritance\nwith the class that you intend to be the\nchild class after the class name add a\nset of parentheses\nand then pass in the name of the parent\nclass in this case it's going to be\nanimal\nso we will add that to the parentheses\nso now\nrabbit is the child class and animal is\nthe parent class\nso the child class is going to inherit\neverything that the animal class has\nso for the time being i'm going to type\npass so this rabbit class\nwill have access to a class variable\ncalled alive\nand an eat and sleep method so let's\ndefine\na fish and hawk class and i'm just going\nto copy what i have here and just change\nrabbit to fish and then do so again and\nchange rabbit to\nhawk this is our family tree animal\nis the parent class and it has three\nchildren a rabbit class\na fish class and a hot class and for the\ntime being we're just going to write\npass as a placeholder\nso i bet we can create objects from\nthese classes\nso let's do so let's say we have an\nobject called rabbit\nrabbit equals rabbit let's do the same\nthing for\nfish and hawk\nall right we now have three objects\nrabbit\nfish and hawk and let's take a look at\ntheir\nclass variables i bet they have an alive\nvariable let's check that so i would\nlike to print\nrabbit dot oh would you look at that\nthis rabbit class\nhas a class variable called alive even\nthough there's nothing within this class\nwell that's because we used inheritance\nso each of these\nthree children classes inherit\neverything from their parents\nall of these attributes and methods i\nbet they have eaten sleep functions as\nwell so let's check that\nwith fish let's have fish use its eat\nmethod\nand hawk will use its sleep method hawk\ndot sleep\nso the rabbit is alive the fish is\neating and\nthe hawk is sleeping now even though we\nhave nothing written within each of\nthese\nspecific types of animal classes all of\nthese animals have access to these\nattributes and methods because of\ninheritance\nand another benefit of inheritance is\nthat we don't need to keep on\ncopying and pasting this code for\nexample let's say we were not using\ninheritance so we would not need an\nanimal class\nwe could write our code this way where\nwe would just copy and paste everything\nunderneath each of our classes so what\nif we need to make a change to one of\nthese methods\nas in your boss says you know what let's\nchange sleep to\nslumber okay well we would have to go to\neach of these classes and make the\nchange manually\nit's not too bad if you have like three\nclasses but what if you have hundreds\nthat's going to take a lot of effort so\nwouldn't it be nice if we just\nlist everything that each of these\nclasses has in common\nand then have all of these classes\ninherit from\none common class and then if you need to\nmake any changes\nyou can do so just within this class and\nthis change will apply to\nall of the different child classes so\nthat's another benefit of inheritance\nand not only does it make any changes\neasier but each class\ncan have their own unique attributes and\nmethods as well\nalong with the attributes and methods\nthat they inherit from their parents\nso for rabbit fish and hawk let's have\neach of these classes have\ntheir own unique method as well so for\nrabbit let's define\na run method if you're a rabbit then you\ncan run\nso let's print this rabbit\nis running and i'm just going to fix\nsome of the spacing here\nall right if you're a fish then you can\nswim\ndef swim let's print\nthis fish is swimming\nand lastly we have hawk if you're a hawk\nthen you can fly def fly\nlet's print this hawk\nis flying like i said before not only\ndo these specific types of animals have\naccess to\nall of the attributes and methods that\nthey inherit from their parents\nbut they can have their own attributes\nand methods as well so let's test some\nof these methods\nso we have our rabbit fish and hawk\nobjects\nlet's have rabbit use its run method\nfish we'll use its swim method and hawk\nwill use its fly method\nand here we go this rabbit is running\nthis fish is swimming\nand this hawk is flying so in conclusion\nclasses can have children the children\nclasses will inherit everything that\ntheir parent class has\nall of the parents attributes and\nmethods but not only that the children\nclasses can implement\ntheir own unique attributes and methods\nas well\nso that is inheritance if you would like\na copy of this code\ni will post all of this in the comment\nsection down below but yeah that's the\nbasics of inheritance using python\nyo what's going on everybody it's you\nbro hope you're doing well\nand in this video i'm going to explain\nhow multi-level inheritance works in\npython so\nsit back relax and enjoy the show\nall right welcome back everybody let's\ntalk about multi-level inheritance\nthis is a concept where a derived class\nalso known as a child class\ninherits from another derived class\nhere's an example let's say\nwe have a hierarchy of classes there\nwill be three levels to this\nwe'll create a family tree of living\norganisms\nso at the very top we're going to have a\nclass called\norganism any class that inherits from\nthe organism parent class\nwill receive one attribute one variable\nnamed alive\nand this will be set to true so if you\nare an organism you begin by being alive\nnow let's say we have a child class that\nwill inherit from the organism parent\nclass\nlet's say animal class animal\ninherits from organism so any animal\nthat we create\nwill have this alive attribute set the\ntrue\nand all animals eat so let's define a\nfunction that does that\nat least i believe all animals eat let's\npretend that they do\nso this animal is eating\nand now why stop there let's create a\nclass for a specific type of animal\ni like dogs so let's create a dog class\nclass dog\ninherits from the animal class\nand all dogs should be able to bark so\nlet's create a function to do that\nand we'll print this dog\nis barking okay so what we just did here\nis\nmulti-level inheritance we had a derived\nchild class inherit from another child\nclass\nso it's kind of like this dog class is\nthe child animal class is the parent\nand then the parent of the parent class\nwould be like\na grandparent right and then if you\nadded another layer on top of that to\nthis hierarchy\nwell then the parent of the grandparent\nwould be like a great grandparent\nthat's how i think of it at least now\nlet's create a dog object just to verify\nthat everything's working so let's call\nour dog\ndog and our dog object should have\naccess to an attribute named alive\nand our dog object receives that\nattribute from the organism class\nand this will print true if i were to\nprint whatever this attribute contains\nand our dog should be able to eat\nbecause it receives this method from the\nanimal parent class\nand lastly our dog should be able to\nbark and that method is defined within\nits own class\nso that's how multi-level inheritance\nworks it's a concept where a child class\nwill inherit from another child class\ni like to think of it like a family tree\nwhere a child class will have a parent\nand the parent of that parent would be\nlike a grandparent basically\nso if you would like a copy of this code\ni will post all of this to the comment\nsection down below\nbut yeah that is how multi-level\ninheritance works in python\nhey what's going on everybody it's you\nbro hope you're doing well and in this\nvideo i'm going to show you all how\nmultiple inheritance works in python so\nsit back\nrelax and enjoy the show\nall right people multiple inheritance\nmultiple inheritance is the concept\nwhere a child class\nis derived from more than one parent\nclass\nhere's an example let's say that all of\nour children classes are going to be\ncertain types of animals and we would\nlike our animal classes\nto inherit from either the prepared\nclass\nthe predator parrot class or both\ndepending on what type of animal it is\nbecause some animals in the animal\nkingdom can be both prey\nand predators and one example that comes\nto mind would be fish\nfish will eat smaller fish but also can\nget eaten by\nlarger fish so here we have two classes\nprey and predator\neach has a dedicated method if a class\ninherits from\nthe prey parent class they will have\naccess to a flea method\nwhich will print this animal please if a\nclass inherits from the predator parent\nclass\nthat class will have access to a hunt\nmethod that will print\nthis animal is hunting and it's possible\nthat some animals can do both\nthey can both flee and hunt but they'll\nneed to inherit\nboth of these classes both prey and\npredator and that's where multiple\ninheritance comes in\nnow let's create some classes based on\ncertain types of animals\nlet's say we have class rabbit and\nrabbit we'll inherit from the prey class\nbecause\nrabbits are typically prey and not\npredators but i don't know there could\nbe some killer rabbits out there\nhaven't run into any yet let's have\nclass hawk inherit from the\npredator class and lastly fish\nand fish can be both prey and predators\nso they will inherit from both classes\nand we just separate each class with a\ncomma so prey\ncomma predator and it's as simple as\nthat\nnow let's create an object from each of\nthese classes we have rabbit\nequals rabbit hawk\nequals hawk and fish\nequals fish now let's just verify\nall of the different methods that each\nof these objects inherited\nso our rabbit should have access to a\nflea method\nbut no hunt method and let's just test\nthat\nyep this animal flees and my hawk object\nshould have access to a hunt method but\nno flea method\nthis animal is hunting and lastly\nmy fish object has access to both a flea\nand a hunt method and if you take a look\non the right hand side of this pop-up\nwindow it shows the class that it\ninherited this method from\nso fleet comes from the parent class of\nprey and hunt comes from the apparent\nclass of predator\nso my fish can both flee and hunt\nbecause it's typically considered both\nprey and predators\nthis animal flees this animal is hunting\nso that's basically what multiple\ninheritance is\nit's a concept where a child class is\nderived from more than one parent class\nso that's basically multiple inheritance\ni'll post all of this code to the\ncomment section down below\nand well yeah that's how multiple\ninheritance works\nin python hey what's going on everybody\nit's bro hope you're doing well\nand in this video i'm going to teach you\nguys about method overriding in python\nso\nsit back relax and enjoy the show\nhere's a super quick video on method\noverriding i have two classes a class\ncalled animal and a class called rabbit\nrabbit inherits from the animal class\ntherefore rabbit is the child class\nan animal is the parent class within the\nanimal class there is one method a\nmethod called eat\nand when you call this method all this\nwill do is print this animal is eating\nthe rabbit class inherits from the\nanimal class therefore\nrabbit has access to this eat method and\nif i were to create a rabbit object\nand this rabbit used its eat method well\nthen this is going to print\nthis animal is eating now method of\nwriting is the ability of an object\noriented programming language\nto allow a subclass also known as a\nchild class\nto provide a specific implementation of\na method\nthat is already provided by one of its\nparents in this case we're going to\noverride\nthe eat method and what we can do is\nprovide a more specific\nimplementation for the rabbit class and\nnow to override a method what we'll do\nis that within\nthe child class we need to define a\nmethod with the same\nmatching method signature that is the\ncombination of a method's name\nplus its parameters both of these\ntogether are known as a\nmethod signature within the child class\nwe will define\nand eat method with the same parameters\ndef eat\nand in this case the only parameter is\nself just to keep this simple\nand what we'll do is that will provide a\nmore specific\nimplementation of the eat method\nspecifically for rabbits\nso let's print something more closely\nassociated with rabbits such as\nthis rabbit is eating a\ncarrot now if i were to run this program\nagain\nwe will instead use this implementation\nof the\nmethod instead of the one that it\ninherits from its parent class\nof animal basically speaking an object\nwill use a method that is more closely\nassociated with itself first before\nrelying on a method that it may inherit\nfrom a parent class\nin this example we're using this version\nof the eat method\nspecifically for rabbits instead of the\nversion that we inherit from the parent\nclass\nof animal that is the basics of method\noverriding i will post this code in the\ncomment section down below\nand well yeah that's how to override a\nmethod using python\nhey what's going on everybody it's you\nbro hope you're doing well\nand in this video i'm going to teach you\nguys all about method chaining in python\nso\nsit back relax and enjoy the show\nall right everybody let's talk about\nmethod training method chaining is used\nto call\nmultiple methods sequentially and each\ncall performs an action on the same\nobject\nand return self here's an example of how\nmethod chaining would be useful\nlet's say we have a class named car car\nhas\nfour methods turn on drive break and\nturn off\nthey will all just print a simple\nmessage beginning with turn on\nturn on what print you start the engine\ndrive will print you drive the car\nbrake will print you step on the brakes\nand turn off will print\nyou turn off the engine let's say we\nhave a car object\ncar equals car and i would like my car\nobject\nto use its turn on method immediately\nfollowed by\nthe drive method with how we've been\ncoding things previously we may write\nsomething such as\nthe name of the object in this case car\ndot and then the method to use\ni would like my card to use the turn on\nmethod followed by\ncar dot drive so currently this will\ntake two lines of code\nbut this will print you start the engine\nand you drive the car\nnow with method training we can call\nmultiple methods\nsequentially now the format on this is\ngoing to be a little bit different\nand if we were to write the same code\nusing method chaining it might look a\nlittle something like this\nafter the first method call we would add\ndot\nand then an additional method that we\nwould like to call so for example\nafter the turn on method we'll\nimmediately call\nthe drive method but there's one more\nthing that we need to add when we're\nusing python to do method training\nso normally this by itself will not work\nwhen we call a method in python if there\nis nothing that is returned python will\nreturn\nnone so as you can see here attribute\nerror none type\nobject has no attribute of drive so we\nneed to return itself under each method\nthat we're using method training with\nso let's add return self to each of\nthese methods\nso let's do that for drive\nbreak and the turn off method and this\nshould work now you start the engine\nyou drive the car so think of it like\nthis after we finish\ncalling this method python is going to\nreturn self\nso it's going to return car so then\nwe'll immediately use\ncar.drive now here's another example\nlet's say i would like to\ncall the break method followed by the\nturn off method\nso that would be car dot break\nparentheses\nfollowed by dot turn\noff so this will print you step on the\nbrakes\nyou turn off the engine now here's an\nextreme example let's say we would like\nto call all four methods in order\nso that would be car dot\nturn on followed by dot drive\ndot break dot\nturn off so this will call\nall four methods in order starting with\nthe leftmost method\nyou start the engine you drive the car\nyou step on the brakes\nyou turn off the engine now if you have\none long method chain like this\nit might become difficult to read after\na while so what i would recommend\nif you're doing a lot of method chaining\nis that after each method call\njust hit enter to move each method call\ndown to a new line\nso it'll look something like that and\nthis backslash\nmight be inserted this is a line\ncontinuation character\nso this is a little more readable but\nyou know it still does the same thing\nbasically\nall right everybody so that is method\ntraining it's used to call\nmultiple methods sequentially and each\ncall performs an\naction on the same object and returns\nself if you would like a copy of this\ncode i will post all of this in the\ncomments section down below but yeah\nthat is how to do a method chaining in\npython\nhey what's going on everybody it's bro\nhope you're doing well\nand in this video i'm going to explain\nthe super function in python so\nsit back relax and enjoy the show\nwell then since you clicked on this\nvideo i should probably discuss\nthe super function now the super\nfunction is used to give access\nto the methods of a parent class it\nreturns a temporary object\nof a parent class when used here's an\nexample of why the super function would\nbe useful\nlet's take this program that i've\nwritten there's three classes\na class called rectangle which is the\nparent class\nto two children classes square and cube\nand all we're doing is creating a square\nobject and a cube object\nbut we need to pass in a length and a\nwidth for squares\nand a length width and height for cubes\nnow with programming we don't like to\nrepeat code we like to reuse code and if\nyou take a look within my knit methods\nfor both square and cube we're repeating\nself.length equals length\nand self.width equals width twice for\nour init methods\nso one thing that we can do any\nsimilarities between\nthe square and cube class we can place\nwithin\nthe rectangle class and then reuse this\ncode so what i'm going to do\nis copy this indent method within our\nsquare class\nand paste it within our rectangle parent\nclass\nand then in order to access this init\nmethod\nwe can use the super function so we no\nlonger need\nthese two lines of code what i'm going\nto do is ask\nthe rectangle class to use its init\nmethod so we're going to type\nsuper parentheses dot and then the name\nor the function of the parent class\nthat we would like to use and i would\nlike to use the init method\nbut i need to send a length and a width\nbecause it requires that\nso let's send these so we're going to\npass in our length and\nour width and now we can do the same\nthing for our cube init method\nso i will copy this line of code we no\nlonger need these two lines of code\nbecause we will be reusing our init\nmethod within the parent class\nof rectangle but we'll still need to\nkeep this line in to assign the height\nbecause that's a difference between our\nsquare and cube class\nand now we can just reuse this init\nmethod within\nthe rectangle parent class now i'm\nthinking that we should probably test to\nsee if\nlength and width are assigned to these\nattributes and one way\nthat i think would be fun would be to\ncreate an area method\nfor squares and a volume method for\ncubes so let's define\nan area method within the square class\ndef\narea and i would like to return self\ndot length times self\ndot width and we can create a volume\nmethod within cubes\nso let's do that def let's change this\nto volume\nwe'll multiply it length times width\ntimes height\nbut we need to type self dot pipe\nand we can call these methods to get the\narea\nof a square or the volume of a cube\nlet's print\nsquare dot area\nand then cube dot\nvolume so if our init method\nis actually being used we should have a\nlength and the width\nassigned to these attributes and it\nlooks like we do\nin conclusion the super function is used\nto give access to the methods of a\nparent class\nit returns a temporary object of a\nparent class when used in order to\naccess\nthe methods of the parent class also\nknown as\na super class and in this example within\nthe init methods of both square and cube\nwe immediately called the init method of\nthe parent class\nto pass in some arguments that both of\nthese classes\nhave in common so if you would like a\ncopy of this code i will post all of\nthis in the comment section down below\nbut yeah that is how the super function\nworks in python\nhey what's going on everybody it's bro\nhope you're doing well\nand in this video i'm going to explain\nhow abstract classes work in python so\nsit back relax and enjoy the show\nhey what's good everybody let's talk\nabout abstract classes\nnow abstract classes prevent a user from\ncreating an object of that class\nthink of an abstract class more as a\ntemplate\nit's an idea it's not real it's like a\nghost class basically\nplus an abstract class compels a user to\noverride any abstract methods within a\nchild class\nso it's also a form of checks and\nbalances as well which we'll discuss\nlater\nnow here's a small program that i've\nwritten let's say we have\nthree classes class vehicle car and\nmotorcycle\ncar and motorcycle are the children\nclasses of the vehicle class\nnow within this vehicle class we have a\ngo method\nbut i'm currently only defining it not\nactually implementing it so i'm just\nwriting pass\nnow within car and motorcycle we're\noverriding this method and creating our\nown implementation of the skull method\nthat we inherit\nthe go method for the car will print you\ndrive the car\nand the go method for the motorcycle\nclass will print you ride the motorcycle\nnow currently i'm creating an object of\neach of these classes\ni have a generic vehicle object car\nobject\nand motorcycle object now after running\nthis program\ncurrently the go method within our\nvehicle class is not being implemented\nso this won't print anything but the go\nmethod within our car class will print\nyou drive the car and the go method\nwithin our motorcycle class will print\nyou ride the motorcycle with that being\nsaid let's pretend that we're coding the\nnext\nneed for speed game and we would like a\nuser to create an object from a specific\nkind of vehicle whether it's a car from\nthe car class or a motorcycle from the\nmotorcycle class\nwe would like to prevent a user from\ncreating an object of the vehicle class\nbecause the vehicle class is too generic\nwe do not have all of the\nimplementations\nset up for a vehicle it would be like\nsomebody unlocked the ghost car or the\ninvisible car\nwhich doesn't actually exist and is\nmissing a lot of features we need a user\nto create an object\nfrom a child class because these are\nfully fleshed out and one way in which\nwe can prevent a user from creating an\nobject of this class\nas well to turn this class into an\nabstract class\nwhich is what this video is all about go\nfigure now the first step to creating an\nabstract class is that we'll need some\nimports\nso at the top of your program write this\nfrom\nabc abc is an acronym for abstract\nbased class abc from abc\nimport abc all capital comma\nabstract method all right\nnow with our vehicle class the class\nthat you intend to be the abstract class\nadd us out of parentheses and our\nvehicle class\nwill inherit from the abc class\nand now with any methods within your\nvehicle class you're going to add\nthis decorator at the top at abstract\nmethod all right we should now be\nprevented from creating a\nvehicle object our vehicle class is now\nan abstract class\nand we cannot give it a physical form a\nphysical manifestation\nand if we attempt to you can see here\nthat we have a type error\ncan't instantiate abstract class from\nvehicle with abstract methods\ngo so an abstract class is a class which\ncontains\none or more abstract methods and an\nabstract method\nis a method that has a declaration but\ndoes not have an implementation\nnow by definition an abstract class\ncontains\none or more abstract methods if i remove\nthis one abstract method within our\nvehicle class\nwell we could still create a vehicle\nobject and i'm just going to turn this\nvehicle.go line into a comment because\nwe don't have a go method anymore\nas you can see we can still create a\nvehicle object which we would like to\nprevent a user from doing\nso we need at least one abstract method\nwithin our vehicle class\nso i'm going to go ahead and add this go\nmethod back in\nan additional feature of abstract\nclasses is that they compel\na user to override any abstract methods\nwithin a child class\na method that is abstract has a\ndeclaration but does not have\nan implementation so let's say that we\ncreate our vehicle class\nour abstract vehicle class and now we're\ncreating\nthe children classes of car and\nmotorcycle and let's say i'm not paying\nattention and i forget to add a go\nmethod\nso if i just write pass within my\nmotorcycle class i'm currently missing a\ngo method within my motorcycle class\nwell python is going to prevent me from\nrunning this because we have a type air\ncan't instantiate abstract class vehicle\nwith abstract methods of go\nso by inheriting from an abstract class\nit's a good form of checks and balances\nto be sure that your children classes\nare not missing\nany implementations of any methods that\nthey inherit\nhere's an additional way of thinking of\nthis our vehicle class\nis telling its children if you're going\nto inherit from me then you need to\noverride\nthis abstract method of mine and if you\ndon't well i'm not going to let you be\ninstantiated\nso in order for us to create a cart and\nmotorcycle class\nwe need to override the go method that\nthey inherit from its parent class of\nvehicle\nand provide its own implementation now\nlet's say we create an additional method\nlet's say we have\na stop method so let's define that def\nstop\nfor the time being i'll write pass and\nto make this an abstract method\nadd this decorator at abstract\nmethod now car and motorcycle both need\nto\nimplement that method of stop it's\ncurrently missing it\nas you can see here class car must\nimplement all abstract methods\nand the same thing applies for a\nmotorcycle as well so we need to\noverride this method and provide its own\nimplementation\nso let's remove that decorator and let's\nprint something\nlet's print this car is stopped\nand i'll do the same thing for\nmotorcycle\nso def stop let's say\nthis motorcycle\nis stopped and we'll call the stop\nmethod for each of these\ntypes of vehicles car dot stop\nand motorcycle dot stop\nall right and we can now create a car\nand motorcycle object\nbecause we are overriding both of these\nabstract methods found within the parent\nclass of vehicle\nall right everybody so that's the basics\nof abstract classes\nit's a class which contains one or more\nabstract methods\nand an abstract method is a method that\nhas a declaration\nbut does not have an implementation and\nthe benefits of using an abstract class\nis that they prevent a user from\ncreating an object of that class\nplus it compels a user to override any\nabstract methods found within a child\nclass\nso if you would like a copy of this code\ni will post all of this in the comments\nsection down below\nbut yeah that is how abstract classes\nwork in python\nhey what's going on everybody it's you\nbro hope you're doing well\nand in this video i'm going to explain\nhow we can pass objects as\narguments so sit back relax and enjoy\nthe show\nladies and gentlemen in today's video\ni'm going to be demonstrating how we can\npass\nobjects as arguments for this example\nlet's say we have a class\ncar and there is one class variable\ncalled color\ncolor equals none what we'll be doing is\ncalling a function that accepts an\nobject as an argument as well as a color\nso let's create a function named change\ncolor now make sure when you define this\nfunction it's not within the cart class\nthen technically this would be a method\nof the car class\nwhat we would like is a separate\nfunction outside of the car class\nnow we need to set up some parameters we\nwould like to accept a car object as\nwell as a color\nso for the first parameter let's say a\ncar and make sure this is in\nuppercase or capital because python\ndoesn't like that argument names should\nbe lowercase\nso when we pass in a car we will give it\na nickname of car\nand we would also like to pass in a\ncolor so let's set up a parameter called\ncolor\nnow when we pass in a car we will assign\nthat car's color with whatever color\nthat we receive so\ncar dot color equals color\nand now let's create some car objects so\nlet's say car one\nequals car car two equals car\nand car three equals cart currently if i\nwere to print\ntheir colors this is what we'll see\nprint car one\ndot color and repeat the steps for two\nand three\nand we're not calling this function yet\nso all of these colors should be set to\nnone\nthey are basically cars with no color\nthey're i don't know iron or something\nwhatever cars are made out of aluminum\nplastic stuff like that okay so now\nlet's call this function\nchange color perhaps right here so in\norder to call this function we need to\npass in\na car object as well as a color so let's\npass in\ncar one and a color perhaps red and\nwe'll repeat the steps for two and three\nso let's say car two will be white\nand car 3 will be blue\nnow after calling this function we have\na car\nobject and a color and we're assigning\nthe color of our car to whatever color\nthat we receive\nnow these cars in order car 1 2 and 3\nare red white and blue now one thing\nthat you should know\nis that the name of this parameter that\naccepts our object\ndoesn't necessarily need the same name\nas the class name\nthat created the object that we're\npassing in we could name this something\nelse entirely perhaps\nvehicle you'll just want to be sure that\nthis is at least descriptive\nof the kind of object that you would\nlike to pass in and we're not limited to\njust passing in car objects we can pass\nin all sorts of objects\nbut we need to pass in an object as well\nas a color\nso this time let's create a class called\nmotorcycle\nclass motorcycle and this class will\nalso have a color set to none\nso what we're doing is actually reusing\nthis function for all sorts of different\nkinds of vehicles\nnow let's create a vehicle i'll just\nname this bike one for short\nbike one equals motorcycle now let's\ncall the\nchange color function and we can pass in\nan object as well as color this time we\nwill pass in\nour bike object as well as a color i\nthink\nblack counts as a color and let's print\nbike once color\nand this should work we have red white\nblue and black\nin conclusion we can pass objects as\narguments to a function\nmuch like what we've been doing with\nvariables however the type of objects\nthat we pass in may be limited based on\nthe required attributes and methods\nthat that given class or object might\nhave and we'll get more into this on the\nnext video on\nduct typing so if you would like a copy\nof all this code i will post all of this\nin the comment section down below\nbut yeah that is how to pass objects as\narguments\nusing python hey what's going on\neverybody\nit's bro hope you're doing well and in\nthis video i'm going to explain duck\ntyping in python so\nsit back relax and enjoy the show\ni hope you all like ducks because that's\nthe topic of this video\nduct typing is the concept where the\nclass of an object is less important\nthan the methods and or attributes that\nthat class might have\nthe class type is not checked if the\nminimum methods and or attributes\nare present it's based off of a popular\nphrase\nif it walks like a duck and it quacks\nlike a duck then it must be a duck\nhere's an example i have two classes\nclass duck and class chicken\nboth duck and chicken have walk and talk\nmethods\nbut they print something different with\nthe duck class the walk method will\nprint\nthis duck is walking and the duck talk\nmethod will\nprint this duck is quacking the chicken\nclass\nhas the same named methods walk and talk\nbut they print something slightly\ndifferent\na slightly different variation the print\nmethod will print\nthis chicken is walking and the talk\nmethod will print\nthis chicken is clucking now let's say\nwe have a third class a class\ncalled person\nnow there is one method within our\nperson class\nlet's say we're attempting to catch a\nduck\nwe'll pass in self and we need to pass\nin a\nduck object as an argument so let's type\nduck now within this method\nwe'll have our duck use its walk method\nas well as its talk method duck.walk and\nduck.talk\nand then maybe we'll print something\nsuch as you caught the critter\nnow let's create an object from each of\nthese classes let's create a\nduck object duck equals duck\na chicken object chicken equals chicken\nand lastly person person equals person\nnow if we would like our person to use\nthe catch method\nwe need to pass in a duck as an argument\nso with our person let's type person\ndot catch and we need to send a duck\nobject because that's a required\nparameter here\nso we're passing in our duck object that\nwe created and as soon as we catch the\nduck\nit's going to use its walk and talk\nmethod and then we'll print\nyou caught the critter so as you would\nexpect this will print\nthis duck is walking the stuck is\nquacking you caught the critter\nnow with duct typing we can pass in\na different type of object as long as it\nhas\nthe same methods and or attributes as\nour duck\nwe could pass in a chicken because a\nchicken can also walk\nand talk so this time let's pass in our\nchicken\nas an argument and this will still work\neven though our parameter is set up to\ntake a duck object\nthis chicken is walking this chicken is\nclucking you caught the critter\nin layman's terms think of it like this\npython is examining this chicken object\nit's using its walk method it's using\nits talk method which are required\nand python is saying well that's close\nenough remember if it walks like a duck\nand it quacks like a duck\nthen it must be a duck so duct typing is\nthe concept where the class of an object\nis less important than the methods and\nor attributes that it might have\nthe class type is not checked if the\nminimum methods and or attributes\nare present now let's say with our\nchicken object our chicken can no longer\nwalk\nwell we cannot pass in our chicken\nobject anymore\nwe have an attribute error chicken\nobject has no attribute walk\nso python took a look at this chicken\nand noticed that it does not have a walk\nmethod\nwell it's not walking like a duck but\nit's talking like a duck\nso it doesn't count as a duck because it\ndoesn't have its walk method\nin conclusion the class type of an\nobject is not as important as the\nmethods and or attributes that that\nclass might have when using\nduct typing the class type will not be\nchecked if the minimum\nmethods and or attributes are present\nsince\nchickens can both walk and talk like\nducks then\nthey can be a substitute for ducks when\nwe pass in our duck object to this\nmethod\nso if you would like a copy of this code\ni will post all of this in the comment\nsection down below\nbut yeah that is the basics of duct\ntyping in python\nhey what's going on everybody it's you\nbro hope you're doing well\nand in this video i'm going to discuss\nthe walrus operator in python\nso sit back relax and enjoy the show\nall right people i hope you like\nwalruses because that's the topic of\nthis video we'll be discussing\nthe walrus operator also known as an\nassignment expression\nit's a colon followed by an equal sign\nand it kind of looks like a walrus on\nits side\nnow this is a new feature for python 3.8\nwhat it does is that it assigns values\nto variables\nas part of a larger expression here's an\nexample of why the walrus operator would\nbe useful\nlet's say we have a variable named happy\nhappy\nequals true if you're not happy or\nyou're feeling so so you can set this to\nfalse if you want\nso let's print the value contained\nwithin happy\nso this will print true to the console\nwindow\nnow wouldn't it be cool if we could\ncombine both of these\nstatements together so we would want to\nsay something such as\nhappy equals true and then print it to\nthe console window using one line of\ncode\nwell normally we can't do this using the\nstandard assignment operator now one\nthing that we can do is use\nthe walrus operator this assigns a value\nto a variable\nas part of a larger expression so this\nwould technically\nbe allowed if this assignment operator\nwas instead\nan assignment expression the walrus\noperator happy\nwalrus true and when they're all within\na print statement\nwe can assign a value to a variable and\nuse it as a part of a larger expression\nso as you can see\nthis new variable of happy was assigned\nand used in one expression\nnow here's a more practical example of\nwhy the walrus operator would be useful\nlet's say we have the smell program what\nthis will do is consistently ask you\nwhat food you like and put it into a\nlist called foods\nfoods equals list while true food equals\ninput what food do you like if food\nequals quit\nbreak then append our list of foods with\nthis new food item that we have\nokay let's run this then so this while\nloop\nwill continue as long as i don't type in\nquit and it will consistently ask me\nwhat food do i like and place that food\nitem into a list\nnamed foods so let's begin what food do\ni like well i do like pizza\ni like sushi and i like ice cream\nand that should be enough for me i'm\ngoing to type in quit to exit this\nprogram\nnow let's write the same program but\ninstead use\na walrus operator so that we can write\nthis program using\nless lines of code now if i were to use\nthe walrus operator this is how i would\nwrite the same program\nwe would still need our list foods\nequals\nlist now for my while loop it's going to\nlook something like this\nwhile food walrus operator\ninput what\nfood do you like\nall right this is the assignment portion\nnow we can use\nthis assignment portion within a larger\nexpression\nso let's also check to see if our input\ndoes not equal quit alright\nso then after each iteration of this\nwhile loop\nwe will take our list foods dot\nappend food and\nthat is it so we have written the same\nprogram in about half the lines of code\nthat we did previously so\nlet's test it what food do you like\npizza\nsushi ice cream\nand quit well everybody that is the\nbasics of the walrus operator also known\nas an assignment\nexpression it's a new feature for python\n3.8\nand beyond so if this doesn't work for\nyou i would check to see what version of\npython you're using first\nit assigns values to variables as part\nof a larger expression\nif you would like a copy of this code i\nwill post all of this in the comment\nsection down below\nbut yeah that is how the walrus operator\nworks in python\nhello what's going on everybody it's bro\nhope you're doing well and in this video\ni'm going to show you guys how we can\nassign a function to a variable in\npython\nso sit back relax and enjoy the show\nhey all in today's video i will show you\nall how we can assign a function to a\nvariable\nthis video will be a prerequisite for a\nfew videos i have coming up regarding\nfunctions\nnow let's say we have a function named\nhello and all we'll do is print the word\nhello\nand as you know to call this function\nyou would type the name of the function\nfollowed by a set of parentheses and\nthis will print the word\nhello the set of parenthesis that comes\nafter a function's name\nis the portion that will call the\nfunction if you were to remove\nthat set of parenthesis afterwards we\nwould not in fact call that function\nnow with python python will pretty much\ntreat everything as objects\nincluding functions so there's something\ni want to show you guys\nif i was to print the name of my\nfunction hello\nwhat will be displayed is the memory\naddress of this function\nthis is the memory address of where this\nfunction is located within my computer's\nmemory\nand it's in hexadecimal think of it like\na street address such as\none two three fake street this is the\naddress of where this function is within\nmy computer's memory\nand each time that i run this program\nthis number can change as you can see\nhere\nnow one thing that we could do we could\nassign this address to a variable\nlet's say hi equals hello and be sure\nthat you're not adding that set of\nparentheses afterwards because\nthen you would be calling the hello\nfunction and returning the result to\nhigh\nso high equals hello no parentheses\nand if i was to print hi well\nthe address of hello and hi will be at\nthe same memory address\nboth of these numbers are the same now\nwhat do you imagine would happen\nif i was to call the high function after\nwe assigned the memory address of hello\nto hi\nwell then what we'll end up doing is\ncalling the hello function\neven though we're listing that we would\nlike to call the\nhigh function even though it doesn't\nexist so it's as if this hello function\nhas two names\nyou can either use hello or you can use\nhi and let me demonstrate that\nso you can call either hello hi or both\nfor this example\nthat's because we're assigning the\nmemory address of hello to this variable\nof high\nso we could treat high as a function\nit's kind of like\nan alias where this function has two\nnames now here's another demonstration\nlet's say that we would like to assign\nour built-in print function to\na variable so let's say maybe say\nsay equals print and when i say print\ni'm referring to the print function and\nbe sure you're not adding that set of\nparentheses afterwards\nnow if i need to print something to the\nconsole window i can either use\nprint like what we've previously been\ndoing or i could use\nsay because say has the same memory\naddress let's say\nperhaps whoa i can't\nbelieve this works\nsurprise face all right so\nwe can call the print function by saying\nthe word say\nsay all of this text and this will print\nall of this text\nwell say all of this text to the console\nwindow\nunder normal circumstances i'm not sure\nwhy or when\nyou would need to assign the print\nfunction to a variable but\nyou can and well that's kind of cool so\ni thought i'd show you guys that\nso everybody that's how to assign a\nfunction to a variable\nlike i said we'll be building upon this\ntopic so you want to be sure that you\nunderstand this\nall right then well if you would like a\ncopy of this code i will post all of\nthis to the comments section down below\nbut yeah that's how to assign a function\nto a variable\nin python hey uh what's going on\neverybody\nit's bro hope you're doing well and in\ntoday's video i'm going to explain\nhigher order functions in python so\nsit back relax and enjoy the show\nall right ladies and gentlemen let's\ntalk about higher order functions\nthese are functions that do one of two\nthings one they either accept a function\nas an argument\nor two they return a function as output\nand in python this is totally allowed\nbecause functions are also treated as\nobjects\ni'll give you guys an example of both of\nthese but let's begin with number one\nhere's an example of number one let's\nsay that i have two functions\nnamed loud and quiet both of these\nfunctions will accept a string as an\nargument\nloud will return that string all\nuppercase as if we're shouting something\nquiet we'll return that text i'll\nlowercase as if we're whispering\nsomething\nnow i'm going to create a third function\ncalled hello\nand this will be the higher order\nfunction it accepts a function as an\nargument\ni'm not sure if we're going to be\npassing in loud or quiet\nwhatever it is i'm going to give it a\nname of funk\nshort for function each of these\nfunctions will return some text\neither all uppercase or lowercase i'm\ngoing to assign that to\ntext text equals the name of our\nfunction we're not sure what it's going\nto be\nand i will pass in some text in order to\ncall one of these functions\ni will pass in just the word hello\nthat's capitalized\nand at the end i will print whatever\ntext that we have\nin order to call this function of hello\ni need to pass in a function as an\nargument\ndo i want to pass in loud or quiet do i\nwant the\nloud variety of hello where all of the\ntext will be uppercase\nor the quiet variety of flow where all\nthe text will be lowercase\ni would like to pass in loud because i\nwant to make my text all uppercase\nso i'm typing the name of the higher\norder function and passing in\na function as an argument and the result\nis that the word hello will be printed\nto the console window\nall uppercase now here's a rundown of\nwhat just happened\nwe're calling the hello function and\nwe're passing in loud\nas an argument we're naming loud as\nfunk while we're within this hello\nfunction\ntext equals loud and we're sending a\nstring of text\nthat says hello we're returning that\ntext all uppercase\nassigning it to a variable called text\nand printing that text\nto the console window now if i would\nlike to\nuse the quiet variety of hello then i'm\ngoing to pass in\nquiet as an argument so quiet will make\nall of this text\nlowercase alright people so that's\nexample\none of a higher order function a higher\norder function\nis a function that accepts a function as\nan argument\nthis hello function is an example of a\nhigher order function\nbecause we're accepting either loud or\nquiet as arguments\nall right people let's move on to the\nsecond part of this definition for\nhigher order functions\na higher order function is a function\nthat returns a function\ni'm going to give a different example\nthis time let's say we have a pair of\nnested functions the outer function will\nbe named divisor\nand we will accept a number as an\nargument that we will call x\na divisor is a number that is used to\ndivide\nanother number when using division and\ninside this function we have an inner\nfunction\nnamed dividend dividend is the number\nthat's going to be divided\nand we will call the argument that is\npassed in y\nall we'll do is return y divided by x\nwe're dividing the dividend by the\ndivisor y\ndivided by x now within the\nouter function but not within the inner\nfunction we're going to return\nour dividend function so a higher order\nfunction is a function that returns a\nfunction\ndivisor is a higher order function\nbecause we're returning\ndividend now if i would like to access\nthis nested\ndividend function i first need to call\nthe outside\ndivisor function and pass in a number as\nan argument to serve as the divisor\nthe divisor function is going to return\nmy dividend function which we can then\nassign to a variable\nso the variable i'm going to name divide\ndivide equals and i need to call divisor\nand set a divisor let's say that i would\nlike to divide all numbers\nby two so i will set x to be two\nand now for the dividend i will\nprint call the\ndivide variable and pass in a number as\nthe dividend the number that's going to\nbe divided\nand let's say i would like to divide 10\nby two\nand this will work as you can see we\nhave five in the console window\nso let me explain what just happened\nhere so our program\nbegins here divisor and we're passing in\ntwo\nx will be two and it will stay that way\nuntil we finish this program or until we\nreassign x\nnow x equals two we're skipping this\nfunction because we did not call it yet\nwe're returning dividend and assigning\nit to a variable\nand we can call a variable if it has the\nmemory address of a function\nwhich is what we're doing in this line\nnow we're calling\ndividend and passing in 10 so y equals\n10\nand x still equals to we're returning 10\ndivided by 2 and printing it to the\nconsole window\nwell everyone in conclusion a higher\norder function\nis a function that either one accepts a\nfunction as an argument\nor two they return a function the format\nis a little bit strange and we're not\nquite used to it yet\nbut in future videos we'll have more\npractice with high order functions\nif you would like a copy of all this\ncode i will post all of this to the\ncomment section down below\nbut yeah that is how higher order\nfunctions work in python\nyo what's going on everybody it's bro\nhope you're doing well in today's video\ni'm going to explain\nlambda functions in python so sit back\nrelax\nand enjoy the show all right\nladies and gentlemen let's talk about\nlambda functions these are functions\nthat are written in one line and use\nthis lambda keyword\nthey accept any number of arguments but\nthey only have one expression\nthink of it as a shortcut they're useful\nif you need a function for only one use\nor a short period of time\nand then you're just planning on\nthrowing away that function afterwards\nhere's the syntax for a lambda function\nyou type lambda\nyou add the parameters followed by a\ncolon and then your expression\nlet's say we have this function named\ndouble double accepts one argument that\nwe will name\nx we're returning x times two\neffectively doubling it\nso if i need to call this function i\nwould type double\nand then pass in a number as an argument\nso the result if i pass in 5 would be\n10. now let's write the same function\nbut instead write it as a\nlambda function so let me turn these\nlines into comments\nnow the first step is to type lambda\nthen our parameters we only have one\nparameter and that is x\ncolon and then our expression we would\nlike to return x\ntimes two now this lambda function is\ngoing to return a function object and we\ncan assign that much like what we do\nwith variables\nlet's say double equals lambda x colon\nx times two and in order to call this\nlambda function\nwe're going to type double then a set of\nparentheses\nto call this function and then pass in\nour arguments\nso let's say that x equals 5 and then\nwe're going to double it\nand the result is 10. so that's the\nsyntax for a lambda function you type\nlambda\nyour parameters colon and then your\nexpression this time let's say that we\nhave two parameters\nwe have two numbers that we want to\nmultiply by each other\nso let's say that this function will be\ncalled multiply\nmultiply equals lambda\nx comma y because we have two parameters\ncolon followed by our expression we\nwould like to multiply\nx times y and that is it\nnow in order to call multiply we need to\npass in two arguments\nif i were to pass in just one well we'll\nhave a type error\nso let's pass in five and maybe six and\nthe result\nis thirty now let's try three parameters\nlet's say we would like to add three\nnumbers together\nlet's say add lambda x\ncomma y comma z so we have all of our\nparameters\nwe have our colon here and then we need\nour expression\nx plus y plus z and\nlet's add five six and seven together\nthe result is 18. now let's try\nsomething a little more complex let's\npass in some strings this time\ni'll create a function named full name\nfull name\nequals lambda\nfirst name comma\nlast name the expression is going to be\nfirst name plus perhaps a space\nplus last name now i need to pass in a\nfirst name and a last name\nfull name and you can use your own name\nfor this example if you want\nlet's say bro comma code\nyep this will print your first name and\nyour last name to the console window\nnow let's take it a step further let's\nsay we would like to check somebody's\nage once using a lambda function we\nwould like to check to see if they're 18\nor older because they're signing up for\nsomething perhaps let's say a credit\ncard\nso let's create a function object age\ncheck equals lambda we have one\nparameter\nsomebody's edge colon and then our\nexpression\nlet's type true if age is greater than\nor equal to\n18 else\nfalse to call this age track function\nwe need to pass in an age let's say the\nuser is 12\nand they're trying to sign up for a\ncredit card while this will return false\nlet's say they're 18 now and this will\nreturn\ntrue so that's a lambda function it's a\nfunction\nthat is written in one line using this\nlambda keyword\nthey accept any number of arguments but\nthey only have one expression\nthink of it like a shortcut and they're\nuseful if you need to use a function\nonly once and then you're just planning\non throwing it away afterwards\nso if you would like a copy of all this\ncode i will post all of this to the\ncomment section down below\nbut yeah those are lambda functions in\npython\nhey what's going on everybody it's bro\nhope you're doing well\nand in this video i'm going to show you\nall how we can sort iterables in python\nso sit back\nrelax and enjoy the show\nwell well well welcome back everybody in\nthis video i'm going to show you all how\nwe can sort data using python we'll\nbegin with the sort method which is used\nwith lists and the sort function which\nis used with iterables and that would\ninclude lists let's start with something\nvery basic and then we'll crank up the\ndifficulty one step at a time\ni have a list named students and i have\na bunch of student names within this\nlist\nwe have squidward sandy patrick\nspongebob mr krabs\nlet's say that all of these students are\ntaking a college course\nperhaps on marine biology what i would\nlike to do is to sort this list in\nalphabetical order\nand to do that we have a method that is\nbuilt in with lists\nso type the name of your list students\ndot\nsort and it's easy as that and to\ndisplay this list i think i'll use a for\nloop\nfor i in students\nprint i\nand there you go that's how to sort a\nlist starting with the top we have mr\nkrabs\nthen patrick sandy spongebob and\nsquidward the sort method of lists can\naccept keyword arguments\nthere are two optional keyword arguments\nthat we can pass in we can pass\nin key and or reverse we'll cover key a\nlittle bit later\nif we set reverse to true then our list\nwill be sorted by reverse alphabetical\norder beginning with\nsquidward spongebob sandy patrick then\nmr krabs\nnow the sort method does not work with\nother iterables it's a built-in method\nfor lists\nif our list of students was instead\nlet's say a tuple\nwell then the sort method is not going\nto work you can see here that\nwe have an attribute error tuple object\nhas no attribute of sort\nthat's where the sort function would\ncome in because that's useful for other\niterables\nyou can also use this for a list 2 i\nsuppose the sort function will return a\nsorted list so let's use the sort\nfunction this time\nand we'll assign the result to a list\ncalled sorted students\nequals sorted and then we need to pass\nin\nan iterable and we have the option of\npassing in a key\nand or reverse the iterable that we'll\npass in as an argument is our tuple\nnamed\nstudents so this line will be sorted\nstudents\nequals sorted students sorted students\nis a list the sorted function will\nreturn a list but it accepts an iterable\nas an argument\nand to display this we should change 4i\nand students\nto 4i in sorted students and now\nthis function will accept our iterable\nour tuple\nand create a sorted list and all of\nthese are in alphabetical order\nand to reverse this we can pass in the\nkeyword argument of\nreverse equals true and now our list is\nsorted in\nreverse alphabetical order all right\nwe're gonna take it up a level\nwelcome to level two sometimes data\nisn't always as simple here we have a\nlist of tuples each tuple has a\ncorresponding student record\nwe have a name a letter grade for their\ncollege course\nand the student's age now how can we\nsort this\nlist of tuples by either the student's\nname\ntheir grade or their age well that's\nwhere the key\nkeyword argument's going to come in with\nsorting if you take a look at this list\nof tuples it somewhat resembles a\nspreadsheet there's rows and then\nthere's columns\nthe first column corresponds to student\nnames the second column\nare grades and the third column are all\nthe ages of the students\nso by default sorting by the first\ncolumn is actually really easy that's\nthe default\nso if we need to sort alphabetically\nthat would be the same process\nas before we would type the name of the\nlist students\ndot sort but if we were to print\nthis iterable for i in students\ninstead of just the individual student\nnames we're going to get\neach tuple that we have so now all of\nthese tuples are arranged in\nalphabetical order starting with\nthe first column that we have which are\nall the student names\nnow how can we sort these iterables by\ntheir second column\nfor this case it would be student grades\nor even the third column which would be\nthe student ages\nwell that's where the key keyword\nargument's going to come in\nthis is a keyword argument and we set\nkey equal to a function that's going to\nreturn\nthe index of that specific column that\nwe have\nso let's say key equals grid grade is\ngoing to be a function object\ngrade equals and we can easily use a\nlambda expression for this lambda\nlet's say grades colon\ngrades and we will set an index of one\nnow the first index is zero that's the\nfirst\ncolumn because computers always start\nwith zero column two would have an index\nof one\nand then column three would have an\nindex of two\nso grade equals lambda grids\ncolon grids index one you can also\nrename these if you want\nso students dot sort we're setting the\nkey\nequal to grade and grade is a function\nobject\nvia a lambda function and now all of\nthese students\nwill be sorted by their grades starting\nwith sandy\nthen spongebob mr krabs patrick then\nsquidward\nif this needs to be in reverse order we\ncan pass in that other keyword argument\nof reverse\nequals true and for practice if you\nwanted to sort all of this data by each\nstudent's age\nthen we would change grade to let's say\nage age equals lambda\nwe'll change grades to maybe ages colon\nages and the index would then be two\nbecause the first column here is zero\nthen one\nthen two and change key to our function\nobject\nof edge now each student is\nsorted numerically beginning with the\nsmallest edge\nwell the youngest person starting with\nspongebob sandy patrick squidward then\nmr krabs\nand like i said before if you want your\ndata arranged in reverse order you can\nset\nthat keyword argument of reverse to true\nwithin the sort method\nand all of our student data is sorted\nbeginning with the eldest student which\nis mr krabs\nthen squidward patrick sandy and then\nspongebob\nand for the last part of this video\nlet's say that we're working with\nsome other iterable let's say we have a\ntuple of tuples instead\nwell we can no longer use this sort\nmethod because that only belongs to\nlists\nyou can also use the sort function with\nlists and it will generate a new sorted\nlist without changing the placement of\nthe original\nso let's say we have a tuple of tuples\nand this will create a\nnew sorted list let's call this list\nsorted\nstudents equals then we'll use the\nsorted function we need to pass in an\niterable and we can pass in\nboth a key and or the reverse keyword\nargument\nso the iterable would be students\nand let's set the key equal to edge\nand i will not reverse it we can keep it\nas it is but let's change\nfor i in students to sorted students\nand that's how to use the sorted\nfunction to sort\nan iterable including a list well all\nright everyone\nthat's how to sort iterables in python\nif you would like a copy of all this\ncode i will post all of this to the\ncomments section down below\nbut yeah that's a basic way to sort\niterables\nin python hey what's going on everybody\nit's your bro hope you're doing well in\ntoday's video i'm going to show you all\nhow the map function works in python so\nsit back relax and enjoy the show\nwhat up everybody let's discuss the map\nfunction the map function will apply a\nfunction to each item in an interval\nthat would include lists tuples things\nlike that\nand the map function accepts two\narguments are iterable\nas well as the function we would like to\napply to each item within our iterable\nfor example let's say that we have an\nonline store to represent this i have\na list of tuples named store each tuple\nwithin this list\ncorresponds to an item for sale within\nour store\nthere's shirts pants jackets and socks\nand each item has\na price in us dollars let's say now what\ni would like to do is to convert all of\nthe prices within my store\nto euros and currently the conversion\nrate as of the filming of this video is\none us dollar to 0.82 euros\nso let's begin we can easily convert\ndollars to euros with a\nlambda function so let's say two euros\nequals lambda the parameter will be data\ncolon and the next part's a little bit\ntricky within a set of parenthesis to\nrepresent a tuple\nwe'll take data at index 0 that\ncorresponds to the first column\ncomma data at index 1.\nthis represents the index of our prices\nwe're going to take\ndata at index 1 times 0.82\nand that's it the first column will be\nleft untouched\nbut the data in column 1 will be\nmultiplied by 0.82\nnow our map function is going to create\na map object but we can easily cast that\nto a different type of iterable\nso let's say that store underscore\neuros equals map\nparenthesis and then we can pass in our\nfunction as well as our iterable\nour function is our two euros function\ncomma and our iterable is our store\nand that is it now if you want to\nconvert this map object to an iterable\nyou can easily surround this with a cast\ni would like to convert this map object\nto a list\nand we will now have a new store named\nstore\neuros which will have all of the\ndifferent prices of our store in euros\nand to display this i'll use a for loop\nfor i\nin store euros\nprint i and\nlet's try it yep that seems about right\nall of the prices in our store are now\nin euros\nlet's pretend that these prices are\nalready in euros and we would like to\nconvert these\nto american dollars so we will use the\nsame conversion rate but divide\nby 0.82 so let's create a separate\nlambda function\ntwo dollars equals\ni think i'll just copy this but we are\ngoing to divide\nthe first index of data by 0.82\nand let's say store dollars to represent\nour store\nin dollars because we're pretending now\nthat it's currently in euros\nand we will display 4i in store dollars\nso if all of these prices are in euros\nwe are now converting them to american\ndollars\nbut you may want to do some rounding as\nopposed to the nearest descent\nwell everyone that is the map function\nit applies a function to\neach item in an iterable those include\nlists tuples\nthe like you pass in your iterable and\nyour function as an argument to the map\nfunction so if you would like a copy of\nall this code i will post all of this to\nthe comment section down below\nbut yeah that is how the map function\nworks in python\nwhat's going on everybody it's you bro\nhope you're doing well and in today's\nvideo i'm going to show you all how the\nfilter function works in python\nso sit back relax and enjoy the show\nall right all right let's discuss the\nfilter function\nthe filter function creates a collection\nof elements from an\niterable for which a function returns\ntrue\nnow what the heck does that mean let me\nexplain let's say that we have a list of\ntuples named\nfriends each tuple has the name of a\nfriend as well as their age\ni just made up some ages for all of\nthese friends what i would like to do is\nto create a\nseparate list for all the friends that\nare 18 or older\nso let's say that we're all going out\ndrinking and i would like to create a\nlist of my drinking buddies\nbecause they're of drinking age i'm in\nthe united states and the drinking age\nis currently 21\nbut i think worldwide is 18 so let's go\nwith 18 for this example since\ni have a worldwide audience all right\nnow with this filter function\nwe have to pass in our iterable as well\nas a function\nto get anybody's edge that is over 18.\nso let's begin by writing a\nlambda function for this expression here\nour filter function\nso let's say age equals lambda\ndata will be the parameter colon data\nat index one so the first index\nthe first column in this chart here\nwould be zero for other names the next\nindex of one would be all the ages\ndata at index one is greater than\nor equal to eighteen and that is it\nthat is our lambda function and now\nwe're going to filter\nour iterable by this function of age so\nlet's write\nfilter pass in our function\nwhich is edge comma and our iterable\nfriends now this filter function will\nreturn a filter\nobject you can easily cast this i would\nlike to cast\nmy friends list back into a list\nand i will assign this to a new list\nlet's say\ndrinking buddies\nequals list filter age\nand friends and i should be able to\nprint\nall of the friends that are 18 or older\nfor i\nin drinking bodies\nprint i\nand we have rachel monica chandler and\nross\nwell everyone that is the filter\nfunction it creates a collection of\nelements\nfrom an iterable for which a function\nreturns true\ni like to think of it as the search\nresults we're searching for any results\nthat meet this criteria where age is\ngreater than or equal to 18\nand then you can create a separate\ncollection or other list if you want\nfrom the results\nbut yeah that is how the filter function\nworks in python\nyo what's going on everybody it's bro\nhope you're doing well\nand in today's video i'm going to show\nyou how the reduce function works in\npython so\nsit back relax and enjoy the show\nwell i suppose we're on the reduce\nfunction today the reduce function\napplies a function of our choosing\nto an iterable and reduces that iterable\nto a single cumulative value the way\nthis works is that the reduce function\nperforms our function\non the first two elements of our\niterable and repeats the process\nuntil only one value remains i kind of\nlike to think of it like\nwe're recycling elements within an\niterable until a single\nvalue remains our finished product so\nhow is this useful let's say that\nwe're playing a game scramble and we\nhave a bunch of different letters within\nan iterable\na list is a type of iterable so i have a\nlist named letters and we have all of\nthe letters we need to spell the word\nwhat i would like to do is to reduce all\nof these individual elements into a\nsingle cumulative value until only one\nvalue remains so we can do that using\nthe reduce function you can also do this\nwith the for loop too there's multiple\nways of doing this\nso using the reduce function we're going\nto import\nfunc tools and now let's say we have\nour cumulative value stored within a\nvariable named word\nword equals func tools dot reduce\nnow the reduce function has two\narguments the function we would like to\napply\nto the first two elements and then our\niterable\nthe interval is easy that is just\nletters so let's put that in\nletters and for the function we can\neasily write a lambda function for this\nlambda and now this function needs two\nparameters\nlet's say x and y now what kind of\nfunction do we want to perform on the\nfirst two elements of our iterable\nlet's combine them together so let's say\nx\nplus y and now\nlet's print our single cumulative value\nof word so this should print\nthe word hello i'm fairly confident that\nthe word hello is worth like\n20 points in scrabble now let me explain\nwhat happened step by\nstep our reduce function applies our\nfunction\nto the first two elements within our\niterable\nit performs this expression that we set\nx plus y but really we can write\nanything here\nso we perform this expression on the\nfirst two elements\nthen we repeat the process again using\nthe result\nfrom the first time we use this\nexpression and the next element\nso we're combining x plus y again\nand then we're just going to repeat this\nprocess until only\none value remains it's kind of like\nwe're recycling\nall of these letters and creating a\nfinished product out of all of these\nthat's how i think of it at least here's\na different example let's say that i\nwould like to find\nthe factorial of 5 so i have the numbers\n5 through 1 within a list named\nfactorial\nso if i was to find the factorial of 5\nvia the reduce function\ni would probably write something like\nthis so let me change\nword to let's say result result\nequals functools reduce now our lambda\nfunction will be\nx times y because with factorials we\nmultiply\nthe next two numbers together then we\ntake that result\nand then multiply the next one in this\nlist so the\niterable will be factorial and\nlet's print what our result is\nso the factorial of 5 should be 120. now\nlet's walk through this we're taking\nthe first two elements of this iterable\nfive\nand four multiplying together in this\ncase in the last example we concatenated\nthe strings together of x and y\nin this example we're multiplying them\ntogether so we take\nthe first two elements 5 times 4\nwe take the result and apply it to the\nnext iteration\nof x times y again so 20 times 3\nis 60. we repeat this process again\n60 times 2 is 120 and 120 times 1\nis 120 so that's kind of how the reduce\nfunction\nworks it applies a function of our\nchoosing to the first\ntwo elements of an iterable and repeats\nthat process until\nonly a single cumulative value remains\nso that is the reduce function if you\nwould like a copy of all this code i\nwill post all of this to the comment\nsection down below\nbut yeah that is how the reduce function\nworks in python\nhey what's going on everybody it's your\nbro hope you're doing well and in this\nvideo i'm going to show you all how list\ncomprehensions work in python so\nsit back relax and enjoy the show\nall right everybody so list\ncomprehensions a list comprehension is a\nway to create a new list with\nless syntax you can also use a list\ncomprehension to mimic\ncertain lambda functions such as in the\nprevious videos where we use\nthe map and the filter functions and not\nonly that but a list comprehension\nis easier to read than a lambda function\nbut there is a formula that we're going\nto follow\nwhen we create our list within our list\nwe're going to write an expression\nfor item in iterable now let me give you\nan example of where a list comprehension\nwould be useful\nlet's take this program that will create\na list of all the numbers\n1 through 10 squared so if i were to\nprint this we'll get the numbers 1\nthrough 10\nwhatever their square is right so we\nhave 1 through 10\nand the square of 10 is 100 so we wrote\nthis program\nin three lines of code we're creating an\nempty list we're creating a for loop\nand then we're writing an expression for\nwhat we want each loop iteration to do\nnow let's write the same program but\nused a list comprehension\nand we can write the same program with\nless syntax\nso i would write something like this and\nwe're going to follow this formula\nso our list is going to be named\nsquares equals then within a set of\nstraight brackets\nwe're going to write our expression\nwhich is this portion i times i\nfor item so that would be 4i\nin our iterable that would be range\n1 through 11 because remember 11's\nexclusive\nand then let's print our squares print\nsquares and there you go\nwe made the exact same program using a\nlist comprehension\nso basically speaking you just follow\nthis formula you set your list equal to\nyour expression and our expression for\nthis example is i times i\nfor item for i in\nyour interval in range one through\neleven\nso this took three lines of code well if\nyou exclude us printing\nour list and this program took one line\nof code\nnow we can also use a list comprehension\nto mimic certain lambda functions i\nwrote a program\nwhere we will be filtering a list of\nstudent grades\nlet's pretend that all of these students\ntook some sort of exam\nso we have one student that received a\n100 90 80 70 60 50 40 30\nand then one student got a zero because\nthey didn't show up so what i would like\nto do is to filter\nall of these student grades into a list\nthat only contains\nstudents that passed and the criteria\nfor a passing grade will be\na 60 or above so i would like to filter\nall passing students and if i was to\nwrite this program using the filter\nfunction i would probably write\nsomething like this\nso i need a function and then my list\nthat i'm working with\nlambda x colon x is greater than or\nequal to 60\nwill filter all of the results and then\nconvert it to a list named past students\nso the result will look something like\nthis i have five student grades in here\nwith 100 90 80 70 and 60.\nnow let's write the same program using a\nlist comprehension\nnow there's just one portion to this\nformula for list comprehension that\nwe're going to add\nat the end we're going to add if\nconditional we can check\nsome sort of condition after each\niteration so\nlet's write the same program using a\nlist comprehension following\nthis new updated formula that we have so\nwe need\nour list which will be named past\nstudents equals first comes our\nexpression\nand it's just i for this example for\nitem\ni in our iterable\nof students and then if we can check our\nconditional\nif i is greater than or equal to 60\nand this will have the same effect as\nour previous program but instead it uses\na list comprehension\nnow if your program has multiple output\nif you need an else statement within\nyour conditional\nyou're actually going to move this\nportion of the if conditional within\nour formula to right after the\nexpression so let's write\nan if else statement here\nso let's say that instead of just\nexcluding any student that didn't pass\nwe'll replace their grade with the word\nfailed and we can do that\nusing an if else statement so let's do\nthis again i'm going to copy what we\nhave here\npaste it and we'll move our conditional\nfrom the end\nto just after the expression portion i\nif i is greater than or equal to 60 and\nyou can see here that we need to add an\nelse statement else will return\nthe word failed\nso we're replacing each instance of\na failing grade with the word failed\ninstead so if your condition\nreturns whatever i is you can just add\nthat to the end\nif you need an if else statement you're\ngoing to add it right after the\nexpression\nso everybody in conclusion a list\ncomprehension is a way to create a new\nlist\nwith less syntax you can even mimic\ncertain lambda functions which we did\nwith the\nfilter function and it has the added\nbenefit of being easier to read than a\nlambda function\nso you just follow one of these formulas\ndepending on what you're trying to do\nso you need at least list equals your\nexpression\nfor item and your interval if you have a\ncondition that you want to check\nyou just add that to the end of your\nlist comprehension if you have an if\nelse statement\nthen you'll add that to right after the\nexpression so you just follow one of\nthese formulas depending on how you want\nto write your program\nso that is a list comprehension if you\nwould like a copy of this code i will\npost all of this to the comments section\ndown below and well\nyeah that's how list comprehensions work\nin python\nyo what's going on everybody it's bro\nhope you're doing well\nand in this video i'm going to explain\ndictionary comprehensions in python so\nsit back relax and enjoy the show\nokay people dictionary comprehensions\nthey're very similar to list\ncomprehensions except\nthey're with dictionaries that's it\nvideo over okay but seriously a\ndictionary comprehension is a way to\ncreate dictionaries using an expression\nand they can replace for loops and\ncertain lambda functions\nand all we have to do is follow this\nformula dictionary equals\nkey colon our expression for key value\nin iterable so let's go over a few\nexamples our first example we're going\nto take\nthis dictionary named cities in f f is\nshort for fahrenheit\ni have different city names as keys and\nrelative temperatures as\nvalues in fahrenheit so new york is 32\ndegrees fahrenheit boston is 75.\nlos angeles is 100 and chicago is 50.\nand what we'll be doing is creating a\nseparate dictionary where all of these\ntemperatures will be in celsius\nusing a dictionary comprehension so\nlet's follow this formula let's create a\nnew name for this dictionary\nlet's say cities in c short for celsius\nequals and we will follow this pattern\nfirst our key\ngolden then our expression we'll go back\nto this in just a moment\nfor key comma\nvalue in our iterable\nof cities in f and since we're working\nwith a dictionary we're going to use\nthe items method now we just need to\nfill in this expression\nthere is a formula to convert fahrenheit\nto celsius and it should be on the\nscreen right about now\nso let's follow this formula so we'll\ntake our value\nminus 32 and just for good measure i'm\ngoing to put these within parentheses\nand we will multiply all of this by\n5 divided by 9 and that is it so we have\nour key\nour expression to convert fahrenheit to\ncelsius\nfor key value in our iterable of\ncities in f our previous dictionary and\nlet's test this by printing our new\ndictionary\ncities in c\nactually i think i'm going to round\nthese numbers just so it's more readable\nso let's round all this there we go so\nnew york and celsius is zero\nboston is 24. los angeles is 38 and\nchicago is 10.\nso we created a new dictionary using a\ndictionary comprehension\nnow with these dictionary comprehensions\nyou can add an if conditional to the end\nof this\nso let's say that we have a separate\ndictionary of weather\nlike a description of the weather in\neach city new york is snowing\nboston is sunny los angeles is sunny and\nchicago is cloudy\nlet's say that we would like to create a\nseparate dictionary with a dictionary\ncomprehension\nthat only has cities where the weather\nis sunny\nso i would write something like this\nlet's say sunny\nweather will be the name of our\ndictionary equals and we'll follow\nthis formula and then we just tack on\nour conditional to the end so it's kind\nof the same as before really\nso key colon and we don't really have an\nexpression here so let's just say\nvalue then for\nkey comma value\nin our iterable of\nweather dot items\nthen our conditional if value\nsunny because we are only looking for\nsunny weather\nand let's print this print\nour dictionary of sunny weather\nand let me just make this more readable\nfor you guys and our new dictionary\ncomprehension\nwill create a dictionary of key values\nwhere the value\nis sunny using an if conditional at the\nend of our dictionary comprehension\nhere's a third example for you well if\nyou have an if else condition you can\nadd that to where the expression is\nwithin your dictionary comprehension\nso i'm going to reuse the previous\ndictionary for the first example where\nwe have\ncities and their temperatures as values\nso we're going to replace each\ntemperature with a description of the\nweather\nis it warm or is it cold so let's do\nthat using\na dictionary comprehension that contains\nan if else statement\nso let's say we have a new dictionary\nnamed desk short for description\ncities it's a brief description of each\ncity's temperature\nso we follow this formula key\nthen our if else conditional for key\nvalue\nand iterable actually i probably can\ncopy all this\njust to save some time okay so our\niterable\nwill be cities dot items\nand our conditional is going to be\nwe will return warm if\nour value is greater than or equal to\nlet's say 40. else\ncold and we will print\nour new dictionary of desk cities\ndescription of cities so new york is\ncold because it's 32 that's below 40.\nboston is warm los angeles is warm and\nchicago is warm\nnow if your condition gets somewhat\ncomplex you can even call a separate\nfunction to keep your code more\norganized\nso key then we can call a function and\npass in a value\nfor key value in iterable so i'm going\nto again\nreuse our city names and our\ntemperatures\nand this time we are going to call a\nfunction instead\ni think i'll reuse this code from the\nprevious example where we have a\nseparate dictionary named\ndesk cities and i'm going to replace\nthis if else statement\nwith a function so let's say we have a\nfunction that is named\ncheck temp and we will pass in our value\nand we just need to define this function\nso let's define that here\nso let's define check\ntemp and our parameter is our value that\nwe're currently working on within our\ndictionary\nvalue then we'll write if\nvalue is greater than or equal to\nlet's say anything above how about 70\nwill return the word hot\nthen else if\nlet's say 69 greater than or equal to\nvalue and then\nvalue is greater than or equal to\nhow about 40 then we will\nreturn the word warm\nand lastly else return\ncold and let me just fix some of the\nspacing\nnow depending on the temperature that is\nstored within each value of our\ndictionary\nwe will call a function that will return\none of a few different outputs\nso it's kind of like we're using the map\nfunction the map lambda function\nso let's print our description\nof cities and we should get a short\ndescription of the temperature in each\ncity\nafter we call the check temperature\nfunction and then pass in each value\nfrom our dictionary\nso new york is cold because it's 32\ndegrees fahrenheit\nboston is hot because it's above 70. los\nangeles is hot\nbecause it's 100 and then chicago is\nwarm because that is 50 which is between\n69 and 40 within our function\nso that is a dictionary comprehension\nit's a shortcut where you can create\ndictionaries using an expression\nand they can replace for loops and\ncertain lambda functions\nso if you would like a copy of all this\ncode i will post all of this to the\ncomment section down below\nand well yeah that's how dictionary\ncomprehensions work\nin python hey what's going on everybody\nit's bro hope you're doing well and in\ntoday's video i'm going to show you how\nthe zip function works in python so\nsit back relax and enjoy the show\nall right ladies and gentlemen welcome\nback we're talking about the zip\nfunction today\nthe zip function will aggregate elements\nfrom two or more iterables\niterables are those things like lists\ntuples\nsets etc and the zip function will\ncreate a\nzip object with paired elements from\neach iterable\nstored in a tuple for each element\nwithin our zip object\nhere's an example let's say that we have\ntwo different types of iterables\ni have a list of usernames and a few\nusernames within here are\ndude bro and mr and i have a\ntuple of passwords and i have some very\nsecure passwords\nsuch as password abc123\nand guest what i would like to do is to\nzip elements from each iterable together\nso that they're in pairs and each pair\nis going to be stored as a tuple within\na zip object and here's how we can do\nthat let's say that we will create a zip\nobject called users\nand we will use the zip function the zip\nfunction will take a\nvarying amount of iterables we're going\nto pass in our usernames\nand passwords and zip them together so\nlet's pass in usernames\nas well as passwords and now our zip\nobject of users\nis actually iterable zip objects are\niterable so we can use them within a for\nloop\nso let's type for i in users\nand print i\nand what we get is that we have a zip\nobject\nof tuples and each tuple is storing each\npair of elements from our\ntwo iterables now users is a\nzip object and if you don't believe me\nlet me prove it i'm going to print\nthe type of users and this will print\nthat users is indeed a zip object\nbut you can easily convert this to a\ndifferent type of iterable by using a\ncast\nlet's say that we would like to convert\nour zip object into a list\nso we'll surround the zip function with\na cast to a list\nand now the data type of users is now a\nlist\nwhat we have is a list of tuples and\neach tuple is storing a\npair of elements from our two iterables\nof usernames and passwords\nnow currently since we're passing in\nonly two different iterables we can\neasily make this\na dictionary so that these are key value\npairs\nso let's cast our zip object as a\ndictionary\nand to display all of the elements\nwithin our dictionary all the key value\npairs\nwe're going to change our for loop to\nthis for key value\nin users dot and we will use the\nitems method print key\ncomma value actually i think i'm going\nto separate each of these with\na colon just to make it more readable\nand now when we zip these two intervals\ntogether\nwe end up with a dictionary of usernames\nand passwords and the name of this\ndictionary is users\nnow you're not limited to just two\niterables you can add\na third iterable or more so this time\nlet's create a\nmaybe a list a list of last login dates\nand i'll just call this\nlogin date equals and why not make a\nlist\nand let's make up some dates let's say 1\n1\ndash 20 21\n12-20-21\nand 1-3-20\n21 okay so let's create\na zip object of users and we're going to\nzip\nuser names passwords\nand login date\nand let's iterate over this for i\nin users print\ni now we have a tuple for each element\nand instead of a pair we now\nhave a trio i guess of all of the\ndifferent elements\nfrom each iterable so in conclusion\nthe zip function will aggregate elements\nfrom two or more\niterables and create a zip object with\npaired or grouped together elements\nstored in a\ntuple for each element within our zip\nobject\nso that is the zip function if you would\nlike a copy of this code i will post\nthis to the comment section down below\nand well yeah that's how the zip\nfunction works in python\nhey what's going on everybody it's you\nbro hope you're doing well\nand i'm going to explain the purpose of\nif name equals main\nin python so sit back relax\nand enjoy the show\nduring your programming journey you may\nhave encountered this strange statement\nof\nif name equals main now what the heck\ndoes that mean\nso with python files also referred to as\nmodules by including this statement it\ngives our modules some flexibility\none a module that has the statement can\nbe run as a standalone program\nor two this module can be imported\nand used by other modules if there's\nsome sort of useful functions\nor other resources within this module to\nbe imported\nby including the statement of if name\nequals main we're checking to see if a\nuser\nis running this module as either a\nstandalone program\nor they're importing it from another\nmodule behind the scenes\nthe python interpreter will set special\nvariables\none of which is double underscore name\nit's a variable\nand python will assign the name variable\na value\nof main if it's the initial module being\nrun\nand we can actually test that by\nprinting double\nunderscore name so since this is the\ninitial module being run\nmodule one for my example name is going\nto be assigned a value\na string of main now check this out i\nhave two modules what if i were to\nimport module 2 and check the name\nvariable of module 2.\nlet's try it import module\ntwo\nin order to access a variable from\nanother module i need to type the name\nof the module\nmodule two dot and i would like to check\nthe special name variable of module 2\nand print it\nso when you import a module this name\nvariable is going to be assigned\nthe name of the module in this case\nmodule 2.\nthis time what if we change the roles\naround i'm going to copy all of this\ntext\nand paste it within module two we're\ngoing to\nimport from module one we will\nprint that special name variable of\nthis module module 2 and then print the\nname variable\nof module 1 which is being imported now\nwhen i run this program i'm going to\ninstead\nrun from module 2.\nnow this time that special name variable\nof module 2 is main and the special name\nvariable of module 1\nis module 1 the name of the module\nso by including a statement such as\nif name equals main we're checking to\nsee if this module is being run\ndirectly or indirectly so let's test it\nwithin this statement of if name equals\nmain\nlet's print running this\nmodule directly\nelse that must mean that we're running\nthis module\nindirectly so let's print\nrunning other\nmodule indirectly\nokay so i'm going to go to module 1\nand run from here running this module\ndirectly\nnow let's do the same thing with module\ntwo but we need to\nimport module\none and let's run for module two\nrunning other module indirectly for the\ntime being i'm just going to write pass\nwithin\nour if name equals main as a placeholder\nand get rid of our if statement\nso let's say within module 1 there's a\nuseful function or resource we would\nlike to access\nfrom module 2. so let's say we have a\nfunction named hello\nand all this will do is print the word\nhello\nlet's just pretend that it's a useful\nfunction not really but\nlet's pretend so in order to use this\nfunction from module two i need to\nimport module one\nthen type module one dot and\nthen the name of the function so i'm\ngoing to run\nfrom module 2 and this will print\nhello but what if i run this program\nfrom module 1.\nso right now module 1 cannot be run\ndirectly as a standalone program\nso i cannot print the word hello so what\ni could do\nis within if name equals main i can\ncall that hello function directly\nso let's run from module one\nhello one other thing that you might see\ntoo within\nthe if statement if name equals main\nthere might be a call for\na main function and you can write the\nmain body of your program within\na main function so everybody in\nconclusion\nthe reason that people may include this\nstatement if name\nequals main is that it allows our\nmodules to have some flexibility\nthey can be run as a standalone program\nor they can be imported and used by\nother modules\nand this is because the python\ninterpreter sets\nthat special variable of name with a\nvalue\nof main if it's the initial module being\nrun\nif you would like a copy of my code and\nmy notes i will post all of this to the\ncomment section down below\nbut yeah that's the purpose of if name\nequals main\nin python hey what's going on everybody\nit's bro hope you're doing well and in\nthis video i'm going to show you all a\nfew useful functions related to\ntimes and dates using the time module in\npython so\nsit back relax and enjoy the show\nalright everybody so the time module\nlet's begin by importing time\nand the first thing that i'm going to\nexplain to you while is how we can find\nour computer's epic\nalso pronounced as epoch so this is a\ndate and time\nin which your computer thinks time began\nthink of it that way at least\nso we use our epic as a reference point\nso to find your computer's epic it's\ngoing to vary based on your computer and\nyour operating system\nso to find your computer's epic type\ntime dot\nc time and as an argument we will pass\nin zero\nnow what this method will do is that\nthis method will convert a time\nexpressed in seconds and convert it to a\nreadable string\nso if i was to pass in 0 and print it\nwell then\nthis will display the date and time\nwhich is my epic\nour reference point so for me my epic is\nwednesday december 31st 6 p.m\n1969 so i've just added a note\nthat the c time method will convert a\ntime expressed in seconds\nsince epic and convert it to a readable\nstring a readable\ndate and time so for practice let's pass\nin perhaps\n1 million seconds and see what date and\ntime that we receive\nso our c time method will return a date\nand time\none million seconds past this epic here\nso that would be for me monday january\n12th\nabout 7 a.m 1970. our next method is\nthe time method of the time module let's\nprint\ntime dot time method and what this\nmethod will do\nis return the current seconds that have\npassed\nsince our epic using our computer's\nclock\nso the number that i end up with is just\nover\n1.6 billion and this is in seconds\nso for me 1.6 billion seconds\nhas passed since that date which is my\nepic\ni believe it was december 31st 1969\nand every time that i rerun this program\nyou can see that the amount of seconds\nthat has passed is actually increasing\nso\nthat is the time method it will return\nthe current seconds\nsince you're epic using your computer's\nclock and you know what\njust for fun let's change the date and\ntime under clock and see what happens\nso let's change the year to\nhow about the year 2000 change\nand close so let's see what number we\nget with the time method now\nso we get just under 1 billion 948\nmillion seconds have passed\nand now if you need to retrieve the\ncurrent date and time\nwell there's one of a few ways in which\nyou could retrieve that but one way is\nthat we can combine\nboth of these methods of the see time\nmethod and the time method of the time\nmodule\nso let's print time dot c\ntime and we're going to pass in an\namount of seconds\ninto the c time method as an argument so\nwithin\nthe c time method we're going to call\nthe time method\nso the time method will return an amount\nof seconds\nsince our epic and the c time method\nwill convert\nthat amount of seconds to a readable\ndate and time\nso the current date and time is saturday\njanuary 23rd about 3 p.m 20 21\nnow there is more than one way to get\nthe current date and time\nanother way is to use the local time\nmethod and the local time method will\ncreate a\ntime object based on the current time so\nwhat i'm going to do is\ncreate a variable called time object\nand i just need to explain a few things\nabout time objects\nso to best explain this i'm going to\nprint our time\nobject now a time object is also\nreferred to as a\nstruct time object it is made up of\ndifferent keyword arguments\nthere's a year a month day\nhour minutes seconds day of the week\nday of the year and this keyword\nargument here has something to do with\ndaylight savings time\nso there's quite a few uses with time\nobjects\nand one way is that we can format them\nhowever we want because right now\nthis time object is not in a readable\nformat\nso to convert this time object into a\nreadable string we'll need the help of a\nseparate function\nand that is the strf time function\nstr is short for string f4 format and\ntime\nwell for time i guess so this function\nneeds two arguments a format and a time\nobject so our strf time function will\naccept\na format and a time object as an\nargument\nso our format is really just a string\nof different directives and to best\nexplain these i'm going to head to\npython's official documentation on the\nsubject\nso here i am on python's website\nregarding the time module and underneath\nthis section on the strf time function\nthere are different directives that we\ncan embed within our format string that\nwe pass in as an argument\ndepending on the directive that we add\nwe can display\na certain format of our date and time\nso for example if i was to pass in let's\nsay\npercent lowercase a then we will display\nthe time object's weekday name and\nyou're not limited to just one directive\nyou can add any combination of\ndirectives\nso if i was to add percent m well we\nwould display\nthe month of our date time object as a\nnumber\n1 through 12. so there's a bunch of\ndirectives here and i'm going to be\nusing some of these\nso within a string for the format\nargument i'm going to pass in\npercent capital b for the name of the\nmonth\npercent d for the day\npercent y for the year\npercent h for the hour and to format\nthis i'm going to add a colon\nto separate hours and minutes percent\nm for minutes colon percent s\nfor seconds and then we are going to\nassign\nall of this to a variable let's say\nlocal\ntime and local time will be a string\nso let's print our local time\nand the current time is january\n23rd 2021 about 3 p.m\noh and i almost forgot you can also get\nthe utc\ntime that is the coordinated universal\ntime if you know how that works\nso if you need that you would just use\nthe gm\ntime method for the utc time coordinated\nuniversal time\nokay next up we have the strp\ntime function and this function will\nparse\na string representation of a time and or\ndate\nand return a time object so we need to\npass in\na string representing the date and or\ntime as well as a format\nstring so let's create a time string and\nthis variable is going to be a string\nrepresentation of\na date let's say 20th of april 2020\nand what we can do is take this string\nrepresentation of a time and or date\nand parse it to a time object so we're\ngoing to pass in our time\nstring variable as well as a format\nstring\nso let's say i would like to parse\nthe day so that would be percent d for\nday\nthen percent b for name of the month\nand then comma percent y for year\nthis function will create a time object\nso let's assign that to a variable\ntime object equals time dot strp time\nwe're passing in our string\nrepresentation of a time\nor date as well as a format string\nand we can print our time object using a\nprint statement\nhowever this is going to be in a form\nthat is somewhat difficult to read but\nyou can see at least we have a time\nobject\nwith all of these keywords filled in\nwith anything that we passed in\nvia these format directives that we have\nnow the next function\nis the asc time function\nand this function accepts a time object\nor a tuple representation\nof a relative time so this time let's\ncreate a\ntime tuple and we're going to follow\nthis order we can pass in\nup to nine values the first value is a\nyear so let's pass in perhaps\n2020 a month let's say four\na day how about 20 four hours\nlet's say four minutes 20 and seconds\nmaybe zero let me just fix some of the\nspacing here\nokay you can also pass in a numbered day\nof the week\num i'm just going to say zero i don't\nthink it's really that important\na day of the year zero and\nnegative one or zero for daylight\nsavings time so\nwe created a time tuple and we can pass\nin a time\nobject or a tuple representation of a\ntime\nfollowing this formula so let's pass in\nour time tuple\nand this will create a time string a\nstring representation of the time that\nwe create\nand let's print our time string\nand we should have april 20th\nabout four in the morning the year 2020.\nso that is asc time it will convert a\ntuple representation of a time and date\nor a time object and convert it to a\nreadable\nstring now another option is to use m\nk time and mk time will take a\ntuple representation of a time or a time\nobject\nand convert it to seconds since epic\nso april 20th of the year 2020\nis about 1.5 billion seconds\nsince our epic date and for me that was\ndecember 31st the year 1969\nso that is a few useful functions of the\ntime module\nif you would like a copy of this code i\nwill post all this to the comment\nsection down below\nand well yeah that's the time module in\npython\nyo what's going on everybody it's bro\nhope you're doing well\nand in this video i'm going to explain\nmulti-threading in python so\nsit back relax and enjoy the show\nthink of a thread as a flow of execution\nlike a river\nand each thread can carry out its own\nseparate order of instructions\nif we use this process of\nmulti-threading we can have our program\nrun\ndifferent parts of its program at\ndifferent times\nthey all run concurrently but not truly\nin parallel that is a concept for later\nreferred to as multi-processing\nso with reds they each take a turn\nrunning to achieve concurrency\nthis is due to a notorious feature known\nas the gil\nthe global interpreter lock only one\nthread can be running at one time\nbut they can all take turns when one\nthread is idle\nso this allows one thread to hold\ncontrol of the python interpreter\nat any one time so they run concurrently\nbut not truly in parallel\nwhich is what we do with\nmulti-processing now programs and tasks\ncan be divided into\ntwo different categories they can be cpu\nbound that is a program or a task\nthat spends most of its time waiting for\ninternal events\nsuch as a task that is cpu intensive\nit is better to use multi-processing for\ntasks that are cpu bound\nnow tasks that are io bound means that\nthe program will spend most of its time\nwaiting for external events\nsuch as waiting for user input or if\nyou're doing activities like web\nscraping\nyou do a lot of sitting around so with i\no bound tasks it's better to use\nmulti-threading\nbecause we can have multiple threads\nrunning concurrently\nbut not truly in parallel like what we\ndo with multi-processing\nafter importing the threading module we\ncan count the number of threads that are\ncurrently running\nin the background whenever we run a\nprogram we have one thread that is\nrunning that is in charge of\nexecuting our program and we can print\nthe active count of threads running in\nour program\nusing the active count function of the\nthreading module\nso this will print one we have one\nthread that is running\nand we can print a list of all the\nthreads that are running\nby using the enumerate function so\nthe one thread that is in charge of\nrunning our program\nis referred to as the main thread by\nusing this concept of multi-threading we\ncan have\nmore than one thread running\nconcurrently not truly in parallel\nall the threads will take turns while\none of them is idle\nso we can have more than one thread\nrunning more than just the main\nthread which is in charge of running the\nmain body of our program\nso while our main thread is in charge of\nrunning the main body of our program\nwe can have another thread that's in\ncharge of a separate part of it\nmaybe like a countdown timer or\nsomething so\none good example take that quiz game\nthat we made some number of videos ago\nwhile we were waiting for user input\nwhich is a\ni o bound task we could have had a\ncountdown timer going\nlike you only have so many seconds to\nanswer this question we could have had\none thread in charge of waiting for user\ninput and another thread\nin charge of the countdown timer so\nthat's an example of multi-threading\nwe had two threads running concurrently\nand what we'll be doing in this video is\ncreating a program that involves\nmulti-threading we can have\ndifferent threads in charge of different\nparts of our program and they can all\nrun\nconcurrently they'll all take turns\nwhile one of them is idle\nso let's say that we're running late for\nschool\nor work in the morning and we have three\ndifferent tasks that we need to complete\nbefore we can leave\nfor school or work so think of three\ndifferent\nthings you do in the morning such as\nmaybe eat\nbreakfast some people drink coffee or\nmaybe a beverage of your choice so drink\ncoffee and some people like me they like\nto\ndo their homework last minute so i'll\nsay study\nbefore i leave for work or school in the\nmorning\nso what we'll do in each of these\nfunctions each of these functions\nshould take some amount of time to\ncomplete so we can have our main thread\nsleep for a given number of seconds\nusing the sleep function\ntime dot sleep and let's say that in\norder for me to eat breakfast\nthis task will take me three seconds\nlet's just pretend that instead of\nminutes this will be\nin seconds so drink coffee will take me\nfour seconds and study will take me\nfive seconds then when we finish\nsleeping\nlet's print a confirmation message let's\nsay\nyou eat breakfast\nas in you finish eating breakfast with\ndrink coffee\nyou drink coffee\nand with study\nyou finish studying\nnow each of these tasks are i o bound\nthey're going to be spending a lot of\ntime just waiting around\nfor external events they're waiting for\nthe sleep function to expire before they\ncan finish their task\nso we're going to have all of these\nthree functions run on our main thread\nand we'll see how long it takes for us\nto complete our morning ritual\nthese three tasks so let's call these\nthree functions within\nour main thread so let's call the\neat breakfast function first followed by\ndrink coffee and then study\nin that order so this program is going\nto take approximately\nlet's see 12 seconds to complete so\nthere's going to be a pause for a second\nyou eat breakfast then followed by\nyou drank coffee and then study\nyou finished studying so this program\ntook about\n12 seconds overall so if this were\nrealistic\nwhat we would have done is we would sit\ndown and eat breakfast for\nthree minutes well three seconds in this\ncase and then\nonce we finish eating breakfast only\nthen are we allowed to drink our coffee\nand once we finish our coffee only then\ncan we study\nso we completed these tasks sequentially\nand not concurrently for us to move down\nto the next\nfunction we need to complete the\nprevious functions because we're doing\nthis in order\nbut realistically us human beings we\nwould probably\neat breakfast drink coffee and study\naltogether because\nwe can multitask and we can complete\nthese three functions in less time\nand that's kind of the same process as\nmulti-threading we can have\nthese three separate functions running\nconcurrently\nas if we're multitasking we're eating\nbreakfast drinking coffee\nand studying all at once now currently\nwe have\none thread that is in charge of these\nthree separate functions\nwhat we could do is that we can create\nthree additional threads\neach thread will be in charge of each\ntask and then we'll have our main thread\nrunning in the background that will\ncomplete the rest of the program\nso this is how to create an additional\nthread let's say that\nx equals threading\ndot thread we need to pass in a target\ntarget equals and then the name of the\nfunction so let's say\nthread x will be in charge of eating\nbreakfast\nand then you can pass in arguments too\nif your function has parameters by\ntyping args\nand then you pass in a tuple so let's\nsay you have one argument to pass in\nyou'll type your argument followed by\na comma but we don't have any arguments\nin this example but\nyou'll need to be sure to enter them in\nif you do have any\nokay then to begin this thread you type\nthe name of the thread\nin this case x dot start so\nwe now have an additional thread and\nthis thread is in charge of eating\nbreakfast\nnow let's create another thread to drink\ncoffee\nand we'll call this y\nand the target will be drink coffee\nand lastly we have a thread in charge of\nstudying\nand this will be z\nand the target is our study function\nokay now let's see how long it takes for\nus to complete our program\noh and be sure to comment out these\nfunction calls within the main thread\nbecause we don't want the main thread in\ncharge of those anymore\nokay now we can run the program so we\nhave four threads running this time\nyou eat breakfast you drink coffee you\nfinish studying\nso this program took approximately five\nseconds to finish\nand the reason that this program took\nfive seconds instead of 12\nis because before our main thread was in\ncharge of running\nthese tasks sequentially in order but\nnow since we have a thread\ndedicated to each task we can run them\nall\nconcurrently instead of sequentially so\nthat this program\nnow took about five seconds to complete\nand you may have noticed too\nthat the activecount function as well as\nthe enumerate function\nwere called before threads 1 2 and 3\nfinished their respective tasks\nthat's because the main thread is not\ngoing to wait around for\nthese three threads to complete it has\nits own set of instructions to do\nso it is no longer in charge of these\nthree functions\nthe program is going to handle those\nthree functions to our three threads\nand our main thread is going to continue\nits own set of instructions\nits job is to print the active count as\nwell as\ncall the enumerate function which it did\nand it finished its tasks\nbefore threads one two and three now one\ntrick that you can do too\nis that you can use the time modules\nperformance\ncounter function and this function will\nreturn\nhow long it takes our calling thread as\nin our main thread\nto finish its set of instructions so our\nmain thread is not in charge of\nexecuting\nthese three functions our main thread is\nin charge of creating\nthree additional threads and then\ncalling the activecount function\nand the enumerate function as well as\nthe performance counter function\nso our main thread will take\napproximately\n0.075 seconds to complete\nand our three threads are still running\nin the background our main threads job\nits order of instructions is to create\nthree additional threads and then\nimmediately\nprint whatever is returned via the\nactivecount function\nenumerate and then your performance\ncounter so\nour main thread says that it finished\nits tasks in about\n.07 seconds but threads one\nthrough three were still trying to catch\nup that's why the main thread\nfinished before are three additional\nthreads and once\nall active threads have completed their\ntasks\nthen your program will finish and exit\nthere's also this concept called\nthread synchronization we can have a\ncalling thread in this case our main\nthread\nwait around for another thread to finish\nbefore it can move on\nwith its own instruction set so let's\nsay we would like\nour main thread to wait around for\nthread 1 also known as\nx so we're going to use the join\nfunction\nof thread x and now our main thread\nhas to wait around for thread x also\nknown as\nthread 1 to finish before it can move on\nwith its instruction set\nso let's do the same with y and\nz so now our main thread before it can\nmove on with the rest of the program has\nto wait for all of these threads\nto synchronize and join and then and\nonly then\ncan it move on with the rest of its own\ninstruction set\nso this time our program is going to\nlook a little something like this\nyou eat breakfast you drink coffee you\nfinish studying\nso by the time we reach our active count\nthese threads\nare already joined and synchronized\nthey're no longer active\nwhen we enumerate over our active\nthreads we only have\nour main thread and our main thread\ncompleted in\nabout 5.1 seconds this time because it\ndid a lot of waiting around\nit was waiting for threads x y and z to\njoin and finish in conclusion a thread\nis\na flow of execution like a separate\norder of instructions that a program can\nfollow\nand when we run a program we always have\nat least one\nthread running initially and that is\nreferred to as the main thread\nhowever if you have multiple threads\nusing the concept of multi-threading\nwe can have multiple threads running\nconcurrently but not truly in parallel\nwhich is what we'll cover\nduring the video on multi-processing\nthis is due\nto a feature known as the gil\nthe global interpreter lock which allows\nonly\none thread to hold control of the python\ninterpreter\nat any one time and tasks can be either\ncpu bound or io bound a cpu bound task\nis a program or task\nthat spends most of its time waiting for\ninternal events\nsuch as a task that is cpu intensive\nand o bound tasks spend most of their\ntime waiting for\nexternal events such as waiting around\nfor user input\nor web scraping with i o bound tasks\nit's better to use multi-threading\nwith cpu bound tasks it's better to use\nmulti-processing\nwell everybody that is a quick overview\nof multi-threading i will post all of\nthis code to the comment section down\nbelow\nand well yeah that's how to achieve\nmulti-threading\nusing python hey what's going on\neverybody\nit's you bro hope you're doing well and\nin this video i'm going to explain demon\nthreads in python so\nsit back relax and enjoy the show\nokay so demon threads also pronounced as\ndaemon threads a demon thread is a\nthread that runs in the background and\nthey are normally not important for your\nprogram in order to run\nyour program will not wait for demon\nthreads to complete before\nexiting whereas non-demon threads they\ncannot normally be killed\nthey will stay alive until their task is\ncomplete so\na few common uses of demon threads would\nbe\nbackground tasks garbage collection\nwaiting for input\nor other long-running processes so\nhere's an example of why demon threads\nwould be useful\nlet's say that we'll have two threads\nour main thread will be in charge of\nwaiting around for some user input we'll\nask\ndo you wish to exit and in the\nbackground we'll have a timer going that\nwill display\nhow long somebody is logged in so let's\ncreate\na function named timer\nand what we'll do is just display how\nlong somebody's logged in\nso let's say we have a count variable\nwhile true we'll use\nthe sleep function of the time module to\nsleep for approximately one second\nthen we'll increment our count variable\nby one and we'll print a message\nso let's say logged in\nfor\ncount\nseconds and let's create a thread that\nwill be in charge of this timer and run\nit in the background so let's say\nx equals threading\ndot thread the target will be our\nfunction\nof timer and we need to start this\nthread\nx dot start so our thread\nx will be in charge of our timer and run\nit concurrently\nwhile we're waiting for some user input\nour main thread will be in charge of\nwaiting for this user input do you wish\nto exit now here's the issue\nof us using a non-demon thread for a\nbackground task such as a countdown\ntimer\nso our main thread is in charge of\nwaiting around for some user input\nand thread x our additional thread is in\ncharge of\nrunning this countdown timer so if i\nwish to exit this program i'm just going\nto type\nokay and hit enter well my background\ntimer is still going but my main thread\nis complete so i would like to exit this\nprogram but\nmy program will not exit as long as\nthere are non-demon threads that are\nstill alive\nwe cannot normally close this program\nunless we do like a brute force\nyou know close and exit of the program\nso we can turn\nthis thread of x into a demon thread\nso that when we wish to exit the program\nwhen there are no more\nnon-demon threads alive and to change a\nthread to a demon thread it's actually\nfairly easy when you create your thread\nyou can set\nthis flag of demon equal to true and\nthat's it\nso when all non-demon threads have\nfinished their tasks\nyour program will complete and exit but\nif there are demon tasks running in the\nbackground\nthey will be killed automatically so\nlet's try this program again\nso do you wish to exit my program is\ngoing to continue running\nmy demon thread is in charge of the\ntimer and it's going to continue running\nuntil\nall non-daemon threads have completed\ntheir tasks\nso once i type ok my program will\nfinish running and my countdown timer\nwill stop because\nall demons are killed when your program\nis finished running there's also two\nadditional methods that you might be\ninterested in\nyou can use the set daemon method\nof a thread and you can set it to false\nor true if you would like to change\na thread to a non-demon or a demon\nhowever if your thread is currently\nrunning well you cannot actually change\nit from\na non-demon thread to a demon thread\nwhile it's currently running\nso you would have to do that before you\nactually use the start function\nand you can also check to see if a\nthread is a demon or not\nby using the is demon method this will\nreturn\ntrue or false so everybody in conclusion\na demon thread is a thread that runs in\nthe background\nand they're not important for your\nprogram in order to continue running\nyour program will not wait for demon\nthreads to complete before exiting the\nprogram\nwhereas non-demon threads cannot\nnormally be killed\nthey will stay alive until their task is\ncomplete and demon threads are commonly\nused for\nbackground tasks garbage collection\nwaiting around for input\nor other long running processes so if\nyou would like a copy of this code i\nwill post all of this to the comment\nsection down below\nbut yeah those are demon threads in\npython\nyo what's going on everybody it's bro\nhope you're doing well\nand in this video i'm going to explain\nmulti-processing in python so\nsit back relax and enjoy the show\nwhat's up let's talk about\nmulti-processing multi-processing\nis the act of running tasks in parallel\non a different cpu cores it's different\nfrom multi-threading\nalthough it sounds similar because with\nmulti-threading\nwe're limited to running one thread at a\ntime\nbecause of the gil that lock which is\nused for threading we can run threads\nconcurrently\nbut not in parallel however with\nmulti-processing\nwe can create processes and we can run\neach process\nin parallel on a different cpu course so\nwith multi-processing\nit's better for tasks that are cpu bound\nwhere you need heavy cpu usage whereas\nmulti-threading that is better for i o\nbound tasks where you do a lot of\nwaiting around\nso before we begin i recommend these two\nimports\nmulti-processing and time let's begin\nquick note if you're running the windows\noperating system you'll probably need to\nadd\nthis line if name is equal to\nmain so when we run a program we have a\nmain process that is running and if we\ncreate a child process\nfrom that process it's going to copy the\nmodule that we're currently working with\nand that child process will create its\nown children processes and it's going to\nbe a problem\nso we're going to add this line if name\nis equal to main\nso when we create a child process it\nwill copy our module but it's not going\nto execute it\nso let's create a main function and a\nmajority of our code is going to be\nwithin our main function\nif you're running a different operating\nsystem you probably don't have to do\nthis but if you're running windows\nyou probably will now with\nmulti-processing multi-processing is\nbetter for tasks or functions\nthat are cpu bound where they require\nheavy cpu usage\nlet's say that we have a function named\ncounter\nand we'll pass in a number to count up\nto but the number we're going to pass in\nis a ridiculously large number like a\nbillion so let's create a function that\nwill count\nfrom zero so count equals zero and\nwhile count is less than\nour number that we pass in we will\nincrement our counter\nby one so that is the function that\nwe'll call with\nour processes that we create now within\nour main function\nwe'll create a process and to do that\nyou'll need the multi-processing module\nso import process and cpu account and\nwe'll save this for a little bit later\nto create a process let's say we have\nprocess a\na equals process this step is very\nsimilar to creating a thread\nwe have a target our target will be our\nfunction of counter\nand if we have arguments we will pass\nthose in\nso remember with our arguments we have\nto pass in a tuple\nsince we only have one argument to pass\nin\nto differentiate this from an expression\nwe have to add a comma at the end\nso our number let's say is 1 billion\nso that's a million 10 million 100\nmillion\n1 billion let me just verify that okay\nso that's 1 billion\nwe're going to count from zero to a\nbillion\nand in order to start this process a\nmy process use the start function\nand then i will use some process\nsynchronization by using the\njoin function my main process is going\nto wait around\nfor my child process of a to finish\nbefore continuing\nand let's print our performance counter\nso we'll print finished in\nlet's say time dot performance counter\nseconds okay so let's see how long it'll\ntake to count from zero to a billion\nusing\none process i fast forwarded this video\nbut it took my program\n56.7 seconds to count from zero to a\nbillion\nbut we can speed this up by using\nmulti-processing let's create a second\nprocess named b\nand i'm going to divide the amount of\nwork in half so\neach process will count to 500 million\nhalf of a billion so let's change a to b\nand i'm gonna group these start\nfunctions together\njust so it's easier to read and then b\ndot join just to synchronize everything\nokay and then let's change 1 billion to\n500 million for each it's the same\namount of work but divided among workers\nso that is 500 million let's see how\nwell it runs this time\nso it took my program about 40.3 seconds\nto finish\ncounting from zero to a billion but i\ndivided that task among\ndifferent processes each of my two\nprocesses counted from\nzero to 500 million this time so this\ntime let's create\nfour processes so we have a\nb c and d\nand we'll need to start them\nand i'm going to join them now this\nmight not actually speed it up for you\nand i'll explain why later\nit depends on the amount of cpu cores\nthat you have\nokay so oh let's change this to so 250\nmillion for each\nokay see you in a couple seconds\nokay welcome back so on my computer when\ni ran\nfour processes and each was counting up\nto 250 million\ni could finish my program in 27.3\nseconds now for me if i created\nmore processes than this it would\nprobably take longer and here's why\nso you can print the cpu count of your\ncomputer\nusing this function of cpu count so if i\nwere to\nprint whatever this function returns i\ncan get the count\nof the number of additional processes\nthat i can run\nfor the time being i'm just going to\ncomment out this start function because\ni just want to print whatever this value\nis so my cpu count on my computer\nis four so i can run four additional\nprocesses\nbut let's attempt to run eight processes\nso i'm going to copy all these and let's\nsay that we have\ne f g\nand h and we will start all of those two\nso give me a second just to start them\nso a b c d e\nf g\nh and then i'm going to join all of them\ne f g\nand h okay so\nlet's run this now oh and change the\narguments to i keep forgetting to do\nthat\nso let's say 125 for each\nso 125 million times eight is\none billion okay see you in a bit\nall right welcome back this time when i\nhad eight processes working it actually\ntook me\nlonger than when i had four processes\nworking when i had four processes\nworking it took me about 27 seconds\nthis time it took 30 seconds when i had\neight processes working\nthat's because i had more processes than\nmy cpu count\nand that's partially because whenever\nyou create a process\nthere's significant overhead with\nbeginning and\ndestroying a process and if i can only\nrun four\nprocesses on my computer at one time\nwell then i'm creating additional\nprocesses\nto no extra benefit it's actually\nhindering the performance of the\ncomputer\nbecause i'm creating all of these\nadditional processes when it really\ndoesn't help me\nin conclusion multi-processing is the\nconcept\nof running tasks in parallel on\ndifferent cpu cores\nit's similar but different from\nmulti-threading because with\nmulti-threading\nwe can run tasks concurrently but\nthey're all taking turns because of the\ngil\nwith multi-processing we can run all of\nthese different tasks\ntogether in parallel multi-processing is\nbetter for\ncpu bound tasks where a task has\nheavy cpu usage and multi-threading\nis better for i o bound tasks tasks that\ninvolve a lot of waiting around\nso that's multi-processing if you would\nlike a copy of all this code i will post\nall of this to the comment section down\nbelow\nbut yeah that is how multi-processing\nworks in python\nhey what's going on everybody two bro\nhere hope you're doing well and in this\nvideo we're going to be creating our\nvery first\ngraphical user interface in python so\nsit back relax and enjoy the show\nwelcome one and all today we'll be\ncreating our very first\ngraphical user interface in python also\nknown as a\ngui for short we're going to be using\nthe tk inter gui which is a module that\nis included with python\nour first step in order to use tk enter\nis to import this module so that we can\nbegin using it\nour first line of code will be from tk\nenter\nimport asterisk this will import\neverything related to the tk inter\nmodule\nand with this import we can now use all\nof the gui features that this module has\nto offer\nnow there is one important distinction\nthat we need to make we need to discuss\nthe differences between\nwindows and widgets here's a few quick\ndefinitions that i definitely did not\ncopy from the internet\nwidgets are gui elements such as buttons\ntext boxes labels images you name it\nand windows they serve as a container\nto hold or contain these widgets for\nthis topic we'll be creating and\ncustomizing our own window\nand in future topics we'll be exploring\ndifferent widgets that are available to\nus\nso let's begin by creating a simple\nwindow and we should give our window a\nunique name\nsuch as window that's pretty creative\nand in order to instantiate this window\nwe're going to follow\nthis window name with equals tk make\nsure you get the capitalization right\nthis is a\nuppercase t and a set of parentheses to\nserve as the constructor\nwhat this will do and i'm just going to\nadd a comment is instantiate\nan instance of a window for us\nand when we compile and run this nothing\nappears to happen\nthat's because we only instantiated our\nwindow and we're not actually displaying\nit\nin order to display our window we're\ngoing to follow this with\nthe name of the window dot main loop\nand this will display our window and\nthis is our first\ngraphical user interface and we'll be\nadding widgets\nto this window so i'm going to add a\ncomment that\nthis will place window on\ncomputer screen and it will also listen\nfor events but we'll get to that in\nfuture videos\nnow what we'll be doing is customizing\nthe appearance of this window\nlet's begin by changing the size and we\ncan do that with the geometry function\nso we're going to first begin by typing\nthe name of our window which is window\nfollow this by using the geometry\nfunction and we pass in a width and a\nheight\nbut make sure this is within quotes and\nset this to whatever width and height\nthat you want\nso if i want 420 by 420 that would be\n420\nx 420 and the size of our window\nis now the size that we set with the\ngeometry function\nnow take a look at the top left of this\nwindow we have\nthis feather icon as well as a title of\ntk\nthat's kind of lame so let's change that\nlet's first\nchange the window title and there is a\nfunction to do that\nso we type in the name of our window\nwindow\ndot title function and we can pass in a\nnew title that we want to set\nand i will set the title to be maybe bro\ncode first gui\nprogram that'll work and we now changed\nthe title of this window and it says\nbro code first gui program\nthe next thing that we can do although\nnot necessary\nis that we can change the icon of our\nwindow bar at the top\ni would like to replace this feather\nicon with an image of my choosing\nhere's my desktop don't mind all of the\nclutter and i would like to use this\nimage of the logo for my channel and set\nthis as the icon\nfor my window so what i'm going to do is\ncopy\nand then go to my project folder and\nthen paste it\nclick ok and i now have this image\nwithin my project folder\nbut it's in a format that we cannot use\ncurrently we need to convert this to\nwhat's called a photo image\nthat is a format that tk enter can use\nso we'll need to convert our image to a\nphoto image\nso do that anywhere within the window\nbetween window equals tk and window.main\nloop\nright here is good i suppose we're going\nto create a photo image\nfrom this image and this is a png file\nbut yours might be something different\nso let's give our photo image a unique\nname like maybe icon\nand in order to create a photo image\nwe'll follow this with equals\nphoto image and within the constructor\nof our photo image\nthere is an option for file we can\neither list\nthe file name or the file path if it's\nsomewhere else on your computer\nsince this image is within my same\nproject folder i only have to list the\nfile name\nand this is called logo.png\nand this is probably going to be named\nsomething else for you though\nso we now have this photo image called\nicon\nthat we can use and i need to set the\nicon\nof my window to this icon and luckily\nthere is a function to take care of that\nfor us\ntype in the name of the window which is\nwindow\ndot and we're going to use the icon\nphoto\nfunction there are two arguments the\nfirst we're going to set to true\nand the second is the photo image that\nwe want to use\nand this photo image is called icon so\nwe're going to pass\nthis photo image as an argument to this\nfunction\nof icon photo and now when we compile\nand run this\nthe image that we wanted to use is now\nset for the top left icon of this window\nbar\nhowever it loses a lot of the quality\nsince the dimensions are so small\nbut you can still tell that it's my logo\nthough so that's how to replace\nthe icon of your window bar in the top\nleft corner now let's change the\nbackground color\nof this window and one way in which we\ncan do that is to use the config\nfunction you can use the config function\nanytime that you want to make any\nchanges to this window\nso let's change the background color\nhere and there is an option called\nbackground and we can set this equal to\neither\na color name or a hexadecimal value\nlet's begin with just some color names\nlet's say that i want the background\ncolor to be black\ni'll just type in the word black here\nand this will change the background\ncolor of my window to black\nalternatively you can set a hex value as\nthe color\nso if you were to look up or google hex\ncolor picker\nyou can select whatever color you want\nlet's say that i want\na sky blue color like this well this is\nthe hex value i'm going to copy this\nvalue\nand then paste it within the option for\nmy background\nmake sure you have this hashtag as well\nbecause that represents that this is a\nhex value so now the background color is\nthat sky blue color that i picked\nwell everybody that's the basics of\ncreating a window in python and in\nfuture videos we're going to be\nexploring\ndifferent widgets that we can add to\nthis window that have some functionality\nso if you would like a copy of all this\ncode i'll post all of this in the\ncomments down below\nbut yeah that's how to create your very\nfirst gui in python\nhey what's going on everybody it's your\nbro here hope you're doing well and in\nthis video i'm going to teach you guys\nhow we can create\nlabels in python so sit back relax and\nenjoy the show\nwhat is a label well i'm glad you asked\nthat question\nit's an area widget that holds text and\nor\nan image within a window so to begin\nwe'll need to create a window to act as\na container\nto hold this label we can create a\nwindow with\nwindow equals tk followed by\nwindow.mainloop\nand this will give us a window in which\nwe can add a label to\nnow let's give our label a unique name\nsuch as label\nand in order to instantiate a label\nwe'll follow this label name\nwith equals label with a capital l and a\nset of parentheses\nthe parentheses are acting as the\nconstructor for this widget\nour label and we can pass in arguments\ninto\nthese parentheses the first argument\nthat we're going to pass\nin is a master the container for this\nlabel\nwe're going to pass in the name of our\nwindow because our window is acting as\nthe container\nwith widgets in python we can\nde-eliminate the arguments that we're\npassing in\nwith a comma and there are options\navailable to us\noptions are keyword arguments that we\ncan pass in to the constructor for this\nwidget\none option available to us is text and\nwe can set the text of this label equal\nto\na string that we set so let's say that\nwe want this label to say\nhello world well we're going to pass in\nthis option\ntext and it's a keyword argument\nso if we were to do this we're going to\nset the text\nof the label but this label currently\ndoesn't appear within our window\nwhat gives bro i thought you knew how to\ncode hold up wait a minute there's one\nmore thing that we need to do\nso we're going to actually add this\nlabel\nto the window now we set the master\nof the label to be our window but now we\nactually have to add it as step two\none way which we can do that is to use a\npack\nfunction of our label so follow label\nequals label and pass in all of your\narguments\nand then follow this with the name of\nthe label dot pack\nso with the pack option by default this\nwill place our widget in the top\ncenter of our window another way in\nwhich we can add a label\nto a container or window is to use the\nplace function\nand we can set some coordinates of where\nwe want this label or other widget to\nappear\nwithin the window if we want this to\nappear in the top left corner\nwe can set x to equal zero and y t\nequals zero and these are options\navailable to us too that we can pass\nin so this place function will place\nour label at some position or\nsome set of coordinates within the\nwindow and with\nx equals 0 and y equals 0 that will\nplace our widget in the top left corner\nof the window\nand if i were to change these to let's\nsay x equals 100\nand y equals 100 well this is going to\nbe placed\ndown by 100 pixels and to the right by\n100 pixels\nso you can use pack or place there's a\nfew others\nlike grid but they're a little more\ncomplex so we'll get to that in a future\nvideo\nfor the time being i'm going to use the\npack function of the label\nand turn this place function into a\ncomment\ndot pack all right now\nhow can we customize this label we can\npass in different options\nwhen we instantiate this label let's\nchange the font and that's another\noption\nwe can change the font with font equals\nand then we can pass in a font let's\nbegin with a\nfont family i will say maybe ariel\na size perhaps 40 and then a style if\nyou so choose\nlike bold there's also italic and\nunderline\nuh but this will work just fine then so\nthis will change the font\nof the text of our label and it says\nhello world still\nnow let's change the foreground color\nso that is another option the foreground\nis the font color\nand the option is fg for foreground it's\nshort for foreground\nforeground equals we can state a color\nname\nsuch as green and our text\nshould now be green you can select\nsomething more specific by\npassing in a hex value so a custom color\nthat i like\nis hashtag zero zero ff00\nthis is bright green you can always look\nup what different hex values are\nand we can also change the background\ncolor too\nthat is bg short for background color\nand we can pass in a color name\nor a hex value i'm just going to set\nthis to black just to demonstrate that\nwe can pass in both\neither hex values or color names and\nwhat we have\nis green text on a black background\nand this is the limits of our label\nwithin the window\nbecause when we expand this window the\nlabel is still going to stay the same\nsize\nif we were to change the text within the\nlabel\nour label is only going to take up the\nroom that it needs\nand you can see that our label is now\nsmaller now we have all of these\narguments within our constructor and\nit's getting a little bit difficult to\nactually read\nso i'm going to separate each of these\narguments line by line just so that this\nis more organized\nbut it'll work just the same as it did\nbefore now how do we add a\nborder around our label one we can set\nthe border style\nwith the relief option and one border\nthat i like\nis raised but right now the border width\nis one so it's a little difficult for us\nto actually see the border\nlet's increase the border width with the\noption bd\nand i'll set this equal to maybe 10.\nso this border is now more visible\nanother relief\nwhich is the border style is sunken and\nthis will give our label a\nsunken appearance but i think i'll\nchange this back to raised\nwe can also add some padding around the\ntext\nbetween the text and the border we can\npad x and pad y\npad x will add some padding some space\nbetween\nthe x-axis of our text between the\nborder so let's set this to maybe 20\nand we now have 20 pixels worth of space\nbetween\nthe text and the border let's also pad y\nthis will add some space above and below\nour text between the text and the border\nnow how do we add an image to a label we\nfirst need to create what's called\na photo image and we will create this\nwithin\nthe lines of window equals tk and\nwindow.main loop\nand let's give this photo image a unique\nname like\nphoto and in order to create a photo\nimage we're going to follow this with\nphoto equals photo image\nand within the constructor of our photo\nimage there's an option called\nfile and we can list a file path or a\nfile name\nright now on my desktop there is a image\nthat i want to use and i need to convert\nthis to a photo image\nhere's my desktop and this is an image\nthat i want to use to add to my label\ni need to get the file path and i can\nget that by going to properties\nthen underneath location i can copy this\nlocation address\nand paste it within the quotes for file\nand then i need to add the image name\nand this is person.png\nand with these backslashes these need to\nbe double backslashes because\nthat is the escape character for a\nbackslash\nbut what would be a better option is to\nadd\nthis image to my project folder that\ncontains the python file that i'm\nworking with\nso in place of listing the entire file\npath\ni'm going to copy the image that i want\nto use go to my project folder\nand then paste it and i no longer need\nthis entire file path i can just list\nthe image name that i have\nand now what we need to do is add this\nphoto to the label and there's an option\nto do so\nthat is the image option and we'll place\nthis within the constructor for the\nlabel\nwe're going to set image equal to the\nphoto image that we have\nand our photo image is called photo this\nwill add our photo image\nto our label or other widget depending\non what we're working with\nso we have our image but it replaced all\nof the text\nthat we had for this label how do we add\nboth\ntext and an image to a window well we\ncan follow this\nwith the compound option we can set a\ndirection of where\nwe want this image to be placed relative\nto the text that we have\nso i'm going to set compound equal to\nbottom\nso that the image appears on the bottom\nor underneath\nour text so we can both have text and an\nimage\nor if i want this to be in a different\nlocation i could set this to maybe top\nleft or right if i were to set this to\ntop we have\nour image on top of our text and one\nthing to know about labels and many\nother widgets in python is that\nthe size of the widget will actually\nincrease to accommodate\nthe size of all the components that's\ncontained within if i were to give the\ntext a longer string of characters such\nas\nbro do you even code then\nthe width of our label is actually going\nto expand\nto accommodate the size of the longer\nstring of text that we have\nso that's the basics of labels everyone\nif you would like a copy of all this\ncode i will post all of this in the\ncomments down below\nbut yeah that's the basics of labels in\npython\nhey what's going on everybody it's your\nbro here hope you're doing well\nand in this video i'm going to teach you\nguys how we can create buttons in python\nso sit back relax and enjoy the show\nbuttons you click them and then they do\nstuff that's pretty much it\nso this is how to create a button in\npython we'll need a window\nwindow equals tk followed by window.main\nloop\nlet's call our button just button and in\norder to create this we'll follow this\nwith\nequals button and within the constructor\nfor this button we're going to list\nwhat we want to add this button to what\nis the master\nthe master is the window and in order to\ndisplay this button\nwe're going to follow this with button\ndot\npack and we should have a small\nrectangular button within our window\nbut it doesn't display any text nor does\nit do anything\nso let's add some text and there is an\noption to do that\nwithin the constructor we're going to\nlist the option for text\nand set this to whatever text you want\nto display let's\nsay click me and then when we run\nthis our button now says the text that\nwe set\nand it says click me however it\ncurrently doesn't do anything though\nwe need to set a command that is another\noption\ncommand equals and we list a function\nname this is what's known as a callback\nso let's create a function\ncalled click and then outside of the\nwindow let's define what our click\nfunction does def click\nand let's print a message you\nclicked the button\nnow with the command we're going to list\nthe\nfunction name without the parentheses so\nmake sure you're writing it as\nthis and not that this is what's known\nas a callback\nso when we click on this button it's\ngoing to perform our callback\nand perform whatever is within our\nfunction\nclick just like that let's customize the\nappearance of this button i'm going to\nchange the font\nthat is another option font equals\nand let's pick a professional font such\nas comic\nsans it's very professional and i'll set\na size of 30.\nand now you can actually read what's on\nthis button it's large enough\nlet's set the foreground color that is\nthe font color fg\nyou can place a color name or a hex\nvalue here\ni'll pick green that is 0 0 ff00\nand our text should now be green which\nit is\nlet's also change the background color\nthat is bg\ni will pick the color name of black and\nnow we have\ngreen text on a black background notice\nthat when i click on this button\nor hold my mouse button down the color\nscheme has changed that's because\nthere is a different active foreground\nand active background\nand we can change those too so that this\nwon't flash every time you click on the\nbutton\nso let's change the active foreground\nand active background\nthose are other options active\nforeground\nand i'll set this to the same color as\nmy foreground\nwhich is green so the text color is\ngoing to stay the same\nand i'll also change the active\nbackground\nand i will also set this to black to\nmatch my\nbackground and then this should no\nlonger flash\nwhen we click on our button\nif you need to disable somebody from\nclicking on this button\nthere is an option to do so and that\noption is the state\noption and normally this is active but\nyou can set this to\ndisabled and we can no longer click on\nthis button\nand you can see that the color scheme\nhas changed too it's all grayed out and\nwhatnot\nso i'm going to replace this back with\nactive because we still have a few more\nthings to do\nnow how do we add an image to a button\nthere is an\nimage option and we set this equal to a\nphoto image\nbut first we need to create a photo\nimage i have this photo of\na like button a thumbs up that i want to\nuse i need to create a photo image from\nthis image file\nso within the window let's call this\nphoto image just\nphoto photo equals\nphoto image then i'm going to list the\nfile path or the file name\nsince this image is within my same\nproject folder\ni only have to list the file name and\nthis is called\nlike.png but if you use your own image\nit's probably going to be named\nsomething else\nthen i need to set the image equal to my\nphoto image which i named\nphoto but the photo replaces the text on\nthis button but it still works the same\nso we would like to display some text as\nwell as our image\nwe need to use the compound option\nand we list a direction we can list\ntop bottom left right we want this image\nto be\non the perhaps bottom so let's list the\nbottom\nand now when we run this we have our\ntext as well as our image\nand if we changed compound to a\ndifferent direction like\ntop then the image is going to be\ndisplayed\non the top relative to the text\nwhat if we wanted to count the amount of\ntimes that we clicked this button\nwe could create a variable called count\nand we'll set this equal to\nzero but in order for us to access this\ncount variable\nwithin the function of click we're going\nto list\ncount as global so that this is a global\nvariable\nevery time we click this button let's\nincrement our variable count\nby one by saying count plus equals one\nand then we will print whatever the\nvalue of count is\nso within a print statement we'll just\nsay count\nnow when we click on this button we have\naccess to our count\nvariable that's outside of this function\nand every time we click on this button\nit's going to increase our count\nvariable by\none well everybody that's the basics of\ncreating\nbuttons in python if you want a copy of\nall this code i'll post all of this in\nthe comments down below\nbut yeah that's the basics of buttons in\npython\nhey what's going on everybody it's your\nbro here hope you're doing well and in\nthis video i'm going to teach you guys\nhow we can create a simple entry box in\npython\nso sit back relax and enjoy the show\nif you find this video helpful please\nremember to like\ncomment and subscribe your support will\nhelp keep this channel running\nalright my fellow bros in this video\nwe're going to be discussing the entry\nwidget\nthis is a text box that accepts a single\nline of user input\nas always we'll need a window window\nequals tk\nfollowed by window.main loop and let's\ngive our entry box a unique name let's\ncall\nthis entry for short and then to create\nthis entry widget we're going to follow\nthis with equals\nentry and within the constructor we have\nto state what we're adding this to\nwe're going to add this to our window\nand we should finish this by packing it\nor placing it\nentry dot pack and we should have an\nentry box within\nour window however the text is somewhat\nsmall so let's change that\nwe can set this as an option within the\nconstructor of our entry box\nso let's set the font font equals and\npick whatever font you want\ni'm going to pick maybe ariel and then a\nsize\nit'd be 50. and this should be a little\nbit larger\nand we can type in some\ntext like this cool right\nnow we should add a submit button\nbecause right now this currently doesn't\ndo anything if we type some text in\nso let's create a button i'm going to\ncreate this button maybe after\nthe entry box and let's say that this is\na submit button so let's call this\nsubmit button equals button\nwhat are we adding this to writing the\nsquare window\nand we'll set some text text equals\nsubmit\nwe'll also need a command for this\nbutton\ncommand equals and we'll create a\nfunction called submit\nand we want to pack the submit button to\nadd it to the window\nsubmit button.pack\nall right now let's put our entry box on\nthe left hand side and our submit button\non the right hand side\nwhen you pack these widgets you can set\nthese on a certain side\nside equals left and our submit button\nwe want this on the right not necessary\nbut i think it looks better\nand we also need to define our submit\nfunction outside of the window\nlet's define what this does def submit\nwhat's this going to do we need to get\nthe current value that's within our\nentry box\none way in which we can do that is use\nthe entry boxes get\nfunction this will return a string and\nwe can do something with that string\nsuch as store this within a variable so\nlet's create a variable called maybe\nusername\nlet's pretend we're having a user submit\ntheir username to login to something i\nsuppose\nso we'll get the current value of the\nentry box\nstore that within a variable and we'll\ncall this username\nand then we will maybe print this for\nfun print\nhello plus user\nname and let's try this\nso here's our entry box here and our\nsubmit button i'm just going to make up\nsomething\nclick submit and it displays our message\nhello ergo gerger gerger\ni didn't say that this video was going\nto be professional let's add a few other\nbuttons\nlet's say we want a delete button as\nwell as a backspace button\nso let's copy what we have for our\nsubmit button and create a delete button\nand then a backspace button the delete\nbutton is a little bit easier to code\nso let's rename our submit button as\ndelete button\nmake sure to change the name to when you\npack this and the text\nwe will say delete and we'll create a\nfunction called\ndelete and let's define what delete does\nso after our submit function let's\ndefine\nour delete function and we need to\ndelete all of the text within our entry\nbox\none way in which we can do that is to\ntype in the name of our entry box\ndot delete function\nand this takes two positional arguments\nwhich portion of our entry box do we\nwant to delete\nso we want the very first character that\nis index\n0 followed by the last character and we\ncan say\nend so this will delete all of the\ncharacters\nwithin our entry box and let's try it so\ni'm just going to type in my name\nbro i'm going to delete this and all of\nthe text is now gone\njust like that let's create a backspace\nbutton we'll copy what we have for our\ndelete button and change\nthe word delete to backspace\nmake sure you change that when you pack\nthis as well and for the text we'll set\nthis to\nbackspace and we'll create a function\ncalled backspace\nand let's define what backspace does so\nafter\nour delete function let's define back\nspace and this is going to do something\nvery similar to our delete function\nexcept we're going to change the first\npositional argument\nwe need to place the second to last\ncharacter\nwithin this positional argument one way\nin which we can do that\nis to first get the entire length of all\nof the characters within our entry box\nso let's begin by typing entry dot\nget and we need to determine the length\nof this\nand we can surround this by placing this\nwithin the length function so this will\nreturn\nthe current length of all of the\ncharacters within our entry box\nand then we're going to add -1 so that\nthis\nfirst positional argument is the second\nto last character\nand the second positional argument is\nthe end the last character\nand then when we run this let's type in\nour name i'm just going to type in draw\ncode this time i'm going to click\nbackspace and then it's only going to\ndelete the last\ncharacter and then if you were to click\ndelete it deletes everything\nbroy and then if you click submit it's\ngoing to submit your name\nall right let's customize the appearance\nof this entry box\nso within the constructor for this entry\nbox\nlet's change maybe the color maybe the\nbackground color and foreground color\nlet's begin with the foreground color\nyou can pass in a color name or a hex\nvalue\ni want this to be green so the hex value\nfor that is\nzero zero f zero ff00 and the foreground\ncolor\nof the text when we type it in is now\ngreen\nand we can also change the background\ncolor that is bg\nwe could pass in a color name or a hex\nvalue i'm just going to say black to\nkeep it simple\nand we now have a black background and\nthe text color is now\ngreen here's a few useful features that\nyou might be interested in\nlet's insert some default text for our\nentry box\nso we can use the insert function entry\ndot insert\nwe place a positional argument as well\nas some text\nso for the positional argument let's say\nzero so that's the very beginning\nindex zero and let's set the text to\nmaybe\nspongebob and then the default text\nwithin our entry box is now\nspongebob another option available to us\nis that we can set the state\nof this entry box we can set this to\nactive or disabled\nlet's say that after somebody submits\nour name we want to disable\nthis entry box so we can either pass in\nthis option\nwithin our constructor or we can use the\nconfig function to make any changes\nto the state of our entry box so let's\nsay after we submit our username we want\nto disable this entry box\nso let's type in the name of our entry\nbox dot config\nand for the option for state let's set\nthis to\ndisabled and then once we type in a name\nand then click submit our entry box is\nnow disabled\nthere's also an option called show where\nyou can show a certain character in\nplace of the normal text on the screen\nso this would be useful for a password\nlet's say that we're typing in\na password but we don't want to display\nthe password on the screen\nwe can use the show option to show a\ncertain character in place\nof our text so you might see bullets or\nan asterisk\nso let's pretend that we're now typing\nin a password so we're going to set\nthe option for show and place a\ncharacter that we want to replace each\ncharacter with\nlet's say we want to only display\nasterisks when we type in\nsome characters and i'm going to type in\nthe word password\nbut it's only displaying asterisks now\nbut if i were to click submit\nit displays our text and i would say\nplain text instead of our hidden text\nbecause we're only showing\nwhatever character that we set so that's\nan option available to you as well\nwell everybody that's how to create an\nentry box in python you can submit\ninformation\nsuch as a username for example or even a\npassword if you set the\nshow option available to you if you want\na copy of all this code i'll post all of\nthis in the comments down below\nbut yeah that's some of the uses of the\nentry widget in python\nhey how's it going everybody two bro\nhere hope you're doing well and in this\nvideo i'm going to teach you guys how we\ncan create and customize our own\ncheck buttons in python so sit back\nrelax and enjoy the show\nall right my fellow bros in this video\nwe're going to be creating\nand customizing our own check buttons in\npython i sometimes refer to these as\ncheck boxes\nso in case i do that's what i'm\nreferring to as always we'll need a\nwindow\nwindow equals tk followed by window.main\nloop\nand let's call this button just check\nbutton and in order to create this check\nbutton\nwe type in the name of the check button\nequals\ncheck button and within the constructor\nwhat are we adding this check button to\nwe're adding this to our window\nand also within the constructor we can\nset the different options\nfor how we want to customize this check\nbutton let's begin with the text\ntext equals i agree\nto something and last but not least we\nneed to add\nthis check button to the window one way\nin which we can do that is\nto use the pack function of this widget\nso follow this with\ncheck button dot pack when we run this\nwe have our check button within our\nwindow\nand we can toggle this on or off right\nnow i'm agreeing to something\ni'm not sure what i'm agreeing to but\nhopefully it's not anything bad\nnow currently this doesn't do anything\nso we'll need to associate a variable\nwith this check button\nso we'll add that as an option variable\nequals and let's create a variable\ncalled x\nand we'll need to define this within the\nwindow so\nafter we create our instance of our\nwindow let's say\nx equals now with check buttons\nthey store a 1 or a 0 by default within\nour variable\nour variable that we call x so with\nx we're going to set this equal to a int\nvar if this were to return a string we\nwould say\nstring bar but normally by default this\nreturns a one\nor a zero and we can actually change\nthat using the on value\nand off value options so the on value\nis what's going to be stored within our\nvariable\nif it's toggled on so by default this is\none\nand the off value is the opposite this\nis what is stored within\nour variable if this is toggled off\nalright now let's have some fun with\nthis so let's associate a command with\nthis check button\ncommand equals and let's create a\nfunction called\nmaybe display and then let's define this\nbefore the window def display and we're\ngoing to check\nthe value of x to see if it's one\nor zero so within our display function\nwe're going to check to see\nif x and to get\nthe value of x we're going to use the\nget function\nso if x dot get is equal to one\nthat means that somebody clicked on the\ncheck box or toggled it on\nso if they check the check box\nor check the check button then they\nagree\nso print you agree\nif it's zero and we can do this with an\nelse statement\nelse print\nyou don't agree frowny face\nand let's test this theory so we have\nour\ncheck button when we click on this it's\nactually going to call\nour display function i agree to\nsomething and it says within our console\nwindow\nyou agree and if i were to toggle this\noff it says you don't agree\nlet's change the font of our check\nbutton so we'll add that as an option\nfont equals and we can pass in a font\nthat we want\ni'll say maybe ariel and then a size\nof 20 and now this should be readable\ni agree to something let's also color\nthis\nbecause well i like coloring let's begin\nwith the foreground color\nso that is fg for short fg equals\nand then we can pass in a color name or\na hex value\ni like hex values so i'm going to stick\nwith those i want a green\nforeground color so that is zero zero f\nzero zero but feel free to adjust these\nvalues however you want\nso our text should now be green that is\na\nvery bright green and it hurts my eyes\nso i'm also going to change the\nbackground\ncolor which is bg and i'm going to set\nthis to\nblack so we'll have green text on a\nblack background\nokay now when you click on this it\nflashes that's kind of annoying\nthat's the active foreground and active\nbackground\nif we click on this or hold this down\nthe color scheme switches to\nour active foreground slash background\nand we can change those too\nso i'm going to set those options active\nforeground i'm going to set this the\nsame as my foreground color\nand the active background will be the\nsame as\nour normal background so that's active\nbackground equals\nblack and this should no longer flash\nwhen we click on it\nnot too bad not too bad let's add some\npadding\npad x i'll set this to 25\nand pad y i'll set this to\n10. we have a little more padding around\nour check button one feature that's\navailable to us\nis that we can add an image next to our\ncheck button\ni downloaded an image of the python logo\nthat i want to add\nso we'll use the image option to add a\nphoto image\nto this check button but first we need\nto create a\nphoto image from our image file so\nwithin the window\nlet's call this python photo\nbut you'll probably use something\ndifferent for your project\npython photo equals photo\nimage and within the constructor for our\nphoto image\nwe can set the file path or the file\nname\nsince this image is within my project\nfolder i only have to list the file name\nand this photo of mine is python.png\nand now we set the image equal to\nour photo image that we have image\nequals\npython photo but when we run this\nit's going to overlap the text we still\nhave our image though\nand this still works as intended so in\norder to display\nthe image as well as the text we're\ngoing to need to use the compound\noption and let's add that at the end\ncompound\nis where we're adding this photo\nrelative to the text\ni want this photo on the left hand side\nof the text\nso i'm going to set this to left and now\nwhen we run this\nsurprise surprise our image is on the\nleft hand side\none thing that you should know is that\nwith the on value and the off value data\ntype if you were to change this\nto a non-integer value let's say we're\ngoing to replace the on value with a\nboolean value of true and the off value\nis false with this variable make sure to\nchange the data type as well to reflect\nwhat you're storing within\nit so with our int var variable we want\nto change this to a\nboolean var value so replace int\nwith boolean and this will work much the\nsame\nnow with this display function we'll\nneed to account for that\nso within the if statement here we'll\nsay if x\ndot get we don't need to say is equal to\none\nthis will return true or false and this\nwill work\njust the same as it did before and if\nyou replace this with a string\nlet's say the on value is\nyes all caps and the off value is\nno this is now a string bar\nand we'll change our display function to\nsay if x\ndot get is equal to yes\nand this should work you agree you don't\nagree you agree\nyou don't agree and i'll change that\nback to one so\none and zero is the default for this but\nyou can edit these based on what you\nneed\nall right so that's the basics of check\nbuttons in python if you want a copy of\nall this code\ni'll post all of this in the comments\ndown below but yeah that's the basics of\ncheck buttons in python hey what's going\non everybody it's your bro here hope\nyou're doing well and in this video i'm\ngoing to be teaching you guys how we can\ncreate radio buttons in python so sit\nback\nrelax and enjoy the show\nokay everybody let's create some radio\nbuttons now these are similar to check\nboxes but you can only select one from\nany single grouping\nso let's pretend that i'm buying you\nlunch and you can only select\none item from a menu you can select\neither a\nslice of pizza a hamburger or a hot dog\nso let's begin by creating a list i will\ncall this list\nfood food equals\npizza hamburger\nhot dog and let's create a window\nwindow equals tk followed by\nwindow dot main loop\nso to create a radio button we'll need a\nname so i'll call this radio button\nradio button equals radio button\nand we're going to be adding this to our\nwindow and we're going to put this\nwithin\na for loop so we're going to iterate\nthrough all of the items within our list\nso let's create a for loop so we'll say\nfor\nindex in range\nlength of food\nso this is going to iterate once through\nall of the elements within our list\nso when we run this it's going to create\nthree\nradio buttons for us because we're\ninstantiating\none radio button for each item in the\nlist\nnow what i'm going to do is set the text\nequal to\nour list of food at a certain index\nso when we first run this for loop it's\ngoing to be zero for the index\nthen one and then two and then so on and\nso forth for each item within our list\nand then we just need to pack this so\nradio\nbutton dot pack\nand then let's take a look at this\nalright so here are all of the radio\nbuttons that we have\ncurrently they're all selected though so\nwe'll need to link these within a single\ngrouping\nthe next thing we'll add is a variable\nand we'll set this equal to\nx and we'll need to declare this after\nwe create an instance of our window\nso x equals int var\nso this will hold an integer object\nso these are all within the same\ngrouping\nhowever if we try to run this again and\nselect one of these options\nthey all become selected so we're going\nto need to give\neach of these individual radio buttons\ntheir own\nvalue because right now they're all\nsharing the same value\nso we can add value equals\nwhatever the index is currently so the\nfirst\nitem within our list of food is going to\nhave an\nindex value of zero then one\nthen two so let's try that again and you\ncan see by default it's\nzero so pizza is already selected then\nwe can select either hamburger or hot\ndog\nbut we can only select one so that's\nkind of what we want then\nso do you guys usually know how i call\nthe config function after each change\nthat i make for an object\nwell that's because i like to add\ncomments just for teaching purposes\nfor what each change does however it\nmight be easier for you instead of\ncalling the config function a bunch of\ntimes\njust to list all of the changes within\nthe parentheses when you create an\ninstance of the\nobject that you're working with however\njust for teaching purposes i'm going to\nput this all within\nseparate lines that allows me to add\nsome comments\nso i think i'm going to start doing that\nfrom now on uh so what this does\nis that this adds text to\nradio buttons and this\ngroups radio buttons together\nif they share the same variable\nso if you wanted a completely different\ngrouping of radio buttons you can give\nthem a different variable\nlike y and what this line does\nis that this assigns\neach radio button a\ndifferent value\nall right so let's make some cosmetic\nchanges to our radio buttons\nso right now they are centered let's\nanchor these to the west\nso we'll place this within the pack\nfunction so\nanchor equals w alternatively you can\njust say capital w\nwithout the quotes this would also work\ntoo\nso now they're all lined up let's add\nsome padding\nso i'm going to add pad x\nand i'll set this to 25\nand this adds\npadding on x\naxis\nlet's also change the font\nso we'll save font\nequals maybe i'll pick impact for a font\nstyle\nand set the font size to 50\nand now we can actually read these\nbecause the font is large enough\nnow let's add some images so let's\ncreate some photo images\nyou'll want to be sure to create these\nafter you create your instance of your\nwindow\nso let's create a pizza image first\npizza image\nequals photo image\nfile equals the file path or the file\nname\nand my file is pizza.png and it kind of\nlooks like this\nit's just the pizza emoji so\npizza.png\nand then i'll do the same thing for\nhamburger and hotdog\nso this will be hamburger image\nfile equals hamburger.png\nand then hotdog image\nand this is what the other emojis look\nlike\nand then let's create a list of the\nphoto images that we have\ni'll call this food images\nequals than the names of these images\npizza image hamburger image\nand hot dog image\nso then we can set the image for each\nradio button\nimage equals\nthe name of the list food images\nfollowed by\nthe index that we're currently on within\nour for loop\nso this adds image\nto radio button and\nlet's test this cool here's our images\nnow if you want some images as well as\ntext you'll have to use compound\nso let's add that next so i'm just going\nto add a comma\nfollowed by compound\nequals let's say left so this will add\nthe image\nto the left of the text\nadds image and text i'll just say left\nside\nso this will display both an image and\ntext\nso with these radio buttons you can\neliminate these\ncircle indicators and there's actually a\nway to do that\nso what we'll add if you want to get rid\nof those\nis indicator\non equals zero\nso this will i should say eliminate\ncircle indicators\nso it's going to change these to these\npush buttons\nhowever they are going to be of uneven\nsize you can set the width\nif you want to so we'll do that\nso we'll say width equals\nwhat about 75 i'm not sure if that's a\ngood size or not\nokay that's way too small let's try 375\nso yeah you can have some push buttons\nif you want to if you don't like the\ncircle indicators\nso this sets width\nof radio buttons\nnow let's actually set a function to\nuh be called when we click one of these\nbuttons\nso let's call this function maybe order\nlike we're ordering one of these items\nso def we'll call this order like we're\nordering something\nand what we'll do is just a few if\nstatements because i'm feeling lazy\nso we'll just say if x that's\nthe value that's going to be stored\nbecause each of these radio buttons is\ngrouped together by the variable x\nif x dot get\nis equal to zero that's our first index\nfor pizza what we'll display is\nprint you\noops you ordered\npizza then we'll just add\nelse if x dot get\nis equal to one we will print\nyou ordered a hamburger\nand then else if two\nyou ordered a hot dog\nelse\nprint huh\nso there's probably a more efficient way\nto write this however\ni was just feeling lazy and this is\nprobably the best way to keep this\nsimple and easy to understand\nso let's try this now oh however we need\nto set the command\nfor our radio buttons so\ncommand equals then the\nfunction name which is order and make\nsure you do not add the parentheses\nso don't do this do that\nand this will set\ncommand of\nradio button to function\nall right let's test this so if we click\non pizza it says you ordered pizza\nyou ordered a hamburger and you ordered\na hot dog\nokay everybody so that's the basics of\nradio buttons if you would like a copy\nof all this code i'll post all of this\nin the comments down below\nbut yeah that's the basics of radio\nbuttons in python\nhey what's going on everybody it's you\nbro here hope you're doing well and in\nthis video i'm going to teach you guys\nhow we can create\na sliding scale in python so sit back\nrelax and enjoy the show\nlet's create a scale so we'll need a\nwindow window equals tk\nfollowed by window.mainloop we'll create\na scale\ncalled scale scale equals scale\nwe need to add the scale to our window\nso we'll put that here\nwe can list a from position and a 2\nposition\nboth of these values will be our range\nof values that we can use\nfor our scale so from\nsure to add an underscore after from it\nwon't work without this underscore\nfrom equals let's say 0 and 2 equals 100\nso we're going to create a scale for\ntemperature\nand this will be in celsius so 0 will be\nfreezing and 100 will be the boiling\npoint uh you know for water\nso then to display the scale we'll need\nto add\nscale.pack and let's run this\nso the front position is zero so that's\nat the top here and then if you go down\nit increases so you can actually flip\nthis so we'll save from\n102 will be zero\nso now you can scroll up and the number\nwill increase\nlet's also get the current value so\nwe'll need a button\nso button equals button\nwe'll add this to the window we'll add\nsome text\ntext equals submit and then a command\ncommand equals submit but we'll have to\nmake this function\nso let's do that outside the window def\nsubmit and we will simply print the\ncurrent temperature\nso let's display message the temperature\nis plus\nscale dot get\nplus degrees\ncelsius we can just say degree c\nso let's try this uh but we also have to\npack the button so button.pack\nso if we were to try and submit this\nright now scale.get is going to return\nan integer\nso we need to convert this to a string\nso\nstr scale.get\nand you have to do that with python if\nyou're displaying a\ninteger value along with another string\nuh you need to convert it to a string\nso now this should work so it is 82\ndegrees celsius\nso let's do some cosmetic changes for\nour temperature gauge\nbecause right now it's kind of ugly\nso the first thing we'll change is\nlet's say the length so length equals\n600 so that should be fairly large\nyou can also set the orientation so that\nis\norient spelt like that\nso this can either be vertical which it\ncurrently is\nor horizontal\nbut i'll keep this as vertical\nso i'll let a comment that this is\norientation\nof scale let's also change the\nfont so font equals\npick whatever font you want\nand a size so maybe 20.\nnow you can add some tick intervals\nmaybe i'll set this to 10. so these will\nbe\nnumeric indicators on the scale\nand show value this hides the current\nvalue\nso if you set this to zero this will\nhide\ncurrent value\nso it no longer displays what the\ncurrent value is next to the slider\nto actually retrieve it you'd have to\nget the value\nso right now it's 40 but it helps that\nyou have the tick intervals on the\nleft-hand side\ni should probably add that this adds\nuh numeric\nindicators for\nvalue good enough let's continue on\nnow let's use the set function we can\nset the current value of the knob\non our scale and by default it is zero\nso we can use the scale\ndot set function and we can place a\nnumber in here\na value so let's say we want this to be\n100\nso this is now at the 100 position\ninstead of zero\nif we wanted this in the middle we could\nset this to 50\nand now it's in the middle however if\nyou change the\nrange of your skill of from minus 2\nand set this to 50 now 50 is all the way\ndown here so it no longer appears in the\nmiddle\nso this isn't really necessary but if\nyou want this to be a little more\nsophisticated\nthere's actually a formula that you\ncould use we can use scale\nstraight braces and then place the word\nfrom\nwithin here this will give us our max\nbasically\nuh so this is from without an underscore\nso this not this this\nscale from minus scale\ntwo and then we're going to divide this\nby two\nand then i'm just going to put this\nwithin a extra set of parentheses\nplus scale two just in case\nour two value is greater than zero\nwe just want to account for that and\nthen i'm just going to\nput these within another set of\nparentheses so\nthis should always appear in the middle\nthen even if we were to change this\nrange\nyeah it seems like it works uh like i\nsaid it's not really necessary but\nif you want this to be a little more\nsophisticated that would work\nnow let's make some cosmetic changes to\nthis scale and make it look pretty\nso first let's change the trough color\nthis is this gray portion right here\nso let's set the trough color\nequals whatever color you want you could\nsay like blue\nor you can place a hex value here and i\nactually picked one out already\nso i'm going to use 6 9 e\na f f and that is this icy blue color\nkind of like this is sliding on ice\nand i'm also going to change the font\ncolor\nand i'm going to pick this fiery red\ncolor\nto symbolize heat\nand then you can change the background\ncolor too\nso that is bg and i'll just set this to\nlike black\nit's looking kind of cool now right and\nfor no good reason i'm going to add some\npictures\nso feel free to pause the video if you'd\nlike to download some images i'm going\nto use an image of a flame\nfor the hot side of our scale and a\nsnowflake\nfor the cold side so let's begin by\nadding the hot image uh to the scale\nbefore we actually\nadd the scale to the window so we'll do\nthis after we instantiate the window\nbecause that's the only place that we\ncan do that\nso we're going to create a image i'll\njust call this hot image\nfor the fire icon so hot image equals\nphoto image file\nequals this is hot.png so\nhot.png we're going to add the image to\na label\ni'll call this hot label hot label\nlabel image equals\nhot image and then we need to pack this\nso hot label dot pack\nand this should appear at the top let's\ntest it\nyep there it is let's do the same thing\nfor the cold side\nso i'll add this here before the button\nand i'm going to replace hot with cold\nsame thing with the file name\ncold.png\nthis will be cold label cold\nimage and cold label dot pack\nand that should be it let's take a look\nnot too shabby it's looking pretty sweet\nit has our submit button at the bottom\ntoo uh so\nright now the temperature is 100 degrees\ncelsius\nthe temperature is 0 degrees celsius the\ntemperature is 60 degrees celsius\nwell that's how to create a scale in\npython if you would like a copy of all\nthis code i'll post all of this in the\ncomments down below\nbut yeah that's how to create a scale in\npython\nhey what's going on everybody it's your\nbro here hope you're doing well and in\nthis video i'm going to teach you guys\nhow we can create a list box in python\nso\nsit back relax and enjoy the show\nall right you wonderful people let's\ncreate a list box a list box\nis a listing of selectable text items\nwithin its own container\nso as always we'll need a window window\nequals tk\nfollowed by window dot main loop let's\ncreate a list box\nsimply called list box big surprise\nthere right\nso list box equals list box what are we\nadding this list box to\nwe're going to place that here within\nthe parentheses of the constructor\nwe're adding this to our window and then\nwe're going to follow this with\nlistbox.pack you can also do\nlistbox.place as well and place some\ncoordinates but\nwe've always done pack let's just stick\nwith that for now all right so this is\nwhat our list box looks like\nit's a small rectangular box and we're\ngoing to add some text items that are\nselectable\nand eventually we'll be able to submit a\nchoice so i have an idea\nlet's create an online menu like we're\nordering food from a restaurant\nlet's say it's bros italian restaurant\nso let's add some food items to our menu\nand somebody can submit an order so\nwe'll need to use the\ninsert function of the list box to add\nsome items so\nlist box dot insert we place\nan index and a text item so let's say\nfor\nindex one we'll have pizza\nand this is what we end up with we have\nthe item pizza\nit's selectable and well that's really\nit we'll need to create a submit button\nand populate the rest of this list box\nso let's add a few other items for our\nmenu so let's say we'll have five items\nand we need an index for each so one two\nthree four and five so we have\npizza for the first item for the second\nitem let's have pasta\nand third let's say garlic bread because\ngarlic bread\nis awesome and restaurants usually have\nappetizers so why not soup and salad\nand that should be enough for this\nexample\nand this is what we have we have our\nmenu and we can select\nan item from this menu so let's\ncustomize the appearance of this menu\nwell because we can so let's do that\nlet's change the background color so we\ndo that with the option\nbg for background and you can set this\nequal to a color of your choice\nor a hex value so i have a hex color\nvalue already picked out\nit is f7fde and this has the appearance\nof i would say\npaper like it's kind of faded i think\nthat would fit some sort\nof menu for a restaurant but pick\nwhatever background color you want\nso let's change the font next so we can\ndo that with the option font\nand i will pick the font\nit's somewhat fancy i think it would fit\nlike a restaurant menu\nand then a size of 35.\nyeah we're getting somewhere we can also\nchange the width and the height\nso width equals let's say 12.\nthat's not too bad for a width let's\nalso change the height\nso we can do that with a function\nof our list box so let's get the current\nsize of the list box\nand let's actually do that after we\ninsert all of the items within our list\nbox\nso to change the size of our list box\nwhat we do\nis type in list box\ndot config you usually use config if you\nneed to change any uh\noptions and we want to change the\nlength of or the height of this list box\nso we're going to say height equals\nlist box dot\nsize function so then this will adjust\nthe size\nof our list box dynamically even if we\nwere to remove an item\nthen the size of our list box is going\nto shrink\njust like that but let's keep salad in\nthere for now because we need salad\nall right so how do we actually submit\none of these options we'll need to\ncreate a submit button\nso let's do that after we create our\nlist box so near the bottom\nwe'll call this submit button\nsubmit button equals button we're adding\nthis to our window\nlet's set the text to submit\nand we'll need a command so we'll create\na function called\nsubmit and then we need to pack\nthis submit button\nsubmit button.pack now at the top of\nthis program\nlet's create a submit function\nso at the top def submit\nso to retrieve or get the current\nselected item\nof a list box there is a certain\nfunction that you can use\nso we'll begin by saying\nlist box dot get\nwhat are we getting we want to get\nanything that is currently selected and\nthere is a function\nfor that so what we're going to do\nwithin the parentheses of the get\nfunction is type in\nlistbox dot current selection\nit's shortened to cur selection all\nright and then we can either store this\nwithin a variable or we can just print\nthis but i think we'll just print this\nto keep it simple\nnow when we select an item and\nclick on the submit button it's going to\nsubmit our order\nactually better yet let's actually uh\nprint you have\nordered whatever item that\nwe select so garlic bread you have\nordered garlic bread\ncool what we're going to work on now is\na way to submit\nor insert an item to our list box after\nthis program is compiled and already\nrunning\nso we'll create an entry box within our\nwindow\nwhere we can submit a custom item to\nthis menu\nso let's create an entry box and let's\ndo that before the submit button that\nwould be a good spot for this\nso let's call this entry box where\nsomebody can\ntype in something to add to the menu so\nentry box equals entry and we're adding\nthis\nto our window and then entry box\ndot pack then we're going to create a\nbutton\ncalled add and i'm just going to copy\neverything from the\nsubmit button and we'll change submit to\nadd\nwe're going to add an item to the menu\nso we'll change the text\nto add and command add\nadd button dot pack then we're going to\ncreate\na function called add and we'll do that\nat the top\ndef add parentheses\ncolon so to add an item to the list box\nfirst we need to\nget what is currently in the entry box\nso we can do that by typing in\nlist box dot insert\nthen within the parentheses we need to\nget\nan index number as well as\na text item so for the number what we\ncan type here\nis the listbox dot size\nso this will give us the current\nposition of the\nindex that we're currently on for the\nlist box and then we need to get the\ntext\nin the entry box so we type in the name\nof the entry box\nentry box dot get\nand this will insert a new item within\nour menu our list box so let's try it\nagain\nso we can type in an item let's say soda\nwe want to add soda to the menu\nand then we click add all right there's\nour soda but we have to scroll down to\nsee it\nso let's change the size of our list box\nso there's actually a line of code that\nwe did that already\nlistbox.config height equals listbox\nsize so let's add that within the add\nfunction at the very end\nso then the height of our list box will\nadjust\nso currently there's no soda within our\nmenu let's type in soda\nor some other item click add and then\nthat item will appear and the size of\nthe list box will change to accommodate\nany new items\nlet's say now that we serve sushi we're\nnow an italian\nand japanese restaurant now we have\nsushi on the menu\nyou know what why stop there let's\ncreate a delete button to delete an item\nfrom this menu\nso we'll create a delete button\ni'll just copy everything for add and\nchange this to\ndelete so delete button text equals\ndelete\ncommand equals delete as well and\ndelete button dot pack and then at the\nvery top we'll create a delete\nfunction so we'll do that here\nd e f delete\nand to delete an item from a list box\nthere's actually a function to do that\nso\nlist box dot delete\nand then within the parenthesis of the\ndelete function we can pass\nin list box dot current selection or\njust\ncur selection for short and then we want\nto\nreadjust the height of this list box\nafter we delete an item\nso we'll just add listbox.config height\nequals listbox.size because the size\nof all the items within the list box is\ngoing to shrink after we delete an item\nso let's try this so here's our menu\nlet's say we no longer want salad\nbecause salad is healthy well we can\ndelete it\nsame thing with soup and you know what\nlet's also delete the\npasta and the pizza so we're only left\nwith sweet sweet garlic bread\nwell ladies and gentlemen we're going to\nget into some more advanced stuff with\nlist boxes\nwhat if you want to select more than one\nitem from this list box\nwe're going to need to change a few\nthings so when we create our list box\nthere is a select mode select mode\nand we are going to set this equal to\nmultiple\nso now we can actually select multiple\nitems\nfrom this list box like i want to select\none of everything\nbut what happens when we submit this\nwell we're going to run into some\nproblems so we're going to need to\nchange this program around\nso let's begin with the submit option so\nwhat we're going to do within the submit\noption\nis first get rid of this line let's say\nwe\nno longer need this anymore uh and then\nbefore we print out the items that we\nordered\nlet's create a list called food\nand we'll just leave this empty for now\nwe'll fill this later\nso we'll create a for loop for index\nin list box\ndot current selection\nwhat we're going to do after each\niteration\nfood dot insert\nour index number as well as\nlistbox dot get\nthe item name at this index what this\nfor loop is doing is that it's going to\niterate once for each item that we\nselect\nso since we have three items that are\ncurrently selected this is going to\niterate three times\nget the index number as well as the item\nat that index number\nand now we just need to display the\ncontents of what we have\nwithin our list of food so we can do\nthat with\nanother for loop so let's add that after\nyou have ordered\nthen for\nindex in our list\nfood all we'll do is print\nindex so this will print out everything\nthat we ordered\nso let's say that we want one of\neverything and submit this\nyou have ordered pizza pasta garlic\nbread soup and salad\nnow what happens if we try to delete\nmultiple items\nso let's say we want to delete soup and\nsalad and we click delete\nwell we're going to run into an error\nbecause our function is not set up to\naccommodate for\nmultiple items so we'll need to change a\nfew things around so let's get rid of\nthis line for now\nlist box dot delete list box dot current\nselection\nand we're going to place a for loop here\nso for\nindex in list box\ndot current selection then after each\niteration\nwhat we're going to do is use list box\ndot\ndelete and we're deleting the item at\nwhatever index we're currently on so you\nwould think this would work\nat first glance let's say we want to\ndelete pizza and pasta\nwe're going to click delete so pizza was\ndeleted but not\npasta that's because the indexes are\nchanging\nafter we delete an item so when we use\nthis for loop\nwe should actually reverse this so with\nlistbox.currentselection\nwe are going to enclose this with\nreversed\nso then we're going to start at the last\nindex and work our way to zero\nin that order so now if we want to\ndelete\npizza and pasta i don't know why we\nwould because\nthey're amazing and we click delete it\ndeletes\npizza and pasta but we still have garlic\nbread soup and salad then we can add an\nitem\nlet's say we want to add sushi against\nthe menu we can do that\nand then we can order one of everything\nbecause we're really hungry\nyou have ordered garlic bread soup salad\nand sushi\nso that's the basics of creating a list\nbox in python if you want a copy of all\nthis code\ni'll post all of this in the comments\ndown below but yeah that's the basics\nof list boxes in python\nhey what's going on everybody it's your\nbro here hope you're doing well and in\nthis video i'm going to teach you guys\nhow we can create\nmessage boxes in python so sit back\nrelax and enjoy the show\nokay people let's create some message\nboxes but first we'll need an import so\nfrom\ntk enter import\nmessage box and what this will do\nis import the message box\nlibrary so it's not necessary to add\nthis comment uh so we'll need a window\nwindow equals tk followed by window\ndot main loop let's create a button\nso button equals button we're going to\nadd this to the window\nwe're going to set the command to\nexecute a\nclick function that will have a message\nbox appear when we click on the button\nand let's set the text so text equals\nclick me and then we will need to pack\nthis button\nso button.pack now we'll need to create\na click function\nso let's do that at the top def\nclick and what do we want to do\nso there's a few different uh message\ndialog boxes that you can use\nso let's begin with a basic show info\nmessage box\nso message box dot and there's a few\noptions\nlet's begin with show info show\ninfo this just displays a simple message\nso if we were to run this we have a\nbutton we click on the button and it's\ngoing to create a message box for us\nand it just shows some info but we don't\nreally have any info to show yet\nso we can set a title and we can set a\nmessage\nso let's set the title title equals\nthis is an info\nmessage box\nalthough part of the title got cut off\nlet's also set the message message\nequals\nyou are a person\nclick me you are a person thanks i\ndidn't know that so there's a few other\nmessage boxes that we can use too\nso for now i'm just going to turn this\ninto a comment and i'll just copy this\njust to save some time\nand the next one that we have is\nshow warning\nso this will have a different icon so\nthe title\nlet's say warning and the message\nyou have a virus\nso now we get this annoying warning\nmessage but you can just click ok to get\nrid of it\nso one thing that you might see with\ntech support scams\nthey'll have a message box like this\nthat shows a warning\nbut they'll put this within a while loop\nthat's set to true\nso this will just continue on and on\nkind of like this so if we were to try\nand close out of this\nit's just going to reappear while\ntrue is true basically so that's just\nsomething funny that i wanted to show\nyou\nso let's move on i'm going to turn this\ninto a comment\nthen the next one we have is show error\nso show error\ntitle set it to whatever you want\nerror message\nsomething went wrong\nthere's a few more sophisticated ones\ntoo we can ask for some user input\nso this next one is message box\ndot ask and there's a few to choose from\nlet's go with ask okay cancel first\nwe'll set the title title equals\nask okay cancel\nand a message message\ndo you want to\ndo the thing\nso we can actually put this within an if\nstatement\nso this returns either true or false\ndepending on what you click\nso let's put this within an if statement\nif this is true\nprint you did\na thing\nif it returns false we can use an else\nstatement\nelse what else do we want to do we'll\nsay else\nprint you\ncancelled a thing\nand let's test this\nbut i am forgetting a colon there\ndo you want to do the thing okay you did\na thing\nlet's try it again do you want to do the\nthing\ncancel you cancelled a thing cool\nthere's a few others\nso i'll turn all of these into comments\nand the next one we can go over is ask\nretry cancel\nand this is fairly similar to what we\nhad before i'm going to copy this\nlet's change this to ask\nretry cancel ask retry\ncancel do you want to\nretry the thing\nyou retried a thing\nor you cancelled a thing so it's very\nsimilar to what we had before\ndo you want to retry the thing retry you\nretried a thing\nand cancel you cancelled a thing\nokay the next one we have is ask yes\nno so we can get some user input\nif it's a yes or a no\nso this returns a boolean value a true\nor false\nvalue so message box\ndot ask\nyes no\nand we'll set the title title equals\nask yes or no\nand a message\ndo you like\ncake\nso let's put this within an if statement\nbecause this returns\na true or false answer print\ni like cake too\nelse they answered no then if this is\nfalse\nprint why do you\nnot like cake\nand i'm missing a colon there we go\nso if they click yes this returns true\nand we execute this line of code i like\ncake\ntoo if they answer no it's going to\nexecute this\nelse statement do you like cake no why\ndo you not like\ncake now what we have next is ask\nquestion and this doesn't return a\nboolean value of true or false\nit actually returns a string of yes or\nno\nso this is message box\ndot ask question\nand we'll set the title to ask\nquestion and a message\nmessage equals do\nyou like pi\nso let's just print the result what this\nreturns\nso print everything within here\nso like i said this doesn't return it\ntrue or false\nbut yes or no\nso what we could do is assign the\nresponse to\na variable such as answer\nso answer equals whatever the answer is\nwhatever they\nclick whatever button they click on so\nif\nour answer is equal to yes\nwill print a message print\ni like pie 2.\nthen else the answer is no\nwill print why do you\nnot like pie\nso do you like pie yes i like pie too do\nyou like pie\nno why do you not like pie\nso this next one is probably the most\ndifficult\nit's ask yes no cancel\nso it's message box dot\nask yes no cancel\nit's this last one so let's set the\ntitle\ntitle equals whatever you want yes\nno cancel and a message message\nequals do you\nlike to code\nso let's just print the results what\nthis returns\nso print everything just so we can take\na look\nso the possible answers are\ntrue false\nor none so we can just run some if\nstatements for this\nso if\nanswer is equal to true\nwhat we can do is print\nyou like to code\noh but we need to assign this to an\nanswer so answer\nequals all of this\nelse if\nanswer is equal to false\nlet's print then\nwhy are you watching a video\non coding\nand then else the response is none so we\ncan just use an\nelse statement so else\nyou have dodged the question\nokay let's try this\ndo you like to code yes you like to code\nuh but this should really be a smiley\nface right\ndo you like to code no then why are you\nwatching a video on coding\ndo you like to code cancel you have\ndodged the question\nno one other option available to you is\nthat you can change the icon that you're\nusing\nso let's say that we want to change this\nicon so right now it is currently\nthis question mark so we can set this to\none\nof a few preset icons so icon\nequals and let's set this to warning\nso instead of that question mark we get\nthis yellow exclamation point\nand you can also use info\nit's just an eye and error\nso do it fits best for you all right\nwell\nthat's the basics on message boxes in\npython if you'd like a copy of all this\ncode\ni'll post all of this in the comments\ndown below but yeah that's the basics of\nmessage boxes in python hey what's going\non everybody it's your bro here hope\nyou're doing well and in this video i'm\ngoing to teach you guys about the color\nchooser module in python so\nsit back relax and enjoy the show\nokay everybody so before we begin it\nwe'll need a second import so let's add\nthis at the top\nso from tk enter import\ncolor chooser and the reason that we\nneed a second import and it's not\nincluded with this first import\nis because this is a sub module\nit's not necessary to add this comment i\njust like to add comments for teaching\npurposes\nso make sure you have these two imports\nbefore we begin\nnow we'll need a window and a button\nthat we can add to the window\nand when we click on the button we're\ngoing to select a color and change the\nbackground color\nof the window so let's create a window\nwindow equals tk followed by window.main\nloop and then let's set the geometry so\nwe're going to change\nthe background color of the window after\nwe select a color\nso let's select a fairly large size for\na window\nmaybe 420 by 420 so this is the width\nand the height\nand then let's create a button so button\nequals button\nlet's set some text text equals\nclick me and we're going to\nset a command for this button that is\ncalled so we're going to create a\nfunction maybe called click\nand then we just need to pack this\nbutton so we can add this to the window\nso button.pack\nnow we're going to need to create a\nfunction and we'll call it click\nso when we click on the button this\nfunction is going to be called\nso def click and what do we want to do\nafter clicking this button\nwhat we're going to do is take color\nchooser and we're going to use the ask\ncolor function so currently this is what\nthis does\nwe can select a color after clicking\nthis button and pick whatever color you\nwant\nthen you hit ok however we need to store\nthis color within\nlet's say a variable so we'll create a\nvariable called color color equals\ncolor chooser dot ask color and then we\ncan do something with this color\nbut for now let's just print this color\njust to take a look to see what it\ncontains\nso print color\nso let's say that i want this green\ncolor\nclick ok this is what this prints this\nis our color\nso this is the rgb values that we have\nin this\nfirst element so this is the amount of\nred\nthen green and then blue and the second\nelement\nis the hexadecimal representation of\nthese values\nso what we want is this hexadecimal\nvalue\nso what we can do is create a second\nvariable to store this\nso let's just call this color hex\ncolor hex equals color\nand we're going to get the first element\nwell technically it's the second element\nbut it's the\nelement at position one so this one\nthis is zero index zero so we're going\nto\nbasically extract this hexadecimal value\nand let's just print this\njust to be sure that it's working fine\nso print color\nhex and let's try this again but select\na different color\nuh maybe i want this purple color then\nclick ok\nso this is cb42ff\nand here we have cb42ff\nnow let's change the background color so\nsince we have this hex value that's\nactually fairly simple\nso we're going to take window dot config\nbg for background color equals\ncolor hex\nand this will change background\ncolor\nand let's set this to a sky blue color\nmaybe like this click ok and it changes\nthe color\nhowever it's not really necessary to\ncontinue printing these values you can\ntake these out if you want\nand this would work like just the same\nthen\nnow this part isn't necessary but if you\nwant\nyou can condense these three lines of\ncode that we have for our click function\ninto less lines of code so what you\ncould do\ninstead of assigning the value of color\nat index 1\nto a separate variable we can take color\nat index 1\nget rid of this line and assign bg\nequals color\nat index one so now this is done with\njust\ntwo lines of code and why stop there we\ncan write this with just\none line of code so now we're going to\ntake color chooser dot ask\ncolor get rid of this line bg equals\ncolor chooser dot ask color at index\none and now this is done\nwith just one line of code however it's\na\ni would say a little more difficult to\nteach\nso that's why i kind of like to separate\nthis line by line\nso if you want you can condense all of\nthis into just one line of code\nso here's some ideas of where the color\nchooser sub module could be helpful\nso of course you can change the\nbackground color too but let's say that\nyou're creating a game and you can\ncustomize your character or avatar\nwell it would be kind of nice if you\ncould have some way for the user to\nactually change maybe the character's\nhair color eye color something like this\nwould actually work fairly well\nso yeah that's the basics of color\nchooser if you'd like a copy of all this\ncode\ni'll post this in the comments down\nbelow but that's the basics of\ncolor chooser in python hey what's going\non everybody it's bro here hope you're\ndoing well and in this video i'm going\nto teach you guys how we can create a\ntext area in python so sit back relax\nand enjoy the show\nall right my fellow bros let's discuss\nthe text\nwidget this functions like a text area\nyou can enter multiple lines of text i'm\nnot sure why\nit's called a text widget instead of a\ntext area widget text area would make\nmore sense\nbut idk though so let's begin by\ncreating a window\nwindow equals tk followed by window.main\nloop\nso to create a text widget also known as\na text area\nlet's call this text text equals text\nand we're going to add this text to our\nwindow and then we need to\npack this text text dot pack\nso we should have a text area\nand you can enter in\nstuff like this\nall right but what good is a text area\nif you can't actually submit\nsome text so let's create a button to do\nthat for us\nso button equals button\nwe're going to add this button to the\nwindow\nand button dot pack\nso we need a command for this button\nand a function as well so let's create a\nfunction called submit it's going to be\na submit button\nand let's change the text to because we\ncan\ntext equals submit\ncool now let's create a function called\nsubmit\nand we'll do this at the top d e f\nsubmit\nand what is this going to do well it's\ngoing to\nget the text from the text area and\nlet's assign this to a variable and we\ncan call this maybe input or\nwhatever you want so to get the text\nfrom the text area\nlet's say text that's the name of this\ntext\narea dot get but we need\na starting index as well as an ending\nindex\nso we're going to place 1.0 here\nfor the beginning index this is the\nfirst line\nwe want to get everything so for the\nsecond index we can just put\nend then we can do anything we want with\nthis input so let's just print this to\nthe console window\nso print input\nand this should work\nhey you drink plenty\nof water love you\nand click submit and then you can do\nwhatever you want with this\ninput well that's how a text area\nfunctions but now let's customize the\nappearance of this text area and i have\na few ideas that you might be interested\nin\nso let's change the background color of\nthis text area\nso bg equals and i will pick\nlight yellow and you will see why in\njust a second\nso now this text area kind of resembles\nmaybe a piece of paper\na notebook a post-it note however\nthis font is really small so let's\nchange the font\nstyling and the font size so\nfont equals and i will pick the font\nink free this somewhat resembles\nhandwriting so\ni kind of like this and it kind of fits\nour notebook theme\nand then a size maybe 25. one thing you\nshould know\nthe text area size corresponds directly\nwith\nthe font size so 25 is a fairly\nlarge font so if we were to compile this\nand run this\nthe size of our text area is now massive\nbecause it corresponds directly with the\nfont size\nso we might want to limit the width and\nthe height\nso the height is the amount of\ncharacters that this is tall\nso let's say 8 and the width is the\namount of characters\nthat this is long and let's say 20.\nand now this should be much smaller and\nit kind of resembles a post-it note\nwhich is kind of cool let's also change\nthe amount of padding that we have\nwe can do that with pad x and pad y so\npad x\nlet's say 20 and pad\ny also 20. so the text shouldn't\nactually touch any of the borders\nthis is some sample\ntext cool let's finish this by changing\nthe font color so that is\nfg for foreground foreground equals\nand i'll pick purple because purple is a\npretty color\nand let's run this one last time\nroses are red\nviolets are blue\nbooty booty booty booty\nrockin everywhere\nwell that's the basics of the text\nwidget in python if you would like a\ncopy of all this code\ni'll post all of this in the comments\ndown below but yeah that's the basics of\nthe text widget in python\nhey what's going on everybody it's your\nbro here hope you're doing well and in\nthis video i'm going to teach you guys\nhow we can use a file dialog\nin python to open and read the contents\nof a file so sit back\nrelax and enjoy the show\nokay people so this is how you can use\nfile dialog\nto open and read the contents of a file\nbut first we'll need a second import\nalong with this import at the top\nso what we're going to be importing is\nfrom tk\nenter import file\ndialog and then we'll need a window\nlike what we usually do so window equals\ntk followed by window dot\nmain loop now we'll need a button that\nwe're going to add to the window and\nwhen we click on this button\nit's going to launch our file dialog so\nwe can select a file\nso we'll call this button button equals\nbutton\nlet's set some text maybe to just open\nlike we're opening a file and we'll\nassociate a function to our command\nfor this button so let's create a\nfunction called\nopen file that's fine and then we need\nto\npack this button so we can add it to the\nscreen so button.pack\nnow we need to create a function called\nopen file and we'll do this before we\ncreate our window let's type\ndef open file\nand when we call this function we're\ngoing to\ntake file dialog and use the\nask open file name function\nso this is going to return a string\nand that string is the file path of\nwhere your file is located\nso what we could do is store this within\na variable\nso let's store this within a variable\ncalled file path\nand to test this let's just print this\njust to take a look at the contents of\nthis variable\nso let's just print the file path now i\nhave a file on my desktop that i want to\nuse called test file\nso let's click the open button and this\nmight not necessarily bring you to your\ndesktop it might bring you someplace\nelse within your\nfile directory so this just happens to\nbe\nbring me to my desktop so i'm going to\nclick the test file that i have and\nclick\nopen so this prints the file path\nso it's going to return a string and\nit's the file path basically\nso now we want to open and read the\ncontents of this file\nso we don't really need this print line\nanymore so\nwhat we'll do is create a file\nvariable and we're going to use open\nwe're going to list the file path and\nthen we're going to use\nr for read so the default is normally rt\nfor read text otherwise you can read\nbinary uh but we can just set this to r\nr is the same as rt basically uh so then\nwe're going to open this file\nand then we're going to read it so let's\njust print this to the console window\nso print the name of the file which is\nfile\nwhere this is located file dot\nread function and then it's a good idea\nto close your files\nafter you're done with them so file dot\nclose\nand let's test this so i'm going to\nclick\nopen find the file that i want\nclick it and then open\nand that text file says my name is bro i\nlike pizza\nnow let's say you want to make this a\nlittle more advanced so what i'm going\nto do\nis that i'm going to set the initial\ndirectory of where we begin\nlooking for a file when we launch our\nfile dialog\nso with that test file i'm going to move\nthis to my project folder so i'm just\ngoing to paste it\nso now this is within my project folder\nnow i'm going to set the initial\ndirectory within\nthe function of ask open file name\nso we're going to set the initial d\ni r for initial directory and then we\ncan list a file path\nso one thing you could do i want to get\nthis\npath here this file path so if you're\nusing pycharm what you could do is right\nclick this\ncopy path and then get the absolute path\nand then i'm just going to paste this\nand then uh with these backslashes\nyou'll have to do double backslashes\nbecause\nthis is the escape character for a\nbackslash\nalright so this should open my project\nfolder\nwhich it does and here's that test file\nanother thing we could do is that we can\nchange the title of our file dialog\nright now the default is just open so we\ncan change that to something else\nso i'm going to add a comma maybe put\nthis on a different line\nuh so this is still within the function\nof ask open file name\nso i'm going to set the title to\nsomething else i'll say\nopen file\nokay so if we were to run this again\ninstead of just saying open it says open\nfile okay and we can also limit the\nfile types that we accept and look for\nso we can use file types\nso let's say that we want to initially\nlook for a\ntxt file so what we'll do is type in\nlike a name for the file that we're\nlooking for so this is what's going to\nappear to the user\nuh text files followed by an extension\nso we want asterisk\ndot txt\nand then we can also have an option for\nall files\nso i'm going to add a comma for a second\noption\nand then let's say all\nfiles and then an extension so comma\nasterisk dot asterisk this will look for\nall files\nuh but i think i am missing a\nparenthesis\nthere that should be good so then when\nwe open our file dialog\nit's going to initially be looking for\nplain text files\nand with this drop down menu it says\ntext files and\nall files so that's what we have listed\nwithin our file types of what we want to\nsearch for\nso you can see that if i switch to all\nfiles\nour python file actually appears because\nwe don't have any limits on the files\nthat we're trying to open or search for\nso if i change this back to text files\nonly folders and\nplain text files are visible so then we\ncan open our test file again\nbut yeah that's the basics of file\ndialog in the next video we're going to\nbe saving\na file so if you'd like a copy of all\nthis code i'll post\nall of this in the comments down below\nbut yeah that's the basics of opening a\nfile\nusing python hey what's going on\neverybody it's your bro here hope you're\ndoing well and in this video i'm going\nto teach you guys how we can use\npython's file dialog to save a file\nsomeplace on your computer\nso sit back relax and enjoy the show\nokay everybody so this is how we can\nsave a file\nwe're going to be reusing a file dialog\nagain kind of like what we did with the\nvideo on opening and reading a file so\nfrom\ntk enter import file dialog we're going\nto be creating a window and adding a\nbutton as well as a text area to this\nwindow\nso let's create our window window equals\ntk\nfollowed by window.main loop\nlet's create a button so button equals\nbutton\nlet's set the text of the button so text\nequals\nsave it's going to be a save button and\nthen a command\nso we'll need to link a function to this\ncommand so let's create a\nsave file function and then we need to\npack\nthis button so button dot pack\nnow let's create a text area this is\njust called\ntext so text equals text we're going to\nadd this to the window\nand we need to pack this text so text\ndot pack and now let's create\na save file function so at the top of\nour program\nd e f save file\nand then we're going to take file dialog\nand use the\nask save as file function and we're\ngoing to store\nthe contents within file file equals\nfile dialog dot ask save as file\nlet's run this just to test it out so we\nhave\nour window a save button and this\nis our text area\nwe can type in multiple\nlines of text\nyay and let's try and save this just to\nsee what we have so far\nso this will bring me to my desktop it\nmight bring you someplace else for\nyour computer so i'm just going to save\nthis as\ntest file now with this drop down menu\nsave as type there's nothing set up so\nwe'll need to do that manually\nuh if we were to save this and here's\nthat test file on my desktop\nso let's take a look at the properties\nwe did not list a\nfile extension so the type of file just\nsays\nfile so we'll get to that later on in\nthis video\nand if we were to open this with a\nprogram like notepad\nwell it's currently empty that's because\nwe need to write\nsome text to this file so let's do that\nnext\nlet's store all of the text from our\ntext area to a variable\nlet's call this variable file text\nfile text equals and then we need to get\nall of the text from our text area so\ntext dot get and we're going to list the\nstarting index as well as the ending\nindex\nfor this function so we're going to\nbegin at\n1.0 that is the beginning of this text\narea\nand the ending we can just put end and\nthen we need to convert\nall of this into a string so let's\nsurround this with\nstr and then we can store all of the\ntext\nfrom our text area within this variable\nfile text and now we just need to write\nour text to this file so file dot\nwrite and we're going to pass in file\ntext\nand then it's a good idea to close your\nfiles when you're done using them so\nfile\ndot close and let's try this again\nhello my name\nis bro let's save this\ni'll call this hello and click save\nand we still can't save s-type so we'll\nwork on that next\nlet's go to my desktop here's the test\nfile that we created i'm going to open\nthis with notepad and it has all of the\ntext\nthat we added to that text area now\nlet's list\nsome available file extensions that we\ncan have the user\nsave this file as so let's begin by\nsetting\nthe default extension so default\nextension and let's set this to\na text file that is dot\ntxt and then we can list\nall of the available file types\nso file types\nand we're going to place these within a\nset of straight brackets\nand i'll just separate these line by\nline so let's begin with a plain\ntext file so this will take two strings\nthe first is the message that will\nappear within\nthat save as type drop down menu so\nlet's place\ntext file and the second string\nthe file extension and that is\ndot txt\nthen let's add another let's say html\nso i'm going to copy this and paste it\nand\nlet's say html next\ndot html and then lastly you can do\njust all files so\nall files and that is dot\nasterisk and let's try this again\nso hello my\nname is bro i\nlike pizza and\nice cream and this time i think i'll\nsave this\nas an html file\nand this is we'll call this\npizza and ice cream i guess\nand click save now let's go back to my\ndesktop\nhere's that file pizza and ice cream and\nit is an\nfile let's just verify that yep.html for\nthe type of file\nso we can open this with notepad\nand it has all of the text i could even\nopen this with sublime text\nas well kind of like that\nall right let's change the initial\ndirectory\nfor saving a file let's change it to\nmy project folder for uh this python\nfile that we have\nso that is and i'm just going to\norganize this a little bit\ninitial d i r\nequals and then we can list a file path\nso i'm just going to copy this\nso copy path paste it\nthen i want to make sure that these are\ndouble backslashes\nand i need to add a comma at the end\nokay let's try this again\nso testing\none two three and this should go to my\nproject folder\nwhich it does testing123\nand let's save this as a plain text file\nclick save\nand here's that plain text file\ntesting123\nanother option available to you is that\nyou don't necessarily need to use\na text area to get some text to write to\na file\nyou could use the console window to\naccept some text\nso to demonstrate this i'm going to turn\nthis line into a comment\nand we're instead going to use the\nconsole window this time\nso we'll say file text equals\ninput and then let's just have a prompt\nhere\nenter some text i\nguess and then let's run this again so\nwe still need to\nclick this save button and select a file\nlocation i'll just save over our file\ntesting123 i'll click save\nyeah i'll replace it alright so we need\nto enter some text\ni guess so i will write a message\nsuch as the cake\nis a lie and hit enter\nso then our file testing123 now says\nthe cake is a lie so you don't\nnecessarily need to use\nthe get function for a text area you can\nuse the console window as well\nhere's one last thing to consider before\nyou go so what if we begin the process\nof\nfinding a file location to save a file\nto\nand then we exit out of this window well\nwe're going to encounter an exception\nso one way that we can prevent this is\nto add\nthis line if file is\nnone return\nso then if we were to try this again\nbegin saving a file and then exit out of\nthis\nthere is no exception that we encounter\nso that's just one little extra i\nthought i would throw in\nbut yeah that's the basics of saving\nfiles in python if you would like a copy\nof all this code\ni'll post all of this in the comments\ndown below but yeah that's how to save a\nfile using python\nhey what's going on everybody it's your\nbro here hope you're doing well and in\nthis video i'm going to teach you guys\nhow we can create a menu bar\nin python so sit back relax and enjoy\nthe show\nall right people let's create a menu bar\nnot too different from the menu bar that\nyou see at the top of many programs\nthere's usually a tab\nfor file edit view help stuff like that\nexcept we're going to create one that\ndoesn't have as many options\nor features it's going to be the generic\nbrand menu bar like the walmart variety\nso let's begin by creating a window so\nwindow equals tk followed by\nwindow.mainloop then we're going to\ncreate a menu bar\nand add menus to the menu bar and each\nmenu is going to function like a\ndropdown menu where you hover over one\nof these tabs\nand there's a drop down so we need a\nmenu bar\nlet's just call this menu bar menu bar\nequals\nmenu and we're adding this to our window\nso then we're going to take window dot\nconfig\nand we can set the menu of this window\nto equal the menu bar that we just\ncreated\nwith each of these tabs for your menu\nbar you need to create a separate menu\nand add each menu to your menu bar and\nthe menu bar is added to the window\nthere's different levels to the stuff so\nlet's create\na file menu because well this one has a\nfile menu\nwhy not our program so file\nmenu equals menu\nkind of like what we did with our menu\nbar except instead of adding this to our\nwindow we're going to add this\nto our menu bar so menu\nbar like that there's one other step two\nwe need to use this function menu\nbar dot add\nunderscore cascade this will have a drop\ndown\nmenu sort of effect so let's create a\nlabel\njust called file to mimic the file tab\nthat you see at the top of many programs\nso label file and we're going to set the\nmenu\nto equal the file menu that we created\nso file menu and let's take a look just\nto see what we have\nso here's our menu bar and here's our\nmenu there's a drop down\neffect for this but we need to add\nactual options\nto this file menu so let's do that\nso let's begin by creating let's see we\ngot\nmaybe open save and exit\nthat should be good so file\nmenu dot add\nunderscore command so this is a\nclickable option\nand let's create a label called open\nand we can open a file and maybe two\nmore so we got open\nsave and exit open save\nexit\nand let's take a look at this\nso here's the drop down menu we can open\nsave exit\nnow you might notice that there is this\nannoying line\nthis is called a tear off you can\nactually get rid of this if you want\nso when we create this file menu we're\ngoing to\nset tear off to equal\nzero and that should get rid of that\nand it's gone so sometimes you might see\na line to separate sections well\nyou can do that with a separator so\nlet's separate\nthe exit command that we have\nfrom open and save and to add that\nseparator we just type in the name of\nour menu\nfile menu dot add\nseparator so this will separate your\ndifferent commands from each other\nwithin a menu you can see that there is\na line between\nsave and exit because we placed a\nseparator here\nnow if you want each of these file\ncommands to actually do something you\nneed to associate\na command with each of these commands\nit's a command within a command\nso command equals for our open file\ncommand\nwe'll create a function called open file\nand we'll need to declare that function\nand then let's create a command called\nsave file and then another called\nexit actually one shortcut if you want\nto exit something you can just say\nquit all right let's create an\nopen file and a save file function so\ndef open file\nlet's just print something just to keep\nthis simple\ni already have another video on opening\nfiles so\nprint file has\nbeen opened and let's do the same thing\nfor\nsave file\nfile has been saved\nand then our last command exit we'll\njust quit\nso let's try this so let's go to file\nhere's the drop down menu we can\nopen a file file has been opened we can\nsave a file\nand then exit and exit will close out of\nour window\nlet's create a second menu called edit\nto mimic the one that we have at the top\nof our ide\nso let's create a edit menu so it's the\nsame process that we did with our file\nmenu\nso let's call this edit menu equals menu\nwe're adding this to our menu bar and i\ndo not want a tear\noff so tear off equals zero then for the\nnext line we need to add\ncascade so i'm going to copy this\nmenu bar dot add cascade the label name\nwill be edit and the file i mean the\nmenu\nwill be edit menu and we're setting\nthis menu that we're adding to edit menu\nand let's try this so we have file and\nedit\nbut we need to add commands to this edit\nmenu\nso it's the same process that we did\nwith our file menu i'm just going to\ncopy this\nchange file to edit and let's\nmake a command called cut copy and paste\nso the label will be cut we'll create a\ncommand called\ncut we'll copy this\nand we'll create a another command\ncalled\ncopy and then paste\nall right then we just need to create\nsome functions for this so cut\ncopy paste let's do that at the top\nso cut\nyou cut some text\nso cut copy and then paste\nyou copied some text\nand paste you\npasted some text\nall right let's try this so here's our\nedit menu\nhere's the drop down we can cut we can\ncopy\nand we can paste not actually but it's\ngoing to call a function that can\ndo something like that if you want to\nset that up maybe that's a video for a\ndifferent day\nlet's customize these menus well because\nwe can\nso let's begin by changing the font so\nwe can just type in\nwithin each of these menus font equals\npick a font that you want and then a\nsize so i'm going to add this font\nfor both of these menus that we have and\nthen when we\nhover over and click on these menus you\ncan see that the font has changed\ndid you guys know that you can actually\nadd images next to each of these\ncommands\nwell you can and this is how we can do\nthat first you'll need some images\nhere's a few that i'm using so add these\nto your project folder i plan on using a\nfloppy disk for save\nand open folder for open and for some\nreason a stop sign for exit because i\ncouldn't really think of anything at the\nmoment\ni guess an arrow would have worked too i\nguess so let's create some photo images\nout of these images\nso i already did this i'm just going to\ncopy and paste the text that i had\nso create a unique name for each image i\nhave\nopen image save image and exit image\nthey're all\nphoto images and here is the file path\nor the file name for each of these\npictures that i'm using so to add an\nimage\nto each of these commands when you add\nthe command we can just say\nimage and then the photo image that you\nwant to use\nso with my open command i'm going to use\nthis\nopen image photo image that i have and\nthis is the\nopen folder so i'm going to do the same\nthing for save\nand exit so we have save image\nand exit image\nbut when we run and compile this let's\ntake a look\nyeah so all the text is gone that's\ngoing to be a problem\nso we'll need to compound views so with\ncompound we can add\nan image on a certain side of the text\nand keep the text so compound\nlet's say we want the image on the left\nso\ncompound left and i'm just going to add\nthis to each of these commands\nand now we should have an image as well\nas some text\nwell that's the basics of creating a\nmenu bar in python if you want a copy of\nall this code\ni'll post all of this in the comments\ndown below but yeah that's how you can\ncreate a simple\nmenu bar in python what's going on\neverybody it's bro here hope you're\ndoing well and in this video i'm going\nto teach you guys how\nframes work in python so sit back relax\nand enjoy the show\nwhat's going on people we're going to be\ndiscussing frames today\na frame is really just a rectangular\ncontainer to group and hold widgets\ntogether\nso we're going to practice using frames\ntoday but first we'll need a window\nwe're going to create a frame and add a\nframe to the window\nso window equals tk followed by\nwindow.main loop\nwell we're going to need some widgets to\nadd to our frame\nso let's create a bunch of buttons\nbecause why not\nso i'm going to show you guys a shortcut\ntoo so let's say\nbutton equals button\nand then for now we're going to add this\nto our window but we're going to replace\nthis eventually with\nframe when we create this and i'm just\ngoing to set the text\nto equal let's say w\nwe're going to have four different\nbuttons wasd\nlike the buttons on the keyboard if\nyou're playing a game and you want to\nmove forward\nleft back or right so we're adding this\nto the window\nfor now let's set the text to w\nand what else can we do uh let's change\nthe font so font\nequals i'll pick the font consoles\nbecause\nthat tends to be even uh with buttons\nthe size of the button adjusts to uh the\nsize of the\nuh letter that you're using or the size\nof the text\nuh so let's set this to 25\nand then a width so maybe\nwidth equals three all right and then\nbutton.pack and i just want to take a\nlook at this\nso here's our button w so i'd like to\nshow you guys a\nshortcut if you don't plan on using this\nbutton by name\nyou don't really need to give it a name\nyou can just say button\nand then have all your uh options here\nand then instead of having button.pack\njust add\ndot pack to the end so this will do the\nsame thing\nhowever you can't adjust this button by\nits name though because it doesn't have\na name anymore\nso let's create a few other buttons one\nfor a s\nand d so we have w\na s d\nand by default they're all top and\ncenter\nso with pack we can actually put these\non a certain side\nso let's say we want uh w on the top\nand then the other three will be all\nleft\nso side equals left and then after i\nshow this to you\nyou'll see the benefits of using a frame\nall right so right now they're all at\nleast it appears that they're all within\na container\nso what if i were to expand this well w\nis just drifting off\nit's sailing away by w so\nwhat if we could put these within a\nframe or container\nto actually contain all of these widgets\nwell we can\nso let's create a frame frame\nequals frame\nand instead of adding these buttons to\nthe window we're going to add\nthese buttons to our frame\nand now we need to add the frame to the\nwindow\nand this is what this looks like however\nwe need to\nactually add this by using pack or place\nso frame\ndot pack so now what this looks\nlike is that all of these buttons all of\nthese widgets are now contained within a\nframe\na container let's change the background\ncolor of this frame just so that we can\nsee\nthe width and the height of this frame\nso\nwhen you create your frame there is an\noption for background color it's just bg\nand let's set this to a color we haven't\ndone pink yet\npink is a very masculine color so now\nthe background of our frame is pink and\nthat might be\na better visual cue to the balance of\nthe frame\nlet's also give this frame a border so\nlet's\nset a width of 5 using bd\nand then the type of border that we want\nand we can\nspecify that with relief so relief\nequals\nlet's say raised so this will have a 3d\npop effect\nkind of like that let's try sunken\nthere's a few other ones as well but i\ndon't feel like it's necessary to\ngo over all the border types let's stick\nwith sunken for now that'll work\nalright so with this frame we are\ncurrently packing this\nwe can set this on a certain side within\nour window\nso currently it's at the top let's set\nthis to maybe the bottom so\nside equals bottom\nnow this frame is sticking to the bottom\nof the window\nand it still contains all of the buttons\nall of the widgets\nthat we added another function available\nto you is\nthe place function we can place this\nframe\nat certain coordinates within our window\nso let's set\nx to equal zero and y to equal zero\nso then when we place this frame within\nour window and set some coordinates\nthis entire frame is going to stick at\nthese coordinates even if we were to\nresize this window and we can change\nthese too\nlet's say x is now 100 and y is also 100\nso the frame along with all of the\ncomponents all of the widgets that it\ncontains\nare sticking within the container and\nthey move along with this\nso that's the basics of frames it's\nreally just a rectangular container to\ngroup and hold widgets together\nso if you want a copy of all this code\ni'll post all of this in the comments\ndown below\nand well yeah that's how frames work in\npython\nhey what's going on everybody it's your\nbro here hope you're doing well and in\nthis video i'm going to teach you guys a\nfew different ways in which we can\ncreate new windows using python so sit\nback relax and enjoy the show\nlet's get started everybody so we're\ngoing to create a window and we'll add a\nbutton to this window\nwhen we click on this button it'll\ncreate a new separate window for us\nso window equals tk followed by\nwindow.main loop\nwe'll need to add a button so let's do\nthat button we're adding this to the\nwindow\nlet's add some text to the button let's\nsay create\nnew window and we'll set a command\ncommand equals and we'll need to define\na function\nlet's create a function called create\nunderscore window\nand let's pack this as well so we will\ndefine\nthis function create window and let's do\nso at the top\ndef create window and what do we want\nthis to do\nwell we're going to create a new window\nand let's call this next window\nnew underscore window equals and there's\ntwo popular ways of creating a window\none is we can use tk and the other is\nthat we can use\nsomething called top level and let me\nexplain the difference between the two\nhere's a definition for a top level\nwindow this is a\nnew window on top of other windows\nand it's usually linked to a bottom\nwindow\nour main window is serving as the bottom\nwindow\nand our new window is serving as the top\nwindow the top level window\nso let's try this and just experiment\nhere is our main window\nthe bottom window and if we were to\nclick on this button it's going to\ncreate a\nnew window for us a new top level window\nif we were to close out of the bottom\nlevel window\nany top level windows associated with\nthis would also close\nkind of like what you just saw now\nhowever it's not the same case\nthe other way around if we have a bottom\nwindow and a top level window\nand we close out of the top level window\nour bottom level window\nis just fine it didn't close out of that\nso think of these like\njenga pieces if you were to pull one of\nthe pieces\none of the windows out from underneath\nthe bottom any\npieces or windows on the top of it will\nclose out as well\nor collapse kind of like in the game\njenga so\nthat's one way to think of top level\nwindows they're stacked on top of any\nbottom level windows\nif you remove a bottom piece it removes\nany from the top\non the flip side we have tk this is a\nnew independent window and we've\nactually been doing this since\nday one of our gui programming tk is a\nnew independent window and our main\nwindow and the new window that we create\nare not linked whatsoever they're\ncompletely independent\nso if we were to create a new window\nthis is our new window and close out of\nour old window\nwell this new window still persists so\nthis could be useful for\nlet's say a login form or a login screen\nafter you log in you'll be brought to\nyour main program which could be within\nthe new window\none other thing that you can do too you\ncan also destroy the old window after\ncreating a new window\nso we need to type in the name of the\nwindow that we want to destroy\nactually let's call the main window just\nold underscore window just to clarify\nthings\nso let's rename that here here and here\nas well\nso we want to destroy our old window as\nif we're closing out of it\nso we type in the name of the window old\nunderscore window\nand we use the destroy function and that\nsounds pretty sweet\nso we're going to destroy our old window\nafter creating\nour new window so let me add a comment\nthat this will\nclose out of old window\nand let's test it so we have our old\nwindow\nour main window we'll create a new\nwindow it creates our new window and\nthen closes out of the old window\nso that's one of a few ways in which you\ncan create a new window for your program\nso if you want to copy of all this code\ni'll post all of this in the comments\ndown below\nbut yeah that's how to create a new\nwindow using python\nhey what's going on everybody too bro\nhere hope you're doing well and in this\nvideo i'm going to teach you guys how we\ncan create separate tabs for our gui\napplications in python so\nsit back relax and enjoy the show\nokay let's begin so in order to create\ntabs for our python gui application\nwe're going to need access to a widget\ncalled notebook\nand that's found in a different module\nso this time we're going to need\ntwo imports so at the top from tk enter\nimport\njust everything but the notebook widget\nis found within a separate module\nso we'll need a second import from tk\nenter\nimport ttk so this ttk import\ngives us access to several different\nwidgets that are normally not available\nto us\nso once you have these two imports\nyou're ready to begin so we'll need a\nwindow\nwindow equals tk followed by window.main\nloop\nand we need to create a notebook widget\nso\nright after you create your window we're\ngoing to create a notebook\nwe'll call this notebook equals ttk\ndot notebook and we want to add\nthis notebook to our window so let me\nadd a comment here what this widget does\nso this is a widget that manages\na collection of windows\nand displays and that's really all there\nis to it\nso in order to create different tabs\nwe're going to create some frames\nso for the first tab i'll call this tab\n1 equals frame\nand we want to add this to the notebook\nand with our notebook we're adding this\nnotebook to the window\nall right so this will be a new frame\nfor tab one and let's create a second\ntab\nand we'll call this tab two and you can\ncreate more tabs if you want but that\nmight be overkill\nso this is a new frame for tab two\nafter you finish these two lines of code\nwe're going to follow this up with\nnotebook.ad so notebook.ad\nwhat widget are we adding we're adding\nour tab\n1 frame and we can set some text for\nthis tab so text equals and i'll type in\ntab one and we'll repeat the process for\ntab two\nso notebook dot add tab two\nand we'll change the text to tab two and\nthen we need to\npack this notebook notebook dot pack\nand let's take a look to see what we\nhave all right we have\ntab one and tab two but we'll probably\nwant to actually add something\nto each of these tabs so that the\ncontent is visible so let's create some\nlabels\nso after we pack our notebook let's\ncreate some labels\ni don't really feel like giving these\nnames because we don't really plan on\nusing them for anything else\nso we'll just say label tab\none that's going to be the parent widget\nand let's set some text text equals\nhello this is tab\nnumber one then i think i'll give this a\nwidth and a height too\njust so it's more visible so for the\nwidth i'll make this 50\nand the height 25 so this will be\nroughly a square shape\nand then we need to pack this so i'm\njust going to add pack\nand let's create a second label for tab\ntwo\nso label tab two maybe i'll say\ngoodbye this is tab number two\nokay we should have some actual content\nfor these labels now for these tabs\nso here's the label this is tab one and\nthis is tab two and you can switch\nbetween these and they display\neach of these separate labels however\nwith the way that this window is\narranged\nif we were to expand the size of this\nwindow well\nour frames and our tabs kind of stay in\nthe top\nand in the center so i'm going to add a\nfew lines within\nthe pack function of our notebook the\nfirst thing i'm going to do\nis use the expand option and set this to\ntrue\nso what this does and i'm just going to\nadd a comment that expand\nthis will expand\nto fill any space\nnot otherwise\nused so what happens now\nis that this will actually expand\nand it's staying in the center of the\nwindow but there's one more thing we're\ngoing to add\nfill equals both\nnormally this is x or y or you can do\nboth\nso i'll add a comment as to what this\noption does\nso fill will fill\nspace on x and\ny axis so if you combine\nboth of these together what you get is\nthat these tabs will stay\nin the top left corner and if you were\nto expand the size of this window\nthe tabs aren't going to move they're\ngoing to stick to the top left\nbut the size of the window will expand\nall right so that's the basics of\ncreating tabs in python if you want a\ncopy of all this code\ni'll post all of this in the comments\ndown below but yeah that's the basics of\ncreating tabs in python\nhey what's going on everybody it's your\nbro here hope you're doing well and in\nthis video i'm going to teach you guys\nall about the grid geometry manager in\npython so sit back relax and enjoy the\nshow\nall right everybody let's talk about the\ngrid geometry manager\nwell because we have to this is a useful\nway to organize widgets within a\ncontainer\nimagine our windows being arranged into\na series of\nrows and columns similar to an excel\nspreadsheet\ni tend to use that example a lot the top\nleft most cell\nis row zero column zero computers always\nbegin with zero so that's why our grid\ndoesn't begin with\nrow one column one and we can list which\nrow and column\nwe would like our widgets to be placed\nwithin and by default we only have\none row and one column to work with at\nthe start but we can explicitly state\nwhich row and column this widget should\nbe placed within\nrelative to the container that it's in\nand python will create new relative rows\nand columns for us if we state where\nthese widgets\nshould be placed so let's create a small\nsubmission form\nand then organize all of our widgets\nusing our new grid system that we have\nso let's begin by creating a window\nwindow equals tk\nfollowed by window.mainloop now that we\nhave our window we'll need to create\nsome widgets to add to this window\nso let's say that we want an entry box\nand a label for a first name last name\nand email address as well as a submit\nbutton\nso let's create a label and an entry box\nfor a first name just to demonstrate\nthis\nso let's call this label first name\nlabel equals label we're adding this to\nthe window\nand let's set the text to first\nname for now i'm just going to use that\npack to demonstrate the differences\nbetween\npack and grid and let's create an entry\nbox\nlet's call this first name\nentry equals entry\nwe are adding this to the window and for\nnow we're just going to\npack this and let's take a look\nso here's our label on the top it says\nfirst name and then it has\nour entry box right underneath so what\nif we want to have\nthis label on the left hand side and our\nentry box on the right hand side of the\nlabel\nwe're better off using the grid geometry\nmanager\nso we're going to replace pack with grid\nand we have to set which row and column\nthat we want each of these widgets to be\nplaced within\nnormally if you use the pack geometry\nmanager\nas you create new widgets they're just\ngoing to be placed directly underneath\nin one long column so\nlet's say that for our name label we\nwant to place this where\nthe row is zero and the column is zero\nthat's the top left corner\nso within the grid geometry manager when\nwe call it\nwe're going to set row to equal zero as\nwell as column\nto equal zero and then for the first\nname\nentry we want this to be on the right\nhand side of our label\nso we'll place this within the same row\nrow\nequals zero but in a different column\ncolumn\nequals one so column one is directly to\nthe right of column zero\nand then when we compile and run this we\nnow have our entry box\nto the right of our label that we have\nso let's repeat the process\nfor a last name an email address and\nthen a submit button\nso i'm just going to copy what we have\nhere and change first name to\nlast name so last name label\nand we'll change the text to last name\nlast name entry and we'll keep that the\nsame\nnow we want this last name label to be\nunderneath\nthe first name label because right now\nthey're going to overlap because we have\nthem in the same\nrow and columns so you can see that we\ncan no longer see\nthe first name label or the first name\nentry\nso let's place this directly underneath\nwe're going to put these underneath by\none row\nso we'll keep the columns the same but\nwe're going to\nput this underneath by one row so row\none\nand row one for the last name entry and\nwhat you get is that\nthese two labels and entry boxes are\narranged neatly into\nrows and columns and let's do the same\nthing for an email\nso i'm going to copy what we have and\nwe're going to change\nlast name to email so\nemail label and email entry and then\nchange\nfor the text last name to just email\nand we're going to place these where row\nequals 2\nand we'll keep the column the same and\nfor email entry\nrow 2 column one\nso doesn't that look a lot better now\nlet's create a submit button\nso let's call this submit button\nequals button and then we're adding this\nto the window\nand we should set some text text equals\nsubmit i guess dot grid\nand we want to place this underneath\ncurrently kind of just shoves it\nunderneath for now\nlet's say that we want this between\nthese two columns\nso we'll want to set the row and the\ncolumn to begin with\nrow is going to equal three\nand column we'll set this equal to zero\nfor now\nthere isn't going to be any apparent\nchange it's still going to be in the\nsame place\nbut one thing that we can do is use an\noption called column\nspan we can have a widget take up more\nthan one column\nand it's going to place this widget in\nbetween both of these columns\nin between the combined width of both of\nthem\nso we'll add column span\nequals two so this widget is going to\ntake up\nthe next two available columns including\nthe one that it's currently in and you\ncan see that our submit button\nis now between these two columns that we\nhave\none thing that you should know is that\nthe column width is dependent on the\nwidth\nof the largest widget that is contained\nwithin that particular column\nlet's say that we increase the width of\nour first name\nlabel well our column is going to expand\nto actually fit\nthat widget that we have so for our\nfirst name label\nlet's set the width to maybe 20\nand this is going to increase the width\nof column 0\nand to even better demonstrate this\nlet's color\neach label a certain color just for a\nvisual\nfor our first name label let's say this\nis red and then for\nour last name label let's set this to\ngreen\nand then for email maybe blue\nnow all of these are color coordinated\nand you can see that\nthe background color of our first name\nlabel\nis taking up the entire column space now\nwhat if we changed the size of our\nemail label to something even larger\nlike 30\nso width equals 30.\nand now the column 0 has expanded to\naccommodate the size of our largest\nwidget which is our email\nwhich has a width of 30 and before we\nfinish this video let's add a\ntitle to the submission form right on\ntop of the first name label and the\nentry label so let's call this title\nlabel equals label writing this to the\nwindow\nlet's set some text let's say enter\nyour info and let's pick font\nfont equals\nwhat am i feeling like today maybe just\narial\nand then a size maybe 25 we're going to\nuse the\ngrid geometry manager\nand we want this at the top so we want\nrow zero at least\ni want this to take up two columns so\nwe'll say column\nequals zero and then set a column span\ncolumn span equals two\nnow a few things are going to overlap\nhere\nso we're going to move everything down\nby one row\nbesides our title label so we want\nthis first name label to be directly\nunderneath our title label\nso let's move everything down by one row\nand our title is going to be directly on\ntop of our first name label as well as\nthe first name\nentry box that we have all right so\nthat's the very basics of the grid\ngeometry manager\nif you want a copy of all this code i'll\npost all of this in the comments down\nbelow\nbut yeah that's the basics of the grid\ngeometry manager\nin python hey what's going on everybody\nit's your bro here hope you're doing\nwell and in this video i'm going to\nteach you guys how we can create a\nprogress bar in python so\nsit back relax and enjoy the show\nokay let's create a progress bar but\nwe'll need a few imports to begin\nthe progress bar widget is found within\nthat ttk module so we'll need a separate\nimport from that\nfrom tk enter dot ttk\nimport everything and we'll import\neverything from time as well let's\ncreate a window\nwindow equals tk followed by\nwindow.mainloop\nwe're going to add a progress bar and a\nbutton to this window\nwhen we click on the button it's going\nto fill our progress bar\nlet's begin by creating a button to\nbegin with let's call this button\nequals button we're adding this to the\nwindow\nlet's set some text text equals maybe\ndownload\nand then a command maybe i'll call this\nstart\nfinish by adding this button to the\nwindow and we'll just use pack to do\nthat\nlet's define what our start function\ndoes\ndef start we'll fill this in later i'm\njust going to\nprint nothing just as a placeholder and\nwe should just have a button\nnow let's add a progress bar before this\nbutton\nand we'll call this progress bar just\nbar for short bar\nequals progress bar\nwe're adding this to the window\nwe can set an orientation\nthis can be horizontal or vertical later\non in this video i'll show you the\ndifferences between the two\nbut for now let's set this to horizontal\nand then i'm going to pack this bar bar\ndot pack\nand add some padding pad y\nequals 10 and let's see what we have\nokay this is our progress bar at the top\nand this is the button\nwhen we click on this button it's going\nto fill our progress bar\nbut i think i'm going to increase the\nlength of this progress bar\nlet's set this to maybe 300 i believe\n100 is the default\nokay that's not too bad of a size now\nlet's define what our start function\ndoes\nwe can actually increase the value of\nour progress bar by typing in the name\nof this progress bar here\nvalue plus equals some amount let's say\n10. so what's going to happen right now\nis that every time we click on this\nbutton it's going to fill our progress\nbar by\n10 out of the total which is 100\nlet's pretend that we're waiting for a\ncertain amount of tasks\nto complete so let's define a few\nvariables\nlet's say we have a variable called\ntasks and let's set this to 10 just to\nkeep it simple\nand x will represent the current task\nthat we're on\nand we'll say 0 to begin with let's\ncreate a while loop\nwhile x is less than the amount of\ntasks that we have we will\nincrement the value of our bar by 10.\n10 10 for each test that we have which\nis 10 for a total of 100\nand we'll want to increment the task\nthat we're on as well\nwhich is represented by x so let's\nincrement x by 1 after each iteration\nof this while loop now when we run this\nand click download this spills instantly\nlet's add a delay just to simulate\neach task waiting to be completed so\nlet's add that here let's add a delay by\nusing time\ndot sleep and let's set this to one\nsecond\nwe're going to wait one second and then\ncomplete a task\nwhat ends up happening now is that\nnothing appears to be updating\nwell what gives bro you lie to me well\nthat's because\nthe window is waiting to have this\nprogress bar complete\nbefore it's actually going to display it\nbeing filled\nso we would want to refresh this window\nafter each iteration of the while loop\nso at the end of this while loop let's\nadd one thing\nwindow dot update underscore idle\ntasks after each iteration of this while\nloop it's going to update\nthe window that we have so then when we\ndownload something\nit's going to update our progress bar\nafter each iteration of this while loop\nuntil it's completed\nright about now let's take this a step\nfurther by adding a label that displays\nthe current percent of the progress bar\nthat is complete\nlet's add this label after the progress\nbar but before the button\nsandwiched right between these two\nwidgets so let's add that here\nwe'll call this label percent label\nequals label we'll add this to the\nwindow\nand we'll need a text variable text\nvariable equals let's call this percent\nso the reason that we use a text\nvariable is so that we can update this\nlabel with some text\nafter each iteration of our while loop\nand we'll need to\npack this okay within the window\nnear the top let's define percent\npercent\nequals string var this allows us to\nupdate percent with some new text and\nset the percent label with the new text\nthat we have\nwithin the while loop but before we\nupdate idle tasks\nlet's set what percent is\npercent dot set and let's say\nx divided by tasks and then we'll\nmultiply this by\n100 i'm just going to put this within\nits own set of\nparentheses times 100\nand then we'll convert all of this to a\nstring\nso we can display this along with some\ntext\nthere are a lot of parentheses here so\nit might be difficult to keep track of\nall this\nall right and then we're just going to\ntack on\npercent and that's it let's try it\nso we got 10 20 30\n40 50. i'll shut up now one change that\ni'm gonna make is that i'm going to cast\nall of this\nas an integer before we convert it to a\nstring\nbecause i do not like that decimal at\nthe end of our percentage\nso yeah it says 10 percent 20 so on and\nso forth\nlet's add a label that displays the\ncurrent task that we're on\nso let's copy what we have for our\npercent label\nand let's rename this as maybe task\nlabel\ntask label text variable will equal\nmaybe text\nand let's define what text is so text\nis also a string var and within our\nwhile loop\nlet's update the value of our text\ntext dot set\nwill display x plus maybe a forward\nslash\nplus our tasks\nand since we're displaying integers\nalong with some strings\nwe need to convert these to strings and\nwe can use the str function to do that\nfor us\nso surround x and tasks with str to\nconvert these to strings\nand then we'll add just plus tasks\ncompleted so the value of x will update\nafter each iteration of this while loop\nlet's try it\nand after clicking download this will\ndisplay the percentage as well as the\namount of tasks that have been completed\nall the way until it reaches the end\nlet's change this into a more practical\nexample\nwe'll pretend that we're downloading a\nvideo game so let's replace or rename\ntasks as maybe gb4 gigabytes\nand this game will be 100 gigabytes\nwe'll rename x as well so let's refactor\nrename and change x to maybe download to\nrepresent\nthe amount of gigabytes that are\ndownloaded\nand let's create a variable called speed\nand let's set this to one\nalright so while our download\nis less than the amount of gigabytes for\nthis game\nwe'll sleep for maybe a portion of a\nsecond\n.05 should be good we'll increase\nthe value of our bar by\nthis amount speed divided by\ngigabytes and then multiply this by 100\nfor the download we're going to\nincrement this by whatever\nour speed is and right now it's one so\nthat's the same\nwe can keep percent the same for our\ntext\nlet's change tasks to gigabytes\nand that's all the changes that we have\nto make and\nnow when we download something we're\nkind of pretending that we're\ndownloading\na large file or a game you can see that\nonce it reaches 100 it says 100\n100 out of 100 gigabytes completed now\nwe can change\nthis to a different value let's say\nmaybe 50\nand the speed will be maybe two\nso this will adjust to accommodate\nwhatever the new file size is as well as\nthe speed\nand before i forget you can change the\norientation to a\nvertical bar if you so choose so we have\nthis vertical download bar now\nwhich could be good for something all\nright so that's the basics\nof progress bars in python if you want\nto copy of all this code\ni'll post all of this in the comments\ndown below but yeah that's the basics of\nprogress bars\nin python what's going on everybody it's\nyour bro here hope you're doing well and\nin this video i'm going to teach you\nguys how we can use the canvas widget to\ndraw some simple shapes so\nsit back relax and enjoy the show\nwelcome back everyone well in this video\nwe're going to be creating a canvas\na canvas is a widget that is used to\ndraw simple graphs plots and images\nwithin a window\nwe're going to be creating some simple\nshapes in this video not anything too\nsophisticated i might get more into the\ncanvas widget in a separate video\nand at the end of this lesson we're\ngoing to practice by creating a pokeball\nso to begin we'll need a window window\nequals tk\nfollowed by window.main loop to create a\ncanvas we can just simply call this\ncanvas\ncanvas equals canvas and we're adding\nthis canvas\nto our window and then we need to follow\nthis with canvas.pack or\nplace but i'm just going to use pack\nbecause it's simple\nthis is what our canvas looks like it's\na rectangular area which we can draw\ngraphics on\nwe can also set the width and the height\nof this canvas so when we create this\ncanvas\nwe're going to set the options for a\nheight and a width\nso let's begin with the height height\nequals let's say 500\nand the width will be the same 500 and\nnow we have\na square canvas that we can draw\ngraphics on\nlet's begin by creating some simple\nshapes maybe a line\ni think a line is a shape maybe a\none-dimensional one i don't know\ni don't geometry so let's create a\nsimple line\nso we type the name of the canvas dot\ncreate and there's a bunch of different\nshapes that we can create\nlet's create a line\nnow i'm just going to turn this into a\ncomment for a moment we need to set some\ncoordinates\nfor this line this top left corner of\nour canvas\nis 0 0 and the bottom right corner of\nthis canvas is\n500 by 500 depends on what you set the\ndimensions of the canvas to\nso when we create a line we need a\nstarting point and an ending point\nso if we want this to start in the top\nleft corner we're going to pass in\n0 0 that is the starting position and we\ncan place the coordinates for the ending\nposition\nif we want this line to end in the\nbottom right corner that would be\nwhere x is 500 and y is 500 and this is\nwhat this looks like\nwe just have a simple line going across\nthe screen\nbut that's not all we can also change\nthe color of this line\nand the thickness let's begin by\nchanging the color so\nwe can do that with fill fill equals\nlet's pick color blue\nand now we have a blue line going across\nthe screen\nbut we can also change the width of this\nas well so we can do that\nusing the width option and let's set\nthis to five\nnow we get an extra thick line across\nthe screen\nnow let's make a red line\nso i'm just going to copy this\ncanvas.createline and let's change\nsome coordinates for this uh let's say\nwe want this to start in the bottom left\ncorner and go up to the top right\nso the starting x position would be zero\ny would actually be 500 x\nfor the ending position would be 500 and\ny would be zero\nlet's set this to red and we'll keep the\nwidth the same\nokay so here's our red line and notice\nthat this red line\nis overlapping the blue line so when you\ncreate shapes\non a canvas if there's any that overlap\nthe one that you most recently created\nwill appear on the top one option\navailable to you is that you can\nactually\ngive these graphics a unique name with\nour blue line we could call this\nblue line blue line equals all of this\nand then we can call our red line\nsomething different like\nred line this would be useful if you\nwant to call or use a\ngraphic by its name if you want to like\nmove a graphic on the screen or have\nsomething appear\nyou can use this by its name but we\ndon't really need it for this lesson so\ni'll just revert this back to what we\nhad previously\ni'm just letting you know that you can\ndo that alright what do we have up next\nlet's create a rectangle so canvas dot\ncreate\nrectangle we can set some starting\ncoordinates and ending coordinates\nthe starting coordinates are for the top\nleft of the rectangle\nand the ending coordinates are for the\nbottom right so for the starting\ncoordinates let's say\nwe're going to place this where x is 50\ny is 50.\nfor the ending coordinates we want this\nwhere\nx is 250 and y is 250 i'm just making up\nnumbers\nput it whatever you want really and this\nis what this looks like\nbut i think i'm going to comment out\nthese lines for now\nand here is our rectangle well i guess\nit's also a square\nwe can actually give this a fill color\nas well so we do that with the fill\noption\nfill equals purple\ni guess and now we have a\npurple rectangle next on our list\nis create polygon we can create many\nsorts of shapes using create polygon but\nit really depends on how many\ncoordinates that we enter\nlet's create a simple triangle so we\nneed at least three coordinates for this\nto work\nso canvas dot create polygon\nand i have some coordinates picked out\nalready so let's place the first set of\ncoordinates where\nx is 250 y is zero for the second set\nwhere x is 500 and y is 500\nin the last set the third set we'll\nplace this where x\nis zero and y is 500 and what this looks\nlike\nis that we have this black triangle\nthat's taking up most of the canvas\nwe can also change the fill color as\nwell so we do that with\nthe option fill and we can set this to\nwhatever color you want\nlet's say yellow and we now have a\nyellow triangle on our screen and it\nkind of resembles the triforce from the\nlegend of zelda series one of my\npersonal favorites\nlet's also add a border this is actually\ndone with\noutline outline equals and then pick a\ncolor for the outline\nlet's say black and we have a black\noutline around\nthis graphic and you can also change the\nthickness of this too\nwith width and let's set the width to\nfive\nand now we have an extra thick line\naround our triangle\nwith these shapes you can pass in a list\nof points too\nso i'm going to get rid of all these and\nwe're going to pass in\na list so let's create a list called\npoints\npoints equals all the points that we\njust entered in previously\nand then instead of passing in all these\ncoordinates individually i'm just going\nto pass in our list of points\nand this will work exactly the same okay\nlet's create an arc now so canvas dot\ncreate\narc and arc is really just a\ncurved line between at two points\nhowever when we list some coordinates\nwe're not listing the coordinates of the\nstarting position and ending position\nfor this arc it's more or less for the\namount of space that we want to allocate\nto actually draw this arc\nso let's say that we want this arc to\ntake up the entire canvas we can pass in\nthe dimensions\nfor this canvas so the top left corner\nis zero zero\nand the height and the width are five\nhundred\nso this is our arc it resembles a pie\nslice it's not starting in the top left\ncorner and ending down here\nthat's the amount of space that we're\ngiving this crate arc function to\nactually draw\nan arc it's really an entire circle but\nonly a portion of it is visible\nlet's also set a fill color for this so\nfill equals\nwhat color did we not pick yet let's say\ngreen\nand now we have a green pie slice\nthere's different styles you can do too\nso we can change that with style equals\nthe default is pi slice\nthat's what we had previously let's\nchange this to chord\nthis will draw a line between these two\npoints\nand this kind of resembles like a bow\nlike a ball with arrows\nand there's also just arc\nwhere it's simply just a curved line\nlet's change this back to pie slice well\nbecause i like pie\nwe can change the starting position of\nwhere this arc begins with the option\nstart\nso start equals 0 by default so there's\ngoing to be no apparent change\nlet's adjust this by 90 degrees so this\nis in\ndegrees so this shifted\nwhat is this direction counterclockwise\nby 90 degrees\nso 180 would theoretically flip this\nand now this is on the other side of\nwhat we had previously\nand then 270.\nall right we can also set an extent\nso the default is normally 90 degrees\nbut let's change this to 180\nand now we have a what is that\nhemisphere half a circle\nall right people let's practice by\ncreating a pokeball there's still one\nmore function that we have to cover it's\ncalled create oval but we'll do that as\nwe're making this\nso let's begin by creating the top red\nhemisphere of this pokeball so that's\ncanvas\ndot create arc and we're going to set\nthe extent of this\nto 0 0 500 500\nso that this is going to take up the\nentire canvas\nand then let's also set a fill color to\nred\nso fill equals red\nwe need to change the extent of how far\nthis extends\nso we'll do that with the extent\nfunction so extent\nequals 180 so that this is a half circle\nand let's also change the thickness of\nthis outline as well\nusing the width option so width equals\n10 would be good and we have\na red hemisphere for the top of our\npokeball let's work on the bottom half\nso that is a white hemisphere\nso canvas dot create arc these are all\nthe same we'll change\nthe fill to white the extent will be the\nsame\nbut we need a different starting\nposition so start\nequals 180. so this is going to begin\nat the 180 degree mark so when you\ncombine these both together we get\ntwo different colored hemispheres that\nform a perfect circle\nnow let's create an oval within the\ncenter of this pokeball\nso we're going to do that with canvas\ndot create\noval we're going to set the amount of\nspace that we want to give\nthe circle to be drawn so we'll place\nthis where\nx is 190 where y is 190\nwhere x 2 or the second x position is\n310\nand y2 is 310\nlet's set the fill color next so we do\nthat with fill\nfill equals white\nand lastly let's just give this a\nthicker border\nso that is width\nequals 10 to match the width for the\ntwo arcs that we have and there you have\nit we have a simple\npokeball all right well that's the\nbasics of the canvas widget if you'd\nlike a copy of all this code i'll post\nall of this in the comments down below\nbut yeah that's the basics of the canvas\nwidget in python\nwhat's going on everybody it's your bro\nhere hope you're doing well and in this\nvideo i'm going to teach you guys how we\ncan create key events in python so sit\nback relax and enjoy the show\nwelcome back everyone in this video\nwe're going to be discussing at key\nevents\nwe can bind a key event and a function\nto a widget or a window so that when we\npress a certain key\nor do something we can trigger a\nfunction to be called that will perform\nsome sort of task for us\nso we can actually do this by using the\nbind function\nso widgets and windows have access to a\nbind function\nso when our window or our widget is\nselected\nand then you press a certain key or do\nsomething then it's going to call a\ncertain function to perform a task for\nus\nso there's two arguments within the bind\nfunction this takes an event\nas well as a function name let's say\nthat when we press the enter key we want\nto\ncall this function to do something so\nfor this event\nwhat we type for that is a set of quotes\nangle brackets and the name of the\nbutton\nso for example if you want to press w to\nmove forward like you're playing a game\nthis would be w\na s d there's also up\ndown and then let's say we want to press\nenter to do something that is actually a\nreturn and then we will call\nthis function so let's create a function\ncalled do something\nand let's define this at the top def\ndo something now pay attention to this\npart we need to set up\none parameter for this do something\nfunction\nthis needs an event so be sure to\ninclude that and it's easy to forget\nso what do we want to do after we press\nenter\nlet's just print a message you\ndid a thing and\nthis should work now so let's try it\nso while this window has focus ability\nwe can actually uh have this respond to\nevents\nso right now i'm pressing all sorts of\nkeys you can probably hear me right now\ngoing crazy on my keyboard but now i'm\ngoing to hit\nenter and it says you did a thing and\nyou can bind all sorts of keys to\nthis window let's say that i want to\npress q to quit\nso we'll just replace this with\nlowercase q\nso i'm typing all sorts of keys but now\ni'm going to press q\nand it says you did a thing kind of like\nwe're quitting the game\nyou can actually have this respond to\nall keys\nwell almost all of them so to do that\nyou just type in key with the capital k\nso i can pretty much press on any key\nthen it's going to\ntrigger or call our function\nkind of like that so one thing that we\ncould do\nwe can display the key event that was\npressed so i'm just going to add that\nhere\nmaybe i'll change this message u\npressed plus and to display\nwhat key was pressed that is event\ndot key sim i believe that's for\nkey symbol so this will actually display\nwhat button you pressed\nso w-a-s-d\nhere's a unique idea for practice let's\nsay that we want to add\na label to our window and we're going to\nchange the text on the label\nto reflect whatever key that we press so\nlet's create a label\nlabel equals label we're adding this to\nour window\nand let's change the font as well to\nsomething massive\nlike helvetica\nand a size of 100 that should be good\nthen we need to pack this label so\nlabel dot pack then within\nthis function let's turn this into a\ncomment\nand we're going to use label dot config\nand we're going to update our text\nand the text is going to be whatever key\nthat we press so we can do that with\nevent dot key sim so now\nthis label is going to display whatever\nkey that we press\nso for example w a s\nd backspace escape\nup up down down left right left right b\na start\nall right so that's the basics of key\nevents if you could do me a favor and in\nthe comments down below\njust press f to pay respects so if you\nwant a copy of this code i'll post this\nin the comments down below but yeah\nthat's the basics of key events in\npython\nhey what's going on everybody it's your\nbro here hope you're doing well and in\nthis video i'm going to teach you guys\nall about\nmouse events in python so sit back relax\nand enjoy the show\nhey everyone we're going to be\ndiscussing mouse events in python so\nbefore we begin we'll need a window so\nwindow equals tk followed by window.main\nloop\nand in the last video we learned that we\ncan bind\na widget or a window so that when a\ncertain event occurs we can call a\nfunction\nso we're going to do the same thing for\nthis video but we have\nvarious mouse events that we can cover\nso we're going to use the window.bind\nfunction\nand this takes two arguments an event as\nwell as a function\nname so let's define a function let's\ncall it the\ndo something function so do something\nand we'll need to define this so at the\ntop def\ndo something and remember that we need\nto set up\none parameter for this function the\nparameter\nis an event and then we'll just print\nsomething print\nyou did a thing\nokay so there are various mouse events\nfor a\nleft button click within quotes and then\nwithin angle brackets\na left button click is button dash one\nso then if we were to click within this\nwindow\nit's going to call our function you did\na thing\nbut if i were to right click it doesn't\ndo anything\nso there are other mouse events too so\nbutton two\nis that scroll wheel not if you scroll\nup or down but if you press\nin on it so right now i'm clicking left\ni'm clicking right\nnow i'm going to press in on the mouse\nwheel and it says you did a thing\nbutton three is a right mouse click\nso i'm clicking left nothing but i'm\ngonna click right\nand that seems to work all right so\nbutton one i'm just going to add a note\nleft mouse click button two\nis the scroll wheel\nthat's if you press in on it and then\nbutton three\nis a right mouse click\nso did you guys know we can actually get\nthe x and y coordinates of where this\nevent occurred\nso to do that we type in the name of the\nevent\ndot x however since we're displaying\nthis along with some text\nwe'll need to convert this to a string\nso string event dot x then i'll add the\ny coordinates as well\nevent.y i think i'll just add a comma\nbetween these\nto separate them and we'll change our\ntext\nso we'll say mouse coordinates\nall right let's try this again so this\nis going to\ngive us the coordinates of where we\nclick and right now i'm just left\nclicking\nso the top left corner is zero zero\nwell at least close to it not there\nexactly\nalright so here's a few other events\nthat we can cover\ni'm going to copy this we have button\nrelease\nif we were to release a button it's\ngoing to trigger our event\nso right now i'm holding in on the left\nmouse button but i'm going to let go\nthen it triggers our event if i were to\nright click\nand hold it it doesn't do anything but\nas soon as i let go\nthen our event is triggered we also have\nenter\nnot to be confused with the enter button\njust going to get rid of that so that\nis enter if we were to enter our binded\nwindow or widget\nso if i were to enter it's going to give\nthe coordinates of where i entered this\nthere is also leave\nso i'm going to say that enter\nthe window\nand leave is leave the window\nso if i enter nothing happens but as\nsoon as i leave it gives the coordinates\nand the last one is motion as long as\nthe cursor is in motion\nso this one might be good for a game so\nthat is motion\nwhere the mouse\nmoved\nit's consistently giving me the\ncoordinates if i'm moving the mouse but\nif i were\nstationary or stop moving it stops\nall right so that's the basics of mouse\nevents in python if you want to copy of\nall this code\ni'll post all of this in the comments\ndown below but yeah that's the basics of\nmouse events in python hey what's going\non everybody it's bro here hope you're\ndoing well and in this video i'm going\nto teach you guys how we can drag\nand drop widgets in python so sit back\nrelax and enjoy the show\nall right people let's just dive into\nthis so we'll need a window and then\nwe're going to be adding widgets to the\nwindow\nso window equals tk followed by\nwindow.main loop\nnow you can drag and drop all sorts of\nwidgets but let's just stick with the\nlabel because creating a label is simple\nso let's define a label label equals\nlabel we're going to be adding this\nlabel to the window\nand let's set a background color so we\ncan actually see this label\npick i don't know your favorite color\ni'm going to pick red\nand then i'm going to set a width and a\nheight because normally if you have a\nlabel without any text it's really small\nso let's set a width of maybe 10\nand then a height of 5.\nthat should be good and we want to place\nthis label\nsomeplace within the window so label dot\nplace and we can pass in some x\ncoordinates as well as y coordinates\nso x equals zero and y equals zero\nso that this is going to appear in the\ntop left corner\nof our window so this is what we have\nthis\nis our label and we want to be able to\ndrag and drop\nthis label someplace within the window\nwhat we're going to need to do\nis actually bind this label twice but\nlet's begin with just\nthe first binding so in order to bind a\nwidget you type in the name of the\nwidget\nfollowed by calling the bind function\nso this bind function can take two\narguments\nit can take an event as well as a\nfunction\nname so for the function name let's call\nthis\ndrag underscore start but you don't\nreally need to\nname it the same that i do and for the\nevent that occurs\nthis is going to be a left button click\nwith the mouse\nso that event is within quotes and\nwithin angle brackets\nbutton dash one so if we were to click\nsomeplace within the label using the\nleft mouse button\nit's going to call our drag start\nfunction but we need to define this\nso at the top of our program let's\ndefine this function\ndef drag start and this takes one\nparameter\nthe parameter we have is our event so\nwhat we're going to do\nis actually get the coordinates of where\nwe click\nwithin this label and we're going to\nassign these\nto a new variable or attribute of our\nlabel\nso label dot let's create an attribute\ncalled\nstart x equals our event\ndot x so this is where we click\nwithin the label and not necessarily the\nwindow\nand let's repeat the process for y so\nlabel\ndot start y equals event dot\ny so we're going to have some\ncoordinates of where we click\nwithin this label and we can actually\nuse that for our next\nfunction so we're going to bind this\nlabel a second time\nso i'm going to copy this line and paste\nit\nthe second binding let's say is\ndrag underscore motion for the function\nname\nand this event is going to occur if we\nwere to hold down the left mouse button\nand then drag so that is b\none dash motion\nand then we need to define this function\nso at the top\nd e f drag underscore motion and this\ntakes our event as a parameter\nso this part is going to be a little\nfunky we're going to\nget or create new x and y\ncoordinates so let's begin with x x\nequals the name of our label or widget\nlabel dot w info\nunderscore x this is a function so add\nsome parentheses\nthis will get the top left x coordinate\nof our label relative to the window that\nwe're in\nminus label x well labeled.startx\nplus event dot x\nall right so we're going to do the same\nthing for y\nwell we're going to replace x with y for\nthe second line\nall right so this is the top\nleft corner the x coordinate of our\nwidget\nrelative to the window this\nis the place where we click within\nthe label itself and this is where we\nbegin\ndragging our widget to it's a little\ndifficult to explain but if you can find\ncombine\ncombine all of these together you'll get\nthe new coordinates\nof where you want to drag this component\nthis widget to\nso we need to replace this widget so\nlabel dot place x equals x\nand y equals y so then when you combine\nall of these together\nwe have our widget and we can drag it\nand drop it someplace else within the\nwindow\nnow wait a second what if we have more\nthan one widget\nwell with the way that our functions are\nwritten now they wouldn't be compatible\nwith more than one widget\njust this label itself so what if we\nwere to create a\nsecond label so i'm going to call the\nsecond label just\nlabel two so i'm just going to rename\nthem and\nlet's change the background color to\nmaybe\nblue and i'm just going to place this\nsomewhere else within our window so\nmaybe where x\nis 100 and y is 100 and we'll need to\nbind\nlabel two as well so\nmake sure to bind label two so we have\nlabel one binded it's just called label\nand the same thing with label two\nall right let's see what happens i'm\ngoing to attempt to drag\nlabel 2. the label 1 is moving that's\nbecause\nwith our functions we stated we're\ngetting the coordinates\nand we're storing them within the\nattributes of label\n1 and not necessarily label two so in\norder to make\nthese functions compatible with all\nwidgets\nwe can actually add one line of code\nwidget equals event dot widget\nso this is going to get the widget of\nthe event that we're dealing with\nand we're going to temporarily rename\nthis as widget\nso now we're going to replace all\ninstances of where we use\nlabel and replace it with widget\nbe sure to do the same thing too with\ndrag motion\nand then we will need to add this line\nat the top of\ndrag motion so now\nthese functions are now compatible with\nany widget that we create\nand we should be able to drag and drop\nboth\nwidgets all right well that's the basics\nof dragging and dropping widgets in\npython if you want a copy of all this\ncode i'll post all of this in the\ncomments down below\nbut yeah that's the basics of dragging\nand dropping widgets in python\nhey what's going on everybody it's your\nbro here hope you're doing well and in\nthis video i'm going to teach you guys\nhow we can move an image\non both a window and a canvas in python\nso sit back relax and enjoy the show\nall right my fellow bros i'm going to\ndivide this video into\ntwo different sections in the first\nsection we're going to move a widget\nwithin a window\nand in the next section we're going to\nmove an image\non a canvas so let's begin by moving a\nwidget within a window\nso we'll need a window window equals tk\nfollowed by window.mainloop and we'll\nalso need to set some geometry for this\nwindow\nwindow dot geometry let's make this\n500x500\n500 x 500 and let's take a look\nokay that should be a decent size let's\nadd a label to this window\nso i actually have a race car image that\ni want to use if you would like an image\nfeel free to pause the video and\ndownload one\nwhat i would like to do is create a\nphoto image from this png file that i\nhave\ni'm just going to call this my\nimage equals photo\nimage file equals since this is within\nmy project folder i can just list the\nfile name\notherwise you might have to list the\nfile path and for me this is called\nracecar.png\ni want to add this image to my label not\nnecessary but\nit'll be helpful for this example i'm\ngoing to call my label just a label\nlabel equals label i'm adding this to\nthe window and i'm going to set the\nimage to equal\nmy image that i created it's a photo\nimage\nif you do not have an image that you\nwant to use you can simply\njust change the background color you\ncould say bg\ni don't know red\noh then we need to place this so be sure\nto do that\nlabel dot place and i'm going to place\nthis in the top left corner that is\nwhere x\nequals zero and y equals zero and then\nwe should have a race car\nor whatever image you used and a red\nbackground you can get rid of the\nbackground color if you prefer\nthat's just if you don't have an image\nto use you can set the background color\njust for a\nvisual to show you where the label\ncurrently is\nlet's set some key bindings for this\nwindow and let's add them maybe here\nbefore we create the label and our image\nso let's find the w key for up s for\ndown\na for left and d for right so we do that\nwith\nwindow dot bind and we pass in an event\nas well as a function name so we want to\ntie the w key to a function and we'll\ncall this\nmove underscore up and then we will need\nto define this\nso outside of the window let's define\nmove underscore up and this takes\nan event so we'll place that as a\nparameter\nand to move our label up we're going to\ntake\nlabel dot place\nand we're going to place this at some\nnew coordinates\nx equals the label's current position\nrelative to the window that it's in so\nthat is label\ndot w info\nunderscore x\nall right so then for y it's similar\ny equals label dot w\ninfo underscore y\nbut we're going to subtract maybe one\nall right so this is all we need\nalthough this is only going to move up\nso i'm going to press\nw and our label our race car or whatever\nimage you used is going to move\nslowly up i'm going to increase this to\n10 so the change is more drastic\nso now our race car is drifting off into\nspace\nlet's find a few other keys s a\nand d sad all right so\ns will be down move underscore down\na for left move left\nand d for right move\nright we'll just copy what we have here\nand make a few changes\nlet's begin with move down\nthe only thing we're going to change\nwithin here is in place of subtracting\n10\nfrom the y coordinate we're going to add\n10\nand with our race car oh i guess we have\nto define these so let's do that real\nquick\nuh so we have left\nmove left we're going to subtract\n10 from the x coordinate and keep y the\nsame\nand then the same thing for move right\nmove\nunderscore right and this time we are\ngoing to add 10\nto x and y will stay the same\nokay now with our image we can move up\ndown right and then left\nand y stop there we combine these to our\narrow keys\nso up is just up with a capital u\ndown is down these are all capital by\nthe way\nleft is left and then right is right\nand now i can use my arrow keys to move\nthis image\nnow for this part of the video i'm going\nto teach you guys how we can move an\nimage on a canvas this time and not just\nwithin a window\nbut we'll need a window to begin with\nwindow equals tk followed by\nwindow.mainloop\nand we're going to create a canvas\ncanvas equals canvas\nwe're adding this canvas to the window\nand let's set a width and height\nfor the width let's make this 500 and\nthe height 500 as well\nso this is an even square and we'll need\nto\npack or place this canvas canvas.pack\nshould take care of that\nand let's run this and this is our\ncanvas\nat this step we need to add an image to\nour canvas and i have an image of a\nracecar that i want to add\nso i need to create a photo image from\nthis file\nso we can do that let's give this photo\nimage a unique name i'm just going to\ncall this photo image to keep it simple\nphoto image equals photo image and i can\nlist the file path or the file name\nsince\nthis image is within my project folder i\nonly have to list the file name\nand my file is called racecar.png\nthis next step we need to give our image\na unique name\nthe image that's being added to the\ncanvas i'll call this\nmy image equals\nand we need to turn this photo image\ninto an image added to the canvas\nso we type in the name of the canvas\ncanvas\ndot create underscore image\nwe first need to list the coordinates of\nwhere we want to place this photo image\nso let's place this in the top left\ncorner that is where\nx is 0 and y 0 and we need to set the\nimage of the image that we're creating\nso we can do that with saying\nimage equals the name of our photo image\nand let's see what we have so far so\nthis image is somewhat cut off in the\ntop left corner we can easily fix that\nby anchoring\nour image when we create it so let's at\nthe end add\nanchor equals northwest\nso that should fix that problem and we\nnow have our image that we want to use\nand to move our image we can set some\nkey bindings\nso we type in the name of the window dot\nbind\nand we pass in two arguments an event as\nwell as a function name\nlet's tie pressing the w key to moving\nup\nso the first argument is going to be w\nand the second is going to be\na function name so let's say move\nunderscore up\nand let's find some other keys\nw for up s for down\na for left and\nd for right\nwe'll need to define these now so at the\ntop outside of the window\nlet's begin by defining move up\ndef move up this has an event as a\nparameter\nand let's create the other definitions\nhere\nso i'm just going to rename these so we\nhave move\nup move down move left\nand move right okay now this next step\nwe can use the canvases move function to\nmove an image\na certain amount of pixels on the x-axis\nand\ny-axis so let's begin with move up we\ntype in the name of the canvas\ndot and use the move function and this\nhas\nthree arguments the image that we want\nto use\nand this image is called my image the\none with the race car\nthe next argument is the amount of\npixels we're moving this on the\nx-axis with up we can keep this the same\nbut on the y-axis let's say we want to\nmove this\nup 10 pixels so that would be -10\nand let's repeat the process for move\ndown move left and move right\nfor move down we're going to change\ny to 10 for move left\nwe'll keep y the same at zero but we're\ngoing to subtract\n10 and then move right\nwe are going to add 10 to our x's\nand that should be it so we can move up\ndown right left\nand if you want to bind these to some\narrow keys\nall we have to do is just change the\nevent\nso we can bind these to our wsad keys\nas well as up\ndown left\nand right and this time i'm going to use\nmy arrow keys\nup down right and left\nall right so that's a few of the basics\nof moving either widgets or\nimages on a canvas or window if you\nwould like a copy of all this code for\nboth examples i'll post both of them in\nthe comments down below\nbut yeah that's the basics of moving\nwidgets and images\nin python hey what's going on everybody\nit's your bro here hope you're doing\nwell and in this video i'm going to\nteach you guys how we can create some\nsimple 2d animations in python so sit\nback relax and enjoy the show\nalright my fellow bros in this video\nwe're going to be animating an image on\na canvas we're only going to be moving\nthis image\nup down left and right feel free to\ndownload an image that you want to use\ni'm just going to use this\nufo emoji that i found so we'll need two\nimports\nat the top from tk enter import\neverything that's what we usually have\nwe'll also need to import time as well\nwe'll need a window window equals tk\nfollowed by window.main loop\nwe'll need a canvas i'm going to call\nthe canvas canvas\ncanvas equals canvas we're adding the\ncanvas\nto the window i'm going to create\nsomething that's called a\nconstant we're going to create a\nconstant for the width and the height\nof our canvas so a constant is a\nvariable or value that you don't plan on\nchanging later at all\nand a common naming convention for a\nconstant is that the name of the\nconstant is\nall uppercase so i want the width and\nthe height\nof this canvas to be constants so for\nthe width this is going to be\nall uppercase it's not necessary to make\nit all uppercase\nbut that's a common naming convention\nfor the width i'm going to set this to\n500\nand the height set to 500 as well\nand for the width of this canvas i'm\ngoing to set the width\nto equal my constant which is 500\nand the height to my constant height\nso the reason that i'm making constants\nis that we'll be reusing these a lot\nlater in this program so we might as\nwell just declare them now and get it\nover with\nso for the canvas we're adding this to\nthe window we're setting the width to\nour constant of width and the height to\nour constant of height\nand we need to follow this by packing\nthis or place\ncanvas dot pack pack to make it simple\nso we should have a canvas on our window\nnow if you have an image that you want\nto use we're going to animate it\ni need to create a photo image from this\nfile it's a png file it's called\nufo but yours is probably going to be\nnamed something different so\ndon't copy me exactly i need to create a\nphoto image from this\ni'm going to call this photo underscore\nimage but name it whatever you want this\nequals\nphoto image and i need to list the file\npath or the file name\nsince this file is within my project\nfolder i only have to list the file name\nand for me this is called ufo.png\nour next step is that we're going to\ntake our photo image and add this photo\nimage to the canvas\nand we'll also give this image a unique\nname i'm going to call this my\nimage equals we're going to use the\ncanvases\ncreate image function so canvas dot\ncreate image there's a few arguments\nthat we need to pass\nin where we want this image to appear we\nneed a set of coordinates\nif we want this to appear in the top\nleft corner that is where x\nis zero and y is zero for the image\nwe're going to set this equal to\nour photo image whatever you named this\nand lastly we should anchor this i'm\ngoing to anchor this in the northwest\ncorner to keep it simple\nand we should have our image on our\ncanvas in the top left corner\nand here is my ufo that's being piloted\nby a green alien that's waving to me\naliens are usually not that friendly\nunless they're abducting you our next\nstep is to create a\nwhile loop so we'll say wow true this\nwill continue forever until we close out\nof the program\nif you're looking at the code for a game\nthis might say instead\nwhile running running will be a boolean\nvariable that contains either true or\nfalse so if this is true while the game\nis running\nthey're going to continue moving all of\nthe characters on the screen\nand then if somebody pauses the game or\ncloses out of the game\nthen they'll flip this running variable\nto false but to keep things simple we'll\njust say wow\ntrue but that's something that you might\nsee what we'll want to do is get the\ncoordinates of our image\nwithin the canvas and this will return a\nlist of coordinates\nso let's create a list called\ncoordinates so\ncoordinates equals canvas\nand we can use the chords function to\nget the coordinates\ni guess that's short for coordinates and\nwe're getting the coordinates of\nmy image so we'll pass this into this\nfunction\nand then let's print this just to see\nwhat this returns\nwe'll print coordinates\nokay now to update the window after each\ncycle\nof this while loop we can use the update\nfunction of our window\nso window.update will also have this\nthread sleep for let's say 0.01 seconds\nso time dot sleep 0.01 one\nso here's a quick rundown of what we\nhave going on so far within this while\nloop\nwe're going to first get the coordinates\nof where our image\nis located we'll print the coordinates\nto the console window\nthis part isn't required but it's going\nto help us for learning purposes\nwe'll update this window for any changes\nand then our thread\nwhich is in charge of running the\nprogram is going to sleep\nfor i believe that's a hundredth of a\nsecond\nso when we run this our image is staying\nin place\nand we know that our while loop is\nrunning because it's continuously\nprinting the coordinates\nthe first number is the x position\nthe second number is the y position and\nnow we're going to give our image a\nspeed\nor velocity i like to call it velocity\nand in fact i'm going to give this image\ntwo velocities\none for how fast this image is moving on\nthe x-axis\nand another for how fast it's moving on\nthe y axis\nso i'm going to create two variables one\ncalled x velocity\nand i'm going to set this equal to one\nand y velocity\nand i'll set this to one as well okay\nso what we need to do now is update\nthe position of our image so let's do\nthat before we update\nour window so i'm going to type in the\nname of the canvas\nand use the move function this move\nfunction takes three arguments\nwhat you want to move i want to move my\nimage my ufo\nand how far i want to move this image on\neach axis each coordinate\nso what i want to do is update the\nx velocity the x position of my image\nso i'm going to pass in my x velocity\nvariable and then y we'll just keep the\nsame for now so we'll just say\nzero so after each iteration of this\nwhile loop\nmy ufo is going to move one pixel to the\nright\nand it's just going to go off into the\nvoid forever and now\nif we replaced x velocity with zero\nand for y we set this to our y velocity\nthis image is now going to travel down\nand it will continue into the void\nforever\nand then if we combine both of these\ntogether\nwe're going to move diagonally down and\nto the right\nso what if we want this image to bounce\noff the walls we're going to add some\nif statements we're going to begin by\njust having this image bounce off the\nleft and right walls\nfor now let's set y velocity to zero so\nthat this image is only moving\nleft and right so before we move this\nimage we'll add an if statement we're\ngoing to check to see\nif the x position of our image\nis either greater than the width of the\ncanvas\nor if it's less than zero so we take\nour coordinates and we're going to get\nthe first element from this list\nso that is zero that is x the x value\nif coordinates at element zero is\ngreater than or equal to\nthe width of this window and this is a\nconstant\nso we can just place that here if\ncoordinates\nwell x within our coordinates is greater\nthan or equal to width\nor coordinates at index\n0 is less than 0 then we want to reverse\nthe direction or flip the velocity\nso we want to change our x velocity and\nmake this a negative number\none easy way to do that is that we can\ntake x velocity\nequals x velocity times negative one\nor another way of writing this is just\nto say x velocity\nminus negative velocity now what ends up\nhappening\nis that when this image reaches the\nright border it's going to bounce back\nhowever it only bounces back after it\nreaches\nthe top left corner of the image we need\nto factor in\nthe width of the image as well so we're\ngoing to create\ntwo new variables and let's do this\nright before the while loop\nwe'll want to determine what the height\nand the width are for our photo image\nthat we have\nso this is what we're going to write\nlet's call these two values\nimage underscore width and\nimage underscore height\nso we need to determine what the width\nand the height is\nfor our photo image and there is a\nfunction to do that\ntype in the name of the photo image dot\nand there is a width\nfunction and the same thing for height\nphoto image dot height\nand then we can reuse these so i'm just\ngoing to add\none line to the sift statement if\nthe x position of our image is greater\nuh greater than\nor equal to the width of our window\nminus the width of our image and i'm\njust going to put these within\nparentheses just to keep these more\norganized\nand what ends up happening now is that\nwhen\nthe right portion of our image hits the\nright wall it's going to bounce off\nand let's do the same thing for our y\nvelocity\nwe're going to replace coordinates at\nindex 0 with 1 and change that here as\nwell\nreplace with with height\nand this is image underscore height\nand we're going to change the y velocity\nthis time\nand when we move this image let's also\nadd the\ny velocity\nand now our image is just going to\nbounce off the walls forever\nbut it's kind of predictable since we\nset x and y\nto equal one now let's change the speeds\nto kind of spice things up\nlet's say for the x velocity this is\nthree and y velocity this is now two\nthis is going to go in a completely\ndifferent direction\nso you can mess with the speeds however\nyou want so\nguys how about we add a background image\nto this well because we can\ni'm going to reuse this image of space\nfrom my java video on this same topic\ni need to create a photo image from this\nand i'm going to copy what we did for\nour normal image that we were moving and\nanimating\nso this is called space.png well that's\nthe name of my file\nand i'm going to give this image a\ndifferent name maybe i'll call this\nbackground underscore photo\nand then i'm going to add this photo to\nthe canvas\nand i'm going to call this a different\nname\ni'll just call this background all right\nso\nour window should have a background now\nand then our image moves on top of the\nbackground\nso make sure you add and create the\nbackground before you add any other\nimages\notherwise the background might overlap\nyour image\nalright so that's the basics of some\nsimple animations in\npython if you want to copy all this code\ni'll post all of this in the comments\ndown below\nbut yeah that's the basics of some\nanimations in python\nhey what's going on everybody it's your\nbro here hope you're doing well and in\nthis video i'm going to teach you guys\nhow we can animate multiple objects in\npython so\nsit back relax and enjoy the show\nwelcome back my fellow bros in this\nvideo we're going to be animating\nmultiple objects within a window\nmore specifically we'll animate some\ncircles and each of these circles will\nhave their own characteristics\nspeeds and directions so we'll need two\nimports to begin\nfrom ck enter import everything we'll\nalso be importing everything from the\ntime module as well\nwe'll need a window window equals tk\nfollowed by window.main loop\ni'm going to create two constants one\nfor the width and one for the height\nlet's set the width equal to 500 and the\nheight equal to\n500 as well we'll create a canvas and\nwe'll be animating\nthe circles that we're going to create\non the canvas so let's create a canvas\ncanvas equals canvas\nwe're going to be adding the canvas to\nthe window and we'll set the width of\nour canvas equal to our constant width\nwhich is 500 and our height equal to our\nconstant of height\nwhich is also 500 and we will add this\ncanvas by using the pack function\ncanvas.pack here's our canvas and we're\ngoing to be creating multiple circles\nlet's pretend that they're all different\nsports balls like a tennis ball baseball\nvolleyball bowling ball\nthey'll all be bouncing off of the\nborders and once\neach of them encounters a border they\nwill change direction\nsince we're going to be creating\nmultiple objects i think it's best if we\ndo this with another class\nso let's create another class i'm going\nto go to file\nnew python file and let's call this\nclass\nball and click python file and we need\nto define\nthis class class ball\nand we also need a constructor for this\nball class\nwe can create one with def two\nunderscores\ni-n-i-t two underscores again\nand we can set up the parameters of what\nwe want to receive if we were to create\na ball\nobject so let's pretend that\nwe're going to be creating a volleyball\nto begin with so\nlet's call this ball volley\nunderscore ball equals\nball and we'll pass in some arguments so\nlet's set up the parameters first\nwhat do we want to receive one we want\nto receive\nour canvas so that we can actually draw\nthis oval we can draw this ball\nwe should also have an x and y position\na diameter\nx velocity y velocity\nand a color all right so\nwhen we create a ball like a volleyball\nwe're going to pass\nin whatever the parameters require so we\nneed a canvas\nx y a diameter an x velocity\ny velocity and a color so within the\nconstructor for the ball\nwe're passing in our canvas it's kind of\nlike what we do with widgets\nwe're specifying what we're going to be\nadding this widget to\nwe're going to be adding this ball to\nour canvas we also need\nx y and a diameter let's make this\nsimple by setting x and y to both zero\nfor the diameter let's set this to maybe\n100 and we also need an x velocity and y\nvelocity\nlet's set this both to one and a color\nso let's pass in a string\nlike white let's head back to our ball\nclass and finish assigning\nall of these arguments that we're going\nto receive the first step is that we'll\nsay\nself dot canvas equals\nthe canvas that we receive when it's\npassed to us as an argument\nour next step is to draw this oval draw\nthis ball\nand we'll say self dot image\nequals canvas dot create\nunderscore oval and with creating ovals\nwe can pass in x y\nand with circles the diameter is equal\nfor both the width and the height\nso we'll pass in our diameter twice\nand lastly a fill color\nand we'll say this is equal to the color\nthat we receive\nwhich is white\nwe're going to set the x velocity and\nthe y velocity\nthis is related to the direction that\nit's initially going to head in\nso self dot x velocity\nequals the x velocity that we receive\nand we'll do the same thing for y\nvelocity\nself.y velocity equals y velocity\nnow since this is in another class we\nneed to import this class\nfrom ball import\neverything and you can see that this red\nunderline went away\nso let's see what happens now\nwe have our volleyball but it's not\ncurrently moving\nso that's the next step so let's create\na function\nwithin the ball class called move that\nwe can call upon\nso we'll do this after the constructor\ncef\nmove and this will take self as an\nargument\nthe first thing that we should do is get\nthe coordinates\nso we'll say coordinates and this is a\nlist coordinates equals\nself dot canvas dot\nc o o rds\nand we'll pass in self dot image\nand we will print these coordinates just\nto see what's here\nall right now we'll create a while loop\nwithin our main class\nso let's add that near the end and we'll\njust say\nwhile true so while this is running\nlet's move our volleyball so volleyball\ndot move so this will call the move\nfunction of our volleyball\nand then we will update the window\nwindow dot update so that this refreshes\nand we will sleep for maybe a hundredth\nof a second\ntime dot sleep 0.01 but you can put\nwhatever you want here\nso this is going to at first just print\nthe coordinates of this ball\nso it's not currently moving and this\ntime with our list we have\nfour coordinates zero zero that's the\ntop left corner and 100 100 that's the\nbottom\nright corner so this time we have four\ncoordinates that we have to deal with\nthe top left corner as well as the\nbottom right corner\nour next step is that we should move\nthis image\nself dot canvas dot move\nwhat object are we going to move we're\ngoing to move self\ndot image and in what directions\nself.x velocity as well as\nself dot y velocity now\nour ball is going to move across the\nwindow and it right now it's displaying\nall of the coordinates\nwe don't have any bounds set up so it's\njust going to continue into the void\nforever so we should set up some if\nstatements to check to see if one of the\nborders\ntouches one of the walls of the window\nif so it's going to change\ndirection so let's check to see\nif the left or right side of our ball\ntouches one of the left or right borders\nso let's write an if statement if\nand then let's take a look at these\ncoordinates if\ncoordinates at index 2\nthat is this one 0 1\n2. so this is the bottom right corner\nwith these two sets of coordinates if\ncoordinates at index 2\nis greater than or equal to\ni'm going to put these within\nparentheses self\ndot canvas and we need to get the width\nof the canvas\none way which we can do that is to use\nthe w\ninfo underscore with function\nso this is going to get the width of the\ncanvas\nand then let's add one more thing\nor coordinates at index\nzero is less than zero\nso if this ball touches the left or\nright border\nwe want to change direction so we can\nflip\nthe x velocity self.x velocity\nequals negative self x\nvelocity and let's do the same thing for\nthe top and bottom borders\nso let's copy what we have\nand we'll replace coordinates at index\ntwo with\nthree and we'll also replace\nw info underscore width with height\nand coordinates at index one\nchange self dot x velocity with y\nvelocity\nsame thing here as well alright and\nthat should be everything let's try it\nso let's see if this ball actually\nbounces off the borders\nwhich it does pretty cool so that's\neverything we need to do within our ball\nclass\nnow if we need to create multiple balls\nwe can just construct them\nso let's say this time we would like a\ntennis ball\ni'm going to name this volleyball as\ntennis ball and\nlet's make the diameter smaller like\nfive but we'll make this a lot faster\nlike\nfor the velocity let's say four and\nthree and the color\nlet's make this yellow and we also need\nto call the\nmove function of this tennis ball so\nwithin the while loop\ntennis ball dot move and then we should\nalso have a tennis ball moving across\nthe screen\nin a different direction now technically\nwe don't need to print the coordinates\nbut i tend to do that just for\nteaching purposes to better demonstrate\nall of this\nnow our ball class is acting as a\nblueprint\nfor how balls should be created and the\nbehavior that they exhibit\nand if we need to create a ball we can\njust come up with a name for the ball\nand call the ball constructor to take\ncare of that for us\nkind of like what we've been doing with\nwidgets so all we need to do to create\nanother ball\nis come up with a unique name for the\nball and instantiate it using\nour ball class that we created so this\ntime let's create\na basketball i'll rename this as\nbasketball\nand we'll pass in different arguments\nbased on how we want to customize\nthis unique ball so for the diameter\nlet's say this is now 125\nand the x and y velocity let's set this\nto something very fast like\neight and seven and with the color let's\nchange this to orange\nand make sure you also call the move\nfunction\nso basketball dot move and we should\nhave a basketball moving across the\nscreen\nall right everybody so that's the basics\nof animating multiple objects in python\nif you want\na copy of all this code i'll post all of\nthis in the comments down below\nbut yeah that's how to animate multiple\nobjects in python\nhey what's going on everybody it's ibro\nhere hope you're doing well and in this\nvideo i'm going to teach you guys how we\ncan create a clock program in python so\nsit back relax and enjoy the show\nall right my fellow bros in this video\nwe're going to be creating a clock\ngui program so we'll need a few imports\nfrom\ntk enter import everything\nand from time import everything as well\nwe'll need a window window equals tk\nfollowed by window.main loop\nand in this program we're going to be\ncreating three separate labels\none for the time another for the day of\nthe week and another for the date\nso let's begin with just displaying the\ntime and work on the day of the week and\nthe date later\nso let's create a label for the time\ncalled time\nlabel equals label we're adding this to\nthe window\nand let's set the font because we can\ni'm going to choose\nmaybe ariel and then a size of 50 so\nthat this is somewhat large\ni'm going to change the foreground color\nthat is the font color\nand i will pick a hex value of green so\nthat is\n0 0 f 0 0 but feel free to pick whatever\ncolor you want\nand i'm also going to set the background\ncolor and you can pick a hex value or a\ncolor name i'm just going to say black\nand then i'm going to pack this label\ntime label dot pack\nnow we're going to call a function and\nwe'll call this update\nand we'll define what this does after\nevery second has passed\nwe will use a recursive function to keep\non updating the\ntime every one second or so so let's\ndefine what this function does\ndef update\nthere is a function within the time\nmodule called strf time\nwhich we can use to return the current\ntime and format it however we want\nso we're going to actually place this\nwithin a string variable and we'll call\nthis time\nstring and this function is strf\ntime i'm actually going to go to\npython's website just to give you an\nexample of how this works\nhere we are on python's website and this\nis the\nstrf time function and this converts a\ntuple representing a time as returned by\ngm time or local time to a string\nas specified by the format arguments\nso when we call this function we can\npass in\ndirectives as arguments based on what we\nwant to display\nif we want to display the current time\nthere is a few directives that we can\npass in\nso let's say that we want a 12 hour\nclock as represented by a decimal number\nbetween\n1 and 12 well we would pass in percent\ni as an argument if we want the minutes\nthat would be\nright here percent m and if we want the\nseconds that is\npercent s so we're going to pass in\nthese directives\nas if they are arguments so within\nthis function we'll pass in those format\nspecifiers or directives so i want\npercent i followed by\npercent m and percent\ns alright uh but these also have to be\nwithin quotes so don't forget that\nbecause i just did\nokay this will display the current time\noh then we also have to update our time\nlabel so\ntime label dot config\ntext equals our time string because\nremember that this\nreturns a string of text\ntext equals time string so this will\ndisplay the current time\nand right now it is six in the morning\nor so\nhowever we just get one long jumbled\nnumber\nso it would be a good idea if we\nseparated some of these numbers\nso within our strf time function i'm\njust going to add some colons to\nseparate these values\nand this will display the current time\nit is currently 6\n46 in the morning let's add am or pm to\nthe end of this\nso the directive for that is percent\nlowercase p\n6 46 am now how do we update this label\nevery one second to reflect the current\ntime\nwell that's a good question and i'm glad\nyou asked it so we're going to use\nthe time labels after function\nwe pass in a delay and then a function\nthat we want to call\nafter that delay so let's say we want to\ncall this function update every 1000\nmilliseconds\nor one second so we'll pass in the delay\nas an argument\n1000 milliseconds and the function that\nwe want to call\nand we're going to perform what is known\nas a recursive\nfunction we're going to call a function\nwithin itself so after 1000 seconds\nwe're going to call\nupdate again and it's going to repeat\nthe process it's going to return the\ntime\nand format that time and update\nour label with the new time so what ends\nup happening now\nis that our clock is going to update\nevery 1000 milliseconds\nnow let's add a few other labels let's\nsay the day of the week\ni'm going to copy what we have here and\nlet's rename this as\nday label\nbut i probably don't want this to be the\nsame size for the font let's say\nink free because i like that font and a\nsize of maybe 25 and i'll get rid of the\ncoloring\nit's the same process as before really\nso let's replace\ntime string with day string\nthe directive for strf time to display\nthe day of the week\nis percent a\nand we're going to replace time label\nwith\nday label text equals day string\nand this will display the day of the\nweek and it is currently\nwednesday and if we want to display\nthe current date we can create a label\nand we'll call this\ndate label\nand i'll make the font slightly bigger\nmaybe 30.\nwe'll copy what we have for our day\nstring\nand rename this as date string\nso we have a few options for the date i\nwant to display\nthe name of the month the day and then\nthe year\nso that would be percent capital b\npercent lowercase d i'm going to add a\ncomma to separate the day and the year\nand percent capital y\nand then i want to set the text of my\ndate label\nto my date string so that this will now\ndisplay the current date there's just\none quick change that i think we should\nmake\nright now we have three different labels\na time label a day label\nand a date label and right now we're\nusing the after function of the time\nlabel\nso since we have all of these different\nlabels i think we should replace time\nlabel\nwith our window because our window has\nan after function as well\nso that after 1000 milliseconds has\npassed\nwe can update the time the day of the\nweek\nand the date all right so that's the\nbasics of creating a simple clock\nprogram in python if you want a copy of\nall this code\ni'll post all of this in the comments\ndown below but yeah that's the basics of\ncreating a clock in python\nhey what's going on everybody it's you\nbro hope you're doing well\nand in this video i'm going to show you\nall how we can send an email using\npython so\nsit back relax and enjoy the show\noh a quick note for you all you're going\nto need a gmail account to sign into\nas well as your username and password so\nonce you have those set you're ready to\nbegin\nall right let's begin by importing the\nsimple mail\ntransfer protocol library we'll need a\ncouple variables to hold strings\nlet's say we have a sender a receiver\na password\na subject for your email as well as\na body for the email okay sender is\ngoing to be you\nsending the email so enter your email in\nhere i'm just going to make up one\nyou at gmail.com\nactually sender would be better i would\nsay let me change that sender at\ngmail.com\nlet's say we have a receiver this is who\nyou're going to send the email to\nreceiver gmail.com\ndon't actually enter in these emails use\nyour owner the person that you intend to\nsend the email to for your test\nbecause these will probably not work i'm\nassuming\nthen enter the password for your gmail\naccount so let's say\npassword123 and a subject\nuh let's say python email\ntest and a body what do you want to say\nwithin your email\ni wrote an email\nokay so that should be good so remember\nthat you're going to want to change\nthese to your actual\ngmail account and you'll want to send it\nto a valid email address too\nand make sure that you use your password\nfor your gmail account\nokay now we're going to create a header\nfor our email and the syntax on this is\na little strange we're going to say\nmessage\nf and then triple quotes so what this\ntriple quotes is\nis that a triple quote string can span\nmultiple lines of text so the first\nthing we'll enter is\nfrom within our header from and then\nsince we're using an f-string we can\ninsert\na variable at a given location when we\ninsert\na pair of these curly braces so from\nwill be sender the next line\nto colon\nreceiver then the next line\nsubject colon\nsubject this will be the title of the\nemail then i'm going to add a new line\nand then insert the body\nand if you want you can give yourself a\nname when you send this email\nlet's say maybe snoop dogg and if\nthere's somebody you want to send the\nemail to\nand give them a name you can say like\nnicholas\ncage but these aren't necessary\nokay so we have our header completed let\nme just add a note that this is our\nheader\nokay we're going to create a server\nobject\nserver equals smtplib.smtp\nthere are two arguments the first is\nsmtp\nthe other argument is the port number\nand that is going to be\n587 that is the default mail submission\nport\n587 now we're going to take our server\nobject\nand start tls transport layer security\nokay now we need to log in so server\ndot login we will pass in\nour sender email that's us as well as\nour password\npassword and let's print\nlogged in\nwe'll eventually place all this within a\ntry and accept block later\nall right and then to send an email type\nserver dot send mail\nand we pass in our self sender\nreceiver and our message\nsender comma receiver\ncomma message and let's print a\nconfirmation\nprint email has\nbeen sent now if you were to run this\nprogram\nyou may encounter this error smtp\nauthentication error that either means\nyour username\npassword combination was not correct or\nyou need to turn on\nthe less secure app access on your gmail\naccount\nwhich you can find here however i would\nrecommend turning that back off when\nyou're done with this program just\nbecause\nyour account will be less secure and i'm\nnot liable if you get hacked hey you\nknow what\nlet's place this code within a try block\nwe will try\nall of this code and then if we\nencounter\nthis exception we can catch and handle\nit properly\nso we will try these four lines of code\nand we will handle\nour exception of smt lib dot\nsmtp authentication error\nthat means we could not sign in so let's\nprint\nunable to sign in\nso i'm going to run this one more time\nand instead of getting that ugly error\nwe should get a simple message that says\nunable to sign in once you have the\nproper username password combination for\nyour gmail account\nand if you need to set less secure app\naccess to on\nbut make sure that you turn it back off\nwhen you're done with this you should be\nable to send an email\nlet's try it logged in email has been\nsent\nhere is a snapshot of the email that i\nreceived\ni blurred out my actual email because i\ndon't want it public because\nsome of you guys are weird so we have\nour sender\nour receiver and i gave myself a\nnickname of snoop dogg that's why it\nsays snoop\nto nicholas the receiver but you don't\nactually need a name for these as long\nas you have the sender and receiver\nfields filled in you should be good\nwe have our subject python email test\nas well as our body i wrote an email\nwell everybody that's how to write and\nsend a simple email using python if you\nwould like a copy of this code i will\npost this to the comment section down\nbelow\nbut yeah that's how to send a simple\nemail using python\nhey what's going on everybody it's you\nbro hope you're doing well\nand in this video i'm going to show you\nall how we can run a python file using\ncommand prompt so\nsit back relax and enjoy the show\nhey y'all in today's video i'm going to\nshow you all how we can run a python\nfile with command prompt\nso first we'll need a script to work\nwith let's just make a very simple\nprogram\nlet's say print hello world and then\nmaybe we will ask\nfor some user input name equals input\nwhat's your name and then at the end\nwe will print the word hello\nplus the user's name okay so\nlet's save this to a place that will\nremember perhaps\nmy desktop now to save this file to a\nseparate location go to\nfile save as you can pick a name for\nthis python file\nthen to directory click these three dots\nand pick a location you want to save\nthis to\nto make this easy i'm going to save this\npython file to my desktop\nand then click ok so the name of this\npython file of mine\nis hello underscore world dot py then\nclick ok\nnow our second step is to open command\nprompt to open command prompt just\nsearch for\ncmd if you're using mac i believe it's\nterminal\nstep number three is that we need to\nnavigate to the directory that contains\nour python file i saved this python file\nto my desktop\nso if you right click on your file and\ngo to location you can just copy this\naddress\nnow within command prompt type cd to\nchange directory\nspace and then paste that directory\nthat contains your python file hit enter\nand for the last step we need to invoke\nthe python interpreter by typing\npython space and then\nthe name of the script and the name of\nmy script is hello\nunderscore world dot p y hit enter to\nrun the script\nhello world what is your name bro hello\nbro\nso that is how to run a python file with\ncommand prompt i will post all of these\nnotes to the comments section down below\nand well\nyeah that's how to run a python file\nwith command prompt\nit's you bro hope you're all doing well\nand in this video i'm going to show you\nall how we can use pip for python to\ndownload packages and modules so sit\nback\nrelax and enjoy the show\nalright people pip for python pip is a\npackage manager for packages and modules\nfrom the python package index if you're\nusing\npython version 3.4 or above pip should\nalready be installed\nif you're using a python version below\n3.4\none option is that you can always update\nyour version of python just click\ndownload open when done\ngo to customize installation make sure\nthat pip\nis checked go to next and add\npython to environment variables then\ninstall\nnow to use pip open up command prompt\nand type pip\nfor a help menu all sorts of different\ngeneral options and commands will appear\nif you need to check\nyour version of pip type this command\nand here's a cheat sheet that i wrote\nso to check the current version of pip\ntype pip\ndash dash version enter\nand currently the version that i'm using\nis 21\nif you need to upgrade pip use this\ncommand pip\ninstall dash dash up\ngrade pip mine should be the latest\nversion\nyeah requirement already satisfied and\nif you need a list of installed packages\ntype\npip list\nso here's all of the packages that i\ncurrently have installed\nsome of these you might recognize like\nnumpy\npie game pie installer those are just a\nfew to check to see if any of your\npackages\nare outdated type pip list\ndash dash outdated\nand this might take a second here are\nfour packages that are outdated on my\ncomputer\nbabel pi game pi tz and setup tools\nif you need to upgrade one of your\npackages type pip\ninstall the name of the package let's\nsay that i would like to update pygame\nthen dash dash upgrade\ni just realized that in my notes i'm\nmissing updated package so i just added\nthat here\nnow you can see that pie game has\nsuccessfully\nupdated and let's just check to see if\nit has by using\npip list outdated pip\nlist dash dash outdated\nand pi game is no longer in here so it\nis up to date\nand if you would like to install a\npackage type hip\ninstall and the name of the package you\nwould like to download\nlet's say i would like to download\npandas pip\ninstall the name of the package in this\ncase pandas\ntwo valley boring minutes later and it's\ndone\nso i should now have pandas installed\nand let me check\npip list\nand here it is i have successfully\ndownloaded the package of pandas\nso those are a few commands for pip and\nif you're interested in downloading more\npackages head to python's package index\non second thought i should probably show\nyou all where that is python's package\nindex\nis located at pipi.org\nand you can do a search for all sorts of\ndifferent projects and packages\nso everybody that is pip4 python i will\npost my notes in the comments section\ndown below\nand well yeah that's how to use pip for\npython\nhey what's going on everybody it's bro\nhope you're doing well\nand in this video i'm going to show you\nall how we can convert a python file to\nan executable\nso sit back relax and enjoy the show\nhere's a quick disclaimer before we\nbegin windows defender and other\nanti-virus programs may prevent your\nexecutable from running but if you head\nto the settings section of your\nanti-virus you can disable that so that\nyour python file can run\nalso please be sure that pip and pi\ninstaller are both installed and up to\ndate\ni have a separate video on that if\nyou're interested now the program that\ni'm going to be converting to an\nexecutable\nhas a gui portion to it i created a\nclock program in a previous video\nso i'm going to turn this clock program\ninto an executable\nnow i recommend creating a new folder on\nyour desktop just because this process\nis normally somewhat messy so we'll\ncreate a folder to contain it all\nnow copy any relevant python files and\nor images and paste them to within\nthis folder if you have an image that\nyou would like to set as an icon for\nyour executable\ni recommend moving that to the same\nfolder as well our next step is to open\ncommand prompt\nand we need to change the directory of\ncommand prompt so that it's pointing to\nthat folder that contains our python\nfile\nso on your python file right click on it\ngo to properties and copy\nthis location and in command prompt to\nchange directory type\ncd space and then paste that location\nnow here's the cheat code to convert a\npython file to an executable\nmake sure that pi installer and pip are\ninstalled and both\nup to date so type pi installer\ndash capital f to make all of this one\nfile\nif you need the terminal window in your\nprogram\nthen omit this next part since i'm\nrunning a gui application i do not need\nthat terminal window\nso to remove that window type dash w\nif you have an icon that you want to set\ntype dash\ni and the name of your icon however it\nshould be an ico file\nso if you have some other image that you\nwould like to convert to an ico file\nhere's how if you need to convert an\nimage to an ico file\nyou can just google convert to ico but\none website that i commonly use\nis icoconvert.com just pick a file to\nupload\nso choose file i'm going to convert this\npng file of an alarm clock\nupload it there is a bunch of different\nsettings you can use\nconvert ico and then download my icon\nand once your ico file is downloaded i\nwill drag and drop it to my folder\nand i will rename this let's rename this\nas\nicon dot ico and here's that cheat code\none more time pi installer dash f\ndash w if you do not need the terminal\nwindow\ndash i if you would like to add an icon\nthe name of your icon it should be an\nico file\nfollowed by the name of the python file\nand mine is named\nclock.p.y then hit enter\nalright looks like building our\nexecutable has completed successfully so\nopen that folder back up\nyour executable is located within this\ndist folder\ni would recommend just dragging and\ndropping it to your desktop\nand we can get rid of this old folder\nbut close out a command prompt and by\nclicking on this executable\nthis executable will now run my python\nprogram\nwell everyone that is how to convert a\npython file to\nan exe file i will post my notes to the\ncomment section down below\nand well yeah that's how to convert a\npython file to an executable\nwhat's going on everybody it's you bro\nhope you're doing well\nand in this video i'm going to show you\nall how we can create a basic calculator\nusing python so\nsit back relax and enjoy the show\nlet's create a calculator after\nimporting tkinter we'll need to define\nthree separate functions our first\nfunction will be named\nbutton press and there is one parameter\nwhich we will call num we're not going\nto fill this in quite yet we'll get back\nto it later we'll use\npass as a placeholder we'll also need an\nequals function to calculate our\nexpression\nand a function to clear our calculator\nokay that's it for our three functions\nlet's create a window\nwindow equals tk and at the end of our\nprogram\nwe'll write window.mainloop\nlet's set a title window\ndot title calculator\nprograms good but make sure you spell\ntitle right\nand let's set a geometry of\n500 500 should be decent\nnow we're going to create a string named\nequation\ntext equals a set of quotes\nthis will effectively be empty for the\ntime being\nand we'll need to create a string var\nand i will call this\nequation label equals string\nvar let's create a label\nlabel equals label we're adding our\nlabel\nto our window i will set our text\nvariable equal to our equation label\nyou can pick a font if you wish\ni'll set the background color equal to\nwhite\na width of 24\nand a height of two\nand we need to finish this by using\nlabel dot pack\nand we should have a blank label within\nour calculator\nthis will display our numbers that we're\nentering in or our expression\nokay this is the tedious part we have to\ncreate all of the buttons and i think we\nshould place these all within a frame\nframe equals frame we're adding our\nframe to our window\nframe dot pack\nnow let's create button one we'll do\nsome copying and pasting later\nso it's not as tedious so button one\nequals button we're adding our button to\nour frame\ni'll set the text equal to 1\nthe height equal to 4 and the width\nequal to 9 and a font size\nof 35\nokay we'll need a command command\nequals i'll write a lambda function here\nlambda we will call button press\ni think i'm going to put this on the\nnext line just so it's easier to read\nbutton press and we will pass in the\nnumber one\nand we need to add our button to our\nframe\nbutton one dot grid\nand i'm going to set a row equal to zero\nand a column\nequal to zero and let's just test it\nokay let's add the other buttons i'm\ngoing to copy and paste everything that\nwe have for button one\nand change button one to button two\nset the text equal to two pass into\nto button press and for the row and\ncolumn\ni'm going to set the column equal to one\nbut keep row the same\nokay button three\nit's gonna be the same process really so\ntext equals three\nbutton press three row zero column two\nand button four\ntext equals four button press\nfour column\nactually let's set this to row one\ncolumn zero and i need to change that\ntoo\nokay let's just double check this\nokay button five\nso button five text equals five\nbutton press five and\nlet's set column equal to one\nokay number six i told you all this is\ngoing to be tedious\nokay so row one column two\nbutton seven\nokay so row two column two\nactually let's change that to column\nzero\nmuch better okay\nbutton eight\neight eight eight eight\nrow two column one\nnumber nine\nrow two column two\nand lastly zero\nso button zero\ntext equals zero button press pass in\nzero\nand this will be row three column\nzero okay\nnot too bad now let's fill in some of\nthe symbols\nso we need plus\ni'm just going to rename this as plus\nthe text will equal the plus sign put\nthat within quotes\nand button press will be plus\noh and we should probably put this in a\nrow and column so let's say\nrow 0 column three\nso it should be on the right hand side\nhere\nokay we need minus\nlet's change plus to minus\nand place this at row one column three\nwe need multiply\nthat is an asterisk\nrow two column three\nand divide\nthat is a forward slash\nrow three column three\ni promise we're near the end of creating\nthese buttons we'll need an equal sign\nlet's say equal\nequal text\nis the equal sign and our command\nis going to be\nequals the function\nand this will be row 3 column 2.\nwe need a decimal\nlet's change the text to a decimal\nrow three column one\nokay and lastly we just need a clear\nbutton let's put this at the bottom\nso clear clear\nlet's set the text equal to the word\nclear\nand the command will be our clear\nfunction\nand i think i'm going to pack this at\nthe end\nbut let's change frame to window\nokay let's check out all these buttons\nokay not too bad i think i'm going to\nchange the width on our clear button so\nit's a little bit wider\nlet's change the width to 12.\nthat's a little bit better okay let's\nfill in some of these functions\nlet's start with button press we're\ngoing to state\nglobal equation\ntext then our equation text\nis equal to equation text plus\nwe're converting whatever number or\nsymbol that we receive\nto a string and our equation\nlabel which is a string var will be set\nto our equation text\nand let's test this\nso we can type in any combination of\nnumbers or symbols\nokay let's work on our equals\nfunction next so let's say\nglobal equation\ntext total\nequals\neval now eval will parse the expression\nthat we pass in\nequation\ntext\nand our equation label\nwill be set to whatever our total is\nand if we want to reuse our total let's\nset\nour equation text\nequal to total 2 plus 2\nequals four minus three equals one\ntimes five equals five divided by two\nequals two point five now what if we\ndivide by zero\nwell we'll run into that ugly zero\ndivision error\nso let's write our code within a try and\naccept block\nso i'm going to indent some of this\nand let's write try all of this code\nand we will catch a zero division error\nexception\nso accept zero division error\nand i will set our equation\nlabel set\nlet's say arithmetic\nerror equation text\nequals a set of quotes okay so we should\nbe able to catch this exception now\nfive divided by zero equals arithmetic\nerror\nnow what if we have a syntax here\nlike we type in just a bunch of symbols\nand hit equals\nwe'll probably want to catch the syntax\nerror as well\nso let's write an additional accept\nblock before\nzero division error or after i guess it\ndoesn't matter\naccept syntax\nerror let's change arithmetic to\nsyntax and we can keep equation text the\nsame\nso now our program won't crash if we\ntype in a bunch of symbols\nsyntax error now let's work on the clear\nbutton\nso that is within the clear function\nso we will set global\nequation text\nequation label\ndot set to a set of quotes to\neffectively clear it\nand our equation\ntext equal to a set of quotes as well\nand that should be it for this program\nlet's run this one last time\nlet's say 3.14 times\n2.1 equals 6.594\ndivided by 2.1\nequals 3.14 minus one i'm just making up\nnumbers here\nplus ten equals twelve point one four\nand let's clear this and start again one\nplus\ntwo plus three plus four equals ten\ni think that's good enough all right\neverybody so that's how to create a\nbasic\ncalculator in python i will post all of\nmy code in the comments section down\nbelow if you would like a copy for\nyourself\nbut yeah that's how to create a basic\ncalculator using python\nhey what's going on everybody it's your\nbro hope you're doing well and in this\nvideo i'm going to explain how we can\nbuild a basic text editor program in\npython so\nsit back relax and enjoy the show\nokay people let's create a text editor\nhere's all the different imports that\nyou'll need and we'll begin by defining\nall of the different functions that\nwe'll need\nso let's say we have a change color\nfunction to change the color\nof our font and for all of these\nfunctions i'm going to write pass as a\nplaceholder\nso we have change font and\nthis function will accept a varying\namount of arguments\nso we'll use that args keyword\nwe will need to open a file new\nfile\nopen file\nsave file\ncut\ncopy\npaste yeah there's a lot of functions\nhere\nabout\nthis is for an about section\nand lastly quit\nso how many do we have one two three\nfour five six seven eight\nnine ten ten functions let's create the\nmain window that we're gonna work with\nwindow equals tk\nand at the very end window.main\nloop\nokay so let's create a title for this\nwindow window\ntitle notepad\nprogram i guess or maybe text editor\nprogram would be more appropriate\ntext editor program\nokay and we will need a file to work\nwith and i'll declare that now\nfile equals none\nwe'll need a window width and height\nwindow with equals 500 is good and a\nheight\nokay so let's attempt to center this\nwindow\nbecause right now it just appears to the\nside\nso our next step is to get the screen\nwidth\nequals window dot w\ninfo screen width\nand i'll copy this for screen height\nokay so we need to figure out how much\nwe're going to move our window on the x\nand y axis so let's say x\nequals screen\nwidth divided by 2\nminus\nwindow width divided by\ntwo and we're going to cast all of this\nto an\nend so add an inch cast around this\nlet's copy this do the same thing for y\nexcept this will be screen height\nand window height\nokay let's set the geometry for the\nwindow window\ngeometry i'm going to use a\nstring format method so let's say\nthese will be placeholders for our\nvalues\nso we have window width for the first\nvalue\nwindow height\nx and y so this should be near the\nmiddle\ncool\nwe're going to create a string var\nvariable to hold the\nfont name font name\nequals string var\nand pass in your window and you can set\nthis to\nwhat do you want your default font to be\nso let's say font\nname dot set and then pick a font\ni'll use ariel i think\nlet's create a font size string bar as\nwell\nwe're going to add this to the window\nand we can set a default size\nperhaps 25.\nokay let's create a text area\ntext area equals text\nwe're adding this to the window i'm\ngoing to set a\nfont equal to font\nname dot get the name of the font that\nwe want to use\nwill be the font that we set within our\nfont\nname string var so now we'll use a size\nof font size dot get\nfont size dot get\nokay now we need a scroll bar\nscroll bar equals\nscroll bar\nwriting this to our text area so pass\nthat in\nand i'm going to configure my window\nusing grid row configure\nthis will allow our text area to expand\nbut we're going to set a weight equal to\n1 so that it doesn't back expand\nand then we need column configure\nokay and text\narea dot grid\ni'm going to use the sticky keyword and\nthis will stick north plus east\nplus south plus west\nso my text area should take most of the\nwindow\nthis is some sample text\nhooray so it goes down to the next line\nonce it runs out of room on one line\nunless you resize the window which is\nexactly what we wanted\nlet's create a scroll bar while we\nalready created it we just have to\nadd a few details to it\nso that will be near the bottom\nand why don't we say scroll\nbar dot pack\nside equals right\nfill equals y\nand then we just have to configure our\ntext area\nwith the scroll bar so text\narea dot config\ny scroll command\nequals scroll bar\ndot set so that should work but\nlet's test it to be sure okay i'm just\ngoing to type a bunch of f's\nokay look at that our scroll bar works\ncool okay let's head to this portion\nand we'll create a bunch of buttons well\na button\nan option menu and a spin box for the\nfont color the size and the font style\nso i'm going to place all of these\ndifferent widgets within a frame\nframe equals frame add it to the window\nand then i'm going to use frame dot grid\nokay let's create a color button to\nchange the fonts color\ncolor button equals button\ni'll add my button to my frame\ni'll set the text of the button equal to\ncolor\nand i will associate a command of\nchange color which we have already\ndefined at the top\nwhere is it at the top here change color\nand then actually that's it for this\nportion\nso then we need to add this button color\nbutton dot grid i'll set the row\nequal to zero and the column equal to\nzero\nso let's be sure that this appears make\nsure you spell grid right\nokay and we have a color button but this\nbutton doesn't do anything\nso let's head to the change color\nfunction\nwithin the change color function we're\ngoing to say color\nequals color chooser\ndot ask color\nand you can set a title to\npick a color or\nelse you don't technically need a title\nand then text area\ndot config oh i should probably print\nthis color\nso let me do that um i'm just gonna\nexplain something here\nso this color is going to be i believe a\ntuple\nso let's print it so let's say that i\nwould like\nwhite okay so we have a tuple we just\nneed\none of these values not both of them\nso i'm going to say\ntext area dot config\nforeground equals our color but we do\nnot want to assign a tuple\nto our color we just need one of these\nvalues so let's say i would like this\nhex value\nso i'm going to say at index 1\nand let's try it color\nperhaps i would like my text pink for\nsome reason so we're going with pink\nthis is some text i suppose\nand we can change this back too by using\nthis color button now i would like\nblue and we have blue text okay so that\nis the change color function i'm going\nto minimize this because we do not need\nit anymore\nokay we're going to change the font next\nso\nhead to the portion of our code right\nafter the\ncolor button and we'll create an option\nmenu\nto list all of the different fonts\navailable to us so let's say\nfont box equals option\nmenu we're adding this to our frame\nwe need to set a variable a string var\nso that will be our font name that we\ndeclared up here\nnow here's a trick to add all of the\nfonts as options to our option menu\nwe can use the unpacking operator which\nis an asterisk\nfollowed by font dot families\nand then call this function so this will\nreturn\nall of the different fonts available to\nus and we just need to set a command\nand when we use our option menu we'll\ncall\nchange font and we need to add\nour font box to our grid\nrow equals zero and column\nequals one so this should be on the\nright hand side of our color button\nyeah it's going to look something like\nthat and you can see the default is\narial that we set\nand we can change it to something else\nlike\ncomic sans or whatever\nuh however it's not going to change it\nquite yet so that'll be the change font\nfunction\nbefore we fill in the change font\nfunction there's another widget that's\ngoing to share the same command of\nchange font so we should create that\nnext\nso our next widget is a spin box which i\nwill name\nsizebox this will be in charge of\nincreasing or decreasing the font\nso size box equals spin box\nwe're adding the spin box to our frame\nand we'll set a range\nso from underscore you have to add that\nunderscore it's kind of weird\nthis is the range of our spin box for\nthe font size\nfrom 1 to let's say 100\nthe text variable will be\nfont size\nand our command equals change\nfont so when\nwe use our spin box and call this\ncommand of change font it's going to\npass in\nour font size as an argument whereas\nwith option menu\nit doesn't pass any arguments that's why\nwith our\nchange font function we're accepting a\nvarying amount of arguments\nbecause one's going to pass in an\nargument and the other isn't and we just\nneed to add our spin box\nso that would be size box\ndot grid row equals zero\nand column equals two\nso we should have a spin box right on\nthe bottom\nand it's set to 25 that was our default\nfor\nour font size string var which we set as\nthe text variable\nokay so we can fill in this function of\nchange font now\nwhich will apply both to our option menu\nand our spin box\nso that is all the way at the top within\nthe change font function\nwe're going to take our text area\ndot config set\nthe font equal to font\nname dot get\nand the size will be size box\ndot get and that's it for this function\ni'll minimize it for now and let's test\nit\nthis is some sample text\nhey how you doing good\nlooking okay so let's change\nthe font uh let's pick comic sans or\nwhatever you want\nand we can increase or decrease the size\nand we can change the color how about\nred this time\nall right nice now let's add a menu bar\nat the top so we can save this file or\nopen a file or create a new file and\nsome other stuff\non second thought i'm going to move\nthese two last lines of code\nto this section here\nwhere we create our scroll bar just so\nthat it's more organized\nokay so at the bottom let's create\nvarious drop-down menus so we'll need a\nmenu bar to begin with\nso let's say menu bar\nequals menu we're adding this to our\nwindow\nmake sure that's capital by the way\nand window dot config\nmenu equals menu bar\nso we'll create a file menu edit menu\nand\na help menu so let's begin with the file\nmenu to add to the menu bar file menu\nequals menu we're adding this to our\nmenu\nbar and set a tear off equal to zero\nwe'll need a cascade for it to actually\nbe a drop down menu\nso that will be menu bar\ndot add cascade\nlabel equals file\ncomma menu equals\nfile menu\nlet's see if anything appears yet yep so\nwe have a file menu\nbut there's nothing to drop down yet\nso we need some options\nwell commands technically file menu\ndot add command\nlabel equals new\nand the command will equal our\nnew file function\nactually i'll put these together okay so\nlet's copy this\nand paste it we have open\nthe command will be open file\nwe have save\nthe command will be save\nfile and i'll add a separator\nfile menu dot add\nseparator and lastly\nwe will have exit\ncommand quit\nokay let me show you what this looks\nlike\nso here's our drop down menu\nthat separator is this bold line going\nacross\nso if i was to remove this then we\nwouldn't have that bolt line\nyou can keep it in or get rid of it do\nwhatever you want\nand this is the tear off so i'm going to\nremove the tear off\nand you get this like tear off line at\nthe top i guess it's the default\ni usually don't like it so i set tear\noff equal to zero\nso that is our file menu let's work on a\nedit menu\nedit menu equals\nmenu menu\nbar make sure that's capital two\ntare off equals zero\nwe'll need a cascade menu bar\ndot add cascade\nlabel equals\nedit\nmenu equals edit\nmenu\nedit menu dot add\ncommand\nlabel equals cut to cut some text\ncommand equals copy\nactually that's cut my bad\nokay next is copy so let's copy this\nand paste it\ncut copy\nwe have paste\ncommand paste\nall right let's take a look\noh make sure you spell label right\nokay there we go okay so we can cut\ncopy and paste and lastly we should have\na help menu\nhelp menu equals\nmenu menu\nbar tear off\nequals zero\ni think i'll copy this for my cascade\nso menu bar dot add cascade\nhelp menu equals help\nmenu\nwhat we'll be doing for a command is\nthat we'll be creating\nan about section that will bring up a\npop-up window if you need to display\nany like help information or anything\nuh so let's say about and the command\nwill be\nabout okay let's take a look\nso we have help and we'll have an about\nsection that will tell you more about\nthis program\nbut we need to work on some of these\nfunctions let's head to the quit\nfunction\nthis one's fairly easy this is found\nwithin the file menu\nwindow dot destroy that will close out\nof the window\nso go to file then exit to exit the\nprogram\nwe don't need it anymore so let's\nminimize this\nokay let's go to the about function\nlet's bring up a message box show info\nthis first argument is the title so\nlet's say\nabout this program\nand the text will be whatever you want\nto\ntell the user about this program this\nis a program written\nby you\nokay so we should have a pop-up window\nwhen you go to help\nthen about about this program this is a\nprogram\nwritten by you the next function is the\npaste function so we can paste some text\ntext area dot event\ngenerate and the event is going to be\nwithin quotes\nand double angle brackets\npaste let's copy this\nand change paste to copy\nand then cut\nokay so we should be able to cut copy\nand paste\nhey how's it\nhanging okay\nlet's highlight this edit\ncopy let's move down to the next line\nand paste and we should be able to cut\nas well\nedit cut nice\nhead to the new file function\nand we'll set the title of our window to\nmaybe\nuntitled until we save something so\nuntitled\nand i need to delete any text within our\ntext area\ntext area dot delete and we need to set\na range so this has to be a floating\npoint number\nthe first character until the end\nlet's try it so i'll write some sample\ntext\nand we are going to go to file new\nthat changed the title and it deleted\nour text\nso that is the new file function\nlet's work on open file we are now\nwithin\nthe open file function and we'll say\nfile\nequals ask open\nfile name so we have a\ndefault extension if you would like one\ndefault i think i spelled that wrong\nextension\nequals let's say a txt file\ncomma what are the accepted file types\ni'll set this equal to\nall files\ncomma and then we need asterisk\ndot asterisk for all file types\nas well as text documents\nso these are what is accepted when we\nlook for a file so we have either all\nfiles\nor all text documents text\ndocuments comma\nasterisk dot txt\nokay so then let's try some code\nwe'll set our window title\nequal to os dot path\ndot base name of our file\nso that we will change the title of the\nwindow\nto match whatever the file is that we\nopened\nthen let's take our text\narea delete what's currently here\nfrom one until the end\ntake our file use the open function\nopen our file and read it so pass in our\ntext area dot insert\nbeginning at index of 1.0\nfile dot read\nthat you can catch any exceptions to\ni'll just write accept exception but\nit's better to name specific\nexceptions i'll just print\ncouldn't read\nfile and we should close our file at the\nend within a finally block\nfinally file dot close\nwe'll need a sample file to read so i'm\ngoing to create a new file on my desktop\ni'll call this test.txt\nand let's write something whoa\nyou can actually read this\nawesome okay let's save\nclose out of it add run our program\nfile open test.txt\nopen whoa you can actually read this\nawesome nice so we know that the open\nfunction is working\nif we need to create a new file just go\nto file new\nand that will delete our old text\nso lastly we have save file\nunderneath the save file function file\nequals file dialog\ndot ask save as\nfile name so this will be the default\nname for the file but you can change\nthat\ninitial file equals\nlet's say untitled\ndot\nyou txt set a default extension default\nextension equals let's say txt\nfile types equals\nall files\ncomma then asterisk dot asterisk\nfor all file types\nand any text documents text\ndocuments\nasterisk dot txt\nokay if file\nis none that's if they close out of our\nfile dialog\nwe'll just return\nelse\nso we'll set the window title first\nwindow title os dot path\ndot base name\nfile\nfile equals open open\nour file and write\nfile dot right\ntake our text area and get\nthe text from\nindex one through the end\ncatch any exceptions it's better to name\nthem instead of just\ndoing a general accept exception\nbut i'm just going to print couldn't\nsave file\nand finally close our file\nfile dot close all right so\nlet's test it so i'm going to change\nthe font i wonder if impact is in here\nyes it is i'll change the font size\nmaybe 30 and i'll pick a color\nhow about this swamp green color okay so\nwrite something perhaps some lyrics to a\nsong you like\ni should probably test copying and\npasting\nedit copy\nedit paste\nnice\nall right let's actually try and save\nthis now i'll go to\nfile save the default file name is\nuntitled because we set it to that\ni'll say all star\nlyrics\nand save now i should be able to open\nthis\nso i'm going to go to my desktop here's\nthat text file\ni'm going to open it and here are the\nlyrics that i wrote within my text\neditor\nand let's try and read this so let's go\nto\nfile open find your text document\nopen and would you look at that my\nlyrics are still here\nhowever this program doesn't save the\nfont\nso i thought of a fun last minute\nproject that we can do we can actually\nuse our text editor to write a python\nfile much like what we do with pycharm\nso let's write a program using our text\neditor program\nit'll be just a simple program let's\nprint\nhello world and ask for some user input\nlet's say name equals input\nwhat's your name\nand we will print\nhello plus our name\nvariable and you can change the font and\neverything too if you want\nokay so let's save this file save\ni'll save this to my desktop but make\nsure you save it as a\npy file a python file i'll name this as\nhello dot py and save\nnow to run a file using command prompt\nwe need to find\nthe directory that contains our python\nfile mine is hello.py and it's located\non my desktop\nso i need the location right click go to\nproperties\nyou can copy the location then within\ncommand prompt or terminal\nyou can change directory by typing cd\nspace\nand then paste your new directory the\nnew location\nenter then to run a python program\ntype python space and then the name of\nthe program\nthe python file mine is hello dot\npy hit enter hello world what is your\nname\nbro hello bro i just thought that would\nbe a fun last minute project\nthat we can do you don't even\ntechnically need an ide to write a\npython program\nscrew you pycharm well everyone that is\na basic\ntext editor program i will post the code\nfor this program\nin the comment section down below and\nwell yeah that's a basic text editor\nprogram\nusing python all right\nladies and gentlemen let's create a game\nof tic-tac-toe to begin we'll need to\nimport tkinter as well as random and\nlet's begin by defining\nall of the different functions that\nwe'll need let's define a function named\nnext turn for the time being we'll just\nwrite pass we'll fill this in later on\nwe'll need a function named check winner\na function named empty spaces to check\nif there are any empty spaces left and\nlastly a function named new\ngame that will launch a new game for us\nokay we have our four functions now\nlet's create a window\nlet's create a window window equals\ntk and at the end of our program we need\nto use window\ndot main loop and when we run this we\nshould have just a small\nbasic window let's set the title window\ndot title let's set this to\ntick tack toe\nwe'll need a list of players players\nequals\nx comma o\nand with the way that we're writing this\nprogram we can swap\nthese symbols with a different character\nfor example we could say\ndollar sign is playing against the at\nsymbol too\nbut i'll demonstrate that later let's\nkeep it as x and o for now\nnow we need to select a random player to\nbegin\nplayer equals random\ndot choice and pass in our list of\nplayers\nnow we'll need nine buttons i'm going to\ncreate a 2d\nlist of buttons named buttons\nand this will be the first row this will\nbe the second row\nfor the time being i'm just going to\ninitialize these with\n0 for everything and put these all\nwithin\na list so we have a 2d list named\nbuttons\nand to better visualize this i'm going\nto place each row on a new line\nso that's what our board is going to\nlook like we have a 2d list\nnamed buttons we'll need a label to\ndisplay whose turn it is\nlabel equals label\ni'll set the text equal to\nplayer plus the word\nturn and i'll set the font to\nfont equals pick whatever font that you\nwant\nand i am going to pack this label\nlabel dot pack and set the side\nequal to top and let's run this just to\ntest it\nokay looks like it's x's turn let's try\nit again\noh stern okay that's fine for now\nlet's create a reset button\nreset underscore button\nequals button\ni'll set the text equal to\nrestart it's going to be a restart\nbutton or reset button\npick a font\nmaybe i'll set the size to 20\nand we'll need a command command\nequals new game\nwhen we click on this button it's going\nto call this\nnew game function for us and we need to\npack this button reset\nbutton dot pack\nand i will set the side equal to top\nokay\nlet's see if that appears alright so we\nhave our\nturn order a label that will display\nwhose turn it is as well as our reset\nbutton\nnow we'll need to create all of the\nbuttons to add to our 2d\nlist named buttons but i'm going to\nplace these all within\na frame frame equals frame\nwe're adding our frame to our window and\ni'm going to\npack this frame frame dot pack\nnow we'll take our 2d list of buttons\nand add a button to each spot\nand i think the best way to do this\nwould be to use nested for loops\nwe'll have an outer for loop in charge\nof the rows\nfour row in range three\nremember we only have three rows and\nthree columns\nthe inner for loop will be in charge of\nthe columns\nfour column and range three\nand inside the inner for loop we're\ngoing to create a new button\nwe'll say buttons at index\nrow and column we have two indexes\nbecause\nwe have a 2d list so buttons\nat row whatever column whatever\ndepending on\nwhat iteration we are within our for\nloops\nwe'll create a new button\nand we'll set the text oh first add this\nto the frame\nalmost forgot about that we're adding\nour buttons to our frame and adding the\nframe to the window\nnow we'll set the text equal to a blank\nset of quotes because we don't want any\ntext\nwe'll set the font i'll just copy what\nwe have here\nfor label\nfor a width let's say five and a height\nlet's say two i'm going to hit enter\njust to move down to the next line\nbecause we still have a few more things\nto fill in\nokay we'll need a command command\nequals and i'm going to set this equal\nto a lambda function\nso we need some arguments actually i\nthink i'll pass in some keyword\narguments\nrow equals row and column\nequals column then our expression is\nnext turn and we will pass in\nrow and column now we also need to add\nour buttons to our\nframe buttons at\nindex of row and column\nwe'll use the grid function for this\ngrid\nrow equals and\ncolumn equals column\nand it's always a good idea to test your\nprogram after making any major changes\nso we should have our label our reset\nbutton\nand our grid of buttons now that the\nmain body of our program is complete\nlet's head to the next turn function\nand remember that we're passing in row\nand column as\narguments so we need to set up those\nparameters within the next turn\nfunction row and column and the first\nline within here\nwe would like access to our player\nso let's say global player so that we\nhave access to it\nand we're first going to check to see if\nthe button\nthat we click on is empty so buttons\nat index of row and index of column\nto access the text of a button just add\na\nthird index operator and type in text\nif the text of our button that we click\nis equal to a set of quotes that means\nit's empty\nand when we call check winner\nwinner winner chicken dinner and it's\nfalse\nthere is no winner then we will fill in\nthat button with our player our player's\ncharacter whatever it is\nx or o or whatever we decide\nso within here let's check to see if\nplayer is equal to players\nat index zero that is our first player\nand remember that we created\na list of players and we're planning on\nswapping these later\nwe could say like if player is equal to\nx\nbut that would make our program less\nflexible if we want to pick like a\ndifferent character instead of an x\nso if player is equal to player at index\nzero whatever symbol is there\nthen we are going to take buttons\nat index of row index of column\ntake our text and set it equal to\nour player\nand we should check to see if there's a\nwinner after filling in this button\nif check\nwinner and we still need to fill in this\nfunction\nreturns false\nthen we will switch players player\nequals\nplayers at index of one and\nlabel dot config\ntext equals\nplayers at index 1\nplus the word turn\nso what we did here is that we're\nchecking to see\nif after placing our text of our player\non that button that we click if there is\nno winner\nthen we're going to swap players player\nequals our next player\nand we're configuring our label so that\nit displays the next player's turn\nplayers at index 1 turn\nnow what if there is a winner let's say\nelse if\ncheck winner\nis true\nthen we will take our label dot\nconfig and set the text\nequal to players\nat index 0\nplus the word wins\nnow let's add another else if statement\nelse if there's a tie let's say check\nwinner is equal to\nthe word tie because we are already\nusing\nfalse and true then let's change our\nlabel\nand i'm just going to copy this\ntext equals the word\ntie okay\nso let's create an else block\nso that goes right here\nso if it's not player one's turn player\nat index zero\nthen it's our other player's turn player\nat index\nof one so oh then so we just need to\nmostly just copy this text and change a\nfew things around\nso i'm going to copy all this\nand within here let's set\nplayer equals players at index\nzero then players at\nindex zero's turn players\nat index one wins\nand that is it now our next turn\nfunction is now complete let's head down\nto the\ncheck winner function and we need to\ncheck all of the different win\nconditions\nand return it true if somebody won false\nif there is yet no winner and the word\ntie if it's a tie\nso let's check all of the horizontal win\nconditions\nso we can do this using a for loop for\nrow in range three\nwe need to check the text of each button\nin each row\nif buttons at index of row\nand column index of 0 we'll use the\nindex operator to check the text\nis equal to the next button in our row\nso i will copy this and change zero to\none\ncheck to see if that is equal to buttons\nat index of row index of two\nand i'm going to check to see if this is\nall not\nequal let me move this a little bit\nto a space\nso if that is the case that means\nsomebody won\nso if all of these buttons are the same\nand they are not equal to\nan empty space that means they're all\nthe same so let's return\ntrue that means that somebody won\nno we need to check the vertical win\nconditions\nif anybody has the same character all\nthe way down\na single column this next for loop is\ngoing to be four column in range three\nfor the first button this will be button\nat index of zero\nand column then\none and column let me just paste that\nand two and column\nnow we need to check the diagonal win\nconditions\nso if buttons at\nindex 0 0 that's the top left corner\nif the text of that button is equal to\nbuttons at indexes of one one\nis equal to the indexes of\nbutton two two and if all of this\ndoes not equal an empty space\nthen return true so there is a winner\nand we have one last win condition to\ncheck that is the other\ndiagonal win condition so we just need\nto change some of these indexes around\nso we have zero two\none one and two zero\ni'm going to change this statement to an\nelse if statement\nno we need to check to see if there's\nany spaces remaining\nelse if we will call the empty spaces\nfunction which we have yet to fill in if\nthis returns false then we will\nreturn the word\ntie\nand lastly else else there is no winner\nand\nno tie so we will return false\nand that is it for the check winner\nfunction\nlet's test this\nso this doesn't account for a tie quite\nyet but we can fill in\nsome of these spaces looks like x wins\nand we can no longer fill in buttons\nand we cannot start a new game quite yet\neither\nwithin the empty spaces function let's\ncreate a local\nvariable named spaces and set this equal\nto nine whenever we call this function\nfour row in range\nthree and we'll create a nested for loop\nfor column in range\nthree we will check the text of each\nbutton\nif buttons at indexes of\nrow and column\nand we will check the text to see\nif it's not equal to an empty space\nif that is the case spaces\nminus equals one\nthen we'll write an if statement if\nspaces\nas in spaces remaining is equal to zero\nthat means we will return false and\nthere are no\nspaces left else\nwe will return\ntrue okay let's test it\nso this time i'm trying to get a tie\nyep looks like it's a tie this next\npart's optional but i would like to\nchange\nthe color of each button for the winning\ncombination\nso within our check winner function\nunderneath the first win condition\ni'm going to take buttons at index\nof row and index of zero\nuse the config method\nand set the background color equal to\nlet's say green\nand i'm going to repeat this process for\nthe other buttons within this win\ncondition\nso that is row\nzero row one and row two\ni'll copy all of this paste it\nand switch some of these around so these\nshould all be matching\nso zero and column one and column and\ntwo in column\nokay so we have zero zero one\none and two two\nand one more\nzero two one one and\ntwo zero now when we have a winning\ncombination\nthe color of the buttons involved in\nthat combination are going to change to\ngreen\nnow if there is a tie let's change all\nof the buttons to\nlet's say yellow so i'm going to write\nnested for loops for this\nfour row in range\nthree for column\nin range three\ntake our buttons at row\nand column and change\nthe background color to yellow or some\nother color of your choosing\nso if there's a tie they should all be\nyellow\ni'm trying not to win here it's actually\nmore complex than what i thought\nyep it looks like it's all a tie and the\nlast thing that we need to do is to fill\nin\nthe new game function so that we can\nbegin a new game\nso let's say global player we would like\naccess to our player\nfrom inside this function and set player\nequal\nto a new random choice random\ndot choice and pass in our list\nof players and we will change our label\nlabel dot config\nand set the text equal to player\nplus the word turn and we also need to\nreset all of our buttons\nfor row in range\nthree for\ncolumn in range\nthree buttons\nat index of row and index of column\ndot config\ntext equals a set of quotes so it's\nempty\nand we'll change the background color\nfactors previously\nso the default color for buttons is\nactually hexadecimal\nf 0 f 0 f 0\nso this function will begin a new game\nfor us\nand let's test it to be sure i'm going\nto start a new game\nreset reset\ni'll actually try and win this time and\nreset\nokay so it looks like the new game\nfunction is working\nnow another thing that you can do too is\nthat you can change\nthe players around let's say we would\nlike to play as\ndollar sign and at sign so this program\nis flexible enough\nso that you can change the icons of the\nplayers\nall right everybody so that's a basic\ngame of tic-tac-toe for\npython if you would like a copy of this\ncode i will post all of this to the\ncomments section down below\nbut yeah that's how to code a basic game\nof tic-tac-toe\nfor python hey what's going on everybody\nit's your bro hope you're doing well and\nin this video we're going to create a\ngame of snake using python so\nsit back relax and enjoy the show\nfirst thing we should do is import from\ntkinter as well as the random module\nand let's define all of the different\nclasses and functions that we'll need\nso let's create a class for our snake\nobject\nas well as our food object so for the\ntime being i'm just going to write pass\nfor my classes we'll fill these in later\nso we have class snake and\nclass food and\nlet's define all of the different\nfunctions that we'll need so let's say\nwe have a function named next\nturn\nchange direction\ncheck collisions\nand lastly game over\nokay for change direction i'm going to\nhave one parameter\na new direction\nnow when i create a game i like to place\na bunch of constants at the top\nof my game constants are variables that\nyou do not want to change\nlater they're kind of like the settings\nhowever in python\nthere are no constants compared to other\nprogramming languages\nso we're just going to create a bunch of\nvariables that will behave like them\nso constants are values we do not want\nto change and they're kind of like the\ngame settings\nand i placed them at the top for\nconvenience and the naming convention\nfor a constant is that\nall the letters are uppercase so these\nwill be settings like\nthe game width the speed etc\nso let's say the width of our game will\nbe 700\nbut feel free to take the liberty to\npick whatever size you want\nso we have game width game height\ni'll set this to 700 as well so it's a\nsquare\nlet's say we have a speed the speed of\nthe snake how often will our canvas\nupdate\nso let's say 50 but the lower the number\nthe faster the game\nand a space size how large are the items\nin our game like\nthe food and body parts of the snake\nso i'm going to pick 50 but you can\nchange this\nand body parts how many body parts does\nour snake have when we begin a game\nlet's say three how about a snake\ncolor you can pick a color name\nyou can use rgb values or you can use a\nhexadecimal value\nso i'm going to pick green 0 0 ff00 but\nyou can pick any color you want\nhow about food color\nequals red\nand that is ff000\nand what about a background color for\nthe canvas background\ncolor i'll pick black so that is\nsix zeros\nfeel free to mess with some of these\ncolors too so we have a green snake\nour food is going to be red and our\nbackground is going to be black\nso that is all of the constants for our\ngame but you can feel free to adjust\nthem if you like\nlet's head down to the bottom and make\nour window so we have\nwindow equals tk and at the very end we\nshould have\nwindow dot main loop\nlet's set a title for this window window\ndot title\nsnack game okay fine i'll spell it right\nsnake game and if you do not want your\nwindow to be resizable\nyou can use resizable\nand then you have to pass in false twice\nit's kind of strange but it's how it is\nokay we should have a small window and\nwe cannot resize this even if we tried\nokay let's create a score label\nbut we probably need a score first so\nlet's say score equals zero\nand an initial direction direction\nequals let's say down\nnow let's create a score label so let's\nsay label\nequals label we're adding our\nlabel to our window let's set the text\nequal to score\ncolon then i'm going to use the format\nmethod\nand we will pass in our score whatever\nit is\nand i'll set a font pick whatever font\nyou prefer\nand 40 is a decent size\nand then i'm going to pack this label\nlet's test it okay we're getting\nsomewhere\nwe'll need to create a canvas canvas\nequals canvas we're adding it to our\nwindow i'm going to set the background\ncolor\nequal to our background constant\ni'm going to set our height equal to the\ngame\nheight and the width equal\nto the game width that we set\nand we need to pack this canvas dot pack\nand we should have a game board\ni'm going to try and center this window\nwhen it appears\nso we can do that using a few lines of\ncode the first thing we'll do is\nupdate our window so that it renders and\nthen we need to find some dimensions\nso let's say the window width\nequals window dot w\ninfo width\nand window height\nequals window\ndot w info height\nwe'll need our screen width\nequals window\ndot screen width\nand screen height\nequals window dot w\ninfo screen height\nwhere is it there it is\nokay then we need to see how much we're\ngoing to adjust the position of our\nwindow\nso let's say x equals\nscreen width divided by 2\nminus window\nwidth divided by two\nand do the same thing for y\nexcept this will be screen height\nand window height\nand that will be why\nokay then we need to set the geometry\nwindow\ndot geometry\nwe're going to use an f string\nso let's set the window\nwidth times\nwindow height\nand then add plus\nx plus y\nso when we pass in x and y\nthese cannot be floats they have to be\nwhole integers\nso let's add a cast around x and y\nokay now this should be fairly close to\nthe center\nyeah that's not too bad now when we\nbegin a new game we should create a\nsnake object as well as a food object\nsnake equals snake and called the snake\nconstructor\nand food equals food\nokay let's fill in our food class first\nbecause i think that'll be easier than\nour snake class\nso let's head to the food class\nnow let's create an init method so def\ninit this will construct a food object\nfor us\nand we need to place our food object\nrandomly\nso for the x coordinate let's say x\nequals\nrandom dot rand int and we need a range\nthe range is going to be zero comma now\nwith our game board i view it like a\nchess board\nthere's a given amount of spaces so\n700 divided by our space size\nis 14 possible spots on the x-axis\nand then 14 possible spots on the y-axis\nso i need to pick one of these spots\nrandomly\nso let's say game\nwidth divided by our space\nsize so we'll get a random number\nbetween 0 and 14\nhowever this should be exclusive so\nlet's say -1\nand for good measure i'm just going to\nadd a set of parentheses around this\nokay and then we'll convert this to\npixels\nso let's multiply all of this by our\nspace\nsize the size of each item in the game\nand we'll do the same thing for\ny but change game width to height\nokay we should be good\nall right now let's set the coordinates\nlet's say self dot coordinates\nequals a list of x and y\nand that's it but make sure you spell\ncoordinates right\nnow we need to draw our food object on\nour canvas\ncanvas dot create\noval you can pick a square two if you\nlike\nwe need a starting corner that will be\nwhere x\nand y is and an ending coordinator\nso that will be x and y plus\nour space size the size of an object in\nthat game\nso x plus space\nsize y plus\nspace size\nand you can set a fill color too\nfill will be our food color that we\ndeclared\nand i recommend adding a tag as well\nthat'll make it easy to delete this\nobject\nso tag will equal the string food\nnow let's just test this so we should\nhave a random circle\nor a square if you picked a square\nappear someplace at some spot\non my game board cool seems like it's\nworking\nlet's work on the snake class next our\nsnake class we'll need a constructor\nand we will set a body size\nequal to our body parts\nwe'll need a list of coordinates\nfill this in later and a list\nof square graphics\nso that will be a list okay\nso we need to create a list of\ncoordinates\nwe can use a for loop for that so let's\nsay for\ni in range zero\nthrough body parts\nwe will take self dot coordinates\nand append a new list\nand the coordinates for each body part\nat the start of the game will be\n0 0 so that our snake will appear in the\ntop left corner\nnow we'll need to create some squares\nokay so\nfor x y\nin self dot coordinates\nand remember that we have a list of\nlists so that's why we're using\nx y in self coordinates\nwe'll create a square equals\ncanvas dot create\nrectangle\nso we need a starting corner that will\nbe x and y\nthen x plus our\nspace size the size of each object in\nthe game\nlet me use the constant though space\nsize y plus\nspace size\nand let's set a fill color equal to\nour snake color\nall right and let's set a tag\nfor convenience tag equals\na string of snake okay so we have a\nlist of squares and we can append each\nsquare into our list\nself dot squares\ndot append and pass in whatever square\nthat you create\nso we have a snake that has a body size\na list of coordinates and a list of\nsquare graphics\nnow after testing this we should have\nthe head of our snake in the top left\ncorner\nand now we just need the snake to move\nin a given direction every turn\nso the initial direction is down but\nwe'll be able to change that later\nso let's head to the next turn function\nand there's actually two things we'll\nneed as parameters that i forgot to fill\nin\nsnake as well as food and we will call\nthis function when we begin our game\nso let's unpack the head of the snake so\nthat's\nx comma y equals\nsnake dot coordinates\nat index of zero so that's the head of\nthe snake\nthe coordinates will be stored in x and\ny\nso let's check to see if our direction\nour initial direction equals\nup and we'll need some else if\nstatements\nwe'll fill this in just a moment\nelse if our direction equals\ndown\nthen left\nand then right\nokay if our direction is up\nthen let's take our y coordinate for the\nhead of our snake\nminus equals our space\nsize so that we move one space up\nand then down is plus equals\nspace size left\nis x minus equals\nspace size and lastly\nright is x plus equals space size\nokay then we need to call the next turn\nfunction again\nfor the next turn so we can use window\ndot after we need the time\nso let's say our game speed\nwe're going to call the next turn\nfunction and we need to pass in our\narguments of snake and food\nsnake food\noh and make sure you're not actually\ncalling the next turn function inside of\nthe after method you just have to write\nthe function name of next turn without\nthe parentheses\nokay so let's update the coordinates for\nthe height for the snake\nand write that before we move on to the\nnext turn\nso snake dot coordinates\nand we will insert a new set of\ncoordinates\nafter updating one of them\nso zero will be the index the head of\nthe snake\nand we will insert x and y coordinates\nat\nthis new location now we're going to\ncreate a new graphic for the head of the\nsnake\nsquare equals canvas dot create\nrectangle pass in x\nand y for the starting corner of our\nrectangle and\nthe ending corner will be x plus\nour space size y\nplus our space size\nthen i will add a fill color of\nsnake color and then we need to update\nour snakes list of squares\nso that will be snake dot squares\nand insert at\nindex 0 a new square that we create\nokay let's test this one last thing that\nwe'll need to get this program to run\nis that after you create your snake and\nfood object we should call it the\nnext turn function and pass in our snake\nand food object so we should be able to\ntest this\nso our snake is going to move but we\nneed to delete the\nlast body part in our snake within the\nnext turn function\nbut before we update to the next turn\nlet's delete the last body part of our\nsnake so delete\nsnake dot coordinates\nat negative index of one that is the\nlast set of coordinates\nwe will update our canvas canvas dot\ndelete\nsnake dot squares\nan index of negative one\nand lastly delete snake\nthe list of squares\nat index of negative one\nso it should appear that our snake is\nmoving cool\nwe need some controls for our snake so\nat the bottom of our program\nlet's bind some keys let's do that here\nso window dot bind\nlet's find the left arrow key\nand we will use a lambda\nthe argument is event and we will call\nthe\nchange direction function and pass in\nthe word left\nokay then we have to do the same thing\nfor the other directions\nso we have right\npass in right\nup pass in up\ndown pass in down\nlet's head to the change direction\nfunction\nwe need to access our direction global\ndirection this is the old direction\nif our new direction that is passed in\nis equal to left\nand if our old direction this direction\ndoes not equal right because we do not\nwant to go backwards and do a 180 degree\nturn\nthen we will set our direction\nequal to our new\ndirection and we just need to repeat\nthis for the other\ndirections for new direction\nand i'm going to change this to else if\nelse if new direction is right\nand our direction is not already\nleft\nthen we have up\nif our direction is not down\nand down if our\ndirection is not up okay so we should be\nable to change\nthe direction of our snake\nsweet okay we need to eat that pesky\napple next so let's work on that\nthere's nothing else that we need to\nchange within the change direction\nfunction so i'm going to minimize\nthis function and head to the\nnext turn function\nwe'll place an if statement here if\nx remember that we unpacked the\ncoordinates\nfor the head of the snake if x\nthe x coordinate for the head of the\nsnake is equal to\nour food objects coordinates\nat index of zero that's the x-coordinate\nfor our food object and\ny is equal to\nfood coordinates at index of one\nthat means they're overlapping\nlet's take our score\nand increment it by one\nand change our label label.config\nthe text will equal\nscore\nand then i'm going to use the format\nmethod\nand pass in my new score\nlet's delete our food object\nand we gave our food object a tag so we\ncan just use the name of the tag\nto delete it and create a new food\nobject\nthen i'm going to write this part of our\nprogram within an else statement\nwe will only delete the last body part\nof our snake\nif we did not eat a food object\nokay let's test it again\nso i have three body parts now i have\nfour\nfive\nsix seven eight nine\nten you can see that the score is going\nup too\nokay let's work on collisions next\nbecause i should not be able to go off\nscreen like this\nthere's one thing that we're going to\nchange so let's add an\nif statement that will check collisions\nthis will return true or false if we\ndetect a collision\nand pass in our snake object\nif there is a collision we'll call the\ngame over function\nelse we will update to the next turn\nokay let's fill in the check collisions\nfunction\nand we no longer need our function of\nnext turn\nactually we don't need these classes\neither so i'll minimize them\nokay check collisions so it looks like\nwe will need a parameter of snake\nso be sure to set that\nlet's unpack the head of the snake x\ny equals snake dot coordinates\nat index of zero\nand let's check to see if we cross the\nleft or\nright border of the game if x\nis less than zero or\nx is greater than or equal to\nour game width\nthen return true i think for testing\npurposes i'm going to print something to\nthe console window\ngame over let's test it\nokay i'm going to go over to the right\nborder game over and our game stopped\nlet's go over the left game over\ncool so we know that it's working okay\nlet's do the same thing for y\nwe can use else if here\nif y is less than zero or\ny is greater than or equal to our game\nheight let's print game over\nand return true and we should probably\ntest it\nokay i'm going up game over and let's go\ndown\ngame over\nso what if our snake touches its tail or\nanother body part\nso let's say four i actually i\nisn't too descriptive let's say for\nevery body part\nin snake dot coordinates\nwe're going to set this to everything\nafter the head of the snake\nwe're going to check to see if any of\nthe coordinates are matching\nif x is equal to\nbody part at index\n0 and\ny is equal to body\npart at index 1\nthen return true\nand i'll print game over to test it\nprint game over\notherwise we can return false there are\nno collisions\ni think i'm going to change the size of\nthe snake\nto 10. okay let's run into each other\ncool game over and the last thing that\nwe need to do\nis to fill in the game over function\nbecause it looks like everything else is\nfine\nso head to the game over function take\nyour canvas and delete all\nand we'll create some game over text\ncanvas\ncreate text\ni would like this in the center of my\ncanvas\ni'll take canvas w info\nwidth divided by two comma\ncanvas w info height\ndivided by two i'm going to put some of\nthis on the next line\nfor readability i'll set a font\npick whatever font that you want\nwe'll need some text\ntext equals game over\npick a color red's decent\ni'll add a tag too for convenience game\nover and that should be it for the game\nover function\ni'm going to change the body parts of\nthe snake back to what it was originally\nand we should probably test that game\nover screen\nall right it appeared okay so let's\nchange some of these settings around\nyou can create a larger game board let's\nsay\n1000 by 700\nthat still works you can slow down the\nspeed or speed it up\nso 100 will be about half as fast\nit's going pretty slow now but what if\nwe set it to\n20.\nyou can change the space size\nso everything is a lot smaller now\nincluding the food\nobject\nyou can change the body parts what about\n20 to begin with\nthat's fairly excessive\ni'll change that back to three you can\nchange the snake color\nlet's say we would like a blue snake\nso that is for a hex color\nfour zeros and then two f's\nyou can change the food color so let's\nsay we would like a yellow food\nobject so that would be four f's and\nthen two zeros\nkind of resembles the python logo that\ncolor scheme\nyou can change the background color too\nso let's say\nall white that would be six apps\ni do not like that go back delete delete\ndelete alright well\nthat should be everything let's run this\ngame one last time\n[Music]\n[Music]\nwell everybody that is a very basic game\nof snake for beginners i will post all\nof this code to the comment section down\nbelow but yeah that's a basic game of\nsnake\nusing python hey you\nyeah i'm talking to you if you learned\nsomething new then help me\nhelp you in three easy steps by smashing\nthat like button\ndrop a comment down below and subscribe\nif you'd like to become a fellow bro\n[Music]\nyou\n",
  "words": [
    "hey",
    "going",
    "everybody",
    "bro",
    "hope",
    "well",
    "video",
    "going",
    "help",
    "get",
    "started",
    "python",
    "sit",
    "back",
    "relax",
    "enjoy",
    "show",
    "would",
    "mind",
    "please",
    "like",
    "comment",
    "subscribe",
    "one",
    "like",
    "equals",
    "one",
    "prayer",
    "youtube",
    "algorithm",
    "gon",
    "na",
    "tell",
    "need",
    "learn",
    "python",
    "easiest",
    "programming",
    "language",
    "learn",
    "well",
    "popular",
    "world",
    "right",
    "according",
    "glassdoor",
    "salary",
    "new",
    "python",
    "developers",
    "united",
    "states",
    "64",
    "000",
    "sounds",
    "good",
    "well",
    "let",
    "get",
    "started",
    "need",
    "download",
    "python",
    "go",
    "downloads",
    "click",
    "yellow",
    "download",
    "python",
    "button",
    "open",
    "done",
    "check",
    "add",
    "python",
    "another",
    "version",
    "path",
    "install",
    "give",
    "little",
    "bit",
    "states",
    "setup",
    "successful",
    "let",
    "close",
    "next",
    "step",
    "download",
    "ide",
    "acronym",
    "integrated",
    "development",
    "environment",
    "think",
    "software",
    "helps",
    "us",
    "write",
    "software",
    "one",
    "ide",
    "recommend",
    "pycharm",
    "find",
    "pycharm",
    "go",
    "download",
    "would",
    "like",
    "pay",
    "professional",
    "version",
    "click",
    "download",
    "button",
    "since",
    "like",
    "pay",
    "things",
    "going",
    "use",
    "free",
    "community",
    "version",
    "point",
    "follow",
    "standard",
    "installation",
    "procedure",
    "click",
    "next",
    "pick",
    "destination",
    "folder",
    "keep",
    "default",
    "next",
    "would",
    "like",
    "desktop",
    "shortcut",
    "check",
    "would",
    "also",
    "recommend",
    "updating",
    "path",
    "variable",
    "next",
    "install",
    "give",
    "minute",
    "two",
    "finishing",
    "desktop",
    "shortcut",
    "click",
    "run",
    "pycharm",
    "let",
    "create",
    "new",
    "project",
    "name",
    "project",
    "whatever",
    "like",
    "going",
    "name",
    "project",
    "hello",
    "world",
    "recommend",
    "creating",
    "main",
    "dot",
    "pi",
    "welcome",
    "script",
    "right",
    "show",
    "manually",
    "let",
    "create",
    "need",
    "python",
    "file",
    "work",
    "create",
    "one",
    "go",
    "file",
    "new",
    "python",
    "file",
    "going",
    "name",
    "main",
    "click",
    "python",
    "file",
    "right",
    "ladies",
    "gentlemen",
    "empty",
    "python",
    "script",
    "use",
    "begin",
    "coding",
    "checked",
    "box",
    "create",
    "welcome",
    "script",
    "created",
    "new",
    "project",
    "main",
    "python",
    "file",
    "probably",
    "look",
    "little",
    "something",
    "like",
    "completely",
    "fine",
    "delete",
    "know",
    "guys",
    "font",
    "small",
    "let",
    "change",
    "change",
    "going",
    "file",
    "settings",
    "editor",
    "font",
    "increase",
    "font",
    "size",
    "let",
    "say",
    "25",
    "also",
    "change",
    "font",
    "good",
    "one",
    "uh",
    "click",
    "apply",
    "okay",
    "much",
    "better",
    "actually",
    "see",
    "something",
    "run",
    "python",
    "script",
    "click",
    "screen",
    "play",
    "button",
    "corner",
    "alternatively",
    "go",
    "run",
    "tab",
    "go",
    "run",
    "okay",
    "box",
    "appeared",
    "bottom",
    "referred",
    "terminal",
    "window",
    "display",
    "output",
    "program",
    "line",
    "end",
    "process",
    "finished",
    "exit",
    "code",
    "zero",
    "means",
    "errors",
    "program",
    "currently",
    "program",
    "anything",
    "let",
    "change",
    "let",
    "print",
    "something",
    "let",
    "print",
    "message",
    "print",
    "message",
    "terminal",
    "window",
    "type",
    "print",
    "add",
    "set",
    "parentheses",
    "type",
    "message",
    "within",
    "quotes",
    "either",
    "double",
    "quotes",
    "single",
    "quotes",
    "matter",
    "let",
    "think",
    "message",
    "know",
    "love",
    "pizza",
    "let",
    "run",
    "terminal",
    "window",
    "says",
    "love",
    "pizza",
    "print",
    "another",
    "line",
    "add",
    "another",
    "print",
    "statement",
    "print",
    "message",
    "within",
    "quotes",
    "really",
    "good",
    "well",
    "know",
    "printed",
    "love",
    "pizza",
    "really",
    "good",
    "ladies",
    "gentlemen",
    "wrote",
    "first",
    "python",
    "program",
    "way",
    "change",
    "font",
    "well",
    "font",
    "color",
    "terminal",
    "window",
    "going",
    "file",
    "settings",
    "go",
    "editor",
    "color",
    "scheme",
    "console",
    "font",
    "console",
    "colors",
    "let",
    "change",
    "font",
    "let",
    "say",
    "would",
    "like",
    "whatever",
    "font",
    "click",
    "apply",
    "let",
    "change",
    "font",
    "color",
    "going",
    "console",
    "colors",
    "output",
    "click",
    "number",
    "two",
    "select",
    "color",
    "let",
    "say",
    "would",
    "like",
    "bright",
    "green",
    "decent",
    "anything",
    "else",
    "let",
    "say",
    "dark",
    "color",
    "barely",
    "see",
    "let",
    "click",
    "apply",
    "okay",
    "oh",
    "yeah",
    "much",
    "better",
    "well",
    "everybody",
    "first",
    "python",
    "program",
    "post",
    "useful",
    "links",
    "timestamps",
    "video",
    "comments",
    "section",
    "yeah",
    "welcome",
    "coding",
    "python",
    "hey",
    "yeah",
    "talking",
    "learned",
    "something",
    "new",
    "help",
    "help",
    "three",
    "easy",
    "steps",
    "smashing",
    "like",
    "button",
    "drop",
    "comment",
    "subscribe",
    "like",
    "become",
    "fellow",
    "bro",
    "music",
    "hey",
    "going",
    "everybody",
    "bro",
    "hope",
    "well",
    "video",
    "going",
    "explain",
    "variables",
    "work",
    "python",
    "sit",
    "back",
    "relax",
    "enjoy",
    "show",
    "find",
    "video",
    "helpful",
    "please",
    "remember",
    "like",
    "comment",
    "subscribe",
    "support",
    "help",
    "keep",
    "channel",
    "running",
    "right",
    "let",
    "variable",
    "container",
    "value",
    "behaves",
    "value",
    "contains",
    "much",
    "like",
    "algebra",
    "lessons",
    "back",
    "day",
    "solve",
    "whatever",
    "value",
    "x",
    "reuse",
    "x",
    "behaved",
    "exactly",
    "value",
    "well",
    "programming",
    "plus",
    "assign",
    "variables",
    "different",
    "data",
    "types",
    "limited",
    "numbers",
    "assign",
    "whole",
    "words",
    "numbers",
    "even",
    "things",
    "called",
    "booleans",
    "either",
    "true",
    "false",
    "get",
    "depth",
    "data",
    "types",
    "little",
    "bit",
    "later",
    "video",
    "let",
    "create",
    "variable",
    "need",
    "unique",
    "name",
    "variable",
    "let",
    "say",
    "name",
    "name",
    "equals",
    "value",
    "first",
    "data",
    "type",
    "cover",
    "strings",
    "string",
    "series",
    "characters",
    "create",
    "string",
    "either",
    "use",
    "single",
    "quotes",
    "double",
    "quotes",
    "python",
    "assign",
    "value",
    "whatever",
    "name",
    "assign",
    "variable",
    "name",
    "value",
    "bro",
    "variable",
    "behave",
    "exactly",
    "value",
    "name",
    "reuse",
    "variable",
    "something",
    "let",
    "print",
    "whatever",
    "name",
    "print",
    "name",
    "print",
    "whatever",
    "name",
    "console",
    "window",
    "print",
    "variable",
    "make",
    "sure",
    "put",
    "within",
    "quotes",
    "literally",
    "printing",
    "word",
    "name",
    "see",
    "need",
    "use",
    "variable",
    "something",
    "make",
    "sure",
    "within",
    "quotes",
    "combine",
    "string",
    "variable",
    "another",
    "string",
    "within",
    "print",
    "statement",
    "let",
    "print",
    "string",
    "literal",
    "hello",
    "space",
    "plus",
    "name",
    "combining",
    "strings",
    "printing",
    "results",
    "console",
    "window",
    "print",
    "hello",
    "bro",
    "actually",
    "check",
    "data",
    "type",
    "variable",
    "going",
    "turn",
    "line",
    "comment",
    "take",
    "name",
    "variable",
    "surround",
    "set",
    "parentheses",
    "precede",
    "set",
    "parentheses",
    "type",
    "function",
    "print",
    "data",
    "type",
    "variable",
    "console",
    "window",
    "see",
    "says",
    "class",
    "str",
    "short",
    "string",
    "string",
    "series",
    "characters",
    "name",
    "good",
    "example",
    "string",
    "series",
    "characters",
    "check",
    "data",
    "type",
    "variable",
    "use",
    "type",
    "function",
    "actually",
    "combine",
    "variables",
    "together",
    "long",
    "data",
    "type",
    "let",
    "change",
    "name",
    "maybe",
    "first",
    "name",
    "create",
    "second",
    "variable",
    "called",
    "lastname",
    "common",
    "naming",
    "convention",
    "variables",
    "two",
    "words",
    "separate",
    "word",
    "underscore",
    "necessary",
    "common",
    "practice",
    "python",
    "honestly",
    "sometimes",
    "forget",
    "tell",
    "anybody",
    "let",
    "create",
    "another",
    "variable",
    "called",
    "last",
    "name",
    "last",
    "name",
    "equals",
    "whatever",
    "last",
    "name",
    "let",
    "create",
    "third",
    "variable",
    "called",
    "full",
    "name",
    "full",
    "underscore",
    "name",
    "let",
    "combine",
    "first",
    "name",
    "plus",
    "last",
    "name",
    "let",
    "us",
    "display",
    "full",
    "name",
    "along",
    "hello",
    "plus",
    "full",
    "name",
    "two",
    "names",
    "combined",
    "together",
    "create",
    "whole",
    "new",
    "variable",
    "actually",
    "think",
    "add",
    "space",
    "within",
    "variable",
    "bunch",
    "string",
    "concatenation",
    "combining",
    "variable",
    "first",
    "name",
    "plus",
    "space",
    "character",
    "plus",
    "last",
    "name",
    "result",
    "hello",
    "whatever",
    "first",
    "name",
    "last",
    "name",
    "variable",
    "string",
    "data",
    "type",
    "series",
    "characters",
    "strings",
    "normally",
    "use",
    "sort",
    "math",
    "next",
    "data",
    "type",
    "comes",
    "time",
    "turned",
    "lines",
    "comments",
    "going",
    "move",
    "int",
    "data",
    "type",
    "short",
    "integer",
    "time",
    "let",
    "create",
    "variable",
    "called",
    "age",
    "assign",
    "value",
    "whatever",
    "age",
    "let",
    "say",
    "21",
    "assign",
    "value",
    "int",
    "data",
    "type",
    "make",
    "sure",
    "within",
    "quotes",
    "technically",
    "would",
    "string",
    "see",
    "color",
    "scheme",
    "number",
    "actually",
    "changed",
    "string",
    "would",
    "treat",
    "different",
    "int",
    "data",
    "type",
    "strings",
    "normally",
    "use",
    "sort",
    "math",
    "variable",
    "called",
    "edge",
    "actually",
    "increase",
    "decrease",
    "whatever",
    "want",
    "edge",
    "let",
    "increase",
    "age",
    "one",
    "let",
    "say",
    "birthday",
    "would",
    "say",
    "age",
    "equals",
    "age",
    "plus",
    "one",
    "let",
    "print",
    "edge",
    "console",
    "window",
    "print",
    "edge",
    "see",
    "says",
    "shorthand",
    "way",
    "writing",
    "type",
    "age",
    "plus",
    "equals",
    "one",
    "kind",
    "like",
    "shortcut",
    "would",
    "work",
    "let",
    "print",
    "data",
    "type",
    "inch",
    "variable",
    "within",
    "print",
    "statement",
    "print",
    "edge",
    "add",
    "edge",
    "variable",
    "type",
    "function",
    "print",
    "data",
    "type",
    "edge",
    "variable",
    "console",
    "window",
    "turn",
    "line",
    "comment",
    "get",
    "way",
    "print",
    "data",
    "type",
    "age",
    "variable",
    "see",
    "int",
    "data",
    "type",
    "short",
    "integer",
    "stores",
    "whole",
    "integer",
    "number",
    "string",
    "going",
    "surround",
    "value",
    "within",
    "set",
    "quotes",
    "turn",
    "line",
    "comment",
    "get",
    "way",
    "see",
    "data",
    "type",
    "age",
    "variable",
    "string",
    "strings",
    "normally",
    "use",
    "sort",
    "math",
    "let",
    "attempt",
    "increase",
    "age",
    "variable",
    "one",
    "ran",
    "error",
    "type",
    "air",
    "concatenate",
    "string",
    "string",
    "end",
    "point",
    "important",
    "use",
    "appropriate",
    "data",
    "type",
    "strings",
    "normally",
    "use",
    "sort",
    "math",
    "want",
    "use",
    "data",
    "type",
    "numeric",
    "value",
    "int",
    "float",
    "discuss",
    "little",
    "bit",
    "later",
    "situation",
    "consider",
    "would",
    "like",
    "display",
    "edge",
    "variable",
    "along",
    "string",
    "literal",
    "much",
    "like",
    "line",
    "involving",
    "string",
    "literal",
    "hello",
    "plus",
    "user",
    "full",
    "name",
    "let",
    "attempt",
    "going",
    "work",
    "explain",
    "within",
    "print",
    "statement",
    "let",
    "say",
    "something",
    "age",
    "plus",
    "edge",
    "going",
    "run",
    "type",
    "error",
    "attempted",
    "use",
    "string",
    "concatenation",
    "string",
    "literal",
    "variable",
    "different",
    "data",
    "type",
    "variable",
    "int",
    "data",
    "type",
    "order",
    "display",
    "edge",
    "along",
    "string",
    "would",
    "need",
    "convert",
    "edge",
    "variable",
    "string",
    "data",
    "type",
    "one",
    "way",
    "type",
    "casting",
    "cover",
    "next",
    "video",
    "going",
    "surround",
    "age",
    "variable",
    "data",
    "type",
    "set",
    "parentheses",
    "precede",
    "str",
    "short",
    "string",
    "convert",
    "variable",
    "string",
    "allow",
    "us",
    "display",
    "another",
    "string",
    "run",
    "program",
    "way",
    "display",
    "age",
    "case",
    "22",
    "need",
    "display",
    "variable",
    "different",
    "data",
    "type",
    "along",
    "string",
    "would",
    "need",
    "use",
    "stringcast",
    "convert",
    "data",
    "type",
    "string",
    "cover",
    "next",
    "video",
    "typecasting",
    "int",
    "data",
    "type",
    "stores",
    "whole",
    "integer",
    "number",
    "next",
    "data",
    "type",
    "float",
    "data",
    "type",
    "going",
    "turn",
    "lines",
    "comments",
    "move",
    "float",
    "data",
    "type",
    "numeric",
    "value",
    "store",
    "number",
    "includes",
    "decimal",
    "portion",
    "int",
    "data",
    "type",
    "store",
    "decimal",
    "portion",
    "short",
    "integer",
    "stores",
    "whole",
    "number",
    "time",
    "let",
    "say",
    "height",
    "assign",
    "perfectly",
    "normal",
    "height",
    "maybe",
    "centimeters",
    "decimal",
    "portion",
    "important",
    "indicating",
    "floating",
    "point",
    "number",
    "float",
    "short",
    "let",
    "print",
    "height",
    "console",
    "window",
    "print",
    "height",
    "print",
    "whatever",
    "height",
    "let",
    "check",
    "type",
    "height",
    "using",
    "type",
    "function",
    "within",
    "print",
    "statement",
    "going",
    "add",
    "height",
    "surround",
    "another",
    "set",
    "parentheses",
    "precede",
    "type",
    "function",
    "data",
    "type",
    "variable",
    "height",
    "float",
    "short",
    "floating",
    "point",
    "number",
    "numeric",
    "value",
    "contains",
    "decimal",
    "portion",
    "practice",
    "let",
    "print",
    "height",
    "along",
    "string",
    "literal",
    "let",
    "create",
    "string",
    "literal",
    "height",
    "plus",
    "height",
    "guess",
    "going",
    "type",
    "casting",
    "surround",
    "height",
    "set",
    "parentheses",
    "precede",
    "str",
    "convert",
    "height",
    "string",
    "use",
    "string",
    "concatenation",
    "within",
    "print",
    "statement",
    "print",
    "message",
    "height",
    "actually",
    "let",
    "add",
    "centimeters",
    "end",
    "plus",
    "cm",
    "go",
    "floating",
    "point",
    "number",
    "float",
    "short",
    "numeric",
    "value",
    "contains",
    "decimal",
    "portion",
    "last",
    "data",
    "type",
    "going",
    "cover",
    "boolean",
    "data",
    "type",
    "variable",
    "store",
    "true",
    "false",
    "let",
    "say",
    "variable",
    "called",
    "human",
    "assign",
    "boolean",
    "value",
    "would",
    "either",
    "true",
    "false",
    "print",
    "whatever",
    "value",
    "let",
    "print",
    "whatever",
    "human",
    "display",
    "false",
    "reason",
    "may",
    "want",
    "use",
    "booleans",
    "instead",
    "strings",
    "even",
    "though",
    "still",
    "store",
    "string",
    "representation",
    "word",
    "false",
    "true",
    "useful",
    "get",
    "statements",
    "check",
    "see",
    "statement",
    "true",
    "good",
    "use",
    "boolean",
    "values",
    "let",
    "check",
    "data",
    "type",
    "human",
    "variable",
    "let",
    "print",
    "type",
    "human",
    "print",
    "console",
    "window",
    "bool",
    "short",
    "boolean",
    "make",
    "sure",
    "putting",
    "within",
    "quotes",
    "technically",
    "string",
    "behave",
    "differently",
    "data",
    "type",
    "string",
    "may",
    "noticed",
    "well",
    "font",
    "color",
    "changed",
    "strings",
    "boolean",
    "values",
    "another",
    "good",
    "indicator",
    "need",
    "display",
    "value",
    "along",
    "string",
    "using",
    "string",
    "concatenation",
    "well",
    "guess",
    "going",
    "typecast",
    "let",
    "print",
    "something",
    "r",
    "u",
    "human",
    "need",
    "use",
    "string",
    "concatenation",
    "convert",
    "boolean",
    "variable",
    "human",
    "string",
    "programmed",
    "inform",
    "yes",
    "fact",
    "human",
    "true",
    "well",
    "everyone",
    "basics",
    "variables",
    "container",
    "value",
    "behave",
    "value",
    "contain",
    "four",
    "basic",
    "data",
    "types",
    "strings",
    "store",
    "series",
    "characters",
    "inc",
    "store",
    "whole",
    "integer",
    "floats",
    "floating",
    "point",
    "numbers",
    "numeric",
    "value",
    "decimal",
    "booleans",
    "store",
    "true",
    "false",
    "useful",
    "statements",
    "variables",
    "would",
    "like",
    "copy",
    "code",
    "copy",
    "paste",
    "comments",
    "section",
    "yeah",
    "variables",
    "work",
    "python",
    "hey",
    "people",
    "going",
    "bro",
    "hope",
    "well",
    "video",
    "going",
    "explain",
    "multiple",
    "assignment",
    "python",
    "sit",
    "back",
    "relax",
    "enjoy",
    "show",
    "well",
    "since",
    "clicked",
    "video",
    "probably",
    "explain",
    "multiple",
    "assignment",
    "multiple",
    "assignment",
    "allows",
    "us",
    "assign",
    "multiple",
    "variables",
    "time",
    "using",
    "one",
    "line",
    "code",
    "example",
    "us",
    "using",
    "standard",
    "assignment",
    "let",
    "say",
    "variable",
    "name",
    "set",
    "value",
    "name",
    "use",
    "name",
    "example",
    "let",
    "say",
    "edge",
    "equals",
    "21",
    "variable",
    "called",
    "attractive",
    "think",
    "going",
    "set",
    "true",
    "okay",
    "bunch",
    "variables",
    "print",
    "value",
    "variables",
    "print",
    "statements",
    "let",
    "print",
    "name",
    "age",
    "attractive",
    "name",
    "age",
    "attractive",
    "would",
    "expect",
    "prints",
    "bro",
    "21",
    "true",
    "another",
    "way",
    "could",
    "write",
    "code",
    "use",
    "multiple",
    "assignment",
    "allows",
    "us",
    "assign",
    "multiple",
    "variables",
    "time",
    "using",
    "one",
    "line",
    "code",
    "going",
    "turn",
    "lines",
    "comments",
    "time",
    "use",
    "one",
    "line",
    "code",
    "going",
    "list",
    "variables",
    "separated",
    "comma",
    "would",
    "name",
    "comma",
    "edge",
    "comma",
    "attractive",
    "set",
    "equal",
    "values",
    "order",
    "separated",
    "commas",
    "would",
    "bro",
    "comma",
    "21",
    "comma",
    "true",
    "would",
    "thing",
    "using",
    "one",
    "line",
    "code",
    "another",
    "example",
    "let",
    "say",
    "four",
    "variables",
    "spongebob",
    "patrick",
    "sandy",
    "squidward",
    "let",
    "pretend",
    "around",
    "maybe",
    "30",
    "years",
    "old",
    "least",
    "seems",
    "like",
    "around",
    "30",
    "years",
    "old",
    "could",
    "wrong",
    "familiar",
    "spongebob",
    "lore",
    "let",
    "set",
    "equal",
    "could",
    "write",
    "using",
    "four",
    "lines",
    "code",
    "could",
    "use",
    "multiple",
    "assignment",
    "write",
    "thing",
    "using",
    "one",
    "line",
    "code",
    "variables",
    "equal",
    "value",
    "little",
    "bit",
    "different",
    "syntax",
    "let",
    "begin",
    "first",
    "variable",
    "spongebob",
    "equals",
    "patrick",
    "equals",
    "sandy",
    "equals",
    "squidward",
    "going",
    "set",
    "equal",
    "30",
    "work",
    "fine",
    "using",
    "one",
    "line",
    "code",
    "well",
    "everybody",
    "pretty",
    "much",
    "multiple",
    "assignment",
    "allows",
    "us",
    "assign",
    "multiple",
    "variables",
    "time",
    "using",
    "one",
    "line",
    "code",
    "post",
    "code",
    "comments",
    "section",
    "well",
    "yeah",
    "multiple",
    "assignment",
    "works",
    "python",
    "hey",
    "going",
    "everybody",
    "bro",
    "hope",
    "well",
    "video",
    "going",
    "demonstrate",
    "useful",
    "string",
    "methods",
    "python",
    "sit",
    "back",
    "relax",
    "enjoy",
    "show",
    "right",
    "let",
    "video",
    "going",
    "explaining",
    "demonstrating",
    "useful",
    "methods",
    "available",
    "us",
    "strings",
    "let",
    "create",
    "variable",
    "called",
    "name",
    "example",
    "use",
    "name",
    "want",
    "variable",
    "called",
    "name",
    "first",
    "example",
    "let",
    "print",
    "length",
    "name",
    "variable",
    "surround",
    "name",
    "variable",
    "length",
    "method",
    "print",
    "return",
    "long",
    "length",
    "string",
    "length",
    "name",
    "variable",
    "three",
    "three",
    "characters",
    "increase",
    "size",
    "name",
    "well",
    "going",
    "change",
    "length",
    "method",
    "going",
    "turn",
    "line",
    "comment",
    "let",
    "move",
    "next",
    "find",
    "method",
    "copy",
    "pasted",
    "print",
    "name",
    "reuse",
    "name",
    "dot",
    "actually",
    "intellisense",
    "setup",
    "add",
    "dot",
    "variable",
    "get",
    "suggestion",
    "suggestions",
    "different",
    "methods",
    "features",
    "access",
    "let",
    "find",
    "find",
    "uh",
    "screw",
    "type",
    "find",
    "find",
    "find",
    "first",
    "index",
    "character",
    "let",
    "say",
    "would",
    "like",
    "find",
    "capital",
    "b",
    "well",
    "index",
    "zero",
    "computers",
    "always",
    "start",
    "zero",
    "first",
    "character",
    "would",
    "zero",
    "r",
    "would",
    "one",
    "would",
    "two",
    "example",
    "right",
    "find",
    "character",
    "within",
    "string",
    "moving",
    "let",
    "capitalize",
    "name",
    "probably",
    "make",
    "lowercase",
    "name",
    "dot",
    "capitalize",
    "make",
    "name",
    "capitalized",
    "spaces",
    "additional",
    "words",
    "going",
    "capitalize",
    "first",
    "letter",
    "string",
    "next",
    "upper",
    "make",
    "string",
    "uppercase",
    "name",
    "upper",
    "uppercase",
    "guess",
    "next",
    "lower",
    "name",
    "dot",
    "lower",
    "probably",
    "make",
    "capital",
    "everything",
    "lowercase",
    "making",
    "good",
    "progress",
    "today",
    "next",
    "digit",
    "return",
    "true",
    "false",
    "depending",
    "string",
    "digit",
    "print",
    "false",
    "changed",
    "string",
    "bunch",
    "numbers",
    "like",
    "1",
    "2",
    "3",
    "return",
    "true",
    "let",
    "change",
    "back",
    "move",
    "next",
    "alpha",
    "alphabetical",
    "characters",
    "oh",
    "make",
    "sure",
    "add",
    "parentheses",
    "afterwards",
    "bad",
    "false",
    "added",
    "space",
    "within",
    "true",
    "use",
    "alpha",
    "check",
    "see",
    "string",
    "contains",
    "letters",
    "alphabetical",
    "letters",
    "next",
    "count",
    "count",
    "many",
    "characters",
    "within",
    "string",
    "would",
    "like",
    "count",
    "many",
    "return",
    "two",
    "right",
    "okay",
    "almost",
    "end",
    "replace",
    "characters",
    "within",
    "string",
    "use",
    "replace",
    "method",
    "pass",
    "two",
    "arguments",
    "character",
    "would",
    "like",
    "replace",
    "character",
    "would",
    "like",
    "replace",
    "character",
    "would",
    "like",
    "change",
    "name",
    "brock",
    "hod",
    "oh",
    "guys",
    "gon",
    "na",
    "like",
    "next",
    "one",
    "technically",
    "method",
    "really",
    "neat",
    "feature",
    "one",
    "thing",
    "available",
    "us",
    "python",
    "display",
    "string",
    "multiple",
    "times",
    "multiplying",
    "string",
    "given",
    "number",
    "let",
    "say",
    "would",
    "like",
    "display",
    "name",
    "three",
    "times",
    "take",
    "string",
    "variable",
    "add",
    "times",
    "three",
    "print",
    "name",
    "three",
    "times",
    "bro",
    "bro",
    "bro",
    "like",
    "said",
    "technically",
    "method",
    "useful",
    "feature",
    "might",
    "interested",
    "related",
    "right",
    "everybody",
    "useful",
    "methods",
    "available",
    "us",
    "strings",
    "would",
    "like",
    "copy",
    "code",
    "post",
    "comments",
    "section",
    "yeah",
    "useful",
    "methods",
    "available",
    "us",
    "strings",
    "hey",
    "going",
    "everybody",
    "bro",
    "hope",
    "well",
    "video",
    "going",
    "teach",
    "guys",
    "typecasting",
    "python",
    "sit",
    "back",
    "relax",
    "enjoy",
    "show",
    "right",
    "welcome",
    "back",
    "everybody",
    "super",
    "quick",
    "video",
    "guys",
    "today",
    "subject",
    "typecasting",
    "typecasting",
    "ability",
    "convert",
    "data",
    "type",
    "value",
    "another",
    "data",
    "type",
    "example",
    "written",
    "already",
    "going",
    "paste",
    "three",
    "variables",
    "example",
    "x",
    "z",
    "x",
    "contains",
    "one",
    "whole",
    "integer",
    "short",
    "contains",
    "two",
    "point",
    "zero",
    "floating",
    "point",
    "number",
    "float",
    "four",
    "short",
    "tell",
    "float",
    "ends",
    "decimal",
    "portion",
    "z",
    "contains",
    "string",
    "three",
    "string",
    "series",
    "characters",
    "tell",
    "string",
    "surrounded",
    "set",
    "quotes",
    "remember",
    "strings",
    "normally",
    "perform",
    "math",
    "strings",
    "three",
    "print",
    "statements",
    "x",
    "z",
    "would",
    "expect",
    "contain",
    "values",
    "one",
    "two",
    "point",
    "zero",
    "three",
    "let",
    "begin",
    "converting",
    "z",
    "integer",
    "data",
    "type",
    "via",
    "typecasting",
    "order",
    "perform",
    "typecasting",
    "value",
    "variable",
    "type",
    "value",
    "variable",
    "surround",
    "set",
    "parentheses",
    "whoops",
    "missed",
    "data",
    "type",
    "like",
    "convert",
    "value",
    "variable",
    "would",
    "like",
    "convert",
    "integer",
    "use",
    "whatever",
    "need",
    "going",
    "replace",
    "within",
    "print",
    "statement",
    "typecast",
    "integer",
    "display",
    "1",
    "2",
    "whole",
    "integer",
    "2",
    "permanent",
    "change",
    "need",
    "make",
    "permanent",
    "change",
    "reassign",
    "let",
    "say",
    "equals",
    "going",
    "typecast",
    "let",
    "round",
    "set",
    "parentheses",
    "precede",
    "data",
    "type",
    "like",
    "convert",
    "y2",
    "whole",
    "integer",
    "print",
    "without",
    "typecast",
    "time",
    "result",
    "one",
    "two",
    "three",
    "z",
    "z",
    "storing",
    "string",
    "strings",
    "normally",
    "perform",
    "math",
    "strings",
    "example",
    "within",
    "print",
    "statement",
    "state",
    "z",
    "times",
    "three",
    "would",
    "think",
    "result",
    "would",
    "nine",
    "right",
    "well",
    "wrong",
    "going",
    "print",
    "three",
    "three",
    "times",
    "need",
    "convert",
    "string",
    "int",
    "float",
    "would",
    "typecast",
    "time",
    "let",
    "type",
    "cast",
    "z",
    "integer",
    "z",
    "int",
    "type",
    "cast",
    "z",
    "integer",
    "z",
    "times",
    "three",
    "result",
    "9",
    "instead",
    "333",
    "basic",
    "formula",
    "type",
    "casting",
    "let",
    "convert",
    "floating",
    "point",
    "numbers",
    "let",
    "include",
    "x",
    "well",
    "x",
    "feeling",
    "left",
    "let",
    "convert",
    "x",
    "floating",
    "point",
    "number",
    "float",
    "parenthesis",
    "surround",
    "x",
    "display",
    "x",
    "actually",
    "let",
    "convert",
    "z",
    "floats",
    "well",
    "results",
    "remember",
    "multiplied",
    "z",
    "times",
    "three",
    "need",
    "convert",
    "values",
    "string",
    "would",
    "use",
    "string",
    "cast",
    "results",
    "1",
    "333",
    "might",
    "thinking",
    "would",
    "need",
    "convert",
    "integer",
    "float",
    "string",
    "situation",
    "let",
    "say",
    "within",
    "print",
    "statements",
    "need",
    "print",
    "variables",
    "along",
    "another",
    "string",
    "within",
    "print",
    "statement",
    "let",
    "say",
    "x",
    "plus",
    "x",
    "would",
    "like",
    "display",
    "together",
    "let",
    "copy",
    "thing",
    "say",
    "plus",
    "normally",
    "display",
    "string",
    "along",
    "integer",
    "float",
    "using",
    "string",
    "concatenation",
    "result",
    "compilation",
    "error",
    "concatenate",
    "string",
    "int",
    "string",
    "situation",
    "might",
    "need",
    "use",
    "typecasting",
    "convert",
    "integer",
    "float",
    "string",
    "let",
    "display",
    "x",
    "strings",
    "via",
    "typecasting",
    "surround",
    "x",
    "set",
    "parentheses",
    "precede",
    "data",
    "type",
    "like",
    "convert",
    "values",
    "would",
    "like",
    "convert",
    "x",
    "strings",
    "compile",
    "run",
    "fine",
    "well",
    "everybody",
    "basics",
    "typecasting",
    "would",
    "like",
    "copy",
    "code",
    "post",
    "everything",
    "comments",
    "found",
    "video",
    "helpful",
    "afraid",
    "help",
    "smashing",
    "like",
    "button",
    "drop",
    "comment",
    "subscribe",
    "like",
    "become",
    "fellow",
    "bro",
    "hey",
    "going",
    "everybody",
    "bro",
    "hope",
    "well",
    "video",
    "going",
    "teach",
    "guys",
    "accept",
    "user",
    "input",
    "python",
    "sit",
    "back",
    "relax",
    "enjoy",
    "show",
    "ladies",
    "gentlemen",
    "fun",
    "begins",
    "video",
    "going",
    "explain",
    "accept",
    "user",
    "input",
    "python",
    "using",
    "input",
    "function",
    "type",
    "input",
    "console",
    "window",
    "would",
    "probably",
    "good",
    "practice",
    "let",
    "user",
    "know",
    "want",
    "type",
    "exactly",
    "let",
    "ask",
    "somebody",
    "name",
    "within",
    "quotes",
    "inside",
    "input",
    "function",
    "going",
    "type",
    "name",
    "program",
    "wait",
    "us",
    "enter",
    "user",
    "input",
    "use",
    "name",
    "example",
    "going",
    "type",
    "bro",
    "submit",
    "user",
    "input",
    "type",
    "press",
    "enter",
    "see",
    "process",
    "finished",
    "exit",
    "code",
    "zero",
    "means",
    "program",
    "done",
    "running",
    "probably",
    "something",
    "value",
    "actually",
    "assign",
    "variable",
    "use",
    "elsewhere",
    "program",
    "precede",
    "input",
    "variable",
    "like",
    "name",
    "works",
    "name",
    "equals",
    "input",
    "accept",
    "user",
    "input",
    "assign",
    "variable",
    "called",
    "something",
    "let",
    "print",
    "message",
    "involving",
    "name",
    "variable",
    "hello",
    "plus",
    "name",
    "run",
    "program",
    "accept",
    "user",
    "input",
    "something",
    "input",
    "display",
    "message",
    "says",
    "hello",
    "bro",
    "type",
    "whatever",
    "want",
    "name",
    "let",
    "say",
    "dude",
    "name",
    "dude",
    "hello",
    "dude",
    "next",
    "part",
    "important",
    "accept",
    "user",
    "input",
    "always",
    "string",
    "data",
    "type",
    "series",
    "characters",
    "need",
    "accept",
    "number",
    "well",
    "ca",
    "normally",
    "perform",
    "math",
    "string",
    "data",
    "type",
    "would",
    "need",
    "cast",
    "either",
    "integer",
    "data",
    "type",
    "float",
    "data",
    "type",
    "example",
    "ca",
    "perform",
    "math",
    "string",
    "let",
    "say",
    "variable",
    "called",
    "edge",
    "age",
    "equals",
    "input",
    "let",
    "ask",
    "old",
    "somebody",
    "old",
    "add",
    "one",
    "somebody",
    "age",
    "let",
    "pretend",
    "birthday",
    "age",
    "equals",
    "age",
    "plus",
    "one",
    "add",
    "one",
    "age",
    "let",
    "try",
    "run",
    "name",
    "bro",
    "old",
    "let",
    "say",
    "okay",
    "ran",
    "error",
    "type",
    "error",
    "concatenate",
    "string",
    "string",
    "mentioned",
    "previously",
    "normally",
    "use",
    "strings",
    "sort",
    "mathematical",
    "equation",
    "operation",
    "want",
    "cast",
    "integer",
    "float",
    "data",
    "type",
    "let",
    "cast",
    "user",
    "input",
    "integer",
    "data",
    "type",
    "surround",
    "user",
    "input",
    "cast",
    "surround",
    "input",
    "set",
    "parenthesis",
    "precede",
    "int",
    "use",
    "user",
    "input",
    "mathematical",
    "operation",
    "let",
    "try",
    "even",
    "though",
    "wo",
    "display",
    "age",
    "yet",
    "name",
    "bro",
    "21",
    "program",
    "finished",
    "x",
    "code",
    "zero",
    "problems",
    "let",
    "attempt",
    "display",
    "edge",
    "print",
    "u",
    "r",
    "plus",
    "age",
    "plus",
    "years",
    "old",
    "string",
    "concatenation",
    "name",
    "bro",
    "old",
    "21",
    "right",
    "ran",
    "type",
    "error",
    "concatenate",
    "string",
    "string",
    "normally",
    "display",
    "variable",
    "integer",
    "data",
    "type",
    "along",
    "strings",
    "string",
    "concatenation",
    "adding",
    "strings",
    "together",
    "would",
    "need",
    "convert",
    "variable",
    "back",
    "string",
    "data",
    "type",
    "cast",
    "surround",
    "edge",
    "variable",
    "cast",
    "going",
    "happen",
    "accept",
    "user",
    "input",
    "string",
    "data",
    "type",
    "immediately",
    "cast",
    "integer",
    "data",
    "type",
    "treat",
    "number",
    "instead",
    "character",
    "need",
    "display",
    "edge",
    "need",
    "convert",
    "back",
    "string",
    "use",
    "string",
    "concatenation",
    "display",
    "strings",
    "together",
    "let",
    "try",
    "theory",
    "name",
    "bro",
    "old",
    "let",
    "say",
    "21",
    "hello",
    "bro",
    "22",
    "years",
    "old",
    "situation",
    "enter",
    "number",
    "contains",
    "decimal",
    "portion",
    "let",
    "try",
    "let",
    "say",
    "years",
    "old",
    "well",
    "ran",
    "different",
    "issue",
    "value",
    "error",
    "invalid",
    "literal",
    "int",
    "base",
    "10",
    "means",
    "cast",
    "string",
    "integer",
    "whole",
    "number",
    "portion",
    "contain",
    "decimal",
    "float",
    "data",
    "type",
    "would",
    "come",
    "data",
    "type",
    "contain",
    "decimal",
    "portion",
    "example",
    "let",
    "create",
    "third",
    "variable",
    "called",
    "height",
    "ask",
    "somebody",
    "height",
    "input",
    "create",
    "prompt",
    "says",
    "tall",
    "cast",
    "float",
    "data",
    "type",
    "string",
    "user",
    "input",
    "contain",
    "decimal",
    "portion",
    "treat",
    "number",
    "instead",
    "series",
    "characters",
    "think",
    "delete",
    "line",
    "wo",
    "really",
    "need",
    "anymore",
    "let",
    "print",
    "height",
    "along",
    "message",
    "u",
    "r",
    "plus",
    "height",
    "need",
    "cast",
    "back",
    "string",
    "surround",
    "height",
    "cast",
    "plus",
    "let",
    "say",
    "cm",
    "tall",
    "right",
    "let",
    "test",
    "name",
    "bro",
    "old",
    "let",
    "say",
    "21",
    "tall",
    "let",
    "pretend",
    "centimeters",
    "tall",
    "adding",
    "test",
    "see",
    "accept",
    "floating",
    "point",
    "number",
    "hello",
    "bro",
    "21",
    "years",
    "old",
    "centimeters",
    "tall",
    "really",
    "right",
    "everybody",
    "basics",
    "user",
    "input",
    "python",
    "normally",
    "user",
    "input",
    "give",
    "value",
    "string",
    "data",
    "type",
    "need",
    "use",
    "value",
    "sort",
    "math",
    "probably",
    "need",
    "cast",
    "integer",
    "float",
    "data",
    "type",
    "would",
    "like",
    "copy",
    "code",
    "post",
    "comment",
    "section",
    "yeah",
    "accept",
    "user",
    "input",
    "python",
    "hey",
    "going",
    "everybody",
    "bro",
    "hope",
    "well",
    "video",
    "going",
    "demonstrate",
    "useful",
    "functions",
    "related",
    "numbers",
    "python",
    "sit",
    "back",
    "relax",
    "enjoy",
    "show",
    "okay",
    "let",
    "begin",
    "video",
    "going",
    "demonstrating",
    "bunch",
    "useful",
    "functions",
    "related",
    "numbers",
    "bunch",
    "functions",
    "located",
    "within",
    "math",
    "module",
    "let",
    "create",
    "variable",
    "example",
    "let",
    "say",
    "pi",
    "equals",
    "first",
    "digits",
    "pi",
    "fine",
    "example",
    "bunch",
    "useful",
    "functions",
    "guys",
    "would",
    "probably",
    "interested",
    "first",
    "round",
    "round",
    "function",
    "type",
    "round",
    "add",
    "set",
    "parenthesis",
    "pass",
    "value",
    "variable",
    "argument",
    "round",
    "function",
    "round",
    "number",
    "us",
    "pi",
    "rounded",
    "nearest",
    "whole",
    "integer",
    "guessed",
    "three",
    "round",
    "number",
    "using",
    "seal",
    "function",
    "math",
    "class",
    "seal",
    "short",
    "ceiling",
    "let",
    "print",
    "result",
    "order",
    "access",
    "function",
    "within",
    "math",
    "module",
    "would",
    "type",
    "name",
    "module",
    "dot",
    "bunch",
    "functions",
    "access",
    "looking",
    "seal",
    "actually",
    "top",
    "seal",
    "round",
    "number",
    "nearest",
    "whole",
    "integer",
    "pi",
    "rounded",
    "four",
    "flip",
    "side",
    "round",
    "number",
    "using",
    "floor",
    "also",
    "located",
    "within",
    "math",
    "module",
    "let",
    "type",
    "math",
    "dot",
    "floor",
    "pi",
    "rounded",
    "would",
    "three",
    "next",
    "absolute",
    "value",
    "function",
    "abs",
    "short",
    "abs",
    "give",
    "absolute",
    "value",
    "number",
    "absolute",
    "value",
    "pi",
    "actually",
    "let",
    "make",
    "negative",
    "absolute",
    "value",
    "tell",
    "far",
    "number",
    "away",
    "zero",
    "pass",
    "negative",
    "number",
    "give",
    "positive",
    "number",
    "abs",
    "short",
    "absolute",
    "value",
    "next",
    "pow",
    "function",
    "pow",
    "raise",
    "base",
    "number",
    "power",
    "let",
    "raise",
    "pi",
    "power",
    "two",
    "pass",
    "two",
    "arguments",
    "base",
    "exponent",
    "pi",
    "power",
    "two",
    "nine",
    "point",
    "eight",
    "change",
    "pow",
    "function",
    "next",
    "square",
    "root",
    "located",
    "within",
    "math",
    "module",
    "type",
    "math",
    "dot",
    "q",
    "r",
    "short",
    "square",
    "root",
    "square",
    "root",
    "pi",
    "let",
    "find",
    "oh",
    "guess",
    "ca",
    "pass",
    "pi",
    "uh",
    "let",
    "round",
    "different",
    "number",
    "like",
    "420",
    "oh",
    "guess",
    "made",
    "pi",
    "negative",
    "okay",
    "square",
    "root",
    "420",
    "change",
    "square",
    "root",
    "function",
    "right",
    "two",
    "left",
    "max",
    "function",
    "max",
    "function",
    "find",
    "largest",
    "varying",
    "amount",
    "values",
    "let",
    "create",
    "three",
    "variables",
    "example",
    "let",
    "say",
    "x",
    "equals",
    "one",
    "equals",
    "two",
    "z",
    "equals",
    "three",
    "use",
    "max",
    "function",
    "find",
    "largest",
    "values",
    "within",
    "print",
    "statement",
    "let",
    "use",
    "max",
    "function",
    "pass",
    "different",
    "values",
    "variables",
    "would",
    "like",
    "compare",
    "would",
    "like",
    "find",
    "largest",
    "value",
    "x",
    "z",
    "result",
    "example",
    "three",
    "min",
    "function",
    "find",
    "lowest",
    "min",
    "pass",
    "values",
    "variables",
    "would",
    "like",
    "find",
    "minimum",
    "value",
    "x",
    "z",
    "case",
    "one",
    "well",
    "everybody",
    "useful",
    "functions",
    "guys",
    "might",
    "interested",
    "guys",
    "would",
    "like",
    "copy",
    "code",
    "post",
    "comments",
    "section",
    "yeah",
    "useful",
    "functions",
    "related",
    "numbers",
    "python",
    "hey",
    "going",
    "everybody",
    "bro",
    "hope",
    "well",
    "video",
    "going",
    "explain",
    "string",
    "slicing",
    "python",
    "sit",
    "back",
    "relax",
    "enjoy",
    "show",
    "right",
    "let",
    "talk",
    "slicing",
    "slicing",
    "used",
    "create",
    "substring",
    "extracting",
    "elements",
    "another",
    "string",
    "principle",
    "also",
    "applied",
    "different",
    "collections",
    "well",
    "video",
    "going",
    "focusing",
    "slicing",
    "strings",
    "slice",
    "string",
    "either",
    "use",
    "indexing",
    "operator",
    "set",
    "square",
    "brackets",
    "use",
    "slice",
    "function",
    "create",
    "slice",
    "object",
    "little",
    "complex",
    "discuss",
    "slice",
    "function",
    "near",
    "end",
    "video",
    "slicing",
    "three",
    "optional",
    "arguments",
    "three",
    "fields",
    "fill",
    "depending",
    "want",
    "slice",
    "string",
    "starting",
    "index",
    "stopping",
    "index",
    "step",
    "let",
    "begin",
    "starting",
    "index",
    "example",
    "let",
    "say",
    "string",
    "variable",
    "called",
    "name",
    "store",
    "value",
    "whatever",
    "full",
    "name",
    "yes",
    "legally",
    "change",
    "name",
    "bro",
    "code",
    "use",
    "name",
    "want",
    "would",
    "like",
    "create",
    "substring",
    "based",
    "sliced",
    "portion",
    "full",
    "name",
    "would",
    "like",
    "create",
    "substring",
    "based",
    "first",
    "part",
    "name",
    "bro",
    "let",
    "begin",
    "creating",
    "substring",
    "maybe",
    "call",
    "first",
    "name",
    "equals",
    "slice",
    "string",
    "type",
    "string",
    "name",
    "variable",
    "contains",
    "string",
    "follow",
    "indexing",
    "operator",
    "like",
    "said",
    "discuss",
    "slice",
    "function",
    "little",
    "bit",
    "later",
    "need",
    "starting",
    "index",
    "stopping",
    "index",
    "begin",
    "starting",
    "index",
    "want",
    "begin",
    "slice",
    "computers",
    "always",
    "start",
    "zero",
    "first",
    "character",
    "string",
    "index",
    "zero",
    "would",
    "like",
    "slice",
    "begin",
    "index",
    "0",
    "list",
    "starting",
    "position",
    "starting",
    "index",
    "let",
    "test",
    "sure",
    "works",
    "print",
    "first",
    "name",
    "let",
    "see",
    "prints",
    "capital",
    "b",
    "following",
    "pattern",
    "next",
    "character",
    "within",
    "string",
    "would",
    "index",
    "one",
    "would",
    "r",
    "next",
    "index",
    "two",
    "would",
    "three",
    "empty",
    "space",
    "right",
    "starting",
    "index",
    "within",
    "string",
    "slicing",
    "would",
    "like",
    "slice",
    "entire",
    "portion",
    "string",
    "one",
    "letter",
    "need",
    "stopping",
    "index",
    "well",
    "fields",
    "separated",
    "colon",
    "let",
    "say",
    "would",
    "like",
    "slice",
    "first",
    "three",
    "characters",
    "string",
    "would",
    "index",
    "zero",
    "one",
    "two",
    "going",
    "work",
    "would",
    "imagine",
    "explain",
    "would",
    "think",
    "indexes",
    "0",
    "2",
    "would",
    "give",
    "us",
    "three",
    "letters",
    "right",
    "gives",
    "us",
    "two",
    "first",
    "index",
    "inclusive",
    "stopping",
    "index",
    "exclusive",
    "want",
    "first",
    "three",
    "characters",
    "first",
    "three",
    "letters",
    "string",
    "would",
    "need",
    "starting",
    "index",
    "zero",
    "stopping",
    "index",
    "three",
    "print",
    "first",
    "name",
    "anything",
    "else",
    "shorthand",
    "way",
    "writing",
    "leave",
    "first",
    "index",
    "blank",
    "start",
    "well",
    "python",
    "going",
    "assume",
    "zero",
    "beginning",
    "string",
    "would",
    "different",
    "previously",
    "colon",
    "three",
    "let",
    "try",
    "create",
    "separate",
    "substring",
    "last",
    "name",
    "last",
    "name",
    "name",
    "need",
    "starting",
    "index",
    "stopping",
    "index",
    "need",
    "starting",
    "index",
    "least",
    "would",
    "zero",
    "one",
    "two",
    "three",
    "four",
    "four",
    "colon",
    "want",
    "stop",
    "zero",
    "one",
    "two",
    "three",
    "four",
    "five",
    "six",
    "seven",
    "remember",
    "exclusive",
    "going",
    "place",
    "eight",
    "would",
    "like",
    "display",
    "last",
    "name",
    "display",
    "code",
    "shortcut",
    "leave",
    "stop",
    "blank",
    "still",
    "colon",
    "shorthand",
    "way",
    "writing",
    "would",
    "like",
    "every",
    "character",
    "starting",
    "index",
    "four",
    "everything",
    "end",
    "would",
    "change",
    "well",
    "write",
    "either",
    "way",
    "okay",
    "still",
    "discuss",
    "step",
    "step",
    "optional",
    "field",
    "set",
    "value",
    "step",
    "much",
    "increasing",
    "index",
    "starting",
    "stopping",
    "entirely",
    "possible",
    "create",
    "substring",
    "count",
    "every",
    "second",
    "character",
    "first",
    "normally",
    "step",
    "one",
    "default",
    "set",
    "two",
    "going",
    "count",
    "every",
    "second",
    "character",
    "let",
    "try",
    "maybe",
    "create",
    "new",
    "variable",
    "called",
    "funky",
    "name",
    "really",
    "know",
    "else",
    "call",
    "example",
    "let",
    "say",
    "funky",
    "name",
    "equals",
    "name",
    "going",
    "count",
    "every",
    "second",
    "character",
    "including",
    "first",
    "indexes",
    "would",
    "zero",
    "colon",
    "eight",
    "example",
    "using",
    "name",
    "probably",
    "going",
    "something",
    "different",
    "default",
    "first",
    "step",
    "one",
    "display",
    "funky",
    "name",
    "currently",
    "display",
    "full",
    "name",
    "set",
    "step",
    "two",
    "display",
    "every",
    "second",
    "character",
    "including",
    "first",
    "funky",
    "name",
    "least",
    "b",
    "c",
    "step",
    "three",
    "print",
    "every",
    "third",
    "character",
    "including",
    "first",
    "b",
    "space",
    "shorthand",
    "way",
    "writing",
    "could",
    "leave",
    "start",
    "stop",
    "empty",
    "important",
    "thing",
    "two",
    "colons",
    "python",
    "going",
    "assume",
    "leave",
    "starting",
    "index",
    "empty",
    "referring",
    "index",
    "0",
    "beginning",
    "second",
    "index",
    "stopping",
    "index",
    "empty",
    "python",
    "assume",
    "end",
    "string",
    "two",
    "colons",
    "step",
    "three",
    "would",
    "different",
    "previously",
    "next",
    "part",
    "going",
    "explain",
    "reverse",
    "string",
    "python",
    "let",
    "create",
    "new",
    "substring",
    "variable",
    "called",
    "reversed",
    "name",
    "equals",
    "name",
    "would",
    "like",
    "use",
    "entire",
    "string",
    "use",
    "two",
    "colons",
    "python",
    "fill",
    "rest",
    "step",
    "going",
    "negative",
    "one",
    "kind",
    "like",
    "counting",
    "backwards",
    "going",
    "create",
    "new",
    "sub",
    "string",
    "based",
    "name",
    "reverse",
    "print",
    "reversed",
    "name",
    "edok",
    "orb",
    "think",
    "pronounce",
    "reverse",
    "string",
    "python",
    "using",
    "slicing",
    "let",
    "move",
    "part",
    "two",
    "video",
    "going",
    "explaining",
    "slice",
    "function",
    "use",
    "slice",
    "function",
    "create",
    "slice",
    "object",
    "actually",
    "reusable",
    "somewhat",
    "convenient",
    "let",
    "take",
    "different",
    "scenario",
    "time",
    "let",
    "say",
    "website",
    "url",
    "website",
    "equals",
    "http",
    "colon2forwardslashes",
    "use",
    "whatever",
    "website",
    "want",
    "would",
    "like",
    "program",
    "remove",
    "create",
    "substring",
    "based",
    "website",
    "name",
    "anything",
    "else",
    "would",
    "like",
    "exclude",
    "http",
    "portion",
    "well",
    "portion",
    "website",
    "url",
    "let",
    "break",
    "step",
    "step",
    "first",
    "step",
    "create",
    "slice",
    "object",
    "name",
    "slice",
    "object",
    "slice",
    "slice",
    "equals",
    "invoke",
    "slice",
    "function",
    "within",
    "parentheses",
    "slice",
    "function",
    "add",
    "three",
    "values",
    "start",
    "stop",
    "step",
    "exactly",
    "indexing",
    "however",
    "slice",
    "function",
    "separate",
    "values",
    "comma",
    "instead",
    "colon",
    "works",
    "way",
    "would",
    "like",
    "substring",
    "begin",
    "name",
    "website",
    "begins",
    "would",
    "like",
    "start",
    "zero",
    "one",
    "two",
    "three",
    "four",
    "five",
    "six",
    "seven",
    "pass",
    "seven",
    "substring",
    "begin",
    "value",
    "within",
    "slice",
    "function",
    "separated",
    "comma",
    "instead",
    "colon",
    "like",
    "indexing",
    "operator",
    "stop",
    "index",
    "going",
    "little",
    "bit",
    "tricky",
    "let",
    "explain",
    "one",
    "issue",
    "going",
    "run",
    "website",
    "names",
    "consistent",
    "length",
    "really",
    "vary",
    "possible",
    "us",
    "use",
    "stopping",
    "index",
    "website",
    "urls",
    "one",
    "way",
    "account",
    "use",
    "called",
    "negative",
    "index",
    "character",
    "within",
    "string",
    "positive",
    "index",
    "well",
    "negative",
    "index",
    "negative",
    "index",
    "works",
    "almost",
    "exactly",
    "way",
    "except",
    "character",
    "right",
    "begins",
    "negative",
    "index",
    "minus",
    "one",
    "character",
    "left",
    "would",
    "negative",
    "two",
    "negative",
    "three",
    "negative",
    "four",
    "counting",
    "backwards",
    "indexing",
    "use",
    "combination",
    "positive",
    "negative",
    "indexing",
    "would",
    "like",
    "substring",
    "end",
    "dot",
    "would",
    "index",
    "minus",
    "one",
    "minus",
    "two",
    "minus",
    "three",
    "minus",
    "four",
    "remember",
    "exclusive",
    "would",
    "like",
    "slice",
    "begin",
    "index",
    "seven",
    "negative",
    "index",
    "four",
    "stopping",
    "position",
    "give",
    "website",
    "name",
    "remove",
    "http",
    "portion",
    "well",
    "dot",
    "com",
    "portion",
    "website",
    "url",
    "slice",
    "object",
    "reuse",
    "apply",
    "slice",
    "object",
    "type",
    "name",
    "string",
    "index",
    "operator",
    "place",
    "slice",
    "right",
    "within",
    "let",
    "print",
    "print",
    "website",
    "apply",
    "slice",
    "give",
    "us",
    "website",
    "name",
    "let",
    "test",
    "maybe",
    "another",
    "website",
    "rename",
    "website",
    "one",
    "let",
    "create",
    "website2",
    "let",
    "try",
    "different",
    "website",
    "name",
    "goodmeasure",
    "let",
    "try",
    "wikipedia",
    "reuse",
    "slice",
    "object",
    "apply",
    "slice",
    "website",
    "two",
    "time",
    "remove",
    "url",
    "portions",
    "http",
    "well",
    "com",
    "right",
    "everybody",
    "slicing",
    "strings",
    "python",
    "either",
    "use",
    "indexing",
    "operator",
    "slice",
    "function",
    "create",
    "slice",
    "object",
    "would",
    "like",
    "copy",
    "code",
    "post",
    "comments",
    "section",
    "yeah",
    "string",
    "slicing",
    "works",
    "python",
    "hey",
    "going",
    "people",
    "bro",
    "hope",
    "well",
    "video",
    "going",
    "explain",
    "statements",
    "else",
    "statements",
    "else",
    "statements",
    "python",
    "sit",
    "back",
    "relax",
    "enjoy",
    "show",
    "right",
    "people",
    "let",
    "talk",
    "statements",
    "statement",
    "block",
    "code",
    "execute",
    "condition",
    "true",
    "basic",
    "form",
    "decision",
    "making",
    "programming",
    "example",
    "let",
    "create",
    "prompt",
    "ask",
    "user",
    "age",
    "depending",
    "age",
    "print",
    "response",
    "let",
    "say",
    "age",
    "equals",
    "input",
    "add",
    "prompt",
    "old",
    "return",
    "string",
    "probably",
    "cast",
    "integer",
    "data",
    "type",
    "variable",
    "called",
    "age",
    "accept",
    "user",
    "input",
    "let",
    "check",
    "somebody",
    "age",
    "variety",
    "statements",
    "let",
    "check",
    "see",
    "somebody",
    "age",
    "greater",
    "equal",
    "18",
    "create",
    "statement",
    "type",
    "sort",
    "condition",
    "age",
    "greater",
    "equal",
    "18",
    "finish",
    "statement",
    "add",
    "colon",
    "end",
    "pay",
    "attention",
    "move",
    "next",
    "line",
    "notice",
    "cursor",
    "indented",
    "indented",
    "code",
    "underneath",
    "statement",
    "block",
    "code",
    "statement",
    "condition",
    "true",
    "execute",
    "block",
    "code",
    "false",
    "skip",
    "somebody",
    "age",
    "greater",
    "equal",
    "18",
    "let",
    "print",
    "adult",
    "let",
    "try",
    "program",
    "old",
    "let",
    "say",
    "21",
    "condition",
    "get",
    "statement",
    "going",
    "check",
    "see",
    "condition",
    "true",
    "true",
    "going",
    "execute",
    "block",
    "code",
    "skip",
    "old",
    "let",
    "say",
    "21",
    "going",
    "hit",
    "enter",
    "statement",
    "true",
    "execute",
    "block",
    "code",
    "prints",
    "adult",
    "condition",
    "false",
    "let",
    "say",
    "well",
    "going",
    "skip",
    "block",
    "code",
    "continue",
    "rest",
    "program",
    "would",
    "like",
    "program",
    "take",
    "course",
    "action",
    "condition",
    "false",
    "add",
    "else",
    "statement",
    "statement",
    "add",
    "else",
    "make",
    "sure",
    "get",
    "indentation",
    "right",
    "want",
    "within",
    "block",
    "code",
    "statement",
    "condition",
    "false",
    "take",
    "course",
    "action",
    "somebody",
    "age",
    "less",
    "18",
    "let",
    "print",
    "child",
    "let",
    "try",
    "going",
    "enter",
    "12",
    "years",
    "old",
    "really",
    "let",
    "pretend",
    "print",
    "child",
    "condition",
    "false",
    "perform",
    "block",
    "code",
    "else",
    "statement",
    "statements",
    "check",
    "one",
    "condition",
    "reaching",
    "else",
    "statement",
    "using",
    "else",
    "statement",
    "add",
    "statement",
    "shortened",
    "e",
    "l",
    "f",
    "else",
    "let",
    "check",
    "see",
    "somebody",
    "age",
    "less",
    "zero",
    "reason",
    "let",
    "print",
    "born",
    "yet",
    "statements",
    "start",
    "top",
    "first",
    "check",
    "statement",
    "false",
    "move",
    "next",
    "statement",
    "check",
    "check",
    "else",
    "statement",
    "also",
    "false",
    "resort",
    "else",
    "statement",
    "else",
    "statement",
    "sort",
    "like",
    "last",
    "resort",
    "conditions",
    "evaluate",
    "false",
    "execute",
    "else",
    "statement",
    "let",
    "try",
    "old",
    "let",
    "say",
    "negative",
    "1",
    "years",
    "old",
    "born",
    "yet",
    "statements",
    "always",
    "begin",
    "statement",
    "check",
    "condition",
    "condition",
    "evaluates",
    "false",
    "skip",
    "block",
    "code",
    "move",
    "else",
    "statement",
    "one",
    "optional",
    "condition",
    "also",
    "false",
    "use",
    "else",
    "statement",
    "last",
    "resort",
    "one",
    "else",
    "statement",
    "skip",
    "continue",
    "rest",
    "program",
    "add",
    "one",
    "else",
    "statement",
    "let",
    "check",
    "something",
    "else",
    "let",
    "check",
    "see",
    "else",
    "age",
    "equal",
    "100",
    "need",
    "check",
    "see",
    "value",
    "equal",
    "particular",
    "value",
    "make",
    "sure",
    "use",
    "double",
    "equal",
    "signs",
    "comparison",
    "operator",
    "equality",
    "use",
    "one",
    "equal",
    "sign",
    "assignment",
    "operator",
    "python",
    "thinks",
    "attempting",
    "set",
    "age",
    "equal",
    "100",
    "want",
    "check",
    "see",
    "age",
    "equal",
    "100",
    "use",
    "double",
    "equals",
    "let",
    "check",
    "see",
    "somebody",
    "age",
    "equal",
    "100",
    "let",
    "print",
    "century",
    "old",
    "pay",
    "attention",
    "run",
    "program",
    "old",
    "let",
    "say",
    "printing",
    "adult",
    "first",
    "check",
    "statement",
    "well",
    "100",
    "years",
    "old",
    "100",
    "greater",
    "equal",
    "print",
    "block",
    "code",
    "execute",
    "block",
    "code",
    "skip",
    "everything",
    "else",
    "even",
    "though",
    "age",
    "equal",
    "100",
    "within",
    "else",
    "statement",
    "order",
    "statements",
    "matter",
    "let",
    "change",
    "around",
    "let",
    "add",
    "beginning",
    "statement",
    "set",
    "age",
    "greater",
    "equal",
    "18",
    "else",
    "statement",
    "first",
    "going",
    "check",
    "see",
    "age",
    "equal",
    "100",
    "check",
    "see",
    "age",
    "greater",
    "equal",
    "18",
    "follow",
    "order",
    "let",
    "try",
    "old",
    "100",
    "years",
    "old",
    "century",
    "old",
    "first",
    "check",
    "statement",
    "condition",
    "true",
    "execute",
    "block",
    "code",
    "false",
    "go",
    "order",
    "till",
    "reach",
    "else",
    "statement",
    "well",
    "everybody",
    "basics",
    "statements",
    "statements",
    "else",
    "statements",
    "else",
    "statements",
    "would",
    "like",
    "copy",
    "code",
    "post",
    "comments",
    "yeah",
    "statements",
    "work",
    "python",
    "hey",
    "going",
    "everybody",
    "bro",
    "hope",
    "well",
    "video",
    "going",
    "explain",
    "logical",
    "operators",
    "python",
    "sit",
    "back",
    "relax",
    "enjoy",
    "show",
    "right",
    "everybody",
    "let",
    "talk",
    "logical",
    "operators",
    "used",
    "check",
    "two",
    "conditional",
    "statements",
    "true",
    "discussing",
    "well",
    "logical",
    "operators",
    "also",
    "third",
    "one",
    "called",
    "works",
    "little",
    "bit",
    "different",
    "explain",
    "let",
    "create",
    "program",
    "demonstrate",
    "let",
    "create",
    "program",
    "ask",
    "somebody",
    "temperature",
    "outside",
    "depending",
    "temperature",
    "falls",
    "within",
    "certain",
    "range",
    "print",
    "message",
    "need",
    "use",
    "well",
    "logical",
    "operators",
    "prompt",
    "temp",
    "temperature",
    "equals",
    "input",
    "temperature",
    "outside",
    "going",
    "cast",
    "integer",
    "data",
    "type",
    "want",
    "check",
    "see",
    "temperature",
    "within",
    "certain",
    "range",
    "use",
    "logical",
    "operator",
    "check",
    "two",
    "conditional",
    "statements",
    "might",
    "let",
    "check",
    "temp",
    "greater",
    "equal",
    "zero",
    "zero",
    "degrees",
    "celsius",
    "check",
    "another",
    "condition",
    "temp",
    "less",
    "equal",
    "30",
    "degrees",
    "celsius",
    "need",
    "add",
    "colon",
    "end",
    "finish",
    "statement",
    "let",
    "fix",
    "spacing",
    "okay",
    "logical",
    "operator",
    "order",
    "entire",
    "condition",
    "true",
    "conditions",
    "must",
    "true",
    "needs",
    "true",
    "needs",
    "true",
    "temperature",
    "equal",
    "0",
    "well",
    "less",
    "equal",
    "30",
    "means",
    "temperature",
    "falls",
    "within",
    "certain",
    "range",
    "let",
    "print",
    "message",
    "temperature",
    "good",
    "today",
    "print",
    "go",
    "outside",
    "right",
    "let",
    "try",
    "temperature",
    "outside",
    "let",
    "say",
    "20",
    "degrees",
    "celsius",
    "well",
    "temperature",
    "good",
    "today",
    "go",
    "outside",
    "condition",
    "true",
    "20",
    "greater",
    "equal",
    "zero",
    "temperature",
    "less",
    "equal",
    "let",
    "try",
    "different",
    "temperature",
    "like",
    "negative",
    "20",
    "degrees",
    "celsius",
    "really",
    "freaking",
    "cold",
    "outside",
    "right",
    "see",
    "nothing",
    "happened",
    "first",
    "condition",
    "false",
    "temperature",
    "greater",
    "equal",
    "zero",
    "temperature",
    "less",
    "equal",
    "30",
    "second",
    "condition",
    "true",
    "first",
    "condition",
    "false",
    "order",
    "entire",
    "statement",
    "true",
    "since",
    "using",
    "logical",
    "operator",
    "conditions",
    "must",
    "true",
    "order",
    "statement",
    "true",
    "let",
    "discuss",
    "logical",
    "operator",
    "check",
    "see",
    "temperature",
    "certain",
    "range",
    "let",
    "write",
    "else",
    "temp",
    "less",
    "zero",
    "temp",
    "greater",
    "means",
    "going",
    "either",
    "cold",
    "outside",
    "hot",
    "outside",
    "let",
    "print",
    "message",
    "temperature",
    "bad",
    "today",
    "print",
    "stay",
    "inside",
    "right",
    "let",
    "try",
    "temperature",
    "outside",
    "negative",
    "20",
    "degrees",
    "outside",
    "temperature",
    "bad",
    "today",
    "stay",
    "inside",
    "orological",
    "operator",
    "long",
    "one",
    "conditions",
    "true",
    "entire",
    "statement",
    "true",
    "matter",
    "one",
    "false",
    "long",
    "one",
    "true",
    "entire",
    "statement",
    "true",
    "last",
    "least",
    "logical",
    "operator",
    "works",
    "little",
    "bit",
    "different",
    "well",
    "logical",
    "operator",
    "check",
    "one",
    "conditional",
    "statements",
    "instead",
    "two",
    "conditional",
    "statements",
    "logical",
    "operator",
    "take",
    "conditional",
    "statement",
    "true",
    "going",
    "flip",
    "false",
    "normally",
    "false",
    "going",
    "flip",
    "true",
    "example",
    "another",
    "way",
    "could",
    "write",
    "although",
    "little",
    "complex",
    "statement",
    "true",
    "flip",
    "false",
    "using",
    "logical",
    "operator",
    "normally",
    "false",
    "change",
    "true",
    "surround",
    "one",
    "conditional",
    "statements",
    "set",
    "parentheses",
    "precede",
    "everything",
    "within",
    "parentheses",
    "logical",
    "operator",
    "statement",
    "normally",
    "true",
    "going",
    "become",
    "false",
    "using",
    "logical",
    "operator",
    "normally",
    "false",
    "going",
    "true",
    "let",
    "else",
    "statement",
    "surround",
    "one",
    "conditional",
    "statements",
    "logical",
    "operator",
    "roles",
    "going",
    "kind",
    "reversed",
    "let",
    "try",
    "temperature",
    "outside",
    "negative",
    "20",
    "degrees",
    "outside",
    "temperature",
    "good",
    "today",
    "go",
    "outside",
    "probably",
    "kind",
    "reverse",
    "rolls",
    "going",
    "swap",
    "everything",
    "within",
    "statements",
    "work",
    "wrote",
    "little",
    "bit",
    "different",
    "temperature",
    "outside",
    "15",
    "degrees",
    "outside",
    "15",
    "degrees",
    "celsius",
    "temperature",
    "good",
    "today",
    "go",
    "outside",
    "logical",
    "operator",
    "surround",
    "one",
    "conditional",
    "statements",
    "logical",
    "operator",
    "flip",
    "false",
    "true",
    "true",
    "false",
    "well",
    "everybody",
    "basics",
    "logical",
    "operators",
    "python",
    "would",
    "like",
    "copy",
    "code",
    "post",
    "comments",
    "yeah",
    "basics",
    "logical",
    "operators",
    "python",
    "hey",
    "going",
    "everybody",
    "bro",
    "hope",
    "well",
    "video",
    "going",
    "explain",
    "loops",
    "python",
    "sit",
    "back",
    "relax",
    "enjoy",
    "show",
    "loops",
    "loop",
    "statement",
    "execute",
    "block",
    "code",
    "long",
    "condition",
    "remains",
    "true",
    "later",
    "video",
    "example",
    "going",
    "create",
    "program",
    "prompt",
    "user",
    "enter",
    "name",
    "attempt",
    "skip",
    "prompt",
    "continually",
    "ask",
    "user",
    "enter",
    "name",
    "ca",
    "continue",
    "rest",
    "program",
    "key",
    "thing",
    "keep",
    "mind",
    "loops",
    "want",
    "way",
    "eventually",
    "escape",
    "loop",
    "way",
    "escape",
    "loop",
    "referred",
    "infinite",
    "loop",
    "let",
    "create",
    "example",
    "infinite",
    "loop",
    "fun",
    "create",
    "loop",
    "type",
    "sort",
    "condition",
    "condition",
    "let",
    "say",
    "one",
    "equal",
    "one",
    "always",
    "true",
    "want",
    "execute",
    "block",
    "code",
    "let",
    "print",
    "something",
    "print",
    "help",
    "stuck",
    "loop",
    "right",
    "let",
    "try",
    "one",
    "equal",
    "one",
    "print",
    "statement",
    "continue",
    "within",
    "loop",
    "way",
    "escape",
    "loop",
    "let",
    "use",
    "concept",
    "write",
    "program",
    "prompt",
    "user",
    "type",
    "name",
    "type",
    "anything",
    "continue",
    "prompt",
    "type",
    "least",
    "something",
    "let",
    "say",
    "name",
    "equal",
    "keep",
    "blank",
    "set",
    "set",
    "quotes",
    "let",
    "write",
    "loop",
    "name",
    "let",
    "check",
    "length",
    "name",
    "length",
    "name",
    "equal",
    "zero",
    "ask",
    "user",
    "type",
    "name",
    "name",
    "equals",
    "input",
    "enter",
    "name",
    "escape",
    "loop",
    "let",
    "print",
    "something",
    "print",
    "hello",
    "plus",
    "name",
    "whoops",
    "hello",
    "plus",
    "name",
    "alright",
    "run",
    "giving",
    "user",
    "way",
    "escape",
    "loop",
    "type",
    "something",
    "name",
    "long",
    "length",
    "name",
    "equal",
    "zero",
    "keep",
    "printing",
    "prompt",
    "enter",
    "name",
    "going",
    "hit",
    "enter",
    "bunch",
    "times",
    "enter",
    "name",
    "enter",
    "name",
    "enter",
    "name",
    "stuck",
    "within",
    "loop",
    "enter",
    "something",
    "name",
    "time",
    "let",
    "type",
    "name",
    "hit",
    "enter",
    "therefore",
    "condition",
    "false",
    "length",
    "name",
    "one",
    "two",
    "three",
    "three",
    "equal",
    "zero",
    "therefore",
    "statement",
    "loop",
    "false",
    "continue",
    "rest",
    "program",
    "variations",
    "could",
    "write",
    "program",
    "let",
    "write",
    "different",
    "way",
    "could",
    "say",
    "name",
    "equal",
    "none",
    "name",
    "pretty",
    "much",
    "thing",
    "another",
    "way",
    "writing",
    "well",
    "everybody",
    "basics",
    "loops",
    "loop",
    "statement",
    "execute",
    "block",
    "code",
    "long",
    "condition",
    "remains",
    "true",
    "example",
    "asked",
    "user",
    "type",
    "name",
    "leave",
    "empty",
    "blank",
    "would",
    "keep",
    "asking",
    "user",
    "type",
    "name",
    "would",
    "like",
    "copy",
    "code",
    "post",
    "comments",
    "section",
    "yeah",
    "basics",
    "loops",
    "python",
    "hey",
    "going",
    "everybody",
    "bro",
    "hope",
    "well",
    "video",
    "going",
    "explain",
    "loops",
    "python",
    "end",
    "video",
    "going",
    "create",
    "countdown",
    "timer",
    "sit",
    "back",
    "relax",
    "enjoy",
    "show",
    "right",
    "guys",
    "gals",
    "let",
    "talk",
    "loops",
    "loop",
    "statement",
    "execute",
    "block",
    "code",
    "limited",
    "amount",
    "times",
    "similar",
    "different",
    "loop",
    "loop",
    "could",
    "iterate",
    "unlimited",
    "infinite",
    "amount",
    "times",
    "depending",
    "condition",
    "loop",
    "iterate",
    "limited",
    "amount",
    "times",
    "start",
    "executing",
    "block",
    "code",
    "already",
    "know",
    "many",
    "times",
    "going",
    "repeat",
    "block",
    "code",
    "example",
    "let",
    "create",
    "loop",
    "simply",
    "count",
    "10",
    "create",
    "sophisticated",
    "examples",
    "create",
    "loop",
    "count",
    "10",
    "type",
    "four",
    "need",
    "sort",
    "counter",
    "people",
    "usually",
    "either",
    "write",
    "index",
    "shorten",
    "index",
    "four",
    "set",
    "range",
    "range",
    "ten",
    "execute",
    "loop",
    "ten",
    "times",
    "finish",
    "loop",
    "add",
    "colon",
    "end",
    "next",
    "line",
    "lines",
    "indented",
    "block",
    "code",
    "loop",
    "want",
    "iteration",
    "let",
    "print",
    "let",
    "take",
    "look",
    "see",
    "would",
    "happen",
    "executed",
    "loop",
    "ten",
    "times",
    "except",
    "computers",
    "computers",
    "always",
    "start",
    "zero",
    "said",
    "four",
    "range",
    "ten",
    "counting",
    "numbers",
    "zero",
    "nine",
    "number",
    "exclusive",
    "two",
    "ways",
    "change",
    "could",
    "say",
    "range",
    "ten",
    "plus",
    "one",
    "would",
    "say",
    "print",
    "plus",
    "one",
    "give",
    "us",
    "numbers",
    "one",
    "ten",
    "loop",
    "execute",
    "limited",
    "amount",
    "times",
    "time",
    "let",
    "count",
    "range",
    "two",
    "numbers",
    "necessarily",
    "0",
    "10",
    "something",
    "else",
    "let",
    "say",
    "4i",
    "range",
    "maybe",
    "numbers",
    "50",
    "100",
    "within",
    "range",
    "function",
    "pass",
    "two",
    "numbers",
    "first",
    "number",
    "starting",
    "point",
    "second",
    "number",
    "ending",
    "point",
    "first",
    "number",
    "inclusive",
    "second",
    "number",
    "exclusive",
    "let",
    "print",
    "print",
    "whatever",
    "count",
    "50",
    "99",
    "actually",
    "wanted",
    "include",
    "last",
    "number",
    "since",
    "exclusive",
    "could",
    "add",
    "one",
    "end",
    "would",
    "give",
    "us",
    "50",
    "100",
    "except",
    "iterate",
    "51",
    "times",
    "since",
    "counting",
    "pay",
    "attention",
    "range",
    "numbers",
    "counting",
    "one",
    "thing",
    "range",
    "function",
    "add",
    "third",
    "argument",
    "function",
    "step",
    "much",
    "want",
    "count",
    "time",
    "let",
    "count",
    "two",
    "add",
    "comma",
    "two",
    "passing",
    "third",
    "argument",
    "time",
    "program",
    "count",
    "two",
    "starting",
    "fifty",
    "go",
    "way",
    "one",
    "hundred",
    "benefit",
    "loops",
    "iterate",
    "anything",
    "considered",
    "iterable",
    "could",
    "include",
    "string",
    "letters",
    "string",
    "sort",
    "collection",
    "time",
    "let",
    "create",
    "loop",
    "iterate",
    "letter",
    "maybe",
    "name",
    "let",
    "type",
    "name",
    "type",
    "whatever",
    "first",
    "name",
    "last",
    "name",
    "print",
    "whatever",
    "whatever",
    "name",
    "print",
    "letter",
    "string",
    "run",
    "letter",
    "within",
    "name",
    "printed",
    "new",
    "line",
    "right",
    "people",
    "last",
    "trick",
    "going",
    "create",
    "program",
    "simulate",
    "countdown",
    "starting",
    "10",
    "count",
    "zero",
    "maybe",
    "reach",
    "zero",
    "print",
    "something",
    "happy",
    "new",
    "year",
    "create",
    "program",
    "need",
    "import",
    "top",
    "going",
    "import",
    "time",
    "module",
    "waiting",
    "one",
    "second",
    "iteration",
    "loop",
    "create",
    "program",
    "let",
    "say",
    "four",
    "could",
    "say",
    "really",
    "write",
    "anything",
    "demonstrate",
    "let",
    "say",
    "four",
    "seconds",
    "four",
    "seconds",
    "range",
    "starting",
    "point",
    "going",
    "ten",
    "ending",
    "point",
    "zero",
    "add",
    "step",
    "want",
    "count",
    "let",
    "set",
    "negative",
    "one",
    "countdown",
    "starting",
    "ten",
    "ending",
    "zero",
    "iteration",
    "let",
    "print",
    "whatever",
    "case",
    "seconds",
    "sleep",
    "thread",
    "sleep",
    "number",
    "seconds",
    "print",
    "seconds",
    "type",
    "time",
    "dot",
    "sleep",
    "pass",
    "long",
    "want",
    "sleep",
    "would",
    "like",
    "sleep",
    "one",
    "second",
    "end",
    "let",
    "print",
    "happy",
    "new",
    "year",
    "make",
    "sure",
    "within",
    "loop",
    "print",
    "happy",
    "new",
    "year",
    "well",
    "let",
    "test",
    "begin",
    "10",
    "count",
    "zero",
    "see",
    "thread",
    "running",
    "program",
    "sleeping",
    "one",
    "second",
    "iteration",
    "loop",
    "reach",
    "zero",
    "display",
    "happy",
    "new",
    "year",
    "well",
    "everybody",
    "basics",
    "loops",
    "loop",
    "statement",
    "execute",
    "block",
    "code",
    "limited",
    "amount",
    "times",
    "different",
    "loop",
    "loop",
    "could",
    "execute",
    "infinite",
    "unlimited",
    "amount",
    "times",
    "loops",
    "execute",
    "limited",
    "amounts",
    "times",
    "enter",
    "loop",
    "already",
    "know",
    "many",
    "times",
    "going",
    "iterate",
    "loop",
    "like",
    "copy",
    "code",
    "post",
    "comments",
    "yeah",
    "loops",
    "work",
    "python",
    "hey",
    "going",
    "everybody",
    "bro",
    "hope",
    "well",
    "video",
    "going",
    "explain",
    "nested",
    "loops",
    "python",
    "sit",
    "back",
    "relax",
    "enjoy",
    "show",
    "hey",
    "people",
    "let",
    "talk",
    "nested",
    "loops",
    "nested",
    "loop",
    "general",
    "concept",
    "one",
    "loop",
    "inside",
    "another",
    "loop",
    "really",
    "matter",
    "loop",
    "loop",
    "inner",
    "loop",
    "finish",
    "iterations",
    "finish",
    "one",
    "iteration",
    "outer",
    "loop",
    "best",
    "demonstrate",
    "going",
    "create",
    "program",
    "draw",
    "rectangle",
    "made",
    "certain",
    "symbol",
    "choose",
    "need",
    "set",
    "width",
    "height",
    "best",
    "need",
    "use",
    "nested",
    "loop",
    "create",
    "prompts",
    "one",
    "rows",
    "columns",
    "symbol",
    "want",
    "make",
    "rectangle",
    "let",
    "begin",
    "rows",
    "rows",
    "equals",
    "input",
    "many",
    "rows",
    "need",
    "cast",
    "integer",
    "data",
    "type",
    "working",
    "numbers",
    "okay",
    "let",
    "thing",
    "columns",
    "replace",
    "rows",
    "columns",
    "next",
    "line",
    "input",
    "many",
    "columns",
    "create",
    "symbol",
    "variable",
    "symbol",
    "equals",
    "input",
    "cast",
    "enter",
    "symbol",
    "use",
    "time",
    "nested",
    "loops",
    "going",
    "create",
    "outer",
    "loop",
    "well",
    "inner",
    "loop",
    "outer",
    "loop",
    "charge",
    "rows",
    "inner",
    "loop",
    "charge",
    "columns",
    "let",
    "begin",
    "creating",
    "outer",
    "loop",
    "write",
    "4",
    "range",
    "rows",
    "would",
    "like",
    "outer",
    "loop",
    "iterate",
    "many",
    "times",
    "rows",
    "going",
    "create",
    "inner",
    "loop",
    "iterate",
    "many",
    "times",
    "columns",
    "within",
    "block",
    "code",
    "outer",
    "loop",
    "going",
    "create",
    "another",
    "loop",
    "time",
    "four",
    "common",
    "convention",
    "inner",
    "loops",
    "write",
    "j",
    "index",
    "j",
    "comes",
    "guess",
    "j",
    "range",
    "columns",
    "inner",
    "loop",
    "iterate",
    "many",
    "times",
    "columns",
    "within",
    "inner",
    "loop",
    "print",
    "symbol",
    "except",
    "one",
    "issue",
    "using",
    "print",
    "statement",
    "use",
    "print",
    "statement",
    "enter",
    "new",
    "line",
    "character",
    "move",
    "next",
    "line",
    "actually",
    "prevent",
    "adding",
    "comma",
    "equals",
    "quotes",
    "using",
    "print",
    "statement",
    "prevent",
    "cursor",
    "moving",
    "next",
    "line",
    "pay",
    "attention",
    "indentation",
    "kind",
    "two",
    "levels",
    "indentation",
    "currently",
    "within",
    "inner",
    "loop",
    "pretty",
    "much",
    "inner",
    "loop",
    "going",
    "print",
    "new",
    "line",
    "exit",
    "inner",
    "loop",
    "see",
    "indentation",
    "line",
    "right",
    "within",
    "outer",
    "loop",
    "pretty",
    "much",
    "let",
    "try",
    "program",
    "many",
    "rows",
    "let",
    "say",
    "five",
    "rows",
    "many",
    "columns",
    "perhaps",
    "six",
    "symbol",
    "want",
    "use",
    "let",
    "say",
    "dollar",
    "sign",
    "let",
    "try",
    "go",
    "rectangle",
    "let",
    "see",
    "six",
    "columns",
    "one",
    "two",
    "three",
    "four",
    "five",
    "six",
    "five",
    "rows",
    "one",
    "two",
    "three",
    "four",
    "five",
    "summary",
    "nested",
    "loop",
    "really",
    "concept",
    "one",
    "loop",
    "inside",
    "another",
    "loop",
    "matter",
    "loop",
    "loop",
    "really",
    "situational",
    "inner",
    "loop",
    "finish",
    "iterations",
    "finishing",
    "one",
    "iteration",
    "outer",
    "loop",
    "demonstrate",
    "outer",
    "loop",
    "charge",
    "rows",
    "inner",
    "loop",
    "charge",
    "columns",
    "rectangle",
    "program",
    "would",
    "like",
    "copy",
    "program",
    "post",
    "comment",
    "section",
    "yeah",
    "basics",
    "nested",
    "loops",
    "python",
    "hey",
    "going",
    "everybody",
    "bro",
    "hope",
    "well",
    "video",
    "going",
    "explain",
    "loop",
    "control",
    "statements",
    "python",
    "sit",
    "back",
    "relax",
    "enjoy",
    "show",
    "right",
    "ladies",
    "gentlemen",
    "let",
    "talk",
    "loop",
    "control",
    "statements",
    "used",
    "change",
    "loop",
    "execution",
    "normal",
    "sequence",
    "three",
    "going",
    "discuss",
    "break",
    "continue",
    "pass",
    "let",
    "begin",
    "break",
    "break",
    "used",
    "terminate",
    "loop",
    "entirely",
    "good",
    "example",
    "break",
    "would",
    "useful",
    "let",
    "say",
    "true",
    "going",
    "continually",
    "ask",
    "somebody",
    "name",
    "type",
    "anything",
    "continue",
    "loop",
    "let",
    "say",
    "name",
    "equals",
    "input",
    "enter",
    "name",
    "name",
    "equal",
    "set",
    "quotes",
    "means",
    "type",
    "anything",
    "break",
    "break",
    "loop",
    "let",
    "test",
    "enter",
    "name",
    "nah",
    "think",
    "lazy",
    "enter",
    "name",
    "right",
    "see",
    "going",
    "escape",
    "loop",
    "going",
    "type",
    "name",
    "give",
    "hit",
    "enter",
    "therefore",
    "break",
    "exit",
    "loop",
    "break",
    "used",
    "terminate",
    "loop",
    "entirely",
    "encountered",
    "next",
    "continue",
    "continue",
    "skips",
    "next",
    "iteration",
    "loop",
    "let",
    "say",
    "phone",
    "number",
    "phone",
    "underscore",
    "number",
    "set",
    "sequel",
    "let",
    "say",
    "random",
    "phone",
    "number",
    "including",
    "dashes",
    "would",
    "like",
    "display",
    "number",
    "within",
    "console",
    "window",
    "without",
    "dashes",
    "using",
    "continue",
    "control",
    "statement",
    "phone",
    "number",
    "character",
    "within",
    "string",
    "phone",
    "number",
    "check",
    "see",
    "encounter",
    "dash",
    "character",
    "index",
    "equal",
    "dash",
    "want",
    "continue",
    "skip",
    "iteration",
    "loop",
    "continue",
    "would",
    "like",
    "print",
    "whatever",
    "indexes",
    "whatever",
    "character",
    "working",
    "run",
    "going",
    "print",
    "digit",
    "new",
    "line",
    "print",
    "statements",
    "add",
    "new",
    "line",
    "character",
    "end",
    "string",
    "actually",
    "change",
    "adding",
    "end",
    "comma",
    "end",
    "equals",
    "set",
    "quotes",
    "print",
    "phone",
    "number",
    "without",
    "dashes",
    "one",
    "two",
    "three",
    "four",
    "five",
    "six",
    "seven",
    "eight",
    "nine",
    "zero",
    "use",
    "continue",
    "control",
    "statement",
    "skips",
    "next",
    "iteration",
    "loop",
    "last",
    "least",
    "pass",
    "pass",
    "nothing",
    "acts",
    "placeholder",
    "let",
    "say",
    "would",
    "like",
    "print",
    "numbers",
    "1",
    "20",
    "using",
    "loop",
    "range",
    "1",
    "21",
    "remember",
    "second",
    "digit",
    "exclusive",
    "iterate",
    "digits",
    "1",
    "let",
    "pretend",
    "highly",
    "superstitious",
    "want",
    "print",
    "number",
    "13",
    "13",
    "considered",
    "unlucky",
    "number",
    "equal",
    "13",
    "pass",
    "pass",
    "acts",
    "placeholder",
    "wo",
    "anything",
    "else",
    "print",
    "one",
    "go",
    "print",
    "numbers",
    "1",
    "20",
    "skip",
    "13",
    "used",
    "past",
    "control",
    "statement",
    "nothing",
    "acts",
    "placeholder",
    "everybody",
    "loop",
    "control",
    "statements",
    "change",
    "loop",
    "execution",
    "normal",
    "sequence",
    "break",
    "continue",
    "pass",
    "would",
    "like",
    "copy",
    "code",
    "post",
    "comments",
    "section",
    "yeah",
    "loop",
    "control",
    "statements",
    "python",
    "going",
    "everybody",
    "bro",
    "hope",
    "well",
    "video",
    "going",
    "explain",
    "lists",
    "python",
    "sit",
    "back",
    "relax",
    "enjoy",
    "show",
    "right",
    "ladies",
    "gentlemen",
    "let",
    "get",
    "business",
    "got",
    "explain",
    "lists",
    "list",
    "used",
    "store",
    "multiple",
    "items",
    "within",
    "single",
    "variable",
    "example",
    "let",
    "say",
    "variable",
    "called",
    "food",
    "store",
    "string",
    "value",
    "pizza",
    "like",
    "pizza",
    "could",
    "store",
    "multiple",
    "items",
    "within",
    "variable",
    "turning",
    "variable",
    "list",
    "order",
    "going",
    "surround",
    "values",
    "would",
    "like",
    "add",
    "list",
    "set",
    "square",
    "brackets",
    "boom",
    "list",
    "called",
    "food",
    "longer",
    "variable",
    "could",
    "add",
    "multiple",
    "items",
    "list",
    "food",
    "let",
    "add",
    "food",
    "items",
    "might",
    "like",
    "let",
    "see",
    "also",
    "like",
    "maybe",
    "hamburgers",
    "hot",
    "dog",
    "maybe",
    "spaghetti",
    "think",
    "smelled",
    "spaghetti",
    "right",
    "okay",
    "list",
    "called",
    "food",
    "happens",
    "attempt",
    "print",
    "list",
    "food",
    "print",
    "food",
    "print",
    "elements",
    "found",
    "list",
    "item",
    "list",
    "referred",
    "element",
    "need",
    "access",
    "certain",
    "element",
    "list",
    "list",
    "index",
    "next",
    "list",
    "add",
    "set",
    "square",
    "brackets",
    "need",
    "list",
    "numbered",
    "index",
    "element",
    "trying",
    "access",
    "computers",
    "always",
    "start",
    "zero",
    "first",
    "element",
    "list",
    "would",
    "element",
    "number",
    "zero",
    "next",
    "one",
    "would",
    "one",
    "two",
    "three",
    "need",
    "access",
    "element",
    "zero",
    "first",
    "position",
    "would",
    "say",
    "food",
    "square",
    "brackets",
    "within",
    "list",
    "index",
    "first",
    "position",
    "zero",
    "print",
    "first",
    "element",
    "list",
    "pizza",
    "let",
    "attempt",
    "access",
    "elements",
    "element",
    "index",
    "one",
    "would",
    "guessed",
    "hamburger",
    "two",
    "would",
    "hot",
    "dog",
    "three",
    "would",
    "spaghetti",
    "happens",
    "attempt",
    "access",
    "element",
    "index",
    "four",
    "well",
    "currently",
    "range",
    "assign",
    "value",
    "experiencing",
    "error",
    "index",
    "range",
    "error",
    "add",
    "another",
    "element",
    "let",
    "say",
    "pudding",
    "alright",
    "well",
    "element",
    "index",
    "4",
    "would",
    "putting",
    "one",
    "important",
    "concept",
    "lists",
    "always",
    "update",
    "change",
    "elements",
    "found",
    "within",
    "list",
    "later",
    "program",
    "declare",
    "one",
    "let",
    "say",
    "would",
    "like",
    "immediately",
    "change",
    "one",
    "elements",
    "let",
    "say",
    "food",
    "index",
    "zero",
    "want",
    "replace",
    "maybe",
    "sushi",
    "sushi",
    "great",
    "print",
    "element",
    "index",
    "0",
    "would",
    "longer",
    "pizza",
    "updated",
    "element",
    "0",
    "sushi",
    "prints",
    "sushi",
    "need",
    "display",
    "elements",
    "found",
    "within",
    "list",
    "easily",
    "standard",
    "loop",
    "say",
    "x",
    "name",
    "list",
    "food",
    "print",
    "x",
    "let",
    "turn",
    "line",
    "comment",
    "right",
    "loop",
    "print",
    "elements",
    "found",
    "within",
    "list",
    "food",
    "results",
    "sushi",
    "hamburger",
    "hot",
    "dog",
    "spaghetti",
    "pudding",
    "right",
    "people",
    "next",
    "portion",
    "going",
    "demonstrate",
    "useful",
    "functions",
    "lists",
    "access",
    "functions",
    "type",
    "name",
    "list",
    "dot",
    "bunch",
    "choose",
    "let",
    "begin",
    "event",
    "add",
    "element",
    "list",
    "let",
    "say",
    "end",
    "would",
    "like",
    "add",
    "ice",
    "cream",
    "display",
    "list",
    "ice",
    "cream",
    "end",
    "appended",
    "value",
    "list",
    "food",
    "let",
    "go",
    "others",
    "also",
    "remove",
    "value",
    "food",
    "dot",
    "remove",
    "let",
    "say",
    "would",
    "like",
    "remove",
    "hotdog",
    "going",
    "type",
    "within",
    "function",
    "remove",
    "hotdog",
    "longer",
    "next",
    "pop",
    "pop",
    "remove",
    "last",
    "element",
    "remove",
    "pudding",
    "insert",
    "value",
    "given",
    "index",
    "food",
    "dot",
    "insert",
    "need",
    "list",
    "index",
    "let",
    "say",
    "zero",
    "would",
    "first",
    "position",
    "technically",
    "pizza",
    "currently",
    "would",
    "like",
    "add",
    "cake",
    "index",
    "0",
    "cake",
    "next",
    "sort",
    "food",
    "dot",
    "sort",
    "sort",
    "list",
    "alphabetically",
    "first",
    "position",
    "hamburger",
    "hot",
    "dog",
    "pudding",
    "spaghetti",
    "sushi",
    "also",
    "clear",
    "list",
    "food",
    "dot",
    "clear",
    "remove",
    "elements",
    "list",
    "print",
    "anything",
    "cleared",
    "list",
    "well",
    "everyone",
    "conclusion",
    "list",
    "really",
    "variable",
    "store",
    "multiple",
    "values",
    "think",
    "way",
    "would",
    "like",
    "copy",
    "code",
    "written",
    "today",
    "post",
    "comments",
    "yeah",
    "lists",
    "work",
    "python",
    "going",
    "everybody",
    "bro",
    "hope",
    "well",
    "video",
    "going",
    "explain",
    "2d",
    "lists",
    "python",
    "sit",
    "back",
    "relax",
    "enjoy",
    "show",
    "super",
    "quick",
    "video",
    "today",
    "2d",
    "lists",
    "also",
    "referred",
    "lists",
    "list",
    "separate",
    "lists",
    "let",
    "begin",
    "creating",
    "separate",
    "lists",
    "let",
    "say",
    "list",
    "called",
    "drinks",
    "let",
    "assign",
    "values",
    "let",
    "say",
    "coffee",
    "well",
    "soda",
    "maybe",
    "tea",
    "right",
    "currently",
    "one",
    "list",
    "let",
    "make",
    "maybe",
    "two",
    "let",
    "make",
    "list",
    "called",
    "dinner",
    "maybe",
    "place",
    "pizza",
    "hamburger",
    "hot",
    "dog",
    "okay",
    "let",
    "create",
    "one",
    "example",
    "let",
    "say",
    "dessert",
    "maybe",
    "add",
    "two",
    "items",
    "need",
    "amount",
    "items",
    "elements",
    "cake",
    "ice",
    "cream",
    "right",
    "three",
    "lists",
    "one",
    "called",
    "drinks",
    "dinner",
    "dessert",
    "add",
    "lists",
    "one",
    "list",
    "let",
    "create",
    "list",
    "called",
    "food",
    "food",
    "equals",
    "elements",
    "going",
    "place",
    "lists",
    "drinks",
    "dinner",
    "dessert",
    "check",
    "print",
    "2d",
    "list",
    "food",
    "ends",
    "happening",
    "print",
    "elements",
    "found",
    "within",
    "individual",
    "list",
    "grouped",
    "together",
    "first",
    "portion",
    "drinks",
    "list",
    "contains",
    "coffee",
    "soda",
    "tea",
    "next",
    "element",
    "dinner",
    "list",
    "contains",
    "pizza",
    "hamburger",
    "hot",
    "dog",
    "last",
    "element",
    "dessert",
    "contains",
    "cake",
    "ice",
    "cream",
    "need",
    "access",
    "one",
    "lists",
    "add",
    "index",
    "food",
    "2d",
    "list",
    "set",
    "index",
    "number",
    "index",
    "zero",
    "referring",
    "first",
    "list",
    "drinks",
    "display",
    "elements",
    "found",
    "within",
    "first",
    "list",
    "need",
    "one",
    "elements",
    "add",
    "second",
    "set",
    "square",
    "brackets",
    "list",
    "index",
    "item",
    "trying",
    "access",
    "first",
    "item",
    "coffee",
    "would",
    "index",
    "zero",
    "index",
    "zero",
    "need",
    "two",
    "sets",
    "square",
    "brackets",
    "print",
    "display",
    "coffee",
    "go",
    "list",
    "next",
    "element",
    "would",
    "soda",
    "change",
    "index",
    "within",
    "first",
    "set",
    "square",
    "brackets",
    "well",
    "working",
    "different",
    "list",
    "time",
    "working",
    "dinner",
    "list",
    "element",
    "index",
    "1",
    "index",
    "2",
    "would",
    "dinner",
    "list",
    "display",
    "element",
    "hot",
    "dog",
    "change",
    "next",
    "list",
    "would",
    "dessert",
    "well",
    "going",
    "receive",
    "index",
    "range",
    "error",
    "two",
    "values",
    "within",
    "list",
    "cake",
    "ice",
    "cream",
    "element",
    "index",
    "2",
    "added",
    "two",
    "elements",
    "list",
    "dessert",
    "right",
    "everybody",
    "2d",
    "lists",
    "also",
    "referred",
    "lists",
    "list",
    "separate",
    "lists",
    "need",
    "access",
    "one",
    "elements",
    "within",
    "2d",
    "list",
    "need",
    "two",
    "sets",
    "square",
    "brackets",
    "would",
    "like",
    "copy",
    "code",
    "post",
    "comments",
    "yeah",
    "2d",
    "lists",
    "work",
    "python",
    "hey",
    "going",
    "people",
    "bro",
    "hope",
    "well",
    "video",
    "going",
    "explain",
    "tuples",
    "python",
    "sit",
    "back",
    "relax",
    "enjoy",
    "show",
    "tuples",
    "collections",
    "ordered",
    "unchangeable",
    "similar",
    "lists",
    "ordered",
    "ca",
    "change",
    "useful",
    "grouping",
    "together",
    "related",
    "data",
    "let",
    "say",
    "would",
    "like",
    "create",
    "sort",
    "student",
    "record",
    "create",
    "tuple",
    "take",
    "care",
    "us",
    "let",
    "say",
    "would",
    "like",
    "create",
    "tuple",
    "called",
    "student",
    "process",
    "creating",
    "tuple",
    "similar",
    "lists",
    "instead",
    "using",
    "set",
    "square",
    "brackets",
    "place",
    "values",
    "within",
    "going",
    "use",
    "set",
    "parentheses",
    "add",
    "bunch",
    "values",
    "related",
    "collection",
    "student",
    "let",
    "add",
    "student",
    "information",
    "let",
    "say",
    "student",
    "name",
    "bro",
    "let",
    "give",
    "age",
    "well",
    "gender",
    "right",
    "tuple",
    "called",
    "student",
    "let",
    "take",
    "look",
    "functions",
    "related",
    "tuples",
    "access",
    "typing",
    "student",
    "dot",
    "many",
    "lists",
    "count",
    "index",
    "find",
    "count",
    "many",
    "times",
    "value",
    "appears",
    "let",
    "count",
    "many",
    "times",
    "value",
    "bro",
    "appears",
    "need",
    "put",
    "within",
    "print",
    "statement",
    "actually",
    "see",
    "bro",
    "appears",
    "one",
    "time",
    "within",
    "tuple",
    "also",
    "index",
    "method",
    "well",
    "type",
    "name",
    "tuple",
    "dot",
    "use",
    "index",
    "method",
    "find",
    "index",
    "certain",
    "value",
    "let",
    "say",
    "would",
    "like",
    "find",
    "index",
    "mail",
    "print",
    "console",
    "window",
    "index",
    "value",
    "mail",
    "would",
    "two",
    "zero",
    "one",
    "two",
    "methods",
    "available",
    "tuples",
    "tricks",
    "tuples",
    "display",
    "contents",
    "within",
    "tuple",
    "using",
    "loop",
    "let",
    "say",
    "4x",
    "student",
    "print",
    "x",
    "iterate",
    "values",
    "found",
    "within",
    "tuple",
    "student",
    "also",
    "check",
    "see",
    "certain",
    "value",
    "exists",
    "within",
    "tuple",
    "using",
    "statement",
    "let",
    "say",
    "bro",
    "student",
    "true",
    "want",
    "let",
    "say",
    "print",
    "bro",
    "right",
    "since",
    "bro",
    "within",
    "true",
    "print",
    "statement",
    "bro",
    "right",
    "everybody",
    "like",
    "said",
    "super",
    "quick",
    "video",
    "tuples",
    "similar",
    "lists",
    "except",
    "ordered",
    "unchangeable",
    "like",
    "copy",
    "code",
    "post",
    "comments",
    "forget",
    "smash",
    "like",
    "button",
    "drop",
    "comment",
    "subscribe",
    "like",
    "become",
    "fellow",
    "bro",
    "hey",
    "going",
    "everybody",
    "bro",
    "hope",
    "well",
    "video",
    "going",
    "explain",
    "set",
    "python",
    "sit",
    "back",
    "relax",
    "enjoy",
    "show",
    "set",
    "collection",
    "unordered",
    "well",
    "unindexed",
    "allow",
    "duplicate",
    "values",
    "example",
    "let",
    "create",
    "set",
    "silverware",
    "order",
    "create",
    "set",
    "need",
    "name",
    "set",
    "let",
    "call",
    "utensils",
    "equals",
    "order",
    "create",
    "set",
    "need",
    "surround",
    "values",
    "set",
    "curly",
    "braces",
    "let",
    "add",
    "utensils",
    "set",
    "called",
    "utensils",
    "let",
    "add",
    "fork",
    "spoon",
    "maybe",
    "knife",
    "good",
    "let",
    "display",
    "values",
    "x",
    "utensils",
    "print",
    "x",
    "sets",
    "different",
    "lists",
    "unordered",
    "well",
    "unindexed",
    "print",
    "elements",
    "utensils",
    "might",
    "necessarily",
    "order",
    "placed",
    "example",
    "printed",
    "elements",
    "found",
    "within",
    "utensils",
    "first",
    "knife",
    "fork",
    "spoon",
    "run",
    "might",
    "different",
    "order",
    "kind",
    "like",
    "set",
    "actually",
    "faster",
    "list",
    "need",
    "check",
    "see",
    "something",
    "within",
    "set",
    "compared",
    "list",
    "allow",
    "duplicate",
    "values",
    "let",
    "add",
    "bunch",
    "knives",
    "let",
    "see",
    "happens",
    "total",
    "three",
    "knives",
    "print",
    "elements",
    "set",
    "one",
    "knife",
    "appears",
    "useful",
    "methods",
    "sets",
    "first",
    "method",
    "add",
    "item",
    "set",
    "type",
    "name",
    "set",
    "case",
    "utensils",
    "dot",
    "bunch",
    "methods",
    "use",
    "looking",
    "add",
    "add",
    "element",
    "set",
    "would",
    "like",
    "add",
    "napkin",
    "print",
    "set",
    "napkin",
    "within",
    "set",
    "also",
    "remove",
    "element",
    "utensils",
    "dot",
    "remove",
    "would",
    "like",
    "remove",
    "fork",
    "fork",
    "gone",
    "also",
    "clear",
    "utensils",
    "dot",
    "clear",
    "elements",
    "within",
    "set",
    "gone",
    "let",
    "turn",
    "lines",
    "comment",
    "right",
    "next",
    "example",
    "need",
    "second",
    "set",
    "let",
    "create",
    "second",
    "set",
    "called",
    "dishes",
    "need",
    "set",
    "curly",
    "braces",
    "let",
    "add",
    "bowl",
    "plate",
    "cup",
    "next",
    "method",
    "going",
    "add",
    "one",
    "set",
    "another",
    "using",
    "update",
    "method",
    "let",
    "say",
    "would",
    "like",
    "add",
    "dishes",
    "set",
    "utensil",
    "set",
    "let",
    "type",
    "utensils",
    "dot",
    "use",
    "update",
    "method",
    "within",
    "method",
    "pass",
    "set",
    "would",
    "like",
    "add",
    "utensils",
    "update",
    "dishes",
    "add",
    "elements",
    "found",
    "within",
    "dishes",
    "utensil",
    "set",
    "see",
    "print",
    "utensils",
    "bowl",
    "plate",
    "cup",
    "well",
    "switch",
    "around",
    "let",
    "say",
    "dishes",
    "update",
    "utensils",
    "print",
    "everything",
    "found",
    "within",
    "dishes",
    "fork",
    "spoon",
    "knife",
    "well",
    "also",
    "join",
    "two",
    "sets",
    "together",
    "create",
    "new",
    "set",
    "entirely",
    "let",
    "create",
    "set",
    "called",
    "dinner",
    "table",
    "like",
    "setting",
    "dinner",
    "table",
    "need",
    "fork",
    "spoon",
    "knife",
    "bowl",
    "plate",
    "cup",
    "dinner",
    "table",
    "set",
    "going",
    "set",
    "sequel",
    "either",
    "utensils",
    "dot",
    "union",
    "dishes",
    "could",
    "dishes",
    "union",
    "utensils",
    "either",
    "way",
    "would",
    "work",
    "let",
    "display",
    "elements",
    "found",
    "within",
    "dinner",
    "table",
    "elements",
    "sets",
    "utensils",
    "dishes",
    "well",
    "also",
    "methods",
    "compare",
    "similarities",
    "well",
    "differences",
    "elements",
    "found",
    "within",
    "two",
    "sets",
    "let",
    "say",
    "would",
    "like",
    "check",
    "see",
    "utensils",
    "dishes",
    "example",
    "think",
    "add",
    "knife",
    "dishes",
    "set",
    "least",
    "one",
    "thing",
    "common",
    "would",
    "like",
    "see",
    "utensils",
    "dishes",
    "using",
    "difference",
    "method",
    "print",
    "results",
    "print",
    "statement",
    "going",
    "compare",
    "utensils",
    "dishes",
    "utensils",
    "dishes",
    "print",
    "utensils",
    "dishes",
    "fork",
    "well",
    "spoon",
    "reverse",
    "rolls",
    "could",
    "say",
    "dishes",
    "difference",
    "utensils",
    "dishes",
    "utensils",
    "dishes",
    "cup",
    "bowl",
    "plate",
    "knives",
    "knife",
    "appearing",
    "also",
    "check",
    "see",
    "anything",
    "common",
    "using",
    "intersection",
    "method",
    "turn",
    "line",
    "comment",
    "print",
    "utensils",
    "dot",
    "intersection",
    "dishes",
    "return",
    "whatever",
    "element",
    "common",
    "knife",
    "right",
    "everybody",
    "conclusion",
    "set",
    "collection",
    "unordered",
    "well",
    "unindexed",
    "allow",
    "duplicate",
    "values",
    "things",
    "like",
    "compare",
    "two",
    "sets",
    "see",
    "anything",
    "common",
    "differences",
    "add",
    "remove",
    "elements",
    "set",
    "like",
    "copy",
    "code",
    "post",
    "comments",
    "afraid",
    "smash",
    "like",
    "button",
    "drop",
    "comment",
    "subscribe",
    "like",
    "become",
    "fellow",
    "bro",
    "hey",
    "going",
    "everybody",
    "bro",
    "hope",
    "well",
    "video",
    "going",
    "explain",
    "dictionaries",
    "work",
    "python",
    "sit",
    "back",
    "relax",
    "enjoy",
    "show",
    "right",
    "let",
    "get",
    "business",
    "dictionary",
    "changeable",
    "unordered",
    "collection",
    "unique",
    "key",
    "value",
    "pairs",
    "fast",
    "use",
    "hashing",
    "allow",
    "us",
    "access",
    "value",
    "quickly",
    "create",
    "dictionary",
    "similar",
    "creating",
    "set",
    "based",
    "last",
    "video",
    "except",
    "going",
    "store",
    "unique",
    "key",
    "value",
    "pairs",
    "let",
    "create",
    "dictionary",
    "countries",
    "capitals",
    "store",
    "key",
    "value",
    "pairs",
    "let",
    "call",
    "dictionary",
    "capitals",
    "capitals",
    "equals",
    "need",
    "set",
    "curly",
    "braces",
    "much",
    "like",
    "use",
    "sets",
    "need",
    "key",
    "value",
    "let",
    "say",
    "usa",
    "key",
    "capital",
    "usa",
    "would",
    "washington",
    "dc",
    "order",
    "associate",
    "value",
    "key",
    "follow",
    "key",
    "colon",
    "add",
    "value",
    "data",
    "type",
    "really",
    "matter",
    "case",
    "using",
    "strings",
    "capital",
    "usa",
    "would",
    "washington",
    "dc",
    "add",
    "another",
    "key",
    "value",
    "pair",
    "separate",
    "comma",
    "let",
    "add",
    "others",
    "good",
    "measure",
    "let",
    "say",
    "india",
    "next",
    "key",
    "value",
    "would",
    "new",
    "delhi",
    "add",
    "two",
    "let",
    "say",
    "china",
    "capital",
    "china",
    "beijing",
    "lastly",
    "let",
    "add",
    "russia",
    "capital",
    "russia",
    "moscow",
    "ladies",
    "gentlemen",
    "dictionary",
    "called",
    "capitals",
    "unique",
    "key",
    "value",
    "pairs",
    "remember",
    "dictionaries",
    "unordered",
    "order",
    "access",
    "one",
    "values",
    "instead",
    "using",
    "numbered",
    "index",
    "going",
    "use",
    "associated",
    "key",
    "value",
    "example",
    "let",
    "say",
    "would",
    "like",
    "print",
    "capital",
    "russia",
    "need",
    "use",
    "key",
    "russia",
    "order",
    "type",
    "name",
    "dictionary",
    "followed",
    "set",
    "straight",
    "brackets",
    "instead",
    "index",
    "number",
    "like",
    "0",
    "1",
    "2",
    "3",
    "going",
    "use",
    "key",
    "would",
    "like",
    "print",
    "value",
    "stored",
    "associated",
    "key",
    "russia",
    "run",
    "print",
    "value",
    "moscow",
    "always",
    "safe",
    "let",
    "say",
    "key",
    "exist",
    "like",
    "germany",
    "germany",
    "currently",
    "within",
    "dictionary",
    "run",
    "well",
    "program",
    "going",
    "encounter",
    "error",
    "interrupt",
    "normal",
    "flow",
    "program",
    "much",
    "safer",
    "way",
    "access",
    "key",
    "check",
    "see",
    "use",
    "get",
    "method",
    "dictionaries",
    "going",
    "turn",
    "line",
    "comment",
    "let",
    "try",
    "time",
    "use",
    "get",
    "method",
    "type",
    "name",
    "dictionary",
    "dot",
    "get",
    "list",
    "key",
    "want",
    "use",
    "would",
    "like",
    "see",
    "germany",
    "within",
    "dictionary",
    "currently",
    "return",
    "none",
    "encounter",
    "error",
    "much",
    "safer",
    "way",
    "checking",
    "see",
    "key",
    "within",
    "dictionary",
    "useful",
    "methods",
    "method",
    "print",
    "keys",
    "type",
    "name",
    "dictionary",
    "capitals",
    "listing",
    "methods",
    "access",
    "looking",
    "keys",
    "method",
    "print",
    "keys",
    "values",
    "also",
    "print",
    "values",
    "keys",
    "type",
    "name",
    "dictionary",
    "capitals",
    "dot",
    "values",
    "print",
    "values",
    "could",
    "print",
    "everything",
    "keys",
    "values",
    "using",
    "items",
    "method",
    "capitals",
    "dot",
    "items",
    "print",
    "entire",
    "dictionary",
    "one",
    "way",
    "display",
    "key",
    "value",
    "pairs",
    "dictionary",
    "use",
    "loop",
    "end",
    "let",
    "create",
    "loop",
    "key",
    "comma",
    "value",
    "capitals",
    "dot",
    "items",
    "going",
    "iterate",
    "key",
    "value",
    "pair",
    "dictionary",
    "key",
    "value",
    "capitals",
    "dot",
    "items",
    "print",
    "key",
    "comma",
    "value",
    "print",
    "entire",
    "dictionary",
    "feature",
    "dictionaries",
    "mutable",
    "means",
    "change",
    "alter",
    "program",
    "already",
    "running",
    "one",
    "way",
    "use",
    "update",
    "method",
    "dictionaries",
    "let",
    "add",
    "germany",
    "key",
    "give",
    "value",
    "berlin",
    "type",
    "name",
    "dictionary",
    "capitals",
    "use",
    "update",
    "method",
    "within",
    "parentheses",
    "method",
    "add",
    "set",
    "curly",
    "braces",
    "add",
    "new",
    "key",
    "value",
    "pair",
    "let",
    "add",
    "germany",
    "value",
    "berlin",
    "run",
    "display",
    "key",
    "value",
    "pairs",
    "found",
    "within",
    "dictionary",
    "germany",
    "key",
    "berlin",
    "value",
    "use",
    "update",
    "method",
    "add",
    "new",
    "key",
    "value",
    "pair",
    "update",
    "existing",
    "one",
    "let",
    "say",
    "would",
    "like",
    "change",
    "capital",
    "usa",
    "capitals",
    "dot",
    "update",
    "parentheses",
    "curly",
    "braces",
    "list",
    "key",
    "usa",
    "colon",
    "give",
    "usa",
    "new",
    "value",
    "let",
    "pretend",
    "united",
    "states",
    "government",
    "decided",
    "relocate",
    "capital",
    "las",
    "vegas",
    "update",
    "key",
    "usa",
    "new",
    "value",
    "print",
    "key",
    "value",
    "pairs",
    "found",
    "within",
    "dictionary",
    "capitals",
    "usa",
    "new",
    "value",
    "las",
    "vegas",
    "last",
    "two",
    "methods",
    "going",
    "cover",
    "pop",
    "clear",
    "use",
    "pop",
    "method",
    "remove",
    "key",
    "value",
    "pair",
    "capitals",
    "dot",
    "pop",
    "parentheses",
    "list",
    "key",
    "key",
    "value",
    "pair",
    "would",
    "like",
    "remove",
    "let",
    "say",
    "would",
    "like",
    "remove",
    "china",
    "list",
    "key",
    "use",
    "pop",
    "method",
    "remove",
    "key",
    "value",
    "pair",
    "dictionary",
    "course",
    "clear",
    "well",
    "remove",
    "everything",
    "capitals",
    "dot",
    "clear",
    "clear",
    "dictionary",
    "right",
    "everybody",
    "conclusion",
    "dictionary",
    "changeable",
    "unordered",
    "collection",
    "unique",
    "key",
    "value",
    "pairs",
    "fast",
    "use",
    "hashing",
    "allow",
    "us",
    "access",
    "value",
    "quickly",
    "well",
    "basics",
    "dictionaries",
    "python",
    "would",
    "like",
    "copy",
    "code",
    "post",
    "comments",
    "yeah",
    "dictionaries",
    "work",
    "python",
    "hey",
    "going",
    "everybody",
    "bro",
    "hope",
    "well",
    "video",
    "going",
    "teach",
    "guys",
    "index",
    "operator",
    "python",
    "sit",
    "back",
    "relax",
    "enjoy",
    "show",
    "right",
    "people",
    "let",
    "begin",
    "going",
    "explaining",
    "index",
    "operator",
    "represented",
    "set",
    "square",
    "brackets",
    "give",
    "access",
    "sequences",
    "elements",
    "include",
    "limited",
    "strings",
    "lists",
    "tuples",
    "example",
    "going",
    "working",
    "strings",
    "strings",
    "easy",
    "work",
    "let",
    "say",
    "name",
    "name",
    "equals",
    "whatever",
    "first",
    "last",
    "name",
    "use",
    "index",
    "operator",
    "access",
    "element",
    "sequence",
    "string",
    "let",
    "check",
    "see",
    "first",
    "letter",
    "name",
    "lowercase",
    "probably",
    "change",
    "lowercase",
    "example",
    "within",
    "statement",
    "name",
    "add",
    "set",
    "square",
    "brackets",
    "sequence",
    "string",
    "check",
    "given",
    "element",
    "sequence",
    "let",
    "check",
    "see",
    "first",
    "letter",
    "lowercase",
    "computers",
    "always",
    "start",
    "zero",
    "need",
    "access",
    "first",
    "element",
    "sequence",
    "would",
    "index",
    "zero",
    "next",
    "sequence",
    "well",
    "next",
    "element",
    "sequence",
    "would",
    "one",
    "two",
    "followed",
    "pattern",
    "would",
    "like",
    "check",
    "see",
    "name",
    "index",
    "zero",
    "would",
    "first",
    "character",
    "lowercase",
    "method",
    "check",
    "dot",
    "lower",
    "return",
    "true",
    "false",
    "first",
    "letter",
    "lowercase",
    "statement",
    "going",
    "resolved",
    "true",
    "could",
    "perhaps",
    "change",
    "uppercase",
    "let",
    "reassign",
    "name",
    "equal",
    "name",
    "dot",
    "capitalize",
    "function",
    "let",
    "print",
    "name",
    "print",
    "name",
    "run",
    "first",
    "letter",
    "name",
    "capitalized",
    "need",
    "access",
    "element",
    "within",
    "sequence",
    "string",
    "list",
    "tuple",
    "would",
    "add",
    "set",
    "square",
    "brackets",
    "afterwards",
    "list",
    "integer",
    "element",
    "trying",
    "access",
    "examples",
    "going",
    "turn",
    "well",
    "comment",
    "let",
    "say",
    "would",
    "like",
    "create",
    "substrings",
    "using",
    "index",
    "operator",
    "would",
    "like",
    "create",
    "substring",
    "first",
    "part",
    "name",
    "create",
    "new",
    "variable",
    "first",
    "name",
    "equals",
    "name",
    "index",
    "operator",
    "specify",
    "range",
    "index",
    "operator",
    "would",
    "set",
    "starting",
    "position",
    "left",
    "hand",
    "side",
    "followed",
    "colon",
    "ending",
    "position",
    "would",
    "like",
    "substring",
    "begin",
    "index",
    "0",
    "end",
    "3",
    "would",
    "0",
    "colon",
    "three",
    "right",
    "would",
    "like",
    "make",
    "uppercase",
    "reason",
    "let",
    "print",
    "first",
    "name",
    "index",
    "operator",
    "specified",
    "range",
    "would",
    "like",
    "access",
    "elements",
    "0",
    "turn",
    "case",
    "assign",
    "new",
    "variable",
    "first",
    "name",
    "shortcut",
    "might",
    "find",
    "useful",
    "index",
    "range",
    "begins",
    "zero",
    "actually",
    "delete",
    "even",
    "necessarily",
    "need",
    "zero",
    "colon",
    "three",
    "would",
    "work",
    "useful",
    "shortcut",
    "going",
    "bring",
    "later",
    "need",
    "access",
    "last",
    "element",
    "sequence",
    "time",
    "let",
    "create",
    "substring",
    "last",
    "name",
    "last",
    "name",
    "equals",
    "name",
    "index",
    "operator",
    "time",
    "would",
    "like",
    "access",
    "element",
    "index",
    "let",
    "see",
    "0",
    "1",
    "2",
    "3",
    "right",
    "going",
    "say",
    "colon",
    "really",
    "sure",
    "name",
    "last",
    "name",
    "going",
    "end",
    "could",
    "say",
    "colon",
    "leave",
    "next",
    "index",
    "blank",
    "index",
    "beginning",
    "four",
    "everything",
    "afterwards",
    "let",
    "say",
    "two",
    "lower",
    "make",
    "lowercase",
    "reason",
    "let",
    "print",
    "last",
    "name",
    "print",
    "last",
    "name",
    "take",
    "everything",
    "starting",
    "index",
    "4",
    "turn",
    "substring",
    "last",
    "name",
    "access",
    "last",
    "element",
    "sequence",
    "using",
    "called",
    "negative",
    "indexing",
    "let",
    "add",
    "exclamation",
    "point",
    "end",
    "name",
    "let",
    "say",
    "new",
    "variable",
    "called",
    "last",
    "character",
    "would",
    "like",
    "store",
    "last",
    "character",
    "name",
    "new",
    "variable",
    "new",
    "substring",
    "access",
    "last",
    "element",
    "sequence",
    "within",
    "index",
    "operator",
    "use",
    "negative",
    "indexing",
    "last",
    "element",
    "would",
    "negative",
    "one",
    "right",
    "let",
    "print",
    "whatever",
    "last",
    "character",
    "print",
    "exclamation",
    "point",
    "yep",
    "negative",
    "2",
    "would",
    "second",
    "last",
    "element",
    "sequence",
    "would",
    "e",
    "e",
    "second",
    "last",
    "element",
    "sequence",
    "right",
    "everybody",
    "basics",
    "index",
    "operator",
    "add",
    "set",
    "square",
    "brackets",
    "string",
    "list",
    "tuple",
    "list",
    "integer",
    "range",
    "elements",
    "trying",
    "access",
    "would",
    "like",
    "copy",
    "code",
    "post",
    "everything",
    "comments",
    "afraid",
    "help",
    "smash",
    "like",
    "button",
    "drop",
    "comment",
    "subscribe",
    "like",
    "become",
    "fellow",
    "bro",
    "hey",
    "going",
    "everybody",
    "bro",
    "hope",
    "well",
    "video",
    "going",
    "explain",
    "functions",
    "work",
    "python",
    "sit",
    "back",
    "relax",
    "enjoy",
    "show",
    "find",
    "video",
    "helpful",
    "please",
    "remember",
    "like",
    "comment",
    "subscribe",
    "support",
    "help",
    "keep",
    "channel",
    "running",
    "okay",
    "let",
    "thing",
    "function",
    "block",
    "code",
    "executed",
    "called",
    "process",
    "also",
    "known",
    "invoking",
    "function",
    "programming",
    "try",
    "repeat",
    "code",
    "functions",
    "useful",
    "function",
    "perform",
    "specific",
    "task",
    "us",
    "block",
    "code",
    "us",
    "whenever",
    "called",
    "need",
    "write",
    "block",
    "code",
    "need",
    "repeat",
    "call",
    "function",
    "one",
    "time",
    "let",
    "define",
    "create",
    "function",
    "create",
    "function",
    "called",
    "hello",
    "order",
    "define",
    "function",
    "type",
    "def",
    "unique",
    "function",
    "name",
    "let",
    "call",
    "function",
    "hello",
    "functions",
    "always",
    "end",
    "set",
    "parentheses",
    "lastly",
    "finish",
    "defining",
    "function",
    "add",
    "colon",
    "end",
    "go",
    "next",
    "line",
    "take",
    "notice",
    "cursor",
    "indented",
    "code",
    "underneath",
    "function",
    "indented",
    "belongs",
    "specific",
    "function",
    "execute",
    "whenever",
    "function",
    "called",
    "need",
    "type",
    "something",
    "know",
    "want",
    "function",
    "always",
    "type",
    "pass",
    "let",
    "print",
    "something",
    "print",
    "word",
    "hello",
    "order",
    "call",
    "function",
    "need",
    "within",
    "program",
    "type",
    "name",
    "function",
    "hello",
    "add",
    "set",
    "parentheses",
    "functions",
    "always",
    "end",
    "set",
    "parentheses",
    "execute",
    "function",
    "perform",
    "block",
    "code",
    "whenever",
    "called",
    "remove",
    "well",
    "program",
    "currently",
    "going",
    "anything",
    "functions",
    "execute",
    "block",
    "code",
    "called",
    "time",
    "let",
    "print",
    "word",
    "hello",
    "three",
    "times",
    "call",
    "function",
    "three",
    "separate",
    "times",
    "hello",
    "hello",
    "hello",
    "run",
    "hello",
    "function",
    "called",
    "three",
    "separate",
    "times",
    "functions",
    "limited",
    "one",
    "line",
    "entire",
    "block",
    "code",
    "maybe",
    "something",
    "else",
    "let",
    "print",
    "nice",
    "day",
    "run",
    "hello",
    "function",
    "going",
    "execute",
    "entire",
    "block",
    "code",
    "three",
    "separate",
    "times",
    "hello",
    "nice",
    "day",
    "important",
    "feature",
    "functions",
    "send",
    "function",
    "information",
    "function",
    "something",
    "information",
    "receives",
    "let",
    "say",
    "time",
    "would",
    "like",
    "print",
    "hello",
    "plus",
    "somebody",
    "name",
    "currently",
    "name",
    "unresolved",
    "reference",
    "call",
    "function",
    "send",
    "function",
    "information",
    "value",
    "variable",
    "collection",
    "sorts",
    "different",
    "things",
    "need",
    "send",
    "function",
    "information",
    "within",
    "parentheses",
    "call",
    "function",
    "list",
    "data",
    "want",
    "send",
    "function",
    "let",
    "say",
    "would",
    "like",
    "send",
    "function",
    "string",
    "value",
    "bro",
    "whatever",
    "first",
    "name",
    "send",
    "information",
    "function",
    "called",
    "arguments",
    "information",
    "sending",
    "function",
    "define",
    "function",
    "need",
    "matching",
    "set",
    "known",
    "parameters",
    "hello",
    "function",
    "going",
    "receive",
    "one",
    "argument",
    "string",
    "value",
    "need",
    "matching",
    "number",
    "parameters",
    "currently",
    "going",
    "work",
    "see",
    "hello",
    "takes",
    "zero",
    "positional",
    "arguments",
    "one",
    "given",
    "function",
    "needs",
    "matching",
    "number",
    "parameters",
    "think",
    "way",
    "receive",
    "value",
    "going",
    "give",
    "nickname",
    "value",
    "receive",
    "string",
    "value",
    "want",
    "call",
    "well",
    "let",
    "call",
    "name",
    "order",
    "add",
    "parameters",
    "function",
    "list",
    "parameters",
    "within",
    "parentheses",
    "function",
    "well",
    "work",
    "matching",
    "set",
    "arguments",
    "parameters",
    "call",
    "hello",
    "function",
    "time",
    "sending",
    "one",
    "argument",
    "hello",
    "function",
    "receives",
    "argument",
    "going",
    "give",
    "temporary",
    "nickname",
    "name",
    "call",
    "whatever",
    "want",
    "use",
    "value",
    "whatever",
    "want",
    "within",
    "function",
    "run",
    "print",
    "hello",
    "bro",
    "nice",
    "day",
    "send",
    "maybe",
    "different",
    "value",
    "let",
    "say",
    "hello",
    "send",
    "string",
    "value",
    "dude",
    "hello",
    "dude",
    "nice",
    "day",
    "limited",
    "values",
    "send",
    "variables",
    "let",
    "say",
    "variable",
    "called",
    "name",
    "equals",
    "bro",
    "time",
    "going",
    "send",
    "variable",
    "hello",
    "send",
    "name",
    "need",
    "exact",
    "let",
    "say",
    "name",
    "going",
    "send",
    "name",
    "temporarily",
    "give",
    "value",
    "nickname",
    "name",
    "use",
    "variable",
    "something",
    "hello",
    "bro",
    "nice",
    "day",
    "arguments",
    "send",
    "one",
    "value",
    "let",
    "say",
    "time",
    "would",
    "like",
    "send",
    "two",
    "values",
    "let",
    "send",
    "pro",
    "maybe",
    "first",
    "name",
    "code",
    "second",
    "name",
    "use",
    "first",
    "name",
    "last",
    "name",
    "going",
    "work",
    "matching",
    "set",
    "arguments",
    "parameters",
    "sending",
    "two",
    "arguments",
    "function",
    "designed",
    "accept",
    "one",
    "argument",
    "one",
    "parameter",
    "let",
    "rename",
    "name",
    "first",
    "name",
    "need",
    "two",
    "parameters",
    "time",
    "going",
    "call",
    "value",
    "receive",
    "let",
    "call",
    "last",
    "name",
    "time",
    "going",
    "receive",
    "two",
    "values",
    "nicknamed",
    "first",
    "name",
    "last",
    "name",
    "time",
    "let",
    "print",
    "hello",
    "first",
    "name",
    "maybe",
    "add",
    "space",
    "plus",
    "last",
    "name",
    "valid",
    "hello",
    "bro",
    "code",
    "nice",
    "day",
    "arguments",
    "mix",
    "match",
    "data",
    "types",
    "sending",
    "arguments",
    "currently",
    "sending",
    "two",
    "string",
    "values",
    "arguments",
    "time",
    "let",
    "send",
    "integer",
    "value",
    "let",
    "say",
    "would",
    "like",
    "send",
    "edge",
    "hello",
    "function",
    "send",
    "maybe",
    "value",
    "currently",
    "going",
    "work",
    "hello",
    "function",
    "takes",
    "two",
    "positional",
    "arguments",
    "three",
    "given",
    "call",
    "hello",
    "function",
    "sending",
    "argument",
    "function",
    "know",
    "argument",
    "need",
    "matching",
    "parameter",
    "value",
    "receives",
    "let",
    "call",
    "value",
    "maybe",
    "edge",
    "temporary",
    "nickname",
    "something",
    "value",
    "receive",
    "let",
    "print",
    "additional",
    "message",
    "perhaps",
    "u",
    "r",
    "plus",
    "age",
    "plus",
    "years",
    "old",
    "need",
    "display",
    "integer",
    "number",
    "along",
    "string",
    "need",
    "convert",
    "string",
    "let",
    "cast",
    "edge",
    "string",
    "display",
    "work",
    "matching",
    "number",
    "arguments",
    "parameters",
    "display",
    "hello",
    "bro",
    "code",
    "21",
    "years",
    "old",
    "nice",
    "day",
    "ladies",
    "gentlemen",
    "conclusion",
    "function",
    "block",
    "code",
    "executed",
    "called",
    "remove",
    "function",
    "call",
    "well",
    "program",
    "going",
    "completely",
    "ignore",
    "function",
    "block",
    "code",
    "would",
    "executed",
    "call",
    "function",
    "pass",
    "information",
    "known",
    "arguments",
    "need",
    "matching",
    "number",
    "parameters",
    "set",
    "receive",
    "arguments",
    "advanced",
    "features",
    "parameters",
    "hopefully",
    "get",
    "future",
    "videos",
    "stick",
    "basics",
    "functions",
    "basics",
    "functions",
    "would",
    "like",
    "copy",
    "code",
    "post",
    "comments",
    "yeah",
    "functions",
    "work",
    "python",
    "hey",
    "going",
    "everybody",
    "bro",
    "hope",
    "well",
    "video",
    "going",
    "explain",
    "return",
    "statement",
    "python",
    "sit",
    "back",
    "relax",
    "enjoy",
    "show",
    "right",
    "people",
    "let",
    "begin",
    "return",
    "statement",
    "used",
    "within",
    "functions",
    "send",
    "python",
    "values",
    "objects",
    "back",
    "caller",
    "values",
    "objects",
    "known",
    "function",
    "return",
    "value",
    "know",
    "functions",
    "pass",
    "arguments",
    "function",
    "function",
    "something",
    "arguments",
    "well",
    "function",
    "pass",
    "value",
    "object",
    "back",
    "caller",
    "example",
    "create",
    "function",
    "simply",
    "multiply",
    "two",
    "numbers",
    "together",
    "return",
    "result",
    "back",
    "caller",
    "let",
    "define",
    "function",
    "called",
    "multiply",
    "set",
    "two",
    "parameters",
    "function",
    "let",
    "say",
    "number",
    "one",
    "number",
    "two",
    "say",
    "result",
    "equals",
    "number",
    "one",
    "times",
    "number",
    "two",
    "end",
    "return",
    "something",
    "want",
    "return",
    "let",
    "return",
    "whatever",
    "result",
    "call",
    "function",
    "pass",
    "two",
    "values",
    "arguments",
    "let",
    "say",
    "would",
    "like",
    "multiply",
    "six",
    "times",
    "eight",
    "run",
    "well",
    "ca",
    "actually",
    "see",
    "anything",
    "return",
    "result",
    "multiplying",
    "numbers",
    "one",
    "two",
    "going",
    "return",
    "result",
    "back",
    "caller",
    "order",
    "see",
    "value",
    "returned",
    "back",
    "caller",
    "one",
    "way",
    "print",
    "value",
    "returned",
    "within",
    "print",
    "statement",
    "print",
    "value",
    "returned",
    "calling",
    "multiply",
    "function",
    "6",
    "times",
    "8",
    "really",
    "great",
    "6",
    "times",
    "8",
    "48",
    "one",
    "thing",
    "store",
    "returned",
    "value",
    "within",
    "variable",
    "let",
    "say",
    "x",
    "equals",
    "multiply",
    "6",
    "times",
    "8",
    "print",
    "whatever",
    "x",
    "result",
    "still",
    "48",
    "return",
    "value",
    "another",
    "way",
    "could",
    "write",
    "uses",
    "less",
    "lines",
    "code",
    "delete",
    "first",
    "line",
    "instead",
    "returning",
    "variable",
    "called",
    "result",
    "return",
    "number",
    "one",
    "times",
    "number",
    "two",
    "would",
    "work",
    "written",
    "less",
    "lines",
    "code",
    "another",
    "way",
    "could",
    "write",
    "right",
    "everybody",
    "return",
    "statement",
    "functions",
    "send",
    "python",
    "values",
    "objects",
    "back",
    "caller",
    "values",
    "objects",
    "known",
    "functions",
    "return",
    "value",
    "either",
    "print",
    "value",
    "directly",
    "console",
    "window",
    "store",
    "within",
    "variable",
    "location",
    "well",
    "ladies",
    "gentlemen",
    "return",
    "statement",
    "works",
    "python",
    "going",
    "everybody",
    "bro",
    "hope",
    "well",
    "video",
    "going",
    "explain",
    "keyword",
    "arguments",
    "python",
    "sit",
    "back",
    "relax",
    "enjoy",
    "show",
    "right",
    "everybody",
    "let",
    "discuss",
    "keyword",
    "arguments",
    "arguments",
    "preceded",
    "identifier",
    "pass",
    "function",
    "order",
    "arguments",
    "matter",
    "unlike",
    "positional",
    "arguments",
    "matter",
    "working",
    "positional",
    "arguments",
    "already",
    "python",
    "knows",
    "names",
    "arguments",
    "function",
    "receives",
    "use",
    "keyword",
    "arguments",
    "example",
    "us",
    "using",
    "positional",
    "arguments",
    "demonstrate",
    "benefits",
    "keyword",
    "arguments",
    "let",
    "say",
    "function",
    "called",
    "hello",
    "accepts",
    "three",
    "arguments",
    "first",
    "name",
    "middle",
    "name",
    "last",
    "name",
    "output",
    "hello",
    "first",
    "name",
    "middle",
    "name",
    "last",
    "name",
    "run",
    "display",
    "hello",
    "bro",
    "dude",
    "code",
    "using",
    "positional",
    "arguments",
    "order",
    "arguments",
    "matter",
    "think",
    "gon",
    "na",
    "happen",
    "replace",
    "values",
    "let",
    "say",
    "swap",
    "first",
    "argument",
    "third",
    "argument",
    "let",
    "try",
    "hello",
    "code",
    "dude",
    "bro",
    "obviously",
    "order",
    "arguments",
    "matters",
    "use",
    "keyword",
    "arguments",
    "order",
    "arguments",
    "matter",
    "argument",
    "need",
    "precede",
    "argument",
    "unique",
    "identifier",
    "identifier",
    "name",
    "parameter",
    "want",
    "associate",
    "argument",
    "intended",
    "last",
    "name",
    "use",
    "identifier",
    "last",
    "match",
    "parameter",
    "dude",
    "middle",
    "middle",
    "equals",
    "dude",
    "bro",
    "first",
    "even",
    "though",
    "correct",
    "order",
    "let",
    "try",
    "output",
    "hello",
    "bro",
    "dude",
    "code",
    "keyword",
    "arguments",
    "arguments",
    "preceded",
    "identifier",
    "pass",
    "function",
    "order",
    "arguments",
    "matter",
    "unlike",
    "positional",
    "arguments",
    "matter",
    "python",
    "knows",
    "names",
    "arguments",
    "function",
    "receives",
    "use",
    "keyword",
    "arguments",
    "keyword",
    "arguments",
    "would",
    "like",
    "copy",
    "code",
    "post",
    "comment",
    "section",
    "yeah",
    "keyword",
    "arguments",
    "work",
    "python",
    "hey",
    "going",
    "everybody",
    "bro",
    "hope",
    "well",
    "video",
    "going",
    "explain",
    "nested",
    "function",
    "calls",
    "python",
    "sit",
    "back",
    "relax",
    "enjoy",
    "show",
    "right",
    "people",
    "nested",
    "function",
    "calls",
    "function",
    "calls",
    "inside",
    "function",
    "calls",
    "possible",
    "certain",
    "functions",
    "return",
    "value",
    "immediately",
    "use",
    "value",
    "argument",
    "next",
    "function",
    "example",
    "let",
    "say",
    "small",
    "program",
    "ask",
    "user",
    "type",
    "whole",
    "positive",
    "number",
    "let",
    "say",
    "let",
    "say",
    "type",
    "negative",
    "storing",
    "value",
    "within",
    "variable",
    "named",
    "num",
    "going",
    "convert",
    "number",
    "floating",
    "point",
    "number",
    "currently",
    "string",
    "accept",
    "user",
    "input",
    "find",
    "absolute",
    "value",
    "num",
    "round",
    "nearest",
    "whole",
    "number",
    "print",
    "value",
    "actually",
    "using",
    "less",
    "lines",
    "code",
    "nested",
    "function",
    "calls",
    "let",
    "start",
    "first",
    "function",
    "accepting",
    "user",
    "input",
    "input",
    "function",
    "center",
    "nested",
    "function",
    "calls",
    "next",
    "function",
    "would",
    "like",
    "apply",
    "variable",
    "returned",
    "value",
    "returned",
    "pass",
    "argument",
    "next",
    "function",
    "casting",
    "data",
    "type",
    "float",
    "surround",
    "function",
    "another",
    "function",
    "use",
    "float",
    "function",
    "keep",
    "adding",
    "layers",
    "absolute",
    "value",
    "function",
    "next",
    "add",
    "another",
    "layer",
    "round",
    "function",
    "add",
    "layer",
    "lastly",
    "going",
    "print",
    "outermost",
    "layer",
    "program",
    "exact",
    "thing",
    "let",
    "say",
    "negative",
    "except",
    "written",
    "one",
    "line",
    "code",
    "basically",
    "start",
    "innermost",
    "function",
    "resolve",
    "first",
    "whatever",
    "value",
    "returned",
    "use",
    "argument",
    "next",
    "outermost",
    "function",
    "case",
    "would",
    "float",
    "resolve",
    "move",
    "absolute",
    "value",
    "round",
    "print",
    "another",
    "way",
    "writing",
    "code",
    "takes",
    "less",
    "lines",
    "extreme",
    "example",
    "probably",
    "wo",
    "see",
    "like",
    "four",
    "five",
    "nested",
    "functions",
    "well",
    "everybody",
    "nested",
    "function",
    "calls",
    "would",
    "like",
    "copy",
    "code",
    "post",
    "comment",
    "section",
    "yeah",
    "nested",
    "function",
    "calls",
    "python",
    "hey",
    "going",
    "people",
    "bro",
    "hope",
    "well",
    "video",
    "going",
    "show",
    "variable",
    "scope",
    "works",
    "python",
    "sit",
    "back",
    "relax",
    "enjoy",
    "show",
    "right",
    "let",
    "thing",
    "people",
    "let",
    "discuss",
    "scope",
    "variable",
    "scope",
    "variable",
    "region",
    "variable",
    "recognized",
    "variable",
    "available",
    "inside",
    "region",
    "created",
    "let",
    "say",
    "function",
    "gave",
    "function",
    "name",
    "display",
    "name",
    "created",
    "variable",
    "inside",
    "function",
    "named",
    "name",
    "assign",
    "value",
    "whatever",
    "name",
    "preferably",
    "last",
    "name",
    "example",
    "print",
    "whatever",
    "name",
    "variable",
    "known",
    "local",
    "scope",
    "declared",
    "inside",
    "function",
    "variable",
    "recognized",
    "inside",
    "region",
    "created",
    "variable",
    "name",
    "since",
    "created",
    "inside",
    "function",
    "known",
    "local",
    "variable",
    "local",
    "scope",
    "available",
    "inside",
    "function",
    "created",
    "let",
    "attempt",
    "access",
    "variable",
    "outside",
    "function",
    "going",
    "print",
    "name",
    "variable",
    "issue",
    "though",
    "name",
    "name",
    "defined",
    "local",
    "variables",
    "declared",
    "inside",
    "function",
    "local",
    "scope",
    "available",
    "inside",
    "function",
    "created",
    "hand",
    "global",
    "variable",
    "variable",
    "declared",
    "outside",
    "function",
    "within",
    "module",
    "working",
    "global",
    "variable",
    "known",
    "global",
    "scope",
    "available",
    "inside",
    "outside",
    "functions",
    "print",
    "name",
    "variable",
    "going",
    "print",
    "bro",
    "whatever",
    "first",
    "name",
    "entirely",
    "possible",
    "global",
    "local",
    "version",
    "named",
    "variable",
    "global",
    "version",
    "name",
    "well",
    "local",
    "version",
    "name",
    "print",
    "name",
    "variable",
    "outside",
    "function",
    "going",
    "print",
    "global",
    "version",
    "however",
    "print",
    "version",
    "name",
    "inside",
    "function",
    "created",
    "going",
    "first",
    "use",
    "local",
    "version",
    "global",
    "version",
    "name",
    "let",
    "try",
    "going",
    "call",
    "display",
    "name",
    "function",
    "print",
    "last",
    "name",
    "code",
    "first",
    "name",
    "bro",
    "possible",
    "global",
    "local",
    "version",
    "named",
    "variable",
    "remove",
    "line",
    "declare",
    "local",
    "version",
    "name",
    "well",
    "next",
    "best",
    "available",
    "name",
    "us",
    "would",
    "global",
    "version",
    "name",
    "use",
    "variable",
    "inside",
    "function",
    "first",
    "use",
    "local",
    "version",
    "variable",
    "available",
    "use",
    "global",
    "version",
    "instead",
    "python",
    "follow",
    "rule",
    "known",
    "legb",
    "rule",
    "use",
    "local",
    "variables",
    "first",
    "enclosed",
    "variables",
    "global",
    "variables",
    "order",
    "main",
    "difference",
    "local",
    "scope",
    "global",
    "scope",
    "scope",
    "variable",
    "region",
    "available",
    "limited",
    "region",
    "created",
    "local",
    "scope",
    "available",
    "inside",
    "function",
    "variable",
    "created",
    "global",
    "scoped",
    "variable",
    "variable",
    "available",
    "inside",
    "outside",
    "functions",
    "within",
    "module",
    "working",
    "variable",
    "scope",
    "python",
    "would",
    "like",
    "copy",
    "code",
    "post",
    "code",
    "comment",
    "section",
    "well",
    "yeah",
    "variable",
    "scope",
    "works",
    "python",
    "hey",
    "going",
    "everybody",
    "bro",
    "hope",
    "well",
    "video",
    "going",
    "explain",
    "arcs",
    "parameter",
    "python",
    "sit",
    "back",
    "relax",
    "enjoy",
    "show",
    "right",
    "guys",
    "gals",
    "let",
    "talk",
    "args",
    "args",
    "parameter",
    "pack",
    "arguments",
    "tuple",
    "useful",
    "function",
    "accept",
    "varying",
    "amount",
    "arguments",
    "example",
    "would",
    "useful",
    "let",
    "say",
    "function",
    "called",
    "add",
    "accept",
    "two",
    "numbers",
    "arguments",
    "add",
    "together",
    "return",
    "sum",
    "works",
    "intended",
    "right",
    "long",
    "pass",
    "two",
    "numbers",
    "need",
    "pass",
    "three",
    "numbers",
    "arguments",
    "well",
    "longer",
    "use",
    "add",
    "function",
    "two",
    "parameters",
    "set",
    "passing",
    "three",
    "arguments",
    "see",
    "within",
    "console",
    "window",
    "type",
    "error",
    "add",
    "takes",
    "two",
    "positional",
    "arguments",
    "three",
    "given",
    "one",
    "way",
    "solve",
    "issue",
    "use",
    "args",
    "parameter",
    "going",
    "replace",
    "parameters",
    "asterisk",
    "args",
    "actually",
    "args",
    "portion",
    "important",
    "asterisk",
    "args",
    "short",
    "arguments",
    "really",
    "name",
    "whatever",
    "want",
    "sure",
    "asterisk",
    "asterisk",
    "form",
    "packing",
    "passing",
    "arguments",
    "packing",
    "tuple",
    "let",
    "rewrite",
    "program",
    "let",
    "say",
    "maybe",
    "sum",
    "equals",
    "zero",
    "need",
    "iterate",
    "items",
    "within",
    "tuple",
    "tuples",
    "iterable",
    "let",
    "say",
    "args",
    "say",
    "sum",
    "plus",
    "equals",
    "whatever",
    "end",
    "escape",
    "loop",
    "return",
    "sum",
    "let",
    "try",
    "see",
    "works",
    "well",
    "would",
    "look",
    "works",
    "let",
    "pass",
    "arguments",
    "good",
    "measure",
    "let",
    "pass",
    "six",
    "arguments",
    "time",
    "right",
    "look",
    "fact",
    "work",
    "actually",
    "name",
    "whatever",
    "want",
    "important",
    "thing",
    "asterisk",
    "let",
    "rename",
    "know",
    "stuff",
    "let",
    "try",
    "yep",
    "still",
    "works",
    "tuples",
    "ordered",
    "unchangeable",
    "let",
    "attempt",
    "edit",
    "one",
    "values",
    "let",
    "say",
    "stuff",
    "index",
    "zero",
    "equal",
    "zero",
    "let",
    "try",
    "change",
    "see",
    "tuple",
    "object",
    "support",
    "item",
    "assignment",
    "need",
    "change",
    "one",
    "values",
    "within",
    "tuple",
    "pack",
    "arguments",
    "might",
    "need",
    "convert",
    "different",
    "collection",
    "one",
    "way",
    "cast",
    "let",
    "say",
    "stuff",
    "equals",
    "cast",
    "tuple",
    "list",
    "list",
    "changeable",
    "mutable",
    "let",
    "attempt",
    "cast",
    "tuple",
    "list",
    "edit",
    "one",
    "values",
    "add",
    "values",
    "together",
    "change",
    "one",
    "values",
    "say",
    "name",
    "collection",
    "stuff",
    "case",
    "let",
    "say",
    "index",
    "zero",
    "equals",
    "zero",
    "add",
    "items",
    "together",
    "equal",
    "go",
    "yeah",
    "basically",
    "args",
    "parameter",
    "name",
    "important",
    "asterisk",
    "really",
    "name",
    "whatever",
    "want",
    "common",
    "convention",
    "name",
    "args",
    "parameter",
    "pack",
    "arguments",
    "tuple",
    "useful",
    "function",
    "accept",
    "varying",
    "amount",
    "arguments",
    "well",
    "args",
    "would",
    "like",
    "copy",
    "code",
    "post",
    "comments",
    "section",
    "yeah",
    "args",
    "parameter",
    "works",
    "python",
    "hey",
    "going",
    "everybody",
    "bro",
    "hope",
    "well",
    "video",
    "going",
    "explaining",
    "quarks",
    "python",
    "sit",
    "back",
    "relax",
    "enjoy",
    "show",
    "right",
    "everybody",
    "let",
    "talk",
    "quarkx",
    "parameter",
    "pack",
    "arguments",
    "dictionary",
    "useful",
    "function",
    "accept",
    "varying",
    "amount",
    "keyword",
    "arguments",
    "identical",
    "args",
    "except",
    "args",
    "args",
    "accept",
    "varying",
    "amount",
    "positional",
    "arguments",
    "pack",
    "tuple",
    "quarks",
    "accept",
    "varying",
    "amount",
    "keyword",
    "arguments",
    "pack",
    "dictionary",
    "example",
    "would",
    "useful",
    "let",
    "say",
    "function",
    "called",
    "hello",
    "accepts",
    "two",
    "keyword",
    "arguments",
    "first",
    "name",
    "last",
    "name",
    "output",
    "hello",
    "first",
    "name",
    "last",
    "name",
    "somebody",
    "two",
    "names",
    "let",
    "say",
    "somebody",
    "middle",
    "name",
    "example",
    "say",
    "middle",
    "name",
    "dude",
    "run",
    "well",
    "hello",
    "function",
    "longer",
    "going",
    "work",
    "see",
    "console",
    "window",
    "type",
    "error",
    "hello",
    "function",
    "got",
    "unexpected",
    "keyword",
    "argument",
    "middle",
    "one",
    "way",
    "solve",
    "use",
    "quark",
    "parameter",
    "accept",
    "varying",
    "amount",
    "keyword",
    "arguments",
    "replace",
    "parameters",
    "two",
    "asterisks",
    "quarks",
    "would",
    "like",
    "output",
    "going",
    "need",
    "change",
    "things",
    "around",
    "order",
    "access",
    "value",
    "within",
    "dictionary",
    "type",
    "name",
    "dictionary",
    "square",
    "brackets",
    "within",
    "quotes",
    "list",
    "key",
    "would",
    "like",
    "access",
    "value",
    "key",
    "first",
    "let",
    "repeat",
    "process",
    "last",
    "name",
    "key",
    "going",
    "last",
    "access",
    "value",
    "key",
    "work",
    "let",
    "take",
    "step",
    "let",
    "say",
    "would",
    "like",
    "display",
    "somebody",
    "full",
    "name",
    "based",
    "amount",
    "keyword",
    "arguments",
    "pass",
    "function",
    "well",
    "different",
    "ways",
    "could",
    "one",
    "easy",
    "way",
    "could",
    "write",
    "program",
    "like",
    "let",
    "print",
    "word",
    "hello",
    "need",
    "iterate",
    "key",
    "value",
    "pair",
    "within",
    "dictionary",
    "use",
    "loop",
    "iterate",
    "key",
    "value",
    "pair",
    "dictionary",
    "type",
    "key",
    "value",
    "name",
    "dictionary",
    "quarks",
    "case",
    "dot",
    "items",
    "print",
    "value",
    "one",
    "thing",
    "need",
    "kind",
    "works",
    "intended",
    "going",
    "print",
    "value",
    "including",
    "word",
    "hello",
    "new",
    "line",
    "standard",
    "print",
    "statement",
    "print",
    "new",
    "line",
    "character",
    "print",
    "statement",
    "hitting",
    "enter",
    "actually",
    "change",
    "string",
    "add",
    "equals",
    "replace",
    "new",
    "line",
    "character",
    "something",
    "else",
    "maybe",
    "space",
    "let",
    "thing",
    "loop",
    "value",
    "comma",
    "end",
    "add",
    "space",
    "print",
    "names",
    "line",
    "hello",
    "bro",
    "dude",
    "code",
    "pass",
    "varying",
    "amount",
    "keyword",
    "arguments",
    "based",
    "long",
    "name",
    "perhaps",
    "like",
    "title",
    "title",
    "equals",
    "mr",
    "print",
    "well",
    "hello",
    "mr",
    "bro",
    "dude",
    "code",
    "fun",
    "fact",
    "day",
    "necessarily",
    "need",
    "name",
    "parameter",
    "quarks",
    "important",
    "thing",
    "double",
    "asterisks",
    "precede",
    "quarks",
    "common",
    "naming",
    "convention",
    "short",
    "keyword",
    "arguments",
    "could",
    "name",
    "something",
    "else",
    "perhaps",
    "something",
    "descriptive",
    "like",
    "names",
    "since",
    "passing",
    "bunch",
    "names",
    "name",
    "dictionary",
    "names",
    "would",
    "work",
    "important",
    "thing",
    "double",
    "asterisks",
    "precede",
    "name",
    "dictionary",
    "quarks",
    "common",
    "naming",
    "convention",
    "well",
    "everybody",
    "quarkx",
    "parameter",
    "pack",
    "varying",
    "amount",
    "keyword",
    "arguments",
    "dictionary",
    "would",
    "like",
    "copy",
    "code",
    "post",
    "comments",
    "section",
    "yeah",
    "quarkx",
    "works",
    "python",
    "hey",
    "going",
    "everybody",
    "bro",
    "hope",
    "well",
    "video",
    "going",
    "teach",
    "guys",
    "format",
    "method",
    "python",
    "sit",
    "back",
    "relax",
    "enjoy",
    "show",
    "okay",
    "ladies",
    "gentlemen",
    "let",
    "begin",
    "format",
    "method",
    "method",
    "available",
    "strings",
    "optional",
    "gives",
    "users",
    "control",
    "displaying",
    "output",
    "best",
    "demonstrate",
    "going",
    "use",
    "line",
    "popular",
    "nursery",
    "rhyme",
    "titled",
    "hey",
    "diddle",
    "diddle",
    "well",
    "know",
    "mature",
    "adult",
    "like",
    "printing",
    "line",
    "console",
    "window",
    "cow",
    "jumped",
    "moon",
    "let",
    "using",
    "standard",
    "print",
    "statement",
    "show",
    "benefits",
    "using",
    "format",
    "method",
    "later",
    "example",
    "two",
    "variables",
    "variable",
    "called",
    "animal",
    "going",
    "store",
    "string",
    "cow",
    "item",
    "storing",
    "item",
    "name",
    "moon",
    "compile",
    "run",
    "would",
    "expect",
    "output",
    "cow",
    "jumped",
    "moon",
    "elegant",
    "way",
    "writing",
    "line",
    "code",
    "using",
    "format",
    "method",
    "available",
    "strings",
    "going",
    "turn",
    "line",
    "comment",
    "instead",
    "going",
    "produce",
    "output",
    "use",
    "format",
    "method",
    "instead",
    "need",
    "standard",
    "print",
    "statement",
    "like",
    "usual",
    "string",
    "would",
    "like",
    "format",
    "going",
    "write",
    "thing",
    "place",
    "variables",
    "going",
    "add",
    "placeholder",
    "instead",
    "variable",
    "name",
    "value",
    "name",
    "going",
    "add",
    "set",
    "curly",
    "braces",
    "functions",
    "placeholder",
    "value",
    "variable",
    "cow",
    "jumped",
    "going",
    "insert",
    "another",
    "placeholder",
    "string",
    "format",
    "string",
    "following",
    "string",
    "dot",
    "format",
    "parenthesis",
    "within",
    "parentheses",
    "format",
    "method",
    "insert",
    "values",
    "variables",
    "let",
    "begin",
    "values",
    "would",
    "like",
    "insert",
    "cow",
    "well",
    "moon",
    "produce",
    "output",
    "written",
    "little",
    "elegantly",
    "also",
    "replace",
    "variables",
    "store",
    "values",
    "going",
    "replace",
    "cow",
    "animal",
    "moon",
    "item",
    "create",
    "output",
    "curly",
    "braces",
    "known",
    "format",
    "fields",
    "function",
    "placeholder",
    "value",
    "variable",
    "work",
    "order",
    "first",
    "format",
    "field",
    "insert",
    "first",
    "value",
    "location",
    "another",
    "set",
    "sets",
    "format",
    "field",
    "insert",
    "next",
    "value",
    "listed",
    "within",
    "format",
    "method",
    "switch",
    "around",
    "switch",
    "position",
    "animal",
    "item",
    "well",
    "first",
    "format",
    "field",
    "going",
    "insert",
    "item",
    "second",
    "format",
    "field",
    "insert",
    "animal",
    "time",
    "moon",
    "jumped",
    "cow",
    "additional",
    "way",
    "inserting",
    "values",
    "given",
    "place",
    "holder",
    "would",
    "use",
    "referred",
    "positional",
    "argument",
    "within",
    "format",
    "fields",
    "list",
    "index",
    "value",
    "would",
    "like",
    "insert",
    "location",
    "need",
    "insert",
    "first",
    "value",
    "well",
    "index",
    "zero",
    "computers",
    "always",
    "start",
    "zero",
    "following",
    "pattern",
    "next",
    "index",
    "would",
    "one",
    "let",
    "say",
    "three",
    "values",
    "need",
    "insert",
    "another",
    "placeholder",
    "would",
    "two",
    "would",
    "follow",
    "pattern",
    "going",
    "visible",
    "change",
    "could",
    "reverse",
    "positional",
    "arguments",
    "placeholders",
    "think",
    "would",
    "happen",
    "switched",
    "one",
    "zero",
    "locations",
    "well",
    "format",
    "field",
    "going",
    "insert",
    "value",
    "found",
    "index",
    "one",
    "first",
    "value",
    "index",
    "zero",
    "second",
    "one",
    "index",
    "one",
    "roles",
    "reversed",
    "time",
    "moon",
    "jumped",
    "cow",
    "last",
    "way",
    "inserting",
    "values",
    "given",
    "format",
    "field",
    "would",
    "use",
    "referred",
    "keyword",
    "argument",
    "within",
    "format",
    "method",
    "going",
    "list",
    "keyword",
    "argument",
    "pairs",
    "need",
    "keyword",
    "name",
    "followed",
    "value",
    "let",
    "say",
    "animal",
    "going",
    "keyword",
    "going",
    "say",
    "equals",
    "value",
    "animal",
    "equals",
    "cow",
    "item",
    "equals",
    "moon",
    "may",
    "noticed",
    "color",
    "text",
    "might",
    "changed",
    "longer",
    "need",
    "variables",
    "actually",
    "um",
    "going",
    "comment",
    "two",
    "print",
    "statements",
    "get",
    "error",
    "keyword",
    "argument",
    "pairs",
    "within",
    "format",
    "field",
    "instead",
    "keeping",
    "empty",
    "using",
    "index",
    "use",
    "keyword",
    "name",
    "first",
    "format",
    "field",
    "going",
    "insert",
    "keyword",
    "animal",
    "second",
    "format",
    "field",
    "would",
    "like",
    "insert",
    "item",
    "keyword",
    "result",
    "going",
    "cow",
    "jumped",
    "moon",
    "let",
    "reverse",
    "place",
    "item",
    "keyword",
    "second",
    "format",
    "field",
    "insert",
    "animal",
    "time",
    "moon",
    "jumped",
    "cow",
    "important",
    "concept",
    "like",
    "bring",
    "attention",
    "values",
    "found",
    "within",
    "format",
    "method",
    "actually",
    "reuse",
    "let",
    "say",
    "would",
    "like",
    "state",
    "animal",
    "jumped",
    "animal",
    "going",
    "use",
    "animal",
    "keyword",
    "twice",
    "output",
    "going",
    "cow",
    "jumped",
    "cow",
    "thing",
    "positional",
    "arguments",
    "reuse",
    "index",
    "time",
    "let",
    "say",
    "moon",
    "jumped",
    "moon",
    "item",
    "index",
    "one",
    "within",
    "first",
    "format",
    "field",
    "state",
    "index",
    "one",
    "second",
    "format",
    "field",
    "also",
    "one",
    "output",
    "going",
    "moon",
    "jumped",
    "moon",
    "right",
    "let",
    "take",
    "things",
    "level",
    "even",
    "elegant",
    "way",
    "could",
    "write",
    "store",
    "string",
    "would",
    "like",
    "format",
    "within",
    "variable",
    "let",
    "turn",
    "line",
    "comment",
    "let",
    "create",
    "variable",
    "called",
    "text",
    "text",
    "equals",
    "string",
    "would",
    "like",
    "format",
    "format",
    "field",
    "jumped",
    "format",
    "field",
    "need",
    "format",
    "variable",
    "call",
    "format",
    "method",
    "within",
    "print",
    "statement",
    "let",
    "say",
    "text",
    "dot",
    "use",
    "format",
    "method",
    "pass",
    "values",
    "would",
    "like",
    "insert",
    "placeholders",
    "going",
    "insert",
    "animal",
    "well",
    "item",
    "result",
    "would",
    "imagine",
    "cow",
    "jumped",
    "moon",
    "next",
    "section",
    "going",
    "explain",
    "add",
    "padding",
    "string",
    "display",
    "using",
    "format",
    "method",
    "let",
    "say",
    "name",
    "variable",
    "assign",
    "value",
    "whatever",
    "name",
    "would",
    "like",
    "display",
    "name",
    "along",
    "custom",
    "message",
    "let",
    "say",
    "hello",
    "name",
    "use",
    "format",
    "field",
    "let",
    "follow",
    "string",
    "using",
    "format",
    "method",
    "would",
    "like",
    "insert",
    "name",
    "location",
    "currently",
    "display",
    "hello",
    "name",
    "bro",
    "whatever",
    "else",
    "name",
    "add",
    "padding",
    "either",
    "name",
    "add",
    "padding",
    "left",
    "right",
    "hand",
    "side",
    "value",
    "begin",
    "let",
    "add",
    "padding",
    "right",
    "hand",
    "side",
    "name",
    "within",
    "format",
    "field",
    "need",
    "add",
    "padding",
    "within",
    "format",
    "field",
    "add",
    "colon",
    "amount",
    "space",
    "would",
    "like",
    "allocate",
    "displaying",
    "value",
    "let",
    "say",
    "10",
    "going",
    "allocate",
    "10",
    "spaces",
    "worth",
    "room",
    "display",
    "name",
    "ca",
    "really",
    "see",
    "right",
    "let",
    "take",
    "look",
    "ca",
    "move",
    "cursor",
    "past",
    "line",
    "end",
    "name",
    "second",
    "line",
    "room",
    "work",
    "change",
    "string",
    "let",
    "say",
    "nice",
    "meet",
    "well",
    "padding",
    "going",
    "evident",
    "add",
    "number",
    "preceding",
    "colon",
    "add",
    "padding",
    "value",
    "left",
    "align",
    "right",
    "align",
    "center",
    "align",
    "copy",
    "line",
    "need",
    "left",
    "align",
    "use",
    "less",
    "sign",
    "going",
    "visible",
    "change",
    "already",
    "default",
    "need",
    "write",
    "line",
    "precede",
    "number",
    "greater",
    "sign",
    "value",
    "going",
    "right",
    "aligned",
    "need",
    "center",
    "value",
    "use",
    "carrot",
    "center",
    "align",
    "value",
    "within",
    "padding",
    "allotted",
    "one",
    "question",
    "might",
    "try",
    "answer",
    "relevant",
    "need",
    "add",
    "positional",
    "argument",
    "keyword",
    "argument",
    "format",
    "field",
    "already",
    "text",
    "within",
    "would",
    "colon",
    "would",
    "precede",
    "colon",
    "either",
    "positional",
    "argument",
    "keyword",
    "argument",
    "followed",
    "colon",
    "whatever",
    "want",
    "add",
    "afterwards",
    "format",
    "value",
    "alright",
    "ladies",
    "gentlemen",
    "near",
    "end",
    "promise",
    "last",
    "section",
    "format",
    "numbers",
    "let",
    "say",
    "number",
    "variable",
    "equal",
    "first",
    "digits",
    "pi",
    "let",
    "pretend",
    "would",
    "like",
    "display",
    "first",
    "two",
    "digits",
    "decimal",
    "using",
    "format",
    "method",
    "let",
    "print",
    "number",
    "pi",
    "use",
    "format",
    "field",
    "call",
    "format",
    "method",
    "insert",
    "number",
    "need",
    "display",
    "first",
    "two",
    "digits",
    "decimal",
    "within",
    "format",
    "field",
    "add",
    "colon",
    "dot",
    "f",
    "f",
    "floating",
    "point",
    "numbers",
    "anything",
    "decimal",
    "portion",
    "result",
    "display",
    "first",
    "two",
    "digits",
    "decimal",
    "placed",
    "two",
    "within",
    "format",
    "field",
    "three",
    "point",
    "three",
    "f",
    "would",
    "display",
    "three",
    "digits",
    "decimal",
    "portion",
    "oh",
    "apparently",
    "round",
    "number",
    "something",
    "keep",
    "mind",
    "time",
    "let",
    "change",
    "number",
    "something",
    "larger",
    "like",
    "1000",
    "copy",
    "line",
    "make",
    "changes",
    "let",
    "say",
    "number",
    "would",
    "like",
    "add",
    "comma",
    "thousands",
    "place",
    "colon",
    "within",
    "format",
    "field",
    "add",
    "comma",
    "automatically",
    "add",
    "comma",
    "1000s",
    "places",
    "another",
    "cool",
    "thing",
    "display",
    "number",
    "binary",
    "within",
    "format",
    "field",
    "add",
    "colon",
    "b",
    "display",
    "binary",
    "representation",
    "number",
    "thing",
    "octal",
    "adding",
    "colon",
    "number",
    "displayed",
    "octal",
    "number",
    "thing",
    "hexadecimal",
    "lowercase",
    "x",
    "lowercase",
    "uppercase",
    "x",
    "uppercase",
    "number",
    "1000",
    "hexadecimal",
    "lastly",
    "display",
    "number",
    "scientific",
    "notation",
    "using",
    "either",
    "lowercase",
    "e",
    "lowercase",
    "capital",
    "e",
    "uppercase",
    "mynumber",
    "1000",
    "scientific",
    "notation",
    "right",
    "everybody",
    "things",
    "format",
    "method",
    "optional",
    "method",
    "gives",
    "users",
    "control",
    "displaying",
    "output",
    "would",
    "like",
    "copy",
    "code",
    "written",
    "today",
    "post",
    "everything",
    "comments",
    "afraid",
    "smash",
    "like",
    "button",
    "drop",
    "comment",
    "subscribe",
    "like",
    "become",
    "fellow",
    "bro",
    "hey",
    "going",
    "everybody",
    "bro",
    "hope",
    "well",
    "video",
    "going",
    "explain",
    "useful",
    "methods",
    "random",
    "module",
    "sit",
    "back",
    "relax",
    "enjoy",
    "show",
    "okay",
    "people",
    "video",
    "going",
    "explain",
    "generate",
    "random",
    "numbers",
    "well",
    "useful",
    "methods",
    "random",
    "module",
    "going",
    "creating",
    "true",
    "random",
    "numbers",
    "something",
    "called",
    "pseudorandom",
    "numbers",
    "fairly",
    "darn",
    "close",
    "first",
    "step",
    "import",
    "random",
    "module",
    "top",
    "import",
    "random",
    "access",
    "everything",
    "random",
    "module",
    "offer",
    "let",
    "begin",
    "generating",
    "random",
    "number",
    "one",
    "six",
    "like",
    "rolling",
    "dice",
    "going",
    "say",
    "x",
    "equals",
    "random",
    "dot",
    "rand",
    "generate",
    "random",
    "integer",
    "certain",
    "range",
    "want",
    "one",
    "six",
    "state",
    "one",
    "comma",
    "six",
    "generate",
    "random",
    "number",
    "one",
    "six",
    "like",
    "rolling",
    "dice",
    "print",
    "value",
    "x",
    "get",
    "random",
    "number",
    "one",
    "six",
    "example",
    "got",
    "one",
    "two",
    "three",
    "six",
    "right",
    "also",
    "generate",
    "random",
    "floating",
    "point",
    "number",
    "two",
    "let",
    "say",
    "equals",
    "random",
    "dot",
    "random",
    "give",
    "us",
    "random",
    "number",
    "0",
    "time",
    "going",
    "print",
    "change",
    "also",
    "generate",
    "random",
    "choice",
    "list",
    "collection",
    "let",
    "say",
    "playing",
    "game",
    "rock",
    "paper",
    "scissors",
    "let",
    "create",
    "list",
    "call",
    "list",
    "equals",
    "square",
    "brackets",
    "three",
    "choices",
    "rock",
    "paper",
    "scissors",
    "let",
    "say",
    "z",
    "random",
    "string",
    "generate",
    "z",
    "equals",
    "random",
    "dot",
    "choice",
    "pass",
    "list",
    "let",
    "print",
    "z",
    "generate",
    "random",
    "choice",
    "list",
    "called",
    "list",
    "got",
    "scissors",
    "paper",
    "rock",
    "also",
    "use",
    "shuffle",
    "method",
    "random",
    "module",
    "shuffle",
    "list",
    "collection",
    "let",
    "say",
    "working",
    "deck",
    "cards",
    "cards",
    "equals",
    "let",
    "say",
    "one",
    "nine",
    "jack",
    "queen",
    "king",
    "ace",
    "wo",
    "full",
    "deck",
    "cards",
    "one",
    "suit",
    "actually",
    "shuffle",
    "list",
    "using",
    "shuffle",
    "method",
    "random",
    "dot",
    "shuffle",
    "want",
    "shuffle",
    "want",
    "shuffle",
    "cards",
    "display",
    "cards",
    "print",
    "statement",
    "shuffle",
    "method",
    "shuffle",
    "list",
    "collection",
    "well",
    "everybody",
    "useful",
    "methods",
    "random",
    "module",
    "would",
    "like",
    "copy",
    "code",
    "post",
    "comments",
    "afraid",
    "smash",
    "like",
    "button",
    "drop",
    "comment",
    "subscribe",
    "like",
    "become",
    "fellow",
    "bro",
    "hey",
    "going",
    "everybody",
    "bro",
    "hope",
    "well",
    "video",
    "going",
    "explain",
    "exception",
    "handling",
    "python",
    "sit",
    "back",
    "relax",
    "enjoy",
    "show",
    "well",
    "everyone",
    "let",
    "talk",
    "exceptions",
    "exception",
    "event",
    "detected",
    "execution",
    "interrupts",
    "normal",
    "flow",
    "program",
    "program",
    "written",
    "intentionally",
    "going",
    "cause",
    "exception",
    "program",
    "written",
    "accept",
    "numerator",
    "denominator",
    "user",
    "divide",
    "numerator",
    "denominator",
    "get",
    "result",
    "print",
    "result",
    "divide",
    "number",
    "5",
    "divided",
    "0",
    "mathematically",
    "well",
    "cause",
    "exception",
    "event",
    "detected",
    "execution",
    "interrupts",
    "flow",
    "program",
    "program",
    "interrupted",
    "within",
    "console",
    "window",
    "traceback",
    "message",
    "states",
    "went",
    "wrong",
    "name",
    "exception",
    "occurred",
    "specific",
    "exception",
    "occurred",
    "zero",
    "division",
    "error",
    "video",
    "handling",
    "exceptions",
    "interrupt",
    "normal",
    "flow",
    "program",
    "basic",
    "form",
    "exception",
    "handling",
    "surround",
    "code",
    "considered",
    "dangerous",
    "might",
    "cause",
    "exception",
    "within",
    "try",
    "block",
    "anytime",
    "accept",
    "user",
    "input",
    "would",
    "good",
    "indicator",
    "code",
    "considered",
    "dangerous",
    "know",
    "user",
    "going",
    "type",
    "try",
    "code",
    "exception",
    "occurs",
    "catch",
    "handle",
    "add",
    "accept",
    "block",
    "accept",
    "catch",
    "exception",
    "normally",
    "block",
    "considered",
    "good",
    "practice",
    "explain",
    "later",
    "accept",
    "exception",
    "block",
    "catch",
    "sorts",
    "different",
    "exceptions",
    "prevent",
    "program",
    "interrupted",
    "something",
    "else",
    "entirely",
    "print",
    "message",
    "something",
    "went",
    "wrong",
    "let",
    "try",
    "divide",
    "five",
    "zero",
    "longer",
    "traceback",
    "message",
    "within",
    "console",
    "window",
    "caught",
    "exception",
    "something",
    "else",
    "printed",
    "something",
    "went",
    "wrong",
    "like",
    "said",
    "considered",
    "good",
    "practice",
    "single",
    "accept",
    "block",
    "handle",
    "exceptions",
    "much",
    "better",
    "first",
    "handle",
    "specific",
    "exceptions",
    "occur",
    "writing",
    "additional",
    "accept",
    "blocks",
    "let",
    "create",
    "additional",
    "accept",
    "block",
    "catch",
    "zero",
    "division",
    "error",
    "exceptions",
    "occurs",
    "somebody",
    "attempts",
    "divide",
    "zero",
    "exception",
    "occurs",
    "want",
    "handle",
    "let",
    "print",
    "message",
    "let",
    "print",
    "ca",
    "divide",
    "zero",
    "idiot",
    "let",
    "try",
    "five",
    "divided",
    "zero",
    "ca",
    "divide",
    "zero",
    "idiot",
    "another",
    "one",
    "going",
    "turn",
    "accept",
    "block",
    "comment",
    "take",
    "look",
    "something",
    "divide",
    "something",
    "number",
    "like",
    "take",
    "5",
    "divide",
    "word",
    "pizza",
    "well",
    "pizza",
    "number",
    "ran",
    "value",
    "error",
    "exception",
    "probably",
    "handle",
    "let",
    "create",
    "another",
    "accept",
    "block",
    "handle",
    "accept",
    "value",
    "error",
    "want",
    "handle",
    "let",
    "print",
    "something",
    "enter",
    "numbers",
    "please",
    "okay",
    "let",
    "try",
    "see",
    "exception",
    "caught",
    "five",
    "divided",
    "word",
    "pizza",
    "enter",
    "numbers",
    "please",
    "also",
    "add",
    "accept",
    "exception",
    "block",
    "end",
    "case",
    "something",
    "wo",
    "anticipate",
    "always",
    "considered",
    "good",
    "practice",
    "first",
    "catch",
    "specific",
    "exceptions",
    "let",
    "user",
    "know",
    "exactly",
    "went",
    "wrong",
    "additional",
    "way",
    "handle",
    "exceptions",
    "could",
    "display",
    "exception",
    "occurs",
    "although",
    "completely",
    "optional",
    "accept",
    "block",
    "definitions",
    "let",
    "add",
    "e",
    "calling",
    "exception",
    "e",
    "standard",
    "practice",
    "although",
    "necessary",
    "let",
    "except",
    "blocks",
    "print",
    "whatever",
    "e",
    "let",
    "add",
    "blocks",
    "look",
    "something",
    "like",
    "encounter",
    "exception",
    "display",
    "exception",
    "occurred",
    "well",
    "let",
    "divide",
    "five",
    "pizza",
    "invalid",
    "literal",
    "int",
    "base",
    "10",
    "pizza",
    "enter",
    "numbers",
    "please",
    "like",
    "said",
    "additional",
    "way",
    "could",
    "handle",
    "exception",
    "although",
    "entirely",
    "optional",
    "another",
    "thing",
    "add",
    "else",
    "statement",
    "end",
    "accept",
    "blocks",
    "happening",
    "going",
    "try",
    "code",
    "exception",
    "happens",
    "catch",
    "handle",
    "something",
    "else",
    "print",
    "result",
    "exceptions",
    "occur",
    "exceptions",
    "execute",
    "else",
    "statement",
    "wo",
    "let",
    "divide",
    "five",
    "actual",
    "number",
    "time",
    "like",
    "two",
    "exceptions",
    "occurred",
    "executed",
    "else",
    "statement",
    "whatever",
    "code",
    "within",
    "else",
    "block",
    "printed",
    "result",
    "exception",
    "occur",
    "like",
    "divide",
    "5",
    "0",
    "catch",
    "exception",
    "handle",
    "execute",
    "whatever",
    "block",
    "code",
    "within",
    "else",
    "statement",
    "one",
    "clause",
    "aware",
    "final",
    "clause",
    "always",
    "end",
    "works",
    "whether",
    "catch",
    "exception",
    "always",
    "execute",
    "code",
    "within",
    "block",
    "code",
    "final",
    "clause",
    "good",
    "opportunity",
    "open",
    "files",
    "close",
    "within",
    "finally",
    "block",
    "dealt",
    "opening",
    "files",
    "yet",
    "wo",
    "print",
    "something",
    "print",
    "always",
    "execute",
    "whether",
    "encounter",
    "exception",
    "finally",
    "block",
    "always",
    "execute",
    "end",
    "let",
    "try",
    "time",
    "let",
    "cause",
    "exception",
    "let",
    "divide",
    "five",
    "zero",
    "ca",
    "divide",
    "zero",
    "always",
    "execute",
    "time",
    "let",
    "take",
    "seriously",
    "divide",
    "five",
    "another",
    "number",
    "three",
    "give",
    "us",
    "result",
    "like",
    "said",
    "finally",
    "clause",
    "code",
    "within",
    "finally",
    "clause",
    "always",
    "execute",
    "wo",
    "really",
    "working",
    "get",
    "section",
    "file",
    "handling",
    "well",
    "everybody",
    "exceptions",
    "python",
    "events",
    "detected",
    "execution",
    "interrupt",
    "flow",
    "program",
    "handle",
    "exceptions",
    "using",
    "try",
    "accept",
    "blocks",
    "would",
    "like",
    "copy",
    "code",
    "post",
    "comments",
    "yeah",
    "exceptions",
    "work",
    "python",
    "hey",
    "going",
    "everybody",
    "bro",
    "hope",
    "well",
    "video",
    "going",
    "covering",
    "basic",
    "file",
    "detection",
    "using",
    "python",
    "sit",
    "back",
    "relax",
    "enjoy",
    "show",
    "welcome",
    "ladies",
    "gentlemen",
    "beginning",
    "mini",
    "series",
    "involving",
    "stuff",
    "files",
    "using",
    "python",
    "video",
    "going",
    "basic",
    "file",
    "detection",
    "order",
    "recommend",
    "importing",
    "os",
    "module",
    "already",
    "included",
    "standard",
    "python",
    "library",
    "need",
    "import",
    "checking",
    "see",
    "file",
    "exists",
    "someplace",
    "computer",
    "probably",
    "need",
    "file",
    "work",
    "going",
    "go",
    "desktop",
    "convenience",
    "create",
    "new",
    "text",
    "document",
    "call",
    "probably",
    "need",
    "file",
    "location",
    "going",
    "copy",
    "use",
    "let",
    "create",
    "variable",
    "called",
    "path",
    "include",
    "path",
    "file",
    "would",
    "like",
    "detect",
    "backslashes",
    "file",
    "path",
    "probably",
    "need",
    "double",
    "backslashes",
    "escape",
    "sequence",
    "backslash",
    "within",
    "string",
    "variable",
    "path",
    "work",
    "would",
    "like",
    "check",
    "see",
    "location",
    "exists",
    "computer",
    "os",
    "dot",
    "path",
    "dot",
    "exists",
    "see",
    "pass",
    "path",
    "argument",
    "pass",
    "path",
    "returns",
    "true",
    "location",
    "exists",
    "print",
    "location",
    "exists",
    "tell",
    "file",
    "covering",
    "later",
    "else",
    "let",
    "print",
    "location",
    "exist",
    "right",
    "location",
    "exists",
    "return",
    "true",
    "execute",
    "else",
    "statement",
    "location",
    "exists",
    "delete",
    "file",
    "run",
    "program",
    "location",
    "exist",
    "wo",
    "tell",
    "location",
    "dealing",
    "file",
    "separate",
    "function",
    "os",
    "dot",
    "path",
    "dot",
    "file",
    "pass",
    "path",
    "print",
    "file",
    "right",
    "let",
    "create",
    "another",
    "file",
    "deleted",
    "previous",
    "one",
    "location",
    "let",
    "run",
    "location",
    "exists",
    "file",
    "folder",
    "going",
    "create",
    "new",
    "folder",
    "call",
    "folder",
    "delete",
    "test",
    "document",
    "let",
    "change",
    "location",
    "folder",
    "location",
    "exists",
    "file",
    "check",
    "see",
    "location",
    "directory",
    "let",
    "write",
    "else",
    "statement",
    "os",
    "dot",
    "path",
    "dot",
    "directory",
    "pass",
    "path",
    "let",
    "print",
    "directory",
    "right",
    "folder",
    "going",
    "check",
    "see",
    "location",
    "exists",
    "file",
    "directory",
    "location",
    "exists",
    "directory",
    "well",
    "everyone",
    "basics",
    "file",
    "detection",
    "building",
    "upon",
    "concept",
    "future",
    "videos",
    "would",
    "like",
    "copy",
    "code",
    "post",
    "comment",
    "section",
    "yeah",
    "basics",
    "simple",
    "file",
    "detection",
    "using",
    "python",
    "hey",
    "going",
    "everybody",
    "bro",
    "hope",
    "well",
    "video",
    "going",
    "reading",
    "file",
    "python",
    "sit",
    "back",
    "relax",
    "enjoy",
    "show",
    "welcome",
    "back",
    "guys",
    "gals",
    "video",
    "going",
    "explain",
    "read",
    "contents",
    "file",
    "using",
    "python",
    "probably",
    "need",
    "sort",
    "file",
    "work",
    "created",
    "plain",
    "text",
    "file",
    "called",
    "plain",
    "text",
    "file",
    "says",
    "omg",
    "read",
    "nice",
    "day",
    "like",
    "comment",
    "subscribe",
    "would",
    "like",
    "read",
    "contents",
    "file",
    "line",
    "line",
    "print",
    "console",
    "window",
    "honestly",
    "need",
    "two",
    "lines",
    "code",
    "type",
    "open",
    "within",
    "open",
    "function",
    "list",
    "name",
    "file",
    "file",
    "path",
    "file",
    "mine",
    "within",
    "project",
    "folder",
    "need",
    "list",
    "file",
    "name",
    "someplace",
    "else",
    "probably",
    "need",
    "file",
    "path",
    "let",
    "say",
    "desktop",
    "well",
    "probably",
    "need",
    "list",
    "file",
    "path",
    "file",
    "located",
    "need",
    "use",
    "double",
    "backslashes",
    "escape",
    "sequence",
    "backslash",
    "since",
    "file",
    "within",
    "project",
    "folder",
    "need",
    "list",
    "file",
    "name",
    "open",
    "name",
    "file",
    "file",
    "path",
    "file",
    "going",
    "print",
    "file",
    "dot",
    "read",
    "let",
    "test",
    "works",
    "omg",
    "read",
    "nice",
    "day",
    "like",
    "comment",
    "subscribe",
    "actually",
    "close",
    "files",
    "automatically",
    "opening",
    "kind",
    "convenient",
    "let",
    "test",
    "theory",
    "going",
    "print",
    "file",
    "dot",
    "closed",
    "file",
    "fact",
    "closed",
    "print",
    "true",
    "still",
    "open",
    "print",
    "false",
    "normally",
    "read",
    "file",
    "normally",
    "open",
    "need",
    "close",
    "manually",
    "write",
    "program",
    "way",
    "open",
    "close",
    "file",
    "automatically",
    "using",
    "open",
    "close",
    "files",
    "automatically",
    "opened",
    "however",
    "catch",
    "handle",
    "exceptions",
    "might",
    "occur",
    "like",
    "locate",
    "file",
    "let",
    "say",
    "mistyped",
    "extension",
    "file",
    "let",
    "say",
    "type",
    "kind",
    "funny",
    "tx",
    "abbreviation",
    "texas",
    "texas",
    "file",
    "cause",
    "file",
    "found",
    "error",
    "interrupt",
    "flow",
    "program",
    "would",
    "probably",
    "like",
    "prevent",
    "could",
    "write",
    "try",
    "accept",
    "block",
    "try",
    "code",
    "find",
    "file",
    "handle",
    "exception",
    "file",
    "found",
    "error",
    "place",
    "code",
    "within",
    "try",
    "block",
    "exception",
    "happens",
    "catch",
    "exception",
    "except",
    "would",
    "like",
    "catch",
    "file",
    "found",
    "air",
    "exceptions",
    "let",
    "handle",
    "printing",
    "file",
    "found",
    "run",
    "catch",
    "handle",
    "exception",
    "interrupt",
    "normal",
    "flow",
    "program",
    "well",
    "everybody",
    "open",
    "read",
    "file",
    "python",
    "like",
    "copy",
    "code",
    "post",
    "comment",
    "section",
    "yeah",
    "open",
    "read",
    "file",
    "using",
    "python",
    "hey",
    "going",
    "everybody",
    "bro",
    "hope",
    "well",
    "video",
    "going",
    "writing",
    "files",
    "python",
    "sit",
    "back",
    "relax",
    "enjoy",
    "show",
    "begin",
    "kind",
    "similar",
    "last",
    "video",
    "reading",
    "files",
    "open",
    "within",
    "open",
    "function",
    "list",
    "file",
    "name",
    "file",
    "path",
    "want",
    "call",
    "file",
    "call",
    "file",
    "test",
    "dot",
    "txt",
    "normally",
    "open",
    "function",
    "mode",
    "actually",
    "change",
    "second",
    "argument",
    "pass",
    "default",
    "r",
    "read",
    "want",
    "write",
    "file",
    "would",
    "w",
    "going",
    "write",
    "file",
    "called",
    "finish",
    "open",
    "file",
    "going",
    "file",
    "dot",
    "write",
    "within",
    "write",
    "function",
    "write",
    "text",
    "let",
    "create",
    "text",
    "variable",
    "add",
    "string",
    "let",
    "say",
    "text",
    "equals",
    "yo",
    "need",
    "go",
    "new",
    "line",
    "sure",
    "use",
    "new",
    "line",
    "character",
    "new",
    "line",
    "character",
    "text",
    "comes",
    "going",
    "next",
    "line",
    "hitting",
    "enter",
    "yo",
    "text",
    "good",
    "one",
    "right",
    "run",
    "program",
    "file",
    "text",
    "file",
    "within",
    "project",
    "folder",
    "appears",
    "right",
    "says",
    "yo",
    "text",
    "good",
    "one",
    "write",
    "mode",
    "text",
    "something",
    "else",
    "actually",
    "overwrite",
    "current",
    "file",
    "change",
    "uh",
    "oh",
    "text",
    "written",
    "well",
    "overwrite",
    "text",
    "uh",
    "oh",
    "text",
    "overwritten",
    "actually",
    "append",
    "file",
    "changing",
    "mode",
    "append",
    "let",
    "change",
    "back",
    "rewrite",
    "save",
    "current",
    "file",
    "append",
    "text",
    "let",
    "add",
    "maybe",
    "new",
    "line",
    "uh",
    "nice",
    "day",
    "see",
    "ya",
    "would",
    "like",
    "append",
    "text",
    "file",
    "going",
    "change",
    "mode",
    "append",
    "append",
    "text",
    "onto",
    "end",
    "file",
    "well",
    "everybody",
    "write",
    "file",
    "append",
    "file",
    "would",
    "like",
    "copy",
    "code",
    "post",
    "comment",
    "section",
    "yeah",
    "write",
    "append",
    "file",
    "python",
    "hey",
    "going",
    "everybody",
    "bro",
    "hope",
    "well",
    "video",
    "going",
    "copying",
    "files",
    "python",
    "sit",
    "back",
    "relax",
    "enjoy",
    "show",
    "welcome",
    "back",
    "another",
    "video",
    "regarding",
    "stuff",
    "files",
    "using",
    "python",
    "video",
    "going",
    "copying",
    "files",
    "order",
    "recommend",
    "importing",
    "shuttle",
    "module",
    "ways",
    "tend",
    "like",
    "using",
    "shuttle",
    "module",
    "module",
    "three",
    "basic",
    "functions",
    "copy",
    "file",
    "starting",
    "top",
    "copy",
    "file",
    "copy",
    "copy",
    "copy",
    "file",
    "working",
    "copy",
    "contents",
    "file",
    "copy",
    "everything",
    "copy",
    "file",
    "plus",
    "copy",
    "permissions",
    "mode",
    "destination",
    "directory",
    "lastly",
    "copy",
    "2",
    "everything",
    "copy",
    "plus",
    "copies",
    "metadata",
    "file",
    "including",
    "files",
    "creation",
    "modification",
    "times",
    "depending",
    "project",
    "program",
    "working",
    "may",
    "need",
    "use",
    "copy",
    "copy",
    "video",
    "going",
    "using",
    "copy",
    "file",
    "copy",
    "contents",
    "file",
    "import",
    "shuttle",
    "module",
    "need",
    "copy",
    "file",
    "shuttle",
    "dot",
    "use",
    "appropriate",
    "function",
    "need",
    "copy",
    "file",
    "going",
    "using",
    "copy",
    "file",
    "copy",
    "file",
    "within",
    "function",
    "two",
    "arguments",
    "source",
    "destination",
    "within",
    "project",
    "folder",
    "plain",
    "text",
    "file",
    "called",
    "test",
    "says",
    "yo",
    "text",
    "see",
    "ya",
    "would",
    "like",
    "copy",
    "file",
    "cool",
    "since",
    "file",
    "within",
    "project",
    "folder",
    "list",
    "file",
    "name",
    "otherwise",
    "someplace",
    "else",
    "would",
    "list",
    "file",
    "path",
    "file",
    "source",
    "file",
    "need",
    "destination",
    "second",
    "argument",
    "separated",
    "comma",
    "going",
    "list",
    "destination",
    "actually",
    "rename",
    "would",
    "like",
    "name",
    "destination",
    "project",
    "folder",
    "create",
    "copy",
    "file",
    "copy",
    "appear",
    "project",
    "folder",
    "say",
    "thing",
    "running",
    "file",
    "named",
    "says",
    "thing",
    "test",
    "file",
    "remember",
    "said",
    "copy",
    "file",
    "different",
    "location",
    "computer",
    "could",
    "list",
    "file",
    "path",
    "file",
    "path",
    "would",
    "go",
    "desktop",
    "run",
    "copy",
    "original",
    "file",
    "source",
    "copy",
    "wherever",
    "destination",
    "oh",
    "almost",
    "forgot",
    "need",
    "use",
    "copy",
    "copy",
    "2",
    "arguments",
    "exactly",
    "needed",
    "use",
    "copy",
    "would",
    "shuttle",
    "dot",
    "copy",
    "instead",
    "copy",
    "file",
    "copy",
    "2",
    "shuttle",
    "dot",
    "copy",
    "arguments",
    "exactly",
    "functions",
    "copy",
    "different",
    "things",
    "depending",
    "need",
    "program",
    "project",
    "right",
    "everybody",
    "basics",
    "copying",
    "files",
    "python",
    "post",
    "comment",
    "section",
    "yeah",
    "copy",
    "files",
    "using",
    "python",
    "hey",
    "going",
    "everybody",
    "bro",
    "hope",
    "well",
    "video",
    "going",
    "explain",
    "move",
    "files",
    "using",
    "python",
    "sit",
    "back",
    "relax",
    "enjoy",
    "show",
    "welcome",
    "back",
    "everybody",
    "another",
    "video",
    "regarding",
    "thing",
    "called",
    "programming",
    "video",
    "going",
    "moving",
    "files",
    "using",
    "python",
    "order",
    "recommend",
    "importing",
    "os",
    "module",
    "included",
    "standard",
    "python",
    "library",
    "need",
    "import",
    "let",
    "create",
    "two",
    "variables",
    "variable",
    "called",
    "source",
    "hold",
    "location",
    "source",
    "file",
    "located",
    "well",
    "variable",
    "called",
    "destination",
    "function",
    "well",
    "destination",
    "video",
    "going",
    "move",
    "file",
    "within",
    "project",
    "folder",
    "desktop",
    "going",
    "create",
    "new",
    "file",
    "name",
    "take",
    "liberty",
    "name",
    "whatever",
    "want",
    "going",
    "list",
    "location",
    "test",
    "file",
    "located",
    "since",
    "within",
    "project",
    "folder",
    "need",
    "file",
    "name",
    "someplace",
    "else",
    "computer",
    "would",
    "probably",
    "need",
    "file",
    "path",
    "would",
    "like",
    "move",
    "file",
    "would",
    "like",
    "move",
    "file",
    "desktop",
    "need",
    "file",
    "path",
    "going",
    "go",
    "desktop",
    "right",
    "click",
    "go",
    "properties",
    "going",
    "copy",
    "location",
    "paste",
    "within",
    "destination",
    "add",
    "slash",
    "desktop",
    "slash",
    "also",
    "rename",
    "want",
    "keep",
    "single",
    "backslashes",
    "likely",
    "need",
    "change",
    "double",
    "backslashes",
    "escape",
    "sequence",
    "print",
    "backslash",
    "within",
    "string",
    "source",
    "location",
    "well",
    "destination",
    "location",
    "begin",
    "would",
    "recommend",
    "writing",
    "code",
    "within",
    "try",
    "accept",
    "block",
    "handle",
    "exceptions",
    "would",
    "like",
    "handle",
    "file",
    "found",
    "error",
    "exceptions",
    "case",
    "program",
    "locate",
    "source",
    "file",
    "let",
    "print",
    "message",
    "case",
    "perhaps",
    "source",
    "plus",
    "found",
    "within",
    "try",
    "block",
    "let",
    "check",
    "see",
    "already",
    "file",
    "destination",
    "would",
    "like",
    "save",
    "already",
    "file",
    "let",
    "basic",
    "file",
    "detection",
    "os",
    "dot",
    "path",
    "dot",
    "exists",
    "pass",
    "destination",
    "argument",
    "exists",
    "function",
    "already",
    "file",
    "probably",
    "let",
    "user",
    "know",
    "print",
    "already",
    "file",
    "else",
    "replace",
    "files",
    "honestly",
    "care",
    "saving",
    "files",
    "omit",
    "part",
    "else",
    "os",
    "dot",
    "replace",
    "pass",
    "source",
    "destination",
    "arguments",
    "let",
    "print",
    "message",
    "console",
    "window",
    "let",
    "user",
    "know",
    "source",
    "plus",
    "moved",
    "right",
    "let",
    "try",
    "oh",
    "accidentally",
    "deleted",
    "file",
    "right",
    "disappear",
    "three",
    "two",
    "one",
    "gone",
    "moved",
    "desktop",
    "also",
    "use",
    "move",
    "directory",
    "well",
    "going",
    "create",
    "new",
    "directory",
    "name",
    "folder",
    "change",
    "source",
    "folder",
    "destination",
    "folder",
    "move",
    "folder",
    "already",
    "file",
    "oh",
    "let",
    "delete",
    "okay",
    "folder",
    "moved",
    "right",
    "everybody",
    "move",
    "file",
    "directory",
    "using",
    "python",
    "would",
    "like",
    "copy",
    "code",
    "post",
    "comment",
    "section",
    "yeah",
    "move",
    "file",
    "directory",
    "using",
    "python",
    "hey",
    "going",
    "everybody",
    "bro",
    "hope",
    "well",
    "video",
    "going",
    "teach",
    "guys",
    "delete",
    "files",
    "using",
    "python",
    "sit",
    "back",
    "relax",
    "enjoy",
    "show",
    "right",
    "everybody",
    "video",
    "going",
    "deleting",
    "files",
    "using",
    "python",
    "order",
    "recommend",
    "importing",
    "os",
    "module",
    "already",
    "included",
    "standard",
    "python",
    "library",
    "need",
    "import",
    "need",
    "file",
    "work",
    "let",
    "right",
    "click",
    "projects",
    "folder",
    "go",
    "new",
    "file",
    "name",
    "file",
    "work",
    "know",
    "would",
    "like",
    "delete",
    "file",
    "lame",
    "let",
    "order",
    "delete",
    "file",
    "let",
    "type",
    "os",
    "dot",
    "remove",
    "going",
    "list",
    "file",
    "path",
    "since",
    "file",
    "within",
    "project",
    "folder",
    "need",
    "list",
    "file",
    "path",
    "someplace",
    "else",
    "computer",
    "would",
    "probably",
    "need",
    "file",
    "path",
    "like",
    "since",
    "file",
    "within",
    "project",
    "folder",
    "need",
    "file",
    "name",
    "another",
    "thing",
    "least",
    "like",
    "like",
    "pass",
    "variable",
    "called",
    "path",
    "make",
    "variable",
    "assign",
    "string",
    "value",
    "whatever",
    "path",
    "file",
    "assign",
    "path",
    "name",
    "file",
    "run",
    "delete",
    "file",
    "see",
    "longer",
    "attempt",
    "delete",
    "file",
    "exist",
    "well",
    "encounter",
    "exception",
    "want",
    "optional",
    "exception",
    "handling",
    "let",
    "write",
    "remove",
    "function",
    "within",
    "try",
    "block",
    "catch",
    "exception",
    "file",
    "found",
    "error",
    "let",
    "print",
    "something",
    "print",
    "file",
    "found",
    "attempt",
    "delete",
    "file",
    "exist",
    "program",
    "interrupted",
    "instead",
    "print",
    "something",
    "file",
    "found",
    "function",
    "remove",
    "empty",
    "folders",
    "actually",
    "let",
    "test",
    "let",
    "create",
    "new",
    "directory",
    "call",
    "empty",
    "underscore",
    "folder",
    "attempt",
    "delete",
    "empty",
    "folder",
    "empty",
    "folder",
    "encountered",
    "permission",
    "error",
    "access",
    "denied",
    "let",
    "create",
    "accept",
    "block",
    "accept",
    "permission",
    "error",
    "print",
    "know",
    "permission",
    "delete",
    "right",
    "delete",
    "empty",
    "folder",
    "different",
    "function",
    "os",
    "dot",
    "rmdir",
    "short",
    "remove",
    "directory",
    "going",
    "list",
    "file",
    "path",
    "pass",
    "argument",
    "let",
    "create",
    "else",
    "block",
    "well",
    "else",
    "exceptions",
    "let",
    "print",
    "path",
    "plus",
    "deleted",
    "right",
    "rmdir",
    "remove",
    "directory",
    "delete",
    "empty",
    "directory",
    "empty",
    "folder",
    "deleted",
    "function",
    "delete",
    "folder",
    "contains",
    "files",
    "let",
    "try",
    "let",
    "create",
    "new",
    "directory",
    "call",
    "folder",
    "within",
    "folder",
    "create",
    "new",
    "file",
    "right",
    "let",
    "attempt",
    "delete",
    "folder",
    "probably",
    "need",
    "change",
    "file",
    "name",
    "let",
    "change",
    "folder",
    "encountered",
    "os",
    "error",
    "directory",
    "empty",
    "let",
    "handle",
    "exception",
    "need",
    "like",
    "accept",
    "os",
    "air",
    "print",
    "delete",
    "using",
    "function",
    "okay",
    "delete",
    "folder",
    "contains",
    "files",
    "need",
    "shuttle",
    "module",
    "import",
    "shuttle",
    "function",
    "looking",
    "shuttle",
    "dot",
    "rm",
    "tree",
    "short",
    "remove",
    "tree",
    "pass",
    "path",
    "careful",
    "function",
    "considered",
    "dangerous",
    "delete",
    "directory",
    "files",
    "contained",
    "within",
    "delete",
    "folder",
    "contains",
    "files",
    "folder",
    "deleted",
    "conclusion",
    "three",
    "basic",
    "functions",
    "delete",
    "file",
    "directory",
    "remove",
    "deletes",
    "file",
    "rmdir",
    "abbreviation",
    "remove",
    "directory",
    "delete",
    "empty",
    "directory",
    "lastly",
    "rmtree",
    "abbreviation",
    "remove",
    "tree",
    "shuttle",
    "module",
    "delete",
    "directory",
    "containing",
    "files",
    "would",
    "like",
    "copy",
    "code",
    "post",
    "comments",
    "section",
    "yeah",
    "delete",
    "files",
    "directories",
    "using",
    "python",
    "yo",
    "going",
    "everybody",
    "bro",
    "hope",
    "well",
    "today",
    "video",
    "going",
    "discussing",
    "modules",
    "python",
    "sit",
    "back",
    "relax",
    "enjoy",
    "show",
    "right",
    "well",
    "welcome",
    "back",
    "talking",
    "modules",
    "today",
    "module",
    "file",
    "containing",
    "python",
    "code",
    "may",
    "contain",
    "functions",
    "classes",
    "etc",
    "used",
    "modular",
    "programming",
    "concept",
    "separating",
    "program",
    "useful",
    "different",
    "parts",
    "currently",
    "working",
    "within",
    "main",
    "module",
    "mine",
    "named",
    "hello",
    "youtube",
    "create",
    "separate",
    "module",
    "right",
    "click",
    "project",
    "folder",
    "go",
    "new",
    "python",
    "file",
    "think",
    "create",
    "module",
    "filled",
    "maybe",
    "message",
    "functions",
    "call",
    "messages",
    "click",
    "python",
    "file",
    "right",
    "two",
    "tabs",
    "one",
    "main",
    "module",
    "mine",
    "called",
    "hello",
    "youtube",
    "separate",
    "module",
    "messages",
    "write",
    "whatever",
    "want",
    "within",
    "since",
    "using",
    "modular",
    "programming",
    "place",
    "bunch",
    "useful",
    "functions",
    "within",
    "module",
    "import",
    "main",
    "module",
    "currently",
    "working",
    "let",
    "define",
    "function",
    "called",
    "hello",
    "print",
    "hello",
    "nice",
    "day",
    "create",
    "second",
    "function",
    "good",
    "measure",
    "let",
    "call",
    "pie",
    "let",
    "say",
    "bye",
    "wonderful",
    "time",
    "would",
    "like",
    "access",
    "module",
    "need",
    "import",
    "head",
    "back",
    "main",
    "module",
    "top",
    "write",
    "import",
    "name",
    "module",
    "example",
    "used",
    "name",
    "messages",
    "separate",
    "module",
    "use",
    "function",
    "module",
    "type",
    "name",
    "module",
    "dot",
    "name",
    "function",
    "call",
    "hello",
    "function",
    "found",
    "within",
    "messages",
    "module",
    "also",
    "call",
    "buy",
    "function",
    "well",
    "messages",
    "dot",
    "bye",
    "print",
    "bye",
    "wonderful",
    "time",
    "somewhat",
    "tedious",
    "write",
    "name",
    "module",
    "followed",
    "function",
    "name",
    "could",
    "shorten",
    "things",
    "give",
    "messages",
    "module",
    "alias",
    "also",
    "known",
    "nickname",
    "top",
    "write",
    "import",
    "messages",
    "sort",
    "nickname",
    "give",
    "messages",
    "let",
    "say",
    "msg",
    "short",
    "replace",
    "messages",
    "msg",
    "msg",
    "hello",
    "msg",
    "buy",
    "would",
    "work",
    "involves",
    "less",
    "typing",
    "also",
    "additional",
    "way",
    "importing",
    "module",
    "goes",
    "little",
    "something",
    "like",
    "name",
    "module",
    "import",
    "list",
    "functions",
    "classes",
    "would",
    "like",
    "import",
    "would",
    "like",
    "import",
    "hello",
    "comma",
    "buy",
    "longer",
    "need",
    "module",
    "name",
    "calling",
    "one",
    "functions",
    "simply",
    "call",
    "hello",
    "vi",
    "directly",
    "another",
    "way",
    "could",
    "written",
    "messages",
    "import",
    "asterisk",
    "means",
    "import",
    "actually",
    "would",
    "recommend",
    "using",
    "working",
    "large",
    "program",
    "something",
    "contains",
    "many",
    "modules",
    "run",
    "naming",
    "conflict",
    "modules",
    "may",
    "named",
    "function",
    "names",
    "variables",
    "working",
    "small",
    "program",
    "really",
    "think",
    "big",
    "deal",
    "multiple",
    "modules",
    "would",
    "actually",
    "refrain",
    "using",
    "import",
    "alt",
    "much",
    "safer",
    "write",
    "name",
    "module",
    "followed",
    "name",
    "function",
    "want",
    "use",
    "another",
    "cool",
    "thing",
    "python",
    "bunch",
    "modules",
    "access",
    "would",
    "like",
    "comprehensive",
    "list",
    "type",
    "help",
    "pass",
    "word",
    "modules",
    "within",
    "console",
    "window",
    "populate",
    "listing",
    "modules",
    "available",
    "us",
    "let",
    "see",
    "math",
    "yep",
    "yeah",
    "feel",
    "free",
    "take",
    "look",
    "modules",
    "fairly",
    "useful",
    "tools",
    "within",
    "modules",
    "suppose",
    "also",
    "go",
    "python",
    "official",
    "documentation",
    "search",
    "python",
    "module",
    "index",
    "listing",
    "different",
    "modules",
    "access",
    "well",
    "everyone",
    "modules",
    "files",
    "containing",
    "python",
    "code",
    "may",
    "contain",
    "functions",
    "classes",
    "etc",
    "would",
    "like",
    "copy",
    "code",
    "post",
    "comments",
    "section",
    "yeah",
    "modules",
    "python",
    "guess",
    "module",
    "called",
    "pickle",
    "hey",
    "going",
    "everybody",
    "bro",
    "hope",
    "well",
    "video",
    "going",
    "creating",
    "basic",
    "game",
    "rock",
    "paper",
    "scissors",
    "python",
    "sit",
    "back",
    "relax",
    "enjoy",
    "show",
    "let",
    "begin",
    "importing",
    "random",
    "module",
    "going",
    "need",
    "computer",
    "pick",
    "random",
    "choice",
    "create",
    "list",
    "possible",
    "choices",
    "three",
    "strings",
    "within",
    "rock",
    "paper",
    "scissors",
    "think",
    "spelled",
    "scissors",
    "wrong",
    "go",
    "okay",
    "computer",
    "pick",
    "random",
    "dot",
    "choice",
    "list",
    "choices",
    "let",
    "test",
    "printing",
    "whatever",
    "computer",
    "picks",
    "computer",
    "picked",
    "paper",
    "paper",
    "scissors",
    "scissors",
    "okay",
    "player",
    "choice",
    "let",
    "say",
    "player",
    "equals",
    "input",
    "rock",
    "paper",
    "scissors",
    "let",
    "print",
    "player",
    "print",
    "player",
    "let",
    "print",
    "computer",
    "maybe",
    "add",
    "string",
    "let",
    "say",
    "computer",
    "call",
    "space",
    "whatever",
    "computer",
    "chooses",
    "thing",
    "player",
    "player",
    "right",
    "let",
    "see",
    "works",
    "rock",
    "paper",
    "scissors",
    "let",
    "say",
    "rock",
    "computer",
    "picks",
    "paper",
    "pick",
    "rock",
    "would",
    "technically",
    "lose",
    "round",
    "player",
    "pick",
    "rock",
    "paper",
    "scissors",
    "type",
    "gun",
    "would",
    "like",
    "way",
    "prevent",
    "let",
    "put",
    "input",
    "player",
    "within",
    "loop",
    "player",
    "choices",
    "going",
    "need",
    "initialize",
    "player",
    "right",
    "unresolved",
    "reference",
    "let",
    "say",
    "player",
    "equals",
    "none",
    "time",
    "okay",
    "let",
    "test",
    "choices",
    "player",
    "choices",
    "rock",
    "paper",
    "scissors",
    "pick",
    "gun",
    "going",
    "keep",
    "asking",
    "pick",
    "something",
    "list",
    "choices",
    "type",
    "still",
    "wo",
    "accept",
    "let",
    "type",
    "rock",
    "go",
    "somebody",
    "types",
    "one",
    "choices",
    "either",
    "caps",
    "capitalized",
    "well",
    "technically",
    "would",
    "choices",
    "strings",
    "case",
    "sensitive",
    "take",
    "user",
    "input",
    "make",
    "lowercase",
    "add",
    "dot",
    "lower",
    "use",
    "lower",
    "method",
    "therefore",
    "type",
    "input",
    "either",
    "caps",
    "uppercase",
    "still",
    "accepted",
    "going",
    "take",
    "player",
    "input",
    "make",
    "lower",
    "case",
    "matches",
    "one",
    "choices",
    "okay",
    "let",
    "work",
    "win",
    "conditions",
    "next",
    "first",
    "let",
    "check",
    "see",
    "encountered",
    "tie",
    "player",
    "equal",
    "computer",
    "means",
    "chose",
    "thing",
    "let",
    "print",
    "whatever",
    "computer",
    "picked",
    "picked",
    "print",
    "tie",
    "let",
    "write",
    "else",
    "statement",
    "e",
    "l",
    "f",
    "player",
    "equals",
    "rock",
    "pick",
    "rock",
    "create",
    "nested",
    "statement",
    "computer",
    "equals",
    "paper",
    "means",
    "lose",
    "let",
    "print",
    "everything",
    "except",
    "going",
    "change",
    "tie",
    "lose",
    "computer",
    "picks",
    "let",
    "say",
    "scissors",
    "win",
    "scissors",
    "win",
    "okay",
    "let",
    "repeat",
    "process",
    "scissors",
    "paper",
    "another",
    "else",
    "statement",
    "pick",
    "scissors",
    "computer",
    "picks",
    "rock",
    "lose",
    "computer",
    "picks",
    "paper",
    "win",
    "lastly",
    "paper",
    "player",
    "choice",
    "else",
    "player",
    "equals",
    "paper",
    "computer",
    "picks",
    "scissors",
    "lose",
    "computer",
    "picks",
    "rock",
    "well",
    "paper",
    "covers",
    "rock",
    "win",
    "let",
    "test",
    "rock",
    "paper",
    "scissors",
    "try",
    "pick",
    "gun",
    "ca",
    "let",
    "take",
    "seriously",
    "pick",
    "rock",
    "computer",
    "picked",
    "rock",
    "tie",
    "feeling",
    "like",
    "paper",
    "today",
    "oh",
    "another",
    "tie",
    "guess",
    "scissors",
    "okay",
    "win",
    "round",
    "picked",
    "uh",
    "scissors",
    "computer",
    "picked",
    "paper",
    "therefore",
    "win",
    "let",
    "try",
    "lose",
    "time",
    "verify",
    "let",
    "try",
    "rock",
    "okay",
    "lost",
    "round",
    "know",
    "win",
    "conditions",
    "working",
    "add",
    "feature",
    "ask",
    "player",
    "would",
    "like",
    "play",
    "play",
    "another",
    "round",
    "think",
    "best",
    "way",
    "would",
    "write",
    "code",
    "within",
    "loop",
    "top",
    "let",
    "write",
    "true",
    "need",
    "indent",
    "everything",
    "within",
    "loop",
    "let",
    "indent",
    "everything",
    "bottom",
    "ask",
    "user",
    "would",
    "like",
    "play",
    "store",
    "within",
    "variable",
    "named",
    "play",
    "play",
    "equals",
    "input",
    "prompt",
    "play",
    "yes",
    "slash",
    "depending",
    "input",
    "let",
    "make",
    "lower",
    "case",
    "play",
    "equal",
    "yes",
    "means",
    "would",
    "like",
    "quit",
    "let",
    "use",
    "break",
    "statement",
    "break",
    "loop",
    "end",
    "let",
    "print",
    "pay",
    "attention",
    "indentation",
    "input",
    "statement",
    "within",
    "loop",
    "least",
    "one",
    "indentation",
    "print",
    "statement",
    "say",
    "bye",
    "see",
    "indentation",
    "outside",
    "loop",
    "okay",
    "let",
    "test",
    "one",
    "last",
    "time",
    "rock",
    "paper",
    "scissors",
    "going",
    "pick",
    "cannon",
    "okay",
    "valid",
    "input",
    "rock",
    "okay",
    "computer",
    "picks",
    "rock",
    "pick",
    "rock",
    "tie",
    "want",
    "play",
    "going",
    "select",
    "actually",
    "yes",
    "caps",
    "still",
    "acceptable",
    "elbow",
    "paper",
    "time",
    "tie",
    "man",
    "computer",
    "really",
    "good",
    "game",
    "like",
    "play",
    "pick",
    "scissors",
    "okay",
    "lose",
    "would",
    "like",
    "play",
    "want",
    "win",
    "time",
    "okay",
    "computer",
    "pick",
    "scissors",
    "pick",
    "rock",
    "win",
    "want",
    "play",
    "nah",
    "print",
    "bye",
    "well",
    "everybody",
    "simple",
    "game",
    "rock",
    "paper",
    "scissors",
    "post",
    "code",
    "comment",
    "section",
    "well",
    "yeah",
    "basic",
    "game",
    "rock",
    "paper",
    "scissors",
    "python",
    "hey",
    "going",
    "everybody",
    "bro",
    "hope",
    "well",
    "video",
    "going",
    "show",
    "guys",
    "build",
    "basic",
    "quiz",
    "game",
    "python",
    "sit",
    "back",
    "relax",
    "enjoy",
    "show",
    "begin",
    "project",
    "think",
    "would",
    "wise",
    "us",
    "create",
    "skeletal",
    "structure",
    "program",
    "going",
    "operate",
    "fill",
    "gaps",
    "later",
    "go",
    "along",
    "begin",
    "let",
    "define",
    "functions",
    "need",
    "need",
    "four",
    "create",
    "function",
    "named",
    "new",
    "game",
    "whenever",
    "call",
    "function",
    "create",
    "new",
    "quiz",
    "game",
    "us",
    "time",
    "let",
    "write",
    "pass",
    "placeholder",
    "total",
    "four",
    "functions",
    "new",
    "game",
    "function",
    "check",
    "answer",
    "function",
    "display",
    "score",
    "lastly",
    "function",
    "play",
    "right",
    "going",
    "add",
    "comments",
    "separate",
    "functions",
    "little",
    "bit",
    "easier",
    "read",
    "although",
    "part",
    "really",
    "necessary",
    "want",
    "separate",
    "functions",
    "readability",
    "okay",
    "functions",
    "need",
    "need",
    "sort",
    "collection",
    "hold",
    "questions",
    "answers",
    "think",
    "dictionary",
    "would",
    "perfect",
    "created",
    "dictionary",
    "named",
    "questions",
    "dictionary",
    "key",
    "value",
    "pairs",
    "key",
    "question",
    "would",
    "like",
    "ask",
    "question",
    "associated",
    "value",
    "user",
    "guess",
    "answers",
    "b",
    "c",
    "would",
    "correct",
    "answers",
    "values",
    "within",
    "dictionary",
    "questions",
    "want",
    "ask",
    "feel",
    "free",
    "come",
    "questions",
    "would",
    "like",
    "copy",
    "questions",
    "posted",
    "comment",
    "section",
    "questions",
    "going",
    "ask",
    "created",
    "python",
    "year",
    "python",
    "created",
    "python",
    "attributed",
    "comedy",
    "group",
    "lastly",
    "earth",
    "round",
    "could",
    "think",
    "fourth",
    "question",
    "threw",
    "random",
    "stupid",
    "question",
    "correct",
    "answers",
    "questions",
    "order",
    "would",
    "b",
    "c",
    "feel",
    "free",
    "come",
    "well",
    "questions",
    "need",
    "sort",
    "collection",
    "hold",
    "different",
    "possible",
    "answers",
    "questions",
    "think",
    "2d",
    "list",
    "would",
    "work",
    "perfect",
    "list",
    "lists",
    "list",
    "tuples",
    "could",
    "work",
    "suppose",
    "answers",
    "first",
    "question",
    "correct",
    "answer",
    "believe",
    "name",
    "guido",
    "van",
    "rossum",
    "hey",
    "listening",
    "man",
    "sorry",
    "mispronouncing",
    "name",
    "really",
    "trying",
    "second",
    "list",
    "corresponds",
    "second",
    "question",
    "year",
    "python",
    "created",
    "created",
    "1991",
    "least",
    "according",
    "wikipedia",
    "python",
    "attributed",
    "comedy",
    "group",
    "answer",
    "c",
    "monty",
    "python",
    "like",
    "monty",
    "python",
    "holy",
    "grail",
    "good",
    "movie",
    "way",
    "lastly",
    "earth",
    "round",
    "highly",
    "debated",
    "topic",
    "answer",
    "hey",
    "earth",
    "fact",
    "round",
    "list",
    "lists",
    "list",
    "corresponds",
    "key",
    "value",
    "pair",
    "within",
    "dictionary",
    "questions",
    "lot",
    "type",
    "want",
    "copy",
    "code",
    "posted",
    "comments",
    "copy",
    "paste",
    "want",
    "pause",
    "video",
    "type",
    "care",
    "questions",
    "options",
    "ready",
    "begin",
    "first",
    "thing",
    "within",
    "program",
    "call",
    "new",
    "game",
    "function",
    "begin",
    "new",
    "game",
    "questions",
    "options",
    "created",
    "let",
    "create",
    "new",
    "game",
    "calling",
    "new",
    "game",
    "function",
    "run",
    "program",
    "generate",
    "dictionary",
    "questions",
    "2d",
    "list",
    "different",
    "options",
    "question",
    "call",
    "new",
    "game",
    "function",
    "begin",
    "new",
    "game",
    "let",
    "head",
    "new",
    "game",
    "function",
    "fill",
    "everything",
    "within",
    "new",
    "game",
    "function",
    "top",
    "let",
    "declare",
    "things",
    "let",
    "say",
    "list",
    "named",
    "guesses",
    "guesses",
    "empty",
    "list",
    "declare",
    "variable",
    "called",
    "correct",
    "guesses",
    "set",
    "equal",
    "zero",
    "guessed",
    "anything",
    "yet",
    "set",
    "current",
    "question",
    "number",
    "set",
    "sequel",
    "one",
    "represent",
    "first",
    "question",
    "okay",
    "need",
    "display",
    "questions",
    "within",
    "dictionary",
    "questions",
    "use",
    "loop",
    "key",
    "questions",
    "going",
    "print",
    "key",
    "let",
    "test",
    "okay",
    "yeah",
    "questions",
    "think",
    "actually",
    "print",
    "something",
    "separate",
    "question",
    "let",
    "say",
    "one",
    "lines",
    "think",
    "would",
    "look",
    "better",
    "okay",
    "print",
    "line",
    "move",
    "question",
    "right",
    "question",
    "added",
    "line",
    "break",
    "make",
    "look",
    "kind",
    "fancy",
    "need",
    "display",
    "different",
    "options",
    "question",
    "nested",
    "loop",
    "write",
    "options",
    "print",
    "let",
    "show",
    "happens",
    "way",
    "loop",
    "written",
    "going",
    "display",
    "different",
    "options",
    "available",
    "us",
    "entire",
    "quiz",
    "game",
    "would",
    "like",
    "instead",
    "display",
    "first",
    "list",
    "first",
    "question",
    "second",
    "list",
    "second",
    "question",
    "follow",
    "pattern",
    "going",
    "change",
    "loop",
    "around",
    "4i",
    "options",
    "set",
    "index",
    "options",
    "index",
    "going",
    "question",
    "number",
    "minus",
    "one",
    "remember",
    "said",
    "previous",
    "videos",
    "different",
    "collections",
    "including",
    "lists",
    "tuples",
    "etc",
    "first",
    "element",
    "collection",
    "index",
    "zero",
    "computers",
    "always",
    "start",
    "zero",
    "next",
    "element",
    "would",
    "therefore",
    "index",
    "one",
    "two",
    "three",
    "follow",
    "pattern",
    "using",
    "question",
    "number",
    "variable",
    "sort",
    "counter",
    "since",
    "initially",
    "set",
    "one",
    "going",
    "subtract",
    "one",
    "effectively",
    "receive",
    "zero",
    "index",
    "need",
    "increment",
    "question",
    "number",
    "iteration",
    "let",
    "add",
    "end",
    "finish",
    "displaying",
    "options",
    "let",
    "increment",
    "question",
    "number",
    "one",
    "typing",
    "question",
    "num",
    "plus",
    "equals",
    "one",
    "run",
    "currently",
    "display",
    "different",
    "options",
    "question",
    "created",
    "python",
    "associated",
    "options",
    "year",
    "python",
    "created",
    "python",
    "attributed",
    "comedy",
    "group",
    "lastly",
    "earth",
    "round",
    "time",
    "user",
    "input",
    "going",
    "create",
    "variable",
    "called",
    "guess",
    "make",
    "sure",
    "put",
    "within",
    "inner",
    "loop",
    "within",
    "outer",
    "loop",
    "guess",
    "equals",
    "input",
    "create",
    "prompt",
    "enter",
    "b",
    "c",
    "something",
    "consider",
    "would",
    "like",
    "user",
    "type",
    "either",
    "capital",
    "b",
    "c",
    "strings",
    "case",
    "sensitive",
    "user",
    "typed",
    "one",
    "letters",
    "lowercase",
    "correct",
    "would",
    "still",
    "like",
    "give",
    "point",
    "take",
    "guess",
    "make",
    "uppercase",
    "guess",
    "equals",
    "guess",
    "make",
    "uppercase",
    "using",
    "upper",
    "method",
    "strings",
    "end",
    "game",
    "going",
    "compare",
    "guesses",
    "correct",
    "answers",
    "empty",
    "list",
    "named",
    "guesses",
    "going",
    "append",
    "current",
    "guest",
    "working",
    "list",
    "guesses",
    "guesses",
    "dot",
    "append",
    "append",
    "guess",
    "round",
    "guess",
    "appended",
    "guess",
    "list",
    "guesses",
    "let",
    "check",
    "see",
    "correct",
    "answer",
    "fill",
    "check",
    "answer",
    "function",
    "next",
    "going",
    "call",
    "function",
    "pass",
    "items",
    "arguments",
    "let",
    "use",
    "check",
    "answer",
    "function",
    "pass",
    "key",
    "current",
    "question",
    "key",
    "correct",
    "answer",
    "would",
    "questions",
    "dot",
    "get",
    "key",
    "would",
    "answer",
    "also",
    "pass",
    "guess",
    "going",
    "fill",
    "check",
    "answer",
    "function",
    "need",
    "set",
    "parameters",
    "receiving",
    "effectively",
    "answer",
    "well",
    "guess",
    "going",
    "name",
    "answer",
    "guess",
    "going",
    "check",
    "see",
    "answer",
    "equal",
    "guess",
    "answer",
    "equal",
    "guess",
    "let",
    "print",
    "something",
    "print",
    "correct",
    "think",
    "give",
    "user",
    "point",
    "check",
    "answer",
    "function",
    "return",
    "one",
    "one",
    "point",
    "return",
    "one",
    "else",
    "correct",
    "answer",
    "let",
    "print",
    "wrong",
    "return",
    "zero",
    "get",
    "point",
    "since",
    "returning",
    "value",
    "assign",
    "let",
    "assign",
    "point",
    "may",
    "may",
    "receive",
    "variable",
    "correct",
    "guesses",
    "initially",
    "set",
    "zero",
    "type",
    "correct",
    "guesses",
    "plus",
    "equals",
    "check",
    "answer",
    "check",
    "answer",
    "return",
    "one",
    "scored",
    "point",
    "zero",
    "score",
    "point",
    "make",
    "sure",
    "plus",
    "equals",
    "set",
    "equals",
    "score",
    "one",
    "point",
    "either",
    "zero",
    "one",
    "effectively",
    "incrementing",
    "correct",
    "guesses",
    "one",
    "point",
    "score",
    "going",
    "work",
    "display",
    "score",
    "function",
    "call",
    "end",
    "finish",
    "questions",
    "make",
    "sure",
    "write",
    "within",
    "loop",
    "outside",
    "finish",
    "iterating",
    "questions",
    "going",
    "display",
    "final",
    "score",
    "let",
    "call",
    "display",
    "score",
    "function",
    "need",
    "pass",
    "arguments",
    "correct",
    "guesses",
    "well",
    "list",
    "guesses",
    "okay",
    "let",
    "head",
    "display",
    "score",
    "function",
    "parameters",
    "correct",
    "guesses",
    "well",
    "guesses",
    "need",
    "remove",
    "pass",
    "going",
    "add",
    "one",
    "fancy",
    "lines",
    "separate",
    "questions",
    "results",
    "print",
    "results",
    "maybe",
    "another",
    "one",
    "lines",
    "okay",
    "need",
    "print",
    "answers",
    "answers",
    "want",
    "end",
    "new",
    "line",
    "going",
    "set",
    "end",
    "equal",
    "nothing",
    "need",
    "display",
    "values",
    "within",
    "dictionary",
    "answers",
    "using",
    "loop",
    "questions",
    "print",
    "questions",
    "dot",
    "get",
    "want",
    "end",
    "new",
    "line",
    "going",
    "set",
    "end",
    "equal",
    "nothing",
    "effectively",
    "print",
    "new",
    "line",
    "okay",
    "let",
    "work",
    "guesses",
    "think",
    "going",
    "copy",
    "make",
    "changes",
    "replace",
    "answers",
    "guesses",
    "guesses",
    "print",
    "okay",
    "let",
    "sure",
    "everything",
    "working",
    "calculating",
    "score",
    "quite",
    "yet",
    "going",
    "answer",
    "b",
    "c",
    "second",
    "thought",
    "printing",
    "answers",
    "guesses",
    "going",
    "add",
    "space",
    "within",
    "four",
    "loops",
    "end",
    "add",
    "space",
    "let",
    "try",
    "b",
    "c",
    "okay",
    "bad",
    "let",
    "calculate",
    "final",
    "score",
    "still",
    "within",
    "display",
    "score",
    "function",
    "let",
    "set",
    "score",
    "equal",
    "correct",
    "guesses",
    "divided",
    "length",
    "questions",
    "let",
    "add",
    "set",
    "parentheses",
    "around",
    "going",
    "multiply",
    "score",
    "100",
    "want",
    "decimal",
    "portion",
    "display",
    "percentage",
    "cast",
    "end",
    "okay",
    "looks",
    "good",
    "print",
    "final",
    "score",
    "print",
    "score",
    "plus",
    "need",
    "cast",
    "score",
    "string",
    "using",
    "string",
    "concatenation",
    "plus",
    "add",
    "percent",
    "sign",
    "right",
    "let",
    "try",
    "intentionally",
    "going",
    "get",
    "last",
    "question",
    "wrong",
    "75",
    "four",
    "questions",
    "would",
    "b",
    "c",
    "earth",
    "round",
    "earth",
    "gon",
    "na",
    "guess",
    "answers",
    "b",
    "c",
    "guess",
    "b",
    "c",
    "score",
    "75",
    "okay",
    "let",
    "test",
    "getting",
    "wrong",
    "answers",
    "score",
    "zero",
    "percent",
    "congratulations",
    "test",
    "one",
    "time",
    "get",
    "right",
    "answers",
    "want",
    "sure",
    "100",
    "b",
    "c",
    "score",
    "100",
    "last",
    "thing",
    "add",
    "play",
    "want",
    "separate",
    "function",
    "would",
    "like",
    "add",
    "option",
    "let",
    "remove",
    "pass",
    "let",
    "set",
    "variable",
    "named",
    "response",
    "equal",
    "input",
    "want",
    "play",
    "let",
    "ask",
    "yes",
    "actually",
    "let",
    "remove",
    "okay",
    "depending",
    "user",
    "response",
    "might",
    "lowercase",
    "let",
    "make",
    "uppercase",
    "response",
    "equals",
    "response",
    "use",
    "upper",
    "method",
    "response",
    "equal",
    "yes",
    "caps",
    "response",
    "equal",
    "yes",
    "return",
    "true",
    "else",
    "return",
    "false",
    "function",
    "last",
    "thing",
    "need",
    "create",
    "loop",
    "continue",
    "ask",
    "player",
    "want",
    "play",
    "call",
    "new",
    "game",
    "function",
    "play",
    "remember",
    "return",
    "either",
    "true",
    "false",
    "depending",
    "user",
    "response",
    "play",
    "new",
    "game",
    "call",
    "new",
    "game",
    "function",
    "create",
    "new",
    "game",
    "us",
    "escape",
    "loop",
    "means",
    "user",
    "want",
    "play",
    "let",
    "print",
    "message",
    "e",
    "right",
    "let",
    "test",
    "going",
    "get",
    "correct",
    "answers",
    "time",
    "b",
    "c",
    "right",
    "score",
    "100",
    "want",
    "play",
    "going",
    "type",
    "yes",
    "right",
    "play",
    "score",
    "zero",
    "percent",
    "want",
    "play",
    "think",
    "mastered",
    "game",
    "bye",
    "right",
    "everybody",
    "use",
    "python",
    "create",
    "simple",
    "quiz",
    "game",
    "post",
    "code",
    "comment",
    "section",
    "well",
    "yeah",
    "basic",
    "quiz",
    "game",
    "python",
    "hey",
    "going",
    "everybody",
    "bro",
    "hope",
    "well",
    "video",
    "going",
    "explain",
    "programming",
    "python",
    "sit",
    "back",
    "relax",
    "enjoy",
    "show",
    "welcome",
    "today",
    "topic",
    "python",
    "object",
    "oriented",
    "programming",
    "also",
    "known",
    "pop",
    "today",
    "video",
    "going",
    "creating",
    "objects",
    "object",
    "instance",
    "class",
    "using",
    "programming",
    "create",
    "representations",
    "objects",
    "look",
    "around",
    "wherever",
    "sitting",
    "standing",
    "right",
    "surrounded",
    "objects",
    "next",
    "phone",
    "television",
    "snacks",
    "talking",
    "microphone",
    "point",
    "use",
    "programming",
    "mimic",
    "real",
    "world",
    "objects",
    "assigning",
    "combination",
    "attributes",
    "object",
    "methods",
    "object",
    "order",
    "create",
    "object",
    "need",
    "create",
    "class",
    "class",
    "function",
    "blueprint",
    "describe",
    "attributes",
    "methods",
    "distinct",
    "type",
    "object",
    "either",
    "create",
    "class",
    "within",
    "main",
    "module",
    "could",
    "create",
    "separate",
    "file",
    "dedicated",
    "solely",
    "class",
    "create",
    "class",
    "would",
    "type",
    "class",
    "name",
    "object",
    "would",
    "like",
    "create",
    "today",
    "would",
    "like",
    "create",
    "car",
    "objects",
    "like",
    "cars",
    "would",
    "type",
    "car",
    "common",
    "naming",
    "convention",
    "class",
    "names",
    "capital",
    "car",
    "going",
    "capital",
    "c",
    "time",
    "need",
    "type",
    "something",
    "type",
    "pass",
    "placeholder",
    "small",
    "program",
    "may",
    "better",
    "write",
    "class",
    "within",
    "main",
    "module",
    "class",
    "fairly",
    "large",
    "may",
    "want",
    "consider",
    "placing",
    "class",
    "within",
    "separate",
    "module",
    "take",
    "route",
    "would",
    "go",
    "file",
    "new",
    "python",
    "file",
    "would",
    "name",
    "car",
    "click",
    "python",
    "file",
    "would",
    "declare",
    "class",
    "within",
    "separate",
    "module",
    "class",
    "car",
    "type",
    "pass",
    "need",
    "import",
    "class",
    "within",
    "main",
    "module",
    "would",
    "type",
    "name",
    "module",
    "import",
    "name",
    "class",
    "car",
    "import",
    "car",
    "objects",
    "combination",
    "attributes",
    "methods",
    "attributes",
    "describe",
    "object",
    "attributes",
    "cars",
    "might",
    "might",
    "make",
    "let",
    "create",
    "variables",
    "time",
    "going",
    "use",
    "none",
    "placeholder",
    "cars",
    "model",
    "year",
    "color",
    "objects",
    "also",
    "methods",
    "kinds",
    "methods",
    "could",
    "cars",
    "perform",
    "perhaps",
    "drive",
    "method",
    "stop",
    "method",
    "let",
    "define",
    "def",
    "let",
    "say",
    "drive",
    "one",
    "argument",
    "self",
    "self",
    "refers",
    "object",
    "using",
    "method",
    "want",
    "call",
    "method",
    "let",
    "say",
    "car",
    "driving",
    "let",
    "create",
    "stop",
    "method",
    "well",
    "def",
    "stop",
    "print",
    "car",
    "stopped",
    "different",
    "attributes",
    "methods",
    "would",
    "like",
    "car",
    "objects",
    "one",
    "thing",
    "need",
    "special",
    "method",
    "called",
    "init",
    "method",
    "construct",
    "objects",
    "us",
    "programming",
    "languages",
    "known",
    "constructor",
    "need",
    "special",
    "method",
    "create",
    "objects",
    "us",
    "need",
    "define",
    "method",
    "def",
    "syntax",
    "somewhat",
    "strange",
    "two",
    "underscores",
    "init",
    "short",
    "initialize",
    "200",
    "scores",
    "need",
    "least",
    "self",
    "argument",
    "actually",
    "assign",
    "car",
    "objects",
    "unique",
    "variables",
    "take",
    "attributes",
    "going",
    "place",
    "within",
    "init",
    "method",
    "receive",
    "arguments",
    "create",
    "car",
    "objects",
    "need",
    "pass",
    "arguments",
    "init",
    "method",
    "need",
    "set",
    "parameters",
    "let",
    "say",
    "order",
    "create",
    "car",
    "object",
    "need",
    "make",
    "model",
    "year",
    "color",
    "receive",
    "arguments",
    "actually",
    "assign",
    "car",
    "specific",
    "attributes",
    "need",
    "precede",
    "self",
    "self",
    "referring",
    "object",
    "currently",
    "working",
    "creating",
    "assign",
    "going",
    "say",
    "equals",
    "whatever",
    "make",
    "receive",
    "passed",
    "argument",
    "equals",
    "model",
    "continue",
    "pattern",
    "year",
    "color",
    "right",
    "need",
    "class",
    "car",
    "constructor",
    "assigning",
    "arguments",
    "receive",
    "attributes",
    "car",
    "object",
    "also",
    "two",
    "methods",
    "one",
    "drive",
    "one",
    "stop",
    "start",
    "creating",
    "car",
    "objects",
    "going",
    "back",
    "main",
    "file",
    "create",
    "object",
    "need",
    "unique",
    "name",
    "let",
    "call",
    "first",
    "car",
    "car",
    "one",
    "equals",
    "name",
    "class",
    "car",
    "set",
    "parentheses",
    "order",
    "construct",
    "car",
    "object",
    "need",
    "pass",
    "matching",
    "set",
    "arguments",
    "see",
    "need",
    "pass",
    "make",
    "model",
    "year",
    "color",
    "kind",
    "car",
    "make",
    "let",
    "say",
    "make",
    "going",
    "chevy",
    "need",
    "model",
    "perhaps",
    "corvette",
    "year",
    "2021",
    "good",
    "color",
    "let",
    "say",
    "blue",
    "alright",
    "let",
    "actually",
    "access",
    "cars",
    "attributes",
    "probably",
    "put",
    "one",
    "print",
    "statement",
    "print",
    "car",
    "ones",
    "make",
    "print",
    "chevy",
    "thing",
    "model",
    "year",
    "color",
    "let",
    "change",
    "around",
    "model",
    "year",
    "color",
    "yep",
    "object",
    "chevy",
    "corvette",
    "2021",
    "color",
    "blue",
    "two",
    "methods",
    "well",
    "car",
    "one",
    "would",
    "like",
    "car",
    "use",
    "drive",
    "method",
    "car",
    "driving",
    "let",
    "car",
    "use",
    "stop",
    "method",
    "car",
    "one",
    "dot",
    "stop",
    "car",
    "stopped",
    "one",
    "thing",
    "mention",
    "real",
    "quick",
    "forgot",
    "mention",
    "earlier",
    "within",
    "init",
    "method",
    "see",
    "need",
    "five",
    "arguments",
    "order",
    "construct",
    "car",
    "object",
    "self",
    "make",
    "model",
    "year",
    "color",
    "pass",
    "arguments",
    "passing",
    "anything",
    "self",
    "four",
    "arguments",
    "python",
    "need",
    "pass",
    "done",
    "automatically",
    "us",
    "referring",
    "object",
    "dealing",
    "see",
    "drive",
    "stop",
    "method",
    "need",
    "pass",
    "self",
    "order",
    "execute",
    "method",
    "call",
    "method",
    "need",
    "remember",
    "python",
    "self",
    "need",
    "pass",
    "anything",
    "argument",
    "nice",
    "thing",
    "reuse",
    "class",
    "blueprint",
    "create",
    "car",
    "objects",
    "call",
    "init",
    "method",
    "constructor",
    "time",
    "let",
    "create",
    "second",
    "car",
    "called",
    "car",
    "2",
    "different",
    "kind",
    "car",
    "kinds",
    "arguments",
    "pass",
    "let",
    "say",
    "ford",
    "mustang",
    "year",
    "2022",
    "color",
    "red",
    "right",
    "let",
    "check",
    "card",
    "use",
    "attributes",
    "let",
    "car",
    "2",
    "use",
    "drive",
    "stop",
    "method",
    "ford",
    "mustang",
    "year",
    "2022",
    "color",
    "red",
    "car",
    "driving",
    "car",
    "stopped",
    "one",
    "thing",
    "within",
    "methods",
    "let",
    "replace",
    "car",
    "name",
    "model",
    "working",
    "plus",
    "self",
    "dot",
    "model",
    "plus",
    "driving",
    "self",
    "keyword",
    "think",
    "replacing",
    "self",
    "name",
    "object",
    "working",
    "car",
    "one",
    "using",
    "drive",
    "method",
    "replace",
    "car",
    "one",
    "car",
    "two",
    "called",
    "method",
    "replace",
    "car",
    "think",
    "way",
    "let",
    "thing",
    "stop",
    "plus",
    "self",
    "dot",
    "model",
    "plus",
    "stopped",
    "right",
    "probably",
    "need",
    "anymore",
    "let",
    "car",
    "one",
    "use",
    "drive",
    "stop",
    "method",
    "corvette",
    "driving",
    "corvette",
    "stopped",
    "let",
    "try",
    "car",
    "two",
    "mustang",
    "driving",
    "mustang",
    "stopped",
    "things",
    "independently",
    "let",
    "car",
    "1",
    "use",
    "drive",
    "method",
    "car",
    "2",
    "uses",
    "stop",
    "method",
    "corvette",
    "driving",
    "mustang",
    "stopped",
    "conclusion",
    "class",
    "function",
    "blueprint",
    "create",
    "objects",
    "assign",
    "attributes",
    "describe",
    "object",
    "methods",
    "object",
    "within",
    "class",
    "special",
    "method",
    "called",
    "init",
    "method",
    "pass",
    "arguments",
    "assign",
    "arguments",
    "object",
    "attributes",
    "reuse",
    "class",
    "blueprint",
    "create",
    "objects",
    "basics",
    "object",
    "oriented",
    "programming",
    "python",
    "would",
    "like",
    "copy",
    "code",
    "post",
    "comment",
    "section",
    "yeah",
    "basics",
    "object",
    "oriented",
    "programming",
    "python",
    "hey",
    "going",
    "everybody",
    "bro",
    "hope",
    "well",
    "video",
    "going",
    "explain",
    "basics",
    "class",
    "variables",
    "python",
    "sit",
    "back",
    "relax",
    "enjoy",
    "show",
    "super",
    "quick",
    "video",
    "differences",
    "class",
    "instance",
    "variables",
    "example",
    "let",
    "say",
    "two",
    "car",
    "objects",
    "named",
    "car",
    "one",
    "car",
    "two",
    "passing",
    "bunch",
    "values",
    "car",
    "constructors",
    "within",
    "class",
    "car",
    "init",
    "method",
    "also",
    "known",
    "constructor",
    "assigning",
    "values",
    "variables",
    "found",
    "within",
    "car",
    "constructor",
    "variables",
    "declared",
    "inside",
    "constructor",
    "known",
    "instance",
    "variables",
    "object",
    "unique",
    "values",
    "assigned",
    "variables",
    "class",
    "variable",
    "different",
    "class",
    "variable",
    "declared",
    "inside",
    "class",
    "outside",
    "constructor",
    "set",
    "default",
    "values",
    "variables",
    "let",
    "say",
    "would",
    "like",
    "add",
    "additional",
    "variable",
    "let",
    "say",
    "wheels",
    "wheels",
    "equals",
    "set",
    "default",
    "value",
    "instances",
    "class",
    "car",
    "object",
    "create",
    "set",
    "wheels",
    "equal",
    "four",
    "example",
    "class",
    "variable",
    "whenever",
    "create",
    "car",
    "object",
    "pass",
    "unique",
    "make",
    "model",
    "year",
    "color",
    "default",
    "four",
    "wheels",
    "print",
    "amount",
    "wheels",
    "car",
    "1",
    "car",
    "2",
    "four",
    "wheels",
    "setting",
    "default",
    "value",
    "change",
    "two",
    "wheels",
    "well",
    "cars",
    "two",
    "wheels",
    "maybe",
    "motorcycles",
    "something",
    "actually",
    "change",
    "values",
    "object",
    "copy",
    "variable",
    "set",
    "default",
    "value",
    "let",
    "say",
    "car",
    "one",
    "motorcycle",
    "car",
    "one",
    "dot",
    "wheels",
    "equals",
    "two",
    "print",
    "car",
    "one",
    "wheels",
    "along",
    "card",
    "two",
    "car",
    "one",
    "two",
    "wheels",
    "car",
    "two",
    "still",
    "using",
    "default",
    "amount",
    "wheels",
    "four",
    "another",
    "way",
    "access",
    "class",
    "variable",
    "necessarily",
    "need",
    "create",
    "object",
    "use",
    "name",
    "class",
    "going",
    "turn",
    "lines",
    "comments",
    "print",
    "amount",
    "wheels",
    "class",
    "type",
    "name",
    "class",
    "car",
    "capital",
    "c",
    "name",
    "class",
    "name",
    "followed",
    "name",
    "class",
    "variable",
    "car",
    "dot",
    "wheels",
    "make",
    "sure",
    "spell",
    "right",
    "right",
    "display",
    "four",
    "wheels",
    "decide",
    "change",
    "class",
    "variable",
    "class",
    "well",
    "affect",
    "instances",
    "class",
    "let",
    "say",
    "car",
    "dot",
    "wheels",
    "equals",
    "two",
    "change",
    "mind",
    "decided",
    "create",
    "motorcycles",
    "instead",
    "cars",
    "well",
    "change",
    "wheels",
    "class",
    "variable",
    "use",
    "car",
    "class",
    "well",
    "going",
    "affect",
    "instances",
    "class",
    "see",
    "car",
    "1",
    "car",
    "2",
    "two",
    "wheels",
    "changed",
    "car",
    "1",
    "wheels",
    "affect",
    "car",
    "2",
    "main",
    "difference",
    "class",
    "variable",
    "instance",
    "variable",
    "instance",
    "variable",
    "declared",
    "inside",
    "constructor",
    "given",
    "unique",
    "values",
    "class",
    "variables",
    "declared",
    "within",
    "class",
    "outside",
    "constructor",
    "set",
    "default",
    "value",
    "instances",
    "class",
    "unique",
    "objects",
    "created",
    "change",
    "values",
    "later",
    "would",
    "like",
    "copy",
    "code",
    "post",
    "comment",
    "section",
    "yeah",
    "basics",
    "class",
    "variables",
    "python",
    "hey",
    "going",
    "everybody",
    "bro",
    "hope",
    "well",
    "video",
    "going",
    "explain",
    "inheritance",
    "python",
    "sit",
    "back",
    "relax",
    "enjoy",
    "show",
    "let",
    "talk",
    "irritants",
    "term",
    "inherit",
    "means",
    "receive",
    "derive",
    "left",
    "apply",
    "concept",
    "programming",
    "classes",
    "inherit",
    "something",
    "usually",
    "attributes",
    "methods",
    "another",
    "class",
    "classes",
    "form",
    "relationships",
    "child",
    "receive",
    "everything",
    "parent",
    "class",
    "much",
    "like",
    "inherit",
    "jeans",
    "parents",
    "classes",
    "children",
    "give",
    "whatever",
    "children",
    "today",
    "video",
    "creating",
    "parent",
    "class",
    "called",
    "animal",
    "children",
    "animal",
    "class",
    "inherit",
    "common",
    "attributes",
    "methods",
    "animals",
    "might",
    "kick",
    "video",
    "think",
    "keep",
    "classes",
    "within",
    "file",
    "easier",
    "us",
    "read",
    "understand",
    "let",
    "begin",
    "creating",
    "class",
    "called",
    "animal",
    "top",
    "type",
    "class",
    "animal",
    "attributes",
    "methods",
    "animals",
    "let",
    "say",
    "class",
    "variable",
    "called",
    "alive",
    "set",
    "true",
    "animal",
    "begin",
    "alive",
    "methods",
    "eat",
    "sleep",
    "method",
    "let",
    "define",
    "def",
    "eat",
    "gon",
    "na",
    "call",
    "method",
    "let",
    "print",
    "something",
    "let",
    "print",
    "animal",
    "eating",
    "let",
    "also",
    "create",
    "sleep",
    "method",
    "def",
    "sleep",
    "gon",
    "na",
    "call",
    "method",
    "let",
    "print",
    "something",
    "well",
    "animal",
    "sleeping",
    "animal",
    "class",
    "let",
    "create",
    "separate",
    "classes",
    "specific",
    "types",
    "animals",
    "let",
    "say",
    "class",
    "rabbit",
    "fish",
    "hawk",
    "make",
    "objects",
    "classes",
    "let",
    "begin",
    "rabbit",
    "class",
    "class",
    "rabbit",
    "use",
    "inheritance",
    "class",
    "intend",
    "child",
    "class",
    "class",
    "name",
    "add",
    "set",
    "parentheses",
    "pass",
    "name",
    "parent",
    "class",
    "case",
    "going",
    "animal",
    "add",
    "parentheses",
    "rabbit",
    "child",
    "class",
    "animal",
    "parent",
    "class",
    "child",
    "class",
    "going",
    "inherit",
    "everything",
    "animal",
    "class",
    "time",
    "going",
    "type",
    "pass",
    "rabbit",
    "class",
    "access",
    "class",
    "variable",
    "called",
    "alive",
    "eat",
    "sleep",
    "method",
    "let",
    "define",
    "fish",
    "hawk",
    "class",
    "going",
    "copy",
    "change",
    "rabbit",
    "fish",
    "change",
    "rabbit",
    "hawk",
    "family",
    "tree",
    "animal",
    "parent",
    "class",
    "three",
    "children",
    "rabbit",
    "class",
    "fish",
    "class",
    "hot",
    "class",
    "time",
    "going",
    "write",
    "pass",
    "placeholder",
    "bet",
    "create",
    "objects",
    "classes",
    "let",
    "let",
    "say",
    "object",
    "called",
    "rabbit",
    "rabbit",
    "equals",
    "rabbit",
    "let",
    "thing",
    "fish",
    "hawk",
    "right",
    "three",
    "objects",
    "rabbit",
    "fish",
    "hawk",
    "let",
    "take",
    "look",
    "class",
    "variables",
    "bet",
    "alive",
    "variable",
    "let",
    "check",
    "would",
    "like",
    "print",
    "rabbit",
    "dot",
    "oh",
    "would",
    "look",
    "rabbit",
    "class",
    "class",
    "variable",
    "called",
    "alive",
    "even",
    "though",
    "nothing",
    "within",
    "class",
    "well",
    "used",
    "inheritance",
    "three",
    "children",
    "classes",
    "inherit",
    "everything",
    "parents",
    "attributes",
    "methods",
    "bet",
    "eaten",
    "sleep",
    "functions",
    "well",
    "let",
    "check",
    "fish",
    "let",
    "fish",
    "use",
    "eat",
    "method",
    "hawk",
    "use",
    "sleep",
    "method",
    "hawk",
    "dot",
    "sleep",
    "rabbit",
    "alive",
    "fish",
    "eating",
    "hawk",
    "sleeping",
    "even",
    "though",
    "nothing",
    "written",
    "within",
    "specific",
    "types",
    "animal",
    "classes",
    "animals",
    "access",
    "attributes",
    "methods",
    "inheritance",
    "another",
    "benefit",
    "inheritance",
    "need",
    "keep",
    "copying",
    "pasting",
    "code",
    "example",
    "let",
    "say",
    "using",
    "inheritance",
    "would",
    "need",
    "animal",
    "class",
    "could",
    "write",
    "code",
    "way",
    "would",
    "copy",
    "paste",
    "everything",
    "underneath",
    "classes",
    "need",
    "make",
    "change",
    "one",
    "methods",
    "boss",
    "says",
    "know",
    "let",
    "change",
    "sleep",
    "slumber",
    "okay",
    "well",
    "would",
    "go",
    "classes",
    "make",
    "change",
    "manually",
    "bad",
    "like",
    "three",
    "classes",
    "hundreds",
    "going",
    "take",
    "lot",
    "effort",
    "would",
    "nice",
    "list",
    "everything",
    "classes",
    "common",
    "classes",
    "inherit",
    "one",
    "common",
    "class",
    "need",
    "make",
    "changes",
    "within",
    "class",
    "change",
    "apply",
    "different",
    "child",
    "classes",
    "another",
    "benefit",
    "inheritance",
    "make",
    "changes",
    "easier",
    "class",
    "unique",
    "attributes",
    "methods",
    "well",
    "along",
    "attributes",
    "methods",
    "inherit",
    "parents",
    "rabbit",
    "fish",
    "hawk",
    "let",
    "classes",
    "unique",
    "method",
    "well",
    "rabbit",
    "let",
    "define",
    "run",
    "method",
    "rabbit",
    "run",
    "let",
    "print",
    "rabbit",
    "running",
    "going",
    "fix",
    "spacing",
    "right",
    "fish",
    "swim",
    "def",
    "swim",
    "let",
    "print",
    "fish",
    "swimming",
    "lastly",
    "hawk",
    "hawk",
    "fly",
    "def",
    "fly",
    "let",
    "print",
    "hawk",
    "flying",
    "like",
    "said",
    "specific",
    "types",
    "animals",
    "access",
    "attributes",
    "methods",
    "inherit",
    "parents",
    "attributes",
    "methods",
    "well",
    "let",
    "test",
    "methods",
    "rabbit",
    "fish",
    "hawk",
    "objects",
    "let",
    "rabbit",
    "use",
    "run",
    "method",
    "fish",
    "use",
    "swim",
    "method",
    "hawk",
    "use",
    "fly",
    "method",
    "go",
    "rabbit",
    "running",
    "fish",
    "swimming",
    "hawk",
    "flying",
    "conclusion",
    "classes",
    "children",
    "children",
    "classes",
    "inherit",
    "everything",
    "parent",
    "class",
    "parents",
    "attributes",
    "methods",
    "children",
    "classes",
    "implement",
    "unique",
    "attributes",
    "methods",
    "well",
    "inheritance",
    "would",
    "like",
    "copy",
    "code",
    "post",
    "comment",
    "section",
    "yeah",
    "basics",
    "inheritance",
    "using",
    "python",
    "yo",
    "going",
    "everybody",
    "bro",
    "hope",
    "well",
    "video",
    "going",
    "explain",
    "inheritance",
    "works",
    "python",
    "sit",
    "back",
    "relax",
    "enjoy",
    "show",
    "right",
    "welcome",
    "back",
    "everybody",
    "let",
    "talk",
    "inheritance",
    "concept",
    "derived",
    "class",
    "also",
    "known",
    "child",
    "class",
    "inherits",
    "another",
    "derived",
    "class",
    "example",
    "let",
    "say",
    "hierarchy",
    "classes",
    "three",
    "levels",
    "create",
    "family",
    "tree",
    "living",
    "organisms",
    "top",
    "going",
    "class",
    "called",
    "organism",
    "class",
    "inherits",
    "organism",
    "parent",
    "class",
    "receive",
    "one",
    "attribute",
    "one",
    "variable",
    "named",
    "alive",
    "set",
    "true",
    "organism",
    "begin",
    "alive",
    "let",
    "say",
    "child",
    "class",
    "inherit",
    "organism",
    "parent",
    "class",
    "let",
    "say",
    "animal",
    "class",
    "animal",
    "inherits",
    "organism",
    "animal",
    "create",
    "alive",
    "attribute",
    "set",
    "true",
    "animals",
    "eat",
    "let",
    "define",
    "function",
    "least",
    "believe",
    "animals",
    "eat",
    "let",
    "pretend",
    "animal",
    "eating",
    "stop",
    "let",
    "create",
    "class",
    "specific",
    "type",
    "animal",
    "like",
    "dogs",
    "let",
    "create",
    "dog",
    "class",
    "class",
    "dog",
    "inherits",
    "animal",
    "class",
    "dogs",
    "able",
    "bark",
    "let",
    "create",
    "function",
    "print",
    "dog",
    "barking",
    "okay",
    "inheritance",
    "derived",
    "child",
    "class",
    "inherit",
    "another",
    "child",
    "class",
    "kind",
    "like",
    "dog",
    "class",
    "child",
    "animal",
    "class",
    "parent",
    "parent",
    "parent",
    "class",
    "would",
    "like",
    "grandparent",
    "right",
    "added",
    "another",
    "layer",
    "top",
    "hierarchy",
    "well",
    "parent",
    "grandparent",
    "would",
    "like",
    "great",
    "grandparent",
    "think",
    "least",
    "let",
    "create",
    "dog",
    "object",
    "verify",
    "everything",
    "working",
    "let",
    "call",
    "dog",
    "dog",
    "dog",
    "object",
    "access",
    "attribute",
    "named",
    "alive",
    "dog",
    "object",
    "receives",
    "attribute",
    "organism",
    "class",
    "print",
    "true",
    "print",
    "whatever",
    "attribute",
    "contains",
    "dog",
    "able",
    "eat",
    "receives",
    "method",
    "animal",
    "parent",
    "class",
    "lastly",
    "dog",
    "able",
    "bark",
    "method",
    "defined",
    "within",
    "class",
    "inheritance",
    "works",
    "concept",
    "child",
    "class",
    "inherit",
    "another",
    "child",
    "class",
    "like",
    "think",
    "like",
    "family",
    "tree",
    "child",
    "class",
    "parent",
    "parent",
    "parent",
    "would",
    "like",
    "grandparent",
    "basically",
    "would",
    "like",
    "copy",
    "code",
    "post",
    "comment",
    "section",
    "yeah",
    "inheritance",
    "works",
    "python",
    "hey",
    "going",
    "everybody",
    "bro",
    "hope",
    "well",
    "video",
    "going",
    "show",
    "multiple",
    "inheritance",
    "works",
    "python",
    "sit",
    "back",
    "relax",
    "enjoy",
    "show",
    "right",
    "people",
    "multiple",
    "inheritance",
    "multiple",
    "inheritance",
    "concept",
    "child",
    "class",
    "derived",
    "one",
    "parent",
    "class",
    "example",
    "let",
    "say",
    "children",
    "classes",
    "going",
    "certain",
    "types",
    "animals",
    "would",
    "like",
    "animal",
    "classes",
    "inherit",
    "either",
    "prepared",
    "class",
    "predator",
    "parrot",
    "class",
    "depending",
    "type",
    "animal",
    "animals",
    "animal",
    "kingdom",
    "prey",
    "predators",
    "one",
    "example",
    "comes",
    "mind",
    "would",
    "fish",
    "fish",
    "eat",
    "smaller",
    "fish",
    "also",
    "get",
    "eaten",
    "larger",
    "fish",
    "two",
    "classes",
    "prey",
    "predator",
    "dedicated",
    "method",
    "class",
    "inherits",
    "prey",
    "parent",
    "class",
    "access",
    "flea",
    "method",
    "print",
    "animal",
    "please",
    "class",
    "inherits",
    "predator",
    "parent",
    "class",
    "class",
    "access",
    "hunt",
    "method",
    "print",
    "animal",
    "hunting",
    "possible",
    "animals",
    "flee",
    "hunt",
    "need",
    "inherit",
    "classes",
    "prey",
    "predator",
    "multiple",
    "inheritance",
    "comes",
    "let",
    "create",
    "classes",
    "based",
    "certain",
    "types",
    "animals",
    "let",
    "say",
    "class",
    "rabbit",
    "rabbit",
    "inherit",
    "prey",
    "class",
    "rabbits",
    "typically",
    "prey",
    "predators",
    "know",
    "could",
    "killer",
    "rabbits",
    "run",
    "yet",
    "let",
    "class",
    "hawk",
    "inherit",
    "predator",
    "class",
    "lastly",
    "fish",
    "fish",
    "prey",
    "predators",
    "inherit",
    "classes",
    "separate",
    "class",
    "comma",
    "prey",
    "comma",
    "predator",
    "simple",
    "let",
    "create",
    "object",
    "classes",
    "rabbit",
    "equals",
    "rabbit",
    "hawk",
    "equals",
    "hawk",
    "fish",
    "equals",
    "fish",
    "let",
    "verify",
    "different",
    "methods",
    "objects",
    "inherited",
    "rabbit",
    "access",
    "flea",
    "method",
    "hunt",
    "method",
    "let",
    "test",
    "yep",
    "animal",
    "flees",
    "hawk",
    "object",
    "access",
    "hunt",
    "method",
    "flea",
    "method",
    "animal",
    "hunting",
    "lastly",
    "fish",
    "object",
    "access",
    "flea",
    "hunt",
    "method",
    "take",
    "look",
    "right",
    "hand",
    "side",
    "window",
    "shows",
    "class",
    "inherited",
    "method",
    "fleet",
    "comes",
    "parent",
    "class",
    "prey",
    "hunt",
    "comes",
    "apparent",
    "class",
    "predator",
    "fish",
    "flee",
    "hunt",
    "typically",
    "considered",
    "prey",
    "predators",
    "animal",
    "flees",
    "animal",
    "hunting",
    "basically",
    "multiple",
    "inheritance",
    "concept",
    "child",
    "class",
    "derived",
    "one",
    "parent",
    "class",
    "basically",
    "multiple",
    "inheritance",
    "post",
    "code",
    "comment",
    "section",
    "well",
    "yeah",
    "multiple",
    "inheritance",
    "works",
    "python",
    "hey",
    "going",
    "everybody",
    "bro",
    "hope",
    "well",
    "video",
    "going",
    "teach",
    "guys",
    "method",
    "overriding",
    "python",
    "sit",
    "back",
    "relax",
    "enjoy",
    "show",
    "super",
    "quick",
    "video",
    "method",
    "overriding",
    "two",
    "classes",
    "class",
    "called",
    "animal",
    "class",
    "called",
    "rabbit",
    "rabbit",
    "inherits",
    "animal",
    "class",
    "therefore",
    "rabbit",
    "child",
    "class",
    "animal",
    "parent",
    "class",
    "within",
    "animal",
    "class",
    "one",
    "method",
    "method",
    "called",
    "eat",
    "call",
    "method",
    "print",
    "animal",
    "eating",
    "rabbit",
    "class",
    "inherits",
    "animal",
    "class",
    "therefore",
    "rabbit",
    "access",
    "eat",
    "method",
    "create",
    "rabbit",
    "object",
    "rabbit",
    "used",
    "eat",
    "method",
    "well",
    "going",
    "print",
    "animal",
    "eating",
    "method",
    "writing",
    "ability",
    "object",
    "oriented",
    "programming",
    "language",
    "allow",
    "subclass",
    "also",
    "known",
    "child",
    "class",
    "provide",
    "specific",
    "implementation",
    "method",
    "already",
    "provided",
    "one",
    "parents",
    "case",
    "going",
    "override",
    "eat",
    "method",
    "provide",
    "specific",
    "implementation",
    "rabbit",
    "class",
    "override",
    "method",
    "within",
    "child",
    "class",
    "need",
    "define",
    "method",
    "matching",
    "method",
    "signature",
    "combination",
    "method",
    "name",
    "plus",
    "parameters",
    "together",
    "known",
    "method",
    "signature",
    "within",
    "child",
    "class",
    "define",
    "eat",
    "method",
    "parameters",
    "def",
    "eat",
    "case",
    "parameter",
    "self",
    "keep",
    "simple",
    "provide",
    "specific",
    "implementation",
    "eat",
    "method",
    "specifically",
    "rabbits",
    "let",
    "print",
    "something",
    "closely",
    "associated",
    "rabbits",
    "rabbit",
    "eating",
    "carrot",
    "run",
    "program",
    "instead",
    "use",
    "implementation",
    "method",
    "instead",
    "one",
    "inherits",
    "parent",
    "class",
    "animal",
    "basically",
    "speaking",
    "object",
    "use",
    "method",
    "closely",
    "associated",
    "first",
    "relying",
    "method",
    "may",
    "inherit",
    "parent",
    "class",
    "example",
    "using",
    "version",
    "eat",
    "method",
    "specifically",
    "rabbits",
    "instead",
    "version",
    "inherit",
    "parent",
    "class",
    "animal",
    "basics",
    "method",
    "overriding",
    "post",
    "code",
    "comment",
    "section",
    "well",
    "yeah",
    "override",
    "method",
    "using",
    "python",
    "hey",
    "going",
    "everybody",
    "bro",
    "hope",
    "well",
    "video",
    "going",
    "teach",
    "guys",
    "method",
    "chaining",
    "python",
    "sit",
    "back",
    "relax",
    "enjoy",
    "show",
    "right",
    "everybody",
    "let",
    "talk",
    "method",
    "training",
    "method",
    "chaining",
    "used",
    "call",
    "multiple",
    "methods",
    "sequentially",
    "call",
    "performs",
    "action",
    "object",
    "return",
    "self",
    "example",
    "method",
    "chaining",
    "would",
    "useful",
    "let",
    "say",
    "class",
    "named",
    "car",
    "car",
    "four",
    "methods",
    "turn",
    "drive",
    "break",
    "turn",
    "print",
    "simple",
    "message",
    "beginning",
    "turn",
    "turn",
    "print",
    "start",
    "engine",
    "drive",
    "print",
    "drive",
    "car",
    "brake",
    "print",
    "step",
    "brakes",
    "turn",
    "print",
    "turn",
    "engine",
    "let",
    "say",
    "car",
    "object",
    "car",
    "equals",
    "car",
    "would",
    "like",
    "car",
    "object",
    "use",
    "turn",
    "method",
    "immediately",
    "followed",
    "drive",
    "method",
    "coding",
    "things",
    "previously",
    "may",
    "write",
    "something",
    "name",
    "object",
    "case",
    "car",
    "dot",
    "method",
    "use",
    "would",
    "like",
    "card",
    "use",
    "turn",
    "method",
    "followed",
    "car",
    "dot",
    "drive",
    "currently",
    "take",
    "two",
    "lines",
    "code",
    "print",
    "start",
    "engine",
    "drive",
    "car",
    "method",
    "training",
    "call",
    "multiple",
    "methods",
    "sequentially",
    "format",
    "going",
    "little",
    "bit",
    "different",
    "write",
    "code",
    "using",
    "method",
    "chaining",
    "might",
    "look",
    "little",
    "something",
    "like",
    "first",
    "method",
    "call",
    "would",
    "add",
    "dot",
    "additional",
    "method",
    "would",
    "like",
    "call",
    "example",
    "turn",
    "method",
    "immediately",
    "call",
    "drive",
    "method",
    "one",
    "thing",
    "need",
    "add",
    "using",
    "python",
    "method",
    "training",
    "normally",
    "work",
    "call",
    "method",
    "python",
    "nothing",
    "returned",
    "python",
    "return",
    "none",
    "see",
    "attribute",
    "error",
    "none",
    "type",
    "object",
    "attribute",
    "drive",
    "need",
    "return",
    "method",
    "using",
    "method",
    "training",
    "let",
    "add",
    "return",
    "self",
    "methods",
    "let",
    "drive",
    "break",
    "turn",
    "method",
    "work",
    "start",
    "engine",
    "drive",
    "car",
    "think",
    "like",
    "finish",
    "calling",
    "method",
    "python",
    "going",
    "return",
    "self",
    "going",
    "return",
    "car",
    "immediately",
    "use",
    "another",
    "example",
    "let",
    "say",
    "would",
    "like",
    "call",
    "break",
    "method",
    "followed",
    "turn",
    "method",
    "would",
    "car",
    "dot",
    "break",
    "parentheses",
    "followed",
    "dot",
    "turn",
    "print",
    "step",
    "brakes",
    "turn",
    "engine",
    "extreme",
    "example",
    "let",
    "say",
    "would",
    "like",
    "call",
    "four",
    "methods",
    "order",
    "would",
    "car",
    "dot",
    "turn",
    "followed",
    "dot",
    "drive",
    "dot",
    "break",
    "dot",
    "turn",
    "call",
    "four",
    "methods",
    "order",
    "starting",
    "leftmost",
    "method",
    "start",
    "engine",
    "drive",
    "car",
    "step",
    "brakes",
    "turn",
    "engine",
    "one",
    "long",
    "method",
    "chain",
    "like",
    "might",
    "become",
    "difficult",
    "read",
    "would",
    "recommend",
    "lot",
    "method",
    "chaining",
    "method",
    "call",
    "hit",
    "enter",
    "move",
    "method",
    "call",
    "new",
    "line",
    "look",
    "something",
    "like",
    "backslash",
    "might",
    "inserted",
    "line",
    "continuation",
    "character",
    "little",
    "readable",
    "know",
    "still",
    "thing",
    "basically",
    "right",
    "everybody",
    "method",
    "training",
    "used",
    "call",
    "multiple",
    "methods",
    "sequentially",
    "call",
    "performs",
    "action",
    "object",
    "returns",
    "self",
    "would",
    "like",
    "copy",
    "code",
    "post",
    "comments",
    "section",
    "yeah",
    "method",
    "chaining",
    "python",
    "hey",
    "going",
    "everybody",
    "bro",
    "hope",
    "well",
    "video",
    "going",
    "explain",
    "super",
    "function",
    "python",
    "sit",
    "back",
    "relax",
    "enjoy",
    "show",
    "well",
    "since",
    "clicked",
    "video",
    "probably",
    "discuss",
    "super",
    "function",
    "super",
    "function",
    "used",
    "give",
    "access",
    "methods",
    "parent",
    "class",
    "returns",
    "temporary",
    "object",
    "parent",
    "class",
    "used",
    "example",
    "super",
    "function",
    "would",
    "useful",
    "let",
    "take",
    "program",
    "written",
    "three",
    "classes",
    "class",
    "called",
    "rectangle",
    "parent",
    "class",
    "two",
    "children",
    "classes",
    "square",
    "cube",
    "creating",
    "square",
    "object",
    "cube",
    "object",
    "need",
    "pass",
    "length",
    "width",
    "squares",
    "length",
    "width",
    "height",
    "cubes",
    "programming",
    "like",
    "repeat",
    "code",
    "like",
    "reuse",
    "code",
    "take",
    "look",
    "within",
    "knit",
    "methods",
    "square",
    "cube",
    "repeating",
    "equals",
    "length",
    "equals",
    "width",
    "twice",
    "init",
    "methods",
    "one",
    "thing",
    "similarities",
    "square",
    "cube",
    "class",
    "place",
    "within",
    "rectangle",
    "class",
    "reuse",
    "code",
    "going",
    "copy",
    "indent",
    "method",
    "within",
    "square",
    "class",
    "paste",
    "within",
    "rectangle",
    "parent",
    "class",
    "order",
    "access",
    "init",
    "method",
    "use",
    "super",
    "function",
    "longer",
    "need",
    "two",
    "lines",
    "code",
    "going",
    "ask",
    "rectangle",
    "class",
    "use",
    "init",
    "method",
    "going",
    "type",
    "super",
    "parentheses",
    "dot",
    "name",
    "function",
    "parent",
    "class",
    "would",
    "like",
    "use",
    "would",
    "like",
    "use",
    "init",
    "method",
    "need",
    "send",
    "length",
    "width",
    "requires",
    "let",
    "send",
    "going",
    "pass",
    "length",
    "width",
    "thing",
    "cube",
    "init",
    "method",
    "copy",
    "line",
    "code",
    "longer",
    "need",
    "two",
    "lines",
    "code",
    "reusing",
    "init",
    "method",
    "within",
    "parent",
    "class",
    "rectangle",
    "still",
    "need",
    "keep",
    "line",
    "assign",
    "height",
    "difference",
    "square",
    "cube",
    "class",
    "reuse",
    "init",
    "method",
    "within",
    "rectangle",
    "parent",
    "class",
    "thinking",
    "probably",
    "test",
    "see",
    "length",
    "width",
    "assigned",
    "attributes",
    "one",
    "way",
    "think",
    "would",
    "fun",
    "would",
    "create",
    "area",
    "method",
    "squares",
    "volume",
    "method",
    "cubes",
    "let",
    "define",
    "area",
    "method",
    "within",
    "square",
    "class",
    "def",
    "area",
    "would",
    "like",
    "return",
    "self",
    "dot",
    "length",
    "times",
    "self",
    "dot",
    "width",
    "create",
    "volume",
    "method",
    "within",
    "cubes",
    "let",
    "def",
    "let",
    "change",
    "volume",
    "multiply",
    "length",
    "times",
    "width",
    "times",
    "height",
    "need",
    "type",
    "self",
    "dot",
    "pipe",
    "call",
    "methods",
    "get",
    "area",
    "square",
    "volume",
    "cube",
    "let",
    "print",
    "square",
    "dot",
    "area",
    "cube",
    "dot",
    "volume",
    "init",
    "method",
    "actually",
    "used",
    "length",
    "width",
    "assigned",
    "attributes",
    "looks",
    "like",
    "conclusion",
    "super",
    "function",
    "used",
    "give",
    "access",
    "methods",
    "parent",
    "class",
    "returns",
    "temporary",
    "object",
    "parent",
    "class",
    "used",
    "order",
    "access",
    "methods",
    "parent",
    "class",
    "also",
    "known",
    "super",
    "class",
    "example",
    "within",
    "init",
    "methods",
    "square",
    "cube",
    "immediately",
    "called",
    "init",
    "method",
    "parent",
    "class",
    "pass",
    "arguments",
    "classes",
    "common",
    "would",
    "like",
    "copy",
    "code",
    "post",
    "comment",
    "section",
    "yeah",
    "super",
    "function",
    "works",
    "python",
    "hey",
    "going",
    "everybody",
    "bro",
    "hope",
    "well",
    "video",
    "going",
    "explain",
    "abstract",
    "classes",
    "work",
    "python",
    "sit",
    "back",
    "relax",
    "enjoy",
    "show",
    "hey",
    "good",
    "everybody",
    "let",
    "talk",
    "abstract",
    "classes",
    "abstract",
    "classes",
    "prevent",
    "user",
    "creating",
    "object",
    "class",
    "think",
    "abstract",
    "class",
    "template",
    "idea",
    "real",
    "like",
    "ghost",
    "class",
    "basically",
    "plus",
    "abstract",
    "class",
    "compels",
    "user",
    "override",
    "abstract",
    "methods",
    "within",
    "child",
    "class",
    "also",
    "form",
    "checks",
    "balances",
    "well",
    "discuss",
    "later",
    "small",
    "program",
    "written",
    "let",
    "say",
    "three",
    "classes",
    "class",
    "vehicle",
    "car",
    "motorcycle",
    "car",
    "motorcycle",
    "children",
    "classes",
    "vehicle",
    "class",
    "within",
    "vehicle",
    "class",
    "go",
    "method",
    "currently",
    "defining",
    "actually",
    "implementing",
    "writing",
    "pass",
    "within",
    "car",
    "motorcycle",
    "overriding",
    "method",
    "creating",
    "implementation",
    "skull",
    "method",
    "inherit",
    "go",
    "method",
    "car",
    "print",
    "drive",
    "car",
    "go",
    "method",
    "motorcycle",
    "class",
    "print",
    "ride",
    "motorcycle",
    "currently",
    "creating",
    "object",
    "classes",
    "generic",
    "vehicle",
    "object",
    "car",
    "object",
    "motorcycle",
    "object",
    "running",
    "program",
    "currently",
    "go",
    "method",
    "within",
    "vehicle",
    "class",
    "implemented",
    "wo",
    "print",
    "anything",
    "go",
    "method",
    "within",
    "car",
    "class",
    "print",
    "drive",
    "car",
    "go",
    "method",
    "within",
    "motorcycle",
    "class",
    "print",
    "ride",
    "motorcycle",
    "said",
    "let",
    "pretend",
    "coding",
    "next",
    "need",
    "speed",
    "game",
    "would",
    "like",
    "user",
    "create",
    "object",
    "specific",
    "kind",
    "vehicle",
    "whether",
    "car",
    "car",
    "class",
    "motorcycle",
    "motorcycle",
    "class",
    "would",
    "like",
    "prevent",
    "user",
    "creating",
    "object",
    "vehicle",
    "class",
    "vehicle",
    "class",
    "generic",
    "implementations",
    "set",
    "vehicle",
    "would",
    "like",
    "somebody",
    "unlocked",
    "ghost",
    "car",
    "invisible",
    "car",
    "actually",
    "exist",
    "missing",
    "lot",
    "features",
    "need",
    "user",
    "create",
    "object",
    "child",
    "class",
    "fully",
    "fleshed",
    "one",
    "way",
    "prevent",
    "user",
    "creating",
    "object",
    "class",
    "well",
    "turn",
    "class",
    "abstract",
    "class",
    "video",
    "go",
    "figure",
    "first",
    "step",
    "creating",
    "abstract",
    "class",
    "need",
    "imports",
    "top",
    "program",
    "write",
    "abc",
    "abc",
    "acronym",
    "abstract",
    "based",
    "class",
    "abc",
    "abc",
    "import",
    "abc",
    "capital",
    "comma",
    "abstract",
    "method",
    "right",
    "vehicle",
    "class",
    "class",
    "intend",
    "abstract",
    "class",
    "add",
    "us",
    "parentheses",
    "vehicle",
    "class",
    "inherit",
    "abc",
    "class",
    "methods",
    "within",
    "vehicle",
    "class",
    "going",
    "add",
    "decorator",
    "top",
    "abstract",
    "method",
    "right",
    "prevented",
    "creating",
    "vehicle",
    "object",
    "vehicle",
    "class",
    "abstract",
    "class",
    "give",
    "physical",
    "form",
    "physical",
    "manifestation",
    "attempt",
    "see",
    "type",
    "error",
    "ca",
    "instantiate",
    "abstract",
    "class",
    "vehicle",
    "abstract",
    "methods",
    "go",
    "abstract",
    "class",
    "class",
    "contains",
    "one",
    "abstract",
    "methods",
    "abstract",
    "method",
    "method",
    "declaration",
    "implementation",
    "definition",
    "abstract",
    "class",
    "contains",
    "one",
    "abstract",
    "methods",
    "remove",
    "one",
    "abstract",
    "method",
    "within",
    "vehicle",
    "class",
    "well",
    "could",
    "still",
    "create",
    "vehicle",
    "object",
    "going",
    "turn",
    "line",
    "comment",
    "go",
    "method",
    "anymore",
    "see",
    "still",
    "create",
    "vehicle",
    "object",
    "would",
    "like",
    "prevent",
    "user",
    "need",
    "least",
    "one",
    "abstract",
    "method",
    "within",
    "vehicle",
    "class",
    "going",
    "go",
    "ahead",
    "add",
    "go",
    "method",
    "back",
    "additional",
    "feature",
    "abstract",
    "classes",
    "compel",
    "user",
    "override",
    "abstract",
    "methods",
    "within",
    "child",
    "class",
    "method",
    "abstract",
    "declaration",
    "implementation",
    "let",
    "say",
    "create",
    "vehicle",
    "class",
    "abstract",
    "vehicle",
    "class",
    "creating",
    "children",
    "classes",
    "car",
    "motorcycle",
    "let",
    "say",
    "paying",
    "attention",
    "forget",
    "add",
    "go",
    "method",
    "write",
    "pass",
    "within",
    "motorcycle",
    "class",
    "currently",
    "missing",
    "go",
    "method",
    "within",
    "motorcycle",
    "class",
    "well",
    "python",
    "going",
    "prevent",
    "running",
    "type",
    "air",
    "ca",
    "instantiate",
    "abstract",
    "class",
    "vehicle",
    "abstract",
    "methods",
    "go",
    "inheriting",
    "abstract",
    "class",
    "good",
    "form",
    "checks",
    "balances",
    "sure",
    "children",
    "classes",
    "missing",
    "implementations",
    "methods",
    "inherit",
    "additional",
    "way",
    "thinking",
    "vehicle",
    "class",
    "telling",
    "children",
    "going",
    "inherit",
    "need",
    "override",
    "abstract",
    "method",
    "mine",
    "well",
    "going",
    "let",
    "instantiated",
    "order",
    "us",
    "create",
    "cart",
    "motorcycle",
    "class",
    "need",
    "override",
    "go",
    "method",
    "inherit",
    "parent",
    "class",
    "vehicle",
    "provide",
    "implementation",
    "let",
    "say",
    "create",
    "additional",
    "method",
    "let",
    "say",
    "stop",
    "method",
    "let",
    "define",
    "def",
    "stop",
    "time",
    "write",
    "pass",
    "make",
    "abstract",
    "method",
    "add",
    "decorator",
    "abstract",
    "method",
    "car",
    "motorcycle",
    "need",
    "implement",
    "method",
    "stop",
    "currently",
    "missing",
    "see",
    "class",
    "car",
    "must",
    "implement",
    "abstract",
    "methods",
    "thing",
    "applies",
    "motorcycle",
    "well",
    "need",
    "override",
    "method",
    "provide",
    "implementation",
    "let",
    "remove",
    "decorator",
    "let",
    "print",
    "something",
    "let",
    "print",
    "car",
    "stopped",
    "thing",
    "motorcycle",
    "def",
    "stop",
    "let",
    "say",
    "motorcycle",
    "stopped",
    "call",
    "stop",
    "method",
    "types",
    "vehicles",
    "car",
    "dot",
    "stop",
    "motorcycle",
    "dot",
    "stop",
    "right",
    "create",
    "car",
    "motorcycle",
    "object",
    "overriding",
    "abstract",
    "methods",
    "found",
    "within",
    "parent",
    "class",
    "vehicle",
    "right",
    "everybody",
    "basics",
    "abstract",
    "classes",
    "class",
    "contains",
    "one",
    "abstract",
    "methods",
    "abstract",
    "method",
    "method",
    "declaration",
    "implementation",
    "benefits",
    "using",
    "abstract",
    "class",
    "prevent",
    "user",
    "creating",
    "object",
    "class",
    "plus",
    "compels",
    "user",
    "override",
    "abstract",
    "methods",
    "found",
    "within",
    "child",
    "class",
    "would",
    "like",
    "copy",
    "code",
    "post",
    "comments",
    "section",
    "yeah",
    "abstract",
    "classes",
    "work",
    "python",
    "hey",
    "going",
    "everybody",
    "bro",
    "hope",
    "well",
    "video",
    "going",
    "explain",
    "pass",
    "objects",
    "arguments",
    "sit",
    "back",
    "relax",
    "enjoy",
    "show",
    "ladies",
    "gentlemen",
    "today",
    "video",
    "going",
    "demonstrating",
    "pass",
    "objects",
    "arguments",
    "example",
    "let",
    "say",
    "class",
    "car",
    "one",
    "class",
    "variable",
    "called",
    "color",
    "color",
    "equals",
    "none",
    "calling",
    "function",
    "accepts",
    "object",
    "argument",
    "well",
    "color",
    "let",
    "create",
    "function",
    "named",
    "change",
    "color",
    "make",
    "sure",
    "define",
    "function",
    "within",
    "cart",
    "class",
    "technically",
    "would",
    "method",
    "car",
    "class",
    "would",
    "like",
    "separate",
    "function",
    "outside",
    "car",
    "class",
    "need",
    "set",
    "parameters",
    "would",
    "like",
    "accept",
    "car",
    "object",
    "well",
    "color",
    "first",
    "parameter",
    "let",
    "say",
    "car",
    "make",
    "sure",
    "uppercase",
    "capital",
    "python",
    "like",
    "argument",
    "names",
    "lowercase",
    "pass",
    "car",
    "give",
    "nickname",
    "car",
    "would",
    "also",
    "like",
    "pass",
    "color",
    "let",
    "set",
    "parameter",
    "called",
    "color",
    "pass",
    "car",
    "assign",
    "car",
    "color",
    "whatever",
    "color",
    "receive",
    "car",
    "dot",
    "color",
    "equals",
    "color",
    "let",
    "create",
    "car",
    "objects",
    "let",
    "say",
    "car",
    "one",
    "equals",
    "car",
    "car",
    "two",
    "equals",
    "car",
    "car",
    "three",
    "equals",
    "cart",
    "currently",
    "print",
    "colors",
    "see",
    "print",
    "car",
    "one",
    "dot",
    "color",
    "repeat",
    "steps",
    "two",
    "three",
    "calling",
    "function",
    "yet",
    "colors",
    "set",
    "none",
    "basically",
    "cars",
    "color",
    "know",
    "iron",
    "something",
    "whatever",
    "cars",
    "made",
    "aluminum",
    "plastic",
    "stuff",
    "like",
    "okay",
    "let",
    "call",
    "function",
    "change",
    "color",
    "perhaps",
    "right",
    "order",
    "call",
    "function",
    "need",
    "pass",
    "car",
    "object",
    "well",
    "color",
    "let",
    "pass",
    "car",
    "one",
    "color",
    "perhaps",
    "red",
    "repeat",
    "steps",
    "two",
    "three",
    "let",
    "say",
    "car",
    "two",
    "white",
    "car",
    "3",
    "blue",
    "calling",
    "function",
    "car",
    "object",
    "color",
    "assigning",
    "color",
    "car",
    "whatever",
    "color",
    "receive",
    "cars",
    "order",
    "car",
    "1",
    "2",
    "3",
    "red",
    "white",
    "blue",
    "one",
    "thing",
    "know",
    "name",
    "parameter",
    "accepts",
    "object",
    "necessarily",
    "need",
    "name",
    "class",
    "name",
    "created",
    "object",
    "passing",
    "could",
    "name",
    "something",
    "else",
    "entirely",
    "perhaps",
    "vehicle",
    "want",
    "sure",
    "least",
    "descriptive",
    "kind",
    "object",
    "would",
    "like",
    "pass",
    "limited",
    "passing",
    "car",
    "objects",
    "pass",
    "sorts",
    "objects",
    "need",
    "pass",
    "object",
    "well",
    "color",
    "time",
    "let",
    "create",
    "class",
    "called",
    "motorcycle",
    "class",
    "motorcycle",
    "class",
    "also",
    "color",
    "set",
    "none",
    "actually",
    "reusing",
    "function",
    "sorts",
    "different",
    "kinds",
    "vehicles",
    "let",
    "create",
    "vehicle",
    "name",
    "bike",
    "one",
    "short",
    "bike",
    "one",
    "equals",
    "motorcycle",
    "let",
    "call",
    "change",
    "color",
    "function",
    "pass",
    "object",
    "well",
    "color",
    "time",
    "pass",
    "bike",
    "object",
    "well",
    "color",
    "think",
    "black",
    "counts",
    "color",
    "let",
    "print",
    "bike",
    "color",
    "work",
    "red",
    "white",
    "blue",
    "black",
    "conclusion",
    "pass",
    "objects",
    "arguments",
    "function",
    "much",
    "like",
    "variables",
    "however",
    "type",
    "objects",
    "pass",
    "may",
    "limited",
    "based",
    "required",
    "attributes",
    "methods",
    "given",
    "class",
    "object",
    "might",
    "get",
    "next",
    "video",
    "duct",
    "typing",
    "would",
    "like",
    "copy",
    "code",
    "post",
    "comment",
    "section",
    "yeah",
    "pass",
    "objects",
    "arguments",
    "using",
    "python",
    "hey",
    "going",
    "everybody",
    "bro",
    "hope",
    "well",
    "video",
    "going",
    "explain",
    "duck",
    "typing",
    "python",
    "sit",
    "back",
    "relax",
    "enjoy",
    "show",
    "hope",
    "like",
    "ducks",
    "topic",
    "video",
    "duct",
    "typing",
    "concept",
    "class",
    "object",
    "less",
    "important",
    "methods",
    "attributes",
    "class",
    "might",
    "class",
    "type",
    "checked",
    "minimum",
    "methods",
    "attributes",
    "present",
    "based",
    "popular",
    "phrase",
    "walks",
    "like",
    "duck",
    "quacks",
    "like",
    "duck",
    "must",
    "duck",
    "example",
    "two",
    "classes",
    "class",
    "duck",
    "class",
    "chicken",
    "duck",
    "chicken",
    "walk",
    "talk",
    "methods",
    "print",
    "something",
    "different",
    "duck",
    "class",
    "walk",
    "method",
    "print",
    "duck",
    "walking",
    "duck",
    "talk",
    "method",
    "print",
    "duck",
    "quacking",
    "chicken",
    "class",
    "named",
    "methods",
    "walk",
    "talk",
    "print",
    "something",
    "slightly",
    "different",
    "slightly",
    "different",
    "variation",
    "print",
    "method",
    "print",
    "chicken",
    "walking",
    "talk",
    "method",
    "print",
    "chicken",
    "clucking",
    "let",
    "say",
    "third",
    "class",
    "class",
    "called",
    "person",
    "one",
    "method",
    "within",
    "person",
    "class",
    "let",
    "say",
    "attempting",
    "catch",
    "duck",
    "pass",
    "self",
    "need",
    "pass",
    "duck",
    "object",
    "argument",
    "let",
    "type",
    "duck",
    "within",
    "method",
    "duck",
    "use",
    "walk",
    "method",
    "well",
    "talk",
    "method",
    "maybe",
    "print",
    "something",
    "caught",
    "critter",
    "let",
    "create",
    "object",
    "classes",
    "let",
    "create",
    "duck",
    "object",
    "duck",
    "equals",
    "duck",
    "chicken",
    "object",
    "chicken",
    "equals",
    "chicken",
    "lastly",
    "person",
    "person",
    "equals",
    "person",
    "would",
    "like",
    "person",
    "use",
    "catch",
    "method",
    "need",
    "pass",
    "duck",
    "argument",
    "person",
    "let",
    "type",
    "person",
    "dot",
    "catch",
    "need",
    "send",
    "duck",
    "object",
    "required",
    "parameter",
    "passing",
    "duck",
    "object",
    "created",
    "soon",
    "catch",
    "duck",
    "going",
    "use",
    "walk",
    "talk",
    "method",
    "print",
    "caught",
    "critter",
    "would",
    "expect",
    "print",
    "duck",
    "walking",
    "stuck",
    "quacking",
    "caught",
    "critter",
    "duct",
    "typing",
    "pass",
    "different",
    "type",
    "object",
    "long",
    "methods",
    "attributes",
    "duck",
    "could",
    "pass",
    "chicken",
    "chicken",
    "also",
    "walk",
    "talk",
    "time",
    "let",
    "pass",
    "chicken",
    "argument",
    "still",
    "work",
    "even",
    "though",
    "parameter",
    "set",
    "take",
    "duck",
    "object",
    "chicken",
    "walking",
    "chicken",
    "clucking",
    "caught",
    "critter",
    "layman",
    "terms",
    "think",
    "like",
    "python",
    "examining",
    "chicken",
    "object",
    "using",
    "walk",
    "method",
    "using",
    "talk",
    "method",
    "required",
    "python",
    "saying",
    "well",
    "close",
    "enough",
    "remember",
    "walks",
    "like",
    "duck",
    "quacks",
    "like",
    "duck",
    "must",
    "duck",
    "duct",
    "typing",
    "concept",
    "class",
    "object",
    "less",
    "important",
    "methods",
    "attributes",
    "might",
    "class",
    "type",
    "checked",
    "minimum",
    "methods",
    "attributes",
    "present",
    "let",
    "say",
    "chicken",
    "object",
    "chicken",
    "longer",
    "walk",
    "well",
    "pass",
    "chicken",
    "object",
    "anymore",
    "attribute",
    "error",
    "chicken",
    "object",
    "attribute",
    "walk",
    "python",
    "took",
    "look",
    "chicken",
    "noticed",
    "walk",
    "method",
    "well",
    "walking",
    "like",
    "duck",
    "talking",
    "like",
    "duck",
    "count",
    "duck",
    "walk",
    "method",
    "conclusion",
    "class",
    "type",
    "object",
    "important",
    "methods",
    "attributes",
    "class",
    "might",
    "using",
    "duct",
    "typing",
    "class",
    "type",
    "checked",
    "minimum",
    "methods",
    "attributes",
    "present",
    "since",
    "chickens",
    "walk",
    "talk",
    "like",
    "ducks",
    "substitute",
    "ducks",
    "pass",
    "duck",
    "object",
    "method",
    "would",
    "like",
    "copy",
    "code",
    "post",
    "comment",
    "section",
    "yeah",
    "basics",
    "duct",
    "typing",
    "python",
    "hey",
    "going",
    "everybody",
    "bro",
    "hope",
    "well",
    "video",
    "going",
    "discuss",
    "walrus",
    "operator",
    "python",
    "sit",
    "back",
    "relax",
    "enjoy",
    "show",
    "right",
    "people",
    "hope",
    "like",
    "walruses",
    "topic",
    "video",
    "discussing",
    "walrus",
    "operator",
    "also",
    "known",
    "assignment",
    "expression",
    "colon",
    "followed",
    "equal",
    "sign",
    "kind",
    "looks",
    "like",
    "walrus",
    "side",
    "new",
    "feature",
    "python",
    "assigns",
    "values",
    "variables",
    "part",
    "larger",
    "expression",
    "example",
    "walrus",
    "operator",
    "would",
    "useful",
    "let",
    "say",
    "variable",
    "named",
    "happy",
    "happy",
    "equals",
    "true",
    "happy",
    "feeling",
    "set",
    "false",
    "want",
    "let",
    "print",
    "value",
    "contained",
    "within",
    "happy",
    "print",
    "true",
    "console",
    "window",
    "would",
    "cool",
    "could",
    "combine",
    "statements",
    "together",
    "would",
    "want",
    "say",
    "something",
    "happy",
    "equals",
    "true",
    "print",
    "console",
    "window",
    "using",
    "one",
    "line",
    "code",
    "well",
    "normally",
    "ca",
    "using",
    "standard",
    "assignment",
    "operator",
    "one",
    "thing",
    "use",
    "walrus",
    "operator",
    "assigns",
    "value",
    "variable",
    "part",
    "larger",
    "expression",
    "would",
    "technically",
    "allowed",
    "assignment",
    "operator",
    "instead",
    "assignment",
    "expression",
    "walrus",
    "operator",
    "happy",
    "walrus",
    "true",
    "within",
    "print",
    "statement",
    "assign",
    "value",
    "variable",
    "use",
    "part",
    "larger",
    "expression",
    "see",
    "new",
    "variable",
    "happy",
    "assigned",
    "used",
    "one",
    "expression",
    "practical",
    "example",
    "walrus",
    "operator",
    "would",
    "useful",
    "let",
    "say",
    "smell",
    "program",
    "consistently",
    "ask",
    "food",
    "like",
    "put",
    "list",
    "called",
    "foods",
    "foods",
    "equals",
    "list",
    "true",
    "food",
    "equals",
    "input",
    "food",
    "like",
    "food",
    "equals",
    "quit",
    "break",
    "append",
    "list",
    "foods",
    "new",
    "food",
    "item",
    "okay",
    "let",
    "run",
    "loop",
    "continue",
    "long",
    "type",
    "quit",
    "consistently",
    "ask",
    "food",
    "like",
    "place",
    "food",
    "item",
    "list",
    "named",
    "foods",
    "let",
    "begin",
    "food",
    "like",
    "well",
    "like",
    "pizza",
    "like",
    "sushi",
    "like",
    "ice",
    "cream",
    "enough",
    "going",
    "type",
    "quit",
    "exit",
    "program",
    "let",
    "write",
    "program",
    "instead",
    "use",
    "walrus",
    "operator",
    "write",
    "program",
    "using",
    "less",
    "lines",
    "code",
    "use",
    "walrus",
    "operator",
    "would",
    "write",
    "program",
    "would",
    "still",
    "need",
    "list",
    "foods",
    "equals",
    "list",
    "loop",
    "going",
    "look",
    "something",
    "like",
    "food",
    "walrus",
    "operator",
    "input",
    "food",
    "like",
    "right",
    "assignment",
    "portion",
    "use",
    "assignment",
    "portion",
    "within",
    "larger",
    "expression",
    "let",
    "also",
    "check",
    "see",
    "input",
    "equal",
    "quit",
    "alright",
    "iteration",
    "loop",
    "take",
    "list",
    "foods",
    "dot",
    "append",
    "food",
    "written",
    "program",
    "half",
    "lines",
    "code",
    "previously",
    "let",
    "test",
    "food",
    "like",
    "pizza",
    "sushi",
    "ice",
    "cream",
    "quit",
    "well",
    "everybody",
    "basics",
    "walrus",
    "operator",
    "also",
    "known",
    "assignment",
    "expression",
    "new",
    "feature",
    "python",
    "beyond",
    "work",
    "would",
    "check",
    "see",
    "version",
    "python",
    "using",
    "first",
    "assigns",
    "values",
    "variables",
    "part",
    "larger",
    "expression",
    "would",
    "like",
    "copy",
    "code",
    "post",
    "comment",
    "section",
    "yeah",
    "walrus",
    "operator",
    "works",
    "python",
    "hello",
    "going",
    "everybody",
    "bro",
    "hope",
    "well",
    "video",
    "going",
    "show",
    "guys",
    "assign",
    "function",
    "variable",
    "python",
    "sit",
    "back",
    "relax",
    "enjoy",
    "show",
    "hey",
    "today",
    "video",
    "show",
    "assign",
    "function",
    "variable",
    "video",
    "prerequisite",
    "videos",
    "coming",
    "regarding",
    "functions",
    "let",
    "say",
    "function",
    "named",
    "hello",
    "print",
    "word",
    "hello",
    "know",
    "call",
    "function",
    "would",
    "type",
    "name",
    "function",
    "followed",
    "set",
    "parentheses",
    "print",
    "word",
    "hello",
    "set",
    "parenthesis",
    "comes",
    "function",
    "name",
    "portion",
    "call",
    "function",
    "remove",
    "set",
    "parenthesis",
    "afterwards",
    "would",
    "fact",
    "call",
    "function",
    "python",
    "python",
    "pretty",
    "much",
    "treat",
    "everything",
    "objects",
    "including",
    "functions",
    "something",
    "want",
    "show",
    "guys",
    "print",
    "name",
    "function",
    "hello",
    "displayed",
    "memory",
    "address",
    "function",
    "memory",
    "address",
    "function",
    "located",
    "within",
    "computer",
    "memory",
    "hexadecimal",
    "think",
    "like",
    "street",
    "address",
    "one",
    "two",
    "three",
    "fake",
    "street",
    "address",
    "function",
    "within",
    "computer",
    "memory",
    "time",
    "run",
    "program",
    "number",
    "change",
    "see",
    "one",
    "thing",
    "could",
    "could",
    "assign",
    "address",
    "variable",
    "let",
    "say",
    "hi",
    "equals",
    "hello",
    "sure",
    "adding",
    "set",
    "parentheses",
    "afterwards",
    "would",
    "calling",
    "hello",
    "function",
    "returning",
    "result",
    "high",
    "high",
    "equals",
    "hello",
    "parentheses",
    "print",
    "hi",
    "well",
    "address",
    "hello",
    "hi",
    "memory",
    "address",
    "numbers",
    "imagine",
    "would",
    "happen",
    "call",
    "high",
    "function",
    "assigned",
    "memory",
    "address",
    "hello",
    "hi",
    "well",
    "end",
    "calling",
    "hello",
    "function",
    "even",
    "though",
    "listing",
    "would",
    "like",
    "call",
    "high",
    "function",
    "even",
    "though",
    "exist",
    "hello",
    "function",
    "two",
    "names",
    "either",
    "use",
    "hello",
    "use",
    "hi",
    "let",
    "demonstrate",
    "call",
    "either",
    "hello",
    "hi",
    "example",
    "assigning",
    "memory",
    "address",
    "hello",
    "variable",
    "high",
    "could",
    "treat",
    "high",
    "function",
    "kind",
    "like",
    "alias",
    "function",
    "two",
    "names",
    "another",
    "demonstration",
    "let",
    "say",
    "would",
    "like",
    "assign",
    "print",
    "function",
    "variable",
    "let",
    "say",
    "maybe",
    "say",
    "say",
    "equals",
    "print",
    "say",
    "print",
    "referring",
    "print",
    "function",
    "sure",
    "adding",
    "set",
    "parentheses",
    "afterwards",
    "need",
    "print",
    "something",
    "console",
    "window",
    "either",
    "use",
    "print",
    "like",
    "previously",
    "could",
    "use",
    "say",
    "say",
    "memory",
    "address",
    "let",
    "say",
    "perhaps",
    "whoa",
    "ca",
    "believe",
    "works",
    "surprise",
    "face",
    "right",
    "call",
    "print",
    "function",
    "saying",
    "word",
    "say",
    "say",
    "text",
    "print",
    "text",
    "well",
    "say",
    "text",
    "console",
    "window",
    "normal",
    "circumstances",
    "sure",
    "would",
    "need",
    "assign",
    "print",
    "function",
    "variable",
    "well",
    "kind",
    "cool",
    "thought",
    "show",
    "guys",
    "everybody",
    "assign",
    "function",
    "variable",
    "like",
    "said",
    "building",
    "upon",
    "topic",
    "want",
    "sure",
    "understand",
    "right",
    "well",
    "would",
    "like",
    "copy",
    "code",
    "post",
    "comments",
    "section",
    "yeah",
    "assign",
    "function",
    "variable",
    "python",
    "hey",
    "uh",
    "going",
    "everybody",
    "bro",
    "hope",
    "well",
    "today",
    "video",
    "going",
    "explain",
    "higher",
    "order",
    "functions",
    "python",
    "sit",
    "back",
    "relax",
    "enjoy",
    "show",
    "right",
    "ladies",
    "gentlemen",
    "let",
    "talk",
    "higher",
    "order",
    "functions",
    "functions",
    "one",
    "two",
    "things",
    "one",
    "either",
    "accept",
    "function",
    "argument",
    "two",
    "return",
    "function",
    "output",
    "python",
    "totally",
    "allowed",
    "functions",
    "also",
    "treated",
    "objects",
    "give",
    "guys",
    "example",
    "let",
    "begin",
    "number",
    "one",
    "example",
    "number",
    "one",
    "let",
    "say",
    "two",
    "functions",
    "named",
    "loud",
    "quiet",
    "functions",
    "accept",
    "string",
    "argument",
    "loud",
    "return",
    "string",
    "uppercase",
    "shouting",
    "something",
    "quiet",
    "return",
    "text",
    "lowercase",
    "whispering",
    "something",
    "going",
    "create",
    "third",
    "function",
    "called",
    "hello",
    "higher",
    "order",
    "function",
    "accepts",
    "function",
    "argument",
    "sure",
    "going",
    "passing",
    "loud",
    "quiet",
    "whatever",
    "going",
    "give",
    "name",
    "funk",
    "short",
    "function",
    "functions",
    "return",
    "text",
    "either",
    "uppercase",
    "lowercase",
    "going",
    "assign",
    "text",
    "text",
    "equals",
    "name",
    "function",
    "sure",
    "going",
    "pass",
    "text",
    "order",
    "call",
    "one",
    "functions",
    "pass",
    "word",
    "hello",
    "capitalized",
    "end",
    "print",
    "whatever",
    "text",
    "order",
    "call",
    "function",
    "hello",
    "need",
    "pass",
    "function",
    "argument",
    "want",
    "pass",
    "loud",
    "quiet",
    "want",
    "loud",
    "variety",
    "hello",
    "text",
    "uppercase",
    "quiet",
    "variety",
    "flow",
    "text",
    "lowercase",
    "would",
    "like",
    "pass",
    "loud",
    "want",
    "make",
    "text",
    "uppercase",
    "typing",
    "name",
    "higher",
    "order",
    "function",
    "passing",
    "function",
    "argument",
    "result",
    "word",
    "hello",
    "printed",
    "console",
    "window",
    "uppercase",
    "rundown",
    "happened",
    "calling",
    "hello",
    "function",
    "passing",
    "loud",
    "argument",
    "naming",
    "loud",
    "funk",
    "within",
    "hello",
    "function",
    "text",
    "equals",
    "loud",
    "sending",
    "string",
    "text",
    "says",
    "hello",
    "returning",
    "text",
    "uppercase",
    "assigning",
    "variable",
    "called",
    "text",
    "printing",
    "text",
    "console",
    "window",
    "would",
    "like",
    "use",
    "quiet",
    "variety",
    "hello",
    "going",
    "pass",
    "quiet",
    "argument",
    "quiet",
    "make",
    "text",
    "lowercase",
    "alright",
    "people",
    "example",
    "one",
    "higher",
    "order",
    "function",
    "higher",
    "order",
    "function",
    "function",
    "accepts",
    "function",
    "argument",
    "hello",
    "function",
    "example",
    "higher",
    "order",
    "function",
    "accepting",
    "either",
    "loud",
    "quiet",
    "arguments",
    "right",
    "people",
    "let",
    "move",
    "second",
    "part",
    "definition",
    "higher",
    "order",
    "functions",
    "higher",
    "order",
    "function",
    "function",
    "returns",
    "function",
    "going",
    "give",
    "different",
    "example",
    "time",
    "let",
    "say",
    "pair",
    "nested",
    "functions",
    "outer",
    "function",
    "named",
    "divisor",
    "accept",
    "number",
    "argument",
    "call",
    "x",
    "divisor",
    "number",
    "used",
    "divide",
    "another",
    "number",
    "using",
    "division",
    "inside",
    "function",
    "inner",
    "function",
    "named",
    "dividend",
    "dividend",
    "number",
    "going",
    "divided",
    "call",
    "argument",
    "passed",
    "return",
    "divided",
    "x",
    "dividing",
    "dividend",
    "divisor",
    "divided",
    "x",
    "within",
    "outer",
    "function",
    "within",
    "inner",
    "function",
    "going",
    "return",
    "dividend",
    "function",
    "higher",
    "order",
    "function",
    "function",
    "returns",
    "function",
    "divisor",
    "higher",
    "order",
    "function",
    "returning",
    "dividend",
    "would",
    "like",
    "access",
    "nested",
    "dividend",
    "function",
    "first",
    "need",
    "call",
    "outside",
    "divisor",
    "function",
    "pass",
    "number",
    "argument",
    "serve",
    "divisor",
    "divisor",
    "function",
    "going",
    "return",
    "dividend",
    "function",
    "assign",
    "variable",
    "variable",
    "going",
    "name",
    "divide",
    "divide",
    "equals",
    "need",
    "call",
    "divisor",
    "set",
    "divisor",
    "let",
    "say",
    "would",
    "like",
    "divide",
    "numbers",
    "two",
    "set",
    "x",
    "two",
    "dividend",
    "print",
    "call",
    "divide",
    "variable",
    "pass",
    "number",
    "dividend",
    "number",
    "going",
    "divided",
    "let",
    "say",
    "would",
    "like",
    "divide",
    "10",
    "two",
    "work",
    "see",
    "five",
    "console",
    "window",
    "let",
    "explain",
    "happened",
    "program",
    "begins",
    "divisor",
    "passing",
    "two",
    "x",
    "two",
    "stay",
    "way",
    "finish",
    "program",
    "reassign",
    "x",
    "x",
    "equals",
    "two",
    "skipping",
    "function",
    "call",
    "yet",
    "returning",
    "dividend",
    "assigning",
    "variable",
    "call",
    "variable",
    "memory",
    "address",
    "function",
    "line",
    "calling",
    "dividend",
    "passing",
    "10",
    "equals",
    "10",
    "x",
    "still",
    "equals",
    "returning",
    "10",
    "divided",
    "2",
    "printing",
    "console",
    "window",
    "well",
    "everyone",
    "conclusion",
    "higher",
    "order",
    "function",
    "function",
    "either",
    "one",
    "accepts",
    "function",
    "argument",
    "two",
    "return",
    "function",
    "format",
    "little",
    "bit",
    "strange",
    "quite",
    "used",
    "yet",
    "future",
    "videos",
    "practice",
    "high",
    "order",
    "functions",
    "would",
    "like",
    "copy",
    "code",
    "post",
    "comment",
    "section",
    "yeah",
    "higher",
    "order",
    "functions",
    "work",
    "python",
    "yo",
    "going",
    "everybody",
    "bro",
    "hope",
    "well",
    "today",
    "video",
    "going",
    "explain",
    "lambda",
    "functions",
    "python",
    "sit",
    "back",
    "relax",
    "enjoy",
    "show",
    "right",
    "ladies",
    "gentlemen",
    "let",
    "talk",
    "lambda",
    "functions",
    "functions",
    "written",
    "one",
    "line",
    "use",
    "lambda",
    "keyword",
    "accept",
    "number",
    "arguments",
    "one",
    "expression",
    "think",
    "shortcut",
    "useful",
    "need",
    "function",
    "one",
    "use",
    "short",
    "period",
    "time",
    "planning",
    "throwing",
    "away",
    "function",
    "afterwards",
    "syntax",
    "lambda",
    "function",
    "type",
    "lambda",
    "add",
    "parameters",
    "followed",
    "colon",
    "expression",
    "let",
    "say",
    "function",
    "named",
    "double",
    "double",
    "accepts",
    "one",
    "argument",
    "name",
    "x",
    "returning",
    "x",
    "times",
    "two",
    "effectively",
    "doubling",
    "need",
    "call",
    "function",
    "would",
    "type",
    "double",
    "pass",
    "number",
    "argument",
    "result",
    "pass",
    "5",
    "would",
    "let",
    "write",
    "function",
    "instead",
    "write",
    "lambda",
    "function",
    "let",
    "turn",
    "lines",
    "comments",
    "first",
    "step",
    "type",
    "lambda",
    "parameters",
    "one",
    "parameter",
    "x",
    "colon",
    "expression",
    "would",
    "like",
    "return",
    "x",
    "times",
    "two",
    "lambda",
    "function",
    "going",
    "return",
    "function",
    "object",
    "assign",
    "much",
    "like",
    "variables",
    "let",
    "say",
    "double",
    "equals",
    "lambda",
    "x",
    "colon",
    "x",
    "times",
    "two",
    "order",
    "call",
    "lambda",
    "function",
    "going",
    "type",
    "double",
    "set",
    "parentheses",
    "call",
    "function",
    "pass",
    "arguments",
    "let",
    "say",
    "x",
    "equals",
    "5",
    "going",
    "double",
    "result",
    "syntax",
    "lambda",
    "function",
    "type",
    "lambda",
    "parameters",
    "colon",
    "expression",
    "time",
    "let",
    "say",
    "two",
    "parameters",
    "two",
    "numbers",
    "want",
    "multiply",
    "let",
    "say",
    "function",
    "called",
    "multiply",
    "multiply",
    "equals",
    "lambda",
    "x",
    "comma",
    "two",
    "parameters",
    "colon",
    "followed",
    "expression",
    "would",
    "like",
    "multiply",
    "x",
    "times",
    "order",
    "call",
    "multiply",
    "need",
    "pass",
    "two",
    "arguments",
    "pass",
    "one",
    "well",
    "type",
    "error",
    "let",
    "pass",
    "five",
    "maybe",
    "six",
    "result",
    "thirty",
    "let",
    "try",
    "three",
    "parameters",
    "let",
    "say",
    "would",
    "like",
    "add",
    "three",
    "numbers",
    "together",
    "let",
    "say",
    "add",
    "lambda",
    "x",
    "comma",
    "comma",
    "z",
    "parameters",
    "colon",
    "need",
    "expression",
    "x",
    "plus",
    "plus",
    "z",
    "let",
    "add",
    "five",
    "six",
    "seven",
    "together",
    "result",
    "let",
    "try",
    "something",
    "little",
    "complex",
    "let",
    "pass",
    "strings",
    "time",
    "create",
    "function",
    "named",
    "full",
    "name",
    "full",
    "name",
    "equals",
    "lambda",
    "first",
    "name",
    "comma",
    "last",
    "name",
    "expression",
    "going",
    "first",
    "name",
    "plus",
    "perhaps",
    "space",
    "plus",
    "last",
    "name",
    "need",
    "pass",
    "first",
    "name",
    "last",
    "name",
    "full",
    "name",
    "use",
    "name",
    "example",
    "want",
    "let",
    "say",
    "bro",
    "comma",
    "code",
    "yep",
    "print",
    "first",
    "name",
    "last",
    "name",
    "console",
    "window",
    "let",
    "take",
    "step",
    "let",
    "say",
    "would",
    "like",
    "check",
    "somebody",
    "age",
    "using",
    "lambda",
    "function",
    "would",
    "like",
    "check",
    "see",
    "18",
    "older",
    "signing",
    "something",
    "perhaps",
    "let",
    "say",
    "credit",
    "card",
    "let",
    "create",
    "function",
    "object",
    "age",
    "check",
    "equals",
    "lambda",
    "one",
    "parameter",
    "somebody",
    "edge",
    "colon",
    "expression",
    "let",
    "type",
    "true",
    "age",
    "greater",
    "equal",
    "18",
    "else",
    "false",
    "call",
    "age",
    "track",
    "function",
    "need",
    "pass",
    "age",
    "let",
    "say",
    "user",
    "12",
    "trying",
    "sign",
    "credit",
    "card",
    "return",
    "false",
    "let",
    "say",
    "18",
    "return",
    "true",
    "lambda",
    "function",
    "function",
    "written",
    "one",
    "line",
    "using",
    "lambda",
    "keyword",
    "accept",
    "number",
    "arguments",
    "one",
    "expression",
    "think",
    "like",
    "shortcut",
    "useful",
    "need",
    "use",
    "function",
    "planning",
    "throwing",
    "away",
    "afterwards",
    "would",
    "like",
    "copy",
    "code",
    "post",
    "comment",
    "section",
    "yeah",
    "lambda",
    "functions",
    "python",
    "hey",
    "going",
    "everybody",
    "bro",
    "hope",
    "well",
    "video",
    "going",
    "show",
    "sort",
    "iterables",
    "python",
    "sit",
    "back",
    "relax",
    "enjoy",
    "show",
    "well",
    "well",
    "well",
    "welcome",
    "back",
    "everybody",
    "video",
    "going",
    "show",
    "sort",
    "data",
    "using",
    "python",
    "begin",
    "sort",
    "method",
    "used",
    "lists",
    "sort",
    "function",
    "used",
    "iterables",
    "would",
    "include",
    "lists",
    "let",
    "start",
    "something",
    "basic",
    "crank",
    "difficulty",
    "one",
    "step",
    "time",
    "list",
    "named",
    "students",
    "bunch",
    "student",
    "names",
    "within",
    "list",
    "squidward",
    "sandy",
    "patrick",
    "spongebob",
    "mr",
    "krabs",
    "let",
    "say",
    "students",
    "taking",
    "college",
    "course",
    "perhaps",
    "marine",
    "biology",
    "would",
    "like",
    "sort",
    "list",
    "alphabetical",
    "order",
    "method",
    "built",
    "lists",
    "type",
    "name",
    "list",
    "students",
    "dot",
    "sort",
    "easy",
    "display",
    "list",
    "think",
    "use",
    "loop",
    "students",
    "print",
    "go",
    "sort",
    "list",
    "starting",
    "top",
    "mr",
    "krabs",
    "patrick",
    "sandy",
    "spongebob",
    "squidward",
    "sort",
    "method",
    "lists",
    "accept",
    "keyword",
    "arguments",
    "two",
    "optional",
    "keyword",
    "arguments",
    "pass",
    "pass",
    "key",
    "reverse",
    "cover",
    "key",
    "little",
    "bit",
    "later",
    "set",
    "reverse",
    "true",
    "list",
    "sorted",
    "reverse",
    "alphabetical",
    "order",
    "beginning",
    "squidward",
    "spongebob",
    "sandy",
    "patrick",
    "mr",
    "krabs",
    "sort",
    "method",
    "work",
    "iterables",
    "method",
    "lists",
    "list",
    "students",
    "instead",
    "let",
    "say",
    "tuple",
    "well",
    "sort",
    "method",
    "going",
    "work",
    "see",
    "attribute",
    "error",
    "tuple",
    "object",
    "attribute",
    "sort",
    "sort",
    "function",
    "would",
    "come",
    "useful",
    "iterables",
    "also",
    "use",
    "list",
    "2",
    "suppose",
    "sort",
    "function",
    "return",
    "sorted",
    "list",
    "let",
    "use",
    "sort",
    "function",
    "time",
    "assign",
    "result",
    "list",
    "called",
    "sorted",
    "students",
    "equals",
    "sorted",
    "need",
    "pass",
    "iterable",
    "option",
    "passing",
    "key",
    "reverse",
    "iterable",
    "pass",
    "argument",
    "tuple",
    "named",
    "students",
    "line",
    "sorted",
    "students",
    "equals",
    "sorted",
    "students",
    "sorted",
    "students",
    "list",
    "sorted",
    "function",
    "return",
    "list",
    "accepts",
    "iterable",
    "argument",
    "display",
    "change",
    "4i",
    "students",
    "4i",
    "sorted",
    "students",
    "function",
    "accept",
    "iterable",
    "tuple",
    "create",
    "sorted",
    "list",
    "alphabetical",
    "order",
    "reverse",
    "pass",
    "keyword",
    "argument",
    "reverse",
    "equals",
    "true",
    "list",
    "sorted",
    "reverse",
    "alphabetical",
    "order",
    "right",
    "gon",
    "na",
    "take",
    "level",
    "welcome",
    "level",
    "two",
    "sometimes",
    "data",
    "always",
    "simple",
    "list",
    "tuples",
    "tuple",
    "corresponding",
    "student",
    "record",
    "name",
    "letter",
    "grade",
    "college",
    "course",
    "student",
    "age",
    "sort",
    "list",
    "tuples",
    "either",
    "student",
    "name",
    "grade",
    "age",
    "well",
    "key",
    "keyword",
    "argument",
    "going",
    "come",
    "sorting",
    "take",
    "look",
    "list",
    "tuples",
    "somewhat",
    "resembles",
    "spreadsheet",
    "rows",
    "columns",
    "first",
    "column",
    "corresponds",
    "student",
    "names",
    "second",
    "column",
    "grades",
    "third",
    "column",
    "ages",
    "students",
    "default",
    "sorting",
    "first",
    "column",
    "actually",
    "really",
    "easy",
    "default",
    "need",
    "sort",
    "alphabetically",
    "would",
    "process",
    "would",
    "type",
    "name",
    "list",
    "students",
    "dot",
    "sort",
    "print",
    "iterable",
    "students",
    "instead",
    "individual",
    "student",
    "names",
    "going",
    "get",
    "tuple",
    "tuples",
    "arranged",
    "alphabetical",
    "order",
    "starting",
    "first",
    "column",
    "student",
    "names",
    "sort",
    "iterables",
    "second",
    "column",
    "case",
    "would",
    "student",
    "grades",
    "even",
    "third",
    "column",
    "would",
    "student",
    "ages",
    "well",
    "key",
    "keyword",
    "argument",
    "going",
    "come",
    "keyword",
    "argument",
    "set",
    "key",
    "equal",
    "function",
    "going",
    "return",
    "index",
    "specific",
    "column",
    "let",
    "say",
    "key",
    "equals",
    "grid",
    "grade",
    "going",
    "function",
    "object",
    "grade",
    "equals",
    "easily",
    "use",
    "lambda",
    "expression",
    "lambda",
    "let",
    "say",
    "grades",
    "colon",
    "grades",
    "set",
    "index",
    "one",
    "first",
    "index",
    "zero",
    "first",
    "column",
    "computers",
    "always",
    "start",
    "zero",
    "column",
    "two",
    "would",
    "index",
    "one",
    "column",
    "three",
    "would",
    "index",
    "two",
    "grade",
    "equals",
    "lambda",
    "grids",
    "colon",
    "grids",
    "index",
    "one",
    "also",
    "rename",
    "want",
    "students",
    "dot",
    "sort",
    "setting",
    "key",
    "equal",
    "grade",
    "grade",
    "function",
    "object",
    "via",
    "lambda",
    "function",
    "students",
    "sorted",
    "grades",
    "starting",
    "sandy",
    "spongebob",
    "mr",
    "krabs",
    "patrick",
    "squidward",
    "needs",
    "reverse",
    "order",
    "pass",
    "keyword",
    "argument",
    "reverse",
    "equals",
    "true",
    "practice",
    "wanted",
    "sort",
    "data",
    "student",
    "age",
    "would",
    "change",
    "grade",
    "let",
    "say",
    "age",
    "age",
    "equals",
    "lambda",
    "change",
    "grades",
    "maybe",
    "ages",
    "colon",
    "ages",
    "index",
    "would",
    "two",
    "first",
    "column",
    "zero",
    "one",
    "two",
    "change",
    "key",
    "function",
    "object",
    "edge",
    "student",
    "sorted",
    "numerically",
    "beginning",
    "smallest",
    "edge",
    "well",
    "youngest",
    "person",
    "starting",
    "spongebob",
    "sandy",
    "patrick",
    "squidward",
    "mr",
    "krabs",
    "like",
    "said",
    "want",
    "data",
    "arranged",
    "reverse",
    "order",
    "set",
    "keyword",
    "argument",
    "reverse",
    "true",
    "within",
    "sort",
    "method",
    "student",
    "data",
    "sorted",
    "beginning",
    "eldest",
    "student",
    "mr",
    "krabs",
    "squidward",
    "patrick",
    "sandy",
    "spongebob",
    "last",
    "part",
    "video",
    "let",
    "say",
    "working",
    "iterable",
    "let",
    "say",
    "tuple",
    "tuples",
    "instead",
    "well",
    "longer",
    "use",
    "sort",
    "method",
    "belongs",
    "lists",
    "also",
    "use",
    "sort",
    "function",
    "lists",
    "generate",
    "new",
    "sorted",
    "list",
    "without",
    "changing",
    "placement",
    "original",
    "let",
    "say",
    "tuple",
    "tuples",
    "create",
    "new",
    "sorted",
    "list",
    "let",
    "call",
    "list",
    "sorted",
    "students",
    "equals",
    "use",
    "sorted",
    "function",
    "need",
    "pass",
    "iterable",
    "pass",
    "key",
    "reverse",
    "keyword",
    "argument",
    "iterable",
    "would",
    "students",
    "let",
    "set",
    "key",
    "equal",
    "edge",
    "reverse",
    "keep",
    "let",
    "change",
    "students",
    "sorted",
    "students",
    "use",
    "sorted",
    "function",
    "sort",
    "iterable",
    "including",
    "list",
    "well",
    "right",
    "everyone",
    "sort",
    "iterables",
    "python",
    "would",
    "like",
    "copy",
    "code",
    "post",
    "comments",
    "section",
    "yeah",
    "basic",
    "way",
    "sort",
    "iterables",
    "python",
    "hey",
    "going",
    "everybody",
    "bro",
    "hope",
    "well",
    "today",
    "video",
    "going",
    "show",
    "map",
    "function",
    "works",
    "python",
    "sit",
    "back",
    "relax",
    "enjoy",
    "show",
    "everybody",
    "let",
    "discuss",
    "map",
    "function",
    "map",
    "function",
    "apply",
    "function",
    "item",
    "interval",
    "would",
    "include",
    "lists",
    "tuples",
    "things",
    "like",
    "map",
    "function",
    "accepts",
    "two",
    "arguments",
    "iterable",
    "well",
    "function",
    "would",
    "like",
    "apply",
    "item",
    "within",
    "iterable",
    "example",
    "let",
    "say",
    "online",
    "store",
    "represent",
    "list",
    "tuples",
    "named",
    "store",
    "tuple",
    "within",
    "list",
    "corresponds",
    "item",
    "sale",
    "within",
    "store",
    "shirts",
    "pants",
    "jackets",
    "socks",
    "item",
    "price",
    "us",
    "dollars",
    "let",
    "say",
    "would",
    "like",
    "convert",
    "prices",
    "within",
    "store",
    "euros",
    "currently",
    "conversion",
    "rate",
    "filming",
    "video",
    "one",
    "us",
    "dollar",
    "euros",
    "let",
    "begin",
    "easily",
    "convert",
    "dollars",
    "euros",
    "lambda",
    "function",
    "let",
    "say",
    "two",
    "euros",
    "equals",
    "lambda",
    "parameter",
    "data",
    "colon",
    "next",
    "part",
    "little",
    "bit",
    "tricky",
    "within",
    "set",
    "parenthesis",
    "represent",
    "tuple",
    "take",
    "data",
    "index",
    "0",
    "corresponds",
    "first",
    "column",
    "comma",
    "data",
    "index",
    "represents",
    "index",
    "prices",
    "going",
    "take",
    "data",
    "index",
    "1",
    "times",
    "first",
    "column",
    "left",
    "untouched",
    "data",
    "column",
    "1",
    "multiplied",
    "map",
    "function",
    "going",
    "create",
    "map",
    "object",
    "easily",
    "cast",
    "different",
    "type",
    "iterable",
    "let",
    "say",
    "store",
    "underscore",
    "euros",
    "equals",
    "map",
    "parenthesis",
    "pass",
    "function",
    "well",
    "iterable",
    "function",
    "two",
    "euros",
    "function",
    "comma",
    "iterable",
    "store",
    "want",
    "convert",
    "map",
    "object",
    "iterable",
    "easily",
    "surround",
    "cast",
    "would",
    "like",
    "convert",
    "map",
    "object",
    "list",
    "new",
    "store",
    "named",
    "store",
    "euros",
    "different",
    "prices",
    "store",
    "euros",
    "display",
    "use",
    "loop",
    "store",
    "euros",
    "print",
    "let",
    "try",
    "yep",
    "seems",
    "right",
    "prices",
    "store",
    "euros",
    "let",
    "pretend",
    "prices",
    "already",
    "euros",
    "would",
    "like",
    "convert",
    "american",
    "dollars",
    "use",
    "conversion",
    "rate",
    "divide",
    "let",
    "create",
    "separate",
    "lambda",
    "function",
    "two",
    "dollars",
    "equals",
    "think",
    "copy",
    "going",
    "divide",
    "first",
    "index",
    "data",
    "let",
    "say",
    "store",
    "dollars",
    "represent",
    "store",
    "dollars",
    "pretending",
    "currently",
    "euros",
    "display",
    "4i",
    "store",
    "dollars",
    "prices",
    "euros",
    "converting",
    "american",
    "dollars",
    "may",
    "want",
    "rounding",
    "opposed",
    "nearest",
    "descent",
    "well",
    "everyone",
    "map",
    "function",
    "applies",
    "function",
    "item",
    "iterable",
    "include",
    "lists",
    "tuples",
    "like",
    "pass",
    "iterable",
    "function",
    "argument",
    "map",
    "function",
    "would",
    "like",
    "copy",
    "code",
    "post",
    "comment",
    "section",
    "yeah",
    "map",
    "function",
    "works",
    "python",
    "going",
    "everybody",
    "bro",
    "hope",
    "well",
    "today",
    "video",
    "going",
    "show",
    "filter",
    "function",
    "works",
    "python",
    "sit",
    "back",
    "relax",
    "enjoy",
    "show",
    "right",
    "right",
    "let",
    "discuss",
    "filter",
    "function",
    "filter",
    "function",
    "creates",
    "collection",
    "elements",
    "iterable",
    "function",
    "returns",
    "true",
    "heck",
    "mean",
    "let",
    "explain",
    "let",
    "say",
    "list",
    "tuples",
    "named",
    "friends",
    "tuple",
    "name",
    "friend",
    "well",
    "age",
    "made",
    "ages",
    "friends",
    "would",
    "like",
    "create",
    "separate",
    "list",
    "friends",
    "18",
    "older",
    "let",
    "say",
    "going",
    "drinking",
    "would",
    "like",
    "create",
    "list",
    "drinking",
    "buddies",
    "drinking",
    "age",
    "united",
    "states",
    "drinking",
    "age",
    "currently",
    "21",
    "think",
    "worldwide",
    "18",
    "let",
    "go",
    "18",
    "example",
    "since",
    "worldwide",
    "audience",
    "right",
    "filter",
    "function",
    "pass",
    "iterable",
    "well",
    "function",
    "get",
    "anybody",
    "edge",
    "let",
    "begin",
    "writing",
    "lambda",
    "function",
    "expression",
    "filter",
    "function",
    "let",
    "say",
    "age",
    "equals",
    "lambda",
    "data",
    "parameter",
    "colon",
    "data",
    "index",
    "one",
    "first",
    "index",
    "first",
    "column",
    "chart",
    "would",
    "zero",
    "names",
    "next",
    "index",
    "one",
    "would",
    "ages",
    "data",
    "index",
    "one",
    "greater",
    "equal",
    "eighteen",
    "lambda",
    "function",
    "going",
    "filter",
    "iterable",
    "function",
    "age",
    "let",
    "write",
    "filter",
    "pass",
    "function",
    "edge",
    "comma",
    "iterable",
    "friends",
    "filter",
    "function",
    "return",
    "filter",
    "object",
    "easily",
    "cast",
    "would",
    "like",
    "cast",
    "friends",
    "list",
    "back",
    "list",
    "assign",
    "new",
    "list",
    "let",
    "say",
    "drinking",
    "buddies",
    "equals",
    "list",
    "filter",
    "age",
    "friends",
    "able",
    "print",
    "friends",
    "18",
    "older",
    "drinking",
    "bodies",
    "print",
    "rachel",
    "monica",
    "chandler",
    "ross",
    "well",
    "everyone",
    "filter",
    "function",
    "creates",
    "collection",
    "elements",
    "iterable",
    "function",
    "returns",
    "true",
    "like",
    "think",
    "search",
    "results",
    "searching",
    "results",
    "meet",
    "criteria",
    "age",
    "greater",
    "equal",
    "18",
    "create",
    "separate",
    "collection",
    "list",
    "want",
    "results",
    "yeah",
    "filter",
    "function",
    "works",
    "python",
    "yo",
    "going",
    "everybody",
    "bro",
    "hope",
    "well",
    "today",
    "video",
    "going",
    "show",
    "reduce",
    "function",
    "works",
    "python",
    "sit",
    "back",
    "relax",
    "enjoy",
    "show",
    "well",
    "suppose",
    "reduce",
    "function",
    "today",
    "reduce",
    "function",
    "applies",
    "function",
    "choosing",
    "iterable",
    "reduces",
    "iterable",
    "single",
    "cumulative",
    "value",
    "way",
    "works",
    "reduce",
    "function",
    "performs",
    "function",
    "first",
    "two",
    "elements",
    "iterable",
    "repeats",
    "process",
    "one",
    "value",
    "remains",
    "kind",
    "like",
    "think",
    "like",
    "recycling",
    "elements",
    "within",
    "iterable",
    "single",
    "value",
    "remains",
    "finished",
    "product",
    "useful",
    "let",
    "say",
    "playing",
    "game",
    "scramble",
    "bunch",
    "different",
    "letters",
    "within",
    "iterable",
    "list",
    "type",
    "iterable",
    "list",
    "named",
    "letters",
    "letters",
    "need",
    "spell",
    "word",
    "would",
    "like",
    "reduce",
    "individual",
    "elements",
    "single",
    "cumulative",
    "value",
    "one",
    "value",
    "remains",
    "using",
    "reduce",
    "function",
    "also",
    "loop",
    "multiple",
    "ways",
    "using",
    "reduce",
    "function",
    "going",
    "import",
    "func",
    "tools",
    "let",
    "say",
    "cumulative",
    "value",
    "stored",
    "within",
    "variable",
    "named",
    "word",
    "word",
    "equals",
    "func",
    "tools",
    "dot",
    "reduce",
    "reduce",
    "function",
    "two",
    "arguments",
    "function",
    "would",
    "like",
    "apply",
    "first",
    "two",
    "elements",
    "iterable",
    "interval",
    "easy",
    "letters",
    "let",
    "put",
    "letters",
    "function",
    "easily",
    "write",
    "lambda",
    "function",
    "lambda",
    "function",
    "needs",
    "two",
    "parameters",
    "let",
    "say",
    "x",
    "kind",
    "function",
    "want",
    "perform",
    "first",
    "two",
    "elements",
    "iterable",
    "let",
    "combine",
    "together",
    "let",
    "say",
    "x",
    "plus",
    "let",
    "print",
    "single",
    "cumulative",
    "value",
    "word",
    "print",
    "word",
    "hello",
    "fairly",
    "confident",
    "word",
    "hello",
    "worth",
    "like",
    "20",
    "points",
    "scrabble",
    "let",
    "explain",
    "happened",
    "step",
    "step",
    "reduce",
    "function",
    "applies",
    "function",
    "first",
    "two",
    "elements",
    "within",
    "iterable",
    "performs",
    "expression",
    "set",
    "x",
    "plus",
    "really",
    "write",
    "anything",
    "perform",
    "expression",
    "first",
    "two",
    "elements",
    "repeat",
    "process",
    "using",
    "result",
    "first",
    "time",
    "use",
    "expression",
    "next",
    "element",
    "combining",
    "x",
    "plus",
    "going",
    "repeat",
    "process",
    "one",
    "value",
    "remains",
    "kind",
    "like",
    "recycling",
    "letters",
    "creating",
    "finished",
    "product",
    "think",
    "least",
    "different",
    "example",
    "let",
    "say",
    "would",
    "like",
    "find",
    "factorial",
    "5",
    "numbers",
    "5",
    "1",
    "within",
    "list",
    "named",
    "factorial",
    "find",
    "factorial",
    "5",
    "via",
    "reduce",
    "function",
    "would",
    "probably",
    "write",
    "something",
    "like",
    "let",
    "change",
    "word",
    "let",
    "say",
    "result",
    "result",
    "equals",
    "functools",
    "reduce",
    "lambda",
    "function",
    "x",
    "times",
    "factorials",
    "multiply",
    "next",
    "two",
    "numbers",
    "together",
    "take",
    "result",
    "multiply",
    "next",
    "one",
    "list",
    "iterable",
    "factorial",
    "let",
    "print",
    "result",
    "factorial",
    "5",
    "let",
    "walk",
    "taking",
    "first",
    "two",
    "elements",
    "iterable",
    "five",
    "four",
    "multiplying",
    "together",
    "case",
    "last",
    "example",
    "concatenated",
    "strings",
    "together",
    "x",
    "example",
    "multiplying",
    "together",
    "take",
    "first",
    "two",
    "elements",
    "5",
    "times",
    "4",
    "take",
    "result",
    "apply",
    "next",
    "iteration",
    "x",
    "times",
    "20",
    "times",
    "3",
    "repeat",
    "process",
    "60",
    "times",
    "2",
    "120",
    "120",
    "times",
    "1",
    "120",
    "kind",
    "reduce",
    "function",
    "works",
    "applies",
    "function",
    "choosing",
    "first",
    "two",
    "elements",
    "iterable",
    "repeats",
    "process",
    "single",
    "cumulative",
    "value",
    "remains",
    "reduce",
    "function",
    "would",
    "like",
    "copy",
    "code",
    "post",
    "comment",
    "section",
    "yeah",
    "reduce",
    "function",
    "works",
    "python",
    "hey",
    "going",
    "everybody",
    "bro",
    "hope",
    "well",
    "video",
    "going",
    "show",
    "list",
    "comprehensions",
    "work",
    "python",
    "sit",
    "back",
    "relax",
    "enjoy",
    "show",
    "right",
    "everybody",
    "list",
    "comprehensions",
    "list",
    "comprehension",
    "way",
    "create",
    "new",
    "list",
    "less",
    "syntax",
    "also",
    "use",
    "list",
    "comprehension",
    "mimic",
    "certain",
    "lambda",
    "functions",
    "previous",
    "videos",
    "use",
    "map",
    "filter",
    "functions",
    "list",
    "comprehension",
    "easier",
    "read",
    "lambda",
    "function",
    "formula",
    "going",
    "follow",
    "create",
    "list",
    "within",
    "list",
    "going",
    "write",
    "expression",
    "item",
    "iterable",
    "let",
    "give",
    "example",
    "list",
    "comprehension",
    "would",
    "useful",
    "let",
    "take",
    "program",
    "create",
    "list",
    "numbers",
    "1",
    "10",
    "squared",
    "print",
    "get",
    "numbers",
    "1",
    "10",
    "whatever",
    "square",
    "right",
    "1",
    "10",
    "square",
    "10",
    "100",
    "wrote",
    "program",
    "three",
    "lines",
    "code",
    "creating",
    "empty",
    "list",
    "creating",
    "loop",
    "writing",
    "expression",
    "want",
    "loop",
    "iteration",
    "let",
    "write",
    "program",
    "used",
    "list",
    "comprehension",
    "write",
    "program",
    "less",
    "syntax",
    "would",
    "write",
    "something",
    "like",
    "going",
    "follow",
    "formula",
    "list",
    "going",
    "named",
    "squares",
    "equals",
    "within",
    "set",
    "straight",
    "brackets",
    "going",
    "write",
    "expression",
    "portion",
    "times",
    "item",
    "would",
    "4i",
    "iterable",
    "would",
    "range",
    "1",
    "11",
    "remember",
    "11",
    "exclusive",
    "let",
    "print",
    "squares",
    "print",
    "squares",
    "go",
    "made",
    "exact",
    "program",
    "using",
    "list",
    "comprehension",
    "basically",
    "speaking",
    "follow",
    "formula",
    "set",
    "list",
    "equal",
    "expression",
    "expression",
    "example",
    "times",
    "item",
    "interval",
    "range",
    "one",
    "eleven",
    "took",
    "three",
    "lines",
    "code",
    "well",
    "exclude",
    "us",
    "printing",
    "list",
    "program",
    "took",
    "one",
    "line",
    "code",
    "also",
    "use",
    "list",
    "comprehension",
    "mimic",
    "certain",
    "lambda",
    "functions",
    "wrote",
    "program",
    "filtering",
    "list",
    "student",
    "grades",
    "let",
    "pretend",
    "students",
    "took",
    "sort",
    "exam",
    "one",
    "student",
    "received",
    "100",
    "90",
    "80",
    "70",
    "60",
    "50",
    "40",
    "30",
    "one",
    "student",
    "got",
    "zero",
    "show",
    "would",
    "like",
    "filter",
    "student",
    "grades",
    "list",
    "contains",
    "students",
    "passed",
    "criteria",
    "passing",
    "grade",
    "60",
    "would",
    "like",
    "filter",
    "passing",
    "students",
    "write",
    "program",
    "using",
    "filter",
    "function",
    "would",
    "probably",
    "write",
    "something",
    "like",
    "need",
    "function",
    "list",
    "working",
    "lambda",
    "x",
    "colon",
    "x",
    "greater",
    "equal",
    "60",
    "filter",
    "results",
    "convert",
    "list",
    "named",
    "past",
    "students",
    "result",
    "look",
    "something",
    "like",
    "five",
    "student",
    "grades",
    "100",
    "90",
    "80",
    "70",
    "let",
    "write",
    "program",
    "using",
    "list",
    "comprehension",
    "one",
    "portion",
    "formula",
    "list",
    "comprehension",
    "going",
    "add",
    "end",
    "going",
    "add",
    "conditional",
    "check",
    "sort",
    "condition",
    "iteration",
    "let",
    "write",
    "program",
    "using",
    "list",
    "comprehension",
    "following",
    "new",
    "updated",
    "formula",
    "need",
    "list",
    "named",
    "past",
    "students",
    "equals",
    "first",
    "comes",
    "expression",
    "example",
    "item",
    "iterable",
    "students",
    "check",
    "conditional",
    "greater",
    "equal",
    "60",
    "effect",
    "previous",
    "program",
    "instead",
    "uses",
    "list",
    "comprehension",
    "program",
    "multiple",
    "output",
    "need",
    "else",
    "statement",
    "within",
    "conditional",
    "actually",
    "going",
    "move",
    "portion",
    "conditional",
    "within",
    "formula",
    "right",
    "expression",
    "let",
    "write",
    "else",
    "statement",
    "let",
    "say",
    "instead",
    "excluding",
    "student",
    "pass",
    "replace",
    "grade",
    "word",
    "failed",
    "using",
    "else",
    "statement",
    "let",
    "going",
    "copy",
    "paste",
    "move",
    "conditional",
    "end",
    "expression",
    "portion",
    "greater",
    "equal",
    "60",
    "see",
    "need",
    "add",
    "else",
    "statement",
    "else",
    "return",
    "word",
    "failed",
    "replacing",
    "instance",
    "failing",
    "grade",
    "word",
    "failed",
    "instead",
    "condition",
    "returns",
    "whatever",
    "add",
    "end",
    "need",
    "else",
    "statement",
    "going",
    "add",
    "right",
    "expression",
    "everybody",
    "conclusion",
    "list",
    "comprehension",
    "way",
    "create",
    "new",
    "list",
    "less",
    "syntax",
    "even",
    "mimic",
    "certain",
    "lambda",
    "functions",
    "filter",
    "function",
    "added",
    "benefit",
    "easier",
    "read",
    "lambda",
    "function",
    "follow",
    "one",
    "formulas",
    "depending",
    "trying",
    "need",
    "least",
    "list",
    "equals",
    "expression",
    "item",
    "interval",
    "condition",
    "want",
    "check",
    "add",
    "end",
    "list",
    "comprehension",
    "else",
    "statement",
    "add",
    "right",
    "expression",
    "follow",
    "one",
    "formulas",
    "depending",
    "want",
    "write",
    "program",
    "list",
    "comprehension",
    "would",
    "like",
    "copy",
    "code",
    "post",
    "comments",
    "section",
    "well",
    "yeah",
    "list",
    "comprehensions",
    "work",
    "python",
    "yo",
    "going",
    "everybody",
    "bro",
    "hope",
    "well",
    "video",
    "going",
    "explain",
    "dictionary",
    "comprehensions",
    "python",
    "sit",
    "back",
    "relax",
    "enjoy",
    "show",
    "okay",
    "people",
    "dictionary",
    "comprehensions",
    "similar",
    "list",
    "comprehensions",
    "except",
    "dictionaries",
    "video",
    "okay",
    "seriously",
    "dictionary",
    "comprehension",
    "way",
    "create",
    "dictionaries",
    "using",
    "expression",
    "replace",
    "loops",
    "certain",
    "lambda",
    "functions",
    "follow",
    "formula",
    "dictionary",
    "equals",
    "key",
    "colon",
    "expression",
    "key",
    "value",
    "iterable",
    "let",
    "go",
    "examples",
    "first",
    "example",
    "going",
    "take",
    "dictionary",
    "named",
    "cities",
    "f",
    "f",
    "short",
    "fahrenheit",
    "different",
    "city",
    "names",
    "keys",
    "relative",
    "temperatures",
    "values",
    "fahrenheit",
    "new",
    "york",
    "32",
    "degrees",
    "fahrenheit",
    "boston",
    "los",
    "angeles",
    "100",
    "chicago",
    "creating",
    "separate",
    "dictionary",
    "temperatures",
    "celsius",
    "using",
    "dictionary",
    "comprehension",
    "let",
    "follow",
    "formula",
    "let",
    "create",
    "new",
    "name",
    "dictionary",
    "let",
    "say",
    "cities",
    "c",
    "short",
    "celsius",
    "equals",
    "follow",
    "pattern",
    "first",
    "key",
    "golden",
    "expression",
    "go",
    "back",
    "moment",
    "key",
    "comma",
    "value",
    "iterable",
    "cities",
    "f",
    "since",
    "working",
    "dictionary",
    "going",
    "use",
    "items",
    "method",
    "need",
    "fill",
    "expression",
    "formula",
    "convert",
    "fahrenheit",
    "celsius",
    "screen",
    "right",
    "let",
    "follow",
    "formula",
    "take",
    "value",
    "minus",
    "32",
    "good",
    "measure",
    "going",
    "put",
    "within",
    "parentheses",
    "multiply",
    "5",
    "divided",
    "9",
    "key",
    "expression",
    "convert",
    "fahrenheit",
    "celsius",
    "key",
    "value",
    "iterable",
    "cities",
    "f",
    "previous",
    "dictionary",
    "let",
    "test",
    "printing",
    "new",
    "dictionary",
    "cities",
    "c",
    "actually",
    "think",
    "going",
    "round",
    "numbers",
    "readable",
    "let",
    "round",
    "go",
    "new",
    "york",
    "celsius",
    "zero",
    "boston",
    "los",
    "angeles",
    "38",
    "chicago",
    "created",
    "new",
    "dictionary",
    "using",
    "dictionary",
    "comprehension",
    "dictionary",
    "comprehensions",
    "add",
    "conditional",
    "end",
    "let",
    "say",
    "separate",
    "dictionary",
    "weather",
    "like",
    "description",
    "weather",
    "city",
    "new",
    "york",
    "snowing",
    "boston",
    "sunny",
    "los",
    "angeles",
    "sunny",
    "chicago",
    "cloudy",
    "let",
    "say",
    "would",
    "like",
    "create",
    "separate",
    "dictionary",
    "dictionary",
    "comprehension",
    "cities",
    "weather",
    "sunny",
    "would",
    "write",
    "something",
    "like",
    "let",
    "say",
    "sunny",
    "weather",
    "name",
    "dictionary",
    "equals",
    "follow",
    "formula",
    "tack",
    "conditional",
    "end",
    "kind",
    "really",
    "key",
    "colon",
    "really",
    "expression",
    "let",
    "say",
    "value",
    "key",
    "comma",
    "value",
    "iterable",
    "weather",
    "dot",
    "items",
    "conditional",
    "value",
    "sunny",
    "looking",
    "sunny",
    "weather",
    "let",
    "print",
    "print",
    "dictionary",
    "sunny",
    "weather",
    "let",
    "make",
    "readable",
    "guys",
    "new",
    "dictionary",
    "comprehension",
    "create",
    "dictionary",
    "key",
    "values",
    "value",
    "sunny",
    "using",
    "conditional",
    "end",
    "dictionary",
    "comprehension",
    "third",
    "example",
    "well",
    "else",
    "condition",
    "add",
    "expression",
    "within",
    "dictionary",
    "comprehension",
    "going",
    "reuse",
    "previous",
    "dictionary",
    "first",
    "example",
    "cities",
    "temperatures",
    "values",
    "going",
    "replace",
    "temperature",
    "description",
    "weather",
    "warm",
    "cold",
    "let",
    "using",
    "dictionary",
    "comprehension",
    "contains",
    "else",
    "statement",
    "let",
    "say",
    "new",
    "dictionary",
    "named",
    "desk",
    "short",
    "description",
    "cities",
    "brief",
    "description",
    "city",
    "temperature",
    "follow",
    "formula",
    "key",
    "else",
    "conditional",
    "key",
    "value",
    "iterable",
    "actually",
    "probably",
    "copy",
    "save",
    "time",
    "okay",
    "iterable",
    "cities",
    "dot",
    "items",
    "conditional",
    "going",
    "return",
    "warm",
    "value",
    "greater",
    "equal",
    "let",
    "say",
    "else",
    "cold",
    "print",
    "new",
    "dictionary",
    "desk",
    "cities",
    "description",
    "cities",
    "new",
    "york",
    "cold",
    "32",
    "boston",
    "warm",
    "los",
    "angeles",
    "warm",
    "chicago",
    "warm",
    "condition",
    "gets",
    "somewhat",
    "complex",
    "even",
    "call",
    "separate",
    "function",
    "keep",
    "code",
    "organized",
    "key",
    "call",
    "function",
    "pass",
    "value",
    "key",
    "value",
    "iterable",
    "going",
    "reuse",
    "city",
    "names",
    "temperatures",
    "time",
    "going",
    "call",
    "function",
    "instead",
    "think",
    "reuse",
    "code",
    "previous",
    "example",
    "separate",
    "dictionary",
    "named",
    "desk",
    "cities",
    "going",
    "replace",
    "else",
    "statement",
    "function",
    "let",
    "say",
    "function",
    "named",
    "check",
    "temp",
    "pass",
    "value",
    "need",
    "define",
    "function",
    "let",
    "define",
    "let",
    "define",
    "check",
    "temp",
    "parameter",
    "value",
    "currently",
    "working",
    "within",
    "dictionary",
    "value",
    "write",
    "value",
    "greater",
    "equal",
    "let",
    "say",
    "anything",
    "70",
    "return",
    "word",
    "hot",
    "else",
    "let",
    "say",
    "69",
    "greater",
    "equal",
    "value",
    "value",
    "greater",
    "equal",
    "40",
    "return",
    "word",
    "warm",
    "lastly",
    "else",
    "return",
    "cold",
    "let",
    "fix",
    "spacing",
    "depending",
    "temperature",
    "stored",
    "within",
    "value",
    "dictionary",
    "call",
    "function",
    "return",
    "one",
    "different",
    "outputs",
    "kind",
    "like",
    "using",
    "map",
    "function",
    "map",
    "lambda",
    "function",
    "let",
    "print",
    "description",
    "cities",
    "get",
    "short",
    "description",
    "temperature",
    "city",
    "call",
    "check",
    "temperature",
    "function",
    "pass",
    "value",
    "dictionary",
    "new",
    "york",
    "cold",
    "32",
    "degrees",
    "fahrenheit",
    "boston",
    "hot",
    "los",
    "angeles",
    "hot",
    "100",
    "chicago",
    "warm",
    "50",
    "69",
    "40",
    "within",
    "function",
    "dictionary",
    "comprehension",
    "shortcut",
    "create",
    "dictionaries",
    "using",
    "expression",
    "replace",
    "loops",
    "certain",
    "lambda",
    "functions",
    "would",
    "like",
    "copy",
    "code",
    "post",
    "comment",
    "section",
    "well",
    "yeah",
    "dictionary",
    "comprehensions",
    "work",
    "python",
    "hey",
    "going",
    "everybody",
    "bro",
    "hope",
    "well",
    "today",
    "video",
    "going",
    "show",
    "zip",
    "function",
    "works",
    "python",
    "sit",
    "back",
    "relax",
    "enjoy",
    "show",
    "right",
    "ladies",
    "gentlemen",
    "welcome",
    "back",
    "talking",
    "zip",
    "function",
    "today",
    "zip",
    "function",
    "aggregate",
    "elements",
    "two",
    "iterables",
    "iterables",
    "things",
    "like",
    "lists",
    "tuples",
    "sets",
    "etc",
    "zip",
    "function",
    "create",
    "zip",
    "object",
    "paired",
    "elements",
    "iterable",
    "stored",
    "tuple",
    "element",
    "within",
    "zip",
    "object",
    "example",
    "let",
    "say",
    "two",
    "different",
    "types",
    "iterables",
    "list",
    "usernames",
    "usernames",
    "within",
    "dude",
    "bro",
    "mr",
    "tuple",
    "passwords",
    "secure",
    "passwords",
    "password",
    "abc123",
    "guest",
    "would",
    "like",
    "zip",
    "elements",
    "iterable",
    "together",
    "pairs",
    "pair",
    "going",
    "stored",
    "tuple",
    "within",
    "zip",
    "object",
    "let",
    "say",
    "create",
    "zip",
    "object",
    "called",
    "users",
    "use",
    "zip",
    "function",
    "zip",
    "function",
    "take",
    "varying",
    "amount",
    "iterables",
    "going",
    "pass",
    "usernames",
    "passwords",
    "zip",
    "together",
    "let",
    "pass",
    "usernames",
    "well",
    "passwords",
    "zip",
    "object",
    "users",
    "actually",
    "iterable",
    "zip",
    "objects",
    "iterable",
    "use",
    "within",
    "loop",
    "let",
    "type",
    "users",
    "print",
    "get",
    "zip",
    "object",
    "tuples",
    "tuple",
    "storing",
    "pair",
    "elements",
    "two",
    "iterables",
    "users",
    "zip",
    "object",
    "believe",
    "let",
    "prove",
    "going",
    "print",
    "type",
    "users",
    "print",
    "users",
    "indeed",
    "zip",
    "object",
    "easily",
    "convert",
    "different",
    "type",
    "iterable",
    "using",
    "cast",
    "let",
    "say",
    "would",
    "like",
    "convert",
    "zip",
    "object",
    "list",
    "surround",
    "zip",
    "function",
    "cast",
    "list",
    "data",
    "type",
    "users",
    "list",
    "list",
    "tuples",
    "tuple",
    "storing",
    "pair",
    "elements",
    "two",
    "iterables",
    "usernames",
    "passwords",
    "currently",
    "since",
    "passing",
    "two",
    "different",
    "iterables",
    "easily",
    "make",
    "dictionary",
    "key",
    "value",
    "pairs",
    "let",
    "cast",
    "zip",
    "object",
    "dictionary",
    "display",
    "elements",
    "within",
    "dictionary",
    "key",
    "value",
    "pairs",
    "going",
    "change",
    "loop",
    "key",
    "value",
    "users",
    "dot",
    "use",
    "items",
    "method",
    "print",
    "key",
    "comma",
    "value",
    "actually",
    "think",
    "going",
    "separate",
    "colon",
    "make",
    "readable",
    "zip",
    "two",
    "intervals",
    "together",
    "end",
    "dictionary",
    "usernames",
    "passwords",
    "name",
    "dictionary",
    "users",
    "limited",
    "two",
    "iterables",
    "add",
    "third",
    "iterable",
    "time",
    "let",
    "create",
    "maybe",
    "list",
    "list",
    "last",
    "login",
    "dates",
    "call",
    "login",
    "date",
    "equals",
    "make",
    "list",
    "let",
    "make",
    "dates",
    "let",
    "say",
    "1",
    "1",
    "dash",
    "20",
    "21",
    "21",
    "okay",
    "let",
    "create",
    "zip",
    "object",
    "users",
    "going",
    "zip",
    "user",
    "names",
    "passwords",
    "login",
    "date",
    "let",
    "iterate",
    "users",
    "print",
    "tuple",
    "element",
    "instead",
    "pair",
    "trio",
    "guess",
    "different",
    "elements",
    "iterable",
    "conclusion",
    "zip",
    "function",
    "aggregate",
    "elements",
    "two",
    "iterables",
    "create",
    "zip",
    "object",
    "paired",
    "grouped",
    "together",
    "elements",
    "stored",
    "tuple",
    "element",
    "within",
    "zip",
    "object",
    "zip",
    "function",
    "would",
    "like",
    "copy",
    "code",
    "post",
    "comment",
    "section",
    "well",
    "yeah",
    "zip",
    "function",
    "works",
    "python",
    "hey",
    "going",
    "everybody",
    "bro",
    "hope",
    "well",
    "going",
    "explain",
    "purpose",
    "name",
    "equals",
    "main",
    "python",
    "sit",
    "back",
    "relax",
    "enjoy",
    "show",
    "programming",
    "journey",
    "may",
    "encountered",
    "strange",
    "statement",
    "name",
    "equals",
    "main",
    "heck",
    "mean",
    "python",
    "files",
    "also",
    "referred",
    "modules",
    "including",
    "statement",
    "gives",
    "modules",
    "flexibility",
    "one",
    "module",
    "statement",
    "run",
    "standalone",
    "program",
    "two",
    "module",
    "imported",
    "used",
    "modules",
    "sort",
    "useful",
    "functions",
    "resources",
    "within",
    "module",
    "imported",
    "including",
    "statement",
    "name",
    "equals",
    "main",
    "checking",
    "see",
    "user",
    "running",
    "module",
    "either",
    "standalone",
    "program",
    "importing",
    "another",
    "module",
    "behind",
    "scenes",
    "python",
    "interpreter",
    "set",
    "special",
    "variables",
    "one",
    "double",
    "underscore",
    "name",
    "variable",
    "python",
    "assign",
    "name",
    "variable",
    "value",
    "main",
    "initial",
    "module",
    "run",
    "actually",
    "test",
    "printing",
    "double",
    "underscore",
    "name",
    "since",
    "initial",
    "module",
    "run",
    "module",
    "one",
    "example",
    "name",
    "going",
    "assigned",
    "value",
    "string",
    "main",
    "check",
    "two",
    "modules",
    "import",
    "module",
    "2",
    "check",
    "name",
    "variable",
    "module",
    "let",
    "try",
    "import",
    "module",
    "two",
    "order",
    "access",
    "variable",
    "another",
    "module",
    "need",
    "type",
    "name",
    "module",
    "module",
    "two",
    "dot",
    "would",
    "like",
    "check",
    "special",
    "name",
    "variable",
    "module",
    "2",
    "print",
    "import",
    "module",
    "name",
    "variable",
    "going",
    "assigned",
    "name",
    "module",
    "case",
    "module",
    "time",
    "change",
    "roles",
    "around",
    "going",
    "copy",
    "text",
    "paste",
    "within",
    "module",
    "two",
    "going",
    "import",
    "module",
    "one",
    "print",
    "special",
    "name",
    "variable",
    "module",
    "module",
    "2",
    "print",
    "name",
    "variable",
    "module",
    "1",
    "imported",
    "run",
    "program",
    "going",
    "instead",
    "run",
    "module",
    "time",
    "special",
    "name",
    "variable",
    "module",
    "2",
    "main",
    "special",
    "name",
    "variable",
    "module",
    "1",
    "module",
    "1",
    "name",
    "module",
    "including",
    "statement",
    "name",
    "equals",
    "main",
    "checking",
    "see",
    "module",
    "run",
    "directly",
    "indirectly",
    "let",
    "test",
    "within",
    "statement",
    "name",
    "equals",
    "main",
    "let",
    "print",
    "running",
    "module",
    "directly",
    "else",
    "must",
    "mean",
    "running",
    "module",
    "indirectly",
    "let",
    "print",
    "running",
    "module",
    "indirectly",
    "okay",
    "going",
    "go",
    "module",
    "1",
    "run",
    "running",
    "module",
    "directly",
    "let",
    "thing",
    "module",
    "two",
    "need",
    "import",
    "module",
    "one",
    "let",
    "run",
    "module",
    "two",
    "running",
    "module",
    "indirectly",
    "time",
    "going",
    "write",
    "pass",
    "within",
    "name",
    "equals",
    "main",
    "placeholder",
    "get",
    "rid",
    "statement",
    "let",
    "say",
    "within",
    "module",
    "1",
    "useful",
    "function",
    "resource",
    "would",
    "like",
    "access",
    "module",
    "let",
    "say",
    "function",
    "named",
    "hello",
    "print",
    "word",
    "hello",
    "let",
    "pretend",
    "useful",
    "function",
    "really",
    "let",
    "pretend",
    "order",
    "use",
    "function",
    "module",
    "two",
    "need",
    "import",
    "module",
    "one",
    "type",
    "module",
    "one",
    "dot",
    "name",
    "function",
    "going",
    "run",
    "module",
    "2",
    "print",
    "hello",
    "run",
    "program",
    "module",
    "right",
    "module",
    "1",
    "run",
    "directly",
    "standalone",
    "program",
    "print",
    "word",
    "hello",
    "could",
    "within",
    "name",
    "equals",
    "main",
    "call",
    "hello",
    "function",
    "directly",
    "let",
    "run",
    "module",
    "one",
    "hello",
    "one",
    "thing",
    "might",
    "see",
    "within",
    "statement",
    "name",
    "equals",
    "main",
    "might",
    "call",
    "main",
    "function",
    "write",
    "main",
    "body",
    "program",
    "within",
    "main",
    "function",
    "everybody",
    "conclusion",
    "reason",
    "people",
    "may",
    "include",
    "statement",
    "name",
    "equals",
    "main",
    "allows",
    "modules",
    "flexibility",
    "run",
    "standalone",
    "program",
    "imported",
    "used",
    "modules",
    "python",
    "interpreter",
    "sets",
    "special",
    "variable",
    "name",
    "value",
    "main",
    "initial",
    "module",
    "run",
    "would",
    "like",
    "copy",
    "code",
    "notes",
    "post",
    "comment",
    "section",
    "yeah",
    "purpose",
    "name",
    "equals",
    "main",
    "python",
    "hey",
    "going",
    "everybody",
    "bro",
    "hope",
    "well",
    "video",
    "going",
    "show",
    "useful",
    "functions",
    "related",
    "times",
    "dates",
    "using",
    "time",
    "module",
    "python",
    "sit",
    "back",
    "relax",
    "enjoy",
    "show",
    "alright",
    "everybody",
    "time",
    "module",
    "let",
    "begin",
    "importing",
    "time",
    "first",
    "thing",
    "going",
    "explain",
    "find",
    "computer",
    "epic",
    "also",
    "pronounced",
    "epoch",
    "date",
    "time",
    "computer",
    "thinks",
    "time",
    "began",
    "think",
    "way",
    "least",
    "use",
    "epic",
    "reference",
    "point",
    "find",
    "computer",
    "epic",
    "going",
    "vary",
    "based",
    "computer",
    "operating",
    "system",
    "find",
    "computer",
    "epic",
    "type",
    "time",
    "dot",
    "c",
    "time",
    "argument",
    "pass",
    "zero",
    "method",
    "method",
    "convert",
    "time",
    "expressed",
    "seconds",
    "convert",
    "readable",
    "string",
    "pass",
    "0",
    "print",
    "well",
    "display",
    "date",
    "time",
    "epic",
    "reference",
    "point",
    "epic",
    "wednesday",
    "december",
    "31st",
    "6",
    "1969",
    "added",
    "note",
    "c",
    "time",
    "method",
    "convert",
    "time",
    "expressed",
    "seconds",
    "since",
    "epic",
    "convert",
    "readable",
    "string",
    "readable",
    "date",
    "time",
    "practice",
    "let",
    "pass",
    "perhaps",
    "1",
    "million",
    "seconds",
    "see",
    "date",
    "time",
    "receive",
    "c",
    "time",
    "method",
    "return",
    "date",
    "time",
    "one",
    "million",
    "seconds",
    "past",
    "epic",
    "would",
    "monday",
    "january",
    "12th",
    "7",
    "next",
    "method",
    "time",
    "method",
    "time",
    "module",
    "let",
    "print",
    "time",
    "dot",
    "time",
    "method",
    "method",
    "return",
    "current",
    "seconds",
    "passed",
    "since",
    "epic",
    "using",
    "computer",
    "clock",
    "number",
    "end",
    "billion",
    "seconds",
    "billion",
    "seconds",
    "passed",
    "since",
    "date",
    "epic",
    "believe",
    "december",
    "31st",
    "1969",
    "every",
    "time",
    "rerun",
    "program",
    "see",
    "amount",
    "seconds",
    "passed",
    "actually",
    "increasing",
    "time",
    "method",
    "return",
    "current",
    "seconds",
    "since",
    "epic",
    "using",
    "computer",
    "clock",
    "know",
    "fun",
    "let",
    "change",
    "date",
    "time",
    "clock",
    "see",
    "happens",
    "let",
    "change",
    "year",
    "year",
    "2000",
    "change",
    "close",
    "let",
    "see",
    "number",
    "get",
    "time",
    "method",
    "get",
    "1",
    "billion",
    "948",
    "million",
    "seconds",
    "passed",
    "need",
    "retrieve",
    "current",
    "date",
    "time",
    "well",
    "one",
    "ways",
    "could",
    "retrieve",
    "one",
    "way",
    "combine",
    "methods",
    "see",
    "time",
    "method",
    "time",
    "method",
    "time",
    "module",
    "let",
    "print",
    "time",
    "dot",
    "c",
    "time",
    "going",
    "pass",
    "amount",
    "seconds",
    "c",
    "time",
    "method",
    "argument",
    "within",
    "c",
    "time",
    "method",
    "going",
    "call",
    "time",
    "method",
    "time",
    "method",
    "return",
    "amount",
    "seconds",
    "since",
    "epic",
    "c",
    "time",
    "method",
    "convert",
    "amount",
    "seconds",
    "readable",
    "date",
    "time",
    "current",
    "date",
    "time",
    "saturday",
    "january",
    "23rd",
    "3",
    "20",
    "21",
    "one",
    "way",
    "get",
    "current",
    "date",
    "time",
    "another",
    "way",
    "use",
    "local",
    "time",
    "method",
    "local",
    "time",
    "method",
    "create",
    "time",
    "object",
    "based",
    "current",
    "time",
    "going",
    "create",
    "variable",
    "called",
    "time",
    "object",
    "need",
    "explain",
    "things",
    "time",
    "objects",
    "best",
    "explain",
    "going",
    "print",
    "time",
    "object",
    "time",
    "object",
    "also",
    "referred",
    "struct",
    "time",
    "object",
    "made",
    "different",
    "keyword",
    "arguments",
    "year",
    "month",
    "day",
    "hour",
    "minutes",
    "seconds",
    "day",
    "week",
    "day",
    "year",
    "keyword",
    "argument",
    "something",
    "daylight",
    "savings",
    "time",
    "quite",
    "uses",
    "time",
    "objects",
    "one",
    "way",
    "format",
    "however",
    "want",
    "right",
    "time",
    "object",
    "readable",
    "format",
    "convert",
    "time",
    "object",
    "readable",
    "string",
    "need",
    "help",
    "separate",
    "function",
    "strf",
    "time",
    "function",
    "str",
    "short",
    "string",
    "f4",
    "format",
    "time",
    "well",
    "time",
    "guess",
    "function",
    "needs",
    "two",
    "arguments",
    "format",
    "time",
    "object",
    "strf",
    "time",
    "function",
    "accept",
    "format",
    "time",
    "object",
    "argument",
    "format",
    "really",
    "string",
    "different",
    "directives",
    "best",
    "explain",
    "going",
    "head",
    "python",
    "official",
    "documentation",
    "subject",
    "python",
    "website",
    "regarding",
    "time",
    "module",
    "underneath",
    "section",
    "strf",
    "time",
    "function",
    "different",
    "directives",
    "embed",
    "within",
    "format",
    "string",
    "pass",
    "argument",
    "depending",
    "directive",
    "add",
    "display",
    "certain",
    "format",
    "date",
    "time",
    "example",
    "pass",
    "let",
    "say",
    "percent",
    "lowercase",
    "display",
    "time",
    "object",
    "weekday",
    "name",
    "limited",
    "one",
    "directive",
    "add",
    "combination",
    "directives",
    "add",
    "percent",
    "well",
    "would",
    "display",
    "month",
    "date",
    "time",
    "object",
    "number",
    "1",
    "bunch",
    "directives",
    "going",
    "using",
    "within",
    "string",
    "format",
    "argument",
    "going",
    "pass",
    "percent",
    "capital",
    "b",
    "name",
    "month",
    "percent",
    "day",
    "percent",
    "year",
    "percent",
    "h",
    "hour",
    "format",
    "going",
    "add",
    "colon",
    "separate",
    "hours",
    "minutes",
    "percent",
    "minutes",
    "colon",
    "percent",
    "seconds",
    "going",
    "assign",
    "variable",
    "let",
    "say",
    "local",
    "time",
    "local",
    "time",
    "string",
    "let",
    "print",
    "local",
    "time",
    "current",
    "time",
    "january",
    "23rd",
    "2021",
    "3",
    "oh",
    "almost",
    "forgot",
    "also",
    "get",
    "utc",
    "time",
    "coordinated",
    "universal",
    "time",
    "know",
    "works",
    "need",
    "would",
    "use",
    "gm",
    "time",
    "method",
    "utc",
    "time",
    "coordinated",
    "universal",
    "time",
    "okay",
    "next",
    "strp",
    "time",
    "function",
    "function",
    "parse",
    "string",
    "representation",
    "time",
    "date",
    "return",
    "time",
    "object",
    "need",
    "pass",
    "string",
    "representing",
    "date",
    "time",
    "well",
    "format",
    "string",
    "let",
    "create",
    "time",
    "string",
    "variable",
    "going",
    "string",
    "representation",
    "date",
    "let",
    "say",
    "20th",
    "april",
    "2020",
    "take",
    "string",
    "representation",
    "time",
    "date",
    "parse",
    "time",
    "object",
    "going",
    "pass",
    "time",
    "string",
    "variable",
    "well",
    "format",
    "string",
    "let",
    "say",
    "would",
    "like",
    "parse",
    "day",
    "would",
    "percent",
    "day",
    "percent",
    "b",
    "name",
    "month",
    "comma",
    "percent",
    "year",
    "function",
    "create",
    "time",
    "object",
    "let",
    "assign",
    "variable",
    "time",
    "object",
    "equals",
    "time",
    "dot",
    "strp",
    "time",
    "passing",
    "string",
    "representation",
    "time",
    "date",
    "well",
    "format",
    "string",
    "print",
    "time",
    "object",
    "using",
    "print",
    "statement",
    "however",
    "going",
    "form",
    "somewhat",
    "difficult",
    "read",
    "see",
    "least",
    "time",
    "object",
    "keywords",
    "filled",
    "anything",
    "passed",
    "via",
    "format",
    "directives",
    "next",
    "function",
    "asc",
    "time",
    "function",
    "function",
    "accepts",
    "time",
    "object",
    "tuple",
    "representation",
    "relative",
    "time",
    "time",
    "let",
    "create",
    "time",
    "tuple",
    "going",
    "follow",
    "order",
    "pass",
    "nine",
    "values",
    "first",
    "value",
    "year",
    "let",
    "pass",
    "perhaps",
    "2020",
    "month",
    "let",
    "say",
    "four",
    "day",
    "20",
    "four",
    "hours",
    "let",
    "say",
    "four",
    "minutes",
    "20",
    "seconds",
    "maybe",
    "zero",
    "let",
    "fix",
    "spacing",
    "okay",
    "also",
    "pass",
    "numbered",
    "day",
    "week",
    "um",
    "going",
    "say",
    "zero",
    "think",
    "really",
    "important",
    "day",
    "year",
    "zero",
    "negative",
    "one",
    "zero",
    "daylight",
    "savings",
    "time",
    "created",
    "time",
    "tuple",
    "pass",
    "time",
    "object",
    "tuple",
    "representation",
    "time",
    "following",
    "formula",
    "let",
    "pass",
    "time",
    "tuple",
    "create",
    "time",
    "string",
    "string",
    "representation",
    "time",
    "create",
    "let",
    "print",
    "time",
    "string",
    "april",
    "20th",
    "four",
    "morning",
    "year",
    "asc",
    "time",
    "convert",
    "tuple",
    "representation",
    "time",
    "date",
    "time",
    "object",
    "convert",
    "readable",
    "string",
    "another",
    "option",
    "use",
    "k",
    "time",
    "mk",
    "time",
    "take",
    "tuple",
    "representation",
    "time",
    "time",
    "object",
    "convert",
    "seconds",
    "since",
    "epic",
    "april",
    "20th",
    "year",
    "2020",
    "billion",
    "seconds",
    "since",
    "epic",
    "date",
    "december",
    "31st",
    "year",
    "1969",
    "useful",
    "functions",
    "time",
    "module",
    "would",
    "like",
    "copy",
    "code",
    "post",
    "comment",
    "section",
    "well",
    "yeah",
    "time",
    "module",
    "python",
    "yo",
    "going",
    "everybody",
    "bro",
    "hope",
    "well",
    "video",
    "going",
    "explain",
    "python",
    "sit",
    "back",
    "relax",
    "enjoy",
    "show",
    "think",
    "thread",
    "flow",
    "execution",
    "like",
    "river",
    "thread",
    "carry",
    "separate",
    "order",
    "instructions",
    "use",
    "process",
    "program",
    "run",
    "different",
    "parts",
    "program",
    "different",
    "times",
    "run",
    "concurrently",
    "truly",
    "parallel",
    "concept",
    "later",
    "referred",
    "reds",
    "take",
    "turn",
    "running",
    "achieve",
    "concurrency",
    "due",
    "notorious",
    "feature",
    "known",
    "gil",
    "global",
    "interpreter",
    "lock",
    "one",
    "thread",
    "running",
    "one",
    "time",
    "take",
    "turns",
    "one",
    "thread",
    "idle",
    "allows",
    "one",
    "thread",
    "hold",
    "control",
    "python",
    "interpreter",
    "one",
    "time",
    "run",
    "concurrently",
    "truly",
    "parallel",
    "programs",
    "tasks",
    "divided",
    "two",
    "different",
    "categories",
    "cpu",
    "bound",
    "program",
    "task",
    "spends",
    "time",
    "waiting",
    "internal",
    "events",
    "task",
    "cpu",
    "intensive",
    "better",
    "use",
    "tasks",
    "cpu",
    "bound",
    "tasks",
    "io",
    "bound",
    "means",
    "program",
    "spend",
    "time",
    "waiting",
    "external",
    "events",
    "waiting",
    "user",
    "input",
    "activities",
    "like",
    "web",
    "scraping",
    "lot",
    "sitting",
    "around",
    "bound",
    "tasks",
    "better",
    "use",
    "multiple",
    "threads",
    "running",
    "concurrently",
    "truly",
    "parallel",
    "like",
    "importing",
    "threading",
    "module",
    "count",
    "number",
    "threads",
    "currently",
    "running",
    "background",
    "whenever",
    "run",
    "program",
    "one",
    "thread",
    "running",
    "charge",
    "executing",
    "program",
    "print",
    "active",
    "count",
    "threads",
    "running",
    "program",
    "using",
    "active",
    "count",
    "function",
    "threading",
    "module",
    "print",
    "one",
    "one",
    "thread",
    "running",
    "print",
    "list",
    "threads",
    "running",
    "using",
    "enumerate",
    "function",
    "one",
    "thread",
    "charge",
    "running",
    "program",
    "referred",
    "main",
    "thread",
    "using",
    "concept",
    "one",
    "thread",
    "running",
    "concurrently",
    "truly",
    "parallel",
    "threads",
    "take",
    "turns",
    "one",
    "idle",
    "one",
    "thread",
    "running",
    "main",
    "thread",
    "charge",
    "running",
    "main",
    "body",
    "program",
    "main",
    "thread",
    "charge",
    "running",
    "main",
    "body",
    "program",
    "another",
    "thread",
    "charge",
    "separate",
    "part",
    "maybe",
    "like",
    "countdown",
    "timer",
    "something",
    "one",
    "good",
    "example",
    "take",
    "quiz",
    "game",
    "made",
    "number",
    "videos",
    "ago",
    "waiting",
    "user",
    "input",
    "bound",
    "task",
    "could",
    "countdown",
    "timer",
    "going",
    "like",
    "many",
    "seconds",
    "answer",
    "question",
    "could",
    "one",
    "thread",
    "charge",
    "waiting",
    "user",
    "input",
    "another",
    "thread",
    "charge",
    "countdown",
    "timer",
    "example",
    "two",
    "threads",
    "running",
    "concurrently",
    "video",
    "creating",
    "program",
    "involves",
    "different",
    "threads",
    "charge",
    "different",
    "parts",
    "program",
    "run",
    "concurrently",
    "take",
    "turns",
    "one",
    "idle",
    "let",
    "say",
    "running",
    "late",
    "school",
    "work",
    "morning",
    "three",
    "different",
    "tasks",
    "need",
    "complete",
    "leave",
    "school",
    "work",
    "think",
    "three",
    "different",
    "things",
    "morning",
    "maybe",
    "eat",
    "breakfast",
    "people",
    "drink",
    "coffee",
    "maybe",
    "beverage",
    "choice",
    "drink",
    "coffee",
    "people",
    "like",
    "like",
    "homework",
    "last",
    "minute",
    "say",
    "study",
    "leave",
    "work",
    "school",
    "morning",
    "functions",
    "functions",
    "take",
    "amount",
    "time",
    "complete",
    "main",
    "thread",
    "sleep",
    "given",
    "number",
    "seconds",
    "using",
    "sleep",
    "function",
    "time",
    "dot",
    "sleep",
    "let",
    "say",
    "order",
    "eat",
    "breakfast",
    "task",
    "take",
    "three",
    "seconds",
    "let",
    "pretend",
    "instead",
    "minutes",
    "seconds",
    "drink",
    "coffee",
    "take",
    "four",
    "seconds",
    "study",
    "take",
    "five",
    "seconds",
    "finish",
    "sleeping",
    "let",
    "print",
    "confirmation",
    "message",
    "let",
    "say",
    "eat",
    "breakfast",
    "finish",
    "eating",
    "breakfast",
    "drink",
    "coffee",
    "drink",
    "coffee",
    "study",
    "finish",
    "studying",
    "tasks",
    "bound",
    "going",
    "spending",
    "lot",
    "time",
    "waiting",
    "around",
    "external",
    "events",
    "waiting",
    "sleep",
    "function",
    "expire",
    "finish",
    "task",
    "going",
    "three",
    "functions",
    "run",
    "main",
    "thread",
    "see",
    "long",
    "takes",
    "us",
    "complete",
    "morning",
    "ritual",
    "three",
    "tasks",
    "let",
    "call",
    "three",
    "functions",
    "within",
    "main",
    "thread",
    "let",
    "call",
    "eat",
    "breakfast",
    "function",
    "first",
    "followed",
    "drink",
    "coffee",
    "study",
    "order",
    "program",
    "going",
    "take",
    "approximately",
    "let",
    "see",
    "12",
    "seconds",
    "complete",
    "going",
    "pause",
    "second",
    "eat",
    "breakfast",
    "followed",
    "drank",
    "coffee",
    "study",
    "finished",
    "studying",
    "program",
    "took",
    "12",
    "seconds",
    "overall",
    "realistic",
    "would",
    "done",
    "would",
    "sit",
    "eat",
    "breakfast",
    "three",
    "minutes",
    "well",
    "three",
    "seconds",
    "case",
    "finish",
    "eating",
    "breakfast",
    "allowed",
    "drink",
    "coffee",
    "finish",
    "coffee",
    "study",
    "completed",
    "tasks",
    "sequentially",
    "concurrently",
    "us",
    "move",
    "next",
    "function",
    "need",
    "complete",
    "previous",
    "functions",
    "order",
    "realistically",
    "us",
    "human",
    "beings",
    "would",
    "probably",
    "eat",
    "breakfast",
    "drink",
    "coffee",
    "study",
    "altogether",
    "multitask",
    "complete",
    "three",
    "functions",
    "less",
    "time",
    "kind",
    "process",
    "three",
    "separate",
    "functions",
    "running",
    "concurrently",
    "multitasking",
    "eating",
    "breakfast",
    "drinking",
    "coffee",
    "studying",
    "currently",
    "one",
    "thread",
    "charge",
    "three",
    "separate",
    "functions",
    "could",
    "create",
    "three",
    "additional",
    "threads",
    "thread",
    "charge",
    "task",
    "main",
    "thread",
    "running",
    "background",
    "complete",
    "rest",
    "program",
    "create",
    "additional",
    "thread",
    "let",
    "say",
    "x",
    "equals",
    "threading",
    "dot",
    "thread",
    "need",
    "pass",
    "target",
    "target",
    "equals",
    "name",
    "function",
    "let",
    "say",
    "thread",
    "x",
    "charge",
    "eating",
    "breakfast",
    "pass",
    "arguments",
    "function",
    "parameters",
    "typing",
    "args",
    "pass",
    "tuple",
    "let",
    "say",
    "one",
    "argument",
    "pass",
    "type",
    "argument",
    "followed",
    "comma",
    "arguments",
    "example",
    "need",
    "sure",
    "enter",
    "okay",
    "begin",
    "thread",
    "type",
    "name",
    "thread",
    "case",
    "x",
    "dot",
    "start",
    "additional",
    "thread",
    "thread",
    "charge",
    "eating",
    "breakfast",
    "let",
    "create",
    "another",
    "thread",
    "drink",
    "coffee",
    "call",
    "target",
    "drink",
    "coffee",
    "lastly",
    "thread",
    "charge",
    "studying",
    "z",
    "target",
    "study",
    "function",
    "okay",
    "let",
    "see",
    "long",
    "takes",
    "us",
    "complete",
    "program",
    "oh",
    "sure",
    "comment",
    "function",
    "calls",
    "within",
    "main",
    "thread",
    "want",
    "main",
    "thread",
    "charge",
    "anymore",
    "okay",
    "run",
    "program",
    "four",
    "threads",
    "running",
    "time",
    "eat",
    "breakfast",
    "drink",
    "coffee",
    "finish",
    "studying",
    "program",
    "took",
    "approximately",
    "five",
    "seconds",
    "finish",
    "reason",
    "program",
    "took",
    "five",
    "seconds",
    "instead",
    "12",
    "main",
    "thread",
    "charge",
    "running",
    "tasks",
    "sequentially",
    "order",
    "since",
    "thread",
    "dedicated",
    "task",
    "run",
    "concurrently",
    "instead",
    "sequentially",
    "program",
    "took",
    "five",
    "seconds",
    "complete",
    "may",
    "noticed",
    "activecount",
    "function",
    "well",
    "enumerate",
    "function",
    "called",
    "threads",
    "1",
    "2",
    "3",
    "finished",
    "respective",
    "tasks",
    "main",
    "thread",
    "going",
    "wait",
    "around",
    "three",
    "threads",
    "complete",
    "set",
    "instructions",
    "longer",
    "charge",
    "three",
    "functions",
    "program",
    "going",
    "handle",
    "three",
    "functions",
    "three",
    "threads",
    "main",
    "thread",
    "going",
    "continue",
    "set",
    "instructions",
    "job",
    "print",
    "active",
    "count",
    "well",
    "call",
    "enumerate",
    "function",
    "finished",
    "tasks",
    "threads",
    "one",
    "two",
    "three",
    "one",
    "trick",
    "use",
    "time",
    "modules",
    "performance",
    "counter",
    "function",
    "function",
    "return",
    "long",
    "takes",
    "calling",
    "thread",
    "main",
    "thread",
    "finish",
    "set",
    "instructions",
    "main",
    "thread",
    "charge",
    "executing",
    "three",
    "functions",
    "main",
    "thread",
    "charge",
    "creating",
    "three",
    "additional",
    "threads",
    "calling",
    "activecount",
    "function",
    "enumerate",
    "function",
    "well",
    "performance",
    "counter",
    "function",
    "main",
    "thread",
    "take",
    "approximately",
    "seconds",
    "complete",
    "three",
    "threads",
    "still",
    "running",
    "background",
    "main",
    "threads",
    "job",
    "order",
    "instructions",
    "create",
    "three",
    "additional",
    "threads",
    "immediately",
    "print",
    "whatever",
    "returned",
    "via",
    "activecount",
    "function",
    "enumerate",
    "performance",
    "counter",
    "main",
    "thread",
    "says",
    "finished",
    "tasks",
    "seconds",
    "threads",
    "one",
    "three",
    "still",
    "trying",
    "catch",
    "main",
    "thread",
    "finished",
    "three",
    "additional",
    "threads",
    "active",
    "threads",
    "completed",
    "tasks",
    "program",
    "finish",
    "exit",
    "also",
    "concept",
    "called",
    "thread",
    "synchronization",
    "calling",
    "thread",
    "case",
    "main",
    "thread",
    "wait",
    "around",
    "another",
    "thread",
    "finish",
    "move",
    "instruction",
    "set",
    "let",
    "say",
    "would",
    "like",
    "main",
    "thread",
    "wait",
    "around",
    "thread",
    "1",
    "also",
    "known",
    "x",
    "going",
    "use",
    "join",
    "function",
    "thread",
    "x",
    "main",
    "thread",
    "wait",
    "around",
    "thread",
    "x",
    "also",
    "known",
    "thread",
    "1",
    "finish",
    "move",
    "instruction",
    "set",
    "let",
    "z",
    "main",
    "thread",
    "move",
    "rest",
    "program",
    "wait",
    "threads",
    "synchronize",
    "join",
    "move",
    "rest",
    "instruction",
    "set",
    "time",
    "program",
    "going",
    "look",
    "little",
    "something",
    "like",
    "eat",
    "breakfast",
    "drink",
    "coffee",
    "finish",
    "studying",
    "time",
    "reach",
    "active",
    "count",
    "threads",
    "already",
    "joined",
    "synchronized",
    "longer",
    "active",
    "enumerate",
    "active",
    "threads",
    "main",
    "thread",
    "main",
    "thread",
    "completed",
    "seconds",
    "time",
    "lot",
    "waiting",
    "around",
    "waiting",
    "threads",
    "x",
    "z",
    "join",
    "finish",
    "conclusion",
    "thread",
    "flow",
    "execution",
    "like",
    "separate",
    "order",
    "instructions",
    "program",
    "follow",
    "run",
    "program",
    "always",
    "least",
    "one",
    "thread",
    "running",
    "initially",
    "referred",
    "main",
    "thread",
    "however",
    "multiple",
    "threads",
    "using",
    "concept",
    "multiple",
    "threads",
    "running",
    "concurrently",
    "truly",
    "parallel",
    "cover",
    "video",
    "due",
    "feature",
    "known",
    "gil",
    "global",
    "interpreter",
    "lock",
    "allows",
    "one",
    "thread",
    "hold",
    "control",
    "python",
    "interpreter",
    "one",
    "time",
    "tasks",
    "either",
    "cpu",
    "bound",
    "io",
    "bound",
    "cpu",
    "bound",
    "task",
    "program",
    "task",
    "spends",
    "time",
    "waiting",
    "internal",
    "events",
    "task",
    "cpu",
    "intensive",
    "bound",
    "tasks",
    "spend",
    "time",
    "waiting",
    "external",
    "events",
    "waiting",
    "around",
    "user",
    "input",
    "web",
    "scraping",
    "bound",
    "tasks",
    "better",
    "use",
    "cpu",
    "bound",
    "tasks",
    "better",
    "use",
    "well",
    "everybody",
    "quick",
    "overview",
    "post",
    "code",
    "comment",
    "section",
    "well",
    "yeah",
    "achieve",
    "using",
    "python",
    "hey",
    "going",
    "everybody",
    "bro",
    "hope",
    "well",
    "video",
    "going",
    "explain",
    "demon",
    "threads",
    "python",
    "sit",
    "back",
    "relax",
    "enjoy",
    "show",
    "okay",
    "demon",
    "threads",
    "also",
    "pronounced",
    "daemon",
    "threads",
    "demon",
    "thread",
    "thread",
    "runs",
    "background",
    "normally",
    "important",
    "program",
    "order",
    "run",
    "program",
    "wait",
    "demon",
    "threads",
    "complete",
    "exiting",
    "whereas",
    "threads",
    "normally",
    "killed",
    "stay",
    "alive",
    "task",
    "complete",
    "common",
    "uses",
    "demon",
    "threads",
    "would",
    "background",
    "tasks",
    "garbage",
    "collection",
    "waiting",
    "input",
    "processes",
    "example",
    "demon",
    "threads",
    "would",
    "useful",
    "let",
    "say",
    "two",
    "threads",
    "main",
    "thread",
    "charge",
    "waiting",
    "around",
    "user",
    "input",
    "ask",
    "wish",
    "exit",
    "background",
    "timer",
    "going",
    "display",
    "long",
    "somebody",
    "logged",
    "let",
    "create",
    "function",
    "named",
    "timer",
    "display",
    "long",
    "somebody",
    "logged",
    "let",
    "say",
    "count",
    "variable",
    "true",
    "use",
    "sleep",
    "function",
    "time",
    "module",
    "sleep",
    "approximately",
    "one",
    "second",
    "increment",
    "count",
    "variable",
    "one",
    "print",
    "message",
    "let",
    "say",
    "logged",
    "count",
    "seconds",
    "let",
    "create",
    "thread",
    "charge",
    "timer",
    "run",
    "background",
    "let",
    "say",
    "x",
    "equals",
    "threading",
    "dot",
    "thread",
    "target",
    "function",
    "timer",
    "need",
    "start",
    "thread",
    "x",
    "dot",
    "start",
    "thread",
    "x",
    "charge",
    "timer",
    "run",
    "concurrently",
    "waiting",
    "user",
    "input",
    "main",
    "thread",
    "charge",
    "waiting",
    "user",
    "input",
    "wish",
    "exit",
    "issue",
    "us",
    "using",
    "thread",
    "background",
    "task",
    "countdown",
    "timer",
    "main",
    "thread",
    "charge",
    "waiting",
    "around",
    "user",
    "input",
    "thread",
    "x",
    "additional",
    "thread",
    "charge",
    "running",
    "countdown",
    "timer",
    "wish",
    "exit",
    "program",
    "going",
    "type",
    "okay",
    "hit",
    "enter",
    "well",
    "background",
    "timer",
    "still",
    "going",
    "main",
    "thread",
    "complete",
    "would",
    "like",
    "exit",
    "program",
    "program",
    "exit",
    "long",
    "threads",
    "still",
    "alive",
    "normally",
    "close",
    "program",
    "unless",
    "like",
    "brute",
    "force",
    "know",
    "close",
    "exit",
    "program",
    "turn",
    "thread",
    "x",
    "demon",
    "thread",
    "wish",
    "exit",
    "program",
    "threads",
    "alive",
    "change",
    "thread",
    "demon",
    "thread",
    "actually",
    "fairly",
    "easy",
    "create",
    "thread",
    "set",
    "flag",
    "demon",
    "equal",
    "true",
    "threads",
    "finished",
    "tasks",
    "program",
    "complete",
    "exit",
    "demon",
    "tasks",
    "running",
    "background",
    "killed",
    "automatically",
    "let",
    "try",
    "program",
    "wish",
    "exit",
    "program",
    "going",
    "continue",
    "running",
    "demon",
    "thread",
    "charge",
    "timer",
    "going",
    "continue",
    "running",
    "threads",
    "completed",
    "tasks",
    "type",
    "ok",
    "program",
    "finish",
    "running",
    "countdown",
    "timer",
    "stop",
    "demons",
    "killed",
    "program",
    "finished",
    "running",
    "also",
    "two",
    "additional",
    "methods",
    "might",
    "interested",
    "use",
    "set",
    "daemon",
    "method",
    "thread",
    "set",
    "false",
    "true",
    "would",
    "like",
    "change",
    "thread",
    "demon",
    "however",
    "thread",
    "currently",
    "running",
    "well",
    "actually",
    "change",
    "thread",
    "demon",
    "thread",
    "currently",
    "running",
    "would",
    "actually",
    "use",
    "start",
    "function",
    "also",
    "check",
    "see",
    "thread",
    "demon",
    "using",
    "demon",
    "method",
    "return",
    "true",
    "false",
    "everybody",
    "conclusion",
    "demon",
    "thread",
    "thread",
    "runs",
    "background",
    "important",
    "program",
    "order",
    "continue",
    "running",
    "program",
    "wait",
    "demon",
    "threads",
    "complete",
    "exiting",
    "program",
    "whereas",
    "threads",
    "normally",
    "killed",
    "stay",
    "alive",
    "task",
    "complete",
    "demon",
    "threads",
    "commonly",
    "used",
    "background",
    "tasks",
    "garbage",
    "collection",
    "waiting",
    "around",
    "input",
    "long",
    "running",
    "processes",
    "would",
    "like",
    "copy",
    "code",
    "post",
    "comment",
    "section",
    "yeah",
    "demon",
    "threads",
    "python",
    "yo",
    "going",
    "everybody",
    "bro",
    "hope",
    "well",
    "video",
    "going",
    "explain",
    "python",
    "sit",
    "back",
    "relax",
    "enjoy",
    "show",
    "let",
    "talk",
    "act",
    "running",
    "tasks",
    "parallel",
    "different",
    "cpu",
    "cores",
    "different",
    "although",
    "sounds",
    "similar",
    "limited",
    "running",
    "one",
    "thread",
    "time",
    "gil",
    "lock",
    "used",
    "threading",
    "run",
    "threads",
    "concurrently",
    "parallel",
    "however",
    "create",
    "processes",
    "run",
    "process",
    "parallel",
    "different",
    "cpu",
    "course",
    "better",
    "tasks",
    "cpu",
    "bound",
    "need",
    "heavy",
    "cpu",
    "usage",
    "whereas",
    "better",
    "bound",
    "tasks",
    "lot",
    "waiting",
    "around",
    "begin",
    "recommend",
    "two",
    "imports",
    "time",
    "let",
    "begin",
    "quick",
    "note",
    "running",
    "windows",
    "operating",
    "system",
    "probably",
    "need",
    "add",
    "line",
    "name",
    "equal",
    "main",
    "run",
    "program",
    "main",
    "process",
    "running",
    "create",
    "child",
    "process",
    "process",
    "going",
    "copy",
    "module",
    "currently",
    "working",
    "child",
    "process",
    "create",
    "children",
    "processes",
    "going",
    "problem",
    "going",
    "add",
    "line",
    "name",
    "equal",
    "main",
    "create",
    "child",
    "process",
    "copy",
    "module",
    "going",
    "execute",
    "let",
    "create",
    "main",
    "function",
    "majority",
    "code",
    "going",
    "within",
    "main",
    "function",
    "running",
    "different",
    "operating",
    "system",
    "probably",
    "running",
    "windows",
    "probably",
    "better",
    "tasks",
    "functions",
    "cpu",
    "bound",
    "require",
    "heavy",
    "cpu",
    "usage",
    "let",
    "say",
    "function",
    "named",
    "counter",
    "pass",
    "number",
    "count",
    "number",
    "going",
    "pass",
    "ridiculously",
    "large",
    "number",
    "like",
    "billion",
    "let",
    "create",
    "function",
    "count",
    "zero",
    "count",
    "equals",
    "zero",
    "count",
    "less",
    "number",
    "pass",
    "increment",
    "counter",
    "one",
    "function",
    "call",
    "processes",
    "create",
    "within",
    "main",
    "function",
    "create",
    "process",
    "need",
    "module",
    "import",
    "process",
    "cpu",
    "account",
    "save",
    "little",
    "bit",
    "later",
    "create",
    "process",
    "let",
    "say",
    "process",
    "equals",
    "process",
    "step",
    "similar",
    "creating",
    "thread",
    "target",
    "target",
    "function",
    "counter",
    "arguments",
    "pass",
    "remember",
    "arguments",
    "pass",
    "tuple",
    "since",
    "one",
    "argument",
    "pass",
    "differentiate",
    "expression",
    "add",
    "comma",
    "end",
    "number",
    "let",
    "say",
    "1",
    "billion",
    "million",
    "10",
    "million",
    "100",
    "million",
    "1",
    "billion",
    "let",
    "verify",
    "okay",
    "1",
    "billion",
    "going",
    "count",
    "zero",
    "billion",
    "order",
    "start",
    "process",
    "process",
    "use",
    "start",
    "function",
    "use",
    "process",
    "synchronization",
    "using",
    "join",
    "function",
    "main",
    "process",
    "going",
    "wait",
    "around",
    "child",
    "process",
    "finish",
    "continuing",
    "let",
    "print",
    "performance",
    "counter",
    "print",
    "finished",
    "let",
    "say",
    "time",
    "dot",
    "performance",
    "counter",
    "seconds",
    "okay",
    "let",
    "see",
    "long",
    "take",
    "count",
    "zero",
    "billion",
    "using",
    "one",
    "process",
    "fast",
    "forwarded",
    "video",
    "took",
    "program",
    "seconds",
    "count",
    "zero",
    "billion",
    "speed",
    "using",
    "let",
    "create",
    "second",
    "process",
    "named",
    "b",
    "going",
    "divide",
    "amount",
    "work",
    "half",
    "process",
    "count",
    "500",
    "million",
    "half",
    "billion",
    "let",
    "change",
    "b",
    "gon",
    "na",
    "group",
    "start",
    "functions",
    "together",
    "easier",
    "read",
    "b",
    "dot",
    "join",
    "synchronize",
    "everything",
    "okay",
    "let",
    "change",
    "1",
    "billion",
    "500",
    "million",
    "amount",
    "work",
    "divided",
    "among",
    "workers",
    "500",
    "million",
    "let",
    "see",
    "well",
    "runs",
    "time",
    "took",
    "program",
    "seconds",
    "finish",
    "counting",
    "zero",
    "billion",
    "divided",
    "task",
    "among",
    "different",
    "processes",
    "two",
    "processes",
    "counted",
    "zero",
    "500",
    "million",
    "time",
    "time",
    "let",
    "create",
    "four",
    "processes",
    "b",
    "c",
    "need",
    "start",
    "going",
    "join",
    "might",
    "actually",
    "speed",
    "explain",
    "later",
    "depends",
    "amount",
    "cpu",
    "cores",
    "okay",
    "oh",
    "let",
    "change",
    "250",
    "million",
    "okay",
    "see",
    "couple",
    "seconds",
    "okay",
    "welcome",
    "back",
    "computer",
    "ran",
    "four",
    "processes",
    "counting",
    "250",
    "million",
    "could",
    "finish",
    "program",
    "seconds",
    "created",
    "processes",
    "would",
    "probably",
    "take",
    "longer",
    "print",
    "cpu",
    "count",
    "computer",
    "using",
    "function",
    "cpu",
    "count",
    "print",
    "whatever",
    "function",
    "returns",
    "get",
    "count",
    "number",
    "additional",
    "processes",
    "run",
    "time",
    "going",
    "comment",
    "start",
    "function",
    "want",
    "print",
    "whatever",
    "value",
    "cpu",
    "count",
    "computer",
    "four",
    "run",
    "four",
    "additional",
    "processes",
    "let",
    "attempt",
    "run",
    "eight",
    "processes",
    "going",
    "copy",
    "let",
    "say",
    "e",
    "f",
    "g",
    "h",
    "start",
    "two",
    "give",
    "second",
    "start",
    "b",
    "c",
    "e",
    "f",
    "g",
    "h",
    "going",
    "join",
    "e",
    "f",
    "g",
    "h",
    "okay",
    "let",
    "run",
    "oh",
    "change",
    "arguments",
    "keep",
    "forgetting",
    "let",
    "say",
    "125",
    "125",
    "million",
    "times",
    "eight",
    "one",
    "billion",
    "okay",
    "see",
    "bit",
    "right",
    "welcome",
    "back",
    "time",
    "eight",
    "processes",
    "working",
    "actually",
    "took",
    "longer",
    "four",
    "processes",
    "working",
    "four",
    "processes",
    "working",
    "took",
    "27",
    "seconds",
    "time",
    "took",
    "30",
    "seconds",
    "eight",
    "processes",
    "working",
    "processes",
    "cpu",
    "count",
    "partially",
    "whenever",
    "create",
    "process",
    "significant",
    "overhead",
    "beginning",
    "destroying",
    "process",
    "run",
    "four",
    "processes",
    "computer",
    "one",
    "time",
    "well",
    "creating",
    "additional",
    "processes",
    "extra",
    "benefit",
    "actually",
    "hindering",
    "performance",
    "computer",
    "creating",
    "additional",
    "processes",
    "really",
    "help",
    "conclusion",
    "concept",
    "running",
    "tasks",
    "parallel",
    "different",
    "cpu",
    "cores",
    "similar",
    "different",
    "run",
    "tasks",
    "concurrently",
    "taking",
    "turns",
    "gil",
    "run",
    "different",
    "tasks",
    "together",
    "parallel",
    "better",
    "cpu",
    "bound",
    "tasks",
    "task",
    "heavy",
    "cpu",
    "usage",
    "better",
    "bound",
    "tasks",
    "tasks",
    "involve",
    "lot",
    "waiting",
    "around",
    "would",
    "like",
    "copy",
    "code",
    "post",
    "comment",
    "section",
    "yeah",
    "works",
    "python",
    "hey",
    "going",
    "everybody",
    "two",
    "bro",
    "hope",
    "well",
    "video",
    "going",
    "creating",
    "first",
    "graphical",
    "user",
    "interface",
    "python",
    "sit",
    "back",
    "relax",
    "enjoy",
    "show",
    "welcome",
    "one",
    "today",
    "creating",
    "first",
    "graphical",
    "user",
    "interface",
    "python",
    "also",
    "known",
    "gui",
    "short",
    "going",
    "using",
    "tk",
    "inter",
    "gui",
    "module",
    "included",
    "python",
    "first",
    "step",
    "order",
    "use",
    "tk",
    "enter",
    "import",
    "module",
    "begin",
    "using",
    "first",
    "line",
    "code",
    "tk",
    "enter",
    "import",
    "asterisk",
    "import",
    "everything",
    "related",
    "tk",
    "inter",
    "module",
    "import",
    "use",
    "gui",
    "features",
    "module",
    "offer",
    "one",
    "important",
    "distinction",
    "need",
    "make",
    "need",
    "discuss",
    "differences",
    "windows",
    "widgets",
    "quick",
    "definitions",
    "definitely",
    "copy",
    "internet",
    "widgets",
    "gui",
    "elements",
    "buttons",
    "text",
    "boxes",
    "labels",
    "images",
    "name",
    "windows",
    "serve",
    "container",
    "hold",
    "contain",
    "widgets",
    "topic",
    "creating",
    "customizing",
    "window",
    "future",
    "topics",
    "exploring",
    "different",
    "widgets",
    "available",
    "us",
    "let",
    "begin",
    "creating",
    "simple",
    "window",
    "give",
    "window",
    "unique",
    "name",
    "window",
    "pretty",
    "creative",
    "order",
    "instantiate",
    "window",
    "going",
    "follow",
    "window",
    "name",
    "equals",
    "tk",
    "make",
    "sure",
    "get",
    "capitalization",
    "right",
    "uppercase",
    "set",
    "parentheses",
    "serve",
    "constructor",
    "going",
    "add",
    "comment",
    "instantiate",
    "instance",
    "window",
    "us",
    "compile",
    "run",
    "nothing",
    "appears",
    "happen",
    "instantiated",
    "window",
    "actually",
    "displaying",
    "order",
    "display",
    "window",
    "going",
    "follow",
    "name",
    "window",
    "dot",
    "main",
    "loop",
    "display",
    "window",
    "first",
    "graphical",
    "user",
    "interface",
    "adding",
    "widgets",
    "window",
    "going",
    "add",
    "comment",
    "place",
    "window",
    "computer",
    "screen",
    "also",
    "listen",
    "events",
    "get",
    "future",
    "videos",
    "customizing",
    "appearance",
    "window",
    "let",
    "begin",
    "changing",
    "size",
    "geometry",
    "function",
    "going",
    "first",
    "begin",
    "typing",
    "name",
    "window",
    "window",
    "follow",
    "using",
    "geometry",
    "function",
    "pass",
    "width",
    "height",
    "make",
    "sure",
    "within",
    "quotes",
    "set",
    "whatever",
    "width",
    "height",
    "want",
    "want",
    "420",
    "420",
    "would",
    "420",
    "x",
    "420",
    "size",
    "window",
    "size",
    "set",
    "geometry",
    "function",
    "take",
    "look",
    "top",
    "left",
    "window",
    "feather",
    "icon",
    "well",
    "title",
    "tk",
    "kind",
    "lame",
    "let",
    "change",
    "let",
    "first",
    "change",
    "window",
    "title",
    "function",
    "type",
    "name",
    "window",
    "window",
    "dot",
    "title",
    "function",
    "pass",
    "new",
    "title",
    "want",
    "set",
    "set",
    "title",
    "maybe",
    "bro",
    "code",
    "first",
    "gui",
    "program",
    "work",
    "changed",
    "title",
    "window",
    "says",
    "bro",
    "code",
    "first",
    "gui",
    "program",
    "next",
    "thing",
    "although",
    "necessary",
    "change",
    "icon",
    "window",
    "bar",
    "top",
    "would",
    "like",
    "replace",
    "feather",
    "icon",
    "image",
    "choosing",
    "desktop",
    "mind",
    "clutter",
    "would",
    "like",
    "use",
    "image",
    "logo",
    "channel",
    "set",
    "icon",
    "window",
    "going",
    "copy",
    "go",
    "project",
    "folder",
    "paste",
    "click",
    "ok",
    "image",
    "within",
    "project",
    "folder",
    "format",
    "use",
    "currently",
    "need",
    "convert",
    "called",
    "photo",
    "image",
    "format",
    "tk",
    "enter",
    "use",
    "need",
    "convert",
    "image",
    "photo",
    "image",
    "anywhere",
    "within",
    "window",
    "window",
    "equals",
    "tk",
    "loop",
    "right",
    "good",
    "suppose",
    "going",
    "create",
    "photo",
    "image",
    "image",
    "png",
    "file",
    "might",
    "something",
    "different",
    "let",
    "give",
    "photo",
    "image",
    "unique",
    "name",
    "like",
    "maybe",
    "icon",
    "order",
    "create",
    "photo",
    "image",
    "follow",
    "equals",
    "photo",
    "image",
    "within",
    "constructor",
    "photo",
    "image",
    "option",
    "file",
    "either",
    "list",
    "file",
    "name",
    "file",
    "path",
    "somewhere",
    "else",
    "computer",
    "since",
    "image",
    "within",
    "project",
    "folder",
    "list",
    "file",
    "name",
    "called",
    "probably",
    "going",
    "named",
    "something",
    "else",
    "though",
    "photo",
    "image",
    "called",
    "icon",
    "use",
    "need",
    "set",
    "icon",
    "window",
    "icon",
    "luckily",
    "function",
    "take",
    "care",
    "us",
    "type",
    "name",
    "window",
    "window",
    "dot",
    "going",
    "use",
    "icon",
    "photo",
    "function",
    "two",
    "arguments",
    "first",
    "going",
    "set",
    "true",
    "second",
    "photo",
    "image",
    "want",
    "use",
    "photo",
    "image",
    "called",
    "icon",
    "going",
    "pass",
    "photo",
    "image",
    "argument",
    "function",
    "icon",
    "photo",
    "compile",
    "run",
    "image",
    "wanted",
    "use",
    "set",
    "top",
    "left",
    "icon",
    "window",
    "bar",
    "however",
    "loses",
    "lot",
    "quality",
    "since",
    "dimensions",
    "small",
    "still",
    "tell",
    "logo",
    "though",
    "replace",
    "icon",
    "window",
    "bar",
    "top",
    "left",
    "corner",
    "let",
    "change",
    "background",
    "color",
    "window",
    "one",
    "way",
    "use",
    "config",
    "function",
    "use",
    "config",
    "function",
    "anytime",
    "want",
    "make",
    "changes",
    "window",
    "let",
    "change",
    "background",
    "color",
    "option",
    "called",
    "background",
    "set",
    "equal",
    "either",
    "color",
    "name",
    "hexadecimal",
    "value",
    "let",
    "begin",
    "color",
    "names",
    "let",
    "say",
    "want",
    "background",
    "color",
    "black",
    "type",
    "word",
    "black",
    "change",
    "background",
    "color",
    "window",
    "black",
    "alternatively",
    "set",
    "hex",
    "value",
    "color",
    "look",
    "google",
    "hex",
    "color",
    "picker",
    "select",
    "whatever",
    "color",
    "want",
    "let",
    "say",
    "want",
    "sky",
    "blue",
    "color",
    "like",
    "well",
    "hex",
    "value",
    "going",
    "copy",
    "value",
    "paste",
    "within",
    "option",
    "background",
    "make",
    "sure",
    "hashtag",
    "well",
    "represents",
    "hex",
    "value",
    "background",
    "color",
    "sky",
    "blue",
    "color",
    "picked",
    "well",
    "everybody",
    "basics",
    "creating",
    "window",
    "python",
    "future",
    "videos",
    "going",
    "exploring",
    "different",
    "widgets",
    "add",
    "window",
    "functionality",
    "would",
    "like",
    "copy",
    "code",
    "post",
    "comments",
    "yeah",
    "create",
    "first",
    "gui",
    "python",
    "hey",
    "going",
    "everybody",
    "bro",
    "hope",
    "well",
    "video",
    "going",
    "teach",
    "guys",
    "create",
    "labels",
    "python",
    "sit",
    "back",
    "relax",
    "enjoy",
    "show",
    "label",
    "well",
    "glad",
    "asked",
    "question",
    "area",
    "widget",
    "holds",
    "text",
    "image",
    "within",
    "window",
    "begin",
    "need",
    "create",
    "window",
    "act",
    "container",
    "hold",
    "label",
    "create",
    "window",
    "window",
    "equals",
    "tk",
    "followed",
    "give",
    "us",
    "window",
    "add",
    "label",
    "let",
    "give",
    "label",
    "unique",
    "name",
    "label",
    "order",
    "instantiate",
    "label",
    "follow",
    "label",
    "name",
    "equals",
    "label",
    "capital",
    "l",
    "set",
    "parentheses",
    "parentheses",
    "acting",
    "constructor",
    "widget",
    "label",
    "pass",
    "arguments",
    "parentheses",
    "first",
    "argument",
    "going",
    "pass",
    "master",
    "container",
    "label",
    "going",
    "pass",
    "name",
    "window",
    "window",
    "acting",
    "container",
    "widgets",
    "python",
    "arguments",
    "passing",
    "comma",
    "options",
    "available",
    "us",
    "options",
    "keyword",
    "arguments",
    "pass",
    "constructor",
    "widget",
    "one",
    "option",
    "available",
    "us",
    "text",
    "set",
    "text",
    "label",
    "equal",
    "string",
    "set",
    "let",
    "say",
    "want",
    "label",
    "say",
    "hello",
    "world",
    "well",
    "going",
    "pass",
    "option",
    "text",
    "keyword",
    "argument",
    "going",
    "set",
    "text",
    "label",
    "label",
    "currently",
    "appear",
    "within",
    "window",
    "gives",
    "bro",
    "thought",
    "knew",
    "code",
    "hold",
    "wait",
    "minute",
    "one",
    "thing",
    "need",
    "going",
    "actually",
    "add",
    "label",
    "window",
    "set",
    "master",
    "label",
    "window",
    "actually",
    "add",
    "step",
    "two",
    "one",
    "way",
    "use",
    "pack",
    "function",
    "label",
    "follow",
    "label",
    "equals",
    "label",
    "pass",
    "arguments",
    "follow",
    "name",
    "label",
    "dot",
    "pack",
    "pack",
    "option",
    "default",
    "place",
    "widget",
    "top",
    "center",
    "window",
    "another",
    "way",
    "add",
    "label",
    "container",
    "window",
    "use",
    "place",
    "function",
    "set",
    "coordinates",
    "want",
    "label",
    "widget",
    "appear",
    "within",
    "window",
    "want",
    "appear",
    "top",
    "left",
    "corner",
    "set",
    "x",
    "equal",
    "zero",
    "equals",
    "zero",
    "options",
    "available",
    "us",
    "pass",
    "place",
    "function",
    "place",
    "label",
    "position",
    "set",
    "coordinates",
    "within",
    "window",
    "x",
    "equals",
    "0",
    "equals",
    "0",
    "place",
    "widget",
    "top",
    "left",
    "corner",
    "window",
    "change",
    "let",
    "say",
    "x",
    "equals",
    "100",
    "equals",
    "100",
    "well",
    "going",
    "placed",
    "100",
    "pixels",
    "right",
    "100",
    "pixels",
    "use",
    "pack",
    "place",
    "others",
    "like",
    "grid",
    "little",
    "complex",
    "get",
    "future",
    "video",
    "time",
    "going",
    "use",
    "pack",
    "function",
    "label",
    "turn",
    "place",
    "function",
    "comment",
    "dot",
    "pack",
    "right",
    "customize",
    "label",
    "pass",
    "different",
    "options",
    "instantiate",
    "label",
    "let",
    "change",
    "font",
    "another",
    "option",
    "change",
    "font",
    "font",
    "equals",
    "pass",
    "font",
    "let",
    "begin",
    "font",
    "family",
    "say",
    "maybe",
    "ariel",
    "size",
    "perhaps",
    "40",
    "style",
    "choose",
    "like",
    "bold",
    "also",
    "italic",
    "underline",
    "uh",
    "work",
    "fine",
    "change",
    "font",
    "text",
    "label",
    "says",
    "hello",
    "world",
    "still",
    "let",
    "change",
    "foreground",
    "color",
    "another",
    "option",
    "foreground",
    "font",
    "color",
    "option",
    "fg",
    "foreground",
    "short",
    "foreground",
    "foreground",
    "equals",
    "state",
    "color",
    "name",
    "green",
    "text",
    "green",
    "select",
    "something",
    "specific",
    "passing",
    "hex",
    "value",
    "custom",
    "color",
    "like",
    "hashtag",
    "zero",
    "zero",
    "ff00",
    "bright",
    "green",
    "always",
    "look",
    "different",
    "hex",
    "values",
    "also",
    "change",
    "background",
    "color",
    "bg",
    "short",
    "background",
    "color",
    "pass",
    "color",
    "name",
    "hex",
    "value",
    "going",
    "set",
    "black",
    "demonstrate",
    "pass",
    "either",
    "hex",
    "values",
    "color",
    "names",
    "green",
    "text",
    "black",
    "background",
    "limits",
    "label",
    "within",
    "window",
    "expand",
    "window",
    "label",
    "still",
    "going",
    "stay",
    "size",
    "change",
    "text",
    "within",
    "label",
    "label",
    "going",
    "take",
    "room",
    "needs",
    "see",
    "label",
    "smaller",
    "arguments",
    "within",
    "constructor",
    "getting",
    "little",
    "bit",
    "difficult",
    "actually",
    "read",
    "going",
    "separate",
    "arguments",
    "line",
    "line",
    "organized",
    "work",
    "add",
    "border",
    "around",
    "label",
    "one",
    "set",
    "border",
    "style",
    "relief",
    "option",
    "one",
    "border",
    "like",
    "raised",
    "right",
    "border",
    "width",
    "one",
    "little",
    "difficult",
    "us",
    "actually",
    "see",
    "border",
    "let",
    "increase",
    "border",
    "width",
    "option",
    "bd",
    "set",
    "equal",
    "maybe",
    "border",
    "visible",
    "another",
    "relief",
    "border",
    "style",
    "sunken",
    "give",
    "label",
    "sunken",
    "appearance",
    "think",
    "change",
    "back",
    "raised",
    "also",
    "add",
    "padding",
    "around",
    "text",
    "text",
    "border",
    "pad",
    "x",
    "pad",
    "pad",
    "x",
    "add",
    "padding",
    "space",
    "text",
    "border",
    "let",
    "set",
    "maybe",
    "20",
    "20",
    "pixels",
    "worth",
    "space",
    "text",
    "border",
    "let",
    "also",
    "pad",
    "add",
    "space",
    "text",
    "text",
    "border",
    "add",
    "image",
    "label",
    "first",
    "need",
    "create",
    "called",
    "photo",
    "image",
    "create",
    "within",
    "lines",
    "window",
    "equals",
    "tk",
    "loop",
    "let",
    "give",
    "photo",
    "image",
    "unique",
    "name",
    "like",
    "photo",
    "order",
    "create",
    "photo",
    "image",
    "going",
    "follow",
    "photo",
    "equals",
    "photo",
    "image",
    "within",
    "constructor",
    "photo",
    "image",
    "option",
    "called",
    "file",
    "list",
    "file",
    "path",
    "file",
    "name",
    "right",
    "desktop",
    "image",
    "want",
    "use",
    "need",
    "convert",
    "photo",
    "image",
    "desktop",
    "image",
    "want",
    "use",
    "add",
    "label",
    "need",
    "get",
    "file",
    "path",
    "get",
    "going",
    "properties",
    "underneath",
    "location",
    "copy",
    "location",
    "address",
    "paste",
    "within",
    "quotes",
    "file",
    "need",
    "add",
    "image",
    "name",
    "backslashes",
    "need",
    "double",
    "backslashes",
    "escape",
    "character",
    "backslash",
    "would",
    "better",
    "option",
    "add",
    "image",
    "project",
    "folder",
    "contains",
    "python",
    "file",
    "working",
    "place",
    "listing",
    "entire",
    "file",
    "path",
    "going",
    "copy",
    "image",
    "want",
    "use",
    "go",
    "project",
    "folder",
    "paste",
    "longer",
    "need",
    "entire",
    "file",
    "path",
    "list",
    "image",
    "name",
    "need",
    "add",
    "photo",
    "label",
    "option",
    "image",
    "option",
    "place",
    "within",
    "constructor",
    "label",
    "going",
    "set",
    "image",
    "equal",
    "photo",
    "image",
    "photo",
    "image",
    "called",
    "photo",
    "add",
    "photo",
    "image",
    "label",
    "widget",
    "depending",
    "working",
    "image",
    "replaced",
    "text",
    "label",
    "add",
    "text",
    "image",
    "window",
    "well",
    "follow",
    "compound",
    "option",
    "set",
    "direction",
    "want",
    "image",
    "placed",
    "relative",
    "text",
    "going",
    "set",
    "compound",
    "equal",
    "bottom",
    "image",
    "appears",
    "bottom",
    "underneath",
    "text",
    "text",
    "image",
    "want",
    "different",
    "location",
    "could",
    "set",
    "maybe",
    "top",
    "left",
    "right",
    "set",
    "top",
    "image",
    "top",
    "text",
    "one",
    "thing",
    "know",
    "labels",
    "many",
    "widgets",
    "python",
    "size",
    "widget",
    "actually",
    "increase",
    "accommodate",
    "size",
    "components",
    "contained",
    "within",
    "give",
    "text",
    "longer",
    "string",
    "characters",
    "bro",
    "even",
    "code",
    "width",
    "label",
    "actually",
    "going",
    "expand",
    "accommodate",
    "size",
    "longer",
    "string",
    "text",
    "basics",
    "labels",
    "everyone",
    "would",
    "like",
    "copy",
    "code",
    "post",
    "comments",
    "yeah",
    "basics",
    "labels",
    "python",
    "hey",
    "going",
    "everybody",
    "bro",
    "hope",
    "well",
    "video",
    "going",
    "teach",
    "guys",
    "create",
    "buttons",
    "python",
    "sit",
    "back",
    "relax",
    "enjoy",
    "show",
    "buttons",
    "click",
    "stuff",
    "pretty",
    "much",
    "create",
    "button",
    "python",
    "need",
    "window",
    "window",
    "equals",
    "tk",
    "followed",
    "loop",
    "let",
    "call",
    "button",
    "button",
    "order",
    "create",
    "follow",
    "equals",
    "button",
    "within",
    "constructor",
    "button",
    "going",
    "list",
    "want",
    "add",
    "button",
    "master",
    "master",
    "window",
    "order",
    "display",
    "button",
    "going",
    "follow",
    "button",
    "dot",
    "pack",
    "small",
    "rectangular",
    "button",
    "within",
    "window",
    "display",
    "text",
    "anything",
    "let",
    "add",
    "text",
    "option",
    "within",
    "constructor",
    "going",
    "list",
    "option",
    "text",
    "set",
    "whatever",
    "text",
    "want",
    "display",
    "let",
    "say",
    "click",
    "run",
    "button",
    "says",
    "text",
    "set",
    "says",
    "click",
    "however",
    "currently",
    "anything",
    "though",
    "need",
    "set",
    "command",
    "another",
    "option",
    "command",
    "equals",
    "list",
    "function",
    "name",
    "known",
    "callback",
    "let",
    "create",
    "function",
    "called",
    "click",
    "outside",
    "window",
    "let",
    "define",
    "click",
    "function",
    "def",
    "click",
    "let",
    "print",
    "message",
    "clicked",
    "button",
    "command",
    "going",
    "list",
    "function",
    "name",
    "without",
    "parentheses",
    "make",
    "sure",
    "writing",
    "known",
    "callback",
    "click",
    "button",
    "going",
    "perform",
    "callback",
    "perform",
    "whatever",
    "within",
    "function",
    "click",
    "like",
    "let",
    "customize",
    "appearance",
    "button",
    "going",
    "change",
    "font",
    "another",
    "option",
    "font",
    "equals",
    "let",
    "pick",
    "professional",
    "font",
    "comic",
    "sans",
    "professional",
    "set",
    "size",
    "actually",
    "read",
    "button",
    "large",
    "enough",
    "let",
    "set",
    "foreground",
    "color",
    "font",
    "color",
    "fg",
    "place",
    "color",
    "name",
    "hex",
    "value",
    "pick",
    "green",
    "0",
    "0",
    "ff00",
    "text",
    "green",
    "let",
    "also",
    "change",
    "background",
    "color",
    "bg",
    "pick",
    "color",
    "name",
    "black",
    "green",
    "text",
    "black",
    "background",
    "notice",
    "click",
    "button",
    "hold",
    "mouse",
    "button",
    "color",
    "scheme",
    "changed",
    "different",
    "active",
    "foreground",
    "active",
    "background",
    "change",
    "wo",
    "flash",
    "every",
    "time",
    "click",
    "button",
    "let",
    "change",
    "active",
    "foreground",
    "active",
    "background",
    "options",
    "active",
    "foreground",
    "set",
    "color",
    "foreground",
    "green",
    "text",
    "color",
    "going",
    "stay",
    "also",
    "change",
    "active",
    "background",
    "also",
    "set",
    "black",
    "match",
    "background",
    "longer",
    "flash",
    "click",
    "button",
    "need",
    "disable",
    "somebody",
    "clicking",
    "button",
    "option",
    "option",
    "state",
    "option",
    "normally",
    "active",
    "set",
    "disabled",
    "longer",
    "click",
    "button",
    "see",
    "color",
    "scheme",
    "changed",
    "grayed",
    "whatnot",
    "going",
    "replace",
    "back",
    "active",
    "still",
    "things",
    "add",
    "image",
    "button",
    "image",
    "option",
    "set",
    "equal",
    "photo",
    "image",
    "first",
    "need",
    "create",
    "photo",
    "image",
    "photo",
    "like",
    "button",
    "thumbs",
    "want",
    "use",
    "need",
    "create",
    "photo",
    "image",
    "image",
    "file",
    "within",
    "window",
    "let",
    "call",
    "photo",
    "image",
    "photo",
    "photo",
    "equals",
    "photo",
    "image",
    "going",
    "list",
    "file",
    "path",
    "file",
    "name",
    "since",
    "image",
    "within",
    "project",
    "folder",
    "list",
    "file",
    "name",
    "called",
    "use",
    "image",
    "probably",
    "going",
    "named",
    "something",
    "else",
    "need",
    "set",
    "image",
    "equal",
    "photo",
    "image",
    "named",
    "photo",
    "photo",
    "replaces",
    "text",
    "button",
    "still",
    "works",
    "would",
    "like",
    "display",
    "text",
    "well",
    "image",
    "need",
    "use",
    "compound",
    "option",
    "list",
    "direction",
    "list",
    "top",
    "bottom",
    "left",
    "right",
    "want",
    "image",
    "perhaps",
    "bottom",
    "let",
    "list",
    "bottom",
    "run",
    "text",
    "well",
    "image",
    "changed",
    "compound",
    "different",
    "direction",
    "like",
    "top",
    "image",
    "going",
    "displayed",
    "top",
    "relative",
    "text",
    "wanted",
    "count",
    "amount",
    "times",
    "clicked",
    "button",
    "could",
    "create",
    "variable",
    "called",
    "count",
    "set",
    "equal",
    "zero",
    "order",
    "us",
    "access",
    "count",
    "variable",
    "within",
    "function",
    "click",
    "going",
    "list",
    "count",
    "global",
    "global",
    "variable",
    "every",
    "time",
    "click",
    "button",
    "let",
    "increment",
    "variable",
    "count",
    "one",
    "saying",
    "count",
    "plus",
    "equals",
    "one",
    "print",
    "whatever",
    "value",
    "count",
    "within",
    "print",
    "statement",
    "say",
    "count",
    "click",
    "button",
    "access",
    "count",
    "variable",
    "outside",
    "function",
    "every",
    "time",
    "click",
    "button",
    "going",
    "increase",
    "count",
    "variable",
    "one",
    "well",
    "everybody",
    "basics",
    "creating",
    "buttons",
    "python",
    "want",
    "copy",
    "code",
    "post",
    "comments",
    "yeah",
    "basics",
    "buttons",
    "python",
    "hey",
    "going",
    "everybody",
    "bro",
    "hope",
    "well",
    "video",
    "going",
    "teach",
    "guys",
    "create",
    "simple",
    "entry",
    "box",
    "python",
    "sit",
    "back",
    "relax",
    "enjoy",
    "show",
    "find",
    "video",
    "helpful",
    "please",
    "remember",
    "like",
    "comment",
    "subscribe",
    "support",
    "help",
    "keep",
    "channel",
    "running",
    "alright",
    "fellow",
    "bros",
    "video",
    "going",
    "discussing",
    "entry",
    "widget",
    "text",
    "box",
    "accepts",
    "single",
    "line",
    "user",
    "input",
    "always",
    "need",
    "window",
    "window",
    "equals",
    "tk",
    "followed",
    "loop",
    "let",
    "give",
    "entry",
    "box",
    "unique",
    "name",
    "let",
    "call",
    "entry",
    "short",
    "create",
    "entry",
    "widget",
    "going",
    "follow",
    "equals",
    "entry",
    "within",
    "constructor",
    "state",
    "adding",
    "going",
    "add",
    "window",
    "finish",
    "packing",
    "placing",
    "entry",
    "dot",
    "pack",
    "entry",
    "box",
    "within",
    "window",
    "however",
    "text",
    "somewhat",
    "small",
    "let",
    "change",
    "set",
    "option",
    "within",
    "constructor",
    "entry",
    "box",
    "let",
    "set",
    "font",
    "font",
    "equals",
    "pick",
    "whatever",
    "font",
    "want",
    "going",
    "pick",
    "maybe",
    "ariel",
    "size",
    "little",
    "bit",
    "larger",
    "type",
    "text",
    "like",
    "cool",
    "right",
    "add",
    "submit",
    "button",
    "right",
    "currently",
    "anything",
    "type",
    "text",
    "let",
    "create",
    "button",
    "going",
    "create",
    "button",
    "maybe",
    "entry",
    "box",
    "let",
    "say",
    "submit",
    "button",
    "let",
    "call",
    "submit",
    "button",
    "equals",
    "button",
    "adding",
    "writing",
    "square",
    "window",
    "set",
    "text",
    "text",
    "equals",
    "submit",
    "also",
    "need",
    "command",
    "button",
    "command",
    "equals",
    "create",
    "function",
    "called",
    "submit",
    "want",
    "pack",
    "submit",
    "button",
    "add",
    "window",
    "submit",
    "right",
    "let",
    "put",
    "entry",
    "box",
    "left",
    "hand",
    "side",
    "submit",
    "button",
    "right",
    "hand",
    "side",
    "pack",
    "widgets",
    "set",
    "certain",
    "side",
    "side",
    "equals",
    "left",
    "submit",
    "button",
    "want",
    "right",
    "necessary",
    "think",
    "looks",
    "better",
    "also",
    "need",
    "define",
    "submit",
    "function",
    "outside",
    "window",
    "let",
    "define",
    "def",
    "submit",
    "going",
    "need",
    "get",
    "current",
    "value",
    "within",
    "entry",
    "box",
    "one",
    "way",
    "use",
    "entry",
    "boxes",
    "get",
    "function",
    "return",
    "string",
    "something",
    "string",
    "store",
    "within",
    "variable",
    "let",
    "create",
    "variable",
    "called",
    "maybe",
    "username",
    "let",
    "pretend",
    "user",
    "submit",
    "username",
    "login",
    "something",
    "suppose",
    "get",
    "current",
    "value",
    "entry",
    "box",
    "store",
    "within",
    "variable",
    "call",
    "username",
    "maybe",
    "print",
    "fun",
    "print",
    "hello",
    "plus",
    "user",
    "name",
    "let",
    "try",
    "entry",
    "box",
    "submit",
    "button",
    "going",
    "make",
    "something",
    "click",
    "submit",
    "displays",
    "message",
    "hello",
    "ergo",
    "gerger",
    "gerger",
    "say",
    "video",
    "going",
    "professional",
    "let",
    "add",
    "buttons",
    "let",
    "say",
    "want",
    "delete",
    "button",
    "well",
    "backspace",
    "button",
    "let",
    "copy",
    "submit",
    "button",
    "create",
    "delete",
    "button",
    "backspace",
    "button",
    "delete",
    "button",
    "little",
    "bit",
    "easier",
    "code",
    "let",
    "rename",
    "submit",
    "button",
    "delete",
    "button",
    "make",
    "sure",
    "change",
    "name",
    "pack",
    "text",
    "say",
    "delete",
    "create",
    "function",
    "called",
    "delete",
    "let",
    "define",
    "delete",
    "submit",
    "function",
    "let",
    "define",
    "delete",
    "function",
    "need",
    "delete",
    "text",
    "within",
    "entry",
    "box",
    "one",
    "way",
    "type",
    "name",
    "entry",
    "box",
    "dot",
    "delete",
    "function",
    "takes",
    "two",
    "positional",
    "arguments",
    "portion",
    "entry",
    "box",
    "want",
    "delete",
    "want",
    "first",
    "character",
    "index",
    "0",
    "followed",
    "last",
    "character",
    "say",
    "end",
    "delete",
    "characters",
    "within",
    "entry",
    "box",
    "let",
    "try",
    "going",
    "type",
    "name",
    "bro",
    "going",
    "delete",
    "text",
    "gone",
    "like",
    "let",
    "create",
    "backspace",
    "button",
    "copy",
    "delete",
    "button",
    "change",
    "word",
    "delete",
    "backspace",
    "make",
    "sure",
    "change",
    "pack",
    "well",
    "text",
    "set",
    "backspace",
    "create",
    "function",
    "called",
    "backspace",
    "let",
    "define",
    "backspace",
    "delete",
    "function",
    "let",
    "define",
    "back",
    "space",
    "going",
    "something",
    "similar",
    "delete",
    "function",
    "except",
    "going",
    "change",
    "first",
    "positional",
    "argument",
    "need",
    "place",
    "second",
    "last",
    "character",
    "within",
    "positional",
    "argument",
    "one",
    "way",
    "first",
    "get",
    "entire",
    "length",
    "characters",
    "within",
    "entry",
    "box",
    "let",
    "begin",
    "typing",
    "entry",
    "dot",
    "get",
    "need",
    "determine",
    "length",
    "surround",
    "placing",
    "within",
    "length",
    "function",
    "return",
    "current",
    "length",
    "characters",
    "within",
    "entry",
    "box",
    "going",
    "add",
    "first",
    "positional",
    "argument",
    "second",
    "last",
    "character",
    "second",
    "positional",
    "argument",
    "end",
    "last",
    "character",
    "run",
    "let",
    "type",
    "name",
    "going",
    "type",
    "draw",
    "code",
    "time",
    "going",
    "click",
    "backspace",
    "going",
    "delete",
    "last",
    "character",
    "click",
    "delete",
    "deletes",
    "everything",
    "broy",
    "click",
    "submit",
    "going",
    "submit",
    "name",
    "right",
    "let",
    "customize",
    "appearance",
    "entry",
    "box",
    "within",
    "constructor",
    "entry",
    "box",
    "let",
    "change",
    "maybe",
    "color",
    "maybe",
    "background",
    "color",
    "foreground",
    "color",
    "let",
    "begin",
    "foreground",
    "color",
    "pass",
    "color",
    "name",
    "hex",
    "value",
    "want",
    "green",
    "hex",
    "value",
    "zero",
    "zero",
    "f",
    "zero",
    "ff00",
    "foreground",
    "color",
    "text",
    "type",
    "green",
    "also",
    "change",
    "background",
    "color",
    "bg",
    "could",
    "pass",
    "color",
    "name",
    "hex",
    "value",
    "going",
    "say",
    "black",
    "keep",
    "simple",
    "black",
    "background",
    "text",
    "color",
    "green",
    "useful",
    "features",
    "might",
    "interested",
    "let",
    "insert",
    "default",
    "text",
    "entry",
    "box",
    "use",
    "insert",
    "function",
    "entry",
    "dot",
    "insert",
    "place",
    "positional",
    "argument",
    "well",
    "text",
    "positional",
    "argument",
    "let",
    "say",
    "zero",
    "beginning",
    "index",
    "zero",
    "let",
    "set",
    "text",
    "maybe",
    "spongebob",
    "default",
    "text",
    "within",
    "entry",
    "box",
    "spongebob",
    "another",
    "option",
    "available",
    "us",
    "set",
    "state",
    "entry",
    "box",
    "set",
    "active",
    "disabled",
    "let",
    "say",
    "somebody",
    "submits",
    "name",
    "want",
    "disable",
    "entry",
    "box",
    "either",
    "pass",
    "option",
    "within",
    "constructor",
    "use",
    "config",
    "function",
    "make",
    "changes",
    "state",
    "entry",
    "box",
    "let",
    "say",
    "submit",
    "username",
    "want",
    "disable",
    "entry",
    "box",
    "let",
    "type",
    "name",
    "entry",
    "box",
    "dot",
    "config",
    "option",
    "state",
    "let",
    "set",
    "disabled",
    "type",
    "name",
    "click",
    "submit",
    "entry",
    "box",
    "disabled",
    "also",
    "option",
    "called",
    "show",
    "show",
    "certain",
    "character",
    "place",
    "normal",
    "text",
    "screen",
    "would",
    "useful",
    "password",
    "let",
    "say",
    "typing",
    "password",
    "want",
    "display",
    "password",
    "screen",
    "use",
    "show",
    "option",
    "show",
    "certain",
    "character",
    "place",
    "text",
    "might",
    "see",
    "bullets",
    "asterisk",
    "let",
    "pretend",
    "typing",
    "password",
    "going",
    "set",
    "option",
    "show",
    "place",
    "character",
    "want",
    "replace",
    "character",
    "let",
    "say",
    "want",
    "display",
    "asterisks",
    "type",
    "characters",
    "going",
    "type",
    "word",
    "password",
    "displaying",
    "asterisks",
    "click",
    "submit",
    "displays",
    "text",
    "would",
    "say",
    "plain",
    "text",
    "instead",
    "hidden",
    "text",
    "showing",
    "whatever",
    "character",
    "set",
    "option",
    "available",
    "well",
    "well",
    "everybody",
    "create",
    "entry",
    "box",
    "python",
    "submit",
    "information",
    "username",
    "example",
    "even",
    "password",
    "set",
    "show",
    "option",
    "available",
    "want",
    "copy",
    "code",
    "post",
    "comments",
    "yeah",
    "uses",
    "entry",
    "widget",
    "python",
    "hey",
    "going",
    "everybody",
    "two",
    "bro",
    "hope",
    "well",
    "video",
    "going",
    "teach",
    "guys",
    "create",
    "customize",
    "check",
    "buttons",
    "python",
    "sit",
    "back",
    "relax",
    "enjoy",
    "show",
    "right",
    "fellow",
    "bros",
    "video",
    "going",
    "creating",
    "customizing",
    "check",
    "buttons",
    "python",
    "sometimes",
    "refer",
    "check",
    "boxes",
    "case",
    "referring",
    "always",
    "need",
    "window",
    "window",
    "equals",
    "tk",
    "followed",
    "loop",
    "let",
    "call",
    "button",
    "check",
    "button",
    "order",
    "create",
    "check",
    "button",
    "type",
    "name",
    "check",
    "button",
    "equals",
    "check",
    "button",
    "within",
    "constructor",
    "adding",
    "check",
    "button",
    "adding",
    "window",
    "also",
    "within",
    "constructor",
    "set",
    "different",
    "options",
    "want",
    "customize",
    "check",
    "button",
    "let",
    "begin",
    "text",
    "text",
    "equals",
    "agree",
    "something",
    "last",
    "least",
    "need",
    "add",
    "check",
    "button",
    "window",
    "one",
    "way",
    "use",
    "pack",
    "function",
    "widget",
    "follow",
    "check",
    "button",
    "dot",
    "pack",
    "run",
    "check",
    "button",
    "within",
    "window",
    "toggle",
    "right",
    "agreeing",
    "something",
    "sure",
    "agreeing",
    "hopefully",
    "anything",
    "bad",
    "currently",
    "anything",
    "need",
    "associate",
    "variable",
    "check",
    "button",
    "add",
    "option",
    "variable",
    "equals",
    "let",
    "create",
    "variable",
    "called",
    "x",
    "need",
    "define",
    "within",
    "window",
    "create",
    "instance",
    "window",
    "let",
    "say",
    "x",
    "equals",
    "check",
    "buttons",
    "store",
    "1",
    "0",
    "default",
    "within",
    "variable",
    "variable",
    "call",
    "x",
    "x",
    "going",
    "set",
    "equal",
    "int",
    "var",
    "return",
    "string",
    "would",
    "say",
    "string",
    "bar",
    "normally",
    "default",
    "returns",
    "one",
    "zero",
    "actually",
    "change",
    "using",
    "value",
    "value",
    "options",
    "value",
    "going",
    "stored",
    "within",
    "variable",
    "toggled",
    "default",
    "one",
    "value",
    "opposite",
    "stored",
    "within",
    "variable",
    "toggled",
    "alright",
    "let",
    "fun",
    "let",
    "associate",
    "command",
    "check",
    "button",
    "command",
    "equals",
    "let",
    "create",
    "function",
    "called",
    "maybe",
    "display",
    "let",
    "define",
    "window",
    "def",
    "display",
    "going",
    "check",
    "value",
    "x",
    "see",
    "one",
    "zero",
    "within",
    "display",
    "function",
    "going",
    "check",
    "see",
    "x",
    "get",
    "value",
    "x",
    "going",
    "use",
    "get",
    "function",
    "x",
    "dot",
    "get",
    "equal",
    "one",
    "means",
    "somebody",
    "clicked",
    "check",
    "box",
    "toggled",
    "check",
    "check",
    "box",
    "check",
    "check",
    "button",
    "agree",
    "print",
    "agree",
    "zero",
    "else",
    "statement",
    "else",
    "print",
    "agree",
    "frowny",
    "face",
    "let",
    "test",
    "theory",
    "check",
    "button",
    "click",
    "actually",
    "going",
    "call",
    "display",
    "function",
    "agree",
    "something",
    "says",
    "within",
    "console",
    "window",
    "agree",
    "toggle",
    "says",
    "agree",
    "let",
    "change",
    "font",
    "check",
    "button",
    "add",
    "option",
    "font",
    "equals",
    "pass",
    "font",
    "want",
    "say",
    "maybe",
    "ariel",
    "size",
    "20",
    "readable",
    "agree",
    "something",
    "let",
    "also",
    "color",
    "well",
    "like",
    "coloring",
    "let",
    "begin",
    "foreground",
    "color",
    "fg",
    "short",
    "fg",
    "equals",
    "pass",
    "color",
    "name",
    "hex",
    "value",
    "like",
    "hex",
    "values",
    "going",
    "stick",
    "want",
    "green",
    "foreground",
    "color",
    "zero",
    "zero",
    "f",
    "zero",
    "zero",
    "feel",
    "free",
    "adjust",
    "values",
    "however",
    "want",
    "text",
    "green",
    "bright",
    "green",
    "hurts",
    "eyes",
    "also",
    "going",
    "change",
    "background",
    "color",
    "bg",
    "going",
    "set",
    "black",
    "green",
    "text",
    "black",
    "background",
    "okay",
    "click",
    "flashes",
    "kind",
    "annoying",
    "active",
    "foreground",
    "active",
    "background",
    "click",
    "hold",
    "color",
    "scheme",
    "switches",
    "active",
    "foreground",
    "slash",
    "background",
    "change",
    "going",
    "set",
    "options",
    "active",
    "foreground",
    "going",
    "set",
    "foreground",
    "color",
    "active",
    "background",
    "normal",
    "background",
    "active",
    "background",
    "equals",
    "black",
    "longer",
    "flash",
    "click",
    "bad",
    "bad",
    "let",
    "add",
    "padding",
    "pad",
    "x",
    "set",
    "25",
    "pad",
    "set",
    "little",
    "padding",
    "around",
    "check",
    "button",
    "one",
    "feature",
    "available",
    "us",
    "add",
    "image",
    "next",
    "check",
    "button",
    "downloaded",
    "image",
    "python",
    "logo",
    "want",
    "add",
    "use",
    "image",
    "option",
    "add",
    "photo",
    "image",
    "check",
    "button",
    "first",
    "need",
    "create",
    "photo",
    "image",
    "image",
    "file",
    "within",
    "window",
    "let",
    "call",
    "python",
    "photo",
    "probably",
    "use",
    "something",
    "different",
    "project",
    "python",
    "photo",
    "equals",
    "photo",
    "image",
    "within",
    "constructor",
    "photo",
    "image",
    "set",
    "file",
    "path",
    "file",
    "name",
    "since",
    "image",
    "within",
    "project",
    "folder",
    "list",
    "file",
    "name",
    "photo",
    "mine",
    "set",
    "image",
    "equal",
    "photo",
    "image",
    "image",
    "equals",
    "python",
    "photo",
    "run",
    "going",
    "overlap",
    "text",
    "still",
    "image",
    "though",
    "still",
    "works",
    "intended",
    "order",
    "display",
    "image",
    "well",
    "text",
    "going",
    "need",
    "use",
    "compound",
    "option",
    "let",
    "add",
    "end",
    "compound",
    "adding",
    "photo",
    "relative",
    "text",
    "want",
    "photo",
    "left",
    "hand",
    "side",
    "text",
    "going",
    "set",
    "left",
    "run",
    "surprise",
    "surprise",
    "image",
    "left",
    "hand",
    "side",
    "one",
    "thing",
    "know",
    "value",
    "value",
    "data",
    "type",
    "change",
    "value",
    "let",
    "say",
    "going",
    "replace",
    "value",
    "boolean",
    "value",
    "true",
    "value",
    "false",
    "variable",
    "make",
    "sure",
    "change",
    "data",
    "type",
    "well",
    "reflect",
    "storing",
    "within",
    "int",
    "var",
    "variable",
    "want",
    "change",
    "boolean",
    "var",
    "value",
    "replace",
    "int",
    "boolean",
    "work",
    "much",
    "display",
    "function",
    "need",
    "account",
    "within",
    "statement",
    "say",
    "x",
    "dot",
    "get",
    "need",
    "say",
    "equal",
    "one",
    "return",
    "true",
    "false",
    "work",
    "replace",
    "string",
    "let",
    "say",
    "value",
    "yes",
    "caps",
    "value",
    "string",
    "bar",
    "change",
    "display",
    "function",
    "say",
    "x",
    "dot",
    "get",
    "equal",
    "yes",
    "work",
    "agree",
    "agree",
    "agree",
    "agree",
    "change",
    "back",
    "one",
    "one",
    "zero",
    "default",
    "edit",
    "based",
    "need",
    "right",
    "basics",
    "check",
    "buttons",
    "python",
    "want",
    "copy",
    "code",
    "post",
    "comments",
    "yeah",
    "basics",
    "check",
    "buttons",
    "python",
    "hey",
    "going",
    "everybody",
    "bro",
    "hope",
    "well",
    "video",
    "going",
    "teaching",
    "guys",
    "create",
    "radio",
    "buttons",
    "python",
    "sit",
    "back",
    "relax",
    "enjoy",
    "show",
    "okay",
    "everybody",
    "let",
    "create",
    "radio",
    "buttons",
    "similar",
    "check",
    "boxes",
    "select",
    "one",
    "single",
    "grouping",
    "let",
    "pretend",
    "buying",
    "lunch",
    "select",
    "one",
    "item",
    "menu",
    "select",
    "either",
    "slice",
    "pizza",
    "hamburger",
    "hot",
    "dog",
    "let",
    "begin",
    "creating",
    "list",
    "call",
    "list",
    "food",
    "food",
    "equals",
    "pizza",
    "hamburger",
    "hot",
    "dog",
    "let",
    "create",
    "window",
    "window",
    "equals",
    "tk",
    "followed",
    "window",
    "dot",
    "main",
    "loop",
    "create",
    "radio",
    "button",
    "need",
    "name",
    "call",
    "radio",
    "button",
    "radio",
    "button",
    "equals",
    "radio",
    "button",
    "going",
    "adding",
    "window",
    "going",
    "put",
    "within",
    "loop",
    "going",
    "iterate",
    "items",
    "within",
    "list",
    "let",
    "create",
    "loop",
    "say",
    "index",
    "range",
    "length",
    "food",
    "going",
    "iterate",
    "elements",
    "within",
    "list",
    "run",
    "going",
    "create",
    "three",
    "radio",
    "buttons",
    "us",
    "instantiating",
    "one",
    "radio",
    "button",
    "item",
    "list",
    "going",
    "set",
    "text",
    "equal",
    "list",
    "food",
    "certain",
    "index",
    "first",
    "run",
    "loop",
    "going",
    "zero",
    "index",
    "one",
    "two",
    "forth",
    "item",
    "within",
    "list",
    "need",
    "pack",
    "radio",
    "button",
    "dot",
    "pack",
    "let",
    "take",
    "look",
    "alright",
    "radio",
    "buttons",
    "currently",
    "selected",
    "though",
    "need",
    "link",
    "within",
    "single",
    "grouping",
    "next",
    "thing",
    "add",
    "variable",
    "set",
    "equal",
    "x",
    "need",
    "declare",
    "create",
    "instance",
    "window",
    "x",
    "equals",
    "int",
    "var",
    "hold",
    "integer",
    "object",
    "within",
    "grouping",
    "however",
    "try",
    "run",
    "select",
    "one",
    "options",
    "become",
    "selected",
    "going",
    "need",
    "give",
    "individual",
    "radio",
    "buttons",
    "value",
    "right",
    "sharing",
    "value",
    "add",
    "value",
    "equals",
    "whatever",
    "index",
    "currently",
    "first",
    "item",
    "within",
    "list",
    "food",
    "going",
    "index",
    "value",
    "zero",
    "one",
    "two",
    "let",
    "try",
    "see",
    "default",
    "zero",
    "pizza",
    "already",
    "selected",
    "select",
    "either",
    "hamburger",
    "hot",
    "dog",
    "select",
    "one",
    "kind",
    "want",
    "guys",
    "usually",
    "know",
    "call",
    "config",
    "function",
    "change",
    "make",
    "object",
    "well",
    "like",
    "add",
    "comments",
    "teaching",
    "purposes",
    "change",
    "however",
    "might",
    "easier",
    "instead",
    "calling",
    "config",
    "function",
    "bunch",
    "times",
    "list",
    "changes",
    "within",
    "parentheses",
    "create",
    "instance",
    "object",
    "working",
    "however",
    "teaching",
    "purposes",
    "going",
    "put",
    "within",
    "separate",
    "lines",
    "allows",
    "add",
    "comments",
    "think",
    "going",
    "start",
    "uh",
    "adds",
    "text",
    "radio",
    "buttons",
    "groups",
    "radio",
    "buttons",
    "together",
    "share",
    "variable",
    "wanted",
    "completely",
    "different",
    "grouping",
    "radio",
    "buttons",
    "give",
    "different",
    "variable",
    "like",
    "line",
    "assigns",
    "radio",
    "button",
    "different",
    "value",
    "right",
    "let",
    "make",
    "cosmetic",
    "changes",
    "radio",
    "buttons",
    "right",
    "centered",
    "let",
    "anchor",
    "west",
    "place",
    "within",
    "pack",
    "function",
    "anchor",
    "equals",
    "w",
    "alternatively",
    "say",
    "capital",
    "w",
    "without",
    "quotes",
    "would",
    "also",
    "work",
    "lined",
    "let",
    "add",
    "padding",
    "going",
    "add",
    "pad",
    "x",
    "set",
    "25",
    "adds",
    "padding",
    "x",
    "axis",
    "let",
    "also",
    "change",
    "font",
    "save",
    "font",
    "equals",
    "maybe",
    "pick",
    "impact",
    "font",
    "style",
    "set",
    "font",
    "size",
    "50",
    "actually",
    "read",
    "font",
    "large",
    "enough",
    "let",
    "add",
    "images",
    "let",
    "create",
    "photo",
    "images",
    "want",
    "sure",
    "create",
    "create",
    "instance",
    "window",
    "let",
    "create",
    "pizza",
    "image",
    "first",
    "pizza",
    "image",
    "equals",
    "photo",
    "image",
    "file",
    "equals",
    "file",
    "path",
    "file",
    "name",
    "file",
    "kind",
    "looks",
    "like",
    "pizza",
    "emoji",
    "thing",
    "hamburger",
    "hotdog",
    "hamburger",
    "image",
    "file",
    "equals",
    "hotdog",
    "image",
    "emojis",
    "look",
    "like",
    "let",
    "create",
    "list",
    "photo",
    "images",
    "call",
    "food",
    "images",
    "equals",
    "names",
    "images",
    "pizza",
    "image",
    "hamburger",
    "image",
    "hot",
    "dog",
    "image",
    "set",
    "image",
    "radio",
    "button",
    "image",
    "equals",
    "name",
    "list",
    "food",
    "images",
    "followed",
    "index",
    "currently",
    "within",
    "loop",
    "adds",
    "image",
    "radio",
    "button",
    "let",
    "test",
    "cool",
    "images",
    "want",
    "images",
    "well",
    "text",
    "use",
    "compound",
    "let",
    "add",
    "next",
    "going",
    "add",
    "comma",
    "followed",
    "compound",
    "equals",
    "let",
    "say",
    "left",
    "add",
    "image",
    "left",
    "text",
    "adds",
    "image",
    "text",
    "say",
    "left",
    "side",
    "display",
    "image",
    "text",
    "radio",
    "buttons",
    "eliminate",
    "circle",
    "indicators",
    "actually",
    "way",
    "add",
    "want",
    "get",
    "rid",
    "indicator",
    "equals",
    "zero",
    "say",
    "eliminate",
    "circle",
    "indicators",
    "going",
    "change",
    "push",
    "buttons",
    "however",
    "going",
    "uneven",
    "size",
    "set",
    "width",
    "want",
    "say",
    "width",
    "equals",
    "75",
    "sure",
    "good",
    "size",
    "okay",
    "way",
    "small",
    "let",
    "try",
    "375",
    "yeah",
    "push",
    "buttons",
    "want",
    "like",
    "circle",
    "indicators",
    "sets",
    "width",
    "radio",
    "buttons",
    "let",
    "actually",
    "set",
    "function",
    "uh",
    "called",
    "click",
    "one",
    "buttons",
    "let",
    "call",
    "function",
    "maybe",
    "order",
    "like",
    "ordering",
    "one",
    "items",
    "def",
    "call",
    "order",
    "like",
    "ordering",
    "something",
    "statements",
    "feeling",
    "lazy",
    "say",
    "x",
    "value",
    "going",
    "stored",
    "radio",
    "buttons",
    "grouped",
    "together",
    "variable",
    "x",
    "x",
    "dot",
    "get",
    "equal",
    "zero",
    "first",
    "index",
    "pizza",
    "display",
    "print",
    "oops",
    "ordered",
    "pizza",
    "add",
    "else",
    "x",
    "dot",
    "get",
    "equal",
    "one",
    "print",
    "ordered",
    "hamburger",
    "else",
    "two",
    "ordered",
    "hot",
    "dog",
    "else",
    "print",
    "huh",
    "probably",
    "efficient",
    "way",
    "write",
    "however",
    "feeling",
    "lazy",
    "probably",
    "best",
    "way",
    "keep",
    "simple",
    "easy",
    "understand",
    "let",
    "try",
    "oh",
    "however",
    "need",
    "set",
    "command",
    "radio",
    "buttons",
    "command",
    "equals",
    "function",
    "name",
    "order",
    "make",
    "sure",
    "add",
    "parentheses",
    "set",
    "command",
    "radio",
    "button",
    "function",
    "right",
    "let",
    "test",
    "click",
    "pizza",
    "says",
    "ordered",
    "pizza",
    "ordered",
    "hamburger",
    "ordered",
    "hot",
    "dog",
    "okay",
    "everybody",
    "basics",
    "radio",
    "buttons",
    "would",
    "like",
    "copy",
    "code",
    "post",
    "comments",
    "yeah",
    "basics",
    "radio",
    "buttons",
    "python",
    "hey",
    "going",
    "everybody",
    "bro",
    "hope",
    "well",
    "video",
    "going",
    "teach",
    "guys",
    "create",
    "sliding",
    "scale",
    "python",
    "sit",
    "back",
    "relax",
    "enjoy",
    "show",
    "let",
    "create",
    "scale",
    "need",
    "window",
    "window",
    "equals",
    "tk",
    "followed",
    "create",
    "scale",
    "called",
    "scale",
    "scale",
    "equals",
    "scale",
    "need",
    "add",
    "scale",
    "window",
    "put",
    "list",
    "position",
    "2",
    "position",
    "values",
    "range",
    "values",
    "use",
    "scale",
    "sure",
    "add",
    "underscore",
    "wo",
    "work",
    "without",
    "underscore",
    "equals",
    "let",
    "say",
    "0",
    "2",
    "equals",
    "100",
    "going",
    "create",
    "scale",
    "temperature",
    "celsius",
    "0",
    "freezing",
    "100",
    "boiling",
    "point",
    "uh",
    "know",
    "water",
    "display",
    "scale",
    "need",
    "add",
    "let",
    "run",
    "front",
    "position",
    "zero",
    "top",
    "go",
    "increases",
    "actually",
    "flip",
    "save",
    "102",
    "zero",
    "scroll",
    "number",
    "increase",
    "let",
    "also",
    "get",
    "current",
    "value",
    "need",
    "button",
    "button",
    "equals",
    "button",
    "add",
    "window",
    "add",
    "text",
    "text",
    "equals",
    "submit",
    "command",
    "command",
    "equals",
    "submit",
    "make",
    "function",
    "let",
    "outside",
    "window",
    "def",
    "submit",
    "simply",
    "print",
    "current",
    "temperature",
    "let",
    "display",
    "message",
    "temperature",
    "plus",
    "scale",
    "dot",
    "get",
    "plus",
    "degrees",
    "celsius",
    "say",
    "degree",
    "c",
    "let",
    "try",
    "uh",
    "also",
    "pack",
    "button",
    "try",
    "submit",
    "right",
    "going",
    "return",
    "integer",
    "need",
    "convert",
    "string",
    "str",
    "python",
    "displaying",
    "integer",
    "value",
    "along",
    "another",
    "string",
    "uh",
    "need",
    "convert",
    "string",
    "work",
    "82",
    "degrees",
    "celsius",
    "let",
    "cosmetic",
    "changes",
    "temperature",
    "gauge",
    "right",
    "kind",
    "ugly",
    "first",
    "thing",
    "change",
    "let",
    "say",
    "length",
    "length",
    "equals",
    "600",
    "fairly",
    "large",
    "also",
    "set",
    "orientation",
    "orient",
    "spelt",
    "like",
    "either",
    "vertical",
    "currently",
    "horizontal",
    "keep",
    "vertical",
    "let",
    "comment",
    "orientation",
    "scale",
    "let",
    "also",
    "change",
    "font",
    "font",
    "equals",
    "pick",
    "whatever",
    "font",
    "want",
    "size",
    "maybe",
    "add",
    "tick",
    "intervals",
    "maybe",
    "set",
    "numeric",
    "indicators",
    "scale",
    "show",
    "value",
    "hides",
    "current",
    "value",
    "set",
    "zero",
    "hide",
    "current",
    "value",
    "longer",
    "displays",
    "current",
    "value",
    "next",
    "slider",
    "actually",
    "retrieve",
    "get",
    "value",
    "right",
    "40",
    "helps",
    "tick",
    "intervals",
    "side",
    "probably",
    "add",
    "adds",
    "uh",
    "numeric",
    "indicators",
    "value",
    "good",
    "enough",
    "let",
    "continue",
    "let",
    "use",
    "set",
    "function",
    "set",
    "current",
    "value",
    "knob",
    "scale",
    "default",
    "zero",
    "use",
    "scale",
    "dot",
    "set",
    "function",
    "place",
    "number",
    "value",
    "let",
    "say",
    "want",
    "100",
    "100",
    "position",
    "instead",
    "zero",
    "wanted",
    "middle",
    "could",
    "set",
    "50",
    "middle",
    "however",
    "change",
    "range",
    "skill",
    "minus",
    "2",
    "set",
    "50",
    "50",
    "way",
    "longer",
    "appears",
    "middle",
    "really",
    "necessary",
    "want",
    "little",
    "sophisticated",
    "actually",
    "formula",
    "could",
    "use",
    "use",
    "scale",
    "straight",
    "braces",
    "place",
    "word",
    "within",
    "give",
    "us",
    "max",
    "basically",
    "uh",
    "without",
    "underscore",
    "scale",
    "minus",
    "scale",
    "two",
    "going",
    "divide",
    "two",
    "going",
    "put",
    "within",
    "extra",
    "set",
    "parentheses",
    "plus",
    "scale",
    "two",
    "case",
    "two",
    "value",
    "greater",
    "zero",
    "want",
    "account",
    "going",
    "put",
    "within",
    "another",
    "set",
    "parentheses",
    "always",
    "appear",
    "middle",
    "even",
    "change",
    "range",
    "yeah",
    "seems",
    "like",
    "works",
    "uh",
    "like",
    "said",
    "really",
    "necessary",
    "want",
    "little",
    "sophisticated",
    "would",
    "work",
    "let",
    "make",
    "cosmetic",
    "changes",
    "scale",
    "make",
    "look",
    "pretty",
    "first",
    "let",
    "change",
    "trough",
    "color",
    "gray",
    "portion",
    "right",
    "let",
    "set",
    "trough",
    "color",
    "equals",
    "whatever",
    "color",
    "want",
    "could",
    "say",
    "like",
    "blue",
    "place",
    "hex",
    "value",
    "actually",
    "picked",
    "one",
    "already",
    "going",
    "use",
    "6",
    "9",
    "e",
    "f",
    "f",
    "icy",
    "blue",
    "color",
    "kind",
    "like",
    "sliding",
    "ice",
    "also",
    "going",
    "change",
    "font",
    "color",
    "going",
    "pick",
    "fiery",
    "red",
    "color",
    "symbolize",
    "heat",
    "change",
    "background",
    "color",
    "bg",
    "set",
    "like",
    "black",
    "looking",
    "kind",
    "cool",
    "right",
    "good",
    "reason",
    "going",
    "add",
    "pictures",
    "feel",
    "free",
    "pause",
    "video",
    "like",
    "download",
    "images",
    "going",
    "use",
    "image",
    "flame",
    "hot",
    "side",
    "scale",
    "snowflake",
    "cold",
    "side",
    "let",
    "begin",
    "adding",
    "hot",
    "image",
    "uh",
    "scale",
    "actually",
    "add",
    "scale",
    "window",
    "instantiate",
    "window",
    "place",
    "going",
    "create",
    "image",
    "call",
    "hot",
    "image",
    "fire",
    "icon",
    "hot",
    "image",
    "equals",
    "photo",
    "image",
    "file",
    "equals",
    "going",
    "add",
    "image",
    "label",
    "call",
    "hot",
    "label",
    "hot",
    "label",
    "label",
    "image",
    "equals",
    "hot",
    "image",
    "need",
    "pack",
    "hot",
    "label",
    "dot",
    "pack",
    "appear",
    "top",
    "let",
    "test",
    "yep",
    "let",
    "thing",
    "cold",
    "side",
    "add",
    "button",
    "going",
    "replace",
    "hot",
    "cold",
    "thing",
    "file",
    "name",
    "cold",
    "label",
    "cold",
    "image",
    "cold",
    "label",
    "dot",
    "pack",
    "let",
    "take",
    "look",
    "shabby",
    "looking",
    "pretty",
    "sweet",
    "submit",
    "button",
    "bottom",
    "uh",
    "right",
    "temperature",
    "100",
    "degrees",
    "celsius",
    "temperature",
    "0",
    "degrees",
    "celsius",
    "temperature",
    "60",
    "degrees",
    "celsius",
    "well",
    "create",
    "scale",
    "python",
    "would",
    "like",
    "copy",
    "code",
    "post",
    "comments",
    "yeah",
    "create",
    "scale",
    "python",
    "hey",
    "going",
    "everybody",
    "bro",
    "hope",
    "well",
    "video",
    "going",
    "teach",
    "guys",
    "create",
    "list",
    "box",
    "python",
    "sit",
    "back",
    "relax",
    "enjoy",
    "show",
    "right",
    "wonderful",
    "people",
    "let",
    "create",
    "list",
    "box",
    "list",
    "box",
    "listing",
    "selectable",
    "text",
    "items",
    "within",
    "container",
    "always",
    "need",
    "window",
    "window",
    "equals",
    "tk",
    "followed",
    "window",
    "dot",
    "main",
    "loop",
    "let",
    "create",
    "list",
    "box",
    "simply",
    "called",
    "list",
    "box",
    "big",
    "surprise",
    "right",
    "list",
    "box",
    "equals",
    "list",
    "box",
    "adding",
    "list",
    "box",
    "going",
    "place",
    "within",
    "parentheses",
    "constructor",
    "adding",
    "window",
    "going",
    "follow",
    "also",
    "well",
    "place",
    "coordinates",
    "always",
    "done",
    "pack",
    "let",
    "stick",
    "right",
    "list",
    "box",
    "looks",
    "like",
    "small",
    "rectangular",
    "box",
    "going",
    "add",
    "text",
    "items",
    "selectable",
    "eventually",
    "able",
    "submit",
    "choice",
    "idea",
    "let",
    "create",
    "online",
    "menu",
    "like",
    "ordering",
    "food",
    "restaurant",
    "let",
    "say",
    "bros",
    "italian",
    "restaurant",
    "let",
    "add",
    "food",
    "items",
    "menu",
    "somebody",
    "submit",
    "order",
    "need",
    "use",
    "insert",
    "function",
    "list",
    "box",
    "add",
    "items",
    "list",
    "box",
    "dot",
    "insert",
    "place",
    "index",
    "text",
    "item",
    "let",
    "say",
    "index",
    "one",
    "pizza",
    "end",
    "item",
    "pizza",
    "selectable",
    "well",
    "really",
    "need",
    "create",
    "submit",
    "button",
    "populate",
    "rest",
    "list",
    "box",
    "let",
    "add",
    "items",
    "menu",
    "let",
    "say",
    "five",
    "items",
    "need",
    "index",
    "one",
    "two",
    "three",
    "four",
    "five",
    "pizza",
    "first",
    "item",
    "second",
    "item",
    "let",
    "pasta",
    "third",
    "let",
    "say",
    "garlic",
    "bread",
    "garlic",
    "bread",
    "awesome",
    "restaurants",
    "usually",
    "appetizers",
    "soup",
    "salad",
    "enough",
    "example",
    "menu",
    "select",
    "item",
    "menu",
    "let",
    "customize",
    "appearance",
    "menu",
    "well",
    "let",
    "let",
    "change",
    "background",
    "color",
    "option",
    "bg",
    "background",
    "set",
    "equal",
    "color",
    "choice",
    "hex",
    "value",
    "hex",
    "color",
    "value",
    "already",
    "picked",
    "f7fde",
    "appearance",
    "would",
    "say",
    "paper",
    "like",
    "kind",
    "faded",
    "think",
    "would",
    "fit",
    "sort",
    "menu",
    "restaurant",
    "pick",
    "whatever",
    "background",
    "color",
    "want",
    "let",
    "change",
    "font",
    "next",
    "option",
    "font",
    "pick",
    "font",
    "somewhat",
    "fancy",
    "think",
    "would",
    "fit",
    "like",
    "restaurant",
    "menu",
    "size",
    "yeah",
    "getting",
    "somewhere",
    "also",
    "change",
    "width",
    "height",
    "width",
    "equals",
    "let",
    "say",
    "bad",
    "width",
    "let",
    "also",
    "change",
    "height",
    "function",
    "list",
    "box",
    "let",
    "get",
    "current",
    "size",
    "list",
    "box",
    "let",
    "actually",
    "insert",
    "items",
    "within",
    "list",
    "box",
    "change",
    "size",
    "list",
    "box",
    "type",
    "list",
    "box",
    "dot",
    "config",
    "usually",
    "use",
    "config",
    "need",
    "change",
    "uh",
    "options",
    "want",
    "change",
    "length",
    "height",
    "list",
    "box",
    "going",
    "say",
    "height",
    "equals",
    "list",
    "box",
    "dot",
    "size",
    "function",
    "adjust",
    "size",
    "list",
    "box",
    "dynamically",
    "even",
    "remove",
    "item",
    "size",
    "list",
    "box",
    "going",
    "shrink",
    "like",
    "let",
    "keep",
    "salad",
    "need",
    "salad",
    "right",
    "actually",
    "submit",
    "one",
    "options",
    "need",
    "create",
    "submit",
    "button",
    "let",
    "create",
    "list",
    "box",
    "near",
    "bottom",
    "call",
    "submit",
    "button",
    "submit",
    "button",
    "equals",
    "button",
    "adding",
    "window",
    "let",
    "set",
    "text",
    "submit",
    "need",
    "command",
    "create",
    "function",
    "called",
    "submit",
    "need",
    "pack",
    "submit",
    "button",
    "submit",
    "top",
    "program",
    "let",
    "create",
    "submit",
    "function",
    "top",
    "def",
    "submit",
    "retrieve",
    "get",
    "current",
    "selected",
    "item",
    "list",
    "box",
    "certain",
    "function",
    "use",
    "begin",
    "saying",
    "list",
    "box",
    "dot",
    "get",
    "getting",
    "want",
    "get",
    "anything",
    "currently",
    "selected",
    "function",
    "going",
    "within",
    "parentheses",
    "get",
    "function",
    "type",
    "listbox",
    "dot",
    "current",
    "selection",
    "shortened",
    "cur",
    "selection",
    "right",
    "either",
    "store",
    "within",
    "variable",
    "print",
    "think",
    "print",
    "keep",
    "simple",
    "select",
    "item",
    "click",
    "submit",
    "button",
    "going",
    "submit",
    "order",
    "actually",
    "better",
    "yet",
    "let",
    "actually",
    "uh",
    "print",
    "ordered",
    "whatever",
    "item",
    "select",
    "garlic",
    "bread",
    "ordered",
    "garlic",
    "bread",
    "cool",
    "going",
    "work",
    "way",
    "submit",
    "insert",
    "item",
    "list",
    "box",
    "program",
    "compiled",
    "already",
    "running",
    "create",
    "entry",
    "box",
    "within",
    "window",
    "submit",
    "custom",
    "item",
    "menu",
    "let",
    "create",
    "entry",
    "box",
    "let",
    "submit",
    "button",
    "would",
    "good",
    "spot",
    "let",
    "call",
    "entry",
    "box",
    "somebody",
    "type",
    "something",
    "add",
    "menu",
    "entry",
    "box",
    "equals",
    "entry",
    "adding",
    "window",
    "entry",
    "box",
    "dot",
    "pack",
    "going",
    "create",
    "button",
    "called",
    "add",
    "going",
    "copy",
    "everything",
    "submit",
    "button",
    "change",
    "submit",
    "add",
    "going",
    "add",
    "item",
    "menu",
    "change",
    "text",
    "add",
    "command",
    "add",
    "add",
    "button",
    "dot",
    "pack",
    "going",
    "create",
    "function",
    "called",
    "add",
    "top",
    "def",
    "add",
    "parentheses",
    "colon",
    "add",
    "item",
    "list",
    "box",
    "first",
    "need",
    "get",
    "currently",
    "entry",
    "box",
    "typing",
    "list",
    "box",
    "dot",
    "insert",
    "within",
    "parentheses",
    "need",
    "get",
    "index",
    "number",
    "well",
    "text",
    "item",
    "number",
    "type",
    "listbox",
    "dot",
    "size",
    "give",
    "us",
    "current",
    "position",
    "index",
    "currently",
    "list",
    "box",
    "need",
    "get",
    "text",
    "entry",
    "box",
    "type",
    "name",
    "entry",
    "box",
    "entry",
    "box",
    "dot",
    "get",
    "insert",
    "new",
    "item",
    "within",
    "menu",
    "list",
    "box",
    "let",
    "try",
    "type",
    "item",
    "let",
    "say",
    "soda",
    "want",
    "add",
    "soda",
    "menu",
    "click",
    "add",
    "right",
    "soda",
    "scroll",
    "see",
    "let",
    "change",
    "size",
    "list",
    "box",
    "actually",
    "line",
    "code",
    "already",
    "height",
    "equals",
    "listbox",
    "size",
    "let",
    "add",
    "within",
    "add",
    "function",
    "end",
    "height",
    "list",
    "box",
    "adjust",
    "currently",
    "soda",
    "within",
    "menu",
    "let",
    "type",
    "soda",
    "item",
    "click",
    "add",
    "item",
    "appear",
    "size",
    "list",
    "box",
    "change",
    "accommodate",
    "new",
    "items",
    "let",
    "say",
    "serve",
    "sushi",
    "italian",
    "japanese",
    "restaurant",
    "sushi",
    "menu",
    "know",
    "stop",
    "let",
    "create",
    "delete",
    "button",
    "delete",
    "item",
    "menu",
    "create",
    "delete",
    "button",
    "copy",
    "everything",
    "add",
    "change",
    "delete",
    "delete",
    "button",
    "text",
    "equals",
    "delete",
    "command",
    "equals",
    "delete",
    "well",
    "delete",
    "button",
    "dot",
    "pack",
    "top",
    "create",
    "delete",
    "function",
    "e",
    "f",
    "delete",
    "delete",
    "item",
    "list",
    "box",
    "actually",
    "function",
    "list",
    "box",
    "dot",
    "delete",
    "within",
    "parenthesis",
    "delete",
    "function",
    "pass",
    "list",
    "box",
    "dot",
    "current",
    "selection",
    "cur",
    "selection",
    "short",
    "want",
    "readjust",
    "height",
    "list",
    "box",
    "delete",
    "item",
    "add",
    "height",
    "equals",
    "size",
    "items",
    "within",
    "list",
    "box",
    "going",
    "shrink",
    "delete",
    "item",
    "let",
    "try",
    "menu",
    "let",
    "say",
    "longer",
    "want",
    "salad",
    "salad",
    "healthy",
    "well",
    "delete",
    "thing",
    "soup",
    "know",
    "let",
    "also",
    "delete",
    "pasta",
    "pizza",
    "left",
    "sweet",
    "sweet",
    "garlic",
    "bread",
    "well",
    "ladies",
    "gentlemen",
    "going",
    "get",
    "advanced",
    "stuff",
    "list",
    "boxes",
    "want",
    "select",
    "one",
    "item",
    "list",
    "box",
    "going",
    "need",
    "change",
    "things",
    "create",
    "list",
    "box",
    "select",
    "mode",
    "select",
    "mode",
    "going",
    "set",
    "equal",
    "multiple",
    "actually",
    "select",
    "multiple",
    "items",
    "list",
    "box",
    "like",
    "want",
    "select",
    "one",
    "everything",
    "happens",
    "submit",
    "well",
    "going",
    "run",
    "problems",
    "going",
    "need",
    "change",
    "program",
    "around",
    "let",
    "begin",
    "submit",
    "option",
    "going",
    "within",
    "submit",
    "option",
    "first",
    "get",
    "rid",
    "line",
    "let",
    "say",
    "longer",
    "need",
    "anymore",
    "uh",
    "print",
    "items",
    "ordered",
    "let",
    "create",
    "list",
    "called",
    "food",
    "leave",
    "empty",
    "fill",
    "later",
    "create",
    "loop",
    "index",
    "list",
    "box",
    "dot",
    "current",
    "selection",
    "going",
    "iteration",
    "food",
    "dot",
    "insert",
    "index",
    "number",
    "well",
    "listbox",
    "dot",
    "get",
    "item",
    "name",
    "index",
    "loop",
    "going",
    "iterate",
    "item",
    "select",
    "since",
    "three",
    "items",
    "currently",
    "selected",
    "going",
    "iterate",
    "three",
    "times",
    "get",
    "index",
    "number",
    "well",
    "item",
    "index",
    "number",
    "need",
    "display",
    "contents",
    "within",
    "list",
    "food",
    "another",
    "loop",
    "let",
    "add",
    "ordered",
    "index",
    "list",
    "food",
    "print",
    "index",
    "print",
    "everything",
    "ordered",
    "let",
    "say",
    "want",
    "one",
    "everything",
    "submit",
    "ordered",
    "pizza",
    "pasta",
    "garlic",
    "bread",
    "soup",
    "salad",
    "happens",
    "try",
    "delete",
    "multiple",
    "items",
    "let",
    "say",
    "want",
    "delete",
    "soup",
    "salad",
    "click",
    "delete",
    "well",
    "going",
    "run",
    "error",
    "function",
    "set",
    "accommodate",
    "multiple",
    "items",
    "need",
    "change",
    "things",
    "around",
    "let",
    "get",
    "rid",
    "line",
    "list",
    "box",
    "dot",
    "delete",
    "list",
    "box",
    "dot",
    "current",
    "selection",
    "going",
    "place",
    "loop",
    "index",
    "list",
    "box",
    "dot",
    "current",
    "selection",
    "iteration",
    "going",
    "use",
    "list",
    "box",
    "dot",
    "delete",
    "deleting",
    "item",
    "whatever",
    "index",
    "currently",
    "would",
    "think",
    "would",
    "work",
    "first",
    "glance",
    "let",
    "say",
    "want",
    "delete",
    "pizza",
    "pasta",
    "going",
    "click",
    "delete",
    "pizza",
    "deleted",
    "pasta",
    "indexes",
    "changing",
    "delete",
    "item",
    "use",
    "loop",
    "actually",
    "reverse",
    "going",
    "enclose",
    "reversed",
    "going",
    "start",
    "last",
    "index",
    "work",
    "way",
    "zero",
    "order",
    "want",
    "delete",
    "pizza",
    "pasta",
    "know",
    "would",
    "amazing",
    "click",
    "delete",
    "deletes",
    "pizza",
    "pasta",
    "still",
    "garlic",
    "bread",
    "soup",
    "salad",
    "add",
    "item",
    "let",
    "say",
    "want",
    "add",
    "sushi",
    "menu",
    "order",
    "one",
    "everything",
    "really",
    "hungry",
    "ordered",
    "garlic",
    "bread",
    "soup",
    "salad",
    "sushi",
    "basics",
    "creating",
    "list",
    "box",
    "python",
    "want",
    "copy",
    "code",
    "post",
    "comments",
    "yeah",
    "basics",
    "list",
    "boxes",
    "python",
    "hey",
    "going",
    "everybody",
    "bro",
    "hope",
    "well",
    "video",
    "going",
    "teach",
    "guys",
    "create",
    "message",
    "boxes",
    "python",
    "sit",
    "back",
    "relax",
    "enjoy",
    "show",
    "okay",
    "people",
    "let",
    "create",
    "message",
    "boxes",
    "first",
    "need",
    "import",
    "tk",
    "enter",
    "import",
    "message",
    "box",
    "import",
    "message",
    "box",
    "library",
    "necessary",
    "add",
    "comment",
    "uh",
    "need",
    "window",
    "window",
    "equals",
    "tk",
    "followed",
    "window",
    "dot",
    "main",
    "loop",
    "let",
    "create",
    "button",
    "button",
    "equals",
    "button",
    "going",
    "add",
    "window",
    "going",
    "set",
    "command",
    "execute",
    "click",
    "function",
    "message",
    "box",
    "appear",
    "click",
    "button",
    "let",
    "set",
    "text",
    "text",
    "equals",
    "click",
    "need",
    "pack",
    "button",
    "need",
    "create",
    "click",
    "function",
    "let",
    "top",
    "def",
    "click",
    "want",
    "different",
    "uh",
    "message",
    "dialog",
    "boxes",
    "use",
    "let",
    "begin",
    "basic",
    "show",
    "info",
    "message",
    "box",
    "message",
    "box",
    "dot",
    "options",
    "let",
    "begin",
    "show",
    "info",
    "show",
    "info",
    "displays",
    "simple",
    "message",
    "run",
    "button",
    "click",
    "button",
    "going",
    "create",
    "message",
    "box",
    "us",
    "shows",
    "info",
    "really",
    "info",
    "show",
    "yet",
    "set",
    "title",
    "set",
    "message",
    "let",
    "set",
    "title",
    "title",
    "equals",
    "info",
    "message",
    "box",
    "although",
    "part",
    "title",
    "got",
    "cut",
    "let",
    "also",
    "set",
    "message",
    "message",
    "equals",
    "person",
    "click",
    "person",
    "thanks",
    "know",
    "message",
    "boxes",
    "use",
    "going",
    "turn",
    "comment",
    "copy",
    "save",
    "time",
    "next",
    "one",
    "show",
    "warning",
    "different",
    "icon",
    "title",
    "let",
    "say",
    "warning",
    "message",
    "virus",
    "get",
    "annoying",
    "warning",
    "message",
    "click",
    "ok",
    "get",
    "rid",
    "one",
    "thing",
    "might",
    "see",
    "tech",
    "support",
    "scams",
    "message",
    "box",
    "like",
    "shows",
    "warning",
    "put",
    "within",
    "loop",
    "set",
    "true",
    "continue",
    "kind",
    "like",
    "try",
    "close",
    "going",
    "reappear",
    "true",
    "true",
    "basically",
    "something",
    "funny",
    "wanted",
    "show",
    "let",
    "move",
    "going",
    "turn",
    "comment",
    "next",
    "one",
    "show",
    "error",
    "show",
    "error",
    "title",
    "set",
    "whatever",
    "want",
    "error",
    "message",
    "something",
    "went",
    "wrong",
    "sophisticated",
    "ones",
    "ask",
    "user",
    "input",
    "next",
    "one",
    "message",
    "box",
    "dot",
    "ask",
    "choose",
    "let",
    "go",
    "ask",
    "okay",
    "cancel",
    "first",
    "set",
    "title",
    "title",
    "equals",
    "ask",
    "okay",
    "cancel",
    "message",
    "message",
    "want",
    "thing",
    "actually",
    "put",
    "within",
    "statement",
    "returns",
    "either",
    "true",
    "false",
    "depending",
    "click",
    "let",
    "put",
    "within",
    "statement",
    "true",
    "print",
    "thing",
    "returns",
    "false",
    "use",
    "else",
    "statement",
    "else",
    "else",
    "want",
    "say",
    "else",
    "print",
    "cancelled",
    "thing",
    "let",
    "test",
    "forgetting",
    "colon",
    "want",
    "thing",
    "okay",
    "thing",
    "let",
    "try",
    "want",
    "thing",
    "cancel",
    "cancelled",
    "thing",
    "cool",
    "others",
    "turn",
    "comments",
    "next",
    "one",
    "go",
    "ask",
    "retry",
    "cancel",
    "fairly",
    "similar",
    "going",
    "copy",
    "let",
    "change",
    "ask",
    "retry",
    "cancel",
    "ask",
    "retry",
    "cancel",
    "want",
    "retry",
    "thing",
    "retried",
    "thing",
    "cancelled",
    "thing",
    "similar",
    "want",
    "retry",
    "thing",
    "retry",
    "retried",
    "thing",
    "cancel",
    "cancelled",
    "thing",
    "okay",
    "next",
    "one",
    "ask",
    "yes",
    "get",
    "user",
    "input",
    "yes",
    "returns",
    "boolean",
    "value",
    "true",
    "false",
    "value",
    "message",
    "box",
    "dot",
    "ask",
    "yes",
    "set",
    "title",
    "title",
    "equals",
    "ask",
    "yes",
    "message",
    "like",
    "cake",
    "let",
    "put",
    "within",
    "statement",
    "returns",
    "true",
    "false",
    "answer",
    "print",
    "like",
    "cake",
    "else",
    "answered",
    "false",
    "print",
    "like",
    "cake",
    "missing",
    "colon",
    "go",
    "click",
    "yes",
    "returns",
    "true",
    "execute",
    "line",
    "code",
    "like",
    "cake",
    "answer",
    "going",
    "execute",
    "else",
    "statement",
    "like",
    "cake",
    "like",
    "cake",
    "next",
    "ask",
    "question",
    "return",
    "boolean",
    "value",
    "true",
    "false",
    "actually",
    "returns",
    "string",
    "yes",
    "message",
    "box",
    "dot",
    "ask",
    "question",
    "set",
    "title",
    "ask",
    "question",
    "message",
    "message",
    "equals",
    "like",
    "pi",
    "let",
    "print",
    "result",
    "returns",
    "print",
    "everything",
    "within",
    "like",
    "said",
    "return",
    "true",
    "false",
    "yes",
    "could",
    "assign",
    "response",
    "variable",
    "answer",
    "answer",
    "equals",
    "whatever",
    "answer",
    "whatever",
    "click",
    "whatever",
    "button",
    "click",
    "answer",
    "equal",
    "yes",
    "print",
    "message",
    "print",
    "like",
    "pie",
    "else",
    "answer",
    "print",
    "like",
    "pie",
    "like",
    "pie",
    "yes",
    "like",
    "pie",
    "like",
    "pie",
    "like",
    "pie",
    "next",
    "one",
    "probably",
    "difficult",
    "ask",
    "yes",
    "cancel",
    "message",
    "box",
    "dot",
    "ask",
    "yes",
    "cancel",
    "last",
    "one",
    "let",
    "set",
    "title",
    "title",
    "equals",
    "whatever",
    "want",
    "yes",
    "cancel",
    "message",
    "message",
    "equals",
    "like",
    "code",
    "let",
    "print",
    "results",
    "returns",
    "print",
    "everything",
    "take",
    "look",
    "possible",
    "answers",
    "true",
    "false",
    "none",
    "run",
    "statements",
    "answer",
    "equal",
    "true",
    "print",
    "like",
    "code",
    "oh",
    "need",
    "assign",
    "answer",
    "answer",
    "equals",
    "else",
    "answer",
    "equal",
    "false",
    "let",
    "print",
    "watching",
    "video",
    "coding",
    "else",
    "response",
    "none",
    "use",
    "else",
    "statement",
    "else",
    "dodged",
    "question",
    "okay",
    "let",
    "try",
    "like",
    "code",
    "yes",
    "like",
    "code",
    "uh",
    "really",
    "smiley",
    "face",
    "right",
    "like",
    "code",
    "watching",
    "video",
    "coding",
    "like",
    "code",
    "cancel",
    "dodged",
    "question",
    "one",
    "option",
    "available",
    "change",
    "icon",
    "using",
    "let",
    "say",
    "want",
    "change",
    "icon",
    "right",
    "currently",
    "question",
    "mark",
    "set",
    "one",
    "preset",
    "icons",
    "icon",
    "equals",
    "let",
    "set",
    "warning",
    "instead",
    "question",
    "mark",
    "get",
    "yellow",
    "exclamation",
    "point",
    "also",
    "use",
    "info",
    "eye",
    "error",
    "fits",
    "best",
    "right",
    "well",
    "basics",
    "message",
    "boxes",
    "python",
    "like",
    "copy",
    "code",
    "post",
    "comments",
    "yeah",
    "basics",
    "message",
    "boxes",
    "python",
    "hey",
    "going",
    "everybody",
    "bro",
    "hope",
    "well",
    "video",
    "going",
    "teach",
    "guys",
    "color",
    "chooser",
    "module",
    "python",
    "sit",
    "back",
    "relax",
    "enjoy",
    "show",
    "okay",
    "everybody",
    "begin",
    "need",
    "second",
    "import",
    "let",
    "add",
    "top",
    "tk",
    "enter",
    "import",
    "color",
    "chooser",
    "reason",
    "need",
    "second",
    "import",
    "included",
    "first",
    "import",
    "sub",
    "module",
    "necessary",
    "add",
    "comment",
    "like",
    "add",
    "comments",
    "teaching",
    "purposes",
    "make",
    "sure",
    "two",
    "imports",
    "begin",
    "need",
    "window",
    "button",
    "add",
    "window",
    "click",
    "button",
    "going",
    "select",
    "color",
    "change",
    "background",
    "color",
    "window",
    "let",
    "create",
    "window",
    "window",
    "equals",
    "tk",
    "followed",
    "loop",
    "let",
    "set",
    "geometry",
    "going",
    "change",
    "background",
    "color",
    "window",
    "select",
    "color",
    "let",
    "select",
    "fairly",
    "large",
    "size",
    "window",
    "maybe",
    "420",
    "420",
    "width",
    "height",
    "let",
    "create",
    "button",
    "button",
    "equals",
    "button",
    "let",
    "set",
    "text",
    "text",
    "equals",
    "click",
    "going",
    "set",
    "command",
    "button",
    "called",
    "going",
    "create",
    "function",
    "maybe",
    "called",
    "click",
    "need",
    "pack",
    "button",
    "add",
    "window",
    "going",
    "need",
    "create",
    "function",
    "call",
    "click",
    "click",
    "button",
    "function",
    "going",
    "called",
    "def",
    "click",
    "want",
    "clicking",
    "button",
    "going",
    "take",
    "color",
    "chooser",
    "going",
    "use",
    "ask",
    "color",
    "function",
    "currently",
    "select",
    "color",
    "clicking",
    "button",
    "pick",
    "whatever",
    "color",
    "want",
    "hit",
    "ok",
    "however",
    "need",
    "store",
    "color",
    "within",
    "let",
    "say",
    "variable",
    "create",
    "variable",
    "called",
    "color",
    "color",
    "equals",
    "color",
    "chooser",
    "dot",
    "ask",
    "color",
    "something",
    "color",
    "let",
    "print",
    "color",
    "take",
    "look",
    "see",
    "contains",
    "print",
    "color",
    "let",
    "say",
    "want",
    "green",
    "color",
    "click",
    "ok",
    "prints",
    "color",
    "rgb",
    "values",
    "first",
    "element",
    "amount",
    "red",
    "green",
    "blue",
    "second",
    "element",
    "hexadecimal",
    "representation",
    "values",
    "want",
    "hexadecimal",
    "value",
    "create",
    "second",
    "variable",
    "store",
    "let",
    "call",
    "color",
    "hex",
    "color",
    "hex",
    "equals",
    "color",
    "going",
    "get",
    "first",
    "element",
    "well",
    "technically",
    "second",
    "element",
    "element",
    "position",
    "one",
    "one",
    "zero",
    "index",
    "zero",
    "going",
    "basically",
    "extract",
    "hexadecimal",
    "value",
    "let",
    "print",
    "sure",
    "working",
    "fine",
    "print",
    "color",
    "hex",
    "let",
    "try",
    "select",
    "different",
    "color",
    "uh",
    "maybe",
    "want",
    "purple",
    "color",
    "click",
    "ok",
    "cb42ff",
    "cb42ff",
    "let",
    "change",
    "background",
    "color",
    "since",
    "hex",
    "value",
    "actually",
    "fairly",
    "simple",
    "going",
    "take",
    "window",
    "dot",
    "config",
    "bg",
    "background",
    "color",
    "equals",
    "color",
    "hex",
    "change",
    "background",
    "color",
    "let",
    "set",
    "sky",
    "blue",
    "color",
    "maybe",
    "like",
    "click",
    "ok",
    "changes",
    "color",
    "however",
    "really",
    "necessary",
    "continue",
    "printing",
    "values",
    "take",
    "want",
    "would",
    "work",
    "like",
    "part",
    "necessary",
    "want",
    "condense",
    "three",
    "lines",
    "code",
    "click",
    "function",
    "less",
    "lines",
    "code",
    "could",
    "instead",
    "assigning",
    "value",
    "color",
    "index",
    "1",
    "separate",
    "variable",
    "take",
    "color",
    "index",
    "1",
    "get",
    "rid",
    "line",
    "assign",
    "bg",
    "equals",
    "color",
    "index",
    "one",
    "done",
    "two",
    "lines",
    "code",
    "stop",
    "write",
    "one",
    "line",
    "code",
    "going",
    "take",
    "color",
    "chooser",
    "dot",
    "ask",
    "color",
    "get",
    "rid",
    "line",
    "bg",
    "equals",
    "color",
    "chooser",
    "dot",
    "ask",
    "color",
    "index",
    "one",
    "done",
    "one",
    "line",
    "code",
    "however",
    "would",
    "say",
    "little",
    "difficult",
    "teach",
    "kind",
    "like",
    "separate",
    "line",
    "line",
    "want",
    "condense",
    "one",
    "line",
    "code",
    "ideas",
    "color",
    "chooser",
    "sub",
    "module",
    "could",
    "helpful",
    "course",
    "change",
    "background",
    "color",
    "let",
    "say",
    "creating",
    "game",
    "customize",
    "character",
    "avatar",
    "well",
    "would",
    "kind",
    "nice",
    "could",
    "way",
    "user",
    "actually",
    "change",
    "maybe",
    "character",
    "hair",
    "color",
    "eye",
    "color",
    "something",
    "like",
    "would",
    "actually",
    "work",
    "fairly",
    "well",
    "yeah",
    "basics",
    "color",
    "chooser",
    "like",
    "copy",
    "code",
    "post",
    "comments",
    "basics",
    "color",
    "chooser",
    "python",
    "hey",
    "going",
    "everybody",
    "bro",
    "hope",
    "well",
    "video",
    "going",
    "teach",
    "guys",
    "create",
    "text",
    "area",
    "python",
    "sit",
    "back",
    "relax",
    "enjoy",
    "show",
    "right",
    "fellow",
    "bros",
    "let",
    "discuss",
    "text",
    "widget",
    "functions",
    "like",
    "text",
    "area",
    "enter",
    "multiple",
    "lines",
    "text",
    "sure",
    "called",
    "text",
    "widget",
    "instead",
    "text",
    "area",
    "widget",
    "text",
    "area",
    "would",
    "make",
    "sense",
    "idk",
    "though",
    "let",
    "begin",
    "creating",
    "window",
    "window",
    "equals",
    "tk",
    "followed",
    "loop",
    "create",
    "text",
    "widget",
    "also",
    "known",
    "text",
    "area",
    "let",
    "call",
    "text",
    "text",
    "equals",
    "text",
    "going",
    "add",
    "text",
    "window",
    "need",
    "pack",
    "text",
    "text",
    "dot",
    "pack",
    "text",
    "area",
    "enter",
    "stuff",
    "like",
    "right",
    "good",
    "text",
    "area",
    "ca",
    "actually",
    "submit",
    "text",
    "let",
    "create",
    "button",
    "us",
    "button",
    "equals",
    "button",
    "going",
    "add",
    "button",
    "window",
    "button",
    "dot",
    "pack",
    "need",
    "command",
    "button",
    "function",
    "well",
    "let",
    "create",
    "function",
    "called",
    "submit",
    "going",
    "submit",
    "button",
    "let",
    "change",
    "text",
    "text",
    "equals",
    "submit",
    "cool",
    "let",
    "create",
    "function",
    "called",
    "submit",
    "top",
    "e",
    "f",
    "submit",
    "going",
    "well",
    "going",
    "get",
    "text",
    "text",
    "area",
    "let",
    "assign",
    "variable",
    "call",
    "maybe",
    "input",
    "whatever",
    "want",
    "get",
    "text",
    "text",
    "area",
    "let",
    "say",
    "text",
    "name",
    "text",
    "area",
    "dot",
    "get",
    "need",
    "starting",
    "index",
    "well",
    "ending",
    "index",
    "going",
    "place",
    "beginning",
    "index",
    "first",
    "line",
    "want",
    "get",
    "everything",
    "second",
    "index",
    "put",
    "end",
    "anything",
    "want",
    "input",
    "let",
    "print",
    "console",
    "window",
    "print",
    "input",
    "work",
    "hey",
    "drink",
    "plenty",
    "water",
    "love",
    "click",
    "submit",
    "whatever",
    "want",
    "input",
    "well",
    "text",
    "area",
    "functions",
    "let",
    "customize",
    "appearance",
    "text",
    "area",
    "ideas",
    "might",
    "interested",
    "let",
    "change",
    "background",
    "color",
    "text",
    "area",
    "bg",
    "equals",
    "pick",
    "light",
    "yellow",
    "see",
    "second",
    "text",
    "area",
    "kind",
    "resembles",
    "maybe",
    "piece",
    "paper",
    "notebook",
    "note",
    "however",
    "font",
    "really",
    "small",
    "let",
    "change",
    "font",
    "styling",
    "font",
    "size",
    "font",
    "equals",
    "pick",
    "font",
    "ink",
    "free",
    "somewhat",
    "resembles",
    "handwriting",
    "kind",
    "like",
    "kind",
    "fits",
    "notebook",
    "theme",
    "size",
    "maybe",
    "one",
    "thing",
    "know",
    "text",
    "area",
    "size",
    "corresponds",
    "directly",
    "font",
    "size",
    "25",
    "fairly",
    "large",
    "font",
    "compile",
    "run",
    "size",
    "text",
    "area",
    "massive",
    "corresponds",
    "directly",
    "font",
    "size",
    "might",
    "want",
    "limit",
    "width",
    "height",
    "height",
    "amount",
    "characters",
    "tall",
    "let",
    "say",
    "8",
    "width",
    "amount",
    "characters",
    "long",
    "let",
    "say",
    "much",
    "smaller",
    "kind",
    "resembles",
    "note",
    "kind",
    "cool",
    "let",
    "also",
    "change",
    "amount",
    "padding",
    "pad",
    "x",
    "pad",
    "pad",
    "x",
    "let",
    "say",
    "20",
    "pad",
    "also",
    "text",
    "actually",
    "touch",
    "borders",
    "sample",
    "text",
    "cool",
    "let",
    "finish",
    "changing",
    "font",
    "color",
    "fg",
    "foreground",
    "foreground",
    "equals",
    "pick",
    "purple",
    "purple",
    "pretty",
    "color",
    "let",
    "run",
    "one",
    "last",
    "time",
    "roses",
    "red",
    "violets",
    "blue",
    "booty",
    "booty",
    "booty",
    "booty",
    "rockin",
    "everywhere",
    "well",
    "basics",
    "text",
    "widget",
    "python",
    "would",
    "like",
    "copy",
    "code",
    "post",
    "comments",
    "yeah",
    "basics",
    "text",
    "widget",
    "python",
    "hey",
    "going",
    "everybody",
    "bro",
    "hope",
    "well",
    "video",
    "going",
    "teach",
    "guys",
    "use",
    "file",
    "dialog",
    "python",
    "open",
    "read",
    "contents",
    "file",
    "sit",
    "back",
    "relax",
    "enjoy",
    "show",
    "okay",
    "people",
    "use",
    "file",
    "dialog",
    "open",
    "read",
    "contents",
    "file",
    "first",
    "need",
    "second",
    "import",
    "along",
    "import",
    "top",
    "going",
    "importing",
    "tk",
    "enter",
    "import",
    "file",
    "dialog",
    "need",
    "window",
    "like",
    "usually",
    "window",
    "equals",
    "tk",
    "followed",
    "window",
    "dot",
    "main",
    "loop",
    "need",
    "button",
    "going",
    "add",
    "window",
    "click",
    "button",
    "going",
    "launch",
    "file",
    "dialog",
    "select",
    "file",
    "call",
    "button",
    "button",
    "equals",
    "button",
    "let",
    "set",
    "text",
    "maybe",
    "open",
    "like",
    "opening",
    "file",
    "associate",
    "function",
    "command",
    "button",
    "let",
    "create",
    "function",
    "called",
    "open",
    "file",
    "fine",
    "need",
    "pack",
    "button",
    "add",
    "screen",
    "need",
    "create",
    "function",
    "called",
    "open",
    "file",
    "create",
    "window",
    "let",
    "type",
    "def",
    "open",
    "file",
    "call",
    "function",
    "going",
    "take",
    "file",
    "dialog",
    "use",
    "ask",
    "open",
    "file",
    "name",
    "function",
    "going",
    "return",
    "string",
    "string",
    "file",
    "path",
    "file",
    "located",
    "could",
    "store",
    "within",
    "variable",
    "let",
    "store",
    "within",
    "variable",
    "called",
    "file",
    "path",
    "test",
    "let",
    "print",
    "take",
    "look",
    "contents",
    "variable",
    "let",
    "print",
    "file",
    "path",
    "file",
    "desktop",
    "want",
    "use",
    "called",
    "test",
    "file",
    "let",
    "click",
    "open",
    "button",
    "might",
    "necessarily",
    "bring",
    "desktop",
    "might",
    "bring",
    "someplace",
    "else",
    "within",
    "file",
    "directory",
    "happens",
    "bring",
    "desktop",
    "going",
    "click",
    "test",
    "file",
    "click",
    "open",
    "prints",
    "file",
    "path",
    "going",
    "return",
    "string",
    "file",
    "path",
    "basically",
    "want",
    "open",
    "read",
    "contents",
    "file",
    "really",
    "need",
    "print",
    "line",
    "anymore",
    "create",
    "file",
    "variable",
    "going",
    "use",
    "open",
    "going",
    "list",
    "file",
    "path",
    "going",
    "use",
    "r",
    "read",
    "default",
    "normally",
    "rt",
    "read",
    "text",
    "otherwise",
    "read",
    "binary",
    "uh",
    "set",
    "r",
    "r",
    "rt",
    "basically",
    "uh",
    "going",
    "open",
    "file",
    "going",
    "read",
    "let",
    "print",
    "console",
    "window",
    "print",
    "name",
    "file",
    "file",
    "located",
    "file",
    "dot",
    "read",
    "function",
    "good",
    "idea",
    "close",
    "files",
    "done",
    "file",
    "dot",
    "close",
    "let",
    "test",
    "going",
    "click",
    "open",
    "find",
    "file",
    "want",
    "click",
    "open",
    "text",
    "file",
    "says",
    "name",
    "bro",
    "like",
    "pizza",
    "let",
    "say",
    "want",
    "make",
    "little",
    "advanced",
    "going",
    "going",
    "set",
    "initial",
    "directory",
    "begin",
    "looking",
    "file",
    "launch",
    "file",
    "dialog",
    "test",
    "file",
    "going",
    "move",
    "project",
    "folder",
    "going",
    "paste",
    "within",
    "project",
    "folder",
    "going",
    "set",
    "initial",
    "directory",
    "within",
    "function",
    "ask",
    "open",
    "file",
    "name",
    "going",
    "set",
    "initial",
    "r",
    "initial",
    "directory",
    "list",
    "file",
    "path",
    "one",
    "thing",
    "could",
    "want",
    "get",
    "path",
    "file",
    "path",
    "using",
    "pycharm",
    "could",
    "right",
    "click",
    "copy",
    "path",
    "get",
    "absolute",
    "path",
    "going",
    "paste",
    "uh",
    "backslashes",
    "double",
    "backslashes",
    "escape",
    "character",
    "backslash",
    "alright",
    "open",
    "project",
    "folder",
    "test",
    "file",
    "another",
    "thing",
    "could",
    "change",
    "title",
    "file",
    "dialog",
    "right",
    "default",
    "open",
    "change",
    "something",
    "else",
    "going",
    "add",
    "comma",
    "maybe",
    "put",
    "different",
    "line",
    "uh",
    "still",
    "within",
    "function",
    "ask",
    "open",
    "file",
    "name",
    "going",
    "set",
    "title",
    "something",
    "else",
    "say",
    "open",
    "file",
    "okay",
    "run",
    "instead",
    "saying",
    "open",
    "says",
    "open",
    "file",
    "okay",
    "also",
    "limit",
    "file",
    "types",
    "accept",
    "look",
    "use",
    "file",
    "types",
    "let",
    "say",
    "want",
    "initially",
    "look",
    "txt",
    "file",
    "type",
    "like",
    "name",
    "file",
    "looking",
    "going",
    "appear",
    "user",
    "uh",
    "text",
    "files",
    "followed",
    "extension",
    "want",
    "asterisk",
    "dot",
    "txt",
    "also",
    "option",
    "files",
    "going",
    "add",
    "comma",
    "second",
    "option",
    "let",
    "say",
    "files",
    "extension",
    "comma",
    "asterisk",
    "dot",
    "asterisk",
    "look",
    "files",
    "uh",
    "think",
    "missing",
    "parenthesis",
    "good",
    "open",
    "file",
    "dialog",
    "going",
    "initially",
    "looking",
    "plain",
    "text",
    "files",
    "drop",
    "menu",
    "says",
    "text",
    "files",
    "files",
    "listed",
    "within",
    "file",
    "types",
    "want",
    "search",
    "see",
    "switch",
    "files",
    "python",
    "file",
    "actually",
    "appears",
    "limits",
    "files",
    "trying",
    "open",
    "search",
    "change",
    "back",
    "text",
    "files",
    "folders",
    "plain",
    "text",
    "files",
    "visible",
    "open",
    "test",
    "file",
    "yeah",
    "basics",
    "file",
    "dialog",
    "next",
    "video",
    "going",
    "saving",
    "file",
    "like",
    "copy",
    "code",
    "post",
    "comments",
    "yeah",
    "basics",
    "opening",
    "file",
    "using",
    "python",
    "hey",
    "going",
    "everybody",
    "bro",
    "hope",
    "well",
    "video",
    "going",
    "teach",
    "guys",
    "use",
    "python",
    "file",
    "dialog",
    "save",
    "file",
    "someplace",
    "computer",
    "sit",
    "back",
    "relax",
    "enjoy",
    "show",
    "okay",
    "everybody",
    "save",
    "file",
    "going",
    "reusing",
    "file",
    "dialog",
    "kind",
    "like",
    "video",
    "opening",
    "reading",
    "file",
    "tk",
    "enter",
    "import",
    "file",
    "dialog",
    "going",
    "creating",
    "window",
    "adding",
    "button",
    "well",
    "text",
    "area",
    "window",
    "let",
    "create",
    "window",
    "window",
    "equals",
    "tk",
    "followed",
    "loop",
    "let",
    "create",
    "button",
    "button",
    "equals",
    "button",
    "let",
    "set",
    "text",
    "button",
    "text",
    "equals",
    "save",
    "going",
    "save",
    "button",
    "command",
    "need",
    "link",
    "function",
    "command",
    "let",
    "create",
    "save",
    "file",
    "function",
    "need",
    "pack",
    "button",
    "button",
    "dot",
    "pack",
    "let",
    "create",
    "text",
    "area",
    "called",
    "text",
    "text",
    "equals",
    "text",
    "going",
    "add",
    "window",
    "need",
    "pack",
    "text",
    "text",
    "dot",
    "pack",
    "let",
    "create",
    "save",
    "file",
    "function",
    "top",
    "program",
    "e",
    "f",
    "save",
    "file",
    "going",
    "take",
    "file",
    "dialog",
    "use",
    "ask",
    "save",
    "file",
    "function",
    "going",
    "store",
    "contents",
    "within",
    "file",
    "file",
    "equals",
    "file",
    "dialog",
    "dot",
    "ask",
    "save",
    "file",
    "let",
    "run",
    "test",
    "window",
    "save",
    "button",
    "text",
    "area",
    "type",
    "multiple",
    "lines",
    "text",
    "yay",
    "let",
    "try",
    "save",
    "see",
    "far",
    "bring",
    "desktop",
    "might",
    "bring",
    "someplace",
    "else",
    "computer",
    "going",
    "save",
    "test",
    "file",
    "drop",
    "menu",
    "save",
    "type",
    "nothing",
    "set",
    "need",
    "manually",
    "uh",
    "save",
    "test",
    "file",
    "desktop",
    "let",
    "take",
    "look",
    "properties",
    "list",
    "file",
    "extension",
    "type",
    "file",
    "says",
    "file",
    "get",
    "later",
    "video",
    "open",
    "program",
    "like",
    "notepad",
    "well",
    "currently",
    "empty",
    "need",
    "write",
    "text",
    "file",
    "let",
    "next",
    "let",
    "store",
    "text",
    "text",
    "area",
    "variable",
    "let",
    "call",
    "variable",
    "file",
    "text",
    "file",
    "text",
    "equals",
    "need",
    "get",
    "text",
    "text",
    "area",
    "text",
    "dot",
    "get",
    "going",
    "list",
    "starting",
    "index",
    "well",
    "ending",
    "index",
    "function",
    "going",
    "begin",
    "beginning",
    "text",
    "area",
    "ending",
    "put",
    "end",
    "need",
    "convert",
    "string",
    "let",
    "surround",
    "str",
    "store",
    "text",
    "text",
    "area",
    "within",
    "variable",
    "file",
    "text",
    "need",
    "write",
    "text",
    "file",
    "file",
    "dot",
    "write",
    "going",
    "pass",
    "file",
    "text",
    "good",
    "idea",
    "close",
    "files",
    "done",
    "using",
    "file",
    "dot",
    "close",
    "let",
    "try",
    "hello",
    "name",
    "bro",
    "let",
    "save",
    "call",
    "hello",
    "click",
    "save",
    "still",
    "ca",
    "save",
    "work",
    "next",
    "let",
    "go",
    "desktop",
    "test",
    "file",
    "created",
    "going",
    "open",
    "notepad",
    "text",
    "added",
    "text",
    "area",
    "let",
    "list",
    "available",
    "file",
    "extensions",
    "user",
    "save",
    "file",
    "let",
    "begin",
    "setting",
    "default",
    "extension",
    "default",
    "extension",
    "let",
    "set",
    "text",
    "file",
    "dot",
    "txt",
    "list",
    "available",
    "file",
    "types",
    "file",
    "types",
    "going",
    "place",
    "within",
    "set",
    "straight",
    "brackets",
    "separate",
    "line",
    "line",
    "let",
    "begin",
    "plain",
    "text",
    "file",
    "take",
    "two",
    "strings",
    "first",
    "message",
    "appear",
    "within",
    "save",
    "type",
    "drop",
    "menu",
    "let",
    "place",
    "text",
    "file",
    "second",
    "string",
    "file",
    "extension",
    "dot",
    "txt",
    "let",
    "add",
    "another",
    "let",
    "say",
    "html",
    "going",
    "copy",
    "paste",
    "let",
    "say",
    "html",
    "next",
    "dot",
    "html",
    "lastly",
    "files",
    "files",
    "dot",
    "asterisk",
    "let",
    "try",
    "hello",
    "name",
    "bro",
    "like",
    "pizza",
    "ice",
    "cream",
    "time",
    "think",
    "save",
    "html",
    "file",
    "call",
    "pizza",
    "ice",
    "cream",
    "guess",
    "click",
    "save",
    "let",
    "go",
    "back",
    "desktop",
    "file",
    "pizza",
    "ice",
    "cream",
    "file",
    "let",
    "verify",
    "type",
    "file",
    "open",
    "notepad",
    "text",
    "could",
    "even",
    "open",
    "sublime",
    "text",
    "well",
    "kind",
    "like",
    "right",
    "let",
    "change",
    "initial",
    "directory",
    "saving",
    "file",
    "let",
    "change",
    "project",
    "folder",
    "uh",
    "python",
    "file",
    "going",
    "organize",
    "little",
    "bit",
    "initial",
    "r",
    "equals",
    "list",
    "file",
    "path",
    "going",
    "copy",
    "copy",
    "path",
    "paste",
    "want",
    "make",
    "sure",
    "double",
    "backslashes",
    "need",
    "add",
    "comma",
    "end",
    "okay",
    "let",
    "try",
    "testing",
    "one",
    "two",
    "three",
    "go",
    "project",
    "folder",
    "testing123",
    "let",
    "save",
    "plain",
    "text",
    "file",
    "click",
    "save",
    "plain",
    "text",
    "file",
    "testing123",
    "another",
    "option",
    "available",
    "necessarily",
    "need",
    "use",
    "text",
    "area",
    "get",
    "text",
    "write",
    "file",
    "could",
    "use",
    "console",
    "window",
    "accept",
    "text",
    "demonstrate",
    "going",
    "turn",
    "line",
    "comment",
    "instead",
    "going",
    "use",
    "console",
    "window",
    "time",
    "say",
    "file",
    "text",
    "equals",
    "input",
    "let",
    "prompt",
    "enter",
    "text",
    "guess",
    "let",
    "run",
    "still",
    "need",
    "click",
    "save",
    "button",
    "select",
    "file",
    "location",
    "save",
    "file",
    "testing123",
    "click",
    "save",
    "yeah",
    "replace",
    "alright",
    "need",
    "enter",
    "text",
    "guess",
    "write",
    "message",
    "cake",
    "lie",
    "hit",
    "enter",
    "file",
    "testing123",
    "says",
    "cake",
    "lie",
    "necessarily",
    "need",
    "use",
    "get",
    "function",
    "text",
    "area",
    "use",
    "console",
    "window",
    "well",
    "one",
    "last",
    "thing",
    "consider",
    "go",
    "begin",
    "process",
    "finding",
    "file",
    "location",
    "save",
    "file",
    "exit",
    "window",
    "well",
    "going",
    "encounter",
    "exception",
    "one",
    "way",
    "prevent",
    "add",
    "line",
    "file",
    "none",
    "return",
    "try",
    "begin",
    "saving",
    "file",
    "exit",
    "exception",
    "encounter",
    "one",
    "little",
    "extra",
    "thought",
    "would",
    "throw",
    "yeah",
    "basics",
    "saving",
    "files",
    "python",
    "would",
    "like",
    "copy",
    "code",
    "post",
    "comments",
    "yeah",
    "save",
    "file",
    "using",
    "python",
    "hey",
    "going",
    "everybody",
    "bro",
    "hope",
    "well",
    "video",
    "going",
    "teach",
    "guys",
    "create",
    "menu",
    "bar",
    "python",
    "sit",
    "back",
    "relax",
    "enjoy",
    "show",
    "right",
    "people",
    "let",
    "create",
    "menu",
    "bar",
    "different",
    "menu",
    "bar",
    "see",
    "top",
    "many",
    "programs",
    "usually",
    "tab",
    "file",
    "edit",
    "view",
    "help",
    "stuff",
    "like",
    "except",
    "going",
    "create",
    "one",
    "many",
    "options",
    "features",
    "going",
    "generic",
    "brand",
    "menu",
    "bar",
    "like",
    "walmart",
    "variety",
    "let",
    "begin",
    "creating",
    "window",
    "window",
    "equals",
    "tk",
    "followed",
    "going",
    "create",
    "menu",
    "bar",
    "add",
    "menus",
    "menu",
    "bar",
    "menu",
    "going",
    "function",
    "like",
    "dropdown",
    "menu",
    "hover",
    "one",
    "tabs",
    "drop",
    "need",
    "menu",
    "bar",
    "let",
    "call",
    "menu",
    "bar",
    "menu",
    "bar",
    "equals",
    "menu",
    "adding",
    "window",
    "going",
    "take",
    "window",
    "dot",
    "config",
    "set",
    "menu",
    "window",
    "equal",
    "menu",
    "bar",
    "created",
    "tabs",
    "menu",
    "bar",
    "need",
    "create",
    "separate",
    "menu",
    "add",
    "menu",
    "menu",
    "bar",
    "menu",
    "bar",
    "added",
    "window",
    "different",
    "levels",
    "stuff",
    "let",
    "create",
    "file",
    "menu",
    "well",
    "one",
    "file",
    "menu",
    "program",
    "file",
    "menu",
    "equals",
    "menu",
    "kind",
    "like",
    "menu",
    "bar",
    "except",
    "instead",
    "adding",
    "window",
    "going",
    "add",
    "menu",
    "bar",
    "menu",
    "bar",
    "like",
    "one",
    "step",
    "two",
    "need",
    "use",
    "function",
    "menu",
    "bar",
    "dot",
    "add",
    "underscore",
    "cascade",
    "drop",
    "menu",
    "sort",
    "effect",
    "let",
    "create",
    "label",
    "called",
    "file",
    "mimic",
    "file",
    "tab",
    "see",
    "top",
    "many",
    "programs",
    "label",
    "file",
    "going",
    "set",
    "menu",
    "equal",
    "file",
    "menu",
    "created",
    "file",
    "menu",
    "let",
    "take",
    "look",
    "see",
    "menu",
    "bar",
    "menu",
    "drop",
    "effect",
    "need",
    "add",
    "actual",
    "options",
    "file",
    "menu",
    "let",
    "let",
    "begin",
    "creating",
    "let",
    "see",
    "got",
    "maybe",
    "open",
    "save",
    "exit",
    "good",
    "file",
    "menu",
    "dot",
    "add",
    "underscore",
    "command",
    "clickable",
    "option",
    "let",
    "create",
    "label",
    "called",
    "open",
    "open",
    "file",
    "maybe",
    "two",
    "got",
    "open",
    "save",
    "exit",
    "open",
    "save",
    "exit",
    "let",
    "take",
    "look",
    "drop",
    "menu",
    "open",
    "save",
    "exit",
    "might",
    "notice",
    "annoying",
    "line",
    "called",
    "tear",
    "actually",
    "get",
    "rid",
    "want",
    "create",
    "file",
    "menu",
    "going",
    "set",
    "tear",
    "equal",
    "zero",
    "get",
    "rid",
    "gone",
    "sometimes",
    "might",
    "see",
    "line",
    "separate",
    "sections",
    "well",
    "separator",
    "let",
    "separate",
    "exit",
    "command",
    "open",
    "save",
    "add",
    "separator",
    "type",
    "name",
    "menu",
    "file",
    "menu",
    "dot",
    "add",
    "separator",
    "separate",
    "different",
    "commands",
    "within",
    "menu",
    "see",
    "line",
    "save",
    "exit",
    "placed",
    "separator",
    "want",
    "file",
    "commands",
    "actually",
    "something",
    "need",
    "associate",
    "command",
    "commands",
    "command",
    "within",
    "command",
    "command",
    "equals",
    "open",
    "file",
    "command",
    "create",
    "function",
    "called",
    "open",
    "file",
    "need",
    "declare",
    "function",
    "let",
    "create",
    "command",
    "called",
    "save",
    "file",
    "another",
    "called",
    "exit",
    "actually",
    "one",
    "shortcut",
    "want",
    "exit",
    "something",
    "say",
    "quit",
    "right",
    "let",
    "create",
    "open",
    "file",
    "save",
    "file",
    "function",
    "def",
    "open",
    "file",
    "let",
    "print",
    "something",
    "keep",
    "simple",
    "already",
    "another",
    "video",
    "opening",
    "files",
    "print",
    "file",
    "opened",
    "let",
    "thing",
    "save",
    "file",
    "file",
    "saved",
    "last",
    "command",
    "exit",
    "quit",
    "let",
    "try",
    "let",
    "go",
    "file",
    "drop",
    "menu",
    "open",
    "file",
    "file",
    "opened",
    "save",
    "file",
    "exit",
    "exit",
    "close",
    "window",
    "let",
    "create",
    "second",
    "menu",
    "called",
    "edit",
    "mimic",
    "one",
    "top",
    "ide",
    "let",
    "create",
    "edit",
    "menu",
    "process",
    "file",
    "menu",
    "let",
    "call",
    "edit",
    "menu",
    "equals",
    "menu",
    "adding",
    "menu",
    "bar",
    "want",
    "tear",
    "tear",
    "equals",
    "zero",
    "next",
    "line",
    "need",
    "add",
    "cascade",
    "going",
    "copy",
    "menu",
    "bar",
    "dot",
    "add",
    "cascade",
    "label",
    "name",
    "edit",
    "file",
    "mean",
    "menu",
    "edit",
    "menu",
    "setting",
    "menu",
    "adding",
    "edit",
    "menu",
    "let",
    "try",
    "file",
    "edit",
    "need",
    "add",
    "commands",
    "edit",
    "menu",
    "process",
    "file",
    "menu",
    "going",
    "copy",
    "change",
    "file",
    "edit",
    "let",
    "make",
    "command",
    "called",
    "cut",
    "copy",
    "paste",
    "label",
    "cut",
    "create",
    "command",
    "called",
    "cut",
    "copy",
    "create",
    "another",
    "command",
    "called",
    "copy",
    "paste",
    "right",
    "need",
    "create",
    "functions",
    "cut",
    "copy",
    "paste",
    "let",
    "top",
    "cut",
    "cut",
    "text",
    "cut",
    "copy",
    "paste",
    "copied",
    "text",
    "paste",
    "pasted",
    "text",
    "right",
    "let",
    "try",
    "edit",
    "menu",
    "drop",
    "cut",
    "copy",
    "paste",
    "actually",
    "going",
    "call",
    "function",
    "something",
    "like",
    "want",
    "set",
    "maybe",
    "video",
    "different",
    "day",
    "let",
    "customize",
    "menus",
    "well",
    "let",
    "begin",
    "changing",
    "font",
    "type",
    "within",
    "menus",
    "font",
    "equals",
    "pick",
    "font",
    "want",
    "size",
    "going",
    "add",
    "font",
    "menus",
    "hover",
    "click",
    "menus",
    "see",
    "font",
    "changed",
    "guys",
    "know",
    "actually",
    "add",
    "images",
    "next",
    "commands",
    "well",
    "first",
    "need",
    "images",
    "using",
    "add",
    "project",
    "folder",
    "plan",
    "using",
    "floppy",
    "disk",
    "save",
    "open",
    "folder",
    "open",
    "reason",
    "stop",
    "sign",
    "exit",
    "could",
    "really",
    "think",
    "anything",
    "moment",
    "guess",
    "arrow",
    "would",
    "worked",
    "guess",
    "let",
    "create",
    "photo",
    "images",
    "images",
    "already",
    "going",
    "copy",
    "paste",
    "text",
    "create",
    "unique",
    "name",
    "image",
    "open",
    "image",
    "save",
    "image",
    "exit",
    "image",
    "photo",
    "images",
    "file",
    "path",
    "file",
    "name",
    "pictures",
    "using",
    "add",
    "image",
    "commands",
    "add",
    "command",
    "say",
    "image",
    "photo",
    "image",
    "want",
    "use",
    "open",
    "command",
    "going",
    "use",
    "open",
    "image",
    "photo",
    "image",
    "open",
    "folder",
    "going",
    "thing",
    "save",
    "exit",
    "save",
    "image",
    "exit",
    "image",
    "run",
    "compile",
    "let",
    "take",
    "look",
    "yeah",
    "text",
    "gone",
    "going",
    "problem",
    "need",
    "compound",
    "views",
    "compound",
    "add",
    "image",
    "certain",
    "side",
    "text",
    "keep",
    "text",
    "compound",
    "let",
    "say",
    "want",
    "image",
    "left",
    "compound",
    "left",
    "going",
    "add",
    "commands",
    "image",
    "well",
    "text",
    "well",
    "basics",
    "creating",
    "menu",
    "bar",
    "python",
    "want",
    "copy",
    "code",
    "post",
    "comments",
    "yeah",
    "create",
    "simple",
    "menu",
    "bar",
    "python",
    "going",
    "everybody",
    "bro",
    "hope",
    "well",
    "video",
    "going",
    "teach",
    "guys",
    "frames",
    "work",
    "python",
    "sit",
    "back",
    "relax",
    "enjoy",
    "show",
    "going",
    "people",
    "going",
    "discussing",
    "frames",
    "today",
    "frame",
    "really",
    "rectangular",
    "container",
    "group",
    "hold",
    "widgets",
    "together",
    "going",
    "practice",
    "using",
    "frames",
    "today",
    "first",
    "need",
    "window",
    "going",
    "create",
    "frame",
    "add",
    "frame",
    "window",
    "window",
    "equals",
    "tk",
    "followed",
    "loop",
    "well",
    "going",
    "need",
    "widgets",
    "add",
    "frame",
    "let",
    "create",
    "bunch",
    "buttons",
    "going",
    "show",
    "guys",
    "shortcut",
    "let",
    "say",
    "button",
    "equals",
    "button",
    "going",
    "add",
    "window",
    "going",
    "replace",
    "eventually",
    "frame",
    "create",
    "going",
    "set",
    "text",
    "equal",
    "let",
    "say",
    "w",
    "going",
    "four",
    "different",
    "buttons",
    "wasd",
    "like",
    "buttons",
    "keyboard",
    "playing",
    "game",
    "want",
    "move",
    "forward",
    "left",
    "back",
    "right",
    "adding",
    "window",
    "let",
    "set",
    "text",
    "w",
    "else",
    "uh",
    "let",
    "change",
    "font",
    "font",
    "equals",
    "pick",
    "font",
    "consoles",
    "tends",
    "even",
    "uh",
    "buttons",
    "size",
    "button",
    "adjusts",
    "uh",
    "size",
    "uh",
    "letter",
    "using",
    "size",
    "text",
    "uh",
    "let",
    "set",
    "25",
    "width",
    "maybe",
    "width",
    "equals",
    "three",
    "right",
    "want",
    "take",
    "look",
    "button",
    "w",
    "like",
    "show",
    "guys",
    "shortcut",
    "plan",
    "using",
    "button",
    "name",
    "really",
    "need",
    "give",
    "name",
    "say",
    "button",
    "uh",
    "options",
    "instead",
    "add",
    "dot",
    "pack",
    "end",
    "thing",
    "however",
    "ca",
    "adjust",
    "button",
    "name",
    "though",
    "name",
    "anymore",
    "let",
    "create",
    "buttons",
    "one",
    "w",
    "default",
    "top",
    "center",
    "pack",
    "actually",
    "put",
    "certain",
    "side",
    "let",
    "say",
    "want",
    "uh",
    "w",
    "top",
    "three",
    "left",
    "side",
    "equals",
    "left",
    "show",
    "see",
    "benefits",
    "using",
    "frame",
    "right",
    "right",
    "least",
    "appears",
    "within",
    "container",
    "expand",
    "well",
    "w",
    "drifting",
    "sailing",
    "away",
    "w",
    "could",
    "put",
    "within",
    "frame",
    "container",
    "actually",
    "contain",
    "widgets",
    "well",
    "let",
    "create",
    "frame",
    "frame",
    "equals",
    "frame",
    "instead",
    "adding",
    "buttons",
    "window",
    "going",
    "add",
    "buttons",
    "frame",
    "need",
    "add",
    "frame",
    "window",
    "looks",
    "like",
    "however",
    "need",
    "actually",
    "add",
    "using",
    "pack",
    "place",
    "frame",
    "dot",
    "pack",
    "looks",
    "like",
    "buttons",
    "widgets",
    "contained",
    "within",
    "frame",
    "container",
    "let",
    "change",
    "background",
    "color",
    "frame",
    "see",
    "width",
    "height",
    "frame",
    "create",
    "frame",
    "option",
    "background",
    "color",
    "bg",
    "let",
    "set",
    "color",
    "done",
    "pink",
    "yet",
    "pink",
    "masculine",
    "color",
    "background",
    "frame",
    "pink",
    "might",
    "better",
    "visual",
    "cue",
    "balance",
    "frame",
    "let",
    "also",
    "give",
    "frame",
    "border",
    "let",
    "set",
    "width",
    "5",
    "using",
    "bd",
    "type",
    "border",
    "want",
    "specify",
    "relief",
    "relief",
    "equals",
    "let",
    "say",
    "raised",
    "3d",
    "pop",
    "effect",
    "kind",
    "like",
    "let",
    "try",
    "sunken",
    "ones",
    "well",
    "feel",
    "like",
    "necessary",
    "go",
    "border",
    "types",
    "let",
    "stick",
    "sunken",
    "work",
    "alright",
    "frame",
    "currently",
    "packing",
    "set",
    "certain",
    "side",
    "within",
    "window",
    "currently",
    "top",
    "let",
    "set",
    "maybe",
    "bottom",
    "side",
    "equals",
    "bottom",
    "frame",
    "sticking",
    "bottom",
    "window",
    "still",
    "contains",
    "buttons",
    "widgets",
    "added",
    "another",
    "function",
    "available",
    "place",
    "function",
    "place",
    "frame",
    "certain",
    "coordinates",
    "within",
    "window",
    "let",
    "set",
    "x",
    "equal",
    "zero",
    "equal",
    "zero",
    "place",
    "frame",
    "within",
    "window",
    "set",
    "coordinates",
    "entire",
    "frame",
    "going",
    "stick",
    "coordinates",
    "even",
    "resize",
    "window",
    "change",
    "let",
    "say",
    "x",
    "100",
    "also",
    "100",
    "frame",
    "along",
    "components",
    "widgets",
    "contains",
    "sticking",
    "within",
    "container",
    "move",
    "along",
    "basics",
    "frames",
    "really",
    "rectangular",
    "container",
    "group",
    "hold",
    "widgets",
    "together",
    "want",
    "copy",
    "code",
    "post",
    "comments",
    "well",
    "yeah",
    "frames",
    "work",
    "python",
    "hey",
    "going",
    "everybody",
    "bro",
    "hope",
    "well",
    "video",
    "going",
    "teach",
    "guys",
    "different",
    "ways",
    "create",
    "new",
    "windows",
    "using",
    "python",
    "sit",
    "back",
    "relax",
    "enjoy",
    "show",
    "let",
    "get",
    "started",
    "everybody",
    "going",
    "create",
    "window",
    "add",
    "button",
    "window",
    "click",
    "button",
    "create",
    "new",
    "separate",
    "window",
    "us",
    "window",
    "equals",
    "tk",
    "followed",
    "loop",
    "need",
    "add",
    "button",
    "let",
    "button",
    "adding",
    "window",
    "let",
    "add",
    "text",
    "button",
    "let",
    "say",
    "create",
    "new",
    "window",
    "set",
    "command",
    "command",
    "equals",
    "need",
    "define",
    "function",
    "let",
    "create",
    "function",
    "called",
    "create",
    "underscore",
    "window",
    "let",
    "pack",
    "well",
    "define",
    "function",
    "create",
    "window",
    "let",
    "top",
    "def",
    "create",
    "window",
    "want",
    "well",
    "going",
    "create",
    "new",
    "window",
    "let",
    "call",
    "next",
    "window",
    "new",
    "underscore",
    "window",
    "equals",
    "two",
    "popular",
    "ways",
    "creating",
    "window",
    "one",
    "use",
    "tk",
    "use",
    "something",
    "called",
    "top",
    "level",
    "let",
    "explain",
    "difference",
    "two",
    "definition",
    "top",
    "level",
    "window",
    "new",
    "window",
    "top",
    "windows",
    "usually",
    "linked",
    "bottom",
    "window",
    "main",
    "window",
    "serving",
    "bottom",
    "window",
    "new",
    "window",
    "serving",
    "top",
    "window",
    "top",
    "level",
    "window",
    "let",
    "try",
    "experiment",
    "main",
    "window",
    "bottom",
    "window",
    "click",
    "button",
    "going",
    "create",
    "new",
    "window",
    "us",
    "new",
    "top",
    "level",
    "window",
    "close",
    "bottom",
    "level",
    "window",
    "top",
    "level",
    "windows",
    "associated",
    "would",
    "also",
    "close",
    "kind",
    "like",
    "saw",
    "however",
    "case",
    "way",
    "around",
    "bottom",
    "window",
    "top",
    "level",
    "window",
    "close",
    "top",
    "level",
    "window",
    "bottom",
    "level",
    "window",
    "fine",
    "close",
    "think",
    "like",
    "jenga",
    "pieces",
    "pull",
    "one",
    "pieces",
    "one",
    "windows",
    "underneath",
    "bottom",
    "pieces",
    "windows",
    "top",
    "close",
    "well",
    "collapse",
    "kind",
    "like",
    "game",
    "jenga",
    "one",
    "way",
    "think",
    "top",
    "level",
    "windows",
    "stacked",
    "top",
    "bottom",
    "level",
    "windows",
    "remove",
    "bottom",
    "piece",
    "removes",
    "top",
    "flip",
    "side",
    "tk",
    "new",
    "independent",
    "window",
    "actually",
    "since",
    "day",
    "one",
    "gui",
    "programming",
    "tk",
    "new",
    "independent",
    "window",
    "main",
    "window",
    "new",
    "window",
    "create",
    "linked",
    "whatsoever",
    "completely",
    "independent",
    "create",
    "new",
    "window",
    "new",
    "window",
    "close",
    "old",
    "window",
    "well",
    "new",
    "window",
    "still",
    "persists",
    "could",
    "useful",
    "let",
    "say",
    "login",
    "form",
    "login",
    "screen",
    "log",
    "brought",
    "main",
    "program",
    "could",
    "within",
    "new",
    "window",
    "one",
    "thing",
    "also",
    "destroy",
    "old",
    "window",
    "creating",
    "new",
    "window",
    "need",
    "type",
    "name",
    "window",
    "want",
    "destroy",
    "actually",
    "let",
    "call",
    "main",
    "window",
    "old",
    "underscore",
    "window",
    "clarify",
    "things",
    "let",
    "rename",
    "well",
    "want",
    "destroy",
    "old",
    "window",
    "closing",
    "type",
    "name",
    "window",
    "old",
    "underscore",
    "window",
    "use",
    "destroy",
    "function",
    "sounds",
    "pretty",
    "sweet",
    "going",
    "destroy",
    "old",
    "window",
    "creating",
    "new",
    "window",
    "let",
    "add",
    "comment",
    "close",
    "old",
    "window",
    "let",
    "test",
    "old",
    "window",
    "main",
    "window",
    "create",
    "new",
    "window",
    "creates",
    "new",
    "window",
    "closes",
    "old",
    "window",
    "one",
    "ways",
    "create",
    "new",
    "window",
    "program",
    "want",
    "copy",
    "code",
    "post",
    "comments",
    "yeah",
    "create",
    "new",
    "window",
    "using",
    "python",
    "hey",
    "going",
    "everybody",
    "bro",
    "hope",
    "well",
    "video",
    "going",
    "teach",
    "guys",
    "create",
    "separate",
    "tabs",
    "gui",
    "applications",
    "python",
    "sit",
    "back",
    "relax",
    "enjoy",
    "show",
    "okay",
    "let",
    "begin",
    "order",
    "create",
    "tabs",
    "python",
    "gui",
    "application",
    "going",
    "need",
    "access",
    "widget",
    "called",
    "notebook",
    "found",
    "different",
    "module",
    "time",
    "going",
    "need",
    "two",
    "imports",
    "top",
    "tk",
    "enter",
    "import",
    "everything",
    "notebook",
    "widget",
    "found",
    "within",
    "separate",
    "module",
    "need",
    "second",
    "import",
    "tk",
    "enter",
    "import",
    "ttk",
    "ttk",
    "import",
    "gives",
    "us",
    "access",
    "several",
    "different",
    "widgets",
    "normally",
    "available",
    "us",
    "two",
    "imports",
    "ready",
    "begin",
    "need",
    "window",
    "window",
    "equals",
    "tk",
    "followed",
    "loop",
    "need",
    "create",
    "notebook",
    "widget",
    "right",
    "create",
    "window",
    "going",
    "create",
    "notebook",
    "call",
    "notebook",
    "equals",
    "ttk",
    "dot",
    "notebook",
    "want",
    "add",
    "notebook",
    "window",
    "let",
    "add",
    "comment",
    "widget",
    "widget",
    "manages",
    "collection",
    "windows",
    "displays",
    "really",
    "order",
    "create",
    "different",
    "tabs",
    "going",
    "create",
    "frames",
    "first",
    "tab",
    "call",
    "tab",
    "1",
    "equals",
    "frame",
    "want",
    "add",
    "notebook",
    "notebook",
    "adding",
    "notebook",
    "window",
    "right",
    "new",
    "frame",
    "tab",
    "one",
    "let",
    "create",
    "second",
    "tab",
    "call",
    "tab",
    "two",
    "create",
    "tabs",
    "want",
    "might",
    "overkill",
    "new",
    "frame",
    "tab",
    "two",
    "finish",
    "two",
    "lines",
    "code",
    "going",
    "follow",
    "widget",
    "adding",
    "adding",
    "tab",
    "1",
    "frame",
    "set",
    "text",
    "tab",
    "text",
    "equals",
    "type",
    "tab",
    "one",
    "repeat",
    "process",
    "tab",
    "two",
    "notebook",
    "dot",
    "add",
    "tab",
    "two",
    "change",
    "text",
    "tab",
    "two",
    "need",
    "pack",
    "notebook",
    "notebook",
    "dot",
    "pack",
    "let",
    "take",
    "look",
    "see",
    "right",
    "tab",
    "one",
    "tab",
    "two",
    "probably",
    "want",
    "actually",
    "add",
    "something",
    "tabs",
    "content",
    "visible",
    "let",
    "create",
    "labels",
    "pack",
    "notebook",
    "let",
    "create",
    "labels",
    "really",
    "feel",
    "like",
    "giving",
    "names",
    "really",
    "plan",
    "using",
    "anything",
    "else",
    "say",
    "label",
    "tab",
    "one",
    "going",
    "parent",
    "widget",
    "let",
    "set",
    "text",
    "text",
    "equals",
    "hello",
    "tab",
    "number",
    "one",
    "think",
    "give",
    "width",
    "height",
    "visible",
    "width",
    "make",
    "50",
    "height",
    "25",
    "roughly",
    "square",
    "shape",
    "need",
    "pack",
    "going",
    "add",
    "pack",
    "let",
    "create",
    "second",
    "label",
    "tab",
    "two",
    "label",
    "tab",
    "two",
    "maybe",
    "say",
    "goodbye",
    "tab",
    "number",
    "two",
    "okay",
    "actual",
    "content",
    "labels",
    "tabs",
    "label",
    "tab",
    "one",
    "tab",
    "two",
    "switch",
    "display",
    "separate",
    "labels",
    "however",
    "way",
    "window",
    "arranged",
    "expand",
    "size",
    "window",
    "well",
    "frames",
    "tabs",
    "kind",
    "stay",
    "top",
    "center",
    "going",
    "add",
    "lines",
    "within",
    "pack",
    "function",
    "notebook",
    "first",
    "thing",
    "going",
    "use",
    "expand",
    "option",
    "set",
    "true",
    "going",
    "add",
    "comment",
    "expand",
    "expand",
    "fill",
    "space",
    "otherwise",
    "used",
    "happens",
    "actually",
    "expand",
    "staying",
    "center",
    "window",
    "one",
    "thing",
    "going",
    "add",
    "fill",
    "equals",
    "normally",
    "x",
    "add",
    "comment",
    "option",
    "fill",
    "fill",
    "space",
    "x",
    "axis",
    "combine",
    "together",
    "get",
    "tabs",
    "stay",
    "top",
    "left",
    "corner",
    "expand",
    "size",
    "window",
    "tabs",
    "going",
    "move",
    "going",
    "stick",
    "top",
    "left",
    "size",
    "window",
    "expand",
    "right",
    "basics",
    "creating",
    "tabs",
    "python",
    "want",
    "copy",
    "code",
    "post",
    "comments",
    "yeah",
    "basics",
    "creating",
    "tabs",
    "python",
    "hey",
    "going",
    "everybody",
    "bro",
    "hope",
    "well",
    "video",
    "going",
    "teach",
    "guys",
    "grid",
    "geometry",
    "manager",
    "python",
    "sit",
    "back",
    "relax",
    "enjoy",
    "show",
    "right",
    "everybody",
    "let",
    "talk",
    "grid",
    "geometry",
    "manager",
    "well",
    "useful",
    "way",
    "organize",
    "widgets",
    "within",
    "container",
    "imagine",
    "windows",
    "arranged",
    "series",
    "rows",
    "columns",
    "similar",
    "excel",
    "spreadsheet",
    "tend",
    "use",
    "example",
    "lot",
    "top",
    "left",
    "cell",
    "row",
    "zero",
    "column",
    "zero",
    "computers",
    "always",
    "begin",
    "zero",
    "grid",
    "begin",
    "row",
    "one",
    "column",
    "one",
    "list",
    "row",
    "column",
    "would",
    "like",
    "widgets",
    "placed",
    "within",
    "default",
    "one",
    "row",
    "one",
    "column",
    "work",
    "start",
    "explicitly",
    "state",
    "row",
    "column",
    "widget",
    "placed",
    "within",
    "relative",
    "container",
    "python",
    "create",
    "new",
    "relative",
    "rows",
    "columns",
    "us",
    "state",
    "widgets",
    "placed",
    "let",
    "create",
    "small",
    "submission",
    "form",
    "organize",
    "widgets",
    "using",
    "new",
    "grid",
    "system",
    "let",
    "begin",
    "creating",
    "window",
    "window",
    "equals",
    "tk",
    "followed",
    "window",
    "need",
    "create",
    "widgets",
    "add",
    "window",
    "let",
    "say",
    "want",
    "entry",
    "box",
    "label",
    "first",
    "name",
    "last",
    "name",
    "email",
    "address",
    "well",
    "submit",
    "button",
    "let",
    "create",
    "label",
    "entry",
    "box",
    "first",
    "name",
    "demonstrate",
    "let",
    "call",
    "label",
    "first",
    "name",
    "label",
    "equals",
    "label",
    "adding",
    "window",
    "let",
    "set",
    "text",
    "first",
    "name",
    "going",
    "use",
    "pack",
    "demonstrate",
    "differences",
    "pack",
    "grid",
    "let",
    "create",
    "entry",
    "box",
    "let",
    "call",
    "first",
    "name",
    "entry",
    "equals",
    "entry",
    "adding",
    "window",
    "going",
    "pack",
    "let",
    "take",
    "look",
    "label",
    "top",
    "says",
    "first",
    "name",
    "entry",
    "box",
    "right",
    "underneath",
    "want",
    "label",
    "left",
    "hand",
    "side",
    "entry",
    "box",
    "right",
    "hand",
    "side",
    "label",
    "better",
    "using",
    "grid",
    "geometry",
    "manager",
    "going",
    "replace",
    "pack",
    "grid",
    "set",
    "row",
    "column",
    "want",
    "widgets",
    "placed",
    "within",
    "normally",
    "use",
    "pack",
    "geometry",
    "manager",
    "create",
    "new",
    "widgets",
    "going",
    "placed",
    "directly",
    "underneath",
    "one",
    "long",
    "column",
    "let",
    "say",
    "name",
    "label",
    "want",
    "place",
    "row",
    "zero",
    "column",
    "zero",
    "top",
    "left",
    "corner",
    "within",
    "grid",
    "geometry",
    "manager",
    "call",
    "going",
    "set",
    "row",
    "equal",
    "zero",
    "well",
    "column",
    "equal",
    "zero",
    "first",
    "name",
    "entry",
    "want",
    "right",
    "hand",
    "side",
    "label",
    "place",
    "within",
    "row",
    "row",
    "equals",
    "zero",
    "different",
    "column",
    "column",
    "equals",
    "one",
    "column",
    "one",
    "directly",
    "right",
    "column",
    "zero",
    "compile",
    "run",
    "entry",
    "box",
    "right",
    "label",
    "let",
    "repeat",
    "process",
    "last",
    "name",
    "email",
    "address",
    "submit",
    "button",
    "going",
    "copy",
    "change",
    "first",
    "name",
    "last",
    "name",
    "last",
    "name",
    "label",
    "change",
    "text",
    "last",
    "name",
    "last",
    "name",
    "entry",
    "keep",
    "want",
    "last",
    "name",
    "label",
    "underneath",
    "first",
    "name",
    "label",
    "right",
    "going",
    "overlap",
    "row",
    "columns",
    "see",
    "longer",
    "see",
    "first",
    "name",
    "label",
    "first",
    "name",
    "entry",
    "let",
    "place",
    "directly",
    "underneath",
    "going",
    "put",
    "underneath",
    "one",
    "row",
    "keep",
    "columns",
    "going",
    "put",
    "underneath",
    "one",
    "row",
    "row",
    "one",
    "row",
    "one",
    "last",
    "name",
    "entry",
    "get",
    "two",
    "labels",
    "entry",
    "boxes",
    "arranged",
    "neatly",
    "rows",
    "columns",
    "let",
    "thing",
    "email",
    "going",
    "copy",
    "going",
    "change",
    "last",
    "name",
    "email",
    "email",
    "label",
    "email",
    "entry",
    "change",
    "text",
    "last",
    "name",
    "email",
    "going",
    "place",
    "row",
    "equals",
    "2",
    "keep",
    "column",
    "email",
    "entry",
    "row",
    "2",
    "column",
    "one",
    "look",
    "lot",
    "better",
    "let",
    "create",
    "submit",
    "button",
    "let",
    "call",
    "submit",
    "button",
    "equals",
    "button",
    "adding",
    "window",
    "set",
    "text",
    "text",
    "equals",
    "submit",
    "guess",
    "dot",
    "grid",
    "want",
    "place",
    "underneath",
    "currently",
    "kind",
    "shoves",
    "underneath",
    "let",
    "say",
    "want",
    "two",
    "columns",
    "want",
    "set",
    "row",
    "column",
    "begin",
    "row",
    "going",
    "equal",
    "three",
    "column",
    "set",
    "equal",
    "zero",
    "going",
    "apparent",
    "change",
    "still",
    "going",
    "place",
    "one",
    "thing",
    "use",
    "option",
    "called",
    "column",
    "span",
    "widget",
    "take",
    "one",
    "column",
    "going",
    "place",
    "widget",
    "columns",
    "combined",
    "width",
    "add",
    "column",
    "span",
    "equals",
    "two",
    "widget",
    "going",
    "take",
    "next",
    "two",
    "available",
    "columns",
    "including",
    "one",
    "currently",
    "see",
    "submit",
    "button",
    "two",
    "columns",
    "one",
    "thing",
    "know",
    "column",
    "width",
    "dependent",
    "width",
    "largest",
    "widget",
    "contained",
    "within",
    "particular",
    "column",
    "let",
    "say",
    "increase",
    "width",
    "first",
    "name",
    "label",
    "well",
    "column",
    "going",
    "expand",
    "actually",
    "fit",
    "widget",
    "first",
    "name",
    "label",
    "let",
    "set",
    "width",
    "maybe",
    "20",
    "going",
    "increase",
    "width",
    "column",
    "0",
    "even",
    "better",
    "demonstrate",
    "let",
    "color",
    "label",
    "certain",
    "color",
    "visual",
    "first",
    "name",
    "label",
    "let",
    "say",
    "red",
    "last",
    "name",
    "label",
    "let",
    "set",
    "green",
    "email",
    "maybe",
    "blue",
    "color",
    "coordinated",
    "see",
    "background",
    "color",
    "first",
    "name",
    "label",
    "taking",
    "entire",
    "column",
    "space",
    "changed",
    "size",
    "email",
    "label",
    "something",
    "even",
    "larger",
    "like",
    "30",
    "width",
    "equals",
    "column",
    "0",
    "expanded",
    "accommodate",
    "size",
    "largest",
    "widget",
    "email",
    "width",
    "30",
    "finish",
    "video",
    "let",
    "add",
    "title",
    "submission",
    "form",
    "right",
    "top",
    "first",
    "name",
    "label",
    "entry",
    "label",
    "let",
    "call",
    "title",
    "label",
    "equals",
    "label",
    "writing",
    "window",
    "let",
    "set",
    "text",
    "let",
    "say",
    "enter",
    "info",
    "let",
    "pick",
    "font",
    "font",
    "equals",
    "feeling",
    "like",
    "today",
    "maybe",
    "arial",
    "size",
    "maybe",
    "25",
    "going",
    "use",
    "grid",
    "geometry",
    "manager",
    "want",
    "top",
    "want",
    "row",
    "zero",
    "least",
    "want",
    "take",
    "two",
    "columns",
    "say",
    "column",
    "equals",
    "zero",
    "set",
    "column",
    "span",
    "column",
    "span",
    "equals",
    "two",
    "things",
    "going",
    "overlap",
    "going",
    "move",
    "everything",
    "one",
    "row",
    "besides",
    "title",
    "label",
    "want",
    "first",
    "name",
    "label",
    "directly",
    "underneath",
    "title",
    "label",
    "let",
    "move",
    "everything",
    "one",
    "row",
    "title",
    "going",
    "directly",
    "top",
    "first",
    "name",
    "label",
    "well",
    "first",
    "name",
    "entry",
    "box",
    "right",
    "basics",
    "grid",
    "geometry",
    "manager",
    "want",
    "copy",
    "code",
    "post",
    "comments",
    "yeah",
    "basics",
    "grid",
    "geometry",
    "manager",
    "python",
    "hey",
    "going",
    "everybody",
    "bro",
    "hope",
    "well",
    "video",
    "going",
    "teach",
    "guys",
    "create",
    "progress",
    "bar",
    "python",
    "sit",
    "back",
    "relax",
    "enjoy",
    "show",
    "okay",
    "let",
    "create",
    "progress",
    "bar",
    "need",
    "imports",
    "begin",
    "progress",
    "bar",
    "widget",
    "found",
    "within",
    "ttk",
    "module",
    "need",
    "separate",
    "import",
    "tk",
    "enter",
    "dot",
    "ttk",
    "import",
    "everything",
    "import",
    "everything",
    "time",
    "well",
    "let",
    "create",
    "window",
    "window",
    "equals",
    "tk",
    "followed",
    "going",
    "add",
    "progress",
    "bar",
    "button",
    "window",
    "click",
    "button",
    "going",
    "fill",
    "progress",
    "bar",
    "let",
    "begin",
    "creating",
    "button",
    "begin",
    "let",
    "call",
    "button",
    "equals",
    "button",
    "adding",
    "window",
    "let",
    "set",
    "text",
    "text",
    "equals",
    "maybe",
    "download",
    "command",
    "maybe",
    "call",
    "start",
    "finish",
    "adding",
    "button",
    "window",
    "use",
    "pack",
    "let",
    "define",
    "start",
    "function",
    "def",
    "start",
    "fill",
    "later",
    "going",
    "print",
    "nothing",
    "placeholder",
    "button",
    "let",
    "add",
    "progress",
    "bar",
    "button",
    "call",
    "progress",
    "bar",
    "bar",
    "short",
    "bar",
    "equals",
    "progress",
    "bar",
    "adding",
    "window",
    "set",
    "orientation",
    "horizontal",
    "vertical",
    "later",
    "video",
    "show",
    "differences",
    "two",
    "let",
    "set",
    "horizontal",
    "going",
    "pack",
    "bar",
    "bar",
    "dot",
    "pack",
    "add",
    "padding",
    "pad",
    "equals",
    "10",
    "let",
    "see",
    "okay",
    "progress",
    "bar",
    "top",
    "button",
    "click",
    "button",
    "going",
    "fill",
    "progress",
    "bar",
    "think",
    "going",
    "increase",
    "length",
    "progress",
    "bar",
    "let",
    "set",
    "maybe",
    "300",
    "believe",
    "100",
    "default",
    "okay",
    "bad",
    "size",
    "let",
    "define",
    "start",
    "function",
    "actually",
    "increase",
    "value",
    "progress",
    "bar",
    "typing",
    "name",
    "progress",
    "bar",
    "value",
    "plus",
    "equals",
    "amount",
    "let",
    "say",
    "going",
    "happen",
    "right",
    "every",
    "time",
    "click",
    "button",
    "going",
    "fill",
    "progress",
    "bar",
    "10",
    "total",
    "100",
    "let",
    "pretend",
    "waiting",
    "certain",
    "amount",
    "tasks",
    "complete",
    "let",
    "define",
    "variables",
    "let",
    "say",
    "variable",
    "called",
    "tasks",
    "let",
    "set",
    "10",
    "keep",
    "simple",
    "x",
    "represent",
    "current",
    "task",
    "say",
    "0",
    "begin",
    "let",
    "create",
    "loop",
    "x",
    "less",
    "amount",
    "tasks",
    "increment",
    "value",
    "bar",
    "10",
    "10",
    "10",
    "test",
    "10",
    "total",
    "100",
    "want",
    "increment",
    "task",
    "well",
    "represented",
    "x",
    "let",
    "increment",
    "x",
    "1",
    "iteration",
    "loop",
    "run",
    "click",
    "download",
    "spills",
    "instantly",
    "let",
    "add",
    "delay",
    "simulate",
    "task",
    "waiting",
    "completed",
    "let",
    "add",
    "let",
    "add",
    "delay",
    "using",
    "time",
    "dot",
    "sleep",
    "let",
    "set",
    "one",
    "second",
    "going",
    "wait",
    "one",
    "second",
    "complete",
    "task",
    "ends",
    "happening",
    "nothing",
    "appears",
    "updating",
    "well",
    "gives",
    "bro",
    "lie",
    "well",
    "window",
    "waiting",
    "progress",
    "bar",
    "complete",
    "actually",
    "going",
    "display",
    "filled",
    "would",
    "want",
    "refresh",
    "window",
    "iteration",
    "loop",
    "end",
    "loop",
    "let",
    "add",
    "one",
    "thing",
    "window",
    "dot",
    "update",
    "underscore",
    "idle",
    "tasks",
    "iteration",
    "loop",
    "going",
    "update",
    "window",
    "download",
    "something",
    "going",
    "update",
    "progress",
    "bar",
    "iteration",
    "loop",
    "completed",
    "right",
    "let",
    "take",
    "step",
    "adding",
    "label",
    "displays",
    "current",
    "percent",
    "progress",
    "bar",
    "complete",
    "let",
    "add",
    "label",
    "progress",
    "bar",
    "button",
    "sandwiched",
    "right",
    "two",
    "widgets",
    "let",
    "add",
    "call",
    "label",
    "percent",
    "label",
    "equals",
    "label",
    "add",
    "window",
    "need",
    "text",
    "variable",
    "text",
    "variable",
    "equals",
    "let",
    "call",
    "percent",
    "reason",
    "use",
    "text",
    "variable",
    "update",
    "label",
    "text",
    "iteration",
    "loop",
    "need",
    "pack",
    "okay",
    "within",
    "window",
    "near",
    "top",
    "let",
    "define",
    "percent",
    "percent",
    "equals",
    "string",
    "var",
    "allows",
    "us",
    "update",
    "percent",
    "new",
    "text",
    "set",
    "percent",
    "label",
    "new",
    "text",
    "within",
    "loop",
    "update",
    "idle",
    "tasks",
    "let",
    "set",
    "percent",
    "percent",
    "dot",
    "set",
    "let",
    "say",
    "x",
    "divided",
    "tasks",
    "multiply",
    "100",
    "going",
    "put",
    "within",
    "set",
    "parentheses",
    "times",
    "100",
    "convert",
    "string",
    "display",
    "along",
    "text",
    "lot",
    "parentheses",
    "might",
    "difficult",
    "keep",
    "track",
    "right",
    "going",
    "tack",
    "percent",
    "let",
    "try",
    "got",
    "10",
    "20",
    "30",
    "40",
    "shut",
    "one",
    "change",
    "gon",
    "na",
    "make",
    "going",
    "cast",
    "integer",
    "convert",
    "string",
    "like",
    "decimal",
    "end",
    "percentage",
    "yeah",
    "says",
    "10",
    "percent",
    "20",
    "forth",
    "let",
    "add",
    "label",
    "displays",
    "current",
    "task",
    "let",
    "copy",
    "percent",
    "label",
    "let",
    "rename",
    "maybe",
    "task",
    "label",
    "task",
    "label",
    "text",
    "variable",
    "equal",
    "maybe",
    "text",
    "let",
    "define",
    "text",
    "text",
    "also",
    "string",
    "var",
    "within",
    "loop",
    "let",
    "update",
    "value",
    "text",
    "text",
    "dot",
    "set",
    "display",
    "x",
    "plus",
    "maybe",
    "forward",
    "slash",
    "plus",
    "tasks",
    "since",
    "displaying",
    "integers",
    "along",
    "strings",
    "need",
    "convert",
    "strings",
    "use",
    "str",
    "function",
    "us",
    "surround",
    "x",
    "tasks",
    "str",
    "convert",
    "strings",
    "add",
    "plus",
    "tasks",
    "completed",
    "value",
    "x",
    "update",
    "iteration",
    "loop",
    "let",
    "try",
    "clicking",
    "download",
    "display",
    "percentage",
    "well",
    "amount",
    "tasks",
    "completed",
    "way",
    "reaches",
    "end",
    "let",
    "change",
    "practical",
    "example",
    "pretend",
    "downloading",
    "video",
    "game",
    "let",
    "replace",
    "rename",
    "tasks",
    "maybe",
    "gb4",
    "gigabytes",
    "game",
    "100",
    "gigabytes",
    "rename",
    "x",
    "well",
    "let",
    "refactor",
    "rename",
    "change",
    "x",
    "maybe",
    "download",
    "represent",
    "amount",
    "gigabytes",
    "downloaded",
    "let",
    "create",
    "variable",
    "called",
    "speed",
    "let",
    "set",
    "one",
    "alright",
    "download",
    "less",
    "amount",
    "gigabytes",
    "game",
    "sleep",
    "maybe",
    "portion",
    "second",
    "good",
    "increase",
    "value",
    "bar",
    "amount",
    "speed",
    "divided",
    "gigabytes",
    "multiply",
    "100",
    "download",
    "going",
    "increment",
    "whatever",
    "speed",
    "right",
    "one",
    "keep",
    "percent",
    "text",
    "let",
    "change",
    "tasks",
    "gigabytes",
    "changes",
    "make",
    "download",
    "something",
    "kind",
    "pretending",
    "downloading",
    "large",
    "file",
    "game",
    "see",
    "reaches",
    "100",
    "says",
    "100",
    "100",
    "100",
    "gigabytes",
    "completed",
    "change",
    "different",
    "value",
    "let",
    "say",
    "maybe",
    "50",
    "speed",
    "maybe",
    "two",
    "adjust",
    "accommodate",
    "whatever",
    "new",
    "file",
    "size",
    "well",
    "speed",
    "forget",
    "change",
    "orientation",
    "vertical",
    "bar",
    "choose",
    "vertical",
    "download",
    "bar",
    "could",
    "good",
    "something",
    "right",
    "basics",
    "progress",
    "bars",
    "python",
    "want",
    "copy",
    "code",
    "post",
    "comments",
    "yeah",
    "basics",
    "progress",
    "bars",
    "python",
    "going",
    "everybody",
    "bro",
    "hope",
    "well",
    "video",
    "going",
    "teach",
    "guys",
    "use",
    "canvas",
    "widget",
    "draw",
    "simple",
    "shapes",
    "sit",
    "back",
    "relax",
    "enjoy",
    "show",
    "welcome",
    "back",
    "everyone",
    "well",
    "video",
    "going",
    "creating",
    "canvas",
    "canvas",
    "widget",
    "used",
    "draw",
    "simple",
    "graphs",
    "plots",
    "images",
    "within",
    "window",
    "going",
    "creating",
    "simple",
    "shapes",
    "video",
    "anything",
    "sophisticated",
    "might",
    "get",
    "canvas",
    "widget",
    "separate",
    "video",
    "end",
    "lesson",
    "going",
    "practice",
    "creating",
    "pokeball",
    "begin",
    "need",
    "window",
    "window",
    "equals",
    "tk",
    "followed",
    "loop",
    "create",
    "canvas",
    "simply",
    "call",
    "canvas",
    "canvas",
    "equals",
    "canvas",
    "adding",
    "canvas",
    "window",
    "need",
    "follow",
    "place",
    "going",
    "use",
    "pack",
    "simple",
    "canvas",
    "looks",
    "like",
    "rectangular",
    "area",
    "draw",
    "graphics",
    "also",
    "set",
    "width",
    "height",
    "canvas",
    "create",
    "canvas",
    "going",
    "set",
    "options",
    "height",
    "width",
    "let",
    "begin",
    "height",
    "height",
    "equals",
    "let",
    "say",
    "500",
    "width",
    "500",
    "square",
    "canvas",
    "draw",
    "graphics",
    "let",
    "begin",
    "creating",
    "simple",
    "shapes",
    "maybe",
    "line",
    "think",
    "line",
    "shape",
    "maybe",
    "one",
    "know",
    "geometry",
    "let",
    "create",
    "simple",
    "line",
    "type",
    "name",
    "canvas",
    "dot",
    "create",
    "bunch",
    "different",
    "shapes",
    "create",
    "let",
    "create",
    "line",
    "going",
    "turn",
    "comment",
    "moment",
    "need",
    "set",
    "coordinates",
    "line",
    "top",
    "left",
    "corner",
    "canvas",
    "0",
    "0",
    "bottom",
    "right",
    "corner",
    "canvas",
    "500",
    "500",
    "depends",
    "set",
    "dimensions",
    "canvas",
    "create",
    "line",
    "need",
    "starting",
    "point",
    "ending",
    "point",
    "want",
    "start",
    "top",
    "left",
    "corner",
    "going",
    "pass",
    "0",
    "0",
    "starting",
    "position",
    "place",
    "coordinates",
    "ending",
    "position",
    "want",
    "line",
    "end",
    "bottom",
    "right",
    "corner",
    "would",
    "x",
    "500",
    "500",
    "looks",
    "like",
    "simple",
    "line",
    "going",
    "across",
    "screen",
    "also",
    "change",
    "color",
    "line",
    "thickness",
    "let",
    "begin",
    "changing",
    "color",
    "fill",
    "fill",
    "equals",
    "let",
    "pick",
    "color",
    "blue",
    "blue",
    "line",
    "going",
    "across",
    "screen",
    "also",
    "change",
    "width",
    "well",
    "using",
    "width",
    "option",
    "let",
    "set",
    "five",
    "get",
    "extra",
    "thick",
    "line",
    "across",
    "screen",
    "let",
    "make",
    "red",
    "line",
    "going",
    "copy",
    "let",
    "change",
    "coordinates",
    "uh",
    "let",
    "say",
    "want",
    "start",
    "bottom",
    "left",
    "corner",
    "go",
    "top",
    "right",
    "starting",
    "x",
    "position",
    "would",
    "zero",
    "would",
    "actually",
    "500",
    "x",
    "ending",
    "position",
    "would",
    "500",
    "would",
    "zero",
    "let",
    "set",
    "red",
    "keep",
    "width",
    "okay",
    "red",
    "line",
    "notice",
    "red",
    "line",
    "overlapping",
    "blue",
    "line",
    "create",
    "shapes",
    "canvas",
    "overlap",
    "one",
    "recently",
    "created",
    "appear",
    "top",
    "one",
    "option",
    "available",
    "actually",
    "give",
    "graphics",
    "unique",
    "name",
    "blue",
    "line",
    "could",
    "call",
    "blue",
    "line",
    "blue",
    "line",
    "equals",
    "call",
    "red",
    "line",
    "something",
    "different",
    "like",
    "red",
    "line",
    "would",
    "useful",
    "want",
    "call",
    "use",
    "graphic",
    "name",
    "want",
    "like",
    "move",
    "graphic",
    "screen",
    "something",
    "appear",
    "use",
    "name",
    "really",
    "need",
    "lesson",
    "revert",
    "back",
    "previously",
    "letting",
    "know",
    "alright",
    "next",
    "let",
    "create",
    "rectangle",
    "canvas",
    "dot",
    "create",
    "rectangle",
    "set",
    "starting",
    "coordinates",
    "ending",
    "coordinates",
    "starting",
    "coordinates",
    "top",
    "left",
    "rectangle",
    "ending",
    "coordinates",
    "bottom",
    "right",
    "starting",
    "coordinates",
    "let",
    "say",
    "going",
    "place",
    "x",
    "50",
    "ending",
    "coordinates",
    "want",
    "x",
    "250",
    "250",
    "making",
    "numbers",
    "put",
    "whatever",
    "want",
    "really",
    "looks",
    "like",
    "think",
    "going",
    "comment",
    "lines",
    "rectangle",
    "well",
    "guess",
    "also",
    "square",
    "actually",
    "give",
    "fill",
    "color",
    "well",
    "fill",
    "option",
    "fill",
    "equals",
    "purple",
    "guess",
    "purple",
    "rectangle",
    "next",
    "list",
    "create",
    "polygon",
    "create",
    "many",
    "sorts",
    "shapes",
    "using",
    "create",
    "polygon",
    "really",
    "depends",
    "many",
    "coordinates",
    "enter",
    "let",
    "create",
    "simple",
    "triangle",
    "need",
    "least",
    "three",
    "coordinates",
    "work",
    "canvas",
    "dot",
    "create",
    "polygon",
    "coordinates",
    "picked",
    "already",
    "let",
    "place",
    "first",
    "set",
    "coordinates",
    "x",
    "250",
    "zero",
    "second",
    "set",
    "x",
    "500",
    "500",
    "last",
    "set",
    "third",
    "set",
    "place",
    "x",
    "zero",
    "500",
    "looks",
    "like",
    "black",
    "triangle",
    "taking",
    "canvas",
    "also",
    "change",
    "fill",
    "color",
    "well",
    "option",
    "fill",
    "set",
    "whatever",
    "color",
    "want",
    "let",
    "say",
    "yellow",
    "yellow",
    "triangle",
    "screen",
    "kind",
    "resembles",
    "triforce",
    "legend",
    "zelda",
    "series",
    "one",
    "personal",
    "favorites",
    "let",
    "also",
    "add",
    "border",
    "actually",
    "done",
    "outline",
    "outline",
    "equals",
    "pick",
    "color",
    "outline",
    "let",
    "say",
    "black",
    "black",
    "outline",
    "around",
    "graphic",
    "also",
    "change",
    "thickness",
    "width",
    "let",
    "set",
    "width",
    "five",
    "extra",
    "thick",
    "line",
    "around",
    "triangle",
    "shapes",
    "pass",
    "list",
    "points",
    "going",
    "get",
    "rid",
    "going",
    "pass",
    "list",
    "let",
    "create",
    "list",
    "called",
    "points",
    "points",
    "equals",
    "points",
    "entered",
    "previously",
    "instead",
    "passing",
    "coordinates",
    "individually",
    "going",
    "pass",
    "list",
    "points",
    "work",
    "exactly",
    "okay",
    "let",
    "create",
    "arc",
    "canvas",
    "dot",
    "create",
    "arc",
    "arc",
    "really",
    "curved",
    "line",
    "two",
    "points",
    "however",
    "list",
    "coordinates",
    "listing",
    "coordinates",
    "starting",
    "position",
    "ending",
    "position",
    "arc",
    "less",
    "amount",
    "space",
    "want",
    "allocate",
    "actually",
    "draw",
    "arc",
    "let",
    "say",
    "want",
    "arc",
    "take",
    "entire",
    "canvas",
    "pass",
    "dimensions",
    "canvas",
    "top",
    "left",
    "corner",
    "zero",
    "zero",
    "height",
    "width",
    "five",
    "hundred",
    "arc",
    "resembles",
    "pie",
    "slice",
    "starting",
    "top",
    "left",
    "corner",
    "ending",
    "amount",
    "space",
    "giving",
    "crate",
    "arc",
    "function",
    "actually",
    "draw",
    "arc",
    "really",
    "entire",
    "circle",
    "portion",
    "visible",
    "let",
    "also",
    "set",
    "fill",
    "color",
    "fill",
    "equals",
    "color",
    "pick",
    "yet",
    "let",
    "say",
    "green",
    "green",
    "pie",
    "slice",
    "different",
    "styles",
    "change",
    "style",
    "equals",
    "default",
    "pi",
    "slice",
    "previously",
    "let",
    "change",
    "chord",
    "draw",
    "line",
    "two",
    "points",
    "kind",
    "resembles",
    "like",
    "bow",
    "like",
    "ball",
    "arrows",
    "also",
    "arc",
    "simply",
    "curved",
    "line",
    "let",
    "change",
    "back",
    "pie",
    "slice",
    "well",
    "like",
    "pie",
    "change",
    "starting",
    "position",
    "arc",
    "begins",
    "option",
    "start",
    "start",
    "equals",
    "0",
    "default",
    "going",
    "apparent",
    "change",
    "let",
    "adjust",
    "90",
    "degrees",
    "degrees",
    "shifted",
    "direction",
    "counterclockwise",
    "90",
    "degrees",
    "180",
    "would",
    "theoretically",
    "flip",
    "side",
    "previously",
    "right",
    "also",
    "set",
    "extent",
    "default",
    "normally",
    "90",
    "degrees",
    "let",
    "change",
    "180",
    "hemisphere",
    "half",
    "circle",
    "right",
    "people",
    "let",
    "practice",
    "creating",
    "pokeball",
    "still",
    "one",
    "function",
    "cover",
    "called",
    "create",
    "oval",
    "making",
    "let",
    "begin",
    "creating",
    "top",
    "red",
    "hemisphere",
    "pokeball",
    "canvas",
    "dot",
    "create",
    "arc",
    "going",
    "set",
    "extent",
    "0",
    "0",
    "500",
    "500",
    "going",
    "take",
    "entire",
    "canvas",
    "let",
    "also",
    "set",
    "fill",
    "color",
    "red",
    "fill",
    "equals",
    "red",
    "need",
    "change",
    "extent",
    "far",
    "extends",
    "extent",
    "function",
    "extent",
    "equals",
    "180",
    "half",
    "circle",
    "let",
    "also",
    "change",
    "thickness",
    "outline",
    "well",
    "using",
    "width",
    "option",
    "width",
    "equals",
    "10",
    "would",
    "good",
    "red",
    "hemisphere",
    "top",
    "pokeball",
    "let",
    "work",
    "bottom",
    "half",
    "white",
    "hemisphere",
    "canvas",
    "dot",
    "create",
    "arc",
    "change",
    "fill",
    "white",
    "extent",
    "need",
    "different",
    "starting",
    "position",
    "start",
    "equals",
    "going",
    "begin",
    "180",
    "degree",
    "mark",
    "combine",
    "together",
    "get",
    "two",
    "different",
    "colored",
    "hemispheres",
    "form",
    "perfect",
    "circle",
    "let",
    "create",
    "oval",
    "within",
    "center",
    "pokeball",
    "going",
    "canvas",
    "dot",
    "create",
    "oval",
    "going",
    "set",
    "amount",
    "space",
    "want",
    "give",
    "circle",
    "drawn",
    "place",
    "x",
    "190",
    "190",
    "x",
    "2",
    "second",
    "x",
    "position",
    "310",
    "y2",
    "310",
    "let",
    "set",
    "fill",
    "color",
    "next",
    "fill",
    "fill",
    "equals",
    "white",
    "lastly",
    "let",
    "give",
    "thicker",
    "border",
    "width",
    "equals",
    "10",
    "match",
    "width",
    "two",
    "arcs",
    "simple",
    "pokeball",
    "right",
    "well",
    "basics",
    "canvas",
    "widget",
    "like",
    "copy",
    "code",
    "post",
    "comments",
    "yeah",
    "basics",
    "canvas",
    "widget",
    "python",
    "going",
    "everybody",
    "bro",
    "hope",
    "well",
    "video",
    "going",
    "teach",
    "guys",
    "create",
    "key",
    "events",
    "python",
    "sit",
    "back",
    "relax",
    "enjoy",
    "show",
    "welcome",
    "back",
    "everyone",
    "video",
    "going",
    "discussing",
    "key",
    "events",
    "bind",
    "key",
    "event",
    "function",
    "widget",
    "window",
    "press",
    "certain",
    "key",
    "something",
    "trigger",
    "function",
    "called",
    "perform",
    "sort",
    "task",
    "us",
    "actually",
    "using",
    "bind",
    "function",
    "widgets",
    "windows",
    "access",
    "bind",
    "function",
    "window",
    "widget",
    "selected",
    "press",
    "certain",
    "key",
    "something",
    "going",
    "call",
    "certain",
    "function",
    "perform",
    "task",
    "us",
    "two",
    "arguments",
    "within",
    "bind",
    "function",
    "takes",
    "event",
    "well",
    "function",
    "name",
    "let",
    "say",
    "press",
    "enter",
    "key",
    "want",
    "call",
    "function",
    "something",
    "event",
    "type",
    "set",
    "quotes",
    "angle",
    "brackets",
    "name",
    "button",
    "example",
    "want",
    "press",
    "w",
    "move",
    "forward",
    "like",
    "playing",
    "game",
    "would",
    "w",
    "also",
    "let",
    "say",
    "want",
    "press",
    "enter",
    "something",
    "actually",
    "return",
    "call",
    "function",
    "let",
    "create",
    "function",
    "called",
    "something",
    "let",
    "define",
    "top",
    "def",
    "something",
    "pay",
    "attention",
    "part",
    "need",
    "set",
    "one",
    "parameter",
    "something",
    "function",
    "needs",
    "event",
    "sure",
    "include",
    "easy",
    "forget",
    "want",
    "press",
    "enter",
    "let",
    "print",
    "message",
    "thing",
    "work",
    "let",
    "try",
    "window",
    "focus",
    "ability",
    "actually",
    "uh",
    "respond",
    "events",
    "right",
    "pressing",
    "sorts",
    "keys",
    "probably",
    "hear",
    "right",
    "going",
    "crazy",
    "keyboard",
    "going",
    "hit",
    "enter",
    "says",
    "thing",
    "bind",
    "sorts",
    "keys",
    "window",
    "let",
    "say",
    "want",
    "press",
    "q",
    "quit",
    "replace",
    "lowercase",
    "q",
    "typing",
    "sorts",
    "keys",
    "going",
    "press",
    "q",
    "says",
    "thing",
    "kind",
    "like",
    "quitting",
    "game",
    "actually",
    "respond",
    "keys",
    "well",
    "almost",
    "type",
    "key",
    "capital",
    "k",
    "pretty",
    "much",
    "press",
    "key",
    "going",
    "trigger",
    "call",
    "function",
    "kind",
    "like",
    "one",
    "thing",
    "could",
    "display",
    "key",
    "event",
    "pressed",
    "going",
    "add",
    "maybe",
    "change",
    "message",
    "u",
    "pressed",
    "plus",
    "display",
    "key",
    "pressed",
    "event",
    "dot",
    "key",
    "sim",
    "believe",
    "key",
    "symbol",
    "actually",
    "display",
    "button",
    "pressed",
    "unique",
    "idea",
    "practice",
    "let",
    "say",
    "want",
    "add",
    "label",
    "window",
    "going",
    "change",
    "text",
    "label",
    "reflect",
    "whatever",
    "key",
    "press",
    "let",
    "create",
    "label",
    "label",
    "equals",
    "label",
    "adding",
    "window",
    "let",
    "change",
    "font",
    "well",
    "something",
    "massive",
    "like",
    "helvetica",
    "size",
    "100",
    "good",
    "need",
    "pack",
    "label",
    "label",
    "dot",
    "pack",
    "within",
    "function",
    "let",
    "turn",
    "comment",
    "going",
    "use",
    "label",
    "dot",
    "config",
    "going",
    "update",
    "text",
    "text",
    "going",
    "whatever",
    "key",
    "press",
    "event",
    "dot",
    "key",
    "sim",
    "label",
    "going",
    "display",
    "whatever",
    "key",
    "press",
    "example",
    "w",
    "backspace",
    "escape",
    "left",
    "right",
    "left",
    "right",
    "b",
    "start",
    "right",
    "basics",
    "key",
    "events",
    "could",
    "favor",
    "comments",
    "press",
    "f",
    "pay",
    "respects",
    "want",
    "copy",
    "code",
    "post",
    "comments",
    "yeah",
    "basics",
    "key",
    "events",
    "python",
    "hey",
    "going",
    "everybody",
    "bro",
    "hope",
    "well",
    "video",
    "going",
    "teach",
    "guys",
    "mouse",
    "events",
    "python",
    "sit",
    "back",
    "relax",
    "enjoy",
    "show",
    "hey",
    "everyone",
    "going",
    "discussing",
    "mouse",
    "events",
    "python",
    "begin",
    "need",
    "window",
    "window",
    "equals",
    "tk",
    "followed",
    "loop",
    "last",
    "video",
    "learned",
    "bind",
    "widget",
    "window",
    "certain",
    "event",
    "occurs",
    "call",
    "function",
    "going",
    "thing",
    "video",
    "various",
    "mouse",
    "events",
    "cover",
    "going",
    "use",
    "function",
    "takes",
    "two",
    "arguments",
    "event",
    "well",
    "function",
    "name",
    "let",
    "define",
    "function",
    "let",
    "call",
    "something",
    "function",
    "something",
    "need",
    "define",
    "top",
    "def",
    "something",
    "remember",
    "need",
    "set",
    "one",
    "parameter",
    "function",
    "parameter",
    "event",
    "print",
    "something",
    "print",
    "thing",
    "okay",
    "various",
    "mouse",
    "events",
    "left",
    "button",
    "click",
    "within",
    "quotes",
    "within",
    "angle",
    "brackets",
    "left",
    "button",
    "click",
    "button",
    "dash",
    "one",
    "click",
    "within",
    "window",
    "going",
    "call",
    "function",
    "thing",
    "right",
    "click",
    "anything",
    "mouse",
    "events",
    "button",
    "two",
    "scroll",
    "wheel",
    "scroll",
    "press",
    "right",
    "clicking",
    "left",
    "clicking",
    "right",
    "going",
    "press",
    "mouse",
    "wheel",
    "says",
    "thing",
    "button",
    "three",
    "right",
    "mouse",
    "click",
    "clicking",
    "left",
    "nothing",
    "gon",
    "na",
    "click",
    "right",
    "seems",
    "work",
    "right",
    "button",
    "one",
    "going",
    "add",
    "note",
    "left",
    "mouse",
    "click",
    "button",
    "two",
    "scroll",
    "wheel",
    "press",
    "button",
    "three",
    "right",
    "mouse",
    "click",
    "guys",
    "know",
    "actually",
    "get",
    "x",
    "coordinates",
    "event",
    "occurred",
    "type",
    "name",
    "event",
    "dot",
    "x",
    "however",
    "since",
    "displaying",
    "along",
    "text",
    "need",
    "convert",
    "string",
    "string",
    "event",
    "dot",
    "x",
    "add",
    "coordinates",
    "well",
    "think",
    "add",
    "comma",
    "separate",
    "change",
    "text",
    "say",
    "mouse",
    "coordinates",
    "right",
    "let",
    "try",
    "going",
    "give",
    "us",
    "coordinates",
    "click",
    "right",
    "left",
    "clicking",
    "top",
    "left",
    "corner",
    "zero",
    "zero",
    "well",
    "least",
    "close",
    "exactly",
    "alright",
    "events",
    "cover",
    "going",
    "copy",
    "button",
    "release",
    "release",
    "button",
    "going",
    "trigger",
    "event",
    "right",
    "holding",
    "left",
    "mouse",
    "button",
    "going",
    "let",
    "go",
    "triggers",
    "event",
    "right",
    "click",
    "hold",
    "anything",
    "soon",
    "let",
    "go",
    "event",
    "triggered",
    "also",
    "enter",
    "confused",
    "enter",
    "button",
    "going",
    "get",
    "rid",
    "enter",
    "enter",
    "binded",
    "window",
    "widget",
    "enter",
    "going",
    "give",
    "coordinates",
    "entered",
    "also",
    "leave",
    "going",
    "say",
    "enter",
    "window",
    "leave",
    "leave",
    "window",
    "enter",
    "nothing",
    "happens",
    "soon",
    "leave",
    "gives",
    "coordinates",
    "last",
    "one",
    "motion",
    "long",
    "cursor",
    "motion",
    "one",
    "might",
    "good",
    "game",
    "motion",
    "mouse",
    "moved",
    "consistently",
    "giving",
    "coordinates",
    "moving",
    "mouse",
    "stationary",
    "stop",
    "moving",
    "stops",
    "right",
    "basics",
    "mouse",
    "events",
    "python",
    "want",
    "copy",
    "code",
    "post",
    "comments",
    "yeah",
    "basics",
    "mouse",
    "events",
    "python",
    "hey",
    "going",
    "everybody",
    "bro",
    "hope",
    "well",
    "video",
    "going",
    "teach",
    "guys",
    "drag",
    "drop",
    "widgets",
    "python",
    "sit",
    "back",
    "relax",
    "enjoy",
    "show",
    "right",
    "people",
    "let",
    "dive",
    "need",
    "window",
    "going",
    "adding",
    "widgets",
    "window",
    "window",
    "equals",
    "tk",
    "followed",
    "loop",
    "drag",
    "drop",
    "sorts",
    "widgets",
    "let",
    "stick",
    "label",
    "creating",
    "label",
    "simple",
    "let",
    "define",
    "label",
    "label",
    "equals",
    "label",
    "going",
    "adding",
    "label",
    "window",
    "let",
    "set",
    "background",
    "color",
    "actually",
    "see",
    "label",
    "pick",
    "know",
    "favorite",
    "color",
    "going",
    "pick",
    "red",
    "going",
    "set",
    "width",
    "height",
    "normally",
    "label",
    "without",
    "text",
    "really",
    "small",
    "let",
    "set",
    "width",
    "maybe",
    "10",
    "height",
    "good",
    "want",
    "place",
    "label",
    "someplace",
    "within",
    "window",
    "label",
    "dot",
    "place",
    "pass",
    "x",
    "coordinates",
    "well",
    "coordinates",
    "x",
    "equals",
    "zero",
    "equals",
    "zero",
    "going",
    "appear",
    "top",
    "left",
    "corner",
    "window",
    "label",
    "want",
    "able",
    "drag",
    "drop",
    "label",
    "someplace",
    "within",
    "window",
    "going",
    "need",
    "actually",
    "bind",
    "label",
    "twice",
    "let",
    "begin",
    "first",
    "binding",
    "order",
    "bind",
    "widget",
    "type",
    "name",
    "widget",
    "followed",
    "calling",
    "bind",
    "function",
    "bind",
    "function",
    "take",
    "two",
    "arguments",
    "take",
    "event",
    "well",
    "function",
    "name",
    "function",
    "name",
    "let",
    "call",
    "drag",
    "underscore",
    "start",
    "really",
    "need",
    "name",
    "event",
    "occurs",
    "going",
    "left",
    "button",
    "click",
    "mouse",
    "event",
    "within",
    "quotes",
    "within",
    "angle",
    "brackets",
    "button",
    "dash",
    "one",
    "click",
    "someplace",
    "within",
    "label",
    "using",
    "left",
    "mouse",
    "button",
    "going",
    "call",
    "drag",
    "start",
    "function",
    "need",
    "define",
    "top",
    "program",
    "let",
    "define",
    "function",
    "def",
    "drag",
    "start",
    "takes",
    "one",
    "parameter",
    "parameter",
    "event",
    "going",
    "actually",
    "get",
    "coordinates",
    "click",
    "within",
    "label",
    "going",
    "assign",
    "new",
    "variable",
    "attribute",
    "label",
    "label",
    "dot",
    "let",
    "create",
    "attribute",
    "called",
    "start",
    "x",
    "equals",
    "event",
    "dot",
    "x",
    "click",
    "within",
    "label",
    "necessarily",
    "window",
    "let",
    "repeat",
    "process",
    "label",
    "dot",
    "start",
    "equals",
    "event",
    "dot",
    "going",
    "coordinates",
    "click",
    "within",
    "label",
    "actually",
    "use",
    "next",
    "function",
    "going",
    "bind",
    "label",
    "second",
    "time",
    "going",
    "copy",
    "line",
    "paste",
    "second",
    "binding",
    "let",
    "say",
    "drag",
    "underscore",
    "motion",
    "function",
    "name",
    "event",
    "going",
    "occur",
    "hold",
    "left",
    "mouse",
    "button",
    "drag",
    "b",
    "one",
    "dash",
    "motion",
    "need",
    "define",
    "function",
    "top",
    "e",
    "f",
    "drag",
    "underscore",
    "motion",
    "takes",
    "event",
    "parameter",
    "part",
    "going",
    "little",
    "funky",
    "going",
    "get",
    "create",
    "new",
    "x",
    "coordinates",
    "let",
    "begin",
    "x",
    "x",
    "equals",
    "name",
    "label",
    "widget",
    "label",
    "dot",
    "w",
    "info",
    "underscore",
    "x",
    "function",
    "add",
    "parentheses",
    "get",
    "top",
    "left",
    "x",
    "coordinate",
    "label",
    "relative",
    "window",
    "minus",
    "label",
    "x",
    "well",
    "plus",
    "event",
    "dot",
    "x",
    "right",
    "going",
    "thing",
    "well",
    "going",
    "replace",
    "x",
    "second",
    "line",
    "right",
    "top",
    "left",
    "corner",
    "x",
    "coordinate",
    "widget",
    "relative",
    "window",
    "place",
    "click",
    "within",
    "label",
    "begin",
    "dragging",
    "widget",
    "little",
    "difficult",
    "explain",
    "find",
    "combine",
    "combine",
    "together",
    "get",
    "new",
    "coordinates",
    "want",
    "drag",
    "component",
    "widget",
    "need",
    "replace",
    "widget",
    "label",
    "dot",
    "place",
    "x",
    "equals",
    "x",
    "equals",
    "combine",
    "together",
    "widget",
    "drag",
    "drop",
    "someplace",
    "else",
    "within",
    "window",
    "wait",
    "second",
    "one",
    "widget",
    "well",
    "way",
    "functions",
    "written",
    "would",
    "compatible",
    "one",
    "widget",
    "label",
    "create",
    "second",
    "label",
    "going",
    "call",
    "second",
    "label",
    "label",
    "two",
    "going",
    "rename",
    "let",
    "change",
    "background",
    "color",
    "maybe",
    "blue",
    "going",
    "place",
    "somewhere",
    "else",
    "within",
    "window",
    "maybe",
    "x",
    "100",
    "100",
    "need",
    "bind",
    "label",
    "two",
    "well",
    "make",
    "sure",
    "bind",
    "label",
    "two",
    "label",
    "one",
    "binded",
    "called",
    "label",
    "thing",
    "label",
    "two",
    "right",
    "let",
    "see",
    "happens",
    "going",
    "attempt",
    "drag",
    "label",
    "label",
    "1",
    "moving",
    "functions",
    "stated",
    "getting",
    "coordinates",
    "storing",
    "within",
    "attributes",
    "label",
    "1",
    "necessarily",
    "label",
    "two",
    "order",
    "make",
    "functions",
    "compatible",
    "widgets",
    "actually",
    "add",
    "one",
    "line",
    "code",
    "widget",
    "equals",
    "event",
    "dot",
    "widget",
    "going",
    "get",
    "widget",
    "event",
    "dealing",
    "going",
    "temporarily",
    "rename",
    "widget",
    "going",
    "replace",
    "instances",
    "use",
    "label",
    "replace",
    "widget",
    "sure",
    "thing",
    "drag",
    "motion",
    "need",
    "add",
    "line",
    "top",
    "drag",
    "motion",
    "functions",
    "compatible",
    "widget",
    "create",
    "able",
    "drag",
    "drop",
    "widgets",
    "right",
    "well",
    "basics",
    "dragging",
    "dropping",
    "widgets",
    "python",
    "want",
    "copy",
    "code",
    "post",
    "comments",
    "yeah",
    "basics",
    "dragging",
    "dropping",
    "widgets",
    "python",
    "hey",
    "going",
    "everybody",
    "bro",
    "hope",
    "well",
    "video",
    "going",
    "teach",
    "guys",
    "move",
    "image",
    "window",
    "canvas",
    "python",
    "sit",
    "back",
    "relax",
    "enjoy",
    "show",
    "right",
    "fellow",
    "bros",
    "going",
    "divide",
    "video",
    "two",
    "different",
    "sections",
    "first",
    "section",
    "going",
    "move",
    "widget",
    "within",
    "window",
    "next",
    "section",
    "going",
    "move",
    "image",
    "canvas",
    "let",
    "begin",
    "moving",
    "widget",
    "within",
    "window",
    "need",
    "window",
    "window",
    "equals",
    "tk",
    "followed",
    "also",
    "need",
    "set",
    "geometry",
    "window",
    "window",
    "dot",
    "geometry",
    "let",
    "make",
    "500x500",
    "500",
    "x",
    "500",
    "let",
    "take",
    "look",
    "okay",
    "decent",
    "size",
    "let",
    "add",
    "label",
    "window",
    "actually",
    "race",
    "car",
    "image",
    "want",
    "use",
    "would",
    "like",
    "image",
    "feel",
    "free",
    "pause",
    "video",
    "download",
    "one",
    "would",
    "like",
    "create",
    "photo",
    "image",
    "png",
    "file",
    "going",
    "call",
    "image",
    "equals",
    "photo",
    "image",
    "file",
    "equals",
    "since",
    "within",
    "project",
    "folder",
    "list",
    "file",
    "name",
    "otherwise",
    "might",
    "list",
    "file",
    "path",
    "called",
    "want",
    "add",
    "image",
    "label",
    "necessary",
    "helpful",
    "example",
    "going",
    "call",
    "label",
    "label",
    "label",
    "equals",
    "label",
    "adding",
    "window",
    "going",
    "set",
    "image",
    "equal",
    "image",
    "created",
    "photo",
    "image",
    "image",
    "want",
    "use",
    "simply",
    "change",
    "background",
    "color",
    "could",
    "say",
    "bg",
    "know",
    "red",
    "oh",
    "need",
    "place",
    "sure",
    "label",
    "dot",
    "place",
    "going",
    "place",
    "top",
    "left",
    "corner",
    "x",
    "equals",
    "zero",
    "equals",
    "zero",
    "race",
    "car",
    "whatever",
    "image",
    "used",
    "red",
    "background",
    "get",
    "rid",
    "background",
    "color",
    "prefer",
    "image",
    "use",
    "set",
    "background",
    "color",
    "visual",
    "show",
    "label",
    "currently",
    "let",
    "set",
    "key",
    "bindings",
    "window",
    "let",
    "add",
    "maybe",
    "create",
    "label",
    "image",
    "let",
    "find",
    "w",
    "key",
    "left",
    "right",
    "window",
    "dot",
    "bind",
    "pass",
    "event",
    "well",
    "function",
    "name",
    "want",
    "tie",
    "w",
    "key",
    "function",
    "call",
    "move",
    "underscore",
    "need",
    "define",
    "outside",
    "window",
    "let",
    "define",
    "move",
    "underscore",
    "takes",
    "event",
    "place",
    "parameter",
    "move",
    "label",
    "going",
    "take",
    "label",
    "dot",
    "place",
    "going",
    "place",
    "new",
    "coordinates",
    "x",
    "equals",
    "label",
    "current",
    "position",
    "relative",
    "window",
    "label",
    "dot",
    "w",
    "info",
    "underscore",
    "x",
    "right",
    "similar",
    "equals",
    "label",
    "dot",
    "w",
    "info",
    "underscore",
    "going",
    "subtract",
    "maybe",
    "one",
    "right",
    "need",
    "although",
    "going",
    "move",
    "going",
    "press",
    "w",
    "label",
    "race",
    "car",
    "whatever",
    "image",
    "used",
    "going",
    "move",
    "slowly",
    "going",
    "increase",
    "10",
    "change",
    "drastic",
    "race",
    "car",
    "drifting",
    "space",
    "let",
    "find",
    "keys",
    "sad",
    "right",
    "move",
    "underscore",
    "left",
    "move",
    "left",
    "right",
    "move",
    "right",
    "copy",
    "make",
    "changes",
    "let",
    "begin",
    "move",
    "thing",
    "going",
    "change",
    "within",
    "place",
    "subtracting",
    "10",
    "coordinate",
    "going",
    "add",
    "10",
    "race",
    "car",
    "oh",
    "guess",
    "define",
    "let",
    "real",
    "quick",
    "uh",
    "left",
    "move",
    "left",
    "going",
    "subtract",
    "10",
    "x",
    "coordinate",
    "keep",
    "thing",
    "move",
    "right",
    "move",
    "underscore",
    "right",
    "time",
    "going",
    "add",
    "10",
    "x",
    "stay",
    "okay",
    "image",
    "move",
    "right",
    "left",
    "stop",
    "combine",
    "arrow",
    "keys",
    "capital",
    "u",
    "capital",
    "way",
    "left",
    "left",
    "right",
    "right",
    "use",
    "arrow",
    "keys",
    "move",
    "image",
    "part",
    "video",
    "going",
    "teach",
    "guys",
    "move",
    "image",
    "canvas",
    "time",
    "within",
    "window",
    "need",
    "window",
    "begin",
    "window",
    "equals",
    "tk",
    "followed",
    "going",
    "create",
    "canvas",
    "canvas",
    "equals",
    "canvas",
    "adding",
    "canvas",
    "window",
    "let",
    "set",
    "width",
    "height",
    "width",
    "let",
    "make",
    "500",
    "height",
    "500",
    "well",
    "even",
    "square",
    "need",
    "pack",
    "place",
    "canvas",
    "take",
    "care",
    "let",
    "run",
    "canvas",
    "step",
    "need",
    "add",
    "image",
    "canvas",
    "image",
    "racecar",
    "want",
    "add",
    "need",
    "create",
    "photo",
    "image",
    "file",
    "let",
    "give",
    "photo",
    "image",
    "unique",
    "name",
    "going",
    "call",
    "photo",
    "image",
    "keep",
    "simple",
    "photo",
    "image",
    "equals",
    "photo",
    "image",
    "list",
    "file",
    "path",
    "file",
    "name",
    "since",
    "image",
    "within",
    "project",
    "folder",
    "list",
    "file",
    "name",
    "file",
    "called",
    "next",
    "step",
    "need",
    "give",
    "image",
    "unique",
    "name",
    "image",
    "added",
    "canvas",
    "call",
    "image",
    "equals",
    "need",
    "turn",
    "photo",
    "image",
    "image",
    "added",
    "canvas",
    "type",
    "name",
    "canvas",
    "canvas",
    "dot",
    "create",
    "underscore",
    "image",
    "first",
    "need",
    "list",
    "coordinates",
    "want",
    "place",
    "photo",
    "image",
    "let",
    "place",
    "top",
    "left",
    "corner",
    "x",
    "0",
    "0",
    "need",
    "set",
    "image",
    "image",
    "creating",
    "saying",
    "image",
    "equals",
    "name",
    "photo",
    "image",
    "let",
    "see",
    "far",
    "image",
    "somewhat",
    "cut",
    "top",
    "left",
    "corner",
    "easily",
    "fix",
    "anchoring",
    "image",
    "create",
    "let",
    "end",
    "add",
    "anchor",
    "equals",
    "northwest",
    "fix",
    "problem",
    "image",
    "want",
    "use",
    "move",
    "image",
    "set",
    "key",
    "bindings",
    "type",
    "name",
    "window",
    "dot",
    "bind",
    "pass",
    "two",
    "arguments",
    "event",
    "well",
    "function",
    "name",
    "let",
    "tie",
    "pressing",
    "w",
    "key",
    "moving",
    "first",
    "argument",
    "going",
    "w",
    "second",
    "going",
    "function",
    "name",
    "let",
    "say",
    "move",
    "underscore",
    "let",
    "find",
    "keys",
    "w",
    "left",
    "right",
    "need",
    "define",
    "top",
    "outside",
    "window",
    "let",
    "begin",
    "defining",
    "move",
    "def",
    "move",
    "event",
    "parameter",
    "let",
    "create",
    "definitions",
    "going",
    "rename",
    "move",
    "move",
    "move",
    "left",
    "move",
    "right",
    "okay",
    "next",
    "step",
    "use",
    "canvases",
    "move",
    "function",
    "move",
    "image",
    "certain",
    "amount",
    "pixels",
    "let",
    "begin",
    "move",
    "type",
    "name",
    "canvas",
    "dot",
    "use",
    "move",
    "function",
    "three",
    "arguments",
    "image",
    "want",
    "use",
    "image",
    "called",
    "image",
    "one",
    "race",
    "car",
    "next",
    "argument",
    "amount",
    "pixels",
    "moving",
    "keep",
    "let",
    "say",
    "want",
    "move",
    "10",
    "pixels",
    "would",
    "let",
    "repeat",
    "process",
    "move",
    "move",
    "left",
    "move",
    "right",
    "move",
    "going",
    "change",
    "10",
    "move",
    "left",
    "keep",
    "zero",
    "going",
    "subtract",
    "10",
    "move",
    "right",
    "going",
    "add",
    "10",
    "x",
    "move",
    "right",
    "left",
    "want",
    "bind",
    "arrow",
    "keys",
    "change",
    "event",
    "bind",
    "wsad",
    "keys",
    "well",
    "left",
    "right",
    "time",
    "going",
    "use",
    "arrow",
    "keys",
    "right",
    "left",
    "right",
    "basics",
    "moving",
    "either",
    "widgets",
    "images",
    "canvas",
    "window",
    "would",
    "like",
    "copy",
    "code",
    "examples",
    "post",
    "comments",
    "yeah",
    "basics",
    "moving",
    "widgets",
    "images",
    "python",
    "hey",
    "going",
    "everybody",
    "bro",
    "hope",
    "well",
    "video",
    "going",
    "teach",
    "guys",
    "create",
    "simple",
    "2d",
    "animations",
    "python",
    "sit",
    "back",
    "relax",
    "enjoy",
    "show",
    "alright",
    "fellow",
    "bros",
    "video",
    "going",
    "animating",
    "image",
    "canvas",
    "going",
    "moving",
    "image",
    "left",
    "right",
    "feel",
    "free",
    "download",
    "image",
    "want",
    "use",
    "going",
    "use",
    "ufo",
    "emoji",
    "found",
    "need",
    "two",
    "imports",
    "top",
    "tk",
    "enter",
    "import",
    "everything",
    "usually",
    "also",
    "need",
    "import",
    "time",
    "well",
    "need",
    "window",
    "window",
    "equals",
    "tk",
    "followed",
    "loop",
    "need",
    "canvas",
    "going",
    "call",
    "canvas",
    "canvas",
    "canvas",
    "equals",
    "canvas",
    "adding",
    "canvas",
    "window",
    "going",
    "create",
    "something",
    "called",
    "constant",
    "going",
    "create",
    "constant",
    "width",
    "height",
    "canvas",
    "constant",
    "variable",
    "value",
    "plan",
    "changing",
    "later",
    "common",
    "naming",
    "convention",
    "constant",
    "name",
    "constant",
    "uppercase",
    "want",
    "width",
    "height",
    "canvas",
    "constants",
    "width",
    "going",
    "uppercase",
    "necessary",
    "make",
    "uppercase",
    "common",
    "naming",
    "convention",
    "width",
    "going",
    "set",
    "500",
    "height",
    "set",
    "500",
    "well",
    "width",
    "canvas",
    "going",
    "set",
    "width",
    "equal",
    "constant",
    "500",
    "height",
    "constant",
    "height",
    "reason",
    "making",
    "constants",
    "reusing",
    "lot",
    "later",
    "program",
    "might",
    "well",
    "declare",
    "get",
    "canvas",
    "adding",
    "window",
    "setting",
    "width",
    "constant",
    "width",
    "height",
    "constant",
    "height",
    "need",
    "follow",
    "packing",
    "place",
    "canvas",
    "dot",
    "pack",
    "pack",
    "make",
    "simple",
    "canvas",
    "window",
    "image",
    "want",
    "use",
    "going",
    "animate",
    "need",
    "create",
    "photo",
    "image",
    "file",
    "png",
    "file",
    "called",
    "ufo",
    "probably",
    "going",
    "named",
    "something",
    "different",
    "copy",
    "exactly",
    "need",
    "create",
    "photo",
    "image",
    "going",
    "call",
    "photo",
    "underscore",
    "image",
    "name",
    "whatever",
    "want",
    "equals",
    "photo",
    "image",
    "need",
    "list",
    "file",
    "path",
    "file",
    "name",
    "since",
    "file",
    "within",
    "project",
    "folder",
    "list",
    "file",
    "name",
    "called",
    "next",
    "step",
    "going",
    "take",
    "photo",
    "image",
    "add",
    "photo",
    "image",
    "canvas",
    "also",
    "give",
    "image",
    "unique",
    "name",
    "going",
    "call",
    "image",
    "equals",
    "going",
    "use",
    "canvases",
    "create",
    "image",
    "function",
    "canvas",
    "dot",
    "create",
    "image",
    "arguments",
    "need",
    "pass",
    "want",
    "image",
    "appear",
    "need",
    "set",
    "coordinates",
    "want",
    "appear",
    "top",
    "left",
    "corner",
    "x",
    "zero",
    "zero",
    "image",
    "going",
    "set",
    "equal",
    "photo",
    "image",
    "whatever",
    "named",
    "lastly",
    "anchor",
    "going",
    "anchor",
    "northwest",
    "corner",
    "keep",
    "simple",
    "image",
    "canvas",
    "top",
    "left",
    "corner",
    "ufo",
    "piloted",
    "green",
    "alien",
    "waving",
    "aliens",
    "usually",
    "friendly",
    "unless",
    "abducting",
    "next",
    "step",
    "create",
    "loop",
    "say",
    "wow",
    "true",
    "continue",
    "forever",
    "close",
    "program",
    "looking",
    "code",
    "game",
    "might",
    "say",
    "instead",
    "running",
    "running",
    "boolean",
    "variable",
    "contains",
    "either",
    "true",
    "false",
    "true",
    "game",
    "running",
    "going",
    "continue",
    "moving",
    "characters",
    "screen",
    "somebody",
    "pauses",
    "game",
    "closes",
    "game",
    "flip",
    "running",
    "variable",
    "false",
    "keep",
    "things",
    "simple",
    "say",
    "wow",
    "true",
    "something",
    "might",
    "see",
    "want",
    "get",
    "coordinates",
    "image",
    "within",
    "canvas",
    "return",
    "list",
    "coordinates",
    "let",
    "create",
    "list",
    "called",
    "coordinates",
    "coordinates",
    "equals",
    "canvas",
    "use",
    "chords",
    "function",
    "get",
    "coordinates",
    "guess",
    "short",
    "coordinates",
    "getting",
    "coordinates",
    "image",
    "pass",
    "function",
    "let",
    "print",
    "see",
    "returns",
    "print",
    "coordinates",
    "okay",
    "update",
    "window",
    "cycle",
    "loop",
    "use",
    "update",
    "function",
    "window",
    "also",
    "thread",
    "sleep",
    "let",
    "say",
    "seconds",
    "time",
    "dot",
    "sleep",
    "one",
    "quick",
    "rundown",
    "going",
    "far",
    "within",
    "loop",
    "going",
    "first",
    "get",
    "coordinates",
    "image",
    "located",
    "print",
    "coordinates",
    "console",
    "window",
    "part",
    "required",
    "going",
    "help",
    "us",
    "learning",
    "purposes",
    "update",
    "window",
    "changes",
    "thread",
    "charge",
    "running",
    "program",
    "going",
    "sleep",
    "believe",
    "hundredth",
    "second",
    "run",
    "image",
    "staying",
    "place",
    "know",
    "loop",
    "running",
    "continuously",
    "printing",
    "coordinates",
    "first",
    "number",
    "x",
    "position",
    "second",
    "number",
    "position",
    "going",
    "give",
    "image",
    "speed",
    "velocity",
    "like",
    "call",
    "velocity",
    "fact",
    "going",
    "give",
    "image",
    "two",
    "velocities",
    "one",
    "fast",
    "image",
    "moving",
    "another",
    "fast",
    "moving",
    "axis",
    "going",
    "create",
    "two",
    "variables",
    "one",
    "called",
    "x",
    "velocity",
    "going",
    "set",
    "equal",
    "one",
    "velocity",
    "set",
    "one",
    "well",
    "okay",
    "need",
    "update",
    "position",
    "image",
    "let",
    "update",
    "window",
    "going",
    "type",
    "name",
    "canvas",
    "use",
    "move",
    "function",
    "move",
    "function",
    "takes",
    "three",
    "arguments",
    "want",
    "move",
    "want",
    "move",
    "image",
    "ufo",
    "far",
    "want",
    "move",
    "image",
    "axis",
    "coordinate",
    "want",
    "update",
    "x",
    "velocity",
    "x",
    "position",
    "image",
    "going",
    "pass",
    "x",
    "velocity",
    "variable",
    "keep",
    "say",
    "zero",
    "iteration",
    "loop",
    "ufo",
    "going",
    "move",
    "one",
    "pixel",
    "right",
    "going",
    "go",
    "void",
    "forever",
    "replaced",
    "x",
    "velocity",
    "zero",
    "set",
    "velocity",
    "image",
    "going",
    "travel",
    "continue",
    "void",
    "forever",
    "combine",
    "together",
    "going",
    "move",
    "diagonally",
    "right",
    "want",
    "image",
    "bounce",
    "walls",
    "going",
    "add",
    "statements",
    "going",
    "begin",
    "image",
    "bounce",
    "left",
    "right",
    "walls",
    "let",
    "set",
    "velocity",
    "zero",
    "image",
    "moving",
    "left",
    "right",
    "move",
    "image",
    "add",
    "statement",
    "going",
    "check",
    "see",
    "x",
    "position",
    "image",
    "either",
    "greater",
    "width",
    "canvas",
    "less",
    "zero",
    "take",
    "coordinates",
    "going",
    "get",
    "first",
    "element",
    "list",
    "zero",
    "x",
    "x",
    "value",
    "coordinates",
    "element",
    "zero",
    "greater",
    "equal",
    "width",
    "window",
    "constant",
    "place",
    "coordinates",
    "well",
    "x",
    "within",
    "coordinates",
    "greater",
    "equal",
    "width",
    "coordinates",
    "index",
    "0",
    "less",
    "0",
    "want",
    "reverse",
    "direction",
    "flip",
    "velocity",
    "want",
    "change",
    "x",
    "velocity",
    "make",
    "negative",
    "number",
    "one",
    "easy",
    "way",
    "take",
    "x",
    "velocity",
    "equals",
    "x",
    "velocity",
    "times",
    "negative",
    "one",
    "another",
    "way",
    "writing",
    "say",
    "x",
    "velocity",
    "minus",
    "negative",
    "velocity",
    "ends",
    "happening",
    "image",
    "reaches",
    "right",
    "border",
    "going",
    "bounce",
    "back",
    "however",
    "bounces",
    "back",
    "reaches",
    "top",
    "left",
    "corner",
    "image",
    "need",
    "factor",
    "width",
    "image",
    "well",
    "going",
    "create",
    "two",
    "new",
    "variables",
    "let",
    "right",
    "loop",
    "want",
    "determine",
    "height",
    "width",
    "photo",
    "image",
    "going",
    "write",
    "let",
    "call",
    "two",
    "values",
    "image",
    "underscore",
    "width",
    "image",
    "underscore",
    "height",
    "need",
    "determine",
    "width",
    "height",
    "photo",
    "image",
    "function",
    "type",
    "name",
    "photo",
    "image",
    "dot",
    "width",
    "function",
    "thing",
    "height",
    "photo",
    "image",
    "dot",
    "height",
    "reuse",
    "going",
    "add",
    "one",
    "line",
    "sift",
    "statement",
    "x",
    "position",
    "image",
    "greater",
    "uh",
    "greater",
    "equal",
    "width",
    "window",
    "minus",
    "width",
    "image",
    "going",
    "put",
    "within",
    "parentheses",
    "keep",
    "organized",
    "ends",
    "happening",
    "right",
    "portion",
    "image",
    "hits",
    "right",
    "wall",
    "going",
    "bounce",
    "let",
    "thing",
    "velocity",
    "going",
    "replace",
    "coordinates",
    "index",
    "0",
    "1",
    "change",
    "well",
    "replace",
    "height",
    "image",
    "underscore",
    "height",
    "going",
    "change",
    "velocity",
    "time",
    "move",
    "image",
    "let",
    "also",
    "add",
    "velocity",
    "image",
    "going",
    "bounce",
    "walls",
    "forever",
    "kind",
    "predictable",
    "since",
    "set",
    "x",
    "equal",
    "one",
    "let",
    "change",
    "speeds",
    "kind",
    "spice",
    "things",
    "let",
    "say",
    "x",
    "velocity",
    "three",
    "velocity",
    "two",
    "going",
    "go",
    "completely",
    "different",
    "direction",
    "mess",
    "speeds",
    "however",
    "want",
    "guys",
    "add",
    "background",
    "image",
    "well",
    "going",
    "reuse",
    "image",
    "space",
    "java",
    "video",
    "topic",
    "need",
    "create",
    "photo",
    "image",
    "going",
    "copy",
    "normal",
    "image",
    "moving",
    "animating",
    "called",
    "well",
    "name",
    "file",
    "going",
    "give",
    "image",
    "different",
    "name",
    "maybe",
    "call",
    "background",
    "underscore",
    "photo",
    "going",
    "add",
    "photo",
    "canvas",
    "going",
    "call",
    "different",
    "name",
    "call",
    "background",
    "right",
    "window",
    "background",
    "image",
    "moves",
    "top",
    "background",
    "make",
    "sure",
    "add",
    "create",
    "background",
    "add",
    "images",
    "otherwise",
    "background",
    "might",
    "overlap",
    "image",
    "alright",
    "basics",
    "simple",
    "animations",
    "python",
    "want",
    "copy",
    "code",
    "post",
    "comments",
    "yeah",
    "basics",
    "animations",
    "python",
    "hey",
    "going",
    "everybody",
    "bro",
    "hope",
    "well",
    "video",
    "going",
    "teach",
    "guys",
    "animate",
    "multiple",
    "objects",
    "python",
    "sit",
    "back",
    "relax",
    "enjoy",
    "show",
    "welcome",
    "back",
    "fellow",
    "bros",
    "video",
    "going",
    "animating",
    "multiple",
    "objects",
    "within",
    "window",
    "specifically",
    "animate",
    "circles",
    "circles",
    "characteristics",
    "speeds",
    "directions",
    "need",
    "two",
    "imports",
    "begin",
    "ck",
    "enter",
    "import",
    "everything",
    "also",
    "importing",
    "everything",
    "time",
    "module",
    "well",
    "need",
    "window",
    "window",
    "equals",
    "tk",
    "followed",
    "loop",
    "going",
    "create",
    "two",
    "constants",
    "one",
    "width",
    "one",
    "height",
    "let",
    "set",
    "width",
    "equal",
    "500",
    "height",
    "equal",
    "500",
    "well",
    "create",
    "canvas",
    "animating",
    "circles",
    "going",
    "create",
    "canvas",
    "let",
    "create",
    "canvas",
    "canvas",
    "equals",
    "canvas",
    "going",
    "adding",
    "canvas",
    "window",
    "set",
    "width",
    "canvas",
    "equal",
    "constant",
    "width",
    "500",
    "height",
    "equal",
    "constant",
    "height",
    "also",
    "500",
    "add",
    "canvas",
    "using",
    "pack",
    "function",
    "canvas",
    "going",
    "creating",
    "multiple",
    "circles",
    "let",
    "pretend",
    "different",
    "sports",
    "balls",
    "like",
    "tennis",
    "ball",
    "baseball",
    "volleyball",
    "bowling",
    "ball",
    "bouncing",
    "borders",
    "encounters",
    "border",
    "change",
    "direction",
    "since",
    "going",
    "creating",
    "multiple",
    "objects",
    "think",
    "best",
    "another",
    "class",
    "let",
    "create",
    "another",
    "class",
    "going",
    "go",
    "file",
    "new",
    "python",
    "file",
    "let",
    "call",
    "class",
    "ball",
    "click",
    "python",
    "file",
    "need",
    "define",
    "class",
    "class",
    "ball",
    "also",
    "need",
    "constructor",
    "ball",
    "class",
    "create",
    "one",
    "def",
    "two",
    "underscores",
    "two",
    "underscores",
    "set",
    "parameters",
    "want",
    "receive",
    "create",
    "ball",
    "object",
    "let",
    "pretend",
    "going",
    "creating",
    "volleyball",
    "begin",
    "let",
    "call",
    "ball",
    "volley",
    "underscore",
    "ball",
    "equals",
    "ball",
    "pass",
    "arguments",
    "let",
    "set",
    "parameters",
    "first",
    "want",
    "receive",
    "one",
    "want",
    "receive",
    "canvas",
    "actually",
    "draw",
    "oval",
    "draw",
    "ball",
    "also",
    "x",
    "position",
    "diameter",
    "x",
    "velocity",
    "velocity",
    "color",
    "right",
    "create",
    "ball",
    "like",
    "volleyball",
    "going",
    "pass",
    "whatever",
    "parameters",
    "require",
    "need",
    "canvas",
    "x",
    "diameter",
    "x",
    "velocity",
    "velocity",
    "color",
    "within",
    "constructor",
    "ball",
    "passing",
    "canvas",
    "kind",
    "like",
    "widgets",
    "specifying",
    "going",
    "adding",
    "widget",
    "going",
    "adding",
    "ball",
    "canvas",
    "also",
    "need",
    "x",
    "diameter",
    "let",
    "make",
    "simple",
    "setting",
    "x",
    "zero",
    "diameter",
    "let",
    "set",
    "maybe",
    "100",
    "also",
    "need",
    "x",
    "velocity",
    "velocity",
    "let",
    "set",
    "one",
    "color",
    "let",
    "pass",
    "string",
    "like",
    "white",
    "let",
    "head",
    "back",
    "ball",
    "class",
    "finish",
    "assigning",
    "arguments",
    "going",
    "receive",
    "first",
    "step",
    "say",
    "self",
    "dot",
    "canvas",
    "equals",
    "canvas",
    "receive",
    "passed",
    "us",
    "argument",
    "next",
    "step",
    "draw",
    "oval",
    "draw",
    "ball",
    "say",
    "self",
    "dot",
    "image",
    "equals",
    "canvas",
    "dot",
    "create",
    "underscore",
    "oval",
    "creating",
    "ovals",
    "pass",
    "x",
    "circles",
    "diameter",
    "equal",
    "width",
    "height",
    "pass",
    "diameter",
    "twice",
    "lastly",
    "fill",
    "color",
    "say",
    "equal",
    "color",
    "receive",
    "white",
    "going",
    "set",
    "x",
    "velocity",
    "velocity",
    "related",
    "direction",
    "initially",
    "going",
    "head",
    "self",
    "dot",
    "x",
    "velocity",
    "equals",
    "x",
    "velocity",
    "receive",
    "thing",
    "velocity",
    "velocity",
    "equals",
    "velocity",
    "since",
    "another",
    "class",
    "need",
    "import",
    "class",
    "ball",
    "import",
    "everything",
    "see",
    "red",
    "underline",
    "went",
    "away",
    "let",
    "see",
    "happens",
    "volleyball",
    "currently",
    "moving",
    "next",
    "step",
    "let",
    "create",
    "function",
    "within",
    "ball",
    "class",
    "called",
    "move",
    "call",
    "upon",
    "constructor",
    "cef",
    "move",
    "take",
    "self",
    "argument",
    "first",
    "thing",
    "get",
    "coordinates",
    "say",
    "coordinates",
    "list",
    "coordinates",
    "equals",
    "self",
    "dot",
    "canvas",
    "dot",
    "c",
    "rds",
    "pass",
    "self",
    "dot",
    "image",
    "print",
    "coordinates",
    "see",
    "right",
    "create",
    "loop",
    "within",
    "main",
    "class",
    "let",
    "add",
    "near",
    "end",
    "say",
    "true",
    "running",
    "let",
    "move",
    "volleyball",
    "volleyball",
    "dot",
    "move",
    "call",
    "move",
    "function",
    "volleyball",
    "update",
    "window",
    "window",
    "dot",
    "update",
    "refreshes",
    "sleep",
    "maybe",
    "hundredth",
    "second",
    "time",
    "dot",
    "sleep",
    "put",
    "whatever",
    "want",
    "going",
    "first",
    "print",
    "coordinates",
    "ball",
    "currently",
    "moving",
    "time",
    "list",
    "four",
    "coordinates",
    "zero",
    "zero",
    "top",
    "left",
    "corner",
    "100",
    "100",
    "bottom",
    "right",
    "corner",
    "time",
    "four",
    "coordinates",
    "deal",
    "top",
    "left",
    "corner",
    "well",
    "bottom",
    "right",
    "corner",
    "next",
    "step",
    "move",
    "image",
    "self",
    "dot",
    "canvas",
    "dot",
    "move",
    "object",
    "going",
    "move",
    "going",
    "move",
    "self",
    "dot",
    "image",
    "directions",
    "velocity",
    "well",
    "self",
    "dot",
    "velocity",
    "ball",
    "going",
    "move",
    "across",
    "window",
    "right",
    "displaying",
    "coordinates",
    "bounds",
    "set",
    "going",
    "continue",
    "void",
    "forever",
    "set",
    "statements",
    "check",
    "see",
    "one",
    "borders",
    "touches",
    "one",
    "walls",
    "window",
    "going",
    "change",
    "direction",
    "let",
    "check",
    "see",
    "left",
    "right",
    "side",
    "ball",
    "touches",
    "one",
    "left",
    "right",
    "borders",
    "let",
    "write",
    "statement",
    "let",
    "take",
    "look",
    "coordinates",
    "coordinates",
    "index",
    "2",
    "one",
    "0",
    "1",
    "bottom",
    "right",
    "corner",
    "two",
    "sets",
    "coordinates",
    "coordinates",
    "index",
    "2",
    "greater",
    "equal",
    "going",
    "put",
    "within",
    "parentheses",
    "self",
    "dot",
    "canvas",
    "need",
    "get",
    "width",
    "canvas",
    "one",
    "way",
    "use",
    "w",
    "info",
    "underscore",
    "function",
    "going",
    "get",
    "width",
    "canvas",
    "let",
    "add",
    "one",
    "thing",
    "coordinates",
    "index",
    "zero",
    "less",
    "zero",
    "ball",
    "touches",
    "left",
    "right",
    "border",
    "want",
    "change",
    "direction",
    "flip",
    "x",
    "velocity",
    "velocity",
    "equals",
    "negative",
    "self",
    "x",
    "velocity",
    "let",
    "thing",
    "top",
    "bottom",
    "borders",
    "let",
    "copy",
    "replace",
    "coordinates",
    "index",
    "two",
    "three",
    "also",
    "replace",
    "w",
    "info",
    "underscore",
    "width",
    "height",
    "coordinates",
    "index",
    "one",
    "change",
    "self",
    "dot",
    "x",
    "velocity",
    "velocity",
    "thing",
    "well",
    "alright",
    "everything",
    "let",
    "try",
    "let",
    "see",
    "ball",
    "actually",
    "bounces",
    "borders",
    "pretty",
    "cool",
    "everything",
    "need",
    "within",
    "ball",
    "class",
    "need",
    "create",
    "multiple",
    "balls",
    "construct",
    "let",
    "say",
    "time",
    "would",
    "like",
    "tennis",
    "ball",
    "going",
    "name",
    "volleyball",
    "tennis",
    "ball",
    "let",
    "make",
    "diameter",
    "smaller",
    "like",
    "five",
    "make",
    "lot",
    "faster",
    "like",
    "velocity",
    "let",
    "say",
    "four",
    "three",
    "color",
    "let",
    "make",
    "yellow",
    "also",
    "need",
    "call",
    "move",
    "function",
    "tennis",
    "ball",
    "within",
    "loop",
    "tennis",
    "ball",
    "dot",
    "move",
    "also",
    "tennis",
    "ball",
    "moving",
    "across",
    "screen",
    "different",
    "direction",
    "technically",
    "need",
    "print",
    "coordinates",
    "tend",
    "teaching",
    "purposes",
    "better",
    "demonstrate",
    "ball",
    "class",
    "acting",
    "blueprint",
    "balls",
    "created",
    "behavior",
    "exhibit",
    "need",
    "create",
    "ball",
    "come",
    "name",
    "ball",
    "call",
    "ball",
    "constructor",
    "take",
    "care",
    "us",
    "kind",
    "like",
    "widgets",
    "need",
    "create",
    "another",
    "ball",
    "come",
    "unique",
    "name",
    "ball",
    "instantiate",
    "using",
    "ball",
    "class",
    "created",
    "time",
    "let",
    "create",
    "basketball",
    "rename",
    "basketball",
    "pass",
    "different",
    "arguments",
    "based",
    "want",
    "customize",
    "unique",
    "ball",
    "diameter",
    "let",
    "say",
    "125",
    "x",
    "velocity",
    "let",
    "set",
    "something",
    "fast",
    "like",
    "eight",
    "seven",
    "color",
    "let",
    "change",
    "orange",
    "make",
    "sure",
    "also",
    "call",
    "move",
    "function",
    "basketball",
    "dot",
    "move",
    "basketball",
    "moving",
    "across",
    "screen",
    "right",
    "everybody",
    "basics",
    "animating",
    "multiple",
    "objects",
    "python",
    "want",
    "copy",
    "code",
    "post",
    "comments",
    "yeah",
    "animate",
    "multiple",
    "objects",
    "python",
    "hey",
    "going",
    "everybody",
    "ibro",
    "hope",
    "well",
    "video",
    "going",
    "teach",
    "guys",
    "create",
    "clock",
    "program",
    "python",
    "sit",
    "back",
    "relax",
    "enjoy",
    "show",
    "right",
    "fellow",
    "bros",
    "video",
    "going",
    "creating",
    "clock",
    "gui",
    "program",
    "need",
    "imports",
    "tk",
    "enter",
    "import",
    "everything",
    "time",
    "import",
    "everything",
    "well",
    "need",
    "window",
    "window",
    "equals",
    "tk",
    "followed",
    "loop",
    "program",
    "going",
    "creating",
    "three",
    "separate",
    "labels",
    "one",
    "time",
    "another",
    "day",
    "week",
    "another",
    "date",
    "let",
    "begin",
    "displaying",
    "time",
    "work",
    "day",
    "week",
    "date",
    "later",
    "let",
    "create",
    "label",
    "time",
    "called",
    "time",
    "label",
    "equals",
    "label",
    "adding",
    "window",
    "let",
    "set",
    "font",
    "going",
    "choose",
    "maybe",
    "ariel",
    "size",
    "50",
    "somewhat",
    "large",
    "going",
    "change",
    "foreground",
    "color",
    "font",
    "color",
    "pick",
    "hex",
    "value",
    "green",
    "0",
    "0",
    "f",
    "0",
    "0",
    "feel",
    "free",
    "pick",
    "whatever",
    "color",
    "want",
    "also",
    "going",
    "set",
    "background",
    "color",
    "pick",
    "hex",
    "value",
    "color",
    "name",
    "going",
    "say",
    "black",
    "going",
    "pack",
    "label",
    "time",
    "label",
    "dot",
    "pack",
    "going",
    "call",
    "function",
    "call",
    "update",
    "define",
    "every",
    "second",
    "passed",
    "use",
    "recursive",
    "function",
    "keep",
    "updating",
    "time",
    "every",
    "one",
    "second",
    "let",
    "define",
    "function",
    "def",
    "update",
    "function",
    "within",
    "time",
    "module",
    "called",
    "strf",
    "time",
    "use",
    "return",
    "current",
    "time",
    "format",
    "however",
    "want",
    "going",
    "actually",
    "place",
    "within",
    "string",
    "variable",
    "call",
    "time",
    "string",
    "function",
    "strf",
    "time",
    "actually",
    "going",
    "go",
    "python",
    "website",
    "give",
    "example",
    "works",
    "python",
    "website",
    "strf",
    "time",
    "function",
    "converts",
    "tuple",
    "representing",
    "time",
    "returned",
    "gm",
    "time",
    "local",
    "time",
    "string",
    "specified",
    "format",
    "arguments",
    "call",
    "function",
    "pass",
    "directives",
    "arguments",
    "based",
    "want",
    "display",
    "want",
    "display",
    "current",
    "time",
    "directives",
    "pass",
    "let",
    "say",
    "want",
    "12",
    "hour",
    "clock",
    "represented",
    "decimal",
    "number",
    "1",
    "12",
    "well",
    "would",
    "pass",
    "percent",
    "argument",
    "want",
    "minutes",
    "would",
    "right",
    "percent",
    "want",
    "seconds",
    "percent",
    "going",
    "pass",
    "directives",
    "arguments",
    "within",
    "function",
    "pass",
    "format",
    "specifiers",
    "directives",
    "want",
    "percent",
    "followed",
    "percent",
    "percent",
    "alright",
    "uh",
    "also",
    "within",
    "quotes",
    "forget",
    "okay",
    "display",
    "current",
    "time",
    "oh",
    "also",
    "update",
    "time",
    "label",
    "time",
    "label",
    "dot",
    "config",
    "text",
    "equals",
    "time",
    "string",
    "remember",
    "returns",
    "string",
    "text",
    "text",
    "equals",
    "time",
    "string",
    "display",
    "current",
    "time",
    "right",
    "six",
    "morning",
    "however",
    "get",
    "one",
    "long",
    "jumbled",
    "number",
    "would",
    "good",
    "idea",
    "separated",
    "numbers",
    "within",
    "strf",
    "time",
    "function",
    "going",
    "add",
    "colons",
    "separate",
    "values",
    "display",
    "current",
    "time",
    "currently",
    "6",
    "46",
    "morning",
    "let",
    "add",
    "pm",
    "end",
    "directive",
    "percent",
    "lowercase",
    "p",
    "6",
    "46",
    "update",
    "label",
    "every",
    "one",
    "second",
    "reflect",
    "current",
    "time",
    "well",
    "good",
    "question",
    "glad",
    "asked",
    "going",
    "use",
    "time",
    "labels",
    "function",
    "pass",
    "delay",
    "function",
    "want",
    "call",
    "delay",
    "let",
    "say",
    "want",
    "call",
    "function",
    "update",
    "every",
    "1000",
    "milliseconds",
    "one",
    "second",
    "pass",
    "delay",
    "argument",
    "1000",
    "milliseconds",
    "function",
    "want",
    "call",
    "going",
    "perform",
    "known",
    "recursive",
    "function",
    "going",
    "call",
    "function",
    "within",
    "1000",
    "seconds",
    "going",
    "call",
    "update",
    "going",
    "repeat",
    "process",
    "going",
    "return",
    "time",
    "format",
    "time",
    "update",
    "label",
    "new",
    "time",
    "ends",
    "happening",
    "clock",
    "going",
    "update",
    "every",
    "1000",
    "milliseconds",
    "let",
    "add",
    "labels",
    "let",
    "say",
    "day",
    "week",
    "going",
    "copy",
    "let",
    "rename",
    "day",
    "label",
    "probably",
    "want",
    "size",
    "font",
    "let",
    "say",
    "ink",
    "free",
    "like",
    "font",
    "size",
    "maybe",
    "25",
    "get",
    "rid",
    "coloring",
    "process",
    "really",
    "let",
    "replace",
    "time",
    "string",
    "day",
    "string",
    "directive",
    "strf",
    "time",
    "display",
    "day",
    "week",
    "percent",
    "going",
    "replace",
    "time",
    "label",
    "day",
    "label",
    "text",
    "equals",
    "day",
    "string",
    "display",
    "day",
    "week",
    "currently",
    "wednesday",
    "want",
    "display",
    "current",
    "date",
    "create",
    "label",
    "call",
    "date",
    "label",
    "make",
    "font",
    "slightly",
    "bigger",
    "maybe",
    "copy",
    "day",
    "string",
    "rename",
    "date",
    "string",
    "options",
    "date",
    "want",
    "display",
    "name",
    "month",
    "day",
    "year",
    "would",
    "percent",
    "capital",
    "b",
    "percent",
    "lowercase",
    "going",
    "add",
    "comma",
    "separate",
    "day",
    "year",
    "percent",
    "capital",
    "want",
    "set",
    "text",
    "date",
    "label",
    "date",
    "string",
    "display",
    "current",
    "date",
    "one",
    "quick",
    "change",
    "think",
    "make",
    "right",
    "three",
    "different",
    "labels",
    "time",
    "label",
    "day",
    "label",
    "date",
    "label",
    "right",
    "using",
    "function",
    "time",
    "label",
    "since",
    "different",
    "labels",
    "think",
    "replace",
    "time",
    "label",
    "window",
    "window",
    "function",
    "well",
    "1000",
    "milliseconds",
    "passed",
    "update",
    "time",
    "day",
    "week",
    "date",
    "right",
    "basics",
    "creating",
    "simple",
    "clock",
    "program",
    "python",
    "want",
    "copy",
    "code",
    "post",
    "comments",
    "yeah",
    "basics",
    "creating",
    "clock",
    "python",
    "hey",
    "going",
    "everybody",
    "bro",
    "hope",
    "well",
    "video",
    "going",
    "show",
    "send",
    "email",
    "using",
    "python",
    "sit",
    "back",
    "relax",
    "enjoy",
    "show",
    "oh",
    "quick",
    "note",
    "going",
    "need",
    "gmail",
    "account",
    "sign",
    "well",
    "username",
    "password",
    "set",
    "ready",
    "begin",
    "right",
    "let",
    "begin",
    "importing",
    "simple",
    "mail",
    "transfer",
    "protocol",
    "library",
    "need",
    "couple",
    "variables",
    "hold",
    "strings",
    "let",
    "say",
    "sender",
    "receiver",
    "password",
    "subject",
    "email",
    "well",
    "body",
    "email",
    "okay",
    "sender",
    "going",
    "sending",
    "email",
    "enter",
    "email",
    "going",
    "make",
    "one",
    "actually",
    "sender",
    "would",
    "better",
    "would",
    "say",
    "let",
    "change",
    "sender",
    "let",
    "say",
    "receiver",
    "going",
    "send",
    "email",
    "receiver",
    "actually",
    "enter",
    "emails",
    "use",
    "owner",
    "person",
    "intend",
    "send",
    "email",
    "test",
    "probably",
    "work",
    "assuming",
    "enter",
    "password",
    "gmail",
    "account",
    "let",
    "say",
    "password123",
    "subject",
    "uh",
    "let",
    "say",
    "python",
    "email",
    "test",
    "body",
    "want",
    "say",
    "within",
    "email",
    "wrote",
    "email",
    "okay",
    "good",
    "remember",
    "going",
    "want",
    "change",
    "actual",
    "gmail",
    "account",
    "want",
    "send",
    "valid",
    "email",
    "address",
    "make",
    "sure",
    "use",
    "password",
    "gmail",
    "account",
    "okay",
    "going",
    "create",
    "header",
    "email",
    "syntax",
    "little",
    "strange",
    "going",
    "say",
    "message",
    "f",
    "triple",
    "quotes",
    "triple",
    "quotes",
    "triple",
    "quote",
    "string",
    "span",
    "multiple",
    "lines",
    "text",
    "first",
    "thing",
    "enter",
    "within",
    "header",
    "since",
    "using",
    "insert",
    "variable",
    "given",
    "location",
    "insert",
    "pair",
    "curly",
    "braces",
    "sender",
    "next",
    "line",
    "colon",
    "receiver",
    "next",
    "line",
    "subject",
    "colon",
    "subject",
    "title",
    "email",
    "going",
    "add",
    "new",
    "line",
    "insert",
    "body",
    "want",
    "give",
    "name",
    "send",
    "email",
    "let",
    "say",
    "maybe",
    "snoop",
    "dogg",
    "somebody",
    "want",
    "send",
    "email",
    "give",
    "name",
    "say",
    "like",
    "nicholas",
    "cage",
    "necessary",
    "okay",
    "header",
    "completed",
    "let",
    "add",
    "note",
    "header",
    "okay",
    "going",
    "create",
    "server",
    "object",
    "server",
    "equals",
    "two",
    "arguments",
    "first",
    "smtp",
    "argument",
    "port",
    "number",
    "going",
    "587",
    "default",
    "mail",
    "submission",
    "port",
    "587",
    "going",
    "take",
    "server",
    "object",
    "start",
    "tls",
    "transport",
    "layer",
    "security",
    "okay",
    "need",
    "log",
    "server",
    "dot",
    "login",
    "pass",
    "sender",
    "email",
    "us",
    "well",
    "password",
    "password",
    "let",
    "print",
    "logged",
    "eventually",
    "place",
    "within",
    "try",
    "accept",
    "block",
    "later",
    "right",
    "send",
    "email",
    "type",
    "server",
    "dot",
    "send",
    "mail",
    "pass",
    "self",
    "sender",
    "receiver",
    "message",
    "sender",
    "comma",
    "receiver",
    "comma",
    "message",
    "let",
    "print",
    "confirmation",
    "print",
    "email",
    "sent",
    "run",
    "program",
    "may",
    "encounter",
    "error",
    "smtp",
    "authentication",
    "error",
    "either",
    "means",
    "username",
    "password",
    "combination",
    "correct",
    "need",
    "turn",
    "less",
    "secure",
    "app",
    "access",
    "gmail",
    "account",
    "find",
    "however",
    "would",
    "recommend",
    "turning",
    "back",
    "done",
    "program",
    "account",
    "less",
    "secure",
    "liable",
    "get",
    "hacked",
    "hey",
    "know",
    "let",
    "place",
    "code",
    "within",
    "try",
    "block",
    "try",
    "code",
    "encounter",
    "exception",
    "catch",
    "handle",
    "properly",
    "try",
    "four",
    "lines",
    "code",
    "handle",
    "exception",
    "smt",
    "lib",
    "dot",
    "smtp",
    "authentication",
    "error",
    "means",
    "could",
    "sign",
    "let",
    "print",
    "unable",
    "sign",
    "going",
    "run",
    "one",
    "time",
    "instead",
    "getting",
    "ugly",
    "error",
    "get",
    "simple",
    "message",
    "says",
    "unable",
    "sign",
    "proper",
    "username",
    "password",
    "combination",
    "gmail",
    "account",
    "need",
    "set",
    "less",
    "secure",
    "app",
    "access",
    "make",
    "sure",
    "turn",
    "back",
    "done",
    "able",
    "send",
    "email",
    "let",
    "try",
    "logged",
    "email",
    "sent",
    "snapshot",
    "email",
    "received",
    "blurred",
    "actual",
    "email",
    "want",
    "public",
    "guys",
    "weird",
    "sender",
    "receiver",
    "gave",
    "nickname",
    "snoop",
    "dogg",
    "says",
    "snoop",
    "nicholas",
    "receiver",
    "actually",
    "need",
    "name",
    "long",
    "sender",
    "receiver",
    "fields",
    "filled",
    "good",
    "subject",
    "python",
    "email",
    "test",
    "well",
    "body",
    "wrote",
    "email",
    "well",
    "everybody",
    "write",
    "send",
    "simple",
    "email",
    "using",
    "python",
    "would",
    "like",
    "copy",
    "code",
    "post",
    "comment",
    "section",
    "yeah",
    "send",
    "simple",
    "email",
    "using",
    "python",
    "hey",
    "going",
    "everybody",
    "bro",
    "hope",
    "well",
    "video",
    "going",
    "show",
    "run",
    "python",
    "file",
    "using",
    "command",
    "prompt",
    "sit",
    "back",
    "relax",
    "enjoy",
    "show",
    "hey",
    "today",
    "video",
    "going",
    "show",
    "run",
    "python",
    "file",
    "command",
    "prompt",
    "first",
    "need",
    "script",
    "work",
    "let",
    "make",
    "simple",
    "program",
    "let",
    "say",
    "print",
    "hello",
    "world",
    "maybe",
    "ask",
    "user",
    "input",
    "name",
    "equals",
    "input",
    "name",
    "end",
    "print",
    "word",
    "hello",
    "plus",
    "user",
    "name",
    "okay",
    "let",
    "save",
    "place",
    "remember",
    "perhaps",
    "desktop",
    "save",
    "file",
    "separate",
    "location",
    "go",
    "file",
    "save",
    "pick",
    "name",
    "python",
    "file",
    "directory",
    "click",
    "three",
    "dots",
    "pick",
    "location",
    "want",
    "save",
    "make",
    "easy",
    "going",
    "save",
    "python",
    "file",
    "desktop",
    "click",
    "ok",
    "name",
    "python",
    "file",
    "mine",
    "hello",
    "underscore",
    "world",
    "dot",
    "py",
    "click",
    "ok",
    "second",
    "step",
    "open",
    "command",
    "prompt",
    "open",
    "command",
    "prompt",
    "search",
    "cmd",
    "using",
    "mac",
    "believe",
    "terminal",
    "step",
    "number",
    "three",
    "need",
    "navigate",
    "directory",
    "contains",
    "python",
    "file",
    "saved",
    "python",
    "file",
    "desktop",
    "right",
    "click",
    "file",
    "go",
    "location",
    "copy",
    "address",
    "within",
    "command",
    "prompt",
    "type",
    "cd",
    "change",
    "directory",
    "space",
    "paste",
    "directory",
    "contains",
    "python",
    "file",
    "hit",
    "enter",
    "last",
    "step",
    "need",
    "invoke",
    "python",
    "interpreter",
    "typing",
    "python",
    "space",
    "name",
    "script",
    "name",
    "script",
    "hello",
    "underscore",
    "world",
    "dot",
    "p",
    "hit",
    "enter",
    "run",
    "script",
    "hello",
    "world",
    "name",
    "bro",
    "hello",
    "bro",
    "run",
    "python",
    "file",
    "command",
    "prompt",
    "post",
    "notes",
    "comments",
    "section",
    "well",
    "yeah",
    "run",
    "python",
    "file",
    "command",
    "prompt",
    "bro",
    "hope",
    "well",
    "video",
    "going",
    "show",
    "use",
    "pip",
    "python",
    "download",
    "packages",
    "modules",
    "sit",
    "back",
    "relax",
    "enjoy",
    "show",
    "alright",
    "people",
    "pip",
    "python",
    "pip",
    "package",
    "manager",
    "packages",
    "modules",
    "python",
    "package",
    "index",
    "using",
    "python",
    "version",
    "pip",
    "already",
    "installed",
    "using",
    "python",
    "version",
    "one",
    "option",
    "always",
    "update",
    "version",
    "python",
    "click",
    "download",
    "open",
    "done",
    "go",
    "customize",
    "installation",
    "make",
    "sure",
    "pip",
    "checked",
    "go",
    "next",
    "add",
    "python",
    "environment",
    "variables",
    "install",
    "use",
    "pip",
    "open",
    "command",
    "prompt",
    "type",
    "pip",
    "help",
    "menu",
    "sorts",
    "different",
    "general",
    "options",
    "commands",
    "appear",
    "need",
    "check",
    "version",
    "pip",
    "type",
    "command",
    "cheat",
    "sheet",
    "wrote",
    "check",
    "current",
    "version",
    "pip",
    "type",
    "pip",
    "dash",
    "dash",
    "version",
    "enter",
    "currently",
    "version",
    "using",
    "21",
    "need",
    "upgrade",
    "pip",
    "use",
    "command",
    "pip",
    "install",
    "dash",
    "dash",
    "grade",
    "pip",
    "mine",
    "latest",
    "version",
    "yeah",
    "requirement",
    "already",
    "satisfied",
    "need",
    "list",
    "installed",
    "packages",
    "type",
    "pip",
    "list",
    "packages",
    "currently",
    "installed",
    "might",
    "recognize",
    "like",
    "numpy",
    "pie",
    "game",
    "pie",
    "installer",
    "check",
    "see",
    "packages",
    "outdated",
    "type",
    "pip",
    "list",
    "dash",
    "dash",
    "outdated",
    "might",
    "take",
    "second",
    "four",
    "packages",
    "outdated",
    "computer",
    "babel",
    "pi",
    "game",
    "pi",
    "tz",
    "setup",
    "tools",
    "need",
    "upgrade",
    "one",
    "packages",
    "type",
    "pip",
    "install",
    "name",
    "package",
    "let",
    "say",
    "would",
    "like",
    "update",
    "pygame",
    "dash",
    "dash",
    "upgrade",
    "realized",
    "notes",
    "missing",
    "updated",
    "package",
    "added",
    "see",
    "pie",
    "game",
    "successfully",
    "updated",
    "let",
    "check",
    "see",
    "using",
    "pip",
    "list",
    "outdated",
    "pip",
    "list",
    "dash",
    "dash",
    "outdated",
    "pi",
    "game",
    "longer",
    "date",
    "would",
    "like",
    "install",
    "package",
    "type",
    "hip",
    "install",
    "name",
    "package",
    "would",
    "like",
    "download",
    "let",
    "say",
    "would",
    "like",
    "download",
    "pandas",
    "pip",
    "install",
    "name",
    "package",
    "case",
    "pandas",
    "two",
    "valley",
    "boring",
    "minutes",
    "later",
    "done",
    "pandas",
    "installed",
    "let",
    "check",
    "pip",
    "list",
    "successfully",
    "downloaded",
    "package",
    "pandas",
    "commands",
    "pip",
    "interested",
    "downloading",
    "packages",
    "head",
    "python",
    "package",
    "index",
    "second",
    "thought",
    "probably",
    "show",
    "python",
    "package",
    "index",
    "located",
    "search",
    "sorts",
    "different",
    "projects",
    "packages",
    "everybody",
    "pip4",
    "python",
    "post",
    "notes",
    "comments",
    "section",
    "well",
    "yeah",
    "use",
    "pip",
    "python",
    "hey",
    "going",
    "everybody",
    "bro",
    "hope",
    "well",
    "video",
    "going",
    "show",
    "convert",
    "python",
    "file",
    "executable",
    "sit",
    "back",
    "relax",
    "enjoy",
    "show",
    "quick",
    "disclaimer",
    "begin",
    "windows",
    "defender",
    "programs",
    "may",
    "prevent",
    "executable",
    "running",
    "head",
    "settings",
    "section",
    "disable",
    "python",
    "file",
    "run",
    "also",
    "please",
    "sure",
    "pip",
    "pi",
    "installer",
    "installed",
    "date",
    "separate",
    "video",
    "interested",
    "program",
    "going",
    "converting",
    "executable",
    "gui",
    "portion",
    "created",
    "clock",
    "program",
    "previous",
    "video",
    "going",
    "turn",
    "clock",
    "program",
    "executable",
    "recommend",
    "creating",
    "new",
    "folder",
    "desktop",
    "process",
    "normally",
    "somewhat",
    "messy",
    "create",
    "folder",
    "contain",
    "copy",
    "relevant",
    "python",
    "files",
    "images",
    "paste",
    "within",
    "folder",
    "image",
    "would",
    "like",
    "set",
    "icon",
    "executable",
    "recommend",
    "moving",
    "folder",
    "well",
    "next",
    "step",
    "open",
    "command",
    "prompt",
    "need",
    "change",
    "directory",
    "command",
    "prompt",
    "pointing",
    "folder",
    "contains",
    "python",
    "file",
    "python",
    "file",
    "right",
    "click",
    "go",
    "properties",
    "copy",
    "location",
    "command",
    "prompt",
    "change",
    "directory",
    "type",
    "cd",
    "space",
    "paste",
    "location",
    "cheat",
    "code",
    "convert",
    "python",
    "file",
    "executable",
    "make",
    "sure",
    "pi",
    "installer",
    "pip",
    "installed",
    "date",
    "type",
    "pi",
    "installer",
    "dash",
    "capital",
    "f",
    "make",
    "one",
    "file",
    "need",
    "terminal",
    "window",
    "program",
    "omit",
    "next",
    "part",
    "since",
    "running",
    "gui",
    "application",
    "need",
    "terminal",
    "window",
    "remove",
    "window",
    "type",
    "dash",
    "w",
    "icon",
    "want",
    "set",
    "type",
    "dash",
    "name",
    "icon",
    "however",
    "ico",
    "file",
    "image",
    "would",
    "like",
    "convert",
    "ico",
    "file",
    "need",
    "convert",
    "image",
    "ico",
    "file",
    "google",
    "convert",
    "ico",
    "one",
    "website",
    "commonly",
    "use",
    "pick",
    "file",
    "upload",
    "choose",
    "file",
    "going",
    "convert",
    "png",
    "file",
    "alarm",
    "clock",
    "upload",
    "bunch",
    "different",
    "settings",
    "use",
    "convert",
    "ico",
    "download",
    "icon",
    "ico",
    "file",
    "downloaded",
    "drag",
    "drop",
    "folder",
    "rename",
    "let",
    "rename",
    "icon",
    "dot",
    "ico",
    "cheat",
    "code",
    "one",
    "time",
    "pi",
    "installer",
    "dash",
    "f",
    "dash",
    "w",
    "need",
    "terminal",
    "window",
    "dash",
    "would",
    "like",
    "add",
    "icon",
    "name",
    "icon",
    "ico",
    "file",
    "followed",
    "name",
    "python",
    "file",
    "mine",
    "named",
    "hit",
    "enter",
    "alright",
    "looks",
    "like",
    "building",
    "executable",
    "completed",
    "successfully",
    "open",
    "folder",
    "back",
    "executable",
    "located",
    "within",
    "dist",
    "folder",
    "would",
    "recommend",
    "dragging",
    "dropping",
    "desktop",
    "get",
    "rid",
    "old",
    "folder",
    "close",
    "command",
    "prompt",
    "clicking",
    "executable",
    "executable",
    "run",
    "python",
    "program",
    "well",
    "everyone",
    "convert",
    "python",
    "file",
    "exe",
    "file",
    "post",
    "notes",
    "comment",
    "section",
    "well",
    "yeah",
    "convert",
    "python",
    "file",
    "executable",
    "going",
    "everybody",
    "bro",
    "hope",
    "well",
    "video",
    "going",
    "show",
    "create",
    "basic",
    "calculator",
    "using",
    "python",
    "sit",
    "back",
    "relax",
    "enjoy",
    "show",
    "let",
    "create",
    "calculator",
    "importing",
    "tkinter",
    "need",
    "define",
    "three",
    "separate",
    "functions",
    "first",
    "function",
    "named",
    "button",
    "press",
    "one",
    "parameter",
    "call",
    "num",
    "going",
    "fill",
    "quite",
    "yet",
    "get",
    "back",
    "later",
    "use",
    "pass",
    "placeholder",
    "also",
    "need",
    "equals",
    "function",
    "calculate",
    "expression",
    "function",
    "clear",
    "calculator",
    "okay",
    "three",
    "functions",
    "let",
    "create",
    "window",
    "window",
    "equals",
    "tk",
    "end",
    "program",
    "write",
    "let",
    "set",
    "title",
    "window",
    "dot",
    "title",
    "calculator",
    "programs",
    "good",
    "make",
    "sure",
    "spell",
    "title",
    "right",
    "let",
    "set",
    "geometry",
    "500",
    "500",
    "decent",
    "going",
    "create",
    "string",
    "named",
    "equation",
    "text",
    "equals",
    "set",
    "quotes",
    "effectively",
    "empty",
    "time",
    "need",
    "create",
    "string",
    "var",
    "call",
    "equation",
    "label",
    "equals",
    "string",
    "var",
    "let",
    "create",
    "label",
    "label",
    "equals",
    "label",
    "adding",
    "label",
    "window",
    "set",
    "text",
    "variable",
    "equal",
    "equation",
    "label",
    "pick",
    "font",
    "wish",
    "set",
    "background",
    "color",
    "equal",
    "white",
    "width",
    "24",
    "height",
    "two",
    "need",
    "finish",
    "using",
    "label",
    "dot",
    "pack",
    "blank",
    "label",
    "within",
    "calculator",
    "display",
    "numbers",
    "entering",
    "expression",
    "okay",
    "tedious",
    "part",
    "create",
    "buttons",
    "think",
    "place",
    "within",
    "frame",
    "frame",
    "equals",
    "frame",
    "adding",
    "frame",
    "window",
    "frame",
    "dot",
    "pack",
    "let",
    "create",
    "button",
    "one",
    "copying",
    "pasting",
    "later",
    "tedious",
    "button",
    "one",
    "equals",
    "button",
    "adding",
    "button",
    "frame",
    "set",
    "text",
    "equal",
    "1",
    "height",
    "equal",
    "4",
    "width",
    "equal",
    "9",
    "font",
    "size",
    "35",
    "okay",
    "need",
    "command",
    "command",
    "equals",
    "write",
    "lambda",
    "function",
    "lambda",
    "call",
    "button",
    "press",
    "think",
    "going",
    "put",
    "next",
    "line",
    "easier",
    "read",
    "button",
    "press",
    "pass",
    "number",
    "one",
    "need",
    "add",
    "button",
    "frame",
    "button",
    "one",
    "dot",
    "grid",
    "going",
    "set",
    "row",
    "equal",
    "zero",
    "column",
    "equal",
    "zero",
    "let",
    "test",
    "okay",
    "let",
    "add",
    "buttons",
    "going",
    "copy",
    "paste",
    "everything",
    "button",
    "one",
    "change",
    "button",
    "one",
    "button",
    "two",
    "set",
    "text",
    "equal",
    "two",
    "pass",
    "button",
    "press",
    "row",
    "column",
    "going",
    "set",
    "column",
    "equal",
    "one",
    "keep",
    "row",
    "okay",
    "button",
    "three",
    "gon",
    "na",
    "process",
    "really",
    "text",
    "equals",
    "three",
    "button",
    "press",
    "three",
    "row",
    "zero",
    "column",
    "two",
    "button",
    "four",
    "text",
    "equals",
    "four",
    "button",
    "press",
    "four",
    "column",
    "actually",
    "let",
    "set",
    "row",
    "one",
    "column",
    "zero",
    "need",
    "change",
    "okay",
    "let",
    "double",
    "check",
    "okay",
    "button",
    "five",
    "button",
    "five",
    "text",
    "equals",
    "five",
    "button",
    "press",
    "five",
    "let",
    "set",
    "column",
    "equal",
    "one",
    "okay",
    "number",
    "six",
    "told",
    "going",
    "tedious",
    "okay",
    "row",
    "one",
    "column",
    "two",
    "button",
    "seven",
    "okay",
    "row",
    "two",
    "column",
    "two",
    "actually",
    "let",
    "change",
    "column",
    "zero",
    "much",
    "better",
    "okay",
    "button",
    "eight",
    "eight",
    "eight",
    "eight",
    "eight",
    "row",
    "two",
    "column",
    "one",
    "number",
    "nine",
    "row",
    "two",
    "column",
    "two",
    "lastly",
    "zero",
    "button",
    "zero",
    "text",
    "equals",
    "zero",
    "button",
    "press",
    "pass",
    "zero",
    "row",
    "three",
    "column",
    "zero",
    "okay",
    "bad",
    "let",
    "fill",
    "symbols",
    "need",
    "plus",
    "going",
    "rename",
    "plus",
    "text",
    "equal",
    "plus",
    "sign",
    "put",
    "within",
    "quotes",
    "button",
    "press",
    "plus",
    "oh",
    "probably",
    "put",
    "row",
    "column",
    "let",
    "say",
    "row",
    "0",
    "column",
    "three",
    "right",
    "hand",
    "side",
    "okay",
    "need",
    "minus",
    "let",
    "change",
    "plus",
    "minus",
    "place",
    "row",
    "one",
    "column",
    "three",
    "need",
    "multiply",
    "asterisk",
    "row",
    "two",
    "column",
    "three",
    "divide",
    "forward",
    "slash",
    "row",
    "three",
    "column",
    "three",
    "promise",
    "near",
    "end",
    "creating",
    "buttons",
    "need",
    "equal",
    "sign",
    "let",
    "say",
    "equal",
    "equal",
    "text",
    "equal",
    "sign",
    "command",
    "going",
    "equals",
    "function",
    "row",
    "3",
    "column",
    "need",
    "decimal",
    "let",
    "change",
    "text",
    "decimal",
    "row",
    "three",
    "column",
    "one",
    "okay",
    "lastly",
    "need",
    "clear",
    "button",
    "let",
    "put",
    "bottom",
    "clear",
    "clear",
    "let",
    "set",
    "text",
    "equal",
    "word",
    "clear",
    "command",
    "clear",
    "function",
    "think",
    "going",
    "pack",
    "end",
    "let",
    "change",
    "frame",
    "window",
    "okay",
    "let",
    "check",
    "buttons",
    "okay",
    "bad",
    "think",
    "going",
    "change",
    "width",
    "clear",
    "button",
    "little",
    "bit",
    "wider",
    "let",
    "change",
    "width",
    "little",
    "bit",
    "better",
    "okay",
    "let",
    "fill",
    "functions",
    "let",
    "start",
    "button",
    "press",
    "going",
    "state",
    "global",
    "equation",
    "text",
    "equation",
    "text",
    "equal",
    "equation",
    "text",
    "plus",
    "converting",
    "whatever",
    "number",
    "symbol",
    "receive",
    "string",
    "equation",
    "label",
    "string",
    "var",
    "set",
    "equation",
    "text",
    "let",
    "test",
    "type",
    "combination",
    "numbers",
    "symbols",
    "okay",
    "let",
    "work",
    "equals",
    "function",
    "next",
    "let",
    "say",
    "global",
    "equation",
    "text",
    "total",
    "equals",
    "eval",
    "eval",
    "parse",
    "expression",
    "pass",
    "equation",
    "text",
    "equation",
    "label",
    "set",
    "whatever",
    "total",
    "want",
    "reuse",
    "total",
    "let",
    "set",
    "equation",
    "text",
    "equal",
    "total",
    "2",
    "plus",
    "2",
    "equals",
    "four",
    "minus",
    "three",
    "equals",
    "one",
    "times",
    "five",
    "equals",
    "five",
    "divided",
    "two",
    "equals",
    "two",
    "point",
    "five",
    "divide",
    "zero",
    "well",
    "run",
    "ugly",
    "zero",
    "division",
    "error",
    "let",
    "write",
    "code",
    "within",
    "try",
    "accept",
    "block",
    "going",
    "indent",
    "let",
    "write",
    "try",
    "code",
    "catch",
    "zero",
    "division",
    "error",
    "exception",
    "accept",
    "zero",
    "division",
    "error",
    "set",
    "equation",
    "label",
    "set",
    "let",
    "say",
    "arithmetic",
    "error",
    "equation",
    "text",
    "equals",
    "set",
    "quotes",
    "okay",
    "able",
    "catch",
    "exception",
    "five",
    "divided",
    "zero",
    "equals",
    "arithmetic",
    "error",
    "syntax",
    "like",
    "type",
    "bunch",
    "symbols",
    "hit",
    "equals",
    "probably",
    "want",
    "catch",
    "syntax",
    "error",
    "well",
    "let",
    "write",
    "additional",
    "accept",
    "block",
    "zero",
    "division",
    "error",
    "guess",
    "matter",
    "accept",
    "syntax",
    "error",
    "let",
    "change",
    "arithmetic",
    "syntax",
    "keep",
    "equation",
    "text",
    "program",
    "wo",
    "crash",
    "type",
    "bunch",
    "symbols",
    "syntax",
    "error",
    "let",
    "work",
    "clear",
    "button",
    "within",
    "clear",
    "function",
    "set",
    "global",
    "equation",
    "text",
    "equation",
    "label",
    "dot",
    "set",
    "set",
    "quotes",
    "effectively",
    "clear",
    "equation",
    "text",
    "equal",
    "set",
    "quotes",
    "well",
    "program",
    "let",
    "run",
    "one",
    "last",
    "time",
    "let",
    "say",
    "times",
    "equals",
    "divided",
    "equals",
    "minus",
    "one",
    "making",
    "numbers",
    "plus",
    "ten",
    "equals",
    "twelve",
    "point",
    "one",
    "four",
    "let",
    "clear",
    "start",
    "one",
    "plus",
    "two",
    "plus",
    "three",
    "plus",
    "four",
    "equals",
    "ten",
    "think",
    "good",
    "enough",
    "right",
    "everybody",
    "create",
    "basic",
    "calculator",
    "python",
    "post",
    "code",
    "comments",
    "section",
    "would",
    "like",
    "copy",
    "yeah",
    "create",
    "basic",
    "calculator",
    "using",
    "python",
    "hey",
    "going",
    "everybody",
    "bro",
    "hope",
    "well",
    "video",
    "going",
    "explain",
    "build",
    "basic",
    "text",
    "editor",
    "program",
    "python",
    "sit",
    "back",
    "relax",
    "enjoy",
    "show",
    "okay",
    "people",
    "let",
    "create",
    "text",
    "editor",
    "different",
    "imports",
    "need",
    "begin",
    "defining",
    "different",
    "functions",
    "need",
    "let",
    "say",
    "change",
    "color",
    "function",
    "change",
    "color",
    "font",
    "functions",
    "going",
    "write",
    "pass",
    "placeholder",
    "change",
    "font",
    "function",
    "accept",
    "varying",
    "amount",
    "arguments",
    "use",
    "args",
    "keyword",
    "need",
    "open",
    "file",
    "new",
    "file",
    "open",
    "file",
    "save",
    "file",
    "cut",
    "copy",
    "paste",
    "yeah",
    "lot",
    "functions",
    "section",
    "lastly",
    "quit",
    "many",
    "one",
    "two",
    "three",
    "four",
    "five",
    "six",
    "seven",
    "eight",
    "nine",
    "ten",
    "ten",
    "functions",
    "let",
    "create",
    "main",
    "window",
    "gon",
    "na",
    "work",
    "window",
    "equals",
    "tk",
    "end",
    "loop",
    "okay",
    "let",
    "create",
    "title",
    "window",
    "window",
    "title",
    "notepad",
    "program",
    "guess",
    "maybe",
    "text",
    "editor",
    "program",
    "would",
    "appropriate",
    "text",
    "editor",
    "program",
    "okay",
    "need",
    "file",
    "work",
    "declare",
    "file",
    "equals",
    "none",
    "need",
    "window",
    "width",
    "height",
    "window",
    "equals",
    "500",
    "good",
    "height",
    "okay",
    "let",
    "attempt",
    "center",
    "window",
    "right",
    "appears",
    "side",
    "next",
    "step",
    "get",
    "screen",
    "width",
    "equals",
    "window",
    "dot",
    "w",
    "info",
    "screen",
    "width",
    "copy",
    "screen",
    "height",
    "okay",
    "need",
    "figure",
    "much",
    "going",
    "move",
    "window",
    "x",
    "axis",
    "let",
    "say",
    "x",
    "equals",
    "screen",
    "width",
    "divided",
    "2",
    "minus",
    "window",
    "width",
    "divided",
    "two",
    "going",
    "cast",
    "end",
    "add",
    "inch",
    "cast",
    "around",
    "let",
    "copy",
    "thing",
    "except",
    "screen",
    "height",
    "window",
    "height",
    "okay",
    "let",
    "set",
    "geometry",
    "window",
    "window",
    "geometry",
    "going",
    "use",
    "string",
    "format",
    "method",
    "let",
    "say",
    "placeholders",
    "values",
    "window",
    "width",
    "first",
    "value",
    "window",
    "height",
    "x",
    "near",
    "middle",
    "cool",
    "going",
    "create",
    "string",
    "var",
    "variable",
    "hold",
    "font",
    "name",
    "font",
    "name",
    "equals",
    "string",
    "var",
    "pass",
    "window",
    "set",
    "want",
    "default",
    "font",
    "let",
    "say",
    "font",
    "name",
    "dot",
    "set",
    "pick",
    "font",
    "use",
    "ariel",
    "think",
    "let",
    "create",
    "font",
    "size",
    "string",
    "bar",
    "well",
    "going",
    "add",
    "window",
    "set",
    "default",
    "size",
    "perhaps",
    "okay",
    "let",
    "create",
    "text",
    "area",
    "text",
    "area",
    "equals",
    "text",
    "adding",
    "window",
    "going",
    "set",
    "font",
    "equal",
    "font",
    "name",
    "dot",
    "get",
    "name",
    "font",
    "want",
    "use",
    "font",
    "set",
    "within",
    "font",
    "name",
    "string",
    "var",
    "use",
    "size",
    "font",
    "size",
    "dot",
    "get",
    "font",
    "size",
    "dot",
    "get",
    "okay",
    "need",
    "scroll",
    "bar",
    "scroll",
    "bar",
    "equals",
    "scroll",
    "bar",
    "writing",
    "text",
    "area",
    "pass",
    "going",
    "configure",
    "window",
    "using",
    "grid",
    "row",
    "configure",
    "allow",
    "text",
    "area",
    "expand",
    "going",
    "set",
    "weight",
    "equal",
    "1",
    "back",
    "expand",
    "need",
    "column",
    "configure",
    "okay",
    "text",
    "area",
    "dot",
    "grid",
    "going",
    "use",
    "sticky",
    "keyword",
    "stick",
    "north",
    "plus",
    "east",
    "plus",
    "south",
    "plus",
    "west",
    "text",
    "area",
    "take",
    "window",
    "sample",
    "text",
    "hooray",
    "goes",
    "next",
    "line",
    "runs",
    "room",
    "one",
    "line",
    "unless",
    "resize",
    "window",
    "exactly",
    "wanted",
    "let",
    "create",
    "scroll",
    "bar",
    "already",
    "created",
    "add",
    "details",
    "near",
    "bottom",
    "say",
    "scroll",
    "bar",
    "dot",
    "pack",
    "side",
    "equals",
    "right",
    "fill",
    "equals",
    "configure",
    "text",
    "area",
    "scroll",
    "bar",
    "text",
    "area",
    "dot",
    "config",
    "scroll",
    "command",
    "equals",
    "scroll",
    "bar",
    "dot",
    "set",
    "work",
    "let",
    "test",
    "sure",
    "okay",
    "going",
    "type",
    "bunch",
    "f",
    "okay",
    "look",
    "scroll",
    "bar",
    "works",
    "cool",
    "okay",
    "let",
    "head",
    "portion",
    "create",
    "bunch",
    "buttons",
    "well",
    "button",
    "option",
    "menu",
    "spin",
    "box",
    "font",
    "color",
    "size",
    "font",
    "style",
    "going",
    "place",
    "different",
    "widgets",
    "within",
    "frame",
    "frame",
    "equals",
    "frame",
    "add",
    "window",
    "going",
    "use",
    "frame",
    "dot",
    "grid",
    "okay",
    "let",
    "create",
    "color",
    "button",
    "change",
    "fonts",
    "color",
    "color",
    "button",
    "equals",
    "button",
    "add",
    "button",
    "frame",
    "set",
    "text",
    "button",
    "equal",
    "color",
    "associate",
    "command",
    "change",
    "color",
    "already",
    "defined",
    "top",
    "top",
    "change",
    "color",
    "actually",
    "portion",
    "need",
    "add",
    "button",
    "color",
    "button",
    "dot",
    "grid",
    "set",
    "row",
    "equal",
    "zero",
    "column",
    "equal",
    "zero",
    "let",
    "sure",
    "appears",
    "make",
    "sure",
    "spell",
    "grid",
    "right",
    "okay",
    "color",
    "button",
    "button",
    "anything",
    "let",
    "head",
    "change",
    "color",
    "function",
    "within",
    "change",
    "color",
    "function",
    "going",
    "say",
    "color",
    "equals",
    "color",
    "chooser",
    "dot",
    "ask",
    "color",
    "set",
    "title",
    "pick",
    "color",
    "else",
    "technically",
    "need",
    "title",
    "text",
    "area",
    "dot",
    "config",
    "oh",
    "probably",
    "print",
    "color",
    "let",
    "um",
    "gon",
    "na",
    "explain",
    "something",
    "color",
    "going",
    "believe",
    "tuple",
    "let",
    "print",
    "let",
    "say",
    "would",
    "like",
    "white",
    "okay",
    "tuple",
    "need",
    "one",
    "values",
    "going",
    "say",
    "text",
    "area",
    "dot",
    "config",
    "foreground",
    "equals",
    "color",
    "want",
    "assign",
    "tuple",
    "color",
    "need",
    "one",
    "values",
    "let",
    "say",
    "would",
    "like",
    "hex",
    "value",
    "going",
    "say",
    "index",
    "1",
    "let",
    "try",
    "color",
    "perhaps",
    "would",
    "like",
    "text",
    "pink",
    "reason",
    "going",
    "pink",
    "text",
    "suppose",
    "change",
    "back",
    "using",
    "color",
    "button",
    "would",
    "like",
    "blue",
    "blue",
    "text",
    "okay",
    "change",
    "color",
    "function",
    "going",
    "minimize",
    "need",
    "anymore",
    "okay",
    "going",
    "change",
    "font",
    "next",
    "head",
    "portion",
    "code",
    "right",
    "color",
    "button",
    "create",
    "option",
    "menu",
    "list",
    "different",
    "fonts",
    "available",
    "us",
    "let",
    "say",
    "font",
    "box",
    "equals",
    "option",
    "menu",
    "adding",
    "frame",
    "need",
    "set",
    "variable",
    "string",
    "var",
    "font",
    "name",
    "declared",
    "trick",
    "add",
    "fonts",
    "options",
    "option",
    "menu",
    "use",
    "unpacking",
    "operator",
    "asterisk",
    "followed",
    "font",
    "dot",
    "families",
    "call",
    "function",
    "return",
    "different",
    "fonts",
    "available",
    "us",
    "need",
    "set",
    "command",
    "use",
    "option",
    "menu",
    "call",
    "change",
    "font",
    "need",
    "add",
    "font",
    "box",
    "grid",
    "row",
    "equals",
    "zero",
    "column",
    "equals",
    "one",
    "right",
    "hand",
    "side",
    "color",
    "button",
    "yeah",
    "going",
    "look",
    "something",
    "like",
    "see",
    "default",
    "arial",
    "set",
    "change",
    "something",
    "else",
    "like",
    "comic",
    "sans",
    "whatever",
    "uh",
    "however",
    "going",
    "change",
    "quite",
    "yet",
    "change",
    "font",
    "function",
    "fill",
    "change",
    "font",
    "function",
    "another",
    "widget",
    "going",
    "share",
    "command",
    "change",
    "font",
    "create",
    "next",
    "next",
    "widget",
    "spin",
    "box",
    "name",
    "sizebox",
    "charge",
    "increasing",
    "decreasing",
    "font",
    "size",
    "box",
    "equals",
    "spin",
    "box",
    "adding",
    "spin",
    "box",
    "frame",
    "set",
    "range",
    "underscore",
    "add",
    "underscore",
    "kind",
    "weird",
    "range",
    "spin",
    "box",
    "font",
    "size",
    "1",
    "let",
    "say",
    "100",
    "text",
    "variable",
    "font",
    "size",
    "command",
    "equals",
    "change",
    "font",
    "use",
    "spin",
    "box",
    "call",
    "command",
    "change",
    "font",
    "going",
    "pass",
    "font",
    "size",
    "argument",
    "whereas",
    "option",
    "menu",
    "pass",
    "arguments",
    "change",
    "font",
    "function",
    "accepting",
    "varying",
    "amount",
    "arguments",
    "one",
    "going",
    "pass",
    "argument",
    "need",
    "add",
    "spin",
    "box",
    "would",
    "size",
    "box",
    "dot",
    "grid",
    "row",
    "equals",
    "zero",
    "column",
    "equals",
    "two",
    "spin",
    "box",
    "right",
    "bottom",
    "set",
    "25",
    "default",
    "font",
    "size",
    "string",
    "var",
    "set",
    "text",
    "variable",
    "okay",
    "fill",
    "function",
    "change",
    "font",
    "apply",
    "option",
    "menu",
    "spin",
    "box",
    "way",
    "top",
    "within",
    "change",
    "font",
    "function",
    "going",
    "take",
    "text",
    "area",
    "dot",
    "config",
    "set",
    "font",
    "equal",
    "font",
    "name",
    "dot",
    "get",
    "size",
    "size",
    "box",
    "dot",
    "get",
    "function",
    "minimize",
    "let",
    "test",
    "sample",
    "text",
    "hey",
    "good",
    "looking",
    "okay",
    "let",
    "change",
    "font",
    "uh",
    "let",
    "pick",
    "comic",
    "sans",
    "whatever",
    "want",
    "increase",
    "decrease",
    "size",
    "change",
    "color",
    "red",
    "time",
    "right",
    "nice",
    "let",
    "add",
    "menu",
    "bar",
    "top",
    "save",
    "file",
    "open",
    "file",
    "create",
    "new",
    "file",
    "stuff",
    "second",
    "thought",
    "going",
    "move",
    "two",
    "last",
    "lines",
    "code",
    "section",
    "create",
    "scroll",
    "bar",
    "organized",
    "okay",
    "bottom",
    "let",
    "create",
    "various",
    "menus",
    "need",
    "menu",
    "bar",
    "begin",
    "let",
    "say",
    "menu",
    "bar",
    "equals",
    "menu",
    "adding",
    "window",
    "make",
    "sure",
    "capital",
    "way",
    "window",
    "dot",
    "config",
    "menu",
    "equals",
    "menu",
    "bar",
    "create",
    "file",
    "menu",
    "edit",
    "menu",
    "help",
    "menu",
    "let",
    "begin",
    "file",
    "menu",
    "add",
    "menu",
    "bar",
    "file",
    "menu",
    "equals",
    "menu",
    "adding",
    "menu",
    "bar",
    "set",
    "tear",
    "equal",
    "zero",
    "need",
    "cascade",
    "actually",
    "drop",
    "menu",
    "menu",
    "bar",
    "dot",
    "add",
    "cascade",
    "label",
    "equals",
    "file",
    "comma",
    "menu",
    "equals",
    "file",
    "menu",
    "let",
    "see",
    "anything",
    "appears",
    "yet",
    "yep",
    "file",
    "menu",
    "nothing",
    "drop",
    "yet",
    "need",
    "options",
    "well",
    "commands",
    "technically",
    "file",
    "menu",
    "dot",
    "add",
    "command",
    "label",
    "equals",
    "new",
    "command",
    "equal",
    "new",
    "file",
    "function",
    "actually",
    "put",
    "together",
    "okay",
    "let",
    "copy",
    "paste",
    "open",
    "command",
    "open",
    "file",
    "save",
    "command",
    "save",
    "file",
    "add",
    "separator",
    "file",
    "menu",
    "dot",
    "add",
    "separator",
    "lastly",
    "exit",
    "command",
    "quit",
    "okay",
    "let",
    "show",
    "looks",
    "like",
    "drop",
    "menu",
    "separator",
    "bold",
    "line",
    "going",
    "across",
    "remove",
    "would",
    "bolt",
    "line",
    "keep",
    "get",
    "rid",
    "whatever",
    "want",
    "tear",
    "going",
    "remove",
    "tear",
    "get",
    "like",
    "tear",
    "line",
    "top",
    "guess",
    "default",
    "usually",
    "like",
    "set",
    "tear",
    "equal",
    "zero",
    "file",
    "menu",
    "let",
    "work",
    "edit",
    "menu",
    "edit",
    "menu",
    "equals",
    "menu",
    "menu",
    "bar",
    "make",
    "sure",
    "capital",
    "two",
    "tare",
    "equals",
    "zero",
    "need",
    "cascade",
    "menu",
    "bar",
    "dot",
    "add",
    "cascade",
    "label",
    "equals",
    "edit",
    "menu",
    "equals",
    "edit",
    "menu",
    "edit",
    "menu",
    "dot",
    "add",
    "command",
    "label",
    "equals",
    "cut",
    "cut",
    "text",
    "command",
    "equals",
    "copy",
    "actually",
    "cut",
    "bad",
    "okay",
    "next",
    "copy",
    "let",
    "copy",
    "paste",
    "cut",
    "copy",
    "paste",
    "command",
    "paste",
    "right",
    "let",
    "take",
    "look",
    "oh",
    "make",
    "sure",
    "spell",
    "label",
    "right",
    "okay",
    "go",
    "okay",
    "cut",
    "copy",
    "paste",
    "lastly",
    "help",
    "menu",
    "help",
    "menu",
    "equals",
    "menu",
    "menu",
    "bar",
    "tear",
    "equals",
    "zero",
    "think",
    "copy",
    "cascade",
    "menu",
    "bar",
    "dot",
    "add",
    "cascade",
    "help",
    "menu",
    "equals",
    "help",
    "menu",
    "command",
    "creating",
    "section",
    "bring",
    "window",
    "need",
    "display",
    "like",
    "help",
    "information",
    "anything",
    "uh",
    "let",
    "say",
    "command",
    "okay",
    "let",
    "take",
    "look",
    "help",
    "section",
    "tell",
    "program",
    "need",
    "work",
    "functions",
    "let",
    "head",
    "quit",
    "function",
    "one",
    "fairly",
    "easy",
    "found",
    "within",
    "file",
    "menu",
    "window",
    "dot",
    "destroy",
    "close",
    "window",
    "go",
    "file",
    "exit",
    "exit",
    "program",
    "need",
    "anymore",
    "let",
    "minimize",
    "okay",
    "let",
    "go",
    "function",
    "let",
    "bring",
    "message",
    "box",
    "show",
    "info",
    "first",
    "argument",
    "title",
    "let",
    "say",
    "program",
    "text",
    "whatever",
    "want",
    "tell",
    "user",
    "program",
    "program",
    "written",
    "okay",
    "window",
    "go",
    "help",
    "program",
    "program",
    "written",
    "next",
    "function",
    "paste",
    "function",
    "paste",
    "text",
    "text",
    "area",
    "dot",
    "event",
    "generate",
    "event",
    "going",
    "within",
    "quotes",
    "double",
    "angle",
    "brackets",
    "paste",
    "let",
    "copy",
    "change",
    "paste",
    "copy",
    "cut",
    "okay",
    "able",
    "cut",
    "copy",
    "paste",
    "hey",
    "hanging",
    "okay",
    "let",
    "highlight",
    "edit",
    "copy",
    "let",
    "move",
    "next",
    "line",
    "paste",
    "able",
    "cut",
    "well",
    "edit",
    "cut",
    "nice",
    "head",
    "new",
    "file",
    "function",
    "set",
    "title",
    "window",
    "maybe",
    "untitled",
    "save",
    "something",
    "untitled",
    "need",
    "delete",
    "text",
    "within",
    "text",
    "area",
    "text",
    "area",
    "dot",
    "delete",
    "need",
    "set",
    "range",
    "floating",
    "point",
    "number",
    "first",
    "character",
    "end",
    "let",
    "try",
    "write",
    "sample",
    "text",
    "going",
    "go",
    "file",
    "new",
    "changed",
    "title",
    "deleted",
    "text",
    "new",
    "file",
    "function",
    "let",
    "work",
    "open",
    "file",
    "within",
    "open",
    "file",
    "function",
    "say",
    "file",
    "equals",
    "ask",
    "open",
    "file",
    "name",
    "default",
    "extension",
    "would",
    "like",
    "one",
    "default",
    "think",
    "spelled",
    "wrong",
    "extension",
    "equals",
    "let",
    "say",
    "txt",
    "file",
    "comma",
    "accepted",
    "file",
    "types",
    "set",
    "equal",
    "files",
    "comma",
    "need",
    "asterisk",
    "dot",
    "asterisk",
    "file",
    "types",
    "well",
    "text",
    "documents",
    "accepted",
    "look",
    "file",
    "either",
    "files",
    "text",
    "documents",
    "text",
    "documents",
    "comma",
    "asterisk",
    "dot",
    "txt",
    "okay",
    "let",
    "try",
    "code",
    "set",
    "window",
    "title",
    "equal",
    "os",
    "dot",
    "path",
    "dot",
    "base",
    "name",
    "file",
    "change",
    "title",
    "window",
    "match",
    "whatever",
    "file",
    "opened",
    "let",
    "take",
    "text",
    "area",
    "delete",
    "currently",
    "one",
    "end",
    "take",
    "file",
    "use",
    "open",
    "function",
    "open",
    "file",
    "read",
    "pass",
    "text",
    "area",
    "dot",
    "insert",
    "beginning",
    "index",
    "file",
    "dot",
    "read",
    "catch",
    "exceptions",
    "write",
    "accept",
    "exception",
    "better",
    "name",
    "specific",
    "exceptions",
    "print",
    "could",
    "read",
    "file",
    "close",
    "file",
    "end",
    "within",
    "finally",
    "block",
    "finally",
    "file",
    "dot",
    "close",
    "need",
    "sample",
    "file",
    "read",
    "going",
    "create",
    "new",
    "file",
    "desktop",
    "call",
    "let",
    "write",
    "something",
    "whoa",
    "actually",
    "read",
    "awesome",
    "okay",
    "let",
    "save",
    "close",
    "add",
    "run",
    "program",
    "file",
    "open",
    "open",
    "whoa",
    "actually",
    "read",
    "awesome",
    "nice",
    "know",
    "open",
    "function",
    "working",
    "need",
    "create",
    "new",
    "file",
    "go",
    "file",
    "new",
    "delete",
    "old",
    "text",
    "lastly",
    "save",
    "file",
    "underneath",
    "save",
    "file",
    "function",
    "file",
    "equals",
    "file",
    "dialog",
    "dot",
    "ask",
    "save",
    "file",
    "name",
    "default",
    "name",
    "file",
    "change",
    "initial",
    "file",
    "equals",
    "let",
    "say",
    "untitled",
    "dot",
    "txt",
    "set",
    "default",
    "extension",
    "default",
    "extension",
    "equals",
    "let",
    "say",
    "txt",
    "file",
    "types",
    "equals",
    "files",
    "comma",
    "asterisk",
    "dot",
    "asterisk",
    "file",
    "types",
    "text",
    "documents",
    "text",
    "documents",
    "asterisk",
    "dot",
    "txt",
    "okay",
    "file",
    "none",
    "close",
    "file",
    "dialog",
    "return",
    "else",
    "set",
    "window",
    "title",
    "first",
    "window",
    "title",
    "os",
    "dot",
    "path",
    "dot",
    "base",
    "name",
    "file",
    "file",
    "equals",
    "open",
    "open",
    "file",
    "write",
    "file",
    "dot",
    "right",
    "take",
    "text",
    "area",
    "get",
    "text",
    "index",
    "one",
    "end",
    "catch",
    "exceptions",
    "better",
    "name",
    "instead",
    "general",
    "accept",
    "exception",
    "going",
    "print",
    "could",
    "save",
    "file",
    "finally",
    "close",
    "file",
    "file",
    "dot",
    "close",
    "right",
    "let",
    "test",
    "going",
    "change",
    "font",
    "wonder",
    "impact",
    "yes",
    "change",
    "font",
    "size",
    "maybe",
    "30",
    "pick",
    "color",
    "swamp",
    "green",
    "color",
    "okay",
    "write",
    "something",
    "perhaps",
    "lyrics",
    "song",
    "like",
    "probably",
    "test",
    "copying",
    "pasting",
    "edit",
    "copy",
    "edit",
    "paste",
    "nice",
    "right",
    "let",
    "actually",
    "try",
    "save",
    "go",
    "file",
    "save",
    "default",
    "file",
    "name",
    "untitled",
    "set",
    "say",
    "star",
    "lyrics",
    "save",
    "able",
    "open",
    "going",
    "go",
    "desktop",
    "text",
    "file",
    "going",
    "open",
    "lyrics",
    "wrote",
    "within",
    "text",
    "editor",
    "let",
    "try",
    "read",
    "let",
    "go",
    "file",
    "open",
    "find",
    "text",
    "document",
    "open",
    "would",
    "look",
    "lyrics",
    "still",
    "however",
    "program",
    "save",
    "font",
    "thought",
    "fun",
    "last",
    "minute",
    "project",
    "actually",
    "use",
    "text",
    "editor",
    "write",
    "python",
    "file",
    "much",
    "like",
    "pycharm",
    "let",
    "write",
    "program",
    "using",
    "text",
    "editor",
    "program",
    "simple",
    "program",
    "let",
    "print",
    "hello",
    "world",
    "ask",
    "user",
    "input",
    "let",
    "say",
    "name",
    "equals",
    "input",
    "name",
    "print",
    "hello",
    "plus",
    "name",
    "variable",
    "change",
    "font",
    "everything",
    "want",
    "okay",
    "let",
    "save",
    "file",
    "save",
    "save",
    "desktop",
    "make",
    "sure",
    "save",
    "py",
    "file",
    "python",
    "file",
    "name",
    "hello",
    "dot",
    "py",
    "save",
    "run",
    "file",
    "using",
    "command",
    "prompt",
    "need",
    "find",
    "directory",
    "contains",
    "python",
    "file",
    "mine",
    "located",
    "desktop",
    "need",
    "location",
    "right",
    "click",
    "go",
    "properties",
    "copy",
    "location",
    "within",
    "command",
    "prompt",
    "terminal",
    "change",
    "directory",
    "typing",
    "cd",
    "space",
    "paste",
    "new",
    "directory",
    "new",
    "location",
    "enter",
    "run",
    "python",
    "program",
    "type",
    "python",
    "space",
    "name",
    "program",
    "python",
    "file",
    "mine",
    "hello",
    "dot",
    "py",
    "hit",
    "enter",
    "hello",
    "world",
    "name",
    "bro",
    "hello",
    "bro",
    "thought",
    "would",
    "fun",
    "last",
    "minute",
    "project",
    "even",
    "technically",
    "need",
    "ide",
    "write",
    "python",
    "program",
    "screw",
    "pycharm",
    "well",
    "everyone",
    "basic",
    "text",
    "editor",
    "program",
    "post",
    "code",
    "program",
    "comment",
    "section",
    "well",
    "yeah",
    "basic",
    "text",
    "editor",
    "program",
    "using",
    "python",
    "right",
    "ladies",
    "gentlemen",
    "let",
    "create",
    "game",
    "begin",
    "need",
    "import",
    "tkinter",
    "well",
    "random",
    "let",
    "begin",
    "defining",
    "different",
    "functions",
    "need",
    "let",
    "define",
    "function",
    "named",
    "next",
    "turn",
    "time",
    "write",
    "pass",
    "fill",
    "later",
    "need",
    "function",
    "named",
    "check",
    "winner",
    "function",
    "named",
    "empty",
    "spaces",
    "check",
    "empty",
    "spaces",
    "left",
    "lastly",
    "function",
    "named",
    "new",
    "game",
    "launch",
    "new",
    "game",
    "us",
    "okay",
    "four",
    "functions",
    "let",
    "create",
    "window",
    "let",
    "create",
    "window",
    "window",
    "equals",
    "tk",
    "end",
    "program",
    "need",
    "use",
    "window",
    "dot",
    "main",
    "loop",
    "run",
    "small",
    "basic",
    "window",
    "let",
    "set",
    "title",
    "window",
    "dot",
    "title",
    "let",
    "set",
    "tick",
    "tack",
    "toe",
    "need",
    "list",
    "players",
    "players",
    "equals",
    "x",
    "comma",
    "way",
    "writing",
    "program",
    "swap",
    "symbols",
    "different",
    "character",
    "example",
    "could",
    "say",
    "dollar",
    "sign",
    "playing",
    "symbol",
    "demonstrate",
    "later",
    "let",
    "keep",
    "x",
    "need",
    "select",
    "random",
    "player",
    "begin",
    "player",
    "equals",
    "random",
    "dot",
    "choice",
    "pass",
    "list",
    "players",
    "need",
    "nine",
    "buttons",
    "going",
    "create",
    "2d",
    "list",
    "buttons",
    "named",
    "buttons",
    "first",
    "row",
    "second",
    "row",
    "time",
    "going",
    "initialize",
    "0",
    "everything",
    "put",
    "within",
    "list",
    "2d",
    "list",
    "named",
    "buttons",
    "better",
    "visualize",
    "going",
    "place",
    "row",
    "new",
    "line",
    "board",
    "going",
    "look",
    "like",
    "2d",
    "list",
    "named",
    "buttons",
    "need",
    "label",
    "display",
    "whose",
    "turn",
    "label",
    "equals",
    "label",
    "set",
    "text",
    "equal",
    "player",
    "plus",
    "word",
    "turn",
    "set",
    "font",
    "font",
    "equals",
    "pick",
    "whatever",
    "font",
    "want",
    "going",
    "pack",
    "label",
    "label",
    "dot",
    "pack",
    "set",
    "side",
    "equal",
    "top",
    "let",
    "run",
    "test",
    "okay",
    "looks",
    "like",
    "x",
    "turn",
    "let",
    "try",
    "oh",
    "stern",
    "okay",
    "fine",
    "let",
    "create",
    "reset",
    "button",
    "reset",
    "underscore",
    "button",
    "equals",
    "button",
    "set",
    "text",
    "equal",
    "restart",
    "going",
    "restart",
    "button",
    "reset",
    "button",
    "pick",
    "font",
    "maybe",
    "set",
    "size",
    "20",
    "need",
    "command",
    "command",
    "equals",
    "new",
    "game",
    "click",
    "button",
    "going",
    "call",
    "new",
    "game",
    "function",
    "us",
    "need",
    "pack",
    "button",
    "reset",
    "button",
    "dot",
    "pack",
    "set",
    "side",
    "equal",
    "top",
    "okay",
    "let",
    "see",
    "appears",
    "alright",
    "turn",
    "order",
    "label",
    "display",
    "whose",
    "turn",
    "well",
    "reset",
    "button",
    "need",
    "create",
    "buttons",
    "add",
    "2d",
    "list",
    "named",
    "buttons",
    "going",
    "place",
    "within",
    "frame",
    "frame",
    "equals",
    "frame",
    "adding",
    "frame",
    "window",
    "going",
    "pack",
    "frame",
    "frame",
    "dot",
    "pack",
    "take",
    "2d",
    "list",
    "buttons",
    "add",
    "button",
    "spot",
    "think",
    "best",
    "way",
    "would",
    "use",
    "nested",
    "loops",
    "outer",
    "loop",
    "charge",
    "rows",
    "four",
    "row",
    "range",
    "three",
    "remember",
    "three",
    "rows",
    "three",
    "columns",
    "inner",
    "loop",
    "charge",
    "columns",
    "four",
    "column",
    "range",
    "three",
    "inside",
    "inner",
    "loop",
    "going",
    "create",
    "new",
    "button",
    "say",
    "buttons",
    "index",
    "row",
    "column",
    "two",
    "indexes",
    "2d",
    "list",
    "buttons",
    "row",
    "whatever",
    "column",
    "whatever",
    "depending",
    "iteration",
    "within",
    "loops",
    "create",
    "new",
    "button",
    "set",
    "text",
    "oh",
    "first",
    "add",
    "frame",
    "almost",
    "forgot",
    "adding",
    "buttons",
    "frame",
    "adding",
    "frame",
    "window",
    "set",
    "text",
    "equal",
    "blank",
    "set",
    "quotes",
    "want",
    "text",
    "set",
    "font",
    "copy",
    "label",
    "width",
    "let",
    "say",
    "five",
    "height",
    "let",
    "say",
    "two",
    "going",
    "hit",
    "enter",
    "move",
    "next",
    "line",
    "still",
    "things",
    "fill",
    "okay",
    "need",
    "command",
    "command",
    "equals",
    "going",
    "set",
    "equal",
    "lambda",
    "function",
    "need",
    "arguments",
    "actually",
    "think",
    "pass",
    "keyword",
    "arguments",
    "row",
    "equals",
    "row",
    "column",
    "equals",
    "column",
    "expression",
    "next",
    "turn",
    "pass",
    "row",
    "column",
    "also",
    "need",
    "add",
    "buttons",
    "frame",
    "buttons",
    "index",
    "row",
    "column",
    "use",
    "grid",
    "function",
    "grid",
    "row",
    "equals",
    "column",
    "equals",
    "column",
    "always",
    "good",
    "idea",
    "test",
    "program",
    "making",
    "major",
    "changes",
    "label",
    "reset",
    "button",
    "grid",
    "buttons",
    "main",
    "body",
    "program",
    "complete",
    "let",
    "head",
    "next",
    "turn",
    "function",
    "remember",
    "passing",
    "row",
    "column",
    "arguments",
    "need",
    "set",
    "parameters",
    "within",
    "next",
    "turn",
    "function",
    "row",
    "column",
    "first",
    "line",
    "within",
    "would",
    "like",
    "access",
    "player",
    "let",
    "say",
    "global",
    "player",
    "access",
    "first",
    "going",
    "check",
    "see",
    "button",
    "click",
    "empty",
    "buttons",
    "index",
    "row",
    "index",
    "column",
    "access",
    "text",
    "button",
    "add",
    "third",
    "index",
    "operator",
    "type",
    "text",
    "text",
    "button",
    "click",
    "equal",
    "set",
    "quotes",
    "means",
    "empty",
    "call",
    "check",
    "winner",
    "winner",
    "winner",
    "chicken",
    "dinner",
    "false",
    "winner",
    "fill",
    "button",
    "player",
    "player",
    "character",
    "whatever",
    "x",
    "whatever",
    "decide",
    "within",
    "let",
    "check",
    "see",
    "player",
    "equal",
    "players",
    "index",
    "zero",
    "first",
    "player",
    "remember",
    "created",
    "list",
    "players",
    "planning",
    "swapping",
    "later",
    "could",
    "say",
    "like",
    "player",
    "equal",
    "x",
    "would",
    "make",
    "program",
    "less",
    "flexible",
    "want",
    "pick",
    "like",
    "different",
    "character",
    "instead",
    "x",
    "player",
    "equal",
    "player",
    "index",
    "zero",
    "whatever",
    "symbol",
    "going",
    "take",
    "buttons",
    "index",
    "row",
    "index",
    "column",
    "take",
    "text",
    "set",
    "equal",
    "player",
    "check",
    "see",
    "winner",
    "filling",
    "button",
    "check",
    "winner",
    "still",
    "need",
    "fill",
    "function",
    "returns",
    "false",
    "switch",
    "players",
    "player",
    "equals",
    "players",
    "index",
    "one",
    "label",
    "dot",
    "config",
    "text",
    "equals",
    "players",
    "index",
    "1",
    "plus",
    "word",
    "turn",
    "checking",
    "see",
    "placing",
    "text",
    "player",
    "button",
    "click",
    "winner",
    "going",
    "swap",
    "players",
    "player",
    "equals",
    "next",
    "player",
    "configuring",
    "label",
    "displays",
    "next",
    "player",
    "turn",
    "players",
    "index",
    "1",
    "turn",
    "winner",
    "let",
    "say",
    "else",
    "check",
    "winner",
    "true",
    "take",
    "label",
    "dot",
    "config",
    "set",
    "text",
    "equal",
    "players",
    "index",
    "0",
    "plus",
    "word",
    "wins",
    "let",
    "add",
    "another",
    "else",
    "statement",
    "else",
    "tie",
    "let",
    "say",
    "check",
    "winner",
    "equal",
    "word",
    "tie",
    "already",
    "using",
    "false",
    "true",
    "let",
    "change",
    "label",
    "going",
    "copy",
    "text",
    "equals",
    "word",
    "tie",
    "okay",
    "let",
    "create",
    "else",
    "block",
    "goes",
    "right",
    "player",
    "one",
    "turn",
    "player",
    "index",
    "zero",
    "player",
    "turn",
    "player",
    "index",
    "one",
    "oh",
    "need",
    "mostly",
    "copy",
    "text",
    "change",
    "things",
    "around",
    "going",
    "copy",
    "within",
    "let",
    "set",
    "player",
    "equals",
    "players",
    "index",
    "zero",
    "players",
    "index",
    "zero",
    "turn",
    "players",
    "index",
    "one",
    "wins",
    "next",
    "turn",
    "function",
    "complete",
    "let",
    "head",
    "check",
    "winner",
    "function",
    "need",
    "check",
    "different",
    "win",
    "conditions",
    "return",
    "true",
    "somebody",
    "false",
    "yet",
    "winner",
    "word",
    "tie",
    "tie",
    "let",
    "check",
    "horizontal",
    "win",
    "conditions",
    "using",
    "loop",
    "row",
    "range",
    "three",
    "need",
    "check",
    "text",
    "button",
    "row",
    "buttons",
    "index",
    "row",
    "column",
    "index",
    "0",
    "use",
    "index",
    "operator",
    "check",
    "text",
    "equal",
    "next",
    "button",
    "row",
    "copy",
    "change",
    "zero",
    "one",
    "check",
    "see",
    "equal",
    "buttons",
    "index",
    "row",
    "index",
    "two",
    "going",
    "check",
    "see",
    "equal",
    "let",
    "move",
    "little",
    "bit",
    "space",
    "case",
    "means",
    "somebody",
    "buttons",
    "equal",
    "empty",
    "space",
    "means",
    "let",
    "return",
    "true",
    "means",
    "somebody",
    "need",
    "check",
    "vertical",
    "win",
    "conditions",
    "anybody",
    "character",
    "way",
    "single",
    "column",
    "next",
    "loop",
    "going",
    "four",
    "column",
    "range",
    "three",
    "first",
    "button",
    "button",
    "index",
    "zero",
    "column",
    "one",
    "column",
    "let",
    "paste",
    "two",
    "column",
    "need",
    "check",
    "diagonal",
    "win",
    "conditions",
    "buttons",
    "index",
    "0",
    "0",
    "top",
    "left",
    "corner",
    "text",
    "button",
    "equal",
    "buttons",
    "indexes",
    "one",
    "one",
    "equal",
    "indexes",
    "button",
    "two",
    "two",
    "equal",
    "empty",
    "space",
    "return",
    "true",
    "winner",
    "one",
    "last",
    "win",
    "condition",
    "check",
    "diagonal",
    "win",
    "condition",
    "need",
    "change",
    "indexes",
    "around",
    "zero",
    "two",
    "one",
    "one",
    "two",
    "zero",
    "going",
    "change",
    "statement",
    "else",
    "statement",
    "need",
    "check",
    "see",
    "spaces",
    "remaining",
    "else",
    "call",
    "empty",
    "spaces",
    "function",
    "yet",
    "fill",
    "returns",
    "false",
    "return",
    "word",
    "tie",
    "lastly",
    "else",
    "else",
    "winner",
    "tie",
    "return",
    "false",
    "check",
    "winner",
    "function",
    "let",
    "test",
    "account",
    "tie",
    "quite",
    "yet",
    "fill",
    "spaces",
    "looks",
    "like",
    "x",
    "wins",
    "longer",
    "fill",
    "buttons",
    "start",
    "new",
    "game",
    "quite",
    "yet",
    "either",
    "within",
    "empty",
    "spaces",
    "function",
    "let",
    "create",
    "local",
    "variable",
    "named",
    "spaces",
    "set",
    "equal",
    "nine",
    "whenever",
    "call",
    "function",
    "four",
    "row",
    "range",
    "three",
    "create",
    "nested",
    "loop",
    "column",
    "range",
    "three",
    "check",
    "text",
    "button",
    "buttons",
    "indexes",
    "row",
    "column",
    "check",
    "text",
    "see",
    "equal",
    "empty",
    "space",
    "case",
    "spaces",
    "minus",
    "equals",
    "one",
    "write",
    "statement",
    "spaces",
    "spaces",
    "remaining",
    "equal",
    "zero",
    "means",
    "return",
    "false",
    "spaces",
    "left",
    "else",
    "return",
    "true",
    "okay",
    "let",
    "test",
    "time",
    "trying",
    "get",
    "tie",
    "yep",
    "looks",
    "like",
    "tie",
    "next",
    "part",
    "optional",
    "would",
    "like",
    "change",
    "color",
    "button",
    "winning",
    "combination",
    "within",
    "check",
    "winner",
    "function",
    "underneath",
    "first",
    "win",
    "condition",
    "going",
    "take",
    "buttons",
    "index",
    "row",
    "index",
    "zero",
    "use",
    "config",
    "method",
    "set",
    "background",
    "color",
    "equal",
    "let",
    "say",
    "green",
    "going",
    "repeat",
    "process",
    "buttons",
    "within",
    "win",
    "condition",
    "row",
    "zero",
    "row",
    "one",
    "row",
    "two",
    "copy",
    "paste",
    "switch",
    "around",
    "matching",
    "zero",
    "column",
    "one",
    "column",
    "two",
    "column",
    "okay",
    "zero",
    "zero",
    "one",
    "one",
    "two",
    "two",
    "one",
    "zero",
    "two",
    "one",
    "one",
    "two",
    "zero",
    "winning",
    "combination",
    "color",
    "buttons",
    "involved",
    "combination",
    "going",
    "change",
    "green",
    "tie",
    "let",
    "change",
    "buttons",
    "let",
    "say",
    "yellow",
    "going",
    "write",
    "nested",
    "loops",
    "four",
    "row",
    "range",
    "three",
    "column",
    "range",
    "three",
    "take",
    "buttons",
    "row",
    "column",
    "change",
    "background",
    "color",
    "yellow",
    "color",
    "choosing",
    "tie",
    "yellow",
    "trying",
    "win",
    "actually",
    "complex",
    "thought",
    "yep",
    "looks",
    "like",
    "tie",
    "last",
    "thing",
    "need",
    "fill",
    "new",
    "game",
    "function",
    "begin",
    "new",
    "game",
    "let",
    "say",
    "global",
    "player",
    "would",
    "like",
    "access",
    "player",
    "inside",
    "function",
    "set",
    "player",
    "equal",
    "new",
    "random",
    "choice",
    "random",
    "dot",
    "choice",
    "pass",
    "list",
    "players",
    "change",
    "label",
    "label",
    "dot",
    "config",
    "set",
    "text",
    "equal",
    "player",
    "plus",
    "word",
    "turn",
    "also",
    "need",
    "reset",
    "buttons",
    "row",
    "range",
    "three",
    "column",
    "range",
    "three",
    "buttons",
    "index",
    "row",
    "index",
    "column",
    "dot",
    "config",
    "text",
    "equals",
    "set",
    "quotes",
    "empty",
    "change",
    "background",
    "color",
    "factors",
    "previously",
    "default",
    "color",
    "buttons",
    "actually",
    "hexadecimal",
    "f",
    "0",
    "f",
    "0",
    "f",
    "0",
    "function",
    "begin",
    "new",
    "game",
    "us",
    "let",
    "test",
    "sure",
    "going",
    "start",
    "new",
    "game",
    "reset",
    "reset",
    "actually",
    "try",
    "win",
    "time",
    "reset",
    "okay",
    "looks",
    "like",
    "new",
    "game",
    "function",
    "working",
    "another",
    "thing",
    "change",
    "players",
    "around",
    "let",
    "say",
    "would",
    "like",
    "play",
    "dollar",
    "sign",
    "sign",
    "program",
    "flexible",
    "enough",
    "change",
    "icons",
    "players",
    "right",
    "everybody",
    "basic",
    "game",
    "python",
    "would",
    "like",
    "copy",
    "code",
    "post",
    "comments",
    "section",
    "yeah",
    "code",
    "basic",
    "game",
    "python",
    "hey",
    "going",
    "everybody",
    "bro",
    "hope",
    "well",
    "video",
    "going",
    "create",
    "game",
    "snake",
    "using",
    "python",
    "sit",
    "back",
    "relax",
    "enjoy",
    "show",
    "first",
    "thing",
    "import",
    "tkinter",
    "well",
    "random",
    "module",
    "let",
    "define",
    "different",
    "classes",
    "functions",
    "need",
    "let",
    "create",
    "class",
    "snake",
    "object",
    "well",
    "food",
    "object",
    "time",
    "going",
    "write",
    "pass",
    "classes",
    "fill",
    "later",
    "class",
    "snake",
    "class",
    "food",
    "let",
    "define",
    "different",
    "functions",
    "need",
    "let",
    "say",
    "function",
    "named",
    "next",
    "turn",
    "change",
    "direction",
    "check",
    "collisions",
    "lastly",
    "game",
    "okay",
    "change",
    "direction",
    "going",
    "one",
    "parameter",
    "new",
    "direction",
    "create",
    "game",
    "like",
    "place",
    "bunch",
    "constants",
    "top",
    "game",
    "constants",
    "variables",
    "want",
    "change",
    "later",
    "kind",
    "like",
    "settings",
    "however",
    "python",
    "constants",
    "compared",
    "programming",
    "languages",
    "going",
    "create",
    "bunch",
    "variables",
    "behave",
    "like",
    "constants",
    "values",
    "want",
    "change",
    "kind",
    "like",
    "game",
    "settings",
    "placed",
    "top",
    "convenience",
    "naming",
    "convention",
    "constant",
    "letters",
    "uppercase",
    "settings",
    "like",
    "game",
    "width",
    "speed",
    "etc",
    "let",
    "say",
    "width",
    "game",
    "700",
    "feel",
    "free",
    "take",
    "liberty",
    "pick",
    "whatever",
    "size",
    "want",
    "game",
    "width",
    "game",
    "height",
    "set",
    "700",
    "well",
    "square",
    "let",
    "say",
    "speed",
    "speed",
    "snake",
    "often",
    "canvas",
    "update",
    "let",
    "say",
    "50",
    "lower",
    "number",
    "faster",
    "game",
    "space",
    "size",
    "large",
    "items",
    "game",
    "like",
    "food",
    "body",
    "parts",
    "snake",
    "going",
    "pick",
    "50",
    "change",
    "body",
    "parts",
    "many",
    "body",
    "parts",
    "snake",
    "begin",
    "game",
    "let",
    "say",
    "three",
    "snake",
    "color",
    "pick",
    "color",
    "name",
    "use",
    "rgb",
    "values",
    "use",
    "hexadecimal",
    "value",
    "going",
    "pick",
    "green",
    "0",
    "0",
    "ff00",
    "pick",
    "color",
    "want",
    "food",
    "color",
    "equals",
    "red",
    "ff000",
    "background",
    "color",
    "canvas",
    "background",
    "color",
    "pick",
    "black",
    "six",
    "zeros",
    "feel",
    "free",
    "mess",
    "colors",
    "green",
    "snake",
    "food",
    "going",
    "red",
    "background",
    "going",
    "black",
    "constants",
    "game",
    "feel",
    "free",
    "adjust",
    "like",
    "let",
    "head",
    "bottom",
    "make",
    "window",
    "window",
    "equals",
    "tk",
    "end",
    "window",
    "dot",
    "main",
    "loop",
    "let",
    "set",
    "title",
    "window",
    "window",
    "dot",
    "title",
    "snack",
    "game",
    "okay",
    "fine",
    "spell",
    "right",
    "snake",
    "game",
    "want",
    "window",
    "resizable",
    "use",
    "resizable",
    "pass",
    "false",
    "twice",
    "kind",
    "strange",
    "okay",
    "small",
    "window",
    "resize",
    "even",
    "tried",
    "okay",
    "let",
    "create",
    "score",
    "label",
    "probably",
    "need",
    "score",
    "first",
    "let",
    "say",
    "score",
    "equals",
    "zero",
    "initial",
    "direction",
    "direction",
    "equals",
    "let",
    "say",
    "let",
    "create",
    "score",
    "label",
    "let",
    "say",
    "label",
    "equals",
    "label",
    "adding",
    "label",
    "window",
    "let",
    "set",
    "text",
    "equal",
    "score",
    "colon",
    "going",
    "use",
    "format",
    "method",
    "pass",
    "score",
    "whatever",
    "set",
    "font",
    "pick",
    "whatever",
    "font",
    "prefer",
    "40",
    "decent",
    "size",
    "going",
    "pack",
    "label",
    "let",
    "test",
    "okay",
    "getting",
    "somewhere",
    "need",
    "create",
    "canvas",
    "canvas",
    "equals",
    "canvas",
    "adding",
    "window",
    "going",
    "set",
    "background",
    "color",
    "equal",
    "background",
    "constant",
    "going",
    "set",
    "height",
    "equal",
    "game",
    "height",
    "width",
    "equal",
    "game",
    "width",
    "set",
    "need",
    "pack",
    "canvas",
    "dot",
    "pack",
    "game",
    "board",
    "going",
    "try",
    "center",
    "window",
    "appears",
    "using",
    "lines",
    "code",
    "first",
    "thing",
    "update",
    "window",
    "renders",
    "need",
    "find",
    "dimensions",
    "let",
    "say",
    "window",
    "width",
    "equals",
    "window",
    "dot",
    "w",
    "info",
    "width",
    "window",
    "height",
    "equals",
    "window",
    "dot",
    "w",
    "info",
    "height",
    "need",
    "screen",
    "width",
    "equals",
    "window",
    "dot",
    "screen",
    "width",
    "screen",
    "height",
    "equals",
    "window",
    "dot",
    "w",
    "info",
    "screen",
    "height",
    "okay",
    "need",
    "see",
    "much",
    "going",
    "adjust",
    "position",
    "window",
    "let",
    "say",
    "x",
    "equals",
    "screen",
    "width",
    "divided",
    "2",
    "minus",
    "window",
    "width",
    "divided",
    "two",
    "thing",
    "except",
    "screen",
    "height",
    "window",
    "height",
    "okay",
    "need",
    "set",
    "geometry",
    "window",
    "dot",
    "geometry",
    "going",
    "use",
    "f",
    "string",
    "let",
    "set",
    "window",
    "width",
    "times",
    "window",
    "height",
    "add",
    "plus",
    "x",
    "plus",
    "pass",
    "x",
    "floats",
    "whole",
    "integers",
    "let",
    "add",
    "cast",
    "around",
    "x",
    "okay",
    "fairly",
    "close",
    "center",
    "yeah",
    "bad",
    "begin",
    "new",
    "game",
    "create",
    "snake",
    "object",
    "well",
    "food",
    "object",
    "snake",
    "equals",
    "snake",
    "called",
    "snake",
    "constructor",
    "food",
    "equals",
    "food",
    "okay",
    "let",
    "fill",
    "food",
    "class",
    "first",
    "think",
    "easier",
    "snake",
    "class",
    "let",
    "head",
    "food",
    "class",
    "let",
    "create",
    "init",
    "method",
    "def",
    "init",
    "construct",
    "food",
    "object",
    "us",
    "need",
    "place",
    "food",
    "object",
    "randomly",
    "x",
    "coordinate",
    "let",
    "say",
    "x",
    "equals",
    "random",
    "dot",
    "rand",
    "int",
    "need",
    "range",
    "range",
    "going",
    "zero",
    "comma",
    "game",
    "board",
    "view",
    "like",
    "chess",
    "board",
    "given",
    "amount",
    "spaces",
    "700",
    "divided",
    "space",
    "size",
    "14",
    "possible",
    "spots",
    "14",
    "possible",
    "spots",
    "need",
    "pick",
    "one",
    "spots",
    "randomly",
    "let",
    "say",
    "game",
    "width",
    "divided",
    "space",
    "size",
    "get",
    "random",
    "number",
    "0",
    "14",
    "however",
    "exclusive",
    "let",
    "say",
    "good",
    "measure",
    "going",
    "add",
    "set",
    "parentheses",
    "around",
    "okay",
    "convert",
    "pixels",
    "let",
    "multiply",
    "space",
    "size",
    "size",
    "item",
    "game",
    "thing",
    "change",
    "game",
    "width",
    "height",
    "okay",
    "good",
    "right",
    "let",
    "set",
    "coordinates",
    "let",
    "say",
    "self",
    "dot",
    "coordinates",
    "equals",
    "list",
    "x",
    "make",
    "sure",
    "spell",
    "coordinates",
    "right",
    "need",
    "draw",
    "food",
    "object",
    "canvas",
    "canvas",
    "dot",
    "create",
    "oval",
    "pick",
    "square",
    "two",
    "like",
    "need",
    "starting",
    "corner",
    "x",
    "ending",
    "coordinator",
    "x",
    "plus",
    "space",
    "size",
    "size",
    "object",
    "game",
    "x",
    "plus",
    "space",
    "size",
    "plus",
    "space",
    "size",
    "set",
    "fill",
    "color",
    "fill",
    "food",
    "color",
    "declared",
    "recommend",
    "adding",
    "tag",
    "well",
    "make",
    "easy",
    "delete",
    "object",
    "tag",
    "equal",
    "string",
    "food",
    "let",
    "test",
    "random",
    "circle",
    "square",
    "picked",
    "square",
    "appear",
    "someplace",
    "spot",
    "game",
    "board",
    "cool",
    "seems",
    "like",
    "working",
    "let",
    "work",
    "snake",
    "class",
    "next",
    "snake",
    "class",
    "need",
    "constructor",
    "set",
    "body",
    "size",
    "equal",
    "body",
    "parts",
    "need",
    "list",
    "coordinates",
    "fill",
    "later",
    "list",
    "square",
    "graphics",
    "list",
    "okay",
    "need",
    "create",
    "list",
    "coordinates",
    "use",
    "loop",
    "let",
    "say",
    "range",
    "zero",
    "body",
    "parts",
    "take",
    "self",
    "dot",
    "coordinates",
    "append",
    "new",
    "list",
    "coordinates",
    "body",
    "part",
    "start",
    "game",
    "0",
    "0",
    "snake",
    "appear",
    "top",
    "left",
    "corner",
    "need",
    "create",
    "squares",
    "okay",
    "x",
    "self",
    "dot",
    "coordinates",
    "remember",
    "list",
    "lists",
    "using",
    "x",
    "self",
    "coordinates",
    "create",
    "square",
    "equals",
    "canvas",
    "dot",
    "create",
    "rectangle",
    "need",
    "starting",
    "corner",
    "x",
    "x",
    "plus",
    "space",
    "size",
    "size",
    "object",
    "game",
    "let",
    "use",
    "constant",
    "though",
    "space",
    "size",
    "plus",
    "space",
    "size",
    "let",
    "set",
    "fill",
    "color",
    "equal",
    "snake",
    "color",
    "right",
    "let",
    "set",
    "tag",
    "convenience",
    "tag",
    "equals",
    "string",
    "snake",
    "okay",
    "list",
    "squares",
    "append",
    "square",
    "list",
    "self",
    "dot",
    "squares",
    "dot",
    "append",
    "pass",
    "whatever",
    "square",
    "create",
    "snake",
    "body",
    "size",
    "list",
    "coordinates",
    "list",
    "square",
    "graphics",
    "testing",
    "head",
    "snake",
    "top",
    "left",
    "corner",
    "need",
    "snake",
    "move",
    "given",
    "direction",
    "every",
    "turn",
    "initial",
    "direction",
    "able",
    "change",
    "later",
    "let",
    "head",
    "next",
    "turn",
    "function",
    "actually",
    "two",
    "things",
    "need",
    "parameters",
    "forgot",
    "fill",
    "snake",
    "well",
    "food",
    "call",
    "function",
    "begin",
    "game",
    "let",
    "unpack",
    "head",
    "snake",
    "x",
    "comma",
    "equals",
    "snake",
    "dot",
    "coordinates",
    "index",
    "zero",
    "head",
    "snake",
    "coordinates",
    "stored",
    "x",
    "let",
    "check",
    "see",
    "direction",
    "initial",
    "direction",
    "equals",
    "need",
    "else",
    "statements",
    "fill",
    "moment",
    "else",
    "direction",
    "equals",
    "left",
    "right",
    "okay",
    "direction",
    "let",
    "take",
    "coordinate",
    "head",
    "snake",
    "minus",
    "equals",
    "space",
    "size",
    "move",
    "one",
    "space",
    "plus",
    "equals",
    "space",
    "size",
    "left",
    "x",
    "minus",
    "equals",
    "space",
    "size",
    "lastly",
    "right",
    "x",
    "plus",
    "equals",
    "space",
    "size",
    "okay",
    "need",
    "call",
    "next",
    "turn",
    "function",
    "next",
    "turn",
    "use",
    "window",
    "dot",
    "need",
    "time",
    "let",
    "say",
    "game",
    "speed",
    "going",
    "call",
    "next",
    "turn",
    "function",
    "need",
    "pass",
    "arguments",
    "snake",
    "food",
    "snake",
    "food",
    "oh",
    "make",
    "sure",
    "actually",
    "calling",
    "next",
    "turn",
    "function",
    "inside",
    "method",
    "write",
    "function",
    "name",
    "next",
    "turn",
    "without",
    "parentheses",
    "okay",
    "let",
    "update",
    "coordinates",
    "height",
    "snake",
    "write",
    "move",
    "next",
    "turn",
    "snake",
    "dot",
    "coordinates",
    "insert",
    "new",
    "set",
    "coordinates",
    "updating",
    "one",
    "zero",
    "index",
    "head",
    "snake",
    "insert",
    "x",
    "coordinates",
    "new",
    "location",
    "going",
    "create",
    "new",
    "graphic",
    "head",
    "snake",
    "square",
    "equals",
    "canvas",
    "dot",
    "create",
    "rectangle",
    "pass",
    "x",
    "starting",
    "corner",
    "rectangle",
    "ending",
    "corner",
    "x",
    "plus",
    "space",
    "size",
    "plus",
    "space",
    "size",
    "add",
    "fill",
    "color",
    "snake",
    "color",
    "need",
    "update",
    "snakes",
    "list",
    "squares",
    "snake",
    "dot",
    "squares",
    "insert",
    "index",
    "0",
    "new",
    "square",
    "create",
    "okay",
    "let",
    "test",
    "one",
    "last",
    "thing",
    "need",
    "get",
    "program",
    "run",
    "create",
    "snake",
    "food",
    "object",
    "call",
    "next",
    "turn",
    "function",
    "pass",
    "snake",
    "food",
    "object",
    "able",
    "test",
    "snake",
    "going",
    "move",
    "need",
    "delete",
    "last",
    "body",
    "part",
    "snake",
    "within",
    "next",
    "turn",
    "function",
    "update",
    "next",
    "turn",
    "let",
    "delete",
    "last",
    "body",
    "part",
    "snake",
    "delete",
    "snake",
    "dot",
    "coordinates",
    "negative",
    "index",
    "one",
    "last",
    "set",
    "coordinates",
    "update",
    "canvas",
    "canvas",
    "dot",
    "delete",
    "snake",
    "dot",
    "squares",
    "index",
    "negative",
    "one",
    "lastly",
    "delete",
    "snake",
    "list",
    "squares",
    "index",
    "negative",
    "one",
    "appear",
    "snake",
    "moving",
    "cool",
    "need",
    "controls",
    "snake",
    "bottom",
    "program",
    "let",
    "bind",
    "keys",
    "let",
    "window",
    "dot",
    "bind",
    "let",
    "find",
    "left",
    "arrow",
    "key",
    "use",
    "lambda",
    "argument",
    "event",
    "call",
    "change",
    "direction",
    "function",
    "pass",
    "word",
    "left",
    "okay",
    "thing",
    "directions",
    "right",
    "pass",
    "right",
    "pass",
    "pass",
    "let",
    "head",
    "change",
    "direction",
    "function",
    "need",
    "access",
    "direction",
    "global",
    "direction",
    "old",
    "direction",
    "new",
    "direction",
    "passed",
    "equal",
    "left",
    "old",
    "direction",
    "direction",
    "equal",
    "right",
    "want",
    "go",
    "backwards",
    "180",
    "degree",
    "turn",
    "set",
    "direction",
    "equal",
    "new",
    "direction",
    "need",
    "repeat",
    "directions",
    "new",
    "direction",
    "going",
    "change",
    "else",
    "else",
    "new",
    "direction",
    "right",
    "direction",
    "already",
    "left",
    "direction",
    "direction",
    "okay",
    "able",
    "change",
    "direction",
    "snake",
    "sweet",
    "okay",
    "need",
    "eat",
    "pesky",
    "apple",
    "next",
    "let",
    "work",
    "nothing",
    "else",
    "need",
    "change",
    "within",
    "change",
    "direction",
    "function",
    "going",
    "minimize",
    "function",
    "head",
    "next",
    "turn",
    "function",
    "place",
    "statement",
    "x",
    "remember",
    "unpacked",
    "coordinates",
    "head",
    "snake",
    "x",
    "x",
    "coordinate",
    "head",
    "snake",
    "equal",
    "food",
    "objects",
    "coordinates",
    "index",
    "zero",
    "food",
    "object",
    "equal",
    "food",
    "coordinates",
    "index",
    "one",
    "means",
    "overlapping",
    "let",
    "take",
    "score",
    "increment",
    "one",
    "change",
    "label",
    "text",
    "equal",
    "score",
    "going",
    "use",
    "format",
    "method",
    "pass",
    "new",
    "score",
    "let",
    "delete",
    "food",
    "object",
    "gave",
    "food",
    "object",
    "tag",
    "use",
    "name",
    "tag",
    "delete",
    "create",
    "new",
    "food",
    "object",
    "going",
    "write",
    "part",
    "program",
    "within",
    "else",
    "statement",
    "delete",
    "last",
    "body",
    "part",
    "snake",
    "eat",
    "food",
    "object",
    "okay",
    "let",
    "test",
    "three",
    "body",
    "parts",
    "four",
    "five",
    "six",
    "seven",
    "eight",
    "nine",
    "ten",
    "see",
    "score",
    "going",
    "okay",
    "let",
    "work",
    "collisions",
    "next",
    "able",
    "go",
    "screen",
    "like",
    "one",
    "thing",
    "going",
    "change",
    "let",
    "add",
    "statement",
    "check",
    "collisions",
    "return",
    "true",
    "false",
    "detect",
    "collision",
    "pass",
    "snake",
    "object",
    "collision",
    "call",
    "game",
    "function",
    "else",
    "update",
    "next",
    "turn",
    "okay",
    "let",
    "fill",
    "check",
    "collisions",
    "function",
    "longer",
    "need",
    "function",
    "next",
    "turn",
    "actually",
    "need",
    "classes",
    "either",
    "minimize",
    "okay",
    "check",
    "collisions",
    "looks",
    "like",
    "need",
    "parameter",
    "snake",
    "sure",
    "set",
    "let",
    "unpack",
    "head",
    "snake",
    "x",
    "equals",
    "snake",
    "dot",
    "coordinates",
    "index",
    "zero",
    "let",
    "check",
    "see",
    "cross",
    "left",
    "right",
    "border",
    "game",
    "x",
    "less",
    "zero",
    "x",
    "greater",
    "equal",
    "game",
    "width",
    "return",
    "true",
    "think",
    "testing",
    "purposes",
    "going",
    "print",
    "something",
    "console",
    "window",
    "game",
    "let",
    "test",
    "okay",
    "going",
    "go",
    "right",
    "border",
    "game",
    "game",
    "stopped",
    "let",
    "go",
    "left",
    "game",
    "cool",
    "know",
    "working",
    "okay",
    "let",
    "thing",
    "use",
    "else",
    "less",
    "zero",
    "greater",
    "equal",
    "game",
    "height",
    "let",
    "print",
    "game",
    "return",
    "true",
    "probably",
    "test",
    "okay",
    "going",
    "game",
    "let",
    "go",
    "game",
    "snake",
    "touches",
    "tail",
    "another",
    "body",
    "part",
    "let",
    "say",
    "four",
    "actually",
    "descriptive",
    "let",
    "say",
    "every",
    "body",
    "part",
    "snake",
    "dot",
    "coordinates",
    "going",
    "set",
    "everything",
    "head",
    "snake",
    "going",
    "check",
    "see",
    "coordinates",
    "matching",
    "x",
    "equal",
    "body",
    "part",
    "index",
    "0",
    "equal",
    "body",
    "part",
    "index",
    "1",
    "return",
    "true",
    "print",
    "game",
    "test",
    "print",
    "game",
    "otherwise",
    "return",
    "false",
    "collisions",
    "think",
    "going",
    "change",
    "size",
    "snake",
    "okay",
    "let",
    "run",
    "cool",
    "game",
    "last",
    "thing",
    "need",
    "fill",
    "game",
    "function",
    "looks",
    "like",
    "everything",
    "else",
    "fine",
    "head",
    "game",
    "function",
    "take",
    "canvas",
    "delete",
    "create",
    "game",
    "text",
    "canvas",
    "create",
    "text",
    "would",
    "like",
    "center",
    "canvas",
    "take",
    "canvas",
    "w",
    "info",
    "width",
    "divided",
    "two",
    "comma",
    "canvas",
    "w",
    "info",
    "height",
    "divided",
    "two",
    "going",
    "put",
    "next",
    "line",
    "readability",
    "set",
    "font",
    "pick",
    "whatever",
    "font",
    "want",
    "need",
    "text",
    "text",
    "equals",
    "game",
    "pick",
    "color",
    "red",
    "decent",
    "add",
    "tag",
    "convenience",
    "game",
    "game",
    "function",
    "going",
    "change",
    "body",
    "parts",
    "snake",
    "back",
    "originally",
    "probably",
    "test",
    "game",
    "screen",
    "right",
    "appeared",
    "okay",
    "let",
    "change",
    "settings",
    "around",
    "create",
    "larger",
    "game",
    "board",
    "let",
    "say",
    "1000",
    "700",
    "still",
    "works",
    "slow",
    "speed",
    "speed",
    "100",
    "half",
    "fast",
    "going",
    "pretty",
    "slow",
    "set",
    "change",
    "space",
    "size",
    "everything",
    "lot",
    "smaller",
    "including",
    "food",
    "object",
    "change",
    "body",
    "parts",
    "20",
    "begin",
    "fairly",
    "excessive",
    "change",
    "back",
    "three",
    "change",
    "snake",
    "color",
    "let",
    "say",
    "would",
    "like",
    "blue",
    "snake",
    "hex",
    "color",
    "four",
    "zeros",
    "two",
    "f",
    "change",
    "food",
    "color",
    "let",
    "say",
    "would",
    "like",
    "yellow",
    "food",
    "object",
    "would",
    "four",
    "f",
    "two",
    "zeros",
    "kind",
    "resembles",
    "python",
    "logo",
    "color",
    "scheme",
    "change",
    "background",
    "color",
    "let",
    "say",
    "white",
    "would",
    "six",
    "apps",
    "like",
    "go",
    "back",
    "delete",
    "delete",
    "delete",
    "alright",
    "well",
    "everything",
    "let",
    "run",
    "game",
    "one",
    "last",
    "time",
    "music",
    "music",
    "well",
    "everybody",
    "basic",
    "game",
    "snake",
    "beginners",
    "post",
    "code",
    "comment",
    "section",
    "yeah",
    "basic",
    "game",
    "snake",
    "using",
    "python",
    "hey",
    "yeah",
    "talking",
    "learned",
    "something",
    "new",
    "help",
    "help",
    "three",
    "easy",
    "steps",
    "smashing",
    "like",
    "button",
    "drop",
    "comment",
    "subscribe",
    "like",
    "become",
    "fellow",
    "bro",
    "music"
  ],
  "keywords": [
    "hey",
    "going",
    "everybody",
    "bro",
    "hope",
    "well",
    "video",
    "help",
    "get",
    "python",
    "sit",
    "back",
    "relax",
    "enjoy",
    "show",
    "would",
    "like",
    "comment",
    "one",
    "equals",
    "need",
    "programming",
    "right",
    "new",
    "good",
    "let",
    "download",
    "go",
    "click",
    "button",
    "open",
    "check",
    "add",
    "another",
    "version",
    "path",
    "give",
    "little",
    "bit",
    "close",
    "next",
    "step",
    "think",
    "us",
    "write",
    "find",
    "since",
    "things",
    "use",
    "point",
    "follow",
    "pick",
    "folder",
    "keep",
    "default",
    "desktop",
    "also",
    "variable",
    "two",
    "run",
    "create",
    "project",
    "name",
    "whatever",
    "hello",
    "creating",
    "main",
    "dot",
    "pi",
    "welcome",
    "file",
    "work",
    "empty",
    "begin",
    "box",
    "created",
    "probably",
    "look",
    "something",
    "delete",
    "know",
    "guys",
    "font",
    "change",
    "size",
    "say",
    "uh",
    "okay",
    "much",
    "better",
    "actually",
    "see",
    "screen",
    "play",
    "corner",
    "tab",
    "bottom",
    "window",
    "display",
    "program",
    "line",
    "end",
    "process",
    "exit",
    "code",
    "zero",
    "means",
    "currently",
    "anything",
    "print",
    "message",
    "type",
    "set",
    "parentheses",
    "within",
    "quotes",
    "either",
    "double",
    "pizza",
    "says",
    "statement",
    "really",
    "first",
    "way",
    "color",
    "console",
    "number",
    "select",
    "green",
    "else",
    "oh",
    "yeah",
    "post",
    "useful",
    "comments",
    "section",
    "three",
    "drop",
    "explain",
    "variables",
    "remember",
    "running",
    "value",
    "contains",
    "day",
    "x",
    "plus",
    "assign",
    "different",
    "data",
    "types",
    "numbers",
    "even",
    "called",
    "true",
    "false",
    "later",
    "unique",
    "strings",
    "string",
    "characters",
    "make",
    "sure",
    "put",
    "word",
    "space",
    "turn",
    "take",
    "surround",
    "function",
    "class",
    "short",
    "example",
    "together",
    "long",
    "maybe",
    "second",
    "separate",
    "underscore",
    "last",
    "along",
    "names",
    "bunch",
    "character",
    "result",
    "normally",
    "sort",
    "time",
    "lines",
    "move",
    "int",
    "integer",
    "age",
    "edge",
    "want",
    "writing",
    "kind",
    "error",
    "important",
    "float",
    "user",
    "order",
    "convert",
    "case",
    "store",
    "decimal",
    "portion",
    "height",
    "using",
    "guess",
    "may",
    "instead",
    "still",
    "statements",
    "values",
    "yes",
    "basics",
    "four",
    "basic",
    "copy",
    "paste",
    "people",
    "multiple",
    "could",
    "list",
    "comma",
    "equal",
    "thing",
    "pretend",
    "around",
    "old",
    "least",
    "works",
    "methods",
    "available",
    "length",
    "method",
    "return",
    "access",
    "index",
    "capital",
    "b",
    "always",
    "start",
    "moving",
    "lowercase",
    "additional",
    "uppercase",
    "everything",
    "progress",
    "today",
    "1",
    "2",
    "count",
    "many",
    "replace",
    "pass",
    "arguments",
    "times",
    "might",
    "teach",
    "written",
    "already",
    "z",
    "round",
    "cast",
    "left",
    "found",
    "accept",
    "input",
    "ask",
    "somebody",
    "inside",
    "enter",
    "submit",
    "press",
    "part",
    "ca",
    "try",
    "equation",
    "yet",
    "adding",
    "10",
    "prompt",
    "test",
    "functions",
    "module",
    "argument",
    "top",
    "side",
    "negative",
    "square",
    "amount",
    "talk",
    "used",
    "elements",
    "slice",
    "operator",
    "brackets",
    "object",
    "fill",
    "starting",
    "call",
    "0",
    "position",
    "entire",
    "colon",
    "stop",
    "five",
    "six",
    "place",
    "field",
    "c",
    "reverse",
    "website",
    "remove",
    "break",
    "however",
    "minus",
    "rename",
    "block",
    "execute",
    "condition",
    "greater",
    "finish",
    "continue",
    "less",
    "child",
    "f",
    "100",
    "logical",
    "conditional",
    "temperature",
    "outside",
    "certain",
    "range",
    "degrees",
    "20",
    "hot",
    "loops",
    "loop",
    "key",
    "concept",
    "alright",
    "iterate",
    "iteration",
    "passing",
    "iterable",
    "collection",
    "year",
    "import",
    "waiting",
    "seconds",
    "sleep",
    "thread",
    "nested",
    "width",
    "columns",
    "working",
    "charge",
    "perhaps",
    "random",
    "dash",
    "lists",
    "items",
    "food",
    "longer",
    "dog",
    "item",
    "element",
    "update",
    "event",
    "insert",
    "clear",
    "coffee",
    "receive",
    "tuples",
    "student",
    "tuple",
    "typing",
    "utensils",
    "dishes",
    "dictionary",
    "lastly",
    "followed",
    "known",
    "task",
    "define",
    "def",
    "nice",
    "send",
    "parameters",
    "positional",
    "parameter",
    "objects",
    "multiply",
    "location",
    "keyword",
    "correct",
    "named",
    "local",
    "global",
    "pack",
    "asterisk",
    "edit",
    "title",
    "format",
    "animal",
    "text",
    "question",
    "answer",
    "cool",
    "game",
    "rock",
    "paper",
    "scissors",
    "exception",
    "exceptions",
    "divide",
    "divided",
    "catch",
    "handle",
    "files",
    "events",
    "computer",
    "returns",
    "directory",
    "simple",
    "read",
    "w",
    "current",
    "save",
    "appear",
    "modules",
    "classes",
    "head",
    "player",
    "win",
    "tie",
    "score",
    "questions",
    "options",
    "guesses",
    "looks",
    "percent",
    "option",
    "attributes",
    "car",
    "drive",
    "self",
    "init",
    "constructor",
    "blue",
    "red",
    "wheels",
    "motorcycle",
    "inheritance",
    "inherit",
    "parent",
    "eat",
    "rabbit",
    "fish",
    "hawk",
    "area",
    "abstract",
    "vehicle",
    "black",
    "duck",
    "chicken",
    "expression",
    "lambda",
    "students",
    "sorted",
    "column",
    "grid",
    "comprehension",
    "zip",
    "date",
    "body",
    "tasks",
    "cpu",
    "threads",
    "background",
    "active",
    "complete",
    "demon",
    "processes",
    "500",
    "tk",
    "widgets",
    "buttons",
    "images",
    "geometry",
    "icon",
    "bar",
    "image",
    "photo",
    "config",
    "hex",
    "label",
    "widget",
    "coordinates",
    "foreground",
    "border",
    "direction",
    "command",
    "mouse",
    "entry",
    "radio",
    "menu",
    "scale",
    "info",
    "cut",
    "frame",
    "row",
    "email",
    "canvas",
    "ball",
    "bind",
    "velocity",
    "pip",
    "snake"
  ]
}