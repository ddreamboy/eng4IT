{
  "text": "what is up guys in this video i'm going\nto be showing you how you can get\nstarted with python\nin less than 10 minutes and i'm going to\nbe using python 3.8 for this\nalong with pycharm as my code editor\nyou can just search these on google and\nthey will pop up immediately\nthey are free and open source so\ndefinitely do check those out\notherwise let's get started immediately\nwith the first thing you should know in\npython and that is how to assign values\nto\nvariables so to create a variable all\nyou have to do is decide on a name such\nas\nitem and then you can just assign it a\nvalue\nthis is a string and a string is just\nany form of text\nfor the program to read and you also\nneed to keep in mind\nthat python is a case sensitive language\nwhich means item with a small\ni and item with a big i are going to\nmean\nabsolutely different things and also a\nnaming convention\nin python is to add an underscore every\ntime you have more than one word\nso if we say item name you want to add\nthis underscore over here\nand we can just say orange so now we\nhave a few strings assigned\nto three different variables let's go\nahead and print\nfirst the difference between item and\nitem just to show you\nthat there is a difference so we'll go\nahead and click on run\nand you'll notice it will say banana and\napple\nnow let's go ahead and print another\nstring which this time is going to be\nhello\nand we're going to add a plus and\nthe item name so as you can see we can\nactually combine text and when we print\nthat it's going to say hello orange\nnext we have data types so the first one\nis the integer which is just any number\nand you're going to notice it being\nwritten\nin blue then we have strings which as i\nshowed you earlier is just any text\ninside quotation marks then we have\nbooleans which is just a simple\ntrue or false so as you can see we can\njust type in false here\nor true here and that's all that it is\nit just says true or false\nand the final one you should know for\ngetting started\nis list which all you have to do is\ncreate a pair of angle brackets\nand insert the values you want inside\nhere and it can be a mixture between\nnumbers booleans and so on but for this\nexample we'll just keep it simple\nand write a few strings then if we go\nahead and print these\nyou're going to notice that we will get\n2021 text\nfalse and the list but let's move on to\nan example that we want to print these\nvalues\ncombined so let's say name is mario the\nstring\nnumber is going to equal 22. so you're\ngoing to notice 2021\nis a blue number and this one is green\nbecause this is considered text while\nthis is considered\nan integer so what we need to do is\nactually convert them into the correct\ntypes before combining them\nso to do that we can just go ahead and\ntype in print name plus\nthe string value of integer so it's\ngoing to convert the integer to a string\nso that we can combine these two texts\ntogether if we remove that\nand only write integer you're going to\nnotice we are going to get an exception\nthat says we cannot do that\nand the same thing goes for the string\nnumber pretend we want to add the value\nof 10 to the string number the editor\nwill be nice enough to tell you you\nshouldn't do that\nand we should just put some parentheses\nthere and type in\nin ahead of that so we can convert it to\nan integer and add it easily\nnext let's move on to math so we will\ncreate two variables one will be\n10 and one will be five and to do math\nin python\nit's very self-explanatory as you can\nsee to do addition you just need to add\na plus symbol\nfor the difference you just add a minus\nsymbol to multiply you add an\nasterisk to divide you add a slash and\nif you want the exponential power\njust add two asterisks and you'll notice\nthat if we print all of these\nyou're going to get a very quick\ncalculator so of course 10 plus 5 is 15\na minus b is going to be 5 and so on you\nwill get the values that correspond\nto those operators okay next let's go\nahead\nand create a logic statement so we're\ngoing to use\nthese two values so is happy is false\nage is 28.\nlet's pretend we want something to\nhappen if the age is more than 21\nwe'll say print you are old and if they\nare not old\nwe can also type in l if the age\nis equal to 18 we will tell them you are\ngetting old\nand if it's neither of those we can go\nahead and say\nyou are still young and the same thing\ngoes with the\nis happy statement so we type in if the\nperson is happy\nwe can write you are happy else they are\nprobably not happy\nso we will just write you are not happy\nand when we play it it's going to say\nthey are not happy because is happy\nis false and if we set this to true it's\ngoing to change to\nyou are happy so the if statement just\ntakes into account whether a statement\nis true or\nfalse and depending on that it's going\nto give the outcome of the values\nand the if else statement is going to\nprobably be your most\nused logic next let's move on to the for\nloop\nso for i in range of three which means\nit's going to\nloop over three values we want to print\nhello and we can add a comma here\nand the value of i so if we print this\nyou're going to notice\nit's going to say hello0 hello1 hello2\nbecause\nin programming the index always starts\nat 0.\nso if you actually want that to start at\none you're going to have to manually add\none\nto i so now you get hello one hello to\nhello three\nand also just so you know what range is\nwe can go down here\nand we can go ahead and type in print\nrange\nof three so you're going to notice it's\ngoing to create a range object which is\ngoing to have the values from 0\nto 3 so this can iterate three times\nover that but you should also know\nthat this works for lists so we can\ncreate a name list\nand we can type in for name in name list\nwe can print the name next we have a\nwhile loop so we're just gonna type in i\nequals zero and while i is less than\nfive\nwe're going to increment the value of i\nby one\neach time it goes in this loop and\nfinally we want to print the value of i\nso what you should get\nare five values printed out just like\nthis because as soon as this statement\nbecomes false\nit's going to exit out of this loop and\njust terminate the program but a reason\nto use this is because you can create an\ninfinite loop such as while true and\nthat's never going to be false and\ninside here we're going to type in\nuser input and that's going to equal an\ninput\nthat says enter something and if\nthe user input is equal to the string of\nzero then we're going to print we are\ndone here\nand we are also going to break\nand what break does is just cancel the\nloop which means\nif we type in zero this loop is no\nlonger going to be valid\nand it's going to exit out of the\nprogram otherwise it's going to loop\nforever and if we actually play the\nprogram you're going to notice that\nfinally we can add some inputs so we can\ntype in 10\nwe can do two we can type in whatever\nthat is\nbut as soon as we type in zero it's\ngoing to exit the loop because\nit will reach this break statement and\nthe program will finish\nmoving on to functions to create a\nfunction\nall you have to do is use the def\nkeyword and just name the function\nhowever you like of course i'm going to\nuse\nthe underscore naming convention and\nthis function is only going to be used\nto say hello to the user so\nhere we can go ahead and type in print\nhey there and we're going to insert the\nname so you might be wondering\nwhat are functions and what do we use\nfunctions for well functions are just\nused to\nreuse your code in many different\ninstances because\nthe main point of programming is to\nreuse your code\nas much as possible you want to maximize\nhow often you can\nreuse the same line of code without\nhaving to rewrite it\nso for example now we created a function\nthat says hello we can type in mario\nand we can also use it again and we can\ntype in luigi and when we run the\nprogram it will say hey there mario\nand hey there luigi instead of writing\nthis statement\ntwice we were able to just use one\nfunction to do it multiple times\nand one thing we should cover also on\nfunctions is pretend you have\na lot of functions you need to create\nsuch as get\ninternet and run game something\nsuch as that and you don't really have\nthe logic for it yet so you're going to\nnotice that these\nare empty if you run the program you're\ngoing to get\nan error but python has created this\nkeyword that is called pass\nwhich essentially just says there's\nnothing in here we accept that\nand your program is still going to be\nable to run regardless of having no\ncontent inside the function now when we\ntap on run you're going to notice there\nare going to be\nno errors because the program's going to\nunderstand that we provided the keyword\npass\nwhich just tells it that there's nothing\nthere and it accepts it but this is very\ngood for creating the blueprints later\nin case you need to write everything\nyour program should do but don't really\nknow how to do that yet\njust insert the word pass and it will\nsave you a lot of trouble\nand finally we're going to go over how\nwe can use the try\nand accept block so for here we're going\nto create an\ninput and it's going to say please\nprovide\na number so now we're going to go ahead\nand type in try\nand we're going to try to print the\nvalue plus the\ninteger of the number that we get from\nthe user\nand if that doesn't work we're going to\nprint that\nthat is not a valid number\nso the way it works is it tries to\nexecute the code that's inside here\nand if anything goes wrong if an\nexception occurs it's going to go\nto the accept block and it's going to\nexecute whatever is inside that\nof course if you write something that\nthrows an exception inside here\nyou need to try with another try and\naccept block but if we go ahead and run\nthe program now we can write something\nlike 10\nand it's going to add 10 to the value\nbut of course what if we write something\nsuch as mario\ntry adding mario to 10 and the program\nis not going to be happy\nbecause you cannot convert mario to an\ninteger and then add it to 10. so it's\ngoing to say\nyou shouldn't do that but don't worry\nbecause we have the exception covered\nand our program will say that is not a\nvalid number and not throw an exception\nbut anyway\ni really hope that helped you to get\nstarted with python of course there's a\nlot more to cover\nthis was just meant as a very quick\nguide for helping you to get started\nand with that being said have a\nwonderful day and i'll see you guys in\nthe next video\n",
  "words": [
    "guys",
    "video",
    "going",
    "showing",
    "get",
    "started",
    "python",
    "less",
    "10",
    "minutes",
    "going",
    "using",
    "python",
    "along",
    "pycharm",
    "code",
    "editor",
    "search",
    "google",
    "pop",
    "immediately",
    "free",
    "open",
    "source",
    "definitely",
    "check",
    "otherwise",
    "let",
    "get",
    "started",
    "immediately",
    "first",
    "thing",
    "know",
    "python",
    "assign",
    "values",
    "variables",
    "create",
    "variable",
    "decide",
    "name",
    "item",
    "assign",
    "value",
    "string",
    "string",
    "form",
    "text",
    "program",
    "read",
    "also",
    "need",
    "keep",
    "mind",
    "python",
    "case",
    "sensitive",
    "language",
    "means",
    "item",
    "small",
    "item",
    "big",
    "going",
    "mean",
    "absolutely",
    "different",
    "things",
    "also",
    "naming",
    "convention",
    "python",
    "add",
    "underscore",
    "every",
    "time",
    "one",
    "word",
    "say",
    "item",
    "name",
    "want",
    "add",
    "underscore",
    "say",
    "orange",
    "strings",
    "assigned",
    "three",
    "different",
    "variables",
    "let",
    "go",
    "ahead",
    "print",
    "first",
    "difference",
    "item",
    "item",
    "show",
    "difference",
    "go",
    "ahead",
    "click",
    "run",
    "notice",
    "say",
    "banana",
    "apple",
    "let",
    "go",
    "ahead",
    "print",
    "another",
    "string",
    "time",
    "going",
    "hello",
    "going",
    "add",
    "plus",
    "item",
    "name",
    "see",
    "actually",
    "combine",
    "text",
    "print",
    "going",
    "say",
    "hello",
    "orange",
    "next",
    "data",
    "types",
    "first",
    "one",
    "integer",
    "number",
    "going",
    "notice",
    "written",
    "blue",
    "strings",
    "showed",
    "earlier",
    "text",
    "inside",
    "quotation",
    "marks",
    "booleans",
    "simple",
    "true",
    "false",
    "see",
    "type",
    "false",
    "true",
    "says",
    "true",
    "false",
    "final",
    "one",
    "know",
    "getting",
    "started",
    "list",
    "create",
    "pair",
    "angle",
    "brackets",
    "insert",
    "values",
    "want",
    "inside",
    "mixture",
    "numbers",
    "booleans",
    "example",
    "keep",
    "simple",
    "write",
    "strings",
    "go",
    "ahead",
    "print",
    "going",
    "notice",
    "get",
    "2021",
    "text",
    "false",
    "list",
    "let",
    "move",
    "example",
    "want",
    "print",
    "values",
    "combined",
    "let",
    "say",
    "name",
    "mario",
    "string",
    "number",
    "going",
    "equal",
    "going",
    "notice",
    "2021",
    "blue",
    "number",
    "one",
    "green",
    "considered",
    "text",
    "considered",
    "integer",
    "need",
    "actually",
    "convert",
    "correct",
    "types",
    "combining",
    "go",
    "ahead",
    "type",
    "print",
    "name",
    "plus",
    "string",
    "value",
    "integer",
    "going",
    "convert",
    "integer",
    "string",
    "combine",
    "two",
    "texts",
    "together",
    "remove",
    "write",
    "integer",
    "going",
    "notice",
    "going",
    "get",
    "exception",
    "says",
    "thing",
    "goes",
    "string",
    "number",
    "pretend",
    "want",
    "add",
    "value",
    "10",
    "string",
    "number",
    "editor",
    "nice",
    "enough",
    "tell",
    "put",
    "parentheses",
    "type",
    "ahead",
    "convert",
    "integer",
    "add",
    "easily",
    "next",
    "let",
    "move",
    "math",
    "create",
    "two",
    "variables",
    "one",
    "10",
    "one",
    "five",
    "math",
    "python",
    "see",
    "addition",
    "need",
    "add",
    "plus",
    "symbol",
    "difference",
    "add",
    "minus",
    "symbol",
    "multiply",
    "add",
    "asterisk",
    "divide",
    "add",
    "slash",
    "want",
    "exponential",
    "power",
    "add",
    "two",
    "asterisks",
    "notice",
    "print",
    "going",
    "get",
    "quick",
    "calculator",
    "course",
    "10",
    "plus",
    "5",
    "15",
    "minus",
    "b",
    "going",
    "5",
    "get",
    "values",
    "correspond",
    "operators",
    "okay",
    "next",
    "let",
    "go",
    "ahead",
    "create",
    "logic",
    "statement",
    "going",
    "use",
    "two",
    "values",
    "happy",
    "false",
    "age",
    "let",
    "pretend",
    "want",
    "something",
    "happen",
    "age",
    "21",
    "say",
    "print",
    "old",
    "old",
    "also",
    "type",
    "l",
    "age",
    "equal",
    "18",
    "tell",
    "getting",
    "old",
    "neither",
    "go",
    "ahead",
    "say",
    "still",
    "young",
    "thing",
    "goes",
    "happy",
    "statement",
    "type",
    "person",
    "happy",
    "write",
    "happy",
    "else",
    "probably",
    "happy",
    "write",
    "happy",
    "play",
    "going",
    "say",
    "happy",
    "happy",
    "false",
    "set",
    "true",
    "going",
    "change",
    "happy",
    "statement",
    "takes",
    "account",
    "whether",
    "statement",
    "true",
    "false",
    "depending",
    "going",
    "give",
    "outcome",
    "values",
    "else",
    "statement",
    "going",
    "probably",
    "used",
    "logic",
    "next",
    "let",
    "move",
    "loop",
    "range",
    "three",
    "means",
    "going",
    "loop",
    "three",
    "values",
    "want",
    "print",
    "hello",
    "add",
    "comma",
    "value",
    "print",
    "going",
    "notice",
    "going",
    "say",
    "hello0",
    "hello1",
    "hello2",
    "programming",
    "index",
    "always",
    "starts",
    "actually",
    "want",
    "start",
    "one",
    "going",
    "manually",
    "add",
    "one",
    "get",
    "hello",
    "one",
    "hello",
    "hello",
    "three",
    "also",
    "know",
    "range",
    "go",
    "go",
    "ahead",
    "type",
    "print",
    "range",
    "three",
    "going",
    "notice",
    "going",
    "create",
    "range",
    "object",
    "going",
    "values",
    "0",
    "3",
    "iterate",
    "three",
    "times",
    "also",
    "know",
    "works",
    "lists",
    "create",
    "name",
    "list",
    "type",
    "name",
    "name",
    "list",
    "print",
    "name",
    "next",
    "loop",
    "gon",
    "na",
    "type",
    "equals",
    "zero",
    "less",
    "five",
    "going",
    "increment",
    "value",
    "one",
    "time",
    "goes",
    "loop",
    "finally",
    "want",
    "print",
    "value",
    "get",
    "five",
    "values",
    "printed",
    "like",
    "soon",
    "statement",
    "becomes",
    "false",
    "going",
    "exit",
    "loop",
    "terminate",
    "program",
    "reason",
    "use",
    "create",
    "infinite",
    "loop",
    "true",
    "never",
    "going",
    "false",
    "inside",
    "going",
    "type",
    "user",
    "input",
    "going",
    "equal",
    "input",
    "says",
    "enter",
    "something",
    "user",
    "input",
    "equal",
    "string",
    "zero",
    "going",
    "print",
    "done",
    "also",
    "going",
    "break",
    "break",
    "cancel",
    "loop",
    "means",
    "type",
    "zero",
    "loop",
    "longer",
    "going",
    "valid",
    "going",
    "exit",
    "program",
    "otherwise",
    "going",
    "loop",
    "forever",
    "actually",
    "play",
    "program",
    "going",
    "notice",
    "finally",
    "add",
    "inputs",
    "type",
    "10",
    "two",
    "type",
    "whatever",
    "soon",
    "type",
    "zero",
    "going",
    "exit",
    "loop",
    "reach",
    "break",
    "statement",
    "program",
    "finish",
    "moving",
    "functions",
    "create",
    "function",
    "use",
    "def",
    "keyword",
    "name",
    "function",
    "however",
    "like",
    "course",
    "going",
    "use",
    "underscore",
    "naming",
    "convention",
    "function",
    "going",
    "used",
    "say",
    "hello",
    "user",
    "go",
    "ahead",
    "type",
    "print",
    "hey",
    "going",
    "insert",
    "name",
    "might",
    "wondering",
    "functions",
    "use",
    "functions",
    "well",
    "functions",
    "used",
    "reuse",
    "code",
    "many",
    "different",
    "instances",
    "main",
    "point",
    "programming",
    "reuse",
    "code",
    "much",
    "possible",
    "want",
    "maximize",
    "often",
    "reuse",
    "line",
    "code",
    "without",
    "rewrite",
    "example",
    "created",
    "function",
    "says",
    "hello",
    "type",
    "mario",
    "also",
    "use",
    "type",
    "luigi",
    "run",
    "program",
    "say",
    "hey",
    "mario",
    "hey",
    "luigi",
    "instead",
    "writing",
    "statement",
    "twice",
    "able",
    "use",
    "one",
    "function",
    "multiple",
    "times",
    "one",
    "thing",
    "cover",
    "also",
    "functions",
    "pretend",
    "lot",
    "functions",
    "need",
    "create",
    "get",
    "internet",
    "run",
    "game",
    "something",
    "really",
    "logic",
    "yet",
    "going",
    "notice",
    "empty",
    "run",
    "program",
    "going",
    "get",
    "error",
    "python",
    "created",
    "keyword",
    "called",
    "pass",
    "essentially",
    "says",
    "nothing",
    "accept",
    "program",
    "still",
    "going",
    "able",
    "run",
    "regardless",
    "content",
    "inside",
    "function",
    "tap",
    "run",
    "going",
    "notice",
    "going",
    "errors",
    "program",
    "going",
    "understand",
    "provided",
    "keyword",
    "pass",
    "tells",
    "nothing",
    "accepts",
    "good",
    "creating",
    "blueprints",
    "later",
    "case",
    "need",
    "write",
    "everything",
    "program",
    "really",
    "know",
    "yet",
    "insert",
    "word",
    "pass",
    "save",
    "lot",
    "trouble",
    "finally",
    "going",
    "go",
    "use",
    "try",
    "accept",
    "block",
    "going",
    "create",
    "input",
    "going",
    "say",
    "please",
    "provide",
    "number",
    "going",
    "go",
    "ahead",
    "type",
    "try",
    "going",
    "try",
    "print",
    "value",
    "plus",
    "integer",
    "number",
    "get",
    "user",
    "work",
    "going",
    "print",
    "valid",
    "number",
    "way",
    "works",
    "tries",
    "execute",
    "code",
    "inside",
    "anything",
    "goes",
    "wrong",
    "exception",
    "occurs",
    "going",
    "go",
    "accept",
    "block",
    "going",
    "execute",
    "whatever",
    "inside",
    "course",
    "write",
    "something",
    "throws",
    "exception",
    "inside",
    "need",
    "try",
    "another",
    "try",
    "accept",
    "block",
    "go",
    "ahead",
    "run",
    "program",
    "write",
    "something",
    "like",
    "10",
    "going",
    "add",
    "10",
    "value",
    "course",
    "write",
    "something",
    "mario",
    "try",
    "adding",
    "mario",
    "10",
    "program",
    "going",
    "happy",
    "convert",
    "mario",
    "integer",
    "add",
    "going",
    "say",
    "worry",
    "exception",
    "covered",
    "program",
    "say",
    "valid",
    "number",
    "throw",
    "exception",
    "anyway",
    "really",
    "hope",
    "helped",
    "get",
    "started",
    "python",
    "course",
    "lot",
    "cover",
    "meant",
    "quick",
    "guide",
    "helping",
    "get",
    "started",
    "said",
    "wonderful",
    "day",
    "see",
    "guys",
    "next",
    "video"
  ],
  "keywords": [
    "going",
    "get",
    "started",
    "python",
    "10",
    "code",
    "let",
    "first",
    "thing",
    "know",
    "values",
    "variables",
    "create",
    "name",
    "item",
    "value",
    "string",
    "text",
    "program",
    "also",
    "need",
    "means",
    "different",
    "add",
    "underscore",
    "time",
    "one",
    "say",
    "want",
    "strings",
    "three",
    "go",
    "ahead",
    "print",
    "difference",
    "run",
    "notice",
    "hello",
    "plus",
    "see",
    "actually",
    "next",
    "integer",
    "number",
    "inside",
    "true",
    "false",
    "type",
    "says",
    "list",
    "insert",
    "example",
    "write",
    "move",
    "mario",
    "equal",
    "convert",
    "two",
    "exception",
    "goes",
    "pretend",
    "five",
    "course",
    "logic",
    "statement",
    "use",
    "happy",
    "age",
    "something",
    "old",
    "used",
    "loop",
    "range",
    "zero",
    "finally",
    "like",
    "exit",
    "user",
    "input",
    "break",
    "valid",
    "functions",
    "function",
    "keyword",
    "hey",
    "reuse",
    "lot",
    "really",
    "pass",
    "accept",
    "try",
    "block"
  ]
}