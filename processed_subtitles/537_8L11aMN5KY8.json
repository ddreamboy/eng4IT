{
  "text": "[Music]\nhello i'm luis serrano and this video is\nabout generative adversarial networks or\nGanz for short develop IDN good fellow\nin our researches in montreal ganz are a\ngreat advance in machine learning and\nthey have numerous applications perhaps\nnot the fanciest applications of Ganz's\nface generation if you go to this page\nthis person does not exist calm you'll\nsee it in action these images you see\nhere are of people who don't exist they\nhave been fully generated by a neural\nnetwork this is fascinating\nconsidering how detailed our expressions\nare in this video we learn how to\ngenerate faces with again in a very\nsimple way and great news for those of\nyou who like to sing along to the videos\nas you type code in this video we'll be\ncoding a pair of one layer neural\nnetworks which will generate some very\nsimple images and it's all in github\nunder this repo which you can find in\nthe links but if you don't want to write\ncode this video is for you as well since\nwe develop the intuition and the\nequations by hand as well first let me\ngive you a general idea of what ganzar\nganz consists of a pair of neural\nnetworks that fight with each other one\nis called a generator and the other one\nthe discriminator and they behave a lot\nlike a counter feeder and a cup the\ncounter feeder is constantly trying to\nmake fake paintings and the cop is\nconstantly trying to catch the counter\nfeeder the counter feeder is a generator\nand the cop is a discriminator so as he\ngets caught by the cop the counter\nfeeder keeps improving and improving his\npaintings until one day he learns to\nfinally paint a perfect one that\ncompletely fools the cop a neural\nnetwork language what happens is that we\nhave a pair of neural networks the\ngenerator and the discriminator and we\ntrain them with a set of real images and\na set of fake images generated by the\ngenerator the discriminator is tend to\nidentify which images are real or which\nones come from the generator and the\ngenerator is strained to fool the\ndiscriminator into classifying its\nimages as real images\nin this video we'll build a very very\nsimple pair of guns so simple that we'll\nbe able to code them straight in Python\nwithout any deep learning packages this\nis our setting we live in a world called\nslanted land where everybody looks\nslightly elongated and walks at a 45\ndegree angle this world has technology\nbut not as developed as ours they have\ncomputer screens which display images\nbut the best resolution they've been\nable to work out is 2 times 2 so they\nhave black and white 2 pixels by 2 pixel\nscreens also they have developed neural\nnetworks but only very simple ones as a\nmatter of fact they only know neural\nnetworks of one layer but I will show\nyou that in this simple world we can\nstill create a pair of gas that will\ngenerate faces of the people who live in\nslanted land here are four faces of\npeople who live in slanted land notice\nthat everybody is elongated and tilted\n45 degrees to the left\nsince the screens are only 2 pixels by 2\npixels this is how the pictures of the\npeople look in the screen they SMO\nsucked like a diagonal or a backward\nslash and this is how noisy images look\nnotice that these are not faces since\nthey don't look like a backlash and\nthese are mostly generated randomly so\nthe goal for networks is to be able to\ndistinguish faces like these from noisy\nimages or non faces like these ones\nlet's attach some numbers here we'll\nhave a scale where a white pixel has\nvalues 0 and a black pixel has a value\nof 1 you may have seen this in the\nopposite way but we'll do it like this\nfor clarity this way we can attach a\nvalue to every pixel in the 2 x 2\nscreens\nok we're ready to build our networks\nfirst I'll build them by hand and then\nI'll show you how to get the computer to\ntrain them let's start by building the\ndiscriminator the first question is how\nare we gonna tell faces apart from non\nfaces easy notice that in the faces the\ntop left and the bottom right corners\nhave large\nvalues because or pixels are dark\nwhereas the other two corners have small\nvalues because their pixels are light on\nthe other hand in noisy images anything\ncan happen\ntherefore the way to tell faces apart is\nby adding the two values corresponding\nto the top left and bottom right corners\nand subtracting the values corresponding\nto the other two corners and faces this\nresult will be very high whereas in\nnoisy images it will be low for example\nfor this face the value is 2 and the\nvalue for the noise image is minus 0.5\nwe can add a cutoff or a threshold of\nsay 1 and say that any image that's\ncourse 1 or higher is a face and any\nimage 2 is course less than 1 is not a\nface or it's a noisy image a neural\nnetwork lingo this is how things look\nthe values of our 4 pixels get\nmultiplied by plus or minus 1 depending\non what diagonal they are on and then we\nsubtract a total value of 1 or the bias\nwe add these 4 numbers and if the score\nis 1 or more than the image is\nclassified as a face and if it's less\nthan 1 that is classified as another\nface in this case the images face\nbecause it gets the score of 1 we can\nalso put the probability that something\nis a face by using the sigmoid function\nwe apply the sigmoid which is this\nfunction that sends high numbers to\nnumbers close to 1 and low numbers the\nnumbers close to 0 and we get sigmoid of\n1 which is 0.73 the discriminator\nnetwork then assigns to this image a\nprobability of 73% that it is a face\nsince it is a high probability greater\nthan 50% we conclude that the\ndiscriminator thinks that the image is a\nface which is correct notice that in\nthis neural network the thick edges are\npositive and that thin ones are negative\nand this is a convention we'll be using\nthroughout this video now if we enter\nthe second image which is not a face\ninto a discriminator then we do the same\ncalculation\nwe get negative 0.5 for the score\nsigmoid of negative 0.5 is 0.37 this is\nlower than 50% so we conclude that this\ndiscriminator thinks that this image is\nnot a face the discriminator is correct\nagain now in the same way let's build a\ngenerator this is a neural network that\nwill output faces to build a generator\nwill again take into account that along\nfaces these two corners are high value\nthese two corners are low value whereas\nin noisy images or non faces anything\ncan happen so this is how the generator\nworks first we start by picking an input\nset which is a random number between 0 &\n1 in this case let's say will be 0.7 in\ngeneral the input will be a vector that\ncomes from some fixed distribution now\nlet's build a neural network what we\nreally want is to have some large values\nand some small ones the larger ones are\nrepresented by thick edges and the small\nones by thin edges because remember that\nwe want large values for the top left\nand bottom right corner and small values\nfor the top right and bottom left corner\nso since the top output has to be large\nwe want these weights coming in to be\nlarge so let's make them plus 1 now what\ndo we get for the output here well first\nwe're gonna get a score of plus 1 times\n0.7 plus 1 which is 1 point 7 now let's\nlook at the second note it corresponds\nto the top-right corner so it has to be\na small value so let's put in negative\nnumbers here what do we get for the\nscore we get minus 1 times 0.7 minus 1\nwhich is minus 1.7 in the same way we\nwant a small value here so we put\nweights of minus 1 and we get minus 1.7\nand for the last one we're on a higher\nvalue so we put plus ones and we get\nplus one times zero point seven plus one\nwhich is one point seven now those are\njust the scores we need to apply sigmoid\nto find the probabilities so we apply\nthe sigmoid and we get 0.85 0.15 0.15 10\n0.85 those are the values that will go\nin our pixels\nand notice that our image looks like a\ndiagonal which is how we define our\nfaces noticed by the way we built it\nthis neural leopard will always generate\nlarge values for the top left and bottom\nright corners and small values for the\ntop right and bottom left corners no\nmatter what values that we input because\nremember that is between 0 & 1\ntherefore this neural network will\nalways generate a face that means it's a\ngood generator of course we built this\nneural networks by eyeballing the\nweights but that's not how it's normally\ndone in general we have to train the\nneural networks to get the best possible\nweights for this let me tell you a\nlittle bit about error functions and\nerror or cost function is a way to tell\nthe network how it's doing in order for\nit to improve if the error is large then\nthe network is not doing well and it\nneeds to reduce the error to improve the\nerror function that we'll use to train\nthese games is the log loss which is the\nnatural logarithm this is the logarithm\nbase e Y the logarithm well a logarithm\nappears a lot of error functions from\nmany deeper reasons which will not cover\nbut we can think of it for now so very\nconvenient function let's first say that\nwe have a label of 1 and our neural\nnetwork predicted is as 0.1 this is a\nbad prediction and we should produce a\nlarge error because 0.1 is very far from\nwhat on the other hand it was label is 1\nand the prediction is 0.9 then that's a\ngood prediction because the prediction\nis very close to the label so this\nshould produce a small error how then\ncan we find a formula for this error\nwell notice that the negative natural\nlogarithm of 0.1 is 2.3 which is large\nwhile the negative logarithm of 0.9 is\n0.1 which is low as a matter of fact the\ncloser number is to 1 the smaller is\nnegative logarithm gets therefore when\nthe label is 1 the function negative\nlogarithm of the prediction is a good\nerror function now let's go in the other\nextreme when the label is 0 in this case\nif we had a prediction of 0.1 it would\nbe good because it's close to the label\ntherefore the error should be small on\nthe other hand a prediction of 0.9 is\nterrible\nso the error should be large the\nfunction that we need here is similar to\nthe previous one with it with slight\ndifference it is the negative logarithm\nof 1 minus the prediction notice that in\nthe first case the error is the negative\nlogarithm of 0.9 which is 0.1 and in the\nsecond case is the negative logarithm is\nyour appointment 1 which is 2 points to\nbe and this match is what we want it\nwhich is that the first error is small\nthe second is large to summarize if the\nlabel is 1 which means we want the\nprediction to be 1 we define the law\nclass to be negative logarithm of the\nprediction notice that from the graph of\nthe negative logarithm of X on the right\nthis is big when the prediction is close\nto 0 and small when the prediction is\nclose to 1 and then when the label is 0\nwhich means I want the prediction to be\nclose to 0 then we use as an error\nfunction the negative logarithm of 1\nminus the prediction from the graph of\nnegative logarithm of 1 minus X in the\nright we see that when the prediction is\nclose to zero there's a low error and\nwhen the prediction is close to 1 there\nis a high error so these two are the\nerror functions that we're going to use\nfor training the generator and the\ndiscriminator based on if we want the\nprediction to be 0 or 1 now that we have\nour functions we get to the meat of our\ntraining process which is back\npropagation I will explain it very\nbriefly the way we train your networks\nby first taking a data point and\nperforming a forward pass calculating\nthe prediction and then calculating the\nerror based on the log loss that we\npreviously defined then we proceed to\ntake the derivative of the error based\non all the weights using the chain rule\nthis will tell us how much to obtain\neach weight in order to best decrease\nthe error the way we do the error using\na derivative is a process called\ngradient descent long story short what\nyou do is you plot the arrows back to\nthe\nthen calculate gradient which is the\ndirection of greatest growth and then\ntake a tiny step in the direction of the\nnegative of this gradient in order to\nfind new parameters that decrease this\nerror as much as possible now we're\nready to train the generator and the\ndiscriminator and what we have to do is\nput the right error functions on the\nright places here's our parent neural\nnetwork and notice that the weights are\nnot yet defined so we start by defining\nthem as random in numbers now we select\nset some random number between 0 and 1\nwhich is going to serve as the input to\nthe generator we do a forward pass of\nthe generator to obtain some image which\nis probably in our face since the\nweights are random this is gonna be our\ngenerated image now we pass that\ngenerated image through the\ndiscriminator so the discriminator can\ntell if it's fake or not the\ndiscriminator outputs a probability so\nlet's say that it's for example 0.68 now\npay close attention because this is\nwhere the rubber meets the rope\nthis is where we define the correct\nerror functions first let's think what\ndoes the discriminator want to do here\nin other words if the discriminator was\ngreat\nwhat should it output well since the\nimage is not a face but it's a generated\nimage from the generator then the\ndiscriminator should be saying that it's\nfake that means that the discriminator\nshould be outputting a 0 if we remember\nthe error function the way we measure an\nerror when we want the neural network to\noutput a 0 is the negative logarithm of\n1 minus the predation this is an error\nthat will help us train the\ndiscriminator now that we've figured out\nwhat the discriminate at once let's go\nto the generator what does the generator\nwant well the generators wildest dreams\nare to generate an image so good so real\nthat the discriminator classifies it as\nreal therefore the generator wants this\nwhole neural network the connection of\nthe two to output a 1\nthat means that the error function from\nthe generator is negative logarithm of\nthe prediction so that is the error\nfunction that will help us train the\nweights of the generator in other words\nif G of Z is the output of the generator\nand D F G of Z is the output of the\ndiscriminator then the error function\nfor the generator is negative logarithm\nof D of G of Z and the error function\nfrom the discriminator is negative\nlogarithm of 1 minus D of G of Z the\nderivatives of these two are what will\nhelp us update the weights of both\nneural networks in order to improve that\nparticular prediction notice that these\ntwo error functions fight against each\nother but that is okay because the read\nerror function only changes the\ngenerator weights and the blue error\nfunction only changes the discriminator\nweights therefore they don't collide\nthey simply improve both neural networks\nas one to produce different outputs\nwhich is fascinating so what we have to\ndo now is repeat this process many times\nwe pick a random value for Z we apply\nthe generator to produce a fake image\napply the discriminator to that image\nand use back propagation to update the\nweights on both the generator and the\ndiscriminator then we take a real image\nplug it into a discriminator on updated\nweights again using back propagation so\nwhat happens after many of these\niterations or epochs well we left the\ntraining in the notebook and we got\nthese values for the weights to make it\neasier I've drawn thick edges for the\npositive weights and thin edges for the\nways that are negative or zero feel free\nto pause the video and convince yourself\nthat these two neural networks actually\nwork really well both the generator for\ngenerating realistic with them faces and\nthe discriminator for being able to tell\napart the faces from the non-faces\nand the reason for this is that if we\nremember from the beginning of the video\nthe top left and bottom right corners\noff a face should be big and the other\ntwo should be small so let's just\nconvince ourselves\nlet's look at the generator notice that\nsince the input is between 0 & 1 and the\ntube top edges are positive then the\nsigmoid value of this output is large\nwhich is the value this pixel over here\ntherefore that pixel has a large value\nsimilarly these 2 values are also\npositive and they give us a large value\nfor this pixel over here now these two\nover here are negative so they give us a\nsmall value for this pixel and these 2\nover here negative so they give us a\nsmall value for this one and therefore\nour image looks a lot like a diagonal\nand given the resolution of the screens\nand slanted land that are all two\npictures by two pixels and this picture\nlooks and candidly like this resident of\nslanted land over here thus we have\nbuilt a network that generates faces now\nas promised here's the code for you to\nsing along to the video it's in this\nrepo called Yuans and they're my github\nfirst we have the faces that we\nhard-code and the random noise the\nimages that we generate that are not\nnecessarily faces then we also develop\nthe derivatives carefully for the\ndiscriminator based on faces then for\nthe discriminator based on noisy images\nboth with respect to the weights and\nrespect to the biases these are all\ncoded in this discriminated class we\nalso work out the derivatives\ncorresponding to the error functions for\nthe generator again with respect to the\nweights and the bias and these are all\ncoded in the generated class we also\nhave error function plots we can plot\nthe error function for the generator and\nthe error function for the discriminator\nnotice that the generator error function\ngoes down and stabilizes but since the\ngenerator and so following the\ndiscriminator then the discriminative\nfunction doesn't do so well and actually\ngoes up at the end and finally we ask\nour generator to generate some random\nimages and here they are notice that\nthey all look like faces and slanted\nland which is what we wanted from the\nbeginning therefore we have successfully\ncreated a pair of gas that generate\nfaces in slanted lead\nnow time for some acknowledgments this\nvideo would not be the same if not for\nthe help of my friend so a big thanks to\nDiego Sahil\nand Alejandra who helped me in various\nways either encourage me to learn Gans\nmore seriously or helping me with\nendless questions or gave me great\nfeedback on my code Diego in particular\nhas a great series of blog posts where\nhe cold scans from scratch and by torch\nand tensor flow I use them as an\ninspiration for this video so I highly\nrecommend them and that's all for today\nI hope you've enjoyed it I'd like to\nremind you that I have a\nmachine-learning book called rocking\nmachine learning in which I explain the\nconcepts of machine learning and\ndown-to-earth way with real examples for\neverybody to understand in the\ndescription you can find the link to the\nbook and a very special 40% discount for\nthe viewers of this channel and as usual\nif you enjoyed this video please\nsubscribe to my channel for more content\nor hit like or share amongst your\nfriends and feel free write comment I\nreally enjoy reading your comment\nespecially those with suggestions for\nfuture topics and if you'd like to tweet\nat me my twitter handle is luis likes\nmath all the informations videos\nwritings etc can be found at this link\nserrano academy so check it out thank\nyou very much for your attention and see\nyou in the next video\nyou\n",
  "words": [
    "music",
    "hello",
    "luis",
    "serrano",
    "video",
    "generative",
    "adversarial",
    "networks",
    "ganz",
    "short",
    "develop",
    "idn",
    "good",
    "fellow",
    "researches",
    "montreal",
    "ganz",
    "great",
    "advance",
    "machine",
    "learning",
    "numerous",
    "applications",
    "perhaps",
    "fanciest",
    "applications",
    "ganz",
    "face",
    "generation",
    "go",
    "page",
    "person",
    "exist",
    "calm",
    "see",
    "action",
    "images",
    "see",
    "people",
    "exist",
    "fully",
    "generated",
    "neural",
    "network",
    "fascinating",
    "considering",
    "detailed",
    "expressions",
    "video",
    "learn",
    "generate",
    "faces",
    "simple",
    "way",
    "great",
    "news",
    "like",
    "sing",
    "along",
    "videos",
    "type",
    "code",
    "video",
    "coding",
    "pair",
    "one",
    "layer",
    "neural",
    "networks",
    "generate",
    "simple",
    "images",
    "github",
    "repo",
    "find",
    "links",
    "want",
    "write",
    "code",
    "video",
    "well",
    "since",
    "develop",
    "intuition",
    "equations",
    "hand",
    "well",
    "first",
    "let",
    "give",
    "general",
    "idea",
    "ganzar",
    "ganz",
    "consists",
    "pair",
    "neural",
    "networks",
    "fight",
    "one",
    "called",
    "generator",
    "one",
    "discriminator",
    "behave",
    "lot",
    "like",
    "counter",
    "feeder",
    "cup",
    "counter",
    "feeder",
    "constantly",
    "trying",
    "make",
    "fake",
    "paintings",
    "cop",
    "constantly",
    "trying",
    "catch",
    "counter",
    "feeder",
    "counter",
    "feeder",
    "generator",
    "cop",
    "discriminator",
    "gets",
    "caught",
    "cop",
    "counter",
    "feeder",
    "keeps",
    "improving",
    "improving",
    "paintings",
    "one",
    "day",
    "learns",
    "finally",
    "paint",
    "perfect",
    "one",
    "completely",
    "fools",
    "cop",
    "neural",
    "network",
    "language",
    "happens",
    "pair",
    "neural",
    "networks",
    "generator",
    "discriminator",
    "train",
    "set",
    "real",
    "images",
    "set",
    "fake",
    "images",
    "generated",
    "generator",
    "discriminator",
    "tend",
    "identify",
    "images",
    "real",
    "ones",
    "come",
    "generator",
    "generator",
    "strained",
    "fool",
    "discriminator",
    "classifying",
    "images",
    "real",
    "images",
    "video",
    "build",
    "simple",
    "pair",
    "guns",
    "simple",
    "able",
    "code",
    "straight",
    "python",
    "without",
    "deep",
    "learning",
    "packages",
    "setting",
    "live",
    "world",
    "called",
    "slanted",
    "land",
    "everybody",
    "looks",
    "slightly",
    "elongated",
    "walks",
    "45",
    "degree",
    "angle",
    "world",
    "technology",
    "developed",
    "computer",
    "screens",
    "display",
    "images",
    "best",
    "resolution",
    "able",
    "work",
    "2",
    "times",
    "2",
    "black",
    "white",
    "2",
    "pixels",
    "2",
    "pixel",
    "screens",
    "also",
    "developed",
    "neural",
    "networks",
    "simple",
    "ones",
    "matter",
    "fact",
    "know",
    "neural",
    "networks",
    "one",
    "layer",
    "show",
    "simple",
    "world",
    "still",
    "create",
    "pair",
    "gas",
    "generate",
    "faces",
    "people",
    "live",
    "slanted",
    "land",
    "four",
    "faces",
    "people",
    "live",
    "slanted",
    "land",
    "notice",
    "everybody",
    "elongated",
    "tilted",
    "45",
    "degrees",
    "left",
    "since",
    "screens",
    "2",
    "pixels",
    "2",
    "pixels",
    "pictures",
    "people",
    "look",
    "screen",
    "smo",
    "sucked",
    "like",
    "diagonal",
    "backward",
    "slash",
    "noisy",
    "images",
    "look",
    "notice",
    "faces",
    "since",
    "look",
    "like",
    "backlash",
    "mostly",
    "generated",
    "randomly",
    "goal",
    "networks",
    "able",
    "distinguish",
    "faces",
    "like",
    "noisy",
    "images",
    "non",
    "faces",
    "like",
    "ones",
    "let",
    "attach",
    "numbers",
    "scale",
    "white",
    "pixel",
    "values",
    "0",
    "black",
    "pixel",
    "value",
    "1",
    "may",
    "seen",
    "opposite",
    "way",
    "like",
    "clarity",
    "way",
    "attach",
    "value",
    "every",
    "pixel",
    "2",
    "x",
    "2",
    "screens",
    "ok",
    "ready",
    "build",
    "networks",
    "first",
    "build",
    "hand",
    "show",
    "get",
    "computer",
    "train",
    "let",
    "start",
    "building",
    "discriminator",
    "first",
    "question",
    "gon",
    "na",
    "tell",
    "faces",
    "apart",
    "non",
    "faces",
    "easy",
    "notice",
    "faces",
    "top",
    "left",
    "bottom",
    "right",
    "corners",
    "large",
    "values",
    "pixels",
    "dark",
    "whereas",
    "two",
    "corners",
    "small",
    "values",
    "pixels",
    "light",
    "hand",
    "noisy",
    "images",
    "anything",
    "happen",
    "therefore",
    "way",
    "tell",
    "faces",
    "apart",
    "adding",
    "two",
    "values",
    "corresponding",
    "top",
    "left",
    "bottom",
    "right",
    "corners",
    "subtracting",
    "values",
    "corresponding",
    "two",
    "corners",
    "faces",
    "result",
    "high",
    "whereas",
    "noisy",
    "images",
    "low",
    "example",
    "face",
    "value",
    "2",
    "value",
    "noise",
    "image",
    "minus",
    "add",
    "cutoff",
    "threshold",
    "say",
    "1",
    "say",
    "image",
    "course",
    "1",
    "higher",
    "face",
    "image",
    "2",
    "course",
    "less",
    "1",
    "face",
    "noisy",
    "image",
    "neural",
    "network",
    "lingo",
    "things",
    "look",
    "values",
    "4",
    "pixels",
    "get",
    "multiplied",
    "plus",
    "minus",
    "1",
    "depending",
    "diagonal",
    "subtract",
    "total",
    "value",
    "1",
    "bias",
    "add",
    "4",
    "numbers",
    "score",
    "1",
    "image",
    "classified",
    "face",
    "less",
    "1",
    "classified",
    "another",
    "face",
    "case",
    "images",
    "face",
    "gets",
    "score",
    "1",
    "also",
    "put",
    "probability",
    "something",
    "face",
    "using",
    "sigmoid",
    "function",
    "apply",
    "sigmoid",
    "function",
    "sends",
    "high",
    "numbers",
    "numbers",
    "close",
    "1",
    "low",
    "numbers",
    "numbers",
    "close",
    "0",
    "get",
    "sigmoid",
    "1",
    "discriminator",
    "network",
    "assigns",
    "image",
    "probability",
    "73",
    "face",
    "since",
    "high",
    "probability",
    "greater",
    "50",
    "conclude",
    "discriminator",
    "thinks",
    "image",
    "face",
    "correct",
    "notice",
    "neural",
    "network",
    "thick",
    "edges",
    "positive",
    "thin",
    "ones",
    "negative",
    "convention",
    "using",
    "throughout",
    "video",
    "enter",
    "second",
    "image",
    "face",
    "discriminator",
    "calculation",
    "get",
    "negative",
    "score",
    "sigmoid",
    "negative",
    "lower",
    "50",
    "conclude",
    "discriminator",
    "thinks",
    "image",
    "face",
    "discriminator",
    "correct",
    "way",
    "let",
    "build",
    "generator",
    "neural",
    "network",
    "output",
    "faces",
    "build",
    "generator",
    "take",
    "account",
    "along",
    "faces",
    "two",
    "corners",
    "high",
    "value",
    "two",
    "corners",
    "low",
    "value",
    "whereas",
    "noisy",
    "images",
    "non",
    "faces",
    "anything",
    "happen",
    "generator",
    "works",
    "first",
    "start",
    "picking",
    "input",
    "set",
    "random",
    "number",
    "0",
    "1",
    "case",
    "let",
    "say",
    "general",
    "input",
    "vector",
    "comes",
    "fixed",
    "distribution",
    "let",
    "build",
    "neural",
    "network",
    "really",
    "want",
    "large",
    "values",
    "small",
    "ones",
    "larger",
    "ones",
    "represented",
    "thick",
    "edges",
    "small",
    "ones",
    "thin",
    "edges",
    "remember",
    "want",
    "large",
    "values",
    "top",
    "left",
    "bottom",
    "right",
    "corner",
    "small",
    "values",
    "top",
    "right",
    "bottom",
    "left",
    "corner",
    "since",
    "top",
    "output",
    "large",
    "want",
    "weights",
    "coming",
    "large",
    "let",
    "make",
    "plus",
    "1",
    "get",
    "output",
    "well",
    "first",
    "gon",
    "na",
    "get",
    "score",
    "plus",
    "1",
    "times",
    "plus",
    "1",
    "1",
    "point",
    "7",
    "let",
    "look",
    "second",
    "note",
    "corresponds",
    "corner",
    "small",
    "value",
    "let",
    "put",
    "negative",
    "numbers",
    "get",
    "score",
    "get",
    "minus",
    "1",
    "times",
    "minus",
    "1",
    "minus",
    "way",
    "want",
    "small",
    "value",
    "put",
    "weights",
    "minus",
    "1",
    "get",
    "minus",
    "last",
    "one",
    "higher",
    "value",
    "put",
    "plus",
    "ones",
    "get",
    "plus",
    "one",
    "times",
    "zero",
    "point",
    "seven",
    "plus",
    "one",
    "one",
    "point",
    "seven",
    "scores",
    "need",
    "apply",
    "sigmoid",
    "find",
    "probabilities",
    "apply",
    "sigmoid",
    "get",
    "10",
    "values",
    "go",
    "pixels",
    "notice",
    "image",
    "looks",
    "like",
    "diagonal",
    "define",
    "faces",
    "noticed",
    "way",
    "built",
    "neural",
    "leopard",
    "always",
    "generate",
    "large",
    "values",
    "top",
    "left",
    "bottom",
    "right",
    "corners",
    "small",
    "values",
    "top",
    "right",
    "bottom",
    "left",
    "corners",
    "matter",
    "values",
    "input",
    "remember",
    "0",
    "1",
    "therefore",
    "neural",
    "network",
    "always",
    "generate",
    "face",
    "means",
    "good",
    "generator",
    "course",
    "built",
    "neural",
    "networks",
    "eyeballing",
    "weights",
    "normally",
    "done",
    "general",
    "train",
    "neural",
    "networks",
    "get",
    "best",
    "possible",
    "weights",
    "let",
    "tell",
    "little",
    "bit",
    "error",
    "functions",
    "error",
    "cost",
    "function",
    "way",
    "tell",
    "network",
    "order",
    "improve",
    "error",
    "large",
    "network",
    "well",
    "needs",
    "reduce",
    "error",
    "improve",
    "error",
    "function",
    "use",
    "train",
    "games",
    "log",
    "loss",
    "natural",
    "logarithm",
    "logarithm",
    "base",
    "e",
    "logarithm",
    "well",
    "logarithm",
    "appears",
    "lot",
    "error",
    "functions",
    "many",
    "deeper",
    "reasons",
    "cover",
    "think",
    "convenient",
    "function",
    "let",
    "first",
    "say",
    "label",
    "1",
    "neural",
    "network",
    "predicted",
    "bad",
    "prediction",
    "produce",
    "large",
    "error",
    "far",
    "hand",
    "label",
    "1",
    "prediction",
    "good",
    "prediction",
    "prediction",
    "close",
    "label",
    "produce",
    "small",
    "error",
    "find",
    "formula",
    "error",
    "well",
    "notice",
    "negative",
    "natural",
    "logarithm",
    "large",
    "negative",
    "logarithm",
    "low",
    "matter",
    "fact",
    "closer",
    "number",
    "1",
    "smaller",
    "negative",
    "logarithm",
    "gets",
    "therefore",
    "label",
    "1",
    "function",
    "negative",
    "logarithm",
    "prediction",
    "good",
    "error",
    "function",
    "let",
    "go",
    "extreme",
    "label",
    "0",
    "case",
    "prediction",
    "would",
    "good",
    "close",
    "label",
    "therefore",
    "error",
    "small",
    "hand",
    "prediction",
    "terrible",
    "error",
    "large",
    "function",
    "need",
    "similar",
    "previous",
    "one",
    "slight",
    "difference",
    "negative",
    "logarithm",
    "1",
    "minus",
    "prediction",
    "notice",
    "first",
    "case",
    "error",
    "negative",
    "logarithm",
    "second",
    "case",
    "negative",
    "logarithm",
    "appointment",
    "1",
    "2",
    "points",
    "match",
    "want",
    "first",
    "error",
    "small",
    "second",
    "large",
    "summarize",
    "label",
    "1",
    "means",
    "want",
    "prediction",
    "1",
    "define",
    "law",
    "class",
    "negative",
    "logarithm",
    "prediction",
    "notice",
    "graph",
    "negative",
    "logarithm",
    "x",
    "right",
    "big",
    "prediction",
    "close",
    "0",
    "small",
    "prediction",
    "close",
    "1",
    "label",
    "0",
    "means",
    "want",
    "prediction",
    "close",
    "0",
    "use",
    "error",
    "function",
    "negative",
    "logarithm",
    "1",
    "minus",
    "prediction",
    "graph",
    "negative",
    "logarithm",
    "1",
    "minus",
    "x",
    "right",
    "see",
    "prediction",
    "close",
    "zero",
    "low",
    "error",
    "prediction",
    "close",
    "1",
    "high",
    "error",
    "two",
    "error",
    "functions",
    "going",
    "use",
    "training",
    "generator",
    "discriminator",
    "based",
    "want",
    "prediction",
    "0",
    "1",
    "functions",
    "get",
    "meat",
    "training",
    "process",
    "back",
    "propagation",
    "explain",
    "briefly",
    "way",
    "train",
    "networks",
    "first",
    "taking",
    "data",
    "point",
    "performing",
    "forward",
    "pass",
    "calculating",
    "prediction",
    "calculating",
    "error",
    "based",
    "log",
    "loss",
    "previously",
    "defined",
    "proceed",
    "take",
    "derivative",
    "error",
    "based",
    "weights",
    "using",
    "chain",
    "rule",
    "tell",
    "us",
    "much",
    "obtain",
    "weight",
    "order",
    "best",
    "decrease",
    "error",
    "way",
    "error",
    "using",
    "derivative",
    "process",
    "called",
    "gradient",
    "descent",
    "long",
    "story",
    "short",
    "plot",
    "arrows",
    "back",
    "calculate",
    "gradient",
    "direction",
    "greatest",
    "growth",
    "take",
    "tiny",
    "step",
    "direction",
    "negative",
    "gradient",
    "order",
    "find",
    "new",
    "parameters",
    "decrease",
    "error",
    "much",
    "possible",
    "ready",
    "train",
    "generator",
    "discriminator",
    "put",
    "right",
    "error",
    "functions",
    "right",
    "places",
    "parent",
    "neural",
    "network",
    "notice",
    "weights",
    "yet",
    "defined",
    "start",
    "defining",
    "random",
    "numbers",
    "select",
    "set",
    "random",
    "number",
    "0",
    "1",
    "going",
    "serve",
    "input",
    "generator",
    "forward",
    "pass",
    "generator",
    "obtain",
    "image",
    "probably",
    "face",
    "since",
    "weights",
    "random",
    "gon",
    "na",
    "generated",
    "image",
    "pass",
    "generated",
    "image",
    "discriminator",
    "discriminator",
    "tell",
    "fake",
    "discriminator",
    "outputs",
    "probability",
    "let",
    "say",
    "example",
    "pay",
    "close",
    "attention",
    "rubber",
    "meets",
    "rope",
    "define",
    "correct",
    "error",
    "functions",
    "first",
    "let",
    "think",
    "discriminator",
    "want",
    "words",
    "discriminator",
    "great",
    "output",
    "well",
    "since",
    "image",
    "face",
    "generated",
    "image",
    "generator",
    "discriminator",
    "saying",
    "fake",
    "means",
    "discriminator",
    "outputting",
    "0",
    "remember",
    "error",
    "function",
    "way",
    "measure",
    "error",
    "want",
    "neural",
    "network",
    "output",
    "0",
    "negative",
    "logarithm",
    "1",
    "minus",
    "predation",
    "error",
    "help",
    "us",
    "train",
    "discriminator",
    "figured",
    "discriminate",
    "let",
    "go",
    "generator",
    "generator",
    "want",
    "well",
    "generators",
    "wildest",
    "dreams",
    "generate",
    "image",
    "good",
    "real",
    "discriminator",
    "classifies",
    "real",
    "therefore",
    "generator",
    "wants",
    "whole",
    "neural",
    "network",
    "connection",
    "two",
    "output",
    "1",
    "means",
    "error",
    "function",
    "generator",
    "negative",
    "logarithm",
    "prediction",
    "error",
    "function",
    "help",
    "us",
    "train",
    "weights",
    "generator",
    "words",
    "g",
    "z",
    "output",
    "generator",
    "f",
    "g",
    "z",
    "output",
    "discriminator",
    "error",
    "function",
    "generator",
    "negative",
    "logarithm",
    "g",
    "z",
    "error",
    "function",
    "discriminator",
    "negative",
    "logarithm",
    "1",
    "minus",
    "g",
    "z",
    "derivatives",
    "two",
    "help",
    "us",
    "update",
    "weights",
    "neural",
    "networks",
    "order",
    "improve",
    "particular",
    "prediction",
    "notice",
    "two",
    "error",
    "functions",
    "fight",
    "okay",
    "read",
    "error",
    "function",
    "changes",
    "generator",
    "weights",
    "blue",
    "error",
    "function",
    "changes",
    "discriminator",
    "weights",
    "therefore",
    "collide",
    "simply",
    "improve",
    "neural",
    "networks",
    "one",
    "produce",
    "different",
    "outputs",
    "fascinating",
    "repeat",
    "process",
    "many",
    "times",
    "pick",
    "random",
    "value",
    "z",
    "apply",
    "generator",
    "produce",
    "fake",
    "image",
    "apply",
    "discriminator",
    "image",
    "use",
    "back",
    "propagation",
    "update",
    "weights",
    "generator",
    "discriminator",
    "take",
    "real",
    "image",
    "plug",
    "discriminator",
    "updated",
    "weights",
    "using",
    "back",
    "propagation",
    "happens",
    "many",
    "iterations",
    "epochs",
    "well",
    "left",
    "training",
    "notebook",
    "got",
    "values",
    "weights",
    "make",
    "easier",
    "drawn",
    "thick",
    "edges",
    "positive",
    "weights",
    "thin",
    "edges",
    "ways",
    "negative",
    "zero",
    "feel",
    "free",
    "pause",
    "video",
    "convince",
    "two",
    "neural",
    "networks",
    "actually",
    "work",
    "really",
    "well",
    "generator",
    "generating",
    "realistic",
    "faces",
    "discriminator",
    "able",
    "tell",
    "apart",
    "faces",
    "reason",
    "remember",
    "beginning",
    "video",
    "top",
    "left",
    "bottom",
    "right",
    "corners",
    "face",
    "big",
    "two",
    "small",
    "let",
    "convince",
    "let",
    "look",
    "generator",
    "notice",
    "since",
    "input",
    "0",
    "1",
    "tube",
    "top",
    "edges",
    "positive",
    "sigmoid",
    "value",
    "output",
    "large",
    "value",
    "pixel",
    "therefore",
    "pixel",
    "large",
    "value",
    "similarly",
    "2",
    "values",
    "also",
    "positive",
    "give",
    "us",
    "large",
    "value",
    "pixel",
    "two",
    "negative",
    "give",
    "us",
    "small",
    "value",
    "pixel",
    "2",
    "negative",
    "give",
    "us",
    "small",
    "value",
    "one",
    "therefore",
    "image",
    "looks",
    "lot",
    "like",
    "diagonal",
    "given",
    "resolution",
    "screens",
    "slanted",
    "land",
    "two",
    "pictures",
    "two",
    "pixels",
    "picture",
    "looks",
    "candidly",
    "like",
    "resident",
    "slanted",
    "land",
    "thus",
    "built",
    "network",
    "generates",
    "faces",
    "promised",
    "code",
    "sing",
    "along",
    "video",
    "repo",
    "called",
    "yuans",
    "github",
    "first",
    "faces",
    "random",
    "noise",
    "images",
    "generate",
    "necessarily",
    "faces",
    "also",
    "develop",
    "derivatives",
    "carefully",
    "discriminator",
    "based",
    "faces",
    "discriminator",
    "based",
    "noisy",
    "images",
    "respect",
    "weights",
    "respect",
    "biases",
    "coded",
    "discriminated",
    "class",
    "also",
    "work",
    "derivatives",
    "corresponding",
    "error",
    "functions",
    "generator",
    "respect",
    "weights",
    "bias",
    "coded",
    "generated",
    "class",
    "also",
    "error",
    "function",
    "plots",
    "plot",
    "error",
    "function",
    "generator",
    "error",
    "function",
    "discriminator",
    "notice",
    "generator",
    "error",
    "function",
    "goes",
    "stabilizes",
    "since",
    "generator",
    "following",
    "discriminator",
    "discriminative",
    "function",
    "well",
    "actually",
    "goes",
    "end",
    "finally",
    "ask",
    "generator",
    "generate",
    "random",
    "images",
    "notice",
    "look",
    "like",
    "faces",
    "slanted",
    "land",
    "wanted",
    "beginning",
    "therefore",
    "successfully",
    "created",
    "pair",
    "gas",
    "generate",
    "faces",
    "slanted",
    "lead",
    "time",
    "acknowledgments",
    "video",
    "would",
    "help",
    "friend",
    "big",
    "thanks",
    "diego",
    "sahil",
    "alejandra",
    "helped",
    "various",
    "ways",
    "either",
    "encourage",
    "learn",
    "gans",
    "seriously",
    "helping",
    "endless",
    "questions",
    "gave",
    "great",
    "feedback",
    "code",
    "diego",
    "particular",
    "great",
    "series",
    "blog",
    "posts",
    "cold",
    "scans",
    "scratch",
    "torch",
    "tensor",
    "flow",
    "use",
    "inspiration",
    "video",
    "highly",
    "recommend",
    "today",
    "hope",
    "enjoyed",
    "like",
    "remind",
    "book",
    "called",
    "rocking",
    "machine",
    "learning",
    "explain",
    "concepts",
    "machine",
    "learning",
    "way",
    "real",
    "examples",
    "everybody",
    "understand",
    "description",
    "find",
    "link",
    "book",
    "special",
    "40",
    "discount",
    "viewers",
    "channel",
    "usual",
    "enjoyed",
    "video",
    "please",
    "subscribe",
    "channel",
    "content",
    "hit",
    "like",
    "share",
    "amongst",
    "friends",
    "feel",
    "free",
    "write",
    "comment",
    "really",
    "enjoy",
    "reading",
    "comment",
    "especially",
    "suggestions",
    "future",
    "topics",
    "like",
    "tweet",
    "twitter",
    "handle",
    "luis",
    "likes",
    "math",
    "informations",
    "videos",
    "writings",
    "etc",
    "found",
    "link",
    "serrano",
    "academy",
    "check",
    "thank",
    "much",
    "attention",
    "see",
    "next",
    "video"
  ],
  "keywords": [
    "video",
    "networks",
    "ganz",
    "good",
    "great",
    "learning",
    "face",
    "go",
    "see",
    "images",
    "people",
    "generated",
    "neural",
    "network",
    "generate",
    "faces",
    "simple",
    "way",
    "like",
    "code",
    "pair",
    "one",
    "find",
    "want",
    "well",
    "since",
    "hand",
    "first",
    "let",
    "give",
    "called",
    "generator",
    "discriminator",
    "counter",
    "feeder",
    "fake",
    "cop",
    "train",
    "set",
    "real",
    "ones",
    "build",
    "able",
    "slanted",
    "land",
    "looks",
    "screens",
    "2",
    "times",
    "pixels",
    "pixel",
    "also",
    "notice",
    "left",
    "look",
    "diagonal",
    "noisy",
    "numbers",
    "values",
    "0",
    "value",
    "1",
    "get",
    "tell",
    "top",
    "bottom",
    "right",
    "corners",
    "large",
    "two",
    "small",
    "therefore",
    "high",
    "low",
    "image",
    "minus",
    "say",
    "plus",
    "score",
    "case",
    "put",
    "probability",
    "using",
    "sigmoid",
    "function",
    "apply",
    "close",
    "edges",
    "positive",
    "negative",
    "second",
    "output",
    "take",
    "input",
    "random",
    "remember",
    "weights",
    "point",
    "means",
    "error",
    "functions",
    "order",
    "improve",
    "use",
    "logarithm",
    "label",
    "prediction",
    "produce",
    "based",
    "back",
    "us",
    "help",
    "g",
    "z"
  ]
}