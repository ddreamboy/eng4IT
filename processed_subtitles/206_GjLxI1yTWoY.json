{
  "text": "how's it going everyone so I want to\nhave a little discussion about how do\nyou build complex software how do you\nbuild out applications and I want to\ngive you my thought process there's a\nlot of different ways that you can do\nthis so for what I noticed in the\nindustry there's like different mindsets\nof how you can potentially build out\napplications some people like to sit\ndown\nin terms of like whether about the code\nthe load up like uml diagrams if you\nknow\numl diagram is it looks like like as an\nexample let's say you're trying to\ncreate a database and you want to set up\nsome entities and some schemas some\npeople sit down and they'll draw out\nthis huge diagram of all these entities\nhow they interconnect\num which is which is cool but it's a\nvery waterfall type of approach to\nsoftware engineering and from what I've\nlearned where I work in like the mindset\nthat I have is I like to try this who\nwork in an agile mindset so basically\ninstead of sitting down and trying to\ndesign out the diagram of what every\nsingle entity might look like for\nexample in this application I'm building\nfor Starcraft 2 build orders I could\nhave sat down and tried to plan out\nevery single database table and how they\ninterconnect and how they do this and\nthat and the other\nbut what I found to be most beneficial\nto me is that start on\none single thing that helps you\nimplement the feature that you need\nright that's like the agile mindset of\ndo the bare minimum that you need to do\nto actually create a feature for your\nusers now the reason that I like to do\nthat is because most of the time you\ndon't know if what you're building is\nactually going to be useful for the\nusers that you're building it for you\nmay spend weeks or months designing this\ngiant system\nyou have all these nice diagrams with\narrows and stuff and then you start\ncoding it up and you realize that\neverything you designed is completely\nwrong or it's not going to work or it's\njust not fun to use or it's not good to\nlike be maintainable in terms of the\nlong scale projection of your system so\nI try to avoid diagramming now if you\nget a feature where you need to like do\nsomething where like for example let's\nsay they create this build and you need\nto have that send out an email and also\nsend out notifications to people who\nmight be subscribing to you as a user\nthen yeah I might sit down with excella\ndraw and I might start diet like\ndiagramming out like what happens how\ndoes the flow of code happen for this\nparticular feature but I'm just focusing\non that one feature I'm trying to add\nI'm not going to go off and start like\nadding all these different pieces to the\npuzzle especially since if we're not\nfocused on building that feature yet\nthen I would not waste time thinking\nabout that feature and this does have\nsome drawbacks because sometimes you you\nneed to stick a step back and think\nabout the bigger the bigger pieces like\nyou need to holistically look at what\nyou're building and make sure that\nyou're kind of engineering or you know\nmaintainability and proper structure and\nsometimes you have to think about the\nwhat-s but a lot of times what I notice\nis that the more you plan for the what\nifs like oh what if the user needs to do\nthis so what if the user needs to do\nthat I'm going to go ahead and add that\ninto my code you end up building a\nreally hard to maintain monstrosity in\nmy opinion because now I have a bunch of\nover engineered like things in your code\nbase that you may or may not even need\nright so don't add things to your code\nunless you know it's going to achieve\nthe feature that you're trying to build\nout for the user\nand I like to do this step by step so\nevery feature along the way you\ncontinuously iterate and build upon the\nfeature and I'm not saying that the code\nyou write has to be sloppy like you\nshould be shipping quality code you\nshould have tests that cover everything\nyou write you have integration tests\nunit tests end-to-end tests you should\nmake sure your code you know follows\nproper coding standards like you know\nclean code you have your magic numbers\nremoved you have any constants pulled\nout to a shared location\num you know stuff is documented stuff is\ncommented but I'm not but what I am\nsaying is like don't try to add in a\nbunch of additional things into your\ncode for the what ifs right you don't\nknow what the user needs in the future\nso don't try to code for that so that's\nkind of the approach I like to take in\nthe way that I've been kind of taught um\nwith where I work and like since I\nstarted in the industry to have an agile\nmindset of just build one feature and\nthen ship it get it out there in front\nof users so that they can play around\nwith it and they can give you some\nfeedback even if you have like a feature\nflag that basically only lets certain\nsubset of users to use this new feature\nit's more important to get this in front\nof like a test group of people so they\ncan say hey you're wasting your time\nbuilding this like this is not what we\nwant we do not want this ability to\nbasically create a build order for\nStarcraft 2 by clicking on buttons I'd\nrather just go in and manually type\nstuff if that's what your users want\nthen you don't have to spend weeks\nbuilding out this feature that no one\nwould ever want to use and then also\npolluting your code base with a bunch of\nstuff that you're just going to end up\ndeleting or just let sit around and rot\nthat you don't want and so that's kind\nof like the way I do things like I kind\nof start with a single user story like\nfor example in this build order project\nI'm building that's that's using the T3\nstack with like Prisma and next and\nstuff I basically just write down a\nsingle sentence like as a user I should\nbe able to URL bookmark a search\nscenario\nand all the stuff that comes after that\nis all like\nimplementation detail that's not really\nimportant\nand I just work towards implementing\nwhatever that feature is then once I'm\ndone I will just commit that and then\nhopefully your CI CD pipeline will\nautomatically deploy that to your users\nthey can start using it and they can\ngive you feedback and then you move on\nto the next user story so that's kind of\nlike the agile mindset obviously I'm\nkind of boiling this down to the most\nbasic\num explanation there's a lot more that\ngoes into it with like the planning and\nthe orchestration of your stories and\nactually deploying these things and\ntesting them but overall if you're\nworking on like a side project I like to\njust do this just write out a simple\nfeature\nand add the most minimal amount of code\nthat you can to make this feature work\nlike for example a user shall be able to\nupvote builds well if I wanted to add\nthat\nbasically I would just go and find a\nsingle area like maybe it's here maybe\nyou want to be able to upload up vote\nbuilds from this little card component\nor maybe you have to go into the build\nitself to upvote and you don't know like\nthe good design\nyou won't know if it were if it works\nbetter here it works better here if\nworks better on both Pages until you\nactually get into the the weeds of the\nimplementation and start adding it in\nand start using it and you realize okay\nwith with like analytics and tracking on\nyour app you notice that only five\npercent of users are actually up voting\nBuilds on this page so if you have it\nhere and you have it here you're kind of\nwasting that feature so just delete it\nfrom here because there's extra noise\nfor the user so that's how you kind of\ngo about building complex software it's\nall about like\nunderstanding your user needs what do\nthey actually use what do they not use\ncan you delete the stuff that's used by\na very small portion of users\nand then also in terms of like the\ncoding and the designing can you design\nand code the the most minimal thing to\nget the feature working and then you\nmight say that okay you're going to code\nyourself into a corner because you're\njust going to add code that's sloppy and\nit's not going to be extendable\nbut the point is is that when you get a\nfeature down the road that requires you\nto change or modify or extend your\ncurrent code that's when you go back and\nyou refactor your code to make it that\nyou know solid approach or to make it\nthat like\ndesign patterns approach to make it\nreally extensible\nto make it really extendable and really\nmodifiable and maintainable but yeah\nthat's all I wanted to really rant about\num I've met people who like to think\nabout all the different edge cases when\nthey're building code and that's fine\ntoo I think it's good to have now that's\njust my mindset again there's different\ntypes of people I have had people on my\nDiscord ask me like like a beginner my\nDiscord whose Professor is basically\ntelling them to design this huge uml\ndiagram or ER diagram of like 20\ndatabase entities all from the get-go\nand I was basically telling him there's\nreally no point to sitting down and\ndoing that like the real benefit comes\nfrom just slowly adding these features\nfor your users and getting them to use\nit and slowly adding migrations and\nchanging your database and getting\neverything built out there are teams who\nsit like would sit down and literally\nplan out every single page like they'll\nplan out this page and they'll have like\ndesigns for this page and they'll have\ndesigns for this page and before you\neven start getting into the code like\nall these pages are being like drawn out\nand designed with mocks and stuff and\nthe mindset again like I think works\nbest is just start on a single thing\nget a prototype out get a mock-up just\nwork on it implement it deploy it and\nthen you move on to the next thing the\none thing at a time get that feedback\nand iterate and make it better anyway\nI'm just rambling at this point so\nhopefully you guys enjoyed watching this\ngive me a thumbs up if you did and uh be\nsure to join my Discord if you want to\ntalk to me directly or just find a place\nto hang out with other developers and\nget some help along the way as you're\ntrying to learn how to code have a good\nday and happy coding\n",
  "words": [
    "going",
    "everyone",
    "want",
    "little",
    "discussion",
    "build",
    "complex",
    "software",
    "build",
    "applications",
    "want",
    "give",
    "thought",
    "process",
    "lot",
    "different",
    "ways",
    "noticed",
    "industry",
    "like",
    "different",
    "mindsets",
    "potentially",
    "build",
    "applications",
    "people",
    "like",
    "sit",
    "terms",
    "like",
    "whether",
    "code",
    "load",
    "like",
    "uml",
    "diagrams",
    "know",
    "uml",
    "diagram",
    "looks",
    "like",
    "like",
    "example",
    "let",
    "say",
    "trying",
    "create",
    "database",
    "want",
    "set",
    "entities",
    "schemas",
    "people",
    "sit",
    "draw",
    "huge",
    "diagram",
    "entities",
    "interconnect",
    "um",
    "cool",
    "waterfall",
    "type",
    "approach",
    "software",
    "engineering",
    "learned",
    "work",
    "like",
    "mindset",
    "like",
    "try",
    "work",
    "agile",
    "mindset",
    "basically",
    "instead",
    "sitting",
    "trying",
    "design",
    "diagram",
    "every",
    "single",
    "entity",
    "might",
    "look",
    "like",
    "example",
    "application",
    "building",
    "starcraft",
    "2",
    "build",
    "orders",
    "could",
    "sat",
    "tried",
    "plan",
    "every",
    "single",
    "database",
    "table",
    "interconnect",
    "found",
    "beneficial",
    "start",
    "one",
    "single",
    "thing",
    "helps",
    "implement",
    "feature",
    "need",
    "right",
    "like",
    "agile",
    "mindset",
    "bare",
    "minimum",
    "need",
    "actually",
    "create",
    "feature",
    "users",
    "reason",
    "like",
    "time",
    "know",
    "building",
    "actually",
    "going",
    "useful",
    "users",
    "building",
    "may",
    "spend",
    "weeks",
    "months",
    "designing",
    "giant",
    "system",
    "nice",
    "diagrams",
    "arrows",
    "stuff",
    "start",
    "coding",
    "realize",
    "everything",
    "designed",
    "completely",
    "wrong",
    "going",
    "work",
    "fun",
    "use",
    "good",
    "like",
    "maintainable",
    "terms",
    "long",
    "scale",
    "projection",
    "system",
    "try",
    "avoid",
    "diagramming",
    "get",
    "feature",
    "need",
    "like",
    "something",
    "like",
    "example",
    "let",
    "say",
    "create",
    "build",
    "need",
    "send",
    "email",
    "also",
    "send",
    "notifications",
    "people",
    "might",
    "subscribing",
    "user",
    "yeah",
    "might",
    "sit",
    "excella",
    "draw",
    "might",
    "start",
    "diet",
    "like",
    "diagramming",
    "like",
    "happens",
    "flow",
    "code",
    "happen",
    "particular",
    "feature",
    "focusing",
    "one",
    "feature",
    "trying",
    "add",
    "going",
    "go",
    "start",
    "like",
    "adding",
    "different",
    "pieces",
    "puzzle",
    "especially",
    "since",
    "focused",
    "building",
    "feature",
    "yet",
    "would",
    "waste",
    "time",
    "thinking",
    "feature",
    "drawbacks",
    "sometimes",
    "need",
    "stick",
    "step",
    "back",
    "think",
    "bigger",
    "bigger",
    "pieces",
    "like",
    "need",
    "holistically",
    "look",
    "building",
    "make",
    "sure",
    "kind",
    "engineering",
    "know",
    "maintainability",
    "proper",
    "structure",
    "sometimes",
    "think",
    "lot",
    "times",
    "notice",
    "plan",
    "ifs",
    "like",
    "oh",
    "user",
    "needs",
    "user",
    "needs",
    "going",
    "go",
    "ahead",
    "add",
    "code",
    "end",
    "building",
    "really",
    "hard",
    "maintain",
    "monstrosity",
    "opinion",
    "bunch",
    "engineered",
    "like",
    "things",
    "code",
    "base",
    "may",
    "may",
    "even",
    "need",
    "right",
    "add",
    "things",
    "code",
    "unless",
    "know",
    "going",
    "achieve",
    "feature",
    "trying",
    "build",
    "user",
    "like",
    "step",
    "step",
    "every",
    "feature",
    "along",
    "way",
    "continuously",
    "iterate",
    "build",
    "upon",
    "feature",
    "saying",
    "code",
    "write",
    "sloppy",
    "like",
    "shipping",
    "quality",
    "code",
    "tests",
    "cover",
    "everything",
    "write",
    "integration",
    "tests",
    "unit",
    "tests",
    "tests",
    "make",
    "sure",
    "code",
    "know",
    "follows",
    "proper",
    "coding",
    "standards",
    "like",
    "know",
    "clean",
    "code",
    "magic",
    "numbers",
    "removed",
    "constants",
    "pulled",
    "shared",
    "location",
    "um",
    "know",
    "stuff",
    "documented",
    "stuff",
    "commented",
    "saying",
    "like",
    "try",
    "add",
    "bunch",
    "additional",
    "things",
    "code",
    "ifs",
    "right",
    "know",
    "user",
    "needs",
    "future",
    "try",
    "code",
    "kind",
    "approach",
    "like",
    "take",
    "way",
    "kind",
    "taught",
    "um",
    "work",
    "like",
    "since",
    "started",
    "industry",
    "agile",
    "mindset",
    "build",
    "one",
    "feature",
    "ship",
    "get",
    "front",
    "users",
    "play",
    "around",
    "give",
    "feedback",
    "even",
    "like",
    "feature",
    "flag",
    "basically",
    "lets",
    "certain",
    "subset",
    "users",
    "use",
    "new",
    "feature",
    "important",
    "get",
    "front",
    "like",
    "test",
    "group",
    "people",
    "say",
    "hey",
    "wasting",
    "time",
    "building",
    "like",
    "want",
    "want",
    "ability",
    "basically",
    "create",
    "build",
    "order",
    "starcraft",
    "2",
    "clicking",
    "buttons",
    "rather",
    "go",
    "manually",
    "type",
    "stuff",
    "users",
    "want",
    "spend",
    "weeks",
    "building",
    "feature",
    "one",
    "would",
    "ever",
    "want",
    "use",
    "also",
    "polluting",
    "code",
    "base",
    "bunch",
    "stuff",
    "going",
    "end",
    "deleting",
    "let",
    "sit",
    "around",
    "rot",
    "want",
    "kind",
    "like",
    "way",
    "things",
    "like",
    "kind",
    "start",
    "single",
    "user",
    "story",
    "like",
    "example",
    "build",
    "order",
    "project",
    "building",
    "using",
    "t3",
    "stack",
    "like",
    "prisma",
    "next",
    "stuff",
    "basically",
    "write",
    "single",
    "sentence",
    "like",
    "user",
    "able",
    "url",
    "bookmark",
    "search",
    "scenario",
    "stuff",
    "comes",
    "like",
    "implementation",
    "detail",
    "really",
    "important",
    "work",
    "towards",
    "implementing",
    "whatever",
    "feature",
    "done",
    "commit",
    "hopefully",
    "ci",
    "cd",
    "pipeline",
    "automatically",
    "deploy",
    "users",
    "start",
    "using",
    "give",
    "feedback",
    "move",
    "next",
    "user",
    "story",
    "kind",
    "like",
    "agile",
    "mindset",
    "obviously",
    "kind",
    "boiling",
    "basic",
    "um",
    "explanation",
    "lot",
    "goes",
    "like",
    "planning",
    "orchestration",
    "stories",
    "actually",
    "deploying",
    "things",
    "testing",
    "overall",
    "working",
    "like",
    "side",
    "project",
    "like",
    "write",
    "simple",
    "feature",
    "add",
    "minimal",
    "amount",
    "code",
    "make",
    "feature",
    "work",
    "like",
    "example",
    "user",
    "shall",
    "able",
    "upvote",
    "builds",
    "well",
    "wanted",
    "add",
    "basically",
    "would",
    "go",
    "find",
    "single",
    "area",
    "like",
    "maybe",
    "maybe",
    "want",
    "able",
    "upload",
    "vote",
    "builds",
    "little",
    "card",
    "component",
    "maybe",
    "go",
    "build",
    "upvote",
    "know",
    "like",
    "good",
    "design",
    "wo",
    "know",
    "works",
    "better",
    "works",
    "better",
    "works",
    "better",
    "pages",
    "actually",
    "get",
    "weeds",
    "implementation",
    "start",
    "adding",
    "start",
    "using",
    "realize",
    "okay",
    "like",
    "analytics",
    "tracking",
    "app",
    "notice",
    "five",
    "percent",
    "users",
    "actually",
    "voting",
    "builds",
    "page",
    "kind",
    "wasting",
    "feature",
    "delete",
    "extra",
    "noise",
    "user",
    "kind",
    "go",
    "building",
    "complex",
    "software",
    "like",
    "understanding",
    "user",
    "needs",
    "actually",
    "use",
    "use",
    "delete",
    "stuff",
    "used",
    "small",
    "portion",
    "users",
    "also",
    "terms",
    "like",
    "coding",
    "designing",
    "design",
    "code",
    "minimal",
    "thing",
    "get",
    "feature",
    "working",
    "might",
    "say",
    "okay",
    "going",
    "code",
    "corner",
    "going",
    "add",
    "code",
    "sloppy",
    "going",
    "extendable",
    "point",
    "get",
    "feature",
    "road",
    "requires",
    "change",
    "modify",
    "extend",
    "current",
    "code",
    "go",
    "back",
    "refactor",
    "code",
    "make",
    "know",
    "solid",
    "approach",
    "make",
    "like",
    "design",
    "patterns",
    "approach",
    "make",
    "really",
    "extensible",
    "make",
    "really",
    "extendable",
    "really",
    "modifiable",
    "maintainable",
    "yeah",
    "wanted",
    "really",
    "rant",
    "um",
    "met",
    "people",
    "like",
    "think",
    "different",
    "edge",
    "cases",
    "building",
    "code",
    "fine",
    "think",
    "good",
    "mindset",
    "different",
    "types",
    "people",
    "people",
    "discord",
    "ask",
    "like",
    "like",
    "beginner",
    "discord",
    "whose",
    "professor",
    "basically",
    "telling",
    "design",
    "huge",
    "uml",
    "diagram",
    "er",
    "diagram",
    "like",
    "20",
    "database",
    "entities",
    "basically",
    "telling",
    "really",
    "point",
    "sitting",
    "like",
    "real",
    "benefit",
    "comes",
    "slowly",
    "adding",
    "features",
    "users",
    "getting",
    "use",
    "slowly",
    "adding",
    "migrations",
    "changing",
    "database",
    "getting",
    "everything",
    "built",
    "teams",
    "sit",
    "like",
    "would",
    "sit",
    "literally",
    "plan",
    "every",
    "single",
    "page",
    "like",
    "plan",
    "page",
    "like",
    "designs",
    "page",
    "designs",
    "page",
    "even",
    "start",
    "getting",
    "code",
    "like",
    "pages",
    "like",
    "drawn",
    "designed",
    "mocks",
    "stuff",
    "mindset",
    "like",
    "think",
    "works",
    "best",
    "start",
    "single",
    "thing",
    "get",
    "prototype",
    "get",
    "work",
    "implement",
    "deploy",
    "move",
    "next",
    "thing",
    "one",
    "thing",
    "time",
    "get",
    "feedback",
    "iterate",
    "make",
    "better",
    "anyway",
    "rambling",
    "point",
    "hopefully",
    "guys",
    "enjoyed",
    "watching",
    "give",
    "thumbs",
    "uh",
    "sure",
    "join",
    "discord",
    "want",
    "talk",
    "directly",
    "find",
    "place",
    "hang",
    "developers",
    "get",
    "help",
    "along",
    "way",
    "trying",
    "learn",
    "code",
    "good",
    "day",
    "happy",
    "coding"
  ],
  "keywords": [
    "going",
    "want",
    "build",
    "software",
    "give",
    "lot",
    "different",
    "like",
    "people",
    "sit",
    "terms",
    "code",
    "uml",
    "know",
    "diagram",
    "example",
    "let",
    "say",
    "trying",
    "create",
    "database",
    "entities",
    "um",
    "approach",
    "work",
    "mindset",
    "try",
    "agile",
    "basically",
    "design",
    "every",
    "single",
    "might",
    "building",
    "plan",
    "start",
    "one",
    "thing",
    "feature",
    "need",
    "right",
    "actually",
    "users",
    "time",
    "may",
    "stuff",
    "coding",
    "everything",
    "use",
    "good",
    "get",
    "also",
    "user",
    "add",
    "go",
    "adding",
    "would",
    "step",
    "think",
    "make",
    "sure",
    "kind",
    "needs",
    "really",
    "bunch",
    "things",
    "even",
    "way",
    "write",
    "tests",
    "feedback",
    "using",
    "next",
    "able",
    "builds",
    "maybe",
    "works",
    "better",
    "page",
    "point",
    "discord",
    "getting"
  ]
}