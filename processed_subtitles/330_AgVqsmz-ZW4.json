{
  "text": "flask a minimalistic web framework which\nturns request handling into its most\nbasic possible form a function to get\nstarted create a file ending in py and\nimport flask then create an application\nobject with the flask Constructor Define\na function which returns some data and\ndecorate it with app. route and a path\nthis function will now be called\nwhenever a request hits the server with\nthis path and the return value will be\nsent back to the client to handle other\nHTTP verbs pass the methods argument to\napp. Route what if you want to use Query\nparameters simply reference flask\nrequest. args to get a dictionary of\nthem for dynamic paths wrap a node with\nangle brackets and accept it as a\nparameter to the function access cookies\nwith flask do request. cookies and to\ncreate new ones wrap your content with\nflask do make response you can then edit\nresponse headers or just use do set\ncookie with a key and a value for it to\nbe sent back in subsequent requests but\nwhat about files create a static\ndirectory and then anyone will be able\nto access files within with the URL /\nstatic SL followed by the file name you\ncan also return a specific file from a\nroute function with flask do send file\nflask supports Ginger a templating\nengine for embedding python into HTML\nand rendering it on the server to use\nginger create a templates folder and a\nregular old. HTML file within this file\nyou can evaluate pythonic expressions\nwith double curly braises their outputs\nwill be rendered into the file use curly\nbraces with percentage signs to create\nblocks anything within an if block will\nonly render if the pass condition is\ntrue similarly anything within a four\nblock will render once for every\niteration of the loop in your python\ncode use flask do render template with\nthe name of the file you wish to render\npass as many keyword arguments as you\nwant containing all the data you used\nwithin the template once your W is ready\nrun it with the proper wsgi server or in\na development setting just slap app.run\nat the end of the file that was a bite\nof flask I hope you enjoyed and thanks\nfor watching\n",
  "words": [
    "flask",
    "minimalistic",
    "web",
    "framework",
    "turns",
    "request",
    "handling",
    "basic",
    "possible",
    "form",
    "function",
    "get",
    "started",
    "create",
    "file",
    "ending",
    "py",
    "import",
    "flask",
    "create",
    "application",
    "object",
    "flask",
    "constructor",
    "define",
    "function",
    "returns",
    "data",
    "decorate",
    "app",
    "route",
    "path",
    "function",
    "called",
    "whenever",
    "request",
    "hits",
    "server",
    "path",
    "return",
    "value",
    "sent",
    "back",
    "client",
    "handle",
    "http",
    "verbs",
    "pass",
    "methods",
    "argument",
    "app",
    "route",
    "want",
    "use",
    "query",
    "parameters",
    "simply",
    "reference",
    "flask",
    "request",
    "args",
    "get",
    "dictionary",
    "dynamic",
    "paths",
    "wrap",
    "node",
    "angle",
    "brackets",
    "accept",
    "parameter",
    "function",
    "access",
    "cookies",
    "flask",
    "request",
    "cookies",
    "create",
    "new",
    "ones",
    "wrap",
    "content",
    "flask",
    "make",
    "response",
    "edit",
    "response",
    "headers",
    "use",
    "set",
    "cookie",
    "key",
    "value",
    "sent",
    "back",
    "subsequent",
    "requests",
    "files",
    "create",
    "static",
    "directory",
    "anyone",
    "able",
    "access",
    "files",
    "within",
    "url",
    "static",
    "sl",
    "followed",
    "file",
    "name",
    "also",
    "return",
    "specific",
    "file",
    "route",
    "function",
    "flask",
    "send",
    "file",
    "flask",
    "supports",
    "ginger",
    "templating",
    "engine",
    "embedding",
    "python",
    "html",
    "rendering",
    "server",
    "use",
    "ginger",
    "create",
    "templates",
    "folder",
    "regular",
    "old",
    "html",
    "file",
    "within",
    "file",
    "evaluate",
    "pythonic",
    "expressions",
    "double",
    "curly",
    "braises",
    "outputs",
    "rendered",
    "file",
    "use",
    "curly",
    "braces",
    "percentage",
    "signs",
    "create",
    "blocks",
    "anything",
    "within",
    "block",
    "render",
    "pass",
    "condition",
    "true",
    "similarly",
    "anything",
    "within",
    "four",
    "block",
    "render",
    "every",
    "iteration",
    "loop",
    "python",
    "code",
    "use",
    "flask",
    "render",
    "template",
    "name",
    "file",
    "wish",
    "render",
    "pass",
    "many",
    "keyword",
    "arguments",
    "want",
    "containing",
    "data",
    "used",
    "within",
    "template",
    "w",
    "ready",
    "run",
    "proper",
    "wsgi",
    "server",
    "development",
    "setting",
    "slap",
    "end",
    "file",
    "bite",
    "flask",
    "hope",
    "enjoyed",
    "thanks",
    "watching"
  ],
  "keywords": [
    "flask",
    "request",
    "function",
    "get",
    "create",
    "file",
    "data",
    "app",
    "route",
    "path",
    "server",
    "return",
    "value",
    "sent",
    "back",
    "pass",
    "want",
    "use",
    "wrap",
    "access",
    "cookies",
    "response",
    "files",
    "static",
    "within",
    "name",
    "ginger",
    "python",
    "html",
    "curly",
    "anything",
    "block",
    "render",
    "template"
  ]
}