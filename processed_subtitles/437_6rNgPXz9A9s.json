{
  "text": "Software testing plays a very important\nrole in advancement of software those\npoor software testing methods prompt to\nunpredictable development times an\nunstable software testing lifecycle it\nis exceptionally fundamental to have\nbest software testing methodologies to\nguarantee that the software product\nconvey to end-user is strong highly\nreliable and stable. Hey guys this is\nArchana from Edureka and I welcome you\nall to this session on software testing\nmethodologies and techniques. But before\nwe proceed any further let's go ahead\nand take a look at today's agenda we\nwill begin this session by discussing\nimportance of software testing and then\nit will get started with our today's\ntopic which is software testing\nmethodologies we will learn different\nmethodologies their advantages and\ndisadvantages\nmoving on we will get started with our\nsecond topic which is software testing\ntechniques we will discuss different\ntechniques their advantages and what\nthey mean we will also discuss different\ntechniques that come in the black box\nmodel white box model and experience\nbased model and with that we will\nconclude the session so I hope agenda\nwas clear to you guys let's get started\nthere every system has software bugs\nwell it's true it's impossible to design\nand bring out a perfect software product\nimperfections in software can sometimes\ncause unbelievable disasters history\nknows many examples of such situations\nwhen software flaws have caused billions\nof dollars in waste and even led to\ncasualties sometimes for example we have\nStarbucks coffee shops they were forced\nto give away free drinks because of a\nregister malfunction\nthe f-35 military aircraft was unable to\ndetect the target correctly because of a\nradar failure a high voltage power line\nin northern Ohio brushed against some\novergrown tees and it was shot on well\nnormally the problem would have tripped\nan alarm in the control room but due to\nsome software glitches and issues the\nalarm system failed and in 1985\ntherapy 25 radiation therapy machine\nmalfunction due to software bug and it\ndelivered lethal radiations to patients\nliving three people dead and critically\nenjoying others well these are some\nexamples\napart from these you come across many\nsimple examples in your daily life\na website you find an internet might\nseem fine at first but as you scroll\ndown go down at the page or try to send\na contact request it can start showing\nsome design flaws and errors this makes\nquality control and software testing\nvery important in every field where an\nend-user product is Invo so software\ntesting provides as lot of benefits it\ngives confidence in the quality of the\nfinal product it saves a lot of effort\ntime and money for the organizations\nthat are developing and selling the\nproduct because once the product is\ntested they can be sure that they'll be\nno faults that would prove fatal to them\nlater on it even offers business\noptimization it confirms that the\napplication is able to operate perfectly\nunder all required conditions and it's\nsupported on all other operating systems\nand web browsers correctly this way it\nenhances user experience and customer\nsatisfaction and obviously all this\nfactors benefit the company they\nincrease the money and the profit for\nthe company so these are some advantages\nthat software distinct avails to us so\nlike I said earlier it's exceptionally\nfundamental to have best software\ntesting methodologies to guarantee that\nthe product conveyed is strong reliable\nand stable so when I say testing\nmethodology I mean combinations of\nprinciples ideas methods and concept\nthat help you during the testing process\ntesting methodologies are simply\nstrategies and approaches used to test a\nparticular product to make sure that it\nfits the purpose so as software\napplications get more and more complex\nand get intervened with many different\nplatforms and devices it's more\nimportant than ever to have a robust\ntesting methodology because a\nmethodology it manages user requirements\ntest cases bugs all in single integrated\ntest environment\nit offers full traceability throughout\nthe testing lifecycle it acts as a\ncomplete testing solution that includes\nmanagement requirements test case\ndesigns release management and many\nother things it provides a complete\npicture of software product and its\nhealth issues or you can say status it\nleverages current technology investments\nwhen many other automated testing\nsolutions and offers best testing\nexperience that is why when you start\nwith testing you need to have a proper\nsuitable testing methodology does Nava\ndays there are dozens of software\ntesting methodologies each with their\nown starting points duration of\nexecution and methods that are used in\neach step the more well-known among\nthose are we have waterfall model we\nhave V model agile model spiral model\nyou have something called RUP that's\nrational unified process and rad model\nthat's nothing but rapid application\ndevelopment model extreme programming\nand many others choosing the proper one\ncan be a harsh experience that's why you\nshould know what each model mean what\nhas to offer what are the disadvantages\nwhere they're applicable where they're\nnot applicable and their advantages so\nin this session we're gonna discuss each\nof these models in brief but before we\nproceed any further I want to let you\nknow guys one thing people often combine\nsoftware development models with\nsoftware testing models because the\ndevelopment of the software and the\ntesting most of the time are done in\nparallel not exactly parallel but as\nsoon as the software is developed it's\nCenter testing so when they mean\nsoftware testing methodologies they're\nalmost same as software development\nmodels itself\ndon't confuse anyway let's get started\nwith our first model which is what a\nfull model I'm sure you've heard of\nwaterfall models right it's one of the\nmost popular model in software\nengineering\nwell the waterfall model is one of the\noldest models developed by Winston Royce\nin 1970 it's also known as linear\nsequential life cycle model the\ntraditional waterfall testing approach\nit represents multiple stages in a\nsequential manner that flows\nprogressively downward just like\nwaterfall\nthe name waterfall model it means that\nyou can move to the next phase of the\ndevelopment or testing only after you\nhave completed the previous phase\nsuccessfully so once a face of\ndevelopment is completed you can proceed\nto the next phase and there's no turning\nback\nas in once you start with the design\nphase you cannot go back to the\nrequirement phase this approach is\nuseful when requirements of well known\nyou sure about the technology and you\nhave understood the technology and all\nthe resources with required expertise\nare available and there at hand\nin such cases this model is highly\nuseful as you can see it has like five\nphases first you begin with requirement\nphase that's nothing but capture and\nanalyze all the requirements and make\nsure whether they are testable or not\nthen you have system design you create\nin document designs based on the\nrequirements which you collected in the\nprevious phase you define the hardware\nand the software requirements as well\nnext up we have implementation you\ncreate robust code for components as per\ndesign and then integrate them and\nobviously next we have verification\nthat's nothing but testing integrated\ncomponents they form a whole system here\nyou make sure if the system is working\nas per the requirements you also keep\ntrack and report the testing process you\nalso make sure that the system is stable\nwith zero bucks and it passes all the\ntests criteria and environments at the\npiste perfect\nso basically in this step you're making\nsure that your product is perfect and\nlastly you have system maintenance you\nmake sure if the application is working\nefficiently as for the requirement\nwithin the suitable environment in a\ncase a defect is found then that should\nbe fixed and deployed or updated and\nlater on so that's all about waterfall\nmodel talk about advantages and\ndisadvantages the main advantage of\nwaterfall model is that it allows for\ndepartmentalization and managerial\ncontrol apart from that it's very easy\nto understand and easy to manage because\nit's easy to understand it allows for\neasy testing in analysis it says\nsignificant amount of time talking about\ndisadvantages the disadvantage of\nwaterfall model is that it does not\nallow for much revision so once an\napplication is in the testing phase its\nvery difficult to go back and change\nsomething like acid olio because of that\nit's Chardon flexibility it lacks the\nvisibility of the current progress as in\nyou cannot see what's happening right\naway and the most important thing is\nchanges in the business requirements or\nnew additions and functionality require\nchanging all the previous steps\nlastly the end product is available only\nat the end of the cycle so these are\nsome disadvantages next up we have V\nmodel so V model is basically an\nextension of waterfall model where the\nprocess execution takes place in a\nsequential manner but in V shape which\nis clearly visible on the screen as you\ncan see there's an image so as you can\nsee in the image below there exists a\ndirectly associated testing phase in\neach phase of development cycle as you\ncan say the requirement analysis is\nassociated with operational testing and\nacceptance testing then you have eye\nlevel design which is associated with\nintegration testing\nsimilarly detailed specification is\nassociated with unit testing so\nbasically using the sui model you can\nperform started testing verification and\nreview that helps to prevent possible\ndefects in the latest issues well you\ncan say that this model is basically\ndivided into three phases we have\nverification phase next up is the coding\nphase and validation phase and\nverification phase and validation phase\nare done in parallel or you can say each\ntesting phase is associated with a phase\nof development cycle so guys the phases\nof the model are changeable but usually\nthey include the following phases as you\ncan see a requirement phase is\nassociated with acceptance testing its\nmain purpose is to evaluate if the\nsystem is ready for the final usage then\nyou have high-level design phase which\nrelates to system testing and includes\nevaluation of compliance of specified\nrequirements to the integrated system\nand next up we have detailed design\nphase which is in parallel to\nintegration testing that checks the\ninteractions between different system\ncomponents after that the coding stage\nbegins where you have another necessary\nphase that's nothing but unit testing\nit's important to make sure that the\nbehavior of individual parts and the\ncomponents of your software is correct\nand it meets the requirement so\nbasically in coding this phase it\ncontains actual coding in the\ndevelopment lifecycle so programming\nlanguages should be chosen based on your\nrequirements talk about advantages and\ndisadvantages of this model like I said\nit's just an extension of waterfall\nmodel so the advantages and\ndisadvantages are almost similar apart\nfrom that it's simple to use easy to\nunderstand it's good for small projects\nand it's highly cost effective and\ncompared waterfall model and there's no\noverlapping between the faces because as\nyou can see the inter-process is\nsequential talking about disadvantages\njust like waterfall model no inherent\nability to respond to changes you have\nto change all the steps and testing is\nusually squeezed in then and the absence\nof your solutions that eliminate the\nsoftware defects that's one of the most\nimportant disadvantages of the model and\nit's not suitable for large and complex\nprojects that's it about the V model\nlet's move on to next model which is\nincremental model well everything is\nsaid in the name itself you can consider\nthe incremental model as a multi\nwaterfall model of software testing the\nwhole incremental process here is\ndivided into various numbers of cycles\neach of them is further divided into\nsmaller modules each iterations add a\nspecific functionality of the software\nso an increment here actually includes\nthree cycles software designing and\ndevelopment testing and implementation\nas you can see in the diagram I have\nbuild one which includes all the three\nphases then I have built two a\nfunctionality has been added in the\nbuild one and then we move on to the\nbill two and add another functionality\nthat way you develop a product in\nincremental process another good thing\nwith this model is that simultaneous\ndevelopment of different product\nversions is possible for example the\nfirst version can pass the testing phase\nwhile the second one passes the\ndevelopment phase the third version in\nturn can pass the designing phase at the\nsame time so simultaneously you can\ndevelop different product versions while\nyou can continue this until your product\nis perfectly developed well it all says\nin the name itself right incremental\nmodel as you go on in every build you\nadd a new functionality\nand at a single point of time you can\nhave multiple bills or multiple versions\nbeing developed the advantage is that\nit's more flexible and it's cheaper when\nyou have change of requirements also the\nsoftware testing process here is more\neffective since it's easier to test and\ndebug if you are using smaller\niterations but the disadvantage is that\nit's costlier when compared to waterfall\nmodel that's all about the incremental\nmodel it's simple next up we have agile\nmodel agile as you guys know has become\none of the most popular software\ndevelopment methodology in recent years\nin parallel it's also known as software\ntesting methodology so majority of\nphones use agile techniques in some\ncapacity or other for software\ndevelopment and testing projects so with\nagile developers build software\nincrementally well you can say it's a\ntype of incremental software testing\ntechnique so they pick the project down\ninto small segments of user\nfunctionality which we call stories\nprioritize them and then continuously\ndeliver them in two weeks cycles called\nsprints the testing methodology is also\nincremental each small release is\nthoroughly tested to ensure quality as\nyou can see I have increment 1 I have\nrequest phase after that it's tested\nit's coded and design so you can see\nthat increment is a small release its\ntested perfectly for each and every\ndefect and the quality is ensured and\nthen we move on to the next increment\nand we have the same process being done\nagain but we add further more\nfunctionalities to the previous\niteration so basically this entire\nprocess of iteration allows testers to\nwork in parallel with the rest of the\nproject team throughout the process and\nfix the flaws and errors immediately\nafter they occur so the main goal of\nthis approach is that they have to\ndeliver a new software feature fast and\nthat do with the best quality so it\nfocuses on responding to the change\nrather than extensive planning like in\nwaterfall model waterfall model is all\nabout planning one phase after other and\nnot going back again but here if you\nhave a requirements change you interact\nwith other team or the other increment\nand make the changes as soon as possible\nand release the product in small cycles\nso the\nwhat's the profit of agile model next up\nwe have advantages so as you can see it\nhas a lot of advantages to offer it's an\nadaptive approach that responds easily\nto the changes unlike waterfall model\nsince flaws and defects are easily found\nand corrected the quality of the product\nwill also be improved and it'll be best\nit allows for the dyadic communication\nbetween the testers and other people\ninvolved in the testing process or the\nsoftware development process it's highly\nsuitable for the large and long-term\nprojects because you can release the\nproduct in small iterations so that's\nwhat makes it more suitable for large\nand long-term projects it promotes\nteamwork because it allows for direct\ncommunication which directly affects the\nteam book it's easy to manage pickers we\nare handling the small Willie cycles in\na variation and lastly it requires\nminimum requirements or resources you\ncan say talk about disadvantages it's\nhighly dependent on customer feedback so\nevery small iteration you release it to\nmarket you wait further customer\nfeedback and based on that you develop\nthe next iteration obviously there are\nbugs in addition to that you also take\nthe customer feedback as well so it's\nhighly dependent on clear customer\nrequirements of trend and there's this\nmaintainability risk involved it's\ndifficult to predict time and effort for\nlarge projects it lacks documentation\nefficiency it's not suitable for complex\nproject and there are chances of getting\noff-track as the outcome of each stage\nis not bad here next we have spiral\nmodel spiral model is similar to\nincremental model with more emphasis\nplaced on risk analysis so basically\nhere the importance is given to risk\nanalysis the spiral model has four\nphases you have planning risk analysis\nengineering an execution and evaluation\na software project repeatedly passes\nthrough these phases in iterations which\nwe call spirals here so once the first\ncycle is completed the second cycle\nstarts software testing starts from\nplanning and it lasts until the\nevaluation phase so the main advantages\nof this spiral methodology is that\nimmediate test feedback that's ready at\nthe third stage of each cycle since the\nfeedback is\nwhile I been in every sprint or spidel\nin this model it helps to guarantee the\nquality of the product just like your\nagile model however it's important to\nkeep in mind that this model can be\npretty costly one and it's not suitable\nfor small projects so the thing that you\nhave to remember is that the main\nemphasis here is on risk analysis and\nsince you get the customer feedback in\nthe third phase the quality of the\nproduct is really high so we already\ndiscuss the advantages the first one is\nthis lower amount of risk due to hide\nrisk analysis and obviously it ensures\nrapid development of the product the\nquality of the product is really high\nbecause every time in every spiral in\nthe third phase you get a feedback it\noffers strong documentation control a\nrequirement changes can be easily\naccommodated at a later date because\nthis is an incremental model just like a\ngen model requirement changes can be\neasily accommodated talking about\ndisadvantages it can be costly to use\nwhen compared to other models it's not\nsuitable for small projects you have\nlarge number of intermediate stages\nbecause you have different multiple\nspirals right it requires a lot of\ntechnical expertise it's highly\ndependent on risk analysis phase I think\nI just said that so that's all about\nspiral model so the last model that\nwe'll be discussing in this session is a\nrad model or you can say rapid\napplication development this rapid\napplication development model is also a\nform of incremental model where\ncomponents are developed in panel so\nwith right the focus is mainly on\nbuilding the prototype that looks and\nacts like a final product in this\napproach a prototype is created by\nassembling the different components of\nthe software product that have been\ndeveloped in PAL so once you create the\nprototype which is nothing but the\ncomponents assembled it is used to\ngather feedback from the customer so\nthis rad model spiral model and agile\nmodel are different forms of incremental\nmodel then as you can see in rad model\nit's divided into five phases or it\nincludes five phases we have business\nmodeling the first phase it identifies\nvital information flow between various\nbusiness\nthen we have data modeling information\ngathered from previous phase is used to\ndefine data objects then you have\nprocess modeling data objects which you\ngot in the data modeling step are then\nconverted to get business objective in\nthe third phase then you have\napplication generation various\nautomation tools are used in this step\nto process the models to actual source\ncode and lastly we have testing and turn\nover new components and all the\nconnecting interfaces are tested and the\nobject or the cycle or the product is\nreleased to market so as you can see the\nentire process goes on for about 60 to\n90 days the rad model is recommended\nwhen the product is required to be\ndelivered within a short period of two\nto three months and there's a high\navailability of skilled resources\ntalking about advantages it reduces\ndevelopment and testing cycle time it's\nnot that expensive and obviously since\nit's an incremental model it enhances\nthe customer feedback due to customer\ninvolvement throughout the cycle talking\nabout disadvantages it requires highly\nskilled resources if you have highly\nskilled resources and if you have two to\nthree months of time and you have a\nproduct to develop then rad model is\nhighly suitable and what are the other\ndisadvantages well it requires a system\nthat can be modularized as in divided\nand it's hard to use with legacy systems\nso this brings us to the end of software\ntesting methodologies discussion each of\nthese models employ a different testing\nmethodology to test the quality and the\nsecurity of software in different ways\nand different stages so choosing one\namong them can be quite complex and I\nhope that what you've learned today will\nhelp you choose a proper methodology\naccording to your requirements so guys\nthat's all about software testing\nmethodologies let's get started with our\nnext topic as you guys already know the\nmain purpose of software testing is to\ndeliver an optimum quality product at\nfaster pace to helped us to achieve that\nthere are multitude of software testing\ntechniques each with its own strengths\nand weakness but what exactly is a\nsoftware technique what do I mean when I\nsay a technique software testing\ntechnique refers to the procedure or a\nway to test the saw\nwe're on the test by comparing the\nactual and they expected results a good\nsoftware testing technique helps tester\nto design test case in such a way that\nminimal steps of test cases are involved\nso the two key points with software\ntesting techniques is that you need to\nhave minimal test cases but they should\nbe able to capture maximum\nfunctionalities of the software so with\ntesting techniques you can develop\nsmarter test cases reduce the number of\nsteps required in test cases so guys in\nthis session we will be discussing some\nof the popular techniques and I've\ndivided these techniques into different\ncategories so basically when it comes to\nsoftware testing techniques that are\ndivided into three main categories that\nwould be white box testing black box\ntesting and experience-based testing so\nwe cannot discuss each of these\ntechniques which come under different\ncategories in brief let's begin with\nblack box testing so what is black box\ntesting black box testing is also known\nas specification based testing here are\nthe testers analyze the functionality of\nthe software or the application without\nknowing much about the internal\nstructure or the design of the product\nso the main purpose of this method is to\ncheck the functionality of system as a\nwhole to make sure that it works\nproperly and it meets user demands\nwell the key point that you have to\nremember is that the testers perform\ntesting without knowing much about the\nproduct there are a lot of testing\ntechniques that come in a black box\ntesting let's discuss each of them in\nreef so guys first in list we have\nequivalence partitioning in equivalence\npartitioning input values to the system\nor the application which is on the test\nare divided into different partitions or\ngroups or classes based on its\nsimilarity in their outcome so instead\nof using each and every input value you\ncan use a value from each class or\npartition which covers all the possible\nscenarios to execute the test cases so\nthat way you can easily identify valid\nas well as invalid equivalence classes\nyou don't have to perform testing for\neach and every possible input value that\nwould be really hectic so this\nequivalence partitioning makes testing\nlot easier and it saves a lot of time\nand effort\nyou're part one let's try to understand\nwhat equivalence testing is with a\nsimple example let's say I have a test\nscenario where have to test input\nconditions accepting numbers from 1 to\n10 and 20 to 30 so how do I write test\ncases how many test cases should I\ninvolve should I check every number from\n0 to 10 and then 20 to 30 and then in\nbetween and all that that would be\nreally hectic so what do we do I've\ndivided the number of input values into\nfight possible test cases I have taken\nvalues before 1 that's from any number\nof values to 0 that's just before 1\nwhich should obviously come under\ninvalid class because we want to test\nthe values which comment of 1 to 10 and\n20 to 30 and next up we have valid\nvalues that's the values which come\nunder 1 to 10 then obviously the values\nbetween 10 to 20\nthose are also invalid because we don't\nwant to test those values as and we\ndon't want those values after that we\nhave values from 20 to 30 which comment\na valid class\nlastly the values from 31 to be on\ninstead of picking each and every input\nvalue from these 5 divided classes you\npick up a value and perform a test case\nor execute the test case since rest of\nthe values come in the same category\nwhatever the result you get for the\nparticular value which should take can\nbe applied to that other values as well\nfor example for a range between 11 to 19\nand taking a value of 15 so I apply 15 I\nget 2 results now I don't have to apply\nthe same thing for 16 18 19 and 9\nbecause I'm sure they all belong under\nthe same category which is 11 to 19 so\nthe result would be same as 15 that way\nwe can reduce the number of input values\nthat we have to test and save lot of\ntime and effort I hope you have\nunderstood it right let's move on to\nnext type then that's nothing with\nboundary value analysis well you can say\nboundary value analysis is next part of\nequivalence party Schneck it's a well\nobserved truth that greater number of\nerrors usually occur at the boundaries\nrather than in the center of the input\ndomain for a test it seems logical right\nyou can find more errors at the boundary\nrather than the values which are at the\ncenter so when I say boundary it means\nthe value near the limit where the\nbehavior of the system usually changes\nso in this span\nvalue analysis technique test cases are\ndesigned to include values at the\nboundaries if the input is within the\nboundary value it's considered positive\ntesting if the input is outside the\nboundary value it's considered negative\ntesting so it includes maximum minimum\ninside or outside edge typical values as\nin the values which come in the center\nand their values so here's a simple\nexample to understand let's consider a\ntesting scenario here you have to test\ninput conditions accepting numbers from\n1 to 10 so using boundary value analysis\nwe can define three classes of test\ncases here that would be input boundary\nvalues as an exact boundary values which\nis nothing but one and ten we want to\ntest all the conditions accepting\nnumbers from one to ten so what are our\nboundaries exact out boundary small\nenter then you have values just below\nthe extreme edges of input to me that's\nbefore one which is nothing but zero and\nbefore ten which is nothing but nine\nthen you have values just above the\nextreme edge of input to me that's the\nvalue after one which is nothing but 2\nand the value after ten that's starting\nwith 11 so what are the boundary values\nthat you can consider to test your zero\none and two and nine ten and eleven so\ninstead of considering all the input\nvalues you can consider this boundary\nvalues because it's at the boundaries\nwhere the behavior of the system usually\nchanges and then perform testing so\nthat's nothing but boundary value\nanalysis next up we have decision table\nbased technique a decision table\nbasically is a tabular representation of\ndifferent possible conditions verses\ntest actions you can think of conditions\nas inputs while actions can be\nconsidered as outputs so in this\ntechnique we deal with different\ncombinations of input values\nthis helps tester identify all the input\nvalues if he or she has overlooked any\nbecause of that very reason it's also\nknown as cause effect table technique as\nwell so the first task here is to\nidentify functionalities where the\noutput depends on a combination of\ninputs if there are large input set of\ncombinations then you can divide them\ninto smaller subsets which are helpful\nfor managing a decision table and for\nevery function you need to create a\ntable let's down all type of combination\nof inputs and respective outputs let's\nconsider a simple example suppose a\nsubmit button should be enabled if the\nuser has entered all the required fields\nso the test scenario here is that a\nsubmit button\nMastan should be enabled only if the\nuser has entered all the required fields\nand when I say required fields that\nwould be name email and message as you\ncan see I have eight rules here or eight\npossible combination of inputs the user\nhas given name and email but he has not\ngiven message that would be a rule for\nthen the output would definitely come\nand a negative case right submit button\nwill not been able suppose if the user\nhas not given anything that's name email\nmessage he hasn't given anything\nso obviously the submit button can't be\nenabled nothing happens when you click\non the submit button\nbut suppose let's say user has given a\nvalid name valid email and the valid\nmessage then when you click on the\nsubmit button something happens that's\nnothing but action so that way we\nconsider different possible combination\nof inputs you would draw a table and we\npoint out what's the possible output for\nthat particular combination of input\nnext up we have state transition diagram\nwell in this approach the tester\nanalyzes the behavior of an application\non to test for different input\nconditions in a sequence so you can\nprovide positive as well as negative\nvalues to check how the application\nresponds your you can apply this\ntechnique when an application how the\nsystem gives a different output for same\ninput depending on what has happened in\nthe earlier state so the concept here is\nyou can use this technique when your\nsystem is giving our different input but\nfor the same input and what do you call\nsuch a system you call it system as a\nfinite state system you can follow three\nsimple steps to perform this testing\nfirst of all you go ahead and create a\nstate transition diagram which as you\ncan see is there on the screen then you\nbuild the state table to review the\nstate transition diagram that can cause\nerrors lastly your design test cases\nfrom the state table which you have\ncreated in the step two and the state\ntransition diagram which you have\ncreated in the step one if you guys are\nnot familiar with what our state\ntransition diagrams let's\ngo ahead and check out an example let's\nsay you have to book a room you have\ninitiated a booking but right now if the\nroom is available the room count will be\ndecremented by one and the room is\nassigned to you user moves in but let's\nsay the room is not available your name\nwill be added to the waiting list and\nfrom the waiting list when once the\nrooms become empty you will be assigned\na room if there is a room which is\navailable if not if you are a user gives\nup then he'll be removed from the\nwaiting list that's it the process ends\nthere when you request a room for the\nsame input the input is what you are\nrequesting for a room we have two\ndifferent outputs one the room is\navailable you're getting a room and the\nroom count is dictum nted to Roo is not\navailable and you put on the waiting\nlist\nso for the same input we have multiple\noutput that's what we call a finite\nstate system now once after confirming\nthe room the customer want to cancel the\nroom booking so what he does he cancels\nand after that the room count is\nincremented if there are anyone who is\nin the waiting list\nthey're resigned with this canceled room\nand suppose if the user has moved in and\nhe is done with it and he's reached the\nagreement a date handy vacates through\nthe room count will be incremented and\nit will be archived and into added to\nthe available room list that's how\neverything happens in a sequence so guys\nthis state transition technique is\nreally unique approach for testing\nhighly complex applications which would\nincrease text execution productivity\nwithout compromising on the test\ncoverage the last type under black box\ntechnique is use case testing so first\nof all a use case is basically a tool\nfor defining the required user\ninteraction it depends on user actions\nand the response of the system to those\nuser actions this technique is\ncompletely functional testing approach\nas in there is no programming skill\nrequired unlike other techniques you can\nfollow simple three steps to perform use\ncase testing first of all you need to\nidentify all the possible scenarios from\na use case for each scenario you define\na test case and a condition for that\ntest case to be executed and lastly for\neach scenario you need to determine the\ntest data for the test for example you\ncan see a ATM system here so that's an\nuse case diagram which is\nrepresenting a typical ATM system\nfunctionality and use cases that you can\nconsider the first thing is you have\noperator who is responsible for starting\nthe system and shutting down the system\non responsible time then you have a\ncustomer so when a customer comes to ATM\nand he starts with whatever is doing in\nATM that's when our session begins\nhe's either withdrawing the money\ndepositing the money transferring the\nmoney or inquiring about the balance in\nsome times it's quite possible that when\nhe's performing all that he might enter\nan invalid PIN that is all try and use\nkeys which you can add to your use case\ndiagram and the transaction obviously\nhas to happen from the bank so that is\nalso a part of use case diagram as you\ncan see there's no programming here in\nwall you just imagine the scenario and\nyou create a use case diagram so this\nuse case diagram is also one of the most\npopular blackbox testing techniques next\nup we have white box testing techniques\nso white box testing is also known as\nstructure based testing unlike black box\ntesting this method requires a profound\nknowledge of code as it includes testing\nof some structural part of the\napplication so the main purpose of this\nwhite box techniques is to enhance\nsecurity check the flow of input and\noutput through the application to\nimprove design and usability just like\nblack box we have lot of techniques that\ncommand a white box testing let's\ndiscuss each of them in detail so you\nhave something called statement coverage\nor line coverage in this technique every\nstatement in the source code is executed\nat least once so each line of the code\nis tested which helps in pointing faulty\ngood in case of a flowchart every node\nis to be traversed and tested at least\nonce so basically this entire statement\ncoverage your line coverage is based on\nthe assumption that the more the code\ncovered the better is the testing of\nfunctionality however the problem here\nis that with these technique we cannot\nactually find the false condition in the\nsource code so for example you have a\ncertain set of code where it takes value\na and B and they're added in the values\nput to see if the C is greater than\nhundred then print it's done so in\nstatement or line coverage what are you\ndoing you checking exactly that you're\nnot going to check what happens if C is\nhundred so what do you do if you have a\ncase where a and B are in such a way\nthat then added the value is less than\nhundred so this is where the next type\nof testing technique comes in that's\nnothing but decision coverage or branch\ncoverage in this technique test cases\nare designed so that each branch from\nall decision points are traversed at\nleast once so if we consider the\nprevious example which we did earlier if\nC is greater than 100 is the decision\npoint if C is greater than 100 print\nit's done that's what we checked in the\nstatement coverage and line coverage but\nwe didn't check what happens if C is\nless than 100 so at that particular\ndecision point you have two ways that\nare being traversed so indecision\ncoverage of branch coverage you check\nboth the possibilities if C is greater\nthan hundred print that's done L\nsplendid spinning so basically this\nmethod is helpful to invalidate all the\nbranches in the code to make sure that\nno branch leads to any abnormal behavior\nand obviously decision coverage includes\nmuch more than line coverage so it's\nhighly powerful than statement coverage\nor you can say a line coverage and next\nup we have something called condition\ncoverage our predicate coverage\ncondition coverage is basically for\nboolean expressions it ensures whether\nall individual boolean expressions have\nbeen covered and evaluated to both true\nand false so I have a simple code here\nwhich reads X & Y value compares them\nchecks if the value is 0 and if either\none of them is 0 it prints 0 so\nbasically we have two conditions here X\nis equal to 0 and Y is equal to 0 now\nthese test condition get true or false\nas their values so one possible test\ncase or one possible example that we can\nconsider here is it should have two test\ncases in test K is 1 let's consider X 0\nY some random value but not 0 in that\ncase it'll print 0 right the program\nbecause X is 0 similarly in test case 2\nyou put some value to X but consider Y\nis 0 so again it prints 0 so in first\ntest condition X is evaluated to true Y\nis evaluated to false in the second\ncondition X is evaluated to false and\nvice evaluated to - so basically you're\nchecking every\nindividual boolean expression as covered\nand evaluated to both true or false now\na little bit extension of condition\ncoverage is that multiple condition\ncoverage\nunlike condition coverage in multiple\ncondition coverage every possible\ncombination of true or false for the\nconditions relate to a decision has to\nbe tested if we consider the same\nexample which we did for the condition\ncoverage\nI even have four test cases here in\nfirst test case I have both x and y a 0\nin the second disc case I have X is\nequal to 0 in the third test case I have\nY is equal to 0 and in the fourth test\ncase I have both of them evaluating the\nfalse that both of them are not 0 so\nthese are the four possible test cases\nthat I can write right so all possible\ntest cases I'll consider in multiple\ncondition coverage hence four test cases\nrequired for two individual conditions\nsimilarly if there are n conditions then\n2 to the power n test cases would be\nrequired just for your information so\nthat's all about white box techniques\nnext up we have experience based testing\nas the name indicates these techniques\nare logically drawn from experience in\ndesigning test cases and test conditions\nthey are based on the experience\nbackground and skills of a person in the\nfield of testing so basically here the\ntester makes use of proper strategy and\ndocumentation flying along with the\ngained experience now let's discuss some\ntechniques that come on experience based\ntechnique well there are about 4 to 5\nbut in this session we'll discuss the\nmost important ones which is nothing but\nexploratory testing and error guessing\nso first up we have exploratory testing\nthis technique is all about discovery\ninvestigation and learning here the\ntester constantly studies analyzes the\nproduct and accordingly applies the\nskills traits and experience to develop\ntest strategy and test cases to perform\nnecessary testing so the key words that\nyou remember here ha he studies analyzes\nthe product and according to skills\ntraits and experience he performed the\ntesting it's a very suitable technique\nwhen testing team has inadequate number\nof specifications requirements and\nseverely limited time error guessing\nwell it's a simple technique of guessing\nand detecting potential defect\nbugs and errors that are most likely to\noccur in software product so in error\nguessing no specific rules are applied\nthe new rules and conditions as to\ntester should do this hope that it takes\nadvantage of tester skills intuition\ntrades and expertise to find defects\nthat might not be identified when other\nblackbox techniques are used so this\ntechnique totally depends on testers\nexperience again the more experienced\nthe tester is the more errors he can\nidentify well another way to actually\nperform error guessing is that to\nregularly create defect and failure list\nthis list can be further used to design\ntest cases and counter tagged the box so\nguys with error guessing we've come to\nthe end of the session so that's all\nabout software testing techniques each\none of them serves best for the specific\ntype of problems in the software if you\nuse one more than others our test\ncoverage will suffer guys so remember to\nchoose the most suitable technique for\nyour projects not the most popular one\nto conclude in this session we have\nlearnt about different testing\nmethodologies and techniques the\ndisadvantages advantages well there's no\nsuch thing as one suitable methodology\nfor all project types the choice of\ntesting methodology or a technique\nactually depends on the type of project\nthat you're working on customer\nrequirements schedule and many of the\nfactors so the same goes for the\ntechniques as well so choose wisely\nthank you guys if you have liked the\nvideo please do click the like button if\nyou have any doubts or queries please do\npost them in the comment section and we\nwill get back to you I'll meet you in\nthe next session guys. I hope you have\nenjoyed listening to this video, please\nbe kind enough to like it and you can\ncomment any of your doubts and queries\nand we will reply them at the earliest.\ndo look out for more videos in our\nplaylist and subscribe to Edureka\nchannel to learn more, Happy learning.\n",
  "words": [
    "software",
    "testing",
    "plays",
    "important",
    "role",
    "advancement",
    "software",
    "poor",
    "software",
    "testing",
    "methods",
    "prompt",
    "unpredictable",
    "development",
    "times",
    "unstable",
    "software",
    "testing",
    "lifecycle",
    "exceptionally",
    "fundamental",
    "best",
    "software",
    "testing",
    "methodologies",
    "guarantee",
    "software",
    "product",
    "convey",
    "strong",
    "highly",
    "reliable",
    "stable",
    "hey",
    "guys",
    "archana",
    "edureka",
    "welcome",
    "session",
    "software",
    "testing",
    "methodologies",
    "techniques",
    "proceed",
    "let",
    "go",
    "ahead",
    "take",
    "look",
    "today",
    "agenda",
    "begin",
    "session",
    "discussing",
    "importance",
    "software",
    "testing",
    "get",
    "started",
    "today",
    "topic",
    "software",
    "testing",
    "methodologies",
    "learn",
    "different",
    "methodologies",
    "advantages",
    "disadvantages",
    "moving",
    "get",
    "started",
    "second",
    "topic",
    "software",
    "testing",
    "techniques",
    "discuss",
    "different",
    "techniques",
    "advantages",
    "mean",
    "also",
    "discuss",
    "different",
    "techniques",
    "come",
    "black",
    "box",
    "model",
    "white",
    "box",
    "model",
    "experience",
    "based",
    "model",
    "conclude",
    "session",
    "hope",
    "agenda",
    "clear",
    "guys",
    "let",
    "get",
    "started",
    "every",
    "system",
    "software",
    "bugs",
    "well",
    "true",
    "impossible",
    "design",
    "bring",
    "perfect",
    "software",
    "product",
    "imperfections",
    "software",
    "sometimes",
    "cause",
    "unbelievable",
    "disasters",
    "history",
    "knows",
    "many",
    "examples",
    "situations",
    "software",
    "flaws",
    "caused",
    "billions",
    "dollars",
    "waste",
    "even",
    "led",
    "casualties",
    "sometimes",
    "example",
    "starbucks",
    "coffee",
    "shops",
    "forced",
    "give",
    "away",
    "free",
    "drinks",
    "register",
    "malfunction",
    "military",
    "aircraft",
    "unable",
    "detect",
    "target",
    "correctly",
    "radar",
    "failure",
    "high",
    "voltage",
    "power",
    "line",
    "northern",
    "ohio",
    "brushed",
    "overgrown",
    "tees",
    "shot",
    "well",
    "normally",
    "problem",
    "would",
    "tripped",
    "alarm",
    "control",
    "room",
    "due",
    "software",
    "glitches",
    "issues",
    "alarm",
    "system",
    "failed",
    "1985",
    "therapy",
    "25",
    "radiation",
    "therapy",
    "machine",
    "malfunction",
    "due",
    "software",
    "bug",
    "delivered",
    "lethal",
    "radiations",
    "patients",
    "living",
    "three",
    "people",
    "dead",
    "critically",
    "enjoying",
    "others",
    "well",
    "examples",
    "apart",
    "come",
    "across",
    "many",
    "simple",
    "examples",
    "daily",
    "life",
    "website",
    "find",
    "internet",
    "might",
    "seem",
    "fine",
    "first",
    "scroll",
    "go",
    "page",
    "try",
    "send",
    "contact",
    "request",
    "start",
    "showing",
    "design",
    "flaws",
    "errors",
    "makes",
    "quality",
    "control",
    "software",
    "testing",
    "important",
    "every",
    "field",
    "product",
    "invo",
    "software",
    "testing",
    "provides",
    "lot",
    "benefits",
    "gives",
    "confidence",
    "quality",
    "final",
    "product",
    "saves",
    "lot",
    "effort",
    "time",
    "money",
    "organizations",
    "developing",
    "selling",
    "product",
    "product",
    "tested",
    "sure",
    "faults",
    "would",
    "prove",
    "fatal",
    "later",
    "even",
    "offers",
    "business",
    "optimization",
    "confirms",
    "application",
    "able",
    "operate",
    "perfectly",
    "required",
    "conditions",
    "supported",
    "operating",
    "systems",
    "web",
    "browsers",
    "correctly",
    "way",
    "enhances",
    "user",
    "experience",
    "customer",
    "satisfaction",
    "obviously",
    "factors",
    "benefit",
    "company",
    "increase",
    "money",
    "profit",
    "company",
    "advantages",
    "software",
    "distinct",
    "avails",
    "us",
    "like",
    "said",
    "earlier",
    "exceptionally",
    "fundamental",
    "best",
    "software",
    "testing",
    "methodologies",
    "guarantee",
    "product",
    "conveyed",
    "strong",
    "reliable",
    "stable",
    "say",
    "testing",
    "methodology",
    "mean",
    "combinations",
    "principles",
    "ideas",
    "methods",
    "concept",
    "help",
    "testing",
    "process",
    "testing",
    "methodologies",
    "simply",
    "strategies",
    "approaches",
    "used",
    "test",
    "particular",
    "product",
    "make",
    "sure",
    "fits",
    "purpose",
    "software",
    "applications",
    "get",
    "complex",
    "get",
    "intervened",
    "many",
    "different",
    "platforms",
    "devices",
    "important",
    "ever",
    "robust",
    "testing",
    "methodology",
    "methodology",
    "manages",
    "user",
    "requirements",
    "test",
    "cases",
    "bugs",
    "single",
    "integrated",
    "test",
    "environment",
    "offers",
    "full",
    "traceability",
    "throughout",
    "testing",
    "lifecycle",
    "acts",
    "complete",
    "testing",
    "solution",
    "includes",
    "management",
    "requirements",
    "test",
    "case",
    "designs",
    "release",
    "management",
    "many",
    "things",
    "provides",
    "complete",
    "picture",
    "software",
    "product",
    "health",
    "issues",
    "say",
    "status",
    "leverages",
    "current",
    "technology",
    "investments",
    "many",
    "automated",
    "testing",
    "solutions",
    "offers",
    "best",
    "testing",
    "experience",
    "start",
    "testing",
    "need",
    "proper",
    "suitable",
    "testing",
    "methodology",
    "nava",
    "days",
    "dozens",
    "software",
    "testing",
    "methodologies",
    "starting",
    "points",
    "duration",
    "execution",
    "methods",
    "used",
    "step",
    "among",
    "waterfall",
    "model",
    "v",
    "model",
    "agile",
    "model",
    "spiral",
    "model",
    "something",
    "called",
    "rup",
    "rational",
    "unified",
    "process",
    "rad",
    "model",
    "nothing",
    "rapid",
    "application",
    "development",
    "model",
    "extreme",
    "programming",
    "many",
    "others",
    "choosing",
    "proper",
    "one",
    "harsh",
    "experience",
    "know",
    "model",
    "mean",
    "offer",
    "disadvantages",
    "applicable",
    "applicable",
    "advantages",
    "session",
    "gon",
    "na",
    "discuss",
    "models",
    "brief",
    "proceed",
    "want",
    "let",
    "know",
    "guys",
    "one",
    "thing",
    "people",
    "often",
    "combine",
    "software",
    "development",
    "models",
    "software",
    "testing",
    "models",
    "development",
    "software",
    "testing",
    "time",
    "done",
    "parallel",
    "exactly",
    "parallel",
    "soon",
    "software",
    "developed",
    "center",
    "testing",
    "mean",
    "software",
    "testing",
    "methodologies",
    "almost",
    "software",
    "development",
    "models",
    "confuse",
    "anyway",
    "let",
    "get",
    "started",
    "first",
    "model",
    "full",
    "model",
    "sure",
    "heard",
    "waterfall",
    "models",
    "right",
    "one",
    "popular",
    "model",
    "software",
    "engineering",
    "well",
    "waterfall",
    "model",
    "one",
    "oldest",
    "models",
    "developed",
    "winston",
    "royce",
    "1970",
    "also",
    "known",
    "linear",
    "sequential",
    "life",
    "cycle",
    "model",
    "traditional",
    "waterfall",
    "testing",
    "approach",
    "represents",
    "multiple",
    "stages",
    "sequential",
    "manner",
    "flows",
    "progressively",
    "downward",
    "like",
    "waterfall",
    "name",
    "waterfall",
    "model",
    "means",
    "move",
    "next",
    "phase",
    "development",
    "testing",
    "completed",
    "previous",
    "phase",
    "successfully",
    "face",
    "development",
    "completed",
    "proceed",
    "next",
    "phase",
    "turning",
    "back",
    "start",
    "design",
    "phase",
    "go",
    "back",
    "requirement",
    "phase",
    "approach",
    "useful",
    "requirements",
    "well",
    "known",
    "sure",
    "technology",
    "understood",
    "technology",
    "resources",
    "required",
    "expertise",
    "available",
    "hand",
    "cases",
    "model",
    "highly",
    "useful",
    "see",
    "like",
    "five",
    "phases",
    "first",
    "begin",
    "requirement",
    "phase",
    "nothing",
    "capture",
    "analyze",
    "requirements",
    "make",
    "sure",
    "whether",
    "testable",
    "system",
    "design",
    "create",
    "document",
    "designs",
    "based",
    "requirements",
    "collected",
    "previous",
    "phase",
    "define",
    "hardware",
    "software",
    "requirements",
    "well",
    "next",
    "implementation",
    "create",
    "robust",
    "code",
    "components",
    "per",
    "design",
    "integrate",
    "obviously",
    "next",
    "verification",
    "nothing",
    "testing",
    "integrated",
    "components",
    "form",
    "whole",
    "system",
    "make",
    "sure",
    "system",
    "working",
    "per",
    "requirements",
    "also",
    "keep",
    "track",
    "report",
    "testing",
    "process",
    "also",
    "make",
    "sure",
    "system",
    "stable",
    "zero",
    "bucks",
    "passes",
    "tests",
    "criteria",
    "environments",
    "piste",
    "perfect",
    "basically",
    "step",
    "making",
    "sure",
    "product",
    "perfect",
    "lastly",
    "system",
    "maintenance",
    "make",
    "sure",
    "application",
    "working",
    "efficiently",
    "requirement",
    "within",
    "suitable",
    "environment",
    "case",
    "defect",
    "found",
    "fixed",
    "deployed",
    "updated",
    "later",
    "waterfall",
    "model",
    "talk",
    "advantages",
    "disadvantages",
    "main",
    "advantage",
    "waterfall",
    "model",
    "allows",
    "departmentalization",
    "managerial",
    "control",
    "apart",
    "easy",
    "understand",
    "easy",
    "manage",
    "easy",
    "understand",
    "allows",
    "easy",
    "testing",
    "analysis",
    "says",
    "significant",
    "amount",
    "time",
    "talking",
    "disadvantages",
    "disadvantage",
    "waterfall",
    "model",
    "allow",
    "much",
    "revision",
    "application",
    "testing",
    "phase",
    "difficult",
    "go",
    "back",
    "change",
    "something",
    "like",
    "acid",
    "olio",
    "chardon",
    "flexibility",
    "lacks",
    "visibility",
    "current",
    "progress",
    "see",
    "happening",
    "right",
    "away",
    "important",
    "thing",
    "changes",
    "business",
    "requirements",
    "new",
    "additions",
    "functionality",
    "require",
    "changing",
    "previous",
    "steps",
    "lastly",
    "end",
    "product",
    "available",
    "end",
    "cycle",
    "disadvantages",
    "next",
    "v",
    "model",
    "v",
    "model",
    "basically",
    "extension",
    "waterfall",
    "model",
    "process",
    "execution",
    "takes",
    "place",
    "sequential",
    "manner",
    "v",
    "shape",
    "clearly",
    "visible",
    "screen",
    "see",
    "image",
    "see",
    "image",
    "exists",
    "directly",
    "associated",
    "testing",
    "phase",
    "phase",
    "development",
    "cycle",
    "say",
    "requirement",
    "analysis",
    "associated",
    "operational",
    "testing",
    "acceptance",
    "testing",
    "eye",
    "level",
    "design",
    "associated",
    "integration",
    "testing",
    "similarly",
    "detailed",
    "specification",
    "associated",
    "unit",
    "testing",
    "basically",
    "using",
    "sui",
    "model",
    "perform",
    "started",
    "testing",
    "verification",
    "review",
    "helps",
    "prevent",
    "possible",
    "defects",
    "latest",
    "issues",
    "well",
    "say",
    "model",
    "basically",
    "divided",
    "three",
    "phases",
    "verification",
    "phase",
    "next",
    "coding",
    "phase",
    "validation",
    "phase",
    "verification",
    "phase",
    "validation",
    "phase",
    "done",
    "parallel",
    "say",
    "testing",
    "phase",
    "associated",
    "phase",
    "development",
    "cycle",
    "guys",
    "phases",
    "model",
    "changeable",
    "usually",
    "include",
    "following",
    "phases",
    "see",
    "requirement",
    "phase",
    "associated",
    "acceptance",
    "testing",
    "main",
    "purpose",
    "evaluate",
    "system",
    "ready",
    "final",
    "usage",
    "design",
    "phase",
    "relates",
    "system",
    "testing",
    "includes",
    "evaluation",
    "compliance",
    "specified",
    "requirements",
    "integrated",
    "system",
    "next",
    "detailed",
    "design",
    "phase",
    "parallel",
    "integration",
    "testing",
    "checks",
    "interactions",
    "different",
    "system",
    "components",
    "coding",
    "stage",
    "begins",
    "another",
    "necessary",
    "phase",
    "nothing",
    "unit",
    "testing",
    "important",
    "make",
    "sure",
    "behavior",
    "individual",
    "parts",
    "components",
    "software",
    "correct",
    "meets",
    "requirement",
    "basically",
    "coding",
    "phase",
    "contains",
    "actual",
    "coding",
    "development",
    "lifecycle",
    "programming",
    "languages",
    "chosen",
    "based",
    "requirements",
    "talk",
    "advantages",
    "disadvantages",
    "model",
    "like",
    "said",
    "extension",
    "waterfall",
    "model",
    "advantages",
    "disadvantages",
    "almost",
    "similar",
    "apart",
    "simple",
    "use",
    "easy",
    "understand",
    "good",
    "small",
    "projects",
    "highly",
    "cost",
    "effective",
    "compared",
    "waterfall",
    "model",
    "overlapping",
    "faces",
    "see",
    "sequential",
    "talking",
    "disadvantages",
    "like",
    "waterfall",
    "model",
    "inherent",
    "ability",
    "respond",
    "changes",
    "change",
    "steps",
    "testing",
    "usually",
    "squeezed",
    "absence",
    "solutions",
    "eliminate",
    "software",
    "defects",
    "one",
    "important",
    "disadvantages",
    "model",
    "suitable",
    "large",
    "complex",
    "projects",
    "v",
    "model",
    "let",
    "move",
    "next",
    "model",
    "incremental",
    "model",
    "well",
    "everything",
    "said",
    "name",
    "consider",
    "incremental",
    "model",
    "multi",
    "waterfall",
    "model",
    "software",
    "testing",
    "whole",
    "incremental",
    "process",
    "divided",
    "various",
    "numbers",
    "cycles",
    "divided",
    "smaller",
    "modules",
    "iterations",
    "add",
    "specific",
    "functionality",
    "software",
    "increment",
    "actually",
    "includes",
    "three",
    "cycles",
    "software",
    "designing",
    "development",
    "testing",
    "implementation",
    "see",
    "diagram",
    "build",
    "one",
    "includes",
    "three",
    "phases",
    "built",
    "two",
    "functionality",
    "added",
    "build",
    "one",
    "move",
    "bill",
    "two",
    "add",
    "another",
    "functionality",
    "way",
    "develop",
    "product",
    "incremental",
    "process",
    "another",
    "good",
    "thing",
    "model",
    "simultaneous",
    "development",
    "different",
    "product",
    "versions",
    "possible",
    "example",
    "first",
    "version",
    "pass",
    "testing",
    "phase",
    "second",
    "one",
    "passes",
    "development",
    "phase",
    "third",
    "version",
    "turn",
    "pass",
    "designing",
    "phase",
    "time",
    "simultaneously",
    "develop",
    "different",
    "product",
    "versions",
    "continue",
    "product",
    "perfectly",
    "developed",
    "well",
    "says",
    "name",
    "right",
    "incremental",
    "model",
    "go",
    "every",
    "build",
    "add",
    "new",
    "functionality",
    "single",
    "point",
    "time",
    "multiple",
    "bills",
    "multiple",
    "versions",
    "developed",
    "advantage",
    "flexible",
    "cheaper",
    "change",
    "requirements",
    "also",
    "software",
    "testing",
    "process",
    "effective",
    "since",
    "easier",
    "test",
    "debug",
    "using",
    "smaller",
    "iterations",
    "disadvantage",
    "costlier",
    "compared",
    "waterfall",
    "model",
    "incremental",
    "model",
    "simple",
    "next",
    "agile",
    "model",
    "agile",
    "guys",
    "know",
    "become",
    "one",
    "popular",
    "software",
    "development",
    "methodology",
    "recent",
    "years",
    "parallel",
    "also",
    "known",
    "software",
    "testing",
    "methodology",
    "majority",
    "phones",
    "use",
    "agile",
    "techniques",
    "capacity",
    "software",
    "development",
    "testing",
    "projects",
    "agile",
    "developers",
    "build",
    "software",
    "incrementally",
    "well",
    "say",
    "type",
    "incremental",
    "software",
    "testing",
    "technique",
    "pick",
    "project",
    "small",
    "segments",
    "user",
    "functionality",
    "call",
    "stories",
    "prioritize",
    "continuously",
    "deliver",
    "two",
    "weeks",
    "cycles",
    "called",
    "sprints",
    "testing",
    "methodology",
    "also",
    "incremental",
    "small",
    "release",
    "thoroughly",
    "tested",
    "ensure",
    "quality",
    "see",
    "increment",
    "1",
    "request",
    "phase",
    "tested",
    "coded",
    "design",
    "see",
    "increment",
    "small",
    "release",
    "tested",
    "perfectly",
    "every",
    "defect",
    "quality",
    "ensured",
    "move",
    "next",
    "increment",
    "process",
    "done",
    "add",
    "functionalities",
    "previous",
    "iteration",
    "basically",
    "entire",
    "process",
    "iteration",
    "allows",
    "testers",
    "work",
    "parallel",
    "rest",
    "project",
    "team",
    "throughout",
    "process",
    "fix",
    "flaws",
    "errors",
    "immediately",
    "occur",
    "main",
    "goal",
    "approach",
    "deliver",
    "new",
    "software",
    "feature",
    "fast",
    "best",
    "quality",
    "focuses",
    "responding",
    "change",
    "rather",
    "extensive",
    "planning",
    "like",
    "waterfall",
    "model",
    "waterfall",
    "model",
    "planning",
    "one",
    "phase",
    "going",
    "back",
    "requirements",
    "change",
    "interact",
    "team",
    "increment",
    "make",
    "changes",
    "soon",
    "possible",
    "release",
    "product",
    "small",
    "cycles",
    "profit",
    "agile",
    "model",
    "next",
    "advantages",
    "see",
    "lot",
    "advantages",
    "offer",
    "adaptive",
    "approach",
    "responds",
    "easily",
    "changes",
    "unlike",
    "waterfall",
    "model",
    "since",
    "flaws",
    "defects",
    "easily",
    "found",
    "corrected",
    "quality",
    "product",
    "also",
    "improved",
    "best",
    "allows",
    "dyadic",
    "communication",
    "testers",
    "people",
    "involved",
    "testing",
    "process",
    "software",
    "development",
    "process",
    "highly",
    "suitable",
    "large",
    "projects",
    "release",
    "product",
    "small",
    "iterations",
    "makes",
    "suitable",
    "large",
    "projects",
    "promotes",
    "teamwork",
    "allows",
    "direct",
    "communication",
    "directly",
    "affects",
    "team",
    "book",
    "easy",
    "manage",
    "pickers",
    "handling",
    "small",
    "willie",
    "cycles",
    "variation",
    "lastly",
    "requires",
    "minimum",
    "requirements",
    "resources",
    "say",
    "talk",
    "disadvantages",
    "highly",
    "dependent",
    "customer",
    "feedback",
    "every",
    "small",
    "iteration",
    "release",
    "market",
    "wait",
    "customer",
    "feedback",
    "based",
    "develop",
    "next",
    "iteration",
    "obviously",
    "bugs",
    "addition",
    "also",
    "take",
    "customer",
    "feedback",
    "well",
    "highly",
    "dependent",
    "clear",
    "customer",
    "requirements",
    "trend",
    "maintainability",
    "risk",
    "involved",
    "difficult",
    "predict",
    "time",
    "effort",
    "large",
    "projects",
    "lacks",
    "documentation",
    "efficiency",
    "suitable",
    "complex",
    "project",
    "chances",
    "getting",
    "outcome",
    "stage",
    "bad",
    "next",
    "spiral",
    "model",
    "spiral",
    "model",
    "similar",
    "incremental",
    "model",
    "emphasis",
    "placed",
    "risk",
    "analysis",
    "basically",
    "importance",
    "given",
    "risk",
    "analysis",
    "spiral",
    "model",
    "four",
    "phases",
    "planning",
    "risk",
    "analysis",
    "engineering",
    "execution",
    "evaluation",
    "software",
    "project",
    "repeatedly",
    "passes",
    "phases",
    "iterations",
    "call",
    "spirals",
    "first",
    "cycle",
    "completed",
    "second",
    "cycle",
    "starts",
    "software",
    "testing",
    "starts",
    "planning",
    "lasts",
    "evaluation",
    "phase",
    "main",
    "advantages",
    "spiral",
    "methodology",
    "immediate",
    "test",
    "feedback",
    "ready",
    "third",
    "stage",
    "cycle",
    "since",
    "feedback",
    "every",
    "sprint",
    "spidel",
    "model",
    "helps",
    "guarantee",
    "quality",
    "product",
    "like",
    "agile",
    "model",
    "however",
    "important",
    "keep",
    "mind",
    "model",
    "pretty",
    "costly",
    "one",
    "suitable",
    "small",
    "projects",
    "thing",
    "remember",
    "main",
    "emphasis",
    "risk",
    "analysis",
    "since",
    "get",
    "customer",
    "feedback",
    "third",
    "phase",
    "quality",
    "product",
    "really",
    "high",
    "already",
    "discuss",
    "advantages",
    "first",
    "one",
    "lower",
    "amount",
    "risk",
    "due",
    "hide",
    "risk",
    "analysis",
    "obviously",
    "ensures",
    "rapid",
    "development",
    "product",
    "quality",
    "product",
    "really",
    "high",
    "every",
    "time",
    "every",
    "spiral",
    "third",
    "phase",
    "get",
    "feedback",
    "offers",
    "strong",
    "documentation",
    "control",
    "requirement",
    "changes",
    "easily",
    "accommodated",
    "later",
    "date",
    "incremental",
    "model",
    "like",
    "gen",
    "model",
    "requirement",
    "changes",
    "easily",
    "accommodated",
    "talking",
    "disadvantages",
    "costly",
    "use",
    "compared",
    "models",
    "suitable",
    "small",
    "projects",
    "large",
    "number",
    "intermediate",
    "stages",
    "different",
    "multiple",
    "spirals",
    "right",
    "requires",
    "lot",
    "technical",
    "expertise",
    "highly",
    "dependent",
    "risk",
    "analysis",
    "phase",
    "think",
    "said",
    "spiral",
    "model",
    "last",
    "model",
    "discussing",
    "session",
    "rad",
    "model",
    "say",
    "rapid",
    "application",
    "development",
    "rapid",
    "application",
    "development",
    "model",
    "also",
    "form",
    "incremental",
    "model",
    "components",
    "developed",
    "panel",
    "right",
    "focus",
    "mainly",
    "building",
    "prototype",
    "looks",
    "acts",
    "like",
    "final",
    "product",
    "approach",
    "prototype",
    "created",
    "assembling",
    "different",
    "components",
    "software",
    "product",
    "developed",
    "pal",
    "create",
    "prototype",
    "nothing",
    "components",
    "assembled",
    "used",
    "gather",
    "feedback",
    "customer",
    "rad",
    "model",
    "spiral",
    "model",
    "agile",
    "model",
    "different",
    "forms",
    "incremental",
    "model",
    "see",
    "rad",
    "model",
    "divided",
    "five",
    "phases",
    "includes",
    "five",
    "phases",
    "business",
    "modeling",
    "first",
    "phase",
    "identifies",
    "vital",
    "information",
    "flow",
    "various",
    "business",
    "data",
    "modeling",
    "information",
    "gathered",
    "previous",
    "phase",
    "used",
    "define",
    "data",
    "objects",
    "process",
    "modeling",
    "data",
    "objects",
    "got",
    "data",
    "modeling",
    "step",
    "converted",
    "get",
    "business",
    "objective",
    "third",
    "phase",
    "application",
    "generation",
    "various",
    "automation",
    "tools",
    "used",
    "step",
    "process",
    "models",
    "actual",
    "source",
    "code",
    "lastly",
    "testing",
    "turn",
    "new",
    "components",
    "connecting",
    "interfaces",
    "tested",
    "object",
    "cycle",
    "product",
    "released",
    "market",
    "see",
    "entire",
    "process",
    "goes",
    "60",
    "90",
    "days",
    "rad",
    "model",
    "recommended",
    "product",
    "required",
    "delivered",
    "within",
    "short",
    "period",
    "two",
    "three",
    "months",
    "high",
    "availability",
    "skilled",
    "resources",
    "talking",
    "advantages",
    "reduces",
    "development",
    "testing",
    "cycle",
    "time",
    "expensive",
    "obviously",
    "since",
    "incremental",
    "model",
    "enhances",
    "customer",
    "feedback",
    "due",
    "customer",
    "involvement",
    "throughout",
    "cycle",
    "talking",
    "disadvantages",
    "requires",
    "highly",
    "skilled",
    "resources",
    "highly",
    "skilled",
    "resources",
    "two",
    "three",
    "months",
    "time",
    "product",
    "develop",
    "rad",
    "model",
    "highly",
    "suitable",
    "disadvantages",
    "well",
    "requires",
    "system",
    "modularized",
    "divided",
    "hard",
    "use",
    "legacy",
    "systems",
    "brings",
    "us",
    "end",
    "software",
    "testing",
    "methodologies",
    "discussion",
    "models",
    "employ",
    "different",
    "testing",
    "methodology",
    "test",
    "quality",
    "security",
    "software",
    "different",
    "ways",
    "different",
    "stages",
    "choosing",
    "one",
    "among",
    "quite",
    "complex",
    "hope",
    "learned",
    "today",
    "help",
    "choose",
    "proper",
    "methodology",
    "according",
    "requirements",
    "guys",
    "software",
    "testing",
    "methodologies",
    "let",
    "get",
    "started",
    "next",
    "topic",
    "guys",
    "already",
    "know",
    "main",
    "purpose",
    "software",
    "testing",
    "deliver",
    "optimum",
    "quality",
    "product",
    "faster",
    "pace",
    "helped",
    "us",
    "achieve",
    "multitude",
    "software",
    "testing",
    "techniques",
    "strengths",
    "weakness",
    "exactly",
    "software",
    "technique",
    "mean",
    "say",
    "technique",
    "software",
    "testing",
    "technique",
    "refers",
    "procedure",
    "way",
    "test",
    "saw",
    "test",
    "comparing",
    "actual",
    "expected",
    "results",
    "good",
    "software",
    "testing",
    "technique",
    "helps",
    "tester",
    "design",
    "test",
    "case",
    "way",
    "minimal",
    "steps",
    "test",
    "cases",
    "involved",
    "two",
    "key",
    "points",
    "software",
    "testing",
    "techniques",
    "need",
    "minimal",
    "test",
    "cases",
    "able",
    "capture",
    "maximum",
    "functionalities",
    "software",
    "testing",
    "techniques",
    "develop",
    "smarter",
    "test",
    "cases",
    "reduce",
    "number",
    "steps",
    "required",
    "test",
    "cases",
    "guys",
    "session",
    "discussing",
    "popular",
    "techniques",
    "divided",
    "techniques",
    "different",
    "categories",
    "basically",
    "comes",
    "software",
    "testing",
    "techniques",
    "divided",
    "three",
    "main",
    "categories",
    "would",
    "white",
    "box",
    "testing",
    "black",
    "box",
    "testing",
    "testing",
    "discuss",
    "techniques",
    "come",
    "different",
    "categories",
    "brief",
    "let",
    "begin",
    "black",
    "box",
    "testing",
    "black",
    "box",
    "testing",
    "black",
    "box",
    "testing",
    "also",
    "known",
    "specification",
    "based",
    "testing",
    "testers",
    "analyze",
    "functionality",
    "software",
    "application",
    "without",
    "knowing",
    "much",
    "internal",
    "structure",
    "design",
    "product",
    "main",
    "purpose",
    "method",
    "check",
    "functionality",
    "system",
    "whole",
    "make",
    "sure",
    "works",
    "properly",
    "meets",
    "user",
    "demands",
    "well",
    "key",
    "point",
    "remember",
    "testers",
    "perform",
    "testing",
    "without",
    "knowing",
    "much",
    "product",
    "lot",
    "testing",
    "techniques",
    "come",
    "black",
    "box",
    "testing",
    "let",
    "discuss",
    "reef",
    "guys",
    "first",
    "list",
    "equivalence",
    "partitioning",
    "equivalence",
    "partitioning",
    "input",
    "values",
    "system",
    "application",
    "test",
    "divided",
    "different",
    "partitions",
    "groups",
    "classes",
    "based",
    "similarity",
    "outcome",
    "instead",
    "using",
    "every",
    "input",
    "value",
    "use",
    "value",
    "class",
    "partition",
    "covers",
    "possible",
    "scenarios",
    "execute",
    "test",
    "cases",
    "way",
    "easily",
    "identify",
    "valid",
    "well",
    "invalid",
    "equivalence",
    "classes",
    "perform",
    "testing",
    "every",
    "possible",
    "input",
    "value",
    "would",
    "really",
    "hectic",
    "equivalence",
    "partitioning",
    "makes",
    "testing",
    "lot",
    "easier",
    "saves",
    "lot",
    "time",
    "effort",
    "part",
    "one",
    "let",
    "try",
    "understand",
    "equivalence",
    "testing",
    "simple",
    "example",
    "let",
    "say",
    "test",
    "scenario",
    "test",
    "input",
    "conditions",
    "accepting",
    "numbers",
    "1",
    "10",
    "20",
    "30",
    "write",
    "test",
    "cases",
    "many",
    "test",
    "cases",
    "involve",
    "check",
    "every",
    "number",
    "0",
    "10",
    "20",
    "30",
    "would",
    "really",
    "hectic",
    "divided",
    "number",
    "input",
    "values",
    "fight",
    "possible",
    "test",
    "cases",
    "taken",
    "values",
    "1",
    "number",
    "values",
    "0",
    "1",
    "obviously",
    "come",
    "invalid",
    "class",
    "want",
    "test",
    "values",
    "comment",
    "1",
    "10",
    "20",
    "30",
    "next",
    "valid",
    "values",
    "values",
    "come",
    "1",
    "10",
    "obviously",
    "values",
    "10",
    "20",
    "also",
    "invalid",
    "want",
    "test",
    "values",
    "want",
    "values",
    "values",
    "20",
    "30",
    "comment",
    "valid",
    "class",
    "lastly",
    "values",
    "31",
    "instead",
    "picking",
    "every",
    "input",
    "value",
    "5",
    "divided",
    "classes",
    "pick",
    "value",
    "perform",
    "test",
    "case",
    "execute",
    "test",
    "case",
    "since",
    "rest",
    "values",
    "come",
    "category",
    "whatever",
    "result",
    "get",
    "particular",
    "value",
    "take",
    "applied",
    "values",
    "well",
    "example",
    "range",
    "11",
    "19",
    "taking",
    "value",
    "15",
    "apply",
    "15",
    "get",
    "2",
    "results",
    "apply",
    "thing",
    "16",
    "18",
    "19",
    "9",
    "sure",
    "belong",
    "category",
    "11",
    "19",
    "result",
    "would",
    "15",
    "way",
    "reduce",
    "number",
    "input",
    "values",
    "test",
    "save",
    "lot",
    "time",
    "effort",
    "hope",
    "understood",
    "right",
    "let",
    "move",
    "next",
    "type",
    "nothing",
    "boundary",
    "value",
    "analysis",
    "well",
    "say",
    "boundary",
    "value",
    "analysis",
    "next",
    "part",
    "equivalence",
    "party",
    "schneck",
    "well",
    "observed",
    "truth",
    "greater",
    "number",
    "errors",
    "usually",
    "occur",
    "boundaries",
    "rather",
    "center",
    "input",
    "domain",
    "test",
    "seems",
    "logical",
    "right",
    "find",
    "errors",
    "boundary",
    "rather",
    "values",
    "center",
    "say",
    "boundary",
    "means",
    "value",
    "near",
    "limit",
    "behavior",
    "system",
    "usually",
    "changes",
    "span",
    "value",
    "analysis",
    "technique",
    "test",
    "cases",
    "designed",
    "include",
    "values",
    "boundaries",
    "input",
    "within",
    "boundary",
    "value",
    "considered",
    "positive",
    "testing",
    "input",
    "outside",
    "boundary",
    "value",
    "considered",
    "negative",
    "testing",
    "includes",
    "maximum",
    "minimum",
    "inside",
    "outside",
    "edge",
    "typical",
    "values",
    "values",
    "come",
    "center",
    "values",
    "simple",
    "example",
    "understand",
    "let",
    "consider",
    "testing",
    "scenario",
    "test",
    "input",
    "conditions",
    "accepting",
    "numbers",
    "1",
    "10",
    "using",
    "boundary",
    "value",
    "analysis",
    "define",
    "three",
    "classes",
    "test",
    "cases",
    "would",
    "input",
    "boundary",
    "values",
    "exact",
    "boundary",
    "values",
    "nothing",
    "one",
    "ten",
    "want",
    "test",
    "conditions",
    "accepting",
    "numbers",
    "one",
    "ten",
    "boundaries",
    "exact",
    "boundary",
    "small",
    "enter",
    "values",
    "extreme",
    "edges",
    "input",
    "one",
    "nothing",
    "zero",
    "ten",
    "nothing",
    "nine",
    "values",
    "extreme",
    "edge",
    "input",
    "value",
    "one",
    "nothing",
    "2",
    "value",
    "ten",
    "starting",
    "11",
    "boundary",
    "values",
    "consider",
    "test",
    "zero",
    "one",
    "two",
    "nine",
    "ten",
    "eleven",
    "instead",
    "considering",
    "input",
    "values",
    "consider",
    "boundary",
    "values",
    "boundaries",
    "behavior",
    "system",
    "usually",
    "changes",
    "perform",
    "testing",
    "nothing",
    "boundary",
    "value",
    "analysis",
    "next",
    "decision",
    "table",
    "based",
    "technique",
    "decision",
    "table",
    "basically",
    "tabular",
    "representation",
    "different",
    "possible",
    "conditions",
    "verses",
    "test",
    "actions",
    "think",
    "conditions",
    "inputs",
    "actions",
    "considered",
    "outputs",
    "technique",
    "deal",
    "different",
    "combinations",
    "input",
    "values",
    "helps",
    "tester",
    "identify",
    "input",
    "values",
    "overlooked",
    "reason",
    "also",
    "known",
    "cause",
    "effect",
    "table",
    "technique",
    "well",
    "first",
    "task",
    "identify",
    "functionalities",
    "output",
    "depends",
    "combination",
    "inputs",
    "large",
    "input",
    "set",
    "combinations",
    "divide",
    "smaller",
    "subsets",
    "helpful",
    "managing",
    "decision",
    "table",
    "every",
    "function",
    "need",
    "create",
    "table",
    "let",
    "type",
    "combination",
    "inputs",
    "respective",
    "outputs",
    "let",
    "consider",
    "simple",
    "example",
    "suppose",
    "submit",
    "button",
    "enabled",
    "user",
    "entered",
    "required",
    "fields",
    "test",
    "scenario",
    "submit",
    "button",
    "mastan",
    "enabled",
    "user",
    "entered",
    "required",
    "fields",
    "say",
    "required",
    "fields",
    "would",
    "name",
    "email",
    "message",
    "see",
    "eight",
    "rules",
    "eight",
    "possible",
    "combination",
    "inputs",
    "user",
    "given",
    "name",
    "email",
    "given",
    "message",
    "would",
    "rule",
    "output",
    "would",
    "definitely",
    "come",
    "negative",
    "case",
    "right",
    "submit",
    "button",
    "able",
    "suppose",
    "user",
    "given",
    "anything",
    "name",
    "email",
    "message",
    "given",
    "anything",
    "obviously",
    "submit",
    "button",
    "ca",
    "enabled",
    "nothing",
    "happens",
    "click",
    "submit",
    "button",
    "suppose",
    "let",
    "say",
    "user",
    "given",
    "valid",
    "name",
    "valid",
    "email",
    "valid",
    "message",
    "click",
    "submit",
    "button",
    "something",
    "happens",
    "nothing",
    "action",
    "way",
    "consider",
    "different",
    "possible",
    "combination",
    "inputs",
    "would",
    "draw",
    "table",
    "point",
    "possible",
    "output",
    "particular",
    "combination",
    "input",
    "next",
    "state",
    "transition",
    "diagram",
    "well",
    "approach",
    "tester",
    "analyzes",
    "behavior",
    "application",
    "test",
    "different",
    "input",
    "conditions",
    "sequence",
    "provide",
    "positive",
    "well",
    "negative",
    "values",
    "check",
    "application",
    "responds",
    "apply",
    "technique",
    "application",
    "system",
    "gives",
    "different",
    "output",
    "input",
    "depending",
    "happened",
    "earlier",
    "state",
    "concept",
    "use",
    "technique",
    "system",
    "giving",
    "different",
    "input",
    "input",
    "call",
    "system",
    "call",
    "system",
    "finite",
    "state",
    "system",
    "follow",
    "three",
    "simple",
    "steps",
    "perform",
    "testing",
    "first",
    "go",
    "ahead",
    "create",
    "state",
    "transition",
    "diagram",
    "see",
    "screen",
    "build",
    "state",
    "table",
    "review",
    "state",
    "transition",
    "diagram",
    "cause",
    "errors",
    "lastly",
    "design",
    "test",
    "cases",
    "state",
    "table",
    "created",
    "step",
    "two",
    "state",
    "transition",
    "diagram",
    "created",
    "step",
    "one",
    "guys",
    "familiar",
    "state",
    "transition",
    "diagrams",
    "let",
    "go",
    "ahead",
    "check",
    "example",
    "let",
    "say",
    "book",
    "room",
    "initiated",
    "booking",
    "right",
    "room",
    "available",
    "room",
    "count",
    "decremented",
    "one",
    "room",
    "assigned",
    "user",
    "moves",
    "let",
    "say",
    "room",
    "available",
    "name",
    "added",
    "waiting",
    "list",
    "waiting",
    "list",
    "rooms",
    "become",
    "empty",
    "assigned",
    "room",
    "room",
    "available",
    "user",
    "gives",
    "removed",
    "waiting",
    "list",
    "process",
    "ends",
    "request",
    "room",
    "input",
    "input",
    "requesting",
    "room",
    "two",
    "different",
    "outputs",
    "one",
    "room",
    "available",
    "getting",
    "room",
    "room",
    "count",
    "dictum",
    "nted",
    "roo",
    "available",
    "put",
    "waiting",
    "list",
    "input",
    "multiple",
    "output",
    "call",
    "finite",
    "state",
    "system",
    "confirming",
    "room",
    "customer",
    "want",
    "cancel",
    "room",
    "booking",
    "cancels",
    "room",
    "count",
    "incremented",
    "anyone",
    "waiting",
    "list",
    "resigned",
    "canceled",
    "room",
    "suppose",
    "user",
    "moved",
    "done",
    "reached",
    "agreement",
    "date",
    "handy",
    "vacates",
    "room",
    "count",
    "incremented",
    "archived",
    "added",
    "available",
    "room",
    "list",
    "everything",
    "happens",
    "sequence",
    "guys",
    "state",
    "transition",
    "technique",
    "really",
    "unique",
    "approach",
    "testing",
    "highly",
    "complex",
    "applications",
    "would",
    "increase",
    "text",
    "execution",
    "productivity",
    "without",
    "compromising",
    "test",
    "coverage",
    "last",
    "type",
    "black",
    "box",
    "technique",
    "use",
    "case",
    "testing",
    "first",
    "use",
    "case",
    "basically",
    "tool",
    "defining",
    "required",
    "user",
    "interaction",
    "depends",
    "user",
    "actions",
    "response",
    "system",
    "user",
    "actions",
    "technique",
    "completely",
    "functional",
    "testing",
    "approach",
    "programming",
    "skill",
    "required",
    "unlike",
    "techniques",
    "follow",
    "simple",
    "three",
    "steps",
    "perform",
    "use",
    "case",
    "testing",
    "first",
    "need",
    "identify",
    "possible",
    "scenarios",
    "use",
    "case",
    "scenario",
    "define",
    "test",
    "case",
    "condition",
    "test",
    "case",
    "executed",
    "lastly",
    "scenario",
    "need",
    "determine",
    "test",
    "data",
    "test",
    "example",
    "see",
    "atm",
    "system",
    "use",
    "case",
    "diagram",
    "representing",
    "typical",
    "atm",
    "system",
    "functionality",
    "use",
    "cases",
    "consider",
    "first",
    "thing",
    "operator",
    "responsible",
    "starting",
    "system",
    "shutting",
    "system",
    "responsible",
    "time",
    "customer",
    "customer",
    "comes",
    "atm",
    "starts",
    "whatever",
    "atm",
    "session",
    "begins",
    "either",
    "withdrawing",
    "money",
    "depositing",
    "money",
    "transferring",
    "money",
    "inquiring",
    "balance",
    "times",
    "quite",
    "possible",
    "performing",
    "might",
    "enter",
    "invalid",
    "pin",
    "try",
    "use",
    "keys",
    "add",
    "use",
    "case",
    "diagram",
    "transaction",
    "obviously",
    "happen",
    "bank",
    "also",
    "part",
    "use",
    "case",
    "diagram",
    "see",
    "programming",
    "wall",
    "imagine",
    "scenario",
    "create",
    "use",
    "case",
    "diagram",
    "use",
    "case",
    "diagram",
    "also",
    "one",
    "popular",
    "blackbox",
    "testing",
    "techniques",
    "next",
    "white",
    "box",
    "testing",
    "techniques",
    "white",
    "box",
    "testing",
    "also",
    "known",
    "structure",
    "based",
    "testing",
    "unlike",
    "black",
    "box",
    "testing",
    "method",
    "requires",
    "profound",
    "knowledge",
    "code",
    "includes",
    "testing",
    "structural",
    "part",
    "application",
    "main",
    "purpose",
    "white",
    "box",
    "techniques",
    "enhance",
    "security",
    "check",
    "flow",
    "input",
    "output",
    "application",
    "improve",
    "design",
    "usability",
    "like",
    "black",
    "box",
    "lot",
    "techniques",
    "command",
    "white",
    "box",
    "testing",
    "let",
    "discuss",
    "detail",
    "something",
    "called",
    "statement",
    "coverage",
    "line",
    "coverage",
    "technique",
    "every",
    "statement",
    "source",
    "code",
    "executed",
    "least",
    "line",
    "code",
    "tested",
    "helps",
    "pointing",
    "faulty",
    "good",
    "case",
    "flowchart",
    "every",
    "node",
    "traversed",
    "tested",
    "least",
    "basically",
    "entire",
    "statement",
    "coverage",
    "line",
    "coverage",
    "based",
    "assumption",
    "code",
    "covered",
    "better",
    "testing",
    "functionality",
    "however",
    "problem",
    "technique",
    "actually",
    "find",
    "false",
    "condition",
    "source",
    "code",
    "example",
    "certain",
    "set",
    "code",
    "takes",
    "value",
    "b",
    "added",
    "values",
    "put",
    "see",
    "c",
    "greater",
    "hundred",
    "print",
    "done",
    "statement",
    "line",
    "coverage",
    "checking",
    "exactly",
    "going",
    "check",
    "happens",
    "c",
    "hundred",
    "case",
    "b",
    "way",
    "added",
    "value",
    "less",
    "hundred",
    "next",
    "type",
    "testing",
    "technique",
    "comes",
    "nothing",
    "decision",
    "coverage",
    "branch",
    "coverage",
    "technique",
    "test",
    "cases",
    "designed",
    "branch",
    "decision",
    "points",
    "traversed",
    "least",
    "consider",
    "previous",
    "example",
    "earlier",
    "c",
    "greater",
    "100",
    "decision",
    "point",
    "c",
    "greater",
    "100",
    "print",
    "done",
    "checked",
    "statement",
    "coverage",
    "line",
    "coverage",
    "check",
    "happens",
    "c",
    "less",
    "100",
    "particular",
    "decision",
    "point",
    "two",
    "ways",
    "traversed",
    "indecision",
    "coverage",
    "branch",
    "coverage",
    "check",
    "possibilities",
    "c",
    "greater",
    "hundred",
    "print",
    "done",
    "l",
    "splendid",
    "spinning",
    "basically",
    "method",
    "helpful",
    "invalidate",
    "branches",
    "code",
    "make",
    "sure",
    "branch",
    "leads",
    "abnormal",
    "behavior",
    "obviously",
    "decision",
    "coverage",
    "includes",
    "much",
    "line",
    "coverage",
    "highly",
    "powerful",
    "statement",
    "coverage",
    "say",
    "line",
    "coverage",
    "next",
    "something",
    "called",
    "condition",
    "coverage",
    "predicate",
    "coverage",
    "condition",
    "coverage",
    "basically",
    "boolean",
    "expressions",
    "ensures",
    "whether",
    "individual",
    "boolean",
    "expressions",
    "covered",
    "evaluated",
    "true",
    "false",
    "simple",
    "code",
    "reads",
    "x",
    "value",
    "compares",
    "checks",
    "value",
    "0",
    "either",
    "one",
    "0",
    "prints",
    "0",
    "basically",
    "two",
    "conditions",
    "x",
    "equal",
    "0",
    "equal",
    "0",
    "test",
    "condition",
    "get",
    "true",
    "false",
    "values",
    "one",
    "possible",
    "test",
    "case",
    "one",
    "possible",
    "example",
    "consider",
    "two",
    "test",
    "cases",
    "test",
    "k",
    "1",
    "let",
    "consider",
    "x",
    "0",
    "random",
    "value",
    "0",
    "case",
    "print",
    "0",
    "right",
    "program",
    "x",
    "0",
    "similarly",
    "test",
    "case",
    "2",
    "put",
    "value",
    "x",
    "consider",
    "0",
    "prints",
    "0",
    "first",
    "test",
    "condition",
    "x",
    "evaluated",
    "true",
    "evaluated",
    "false",
    "second",
    "condition",
    "x",
    "evaluated",
    "false",
    "vice",
    "evaluated",
    "basically",
    "checking",
    "every",
    "individual",
    "boolean",
    "expression",
    "covered",
    "evaluated",
    "true",
    "false",
    "little",
    "bit",
    "extension",
    "condition",
    "coverage",
    "multiple",
    "condition",
    "coverage",
    "unlike",
    "condition",
    "coverage",
    "multiple",
    "condition",
    "coverage",
    "every",
    "possible",
    "combination",
    "true",
    "false",
    "conditions",
    "relate",
    "decision",
    "tested",
    "consider",
    "example",
    "condition",
    "coverage",
    "even",
    "four",
    "test",
    "cases",
    "first",
    "test",
    "case",
    "x",
    "0",
    "second",
    "disc",
    "case",
    "x",
    "equal",
    "0",
    "third",
    "test",
    "case",
    "equal",
    "0",
    "fourth",
    "test",
    "case",
    "evaluating",
    "false",
    "0",
    "four",
    "possible",
    "test",
    "cases",
    "write",
    "right",
    "possible",
    "test",
    "cases",
    "consider",
    "multiple",
    "condition",
    "coverage",
    "hence",
    "four",
    "test",
    "cases",
    "required",
    "two",
    "individual",
    "conditions",
    "similarly",
    "n",
    "conditions",
    "2",
    "power",
    "n",
    "test",
    "cases",
    "would",
    "required",
    "information",
    "white",
    "box",
    "techniques",
    "next",
    "experience",
    "based",
    "testing",
    "name",
    "indicates",
    "techniques",
    "logically",
    "drawn",
    "experience",
    "designing",
    "test",
    "cases",
    "test",
    "conditions",
    "based",
    "experience",
    "background",
    "skills",
    "person",
    "field",
    "testing",
    "basically",
    "tester",
    "makes",
    "use",
    "proper",
    "strategy",
    "documentation",
    "flying",
    "along",
    "gained",
    "experience",
    "let",
    "discuss",
    "techniques",
    "come",
    "experience",
    "based",
    "technique",
    "well",
    "4",
    "5",
    "session",
    "discuss",
    "important",
    "ones",
    "nothing",
    "exploratory",
    "testing",
    "error",
    "guessing",
    "first",
    "exploratory",
    "testing",
    "technique",
    "discovery",
    "investigation",
    "learning",
    "tester",
    "constantly",
    "studies",
    "analyzes",
    "product",
    "accordingly",
    "applies",
    "skills",
    "traits",
    "experience",
    "develop",
    "test",
    "strategy",
    "test",
    "cases",
    "perform",
    "necessary",
    "testing",
    "key",
    "words",
    "remember",
    "ha",
    "studies",
    "analyzes",
    "product",
    "according",
    "skills",
    "traits",
    "experience",
    "performed",
    "testing",
    "suitable",
    "technique",
    "testing",
    "team",
    "inadequate",
    "number",
    "specifications",
    "requirements",
    "severely",
    "limited",
    "time",
    "error",
    "guessing",
    "well",
    "simple",
    "technique",
    "guessing",
    "detecting",
    "potential",
    "defect",
    "bugs",
    "errors",
    "likely",
    "occur",
    "software",
    "product",
    "error",
    "guessing",
    "specific",
    "rules",
    "applied",
    "new",
    "rules",
    "conditions",
    "tester",
    "hope",
    "takes",
    "advantage",
    "tester",
    "skills",
    "intuition",
    "trades",
    "expertise",
    "find",
    "defects",
    "might",
    "identified",
    "blackbox",
    "techniques",
    "used",
    "technique",
    "totally",
    "depends",
    "testers",
    "experience",
    "experienced",
    "tester",
    "errors",
    "identify",
    "well",
    "another",
    "way",
    "actually",
    "perform",
    "error",
    "guessing",
    "regularly",
    "create",
    "defect",
    "failure",
    "list",
    "list",
    "used",
    "design",
    "test",
    "cases",
    "counter",
    "tagged",
    "box",
    "guys",
    "error",
    "guessing",
    "come",
    "end",
    "session",
    "software",
    "testing",
    "techniques",
    "one",
    "serves",
    "best",
    "specific",
    "type",
    "problems",
    "software",
    "use",
    "one",
    "others",
    "test",
    "coverage",
    "suffer",
    "guys",
    "remember",
    "choose",
    "suitable",
    "technique",
    "projects",
    "popular",
    "one",
    "conclude",
    "session",
    "learnt",
    "different",
    "testing",
    "methodologies",
    "techniques",
    "disadvantages",
    "advantages",
    "well",
    "thing",
    "one",
    "suitable",
    "methodology",
    "project",
    "types",
    "choice",
    "testing",
    "methodology",
    "technique",
    "actually",
    "depends",
    "type",
    "project",
    "working",
    "customer",
    "requirements",
    "schedule",
    "many",
    "factors",
    "goes",
    "techniques",
    "well",
    "choose",
    "wisely",
    "thank",
    "guys",
    "liked",
    "video",
    "please",
    "click",
    "like",
    "button",
    "doubts",
    "queries",
    "please",
    "post",
    "comment",
    "section",
    "get",
    "back",
    "meet",
    "next",
    "session",
    "guys",
    "hope",
    "enjoyed",
    "listening",
    "video",
    "please",
    "kind",
    "enough",
    "like",
    "comment",
    "doubts",
    "queries",
    "reply",
    "earliest",
    "look",
    "videos",
    "playlist",
    "subscribe",
    "edureka",
    "channel",
    "learn",
    "happy",
    "learning"
  ],
  "keywords": [
    "software",
    "testing",
    "important",
    "development",
    "best",
    "methodologies",
    "product",
    "highly",
    "guys",
    "session",
    "techniques",
    "let",
    "go",
    "get",
    "started",
    "different",
    "advantages",
    "disadvantages",
    "second",
    "discuss",
    "mean",
    "also",
    "come",
    "black",
    "box",
    "model",
    "white",
    "experience",
    "based",
    "hope",
    "every",
    "system",
    "bugs",
    "well",
    "true",
    "design",
    "many",
    "flaws",
    "example",
    "high",
    "line",
    "would",
    "control",
    "room",
    "due",
    "three",
    "simple",
    "find",
    "first",
    "errors",
    "makes",
    "quality",
    "lot",
    "effort",
    "time",
    "money",
    "tested",
    "sure",
    "offers",
    "business",
    "application",
    "required",
    "conditions",
    "way",
    "user",
    "customer",
    "obviously",
    "like",
    "said",
    "say",
    "methodology",
    "process",
    "used",
    "test",
    "particular",
    "make",
    "purpose",
    "complex",
    "requirements",
    "cases",
    "includes",
    "case",
    "release",
    "need",
    "proper",
    "suitable",
    "execution",
    "step",
    "waterfall",
    "v",
    "agile",
    "spiral",
    "something",
    "called",
    "rad",
    "nothing",
    "rapid",
    "programming",
    "one",
    "know",
    "models",
    "want",
    "thing",
    "done",
    "parallel",
    "developed",
    "center",
    "right",
    "popular",
    "known",
    "sequential",
    "cycle",
    "approach",
    "multiple",
    "name",
    "move",
    "next",
    "phase",
    "previous",
    "back",
    "requirement",
    "resources",
    "available",
    "see",
    "phases",
    "create",
    "define",
    "code",
    "components",
    "verification",
    "basically",
    "lastly",
    "defect",
    "main",
    "allows",
    "easy",
    "understand",
    "analysis",
    "talking",
    "much",
    "change",
    "changes",
    "new",
    "functionality",
    "steps",
    "end",
    "associated",
    "using",
    "perform",
    "helps",
    "possible",
    "defects",
    "divided",
    "coding",
    "usually",
    "another",
    "behavior",
    "individual",
    "use",
    "good",
    "small",
    "projects",
    "large",
    "incremental",
    "consider",
    "numbers",
    "cycles",
    "iterations",
    "add",
    "increment",
    "actually",
    "diagram",
    "build",
    "two",
    "added",
    "develop",
    "third",
    "point",
    "since",
    "type",
    "technique",
    "project",
    "call",
    "1",
    "iteration",
    "testers",
    "team",
    "planning",
    "easily",
    "unlike",
    "requires",
    "feedback",
    "risk",
    "given",
    "four",
    "remember",
    "really",
    "number",
    "modeling",
    "data",
    "tester",
    "check",
    "list",
    "equivalence",
    "input",
    "values",
    "classes",
    "value",
    "identify",
    "valid",
    "invalid",
    "part",
    "scenario",
    "10",
    "20",
    "30",
    "0",
    "comment",
    "2",
    "boundary",
    "greater",
    "boundaries",
    "ten",
    "decision",
    "table",
    "actions",
    "inputs",
    "output",
    "depends",
    "combination",
    "suppose",
    "submit",
    "button",
    "email",
    "message",
    "happens",
    "state",
    "transition",
    "count",
    "waiting",
    "coverage",
    "condition",
    "atm",
    "statement",
    "false",
    "c",
    "hundred",
    "print",
    "branch",
    "evaluated",
    "x",
    "equal",
    "skills",
    "error",
    "guessing"
  ]
}