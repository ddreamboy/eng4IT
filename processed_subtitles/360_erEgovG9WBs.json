{
  "text": "web development is the best job in the\nworld you build on a platform with\nnearly 5 billion daily active users all\nconnected together like the neurons of a\nglobal super intelligent brain A system\nthat can cure disease eliminate poverty\nAdvance science and stuff like that but\nmostly it's used to share memes create\nparasocial relationships amplify drama\nand most importantly make tons and tons\nof money if you want to get into it\nyou're going to need to know some stuff\nlike a lot of stuff in web development\n101 we'll take a look at 10 101\ndifferent concepts that you'll need to\nknow when building full stack web apps\nthis is the Internet it's a network of\nbillions of machines connected together\nwhat do you write to it like mail no a\nlot of people use it and communicate I\nguess they can communicate with NBC\nwriters and producers Allison can you\nexplain what internet is it was\nofficially born on January 1st 1983\nthanks to the establishment of the\nInternet Protocol Suite which\nstandardized the way these computers\ncommunicate the Internet Protocol is\nused to identify different computers on\nthe network by assigning each one of\nthem a unique IP address these computers\ncan then send data back and forth with\nthe transmission control protocol it\nbreaks data into a bunch of small\npackets kind of like puzzle pieces then\nsends them through a bunch of physical\ncomponents like fiber optic cables and\nmodems before they're put back together\nby the receiving computer you can think\nof the internet as Hardware but the\ninternet is not the same thing as the\nweb the worldwide web is like software\nthat sits on top of the internet where\npeople can access web pages with the\nhypertext transfer protocol what's\nspecial about it is that it gives every\npage of content a uniform resource\nlocator or URL humans typically use a\ntool tool called a web browser to access\na URL where it can be rendered visually\non their screen the browser is called\nthe client because it's consuming\ninformation but on the other end of that\nURL there's another computer called a\nserver it received an HTTP request from\nthe client then sent a response\ncontaining the webpage content these are\ncalled HTTP messages but more on that\nlater what's interesting is that every\nweb page has a unique domain name like\nfireship doio or example.com a domain\nname can be registered by anyone via a\nregistar whose accredit by ican a\nnonprofit responsible for overseeing\nname spaces on the internet when you\nnavigate to a domain in a browser it\ngets routed through the domain name\nsystem that Maps these names to an\nactual IP address on a server somewhere\nDNS is like the phone book of the\ninternet now when you look at a web page\nthe actual content you see is\nrepresented by hypertext markup language\nmost browsers have Dev tools where you\ncan inspect the structure of the HTML at\nany time to build your own web page\nyou'll want a text editor like vs code\nan HTML document is just a collect of\nelements where an element is an opening\nand closing tag with some content in the\nmiddle like a paragraph and heading it\nalso has elements that handle user input\nlike the select and input Elements which\nare used to build forms in addition\nelements can have one or more attributes\nto change their behavior for example an\ninput can have a type like text or\nnumber which the browser will render\ndifferently to collect the appropriate\nvalue but the element that puts the\nhyper text in HTML is the a tag or\nanchor it's a link that allows one page\nto navigate to to a different page based\non its URL these elements are nested\ntogether in a hierarchy to form the\ndocument object model or Dom from the\nroot element a web page is split into\ntwo parts the head contains invisible\ncontent like metadata and a title then\nwe have the body for the main content\nthat the end user actually sees the\nreason we wrap everything in tags is to\ngive browsers and Bots hints about the\nsemantic meaning of the web page this\nallows search engines to display results\nproperly and also helps with\naccessibility for devices like screen\nreaders that allow anybody regardless of\ndisability to enjoy the content my\ncomputer reads me the text Bro smash\nthat like button and subscribe one of\nthe most common elements you'll come\nacross is div or division to define a\nsection of the web page on its own a div\nmight not seem to do anything and\ncurrently produces this plain black and\nwhite website that begs the question how\ndo we make this website look cool the\nsecond language you'll need to learn as\na web developer is cascading stylesheets\nor css which allows you to change the\nappearance of the HTML elements one way\nto accomplish that is with an inline\nStyle using the style attribute on an\nelement the style itself contains a\ncollection of properties and values that\nchange the appearance of the element\nlike we might make the background color\nblack and the text color red what we've\ncreated here is an inline style that\nwill only be applied to this one element\nhowever CSS Cascades which means it can\nbe applied to multiple elements at the\nsame time providing better code\nreusability another option is to move\nour code into a style tag but to make\nthe code work we'll first need to define\na selector so it knows which elements to\nTarget a selector for example can Target\nall of the paragraph elements on the\npage but that's too broad we can be more\ngranular by defining a class that style\ncan then be applied to one or more\nelements with the class attribute what's\ninteresting though is that we now have\nclasses that apply different styles to\nthe same element CSS contains a bunch of\nspecificity rules that determine which\nstyles are relevant to an element in a\nway that's self-evident and elegant like\na benevolent elephant most often though\nwe don't use style tags but instead use\nan external style sheet which is linked\nto the web page in the head of the\ndocument when it comes to CS\nby far the most difficult thing to learn\nis layout and positioning think of every\nelement like a box the outside of that\nbox is wrapped with padding border and\nmargin the boxes then take up space on\nthe page from top to bottom some\nelements like heading have a display of\nblock by default which means they take\nup all available horizontal space other\nelements like image are displayed in\nline which means they can line up\nhorizontally side by side the problem is\nthat the default position is usually not\ndesirable it can be changed by\ncustomizing the position property on an\nelement relative positioning allows an\nelement to move a certain number of\npixels from its normal position absolute\npositioning is similar but the position\nvalues are relative to its nearest\nancestor and then we have fixed\npositioning which will keep an element\non the screen even as the user Scrolls\naway from it because it's fixed to the\nentire viewport changing the position of\nan element is one thing but one of the\nbiggest challenges web developers face\nis creating responsive layouts users can\naccess your web page from all kinds of\ndifferent screens and it should look\ngood on all of them CSS provides a bunch\nof different tools to to help make this\nhappen one of which is Media queries a\nmedia query allows you to get\ninformation about the device that's\nrendering the web page and apply\ndifferent styles accordingly but more\nimportantly it provides layout tools\nlike flexbox applying display Flex\nallows the parent to control the flow of\nthe children to easily create rows and\ncolumns for more complex layouts display\ngrid can be used to control multiple\nrows and columns at the same time now\nCSS is usually not considered a turing\ncomplete programming language on its own\nhowever it does have mechanisms like Cal\nto perform mathematical operations and\ncustom properties which are like\nvariables that you can reuse in multiple\nplaces vanilla CSS is rarely enough\nthough and many developers choose to\nextend it with tools like SAS that add\nadditional programmatic features on top\nof it and that brings us to the third\nlanguage you'll need to know as a web\ndeveloper JavaScript technically you\ndon't need JavaScript to build a website\nhowever most developers choose to use it\nto make the user interface more\ninteractive to run JavaScript code on a\nweb page open up a script tag then write\nsome JavaScript code inside of it the\nbrowser interprets the HTML from top to\nbottom and runs this code when it\nencounters it in the Dom in most cases\nJavaScript is written in a separate file\nthen referenced as the source on the\nscript tag usually it's preferred that\nthis code runs after the Dom content has\nloaded which can be accomplished with\nthe defer attribute JS is a big\ncomplicated programming language which\nis more formally known as ecmascript and\nis standardized in all major browsers\nthere are several different ways to\ndeclare a variable a variable that might\nbe reassigned in the future uses the let\nkeyword while a variable that can't be\nreassigned uses con it's a dynamically\ntyped language which means no type\nannotations are necessary that's not\nalways ideal so many developers choose\ntypescript as an alternative to add\nstatic typing on top of JavaScript now\none of the most common reasons you would\nuse JavaScript in the first place is to\nhandle events whenever the user does\nsomething on a web page the browser\nemits an event that you can listen to\nlike a click Mouse move form input\nchange and so on we can tap into these\nevents using browser apis like document\nwhich in this case provides a method\ncalled query selector that allows us to\ngrab an element El with a CSS selector\nonce we have that element set as a\nvariable we can then assign an event\nlistener to it an event listener is a\nfunction that will be called or\nre-executed anytime the button is\nclicked the language has a variety of\nbuilt-in data structures like an array\nto represent a collection of values but\nthe most fundamental data structure is\nthe object also commonly called a\ndictionary or hashmap anything that's\nnot a primitive type like a string or\nnumber inherits its base functionality\nfrom the object class it relies on a\ntechnique called prototypal inheritance\nwhere an object can be cloned multiple\ntimes to create a chain of ancestors\nwhere the child inherits the properties\nand methods of its ancestors this is\ndifferent from class-based inheritance\nwhich is kind of confusing because\nJavaScript also supports classes however\nthese classes are just syntactic sugar\nfor prototypal inheritance but now we're\ngetting a little too low level most\ndevelopers don't ever want to have to\ntouch the word prototype so what we do\ninstead is use a front-end framework\nlike react view spelt angular and so on\nall of these Frameworks do the same\nthing in a slightly different way which\nis represent the UI as a tree of\ncomponents a component can encapsulate\nHTML CSS and JavaScript into a format\nthat looks like its own custom HTML\nelement most importantly they produce\ndeclarative code that describes exactly\nwhat the UI does and that's much easier\nto work with than imperative code that\nyou would normally get with just plain\nvanilla JavaScript at this point we've\ntaken a look at the front end stack but\nnow we need to switch gears to the back\nend starting with node.js which is a\nserers side runtime based on JavaScript\nyou can run serers side code for web\napplications and all kinds of different\nlanguages but node is the most popular\nbecause it relies on the same language\nas the browser it's also based on the\nsame V8 engine that powers the Chromium\nbrowser to run code in a single-threaded\nnon-blocking event Loop this allows node\nto handle many simultaneous connections\nquickly and efficiently in addition it\nallows developers to share work remotely\nthanks to the node package manager a\npackage is also called a module which is\njust a file that contains some code with\nan export statement so it can be used in\nanother file the file can consume a\nmodule with an import statement but now\nwe need to think about how to deliver\nthe actual website from the server to\nthe client the classic option is serers\nside rendering in this approach the\nclient will make a get request for a\ncertain URL every request has an HTTP\nmethod and git means you want to\nretrieve data from a server as opposed\nto methods like post and Patch where the\nintent is to modify data the server\nreceives the request and then generates\nall the HTML on the server and sends it\nback to the client as a response the\nresponse contains a status code like 200\nfor success or levels 4 and 500 for\nerrors for example if the web page\ndoesn't exist the server will return a\n404 status code which you've likely seen\nbefore as a web user SSR is extremely\npopular but in some cases it may not be\nfast enough another approach is the\nsingle page application with this\napproach the server only renders a shell\nfor the root URL then JavaScript handles\nthe rendering for all other pages on the\nwebsite the HTML is generated almost\nentirely client side in the browser\nmaking the website feel more like a\nnative iOS or Android app when the app\nneeds more data it still makes an HTTP\nrequest but only requests a minimal\namount of data as Json which is called a\ndata interchange format that can be\nunderstood by any programming language\nthis can result in a great user\nexperience however it can be very\ndifficult for Bots like search engines\nand social media link previews to\nunderstand content on the page this led\nto another rendering strategy called\nStatic site generation in this case\nevery web page on the site is uploaded\nto a server in advance allowing Bots to\nget the information they need a frontend\nJavaScript framework usually takes over\nto hydrate the HTML to make it fully\ninteractive and behave like a single\npage application performance is\nextremely important and you'll want to\nuse tools like Lighthouse to optimize\nmetrics like first contentful paint and\ntime to interactive now to implement one\nof these patterns most developers will\nuse a full stack framework like nextjs\nRuby on Rails laravel and so on they\nabstract away many of the more tedious\nthings developers don't want to deal\nwith one of which is module bundlers\nwhich are tools like webpack and that\ntake all of your JavaScript CSS and HTML\nand package it in a way that can\nactually work in a browser they might\nalso provide a linter like es lint to\nwarn you when your code doesn't follow\nthe proper Style Guidelines oh and I\nalmost forgot you are definitely going\nto need a database to build a full stack\nweb application because you need\nsomewhere to store your data like data\nabout your users but in order to get\nthat data you'll need to give users a\nway to log in Via a process called user\nauthentication now before you deploy\nyour code you'll need to test it with a\nweb server there are tools like engine X\nand A pchy to create an HTTP server but\nyour framework will likely do this for\nyou by serving the files on Local Host\nwhich makes your own IP address behave\nlike a remote web server when it comes\ntime to deploy you'll likely use a big\ncloud provider like AWS most apps are\ncontainerized with Docker making them\neasy to scale Up and Down based on the\namount of traffic that they receive\nthere are many tools out there that\nfunction as a platform as a service to\nmanage this infrastructure for you in\nexchange for your money or if you don't\nwant to get locked in with a giant Tech\nCorporation you might host your app on a\ndecent calized blockchain with web 3 and\nthat's about 1% of what you'll need to\nknow to call yourself a full stack web\ndeveloper if that seems overwhelming\ndon't worry too much almost nobody knows\nwhat the hell they're doing and we all\njust use Google to figure things out on\nthe Fly congratulations you just passed\nweb development 101 thanks for watching\nand I will see you in the next one\n",
  "words": [
    "web",
    "development",
    "best",
    "job",
    "world",
    "build",
    "platform",
    "nearly",
    "5",
    "billion",
    "daily",
    "active",
    "users",
    "connected",
    "together",
    "like",
    "neurons",
    "global",
    "super",
    "intelligent",
    "brain",
    "system",
    "cure",
    "disease",
    "eliminate",
    "poverty",
    "advance",
    "science",
    "stuff",
    "like",
    "mostly",
    "used",
    "share",
    "memes",
    "create",
    "parasocial",
    "relationships",
    "amplify",
    "drama",
    "importantly",
    "make",
    "tons",
    "tons",
    "money",
    "want",
    "get",
    "going",
    "need",
    "know",
    "stuff",
    "like",
    "lot",
    "stuff",
    "web",
    "development",
    "101",
    "take",
    "look",
    "10",
    "101",
    "different",
    "concepts",
    "need",
    "know",
    "building",
    "full",
    "stack",
    "web",
    "apps",
    "internet",
    "network",
    "billions",
    "machines",
    "connected",
    "together",
    "write",
    "like",
    "mail",
    "lot",
    "people",
    "use",
    "communicate",
    "guess",
    "communicate",
    "nbc",
    "writers",
    "producers",
    "allison",
    "explain",
    "internet",
    "officially",
    "born",
    "january",
    "1st",
    "1983",
    "thanks",
    "establishment",
    "internet",
    "protocol",
    "suite",
    "standardized",
    "way",
    "computers",
    "communicate",
    "internet",
    "protocol",
    "used",
    "identify",
    "different",
    "computers",
    "network",
    "assigning",
    "one",
    "unique",
    "ip",
    "address",
    "computers",
    "send",
    "data",
    "back",
    "forth",
    "transmission",
    "control",
    "protocol",
    "breaks",
    "data",
    "bunch",
    "small",
    "packets",
    "kind",
    "like",
    "puzzle",
    "pieces",
    "sends",
    "bunch",
    "physical",
    "components",
    "like",
    "fiber",
    "optic",
    "cables",
    "modems",
    "put",
    "back",
    "together",
    "receiving",
    "computer",
    "think",
    "internet",
    "hardware",
    "internet",
    "thing",
    "web",
    "worldwide",
    "web",
    "like",
    "software",
    "sits",
    "top",
    "internet",
    "people",
    "access",
    "web",
    "pages",
    "hypertext",
    "transfer",
    "protocol",
    "special",
    "gives",
    "every",
    "page",
    "content",
    "uniform",
    "resource",
    "locator",
    "url",
    "humans",
    "typically",
    "use",
    "tool",
    "tool",
    "called",
    "web",
    "browser",
    "access",
    "url",
    "rendered",
    "visually",
    "screen",
    "browser",
    "called",
    "client",
    "consuming",
    "information",
    "end",
    "url",
    "another",
    "computer",
    "called",
    "server",
    "received",
    "http",
    "request",
    "client",
    "sent",
    "response",
    "containing",
    "webpage",
    "content",
    "called",
    "http",
    "messages",
    "later",
    "interesting",
    "every",
    "web",
    "page",
    "unique",
    "domain",
    "name",
    "like",
    "fireship",
    "doio",
    "domain",
    "name",
    "registered",
    "anyone",
    "via",
    "registar",
    "whose",
    "accredit",
    "ican",
    "nonprofit",
    "responsible",
    "overseeing",
    "name",
    "spaces",
    "internet",
    "navigate",
    "domain",
    "browser",
    "gets",
    "routed",
    "domain",
    "name",
    "system",
    "maps",
    "names",
    "actual",
    "ip",
    "address",
    "server",
    "somewhere",
    "dns",
    "like",
    "phone",
    "book",
    "internet",
    "look",
    "web",
    "page",
    "actual",
    "content",
    "see",
    "represented",
    "hypertext",
    "markup",
    "language",
    "browsers",
    "dev",
    "tools",
    "inspect",
    "structure",
    "html",
    "time",
    "build",
    "web",
    "page",
    "want",
    "text",
    "editor",
    "like",
    "vs",
    "code",
    "html",
    "document",
    "collect",
    "elements",
    "element",
    "opening",
    "closing",
    "tag",
    "content",
    "middle",
    "like",
    "paragraph",
    "heading",
    "also",
    "elements",
    "handle",
    "user",
    "input",
    "like",
    "select",
    "input",
    "elements",
    "used",
    "build",
    "forms",
    "addition",
    "elements",
    "one",
    "attributes",
    "change",
    "behavior",
    "example",
    "input",
    "type",
    "like",
    "text",
    "number",
    "browser",
    "render",
    "differently",
    "collect",
    "appropriate",
    "value",
    "element",
    "puts",
    "hyper",
    "text",
    "html",
    "tag",
    "anchor",
    "link",
    "allows",
    "one",
    "page",
    "navigate",
    "different",
    "page",
    "based",
    "url",
    "elements",
    "nested",
    "together",
    "hierarchy",
    "form",
    "document",
    "object",
    "model",
    "dom",
    "root",
    "element",
    "web",
    "page",
    "split",
    "two",
    "parts",
    "head",
    "contains",
    "invisible",
    "content",
    "like",
    "metadata",
    "title",
    "body",
    "main",
    "content",
    "end",
    "user",
    "actually",
    "sees",
    "reason",
    "wrap",
    "everything",
    "tags",
    "give",
    "browsers",
    "bots",
    "hints",
    "semantic",
    "meaning",
    "web",
    "page",
    "allows",
    "search",
    "engines",
    "display",
    "results",
    "properly",
    "also",
    "helps",
    "accessibility",
    "devices",
    "like",
    "screen",
    "readers",
    "allow",
    "anybody",
    "regardless",
    "disability",
    "enjoy",
    "content",
    "computer",
    "reads",
    "text",
    "bro",
    "smash",
    "like",
    "button",
    "subscribe",
    "one",
    "common",
    "elements",
    "come",
    "across",
    "div",
    "division",
    "define",
    "section",
    "web",
    "page",
    "div",
    "might",
    "seem",
    "anything",
    "currently",
    "produces",
    "plain",
    "black",
    "white",
    "website",
    "begs",
    "question",
    "make",
    "website",
    "look",
    "cool",
    "second",
    "language",
    "need",
    "learn",
    "web",
    "developer",
    "cascading",
    "stylesheets",
    "css",
    "allows",
    "change",
    "appearance",
    "html",
    "elements",
    "one",
    "way",
    "accomplish",
    "inline",
    "style",
    "using",
    "style",
    "attribute",
    "element",
    "style",
    "contains",
    "collection",
    "properties",
    "values",
    "change",
    "appearance",
    "element",
    "like",
    "might",
    "make",
    "background",
    "color",
    "black",
    "text",
    "color",
    "red",
    "created",
    "inline",
    "style",
    "applied",
    "one",
    "element",
    "however",
    "css",
    "cascades",
    "means",
    "applied",
    "multiple",
    "elements",
    "time",
    "providing",
    "better",
    "code",
    "reusability",
    "another",
    "option",
    "move",
    "code",
    "style",
    "tag",
    "make",
    "code",
    "work",
    "first",
    "need",
    "define",
    "selector",
    "knows",
    "elements",
    "target",
    "selector",
    "example",
    "target",
    "paragraph",
    "elements",
    "page",
    "broad",
    "granular",
    "defining",
    "class",
    "style",
    "applied",
    "one",
    "elements",
    "class",
    "attribute",
    "interesting",
    "though",
    "classes",
    "apply",
    "different",
    "styles",
    "element",
    "css",
    "contains",
    "bunch",
    "specificity",
    "rules",
    "determine",
    "styles",
    "relevant",
    "element",
    "way",
    "elegant",
    "like",
    "benevolent",
    "elephant",
    "often",
    "though",
    "use",
    "style",
    "tags",
    "instead",
    "use",
    "external",
    "style",
    "sheet",
    "linked",
    "web",
    "page",
    "head",
    "document",
    "comes",
    "cs",
    "far",
    "difficult",
    "thing",
    "learn",
    "layout",
    "positioning",
    "think",
    "every",
    "element",
    "like",
    "box",
    "outside",
    "box",
    "wrapped",
    "padding",
    "border",
    "margin",
    "boxes",
    "take",
    "space",
    "page",
    "top",
    "bottom",
    "elements",
    "like",
    "heading",
    "display",
    "block",
    "default",
    "means",
    "take",
    "available",
    "horizontal",
    "space",
    "elements",
    "like",
    "image",
    "displayed",
    "line",
    "means",
    "line",
    "horizontally",
    "side",
    "side",
    "problem",
    "default",
    "position",
    "usually",
    "desirable",
    "changed",
    "customizing",
    "position",
    "property",
    "element",
    "relative",
    "positioning",
    "allows",
    "element",
    "move",
    "certain",
    "number",
    "pixels",
    "normal",
    "position",
    "absolute",
    "positioning",
    "similar",
    "position",
    "values",
    "relative",
    "nearest",
    "ancestor",
    "fixed",
    "positioning",
    "keep",
    "element",
    "screen",
    "even",
    "user",
    "scrolls",
    "away",
    "fixed",
    "entire",
    "viewport",
    "changing",
    "position",
    "element",
    "one",
    "thing",
    "one",
    "biggest",
    "challenges",
    "web",
    "developers",
    "face",
    "creating",
    "responsive",
    "layouts",
    "users",
    "access",
    "web",
    "page",
    "kinds",
    "different",
    "screens",
    "look",
    "good",
    "css",
    "provides",
    "bunch",
    "different",
    "tools",
    "help",
    "make",
    "happen",
    "one",
    "media",
    "queries",
    "media",
    "query",
    "allows",
    "get",
    "information",
    "device",
    "rendering",
    "web",
    "page",
    "apply",
    "different",
    "styles",
    "accordingly",
    "importantly",
    "provides",
    "layout",
    "tools",
    "like",
    "flexbox",
    "applying",
    "display",
    "flex",
    "allows",
    "parent",
    "control",
    "flow",
    "children",
    "easily",
    "create",
    "rows",
    "columns",
    "complex",
    "layouts",
    "display",
    "grid",
    "used",
    "control",
    "multiple",
    "rows",
    "columns",
    "time",
    "css",
    "usually",
    "considered",
    "turing",
    "complete",
    "programming",
    "language",
    "however",
    "mechanisms",
    "like",
    "cal",
    "perform",
    "mathematical",
    "operations",
    "custom",
    "properties",
    "like",
    "variables",
    "reuse",
    "multiple",
    "places",
    "vanilla",
    "css",
    "rarely",
    "enough",
    "though",
    "many",
    "developers",
    "choose",
    "extend",
    "tools",
    "like",
    "sas",
    "add",
    "additional",
    "programmatic",
    "features",
    "top",
    "brings",
    "us",
    "third",
    "language",
    "need",
    "know",
    "web",
    "developer",
    "javascript",
    "technically",
    "need",
    "javascript",
    "build",
    "website",
    "however",
    "developers",
    "choose",
    "use",
    "make",
    "user",
    "interface",
    "interactive",
    "run",
    "javascript",
    "code",
    "web",
    "page",
    "open",
    "script",
    "tag",
    "write",
    "javascript",
    "code",
    "inside",
    "browser",
    "interprets",
    "html",
    "top",
    "bottom",
    "runs",
    "code",
    "encounters",
    "dom",
    "cases",
    "javascript",
    "written",
    "separate",
    "file",
    "referenced",
    "source",
    "script",
    "tag",
    "usually",
    "preferred",
    "code",
    "runs",
    "dom",
    "content",
    "loaded",
    "accomplished",
    "defer",
    "attribute",
    "js",
    "big",
    "complicated",
    "programming",
    "language",
    "formally",
    "known",
    "ecmascript",
    "standardized",
    "major",
    "browsers",
    "several",
    "different",
    "ways",
    "declare",
    "variable",
    "variable",
    "might",
    "reassigned",
    "future",
    "uses",
    "let",
    "keyword",
    "variable",
    "ca",
    "reassigned",
    "uses",
    "con",
    "dynamically",
    "typed",
    "language",
    "means",
    "type",
    "annotations",
    "necessary",
    "always",
    "ideal",
    "many",
    "developers",
    "choose",
    "typescript",
    "alternative",
    "add",
    "static",
    "typing",
    "top",
    "javascript",
    "one",
    "common",
    "reasons",
    "would",
    "use",
    "javascript",
    "first",
    "place",
    "handle",
    "events",
    "whenever",
    "user",
    "something",
    "web",
    "page",
    "browser",
    "emits",
    "event",
    "listen",
    "like",
    "click",
    "mouse",
    "move",
    "form",
    "input",
    "change",
    "tap",
    "events",
    "using",
    "browser",
    "apis",
    "like",
    "document",
    "case",
    "provides",
    "method",
    "called",
    "query",
    "selector",
    "allows",
    "us",
    "grab",
    "element",
    "el",
    "css",
    "selector",
    "element",
    "set",
    "variable",
    "assign",
    "event",
    "listener",
    "event",
    "listener",
    "function",
    "called",
    "anytime",
    "button",
    "clicked",
    "language",
    "variety",
    "data",
    "structures",
    "like",
    "array",
    "represent",
    "collection",
    "values",
    "fundamental",
    "data",
    "structure",
    "object",
    "also",
    "commonly",
    "called",
    "dictionary",
    "hashmap",
    "anything",
    "primitive",
    "type",
    "like",
    "string",
    "number",
    "inherits",
    "base",
    "functionality",
    "object",
    "class",
    "relies",
    "technique",
    "called",
    "prototypal",
    "inheritance",
    "object",
    "cloned",
    "multiple",
    "times",
    "create",
    "chain",
    "ancestors",
    "child",
    "inherits",
    "properties",
    "methods",
    "ancestors",
    "different",
    "inheritance",
    "kind",
    "confusing",
    "javascript",
    "also",
    "supports",
    "classes",
    "however",
    "classes",
    "syntactic",
    "sugar",
    "prototypal",
    "inheritance",
    "getting",
    "little",
    "low",
    "level",
    "developers",
    "ever",
    "want",
    "touch",
    "word",
    "prototype",
    "instead",
    "use",
    "framework",
    "like",
    "react",
    "view",
    "spelt",
    "angular",
    "frameworks",
    "thing",
    "slightly",
    "different",
    "way",
    "represent",
    "ui",
    "tree",
    "components",
    "component",
    "encapsulate",
    "html",
    "css",
    "javascript",
    "format",
    "looks",
    "like",
    "custom",
    "html",
    "element",
    "importantly",
    "produce",
    "declarative",
    "code",
    "describes",
    "exactly",
    "ui",
    "much",
    "easier",
    "work",
    "imperative",
    "code",
    "would",
    "normally",
    "get",
    "plain",
    "vanilla",
    "javascript",
    "point",
    "taken",
    "look",
    "front",
    "end",
    "stack",
    "need",
    "switch",
    "gears",
    "back",
    "end",
    "starting",
    "serers",
    "side",
    "runtime",
    "based",
    "javascript",
    "run",
    "serers",
    "side",
    "code",
    "web",
    "applications",
    "kinds",
    "different",
    "languages",
    "node",
    "popular",
    "relies",
    "language",
    "browser",
    "also",
    "based",
    "v8",
    "engine",
    "powers",
    "chromium",
    "browser",
    "run",
    "code",
    "event",
    "loop",
    "allows",
    "node",
    "handle",
    "many",
    "simultaneous",
    "connections",
    "quickly",
    "efficiently",
    "addition",
    "allows",
    "developers",
    "share",
    "work",
    "remotely",
    "thanks",
    "node",
    "package",
    "manager",
    "package",
    "also",
    "called",
    "module",
    "file",
    "contains",
    "code",
    "export",
    "statement",
    "used",
    "another",
    "file",
    "file",
    "consume",
    "module",
    "import",
    "statement",
    "need",
    "think",
    "deliver",
    "actual",
    "website",
    "server",
    "client",
    "classic",
    "option",
    "serers",
    "side",
    "rendering",
    "approach",
    "client",
    "make",
    "get",
    "request",
    "certain",
    "url",
    "every",
    "request",
    "http",
    "method",
    "git",
    "means",
    "want",
    "retrieve",
    "data",
    "server",
    "opposed",
    "methods",
    "like",
    "post",
    "patch",
    "intent",
    "modify",
    "data",
    "server",
    "receives",
    "request",
    "generates",
    "html",
    "server",
    "sends",
    "back",
    "client",
    "response",
    "response",
    "contains",
    "status",
    "code",
    "like",
    "200",
    "success",
    "levels",
    "4",
    "500",
    "errors",
    "example",
    "web",
    "page",
    "exist",
    "server",
    "return",
    "404",
    "status",
    "code",
    "likely",
    "seen",
    "web",
    "user",
    "ssr",
    "extremely",
    "popular",
    "cases",
    "may",
    "fast",
    "enough",
    "another",
    "approach",
    "single",
    "page",
    "application",
    "approach",
    "server",
    "renders",
    "shell",
    "root",
    "url",
    "javascript",
    "handles",
    "rendering",
    "pages",
    "website",
    "html",
    "generated",
    "almost",
    "entirely",
    "client",
    "side",
    "browser",
    "making",
    "website",
    "feel",
    "like",
    "native",
    "ios",
    "android",
    "app",
    "app",
    "needs",
    "data",
    "still",
    "makes",
    "http",
    "request",
    "requests",
    "minimal",
    "amount",
    "data",
    "json",
    "called",
    "data",
    "interchange",
    "format",
    "understood",
    "programming",
    "language",
    "result",
    "great",
    "user",
    "experience",
    "however",
    "difficult",
    "bots",
    "like",
    "search",
    "engines",
    "social",
    "media",
    "link",
    "previews",
    "understand",
    "content",
    "page",
    "led",
    "another",
    "rendering",
    "strategy",
    "called",
    "static",
    "site",
    "generation",
    "case",
    "every",
    "web",
    "page",
    "site",
    "uploaded",
    "server",
    "advance",
    "allowing",
    "bots",
    "get",
    "information",
    "need",
    "frontend",
    "javascript",
    "framework",
    "usually",
    "takes",
    "hydrate",
    "html",
    "make",
    "fully",
    "interactive",
    "behave",
    "like",
    "single",
    "page",
    "application",
    "performance",
    "extremely",
    "important",
    "want",
    "use",
    "tools",
    "like",
    "lighthouse",
    "optimize",
    "metrics",
    "like",
    "first",
    "contentful",
    "paint",
    "time",
    "interactive",
    "implement",
    "one",
    "patterns",
    "developers",
    "use",
    "full",
    "stack",
    "framework",
    "like",
    "nextjs",
    "ruby",
    "rails",
    "laravel",
    "abstract",
    "away",
    "many",
    "tedious",
    "things",
    "developers",
    "want",
    "deal",
    "one",
    "module",
    "bundlers",
    "tools",
    "like",
    "webpack",
    "take",
    "javascript",
    "css",
    "html",
    "package",
    "way",
    "actually",
    "work",
    "browser",
    "might",
    "also",
    "provide",
    "linter",
    "like",
    "es",
    "lint",
    "warn",
    "code",
    "follow",
    "proper",
    "style",
    "guidelines",
    "oh",
    "almost",
    "forgot",
    "definitely",
    "going",
    "need",
    "database",
    "build",
    "full",
    "stack",
    "web",
    "application",
    "need",
    "somewhere",
    "store",
    "data",
    "like",
    "data",
    "users",
    "order",
    "get",
    "data",
    "need",
    "give",
    "users",
    "way",
    "log",
    "via",
    "process",
    "called",
    "user",
    "authentication",
    "deploy",
    "code",
    "need",
    "test",
    "web",
    "server",
    "tools",
    "like",
    "engine",
    "x",
    "pchy",
    "create",
    "http",
    "server",
    "framework",
    "likely",
    "serving",
    "files",
    "local",
    "host",
    "makes",
    "ip",
    "address",
    "behave",
    "like",
    "remote",
    "web",
    "server",
    "comes",
    "time",
    "deploy",
    "likely",
    "use",
    "big",
    "cloud",
    "provider",
    "like",
    "aws",
    "apps",
    "containerized",
    "docker",
    "making",
    "easy",
    "scale",
    "based",
    "amount",
    "traffic",
    "receive",
    "many",
    "tools",
    "function",
    "platform",
    "service",
    "manage",
    "infrastructure",
    "exchange",
    "money",
    "want",
    "get",
    "locked",
    "giant",
    "tech",
    "corporation",
    "might",
    "host",
    "app",
    "decent",
    "calized",
    "blockchain",
    "web",
    "3",
    "1",
    "need",
    "know",
    "call",
    "full",
    "stack",
    "web",
    "developer",
    "seems",
    "overwhelming",
    "worry",
    "much",
    "almost",
    "nobody",
    "knows",
    "hell",
    "use",
    "google",
    "figure",
    "things",
    "fly",
    "congratulations",
    "passed",
    "web",
    "development",
    "101",
    "thanks",
    "watching",
    "see",
    "next",
    "one"
  ],
  "keywords": [
    "web",
    "development",
    "build",
    "platform",
    "users",
    "connected",
    "together",
    "like",
    "system",
    "advance",
    "stuff",
    "used",
    "share",
    "create",
    "importantly",
    "make",
    "tons",
    "money",
    "want",
    "get",
    "going",
    "need",
    "know",
    "lot",
    "101",
    "take",
    "look",
    "different",
    "full",
    "stack",
    "apps",
    "internet",
    "network",
    "write",
    "people",
    "use",
    "communicate",
    "thanks",
    "protocol",
    "standardized",
    "way",
    "computers",
    "one",
    "unique",
    "ip",
    "address",
    "data",
    "back",
    "control",
    "bunch",
    "kind",
    "sends",
    "components",
    "computer",
    "think",
    "thing",
    "top",
    "access",
    "pages",
    "hypertext",
    "every",
    "page",
    "content",
    "url",
    "tool",
    "called",
    "browser",
    "screen",
    "client",
    "information",
    "end",
    "another",
    "server",
    "http",
    "request",
    "response",
    "interesting",
    "domain",
    "name",
    "via",
    "navigate",
    "actual",
    "somewhere",
    "see",
    "language",
    "browsers",
    "tools",
    "structure",
    "html",
    "time",
    "text",
    "code",
    "document",
    "collect",
    "elements",
    "element",
    "tag",
    "paragraph",
    "heading",
    "also",
    "handle",
    "user",
    "input",
    "addition",
    "change",
    "example",
    "type",
    "number",
    "link",
    "allows",
    "based",
    "form",
    "object",
    "dom",
    "root",
    "head",
    "contains",
    "actually",
    "tags",
    "give",
    "bots",
    "search",
    "engines",
    "display",
    "button",
    "common",
    "div",
    "define",
    "might",
    "anything",
    "plain",
    "black",
    "website",
    "learn",
    "developer",
    "css",
    "appearance",
    "inline",
    "style",
    "using",
    "attribute",
    "collection",
    "properties",
    "values",
    "color",
    "applied",
    "however",
    "means",
    "multiple",
    "option",
    "move",
    "work",
    "first",
    "selector",
    "knows",
    "target",
    "class",
    "though",
    "classes",
    "apply",
    "styles",
    "instead",
    "comes",
    "difficult",
    "layout",
    "positioning",
    "box",
    "space",
    "bottom",
    "default",
    "line",
    "side",
    "position",
    "usually",
    "relative",
    "certain",
    "fixed",
    "away",
    "developers",
    "layouts",
    "kinds",
    "provides",
    "media",
    "query",
    "rendering",
    "rows",
    "columns",
    "programming",
    "custom",
    "vanilla",
    "enough",
    "many",
    "choose",
    "add",
    "us",
    "javascript",
    "interactive",
    "run",
    "script",
    "runs",
    "cases",
    "file",
    "big",
    "variable",
    "reassigned",
    "uses",
    "static",
    "would",
    "events",
    "event",
    "case",
    "method",
    "listener",
    "function",
    "represent",
    "inherits",
    "relies",
    "prototypal",
    "inheritance",
    "ancestors",
    "methods",
    "framework",
    "ui",
    "format",
    "much",
    "serers",
    "node",
    "popular",
    "engine",
    "package",
    "module",
    "statement",
    "approach",
    "status",
    "likely",
    "extremely",
    "single",
    "application",
    "almost",
    "making",
    "app",
    "makes",
    "amount",
    "site",
    "behave",
    "things",
    "deploy",
    "host"
  ]
}