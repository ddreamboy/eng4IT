{
  "text": "if you have watched my convolutional\nneural network video\nyou would have learned that cnn out of\nthe box\nare not scale or rotation invariant\nwhich means let's say you are trying to\nclassify roses and tulips\nand the training set contains the proper\nclear images of these two flowers\nafter training your cnn when you supply\na rotated image of a rose for the\nclassification\ncnn might not perform better and to\nhandle this problem we use a technique\ncalled\ndata augmentation in data augmentation\nfrom your existing training samples you\ntry to generate new samples\nfor example i have a picture of this\nflower here\nand my original data set contains only\nlike one type of\nflower image like a clear unrotated\nimage\nwhat i can do is i can apply now several\ntransformations such as horizontal flip\nrotation scaling contrast and i can\ngenerate new samples so in this image i\ngenerated four new samples out of one\nand this technique is very effective in\nthis video\nwe will do a flower classification\nusing cnn we will see how the model\noverfits the data\nand how we can use data augmentation to\ngenerate\nnew samples and increase the accuracy of\nour model\ni'm going to use a tensorflow's flower\ndata set for this video\nand i have used uh the standard\ntensorflow tutorial\nuh from here from their website uh but\nthis\nwas a little complicated so i have tried\nto simplify it\nso in my notebook here first i have\nimported\nall important libraries we are using pil\nwhich is an\nimage library in python okay so the\nfirst thing we are going to do\nis we will be downloading the flowers\ndata set\nfrom google website so google's website\nhas\nthis zip file which contains uh\nphotos of different flowers and\ntensorflow has uh this\nfunction called a get file so you're\ngetting this file you're specifying a\ndata set url\nhere you are getting this file into a\nfolder called flower photos\nand the cache directory is the directory\nwhere\nyou want to save this data set so i want\nto save it in my\ncurrent directory where i am having this\nnotebook\nso i have therefore supply dot here\nif you want a different directory you\ncan do\nsomething like see whatever data\nmy image images you know so just specify\nthe whole path\ni'm just going to use the current part\nand until true means\nuh this is a zip file so unzip it\nokay and then you get this data\ndirectory\nvariable back\nokay so for you it will take some time i\nalready had this images downloaded\nthat's why\nit worked pretty fast for me so let's\ncheck what data directory means\nokay data directory means in my current\ndirectory which is dot\ni will now have a data set folder inside\nthe draft if\ni will have flower photos which will\ncontain all my pictures so let's check\nthat folder\nso my current folder is now having this\ndata set folder\nthis zip tz file\nis present here and then i have my\nflower photo so if i look at my flower\nphotos\ni have five type of different flowers so\nthis is a daisy flower you can see i'll\njust\nmake it bigger you see there are variety\nof pictures actually\nsee there's a woman having the flower\nand there is\nlike it's like variety of pictures\nyou're having then similarly\nroses you're having so many different\nroses if you look at these images\nsays 641 rose images total\nokay and overall this is my 250 megabyte\naround 250 megabyte or let me just\ncheck it's even more yeah 220 megabyte\nof data set so make sure you have enough\nspace on your hard disk\nafter these photos are downloaded\nnow i am going to convert this data\ndirectory\ninto apart lip so there is a model in\npython called pathlib\nand this will allow us to do certain\nthings in easier way because\nwe will be going over all these\nflower images one by one and read them\ninto numpy array\nand for that this path live will be\nuseful so i'll tell you how it will be\nuseful\nso first i converted this data directory\ninto apart lib\nso now it looks like this so it's it's\nbasically your\npath but it's a windows path object and\nonce you have that\nyou can do things like this so you can\nsay glob give me\nall the images which has extension jpg\nso when you do that it will recursively\ngo through\nall the directories and subdirectories\nand give you a list of\nall these jpg files so we'll need that\nduring our model training\nthat's why we converted it into a path\nlib\nso now let me quickly count these images\nso\ni have all these images and if i do\nlength of this images\nsee i have three six seven zero so\nthat's my data set that's my\ntotal number of images and now\ni will just look at roses so if you want\nto\nget uh roses this glow\nfunction is useful let's say if you want\nto get only roses images\nso you can just say data directory dot\nglobe\nroses slash star and this will give you\na list of\nall the rose images now quickly\nlet's uh show these images using\npil model so pl is a famous pillow\nlibrary\nuh from python by the way when you're\nworking on this code if you\nface like model not available error just\ndo paper install okay\nyou can just say pip\ninstall pll pillow\nso this is a pillow library\nand same thing with any other module\nlet's say if you don't have\ncv2 then you can just say pip\ninstall opencv\nso this is the command you run pip\ninstall open cv python\nand you will get opencv okay\nso now this is what you do\nto show an image using pil so you will\nsay pl dot image open\nstr roses1 or zero\nokay so this is showing me this\nparticular zeroth image i can do one\nso it will show me all these images uh\nyou can also\nlet's quickly plot let's maybe tulips\nso see tulips looks like this so this is\nlike a quick\ndata visualization to kind of\nyou know explore what you have in your\ndata sets\nnow i want to create\na class names as well\nso what i'll do is i will create a\ndictionary\nof different flowers and all the\nimage paths associated with it okay and\nthat will help me\num during my model building process so\nwhat i did is see simply\nlike this particular thing roses\nsee we already saw it give you all the\nparts\nof rose images and you can do same thing\nfor daisy dandelion sunflower\nbecause see if you look at this data set\nsee these are the five type of flowers\nyou have so i just hardcoded those five\nflowers\ninto my dictionary and my dictionary is\nnow having\nall the images uh image paths\nright so if i do let's say now\nroses it will have all the\nfile paths of roses daisy will have all\nfile parts of these\nthis is pretty simple dictionary stuff\nand i also want to have a labels\ndictionary so labels dictionary will be\nthis\nso so i'm just assigning\na class number to each of these flowers\nrandomly okay\nnow what we can do is\nwe can use cv2 module to\nuh read this image file\ninto opencv object okay into\nshort of like a numpy array so opencv\nmodule\nhas this method called imread\nso here you supply file path and in\nreturn it will give you numpy array so\nlet's say\ni call it img okay now what is my path\nokay so let's paint\nlet's get the first roses image so rose\nis\nzero okay so let me just\ndo something here\nyou see this is the file path of the\nfirst rows image\nand if i do this\nsee i'm getting an error because looks\nlike cb2 is not accepting window path\nas an argument so\nif you just wrap this in str\nit will give you the actual string path\nand\nopencv expect that string path okay\nso i am doing that and in the return\nwhat you get\nopencv just read the image from disk\nand converted into three dimensional\narray see if you do shape\nthree-dimensional so this is x this is y\nand three\nis for rgb channel\nnow opencv also has\na function called\nresize so you can take the image and\nresize it to some standard size\nbecause our images in these folders\nare different dimension okay so if you\nlook at this image particular image\nthis is 320 by 232\nand if you look at this image this is\n320 by 212 they are\nthey're varying a little bit 320 by 240\nso the dimensions are not same\nwhen we train our model we want to\nmake the dimensions same spore for all\nthe images\nso when you do this you see it resizes\nit\nso now let's run a for loop and prepare\nour\nx and y so i will just say\nx and y are two blank area so now we are\nkind of preparing our\nx and y and x strain and y train etc\nlet's iterate through all the images\nfirst so\nwe'll do for flower name\nand images in flowers\nimages dictionary dot items\nso what this will do this is a simple\n[Music]\npython\nsee i will just print a length\nso you're iterating through let's say\nroses you have 641 image daisy you have\n631 image and so on\nokay so this is the dictionary we are\niterating through\nand now here\ni will go through all the images so for\nimage in images\nso here at this point i will have every\nsingle image\nand that image as per the api that we\nsaw earlier okay\ni will read it like this cv2 dot read\nand we need to have str to convert from\nlip path to regular string\nimage activities image\nand then i want to resize it\nso if i resize it using this method here\ni will get a resized image right so i\nwill just say resize\nimage why do we\nresize again when machine learning model\nexpects\nall the training samples to be same\ndimension\nthat is the that is the reason why we\nare resizing and then you just\ndo x append okay\nand then y append\ny has to be a number so how do you get\nnumber\nso here flower name is rose roses okay\nso flower name is roses and for roses i\nhave\nzero as a number so if i do\nflowers labels\ndict and then flower name\ni will get uh the number for each of\nthese flowers\nokay and if you want to quickly verify\nit\nsee you look at it like the first few\nimages are flowers so you see all the\nzeros here and if you look at x\nit's a simple three dimensional array\nwhy three dimensional well first\ndimension is for x second is for y\nand third is for rgb channel you know\nrgb\nso we have three channels\nnow for convenience i will just convert\nthis into simple numpy array because\nit will be useful later on okay\nso nothing major it was a simple plain\npython list i converted it into\na numpy array\nafter i do that our usual step is to do\na train test split\nso i'm doing the train test split here\nand um if you look at my\nlength of x strain\nthis has two seven pi two examples\nand length of x test has\nthis much so the default split\nif you look at the documentation\nis like i think 25.75\nokay so whatever you can change it if\nyou want to\nhave a different distribution of your\ntaste and train\nsets now\nin every image classification video\nwe'll notice this one common thing which\nis scaling\nso we always divide rgb channel values\nwith 255\nuh to scale them right right now see you\nyou look at these values\nthey're random like 30 40 whatever\nit could be from 0 to 255.\nif you scale it like this so on numpy\nthe convenient method is you divide the\nnumpy array\nlet's say you do this and it will\ndivide all the numbers in this three\ndimensional array by 255\nso it will be scaled between zero and\none so i'll just call this\nx strain scale\nand x the earth's taste scale\nnow when i look at the\nnormalized array see it's now in range\nzero and one doing this helps with the\nmodel\ntraining and that that's the reason we\nalways divide this thing by\n255. all right now we are ready to build\na model\nso how do we build a model where in the\nmodel you\nalways do this so we are building a\nconvolutional neural network\nand here we will specify our layers\none by one now you know my from my\nprevious videos\nwe always have convolutional layer layer\nthen max pooling layer then again\nconvolutional layer max pulling layer\nand so on\nso we'll have multiple of such layers so\nwhat i'm going to do now\nis have these multiple\nconvolutional and max pulling layers\nlike this\nokay we talked about padding in last\nvideo we saw how the same padding or no\npadding\nworks this 16 means we are having 16\nfilters\nand the size of every filter is 3x3\nin the second layer we are having 32\nfilters and sizes three by three\nthird layer we are having 64 filter\nsizes three by three\nso all of these are hyper parameters\nthere is no like exit science on how you\nspecify you you can\nyou can have less number of layers you\ncan have\ndifferent features you know different\nvalues this could be whatever 45\nso there is no like fixed rule okay it's\njust a little bit trial and error\nand you know after we specify our\nconvolutional layers\nwe always um have a dense network\nokay so before we start dense network we\nhave to\nflatten our values because the dense\nnetwork will accept\nthe single dimensional array so until\nhere\nat this point you will have a 2d array\nso you want to convert that into\nsingle dimensional array by specifying\nthe latent layer\nand now let's specify some dense layers\nso\ni will have maybe one hidden layer and\nand we are using activation as value\neverywhere because that's a\nstandard layer that we use and\nagain i'm specifying 128 neurons\nthis could be different it could be 200\n400 you have to just\ndo trial error and figure it out and my\nnumber of\nclasses are five\nwhy five well because i have five type\nof flowers\nsee one two three four five\nthat's why five in my last layer\nwill have total five neurons by the way\nokay so just imagine you have five\nneurons in your final output\nso if the zeroth neuron is activated it\nmeans its roses\nif first neuron is activated it means it\nis daisy\nthat's why these there are five neurons\neach corresponding to\nevery flower here\nnow i'm not using any activation layer\nhere\nit is okay if you don't use any\nactivation it will use linear activation\nso we'll try that linear activation and\nsee how that goes\nthe second step is to do compile so in\nthe compile i will use adam as optimizer\ni'm using sparse categorical cross\nentropy\nbecause my final array y has the exact\nvalue\nit is not a hot encoded vector it has 0\n1 2\n3 4 5 that's why i'm using this and from\nlogit\nis equal to true now we'll do\nmodel fitting i will just run it for\nmaybe 30 epochs\nit might take you a long time to do this\ntraining\nuh based on what kind of computer you\nhave if you don't want to wait too long\nyou can maybe run for 10 epochs\nup to you i got a very high accuracy on\nmy training set here you can see 99\nand i want to now we will evaluate this\non my test data set so on test data set\ni got only 65\nso this is an example of overfitting\nbecause\non training set it tends to do so good\nlike 99 percent you know it's like damn\naccurate\nbut on test set it is having only 65\naccuracy and whenever you see this case\nmost likely there is an overfitting\nhappening i will also try to just\npredict\na few things so that you get an idea\nso let's see if you do model dot predict\nlike this\nyou know on x day scale you will get all\nyour predictions\nso i will get all my predictions\nand they look like this remember we used\na linear see here we did not specify\nactivation\nwhich means it used linear activation\nthis way you see values\nall around the places you know 15 2 and\nso on\nif you want to convert this into a score\na probability score\nso tensorflow has this softmax function\nwhich can convert\nthis numpy array into a set of\nprobabilities so for example i am taking\nthe first example which is this\ni want to convert it into a probability\nscore\nand when i do that see i get this tensor\nwhich is\nc epsilon values so now it's between 0\nand 1\nand you can then use an arg max function\nso np dot arg max function will\ngive you the index of the element which\nis maximum\nso let's say just to demonstrate you so\nit is saying 0\n1 2 so 1 2 3 is your maximum\nelement uh so i will now do score here\nso score\nlet's say score okay score\nso it is saying that uh this is probably\nnumber one so number one is what all\nright so let's see number one\nnumber one is daisy so it's our daisy\nflower\nokay and if you look at our right\ntaste that is also number one\nso for this first test sample it worked\nokay\nbut still it has 65 percent accuracy\nwhich is very low\nand this is happening because of\noverfitting and we can use data\naugmentation\nto address this overfitting so how to do\nthat exactly so\ntensorflow has a good api so i'm going\nto\nuse keras dot sequential model once\nagain\nthis is how you use data augmentation\nokay\nso you specify your\ntransformation in this array and\nthis let's let's start with\nmaybe a random zoom okay\nso this is how we do it now the api is\nexperimental it might change\nuh but right now it is working you know\nso you can just do tensorflow\nmaybe random zoom something like this\nand it should show you\nthe api documentation\nokay so there's random zoom there are\nall kind of\noh no this is not the one actually\n[Music]\nyeah this is the one this is the one we\nare using\nso there is random zoom there is\nrescaling\nthere is a random rotation there is a\nrandom flip\nokay so these are all the transformation\nwhich are available\nso here i will just say this is my data\naugmentation\nokay and after you do that what you can\ndo is\nuh let me first plot my image\nokay so i'm just plotting my first image\nfrom my\ntraining set it's a it's a daisy flower\nand i want to now apply uh\naugmentation so how to do that okay so\ni'll just\ndo x is off so that it doesn't show you\nthose weird x and y axis\nand then i want to\napply transformation on this x zero\nimage okay how to apply that\nwell you can call data augmentation as a\nfunction\nso when you call it as a function\nlike this let me just show you\nso when you call it like a function\nlike this uh\nlet's see what's going on here actually\nyou know what it expects two-dimensional\narray so you have to call it for the\nwhole\nx vector and then you can take the index\nand it gives you this tensor array\nthis is a transform image\nand in order for this to work with\nthe okay so let me just take this guy\nfirst\nand supply here now this will not\nwork straight away because you have to\nconvert it to\na numpy array from your tensor so i will\ndo\nthis which converts it into a numpy\narray and when you do that\nyou see what happened so i am applying\nrandom zoom here\nso it's zoomed image see it made it can\nyou see the difference between the two\nthe flower is smaller here if you do\nzoom\ntoo much let's say very high zoom\nthis is my original image look at this\nzoomed out too much\nyou see it can also zoom in\nzoom out so this is what that\ntransformation is doing\nother trans type of transformation\nis a random contrast\nso let me show you that\nso i'm just doing a random contrast here\nyou see the image is very bright now\nit's like over bright this is original\nimage this is the\nnew image so it can apply this see\nrandom or transformation you can also do\nyeah rotation maybe so let's do rotation\nso when you do rotation\nit will just rotate that image see it is\nrotating now\nand when you call multiple times it will\nrandomly rotate into a different angle\nso now this is useful we can use this\nfunctionality to produce\nmore samples from our current samples\nwe have around 3600 samples we'll use\nthis\ndata augmentation to produce new samples\nand make our model more rubber so that\nit doesn't overfit\nit can generalize well because when you\nsupply rotated scale\ncontrast images in your training when\nyou're doing actual prediction now it\ncan handle a variety of images\nall right now i'm going to use different\ntransformations in the same sequential\nobject\ni supply three transformation horizontal\nflip\nrotation and zoom and we'll use this\nparticular object\nin our actual model building\nprocess so i copy pasted the\nsame uh model that we had before so here\nwe train this model right\nso i copy pasted the same thing i have\ntwo changes however\ni'm supplying data augmentation as my\nfirst layer\nso in the pipeline the first layer\nitself is doing augmentation producing\nnew samples\ni am also having a dropout layer we we\nlearned about dropout layer in earlier\nvideos\nit is going to drop 20 of the neurons at\nrandom in each pass\nand it will give us better\ngeneralization\nokay so now let's run this model\nso after i ran this uh again it took\nsome time\nif it's too much for you you can reduce\nthis epochs\nthe with the new model my accuracy with\nthe training set was 90\nbut look at my accuracy with the test\nset my test set accuracy\nimproved by 75 percent so this is a huge\nimprovement from 65\nwe improve to 75 percent\nso i hope that gives you some idea on\nthe usefulness of data augmentation\ni have the notebook this particular\nnotebook link available in the video\ndescription below so just download it\ntry it out\nalso if you go to youtube and search for\ncore basics deep learning\nyou will find my complete deep learning\ntutorial playlist\ni'm still actively working on it this\nwill be the next video here\nuh but this will have all the material\nthat you need\nin order to learn deep learning you can\nalso do code basics machine learning\nand you will find my tutorial playlist\nso just\nfollow these tutorials many of these\ntutorials i have\nan exercise today i don't have any\nexercise for you\nbut majority of them will have exercise\nso that you can practice your\nall right if you like this video please\ngive it a thumbs up and share it with\nyour friends\nthank you\n",
  "words": [
    "watched",
    "convolutional",
    "neural",
    "network",
    "video",
    "would",
    "learned",
    "cnn",
    "box",
    "scale",
    "rotation",
    "invariant",
    "means",
    "let",
    "say",
    "trying",
    "classify",
    "roses",
    "tulips",
    "training",
    "set",
    "contains",
    "proper",
    "clear",
    "images",
    "two",
    "flowers",
    "training",
    "cnn",
    "supply",
    "rotated",
    "image",
    "rose",
    "classification",
    "cnn",
    "might",
    "perform",
    "better",
    "handle",
    "problem",
    "use",
    "technique",
    "called",
    "data",
    "augmentation",
    "data",
    "augmentation",
    "existing",
    "training",
    "samples",
    "try",
    "generate",
    "new",
    "samples",
    "example",
    "picture",
    "flower",
    "original",
    "data",
    "set",
    "contains",
    "like",
    "one",
    "type",
    "flower",
    "image",
    "like",
    "clear",
    "unrotated",
    "image",
    "apply",
    "several",
    "transformations",
    "horizontal",
    "flip",
    "rotation",
    "scaling",
    "contrast",
    "generate",
    "new",
    "samples",
    "image",
    "generated",
    "four",
    "new",
    "samples",
    "one",
    "technique",
    "effective",
    "video",
    "flower",
    "classification",
    "using",
    "cnn",
    "see",
    "model",
    "overfits",
    "data",
    "use",
    "data",
    "augmentation",
    "generate",
    "new",
    "samples",
    "increase",
    "accuracy",
    "model",
    "going",
    "use",
    "tensorflow",
    "flower",
    "data",
    "set",
    "video",
    "used",
    "uh",
    "standard",
    "tensorflow",
    "tutorial",
    "uh",
    "website",
    "uh",
    "little",
    "complicated",
    "tried",
    "simplify",
    "notebook",
    "first",
    "imported",
    "important",
    "libraries",
    "using",
    "pil",
    "image",
    "library",
    "python",
    "okay",
    "first",
    "thing",
    "going",
    "downloading",
    "flowers",
    "data",
    "set",
    "google",
    "website",
    "google",
    "website",
    "zip",
    "file",
    "contains",
    "uh",
    "photos",
    "different",
    "flowers",
    "tensorflow",
    "uh",
    "function",
    "called",
    "get",
    "file",
    "getting",
    "file",
    "specifying",
    "data",
    "set",
    "url",
    "getting",
    "file",
    "folder",
    "called",
    "flower",
    "photos",
    "cache",
    "directory",
    "directory",
    "want",
    "save",
    "data",
    "set",
    "want",
    "save",
    "current",
    "directory",
    "notebook",
    "therefore",
    "supply",
    "dot",
    "want",
    "different",
    "directory",
    "something",
    "like",
    "see",
    "whatever",
    "data",
    "image",
    "images",
    "know",
    "specify",
    "whole",
    "path",
    "going",
    "use",
    "current",
    "part",
    "true",
    "means",
    "uh",
    "zip",
    "file",
    "unzip",
    "okay",
    "get",
    "data",
    "directory",
    "variable",
    "back",
    "okay",
    "take",
    "time",
    "already",
    "images",
    "downloaded",
    "worked",
    "pretty",
    "fast",
    "let",
    "check",
    "data",
    "directory",
    "means",
    "okay",
    "data",
    "directory",
    "means",
    "current",
    "directory",
    "dot",
    "data",
    "set",
    "folder",
    "inside",
    "draft",
    "flower",
    "photos",
    "contain",
    "pictures",
    "let",
    "check",
    "folder",
    "current",
    "folder",
    "data",
    "set",
    "folder",
    "zip",
    "tz",
    "file",
    "present",
    "flower",
    "photo",
    "look",
    "flower",
    "photos",
    "five",
    "type",
    "different",
    "flowers",
    "daisy",
    "flower",
    "see",
    "make",
    "bigger",
    "see",
    "variety",
    "pictures",
    "actually",
    "see",
    "woman",
    "flower",
    "like",
    "like",
    "variety",
    "pictures",
    "similarly",
    "roses",
    "many",
    "different",
    "roses",
    "look",
    "images",
    "says",
    "641",
    "rose",
    "images",
    "total",
    "okay",
    "overall",
    "250",
    "megabyte",
    "around",
    "250",
    "megabyte",
    "let",
    "check",
    "even",
    "yeah",
    "220",
    "megabyte",
    "data",
    "set",
    "make",
    "sure",
    "enough",
    "space",
    "hard",
    "disk",
    "photos",
    "downloaded",
    "going",
    "convert",
    "data",
    "directory",
    "apart",
    "lip",
    "model",
    "python",
    "called",
    "pathlib",
    "allow",
    "us",
    "certain",
    "things",
    "easier",
    "way",
    "going",
    "flower",
    "images",
    "one",
    "one",
    "read",
    "numpy",
    "array",
    "path",
    "live",
    "useful",
    "tell",
    "useful",
    "first",
    "converted",
    "data",
    "directory",
    "apart",
    "lib",
    "looks",
    "like",
    "basically",
    "path",
    "windows",
    "path",
    "object",
    "things",
    "like",
    "say",
    "glob",
    "give",
    "images",
    "extension",
    "jpg",
    "recursively",
    "go",
    "directories",
    "subdirectories",
    "give",
    "list",
    "jpg",
    "files",
    "need",
    "model",
    "training",
    "converted",
    "path",
    "lib",
    "let",
    "quickly",
    "count",
    "images",
    "images",
    "length",
    "images",
    "see",
    "three",
    "six",
    "seven",
    "zero",
    "data",
    "set",
    "total",
    "number",
    "images",
    "look",
    "roses",
    "want",
    "get",
    "uh",
    "roses",
    "glow",
    "function",
    "useful",
    "let",
    "say",
    "want",
    "get",
    "roses",
    "images",
    "say",
    "data",
    "directory",
    "dot",
    "globe",
    "roses",
    "slash",
    "star",
    "give",
    "list",
    "rose",
    "images",
    "quickly",
    "let",
    "uh",
    "show",
    "images",
    "using",
    "pil",
    "model",
    "pl",
    "famous",
    "pillow",
    "library",
    "uh",
    "python",
    "way",
    "working",
    "code",
    "face",
    "like",
    "model",
    "available",
    "error",
    "paper",
    "install",
    "okay",
    "say",
    "pip",
    "install",
    "pll",
    "pillow",
    "pillow",
    "library",
    "thing",
    "module",
    "let",
    "say",
    "cv2",
    "say",
    "pip",
    "install",
    "opencv",
    "command",
    "run",
    "pip",
    "install",
    "open",
    "cv",
    "python",
    "get",
    "opencv",
    "okay",
    "show",
    "image",
    "using",
    "pil",
    "say",
    "pl",
    "dot",
    "image",
    "open",
    "str",
    "roses1",
    "zero",
    "okay",
    "showing",
    "particular",
    "zeroth",
    "image",
    "one",
    "show",
    "images",
    "uh",
    "also",
    "let",
    "quickly",
    "plot",
    "let",
    "maybe",
    "tulips",
    "see",
    "tulips",
    "looks",
    "like",
    "like",
    "quick",
    "data",
    "visualization",
    "kind",
    "know",
    "explore",
    "data",
    "sets",
    "want",
    "create",
    "class",
    "names",
    "well",
    "create",
    "dictionary",
    "different",
    "flowers",
    "image",
    "paths",
    "associated",
    "okay",
    "help",
    "um",
    "model",
    "building",
    "process",
    "see",
    "simply",
    "like",
    "particular",
    "thing",
    "roses",
    "see",
    "already",
    "saw",
    "give",
    "parts",
    "rose",
    "images",
    "thing",
    "daisy",
    "dandelion",
    "sunflower",
    "see",
    "look",
    "data",
    "set",
    "see",
    "five",
    "type",
    "flowers",
    "hardcoded",
    "five",
    "flowers",
    "dictionary",
    "dictionary",
    "images",
    "uh",
    "image",
    "paths",
    "right",
    "let",
    "say",
    "roses",
    "file",
    "paths",
    "roses",
    "daisy",
    "file",
    "parts",
    "pretty",
    "simple",
    "dictionary",
    "stuff",
    "also",
    "want",
    "labels",
    "dictionary",
    "labels",
    "dictionary",
    "assigning",
    "class",
    "number",
    "flowers",
    "randomly",
    "okay",
    "use",
    "cv2",
    "module",
    "uh",
    "read",
    "image",
    "file",
    "opencv",
    "object",
    "okay",
    "short",
    "like",
    "numpy",
    "array",
    "opencv",
    "module",
    "method",
    "called",
    "imread",
    "supply",
    "file",
    "path",
    "return",
    "give",
    "numpy",
    "array",
    "let",
    "say",
    "call",
    "img",
    "okay",
    "path",
    "okay",
    "let",
    "paint",
    "let",
    "get",
    "first",
    "roses",
    "image",
    "rose",
    "zero",
    "okay",
    "let",
    "something",
    "see",
    "file",
    "path",
    "first",
    "rows",
    "image",
    "see",
    "getting",
    "error",
    "looks",
    "like",
    "cb2",
    "accepting",
    "window",
    "path",
    "argument",
    "wrap",
    "str",
    "give",
    "actual",
    "string",
    "path",
    "opencv",
    "expect",
    "string",
    "path",
    "okay",
    "return",
    "get",
    "opencv",
    "read",
    "image",
    "disk",
    "converted",
    "three",
    "dimensional",
    "array",
    "see",
    "shape",
    "x",
    "three",
    "rgb",
    "channel",
    "opencv",
    "also",
    "function",
    "called",
    "resize",
    "take",
    "image",
    "resize",
    "standard",
    "size",
    "images",
    "folders",
    "different",
    "dimension",
    "okay",
    "look",
    "image",
    "particular",
    "image",
    "320",
    "232",
    "look",
    "image",
    "320",
    "212",
    "varying",
    "little",
    "bit",
    "320",
    "240",
    "dimensions",
    "train",
    "model",
    "want",
    "make",
    "dimensions",
    "spore",
    "images",
    "see",
    "resizes",
    "let",
    "run",
    "loop",
    "prepare",
    "x",
    "say",
    "x",
    "two",
    "blank",
    "area",
    "kind",
    "preparing",
    "x",
    "x",
    "strain",
    "train",
    "etc",
    "let",
    "iterate",
    "images",
    "first",
    "flower",
    "name",
    "images",
    "flowers",
    "images",
    "dictionary",
    "dot",
    "items",
    "simple",
    "music",
    "python",
    "see",
    "print",
    "length",
    "iterating",
    "let",
    "say",
    "roses",
    "641",
    "image",
    "daisy",
    "631",
    "image",
    "okay",
    "dictionary",
    "iterating",
    "go",
    "images",
    "image",
    "images",
    "point",
    "every",
    "single",
    "image",
    "image",
    "per",
    "api",
    "saw",
    "earlier",
    "okay",
    "read",
    "like",
    "cv2",
    "dot",
    "read",
    "need",
    "str",
    "convert",
    "lip",
    "path",
    "regular",
    "string",
    "image",
    "activities",
    "image",
    "want",
    "resize",
    "resize",
    "using",
    "method",
    "get",
    "resized",
    "image",
    "right",
    "say",
    "resize",
    "image",
    "resize",
    "machine",
    "learning",
    "model",
    "expects",
    "training",
    "samples",
    "dimension",
    "reason",
    "resizing",
    "x",
    "append",
    "okay",
    "append",
    "number",
    "get",
    "number",
    "flower",
    "name",
    "rose",
    "roses",
    "okay",
    "flower",
    "name",
    "roses",
    "roses",
    "zero",
    "number",
    "flowers",
    "labels",
    "dict",
    "flower",
    "name",
    "get",
    "uh",
    "number",
    "flowers",
    "okay",
    "want",
    "quickly",
    "verify",
    "see",
    "look",
    "like",
    "first",
    "images",
    "flowers",
    "see",
    "zeros",
    "look",
    "x",
    "simple",
    "three",
    "dimensional",
    "array",
    "three",
    "dimensional",
    "well",
    "first",
    "dimension",
    "x",
    "second",
    "third",
    "rgb",
    "channel",
    "know",
    "rgb",
    "three",
    "channels",
    "convenience",
    "convert",
    "simple",
    "numpy",
    "array",
    "useful",
    "later",
    "okay",
    "nothing",
    "major",
    "simple",
    "plain",
    "python",
    "list",
    "converted",
    "numpy",
    "array",
    "usual",
    "step",
    "train",
    "test",
    "split",
    "train",
    "test",
    "split",
    "um",
    "look",
    "length",
    "x",
    "strain",
    "two",
    "seven",
    "pi",
    "two",
    "examples",
    "length",
    "x",
    "test",
    "much",
    "default",
    "split",
    "look",
    "documentation",
    "like",
    "think",
    "okay",
    "whatever",
    "change",
    "want",
    "different",
    "distribution",
    "taste",
    "train",
    "sets",
    "every",
    "image",
    "classification",
    "video",
    "notice",
    "one",
    "common",
    "thing",
    "scaling",
    "always",
    "divide",
    "rgb",
    "channel",
    "values",
    "255",
    "uh",
    "scale",
    "right",
    "right",
    "see",
    "look",
    "values",
    "random",
    "like",
    "30",
    "40",
    "whatever",
    "could",
    "0",
    "scale",
    "like",
    "numpy",
    "convenient",
    "method",
    "divide",
    "numpy",
    "array",
    "let",
    "say",
    "divide",
    "numbers",
    "three",
    "dimensional",
    "array",
    "255",
    "scaled",
    "zero",
    "one",
    "call",
    "x",
    "strain",
    "scale",
    "x",
    "earth",
    "taste",
    "scale",
    "look",
    "normalized",
    "array",
    "see",
    "range",
    "zero",
    "one",
    "helps",
    "model",
    "training",
    "reason",
    "always",
    "divide",
    "thing",
    "right",
    "ready",
    "build",
    "model",
    "build",
    "model",
    "model",
    "always",
    "building",
    "convolutional",
    "neural",
    "network",
    "specify",
    "layers",
    "one",
    "one",
    "know",
    "previous",
    "videos",
    "always",
    "convolutional",
    "layer",
    "layer",
    "max",
    "pooling",
    "layer",
    "convolutional",
    "layer",
    "max",
    "pulling",
    "layer",
    "multiple",
    "layers",
    "going",
    "multiple",
    "convolutional",
    "max",
    "pulling",
    "layers",
    "like",
    "okay",
    "talked",
    "padding",
    "last",
    "video",
    "saw",
    "padding",
    "padding",
    "works",
    "16",
    "means",
    "16",
    "filters",
    "size",
    "every",
    "filter",
    "3x3",
    "second",
    "layer",
    "32",
    "filters",
    "sizes",
    "three",
    "three",
    "third",
    "layer",
    "64",
    "filter",
    "sizes",
    "three",
    "three",
    "hyper",
    "parameters",
    "like",
    "exit",
    "science",
    "specify",
    "less",
    "number",
    "layers",
    "different",
    "features",
    "know",
    "different",
    "values",
    "could",
    "whatever",
    "45",
    "like",
    "fixed",
    "rule",
    "okay",
    "little",
    "bit",
    "trial",
    "error",
    "know",
    "specify",
    "convolutional",
    "layers",
    "always",
    "um",
    "dense",
    "network",
    "okay",
    "start",
    "dense",
    "network",
    "flatten",
    "values",
    "dense",
    "network",
    "accept",
    "single",
    "dimensional",
    "array",
    "point",
    "2d",
    "array",
    "want",
    "convert",
    "single",
    "dimensional",
    "array",
    "specifying",
    "latent",
    "layer",
    "let",
    "specify",
    "dense",
    "layers",
    "maybe",
    "one",
    "hidden",
    "layer",
    "using",
    "activation",
    "value",
    "everywhere",
    "standard",
    "layer",
    "use",
    "specifying",
    "128",
    "neurons",
    "could",
    "different",
    "could",
    "200",
    "400",
    "trial",
    "error",
    "figure",
    "number",
    "classes",
    "five",
    "five",
    "well",
    "five",
    "type",
    "flowers",
    "see",
    "one",
    "two",
    "three",
    "four",
    "five",
    "five",
    "last",
    "layer",
    "total",
    "five",
    "neurons",
    "way",
    "okay",
    "imagine",
    "five",
    "neurons",
    "final",
    "output",
    "zeroth",
    "neuron",
    "activated",
    "means",
    "roses",
    "first",
    "neuron",
    "activated",
    "means",
    "daisy",
    "five",
    "neurons",
    "corresponding",
    "every",
    "flower",
    "using",
    "activation",
    "layer",
    "okay",
    "use",
    "activation",
    "use",
    "linear",
    "activation",
    "try",
    "linear",
    "activation",
    "see",
    "goes",
    "second",
    "step",
    "compile",
    "compile",
    "use",
    "adam",
    "optimizer",
    "using",
    "sparse",
    "categorical",
    "cross",
    "entropy",
    "final",
    "array",
    "exact",
    "value",
    "hot",
    "encoded",
    "vector",
    "0",
    "1",
    "2",
    "3",
    "4",
    "5",
    "using",
    "logit",
    "equal",
    "true",
    "model",
    "fitting",
    "run",
    "maybe",
    "30",
    "epochs",
    "might",
    "take",
    "long",
    "time",
    "training",
    "uh",
    "based",
    "kind",
    "computer",
    "want",
    "wait",
    "long",
    "maybe",
    "run",
    "10",
    "epochs",
    "got",
    "high",
    "accuracy",
    "training",
    "set",
    "see",
    "99",
    "want",
    "evaluate",
    "test",
    "data",
    "set",
    "test",
    "data",
    "set",
    "got",
    "65",
    "example",
    "overfitting",
    "training",
    "set",
    "tends",
    "good",
    "like",
    "99",
    "percent",
    "know",
    "like",
    "damn",
    "accurate",
    "test",
    "set",
    "65",
    "accuracy",
    "whenever",
    "see",
    "case",
    "likely",
    "overfitting",
    "happening",
    "also",
    "try",
    "predict",
    "things",
    "get",
    "idea",
    "let",
    "see",
    "model",
    "dot",
    "predict",
    "like",
    "know",
    "x",
    "day",
    "scale",
    "get",
    "predictions",
    "get",
    "predictions",
    "look",
    "like",
    "remember",
    "used",
    "linear",
    "see",
    "specify",
    "activation",
    "means",
    "used",
    "linear",
    "activation",
    "way",
    "see",
    "values",
    "around",
    "places",
    "know",
    "15",
    "2",
    "want",
    "convert",
    "score",
    "probability",
    "score",
    "tensorflow",
    "softmax",
    "function",
    "convert",
    "numpy",
    "array",
    "set",
    "probabilities",
    "example",
    "taking",
    "first",
    "example",
    "want",
    "convert",
    "probability",
    "score",
    "see",
    "get",
    "tensor",
    "c",
    "epsilon",
    "values",
    "0",
    "1",
    "use",
    "arg",
    "max",
    "function",
    "np",
    "dot",
    "arg",
    "max",
    "function",
    "give",
    "index",
    "element",
    "maximum",
    "let",
    "say",
    "demonstrate",
    "saying",
    "0",
    "1",
    "2",
    "1",
    "2",
    "3",
    "maximum",
    "element",
    "uh",
    "score",
    "score",
    "let",
    "say",
    "score",
    "okay",
    "score",
    "saying",
    "uh",
    "probably",
    "number",
    "one",
    "number",
    "one",
    "right",
    "let",
    "see",
    "number",
    "one",
    "number",
    "one",
    "daisy",
    "daisy",
    "flower",
    "okay",
    "look",
    "right",
    "taste",
    "also",
    "number",
    "one",
    "first",
    "test",
    "sample",
    "worked",
    "okay",
    "still",
    "65",
    "percent",
    "accuracy",
    "low",
    "happening",
    "overfitting",
    "use",
    "data",
    "augmentation",
    "address",
    "overfitting",
    "exactly",
    "tensorflow",
    "good",
    "api",
    "going",
    "use",
    "keras",
    "dot",
    "sequential",
    "model",
    "use",
    "data",
    "augmentation",
    "okay",
    "specify",
    "transformation",
    "array",
    "let",
    "let",
    "start",
    "maybe",
    "random",
    "zoom",
    "okay",
    "api",
    "experimental",
    "might",
    "change",
    "uh",
    "right",
    "working",
    "know",
    "tensorflow",
    "maybe",
    "random",
    "zoom",
    "something",
    "like",
    "show",
    "api",
    "documentation",
    "okay",
    "random",
    "zoom",
    "kind",
    "oh",
    "one",
    "actually",
    "music",
    "yeah",
    "one",
    "one",
    "using",
    "random",
    "zoom",
    "rescaling",
    "random",
    "rotation",
    "random",
    "flip",
    "okay",
    "transformation",
    "available",
    "say",
    "data",
    "augmentation",
    "okay",
    "uh",
    "let",
    "first",
    "plot",
    "image",
    "okay",
    "plotting",
    "first",
    "image",
    "training",
    "set",
    "daisy",
    "flower",
    "want",
    "apply",
    "uh",
    "augmentation",
    "okay",
    "x",
    "show",
    "weird",
    "x",
    "axis",
    "want",
    "apply",
    "transformation",
    "x",
    "zero",
    "image",
    "okay",
    "apply",
    "well",
    "call",
    "data",
    "augmentation",
    "function",
    "call",
    "function",
    "like",
    "let",
    "show",
    "call",
    "like",
    "function",
    "like",
    "uh",
    "let",
    "see",
    "going",
    "actually",
    "know",
    "expects",
    "array",
    "call",
    "whole",
    "x",
    "vector",
    "take",
    "index",
    "gives",
    "tensor",
    "array",
    "transform",
    "image",
    "order",
    "work",
    "okay",
    "let",
    "take",
    "guy",
    "first",
    "supply",
    "work",
    "straight",
    "away",
    "convert",
    "numpy",
    "array",
    "tensor",
    "converts",
    "numpy",
    "array",
    "see",
    "happened",
    "applying",
    "random",
    "zoom",
    "zoomed",
    "image",
    "see",
    "made",
    "see",
    "difference",
    "two",
    "flower",
    "smaller",
    "zoom",
    "much",
    "let",
    "say",
    "high",
    "zoom",
    "original",
    "image",
    "look",
    "zoomed",
    "much",
    "see",
    "also",
    "zoom",
    "zoom",
    "transformation",
    "trans",
    "type",
    "transformation",
    "random",
    "contrast",
    "let",
    "show",
    "random",
    "contrast",
    "see",
    "image",
    "bright",
    "like",
    "bright",
    "original",
    "image",
    "new",
    "image",
    "apply",
    "see",
    "random",
    "transformation",
    "also",
    "yeah",
    "rotation",
    "maybe",
    "let",
    "rotation",
    "rotation",
    "rotate",
    "image",
    "see",
    "rotating",
    "call",
    "multiple",
    "times",
    "randomly",
    "rotate",
    "different",
    "angle",
    "useful",
    "use",
    "functionality",
    "produce",
    "samples",
    "current",
    "samples",
    "around",
    "3600",
    "samples",
    "use",
    "data",
    "augmentation",
    "produce",
    "new",
    "samples",
    "make",
    "model",
    "rubber",
    "overfit",
    "generalize",
    "well",
    "supply",
    "rotated",
    "scale",
    "contrast",
    "images",
    "training",
    "actual",
    "prediction",
    "handle",
    "variety",
    "images",
    "right",
    "going",
    "use",
    "different",
    "transformations",
    "sequential",
    "object",
    "supply",
    "three",
    "transformation",
    "horizontal",
    "flip",
    "rotation",
    "zoom",
    "use",
    "particular",
    "object",
    "actual",
    "model",
    "building",
    "process",
    "copy",
    "pasted",
    "uh",
    "model",
    "train",
    "model",
    "right",
    "copy",
    "pasted",
    "thing",
    "two",
    "changes",
    "however",
    "supplying",
    "data",
    "augmentation",
    "first",
    "layer",
    "pipeline",
    "first",
    "layer",
    "augmentation",
    "producing",
    "new",
    "samples",
    "also",
    "dropout",
    "layer",
    "learned",
    "dropout",
    "layer",
    "earlier",
    "videos",
    "going",
    "drop",
    "20",
    "neurons",
    "random",
    "pass",
    "give",
    "us",
    "better",
    "generalization",
    "okay",
    "let",
    "run",
    "model",
    "ran",
    "uh",
    "took",
    "time",
    "much",
    "reduce",
    "epochs",
    "new",
    "model",
    "accuracy",
    "training",
    "set",
    "90",
    "look",
    "accuracy",
    "test",
    "set",
    "test",
    "set",
    "accuracy",
    "improved",
    "75",
    "percent",
    "huge",
    "improvement",
    "65",
    "improve",
    "75",
    "percent",
    "hope",
    "gives",
    "idea",
    "usefulness",
    "data",
    "augmentation",
    "notebook",
    "particular",
    "notebook",
    "link",
    "available",
    "video",
    "description",
    "download",
    "try",
    "also",
    "go",
    "youtube",
    "search",
    "core",
    "basics",
    "deep",
    "learning",
    "find",
    "complete",
    "deep",
    "learning",
    "tutorial",
    "playlist",
    "still",
    "actively",
    "working",
    "next",
    "video",
    "uh",
    "material",
    "need",
    "order",
    "learn",
    "deep",
    "learning",
    "also",
    "code",
    "basics",
    "machine",
    "learning",
    "find",
    "tutorial",
    "playlist",
    "follow",
    "tutorials",
    "many",
    "tutorials",
    "exercise",
    "today",
    "exercise",
    "majority",
    "exercise",
    "practice",
    "right",
    "like",
    "video",
    "please",
    "give",
    "thumbs",
    "share",
    "friends",
    "thank"
  ],
  "keywords": [
    "convolutional",
    "network",
    "video",
    "cnn",
    "scale",
    "rotation",
    "means",
    "let",
    "say",
    "roses",
    "training",
    "set",
    "images",
    "two",
    "flowers",
    "supply",
    "image",
    "rose",
    "use",
    "called",
    "data",
    "augmentation",
    "samples",
    "try",
    "new",
    "example",
    "flower",
    "like",
    "one",
    "type",
    "apply",
    "contrast",
    "using",
    "see",
    "model",
    "accuracy",
    "going",
    "tensorflow",
    "uh",
    "notebook",
    "first",
    "python",
    "okay",
    "thing",
    "file",
    "photos",
    "different",
    "function",
    "get",
    "folder",
    "directory",
    "want",
    "current",
    "dot",
    "whatever",
    "know",
    "specify",
    "path",
    "take",
    "look",
    "five",
    "daisy",
    "make",
    "convert",
    "way",
    "read",
    "numpy",
    "array",
    "useful",
    "converted",
    "object",
    "give",
    "quickly",
    "length",
    "three",
    "zero",
    "number",
    "show",
    "error",
    "install",
    "opencv",
    "run",
    "particular",
    "also",
    "maybe",
    "kind",
    "well",
    "dictionary",
    "right",
    "simple",
    "call",
    "dimensional",
    "x",
    "rgb",
    "resize",
    "train",
    "name",
    "every",
    "api",
    "learning",
    "test",
    "much",
    "always",
    "divide",
    "values",
    "random",
    "could",
    "0",
    "layers",
    "layer",
    "max",
    "dense",
    "activation",
    "neurons",
    "linear",
    "1",
    "2",
    "65",
    "overfitting",
    "percent",
    "score",
    "transformation",
    "zoom"
  ]
}