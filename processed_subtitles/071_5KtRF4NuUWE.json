{
  "text": "hey everyone i welcome you all to this\ndevops full course by simply learn in\nthis complete course we will learn\neverything that we need to know to\nexcellent devops\nwe have matthews chidanand and anuj to\nguide us through this journey\nwe shall begin with having a basic\nunderstanding of devops with a short\nanimated video\nafter that we shall dive deeper and\nunderstand what devops is all about\nwe shall see what is its relevance in\nthe present scenario\nwe shall learn different tools in a\nlearning journey the tools that we shall\nsee are git\ngradle maven selenium docker chef\nansible puppet nagios and jenkins\nafter we have a fair amount of knowledge\nregarding devops and devops tools\nwe will look at the interview questions\nthat will increase our chances to crack\nany devops interview\nso before we begin make sure you have\nsubscribed to our youtube channel and\ndon't forget to click on the bell icon\nso you never miss an update from simply\nlearn\nnow without any further ado let's begin\nwith our animated introduction\nmeet tim\ntim builds a robot in his lab\na climate controlled and pollution-free\nenvironment\nonce he's done he drops the robot off at\nhis project partner mia's house mia\ntakes it out to her backyard to ensure\nthat the robot meets the requirements\nbut here is where the problem arises the\nchange in the environment causes the\nrobot to malfunction\nmia is now really annoyed and she has a\nlot to correct and it seems to her as so\ntim didn't really do much\nthis wall between them leaves a poor\nrobot to bite the dust\nwell what if we broke this wall tim and\nmiana work together in a common space\ntim develops each block of functionality\nof the robot which is then immediately\nchecked by mia both are now working\nsimultaneously instead of waiting on the\nother to finish their task as and when a\nfeature is ready for use they are put\ntogether to build the final product they\ndevelop a common mindset and share ideas\nto further speed up the process they use\nseveral tools which can automate every\nstage this means that the robot is now\nready sooner with less iterations and\nmanual work from an organization\nperspective tim would be the developer\nwhile mia the operations their union is\nthe core of the devops approach devops\nhas several stages and set of tools to\nautomate each of these stages let's have\na look at these tim first puts down a\nplan\nin terms of software this could mean\ndeciding on the modules and the\nalgorithms to use\nonce he has the plan he now codes the\nplan with tools such as git tim has a\nrepository for storing all the codes and\ntheir different versions this is called\nversion control\nnext this code is fetched and made\nexecutable this is the build stage tools\nsuch as gradle and maven will sort this\nout now before deployment the product is\ntested to catch any bugs the most\npopular tool automating testing is\nselenium once the products are tested\nmia must deploy it the deployed product\nis then continuously configured to the\ndesired state\nansible puppet and docker are some of\nthe most common tools used that automate\nthese stages\nnow every product is continuously\nmonitored in its working environment\nnagios is one such tool that automates\nthis space and the feedback is fed back\nto the planning stage\nand finally we have the core of the\ndevops lifecycle the integration stage\ntools such as jenkins is responsible for\nsending the code for build and test if\nthe code passes the tests it's further\nsent for deployment this is called\ncontinuous integration\nlet's now have a look at an organization\nthat has adopted the devops approach\nwhich of the below sequence of steps\nwould they follow to develop a software\nleave your answers in the comment\nsection\nkeep an eye out for the right answer on\nthe comment section or our youtube\ncommunity\ngiants such as amazon netflix target xc\nand walmart have all adopted devops and\nseen a considerable increase in delivery\nand quality\nin 2014 an hour of downtime for netflix\nwould cost it two hundred thousand\ndollars\nit became absolutely crucial that\nnetflix prepared themselves for any sort\nof failure and so they took to the\ndevops approach and implemented it in\nthe most unique way they developed a\ntool called simeon army this tool\ncreated failures and automatically\ndeployed them in an environment that did\nnot affect the users\nthe team would troubleshoot these\nfailures and this gave them enough\nexperience to deal with any degree of\ncollapse with everything being automated\nand happening simultaneously\norganizations can now deliver at a much\nfaster pace so considering the benefits\nof devops and its divergence from the\ntraditional methods would devops be the\nfuture uh we're going to go through what\nwe need to be able to do to go to devops\nwhat the arguments are and why you need\nto do devops and they will actually go\nthrough all the individual tools you\nneed to be able to successfully\nimplement devops within your\norganization in addition to that we're\nalso going to take time and go through\neach of those tools so you get a good\nunderstanding of a step-by-step\ninstructions on how to do basic setup of\neach of those tools so let's get started\nso what was devops before so what was\nthe process that we took for doing\ndelivery before devops well it was a\nmodel called waterfall and waterfall was\na very traditional approach to actually\nbuilding out solutions and the reason\nwhy it's called waterfall is that you\nbring out all the individual\nrequirements and individual sections of\na project and they cascade off each\nother so if we look at the breakdown we\nhave requirements design we have\nimplementation we have verification we\nhave maintenance you'll have user\nacceptance testing and this is all based\non the software development uh lifecycle\nmodel or sdlc and it's been around for\nquite some time and is still used by a\nlot of companies today the challenge you\nhad with the waterfall model is that it\nreally is a very long drawn out model\nfor actually building and delivering\nsolutions so it took a very long time to\nactually um write code and then deploy\nthe code and it was very difficult to\nactually identify problems within the\ncode and provide feedback to the\ndevelopment team on what to fix um and\nthis really was a very time consuming\nwe're talking about months sometimes\nyears for projects to actually go\nthrough a waterfall model process so\nalong came a new method of being able to\ndo delivery and it's called agile and\nthe agile approach is a way of being\nable to take the actual\nwork that's done in a waterfall model\nand compress it down into small\niterations and what we would do is a\nfundamental change is that you would\nactually take uh teams that were\ndisparate and as part of the individual\ncascades within a waterfall project and\nyou actually bring them together so you\nhave your requirements team in person\ndesign developer and release management\nteam all together in one group working\non an iteration the great thing about\nagile is that you took a process that\nwas weeks or months or even years in\nlength as it was with waterfall and you\nreduce it down to two or four week\nsprints depending on the cadence for\nyour team uh typically you have a\ntwo-week sprint and then the goal is is\nthat at the end of each sprint or\nsometimes every other sprint you would\ndo a software release and so that\ncustomers were getting the software much\nfaster the problem that we still ran\ninto though with um agile is\nfundamentally similar to what we were\nhaving with waterfall uh you have your\ndevops person working on code on their\nsystem and you'll be working great on\ntheir computer and then you have the\noperations person who's migrating the\ncode from the developers environment the\ntest environment to the production\nenvironment and you would run into\nissues where the code simply doesn't\nwork and there's a lot of reasons why\nthat would happen uh the actual\ndeveloper environment would often be\nvery different or would have different\ndependencies in it so the the hardware\nthe the software there may be additional\nuh applications that were installed on\nthe operating system that simply hadn't\nbeen transferred over to the operations\nenvironment and so what you would have\nis a disconnect between the developer\nenvironment and the operations\nenvironment making it difficult um to\nactually roll out code so you'd run into\na program where when you rolled out code\nyou'd have to have a rollback plan in\ncase the code wouldn't work in\nproduction and so each release became an\nevent where everybody got very stressed\nabout the actual event of releasing code\nbecause you didn't know whether it was\ngoing to work so devops really looks to\naddress and solve a lot of these\nproblems so the key word that you'll\noften hear with\ndevops is continuous integration and\nwhat that means is essentially that as a\ndeveloper is working on their code the\ncode is constantly being tested against\nnot just the actual code itself with\nunit testing but the environment with\nwhich it's going to be released in and\nthe goal from a devops model is that the\nbreakdown of communication that happens\nwith waterfall and agile where dev\ndevelopers and operations teams aren't\nworking in the same environment is being\nremoved and you're able to provide a\ncontinuous and contiguous environment\nbetween the developer and the apple\nactual operating model so the reality is\nwhen the developer is working on their\ncode they're actually working in an\nenvironment that is identical to the\nproduction environment and so when the\nactual operations person comes to\nactually do releases for the code and\nyou can see some teams are doing as many\nas 20 to even up to 50 releases to\nproduction environments every single day\nyou're able to guarantee that the actual\ncode itself will work and releases go\nfrom being a stressful event to a\nbyproduct of good testing and good setup\nand structure for how you actually build\nout your solutions so what we're seeing\nhere so the goal is that as a developer\nand as an operations person that the\ncode is working continuously in both\nenvironments you have continuous\nintegration and continuous delivery so\nsimply put what we're able to do is\nwe're able to eliminate the problem of\nthe operation environment not being in\nsync with the development environment\nand this is a improvement on agile this\nis not to say that waterfall or agile\nare wrong as delivery models what it is\nis just a maturity of the ability to\ndeliver solutions and devops is just\nanother rung in that maturity curve\nusing tools that are available to us now\nthat five ten years ago simply weren't\navailable so the goal is for you as a\nteam to move to a devops model where you\ncan implement continuous releases on\nyour software as long as you're using\nthe tools that are available and the\ngood news is those tools are open source\ntools so let's go through some of the\nbenefits of why you'd want to go and use\ndevops so you know essentially what's in\nit for you so let's over the next few\nslides we're going to go through what is\ndevops we're going to go through the\nbenefits of devops so in the last few\nslides you've actually seen you know\nwhat is devops and the benefits of\ndevops along with the life cycle but\nwe're also going to start digging into\nthe tools you have that are useful for\ndevops and we're going to focus in on\nseven tools that can provide an\nend-to-end infrastructure for delivering\ndevops solutions but there are\nsignificantly more tools available on\nthe market but these are seven of the\nmost popular uh for each of their\ncategories so devops really is an\nessential collaboration between the\ndevelopment team and the operations team\nthese are teams that have in past been\nsomewhat at conflict with each other and\nwhat you have now is an opportunity\nwhere those teams can now work\ncontinuously with each other the\nexpectation with devops is that it will\ncontinue to mature indeed you're\nactually even seeing some groups which\nare now called devsecops where they're\nintegrating security as part of the\ndelivery between the development team\nand the operations team the bottom line\nis a devops engineer is highly in demand\nthe demand for devops engineer is\nliterally going through the roof with\nsalaries going up exponentially around\nthat so let's dig into some of the\nbenefits of devops it's not just a new\ncatchphrase it's actually got\nsignificant value and how you can speed\nup delivery of your software so the\nbenefits of devops can really broken up\ninto a number of key areas first of all\nwe have continuous delivery of software\nwhich allows you to continuously release\nnew features with the security and\nunderstanding that the software going\nout is of high quality it allows the\nteams that are working on the software\ndelivery within your organization to\nmore effectively collaborate with each\nother so that you're all talking from\nthe same page and understanding of what\nneeds to be delivered the deployment\nprocess itself moves from being an event\nwhere there's a lot of stress and\nthere's a lot of contingency plans to\nbeing a much easier deployment the\nefficiency within the actual code that\nyou're writing the ability to scale up\nusing the different tools are available\nallows you to be able to bring in and\nscale up and reduce the teams you have\nrunning the software as needed errors\ncan be fixed much earlier and more\nquickly and can be caught before\nanything gets pushed out to the\nproduction environment and fundamentally\nwhat we're looking for is improving the\nsecurity of the actual releases so the\nactual concept of security is center to\nall the work you're doing and then\nfinally what really allows you to reduce\nthe number of errors is that there is\nmuch less manual intervention you there\nis a greater reliance on scripted\nenvironments that you can actually test\nand validate for their\nsecurity reliability and uptime\nefficiency so let's talk a little bit\nabout the life cycle of a devops so the\nvery first step that you'll take is to\nactually build out a build and test\nenvironment and this is a continuous\nbuilding test branch and this is managed\nwith the first step of your source code\nonce you move through that and you're\nlooking at continuous integration which\nmeans that every time somebody checks in\ntheir code they're validating that the\ncode actually can run in the production\nenvironment once you've actually then\npassed the end continuous integration\nand the testing that you have with your\ncode you're looking at continuous\ndeployment if the code works and is\navailable to be released into the\nproduction environment let's go ahead\nand release it and once you actually\nhave release code then you want to be\nable to validate that your environment\nis working efficiently you may release\ncode that is a new feature within your\napplication and customers may then\ngravitate immediately to that new\nfeature if they do you want to be able\nto ensure that the code is working and\nmore importantly that the infrastructure\nis there to support and then finally\nyou're looking at software released as a\ncontinuous event and then you go back to\nthe beginning you start working on more\ncode you run it through your build\nenvironment and continuous integration\ndeployment continuous monitoring and\nkeep that cycle moving so let's dig into\nthe tools that you as a devops engineer\nwould need to learn if we break down the\nenvironment that we have all the way\nfrom source code management to software\nrelease and there are a number of key\ntools that you want to be able to use so\nfor instance source code management and\nget is an open source tool that you\nwould want to use for managing your code\nthe continuous build and test\nenvironment will be managed with maven\nand selenium integration with the\nenvironments that you're working on is\nmanaged through jenkins the actual\ndeployment to your production\nenvironments will be managed with\nproducts such as ansible and docker and\nthen the monitoring of your network\nwould be used with tools like negios the\nthing that you have to remember with all\nthese tools is that they're open source\ntools there is no licensing that you\nhave to uh purchase uh some of the tools\nwill have a pro level licensing that you\ncan choose to select but to get started\nall of these are open source tools you\ncan actually start using for free right\nnow so we'll start by downloading and\ninstalling git on our system we'll then\nhave a look at the git bash interface\nwe'll type in some basic git commands\nnext we'll create a local repository\nthat is we'll create a repository on a\nlocal machine we'll then connect to a\nremote repository and finally we'll push\nthe file onto github first things first\nwe need to download and install git so\ndownload git for windows and i'll select\nthe second link\nso 2.19\nwhich is the most latest version of kit\nthat's the one we want for windows\nsystem choose your version so mine is a\n64-bit system and it's downloading so\nthis will take a while\nso git is finally downloaded now we need\nto install this on our system\nclick here\nrun\nso go to next we don't have to change\nthis path\nuh just so just click on in quick launch\nand on desktop\nnext\nnext again next nothing to change here\neither\nand install\nso now git is getting installed on our\nsystem so we don't need to view the\nrelease notes we just want to launch the\ngit bash\nso let's just tick that and then click\non finish\nand your git bash interface appears here\nso we are on the master branch the first\nthing we do is we'll check the version\nfor our git so the command is git dash\ndash version\nand as you can see version 2.19.1\non our windows system which is exactly\nwhat we just downloaded we'll now\nexplore the help command so let's just\ntype get help config so config is\nanother command and as i hit enter the\nmanual page for the second command\nopened up which is config so what help\ncommand does is that it provides the\nmanual or the help page for the command\njust following it\nso in case you have any doubts regarding\nhow a command is used what a command is\nused for or the various syntax of the\ncommand you can always use the help\ncommand now there's another syntax for\nusing the help command itself which is\ngit config dash dash help enter this\ndoes the exact same thing as you can see\nnow that we looked at the help command\nlet's begin by creating a local\ndirectory so mkdir\ntest\nnow test is my new directory i'll move\ninto this directory so cd test\ngreat so now that we are inside our test\ndirectory let's initialize this\ndirectory so git\ninit is the command for initializing the\ndirectory and as you can see as you can\nsee the path here this is the local path\nwhere a directory is created so i'll\njust show you the directory test and\nit's completely empty\nwhat we do now is we'll create a text\nfile within this new directory that we\ncreated so new text document and i'll\njust name this demo i'll open this and\njust put in some dummy content\nso hello simply done\nsave this file and go back to your bash\ninterface\nlet's just check the status now so git\nstatus and as you can see\nour file has appeared it's visible but\nnothing is committed yet so this means\nthat we have not made any change to our\nfile through the git tool itself so the\nnext thing that we are going to do is we\nwill be adding demo to our current\ndirectory the next command that we'll be\napplying is the commit command and when\nyou add certain files to the current\ndirectory the commit command is applied\non all the above directories so git\ncommit minus m and a message that will\nappear once the file is committed\nso as you can see one file is changed\nand one insertion\ni'll just clear the screen next thing we\nneed to do is we need to link our git to\nour github account so the command for\ndoing that is git config\nglobal user dot username\nand this will be followed by our\nusername so let me just show you my\ngithub account\nso this is my github profile and my\nusername is\nsimplylearn.github so guys before you\nbegin this procedure just make a github\naccount type in my username here simply\nlearn github and enter and there you go\nour git is successfully linked with\ngithub next thing we do is we'll just\nopen our github\nand we'll create a new repository give a\nrepository name so i'll name it test\nunderscore demo and create repository\ngreat so our repository is created this\nis our remote repository what we do next\nis just copy the link and then go back\nto your bash interface\nnow we need to link our remote and our\nlocal repository\nso git remote origin and then paste\nthe http link and now that our local\nrepository and our remote repository are\nlinked we can push our local file onto\nour remote repository so the command for\ndoing that is git\npush origin master as we are on the\nmaster branch\nand that's done so now let's move back\nto github i'll just click on test demo\nand as you can see here our local file\nhas been pushed to our remote repository\nwith that we have successfully completed\nour demo so we're going to introduce the\nconcept of version control that you will\nuse within your devops environment then\nwe'll talk about the different tools are\navailable in a distributed version\ncontrol system we'll highlight a product\ncalled git which is typically used for\nversion control today and you'll also go\nthrough what are the differences between\nget and github you may have used github\nin the past or other products like get\nlab and we'll explain what are the\ndifferences between git and git and\nservices such as github and git lab will\nbreak out the architecture of what a get\nprocess looks like and how do you go\nthrough and create forks and clones how\ndo you have collaborators being added\ninto your projects how do you go through\nthe process of branching merging and\nrebasing your project and what are the\nlist of commands that are available to\nyou in get finally i'll take you through\na demo on how you can actually run git\nyourself and in this instance use the\nsoftware of git against a public service\nsuch as github all right let's talk a\nlittle bit about version control systems\nso you may have already been using a\nvirtual control system within your\nenvironment today you may have used\ntools such as microsoft's team\nfoundation services but essentially the\nuse of a version control system allows\npeople to be able to have files that are\nall stored in a single repository so if\nyou're working on developing a new\nprogram that such as a website or an\napplication you would store all of your\nversion control software in a single\nrepository now what happens is that if\nsomebody wants to make changes to the\ncode they would check out all of the\ncode in the repository to make the\nchanges and then there would be an\naddendum added to that so um there will\nbe the version one changes that you had\nthen the person would then\nlater on check out that code and then be\na version 2 and add it to that code and\nso you keep adding on versions of that\ncode the bottom line is that eventually\nyou'll have people being able to use\nyour code and that your code will be\nstored in a centralized location however\nthe challenge you're running is that\nit's very difficult for large groups to\nwork simultaneously within a project the\nbenefits of a vcs system a version\ncontrol system\ndemonstrates that you're able to store\nmultiple versions of a solution in a\nsingle repository now let's take a step\nat some of the challenges that you have\nwith traditional version control systems\nand see how they can be addressed with\ndistributed version control so in a\ndistributed version control environment\nwhat we're looking at is being able to\nhave the code shared across a team of\ndevelopers so if there are two or more\npeople working on a software package\nthey need to be able to effectively\nshare that code amongst themselves so\nthat they constantly are working on the\nlatest piece of code so a key part of a\ndistributed version control system\nthat's different to just a traditional\nversion control system is that all\ndevelopers have the entire code on their\nlocal systems and they try and keep it\nupdated all the time it is the role of\nthe distributed vcs server to ensure\nthat each client and we have a developer\nhere and developer here and developer\nhere and each of those our clients have\nthe latest version of the software and\nthen that each person can then share the\nsoftware in a peer-to-peer like approach\nso that as changes are being made into\nthe server of changes to the code then\nthose changes are then being\nredistributed to all of the development\nteam the tool to be able to do an\neffective distributed vcs\nenvironment is get now you may remember\nthat we actually covered git in a\nprevious video and we'll uh reference\nthat video for you so we start off with\nour remote git repository and people are\nmaking updates to the copy of their code\ninto a local environment that local\nenvironment can be updated manually and\nthen periodically pushed out to the git\nrepository so you're always pushing out\nthe latest code that you've code changes\nyou made into the repository and then\nfrom the repository you're able to pull\nback the latest updates and so your git\nrepository becomes the kind of the\ncenter of the universe for you and then\nupdates are able to be pushed up and\npulled back from there what this allows\nyou to be able to accomplish is that\neach person will always have the latest\nversion of the code so what is get\nget is a distributed version control\ntool used for source code management so\ngithub is the remote server for that\nsource code management and your\ndevelopment team can connect their get\nclient to that\nremote hub server git is used to track\nthe changes of the source code and\nallows large teams to work\nsimultaneously with each other it\nsupports a non-linear development\nbecause of thousands of parallel\nbranches and has the ability to handle\nlarge projects efficiently so let's talk\na little bit about git versus github so\nget is a software tool whereas github is\na service and i'll show you how those\ntwo look in the moment you install the\nsoftware tool for git locally on your\nsystem whereas github because it is a\nservice is actually hosted on a website\nget is actually the software that used\nto manage different versions of source\ncode whereas github is used to have a\ncopy of the local repository stored on\nthe service on the website itself get\nprovides command line tools that allow\nyou to interact with your files whereas\ngit help has a graphical interface that\nallows you to check in and check out\nfiles so let me just show you the two\ntools here so here i am at the git\nwebsite and this is the website you\nwould go to to download the latest\nversion of git and again git is a\nsoftware package that you install on\nyour computer that allows you to be able\nto do version control in a peer-to-peer\nenvironment for that peer-to-peer\nenvironment to be successful however you\nneed to be able to store your files in a\nserver somewhere and typically a lot of\ncompanies will use a service such as git\nhub as a way to be able to store your\nfiles so git can communicate effectively\nwith github there are actually many\ndifferent companies that provide similar\nservice to github git lab is another\npopular service but you also find that\ndevelopment tools such as microsoft\nvisual studio are also incorporating git\ncommands into their tools so the latest\nversion of visual studio team services\nalso provides this same ability but\ngithub it has to be remembered is a\nplace where we actually store our files\nand can very easily create public and\nshareable is a place where we can store\nour files and create public shareable\nprojects you can come to github and you\ncan do a search on projects you can see\nat the moment i'm doing a lot of work on\nblockchain but you can actually search\non the many hundreds of projects here in\nfact i think there's something like over\na hundred thousand projects being\nmanaged on github at the moment that\nnumber's probably actually much larger\nthan that and so if you are working on a\nproject i would certainly encourage you\nto start at github to see if somebody's\nalready maybe done a prototype that\nthey're sharing or they have an open\nsource project that they want to share\nthat's already available and in github\ncertainly if you're doing anything with\nthem azure you'll find that there are\nthousands forty five thousand azure\nprojects currently being worked on\ninterestingly enough github was recently\nacquired by microsoft and microsoft is\nfully embracing open source technologies\nso that's essentially the difference\nbetween git and github one is a piece of\nsoftware and that's git and one is a\nservice that supports the ability of\nusing the software and that's github so\nlet's dig deeper into the actual git\narchitecture itself so the working\ndirectory is the folder where you are\ncurrently working on your git project\nand we'll do a demo later on where you\ncan actually see how we can actually\nsimulate each of these steps so you\nstart off with your working directory\nwhere you store your files and then you\nadd your files to a staging area where\nyou are getting ready to commit your\nfiles back to the main branch on your\ngit project you will want to push out\nall your changes to a local repository\nafter you've made your changes and these\nwill commit those files and get them\nready for synchronization with the\nservice and will then push your services\nout to the remote repository an example\nof a remote repository would be github\nlater when you want to update your code\nbefore you write any more code you would\npull the latest changes from the remote\nrepository so that your copy of your\nlocal software is always the latest\nversion of the software that the rest of\nthe team is working on one of the things\nthat you can do is as you're working on\nnew features within your project you can\ncreate branches you can merge your\nbranches with the mainline code you can\ndo lots of really creative things that\nensure that that a the code remains at\nvery high quality and b that you're able\nto seamlessly add in new features\nwithout breaking the core code so let's\nstep through some of the concepts that\nwe have available and get so let's talk\nabout forking and cloning and get so\nboth of these terms are quite old terms\nwhen it comes to development but forking\nis certainly a term that goes way way\nway back um long before we had\ndistributed cvs systems such as the ones\nthat were using with git to fork a piece\nof software is a particular open source\nproject you would take the project and\ncreate a copy of that project and but\nthen you would then associate a new team\nand new people around that project so it\nbecomes a separate project in entirety a\nclone and this is important when it\ncomes to working with git a clone is\nidentical with the same teams and same\nstructuring as the main project itself\nso when you download the code you're\ndownloading exact copy of that code with\nall the same security and access rights\nas the main code and then you can then\ncheck that code back in and potentially\nyour code because it is identical could\npotentially become the main line code in\nthe future now that typically doesn't\nhappen your changes are the ones that\nmerge into the main branch but also but\nyou do have that potential where your\ncode could become the main code with git\nyou can also add collaborators that can\nwork on the project which is essential\nfor projects where particularly you have\nlarge teams this works really well when\nyou have product teams where the teams\nthemselves are self-empowered you can do\na concept what's called branching and\nget and so say for instance you are\nworking on a new feature that new\nfeature and the main version of the\nproject have to still work\nsimultaneously so what you can do is you\ncan create a branch of your code so you\ncan actually work on the new feature\nwhereas the rest of the team continue to\nwork on the main branch of the the\nproject itself and then later you can\nmerge the two together pull from remote\nis the concept of being able to pull in\nservices software the team is working on\nfrom a remote server and get rebase is\nthe concept of being able to take a\nproject and re-establish a new start\nfrom the project so you may be working a\nproject where there have been many\nbranches and the team has been working\nfor quite some time on different areas\nand maybe you kind of losing control of\nwhat the true main branch is you may\nchoose to rebase your project and what\nthat means though is that anybody is\nworking on a separate branch will not be\nable to branch their code back into the\nmainline branch so going through the\nprocess of a get rebase essentially\nallows you to create a new start for\nwhere you're working on your project so\nlet's go through forks and clones so you\nwant to go through the process so you\nwant to go ahead and fork the code that\nyou're working on so let's use this\nscenario that one of your team wants to\ngo ahead and add a new change to the\nproject the team member may say yeah go\nahead and you know create a separate\nfork of the actual project so what does\nthat look like so when you actually go\nahead and create a fork of the\nrepository you actually go and you can\ntake the version of the mainline branch\nbut then you take it completely offline\ninto a local repository for you to be\nable to work from and you can take the\nmainline code and you can then work on a\nlocal version of the code separate from\nthe mainland branch is now a separate\nfork collaborators is the ability to\nhave team members working on a project\ntogether so if you know someone is\nworking on a piece of code and they see\nsome errors in the code that you've\ncreated none of us are perfect at\nwriting code i know i've certainly made\nerrors in my code it's great to have\nother team members that have your back\nand can come in and check and see what\nthey can do to improve the code so to do\nthat you have to then add them as a\ncollaborator now you do that in github\nyou can give them permission within\ngithub itself that's really easy to do\nsuper visual interface that allows you\nto do the work quickly and easily and\ndepending on the type of permissions you\nwant to give them sometimes it could be\nvery limited permissions it may be just\nto be able to read the files sometimes\nit's being able to go in and make all\nthe changes you can go through all the\ndifferent permission settings on github\nto actually see what you can do but\nyou'll be able to make changes so that\npeople can actually have access to your\nrepository and then you as a team can\nthen start working together on the same\ncode let's step through branching and\nget so suppose you're working on an\napplication but you want to add in a new\nfeature and this is very typical within\na devops environment so to do that you\ncan create a new branch and build a new\nfeature on that branch so here you have\nyour main application on what's known as\nthe master branch and then you can then\ncreate a sub branch that runs in\nparallel which has your feature you can\nthen develop your feature and then merge\nit back into the master branch at a\nlater point in time now the benefit you\nhave here is that by default we're all\nworking on the master branch so we\nalways have the latest code the circles\nthat we have here on the screen show\nvarious different commits that have been\nmade so we can keep track of the master\nbranch and then the branches that have\ncome off which have the new features and\nthey can be many branches and get so get\nkeeps you the new features you're\nworking on in separate branches until\nyou're ready to merge them back in with\nthe main branch so let's talk a little\nbit about that merge process so you're\nstarting with the master branch which is\nthe blue line here and then here we have\na separate parallel branch which has the\nnew features so if we're to look at this\nprocess the base commit of feature b is\nthe branch f is what's going to merge\nback into the master branch and it has\nto be said there can be so many\ndivergent branches but eventually you\nwant to have everything merged back into\nthe master branch let's step through get\nrebase so again we have a similar\nsituation where we have a branch that's\nbeing worked in parallel to the master\nbranch and we want to do a get rebase so\nwe're at stage c and what we've decided\nis that we want to reset the project so\nthat everything from here on out with\nalong the master branch is the standard\nproduct however this means that any work\nthat's been done in parallel as a\nseparate branch will be adding in new\nfeatures along this new rebased\nenvironment now the benefit you have by\ngoing through the rebase process\nis that you're reducing the amount of\nstorage space that's required for when\nyou have so many branches it's a great\nway to just reduce your total footprint\nfor your entire project so get rebase is\nthe process of combining a sequence of\ncommits to form a new base commit and\nthe prime reason for rebasing is to\nmaintain a linear project history when\nyou rebase you unplug a branch and\nreplug it in on the tip of another\nbranch and usually you do that on the\nmaster branch and that will then become\nthe new master branch the goal of\nrebasing is to take all the commits from\na feature branch and put it together in\na single master branch it makes it the\nproject itself much easier to manage\nlet's talk a little bit about pull from\nremote suppose there are two developers\nworking together on an application the\nconcept of having a remote repository\nallows the code to the two developers\nwill be actually then checking in their\ncode into a remote repository that\nbecomes a centralized location for them\nto be able to store their code it\nenables them to stay updated on the\nrecent changes to the repository\nbecause they'll be able to pull the\nlatest changes from that remote\nrepository so that they are ensuring\nthat as developers they're always\nworking on the latest code so you can\npull any changes that you have made to\nyour forked remote repository to your\nlocal repository the command to be able\nto do that is written here and we'll go\nthrough a demo of how to actually do\nthat command in a little bit good news\nis if there are no changes you'll get a\nnotification saying that you're already\nup to date and if there is a change it\nwill merge those changes to your local\nrepository and you get a list of the\nchanges that have been made remotely so\nlet's step through some of the commands\nthat we have in get so git and it\ninitializes a local git repository on\nyour hard drive get ad adds one or more\nfiles to your staging area get commit\ndash m commit message is a commit\nchanges the get command commits changes\nto head up so the git command commits\nchanges to your local staging area get\nstatus checks the status of your current\nrepository and lists the files you have\nchanged get locked provides a list of\nall the commits made on your current\nbranch get diff use the changes that\nyou've made to the file so you can\nactually have files next to each other\nyou can actually see\nthe differences between the two files a\ngit push origin branch name so the name\nof your branch command will push the\nbranch to the remote repository so that\nothers can use it and this is what you\ndo at the end of your project git config\ndash global username will tell get who\nyou are by configuring the author name\nand we'll go through that in a moment\ngit config global user email will tell\nget the author of by the email id get\ncloned creates a get repository copy\nfrom a remote source and get remote add\norigin server connects the local\nrepository to the remote server and adds\nthe server to be able to push to it get\nbranch and then the branch name will\ncreate a new branch for you to create a\nnew feature that you may be working on\ngit checkout and then the branch name\nwill allow you to switch from one branch\nto another branch\ngit merge branch name or merge a branch\ninto the active branch so if you're\nworking on a new feature you're gonna\nmerge that into the main branch i get\nrebase will reapply commits on top of\nanother base tip and get rebase will\nreapply commits on top of another base\ntip and these are just some of the\npopular get commands there are some more\nbut you can certainly dig into those as\nyou're working through using get so\nlet's go ahead and run a demo using get\nso now we are going to do a demo using\nget on our local machine and github as\nthe remote repository for this to work\ni'm going to be using a couple of tools\nfirst i'll have the deck open as we've\nbeen using up to this point the second\nis i'm going to have my terminal window\nalso available and let me bring that\nover so you can actually see this and\nthe terminal window is actually running\ngit bash as the software in the\nbackground which you'll need to download\nand install you can also run git batch\nlocally on your windows computer as well\nand in addition i'll also have the\ngithub repository that we're using for\nsimply learn i already set up and ready\nto go all right so let's get started so\nthe first thing we want to do is create\na local repository so let's go ahead and\ndo exactly that so the local repository\nis going to reside in my development\nfolder that i have on my local computer\nand for me to be able to do that i need\nto create a drive in that folder so i'm\ngoing to go ahead and change the\ndirectory so i'm actually going to be in\nthat folder before i actually create\nmake the new folder so i'm going to go\nahead and change directory\nand now i'm in the development directory\ni'm going to go ahead and create a new\nfolder\nand that's gone ahead and created a new\nfolder called hello world\ni'm going to move my cursor so that i'm\nactually in the hello world folder\nand now that i'm in the helloworld\nfolder i can now initialize this folder\nas a git repository\nso i'm going to use the git command init\nto initialize and let's go ahead and\ninitialize that folder so let's see\nwhat's happened so here i have my hello\nworld folder that i've created and\nyou'll now see that we have a hidden\nfolder in there which is called dot get\nand we expand that we can actually see\nall of the different subfolders that git\nrepository will create so let's just\nmove that over a little bit so we can\nsee the rest of the work\nand now if we check on our folder here\nwe actually see this is users matthew\ndevelopment hello world dot get and that\nmatches up with hidden folder here\nso we're going to go ahead and create a\nfile called readme.txt\nin our folder so here is our hello world\nfolder and i'm going to go ahead and\nusing my text editor which happens to be\nsublime\ni'm going to create a file and it's\ngoing to have in there text hello world\nand i'm going to call this one readme\ndot txt\nif i go to my hello world folder you'll\nsee that we have the readme.txt\nfile actually in the folder what's\ninteresting is if i select the git\nstatus command what it'll actually show\nme is that this file has not yet been\nadded to the commits yet for this\nproject so even though the file is\nactually in the folder it doesn't mean\nthat it's actually part of the project\nfor us to do that we actually have to go\nand\nselect\nfor us to actually commit the file we\nhave to go into our terminal window and\nwe can use the git status to actually\nread the files that we have there so\nlet's go ahead and use the get status\ncommand and it's going to tell us that\nthis file has not been committed you can\nuse this with any folder to see which\nfiles and subfolders have been committed\nand what we can now do is we can\ngo and actually add the readme file so\nlet's go ahead and select at git add so\nthe git command is add readme.txt\nso that then adds that file into our\nmain\nproject and we want to then commit those\nfiles into the main repositories history\nand so to that do that we'll hit the the\nget command commit and we'll do a\nmessage\nin that commit and this one will be\nfirst commit\nand it has committed that project what's\ninteresting is we can now go back into\nreadme file and i can change this so we\ncan go\nhello get\ngit is a very popular\nversion control\nsolution\nand we'll\nwe'll save that\nnow what we can do is we can actually go\nand see if we have made differences to\nthe readme text so to do that we'll use\nthe death command forget so we do get\ndef\nand it gives us two releases the first\nis what the original text was which is\nhello world and then what we have\nafterwards is what is now the new text\nin green which has replaced the original\ntext\nso what we're going to do now is you\nwant to go ahead and create an account\non github we already have one and so\nwhat we're going to do is we're going to\nmatch the account from github with our\nlocal account so to do that we're going\nto go ahead and say get config\nand we're going to do dash and it's\ngoing to be a global user dot name and\nwe'll put in our username that we use\nfor\ngithub in this instance we're using the\nsimply learn\ndash\ngithub account name\nand under the github account you can go\nahead and create a new repository name\nin this instance we call the repository\nhello dash world\nand what we want to do is connect the\nlocal github account with the remote\nhelloworld.gov\nand we do that by using this command\nfrom get which is our remote connection\nand so let's go ahead and type that in\nopen this up so we can see the whole\nthing so we can type in git\nremote add\norigin\nhttps\nbackslash backslash\ngithub\ndot com\nslash\nsimply learn\ndash github and you have to get this\ntyped in correctly when you're typing in\nthe location hello dash world dot get\nthat creates the connection to your\nhello world account\nand now we want to do is we want to push\nthe files to the remote location using\nthe get push command commit get push\norigin\nmaster\nso we're going to go ahead and connect\nto our local remote github so i'm just\ngoing to bring up my terminal window\nagain and so let's select git remote add\norigin\nand we'll connect to the remote location\ngithub.com\nsimply\nlearn\ndash\ngithub\nslash\nhello\ndash world dot get\noh we actually have already connected so\nwe're uh connected to that successfully\nand now we're going to push the master\ngesh so get\npush origin\nmaster\nand everything is connected and\nsuccessful\nand if we go out to github now\nwe can actually see that our file was\nupdated just a few minutes ago\nso what we can actually do now is we can\ngo and fork a project from github and\nclone it locally so we're going to use\nthe\nfork tool that's actually available on\ngithub let me show you where that is\nlocated\nand\nhere is our branching tool it's actually\nchanged more recently with a new ui\ninterface\nand once complete we'll be able to then\npull a copy of that to our account using\nthe fork's new http url address\nso let's go ahead and do that\nso we're going to go ahead and create a\nfork of our project now to do that you\nwould normally go in when you go into\nyour project you'll see that there are\nfork options in the top right hand\ncorner of the screen now right now i'm\nactually logged in with the default\nprimary account for this project so i\ncan't actually fork the project as i'm\nworking on the main branch however if i\ncome in with a separate id and here i am\ni have a different id and so i'm\nactually pretending i'm somebody else i\ncan actually come in and select the fork\noption and create a fork of this project\nand this will take just a few seconds to\nactually create the fork\nand there we are we have gone ahead and\nuh created the fork\nso you want to say clone or download\nwith this and so this is the\ni select\nthey'll actually give me the web address\ni can actually show you what that looks\nlike i'll open up my text editor\njust doesn't correct\ni guess that is correct\nso i'm going to copy that\nand\ni can fork the project locally and clone\nit locally i can change the directory so\ni can create a new directory that i'm\ngoing to put my files in and then post\nin that content into that file so i can\nnow actually have multiple versions of\nthe same code running on my computer\ni can then go into default content\nand use the patchwork command\nto actually\nso i can create a copy of\nthat code that we've just created and we\ncall it that's a clone and we can create\na new folder that we're actually putting\nthe work in and we could for whatever\nreason we wanted to we could call this\nfolder patchwork and that would be maybe\na new feature and then we can then paste\nin the url of the new directory that has\nthe forked work in it and now at this\npoint we've now pulled in and created a\nclone of the original content\nand so this allows us to go ahead and\nfork out all of the work for our project\nonto our computer so we can then develop\nour work separately\nso now what we can actually do is we can\nactually create a branch of the fork\nthat we've actually pulled in onto our\ncomputer so we can actually then create\nour own code that runs in that separate\nbranch\nand so we want to check out um the the\nbranch and then push the origin branch\nuh down to our computer\nthis will give us the opportunity to\nthen add our collaborators so we can\nactually then go over to\ngithub and we can actually come in and\nadd in our collaborators\nand we'll do that under settings and\nselect collaborators and here we can\nactually see we have different\ncollaborators that have been added into\nthe project and you can actually then\nrequest people to be added via their\ngithub name or by email address\nor by their full name\none of the things that you want to be\nable to do is ensure that you're always\nkeeping the code that you're working on\nfully up to date by pulling in all the\nchanges from your collaborators\nyou can create a new branch and then\nmake changes emerged into the master\nbranch now to do that you would create a\nfolder and then that folder in this\ninstance would be called test we would\nthen move our cursor into the folder\ncalled test and then initialize that\nfolder so let's go ahead and do that so\nlet's call create a new folder and we're\ngoing to first of all change our root\nfolder and we're going to go to\ndevelopment\nand we're going to create a new folder\nwe'll call it test and we're going to\nmove into the test folder and we will\ninitialize\nthat folder\nand we're going to move some files into\nthat test folder\ncall this one test one\nand then we're gonna do file\nsave as and this one's gonna be test\ntwo\nand now we're gonna commit those files\nokay add\nthat kit add and then we'll use the\ndot to pull in all files\nand then git\ncommit\nm\nfiles\ncommitted\nmake sure i'm in the right folder here i\ndon't think i was\nand now that i'm in the correct folder\nlet's go ahead and\nand\ncommit\nand it's gone ahead and edit those files\nand so we can see the two files that\nwere created have been added into the\nmaster\nand we can now go ahead and create a new\nbranch we call this one git\nbranch\ntest underscore\nbranch\nand let's go ahead and create a third\nfile to go into that folder\nthis is\nfile three\ninto file save as\nwe'll call this one\ntest3.txt\nand we'll go ahead and add\nthat file\nneeds to get\nadd\ntest3.txt\nand\nwe're going to move from the master\nbranch to the test branch\ngit\ncheck\nout\ntest underscore\nbranch\ni switched to the test branch\nand we'll be able to list out all of the\nfiles that are in the\nbranch now\nand we want to go through and merge the\nfiles into one area so let's go ahead\nand we'll do git\nmerge test underscore\nbranch\nand it's well we've already updated\neverything so that's good so otherwise\nit would tell us what we would be\nmerging\nand now all the files are merged\nsuccessfully into the master branch\nthere we go all merged together\nfantastic\nand so what we're going to do now is\nmove from master branch to test branch\nso get\ncheck out\ntest underscore\nbranch\nand we can modify the files the test\nthree file that we took out\nand\npull that file up\nand we can\nnow\nmodify\nand we can then\ncommit\nthat file\nback\nin\nand we've actually been able to then\ncommit the file with one changes and\nobviously it's the text free change that\nwas made\nnow we can now go through a process of\nchecking the file back in switching back\nto the master branch and ensuring that\neverything is in sync correctly\nwe may at one point want to rebase all\nof the work is kind of a hard thing you\nwant to do but it will allow you to\nallow for managing for changes in the\nfuture\nso let's just switch to it back to our\ntest branch\nwhich i think we're actually on we're\ngoing to create two more files\nlet's go to our folder here and let's go\ncopy those\nand that's created\nwe'll rename those tests\nfour\nand\nfive\nand so we now have additional files\nand we're going to add those into\nour branch that we're working on\nso we're going to go and select\ngit add\ndash\na\nand we're going to commit those files\nget\ncommit\ndash\na\ndash m\nadding\nto new\nfiles\nand it's added in the two new files\nso we have all of our files now we can\nactually list them out and we have all\nthe files that are in the branch\nand we'll switch then to our master\nbranch\nwe want to rebase the master\nso we do get rebase\nmaster\nand that will then give us the command\nthat everything is now completely up to\ndate\nwe can go\nget\ncheckout\nmaster to switch to the master account\nthis will allow us to then\ncontinue through and rebase the test\nbranch and then list all the files that\nare all in the same area\nso let's go\nget rebase\ntest\nunderscore branch\nand now we can list and there we have\nall of our files listed incorrectly\nnow we will be talking about that how\nexactly we can make use of maven here in\nperforming various kind of operations\nwhether it's a build compilation various\nkind of stuff there so let's talk about\nit why exactly we use maven here now me1\nis something which\nis a kind of a build tool which is there\nfor most of the job-based projects here\nso this tool also helps us in building\nup the source code by downloading some\ncouple of dependencies these\ndependencies are something which is\nbeing configured by the developers which\na developer feels that the project is\ndependent on and he requires those\ndependencies to be downloaded so uh this\ntool is specifically used to build and\nmanage any kind of a job-based project\nwhatever the complexity of the topic or\nthe project is there so this tool will\nbe able to handle that particular\nrequirement or that project so it\nsimplifies the uh day-to-day work of a\njava developer and helps them in their\nprojects for performing daily to daily\nactivities\nright now meven also helps us in getting\nthe uh specific jar files for each and\nevery project so if you are going you\ncan pretty much make a jar file var file\nor er file any kind of a package\nmechanism you can follow for your maven\nthere so to download the dependencies we\ndon't have to actually go to the\nofficial website of each and every\nsoftware you can easily get it uh the\ndependencies of each and every third\nparty band race on the mvnrepository.com\nthis is a website which is present on\nwhich if you visit you will be able to\ndownload the dependencies which is\nrequired by your project or by your\nspecific\nproject over here so it totally depends\non how exactly you want to download and\nyou want to get together\na specific repository over here so\nmvnrepository.com is the one if you\nvisit you will be able to download and\ngo through all the jar files dependent\njar files as independences which you\nrequire for your current project\nright so now what exactly is a maven all\nabout so let's see on that part\nso\nmaven is a popular open source build\ntool which is uh developed by the apache\ngroup and the primary ownership of this\ntool is to build publish and deploy\nseveral projects at once movement is\nwritten in java and it can be used to\nbuild projects written in c shaft scala\nruby etc so apart from java these are\nthe different programming languages or\nthe tools which is supported by the\nmaven here for performing the build\nactivity so the tool is used for build\nand management of any kind of a\njob-based project it simplifies the\nday-to-day\nwork of a java developer and helps them\nto automate most of the compilation or\nbuild uh perspective tasks on the\nprojects\nright now maven is a kind of a bomb\nbased project so it also known as an\nproject object model and it focuses on\nof simplification and standardization of\nthe building process in the process it\ntake cares of all the followings here\nbuilds dependencies reports\ndistribution releases mailing list so\nall these uh things are being taken care\nas in this particular process here and\nultimately it's an availability inside\nthe maven that how the overall build\nprocess needs to be automated and\nstandardized here so all these\nparticular mechanisms is can be followed\nas such over here so that we can have a\ngood\nstandards and the simplifications\nimplemented as such here now in this one\nwe are going to talk about that how we\ncan work on maven installation on\nwindows and ubuntu platform here so\nfirst of all we'll do it on the windows\nplatform here and we'll see that how the\ninstallation really works so for this\none i will be doing the installation\ninto my local system now before even\ngoing for maven maven is in kind of a\nbuild tool which is available there\nprimary for performing any kind of build\nautomation for the java based projects\nnow since it's used for java we also\nrequire the jdk installation onto our\nsystem so for that both of the\ninstallations we will be covering over\nhere and we'll see that how the\ninstallation really works as such over\nhere right so before even going for\nmaven we have to install the jdk onto\nour windows machine so that we can\nproceed with maven because maven\nrequires the jdec installation to be\nthere now there are two ways of jdk\ninstallation either you go for the exe\nfile or you extract the binaries of jdk\nto a directory and then set up the java\nunderscore home path for that but if you\nare using the executable that will\nperform the path configurations for you\nalso so in that case you don't have to\nreconfigure it again and again so that's\nwhat we are going to see here so first\nof all we will try to do the\ninstallation of jdk so for that we'll go\nto the website of jdk and then we have\nto click on this one to access the maven\ninstallations part here so that's what\nwe are going to do so let's proceed and\nlet's open the chrome and try to go\nthrough these two urls so that we can do\nthe installations one by one\nso here i have to just search for jdk8\ndownload so uh it will show me the url\nfor oracle.com so here you will get the\njdk for the different platforms for\ndifferent operating systems now here\nwhat you can see here that uh you have\nthe configurations in which you have the\njdk installation so we have to so here\ni'll go for the windows 64 version\nbecause that is something i will be\nusing to do the installation so this is\nthe complete executable link so here you\ncan download so we are downloading the\nsdk a\nu251 so\njust search for windows 64 yeah this is\nthe one so let me click on this one\nlet me quickly log into the web page so\nonce the login is done you will be able\nto see that it's trying to download the\nexe file so that was for the jdk for the\njava now for the me one i am going to go\nfor the\nmaven download over here so in this one\nthe maven repo link is there maven dot\napache dot orj is the link for this one\nnow here we have the different options\nyou can see here that the binder is like\narchive is there then sources archive is\nthere so depending on the installation\nwhich you want to perform you should be\nable to download that file and it works\nthere so let's first install the jdk\nportion and then we'll go with this one\nso we'll click on this one also anyways\nbecause uh it's something we have to\nanyways do it so we'll click on this so\nthat this maven is also getting started\ninstall or downloading over here so once\nboth of them are downloaded we will\nproceed further with the setup so let's\nwait for another one minute to do this\none\nso the apache maven is kind of\ndownloaded over here so we wait for the\njdk download also over here\nso next five ten seconds only left out\nso first jdk will be there and then even\ninstallation configurations will be\nthere so for me when we just have to\nextract into a directory and give the\nenvian home path into the uh properties\nuh into the variables so that it can\npick it up over there okay so we have to\nextract the zip file for maven give the\npath and then we will check with the\nmaven command whether it's working fine\nor not so let's try to install the\nexecutive so we'll open the directory\nwhere the executables are there so first\nof all we'll install the jdk so we'll\ndouble click the installer for jdk it's\noff around 200 mb so the complete jdk\nwill be installed\nso we have to just go for next now when\nyou go with the installer so usually the\njava home parts and all that stuff is\nalready configured so you don't really\nhave to change the passwords or java\nhome any kind of variable you have to\nput it up all those things will be\nautomatically cleaned up\nso it's running the installation\nclose\nso then we have to extract the maven so\nwe have to extract this directory\nbecause here the maven complete\nexecutables and libraries are there so\nwe just have to extract it and place\ninto a directory so that we can further\non use it and access the path so once\nthe axis is done\nyep so this is done there so i can\nrename it to like maven so i can rename\nit like to ask me one and i can cut it\ndown and put it into the seat drive here\nnow this is the maven home path which is\ngoing to be there right so all i have to\ndo is that i have to close this one and\nthis one and this one and this\nso what we have to do is that we have to\nreally go to the system properties so\nthat we can extract it so i'm going to\nopen the system properties over here\nproperties now here the advanced system\nsettings now in this one we will be\nsetting up the paths the environment\nvariable will go now here if you scroll\ndown you will see all the different\nparts which is available there as such\nover here\nnow if we want to see that if the java\nis fine or we require for jdk also so\nall we have to do is that we have to\nopen the cmd prompt window r we are\nproviding so using the window r i'm\nopening the run window where i can say\nlike cmd now in this cmd i'm going to\nsay like java\nhyphen version so java is there so which\nmeans that we don't have any problem as\nsuch\nnow i'll just go here and set up a new\none called mvn underscore home so here\nthe same path so you can browse for\ndirectory also but i am using the mvn\nhome over here in this one\nnow i have just added that and in the\npath variable in the last we have to\nactually\nadd the\nbin directory also so that whenever we\nrun the mvn command so that should also\nbe resolved so mvn underscore home is\nnot the only variable which you will be\nconfiguring in fact you will be\nconfirming the path variable also that\nyou can go ahead and put up a new\ndirectory entry for the cmd here so cmd\ntill the cmd directory you will go there\nand whatever the executable is there you\nshould be able to resolve that\nso for that again you have to open the\nwindow r cmd prompt\njava hyphen version\nand then you can run mvn iphone version\nhere\nwhen you run the mvn hyphen version it\nwill let you know that which particular\njava runtime you are using\n1.8.0 underscore 251 that's the same one\nwhich we have configured\nand it also let us know that where\nexactly the executable is there and we\ncan now proceed further with the\nexecution of the maven pail so you just\nhave to check out your source code or go\nto the directory where source code is\nthere and you can run the mvn clean\ninstall so that will ultimately go for\nthe build process so this is the way\nthat how we can do the installation of\nmaven on the windows platform now since\nthis is done now we will go ahead with\nthe second installation where we are\ngoing to do the installation of maven\nand jdk onto the open to machine so for\nthat we will log into the particular\ncloud lab of simply learn lms so let's\nlog into the lms here so now we are\ngoing to do the installation of jdk and\nmaven on the ubuntu virtual machine here\nso for that we will log into the lms so\nlet's log into that so this is the uh\nelements over here here i have already\nstarted the lab here so all i have to do\nis that i have to just click on this\nlink here so it will open the lab into a\nnew tab it's a gui mode of ubuntu server\nso which we will be using to configure\nit\nso uh here uh first of all i can open\nthe chrome browser also so let me open\nthe browser here so that i can download\nthe maven executables as such over here\nso jdk we can do it using the package\ninstallation so uh using the app\nexecutable we will be doing the\ninstallation\nso i have to just open the terminal here\nso once the terminal is opened you have\nto log in through the root id now why we\nrequire root id so that we should be\nable to do the package installations and\nother configurations so that requires\nroot access\nnow once that is done you have to run\nthe\nparticular\napp update command\nnext you have to install the\ninstaller so the oracle installer we\nhave to install now uh once the setup is\ndone so let's down install the latest\npackage over here for eco oracle iphone\njava 14\nhyphen installation so this will install\nthe jdk 14 over here so for that\nconfigurations now uh at the same time\nwe'll go for maven download also\nso here uh\nwe'll go for download maven so this is\nthe tar file for executables so i'm\ngoing to copy this url here\nand\nover here we'll say yes\nyes\nyes\nso now uh the java should be configured\nand could should be set up over here in\nthis one so what we really need to do is\nthat we need to run the java command to\nsee that if the installation is done\nproperly or not so uh let's open the\nterminal again another terminal so that\ni can perform the steps related to maven\nso i have got the url so i'm going to\nthe opt directory which is always an\noptional directory where we can do the\nsetup and all those configurations\nso i'm going to run the w gate command\nand then the url which i have downloaded\nso this should uh download the tar file\nover here of maven now once that is like\ndone so i have to extract it\nso uh tar hyphen xv zf and the entire\nfile name this is the targenzip file so\ni have to use tar hyphen xp zf parameter\nover here to extract it now what exactly\ni have got i have got the apache maven\ndirectory over here so i am going to\nrename it in order to rename it what we\nneed to do we need to actually go for\nthe particular move command so move\nwhatever the existing folder you have\nand then i'm going to rename it with the\nmaven directory now once that is done\ni'm going to the maven directory and\nthis is the path or maven underscore\nhome path which is available as such\nover here in this one so here all the\nbin directories executables all this\nstuff is there so now i can use it like\nmv underscore home and the same\nconfiguration just like we did in the\nwindow so here also it the same process\nwe have to follow so java hyphen version\nshould be let me know that which version\nis deployed so 14.01 version is deployed\nover here so for java i do not don't\nhave to set up the path again here\nbecause i am viewing for the installer\nso i don't have to set up the path\nright so for maven now what exactly i\nhave to do i have to go to the edc\nprofile d now here i'm going to put up a\nparticular file now here you can see\nthat we have the jdk\nfile here which means that the path\nvariables and everything is configured\nas such over here so you can see that\njava underscore home path all these\nvariables are copied here so i'm going\nto also create a same file similar to\nthis one here but in this case what i'm\ngoing to use it that i'm going to remove\nsome of the values so i'm going to have\nsome of the parameters added so in order\nto do it effectively i can do the echo\ncommand\nso that i can copy the things from here\nand i can simply put up into the file\nhere so i'm going to have the path\nvariable added up over here now why i'm\nputting up the paths because it's the\nsame configuration which we did over\nthere also so opt slash maven slash pin\nso all the pin directory should be added\nto the\nspecific path variable so i'm just\ntrying to create a file called maven dot\nss just like a jdk dot sh over here i'm\nalso creating similar kind of file over\nhere called maven dot sh now i'm not\ngoing uh in the vi mode or other editors\nbecause i just want to make you\nunderstand that how i'm copying it the\ncontent i'm taking the jdk dot sh as in\nreference and putting up the details\nover here in this one and then i'm going\nto export mvn underscore home over here\nwhich is related to like opt\nslash\nmaven so this is what we are going to\nput up over here and then wavin in the\nend me when this is the file which you\nshould be having now why we are using it\nbecause of the fact that it's being used\nor it will be utilized in such a way\nthat you can perform the changes or\nwhatever configurations you want to\nperform this will help you to set up the\ncertain parts like a path and ambient\nhome so that you can run these scripts\nas such over here so i'm going to give\nthe executable permissions to this one\nand that's it so now what exactly i have\nto do is that i have to do the source\nhere\nprofile\ndot d\nmaven\nonce that is done i will be able to run\nthe mvn hyphen version over here and the\njdk part is already open so it's going\nto refer to that part so this is the way\nthat how we configure the mi1 and the\njdk specifically on the ubuntu virtual\nmachine\nso pretty much that's it for this demo\nin this demo we primarily talked about\nthat how we can do the installation of\njdk and maven on windows and how we can\ndo the similar task on the maven on the\nubuntu virtual machine also here hello\neveryone welcome to this demo in this\ndemo we are going to talk about it how\nexactly we can do the installation of\nmaven on the mac operating system so\nhere we are going to talk about it how\nwe can do for a specific setup where we\ncan do for the installation of maven in\na mac operating system so let's see so\nthere are two ways of doing the\ninstallation here first is through the\nbrew executable on the mac now this brew\nutility on mac is just like apt or yum\nutility which is present in most of the\nenvironments or most of the platforms\nhere but here we are using this brew to\ndo the installation of maven on the mac\noperating system and again\nnext one is just in a particular\nmechanism where you should be able to\nhave these setup like you can download\nthe binaries from the apache website\nand then you can export the empty one\ndiscord home and the path variable so\nthat you can start using the maven\nexecutable so we'll talk about these\nthings and we'll see that how exactly we\ncan go for this setup so let's login uh\nto a particular\nmachine or mac operating system so where\nwe will be able to do all this activity\nso this is the mac system which we have\nhere now in this one what we are going\nto do is that we are going to open the\nterminal so we are going to open a\nterminal here so this is my terminal so\nusually in mac you don't require any\nother mechanism so the inbuilt terminal\nis more than sufficient for doing this\nstuff because it's similar to a linux\nbased platform here so i'm going to run\nthe command here so first of all i'll\njust double check that if my brew\nexecutable is working fine so i'll just\nrun the brew help command to see that uh\nif my brew is working fine as such over\nhere in this one now i have the command\ncalled brew install so that is the\ncommand which we need to use now in this\none we have to actually give the\nspecific package which we want to\ninstall so we will say like brew install\nmaven\nso it will download the uh specific\nexecutables on the system\nfrom the website it will download the\nmaven executables so it will take some\ntime but ultimately it's trying to\ndownload it under the particular tar\nfile so you can see here that it's\ndownloading the 3.6.3 dar file over here\nso uh i can see that the installation is\ndone so the 3.6.3 version should be\ninstalled over here so when i do like\nmaven mvn under hyphen iphone version\nover here so you can see that the\n3.6.3 version is deployed as such over\nhere now this is something which is done\nwith the purely command over here called\nbrew which really helps us to do any\nkind of package installations not only\nmaven other packages also can be\ninstalled pretty much with the help of\nthis executable\nnow in order to see the manual stuff\nwhat we really need to do is that we\nneed to actually clean this uh specific\ninstallation so that i should i will be\nable to show you the manual installation\nalso over here so what i'm going to do\nis that i'm going to run the command\ncalled\nbrew\nuninstall maven so that the maven\nshould be removed from your system so we\nare just trying to remove the maven from\nhere and you can see that the maven\nexecutable is not working as such over\nhere so which means that the maven is\nuninstalled in this case but why i have\nuninstalled here so that i should be\nable to\ngo ahead and download some custom maven\nover here in this one so i have opened\nthe browser here so i'll go for the\nmaven executable so we'll go for maven\ndownload so that\nwe should be able to download a specific\nthe executable here so i'm going for\nthis directory so here uh 3.6.3 version\nsame is available here so i'm going to\ndownload the\nbin.gz which was\nthe file we have so this is also a kind\nof a linux platform right so that's the\nreason why uh here the tar file should\nwork perfectly fine so here i'm going to\nthe opt directory where we can have all\nthe optionals\nrelated packages so if it is not there\nso i can create a directory called slash\nopt\nso i can\nlog in with\nroot\nso if you don't have the root access so\nyou can go for the applications in the\napplications you can actually create a\ndirectory called maven so here i can go\nfor maven\nyeah\nso here we will be downloading the var\nfile here so the uh dot gang file we are\ndownloading over here so i'll give the\npath here so once the\nvar file or w gate command i am using to\ndo the installation but sometimes the\nwkate is not available so i can go for\nthe brew install wget also if that\npackage is available on video the\ninstallation will be done so we'll try\nto do the installation using grab locate\nso that we will be able to get a tar\nfile generated or downloaded there are\nother ways also you can download it from\nthe browser also yeah you can go to the\nbrowser and here you can actually click\nand download it and then you can\ntransfer it locally to this uh specific\ndirectory also so both the possibilities\nare there but i'm just trying to\ndownload the double gate command so that\nit will be easy for me to do the setup\nand to do the download over here so i'm\ngoing to run the same command again\nso it will download the tar file so this\nis the tar file which is available over\nhere so i'm going to\nextract it over here\nso once the extraction is done so i'm\ngoing to rename it like to apache maven\nso that i should not have any kind of\nversioning or these kind of parameters\nover here and the apache data\nmaven hyphen\nthis star file i'm trying to remove as\nsuch over here so this is what i have\ngot as an end result over here now this\nis the current directory in which i have\nthese uh applications and these setups\ngoing forward over here so if i run the\nmvn hyphen f1 version command\nso that will not be giving me any kind\nof output over here because\nuh still i have extracted the tar file\nbut that is not the activity is not\ncomplete i have to exactly set up some\nenvironment variables so that i should\nbe able to run this mvn command so what\ni really need to do over here is that we\nhave to\nexport certain variables\napplication slash me1\napache m1 so this is the home directory\nwhich i'm trying to configure over here\nand then next thing is that path\nvariable so i'm going to have we are\ngoing to carry the path variable\nwith the folder so i'm going to have the\nfolder structure here\nso\nthe bin directory we have to provide so\ni'm going to copy here\nand\npaste and then i'm concatenated with the\nbin here so now my environment variables\nare established so my mvn hyphen iphone\nversion command as you can see here is\nthat uh you know it's being picked up\nover here but it's saying that the\nparticular java runtime is not available\nso i can go for java reinstall java so\nthat should be enough there to install a\njava package there so you can see that\nit says that it's already installed so\nand up to date so that's the reason why\nit's not able to do the installation so\ni'm going to reinstall\nopen jdk\nbecause what happens that when we do the\ninstallation some environment variables\nrelated to java should be uh formatted\nor should be extracted over here right\nso as you can see that uh here it's\nsaying that if you want to really use\nthe executable of java you have to\nconcatenate the path like this so let's\nrun that and uh then we can see that the\nparticular\nexecutable of java will also be\nfind out over here so java hyphen\nversion showing that yes it's available\nthere and now my command\nshould be able to show me that yes it's\nworking fine the gdk was already\ninstalled but the problem with that is\nthat since it's installed into a\nparticular location so you have to\nactually override your path value so\nthat you should be able to see in that\ndirectory and find out the java\nexecutable so that i have got by doing\nthe installation i got the command over\nthere in the output saying that this is\nthe installation which is done and now\nyou just have to extract or you have to\njust you know put that bar directory\ninto the specified uh path variable and\nthat's how you got the maven and java\nboth command lines working over here so\nthis is how you will be doing the maven\ninstallations all together how the\noverall installation of maven and the\njdk really works on mac operating system\nnow what exactly is a maven repository\nall about\nso maven repository is uh something\nwhich uh is a\nkind of a directory or it's kind of a\nlocation where we have all the jar files\npackaged all together in a single\nlocation so depending on the software\nwhich you want to download the dependent\njava files can be downloaded from there\nso the metadata refers to the palm files\nrelevant to each project here this\nmetadata is what allows maven to\ndownload the dependencies now there are\nthree type of repositories from where we\ncan download the dependencies the first\none is the local repository second one\nis the remote repository and the third\none is the central repository so these\nare the primary three type of\nrepositories which is available there\nfor our specific maven over here\nso whatever repository you want to\nfollow you want to access you can pretty\nmuch access it and you can go with that\nright\nnow the local repository will be primary\npresent onto your pc that's the way that\nhow it's present there and the\nparticular remote repository is\nsomething which you can store on any\nremote machine or remote server and the\ncentral repository is something which\nyou can have it onto the internet so\nusually the central repositories is\nsomething in which we can actually host\nour different kind of dependencies and\nthe jar files over there\nso local repository on the machine of\nthe developer where the project material\nis saved so all the particular\ndependencies jar file will be available\non your local machine remote machine is\nthe location where you can actually\nstore all your particular dependencies\nfrom where you can download these\ndependencies whenever you require it so\nthis and repositories work similar to\nthe central repository whenever anything\nis needed from the remote repository\nit's first downloaded if into your local\nrepository and then it will be utilized\nso if you feel that the dependency is\nsomething which is not there in the\nlocal it will be first downloaded from\nthe remote repository and then it will\nbe utilized or will be referenced onto\nthe local machine there\nand central repository is refers to the\nmaven community repository there where\nyou will be able to see each and every\ndependency present on that repository so\nmaven downloads the repositories from\nhere in the local repository whenever\nthey're needed or whenever required all\nthese dependencies are cached locally\nfrom where it will be referenced in the\nnext or you know whenever we want to\nrefer that we will be able to do that\nparticular reference easily on that part\nso this is the way that how the three uh\nparticular repositories or movement\nrepositories really helps us for\nperforming various kind of automations\nas such here\nright now what are the basic concepts of\nmaven here so some of the couple of\nbasic concepts which is present in maven\nis like for the first time we have the\nproject object model so project bomb\nreference to the xml file which has all\nthe information regarding the project\nhow this particular project should be\nbuilt up how the different build process\nshould be automated there it also has a\ndescription of the project details\nregarding the versioning versioning\ninformation is also stored as such in\nthis xml file in this\nparticular form reference file as such\nover here the xml file is which is there\nin the project home directory so maven\nis\nsomething which search for the palm file\nin the current directory if it's able to\nfind that particular pom file so it will\nexecute or it will proceed with the\nbuild step otherwise they it will halt\nthere itself so this pawn file is very\nimportant because it will act as an kind\nof a built script and primarily the\nmaven tool will be able to process each\nand everything which is configured as\nsuch in this\nspecific xml file there and according to\nthat only it will function or it will\nproceed further\nright now second thing is the\ndependencies and repositories so\ndependencies are usually refers to the\njava files so the java libraries which\nwe need in our into our particular\nproject so while uh working on the\nproject we may be having the dependency\non couple of dependencies so these\ndependencies we have to actually\ndownload or we have to actually refer\nand once these a particular information\nor these details are referred so what\nwill happen that uh we need to download\nthese specific dependencies from the\nparticular maven repositories so if\ntheir dependencies are not present in\nyour local repository then maven will\ntry to download it from the central\nrepository and cache it into your local\nrepository but first of all it will look\non into the local repository and if it\nis not present in local then only it\nwill go to the remote or the central\nrepository\nthen we have build lifecycles and phase\nand goals there so build lifecycles\nconsists of the sequence of build phases\nand each field phase consists of\nsequence of goals here now each goal is\nresponsible for performing a specific\ntask when a phase is uh running all the\ngoals related to that phase and its\nplugins are also used to following the\ncompilation preparing the artifacts\ndownloading the dependencies all\ndifferent things being done by the\nplugins here\nthen we have the build profile so build\nprofiles refers to a set of\nconfiguration values now generally we\nhave the generic build process for all\nthe environments all the particular code\nbase there but sometimes we do have some\nkind of a differences there so that is\nwhere we can go for the profiles because\na specific profile can have its own\nconfiguration and uh whatever it's\nrequired for the build process we can\nhave different different configurations\nstored inside the maven build script\nhere\nthen with different build profiles are\nadded to the pom files and which enables\nthe different uh build as such here so\ndepending on these profiles we can\nactually decide that how we need to\nproceed with the build process and how\nthe different kind of build automations\nneeds to be performed here\nthen a build profile helps in\ncustomizing the build for the different\nenvironments so that also we can perform\nas such while workforming or while\nworking on the different components and\nthe different management here so a build\nprofile is something which you can\nconfigure you can utilize and depending\non that build profile we will be\ndeciding whether to proceed further or\nhow to decide on that particular factor\nso these are something which we need to\ntake care or we need to work according\nto see which we can decide that how the\nspecific configurations and specific\nautomation needs to be performed here\nnow\nusually when we go for the\nmaven there so we have to use some\ncouple of maven plugins now the goal of\nusing these specific plugins is to\nautomate some of the basic stuff like\ncompilation creating the var file\ncreating the java file so when we are\nusing the plugins we don't have to\nconfigure the steps or write the steps\nthat how these uh specific plugins\nshould be installed or should be\nreferenced it's ultimately the internal\nconfigurations which we are looking\nforward or which we are using while\nworking on these specific plugins so you\ncan download some couple of plugins\nusing which we will be able to decide\nthat how a specific goals needs to be\nachieved here so maven has its own\nstandard plugins that can be utilized so\nif uh you know want to go for a custom\none so you can do that but pretty much\nyou can go for the default one and uh\nyou can pretty much have some uh\nspecific goals executed with the help of\nthese build plugins\nnow next thing is the maven architecture\nso uh in maven what happens that uh\nlet's talk about the basic architecture\nof maven here so\nthe maven executable when it's deployed\nso it usually uh reads the palm.xml file\nwhich is the build script here now once\nthe specific found xml file is being\nread out so it will uh process the\ncomponents it will uh you know download\nor it will process the dependencies\nplugins life cycles phases and goals and\neven the build profiles and if any kind\nof interaction is required so it will\ntry to connect to the central repository\nor remote repository and according to\nthat it will provide the information and\nprovide the details as such so minimum\nrepository is something which is very\nimportant because it's ultimately trying\nto connect to the maven repository and\ntry to achieve the various kind of\nautomation here so it's very important\nbecause ultimately it's trying to help\nus to go for the\ncomplete end-to-end build automation\nwhen we'll go for a specific bomb based\nbuild automation\nso movement executable read the palm.xml\nfile then download the dependencies\ndefined into the power xml file and that\ndependencies are cached locally from the\nremote or the central repository now\nthen uh create and generate a remote uh\nreport according to the requirement and\nexecute the life cycles phases goals\nplugins etc so it will process the power\nxml file then and whatever the plugins\nand goals or the life cycles which is\nconfigured there step by step each of\nthem will be executed into a sequence\nhere\nnow let's talk about the overall build\nlife cycle of the maven here so what\nhappens that uh the maven build life\ncycle is something which is a kind of a\ncollection of different steps there and\nthis is something which is followed to\nperform a build automation for a\nspecific project so they are pretty much\nthree steps which is being done so first\none is the default so it handles the\nproject deployment there second handles\nthe project cleaning which is a clean\nthere and then we have site so it\nhandles the creation of the project\nsites documentation there\nso these are the three built-in\nparticular life cycles which is\navailable there at the paper level which\nyou can utilize to perform a various\nkind of particular steps execution for\nyour project\nall right so the build cycle has the\ndifferent build phases or stages there\nbecause when we are performing a build a\nvariety of things needs to be performed\nover here so the first one is the\ncompile then test compile is there so\ncompilation is there for the source file\nand test compile is there for the test\ncases test will execute the test cases\npackage will package the bundle then we\nhave the integration test to run the\nintegration test cases then we have the\nverify then install goal is there and\nthe last one is the deploy which is\nthere to deploy the artifacts to the\nartifactory so all these things are the\ndifferent phases and the stages which is\nbeing followed as per a specific build\nhere so during these builds these are\nthe different phases and these stages\nwhich we normally follow for performing\nthe build automation\nnow what is the exactly advantage of a\nspecific maven here so that is something\nwhich we need to talk about that how the\nparticular automation needs to be done\nor how we can actually go for the\nconfigurations where we feel that yes we\nwant to perform or we want to take\ncertain benefits out of the\nimplementation of maven here so for that\nwhat happens that we have to see that\nthe various kind of benefits the first\none is that apache maven helps manage\nall the processes there such as building\ndocumentation releasing and distribution\nin project management here so the tool\nsimplifies the process of project\nbuilding it increases the performance of\nthe project and the building process all\ntogether and the task of downloading jar\nfiles and other dependencies is also\ndone automatically we don't have to\nindulge in any kind of download part as\nsuch manually over here\nright and um provides easy access to all\nthe required information so may 1 makes\nit easy for a specific developer to\nbuild a project in the different\nenvironments so we don't have to worry\nabout the environment we don't have to\nworry about the infrastructure nothing\nis required everything is available\nthere inside this package and you know\ndepending on the particular you can\nwrite the source code on one machine and\nyou can pretty much do the build on\nanother machine and this is the reason\nhow the build automation really happens\non the first place because the developer\nis writing the source code in one\nlocation and the same code is deployed\nonto the particular or built onto this\njenkins or any kind of build tool there\nright in maven you can easily add new\ndependencies so you must write the\nparticular dependencies in the form file\nso if you feel that you want to download\nsome particular dependencies so all you\nhave to do is that you have to put that\ndependency into the\nspecific form.xml file there and\ndepending on that the execution will be\nreally performed and executed as a chair\nright so let's talk about the demo now\nso let's see that how exactly we can go\nfor this demo and we can perform the\nvarious kind of automations\nso this is the virtual machine which we\nhave here on which the maven is already\ninstalled so we can run like mvn\nso maven will be available as in three\npoint six point three here now i'm going\nto run a particular command called uh\nmvin arc type generate here\nlet me create a directory here\nour temp directory\nand to perform this activity over there\nso mvn\narc type\ngenerate now once we run that so what\nwill happen that it will uh download\nsome of the binaries there because uh\nultimately what we are trying to do is\nthat we are trying to generate a new\nproject like a maven project so a couple\nof uh particular plugins will be\ndownloaded by the maven executable so\nthat it can achieve that particular\nexecution so we just have to wait for\ndownloading all these values now here\nit's trying to give us a particular\nattributes like it's asking the\ndifferent attributes over here so what\nexactly we want to configure so if you\nwant to configure you can provide that\ndetails otherwise you can perform or\nwhatever the setup you want to perform\nnow here it's asking for the version so\nuh which kind of version we want to\nfollow so i'm going to follow like five\nhere so i'll press five\nthen a group id which is there so uh\nit's basically a kind of a group\nmechanism so i can say like com\ndot simply learn so that's the value\nwhich i'm providing here artifate id i\ncan make it like a\nsample project or something like that i\ncan do\nso that will be the artifact uh\nid which is there so\nversion i am keeping the same only so\nand uh yeah so package same here\nso i just want to create so i'll just\nprovide the value called yes and enter\nso with this what will happen that a\nsample project will be created here\nright so whatever the artifact id you\nprovided so according to that the\nproject is created in this directory so\nyou have to go into this directory and\nsee that what exactly the files are\ncreated there so you have the power.xml\nfile now this form.xml file when i open\nso you can see here that there are some\nattributes like you can have the values\nuh related to what version group id you\nwant to follow so this is a group id\nthis is the artifact id so this is jar\nfile by default you can change it\naccording to your requirement and this\nis the version and if you feel that you\nwant to do the changes to the name that\nalso you can perform here so by default\nthe junit dependency is added but if you\nwant to keep on adding your own custom\ndependencies you will be able to do that\nnow in this case if you run like mv and\nclean install so it will be considered\nas in particular maven project a parlor\nxml file is already there present in the\nlocal directory so according to that the\nexecution of the steps will be performed\nand according to that you will be able\nto get some desired values here\nso ultimately in the target directory\nyou will be able to see that some couple\nof java file or a specific jar file is\ngenerated here so you can see that in\nthe target directory this jar file or\nthis artifact is generated here so this\nis a way that how we can actually go for\na generic one like a new uh particular\nproject and later on you can depending\non your uh understanding you can keep on\nadding or you can keep on modifying the\ndependencies and that's how you can get\nthe\nfinal result there\nso that's it for this demo uh in which\nwe have find out that how exactly we can\ngo for a particular project preparation\nwith the help of mvn executable\nwelcome everyone to this topic in which\nwe are going to talk about that what\nexactly is the different maven interview\nquestions here now in this one we are\ngoing to talk about what are the\ndifferent questions some couple of\nquestions we are going to go through and\nwe will try to understand that what\nexactly the answers are\nnow uh let's talk about the first\nquestion over here so what exactly is in\nmaven here so maven is nothing but a\nkind of a popular open tool uh open\nsource build tool which is available\nthere now before maven there were a\ncouple of build tools which was present\nlike and and you know a lot of other\nlegacy tools was present there but\nafter that maven is something which was\nuh released as an open source tool and\nit really helps the organization to\nautomate some couple of build processes\nand you know have some uh particular\nmechanisms like build publish and deploy\nof different different projects at once\nitself so it's a very powerful tool\nwhich can really help us to do the build\nautomations we can integrate them with\nthe other tools like jenkins and you\nknow we can automate them we can\nschedule the builds so a lot of various\nadvantages we can get with the help of\nthis tool here it's primarily written in\njava and it can be used to build up\nvarious other kind of projects also like\nc sharp scalar ruby etc so all these\nother typical tools can also be built up\nwith the help of this tool so this tool\nis primarily uh used to do the uh\nparticular development and management of\nthe artifacts in the java based projects\nso uh for most of the job-based projects\nnowadays this is the default tool and\nit's already integrated with the eclipse\nalso so when you go for a new women\nproject automatically\nit will be created for a java project\nyou can use it for other languages also\nbut yes\ndefault choice of java of of the java\nprogramming language is maven build tool\nonly now let's talk about the next\nquestion so what does the maven help\nwith so maven apache maven helps to\nmanage all the processes such as build\nprocess documentation release process\ndistribution deployment preparing the\nartifact so all these tasks is being\nprimarily taken care by the apache maven\nso this tool simplifies the process of\nproject building it also increases the\nperformance of the project and the\noverall building process so all these\nthings are something which is being\ntaken care by the specific maven tool\nhere so it also uses the particular uh\nyou know it downloads the jar files of\nthe different dependencies for example\nif your\nsource code is dependent on some of the\napache web service uh jar files or some\nof the other third-party jar files in\nthat case you don't have to download\nthose jar files and keep in some\nrepository or keep it in some lib\ndirectory you just have to mention that\ndependency in the maven and that jar\nfile will be downloaded during the build\nprocess and will be cached locally so\nthat's the biggest advantage which we\nget with maven that you don't have to\ntake care of all these dependencies\nanywhere into your source code system so\nmeven provides easy access to all the\nrequired information it uh helps the\ndeveloper to build the projects and uh\nwithout you know even worrying about the\ndependencies processes or different\nenvironments or different because it's\nan uh kind of a tool which can be used\nin any platform linux or windows so they\ndon't have to do any kind of conversions\nso all they have to do is that they have\nto just add new dependencies and that\nshould be updated into the pom file and\ndepending on that dependencies the\nsource code will be built up and they\ndon't have to refer any kind of\nthird-party jar files so they don't have\nto play with the class bars during the\nbuild process so no customizations is\nactually required with this one now the\nnext question is that what are the\ndifferent elements that may one take\ncares of so there are different kind of\nelements which is being taken care by\nmaven so uh the these particular\nparameters are elements are bills\ndependencies reports distribution\nreleases and mailing list so these are\nthe typical different different uh\nelements which is being taken care by\nthe maven during the build process and\nduring the preparation of the builds\nhere so all these things you can they\ncan explore they can extract on that\npart and they can fully understand that\nhow they can work on all these different\ndifferent processes now next question is\nthat what is the difference primary\ndifference between the and and maven\nfirst of all both of them are primarily\nused for the java based project so and\nis the older version and maven is\nsomething which was launched after the\nant here so and has no formal\nconventions like so which can be uh you\nknow coded into the build.xml file there\nbut yes the maven has convention so\ninformation is not required as such in\nthe palm.xml file there so ant is\nprocedural whereas maven is declarative\nover here so and does not have any kind\nof life cycle so it depends on you that\nhow you program the and there but\nmaven is having a lot of life cycles\nthere which we can configure we can\nutilize so the uh and related scripts\nare not reusable because you cannot\nreuse it and you have to do some kind of\ncustomizations in order to work on that\nbut yes maven is not having much of the\nproject related any kind of dependencies\nthey can be easily reusable there\nbecause there is nothing about the\npalm.xml file it's just the artifact\nname and the dependencies which is uh\nsomething we can\noverride or we can change and then the\nsame palm.xml file we can reuse as such\nfor the new project also so that is\nwhere the reusability comes into the\npicture now and is a very specific build\ntool so we don't have to there is no\nplugins as such which is available there\nyou just have to code everything that\nwhat build process you want to prepare\nwhereas in case of maven we have the\nconcept of plugins which can really help\nus to understand that how we can make or\nuse of these plugins so that we can have\nthe reusability implemented so these are\nsome of the differences which is\navailable there between the ant and\nmaven here now next thing is that what\nexactly isn't palm file all about so\npalm file is nothing but it's kind of a\nxml file which is available there and\nit's have having all the information\nregarding the project and the\nconfiguration details so it primarily\nused over here that how the\nconfiguration needs to be done and how\nthe setup should be performed as such\nhere so palm technical file is the build\nscript which we prepare\nyou can prepare it uh using a particular\ncomponent or you can have a particular\nmechanisms or if you feel that you want\nto have some kind of setup so all these\nthings typically can be implemented can\nbe done with the help of build tools so\nbuild tools can be really helpful for us\nto do the automations and it can really\nhelp us to understand that how some\nbuild processes we can automate with\nsimply with the help of palm.xml file\nhere so the developers usually put up\neverything inside these uh dependencies\nin the palm.xml file here so this is the\nfile which is uh usually present in the\nhome directory it's in the current\ndirectory so that once the build is\ntriggered it will be picked up from that\ndirectory and according to the steps\naccording to the content of the palm.xml\nfile the build will be processed or will\nbe created here now what i'll\nincorporate into the palm file here so\nthe different components which is\nincluded into the palm dot xml file here\nis the dependencies uh developers and\ncontributors plugins plugin\nconfiguration and resources so these are\nthe typical components which is a part\nof a permanent xml file which can be uh\nsame form a lot of projects you can do\nsome customization and then the same\nprompt file can be reused for the other\nprojects also now one of the minimum\nrequirement of the elements which is\nthere for a pump for uh palmer xml file\nso without which the pound xml file will\nnot be validated and we will be getting\na kind of validation errors so the\nminimum required elements are project\nroot\nmodel version so it should be 4.0.0 the\ngroup id of the project the artifact id\nof the project and the version of the\nartifact these are the minimum things\nwhich we want to define so that we can\nunderstand that what kind of artifact we\nare trying to prepare or we are trying\nto create here so these are the minimum\nrequired elements which is required in\nthe palm.xml file without which the\nvalidation of the palm file will fail\nand the build will also fail here\nnow what exactly is the mint uh with the\nterm called build tool so build tool is\nan essential tool isn't kind of a\nprocess for building or compiling the\nsource code here so it's needed or it's\nrequired for the below for generated\nprocesses if you want to generate the\nsource code if you want to compile the\nsource code you want to generate the\nsource code you want to generate some\ndocumentation from the source code you\nwant to compile the source code or you\nwant to package the source code whether\nit's a jar file it's a war file or it's\na er file so whatever the packaging mode\nyou want to select you will be able to\ndo it with the help of the particular\nbuild tool here and if you feel that you\nwant to upload these particular\nartifacts to the artifact tree whether\nit's on remote machine or locally there\nso that also you can do it with the help\nof this particular build tools here so\nbuild tools can be helpful in doing a\nlot of activities for the developers\nnow one of the different steps which is\ninvolved to install maven on windows now\nall you have to do is that you have to\njust first of all download the uh tar\nfile from the maven apache maven\nrepository there once that is done so\nwhat happens that you have to set up\nsome couple of environment variables now\nif you download the java jdk using the\nexe file in that case the java\nunderscore home will be configured\nautomatically but if it is not available\nand you are not able to run the java\ncommand line in that case you have to\nset up the java underscore home and then\nsimilarly for maven you have to go for\nthe maven underscore home that\nparticular variable you have to\nconfigure now once that is done all you\nhave to do is that you have to edit the\npath variable so the bin directory of\nthe maven extracted a folder you have to\nput it up into the path variable and\nonce that is done what will happen that\nyou will be able to\ncheck the latest version the version of\nthe maven over there if it is like some\nold version again you have to extract\nthe latest version and do the steps all\ntogether again so these are some of the\nways that in which you can actually go\nfor the installation or the\nconfigurations of maven on the windows\nplatform\nnow what are the different steps which\nis involved for the installation of\nmaven and ubuntu so ubuntu it's fine you\njust download the package of java jdk\nthere once the jdk is installed over\nthere what you can do you can simply go\nand say that yes i want to search for a\nparticular maven package which is\navailable there so once the jdk is\ninstalled all you have to do is that you\nhave to configure the java underscore\nhome\nm3 underscore home main and disco home\nand the path variable once all the path\nvariables are something which is\nconfigured then we will be able to check\nthe latest version like whether it's a\nthe version is correct or we are getting\nthe standard version over here or not\nover here so that's the main mechanism\nthat how we will be able to you know\nconfigure the maven on ubuntu here now\nwhat exactly is the command to install\nto char into the locals repository now\nsometimes what happens that we are not\nable to fetch like uh some dependencies\nnot present on the\nparticular central repository minimum\nrepository or your artifactory\nrepository in that case you have some\nthird party jar which we want to install\nlocally onto your repository so in that\ncase we can go for the uh but we can\ndownload the java file there and then we\ncan run the command called mvn install\ninstall hyphen file and then we are\ngiving the path like hyphen d file where\nthe path of the file should be provided\nnow once that is done so what will\nhappen that in the local dot m2\ndirectory this specific artifact will be\ndownloaded and will be installed there\nso this is a mechanism where you will be\nable to configure or you will be able to\nset up the artifacts locally the java\nfile locally here in the local\nrepository so next question is that how\ndo you know that the version of the\nmaven being used here so the inversion\nof the maven is pretty easy to calculate\nso all you have to do is that you have\nto just go for mvn and space hyphen\niphone version the moment you do that it\nwill let you know that what jdk or what\njava version you are using and it will\nalso show you that what particular maven\nversion you're going to use here so all\nthat details you will be able to get\nwith that particular command here\nnow what exactly is the clean default\nand frighten variable here so these are\nthe build cycles which is available\nthere in within maven so these are the\nbuilt-in build cycles so for clean what\nhappens that this life cycle will help\nyou to perform the project cleaning so\nusually during the build there are some\nfiles which is created into the target\ndirectory so the clean lifecycle is\nessentially helping us to clean up all\nthat directory all that particular\ntarget directory and when we talk about\nthe specific default so default\nlifecycle handles the projector\ndeployment that is the default lifecycle\nand site is something which is uh you\nknow helpful for creating the site\ndocumentation\nyou know it's kind of a life cycle which\nis available there so clean default and\nsite are the different life cycles which\ncan perform different different kind of\nuh attributes or different tasks here\nnext question\nwhat exactly is a maven repository so\nmaven repository refers to the\ndirectories of the package jar files\nthat contain metadata now the metadata\nrefers to the palm files relevant to\neach project so here you can able to get\nyour artifacts uh stored there you can\ndownload these artifacts also during the\nmaven build if you put up that\ndependency you will there are different\nkind of repositories which is available\nthere one is the local repository one is\nthe remote repository and one is the\ncentral repository so these are the\ndifferent typical type of repositories\nwhich we have where we can store the\nartifacts also and from where we can\ndownload the artifacts also whenever\nrequired now the first one is the local\nrepository so local repository refers to\nthe machine of the developers itself\nwhere all the project related files are\nstored there now whenever we work on the\nuh particular maven so there is an in\nthe home directory dot m2 folder is\ncreated now usually whatever the\nartifacts downloaded from artifactory or\nfrom the\nmaven repository it gets cached locally\nthere and once it is downloaded next\ntime it will not download the same\nartifacts or the same dependency all\ntogether again so this local repository\nis something which is available locally\non the developers machine only so it\ncontains all the dependent jars which a\nparticular developer is downloading\nduring the maven build now remote\nrepositories refers to the repository\nwhich is present on the server and uh\nwith from where we will be downloading\nthe uh particular dependencies so the\nwhen when we are running the maven build\non a fresh machine so usually over there\nthe local repository does not exist so\nin that case what happens that the dot\nm2 directory is empty but the moment you\nrun the build what will happen that the\nartifacts or the dependencies will be\ndownloaded from the remote repository\nand once it is done once it's uh\ndownloaded it will be added or it will\nbe downloaded cached locally there and\nit will be uh helpful in the future run\nso that will be\nconsidered as a local repository because\nall the artifacts all the dependencies\nare downloaded there and central\nrepository is something which is known\nas the maven community where all the\nartifacts is available there so usually\nwe cache or we mirror these central\nrepositories as our particular remote\nrepositories because it could be a\npossibility that these remote\nrepositories are something which we are\nhosting into our organization and\ncentral repository is something which is\navailable centrally for everyone to use\nit so\nthese are something you know some kind\nof repositories where each and every\nartifacts will be stored and anyone will\nbe able to have the access to these\nparticular artifacts here so these\nartifacts are every artifacts every open\nsource uh artifacts is something which\nis available over there to these central\nrepository now how does the maven\narchitecture really work here so the\nmimon architecture really works in the\nthree steps the very first step is that\nit reads the palm.xml file here that's\nthe very first step second it downloads\nthe dependencies uh defined in the power\nxml file into the local repository from\nthe central or the remote repository\nhere once that is done so it will uh you\nknow create or generate the reports\naccording to the life cycles which you\nhave configured whether it's a clean\ninstall\nsite\ndeploy package or whatever the life\ncycle you want to trigger you will be\ntriggering that particular life cycle\nand corresponding to that the build or a\nspecific task will be performed so these\nare the three steps in which the overall\nbuild or any kind of uh execution of\npalmer xml file really happens here now\nwhat exactly is the maven build\nlifecycle so maven lifecycle isn't\nnothing but collection of steps here\nthat needs to be uh followed for doing a\nproper uh build of a project here so\nthere are primary three built-in cycles\nwhich is available there default which\nhandles the project deployment clean\nwhich handles the project uh cleaning\nthere and site which handles the\ncreation of the project sites\ndocumentation so these are the three\nprimary built-in build cycles life\ncycles which is available as such\nnow so build lifecycle has you know\ndifferent kind of phases or the stages\nhere because in the previous uh\nparticular slide we were talking about\nwhat what are the different uh\nparticular build life cycles which is\navailable there but these are the\ndifferent phases like what are the\ndifferent step-by-step executions like\nfor the deep down which is available\nthere inside a specific maven build life\ncycle so here you can see that it's\ncompiling then the test compile test\nexecution is there then package\nintegration test to verify install and\nthe lastly deploy here so these are the\ndifferent build phases which is\navailable as such over here so what\nexactly is the command to use to do a\nparticular maven site so mvn site is\nsomething which is used to create a\nmaven site here now usually whatever the\nartifacts is prepared that will be\nprepared in the target directory so here\nalso you will be able to see a site\ndirectory which is available there in\nthe target directory which you can refer\nfor the site documentations what is the\ndifferent conventions used while naming\na project in may 1\nso usually\nit involves three components so the full\nname of a project in maven includes\nfirst of all the group id uh for example\ncom. apache\ncom.example so these are some of the uh\nparticular way that where you can\nprovide the group id artifact id can be\nexact project name like maven project or\nwhatever the project you are creating so\nsample project example project so these\nkind of things will be there in the\nartifact id and lastly is the version\nlike which version of your artifact you\nwant to prepare like 1.0.0 hyphen\nsnapshot\n2.0.0 so like this information you are\nproviding that what particular version\nyou are trying to configure here now\nlet's move on to the intermediate level\nwhere we will be having a little bit\nmore complex questions related to the\nmaven here now what exactly is a maven\nartifact now usually what happens that\nwhen we do a build process as an end of\nresult of the build process we will get\nsome artifacts for example when we build\na.net project so there we will be able\nto have a exe or dll files as an\nartifacts\nsimilarly in case of maven when we do a\nbuild process there we get the different\nkind of artifacts like depending on the\npackaging mode like jar file var files\nor the er files here so these are\nsomething which is you know getting\ngenerated during the build process\nduring the main process and you can\nstore them into your local repository or\nyou want to push them to the remote\nrepository it's something that totally\ndepends on you so maven is a tool which\ncan help you to create all the artifacts\nwhether it's a jar file whether it's a\nvar files or whether it's a er file here\nand every artifact is having three\nattributes the first one is the group id\nthe artifact id and a particular version\nand that's how you will be able to\nidentify a full-fledged artifact as such\nin maven so maven is not about only the\nname of the jar file it's actually\nreferring to the attributes like crop id\nthe artifact id and the version of the\nartifact here now what are the different\nphases of the clean life cycle here so\nclean is something which is being used\nto clean the target directory so that a\nfresh build can be triggered there so\nthere are three steps pretty clean clean\nand post clean here so if you wish that\nyou want to override the particular life\ncycle configurations and you want to run\nsome particular steps before the clean\nactivity so you can do it into the\npre-clean and if you want to do it like\nsome steps after clean then pour screen\ncan be utilized now what are the\ndifferent phases of the site life cycle\nso pre-site\nsite post site and site deploy so these\nare the different phases which is\navailable there in the site life cycle\nwhat is exactly we meant by the maven\nplug-in now this is the huge difference\nbetween the ant and maven here because\nin and we were not having this that much\nsupport of the plugins and that's the\nreason why we had to deal with all the\nbuild configurations\nso we have to simply put the overall\nbuild process that how the build should\nbe triggered but that is not something\nwhich is there in case of maven in maven\nwe have a lot of flexibility because we\ncan actually put up what exactly build\nconfigurations we want to put here we\ncan put some features like important\nfeatures over here in maven and uh these\nplugins we can utilize for example i\nwant to perform a compilation now i\ndon't really want to do any kind of\nconfigurations in this one so what i can\ndo is that i can simply use the\ncompilation plugin in maven and that can\nreally help me because i don't have to\nunnecessarily write or rewrite the\nconfiguration that how the compilation\nshould be done\nit's something which is pre-configured\nor pre-written in this plugins that i\ncan simply import the plugin and i can\ndo the build process or the compilation\nprocess in a pretty standard mode so i\ndon't really have to do any kind of\nworkarounds with that and simply with a\nsmall automations i will be able to\nreach that how these maven plugins can\nbe integrated into my palmer xml file\nand i can desire or i can have some\nparticular procedures and some steps\nexecuted there so that's the biggest\nbenefit which we really get with the\nhelp of maven plugins now why exactly\nthe maven plugins are utilized so to\ncreate a jar files to create the war\nfiles to compile the code files to\nperform the unit testing to create the\nproject documentation and to create the\nproject reports so there are variety of\nthings in which we can actually use\nthese maven plugins through the\nintegrations within the palm direct xml\nfile there so it's all about the plugins\nyou just import the plugin and that\ndesired activity will be performed there\nnow what are the different type of\nplugins which is there so\nyou can have either a build projects uh\nfor performing the build activities you\ncan have some build plugins for\nreporting plugins also there which can\nbe only generated or utilized to\ngenerate the reports to process the\nreports and do any kind of formatting or\nany kind of processing on the reports\nhere so that is where the reporting\nplugins are utilized now what is exactly\nthe difference between the convention\nand the configuration in maven so\nconvention is in particular process when\nthe developers are not required to\ncreate the build processes so\nconfiguration is when you know the\ndevelopers are supposed to create the\nbuild processes\nso the users do not have to rectify the\nconfiguration in detail and once the\nproject is created it will automatically\ncreate a structure so they must specify\nevery in case of configuration you have\nto provide each and every details so\nthat's how the configurations really\nhappens because um you have to put every\ndetail into the power xml file and\nthat's how the particular configurations\nreally work as such so this is the huge\ndifference between the conventions and\nthe configurations here\nnow\nso why exactly said that maven uses\nconventions over the configurations so\nmaven pretty much does not puts any\nefforts like on the particular\ndevelopers that they have to put each\nand every configuration so there are\nsome ready-made\nplugins which is available there and\npretty much we are making use of that so\nthat in such a case we don't have to\nworry about the executions and we will\nbe able to pretty much work on that so\nconventions like maven uses the\nconventions incident of the\nconfigurations so the developers just\nyou know they don't just have to create\nthe movement project the rest of the\nparticular structure will be compared\nautomatically so they are not uh you\nknow expecting that the developers\nshould be doing the configuration work\nand everything should be taken care in\nsuch a way that you just have to start\nthe things and rest of the things should\nbe taken care by the maven itself so\nmaven will be\nresponsible because they do the plugins\nit will be responsible to set up the\ndefault architecture\nthe default folder structures and all\nyou have to do is that you have to just\nplace the source code in the desired\nfolder structure here so that's\nsomething which you need to do as in\nparticular developers so what exactly is\nthe maven order of inheritance here so\nthe order of inheritance is the settings\ncli parameters\nparent pom and the project bomb which\nmeans that if you have some\nconfiguration and settings that will be\nthe highest value then the cli\nparameters are there then the parent\npalm is there and then the project palm\nso this is the way that how the\nparticular parameters or the\nconfigurations will be picked up by the\nmay one so that's the order so what does\nthe build life cycles and the phases\nimply in the basic concept of may 1. so\nbuild life cycles consist of a sequence\nof build phases and each build phase\nconsists of a sequence of goals when a\nphase is run\nall the goals related to that phase and\nits plugins are also compiled so you\nwill be able to have a lot of particular\ngoals which is residing inside of phase\nthere and similarly life cycle is\nnothing but a kind of a sequence of the\ndifferent phase so life cycle comes in\nthe top then it comes on the phases and\nthen it comes on the goals here now what\nis the terminology called goal in case\nof maven the term a terminology goal\nrefers to the specific task that makes\nit possible for the the project to be\nbuilt and organized so it's something\nwhich we can run so it's an actual\nimplementation which is going on there\nfor example in the build process in the\nlib build phase i have a different goals\nlike clean install package deploy these\nare the different typical goals which is\navailable there which i can execute into\nthe main one here so these are the\ndifferent goals like uh which we can\nexecute and which we can run during a\nmaven build next question is what is\nexactly meant by the term dependencies\nand the repositories in maven here so\ndependencies refer to the java libraries\nwhich we usually put up into the\nbound.xml file there now what happens\nthat sometimes our source code is\nrequiring some java files like a\nsecondary java files for performing the\nbuild process so instead of downloading\nit and uh storing it into the class path\nfor during the build process we just\nhave to specify the dependency of that\nartifact what dependency we need to put\nand once that dependency is put up there\nwe will be able to have that jar file\ndownloaded and cache into the local\nrepository during the maven build\nproject\nnow if the dependencies are not present\nin your local repository then maven will\ntry to download it from the central\nrepository and again if it is not uh uh\nyou know\nit's something which is available which\nis downloaded from the central\nrepository then it will be cached\nlocally into the local repository so\nthat's the cycle which is being\nimplemented and utilized during this\nprocess\nnow what exactly is in snapshot in maven\nso snapshot refers to the version\nalready available in the movement report\nrepository it signifies the latest\ndevelopment copy that's what we do with\nthe case of snapshot here so meven\nchecks for a new version of snapshot in\nthe remote repository for every new\nbuild so during the build process like\nyou know a new snapshot version is being\ndownloaded and the snapshot is updated\nby the data service team which uh with\nupdated source code every time to the\nrepository for each maven build so snap\nshot is something which we will be using\nlike very frequently we will be updating\nto that and frequently we will be\nupdating the version to that and we will\ntry to explore and we will try to do the\nmodifications now what are the different\ntype of projects available in maven so\nthere are thousands of java projects\nwhich you know uh can be utilized or we\ncan be uh implemented by my one here so\nthis helps the as the user that they as\nthey no longer have to remember every\nconfigurations to set a particular\nproject for example spring boot spring\nmvc spring boot etc these are the\ndifferent projects which is already\navailable in maven so most of the we\nhave already discussed that\nfor the job-based projects maven is\nsomething which is you know considered\nas by default so a lot of organizations\nare actually using it for you know\nstoring or utilizing it for the\nparticular maven project now what\nexactly is the maven uh archetype over\nhere so maven octave refers to a maven\nplugin that is uh entitled to create a\nfor project structure as per its\ntemplate these archetypes are just\nproject templates that are generated by\nmaven when any new project is created\nthere so this is something which we are\nusing so that we will be able to create\na fresh new projects right so let's go\non to the advanced level of this maven\nquestions now what exactly is the\ncommand to create a new project based on\nan archive type so mvn archetype\ngenerate is used to create a new java\nproject based on the archetype now this\nwill take up some parameters from\nas an end user from you and depending on\nthat parameters it will create the\npalm.xml file it will create the source\ndirectories uh inside that main java\ntest all these different couple of\ndirectories directly structures will be\nautomatically created now why we require\nthis command so that if you are going to\ncreate a project from scratch from the\nfrom the day one this command will help\nyou to have all the folder structures\ncreated and then further on you can put\nup your source code and those files as\nsuch in this folder structure so that's\nhow is the mechanism that we will be\nable to see that how the setup can be\nperformed really over here now what does\nmaven clean implies now movement clean\nis a plugin that suggests that it's\ngoing to clean the files and directories\nthere so whenever we do a build process\nusually in the target directory we have\nsome class files some jar files or\nwhatever the generated source code which\nis available that will be present in the\ntarget directory so the maven clean is\nsomething which is available which is\ngoing to clean all these directories and\nwhy we are doing this directory\nstructure cleanup so that we will be\nable to do a fresh uh build process and\nthere should not be any kind of\nissues as such over here so that's the\nmain reason why we are looking forward\nfor this\nparticular mechanism or for this uh\nparticular changes as such here now so\nwhat exactly isn't build profile all\nabout so build profiles refers to the\nset of configurations uh where we can\nhave like typically two different kind\nof build processes there so if you feel\nthat the same form.xml file you can use\nyou want to run for different different\nuh particular configurations so that you\nwill be able to do pretty much with the\nhelp of this component so build profile\nis used to do a customization processes\nso that you will be able to have the\nprocess and you will be able to\nperform the configurations and the\nsetups all together there so that's a\nvery important aspect to be considered\nthat which we need to\ndiscuss when we talk about the build\nprofile so build profile whenever you\nfeel that you want to do some\ncustomizations and you want to proceed\nwith the setup so that's where it's\nutilized next thing is that what are the\ndifferent type of build profiles which\nis available there so the build profiles\ncan be done on for a particular project\nlike per project you can do you can uh\neven do the build profiles in the\nsettings.xml file also and if you feel\nthat you want to do it into the\nglobalsettings.xml file so that also you\ncan do as such over here so there are\ndifferent ways in which you can do the\ncustomization and once the customization\nis done you will be able to have the\ndifferent uh ways of doing the setups\nand the configurations over there so\nwhat exactly is meant by the uh\nparticular system dependencies here so\nlet's talk about that also so system\ndependencies refers to the uh particular\nmechanisms where we feel that how the\ndependencies should be uh you know\npresent there so that is something which\nis having a scope of system there so\nthese dependencies are commonly used to\nhelp maven know the dependencies that is\nbeing provided by the jdk system\ndependencies are mostly used to resolve\nthe dependencies on the artifacts that\nare provided by the jdk so these\ndependencies are somewhat which is being\nutilized and used over here so that we\nwill be able to implement and go ahead\nthrough the system dependencies what is\nthe reason for using an optional\ndependency here so optional dependencies\nare used to decrease the transitive\nburden of some libraries so what happens\nthat when you download an artifact when\nyou put up a dependency so it could be a\npossibility that some dependencies as in\nparticular optional can also be\ndownloaded now these are not always\nrequired but yes sometimes what happens\nthat these are downloaded so that you\ndon't have to put uh each and every uh\nartifact or dependency into the powder\nxml file for example you're trying to\ndownload some apache tool and with that\nsome like three four jar files or three\nfour another dependencies are also\ngetting downloaded now if you are using\nthat dependencies that totally create\nbecause you don't have to put that uh\nlist or that entry in the dependency\nlist in the pound or xml file and that\ncan really save your time but if you\nfeel that you don't want to have them\nand you these are the optional ones and\nyou really want to\nget rid of that so that also you can\nexclude while downloading any kind of\ndependencies so these are the optional\nones which depending on your requirement\nyou can utilize you can uh\nprocess and if you feel that you don't\nwant to get it you won't want to process\nit you can certainly ignore it and you\ncan get rid of that also now what is a\ndependency scope and how many type of\ndependencies scope are there so there\nare different type of dependency scores\nwhich is there which is used on each and\nevery stage of the build here so compile\nprovided runtime test system import\nthese are the different kind of\ndependency scopes which we have using\nwhich we can define that when exactly we\nwant to go ahead for a specific build\nprocess so depending on your requirement\nyou can explore all these build scopes\nand you can get benefits out of that\nwhat is exactly an intransitive\ndependency in may one so maven avoids\nthe need to find out and specify\nlibraries that our own dependencies\nrequire by including the transitive\ndependencies automatically so transitive\ndependencies says that if he depends if\nx depends on y and y depends on z then x\ndepends on y and both there\nso which means that you are not\ndependent on one artifact you also need\nthe z artifact there with the y artifact\nso that is what you need to do so that\nyou will get both the dependencies there\nbecause this is normal that if you are\ntrying to\ndownload some particular artifacts or\ndownload some dependency and that\ndependency is also dependent on some\nother artifact or some other jar file\nthen you have to include both of them so\nthis is something which you will be able\nto get so that you\ncan easily download all these dependent\njar files also and the maven build can\nbe success how can a maven build profile\ncan be activated so even build profile\ncan be activated through a different\nways so\nexplicitly using the command\ncommand line you can talk about that\nwhich profile you want to execute\nthrough maven settings you can do uh\nbased on environment parameters os\nsettings and present and missing files\nso these are the different ways in which\nyou can actually activate that which\nparticular profile you want to have so\nprofiles configurations can also be\nsaved in various situations and various\nfiles and from there you will be able to\nrefer that which file you want to refer\nas such now what is meant by the\ndependency exclusion the exclusion is\nused to exclude any transitive\ndependency because you never know that\nif you are trying to put up a dependency\nuh entry in the power xml file that\nartifact is also further dependent on\nanother artifact so in order to feel in\norder to see that you want to exclude\nthat dependent artifact which is being\nautomatically downloaded that also we\ncan exclude with the help of exclusion\nso you can uh avoid the transitive\ndependency with the help of dependency\nexclusions here so what exactly is in\nmojo so mojo is nothing but maven plain\nold java object here so it's an\nexecutable goal in maven and a plug-in\nrefer to the distribution of such mozos\nso moses enable the maven to extend its\nfunctionality that already is not\nfounded in so it's kind of an extension\nwhich is there and using this we can get\nsome additional benefits and some\nexecutions over there so what is the\ncommand to create a new project based on\na hard drive\nso again archetype is something which we\nnormally use to create the new projects\nnow you can give the parameters in the\ncommand itself or you want it to in in\nkind of an interactive mode where it\nwill take the parameters from the end\nuser and according to that the project\nwill be created onto hard drive or onto\nserver wherever you wish you want to\ncreate you can create a new project\nso explain about the maven settings.xml\nfile so maven settings.xml file contains\nthe elements that are used to define\nthat how the human execution should be\nthere so there are different uh settings\nlike local remote center all these\ndifferent repositories are configured as\nsuch over here now in this case what\nhappens that uh usually the\nconfigurations are done in such a way\nthat it can you know go for the\nexecutions it can go for the build\nprocess and the complete executions can\nbe uh involved and can be achieved as\nsuch here so all these executions are\nsomething which we can really perform\nand uh here we can put some credentials\nhow to connect to the remote repository\nhow to connect to remote repository all\nthat stuff is something which we talk\nabout over here what exactly is that\nmeant by term superbomb here so\nsuperform refers to the default bomb of\nmaven so the moms of maven can't derive\nfrom so it's nothing but a reference to\na parent bomb which is available there\nthat is a super pump so if you define\nsome dependencies in that super pump\nautomatically the uh child bomb will\nalso be able to inherit all those\ndependencies so we can put some uh\nexecutions like we can put some\nconfiguration in the super pump so that\nif multiple uh projects are going to\nrefer that they should be able to refer\nthat easily so that's the reason why we\nprimarily use the super pump so that we\ncan have the execution some processes\nput up over there and all the other\nprojects should be effort to refer or\ninherit from there so where exactly the\ndependencies are stored so dependencies\nare stored like in different locations\nlike you have the local repository\nremote repository is there local\nrepositories on the local developers\nmachine and remote repository something\nwhich is available on a server in form\nof artifactory\nnow let's talk about the gradle\ninstallation because this is a very\nimportant aspect to be done because when\nwe are doing the installation\nwe have to download the cradle\nexecutables right so let's see that what\nare the different steps is involved in\nthe process of the cradle installation\nso when we talk about the gradle\ninstallation so there are primary four\nsteps which is available the very first\none is that you have to check if the\njava is installed now if the uh java is\nnot installed so you can go to the open\njdk\nor you can go for the oracle java so you\ncan do the installation of the jdk on\nyour system\nso jdk8 is something you can most\ncommonly use nowadays so you can install\nthat\nonce the java is downloaded and\ninstalled then you have to do the gradle\nuh download cradle there now once the\ngradle binaries are executable uh or the\nzip file gets downloaded so you can add\nthe environment variables and then you\ncan validate if the gradle installation\nis working fine as expected or not so we\nwill be doing the gradle installation\ninto our local systems and uh into the\nwindows platform and we'll see that how\nexactly we can go for the installation\nof cradle and we will see that what are\nthe different version we are going to\ninstall here so let's go back to the\nsystem and see that how we can go for\nthe gradle installation so this is the\nwebsite of the jdk or for java or recall\njava now here you have different jdk so\nfrom there you can do whatever the\noption you want to select you can go\nwith that so jdk8 is something which is\nmost commonly used nowadays like its\nmost comfortable or compatible version\nwhich is available so um in case you\nwant to see that if the jdk is installed\ninto your system all you have to do is\nthat you have to just say like java\nhyphen version and that will give you\nthe output that whether the java is\ninstalling to your system or not so in\ncase my system the java is installed but\nif you really want to do the\ninstallation you have to download the\njdk installer from this website from\nthis oracle website and then you can\nproceed further on that part now once\nthe jdk is installed so you have to go\nfor the cradle installation because\ncradle is something though which will be\nperforming the build automations and all\nthat stuff so you have to download the\nbinaries like the zip file probably in\nwhich we have the executables and all\nand then we have to have have some\nparticular environment variables\nconfigured so that we will be able to\nhave the\nsystem modified over there so right now\nwe have got like the prerequests as in\njava version installed now the next\nthing is that we have to install or\ndownload the executables\nso uh in order to download the latest uh\ngradle distribution so you have to click\non this one right now over here there\nare different options like uh you want\nto go for 6.7 now it's they're having\nlike binary only or complete we'll go\nfor the binary only because we don't\nwant to have the source we just want the\nbinaries and the executables now it's\ngetting downloaded it's around close to\n100 mb of the installer which is there\nnow we have to just extract into a\ndirectory and then the same path we need\nto configure into the environment\nvariable so that in that way we will be\nable to see that how the gradle\nexecutables will be running and it will\ngive the\ncomplete output to us over here in this\ncase so it may take some time and once\nthe particular modifications and the\ndownload is done then we have to extract\nit and once the extraction is done so we\nwill be able to go back and\nhave some particular version or have the\nconfigurations established over there so\nthat let's just wait for some time and\nthen we will be continuing with the\nenvironment variables like this one so\nonce the installation and the extraction\nis done now we just have to go to the\ndownloads where this one is\ndownloaded we have to extract it now\nextraction is required so that we can\nhave the setup like we can set up this\npath into our environment variables and\nonce the path is configured and\nestablished we will be able to start\nfurther on that part on the execution so\nmeanwhile these files are getting\nstarted let's see so we already got the\nfolder structure over here and we will\nsee that we will give this path here\nthere is two environment variables we\nhave to configure one is the cradle\nunderscore home and one is the\nin the path variable so we'll copy this\npath here\nso meanwhile this is getting uh\nextracted we can save our time and we\ncan go to the environment variable so we\ncan right click on this one properties\nin there we have to go for the advanced\nsystems settings\nthen environment variables\nnow here we have to give it like gradle\nunderscore home now in this one we will\nnot be going giving it till the bin\ndirectory so that only needs to be there\nwhere the gradle is extracted so we'll\nsay okay\nand uh then we have to go for the path\nvariable where we will be adding up a\nnew entry in this one we will be putting\nup till the pin directory here because\nthe gradle executables should be there\nwhen i am running the gradle command so\nthese two variables i have to configure\nthen okay okay\nand okay\nso this one is done so now you have to\njust open the command prompt and see\nthat whether the execution or the\ncommands which you're running is is\ncompletely successful or not so\nmeanwhile it's extracting all the\nexecutables and all those things it will\nhelp us to understand that how the whole\nbuild process or how the build tools can\nbe integrated over there now once the\nextraction is done so you have to run\nlike cmd\njava iphone version to check the version\nof the\njava and then the gradle\nunderscore version is what you're going\nto see that you see check the version of\nthe gradle which is installed and now\nyou can see that it says that 6.7\nversion is being installed over here in\nthis case so that's the way that how we\nare going to have the cradle\ninstallation performed into our\nparticular system\nand in this one uh we will be also\nworking on some demos and some hands-on\nto understand that how we can make use\nof gradle for performing the build\nactivity so let's begin with the first\nunderstanding that what exactly is\nincredible all about\nnow griddle isn't kind of a build tool\nwhich can be used for the\nbuild automation performance and it can\nbe used for various programming\nlanguages primarily it's being used for\nthe\njava based applications it's in kind of\nbuild tool which can help you to see\nthat how exactly automatically you can\nprepare the builds you can perform the\nautomations earlier we used to do the\nbuild activity from the eclipse and we\nused to do it manually right but with\nthe help of this build tool we are going\nto do it like automatically without any\nuh manual efforts as such here there are\nlike lot of activities which we will be\ndoing during the build process primarily\nthere are different activities like\ncompilations\nlinkage packaging these are the\ndifferent tasks which we perform during\nthe build process so that we can\nunderstand that how the build can be\ndone and we can perform the automations\nuh this uh process also it's kind of a\nstandardized because again if you want\nto automate something standards or a\nstandard process is something which we\nrequire for that before we been going\nahead with that part so that's the\nreason why we are getting this well tool\nbecause this build tool helps us to do a\nstandardization process to see that how\nthe standards can be met and how we can\nproceed further with that part\nalso it's something which can be used a\nvariety of languages programming\nlanguages java is the primary language\nfor which we use the gradle but again\nother languages like scala android cc\nplus plus ruby these are some of the\nlanguages for which we can use the same\ntool\nnow it's actually using like it's\nreferring to as an trophy based domain\nspecific language rather than xml\nbecause ant and maven these are the xml\nbased build tools but this one is not\nthat dependent on xml it's using the\ngroupie based domain specific language\ndsl language is being used here\nright now um again it's something which\ncan be used to do the build it can\nfurther only use to perform the test\ncases automations also there and then\nfurther on you can deploy to the\nartifactory also that okay i want to\npush the artifacts to the artifactory so\nthat also that part also you can get it\ndone over here so\nprimary this tool is known for doing the\nbuild automations for the big and large\nprojects the projects in which the\nsource got the amount of source code and\nthe\nefforts is more so in that case this\nparticular tool makes sense now gradle\nincludes both the pros of maven and uh\nand but it removes the drawbacks or\nwhatever the uh issues which we face\nduring these two build tools so it's\nhelping us to remove all the cons which\nwe faced during the implementation of\nant and maven and again again all the\npros of and maven is implemented with\nthis cradle tool\nnow let's see that why exactly this\ngradle is used because that's a very\nvalid question that what is the activity\nlike what is the reason why we use the\ngradle because the first one is that it\nresolves issues faced on other build\ntools that's a primary reason because we\nare already having the tools like maven\nand and which is available there but\nprimary this griddle duel is something\nwhich is removing all the issues which\nwe are facing with the implementation of\nother tools so these issues are getting\nuh removed as such second one is that it\nfocuses on maintainability performance\nand\nflexibility so it's giving the focus on\nthat how exactly we can manage the big\nlarge projects and uh we can have\nflexibility that what different kind of\napproaches i want to build today i want\nto build in different ways tomorrow the\nsource code modifies gets added up so i\nhave the flexibility that i can change\nthis build script so i can perform the\nautomations so a lot of flexibility is\navailable which is being supported by\nthis tool\nand then the last one is like\nit provides a lot of features a lot of\nplugins now this is one of the benefit\nwhich we get in the case of maven also\nthat we get lot of features but again\nwhen we talk about cradle then it\nprovides a lot of plugins like let's say\nthat normally in a build process we do\nthe compilation of the source code but\nsometimes let's say that we want to\nbuild an angular or a node.js\napplication now in that case we may be\ninvolved in running some command line\nexecutions some command line commands\njust to make sure that yes we are\nrunning the commands and we are getting\nthe output so there are a lot of\nfeatures which we can use like there are\na lot of plugins which is available\nthere and we will be using those uh\nplugins in order to go ahead and in\norder to execute those build process and\ndoing the automations now let's talk\nabout the cradle and move on because\nagain when we talk about me when like it\nwas like something which was primarily\nused by the java but again when we are\ntalking about cradle so again it's just\nuh being used primarily for the java\nhere but what is the reason that\nwe prefer gradle over the create maven\nso what are the different\nreason for that let's talk about that\npart because this is very important we\nneed to understand that what is the\nreason that gradle is preferred as an\nbetter tool for the java as compared to\nmaven when we talk about for the build\nautomation here\nnow the first one is that the gradle\nusing the groupie dsl language domain\nspecific language whereas the maven is\nconsidered as an project management tool\nwhich is uh creating the palms or xml\nfile format files so it's being used for\nthe java project but xml format is being\nused here and on the other hand gradle\nis something which is not using the xml\nformats and uh whatever the build\nscripts you are creating that is\nsomething which is there in the group\nbased\ndsl language and on the other hand in\nthe pump we have to create the xmls\ndependencies whatever the attributes you\nare putting up in the main one that's\nsomething which is available there in\nthe format of xml the overall goal of\nthe gradle is to add functionality to a\nproject whereas the goal of the maven is\nto you know to complete a project phase\nlike to work on different different\nproject phase like compilation test\nexecutions uh then uh packaging so uh\nthen deploying to artifactory so these\nare all different phases which is\navailable there into the maven but on\nthe other hand gradle is all about\nadding the functionality that how you\nwant to have some particular features\nadded up into the build scripts in\ngradle there are like we usually specify\nthat what are the different tasks we\nwant to manage so different different\ntasks we can add up into the case of\ngriddle and we can override those tasks\nalso in case of maven it's all about the\ndifferent phases which has been\nhappening over here and it's in sequence\nmanner so these phases happens in the\nsync with order that how exactly you can\nbuild up the sequence there but in case\nof gradle you can have your own tasks\ncustom tasks also and you can disrupt\nthe sequence and you can see that how\nthe different steps can be executed in a\ndifferent order\nso maven is something which is a phase\nmechanism there but gradle is something\nwhich is according to the features or\nthe flexibilities now gradle works on\nthe tasks whatever the task you want to\nperform you uh it works directly on the\nstars there on the other hand uh maven\nis something does not have any kind of\ninbuilt cash so every time you're\nrunning the build so separate uh\nthings or the plugins and all these\ninformation gets loaded up which takes\ndefinitely a lot of time on the other\nhand gradle is something which is using\nits own internal cache so that it can\nmake the uh builds a little bit faster\nbecause it's not something which is\ndoing the things from the scratch\nwhatever the uh\nthings is already being available in the\ncache so it's just pick that part and\nfrom there it will proceed further on\nthe build automation and that's a reason\nwhy cradle performance is much faster as\ncompared to maven because it uses some\nkind of a cache in there and then helps\nto improve the overall performance now\nlet's talk about the gradle installation\nbecause this is a very important aspect\nto be done because when we are doing the\ninstallation\nwe have to download the cradle\nexecutables right so let's see that what\nare the different steps is involved in\nthe process of the critical installation\nso when we talk about the gradle\ninstallation so there are primary four\nsteps which is available the very first\none is that you have to check if the\njava is installed now if the\njava is not installed so you can go to\nthe open jdk\nor you can go for the oracle java so you\ncan do the installation of the jdk on\nyour system so jdk8 is something you can\nmost commonly use nowadays so you can\ninstall that\nonce the java is downloaded and\ninstalled then you have to do the gradle\nuh download cradle there now once the\ngradle binaries are executable uh or the\nzip file gets downloaded so you can add\nthe environment variables and then you\ncan validate if the gradle installation\nis working fine as expected not so we\nwill be doing the gradle installation\ninto our local systems and uh into the\nwindows platform and we'll see that how\nexactly we can go for the installation\nof cradle and we'll see that what are\nthe different version we are going to\ninstall here so let's go back to the\nsystem and see that how we can go for\nthe gradle installation so this is the\nwebsite of the jdk or for java oracle\njava now here you have different jdk so\nfrom there you can do whatever the\noption you want to select you can go\nwith that so jdk8 is something which is\nmost commonly used nowadays like it's\nmost comfortable or compatible version\nwhich is available so um in case you\nwant to see that if the jdk is installed\ninto your system all you have to do is\nthat you have to just say like java\nhyphen version and that will give you\nthe uh output that whether the java is\ninstalled into your system or not so in\ncase my system the java is installed but\nif you really want to do the\ninstallation you have to download the\njdk installer from this website from\nthis oracle website and then you can\nproceed further on that part now once\nthe jdk is installed so you have to go\nfor the cradle installation because\ncradle is something though which will be\nperforming the build automations and all\nthat stuff so you have to download the\nbinaries like the zip file probably in\nwhich we have the executables and all\nand then we have to have have some\nparticular environment variables\nconfigured so that we will be able to\nhave the\nsystem modified over there so right now\nwe have got like the prerequests as in\njava version install now the next thing\nis that we have to install or download\nthe executables so uh in order to\ndownload the latest uh gradle\ndistribution so you have to click on\nthis one right now over here there are\ndifferent options like uh you want to go\nfor six point seven now it's they having\nlike binary only or complete we'll go\nfor the binary only because we don't\nwant to have the source we just want the\nbinaries and the executables now it's\ngetting downloaded it's around close to\n100 mb of the installer which is there\nnow we have to just extract into a\ndirectory and then the same path we need\nto configure into the environment\nvariable so that in that way we will be\nable to see that how the gradle\nexecutables will be running and it will\ngive the\ncomplete output to us over here in this\ncase so it may take some time and once\nthe particular modifications and the\ndownload is done then we have to extract\nit and once the extraction is done so we\nwill be able to\ngo back and\nhave some particular version or have the\nconfigurations established over there so\nthat let's just wait for some time and\nthen we will be continuing with the\nenvironment variables like this one so\nonce the installation and the extraction\nis done now we just have to go to the\ndownloads where this one is\ndownloaded we have to extract it now\nextraction is required so that we can\nhave the setup like we can set up this\npath into our environment variables and\nonce the path is configured and\nestablished we will be able to start\nfurther on that part on the execution so\nmeanwhile these the files are getting\nstarted let's see so we already got the\nfolder structure over here and we will\nsee that we will give this path here\nthere is two environment variables we\nhave to configure one is the cradle\nunderscore home and one is the um in the\npath variable so we'll copy this path\nhere\nso meanwhile this is getting uh\nextracted we can save our time and we\ncan go to the environment variable so we\ncan right click on this one properties\nin there we have to go for the advanced\nsystems settings\nthen environment variables\nnow here we have to give it like gradle\nand let's go home now in this one we\nwill not be going giving it till the bin\ndirectory so that only needs to be there\nwhere the gradle is extracted so we'll\nsay okay\nand uh then we have to go for the path\nvariable where we will be adding up a\nnew entry in this one we will be putting\nup till the pin directory here because\nthe gradle executables should be there\nwhen i'm running the gradle command so\nthese two variables i have to configure\nthen okay okay\nand okay\nso this one is done so now you have to\njust open the command prompt and see\nthat whether the execution or the\ncommands which you're running is is\ncompletely successful or not so\nmeanwhile it's extracting all the\nexecutables and all these things it will\nhelp us to understand that how the whole\nbuild process or how the build tools can\nbe integrated over there now once the\nextraction is done so you have to run\nlike cmd\njava iphone version to check the version\nof the\njava and then the gradle\nunderscore version is what you're going\nto see that you see check the version of\nthe gradle which is installed and now\nyou can see that it says that 6.7\nversion is being installed over here in\nthis case so that's the way that how we\nare going to have the cradle\ninstallation performed into our\nparticular system so let's go back to\nthe content let's talk about the cradle\ncore concepts here now\nin this one we are going to talk about\nwhat are the different core concepts of\ncradle are all about the very first one\nis the projects here now a project\nrepresents a item to be performed over\nhere to be done like deploying an\napplication to a staging environment\nperforming some build so gradle is\nsomething which is required uh the\nprojects um the gradle project which you\nprepare is not having multiple tasks\nwhich is available there which is\nconfigured and all these tasks all these\ndifferent tasks needs to be executed\ninto a sequence now sequence is again is\na very important part because again if\nthe sequence is not meant properly then\nthe execution will not be done in a\nproper order so that's the very\nimportant aspect here\ntasks is the one in which is a kind of\nidentity in which we will be performing\na series of steps these tasks may be\nlike compilation of a source code\npreparing a jar file preparing a web\napplication archive file or er file also\nwe can have like\nin some tasks we can even publish our\nartifacts to the artifactory so that we\ncan store those artifacts into a shared\nlocation so there are different ways in\nwhich we can have this uh particular\ntasks executed\nnow build scripts is the one in which we\nwill be storing all this information\nwhat are the dependencies what are the\ndifferent tasks we want to refer it's\nall going to be present in the\nbuild.gradle file there build.greater\nfile will be having the information\nrelated to what are the different\ndependencies you want to download and\nyou want to store this all these things\nwill be a part of the build scripts\nnow let's talk about the features of\ncradle what are the different features\nwhich we can\nuse in case of cradle here\nthere are different type type of\nfeatures which is available there so\nlet's talk about them one by one so the\nvery first one over here is the high\nperformance then uh high performance is\nsomething which we can see that we\nalready discussed that in case you are\nusing a large projects so gradle is\nsomething which is in better approach as\ncompared to maven because of the high\nperformance which we are getting it uses\nan internal cache which makes sure that\nyou are using like you are doing the\nbuilds faster and that can give you a\nhigher performance over there\nsecond one is the support it provides\nthe support so it yes definitely\nprovides a lot of support on how you can\nperform the builds and it's being the\nlatest tool which is available there so\nthe support is also quite good in terms\nof how you want to prepare the build how\nyou want to download the plugins\ndifferent plug-in supports and the\ndependencies uh information also there\nnext one is multi-project build software\nso using this one you can have multiple\nprojects in case in your repository you\nhave multiple projects say so all of\nthem can be easily built up with the\nhelp of this particular tool so it\nsupports multiple project to be built up\nusing the same gradle project and gradle\nscripts so that support is also\navailable with this gradle build tool\nuh incremental builds are also something\nwhich you can do with the help of cradle\nso if you have done only the incremental\nchanges and you want to perform only the\nincremental build so that can also be\npossible with the help of a griddle here\nthe uh build scans so we can also\nperform the build scans so we can use\nsome\nintegrations with sonarcube and all\nwhere we can have the uh scans done to\nthe source code on\nunderstand on how the build happens or\nhow the source code really happens over\nthere so that code scan or the build\nscans can also be performed with this\none\nand then uh it's a familiarity with java\nso for java it's something which is uh\nconsidered as in by default not even\njava in fact android which is also using\nthe java programming language is using\nthe uh particular cradle over here so\nthat the build can be done and it can\ngain uh benefits out of that so in in\nall the manners in all the different\nways it's basically helping us to see\nthat how uh we can make sure that this\ntool can help us in providing a lot of\nfeatures and that can help us to make a\nreliable build tool for our java based\nprojects or any other programming based\nproject here right now let's see that\nhow we can convert a java project with\nthe cradle here and uh for that we have\nto go back and created something which\nis already installed we just have to\ncreate a directory where we can have\nlike how we can perform some executions\nwe can prepare some build scripts and we\ncan have a particular execution of a\ngradle build happened over there so\nlet's go back to the machine okay so we\nare going to open the terminal here and\nwe will see that how we can create it so\nfirst of all i have to create a\ndirectory structure let's say that we'll\nsay like gradle\nhyphen project now once the project is\ncreated so we can go inside this\ndirectory so to\ncreate some critical related projects\nand preparing the files now uh in this\none let's first create a particular one\nso we will be saying like vi\nbuild\ndot gradle\nso in this one we are going to put like\nuh\ntwo plugins we are going to use so we\nare going to say like apply\nplugin\njava\nand uh then we are going to say like\napply\nplugin\napplication\nso these two plugins we are going to use\nand when we got this file over here in\nthis one so it shows like build.gradle\nwhich is available there in this case\ntwo these files are available now if you\nwant to learn like you know what are the\ndifferent tasks so you can run like\ngradle tasks command over there so\ngradle task will help you know that what\nare the different tasks which is\navailable over here by processing the\nbuild scripts and all so um\nthis will definitely help you to\nunderstand on giving you the output so\nhere all the different tasks are being\ngiven and it will help you to understand\nthat what are the different tasks you\ncan configure and you can work over here\njust like jar files clean and all that\nstuff build compile then it is there\nthen all these different executions\nassemble then javadoc then build then\ncheck test all these different tasks are\nthere and if you really want to run the\ngradle build so you can run like cradle\nclean to perform the clean activity\nbecause right now you are doing like a\nbuild so before that you can have a\nclean and then you can run a\nspecific command or you can run the\ngriddle clean build which will perform\nthe cleanup also and it will at the same\ntime will have the build process also\nperformed over there so build and clean\nup both will be executed over here\nand what is the status whether it's a\nsuccess or a failure that will be given\nback to you now in this case in the\nprevious one if you see that when you\nrun the clean the cradle clean it was\nonly running one task but when you go\nfor the\nbuild uh process when you run the gradle\nclean build it's going to give you a\nmuch more information in fact you can\nalso give me uh further information like\nyou can have the hyphen iphone info flag\nalso there so that if you want to get\nthe details about the uh different uh\ntasks which we which is being executed\nover here so that also you're going to\nget over here in this one so you just\nhave to put like hyphen iphone info and\nthen all these steps will be given back\nto you that how these uh tasks will be\nexecuted and the response will be there\nso that's a way that how you can create\na pretty much simple straightforward\nproject in form of gradle which can\ndefinitely help you to run some couple\nof gradle commands and then you can\nunderstand that what are the basic\ncommands you can run and how the\nconfigurations really works on there\nright let's go back to the main content\nright now let's move on to the next one\nso in the next one we are going to see\nthat how we can prepare a griddle build\nproject in case of eclipse now we are\nnot using the a local system we are not\ndirectly creating the folders and files\nhere we are actually using the eclipse\nfor performing the creating a new cradle\nproject over here so let's move on that\npart\nokay so now the eclipse is open and i\nhave opened in this one the very first\nthing is that we have to do the gradle\nplugin installation so that we can\ncreate new projects on cradle\nand then we have to\nconfigure the path that's how the gradle\nplugin can be configured on the previous\nuh preferences and all that stuff and\nthen we will be doing the build process\nso the very first thing is that we have\nto go to the eclipse marketplace\nin there we have to search for griddle\nso once the search is\ndone will show us the plugins related to\ngradle so we have to go for\nbuild ship\ngradle integration so we'll click on the\ninstall\nit will proceed with installation it\nwill download it in some cases maybe\nit's part of the eclipse as an in the id\nso you can go to the installed tab and\nyou can see that also that if this\nplug-in is already installed or not but\nin this case we are installing it and uh\nonce the installation is done we just\nhave to restart the\nspecific ones we have to restart this\neclipse so that the changes can be\nreflected\nso it's downloading\nit's downloading the cradle here and\nonce that is installed we will be able\nto use it over here in this case in this\nscenario so we have to just wait for\nthat part so still downloading the jar\nfiles\nso once the jar file is done it's now\nover the areas and downloaded so after\nthat we will be able to proceed further\non that download password so it's going\nto take some time to download it and\nonce it's done we will be able to\nproceed further now once the progress is\ndone so it's asking us for the restart\nnow\nso uh before that uh we just have to\nclick on restart now and then the\neclipse will be restarted all together\nagain here so you can do it manually or\nyou can go for that options it just\nrequire a restart so that the new\nchanges can be reflected over here so\nthe plugins can be activated and can be\nreferenced here now we have to just uh\nput up like the\nyou know the configuration where we can\nhave the system so we can go for the\ngradle configuration so we can go for\nwindows and then preferences\nnow in this case we have to go for the\nuh for the ones in which the cradle\noption is available there so cradle is\nwhat we are going to select now user\nhome the gradle user home is what we\nneed to use right so you want to go for\nthe gradle you want to go for local\ninstallation so so all these options you\ncan use you can if you go for the\ngriddle wrapper then it will be\ndownloading the cradle locally and it is\ngoing to use the cradle w or\ngriddlew.bat file but if you already\nhave an installation locally so you can\nprefer that also right now in the\nprevious demo we have already got the\ngriddle uh extracted so we just have to\ngo for the downloads and the downloads\nalready gradle is available so we are\ngoing to select that part here so this\nis what we are going to select\nright so this represents that this is\nthe directory structure in which we are\nhaving the uh mechanism so you can\neither go for the pill scan so you can\nselect the build scan also so once this\nis enabled then all the projects will be\nscanned and will be you know published\nand uh\nit's in kind of additional option which\nis available if you really want to\ndisable it you can disable it also and\nyou can go with this configuration\nso uh this is where the particular\ngradle folder is being put over here in\nthis case\nand then we have to just click on apply\nand\nwe just have to click on apply and close\nso with this one the\nparticular execution is done now we will\nbe going for the project creation so you\ncan right click over here or you can go\nto the file also so here we are going to\ngo for the job project and in this we\nare going to have a gradle project so\ncradle project is what we are going to\ncreate here\nand next\nso we are going to say like cradle\nproject\nand then\nnext\nso once that is done so finish\nso with this one when you create the\nproject so what will happen that\nautomatically there will be a folder\nstructure will be available there right\nand uh there are some\ngradle scripts which will also be\ncreated there so we will be doing the\nmodifications there and we'll see that\nhow the uh particular gradle build\nscript looks like and how we can we will\nbe adding some couple of uh selenium\nrelated dependencies and we'll see that\nhow we can have more and more\ndependencies added and what will be the\nimpact of those dependencies on the\noverall project so that also it's very\nimportant aspect to be considered so let\nthis processing be happen over there\nit's just creating and uh some plugins\nand binaries are getting installed and\ngetting downloaded so we'll see that\nonce the project is uh imported\ncompletely executed over here and got\ncreated we can extract that now if you\nsee here the particular option is\navailable about the cradle tasks so you\ncan extract it also and you will be able\nto know that what are the different\ntasks which is available there let's see\nthat in the build they are running like\nbuild these are the different tasks\nwhich is happening inside the build\nprocess so\ngradle executions will be also available\nover here in this case and greater tasks\nwill be different it will be represented\nover here in this one so you just have\nto extract on the gradle project okay\nthis is the library which is available\nnow uh what happens that you will be\nable to have like settings.gradle in\nthis one you will be able to have like\nokay gradle hyphen project is something\nwhich is available there in this one so\nthat's what i'm being referring\nthen we have over here as in these\nfolder structures which is created like\nsource main java\nthis is the one source test java is the\none which is available as in the folder\nstructure\nand so test resources are also available\nhere so the mean source main resources\nare also available\nnow in this case what happens that these\nare the dependencies project and\nexternal these are the different\ndependencies are available there so\nlet's see let's add another dependency\nover here in this one in the\nbuild.gradle script and see that how we\ncan do that if we open build.gradle file\nso you can see that these dependencies\nare there like test implementation junit\nis available there right and then we\nhave a implementations of this one which\nis available now these jar files which\nyou put up it will automatically be\nadded up as in part of this one as in\npart of the\nparticular\ndependencies over here and uh which\nmeans that you don't have to store them\nas an within the repository and\nautomatically they can be happened over\nthere so let's open a dependency page so\nwe will be going to mvn repository where\nwe will be opening a dependency link\nso this is the dependency link here so\nselenium iphone java is available and it\ncan give you the dependency for all the\ndifferent options now we have for maven\nthis is the one and for gradle this is\nthe one here so we have to just copy\nthis one and uh we have to use it as an\ndependency so this is the group and this\nis the name and the version which we are\nusing here now we have copied this one\nso we will go back to the\neclipse so here we have to just put that\ndependency\nand uh we have to just save it so uh\nthis is something which is providing\nlike selenium dependencies which is\navailable so now we have to just refresh\nthe project so right click over here\nthen you will be able to see the options\nin the gradle saying that refresh gradle\nproject now once the moment you do that\nso you will be able to do like for the\nfirst time maybe it will take some time\nto download all the dependencies which\nis related to selenium but after that\nyou will be able to see like the\ndependencies will be simply added up\nover here in this case so you can see\nthat all the selenium related\ndependencies are added up for any reason\nif you comment these ones\nand you say like\nsynchronize again\nso you will see that all the\ndependencies which you are adding up\nfrom this selenium represent uh from the\nselenium perspective will be gone back\nagain\nso this is the way that how you can keep\non adding the dependencies which is\nrequired for preparing your build for\nyour source code and from there you will\nbe able to proceed further on the\nexecution part so that's the best part\nabout this uh cradle here so that's a\nway that how we are going to prepare a\ngreater project within the eclipse and\nnow you can keep on adding like the\nsource code in this one and that's the\nway that how the code base will be added\nup over here right so that's the way\nthat how the particular\nexecutions or this gradle project is\nbeing prepared in case of eclipse\nselenium installation is a three-step\nprocess so it has certain prereqs the\nfirst prerequisite you need to have java\nin your system so we will be installing\njava first and then we will be working\nwith eclipse id so we will be installing\neclipse and then we will install\nselenium for java we will install the\nversion java 8 and for eclipse we have a\nversion 4.10 this was the last stable\nversion which was released in december\nlast year so i'll be using that version\nand selenium we will download the latest\n3.14 version okay so let's get started\nwith our first step which is the java\ninstallation so to install java let's go\nto the browser and simply just search\nfor java 8 download\nso now you will see that there is an\noracle site which is listed there and\nthat is where you would be downloading\nall your java package so go ahead and\nclick on that and for you to download\nany jdk package from the oracle site you\nneed to create an account so if you\nalready have one you just need to log in\nusing that account and then you can\ndownload any of the jdks and if you do\nnot have one please go ahead create a\nnew account on the oracle login to that\naccount and then you can just download\nthe java it so since i already have an\naccount and i have already downloaded\nthe package but i'll show you how and\nwhere to download it from so in this\npage if you scroll down so you will see\nthis java development kit 8211. so this\nis the version we'll be downloading it\nso click on the accept license agreement\nand then since we are working on the\nwindows system today so we will be\ndownloading this the windows package so\njust click on that and it will get\ndownloaded in your downloaded folder and\nas i said i've already downloaded the\npackages so here it is what i've done is\ni've just created a directory called\ninstallers and i'm going to be keeping\nall my installables here so here i have\na folder called java installer and this\nis where my installable is so now that\nwe have this file so we will just go\nahead double click on it and launch this\ninstaller the installer is launched and\njust click on run so this will take a\nfew minutes to install java the\ninstaller is launched now just click on\nthe next button here so here for the\ninstallation directory you can\nchange the directory to the choice of\nwhatever drive and the folder structure\nyou want to i would like to leave it as\ndefault here and we'll just go and click\non next and then the java installation\nis in progress so let's wait until this\nis completed it really shouldn't take\ntoo much time maybe just a few more\nminutes here\nokay accept the license term just click\non next we leave the destination folder\nas it is\nso jdk8 is successfully installed on\nyour system so close the installer now\nand let's go ahead and check whether the\ninstallation is done properly so for\nthat what i'll do is i'll go to my\ncommand prompt and i'll send just say\njava minus version so it says java\nversion 1.8 and this tells us that the\njava is installed successfully now after\nthis installation there are couple of\nconfigurations which we need to do and\nwhat are those configuration one is you\nneed to set the path variable and then\nwe are also going to set a java home\ndirectory so for that first let's go\nahead and check where is the java\ninstalled actually let's figure out the\ndirectory first so if you remember the\ndirectory structure where the java got\ninstalled was in program files java i\nhave there are certain previous versions\nwhich had installed and then uninstalled\nit so that is why you see some residuals\nhere sitting here let's not worry too\nmuch about that instead let me go to the\nlatest one what i have installed which\nis this okay and there is a bin folder\nhere and this is the path which we need\nto set in our path variable so what i\nwill do is i will just copy this path\nand then\ngo to your control panel here go to your\nwhere is my system yeah so click on the\nsystem go to advanced system setting and\nhere in the environment variables find\nthe path variable okay and then say edit\nnow what are we doing here in the path\nvariable is we are going to add the java\nbin directory to the path be very\ncareful whenever you are editing your\npath variable do not overwrite anything\nalways go into the edit mode go towards\nthe end here and then just say control v\npaste the path which you have just\ncopied from the explorer window that's\nit now just say okay done so your path\nsetting is done so what's the next one\nwe need to do we need to add a new\nenvironment variable called the java now\nwhat i'll do for that is i just say new\ni just type java home here\nand what is the value of this we need to\nset we need to set the same path but\nwithout the bin directory so we just\nneed to set the path till your java\ndirectory that is this so we'll just\ncopy the path again and paste it here\nthat is all just say okay click on ok\nclick on ok here and we are done so\nagain let's go to our command prompt and\njust say java minus version\nso everything seems to be fine so now\nsuccessfully we have installed java on\nthe system so what is our next\ninstallation step what we have now we\nneed to install the eclipse so let's go\nback to the browser again so to download\neclipse we will be downloading the\npackage from the eclipse.org so when you\ngo here to eclipse.r you can see the\nlatest version which is available and\nthe latest version available when this\nvideo was made was 2090 06. so\nespecially with eclipse since it's an\nopen source i prefer to work with the\nlast stable version and so does most of\nthe developers do and hence that is the\nreason why i have picked up the version\nwhich is like last year's version which\nis\n4.10 which was released in last december\nso you can always choose to go with the\nlatest version but then if there are any\nissues and if you are like first time\nworking with the eclipse you're going to\nget confused as where these issues are\ncoming from right so i would still\nrecommend that you use the last stable\nversion which is available with your\neclipse so now to get the last table\nversion what you need to do is go and\nclick on this download packages and here\nif you scroll down this page you can see\nhere more downloads so there is a list\nof all the previous releases of eclipse\nwhich is available and this is what we\nneed to download so just click on that\n4.10 version and then click on the os on\nwhich you want to install eclipse for us\nit is windows so i'll just click here on\nthe 64-bit windows and then click on the\ndownload and you will be downloading the\ncomplete package so once you download\nthis is what it will look like so let's\ngo back to our directory of installers\nso this is the installer for the eclipse\nwhich i got now what's the next step i\nneed to do just launch this installer\nand install eclipse so i'll just say\ndouble click on this i'll say run\nso here you'll see multiple options here\nfor eclipse installation so depending on\nyour requirement you can go ahead and\ninstall any of these packages so for us\nwe just need an eclipse id for java\ndeveloper so i'll select this and i'll\nsay install so again you'll have a\nchoice of directory where you want to\ninstall so i have chosen d drive here\nthis is the default directory name it\ntakes which is ok we can leave it as it\nis and then also you have an option to\ncreate a start menu entry and desktop\nshortcut so just leave the default\nselection as it is and go ahead and\nclick on install so this will take a\nwhile to install the eclipse\nthis is select all you can close this\nwindow this is select all and accept it\nokay so the installation has been\ncompleted successfully so let's go and\nclick on this launch and let's see the\nfirst window what opens\nwhen you launch the eclipse you need to\nspecify a workspace directory now what\nis this workspace directory so this is a\ndirectory or a folder wherein all the\njava files or any programs or any\nartifacts which you are going to create\nthrough eclipse will be stored in this\nparticular folder so this could be any\nlocation on your system so this is you\ncan go ahead browse the location and\nchange it so for in our case what we\nwill do is i'll go to the d drive and\ni already have a directory so here i'll\ncreate i'll just clear select this\nfolder and then create a folder called\nworkspace i'll say my workspace and then\ni'll say launch so every time i open the\neclipse right so this is going to take\nas my default workspace and all my\nprograms all my java scripts or my\nautomation scripts are getting are going\nto be stored in this particular location\nso we'll say launch\nso this is a welcome window which opens\nwe can just close this and there we go\nthe eclipse is open with a certain\nperspective so there are certain windows\nhere which we do not need let's just\nclose them so now the first thing what\nyou do after launching the eclipse is go\nahead and create a new project so i'll\nsay file new and since i'm going to be\nusing java with selenium i'll say create\njava project so give a project name\nlet's say my first project now you have\nan option here to select the jre which\nyou want to use so we just installed\nthis jdk 1.8 okay so i'm going to click\non use default gre otherwise you also\nhave an option to use a project specific\ngr for example i could have two\ndifferent projects where one project i'm\ngoing to be working with gre 1.8 and\nthere is another project which i want to\nwork with the latest java maybe java 12\nand i can have more than one java\ninstalled on the machine so this gives\nme an option to select whichever java i\nwant to work with so if you have another\njava installed here it will show up in\nthis list and you can just go ahead and\nselect that now since we have only one\njava installed on our machine which is\njava 1.8 i will say use default gre\nwhich is 1.8 and i will click on finish\nnow if you observe this folder structure\nthe project which is created see all the\nreference libraries to this particular\njava have been created here now we are\nready to create\nany kind of java programs in this\nproject so now we have successfully done\nthe second step of our installation\nwhich is the eclipse installation after\nthis we need to install the selenium so\nagain let's go back to the browser and\nsee what files we need to download to\ninstall selling so let me go to my\nbrowser and here i will be going to the\nseleniumhq.org so if you are working\nwith selenium this particular website\nthe seleniumhq.org is going to be a\nbible everything and anything related to\nselenium is available in this website\nwhether you want to download the files\nwhether you want to refer to the\ndocumentation anything regarding to\nselenium is available here so what we\nwant now is the installables for\nselenium so here go to the download tab\nnow for you to install selenium and\nstart working with selenium there are\nthree things which are required for you\nto download one is a stand alone\nselenium server so this is not required\nimmediately when you get started with\nselenium however when you start working\nwith remote selenium webdriver you would\nbe requiring this when you have a grid\nsetup you will be requiring the\nstandalone server so for that what you\ncan do is you can just download the\nlatest version available here so when\nyou click on that it will download the\nfile into your download folder so this\nis one particular file which you need to\nkeep next selenium client and web driver\nlanguage bindings now in today's demo we\nwill be looking at selenium with java so\nthat means my client package of java is\nwhat i need to download so whatever\nprogramming language selenium supports\nwe have respective downloadables\navailable with that say if you're\nworking with python then you need to\ndownload your client library for python\nand since we are working with java you\nneed to download this package so simply\nwhat you need to do click on this link\nand it will download the java package\nfor you which are basically the jar\nfiles so we have client libraries now\nand then there is another component what\nwe need now with selenium you are going\nto be automating your web browser\napplications correct and you also want\nyour applications to run on multiple\nbrowsers so that means your scripts the\nautomation scripts which you create\nshould be able to run on any browser\nselenium works with multiple browsers\nlike edge safari chrome firefox and\nother browsers even it has a support for\nheadless browser now every browser which\nit supports comes with its own driver\nfiles now say for example we want to say\nwork with firefox driver so that means\nfor us to start working with firefox\nbrowser we need to download something\ncalled as a gecko driver here and if you\nwant to work with chrome browser you\nneed to install the chrome driver so\ndepending on what browsers you'll be\ntesting with go ahead click on each of\nthis link and download the latest driver\nfiles now since we are going to be\nworking with firefox in this demo what i\nneed to do is i just need to click here\non the latest link so when i click on\nthe latest link it is going to take me\nto this driver files so driver files are\nspecific to each of the operating system\nso if you go down here you will see\nthere is a separate driver file\navailable for linux for mac and for\nwindows so depending on which operating\nsystem where you'll be running your test\ndownload that particular driver file and\nthis is the driver file i need because\nwe are working on windows machine so\nthese are the three different packages\nwhich we need to download from the\nselenium hq dot org for us to install\nselling so let me show you the folder\nwhere i've already downloaded all this\nso if you see here selenium java\n3.141.59 okay this is nothing but our\nclient library which we saw here let's\ngo back to the main page here that is\nthis so once i download this this is a\nzip file after i unzip the file this is\nthe folder structure i see and let's see\nwhat is there at this folder structure\nso there are two jar files here and then\nin the lips there are multiple jar files\nand we will need all this to work with\nselenium and then we also downloaded the\ndriver files so what i did was after\ndownloading those driver files for the\nbrowser i created a directory here\ncalled drivers and i've kept all my\nbrowser drivers here so i have a driver\nfile downloaded for chrome i want to\nwork with firefox so i have a gecko\ndriver here and then for internet\nexplorer that's it so this is all we\nneed so once we have all this what you\nneed to do is go to your eclipse in the\neclipse right click on the project which\nyou have created and then go to the\nbuild path and say configure build path\ngo to the libraries tab here now do you\nsee this jre libraries here this is what\ngot installed first and now similarly we\nare going to add the selenium jars to\nthis library and how do we add that on\nyour right you can see this add external\njars click on add external jars go to\nyour folder where you have downloaded\nyour selenium which is this select all\nthe jar files which is available so i\nhave two jar files here i'll just say\nclick open again i will click on add\nexternal jar now from the libs folder i\nwill select all this file so select all\nthe five jars and click on open so you\nshould see all the seven jar files here\nso once you have this just say apply and\nclose now if you look into your project\ndirectory here you will see some a\nfolder called referenced library and\nthis is where you will see all the\nselenium charts here this is a very\nsimple installation in eclipse when you\nwant to install selenium you just need\nto export all the jars of the selenium\ninto eclipse and now your system is\nready to start working with selenium\nscripts all right so now let's just test\nour installation by writing a small\nselenium test script so for that what i\nwill do is i'll go to the source folder\nright click new and i'll say java class\nso let's name this as say first selenium\ntest and i will select this public\nstatic void main and i will click on\nfinish all right so now let's create a\nuse case say we want to launch a firefox\nbrowser and then we want to launch the\namazon site so this will be just two\nsimple things which we will be doing in\nthis test script so for me to do that\nwhat i usually do is i create a method\nfor any functionality which i want to\ncreate here so now i want to do a launch\nbrowser so i'll create a method here\ncalled launch browser now whenever you\nstart writing your selenium scripts the\nfirst line what you need to do is you\nneed to declare an object of webdriver\nclass so here i'll say web driver driver\nso now if you hover over this error what\nit is showing it says import web driver\nfrom or dot open qa dot selling it so if\nyou remember when we installed the\nselenium we imported all these jars\nright so that means so what whenever we\nwant to use a web driver we need to\nimport this class from these packages so\njust go ahead and click on this import\nstate done now next step now for us to\nlaunch a firefox browser it is a two\nsteps process which is involved here one\nis you need to set the system property\nand then you need to launch the driver\nso let's do that i'll say system dot set\nproperty so use this method set property\nso this takes two arguments the key and\nthe value now what is the key i'm going\nto mention here i'm going to be\nmentioning the gecko driver and the path\nfor the gecko driver okay because since\ni'm working with the firefox so in\ndouble quotes i'll say\nwebdriver.geco.driver this is my key and\nthe value is going to be sorry the fully\nqualified path for your driver files and\nyou know where we have kept our driver\nfirst let's go to that driver files in d\ncolon i have selenium tutorial in\ninstallers i have driver folder okay so\ni'm just going to copy the complete path\nfrom here ctrl c and\ni paste it here control v along with\nthis i need to provide the file name for\nthe gecko driver which is\ngeckodriver.exe and let's complete this\nstep next so once i've set the property\ni need to provide a command for\nlaunching my firefox driver and how do i\ndo that i simply use this driver object\nwhich i have created driver equal to\nnew firefox driver again similarly the\nway we imported packages for web driver\nwe also need to import the package for\nfirefox driver so just hover over the\nmouse over that and select import\nfirefox drive with these two statements\nwe will be able to launch the firefox\nbrowser and as i said in our use case\nwhat is the next thing we want to do we\nwant to launch say amazon dot in website\nfor that there is a command in selenium\nwhich says driver.get\nand you pass the url here so for me to\nwrite the url what i usually do is i go\nto my browser i open the website which i\nwant to work with in our case it's\namazon.in and i just simply copy this\nfully formed url go to my eclipse and\njust paste it here now this ensures that\ni don't make any mistakes in typing out\nthe url let's complete the statement and\nwe are done and now in the main function\ni'll just create an object of this and\nwe will call this method so i'll copy\nthis class for selenium test say obj\nequal to new for selenium test and now\ni'll say obj dot this is a function\nlaunch browser so let's save this and\nexecute this control c right click run\nas\njava application okay so the mozilla\nfirefox has been launched\nnow it should launch your amazon.com\nbingo so there goes our first test\nscript which runs successfully before\nyou start understanding any automation\ntool it's good to look back into what\nmanual testing is all about what are its\nchallenges and how automation tool\novercomes these challenges challenges\nare always overcome by inventing\nsomething new so let's see how selenium\ncame into existence and how did it\nevolve to become one of the most popular\nweb application automation tool selenium\nsuite of tools selenium is not a single\ntool it has multiple components so we\nwill look into each of them and as you\nknow every automation tool has its own\nadvantages and limitations so we will be\nlooking at what the advantages are and\nthe limitations of selenium and how do\nwe work around those limitations all\nright so let's get started manual\ntesting a definition if you can say a\nmanual testing involves the physical\nexecution of test cases against various\napplications and to do what to detect\nbugs and errors in your product it is\none of the primitive methods of testing\na software this was the only method\nwhich we knew of earlier it is execution\nof test cases without using any\nautomation tools it does not require the\nknowledge of a testing tool obviously\nbecause everything is done manually also\nyou can practically test any application\nsince you are doing a manual testing so\nlet's take an example so say we have a\nuse case you are testing say a facebook\napplication and in facebook application\nlet's let's open the facebook\napplication and say create an account\nthis is your web page which is under\ntest now now as a tester what would you\ndo you would write multiple test cases\nto test each of the functionalities on\nthis page you will use multiple data\nsets to test each of these fields like\nthe first name the surname mobile number\nor the new password and you will also\ntest multiple links what are the\ndifferent links on this page like say\nforgotten account or create a new page\nso these are the multiple links\navailable on the web pages also you look\nat each and every element of the web\npage like your radio buttons like your\ndrop down list apart from this you would\ndo an accessibility testing you would do\na performance testing for this page or\nsay a response time after you say click\non the login button literally you can do\nany type of tests manually once you have\nthese test cases ready what do you do\nyou start executing this test cases one\nby one you will find bugs your\ndevelopers are going to fix them and you\nwill need to rerun all these test cases\none by one again until all the bugs are\nfixed and your application is ready to\nship now if one has to run test cases\nwith hundreds of transactions or the\ndata sets and repeat them can you\nimagine the amount of effort required in\nthat now that brings us to the first\ndemerit of the manual testing manual\ntesting is a very time consuming process\nand it is very boring also it is very\nhighly error prone why because it is\ndone manually and human mistakes are\nbound to happen since it's a manual\nexecutions testers presence is required\nall the time one is to keep doing manual\nsteps step by step again all the time he\nalso has to create manual reports group\nthem format them so that we get good\nlooking reports also send this reports\nmanually to all stakeholders then\ncollection of logs from various machines\nwhere you have run your test consoliding\nall of them creating repositories and\nmaintaining them and again since it's\nall as a manual process there is a high\nchance of creating manual errors there\nscope of manual testing is limited for\nexample\nlet's say regression testing ideally you\nwould want to run all the test cases\nwhich you have written but since it's a\nmanual process you would not have the\nluxury of time to execute all of them\nand hence you will pick and choose your\ntest cases to execute that way you are\nlimiting the scope of testing also\nworking with large amount of data\nmanually is impractical which could be\nthe need of your application what about\nperformance testing you want to collect\nmetrics on various performance measures\nas a part of your performance testing\nyou want to simulate multiple loads on\napplication under test and hence\nmanually performing these kind of tests\nis not feasible and to top it all up say\nif you are working in an agile model\nwhere code is being churned out by\ndevelopers testers are building their\ntest and they are executing them as and\nwhen the bills are available for testing\nand this happens iteratively and hence\nyou will need to run this test multiple\ntimes during your development cycle and\ndoing this manually definitely becomes\nvery tedious and burning and is this the\neffective way of doing it not at all so\nwhat do we do we automate it so this\ntells us why we automate one for faster\nexecution two to be less error prone and\nthree the main reason is to help\nfrequent execution of our test so there\nare many tools available in the market\ntoday for automation one such tool is\nselenium birth of selenium much before\nselenium there were various tools in the\nmarket like say rft and qtp just to name\na few popular ones selenium was\nintroduced by gentleman called jason\nhuggins way back in 2004. he was an\nengineer at thoughtworks and he was\nworking on a web application which\nneeded frequent testing he realized the\ninefficiency in manually testing this\nweb application repeatedly so what he\ndid was he wrote a javascript program\nthat automatically controlled the\nbrowser actions and he named it as\njavascript testrunner later he made this\nopen source and this was renamed as the\nselenium core and this is how selenium\ncame into existence and since then\nselenium has become one of the most\npowerful tool for testing web\napplications so how does selenium help\nso we saw all the demerits of manual\ntesting so we can say by automation of\ntest cases one selenium helps in speedy\nexecution of test cases since manual\nexecution is avoided the results are\nmore accurate no human errors since your\ntest cases are automated human resources\nrequired to execute automated test cases\nis far less than manual testing because\nof that there is a lesser investment in\nhuman resources it saves time and you\nknow time is money it's cost effective\nas selenium is an open source it is\navailable free of cost early time to\nmarket since you save effort and time on\nmanual execution your clients will be\nmerrier as you would be able to ship\nyour product pretty fast lastly since\nyour test cases are automated you can\nrerun them any point of time and as many\ntimes as required so if this tool offers\nso many benefits we definitely want to\nknow more detail about what selenium is\nselenium enables us to test web\napplications on all kind of browsers\nlike internet explorer chrome firefox\nsafari edge opera and even the headless\nbrowser selenium is an open source and\nit is platform independent the biggest\nreason why people are preferring this\ntool is because it is free of cost and\nthe qtp and the rft which we talked\nabout are chargeable selenium is a set\nof tools and libraries to facilitate the\nautomation of web application as i said\nit is not a single tool it has multiple\ncomponents which we'll be seeing in\ndetail in some time and all these tools\ntogether help us test the web\napplication you can run selenium scripts\non any platform it is platform\nindependent why because it is primarily\ndeveloped in javascript it's very common\nfor manual testers not to have in-depth\nprogramming knowledge so selenium has\nthis record and replay back tool called\nthe selenium id which can be used to\ncreate a set of actions as a script and\nyou can replay the script back however\nthis is mainly used for demo purposes\nonly because selenium is such a powerful\ntool that you should be able to take\nfull advantage of all its features\nselenium provides support for different\nprogramming languages like java python\nc-sharp ruby so you can write your test\nscripts in any language you like one\nneed not know in-depth or advanced\nknowledge of these languages also\nselenium supports different operating\nsystems it has supports for windows macs\nlinux even ubuntu as well so you can run\nyour selenium test on any platform of\nyour choice and hence selenium is the\nmost popular and widely used automation\ntools for automating your web\napplications selenium set of tools so\nlet's go a little more deeper into\nselenium as i said selenium is not a\nsingle tool it is a suite of tools so\nlet's look at some of the major\ncomponents or the tools in selenium and\nwhat they have to offer so selenium has\nfour major components one selenium id\nit's the most simplest tool in the suite\nof selenium it is integrated development\nenvironment earlier selenium ide was\navailable only as a firefox plugin and\nit offered a simple record and playback\nfunctionality it is a very simple to use\ntool but it's mainly used for\nprototyping and not used for creating\nautomation in the real-time projects\nbecause it has its own limitations like\nany other record and replay tool\nselenium rc this is nothing but selenium\nremote control it is used to write web\napplication test in different\nprogramming language what it does it it\nbasically interacts with the browser\nwith the help of something called as rc\nserver and how it interacts its uses a\nsimple http post get request for\ncommunication this was also called as\nselenium 1.0 version but it got\ndeprecated in selenium 2.0 version and\nwas completely removed in 3.0 and it was\nreplaced by webdriver and we will see in\ndetail as why this happened selenium\nwebdriver this is the most important\ncomponent in the selenium suite it is a\nprogramming interface to create and\nexecute text test cases it is obviously\nthe successor of the selenium rc which\nwe talked about because of certain\ndrawbacks which rc had so what webdriver\ndoes is it interacts with the browsers\ndirectly unlike rc where the rc required\na server to interact with the browser\nand the last component is the selenium\ngrid so selenium grid is used to run\nmultiple test scripts on multiple\nmachines at the same time so it helps\nyou in achieving parallel execution\nsince the selenium web driver with you\ncan only do sequential execution grid is\nwhat comes into picture where you can do\nyour parallel execution and why is\nparallel execution important because in\nreal time environment you always have\nthe need to run test cases in a\ndistributed environment and that is what\ngrid helps you to achieve so all this\ntogether helps us to create robust web\napplication test automation and we will\ngo in detail about each of these\ncomponents so before that let's look at\nthe history of selenium version so what\nis selenium version comprised of it had\nan ide rc and grid and as i said earlier\nthere were some disadvantages of using\nrc so rc was on its path of deprecation\nand web driver was taking its path so if\nyou look at selenium-2 version it had an\nearlier version of webdriver and also\nthe rc so they coexisted from 3. onwards\nrc was completely removed and webdriver\ntook its place there is also a 4 dot\nversion around the corner and it has\nmore features and enhancement some some\nof the features which are talked about\nare w3c webdriver standardization\nimproved ide and improved grid now let's\nlook at each of the components in the\nselenium suite selenium ide is the most\nsimplest tool in the suite of selenium\nit is nothing but an integrated\ndevelopment environment for creating\nyour automation scripts it has a record\nand playback functionality and is a very\nsimple and easy to use too it is\navailable as a firefox plugin and a\nchrome extension so you can use either\nof this browser to record your test\nscripts it's a very simple user\ninterface using which you can create\nyour scripts that interact with your\nbrowser the commands created in the\nscripts are called selenes commands and\nthey can be exported to the supported\nprogramming language and hence this code\ncan be reused however this is mainly\nused for prototyping and not used for\ncreating automation for your real-time\nprojects why because of its own\nlimitation which any other record and\nreplay tool has so a bit history of\nselenium id so earlier selenium id was\nonly a firefox extension so we saw that\nide was available since the selenium\nversion one selenium id died with the\nfirefox version 55 that was id was\nstopped supporting from 55 version\nonwards and this was around 2017 time\nframe however very recently all new\nbrand selenium id has been launched by\napply tools and also they have made it\nacross browser so you can install the\nextension on chrome as well as as an\nadd-on on firefox browser so they\ncompletely revamped this ide code and\nnow they have made it available on the\ngithub under the apache 2.0 license and\nfor the demos today we'll be looking at\nthe new id now with this new ide also\ncomes a good amount of features\nreusability of test cases better\ndebugger and most importantly it\nsupports parallel test case execution so\nthey have introduced a utility called\nselenium side runner that allows you to\nrun your test cases on any browser so\nyou can create your automation using\nidec on chrome or firefox but through\ncommand prompt using your site runner\nyou can execute this test cases on any\nbrowser thus by achieving your cross\nbrowser testing control flow statement\nso initially in the previous versions of\nidea there were control flow statements\navailable however one had to install a\nplugin to use them but now it is made\navailable out of box and what are these\ncontrol flow statements these are\nnothing but your if else conditions the\nwhile loops the switch cases so on it\nalso has an improved locator\nfunctionality that means it provides a\nfailover mechanism for locating elements\non your web page so let's look at how\nthis id looks and how do we install it\nand start working on that so for that\nlet me take you to my browser so say\nlet's go to the firefox browser so on\nthis browser i already have the id\ninstalled so when you already have an id\ninstalled you will see an icon here that\nsays selenium id and how do you install\nthis you simply need to go to your\nfirefox add-ons here where it says find\nmore extension so just type in\nselenium id and search for this\nextension so in the search results you\nsee the selenium id just click on that\nand now since i've already installed\nhere it says remove otherwise for you it\nis going to give you an add button here\njust click on the add button it will\ninstall this extension once it is\ninstalled you should be able to see this\nselenium ide icon here okay so now let's\ngo ahead and launch this id so when i\nclick on that it is going to show me a\nwelcome page where it's going to give me\nfew options the first option is it says\nrecord a new test case in a new project\nso straight away if you choose this\noption you can start recording a test\ncase in which case it's going to just\ncreate a default project for you which\nyou can save it later then open an\nexisting project so you can open if you\nalready have a saved project create a\nnew project and close so i already have\nan existing project with me for the demo\npurpose so i'll go ahead and open that\nso i'll say open existing project and i\nhave created a simple script what the\nscript does is it logs me into the\nfacebook using a dummy user mail your\nsorry username and password that's all\nit's very simple script with few lines\nand this is what it's going to do so\nwhat we will simply do is we'll just run\nthe script and see how it works for that\ni am just going to reduce the test\nexecution speed so that you should be\nable to see every step of execution here\nall right so what i'll do now here is\ni'll just adjust this window and i'll\njust simply say run current test all\nright so i'll just get this side by side\nso that you should be able to see what\nexactly the script is doing okay so now\nyou are able to see both the windows\nokay so now it's going to type in your\nuser email here there you go and now\nit'll enter the password and it has\nclicked on the login button so it's\ngoing to take a while to say login and\nsince these are the dummy ids it is you\nare not able to log in here and you are\ngoing to see this error window fine that\nis what is the expected output here now\non the id if you look here after i\nexecute the test case every statement or\nevery command which i have used here is\ncolored coded in green so that means\nthis particular step was executed\nsuccessfully and then here in the log\nwindow it will give you a complete log\nof this test case right from the first\nstep till the end and your end result is\nit says fb login which is my test case\nname completed successfully let's look\nat few components of this id the first\none is the menu bar so let's go to our\nid all right so the menu bar is right\nhere on the top so here is your project\nname so either you can add a new project\nhere or rename your project so since we\nalready have this project which is named\nas facebook and then on the right you\nhave options to create a new project\nopen an existing project or save the\ncurrent project and then comes on\ntoolbar so using the options in this\ntoolbar you can control the execution of\nyour test cases so first one here is the\nrecording button so this is what you use\nwhen you start recording your script and\nthen on the left you have two options\nhere to run your test cases the first\none is run all tests so in case you have\nmultiple test cases written here you can\nexecute them one by one sequentially by\nusing this run all test else what you\ncan do is if you just want to run your\ncurrent test this is what you would use\nthen id has this debugger option which\nyou can use to do a step execution so\nsay for example now whenever i run the\nscript it's going to execute each and\nevery command here sequentially so\ninstead if i just select the first\ncommand and say do step execution all\nright so what it does is the moment it\nfinishes the first command which is\nopening of facebook\nright i think which is already done here\nyeah all right so once this is done it\nis going to wait immediately on the\nsecond command and it says pause the\ndebugger so from here you can do\nwhatever you would like to do in case\nyou want to change the command here you\ncan do that you can pause your execution\nyou can resume your execution here right\nyou can even completely stop your test\nexecution or you can just select this to\nrun the rest of the test case so if we\nsay run the test case what it is going\nto do is it's just going to simply go\nahead and complete the com complete the\ntest case now there is another option\nhere which is you see the timer there\nwhich is test execution speed so to\nexecute your test cases in the speed you\nwant say whenever you are developing an\nautomation script right and say you want\nto give a demo so you need to control\nthe speed sometimes so that the viewer\nis able to exactly see all the steps\nwhich is being performed and this gives\nyou an option to control that complete\nexecution right so do you see the\ngrading here so we have somewhere from\nfast to completely slow execution so the\nprevious demo which i showed was i\ncontrol the speed and then i executed it\nso that we could see every command how\nit has been executed all right so what's\nthe next this is called as an address\nbar so whichever wherever whenever you\nenter an url here that is where you want\nto conduct your test and another thing\nwhat it does is it keeps a history of\nall the urls which have used for running\nyour test then here is where your script\nis recorded so each and every\ninstruction is displayed here in the\norder in which you have recorded the\nscript and then if you look here you\nhave something called as login reference\nso now log is an area where it records\neach and every step of your command as\nin when they get executed right so if\nyou see here it says open https\nfacebook.com and ok so that means this\ncommand was executed successfully and\nafter the complete test case is done it\ngives you whether the test case passed\nor failed so in case there is a failure\nyou will immediately see this test case\nis filled in red color also there is\nsomething called as reference here for\nexample say if i click on any of this\ncommand the reference tab what it is\ngoing to show me is the details of this\ncommand which i have used in the script\nit gives you the details of the command\nas well as what the arguments have been\nused or how how is that you need to be\nusing this particular command okay so\nnow what we'll do is let's go ahead and\nwrite a simple script using this id so\nwith this you'll get an idea how do we\nactually record scripts in id so for\nthat i have a use case here a very very\nsimple use case so what we will do is we\nwill open amazon amazon.in then we'll\nsearch simply search for say product\niphone and once we get that search page\nwhere all your iphones are displayed we\nwill just do an asset on the title of\nthe page simple all right so let's do\nthat so first thing what i need is an\nurl okay so first let me go to my\nfirefox browser here and say amazon.com\nso why i'm doing this just to simply get\nthe right url absolute url path here and\nso that i don't make any mistakes while\ntyping in the url okay so i got this so\nlet me close all this windows i don't\nneed any of this let's minimize this\nall right so here what i'll do in the\ntests tab i'll say add a new test and\nname this test as\namazon search\ndone i'll say add now i'll enter this\nurl which i just copied it from my\nbrowser okay and then i'll just say\nstart recording so what it\ndid was since i've entered the url in\nthis address box it just opened the\ndot in url now let's do the test case so\nin my test case what i said was i want\nto search for iphone once i have this\ni'm just going to click on my search\nbutton so now this gives me a list of\nall iphones and then i said i want to\nadd an assertion on the title of this\npage so for me to do that what id gives\nme an option is i have to just right\nclick anywhere on this page and you'll\nsee the selenium id options here so in\nthis i will select assert title and then\ni will close this browser so that kind\nof completes my test case so now take a\nlook at all the steps which is created\nfor me so it says open slash because i\nhave already provided the url here so\neither you can replace it with your\nregular url or you can just leave it as\nit is so what i will do since this is\ngoing to be a proper script and i might\nbe using this to run it from my command\nprompt also so i'll just replace this\ntarget with the actual url and then what\nit is doing it is setting a window size\nthen there are whatever i did on that\nparticular url on that website it has\nrecorded all the steps for me so this is\nwhere it says type into this particular\ntext box which is my search box and what\ndid it type iphone this was the value\nwhich i entered now there was one more\nfeature which i told you in this new id\nwhich had which i said it has a failover\nmechanism for your locating techniques\nnow that is what this is now if you look\nhere this id is equal to tab search\ntextbook this is nothing but that search\nbox where we entered the text iphone and\nit has certain identification through\nwhich this ide identifies that web\nelement and that has multiple options to\nselect that particular search box so\nright now what it has used is id is\nequal to two tab search box however if\nyou know the different locating\ntechniques you will be able to see here\nthat it has other techniques also which\nit has identified like the name and the\ncss and the xpath so how does this help\nin failovers say tomorrow if amazon.in\nwebsite changes the id of this element\nright you are not going to come and\nrewrite the scripts again instead by\nusing the same script what it will do is\nif this particular id fails if it is\nunable to find the element using the\nfirst locator which is the id it simply\nmoves to the next available ones and it\ntries to search for that element until\none of this becomes true that is what\nwas the failure mechanism which has got\nadded it's a very brilliant feature\nbecause most of our test cases break\nbecause of element location techniques\nwell let's come back to this so then we\nadded an assert title right so what is\nus our title here it simply captures the\ntitle of that particular page and it\nchecks this is all a very simple test\ncase so what we will do now is we will\nstop the recording and then i have also\ngiven a close browser so right now what\ni'll do is i'll just comment this out\nwhy because if i just run this test case\nit's going to be very fast and you might\nnot be able to catch the exact command\nexecution what has happened all right so\nright now i'll just disable it so that\nit will just do all these test cases and\nit just stays there without closing the\nbrowser so now i'll just say run the\ncurrent test date so your amazon end is\nlaunched okay it is typed in the iphone\nit's also clicked on the search so it is\ndone so now if you look here since we\nare in the reference tab it is not able\nto show so let's go to the log and now\nlet's see the log so it's going to be a\nrunning log so if you notice here the\nprevious examples which we have run for\nfacebook is also in the same lock so we\nwill have to see the log from running\namazon search because that's our test\ncase so if you see here every command\nline right was executed successfully\nassert title was also done and your test\ncase was executed successfully so it\npassed now what we will do is on this\nassert title i'll just modify this\nand let's say just add some text i'll\njust add double s here now this by\nintentionally i'm going to fail this\ntest case just to show you that whenever\nthere is a test case failure how does\nthe id behaves and how do you get to\nknow the failures all right so i'll just\nrun the disk test case again so before\nthat let's close the previous\nwindow all right done and now\nhere i'll also uncomment the close\nbecause anyway it's a failure which i'm\ngoing to see which i should be able to\nsee it in the logs so i'll close the\nbrowser after the execution of test case\nokay so let's simply go and run the test\ncase okay amazon.com is launched it\nshould search for iphone now yeah there\nyou go all right\nnow it should also close the browser yes\nit has closed the browser and it has\nfailed now see here now this is the line\nwhere our command filled why because the\nexpected title was not there and if you\nlook in the logs it says your assert\ntitle on amazon.in failed actual result\nwas something different and it did not\nmatch with what we had asked it for so\nthis is how simple it is to use your id\nto create your automation scripts\nso we saw all the components of id we\nsaw the record button then i showed you\nthe toolbar i showed you the editor box\nand also the test execution lock so now\nlet's come to what are the limitations\nof this id with ide you cannot export\nyour scripts your test scripts to web\ndriver scripts this support is not yet\nadded but it is in the works data driven\ntesting like using your excel files or\nreading data from the csv files and\npassing it to the script this capability\nis still not available also you cannot\nconnect to database for reading your\ntest data or perform any kind of\ndatabase testing with selenium webdriver\nyes you can also unlike selenium\nwebdriver you do not have a good\nreporting mechanism with the ide like\nsay for example test ng or repotengi so\nthat brings us to the next component of\nthe suite which is selenium rc selenium\nremote control so selenium rc was\ndeveloped by paul hammond he refactored\nthe code which was developed by jason\nand was credited with json as a\nco-creator of selenium selenium server\nis written in java it is used to write\nweb application test in different\nprogramming languages as it supports\nmultiple programming languages like your\njava c perl python and ruby it interacts\nwith a browser with the help of an rc\nserver so this rfsave server uses a\nsimple http get and post request for\ncommunication and as i said earlier also\nselenium rc was called as selenium 1.0\nversion but it got deplicated in\nselenium 2.0 and was completely removed\nin 3.0 and it got replaced by what\nwebdriver and we'll see why this\nhappened and what was that issue which\nwe had with the rc server so this is the\narchitecture of selenium remote control\nat a very high level so when jason\nhuggins introduced selenium you know the\ntool was called as javascript program\nand then that was also called as a\nselenium core so every html has a\njavascript statements which are executed\nby web browser and there is a javascript\nengine which helps in executing this\ncommand now this rca had one major issue\nnow what was that issue say for example\nyou have a test script say\ntest.javascript here which you are\ntrying to access elements from anywhere\nfrom the google.com domain so what used\nto happen is every element which is\naccessible e are the elements which can\nbelong only to google.com domain like\nsay for example mail the search or the\ndrive so any elements from this can be\naccessible through your test scripts\nhowever nothing outside the domain of\nsay google.com in this case was\naccessible say for example if your test\nscripts wanted to access something from\nyahoo.com this was not possible and this\nis due to the security reasons obviously\nnow to overcome that the testers what\nthey had to do was they had to install\nthe selenium core and the web server\nwhich contained your web application\nwhich is under test on the same machine\nand imagine if you have to do this for\nevery machine which is under test this\nis not going to be feasible or even\neffective all the time and this issue is\ncalled as a same origin policy now what\nthe same origin policy issue says is it\nprohibits a javascript from accessing\nelements or interacting with scripts\nfrom a domain different from where it is\nlaunched and this is purely for the\nsecurity measure so if you have written\na scripts which can access your\ngoogle.com or anything related to\ngoogle.com these scripts cannot access\nany elements outside the domain like as\nwe said in the example yahoo.com this\nwas the same origin policy now to\novercome this what this gentleman did\nwas he created something called as\nselenium remote control server to trick\nthe browser in believing that your core\nyour selenium core and your web\napplication under test are from the same\ndomain and this is what was the selenium\nremote control so if you look at again a\nhigh level architecture or how did this\nactually work first you write your test\nscripts which is here right in any of\nthe supported language like your php or\nyour java or python and before we start\ntesting we need to launch this rc server\nwhich is a separate application so this\nselenium server is responsible for\nreceiving the cellini's commands and\nthese selenius commands are the ones\nwhich you have written in your script it\ninterprets them and reports the result\nback to your test so all that is done to\nyour rc server the browser interaction\nwhich happens through rc server right\nfrom here to your browser so this\nhappens through a simple http\npost and get request and that is how\nyour rc server and your browser\ncommunicate and how exactly this\ncommunication happens this rc server it\nacts like a proxy so say your test\nscripts ask to launch a browser so what\nhappens is this commands goes to your\nserver and then your rc server launches\nthe browser it injects the javascript\ninto the browser once this is done all\nthe subsequent calls from your test\nscript right from your test scripts to\nyour browser goes through your rc and\nnow upon upon receiving these\ninstruction your selenium core executes\nthis actual commands as javascript\ncommands on the browser and then the\ntest results are displayed back from\nyour browser to your rc to your test\nscripts so the same cycle gets repeated\nright until the complete test case\nexecution is over so for every command\nwhat you write in your javascript here\nor your test script here goes through a\ncomplete cycle of going through the rc\nserver to the browser collecting the\nresults again from the rc server back to\nyour test scripts so this cycle gets\nrepeated for every command until your\ncomplete test execution is done so rc\nhad definitely lot of shortcomings and\nwhat are those so rc server needs to be\ninstalled before running any test\nscripts which we just saw so that was an\nadditional setup since it acts as a\nmediator between your commands which is\nyour salinist commas and your browser\nthe architecture of rc is complicated\nwhy because of its intermediate rc\nserver which is required to communicate\nwith the browser the execution of\ncommands takes very long it is lower we\nknow why because every command in this\ntakes a full trip from the test script\nto your rc server to the core engine to\nthe browser and then back to the same\nroute which makes your overall test\nexecution very slow lastly the apis\nsupported by rc are very redundant and\nconfusing so rc does have a good number\nof aps however it is less object\noriented so they are redundant and\nconfusing say for example say if you\nwant to write into a text box how and\nwhen to use a type key command or just a\ntype command is always confusing another\nexample is some of the mouse commands\nusing a click or a mouse dot both kind\nof you know almost providing a similar\nfunctionality so that is a kind of\nconfusion which developers used to\ncreate\nhence\nselenium rc got deprecated and is no\nmore available in latest selenium\nversions it is obsolete now now to\novercome this shortfalls webdriver was\nintroduced so while rc was introduced in\n2004 web driver was introduced by simon\nstevert in 2006. it's a cross-platform\ntesting platform so webdriver can run on\nany platform like say linux windows mac\nor even if you have a ubuntu machine you\ncan run your selenium scripts on this\nmachine it is a programming interface to\nrun test cases it is not an ide and how\ndoes this work actually so test cases\nare created and executed using web\nelements or objects using the object\nlocator and the web driver method so\nwhen i do a demo you will understand\nwhat this web driver methods are and how\ndo we locate the web elements on the web\npage it does not require a core engine\nlike rc so it is pretty fast why because\nwebdriver interacts directly with the\nbrowser and it does not have that\nintermediate server like the rc hat so\neach browser in this case what happens\nis each browser has its own driver on\nwhich the application runs\nand this driver is responsible to make\nthe browser understand the commands\nwhich you will be passing from the\nscript like say for example click of a\nbutton or you want to enter some text so\nthrough your script you tell which\nbrowser you want to work with say chrome\nand then the chrome driver is\nresponsible for interpreting your\ninstructions and to execute it on the\nweb application launched on the chrome\nbrowser so like rc webdriver also\nsupports multiple programming languages\nin which you can write your test scripts\nso another advantage of web driver is it\nsupports various frameworks like test ng\njunit n unit and report nj\nso when we talk about the limitations of\nwebdriver you will appreciate how this\nsupport for various frameworks and tool\nhelp in making the selenium a complete\nautomation solution for web application\nso let's look at the architecture of\nwebdriver at a high level what is in web\ndrivers a web driver consists of four\nmajor components\nthe first one is we have got client\nlibraries right or what we also call it\nas language bindings so since selenium\nsupports multiple language and you are\nfree to use any of the supported\nlanguages to create your automation\nscript these libraries are made\navailable on your selenium website which\nyou need to download and then write your\nscripts accordingly so let's go and see\nfrom where do we download this so if i\ngo to my browser\nso\nseleniumhq.org right so if you're\nworking with selenium this website is\nyour bible so anything and everything\nyou need to know about selenium right\nyou need to come here and use all these\ntabs here in this website so right now\nwhat we are going to look at is what are\nthose language binding so for that i'll\nhave to go to this download tab here\nokay and if you scroll down here you\nwill see something like selenium client\nand web driver language bindings and for\neach of the supported language of\nselenium you have a download link\nright so say for example if you're\nworking with java here what you need to\ndo is you need to download your java\nlanguage binding so let's go back to the\npresentation so this is where your\nlanguage bindings are available next so\nselenium provides lots of aps for us to\ninteract with the browser\nand when we do the demo i'll be showing\nyou some of this aps right and these are\nnothing but the rest apis\nand everything whatever we do through\nthe script happens through the rest\ncalls then we have a json wire protocol\nwhat is json javascript object notation\nit is nothing but a standard for\nexchanging data over the web so for\nexample you want to say launch a web\napplication through your script\nso what selenium does it it creates a\njson payload and posts the request to\nthe browser driver\nthat is here and then we have this\nbrowser drivers themselves and as i said\nthere is a specific driver for each\nbrowser\nas you know every tool has its own\nlimitation\nso does selenium\nso let's look at what these limitations\nare and if there are any workarounds for\nthem\ncannot test mobile applications requires\nframework like apm\nselenium is for automating web\napplication it cannot handle mobile\napplications mobile applications are\nlittle different and they need its own\nset of automation tool\nhowever what selenium provides is a\nsupport for integrating this apm tool\nwhich is nothing but a mobile\napplication automation tool\nand using apm and selenium you can still\nachieve mobile application automation\nand when do you usually need this when\nyour application under test is also\nsupported on mobile devices you would\nwant a mechanism to run the same test\ncases on web browser as well as your\nmobile process right so this is how you\nachieve it the next limitation so when\nwe talked about the components of\nselenium i said that with webdriver we\ncan achieve only sequential execution\nhowever in real time scenario we cannot\njust live with this we need to have a\nmechanism to run our test cases\nparallelly on multiple machines as well\nas on multiple browsers so though this\nis a limitation of webdriver but what\nselenium offers is something called as\ngrid which helps us achieve this and we\nwill see in shortly what the selenium\ngrid is all about also if you want to\nknow more details as how do we work with\nthe grid how do you want to install that\ngrid so do check out our video\non simply learn website on selenium grid\nthird limitations so limited reporting\ncapability so selenium webdriver has a\nlimited reporting capability it can\ncreate basic reports but what we\ndefinitely need is a more\nso it does support some tools like say\ntest ng report ng and even extent\nreports which you can integrate with\nselenium and generate beautiful reports\npowerful isn't it\nalso there are other challenges\nwith selenium like selenium is not very\ngood with image testing\nespecially for the ones which are\ndesigned for web application automation\nbut then we have other tools which can\nbe used along with selenium like auto it\nand seculi so if you look at all this\nselenium still provides a complete\nsolution for your automation needs and\nthat's the beauty of selenium and that\nis why it makes the most popular tool of\ntoday for automation\nokay let's do a quick comparison between\nthe selenium rc and the web driver\nso rc has a very complex architecture\nyou know why because of the additional\nrc server whereas due to direct\ninteraction with the browser webdriver\narchitecture is pretty simple\nexecution speed\nit is lower in rc and much faster than\nwebdriver why because in web driver we\nhave eliminated the complete layer of\nselenium server\nright that the rc server and we\nestablished a direct communication with\nthe browser through browser drivers\nit requires an rc server to interact\nwith the browsers we just talked about\nit and whereas webdriver can directly\ninteract with the browser\nso rc again we talked about this as one\nof the limitations that we have lot of\nredundant abs which kept developers\nguessing as which api to use for what\nfunctionality\nhowever webdriver offers pretty clean\napis to work with\nrc did not offer any support for\nheadless browser whereas in web driver\nyou do have a support for using headless\nbrowsers\nlet's see the web driver in action now\nnow for the demo we will use this\nparticular use case and what this use\ncase says is navigate to the official\nsimply learn website\nthen type the selenium in search bar and\nclick on it and click on the selenium\n3.0 training so we are basically\nsearching for selenium 3.0 training on\nthe simply learn website first let's do\nthe steps manually and then we will go\nahead and write the automation script so\nlet's go to my browser on my browser\nwhat i'll do is i'll let me first launch\nthe simply learn website\nokay and here what my use case step says\nis i need to search for\nselenium and click on the search button\nso once i do that it is going to give me\na complete list of all kind of selenium\ntrainings which is available with\nsimpler and what i'm interested in is\nthe selenium 3.0 training here once i\nfind this on the web page i need to go\nand click on that all right so this is\nall the steps which we are going to\nperform in this use case okay now so for\nwriting the test cases i'll be using an\nid which is eclipse i've already\ninstalled my eclipse and also i have\ninstalled selenium in this instance of\nmy eclipse all right so if you can see\nthe reference library folder here you\nwill see all the jars which are required\nfor the selenium to work next another\nprereq which is required for selenium\nand that is your driver files now every\nbrowser which you want to work with has\nits own driver file to execute your\nselenium scripts and since for this demo\ni'll be working with the firefox browser\ni will need a driver file for firefox\nnow driver file for firefox is the\ngeckodriver which i've already\ndownloaded and placed in my folder\ncalled drivers\nnow where did i download this from let's\ngo ahead and see that so if i go back to\nmy browser and if you go to your\nselenium hq dot website you have to go\nto this download tab here in the\ndownload tab when you scroll down you\nwill see something like third-party\ndrivers bindings and plugins in this you\nwill see the list of all the browsers\nwhich is supported by selenium and\nagainst each of this browser you will\nfind a link which has the driver files\nnow since we'll be using the gecko\ndriver\nthis is the link where you need to go to\nand depending on which operating system\nwhich you're working on you need to\ndownload that particular file now since\ni am working on mac this is the file\nwhich i am using if you are a windows\nuser you need to download this zip file\nand unzip it so once you unzip that you\nwould\nget a file called gecko driver for your\nfirefox or a chrome driver for your\nchrome browser and then what you do is\nyou just create a directory called\ndrivers under your project\nand just place the driver files here so\nthese are the two prereqs for your\nselenium one is importing your jar files\nlike this and then having your drivers\ndownloaded and keep them under a folder\nwhere you can reference to okay so now\nwe'll go ahead and create a class\ni already have a package created in this\nproject so i'll use this project and\ncreate a new class\nso i'll say create new java class and\nlet's call this as\nsearch training i'll be using a public\nstatic void main and i'll click on\nfinish\nso let's remove this auto generated\nlines as we do not need them all right\nnow the first statement which you need\nto write before even you start writing\nthe rest of your quotas what you need to\ndo is you need to define or declare your\ndriver variable using your class web\ndriver so what i would do is i'll say\nweb driver\ndriver\ndone all right\nnow you will see that this id is going\nto flash some errors for you that means\nit is going to ask you to import certain\nlibraries which is required by the web\ndriver so simply just go ahead and say\nimport webdriver from\norg.opensq dot selenium this is the\npackage which we will need all right so\nyou have a driver created which is of\nthe class web driver and now after this\ni'm going to create three methods all\nright so first method i will have for\nlaunching the firefox browser okay and\nthen i will write a simple method for\nsearching\nselenium training\nand clicking on it\nthis is the actual use case what we'll\nbe doing and then third method i'm going\nto write is just to close the browser\nwhich i'm going to be opening right so\nthese are the different methods which\ni'll be creating and from the public\nstatic void main i will just call these\nmethods one after the other okay so\nlet's go ahead and write the first\nmethod now my first method is launching\nthe firefox browser so i'll say public\nvoid since my return type is null or\nthere is no return type for this let's\ncall it as launch browser\nokay all right now in this for launching\nany browser i need to mention two steps\nnow the first step is where i need to do\na system.set property okay let's do that\nfirst and then i'll explain what this\ndoes i'll just say system dot set\nproperty so this accepts a key and a\nvalue pair so what is my key here my key\nhere is web driver dot\ngecko dot driver and i need to provide a\nvalue so value is nothing but the path\nto the gecko driver and we know that\nthis gecko driver which i'm going to use\nhere is right here in the same project\npath under the drivers folder correct\nand that is what the path which i am\ngoing to provide here so here simply i\nneed to say\ndrivers slash\ngecko driver\ng e c k o all right done and let me\nclose this sentence all right now since\ni'm a mac user my gecko driver\ninstallable is just the name gecko\ndriver if you're a windows user and if\nyou are running your selenium scripts on\nthe windows machine you need to provide\na complete path to this including dot\nexe because driver executable on your\nmachines is going to be geckodriver.exe\nalright so just make sure that your path\nwhich you mentioned here in the\nsystem.set property is the correct path\nokay then the next thing what we need to\ndo is i need to just say driver is equal\nto new\nfirefox driver okay so this command new\nfirefox driver creates an instance of\nthe firefox browser now this is also\nflagging me error why because again it's\ngoing to ask me to import the packages\nwhere the firefox driver classes present\nokay we did that now these two lines are\nresponsible for launching the firefox\nbrowser firm so this is done so what's\nmy next step in the use case now i need\nto launch the website simply learn so\nfor that we have a command called\ndriver.get\ndriver.get what it does is whatever url\nyou're going to give it here in this\ndouble quotes as an argument it is going\nto launch that particular website and\nfor us it's a simply learn website so\nwhat i do as a best practices instead of\ntyping out the url i go to my browser\nlaunch that url which i want to test and\ni simply copy it come back to your\neclipse and just simply paste it so this\nensures that i do not make any mistakes\nin the url okay so done so our first\nmethod is ready where we are launching\nthe browser which is our firefox browser\nand then launching the simplylearn\nwebsite now the next method what is my\nnext method in my next method i need to\ngive the search string to search\nselenium training on this particular\nwebsite now for that we need to do few\nthings what are those few things let's\ngo to the website again all right so let\nme relaunch this let's close this okay\nlet me remove all this and let's go to\nthe home page first okay this is my home\npage so as you saw when i did a manual\ntesting of this i entered the text here\nso now since i have to write a script\nfor this first i need to identify what\nthis element is for that what i'm going\nto do is i'm just going to say right\nclick here and i'll say inspect element\nall right now this element let's see\nwhat attribute it has which i can use\nfor finding this element so i i see that\nthere is an id present so what i'm going\nto do is i'm just going to simply use\nthis id\nand then i'll just copy this id from\nhere go back to eclipse let's write a\nmethod first so i'll say public void\nand what do we give the method name say\nsearch training\nor just search all right now in this i\nneed to use a command called driver dot\nfind element\nby id is what i'm going to use as a\nlocating technique and in double quotes\nthe id which i copied from the website\nis what i'm going to paste here okay and\nthen what am i going to do on this\nelement is i need to send that text the\ntext which i'm going to search for which\nis selenium so i'll just say send keys\nand whatever text i want to send i need\nto give it in double quotes so for that\nselenium so this is done so now i've\nentered the text here and after entering\nthe text i need to click on this button\nso for that i need to first know what\nthat button is so let's inspect that\nsearch button okay now if you look at\nthe search button other than the tag\nwhich is span and the class name i do\nnot have anything here all right so what\ni can do is i can either use the class\nname or i can write an x path since this\nis a demo which we have already used id\nlocating technique i would go ahead and\nuse the x path here so for me to\nconstruct an x path uh i will copy this\nclass first okay\nand then i already have a crow path\ninstalled on my firefox so i'll use the\ncrow path and first test my x bar so\ni'll just say double slash let's see\nwhat was that element it has a span tag\nokay so i'll have to use span and at\nclass equal to and i'll just copy the\nclass name here and let's see if it can\nidentify that element yeah so it is able\nto identify so i'll just use this x path\nin my code so i'll go back to eclipse\nand i'll say driver dot find element by\ndot x path and the x path which i just\ncopied from crow path is what i'm going\nto paste here and what is the action i\nneed to do here i need to say click\ndone so i have reached a stage where i\nhave entered this selenium okay and then\ni have clicked on the search button once\ni do this i know that expected result is\ni should be able to find this particular\nlink here selenium 3.0 training okay and\ni should be able to click on that so for\nthat again i need to inspect this so\nlet's inspect this selenium 3.2 all\nright so now what are the elements this\nhas now this particular element has\nattributes like it has a tag h2 then it\nhas got some class name and some other\nattributes so i would again would like\nto use a xpath here now this time while\nusing the x path i am going to make use\nof a text functionality so that i can\nsearch for this particular text so i'll\nsimply copy this i'll go to my crow path\nthe tag is h2 so i'll say simply h2\nokay and here i'll say text equal to and\nthis is the text which i copied i missed\nout that yes there so i'm just going to\nadd an s okay so let's first test here\nwhether it is able to identify that\nelement yeah so it is able to identify\nso can you see a blue dotted line it is\nable to show us which element it is\nidentified so i'll copy this x path now\nand let's go to my ide eclipse so now\nhere what i need to do is i'll have to\nagain simply say driver dot find element\nby dot x path\nand paste the x path which we just did\nand then again i have to do a click\noperation done all right so technically\nwe have taken all the steps of the use\ncase and we have written the commands\nfor that\nnow let's add an additional thing here\nsay after coming to this page after\nfinding this we want to uh say print the\ntitle of this page now what is the title\nof this page if you just hover your\nmouse on this it says online and\nclassroom training for professional\ncertification courses simply now so what\ni will do is after doing all these\noperations i will just print out this\npage title on our console so for that i\nhave to just do this driver dot uh so\nlet's do a sysop so i'll say sis out\nsystem dot out dot println okay and here\ni would say\nlet's add a text here the page title is\nand then let's append it with\ndriver dot\nget title so this is the command which\nwill be using to fetch the page title\ndone now what is the last method i need\nto add just to close the browser all\nright so let me add a method here i'll\nsay public void close browser\nand this is one single command which i\nneed to call i'll say driver dot quit\nokay and then i need to call all these\nmethods from my public static void main\nso i let me use my class name which is\nthis so i'm going to create an object\nobj is equal to\nnew class name and then using this\nobject first is i need to call the\nmethod launch browser and then i'll call\nthe method search\nright and then i'll call the method\nclose process done so technically our\nscript is ready with all the\nfunctionality which we wanted to cover\nfrom our use case now there are few\nother tweaks which i need to do this and\ni'll tell you why i need to do this now\nfor example after we click here right\nafter we click on the search if you\nobserved on your website it took a\nlittle while before it listed out all\nthe selenium trainings for us and\nvisually when you're actually doing it\nyou wait for the selenium 3.0 training\nto be available and then you click on\nthat now same thing you also need to\ntell your scripts to do that you need to\ntell your scripts to wait for a while\nuntil you start seeing the selenium 3.0\ntraining or it appears on your web page\nthere are multiple ways to do that in\nyour script and it is a part of overall\nsynchronization what we call where we\nuse kind of implicit and explicit kind\nof favorites now since this is a demo\nfor demo purpose what i am going to do\nis i am going to use a command called\nthread.sleep and i'm just going to give\nan explicit weight of say three seconds\nso you can use this mainly for the demo\npurposes you can use a thread.sleep\ncommand now this thread.sleep command\nneeds us to handle some exceptions so\ni'm just going to click on add throws\ndeclaration and say interrupted\nexception now same thing i'll have to do\nit in my main function also okay so\nlet's do that and complete it\nall right so this is done so by doing\nthis what am i doing i'm ensuring that\nbefore i click on the selenium three dot\ntraining we are giving enough time for\nthe script to wait until the webpage\nshows this link to the selenium 3.0\ntraining that's one thing i'm doing all\nright and also now since you're going to\nbe seeing this demo through the video\nrecording the script when it starts\nrunning it is going to be very fast so\nyou might just miss out saying how it\ndoes the send keys and how did it click\non the search button for us to enable us\nto see it properly i'll just add some\nexplicit weights here just for a demo\npurpose so after entering the keys right\nso what i'll do is i'll just give a\nsimple thread dot sleep here\nokay so probably a three seconds or two\nseconds wait should be good enough okay\nthree seconds wait should be good enough\nhere so that we should be able to see\nhow exactly this works on your browser\nwhen we execute this\nokay now our complete script is ready so\nwhat i'll do is i'll just save the\nscript and then we will simply run the\nscript so to run the script i just say\nright click run as java application okay\nit says ask me to select and save i have\nsaved the script now so let's observe\nhow it runs okay the\nsimplylearn.com the website is launched\nso the selenium text has been entered in\nthe search box it has clicked on the\nsearch okay all right so now it did\neverything whatever we wanted it to do\nall right so since we are closing the\nbrowser you are unable to see whether\nthe selenium three dot training was\nselected or not however what i have\ngiven here is to fetch the title after\nall these operations were complete and\nif you see here the complete operations\nwas done and we were able to see the\npage title here okay so now what i'll do\nsince we are unable to see whether it\nclicked on the selenium 3.0 training or\nnot i'll just comment our the close\nbrowser the command okay so we will not\ncall the close browser so that the\nbrowser remains open and we get to see\nwhether did it really find the training\nlink or not okay so let me close this\nwindow we don't need this firefox window\nclose all tabs and then i'll just\nexactly execute the script so i'll say\nrun as java application so save the file\nokay simplylearn.com is launched so\nsearch text is entered now it's going to\nclick on the search button yes all right\nso we've got the search results it\nshould click on selenium theodore\ntraining and yes it is successfully able\nto click on that all right so now it's\nnot going to close the browser because\nwe have commented on that line however\nit did print us the title\nhere all right so this is a simple way\nof using the selenium scripts\nselenium grid so grid is used to run\nmultiple test scripts on multiple\nmachines at the same time with webdriver\nyou can only do sequential execution but\nin real time environment you always have\nthe need to run test cases in\ndistributed environment and that is\nwhere selenium grid comes into picture\nso grid was conceptualized and developed\nby patrick the main objective is to\nminimize test execution type and how by\nrunning your test parallelly so design\nis in such a way that commands are\ndistributed on multiple machines where\nyou want to run test and all these are\nexecuted simultaneously what do you\nachieve by this methodology of course\nthe parallel execution on different\nbrowsers and operating system grid is\npretty flexible and can integrate with\nmany tools like say you want a reporting\ntool integrated to pull all the reports\nfrom the multiple machines where you're\nrunning your test cases and you want to\npresent that report in a good looking\nformat so you have an option to\nintegrate such report okay so how does\nthis grid work so grid has a hub and\nnode concept which helps in achieving\nthe parallel execution let's take an\nexample say your application supports\nall browsers and most of the operating\nsystems like as in this picture you\ncould say one of them is a windows\nmachine one of them is a mac machine and\nanother one is say a linux machine so\nyour requirement is to run the test on\nall supported browsers and operating\nsystem like the one which is depicted in\nthis picture so what you have to do is\nfirst thing is you configure a master\nmachine or what you also call it as a\nhub by running something called a\nselenium standalone server and this\ntalent standalone server can be\ndownloaded from the selenium hq website\nusing the server you create a hub\nconfiguration that is this node and then\nyou create nodes specific to your\nmachine requirement and how are these\nnodes created you again use the same\nserver which is your standalone selenium\nserver to create the node configuration\nso i'll show you where the selenium\nserver can be downloaded so if we go\nback to our\nselenium hq website so you can see here\nright on the top which says selenium\nstandalone server welcome everyone to\nour one another demo on which we are\ngoing to see that how exactly we can do\nthe installation of docker on the\nwindows platform specifically on windows\n10. now docker is something which is\navailable for most of the operating\nsystems different different platforms so\nit supports both the unix and the\nwindows platform as such so um linux\nthrough various commands we can do the\ninstallation but in the case of windows\nyou have to download the exe file and a\nparticular installer from the docker hub\nwebsites you can simply google it and\nyou will get a kind of a link from where\nyou will be able to download the package\nso let's go to the chrome and try to\nsearch on for the windows string\nparticular installer you will get a link\nfrom docker hub you download it you get\nthe stable version you get the edge\nversion whichever version you want you\nwish to download you can download it so\nlet's go back to the chrome so here you\nhave the docker next off for windows so\nyou can go for this table or you can go\nfor the edge right so you also have the\ncomparison that what is the difference\nbetween these two versions right\nso um the particular edge version is\nsomething which is getting releases\nevery month and uh the\nstable version is getting the releases\nevery quarter so they are not doing much\nof the changes to the stable version as\ncompared to the edge there so you just\nhave to double click on the installer\nand that will help you to do the\ninstallation of the process so let's get\nstarted so you just click on the get\ninstable version so when you do that the\nparticular installer is going to install\nnow it's going to take like around 300\nmb there so that's the kind of installed\nwhich is available so once the installer\nis downloaded so what you can do is that\nyou can actually go ahead and you can uh\nproceed with the doing the double click\non this installer when you double click\non that you have to proceed with some of\nthe steps like you know from the gui\nitself you are going to proceed with\nthese steps so we'll wait for 10 to 20\nseconds more and then the installer will\nbe done and then we can do the double\nclick and the installation will proceed\nso another thing is that uh there is a\nhuge difference between the installer\nlike for example in case of unix the\ninstaller is a little bit less but in\ncase of windows it's a gui is also\ninvolved and there are a lot of binaries\nwhich is available there so that's the\nreason why you know the huge size is\nthere now it's available for free that's\nfor sure and it also requires the\nwindows 10 professional or enterprise\n64-bit there so um if you are working on\nsome previous version of operating\nsystems like windows 7 and all you have\nthe older version called docker toolbox\nso they used to call it as like docker\ntoolbox earlier but now they are calling\nit as a docker desktop with the new\ndocker windows 10 support as such here\nso another couple of seconds and then\nthe installer will be done and then we\nwill be able to proceed with the\ninstallation\nso let's see that how much progress is\nthere to the download so we'll click on\nthe downloads and here still we have\nsome particular installations or some\ndownload going on so we'll wait for some\ntime and uh once the installation is\ndone then we'll go back and we'll\nproceed with installation\nso\ncouple of seconds\nso it's almost done so i'll just click\non this one you can go to the directory\nto the downloads and you can double\nclick on that also but if you want to do\nthe installation you can click on this\none also and it will ask for the\napproval yes or no you have to provide\nnow once that is done so um a desktop a\nkind of a gui component will open there\nso it will start proceeding with\ninstallation so it's asking whether you\nwant to add the desktop the shortcut to\ndesktop so you can say okay i'm going to\nclick on ok so it will unpack the files\nall the files which is required for\ndocker to successfully install that is\ngetting unpacked over here so it will\ntake some time to do the installation\nbecause it's doing a lot of work here so\nyou can just wait for till the execution\nof the installer to be completed and\nonce the installer is done you can open\nyour command line and start working on\nthe docker\nso taking some time to extract the files\nnow it's asking us to you know do the\nclose and do the restart so once that is\ndone you will be able to proceed further\nand you can just you know run the\ncommand line and any docker command if\nyou can run so that will give you the\nresponse whether the docker is installed\nor not so you can see here that docker\nis you know something which is installed\nso you can run like docker version you\nwill be able to get a version of the\nclient when you do the restart of the\nmachine then at that moment of time the\ndocker server will also be started and\nthen this particular error message will\ngo off right now the docker daemon is\nnot up and running because the\ninstallation requires a restart and when\nyou close on this one and go for the\nrestart the machine will be restarted\nhere so this is the way that how exactly\nwe can go for a docker installation and\nwe can go on that part so now let's\nbegin with the demo we'll be installing\ndocker on an ubuntu system so this is my\nsystem i'll just open the terminal so\nthe first thing you can start with is\nremoving any docker installation that\nyou probably already have present in\nyour system if you want to start from\nscratch so this is the command to do so\nsudo apt get remove\ndocker\ndocker engine docker dot io enter your\npassword\nand docker is removed so now we'll start\nfrom scratch and we'll install docker\nonce again\nbefore that i'll just clear my screen\nokay so before i install docker let me\njust ensure that all these softwares on\nmy system currently is in its latest\ndate\nso sudo apt get update\ngreat so that's done next thing we'll\nactually install our docker\nso type in sudo apt\nget\ninstall\ndocker\nnow as you can see here there's an error\nthat's occurred so sometimes it's\npossible that due to the environment of\nthe machine that you're working in this\nparticular command does not work\nin which case there's always another\ncommand that you can start with\njust type docker install\nand that by itself will give you the\ncommand you can use to install docker\nso as it says here sudo apt install\ndocker dot io is a command that we will\nneed to execute to install docker\nand after that we will execute the sudo\nsnap install docker so sudo apt install\ndocker dot io first\nand this will install your docker\nafter that's done we will have\nsudo snap install docker so snap install\ndocker installs a newly created snap\npackage\nthere are basically some other\ndependencies for docker that you'll have\nto install\nof course since this is the installation\nprocess for the entire docker io\nit will take some time\ngreat so our docker is installed the\nnext thing we do as i mentioned earlier\nis that we need to install all the\ndependency packages so the command for\nthat is\nsudo snap install docker\nenter your password\nso with that we have completed the\ninstallation process for docker but\nwe'll perform a few more stages where we\nwill test if the installation has been\ndone right\nso before we move on with the testing\nfor docker let's once again just check\nthe version that we have installed\nso for that the command is docker\nversion\nand as you can see docker version\n17.12.1\nce has been installed\nnext thing we do is we pull an image\nfrom the docker hub\nso docker run\nhello\nworld\nnow hello world is a darker image which\nis present on the docker hub docker hub\nis basically a repository that you can\nfind online so with this command the\ndocker image hello world has been pulled\nonto your system\nso let's see if it's actually present on\nyour system now the command to check\nthis\nis sudo docker images\nand as you can see here hello world\nrepository\nthis is present on our system currently\nso the image has been successfully\npulled onto the system\nand this means that our docker is\nworking now we'll try out another\ncommand\nsudo docker ps minus a\nthis displays all the containers that\nyou have pulled so far so as you can see\nhere there are three hello world images\ndisplayed and all of them are in exited\nstate so i did this demo previously too\nwhich is why the two hello worlds which\nis created two minutes ago is also\ndisplayed here and the first hello world\nwhich has been created a minute ago is\nthe one we just did for this demo now as\nyou have probably noticed that all the\nhello world images over here all these\ncontainers are in the exited state so\nwhen you give the option for docker ps\nminus a where minus a stands for all it\ndisplays all the containers whether they\nare in exited or running state if you\nwant to see only those containers which\nare in their running state you can\nsimply execute sudo docker ps\nsudo\ndocker\nyes\nand as you can see no container is\nvisible here because none of them are in\nrunning state in this presentation we're\ngoing to go through a number of key\nthings we're going to compare docker\nversus traditional virtual machines and\nwhat are the differences and why you\nwant to choose docker over a virtual\nenvironment we'll go through the\nadvantages of working with docker and\nthe structure and how you would build\nout a docker environment and during that\nstructure we'll dig through the\ncomponents and the advanced components\nwithin docker at the end of the\npresentation we'll go through some basic\ncommands and then show you how those\nbasic commands can be used in a live\ndemo so with all that said let's get\nstarted so let's first of all compare\ndocker with a traditional virtual\nmachine so here we have the architecture\non the left and right of a traditional\nvirtual machine versus a darker\nenvironment and there are some things\nthat you'll probably see immediately\nthat are big differences one is that the\nvirtual environment has hypervisor layer\nwhereas the docker environment has a\ndocker engine layer and then in addition\nto that there are additional layers\nwithin the virtual machine each of these\nreally start compounding and creating\nvery significant differences between a\ndocker environment and a virtual machine\nenvironment so with a virtual machine\nthe actual memory usage is very high\nwhereas with the docker environment the\nmemory usage is very low if we look at\nperformance virtual machines when you\nstart building out particularly more\nthan one virtual machine on a server the\nperformance starts degrading and starts\ngetting poorer whereas with docker the\nperformance always stays really good\nthis is largely due to the lightweight\narchitecture used to construct the\ndocker containers themselves\nif we look at portability virtual\nmachines just are terrible for\nportability they're still dependent on\nthe host operating system and there's\njust a lot of problems that happen when\nyou are using virtual machines for\nportability in contrast docker was\ndesigned for portability so you can\nactually build solutions in a docker\ncontainer environment and have the\nguarantee that the solution will work as\nyou have built it no matter where it's\nhosted finally boot up time now the bit\nup time for a virtual machine is fairly\nslow in comparison to the boot up time\nfor a docker environment which is almost\ninstantaneous so we look at these in a\nlittle bit more detail one of the other\nchallenges that you have with a virtual\nmachine is that if you have unused\nmemory within the environment you cannot\nreallocate that memory so if you set up\nan environment that has nine gigs of\nmemory that's being used we have six\ngigs that are free you can't do anything\nwith it though that whole nine gig has\nbeen allocated to that virtual machine\nin contrast with docker if you have nine\ngigs and six gigs becomes free that free\nmemory can then be reallocated and\nreused across other containers used\nwithin that docker environment another\nchallenge is running multiple virtual\nmachines in a single environment that\ncan lead to instability and performance\nissues whereas docker is designed to run\nmultiple containers\nin the same environment and actually\ngets better the more containers you run\nin that hosted single docker engine\nportability issues with a virtual\nmachine is the software can work on one\nmachine but then when you move that vm\nto another machine suddenly some of the\nsoftware won't work because there are\nsome dependencies that haven't been\ninherited correctly whereas docker\nitself is designed specifically to be\nable to run across multiple environments\nand to be deployed very easily across\nthe systems and again the actual boot up\ntime for a vm it just takes a long time\nyou took about minutes in contrast to\nthe milliseconds that it takes for a\ndocker environment to boot up so let's\ndig into what docker actually is and\nwhat allows for these great performance\nimprovements over a traditional vm\nenvironment so docker itself is an os\nvirtualized software platform and it\nallows it organizations to really easily\ncreate deploy and run applications as\nwhat are called docker containers that\nhave all the dependencies within that\ncontainer very easily\nand the container itself is really just\na very lightweight package that has all\nthe instructions and dependencies such\nas frameworks libraries bins etc all\nwithin that container and that container\nitself can then be moved from\nenvironment to environment very easily\nif we to look in our devops lifecycle\nthe place where docker really shines is\nin deployment because when you're\nactually at the point of deploying your\nsolution you want to be able to\nguarantee that the code that has been\ntested will actually work in the\nproduction environment but in addition\nto that what we often find is that when\nyou're actually building the code and\nyou're actually testing the code having\na container running the solution at\nthose stages is also a really good plus\nbecause what happens is that the people\nbuilding the code and testing the code\nare able to validate their work in the\nsame environment that would be used for\nthe production environment so really\nyou can use docker in multiple stages\nwithin your devops cycle but it becomes\nreally valuable in the deployment stage\nso let's look at some of the key\nadvantages that you have with docker\nsome things that we've already covered\nis that you can do\nrapid deployment and you can do it\nreally fast the environment itself is\nhighly portable and was designed for\nthat in mind the efficiencies that\nyou'll see will allow you to run\nmultiple docker containers in a single\nenvironment as compared to more\ntraditional vm environments the\nconfiguration itself can be scripted\nthrough a language called yaml which\nallows you to be able to write out and\ndescribe the docker environment that you\nwant to create this in turn allows you\nto be able to scale your environment\nvery very quickly but with all of these\nadvantages probably the one that is most\ncritical to the type of work that we're\ndoing today is security you have to\nensure that the environment you are\nrunning is a highly secure but highly\nscalable environment and i'm very\npleased to say that docker takes\nsecurity very seriously so you'll see it\nas one of the key talents for the actual\narchitecture of the system that you're\nimplementing so let's look at how docker\nactually works within your environment\nso docker works there is a what's called\na docker engine the docker engine is\nreally comprised of two key elements you\nhave a server and a client and the\ncommunication via the two is via a rest\napi the server as you can imagine has\nthe instructions that are communicated\nout to the client and instructs the\nclient on what to do the connection\nbetween the client and the server the\ncommunication is via a rest api\non older systems you can take advantage\nof the docker toolbox which allows you\nto go ahead and control the docker\nengine the docker machine docker compose\nand kitematic so let's now go into what\nthe actual root components though of\ndocker are so let's have a look at those\nkey components there are four components\nthat we're going to go through we have\nthe docker clients and server we have\ndocker images we have the docker\nregistry and the docker container we're\ngoing to step through each of these one\nby one so let's look at the docker\nclients and server first so the docker\nclient and server is a command line\ninstructed solution where you would use\nterminal on your mac or command line on\nyour pc or linux system to be able to\nissue commands from the docker daemon\nthe communication between the docker\nclient and the docker host and is via a\nrest api\nso you can do some communication such as\na docker pull command which would send\nan instruction to the daemon which would\nthen form the interaction of pulling in\nthe correct components such as an image\nor container or registry to the docker\nclient the docker daemon itself is\nactually a service which actually\nperforms all sorts of operating and\nperformance services and as you'd\nimagine the docker damon is constantly\nlistening across the rest api to see if\nit needs to perform any specific\nrequests if you want to trigger and\nstart the whole process you what you\nwant to do is use the command dockered\nwithin your docker daemon and that will\nstart all of your performances and then\nyou have a docker host which actually\nruns the docker daemon and registry\nitself so now let's look into the actual\nstructure of a docker image so a docker\nimage itself is a template which\ncontains instructions for the docker\ncontainer and that template is written\nwith a language called yaml and yaml\nstands for yet another markup language\nit's very easy to learn the docker image\nitself is built within that yaml file\nand then hosted as a file in the docket\nregistry the image is really comprised\nof several key layers and you start with\nyour base layer which will typically\nhave your base image and this instance\nis your base operating system such as\nubuntu and then you then have layer of\ndependencies above that this would then\ncomprise the instructions in a read-only\nfile that would become your docker file\nso let's let you go through and look at\nwhat one of those in sets of\ninstructions would look like so here we\nhave four layers of instructions we have\na from pull run and then command so what\ndoes that actually look like in our\nlayers so to break this down the from\ncreates a layer which is based on ubuntu\nand then what we're doing is we're\nadding in files from the docker\nrepository onto that base command that\nbase layer and then what we want to be\nable to do is then say okay what are the\nwrong commands so we can actually then\nbuild the container within the\nenvironment and then we want to be able\nto then have a command line that\nactually executes something within that\ncontainer and in this instance the\ncommand is to run python so one of\nthings that we will see is that as we\nset up multiple containers each new\ncontainer is a new layer with new images\nwithin the docker environment each\ncontainer is completely separate from\nthe other containers within your docker\nenvironment so you're able to create\nyour own separate read write\ninstructions within each layer what's\ninteresting is that if you delete a\nlayer then the layer above it will also\nget deleted so what happens when you\npull in a layer but something has\nchanged in the decor image what's\ninteresting then is that the actual main\nimage of itself cannot be modified once\nyou've copied the image you can then\nmodify it locally but you can never\nmodify the actual base image itself so\nhere are some callouts for the\ncomponents within a docket image so the\nbase layer are in read-only format the\nlayers can be combined in a union file\nsystem to create a single image the\nunion file system saves memory space by\navoiding duplication of files and this\nallows a file system to appear as a\nwritable but without modifying the file\nwhich is known as a copy on write the\nactual base layers themselves are read\nonly so to be able to get around this\nstructure within a docker container the\ndocker environment itself uses what's\nknown as a copy and write strategy\nwithin the images and the containers\nthemselves and so what this allows you\nto do is you can actually copy the files\nfor better efficiency across your entire\ncontainer environment the copy and write\nstrategy does make docker super\nefficient and what you're able to do all\nthe time is keep reducing the amount of\ndisk space you're using and the amount\nof performance that you're taking from\nthe server and that's really again a key\nelement for docker is just this constant\nability to be able to keep improving the\nefficiency within the actual system\nitself all right so let's go on to item\nnumber three which is the docker\nregistry so the docker registry itself\nis the place where you would host and\ndistribute the different types of images\nthat you have created or you want to be\nused within your environment the actual\nrepository itself is just a collection\nof docker images and those docker images\nare built on instructions that you would\nwrite with yaml and are very easily\nstored and shared and what you can\nactually do is you can actually\nassociate specific name tags to the\nactual docker images themselves so it's\neasy for people to be able to find and\nshare that image within the docker\nregistry itself one of the things you\nactually see as we go through the demos\nyou actually see us actually using the\nthe tag name and you'll see how it is an\nalpha numeric identifying how we\nactually use it to actually create the\nactual container itself one of the\nthings you can do to as start off how\nyou would manage a registry is you can\nactually use the publicly accessible\ndocker hub registry which is available\nto anybody but you can also create your\nown registry for your own use internally\nthe actual registry that you create\ninternally can have both public and\nprivate images that you create and this\nmay be for various reasons of how you\nstructure your environment the actual\ncommands you would use to actually\nconnect to the registry are both push\nand pull push is to actually push a new\ncontainer environment that you've\ncreated from your local manager node to\nthe remote registry and a pool allows\nyou to pull a new client that has been\ncreated and is being shared so again\nfull command and it pulls and retrieves\na docket image from the docker registry\nand makes it very easy for people to\nshare different images consistently\nacross teams and a push command allows\nyou to take a new command that you've\ncreated a new container that you created\nand push it to the registry whether it's\ndocker hub or whether it's your own\nprivate registry and allow it to be\nshared across your teams some key did\nyou know in docker registry deleting a\nrepository is not a reversible action so\nif you delete a repository it's gone so\nlet's go into the final stage here which\nis the actual docker container itself so\nthe docker container itself um is an\nexecutable package of applications and\nits dependencies bundled together so it\ngives all the instructions that you\nwould have for the solution that you're\nlooking to run it's actually really\nlightweight and again this is because of\nthe redundancy that's built into how you\nstructure the container and the\ncontainer itself is then inherently also\nextremely portable\nwhat's really good about running a\ncontainer though is that it does run\ncompletely in isolation so you're able\nto share it again very easily from\ngrouped group and you are guaranteed\nthat even if you are running a container\nit's not going to be impacted by any\nhost os peculiarities or unique setups\nas you would have in a vm or a\nnon-containerized environment the actual\nmemory that you have on a docker\nenvironment that can be shared across\nmultiple containers which is really\nuseful typically when you have a vm you\nwould have a defined amount of memory\nfor each vm environment the challenge\nyou start running into though is that\nyou can't share that memory whereas with\ndocker you can easily share the memory\num for a single environment across\nmultiple containers\nthe actual container is built using\ndocket images and the commands to\nactually run those images is a run\ncommand so this guy should go through a\nbasic structure of how you would run a\ndocket image so you go into terminal\nwindow and you would write a docker run\nredis\nand then it would run a container called\nredis so we're going to go in and if you\ndon't have the redis image locally\ninstalled it will then pull it from the\nregistry then the new docker container\nredis will be then available within your\nenvironment so you can actually start\nusing it so let's look at why containers\nare so lightweight they're so\nlightweight because they really have\nbeen able to get away from some of the\nadditional layers that you have in\nvirtualization within vms and the\nbiggest one is the hypervisor and the\nneed to run on a host operating system\nthose are two big big elements so if you\ncan get rid of those then you're doing\ngreat so let's look at some of the more\nadvanced concepts within the docker\nenvironment and we're going to look at\ntwo advanced components one is docker\ncompose and the second is docker swamp\nso let's look at docker compose docker\ncompose is really designed for\nrunning multiple containers as a single\nservice and it does this by running each\ncontainer in isolation but allowing the\ncontainers to interact with each other\nas was stated earlier on you would\nactually write the compose environment\nusing yaml as the language in the files\nthat you would create so where would you\nuse something like docker compose so an\nexample would be if you are running an\napache server with my sql database and\nyou need to create additional containers\nto run additional services without the\nneed to start each one separately and\nthis is where you would write a set of\nfiles using docker compose to be able to\nhelp balance out that demand\nso let's now look at docker swarm so\ndocker swarm is a service that allows\nyou to be able to control multiple\ndocker environments within a single\nplatform so what you actually are\nlooking at doing is within your docker\nswamp is we're treating each node as a\ndocker daemon and we're actually having\nan api that's interacting with each of\nthose nodes\nthere are two types of node that you're\ngoing to be getting comfortable working\nwith one is the manager node and the\nsecond is the worker node and as you'd\nexpect the manager node is the one\nsending out the instructions to all of\nthe worker nodes but there is a two-way\ncommunication that is happening the\ncommunication allows for the imagine\nnode to be able to manage the\ninstructions and then listen to receive\nupdates from the working node so if\nanything happens within this environment\nthe imagine node can react and adjust\nthe architecture of the worker node so\nit's always in sync it was really great\nfor\nlarge scaled environments so finally\nlet's go through what are some of the\nbasic commands you would use within\ndocker and once we've gone through all\nthese basic commands we'll actually show\nyou a demo of how you'd actually use\nthem as well so if we're going to go in\nprobably the first command is to install\ndocker and so if you have yam installed\nyou just do yum install docker and\nyou'll install docker onto your computer\nto start the docker daemon as you want\nto do a system ctl start docker the\ncommand to remove a docker image is\ndocker rmi and then the image id itself\nand that's not the image name that's the\nactual alphanumeric id number that you\nwant to uh grab the command line to\ndownload a new image is docker pull and\nthen the name of the image you'd want to\npull and by default you're going to be\npulling from the docker default registry\nthat will then connect to your docker\ndaemon and download the images from that\nregistry client the command line to run\nan image is docker run and then the\nimage id\nand then we have the if we wanted to\npull specifically from docker hub then\nwe would have a docker pull and then the\nimage name and colon its tag\nto pull build an image from a docker\nfile you would do docker build dash t\nand then the image name and colon tag to\nshut down the container you do docker\nstop container id the access for running\na container is docker exec it container\nid bash\nso we've gone through all the different\ncommands but let's actually see how they\nwould actually look and we're going to\ngo ahead and do a demo so welcome to\nthis demo where we're going to go ahead\nand put together all of the different\ncommands that we have outlined in the\npresentation for docker uh first is just\nto list all of the docker images that we\nhave so we do\nsudo docker images and we enter in our\npassword\nand this will now list out the images\nthat we've created already and we have\nthree images there\nso let's go ahead and pull a docker\nimage so to do that we'll we'll go ahead\nand type sudo\ndocker\nand actually we don't want to do image\nwe want to select pull\nand then the name of the image that we\nwant to pull which is going to be my\nsequel\nand by default this is actually going to\ngo ahead and use the latest my sequel\ncommand my sql image that we have so\nit's now go ahead and pull this image\nit's going to take a few minutes\ndepending on your internet connection\nspeed it's kind of a large file that has\nto be downloaded so we'll just wait for\nthat to download\nyou can see the others have completed\njust waiting for this last file to\ndownload almost there\nonce that's done we're going to go ahead\nand do is we'll actually\nrun the docking container and create a\nnew container using the image that we\njust downloaded but we have to wait for\nthis to download first\nall right so the image has been pulled\nfrom docker hub\nand let's go ahead and create the new\ndocker container so we're going to do\nsudo docker\nrun\ndash d\ndash\np\n0.0.0.0\n[Music]\ncolon\n80\ncolon 80.\nand then put in my sequel\ncall on\nlatest so we have the latest version\nand we have our new token\nand that shows our new docker container\nhas been created\nnow let's go ahead and see if the\ncontainer is running\nand we'll do\nsudo docker\nps\nto list all the running containers and\nwhat we see is that the container is not\nlisted there which means it's probably\nnot running so let's go ahead and list\nout all of the images that we have\nwithin docker so we can see whether it's\nactually listed there so we'll do\nps-a\nand yes there we are we can see that we\ndo have our new container in my sql\nlatest\nand it was created 36 seconds ago\nbut it's in the exit mode so what we\nhave to do is we have to change that\nstatus so it's actually running\nso let's change that to running state\nwe'll do sudo\ndocker\nrun\ndash\ndash dash\nname\nand we can name it\nsl\nsql\nsequel\nslash spin slash\nflash\nand that's now going to be in the route\nand we'll exit out of that and now if we\nlist out the docking containers we\nshould see it is now\nan active container\nsudo docker\nstart\nand then we'll start the scene\nand then\nand we should now see it\nthere we are it's now in the running\nstate excellent\nand we can see that it was updated six\nseconds ago\nwe're gonna go ahead and we're gonna\nclear the screen\nokay now what we want to do is remove\nthe docker container\nso we're going to do is check list of\nimages that we have\nand to sudo docker images\nhere are the images that we have and we\nhave my sql is listed\nand what we want to do is delete my sql\nand to do that we're going to type in\nsudo docker rm-f\nimage\nmysql\nrun that command and what we'll find is\nthe image there's no such image oh okay\nso what we actually have to do is we\nhave to go and see that the image is\nnow gone it's been removed excellent\nit's exactly what we wanted to see\nand we can also delete an image by its\nimage id as well\nhowever if an image is running\nand active we have to kill that image\nfirst so we'll go ahead and we're going\nto select the image id we'll copy that\nand it's going to replace that it won't\nbe able to actually run correctly\nbecause the image is active so what we\nhave to do now is\nstop the image and then we can kill it\nso it's in the running state\nso we have to do\nso we do sudo darker kill\nand kill sl and that will kill the\ncontainer\nand now\nwe'll see that the container has gone\nand now we can delete the image\nand that's going to be the image going\nwith image id but\neasy peasy\nokay let's go ahead onto the next\nexercise which is two\nso here we are we've listed all of the\nuh\ncontainers and they're all gone so let's\ngo on to the next exercise final\nexercise which is to actually\ncreate a batch image\nand we do a batch http image so let's go\nahead and write that out so it's going\nto be docker\nrun\ndash\ndid\ndash dash\nname\nwhite is that's going to be the name of\nthis http service dash p\n8080 colon 80 dash v\nopen quotes\ndollar sign pwd\nclose quotes\ncolon\nslash usr\nslash local\nslash\napache2\nslash htdocs\nslash\nhttpd\nsemicolon 2.4\nrun that\nput in our password again\nuh so what we see is the port is already\nbeing used so let's go ahead and see\nwhich ports let's go see if we can\nchange the port or see what ports are\nrunning so let's do\nsudo images and see which ports are\nbeing used because it's either the the\nport or the name\nhasn't been put in correctly so sudo\ndocker images\nps\npseudo docker\nps-a\nand\nyep\nlet's port 80 there\nso we'll clear the screen\nso we're going to change the container\nname because i think we actually have\nthe wrong container name here so let's\ngo and change that and we'll paste that\nin and voila\nhere we go now working and we'll just\ndouble check and make sure everything's\nworking correctly so to do that we'll go\ninto our web browser\nand we'll type in\nas soon as firefox opens up\ntype in localhost\ncolon 8080\nwhich was the the port that we created\nand there we are it's a list of all the\nfiles which shows that the server is up\nand running and today we'll be looking\nat the installation for the tool chef as\nyou probably already know chef is a\nconfiguration management tool so that\nbasically means that chef is a tool\nwhich can automate the entire process of\nconfiguring multiple systems it also\ncomes with a variety of other\nfunctionalities which you can check out\nin our video on what a chef and the chef\ntutorial so before we move on to the\ninstallation process let me just explain\nto you in brief the architecture of\nshare so chef has three components\nthere's the workstation which is where\nthe system admin sits and he or she\nwrites the configuration files here your\nsecond system is the server the server\nis where all these configuration files\nare stored and finally you have the\nclient or the node systems so these are\nthe systems that require the\nconfiguration you can have any number of\nclients but for a demo to keep it simple\nwe'll just have one client now i'm using\nmy oracle vm virtualbox manager as you\ncan see here i'll have two machines the\nmaster and the node both of these are\ncentos 7 machines as of the server we'll\nbe using this as a service on the cloud\nso let's begin let's have a look at our\nmaster system first this is my master\nsystem the terminals open over here and\nthe terminal color here it's black\nbackground with green text\nand this is my note system so the\nterminal here has a black background\nwith white text so you can differentiate\nbetween the both so we start at our\nmaster system the first thing we need to\ndo is we need to download the chef dk so\nyou can write w get which is the command\nfor downloading and then go to your\nbrowser and just type chef dk here\nthe first link\nso here you have different versions of\nchef dk depending on the operating\nsystem that you're using you need to\nselect the appropriate one i'm using the\nred hat enterprise version and that's\nnumber seven so i'm using centos 7 so\nthis is my link for downloading chef dk\njust copy this link and go back to your\nterminal\nand paste it here\nso your chef dk is being downloaded this\nwill take a while right after we\ndownload the chef dk our next step is to\ninstall it on our system\nswash chef dk is downloaded now let's\ninstall it\nso guys this is the version of chef dk\nthat you have downloaded so make sure\nthis is exactly what you type down here\nto\nso great our chef dk is installed so\nbasically our installation for the\nworkstation is done right now but just\nso you understand how the flow is we'll\nalso write a sample recipe on our\nworkstation so before we do that let's\nfirst create a folder\nmy folder name chef repo basically the\nchef repository\nand let's move into this folder\nokay so we're in next what we need to do\nis as i mentioned earlier all your\nrecipes will be within a cookbook so\nlet's create a folder which will hold\nall our cookbooks\nand let's move into this too\nokay so our next stage is to create the\nactual cookbook within which we'll have\nour recipe so the command for creating\nthe cookbook is chef generate\ncookbook\nsample because so samples the name of my\ncookbook so guys please notice here cook\nbooks is the directory that i created\nwhich will hold all our cookbooks and\nhere cookbook is the key word so sample\nis that one cookbook that we are\ncreating under our folder cookbooks\nand our cookbook is being created great\nso that's done moving into our cookbook\nokay so when our cookbook sample was\ncreated automatically there's this\nhierarchical structure associated with\nit so let's have a look at this\nhierarchical structure to understand\nwhat our cookbook sample exactly is\nbefore we move on so the command for\nlooking at a hierarchical structure is\ntree so as you see here within our\ncookbook we have a folder recipes and\nunder this this the default.rb recipe\nthis is where we'll be creating our\nrecipe so we'll just alter the content\nof default.rb so let's move on to\nfinally writing our recipes so we'll\nmove into this recipes folder first\nnow we'll open our recipe default.rb in\ng edit\nso the recipe for this particular demo\nis to install the httpd package on our\nclient node that is basically your\napache server and we'll also be hosting\na very simple web page so let's begin\nso the recipes in chef is written in\nruby\nso i'll explain you the recipe in a\nwhile\nokay so the first line is where you\ninstall httpd the second line for\nservice is where you start or enable the\nhttp service on the client node that's\nour first task the second part where we\nneed to create our web page\nso this is the part where your web page\nwill be stored\nif you have written any html file\npreviously you know that this is\nprobably like a default path where our\nweb pages are created\nyep that's it so this is the content\nthat will be displayed on your web page\nif everything works right and i'm pretty\nsure it will so now we can save our\nrecipe and that's done close your gra so\nnow that we have created the recipe all\nour work at the workstation is completed\nthe next thing we do is we move on to\nthe server so as i mentioned earlier\nwe'll be using the server as a service\non the cloud\nso go to your browser and here just type\nmanage dot chef dot io\nso this is the home page of your chef\nserver\nclick here to get started we need to\nfirst create an account for using the\nchef server this is completely free we\njust need to give our email id and a few\nother details it's in fact a lot like\ncreating an account on facebook or\ninstagram\nfill in all the details check the terms\nof service box\nso the next thing you need to do is go\nback to your inbox and verify your email\nid so i have my inbox opened here on my\nwindows machine so this is my inbox you\nwould have received a mail from chef\nsoftware just click on this link to\nverify it and create your password\nand that's done so let's continue this\non our workstation machine\nso type in your username and password\nso the first time you log into your chef\nserver you'll have this pop-up appear\nwhere you need to create a new\norganization so create your organization\nso this organization is basically the\nname that will be associated with a\ncollection of the client machines first\nthing you do go to your administration\ntab and download the starter kit so guys\nwhen you're doing this part make sure\nthat you're on your workstation that is\nyou're opening your shep server on the\nworkstation because you need this folder\nto be installed here\nyou save the file so this gets\ndownloaded so the shift starter kit is\nthe key to connecting your workstation\nwith the server and the server with the\nnode so basically it has a tool called\nknife which we'll come across later in\nour demo this knife is what takes care\nof all the communication and the\ntransferring of cookbooks between the\nthree machines in our case the two\nmachines the workstation and the node\nand the one server so let's go back to\nour root directory\nso our chef starter zip file is within\nour downloads folder what we do first is\nwe'll move the sip folder into our\ncookbooks folder and then we'll unzip it\nthere because our cookbooks folder is\nthe one that contains the recipe and\nthat is where we require knife tool\ncommand to be present so we can send\nthis recipes over to the server\nso we'll just check the contents of our\ncookbooks right now to ensure that our\nchef started.zip file is within the\ncookbooks\nyep so it's here so next thing we do is\nwe need to unzip this folder\ngreat so that's unzipped\nand this means that our workstation and\nour server are now linked\nso we just need to use the knife command\ntool to transfer or to upload our\nrecipes which we created on the\nworkstation onto the server so before we\nexecute this command we need to move\ninto our cookbooks directory as you know\nthat is where we unzipped our chef\nstarter kit so that is where our knife\ncommand is present to\nand now let's execute the knife command\nso it's knife\ncookbook\nupload and sample so as you probably\nrecall sample is the name of the\ncookbook that we created and within\nsample we created rsp which is\ndefault.rb so we are uploading the\nentire cookbook onto the server execute\nthe command\ngreat so our cookbooks uploaded now\nlet's check this on our server so move\nto your browser where you opened your\nchef server and go to policy so here you\ngo this is the cookbook we uploaded\nsample and it's the first time we\nuploaded it so the version\n0.1.0 the first version now what you\nwould notice is if you go to the notes\ntab there are no notes present so if you\nhave no nodes you basically have no\nmachine to execute your cookbooks and\nthe nodes are not seen right now because\nwe have not configured them yet so\nthat's the next thing we need to do all\nthis so far was done on your master\nmachine now we'll move on to the node\nmachine\nso before moving on let's just check the\nip of our node machine\nso that's our ip note this down\nsomewhere and now we move back to our\nworkstation\nas we already saw that we uploaded a\nsample workbook next thing we need to\nmake sure that our server and node are\nable to communicate with each other so\nagain we use the knife tool for this too\nthe command here is knife bootstrap and\nenter the ip address of your node which\nwe just checked\nwe'll be logging in there so we'll be\nusing the node as the root user and then\nwe also need to specify our root\npassword for the node\nand we give a name to this node so this\nis the name by which we'll be\nidentifying our node at the server\nso as you have probably noticed here we\nare using the term ssh which is a secure\nshell so it basically provides a channel\nof secure communication between two\nmachines in an unsafe environment okay\nso it's done so if your command has\nexecuted right which in our case as we\ncan see has our chef's server and our\nchef node must be able to communicate\nwith each other so if this is so we\nshould be able to send the cookbook that\nwe previously uploaded from our\nworkstation onto the server now from our\nserver to our node so to do that before\nwe move on to the node machine we need\nto go back to our chef's server let's\nrefresh this page\nand as you see here previously under the\nnotes tab we did not have any node\nmentioned now we do chef node which is\nthe node we wanted to identify our node\nby which is a centos platform and that's\nour ip so it's active for to hours\nthat's the uptime last check-in the last\ntime we checked into our node was a\nminute back and yeah that's pretty much\nit so now we'll create a run list and\nwe'll add a sample to this run list\nso just click on your node and you'll\nsee the small arrow here in the end\nclick on that\nedit run list and under available\nrecipes we have a cookbook sample\npresent so drag and drop this to the\ncurrent run list and accept it okay so\nnow that we updated our run list our\nrecipe is sent to our node what we next\nneed to do is that we need to execute\nthis at our node so now we'll move on to\nour node machine\nshift client is the command to execute\nyour\nso while this recipe is executing you\ncan see what exactly is happening our\nrecipe was to install http package first\nwhich is your apache server so the first\nline that's done and it's up to date the\nsecond line it's enabled third line the\nservice is started and the fourth line\nis where your contents created for the\nweb page at this very location so by the\nlook of this everything should work fine\nso how do we check this we can just go\nto our browser and the search bar just\ntype localhost and there you go so our\nhttpd package which is the patchy server\nis installed and our sample webpage is\nalso hosted congratulations on\ncompleting the chef demo today we'll\ndive into a tutorial on the\nconfiguration management tool chef so if\nyou look at the devops approach or the\ndevops life cycle you will see that chef\nfalls under operations and deployment so\nbefore we begin let's have a brief look\nat all that you'll learn today first\nwe'll get to know why should we use chef\nand what exactly is the chef two of the\nmost common terms used with chef\nconfiguration management and\ninfrastructure as code we'll have a\nbrief look at these we'll also have a\nlook at the components of chef and the\nchef architecture quickly go through the\nvarious flavors of chef and finally\nwe'll wrap it up with the demo a demo on\nthe installation of apache on our notes\nso let's begin guys why should we use\nchef well consider a large company now\nthis company caters to a large number of\nclients and provides a number of\nservices or solutions of course to get\nall of this done they need a huge number\nof servers and a huge number of systems\nbasically they will have a huge\ninfrastructure now this infrastructure\nneeds to be continuously configured and\nmaintained in fact when you're dealing\nwith an infrastructure that size there's\na good chance systems may be failing and\nin the long run as your company expands\nnew systems may even get added so what\ndo you do well you could say the company\nhas the best system administrator out\nthere but all by himself could he\npossibly take care of an infrastructure\nthat size no he can't and that's where\nchef comes in because chef automates\nthis entire process so what does chef\nprovide chef provides continuous\ndeployment so when you look at the\nmarket space today you see how products\nand their updates are coming out in a\nmatter of days so it's very important\nthat a company is able to deploy the\nproduct the minute it's ready so that\nonce it's out it's not already obsolete\nchef also provides increased system\nrobustness as we saw chef can automate\nthe infrastructure but in spite of this\nautomation there's a good possibility\nthat errors do creep in chef can detect\nall these bugs and remove them before\ndeploying them into the real environment\nnot only this chef also adapts to the\ncloud we all know how today the services\ntools solutions everything is revolving\naround the cloud so chef does really\nplay along by making itself easily\nintegratable with the cloud platform so\nnow that you know why to use chef let's\nlook at what exactly is chef chef is an\nopen source tool developed by ops code\nof course there are paid versions of\nchef such as chef enterprise but other\nthan that most of it is freely\naccessible chef is written in ruby and\nerlang if you would have gone through\nany previous material on chef i'm sure\nyou would have come across ruby being\nrelated to chef but not erlang so this\nis why because ruby and erlang are both\nused to build chef but when it comes to\nactually writing the codes in chef it's\njust ruby and these are the codes that's\ndeployed onto your multiple servers and\ndoes the automatic configuration and\nmaintenance and this is why chef is a\nconfiguration management tool so i have\nused this term configuration management\na couple of times what exactly does this\nmean let's start with the definition of\nconfiguration management configuration\nmanagement is a collection of\nengineering practices that provides a\nsystematic way to manage entities for\nefficient deployment so let's break this\ndown configuration management basically\nis a collection of practices and what\nare these practices for these practices\nare for managing your entities the\nentities which are required for\nefficient deployment so what are these\nentities that you need for efficient\ndeployment they are code infrastructure\nand people code is basically the code\nthe system administrators right for\nconfiguring your various systems\ninfrastructure is the collection of your\nsystems and your servers and then\nfinally you have the teams that take\ncare of this infrastructure so codes\nneed to be updated whenever your\ninfrastructure needs a new configuration\nor some sort of updation in the\noperating system or the software\nversions your code needs to be updated\nat first and as the requirements of the\ncompany change the infrastructure's\nconfiguration needs to change and\nfinally of course the people need\ncoordination so if you have a team of\nsystem administrators and say person a\nmakes some change to the code person b c\nd and so on need to be well aware when\nthe change is made as to why it was made\nwhat was the change made and where\nexactly this change was made so there\nare two types of configuration\nmanagement on our left we have the push\nconfiguration here the server that holds\nthe files with instructions to configure\nyour notes pushes these files onto the\nnode so the complete control lies with\nthe server on your right side we have\nthe pull configuration in case of pull\nconfiguration the nodes pole against the\nserver to first check if there's any\nchange in the configurations required if\nthere is the nodes themselves pull these\nconfiguration files shelf follows pull\nconfiguration and how it does this we'll\nsee further in our video another\nimportant term often used with chef\ninfrastructure as code so let's\nunderstand what this term infrastructure\nas code means through this small story\nso here's tim tim's a system\nadministrator at a large company now he\nreceives a task he has to set up a\nserver and he has to install 20 software\napplications over it so he begins he\nsets up the server but then it hits him\nit would take him the entire night to\ninstall 20 software applications\nwouldn't things have been much simpler\nif he just had a code to do so well of\ncourse codes do make things much simpler\ncodes have a number of advantages\nthey're easily modifiable so if today\ntim is told we need mysql installed on\n20 systems tim simply writes a code to\ndo so and the very next datum is told we\nchanged our mind we don't need maya\nskill i think we'll just use oracle this\ndoes not bother him because now he just\nopens the file he makes a few\ncorrections in his code and that should\nwork just fine code is also testable so\nif tim had to write ten commands to do\nsomething and at his tenth command he\nrealized the very first command he wrote\nthere was something not right there well\nthat would be quite tiresome wouldn't it\nwith codes however you can test it even\nbefore running it and all the bugs can\nbe caught and corrected codes are also\ndeployable so they're easily deployable\nand they're deployable multiple times so\nnow that we saw the various advantages\nof having codes let's say what\ninfrastructure as code exactly is here's\nthe definition infrastructure as code is\na type of id infrastructure where the\noperation team manages the code rather\nthan a manual procedure so\ninfrastructure as a code allows the\noperations team to take care of a code\nwhich automatically performs various\nprocedures rather than having to\nmanually do those procedures so with\nthis feature all your policies and your\nconfigurations are written as code let's\nnow look at the various components of\nchef so our first component is the\nworkstation the workstation is the\nsystem where the system administrator\nsits he or she creates the codes for\nconfiguring your nodes now these codes\nwhich in case of chef are written in\nruby are called the recipes and you'll\nhave multiple number of recipes so a\ncollection of recipes is called a\ncookbook now these cookbooks are only\ncreated at the workstation but they need\nto be stored at the server so the knife\nis a command line tool so it's basically\na command that you will see us executing\nin one of our demos that shifts these\ncookbooks from the workstation over to\nthe server a second component is the\nserver so servers like the middleman it\nlies between your workstation and your\nnodes and this is where all your\ncookbooks are stored because as you saw\npreviously the knife sends these\ncookbooks over from the workstation to\nthe server the server can be hosted\nlocally that's on your workstation\nitself or it can be remote so you can\nhave your server at a different location\nyou can even have it on the cloud\nplatform and a final confidence the node\nso nodes are the systems that require\nthe configuration in a chef architecture\nyou can have a number of nodes oh hi is\na service which is installed on your\nnode and it is responsible for\ncollecting all the information regarding\nyour current state of the node this\ninformation is then sent over to the\nserver to be compared against the\nconfiguration files and check if any new\nconfiguration is required chef client is\nanother such service on your node which\nis responsible for all the\ncommunications with the server so\nwhenever the node has a demand for a\nrecipe the shift client is responsible\nfor communicating this demand to the\nserver since you have a number of nodes\nin a chef architecture it's not\nnecessary that each node is identical so\nof course every node can have a\ndifferent configuration let's now have a\nlook at the chef architecture so here we\nhave a workstation one server machine\nand two nodes you can have any number of\nnodes first things first the system\nadministrator must create a recipe so\nthe recipes that are mentioned in our\nchef architecture are just dummy recipes\nwe look into actual functioning recipes\nlater in our demo so you have one recipe\ntwo recipes three recipes and a\ncollection of recipes forms a cookbook\nso guys if you look at the recipe in\nsource you have simply learn three dot\nerb erb is the extension for your ruby\nfiles so the cookbooks are only created\nat the workstation they now need to be\nsent over to the server where they are\nstored and this is the task of the knife\nknife is a command line tool which is\nresponsible for transferring all your\ncookbooks onto the server from the\nworkstation here's the command for\nrunning your knife knife upload simply\ndb where simply db is the name of the\ncookbook we then move on to our node\nmachines at our node we run the ohi\nservice the ohai service will collect\nall information regarding the current\nstate of your notes and send it over to\nthe chef client when you run the chef\nclient these informations are sent over\nto the server and they are tested\nagainst the cookbooks so if there is any\ndiscrepancy between the current state of\nyour nodes and the cookbook that is if\none of the nodes does not match the\nconfigurations required the cookbook is\nthen fetched from the server and\nexecuted at the node this sets the note\nto the right state there are various\nflavors of chef we'll quickly go through\nthese first we have chef solo with chef\nsolo there's no separate server so your\ncookbooks are located on the node itself\nnow this kind of configuration is used\nonly when you have just a single node to\ntake care of the next flavor is the\nhosted chef with hosted chef you still\nhave your workstation and your node but\nyour server is now used as a service on\nthe cloud this really makes things\nsimple because you don't have to set up\na server yourself and it still performs\nall the functioning of a typical chef\nthis is the configuration you will\nnotice that we'll be using in our demo\nchef client server with chef client\nserver you have a workstation you have\nserver and you have n number of nodes\nnow this is the traditional chef\narchitecture this is the one we have\nused for all the explanations previously\nand finally we have private chef private\nchef is also known as enterprise chef in\nthis case your workstation server and\nnode all are located within the\nenterprise infrastructure this is the\nmain difference between chef client\nserver and private chef in case of shep\nclient server all these three machines\ncould be dispersed the enterprise\nversion of chef also provides the\nliberty to add extra layers of security\nand other features and we reach the\nfinal part of our video where we'll have\nthe hands-on so before we dive into our\ndemo let me just quickly give you an\nintroduction to it we'll be using two\nvirtual boxes both sent to s7 one will\nbe used as workstation while the other\nwill be a node so we are just using one\nnode to make things simple the server\nwill be used as a service on the cloud\nnow these are the steps we'll be\nperforming during our demo we'll first\ndownload and install the chef dk on our\nworkstation we then make an empty\ncookbook file and we'll write a recipe\ninto it we need to then set up the\nserver so as i mentioned earlier server\nwill be a service on the cloud so you'll\nhave to create a profile but this will\nbe completely free we then link the\nworkstation to the server and will\nupload the recipe to the server the\nnotes will now download the cookbooks\nfrom the server and configure themselves\nso now that you have some idea about\nwhat we'll be doing let's move on to the\nactual demo we begin our demo\nhere's my oracle vm virtualbox manager i\nhave two machines here i've already\ncreated my workstation and node both of\nthese are sent to s7 machines\njust for you to differentiate this is my\nterminal and for my workstation it's a\nblack background with white text and as\nof my note it's a black background with\ngreen text\nthe first thing you do is you go to your\nworkstation box and open a web browser\nsearch for chef dk installation\ngo to the first link which is your\nchef's official page a very warm welcome\nto all our viewers i'm anjali from\nsimply learn and today i'll be showing\nyou how you can install the\nconfiguration management tool ansible so\nlet's have a brief about why one would\nuse ansible and what exactly is ansible\nso if you consider the case of an\norganization it has a very large\ninfrastructure which means it has more\nthan probably hundreds of systems and\ngiving one or even a small team of\npeople the responsibility to configure\nall these systems makes their work\nreally tough repetitive and as you know\nmanual work is always prone to errors so\nansible is a tool which can automate the\nconfiguration of all these systems with\nansible a small team of system\nadministrators can write simple code in\nyaml and these codes are deployed onto\nthe hundreds and thousands of servers\nwhich configures them to the desired\nstates so ansible automates\nconfiguration management that is\nconfiguring your systems it automates\norchestration which means it brings\ntogether a number of applications and\ndecides an order in which these are\nexecuted and it also automates\ndeployment of the applications now that\nwe know what ansible does let's move on\nto the installation of ansible so here\nis my oracle vm virtualbox manager i'll\nbe using two systems there's the node\nsystem which is basically my client\nsystem and there's the server system or\nthe master system so let's begin at our\nserver system\nso this is my master system guys so the\nfirst thing we do is we download our\nansible tool\nso one thing we must remember with\nansible is that unlike\nchef or puppet ansible is a push type of\nconfiguration management tool so what\nthis means is that the entire control\nhere lies with your master or your\nserver system this is where you write\nyour configuration files and these are\nalso responsible for pushing these\nconfiguration files onto your node or\nclient system as and when required\ncreates our ansible tool is installed\nnow we need to open an ansible host file\nand there we'll specify the details of\nour node or client machine\nso this is a ansible host file as you\ncan see here the entire file is\ncommented but there's a certain syntax\nthat you'd observe for example here we\nhave a group name web servers under\nwhich we have the ip addresses or\ncertain host name so this is about how\nwe'll be adding the details for our\nclient system first we need to give a\ngroup name\nunder this group basically we add all\nthe clients which require a certain type\nof configuration since we are using just\none node we'll give only the details for\nthat particular node first we need to\nadd the ip address of our client machine\nso let's just go back to our client\nmachine\nand this here is the ip address 192.168.\nonce you have typed in your ip address\ngive a space and then we'll specify the\nuser for our client machine\nso all communications between the server\nor the master system and the client or\nthe node system takes place through ssh\nssh basically provides a secure channel\nfor the transfer of information\nfollow this up with your password in my\ncase it's the root's password\nand that's it we are done so now we save\nthis file and go back to our terminal\nso now that our host file is written the\nnext thing we do is we write our\nplaybook the playbook is the technical\nterm used for all the configuration\nfiles that we write in ansible now\nplaybooks are written in yaml yaml is\nextremely simple to both write and\nunderstand it's in fact very close to\nenglish\nso now we'll write our playbook the\nplaybook or any code in yaml first\nstarts with three dashes this indicates\nthe beginning of your file next thing we\nneed to give a name to our playbook\nso name\nand i'm going to name my playbook sample\nbook\nwe next need to specify our host systems\nwhich is basically the systems at which\nthe configuration file or the playbook\nin our case will be executed so we'll be\nexecuting this at the client machines\nmentioned under the group ansible\nservers so we had just one client\nmachine under it we'll still mention the\ngroup name\nwe next need to specify the username\nwith which we'll be logging into our\nclient machine\nwhich is root in my case\nand become true specifies that you need\nto become the root to execute this\nplaybook so becoming the roots called a\nprivilege escalation next we need to\nspecify our tasks so these are basically\nthe actions that the playbook will be\nperforming so you would have noticed\neverything so far is aligned that is\nname host remote user become and task\nbecause these are at one level now\nwhatever comes under task will be\nshifted slightly towards the right\nalthough yaml is extremely simple to\nunderstand and read both it's a little\ntricky while writing because you need to\nbe very careful about the indentations\nand the spacing\nso my first task is install httpd which\nis basically a apache server\nso now my command yum and this will be\ninstalling the httpd package\nand the latest date of it will be\ninstalled so that's our first task\nnow our second task would be running our\napache service\nso name\nrun httpd\nand the action which is service\nwill be performed on httpd hence the\nname httpd\nand state\nmust be started\nnow we come to our third task\nso here we'll create a very simple web\npage that will be hosted\nso create content is the name of our\ntask\nand the content that we are creating\nhere will basically be copied to our\nnode system at a particular file\nlocation that we'll provide\nour content will be congrats\nand then we'll provide the destination\nat which this file will be copied\nso this is the default location for all\nour html files\nand that's it we are done writing our\nplaybook\njust save this and go back to your\nterminal\nbefore we execute the playbook or push\nthe playbook onto our note system let's\ncheck the syntax of our playbook so the\ncommand for doing so is\nand if everything is fine with your\nplaybook the output would be just your\nplaybook name so our syntax is perfectly\nfine now we can push on the playbook to\nour node or the client machine\nand that's the syntax for doing so now\nas your playbook is being sent over to\nthe client machine you can see that\nfirst the facts are gathered that is the\ncurrent state of your client machine is\nfirst fetched to check what all is to be\nchanged and what is already present so\nthe first thing is installing httpd so\nour system already had httpd so it says\nokay because this does not need to be\nchanged our next task was running httpd\nnow although our system had the apache\nservice it was not running so that is\none thing that was changed the next was\nthere was no content available so the\ncontent was also added so two tasks were\nchanged and four things were okay now\neverything seems fine and before you\nmove any forward it is very important\nthat you check this one line of\ndocumentation provided by ansible you\nhave all kind of information available\nhere regarding which all tasks were\nexecuted if your client machine was\nreachable or unreachable and so on so\nnow that everything is fine here we can\nmove on to our node system\nand we'll just go to our browser so if\nour playbook has been executed here what\nshould happen is that the httpd service\nmust be in the running state and the web\npage that we created should be hosted so\nlet's just type localhost\nand great everything's working fine so\nour web page is displayed here so we\ncome to an end for our installation and\nconfiguration video for the\nconfiguration management tool ansible if\nyou have any doubts please post them in\nthe comment section below and we'll\ndefinitely get back to you as soon as\npossible thanks essentially now we have\nmatthew and anjali to take us through\nhow to work with ansible\nansible today as one of the key tools\nthat you would have within your devops\nenvironment\nso the things that we're going to go\nthrough today is we're going to cover\nwhy you would want to use a product like\nansible what ansible really is and how\nit's of value to you and your\norganization the differences between\nansible and other products that are\nsimilar to it on the market and what\nmakes ansible a compelling product and\nthen we're going to dig into the\narchitecture for ansible we're going to\nlook at how you would create a playbook\nhow you'd manage your inventory of your\nserver environments and then what is the\nactual workings of ansible as a little\nextra we're going to also throw in\nansible tower one of the secret source\nsolutions that you can use for improving\nthe speed and performance of how you\ncreate your ansible environments and\nfinally we're going to go through a use\ncase by looking at hootsuite social\nmedia management company and how they\nuse ansible to really improve the\nefficiency within their organizations so\nlet's jump into this so the big question\nis why ansible so you have to think of\nansible as another tool that you have\nwithin your devops environment for\nhelping manage the service and this\ndefinitely falls on the operations side\nof the dev ops equation so if we look\nhere we have a picture of sam and like\nyourselves sam is a system administrator\nand he is responsible for maintaining\nthe infrastructure for all the different\nservers within his company so some of\nthe servers that he may have that he has\nto maintain could be web servers running\napache they could be database servers\nrunning uh mysql and if you only have a\nfew servers then that's fairly easy to\nmaintain i mean if you have three web\nservers and two database servers and\nlet's face it would we all love just to\nhave one or two servers to manage it\nwould be really easy to maintain the\ntrick however is as we start increasing\nthe number of servers and this is a\nreality of the environments that we live\nand operate in it becomes increasingly\ndifficult to create consistent setup of\ndifferent infrastructures such as web\nservers and databases for the simple\nreason that we're all human as if we had\nto update and maintain all of those\nservers by hand there's a good chance\nthat we would not set up each server\nidentically now this is where anspo\nreally comes to the rescue and helps you\nbecome an efficient operations team\nansible like other system solutions such\nas chef and puppet uses code that you\ncan write and describe the installation\nand setup of your servers so you can\nactually repeat it and deploy those\nservers consistently into multiple areas\nso now you don't have to have one person\nredoing and re-following setup\nprocedures you just write one script and\nthen each script can be executed and\nhave a consistent environment so we've\ngone through why you'd want to use\nansible let's step through what ansible\nreally is\nso you know this is all great but you\nknow how do we actually use these tools\nin our environment so\nansible is a tool that really allows you\nto create and control three key areas\nthat you'd have within your operations\nenvironment first of all there's it\nautomation so you can actually write\ninstructions that automate the it setup\nthat you would typically do manually in\nthe past the second is the configuration\nand having consistent configuration\nimagine setting up hundreds of apache\nservers and being able to guarantee with\nprecision that each of those apache\nservers is set up identically and then\nfinally you want to be able to automate\nthe deployment so that as you scale up\nyour server environment you can just\npush out instructions that can deploy\nautomatically different servers the\nbottom line is you want to be able to\nspeed up and make your operations team\nmore efficient so let's talk a little\nbit about pull configuration and how it\nworks with ansible so there are two\ndifferent ways of being able to set up\ndifferent\nenvironments for server farms\none is to have a key server that has all\nthe instructions on and then on each of\nthe servers that connect to that main\nmaster server you would have a piece of\nsoftware known as a client installed on\neach of those servers that would\ncommunicate to the main master server\nand then would periodically either\nupdate or change the configuration of\nthe slave server this is known as a pull\nconfiguration an alternative is a push\nconfiguration and the push configuration\nis slightly different the main\ndifference is as with a pull\nconfiguration you have a master server\nwhere you actually put up the\ninstructions but unlike the pull\nconfiguration where you have a client\ninstalled on each of the services with a\npush configuration you actually have no\nclient installed on the remote servers\nyou simply are pushing out the\nconfiguration to those servers and\nforcing a restructure or a fresh clean\ninstallation in that environment so\nansible is one of those second\nenvironments where it's a push\nconfiguration server and this contrasts\nwith other popular products like chef\nand puppet which have a master slave\narchitecture with a master server\nconnecting with a client on a remote\nslave environment where you would then\nbe pushing out the updates with ansible\nyou're pushing out the service and the\nstructure of the server to remote\nhardware and you are just putting it\nonto the hardware irrelevant of the\nstructure that's out there and there are\nsome significant advantages that you\nhave in that in that you're not having\nto have the extra overhead weight of a\nclient installed on those remote servers\nhaving to constantly communicate back to\nthe master environment so let's step\nthrough the architecture that you would\nhave for an ansible environment\nso when you're setting up an ansible\nenvironment the first thing you want to\ndo is have a local machine and the local\nmachine is where you're going to have\nall of your instruction and really the\npower of the control that you'd be\npushing out to the remote server so the\nlocal machine is where you're going to\nbe starting and doing all of your work\nconnected from the local machine are all\nthe different nodes pushing out the\ndifferent configurations that you would\nset up on the local machine the\nconfigurations that you would write and\nyou would write those in code within a\nmodule so you do this on your local\nmachine for creating these modules and\neach of these modules is actually\nconsistent playbooks the local machine\nalso has a second job and that job is to\nmanage the inventory of the nodes that\nyou have in your environment the local\nmachine is able to connect to each of\nthe different nodes that you would have\nin your hardware network through ssh\nclients so a secure client\nlet's dig into some of the different\nelements within that architecture and\nwe're going to take a first look at\nplaybooks that you would write and\ncreate for the ansible environments so\nthe core of ansible is the playbook this\nis where you create the instructions\nthat you write to define the\narchitecture of your hardware so the\nplaybook is really just a set of\ninstructions that configure the\ndifferent nodes that you have and each\nof those set of instructions is written\nin a language called yammer and this is\na standard language used for\nconfiguration server environments did\nyou know that yaml actually stands for\nyaml 8 markup language let's just a\nlittle tidbit to hide behind your ear so\nlet's have a look or one of these play\nbooks it looks like and here we have a\nsample\nyaml script that we've written so you\nstart off your jammer script with three\ndashes and that indicates the start of a\nscript and then the script itself is\nactually consistent of two distinct\nplays at the top we have play one and\nbelow that we have play two within each\nof those plays we define which nodes are\nwe targeting so here we have a web\nserver in the top play and in the second\nplay we have a database server that\nwe're targeting and then within each of\nthose server environments we have the\nspecific tasks that we're looking to\nexecute so let's step through some of\nthese tasks we have an install apache\ntask we have a start apache task and we\nhave an install my sequel task and when\nwe do that we're going to execute a\nspecific set of instructions and those\ninstructions can include installing\napache and then setting the state of the\napache environment or starting the\napache environment and setting up and\nrunning the mysql environment\nso this really isn't too complicated and\nthat's the really good thing about\nworking with yaml is it's really\ndesigned to make it easy for you as an\noperations lead to be able to configure\nthe environments that you want to\nconsistently create so let's take a step\nback though we have two hosts we have\nweb server and database server where do\nthese names come from well this takes us\ninto our next stage in the second part\nof working with ansible which is the\ninventory management part of ansible so\nthe inventory part of ansible is where\nwe maintain the structure of our network\nenvironment so what we do here is part\nof the structure in creating different\nnodes is we've had to create two\ndifferent nodes here we have a web\nserver node and a database server net\nand under web server node we actually\nhave the names that were actually\npointing to specific machines within\nthat environment so now when we actually\nwrite our scripts all we have to do is\nrefer to either web server or database\nserver and the different servers will\nhave the instructions from the yammer\nscript executed on them this makes it\nreally easy for you to be able to just\npoint to new services without having to\nwrite out complex instructions so let's\nhave a look at how ansible actually\nworks in real world so the real world\nenvironment with is that you'd have the\nansible software installed on a local\nmachine and then it connects to\ndifferent nodes within your network on\nthe local machine you'll have your first\nyour playbook which is the set of\ninstructions for how to set up the\nremote nodes and then to identify how\nyou're going to connect to those nodes\nyou'll have an inventory we use secure\nssh connections to each of the servers\nso we are encrypting the communication\nto those servers we're able to grab some\nbasic facts on each server so we\nunderstand how we can then push out the\nplaybook to each server and configure\nthat server remotely the end goal is to\nhave an environment that is consistent\nso let's ask you a simple question\nwhat are the major opportunities the\nansible has over chef and puppet\nreally like to hear your answers in the\ncomments below pop them in there and\nwe'll get back to you and really want to\nhear how you feel that ansible is a\nstronger product or maybe you think it's\na weaker product as it compares to other\nsimilar products in the market here's\nthe bonus we're going to talk a little\nbit about ansible tower so ansible tower\nis an extra product that red hat created\nthat really kind of puts the cherry on\nthe top of the ice cream or is the icing\non your cake ansible by itself is a\ncommand line tool however as well tower\nis a framework that was designed to\naccess ansible and through the ansible\ntower framework we now have an easy to\nuse gui this really makes it easy for\nnon-developers to be able to create the\nenvironment that they want to be able to\nmanage in their devops plan without\nhaving to constantly work with the\ncommand prompt window so instead of\nopening up terminal window or command\nwindow and writing out complex\ninstructions only in text you can now\nuse drag and drop and mouse click\nactions to be able to create your\nappropriate playbooks inventories and\npushes for your nerds alright so we\ntalked a lot about anspol let's take a\nlook at a specific company that's using\nansible today and in this example we're\ngoing to look at hootsuite now hootsuite\nif you've not already used their\nproducts and they have a great product\nhootsuite is a social media management\nsystem they are able to help with you\nmanaging your pushes of social media\ncontent across all of the popular social\nmedia platforms they're able to provide\nthe analytics they're able to provide\nthe tools that marketing and sales teams\ncan use to be able to assess a sentiment\nanalysis of the messages that are being\npushed out really grateful and very\npopular but part of their popularity\ndrove a specific problem straight to\nhootsuite the challenge they had at\nhootsuite is that they had to constantly\ngo back and rebuild their server\nenvironment and they couldn't do this\ncontinuously and be consistent there was\nno standard documentation and they had\nto rely on your memory to be able to do\nthis consistently imagine how complex\nthis could get as you're scaling up with\na popular product that now has tens of\nthousands to hundreds of thousands of\nusers this is where ansible what came in\nand really helped the folks over at\nhootsuite today the devops team at\nhootsuite write out playbooks that have\nspecific instructions that define the\narchitecture and structure of their\nhardware nodes and environments and are\nable to do that as a standard product\ninstead of it being a problem in scaling\nup their environment they now are able\nto rebuild and create new servers in a\nmatter of seconds\nthe bottom line is ansible has been able\nto provide hootsuite with it automation\nconsistent configuration and free up\ntime from the operations team so that\ninstead of managing servers they're able\nto provide additional new value to the\ncompany a very warm welcome to all our\nviewers i'm anjali from simply learn and\ntoday i'll be taking you through a\ntutorial on ansible so ansible is\ncurrently the most trending and popular\nconfiguration management tool and it's\nused mostly under the devops approach so\nwhat will you be learning today you\nlearn why you should use ansible what\nexactly is ansible the ansible\narchitecture how ansible works the\nvarious benefits of ansible and finally\nwe'll have a demo on the installation of\napache or the http package on our client\nsystems we'll also be hosting a very\nsimple web page and during this demo\ni'll also show you how you can write a\nvery simple playbook in yemen and your\ninventory file\nso let's begin why should you use\nansible let's consider a scenario of an\norganization where sam is a system\nadministrator sam is responsible for the\ncompany's infrastructure a company's\ninfrastructure basically consists of all\nits systems this could include your web\nservers your database servers the\nvarious repositories and so on so as a\nsystem administrator sam needs to ensure\nthat all the systems are running the\nupdated versions of the software now\nwhen you consider a handful of systems\nthis seems like a pretty simple task sam\ncan simply go from system to system and\nperform the configurations required but\nthat is not the case with an\norganization is it an organization has a\nvery large infrastructure it could have\nhundreds and thousands of systems so\nhere is where sam's work gets really\ndifficult not only does it get tougher\nsam has to move from system to system\nperforming the same task over and over\nagain this makes sam bored not just that\nrepeating the same task leaves no space\nfor innovation and without any ideas or\ninnovation how does the system grow and\nthe worst of it all is manual labor is\nprone to errors so what does sam do well\nhere is where ansible comes in use with\nansible sam can write simple codes that\nare deployed onto all the systems and\nconfigure them to the correct states\nso now that we know why we should use\nansible let's look at what exactly is\nansible ansible is an i.t engine that\nautomates the following tasks so first\nwe have orchestration orchestration\nbasically means bringing together of\nmultiple applications and ensuring an\norder in which these are executed so for\nexample if you consider a web page that\nyou require to host this webpage stores\nall its values that it takes from the\nuser into a database so the first thing\nyou must do is ensure that the system\nhas a database manager and only then do\nyou host your web page so this kind of\nan order is very crucial to ensure that\nthings work right\nnext ansible automates configuration\nmanagement so configuration management\nsimply means that all the systems are\nmaintained at a consistent desired state\nother tools that automate configuration\nmanagement include puppet and chef\nand finally ansible automates deployment\ndeployment simply means the deploying of\napplication onto your servers of\ndifferent environments so if you have to\ndeploy an application on 10 systems with\ndifferent environments you don't have to\nmanually do this anymore because ansible\nautomates it for you in fact ansible can\nalso ensure that these applications or\nthe code are deployed at a certain time\nor after regular intervals\nnow that we know what exactly ansible is\nlet's look at ansible's architecture\nansible has two main components you have\nthe local machine and you have your node\nor the client machine so the local\nmachine is where the system\nadministrator sits he or she installs\nansible here and on the other end you\nhave your node or the client systems so\nin case of ansible there's no supporting\nsoftware installed here these are just\nthe systems that require to be\nconfigured and they are completely\ncontrolled by the local machine at your\nlocal machine you also have a module a\nmodule is a collection of your\nconfiguration files and in case of\nansible these configuration files are\ncalled playbooks playbooks are written\nin yaml yaml stands for yaml ain't a\nmarkup language and it is honestly the\neasiest language to understand and learn\nsince it's so close to english we also\nhave the inventory the inventory is a\nfile where you have all your nodes that\nrequire configuration mentioned and\nbased on the kind of configuration they\nrequire they are also grouped together\nso later in the demo we'll have a look\nat how the playbook and the inventory is\nwritten and that will probably make it\nclearer so of course a local machine\nneeds to communicate with the client and\nhow is this done this is done through\nssh ssh is your secure shell which\nbasically provides a protected\ncommunication in an unprotected\nenvironment\nokay so we saw the various components of\nansible now how does ansible exactly\nwork you have your local machine on one\nend this is where you install ansible if\nyou have gone through any previous\nmaterial on ansible you would have come\nacross the term agentless often being\nassociated with the stool so this is\nwhat agentless means you're installing\nansible only on your local machine and\nthere's no supporting software or plugin\nbeing installed on your clients this\nmeans that you have no agent on the\nother end the local machine has complete\ncontrol and hence the term agentless\nanother term that you would come across\nwith ansible is push configuration so\nsince the local machine has complete\ncontrol here it pushes the playbooks on\nto the nodes and thus it's called a push\nconfiguration tool now the playbooks and\nthe inventory are written at the local\nmachine and the local machine connects\nwith the nodes through the ssh client\nthis step here is optional but it's\nalways recommended to do so it's where\nthe facts are collected so facts are\nbasically the current state of the node\nnow all this is collected from the node\nand sent to the local machine so when\nthe playbook is executed the task\nmentioned in the playbook is compared\nagainst the current status of the note\nand only the changes that are required\nto be made further are made and once the\nplaybooks are executed your notes are\nconfigured to the desired states so as i\nmentioned before ansible is currently\nthe most trending tool in the market\nunder the configuration management\numbrella so let's have a look at the\nvarious benefits of ansible which gives\nit this position well ansible is\nagentless it's efficient it's flexible\nsimple important and provides automated\nreporting how does it do all this let's\nhave a look at that agentless as i\nalready mentioned before you require no\nsupporting software or plugin installed\non your node or the client system so the\nmaster has complete control and\nautomatically this means that ansible is\nmore efficient because now we have more\nspace in our client and node systems for\nother resources and we can get ansible\nup and running real quick ansible is\nalso flexible so an infrastructure is\nprone to change very often and ansible\ntakes no amount of time to adjust to\nthese changes ansible cannot get any\nsimpler with your playbooks written in a\nlanguage such as yaml which is as close\nto english as you can possibly get\nair important basically means that if\nyou have a playbook which needs to be\nrun n number of systems it would have\nthe same effect on all of these systems\nwithout any side effect and finally we\nhave automated reporting so in case of\nansible your playbook has number of\ntasks and all these tasks are named so\nwhenever you run or execute your\nplaybook it gives a report on which\ntasks ran successfully which failed\nwhich clients were not reachable and so\non all this information is very crucial\nwhen you're dealing with a very large\ninfrastructure and finally we reach the\nmost exciting part of our tutorial the\nhands-on before we move on to the actual\nhands-on let me just brief you through\nwhat exactly we'll be doing so i'll be\nhosting two virtual boxes both centos 7\noperating systems one would be my local\nmachine and other my node or the client\nmachine so on my local machine first\ni'll install ansible we then write the\ninventory and the playbook and then\nsimply deploy this playbook on the\nclient machine there's just one thing\nthat we need to do is that we need to\ncheck if the configurations that we\nmentioned in our playbook are made right\nso we'll now begin our demo this is my\noracle virtualbox here i have my master\nsystem which is the local machine and\nthis is the client machine so let's have\na look at these two machines this is my\nclient machine the terminals open right\nnow so the client machine terminal has a\nblack background with white text and the\nmaster machine terminal has a white\nbackground with black text just so you\ncan differentiate between the two so\nwe'll start at the master machine the\nfirst thing to do is we need to install\nour ansible so yum install\nansible hyphen y is the command to do so\nso this might take some time\nyeah so ansible is installed the next\nstep we go to our host file so a host\nfile here is basically the inventory\nit's where you'll specify all your nodes\nin our case we just have one node\nthat's the path to your host file\nas you'll see everything here is\ncommented so just type in the group for\nyour client notes\nso i'm going to name it ansible clients\n[Music]\nand here we need to type the ip address\nof a client machine so my client\nmachine's ip address is 192.168.2.127\nso before you come to this it's advised\nthat you check the ip address on your\nclient machine the simple command for\nthat is ifconfig now once you type the\nip address put a space and here we need\nto mention the username and the password\nfor our client so i'll be logging in as\nthe root user\nso this is the password\nand then the user\nwhich is root in my case\nthat's it now you can save this file\njust clear the screen\nnext we move on to our playbook we need\nto write the playbook\nso the extension for our playbook is yml\nwhich stands for yaman\nand as you can see here i have already\nwritten my playbook but i'll just\nexplain to you how this is done\nso a yaml file always begins with three\ndashes this indicates the start of your\nyaml file\nnow the first thing is you need to give\na name to the entire playbook\nso i have named it sample book\nhost is basically where this would be\nexecuted\nso as we saw earlier in our inventory i\nmentioned clients group name as ansible\nclients so we use the same name here\nthe remote user is the user you'll be\nusing at your client so in my case\nthat's root and become true is basically\nto indicate that you need to set your\nprivileges at root so that's called a\nprivilege escalation\nnow a playbook consists of tasks\nso we have here three tasks the first\ntask i've named it to install httpd so\nwhat we are doing here is we are\ninstalling our http package which is\nbasically the apache server and we are\ninstalling the most latest version of it\nhence the state value is latest the next\ntask is running httpd so for the service\nthe name is httpd because that's the\nservice we need to start running and the\nstate is started our next task is\ncreating content so this is the part\nwhere we are creating our web page\nso copy because this is the file that\nwill be created at the client\nthe content will be welcome\nand the destination of the file will be\nwww\nindex.html as you know this is like a\ndefault path that we use to store all\nour html files\nnow as you can see here there's quite a\nlot of indentation and when it comes to\nyaml although it's very simple to write\nand very easy to read\nthe indentation is very crucial\nso the first dash here represents the\nhighest stage that is the name of the\nplaybook and all the dashes under task\nare slightly shifted towards the right\nso if you have two dashes at the same\nlocation they basically mean that they\nare siblings so the priority would be\nthe same so to ensure that all your\ntasks are coming under the tasks label\nmake sure they are not directly under\nname so yeah that's pretty much it so\nwhen you write your yaml file the\nlanguage is pretty simple very readable\nindentations absolutely necessary make\nsure all your spaces are correctly\nplaced we can now save this file\nnext thing we need to check if the\nsyntax of our yaml file is absolutely\nright because that's very crucial\nso the command to check the syntax of\nthe yaml file is ansible\nplaybook\nthe name of your playbook\nsyntax check\nso we have no syntax errors which is why\nthe only output you receive is\nsample.yml which is the name of your\nplaybook\nso our playbook is ready to be executed\nthe command to execute the playbook\nis ansible playbook\nand the name of your playbook\nso our playbooks executed as you can see\nhere gathering facts that's where all\nthe facts of the note that the present\nstate of the note is collected and sent\nto the local machine so it's basically\nto check that if the configuration\nchanges that we are about to make is\nalready made\nso it's not made we do not have the\nhttpd package installed on our node so\nthis is the first change that's made\nalso if it's not installed of course\nit's not running that's the second\nchange that's made so it's put into the\nrunning state\nand a final task which is create content\nis under the okay state this means that\nthe contents already present in the\nclient machine so i made it this way so\nthat you can actually see the different\nstates that's present\nso over here we have okay four so four\nthings are all fine the facts are\ngathered two things are changed and one\nis already present two changes are made\nzero clients are unreachable and zero\ntasks have failed so this is the\ndocumentation that i was referring to\npreviously that ansible provides\nautomatically\nand is very useful as you can see\nso our next step we need to just check\non our client machine if all the changes\nthat we desired are made so let's move\nto our client\nso this is my client machine so to check\nthis since we are installing the httpd\npackage and hosting a web page the best\nway to do it\nis open your browser\nand type in\nlocalhost\nso there you go your apache server is\ninstalled and your web page is hosted\ntoday i'll be showing you the\ninstallation procedure for the\nconfiguration management tool puppet so\nwhat exactly is the use of puppet if you\nconsider the scenario of an organization\nwhich has a very large infrastructure\nit's required that all the systems and\nservers in this infrastructure is\ncontinuously maintained at a desired\nstate this is where puppet comes in\npuppet automates this entire procedure\nthus reducing the manual work so before\nwe move on to the demo let me tell you\nwhat the architecture of puppet looks\nlike so puppet has two main components\nyou have the puppet master and the\npuppet client the puppet master is where\nyou write the configuration files and\nstore them and the puppet client are\nbasically those client machines which\nrequire the configuration in case of\npuppet these configuration files that\nyou write are called manifest so let's\nmove on to the demo so here are my two\nmachines the first is the server system\nwhich is basically a master where you'll\nwrite your configuration files and the\nothers the node or the client system so\nlet's have a look at both of these\nmachines this my node system the\nterminals open here and the terminal has\na black background with white text\nand as of my server or the master\nmachine it has a black background with\ngreen text\nso we started a server machine the first\nthing that we need to do is we need to\nremove the firewall so in a lot of cases\nthere are chances that the firewall\nstops the connection between your server\nand your node now since i'm doing a demo\nand i'm just showing you how puppet\nworks between two virtual boxes i can\nsafely remove the firewall without any\nworries but when you're implementing\npuppet in an organization or a number of\nsystems on a local network be careful\nabout the consequences of doing so\nso a firewall is disabled next thing\nthat we do is we'll change the hostname\nof our server system now while using the\npuppet tool it's always advisable that\nyou name your server's host as puppet\nthis because the puppet tool identifies\nthe hostname puppet by default as the\nhost name for the master or the server\nsystem\nlet's just check if the host name is\nchanged successfully\nyup so that's done so as you see still\nlocalhost is appearing as the host name\nso just close your terminal and start it\nagain\nand you see here the hostname has been\nchanged to puppet okay so the next thing\nthat we have to do is we install our\npuppet labs make sure your system is\nconnected to the net\nright so puppet labs is installed next\nwe need to install the puppet server\nservice on our server system\nnow that our puppet server service is\ninstalled we need to move into the\nsystem configurations for our puppet\nserver so the path for that is atc\nsysconfig puppet server\nso this is a configuration file for the\npuppet server now if you come down to\nthis line now this line here this is the\nline which allocates memory for your\npuppet server now you must remember that\npuppet is a very resource extensive tool\nso just in case to ensure that we do not\nencounter any errors because of out of\nmemory we will reduce these sizes so as\nof now we have 2 gb allocated by default\nwe'll change this to 512 mb\nnow in a lot of cases it may work\nwithout doing so but just to be on the\nsafer side we make this change\nsave it\nand go back to your terminal we are now\nready to start our puppet server service\nthe first time you start your puppet\nserver service\nit may take a while next we need to\nenable this\nand if your puppet server service is\nstarted and enabled successfully this is\nthe output that you would get in case\nyou're still not sure you can always\ncheck the status at any point of time\nand as you see here it's active so\neverything's fine as of now next thing\nwe do is we'll move on to our agent\nsystem or a client or node system\nso here too we'll have to install puppet\nlabs but before we do so we need to make\na small change in our hosts file so\nlet's open the host file\nyeah so this is a host file we need to\nadd a single line here which specifies\nour puppet master so first we put our\npuppet masters ip address followed by\nthe host name and then we'll add a dns\nfor our puppet server so let's just go\nback\nto our server system and find out its\nip address\nand that's my ip address for the server\nsystem\nnow the host name of our puppet server\nand a dns for it\nsave this file\nand return to your terminal\nso now we can download our puppet labs\non the node system is the exact same\nprocedure that you followed for\ndownloading puppet labs on your server\nsystem too\nso in my note system the puppet labs is\nalready downloaded so the next thing is\nwe need to install a puppet agent\nservice\nso puppet is a pull type of\nconfiguration tool what this means is\nthat all your configuration files that\nyou'll be writing on your server is\npulled by the node system as and when it\nrequires it so this is the\nco-functionality of the agent service\nwhich is installed on your client node\nor agent system so my puppet agent\nservice is installed so next i'll just\ncheck if my puppet server is reachable\nfrom this node system\nso 8140 is a port number that the puppet\nserver must be listening on\nand it's connected to puppet so that\nguarantees that your server is reachable\nfrom the node system\nso now that everything is configured\nright we can start our agent service\nso guys you would have noticed that the\ncommand for starting the agent service\nis a little more complex in the command\nfor starting your server service this is\nbecause when you start your agent\nservice you're not just starting a\nservice but you're also creating a\ncertificate this is the certificate that\nwill be sent over to your master system\nnow at the master system there's\nsomething called the certificate\nauthority this gives the master the\nrights to sign a certificate if it\nagrees to share information with that\nparticular node so let's execute this\ncommand which does both the function of\nsending the certificate and starting\nyour agent service so as you can see\nhere our services started successfully\nit's in a running state now we'll move\nto our master system or the server\nsystem\nso first we'll have a look at the\ncertificates that we received\nthe certificate should be in this\nlocation\nso as you can see here this is the\ncertificate that we just received from\nour agent service so this here within\nquotes is the name of our certificate so\nnext when we are signing the certificate\nthis is the name we'll provide to\nspecify that this is the particular\ncertificate that we want to sign so the\nminute we sign a certificate the note\nthat send the certificate gets a\nnotification that the master has\naccepted your request so after this we\ncan begin sharing our manifest files now\nhere's the command for signing this\ncertificate\nokay so our certificate is signed\nwhich means that the node's request is\napproved and the minute the certificate\nis signed the request is removed from\nthis list so now if we execute the same\ncommand as we did to check the list of\nall the certificates we will not find\nthe certificate anymore let's just check\nthat so as you see now there are no more\nrequests pending because we have\naccepted all the requests if you want to\nhave a look at all the certificates that\nis signed or unsigned you can use the\nsame command with the addition of all\nand all the certificates received so far\nwill be listed as you can see here the\nplus sign indicates that the certificate\nrequest has already been accepted so now\nthat our certificate is signed the next\nthing we do is we'll create a sample\nmanifest file\nthis is the part that you create your\nmanifest files in\nour file name is sample.pp and our files\ncreated so right now we have no content\nin this file we'll just check if the\nagent is receiving it and once that's\nconfirmed we'll add some content to the\nfile so let's move to our agent system\nnow this is the command to execute at\nthe agent system to pull your\nconfiguration files\nso a catalog is applied in 0.02 seconds\nso now that the communication between\nour agent system and our master system\nis working perfectly fine let's add some\ncontent to the previous placeholder file\nthat we created on our master system\nso now we open the same file\nin an editor\nokay so we are going to write a code for\ninstalling the httpd package on our note\nsystem which is basically your apache\nservice\nnode and then within quotes insert the\nhostname of your node system\nso my node systems hostname is client\nthe package you wish to install which in\nour case is httpd\nand the action to be performed\nand that's it a very small and simple\ncode save this file\nnow let's go back to our node system\nand let's pull the second version of the\nsame configuration file so every time\nyou execute this command as we did\npreviously to what happens is the agent\nservice so the agent service basically\nchecks on your master system if there's\nany new configuration file added or if\nthere's any change to the previous\nconfiguration file made if so then the\ncatalog is applied once again so now our\ncatalog is applied in 1.55 seconds so\nnow to check if our catalog served its\npurpose let's just open our browser\njust type localhost here\nand as you can see if your httpd package\nhas been successfully installed the\napache testing page will appear here so\nin this session what we're going to do\nis we're going to cover what and why you\nwould use puppet what are the different\nelements and components of puppet and\nhow does it actually work and then we'll\nlook into the companies that are\nadopting puppet and what are the\nadvantages that they have now received\nby having puppet within their\norganization and finally we'll wrap\nthings up by reviewing how you can\nactually write a manifest in puppet so\nlet's get started so why puppet so here\nis a scenario that as an administrator\nyou may already be familiar with you as\nan administrator have multiple servers\nthat you have to work with and manage so\nwhat happens when a server goes down\nit's not a problem you can jump onto\nthat server and you can fix it but what\nif the scenario changes and you have\nmultiple servers going down so here is\nwhere puppet shows its strap with\npuppets all you have to do is write a\nsimple script that can be written with\nruby and write out and deploy to the\nservers your settings for each of those\nservers the code gets pushed out and to\nthe servers that are having problems and\nthen you can choose to either roll back\nto those servers to their previous\nworking states or set them to a new\nstate and do all of this in a matter of\nseconds and it doesn't matter how large\nyour server environment is you can reach\nto all of these servers your environment\nis secure you're able to deploy your\nsoftware and you're able to do this all\nthrough infrastructure as code which is\nthe advanced devops model for building\nout solutions so let's dig deeper into\nwhat puppet actually is so puppet is a\nconfiguration management tool maybe\nsimilar tools like chef that you may\nalready be familiar with it ensures that\nall your systems are configured to a\ndesired and predictable state public can\nalso be used as a deployment tool for\nsoftware automatically you can deploy\nyour software to all of your systems or\nto specific systems and this is all done\nwith code this means you can test the\nenvironment and you can have a guarantee\nthat the environment you want is written\nand deployed accurately so let's go\nthrough those components of puppet so\nhere we have a breakdown of the puppet\nenvironment and on the top we have the\nmain server environment and then below\nthat we have the client environment that\nwould be installed on each of the\nservers that would be running within\nyour network so if we look at the top\npart of the screen we have here our\npuppet master store which has and\ncontains our main configuration files\nand those are comprised of manifests\nthat are actual codes for configuring\nthe clients we have templates that\ncombine our codes together to render a\nfinal document and you have files that\nwill be deployed as content that could\nbe potentially downloaded by the clients\nwrapping this all together is a module\nof manifest templates and files you\nwould apply a certificate authority to\nsign the actual document so that the\nclients actually know that they're\nreceiving the appropriate and authorized\nmodules outside of the master server\nwhere you'd create your manifest\ntemplates and files you would have\npublic client is a piece of software\nthat is used to configure a specific\nmachine there are two parts to the\nclient one is the agent that constantly\ninteracts with the master server to\nensure that the certificates are being\nupdated appropriately and then you have\nthe fact of it the current state of the\nclient that is used and communicated\nback to through the agent so let's step\nthrough the workings of puppet so the\npuppet environment is a master slave\narchitecture the clients themselves are\ndistributed across your network and they\nare constantly communicating back to a\nmaster server environment where you have\nyour puppet modules the client agent\nsends a certificate with the id of that\nserver back to the master and then the\nmaster will then sign that certificate\nand send it back to the client and this\nauthentication allows for a secure and\nverifiable communication between client\nand master the factor then collects the\nstate of the client and sends that to\nthe master based on the facts sent back\nthe master then compiles manifests into\nthe catalogs and those catalogs are sent\nback to the clients and an agent on the\nclient will then initiate the catalog a\nreport is generated by the client that\ndescribes any changes that have been\nmade and sends that back to the master\nwith the goal here of ensuring that the\nmaster has full understanding of the\nhardware running software in your\nnetwork this process is repeated at\nregular intervals ensuring all client\nsystems are up to date so let's have a\nlook at companies that are using puppet\ntoday there are a number of companies\nthat have adopted puppet as a way to\nmanage their infrastructure so companies\nthat are using puppy today include\nspotify google att so why are these\ncompanies choosing to use puppet as\ntheir main configuration management tool\nthe answer can be seen if we look at a\nspecific company staples so staples\nchose to take and use puppet for their\nconfiguration management tool and use it\nwithin their own private cloud the\nresults were dramatic the amount of time\nthat the it organization was able to\nsave in deploying and managing their\ninfrastructure through using puppets\nenabled them to open up time to allow to\nexperiment with other and new projects\nand assignments a real tangible benefit\nto a company so let's look at how you\nwrite a manifest in puppet so so\nmanifests are designed for writing out\nin code how you would configure a\nspecific node in your server environment\nthe manifests are compiled into catalogs\nwhich are then executed on the client\neach of the manifests are written in the\nlanguage of ruby with a dot pp extension\nif we step through the five key steps\nfor writing a manifest they are one\ncreate your manifest and that is written\nby the system administrator two compile\nyour manifest and it's compiled into a\ncatalog three deploy the catalog is then\ndeployed onto the clients four execute\nthe catalogs are run on the client by\nthe agent and then five end clients are\nconfigured to a specific and desired\nstate if we actually look into how\nmanifest is written it's written with a\nvery common syntax if you've done any\nwork with ruby or really configuration\nof systems in the past this may look\nvery familiar to you so we break out the\nwork that we have here you start off\nwith a package file or service as your\nresource type and then you give it a\nname and then you look at the features\nthat need to be said such as ip address\nthen you're actually looking to have a\ncommand written such as present or start\nthe manifest can contain multiple\nresource types if we continue to write\nour manifest and puppet the default\nkeyword applies a manifest to all\nclients so an example would be to create\na file path that creates a folder called\nsample in a main folder called etc the\nspecified content is written into a file\nthat is then posted into that folder and\nthen we're going to say we want to be\nable to trigger an apache service and\nthen ensure that that apache service is\ninstalled on a node so we write the\nmanifest and we deploy it to a client\nmachine on that client machine a new\nfolder will be created with a file in\nthat folder and an apache server will be\ninstalled you can do this to any machine\nand you'll have exactly the same results\non those machines we're going to decide\nwhich is better for your operations\nenvironment is it chef puppet antipal or\nsaltstack all four are going to go\nhead-to-head so let's go through the\nscenario of why you'd want to use these\ntools so let's meet tim he's our system\nadministrator and tim is a happy camper\nputting and working on all of the\nsystems in his network but what happens\nif a system fails if there's a fire a\nserver goes down well tim knows exactly\nwhat to do he can fix that fire really\neasily the problems become really\ndifficult for tim however if multiple\nservers start failing particularly when\nyou have large and expanding networks so\nthis is why tim really needs to have a\nconfiguration management tool and we\nneed to now decide what would be the\nbest tool for him because configuration\nmanagement tools can help make tim look\nlike a superstar all he has to do is\nconfigure the right codes that allows\nhim to push out the instructions on how\nto set up each of the servers quickly\neffectively and at scale all right let's\ngo through the tools and see which ones\nwe can use the tools that we're going to\ngo through are chef puppet and support\nand salt stacks and we have videos on\nmost of these software and services that\nyou can go and view to get an overview\nor a deep dive in how those products\nwork so let's go and get to know our\ncontestants so our first contestant is\nchef and chef is a tool that allows you\nto configure very large environments it\nallows you to scale very effectively\nacross the entire ecosystem and\ninfrastructure chef is by default an\nopen source code and one of the things\nthat you find is a consistent metaphor\nfor the tools that we recommend on\nsimplylearn is to use open source code\nthe code itself is actually written in\nlanguage of ruby and erlang and it's\nreally designed for heterogeneous\ninfrastructures that are looking for a\nmature solution the way that chef works\nis that you write recipes that are\ncompiled into cookbooks and those\ncookbooks are the definition of how you\nwould set up a node and a node is a\nselection of servers that you have\nconfigured in a specific way so for\ninstance you may have apache linux\nservers running or you may have a my sql\nserver running or you may have a python\nserver running and chef is able to\ncommunicate back and forth between the\nnodes to understand what nodes are being\nimpacted and need to have instructions\nsent out to them to correct that impact\nyou can also send instructions from the\nserver to the nodes to make a\nsignificant update or a minor update so\nthis great communication going back and\nforth if we look at the pros and cons\nthe pros for chef is that there is a\nsignificant following for chef and that\nhas resulted in a very large collection\nof recipes that allow you to be able to\nquickly stand up environments there's no\nneed for you to have to learn complex\nrecipes the first thing you should do is\ngo out and find the recipes that are\navailable it integrates with git really\nwell and provides for really good strong\nversion control some of the consoles are\nreally around the learning speed it\ntakes to go from beginner user with chef\nto being an expert there is a\nconsiderable amount of learning that has\nto take place and it's compounded by\nhaving to learn ruby as the programming\nlanguage and the main server itself\ndoesn't really have a whole lot of\ncontrol it's really dependent on the\ncommunication throughout the whole\nnetwork all right let's look at our\nsecond contender puppet and puppet is\nactually in many ways very similar to\nchef there are some differences but\nagain puppet is designed to be able to\nsupport very large heterogeneous\norganization it is also built with ruby\nand uses dsl for writing manifests so\nthere are some strong similarities here\nto chef as with a chef there is a master\nslave infrastructure with puppet and you\nhave a master server that has the\nmanifests that you put together in a\nsingle catalog and those catalogs are\nthen pushed out to the clients of an ssl\nconnection some of the pros with puppet\nis that as with chef there is a really\nstrong community around puppies and\nthere's just a great amount of\ninformation and support that you can get\nright out of the gate it is a very well\ndeveloped reporting mechanism that makes\nit easier for you as an administrator to\nbe able to understand your\ninfrastructure one of the cons is that\nyou have to really be good at learning\nruby again as with chef you know the\nmore advanced tasks really need to have\nthose ruby skills and as with chef the\nserver also doesn't have much control so\nlet's look at our third contender here\nansible and so ansible is slightly\ndifferent it is the way the ansible\nworks is that it actually just pushes\nout the instructions to the server\nenvironment there isn't a client server\nor master slave environment where\nansible would be communicating backwards\nand forwards with its infrastructure it\nis merely going to push that\ninstructions out the good news is that\nthe instructions are written in yaml and\nyowell stands for yaml a markup language\nyaml is actually pretty easy to learn if\nyou know xml and xml is pretty easy if\nyou know xml you're going to get yammo\nreally well ansible does work very well\non environments where the focus is\ngetting servers up and running really\nfast it's very very responsive and can\nallow you to move quickly to get your\ninfrastructure up quick very fast and\nwe're talking seconds and minutes here\nreally really quick so again the way\nthat ansible works is that you put\ntogether a playbook and an inventory or\nyou have a playbook so the way that\nansible works is that you have a\nplaybook and the playbook it then goes\nagainst the inventory of servers and\nwill push out the instructions for that\nplaybook to those servers so some of the\npros that we have for ansible we don't\nneed to have an agent installed on the\nremote nodes and servers it makes it\neasier for the configuration yaml is\nreally easy to learn you can get up to\nspeed and get very proficient with yamo\nquickly the actual performance once you\nactually have your infrastructure up and\nrunning is less than other tools that we\nhave on our list now i do have to add a\nproviso this is a relative less it's\nstill very fast it's going to be a lot\nfaster than individuals manually\nstanding up servers but it's just not as\nfast as some of the other tools that we\nhave on this list and gamble itself as a\nlanguage while it's easy to learn it's\nnot as powerful as ruby ruby will allow\nyou to do things that at an advanced\nlevel that you can't do easily with the\nammo so let's look at our final\ncontender here salt stack so sort stack\nis a cli based tool it means that you\nwill have to get your command line tools\nout or your terminal window out so you\ncan actually manage the entire\nenvironment via salt sac the\ninstructions themselves are based on\npython but you can actually write them\nin yammer or dsl which is really\nconvenient and as a product it's really\ndesigned for environments that want to\nscale quickly and be very resilient now\nthe way that sort snap works is that you\nhave a master environment that pushes\nout the instructions to what they call\ngrains which is your network and so\nlet's step through some of the pros and\ncons that we have here with saltstack so\nsubsequent is very easy to use once it's\nup and running it has a really good\nreporting mechanism that makes your job\nas an operator in your devops\nenvironment much much easier the actual\nsetup though is a little bit tougher\nthan some of the other tools and and\nit's getting easier with the newer\nreleases but it's just a little bit\ntougher and related to that is that\nsaltstack is fairly late in the game\nwhen it comes to actually having a\ngraphical user interface for being able\nto create and manage your environment\nother tools such as ansible have\nactually had a ui environment for quite\nsome time all right so we've gone\nthrough all four tools let's see how\nthey all stack up next to each other so\nlet the race begin let's start with the\nfirst stage architecture so the\narchitecture for most of our\nenvironments is a server client\nenvironment so for chef puppet and salt\nsnack so very similar architecture there\nthe one exception is ansible which is a\nclient only solution so you're pushing\nout the instructions from a server and\npushing them out into your network and\nthere isn't a client environment that\nthere isn't a two-way communication back\nto that main client for what's actually\nhappening in your network so let's talk\nabout the next stage ease of setup so we\nlook at the four tools there is one tool\nthat really stands out for ease of setup\nand that is ansible it is going to be\nthe easiest tool for you to set up and\nif you are new to having these types of\ntools in your environment you may want\nto start with ansible just to try out\nand see how easy it is to create\nautomated configuration before looking\nat other tools now and so with that said\nchef puppet and socksec aren't that hard\nto set up either and you'll find there's\nactually some great instructions on how\nto do that setup in the online community\nlet's talk about the languages that you\ncan use in your configuration so we have\ntwo different types of language with\nboth chef and ansible being procedural\nin that they actually specify at how you\nactually supposed to do the task in your\ninstructions with puppet and sort stack\nit's decorative where you specify only\nwhat to do in the instructions let's\ntalk about scalability which tools scale\nthe most effectively and as you can\nimagine all of these tools are designed\nfor scalability that is the driver for\nthese kind of tools you want them to be\nable to scale to massive organizations\nwhat do the management tools look like\nfor our four contenders so again we have\na two-way split with ansible and sort\nstack the management tools are really\neasy to use you're gonna love using them\nthey're just fantastic to use with\npuppet and chef the management tools are\nmuch harder to learn and they do require\nthat you learn some either the puppet\ndsl or the ruby dsl to be able to be a\ntrue master in that environment but what\ndoes interoperability look like\nagain as you'd imagine with the similar\nto scalability interoperability with\nthese products is very high in all four\ncases\nnow let's talk about cloud availability\nthis is increasingly becoming more\nimportant for organizations as they move\nrapidly onto cloud services well both\nansible and softstack have a big fail\nhere neither of them are available in\nthe most popular cloud environments and\npuppet and chef are actually available\nin both amazon and azure now we've\nactually just haven't had a chance to\nupdate our chef link here but chef is\nnow available on azure as well as amazon\nso what does communication look like\nwith all of our four tools so the\ncommunication is slightly different with\nthem chef has its own knife tool and\nwhereas puppet uses ssl to secure\nsockets layer and ansible and saltsec\nuse secure socket hashing and ssh as\ntheir communication tool bottom line all\nfour tools are very secure in their\ncommunication so who wins well here's\nthe reality all four tools are very good\nand it's really dependent on your\ncapabilities and the type of environment\nthat you're looking to manage that will\ndetermine which of these four tools you\nshould use the tools themselves are open\nsource so go out and experiment with\nthem there's a lot of videos our team\nhas done a ton of videos on these tools\nand so feel free to find out other tools\nthat we have then covered so you can\nlearn very quickly how to use them but\nconsider the requirements that you have\nand consider the capabilities of your\nteam if you have ruby developers or you\nhave someone on your team that knows\nruby your ability to choose a broader\nset of tools becomes much more\ninteresting if however you're new to\ncoding then you may want to consider\nyaml-based tools again the final answer\nis going to be up to you and we'll be\nreally interested on what your decision\nis\nmonitoring as the term says you're\nmonitoring you're watching you're\nlogging your production environment so\nof course there are whole bunch of\nmonitoring tools so they become an\nimportant part of your production\nenvironment and a lot of these\nmonitoring tools are also i've seen them\nalso being used especially in your uac\nenvironment\nand\nyou can optionally have them for some\ntime even in your you know development\nenvironment\nno not not development different\ndevelopment services are usually not\nvery\nhigh-end configurations but you know\nmaybe a decent uh development slash\nintegration\nserver especially if you have uh long\nrunning scripts and if you have uh\nprograms that use a lot of\nservers uh you know maybe cpu or\nprocessing power so then you can have\nmonitoring tools when you're writing\nsuch scripts and you know\nuh you are\ndoing the uh unit testing for those\nscripts\nso that you know to see uh what kind of\nserver utilization\nhappens when you run this script you\nknow if you put this in production will\nit actually you know slow down your\nproduction server and what kind of uh\nimpact that will have on the you know\nyour rest of your application\nor other applications running on that\nserver\nbut the this particular chapter is more\nin context with production environment\nso these tools they basically monitor\nyour server they monitor your switches\nof course they monitor your application\nthen any services that you have deployed\non your\nservers\nand they generate alerts when something\ngoes wrong that's the whole job of\nmonitoring it is continuously watching\ncontinuously looking at what is running\nwhat is happening what is going up what\nis going down\nwhen is the cpu peaking when is memory\npeaking and all that so that you can\nyou typically send limits for these\nall these different parameters and\nanytime any of these parameters goes\noutside of that limit you know even more\nthan that or less than that\nthese monitoring tools usually send out\nan alert\nand these alerts could again be sms\nalerts or email alerts and there are\nthere are usually people monitoring\nthese monitoring tools\nto look look out for any\nissues reported\nand they also generate alerts when the\nproblem has been dissolved so it will\nwork both ways\nso nagios\nis an open source monitoring tool and it\ncan\neven monitor your network services\nthere's a little diagram here which\nis too small\nbut here is nadia somewhere what i can\nread\nand\nstatus\nthese are different devices\ni think no no no yeah these are\ndifferent devices to which nigeria's is\nsending the status there's a browser\nthere's an sms there's an email\nand then there's a graph also\nand these are different objects\nthat nigeria is basically monitoring\nthis is an smtp server i can read smtp\ni don't know tcpip no i don't know some\ndatabase server okay this is a database\nserver and this is an application server\ndo you switch router okay okay i can\nread that now so this is a different\nkind of object these are different kind\nof servers that nigeria's\nmonitors\nand\nthese are the different kind of uh\ndevices or statuses that it can send\nso it helps uh monitor your cpu usage\nyour disk usage and you know even your\nsystem logs\nand it uses a plug-in script that can be\nwritten uh you know in\nany scripting language actually\nthe naji is remote plugin executors are\nbasically agents that allow remote\nscripts\nto be executed as well and\nthese scripts are usually executed to\nmonitor\nagain\nyour cpu just use a number of users\nlogged in who is logged in who's logged\nin at what time logged out at what time\nand all these things\nso all these monitoring tools work on\nthe concept of polling\nso\npolling is more like you know they\nso the nrp agent is a program that will\ncontinuously keep polling a machine\nfor certain parameters that are\nconfigured\nin nadio's to be monitored so this\nprogram continuously keeps pinging the\nserver bringing the program\nuh you know to keep checking for what it\nhas been asked to check so in case of\nlogged in users you keep checking uh at\na you know like maybe every 30 seconds\nor every one minute\nyou keep pinging uh to see how many\nusers have logged in onto this server\nand who are the users who have logged in\nwhat time they're logged in what time\nthey logged out and things like that\nso now just pull agents on remote\nmissions this is what basically it means\nthat you have agent programs that can\nyou know help you\ncall\nor ping even remote machines\nthe nigeria's remote data processor is\nan agent that allows uh you know\nflexible data transport and you know it\nuses uh http and\nxml protocols to do that\nand we're talking about the\nessentially your databases and\ndata server usages like you know within\nif you have an oracle database how many\ndatabase instances are there you know\nhow\nyour load balancing is set up on that\nhow\ndata is moving\nbetween different uh\ndatabase servers within oracle\nand how\ndata is moving within the load balancers\nand\nthere's always a dip uh there's always a\nbackup with database so that's why you\nsee me mention trp as soon as i say the\nword database\nand\nif there's a\nbackup plan you know\nuh\nhow how's the data moving how much time\ndoes did the backup take did it take too\nmuch time\nand why you know why did it take so it\nhelps you do all those kind of\nmonitoring\nthe ns client is basically mainly used\nto monitor windows machines and\ntypically when we talk about servers\nwe end up\ntalking more about you know unix on\nlinux servers of course now with a lot\nof microsoft\ntechnologies being uh robust then they\nwere you know\nlike sharepoint or\nthings like that there are windows\nservers too but\n10 years ago if you\nwould talk about having a windows server\nit was actually\nkind of frowned upon especially for\nproduction\nand again you know this helps you\nmonitor as usual your cpu your this\nusage and it pulls the plug-in and this\nparticular\nagent listens to this particular port\nalways so that's a reserved port\nand usually your system administrators\nor server admin administrators know all\nthese things today let's get started\nwith jenkins jenkins in my opinion is\none of the most popular continuous\nintegration servers of recent times what\nbegan as a hobby project by a developer\nworking for sun microsystems way back in\nearly or mid 2000s has gradually and\neventually evolved into very very\npowerful and robust automation servers\nit has a wide adoption since it is\nreleased under mit license and is almost\nfree to use\njenkins has a vast developer community\nthat supports it by writing all kinds of\nplugins plugins is the heart and soul of\njenkins because using plugins one can\nconnect jenkins to anything and\neverything under the sun\nwith that introduction let's get into\nwhat all will be covered as a part of\nthis tutorial i will get into some of\nthe prerequisites required for\ninstalling jenkins post which i will go\nahead and install jenkins on a windows\nbox there are few first time\nconfiguration that needs to be done and\ni will be covering those as well so once\ni have jenkins installed and configured\nproperly i will get into the user\nadministrative part i create few users\nand i will use some plugins for setting\nup various kinds of access permissions\nfor these users i will also put in some\nfreestyle jobs freestyle job is nothing\nbut a very very simple job and i will\nalso show you the powerfulness of\njenkins by scheduling this particular\njob to run based upon time schedule i\nwill also connect jenkins with github\ngithub is our source code where source\ncode repository where i've got some\nrepositories put up there so using\njenkins i will connect to github pull up\na repository that is existing on github\nonto the jenkins box and run few\ncommands to build this particular\nrepository that is pulled from github\nsending out emails is a very very\nimportant configurations of jenkins or\nany other continuous integration server\nfor that matter whenever there is any\nnotifications that has to be sent out as\na part of either a build going bad or\nbuilt being good or built being\npropagated to some environment and all\nthese scenarios you would need the\ncontains integration servers to be\nsending out notifications so i will get\ninto a little bit details of how to\nconfigure jenkins for sending out emails\ni will also get into a scenario where i\nwill have a web application a maven\nbased java web application which will be\npulled from a github repository and i\nwill deploy it onto a tomcat server the\ntomcat server will be locally running on\nmy system eventually i will get into one\nother very very important topic which is\nthe master slave configuration it's a\nvery very important and pretty\ninteresting topic where distributed\nbuilds is achieved using a master slave\nconfiguration so i will bring up a slave\ni will connect the slave with the master\nand i will also put in a job and kind of\ndelegate that particular job to the\nslave configuration finally i will let\nyou know how to use some plugins to back\nup your jenkins so jenkins has got a lot\nof useful information set up on it in\nterms of the build environments in terms\nof workspace all this can be very very\neasily backed up using a plugin so this\nis what i'm going to be covering as a\npart of this tutorial jenkins is a web\napplication that is written in java and\nthere are various ways in which you can\nuse and install jenkins i have listed\npopular three mechanisms in which\njenkins is usually installed on in any\nsystem the topmost one is as a windows\nor a linux based services so if at all\nyou have windows like the way i have and\ni'm going to use this mechanism for this\ndemo so i would download a msi installer\nthat is specific to jenkins and install\nthis service so whenever i install it as\na service it goes ahead and nicely\ninstalls all that is required for my\njenkins and i have a service that can be\nstarted or stopped based upon my need\nany flavor of linux as well one other\nway of running jenkins is downloading\nthis generic warp file and as long as\nyou have jdk installed you can launch\nthis war file by the command opening up\na command prompt or shell prompt\ndifferently on linux box specifying java\nhyphen jar and the name of this war file\nit typically brings up your web\napplication and you know you can\ncontinue with your installation the only\nthing being if at all you want to stop\nusing jenkins you just go ahead and\nclose this prompt you either do a\ncontrol c and then bring down this\nprompt and your jenkins server would be\ndown other older versions of jenkins\nwere run popularly using this way in\nwhich you already have a java based web\nserver running up and running so you\nkind of drop in this war file into the\nroot folder or the httpd root folder of\nyour web server so jenkins would explode\nand kind of bring up your application\nall user credentials or user\nadministration is all taken care of by\nthe apache or the tomcat server or the\nweb server on which jenkins is running\nthis was a very older way of running but\nstill some people use it because if they\ndon't want to maintain two servers if\nthey already have a java web server\nwhich it's being nicely maintained and\nbacked up jenkins can run attached to it\nall right so either ways it doesn't\nmatter however you're going to bring up\nyour jenkins instance the way we're\ngoing to operate jenkins is all going to\nbe very very same or similar one with\nthe subtle changes in terms of user\nadministration if at all you're\nlaunching it through any other web\nserver which will take care of the user\nadministration otherwise all the\ncommands or all the configuration or the\nway in which i'm going to run this demo\nit is going to be same across any of\nthese installations all right so the\nprerequisites for running jenkins as i\nmentioned earlier jenkins is nothing but\na simple web application that is written\nin java so all that it needs is java\npreferably jdk 1.7 or 1.8 2gb ram is the\nrecommended ram for running jenkins and\nalso like any other open source tool\nsets when you install jdk ensure that\nyou set in the environment variable java\nhome to point to the right directory\nthis is something very specific to jdk\nbut for any other open source tools that\nyou've installed there's always a\npreferred environment variable that you\ngot to set in which is specific to that\nparticular tool that you are going to\nuse this is a generic thing that is\nthere for you know for any other open\nsource projects because the way open\nsource projects discover themselves is\nusing this environment variables so as a\ngeneral practice or a good practice\nalways set these environment variables\naccordingly so i already have jdk 1.8\ninstalled on my system but in case you\ndo not what i would recommend is just\nnavigate on your browser to the oracle\nhomepage and just type in or search for\ninstall\njdk 1.8\nand navigate to the oracle homepage\nyou'll have to accept the license\nagreement and there are a bunch of\ninstallers that is okay that you can\npick up based upon the operating system\non which you're running so\ni have this windows 64 installer that is\nalready installed and running on my\nsystem so i will not get into the\ndetails of downloading this or\ninstalling it let me show you once i\ninstall this what i've done with regard\nto my path\nso\nif you get into this environment\nvariables\nall right so i've just set in a java\nhome variable\nif you see this sequel and program files\njava jdk 1.8 this is where my my java is\nlocated c program files\nc program files java\nokay so this is the home directory of my\njdk so that is what i've been\ni've set it up here in my environment\nvariable\nso if you see here this is my java home\nall right one other thing to do is\nensure that in case you want to run java\nor java c from a command prompt ensure\nthat you also add that path into this\npath variable so if you see this\nsomewhere i will see yes there you go c\ncolon program files java jdk 1.8 pin so\nwith these two i'll ensure that my java\ninstallation is nice and you know good\nenough so to check that to double check\nthat or to verify that let me just open\nup a simple command prompt\nand if i type in java iphone version\nall right\nand java c\niphone version\nso the compiler is on the path java is\non the path and if i told i do this\neven the environment variable specific\nto my java is\ninstalled correctly so i'm good to go\nahead with my jenkins installation\nnow that i have my prerequisites\nall set for installing jenkins let me\njust go ahead and download jenkins\nso let me open up a browser and say\ndownload\njenkins\nall right lts is nothing but the long\nterm support these are all stable\nversions weeklies i would not recommend\nthat you try these unless until you have\na real need for that\nlong term support is good enough and as\ni mentioned there are so many flavors of\njenkins that is available for download\nyou also have a docker container\nwherein you know you can launch jenkins\nas a container but i'll not get into\ndetails of that in this tutorial\nall right so what i want is\nyes this is the war file which is a\ngeneric war file that i was talking to\nyou earlier and this is the windows msi\ninstaller so go ahead and download this\nmsi installer i already have that\ndownloaded so let me just open that up\nall right so this is my downloaded\njenkins instance\nor other installer this is a pretty\nmaybe a few months old but this is good\nenough for me\nbefore you start jenkins installation\njust be aware of one fact that there is\na variable called jenkins home this is\nwhere jenkins would store all this\nconfiguration data jobs project\nworkspace and all that specific to\njenkins so by default if at all you\ndon't set this to any particular\ndirectory if at all you install an msi\ninstaller all your installation gets\ninto c colon program files 86 and\njenkins folder if at all you run a war\nfile depending upon the user id with\nwhich you're running your war file the\njenkins folder there's a dot jenkins\nfolder that gets created inside the user\nhome directory so in case you have any\nneed wherein you want to backup your\njenkins or you want jenkins\ninstallations to get into some specific\ndirectories go ahead and set this\njenkins home variable accordingly before\nyou even begin your installation for now\ni don't need to do any of these things\nso i've already downloaded the installer\nlet me just go ahead with the default\ninstallation\nall right so this is my jenkins msi\ninstaller i would just i don't want to\nmake any changes into the jenkins\nconfiguration c colon program files is\ngood for me yeah this is where all my\ndestination folder and all the\nconfiguration specific to it goes i'm\nhappy with this i don't want to change\nthis\ni would just say go ahead and click\ninstallation\nokay so what typically happens once the\njenkins installation gets through is\nit'll start installing itself and there\nare some small checks that needs to be\ndone\nso and by default jenkins launches on\nthe port 8080 so let me just open up\nlocalhost 8080.\nthere's a small checking that will be\ndone as a part of the installation\nprocess wherein i need to type in the\nhash key all right so there's a very\nvery simple hash key that gets stored\nout here so i'll have to just copy this\npath\nif i told you you're running as a war\nfile you would see that in your\nlogs all right so this is a simple hash\nkey that gets created every time when\nyou do a jenkins station so as a part of\nthe installation it just asks you to do\nthis\nso\nif that is not great it will crib about\nit but this looks good\nso it's going ahead\nall right one important part during the\ninstallation\nso you would need to install some\nrecommended plugins\nwhat happens is the plugins are all\nrelated to each other so it's like the\ntypical rpm kind of a problem where you\ntry to install some plugin and it's got\na dependency which is not installed and\nyou get into all those issues in order\nto get rid of that what jenkins\nrecommends there's a bunch of plugins\nthat is already recommended so just go\nahead and blindly click that\ninstall recommended plugin so if you see\nthere is\na whole lot of plugins which are bare\nessential plugins that is required for\njenkins in order to run properly so\njenkins as a part of the installation\nwould get all these plugins and then\ninstall it for you\nthis is a good combination to kind of\nbegin with and mind you at this moment\njenkins needs\nlots of bandwidth in terms of network so\nin case your you know your network is\nnot so good few of these plugins would\nkind of fail\nand these plugins are all you know on\navailable on openly\nor or mirrored sites and sometimes some\nof them may be down so do not worry in\ncase some of these plugins kind of fail\nto install you'll get an option to kind\nof retry installing them but just ensure\nthat you know at least most or 1995 of\nall these plugins are installed without\nany problems let me pause the video here\nfor a minute and then get back once all\nthese plugins are installed\nmy plugin installation is all good there\nwas no failures in any of my plugins so\nafter that i get to create this first\nadmin user again this is one important\npoint that you got to remember\nkeen given any username and password but\nensure that you kind of remember that\nbecause it's very hard to get back your\nusername and password in case you forget\nit alright so i'm going to create a very\nvery simple username and password\nsomething that i can remember\ni will\nthat's my name and um an email id is\nkind of optional but it doesn't allow me\nto go ahead in case i don't so i just\ngiven an admin and i got a password i've\ngot i remember my password this is my\nfull name\nall right i say save and finish\nall right that kind of completed my\njenkins installation\nit was not that tough was it\nnow that i have my jenkins installed\ncorrectly let me quickly walk you\nthrough some bare minimal configurations\nthat is required these are kind of a\nfirst time configuration that is\nrequired so and also let me warn you the\nui is little hard for many people to\nwrap their head around it specifically\nthe windows guys but if at all you're a\njava guy you know how painful it is to\nwrite ui in java you will kind of\nappreciate you know all the effort that\nhas gone into the ui bottom line you are\na little hard to you know wrap your head\naround it but once you start using it\npossibly you'll start liking it\nall right so let me get into something\ncalled as managed jenkins\nthis can be viewed like a\nmain menu for all jenkins configuration\nso i'll get into some of those important\nones\nsomething called as configure system\nconfigure system this is where you kind\nof put in the configuration for your\ncomplete jenkins instance few things to\nkind of look out for this is a home\ndirectory this is a java home where all\nthe configurations all the workspace\nanything and everything regarding\njenkins is stored out here\nsystem message you want to put in some\nmessage on the system you just type in\nwhatever you want and it's probably show\nup somewhere up here on the menu number\nof executors very very important\nconfiguration\nthis just lets jenkin know at any point\nin time how many jobs or how many\nthreads can be run you can kind of\nvisualize it like a thread that can be\nrun on this particular instance as a\nthumb rule if at all you're on a single\ncore system number of executors two\nshould be good enough\nin case at any point in time there are\nmultiple jobs that kind of get triggered\nat the same time in case the number of\nexecutors are less compared to the\nnumber of jobs that have that woken up\nno need to panic because they will all\nget queued up and eventually jenkins\nwill get to running those jobs just bear\nin mind that whenever a new job kind of\nyou know gets triggered the cpu usage\nand the memory usage in terms of the\ndisk right is very high on the jenkins\ninstance\nso that's something that you got to kind\nof keep in mind all right but number of\nexecutors two for my system is kind of\ngood label for my jenkins i don't want\nany of these things usage how do you\nwant to use your jenkins this is good\nfor me because i only have a primary uh\nserver that is running so i want to use\nthis note as much as possible quite\npretty each of these options have got\nsome pair minimal\nhelp kind of a thing that is that is out\nhere by clicking on these question marks\nyou will get to know as to what are\nthese particular configurations\nall right so this all look good what i\nwant to show you here is there's\nsomething regarding the docker\ntimestamps git plugin svn\nemail notifications\ni don't want that what i want the yes i\nwant this smtp server configuration\nremember i mentioned earlier that i\nwould want jenkins to be sending out\nsome emails\nand what i've done here is i've just\nconfigured the smtp details of my\npersonal email id\nin case you're in a in organization you\nwould have some sort of an email id that\nis set up for a jenkins server so you\ncan specify the smtp server details of\nyour company so that you know you can\nauthorize jenkins to kind of send out\nemails\nbut in case you want to try it out like\nme i have configured my personal email\nid which is on my gmail for sending out\nnotifications so the smtp server would\nbe\nsmtp.gmail.com i'm using the smtp\nauthentication i have provided my email\nid and my password i'm using the smtp\nport which is 465 and i'm you know reply\nto address is the same as mine i can\njust send out an email\nand see if at all this configuration\nworks again gmail would not allow you to\nallow anybody to send out notifications\non your behalf so you'll have to lower\nthe security level of your gmail id so\nthat you can allow a programmatically\nsomebody to send out email notifications\non your behalf so i've done already that\ni'm just trying to see if i can send a\ntest email with the configuration that\ni've set in\nyes\nall right so the email configuration\nlooks good\nso this is how you configure your uh you\nknow your gmail account in case you want\nto do that if not put in your\norganization smtp server details which\nare for the valid username and password\nand it should all be set\nall right so no other configurations\nthat i'm going to change here all of\nthese look good\nall right so i come back to managing\nkens\nokay one other thing that i want to kind\nof go over is the global tool\nconfiguration\nimagine this scenario look at it this\nway jenkins is a is a continuous\nintegration server it doesn't know what\nkind of a code base it's going to pull\nin what kind of a tool set that is\nrequired or what is the code that is\ngoing to pull in and how is it going to\nbuild so you will have to put in all the\ntools that is required for building the\nappropriate kind of code that you're\ngoing to pull in from you know your\nsource code repositories so just to give\nyou an example in case your source code\nis a java source code and assuming that\nyou know because in this demo this is my\nlaptop and i've put in all the\nconfigurations jdk everything on my\nlaptop because i'm a developer i'm\nworking on the laptop but my continuous\nintegration server would be you know a\nseparate server without anything being\ninstalled on it so in case i want\njenkins to you know run a java code i\nwould need to install jdk on it i need\nto specify the jdk location of this out\nhere this way\nokay since i already have the jdk\ninstalled and i've already put in the\njava home directory or rather the\nenvironment variable correctly i don't\nneed to do it git if at all i want the\njenkins server to use git git is a you\nknow command\nbash or the command prompt for for\nrunning git and connecting to any other\ngit server so you would need git to be\nyou know installed on that particular\nsystem and set the path accordingly\ngradle and maven if at all you have some\nmavens as well you want to do this any\nother tool that you're going to install\non your system\nwhich is your continuous integration\nserver you will have to come in here and\nconfigure something\nin case you don't configure it when\njenkins runs it will not be able to\nfind these tools for building your task\nand it'll crib about it\nthat's good i don't want to save\nanything\nmanage jenkins let me see what else is\nrequired yes configure global security\nall right the security is enabled and if\nyou see by default it's the security\naccess control is set to jenkins own\nuser database so what does this mean you\nknow jenkins by default it uses file\nsystem where it stores all the user\nnames which hashes up these user names\nand kind of stores them\nso as of now it jenkins is configured to\nuse its own database assuming that you\nare running in an organization you would\nprobably want to have a you know some\nsort of an ad or an ldap server using\nwhich you would want to control access\nto your jenkins repository rather\njenkins tool\nso you would specify your ldap server\ndetails the root dn\npassword or the manager dn and the\nmanager password and all these details\nin case you want to connect your jenkins\ninstance with your\nldap or ad or any of the authentication\nservers that you have in your\norganization\nbut for now since i don't have any of\nthese things i'm going to use this own\ndatabase that's good enough\nall right so i will set up some\nauthorization methods and stuff like\nthat once i put in few jobs so for now\nlet me not get into any of these details\nof this just be aware that jenkins can\nbe connected for authorization to an\nldap server or you can have jenkins\nmanaging its own servers which is\nhappening as of now so i'm going to save\nall this stuff\nthat's good for me so enough of all\nthese configurations let me put in a\nvery very simple job\nall right so job new item you know a\nlittle difficult to kind of figure out\nbut then that's the new item so i'll\njust say you know first job this is good\nfor me i just give a name for my job i\nwould say it's a freestyle project\nthat's good enough for me i don't want\nto choose any of that so unless until\nyou choose any of this this particular\nbutton would not become active so choose\nthe freestyle project and say okay\nat a very high level you would see\ngeneral source code management build\ntriggers build environment build and\npost build in case you install more and\nmore plug-ins you will see a lot more\noptions but for now this is what you\nwould see so what am i doing at the\nmoment i'm just putting up a very very\nsimple job and the job could be anything\nand everything so i don't want to put in\na very complicated job for now for the\ndemo let me just put in a very very\nsimple job i'll give a description\nthis is an optional thing this is my\nfirst\njenkins job\nall right i don't want to choose any of\nthese again there are some helps\navailable here\ni don't want to choose any of this i\ndon't want to connect it into any source\ncode for now\ni don't want any triggers for now i'll\ncome back to this in in a while build\nthe environment i don't want any build\nenvironment as a part of this build step\nyou know i just want to you know run few\nthings so that i kind of complete this\nparticular job so since i'm on a windows\nbox i would say execute windows batch\ncommand\nall right so what do you want to do i\nwould let me just echo something echo\nuh hello\nthis is my first jenkins job\nand possibly i would want the date and\nthe time stamp\npertaining to the job i mean the date\nand time in which this job was run all\nright very very simple command that says\nyou know this is my first job it just\nputs out something along with the date\nand the time\nall right i don't want to do anything\nelse i want to keep this job as simple\nas this so let me\nsave this job\nall right so once i save this job you\nknow the job names comes up here and\nthen i need to build this job and you\nwould see some buildings tray out here\nnothing is there as of now because i've\njust put in a job i have not run it yet\nall right so let me try to build it now\nyou see a build number you would see a\ndate and a timestamp so if i click on\nthis you will see a console output if i\ngo here\nokay as simple as that\nand where is all the job details that is\ngetting into if you see this\nif i navigate to this particular\ndirectory\nall right so this is the directory what\ni was mentioning earlier regarding\njenkins home so all the job related\nstuff that is specific to this\nparticular jenkins installation is all\nhere\nall the plugins that is installed the\ndetails of each of those plugins can be\nfound here\nall right so the workspace is where all\nthe jobs that i've created whichever i'm\nrunning would be wrong there will be\nindividual folders specific to the jobs\nthat has been put up here all right so\none job one quick run\nthat's what it looks like pretty simple\nokay let me do one thing let me put up a\nsecond job\ni would say second job\ni would say freestyle project\nall right this is my second job\ni just want to demonstrate the\npowerfulness of the automation server\nand how simple it is to automate a job\nthat is put up on jenkins\nwhich will be triggered automatically\nremember what i said earlier about\njenkins because at the core of jenkins\nis a very very powerful automation\nserver alright so what i'm going to do i\nwill just keep everything else the same\ni'm going to put in the build script\npretty much similar to\nsecond job\nthat\ngets triggered\nautomatically\nevery\nminute all right let me do that\npercentage date\nand i'll put in the time\nall right so i just put in another job\ncalled second job and it pretty much\ndoes the same thing as what i was doing\nearlier in terms of printing the date\nand the time but this time i'm just\ngoing to demonstrate the powerfulness of\nthe automation server that is there if\nyou see here there's a build trigger\nso a build can be triggered using\nvarious triggers that is there so we'll\nget into this github uh triggering or\nhook or a web hook kind of a triggering\nlater on but for now what i want to do i\nwant to ensure that this job that i'm\ngoing to put in would be automatically\ntriggered on its own let's say every\nminute i want this job to be run on its\nown\nso build periodically is my setting\nif you see here there's a bunch of\nhelp that is available for me so for\nthose of you who have written cron jobs\non linux boxes you'll find it very very\nsimple but for others don't panic let me\njust put up a very very simple regular\nexpression for scheduling this job every\nminute\nall right so that's\none\ntwo\nthree four\nfive all right come up come up come up\nall right so five stars is all that i'm\ngoing to put in and jenkins got a little\nworried and he's asking me do you really\nmean every minute oh yeah i want to do\nthis every minute let me save this and\nhow do i check whether it gets triggered\nevery minute or not i just don't do\nanything i'll just wait for a minute\nand if at all everything goes well\njenkins would automatically trigger my\nsecond job in a minutes time from now\nthis time around i'm not going to\ntrigger anything look there you see\nit's automatically got trigger\nif i go in here\nyep second job that gets triggered\nautomatically you know it was triggered\nat 42\n1642 which is 442 my time that looks\ngood\nand if everything goes well every one\nminute onwards this jog would be\nautomatically triggered\nnow that i have\nmy jenkins up and running a few jobs\nthat has been put up here on my jenkins\ninstance i would need a way of\ncontrolling access to my jenkins server\nthis is wherein i would use a plugin\ncalled role based access plugin and\ncreate few rules the rules are something\nlike a global rule and a project rule\nproject specific growth i can have\ndifferent roles and i can have users who\nhave signed up or the users who might\ncreate kind of assigned to these roles\nso that each of these users fall into\nsome category this is my way of kind of\ncontrolling access to my jenkins\ninstance and\nensuring that people don't do something\nunwarranted all right so first things\nfirst let me go ahead and install a\nplugin\nfor doing that so i get into manage\njenkins and manage plugin\na little bit of a confusing screen in my\nopinion there is updates available\ninstalled in advanced as of now we don't\nhave the role based plugin so let me go\nto available it'll take some time for it\nto get refreshed all right now these are\nthe available plugins these are the\ninstall plugins\nall right so let me come back to\navailable and i would want to search for\nmy role based access plugin so i would\njust search for role and hit enter\nokay role based authorization strategy\nenables user authorization using a role\nbased strategy roles can be defined\nglobally or for particular jobs or nodes\nand stuff like that so exactly this is\nthe plugin that i want\ni would want to install it without a\nrestart\nall right looks good so far\nyes\ngo back to the top of the page yes\nremember jenkins is running on a java\nusing a java instance so typically many\nthings would work the same way unless\nand until you want to restart jenkins\nonce in a while but as a good practice\nwhenever you do some sort of a big\ninstallations or big patches on your\njenkins instance just ensure that you\nkind of restart it otherwise there would\nbe a difference in terms of what is\ninstalled on the system and what is\nthere on the file system you will need\nto flush out few of those settings later\non but for now these are all very small\nplugins so this would run without any\nproblems but otherwise if at all there\nare some plugins which would need a\nrestart you know kindly go ahead and\nrestart your jenkins instance but for\nnow i don't need that it looks good i've\ninstalled the plugin so where do you see\nmy plugin i installed the plugin that is\nspecific to the\nuser control or the access control so\nlet me go into\nyes\nglobal security\nand i would see this role-based strategy\nshowing up now\nall right so this comes in because of my\ninstallation of my role-based plugin so\nthis is what i would want to enable\nbecause i already have my own database\nset up and for the authorization part in\nthe sense that who can do what i'm going\nto install i mean i've already installed\na role based strategy uh plugin and i'm\ngoing to enable that strategy all right\ni would say save\nokay now i've installed the role based\naccess plugin i would need to just set\nit up and check that you know i would go\nahead and create some roles and ensure\nthat i assign users as per these roles\nall right so let me go to\nmanage jenkins\nconfigure\nall right let me see where is this\nconfigure configure global security is\nthat where i create my roles\nnope not here\nyes manage and assign roles\nokay again you would see these options\nonly after you install these plugins so\nfor now i've just enabled the plugin i\nhave enabled role based access control\nand i would go ahead and create some\nrules for this particular jenkins\ninstance so i would say first\nmanage rules\nso i would need to create some roles\nhere and the rules are at a very high\nlevel these are global rules and there\nare some project rules and there are\nsome slave rules i'll not get into\ndetails of all of this at a very very\nhigh level which is a global role let me\njust create a role a role can be kind of\nvisualized like a group so i would\ncreate a role called developer typically\nthe jenkins instance or the ca instance\nare kind of owned up or controlled by qa\nguys so qr guys would need to provide\nsome sort of you know limited access to\ndevelopers so that's why i'm creating a\nrole called developer\nand i'm adding this role at a global\nrole level so i would say add this here\nand you would see this developer role\nthat is there and each of these options\nif we hover over it you would see some\nsort of a\nhelp on what what are these you know\npermissions specific to so what i want\nis like you know it sounds a little\ndifferent but i would want to give very\nvery little permissions for the\ndeveloper so from an administration\nperspective i would just want him to\nhave a read um kind of a role\ncredentials again i would just want to\nview kind of a rule i don't want him to\ncreate any agents and all that stuff\nthat looks good for me\nfor a job i would want him to just\npossibly\nread i don't want him to build i don't\nwant him to cancel any jobs i don't want\nhim to configure any job i don't even\nwant him to create any job i would just\nwant him to read few things i would not\ngive him possibly a role to the\nworkspace as well i mean i don't want\nhim to have access to the workspace i\nwould just want him to\nread a job\nor check you know have read-only access\nto the job run um no i don't want him to\ngive him any any particular\naccess which will allow him to run any\njobs view configure\nyeah possibly create yeah\ndelete i don't want to read yes\ndefinitely\nand this is the specific role so what\ni'm doing i'm just creating a global\nrole called developer and i'm giving him\nvery very limited roles\nin the sense that i don't want this\ndeveloper to be able to run any agents\nnor create jobs or build jobs or cancel\njobs or configure jobs at the max i\nwould just want him to read a job that\nis already put up there\nokay\nso i would save\nnow i created a role\ni still don't have any users that is\nthere on the system so let me go ahead\nand create some user on the system\nthat's not here i will say configure\nmanage and cans manage users\nokay let me create a new user\ni would call this user as yeah\ndeveloper1 sounds good\nsome password\nsome password that i can remember\nokay his name is developer1\nd at\nd.com or something like that\nokay so this is the admin with with\nwhich i kind of configured or brought up\nthe system and developer1 is a user that\ni have configured so still have not set\nany rules for this particular user yet\nso i would go to manage and gains\ni would say\nmanage and assign roles i would say\nassign rules\nokay so if you see what i'm going to do\nnow is assign a role that is specific to\nthat particular i will find the\nparticular user and assign him the\ndeveloper role that i have already\nconfigured\nthe role shows up here i would need to\nfind my user whoever created and then\nassign him to that particular role so if\nyou remember the user that i created was\ndeveloper1 i would add this particular\nuser and now this particular user what\nkind of a role i want him to have\nbecause this is the global rule that had\ncreated so developer i would assign this\ndeveloper 1 to this particular global\nrule and i would go ahead and save my\nchanges\nnow let me check the permissions of this\nparticular user by logging out of my\nadmin account and logging back as\ndeveloper one\nif you remember this role was created\nwith very less privileges\nso\nthere you go i have jenkins but i don't\nsee a new item i can't trigger a new job\ni can't do anything i see these jobs\nhowever i don't think so i'll be able to\nstart this job i don't have the\npermission set for that the maximum i\ncan do is look at the job see what was\nthere as a part of the console output\nand stuff like that so this is a limited\nrole that was created and i added this\ndeveloper to that particular role which\nwas a developer role\nso that the developers don't get to\nconfigure any of the jobs because the\njenkins instance is owned by a qr person\nhe doesn't want to give developer any\nadministrative rights so the rights that\nhe set out by creating a developer role\nand anybody who is tagged any user who\nis tagged as a part of this developer\nrole would get the same kind of\npermissions and these permissions can be\nyou know fine grain it can be a project\nspecific permissions as well but for now\ni just demonstrated the high level\npermission that i had set in\nlet me quickly log out of this user and\nget back\nas the admin user because i need to\ncontinue with my demo with the developer\nrole that was created i have very very\nless privileges one of the reasons for\njenkins being so popular as i mentioned\nearlier is the bunch of plugins that is\nprovided by users or community users who\ndon't charge any money for these plugins\nbut it's got plugins for connecting\nanything and everything so if you can\nnavigate to or if you can find jenkins\nplugins\nyou would see index of over so many\nplugins that is there all of these are\nwonderful plugins whatever connectors\nthat you would need if you want to\nconnect jenkins to an aws instance or\nyou want to connect jenkins to a docker\ninstance or any of those containers you\nwould have a plugin you can go and\nsearch up if i want to connect jenkins\nto bitbucket\nbitbucket is one of the git servers\nthere's so many plugins that is\navailable okay so bottom line jenkins\nwithout plugins is nothing so plugins is\nthe heart of jenkins for you to connect\nor for in order to connect jenkins with\nany of the containers or any of the\nother tool sets you would need the\nplugins if you want to connect or you\nwant to build a repository which has got\njava and maven you would need to install\nmaven and jdk on your jenkins instance\nif at all you're looking for a net build\nor a microsoft build you would need to\nhave ms build installed on your on your\njenkins instance and the plugins that\nwill trigger ms build if at all you want\nto listen to some server side web hooks\nfrom github you will need github\nspecific plugins if you want to connect\njenkins to aws you need those plugins if\nyou want to connect to a docker instance\nthat is running anywhere in the world as\nlong as you have the url which is\npublicly reachable you just have a\ndocker plug-in that is installed on your\njenkins instance sonarcube is one of the\npopular static code analyzers so you can\nconnect a jenkins build you can build a\njob on jenkins and push it to sonar cube\nand get sonar cube to run analysis on\nthat and get back the results in jenkins\nall of these works very well because of\nthe plugins now with that let me connect\nour jenkins instance to github i already\nhave very very simple java repository up\non my github instance so let me connect\njenkins to this particular github\ninstance and pull out a job that is put\nup there all right so this is my very\nvery simple uh you know repository there\nis there called hello java and this is\nwhat is there in the repo there is a\nhello hello.java application that is\nhere or a simple class file that is\nthere it's got just one line of system\ndot out so this is already present on\ngithub.com at this place and this would\nbe the url for this uh repository\nif i pick up the https url this is my\nsteepest url so what i would do is i\nwould connect my jenkins instance to go\nto github provide my credentials and\npull out this repository which is on the\ncloudhostedgithub.com\nand get it to my jenkins instance and\nthen build this particular java file\ni'm keeping the source code very very\nsimple it's just a java file how do i\nbuild my java file how do i compile my\njava file i just say java c and the name\nof my\nclass file which is hello java and how\ndo i run my java file i would say java\nand hello\nokay so remember i don't need to install\nany plugins now because uh what it needs\nis a git plugin so if you remember when\nwe were doing the installation there was\na bunch of recommended plugins so git is\nalready installed on my system so i\ndon't need to install it again so let me\nput up a new job here it says get job\nlet it be a freestyle project that's\ngood for me i would say okay\nall right so the source code management\nremember in the earlier examples we did\nnot use any source code because we were\njust putting up some echo kind of uh\njobs we did not need any integration\nwith any of the source code systems so\nnow let me connect this so i'm going to\nput up a source code and git would show\nup because the plugin is already there\nsvn performs any of those additional\nsource code management tools if at all\nyou would need just install those\nplugins and jenkins connects wonderfully\nwell to all these particular source\ncontrol tools okay so i would copy the\nhttps url from here i would say this is\nthe url that i'm supposed to\ngo and grab my source code from but all\nright that sounds good but what is the\nusername and password so i'll have to\nspecify a username\nand password all right so i would say\nthe username this is my username and\nthis is my https credential for my job\nokay so this is my username and this is\nmy password i just save this i say add\nand then i would say you know use this\ncredentials to go to github and then on\nmy behalf pull out a repository all\nright if at all at this stage if there's\nany error in terms of not able to\njenkins not able to find git or the git\ndot exe or if my credentials are wrong\nsomewhere down here you would see a red\nmessage saying that you know something\nis not right you can just go ahead and\nkind of fix that for now this looks good\nfor me i'm going to grab this\nurl what am i going to do\nthis step would pull the source code\nfrom the github\nand then what would be there as a part\nof my build step\nbecause this repository just has a java\nfile correct hello.java so in order to\nfor me to build this i would just say\nexecute windows batch command and i\nwould say java c\nhello dot\njava that is the way i would build my\njava code and if i have to run it i\nwould just say java\nhello pretty simple two steps and this\nwould run after the repository contents\nare fetched from github\nso java c java that sounds good i would\nsay save this\nand let me try to run this\nokay if you see\nthere's a lot of you know it executes\ngit on your behalf it goes out here it\nprovides my credentials and says you\nknow it pulls all my repository and by\ndefault it will pull up the master\nbranch that is there on my repository\nand it kind of builds this whole thing\njava c hello java and it runs this\nproject java hello and there you see\nthis is the output that is there and if\nat all you want to look at the contents\nof the repository if you can go here\nthis is my\nworkspace\nof my system hang on this is not right\nokay good job if you see here this is my\nhello.java this is the same program that\nwas there on my github repository\nokay so this is a program that was there\non\ngithub repository all right so this was\nthe same program that was here and\njenkins on our behalf went over all the\nway to github pulled this repository\nfrom there and then you know it brought\nit down to my local system on my jenkins\ninstance it compiled it and it ran this\nparticular application\nokay now that i've integrated jenkins\nsuccessfully with github for a simple\njava application let me build a little\nbit on top of it what i will do is i\nhave a maven based web application that\nis up there as a repository in my\ngithub so this is the repository that\ni'm talking about it's called amv and\nweb app it's got it's a maven based\nrepository as you would know maven is a\nvery very simple java based\nbuild tool that will allow you to run\nvarious targets and it will compile it\nwill based upon the goals that you\nspecify it can compile it can run some\ntests and you can you can build a war\nfile and even deploy it into some other\nserver for now what we're going to use\nmaven is just for building and creating\na package out of this particular web\napplication it contains a bunch of\nthings and what is important is just the\nindex.jsp it just contains an html file\nthat is there as a part of this web\napplication so from a perspective of\nrequirements now since i'm going to\nconnect jenkins with this particular\nrepository get we already have that set\nwe only need two other things one is\nmaven because jenkins will use maven so\nin order to use maven jenkins would have\nto have a maven installation that is\nthere on the jenkins box and in this\ncase the jenkins box is this laptop\nand after i have my maven installed i\nalso need a tomcat server tomcat is a\nvery very simple web server that you can\nfreely download i'll let you know how to\nquickly uh download and install the\ntomcat all right so download maven first\nthe various ways in which you can kind\nof download this maven there is zip\nfiles\nbinary zip files and archive files so\nwhat i've done is i've just already\ndownloaded maven and if you see i've\nunzipped it here so this is the folder\nwith which i have unzipped my maven so\nas you know maven again is is one open\nsource build tool so you'll have to set\nin a few configurations and set up the\npath so mvn hyphen iphone version if i\nspecify this after i set in my path my\none should work and if at all i echo m2\nhome which is nothing but the variable\nenvironment variable specific to my\nonenote it is already set here\nso once you unzip my one just set this\nm2 home variable to the directory where\nyou unzip your mi1 also just set the\npath to this particular directory slash\nbin because that is where your maven\nexecutables are all found\nall right so that's with maven and you\nknow since i've set the path and the\nenvironment variable maven is running\nperfectly fine on my system i just\nverified it okay next one is a tomcat\nserver\ndownload apache tomcat\nserver 8.5 is what i have on my system\nso i'm just going to show you where to\ndownload this from\nthis is where you download tomcat server\nand um\ni already have the server downloaded\nagain this doesn't need any installation\ni just unzip it here and it kind of has\na bin and configuration i have made some\nsubtle changes in the configuration\nfirst and foremost tomcat server also by\ndefault runs on port 8080 since we\nalready have our jenkins server running\non port 8080 we cannot let tomcat run on\nthe same port there will be a port clash\nso what i've done i have configured\ntomcat to use a different port so if i\ngo to this configuration file here there\nis a server.xml\nlet me open this up here\nall right okay so this is the port by\ndefault it will be 8080 i've just\nmodified it to 8081. so i've changed the\nport on which my tomcat server would run\nall right so that's one chain second\nchange when jenkins kind of tries to get\ninto my tomcat and deploy something for\nsomeone he would need some\nauthentications so that he'll be alloyed\ndeployment by tomcat so for that i need\nto create a user on tomcat and provide\nthis user credentials to my jenkins\ninstance\nso i would go to\ntomcatusers.xml file here\ni've already created\na username called deployer and the\npassword is deployer and i've added a\nrole called manager hyphen script\nmanager hyphen script will allow\nprogrammatic access to the tomcat server\nso this is the role that is there so\nusing this credentials i will enable or\ni'll empower jenkins to get into my\ntomcat server and deploy my application\nall right only these two things that is\nrequired\nlet me just start my tomcat server first\nso i get into my bin folder i open a\ncommand prompt here and there's a\nstartup.bat\nit's pretty fast it just takes a few\nseconds yes there you go tomcat server\nis up and running now this is running on\nport 8081 so let me just check if that\nlooks good\nso localhost\n8081.\nokay my tomcat server is up and running\nthat sounds good the user is already\nconfigured on this that's also fine so\nwhat i'll do as a part of my first job\nmy one is also installed on my system so\ni'm good to use maven as a part of my\njenkins so i will put up a simple job\nnow\ni will say job\nmbn\nweb app i'll call this\nfreestyle job that's good\nokay so this will be a git repository\nwhat is the url of my git repository is\nthis guy https url\nokay\nthat's this url i will use the\ncredentials the old credentials that i\nset up will work well because it's the\nsame git user that i'm kind of\nconnecting into\nall right so now the change happens here\nwhere after i get this since i said this\nis a simple maven repository i will have\nsome maven targets to run\nso the simple target first is\nlet me run maven package this creates a\nwar file\nokay so mvn package is the target\npackage is the target so when whenever i\nrun this package it kind of creates it\nit builds it it tests it and then\ncreates a package so this is all that is\nrequired maybe let me try to save this\nand let me first run this and see\nif it connects well if there's any\nproblem with my war file or the war file\ngets created properly\nokay\nwonderful\nso it built a war file and if you see it\nall shows you\nwhat is the location where this war file\nwas generated\nso this will be the workspace if you see\nthis this war file was successfully\nbuilt now i need to grab this particular\nwar file and then i would need to deploy\nit into tomcat server\nagain i would need a small plugin to do\nthis because i need to connect tomcat\nwith my jenkins server\nlet me go ahead and\ninstall the plugin for the container\ndeployment so i will go to manage\nplugins\navailable\ntype in container\ncontainer container\ndeploy to container okay so let's put\nthis the plugin that i would need i will\ninstall it without a restart\nright seems to be very fast\nnope sorry it's still installing\nokay\nit installed the plugin so if at all you\nsee this\nif you go to my workspace\nokay in the target folder\ni would see this web application war\nfile that is already built\nso i would need to configure this plugin\nto pull up this war file and deploy it\nonto the tomcat server for deploying\nonto the tomcat server i will use the\ncredentials of the user that i've\ncreated\nokay so let me go to configure this\nparticular project again\nand um\nokay all this is good\nso the package is good i'm gonna just\ncreate a package that's all fine\nnow\nadd a post build step\nso after the war file is built as a part\nof this package directive let me use\nthis\ndeployment to container now this will\nshow up after you install the plugin so\ndeploy this one to the container\nnow what is that you're supposed to\nspecify you're supposed to specify the\nwhat is the location\nokay so this is a global uh you know\nconfiguration that is there that will\nallow you to\nfrom the root folder it will pick up the\nwar file that is there so star star\nforward slash star dot war that's good\nfor me\nokay what is the context path context\npath is nothing but just the name of an\napplication that you know under which it\nwill get deployed into the tomcat server\ni will just say mvn web app that's the\nname of my thing now i need to specify\nwhat kind of a container that i'm\ntalking about\nall right so the deployment would be for\nthis tomcat 8.5 is what i need\nokay because the server that we have is\na tomcat 8.5 server that i have so this\nwould be the url so the credentials yes\ni need to add a credential for this\nparticular\nserver so if you remember i had created\na credential\nfor my web application so let me just\nfind that\nmy tomcat server yes configuration of\nthis\nokay so deployer and deployer username\nis deployer password is deployer\nokay so let me use that credential\ni would say i would say add a new\ncredential jenkins credential the\nusername is deployer and the password is\ndeployer\nso i would use this deployer credentials\nfor that and what is the url of my\ntomcat instance\nso this is the url of my tomcat instance\nso take the war file that is find found\nin this particular\nfolder\nand then you know context path is map\nuse the deployer deployment credentials\nand get into this local host which is\nthere\n8081 this is the tomcat server that is\nrunning on my system and then go ahead\nand deploy it\nokay so that is all that is required so\ni would say just save this\nand let me run it now\nokay it builds successfully built the\nwar file it is trying to deploy it and\nuh looks like the deployment went ahead\nperfectly well\nso\nthe context path was mvn web app so if i\ntype in this\nall right if at all i go ahead into my\ntomcat server there would be a web apps\nfolder\nyou would see the\nyou know the date timestamp so this is\nthe file that get got recently copied\nand this is the explorer version of our\napplication\nso the application was built the source\ncode of this application was pulled from\nthe github server it was built locally\non the jenkins instance and then it was\npushed into a tomcat server which is\nrunning on a different port which is\n808.1 now for this demo i'm running\neverything locally on my system but\nassuming that you know this particular\ntomcat instance was running on\nsome other server with some other\ndifferent ip address all that you've got\nto go and change is the url of the\nserver\nso this would be the server in case you\nyou already have that you know if you\nhave a tomcat server which is running on\nsome other machine that's all fine with\na different ipa that's all good enough\nthe whole bundle or the war file that\nwas built as a part of this jenkins job\ngets transferred onto the other server\nand gets deployed that's the beauty of\njenkins and automatic deployments or\nother deployments using jenkins and\nmaven\ndistributed build or master slave\nconfiguration in jenkins as you would\nhave seen you know we just have one\ninstance of jenkins server up and\nrunning all the time and also i told you\nthat whenever any job that kind of you\nknow gets started on the jenkins server\nit is little heavy on in terms of disk\nspace and the cpu utilization so which\nkind of you know if at all you're in an\norganization wherein you're heavily\nreliant on the jenkins server you don't\nwant your jenkins server to go down so\nthat's wherein you kind of start\ndistributing the load that is there on\nthe jenkins server so you primarily have\na server which is just a placeholder or\nlike a master will take in all the kind\nof jobs and what he'll do is based upon\ntrigger that has happened to the job or\nwhichever job needs to be built he if at\nall he can delegate these jobs onto some\nother machines or some other slaves you\nknow that's a wonderful thing to have\nokay use case one use case two assuming\nthat you know if you have a jenkins\nserver that is running on a windows box\nor on a linux one and if at all you have\na need where you need to build based\nupon operating systems you have multiple\nbuild configurations to support maybe\nyou need to build a windows you know\nwindows based dot net kind of a projects\nwhere you would need a windows machine\nto build this particular project you\nalso have a requirement where you want\nto build linux linux based systems you\nalso have a mac you you support some\nsort of apps or something that is built\non mac os you would need to build you\nknow mac based system as well so how are\nyou going to support all these needs so\nthat's where in a beautiful concept of\nmaster slave or you know primary and\ndelegations or agent and master comes\ninto play so typically you would have\none jenkins server who will just you\nknow configure with all the proper\nauthorizations users configurations and\neverything is set up on this jinkin\nserver his job is just delegations he\nwill listen to some sort of triggers or\nbased upon the job that is coming in he\nwill if there's a way nice way of\ndelegating these jobs to somebody else\nand you know taking back the results he\ncan control a lot of other systems and\nthese systems may not have a complete or\nthere's no need to put in a complete\njenkins installation all that you got to\ndo is have a very very simple runner or\na slave that's a simple jar file that is\nrun as a low priority thread or a\nprocess within these systems so with\nthat you can have a wonderful\ndistributed build server that can be set\nup and in case one of the servers goes\ndown your master would know that what\nwent down and kind of delegate the task\nto somebody else so this is the kind of\ndistributed build or the master slave\nconfiguration so what i'll do in this\nexercise or in this demo is i will set\nup a simple slave but since i don't have\ntoo many machines to kind of play around\nwhat i'll do is i will set up a slave in\nin one other folder within my hard drive\nso i've got the c drive and d drive my\njenkins is on my c drive so what i do is\ni would just use my e drive and set up a\nvery very simple slave out there i'll\njust show you how to provision a slave\nand how to connect to a slave and how to\ndelegate a job to that slave let me go\nback to my jenkins master and configure\nhim to you know talk to an agent\nso there are various ways in which this\nclient and server talk to each other\nwhat i'm going to choose is something\ncalled as jnlp java network launch\nprotocol so using this i would ensure\nthat you know the client and server talk\nto each other so for that i need to\nensure that i kind of enable this jnlp\nport so let me try to find out where is\nthat let me try this\nokay yes\nagents and by default this jlp agent's\nthing would be disabled so if you see\nhere there's a small help on this\nso i'm going to use this jnlp which is\nnothing but java network launch protocol\nand you know i'll configure the master\nand server to talk to each other using\njlp so for that i need to enable this\nguy so i enable this guy instead of\nmaking the by default the configuration\nwas disabled so i make him random i make\nhim you know enabled and i say save this\nconfiguration\nall right so now configured or made a\nsetting for the master\nso that the jlp\nport is kind of opened up so let me go\nahead and\nyou know create an agent\nso i'll go to manage nodes so if you see\nhere there's only one master here so let\nme provision a new node here so this is\nthe way you know in which you bring up a\nnew node you have to configure it on the\nserver jenkins would put in some sort of\nsecurity around this particular\nagent and let you know how to launch\nthis particular engine so that he can\nconnect to our jenkins master so i would\nsay new node i would give a name for my\nnode i would say windows\nnode because both of these are windows\nonly so that's fine i just give an\nidentifier saying that windows note i\nwould say this is a permanent agent i'll\nsay okay\nso if you see the name let me just copy\nthis name here with the description\nnumber of executors since it's a slave\nnode and both of these are running on my\nsystem i'll keep the number of executors\nas one that's fine remote root directory\nnow this is where let me just clarify\nthis since i have both my\nmy master is running on my c drive c\ndrive program files 86\non not 86\nc column program files\nit is indeed 86\nall right jenkins so this is where my\nmaster is running so i don't want the c\ndrive what i'll do is i'll use something\ncalled as a drive i have another drive\nin my system but please visualize this\nlike you know you're running this on a\nseparate system altogether\nso i create a folder here called jenkins\nnode and this is where i'm going to\nplace my or i'm going to provision my\nslave\nand i'm going to run him from here so\nthis is the directory in which i'm going\nto provision my slave node so i'm going\nto copy this here and that is the remote\nroot directory of your particular agent\nor slave so i just copied here the label\nyou know probably this is fine for me\nand usage\nhow do you want to use this guy\nso i would don't want him to run all\nkinds of jobs i will only build jobs\nwith label expressions that match this\nparticular node and so this is the label\nof this node so in order for somebody to\nkind of delegate any task to them\nthey'll have to specify this particular\nlabel\nso imagine this way if i have a bunch of\nwindows system i name it as windows star\nanything that says from windows i can\ngive a regular expression and say that\nanything that matches windows run this\nparticular task there if i have some mac\nmachines i name all these mac agents as\na mac star or something like that and i\ncan delegate all tasks you know saying\nthat start with whatever starts with mac\nand this node run the mac jobs there\nso you identify a node using the label\nand then delegate the task there\nall right so launch method you know we\nwill use java web start because we're\ngoing to\nwe we're going to use jnlp protocol okay\nthat sounds good directory i think\nnothing else is required availability\nyes we'll keep this agent yep online as\nmuch as possible that sounds good all\nright let me save this\nall right i'm just provisioning this\nparticular node now\nso if i click on this node i get a bunch\nof commands\nalong with an agent.jar\nso this is the agent.jar that has to be\ntaken down to the other machine or the\nslave node and from there i need to run\nthis along with a small security\ncredential so let me copy this whole\ntext here in my notepad\nnot bad plus plus is good for me\nokay i copy this whole\npath there i also want to download this\nagent.jar\ni would say yes\nthis agent.jar is the one that is\nconfigured by our server so all the\ndetails that is required for launching\nthis agent.jar is found in this\nsorry for launching this agent is found\nis agent.jar so typically i need to\ntake this jar file onto the other system\nand then\nkind of run it from there so\ni have this alien.jar i copy this or i\ncut this i come back to my folder my\njenkins node i paste it here\nokay so now with this provisionagen.jar\nand i need to use this whole command\ncontrol a control c and then launch this\nparticular agent so let me\nbring up a command prompt right here\nand then launch that so i'm saying in\nthe same folder where there is agent.jar\ni'm going to launch this a particular\nagent java hyphen jar agent.jar jnlp\nthis is the url of my server in case the\nserver and client are on different\nlocations or different ips let us\nspecify the ipad address all this anyway\nwould show up\nand then the secret and you know the\nroot folder of your jenkins or the slave\nnode\nokay\nso\nsomething ran and then you know it says\nit's connected very well it seems to\nconnected very well so let me come back\nto my\njenkins instance\nand see you know if you told me you see\nearlier this was not connected now let\nme refresh this guy\nokay now these two guys are connected\nprovision are jenkins node and then i\ncopied all the credentials or the\nslave.jar along with the launch code and\nthen took it to the other system and\nkind of\nran it from there since i don't have\nanother system i've just got a separate\ndirectory in another folder another\ndrive and i'm launching the agent from\nhere as long as this particular agent is\nup and running or this command prompt is\nup and running the agent would be\nconnected so once i close this the\nconnection goes down\nall right so successfully you've\nlaunched this particular agent now this\nwould be the home directory of this\njenkins node or the jenkins slave so any\ntask that i'm going to delegate to this\nparticular slave would all be run here\nit'll create a workspace right here all\nright so good\nso let me just come back and let me kind\nof put up a new task here i will say\nthat you know delegate job is good i say\nfreestyle project i'm going to create a\nvery very simple job here\ni don't want it to connect to gate or\nanything like that let me just create a\nvery very simple\necho\nrelegated to the\nslave negative two i don't like the word\nslave delegated to\nagent\nput this way\nall right so delegated to agent sounds\ngood now how am i going to ensure that\nthis particular job\nruns on the agent or on the slave that i\nhave configured\nright you see this if at all you\nremember how we provisioned our\nparticular slave we give a label\nright so now\ni'm going to put in a job that will only\nmatch this particular label\nso i'm going to say that whatever\nmatches this you know windows label run\nthis job on that particular node so we\nhave only one node that's matching this\nin a windows node so this job will be\ndelegated out there so i save this\nand let me build this\nthis is again a very very simple job\nthere's nothing in this i just want to\ndemonstrate how to kind of delegate it\nto an agent so if you see this\nit ran successfully\nand where is the workspace\nthe workspace is right inside our\njenkins node it created a new workspace\ndelegated job it put in here so my old\nor my primary master job is in sql\nprogram files under jenkins and this is\nthe slave job that was successfully run\nvery very simple but very very powerful\nconcept of master slave configuration or\ndistributed build in jenkins\nokay approaching the final section where\nwe've done all this hard work in\nbringing up our jenkins server\nconfiguring it putting up some jobs on\nit creating users and all this stuff now\nwe don't want this configuration to kind\nof go away we want a very nice way of\nensuring that we backup all this\nconfiguration and in case there is any\nfailure hardware crash or a machine\ncrash we would want to kind of restore\nfrom the existing configuration that we\nkind of backed up\nso one quick way to do that would be or\none dirty way to do that would be just\nyou know take a complete backup of our\ncolon program files colon jenkins\ndirectory because that's where our whole\njenkins configuration is present but we\ndon't want to do that let's use some\nplugins for taking up a backup so let me\ngo to manage jenkins\nand click on available\nand let me search for some back there\nare a bunch of backup plugins so i would\nrecommend one of these plugins that i\nspecifically use\nso this is the backup plugin so let me\ngo ahead and install this plugin\nall right so we went ahead and installed\nthis plugin\nso let me come back to my\nmanage plugins\nstop this plugin is there\nso\nhang on backup manager so you will see\nthis option once you uninstall this\nplugin so first time i can you know do a\nsetup i would say back up this\nparticular i'll give a folder uh this\nfolder is pertaining to the folder where\ni want jkins to backup some data\nand i would say the format should be zip\nformat is good enough let me give a name\nor a template or a file name for my\nyou know backup this is good i want it\nin verbose mode i don't want to shut on\nmy jenkins or should i shut it down no\nokay one thing that you got to remember\nis that whenever a backup happens if\nthere are too many jobs that is running\non the server\nit can kind of slow down your jenkins\ninstance because it's it's in the\nprocess of copying a few of those things\nand the files are being changed at that\nmoment it's little bit problematic for\njenkins so typically you backup your\nservers only when there is very less\nload or typically try to you know bring\nit to a shutdown kind of a state and\nthen take a backup\nall right so i'm gonna backup all these\nthings you know i don't want to exclude\nanything else i want the history i want\nthe maven artifacts\npossibly i don't want this guy i would\njust say save\nand then i would say\nback him up\nso this would run a bunch of you know\nsteps and all the files that is required\nas a part of this is pretty fast but\nthen if at all you have too many things\nup on your server for now we didn't have\ntoo many things up on our server but in\ncase you had too many things to kind of\nbackup this may take a while so let me\njust pause this recording and get back\nto you once the backup is complete so\nthere you go the backup was successful\ncreated a backup of all the workspace\nthe configurations the users and you\nknow all that so all this is kind of\nhidden down in this particular\nzip file so at any instance if at all i\nkind of crash my system for some\ninstance or say hard disk failure and i\nbring up a new instance of jenkins i can\nkind of use the backup plugin for\nrestoring this particular\nconfigurations so how do i do that i\njust come back to\nmy manager cans\ncome back to\nbackup manager and i will say restore\nher that's an or jenkins configuration\nso devops today is being implemented by\nyou know most of the major organizations\nwhether it's a financial organization\nwhether it's a kind of a service\norganization every organization is\nsomehow looking forward for the\nimplementation and the adaptation of\ndevops because it totally redefines and\nautomate the whole development process\nall together and whatever the manual\nefforts you were putting earlier that is\nsimply or gets automated with the help\nof these tools here so this is something\nwhich get really implemented because of\nsome of the important uh feature like a\nci cd pipeline because cicd pipeline is\nresponsible for delivering your source\ncore into the production environment in\nlarge duration of time so cicd pipeline\nis ultimately the goal which really\nhelps us to deliver more into the\nproduction environment when we talk\nabout from this perspective\nnow let's talk about that what exactly\nis a cac pipeline now when we go into\nthat part when we go into that\nunderstanding so cicd pipeline is a\nbasically continuous integration and\ncontinuous delivery concept which is\nused or which is considered as a\nbackbone of the overall devops approach\nnow it's one of the prime approach which\nwe implement when we are going for a\ndevops implementation for our project so\nif i have to go for a devops\nimplementation the very first and the\nminimum implementation and the\nautomation which i'm looking forward is\nactually from the uh particular ca city\npipelines here so cacd pipelines is\nreally a wonderful option when we talk\nabout the devops here\nso what exactly is the pipeline term\nall about so pipeline is in series of\nevents that are connected together with\neach other it's kind of a sequence of\nthe various steps like you know\ntypically when we talk about any kind of\ndeployment so we have like you know\nbuild process like we compile the source\ncode which under the artifacts we do the\ntesting and then we deploy to a specific\nenvironment all these various steps\nwhich we use to do it like manually that\nis something which we can do it into a\npipeline so pipeline is nothing but a\nsequence of all these steps\ninterconnected with each other executed\none by one into a particular sequence\nnow\nthe pipelines is responsible for\nperforming a variety of tasks\nlike building up the source code running\nthe test cases\nprobably the deployment can also be\nadded up in when we go for the\ncontinuous integration and continuous\ndelivery there so all these steps are\nbeing done into a sequence definitely\nbecause sequence is very important when\nwe talk about the pipeline so you need\nto talk about the sequence the same way\nin which you are working on the\ndevelopment and in a typical world the\nsame thing you will be putting up into a\nspecific pipeline so that's a very\nimportant aspect to be considered now\nlet's talk about what is the continuous\nintegration here now continuous\nintegration is also you know known as\nthe ci uh pretty much you can see that a\nlot of uh tools are actually named as ci\nbut they are referring to the continuous\nintegration only so continuous\nintegration is a practice that\nintegrates the source code into a shared\nrepository and it used to\nautomate the verification of the source\ncode so it involves the build\nautomations test cases automation so it\nalso helps us to detect the issues and\nthe bugs quite easily and quite faster\nthat's a very early mechanism which we\ncan do as such if we want to resolve all\nthese problems\nnow continuous integrations does not\neliminate the bugs but yes it definitely\nhelps them uh you know easily to find\nout because we we are talking about the\nuh automated process we are talking\nabout the automatic test cases so\ndefinitely that is something which can\nhelp us to\nfind out the bugs and then you know the\ndevelopment can help on that and they\ncan you know proceed with those bugs and\nthey can try to resolve those things one\nby one so it's not a kind of automated\nprocess which will eventually remove the\nbugs bugs is something which you have to\nrecode and you have to fix it by\nfollowing the development practice but\nyes it can really help us to find those\nbugs quite easy and help them to remove\nnow what is the continuous delivery here\nso continuous delivery also known as cd\nis in kind of a phase in which the\nchanges are made uh into the code before\nthe deployment now in this case what\nhappens that uh it's um something which\nwe are discussing or we are validating\nthat what exactly we want to deliver it\nto the customer so what exactly we are\ngoing ahead or we are moving to the\ncustomers so that's what we typically do\nin case of continuous delivery and the\nultimate goal of the pipeline is to make\nthe deployments that's the end result\nbecause\ncoding is not the only thing you code\nthe programs you do the development\nafter that it's all about the\ndeployments like how you're going to\nthat to perform the deployment so that\nis a very important aspect you want to\ngo ahead with the deployments that's\nright you can go there and that's a real\nbeauty about this because it it's in\nkind of a way in which we can identify\nthat the how the deployments can be done\nor can be executed as such here\nright so the ultimate goal for the\npipeline is nothing but to do the\ndeployments and to proceed further on\nthat\nright so when both these practices are\nplaced in together in an order so all\nthese steps could be referred as in\ncomplete automated process and this\nprocess is known as cicd so when we are\ntalking about like when you are working\non this automation so in that case what\nhappens that we are looking forward that\nhow the automation needs to be done and\nsince it's in kind of a ci cd automation\nwhich we are talking about so it's\nnothing but the uh end result would be\nlike build and deployment automation so\nyou will be taking care of both the\nbuild and the test case executions and\nthe deployments as such when we talk\nabout as such the cicd here\nthe implementation of chcd also enables\nthe team to do the build and deploys\nquite quickly and efficiently because\nthese are things which is you know\nhappening automatically so there is no\nmanual efforts involved and there is no\nscope of human error also so we have\nfrequently seen that while doing the\ndeployments we may miss some binaries or\nsome miss can be there so that is\nsomething which is you know completely\nremoved as such when we talk about this\nthe process makes the teams more agile\nproductive and the uh confident here\nbecause um the automations definitely\ngives a kind of a boost to the\nconfidence that yes things are going to\nwork perfectly fine and there is no\nissues as such present\nnow why exactly jenkins like jenkins is\nwhat we typically understand are we you\nknow uh here and there that's in ci2\nit's a cd tool so what exactly is\njenkins all about so jenkins is also\nknown as a kind of orchestration tool\nit's an automated tool which is there\nand the best part is that it's\ncompletely open source yes there are\nsome particular or paid or the\nenterprise tools are there like cloud\nb's and all but there is no as such of\noffering difference between the\ncloudbees and the jenkins here so\njenkins is an kind of open source tool\nwhich a lot of organizations pretty much\nimplement as it is itself so even if\nthey don't want to go um we have seen in\na lot of big organizations where you\nknow they are not going for the\nenterprise to like cloud bs and all and\nthey are going for the pretty much you\nknow core jenkins software as such here\nso this tool uh makes it easy for the\ndevelopers to integrate the changes to\nthe project that is something which is\nvery important because it can really\nhelp the teams to say that how the\nthings can be done and how it can be\nperformed over there so the tools is\nreally easy for the developers to\nintegrate and that's the biggest uh you\nknow benefit which we are getting when\nwe talk about these tools as such so\njenkins is a very important tool to be\nconsidered when we talk about all these\nautomations now jenkins achieves\ncontinuous integration with the help of\nplugins that is also a kind of another\nfeature or benefit which we get because\nthere are so many plugins which is\navailable there as such which is being\nused and uh for example you want to have\nan integration with kubernetes docker\nand all maybe by default those plugins\nare not installed but yes you have the\nprovisioning that you can go for the\ninstallation of those plugins and yes\nthose features will start embedded up\nand integrated within your jenkins so\nthis is the reason this is the main\nbenefit which we get when we talk about\nthe jenkins implementation\nso jenkins uh is you know one of the\nbest fit which is there for building a\nci cd pipeline because of its\nflexibility uh open source nature\nplug-in capabilities the support for\nplugins and it's quite easy to use and\nit's very simple straightforward gui\nwhich is there which can definitely\nhelps us you can you know easily\nunderstand and go through the jenkins\nand you can grab the understanding and\nas an end result you will be able to\nhave a very robust tool which using\nwhich pretty much any kind of source\ncode or any kind of programming language\nyou can implement ci city whether it's\nan android it's a not net it's a java\nit's a node.js all the languages are\nhaving the support for the jenkins\nso let's talk about this acd pipeline\nwith the jenkins here now to automate\nthe entire development process a ci cd\npipeline is the ultimate you know\nsolution which we are looking forward to\nbuild such a pipeline jenkins is our\nbest solution and best fit which is\navailable here\nso there are pretty much six steps which\nis involved when we look forward for any\nkind of pipeline it's a generic pipeline\nwhich we are looking forward now it may\nhave like\nany other steps which is available there\nprobably some additional steps you're\ndoing like some other plugins you are\ninstalling but these are the basic steps\nwhich is there like a minimum pipeline\nif you want to design these are the\nsteps which is available there now let's\nsee the first one is that we have the uh\nrequired java jdk like a jdk to be\navailable on the system now most of the\noperating systems are already available\nwith the gre like a java gre but the\nproblem with gre is that it's only for\nthe build process uh it will not be\ndoing the compilation you can run the\nartifacts you can run the jar files you\ncan you know run the application run the\ncode base but the compilation requires\nthe java c or the java jdk kit to be\ninstalled onto the system and that's the\nreason why for this one we also require\nthe jdk and certain linux commands\nexecution understanding we need to have\nbecause we are going to run some kind of\nsteps some installation steps and you\nknow process so that's pretty much\nrequired now let's talk about how do ca\ncd pipeline with jenkins now first of\nall you have to download the jdk\nand uh that is something which is\ninstalled so after that you can go for\nthe jenkins download now jenkins dot io\nslash download is the website is our\nofficial websites of jenkins now the\nbest part is that there you have the\nsupport for different operating systems\nand platforms from there you can easily\nsay that if you want to go for a java uh\npackage like a bar file tucker ubuntu\ndeviant centos fedora red hat windows\nopen sushi uh freebsd ganto mac\noperating system in fact whatever the\ndifferent kind of artifacts or different\nenvironment or different uh\napplication you want to download you\nwill be able to do that so that's a very\nfirst thing to start up on you download\nthe generic java package like a war file\nthen you have to execute it you have to\ndownload that into a specific folder\nstructure let's say say that you have\nyou know created a folder called jenkins\nnow you have to go into that jenkins\nfolder with the help of cd command and\nthere you have to run the command called\njava hyphen jar and the jenkins dot bar\nthere so uh these are the executables uh\nartifacts\nso uh war files can be easily executable\num jar files raw files can be easily\ndeployed so\njust because with the java command you\ncan run them you don't require any kind\nof web container or application\ncontainer as such so here also you can\nsee that we are running the java command\nand it runs the applications as such and\nonce that is done so you can open the\nweb browser and uh you can open like\nlocalhost colony t so jenkins uses atd\nport just like a tomcat apache so\nif you know once the deployment is done\ninstallation is done so you can just\nopen the localhost colony\nnow if you want to get uh the jenkins up\nand running in the browser probably you\ncan you know go through the\npublic ipad address also there so you\ncan put the public ipad is calling edt\nand that can also help you to you know\nstart accessing the jenkins application\nnow in there you will be having an\noption called create new jobs so you\nneed to click on that now once the\nparticular new job new item new job\nthat's a\ndifferent naming conventions which is\navailable there now all you're going to\ndo is that you're going to do like you\nare proceeding with the creating the\npipeline job so you will be having an\noption called pipeline job over there\njust select that and provide your custom\nname what pipeline name or job name you\nwant to uh refer or you want to process\nthere now once that is available so what\nhappens that it will be in easy task for\nus to see that how exactly we can go\nahead and we can perform on that part so\nthis can really help us to see that how\na pipeline job can be created and you\nknow performed on this modifications as\nsuch\nnow when the pipeline is selected and we\ncan give a particular name that this is\nthe name which is available and then we\ncan say okay as such over there now you\ncan scroll down and find the pipeline\nsection so uh there what happens that\nwhen you go over there and say that okay\nthis is the way that how the pipelines\nare managed and you know those kind of\nthings so you will scroll down and find\nthe pipeline section and go with that\npipeline script now when you select that\noption there are different options which\nis available like how you want to manage\nthese pipelines now you are you know\nhave the direct access also like if you\nwant to directly uh create the uh create\na pipeline skip you can do that if you\nfeel that you want to manage like you\nwant to retrieve the jenkins file so so\nscored management tool also can be used\nthere so you can work on that also so\nlike this there are so many a variety of\nthings which is available like which you\ncan use to work around that how exactly\nthe pipeline job can be created so\neither you can fetch it from the source\ncode management tool uh like gate\nversion or something like that or you\ncan directly put the pipeline code as\nsuch over there right now so next thing\nis that we can configure and execute a\npipeline job with the direct script so\nuh we can once the pipeline is selected\nso you can put the\nparticular script like jenkins file into\nyour uh particular github link so you\nyou may be having like already a github\nlink so that the where the jenkins file\nis there so you can make use of that now\nonce you process the github link so what\nwe can do is that we can proceed with\nthat\nand uh once the processing is done so\nyou can do the same and you know you can\nkeep the changes and you know uh it will\nbe picking up the pipelines you know the\npipeline script is added up into the\ngithub and you know you have already\nspecified that uh let's just go ahead\nwith this jenkins file pipeline script\nfrom the github repository and proceed\nfurther now once that is done so what\nnext you can do is that you can go with\nthe build now process you click on the\nbill now and once that is done so what\nwill happen that you will be able to see\nthat how the build process will be done\nand how the build will be performed over\nthere so these are pretty much a kind of\na way so you can click on the console\noutput you will get all the logs that is\nhappening in the inside that whatever\nthe pipeline steps are getting executed\nall of them you will be able to get or\nyou will be able to you know get on that\npart there so these are the different\nsteps which is involved as such and the\nsixth one is that you know uh yes\nwhatever the\nparticular\nwhen you run the build now you will be\nable to see that source code will be uh\nyou know will be checked out and will be\ndownloaded before the build and you can\nproceed with that part now later on if\nyou want to change the url of this\ngithub you can configure the job again\nthe existing job and you can change that\nurl github link url whenever you require\nyou can also clone this uh job whenever\nyou go ahead and you work on that and\nthat's also kind of you know the best\npart which is available as such right\nand uh\nthen you can have the advanced settings\nover there so in there you can put like\nuh your github repository you can say\nlike okay uh the github repository is\nthere so i'm just going to put this url\nand you know with that what will happen\nthat the settings will be available\nthere and the jenkins file will be\ndownloaded as such and when you run the\nbuild now you will be able to have a lot\nof steps like a lot of configurations\ngoing on so uh then the checkout sem so\nwe can have a declaration like check out\nsm which is there so when the checkout\nsm is there so it will check out a\nspecific source code after that you go\nto the log and you will be able to see\nthat each and every stage which is being\nbuilt up and executed as such\nokay so now we are going to talk about a\ndemo here so on the pipeline here so\nthis is the jenkins portal now you can\nsee here that there is an option called\ncreate a job you can either click on the\nnew item or you can click on the new\nuh create a job here now here i'm going\nto say like a pipeline\nand uh then you know you can select the\npipeline uh job type here now you have\nthe freestyle pipeline github\norganization multiple branch pipeline\nthese are the different options which is\navailable there but i'm going to\ncontinue with the pipeline here as such\nso when i selected the pipeline and say\nokay so what will happen that i will be\nable to see a configuration page which\nis related to the pipeline\nnow here the very important part is that\nyou have all the uh general build\ntrigger\nyou know options which is similar to the\nfreestyle but the build step and the\npost build step is completely removed\nbecause of the pipeline introduction now\nhere you either have the option to put\nthe pipeline script altogether you can\nalso have some particular example for\nexample let's talk about some github\nmaven uh particular uh tool here so you\ncan see that\nwe have you know got some steps as such\nover here and you know it's pretty much\nrunning over there now you run it it\nwill work smoothly it will check out\nsome source code but how we are going to\nintegrate like the version the jenkins\nfile into the version control system\nbecause that's the ideal approach we\nshould be following when we create a\npipeline of a cicd now i'm going to\nselect a particular pipeline from sim\nhere then go with the git here now in\nthere the jenkins file is the name of\nthe file of the pipeline script and i'm\ngoing to put my\nrepository over here in this one now\nthis repository is of my gate which is\nlike having um even build pipeline which\nis available there it's having some\nsteps related to ci with for the build\nand deployments and that's what we can\nfollow as such over here now in this one\nthe uh if it is a private repository\ndefinitely you can add on your\ncredentials but this is a public\nrepository a personal repository so i\ndon't have to put any kind of\ncredentials but you can always add the\ncredentials with the help of ad here and\nthat can help you to you know set up\nwhatever the credentials the private\nrepositories you want to configure now\nonce you save the configuration here\nnow what it's going to do is that your\nit's going to give you a particular page\nrelated to build now uh if you want to\nrun if you want to delete the pipeline\nif you want to reconfigure the pipeline\nall these different options are\navailable there so we are going to click\non the build now here and when i do that\nimmediately the pipeline will be\ndownloaded and will be processed now you\nmay not be able to get the complete\nstage view as of now because it's still\nrunning so yeah you can see that the\ncheckout code is done then it's going on\nto the build okay that's one of the\nsteps which is there now once the build\nwill be done so it will continue with\nthe next steps with the next further\nsteps there so you can also go to the\nconsole output log here like you can\nclick on this or you can click on the\nconsole output to check the complete log\nwhich is happening there or in fact you\ncan also see the stage wise logs also\nbecause that is also very important when\nyou go for the complete logs uh it may\nyou know have a lot of steps involved\nand you know a lot of logs will be\navailable there but if you want to see a\nspecific log of a specific stage that's\nwhere this comes into the picture and as\nyou can see that all the different uh\nsteps like test cases executions the\nscenar cube analysis the archive\nartifacts deployment and in fact the\nnotifications so all this is a part of a\ncomplete pipeline this whole pipeline is\ndone here and you know you get a kind of\na stage view it's success over here and\nthe artifacts is also available to\ndownload so you can download this war\nfile is a web applications as such over\nhere so this is what our typical\npipeline looks like that how the\nautomation the complete automations\nreally looks like as such over here now\nthis is a very important aspect because\nit really helps us to understand that\nhow the pipelines can be configured can\nbe done and pretty much with the same\nsteps you will be able to automate any\nkind of pipelines as such so that was\nthe demo to build a simple pipeline as\nsuch with the jenkins and uh pretty much\nin this one we understood that how\nexactly the ci cd pipelines can be\nconfigured and we can use them and we\ncan get hold on that part so there are\napproximately seven sections that we\ncover in devops we go from general\ndevops questions source code management\nwith tools such as git continuous\nintegration and here we'll focus on\njenkins continuous testing with tools\nsuch as selenium and then you also have\nthe operation side of devops which is\nyour configuration management with tools\nsuch as chef puppet enhanceable\ncontainerization with docker and then\ncontinuous marching with tools such as\nnagios so let's just get into those\ngeneral devops questions so one of the\nquestions that you're going to be asked\nis how is devops different from agile\nand the reality is is that devops is a\ncultural way of being able to deliver\nsolutions that's different from agile if\nwe look at the evolution of delivery\nover the last five to ten years we've\ngone from waterfall based delivery to\nagile delivery which is on\nsprints to where we are with continuous\nintegration and continuous delivery\naround devops the whole concept of\ndevops is culturally very very different\nfrom agile and the difference is is that\nyou're looking at being able to do\ncontinuous releases what does that mean\nthe difference is is that you want to be\nable to send out code continuously to\nyour production environment that means\nthe operations team the development team\nhave to be working together that means\nthat any code that gets created has to\nbe able to go to production very quickly\nwhich means you need to be testing your\ncode continuously and then that\nproduction environment must also be able\nto be tested continuously and any\nchanges or any errors that come up have\nto be communicated effectively and\nefficiently back to the dev and op team\nanother area in which i see that devops\nis different is really the response that\nwe have for how we engage with the\ncustomer so the customer is coming to\nyour website to your mobile app to your\nchat bot or any digital solution that\nyou have and has an expectation when\nyou're going through and actually doing\na dev ops paradigm the old model would\nbe that you would capture requirements\nfrom the customer then you do your\ndevelopment then you do your testing and\nthere would be these barriers between\neach of those as we move faster through\nfrom waterfall to agile what we saw is\nthat with agile we were able to respond\nmuch faster to customer demands so\ninstead of it being weeks or months\nsometimes in some cases years between\nreleases of software what we saw it\nwould was a transition to weeks and\nmonths for releases on software now we\nsee with devops is that the release\ncycle has shrunk even further with the\ngoal of continuously delighting the\ncustomer how further has that release\ncycle shrunk to there are companies that\nhave gone from having releases of once a\nweek or once every two weeks or once a\nmonth to now having multiple releases a\nday indeed some companies have up to 50\nreleases a day this isn't something to\nalso bear in mind is that each of those\nreleases are tested and verified against\ntest records so that you can guarantee\nthat the code that's going to production\nis going to be good continuous code so\nwhat are the differences between the\ndifferent phases of devops so\neffectively there are two main phases of\ndevops there's the planning and coding\nphase and then there's the deploying\nphase and you have a tool such as\njenkins that allows you to integrate\nbetween both environments some of the\ncore benefits that you may have to\ndevops are going to be some technical\nbenefits and some business benefits so\nwhen somebody asks you what are the\nbenefits of devops you can reply that\nfrom a technical point of view you're\nable to use continuous software delivery\nto constantly push out code that has\nbeen tested and verified against scripts\nthat have been written and approved you\ncan be able to push out smaller chunks\nof code so that when you have an issue\nyou're not having to go through massive\nblocks of code or massive projects\nyou're going through just very small\nmicro services or small sections of code\nand you're able to detect and correct\nproblems faster on the business side the\nbenefits are absolutely fantastic from a\ncustomer that's coming to your website\nand or to your mobile app they're going\nto see responses happening continuously\nso that the customer is always aware\nthat you as a company are listening to\ntheir demands and responding\nappropriately you're able to provide a\nmore stable environment and you're able\nto scale that environment to the demands\nof the number of customers that are\nusing your services so how you approach\na project that needs to implement devops\nso this is really an exciting area for\nyou to be in so there are effectively\nthree stages when it comes to actually\nworking in a dev ops the first stage is\nan assessment stage and think of this as\nthe back of the napkin ideation stage\nthis is where you are sitting with a\nbusiness leader and they're giving you\nideas of what they would like to see\nfrom feedback that they've had from\ntheir customers this is blue sky\nopportunity this is thinking of big\nideas that second stage and this often\ncomes as a fast follow to stage one is\nactually proving out that concept so\ndeveloping a proof of concept and a\nproof of concept can actually be a\nmultiple different things so it could be\nsomething as simple as a wireframe or it\ncould be something that is as complex as\na mini version of the file application\ndepending on the scope of the work that\nyou're delivering will really depend on\nhow complicated you want the poc to be\nbut with that in mind whatever choice\nyou make you have to be able to deliver\nenough in the poc so that when you\npresent this to a customer they're able\nto respond to that creation that you've\ndeveloped and able to give you feedback\nto be able to validate that you are\ngoing with the right solution and able\nto provide the right product to your\ncustomers that third stage is where you\nget into your dev ops stage and this is\njust the exciting part this is where the\nrubber hits the road and you start\nreleasing code based on a backlog of\nfeatures that are being requested for\nthe solution in contrast to doing agile\ndelivery where you just continuously\nwork through a backlog with devops what\nyou're also looking at is putting in\nanalytics and sensors to be able to\nvalidate that you are being successful\nwith the solution that being delivered\nso that once you actually start\ndelivering out code that customers can\ninteract with you want to be able to see\nwhat are the pieces of the solution that\nthey are using what do they like what is\ncomplicated where are the failure points\nand you want to use that data and feed\nthat back into your continuous\nintegration and have that as a means to\nbe able to back fill the demand or work\nthat gets completed in the bank log so\nwhat is the difference between\ncontinuous delivery and continuous\ndeployment so continuous delivery is\nbased on putting out code that can be\ndeployed safely to production it ensures\nthat your businesses and functions are\nrunning as you would expect them to be\nso it's going through and completing the\ncode that you'd actually see continuous\ndeployment in contrast is all about\nensuring that you're automating the\ndeployment of a production environment\nso you're able to go through and scale\nup your environment to meet the demands\nof both the solution and the customer\nthis makes software development and\nrelease processes much more faster and\nmore robust so if we look here we can\nactually see where continuous\nintegration and continuous deployment\ncome hand in hand so when you actually\nstart out with the initial pushes of\nyour code that's where you're doing your\ncontinuous integration and your\ncontinuous delivery and then at some\npoint you want to get very comfortable\nwith deploying the code that you're\ncreating so it's being pushed out to\nyour production environment one of the\nthings that's great about working with\nthe tools that you use in a devops\ncontinuous integration and continuous\ndelivery model is that the development\ntools that you use uh the\ncontainerization tools the testing tools\nshould always reflect the production\nenvironment what this means is that when\nyou actually come to deploying solutions\nto production there are no surprises\nbecause your development team have been\nworking against that exact same\nenvironment all the way through so a\nquestion that you'll also be asked is\nyou know what is the role of the\nconfiguration management in devops and\nso the role of configuration management\nreally has three distinct areas and the\nfirst and this is really obvious one and\nthis is the one where you probably\nalready have significant experiences is\nthe ability to manage and handle large\nchanges to multiple systems in seconds\nrather than days hours or weeks as that\nmay have happened before the second area\nis that you want to also demonstrate the\nbusiness reasons for having\nconfiguration management and the\nbusiness reason here is that it allows\nit and infrastructure to standardize on\nresource configurations and this has a\nbenefit in that you're able to do more\nwith fewer people so instead of having a\nlarge configuration team you can\nactually have a smaller more highly\nskilled team that's able to actually\nmanage an even larger operational\nenvironment and thirdly you want to be\nable to highlight the ability to scale\nso if you have configuration management\ntools you're able to manage a\nsignificant number of servers and\ndomains that may have multiple servers\nin it allows you to effectively manage\nservers that are deployed on cloud or\nprivate cloud and allow you to do this\nwith high accuracy so how does\ncontinuous monitoring help and maintain\nthe entire architecture of the system so\nwhen this question comes up you want to\ndig in and show your knowledge on how\nconfiguration and continuous monitoring\nis able to control an entire environment\nso the number one topic that you want to\nbring up when it comes to continuous\nmonitoring is that with being able to\neffectively monitor your entire network\n24 7 for any changes as they happen\nyou're able to identify and report those\nthoughts or threats immediately and\nrespond immediately for your entire\nnetwork instead of having to wait as it\nhappens sometimes for a customer to\nemail or call you and say hey your\nwebsite's down nobody wants that that's\nan embarrassing thing the other three\nareas that you want to be able to\nhighlight are the ability to be able to\nensure that the right software and the\nright services are running on the right\nresources that's your number one\ntakeaway that you want to be able to\ngive of continuous monitoring the second\nis to be able to monitor the status of\nthose servers continuously this is not\nrequiring manually monitoring but having\na agent that's monitoring those servers\ncontinuously and then the third is that\nby scripting out and continuously\nmonitoring your entire environment\nyou're creating a self-audit trail that\nyou can take back and demonstrate the\neffectiveness of the operations\nenvironment that you are providing so\none of the cloud companies that is a\nstrong advocate for devops is amazon's\nweb services aws and they have a really\nfive distinct areas them that you can\nzero in on board services so when the\nquestion comes up what is the role of\naws in devops you want to really hold\nout your hand and list of five areas of\nfocus using your thumb and finger so you\nwant to have flexible services built for\nscale automation secure and a large\npartner ecosystem and having those five\nareas will really be able to help\ndemonstrate why you believe that aws and\nother cloud providers but aws is\ncertainly the leader in this space are\ngreat for being able to provide support\nfor the role of devops so one of the\nthings that we want to be able to do\neffectively when we're releasing any\nkind of solution is to be able to\nmeasure that solution and so kpis are\nvery important so you will be asked for\nthree important dev of kpis and so three\nthat really come to mind that are very\neffective the first one is mean time to\nfailure recovery and what this talks\nabout is what is the average time does\nit take to recover from a failure and if\nyou have experience doing this then look\nat the experience you have and use a\nspecific example where you are able to\ndemonstrate that mean time to failure\nrecovery the second is deployment\nfrequency and with deployment frequency\nyou want to be able to discuss how often\ndo you actually deploy solutions and\nwhat actually happens when you're\nactually doing those deployments and\nwhat does the impacts to your network\nlook like when you're doing those\ndeployments and then the third one is\nreally tied to that deployment frequency\nwhich is around what is the percentage\nof failed deployments and so and how\nmany times did you deploy to a server\nand something happened where the server\nitself failed what we're looking for\nwhen you're going through and being\nasked for these kpis is experience with\nactually doing a devops deployment and\nbeing able to understand what devops\nlooks like when you're pushing out your\ninfrastructure and then the second is\nbeing able to validate that\nself-auditing ability and one word of\ncaution is don't go in there and say\nthat you have a hundred percent success\nuh the reality is that servers do\ndegrade over time and you maybe want to\ntalk about a time when a server did\ndegrade in your environment and use that\nas a story for how you're able to\nsuccessfully get over and solve that\ndegradation so one of the terms that is\nvery popular at the moment is\ninfrastructure as code and so you're\ngoing to be asked to explain\ninfrastructure as code and really it's\nit's something that actually becomes a\nbyproduct of the work you have to do\nwhen you're actually putting together\nyour devops environment and\ninfrastructure's code really refers to\nthe writing of code to actually manage\nyour environment and you can go through\nmany of the other tools that we've\ncovered in this series but you'll see\nthat xml or ruby or yaml are used as\nlanguages to describe the configuration\nfor your environment this allows you to\nthen create the rules and instructions\nthat can be read by the machines that\nare actually setting up the physical\nhardware versus a traditional model\nwhich is having software and installing\nthat software directly onto the machine\nthis is really important when it comes\nto cloud computing there really is a\nstrong emphasis of being able to explain\ninfrastructure as a service and\ninfrastructure as code is fundamental to\nthe foundation to infrastructure as\nservice and then finally allows you to\nbe able to talk about how you can use\nscripted languages such as yammer to be\nable to create a consistent experience\nfor your entire network all right so\nlet's now get into the next section\nwhich is source code management and\nwe're going to focus specifically on git\nthe reason being is that get is really\nthe most popular source code management\nsolution right now there are other\ntechnologies out there but for the types\nof distributed environments that we have\nuh source code management with git is uh\nprobably the most effective so the first\nquestion you'll be asked when it comes\nto git is to talk about the difference\nbetween centralized and distributed\nversion control and if we look at the\nway that the two are set up older\ntechnologies such as older versions of\nteam foundation server though the\ncurrent version does actually have git\nin it but older versions required a\ncentralized server for you to check in\nand check out of code the developer in\nthe centralized system does not have all\nthe files for the application and if the\ncentralized server crashes then you\nactually lose all of the history of your\ncode now in contrast a distributed model\nactually we do check in our code to a\nserver however for you to be effective\nand building out your solution you\nactually check out all of the code for\nthe solution directly onto your local\ndevelopment machine so you can actually\nhave a copy of the entire solution\nrunning on your local machine this\nallows you to be able to work\neffectively offline it really allows for\nscalability when it comes to building\nout your team so if you have a team that\nmay be in europe you can actually then\nscale that team with people from asia\nfrom north america or south america very\neasily and not have to worry about\nwhether or not they have the right code\nor the wrong code and in addition to\nthat if the actual main server where\nyou're checking in your code does crash\nit's not a big deal because you actually\nhave each person has a copy of the code\nso as soon as the server comes back up\nyou have to check back in and\neverybody's running back as if there was\nnothing that happened at all so one of\nthe questions you'll be asked is to give\nthe answer to some of the commands you\nuse for working with git so if you were\nto be asked the question is what is the\ngit command that downloads any\nrepository from github to your computer\non the screen we have four options we\nhave git push git fork get clone and get\ncommit the answer in this instance would\nbe git clone now if you want to be able\nto push code from your local system to a\ngithub repository using get then first\nof all you want to be able to do is\nconnect the local repository to a remote\nrepository and in the example you may\nwant to talk about using the command\ngate remote add origin and then the\nactual path to a github repository you\ncould if you wanted to actually at this\npoint also talk about other repositories\nsuch as get lab that you can also work\nwith or a private git repository that\nwould be used just for the development\nteam once you've actually then added the\nlocal repository into your local\ncomputer then the second action you want\nto use is a push which is to actually\npush your local files out to the master\nenvironment so you use the command git\npush origin master so one question you\nmay be asked is what is the difference\nbetween a bare repository and a standard\nway of initializing a get repository so\nlet's look through what is the standard\nway so the standard way using git init\nallows you to create a working directory\nusing the command git in it and then the\nfolder that creates is the folder that\ncreates all the revision history related\nto the work that you're doing in\ncontrast using the bear way you have a\ndifferent commands for setting that up\nso it would be git init dash dash bear\nand it does not contain any working or\nchecked out source files locally on your\nmachine in addition the revision history\nis actually stored in the root folder\nversus a subfolder that you'd have with\nthe normal git init initialization so\nwhich of the following cli commands\nwould you be used to rename a file so we\nhave get rm git mv git rm-r or none the\nabove well in this instance it would be\nget mv a question that you'll be asked\naround commit is going to be what is the\nprocess to revert a commit that has\nalready been pushed and made public and\nthere are two ways you can address this\nthe first is to actually address the bad\nfile in the new commit and you can use\nthe command git commit dash m and then\nput in a comment for why that file is\nbeing removed the second is to actually\ncreate a new commit that actually undoes\nall the changes that were made with the\nbad commit and then to do that you would\nuse git revert and then the commit id\nand the commit id it could be something\nsuch as 560e 0938f\nbut you'd have to find that from the the\ncommit that you had made but that would\nallow you to revert any bad files that\nyou had submitted so there are two ways\nof being able to get files from a get\nrepository and you're going to be asked\nto explain the difference between git\nfetch and get paul so get fetch allows\nyou to fetch and download only new data\nfrom a root new repository it does not\nintegrate any of the new data into your\nworking files and it can be undone at\nany time if you wanted to\nbreak out the remote tracking branches\nin contrast git pull updates the current\nhead branch with the latest changes from\nthe remote server so you get all of the\nfiles and downloaded it downloads new\ndata and integrates it with the current\nworking files you have on your system\nand it tries to merge remote changes\nwith your local ones so one of the\nquestions you'll get asked about git is\nwhat is a git stash so as a developer\nyou will be working on the current\nbranch within a solution but what\nhappens if you come up with an idea\nwhere it's something that will take a\ndifferent amount of time for you to be\nable to complete but you don't want to\ninterrupt the mainline branch so what\nyou can actually do is you can actually\ncreate a branch that allows you to start\nworking on your own work outside of the\nmain line branch and this is called git\nstash allows you to be able to modify\nyour files without interrupting the\nmainline branch so you once you start\ntalking about branching and get be\nprepared to answer and explain the\nconcept of branching so essentially what\nit allows you to do is\nhave a mainline master branch that has\nall the code that the team is checking\nin and checking out against but allows\nyou to have an indefinite number of\nbranches that allows for new features to\nbe built in parallel to the mainline\nbranch and then at some point be\nreintroduced to the main line branch to\nallow the team to add in new features\nand so if we look through the merge and\nget rebase these are the two features\nthat you'd be using continuously to be\nable to talk about how you take a branch\nand merge it back into the mainline\nbranch so on the left hand side we have\ngit merge which allows you to take the\ncode that you're creating and merge it\nback into the master on the right hand\nside what you have is a slightly\ndifferent approach this is for projects\nwhere you reach a point in a project\nwhere you go okay we're going to\neffectively restart the project at this\npoint in time and we want to ignore the\ncomplete history that's happened before\nthat and that's called get rebase and\nthat would allow you to rewrite the\nproject history by creating a brand new\nmainline branch that ignores all other\nprevious branches that have happened\nbefore it you can if you want to very\nquickly and easily find out all the\nfiles that have been used to make a\nparticular commit so when somebody asks\nyou the question how do you find a list\nof files has been changed in a\nparticular commit you can actually say\nthat all you have to go is find the\ncommand git diff dash tree dash r and\nthen the hash that you use for the\ncommit and that would actually then give\nyou a breakdown of all the files that\nhave been made with that particular\ncommit a question you'll be asked when\nyou're talking about merging files is\nwhat is a merge conflict in git and how\ncan it be resolved so essentially a\nmerge conflict is when you have two or\nmore branches that are competing with\ncommits in git and you have to be able\nto determine which is the appropriate\nfiles that need to be submitted and this\nis where you would go in and to actually\nhelp resolve this issue you'd actually\ngo in and manually edit the conflicted\nfiles to select the changes you want to\nkeep in the final merge so let me go\nthrough the steps that you would take to\nbe able to illustrate this when you're\ntalking about this particular question\nin your interview now there are\nessentially four stages the first would\nbe under the repository name you want to\nselect a pull request and you want to be\nable to show how that pull request would\nbe demonstrated inside of github so\nwithin the pull request there's going to\nbe a highlight of conflict markers and\nyou'll be able to select which conflicts\nand you want to keep on which you want\nto merge and which ones you want to\nchange so it's a step through how you'd\nactually resolve emerge conflict and the\nfirst step would be under github you\nwant to be able to pull the repository\nname and then the pull request around\nthat repository in the pull request list\nclick the pull request with a merge\nconflict and that you'd like to be able\nto resolve now pull up a file that will\nlist out all of the conflicts for you\nnear the bottom of that file will be a\nlist of the requests that need to be\nresolved and then if you need to make a\ndecision on which branches you want to\nkeep or which ones you want to change\nthat will have to be something you have\nto put in instructions inside of the\nfile you'll actually see that there are\nconflict markers within the instructions\nwhich are going to ask you which files\nyou want to change which ones you want\nto keep if you have more than one merge\nconflict in your file scroll down to the\nnext set of conflict markers and repeat\nsteps four and five until you resolve\nall of the conflicts you will want to\nmark your file as resolved in github so\nthat the repository knows that you are\nhaving everything resolved if you have\nmore than one file with a conflict then\nyou want to go then onto the next file\nand start working on those files and\njust keep repeating the steps we've done\nup to this point until you have all the\nconflicts resolved and then once you\nhave all of the resolutions created then\nyou want to select the button which is\ncommit merge and then merge all your\nfiles back into github and this will\ntake care and manage the resolution of\nthe merge conflict within github so you\ncan also do this through command line\nand with the command line you want to\nuse get bash and so when you want to as\na first step open up get bash and then\nnavigate to the local git repository in\ncommand line by using the cd change\ndirectory and then list out the actual\nfolder where you actually are putting\nall of your code and then you want to be\nable to generate a list of the files\nthat are affected with the merge\nconflict and in this instance here you\ncan actually see the file style guide.md\nhas a merge conflict in it and as before\nwith working with github you actually go\nthrough and use a text address and use\nany text editor but as you go through\nand edit out what you want to keep and\nwhat you want to uh manage in your\nconflict so you actually have a\nresolution that's been created so that\nyou'll be able to then once you you're\nusing the conflict markers you can\nactually merge your files together so\nthat the solution itself will allow you\nto\nincorporate your commits effectively\ninto the resolution once you've gone\nthrough and applied your changes you're\nable to then merge the conflicted\ncommits into a single commit and able to\npush that up to your remote repository\nall right let's talk about the next\nsection which is continuous integration\nwith jenkins so the first question\nyou'll be asked about with jenkins is\nexplain a master slave architecture of\njenkins so the way that jenkins is set\nup is that the jenkins master will pull\ncode from your remote git repository\nsuch as github and will check that\nrepository every time there is a code\ncommit it will distribute the workload\nof that code and the tests that need to\nbe applied to that code to all of the\njenkins slaves and then on request the\njenkins master and the slaves will then\ncarry out all the builds and tests to be\nable to produce test reports the next\nquestion you'll be asked is what is a\njenkins file and simply put a jenkins\nfile is a text file that has a\ndefinition of the jenkins pipeline and\nis checked into a source code repository\nand this really allows for three\ndistinct things to happen one allows for\na code review and iteration of the\npipeline it permits an audit trail for\nthat pipeline and also provides a single\nsource of truth for the pipeline which\ncan be viewed and edited so which of the\nfollowing commands runs jenkins from the\ncommand line is it java jar jenkins dot\nwar java dash war jenkins.jar java.jar\njenkins.jar java\njenkins.org\nand the answer is a\njar jenkins dot wall so when working\nwith jenkins you're going to be asked\nwhat are the key concepts and aspects of\nworking with the jenkins pipeline and\nyou want to really hold out your fingers\nhere and go through four key areas and\nthat is pipeline node step and stay so\npipeline refers to the user-defined\nmodel of a cd continuous delivery\npipeline node are the machines which is\nwhich are part of that jenkins\nenvironment within the pipeline step is\na single task that tells jenkins what to\ndo at that particular point in time and\nthen finally stage defines a\nconceptually distinct subset of tasks\nperformed through the entire pipeline\nand tasks could be build test and deploy\nso which of the following file is used\nto define dependency in maven and do we\nhave a build.xml\nb\npalm.xml c\ndependency.xml or d\nversion.xml and the answer is\npalm.xml working with jenkins you're\ngoing to be asked to explain the two\ntypes of pipeline used in jenkins along\nwith the syntax and so a scripted\npipeline is based on groovyscript as\ntheir domain specific language for\njenkins and there are one or more note\nblocks that are used throughout the\nentire pipeline on the left hand side\nyou can actually see what the actual\nscript would look like and the right\nhand side shows what the actual\ndeclaration for each section of that\nscript would be the second type of\njenkins pipeline is a declarative\npipeline and a declarative pipeline\nprovides a simple and a friendly syntax\nto define what the pipeline should look\nlike and then you can actually at this\npoint use an example to actually break\nout how blocks are used to find the work\ncompleted in a decorative pipeline so\nhow do you create a copy and backup of\njenkins well to create a backup\nperiodically back up jenkins to your\njenkins home directory and then create a\ncopy of that directory it's really as\nsimple as that a question you'll be\nasked as well is how can you copy\njenkins from one server to another well\nthere essentially there are three ways\nto do that one is you can move a job\nfrom one installation of jenkins to\nanother by copying the corresponding job\ndirectory the second would be to create\na copy of an existing job directory and\nmaking a clone of that job directory but\nwith a different name and the third is\nto rename an existing job by renaming a\ndirectory so security is fundamental to\nall the work that we do within devops\nand jenkins provides the center core to\nall the work that gets completed within\na devops environment there are three\nways in which you can apply security to\nauthenticate users effectively and when\nyou are asked about this question of\nsecurity within jenkins the three\nresponses you want to be able to provide\nis a jenkins has its own internal\ndatabase that uses secured user data\nfrom and user credentials b is you can\nuse a ldap or lightweight directory\naccess protocol server to be able to\nauthenticate jenkins users or c you can\nactually configure jenkins to\nauthenticate by using such as oauth\nwhich is a more modern method of being\nable to authenticate users you're going\nto be asked how to deploy a custom build\nof a core plugin within jenkins and\nessentially the four steps you want to\ngo through are first of all copying the\ndot hpi plugin file into the jenkins\nhome plugins subdirectory\nyou want to remove the plugins\ndevelopment directory if there is one\nyou want to create an empty file called\nplugin.hpi.pinned\nand once you've completed these three\nsteps restart jenkins and your custom\nbuild plugin should be available how can\nyou temporarily turn off jenkins\nsecurity if the administrative user has\nlocked themselves out of the admin\nconsole well this doesn't happen very\noften but when it does it's good to know\nhow you can actually get into jenkins\nand be able to resolve the problems of\nauthenticating effectively into the\nsystem as an administrator so when you\nwant to be able to\nget into a jenkins environment what you\nwant to be able to do is locate the\nconfig file you should see that it's set\nto true which allows for security to be\nenabled if you then change the user\nsecurity setting to false security will\ndisable allow you to make your\nadministrative changes and will not be\nre-enabled until the next time jenkins\nis restarted\nso what are the ways in which a build\ncan be scheduled and run in jenkins well\nthere are four ways in which you can\nidentify the way a build can be\nscheduled on running jenkins the first\nis when source code management commits\nnew code into the repository you can run\njenkins at that point the second can be\nthe after the completion of other builds\nso maybe you have multiple builds in\nyour project that are dependent to each\nother and when so many other builds have\nbeen executed then you can have jenkins\nrun you can schedule bills to run at a\nspecified time so you may have nightly\nbuilds of your code that illustrates the\nchanges in the solution you're building\nand then finally you also can manually\nbuild a environment on request\noccasionally you will want to also\nrestart jenkins and so it's good that\nwhen a question around how do you\nrestart jenkins manually comes up that\nyou have the answers and there are two\nways in which you can do it one is you\ncan force a restart without waiting for\nbills to complete by using the jenkins\nurl that you have for your environment\nslash restart or you can allow all\nrunning bills to complete before restart\nare required in which case you would use\nthe command of the url for your jenkins\nenvironment slash safe restart so let's\ngo into the fourth and final section of\nthis first video which talks about\ncontinuous testing with selenium so the\nfirst question you will be asked most\nlikely around selenium are what are the\nfour different selenium components and\nagain you want to hold open your fingers\nbecause there are four distinct\nenvironments you have selenium\nintegrated development environment or\nselenium ide you have selenium remote\ncontrol or selenium rc you have selenium\nweb driver and then selenium grid you'll\nbe asked to explain each of those areas\nin more detail but let's start off with\nby looking at selenium driver what are\nthe different exceptions in selenium\nwebdriver so it's useful to remember\nthat an exception is an event that\noccurs during the execution of a program\nthat disrupts the normal flow of that\nprogram's instructions and so we have\nfour we have a timeout exception an\nelement not visible exception no such\nelement exception and a session not\nfound exception and each of those if we\nstep through them are the four different\ntypes of exceptions that can be thrown\nup when using the selenium web driver so\nas we evolve in our digital world with\nthe different types of products that are\navailable for us to be able to build\nsolutions onto multiple platforms you're\ngoing to be asked can selenium and other\ndevops tools run in other environments\nand so a good question around this is\ncancelium test an application in an\nandroid web browser and the short answer\nis absolutely yes it can we have to use\nthe android driver for it to be able to\nwork so you want to be able to talk\nabout the three different types of\nsupported tests within selenium so when\nthe question comes up what are the\ndifferent test types supported by cyan\nyou can answer that and there are three\ndifferent types of tests first is a\nfunctional test second is a regression\ntest and third is a load testing test\nthe functional test is a kind of black\nbox testing in which test cases are\nbased on a specific area or feature\nwithin the software a regression test\nhelps you find any specific areas that\nfunctional tests or non-functional areas\nof the code wouldn't be able to detect\nthe load testing test allows you to\nmonitor the response of a solution as\nyou increase the volume of hits in how\nyou're using the code are put onto it an\nadditional question you'll be asked is\nhow can you get a text of a web element\nusing selenium well the get command is\ndue to achieve text of a specific web\nelement and it's important to remember\nhowever that the command does not return\nany parameters but just returns a string\nvalue so you want to be able to capture\nthat stream value and discuss about it a\nquestion you'll be asked around selenium\nis can you handle keyboard and mouse\nactions using selenium and the answer is\nyes you can but you have to make sure\nthat you're using the advanced user\ninteraction api and the advanced user\ninteraction api is something that can be\nscripted into your tests and it allows\nyou for\ncapturing methods such as a click and\nhold and drag and drop mass events and\nthen keyboard down or keyboard up key\nrelease events so that if you want to to\ncapture say the use of control shift or\na specific function button off the\nkeyboard you'd be able to capture those\nof the following four elements which of\nthese elements is not a web element\nmethod a get text b\nsize\nc\nget tag name d\nsend keys and it's b size you're going\nto be asked to explain what is the\ndifference for when we use find element\nor find elements and so if we look at\nfind element find element finds the\nfirst element in the current web page\nthat matches the specified locator value\nin contrast find elements finds all of\nthe elements on the web page that\nmatches the specified value when using\nwebdriver what are the driver close and\ndriver quit commands and these are two\ndifferent methods used to close a web\nbrowser session in selenium so driver\nclose will close the current web browser\nwhich your focus is set and driver quit\ncloses all the browser windows and ends\nthe web driver session completely the\nfinal question that you are likely to be\nasked in using selenium is how can you\nsubmit a form using selenium well in\nthis instance that's relatively easy the\nfollowing lines of code will let you\nsubmit a form in selenium which would be\nweb element el equals driver dot find\nelement and then you put in the id and\nthe element id and then l submit open\nclose parentheses semicolon so let's\njust get into the first section which is\nconfiguration management so one of the\nquestions that you'll get asked right\naway is why do you have ssl certificates\nused for chef really fundamentally your\nimmediate answer should be security ssl\nprovides for a very high level of\nprivate security and private and public\nkey pairing this really is essential to\nensure that you have a secure\nenvironment throughout your entire\nnetwork the second part should be that\nif you're using ssl and you're using the\nprivate public key model within ssl\nyou're able to guarantee the systems on\nyour network that the chef that you'll\nbe able to validate that the nodes\nwithin your network that chef is\nvalidating against actually are the real\nnodes themselves not imposters so you\nwill also be asked some questions such\nas the following which is the following\ncommands would you use to stop or\ndisable the http service when the system\nboots and you'll typically get four\nresponses and there'll be\nsystem ctl disable httpd.service\nor is it system disable http.service\nsystem disable httpd or the final option\nwhich is system ctl disable\nhttpd.service\nyour answer should be the first one\nwhich is hashtag\nsystemctldisablehttp.service\nso chef comes with a series of tools\nthat allow it to function effectively\nand one of the tools that you're going\nto be asked about is what is test\nkitchen and test kitchen is essentially\na command line tool that allows you to\nbe able to test out your cookbook before\nyou actually deploy it to a real note so\nsome of the commands that you would use\nare for instance if you want to create\nan instance of test kitchen you would do\nkitchen create if you want to destroy an\ninstance after you created it you do\nkitchen destroy and if you want to be\nable to combine multiple instances you\nwould do kitchen converge so a question\nyou'll get is around chef is how does\nchef apply differ from chef client so\nfundamentally the difference between\nthem is that chef apply will validate\nthe recipe that you're working on\nwhereas chef client looks to apply and\nvalidate the entire cookbook that's run\nin your server environment so one is\nfocused on the recipe and the other is\nfocused on the entire cookbook\nso there are some differences when\nyou're working with different command\nlines so for instance when you're\nworking with puppets and you're working\nwith one version of puppet and you want\nto do what is the command to sign a\nrequested certificate the top example\nhere is for public version 2.7 whereas\nthe lower option here is for puppet\nversion 3. now something to bear in mind\nwhen you're going through your interview\nprocess is that the tools that are used\nwithin a continuous integration\ncontinuous delivery devops model do vary\nand so you want to be able to talk\nknowledgeably about the different\nversions of the tools so that when\nyou're talking to your interviewer\nyou're able to show the deep knowledge\nthat you have which open source or\ncommunity tools do you use to make\npuppet more powerful and essentially\nthis question is going to be asking you\nto look beyond the core foundation of\npuppet itself and so the three options\nyou have is uh being able to track\nconfigurations with jira which you\nshould be doing anyway but it's a great\nway to be able to clearly communicate\nthe work that's being done with puppet\nour version control can be extended with\nget and then the changes should be\npassed through jenkins so the three\ntools you want to be looking at\nintegration with jira git and jenkins so\nwhat are the resources in puppet well\nfundamentally there are four the\nresources are basic units of any\nconfiguration management tool they are\nthe features of the nodes they are the\nwritten catalog and the execution of the\ncatalog on a node so as we dig deeper\ninto puppet one of the things that you\nare likely to be asked regarding puppet\nis what is a class and puppet and so a\nclass in puppet is really the name\nblocks in your manifest that contain the\nvarious configurations and this thing\ncan include services files and packages\nand we have on the screen here an\nexample of what a class would look like\nwhen you write it out and you may want\nto memorize just one class don't\nmemorize just a whole set of classes\njust memorize one the person that's\ninterviewing you is just really looking\nfor someone who has a working knowledge\nthey're not looking for you to have\nmemorized complete massive classes but\nhaving one small class to be able to\nillustrate the experience you have is\nextremely valuable to the interviewer\nparticularly if it's a technical\ninterview so as we move into ansible one\nof the things that you're going to be\nasked around ansible is what is ansible\nrole so a role is an independent block\nof tasks and variable files and\ntemplates embedded with inside of the\nplaybook so example we have here on the\nscreen actually shows you one role\nwithin a playbook and in this role it is\nto install tomcat on a node again as\nwith previous question within puppet of\na class it's probably good to have\nmemorized just one or two roles so you\ncan talk knowledgeably about ansible\nwhen you're having your interview so\nwhen you're working with ansible when\nshould you be using the curly brackets\nand so just as a frame of reference uh\nthere's often two different ways that\nthese kind of brackets are referred to\nnow they're either referred to as french\nbrackets or curly brackets either way\nand what you'll be wanting to ask is\nwhen would you use these specific types\nof brackets within ansible and really\nthe answer comes down to two things one\nis that it makes it easier to\ndistinguish strings and undefined\nvariables and the second is for putting\ntogether conditional statements when you\nare actually using variables and the\nexample we have here is this prints the\nvalue of and we have foo and we have to\nthen put in the variable conditional\nstatement of vu is defined as something\nso what is the best way to make content\nreusable and redistributable\nwith ansible and there's really\nessentially three the first is to\ninclude a sub module or another file in\nyour playbook the second is to import an\nimprovement of an include which ensures\nthat a file is added only once and then\nthe third is roles to manage the tasks\nwithin the playbook\nso a question you will be asked is\nprovide a differences between ansible\nand puppets so if we look at ansible\nit's a very easy agentless installation\nit's based on python you can configure\nit with yaml and there are no support\nfor windows in contrast puppet is an\nagent-based installation it's written in\nruby the configuration files are written\nin dsl and it has support on all popular\noperating systems so we dig deeper into\nthe actual architecture ansible it has a\nmuch more simple architecture and it's\ndefinitely a push only architecture in\ncontrast to puppet it's a more\ncomplicated but more sophisticated\narchitecture where you're able to have a\ncomplete environment managed by the\npuppet architecture so let's get on to\nour next section which is\ncontainerization\nso let's go through and you're going to\nbe asked to explain what the\narchitecture of docker is and docker\nreally is the most popular\ncontainerization environment so docker\nuses a client server architecture and\nthe docker client is a service which\nruns in a command line and then the\ndocker daemon which is run as a rest api\nwithin the command line will accept the\nrequests and interacts with the\noperating system in order to build the\ndocker images and run the docker\ncontainers and then the docker image is\na template of instructions which is used\nto create containers the docker\ncontainer is an executable package of\napplications and its dependencies\ntogether and then finally the docker\nregistry is a service to host and\ndistribute docker images among other\nusers so you'll also be asked to provide\nwhat are the advantages of docker over\nvirtual machine and and this is\nsomething that comes up very\nconsistently in fact um you may want to\neven extend it as having what are the\ndifferences between having a dedicated\nmachine a virtual machine and a docker\nor docker-like environment and really\nthe the arguments for docker are just\nabsolutely fantastic you know first of\nall docker does contain and occupy\ndocket containers occupy significantly\nless space than a virtual machine or a\ndedicated machine the boot up time on\ndocker is significantly faster than a vm\ncontainers have a much better\nperformance as they are hosted in a\nsingle docker image docker is highly\nefficient and very easy to scale\nparticularly when you start working with\nkubernetes easily portable across\nmultiple platforms and then finally for\nspace allocation docker data volumes can\nbe shared and reused among multiple\ncontainers the argument against virtual\nmachines is significant and particularly\nif you're going into an older\nenvironment where a company is still\nusing actual dedicated hardware and\nhaven't moved to a cloud or cloud-like\nenvironment your arguments for docker\nare going to be very very persuasive be\nvery clear on what the advantages are\nfor docker over a virtual machine\nbecause you want to be able to\nsuccinctly share them with your team and\nthis is something that's important when\nyou're going through the interview\nprocess but also equally important\nparticularly if you're working with a\ncompany that's transitioning or going\nthrough a digital transformation where\nthey aren't used to working with the\ntools like docker you need to be able to\neffectively share with that team what\nthe benefits are so how do we share\ndocker containers with different nodes\nand in this instance what you want to be\nable to do is leverage the power of\ndocker swarm so docker swarm is a tool\nwhich allows the it administrators and\ndevelopers to create and manage clusters\nof swarm nodes within the darker\nplatform and there are two elements to\nthe node there's the manager node and\nthen there's the the worker node the\nmanager node as you'd assume manages the\nentire infrastructure and the working\nnode is actually the work of the agent\nas it gets executed\nso what are the commands to create a\ndocker swarm and so here we have an\nexample of what a manager node would\nlook like and once you've created a\nswarm on your magic node you can now add\nworker nodes to that swarm and again\nwhen you're stepping through this\nprocess be very precise in the execution\npart that needs to be taken to be able\nto effectively create a swarm so start\nwith the manager node and then you\ncreate a worker node and then finally\nwhen a node is initialized as a manager\nnode it can immediately create a token\nand that token is used for the worker\nnodes and associating the ip address\nwith the worker nodes question 17 how to\nrun multiple containers using a single\nservice it is possible to run multiple\ncontainers a single service by using\ndocker compose and docker compose will\nactually run each of the services in\nisolation so that they can interact with\neach other the language used to write\nout the compose files that allow you to\nrun the service is called yaml and yamos\nstands for yet another markup language\nso what is the use of a docker file so\ndocker file actually is used for\ncreating docker images using the build\ncommand so let's go through and show on\nthe screen what that would look like and\nthis would be an opportunity where if\nyou're actually in a technical interview\nyou could potentially even ask hey can i\ndraw on a whiteboard and show you what\nthe architecture for using the build\ncommand would look like and what the\nprocess would look like um again when\nyou're going through an interview\nprocess as someone who interviews a lot\nof people one of the things i really\nlike is when an interview candidate does\nsomething that's slightly different and\nin this instance this is a great example\nof where you can stand up to the\nwhiteboard and actually show what can\nactually be done through actually\ncreating images on the whiteboard very\nquickly little square boxes where you\ncan actually show the flow for creating\na build environment as an architect this\nshould be something that you're\ncomfortable doing and by doing it in the\ninterview and certainly you want to ask\npermission before you actually do it but\ndoing this in the interview really helps\ndemonstrate your comfortable feelings of\nworking with these kind of architecture\ndrawings so back to the question of\ncreating a docker file so we go through\nand we have a docker file that actually\nthen goes ahead and creates the docker\nimage which then in turns creates the\ndocker container and then we are able to\npush that out up to a docker hub and\nthen share that docker hub with\neverybody else as part of the docker\nregistry with the whole network so what\nare the differences between docker image\nand docker containers so let's go\nthrough the docker image so the docker\nimages are templates of a docker\ncontainer an image is built using a\ndocker file and it stores that docker\nfile in a docker repository or a docker\nhub\nand you can use docker hub as an example\nand the image layer is a read only file\nsystem the docker container is a\ncollection of the runtime instances of a\ndocker image and the containers are\ncreated using docker images and they are\nstored in the docker daemon and every\ncontainer is a layer is a read write\nfile system so you can't replace the\ninformation you can only append to it\nso while you can actually use yaml or\nwriting your so a question you can be\nasked is instead of yammer what can be\nan alternate file to build docker\ncompose so yaml is the one that is the\ndefault but you can also use json so if\nyou are comfortable working with json\nand my that is something that you should\nbe uh get comfortable with is you want\nto be able to use that to name your\nfiles and as a frame reference adjacent\nis a logical way of being able to do\nvalue paired matching using a javascript\nlike syntax\nso you're going to be asked to how to\ncreate a docker container so let's go\nthrough what that would look and we'll\nbreak it down task by task so the task\nis going to be create a mysql docker\ncontainer so to do that you want to be\nable to build a docker image or pull\nfrom an existing docker image from a\ndocker repository or hub and then you\nwant to be able to then use docker to\ncreate a new container which has my\nsequel from the existing docker image\nsimultaneously the layer of read write\nfile system is also created on top of\nthat image and below at the bottom of\nthe screen we have what the commands\nlines look for that so what is the\ndifference between a registry and a\nrepository so let's go through that so\nfor the docker registry and repository\nfor the registry we have a docker\nregistry is an open source server-side\nservice used for hosting and\ndistributing docker images whereas in\ncontrast for repositories a collection\nof multiple versions of a docker image\nin a registry a user can distinguish\nbetween docker images with their tag\nnames and then finally on the registry\ndocker also has its own default registry\ncalled docker harb for the repository it\nis a collection of multiple versions of\ndocker images it is stored in a docker\nregistry and it has two types of public\nand private registry so you can actually\ncreate your own enterprise registry so\nyou're gonna be asked you know what are\nthe cloud platforms that support docker\nreally you know lifts them all and we\nhave listed here amazon web services\nmicrosoft azure google cloud rackspace\nbut you could add in their ibm bluemix\ncould put in red hat really any of the\ncloud service providers out there today\ndo support docker it's just become an\nindustry standard so what is the purpose\nof expose and publish commands in docker\nso if we go through expose is an\ninstruction used in docker file whereas\npublish is used in docker run command\nfor expose it is used to expose ports\nwithin a docker network whereas with\npublish it can be used outside of a\ndocker environment for expose it is a\ndocumenting instruction used at the time\nof building an image and running a\ncontainer whereas with published is used\nas to map a host port to a running\ncontainer port for expose is the command\nused in docker whereas for publish we\nuse the command-p\nfor when we're doing our command line\nused in docker and examples of these are\nexpose 8080 or with docker we would put\nin or for publish we'd do the example\ndocker run dash d dash p and then\n0.0.0.80\na colon 80 as our command line so let's\nlook at continuous monitoring so with\ncontinuous monitoring how does nagios\nhelp in continuous monitoring of systems\napplications and servers and so this is\nreally just a high level question of\nusing nagios within your environment and\nyou should be able to just come back\nvery quickly and say nagios allows you\nto help manage the servers and check if\nthey've been sufficiently utilized and\nif there are any task failures that need\nto be addressed and so there are three\nareas of utilization and risk that you\nwant to be able to manage this is being\nable to verify the status and services\nof the entire network the health of your\ninfrastructure as a whole and if\napplications are working properly\ntogether with web services and apis that\nare reachable\nso the second question you'll be asked\nis how does negatives help in continuous\nmonitoring of systems applications and\nservices so it's able to do this by\nhaving the initial negative process and\nscheduler and the additional plugins\nthat you would use for your network\nconnect with the remote resources and\nthe negatives web interface to be able\nto run status checks on a predefined\nschedule so what do you mean by nagios\nremote plugin executor or the mpre of\nnagios so mpre allows you to execute\nplugins on links unix machines that\nallow you to do additional monitoring\nand machine metrics such as disk usage\ncpu load etc what are the ports used by\nnagios for monitoring purposes in this\nexample there are three and they're easy\nto remember so i would memorize these\nthree but they're essentially ports five\nsix six six\nfive six six seven and five six six\neight so there are two types of checks\nwithin that year so you will be asked\nfor what is an active and passive check\nin nagios so an active check and is\ninitiated by the nagios process and is\nrun on a regular schedule a passive\ncheck is initiated and formed by an\nexternal application or process so this\nmay be where a system is failing and\nchecks are results are submitted to\nnigeria's for processing and to continue\nwith this for what is an active and\npassive check active checks are\ninitiated by the check logic within the\nnagios daemon negas will execute a\nplug-in and pass information about what\nneeds to be checked plug-in will then\ncheck the operational state of the host\noil service and then process the results\nof the host or service check and send\nout notifications in contrast with the\npassive check it is an external\napplication that initiates the check it\nwrites the results of the check to an\nexternal command line file and i guess\nreads the external command file and\nplaces the results of all passive checks\nin a queue for later processing so you\ncan go back and revalidate and then\nnegotiate may send out notifications log\nalerts etc depending on the results that\nthey get from checking the information\nso you're going to be asked to explain\nthe main configuration file and its\nlocation in nagio so the main\nconfiguration file consists of a number\nof directives that affect how nagios\noperate so consider this as the\nconfiguration file that's read by both\nnagios processor and the cgis so this\nwill allow you to be able to manage the\nmain configuration file that's placed\ninto your settings directory so what is\nthe nagios network analyzer and again\nhold out your four fingers because there\nare four options here so the nagios\nnetwork analyzer are one provides an\nin-depth look at all your network\ntraffic source and security threats two\nallows system admins to gather\nhigh-level information on the health of\nyour network three provides a central\nview of your network traffic and\nbandwidth data and then four allows you\nto proactive in resolving outages\nabnormal behavior and threats before\nthey affect critical business processes\nso what are the benefits of http and ssl\ncertificate monitoring with nagios so\nwith http certificate monitoring it\nallows you to have increased server and\nservices and application availability\nobviously very important fast detection\nof network outages and protocol failures\nand allows web transaction and web\nservice performance monitoring the ssl\ncertificate monitoring allows you for\nincreased website availability frequent\napplication availability and provides\nincreased security so explain\nvirtualization with nagios so in\nresponses the first thing you should be\nable to talk about is how nagios itself\ncan run on many different virtualization\nplatforms including microsoft visual pc\nvmware zen amazon ec2 et cetera et\ncetera so just make sure you get that\nright off the bat now yes it was able to\nprovide capabilities tomorrow assortment\nof metrics on different platforms it\nallows for ensure for quick detection of\nservice and application failures and has\nthe ability to be able to monitor\nagainst many metrics including cpu usage\nmemory networking and vm status so name\nthe three variables that affect\nrecursion inheritance in nagios and it\nis name use and register so name is a\ntemplate name that can be referenced in\nother object definitions use specifies\nthe name of the template object that you\nwant to inherit its properties and\nvariables from and register indicates\nwhether or not the object definition\nshould be registered to nagios and on\nthe right hand side of the screen we\nhave an example of what that script\nwould look like again you may want to be\nable to memorize this as it's something\nthat you can actually write down and\nshow someone if you're going through a\ntechnical interview so why is nagios\nsaid to be object oriented and\nfundamentally comes down to the object\nconfiguration format that you can use in\nyour object definitions it allows you to\ninherit properties from other object\ndefinitions and this is typical of\nobject-oriented development and is now\napplied for the nagios environment so\nsome of the objects that you can inherit\nare services hosts commands and time\nperiods so finally explain what is state\ntalking in nagios and so there are\nreally four options here when you're\ntalking about state stalking so state\nstalking is used for logging purposes in\nnagios it allows you to enable for a\nparticular host or service that\nneighbors will watch over very carefully\nit will log any changes it sees in the\noutput of the check results and then\nfinally helps the analysis of log files\nand so with this we have reached the end\nof our devops whole course we hope that\nyou guys found it informative and\nhelpful\ndo like and share it thanks for watching\nand stay tuned for more from simplylaw\nhi there if you like this video\nsubscribe to the simply learn youtube\nchannel and click here to watch similar\nvideos turn it up and get certified\nclick here\n",
  "words": [
    "hey",
    "everyone",
    "welcome",
    "devops",
    "full",
    "course",
    "simply",
    "learn",
    "complete",
    "course",
    "learn",
    "everything",
    "need",
    "know",
    "excellent",
    "devops",
    "matthews",
    "chidanand",
    "anuj",
    "guide",
    "us",
    "journey",
    "shall",
    "begin",
    "basic",
    "understanding",
    "devops",
    "short",
    "animated",
    "video",
    "shall",
    "dive",
    "deeper",
    "understand",
    "devops",
    "shall",
    "see",
    "relevance",
    "present",
    "scenario",
    "shall",
    "learn",
    "different",
    "tools",
    "learning",
    "journey",
    "tools",
    "shall",
    "see",
    "git",
    "gradle",
    "maven",
    "selenium",
    "docker",
    "chef",
    "ansible",
    "puppet",
    "nagios",
    "jenkins",
    "fair",
    "amount",
    "knowledge",
    "regarding",
    "devops",
    "devops",
    "tools",
    "look",
    "interview",
    "questions",
    "increase",
    "chances",
    "crack",
    "devops",
    "interview",
    "begin",
    "make",
    "sure",
    "subscribed",
    "youtube",
    "channel",
    "forget",
    "click",
    "bell",
    "icon",
    "never",
    "miss",
    "update",
    "simply",
    "learn",
    "without",
    "ado",
    "let",
    "begin",
    "animated",
    "introduction",
    "meet",
    "tim",
    "tim",
    "builds",
    "robot",
    "lab",
    "climate",
    "controlled",
    "environment",
    "done",
    "drops",
    "robot",
    "project",
    "partner",
    "mia",
    "house",
    "mia",
    "takes",
    "backyard",
    "ensure",
    "robot",
    "meets",
    "requirements",
    "problem",
    "arises",
    "change",
    "environment",
    "causes",
    "robot",
    "malfunction",
    "mia",
    "really",
    "annoyed",
    "lot",
    "correct",
    "seems",
    "tim",
    "really",
    "much",
    "wall",
    "leaves",
    "poor",
    "robot",
    "bite",
    "dust",
    "well",
    "broke",
    "wall",
    "tim",
    "miana",
    "work",
    "together",
    "common",
    "space",
    "tim",
    "develops",
    "block",
    "functionality",
    "robot",
    "immediately",
    "checked",
    "mia",
    "working",
    "simultaneously",
    "instead",
    "waiting",
    "finish",
    "task",
    "feature",
    "ready",
    "use",
    "put",
    "together",
    "build",
    "final",
    "product",
    "develop",
    "common",
    "mindset",
    "share",
    "ideas",
    "speed",
    "process",
    "use",
    "several",
    "tools",
    "automate",
    "every",
    "stage",
    "means",
    "robot",
    "ready",
    "sooner",
    "less",
    "iterations",
    "manual",
    "work",
    "organization",
    "perspective",
    "tim",
    "would",
    "developer",
    "mia",
    "operations",
    "union",
    "core",
    "devops",
    "approach",
    "devops",
    "several",
    "stages",
    "set",
    "tools",
    "automate",
    "stages",
    "let",
    "look",
    "tim",
    "first",
    "puts",
    "plan",
    "terms",
    "software",
    "could",
    "mean",
    "deciding",
    "modules",
    "algorithms",
    "use",
    "plan",
    "codes",
    "plan",
    "tools",
    "git",
    "tim",
    "repository",
    "storing",
    "codes",
    "different",
    "versions",
    "called",
    "version",
    "control",
    "next",
    "code",
    "fetched",
    "made",
    "executable",
    "build",
    "stage",
    "tools",
    "gradle",
    "maven",
    "sort",
    "deployment",
    "product",
    "tested",
    "catch",
    "bugs",
    "popular",
    "tool",
    "automating",
    "testing",
    "selenium",
    "products",
    "tested",
    "mia",
    "must",
    "deploy",
    "deployed",
    "product",
    "continuously",
    "configured",
    "desired",
    "state",
    "ansible",
    "puppet",
    "docker",
    "common",
    "tools",
    "used",
    "automate",
    "stages",
    "every",
    "product",
    "continuously",
    "monitored",
    "working",
    "environment",
    "nagios",
    "one",
    "tool",
    "automates",
    "space",
    "feedback",
    "fed",
    "back",
    "planning",
    "stage",
    "finally",
    "core",
    "devops",
    "lifecycle",
    "integration",
    "stage",
    "tools",
    "jenkins",
    "responsible",
    "sending",
    "code",
    "build",
    "test",
    "code",
    "passes",
    "tests",
    "sent",
    "deployment",
    "called",
    "continuous",
    "integration",
    "let",
    "look",
    "organization",
    "adopted",
    "devops",
    "approach",
    "sequence",
    "steps",
    "would",
    "follow",
    "develop",
    "software",
    "leave",
    "answers",
    "comment",
    "section",
    "keep",
    "eye",
    "right",
    "answer",
    "comment",
    "section",
    "youtube",
    "community",
    "giants",
    "amazon",
    "netflix",
    "target",
    "xc",
    "walmart",
    "adopted",
    "devops",
    "seen",
    "considerable",
    "increase",
    "delivery",
    "quality",
    "2014",
    "hour",
    "downtime",
    "netflix",
    "would",
    "cost",
    "two",
    "hundred",
    "thousand",
    "dollars",
    "became",
    "absolutely",
    "crucial",
    "netflix",
    "prepared",
    "sort",
    "failure",
    "took",
    "devops",
    "approach",
    "implemented",
    "unique",
    "way",
    "developed",
    "tool",
    "called",
    "simeon",
    "army",
    "tool",
    "created",
    "failures",
    "automatically",
    "deployed",
    "environment",
    "affect",
    "users",
    "team",
    "would",
    "troubleshoot",
    "failures",
    "gave",
    "enough",
    "experience",
    "deal",
    "degree",
    "collapse",
    "everything",
    "automated",
    "happening",
    "simultaneously",
    "organizations",
    "deliver",
    "much",
    "faster",
    "pace",
    "considering",
    "benefits",
    "devops",
    "divergence",
    "traditional",
    "methods",
    "would",
    "devops",
    "future",
    "uh",
    "going",
    "go",
    "need",
    "able",
    "go",
    "devops",
    "arguments",
    "need",
    "devops",
    "actually",
    "go",
    "individual",
    "tools",
    "need",
    "able",
    "successfully",
    "implement",
    "devops",
    "within",
    "organization",
    "addition",
    "also",
    "going",
    "take",
    "time",
    "go",
    "tools",
    "get",
    "good",
    "understanding",
    "instructions",
    "basic",
    "setup",
    "tools",
    "let",
    "get",
    "started",
    "devops",
    "process",
    "took",
    "delivery",
    "devops",
    "well",
    "model",
    "called",
    "waterfall",
    "waterfall",
    "traditional",
    "approach",
    "actually",
    "building",
    "solutions",
    "reason",
    "called",
    "waterfall",
    "bring",
    "individual",
    "requirements",
    "individual",
    "sections",
    "project",
    "cascade",
    "look",
    "breakdown",
    "requirements",
    "design",
    "implementation",
    "verification",
    "maintenance",
    "user",
    "acceptance",
    "testing",
    "based",
    "software",
    "development",
    "uh",
    "lifecycle",
    "model",
    "sdlc",
    "around",
    "quite",
    "time",
    "still",
    "used",
    "lot",
    "companies",
    "today",
    "challenge",
    "waterfall",
    "model",
    "really",
    "long",
    "drawn",
    "model",
    "actually",
    "building",
    "delivering",
    "solutions",
    "took",
    "long",
    "time",
    "actually",
    "um",
    "write",
    "code",
    "deploy",
    "code",
    "difficult",
    "actually",
    "identify",
    "problems",
    "within",
    "code",
    "provide",
    "feedback",
    "development",
    "team",
    "fix",
    "um",
    "really",
    "time",
    "consuming",
    "talking",
    "months",
    "sometimes",
    "years",
    "projects",
    "actually",
    "go",
    "waterfall",
    "model",
    "process",
    "along",
    "came",
    "new",
    "method",
    "able",
    "delivery",
    "called",
    "agile",
    "agile",
    "approach",
    "way",
    "able",
    "take",
    "actual",
    "work",
    "done",
    "waterfall",
    "model",
    "compress",
    "small",
    "iterations",
    "would",
    "fundamental",
    "change",
    "would",
    "actually",
    "take",
    "uh",
    "teams",
    "disparate",
    "part",
    "individual",
    "cascades",
    "within",
    "waterfall",
    "project",
    "actually",
    "bring",
    "together",
    "requirements",
    "team",
    "person",
    "design",
    "developer",
    "release",
    "management",
    "team",
    "together",
    "one",
    "group",
    "working",
    "iteration",
    "great",
    "thing",
    "agile",
    "took",
    "process",
    "weeks",
    "months",
    "even",
    "years",
    "length",
    "waterfall",
    "reduce",
    "two",
    "four",
    "week",
    "sprints",
    "depending",
    "cadence",
    "team",
    "uh",
    "typically",
    "sprint",
    "goal",
    "end",
    "sprint",
    "sometimes",
    "every",
    "sprint",
    "would",
    "software",
    "release",
    "customers",
    "getting",
    "software",
    "much",
    "faster",
    "problem",
    "still",
    "ran",
    "though",
    "um",
    "agile",
    "fundamentally",
    "similar",
    "waterfall",
    "uh",
    "devops",
    "person",
    "working",
    "code",
    "system",
    "working",
    "great",
    "computer",
    "operations",
    "person",
    "migrating",
    "code",
    "developers",
    "environment",
    "test",
    "environment",
    "production",
    "environment",
    "would",
    "run",
    "issues",
    "code",
    "simply",
    "work",
    "lot",
    "reasons",
    "would",
    "happen",
    "uh",
    "actual",
    "developer",
    "environment",
    "would",
    "often",
    "different",
    "would",
    "different",
    "dependencies",
    "hardware",
    "software",
    "may",
    "additional",
    "uh",
    "applications",
    "installed",
    "operating",
    "system",
    "simply",
    "transferred",
    "operations",
    "environment",
    "would",
    "disconnect",
    "developer",
    "environment",
    "operations",
    "environment",
    "making",
    "difficult",
    "um",
    "actually",
    "roll",
    "code",
    "run",
    "program",
    "rolled",
    "code",
    "rollback",
    "plan",
    "case",
    "code",
    "would",
    "work",
    "production",
    "release",
    "became",
    "event",
    "everybody",
    "got",
    "stressed",
    "actual",
    "event",
    "releasing",
    "code",
    "know",
    "whether",
    "going",
    "work",
    "devops",
    "really",
    "looks",
    "address",
    "solve",
    "lot",
    "problems",
    "key",
    "word",
    "often",
    "hear",
    "devops",
    "continuous",
    "integration",
    "means",
    "essentially",
    "developer",
    "working",
    "code",
    "code",
    "constantly",
    "tested",
    "actual",
    "code",
    "unit",
    "testing",
    "environment",
    "going",
    "released",
    "goal",
    "devops",
    "model",
    "breakdown",
    "communication",
    "happens",
    "waterfall",
    "agile",
    "dev",
    "developers",
    "operations",
    "teams",
    "working",
    "environment",
    "removed",
    "able",
    "provide",
    "continuous",
    "contiguous",
    "environment",
    "developer",
    "apple",
    "actual",
    "operating",
    "model",
    "reality",
    "developer",
    "working",
    "code",
    "actually",
    "working",
    "environment",
    "identical",
    "production",
    "environment",
    "actual",
    "operations",
    "person",
    "comes",
    "actually",
    "releases",
    "code",
    "see",
    "teams",
    "many",
    "20",
    "even",
    "50",
    "releases",
    "production",
    "environments",
    "every",
    "single",
    "day",
    "able",
    "guarantee",
    "actual",
    "code",
    "work",
    "releases",
    "go",
    "stressful",
    "event",
    "byproduct",
    "good",
    "testing",
    "good",
    "setup",
    "structure",
    "actually",
    "build",
    "solutions",
    "seeing",
    "goal",
    "developer",
    "operations",
    "person",
    "code",
    "working",
    "continuously",
    "environments",
    "continuous",
    "integration",
    "continuous",
    "delivery",
    "simply",
    "put",
    "able",
    "able",
    "eliminate",
    "problem",
    "operation",
    "environment",
    "sync",
    "development",
    "environment",
    "improvement",
    "agile",
    "say",
    "waterfall",
    "agile",
    "wrong",
    "delivery",
    "models",
    "maturity",
    "ability",
    "deliver",
    "solutions",
    "devops",
    "another",
    "rung",
    "maturity",
    "curve",
    "using",
    "tools",
    "available",
    "us",
    "five",
    "ten",
    "years",
    "ago",
    "simply",
    "available",
    "goal",
    "team",
    "move",
    "devops",
    "model",
    "implement",
    "continuous",
    "releases",
    "software",
    "long",
    "using",
    "tools",
    "available",
    "good",
    "news",
    "tools",
    "open",
    "source",
    "tools",
    "let",
    "go",
    "benefits",
    "want",
    "go",
    "use",
    "devops",
    "know",
    "essentially",
    "let",
    "next",
    "slides",
    "going",
    "go",
    "devops",
    "going",
    "go",
    "benefits",
    "devops",
    "last",
    "slides",
    "actually",
    "seen",
    "know",
    "devops",
    "benefits",
    "devops",
    "along",
    "life",
    "cycle",
    "also",
    "going",
    "start",
    "digging",
    "tools",
    "useful",
    "devops",
    "going",
    "focus",
    "seven",
    "tools",
    "provide",
    "infrastructure",
    "delivering",
    "devops",
    "solutions",
    "significantly",
    "tools",
    "available",
    "market",
    "seven",
    "popular",
    "uh",
    "categories",
    "devops",
    "really",
    "essential",
    "collaboration",
    "development",
    "team",
    "operations",
    "team",
    "teams",
    "past",
    "somewhat",
    "conflict",
    "opportunity",
    "teams",
    "work",
    "continuously",
    "expectation",
    "devops",
    "continue",
    "mature",
    "indeed",
    "actually",
    "even",
    "seeing",
    "groups",
    "called",
    "devsecops",
    "integrating",
    "security",
    "part",
    "delivery",
    "development",
    "team",
    "operations",
    "team",
    "bottom",
    "line",
    "devops",
    "engineer",
    "highly",
    "demand",
    "demand",
    "devops",
    "engineer",
    "literally",
    "going",
    "roof",
    "salaries",
    "going",
    "exponentially",
    "around",
    "let",
    "dig",
    "benefits",
    "devops",
    "new",
    "catchphrase",
    "actually",
    "got",
    "significant",
    "value",
    "speed",
    "delivery",
    "software",
    "benefits",
    "devops",
    "really",
    "broken",
    "number",
    "key",
    "areas",
    "first",
    "continuous",
    "delivery",
    "software",
    "allows",
    "continuously",
    "release",
    "new",
    "features",
    "security",
    "understanding",
    "software",
    "going",
    "high",
    "quality",
    "allows",
    "teams",
    "working",
    "software",
    "delivery",
    "within",
    "organization",
    "effectively",
    "collaborate",
    "talking",
    "page",
    "understanding",
    "needs",
    "delivered",
    "deployment",
    "process",
    "moves",
    "event",
    "lot",
    "stress",
    "lot",
    "contingency",
    "plans",
    "much",
    "easier",
    "deployment",
    "efficiency",
    "within",
    "actual",
    "code",
    "writing",
    "ability",
    "scale",
    "using",
    "different",
    "tools",
    "available",
    "allows",
    "able",
    "bring",
    "scale",
    "reduce",
    "teams",
    "running",
    "software",
    "needed",
    "errors",
    "fixed",
    "much",
    "earlier",
    "quickly",
    "caught",
    "anything",
    "gets",
    "pushed",
    "production",
    "environment",
    "fundamentally",
    "looking",
    "improving",
    "security",
    "actual",
    "releases",
    "actual",
    "concept",
    "security",
    "center",
    "work",
    "finally",
    "really",
    "allows",
    "reduce",
    "number",
    "errors",
    "much",
    "less",
    "manual",
    "intervention",
    "greater",
    "reliance",
    "scripted",
    "environments",
    "actually",
    "test",
    "validate",
    "security",
    "reliability",
    "uptime",
    "efficiency",
    "let",
    "talk",
    "little",
    "bit",
    "life",
    "cycle",
    "devops",
    "first",
    "step",
    "take",
    "actually",
    "build",
    "build",
    "test",
    "environment",
    "continuous",
    "building",
    "test",
    "branch",
    "managed",
    "first",
    "step",
    "source",
    "code",
    "move",
    "looking",
    "continuous",
    "integration",
    "means",
    "every",
    "time",
    "somebody",
    "checks",
    "code",
    "validating",
    "code",
    "actually",
    "run",
    "production",
    "environment",
    "actually",
    "passed",
    "end",
    "continuous",
    "integration",
    "testing",
    "code",
    "looking",
    "continuous",
    "deployment",
    "code",
    "works",
    "available",
    "released",
    "production",
    "environment",
    "let",
    "go",
    "ahead",
    "release",
    "actually",
    "release",
    "code",
    "want",
    "able",
    "validate",
    "environment",
    "working",
    "efficiently",
    "may",
    "release",
    "code",
    "new",
    "feature",
    "within",
    "application",
    "customers",
    "may",
    "gravitate",
    "immediately",
    "new",
    "feature",
    "want",
    "able",
    "ensure",
    "code",
    "working",
    "importantly",
    "infrastructure",
    "support",
    "finally",
    "looking",
    "software",
    "released",
    "continuous",
    "event",
    "go",
    "back",
    "beginning",
    "start",
    "working",
    "code",
    "run",
    "build",
    "environment",
    "continuous",
    "integration",
    "deployment",
    "continuous",
    "monitoring",
    "keep",
    "cycle",
    "moving",
    "let",
    "dig",
    "tools",
    "devops",
    "engineer",
    "would",
    "need",
    "learn",
    "break",
    "environment",
    "way",
    "source",
    "code",
    "management",
    "software",
    "release",
    "number",
    "key",
    "tools",
    "want",
    "able",
    "use",
    "instance",
    "source",
    "code",
    "management",
    "get",
    "open",
    "source",
    "tool",
    "would",
    "want",
    "use",
    "managing",
    "code",
    "continuous",
    "build",
    "test",
    "environment",
    "managed",
    "maven",
    "selenium",
    "integration",
    "environments",
    "working",
    "managed",
    "jenkins",
    "actual",
    "deployment",
    "production",
    "environments",
    "managed",
    "products",
    "ansible",
    "docker",
    "monitoring",
    "network",
    "would",
    "used",
    "tools",
    "like",
    "negios",
    "thing",
    "remember",
    "tools",
    "open",
    "source",
    "tools",
    "licensing",
    "uh",
    "purchase",
    "uh",
    "tools",
    "pro",
    "level",
    "licensing",
    "choose",
    "select",
    "get",
    "started",
    "open",
    "source",
    "tools",
    "actually",
    "start",
    "using",
    "free",
    "right",
    "start",
    "downloading",
    "installing",
    "git",
    "system",
    "look",
    "git",
    "bash",
    "interface",
    "type",
    "basic",
    "git",
    "commands",
    "next",
    "create",
    "local",
    "repository",
    "create",
    "repository",
    "local",
    "machine",
    "connect",
    "remote",
    "repository",
    "finally",
    "push",
    "file",
    "onto",
    "github",
    "first",
    "things",
    "first",
    "need",
    "download",
    "install",
    "git",
    "download",
    "git",
    "windows",
    "select",
    "second",
    "link",
    "latest",
    "version",
    "kit",
    "one",
    "want",
    "windows",
    "system",
    "choose",
    "version",
    "mine",
    "system",
    "downloading",
    "take",
    "git",
    "finally",
    "downloaded",
    "need",
    "install",
    "system",
    "click",
    "run",
    "go",
    "next",
    "change",
    "path",
    "uh",
    "click",
    "quick",
    "launch",
    "desktop",
    "next",
    "next",
    "next",
    "nothing",
    "change",
    "either",
    "install",
    "git",
    "getting",
    "installed",
    "system",
    "need",
    "view",
    "release",
    "notes",
    "want",
    "launch",
    "git",
    "bash",
    "let",
    "tick",
    "click",
    "finish",
    "git",
    "bash",
    "interface",
    "appears",
    "master",
    "branch",
    "first",
    "thing",
    "check",
    "version",
    "git",
    "command",
    "git",
    "dash",
    "dash",
    "version",
    "see",
    "version",
    "windows",
    "system",
    "exactly",
    "downloaded",
    "explore",
    "help",
    "command",
    "let",
    "type",
    "get",
    "help",
    "config",
    "config",
    "another",
    "command",
    "hit",
    "enter",
    "manual",
    "page",
    "second",
    "command",
    "opened",
    "config",
    "help",
    "command",
    "provides",
    "manual",
    "help",
    "page",
    "command",
    "following",
    "case",
    "doubts",
    "regarding",
    "command",
    "used",
    "command",
    "used",
    "various",
    "syntax",
    "command",
    "always",
    "use",
    "help",
    "command",
    "another",
    "syntax",
    "using",
    "help",
    "command",
    "git",
    "config",
    "dash",
    "dash",
    "help",
    "enter",
    "exact",
    "thing",
    "see",
    "looked",
    "help",
    "command",
    "let",
    "begin",
    "creating",
    "local",
    "directory",
    "mkdir",
    "test",
    "test",
    "new",
    "directory",
    "move",
    "directory",
    "cd",
    "test",
    "great",
    "inside",
    "test",
    "directory",
    "let",
    "initialize",
    "directory",
    "git",
    "init",
    "command",
    "initializing",
    "directory",
    "see",
    "see",
    "path",
    "local",
    "path",
    "directory",
    "created",
    "show",
    "directory",
    "test",
    "completely",
    "empty",
    "create",
    "text",
    "file",
    "within",
    "new",
    "directory",
    "created",
    "new",
    "text",
    "document",
    "name",
    "demo",
    "open",
    "put",
    "dummy",
    "content",
    "hello",
    "simply",
    "done",
    "save",
    "file",
    "go",
    "back",
    "bash",
    "interface",
    "let",
    "check",
    "status",
    "git",
    "status",
    "see",
    "file",
    "appeared",
    "visible",
    "nothing",
    "committed",
    "yet",
    "means",
    "made",
    "change",
    "file",
    "git",
    "tool",
    "next",
    "thing",
    "going",
    "adding",
    "demo",
    "current",
    "directory",
    "next",
    "command",
    "applying",
    "commit",
    "command",
    "add",
    "certain",
    "files",
    "current",
    "directory",
    "commit",
    "command",
    "applied",
    "directories",
    "git",
    "commit",
    "minus",
    "message",
    "appear",
    "file",
    "committed",
    "see",
    "one",
    "file",
    "changed",
    "one",
    "insertion",
    "clear",
    "screen",
    "next",
    "thing",
    "need",
    "need",
    "link",
    "git",
    "github",
    "account",
    "command",
    "git",
    "config",
    "global",
    "user",
    "dot",
    "username",
    "followed",
    "username",
    "let",
    "show",
    "github",
    "account",
    "github",
    "profile",
    "username",
    "guys",
    "begin",
    "procedure",
    "make",
    "github",
    "account",
    "type",
    "username",
    "simply",
    "learn",
    "github",
    "enter",
    "go",
    "git",
    "successfully",
    "linked",
    "github",
    "next",
    "thing",
    "open",
    "github",
    "create",
    "new",
    "repository",
    "give",
    "repository",
    "name",
    "name",
    "test",
    "underscore",
    "demo",
    "create",
    "repository",
    "great",
    "repository",
    "created",
    "remote",
    "repository",
    "next",
    "copy",
    "link",
    "go",
    "back",
    "bash",
    "interface",
    "need",
    "link",
    "remote",
    "local",
    "repository",
    "git",
    "remote",
    "origin",
    "paste",
    "http",
    "link",
    "local",
    "repository",
    "remote",
    "repository",
    "linked",
    "push",
    "local",
    "file",
    "onto",
    "remote",
    "repository",
    "command",
    "git",
    "push",
    "origin",
    "master",
    "master",
    "branch",
    "done",
    "let",
    "move",
    "back",
    "github",
    "click",
    "test",
    "demo",
    "see",
    "local",
    "file",
    "pushed",
    "remote",
    "repository",
    "successfully",
    "completed",
    "demo",
    "going",
    "introduce",
    "concept",
    "version",
    "control",
    "use",
    "within",
    "devops",
    "environment",
    "talk",
    "different",
    "tools",
    "available",
    "distributed",
    "version",
    "control",
    "system",
    "highlight",
    "product",
    "called",
    "git",
    "typically",
    "used",
    "version",
    "control",
    "today",
    "also",
    "go",
    "differences",
    "get",
    "github",
    "may",
    "used",
    "github",
    "past",
    "products",
    "like",
    "get",
    "lab",
    "explain",
    "differences",
    "git",
    "git",
    "services",
    "github",
    "git",
    "lab",
    "break",
    "architecture",
    "get",
    "process",
    "looks",
    "like",
    "go",
    "create",
    "forks",
    "clones",
    "collaborators",
    "added",
    "projects",
    "go",
    "process",
    "branching",
    "merging",
    "rebasing",
    "project",
    "list",
    "commands",
    "available",
    "get",
    "finally",
    "take",
    "demo",
    "actually",
    "run",
    "git",
    "instance",
    "use",
    "software",
    "git",
    "public",
    "service",
    "github",
    "right",
    "let",
    "talk",
    "little",
    "bit",
    "version",
    "control",
    "systems",
    "may",
    "already",
    "using",
    "virtual",
    "control",
    "system",
    "within",
    "environment",
    "today",
    "may",
    "used",
    "tools",
    "microsoft",
    "team",
    "foundation",
    "services",
    "essentially",
    "use",
    "version",
    "control",
    "system",
    "allows",
    "people",
    "able",
    "files",
    "stored",
    "single",
    "repository",
    "working",
    "developing",
    "new",
    "program",
    "website",
    "application",
    "would",
    "store",
    "version",
    "control",
    "software",
    "single",
    "repository",
    "happens",
    "somebody",
    "wants",
    "make",
    "changes",
    "code",
    "would",
    "check",
    "code",
    "repository",
    "make",
    "changes",
    "would",
    "addendum",
    "added",
    "um",
    "version",
    "one",
    "changes",
    "person",
    "would",
    "later",
    "check",
    "code",
    "version",
    "2",
    "add",
    "code",
    "keep",
    "adding",
    "versions",
    "code",
    "bottom",
    "line",
    "eventually",
    "people",
    "able",
    "use",
    "code",
    "code",
    "stored",
    "centralized",
    "location",
    "however",
    "challenge",
    "running",
    "difficult",
    "large",
    "groups",
    "work",
    "simultaneously",
    "within",
    "project",
    "benefits",
    "vcs",
    "system",
    "version",
    "control",
    "system",
    "demonstrates",
    "able",
    "store",
    "multiple",
    "versions",
    "solution",
    "single",
    "repository",
    "let",
    "take",
    "step",
    "challenges",
    "traditional",
    "version",
    "control",
    "systems",
    "see",
    "addressed",
    "distributed",
    "version",
    "control",
    "distributed",
    "version",
    "control",
    "environment",
    "looking",
    "able",
    "code",
    "shared",
    "across",
    "team",
    "developers",
    "two",
    "people",
    "working",
    "software",
    "package",
    "need",
    "able",
    "effectively",
    "share",
    "code",
    "amongst",
    "constantly",
    "working",
    "latest",
    "piece",
    "code",
    "key",
    "part",
    "distributed",
    "version",
    "control",
    "system",
    "different",
    "traditional",
    "version",
    "control",
    "system",
    "developers",
    "entire",
    "code",
    "local",
    "systems",
    "try",
    "keep",
    "updated",
    "time",
    "role",
    "distributed",
    "vcs",
    "server",
    "ensure",
    "client",
    "developer",
    "developer",
    "developer",
    "clients",
    "latest",
    "version",
    "software",
    "person",
    "share",
    "software",
    "like",
    "approach",
    "changes",
    "made",
    "server",
    "changes",
    "code",
    "changes",
    "redistributed",
    "development",
    "team",
    "tool",
    "able",
    "effective",
    "distributed",
    "vcs",
    "environment",
    "get",
    "may",
    "remember",
    "actually",
    "covered",
    "git",
    "previous",
    "video",
    "uh",
    "reference",
    "video",
    "start",
    "remote",
    "git",
    "repository",
    "people",
    "making",
    "updates",
    "copy",
    "code",
    "local",
    "environment",
    "local",
    "environment",
    "updated",
    "manually",
    "periodically",
    "pushed",
    "git",
    "repository",
    "always",
    "pushing",
    "latest",
    "code",
    "code",
    "changes",
    "made",
    "repository",
    "repository",
    "able",
    "pull",
    "back",
    "latest",
    "updates",
    "git",
    "repository",
    "becomes",
    "kind",
    "center",
    "universe",
    "updates",
    "able",
    "pushed",
    "pulled",
    "back",
    "allows",
    "able",
    "accomplish",
    "person",
    "always",
    "latest",
    "version",
    "code",
    "get",
    "get",
    "distributed",
    "version",
    "control",
    "tool",
    "used",
    "source",
    "code",
    "management",
    "github",
    "remote",
    "server",
    "source",
    "code",
    "management",
    "development",
    "team",
    "connect",
    "get",
    "client",
    "remote",
    "hub",
    "server",
    "git",
    "used",
    "track",
    "changes",
    "source",
    "code",
    "allows",
    "large",
    "teams",
    "work",
    "simultaneously",
    "supports",
    "development",
    "thousands",
    "parallel",
    "branches",
    "ability",
    "handle",
    "large",
    "projects",
    "efficiently",
    "let",
    "talk",
    "little",
    "bit",
    "git",
    "versus",
    "github",
    "get",
    "software",
    "tool",
    "whereas",
    "github",
    "service",
    "show",
    "two",
    "look",
    "moment",
    "install",
    "software",
    "tool",
    "git",
    "locally",
    "system",
    "whereas",
    "github",
    "service",
    "actually",
    "hosted",
    "website",
    "get",
    "actually",
    "software",
    "used",
    "manage",
    "different",
    "versions",
    "source",
    "code",
    "whereas",
    "github",
    "used",
    "copy",
    "local",
    "repository",
    "stored",
    "service",
    "website",
    "get",
    "provides",
    "command",
    "line",
    "tools",
    "allow",
    "interact",
    "files",
    "whereas",
    "git",
    "help",
    "graphical",
    "interface",
    "allows",
    "check",
    "check",
    "files",
    "let",
    "show",
    "two",
    "tools",
    "git",
    "website",
    "website",
    "would",
    "go",
    "download",
    "latest",
    "version",
    "git",
    "git",
    "software",
    "package",
    "install",
    "computer",
    "allows",
    "able",
    "version",
    "control",
    "environment",
    "environment",
    "successful",
    "however",
    "need",
    "able",
    "store",
    "files",
    "server",
    "somewhere",
    "typically",
    "lot",
    "companies",
    "use",
    "service",
    "git",
    "hub",
    "way",
    "able",
    "store",
    "files",
    "git",
    "communicate",
    "effectively",
    "github",
    "actually",
    "many",
    "different",
    "companies",
    "provide",
    "similar",
    "service",
    "github",
    "git",
    "lab",
    "another",
    "popular",
    "service",
    "also",
    "find",
    "development",
    "tools",
    "microsoft",
    "visual",
    "studio",
    "also",
    "incorporating",
    "git",
    "commands",
    "tools",
    "latest",
    "version",
    "visual",
    "studio",
    "team",
    "services",
    "also",
    "provides",
    "ability",
    "github",
    "remembered",
    "place",
    "actually",
    "store",
    "files",
    "easily",
    "create",
    "public",
    "shareable",
    "place",
    "store",
    "files",
    "create",
    "public",
    "shareable",
    "projects",
    "come",
    "github",
    "search",
    "projects",
    "see",
    "moment",
    "lot",
    "work",
    "blockchain",
    "actually",
    "search",
    "many",
    "hundreds",
    "projects",
    "fact",
    "think",
    "something",
    "like",
    "hundred",
    "thousand",
    "projects",
    "managed",
    "github",
    "moment",
    "number",
    "probably",
    "actually",
    "much",
    "larger",
    "working",
    "project",
    "would",
    "certainly",
    "encourage",
    "start",
    "github",
    "see",
    "somebody",
    "already",
    "maybe",
    "done",
    "prototype",
    "sharing",
    "open",
    "source",
    "project",
    "want",
    "share",
    "already",
    "available",
    "github",
    "certainly",
    "anything",
    "azure",
    "find",
    "thousands",
    "forty",
    "five",
    "thousand",
    "azure",
    "projects",
    "currently",
    "worked",
    "interestingly",
    "enough",
    "github",
    "recently",
    "acquired",
    "microsoft",
    "microsoft",
    "fully",
    "embracing",
    "open",
    "source",
    "technologies",
    "essentially",
    "difference",
    "git",
    "github",
    "one",
    "piece",
    "software",
    "git",
    "one",
    "service",
    "supports",
    "ability",
    "using",
    "software",
    "github",
    "let",
    "dig",
    "deeper",
    "actual",
    "git",
    "architecture",
    "working",
    "directory",
    "folder",
    "currently",
    "working",
    "git",
    "project",
    "demo",
    "later",
    "actually",
    "see",
    "actually",
    "simulate",
    "steps",
    "start",
    "working",
    "directory",
    "store",
    "files",
    "add",
    "files",
    "staging",
    "area",
    "getting",
    "ready",
    "commit",
    "files",
    "back",
    "main",
    "branch",
    "git",
    "project",
    "want",
    "push",
    "changes",
    "local",
    "repository",
    "made",
    "changes",
    "commit",
    "files",
    "get",
    "ready",
    "synchronization",
    "service",
    "push",
    "services",
    "remote",
    "repository",
    "example",
    "remote",
    "repository",
    "would",
    "github",
    "later",
    "want",
    "update",
    "code",
    "write",
    "code",
    "would",
    "pull",
    "latest",
    "changes",
    "remote",
    "repository",
    "copy",
    "local",
    "software",
    "always",
    "latest",
    "version",
    "software",
    "rest",
    "team",
    "working",
    "one",
    "things",
    "working",
    "new",
    "features",
    "within",
    "project",
    "create",
    "branches",
    "merge",
    "branches",
    "mainline",
    "code",
    "lots",
    "really",
    "creative",
    "things",
    "ensure",
    "code",
    "remains",
    "high",
    "quality",
    "b",
    "able",
    "seamlessly",
    "add",
    "new",
    "features",
    "without",
    "breaking",
    "core",
    "code",
    "let",
    "step",
    "concepts",
    "available",
    "get",
    "let",
    "talk",
    "forking",
    "cloning",
    "get",
    "terms",
    "quite",
    "old",
    "terms",
    "comes",
    "development",
    "forking",
    "certainly",
    "term",
    "goes",
    "way",
    "way",
    "way",
    "back",
    "um",
    "long",
    "distributed",
    "cvs",
    "systems",
    "ones",
    "using",
    "git",
    "fork",
    "piece",
    "software",
    "particular",
    "open",
    "source",
    "project",
    "would",
    "take",
    "project",
    "create",
    "copy",
    "project",
    "would",
    "associate",
    "new",
    "team",
    "new",
    "people",
    "around",
    "project",
    "becomes",
    "separate",
    "project",
    "entirety",
    "clone",
    "important",
    "comes",
    "working",
    "git",
    "clone",
    "identical",
    "teams",
    "structuring",
    "main",
    "project",
    "download",
    "code",
    "downloading",
    "exact",
    "copy",
    "code",
    "security",
    "access",
    "rights",
    "main",
    "code",
    "check",
    "code",
    "back",
    "potentially",
    "code",
    "identical",
    "could",
    "potentially",
    "become",
    "main",
    "line",
    "code",
    "future",
    "typically",
    "happen",
    "changes",
    "ones",
    "merge",
    "main",
    "branch",
    "also",
    "potential",
    "code",
    "could",
    "become",
    "main",
    "code",
    "git",
    "also",
    "add",
    "collaborators",
    "work",
    "project",
    "essential",
    "projects",
    "particularly",
    "large",
    "teams",
    "works",
    "really",
    "well",
    "product",
    "teams",
    "teams",
    "concept",
    "called",
    "branching",
    "get",
    "say",
    "instance",
    "working",
    "new",
    "feature",
    "new",
    "feature",
    "main",
    "version",
    "project",
    "still",
    "work",
    "simultaneously",
    "create",
    "branch",
    "code",
    "actually",
    "work",
    "new",
    "feature",
    "whereas",
    "rest",
    "team",
    "continue",
    "work",
    "main",
    "branch",
    "project",
    "later",
    "merge",
    "two",
    "together",
    "pull",
    "remote",
    "concept",
    "able",
    "pull",
    "services",
    "software",
    "team",
    "working",
    "remote",
    "server",
    "get",
    "rebase",
    "concept",
    "able",
    "take",
    "project",
    "new",
    "start",
    "project",
    "may",
    "working",
    "project",
    "many",
    "branches",
    "team",
    "working",
    "quite",
    "time",
    "different",
    "areas",
    "maybe",
    "kind",
    "losing",
    "control",
    "true",
    "main",
    "branch",
    "may",
    "choose",
    "rebase",
    "project",
    "means",
    "though",
    "anybody",
    "working",
    "separate",
    "branch",
    "able",
    "branch",
    "code",
    "back",
    "mainline",
    "branch",
    "going",
    "process",
    "get",
    "rebase",
    "essentially",
    "allows",
    "create",
    "new",
    "start",
    "working",
    "project",
    "let",
    "go",
    "forks",
    "clones",
    "want",
    "go",
    "process",
    "want",
    "go",
    "ahead",
    "fork",
    "code",
    "working",
    "let",
    "use",
    "scenario",
    "one",
    "team",
    "wants",
    "go",
    "ahead",
    "add",
    "new",
    "change",
    "project",
    "team",
    "member",
    "may",
    "say",
    "yeah",
    "go",
    "ahead",
    "know",
    "create",
    "separate",
    "fork",
    "actual",
    "project",
    "look",
    "like",
    "actually",
    "go",
    "ahead",
    "create",
    "fork",
    "repository",
    "actually",
    "go",
    "take",
    "version",
    "mainline",
    "branch",
    "take",
    "completely",
    "offline",
    "local",
    "repository",
    "able",
    "work",
    "take",
    "mainline",
    "code",
    "work",
    "local",
    "version",
    "code",
    "separate",
    "mainland",
    "branch",
    "separate",
    "fork",
    "collaborators",
    "ability",
    "team",
    "members",
    "working",
    "project",
    "together",
    "know",
    "someone",
    "working",
    "piece",
    "code",
    "see",
    "errors",
    "code",
    "created",
    "none",
    "us",
    "perfect",
    "writing",
    "code",
    "know",
    "certainly",
    "made",
    "errors",
    "code",
    "great",
    "team",
    "members",
    "back",
    "come",
    "check",
    "see",
    "improve",
    "code",
    "add",
    "collaborator",
    "github",
    "give",
    "permission",
    "within",
    "github",
    "really",
    "easy",
    "super",
    "visual",
    "interface",
    "allows",
    "work",
    "quickly",
    "easily",
    "depending",
    "type",
    "permissions",
    "want",
    "give",
    "sometimes",
    "could",
    "limited",
    "permissions",
    "may",
    "able",
    "read",
    "files",
    "sometimes",
    "able",
    "go",
    "make",
    "changes",
    "go",
    "different",
    "permission",
    "settings",
    "github",
    "actually",
    "see",
    "able",
    "make",
    "changes",
    "people",
    "actually",
    "access",
    "repository",
    "team",
    "start",
    "working",
    "together",
    "code",
    "let",
    "step",
    "branching",
    "get",
    "suppose",
    "working",
    "application",
    "want",
    "add",
    "new",
    "feature",
    "typical",
    "within",
    "devops",
    "environment",
    "create",
    "new",
    "branch",
    "build",
    "new",
    "feature",
    "branch",
    "main",
    "application",
    "known",
    "master",
    "branch",
    "create",
    "sub",
    "branch",
    "runs",
    "parallel",
    "feature",
    "develop",
    "feature",
    "merge",
    "back",
    "master",
    "branch",
    "later",
    "point",
    "time",
    "benefit",
    "default",
    "working",
    "master",
    "branch",
    "always",
    "latest",
    "code",
    "circles",
    "screen",
    "show",
    "various",
    "different",
    "commits",
    "made",
    "keep",
    "track",
    "master",
    "branch",
    "branches",
    "come",
    "new",
    "features",
    "many",
    "branches",
    "get",
    "get",
    "keeps",
    "new",
    "features",
    "working",
    "separate",
    "branches",
    "ready",
    "merge",
    "back",
    "main",
    "branch",
    "let",
    "talk",
    "little",
    "bit",
    "merge",
    "process",
    "starting",
    "master",
    "branch",
    "blue",
    "line",
    "separate",
    "parallel",
    "branch",
    "new",
    "features",
    "look",
    "process",
    "base",
    "commit",
    "feature",
    "b",
    "branch",
    "f",
    "going",
    "merge",
    "back",
    "master",
    "branch",
    "said",
    "many",
    "divergent",
    "branches",
    "eventually",
    "want",
    "everything",
    "merged",
    "back",
    "master",
    "branch",
    "let",
    "step",
    "get",
    "rebase",
    "similar",
    "situation",
    "branch",
    "worked",
    "parallel",
    "master",
    "branch",
    "want",
    "get",
    "rebase",
    "stage",
    "c",
    "decided",
    "want",
    "reset",
    "project",
    "everything",
    "along",
    "master",
    "branch",
    "standard",
    "product",
    "however",
    "means",
    "work",
    "done",
    "parallel",
    "separate",
    "branch",
    "adding",
    "new",
    "features",
    "along",
    "new",
    "rebased",
    "environment",
    "benefit",
    "going",
    "rebase",
    "process",
    "reducing",
    "amount",
    "storage",
    "space",
    "required",
    "many",
    "branches",
    "great",
    "way",
    "reduce",
    "total",
    "footprint",
    "entire",
    "project",
    "get",
    "rebase",
    "process",
    "combining",
    "sequence",
    "commits",
    "form",
    "new",
    "base",
    "commit",
    "prime",
    "reason",
    "rebasing",
    "maintain",
    "linear",
    "project",
    "history",
    "rebase",
    "unplug",
    "branch",
    "replug",
    "tip",
    "another",
    "branch",
    "usually",
    "master",
    "branch",
    "become",
    "new",
    "master",
    "branch",
    "goal",
    "rebasing",
    "take",
    "commits",
    "feature",
    "branch",
    "put",
    "together",
    "single",
    "master",
    "branch",
    "makes",
    "project",
    "much",
    "easier",
    "manage",
    "let",
    "talk",
    "little",
    "bit",
    "pull",
    "remote",
    "suppose",
    "two",
    "developers",
    "working",
    "together",
    "application",
    "concept",
    "remote",
    "repository",
    "allows",
    "code",
    "two",
    "developers",
    "actually",
    "checking",
    "code",
    "remote",
    "repository",
    "becomes",
    "centralized",
    "location",
    "able",
    "store",
    "code",
    "enables",
    "stay",
    "updated",
    "recent",
    "changes",
    "repository",
    "able",
    "pull",
    "latest",
    "changes",
    "remote",
    "repository",
    "ensuring",
    "developers",
    "always",
    "working",
    "latest",
    "code",
    "pull",
    "changes",
    "made",
    "forked",
    "remote",
    "repository",
    "local",
    "repository",
    "command",
    "able",
    "written",
    "go",
    "demo",
    "actually",
    "command",
    "little",
    "bit",
    "good",
    "news",
    "changes",
    "get",
    "notification",
    "saying",
    "already",
    "date",
    "change",
    "merge",
    "changes",
    "local",
    "repository",
    "get",
    "list",
    "changes",
    "made",
    "remotely",
    "let",
    "step",
    "commands",
    "get",
    "git",
    "initializes",
    "local",
    "git",
    "repository",
    "hard",
    "drive",
    "get",
    "ad",
    "adds",
    "one",
    "files",
    "staging",
    "area",
    "get",
    "commit",
    "dash",
    "commit",
    "message",
    "commit",
    "changes",
    "get",
    "command",
    "commits",
    "changes",
    "head",
    "git",
    "command",
    "commits",
    "changes",
    "local",
    "staging",
    "area",
    "get",
    "status",
    "checks",
    "status",
    "current",
    "repository",
    "lists",
    "files",
    "changed",
    "get",
    "locked",
    "provides",
    "list",
    "commits",
    "made",
    "current",
    "branch",
    "get",
    "diff",
    "use",
    "changes",
    "made",
    "file",
    "actually",
    "files",
    "next",
    "actually",
    "see",
    "differences",
    "two",
    "files",
    "git",
    "push",
    "origin",
    "branch",
    "name",
    "name",
    "branch",
    "command",
    "push",
    "branch",
    "remote",
    "repository",
    "others",
    "use",
    "end",
    "project",
    "git",
    "config",
    "dash",
    "global",
    "username",
    "tell",
    "get",
    "configuring",
    "author",
    "name",
    "go",
    "moment",
    "git",
    "config",
    "global",
    "user",
    "email",
    "tell",
    "get",
    "author",
    "email",
    "id",
    "get",
    "cloned",
    "creates",
    "get",
    "repository",
    "copy",
    "remote",
    "source",
    "get",
    "remote",
    "add",
    "origin",
    "server",
    "connects",
    "local",
    "repository",
    "remote",
    "server",
    "adds",
    "server",
    "able",
    "push",
    "get",
    "branch",
    "branch",
    "name",
    "create",
    "new",
    "branch",
    "create",
    "new",
    "feature",
    "may",
    "working",
    "git",
    "checkout",
    "branch",
    "name",
    "allow",
    "switch",
    "one",
    "branch",
    "another",
    "branch",
    "git",
    "merge",
    "branch",
    "name",
    "merge",
    "branch",
    "active",
    "branch",
    "working",
    "new",
    "feature",
    "gon",
    "na",
    "merge",
    "main",
    "branch",
    "get",
    "rebase",
    "reapply",
    "commits",
    "top",
    "another",
    "base",
    "tip",
    "get",
    "rebase",
    "reapply",
    "commits",
    "top",
    "another",
    "base",
    "tip",
    "popular",
    "get",
    "commands",
    "certainly",
    "dig",
    "working",
    "using",
    "get",
    "let",
    "go",
    "ahead",
    "run",
    "demo",
    "using",
    "get",
    "going",
    "demo",
    "using",
    "get",
    "local",
    "machine",
    "github",
    "remote",
    "repository",
    "work",
    "going",
    "using",
    "couple",
    "tools",
    "first",
    "deck",
    "open",
    "using",
    "point",
    "second",
    "going",
    "terminal",
    "window",
    "also",
    "available",
    "let",
    "bring",
    "actually",
    "see",
    "terminal",
    "window",
    "actually",
    "running",
    "git",
    "bash",
    "software",
    "background",
    "need",
    "download",
    "install",
    "also",
    "run",
    "git",
    "batch",
    "locally",
    "windows",
    "computer",
    "well",
    "addition",
    "also",
    "github",
    "repository",
    "using",
    "simply",
    "learn",
    "already",
    "set",
    "ready",
    "go",
    "right",
    "let",
    "get",
    "started",
    "first",
    "thing",
    "want",
    "create",
    "local",
    "repository",
    "let",
    "go",
    "ahead",
    "exactly",
    "local",
    "repository",
    "going",
    "reside",
    "development",
    "folder",
    "local",
    "computer",
    "able",
    "need",
    "create",
    "drive",
    "folder",
    "going",
    "go",
    "ahead",
    "change",
    "directory",
    "actually",
    "going",
    "folder",
    "actually",
    "create",
    "make",
    "new",
    "folder",
    "going",
    "go",
    "ahead",
    "change",
    "directory",
    "development",
    "directory",
    "going",
    "go",
    "ahead",
    "create",
    "new",
    "folder",
    "gone",
    "ahead",
    "created",
    "new",
    "folder",
    "called",
    "hello",
    "world",
    "going",
    "move",
    "cursor",
    "actually",
    "hello",
    "world",
    "folder",
    "helloworld",
    "folder",
    "initialize",
    "folder",
    "git",
    "repository",
    "going",
    "use",
    "git",
    "command",
    "init",
    "initialize",
    "let",
    "go",
    "ahead",
    "initialize",
    "folder",
    "let",
    "see",
    "happened",
    "hello",
    "world",
    "folder",
    "created",
    "see",
    "hidden",
    "folder",
    "called",
    "dot",
    "get",
    "expand",
    "actually",
    "see",
    "different",
    "subfolders",
    "git",
    "repository",
    "create",
    "let",
    "move",
    "little",
    "bit",
    "see",
    "rest",
    "work",
    "check",
    "folder",
    "actually",
    "see",
    "users",
    "matthew",
    "development",
    "hello",
    "world",
    "dot",
    "get",
    "matches",
    "hidden",
    "folder",
    "going",
    "go",
    "ahead",
    "create",
    "file",
    "called",
    "folder",
    "hello",
    "world",
    "folder",
    "going",
    "go",
    "ahead",
    "using",
    "text",
    "editor",
    "happens",
    "sublime",
    "going",
    "create",
    "file",
    "going",
    "text",
    "hello",
    "world",
    "going",
    "call",
    "one",
    "readme",
    "dot",
    "txt",
    "go",
    "hello",
    "world",
    "folder",
    "see",
    "file",
    "actually",
    "folder",
    "interesting",
    "select",
    "git",
    "status",
    "command",
    "actually",
    "show",
    "file",
    "yet",
    "added",
    "commits",
    "yet",
    "project",
    "even",
    "though",
    "file",
    "actually",
    "folder",
    "mean",
    "actually",
    "part",
    "project",
    "us",
    "actually",
    "go",
    "select",
    "us",
    "actually",
    "commit",
    "file",
    "go",
    "terminal",
    "window",
    "use",
    "git",
    "status",
    "actually",
    "read",
    "files",
    "let",
    "go",
    "ahead",
    "use",
    "get",
    "status",
    "command",
    "going",
    "tell",
    "us",
    "file",
    "committed",
    "use",
    "folder",
    "see",
    "files",
    "subfolders",
    "committed",
    "go",
    "actually",
    "add",
    "readme",
    "file",
    "let",
    "go",
    "ahead",
    "select",
    "git",
    "add",
    "git",
    "command",
    "add",
    "adds",
    "file",
    "main",
    "project",
    "want",
    "commit",
    "files",
    "main",
    "repositories",
    "history",
    "hit",
    "get",
    "command",
    "commit",
    "message",
    "commit",
    "one",
    "first",
    "commit",
    "committed",
    "project",
    "interesting",
    "go",
    "back",
    "readme",
    "file",
    "change",
    "go",
    "hello",
    "get",
    "git",
    "popular",
    "version",
    "control",
    "solution",
    "save",
    "actually",
    "go",
    "see",
    "made",
    "differences",
    "readme",
    "text",
    "use",
    "death",
    "command",
    "forget",
    "get",
    "def",
    "gives",
    "us",
    "two",
    "releases",
    "first",
    "original",
    "text",
    "hello",
    "world",
    "afterwards",
    "new",
    "text",
    "green",
    "replaced",
    "original",
    "text",
    "going",
    "want",
    "go",
    "ahead",
    "create",
    "account",
    "github",
    "already",
    "one",
    "going",
    "going",
    "match",
    "account",
    "github",
    "local",
    "account",
    "going",
    "go",
    "ahead",
    "say",
    "get",
    "config",
    "going",
    "dash",
    "going",
    "global",
    "user",
    "dot",
    "name",
    "put",
    "username",
    "use",
    "github",
    "instance",
    "using",
    "simply",
    "learn",
    "dash",
    "github",
    "account",
    "name",
    "github",
    "account",
    "go",
    "ahead",
    "create",
    "new",
    "repository",
    "name",
    "instance",
    "call",
    "repository",
    "hello",
    "dash",
    "world",
    "want",
    "connect",
    "local",
    "github",
    "account",
    "remote",
    "using",
    "command",
    "get",
    "remote",
    "connection",
    "let",
    "go",
    "ahead",
    "type",
    "open",
    "see",
    "whole",
    "thing",
    "type",
    "git",
    "remote",
    "add",
    "origin",
    "https",
    "backslash",
    "backslash",
    "github",
    "dot",
    "com",
    "slash",
    "simply",
    "learn",
    "dash",
    "github",
    "get",
    "typed",
    "correctly",
    "typing",
    "location",
    "hello",
    "dash",
    "world",
    "dot",
    "get",
    "creates",
    "connection",
    "hello",
    "world",
    "account",
    "want",
    "want",
    "push",
    "files",
    "remote",
    "location",
    "using",
    "get",
    "push",
    "command",
    "commit",
    "get",
    "push",
    "origin",
    "master",
    "going",
    "go",
    "ahead",
    "connect",
    "local",
    "remote",
    "github",
    "going",
    "bring",
    "terminal",
    "window",
    "let",
    "select",
    "git",
    "remote",
    "add",
    "origin",
    "connect",
    "remote",
    "location",
    "simply",
    "learn",
    "dash",
    "github",
    "slash",
    "hello",
    "dash",
    "world",
    "dot",
    "get",
    "oh",
    "actually",
    "already",
    "connected",
    "uh",
    "connected",
    "successfully",
    "going",
    "push",
    "master",
    "gesh",
    "get",
    "push",
    "origin",
    "master",
    "everything",
    "connected",
    "successful",
    "go",
    "github",
    "actually",
    "see",
    "file",
    "updated",
    "minutes",
    "ago",
    "actually",
    "go",
    "fork",
    "project",
    "github",
    "clone",
    "locally",
    "going",
    "use",
    "fork",
    "tool",
    "actually",
    "available",
    "github",
    "let",
    "show",
    "located",
    "branching",
    "tool",
    "actually",
    "changed",
    "recently",
    "new",
    "ui",
    "interface",
    "complete",
    "able",
    "pull",
    "copy",
    "account",
    "using",
    "fork",
    "new",
    "http",
    "url",
    "address",
    "let",
    "go",
    "ahead",
    "going",
    "go",
    "ahead",
    "create",
    "fork",
    "project",
    "would",
    "normally",
    "go",
    "go",
    "project",
    "see",
    "fork",
    "options",
    "top",
    "right",
    "hand",
    "corner",
    "screen",
    "right",
    "actually",
    "logged",
    "default",
    "primary",
    "account",
    "project",
    "ca",
    "actually",
    "fork",
    "project",
    "working",
    "main",
    "branch",
    "however",
    "come",
    "separate",
    "id",
    "different",
    "id",
    "actually",
    "pretending",
    "somebody",
    "else",
    "actually",
    "come",
    "select",
    "fork",
    "option",
    "create",
    "fork",
    "project",
    "take",
    "seconds",
    "actually",
    "create",
    "fork",
    "gone",
    "ahead",
    "uh",
    "created",
    "fork",
    "want",
    "say",
    "clone",
    "download",
    "select",
    "actually",
    "give",
    "web",
    "address",
    "actually",
    "show",
    "looks",
    "like",
    "open",
    "text",
    "editor",
    "correct",
    "guess",
    "correct",
    "going",
    "copy",
    "fork",
    "project",
    "locally",
    "clone",
    "locally",
    "change",
    "directory",
    "create",
    "new",
    "directory",
    "going",
    "put",
    "files",
    "post",
    "content",
    "file",
    "actually",
    "multiple",
    "versions",
    "code",
    "running",
    "computer",
    "go",
    "default",
    "content",
    "use",
    "patchwork",
    "command",
    "actually",
    "create",
    "copy",
    "code",
    "created",
    "call",
    "clone",
    "create",
    "new",
    "folder",
    "actually",
    "putting",
    "work",
    "could",
    "whatever",
    "reason",
    "wanted",
    "could",
    "call",
    "folder",
    "patchwork",
    "would",
    "maybe",
    "new",
    "feature",
    "paste",
    "url",
    "new",
    "directory",
    "forked",
    "work",
    "point",
    "pulled",
    "created",
    "clone",
    "original",
    "content",
    "allows",
    "us",
    "go",
    "ahead",
    "fork",
    "work",
    "project",
    "onto",
    "computer",
    "develop",
    "work",
    "separately",
    "actually",
    "actually",
    "create",
    "branch",
    "fork",
    "actually",
    "pulled",
    "onto",
    "computer",
    "actually",
    "create",
    "code",
    "runs",
    "separate",
    "branch",
    "want",
    "check",
    "um",
    "branch",
    "push",
    "origin",
    "branch",
    "uh",
    "computer",
    "give",
    "us",
    "opportunity",
    "add",
    "collaborators",
    "actually",
    "go",
    "github",
    "actually",
    "come",
    "add",
    "collaborators",
    "settings",
    "select",
    "collaborators",
    "actually",
    "see",
    "different",
    "collaborators",
    "added",
    "project",
    "actually",
    "request",
    "people",
    "added",
    "via",
    "github",
    "name",
    "email",
    "address",
    "full",
    "name",
    "one",
    "things",
    "want",
    "able",
    "ensure",
    "always",
    "keeping",
    "code",
    "working",
    "fully",
    "date",
    "pulling",
    "changes",
    "collaborators",
    "create",
    "new",
    "branch",
    "make",
    "changes",
    "emerged",
    "master",
    "branch",
    "would",
    "create",
    "folder",
    "folder",
    "instance",
    "would",
    "called",
    "test",
    "would",
    "move",
    "cursor",
    "folder",
    "called",
    "test",
    "initialize",
    "folder",
    "let",
    "go",
    "ahead",
    "let",
    "call",
    "create",
    "new",
    "folder",
    "going",
    "first",
    "change",
    "root",
    "folder",
    "going",
    "go",
    "development",
    "going",
    "create",
    "new",
    "folder",
    "call",
    "test",
    "going",
    "move",
    "test",
    "folder",
    "initialize",
    "folder",
    "going",
    "move",
    "files",
    "test",
    "folder",
    "call",
    "one",
    "test",
    "one",
    "gon",
    "na",
    "file",
    "save",
    "one",
    "gon",
    "na",
    "test",
    "two",
    "gon",
    "na",
    "commit",
    "files",
    "okay",
    "add",
    "kit",
    "add",
    "use",
    "dot",
    "pull",
    "files",
    "git",
    "commit",
    "files",
    "committed",
    "make",
    "sure",
    "right",
    "folder",
    "think",
    "correct",
    "folder",
    "let",
    "go",
    "ahead",
    "commit",
    "gone",
    "ahead",
    "edit",
    "files",
    "see",
    "two",
    "files",
    "created",
    "added",
    "master",
    "go",
    "ahead",
    "create",
    "new",
    "branch",
    "call",
    "one",
    "git",
    "branch",
    "test",
    "underscore",
    "branch",
    "let",
    "go",
    "ahead",
    "create",
    "third",
    "file",
    "go",
    "folder",
    "file",
    "three",
    "file",
    "save",
    "call",
    "one",
    "go",
    "ahead",
    "add",
    "file",
    "needs",
    "get",
    "add",
    "going",
    "move",
    "master",
    "branch",
    "test",
    "branch",
    "git",
    "check",
    "test",
    "underscore",
    "branch",
    "switched",
    "test",
    "branch",
    "able",
    "list",
    "files",
    "branch",
    "want",
    "go",
    "merge",
    "files",
    "one",
    "area",
    "let",
    "go",
    "ahead",
    "git",
    "merge",
    "test",
    "underscore",
    "branch",
    "well",
    "already",
    "updated",
    "everything",
    "good",
    "otherwise",
    "would",
    "tell",
    "us",
    "would",
    "merging",
    "files",
    "merged",
    "successfully",
    "master",
    "branch",
    "go",
    "merged",
    "together",
    "fantastic",
    "going",
    "move",
    "master",
    "branch",
    "test",
    "branch",
    "get",
    "check",
    "test",
    "underscore",
    "branch",
    "modify",
    "files",
    "test",
    "three",
    "file",
    "took",
    "pull",
    "file",
    "modify",
    "commit",
    "file",
    "back",
    "actually",
    "able",
    "commit",
    "file",
    "one",
    "changes",
    "obviously",
    "text",
    "free",
    "change",
    "made",
    "go",
    "process",
    "checking",
    "file",
    "back",
    "switching",
    "back",
    "master",
    "branch",
    "ensuring",
    "everything",
    "sync",
    "correctly",
    "may",
    "one",
    "point",
    "want",
    "rebase",
    "work",
    "kind",
    "hard",
    "thing",
    "want",
    "allow",
    "allow",
    "managing",
    "changes",
    "future",
    "let",
    "switch",
    "back",
    "test",
    "branch",
    "think",
    "actually",
    "going",
    "create",
    "two",
    "files",
    "let",
    "go",
    "folder",
    "let",
    "go",
    "copy",
    "created",
    "rename",
    "tests",
    "four",
    "five",
    "additional",
    "files",
    "going",
    "add",
    "branch",
    "working",
    "going",
    "go",
    "select",
    "git",
    "add",
    "dash",
    "going",
    "commit",
    "files",
    "get",
    "commit",
    "dash",
    "dash",
    "adding",
    "new",
    "files",
    "added",
    "two",
    "new",
    "files",
    "files",
    "actually",
    "list",
    "files",
    "branch",
    "switch",
    "master",
    "branch",
    "want",
    "rebase",
    "master",
    "get",
    "rebase",
    "master",
    "give",
    "us",
    "command",
    "everything",
    "completely",
    "date",
    "go",
    "get",
    "checkout",
    "master",
    "switch",
    "master",
    "account",
    "allow",
    "us",
    "continue",
    "rebase",
    "test",
    "branch",
    "list",
    "files",
    "area",
    "let",
    "go",
    "get",
    "rebase",
    "test",
    "underscore",
    "branch",
    "list",
    "files",
    "listed",
    "incorrectly",
    "talking",
    "exactly",
    "make",
    "use",
    "maven",
    "performing",
    "various",
    "kind",
    "operations",
    "whether",
    "build",
    "compilation",
    "various",
    "kind",
    "stuff",
    "let",
    "talk",
    "exactly",
    "use",
    "maven",
    "me1",
    "something",
    "kind",
    "build",
    "tool",
    "projects",
    "tool",
    "also",
    "helps",
    "us",
    "building",
    "source",
    "code",
    "downloading",
    "couple",
    "dependencies",
    "dependencies",
    "something",
    "configured",
    "developers",
    "developer",
    "feels",
    "project",
    "dependent",
    "requires",
    "dependencies",
    "downloaded",
    "uh",
    "tool",
    "specifically",
    "used",
    "build",
    "manage",
    "kind",
    "project",
    "whatever",
    "complexity",
    "topic",
    "project",
    "tool",
    "able",
    "handle",
    "particular",
    "requirement",
    "project",
    "simplifies",
    "uh",
    "work",
    "java",
    "developer",
    "helps",
    "projects",
    "performing",
    "daily",
    "daily",
    "activities",
    "right",
    "meven",
    "also",
    "helps",
    "us",
    "getting",
    "uh",
    "specific",
    "jar",
    "files",
    "every",
    "project",
    "going",
    "pretty",
    "much",
    "make",
    "jar",
    "file",
    "var",
    "file",
    "er",
    "file",
    "kind",
    "package",
    "mechanism",
    "follow",
    "maven",
    "download",
    "dependencies",
    "actually",
    "go",
    "official",
    "website",
    "every",
    "software",
    "easily",
    "get",
    "uh",
    "dependencies",
    "every",
    "third",
    "party",
    "band",
    "race",
    "website",
    "present",
    "visit",
    "able",
    "download",
    "dependencies",
    "required",
    "project",
    "specific",
    "project",
    "totally",
    "depends",
    "exactly",
    "want",
    "download",
    "want",
    "get",
    "together",
    "specific",
    "repository",
    "one",
    "visit",
    "able",
    "download",
    "go",
    "jar",
    "files",
    "dependent",
    "jar",
    "files",
    "independences",
    "require",
    "current",
    "project",
    "right",
    "exactly",
    "maven",
    "let",
    "see",
    "part",
    "maven",
    "popular",
    "open",
    "source",
    "build",
    "tool",
    "uh",
    "developed",
    "apache",
    "group",
    "primary",
    "ownership",
    "tool",
    "build",
    "publish",
    "deploy",
    "several",
    "projects",
    "movement",
    "written",
    "java",
    "used",
    "build",
    "projects",
    "written",
    "c",
    "shaft",
    "scala",
    "ruby",
    "etc",
    "apart",
    "java",
    "different",
    "programming",
    "languages",
    "tools",
    "supported",
    "maven",
    "performing",
    "build",
    "activity",
    "tool",
    "used",
    "build",
    "management",
    "kind",
    "project",
    "simplifies",
    "work",
    "java",
    "developer",
    "helps",
    "automate",
    "compilation",
    "build",
    "uh",
    "perspective",
    "tasks",
    "projects",
    "right",
    "maven",
    "kind",
    "bomb",
    "based",
    "project",
    "also",
    "known",
    "project",
    "object",
    "model",
    "focuses",
    "simplification",
    "standardization",
    "building",
    "process",
    "process",
    "take",
    "cares",
    "followings",
    "builds",
    "dependencies",
    "reports",
    "distribution",
    "releases",
    "mailing",
    "list",
    "uh",
    "things",
    "taken",
    "care",
    "particular",
    "process",
    "ultimately",
    "availability",
    "inside",
    "maven",
    "overall",
    "build",
    "process",
    "needs",
    "automated",
    "standardized",
    "particular",
    "mechanisms",
    "followed",
    "good",
    "standards",
    "simplifications",
    "implemented",
    "one",
    "going",
    "talk",
    "work",
    "maven",
    "installation",
    "windows",
    "ubuntu",
    "platform",
    "first",
    "windows",
    "platform",
    "see",
    "installation",
    "really",
    "works",
    "one",
    "installation",
    "local",
    "system",
    "even",
    "going",
    "maven",
    "maven",
    "kind",
    "build",
    "tool",
    "available",
    "primary",
    "performing",
    "kind",
    "build",
    "automation",
    "java",
    "based",
    "projects",
    "since",
    "used",
    "java",
    "also",
    "require",
    "jdk",
    "installation",
    "onto",
    "system",
    "installations",
    "covering",
    "see",
    "installation",
    "really",
    "works",
    "right",
    "even",
    "going",
    "maven",
    "install",
    "jdk",
    "onto",
    "windows",
    "machine",
    "proceed",
    "maven",
    "maven",
    "requires",
    "jdec",
    "installation",
    "two",
    "ways",
    "jdk",
    "installation",
    "either",
    "go",
    "exe",
    "file",
    "extract",
    "binaries",
    "jdk",
    "directory",
    "set",
    "java",
    "underscore",
    "home",
    "path",
    "using",
    "executable",
    "perform",
    "path",
    "configurations",
    "also",
    "case",
    "reconfigure",
    "going",
    "see",
    "first",
    "try",
    "installation",
    "jdk",
    "go",
    "website",
    "jdk",
    "click",
    "one",
    "access",
    "maven",
    "installations",
    "part",
    "going",
    "let",
    "proceed",
    "let",
    "open",
    "chrome",
    "try",
    "go",
    "two",
    "urls",
    "installations",
    "one",
    "one",
    "search",
    "jdk8",
    "download",
    "uh",
    "show",
    "url",
    "get",
    "jdk",
    "different",
    "platforms",
    "different",
    "operating",
    "systems",
    "see",
    "uh",
    "configurations",
    "jdk",
    "installation",
    "go",
    "windows",
    "64",
    "version",
    "something",
    "using",
    "installation",
    "complete",
    "executable",
    "link",
    "download",
    "downloading",
    "sdk",
    "u251",
    "search",
    "windows",
    "64",
    "yeah",
    "one",
    "let",
    "click",
    "one",
    "let",
    "quickly",
    "log",
    "web",
    "page",
    "login",
    "done",
    "able",
    "see",
    "trying",
    "download",
    "exe",
    "file",
    "jdk",
    "java",
    "one",
    "going",
    "go",
    "maven",
    "download",
    "one",
    "maven",
    "repo",
    "link",
    "maven",
    "dot",
    "apache",
    "dot",
    "orj",
    "link",
    "one",
    "different",
    "options",
    "see",
    "binder",
    "like",
    "archive",
    "sources",
    "archive",
    "depending",
    "installation",
    "want",
    "perform",
    "able",
    "download",
    "file",
    "works",
    "let",
    "first",
    "install",
    "jdk",
    "portion",
    "go",
    "one",
    "click",
    "one",
    "also",
    "anyways",
    "uh",
    "something",
    "anyways",
    "click",
    "maven",
    "also",
    "getting",
    "started",
    "install",
    "downloading",
    "downloaded",
    "proceed",
    "setup",
    "let",
    "wait",
    "another",
    "one",
    "minute",
    "one",
    "apache",
    "maven",
    "kind",
    "downloaded",
    "wait",
    "jdk",
    "download",
    "also",
    "next",
    "five",
    "ten",
    "seconds",
    "left",
    "first",
    "jdk",
    "even",
    "installation",
    "configurations",
    "extract",
    "directory",
    "give",
    "envian",
    "home",
    "path",
    "uh",
    "properties",
    "uh",
    "variables",
    "pick",
    "okay",
    "extract",
    "zip",
    "file",
    "maven",
    "give",
    "path",
    "check",
    "maven",
    "command",
    "whether",
    "working",
    "fine",
    "let",
    "try",
    "install",
    "executive",
    "open",
    "directory",
    "executables",
    "first",
    "install",
    "jdk",
    "double",
    "click",
    "installer",
    "jdk",
    "around",
    "200",
    "mb",
    "complete",
    "jdk",
    "installed",
    "go",
    "next",
    "go",
    "installer",
    "usually",
    "java",
    "home",
    "parts",
    "stuff",
    "already",
    "configured",
    "really",
    "change",
    "passwords",
    "java",
    "home",
    "kind",
    "variable",
    "put",
    "things",
    "automatically",
    "cleaned",
    "running",
    "installation",
    "close",
    "extract",
    "maven",
    "extract",
    "directory",
    "maven",
    "complete",
    "executables",
    "libraries",
    "extract",
    "place",
    "directory",
    "use",
    "access",
    "path",
    "axis",
    "done",
    "yep",
    "done",
    "rename",
    "like",
    "maven",
    "rename",
    "like",
    "ask",
    "one",
    "cut",
    "put",
    "seat",
    "drive",
    "maven",
    "home",
    "path",
    "going",
    "right",
    "close",
    "one",
    "one",
    "one",
    "really",
    "go",
    "system",
    "properties",
    "extract",
    "going",
    "open",
    "system",
    "properties",
    "properties",
    "advanced",
    "system",
    "settings",
    "one",
    "setting",
    "paths",
    "environment",
    "variable",
    "go",
    "scroll",
    "see",
    "different",
    "parts",
    "available",
    "want",
    "see",
    "java",
    "fine",
    "require",
    "jdk",
    "also",
    "open",
    "cmd",
    "prompt",
    "window",
    "r",
    "providing",
    "using",
    "window",
    "r",
    "opening",
    "run",
    "window",
    "say",
    "like",
    "cmd",
    "cmd",
    "going",
    "say",
    "like",
    "java",
    "hyphen",
    "version",
    "java",
    "means",
    "problem",
    "go",
    "set",
    "new",
    "one",
    "called",
    "mvn",
    "underscore",
    "home",
    "path",
    "browse",
    "directory",
    "also",
    "using",
    "mvn",
    "home",
    "one",
    "added",
    "path",
    "variable",
    "last",
    "actually",
    "add",
    "bin",
    "directory",
    "also",
    "whenever",
    "run",
    "mvn",
    "command",
    "also",
    "resolved",
    "mvn",
    "underscore",
    "home",
    "variable",
    "configuring",
    "fact",
    "confirming",
    "path",
    "variable",
    "also",
    "go",
    "ahead",
    "put",
    "new",
    "directory",
    "entry",
    "cmd",
    "cmd",
    "till",
    "cmd",
    "directory",
    "go",
    "whatever",
    "executable",
    "able",
    "resolve",
    "open",
    "window",
    "r",
    "cmd",
    "prompt",
    "java",
    "hyphen",
    "version",
    "run",
    "mvn",
    "iphone",
    "version",
    "run",
    "mvn",
    "hyphen",
    "version",
    "let",
    "know",
    "particular",
    "java",
    "runtime",
    "using",
    "underscore",
    "251",
    "one",
    "configured",
    "also",
    "let",
    "us",
    "know",
    "exactly",
    "executable",
    "proceed",
    "execution",
    "maven",
    "pail",
    "check",
    "source",
    "code",
    "go",
    "directory",
    "source",
    "code",
    "run",
    "mvn",
    "clean",
    "install",
    "ultimately",
    "go",
    "build",
    "process",
    "way",
    "installation",
    "maven",
    "windows",
    "platform",
    "since",
    "done",
    "go",
    "ahead",
    "second",
    "installation",
    "going",
    "installation",
    "maven",
    "jdk",
    "onto",
    "open",
    "machine",
    "log",
    "particular",
    "cloud",
    "lab",
    "simply",
    "learn",
    "lms",
    "let",
    "log",
    "lms",
    "going",
    "installation",
    "jdk",
    "maven",
    "ubuntu",
    "virtual",
    "machine",
    "log",
    "lms",
    "let",
    "log",
    "uh",
    "elements",
    "already",
    "started",
    "lab",
    "click",
    "link",
    "open",
    "lab",
    "new",
    "tab",
    "gui",
    "mode",
    "ubuntu",
    "server",
    "using",
    "configure",
    "uh",
    "uh",
    "first",
    "open",
    "chrome",
    "browser",
    "also",
    "let",
    "open",
    "browser",
    "download",
    "maven",
    "executables",
    "jdk",
    "using",
    "package",
    "installation",
    "uh",
    "using",
    "app",
    "executable",
    "installation",
    "open",
    "terminal",
    "terminal",
    "opened",
    "log",
    "root",
    "id",
    "require",
    "root",
    "id",
    "able",
    "package",
    "installations",
    "configurations",
    "requires",
    "root",
    "access",
    "done",
    "run",
    "particular",
    "app",
    "update",
    "command",
    "next",
    "install",
    "installer",
    "oracle",
    "installer",
    "install",
    "uh",
    "setup",
    "done",
    "let",
    "install",
    "latest",
    "package",
    "eco",
    "oracle",
    "iphone",
    "java",
    "14",
    "hyphen",
    "installation",
    "install",
    "jdk",
    "14",
    "configurations",
    "uh",
    "time",
    "go",
    "maven",
    "download",
    "also",
    "uh",
    "go",
    "download",
    "maven",
    "tar",
    "file",
    "executables",
    "going",
    "copy",
    "url",
    "say",
    "yes",
    "yes",
    "yes",
    "uh",
    "java",
    "configured",
    "could",
    "set",
    "one",
    "really",
    "need",
    "need",
    "run",
    "java",
    "command",
    "see",
    "installation",
    "done",
    "properly",
    "uh",
    "let",
    "open",
    "terminal",
    "another",
    "terminal",
    "perform",
    "steps",
    "related",
    "maven",
    "got",
    "url",
    "going",
    "opt",
    "directory",
    "always",
    "optional",
    "directory",
    "setup",
    "configurations",
    "going",
    "run",
    "w",
    "gate",
    "command",
    "url",
    "downloaded",
    "uh",
    "download",
    "tar",
    "file",
    "maven",
    "like",
    "done",
    "extract",
    "uh",
    "tar",
    "hyphen",
    "xv",
    "zf",
    "entire",
    "file",
    "name",
    "targenzip",
    "file",
    "use",
    "tar",
    "hyphen",
    "xp",
    "zf",
    "parameter",
    "extract",
    "exactly",
    "got",
    "got",
    "apache",
    "maven",
    "directory",
    "going",
    "rename",
    "order",
    "rename",
    "need",
    "need",
    "actually",
    "go",
    "particular",
    "move",
    "command",
    "move",
    "whatever",
    "existing",
    "folder",
    "going",
    "rename",
    "maven",
    "directory",
    "done",
    "going",
    "maven",
    "directory",
    "path",
    "maven",
    "underscore",
    "home",
    "path",
    "available",
    "one",
    "bin",
    "directories",
    "executables",
    "stuff",
    "use",
    "like",
    "mv",
    "underscore",
    "home",
    "configuration",
    "like",
    "window",
    "also",
    "process",
    "follow",
    "java",
    "hyphen",
    "version",
    "let",
    "know",
    "version",
    "deployed",
    "version",
    "deployed",
    "java",
    "set",
    "path",
    "viewing",
    "installer",
    "set",
    "path",
    "right",
    "maven",
    "exactly",
    "go",
    "edc",
    "profile",
    "going",
    "put",
    "particular",
    "file",
    "see",
    "jdk",
    "file",
    "means",
    "path",
    "variables",
    "everything",
    "configured",
    "see",
    "java",
    "underscore",
    "home",
    "path",
    "variables",
    "copied",
    "going",
    "also",
    "create",
    "file",
    "similar",
    "one",
    "case",
    "going",
    "use",
    "going",
    "remove",
    "values",
    "going",
    "parameters",
    "added",
    "order",
    "effectively",
    "echo",
    "command",
    "copy",
    "things",
    "simply",
    "put",
    "file",
    "going",
    "path",
    "variable",
    "added",
    "putting",
    "paths",
    "configuration",
    "also",
    "opt",
    "slash",
    "maven",
    "slash",
    "pin",
    "pin",
    "directory",
    "added",
    "specific",
    "path",
    "variable",
    "trying",
    "create",
    "file",
    "called",
    "maven",
    "dot",
    "ss",
    "like",
    "jdk",
    "dot",
    "sh",
    "also",
    "creating",
    "similar",
    "kind",
    "file",
    "called",
    "maven",
    "dot",
    "sh",
    "going",
    "uh",
    "vi",
    "mode",
    "editors",
    "want",
    "make",
    "understand",
    "copying",
    "content",
    "taking",
    "jdk",
    "dot",
    "sh",
    "reference",
    "putting",
    "details",
    "one",
    "going",
    "export",
    "mvn",
    "underscore",
    "home",
    "related",
    "like",
    "opt",
    "slash",
    "maven",
    "going",
    "put",
    "wavin",
    "end",
    "file",
    "using",
    "fact",
    "used",
    "utilized",
    "way",
    "perform",
    "changes",
    "whatever",
    "configurations",
    "want",
    "perform",
    "help",
    "set",
    "certain",
    "parts",
    "like",
    "path",
    "ambient",
    "home",
    "run",
    "scripts",
    "going",
    "give",
    "executable",
    "permissions",
    "one",
    "exactly",
    "source",
    "profile",
    "dot",
    "maven",
    "done",
    "able",
    "run",
    "mvn",
    "hyphen",
    "version",
    "jdk",
    "part",
    "already",
    "open",
    "going",
    "refer",
    "part",
    "way",
    "configure",
    "mi1",
    "jdk",
    "specifically",
    "ubuntu",
    "virtual",
    "machine",
    "pretty",
    "much",
    "demo",
    "demo",
    "primarily",
    "talked",
    "installation",
    "jdk",
    "maven",
    "windows",
    "similar",
    "task",
    "maven",
    "ubuntu",
    "virtual",
    "machine",
    "also",
    "hello",
    "everyone",
    "welcome",
    "demo",
    "demo",
    "going",
    "talk",
    "exactly",
    "installation",
    "maven",
    "mac",
    "operating",
    "system",
    "going",
    "talk",
    "specific",
    "setup",
    "installation",
    "maven",
    "mac",
    "operating",
    "system",
    "let",
    "see",
    "two",
    "ways",
    "installation",
    "first",
    "brew",
    "executable",
    "mac",
    "brew",
    "utility",
    "mac",
    "like",
    "apt",
    "yum",
    "utility",
    "present",
    "environments",
    "platforms",
    "using",
    "brew",
    "installation",
    "maven",
    "mac",
    "operating",
    "system",
    "next",
    "one",
    "particular",
    "mechanism",
    "able",
    "setup",
    "like",
    "download",
    "binaries",
    "apache",
    "website",
    "export",
    "empty",
    "one",
    "discord",
    "home",
    "path",
    "variable",
    "start",
    "using",
    "maven",
    "executable",
    "talk",
    "things",
    "see",
    "exactly",
    "go",
    "setup",
    "let",
    "login",
    "uh",
    "particular",
    "machine",
    "mac",
    "operating",
    "system",
    "able",
    "activity",
    "mac",
    "system",
    "one",
    "going",
    "going",
    "open",
    "terminal",
    "going",
    "open",
    "terminal",
    "terminal",
    "usually",
    "mac",
    "require",
    "mechanism",
    "inbuilt",
    "terminal",
    "sufficient",
    "stuff",
    "similar",
    "linux",
    "based",
    "platform",
    "going",
    "run",
    "command",
    "first",
    "double",
    "check",
    "brew",
    "executable",
    "working",
    "fine",
    "run",
    "brew",
    "help",
    "command",
    "see",
    "uh",
    "brew",
    "working",
    "fine",
    "one",
    "command",
    "called",
    "brew",
    "install",
    "command",
    "need",
    "use",
    "one",
    "actually",
    "give",
    "specific",
    "package",
    "want",
    "install",
    "say",
    "like",
    "brew",
    "install",
    "maven",
    "download",
    "uh",
    "specific",
    "executables",
    "system",
    "website",
    "download",
    "maven",
    "executables",
    "take",
    "time",
    "ultimately",
    "trying",
    "download",
    "particular",
    "tar",
    "file",
    "see",
    "downloading",
    "dar",
    "file",
    "uh",
    "see",
    "installation",
    "done",
    "version",
    "installed",
    "like",
    "maven",
    "mvn",
    "hyphen",
    "iphone",
    "version",
    "see",
    "version",
    "deployed",
    "something",
    "done",
    "purely",
    "command",
    "called",
    "brew",
    "really",
    "helps",
    "us",
    "kind",
    "package",
    "installations",
    "maven",
    "packages",
    "also",
    "installed",
    "pretty",
    "much",
    "help",
    "executable",
    "order",
    "see",
    "manual",
    "stuff",
    "really",
    "need",
    "need",
    "actually",
    "clean",
    "uh",
    "specific",
    "installation",
    "able",
    "show",
    "manual",
    "installation",
    "also",
    "going",
    "going",
    "run",
    "command",
    "called",
    "brew",
    "uninstall",
    "maven",
    "maven",
    "removed",
    "system",
    "trying",
    "remove",
    "maven",
    "see",
    "maven",
    "executable",
    "working",
    "means",
    "maven",
    "uninstalled",
    "case",
    "uninstalled",
    "able",
    "go",
    "ahead",
    "download",
    "custom",
    "maven",
    "one",
    "opened",
    "browser",
    "go",
    "maven",
    "executable",
    "go",
    "maven",
    "download",
    "able",
    "download",
    "specific",
    "executable",
    "going",
    "directory",
    "uh",
    "version",
    "available",
    "going",
    "download",
    "file",
    "also",
    "kind",
    "linux",
    "platform",
    "right",
    "reason",
    "uh",
    "tar",
    "file",
    "work",
    "perfectly",
    "fine",
    "going",
    "opt",
    "directory",
    "optionals",
    "related",
    "packages",
    "create",
    "directory",
    "called",
    "slash",
    "opt",
    "log",
    "root",
    "root",
    "access",
    "go",
    "applications",
    "applications",
    "actually",
    "create",
    "directory",
    "called",
    "maven",
    "go",
    "maven",
    "yeah",
    "downloading",
    "var",
    "file",
    "uh",
    "dot",
    "gang",
    "file",
    "downloading",
    "give",
    "path",
    "var",
    "file",
    "w",
    "gate",
    "command",
    "using",
    "installation",
    "sometimes",
    "wkate",
    "available",
    "go",
    "brew",
    "install",
    "wget",
    "also",
    "package",
    "available",
    "video",
    "installation",
    "done",
    "try",
    "installation",
    "using",
    "grab",
    "locate",
    "able",
    "get",
    "tar",
    "file",
    "generated",
    "downloaded",
    "ways",
    "also",
    "download",
    "browser",
    "also",
    "yeah",
    "go",
    "browser",
    "actually",
    "click",
    "download",
    "transfer",
    "locally",
    "uh",
    "specific",
    "directory",
    "also",
    "possibilities",
    "trying",
    "download",
    "double",
    "gate",
    "command",
    "easy",
    "setup",
    "download",
    "going",
    "run",
    "command",
    "download",
    "tar",
    "file",
    "tar",
    "file",
    "available",
    "going",
    "extract",
    "extraction",
    "done",
    "going",
    "rename",
    "like",
    "apache",
    "maven",
    "kind",
    "versioning",
    "kind",
    "parameters",
    "apache",
    "data",
    "maven",
    "hyphen",
    "star",
    "file",
    "trying",
    "remove",
    "got",
    "end",
    "result",
    "current",
    "directory",
    "uh",
    "applications",
    "setups",
    "going",
    "forward",
    "run",
    "mvn",
    "hyphen",
    "f1",
    "version",
    "command",
    "giving",
    "kind",
    "output",
    "uh",
    "still",
    "extracted",
    "tar",
    "file",
    "activity",
    "complete",
    "exactly",
    "set",
    "environment",
    "variables",
    "able",
    "run",
    "mvn",
    "command",
    "really",
    "need",
    "export",
    "certain",
    "variables",
    "application",
    "slash",
    "me1",
    "apache",
    "m1",
    "home",
    "directory",
    "trying",
    "configure",
    "next",
    "thing",
    "path",
    "variable",
    "going",
    "going",
    "carry",
    "path",
    "variable",
    "folder",
    "going",
    "folder",
    "structure",
    "bin",
    "directory",
    "provide",
    "going",
    "copy",
    "paste",
    "concatenated",
    "bin",
    "environment",
    "variables",
    "established",
    "mvn",
    "hyphen",
    "iphone",
    "version",
    "command",
    "see",
    "uh",
    "know",
    "picked",
    "saying",
    "particular",
    "java",
    "runtime",
    "available",
    "go",
    "java",
    "reinstall",
    "java",
    "enough",
    "install",
    "java",
    "package",
    "see",
    "says",
    "already",
    "installed",
    "date",
    "reason",
    "able",
    "installation",
    "going",
    "reinstall",
    "open",
    "jdk",
    "happens",
    "installation",
    "environment",
    "variables",
    "related",
    "java",
    "uh",
    "formatted",
    "extracted",
    "right",
    "see",
    "uh",
    "saying",
    "want",
    "really",
    "use",
    "executable",
    "java",
    "concatenate",
    "path",
    "like",
    "let",
    "run",
    "uh",
    "see",
    "particular",
    "executable",
    "java",
    "also",
    "find",
    "java",
    "hyphen",
    "version",
    "showing",
    "yes",
    "available",
    "command",
    "able",
    "show",
    "yes",
    "working",
    "fine",
    "gdk",
    "already",
    "installed",
    "problem",
    "since",
    "installed",
    "particular",
    "location",
    "actually",
    "override",
    "path",
    "value",
    "able",
    "see",
    "directory",
    "find",
    "java",
    "executable",
    "got",
    "installation",
    "got",
    "command",
    "output",
    "saying",
    "installation",
    "done",
    "extract",
    "know",
    "put",
    "bar",
    "directory",
    "specified",
    "uh",
    "path",
    "variable",
    "got",
    "maven",
    "java",
    "command",
    "lines",
    "working",
    "maven",
    "installations",
    "together",
    "overall",
    "installation",
    "maven",
    "jdk",
    "really",
    "works",
    "mac",
    "operating",
    "system",
    "exactly",
    "maven",
    "repository",
    "maven",
    "repository",
    "uh",
    "something",
    "uh",
    "kind",
    "directory",
    "kind",
    "location",
    "jar",
    "files",
    "packaged",
    "together",
    "single",
    "location",
    "depending",
    "software",
    "want",
    "download",
    "dependent",
    "java",
    "files",
    "downloaded",
    "metadata",
    "refers",
    "palm",
    "files",
    "relevant",
    "project",
    "metadata",
    "allows",
    "maven",
    "download",
    "dependencies",
    "three",
    "type",
    "repositories",
    "download",
    "dependencies",
    "first",
    "one",
    "local",
    "repository",
    "second",
    "one",
    "remote",
    "repository",
    "third",
    "one",
    "central",
    "repository",
    "primary",
    "three",
    "type",
    "repositories",
    "available",
    "specific",
    "maven",
    "whatever",
    "repository",
    "want",
    "follow",
    "want",
    "access",
    "pretty",
    "much",
    "access",
    "go",
    "right",
    "local",
    "repository",
    "primary",
    "present",
    "onto",
    "pc",
    "way",
    "present",
    "particular",
    "remote",
    "repository",
    "something",
    "store",
    "remote",
    "machine",
    "remote",
    "server",
    "central",
    "repository",
    "something",
    "onto",
    "internet",
    "usually",
    "central",
    "repositories",
    "something",
    "actually",
    "host",
    "different",
    "kind",
    "dependencies",
    "jar",
    "files",
    "local",
    "repository",
    "machine",
    "developer",
    "project",
    "material",
    "saved",
    "particular",
    "dependencies",
    "jar",
    "file",
    "available",
    "local",
    "machine",
    "remote",
    "machine",
    "location",
    "actually",
    "store",
    "particular",
    "dependencies",
    "download",
    "dependencies",
    "whenever",
    "require",
    "repositories",
    "work",
    "similar",
    "central",
    "repository",
    "whenever",
    "anything",
    "needed",
    "remote",
    "repository",
    "first",
    "downloaded",
    "local",
    "repository",
    "utilized",
    "feel",
    "dependency",
    "something",
    "local",
    "first",
    "downloaded",
    "remote",
    "repository",
    "utilized",
    "referenced",
    "onto",
    "local",
    "machine",
    "central",
    "repository",
    "refers",
    "maven",
    "community",
    "repository",
    "able",
    "see",
    "every",
    "dependency",
    "present",
    "repository",
    "maven",
    "downloads",
    "repositories",
    "local",
    "repository",
    "whenever",
    "needed",
    "whenever",
    "required",
    "dependencies",
    "cached",
    "locally",
    "referenced",
    "next",
    "know",
    "whenever",
    "want",
    "refer",
    "able",
    "particular",
    "reference",
    "easily",
    "part",
    "way",
    "three",
    "uh",
    "particular",
    "repositories",
    "movement",
    "repositories",
    "really",
    "helps",
    "us",
    "performing",
    "various",
    "kind",
    "automations",
    "right",
    "basic",
    "concepts",
    "maven",
    "couple",
    "basic",
    "concepts",
    "present",
    "maven",
    "like",
    "first",
    "time",
    "project",
    "object",
    "model",
    "project",
    "bomb",
    "reference",
    "xml",
    "file",
    "information",
    "regarding",
    "project",
    "particular",
    "project",
    "built",
    "different",
    "build",
    "process",
    "automated",
    "also",
    "description",
    "project",
    "details",
    "regarding",
    "versioning",
    "versioning",
    "information",
    "also",
    "stored",
    "xml",
    "file",
    "particular",
    "form",
    "reference",
    "file",
    "xml",
    "file",
    "project",
    "home",
    "directory",
    "maven",
    "something",
    "search",
    "palm",
    "file",
    "current",
    "directory",
    "able",
    "find",
    "particular",
    "pom",
    "file",
    "execute",
    "proceed",
    "build",
    "step",
    "otherwise",
    "halt",
    "pawn",
    "file",
    "important",
    "act",
    "kind",
    "built",
    "script",
    "primarily",
    "maven",
    "tool",
    "able",
    "process",
    "everything",
    "configured",
    "specific",
    "xml",
    "file",
    "according",
    "function",
    "proceed",
    "right",
    "second",
    "thing",
    "dependencies",
    "repositories",
    "dependencies",
    "usually",
    "refers",
    "java",
    "files",
    "java",
    "libraries",
    "need",
    "particular",
    "project",
    "uh",
    "working",
    "project",
    "may",
    "dependency",
    "couple",
    "dependencies",
    "dependencies",
    "actually",
    "download",
    "actually",
    "refer",
    "particular",
    "information",
    "details",
    "referred",
    "happen",
    "uh",
    "need",
    "download",
    "specific",
    "dependencies",
    "particular",
    "maven",
    "repositories",
    "dependencies",
    "present",
    "local",
    "repository",
    "maven",
    "try",
    "download",
    "central",
    "repository",
    "cache",
    "local",
    "repository",
    "first",
    "look",
    "local",
    "repository",
    "present",
    "local",
    "go",
    "remote",
    "central",
    "repository",
    "build",
    "lifecycles",
    "phase",
    "goals",
    "build",
    "lifecycles",
    "consists",
    "sequence",
    "build",
    "phases",
    "field",
    "phase",
    "consists",
    "sequence",
    "goals",
    "goal",
    "responsible",
    "performing",
    "specific",
    "task",
    "phase",
    "uh",
    "running",
    "goals",
    "related",
    "phase",
    "plugins",
    "also",
    "used",
    "following",
    "compilation",
    "preparing",
    "artifacts",
    "downloading",
    "dependencies",
    "different",
    "things",
    "done",
    "plugins",
    "build",
    "profile",
    "build",
    "profiles",
    "refers",
    "set",
    "configuration",
    "values",
    "generally",
    "generic",
    "build",
    "process",
    "environments",
    "particular",
    "code",
    "base",
    "sometimes",
    "kind",
    "differences",
    "go",
    "profiles",
    "specific",
    "profile",
    "configuration",
    "uh",
    "whatever",
    "required",
    "build",
    "process",
    "different",
    "different",
    "configurations",
    "stored",
    "inside",
    "maven",
    "build",
    "script",
    "different",
    "build",
    "profiles",
    "added",
    "pom",
    "files",
    "enables",
    "different",
    "uh",
    "build",
    "depending",
    "profiles",
    "actually",
    "decide",
    "need",
    "proceed",
    "build",
    "process",
    "different",
    "kind",
    "build",
    "automations",
    "needs",
    "performed",
    "build",
    "profile",
    "helps",
    "customizing",
    "build",
    "different",
    "environments",
    "also",
    "perform",
    "workforming",
    "working",
    "different",
    "components",
    "different",
    "management",
    "build",
    "profile",
    "something",
    "configure",
    "utilize",
    "depending",
    "build",
    "profile",
    "deciding",
    "whether",
    "proceed",
    "decide",
    "particular",
    "factor",
    "something",
    "need",
    "take",
    "care",
    "need",
    "work",
    "according",
    "see",
    "decide",
    "specific",
    "configurations",
    "specific",
    "automation",
    "needs",
    "performed",
    "usually",
    "go",
    "maven",
    "use",
    "couple",
    "maven",
    "plugins",
    "goal",
    "using",
    "specific",
    "plugins",
    "automate",
    "basic",
    "stuff",
    "like",
    "compilation",
    "creating",
    "var",
    "file",
    "creating",
    "java",
    "file",
    "using",
    "plugins",
    "configure",
    "steps",
    "write",
    "steps",
    "uh",
    "specific",
    "plugins",
    "installed",
    "referenced",
    "ultimately",
    "internal",
    "configurations",
    "looking",
    "forward",
    "using",
    "working",
    "specific",
    "plugins",
    "download",
    "couple",
    "plugins",
    "using",
    "able",
    "decide",
    "specific",
    "goals",
    "needs",
    "achieved",
    "maven",
    "standard",
    "plugins",
    "utilized",
    "uh",
    "know",
    "want",
    "go",
    "custom",
    "one",
    "pretty",
    "much",
    "go",
    "default",
    "one",
    "uh",
    "pretty",
    "much",
    "uh",
    "specific",
    "goals",
    "executed",
    "help",
    "build",
    "plugins",
    "next",
    "thing",
    "maven",
    "architecture",
    "uh",
    "maven",
    "happens",
    "uh",
    "let",
    "talk",
    "basic",
    "architecture",
    "maven",
    "maven",
    "executable",
    "deployed",
    "usually",
    "uh",
    "reads",
    "file",
    "build",
    "script",
    "specific",
    "found",
    "xml",
    "file",
    "read",
    "uh",
    "process",
    "components",
    "uh",
    "know",
    "download",
    "process",
    "dependencies",
    "plugins",
    "life",
    "cycles",
    "phases",
    "goals",
    "even",
    "build",
    "profiles",
    "kind",
    "interaction",
    "required",
    "try",
    "connect",
    "central",
    "repository",
    "remote",
    "repository",
    "according",
    "provide",
    "information",
    "provide",
    "details",
    "minimum",
    "repository",
    "something",
    "important",
    "ultimately",
    "trying",
    "connect",
    "maven",
    "repository",
    "try",
    "achieve",
    "various",
    "kind",
    "automation",
    "important",
    "ultimately",
    "trying",
    "help",
    "us",
    "go",
    "complete",
    "build",
    "automation",
    "go",
    "specific",
    "bomb",
    "based",
    "build",
    "automation",
    "movement",
    "executable",
    "read",
    "file",
    "download",
    "dependencies",
    "defined",
    "power",
    "xml",
    "file",
    "dependencies",
    "cached",
    "locally",
    "remote",
    "central",
    "repository",
    "uh",
    "create",
    "generate",
    "remote",
    "uh",
    "report",
    "according",
    "requirement",
    "execute",
    "life",
    "cycles",
    "phases",
    "goals",
    "plugins",
    "etc",
    "process",
    "power",
    "xml",
    "file",
    "whatever",
    "plugins",
    "goals",
    "life",
    "cycles",
    "configured",
    "step",
    "step",
    "executed",
    "sequence",
    "let",
    "talk",
    "overall",
    "build",
    "life",
    "cycle",
    "maven",
    "happens",
    "uh",
    "maven",
    "build",
    "life",
    "cycle",
    "something",
    "kind",
    "collection",
    "different",
    "steps",
    "something",
    "followed",
    "perform",
    "build",
    "automation",
    "specific",
    "project",
    "pretty",
    "much",
    "three",
    "steps",
    "done",
    "first",
    "one",
    "default",
    "handles",
    "project",
    "deployment",
    "second",
    "handles",
    "project",
    "cleaning",
    "clean",
    "site",
    "handles",
    "creation",
    "project",
    "sites",
    "documentation",
    "three",
    "particular",
    "life",
    "cycles",
    "available",
    "paper",
    "level",
    "utilize",
    "perform",
    "various",
    "kind",
    "particular",
    "steps",
    "execution",
    "project",
    "right",
    "build",
    "cycle",
    "different",
    "build",
    "phases",
    "stages",
    "performing",
    "build",
    "variety",
    "things",
    "needs",
    "performed",
    "first",
    "one",
    "compile",
    "test",
    "compile",
    "compilation",
    "source",
    "file",
    "test",
    "compile",
    "test",
    "cases",
    "test",
    "execute",
    "test",
    "cases",
    "package",
    "package",
    "bundle",
    "integration",
    "test",
    "run",
    "integration",
    "test",
    "cases",
    "verify",
    "install",
    "goal",
    "last",
    "one",
    "deploy",
    "deploy",
    "artifacts",
    "artifactory",
    "things",
    "different",
    "phases",
    "stages",
    "followed",
    "per",
    "specific",
    "build",
    "builds",
    "different",
    "phases",
    "stages",
    "normally",
    "follow",
    "performing",
    "build",
    "automation",
    "exactly",
    "advantage",
    "specific",
    "maven",
    "something",
    "need",
    "talk",
    "particular",
    "automation",
    "needs",
    "done",
    "actually",
    "go",
    "configurations",
    "feel",
    "yes",
    "want",
    "perform",
    "want",
    "take",
    "certain",
    "benefits",
    "implementation",
    "maven",
    "happens",
    "see",
    "various",
    "kind",
    "benefits",
    "first",
    "one",
    "apache",
    "maven",
    "helps",
    "manage",
    "processes",
    "building",
    "documentation",
    "releasing",
    "distribution",
    "project",
    "management",
    "tool",
    "simplifies",
    "process",
    "project",
    "building",
    "increases",
    "performance",
    "project",
    "building",
    "process",
    "together",
    "task",
    "downloading",
    "jar",
    "files",
    "dependencies",
    "also",
    "done",
    "automatically",
    "indulge",
    "kind",
    "download",
    "part",
    "manually",
    "right",
    "um",
    "provides",
    "easy",
    "access",
    "required",
    "information",
    "may",
    "1",
    "makes",
    "easy",
    "specific",
    "developer",
    "build",
    "project",
    "different",
    "environments",
    "worry",
    "environment",
    "worry",
    "infrastructure",
    "nothing",
    "required",
    "everything",
    "available",
    "inside",
    "package",
    "know",
    "depending",
    "particular",
    "write",
    "source",
    "code",
    "one",
    "machine",
    "pretty",
    "much",
    "build",
    "another",
    "machine",
    "reason",
    "build",
    "automation",
    "really",
    "happens",
    "first",
    "place",
    "developer",
    "writing",
    "source",
    "code",
    "one",
    "location",
    "code",
    "deployed",
    "onto",
    "particular",
    "built",
    "onto",
    "jenkins",
    "kind",
    "build",
    "tool",
    "right",
    "maven",
    "easily",
    "add",
    "new",
    "dependencies",
    "must",
    "write",
    "particular",
    "dependencies",
    "form",
    "file",
    "feel",
    "want",
    "download",
    "particular",
    "dependencies",
    "put",
    "dependency",
    "specific",
    "file",
    "depending",
    "execution",
    "really",
    "performed",
    "executed",
    "chair",
    "right",
    "let",
    "talk",
    "demo",
    "let",
    "see",
    "exactly",
    "go",
    "demo",
    "perform",
    "various",
    "kind",
    "automations",
    "virtual",
    "machine",
    "maven",
    "already",
    "installed",
    "run",
    "like",
    "mvn",
    "maven",
    "available",
    "three",
    "point",
    "six",
    "point",
    "three",
    "going",
    "run",
    "particular",
    "command",
    "called",
    "uh",
    "mvin",
    "arc",
    "type",
    "generate",
    "let",
    "create",
    "directory",
    "temp",
    "directory",
    "perform",
    "activity",
    "mvn",
    "arc",
    "type",
    "generate",
    "run",
    "happen",
    "uh",
    "download",
    "binaries",
    "uh",
    "ultimately",
    "trying",
    "trying",
    "generate",
    "new",
    "project",
    "like",
    "maven",
    "project",
    "couple",
    "uh",
    "particular",
    "plugins",
    "downloaded",
    "maven",
    "executable",
    "achieve",
    "particular",
    "execution",
    "wait",
    "downloading",
    "values",
    "trying",
    "give",
    "us",
    "particular",
    "attributes",
    "like",
    "asking",
    "different",
    "attributes",
    "exactly",
    "want",
    "configure",
    "want",
    "configure",
    "provide",
    "details",
    "otherwise",
    "perform",
    "whatever",
    "setup",
    "want",
    "perform",
    "asking",
    "version",
    "uh",
    "kind",
    "version",
    "want",
    "follow",
    "going",
    "follow",
    "like",
    "five",
    "press",
    "five",
    "group",
    "id",
    "uh",
    "basically",
    "kind",
    "group",
    "mechanism",
    "say",
    "like",
    "com",
    "dot",
    "simply",
    "learn",
    "value",
    "providing",
    "artifate",
    "id",
    "make",
    "like",
    "sample",
    "project",
    "something",
    "like",
    "artifact",
    "uh",
    "id",
    "version",
    "keeping",
    "uh",
    "yeah",
    "package",
    "want",
    "create",
    "provide",
    "value",
    "called",
    "yes",
    "enter",
    "happen",
    "sample",
    "project",
    "created",
    "right",
    "whatever",
    "artifact",
    "id",
    "provided",
    "according",
    "project",
    "created",
    "directory",
    "go",
    "directory",
    "see",
    "exactly",
    "files",
    "created",
    "file",
    "file",
    "open",
    "see",
    "attributes",
    "like",
    "values",
    "uh",
    "related",
    "version",
    "group",
    "id",
    "want",
    "follow",
    "group",
    "id",
    "artifact",
    "id",
    "jar",
    "file",
    "default",
    "change",
    "according",
    "requirement",
    "version",
    "feel",
    "want",
    "changes",
    "name",
    "also",
    "perform",
    "default",
    "junit",
    "dependency",
    "added",
    "want",
    "keep",
    "adding",
    "custom",
    "dependencies",
    "able",
    "case",
    "run",
    "like",
    "mv",
    "clean",
    "install",
    "considered",
    "particular",
    "maven",
    "project",
    "parlor",
    "xml",
    "file",
    "already",
    "present",
    "local",
    "directory",
    "according",
    "execution",
    "steps",
    "performed",
    "according",
    "able",
    "get",
    "desired",
    "values",
    "ultimately",
    "target",
    "directory",
    "able",
    "see",
    "couple",
    "java",
    "file",
    "specific",
    "jar",
    "file",
    "generated",
    "see",
    "target",
    "directory",
    "jar",
    "file",
    "artifact",
    "generated",
    "way",
    "actually",
    "go",
    "generic",
    "one",
    "like",
    "new",
    "uh",
    "particular",
    "project",
    "later",
    "depending",
    "uh",
    "understanding",
    "keep",
    "adding",
    "keep",
    "modifying",
    "dependencies",
    "get",
    "final",
    "result",
    "demo",
    "uh",
    "find",
    "exactly",
    "go",
    "particular",
    "project",
    "preparation",
    "help",
    "mvn",
    "executable",
    "welcome",
    "everyone",
    "topic",
    "going",
    "talk",
    "exactly",
    "different",
    "maven",
    "interview",
    "questions",
    "one",
    "going",
    "talk",
    "different",
    "questions",
    "couple",
    "questions",
    "going",
    "go",
    "try",
    "understand",
    "exactly",
    "answers",
    "uh",
    "let",
    "talk",
    "first",
    "question",
    "exactly",
    "maven",
    "maven",
    "nothing",
    "kind",
    "popular",
    "open",
    "tool",
    "uh",
    "open",
    "source",
    "build",
    "tool",
    "available",
    "maven",
    "couple",
    "build",
    "tools",
    "present",
    "like",
    "know",
    "lot",
    "legacy",
    "tools",
    "present",
    "maven",
    "something",
    "uh",
    "released",
    "open",
    "source",
    "tool",
    "really",
    "helps",
    "organization",
    "automate",
    "couple",
    "build",
    "processes",
    "know",
    "uh",
    "particular",
    "mechanisms",
    "like",
    "build",
    "publish",
    "deploy",
    "different",
    "different",
    "projects",
    "powerful",
    "tool",
    "really",
    "help",
    "us",
    "build",
    "automations",
    "integrate",
    "tools",
    "like",
    "jenkins",
    "know",
    "automate",
    "schedule",
    "builds",
    "lot",
    "various",
    "advantages",
    "get",
    "help",
    "tool",
    "primarily",
    "written",
    "java",
    "used",
    "build",
    "various",
    "kind",
    "projects",
    "also",
    "like",
    "c",
    "sharp",
    "scalar",
    "ruby",
    "etc",
    "typical",
    "tools",
    "also",
    "built",
    "help",
    "tool",
    "tool",
    "primarily",
    "uh",
    "used",
    "uh",
    "particular",
    "development",
    "management",
    "artifacts",
    "java",
    "based",
    "projects",
    "uh",
    "projects",
    "nowadays",
    "default",
    "tool",
    "already",
    "integrated",
    "eclipse",
    "also",
    "go",
    "new",
    "women",
    "project",
    "automatically",
    "created",
    "java",
    "project",
    "use",
    "languages",
    "also",
    "yes",
    "default",
    "choice",
    "java",
    "java",
    "programming",
    "language",
    "maven",
    "build",
    "tool",
    "let",
    "talk",
    "next",
    "question",
    "maven",
    "help",
    "maven",
    "apache",
    "maven",
    "helps",
    "manage",
    "processes",
    "build",
    "process",
    "documentation",
    "release",
    "process",
    "distribution",
    "deployment",
    "preparing",
    "artifact",
    "tasks",
    "primarily",
    "taken",
    "care",
    "apache",
    "maven",
    "tool",
    "simplifies",
    "process",
    "project",
    "building",
    "also",
    "increases",
    "performance",
    "project",
    "overall",
    "building",
    "process",
    "things",
    "something",
    "taken",
    "care",
    "specific",
    "maven",
    "tool",
    "also",
    "uses",
    "particular",
    "uh",
    "know",
    "downloads",
    "jar",
    "files",
    "different",
    "dependencies",
    "example",
    "source",
    "code",
    "dependent",
    "apache",
    "web",
    "service",
    "uh",
    "jar",
    "files",
    "jar",
    "files",
    "case",
    "download",
    "jar",
    "files",
    "keep",
    "repository",
    "keep",
    "lib",
    "directory",
    "mention",
    "dependency",
    "maven",
    "jar",
    "file",
    "downloaded",
    "build",
    "process",
    "cached",
    "locally",
    "biggest",
    "advantage",
    "get",
    "maven",
    "take",
    "care",
    "dependencies",
    "anywhere",
    "source",
    "code",
    "system",
    "meven",
    "provides",
    "easy",
    "access",
    "required",
    "information",
    "uh",
    "helps",
    "developer",
    "build",
    "projects",
    "uh",
    "without",
    "know",
    "even",
    "worrying",
    "dependencies",
    "processes",
    "different",
    "environments",
    "different",
    "uh",
    "kind",
    "tool",
    "used",
    "platform",
    "linux",
    "windows",
    "kind",
    "conversions",
    "add",
    "new",
    "dependencies",
    "updated",
    "pom",
    "file",
    "depending",
    "dependencies",
    "source",
    "code",
    "built",
    "refer",
    "kind",
    "jar",
    "files",
    "play",
    "class",
    "bars",
    "build",
    "process",
    "customizations",
    "actually",
    "required",
    "one",
    "next",
    "question",
    "different",
    "elements",
    "may",
    "one",
    "take",
    "cares",
    "different",
    "kind",
    "elements",
    "taken",
    "care",
    "maven",
    "uh",
    "particular",
    "parameters",
    "elements",
    "bills",
    "dependencies",
    "reports",
    "distribution",
    "releases",
    "mailing",
    "list",
    "typical",
    "different",
    "different",
    "uh",
    "elements",
    "taken",
    "care",
    "maven",
    "build",
    "process",
    "preparation",
    "builds",
    "things",
    "explore",
    "extract",
    "part",
    "fully",
    "understand",
    "work",
    "different",
    "different",
    "processes",
    "next",
    "question",
    "difference",
    "primary",
    "difference",
    "maven",
    "first",
    "primarily",
    "used",
    "java",
    "based",
    "project",
    "older",
    "version",
    "maven",
    "something",
    "launched",
    "ant",
    "formal",
    "conventions",
    "like",
    "uh",
    "know",
    "coded",
    "file",
    "yes",
    "maven",
    "convention",
    "information",
    "required",
    "file",
    "ant",
    "procedural",
    "whereas",
    "maven",
    "declarative",
    "kind",
    "life",
    "cycle",
    "depends",
    "program",
    "maven",
    "lot",
    "life",
    "cycles",
    "configure",
    "utilize",
    "uh",
    "related",
    "scripts",
    "reusable",
    "reuse",
    "kind",
    "customizations",
    "order",
    "work",
    "yes",
    "maven",
    "much",
    "project",
    "related",
    "kind",
    "dependencies",
    "easily",
    "reusable",
    "nothing",
    "file",
    "artifact",
    "name",
    "dependencies",
    "uh",
    "something",
    "override",
    "change",
    "file",
    "reuse",
    "new",
    "project",
    "also",
    "reusability",
    "comes",
    "picture",
    "specific",
    "build",
    "tool",
    "plugins",
    "available",
    "code",
    "everything",
    "build",
    "process",
    "want",
    "prepare",
    "whereas",
    "case",
    "maven",
    "concept",
    "plugins",
    "really",
    "help",
    "us",
    "understand",
    "make",
    "use",
    "plugins",
    "reusability",
    "implemented",
    "differences",
    "available",
    "ant",
    "maven",
    "next",
    "thing",
    "exactly",
    "palm",
    "file",
    "palm",
    "file",
    "nothing",
    "kind",
    "xml",
    "file",
    "available",
    "information",
    "regarding",
    "project",
    "configuration",
    "details",
    "primarily",
    "used",
    "configuration",
    "needs",
    "done",
    "setup",
    "performed",
    "palm",
    "technical",
    "file",
    "build",
    "script",
    "prepare",
    "prepare",
    "uh",
    "using",
    "particular",
    "component",
    "particular",
    "mechanisms",
    "feel",
    "want",
    "kind",
    "setup",
    "things",
    "typically",
    "implemented",
    "done",
    "help",
    "build",
    "tools",
    "build",
    "tools",
    "really",
    "helpful",
    "us",
    "automations",
    "really",
    "help",
    "us",
    "understand",
    "build",
    "processes",
    "automate",
    "simply",
    "help",
    "file",
    "developers",
    "usually",
    "put",
    "everything",
    "inside",
    "uh",
    "dependencies",
    "file",
    "file",
    "uh",
    "usually",
    "present",
    "home",
    "directory",
    "current",
    "directory",
    "build",
    "triggered",
    "picked",
    "directory",
    "according",
    "steps",
    "according",
    "content",
    "file",
    "build",
    "processed",
    "created",
    "incorporate",
    "palm",
    "file",
    "different",
    "components",
    "included",
    "palm",
    "dot",
    "xml",
    "file",
    "dependencies",
    "uh",
    "developers",
    "contributors",
    "plugins",
    "plugin",
    "configuration",
    "resources",
    "typical",
    "components",
    "part",
    "permanent",
    "xml",
    "file",
    "uh",
    "form",
    "lot",
    "projects",
    "customization",
    "prompt",
    "file",
    "reused",
    "projects",
    "also",
    "one",
    "minimum",
    "requirement",
    "elements",
    "pump",
    "uh",
    "palmer",
    "xml",
    "file",
    "without",
    "pound",
    "xml",
    "file",
    "validated",
    "getting",
    "kind",
    "validation",
    "errors",
    "minimum",
    "required",
    "elements",
    "project",
    "root",
    "model",
    "version",
    "group",
    "id",
    "project",
    "artifact",
    "id",
    "project",
    "version",
    "artifact",
    "minimum",
    "things",
    "want",
    "define",
    "understand",
    "kind",
    "artifact",
    "trying",
    "prepare",
    "trying",
    "create",
    "minimum",
    "required",
    "elements",
    "required",
    "file",
    "without",
    "validation",
    "palm",
    "file",
    "fail",
    "build",
    "also",
    "fail",
    "exactly",
    "mint",
    "uh",
    "term",
    "called",
    "build",
    "tool",
    "build",
    "tool",
    "essential",
    "tool",
    "kind",
    "process",
    "building",
    "compiling",
    "source",
    "code",
    "needed",
    "required",
    "generated",
    "processes",
    "want",
    "generate",
    "source",
    "code",
    "want",
    "compile",
    "source",
    "code",
    "want",
    "generate",
    "source",
    "code",
    "want",
    "generate",
    "documentation",
    "source",
    "code",
    "want",
    "compile",
    "source",
    "code",
    "want",
    "package",
    "source",
    "code",
    "whether",
    "jar",
    "file",
    "war",
    "file",
    "er",
    "file",
    "whatever",
    "packaging",
    "mode",
    "want",
    "select",
    "able",
    "help",
    "particular",
    "build",
    "tool",
    "feel",
    "want",
    "upload",
    "particular",
    "artifacts",
    "artifact",
    "tree",
    "whether",
    "remote",
    "machine",
    "locally",
    "also",
    "help",
    "particular",
    "build",
    "tools",
    "build",
    "tools",
    "helpful",
    "lot",
    "activities",
    "developers",
    "one",
    "different",
    "steps",
    "involved",
    "install",
    "maven",
    "windows",
    "first",
    "download",
    "uh",
    "tar",
    "file",
    "maven",
    "apache",
    "maven",
    "repository",
    "done",
    "happens",
    "set",
    "couple",
    "environment",
    "variables",
    "download",
    "java",
    "jdk",
    "using",
    "exe",
    "file",
    "case",
    "java",
    "underscore",
    "home",
    "configured",
    "automatically",
    "available",
    "able",
    "run",
    "java",
    "command",
    "line",
    "case",
    "set",
    "java",
    "underscore",
    "home",
    "similarly",
    "maven",
    "go",
    "maven",
    "underscore",
    "home",
    "particular",
    "variable",
    "configure",
    "done",
    "edit",
    "path",
    "variable",
    "bin",
    "directory",
    "maven",
    "extracted",
    "folder",
    "put",
    "path",
    "variable",
    "done",
    "happen",
    "able",
    "check",
    "latest",
    "version",
    "version",
    "maven",
    "like",
    "old",
    "version",
    "extract",
    "latest",
    "version",
    "steps",
    "together",
    "ways",
    "actually",
    "go",
    "installation",
    "configurations",
    "maven",
    "windows",
    "platform",
    "different",
    "steps",
    "involved",
    "installation",
    "maven",
    "ubuntu",
    "ubuntu",
    "fine",
    "download",
    "package",
    "java",
    "jdk",
    "jdk",
    "installed",
    "simply",
    "go",
    "say",
    "yes",
    "want",
    "search",
    "particular",
    "maven",
    "package",
    "available",
    "jdk",
    "installed",
    "configure",
    "java",
    "underscore",
    "home",
    "m3",
    "underscore",
    "home",
    "main",
    "disco",
    "home",
    "path",
    "variable",
    "path",
    "variables",
    "something",
    "configured",
    "able",
    "check",
    "latest",
    "version",
    "like",
    "whether",
    "version",
    "correct",
    "getting",
    "standard",
    "version",
    "main",
    "mechanism",
    "able",
    "know",
    "configure",
    "maven",
    "ubuntu",
    "exactly",
    "command",
    "install",
    "char",
    "locals",
    "repository",
    "sometimes",
    "happens",
    "able",
    "fetch",
    "like",
    "uh",
    "dependencies",
    "present",
    "particular",
    "central",
    "repository",
    "minimum",
    "repository",
    "artifactory",
    "repository",
    "case",
    "third",
    "party",
    "jar",
    "want",
    "install",
    "locally",
    "onto",
    "repository",
    "case",
    "go",
    "uh",
    "download",
    "java",
    "file",
    "run",
    "command",
    "called",
    "mvn",
    "install",
    "install",
    "hyphen",
    "file",
    "giving",
    "path",
    "like",
    "hyphen",
    "file",
    "path",
    "file",
    "provided",
    "done",
    "happen",
    "local",
    "dot",
    "m2",
    "directory",
    "specific",
    "artifact",
    "downloaded",
    "installed",
    "mechanism",
    "able",
    "configure",
    "able",
    "set",
    "artifacts",
    "locally",
    "java",
    "file",
    "locally",
    "local",
    "repository",
    "next",
    "question",
    "know",
    "version",
    "maven",
    "used",
    "inversion",
    "maven",
    "pretty",
    "easy",
    "calculate",
    "go",
    "mvn",
    "space",
    "hyphen",
    "iphone",
    "version",
    "moment",
    "let",
    "know",
    "jdk",
    "java",
    "version",
    "using",
    "also",
    "show",
    "particular",
    "maven",
    "version",
    "going",
    "use",
    "details",
    "able",
    "get",
    "particular",
    "command",
    "exactly",
    "clean",
    "default",
    "frighten",
    "variable",
    "build",
    "cycles",
    "available",
    "within",
    "maven",
    "build",
    "cycles",
    "clean",
    "happens",
    "life",
    "cycle",
    "help",
    "perform",
    "project",
    "cleaning",
    "usually",
    "build",
    "files",
    "created",
    "target",
    "directory",
    "clean",
    "lifecycle",
    "essentially",
    "helping",
    "us",
    "clean",
    "directory",
    "particular",
    "target",
    "directory",
    "talk",
    "specific",
    "default",
    "default",
    "lifecycle",
    "handles",
    "projector",
    "deployment",
    "default",
    "lifecycle",
    "site",
    "something",
    "uh",
    "know",
    "helpful",
    "creating",
    "site",
    "documentation",
    "know",
    "kind",
    "life",
    "cycle",
    "available",
    "clean",
    "default",
    "site",
    "different",
    "life",
    "cycles",
    "perform",
    "different",
    "different",
    "kind",
    "uh",
    "attributes",
    "different",
    "tasks",
    "next",
    "question",
    "exactly",
    "maven",
    "repository",
    "maven",
    "repository",
    "refers",
    "directories",
    "package",
    "jar",
    "files",
    "contain",
    "metadata",
    "metadata",
    "refers",
    "palm",
    "files",
    "relevant",
    "project",
    "able",
    "get",
    "artifacts",
    "uh",
    "stored",
    "download",
    "artifacts",
    "also",
    "maven",
    "build",
    "put",
    "dependency",
    "different",
    "kind",
    "repositories",
    "available",
    "one",
    "local",
    "repository",
    "one",
    "remote",
    "repository",
    "one",
    "central",
    "repository",
    "different",
    "typical",
    "type",
    "repositories",
    "store",
    "artifacts",
    "also",
    "download",
    "artifacts",
    "also",
    "whenever",
    "required",
    "first",
    "one",
    "local",
    "repository",
    "local",
    "repository",
    "refers",
    "machine",
    "developers",
    "project",
    "related",
    "files",
    "stored",
    "whenever",
    "work",
    "uh",
    "particular",
    "maven",
    "home",
    "directory",
    "dot",
    "m2",
    "folder",
    "created",
    "usually",
    "whatever",
    "artifacts",
    "downloaded",
    "artifactory",
    "maven",
    "repository",
    "gets",
    "cached",
    "locally",
    "downloaded",
    "next",
    "time",
    "download",
    "artifacts",
    "dependency",
    "together",
    "local",
    "repository",
    "something",
    "available",
    "locally",
    "developers",
    "machine",
    "contains",
    "dependent",
    "jars",
    "particular",
    "developer",
    "downloading",
    "maven",
    "build",
    "remote",
    "repositories",
    "refers",
    "repository",
    "present",
    "server",
    "uh",
    "downloading",
    "uh",
    "particular",
    "dependencies",
    "running",
    "maven",
    "build",
    "fresh",
    "machine",
    "usually",
    "local",
    "repository",
    "exist",
    "case",
    "happens",
    "dot",
    "m2",
    "directory",
    "empty",
    "moment",
    "run",
    "build",
    "happen",
    "artifacts",
    "dependencies",
    "downloaded",
    "remote",
    "repository",
    "done",
    "uh",
    "downloaded",
    "added",
    "downloaded",
    "cached",
    "locally",
    "uh",
    "helpful",
    "future",
    "run",
    "considered",
    "local",
    "repository",
    "artifacts",
    "dependencies",
    "downloaded",
    "central",
    "repository",
    "something",
    "known",
    "maven",
    "community",
    "artifacts",
    "available",
    "usually",
    "cache",
    "mirror",
    "central",
    "repositories",
    "particular",
    "remote",
    "repositories",
    "could",
    "possibility",
    "remote",
    "repositories",
    "something",
    "hosting",
    "organization",
    "central",
    "repository",
    "something",
    "available",
    "centrally",
    "everyone",
    "use",
    "something",
    "know",
    "kind",
    "repositories",
    "every",
    "artifacts",
    "stored",
    "anyone",
    "able",
    "access",
    "particular",
    "artifacts",
    "artifacts",
    "every",
    "artifacts",
    "every",
    "open",
    "source",
    "uh",
    "artifacts",
    "something",
    "available",
    "central",
    "repository",
    "maven",
    "architecture",
    "really",
    "work",
    "mimon",
    "architecture",
    "really",
    "works",
    "three",
    "steps",
    "first",
    "step",
    "reads",
    "file",
    "first",
    "step",
    "second",
    "downloads",
    "dependencies",
    "uh",
    "defined",
    "power",
    "xml",
    "file",
    "local",
    "repository",
    "central",
    "remote",
    "repository",
    "done",
    "uh",
    "know",
    "create",
    "generate",
    "reports",
    "according",
    "life",
    "cycles",
    "configured",
    "whether",
    "clean",
    "install",
    "site",
    "deploy",
    "package",
    "whatever",
    "life",
    "cycle",
    "want",
    "trigger",
    "triggering",
    "particular",
    "life",
    "cycle",
    "corresponding",
    "build",
    "specific",
    "task",
    "performed",
    "three",
    "steps",
    "overall",
    "build",
    "kind",
    "uh",
    "execution",
    "palmer",
    "xml",
    "file",
    "really",
    "happens",
    "exactly",
    "maven",
    "build",
    "lifecycle",
    "maven",
    "lifecycle",
    "nothing",
    "collection",
    "steps",
    "needs",
    "uh",
    "followed",
    "proper",
    "uh",
    "build",
    "project",
    "primary",
    "three",
    "cycles",
    "available",
    "default",
    "handles",
    "project",
    "deployment",
    "clean",
    "handles",
    "project",
    "uh",
    "cleaning",
    "site",
    "handles",
    "creation",
    "project",
    "sites",
    "documentation",
    "three",
    "primary",
    "build",
    "cycles",
    "life",
    "cycles",
    "available",
    "build",
    "lifecycle",
    "know",
    "different",
    "kind",
    "phases",
    "stages",
    "previous",
    "uh",
    "particular",
    "slide",
    "talking",
    "different",
    "uh",
    "particular",
    "build",
    "life",
    "cycles",
    "available",
    "different",
    "phases",
    "like",
    "different",
    "executions",
    "like",
    "deep",
    "available",
    "inside",
    "specific",
    "maven",
    "build",
    "life",
    "cycle",
    "see",
    "compiling",
    "test",
    "compile",
    "test",
    "execution",
    "package",
    "integration",
    "test",
    "verify",
    "install",
    "lastly",
    "deploy",
    "different",
    "build",
    "phases",
    "available",
    "exactly",
    "command",
    "use",
    "particular",
    "maven",
    "site",
    "mvn",
    "site",
    "something",
    "used",
    "create",
    "maven",
    "site",
    "usually",
    "whatever",
    "artifacts",
    "prepared",
    "prepared",
    "target",
    "directory",
    "also",
    "able",
    "see",
    "site",
    "directory",
    "available",
    "target",
    "directory",
    "refer",
    "site",
    "documentations",
    "different",
    "conventions",
    "used",
    "naming",
    "project",
    "may",
    "1",
    "usually",
    "involves",
    "three",
    "components",
    "full",
    "name",
    "project",
    "maven",
    "includes",
    "first",
    "group",
    "id",
    "uh",
    "example",
    "com",
    "apache",
    "uh",
    "particular",
    "way",
    "provide",
    "group",
    "id",
    "artifact",
    "id",
    "exact",
    "project",
    "name",
    "like",
    "maven",
    "project",
    "whatever",
    "project",
    "creating",
    "sample",
    "project",
    "example",
    "project",
    "kind",
    "things",
    "artifact",
    "id",
    "lastly",
    "version",
    "like",
    "version",
    "artifact",
    "want",
    "prepare",
    "like",
    "hyphen",
    "snapshot",
    "like",
    "information",
    "providing",
    "particular",
    "version",
    "trying",
    "configure",
    "let",
    "move",
    "intermediate",
    "level",
    "little",
    "bit",
    "complex",
    "questions",
    "related",
    "maven",
    "exactly",
    "maven",
    "artifact",
    "usually",
    "happens",
    "build",
    "process",
    "end",
    "result",
    "build",
    "process",
    "get",
    "artifacts",
    "example",
    "build",
    "project",
    "able",
    "exe",
    "dll",
    "files",
    "artifacts",
    "similarly",
    "case",
    "maven",
    "build",
    "process",
    "get",
    "different",
    "kind",
    "artifacts",
    "like",
    "depending",
    "packaging",
    "mode",
    "like",
    "jar",
    "file",
    "var",
    "files",
    "er",
    "files",
    "something",
    "know",
    "getting",
    "generated",
    "build",
    "process",
    "main",
    "process",
    "store",
    "local",
    "repository",
    "want",
    "push",
    "remote",
    "repository",
    "something",
    "totally",
    "depends",
    "maven",
    "tool",
    "help",
    "create",
    "artifacts",
    "whether",
    "jar",
    "file",
    "whether",
    "var",
    "files",
    "whether",
    "er",
    "file",
    "every",
    "artifact",
    "three",
    "attributes",
    "first",
    "one",
    "group",
    "id",
    "artifact",
    "id",
    "particular",
    "version",
    "able",
    "identify",
    "artifact",
    "maven",
    "maven",
    "name",
    "jar",
    "file",
    "actually",
    "referring",
    "attributes",
    "like",
    "crop",
    "id",
    "artifact",
    "id",
    "version",
    "artifact",
    "different",
    "phases",
    "clean",
    "life",
    "cycle",
    "clean",
    "something",
    "used",
    "clean",
    "target",
    "directory",
    "fresh",
    "build",
    "triggered",
    "three",
    "steps",
    "pretty",
    "clean",
    "clean",
    "post",
    "clean",
    "wish",
    "want",
    "override",
    "particular",
    "life",
    "cycle",
    "configurations",
    "want",
    "run",
    "particular",
    "steps",
    "clean",
    "activity",
    "want",
    "like",
    "steps",
    "clean",
    "pour",
    "screen",
    "utilized",
    "different",
    "phases",
    "site",
    "life",
    "cycle",
    "site",
    "post",
    "site",
    "site",
    "deploy",
    "different",
    "phases",
    "available",
    "site",
    "life",
    "cycle",
    "exactly",
    "meant",
    "maven",
    "huge",
    "difference",
    "ant",
    "maven",
    "much",
    "support",
    "plugins",
    "reason",
    "deal",
    "build",
    "configurations",
    "simply",
    "put",
    "overall",
    "build",
    "process",
    "build",
    "triggered",
    "something",
    "case",
    "maven",
    "maven",
    "lot",
    "flexibility",
    "actually",
    "put",
    "exactly",
    "build",
    "configurations",
    "want",
    "put",
    "put",
    "features",
    "like",
    "important",
    "features",
    "maven",
    "uh",
    "plugins",
    "utilize",
    "example",
    "want",
    "perform",
    "compilation",
    "really",
    "want",
    "kind",
    "configurations",
    "one",
    "simply",
    "use",
    "compilation",
    "plugin",
    "maven",
    "really",
    "help",
    "unnecessarily",
    "write",
    "rewrite",
    "configuration",
    "compilation",
    "done",
    "something",
    "plugins",
    "simply",
    "import",
    "plugin",
    "build",
    "process",
    "compilation",
    "process",
    "pretty",
    "standard",
    "mode",
    "really",
    "kind",
    "workarounds",
    "simply",
    "small",
    "automations",
    "able",
    "reach",
    "maven",
    "plugins",
    "integrated",
    "palmer",
    "xml",
    "file",
    "desire",
    "particular",
    "procedures",
    "steps",
    "executed",
    "biggest",
    "benefit",
    "really",
    "get",
    "help",
    "maven",
    "plugins",
    "exactly",
    "maven",
    "plugins",
    "utilized",
    "create",
    "jar",
    "files",
    "create",
    "war",
    "files",
    "compile",
    "code",
    "files",
    "perform",
    "unit",
    "testing",
    "create",
    "project",
    "documentation",
    "create",
    "project",
    "reports",
    "variety",
    "things",
    "actually",
    "use",
    "maven",
    "plugins",
    "integrations",
    "within",
    "palm",
    "direct",
    "xml",
    "file",
    "plugins",
    "import",
    "plugin",
    "desired",
    "activity",
    "performed",
    "different",
    "type",
    "plugins",
    "either",
    "build",
    "projects",
    "uh",
    "performing",
    "build",
    "activities",
    "build",
    "plugins",
    "reporting",
    "plugins",
    "also",
    "generated",
    "utilized",
    "generate",
    "reports",
    "process",
    "reports",
    "kind",
    "formatting",
    "kind",
    "processing",
    "reports",
    "reporting",
    "plugins",
    "utilized",
    "exactly",
    "difference",
    "convention",
    "configuration",
    "maven",
    "convention",
    "particular",
    "process",
    "developers",
    "required",
    "create",
    "build",
    "processes",
    "configuration",
    "know",
    "developers",
    "supposed",
    "create",
    "build",
    "processes",
    "users",
    "rectify",
    "configuration",
    "detail",
    "project",
    "created",
    "automatically",
    "create",
    "structure",
    "must",
    "specify",
    "every",
    "case",
    "configuration",
    "provide",
    "every",
    "details",
    "configurations",
    "really",
    "happens",
    "um",
    "put",
    "every",
    "detail",
    "power",
    "xml",
    "file",
    "particular",
    "configurations",
    "really",
    "work",
    "huge",
    "difference",
    "conventions",
    "configurations",
    "exactly",
    "said",
    "maven",
    "uses",
    "conventions",
    "configurations",
    "maven",
    "pretty",
    "much",
    "puts",
    "efforts",
    "like",
    "particular",
    "developers",
    "put",
    "every",
    "configuration",
    "plugins",
    "available",
    "pretty",
    "much",
    "making",
    "use",
    "case",
    "worry",
    "executions",
    "able",
    "pretty",
    "much",
    "work",
    "conventions",
    "like",
    "maven",
    "uses",
    "conventions",
    "incident",
    "configurations",
    "developers",
    "know",
    "create",
    "movement",
    "project",
    "rest",
    "particular",
    "structure",
    "compared",
    "automatically",
    "uh",
    "know",
    "expecting",
    "developers",
    "configuration",
    "work",
    "everything",
    "taken",
    "care",
    "way",
    "start",
    "things",
    "rest",
    "things",
    "taken",
    "care",
    "maven",
    "maven",
    "responsible",
    "plugins",
    "responsible",
    "set",
    "default",
    "architecture",
    "default",
    "folder",
    "structures",
    "place",
    "source",
    "code",
    "desired",
    "folder",
    "structure",
    "something",
    "need",
    "particular",
    "developers",
    "exactly",
    "maven",
    "order",
    "inheritance",
    "order",
    "inheritance",
    "settings",
    "cli",
    "parameters",
    "parent",
    "pom",
    "project",
    "bomb",
    "means",
    "configuration",
    "settings",
    "highest",
    "value",
    "cli",
    "parameters",
    "parent",
    "palm",
    "project",
    "palm",
    "way",
    "particular",
    "parameters",
    "configurations",
    "picked",
    "may",
    "one",
    "order",
    "build",
    "life",
    "cycles",
    "phases",
    "imply",
    "basic",
    "concept",
    "may",
    "build",
    "life",
    "cycles",
    "consist",
    "sequence",
    "build",
    "phases",
    "build",
    "phase",
    "consists",
    "sequence",
    "goals",
    "phase",
    "run",
    "goals",
    "related",
    "phase",
    "plugins",
    "also",
    "compiled",
    "able",
    "lot",
    "particular",
    "goals",
    "residing",
    "inside",
    "phase",
    "similarly",
    "life",
    "cycle",
    "nothing",
    "kind",
    "sequence",
    "different",
    "phase",
    "life",
    "cycle",
    "comes",
    "top",
    "comes",
    "phases",
    "comes",
    "goals",
    "terminology",
    "called",
    "goal",
    "case",
    "maven",
    "term",
    "terminology",
    "goal",
    "refers",
    "specific",
    "task",
    "makes",
    "possible",
    "project",
    "built",
    "organized",
    "something",
    "run",
    "actual",
    "implementation",
    "going",
    "example",
    "build",
    "process",
    "lib",
    "build",
    "phase",
    "different",
    "goals",
    "like",
    "clean",
    "install",
    "package",
    "deploy",
    "different",
    "typical",
    "goals",
    "available",
    "execute",
    "main",
    "one",
    "different",
    "goals",
    "like",
    "uh",
    "execute",
    "run",
    "maven",
    "build",
    "next",
    "question",
    "exactly",
    "meant",
    "term",
    "dependencies",
    "repositories",
    "maven",
    "dependencies",
    "refer",
    "java",
    "libraries",
    "usually",
    "put",
    "file",
    "happens",
    "sometimes",
    "source",
    "code",
    "requiring",
    "java",
    "files",
    "like",
    "secondary",
    "java",
    "files",
    "performing",
    "build",
    "process",
    "instead",
    "downloading",
    "uh",
    "storing",
    "class",
    "path",
    "build",
    "process",
    "specify",
    "dependency",
    "artifact",
    "dependency",
    "need",
    "put",
    "dependency",
    "put",
    "able",
    "jar",
    "file",
    "downloaded",
    "cache",
    "local",
    "repository",
    "maven",
    "build",
    "project",
    "dependencies",
    "present",
    "local",
    "repository",
    "maven",
    "try",
    "download",
    "central",
    "repository",
    "uh",
    "uh",
    "know",
    "something",
    "available",
    "downloaded",
    "central",
    "repository",
    "cached",
    "locally",
    "local",
    "repository",
    "cycle",
    "implemented",
    "utilized",
    "process",
    "exactly",
    "snapshot",
    "maven",
    "snapshot",
    "refers",
    "version",
    "already",
    "available",
    "movement",
    "report",
    "repository",
    "signifies",
    "latest",
    "development",
    "copy",
    "case",
    "snapshot",
    "meven",
    "checks",
    "new",
    "version",
    "snapshot",
    "remote",
    "repository",
    "every",
    "new",
    "build",
    "build",
    "process",
    "like",
    "know",
    "new",
    "snapshot",
    "version",
    "downloaded",
    "snapshot",
    "updated",
    "data",
    "service",
    "team",
    "uh",
    "updated",
    "source",
    "code",
    "every",
    "time",
    "repository",
    "maven",
    "build",
    "snap",
    "shot",
    "something",
    "using",
    "like",
    "frequently",
    "updating",
    "frequently",
    "updating",
    "version",
    "try",
    "explore",
    "try",
    "modifications",
    "different",
    "type",
    "projects",
    "available",
    "maven",
    "thousands",
    "java",
    "projects",
    "know",
    "uh",
    "utilized",
    "uh",
    "implemented",
    "one",
    "helps",
    "user",
    "longer",
    "remember",
    "every",
    "configurations",
    "set",
    "particular",
    "project",
    "example",
    "spring",
    "boot",
    "spring",
    "mvc",
    "spring",
    "boot",
    "etc",
    "different",
    "projects",
    "already",
    "available",
    "maven",
    "already",
    "discussed",
    "projects",
    "maven",
    "something",
    "know",
    "considered",
    "default",
    "lot",
    "organizations",
    "actually",
    "using",
    "know",
    "storing",
    "utilizing",
    "particular",
    "maven",
    "project",
    "exactly",
    "maven",
    "uh",
    "archetype",
    "maven",
    "octave",
    "refers",
    "maven",
    "plugin",
    "uh",
    "entitled",
    "create",
    "project",
    "structure",
    "per",
    "template",
    "archetypes",
    "project",
    "templates",
    "generated",
    "maven",
    "new",
    "project",
    "created",
    "something",
    "using",
    "able",
    "create",
    "fresh",
    "new",
    "projects",
    "right",
    "let",
    "go",
    "advanced",
    "level",
    "maven",
    "questions",
    "exactly",
    "command",
    "create",
    "new",
    "project",
    "based",
    "archive",
    "type",
    "mvn",
    "archetype",
    "generate",
    "used",
    "create",
    "new",
    "java",
    "project",
    "based",
    "archetype",
    "take",
    "parameters",
    "end",
    "user",
    "depending",
    "parameters",
    "create",
    "file",
    "create",
    "source",
    "directories",
    "uh",
    "inside",
    "main",
    "java",
    "test",
    "different",
    "couple",
    "directories",
    "directly",
    "structures",
    "automatically",
    "created",
    "require",
    "command",
    "going",
    "create",
    "project",
    "scratch",
    "day",
    "one",
    "command",
    "help",
    "folder",
    "structures",
    "created",
    "put",
    "source",
    "code",
    "files",
    "folder",
    "structure",
    "mechanism",
    "able",
    "see",
    "setup",
    "performed",
    "really",
    "maven",
    "clean",
    "implies",
    "movement",
    "clean",
    "plugin",
    "suggests",
    "going",
    "clean",
    "files",
    "directories",
    "whenever",
    "build",
    "process",
    "usually",
    "target",
    "directory",
    "class",
    "files",
    "jar",
    "files",
    "whatever",
    "generated",
    "source",
    "code",
    "available",
    "present",
    "target",
    "directory",
    "maven",
    "clean",
    "something",
    "available",
    "going",
    "clean",
    "directories",
    "directory",
    "structure",
    "cleanup",
    "able",
    "fresh",
    "uh",
    "build",
    "process",
    "kind",
    "issues",
    "main",
    "reason",
    "looking",
    "forward",
    "particular",
    "mechanism",
    "uh",
    "particular",
    "changes",
    "exactly",
    "build",
    "profile",
    "build",
    "profiles",
    "refers",
    "set",
    "configurations",
    "uh",
    "like",
    "typically",
    "two",
    "different",
    "kind",
    "build",
    "processes",
    "feel",
    "file",
    "use",
    "want",
    "run",
    "different",
    "different",
    "uh",
    "particular",
    "configurations",
    "able",
    "pretty",
    "much",
    "help",
    "component",
    "build",
    "profile",
    "used",
    "customization",
    "processes",
    "able",
    "process",
    "able",
    "perform",
    "configurations",
    "setups",
    "together",
    "important",
    "aspect",
    "considered",
    "need",
    "discuss",
    "talk",
    "build",
    "profile",
    "build",
    "profile",
    "whenever",
    "feel",
    "want",
    "customizations",
    "want",
    "proceed",
    "setup",
    "utilized",
    "next",
    "thing",
    "different",
    "type",
    "build",
    "profiles",
    "available",
    "build",
    "profiles",
    "done",
    "particular",
    "project",
    "like",
    "per",
    "project",
    "uh",
    "even",
    "build",
    "profiles",
    "file",
    "also",
    "feel",
    "want",
    "file",
    "also",
    "different",
    "ways",
    "customization",
    "customization",
    "done",
    "able",
    "different",
    "uh",
    "ways",
    "setups",
    "configurations",
    "exactly",
    "meant",
    "uh",
    "particular",
    "system",
    "dependencies",
    "let",
    "talk",
    "also",
    "system",
    "dependencies",
    "refers",
    "uh",
    "particular",
    "mechanisms",
    "feel",
    "dependencies",
    "uh",
    "know",
    "present",
    "something",
    "scope",
    "system",
    "dependencies",
    "commonly",
    "used",
    "help",
    "maven",
    "know",
    "dependencies",
    "provided",
    "jdk",
    "system",
    "dependencies",
    "mostly",
    "used",
    "resolve",
    "dependencies",
    "artifacts",
    "provided",
    "jdk",
    "dependencies",
    "somewhat",
    "utilized",
    "used",
    "able",
    "implement",
    "go",
    "ahead",
    "system",
    "dependencies",
    "reason",
    "using",
    "optional",
    "dependency",
    "optional",
    "dependencies",
    "used",
    "decrease",
    "transitive",
    "burden",
    "libraries",
    "happens",
    "download",
    "artifact",
    "put",
    "dependency",
    "could",
    "possibility",
    "dependencies",
    "particular",
    "optional",
    "also",
    "downloaded",
    "always",
    "required",
    "yes",
    "sometimes",
    "happens",
    "downloaded",
    "put",
    "uh",
    "every",
    "uh",
    "artifact",
    "dependency",
    "powder",
    "xml",
    "file",
    "example",
    "trying",
    "download",
    "apache",
    "tool",
    "like",
    "three",
    "four",
    "jar",
    "files",
    "three",
    "four",
    "another",
    "dependencies",
    "also",
    "getting",
    "downloaded",
    "using",
    "dependencies",
    "totally",
    "create",
    "put",
    "uh",
    "list",
    "entry",
    "dependency",
    "list",
    "pound",
    "xml",
    "file",
    "really",
    "save",
    "time",
    "feel",
    "want",
    "optional",
    "ones",
    "really",
    "want",
    "get",
    "rid",
    "also",
    "exclude",
    "downloading",
    "kind",
    "dependencies",
    "optional",
    "ones",
    "depending",
    "requirement",
    "utilize",
    "uh",
    "process",
    "feel",
    "want",
    "get",
    "wo",
    "want",
    "process",
    "certainly",
    "ignore",
    "get",
    "rid",
    "also",
    "dependency",
    "scope",
    "many",
    "type",
    "dependencies",
    "scope",
    "different",
    "type",
    "dependency",
    "scores",
    "used",
    "every",
    "stage",
    "build",
    "compile",
    "provided",
    "runtime",
    "test",
    "system",
    "import",
    "different",
    "kind",
    "dependency",
    "scopes",
    "using",
    "define",
    "exactly",
    "want",
    "go",
    "ahead",
    "specific",
    "build",
    "process",
    "depending",
    "requirement",
    "explore",
    "build",
    "scopes",
    "get",
    "benefits",
    "exactly",
    "intransitive",
    "dependency",
    "may",
    "one",
    "maven",
    "avoids",
    "need",
    "find",
    "specify",
    "libraries",
    "dependencies",
    "require",
    "including",
    "transitive",
    "dependencies",
    "automatically",
    "transitive",
    "dependencies",
    "says",
    "depends",
    "x",
    "depends",
    "depends",
    "z",
    "x",
    "depends",
    "means",
    "dependent",
    "one",
    "artifact",
    "also",
    "need",
    "z",
    "artifact",
    "artifact",
    "need",
    "get",
    "dependencies",
    "normal",
    "trying",
    "download",
    "particular",
    "artifacts",
    "download",
    "dependency",
    "dependency",
    "also",
    "dependent",
    "artifact",
    "jar",
    "file",
    "include",
    "something",
    "able",
    "get",
    "easily",
    "download",
    "dependent",
    "jar",
    "files",
    "also",
    "maven",
    "build",
    "success",
    "maven",
    "build",
    "profile",
    "activated",
    "even",
    "build",
    "profile",
    "activated",
    "different",
    "ways",
    "explicitly",
    "using",
    "command",
    "command",
    "line",
    "talk",
    "profile",
    "want",
    "execute",
    "maven",
    "settings",
    "uh",
    "based",
    "environment",
    "parameters",
    "os",
    "settings",
    "present",
    "missing",
    "files",
    "different",
    "ways",
    "actually",
    "activate",
    "particular",
    "profile",
    "want",
    "profiles",
    "configurations",
    "also",
    "saved",
    "various",
    "situations",
    "various",
    "files",
    "able",
    "refer",
    "file",
    "want",
    "refer",
    "meant",
    "dependency",
    "exclusion",
    "exclusion",
    "used",
    "exclude",
    "transitive",
    "dependency",
    "never",
    "know",
    "trying",
    "put",
    "dependency",
    "uh",
    "entry",
    "power",
    "xml",
    "file",
    "artifact",
    "also",
    "dependent",
    "another",
    "artifact",
    "order",
    "feel",
    "order",
    "see",
    "want",
    "exclude",
    "dependent",
    "artifact",
    "automatically",
    "downloaded",
    "also",
    "exclude",
    "help",
    "exclusion",
    "uh",
    "avoid",
    "transitive",
    "dependency",
    "help",
    "dependency",
    "exclusions",
    "exactly",
    "mojo",
    "mojo",
    "nothing",
    "maven",
    "plain",
    "old",
    "java",
    "object",
    "executable",
    "goal",
    "maven",
    "refer",
    "distribution",
    "mozos",
    "moses",
    "enable",
    "maven",
    "extend",
    "functionality",
    "already",
    "founded",
    "kind",
    "extension",
    "using",
    "get",
    "additional",
    "benefits",
    "executions",
    "command",
    "create",
    "new",
    "project",
    "based",
    "hard",
    "drive",
    "archetype",
    "something",
    "normally",
    "use",
    "create",
    "new",
    "projects",
    "give",
    "parameters",
    "command",
    "want",
    "kind",
    "interactive",
    "mode",
    "take",
    "parameters",
    "end",
    "user",
    "according",
    "project",
    "created",
    "onto",
    "hard",
    "drive",
    "onto",
    "server",
    "wherever",
    "wish",
    "want",
    "create",
    "create",
    "new",
    "project",
    "explain",
    "maven",
    "file",
    "maven",
    "file",
    "contains",
    "elements",
    "used",
    "define",
    "human",
    "execution",
    "different",
    "uh",
    "settings",
    "like",
    "local",
    "remote",
    "center",
    "different",
    "repositories",
    "configured",
    "case",
    "happens",
    "uh",
    "usually",
    "configurations",
    "done",
    "way",
    "know",
    "go",
    "executions",
    "go",
    "build",
    "process",
    "complete",
    "executions",
    "uh",
    "involved",
    "achieved",
    "executions",
    "something",
    "really",
    "perform",
    "uh",
    "put",
    "credentials",
    "connect",
    "remote",
    "repository",
    "connect",
    "remote",
    "repository",
    "stuff",
    "something",
    "talk",
    "exactly",
    "meant",
    "term",
    "superbomb",
    "superform",
    "refers",
    "default",
    "bomb",
    "maven",
    "moms",
    "maven",
    "ca",
    "derive",
    "nothing",
    "reference",
    "parent",
    "bomb",
    "available",
    "super",
    "pump",
    "define",
    "dependencies",
    "super",
    "pump",
    "automatically",
    "uh",
    "child",
    "bomb",
    "also",
    "able",
    "inherit",
    "dependencies",
    "put",
    "uh",
    "executions",
    "like",
    "put",
    "configuration",
    "super",
    "pump",
    "multiple",
    "uh",
    "projects",
    "going",
    "refer",
    "able",
    "refer",
    "easily",
    "reason",
    "primarily",
    "use",
    "super",
    "pump",
    "execution",
    "processes",
    "put",
    "projects",
    "effort",
    "refer",
    "inherit",
    "exactly",
    "dependencies",
    "stored",
    "dependencies",
    "stored",
    "like",
    "different",
    "locations",
    "like",
    "local",
    "repository",
    "remote",
    "repository",
    "local",
    "repositories",
    "local",
    "developers",
    "machine",
    "remote",
    "repository",
    "something",
    "available",
    "server",
    "form",
    "artifactory",
    "let",
    "talk",
    "gradle",
    "installation",
    "important",
    "aspect",
    "done",
    "installation",
    "download",
    "cradle",
    "executables",
    "right",
    "let",
    "see",
    "different",
    "steps",
    "involved",
    "process",
    "cradle",
    "installation",
    "talk",
    "gradle",
    "installation",
    "primary",
    "four",
    "steps",
    "available",
    "first",
    "one",
    "check",
    "java",
    "installed",
    "uh",
    "java",
    "installed",
    "go",
    "open",
    "jdk",
    "go",
    "oracle",
    "java",
    "installation",
    "jdk",
    "system",
    "jdk8",
    "something",
    "commonly",
    "use",
    "nowadays",
    "install",
    "java",
    "downloaded",
    "installed",
    "gradle",
    "uh",
    "download",
    "cradle",
    "gradle",
    "binaries",
    "executable",
    "uh",
    "zip",
    "file",
    "gets",
    "downloaded",
    "add",
    "environment",
    "variables",
    "validate",
    "gradle",
    "installation",
    "working",
    "fine",
    "expected",
    "gradle",
    "installation",
    "local",
    "systems",
    "uh",
    "windows",
    "platform",
    "see",
    "exactly",
    "go",
    "installation",
    "cradle",
    "see",
    "different",
    "version",
    "going",
    "install",
    "let",
    "go",
    "back",
    "system",
    "see",
    "go",
    "gradle",
    "installation",
    "website",
    "jdk",
    "java",
    "recall",
    "java",
    "different",
    "jdk",
    "whatever",
    "option",
    "want",
    "select",
    "go",
    "jdk8",
    "something",
    "commonly",
    "used",
    "nowadays",
    "like",
    "comfortable",
    "compatible",
    "version",
    "available",
    "um",
    "case",
    "want",
    "see",
    "jdk",
    "installed",
    "system",
    "say",
    "like",
    "java",
    "hyphen",
    "version",
    "give",
    "output",
    "whether",
    "java",
    "installing",
    "system",
    "case",
    "system",
    "java",
    "installed",
    "really",
    "want",
    "installation",
    "download",
    "jdk",
    "installer",
    "website",
    "oracle",
    "website",
    "proceed",
    "part",
    "jdk",
    "installed",
    "go",
    "cradle",
    "installation",
    "cradle",
    "something",
    "though",
    "performing",
    "build",
    "automations",
    "stuff",
    "download",
    "binaries",
    "like",
    "zip",
    "file",
    "probably",
    "executables",
    "particular",
    "environment",
    "variables",
    "configured",
    "able",
    "system",
    "modified",
    "right",
    "got",
    "like",
    "prerequests",
    "java",
    "version",
    "installed",
    "next",
    "thing",
    "install",
    "download",
    "executables",
    "uh",
    "order",
    "download",
    "latest",
    "uh",
    "gradle",
    "distribution",
    "click",
    "one",
    "right",
    "different",
    "options",
    "like",
    "uh",
    "want",
    "go",
    "like",
    "binary",
    "complete",
    "go",
    "binary",
    "want",
    "source",
    "want",
    "binaries",
    "executables",
    "getting",
    "downloaded",
    "around",
    "close",
    "100",
    "mb",
    "installer",
    "extract",
    "directory",
    "path",
    "need",
    "configure",
    "environment",
    "variable",
    "way",
    "able",
    "see",
    "gradle",
    "executables",
    "running",
    "give",
    "complete",
    "output",
    "us",
    "case",
    "may",
    "take",
    "time",
    "particular",
    "modifications",
    "download",
    "done",
    "extract",
    "extraction",
    "done",
    "able",
    "go",
    "back",
    "particular",
    "version",
    "configurations",
    "established",
    "let",
    "wait",
    "time",
    "continuing",
    "environment",
    "variables",
    "like",
    "one",
    "installation",
    "extraction",
    "done",
    "go",
    "downloads",
    "one",
    "downloaded",
    "extract",
    "extraction",
    "required",
    "setup",
    "like",
    "set",
    "path",
    "environment",
    "variables",
    "path",
    "configured",
    "established",
    "able",
    "start",
    "part",
    "execution",
    "meanwhile",
    "files",
    "getting",
    "started",
    "let",
    "see",
    "already",
    "got",
    "folder",
    "structure",
    "see",
    "give",
    "path",
    "two",
    "environment",
    "variables",
    "configure",
    "one",
    "cradle",
    "underscore",
    "home",
    "one",
    "path",
    "variable",
    "copy",
    "path",
    "meanwhile",
    "getting",
    "uh",
    "extracted",
    "save",
    "time",
    "go",
    "environment",
    "variable",
    "right",
    "click",
    "one",
    "properties",
    "go",
    "advanced",
    "systems",
    "settings",
    "environment",
    "variables",
    "give",
    "like",
    "gradle",
    "underscore",
    "home",
    "one",
    "going",
    "giving",
    "till",
    "bin",
    "directory",
    "needs",
    "gradle",
    "extracted",
    "say",
    "okay",
    "uh",
    "go",
    "path",
    "variable",
    "adding",
    "new",
    "entry",
    "one",
    "putting",
    "till",
    "pin",
    "directory",
    "gradle",
    "executables",
    "running",
    "gradle",
    "command",
    "two",
    "variables",
    "configure",
    "okay",
    "okay",
    "okay",
    "one",
    "done",
    "open",
    "command",
    "prompt",
    "see",
    "whether",
    "execution",
    "commands",
    "running",
    "completely",
    "successful",
    "meanwhile",
    "extracting",
    "executables",
    "things",
    "help",
    "us",
    "understand",
    "whole",
    "build",
    "process",
    "build",
    "tools",
    "integrated",
    "extraction",
    "done",
    "run",
    "like",
    "cmd",
    "java",
    "iphone",
    "version",
    "check",
    "version",
    "java",
    "gradle",
    "underscore",
    "version",
    "going",
    "see",
    "see",
    "check",
    "version",
    "gradle",
    "installed",
    "see",
    "says",
    "version",
    "installed",
    "case",
    "way",
    "going",
    "cradle",
    "installation",
    "performed",
    "particular",
    "system",
    "one",
    "uh",
    "also",
    "working",
    "demos",
    "understand",
    "make",
    "use",
    "gradle",
    "performing",
    "build",
    "activity",
    "let",
    "begin",
    "first",
    "understanding",
    "exactly",
    "incredible",
    "griddle",
    "kind",
    "build",
    "tool",
    "used",
    "build",
    "automation",
    "performance",
    "used",
    "various",
    "programming",
    "languages",
    "primarily",
    "used",
    "java",
    "based",
    "applications",
    "kind",
    "build",
    "tool",
    "help",
    "see",
    "exactly",
    "automatically",
    "prepare",
    "builds",
    "perform",
    "automations",
    "earlier",
    "used",
    "build",
    "activity",
    "eclipse",
    "used",
    "manually",
    "right",
    "help",
    "build",
    "tool",
    "going",
    "like",
    "automatically",
    "without",
    "uh",
    "manual",
    "efforts",
    "like",
    "lot",
    "activities",
    "build",
    "process",
    "primarily",
    "different",
    "activities",
    "like",
    "compilations",
    "linkage",
    "packaging",
    "different",
    "tasks",
    "perform",
    "build",
    "process",
    "understand",
    "build",
    "done",
    "perform",
    "automations",
    "uh",
    "uh",
    "process",
    "also",
    "kind",
    "standardized",
    "want",
    "automate",
    "something",
    "standards",
    "standard",
    "process",
    "something",
    "require",
    "going",
    "ahead",
    "part",
    "reason",
    "getting",
    "well",
    "tool",
    "build",
    "tool",
    "helps",
    "us",
    "standardization",
    "process",
    "see",
    "standards",
    "met",
    "proceed",
    "part",
    "also",
    "something",
    "used",
    "variety",
    "languages",
    "programming",
    "languages",
    "java",
    "primary",
    "language",
    "use",
    "gradle",
    "languages",
    "like",
    "scala",
    "android",
    "cc",
    "plus",
    "plus",
    "ruby",
    "languages",
    "use",
    "tool",
    "actually",
    "using",
    "like",
    "referring",
    "trophy",
    "based",
    "domain",
    "specific",
    "language",
    "rather",
    "xml",
    "ant",
    "maven",
    "xml",
    "based",
    "build",
    "tools",
    "one",
    "dependent",
    "xml",
    "using",
    "groupie",
    "based",
    "domain",
    "specific",
    "language",
    "dsl",
    "language",
    "used",
    "right",
    "um",
    "something",
    "used",
    "build",
    "use",
    "perform",
    "test",
    "cases",
    "automations",
    "also",
    "deploy",
    "artifactory",
    "also",
    "okay",
    "want",
    "push",
    "artifacts",
    "artifactory",
    "also",
    "part",
    "also",
    "get",
    "done",
    "primary",
    "tool",
    "known",
    "build",
    "automations",
    "big",
    "large",
    "projects",
    "projects",
    "source",
    "got",
    "amount",
    "source",
    "code",
    "efforts",
    "case",
    "particular",
    "tool",
    "makes",
    "sense",
    "gradle",
    "includes",
    "pros",
    "maven",
    "uh",
    "removes",
    "drawbacks",
    "whatever",
    "uh",
    "issues",
    "face",
    "two",
    "build",
    "tools",
    "helping",
    "us",
    "remove",
    "cons",
    "faced",
    "implementation",
    "ant",
    "maven",
    "pros",
    "maven",
    "implemented",
    "cradle",
    "tool",
    "let",
    "see",
    "exactly",
    "gradle",
    "used",
    "valid",
    "question",
    "activity",
    "like",
    "reason",
    "use",
    "gradle",
    "first",
    "one",
    "resolves",
    "issues",
    "faced",
    "build",
    "tools",
    "primary",
    "reason",
    "already",
    "tools",
    "like",
    "maven",
    "available",
    "primary",
    "griddle",
    "duel",
    "something",
    "removing",
    "issues",
    "facing",
    "implementation",
    "tools",
    "issues",
    "getting",
    "uh",
    "removed",
    "second",
    "one",
    "focuses",
    "maintainability",
    "performance",
    "flexibility",
    "giving",
    "focus",
    "exactly",
    "manage",
    "big",
    "large",
    "projects",
    "uh",
    "flexibility",
    "different",
    "kind",
    "approaches",
    "want",
    "build",
    "today",
    "want",
    "build",
    "different",
    "ways",
    "tomorrow",
    "source",
    "code",
    "modifies",
    "gets",
    "added",
    "flexibility",
    "change",
    "build",
    "script",
    "perform",
    "automations",
    "lot",
    "flexibility",
    "available",
    "supported",
    "tool",
    "last",
    "one",
    "like",
    "provides",
    "lot",
    "features",
    "lot",
    "plugins",
    "one",
    "benefit",
    "get",
    "case",
    "maven",
    "also",
    "get",
    "lot",
    "features",
    "talk",
    "cradle",
    "provides",
    "lot",
    "plugins",
    "like",
    "let",
    "say",
    "normally",
    "build",
    "process",
    "compilation",
    "source",
    "code",
    "sometimes",
    "let",
    "say",
    "want",
    "build",
    "angular",
    "application",
    "case",
    "may",
    "involved",
    "running",
    "command",
    "line",
    "executions",
    "command",
    "line",
    "commands",
    "make",
    "sure",
    "yes",
    "running",
    "commands",
    "getting",
    "output",
    "lot",
    "features",
    "use",
    "like",
    "lot",
    "plugins",
    "available",
    "using",
    "uh",
    "plugins",
    "order",
    "go",
    "ahead",
    "order",
    "execute",
    "build",
    "process",
    "automations",
    "let",
    "talk",
    "cradle",
    "move",
    "talk",
    "like",
    "like",
    "something",
    "primarily",
    "used",
    "java",
    "talking",
    "cradle",
    "uh",
    "used",
    "primarily",
    "java",
    "reason",
    "prefer",
    "gradle",
    "create",
    "maven",
    "different",
    "reason",
    "let",
    "talk",
    "part",
    "important",
    "need",
    "understand",
    "reason",
    "gradle",
    "preferred",
    "better",
    "tool",
    "java",
    "compared",
    "maven",
    "talk",
    "build",
    "automation",
    "first",
    "one",
    "gradle",
    "using",
    "groupie",
    "dsl",
    "language",
    "domain",
    "specific",
    "language",
    "whereas",
    "maven",
    "considered",
    "project",
    "management",
    "tool",
    "uh",
    "creating",
    "palms",
    "xml",
    "file",
    "format",
    "files",
    "used",
    "java",
    "project",
    "xml",
    "format",
    "used",
    "hand",
    "gradle",
    "something",
    "using",
    "xml",
    "formats",
    "uh",
    "whatever",
    "build",
    "scripts",
    "creating",
    "something",
    "group",
    "based",
    "dsl",
    "language",
    "hand",
    "pump",
    "create",
    "xmls",
    "dependencies",
    "whatever",
    "attributes",
    "putting",
    "main",
    "one",
    "something",
    "available",
    "format",
    "xml",
    "overall",
    "goal",
    "gradle",
    "add",
    "functionality",
    "project",
    "whereas",
    "goal",
    "maven",
    "know",
    "complete",
    "project",
    "phase",
    "like",
    "work",
    "different",
    "different",
    "project",
    "phase",
    "like",
    "compilation",
    "test",
    "executions",
    "uh",
    "uh",
    "packaging",
    "uh",
    "deploying",
    "artifactory",
    "different",
    "phases",
    "available",
    "maven",
    "hand",
    "gradle",
    "adding",
    "functionality",
    "want",
    "particular",
    "features",
    "added",
    "build",
    "scripts",
    "gradle",
    "like",
    "usually",
    "specify",
    "different",
    "tasks",
    "want",
    "manage",
    "different",
    "different",
    "tasks",
    "add",
    "case",
    "griddle",
    "override",
    "tasks",
    "also",
    "case",
    "maven",
    "different",
    "phases",
    "happening",
    "sequence",
    "manner",
    "phases",
    "happens",
    "sync",
    "order",
    "exactly",
    "build",
    "sequence",
    "case",
    "gradle",
    "tasks",
    "custom",
    "tasks",
    "also",
    "disrupt",
    "sequence",
    "see",
    "different",
    "steps",
    "executed",
    "different",
    "order",
    "maven",
    "something",
    "phase",
    "mechanism",
    "gradle",
    "something",
    "according",
    "features",
    "flexibilities",
    "gradle",
    "works",
    "tasks",
    "whatever",
    "task",
    "want",
    "perform",
    "uh",
    "works",
    "directly",
    "stars",
    "hand",
    "uh",
    "maven",
    "something",
    "kind",
    "inbuilt",
    "cash",
    "every",
    "time",
    "running",
    "build",
    "separate",
    "uh",
    "things",
    "plugins",
    "information",
    "gets",
    "loaded",
    "takes",
    "definitely",
    "lot",
    "time",
    "hand",
    "gradle",
    "something",
    "using",
    "internal",
    "cache",
    "make",
    "uh",
    "builds",
    "little",
    "bit",
    "faster",
    "something",
    "things",
    "scratch",
    "whatever",
    "uh",
    "things",
    "already",
    "available",
    "cache",
    "pick",
    "part",
    "proceed",
    "build",
    "automation",
    "reason",
    "cradle",
    "performance",
    "much",
    "faster",
    "compared",
    "maven",
    "uses",
    "kind",
    "cache",
    "helps",
    "improve",
    "overall",
    "performance",
    "let",
    "talk",
    "gradle",
    "installation",
    "important",
    "aspect",
    "done",
    "installation",
    "download",
    "cradle",
    "executables",
    "right",
    "let",
    "see",
    "different",
    "steps",
    "involved",
    "process",
    "critical",
    "installation",
    "talk",
    "gradle",
    "installation",
    "primary",
    "four",
    "steps",
    "available",
    "first",
    "one",
    "check",
    "java",
    "installed",
    "java",
    "installed",
    "go",
    "open",
    "jdk",
    "go",
    "oracle",
    "java",
    "installation",
    "jdk",
    "system",
    "jdk8",
    "something",
    "commonly",
    "use",
    "nowadays",
    "install",
    "java",
    "downloaded",
    "installed",
    "gradle",
    "uh",
    "download",
    "cradle",
    "gradle",
    "binaries",
    "executable",
    "uh",
    "zip",
    "file",
    "gets",
    "downloaded",
    "add",
    "environment",
    "variables",
    "validate",
    "gradle",
    "installation",
    "working",
    "fine",
    "expected",
    "gradle",
    "installation",
    "local",
    "systems",
    "uh",
    "windows",
    "platform",
    "see",
    "exactly",
    "go",
    "installation",
    "cradle",
    "see",
    "different",
    "version",
    "going",
    "install",
    "let",
    "go",
    "back",
    "system",
    "see",
    "go",
    "gradle",
    "installation",
    "website",
    "jdk",
    "java",
    "oracle",
    "java",
    "different",
    "jdk",
    "whatever",
    "option",
    "want",
    "select",
    "go",
    "jdk8",
    "something",
    "commonly",
    "used",
    "nowadays",
    "like",
    "comfortable",
    "compatible",
    "version",
    "available",
    "um",
    "case",
    "want",
    "see",
    "jdk",
    "installed",
    "system",
    "say",
    "like",
    "java",
    "hyphen",
    "version",
    "give",
    "uh",
    "output",
    "whether",
    "java",
    "installed",
    "system",
    "case",
    "system",
    "java",
    "installed",
    "really",
    "want",
    "installation",
    "download",
    "jdk",
    "installer",
    "website",
    "oracle",
    "website",
    "proceed",
    "part",
    "jdk",
    "installed",
    "go",
    "cradle",
    "installation",
    "cradle",
    "something",
    "though",
    "performing",
    "build",
    "automations",
    "stuff",
    "download",
    "binaries",
    "like",
    "zip",
    "file",
    "probably",
    "executables",
    "particular",
    "environment",
    "variables",
    "configured",
    "able",
    "system",
    "modified",
    "right",
    "got",
    "like",
    "prerequests",
    "java",
    "version",
    "install",
    "next",
    "thing",
    "install",
    "download",
    "executables",
    "uh",
    "order",
    "download",
    "latest",
    "uh",
    "gradle",
    "distribution",
    "click",
    "one",
    "right",
    "different",
    "options",
    "like",
    "uh",
    "want",
    "go",
    "six",
    "point",
    "seven",
    "like",
    "binary",
    "complete",
    "go",
    "binary",
    "want",
    "source",
    "want",
    "binaries",
    "executables",
    "getting",
    "downloaded",
    "around",
    "close",
    "100",
    "mb",
    "installer",
    "extract",
    "directory",
    "path",
    "need",
    "configure",
    "environment",
    "variable",
    "way",
    "able",
    "see",
    "gradle",
    "executables",
    "running",
    "give",
    "complete",
    "output",
    "us",
    "case",
    "may",
    "take",
    "time",
    "particular",
    "modifications",
    "download",
    "done",
    "extract",
    "extraction",
    "done",
    "able",
    "go",
    "back",
    "particular",
    "version",
    "configurations",
    "established",
    "let",
    "wait",
    "time",
    "continuing",
    "environment",
    "variables",
    "like",
    "one",
    "installation",
    "extraction",
    "done",
    "go",
    "downloads",
    "one",
    "downloaded",
    "extract",
    "extraction",
    "required",
    "setup",
    "like",
    "set",
    "path",
    "environment",
    "variables",
    "path",
    "configured",
    "established",
    "able",
    "start",
    "part",
    "execution",
    "meanwhile",
    "files",
    "getting",
    "started",
    "let",
    "see",
    "already",
    "got",
    "folder",
    "structure",
    "see",
    "give",
    "path",
    "two",
    "environment",
    "variables",
    "configure",
    "one",
    "cradle",
    "underscore",
    "home",
    "one",
    "um",
    "path",
    "variable",
    "copy",
    "path",
    "meanwhile",
    "getting",
    "uh",
    "extracted",
    "save",
    "time",
    "go",
    "environment",
    "variable",
    "right",
    "click",
    "one",
    "properties",
    "go",
    "advanced",
    "systems",
    "settings",
    "environment",
    "variables",
    "give",
    "like",
    "gradle",
    "let",
    "go",
    "home",
    "one",
    "going",
    "giving",
    "till",
    "bin",
    "directory",
    "needs",
    "gradle",
    "extracted",
    "say",
    "okay",
    "uh",
    "go",
    "path",
    "variable",
    "adding",
    "new",
    "entry",
    "one",
    "putting",
    "till",
    "pin",
    "directory",
    "gradle",
    "executables",
    "running",
    "gradle",
    "command",
    "two",
    "variables",
    "configure",
    "okay",
    "okay",
    "okay",
    "one",
    "done",
    "open",
    "command",
    "prompt",
    "see",
    "whether",
    "execution",
    "commands",
    "running",
    "completely",
    "successful",
    "meanwhile",
    "extracting",
    "executables",
    "things",
    "help",
    "us",
    "understand",
    "whole",
    "build",
    "process",
    "build",
    "tools",
    "integrated",
    "extraction",
    "done",
    "run",
    "like",
    "cmd",
    "java",
    "iphone",
    "version",
    "check",
    "version",
    "java",
    "gradle",
    "underscore",
    "version",
    "going",
    "see",
    "see",
    "check",
    "version",
    "gradle",
    "installed",
    "see",
    "says",
    "version",
    "installed",
    "case",
    "way",
    "going",
    "cradle",
    "installation",
    "performed",
    "particular",
    "system",
    "let",
    "go",
    "back",
    "content",
    "let",
    "talk",
    "cradle",
    "core",
    "concepts",
    "one",
    "going",
    "talk",
    "different",
    "core",
    "concepts",
    "cradle",
    "first",
    "one",
    "projects",
    "project",
    "represents",
    "item",
    "performed",
    "done",
    "like",
    "deploying",
    "application",
    "staging",
    "environment",
    "performing",
    "build",
    "gradle",
    "something",
    "required",
    "uh",
    "projects",
    "um",
    "gradle",
    "project",
    "prepare",
    "multiple",
    "tasks",
    "available",
    "configured",
    "tasks",
    "different",
    "tasks",
    "needs",
    "executed",
    "sequence",
    "sequence",
    "important",
    "part",
    "sequence",
    "meant",
    "properly",
    "execution",
    "done",
    "proper",
    "order",
    "important",
    "aspect",
    "tasks",
    "one",
    "kind",
    "identity",
    "performing",
    "series",
    "steps",
    "tasks",
    "may",
    "like",
    "compilation",
    "source",
    "code",
    "preparing",
    "jar",
    "file",
    "preparing",
    "web",
    "application",
    "archive",
    "file",
    "er",
    "file",
    "also",
    "like",
    "tasks",
    "even",
    "publish",
    "artifacts",
    "artifactory",
    "store",
    "artifacts",
    "shared",
    "location",
    "different",
    "ways",
    "uh",
    "particular",
    "tasks",
    "executed",
    "build",
    "scripts",
    "one",
    "storing",
    "information",
    "dependencies",
    "different",
    "tasks",
    "want",
    "refer",
    "going",
    "present",
    "file",
    "file",
    "information",
    "related",
    "different",
    "dependencies",
    "want",
    "download",
    "want",
    "store",
    "things",
    "part",
    "build",
    "scripts",
    "let",
    "talk",
    "features",
    "cradle",
    "different",
    "features",
    "use",
    "case",
    "cradle",
    "different",
    "type",
    "type",
    "features",
    "available",
    "let",
    "talk",
    "one",
    "one",
    "first",
    "one",
    "high",
    "performance",
    "uh",
    "high",
    "performance",
    "something",
    "see",
    "already",
    "discussed",
    "case",
    "using",
    "large",
    "projects",
    "gradle",
    "something",
    "better",
    "approach",
    "compared",
    "maven",
    "high",
    "performance",
    "getting",
    "uses",
    "internal",
    "cache",
    "makes",
    "sure",
    "using",
    "like",
    "builds",
    "faster",
    "give",
    "higher",
    "performance",
    "second",
    "one",
    "support",
    "provides",
    "support",
    "yes",
    "definitely",
    "provides",
    "lot",
    "support",
    "perform",
    "builds",
    "latest",
    "tool",
    "available",
    "support",
    "also",
    "quite",
    "good",
    "terms",
    "want",
    "prepare",
    "build",
    "want",
    "download",
    "plugins",
    "different",
    "supports",
    "dependencies",
    "uh",
    "information",
    "also",
    "next",
    "one",
    "build",
    "software",
    "using",
    "one",
    "multiple",
    "projects",
    "case",
    "repository",
    "multiple",
    "projects",
    "say",
    "easily",
    "built",
    "help",
    "particular",
    "tool",
    "supports",
    "multiple",
    "project",
    "built",
    "using",
    "gradle",
    "project",
    "gradle",
    "scripts",
    "support",
    "also",
    "available",
    "gradle",
    "build",
    "tool",
    "uh",
    "incremental",
    "builds",
    "also",
    "something",
    "help",
    "cradle",
    "done",
    "incremental",
    "changes",
    "want",
    "perform",
    "incremental",
    "build",
    "also",
    "possible",
    "help",
    "griddle",
    "uh",
    "build",
    "scans",
    "also",
    "perform",
    "build",
    "scans",
    "use",
    "integrations",
    "sonarcube",
    "uh",
    "scans",
    "done",
    "source",
    "code",
    "understand",
    "build",
    "happens",
    "source",
    "code",
    "really",
    "happens",
    "code",
    "scan",
    "build",
    "scans",
    "also",
    "performed",
    "one",
    "uh",
    "familiarity",
    "java",
    "java",
    "something",
    "uh",
    "considered",
    "default",
    "even",
    "java",
    "fact",
    "android",
    "also",
    "using",
    "java",
    "programming",
    "language",
    "using",
    "uh",
    "particular",
    "cradle",
    "build",
    "done",
    "gain",
    "uh",
    "benefits",
    "manners",
    "different",
    "ways",
    "basically",
    "helping",
    "us",
    "see",
    "uh",
    "make",
    "sure",
    "tool",
    "help",
    "us",
    "providing",
    "lot",
    "features",
    "help",
    "us",
    "make",
    "reliable",
    "build",
    "tool",
    "java",
    "based",
    "projects",
    "programming",
    "based",
    "project",
    "right",
    "let",
    "see",
    "convert",
    "java",
    "project",
    "cradle",
    "uh",
    "go",
    "back",
    "created",
    "something",
    "already",
    "installed",
    "create",
    "directory",
    "like",
    "perform",
    "executions",
    "prepare",
    "build",
    "scripts",
    "particular",
    "execution",
    "gradle",
    "build",
    "happened",
    "let",
    "go",
    "back",
    "machine",
    "okay",
    "going",
    "open",
    "terminal",
    "see",
    "create",
    "first",
    "create",
    "directory",
    "structure",
    "let",
    "say",
    "say",
    "like",
    "gradle",
    "hyphen",
    "project",
    "project",
    "created",
    "go",
    "inside",
    "directory",
    "create",
    "critical",
    "related",
    "projects",
    "preparing",
    "files",
    "uh",
    "one",
    "let",
    "first",
    "create",
    "particular",
    "one",
    "saying",
    "like",
    "vi",
    "build",
    "dot",
    "gradle",
    "one",
    "going",
    "put",
    "like",
    "uh",
    "two",
    "plugins",
    "going",
    "use",
    "going",
    "say",
    "like",
    "apply",
    "plugin",
    "java",
    "uh",
    "going",
    "say",
    "like",
    "apply",
    "plugin",
    "application",
    "two",
    "plugins",
    "going",
    "use",
    "got",
    "file",
    "one",
    "shows",
    "like",
    "available",
    "case",
    "two",
    "files",
    "available",
    "want",
    "learn",
    "like",
    "know",
    "different",
    "tasks",
    "run",
    "like",
    "gradle",
    "tasks",
    "command",
    "gradle",
    "task",
    "help",
    "know",
    "different",
    "tasks",
    "available",
    "processing",
    "build",
    "scripts",
    "um",
    "definitely",
    "help",
    "understand",
    "giving",
    "output",
    "different",
    "tasks",
    "given",
    "help",
    "understand",
    "different",
    "tasks",
    "configure",
    "work",
    "like",
    "jar",
    "files",
    "clean",
    "stuff",
    "build",
    "compile",
    "different",
    "executions",
    "assemble",
    "javadoc",
    "build",
    "check",
    "test",
    "different",
    "tasks",
    "really",
    "want",
    "run",
    "gradle",
    "build",
    "run",
    "like",
    "cradle",
    "clean",
    "perform",
    "clean",
    "activity",
    "right",
    "like",
    "build",
    "clean",
    "run",
    "specific",
    "command",
    "run",
    "griddle",
    "clean",
    "build",
    "perform",
    "cleanup",
    "also",
    "time",
    "build",
    "process",
    "also",
    "performed",
    "build",
    "clean",
    "executed",
    "status",
    "whether",
    "success",
    "failure",
    "given",
    "back",
    "case",
    "previous",
    "one",
    "see",
    "run",
    "clean",
    "cradle",
    "clean",
    "running",
    "one",
    "task",
    "go",
    "build",
    "uh",
    "process",
    "run",
    "gradle",
    "clean",
    "build",
    "going",
    "give",
    "much",
    "information",
    "fact",
    "also",
    "give",
    "uh",
    "information",
    "like",
    "hyphen",
    "iphone",
    "info",
    "flag",
    "also",
    "want",
    "get",
    "details",
    "uh",
    "different",
    "uh",
    "tasks",
    "executed",
    "also",
    "going",
    "get",
    "one",
    "put",
    "like",
    "hyphen",
    "iphone",
    "info",
    "steps",
    "given",
    "back",
    "uh",
    "tasks",
    "executed",
    "response",
    "way",
    "create",
    "pretty",
    "much",
    "simple",
    "straightforward",
    "project",
    "form",
    "gradle",
    "definitely",
    "help",
    "run",
    "couple",
    "gradle",
    "commands",
    "understand",
    "basic",
    "commands",
    "run",
    "configurations",
    "really",
    "works",
    "right",
    "let",
    "go",
    "back",
    "main",
    "content",
    "right",
    "let",
    "move",
    "next",
    "one",
    "next",
    "one",
    "going",
    "see",
    "prepare",
    "griddle",
    "build",
    "project",
    "case",
    "eclipse",
    "using",
    "local",
    "system",
    "directly",
    "creating",
    "folders",
    "files",
    "actually",
    "using",
    "eclipse",
    "performing",
    "creating",
    "new",
    "cradle",
    "project",
    "let",
    "move",
    "part",
    "okay",
    "eclipse",
    "open",
    "opened",
    "one",
    "first",
    "thing",
    "gradle",
    "plugin",
    "installation",
    "create",
    "new",
    "projects",
    "cradle",
    "configure",
    "path",
    "gradle",
    "plugin",
    "configured",
    "previous",
    "uh",
    "preferences",
    "stuff",
    "build",
    "process",
    "first",
    "thing",
    "go",
    "eclipse",
    "marketplace",
    "search",
    "griddle",
    "search",
    "done",
    "show",
    "us",
    "plugins",
    "related",
    "gradle",
    "go",
    "build",
    "ship",
    "gradle",
    "integration",
    "click",
    "install",
    "proceed",
    "installation",
    "download",
    "cases",
    "maybe",
    "part",
    "eclipse",
    "id",
    "go",
    "installed",
    "tab",
    "see",
    "also",
    "already",
    "installed",
    "case",
    "installing",
    "uh",
    "installation",
    "done",
    "restart",
    "specific",
    "ones",
    "restart",
    "eclipse",
    "changes",
    "reflected",
    "downloading",
    "downloading",
    "cradle",
    "installed",
    "able",
    "use",
    "case",
    "scenario",
    "wait",
    "part",
    "still",
    "downloading",
    "jar",
    "files",
    "jar",
    "file",
    "done",
    "areas",
    "downloaded",
    "able",
    "proceed",
    "download",
    "password",
    "going",
    "take",
    "time",
    "download",
    "done",
    "able",
    "proceed",
    "progress",
    "done",
    "asking",
    "us",
    "restart",
    "uh",
    "uh",
    "click",
    "restart",
    "eclipse",
    "restarted",
    "together",
    "manually",
    "go",
    "options",
    "require",
    "restart",
    "new",
    "changes",
    "reflected",
    "plugins",
    "activated",
    "referenced",
    "uh",
    "put",
    "like",
    "know",
    "configuration",
    "system",
    "go",
    "gradle",
    "configuration",
    "go",
    "windows",
    "preferences",
    "case",
    "go",
    "uh",
    "ones",
    "cradle",
    "option",
    "available",
    "cradle",
    "going",
    "select",
    "user",
    "home",
    "gradle",
    "user",
    "home",
    "need",
    "use",
    "right",
    "want",
    "go",
    "gradle",
    "want",
    "go",
    "local",
    "installation",
    "options",
    "use",
    "go",
    "griddle",
    "wrapper",
    "downloading",
    "cradle",
    "locally",
    "going",
    "use",
    "cradle",
    "w",
    "file",
    "already",
    "installation",
    "locally",
    "prefer",
    "also",
    "right",
    "previous",
    "demo",
    "already",
    "got",
    "griddle",
    "uh",
    "extracted",
    "go",
    "downloads",
    "downloads",
    "already",
    "gradle",
    "available",
    "going",
    "select",
    "part",
    "going",
    "select",
    "right",
    "represents",
    "directory",
    "structure",
    "uh",
    "mechanism",
    "either",
    "go",
    "pill",
    "scan",
    "select",
    "build",
    "scan",
    "also",
    "enabled",
    "projects",
    "scanned",
    "know",
    "published",
    "uh",
    "kind",
    "additional",
    "option",
    "available",
    "really",
    "want",
    "disable",
    "disable",
    "also",
    "go",
    "configuration",
    "uh",
    "particular",
    "gradle",
    "folder",
    "put",
    "case",
    "click",
    "apply",
    "click",
    "apply",
    "close",
    "one",
    "particular",
    "execution",
    "done",
    "going",
    "project",
    "creation",
    "right",
    "click",
    "go",
    "file",
    "also",
    "going",
    "go",
    "job",
    "project",
    "going",
    "gradle",
    "project",
    "cradle",
    "project",
    "going",
    "create",
    "next",
    "going",
    "say",
    "like",
    "cradle",
    "project",
    "next",
    "done",
    "finish",
    "one",
    "create",
    "project",
    "happen",
    "automatically",
    "folder",
    "structure",
    "available",
    "right",
    "uh",
    "gradle",
    "scripts",
    "also",
    "created",
    "modifications",
    "see",
    "uh",
    "particular",
    "gradle",
    "build",
    "script",
    "looks",
    "like",
    "adding",
    "couple",
    "uh",
    "selenium",
    "related",
    "dependencies",
    "see",
    "dependencies",
    "added",
    "impact",
    "dependencies",
    "overall",
    "project",
    "also",
    "important",
    "aspect",
    "considered",
    "let",
    "processing",
    "happen",
    "creating",
    "uh",
    "plugins",
    "binaries",
    "getting",
    "installed",
    "getting",
    "downloaded",
    "see",
    "project",
    "uh",
    "imported",
    "completely",
    "executed",
    "got",
    "created",
    "extract",
    "see",
    "particular",
    "option",
    "available",
    "cradle",
    "tasks",
    "extract",
    "also",
    "able",
    "know",
    "different",
    "tasks",
    "available",
    "let",
    "see",
    "build",
    "running",
    "like",
    "build",
    "different",
    "tasks",
    "happening",
    "inside",
    "build",
    "process",
    "gradle",
    "executions",
    "also",
    "available",
    "case",
    "greater",
    "tasks",
    "different",
    "represented",
    "one",
    "extract",
    "gradle",
    "project",
    "okay",
    "library",
    "available",
    "uh",
    "happens",
    "able",
    "like",
    "one",
    "able",
    "like",
    "okay",
    "gradle",
    "hyphen",
    "project",
    "something",
    "available",
    "one",
    "referring",
    "folder",
    "structures",
    "created",
    "like",
    "source",
    "main",
    "java",
    "one",
    "source",
    "test",
    "java",
    "one",
    "available",
    "folder",
    "structure",
    "test",
    "resources",
    "also",
    "available",
    "mean",
    "source",
    "main",
    "resources",
    "also",
    "available",
    "case",
    "happens",
    "dependencies",
    "project",
    "external",
    "different",
    "dependencies",
    "available",
    "let",
    "see",
    "let",
    "add",
    "another",
    "dependency",
    "one",
    "script",
    "see",
    "open",
    "file",
    "see",
    "dependencies",
    "like",
    "test",
    "implementation",
    "junit",
    "available",
    "right",
    "implementations",
    "one",
    "available",
    "jar",
    "files",
    "put",
    "automatically",
    "added",
    "part",
    "one",
    "part",
    "particular",
    "dependencies",
    "uh",
    "means",
    "store",
    "within",
    "repository",
    "automatically",
    "happened",
    "let",
    "open",
    "dependency",
    "page",
    "going",
    "mvn",
    "repository",
    "opening",
    "dependency",
    "link",
    "dependency",
    "link",
    "selenium",
    "iphone",
    "java",
    "available",
    "give",
    "dependency",
    "different",
    "options",
    "maven",
    "one",
    "gradle",
    "one",
    "copy",
    "one",
    "uh",
    "use",
    "dependency",
    "group",
    "name",
    "version",
    "using",
    "copied",
    "one",
    "go",
    "back",
    "eclipse",
    "put",
    "dependency",
    "uh",
    "save",
    "uh",
    "something",
    "providing",
    "like",
    "selenium",
    "dependencies",
    "available",
    "refresh",
    "project",
    "right",
    "click",
    "able",
    "see",
    "options",
    "gradle",
    "saying",
    "refresh",
    "gradle",
    "project",
    "moment",
    "able",
    "like",
    "first",
    "time",
    "maybe",
    "take",
    "time",
    "download",
    "dependencies",
    "related",
    "selenium",
    "able",
    "see",
    "like",
    "dependencies",
    "simply",
    "added",
    "case",
    "see",
    "selenium",
    "related",
    "dependencies",
    "added",
    "reason",
    "comment",
    "ones",
    "say",
    "like",
    "synchronize",
    "see",
    "dependencies",
    "adding",
    "selenium",
    "represent",
    "uh",
    "selenium",
    "perspective",
    "gone",
    "back",
    "way",
    "keep",
    "adding",
    "dependencies",
    "required",
    "preparing",
    "build",
    "source",
    "code",
    "able",
    "proceed",
    "execution",
    "part",
    "best",
    "part",
    "uh",
    "cradle",
    "way",
    "going",
    "prepare",
    "greater",
    "project",
    "within",
    "eclipse",
    "keep",
    "adding",
    "like",
    "source",
    "code",
    "one",
    "way",
    "code",
    "base",
    "added",
    "right",
    "way",
    "particular",
    "executions",
    "gradle",
    "project",
    "prepared",
    "case",
    "eclipse",
    "selenium",
    "installation",
    "process",
    "certain",
    "prereqs",
    "first",
    "prerequisite",
    "need",
    "java",
    "system",
    "installing",
    "java",
    "first",
    "working",
    "eclipse",
    "id",
    "installing",
    "eclipse",
    "install",
    "selenium",
    "java",
    "install",
    "version",
    "java",
    "8",
    "eclipse",
    "version",
    "last",
    "stable",
    "version",
    "released",
    "december",
    "last",
    "year",
    "using",
    "version",
    "selenium",
    "download",
    "latest",
    "version",
    "okay",
    "let",
    "get",
    "started",
    "first",
    "step",
    "java",
    "installation",
    "install",
    "java",
    "let",
    "go",
    "browser",
    "simply",
    "search",
    "java",
    "8",
    "download",
    "see",
    "oracle",
    "site",
    "listed",
    "would",
    "downloading",
    "java",
    "package",
    "go",
    "ahead",
    "click",
    "download",
    "jdk",
    "package",
    "oracle",
    "site",
    "need",
    "create",
    "account",
    "already",
    "one",
    "need",
    "log",
    "using",
    "account",
    "download",
    "jdks",
    "one",
    "please",
    "go",
    "ahead",
    "create",
    "new",
    "account",
    "oracle",
    "login",
    "account",
    "download",
    "java",
    "since",
    "already",
    "account",
    "already",
    "downloaded",
    "package",
    "show",
    "download",
    "page",
    "scroll",
    "see",
    "java",
    "development",
    "kit",
    "version",
    "downloading",
    "click",
    "accept",
    "license",
    "agreement",
    "since",
    "working",
    "windows",
    "system",
    "today",
    "downloading",
    "windows",
    "package",
    "click",
    "get",
    "downloaded",
    "downloaded",
    "folder",
    "said",
    "already",
    "downloaded",
    "packages",
    "done",
    "created",
    "directory",
    "called",
    "installers",
    "going",
    "keeping",
    "installables",
    "folder",
    "called",
    "java",
    "installer",
    "installable",
    "file",
    "go",
    "ahead",
    "double",
    "click",
    "launch",
    "installer",
    "installer",
    "launched",
    "click",
    "run",
    "take",
    "minutes",
    "install",
    "java",
    "installer",
    "launched",
    "click",
    "next",
    "button",
    "installation",
    "directory",
    "change",
    "directory",
    "choice",
    "whatever",
    "drive",
    "folder",
    "structure",
    "want",
    "would",
    "like",
    "leave",
    "default",
    "go",
    "click",
    "next",
    "java",
    "installation",
    "progress",
    "let",
    "wait",
    "completed",
    "really",
    "take",
    "much",
    "time",
    "maybe",
    "minutes",
    "okay",
    "accept",
    "license",
    "term",
    "click",
    "next",
    "leave",
    "destination",
    "folder",
    "jdk8",
    "successfully",
    "installed",
    "system",
    "close",
    "installer",
    "let",
    "go",
    "ahead",
    "check",
    "whether",
    "installation",
    "done",
    "properly",
    "go",
    "command",
    "prompt",
    "send",
    "say",
    "java",
    "minus",
    "version",
    "says",
    "java",
    "version",
    "tells",
    "us",
    "java",
    "installed",
    "successfully",
    "installation",
    "couple",
    "configurations",
    "need",
    "configuration",
    "one",
    "need",
    "set",
    "path",
    "variable",
    "also",
    "going",
    "set",
    "java",
    "home",
    "directory",
    "first",
    "let",
    "go",
    "ahead",
    "check",
    "java",
    "installed",
    "actually",
    "let",
    "figure",
    "directory",
    "first",
    "remember",
    "directory",
    "structure",
    "java",
    "got",
    "installed",
    "program",
    "files",
    "java",
    "certain",
    "previous",
    "versions",
    "installed",
    "uninstalled",
    "see",
    "residuals",
    "sitting",
    "let",
    "worry",
    "much",
    "instead",
    "let",
    "go",
    "latest",
    "one",
    "installed",
    "okay",
    "bin",
    "folder",
    "path",
    "need",
    "set",
    "path",
    "variable",
    "copy",
    "path",
    "go",
    "control",
    "panel",
    "go",
    "system",
    "yeah",
    "click",
    "system",
    "go",
    "advanced",
    "system",
    "setting",
    "environment",
    "variables",
    "find",
    "path",
    "variable",
    "okay",
    "say",
    "edit",
    "path",
    "variable",
    "going",
    "add",
    "java",
    "bin",
    "directory",
    "path",
    "careful",
    "whenever",
    "editing",
    "path",
    "variable",
    "overwrite",
    "anything",
    "always",
    "go",
    "edit",
    "mode",
    "go",
    "towards",
    "end",
    "say",
    "control",
    "v",
    "paste",
    "path",
    "copied",
    "explorer",
    "window",
    "say",
    "okay",
    "done",
    "path",
    "setting",
    "done",
    "next",
    "one",
    "need",
    "need",
    "add",
    "new",
    "environment",
    "variable",
    "called",
    "java",
    "say",
    "new",
    "type",
    "java",
    "home",
    "value",
    "need",
    "set",
    "need",
    "set",
    "path",
    "without",
    "bin",
    "directory",
    "need",
    "set",
    "path",
    "till",
    "java",
    "directory",
    "copy",
    "path",
    "paste",
    "say",
    "okay",
    "click",
    "ok",
    "click",
    "ok",
    "done",
    "let",
    "go",
    "command",
    "prompt",
    "say",
    "java",
    "minus",
    "version",
    "everything",
    "seems",
    "fine",
    "successfully",
    "installed",
    "java",
    "system",
    "next",
    "installation",
    "step",
    "need",
    "install",
    "eclipse",
    "let",
    "go",
    "back",
    "browser",
    "download",
    "eclipse",
    "downloading",
    "package",
    "go",
    "see",
    "latest",
    "version",
    "available",
    "latest",
    "version",
    "available",
    "video",
    "made",
    "2090",
    "especially",
    "eclipse",
    "since",
    "open",
    "source",
    "prefer",
    "work",
    "last",
    "stable",
    "version",
    "developers",
    "hence",
    "reason",
    "picked",
    "version",
    "like",
    "last",
    "year",
    "version",
    "released",
    "last",
    "december",
    "always",
    "choose",
    "go",
    "latest",
    "version",
    "issues",
    "like",
    "first",
    "time",
    "working",
    "eclipse",
    "going",
    "get",
    "confused",
    "issues",
    "coming",
    "right",
    "would",
    "still",
    "recommend",
    "use",
    "last",
    "stable",
    "version",
    "available",
    "eclipse",
    "get",
    "last",
    "table",
    "version",
    "need",
    "go",
    "click",
    "download",
    "packages",
    "scroll",
    "page",
    "see",
    "downloads",
    "list",
    "previous",
    "releases",
    "eclipse",
    "available",
    "need",
    "download",
    "click",
    "version",
    "click",
    "os",
    "want",
    "install",
    "eclipse",
    "us",
    "windows",
    "click",
    "windows",
    "click",
    "download",
    "downloading",
    "complete",
    "package",
    "download",
    "look",
    "like",
    "let",
    "go",
    "back",
    "directory",
    "installers",
    "installer",
    "eclipse",
    "got",
    "next",
    "step",
    "need",
    "launch",
    "installer",
    "install",
    "eclipse",
    "say",
    "double",
    "click",
    "say",
    "run",
    "see",
    "multiple",
    "options",
    "eclipse",
    "installation",
    "depending",
    "requirement",
    "go",
    "ahead",
    "install",
    "packages",
    "us",
    "need",
    "eclipse",
    "id",
    "java",
    "developer",
    "select",
    "say",
    "install",
    "choice",
    "directory",
    "want",
    "install",
    "chosen",
    "drive",
    "default",
    "directory",
    "name",
    "takes",
    "ok",
    "leave",
    "also",
    "option",
    "create",
    "start",
    "menu",
    "entry",
    "desktop",
    "shortcut",
    "leave",
    "default",
    "selection",
    "go",
    "ahead",
    "click",
    "install",
    "take",
    "install",
    "eclipse",
    "select",
    "close",
    "window",
    "select",
    "accept",
    "okay",
    "installation",
    "completed",
    "successfully",
    "let",
    "go",
    "click",
    "launch",
    "let",
    "see",
    "first",
    "window",
    "opens",
    "launch",
    "eclipse",
    "need",
    "specify",
    "workspace",
    "directory",
    "workspace",
    "directory",
    "directory",
    "folder",
    "wherein",
    "java",
    "files",
    "programs",
    "artifacts",
    "going",
    "create",
    "eclipse",
    "stored",
    "particular",
    "folder",
    "could",
    "location",
    "system",
    "go",
    "ahead",
    "browse",
    "location",
    "change",
    "case",
    "go",
    "drive",
    "already",
    "directory",
    "create",
    "clear",
    "select",
    "folder",
    "create",
    "folder",
    "called",
    "workspace",
    "say",
    "workspace",
    "say",
    "launch",
    "every",
    "time",
    "open",
    "eclipse",
    "right",
    "going",
    "take",
    "default",
    "workspace",
    "programs",
    "java",
    "scripts",
    "automation",
    "scripts",
    "getting",
    "going",
    "stored",
    "particular",
    "location",
    "say",
    "launch",
    "welcome",
    "window",
    "opens",
    "close",
    "go",
    "eclipse",
    "open",
    "certain",
    "perspective",
    "certain",
    "windows",
    "need",
    "let",
    "close",
    "first",
    "thing",
    "launching",
    "eclipse",
    "go",
    "ahead",
    "create",
    "new",
    "project",
    "say",
    "file",
    "new",
    "since",
    "going",
    "using",
    "java",
    "selenium",
    "say",
    "create",
    "java",
    "project",
    "give",
    "project",
    "name",
    "let",
    "say",
    "first",
    "project",
    "option",
    "select",
    "jre",
    "want",
    "use",
    "installed",
    "jdk",
    "okay",
    "going",
    "click",
    "use",
    "default",
    "gre",
    "otherwise",
    "also",
    "option",
    "use",
    "project",
    "specific",
    "gr",
    "example",
    "could",
    "two",
    "different",
    "projects",
    "one",
    "project",
    "going",
    "working",
    "gre",
    "another",
    "project",
    "want",
    "work",
    "latest",
    "java",
    "maybe",
    "java",
    "12",
    "one",
    "java",
    "installed",
    "machine",
    "gives",
    "option",
    "select",
    "whichever",
    "java",
    "want",
    "work",
    "another",
    "java",
    "installed",
    "show",
    "list",
    "go",
    "ahead",
    "select",
    "since",
    "one",
    "java",
    "installed",
    "machine",
    "java",
    "say",
    "use",
    "default",
    "gre",
    "click",
    "finish",
    "observe",
    "folder",
    "structure",
    "project",
    "created",
    "see",
    "reference",
    "libraries",
    "particular",
    "java",
    "created",
    "ready",
    "create",
    "kind",
    "java",
    "programs",
    "project",
    "successfully",
    "done",
    "second",
    "step",
    "installation",
    "eclipse",
    "installation",
    "need",
    "install",
    "selenium",
    "let",
    "go",
    "back",
    "browser",
    "see",
    "files",
    "need",
    "download",
    "install",
    "selling",
    "let",
    "go",
    "browser",
    "going",
    "working",
    "selenium",
    "particular",
    "website",
    "going",
    "bible",
    "everything",
    "anything",
    "related",
    "selenium",
    "available",
    "website",
    "whether",
    "want",
    "download",
    "files",
    "whether",
    "want",
    "refer",
    "documentation",
    "anything",
    "regarding",
    "selenium",
    "available",
    "want",
    "installables",
    "selenium",
    "go",
    "download",
    "tab",
    "install",
    "selenium",
    "start",
    "working",
    "selenium",
    "three",
    "things",
    "required",
    "download",
    "one",
    "stand",
    "alone",
    "selenium",
    "server",
    "required",
    "immediately",
    "get",
    "started",
    "selenium",
    "however",
    "start",
    "working",
    "remote",
    "selenium",
    "webdriver",
    "would",
    "requiring",
    "grid",
    "setup",
    "requiring",
    "standalone",
    "server",
    "download",
    "latest",
    "version",
    "available",
    "click",
    "download",
    "file",
    "download",
    "folder",
    "one",
    "particular",
    "file",
    "need",
    "keep",
    "next",
    "selenium",
    "client",
    "web",
    "driver",
    "language",
    "bindings",
    "today",
    "demo",
    "looking",
    "selenium",
    "java",
    "means",
    "client",
    "package",
    "java",
    "need",
    "download",
    "whatever",
    "programming",
    "language",
    "selenium",
    "supports",
    "respective",
    "downloadables",
    "available",
    "say",
    "working",
    "python",
    "need",
    "download",
    "client",
    "library",
    "python",
    "since",
    "working",
    "java",
    "need",
    "download",
    "package",
    "simply",
    "need",
    "click",
    "link",
    "download",
    "java",
    "package",
    "basically",
    "jar",
    "files",
    "client",
    "libraries",
    "another",
    "component",
    "need",
    "selenium",
    "going",
    "automating",
    "web",
    "browser",
    "applications",
    "correct",
    "also",
    "want",
    "applications",
    "run",
    "multiple",
    "browsers",
    "means",
    "scripts",
    "automation",
    "scripts",
    "create",
    "able",
    "run",
    "browser",
    "selenium",
    "works",
    "multiple",
    "browsers",
    "like",
    "edge",
    "safari",
    "chrome",
    "firefox",
    "browsers",
    "even",
    "support",
    "headless",
    "browser",
    "every",
    "browser",
    "supports",
    "comes",
    "driver",
    "files",
    "say",
    "example",
    "want",
    "say",
    "work",
    "firefox",
    "driver",
    "means",
    "us",
    "start",
    "working",
    "firefox",
    "browser",
    "need",
    "download",
    "something",
    "called",
    "gecko",
    "driver",
    "want",
    "work",
    "chrome",
    "browser",
    "need",
    "install",
    "chrome",
    "driver",
    "depending",
    "browsers",
    "testing",
    "go",
    "ahead",
    "click",
    "link",
    "download",
    "latest",
    "driver",
    "files",
    "since",
    "going",
    "working",
    "firefox",
    "demo",
    "need",
    "need",
    "click",
    "latest",
    "link",
    "click",
    "latest",
    "link",
    "going",
    "take",
    "driver",
    "files",
    "driver",
    "files",
    "specific",
    "operating",
    "system",
    "go",
    "see",
    "separate",
    "driver",
    "file",
    "available",
    "linux",
    "mac",
    "windows",
    "depending",
    "operating",
    "system",
    "running",
    "test",
    "download",
    "particular",
    "driver",
    "file",
    "driver",
    "file",
    "need",
    "working",
    "windows",
    "machine",
    "three",
    "different",
    "packages",
    "need",
    "download",
    "selenium",
    "hq",
    "dot",
    "org",
    "us",
    "install",
    "selling",
    "let",
    "show",
    "folder",
    "already",
    "downloaded",
    "see",
    "selenium",
    "java",
    "okay",
    "nothing",
    "client",
    "library",
    "saw",
    "let",
    "go",
    "back",
    "main",
    "page",
    "download",
    "zip",
    "file",
    "unzip",
    "file",
    "folder",
    "structure",
    "see",
    "let",
    "see",
    "folder",
    "structure",
    "two",
    "jar",
    "files",
    "lips",
    "multiple",
    "jar",
    "files",
    "need",
    "work",
    "selenium",
    "also",
    "downloaded",
    "driver",
    "files",
    "downloading",
    "driver",
    "files",
    "browser",
    "created",
    "directory",
    "called",
    "drivers",
    "kept",
    "browser",
    "drivers",
    "driver",
    "file",
    "downloaded",
    "chrome",
    "want",
    "work",
    "firefox",
    "gecko",
    "driver",
    "internet",
    "explorer",
    "need",
    "need",
    "go",
    "eclipse",
    "eclipse",
    "right",
    "click",
    "project",
    "created",
    "go",
    "build",
    "path",
    "say",
    "configure",
    "build",
    "path",
    "go",
    "libraries",
    "tab",
    "see",
    "jre",
    "libraries",
    "got",
    "installed",
    "first",
    "similarly",
    "going",
    "add",
    "selenium",
    "jars",
    "library",
    "add",
    "right",
    "see",
    "add",
    "external",
    "jars",
    "click",
    "add",
    "external",
    "jars",
    "go",
    "folder",
    "downloaded",
    "selenium",
    "select",
    "jar",
    "files",
    "available",
    "two",
    "jar",
    "files",
    "say",
    "click",
    "open",
    "click",
    "add",
    "external",
    "jar",
    "libs",
    "folder",
    "select",
    "file",
    "select",
    "five",
    "jars",
    "click",
    "open",
    "see",
    "seven",
    "jar",
    "files",
    "say",
    "apply",
    "close",
    "look",
    "project",
    "directory",
    "see",
    "folder",
    "called",
    "referenced",
    "library",
    "see",
    "selenium",
    "charts",
    "simple",
    "installation",
    "eclipse",
    "want",
    "install",
    "selenium",
    "need",
    "export",
    "jars",
    "selenium",
    "eclipse",
    "system",
    "ready",
    "start",
    "working",
    "selenium",
    "scripts",
    "right",
    "let",
    "test",
    "installation",
    "writing",
    "small",
    "selenium",
    "test",
    "script",
    "go",
    "source",
    "folder",
    "right",
    "click",
    "new",
    "say",
    "java",
    "class",
    "let",
    "name",
    "say",
    "first",
    "selenium",
    "test",
    "select",
    "public",
    "static",
    "void",
    "main",
    "click",
    "finish",
    "right",
    "let",
    "create",
    "use",
    "case",
    "say",
    "want",
    "launch",
    "firefox",
    "browser",
    "want",
    "launch",
    "amazon",
    "site",
    "two",
    "simple",
    "things",
    "test",
    "script",
    "usually",
    "create",
    "method",
    "functionality",
    "want",
    "create",
    "want",
    "launch",
    "browser",
    "create",
    "method",
    "called",
    "launch",
    "browser",
    "whenever",
    "start",
    "writing",
    "selenium",
    "scripts",
    "first",
    "line",
    "need",
    "need",
    "declare",
    "object",
    "webdriver",
    "class",
    "say",
    "web",
    "driver",
    "driver",
    "hover",
    "error",
    "showing",
    "says",
    "import",
    "web",
    "driver",
    "dot",
    "open",
    "qa",
    "dot",
    "selling",
    "remember",
    "installed",
    "selenium",
    "imported",
    "jars",
    "right",
    "means",
    "whenever",
    "want",
    "use",
    "web",
    "driver",
    "need",
    "import",
    "class",
    "packages",
    "go",
    "ahead",
    "click",
    "import",
    "state",
    "done",
    "next",
    "step",
    "us",
    "launch",
    "firefox",
    "browser",
    "two",
    "steps",
    "process",
    "involved",
    "one",
    "need",
    "set",
    "system",
    "property",
    "need",
    "launch",
    "driver",
    "let",
    "say",
    "system",
    "dot",
    "set",
    "property",
    "use",
    "method",
    "set",
    "property",
    "takes",
    "two",
    "arguments",
    "key",
    "value",
    "key",
    "going",
    "mention",
    "going",
    "mentioning",
    "gecko",
    "driver",
    "path",
    "gecko",
    "driver",
    "okay",
    "since",
    "working",
    "firefox",
    "double",
    "quotes",
    "say",
    "key",
    "value",
    "going",
    "sorry",
    "fully",
    "qualified",
    "path",
    "driver",
    "files",
    "know",
    "kept",
    "driver",
    "first",
    "let",
    "go",
    "driver",
    "files",
    "colon",
    "selenium",
    "tutorial",
    "installers",
    "driver",
    "folder",
    "okay",
    "going",
    "copy",
    "complete",
    "path",
    "ctrl",
    "c",
    "paste",
    "control",
    "v",
    "along",
    "need",
    "provide",
    "file",
    "name",
    "gecko",
    "driver",
    "let",
    "complete",
    "step",
    "next",
    "set",
    "property",
    "need",
    "provide",
    "command",
    "launching",
    "firefox",
    "driver",
    "simply",
    "use",
    "driver",
    "object",
    "created",
    "driver",
    "equal",
    "new",
    "firefox",
    "driver",
    "similarly",
    "way",
    "imported",
    "packages",
    "web",
    "driver",
    "also",
    "need",
    "import",
    "package",
    "firefox",
    "driver",
    "hover",
    "mouse",
    "select",
    "import",
    "firefox",
    "drive",
    "two",
    "statements",
    "able",
    "launch",
    "firefox",
    "browser",
    "said",
    "use",
    "case",
    "next",
    "thing",
    "want",
    "want",
    "launch",
    "say",
    "amazon",
    "dot",
    "website",
    "command",
    "selenium",
    "says",
    "pass",
    "url",
    "write",
    "url",
    "usually",
    "go",
    "browser",
    "open",
    "website",
    "want",
    "work",
    "case",
    "simply",
    "copy",
    "fully",
    "formed",
    "url",
    "go",
    "eclipse",
    "paste",
    "ensures",
    "make",
    "mistakes",
    "typing",
    "url",
    "let",
    "complete",
    "statement",
    "done",
    "main",
    "function",
    "create",
    "object",
    "call",
    "method",
    "copy",
    "class",
    "selenium",
    "test",
    "say",
    "obj",
    "equal",
    "new",
    "selenium",
    "test",
    "say",
    "obj",
    "dot",
    "function",
    "launch",
    "browser",
    "let",
    "save",
    "execute",
    "control",
    "c",
    "right",
    "click",
    "run",
    "java",
    "application",
    "okay",
    "mozilla",
    "firefox",
    "launched",
    "launch",
    "bingo",
    "goes",
    "first",
    "test",
    "script",
    "runs",
    "successfully",
    "start",
    "understanding",
    "automation",
    "tool",
    "good",
    "look",
    "back",
    "manual",
    "testing",
    "challenges",
    "automation",
    "tool",
    "overcomes",
    "challenges",
    "challenges",
    "always",
    "overcome",
    "inventing",
    "something",
    "new",
    "let",
    "see",
    "selenium",
    "came",
    "existence",
    "evolve",
    "become",
    "one",
    "popular",
    "web",
    "application",
    "automation",
    "tool",
    "selenium",
    "suite",
    "tools",
    "selenium",
    "single",
    "tool",
    "multiple",
    "components",
    "look",
    "know",
    "every",
    "automation",
    "tool",
    "advantages",
    "limitations",
    "looking",
    "advantages",
    "limitations",
    "selenium",
    "work",
    "around",
    "limitations",
    "right",
    "let",
    "get",
    "started",
    "manual",
    "testing",
    "definition",
    "say",
    "manual",
    "testing",
    "involves",
    "physical",
    "execution",
    "test",
    "cases",
    "various",
    "applications",
    "detect",
    "bugs",
    "errors",
    "product",
    "one",
    "primitive",
    "methods",
    "testing",
    "software",
    "method",
    "knew",
    "earlier",
    "execution",
    "test",
    "cases",
    "without",
    "using",
    "automation",
    "tools",
    "require",
    "knowledge",
    "testing",
    "tool",
    "obviously",
    "everything",
    "done",
    "manually",
    "also",
    "practically",
    "test",
    "application",
    "since",
    "manual",
    "testing",
    "let",
    "take",
    "example",
    "say",
    "use",
    "case",
    "testing",
    "say",
    "facebook",
    "application",
    "facebook",
    "application",
    "let",
    "let",
    "open",
    "facebook",
    "application",
    "say",
    "create",
    "account",
    "web",
    "page",
    "test",
    "tester",
    "would",
    "would",
    "write",
    "multiple",
    "test",
    "cases",
    "test",
    "functionalities",
    "page",
    "use",
    "multiple",
    "data",
    "sets",
    "test",
    "fields",
    "like",
    "first",
    "name",
    "surname",
    "mobile",
    "number",
    "new",
    "password",
    "also",
    "test",
    "multiple",
    "links",
    "different",
    "links",
    "page",
    "like",
    "say",
    "forgotten",
    "account",
    "create",
    "new",
    "page",
    "multiple",
    "links",
    "available",
    "web",
    "pages",
    "also",
    "look",
    "every",
    "element",
    "web",
    "page",
    "like",
    "radio",
    "buttons",
    "like",
    "drop",
    "list",
    "apart",
    "would",
    "accessibility",
    "testing",
    "would",
    "performance",
    "testing",
    "page",
    "say",
    "response",
    "time",
    "say",
    "click",
    "login",
    "button",
    "literally",
    "type",
    "tests",
    "manually",
    "test",
    "cases",
    "ready",
    "start",
    "executing",
    "test",
    "cases",
    "one",
    "one",
    "find",
    "bugs",
    "developers",
    "going",
    "fix",
    "need",
    "rerun",
    "test",
    "cases",
    "one",
    "one",
    "bugs",
    "fixed",
    "application",
    "ready",
    "ship",
    "one",
    "run",
    "test",
    "cases",
    "hundreds",
    "transactions",
    "data",
    "sets",
    "repeat",
    "imagine",
    "amount",
    "effort",
    "required",
    "brings",
    "us",
    "first",
    "demerit",
    "manual",
    "testing",
    "manual",
    "testing",
    "time",
    "consuming",
    "process",
    "boring",
    "also",
    "highly",
    "error",
    "prone",
    "done",
    "manually",
    "human",
    "mistakes",
    "bound",
    "happen",
    "since",
    "manual",
    "executions",
    "testers",
    "presence",
    "required",
    "time",
    "one",
    "keep",
    "manual",
    "steps",
    "step",
    "step",
    "time",
    "also",
    "create",
    "manual",
    "reports",
    "group",
    "format",
    "get",
    "good",
    "looking",
    "reports",
    "also",
    "send",
    "reports",
    "manually",
    "stakeholders",
    "collection",
    "logs",
    "various",
    "machines",
    "run",
    "test",
    "consoliding",
    "creating",
    "repositories",
    "maintaining",
    "since",
    "manual",
    "process",
    "high",
    "chance",
    "creating",
    "manual",
    "errors",
    "scope",
    "manual",
    "testing",
    "limited",
    "example",
    "let",
    "say",
    "regression",
    "testing",
    "ideally",
    "would",
    "want",
    "run",
    "test",
    "cases",
    "written",
    "since",
    "manual",
    "process",
    "would",
    "luxury",
    "time",
    "execute",
    "hence",
    "pick",
    "choose",
    "test",
    "cases",
    "execute",
    "way",
    "limiting",
    "scope",
    "testing",
    "also",
    "working",
    "large",
    "amount",
    "data",
    "manually",
    "impractical",
    "could",
    "need",
    "application",
    "performance",
    "testing",
    "want",
    "collect",
    "metrics",
    "various",
    "performance",
    "measures",
    "part",
    "performance",
    "testing",
    "want",
    "simulate",
    "multiple",
    "loads",
    "application",
    "test",
    "hence",
    "manually",
    "performing",
    "kind",
    "tests",
    "feasible",
    "top",
    "say",
    "working",
    "agile",
    "model",
    "code",
    "churned",
    "developers",
    "testers",
    "building",
    "test",
    "executing",
    "bills",
    "available",
    "testing",
    "happens",
    "iteratively",
    "hence",
    "need",
    "run",
    "test",
    "multiple",
    "times",
    "development",
    "cycle",
    "manually",
    "definitely",
    "becomes",
    "tedious",
    "burning",
    "effective",
    "way",
    "automate",
    "tells",
    "us",
    "automate",
    "one",
    "faster",
    "execution",
    "two",
    "less",
    "error",
    "prone",
    "three",
    "main",
    "reason",
    "help",
    "frequent",
    "execution",
    "test",
    "many",
    "tools",
    "available",
    "market",
    "today",
    "automation",
    "one",
    "tool",
    "selenium",
    "birth",
    "selenium",
    "much",
    "selenium",
    "various",
    "tools",
    "market",
    "like",
    "say",
    "rft",
    "qtp",
    "name",
    "popular",
    "ones",
    "selenium",
    "introduced",
    "gentleman",
    "called",
    "jason",
    "huggins",
    "way",
    "back",
    "engineer",
    "thoughtworks",
    "working",
    "web",
    "application",
    "needed",
    "frequent",
    "testing",
    "realized",
    "inefficiency",
    "manually",
    "testing",
    "web",
    "application",
    "repeatedly",
    "wrote",
    "javascript",
    "program",
    "automatically",
    "controlled",
    "browser",
    "actions",
    "named",
    "javascript",
    "testrunner",
    "later",
    "made",
    "open",
    "source",
    "renamed",
    "selenium",
    "core",
    "selenium",
    "came",
    "existence",
    "since",
    "selenium",
    "become",
    "one",
    "powerful",
    "tool",
    "testing",
    "web",
    "applications",
    "selenium",
    "help",
    "saw",
    "demerits",
    "manual",
    "testing",
    "say",
    "automation",
    "test",
    "cases",
    "one",
    "selenium",
    "helps",
    "speedy",
    "execution",
    "test",
    "cases",
    "since",
    "manual",
    "execution",
    "avoided",
    "results",
    "accurate",
    "human",
    "errors",
    "since",
    "test",
    "cases",
    "automated",
    "human",
    "resources",
    "required",
    "execute",
    "automated",
    "test",
    "cases",
    "far",
    "less",
    "manual",
    "testing",
    "lesser",
    "investment",
    "human",
    "resources",
    "saves",
    "time",
    "know",
    "time",
    "money",
    "cost",
    "effective",
    "selenium",
    "open",
    "source",
    "available",
    "free",
    "cost",
    "early",
    "time",
    "market",
    "since",
    "save",
    "effort",
    "time",
    "manual",
    "execution",
    "clients",
    "merrier",
    "would",
    "able",
    "ship",
    "product",
    "pretty",
    "fast",
    "lastly",
    "since",
    "test",
    "cases",
    "automated",
    "rerun",
    "point",
    "time",
    "many",
    "times",
    "required",
    "tool",
    "offers",
    "many",
    "benefits",
    "definitely",
    "want",
    "know",
    "detail",
    "selenium",
    "selenium",
    "enables",
    "us",
    "test",
    "web",
    "applications",
    "kind",
    "browsers",
    "like",
    "internet",
    "explorer",
    "chrome",
    "firefox",
    "safari",
    "edge",
    "opera",
    "even",
    "headless",
    "browser",
    "selenium",
    "open",
    "source",
    "platform",
    "independent",
    "biggest",
    "reason",
    "people",
    "preferring",
    "tool",
    "free",
    "cost",
    "qtp",
    "rft",
    "talked",
    "chargeable",
    "selenium",
    "set",
    "tools",
    "libraries",
    "facilitate",
    "automation",
    "web",
    "application",
    "said",
    "single",
    "tool",
    "multiple",
    "components",
    "seeing",
    "detail",
    "time",
    "tools",
    "together",
    "help",
    "us",
    "test",
    "web",
    "application",
    "run",
    "selenium",
    "scripts",
    "platform",
    "platform",
    "independent",
    "primarily",
    "developed",
    "javascript",
    "common",
    "manual",
    "testers",
    "programming",
    "knowledge",
    "selenium",
    "record",
    "replay",
    "back",
    "tool",
    "called",
    "selenium",
    "id",
    "used",
    "create",
    "set",
    "actions",
    "script",
    "replay",
    "script",
    "back",
    "however",
    "mainly",
    "used",
    "demo",
    "purposes",
    "selenium",
    "powerful",
    "tool",
    "able",
    "take",
    "full",
    "advantage",
    "features",
    "selenium",
    "provides",
    "support",
    "different",
    "programming",
    "languages",
    "like",
    "java",
    "python",
    "ruby",
    "write",
    "test",
    "scripts",
    "language",
    "like",
    "one",
    "need",
    "know",
    "advanced",
    "knowledge",
    "languages",
    "also",
    "selenium",
    "supports",
    "different",
    "operating",
    "systems",
    "supports",
    "windows",
    "macs",
    "linux",
    "even",
    "ubuntu",
    "well",
    "run",
    "selenium",
    "test",
    "platform",
    "choice",
    "hence",
    "selenium",
    "popular",
    "widely",
    "used",
    "automation",
    "tools",
    "automating",
    "web",
    "applications",
    "selenium",
    "set",
    "tools",
    "let",
    "go",
    "little",
    "deeper",
    "selenium",
    "said",
    "selenium",
    "single",
    "tool",
    "suite",
    "tools",
    "let",
    "look",
    "major",
    "components",
    "tools",
    "selenium",
    "offer",
    "selenium",
    "four",
    "major",
    "components",
    "one",
    "selenium",
    "id",
    "simplest",
    "tool",
    "suite",
    "selenium",
    "integrated",
    "development",
    "environment",
    "earlier",
    "selenium",
    "ide",
    "available",
    "firefox",
    "plugin",
    "offered",
    "simple",
    "record",
    "playback",
    "functionality",
    "simple",
    "use",
    "tool",
    "mainly",
    "used",
    "prototyping",
    "used",
    "creating",
    "automation",
    "projects",
    "limitations",
    "like",
    "record",
    "replay",
    "tool",
    "selenium",
    "rc",
    "nothing",
    "selenium",
    "remote",
    "control",
    "used",
    "write",
    "web",
    "application",
    "test",
    "different",
    "programming",
    "language",
    "basically",
    "interacts",
    "browser",
    "help",
    "something",
    "called",
    "rc",
    "server",
    "interacts",
    "uses",
    "simple",
    "http",
    "post",
    "get",
    "request",
    "communication",
    "also",
    "called",
    "selenium",
    "version",
    "got",
    "deprecated",
    "selenium",
    "version",
    "completely",
    "removed",
    "replaced",
    "webdriver",
    "see",
    "detail",
    "happened",
    "selenium",
    "webdriver",
    "important",
    "component",
    "selenium",
    "suite",
    "programming",
    "interface",
    "create",
    "execute",
    "text",
    "test",
    "cases",
    "obviously",
    "successor",
    "selenium",
    "rc",
    "talked",
    "certain",
    "drawbacks",
    "rc",
    "webdriver",
    "interacts",
    "browsers",
    "directly",
    "unlike",
    "rc",
    "rc",
    "required",
    "server",
    "interact",
    "browser",
    "last",
    "component",
    "selenium",
    "grid",
    "selenium",
    "grid",
    "used",
    "run",
    "multiple",
    "test",
    "scripts",
    "multiple",
    "machines",
    "time",
    "helps",
    "achieving",
    "parallel",
    "execution",
    "since",
    "selenium",
    "web",
    "driver",
    "sequential",
    "execution",
    "grid",
    "comes",
    "picture",
    "parallel",
    "execution",
    "parallel",
    "execution",
    "important",
    "real",
    "time",
    "environment",
    "always",
    "need",
    "run",
    "test",
    "cases",
    "distributed",
    "environment",
    "grid",
    "helps",
    "achieve",
    "together",
    "helps",
    "us",
    "create",
    "robust",
    "web",
    "application",
    "test",
    "automation",
    "go",
    "detail",
    "components",
    "let",
    "look",
    "history",
    "selenium",
    "version",
    "selenium",
    "version",
    "comprised",
    "ide",
    "rc",
    "grid",
    "said",
    "earlier",
    "disadvantages",
    "using",
    "rc",
    "rc",
    "path",
    "deprecation",
    "web",
    "driver",
    "taking",
    "path",
    "look",
    "version",
    "earlier",
    "version",
    "webdriver",
    "also",
    "rc",
    "coexisted",
    "onwards",
    "rc",
    "completely",
    "removed",
    "webdriver",
    "took",
    "place",
    "also",
    "4",
    "dot",
    "version",
    "around",
    "corner",
    "features",
    "enhancement",
    "features",
    "talked",
    "w3c",
    "webdriver",
    "standardization",
    "improved",
    "ide",
    "improved",
    "grid",
    "let",
    "look",
    "components",
    "selenium",
    "suite",
    "selenium",
    "ide",
    "simplest",
    "tool",
    "suite",
    "selenium",
    "nothing",
    "integrated",
    "development",
    "environment",
    "creating",
    "automation",
    "scripts",
    "record",
    "playback",
    "functionality",
    "simple",
    "easy",
    "use",
    "available",
    "firefox",
    "plugin",
    "chrome",
    "extension",
    "use",
    "either",
    "browser",
    "record",
    "test",
    "scripts",
    "simple",
    "user",
    "interface",
    "using",
    "create",
    "scripts",
    "interact",
    "browser",
    "commands",
    "created",
    "scripts",
    "called",
    "selenes",
    "commands",
    "exported",
    "supported",
    "programming",
    "language",
    "hence",
    "code",
    "reused",
    "however",
    "mainly",
    "used",
    "prototyping",
    "used",
    "creating",
    "automation",
    "projects",
    "limitation",
    "record",
    "replay",
    "tool",
    "bit",
    "history",
    "selenium",
    "id",
    "earlier",
    "selenium",
    "id",
    "firefox",
    "extension",
    "saw",
    "ide",
    "available",
    "since",
    "selenium",
    "version",
    "one",
    "selenium",
    "id",
    "died",
    "firefox",
    "version",
    "55",
    "id",
    "stopped",
    "supporting",
    "55",
    "version",
    "onwards",
    "around",
    "2017",
    "time",
    "frame",
    "however",
    "recently",
    "new",
    "brand",
    "selenium",
    "id",
    "launched",
    "apply",
    "tools",
    "also",
    "made",
    "across",
    "browser",
    "install",
    "extension",
    "chrome",
    "well",
    "firefox",
    "browser",
    "completely",
    "revamped",
    "ide",
    "code",
    "made",
    "available",
    "github",
    "apache",
    "license",
    "demos",
    "today",
    "looking",
    "new",
    "id",
    "new",
    "ide",
    "also",
    "comes",
    "good",
    "amount",
    "features",
    "reusability",
    "test",
    "cases",
    "better",
    "debugger",
    "importantly",
    "supports",
    "parallel",
    "test",
    "case",
    "execution",
    "introduced",
    "utility",
    "called",
    "selenium",
    "side",
    "runner",
    "allows",
    "run",
    "test",
    "cases",
    "browser",
    "create",
    "automation",
    "using",
    "idec",
    "chrome",
    "firefox",
    "command",
    "prompt",
    "using",
    "site",
    "runner",
    "execute",
    "test",
    "cases",
    "browser",
    "thus",
    "achieving",
    "cross",
    "browser",
    "testing",
    "control",
    "flow",
    "statement",
    "initially",
    "previous",
    "versions",
    "idea",
    "control",
    "flow",
    "statements",
    "available",
    "however",
    "one",
    "install",
    "plugin",
    "use",
    "made",
    "available",
    "box",
    "control",
    "flow",
    "statements",
    "nothing",
    "else",
    "conditions",
    "loops",
    "switch",
    "cases",
    "also",
    "improved",
    "locator",
    "functionality",
    "means",
    "provides",
    "failover",
    "mechanism",
    "locating",
    "elements",
    "web",
    "page",
    "let",
    "look",
    "id",
    "looks",
    "install",
    "start",
    "working",
    "let",
    "take",
    "browser",
    "say",
    "let",
    "go",
    "firefox",
    "browser",
    "browser",
    "already",
    "id",
    "installed",
    "already",
    "id",
    "installed",
    "see",
    "icon",
    "says",
    "selenium",
    "id",
    "install",
    "simply",
    "need",
    "go",
    "firefox",
    "says",
    "find",
    "extension",
    "type",
    "selenium",
    "id",
    "search",
    "extension",
    "search",
    "results",
    "see",
    "selenium",
    "id",
    "click",
    "since",
    "already",
    "installed",
    "says",
    "remove",
    "otherwise",
    "going",
    "give",
    "add",
    "button",
    "click",
    "add",
    "button",
    "install",
    "extension",
    "installed",
    "able",
    "see",
    "selenium",
    "ide",
    "icon",
    "okay",
    "let",
    "go",
    "ahead",
    "launch",
    "id",
    "click",
    "going",
    "show",
    "welcome",
    "page",
    "going",
    "give",
    "options",
    "first",
    "option",
    "says",
    "record",
    "new",
    "test",
    "case",
    "new",
    "project",
    "straight",
    "away",
    "choose",
    "option",
    "start",
    "recording",
    "test",
    "case",
    "case",
    "going",
    "create",
    "default",
    "project",
    "save",
    "later",
    "open",
    "existing",
    "project",
    "open",
    "already",
    "saved",
    "project",
    "create",
    "new",
    "project",
    "close",
    "already",
    "existing",
    "project",
    "demo",
    "purpose",
    "go",
    "ahead",
    "open",
    "say",
    "open",
    "existing",
    "project",
    "created",
    "simple",
    "script",
    "script",
    "logs",
    "facebook",
    "using",
    "dummy",
    "user",
    "mail",
    "sorry",
    "username",
    "password",
    "simple",
    "script",
    "lines",
    "going",
    "simply",
    "run",
    "script",
    "see",
    "works",
    "going",
    "reduce",
    "test",
    "execution",
    "speed",
    "able",
    "see",
    "every",
    "step",
    "execution",
    "right",
    "adjust",
    "window",
    "simply",
    "say",
    "run",
    "current",
    "test",
    "right",
    "get",
    "side",
    "side",
    "able",
    "see",
    "exactly",
    "script",
    "okay",
    "able",
    "see",
    "windows",
    "okay",
    "going",
    "type",
    "user",
    "email",
    "go",
    "enter",
    "password",
    "clicked",
    "login",
    "button",
    "going",
    "take",
    "say",
    "login",
    "since",
    "dummy",
    "ids",
    "able",
    "log",
    "going",
    "see",
    "error",
    "window",
    "fine",
    "expected",
    "output",
    "id",
    "look",
    "execute",
    "test",
    "case",
    "every",
    "statement",
    "every",
    "command",
    "used",
    "colored",
    "coded",
    "green",
    "means",
    "particular",
    "step",
    "executed",
    "successfully",
    "log",
    "window",
    "give",
    "complete",
    "log",
    "test",
    "case",
    "right",
    "first",
    "step",
    "till",
    "end",
    "end",
    "result",
    "says",
    "fb",
    "login",
    "test",
    "case",
    "name",
    "completed",
    "successfully",
    "let",
    "look",
    "components",
    "id",
    "first",
    "one",
    "menu",
    "bar",
    "let",
    "go",
    "id",
    "right",
    "menu",
    "bar",
    "right",
    "top",
    "project",
    "name",
    "either",
    "add",
    "new",
    "project",
    "rename",
    "project",
    "since",
    "already",
    "project",
    "named",
    "facebook",
    "right",
    "options",
    "create",
    "new",
    "project",
    "open",
    "existing",
    "project",
    "save",
    "current",
    "project",
    "comes",
    "toolbar",
    "using",
    "options",
    "toolbar",
    "control",
    "execution",
    "test",
    "cases",
    "first",
    "one",
    "recording",
    "button",
    "use",
    "start",
    "recording",
    "script",
    "left",
    "two",
    "options",
    "run",
    "test",
    "cases",
    "first",
    "one",
    "run",
    "tests",
    "case",
    "multiple",
    "test",
    "cases",
    "written",
    "execute",
    "one",
    "one",
    "sequentially",
    "using",
    "run",
    "test",
    "else",
    "want",
    "run",
    "current",
    "test",
    "would",
    "use",
    "id",
    "debugger",
    "option",
    "use",
    "step",
    "execution",
    "say",
    "example",
    "whenever",
    "run",
    "script",
    "going",
    "execute",
    "every",
    "command",
    "sequentially",
    "instead",
    "select",
    "first",
    "command",
    "say",
    "step",
    "execution",
    "right",
    "moment",
    "finishes",
    "first",
    "command",
    "opening",
    "facebook",
    "right",
    "think",
    "already",
    "done",
    "yeah",
    "right",
    "done",
    "going",
    "wait",
    "immediately",
    "second",
    "command",
    "says",
    "pause",
    "debugger",
    "whatever",
    "would",
    "like",
    "case",
    "want",
    "change",
    "command",
    "pause",
    "execution",
    "resume",
    "execution",
    "right",
    "even",
    "completely",
    "stop",
    "test",
    "execution",
    "select",
    "run",
    "rest",
    "test",
    "case",
    "say",
    "run",
    "test",
    "case",
    "going",
    "going",
    "simply",
    "go",
    "ahead",
    "complete",
    "com",
    "complete",
    "test",
    "case",
    "another",
    "option",
    "see",
    "timer",
    "test",
    "execution",
    "speed",
    "execute",
    "test",
    "cases",
    "speed",
    "want",
    "say",
    "whenever",
    "developing",
    "automation",
    "script",
    "right",
    "say",
    "want",
    "give",
    "demo",
    "need",
    "control",
    "speed",
    "sometimes",
    "viewer",
    "able",
    "exactly",
    "see",
    "steps",
    "performed",
    "gives",
    "option",
    "control",
    "complete",
    "execution",
    "right",
    "see",
    "grading",
    "somewhere",
    "fast",
    "completely",
    "slow",
    "execution",
    "previous",
    "demo",
    "showed",
    "control",
    "speed",
    "executed",
    "could",
    "see",
    "every",
    "command",
    "executed",
    "right",
    "next",
    "called",
    "address",
    "bar",
    "whichever",
    "wherever",
    "whenever",
    "enter",
    "url",
    "want",
    "conduct",
    "test",
    "another",
    "thing",
    "keeps",
    "history",
    "urls",
    "used",
    "running",
    "test",
    "script",
    "recorded",
    "every",
    "instruction",
    "displayed",
    "order",
    "recorded",
    "script",
    "look",
    "something",
    "called",
    "login",
    "reference",
    "log",
    "area",
    "records",
    "every",
    "step",
    "command",
    "get",
    "executed",
    "right",
    "see",
    "says",
    "open",
    "https",
    "ok",
    "means",
    "command",
    "executed",
    "successfully",
    "complete",
    "test",
    "case",
    "done",
    "gives",
    "whether",
    "test",
    "case",
    "passed",
    "failed",
    "case",
    "failure",
    "immediately",
    "see",
    "test",
    "case",
    "filled",
    "red",
    "color",
    "also",
    "something",
    "called",
    "reference",
    "example",
    "say",
    "click",
    "command",
    "reference",
    "tab",
    "going",
    "show",
    "details",
    "command",
    "used",
    "script",
    "gives",
    "details",
    "command",
    "well",
    "arguments",
    "used",
    "need",
    "using",
    "particular",
    "command",
    "okay",
    "let",
    "go",
    "ahead",
    "write",
    "simple",
    "script",
    "using",
    "id",
    "get",
    "idea",
    "actually",
    "record",
    "scripts",
    "id",
    "use",
    "case",
    "simple",
    "use",
    "case",
    "open",
    "amazon",
    "search",
    "simply",
    "search",
    "say",
    "product",
    "iphone",
    "get",
    "search",
    "page",
    "iphones",
    "displayed",
    "asset",
    "title",
    "page",
    "simple",
    "right",
    "let",
    "first",
    "thing",
    "need",
    "url",
    "okay",
    "first",
    "let",
    "go",
    "firefox",
    "browser",
    "say",
    "simply",
    "get",
    "right",
    "url",
    "absolute",
    "url",
    "path",
    "make",
    "mistakes",
    "typing",
    "url",
    "okay",
    "got",
    "let",
    "close",
    "windows",
    "need",
    "let",
    "minimize",
    "right",
    "tests",
    "tab",
    "say",
    "add",
    "new",
    "test",
    "name",
    "test",
    "amazon",
    "search",
    "done",
    "say",
    "add",
    "enter",
    "url",
    "copied",
    "browser",
    "okay",
    "say",
    "start",
    "recording",
    "since",
    "entered",
    "url",
    "address",
    "box",
    "opened",
    "dot",
    "url",
    "let",
    "test",
    "case",
    "test",
    "case",
    "said",
    "want",
    "search",
    "iphone",
    "going",
    "click",
    "search",
    "button",
    "gives",
    "list",
    "iphones",
    "said",
    "want",
    "add",
    "assertion",
    "title",
    "page",
    "id",
    "gives",
    "option",
    "right",
    "click",
    "anywhere",
    "page",
    "see",
    "selenium",
    "id",
    "options",
    "select",
    "assert",
    "title",
    "close",
    "browser",
    "kind",
    "completes",
    "test",
    "case",
    "take",
    "look",
    "steps",
    "created",
    "says",
    "open",
    "slash",
    "already",
    "provided",
    "url",
    "either",
    "replace",
    "regular",
    "url",
    "leave",
    "since",
    "going",
    "proper",
    "script",
    "might",
    "using",
    "run",
    "command",
    "prompt",
    "also",
    "replace",
    "target",
    "actual",
    "url",
    "setting",
    "window",
    "size",
    "whatever",
    "particular",
    "url",
    "website",
    "recorded",
    "steps",
    "says",
    "type",
    "particular",
    "text",
    "box",
    "search",
    "box",
    "type",
    "iphone",
    "value",
    "entered",
    "one",
    "feature",
    "told",
    "new",
    "id",
    "said",
    "failover",
    "mechanism",
    "locating",
    "techniques",
    "look",
    "id",
    "equal",
    "tab",
    "search",
    "textbook",
    "nothing",
    "search",
    "box",
    "entered",
    "text",
    "iphone",
    "certain",
    "identification",
    "ide",
    "identifies",
    "web",
    "element",
    "multiple",
    "options",
    "select",
    "particular",
    "search",
    "box",
    "right",
    "used",
    "id",
    "equal",
    "two",
    "tab",
    "search",
    "box",
    "however",
    "know",
    "different",
    "locating",
    "techniques",
    "able",
    "see",
    "techniques",
    "also",
    "identified",
    "like",
    "name",
    "css",
    "xpath",
    "help",
    "failovers",
    "say",
    "tomorrow",
    "website",
    "changes",
    "id",
    "element",
    "right",
    "going",
    "come",
    "rewrite",
    "scripts",
    "instead",
    "using",
    "script",
    "particular",
    "id",
    "fails",
    "unable",
    "find",
    "element",
    "using",
    "first",
    "locator",
    "id",
    "simply",
    "moves",
    "next",
    "available",
    "ones",
    "tries",
    "search",
    "element",
    "one",
    "becomes",
    "true",
    "failure",
    "mechanism",
    "got",
    "added",
    "brilliant",
    "feature",
    "test",
    "cases",
    "break",
    "element",
    "location",
    "techniques",
    "well",
    "let",
    "come",
    "back",
    "added",
    "assert",
    "title",
    "right",
    "us",
    "title",
    "simply",
    "captures",
    "title",
    "particular",
    "page",
    "checks",
    "simple",
    "test",
    "case",
    "stop",
    "recording",
    "also",
    "given",
    "close",
    "browser",
    "right",
    "comment",
    "run",
    "test",
    "case",
    "going",
    "fast",
    "might",
    "able",
    "catch",
    "exact",
    "command",
    "execution",
    "happened",
    "right",
    "right",
    "disable",
    "test",
    "cases",
    "stays",
    "without",
    "closing",
    "browser",
    "say",
    "run",
    "current",
    "test",
    "date",
    "amazon",
    "end",
    "launched",
    "okay",
    "typed",
    "iphone",
    "also",
    "clicked",
    "search",
    "done",
    "look",
    "since",
    "reference",
    "tab",
    "able",
    "show",
    "let",
    "go",
    "log",
    "let",
    "see",
    "log",
    "going",
    "running",
    "log",
    "notice",
    "previous",
    "examples",
    "run",
    "facebook",
    "also",
    "lock",
    "see",
    "log",
    "running",
    "amazon",
    "search",
    "test",
    "case",
    "see",
    "every",
    "command",
    "line",
    "right",
    "executed",
    "successfully",
    "assert",
    "title",
    "also",
    "done",
    "test",
    "case",
    "executed",
    "successfully",
    "passed",
    "assert",
    "title",
    "modify",
    "let",
    "say",
    "add",
    "text",
    "add",
    "double",
    "intentionally",
    "going",
    "fail",
    "test",
    "case",
    "show",
    "whenever",
    "test",
    "case",
    "failure",
    "id",
    "behaves",
    "get",
    "know",
    "failures",
    "right",
    "run",
    "disk",
    "test",
    "case",
    "let",
    "close",
    "previous",
    "window",
    "right",
    "done",
    "also",
    "uncomment",
    "close",
    "anyway",
    "failure",
    "going",
    "see",
    "able",
    "see",
    "logs",
    "close",
    "browser",
    "execution",
    "test",
    "case",
    "okay",
    "let",
    "simply",
    "go",
    "run",
    "test",
    "case",
    "okay",
    "launched",
    "search",
    "iphone",
    "yeah",
    "go",
    "right",
    "also",
    "close",
    "browser",
    "yes",
    "closed",
    "browser",
    "failed",
    "see",
    "line",
    "command",
    "filled",
    "expected",
    "title",
    "look",
    "logs",
    "says",
    "assert",
    "title",
    "failed",
    "actual",
    "result",
    "something",
    "different",
    "match",
    "asked",
    "simple",
    "use",
    "id",
    "create",
    "automation",
    "scripts",
    "saw",
    "components",
    "id",
    "saw",
    "record",
    "button",
    "showed",
    "toolbar",
    "showed",
    "editor",
    "box",
    "also",
    "test",
    "execution",
    "lock",
    "let",
    "come",
    "limitations",
    "id",
    "ide",
    "export",
    "scripts",
    "test",
    "scripts",
    "web",
    "driver",
    "scripts",
    "support",
    "yet",
    "added",
    "works",
    "data",
    "driven",
    "testing",
    "like",
    "using",
    "excel",
    "files",
    "reading",
    "data",
    "csv",
    "files",
    "passing",
    "script",
    "capability",
    "still",
    "available",
    "also",
    "connect",
    "database",
    "reading",
    "test",
    "data",
    "perform",
    "kind",
    "database",
    "testing",
    "selenium",
    "webdriver",
    "yes",
    "also",
    "unlike",
    "selenium",
    "webdriver",
    "good",
    "reporting",
    "mechanism",
    "ide",
    "like",
    "say",
    "example",
    "test",
    "ng",
    "repotengi",
    "brings",
    "us",
    "next",
    "component",
    "suite",
    "selenium",
    "rc",
    "selenium",
    "remote",
    "control",
    "selenium",
    "rc",
    "developed",
    "paul",
    "hammond",
    "refactored",
    "code",
    "developed",
    "jason",
    "credited",
    "json",
    "selenium",
    "selenium",
    "server",
    "written",
    "java",
    "used",
    "write",
    "web",
    "application",
    "test",
    "different",
    "programming",
    "languages",
    "supports",
    "multiple",
    "programming",
    "languages",
    "like",
    "java",
    "c",
    "perl",
    "python",
    "ruby",
    "interacts",
    "browser",
    "help",
    "rc",
    "server",
    "rfsave",
    "server",
    "uses",
    "simple",
    "http",
    "get",
    "post",
    "request",
    "communication",
    "said",
    "earlier",
    "also",
    "selenium",
    "rc",
    "called",
    "selenium",
    "version",
    "got",
    "deplicated",
    "selenium",
    "completely",
    "removed",
    "got",
    "replaced",
    "webdriver",
    "see",
    "happened",
    "issue",
    "rc",
    "server",
    "architecture",
    "selenium",
    "remote",
    "control",
    "high",
    "level",
    "jason",
    "huggins",
    "introduced",
    "selenium",
    "know",
    "tool",
    "called",
    "javascript",
    "program",
    "also",
    "called",
    "selenium",
    "core",
    "every",
    "html",
    "javascript",
    "statements",
    "executed",
    "web",
    "browser",
    "javascript",
    "engine",
    "helps",
    "executing",
    "command",
    "rca",
    "one",
    "major",
    "issue",
    "issue",
    "say",
    "example",
    "test",
    "script",
    "say",
    "trying",
    "access",
    "elements",
    "anywhere",
    "domain",
    "used",
    "happen",
    "every",
    "element",
    "accessible",
    "e",
    "elements",
    "belong",
    "domain",
    "like",
    "say",
    "example",
    "mail",
    "search",
    "drive",
    "elements",
    "accessible",
    "test",
    "scripts",
    "however",
    "nothing",
    "outside",
    "domain",
    "say",
    "case",
    "accessible",
    "say",
    "example",
    "test",
    "scripts",
    "wanted",
    "access",
    "something",
    "possible",
    "due",
    "security",
    "reasons",
    "obviously",
    "overcome",
    "testers",
    "install",
    "selenium",
    "core",
    "web",
    "server",
    "contained",
    "web",
    "application",
    "test",
    "machine",
    "imagine",
    "every",
    "machine",
    "test",
    "going",
    "feasible",
    "even",
    "effective",
    "time",
    "issue",
    "called",
    "origin",
    "policy",
    "origin",
    "policy",
    "issue",
    "says",
    "prohibits",
    "javascript",
    "accessing",
    "elements",
    "interacting",
    "scripts",
    "domain",
    "different",
    "launched",
    "purely",
    "security",
    "measure",
    "written",
    "scripts",
    "access",
    "anything",
    "related",
    "scripts",
    "access",
    "elements",
    "outside",
    "domain",
    "like",
    "said",
    "example",
    "origin",
    "policy",
    "overcome",
    "gentleman",
    "created",
    "something",
    "called",
    "selenium",
    "remote",
    "control",
    "server",
    "trick",
    "browser",
    "believing",
    "core",
    "selenium",
    "core",
    "web",
    "application",
    "test",
    "domain",
    "selenium",
    "remote",
    "control",
    "look",
    "high",
    "level",
    "architecture",
    "actually",
    "work",
    "first",
    "write",
    "test",
    "scripts",
    "right",
    "supported",
    "language",
    "like",
    "php",
    "java",
    "python",
    "start",
    "testing",
    "need",
    "launch",
    "rc",
    "server",
    "separate",
    "application",
    "selenium",
    "server",
    "responsible",
    "receiving",
    "cellini",
    "commands",
    "selenius",
    "commands",
    "ones",
    "written",
    "script",
    "interprets",
    "reports",
    "result",
    "back",
    "test",
    "done",
    "rc",
    "server",
    "browser",
    "interaction",
    "happens",
    "rc",
    "server",
    "right",
    "browser",
    "happens",
    "simple",
    "http",
    "post",
    "get",
    "request",
    "rc",
    "server",
    "browser",
    "communicate",
    "exactly",
    "communication",
    "happens",
    "rc",
    "server",
    "acts",
    "like",
    "proxy",
    "say",
    "test",
    "scripts",
    "ask",
    "launch",
    "browser",
    "happens",
    "commands",
    "goes",
    "server",
    "rc",
    "server",
    "launches",
    "browser",
    "injects",
    "javascript",
    "browser",
    "done",
    "subsequent",
    "calls",
    "test",
    "script",
    "right",
    "test",
    "scripts",
    "browser",
    "goes",
    "rc",
    "upon",
    "upon",
    "receiving",
    "instruction",
    "selenium",
    "core",
    "executes",
    "actual",
    "commands",
    "javascript",
    "commands",
    "browser",
    "test",
    "results",
    "displayed",
    "back",
    "browser",
    "rc",
    "test",
    "scripts",
    "cycle",
    "gets",
    "repeated",
    "right",
    "complete",
    "test",
    "case",
    "execution",
    "every",
    "command",
    "write",
    "javascript",
    "test",
    "script",
    "goes",
    "complete",
    "cycle",
    "going",
    "rc",
    "server",
    "browser",
    "collecting",
    "results",
    "rc",
    "server",
    "back",
    "test",
    "scripts",
    "cycle",
    "gets",
    "repeated",
    "every",
    "command",
    "complete",
    "test",
    "execution",
    "done",
    "rc",
    "definitely",
    "lot",
    "shortcomings",
    "rc",
    "server",
    "needs",
    "installed",
    "running",
    "test",
    "scripts",
    "saw",
    "additional",
    "setup",
    "since",
    "acts",
    "mediator",
    "commands",
    "salinist",
    "commas",
    "browser",
    "architecture",
    "rc",
    "complicated",
    "intermediate",
    "rc",
    "server",
    "required",
    "communicate",
    "browser",
    "execution",
    "commands",
    "takes",
    "long",
    "lower",
    "know",
    "every",
    "command",
    "takes",
    "full",
    "trip",
    "test",
    "script",
    "rc",
    "server",
    "core",
    "engine",
    "browser",
    "back",
    "route",
    "makes",
    "overall",
    "test",
    "execution",
    "slow",
    "lastly",
    "apis",
    "supported",
    "rc",
    "redundant",
    "confusing",
    "rc",
    "good",
    "number",
    "aps",
    "however",
    "less",
    "object",
    "oriented",
    "redundant",
    "confusing",
    "say",
    "example",
    "say",
    "want",
    "write",
    "text",
    "box",
    "use",
    "type",
    "key",
    "command",
    "type",
    "command",
    "always",
    "confusing",
    "another",
    "example",
    "mouse",
    "commands",
    "using",
    "click",
    "mouse",
    "dot",
    "kind",
    "know",
    "almost",
    "providing",
    "similar",
    "functionality",
    "kind",
    "confusion",
    "developers",
    "used",
    "create",
    "hence",
    "selenium",
    "rc",
    "got",
    "deprecated",
    "available",
    "latest",
    "selenium",
    "versions",
    "obsolete",
    "overcome",
    "shortfalls",
    "webdriver",
    "introduced",
    "rc",
    "introduced",
    "2004",
    "web",
    "driver",
    "introduced",
    "simon",
    "stevert",
    "testing",
    "platform",
    "webdriver",
    "run",
    "platform",
    "like",
    "say",
    "linux",
    "windows",
    "mac",
    "even",
    "ubuntu",
    "machine",
    "run",
    "selenium",
    "scripts",
    "machine",
    "programming",
    "interface",
    "run",
    "test",
    "cases",
    "ide",
    "work",
    "actually",
    "test",
    "cases",
    "created",
    "executed",
    "using",
    "web",
    "elements",
    "objects",
    "using",
    "object",
    "locator",
    "web",
    "driver",
    "method",
    "demo",
    "understand",
    "web",
    "driver",
    "methods",
    "locate",
    "web",
    "elements",
    "web",
    "page",
    "require",
    "core",
    "engine",
    "like",
    "rc",
    "pretty",
    "fast",
    "webdriver",
    "interacts",
    "directly",
    "browser",
    "intermediate",
    "server",
    "like",
    "rc",
    "hat",
    "browser",
    "case",
    "happens",
    "browser",
    "driver",
    "application",
    "runs",
    "driver",
    "responsible",
    "make",
    "browser",
    "understand",
    "commands",
    "passing",
    "script",
    "like",
    "say",
    "example",
    "click",
    "button",
    "want",
    "enter",
    "text",
    "script",
    "tell",
    "browser",
    "want",
    "work",
    "say",
    "chrome",
    "chrome",
    "driver",
    "responsible",
    "interpreting",
    "instructions",
    "execute",
    "web",
    "application",
    "launched",
    "chrome",
    "browser",
    "like",
    "rc",
    "webdriver",
    "also",
    "supports",
    "multiple",
    "programming",
    "languages",
    "write",
    "test",
    "scripts",
    "another",
    "advantage",
    "web",
    "driver",
    "supports",
    "various",
    "frameworks",
    "like",
    "test",
    "ng",
    "junit",
    "n",
    "unit",
    "report",
    "nj",
    "talk",
    "limitations",
    "webdriver",
    "appreciate",
    "support",
    "various",
    "frameworks",
    "tool",
    "help",
    "making",
    "selenium",
    "complete",
    "automation",
    "solution",
    "web",
    "application",
    "let",
    "look",
    "architecture",
    "webdriver",
    "high",
    "level",
    "web",
    "drivers",
    "web",
    "driver",
    "consists",
    "four",
    "major",
    "components",
    "first",
    "one",
    "got",
    "client",
    "libraries",
    "right",
    "also",
    "call",
    "language",
    "bindings",
    "since",
    "selenium",
    "supports",
    "multiple",
    "language",
    "free",
    "use",
    "supported",
    "languages",
    "create",
    "automation",
    "script",
    "libraries",
    "made",
    "available",
    "selenium",
    "website",
    "need",
    "download",
    "write",
    "scripts",
    "accordingly",
    "let",
    "go",
    "see",
    "download",
    "go",
    "browser",
    "right",
    "working",
    "selenium",
    "website",
    "bible",
    "anything",
    "everything",
    "need",
    "know",
    "selenium",
    "right",
    "need",
    "come",
    "use",
    "tabs",
    "website",
    "right",
    "going",
    "look",
    "language",
    "binding",
    "go",
    "download",
    "tab",
    "okay",
    "scroll",
    "see",
    "something",
    "like",
    "selenium",
    "client",
    "web",
    "driver",
    "language",
    "bindings",
    "supported",
    "language",
    "selenium",
    "download",
    "link",
    "right",
    "say",
    "example",
    "working",
    "java",
    "need",
    "need",
    "download",
    "java",
    "language",
    "binding",
    "let",
    "go",
    "back",
    "presentation",
    "language",
    "bindings",
    "available",
    "next",
    "selenium",
    "provides",
    "lots",
    "aps",
    "us",
    "interact",
    "browser",
    "demo",
    "showing",
    "aps",
    "right",
    "nothing",
    "rest",
    "apis",
    "everything",
    "whatever",
    "script",
    "happens",
    "rest",
    "calls",
    "json",
    "wire",
    "protocol",
    "json",
    "javascript",
    "object",
    "notation",
    "nothing",
    "standard",
    "exchanging",
    "data",
    "web",
    "example",
    "want",
    "say",
    "launch",
    "web",
    "application",
    "script",
    "selenium",
    "creates",
    "json",
    "payload",
    "posts",
    "request",
    "browser",
    "driver",
    "browser",
    "drivers",
    "said",
    "specific",
    "driver",
    "browser",
    "know",
    "every",
    "tool",
    "limitation",
    "selenium",
    "let",
    "look",
    "limitations",
    "workarounds",
    "test",
    "mobile",
    "applications",
    "requires",
    "framework",
    "like",
    "apm",
    "selenium",
    "automating",
    "web",
    "application",
    "handle",
    "mobile",
    "applications",
    "mobile",
    "applications",
    "little",
    "different",
    "need",
    "set",
    "automation",
    "tool",
    "however",
    "selenium",
    "provides",
    "support",
    "integrating",
    "apm",
    "tool",
    "nothing",
    "mobile",
    "application",
    "automation",
    "tool",
    "using",
    "apm",
    "selenium",
    "still",
    "achieve",
    "mobile",
    "application",
    "automation",
    "usually",
    "need",
    "application",
    "test",
    "also",
    "supported",
    "mobile",
    "devices",
    "would",
    "want",
    "mechanism",
    "run",
    "test",
    "cases",
    "web",
    "browser",
    "well",
    "mobile",
    "process",
    "right",
    "achieve",
    "next",
    "limitation",
    "talked",
    "components",
    "selenium",
    "said",
    "webdriver",
    "achieve",
    "sequential",
    "execution",
    "however",
    "real",
    "time",
    "scenario",
    "live",
    "need",
    "mechanism",
    "run",
    "test",
    "cases",
    "parallelly",
    "multiple",
    "machines",
    "well",
    "multiple",
    "browsers",
    "though",
    "limitation",
    "webdriver",
    "selenium",
    "offers",
    "something",
    "called",
    "grid",
    "helps",
    "us",
    "achieve",
    "see",
    "shortly",
    "selenium",
    "grid",
    "also",
    "want",
    "know",
    "details",
    "work",
    "grid",
    "want",
    "install",
    "grid",
    "check",
    "video",
    "simply",
    "learn",
    "website",
    "selenium",
    "grid",
    "third",
    "limitations",
    "limited",
    "reporting",
    "capability",
    "selenium",
    "webdriver",
    "limited",
    "reporting",
    "capability",
    "create",
    "basic",
    "reports",
    "definitely",
    "need",
    "support",
    "tools",
    "like",
    "say",
    "test",
    "ng",
    "report",
    "ng",
    "even",
    "extent",
    "reports",
    "integrate",
    "selenium",
    "generate",
    "beautiful",
    "reports",
    "powerful",
    "also",
    "challenges",
    "selenium",
    "like",
    "selenium",
    "good",
    "image",
    "testing",
    "especially",
    "ones",
    "designed",
    "web",
    "application",
    "automation",
    "tools",
    "used",
    "along",
    "selenium",
    "like",
    "auto",
    "seculi",
    "look",
    "selenium",
    "still",
    "provides",
    "complete",
    "solution",
    "automation",
    "needs",
    "beauty",
    "selenium",
    "makes",
    "popular",
    "tool",
    "today",
    "automation",
    "okay",
    "let",
    "quick",
    "comparison",
    "selenium",
    "rc",
    "web",
    "driver",
    "rc",
    "complex",
    "architecture",
    "know",
    "additional",
    "rc",
    "server",
    "whereas",
    "due",
    "direct",
    "interaction",
    "browser",
    "webdriver",
    "architecture",
    "pretty",
    "simple",
    "execution",
    "speed",
    "lower",
    "rc",
    "much",
    "faster",
    "webdriver",
    "web",
    "driver",
    "eliminated",
    "complete",
    "layer",
    "selenium",
    "server",
    "right",
    "rc",
    "server",
    "established",
    "direct",
    "communication",
    "browser",
    "browser",
    "drivers",
    "requires",
    "rc",
    "server",
    "interact",
    "browsers",
    "talked",
    "whereas",
    "webdriver",
    "directly",
    "interact",
    "browser",
    "rc",
    "talked",
    "one",
    "limitations",
    "lot",
    "redundant",
    "abs",
    "kept",
    "developers",
    "guessing",
    "api",
    "use",
    "functionality",
    "however",
    "webdriver",
    "offers",
    "pretty",
    "clean",
    "apis",
    "work",
    "rc",
    "offer",
    "support",
    "headless",
    "browser",
    "whereas",
    "web",
    "driver",
    "support",
    "using",
    "headless",
    "browsers",
    "let",
    "see",
    "web",
    "driver",
    "action",
    "demo",
    "use",
    "particular",
    "use",
    "case",
    "use",
    "case",
    "says",
    "navigate",
    "official",
    "simply",
    "learn",
    "website",
    "type",
    "selenium",
    "search",
    "bar",
    "click",
    "click",
    "selenium",
    "training",
    "basically",
    "searching",
    "selenium",
    "training",
    "simply",
    "learn",
    "website",
    "first",
    "let",
    "steps",
    "manually",
    "go",
    "ahead",
    "write",
    "automation",
    "script",
    "let",
    "go",
    "browser",
    "browser",
    "let",
    "first",
    "launch",
    "simply",
    "learn",
    "website",
    "okay",
    "use",
    "case",
    "step",
    "says",
    "need",
    "search",
    "selenium",
    "click",
    "search",
    "button",
    "going",
    "give",
    "complete",
    "list",
    "kind",
    "selenium",
    "trainings",
    "available",
    "simpler",
    "interested",
    "selenium",
    "training",
    "find",
    "web",
    "page",
    "need",
    "go",
    "click",
    "right",
    "steps",
    "going",
    "perform",
    "use",
    "case",
    "okay",
    "writing",
    "test",
    "cases",
    "using",
    "id",
    "eclipse",
    "already",
    "installed",
    "eclipse",
    "also",
    "installed",
    "selenium",
    "instance",
    "eclipse",
    "right",
    "see",
    "reference",
    "library",
    "folder",
    "see",
    "jars",
    "required",
    "selenium",
    "work",
    "next",
    "another",
    "prereq",
    "required",
    "selenium",
    "driver",
    "files",
    "every",
    "browser",
    "want",
    "work",
    "driver",
    "file",
    "execute",
    "selenium",
    "scripts",
    "since",
    "demo",
    "working",
    "firefox",
    "browser",
    "need",
    "driver",
    "file",
    "firefox",
    "driver",
    "file",
    "firefox",
    "geckodriver",
    "already",
    "downloaded",
    "placed",
    "folder",
    "called",
    "drivers",
    "download",
    "let",
    "go",
    "ahead",
    "see",
    "go",
    "back",
    "browser",
    "go",
    "selenium",
    "hq",
    "dot",
    "website",
    "go",
    "download",
    "tab",
    "download",
    "tab",
    "scroll",
    "see",
    "something",
    "like",
    "drivers",
    "bindings",
    "plugins",
    "see",
    "list",
    "browsers",
    "supported",
    "selenium",
    "browser",
    "find",
    "link",
    "driver",
    "files",
    "since",
    "using",
    "gecko",
    "driver",
    "link",
    "need",
    "go",
    "depending",
    "operating",
    "system",
    "working",
    "need",
    "download",
    "particular",
    "file",
    "since",
    "working",
    "mac",
    "file",
    "using",
    "windows",
    "user",
    "need",
    "download",
    "zip",
    "file",
    "unzip",
    "unzip",
    "would",
    "get",
    "file",
    "called",
    "gecko",
    "driver",
    "firefox",
    "chrome",
    "driver",
    "chrome",
    "browser",
    "create",
    "directory",
    "called",
    "drivers",
    "project",
    "place",
    "driver",
    "files",
    "two",
    "prereqs",
    "selenium",
    "one",
    "importing",
    "jar",
    "files",
    "like",
    "drivers",
    "downloaded",
    "keep",
    "folder",
    "reference",
    "okay",
    "go",
    "ahead",
    "create",
    "class",
    "already",
    "package",
    "created",
    "project",
    "use",
    "project",
    "create",
    "new",
    "class",
    "say",
    "create",
    "new",
    "java",
    "class",
    "let",
    "call",
    "search",
    "training",
    "using",
    "public",
    "static",
    "void",
    "main",
    "click",
    "finish",
    "let",
    "remove",
    "auto",
    "generated",
    "lines",
    "need",
    "right",
    "first",
    "statement",
    "need",
    "write",
    "even",
    "start",
    "writing",
    "rest",
    "quotas",
    "need",
    "need",
    "define",
    "declare",
    "driver",
    "variable",
    "using",
    "class",
    "web",
    "driver",
    "would",
    "say",
    "web",
    "driver",
    "driver",
    "done",
    "right",
    "see",
    "id",
    "going",
    "flash",
    "errors",
    "means",
    "going",
    "ask",
    "import",
    "certain",
    "libraries",
    "required",
    "web",
    "driver",
    "simply",
    "go",
    "ahead",
    "say",
    "import",
    "webdriver",
    "dot",
    "selenium",
    "package",
    "need",
    "right",
    "driver",
    "created",
    "class",
    "web",
    "driver",
    "going",
    "create",
    "three",
    "methods",
    "right",
    "first",
    "method",
    "launching",
    "firefox",
    "browser",
    "okay",
    "write",
    "simple",
    "method",
    "searching",
    "selenium",
    "training",
    "clicking",
    "actual",
    "use",
    "case",
    "third",
    "method",
    "going",
    "write",
    "close",
    "browser",
    "going",
    "opening",
    "right",
    "different",
    "methods",
    "creating",
    "public",
    "static",
    "void",
    "main",
    "call",
    "methods",
    "one",
    "okay",
    "let",
    "go",
    "ahead",
    "write",
    "first",
    "method",
    "first",
    "method",
    "launching",
    "firefox",
    "browser",
    "say",
    "public",
    "void",
    "since",
    "return",
    "type",
    "null",
    "return",
    "type",
    "let",
    "call",
    "launch",
    "browser",
    "okay",
    "right",
    "launching",
    "browser",
    "need",
    "mention",
    "two",
    "steps",
    "first",
    "step",
    "need",
    "property",
    "okay",
    "let",
    "first",
    "explain",
    "say",
    "system",
    "dot",
    "set",
    "property",
    "accepts",
    "key",
    "value",
    "pair",
    "key",
    "key",
    "web",
    "driver",
    "dot",
    "gecko",
    "dot",
    "driver",
    "need",
    "provide",
    "value",
    "value",
    "nothing",
    "path",
    "gecko",
    "driver",
    "know",
    "gecko",
    "driver",
    "going",
    "use",
    "right",
    "project",
    "path",
    "drivers",
    "folder",
    "correct",
    "path",
    "going",
    "provide",
    "simply",
    "need",
    "say",
    "drivers",
    "slash",
    "gecko",
    "driver",
    "g",
    "e",
    "c",
    "k",
    "right",
    "done",
    "let",
    "close",
    "sentence",
    "right",
    "since",
    "mac",
    "user",
    "gecko",
    "driver",
    "installable",
    "name",
    "gecko",
    "driver",
    "windows",
    "user",
    "running",
    "selenium",
    "scripts",
    "windows",
    "machine",
    "need",
    "provide",
    "complete",
    "path",
    "including",
    "dot",
    "exe",
    "driver",
    "executable",
    "machines",
    "going",
    "alright",
    "make",
    "sure",
    "path",
    "mentioned",
    "property",
    "correct",
    "path",
    "okay",
    "next",
    "thing",
    "need",
    "need",
    "say",
    "driver",
    "equal",
    "new",
    "firefox",
    "driver",
    "okay",
    "command",
    "new",
    "firefox",
    "driver",
    "creates",
    "instance",
    "firefox",
    "browser",
    "also",
    "flagging",
    "error",
    "going",
    "ask",
    "import",
    "packages",
    "firefox",
    "driver",
    "classes",
    "present",
    "okay",
    "two",
    "lines",
    "responsible",
    "launching",
    "firefox",
    "browser",
    "firm",
    "done",
    "next",
    "step",
    "use",
    "case",
    "need",
    "launch",
    "website",
    "simply",
    "learn",
    "command",
    "called",
    "whatever",
    "url",
    "going",
    "give",
    "double",
    "quotes",
    "argument",
    "going",
    "launch",
    "particular",
    "website",
    "us",
    "simply",
    "learn",
    "website",
    "best",
    "practices",
    "instead",
    "typing",
    "url",
    "go",
    "browser",
    "launch",
    "url",
    "want",
    "test",
    "simply",
    "copy",
    "come",
    "back",
    "eclipse",
    "simply",
    "paste",
    "ensures",
    "make",
    "mistakes",
    "url",
    "okay",
    "done",
    "first",
    "method",
    "ready",
    "launching",
    "browser",
    "firefox",
    "browser",
    "launching",
    "simplylearn",
    "website",
    "next",
    "method",
    "next",
    "method",
    "next",
    "method",
    "need",
    "give",
    "search",
    "string",
    "search",
    "selenium",
    "training",
    "particular",
    "website",
    "need",
    "things",
    "things",
    "let",
    "go",
    "website",
    "right",
    "let",
    "relaunch",
    "let",
    "close",
    "okay",
    "let",
    "remove",
    "let",
    "go",
    "home",
    "page",
    "first",
    "okay",
    "home",
    "page",
    "saw",
    "manual",
    "testing",
    "entered",
    "text",
    "since",
    "write",
    "script",
    "first",
    "need",
    "identify",
    "element",
    "going",
    "going",
    "say",
    "right",
    "click",
    "say",
    "inspect",
    "element",
    "right",
    "element",
    "let",
    "see",
    "attribute",
    "use",
    "finding",
    "element",
    "see",
    "id",
    "present",
    "going",
    "going",
    "simply",
    "use",
    "id",
    "copy",
    "id",
    "go",
    "back",
    "eclipse",
    "let",
    "write",
    "method",
    "first",
    "say",
    "public",
    "void",
    "give",
    "method",
    "name",
    "say",
    "search",
    "training",
    "search",
    "right",
    "need",
    "use",
    "command",
    "called",
    "driver",
    "dot",
    "find",
    "element",
    "id",
    "going",
    "use",
    "locating",
    "technique",
    "double",
    "quotes",
    "id",
    "copied",
    "website",
    "going",
    "paste",
    "okay",
    "going",
    "element",
    "need",
    "send",
    "text",
    "text",
    "going",
    "search",
    "selenium",
    "say",
    "send",
    "keys",
    "whatever",
    "text",
    "want",
    "send",
    "need",
    "give",
    "double",
    "quotes",
    "selenium",
    "done",
    "entered",
    "text",
    "entering",
    "text",
    "need",
    "click",
    "button",
    "need",
    "first",
    "know",
    "button",
    "let",
    "inspect",
    "search",
    "button",
    "okay",
    "look",
    "search",
    "button",
    "tag",
    "span",
    "class",
    "name",
    "anything",
    "right",
    "either",
    "use",
    "class",
    "name",
    "write",
    "x",
    "path",
    "since",
    "demo",
    "already",
    "used",
    "id",
    "locating",
    "technique",
    "would",
    "go",
    "ahead",
    "use",
    "x",
    "path",
    "construct",
    "x",
    "path",
    "uh",
    "copy",
    "class",
    "first",
    "okay",
    "already",
    "crow",
    "path",
    "installed",
    "firefox",
    "use",
    "crow",
    "path",
    "first",
    "test",
    "x",
    "bar",
    "say",
    "double",
    "slash",
    "let",
    "see",
    "element",
    "span",
    "tag",
    "okay",
    "use",
    "span",
    "class",
    "equal",
    "copy",
    "class",
    "name",
    "let",
    "see",
    "identify",
    "element",
    "yeah",
    "able",
    "identify",
    "use",
    "x",
    "path",
    "code",
    "go",
    "back",
    "eclipse",
    "say",
    "driver",
    "dot",
    "find",
    "element",
    "dot",
    "x",
    "path",
    "x",
    "path",
    "copied",
    "crow",
    "path",
    "going",
    "paste",
    "action",
    "need",
    "need",
    "say",
    "click",
    "done",
    "reached",
    "stage",
    "entered",
    "selenium",
    "okay",
    "clicked",
    "search",
    "button",
    "know",
    "expected",
    "result",
    "able",
    "find",
    "particular",
    "link",
    "selenium",
    "training",
    "okay",
    "able",
    "click",
    "need",
    "inspect",
    "let",
    "inspect",
    "selenium",
    "right",
    "elements",
    "particular",
    "element",
    "attributes",
    "like",
    "tag",
    "h2",
    "got",
    "class",
    "name",
    "attributes",
    "would",
    "would",
    "like",
    "use",
    "xpath",
    "time",
    "using",
    "x",
    "path",
    "going",
    "make",
    "use",
    "text",
    "functionality",
    "search",
    "particular",
    "text",
    "simply",
    "copy",
    "go",
    "crow",
    "path",
    "tag",
    "h2",
    "say",
    "simply",
    "h2",
    "okay",
    "say",
    "text",
    "equal",
    "text",
    "copied",
    "missed",
    "yes",
    "going",
    "add",
    "okay",
    "let",
    "first",
    "test",
    "whether",
    "able",
    "identify",
    "element",
    "yeah",
    "able",
    "identify",
    "see",
    "blue",
    "dotted",
    "line",
    "able",
    "show",
    "us",
    "element",
    "identified",
    "copy",
    "x",
    "path",
    "let",
    "go",
    "ide",
    "eclipse",
    "need",
    "simply",
    "say",
    "driver",
    "dot",
    "find",
    "element",
    "dot",
    "x",
    "path",
    "paste",
    "x",
    "path",
    "click",
    "operation",
    "done",
    "right",
    "technically",
    "taken",
    "steps",
    "use",
    "case",
    "written",
    "commands",
    "let",
    "add",
    "additional",
    "thing",
    "say",
    "coming",
    "page",
    "finding",
    "want",
    "uh",
    "say",
    "print",
    "title",
    "page",
    "title",
    "page",
    "hover",
    "mouse",
    "says",
    "online",
    "classroom",
    "training",
    "professional",
    "certification",
    "courses",
    "simply",
    "operations",
    "print",
    "page",
    "title",
    "console",
    "driver",
    "dot",
    "uh",
    "let",
    "sysop",
    "say",
    "sis",
    "system",
    "dot",
    "dot",
    "println",
    "okay",
    "would",
    "say",
    "let",
    "add",
    "text",
    "page",
    "title",
    "let",
    "append",
    "driver",
    "dot",
    "get",
    "title",
    "command",
    "using",
    "fetch",
    "page",
    "title",
    "done",
    "last",
    "method",
    "need",
    "add",
    "close",
    "browser",
    "right",
    "let",
    "add",
    "method",
    "say",
    "public",
    "void",
    "close",
    "browser",
    "one",
    "single",
    "command",
    "need",
    "call",
    "say",
    "driver",
    "dot",
    "quit",
    "okay",
    "need",
    "call",
    "methods",
    "public",
    "static",
    "void",
    "main",
    "let",
    "use",
    "class",
    "name",
    "going",
    "create",
    "object",
    "obj",
    "equal",
    "new",
    "class",
    "name",
    "using",
    "object",
    "first",
    "need",
    "call",
    "method",
    "launch",
    "browser",
    "call",
    "method",
    "search",
    "right",
    "call",
    "method",
    "close",
    "process",
    "done",
    "technically",
    "script",
    "ready",
    "functionality",
    "wanted",
    "cover",
    "use",
    "case",
    "tweaks",
    "need",
    "tell",
    "need",
    "example",
    "click",
    "right",
    "click",
    "search",
    "observed",
    "website",
    "took",
    "little",
    "listed",
    "selenium",
    "trainings",
    "us",
    "visually",
    "actually",
    "wait",
    "selenium",
    "training",
    "available",
    "click",
    "thing",
    "also",
    "need",
    "tell",
    "scripts",
    "need",
    "tell",
    "scripts",
    "wait",
    "start",
    "seeing",
    "selenium",
    "training",
    "appears",
    "web",
    "page",
    "multiple",
    "ways",
    "script",
    "part",
    "overall",
    "synchronization",
    "call",
    "use",
    "kind",
    "implicit",
    "explicit",
    "kind",
    "favorites",
    "since",
    "demo",
    "demo",
    "purpose",
    "going",
    "going",
    "use",
    "command",
    "called",
    "going",
    "give",
    "explicit",
    "weight",
    "say",
    "three",
    "seconds",
    "use",
    "mainly",
    "demo",
    "purposes",
    "use",
    "command",
    "command",
    "needs",
    "us",
    "handle",
    "exceptions",
    "going",
    "click",
    "add",
    "throws",
    "declaration",
    "say",
    "interrupted",
    "exception",
    "thing",
    "main",
    "function",
    "also",
    "okay",
    "let",
    "complete",
    "right",
    "done",
    "ensuring",
    "click",
    "selenium",
    "three",
    "dot",
    "training",
    "giving",
    "enough",
    "time",
    "script",
    "wait",
    "webpage",
    "shows",
    "link",
    "selenium",
    "training",
    "one",
    "thing",
    "right",
    "also",
    "since",
    "going",
    "seeing",
    "demo",
    "video",
    "recording",
    "script",
    "starts",
    "running",
    "going",
    "fast",
    "might",
    "miss",
    "saying",
    "send",
    "keys",
    "click",
    "search",
    "button",
    "us",
    "enable",
    "us",
    "see",
    "properly",
    "add",
    "explicit",
    "weights",
    "demo",
    "purpose",
    "entering",
    "keys",
    "right",
    "give",
    "simple",
    "thread",
    "dot",
    "sleep",
    "okay",
    "probably",
    "three",
    "seconds",
    "two",
    "seconds",
    "wait",
    "good",
    "enough",
    "okay",
    "three",
    "seconds",
    "wait",
    "good",
    "enough",
    "able",
    "see",
    "exactly",
    "works",
    "browser",
    "execute",
    "okay",
    "complete",
    "script",
    "ready",
    "save",
    "script",
    "simply",
    "run",
    "script",
    "run",
    "script",
    "say",
    "right",
    "click",
    "run",
    "java",
    "application",
    "okay",
    "says",
    "ask",
    "select",
    "save",
    "saved",
    "script",
    "let",
    "observe",
    "runs",
    "okay",
    "website",
    "launched",
    "selenium",
    "text",
    "entered",
    "search",
    "box",
    "clicked",
    "search",
    "okay",
    "right",
    "everything",
    "whatever",
    "wanted",
    "right",
    "since",
    "closing",
    "browser",
    "unable",
    "see",
    "whether",
    "selenium",
    "three",
    "dot",
    "training",
    "selected",
    "however",
    "given",
    "fetch",
    "title",
    "operations",
    "complete",
    "see",
    "complete",
    "operations",
    "done",
    "able",
    "see",
    "page",
    "title",
    "okay",
    "since",
    "unable",
    "see",
    "whether",
    "clicked",
    "selenium",
    "training",
    "comment",
    "close",
    "browser",
    "command",
    "okay",
    "call",
    "close",
    "browser",
    "browser",
    "remains",
    "open",
    "get",
    "see",
    "whether",
    "really",
    "find",
    "training",
    "link",
    "okay",
    "let",
    "close",
    "window",
    "need",
    "firefox",
    "window",
    "close",
    "tabs",
    "exactly",
    "execute",
    "script",
    "say",
    "run",
    "java",
    "application",
    "save",
    "file",
    "okay",
    "launched",
    "search",
    "text",
    "entered",
    "going",
    "click",
    "search",
    "button",
    "yes",
    "right",
    "got",
    "search",
    "results",
    "click",
    "selenium",
    "theodore",
    "training",
    "yes",
    "successfully",
    "able",
    "click",
    "right",
    "going",
    "close",
    "browser",
    "commented",
    "line",
    "however",
    "print",
    "us",
    "title",
    "right",
    "simple",
    "way",
    "using",
    "selenium",
    "scripts",
    "selenium",
    "grid",
    "grid",
    "used",
    "run",
    "multiple",
    "test",
    "scripts",
    "multiple",
    "machines",
    "time",
    "webdriver",
    "sequential",
    "execution",
    "real",
    "time",
    "environment",
    "always",
    "need",
    "run",
    "test",
    "cases",
    "distributed",
    "environment",
    "selenium",
    "grid",
    "comes",
    "picture",
    "grid",
    "conceptualized",
    "developed",
    "patrick",
    "main",
    "objective",
    "minimize",
    "test",
    "execution",
    "type",
    "running",
    "test",
    "parallelly",
    "design",
    "way",
    "commands",
    "distributed",
    "multiple",
    "machines",
    "want",
    "run",
    "test",
    "executed",
    "simultaneously",
    "achieve",
    "methodology",
    "course",
    "parallel",
    "execution",
    "different",
    "browsers",
    "operating",
    "system",
    "grid",
    "pretty",
    "flexible",
    "integrate",
    "many",
    "tools",
    "like",
    "say",
    "want",
    "reporting",
    "tool",
    "integrated",
    "pull",
    "reports",
    "multiple",
    "machines",
    "running",
    "test",
    "cases",
    "want",
    "present",
    "report",
    "good",
    "looking",
    "format",
    "option",
    "integrate",
    "report",
    "okay",
    "grid",
    "work",
    "grid",
    "hub",
    "node",
    "concept",
    "helps",
    "achieving",
    "parallel",
    "execution",
    "let",
    "take",
    "example",
    "say",
    "application",
    "supports",
    "browsers",
    "operating",
    "systems",
    "like",
    "picture",
    "could",
    "say",
    "one",
    "windows",
    "machine",
    "one",
    "mac",
    "machine",
    "another",
    "one",
    "say",
    "linux",
    "machine",
    "requirement",
    "run",
    "test",
    "supported",
    "browsers",
    "operating",
    "system",
    "like",
    "one",
    "depicted",
    "picture",
    "first",
    "thing",
    "configure",
    "master",
    "machine",
    "also",
    "call",
    "hub",
    "running",
    "something",
    "called",
    "selenium",
    "standalone",
    "server",
    "talent",
    "standalone",
    "server",
    "downloaded",
    "selenium",
    "hq",
    "website",
    "using",
    "server",
    "create",
    "hub",
    "configuration",
    "node",
    "create",
    "nodes",
    "specific",
    "machine",
    "requirement",
    "nodes",
    "created",
    "use",
    "server",
    "standalone",
    "selenium",
    "server",
    "create",
    "node",
    "configuration",
    "show",
    "selenium",
    "server",
    "downloaded",
    "go",
    "back",
    "selenium",
    "hq",
    "website",
    "see",
    "right",
    "top",
    "says",
    "selenium",
    "standalone",
    "server",
    "welcome",
    "everyone",
    "one",
    "another",
    "demo",
    "going",
    "see",
    "exactly",
    "installation",
    "docker",
    "windows",
    "platform",
    "specifically",
    "windows",
    "docker",
    "something",
    "available",
    "operating",
    "systems",
    "different",
    "different",
    "platforms",
    "supports",
    "unix",
    "windows",
    "platform",
    "um",
    "linux",
    "various",
    "commands",
    "installation",
    "case",
    "windows",
    "download",
    "exe",
    "file",
    "particular",
    "installer",
    "docker",
    "hub",
    "websites",
    "simply",
    "google",
    "get",
    "kind",
    "link",
    "able",
    "download",
    "package",
    "let",
    "go",
    "chrome",
    "try",
    "search",
    "windows",
    "string",
    "particular",
    "installer",
    "get",
    "link",
    "docker",
    "hub",
    "download",
    "get",
    "stable",
    "version",
    "get",
    "edge",
    "version",
    "whichever",
    "version",
    "want",
    "wish",
    "download",
    "download",
    "let",
    "go",
    "back",
    "chrome",
    "docker",
    "next",
    "windows",
    "go",
    "table",
    "go",
    "edge",
    "right",
    "also",
    "comparison",
    "difference",
    "two",
    "versions",
    "right",
    "um",
    "particular",
    "edge",
    "version",
    "something",
    "getting",
    "releases",
    "every",
    "month",
    "uh",
    "stable",
    "version",
    "getting",
    "releases",
    "every",
    "quarter",
    "much",
    "changes",
    "stable",
    "version",
    "compared",
    "edge",
    "double",
    "click",
    "installer",
    "help",
    "installation",
    "process",
    "let",
    "get",
    "started",
    "click",
    "get",
    "instable",
    "version",
    "particular",
    "installer",
    "going",
    "install",
    "going",
    "take",
    "like",
    "around",
    "300",
    "mb",
    "kind",
    "installed",
    "available",
    "installer",
    "downloaded",
    "actually",
    "go",
    "ahead",
    "uh",
    "proceed",
    "double",
    "click",
    "installer",
    "double",
    "click",
    "proceed",
    "steps",
    "like",
    "know",
    "gui",
    "going",
    "proceed",
    "steps",
    "wait",
    "10",
    "20",
    "seconds",
    "installer",
    "done",
    "double",
    "click",
    "installation",
    "proceed",
    "another",
    "thing",
    "uh",
    "huge",
    "difference",
    "installer",
    "like",
    "example",
    "case",
    "unix",
    "installer",
    "little",
    "bit",
    "less",
    "case",
    "windows",
    "gui",
    "also",
    "involved",
    "lot",
    "binaries",
    "available",
    "reason",
    "know",
    "huge",
    "size",
    "available",
    "free",
    "sure",
    "also",
    "requires",
    "windows",
    "10",
    "professional",
    "enterprise",
    "um",
    "working",
    "previous",
    "version",
    "operating",
    "systems",
    "like",
    "windows",
    "7",
    "older",
    "version",
    "called",
    "docker",
    "toolbox",
    "used",
    "call",
    "like",
    "docker",
    "toolbox",
    "earlier",
    "calling",
    "docker",
    "desktop",
    "new",
    "docker",
    "windows",
    "10",
    "support",
    "another",
    "couple",
    "seconds",
    "installer",
    "done",
    "able",
    "proceed",
    "installation",
    "let",
    "see",
    "much",
    "progress",
    "download",
    "click",
    "downloads",
    "still",
    "particular",
    "installations",
    "download",
    "going",
    "wait",
    "time",
    "uh",
    "installation",
    "done",
    "go",
    "back",
    "proceed",
    "installation",
    "couple",
    "seconds",
    "almost",
    "done",
    "click",
    "one",
    "go",
    "directory",
    "downloads",
    "double",
    "click",
    "also",
    "want",
    "installation",
    "click",
    "one",
    "also",
    "ask",
    "approval",
    "yes",
    "provide",
    "done",
    "um",
    "desktop",
    "kind",
    "gui",
    "component",
    "open",
    "start",
    "proceeding",
    "installation",
    "asking",
    "whether",
    "want",
    "add",
    "desktop",
    "shortcut",
    "desktop",
    "say",
    "okay",
    "going",
    "click",
    "ok",
    "unpack",
    "files",
    "files",
    "required",
    "docker",
    "successfully",
    "install",
    "getting",
    "unpacked",
    "take",
    "time",
    "installation",
    "lot",
    "work",
    "wait",
    "till",
    "execution",
    "installer",
    "completed",
    "installer",
    "done",
    "open",
    "command",
    "line",
    "start",
    "working",
    "docker",
    "taking",
    "time",
    "extract",
    "files",
    "asking",
    "us",
    "know",
    "close",
    "restart",
    "done",
    "able",
    "proceed",
    "know",
    "run",
    "command",
    "line",
    "docker",
    "command",
    "run",
    "give",
    "response",
    "whether",
    "docker",
    "installed",
    "see",
    "docker",
    "know",
    "something",
    "installed",
    "run",
    "like",
    "docker",
    "version",
    "able",
    "get",
    "version",
    "client",
    "restart",
    "machine",
    "moment",
    "time",
    "docker",
    "server",
    "also",
    "started",
    "particular",
    "error",
    "message",
    "go",
    "right",
    "docker",
    "daemon",
    "running",
    "installation",
    "requires",
    "restart",
    "close",
    "one",
    "go",
    "restart",
    "machine",
    "restarted",
    "way",
    "exactly",
    "go",
    "docker",
    "installation",
    "go",
    "part",
    "let",
    "begin",
    "demo",
    "installing",
    "docker",
    "ubuntu",
    "system",
    "system",
    "open",
    "terminal",
    "first",
    "thing",
    "start",
    "removing",
    "docker",
    "installation",
    "probably",
    "already",
    "present",
    "system",
    "want",
    "start",
    "scratch",
    "command",
    "sudo",
    "apt",
    "get",
    "remove",
    "docker",
    "docker",
    "engine",
    "docker",
    "dot",
    "io",
    "enter",
    "password",
    "docker",
    "removed",
    "start",
    "scratch",
    "install",
    "docker",
    "clear",
    "screen",
    "okay",
    "install",
    "docker",
    "let",
    "ensure",
    "softwares",
    "system",
    "currently",
    "latest",
    "date",
    "sudo",
    "apt",
    "get",
    "update",
    "great",
    "done",
    "next",
    "thing",
    "actually",
    "install",
    "docker",
    "type",
    "sudo",
    "apt",
    "get",
    "install",
    "docker",
    "see",
    "error",
    "occurred",
    "sometimes",
    "possible",
    "due",
    "environment",
    "machine",
    "working",
    "particular",
    "command",
    "work",
    "case",
    "always",
    "another",
    "command",
    "start",
    "type",
    "docker",
    "install",
    "give",
    "command",
    "use",
    "install",
    "docker",
    "says",
    "sudo",
    "apt",
    "install",
    "docker",
    "dot",
    "io",
    "command",
    "need",
    "execute",
    "install",
    "docker",
    "execute",
    "sudo",
    "snap",
    "install",
    "docker",
    "sudo",
    "apt",
    "install",
    "docker",
    "dot",
    "io",
    "first",
    "install",
    "docker",
    "done",
    "sudo",
    "snap",
    "install",
    "docker",
    "snap",
    "install",
    "docker",
    "installs",
    "newly",
    "created",
    "snap",
    "package",
    "basically",
    "dependencies",
    "docker",
    "install",
    "course",
    "since",
    "installation",
    "process",
    "entire",
    "docker",
    "io",
    "take",
    "time",
    "great",
    "docker",
    "installed",
    "next",
    "thing",
    "mentioned",
    "earlier",
    "need",
    "install",
    "dependency",
    "packages",
    "command",
    "sudo",
    "snap",
    "install",
    "docker",
    "enter",
    "password",
    "completed",
    "installation",
    "process",
    "docker",
    "perform",
    "stages",
    "test",
    "installation",
    "done",
    "right",
    "move",
    "testing",
    "docker",
    "let",
    "check",
    "version",
    "installed",
    "command",
    "docker",
    "version",
    "see",
    "docker",
    "version",
    "ce",
    "installed",
    "next",
    "thing",
    "pull",
    "image",
    "docker",
    "hub",
    "docker",
    "run",
    "hello",
    "world",
    "hello",
    "world",
    "darker",
    "image",
    "present",
    "docker",
    "hub",
    "docker",
    "hub",
    "basically",
    "repository",
    "find",
    "online",
    "command",
    "docker",
    "image",
    "hello",
    "world",
    "pulled",
    "onto",
    "system",
    "let",
    "see",
    "actually",
    "present",
    "system",
    "command",
    "check",
    "sudo",
    "docker",
    "images",
    "see",
    "hello",
    "world",
    "repository",
    "present",
    "system",
    "currently",
    "image",
    "successfully",
    "pulled",
    "onto",
    "system",
    "means",
    "docker",
    "working",
    "try",
    "another",
    "command",
    "sudo",
    "docker",
    "ps",
    "minus",
    "displays",
    "containers",
    "pulled",
    "far",
    "see",
    "three",
    "hello",
    "world",
    "images",
    "displayed",
    "exited",
    "state",
    "demo",
    "previously",
    "two",
    "hello",
    "worlds",
    "created",
    "two",
    "minutes",
    "ago",
    "also",
    "displayed",
    "first",
    "hello",
    "world",
    "created",
    "minute",
    "ago",
    "one",
    "demo",
    "probably",
    "noticed",
    "hello",
    "world",
    "images",
    "containers",
    "exited",
    "state",
    "give",
    "option",
    "docker",
    "ps",
    "minus",
    "minus",
    "stands",
    "displays",
    "containers",
    "whether",
    "exited",
    "running",
    "state",
    "want",
    "see",
    "containers",
    "running",
    "state",
    "simply",
    "execute",
    "sudo",
    "docker",
    "ps",
    "sudo",
    "docker",
    "yes",
    "see",
    "container",
    "visible",
    "none",
    "running",
    "state",
    "presentation",
    "going",
    "go",
    "number",
    "key",
    "things",
    "going",
    "compare",
    "docker",
    "versus",
    "traditional",
    "virtual",
    "machines",
    "differences",
    "want",
    "choose",
    "docker",
    "virtual",
    "environment",
    "go",
    "advantages",
    "working",
    "docker",
    "structure",
    "would",
    "build",
    "docker",
    "environment",
    "structure",
    "dig",
    "components",
    "advanced",
    "components",
    "within",
    "docker",
    "end",
    "presentation",
    "go",
    "basic",
    "commands",
    "show",
    "basic",
    "commands",
    "used",
    "live",
    "demo",
    "said",
    "let",
    "get",
    "started",
    "let",
    "first",
    "compare",
    "docker",
    "traditional",
    "virtual",
    "machine",
    "architecture",
    "left",
    "right",
    "traditional",
    "virtual",
    "machine",
    "versus",
    "darker",
    "environment",
    "things",
    "probably",
    "see",
    "immediately",
    "big",
    "differences",
    "one",
    "virtual",
    "environment",
    "hypervisor",
    "layer",
    "whereas",
    "docker",
    "environment",
    "docker",
    "engine",
    "layer",
    "addition",
    "additional",
    "layers",
    "within",
    "virtual",
    "machine",
    "really",
    "start",
    "compounding",
    "creating",
    "significant",
    "differences",
    "docker",
    "environment",
    "virtual",
    "machine",
    "environment",
    "virtual",
    "machine",
    "actual",
    "memory",
    "usage",
    "high",
    "whereas",
    "docker",
    "environment",
    "memory",
    "usage",
    "low",
    "look",
    "performance",
    "virtual",
    "machines",
    "start",
    "building",
    "particularly",
    "one",
    "virtual",
    "machine",
    "server",
    "performance",
    "starts",
    "degrading",
    "starts",
    "getting",
    "poorer",
    "whereas",
    "docker",
    "performance",
    "always",
    "stays",
    "really",
    "good",
    "largely",
    "due",
    "lightweight",
    "architecture",
    "used",
    "construct",
    "docker",
    "containers",
    "look",
    "portability",
    "virtual",
    "machines",
    "terrible",
    "portability",
    "still",
    "dependent",
    "host",
    "operating",
    "system",
    "lot",
    "problems",
    "happen",
    "using",
    "virtual",
    "machines",
    "portability",
    "contrast",
    "docker",
    "designed",
    "portability",
    "actually",
    "build",
    "solutions",
    "docker",
    "container",
    "environment",
    "guarantee",
    "solution",
    "work",
    "built",
    "matter",
    "hosted",
    "finally",
    "boot",
    "time",
    "bit",
    "time",
    "virtual",
    "machine",
    "fairly",
    "slow",
    "comparison",
    "boot",
    "time",
    "docker",
    "environment",
    "almost",
    "instantaneous",
    "look",
    "little",
    "bit",
    "detail",
    "one",
    "challenges",
    "virtual",
    "machine",
    "unused",
    "memory",
    "within",
    "environment",
    "reallocate",
    "memory",
    "set",
    "environment",
    "nine",
    "gigs",
    "memory",
    "used",
    "six",
    "gigs",
    "free",
    "ca",
    "anything",
    "though",
    "whole",
    "nine",
    "gig",
    "allocated",
    "virtual",
    "machine",
    "contrast",
    "docker",
    "nine",
    "gigs",
    "six",
    "gigs",
    "becomes",
    "free",
    "free",
    "memory",
    "reallocated",
    "reused",
    "across",
    "containers",
    "used",
    "within",
    "docker",
    "environment",
    "another",
    "challenge",
    "running",
    "multiple",
    "virtual",
    "machines",
    "single",
    "environment",
    "lead",
    "instability",
    "performance",
    "issues",
    "whereas",
    "docker",
    "designed",
    "run",
    "multiple",
    "containers",
    "environment",
    "actually",
    "gets",
    "better",
    "containers",
    "run",
    "hosted",
    "single",
    "docker",
    "engine",
    "portability",
    "issues",
    "virtual",
    "machine",
    "software",
    "work",
    "one",
    "machine",
    "move",
    "vm",
    "another",
    "machine",
    "suddenly",
    "software",
    "wo",
    "work",
    "dependencies",
    "inherited",
    "correctly",
    "whereas",
    "docker",
    "designed",
    "specifically",
    "able",
    "run",
    "across",
    "multiple",
    "environments",
    "deployed",
    "easily",
    "across",
    "systems",
    "actual",
    "boot",
    "time",
    "vm",
    "takes",
    "long",
    "time",
    "took",
    "minutes",
    "contrast",
    "milliseconds",
    "takes",
    "docker",
    "environment",
    "boot",
    "let",
    "dig",
    "docker",
    "actually",
    "allows",
    "great",
    "performance",
    "improvements",
    "traditional",
    "vm",
    "environment",
    "docker",
    "os",
    "virtualized",
    "software",
    "platform",
    "allows",
    "organizations",
    "really",
    "easily",
    "create",
    "deploy",
    "run",
    "applications",
    "called",
    "docker",
    "containers",
    "dependencies",
    "within",
    "container",
    "easily",
    "container",
    "really",
    "lightweight",
    "package",
    "instructions",
    "dependencies",
    "frameworks",
    "libraries",
    "bins",
    "etc",
    "within",
    "container",
    "container",
    "moved",
    "environment",
    "environment",
    "easily",
    "look",
    "devops",
    "lifecycle",
    "place",
    "docker",
    "really",
    "shines",
    "deployment",
    "actually",
    "point",
    "deploying",
    "solution",
    "want",
    "able",
    "guarantee",
    "code",
    "tested",
    "actually",
    "work",
    "production",
    "environment",
    "addition",
    "often",
    "find",
    "actually",
    "building",
    "code",
    "actually",
    "testing",
    "code",
    "container",
    "running",
    "solution",
    "stages",
    "also",
    "really",
    "good",
    "plus",
    "happens",
    "people",
    "building",
    "code",
    "testing",
    "code",
    "able",
    "validate",
    "work",
    "environment",
    "would",
    "used",
    "production",
    "environment",
    "really",
    "use",
    "docker",
    "multiple",
    "stages",
    "within",
    "devops",
    "cycle",
    "becomes",
    "really",
    "valuable",
    "deployment",
    "stage",
    "let",
    "look",
    "key",
    "advantages",
    "docker",
    "things",
    "already",
    "covered",
    "rapid",
    "deployment",
    "really",
    "fast",
    "environment",
    "highly",
    "portable",
    "designed",
    "mind",
    "efficiencies",
    "see",
    "allow",
    "run",
    "multiple",
    "docker",
    "containers",
    "single",
    "environment",
    "compared",
    "traditional",
    "vm",
    "environments",
    "configuration",
    "scripted",
    "language",
    "called",
    "yaml",
    "allows",
    "able",
    "write",
    "describe",
    "docker",
    "environment",
    "want",
    "create",
    "turn",
    "allows",
    "able",
    "scale",
    "environment",
    "quickly",
    "advantages",
    "probably",
    "one",
    "critical",
    "type",
    "work",
    "today",
    "security",
    "ensure",
    "environment",
    "running",
    "highly",
    "secure",
    "highly",
    "scalable",
    "environment",
    "pleased",
    "say",
    "docker",
    "takes",
    "security",
    "seriously",
    "see",
    "one",
    "key",
    "talents",
    "actual",
    "architecture",
    "system",
    "implementing",
    "let",
    "look",
    "docker",
    "actually",
    "works",
    "within",
    "environment",
    "docker",
    "works",
    "called",
    "docker",
    "engine",
    "docker",
    "engine",
    "really",
    "comprised",
    "two",
    "key",
    "elements",
    "server",
    "client",
    "communication",
    "via",
    "two",
    "via",
    "rest",
    "api",
    "server",
    "imagine",
    "instructions",
    "communicated",
    "client",
    "instructs",
    "client",
    "connection",
    "client",
    "server",
    "communication",
    "via",
    "rest",
    "api",
    "older",
    "systems",
    "take",
    "advantage",
    "docker",
    "toolbox",
    "allows",
    "go",
    "ahead",
    "control",
    "docker",
    "engine",
    "docker",
    "machine",
    "docker",
    "compose",
    "kitematic",
    "let",
    "go",
    "actual",
    "root",
    "components",
    "though",
    "docker",
    "let",
    "look",
    "key",
    "components",
    "four",
    "components",
    "going",
    "go",
    "docker",
    "clients",
    "server",
    "docker",
    "images",
    "docker",
    "registry",
    "docker",
    "container",
    "going",
    "step",
    "one",
    "one",
    "let",
    "look",
    "docker",
    "clients",
    "server",
    "first",
    "docker",
    "client",
    "server",
    "command",
    "line",
    "instructed",
    "solution",
    "would",
    "use",
    "terminal",
    "mac",
    "command",
    "line",
    "pc",
    "linux",
    "system",
    "able",
    "issue",
    "commands",
    "docker",
    "daemon",
    "communication",
    "docker",
    "client",
    "docker",
    "host",
    "via",
    "rest",
    "api",
    "communication",
    "docker",
    "pull",
    "command",
    "would",
    "send",
    "instruction",
    "daemon",
    "would",
    "form",
    "interaction",
    "pulling",
    "correct",
    "components",
    "image",
    "container",
    "registry",
    "docker",
    "client",
    "docker",
    "daemon",
    "actually",
    "service",
    "actually",
    "performs",
    "sorts",
    "operating",
    "performance",
    "services",
    "imagine",
    "docker",
    "damon",
    "constantly",
    "listening",
    "across",
    "rest",
    "api",
    "see",
    "needs",
    "perform",
    "specific",
    "requests",
    "want",
    "trigger",
    "start",
    "whole",
    "process",
    "want",
    "use",
    "command",
    "dockered",
    "within",
    "docker",
    "daemon",
    "start",
    "performances",
    "docker",
    "host",
    "actually",
    "runs",
    "docker",
    "daemon",
    "registry",
    "let",
    "look",
    "actual",
    "structure",
    "docker",
    "image",
    "docker",
    "image",
    "template",
    "contains",
    "instructions",
    "docker",
    "container",
    "template",
    "written",
    "language",
    "called",
    "yaml",
    "yaml",
    "stands",
    "yet",
    "another",
    "markup",
    "language",
    "easy",
    "learn",
    "docker",
    "image",
    "built",
    "within",
    "yaml",
    "file",
    "hosted",
    "file",
    "docket",
    "registry",
    "image",
    "really",
    "comprised",
    "several",
    "key",
    "layers",
    "start",
    "base",
    "layer",
    "typically",
    "base",
    "image",
    "instance",
    "base",
    "operating",
    "system",
    "ubuntu",
    "layer",
    "dependencies",
    "would",
    "comprise",
    "instructions",
    "file",
    "would",
    "become",
    "docker",
    "file",
    "let",
    "let",
    "go",
    "look",
    "one",
    "sets",
    "instructions",
    "would",
    "look",
    "like",
    "four",
    "layers",
    "instructions",
    "pull",
    "run",
    "command",
    "actually",
    "look",
    "like",
    "layers",
    "break",
    "creates",
    "layer",
    "based",
    "ubuntu",
    "adding",
    "files",
    "docker",
    "repository",
    "onto",
    "base",
    "command",
    "base",
    "layer",
    "want",
    "able",
    "say",
    "okay",
    "wrong",
    "commands",
    "actually",
    "build",
    "container",
    "within",
    "environment",
    "want",
    "able",
    "command",
    "line",
    "actually",
    "executes",
    "something",
    "within",
    "container",
    "instance",
    "command",
    "run",
    "python",
    "one",
    "things",
    "see",
    "set",
    "multiple",
    "containers",
    "new",
    "container",
    "new",
    "layer",
    "new",
    "images",
    "within",
    "docker",
    "environment",
    "container",
    "completely",
    "separate",
    "containers",
    "within",
    "docker",
    "environment",
    "able",
    "create",
    "separate",
    "read",
    "write",
    "instructions",
    "within",
    "layer",
    "interesting",
    "delete",
    "layer",
    "layer",
    "also",
    "get",
    "deleted",
    "happens",
    "pull",
    "layer",
    "something",
    "changed",
    "decor",
    "image",
    "interesting",
    "actual",
    "main",
    "image",
    "modified",
    "copied",
    "image",
    "modify",
    "locally",
    "never",
    "modify",
    "actual",
    "base",
    "image",
    "callouts",
    "components",
    "within",
    "docket",
    "image",
    "base",
    "layer",
    "format",
    "layers",
    "combined",
    "union",
    "file",
    "system",
    "create",
    "single",
    "image",
    "union",
    "file",
    "system",
    "saves",
    "memory",
    "space",
    "avoiding",
    "duplication",
    "files",
    "allows",
    "file",
    "system",
    "appear",
    "writable",
    "without",
    "modifying",
    "file",
    "known",
    "copy",
    "write",
    "actual",
    "base",
    "layers",
    "read",
    "able",
    "get",
    "around",
    "structure",
    "within",
    "docker",
    "container",
    "docker",
    "environment",
    "uses",
    "known",
    "copy",
    "write",
    "strategy",
    "within",
    "images",
    "containers",
    "allows",
    "actually",
    "copy",
    "files",
    "better",
    "efficiency",
    "across",
    "entire",
    "container",
    "environment",
    "copy",
    "write",
    "strategy",
    "make",
    "docker",
    "super",
    "efficient",
    "able",
    "time",
    "keep",
    "reducing",
    "amount",
    "disk",
    "space",
    "using",
    "amount",
    "performance",
    "taking",
    "server",
    "really",
    "key",
    "element",
    "docker",
    "constant",
    "ability",
    "able",
    "keep",
    "improving",
    "efficiency",
    "within",
    "actual",
    "system",
    "right",
    "let",
    "go",
    "item",
    "number",
    "three",
    "docker",
    "registry",
    "docker",
    "registry",
    "place",
    "would",
    "host",
    "distribute",
    "different",
    "types",
    "images",
    "created",
    "want",
    "used",
    "within",
    "environment",
    "actual",
    "repository",
    "collection",
    "docker",
    "images",
    "docker",
    "images",
    "built",
    "instructions",
    "would",
    "write",
    "yaml",
    "easily",
    "stored",
    "shared",
    "actually",
    "actually",
    "associate",
    "specific",
    "name",
    "tags",
    "actual",
    "docker",
    "images",
    "easy",
    "people",
    "able",
    "find",
    "share",
    "image",
    "within",
    "docker",
    "registry",
    "one",
    "things",
    "actually",
    "see",
    "go",
    "demos",
    "actually",
    "see",
    "us",
    "actually",
    "using",
    "tag",
    "name",
    "see",
    "alpha",
    "numeric",
    "identifying",
    "actually",
    "use",
    "actually",
    "create",
    "actual",
    "container",
    "one",
    "things",
    "start",
    "would",
    "manage",
    "registry",
    "actually",
    "use",
    "publicly",
    "accessible",
    "docker",
    "hub",
    "registry",
    "available",
    "anybody",
    "also",
    "create",
    "registry",
    "use",
    "internally",
    "actual",
    "registry",
    "create",
    "internally",
    "public",
    "private",
    "images",
    "create",
    "may",
    "various",
    "reasons",
    "structure",
    "environment",
    "actual",
    "commands",
    "would",
    "use",
    "actually",
    "connect",
    "registry",
    "push",
    "pull",
    "push",
    "actually",
    "push",
    "new",
    "container",
    "environment",
    "created",
    "local",
    "manager",
    "node",
    "remote",
    "registry",
    "pool",
    "allows",
    "pull",
    "new",
    "client",
    "created",
    "shared",
    "full",
    "command",
    "pulls",
    "retrieves",
    "docket",
    "image",
    "docker",
    "registry",
    "makes",
    "easy",
    "people",
    "share",
    "different",
    "images",
    "consistently",
    "across",
    "teams",
    "push",
    "command",
    "allows",
    "take",
    "new",
    "command",
    "created",
    "new",
    "container",
    "created",
    "push",
    "registry",
    "whether",
    "docker",
    "hub",
    "whether",
    "private",
    "registry",
    "allow",
    "shared",
    "across",
    "teams",
    "key",
    "know",
    "docker",
    "registry",
    "deleting",
    "repository",
    "reversible",
    "action",
    "delete",
    "repository",
    "gone",
    "let",
    "go",
    "final",
    "stage",
    "actual",
    "docker",
    "container",
    "docker",
    "container",
    "um",
    "executable",
    "package",
    "applications",
    "dependencies",
    "bundled",
    "together",
    "gives",
    "instructions",
    "would",
    "solution",
    "looking",
    "run",
    "actually",
    "really",
    "lightweight",
    "redundancy",
    "built",
    "structure",
    "container",
    "container",
    "inherently",
    "also",
    "extremely",
    "portable",
    "really",
    "good",
    "running",
    "container",
    "though",
    "run",
    "completely",
    "isolation",
    "able",
    "share",
    "easily",
    "grouped",
    "group",
    "guaranteed",
    "even",
    "running",
    "container",
    "going",
    "impacted",
    "host",
    "os",
    "peculiarities",
    "unique",
    "setups",
    "would",
    "vm",
    "environment",
    "actual",
    "memory",
    "docker",
    "environment",
    "shared",
    "across",
    "multiple",
    "containers",
    "really",
    "useful",
    "typically",
    "vm",
    "would",
    "defined",
    "amount",
    "memory",
    "vm",
    "environment",
    "challenge",
    "start",
    "running",
    "though",
    "ca",
    "share",
    "memory",
    "whereas",
    "docker",
    "easily",
    "share",
    "memory",
    "um",
    "single",
    "environment",
    "across",
    "multiple",
    "containers",
    "actual",
    "container",
    "built",
    "using",
    "docket",
    "images",
    "commands",
    "actually",
    "run",
    "images",
    "run",
    "command",
    "guy",
    "go",
    "basic",
    "structure",
    "would",
    "run",
    "docket",
    "image",
    "go",
    "terminal",
    "window",
    "would",
    "write",
    "docker",
    "run",
    "redis",
    "would",
    "run",
    "container",
    "called",
    "redis",
    "going",
    "go",
    "redis",
    "image",
    "locally",
    "installed",
    "pull",
    "registry",
    "new",
    "docker",
    "container",
    "redis",
    "available",
    "within",
    "environment",
    "actually",
    "start",
    "using",
    "let",
    "look",
    "containers",
    "lightweight",
    "lightweight",
    "really",
    "able",
    "get",
    "away",
    "additional",
    "layers",
    "virtualization",
    "within",
    "vms",
    "biggest",
    "one",
    "hypervisor",
    "need",
    "run",
    "host",
    "operating",
    "system",
    "two",
    "big",
    "big",
    "elements",
    "get",
    "rid",
    "great",
    "let",
    "look",
    "advanced",
    "concepts",
    "within",
    "docker",
    "environment",
    "going",
    "look",
    "two",
    "advanced",
    "components",
    "one",
    "docker",
    "compose",
    "second",
    "docker",
    "swamp",
    "let",
    "look",
    "docker",
    "compose",
    "docker",
    "compose",
    "really",
    "designed",
    "running",
    "multiple",
    "containers",
    "single",
    "service",
    "running",
    "container",
    "isolation",
    "allowing",
    "containers",
    "interact",
    "stated",
    "earlier",
    "would",
    "actually",
    "write",
    "compose",
    "environment",
    "using",
    "yaml",
    "language",
    "files",
    "would",
    "create",
    "would",
    "use",
    "something",
    "like",
    "docker",
    "compose",
    "example",
    "would",
    "running",
    "apache",
    "server",
    "sql",
    "database",
    "need",
    "create",
    "additional",
    "containers",
    "run",
    "additional",
    "services",
    "without",
    "need",
    "start",
    "one",
    "separately",
    "would",
    "write",
    "set",
    "files",
    "using",
    "docker",
    "compose",
    "able",
    "help",
    "balance",
    "demand",
    "let",
    "look",
    "docker",
    "swarm",
    "docker",
    "swarm",
    "service",
    "allows",
    "able",
    "control",
    "multiple",
    "docker",
    "environments",
    "within",
    "single",
    "platform",
    "actually",
    "looking",
    "within",
    "docker",
    "swamp",
    "treating",
    "node",
    "docker",
    "daemon",
    "actually",
    "api",
    "interacting",
    "nodes",
    "two",
    "types",
    "node",
    "going",
    "getting",
    "comfortable",
    "working",
    "one",
    "manager",
    "node",
    "second",
    "worker",
    "node",
    "expect",
    "manager",
    "node",
    "one",
    "sending",
    "instructions",
    "worker",
    "nodes",
    "communication",
    "happening",
    "communication",
    "allows",
    "imagine",
    "node",
    "able",
    "manage",
    "instructions",
    "listen",
    "receive",
    "updates",
    "working",
    "node",
    "anything",
    "happens",
    "within",
    "environment",
    "imagine",
    "node",
    "react",
    "adjust",
    "architecture",
    "worker",
    "node",
    "always",
    "sync",
    "really",
    "great",
    "large",
    "scaled",
    "environments",
    "finally",
    "let",
    "go",
    "basic",
    "commands",
    "would",
    "use",
    "within",
    "docker",
    "gone",
    "basic",
    "commands",
    "actually",
    "show",
    "demo",
    "actually",
    "use",
    "well",
    "going",
    "go",
    "probably",
    "first",
    "command",
    "install",
    "docker",
    "yam",
    "installed",
    "yum",
    "install",
    "docker",
    "install",
    "docker",
    "onto",
    "computer",
    "start",
    "docker",
    "daemon",
    "want",
    "system",
    "ctl",
    "start",
    "docker",
    "command",
    "remove",
    "docker",
    "image",
    "docker",
    "rmi",
    "image",
    "id",
    "image",
    "name",
    "actual",
    "alphanumeric",
    "id",
    "number",
    "want",
    "uh",
    "grab",
    "command",
    "line",
    "download",
    "new",
    "image",
    "docker",
    "pull",
    "name",
    "image",
    "want",
    "pull",
    "default",
    "going",
    "pulling",
    "docker",
    "default",
    "registry",
    "connect",
    "docker",
    "daemon",
    "download",
    "images",
    "registry",
    "client",
    "command",
    "line",
    "run",
    "image",
    "docker",
    "run",
    "image",
    "id",
    "wanted",
    "pull",
    "specifically",
    "docker",
    "hub",
    "would",
    "docker",
    "pull",
    "image",
    "name",
    "colon",
    "tag",
    "pull",
    "build",
    "image",
    "docker",
    "file",
    "would",
    "docker",
    "build",
    "dash",
    "image",
    "name",
    "colon",
    "tag",
    "shut",
    "container",
    "docker",
    "stop",
    "container",
    "id",
    "access",
    "running",
    "container",
    "docker",
    "exec",
    "container",
    "id",
    "bash",
    "gone",
    "different",
    "commands",
    "let",
    "actually",
    "see",
    "would",
    "actually",
    "look",
    "going",
    "go",
    "ahead",
    "demo",
    "welcome",
    "demo",
    "going",
    "go",
    "ahead",
    "put",
    "together",
    "different",
    "commands",
    "outlined",
    "presentation",
    "docker",
    "uh",
    "first",
    "list",
    "docker",
    "images",
    "sudo",
    "docker",
    "images",
    "enter",
    "password",
    "list",
    "images",
    "created",
    "already",
    "three",
    "images",
    "let",
    "go",
    "ahead",
    "pull",
    "docker",
    "image",
    "go",
    "ahead",
    "type",
    "sudo",
    "docker",
    "actually",
    "want",
    "image",
    "want",
    "select",
    "pull",
    "name",
    "image",
    "want",
    "pull",
    "going",
    "sequel",
    "default",
    "actually",
    "going",
    "go",
    "ahead",
    "use",
    "latest",
    "sequel",
    "command",
    "sql",
    "image",
    "go",
    "ahead",
    "pull",
    "image",
    "going",
    "take",
    "minutes",
    "depending",
    "internet",
    "connection",
    "speed",
    "kind",
    "large",
    "file",
    "downloaded",
    "wait",
    "download",
    "see",
    "others",
    "completed",
    "waiting",
    "last",
    "file",
    "download",
    "almost",
    "done",
    "going",
    "go",
    "ahead",
    "actually",
    "run",
    "docking",
    "container",
    "create",
    "new",
    "container",
    "using",
    "image",
    "downloaded",
    "wait",
    "download",
    "first",
    "right",
    "image",
    "pulled",
    "docker",
    "hub",
    "let",
    "go",
    "ahead",
    "create",
    "new",
    "docker",
    "container",
    "going",
    "sudo",
    "docker",
    "run",
    "dash",
    "dash",
    "p",
    "music",
    "colon",
    "80",
    "colon",
    "put",
    "sequel",
    "call",
    "latest",
    "latest",
    "version",
    "new",
    "token",
    "shows",
    "new",
    "docker",
    "container",
    "created",
    "let",
    "go",
    "ahead",
    "see",
    "container",
    "running",
    "sudo",
    "docker",
    "ps",
    "list",
    "running",
    "containers",
    "see",
    "container",
    "listed",
    "means",
    "probably",
    "running",
    "let",
    "go",
    "ahead",
    "list",
    "images",
    "within",
    "docker",
    "see",
    "whether",
    "actually",
    "listed",
    "yes",
    "see",
    "new",
    "container",
    "sql",
    "latest",
    "created",
    "36",
    "seconds",
    "ago",
    "exit",
    "mode",
    "change",
    "status",
    "actually",
    "running",
    "let",
    "change",
    "running",
    "state",
    "sudo",
    "docker",
    "run",
    "dash",
    "dash",
    "dash",
    "name",
    "name",
    "sl",
    "sql",
    "sequel",
    "slash",
    "spin",
    "slash",
    "flash",
    "going",
    "route",
    "exit",
    "list",
    "docking",
    "containers",
    "see",
    "active",
    "container",
    "sudo",
    "docker",
    "start",
    "start",
    "scene",
    "see",
    "running",
    "state",
    "excellent",
    "see",
    "updated",
    "six",
    "seconds",
    "ago",
    "gon",
    "na",
    "go",
    "ahead",
    "gon",
    "na",
    "clear",
    "screen",
    "okay",
    "want",
    "remove",
    "docker",
    "container",
    "going",
    "check",
    "list",
    "images",
    "sudo",
    "docker",
    "images",
    "images",
    "sql",
    "listed",
    "want",
    "delete",
    "sql",
    "going",
    "type",
    "sudo",
    "docker",
    "image",
    "mysql",
    "run",
    "command",
    "find",
    "image",
    "image",
    "oh",
    "okay",
    "actually",
    "go",
    "see",
    "image",
    "gone",
    "removed",
    "excellent",
    "exactly",
    "wanted",
    "see",
    "also",
    "delete",
    "image",
    "image",
    "id",
    "well",
    "however",
    "image",
    "running",
    "active",
    "kill",
    "image",
    "first",
    "go",
    "ahead",
    "going",
    "select",
    "image",
    "id",
    "copy",
    "going",
    "replace",
    "wo",
    "able",
    "actually",
    "run",
    "correctly",
    "image",
    "active",
    "stop",
    "image",
    "kill",
    "running",
    "state",
    "sudo",
    "darker",
    "kill",
    "kill",
    "sl",
    "kill",
    "container",
    "see",
    "container",
    "gone",
    "delete",
    "image",
    "going",
    "image",
    "going",
    "image",
    "id",
    "easy",
    "peasy",
    "okay",
    "let",
    "go",
    "ahead",
    "onto",
    "next",
    "exercise",
    "two",
    "listed",
    "uh",
    "containers",
    "gone",
    "let",
    "go",
    "next",
    "exercise",
    "final",
    "exercise",
    "actually",
    "create",
    "batch",
    "image",
    "batch",
    "http",
    "image",
    "let",
    "go",
    "ahead",
    "write",
    "going",
    "docker",
    "run",
    "dash",
    "dash",
    "dash",
    "name",
    "white",
    "going",
    "name",
    "http",
    "service",
    "dash",
    "p",
    "8080",
    "colon",
    "80",
    "dash",
    "v",
    "open",
    "quotes",
    "dollar",
    "sign",
    "pwd",
    "close",
    "quotes",
    "colon",
    "slash",
    "usr",
    "slash",
    "local",
    "slash",
    "apache2",
    "slash",
    "htdocs",
    "slash",
    "httpd",
    "semicolon",
    "run",
    "put",
    "password",
    "uh",
    "see",
    "port",
    "already",
    "used",
    "let",
    "go",
    "ahead",
    "see",
    "ports",
    "let",
    "go",
    "see",
    "change",
    "port",
    "see",
    "ports",
    "running",
    "let",
    "sudo",
    "images",
    "see",
    "ports",
    "used",
    "either",
    "port",
    "name",
    "put",
    "correctly",
    "sudo",
    "docker",
    "images",
    "ps",
    "pseudo",
    "docker",
    "yep",
    "let",
    "port",
    "80",
    "clear",
    "screen",
    "going",
    "change",
    "container",
    "name",
    "think",
    "actually",
    "wrong",
    "container",
    "name",
    "let",
    "go",
    "change",
    "paste",
    "voila",
    "go",
    "working",
    "double",
    "check",
    "make",
    "sure",
    "everything",
    "working",
    "correctly",
    "go",
    "web",
    "browser",
    "type",
    "soon",
    "firefox",
    "opens",
    "type",
    "localhost",
    "colon",
    "8080",
    "port",
    "created",
    "list",
    "files",
    "shows",
    "server",
    "running",
    "today",
    "looking",
    "installation",
    "tool",
    "chef",
    "probably",
    "already",
    "know",
    "chef",
    "configuration",
    "management",
    "tool",
    "basically",
    "means",
    "chef",
    "tool",
    "automate",
    "entire",
    "process",
    "configuring",
    "multiple",
    "systems",
    "also",
    "comes",
    "variety",
    "functionalities",
    "check",
    "video",
    "chef",
    "chef",
    "tutorial",
    "move",
    "installation",
    "process",
    "let",
    "explain",
    "brief",
    "architecture",
    "share",
    "chef",
    "three",
    "components",
    "workstation",
    "system",
    "admin",
    "sits",
    "writes",
    "configuration",
    "files",
    "second",
    "system",
    "server",
    "server",
    "configuration",
    "files",
    "stored",
    "finally",
    "client",
    "node",
    "systems",
    "systems",
    "require",
    "configuration",
    "number",
    "clients",
    "demo",
    "keep",
    "simple",
    "one",
    "client",
    "using",
    "oracle",
    "vm",
    "virtualbox",
    "manager",
    "see",
    "two",
    "machines",
    "master",
    "node",
    "centos",
    "7",
    "machines",
    "server",
    "using",
    "service",
    "cloud",
    "let",
    "begin",
    "let",
    "look",
    "master",
    "system",
    "first",
    "master",
    "system",
    "terminals",
    "open",
    "terminal",
    "color",
    "black",
    "background",
    "green",
    "text",
    "note",
    "system",
    "terminal",
    "black",
    "background",
    "white",
    "text",
    "differentiate",
    "start",
    "master",
    "system",
    "first",
    "thing",
    "need",
    "need",
    "download",
    "chef",
    "dk",
    "write",
    "w",
    "get",
    "command",
    "downloading",
    "go",
    "browser",
    "type",
    "chef",
    "dk",
    "first",
    "link",
    "different",
    "versions",
    "chef",
    "dk",
    "depending",
    "operating",
    "system",
    "using",
    "need",
    "select",
    "appropriate",
    "one",
    "using",
    "red",
    "hat",
    "enterprise",
    "version",
    "number",
    "seven",
    "using",
    "centos",
    "7",
    "link",
    "downloading",
    "chef",
    "dk",
    "copy",
    "link",
    "go",
    "back",
    "terminal",
    "paste",
    "chef",
    "dk",
    "downloaded",
    "take",
    "right",
    "download",
    "chef",
    "dk",
    "next",
    "step",
    "install",
    "system",
    "swash",
    "chef",
    "dk",
    "downloaded",
    "let",
    "install",
    "guys",
    "version",
    "chef",
    "dk",
    "downloaded",
    "make",
    "sure",
    "exactly",
    "type",
    "great",
    "chef",
    "dk",
    "installed",
    "basically",
    "installation",
    "workstation",
    "done",
    "right",
    "understand",
    "flow",
    "also",
    "write",
    "sample",
    "recipe",
    "workstation",
    "let",
    "first",
    "create",
    "folder",
    "folder",
    "name",
    "chef",
    "repo",
    "basically",
    "chef",
    "repository",
    "let",
    "move",
    "folder",
    "okay",
    "next",
    "need",
    "mentioned",
    "earlier",
    "recipes",
    "within",
    "cookbook",
    "let",
    "create",
    "folder",
    "hold",
    "cookbooks",
    "let",
    "move",
    "okay",
    "next",
    "stage",
    "create",
    "actual",
    "cookbook",
    "within",
    "recipe",
    "command",
    "creating",
    "cookbook",
    "chef",
    "generate",
    "cookbook",
    "sample",
    "samples",
    "name",
    "cookbook",
    "guys",
    "please",
    "notice",
    "cook",
    "books",
    "directory",
    "created",
    "hold",
    "cookbooks",
    "cookbook",
    "key",
    "word",
    "sample",
    "one",
    "cookbook",
    "creating",
    "folder",
    "cookbooks",
    "cookbook",
    "created",
    "great",
    "done",
    "moving",
    "cookbook",
    "okay",
    "cookbook",
    "sample",
    "created",
    "automatically",
    "hierarchical",
    "structure",
    "associated",
    "let",
    "look",
    "hierarchical",
    "structure",
    "understand",
    "cookbook",
    "sample",
    "exactly",
    "move",
    "command",
    "looking",
    "hierarchical",
    "structure",
    "tree",
    "see",
    "within",
    "cookbook",
    "folder",
    "recipes",
    "recipe",
    "creating",
    "recipe",
    "alter",
    "content",
    "let",
    "move",
    "finally",
    "writing",
    "recipes",
    "move",
    "recipes",
    "folder",
    "first",
    "open",
    "recipe",
    "g",
    "edit",
    "recipe",
    "particular",
    "demo",
    "install",
    "httpd",
    "package",
    "client",
    "node",
    "basically",
    "apache",
    "server",
    "also",
    "hosting",
    "simple",
    "web",
    "page",
    "let",
    "begin",
    "recipes",
    "chef",
    "written",
    "ruby",
    "explain",
    "recipe",
    "okay",
    "first",
    "line",
    "install",
    "httpd",
    "second",
    "line",
    "service",
    "start",
    "enable",
    "http",
    "service",
    "client",
    "node",
    "first",
    "task",
    "second",
    "part",
    "need",
    "create",
    "web",
    "page",
    "part",
    "web",
    "page",
    "stored",
    "written",
    "html",
    "file",
    "previously",
    "know",
    "probably",
    "like",
    "default",
    "path",
    "web",
    "pages",
    "created",
    "yep",
    "content",
    "displayed",
    "web",
    "page",
    "everything",
    "works",
    "right",
    "pretty",
    "sure",
    "save",
    "recipe",
    "done",
    "close",
    "gra",
    "created",
    "recipe",
    "work",
    "workstation",
    "completed",
    "next",
    "thing",
    "move",
    "server",
    "mentioned",
    "earlier",
    "using",
    "server",
    "service",
    "cloud",
    "go",
    "browser",
    "type",
    "manage",
    "dot",
    "chef",
    "dot",
    "io",
    "home",
    "page",
    "chef",
    "server",
    "click",
    "get",
    "started",
    "need",
    "first",
    "create",
    "account",
    "using",
    "chef",
    "server",
    "completely",
    "free",
    "need",
    "give",
    "email",
    "id",
    "details",
    "fact",
    "lot",
    "like",
    "creating",
    "account",
    "facebook",
    "instagram",
    "fill",
    "details",
    "check",
    "terms",
    "service",
    "box",
    "next",
    "thing",
    "need",
    "go",
    "back",
    "inbox",
    "verify",
    "email",
    "id",
    "inbox",
    "opened",
    "windows",
    "machine",
    "inbox",
    "would",
    "received",
    "mail",
    "chef",
    "software",
    "click",
    "link",
    "verify",
    "create",
    "password",
    "done",
    "let",
    "continue",
    "workstation",
    "machine",
    "type",
    "username",
    "password",
    "first",
    "time",
    "log",
    "chef",
    "server",
    "appear",
    "need",
    "create",
    "new",
    "organization",
    "create",
    "organization",
    "organization",
    "basically",
    "name",
    "associated",
    "collection",
    "client",
    "machines",
    "first",
    "thing",
    "go",
    "administration",
    "tab",
    "download",
    "starter",
    "kit",
    "guys",
    "part",
    "make",
    "sure",
    "workstation",
    "opening",
    "shep",
    "server",
    "workstation",
    "need",
    "folder",
    "installed",
    "save",
    "file",
    "gets",
    "downloaded",
    "shift",
    "starter",
    "kit",
    "key",
    "connecting",
    "workstation",
    "server",
    "server",
    "node",
    "basically",
    "tool",
    "called",
    "knife",
    "come",
    "across",
    "later",
    "demo",
    "knife",
    "takes",
    "care",
    "communication",
    "transferring",
    "cookbooks",
    "three",
    "machines",
    "case",
    "two",
    "machines",
    "workstation",
    "node",
    "one",
    "server",
    "let",
    "go",
    "back",
    "root",
    "directory",
    "chef",
    "starter",
    "zip",
    "file",
    "within",
    "downloads",
    "folder",
    "first",
    "move",
    "sip",
    "folder",
    "cookbooks",
    "folder",
    "unzip",
    "cookbooks",
    "folder",
    "one",
    "contains",
    "recipe",
    "require",
    "knife",
    "tool",
    "command",
    "present",
    "send",
    "recipes",
    "server",
    "check",
    "contents",
    "cookbooks",
    "right",
    "ensure",
    "chef",
    "file",
    "within",
    "cookbooks",
    "yep",
    "next",
    "thing",
    "need",
    "unzip",
    "folder",
    "great",
    "unzipped",
    "means",
    "workstation",
    "server",
    "linked",
    "need",
    "use",
    "knife",
    "command",
    "tool",
    "transfer",
    "upload",
    "recipes",
    "created",
    "workstation",
    "onto",
    "server",
    "execute",
    "command",
    "need",
    "move",
    "cookbooks",
    "directory",
    "know",
    "unzipped",
    "chef",
    "starter",
    "kit",
    "knife",
    "command",
    "present",
    "let",
    "execute",
    "knife",
    "command",
    "knife",
    "cookbook",
    "upload",
    "sample",
    "probably",
    "recall",
    "sample",
    "name",
    "cookbook",
    "created",
    "within",
    "sample",
    "created",
    "rsp",
    "uploading",
    "entire",
    "cookbook",
    "onto",
    "server",
    "execute",
    "command",
    "great",
    "cookbooks",
    "uploaded",
    "let",
    "check",
    "server",
    "move",
    "browser",
    "opened",
    "chef",
    "server",
    "go",
    "policy",
    "go",
    "cookbook",
    "uploaded",
    "sample",
    "first",
    "time",
    "uploaded",
    "version",
    "first",
    "version",
    "would",
    "notice",
    "go",
    "notes",
    "tab",
    "notes",
    "present",
    "nodes",
    "basically",
    "machine",
    "execute",
    "cookbooks",
    "nodes",
    "seen",
    "right",
    "configured",
    "yet",
    "next",
    "thing",
    "need",
    "far",
    "done",
    "master",
    "machine",
    "move",
    "node",
    "machine",
    "moving",
    "let",
    "check",
    "ip",
    "node",
    "machine",
    "ip",
    "note",
    "somewhere",
    "move",
    "back",
    "workstation",
    "already",
    "saw",
    "uploaded",
    "sample",
    "workbook",
    "next",
    "thing",
    "need",
    "make",
    "sure",
    "server",
    "node",
    "able",
    "communicate",
    "use",
    "knife",
    "tool",
    "command",
    "knife",
    "bootstrap",
    "enter",
    "ip",
    "address",
    "node",
    "checked",
    "logging",
    "using",
    "node",
    "root",
    "user",
    "also",
    "need",
    "specify",
    "root",
    "password",
    "node",
    "give",
    "name",
    "node",
    "name",
    "identifying",
    "node",
    "server",
    "probably",
    "noticed",
    "using",
    "term",
    "ssh",
    "secure",
    "shell",
    "basically",
    "provides",
    "channel",
    "secure",
    "communication",
    "two",
    "machines",
    "unsafe",
    "environment",
    "okay",
    "done",
    "command",
    "executed",
    "right",
    "case",
    "see",
    "chef",
    "server",
    "chef",
    "node",
    "must",
    "able",
    "communicate",
    "able",
    "send",
    "cookbook",
    "previously",
    "uploaded",
    "workstation",
    "onto",
    "server",
    "server",
    "node",
    "move",
    "node",
    "machine",
    "need",
    "go",
    "back",
    "chef",
    "server",
    "let",
    "refresh",
    "page",
    "see",
    "previously",
    "notes",
    "tab",
    "node",
    "mentioned",
    "chef",
    "node",
    "node",
    "wanted",
    "identify",
    "node",
    "centos",
    "platform",
    "ip",
    "active",
    "hours",
    "uptime",
    "last",
    "last",
    "time",
    "checked",
    "node",
    "minute",
    "back",
    "yeah",
    "pretty",
    "much",
    "create",
    "run",
    "list",
    "add",
    "sample",
    "run",
    "list",
    "click",
    "node",
    "see",
    "small",
    "arrow",
    "end",
    "click",
    "edit",
    "run",
    "list",
    "available",
    "recipes",
    "cookbook",
    "sample",
    "present",
    "drag",
    "drop",
    "current",
    "run",
    "list",
    "accept",
    "okay",
    "updated",
    "run",
    "list",
    "recipe",
    "sent",
    "node",
    "next",
    "need",
    "need",
    "execute",
    "node",
    "move",
    "node",
    "machine",
    "shift",
    "client",
    "command",
    "execute",
    "recipe",
    "executing",
    "see",
    "exactly",
    "happening",
    "recipe",
    "install",
    "http",
    "package",
    "first",
    "apache",
    "server",
    "first",
    "line",
    "done",
    "date",
    "second",
    "line",
    "enabled",
    "third",
    "line",
    "service",
    "started",
    "fourth",
    "line",
    "contents",
    "created",
    "web",
    "page",
    "location",
    "look",
    "everything",
    "work",
    "fine",
    "check",
    "go",
    "browser",
    "search",
    "bar",
    "type",
    "localhost",
    "go",
    "httpd",
    "package",
    "patchy",
    "server",
    "installed",
    "sample",
    "webpage",
    "also",
    "hosted",
    "congratulations",
    "completing",
    "chef",
    "demo",
    "today",
    "dive",
    "tutorial",
    "configuration",
    "management",
    "tool",
    "chef",
    "look",
    "devops",
    "approach",
    "devops",
    "life",
    "cycle",
    "see",
    "chef",
    "falls",
    "operations",
    "deployment",
    "begin",
    "let",
    "brief",
    "look",
    "learn",
    "today",
    "first",
    "get",
    "know",
    "use",
    "chef",
    "exactly",
    "chef",
    "two",
    "common",
    "terms",
    "used",
    "chef",
    "configuration",
    "management",
    "infrastructure",
    "code",
    "brief",
    "look",
    "also",
    "look",
    "components",
    "chef",
    "chef",
    "architecture",
    "quickly",
    "go",
    "various",
    "flavors",
    "chef",
    "finally",
    "wrap",
    "demo",
    "demo",
    "installation",
    "apache",
    "notes",
    "let",
    "begin",
    "guys",
    "use",
    "chef",
    "well",
    "consider",
    "large",
    "company",
    "company",
    "caters",
    "large",
    "number",
    "clients",
    "provides",
    "number",
    "services",
    "solutions",
    "course",
    "get",
    "done",
    "need",
    "huge",
    "number",
    "servers",
    "huge",
    "number",
    "systems",
    "basically",
    "huge",
    "infrastructure",
    "infrastructure",
    "needs",
    "continuously",
    "configured",
    "maintained",
    "fact",
    "dealing",
    "infrastructure",
    "size",
    "good",
    "chance",
    "systems",
    "may",
    "failing",
    "long",
    "run",
    "company",
    "expands",
    "new",
    "systems",
    "may",
    "even",
    "get",
    "added",
    "well",
    "could",
    "say",
    "company",
    "best",
    "system",
    "administrator",
    "could",
    "possibly",
    "take",
    "care",
    "infrastructure",
    "size",
    "ca",
    "chef",
    "comes",
    "chef",
    "automates",
    "entire",
    "process",
    "chef",
    "provide",
    "chef",
    "provides",
    "continuous",
    "deployment",
    "look",
    "market",
    "space",
    "today",
    "see",
    "products",
    "updates",
    "coming",
    "matter",
    "days",
    "important",
    "company",
    "able",
    "deploy",
    "product",
    "minute",
    "ready",
    "already",
    "obsolete",
    "chef",
    "also",
    "provides",
    "increased",
    "system",
    "robustness",
    "saw",
    "chef",
    "automate",
    "infrastructure",
    "spite",
    "automation",
    "good",
    "possibility",
    "errors",
    "creep",
    "chef",
    "detect",
    "bugs",
    "remove",
    "deploying",
    "real",
    "environment",
    "chef",
    "also",
    "adapts",
    "cloud",
    "know",
    "today",
    "services",
    "tools",
    "solutions",
    "everything",
    "revolving",
    "around",
    "cloud",
    "chef",
    "really",
    "play",
    "along",
    "making",
    "easily",
    "integratable",
    "cloud",
    "platform",
    "know",
    "use",
    "chef",
    "let",
    "look",
    "exactly",
    "chef",
    "chef",
    "open",
    "source",
    "tool",
    "developed",
    "ops",
    "code",
    "course",
    "paid",
    "versions",
    "chef",
    "chef",
    "enterprise",
    "freely",
    "accessible",
    "chef",
    "written",
    "ruby",
    "erlang",
    "would",
    "gone",
    "previous",
    "material",
    "chef",
    "sure",
    "would",
    "come",
    "across",
    "ruby",
    "related",
    "chef",
    "erlang",
    "ruby",
    "erlang",
    "used",
    "build",
    "chef",
    "comes",
    "actually",
    "writing",
    "codes",
    "chef",
    "ruby",
    "codes",
    "deployed",
    "onto",
    "multiple",
    "servers",
    "automatic",
    "configuration",
    "maintenance",
    "chef",
    "configuration",
    "management",
    "tool",
    "used",
    "term",
    "configuration",
    "management",
    "couple",
    "times",
    "exactly",
    "mean",
    "let",
    "start",
    "definition",
    "configuration",
    "management",
    "configuration",
    "management",
    "collection",
    "engineering",
    "practices",
    "provides",
    "systematic",
    "way",
    "manage",
    "entities",
    "efficient",
    "deployment",
    "let",
    "break",
    "configuration",
    "management",
    "basically",
    "collection",
    "practices",
    "practices",
    "practices",
    "managing",
    "entities",
    "entities",
    "required",
    "efficient",
    "deployment",
    "entities",
    "need",
    "efficient",
    "deployment",
    "code",
    "infrastructure",
    "people",
    "code",
    "basically",
    "code",
    "system",
    "administrators",
    "right",
    "configuring",
    "various",
    "systems",
    "infrastructure",
    "collection",
    "systems",
    "servers",
    "finally",
    "teams",
    "take",
    "care",
    "infrastructure",
    "codes",
    "need",
    "updated",
    "whenever",
    "infrastructure",
    "needs",
    "new",
    "configuration",
    "sort",
    "updation",
    "operating",
    "system",
    "software",
    "versions",
    "code",
    "needs",
    "updated",
    "first",
    "requirements",
    "company",
    "change",
    "infrastructure",
    "configuration",
    "needs",
    "change",
    "finally",
    "course",
    "people",
    "need",
    "coordination",
    "team",
    "system",
    "administrators",
    "say",
    "person",
    "makes",
    "change",
    "code",
    "person",
    "b",
    "c",
    "need",
    "well",
    "aware",
    "change",
    "made",
    "made",
    "change",
    "made",
    "exactly",
    "change",
    "made",
    "two",
    "types",
    "configuration",
    "management",
    "left",
    "push",
    "configuration",
    "server",
    "holds",
    "files",
    "instructions",
    "configure",
    "notes",
    "pushes",
    "files",
    "onto",
    "node",
    "complete",
    "control",
    "lies",
    "server",
    "right",
    "side",
    "pull",
    "configuration",
    "case",
    "pull",
    "configuration",
    "nodes",
    "pole",
    "server",
    "first",
    "check",
    "change",
    "configurations",
    "required",
    "nodes",
    "pull",
    "configuration",
    "files",
    "shelf",
    "follows",
    "pull",
    "configuration",
    "see",
    "video",
    "another",
    "important",
    "term",
    "often",
    "used",
    "chef",
    "infrastructure",
    "code",
    "let",
    "understand",
    "term",
    "infrastructure",
    "code",
    "means",
    "small",
    "story",
    "tim",
    "tim",
    "system",
    "administrator",
    "large",
    "company",
    "receives",
    "task",
    "set",
    "server",
    "install",
    "20",
    "software",
    "applications",
    "begins",
    "sets",
    "server",
    "hits",
    "would",
    "take",
    "entire",
    "night",
    "install",
    "20",
    "software",
    "applications",
    "would",
    "things",
    "much",
    "simpler",
    "code",
    "well",
    "course",
    "codes",
    "make",
    "things",
    "much",
    "simpler",
    "codes",
    "number",
    "advantages",
    "easily",
    "modifiable",
    "today",
    "tim",
    "told",
    "need",
    "mysql",
    "installed",
    "20",
    "systems",
    "tim",
    "simply",
    "writes",
    "code",
    "next",
    "datum",
    "told",
    "changed",
    "mind",
    "need",
    "maya",
    "skill",
    "think",
    "use",
    "oracle",
    "bother",
    "opens",
    "file",
    "makes",
    "corrections",
    "code",
    "work",
    "fine",
    "code",
    "also",
    "testable",
    "tim",
    "write",
    "ten",
    "commands",
    "something",
    "tenth",
    "command",
    "realized",
    "first",
    "command",
    "wrote",
    "something",
    "right",
    "well",
    "would",
    "quite",
    "tiresome",
    "would",
    "codes",
    "however",
    "test",
    "even",
    "running",
    "bugs",
    "caught",
    "corrected",
    "codes",
    "also",
    "deployable",
    "easily",
    "deployable",
    "deployable",
    "multiple",
    "times",
    "saw",
    "various",
    "advantages",
    "codes",
    "let",
    "say",
    "infrastructure",
    "code",
    "exactly",
    "definition",
    "infrastructure",
    "code",
    "type",
    "id",
    "infrastructure",
    "operation",
    "team",
    "manages",
    "code",
    "rather",
    "manual",
    "procedure",
    "infrastructure",
    "code",
    "allows",
    "operations",
    "team",
    "take",
    "care",
    "code",
    "automatically",
    "performs",
    "various",
    "procedures",
    "rather",
    "manually",
    "procedures",
    "feature",
    "policies",
    "configurations",
    "written",
    "code",
    "let",
    "look",
    "various",
    "components",
    "chef",
    "first",
    "component",
    "workstation",
    "workstation",
    "system",
    "system",
    "administrator",
    "sits",
    "creates",
    "codes",
    "configuring",
    "nodes",
    "codes",
    "case",
    "chef",
    "written",
    "ruby",
    "called",
    "recipes",
    "multiple",
    "number",
    "recipes",
    "collection",
    "recipes",
    "called",
    "cookbook",
    "cookbooks",
    "created",
    "workstation",
    "need",
    "stored",
    "server",
    "knife",
    "command",
    "line",
    "tool",
    "basically",
    "command",
    "see",
    "us",
    "executing",
    "one",
    "demos",
    "shifts",
    "cookbooks",
    "workstation",
    "server",
    "second",
    "component",
    "server",
    "servers",
    "like",
    "middleman",
    "lies",
    "workstation",
    "nodes",
    "cookbooks",
    "stored",
    "saw",
    "previously",
    "knife",
    "sends",
    "cookbooks",
    "workstation",
    "server",
    "server",
    "hosted",
    "locally",
    "workstation",
    "remote",
    "server",
    "different",
    "location",
    "even",
    "cloud",
    "platform",
    "final",
    "confidence",
    "node",
    "nodes",
    "systems",
    "require",
    "configuration",
    "chef",
    "architecture",
    "number",
    "nodes",
    "oh",
    "hi",
    "service",
    "installed",
    "node",
    "responsible",
    "collecting",
    "information",
    "regarding",
    "current",
    "state",
    "node",
    "information",
    "sent",
    "server",
    "compared",
    "configuration",
    "files",
    "check",
    "new",
    "configuration",
    "required",
    "chef",
    "client",
    "another",
    "service",
    "node",
    "responsible",
    "communications",
    "server",
    "whenever",
    "node",
    "demand",
    "recipe",
    "shift",
    "client",
    "responsible",
    "communicating",
    "demand",
    "server",
    "since",
    "number",
    "nodes",
    "chef",
    "architecture",
    "necessary",
    "node",
    "identical",
    "course",
    "every",
    "node",
    "different",
    "configuration",
    "let",
    "look",
    "chef",
    "architecture",
    "workstation",
    "one",
    "server",
    "machine",
    "two",
    "nodes",
    "number",
    "nodes",
    "first",
    "things",
    "first",
    "system",
    "administrator",
    "must",
    "create",
    "recipe",
    "recipes",
    "mentioned",
    "chef",
    "architecture",
    "dummy",
    "recipes",
    "look",
    "actual",
    "functioning",
    "recipes",
    "later",
    "demo",
    "one",
    "recipe",
    "two",
    "recipes",
    "three",
    "recipes",
    "collection",
    "recipes",
    "forms",
    "cookbook",
    "guys",
    "look",
    "recipe",
    "source",
    "simply",
    "learn",
    "three",
    "dot",
    "erb",
    "erb",
    "extension",
    "ruby",
    "files",
    "cookbooks",
    "created",
    "workstation",
    "need",
    "sent",
    "server",
    "stored",
    "task",
    "knife",
    "knife",
    "command",
    "line",
    "tool",
    "responsible",
    "transferring",
    "cookbooks",
    "onto",
    "server",
    "workstation",
    "command",
    "running",
    "knife",
    "knife",
    "upload",
    "simply",
    "db",
    "simply",
    "db",
    "name",
    "cookbook",
    "move",
    "node",
    "machines",
    "node",
    "run",
    "ohi",
    "service",
    "ohai",
    "service",
    "collect",
    "information",
    "regarding",
    "current",
    "state",
    "notes",
    "send",
    "chef",
    "client",
    "run",
    "chef",
    "client",
    "informations",
    "sent",
    "server",
    "tested",
    "cookbooks",
    "discrepancy",
    "current",
    "state",
    "nodes",
    "cookbook",
    "one",
    "nodes",
    "match",
    "configurations",
    "required",
    "cookbook",
    "fetched",
    "server",
    "executed",
    "node",
    "sets",
    "note",
    "right",
    "state",
    "various",
    "flavors",
    "chef",
    "quickly",
    "go",
    "first",
    "chef",
    "solo",
    "chef",
    "solo",
    "separate",
    "server",
    "cookbooks",
    "located",
    "node",
    "kind",
    "configuration",
    "used",
    "single",
    "node",
    "take",
    "care",
    "next",
    "flavor",
    "hosted",
    "chef",
    "hosted",
    "chef",
    "still",
    "workstation",
    "node",
    "server",
    "used",
    "service",
    "cloud",
    "really",
    "makes",
    "things",
    "simple",
    "set",
    "server",
    "still",
    "performs",
    "functioning",
    "typical",
    "chef",
    "configuration",
    "notice",
    "using",
    "demo",
    "chef",
    "client",
    "server",
    "chef",
    "client",
    "server",
    "workstation",
    "server",
    "n",
    "number",
    "nodes",
    "traditional",
    "chef",
    "architecture",
    "one",
    "used",
    "explanations",
    "previously",
    "finally",
    "private",
    "chef",
    "private",
    "chef",
    "also",
    "known",
    "enterprise",
    "chef",
    "case",
    "workstation",
    "server",
    "node",
    "located",
    "within",
    "enterprise",
    "infrastructure",
    "main",
    "difference",
    "chef",
    "client",
    "server",
    "private",
    "chef",
    "case",
    "shep",
    "client",
    "server",
    "three",
    "machines",
    "could",
    "dispersed",
    "enterprise",
    "version",
    "chef",
    "also",
    "provides",
    "liberty",
    "add",
    "extra",
    "layers",
    "security",
    "features",
    "reach",
    "final",
    "part",
    "video",
    "dive",
    "demo",
    "let",
    "quickly",
    "give",
    "introduction",
    "using",
    "two",
    "virtual",
    "boxes",
    "sent",
    "s7",
    "one",
    "used",
    "workstation",
    "node",
    "using",
    "one",
    "node",
    "make",
    "things",
    "simple",
    "server",
    "used",
    "service",
    "cloud",
    "steps",
    "performing",
    "demo",
    "first",
    "download",
    "install",
    "chef",
    "dk",
    "workstation",
    "make",
    "empty",
    "cookbook",
    "file",
    "write",
    "recipe",
    "need",
    "set",
    "server",
    "mentioned",
    "earlier",
    "server",
    "service",
    "cloud",
    "create",
    "profile",
    "completely",
    "free",
    "link",
    "workstation",
    "server",
    "upload",
    "recipe",
    "server",
    "notes",
    "download",
    "cookbooks",
    "server",
    "configure",
    "idea",
    "let",
    "move",
    "actual",
    "demo",
    "begin",
    "demo",
    "oracle",
    "vm",
    "virtualbox",
    "manager",
    "two",
    "machines",
    "already",
    "created",
    "workstation",
    "node",
    "sent",
    "s7",
    "machines",
    "differentiate",
    "terminal",
    "workstation",
    "black",
    "background",
    "white",
    "text",
    "note",
    "black",
    "background",
    "green",
    "text",
    "first",
    "thing",
    "go",
    "workstation",
    "box",
    "open",
    "web",
    "browser",
    "search",
    "chef",
    "dk",
    "installation",
    "go",
    "first",
    "link",
    "chef",
    "official",
    "page",
    "warm",
    "welcome",
    "viewers",
    "anjali",
    "simply",
    "learn",
    "today",
    "showing",
    "install",
    "configuration",
    "management",
    "tool",
    "ansible",
    "let",
    "brief",
    "one",
    "would",
    "use",
    "ansible",
    "exactly",
    "ansible",
    "consider",
    "case",
    "organization",
    "large",
    "infrastructure",
    "means",
    "probably",
    "hundreds",
    "systems",
    "giving",
    "one",
    "even",
    "small",
    "team",
    "people",
    "responsibility",
    "configure",
    "systems",
    "makes",
    "work",
    "really",
    "tough",
    "repetitive",
    "know",
    "manual",
    "work",
    "always",
    "prone",
    "errors",
    "ansible",
    "tool",
    "automate",
    "configuration",
    "systems",
    "ansible",
    "small",
    "team",
    "system",
    "administrators",
    "write",
    "simple",
    "code",
    "yaml",
    "codes",
    "deployed",
    "onto",
    "hundreds",
    "thousands",
    "servers",
    "configures",
    "desired",
    "states",
    "ansible",
    "automates",
    "configuration",
    "management",
    "configuring",
    "systems",
    "automates",
    "orchestration",
    "means",
    "brings",
    "together",
    "number",
    "applications",
    "decides",
    "order",
    "executed",
    "also",
    "automates",
    "deployment",
    "applications",
    "know",
    "ansible",
    "let",
    "move",
    "installation",
    "ansible",
    "oracle",
    "vm",
    "virtualbox",
    "manager",
    "using",
    "two",
    "systems",
    "node",
    "system",
    "basically",
    "client",
    "system",
    "server",
    "system",
    "master",
    "system",
    "let",
    "begin",
    "server",
    "system",
    "master",
    "system",
    "guys",
    "first",
    "thing",
    "download",
    "ansible",
    "tool",
    "one",
    "thing",
    "must",
    "remember",
    "ansible",
    "unlike",
    "chef",
    "puppet",
    "ansible",
    "push",
    "type",
    "configuration",
    "management",
    "tool",
    "means",
    "entire",
    "control",
    "lies",
    "master",
    "server",
    "system",
    "write",
    "configuration",
    "files",
    "also",
    "responsible",
    "pushing",
    "configuration",
    "files",
    "onto",
    "node",
    "client",
    "system",
    "required",
    "creates",
    "ansible",
    "tool",
    "installed",
    "need",
    "open",
    "ansible",
    "host",
    "file",
    "specify",
    "details",
    "node",
    "client",
    "machine",
    "ansible",
    "host",
    "file",
    "see",
    "entire",
    "file",
    "commented",
    "certain",
    "syntax",
    "observe",
    "example",
    "group",
    "name",
    "web",
    "servers",
    "ip",
    "addresses",
    "certain",
    "host",
    "name",
    "adding",
    "details",
    "client",
    "system",
    "first",
    "need",
    "give",
    "group",
    "name",
    "group",
    "basically",
    "add",
    "clients",
    "require",
    "certain",
    "type",
    "configuration",
    "since",
    "using",
    "one",
    "node",
    "give",
    "details",
    "particular",
    "node",
    "first",
    "need",
    "add",
    "ip",
    "address",
    "client",
    "machine",
    "let",
    "go",
    "back",
    "client",
    "machine",
    "ip",
    "address",
    "typed",
    "ip",
    "address",
    "give",
    "space",
    "specify",
    "user",
    "client",
    "machine",
    "communications",
    "server",
    "master",
    "system",
    "client",
    "node",
    "system",
    "takes",
    "place",
    "ssh",
    "ssh",
    "basically",
    "provides",
    "secure",
    "channel",
    "transfer",
    "information",
    "follow",
    "password",
    "case",
    "root",
    "password",
    "done",
    "save",
    "file",
    "go",
    "back",
    "terminal",
    "host",
    "file",
    "written",
    "next",
    "thing",
    "write",
    "playbook",
    "playbook",
    "technical",
    "term",
    "used",
    "configuration",
    "files",
    "write",
    "ansible",
    "playbooks",
    "written",
    "yaml",
    "yaml",
    "extremely",
    "simple",
    "write",
    "understand",
    "fact",
    "close",
    "english",
    "write",
    "playbook",
    "playbook",
    "code",
    "yaml",
    "first",
    "starts",
    "three",
    "dashes",
    "indicates",
    "beginning",
    "file",
    "next",
    "thing",
    "need",
    "give",
    "name",
    "playbook",
    "name",
    "going",
    "name",
    "playbook",
    "sample",
    "book",
    "next",
    "need",
    "specify",
    "host",
    "systems",
    "basically",
    "systems",
    "configuration",
    "file",
    "playbook",
    "case",
    "executed",
    "executing",
    "client",
    "machines",
    "mentioned",
    "group",
    "ansible",
    "servers",
    "one",
    "client",
    "machine",
    "still",
    "mention",
    "group",
    "name",
    "next",
    "need",
    "specify",
    "username",
    "logging",
    "client",
    "machine",
    "root",
    "case",
    "become",
    "true",
    "specifies",
    "need",
    "become",
    "root",
    "execute",
    "playbook",
    "becoming",
    "roots",
    "called",
    "privilege",
    "escalation",
    "next",
    "need",
    "specify",
    "tasks",
    "basically",
    "actions",
    "playbook",
    "performing",
    "would",
    "noticed",
    "everything",
    "far",
    "aligned",
    "name",
    "host",
    "remote",
    "user",
    "become",
    "task",
    "one",
    "level",
    "whatever",
    "comes",
    "task",
    "shifted",
    "slightly",
    "towards",
    "right",
    "although",
    "yaml",
    "extremely",
    "simple",
    "understand",
    "read",
    "little",
    "tricky",
    "writing",
    "need",
    "careful",
    "indentations",
    "spacing",
    "first",
    "task",
    "install",
    "httpd",
    "basically",
    "apache",
    "server",
    "command",
    "yum",
    "installing",
    "httpd",
    "package",
    "latest",
    "date",
    "installed",
    "first",
    "task",
    "second",
    "task",
    "would",
    "running",
    "apache",
    "service",
    "name",
    "run",
    "httpd",
    "action",
    "service",
    "performed",
    "httpd",
    "hence",
    "name",
    "httpd",
    "state",
    "must",
    "started",
    "come",
    "third",
    "task",
    "create",
    "simple",
    "web",
    "page",
    "hosted",
    "create",
    "content",
    "name",
    "task",
    "content",
    "creating",
    "basically",
    "copied",
    "node",
    "system",
    "particular",
    "file",
    "location",
    "provide",
    "content",
    "congrats",
    "provide",
    "destination",
    "file",
    "copied",
    "default",
    "location",
    "html",
    "files",
    "done",
    "writing",
    "playbook",
    "save",
    "go",
    "back",
    "terminal",
    "execute",
    "playbook",
    "push",
    "playbook",
    "onto",
    "note",
    "system",
    "let",
    "check",
    "syntax",
    "playbook",
    "command",
    "everything",
    "fine",
    "playbook",
    "output",
    "would",
    "playbook",
    "name",
    "syntax",
    "perfectly",
    "fine",
    "push",
    "playbook",
    "node",
    "client",
    "machine",
    "syntax",
    "playbook",
    "sent",
    "client",
    "machine",
    "see",
    "first",
    "facts",
    "gathered",
    "current",
    "state",
    "client",
    "machine",
    "first",
    "fetched",
    "check",
    "changed",
    "already",
    "present",
    "first",
    "thing",
    "installing",
    "httpd",
    "system",
    "already",
    "httpd",
    "says",
    "okay",
    "need",
    "changed",
    "next",
    "task",
    "running",
    "httpd",
    "although",
    "system",
    "apache",
    "service",
    "running",
    "one",
    "thing",
    "changed",
    "next",
    "content",
    "available",
    "content",
    "also",
    "added",
    "two",
    "tasks",
    "changed",
    "four",
    "things",
    "okay",
    "everything",
    "seems",
    "fine",
    "move",
    "forward",
    "important",
    "check",
    "one",
    "line",
    "documentation",
    "provided",
    "ansible",
    "kind",
    "information",
    "available",
    "regarding",
    "tasks",
    "executed",
    "client",
    "machine",
    "reachable",
    "unreachable",
    "everything",
    "fine",
    "move",
    "node",
    "system",
    "go",
    "browser",
    "playbook",
    "executed",
    "happen",
    "httpd",
    "service",
    "must",
    "running",
    "state",
    "web",
    "page",
    "created",
    "hosted",
    "let",
    "type",
    "localhost",
    "great",
    "everything",
    "working",
    "fine",
    "web",
    "page",
    "displayed",
    "come",
    "end",
    "installation",
    "configuration",
    "video",
    "configuration",
    "management",
    "tool",
    "ansible",
    "doubts",
    "please",
    "post",
    "comment",
    "section",
    "definitely",
    "get",
    "back",
    "soon",
    "possible",
    "thanks",
    "essentially",
    "matthew",
    "anjali",
    "take",
    "us",
    "work",
    "ansible",
    "ansible",
    "today",
    "one",
    "key",
    "tools",
    "would",
    "within",
    "devops",
    "environment",
    "things",
    "going",
    "go",
    "today",
    "going",
    "cover",
    "would",
    "want",
    "use",
    "product",
    "like",
    "ansible",
    "ansible",
    "really",
    "value",
    "organization",
    "differences",
    "ansible",
    "products",
    "similar",
    "market",
    "makes",
    "ansible",
    "compelling",
    "product",
    "going",
    "dig",
    "architecture",
    "ansible",
    "going",
    "look",
    "would",
    "create",
    "playbook",
    "manage",
    "inventory",
    "server",
    "environments",
    "actual",
    "workings",
    "ansible",
    "little",
    "extra",
    "going",
    "also",
    "throw",
    "ansible",
    "tower",
    "one",
    "secret",
    "source",
    "solutions",
    "use",
    "improving",
    "speed",
    "performance",
    "create",
    "ansible",
    "environments",
    "finally",
    "going",
    "go",
    "use",
    "case",
    "looking",
    "hootsuite",
    "social",
    "media",
    "management",
    "company",
    "use",
    "ansible",
    "really",
    "improve",
    "efficiency",
    "within",
    "organizations",
    "let",
    "jump",
    "big",
    "question",
    "ansible",
    "think",
    "ansible",
    "another",
    "tool",
    "within",
    "devops",
    "environment",
    "helping",
    "manage",
    "service",
    "definitely",
    "falls",
    "operations",
    "side",
    "dev",
    "ops",
    "equation",
    "look",
    "picture",
    "sam",
    "like",
    "sam",
    "system",
    "administrator",
    "responsible",
    "maintaining",
    "infrastructure",
    "different",
    "servers",
    "within",
    "company",
    "servers",
    "may",
    "maintain",
    "could",
    "web",
    "servers",
    "running",
    "apache",
    "could",
    "database",
    "servers",
    "running",
    "uh",
    "mysql",
    "servers",
    "fairly",
    "easy",
    "maintain",
    "mean",
    "three",
    "web",
    "servers",
    "two",
    "database",
    "servers",
    "let",
    "face",
    "would",
    "love",
    "one",
    "two",
    "servers",
    "manage",
    "would",
    "really",
    "easy",
    "maintain",
    "trick",
    "however",
    "start",
    "increasing",
    "number",
    "servers",
    "reality",
    "environments",
    "live",
    "operate",
    "becomes",
    "increasingly",
    "difficult",
    "create",
    "consistent",
    "setup",
    "different",
    "infrastructures",
    "web",
    "servers",
    "databases",
    "simple",
    "reason",
    "human",
    "update",
    "maintain",
    "servers",
    "hand",
    "good",
    "chance",
    "would",
    "set",
    "server",
    "identically",
    "anspo",
    "really",
    "comes",
    "rescue",
    "helps",
    "become",
    "efficient",
    "operations",
    "team",
    "ansible",
    "like",
    "system",
    "solutions",
    "chef",
    "puppet",
    "uses",
    "code",
    "write",
    "describe",
    "installation",
    "setup",
    "servers",
    "actually",
    "repeat",
    "deploy",
    "servers",
    "consistently",
    "multiple",
    "areas",
    "one",
    "person",
    "redoing",
    "setup",
    "procedures",
    "write",
    "one",
    "script",
    "script",
    "executed",
    "consistent",
    "environment",
    "gone",
    "want",
    "use",
    "ansible",
    "let",
    "step",
    "ansible",
    "really",
    "know",
    "great",
    "know",
    "actually",
    "use",
    "tools",
    "environment",
    "ansible",
    "tool",
    "really",
    "allows",
    "create",
    "control",
    "three",
    "key",
    "areas",
    "within",
    "operations",
    "environment",
    "first",
    "automation",
    "actually",
    "write",
    "instructions",
    "automate",
    "setup",
    "would",
    "typically",
    "manually",
    "past",
    "second",
    "configuration",
    "consistent",
    "configuration",
    "imagine",
    "setting",
    "hundreds",
    "apache",
    "servers",
    "able",
    "guarantee",
    "precision",
    "apache",
    "servers",
    "set",
    "identically",
    "finally",
    "want",
    "able",
    "automate",
    "deployment",
    "scale",
    "server",
    "environment",
    "push",
    "instructions",
    "deploy",
    "automatically",
    "different",
    "servers",
    "bottom",
    "line",
    "want",
    "able",
    "speed",
    "make",
    "operations",
    "team",
    "efficient",
    "let",
    "talk",
    "little",
    "bit",
    "pull",
    "configuration",
    "works",
    "ansible",
    "two",
    "different",
    "ways",
    "able",
    "set",
    "different",
    "environments",
    "server",
    "farms",
    "one",
    "key",
    "server",
    "instructions",
    "servers",
    "connect",
    "main",
    "master",
    "server",
    "would",
    "piece",
    "software",
    "known",
    "client",
    "installed",
    "servers",
    "would",
    "communicate",
    "main",
    "master",
    "server",
    "would",
    "periodically",
    "either",
    "update",
    "change",
    "configuration",
    "slave",
    "server",
    "known",
    "pull",
    "configuration",
    "alternative",
    "push",
    "configuration",
    "push",
    "configuration",
    "slightly",
    "different",
    "main",
    "difference",
    "pull",
    "configuration",
    "master",
    "server",
    "actually",
    "put",
    "instructions",
    "unlike",
    "pull",
    "configuration",
    "client",
    "installed",
    "services",
    "push",
    "configuration",
    "actually",
    "client",
    "installed",
    "remote",
    "servers",
    "simply",
    "pushing",
    "configuration",
    "servers",
    "forcing",
    "restructure",
    "fresh",
    "clean",
    "installation",
    "environment",
    "ansible",
    "one",
    "second",
    "environments",
    "push",
    "configuration",
    "server",
    "contrasts",
    "popular",
    "products",
    "like",
    "chef",
    "puppet",
    "master",
    "slave",
    "architecture",
    "master",
    "server",
    "connecting",
    "client",
    "remote",
    "slave",
    "environment",
    "would",
    "pushing",
    "updates",
    "ansible",
    "pushing",
    "service",
    "structure",
    "server",
    "remote",
    "hardware",
    "putting",
    "onto",
    "hardware",
    "irrelevant",
    "structure",
    "significant",
    "advantages",
    "extra",
    "overhead",
    "weight",
    "client",
    "installed",
    "remote",
    "servers",
    "constantly",
    "communicate",
    "back",
    "master",
    "environment",
    "let",
    "step",
    "architecture",
    "would",
    "ansible",
    "environment",
    "setting",
    "ansible",
    "environment",
    "first",
    "thing",
    "want",
    "local",
    "machine",
    "local",
    "machine",
    "going",
    "instruction",
    "really",
    "power",
    "control",
    "pushing",
    "remote",
    "server",
    "local",
    "machine",
    "going",
    "starting",
    "work",
    "connected",
    "local",
    "machine",
    "different",
    "nodes",
    "pushing",
    "different",
    "configurations",
    "would",
    "set",
    "local",
    "machine",
    "configurations",
    "would",
    "write",
    "would",
    "write",
    "code",
    "within",
    "module",
    "local",
    "machine",
    "creating",
    "modules",
    "modules",
    "actually",
    "consistent",
    "playbooks",
    "local",
    "machine",
    "also",
    "second",
    "job",
    "job",
    "manage",
    "inventory",
    "nodes",
    "environment",
    "local",
    "machine",
    "able",
    "connect",
    "different",
    "nodes",
    "would",
    "hardware",
    "network",
    "ssh",
    "clients",
    "secure",
    "client",
    "let",
    "dig",
    "different",
    "elements",
    "within",
    "architecture",
    "going",
    "take",
    "first",
    "look",
    "playbooks",
    "would",
    "write",
    "create",
    "ansible",
    "environments",
    "core",
    "ansible",
    "playbook",
    "create",
    "instructions",
    "write",
    "define",
    "architecture",
    "hardware",
    "playbook",
    "really",
    "set",
    "instructions",
    "configure",
    "different",
    "nodes",
    "set",
    "instructions",
    "written",
    "language",
    "called",
    "yammer",
    "standard",
    "language",
    "used",
    "configuration",
    "server",
    "environments",
    "know",
    "yaml",
    "actually",
    "stands",
    "yaml",
    "8",
    "markup",
    "language",
    "let",
    "little",
    "tidbit",
    "hide",
    "behind",
    "ear",
    "let",
    "look",
    "one",
    "play",
    "books",
    "looks",
    "like",
    "sample",
    "yaml",
    "script",
    "written",
    "start",
    "jammer",
    "script",
    "three",
    "dashes",
    "indicates",
    "start",
    "script",
    "script",
    "actually",
    "consistent",
    "two",
    "distinct",
    "plays",
    "top",
    "play",
    "one",
    "play",
    "two",
    "within",
    "plays",
    "define",
    "nodes",
    "targeting",
    "web",
    "server",
    "top",
    "play",
    "second",
    "play",
    "database",
    "server",
    "targeting",
    "within",
    "server",
    "environments",
    "specific",
    "tasks",
    "looking",
    "execute",
    "let",
    "step",
    "tasks",
    "install",
    "apache",
    "task",
    "start",
    "apache",
    "task",
    "install",
    "sequel",
    "task",
    "going",
    "execute",
    "specific",
    "set",
    "instructions",
    "instructions",
    "include",
    "installing",
    "apache",
    "setting",
    "state",
    "apache",
    "environment",
    "starting",
    "apache",
    "environment",
    "setting",
    "running",
    "mysql",
    "environment",
    "really",
    "complicated",
    "really",
    "good",
    "thing",
    "working",
    "yaml",
    "really",
    "designed",
    "make",
    "easy",
    "operations",
    "lead",
    "able",
    "configure",
    "environments",
    "want",
    "consistently",
    "create",
    "let",
    "take",
    "step",
    "back",
    "though",
    "two",
    "hosts",
    "web",
    "server",
    "database",
    "server",
    "names",
    "come",
    "well",
    "takes",
    "us",
    "next",
    "stage",
    "second",
    "part",
    "working",
    "ansible",
    "inventory",
    "management",
    "part",
    "ansible",
    "inventory",
    "part",
    "ansible",
    "maintain",
    "structure",
    "network",
    "environment",
    "part",
    "structure",
    "creating",
    "different",
    "nodes",
    "create",
    "two",
    "different",
    "nodes",
    "web",
    "server",
    "node",
    "database",
    "server",
    "net",
    "web",
    "server",
    "node",
    "actually",
    "names",
    "actually",
    "pointing",
    "specific",
    "machines",
    "within",
    "environment",
    "actually",
    "write",
    "scripts",
    "refer",
    "either",
    "web",
    "server",
    "database",
    "server",
    "different",
    "servers",
    "instructions",
    "yammer",
    "script",
    "executed",
    "makes",
    "really",
    "easy",
    "able",
    "point",
    "new",
    "services",
    "without",
    "write",
    "complex",
    "instructions",
    "let",
    "look",
    "ansible",
    "actually",
    "works",
    "real",
    "world",
    "real",
    "world",
    "environment",
    "ansible",
    "software",
    "installed",
    "local",
    "machine",
    "connects",
    "different",
    "nodes",
    "within",
    "network",
    "local",
    "machine",
    "first",
    "playbook",
    "set",
    "instructions",
    "set",
    "remote",
    "nodes",
    "identify",
    "going",
    "connect",
    "nodes",
    "inventory",
    "use",
    "secure",
    "ssh",
    "connections",
    "servers",
    "encrypting",
    "communication",
    "servers",
    "able",
    "grab",
    "basic",
    "facts",
    "server",
    "understand",
    "push",
    "playbook",
    "server",
    "configure",
    "server",
    "remotely",
    "end",
    "goal",
    "environment",
    "consistent",
    "let",
    "ask",
    "simple",
    "question",
    "major",
    "opportunities",
    "ansible",
    "chef",
    "puppet",
    "really",
    "like",
    "hear",
    "answers",
    "comments",
    "pop",
    "get",
    "back",
    "really",
    "want",
    "hear",
    "feel",
    "ansible",
    "stronger",
    "product",
    "maybe",
    "think",
    "weaker",
    "product",
    "compares",
    "similar",
    "products",
    "market",
    "bonus",
    "going",
    "talk",
    "little",
    "bit",
    "ansible",
    "tower",
    "ansible",
    "tower",
    "extra",
    "product",
    "red",
    "hat",
    "created",
    "really",
    "kind",
    "puts",
    "cherry",
    "top",
    "ice",
    "cream",
    "icing",
    "cake",
    "ansible",
    "command",
    "line",
    "tool",
    "however",
    "well",
    "tower",
    "framework",
    "designed",
    "access",
    "ansible",
    "ansible",
    "tower",
    "framework",
    "easy",
    "use",
    "gui",
    "really",
    "makes",
    "easy",
    "able",
    "create",
    "environment",
    "want",
    "able",
    "manage",
    "devops",
    "plan",
    "without",
    "constantly",
    "work",
    "command",
    "prompt",
    "window",
    "instead",
    "opening",
    "terminal",
    "window",
    "command",
    "window",
    "writing",
    "complex",
    "instructions",
    "text",
    "use",
    "drag",
    "drop",
    "mouse",
    "click",
    "actions",
    "able",
    "create",
    "appropriate",
    "playbooks",
    "inventories",
    "pushes",
    "nerds",
    "alright",
    "talked",
    "lot",
    "anspol",
    "let",
    "take",
    "look",
    "specific",
    "company",
    "using",
    "ansible",
    "today",
    "example",
    "going",
    "look",
    "hootsuite",
    "hootsuite",
    "already",
    "used",
    "products",
    "great",
    "product",
    "hootsuite",
    "social",
    "media",
    "management",
    "system",
    "able",
    "help",
    "managing",
    "pushes",
    "social",
    "media",
    "content",
    "across",
    "popular",
    "social",
    "media",
    "platforms",
    "able",
    "provide",
    "analytics",
    "able",
    "provide",
    "tools",
    "marketing",
    "sales",
    "teams",
    "use",
    "able",
    "assess",
    "sentiment",
    "analysis",
    "messages",
    "pushed",
    "really",
    "grateful",
    "popular",
    "part",
    "popularity",
    "drove",
    "specific",
    "problem",
    "straight",
    "hootsuite",
    "challenge",
    "hootsuite",
    "constantly",
    "go",
    "back",
    "rebuild",
    "server",
    "environment",
    "could",
    "continuously",
    "consistent",
    "standard",
    "documentation",
    "rely",
    "memory",
    "able",
    "consistently",
    "imagine",
    "complex",
    "could",
    "get",
    "scaling",
    "popular",
    "product",
    "tens",
    "thousands",
    "hundreds",
    "thousands",
    "users",
    "ansible",
    "came",
    "really",
    "helped",
    "folks",
    "hootsuite",
    "today",
    "devops",
    "team",
    "hootsuite",
    "write",
    "playbooks",
    "specific",
    "instructions",
    "define",
    "architecture",
    "structure",
    "hardware",
    "nodes",
    "environments",
    "able",
    "standard",
    "product",
    "instead",
    "problem",
    "scaling",
    "environment",
    "able",
    "rebuild",
    "create",
    "new",
    "servers",
    "matter",
    "seconds",
    "bottom",
    "line",
    "ansible",
    "able",
    "provide",
    "hootsuite",
    "automation",
    "consistent",
    "configuration",
    "free",
    "time",
    "operations",
    "team",
    "instead",
    "managing",
    "servers",
    "able",
    "provide",
    "additional",
    "new",
    "value",
    "company",
    "warm",
    "welcome",
    "viewers",
    "anjali",
    "simply",
    "learn",
    "today",
    "taking",
    "tutorial",
    "ansible",
    "ansible",
    "currently",
    "trending",
    "popular",
    "configuration",
    "management",
    "tool",
    "used",
    "mostly",
    "devops",
    "approach",
    "learning",
    "today",
    "learn",
    "use",
    "ansible",
    "exactly",
    "ansible",
    "ansible",
    "architecture",
    "ansible",
    "works",
    "various",
    "benefits",
    "ansible",
    "finally",
    "demo",
    "installation",
    "apache",
    "http",
    "package",
    "client",
    "systems",
    "also",
    "hosting",
    "simple",
    "web",
    "page",
    "demo",
    "also",
    "show",
    "write",
    "simple",
    "playbook",
    "yemen",
    "inventory",
    "file",
    "let",
    "begin",
    "use",
    "ansible",
    "let",
    "consider",
    "scenario",
    "organization",
    "sam",
    "system",
    "administrator",
    "sam",
    "responsible",
    "company",
    "infrastructure",
    "company",
    "infrastructure",
    "basically",
    "consists",
    "systems",
    "could",
    "include",
    "web",
    "servers",
    "database",
    "servers",
    "various",
    "repositories",
    "system",
    "administrator",
    "sam",
    "needs",
    "ensure",
    "systems",
    "running",
    "updated",
    "versions",
    "software",
    "consider",
    "handful",
    "systems",
    "seems",
    "like",
    "pretty",
    "simple",
    "task",
    "sam",
    "simply",
    "go",
    "system",
    "system",
    "perform",
    "configurations",
    "required",
    "case",
    "organization",
    "organization",
    "large",
    "infrastructure",
    "could",
    "hundreds",
    "thousands",
    "systems",
    "sam",
    "work",
    "gets",
    "really",
    "difficult",
    "get",
    "tougher",
    "sam",
    "move",
    "system",
    "system",
    "performing",
    "task",
    "makes",
    "sam",
    "bored",
    "repeating",
    "task",
    "leaves",
    "space",
    "innovation",
    "without",
    "ideas",
    "innovation",
    "system",
    "grow",
    "worst",
    "manual",
    "labor",
    "prone",
    "errors",
    "sam",
    "well",
    "ansible",
    "comes",
    "use",
    "ansible",
    "sam",
    "write",
    "simple",
    "codes",
    "deployed",
    "onto",
    "systems",
    "configure",
    "correct",
    "states",
    "know",
    "use",
    "ansible",
    "let",
    "look",
    "exactly",
    "ansible",
    "ansible",
    "engine",
    "automates",
    "following",
    "tasks",
    "first",
    "orchestration",
    "orchestration",
    "basically",
    "means",
    "bringing",
    "together",
    "multiple",
    "applications",
    "ensuring",
    "order",
    "executed",
    "example",
    "consider",
    "web",
    "page",
    "require",
    "host",
    "webpage",
    "stores",
    "values",
    "takes",
    "user",
    "database",
    "first",
    "thing",
    "must",
    "ensure",
    "system",
    "database",
    "manager",
    "host",
    "web",
    "page",
    "kind",
    "order",
    "crucial",
    "ensure",
    "things",
    "work",
    "right",
    "next",
    "ansible",
    "automates",
    "configuration",
    "management",
    "configuration",
    "management",
    "simply",
    "means",
    "systems",
    "maintained",
    "consistent",
    "desired",
    "state",
    "tools",
    "automate",
    "configuration",
    "management",
    "include",
    "puppet",
    "chef",
    "finally",
    "ansible",
    "automates",
    "deployment",
    "deployment",
    "simply",
    "means",
    "deploying",
    "application",
    "onto",
    "servers",
    "different",
    "environments",
    "deploy",
    "application",
    "10",
    "systems",
    "different",
    "environments",
    "manually",
    "anymore",
    "ansible",
    "automates",
    "fact",
    "ansible",
    "also",
    "ensure",
    "applications",
    "code",
    "deployed",
    "certain",
    "time",
    "regular",
    "intervals",
    "know",
    "exactly",
    "ansible",
    "let",
    "look",
    "ansible",
    "architecture",
    "ansible",
    "two",
    "main",
    "components",
    "local",
    "machine",
    "node",
    "client",
    "machine",
    "local",
    "machine",
    "system",
    "administrator",
    "sits",
    "installs",
    "ansible",
    "end",
    "node",
    "client",
    "systems",
    "case",
    "ansible",
    "supporting",
    "software",
    "installed",
    "systems",
    "require",
    "configured",
    "completely",
    "controlled",
    "local",
    "machine",
    "local",
    "machine",
    "also",
    "module",
    "module",
    "collection",
    "configuration",
    "files",
    "case",
    "ansible",
    "configuration",
    "files",
    "called",
    "playbooks",
    "playbooks",
    "written",
    "yaml",
    "yaml",
    "stands",
    "yaml",
    "ai",
    "markup",
    "language",
    "honestly",
    "easiest",
    "language",
    "understand",
    "learn",
    "since",
    "close",
    "english",
    "also",
    "inventory",
    "inventory",
    "file",
    "nodes",
    "require",
    "configuration",
    "mentioned",
    "based",
    "kind",
    "configuration",
    "require",
    "also",
    "grouped",
    "together",
    "later",
    "demo",
    "look",
    "playbook",
    "inventory",
    "written",
    "probably",
    "make",
    "clearer",
    "course",
    "local",
    "machine",
    "needs",
    "communicate",
    "client",
    "done",
    "done",
    "ssh",
    "ssh",
    "secure",
    "shell",
    "basically",
    "provides",
    "protected",
    "communication",
    "unprotected",
    "environment",
    "okay",
    "saw",
    "various",
    "components",
    "ansible",
    "ansible",
    "exactly",
    "work",
    "local",
    "machine",
    "one",
    "end",
    "install",
    "ansible",
    "gone",
    "previous",
    "material",
    "ansible",
    "would",
    "come",
    "across",
    "term",
    "agentless",
    "often",
    "associated",
    "stool",
    "agentless",
    "means",
    "installing",
    "ansible",
    "local",
    "machine",
    "supporting",
    "software",
    "plugin",
    "installed",
    "clients",
    "means",
    "agent",
    "end",
    "local",
    "machine",
    "complete",
    "control",
    "hence",
    "term",
    "agentless",
    "another",
    "term",
    "would",
    "come",
    "across",
    "ansible",
    "push",
    "configuration",
    "since",
    "local",
    "machine",
    "complete",
    "control",
    "pushes",
    "playbooks",
    "nodes",
    "thus",
    "called",
    "push",
    "configuration",
    "tool",
    "playbooks",
    "inventory",
    "written",
    "local",
    "machine",
    "local",
    "machine",
    "connects",
    "nodes",
    "ssh",
    "client",
    "step",
    "optional",
    "always",
    "recommended",
    "facts",
    "collected",
    "facts",
    "basically",
    "current",
    "state",
    "node",
    "collected",
    "node",
    "sent",
    "local",
    "machine",
    "playbook",
    "executed",
    "task",
    "mentioned",
    "playbook",
    "compared",
    "current",
    "status",
    "note",
    "changes",
    "required",
    "made",
    "made",
    "playbooks",
    "executed",
    "notes",
    "configured",
    "desired",
    "states",
    "mentioned",
    "ansible",
    "currently",
    "trending",
    "tool",
    "market",
    "configuration",
    "management",
    "umbrella",
    "let",
    "look",
    "various",
    "benefits",
    "ansible",
    "gives",
    "position",
    "well",
    "ansible",
    "agentless",
    "efficient",
    "flexible",
    "simple",
    "important",
    "provides",
    "automated",
    "reporting",
    "let",
    "look",
    "agentless",
    "already",
    "mentioned",
    "require",
    "supporting",
    "software",
    "plugin",
    "installed",
    "node",
    "client",
    "system",
    "master",
    "complete",
    "control",
    "automatically",
    "means",
    "ansible",
    "efficient",
    "space",
    "client",
    "node",
    "systems",
    "resources",
    "get",
    "ansible",
    "running",
    "real",
    "quick",
    "ansible",
    "also",
    "flexible",
    "infrastructure",
    "prone",
    "change",
    "often",
    "ansible",
    "takes",
    "amount",
    "time",
    "adjust",
    "changes",
    "ansible",
    "get",
    "simpler",
    "playbooks",
    "written",
    "language",
    "yaml",
    "close",
    "english",
    "possibly",
    "get",
    "air",
    "important",
    "basically",
    "means",
    "playbook",
    "needs",
    "run",
    "n",
    "number",
    "systems",
    "would",
    "effect",
    "systems",
    "without",
    "side",
    "effect",
    "finally",
    "automated",
    "reporting",
    "case",
    "ansible",
    "playbook",
    "number",
    "tasks",
    "tasks",
    "named",
    "whenever",
    "run",
    "execute",
    "playbook",
    "gives",
    "report",
    "tasks",
    "ran",
    "successfully",
    "failed",
    "clients",
    "reachable",
    "information",
    "crucial",
    "dealing",
    "large",
    "infrastructure",
    "finally",
    "reach",
    "exciting",
    "part",
    "tutorial",
    "move",
    "actual",
    "let",
    "brief",
    "exactly",
    "hosting",
    "two",
    "virtual",
    "boxes",
    "centos",
    "7",
    "operating",
    "systems",
    "one",
    "would",
    "local",
    "machine",
    "node",
    "client",
    "machine",
    "local",
    "machine",
    "first",
    "install",
    "ansible",
    "write",
    "inventory",
    "playbook",
    "simply",
    "deploy",
    "playbook",
    "client",
    "machine",
    "one",
    "thing",
    "need",
    "need",
    "check",
    "configurations",
    "mentioned",
    "playbook",
    "made",
    "right",
    "begin",
    "demo",
    "oracle",
    "virtualbox",
    "master",
    "system",
    "local",
    "machine",
    "client",
    "machine",
    "let",
    "look",
    "two",
    "machines",
    "client",
    "machine",
    "terminals",
    "open",
    "right",
    "client",
    "machine",
    "terminal",
    "black",
    "background",
    "white",
    "text",
    "master",
    "machine",
    "terminal",
    "white",
    "background",
    "black",
    "text",
    "differentiate",
    "two",
    "start",
    "master",
    "machine",
    "first",
    "thing",
    "need",
    "install",
    "ansible",
    "yum",
    "install",
    "ansible",
    "hyphen",
    "command",
    "might",
    "take",
    "time",
    "yeah",
    "ansible",
    "installed",
    "next",
    "step",
    "go",
    "host",
    "file",
    "host",
    "file",
    "basically",
    "inventory",
    "specify",
    "nodes",
    "case",
    "one",
    "node",
    "path",
    "host",
    "file",
    "see",
    "everything",
    "commented",
    "type",
    "group",
    "client",
    "notes",
    "going",
    "name",
    "ansible",
    "clients",
    "music",
    "need",
    "type",
    "ip",
    "address",
    "client",
    "machine",
    "client",
    "machine",
    "ip",
    "address",
    "come",
    "advised",
    "check",
    "ip",
    "address",
    "client",
    "machine",
    "simple",
    "command",
    "ifconfig",
    "type",
    "ip",
    "address",
    "put",
    "space",
    "need",
    "mention",
    "username",
    "password",
    "client",
    "logging",
    "root",
    "user",
    "password",
    "user",
    "root",
    "case",
    "save",
    "file",
    "clear",
    "screen",
    "next",
    "move",
    "playbook",
    "need",
    "write",
    "playbook",
    "extension",
    "playbook",
    "yml",
    "stands",
    "yaman",
    "see",
    "already",
    "written",
    "playbook",
    "explain",
    "done",
    "yaml",
    "file",
    "always",
    "begins",
    "three",
    "dashes",
    "indicates",
    "start",
    "yaml",
    "file",
    "first",
    "thing",
    "need",
    "give",
    "name",
    "entire",
    "playbook",
    "named",
    "sample",
    "book",
    "host",
    "basically",
    "would",
    "executed",
    "saw",
    "earlier",
    "inventory",
    "mentioned",
    "clients",
    "group",
    "name",
    "ansible",
    "clients",
    "use",
    "name",
    "remote",
    "user",
    "user",
    "using",
    "client",
    "case",
    "root",
    "become",
    "true",
    "basically",
    "indicate",
    "need",
    "set",
    "privileges",
    "root",
    "called",
    "privilege",
    "escalation",
    "playbook",
    "consists",
    "tasks",
    "three",
    "tasks",
    "first",
    "task",
    "named",
    "install",
    "httpd",
    "installing",
    "http",
    "package",
    "basically",
    "apache",
    "server",
    "installing",
    "latest",
    "version",
    "hence",
    "state",
    "value",
    "latest",
    "next",
    "task",
    "running",
    "httpd",
    "service",
    "name",
    "httpd",
    "service",
    "need",
    "start",
    "running",
    "state",
    "started",
    "next",
    "task",
    "creating",
    "content",
    "part",
    "creating",
    "web",
    "page",
    "copy",
    "file",
    "created",
    "client",
    "content",
    "welcome",
    "destination",
    "file",
    "www",
    "know",
    "like",
    "default",
    "path",
    "use",
    "store",
    "html",
    "files",
    "see",
    "quite",
    "lot",
    "indentation",
    "comes",
    "yaml",
    "although",
    "simple",
    "write",
    "easy",
    "read",
    "indentation",
    "crucial",
    "first",
    "dash",
    "represents",
    "highest",
    "stage",
    "name",
    "playbook",
    "dashes",
    "task",
    "slightly",
    "shifted",
    "towards",
    "right",
    "two",
    "dashes",
    "location",
    "basically",
    "mean",
    "siblings",
    "priority",
    "would",
    "ensure",
    "tasks",
    "coming",
    "tasks",
    "label",
    "make",
    "sure",
    "directly",
    "name",
    "yeah",
    "pretty",
    "much",
    "write",
    "yaml",
    "file",
    "language",
    "pretty",
    "simple",
    "readable",
    "indentations",
    "absolutely",
    "necessary",
    "make",
    "sure",
    "spaces",
    "correctly",
    "placed",
    "save",
    "file",
    "next",
    "thing",
    "need",
    "check",
    "syntax",
    "yaml",
    "file",
    "absolutely",
    "right",
    "crucial",
    "command",
    "check",
    "syntax",
    "yaml",
    "file",
    "ansible",
    "playbook",
    "name",
    "playbook",
    "syntax",
    "check",
    "syntax",
    "errors",
    "output",
    "receive",
    "name",
    "playbook",
    "playbook",
    "ready",
    "executed",
    "command",
    "execute",
    "playbook",
    "ansible",
    "playbook",
    "name",
    "playbook",
    "playbooks",
    "executed",
    "see",
    "gathering",
    "facts",
    "facts",
    "note",
    "present",
    "state",
    "note",
    "collected",
    "sent",
    "local",
    "machine",
    "basically",
    "check",
    "configuration",
    "changes",
    "make",
    "already",
    "made",
    "made",
    "httpd",
    "package",
    "installed",
    "node",
    "first",
    "change",
    "made",
    "also",
    "installed",
    "course",
    "running",
    "second",
    "change",
    "made",
    "put",
    "running",
    "state",
    "final",
    "task",
    "create",
    "content",
    "okay",
    "state",
    "means",
    "contents",
    "already",
    "present",
    "client",
    "machine",
    "made",
    "way",
    "actually",
    "see",
    "different",
    "states",
    "present",
    "okay",
    "four",
    "four",
    "things",
    "fine",
    "facts",
    "gathered",
    "two",
    "things",
    "changed",
    "one",
    "already",
    "present",
    "two",
    "changes",
    "made",
    "zero",
    "clients",
    "unreachable",
    "zero",
    "tasks",
    "failed",
    "documentation",
    "referring",
    "previously",
    "ansible",
    "provides",
    "automatically",
    "useful",
    "see",
    "next",
    "step",
    "need",
    "check",
    "client",
    "machine",
    "changes",
    "desired",
    "made",
    "let",
    "move",
    "client",
    "client",
    "machine",
    "check",
    "since",
    "installing",
    "httpd",
    "package",
    "hosting",
    "web",
    "page",
    "best",
    "way",
    "open",
    "browser",
    "type",
    "localhost",
    "go",
    "apache",
    "server",
    "installed",
    "web",
    "page",
    "hosted",
    "today",
    "showing",
    "installation",
    "procedure",
    "configuration",
    "management",
    "tool",
    "puppet",
    "exactly",
    "use",
    "puppet",
    "consider",
    "scenario",
    "organization",
    "large",
    "infrastructure",
    "required",
    "systems",
    "servers",
    "infrastructure",
    "continuously",
    "maintained",
    "desired",
    "state",
    "puppet",
    "comes",
    "puppet",
    "automates",
    "entire",
    "procedure",
    "thus",
    "reducing",
    "manual",
    "work",
    "move",
    "demo",
    "let",
    "tell",
    "architecture",
    "puppet",
    "looks",
    "like",
    "puppet",
    "two",
    "main",
    "components",
    "puppet",
    "master",
    "puppet",
    "client",
    "puppet",
    "master",
    "write",
    "configuration",
    "files",
    "store",
    "puppet",
    "client",
    "basically",
    "client",
    "machines",
    "require",
    "configuration",
    "case",
    "puppet",
    "configuration",
    "files",
    "write",
    "called",
    "manifest",
    "let",
    "move",
    "demo",
    "two",
    "machines",
    "first",
    "server",
    "system",
    "basically",
    "master",
    "write",
    "configuration",
    "files",
    "others",
    "node",
    "client",
    "system",
    "let",
    "look",
    "machines",
    "node",
    "system",
    "terminals",
    "open",
    "terminal",
    "black",
    "background",
    "white",
    "text",
    "server",
    "master",
    "machine",
    "black",
    "background",
    "green",
    "text",
    "started",
    "server",
    "machine",
    "first",
    "thing",
    "need",
    "need",
    "remove",
    "firewall",
    "lot",
    "cases",
    "chances",
    "firewall",
    "stops",
    "connection",
    "server",
    "node",
    "since",
    "demo",
    "showing",
    "puppet",
    "works",
    "two",
    "virtual",
    "boxes",
    "safely",
    "remove",
    "firewall",
    "without",
    "worries",
    "implementing",
    "puppet",
    "organization",
    "number",
    "systems",
    "local",
    "network",
    "careful",
    "consequences",
    "firewall",
    "disabled",
    "next",
    "thing",
    "change",
    "hostname",
    "server",
    "system",
    "using",
    "puppet",
    "tool",
    "always",
    "advisable",
    "name",
    "server",
    "host",
    "puppet",
    "puppet",
    "tool",
    "identifies",
    "hostname",
    "puppet",
    "default",
    "host",
    "name",
    "master",
    "server",
    "system",
    "let",
    "check",
    "host",
    "name",
    "changed",
    "successfully",
    "yup",
    "done",
    "see",
    "still",
    "localhost",
    "appearing",
    "host",
    "name",
    "close",
    "terminal",
    "start",
    "see",
    "hostname",
    "changed",
    "puppet",
    "okay",
    "next",
    "thing",
    "install",
    "puppet",
    "labs",
    "make",
    "sure",
    "system",
    "connected",
    "net",
    "right",
    "puppet",
    "labs",
    "installed",
    "next",
    "need",
    "install",
    "puppet",
    "server",
    "service",
    "server",
    "system",
    "puppet",
    "server",
    "service",
    "installed",
    "need",
    "move",
    "system",
    "configurations",
    "puppet",
    "server",
    "path",
    "atc",
    "sysconfig",
    "puppet",
    "server",
    "configuration",
    "file",
    "puppet",
    "server",
    "come",
    "line",
    "line",
    "line",
    "allocates",
    "memory",
    "puppet",
    "server",
    "must",
    "remember",
    "puppet",
    "resource",
    "extensive",
    "tool",
    "case",
    "ensure",
    "encounter",
    "errors",
    "memory",
    "reduce",
    "sizes",
    "2",
    "gb",
    "allocated",
    "default",
    "change",
    "512",
    "mb",
    "lot",
    "cases",
    "may",
    "work",
    "without",
    "safer",
    "side",
    "make",
    "change",
    "save",
    "go",
    "back",
    "terminal",
    "ready",
    "start",
    "puppet",
    "server",
    "service",
    "first",
    "time",
    "start",
    "puppet",
    "server",
    "service",
    "may",
    "take",
    "next",
    "need",
    "enable",
    "puppet",
    "server",
    "service",
    "started",
    "enabled",
    "successfully",
    "output",
    "would",
    "get",
    "case",
    "still",
    "sure",
    "always",
    "check",
    "status",
    "point",
    "time",
    "see",
    "active",
    "everything",
    "fine",
    "next",
    "thing",
    "move",
    "agent",
    "system",
    "client",
    "node",
    "system",
    "install",
    "puppet",
    "labs",
    "need",
    "make",
    "small",
    "change",
    "hosts",
    "file",
    "let",
    "open",
    "host",
    "file",
    "yeah",
    "host",
    "file",
    "need",
    "add",
    "single",
    "line",
    "specifies",
    "puppet",
    "master",
    "first",
    "put",
    "puppet",
    "masters",
    "ip",
    "address",
    "followed",
    "host",
    "name",
    "add",
    "dns",
    "puppet",
    "server",
    "let",
    "go",
    "back",
    "server",
    "system",
    "find",
    "ip",
    "address",
    "ip",
    "address",
    "server",
    "system",
    "host",
    "name",
    "puppet",
    "server",
    "dns",
    "save",
    "file",
    "return",
    "terminal",
    "download",
    "puppet",
    "labs",
    "node",
    "system",
    "exact",
    "procedure",
    "followed",
    "downloading",
    "puppet",
    "labs",
    "server",
    "system",
    "note",
    "system",
    "puppet",
    "labs",
    "already",
    "downloaded",
    "next",
    "thing",
    "need",
    "install",
    "puppet",
    "agent",
    "service",
    "puppet",
    "pull",
    "type",
    "configuration",
    "tool",
    "means",
    "configuration",
    "files",
    "writing",
    "server",
    "pulled",
    "node",
    "system",
    "requires",
    "agent",
    "service",
    "installed",
    "client",
    "node",
    "agent",
    "system",
    "puppet",
    "agent",
    "service",
    "installed",
    "next",
    "check",
    "puppet",
    "server",
    "reachable",
    "node",
    "system",
    "8140",
    "port",
    "number",
    "puppet",
    "server",
    "must",
    "listening",
    "connected",
    "puppet",
    "guarantees",
    "server",
    "reachable",
    "node",
    "system",
    "everything",
    "configured",
    "right",
    "start",
    "agent",
    "service",
    "guys",
    "would",
    "noticed",
    "command",
    "starting",
    "agent",
    "service",
    "little",
    "complex",
    "command",
    "starting",
    "server",
    "service",
    "start",
    "agent",
    "service",
    "starting",
    "service",
    "also",
    "creating",
    "certificate",
    "certificate",
    "sent",
    "master",
    "system",
    "master",
    "system",
    "something",
    "called",
    "certificate",
    "authority",
    "gives",
    "master",
    "rights",
    "sign",
    "certificate",
    "agrees",
    "share",
    "information",
    "particular",
    "node",
    "let",
    "execute",
    "command",
    "function",
    "sending",
    "certificate",
    "starting",
    "agent",
    "service",
    "see",
    "services",
    "started",
    "successfully",
    "running",
    "state",
    "move",
    "master",
    "system",
    "server",
    "system",
    "first",
    "look",
    "certificates",
    "received",
    "certificate",
    "location",
    "see",
    "certificate",
    "received",
    "agent",
    "service",
    "within",
    "quotes",
    "name",
    "certificate",
    "next",
    "signing",
    "certificate",
    "name",
    "provide",
    "specify",
    "particular",
    "certificate",
    "want",
    "sign",
    "minute",
    "sign",
    "certificate",
    "note",
    "send",
    "certificate",
    "gets",
    "notification",
    "master",
    "accepted",
    "request",
    "begin",
    "sharing",
    "manifest",
    "files",
    "command",
    "signing",
    "certificate",
    "okay",
    "certificate",
    "signed",
    "means",
    "node",
    "request",
    "approved",
    "minute",
    "certificate",
    "signed",
    "request",
    "removed",
    "list",
    "execute",
    "command",
    "check",
    "list",
    "certificates",
    "find",
    "certificate",
    "anymore",
    "let",
    "check",
    "see",
    "requests",
    "pending",
    "accepted",
    "requests",
    "want",
    "look",
    "certificates",
    "signed",
    "unsigned",
    "use",
    "command",
    "addition",
    "certificates",
    "received",
    "far",
    "listed",
    "see",
    "plus",
    "sign",
    "indicates",
    "certificate",
    "request",
    "already",
    "accepted",
    "certificate",
    "signed",
    "next",
    "thing",
    "create",
    "sample",
    "manifest",
    "file",
    "part",
    "create",
    "manifest",
    "files",
    "file",
    "name",
    "files",
    "created",
    "right",
    "content",
    "file",
    "check",
    "agent",
    "receiving",
    "confirmed",
    "add",
    "content",
    "file",
    "let",
    "move",
    "agent",
    "system",
    "command",
    "execute",
    "agent",
    "system",
    "pull",
    "configuration",
    "files",
    "catalog",
    "applied",
    "seconds",
    "communication",
    "agent",
    "system",
    "master",
    "system",
    "working",
    "perfectly",
    "fine",
    "let",
    "add",
    "content",
    "previous",
    "placeholder",
    "file",
    "created",
    "master",
    "system",
    "open",
    "file",
    "editor",
    "okay",
    "going",
    "write",
    "code",
    "installing",
    "httpd",
    "package",
    "note",
    "system",
    "basically",
    "apache",
    "service",
    "node",
    "within",
    "quotes",
    "insert",
    "hostname",
    "node",
    "system",
    "node",
    "systems",
    "hostname",
    "client",
    "package",
    "wish",
    "install",
    "case",
    "httpd",
    "action",
    "performed",
    "small",
    "simple",
    "code",
    "save",
    "file",
    "let",
    "go",
    "back",
    "node",
    "system",
    "let",
    "pull",
    "second",
    "version",
    "configuration",
    "file",
    "every",
    "time",
    "execute",
    "command",
    "previously",
    "happens",
    "agent",
    "service",
    "agent",
    "service",
    "basically",
    "checks",
    "master",
    "system",
    "new",
    "configuration",
    "file",
    "added",
    "change",
    "previous",
    "configuration",
    "file",
    "made",
    "catalog",
    "applied",
    "catalog",
    "applied",
    "seconds",
    "check",
    "catalog",
    "served",
    "purpose",
    "let",
    "open",
    "browser",
    "type",
    "localhost",
    "see",
    "httpd",
    "package",
    "successfully",
    "installed",
    "apache",
    "testing",
    "page",
    "appear",
    "session",
    "going",
    "going",
    "cover",
    "would",
    "use",
    "puppet",
    "different",
    "elements",
    "components",
    "puppet",
    "actually",
    "work",
    "look",
    "companies",
    "adopting",
    "puppet",
    "advantages",
    "received",
    "puppet",
    "within",
    "organization",
    "finally",
    "wrap",
    "things",
    "reviewing",
    "actually",
    "write",
    "manifest",
    "puppet",
    "let",
    "get",
    "started",
    "puppet",
    "scenario",
    "administrator",
    "may",
    "already",
    "familiar",
    "administrator",
    "multiple",
    "servers",
    "work",
    "manage",
    "happens",
    "server",
    "goes",
    "problem",
    "jump",
    "onto",
    "server",
    "fix",
    "scenario",
    "changes",
    "multiple",
    "servers",
    "going",
    "puppet",
    "shows",
    "strap",
    "puppets",
    "write",
    "simple",
    "script",
    "written",
    "ruby",
    "write",
    "deploy",
    "servers",
    "settings",
    "servers",
    "code",
    "gets",
    "pushed",
    "servers",
    "problems",
    "choose",
    "either",
    "roll",
    "back",
    "servers",
    "previous",
    "working",
    "states",
    "set",
    "new",
    "state",
    "matter",
    "seconds",
    "matter",
    "large",
    "server",
    "environment",
    "reach",
    "servers",
    "environment",
    "secure",
    "able",
    "deploy",
    "software",
    "able",
    "infrastructure",
    "code",
    "advanced",
    "devops",
    "model",
    "building",
    "solutions",
    "let",
    "dig",
    "deeper",
    "puppet",
    "actually",
    "puppet",
    "configuration",
    "management",
    "tool",
    "maybe",
    "similar",
    "tools",
    "like",
    "chef",
    "may",
    "already",
    "familiar",
    "ensures",
    "systems",
    "configured",
    "desired",
    "predictable",
    "state",
    "public",
    "also",
    "used",
    "deployment",
    "tool",
    "software",
    "automatically",
    "deploy",
    "software",
    "systems",
    "specific",
    "systems",
    "done",
    "code",
    "means",
    "test",
    "environment",
    "guarantee",
    "environment",
    "want",
    "written",
    "deployed",
    "accurately",
    "let",
    "go",
    "components",
    "puppet",
    "breakdown",
    "puppet",
    "environment",
    "top",
    "main",
    "server",
    "environment",
    "client",
    "environment",
    "would",
    "installed",
    "servers",
    "would",
    "running",
    "within",
    "network",
    "look",
    "top",
    "part",
    "screen",
    "puppet",
    "master",
    "store",
    "contains",
    "main",
    "configuration",
    "files",
    "comprised",
    "manifests",
    "actual",
    "codes",
    "configuring",
    "clients",
    "templates",
    "combine",
    "codes",
    "together",
    "render",
    "final",
    "document",
    "files",
    "deployed",
    "content",
    "could",
    "potentially",
    "downloaded",
    "clients",
    "wrapping",
    "together",
    "module",
    "manifest",
    "templates",
    "files",
    "would",
    "apply",
    "certificate",
    "authority",
    "sign",
    "actual",
    "document",
    "clients",
    "actually",
    "know",
    "receiving",
    "appropriate",
    "authorized",
    "modules",
    "outside",
    "master",
    "server",
    "create",
    "manifest",
    "templates",
    "files",
    "would",
    "public",
    "client",
    "piece",
    "software",
    "used",
    "configure",
    "specific",
    "machine",
    "two",
    "parts",
    "client",
    "one",
    "agent",
    "constantly",
    "interacts",
    "master",
    "server",
    "ensure",
    "certificates",
    "updated",
    "appropriately",
    "fact",
    "current",
    "state",
    "client",
    "used",
    "communicated",
    "back",
    "agent",
    "let",
    "step",
    "workings",
    "puppet",
    "puppet",
    "environment",
    "master",
    "slave",
    "architecture",
    "clients",
    "distributed",
    "across",
    "network",
    "constantly",
    "communicating",
    "back",
    "master",
    "server",
    "environment",
    "puppet",
    "modules",
    "client",
    "agent",
    "sends",
    "certificate",
    "id",
    "server",
    "back",
    "master",
    "master",
    "sign",
    "certificate",
    "send",
    "back",
    "client",
    "authentication",
    "allows",
    "secure",
    "verifiable",
    "communication",
    "client",
    "master",
    "factor",
    "collects",
    "state",
    "client",
    "sends",
    "master",
    "based",
    "facts",
    "sent",
    "back",
    "master",
    "compiles",
    "manifests",
    "catalogs",
    "catalogs",
    "sent",
    "back",
    "clients",
    "agent",
    "client",
    "initiate",
    "catalog",
    "report",
    "generated",
    "client",
    "describes",
    "changes",
    "made",
    "sends",
    "back",
    "master",
    "goal",
    "ensuring",
    "master",
    "full",
    "understanding",
    "hardware",
    "running",
    "software",
    "network",
    "process",
    "repeated",
    "regular",
    "intervals",
    "ensuring",
    "client",
    "systems",
    "date",
    "let",
    "look",
    "companies",
    "using",
    "puppet",
    "today",
    "number",
    "companies",
    "adopted",
    "puppet",
    "way",
    "manage",
    "infrastructure",
    "companies",
    "using",
    "puppy",
    "today",
    "include",
    "spotify",
    "google",
    "att",
    "companies",
    "choosing",
    "use",
    "puppet",
    "main",
    "configuration",
    "management",
    "tool",
    "answer",
    "seen",
    "look",
    "specific",
    "company",
    "staples",
    "staples",
    "chose",
    "take",
    "use",
    "puppet",
    "configuration",
    "management",
    "tool",
    "use",
    "within",
    "private",
    "cloud",
    "results",
    "dramatic",
    "amount",
    "time",
    "organization",
    "able",
    "save",
    "deploying",
    "managing",
    "infrastructure",
    "using",
    "puppets",
    "enabled",
    "open",
    "time",
    "allow",
    "experiment",
    "new",
    "projects",
    "assignments",
    "real",
    "tangible",
    "benefit",
    "company",
    "let",
    "look",
    "write",
    "manifest",
    "puppet",
    "manifests",
    "designed",
    "writing",
    "code",
    "would",
    "configure",
    "specific",
    "node",
    "server",
    "environment",
    "manifests",
    "compiled",
    "catalogs",
    "executed",
    "client",
    "manifests",
    "written",
    "language",
    "ruby",
    "dot",
    "pp",
    "extension",
    "step",
    "five",
    "key",
    "steps",
    "writing",
    "manifest",
    "one",
    "create",
    "manifest",
    "written",
    "system",
    "administrator",
    "two",
    "compile",
    "manifest",
    "compiled",
    "catalog",
    "three",
    "deploy",
    "catalog",
    "deployed",
    "onto",
    "clients",
    "four",
    "execute",
    "catalogs",
    "run",
    "client",
    "agent",
    "five",
    "end",
    "clients",
    "configured",
    "specific",
    "desired",
    "state",
    "actually",
    "look",
    "manifest",
    "written",
    "written",
    "common",
    "syntax",
    "done",
    "work",
    "ruby",
    "really",
    "configuration",
    "systems",
    "past",
    "may",
    "look",
    "familiar",
    "break",
    "work",
    "start",
    "package",
    "file",
    "service",
    "resource",
    "type",
    "give",
    "name",
    "look",
    "features",
    "need",
    "said",
    "ip",
    "address",
    "actually",
    "looking",
    "command",
    "written",
    "present",
    "start",
    "manifest",
    "contain",
    "multiple",
    "resource",
    "types",
    "continue",
    "write",
    "manifest",
    "puppet",
    "default",
    "keyword",
    "applies",
    "manifest",
    "clients",
    "example",
    "would",
    "create",
    "file",
    "path",
    "creates",
    "folder",
    "called",
    "sample",
    "main",
    "folder",
    "called",
    "etc",
    "specified",
    "content",
    "written",
    "file",
    "posted",
    "folder",
    "going",
    "say",
    "want",
    "able",
    "trigger",
    "apache",
    "service",
    "ensure",
    "apache",
    "service",
    "installed",
    "node",
    "write",
    "manifest",
    "deploy",
    "client",
    "machine",
    "client",
    "machine",
    "new",
    "folder",
    "created",
    "file",
    "folder",
    "apache",
    "server",
    "installed",
    "machine",
    "exactly",
    "results",
    "machines",
    "going",
    "decide",
    "better",
    "operations",
    "environment",
    "chef",
    "puppet",
    "antipal",
    "saltstack",
    "four",
    "going",
    "go",
    "let",
    "go",
    "scenario",
    "want",
    "use",
    "tools",
    "let",
    "meet",
    "tim",
    "system",
    "administrator",
    "tim",
    "happy",
    "camper",
    "putting",
    "working",
    "systems",
    "network",
    "happens",
    "system",
    "fails",
    "fire",
    "server",
    "goes",
    "well",
    "tim",
    "knows",
    "exactly",
    "fix",
    "fire",
    "really",
    "easily",
    "problems",
    "become",
    "really",
    "difficult",
    "tim",
    "however",
    "multiple",
    "servers",
    "start",
    "failing",
    "particularly",
    "large",
    "expanding",
    "networks",
    "tim",
    "really",
    "needs",
    "configuration",
    "management",
    "tool",
    "need",
    "decide",
    "would",
    "best",
    "tool",
    "configuration",
    "management",
    "tools",
    "help",
    "make",
    "tim",
    "look",
    "like",
    "superstar",
    "configure",
    "right",
    "codes",
    "allows",
    "push",
    "instructions",
    "set",
    "servers",
    "quickly",
    "effectively",
    "scale",
    "right",
    "let",
    "go",
    "tools",
    "see",
    "ones",
    "use",
    "tools",
    "going",
    "go",
    "chef",
    "puppet",
    "support",
    "salt",
    "stacks",
    "videos",
    "software",
    "services",
    "go",
    "view",
    "get",
    "overview",
    "deep",
    "dive",
    "products",
    "work",
    "let",
    "go",
    "get",
    "know",
    "contestants",
    "first",
    "contestant",
    "chef",
    "chef",
    "tool",
    "allows",
    "configure",
    "large",
    "environments",
    "allows",
    "scale",
    "effectively",
    "across",
    "entire",
    "ecosystem",
    "infrastructure",
    "chef",
    "default",
    "open",
    "source",
    "code",
    "one",
    "things",
    "find",
    "consistent",
    "metaphor",
    "tools",
    "recommend",
    "simplylearn",
    "use",
    "open",
    "source",
    "code",
    "code",
    "actually",
    "written",
    "language",
    "ruby",
    "erlang",
    "really",
    "designed",
    "heterogeneous",
    "infrastructures",
    "looking",
    "mature",
    "solution",
    "way",
    "chef",
    "works",
    "write",
    "recipes",
    "compiled",
    "cookbooks",
    "cookbooks",
    "definition",
    "would",
    "set",
    "node",
    "node",
    "selection",
    "servers",
    "configured",
    "specific",
    "way",
    "instance",
    "may",
    "apache",
    "linux",
    "servers",
    "running",
    "may",
    "sql",
    "server",
    "running",
    "may",
    "python",
    "server",
    "running",
    "chef",
    "able",
    "communicate",
    "back",
    "forth",
    "nodes",
    "understand",
    "nodes",
    "impacted",
    "need",
    "instructions",
    "sent",
    "correct",
    "impact",
    "also",
    "send",
    "instructions",
    "server",
    "nodes",
    "make",
    "significant",
    "update",
    "minor",
    "update",
    "great",
    "communication",
    "going",
    "back",
    "forth",
    "look",
    "pros",
    "cons",
    "pros",
    "chef",
    "significant",
    "following",
    "chef",
    "resulted",
    "large",
    "collection",
    "recipes",
    "allow",
    "able",
    "quickly",
    "stand",
    "environments",
    "need",
    "learn",
    "complex",
    "recipes",
    "first",
    "thing",
    "go",
    "find",
    "recipes",
    "available",
    "integrates",
    "git",
    "really",
    "well",
    "provides",
    "really",
    "good",
    "strong",
    "version",
    "control",
    "consoles",
    "really",
    "around",
    "learning",
    "speed",
    "takes",
    "go",
    "beginner",
    "user",
    "chef",
    "expert",
    "considerable",
    "amount",
    "learning",
    "take",
    "place",
    "compounded",
    "learn",
    "ruby",
    "programming",
    "language",
    "main",
    "server",
    "really",
    "whole",
    "lot",
    "control",
    "really",
    "dependent",
    "communication",
    "throughout",
    "whole",
    "network",
    "right",
    "let",
    "look",
    "second",
    "contender",
    "puppet",
    "puppet",
    "actually",
    "many",
    "ways",
    "similar",
    "chef",
    "differences",
    "puppet",
    "designed",
    "able",
    "support",
    "large",
    "heterogeneous",
    "organization",
    "also",
    "built",
    "ruby",
    "uses",
    "dsl",
    "writing",
    "manifests",
    "strong",
    "similarities",
    "chef",
    "chef",
    "master",
    "slave",
    "infrastructure",
    "puppet",
    "master",
    "server",
    "manifests",
    "put",
    "together",
    "single",
    "catalog",
    "catalogs",
    "pushed",
    "clients",
    "ssl",
    "connection",
    "pros",
    "puppet",
    "chef",
    "really",
    "strong",
    "community",
    "around",
    "puppies",
    "great",
    "amount",
    "information",
    "support",
    "get",
    "right",
    "gate",
    "well",
    "developed",
    "reporting",
    "mechanism",
    "makes",
    "easier",
    "administrator",
    "able",
    "understand",
    "infrastructure",
    "one",
    "cons",
    "really",
    "good",
    "learning",
    "ruby",
    "chef",
    "know",
    "advanced",
    "tasks",
    "really",
    "need",
    "ruby",
    "skills",
    "chef",
    "server",
    "also",
    "much",
    "control",
    "let",
    "look",
    "third",
    "contender",
    "ansible",
    "ansible",
    "slightly",
    "different",
    "way",
    "ansible",
    "works",
    "actually",
    "pushes",
    "instructions",
    "server",
    "environment",
    "client",
    "server",
    "master",
    "slave",
    "environment",
    "ansible",
    "would",
    "communicating",
    "backwards",
    "forwards",
    "infrastructure",
    "merely",
    "going",
    "push",
    "instructions",
    "good",
    "news",
    "instructions",
    "written",
    "yaml",
    "yowell",
    "stands",
    "yaml",
    "markup",
    "language",
    "yaml",
    "actually",
    "pretty",
    "easy",
    "learn",
    "know",
    "xml",
    "xml",
    "pretty",
    "easy",
    "know",
    "xml",
    "going",
    "get",
    "yammo",
    "really",
    "well",
    "ansible",
    "work",
    "well",
    "environments",
    "focus",
    "getting",
    "servers",
    "running",
    "really",
    "fast",
    "responsive",
    "allow",
    "move",
    "quickly",
    "get",
    "infrastructure",
    "quick",
    "fast",
    "talking",
    "seconds",
    "minutes",
    "really",
    "really",
    "quick",
    "way",
    "ansible",
    "works",
    "put",
    "together",
    "playbook",
    "inventory",
    "playbook",
    "way",
    "ansible",
    "works",
    "playbook",
    "playbook",
    "goes",
    "inventory",
    "servers",
    "push",
    "instructions",
    "playbook",
    "servers",
    "pros",
    "ansible",
    "need",
    "agent",
    "installed",
    "remote",
    "nodes",
    "servers",
    "makes",
    "easier",
    "configuration",
    "yaml",
    "really",
    "easy",
    "learn",
    "get",
    "speed",
    "get",
    "proficient",
    "yamo",
    "quickly",
    "actual",
    "performance",
    "actually",
    "infrastructure",
    "running",
    "less",
    "tools",
    "list",
    "add",
    "proviso",
    "relative",
    "less",
    "still",
    "fast",
    "going",
    "lot",
    "faster",
    "individuals",
    "manually",
    "standing",
    "servers",
    "fast",
    "tools",
    "list",
    "gamble",
    "language",
    "easy",
    "learn",
    "powerful",
    "ruby",
    "ruby",
    "allow",
    "things",
    "advanced",
    "level",
    "ca",
    "easily",
    "ammo",
    "let",
    "look",
    "final",
    "contender",
    "salt",
    "stack",
    "sort",
    "stack",
    "cli",
    "based",
    "tool",
    "means",
    "get",
    "command",
    "line",
    "tools",
    "terminal",
    "window",
    "actually",
    "manage",
    "entire",
    "environment",
    "via",
    "salt",
    "sac",
    "instructions",
    "based",
    "python",
    "actually",
    "write",
    "yammer",
    "dsl",
    "really",
    "convenient",
    "product",
    "really",
    "designed",
    "environments",
    "want",
    "scale",
    "quickly",
    "resilient",
    "way",
    "sort",
    "snap",
    "works",
    "master",
    "environment",
    "pushes",
    "instructions",
    "call",
    "grains",
    "network",
    "let",
    "step",
    "pros",
    "cons",
    "saltstack",
    "subsequent",
    "easy",
    "use",
    "running",
    "really",
    "good",
    "reporting",
    "mechanism",
    "makes",
    "job",
    "operator",
    "devops",
    "environment",
    "much",
    "much",
    "easier",
    "actual",
    "setup",
    "though",
    "little",
    "bit",
    "tougher",
    "tools",
    "getting",
    "easier",
    "newer",
    "releases",
    "little",
    "bit",
    "tougher",
    "related",
    "saltstack",
    "fairly",
    "late",
    "game",
    "comes",
    "actually",
    "graphical",
    "user",
    "interface",
    "able",
    "create",
    "manage",
    "environment",
    "tools",
    "ansible",
    "actually",
    "ui",
    "environment",
    "quite",
    "time",
    "right",
    "gone",
    "four",
    "tools",
    "let",
    "see",
    "stack",
    "next",
    "let",
    "race",
    "begin",
    "let",
    "start",
    "first",
    "stage",
    "architecture",
    "architecture",
    "environments",
    "server",
    "client",
    "environment",
    "chef",
    "puppet",
    "salt",
    "snack",
    "similar",
    "architecture",
    "one",
    "exception",
    "ansible",
    "client",
    "solution",
    "pushing",
    "instructions",
    "server",
    "pushing",
    "network",
    "client",
    "environment",
    "communication",
    "back",
    "main",
    "client",
    "actually",
    "happening",
    "network",
    "let",
    "talk",
    "next",
    "stage",
    "ease",
    "setup",
    "look",
    "four",
    "tools",
    "one",
    "tool",
    "really",
    "stands",
    "ease",
    "setup",
    "ansible",
    "going",
    "easiest",
    "tool",
    "set",
    "new",
    "types",
    "tools",
    "environment",
    "may",
    "want",
    "start",
    "ansible",
    "try",
    "see",
    "easy",
    "create",
    "automated",
    "configuration",
    "looking",
    "tools",
    "said",
    "chef",
    "puppet",
    "socksec",
    "hard",
    "set",
    "either",
    "find",
    "actually",
    "great",
    "instructions",
    "setup",
    "online",
    "community",
    "let",
    "talk",
    "languages",
    "use",
    "configuration",
    "two",
    "different",
    "types",
    "language",
    "chef",
    "ansible",
    "procedural",
    "actually",
    "specify",
    "actually",
    "supposed",
    "task",
    "instructions",
    "puppet",
    "sort",
    "stack",
    "decorative",
    "specify",
    "instructions",
    "let",
    "talk",
    "scalability",
    "tools",
    "scale",
    "effectively",
    "imagine",
    "tools",
    "designed",
    "scalability",
    "driver",
    "kind",
    "tools",
    "want",
    "able",
    "scale",
    "massive",
    "organizations",
    "management",
    "tools",
    "look",
    "like",
    "four",
    "contenders",
    "split",
    "ansible",
    "sort",
    "stack",
    "management",
    "tools",
    "really",
    "easy",
    "use",
    "gon",
    "na",
    "love",
    "using",
    "fantastic",
    "use",
    "puppet",
    "chef",
    "management",
    "tools",
    "much",
    "harder",
    "learn",
    "require",
    "learn",
    "either",
    "puppet",
    "dsl",
    "ruby",
    "dsl",
    "able",
    "true",
    "master",
    "environment",
    "interoperability",
    "look",
    "like",
    "imagine",
    "similar",
    "scalability",
    "interoperability",
    "products",
    "high",
    "four",
    "cases",
    "let",
    "talk",
    "cloud",
    "availability",
    "increasingly",
    "becoming",
    "important",
    "organizations",
    "move",
    "rapidly",
    "onto",
    "cloud",
    "services",
    "well",
    "ansible",
    "softstack",
    "big",
    "fail",
    "neither",
    "available",
    "popular",
    "cloud",
    "environments",
    "puppet",
    "chef",
    "actually",
    "available",
    "amazon",
    "azure",
    "actually",
    "chance",
    "update",
    "chef",
    "link",
    "chef",
    "available",
    "azure",
    "well",
    "amazon",
    "communication",
    "look",
    "like",
    "four",
    "tools",
    "communication",
    "slightly",
    "different",
    "chef",
    "knife",
    "tool",
    "whereas",
    "puppet",
    "uses",
    "ssl",
    "secure",
    "sockets",
    "layer",
    "ansible",
    "saltsec",
    "use",
    "secure",
    "socket",
    "hashing",
    "ssh",
    "communication",
    "tool",
    "bottom",
    "line",
    "four",
    "tools",
    "secure",
    "communication",
    "wins",
    "well",
    "reality",
    "four",
    "tools",
    "good",
    "really",
    "dependent",
    "capabilities",
    "type",
    "environment",
    "looking",
    "manage",
    "determine",
    "four",
    "tools",
    "use",
    "tools",
    "open",
    "source",
    "go",
    "experiment",
    "lot",
    "videos",
    "team",
    "done",
    "ton",
    "videos",
    "tools",
    "feel",
    "free",
    "find",
    "tools",
    "covered",
    "learn",
    "quickly",
    "use",
    "consider",
    "requirements",
    "consider",
    "capabilities",
    "team",
    "ruby",
    "developers",
    "someone",
    "team",
    "knows",
    "ruby",
    "ability",
    "choose",
    "broader",
    "set",
    "tools",
    "becomes",
    "much",
    "interesting",
    "however",
    "new",
    "coding",
    "may",
    "want",
    "consider",
    "tools",
    "final",
    "answer",
    "going",
    "really",
    "interested",
    "decision",
    "monitoring",
    "term",
    "says",
    "monitoring",
    "watching",
    "logging",
    "production",
    "environment",
    "course",
    "whole",
    "bunch",
    "monitoring",
    "tools",
    "become",
    "important",
    "part",
    "production",
    "environment",
    "lot",
    "monitoring",
    "tools",
    "also",
    "seen",
    "also",
    "used",
    "especially",
    "uac",
    "environment",
    "optionally",
    "time",
    "even",
    "know",
    "development",
    "environment",
    "development",
    "different",
    "development",
    "services",
    "usually",
    "configurations",
    "know",
    "maybe",
    "decent",
    "uh",
    "development",
    "slash",
    "integration",
    "server",
    "especially",
    "uh",
    "long",
    "running",
    "scripts",
    "uh",
    "programs",
    "use",
    "lot",
    "servers",
    "uh",
    "know",
    "maybe",
    "cpu",
    "processing",
    "power",
    "monitoring",
    "tools",
    "writing",
    "scripts",
    "know",
    "uh",
    "uh",
    "unit",
    "testing",
    "scripts",
    "know",
    "see",
    "uh",
    "kind",
    "server",
    "utilization",
    "happens",
    "run",
    "script",
    "know",
    "put",
    "production",
    "actually",
    "know",
    "slow",
    "production",
    "server",
    "kind",
    "uh",
    "impact",
    "know",
    "rest",
    "application",
    "applications",
    "running",
    "server",
    "particular",
    "chapter",
    "context",
    "production",
    "environment",
    "tools",
    "basically",
    "monitor",
    "server",
    "monitor",
    "switches",
    "course",
    "monitor",
    "application",
    "services",
    "deployed",
    "servers",
    "generate",
    "alerts",
    "something",
    "goes",
    "wrong",
    "whole",
    "job",
    "monitoring",
    "continuously",
    "watching",
    "continuously",
    "looking",
    "running",
    "happening",
    "going",
    "going",
    "cpu",
    "peaking",
    "memory",
    "peaking",
    "typically",
    "send",
    "limits",
    "different",
    "parameters",
    "anytime",
    "parameters",
    "goes",
    "outside",
    "limit",
    "know",
    "even",
    "less",
    "monitoring",
    "tools",
    "usually",
    "send",
    "alert",
    "alerts",
    "could",
    "sms",
    "alerts",
    "email",
    "alerts",
    "usually",
    "people",
    "monitoring",
    "monitoring",
    "tools",
    "look",
    "look",
    "issues",
    "reported",
    "also",
    "generate",
    "alerts",
    "problem",
    "dissolved",
    "work",
    "ways",
    "nagios",
    "open",
    "source",
    "monitoring",
    "tool",
    "even",
    "monitor",
    "network",
    "services",
    "little",
    "diagram",
    "small",
    "nadia",
    "somewhere",
    "read",
    "status",
    "different",
    "devices",
    "think",
    "yeah",
    "different",
    "devices",
    "nigeria",
    "sending",
    "status",
    "browser",
    "sms",
    "email",
    "graph",
    "also",
    "different",
    "objects",
    "nigeria",
    "basically",
    "monitoring",
    "smtp",
    "server",
    "read",
    "smtp",
    "know",
    "tcpip",
    "know",
    "database",
    "server",
    "okay",
    "database",
    "server",
    "application",
    "server",
    "switch",
    "router",
    "okay",
    "okay",
    "read",
    "different",
    "kind",
    "object",
    "different",
    "kind",
    "servers",
    "nigeria",
    "monitors",
    "different",
    "kind",
    "uh",
    "devices",
    "statuses",
    "send",
    "helps",
    "uh",
    "monitor",
    "cpu",
    "usage",
    "disk",
    "usage",
    "know",
    "even",
    "system",
    "logs",
    "uses",
    "script",
    "written",
    "uh",
    "know",
    "scripting",
    "language",
    "actually",
    "naji",
    "remote",
    "plugin",
    "executors",
    "basically",
    "agents",
    "allow",
    "remote",
    "scripts",
    "executed",
    "well",
    "scripts",
    "usually",
    "executed",
    "monitor",
    "cpu",
    "use",
    "number",
    "users",
    "logged",
    "logged",
    "logged",
    "time",
    "logged",
    "time",
    "things",
    "monitoring",
    "tools",
    "work",
    "concept",
    "polling",
    "polling",
    "like",
    "know",
    "nrp",
    "agent",
    "program",
    "continuously",
    "keep",
    "polling",
    "machine",
    "certain",
    "parameters",
    "configured",
    "nadio",
    "monitored",
    "program",
    "continuously",
    "keeps",
    "pinging",
    "server",
    "bringing",
    "program",
    "uh",
    "know",
    "keep",
    "checking",
    "asked",
    "check",
    "case",
    "logged",
    "users",
    "keep",
    "checking",
    "uh",
    "know",
    "like",
    "maybe",
    "every",
    "30",
    "seconds",
    "every",
    "one",
    "minute",
    "keep",
    "pinging",
    "uh",
    "see",
    "many",
    "users",
    "logged",
    "onto",
    "server",
    "users",
    "logged",
    "time",
    "logged",
    "time",
    "logged",
    "things",
    "like",
    "pull",
    "agents",
    "remote",
    "missions",
    "basically",
    "means",
    "agent",
    "programs",
    "know",
    "help",
    "call",
    "ping",
    "even",
    "remote",
    "machines",
    "nigeria",
    "remote",
    "data",
    "processor",
    "agent",
    "allows",
    "uh",
    "know",
    "flexible",
    "data",
    "transport",
    "know",
    "uses",
    "uh",
    "http",
    "xml",
    "protocols",
    "talking",
    "essentially",
    "databases",
    "data",
    "server",
    "usages",
    "like",
    "know",
    "within",
    "oracle",
    "database",
    "many",
    "database",
    "instances",
    "know",
    "load",
    "balancing",
    "set",
    "data",
    "moving",
    "different",
    "uh",
    "database",
    "servers",
    "within",
    "oracle",
    "data",
    "moving",
    "within",
    "load",
    "balancers",
    "always",
    "dip",
    "uh",
    "always",
    "backup",
    "database",
    "see",
    "mention",
    "trp",
    "soon",
    "say",
    "word",
    "database",
    "backup",
    "plan",
    "know",
    "uh",
    "data",
    "moving",
    "much",
    "time",
    "backup",
    "take",
    "take",
    "much",
    "time",
    "know",
    "take",
    "helps",
    "kind",
    "monitoring",
    "ns",
    "client",
    "basically",
    "mainly",
    "used",
    "monitor",
    "windows",
    "machines",
    "typically",
    "talk",
    "servers",
    "end",
    "talking",
    "know",
    "unix",
    "linux",
    "servers",
    "course",
    "lot",
    "microsoft",
    "technologies",
    "uh",
    "robust",
    "know",
    "like",
    "sharepoint",
    "things",
    "like",
    "windows",
    "servers",
    "10",
    "years",
    "ago",
    "would",
    "talk",
    "windows",
    "server",
    "actually",
    "kind",
    "frowned",
    "upon",
    "especially",
    "production",
    "know",
    "helps",
    "monitor",
    "usual",
    "cpu",
    "usage",
    "pulls",
    "particular",
    "agent",
    "listens",
    "particular",
    "port",
    "always",
    "reserved",
    "port",
    "usually",
    "system",
    "administrators",
    "server",
    "admin",
    "administrators",
    "know",
    "things",
    "today",
    "let",
    "get",
    "started",
    "jenkins",
    "jenkins",
    "opinion",
    "one",
    "popular",
    "continuous",
    "integration",
    "servers",
    "recent",
    "times",
    "began",
    "hobby",
    "project",
    "developer",
    "working",
    "sun",
    "microsystems",
    "way",
    "back",
    "early",
    "mid",
    "2000s",
    "gradually",
    "eventually",
    "evolved",
    "powerful",
    "robust",
    "automation",
    "servers",
    "wide",
    "adoption",
    "since",
    "released",
    "mit",
    "license",
    "almost",
    "free",
    "use",
    "jenkins",
    "vast",
    "developer",
    "community",
    "supports",
    "writing",
    "kinds",
    "plugins",
    "plugins",
    "heart",
    "soul",
    "jenkins",
    "using",
    "plugins",
    "one",
    "connect",
    "jenkins",
    "anything",
    "everything",
    "sun",
    "introduction",
    "let",
    "get",
    "covered",
    "part",
    "tutorial",
    "get",
    "prerequisites",
    "required",
    "installing",
    "jenkins",
    "post",
    "go",
    "ahead",
    "install",
    "jenkins",
    "windows",
    "box",
    "first",
    "time",
    "configuration",
    "needs",
    "done",
    "covering",
    "well",
    "jenkins",
    "installed",
    "configured",
    "properly",
    "get",
    "user",
    "administrative",
    "part",
    "create",
    "users",
    "use",
    "plugins",
    "setting",
    "various",
    "kinds",
    "access",
    "permissions",
    "users",
    "also",
    "put",
    "freestyle",
    "jobs",
    "freestyle",
    "job",
    "nothing",
    "simple",
    "job",
    "also",
    "show",
    "powerfulness",
    "jenkins",
    "scheduling",
    "particular",
    "job",
    "run",
    "based",
    "upon",
    "time",
    "schedule",
    "also",
    "connect",
    "jenkins",
    "github",
    "github",
    "source",
    "code",
    "source",
    "code",
    "repository",
    "got",
    "repositories",
    "put",
    "using",
    "jenkins",
    "connect",
    "github",
    "pull",
    "repository",
    "existing",
    "github",
    "onto",
    "jenkins",
    "box",
    "run",
    "commands",
    "build",
    "particular",
    "repository",
    "pulled",
    "github",
    "sending",
    "emails",
    "important",
    "configurations",
    "jenkins",
    "continuous",
    "integration",
    "server",
    "matter",
    "whenever",
    "notifications",
    "sent",
    "part",
    "either",
    "build",
    "going",
    "bad",
    "built",
    "good",
    "built",
    "propagated",
    "environment",
    "scenarios",
    "would",
    "need",
    "contains",
    "integration",
    "servers",
    "sending",
    "notifications",
    "get",
    "little",
    "bit",
    "details",
    "configure",
    "jenkins",
    "sending",
    "emails",
    "also",
    "get",
    "scenario",
    "web",
    "application",
    "maven",
    "based",
    "java",
    "web",
    "application",
    "pulled",
    "github",
    "repository",
    "deploy",
    "onto",
    "tomcat",
    "server",
    "tomcat",
    "server",
    "locally",
    "running",
    "system",
    "eventually",
    "get",
    "one",
    "important",
    "topic",
    "master",
    "slave",
    "configuration",
    "important",
    "pretty",
    "interesting",
    "topic",
    "distributed",
    "builds",
    "achieved",
    "using",
    "master",
    "slave",
    "configuration",
    "bring",
    "slave",
    "connect",
    "slave",
    "master",
    "also",
    "put",
    "job",
    "kind",
    "delegate",
    "particular",
    "job",
    "slave",
    "configuration",
    "finally",
    "let",
    "know",
    "use",
    "plugins",
    "back",
    "jenkins",
    "jenkins",
    "got",
    "lot",
    "useful",
    "information",
    "set",
    "terms",
    "build",
    "environments",
    "terms",
    "workspace",
    "easily",
    "backed",
    "using",
    "plugin",
    "going",
    "covering",
    "part",
    "tutorial",
    "jenkins",
    "web",
    "application",
    "written",
    "java",
    "various",
    "ways",
    "use",
    "install",
    "jenkins",
    "listed",
    "popular",
    "three",
    "mechanisms",
    "jenkins",
    "usually",
    "installed",
    "system",
    "topmost",
    "one",
    "windows",
    "linux",
    "based",
    "services",
    "windows",
    "like",
    "way",
    "going",
    "use",
    "mechanism",
    "demo",
    "would",
    "download",
    "msi",
    "installer",
    "specific",
    "jenkins",
    "install",
    "service",
    "whenever",
    "install",
    "service",
    "goes",
    "ahead",
    "nicely",
    "installs",
    "required",
    "jenkins",
    "service",
    "started",
    "stopped",
    "based",
    "upon",
    "need",
    "flavor",
    "linux",
    "well",
    "one",
    "way",
    "running",
    "jenkins",
    "downloading",
    "generic",
    "warp",
    "file",
    "long",
    "jdk",
    "installed",
    "launch",
    "war",
    "file",
    "command",
    "opening",
    "command",
    "prompt",
    "shell",
    "prompt",
    "differently",
    "linux",
    "box",
    "specifying",
    "java",
    "hyphen",
    "jar",
    "name",
    "war",
    "file",
    "typically",
    "brings",
    "web",
    "application",
    "know",
    "continue",
    "installation",
    "thing",
    "want",
    "stop",
    "using",
    "jenkins",
    "go",
    "ahead",
    "close",
    "prompt",
    "either",
    "control",
    "c",
    "bring",
    "prompt",
    "jenkins",
    "server",
    "would",
    "older",
    "versions",
    "jenkins",
    "run",
    "popularly",
    "using",
    "way",
    "already",
    "java",
    "based",
    "web",
    "server",
    "running",
    "running",
    "kind",
    "drop",
    "war",
    "file",
    "root",
    "folder",
    "httpd",
    "root",
    "folder",
    "web",
    "server",
    "jenkins",
    "would",
    "explode",
    "kind",
    "bring",
    "application",
    "user",
    "credentials",
    "user",
    "administration",
    "taken",
    "care",
    "apache",
    "tomcat",
    "server",
    "web",
    "server",
    "jenkins",
    "running",
    "older",
    "way",
    "running",
    "still",
    "people",
    "use",
    "want",
    "maintain",
    "two",
    "servers",
    "already",
    "java",
    "web",
    "server",
    "nicely",
    "maintained",
    "backed",
    "jenkins",
    "run",
    "attached",
    "right",
    "either",
    "ways",
    "matter",
    "however",
    "going",
    "bring",
    "jenkins",
    "instance",
    "way",
    "going",
    "operate",
    "jenkins",
    "going",
    "similar",
    "one",
    "subtle",
    "changes",
    "terms",
    "user",
    "administration",
    "launching",
    "web",
    "server",
    "take",
    "care",
    "user",
    "administration",
    "otherwise",
    "commands",
    "configuration",
    "way",
    "going",
    "run",
    "demo",
    "going",
    "across",
    "installations",
    "right",
    "prerequisites",
    "running",
    "jenkins",
    "mentioned",
    "earlier",
    "jenkins",
    "nothing",
    "simple",
    "web",
    "application",
    "written",
    "java",
    "needs",
    "java",
    "preferably",
    "jdk",
    "2gb",
    "ram",
    "recommended",
    "ram",
    "running",
    "jenkins",
    "also",
    "like",
    "open",
    "source",
    "tool",
    "sets",
    "install",
    "jdk",
    "ensure",
    "set",
    "environment",
    "variable",
    "java",
    "home",
    "point",
    "right",
    "directory",
    "something",
    "specific",
    "jdk",
    "open",
    "source",
    "tools",
    "installed",
    "always",
    "preferred",
    "environment",
    "variable",
    "got",
    "set",
    "specific",
    "particular",
    "tool",
    "going",
    "use",
    "generic",
    "thing",
    "know",
    "open",
    "source",
    "projects",
    "way",
    "open",
    "source",
    "projects",
    "discover",
    "using",
    "environment",
    "variables",
    "general",
    "practice",
    "good",
    "practice",
    "always",
    "set",
    "environment",
    "variables",
    "accordingly",
    "already",
    "jdk",
    "installed",
    "system",
    "case",
    "would",
    "recommend",
    "navigate",
    "browser",
    "oracle",
    "homepage",
    "type",
    "search",
    "install",
    "jdk",
    "navigate",
    "oracle",
    "homepage",
    "accept",
    "license",
    "agreement",
    "bunch",
    "installers",
    "okay",
    "pick",
    "based",
    "upon",
    "operating",
    "system",
    "running",
    "windows",
    "64",
    "installer",
    "already",
    "installed",
    "running",
    "system",
    "get",
    "details",
    "downloading",
    "installing",
    "let",
    "show",
    "install",
    "done",
    "regard",
    "path",
    "get",
    "environment",
    "variables",
    "right",
    "set",
    "java",
    "home",
    "variable",
    "see",
    "sequel",
    "program",
    "files",
    "java",
    "jdk",
    "java",
    "located",
    "c",
    "program",
    "files",
    "c",
    "program",
    "files",
    "java",
    "okay",
    "home",
    "directory",
    "jdk",
    "set",
    "environment",
    "variable",
    "see",
    "java",
    "home",
    "right",
    "one",
    "thing",
    "ensure",
    "case",
    "want",
    "run",
    "java",
    "java",
    "c",
    "command",
    "prompt",
    "ensure",
    "also",
    "add",
    "path",
    "path",
    "variable",
    "see",
    "somewhere",
    "see",
    "yes",
    "go",
    "c",
    "colon",
    "program",
    "files",
    "java",
    "jdk",
    "pin",
    "two",
    "ensure",
    "java",
    "installation",
    "nice",
    "know",
    "good",
    "enough",
    "check",
    "double",
    "check",
    "verify",
    "let",
    "open",
    "simple",
    "command",
    "prompt",
    "type",
    "java",
    "iphone",
    "version",
    "right",
    "java",
    "c",
    "iphone",
    "version",
    "compiler",
    "path",
    "java",
    "path",
    "told",
    "even",
    "environment",
    "variable",
    "specific",
    "java",
    "installed",
    "correctly",
    "good",
    "go",
    "ahead",
    "jenkins",
    "installation",
    "prerequisites",
    "set",
    "installing",
    "jenkins",
    "let",
    "go",
    "ahead",
    "download",
    "jenkins",
    "let",
    "open",
    "browser",
    "say",
    "download",
    "jenkins",
    "right",
    "lts",
    "nothing",
    "long",
    "term",
    "support",
    "stable",
    "versions",
    "weeklies",
    "would",
    "recommend",
    "try",
    "unless",
    "real",
    "need",
    "long",
    "term",
    "support",
    "good",
    "enough",
    "mentioned",
    "many",
    "flavors",
    "jenkins",
    "available",
    "download",
    "also",
    "docker",
    "container",
    "wherein",
    "know",
    "launch",
    "jenkins",
    "container",
    "get",
    "details",
    "tutorial",
    "right",
    "want",
    "yes",
    "war",
    "file",
    "generic",
    "war",
    "file",
    "talking",
    "earlier",
    "windows",
    "msi",
    "installer",
    "go",
    "ahead",
    "download",
    "msi",
    "installer",
    "already",
    "downloaded",
    "let",
    "open",
    "right",
    "downloaded",
    "jenkins",
    "instance",
    "installer",
    "pretty",
    "maybe",
    "months",
    "old",
    "good",
    "enough",
    "start",
    "jenkins",
    "installation",
    "aware",
    "one",
    "fact",
    "variable",
    "called",
    "jenkins",
    "home",
    "jenkins",
    "would",
    "store",
    "configuration",
    "data",
    "jobs",
    "project",
    "workspace",
    "specific",
    "jenkins",
    "default",
    "set",
    "particular",
    "directory",
    "install",
    "msi",
    "installer",
    "installation",
    "gets",
    "c",
    "colon",
    "program",
    "files",
    "86",
    "jenkins",
    "folder",
    "run",
    "war",
    "file",
    "depending",
    "upon",
    "user",
    "id",
    "running",
    "war",
    "file",
    "jenkins",
    "folder",
    "dot",
    "jenkins",
    "folder",
    "gets",
    "created",
    "inside",
    "user",
    "home",
    "directory",
    "case",
    "need",
    "wherein",
    "want",
    "backup",
    "jenkins",
    "want",
    "jenkins",
    "installations",
    "get",
    "specific",
    "directories",
    "go",
    "ahead",
    "set",
    "jenkins",
    "home",
    "variable",
    "accordingly",
    "even",
    "begin",
    "installation",
    "need",
    "things",
    "already",
    "downloaded",
    "installer",
    "let",
    "go",
    "ahead",
    "default",
    "installation",
    "right",
    "jenkins",
    "msi",
    "installer",
    "would",
    "want",
    "make",
    "changes",
    "jenkins",
    "configuration",
    "c",
    "colon",
    "program",
    "files",
    "good",
    "yeah",
    "destination",
    "folder",
    "configuration",
    "specific",
    "goes",
    "happy",
    "want",
    "change",
    "would",
    "say",
    "go",
    "ahead",
    "click",
    "installation",
    "okay",
    "typically",
    "happens",
    "jenkins",
    "installation",
    "gets",
    "start",
    "installing",
    "small",
    "checks",
    "needs",
    "done",
    "default",
    "jenkins",
    "launches",
    "port",
    "8080",
    "let",
    "open",
    "localhost",
    "small",
    "checking",
    "done",
    "part",
    "installation",
    "process",
    "wherein",
    "need",
    "type",
    "hash",
    "key",
    "right",
    "simple",
    "hash",
    "key",
    "gets",
    "stored",
    "copy",
    "path",
    "told",
    "running",
    "war",
    "file",
    "would",
    "see",
    "logs",
    "right",
    "simple",
    "hash",
    "key",
    "gets",
    "created",
    "every",
    "time",
    "jenkins",
    "station",
    "part",
    "installation",
    "asks",
    "great",
    "crib",
    "looks",
    "good",
    "going",
    "ahead",
    "right",
    "one",
    "important",
    "part",
    "installation",
    "would",
    "need",
    "install",
    "recommended",
    "plugins",
    "happens",
    "plugins",
    "related",
    "like",
    "typical",
    "rpm",
    "kind",
    "problem",
    "try",
    "install",
    "plugin",
    "got",
    "dependency",
    "installed",
    "get",
    "issues",
    "order",
    "get",
    "rid",
    "jenkins",
    "recommends",
    "bunch",
    "plugins",
    "already",
    "recommended",
    "go",
    "ahead",
    "blindly",
    "click",
    "install",
    "recommended",
    "plugin",
    "see",
    "whole",
    "lot",
    "plugins",
    "bare",
    "essential",
    "plugins",
    "required",
    "jenkins",
    "order",
    "run",
    "properly",
    "jenkins",
    "part",
    "installation",
    "would",
    "get",
    "plugins",
    "install",
    "good",
    "combination",
    "kind",
    "begin",
    "mind",
    "moment",
    "jenkins",
    "needs",
    "lots",
    "bandwidth",
    "terms",
    "network",
    "case",
    "know",
    "network",
    "good",
    "plugins",
    "would",
    "kind",
    "fail",
    "plugins",
    "know",
    "available",
    "openly",
    "mirrored",
    "sites",
    "sometimes",
    "may",
    "worry",
    "case",
    "plugins",
    "kind",
    "fail",
    "install",
    "get",
    "option",
    "kind",
    "retry",
    "installing",
    "ensure",
    "know",
    "least",
    "1995",
    "plugins",
    "installed",
    "without",
    "problems",
    "let",
    "pause",
    "video",
    "minute",
    "get",
    "back",
    "plugins",
    "installed",
    "plugin",
    "installation",
    "good",
    "failures",
    "plugins",
    "get",
    "create",
    "first",
    "admin",
    "user",
    "one",
    "important",
    "point",
    "got",
    "remember",
    "keen",
    "given",
    "username",
    "password",
    "ensure",
    "kind",
    "remember",
    "hard",
    "get",
    "back",
    "username",
    "password",
    "case",
    "forget",
    "alright",
    "going",
    "create",
    "simple",
    "username",
    "password",
    "something",
    "remember",
    "name",
    "um",
    "email",
    "id",
    "kind",
    "optional",
    "allow",
    "go",
    "ahead",
    "case",
    "given",
    "admin",
    "got",
    "password",
    "got",
    "remember",
    "password",
    "full",
    "name",
    "right",
    "say",
    "save",
    "finish",
    "right",
    "kind",
    "completed",
    "jenkins",
    "installation",
    "tough",
    "jenkins",
    "installed",
    "correctly",
    "let",
    "quickly",
    "walk",
    "bare",
    "minimal",
    "configurations",
    "required",
    "kind",
    "first",
    "time",
    "configuration",
    "required",
    "also",
    "let",
    "warn",
    "ui",
    "little",
    "hard",
    "many",
    "people",
    "wrap",
    "head",
    "around",
    "specifically",
    "windows",
    "guys",
    "java",
    "guy",
    "know",
    "painful",
    "write",
    "ui",
    "java",
    "kind",
    "appreciate",
    "know",
    "effort",
    "gone",
    "ui",
    "bottom",
    "line",
    "little",
    "hard",
    "know",
    "wrap",
    "head",
    "around",
    "start",
    "using",
    "possibly",
    "start",
    "liking",
    "right",
    "let",
    "get",
    "something",
    "called",
    "managed",
    "jenkins",
    "viewed",
    "like",
    "main",
    "menu",
    "jenkins",
    "configuration",
    "get",
    "important",
    "ones",
    "something",
    "called",
    "configure",
    "system",
    "configure",
    "system",
    "kind",
    "put",
    "configuration",
    "complete",
    "jenkins",
    "instance",
    "things",
    "kind",
    "look",
    "home",
    "directory",
    "java",
    "home",
    "configurations",
    "workspace",
    "anything",
    "everything",
    "regarding",
    "jenkins",
    "stored",
    "system",
    "message",
    "want",
    "put",
    "message",
    "system",
    "type",
    "whatever",
    "want",
    "probably",
    "show",
    "somewhere",
    "menu",
    "number",
    "executors",
    "important",
    "configuration",
    "lets",
    "jenkin",
    "know",
    "point",
    "time",
    "many",
    "jobs",
    "many",
    "threads",
    "run",
    "kind",
    "visualize",
    "like",
    "thread",
    "run",
    "particular",
    "instance",
    "thumb",
    "rule",
    "single",
    "core",
    "system",
    "number",
    "executors",
    "two",
    "good",
    "enough",
    "case",
    "point",
    "time",
    "multiple",
    "jobs",
    "kind",
    "get",
    "triggered",
    "time",
    "case",
    "number",
    "executors",
    "less",
    "compared",
    "number",
    "jobs",
    "woken",
    "need",
    "panic",
    "get",
    "queued",
    "eventually",
    "jenkins",
    "get",
    "running",
    "jobs",
    "bear",
    "mind",
    "whenever",
    "new",
    "job",
    "kind",
    "know",
    "gets",
    "triggered",
    "cpu",
    "usage",
    "memory",
    "usage",
    "terms",
    "disk",
    "right",
    "high",
    "jenkins",
    "instance",
    "something",
    "got",
    "kind",
    "keep",
    "mind",
    "right",
    "number",
    "executors",
    "two",
    "system",
    "kind",
    "good",
    "label",
    "jenkins",
    "want",
    "things",
    "usage",
    "want",
    "use",
    "jenkins",
    "good",
    "primary",
    "uh",
    "server",
    "running",
    "want",
    "use",
    "note",
    "much",
    "possible",
    "quite",
    "pretty",
    "options",
    "got",
    "pair",
    "minimal",
    "help",
    "kind",
    "thing",
    "clicking",
    "question",
    "marks",
    "get",
    "know",
    "particular",
    "configurations",
    "right",
    "look",
    "good",
    "want",
    "show",
    "something",
    "regarding",
    "docker",
    "timestamps",
    "git",
    "plugin",
    "svn",
    "email",
    "notifications",
    "want",
    "want",
    "yes",
    "want",
    "smtp",
    "server",
    "configuration",
    "remember",
    "mentioned",
    "earlier",
    "would",
    "want",
    "jenkins",
    "sending",
    "emails",
    "done",
    "configured",
    "smtp",
    "details",
    "personal",
    "email",
    "id",
    "case",
    "organization",
    "would",
    "sort",
    "email",
    "id",
    "set",
    "jenkins",
    "server",
    "specify",
    "smtp",
    "server",
    "details",
    "company",
    "know",
    "authorize",
    "jenkins",
    "kind",
    "send",
    "emails",
    "case",
    "want",
    "try",
    "like",
    "configured",
    "personal",
    "email",
    "id",
    "gmail",
    "sending",
    "notifications",
    "smtp",
    "server",
    "would",
    "using",
    "smtp",
    "authentication",
    "provided",
    "email",
    "id",
    "password",
    "using",
    "smtp",
    "port",
    "465",
    "know",
    "reply",
    "address",
    "mine",
    "send",
    "email",
    "see",
    "configuration",
    "works",
    "gmail",
    "would",
    "allow",
    "allow",
    "anybody",
    "send",
    "notifications",
    "behalf",
    "lower",
    "security",
    "level",
    "gmail",
    "id",
    "allow",
    "programmatically",
    "somebody",
    "send",
    "email",
    "notifications",
    "behalf",
    "done",
    "already",
    "trying",
    "see",
    "send",
    "test",
    "email",
    "configuration",
    "set",
    "yes",
    "right",
    "email",
    "configuration",
    "looks",
    "good",
    "configure",
    "uh",
    "know",
    "gmail",
    "account",
    "case",
    "want",
    "put",
    "organization",
    "smtp",
    "server",
    "details",
    "valid",
    "username",
    "password",
    "set",
    "right",
    "configurations",
    "going",
    "change",
    "look",
    "good",
    "right",
    "come",
    "back",
    "managing",
    "kens",
    "okay",
    "one",
    "thing",
    "want",
    "kind",
    "go",
    "global",
    "tool",
    "configuration",
    "imagine",
    "scenario",
    "look",
    "way",
    "jenkins",
    "continuous",
    "integration",
    "server",
    "know",
    "kind",
    "code",
    "base",
    "going",
    "pull",
    "kind",
    "tool",
    "set",
    "required",
    "code",
    "going",
    "pull",
    "going",
    "build",
    "put",
    "tools",
    "required",
    "building",
    "appropriate",
    "kind",
    "code",
    "going",
    "pull",
    "know",
    "source",
    "code",
    "repositories",
    "give",
    "example",
    "case",
    "source",
    "code",
    "java",
    "source",
    "code",
    "assuming",
    "know",
    "demo",
    "laptop",
    "put",
    "configurations",
    "jdk",
    "everything",
    "laptop",
    "developer",
    "working",
    "laptop",
    "continuous",
    "integration",
    "server",
    "would",
    "know",
    "separate",
    "server",
    "without",
    "anything",
    "installed",
    "case",
    "want",
    "jenkins",
    "know",
    "run",
    "java",
    "code",
    "would",
    "need",
    "install",
    "jdk",
    "need",
    "specify",
    "jdk",
    "location",
    "way",
    "okay",
    "since",
    "already",
    "jdk",
    "installed",
    "already",
    "put",
    "java",
    "home",
    "directory",
    "rather",
    "environment",
    "variable",
    "correctly",
    "need",
    "git",
    "want",
    "jenkins",
    "server",
    "use",
    "git",
    "git",
    "know",
    "command",
    "bash",
    "command",
    "prompt",
    "running",
    "git",
    "connecting",
    "git",
    "server",
    "would",
    "need",
    "git",
    "know",
    "installed",
    "particular",
    "system",
    "set",
    "path",
    "accordingly",
    "gradle",
    "maven",
    "mavens",
    "well",
    "want",
    "tool",
    "going",
    "install",
    "system",
    "continuous",
    "integration",
    "server",
    "come",
    "configure",
    "something",
    "case",
    "configure",
    "jenkins",
    "runs",
    "able",
    "find",
    "tools",
    "building",
    "task",
    "crib",
    "good",
    "want",
    "save",
    "anything",
    "manage",
    "jenkins",
    "let",
    "see",
    "else",
    "required",
    "yes",
    "configure",
    "global",
    "security",
    "right",
    "security",
    "enabled",
    "see",
    "default",
    "security",
    "access",
    "control",
    "set",
    "jenkins",
    "user",
    "database",
    "mean",
    "know",
    "jenkins",
    "default",
    "uses",
    "file",
    "system",
    "stores",
    "user",
    "names",
    "hashes",
    "user",
    "names",
    "kind",
    "stores",
    "jenkins",
    "configured",
    "use",
    "database",
    "assuming",
    "running",
    "organization",
    "would",
    "probably",
    "want",
    "know",
    "sort",
    "ad",
    "ldap",
    "server",
    "using",
    "would",
    "want",
    "control",
    "access",
    "jenkins",
    "repository",
    "rather",
    "jenkins",
    "tool",
    "would",
    "specify",
    "ldap",
    "server",
    "details",
    "root",
    "dn",
    "password",
    "manager",
    "dn",
    "manager",
    "password",
    "details",
    "case",
    "want",
    "connect",
    "jenkins",
    "instance",
    "ldap",
    "ad",
    "authentication",
    "servers",
    "organization",
    "since",
    "things",
    "going",
    "use",
    "database",
    "good",
    "enough",
    "right",
    "set",
    "authorization",
    "methods",
    "stuff",
    "like",
    "put",
    "jobs",
    "let",
    "get",
    "details",
    "aware",
    "jenkins",
    "connected",
    "authorization",
    "ldap",
    "server",
    "jenkins",
    "managing",
    "servers",
    "happening",
    "going",
    "save",
    "stuff",
    "good",
    "enough",
    "configurations",
    "let",
    "put",
    "simple",
    "job",
    "right",
    "job",
    "new",
    "item",
    "know",
    "little",
    "difficult",
    "kind",
    "figure",
    "new",
    "item",
    "say",
    "know",
    "first",
    "job",
    "good",
    "give",
    "name",
    "job",
    "would",
    "say",
    "freestyle",
    "project",
    "good",
    "enough",
    "want",
    "choose",
    "unless",
    "choose",
    "particular",
    "button",
    "would",
    "become",
    "active",
    "choose",
    "freestyle",
    "project",
    "say",
    "okay",
    "high",
    "level",
    "would",
    "see",
    "general",
    "source",
    "code",
    "management",
    "build",
    "triggers",
    "build",
    "environment",
    "build",
    "post",
    "build",
    "case",
    "install",
    "see",
    "lot",
    "options",
    "would",
    "see",
    "moment",
    "putting",
    "simple",
    "job",
    "job",
    "could",
    "anything",
    "everything",
    "want",
    "put",
    "complicated",
    "job",
    "demo",
    "let",
    "put",
    "simple",
    "job",
    "give",
    "description",
    "optional",
    "thing",
    "first",
    "jenkins",
    "job",
    "right",
    "want",
    "choose",
    "helps",
    "available",
    "want",
    "choose",
    "want",
    "connect",
    "source",
    "code",
    "want",
    "triggers",
    "come",
    "back",
    "build",
    "environment",
    "want",
    "build",
    "environment",
    "part",
    "build",
    "step",
    "know",
    "want",
    "know",
    "run",
    "things",
    "kind",
    "complete",
    "particular",
    "job",
    "since",
    "windows",
    "box",
    "would",
    "say",
    "execute",
    "windows",
    "batch",
    "command",
    "right",
    "want",
    "would",
    "let",
    "echo",
    "something",
    "echo",
    "uh",
    "hello",
    "first",
    "jenkins",
    "job",
    "possibly",
    "would",
    "want",
    "date",
    "time",
    "stamp",
    "pertaining",
    "job",
    "mean",
    "date",
    "time",
    "job",
    "run",
    "right",
    "simple",
    "command",
    "says",
    "know",
    "first",
    "job",
    "puts",
    "something",
    "along",
    "date",
    "time",
    "right",
    "want",
    "anything",
    "else",
    "want",
    "keep",
    "job",
    "simple",
    "let",
    "save",
    "job",
    "right",
    "save",
    "job",
    "know",
    "job",
    "names",
    "comes",
    "need",
    "build",
    "job",
    "would",
    "see",
    "buildings",
    "tray",
    "nothing",
    "put",
    "job",
    "run",
    "yet",
    "right",
    "let",
    "try",
    "build",
    "see",
    "build",
    "number",
    "would",
    "see",
    "date",
    "timestamp",
    "click",
    "see",
    "console",
    "output",
    "go",
    "okay",
    "simple",
    "job",
    "details",
    "getting",
    "see",
    "navigate",
    "particular",
    "directory",
    "right",
    "directory",
    "mentioning",
    "earlier",
    "regarding",
    "jenkins",
    "home",
    "job",
    "related",
    "stuff",
    "specific",
    "particular",
    "jenkins",
    "installation",
    "plugins",
    "installed",
    "details",
    "plugins",
    "found",
    "right",
    "workspace",
    "jobs",
    "created",
    "whichever",
    "running",
    "would",
    "wrong",
    "individual",
    "folders",
    "specific",
    "jobs",
    "put",
    "right",
    "one",
    "job",
    "one",
    "quick",
    "run",
    "looks",
    "like",
    "pretty",
    "simple",
    "okay",
    "let",
    "one",
    "thing",
    "let",
    "put",
    "second",
    "job",
    "would",
    "say",
    "second",
    "job",
    "would",
    "say",
    "freestyle",
    "project",
    "right",
    "second",
    "job",
    "want",
    "demonstrate",
    "powerfulness",
    "automation",
    "server",
    "simple",
    "automate",
    "job",
    "put",
    "jenkins",
    "triggered",
    "automatically",
    "remember",
    "said",
    "earlier",
    "jenkins",
    "core",
    "jenkins",
    "powerful",
    "automation",
    "server",
    "alright",
    "going",
    "keep",
    "everything",
    "else",
    "going",
    "put",
    "build",
    "script",
    "pretty",
    "much",
    "similar",
    "second",
    "job",
    "gets",
    "triggered",
    "automatically",
    "every",
    "minute",
    "right",
    "let",
    "percentage",
    "date",
    "put",
    "time",
    "right",
    "put",
    "another",
    "job",
    "called",
    "second",
    "job",
    "pretty",
    "much",
    "thing",
    "earlier",
    "terms",
    "printing",
    "date",
    "time",
    "time",
    "going",
    "demonstrate",
    "powerfulness",
    "automation",
    "server",
    "see",
    "build",
    "trigger",
    "build",
    "triggered",
    "using",
    "various",
    "triggers",
    "get",
    "github",
    "uh",
    "triggering",
    "hook",
    "web",
    "hook",
    "kind",
    "triggering",
    "later",
    "want",
    "want",
    "ensure",
    "job",
    "going",
    "put",
    "would",
    "automatically",
    "triggered",
    "let",
    "say",
    "every",
    "minute",
    "want",
    "job",
    "run",
    "build",
    "periodically",
    "setting",
    "see",
    "bunch",
    "help",
    "available",
    "written",
    "cron",
    "jobs",
    "linux",
    "boxes",
    "find",
    "simple",
    "others",
    "panic",
    "let",
    "put",
    "simple",
    "regular",
    "expression",
    "scheduling",
    "job",
    "every",
    "minute",
    "right",
    "one",
    "two",
    "three",
    "four",
    "five",
    "right",
    "come",
    "come",
    "come",
    "right",
    "five",
    "stars",
    "going",
    "put",
    "jenkins",
    "got",
    "little",
    "worried",
    "asking",
    "really",
    "mean",
    "every",
    "minute",
    "oh",
    "yeah",
    "want",
    "every",
    "minute",
    "let",
    "save",
    "check",
    "whether",
    "gets",
    "triggered",
    "every",
    "minute",
    "anything",
    "wait",
    "minute",
    "everything",
    "goes",
    "well",
    "jenkins",
    "would",
    "automatically",
    "trigger",
    "second",
    "job",
    "minutes",
    "time",
    "time",
    "around",
    "going",
    "trigger",
    "anything",
    "look",
    "see",
    "automatically",
    "got",
    "trigger",
    "go",
    "yep",
    "second",
    "job",
    "gets",
    "triggered",
    "automatically",
    "know",
    "triggered",
    "42",
    "1642",
    "442",
    "time",
    "looks",
    "good",
    "everything",
    "goes",
    "well",
    "every",
    "one",
    "minute",
    "onwards",
    "jog",
    "would",
    "automatically",
    "triggered",
    "jenkins",
    "running",
    "jobs",
    "put",
    "jenkins",
    "instance",
    "would",
    "need",
    "way",
    "controlling",
    "access",
    "jenkins",
    "server",
    "wherein",
    "would",
    "use",
    "plugin",
    "called",
    "role",
    "based",
    "access",
    "plugin",
    "create",
    "rules",
    "rules",
    "something",
    "like",
    "global",
    "rule",
    "project",
    "rule",
    "project",
    "specific",
    "growth",
    "different",
    "roles",
    "users",
    "signed",
    "users",
    "might",
    "create",
    "kind",
    "assigned",
    "roles",
    "users",
    "fall",
    "category",
    "way",
    "kind",
    "controlling",
    "access",
    "jenkins",
    "instance",
    "ensuring",
    "people",
    "something",
    "unwarranted",
    "right",
    "first",
    "things",
    "first",
    "let",
    "go",
    "ahead",
    "install",
    "plugin",
    "get",
    "manage",
    "jenkins",
    "manage",
    "plugin",
    "little",
    "bit",
    "confusing",
    "screen",
    "opinion",
    "updates",
    "available",
    "installed",
    "advanced",
    "role",
    "based",
    "plugin",
    "let",
    "go",
    "available",
    "take",
    "time",
    "get",
    "refreshed",
    "right",
    "available",
    "plugins",
    "install",
    "plugins",
    "right",
    "let",
    "come",
    "back",
    "available",
    "would",
    "want",
    "search",
    "role",
    "based",
    "access",
    "plugin",
    "would",
    "search",
    "role",
    "hit",
    "enter",
    "okay",
    "role",
    "based",
    "authorization",
    "strategy",
    "enables",
    "user",
    "authorization",
    "using",
    "role",
    "based",
    "strategy",
    "roles",
    "defined",
    "globally",
    "particular",
    "jobs",
    "nodes",
    "stuff",
    "like",
    "exactly",
    "plugin",
    "want",
    "would",
    "want",
    "install",
    "without",
    "restart",
    "right",
    "looks",
    "good",
    "far",
    "yes",
    "go",
    "back",
    "top",
    "page",
    "yes",
    "remember",
    "jenkins",
    "running",
    "java",
    "using",
    "java",
    "instance",
    "typically",
    "many",
    "things",
    "would",
    "work",
    "way",
    "unless",
    "want",
    "restart",
    "jenkins",
    "good",
    "practice",
    "whenever",
    "sort",
    "big",
    "installations",
    "big",
    "patches",
    "jenkins",
    "instance",
    "ensure",
    "kind",
    "restart",
    "otherwise",
    "would",
    "difference",
    "terms",
    "installed",
    "system",
    "file",
    "system",
    "need",
    "flush",
    "settings",
    "later",
    "small",
    "plugins",
    "would",
    "run",
    "without",
    "problems",
    "otherwise",
    "plugins",
    "would",
    "need",
    "restart",
    "know",
    "kindly",
    "go",
    "ahead",
    "restart",
    "jenkins",
    "instance",
    "need",
    "looks",
    "good",
    "installed",
    "plugin",
    "see",
    "plugin",
    "installed",
    "plugin",
    "specific",
    "user",
    "control",
    "access",
    "control",
    "let",
    "go",
    "yes",
    "global",
    "security",
    "would",
    "see",
    "strategy",
    "showing",
    "right",
    "comes",
    "installation",
    "plugin",
    "would",
    "want",
    "enable",
    "already",
    "database",
    "set",
    "authorization",
    "part",
    "sense",
    "going",
    "install",
    "mean",
    "already",
    "installed",
    "role",
    "based",
    "strategy",
    "uh",
    "plugin",
    "going",
    "enable",
    "strategy",
    "right",
    "would",
    "say",
    "save",
    "okay",
    "installed",
    "role",
    "based",
    "access",
    "plugin",
    "would",
    "need",
    "set",
    "check",
    "know",
    "would",
    "go",
    "ahead",
    "create",
    "roles",
    "ensure",
    "assign",
    "users",
    "per",
    "roles",
    "right",
    "let",
    "go",
    "manage",
    "jenkins",
    "configure",
    "right",
    "let",
    "see",
    "configure",
    "configure",
    "global",
    "security",
    "create",
    "roles",
    "nope",
    "yes",
    "manage",
    "assign",
    "roles",
    "okay",
    "would",
    "see",
    "options",
    "install",
    "plugins",
    "enabled",
    "plugin",
    "enabled",
    "role",
    "based",
    "access",
    "control",
    "would",
    "go",
    "ahead",
    "create",
    "rules",
    "particular",
    "jenkins",
    "instance",
    "would",
    "say",
    "first",
    "manage",
    "rules",
    "would",
    "need",
    "create",
    "roles",
    "rules",
    "high",
    "level",
    "global",
    "rules",
    "project",
    "rules",
    "slave",
    "rules",
    "get",
    "details",
    "high",
    "level",
    "global",
    "role",
    "let",
    "create",
    "role",
    "role",
    "kind",
    "visualized",
    "like",
    "group",
    "would",
    "create",
    "role",
    "called",
    "developer",
    "typically",
    "jenkins",
    "instance",
    "ca",
    "instance",
    "kind",
    "owned",
    "controlled",
    "qa",
    "guys",
    "qr",
    "guys",
    "would",
    "need",
    "provide",
    "sort",
    "know",
    "limited",
    "access",
    "developers",
    "creating",
    "role",
    "called",
    "developer",
    "adding",
    "role",
    "global",
    "role",
    "level",
    "would",
    "say",
    "add",
    "would",
    "see",
    "developer",
    "role",
    "options",
    "hover",
    "would",
    "see",
    "sort",
    "help",
    "know",
    "permissions",
    "specific",
    "want",
    "like",
    "know",
    "sounds",
    "little",
    "different",
    "would",
    "want",
    "give",
    "little",
    "permissions",
    "developer",
    "administration",
    "perspective",
    "would",
    "want",
    "read",
    "um",
    "kind",
    "role",
    "credentials",
    "would",
    "want",
    "view",
    "kind",
    "rule",
    "want",
    "create",
    "agents",
    "stuff",
    "looks",
    "good",
    "job",
    "would",
    "want",
    "possibly",
    "read",
    "want",
    "build",
    "want",
    "cancel",
    "jobs",
    "want",
    "configure",
    "job",
    "even",
    "want",
    "create",
    "job",
    "would",
    "want",
    "read",
    "things",
    "would",
    "give",
    "possibly",
    "role",
    "workspace",
    "well",
    "mean",
    "want",
    "access",
    "workspace",
    "would",
    "want",
    "read",
    "job",
    "check",
    "know",
    "access",
    "job",
    "run",
    "um",
    "want",
    "give",
    "particular",
    "access",
    "allow",
    "run",
    "jobs",
    "view",
    "configure",
    "yeah",
    "possibly",
    "create",
    "yeah",
    "delete",
    "want",
    "read",
    "yes",
    "definitely",
    "specific",
    "role",
    "creating",
    "global",
    "role",
    "called",
    "developer",
    "giving",
    "limited",
    "roles",
    "sense",
    "want",
    "developer",
    "able",
    "run",
    "agents",
    "create",
    "jobs",
    "build",
    "jobs",
    "cancel",
    "jobs",
    "configure",
    "jobs",
    "max",
    "would",
    "want",
    "read",
    "job",
    "already",
    "put",
    "okay",
    "would",
    "save",
    "created",
    "role",
    "still",
    "users",
    "system",
    "let",
    "go",
    "ahead",
    "create",
    "user",
    "system",
    "say",
    "configure",
    "manage",
    "cans",
    "manage",
    "users",
    "okay",
    "let",
    "create",
    "new",
    "user",
    "would",
    "call",
    "user",
    "yeah",
    "developer1",
    "sounds",
    "good",
    "password",
    "password",
    "remember",
    "okay",
    "name",
    "developer1",
    "something",
    "like",
    "okay",
    "admin",
    "kind",
    "configured",
    "brought",
    "system",
    "developer1",
    "user",
    "configured",
    "still",
    "set",
    "rules",
    "particular",
    "user",
    "yet",
    "would",
    "go",
    "manage",
    "gains",
    "would",
    "say",
    "manage",
    "assign",
    "roles",
    "would",
    "say",
    "assign",
    "rules",
    "okay",
    "see",
    "going",
    "assign",
    "role",
    "specific",
    "particular",
    "find",
    "particular",
    "user",
    "assign",
    "developer",
    "role",
    "already",
    "configured",
    "role",
    "shows",
    "would",
    "need",
    "find",
    "user",
    "whoever",
    "created",
    "assign",
    "particular",
    "role",
    "remember",
    "user",
    "created",
    "developer1",
    "would",
    "add",
    "particular",
    "user",
    "particular",
    "user",
    "kind",
    "role",
    "want",
    "global",
    "rule",
    "created",
    "developer",
    "would",
    "assign",
    "developer",
    "1",
    "particular",
    "global",
    "rule",
    "would",
    "go",
    "ahead",
    "save",
    "changes",
    "let",
    "check",
    "permissions",
    "particular",
    "user",
    "logging",
    "admin",
    "account",
    "logging",
    "back",
    "developer",
    "one",
    "remember",
    "role",
    "created",
    "less",
    "privileges",
    "go",
    "jenkins",
    "see",
    "new",
    "item",
    "ca",
    "trigger",
    "new",
    "job",
    "ca",
    "anything",
    "see",
    "jobs",
    "however",
    "think",
    "able",
    "start",
    "job",
    "permission",
    "set",
    "maximum",
    "look",
    "job",
    "see",
    "part",
    "console",
    "output",
    "stuff",
    "like",
    "limited",
    "role",
    "created",
    "added",
    "developer",
    "particular",
    "role",
    "developer",
    "role",
    "developers",
    "get",
    "configure",
    "jobs",
    "jenkins",
    "instance",
    "owned",
    "qr",
    "person",
    "want",
    "give",
    "developer",
    "administrative",
    "rights",
    "rights",
    "set",
    "creating",
    "developer",
    "role",
    "anybody",
    "tagged",
    "user",
    "tagged",
    "part",
    "developer",
    "role",
    "would",
    "get",
    "kind",
    "permissions",
    "permissions",
    "know",
    "fine",
    "grain",
    "project",
    "specific",
    "permissions",
    "well",
    "demonstrated",
    "high",
    "level",
    "permission",
    "set",
    "let",
    "quickly",
    "log",
    "user",
    "get",
    "back",
    "admin",
    "user",
    "need",
    "continue",
    "demo",
    "developer",
    "role",
    "created",
    "less",
    "privileges",
    "one",
    "reasons",
    "jenkins",
    "popular",
    "mentioned",
    "earlier",
    "bunch",
    "plugins",
    "provided",
    "users",
    "community",
    "users",
    "charge",
    "money",
    "plugins",
    "got",
    "plugins",
    "connecting",
    "anything",
    "everything",
    "navigate",
    "find",
    "jenkins",
    "plugins",
    "would",
    "see",
    "index",
    "many",
    "plugins",
    "wonderful",
    "plugins",
    "whatever",
    "connectors",
    "would",
    "need",
    "want",
    "connect",
    "jenkins",
    "aws",
    "instance",
    "want",
    "connect",
    "jenkins",
    "docker",
    "instance",
    "containers",
    "would",
    "plugin",
    "go",
    "search",
    "want",
    "connect",
    "jenkins",
    "bitbucket",
    "bitbucket",
    "one",
    "git",
    "servers",
    "many",
    "plugins",
    "available",
    "okay",
    "bottom",
    "line",
    "jenkins",
    "without",
    "plugins",
    "nothing",
    "plugins",
    "heart",
    "jenkins",
    "connect",
    "order",
    "connect",
    "jenkins",
    "containers",
    "tool",
    "sets",
    "would",
    "need",
    "plugins",
    "want",
    "connect",
    "want",
    "build",
    "repository",
    "got",
    "java",
    "maven",
    "would",
    "need",
    "install",
    "maven",
    "jdk",
    "jenkins",
    "instance",
    "looking",
    "net",
    "build",
    "microsoft",
    "build",
    "would",
    "need",
    "ms",
    "build",
    "installed",
    "jenkins",
    "instance",
    "plugins",
    "trigger",
    "ms",
    "build",
    "want",
    "listen",
    "server",
    "side",
    "web",
    "hooks",
    "github",
    "need",
    "github",
    "specific",
    "plugins",
    "want",
    "connect",
    "jenkins",
    "aws",
    "need",
    "plugins",
    "want",
    "connect",
    "docker",
    "instance",
    "running",
    "anywhere",
    "world",
    "long",
    "url",
    "publicly",
    "reachable",
    "docker",
    "installed",
    "jenkins",
    "instance",
    "sonarcube",
    "one",
    "popular",
    "static",
    "code",
    "analyzers",
    "connect",
    "jenkins",
    "build",
    "build",
    "job",
    "jenkins",
    "push",
    "sonar",
    "cube",
    "get",
    "sonar",
    "cube",
    "run",
    "analysis",
    "get",
    "back",
    "results",
    "jenkins",
    "works",
    "well",
    "plugins",
    "let",
    "connect",
    "jenkins",
    "instance",
    "github",
    "already",
    "simple",
    "java",
    "repository",
    "github",
    "instance",
    "let",
    "connect",
    "jenkins",
    "particular",
    "github",
    "instance",
    "pull",
    "job",
    "put",
    "right",
    "simple",
    "uh",
    "know",
    "repository",
    "called",
    "hello",
    "java",
    "repo",
    "hello",
    "application",
    "simple",
    "class",
    "file",
    "got",
    "one",
    "line",
    "system",
    "dot",
    "already",
    "present",
    "place",
    "would",
    "url",
    "uh",
    "repository",
    "pick",
    "https",
    "url",
    "steepest",
    "url",
    "would",
    "would",
    "connect",
    "jenkins",
    "instance",
    "go",
    "github",
    "provide",
    "credentials",
    "pull",
    "repository",
    "get",
    "jenkins",
    "instance",
    "build",
    "particular",
    "java",
    "file",
    "keeping",
    "source",
    "code",
    "simple",
    "java",
    "file",
    "build",
    "java",
    "file",
    "compile",
    "java",
    "file",
    "say",
    "java",
    "c",
    "name",
    "class",
    "file",
    "hello",
    "java",
    "run",
    "java",
    "file",
    "would",
    "say",
    "java",
    "hello",
    "okay",
    "remember",
    "need",
    "install",
    "plugins",
    "uh",
    "needs",
    "git",
    "plugin",
    "remember",
    "installation",
    "bunch",
    "recommended",
    "plugins",
    "git",
    "already",
    "installed",
    "system",
    "need",
    "install",
    "let",
    "put",
    "new",
    "job",
    "says",
    "get",
    "job",
    "let",
    "freestyle",
    "project",
    "good",
    "would",
    "say",
    "okay",
    "right",
    "source",
    "code",
    "management",
    "remember",
    "earlier",
    "examples",
    "use",
    "source",
    "code",
    "putting",
    "echo",
    "kind",
    "uh",
    "jobs",
    "need",
    "integration",
    "source",
    "code",
    "systems",
    "let",
    "connect",
    "going",
    "put",
    "source",
    "code",
    "git",
    "would",
    "show",
    "plugin",
    "already",
    "svn",
    "performs",
    "additional",
    "source",
    "code",
    "management",
    "tools",
    "would",
    "need",
    "install",
    "plugins",
    "jenkins",
    "connects",
    "wonderfully",
    "well",
    "particular",
    "source",
    "control",
    "tools",
    "okay",
    "would",
    "copy",
    "https",
    "url",
    "would",
    "say",
    "url",
    "supposed",
    "go",
    "grab",
    "source",
    "code",
    "right",
    "sounds",
    "good",
    "username",
    "password",
    "specify",
    "username",
    "password",
    "right",
    "would",
    "say",
    "username",
    "username",
    "https",
    "credential",
    "job",
    "okay",
    "username",
    "password",
    "save",
    "say",
    "add",
    "would",
    "say",
    "know",
    "use",
    "credentials",
    "go",
    "github",
    "behalf",
    "pull",
    "repository",
    "right",
    "stage",
    "error",
    "terms",
    "able",
    "jenkins",
    "able",
    "find",
    "git",
    "git",
    "dot",
    "exe",
    "credentials",
    "wrong",
    "somewhere",
    "would",
    "see",
    "red",
    "message",
    "saying",
    "know",
    "something",
    "right",
    "go",
    "ahead",
    "kind",
    "fix",
    "looks",
    "good",
    "going",
    "grab",
    "url",
    "going",
    "step",
    "would",
    "pull",
    "source",
    "code",
    "github",
    "would",
    "part",
    "build",
    "step",
    "repository",
    "java",
    "file",
    "correct",
    "order",
    "build",
    "would",
    "say",
    "execute",
    "windows",
    "batch",
    "command",
    "would",
    "say",
    "java",
    "c",
    "hello",
    "dot",
    "java",
    "way",
    "would",
    "build",
    "java",
    "code",
    "run",
    "would",
    "say",
    "java",
    "hello",
    "pretty",
    "simple",
    "two",
    "steps",
    "would",
    "run",
    "repository",
    "contents",
    "fetched",
    "github",
    "java",
    "c",
    "java",
    "sounds",
    "good",
    "would",
    "say",
    "save",
    "let",
    "try",
    "run",
    "okay",
    "see",
    "lot",
    "know",
    "executes",
    "git",
    "behalf",
    "goes",
    "provides",
    "credentials",
    "says",
    "know",
    "pulls",
    "repository",
    "default",
    "pull",
    "master",
    "branch",
    "repository",
    "kind",
    "builds",
    "whole",
    "thing",
    "java",
    "c",
    "hello",
    "java",
    "runs",
    "project",
    "java",
    "hello",
    "see",
    "output",
    "want",
    "look",
    "contents",
    "repository",
    "go",
    "workspace",
    "system",
    "hang",
    "right",
    "okay",
    "good",
    "job",
    "see",
    "program",
    "github",
    "repository",
    "okay",
    "program",
    "github",
    "repository",
    "right",
    "program",
    "jenkins",
    "behalf",
    "went",
    "way",
    "github",
    "pulled",
    "repository",
    "know",
    "brought",
    "local",
    "system",
    "jenkins",
    "instance",
    "compiled",
    "ran",
    "particular",
    "application",
    "okay",
    "integrated",
    "jenkins",
    "successfully",
    "github",
    "simple",
    "java",
    "application",
    "let",
    "build",
    "little",
    "bit",
    "top",
    "maven",
    "based",
    "web",
    "application",
    "repository",
    "github",
    "repository",
    "talking",
    "called",
    "amv",
    "web",
    "app",
    "got",
    "maven",
    "based",
    "repository",
    "would",
    "know",
    "maven",
    "simple",
    "java",
    "based",
    "build",
    "tool",
    "allow",
    "run",
    "various",
    "targets",
    "compile",
    "based",
    "upon",
    "goals",
    "specify",
    "compile",
    "run",
    "tests",
    "build",
    "war",
    "file",
    "even",
    "deploy",
    "server",
    "going",
    "use",
    "maven",
    "building",
    "creating",
    "package",
    "particular",
    "web",
    "application",
    "contains",
    "bunch",
    "things",
    "important",
    "contains",
    "html",
    "file",
    "part",
    "web",
    "application",
    "perspective",
    "requirements",
    "since",
    "going",
    "connect",
    "jenkins",
    "particular",
    "repository",
    "get",
    "already",
    "set",
    "need",
    "two",
    "things",
    "one",
    "maven",
    "jenkins",
    "use",
    "maven",
    "order",
    "use",
    "maven",
    "jenkins",
    "would",
    "maven",
    "installation",
    "jenkins",
    "box",
    "case",
    "jenkins",
    "box",
    "laptop",
    "maven",
    "installed",
    "also",
    "need",
    "tomcat",
    "server",
    "tomcat",
    "simple",
    "web",
    "server",
    "freely",
    "download",
    "let",
    "know",
    "quickly",
    "uh",
    "download",
    "install",
    "tomcat",
    "right",
    "download",
    "maven",
    "first",
    "various",
    "ways",
    "kind",
    "download",
    "maven",
    "zip",
    "files",
    "binary",
    "zip",
    "files",
    "archive",
    "files",
    "done",
    "already",
    "downloaded",
    "maven",
    "see",
    "unzipped",
    "folder",
    "unzipped",
    "maven",
    "know",
    "maven",
    "one",
    "open",
    "source",
    "build",
    "tool",
    "set",
    "configurations",
    "set",
    "path",
    "mvn",
    "hyphen",
    "iphone",
    "version",
    "specify",
    "set",
    "path",
    "one",
    "work",
    "echo",
    "m2",
    "home",
    "nothing",
    "variable",
    "environment",
    "variable",
    "specific",
    "onenote",
    "already",
    "set",
    "unzip",
    "one",
    "set",
    "m2",
    "home",
    "variable",
    "directory",
    "unzip",
    "mi1",
    "also",
    "set",
    "path",
    "particular",
    "directory",
    "slash",
    "bin",
    "maven",
    "executables",
    "found",
    "right",
    "maven",
    "know",
    "since",
    "set",
    "path",
    "environment",
    "variable",
    "maven",
    "running",
    "perfectly",
    "fine",
    "system",
    "verified",
    "okay",
    "next",
    "one",
    "tomcat",
    "server",
    "download",
    "apache",
    "tomcat",
    "server",
    "system",
    "going",
    "show",
    "download",
    "download",
    "tomcat",
    "server",
    "um",
    "already",
    "server",
    "downloaded",
    "need",
    "installation",
    "unzip",
    "kind",
    "bin",
    "configuration",
    "made",
    "subtle",
    "changes",
    "configuration",
    "first",
    "foremost",
    "tomcat",
    "server",
    "also",
    "default",
    "runs",
    "port",
    "8080",
    "since",
    "already",
    "jenkins",
    "server",
    "running",
    "port",
    "8080",
    "let",
    "tomcat",
    "run",
    "port",
    "port",
    "clash",
    "done",
    "configured",
    "tomcat",
    "use",
    "different",
    "port",
    "go",
    "configuration",
    "file",
    "let",
    "open",
    "right",
    "okay",
    "port",
    "default",
    "8080",
    "modified",
    "changed",
    "port",
    "tomcat",
    "server",
    "would",
    "run",
    "right",
    "one",
    "chain",
    "second",
    "change",
    "jenkins",
    "kind",
    "tries",
    "get",
    "tomcat",
    "deploy",
    "something",
    "someone",
    "would",
    "need",
    "authentications",
    "alloyed",
    "deployment",
    "tomcat",
    "need",
    "create",
    "user",
    "tomcat",
    "provide",
    "user",
    "credentials",
    "jenkins",
    "instance",
    "would",
    "go",
    "file",
    "already",
    "created",
    "username",
    "called",
    "deployer",
    "password",
    "deployer",
    "added",
    "role",
    "called",
    "manager",
    "hyphen",
    "script",
    "manager",
    "hyphen",
    "script",
    "allow",
    "programmatic",
    "access",
    "tomcat",
    "server",
    "role",
    "using",
    "credentials",
    "enable",
    "empower",
    "jenkins",
    "get",
    "tomcat",
    "server",
    "deploy",
    "application",
    "right",
    "two",
    "things",
    "required",
    "let",
    "start",
    "tomcat",
    "server",
    "first",
    "get",
    "bin",
    "folder",
    "open",
    "command",
    "prompt",
    "pretty",
    "fast",
    "takes",
    "seconds",
    "yes",
    "go",
    "tomcat",
    "server",
    "running",
    "running",
    "port",
    "8081",
    "let",
    "check",
    "looks",
    "good",
    "localhost",
    "okay",
    "tomcat",
    "server",
    "running",
    "sounds",
    "good",
    "user",
    "already",
    "configured",
    "also",
    "fine",
    "part",
    "first",
    "job",
    "one",
    "also",
    "installed",
    "system",
    "good",
    "use",
    "maven",
    "part",
    "jenkins",
    "put",
    "simple",
    "job",
    "say",
    "job",
    "mbn",
    "web",
    "app",
    "call",
    "freestyle",
    "job",
    "good",
    "okay",
    "git",
    "repository",
    "url",
    "git",
    "repository",
    "guy",
    "https",
    "url",
    "okay",
    "url",
    "use",
    "credentials",
    "old",
    "credentials",
    "set",
    "work",
    "well",
    "git",
    "user",
    "kind",
    "connecting",
    "right",
    "change",
    "happens",
    "get",
    "since",
    "said",
    "simple",
    "maven",
    "repository",
    "maven",
    "targets",
    "run",
    "simple",
    "target",
    "first",
    "let",
    "run",
    "maven",
    "package",
    "creates",
    "war",
    "file",
    "okay",
    "mvn",
    "package",
    "target",
    "package",
    "target",
    "whenever",
    "run",
    "package",
    "kind",
    "creates",
    "builds",
    "tests",
    "creates",
    "package",
    "required",
    "maybe",
    "let",
    "try",
    "save",
    "let",
    "first",
    "run",
    "see",
    "connects",
    "well",
    "problem",
    "war",
    "file",
    "war",
    "file",
    "gets",
    "created",
    "properly",
    "okay",
    "wonderful",
    "built",
    "war",
    "file",
    "see",
    "shows",
    "location",
    "war",
    "file",
    "generated",
    "workspace",
    "see",
    "war",
    "file",
    "successfully",
    "built",
    "need",
    "grab",
    "particular",
    "war",
    "file",
    "would",
    "need",
    "deploy",
    "tomcat",
    "server",
    "would",
    "need",
    "small",
    "plugin",
    "need",
    "connect",
    "tomcat",
    "jenkins",
    "server",
    "let",
    "go",
    "ahead",
    "install",
    "plugin",
    "container",
    "deployment",
    "go",
    "manage",
    "plugins",
    "available",
    "type",
    "container",
    "container",
    "container",
    "deploy",
    "container",
    "okay",
    "let",
    "put",
    "plugin",
    "would",
    "need",
    "install",
    "without",
    "restart",
    "right",
    "seems",
    "fast",
    "nope",
    "sorry",
    "still",
    "installing",
    "okay",
    "installed",
    "plugin",
    "see",
    "go",
    "workspace",
    "okay",
    "target",
    "folder",
    "would",
    "see",
    "web",
    "application",
    "war",
    "file",
    "already",
    "built",
    "would",
    "need",
    "configure",
    "plugin",
    "pull",
    "war",
    "file",
    "deploy",
    "onto",
    "tomcat",
    "server",
    "deploying",
    "onto",
    "tomcat",
    "server",
    "use",
    "credentials",
    "user",
    "created",
    "okay",
    "let",
    "go",
    "configure",
    "particular",
    "project",
    "um",
    "okay",
    "good",
    "package",
    "good",
    "gon",
    "na",
    "create",
    "package",
    "fine",
    "add",
    "post",
    "build",
    "step",
    "war",
    "file",
    "built",
    "part",
    "package",
    "directive",
    "let",
    "use",
    "deployment",
    "container",
    "show",
    "install",
    "plugin",
    "deploy",
    "one",
    "container",
    "supposed",
    "specify",
    "supposed",
    "specify",
    "location",
    "okay",
    "global",
    "uh",
    "know",
    "configuration",
    "allow",
    "root",
    "folder",
    "pick",
    "war",
    "file",
    "star",
    "star",
    "forward",
    "slash",
    "star",
    "dot",
    "war",
    "good",
    "okay",
    "context",
    "path",
    "context",
    "path",
    "nothing",
    "name",
    "application",
    "know",
    "get",
    "deployed",
    "tomcat",
    "server",
    "say",
    "mvn",
    "web",
    "app",
    "name",
    "thing",
    "need",
    "specify",
    "kind",
    "container",
    "talking",
    "right",
    "deployment",
    "would",
    "tomcat",
    "need",
    "okay",
    "server",
    "tomcat",
    "server",
    "would",
    "url",
    "credentials",
    "yes",
    "need",
    "add",
    "credential",
    "particular",
    "server",
    "remember",
    "created",
    "credential",
    "web",
    "application",
    "let",
    "find",
    "tomcat",
    "server",
    "yes",
    "configuration",
    "okay",
    "deployer",
    "deployer",
    "username",
    "deployer",
    "password",
    "deployer",
    "okay",
    "let",
    "use",
    "credential",
    "would",
    "say",
    "would",
    "say",
    "add",
    "new",
    "credential",
    "jenkins",
    "credential",
    "username",
    "deployer",
    "password",
    "deployer",
    "would",
    "use",
    "deployer",
    "credentials",
    "url",
    "tomcat",
    "instance",
    "url",
    "tomcat",
    "instance",
    "take",
    "war",
    "file",
    "find",
    "found",
    "particular",
    "folder",
    "know",
    "context",
    "path",
    "map",
    "use",
    "deployer",
    "deployment",
    "credentials",
    "get",
    "local",
    "host",
    "8081",
    "tomcat",
    "server",
    "running",
    "system",
    "go",
    "ahead",
    "deploy",
    "okay",
    "required",
    "would",
    "say",
    "save",
    "let",
    "run",
    "okay",
    "builds",
    "successfully",
    "built",
    "war",
    "file",
    "trying",
    "deploy",
    "uh",
    "looks",
    "like",
    "deployment",
    "went",
    "ahead",
    "perfectly",
    "well",
    "context",
    "path",
    "mvn",
    "web",
    "app",
    "type",
    "right",
    "go",
    "ahead",
    "tomcat",
    "server",
    "would",
    "web",
    "apps",
    "folder",
    "would",
    "see",
    "know",
    "date",
    "timestamp",
    "file",
    "get",
    "got",
    "recently",
    "copied",
    "explorer",
    "version",
    "application",
    "application",
    "built",
    "source",
    "code",
    "application",
    "pulled",
    "github",
    "server",
    "built",
    "locally",
    "jenkins",
    "instance",
    "pushed",
    "tomcat",
    "server",
    "running",
    "different",
    "port",
    "demo",
    "running",
    "everything",
    "locally",
    "system",
    "assuming",
    "know",
    "particular",
    "tomcat",
    "instance",
    "running",
    "server",
    "different",
    "ip",
    "address",
    "got",
    "go",
    "change",
    "url",
    "server",
    "would",
    "server",
    "case",
    "already",
    "know",
    "tomcat",
    "server",
    "running",
    "machine",
    "fine",
    "different",
    "ipa",
    "good",
    "enough",
    "whole",
    "bundle",
    "war",
    "file",
    "built",
    "part",
    "jenkins",
    "job",
    "gets",
    "transferred",
    "onto",
    "server",
    "gets",
    "deployed",
    "beauty",
    "jenkins",
    "automatic",
    "deployments",
    "deployments",
    "using",
    "jenkins",
    "maven",
    "distributed",
    "build",
    "master",
    "slave",
    "configuration",
    "jenkins",
    "would",
    "seen",
    "know",
    "one",
    "instance",
    "jenkins",
    "server",
    "running",
    "time",
    "also",
    "told",
    "whenever",
    "job",
    "kind",
    "know",
    "gets",
    "started",
    "jenkins",
    "server",
    "little",
    "heavy",
    "terms",
    "disk",
    "space",
    "cpu",
    "utilization",
    "kind",
    "know",
    "organization",
    "wherein",
    "heavily",
    "reliant",
    "jenkins",
    "server",
    "want",
    "jenkins",
    "server",
    "go",
    "wherein",
    "kind",
    "start",
    "distributing",
    "load",
    "jenkins",
    "server",
    "primarily",
    "server",
    "placeholder",
    "like",
    "master",
    "take",
    "kind",
    "jobs",
    "based",
    "upon",
    "trigger",
    "happened",
    "job",
    "whichever",
    "job",
    "needs",
    "built",
    "delegate",
    "jobs",
    "onto",
    "machines",
    "slaves",
    "know",
    "wonderful",
    "thing",
    "okay",
    "use",
    "case",
    "one",
    "use",
    "case",
    "two",
    "assuming",
    "know",
    "jenkins",
    "server",
    "running",
    "windows",
    "box",
    "linux",
    "one",
    "need",
    "need",
    "build",
    "based",
    "upon",
    "operating",
    "systems",
    "multiple",
    "build",
    "configurations",
    "support",
    "maybe",
    "need",
    "build",
    "windows",
    "know",
    "windows",
    "based",
    "dot",
    "net",
    "kind",
    "projects",
    "would",
    "need",
    "windows",
    "machine",
    "build",
    "particular",
    "project",
    "also",
    "requirement",
    "want",
    "build",
    "linux",
    "linux",
    "based",
    "systems",
    "also",
    "mac",
    "support",
    "sort",
    "apps",
    "something",
    "built",
    "mac",
    "os",
    "would",
    "need",
    "build",
    "know",
    "mac",
    "based",
    "system",
    "well",
    "going",
    "support",
    "needs",
    "beautiful",
    "concept",
    "master",
    "slave",
    "know",
    "primary",
    "delegations",
    "agent",
    "master",
    "comes",
    "play",
    "typically",
    "would",
    "one",
    "jenkins",
    "server",
    "know",
    "configure",
    "proper",
    "authorizations",
    "users",
    "configurations",
    "everything",
    "set",
    "jinkin",
    "server",
    "job",
    "delegations",
    "listen",
    "sort",
    "triggers",
    "based",
    "upon",
    "job",
    "coming",
    "way",
    "nice",
    "way",
    "delegating",
    "jobs",
    "somebody",
    "else",
    "know",
    "taking",
    "back",
    "results",
    "control",
    "lot",
    "systems",
    "systems",
    "may",
    "complete",
    "need",
    "put",
    "complete",
    "jenkins",
    "installation",
    "got",
    "simple",
    "runner",
    "slave",
    "simple",
    "jar",
    "file",
    "run",
    "low",
    "priority",
    "thread",
    "process",
    "within",
    "systems",
    "wonderful",
    "distributed",
    "build",
    "server",
    "set",
    "case",
    "one",
    "servers",
    "goes",
    "master",
    "would",
    "know",
    "went",
    "kind",
    "delegate",
    "task",
    "somebody",
    "else",
    "kind",
    "distributed",
    "build",
    "master",
    "slave",
    "configuration",
    "exercise",
    "demo",
    "set",
    "simple",
    "slave",
    "since",
    "many",
    "machines",
    "kind",
    "play",
    "around",
    "set",
    "slave",
    "one",
    "folder",
    "within",
    "hard",
    "drive",
    "got",
    "c",
    "drive",
    "drive",
    "jenkins",
    "c",
    "drive",
    "would",
    "use",
    "e",
    "drive",
    "set",
    "simple",
    "slave",
    "show",
    "provision",
    "slave",
    "connect",
    "slave",
    "delegate",
    "job",
    "slave",
    "let",
    "go",
    "back",
    "jenkins",
    "master",
    "configure",
    "know",
    "talk",
    "agent",
    "various",
    "ways",
    "client",
    "server",
    "talk",
    "going",
    "choose",
    "something",
    "called",
    "jnlp",
    "java",
    "network",
    "launch",
    "protocol",
    "using",
    "would",
    "ensure",
    "know",
    "client",
    "server",
    "talk",
    "need",
    "ensure",
    "kind",
    "enable",
    "jnlp",
    "port",
    "let",
    "try",
    "find",
    "let",
    "try",
    "okay",
    "yes",
    "agents",
    "default",
    "jlp",
    "agent",
    "thing",
    "would",
    "disabled",
    "see",
    "small",
    "help",
    "going",
    "use",
    "jnlp",
    "nothing",
    "java",
    "network",
    "launch",
    "protocol",
    "know",
    "configure",
    "master",
    "server",
    "talk",
    "using",
    "jlp",
    "need",
    "enable",
    "guy",
    "enable",
    "guy",
    "instead",
    "making",
    "default",
    "configuration",
    "disabled",
    "make",
    "random",
    "make",
    "know",
    "enabled",
    "say",
    "save",
    "configuration",
    "right",
    "configured",
    "made",
    "setting",
    "master",
    "jlp",
    "port",
    "kind",
    "opened",
    "let",
    "go",
    "ahead",
    "know",
    "create",
    "agent",
    "go",
    "manage",
    "nodes",
    "see",
    "one",
    "master",
    "let",
    "provision",
    "new",
    "node",
    "way",
    "know",
    "bring",
    "new",
    "node",
    "configure",
    "server",
    "jenkins",
    "would",
    "put",
    "sort",
    "security",
    "around",
    "particular",
    "agent",
    "let",
    "know",
    "launch",
    "particular",
    "engine",
    "connect",
    "jenkins",
    "master",
    "would",
    "say",
    "new",
    "node",
    "would",
    "give",
    "name",
    "node",
    "would",
    "say",
    "windows",
    "node",
    "windows",
    "fine",
    "give",
    "identifier",
    "saying",
    "windows",
    "note",
    "would",
    "say",
    "permanent",
    "agent",
    "say",
    "okay",
    "see",
    "name",
    "let",
    "copy",
    "name",
    "description",
    "number",
    "executors",
    "since",
    "slave",
    "node",
    "running",
    "system",
    "keep",
    "number",
    "executors",
    "one",
    "fine",
    "remote",
    "root",
    "directory",
    "let",
    "clarify",
    "since",
    "master",
    "running",
    "c",
    "drive",
    "c",
    "drive",
    "program",
    "files",
    "86",
    "86",
    "c",
    "column",
    "program",
    "files",
    "indeed",
    "86",
    "right",
    "jenkins",
    "master",
    "running",
    "want",
    "c",
    "drive",
    "use",
    "something",
    "called",
    "drive",
    "another",
    "drive",
    "system",
    "please",
    "visualize",
    "like",
    "know",
    "running",
    "separate",
    "system",
    "altogether",
    "create",
    "folder",
    "called",
    "jenkins",
    "node",
    "going",
    "place",
    "going",
    "provision",
    "slave",
    "going",
    "run",
    "directory",
    "going",
    "provision",
    "slave",
    "node",
    "going",
    "copy",
    "remote",
    "root",
    "directory",
    "particular",
    "agent",
    "slave",
    "copied",
    "label",
    "know",
    "probably",
    "fine",
    "usage",
    "want",
    "use",
    "guy",
    "would",
    "want",
    "run",
    "kinds",
    "jobs",
    "build",
    "jobs",
    "label",
    "expressions",
    "match",
    "particular",
    "node",
    "label",
    "node",
    "order",
    "somebody",
    "kind",
    "delegate",
    "task",
    "specify",
    "particular",
    "label",
    "imagine",
    "way",
    "bunch",
    "windows",
    "system",
    "name",
    "windows",
    "star",
    "anything",
    "says",
    "windows",
    "give",
    "regular",
    "expression",
    "say",
    "anything",
    "matches",
    "windows",
    "run",
    "particular",
    "task",
    "mac",
    "machines",
    "name",
    "mac",
    "agents",
    "mac",
    "star",
    "something",
    "like",
    "delegate",
    "tasks",
    "know",
    "saying",
    "start",
    "whatever",
    "starts",
    "mac",
    "node",
    "run",
    "mac",
    "jobs",
    "identify",
    "node",
    "using",
    "label",
    "delegate",
    "task",
    "right",
    "launch",
    "method",
    "know",
    "use",
    "java",
    "web",
    "start",
    "going",
    "going",
    "use",
    "jnlp",
    "protocol",
    "okay",
    "sounds",
    "good",
    "directory",
    "think",
    "nothing",
    "else",
    "required",
    "availability",
    "yes",
    "keep",
    "agent",
    "yep",
    "online",
    "much",
    "possible",
    "sounds",
    "good",
    "right",
    "let",
    "save",
    "right",
    "provisioning",
    "particular",
    "node",
    "click",
    "node",
    "get",
    "bunch",
    "commands",
    "along",
    "taken",
    "machine",
    "slave",
    "node",
    "need",
    "run",
    "along",
    "small",
    "security",
    "credential",
    "let",
    "copy",
    "whole",
    "text",
    "notepad",
    "bad",
    "plus",
    "plus",
    "good",
    "okay",
    "copy",
    "whole",
    "path",
    "also",
    "want",
    "download",
    "would",
    "say",
    "yes",
    "one",
    "configured",
    "server",
    "details",
    "required",
    "launching",
    "found",
    "sorry",
    "launching",
    "agent",
    "found",
    "typically",
    "need",
    "take",
    "jar",
    "file",
    "onto",
    "system",
    "kind",
    "run",
    "copy",
    "cut",
    "come",
    "back",
    "folder",
    "jenkins",
    "node",
    "paste",
    "okay",
    "need",
    "use",
    "whole",
    "command",
    "control",
    "control",
    "c",
    "launch",
    "particular",
    "agent",
    "let",
    "bring",
    "command",
    "prompt",
    "right",
    "launch",
    "saying",
    "folder",
    "going",
    "launch",
    "particular",
    "agent",
    "java",
    "hyphen",
    "jar",
    "jnlp",
    "url",
    "server",
    "case",
    "server",
    "client",
    "different",
    "locations",
    "different",
    "ips",
    "let",
    "us",
    "specify",
    "ipad",
    "address",
    "anyway",
    "would",
    "show",
    "secret",
    "know",
    "root",
    "folder",
    "jenkins",
    "slave",
    "node",
    "okay",
    "something",
    "ran",
    "know",
    "says",
    "connected",
    "well",
    "seems",
    "connected",
    "well",
    "let",
    "come",
    "back",
    "jenkins",
    "instance",
    "see",
    "know",
    "told",
    "see",
    "earlier",
    "connected",
    "let",
    "refresh",
    "guy",
    "okay",
    "two",
    "guys",
    "connected",
    "provision",
    "jenkins",
    "node",
    "copied",
    "credentials",
    "along",
    "launch",
    "code",
    "took",
    "system",
    "kind",
    "ran",
    "since",
    "another",
    "system",
    "got",
    "separate",
    "directory",
    "another",
    "folder",
    "another",
    "drive",
    "launching",
    "agent",
    "long",
    "particular",
    "agent",
    "running",
    "command",
    "prompt",
    "running",
    "agent",
    "would",
    "connected",
    "close",
    "connection",
    "goes",
    "right",
    "successfully",
    "launched",
    "particular",
    "agent",
    "would",
    "home",
    "directory",
    "jenkins",
    "node",
    "jenkins",
    "slave",
    "task",
    "going",
    "delegate",
    "particular",
    "slave",
    "would",
    "run",
    "create",
    "workspace",
    "right",
    "right",
    "good",
    "let",
    "come",
    "back",
    "let",
    "kind",
    "put",
    "new",
    "task",
    "say",
    "know",
    "delegate",
    "job",
    "good",
    "say",
    "freestyle",
    "project",
    "going",
    "create",
    "simple",
    "job",
    "want",
    "connect",
    "gate",
    "anything",
    "like",
    "let",
    "create",
    "simple",
    "echo",
    "relegated",
    "slave",
    "negative",
    "two",
    "like",
    "word",
    "slave",
    "delegated",
    "agent",
    "put",
    "way",
    "right",
    "delegated",
    "agent",
    "sounds",
    "good",
    "going",
    "ensure",
    "particular",
    "job",
    "runs",
    "agent",
    "slave",
    "configured",
    "right",
    "see",
    "remember",
    "provisioned",
    "particular",
    "slave",
    "give",
    "label",
    "right",
    "going",
    "put",
    "job",
    "match",
    "particular",
    "label",
    "going",
    "say",
    "whatever",
    "matches",
    "know",
    "windows",
    "label",
    "run",
    "job",
    "particular",
    "node",
    "one",
    "node",
    "matching",
    "windows",
    "node",
    "job",
    "delegated",
    "save",
    "let",
    "build",
    "simple",
    "job",
    "nothing",
    "want",
    "demonstrate",
    "kind",
    "delegate",
    "agent",
    "see",
    "ran",
    "successfully",
    "workspace",
    "workspace",
    "right",
    "inside",
    "jenkins",
    "node",
    "created",
    "new",
    "workspace",
    "delegated",
    "job",
    "put",
    "old",
    "primary",
    "master",
    "job",
    "sql",
    "program",
    "files",
    "jenkins",
    "slave",
    "job",
    "successfully",
    "run",
    "simple",
    "powerful",
    "concept",
    "master",
    "slave",
    "configuration",
    "distributed",
    "build",
    "jenkins",
    "okay",
    "approaching",
    "final",
    "section",
    "done",
    "hard",
    "work",
    "bringing",
    "jenkins",
    "server",
    "configuring",
    "putting",
    "jobs",
    "creating",
    "users",
    "stuff",
    "want",
    "configuration",
    "kind",
    "go",
    "away",
    "want",
    "nice",
    "way",
    "ensuring",
    "backup",
    "configuration",
    "case",
    "failure",
    "hardware",
    "crash",
    "machine",
    "crash",
    "would",
    "want",
    "kind",
    "restore",
    "existing",
    "configuration",
    "kind",
    "backed",
    "one",
    "quick",
    "way",
    "would",
    "one",
    "dirty",
    "way",
    "would",
    "know",
    "take",
    "complete",
    "backup",
    "colon",
    "program",
    "files",
    "colon",
    "jenkins",
    "directory",
    "whole",
    "jenkins",
    "configuration",
    "present",
    "want",
    "let",
    "use",
    "plugins",
    "taking",
    "backup",
    "let",
    "go",
    "manage",
    "jenkins",
    "click",
    "available",
    "let",
    "search",
    "back",
    "bunch",
    "backup",
    "plugins",
    "would",
    "recommend",
    "one",
    "plugins",
    "specifically",
    "use",
    "backup",
    "plugin",
    "let",
    "go",
    "ahead",
    "install",
    "plugin",
    "right",
    "went",
    "ahead",
    "installed",
    "plugin",
    "let",
    "come",
    "back",
    "manage",
    "plugins",
    "stop",
    "plugin",
    "hang",
    "backup",
    "manager",
    "see",
    "option",
    "uninstall",
    "plugin",
    "first",
    "time",
    "know",
    "setup",
    "would",
    "say",
    "back",
    "particular",
    "give",
    "folder",
    "uh",
    "folder",
    "pertaining",
    "folder",
    "want",
    "jkins",
    "backup",
    "data",
    "would",
    "say",
    "format",
    "zip",
    "format",
    "good",
    "enough",
    "let",
    "give",
    "name",
    "template",
    "file",
    "name",
    "know",
    "backup",
    "good",
    "want",
    "verbose",
    "mode",
    "want",
    "shut",
    "jenkins",
    "shut",
    "okay",
    "one",
    "thing",
    "got",
    "remember",
    "whenever",
    "backup",
    "happens",
    "many",
    "jobs",
    "running",
    "server",
    "kind",
    "slow",
    "jenkins",
    "instance",
    "process",
    "copying",
    "things",
    "files",
    "changed",
    "moment",
    "little",
    "bit",
    "problematic",
    "jenkins",
    "typically",
    "backup",
    "servers",
    "less",
    "load",
    "typically",
    "try",
    "know",
    "bring",
    "shutdown",
    "kind",
    "state",
    "take",
    "backup",
    "right",
    "gon",
    "na",
    "backup",
    "things",
    "know",
    "want",
    "exclude",
    "anything",
    "else",
    "want",
    "history",
    "want",
    "maven",
    "artifacts",
    "possibly",
    "want",
    "guy",
    "would",
    "say",
    "save",
    "would",
    "say",
    "back",
    "would",
    "run",
    "bunch",
    "know",
    "steps",
    "files",
    "required",
    "part",
    "pretty",
    "fast",
    "many",
    "things",
    "server",
    "many",
    "things",
    "server",
    "case",
    "many",
    "things",
    "kind",
    "backup",
    "may",
    "take",
    "let",
    "pause",
    "recording",
    "get",
    "back",
    "backup",
    "complete",
    "go",
    "backup",
    "successful",
    "created",
    "backup",
    "workspace",
    "configurations",
    "users",
    "know",
    "kind",
    "hidden",
    "particular",
    "zip",
    "file",
    "instance",
    "kind",
    "crash",
    "system",
    "instance",
    "say",
    "hard",
    "disk",
    "failure",
    "bring",
    "new",
    "instance",
    "jenkins",
    "kind",
    "use",
    "backup",
    "plugin",
    "restoring",
    "particular",
    "configurations",
    "come",
    "back",
    "manager",
    "cans",
    "come",
    "back",
    "backup",
    "manager",
    "say",
    "restore",
    "jenkins",
    "configuration",
    "devops",
    "today",
    "implemented",
    "know",
    "major",
    "organizations",
    "whether",
    "financial",
    "organization",
    "whether",
    "kind",
    "service",
    "organization",
    "every",
    "organization",
    "somehow",
    "looking",
    "forward",
    "implementation",
    "adaptation",
    "devops",
    "totally",
    "redefines",
    "automate",
    "whole",
    "development",
    "process",
    "together",
    "whatever",
    "manual",
    "efforts",
    "putting",
    "earlier",
    "simply",
    "gets",
    "automated",
    "help",
    "tools",
    "something",
    "get",
    "really",
    "implemented",
    "important",
    "uh",
    "feature",
    "like",
    "ci",
    "cd",
    "pipeline",
    "cicd",
    "pipeline",
    "responsible",
    "delivering",
    "source",
    "core",
    "production",
    "environment",
    "large",
    "duration",
    "time",
    "cicd",
    "pipeline",
    "ultimately",
    "goal",
    "really",
    "helps",
    "us",
    "deliver",
    "production",
    "environment",
    "talk",
    "perspective",
    "let",
    "talk",
    "exactly",
    "cac",
    "pipeline",
    "go",
    "part",
    "go",
    "understanding",
    "cicd",
    "pipeline",
    "basically",
    "continuous",
    "integration",
    "continuous",
    "delivery",
    "concept",
    "used",
    "considered",
    "backbone",
    "overall",
    "devops",
    "approach",
    "one",
    "prime",
    "approach",
    "implement",
    "going",
    "devops",
    "implementation",
    "project",
    "go",
    "devops",
    "implementation",
    "first",
    "minimum",
    "implementation",
    "automation",
    "looking",
    "forward",
    "actually",
    "uh",
    "particular",
    "ca",
    "city",
    "pipelines",
    "cacd",
    "pipelines",
    "really",
    "wonderful",
    "option",
    "talk",
    "devops",
    "exactly",
    "pipeline",
    "term",
    "pipeline",
    "series",
    "events",
    "connected",
    "together",
    "kind",
    "sequence",
    "various",
    "steps",
    "like",
    "know",
    "typically",
    "talk",
    "kind",
    "deployment",
    "like",
    "know",
    "build",
    "process",
    "like",
    "compile",
    "source",
    "code",
    "artifacts",
    "testing",
    "deploy",
    "specific",
    "environment",
    "various",
    "steps",
    "use",
    "like",
    "manually",
    "something",
    "pipeline",
    "pipeline",
    "nothing",
    "sequence",
    "steps",
    "interconnected",
    "executed",
    "one",
    "one",
    "particular",
    "sequence",
    "pipelines",
    "responsible",
    "performing",
    "variety",
    "tasks",
    "like",
    "building",
    "source",
    "code",
    "running",
    "test",
    "cases",
    "probably",
    "deployment",
    "also",
    "added",
    "go",
    "continuous",
    "integration",
    "continuous",
    "delivery",
    "steps",
    "done",
    "sequence",
    "definitely",
    "sequence",
    "important",
    "talk",
    "pipeline",
    "need",
    "talk",
    "sequence",
    "way",
    "working",
    "development",
    "typical",
    "world",
    "thing",
    "putting",
    "specific",
    "pipeline",
    "important",
    "aspect",
    "considered",
    "let",
    "talk",
    "continuous",
    "integration",
    "continuous",
    "integration",
    "also",
    "know",
    "known",
    "ci",
    "uh",
    "pretty",
    "much",
    "see",
    "lot",
    "uh",
    "tools",
    "actually",
    "named",
    "ci",
    "referring",
    "continuous",
    "integration",
    "continuous",
    "integration",
    "practice",
    "integrates",
    "source",
    "code",
    "shared",
    "repository",
    "used",
    "automate",
    "verification",
    "source",
    "code",
    "involves",
    "build",
    "automations",
    "test",
    "cases",
    "automation",
    "also",
    "helps",
    "us",
    "detect",
    "issues",
    "bugs",
    "quite",
    "easily",
    "quite",
    "faster",
    "early",
    "mechanism",
    "want",
    "resolve",
    "problems",
    "continuous",
    "integrations",
    "eliminate",
    "bugs",
    "yes",
    "definitely",
    "helps",
    "uh",
    "know",
    "easily",
    "find",
    "talking",
    "uh",
    "automated",
    "process",
    "talking",
    "automatic",
    "test",
    "cases",
    "definitely",
    "something",
    "help",
    "us",
    "find",
    "bugs",
    "know",
    "development",
    "help",
    "know",
    "proceed",
    "bugs",
    "try",
    "resolve",
    "things",
    "one",
    "one",
    "kind",
    "automated",
    "process",
    "eventually",
    "remove",
    "bugs",
    "bugs",
    "something",
    "recode",
    "fix",
    "following",
    "development",
    "practice",
    "yes",
    "really",
    "help",
    "us",
    "find",
    "bugs",
    "quite",
    "easy",
    "help",
    "remove",
    "continuous",
    "delivery",
    "continuous",
    "delivery",
    "also",
    "known",
    "cd",
    "kind",
    "phase",
    "changes",
    "made",
    "uh",
    "code",
    "deployment",
    "case",
    "happens",
    "uh",
    "um",
    "something",
    "discussing",
    "validating",
    "exactly",
    "want",
    "deliver",
    "customer",
    "exactly",
    "going",
    "ahead",
    "moving",
    "customers",
    "typically",
    "case",
    "continuous",
    "delivery",
    "ultimate",
    "goal",
    "pipeline",
    "make",
    "deployments",
    "end",
    "result",
    "coding",
    "thing",
    "code",
    "programs",
    "development",
    "deployments",
    "like",
    "going",
    "perform",
    "deployment",
    "important",
    "aspect",
    "want",
    "go",
    "ahead",
    "deployments",
    "right",
    "go",
    "real",
    "beauty",
    "kind",
    "way",
    "identify",
    "deployments",
    "done",
    "executed",
    "right",
    "ultimate",
    "goal",
    "pipeline",
    "nothing",
    "deployments",
    "proceed",
    "right",
    "practices",
    "placed",
    "together",
    "order",
    "steps",
    "could",
    "referred",
    "complete",
    "automated",
    "process",
    "process",
    "known",
    "cicd",
    "talking",
    "like",
    "working",
    "automation",
    "case",
    "happens",
    "looking",
    "forward",
    "automation",
    "needs",
    "done",
    "since",
    "kind",
    "ci",
    "cd",
    "automation",
    "talking",
    "nothing",
    "uh",
    "end",
    "result",
    "would",
    "like",
    "build",
    "deployment",
    "automation",
    "taking",
    "care",
    "build",
    "test",
    "case",
    "executions",
    "deployments",
    "talk",
    "cicd",
    "implementation",
    "chcd",
    "also",
    "enables",
    "team",
    "build",
    "deploys",
    "quite",
    "quickly",
    "efficiently",
    "things",
    "know",
    "happening",
    "automatically",
    "manual",
    "efforts",
    "involved",
    "scope",
    "human",
    "error",
    "also",
    "frequently",
    "seen",
    "deployments",
    "may",
    "miss",
    "binaries",
    "miss",
    "something",
    "know",
    "completely",
    "removed",
    "talk",
    "process",
    "makes",
    "teams",
    "agile",
    "productive",
    "uh",
    "confident",
    "um",
    "automations",
    "definitely",
    "gives",
    "kind",
    "boost",
    "confidence",
    "yes",
    "things",
    "going",
    "work",
    "perfectly",
    "fine",
    "issues",
    "present",
    "exactly",
    "jenkins",
    "like",
    "jenkins",
    "typically",
    "understand",
    "know",
    "uh",
    "ci2",
    "cd",
    "tool",
    "exactly",
    "jenkins",
    "jenkins",
    "also",
    "known",
    "kind",
    "orchestration",
    "tool",
    "automated",
    "tool",
    "best",
    "part",
    "completely",
    "open",
    "source",
    "yes",
    "particular",
    "paid",
    "enterprise",
    "tools",
    "like",
    "cloud",
    "b",
    "offering",
    "difference",
    "cloudbees",
    "jenkins",
    "jenkins",
    "kind",
    "open",
    "source",
    "tool",
    "lot",
    "organizations",
    "pretty",
    "much",
    "implement",
    "even",
    "want",
    "go",
    "um",
    "seen",
    "lot",
    "big",
    "organizations",
    "know",
    "going",
    "enterprise",
    "like",
    "cloud",
    "bs",
    "going",
    "pretty",
    "much",
    "know",
    "core",
    "jenkins",
    "software",
    "tool",
    "uh",
    "makes",
    "easy",
    "developers",
    "integrate",
    "changes",
    "project",
    "something",
    "important",
    "really",
    "help",
    "teams",
    "say",
    "things",
    "done",
    "performed",
    "tools",
    "really",
    "easy",
    "developers",
    "integrate",
    "biggest",
    "uh",
    "know",
    "benefit",
    "getting",
    "talk",
    "tools",
    "jenkins",
    "important",
    "tool",
    "considered",
    "talk",
    "automations",
    "jenkins",
    "achieves",
    "continuous",
    "integration",
    "help",
    "plugins",
    "also",
    "kind",
    "another",
    "feature",
    "benefit",
    "get",
    "many",
    "plugins",
    "available",
    "used",
    "uh",
    "example",
    "want",
    "integration",
    "kubernetes",
    "docker",
    "maybe",
    "default",
    "plugins",
    "installed",
    "yes",
    "provisioning",
    "go",
    "installation",
    "plugins",
    "yes",
    "features",
    "start",
    "embedded",
    "integrated",
    "within",
    "jenkins",
    "reason",
    "main",
    "benefit",
    "get",
    "talk",
    "jenkins",
    "implementation",
    "jenkins",
    "uh",
    "know",
    "one",
    "best",
    "fit",
    "building",
    "ci",
    "cd",
    "pipeline",
    "flexibility",
    "uh",
    "open",
    "source",
    "nature",
    "capabilities",
    "support",
    "plugins",
    "quite",
    "easy",
    "use",
    "simple",
    "straightforward",
    "gui",
    "definitely",
    "helps",
    "us",
    "know",
    "easily",
    "understand",
    "go",
    "jenkins",
    "grab",
    "understanding",
    "end",
    "result",
    "able",
    "robust",
    "tool",
    "using",
    "pretty",
    "much",
    "kind",
    "source",
    "code",
    "kind",
    "programming",
    "language",
    "implement",
    "ci",
    "city",
    "whether",
    "android",
    "net",
    "java",
    "languages",
    "support",
    "jenkins",
    "let",
    "talk",
    "acd",
    "pipeline",
    "jenkins",
    "automate",
    "entire",
    "development",
    "process",
    "ci",
    "cd",
    "pipeline",
    "ultimate",
    "know",
    "solution",
    "looking",
    "forward",
    "build",
    "pipeline",
    "jenkins",
    "best",
    "solution",
    "best",
    "fit",
    "available",
    "pretty",
    "much",
    "six",
    "steps",
    "involved",
    "look",
    "forward",
    "kind",
    "pipeline",
    "generic",
    "pipeline",
    "looking",
    "forward",
    "may",
    "like",
    "steps",
    "available",
    "probably",
    "additional",
    "steps",
    "like",
    "plugins",
    "installing",
    "basic",
    "steps",
    "like",
    "minimum",
    "pipeline",
    "want",
    "design",
    "steps",
    "available",
    "let",
    "see",
    "first",
    "one",
    "uh",
    "required",
    "java",
    "jdk",
    "like",
    "jdk",
    "available",
    "system",
    "operating",
    "systems",
    "already",
    "available",
    "gre",
    "like",
    "java",
    "gre",
    "problem",
    "gre",
    "build",
    "process",
    "uh",
    "compilation",
    "run",
    "artifacts",
    "run",
    "jar",
    "files",
    "know",
    "run",
    "application",
    "run",
    "code",
    "base",
    "compilation",
    "requires",
    "java",
    "c",
    "java",
    "jdk",
    "kit",
    "installed",
    "onto",
    "system",
    "reason",
    "one",
    "also",
    "require",
    "jdk",
    "certain",
    "linux",
    "commands",
    "execution",
    "understanding",
    "need",
    "going",
    "run",
    "kind",
    "steps",
    "installation",
    "steps",
    "know",
    "process",
    "pretty",
    "much",
    "required",
    "let",
    "talk",
    "ca",
    "cd",
    "pipeline",
    "jenkins",
    "first",
    "download",
    "jdk",
    "uh",
    "something",
    "installed",
    "go",
    "jenkins",
    "download",
    "jenkins",
    "dot",
    "io",
    "slash",
    "download",
    "website",
    "official",
    "websites",
    "jenkins",
    "best",
    "part",
    "support",
    "different",
    "operating",
    "systems",
    "platforms",
    "easily",
    "say",
    "want",
    "go",
    "java",
    "uh",
    "package",
    "like",
    "bar",
    "file",
    "tucker",
    "ubuntu",
    "deviant",
    "centos",
    "fedora",
    "red",
    "hat",
    "windows",
    "open",
    "sushi",
    "uh",
    "freebsd",
    "ganto",
    "mac",
    "operating",
    "system",
    "fact",
    "whatever",
    "different",
    "kind",
    "artifacts",
    "different",
    "environment",
    "different",
    "uh",
    "application",
    "want",
    "download",
    "able",
    "first",
    "thing",
    "start",
    "download",
    "generic",
    "java",
    "package",
    "like",
    "war",
    "file",
    "execute",
    "download",
    "specific",
    "folder",
    "structure",
    "let",
    "say",
    "say",
    "know",
    "created",
    "folder",
    "called",
    "jenkins",
    "go",
    "jenkins",
    "folder",
    "help",
    "cd",
    "command",
    "run",
    "command",
    "called",
    "java",
    "hyphen",
    "jar",
    "jenkins",
    "dot",
    "bar",
    "uh",
    "executables",
    "uh",
    "artifacts",
    "uh",
    "war",
    "files",
    "easily",
    "executable",
    "um",
    "jar",
    "files",
    "raw",
    "files",
    "easily",
    "deployed",
    "java",
    "command",
    "run",
    "require",
    "kind",
    "web",
    "container",
    "application",
    "container",
    "also",
    "see",
    "running",
    "java",
    "command",
    "runs",
    "applications",
    "done",
    "open",
    "web",
    "browser",
    "uh",
    "open",
    "like",
    "localhost",
    "colony",
    "jenkins",
    "uses",
    "atd",
    "port",
    "like",
    "tomcat",
    "apache",
    "know",
    "deployment",
    "done",
    "installation",
    "done",
    "open",
    "localhost",
    "colony",
    "want",
    "get",
    "uh",
    "jenkins",
    "running",
    "browser",
    "probably",
    "know",
    "go",
    "public",
    "ipad",
    "address",
    "also",
    "put",
    "public",
    "ipad",
    "calling",
    "edt",
    "also",
    "help",
    "know",
    "start",
    "accessing",
    "jenkins",
    "application",
    "option",
    "called",
    "create",
    "new",
    "jobs",
    "need",
    "click",
    "particular",
    "new",
    "job",
    "new",
    "item",
    "new",
    "job",
    "different",
    "naming",
    "conventions",
    "available",
    "going",
    "going",
    "like",
    "proceeding",
    "creating",
    "pipeline",
    "job",
    "option",
    "called",
    "pipeline",
    "job",
    "select",
    "provide",
    "custom",
    "name",
    "pipeline",
    "name",
    "job",
    "name",
    "want",
    "uh",
    "refer",
    "want",
    "process",
    "available",
    "happens",
    "easy",
    "task",
    "us",
    "see",
    "exactly",
    "go",
    "ahead",
    "perform",
    "part",
    "really",
    "help",
    "us",
    "see",
    "pipeline",
    "job",
    "created",
    "know",
    "performed",
    "modifications",
    "pipeline",
    "selected",
    "give",
    "particular",
    "name",
    "name",
    "available",
    "say",
    "okay",
    "scroll",
    "find",
    "pipeline",
    "section",
    "uh",
    "happens",
    "go",
    "say",
    "okay",
    "way",
    "pipelines",
    "managed",
    "know",
    "kind",
    "things",
    "scroll",
    "find",
    "pipeline",
    "section",
    "go",
    "pipeline",
    "script",
    "select",
    "option",
    "different",
    "options",
    "available",
    "like",
    "want",
    "manage",
    "pipelines",
    "know",
    "direct",
    "access",
    "also",
    "like",
    "want",
    "directly",
    "uh",
    "create",
    "uh",
    "create",
    "pipeline",
    "skip",
    "feel",
    "want",
    "manage",
    "like",
    "want",
    "retrieve",
    "jenkins",
    "file",
    "scored",
    "management",
    "tool",
    "also",
    "used",
    "work",
    "also",
    "like",
    "many",
    "variety",
    "things",
    "available",
    "like",
    "use",
    "work",
    "around",
    "exactly",
    "pipeline",
    "job",
    "created",
    "either",
    "fetch",
    "source",
    "code",
    "management",
    "tool",
    "uh",
    "like",
    "gate",
    "version",
    "something",
    "like",
    "directly",
    "put",
    "pipeline",
    "code",
    "right",
    "next",
    "thing",
    "configure",
    "execute",
    "pipeline",
    "job",
    "direct",
    "script",
    "uh",
    "pipeline",
    "selected",
    "put",
    "particular",
    "script",
    "like",
    "jenkins",
    "file",
    "uh",
    "particular",
    "github",
    "link",
    "may",
    "like",
    "already",
    "github",
    "link",
    "jenkins",
    "file",
    "make",
    "use",
    "process",
    "github",
    "link",
    "proceed",
    "uh",
    "processing",
    "done",
    "know",
    "keep",
    "changes",
    "know",
    "uh",
    "picking",
    "pipelines",
    "know",
    "pipeline",
    "script",
    "added",
    "github",
    "know",
    "already",
    "specified",
    "uh",
    "let",
    "go",
    "ahead",
    "jenkins",
    "file",
    "pipeline",
    "script",
    "github",
    "repository",
    "proceed",
    "done",
    "next",
    "go",
    "build",
    "process",
    "click",
    "bill",
    "done",
    "happen",
    "able",
    "see",
    "build",
    "process",
    "done",
    "build",
    "performed",
    "pretty",
    "much",
    "kind",
    "way",
    "click",
    "console",
    "output",
    "get",
    "logs",
    "happening",
    "inside",
    "whatever",
    "pipeline",
    "steps",
    "getting",
    "executed",
    "able",
    "get",
    "able",
    "know",
    "get",
    "part",
    "different",
    "steps",
    "involved",
    "sixth",
    "one",
    "know",
    "uh",
    "yes",
    "whatever",
    "particular",
    "run",
    "build",
    "able",
    "see",
    "source",
    "code",
    "uh",
    "know",
    "checked",
    "downloaded",
    "build",
    "proceed",
    "part",
    "later",
    "want",
    "change",
    "url",
    "github",
    "configure",
    "job",
    "existing",
    "job",
    "change",
    "url",
    "github",
    "link",
    "url",
    "whenever",
    "require",
    "also",
    "clone",
    "uh",
    "job",
    "whenever",
    "go",
    "ahead",
    "work",
    "also",
    "kind",
    "know",
    "best",
    "part",
    "available",
    "right",
    "uh",
    "advanced",
    "settings",
    "put",
    "like",
    "uh",
    "github",
    "repository",
    "say",
    "like",
    "okay",
    "uh",
    "github",
    "repository",
    "going",
    "put",
    "url",
    "know",
    "happen",
    "settings",
    "available",
    "jenkins",
    "file",
    "downloaded",
    "run",
    "build",
    "able",
    "lot",
    "steps",
    "like",
    "lot",
    "configurations",
    "going",
    "uh",
    "checkout",
    "sem",
    "declaration",
    "like",
    "check",
    "sm",
    "checkout",
    "sm",
    "check",
    "specific",
    "source",
    "code",
    "go",
    "log",
    "able",
    "see",
    "every",
    "stage",
    "built",
    "executed",
    "okay",
    "going",
    "talk",
    "demo",
    "pipeline",
    "jenkins",
    "portal",
    "see",
    "option",
    "called",
    "create",
    "job",
    "either",
    "click",
    "new",
    "item",
    "click",
    "new",
    "uh",
    "create",
    "job",
    "going",
    "say",
    "like",
    "pipeline",
    "uh",
    "know",
    "select",
    "pipeline",
    "uh",
    "job",
    "type",
    "freestyle",
    "pipeline",
    "github",
    "organization",
    "multiple",
    "branch",
    "pipeline",
    "different",
    "options",
    "available",
    "going",
    "continue",
    "pipeline",
    "selected",
    "pipeline",
    "say",
    "okay",
    "happen",
    "able",
    "see",
    "configuration",
    "page",
    "related",
    "pipeline",
    "important",
    "part",
    "uh",
    "general",
    "build",
    "trigger",
    "know",
    "options",
    "similar",
    "freestyle",
    "build",
    "step",
    "post",
    "build",
    "step",
    "completely",
    "removed",
    "pipeline",
    "introduction",
    "either",
    "option",
    "put",
    "pipeline",
    "script",
    "altogether",
    "also",
    "particular",
    "example",
    "example",
    "let",
    "talk",
    "github",
    "maven",
    "uh",
    "particular",
    "uh",
    "tool",
    "see",
    "know",
    "got",
    "steps",
    "know",
    "pretty",
    "much",
    "running",
    "run",
    "work",
    "smoothly",
    "check",
    "source",
    "code",
    "going",
    "integrate",
    "like",
    "version",
    "jenkins",
    "file",
    "version",
    "control",
    "system",
    "ideal",
    "approach",
    "following",
    "create",
    "pipeline",
    "cicd",
    "going",
    "select",
    "particular",
    "pipeline",
    "sim",
    "go",
    "git",
    "jenkins",
    "file",
    "name",
    "file",
    "pipeline",
    "script",
    "going",
    "put",
    "repository",
    "one",
    "repository",
    "gate",
    "like",
    "um",
    "even",
    "build",
    "pipeline",
    "available",
    "steps",
    "related",
    "ci",
    "build",
    "deployments",
    "follow",
    "one",
    "uh",
    "private",
    "repository",
    "definitely",
    "add",
    "credentials",
    "public",
    "repository",
    "personal",
    "repository",
    "put",
    "kind",
    "credentials",
    "always",
    "add",
    "credentials",
    "help",
    "ad",
    "help",
    "know",
    "set",
    "whatever",
    "credentials",
    "private",
    "repositories",
    "want",
    "configure",
    "save",
    "configuration",
    "going",
    "going",
    "give",
    "particular",
    "page",
    "related",
    "build",
    "uh",
    "want",
    "run",
    "want",
    "delete",
    "pipeline",
    "want",
    "reconfigure",
    "pipeline",
    "different",
    "options",
    "available",
    "going",
    "click",
    "build",
    "immediately",
    "pipeline",
    "downloaded",
    "processed",
    "may",
    "able",
    "get",
    "complete",
    "stage",
    "view",
    "still",
    "running",
    "yeah",
    "see",
    "checkout",
    "code",
    "done",
    "going",
    "build",
    "okay",
    "one",
    "steps",
    "build",
    "done",
    "continue",
    "next",
    "steps",
    "next",
    "steps",
    "also",
    "go",
    "console",
    "output",
    "log",
    "like",
    "click",
    "click",
    "console",
    "output",
    "check",
    "complete",
    "log",
    "happening",
    "fact",
    "also",
    "see",
    "stage",
    "wise",
    "logs",
    "also",
    "also",
    "important",
    "go",
    "complete",
    "logs",
    "uh",
    "may",
    "know",
    "lot",
    "steps",
    "involved",
    "know",
    "lot",
    "logs",
    "available",
    "want",
    "see",
    "specific",
    "log",
    "specific",
    "stage",
    "comes",
    "picture",
    "see",
    "different",
    "uh",
    "steps",
    "like",
    "test",
    "cases",
    "executions",
    "scenar",
    "cube",
    "analysis",
    "archive",
    "artifacts",
    "deployment",
    "fact",
    "notifications",
    "part",
    "complete",
    "pipeline",
    "whole",
    "pipeline",
    "done",
    "know",
    "get",
    "kind",
    "stage",
    "view",
    "success",
    "artifacts",
    "also",
    "available",
    "download",
    "download",
    "war",
    "file",
    "web",
    "applications",
    "typical",
    "pipeline",
    "looks",
    "like",
    "automation",
    "complete",
    "automations",
    "really",
    "looks",
    "like",
    "important",
    "aspect",
    "really",
    "helps",
    "us",
    "understand",
    "pipelines",
    "configured",
    "done",
    "pretty",
    "much",
    "steps",
    "able",
    "automate",
    "kind",
    "pipelines",
    "demo",
    "build",
    "simple",
    "pipeline",
    "jenkins",
    "uh",
    "pretty",
    "much",
    "one",
    "understood",
    "exactly",
    "ci",
    "cd",
    "pipelines",
    "configured",
    "use",
    "get",
    "hold",
    "part",
    "approximately",
    "seven",
    "sections",
    "cover",
    "devops",
    "go",
    "general",
    "devops",
    "questions",
    "source",
    "code",
    "management",
    "tools",
    "git",
    "continuous",
    "integration",
    "focus",
    "jenkins",
    "continuous",
    "testing",
    "tools",
    "selenium",
    "also",
    "operation",
    "side",
    "devops",
    "configuration",
    "management",
    "tools",
    "chef",
    "puppet",
    "enhanceable",
    "containerization",
    "docker",
    "continuous",
    "marching",
    "tools",
    "nagios",
    "let",
    "get",
    "general",
    "devops",
    "questions",
    "one",
    "questions",
    "going",
    "asked",
    "devops",
    "different",
    "agile",
    "reality",
    "devops",
    "cultural",
    "way",
    "able",
    "deliver",
    "solutions",
    "different",
    "agile",
    "look",
    "evolution",
    "delivery",
    "last",
    "five",
    "ten",
    "years",
    "gone",
    "waterfall",
    "based",
    "delivery",
    "agile",
    "delivery",
    "sprints",
    "continuous",
    "integration",
    "continuous",
    "delivery",
    "around",
    "devops",
    "whole",
    "concept",
    "devops",
    "culturally",
    "different",
    "agile",
    "difference",
    "looking",
    "able",
    "continuous",
    "releases",
    "mean",
    "difference",
    "want",
    "able",
    "send",
    "code",
    "continuously",
    "production",
    "environment",
    "means",
    "operations",
    "team",
    "development",
    "team",
    "working",
    "together",
    "means",
    "code",
    "gets",
    "created",
    "able",
    "go",
    "production",
    "quickly",
    "means",
    "need",
    "testing",
    "code",
    "continuously",
    "production",
    "environment",
    "must",
    "also",
    "able",
    "tested",
    "continuously",
    "changes",
    "errors",
    "come",
    "communicated",
    "effectively",
    "efficiently",
    "back",
    "dev",
    "op",
    "team",
    "another",
    "area",
    "see",
    "devops",
    "different",
    "really",
    "response",
    "engage",
    "customer",
    "customer",
    "coming",
    "website",
    "mobile",
    "app",
    "chat",
    "bot",
    "digital",
    "solution",
    "expectation",
    "going",
    "actually",
    "dev",
    "ops",
    "paradigm",
    "old",
    "model",
    "would",
    "would",
    "capture",
    "requirements",
    "customer",
    "development",
    "testing",
    "would",
    "barriers",
    "move",
    "faster",
    "waterfall",
    "agile",
    "saw",
    "agile",
    "able",
    "respond",
    "much",
    "faster",
    "customer",
    "demands",
    "instead",
    "weeks",
    "months",
    "sometimes",
    "cases",
    "years",
    "releases",
    "software",
    "saw",
    "would",
    "transition",
    "weeks",
    "months",
    "releases",
    "software",
    "see",
    "devops",
    "release",
    "cycle",
    "shrunk",
    "even",
    "goal",
    "continuously",
    "delighting",
    "customer",
    "release",
    "cycle",
    "shrunk",
    "companies",
    "gone",
    "releases",
    "week",
    "every",
    "two",
    "weeks",
    "month",
    "multiple",
    "releases",
    "day",
    "indeed",
    "companies",
    "50",
    "releases",
    "day",
    "something",
    "also",
    "bear",
    "mind",
    "releases",
    "tested",
    "verified",
    "test",
    "records",
    "guarantee",
    "code",
    "going",
    "production",
    "going",
    "good",
    "continuous",
    "code",
    "differences",
    "different",
    "phases",
    "devops",
    "effectively",
    "two",
    "main",
    "phases",
    "devops",
    "planning",
    "coding",
    "phase",
    "deploying",
    "phase",
    "tool",
    "jenkins",
    "allows",
    "integrate",
    "environments",
    "core",
    "benefits",
    "may",
    "devops",
    "going",
    "technical",
    "benefits",
    "business",
    "benefits",
    "somebody",
    "asks",
    "benefits",
    "devops",
    "reply",
    "technical",
    "point",
    "view",
    "able",
    "use",
    "continuous",
    "software",
    "delivery",
    "constantly",
    "push",
    "code",
    "tested",
    "verified",
    "scripts",
    "written",
    "approved",
    "able",
    "push",
    "smaller",
    "chunks",
    "code",
    "issue",
    "go",
    "massive",
    "blocks",
    "code",
    "massive",
    "projects",
    "going",
    "small",
    "micro",
    "services",
    "small",
    "sections",
    "code",
    "able",
    "detect",
    "correct",
    "problems",
    "faster",
    "business",
    "side",
    "benefits",
    "absolutely",
    "fantastic",
    "customer",
    "coming",
    "website",
    "mobile",
    "app",
    "going",
    "see",
    "responses",
    "happening",
    "continuously",
    "customer",
    "always",
    "aware",
    "company",
    "listening",
    "demands",
    "responding",
    "appropriately",
    "able",
    "provide",
    "stable",
    "environment",
    "able",
    "scale",
    "environment",
    "demands",
    "number",
    "customers",
    "using",
    "services",
    "approach",
    "project",
    "needs",
    "implement",
    "devops",
    "really",
    "exciting",
    "area",
    "effectively",
    "three",
    "stages",
    "comes",
    "actually",
    "working",
    "dev",
    "ops",
    "first",
    "stage",
    "assessment",
    "stage",
    "think",
    "back",
    "napkin",
    "ideation",
    "stage",
    "sitting",
    "business",
    "leader",
    "giving",
    "ideas",
    "would",
    "like",
    "see",
    "feedback",
    "customers",
    "blue",
    "sky",
    "opportunity",
    "thinking",
    "big",
    "ideas",
    "second",
    "stage",
    "often",
    "comes",
    "fast",
    "follow",
    "stage",
    "one",
    "actually",
    "proving",
    "concept",
    "developing",
    "proof",
    "concept",
    "proof",
    "concept",
    "actually",
    "multiple",
    "different",
    "things",
    "could",
    "something",
    "simple",
    "wireframe",
    "could",
    "something",
    "complex",
    "mini",
    "version",
    "file",
    "application",
    "depending",
    "scope",
    "work",
    "delivering",
    "really",
    "depend",
    "complicated",
    "want",
    "poc",
    "mind",
    "whatever",
    "choice",
    "make",
    "able",
    "deliver",
    "enough",
    "poc",
    "present",
    "customer",
    "able",
    "respond",
    "creation",
    "developed",
    "able",
    "give",
    "feedback",
    "able",
    "validate",
    "going",
    "right",
    "solution",
    "able",
    "provide",
    "right",
    "product",
    "customers",
    "third",
    "stage",
    "get",
    "dev",
    "ops",
    "stage",
    "exciting",
    "part",
    "rubber",
    "hits",
    "road",
    "start",
    "releasing",
    "code",
    "based",
    "backlog",
    "features",
    "requested",
    "solution",
    "contrast",
    "agile",
    "delivery",
    "continuously",
    "work",
    "backlog",
    "devops",
    "also",
    "looking",
    "putting",
    "analytics",
    "sensors",
    "able",
    "validate",
    "successful",
    "solution",
    "delivered",
    "actually",
    "start",
    "delivering",
    "code",
    "customers",
    "interact",
    "want",
    "able",
    "see",
    "pieces",
    "solution",
    "using",
    "like",
    "complicated",
    "failure",
    "points",
    "want",
    "use",
    "data",
    "feed",
    "back",
    "continuous",
    "integration",
    "means",
    "able",
    "back",
    "fill",
    "demand",
    "work",
    "gets",
    "completed",
    "bank",
    "log",
    "difference",
    "continuous",
    "delivery",
    "continuous",
    "deployment",
    "continuous",
    "delivery",
    "based",
    "putting",
    "code",
    "deployed",
    "safely",
    "production",
    "ensures",
    "businesses",
    "functions",
    "running",
    "would",
    "expect",
    "going",
    "completing",
    "code",
    "actually",
    "see",
    "continuous",
    "deployment",
    "contrast",
    "ensuring",
    "automating",
    "deployment",
    "production",
    "environment",
    "able",
    "go",
    "scale",
    "environment",
    "meet",
    "demands",
    "solution",
    "customer",
    "makes",
    "software",
    "development",
    "release",
    "processes",
    "much",
    "faster",
    "robust",
    "look",
    "actually",
    "see",
    "continuous",
    "integration",
    "continuous",
    "deployment",
    "come",
    "hand",
    "hand",
    "actually",
    "start",
    "initial",
    "pushes",
    "code",
    "continuous",
    "integration",
    "continuous",
    "delivery",
    "point",
    "want",
    "get",
    "comfortable",
    "deploying",
    "code",
    "creating",
    "pushed",
    "production",
    "environment",
    "one",
    "things",
    "great",
    "working",
    "tools",
    "use",
    "devops",
    "continuous",
    "integration",
    "continuous",
    "delivery",
    "model",
    "development",
    "tools",
    "use",
    "uh",
    "containerization",
    "tools",
    "testing",
    "tools",
    "always",
    "reflect",
    "production",
    "environment",
    "means",
    "actually",
    "come",
    "deploying",
    "solutions",
    "production",
    "surprises",
    "development",
    "team",
    "working",
    "exact",
    "environment",
    "way",
    "question",
    "also",
    "asked",
    "know",
    "role",
    "configuration",
    "management",
    "devops",
    "role",
    "configuration",
    "management",
    "really",
    "three",
    "distinct",
    "areas",
    "first",
    "really",
    "obvious",
    "one",
    "one",
    "probably",
    "already",
    "significant",
    "experiences",
    "ability",
    "manage",
    "handle",
    "large",
    "changes",
    "multiple",
    "systems",
    "seconds",
    "rather",
    "days",
    "hours",
    "weeks",
    "may",
    "happened",
    "second",
    "area",
    "want",
    "also",
    "demonstrate",
    "business",
    "reasons",
    "configuration",
    "management",
    "business",
    "reason",
    "allows",
    "infrastructure",
    "standardize",
    "resource",
    "configurations",
    "benefit",
    "able",
    "fewer",
    "people",
    "instead",
    "large",
    "configuration",
    "team",
    "actually",
    "smaller",
    "highly",
    "skilled",
    "team",
    "able",
    "actually",
    "manage",
    "even",
    "larger",
    "operational",
    "environment",
    "thirdly",
    "want",
    "able",
    "highlight",
    "ability",
    "scale",
    "configuration",
    "management",
    "tools",
    "able",
    "manage",
    "significant",
    "number",
    "servers",
    "domains",
    "may",
    "multiple",
    "servers",
    "allows",
    "effectively",
    "manage",
    "servers",
    "deployed",
    "cloud",
    "private",
    "cloud",
    "allow",
    "high",
    "accuracy",
    "continuous",
    "monitoring",
    "help",
    "maintain",
    "entire",
    "architecture",
    "system",
    "question",
    "comes",
    "want",
    "dig",
    "show",
    "knowledge",
    "configuration",
    "continuous",
    "monitoring",
    "able",
    "control",
    "entire",
    "environment",
    "number",
    "one",
    "topic",
    "want",
    "bring",
    "comes",
    "continuous",
    "monitoring",
    "able",
    "effectively",
    "monitor",
    "entire",
    "network",
    "24",
    "7",
    "changes",
    "happen",
    "able",
    "identify",
    "report",
    "thoughts",
    "threats",
    "immediately",
    "respond",
    "immediately",
    "entire",
    "network",
    "instead",
    "wait",
    "happens",
    "sometimes",
    "customer",
    "email",
    "call",
    "say",
    "hey",
    "website",
    "nobody",
    "wants",
    "embarrassing",
    "thing",
    "three",
    "areas",
    "want",
    "able",
    "highlight",
    "ability",
    "able",
    "ensure",
    "right",
    "software",
    "right",
    "services",
    "running",
    "right",
    "resources",
    "number",
    "one",
    "takeaway",
    "want",
    "able",
    "give",
    "continuous",
    "monitoring",
    "second",
    "able",
    "monitor",
    "status",
    "servers",
    "continuously",
    "requiring",
    "manually",
    "monitoring",
    "agent",
    "monitoring",
    "servers",
    "continuously",
    "third",
    "scripting",
    "continuously",
    "monitoring",
    "entire",
    "environment",
    "creating",
    "trail",
    "take",
    "back",
    "demonstrate",
    "effectiveness",
    "operations",
    "environment",
    "providing",
    "one",
    "cloud",
    "companies",
    "strong",
    "advocate",
    "devops",
    "amazon",
    "web",
    "services",
    "aws",
    "really",
    "five",
    "distinct",
    "areas",
    "zero",
    "board",
    "services",
    "question",
    "comes",
    "role",
    "aws",
    "devops",
    "want",
    "really",
    "hold",
    "hand",
    "list",
    "five",
    "areas",
    "focus",
    "using",
    "thumb",
    "finger",
    "want",
    "flexible",
    "services",
    "built",
    "scale",
    "automation",
    "secure",
    "large",
    "partner",
    "ecosystem",
    "five",
    "areas",
    "really",
    "able",
    "help",
    "demonstrate",
    "believe",
    "aws",
    "cloud",
    "providers",
    "aws",
    "certainly",
    "leader",
    "space",
    "great",
    "able",
    "provide",
    "support",
    "role",
    "devops",
    "one",
    "things",
    "want",
    "able",
    "effectively",
    "releasing",
    "kind",
    "solution",
    "able",
    "measure",
    "solution",
    "kpis",
    "important",
    "asked",
    "three",
    "important",
    "dev",
    "kpis",
    "three",
    "really",
    "come",
    "mind",
    "effective",
    "first",
    "one",
    "mean",
    "time",
    "failure",
    "recovery",
    "talks",
    "average",
    "time",
    "take",
    "recover",
    "failure",
    "experience",
    "look",
    "experience",
    "use",
    "specific",
    "example",
    "able",
    "demonstrate",
    "mean",
    "time",
    "failure",
    "recovery",
    "second",
    "deployment",
    "frequency",
    "deployment",
    "frequency",
    "want",
    "able",
    "discuss",
    "often",
    "actually",
    "deploy",
    "solutions",
    "actually",
    "happens",
    "actually",
    "deployments",
    "impacts",
    "network",
    "look",
    "like",
    "deployments",
    "third",
    "one",
    "really",
    "tied",
    "deployment",
    "frequency",
    "around",
    "percentage",
    "failed",
    "deployments",
    "many",
    "times",
    "deploy",
    "server",
    "something",
    "happened",
    "server",
    "failed",
    "looking",
    "going",
    "asked",
    "kpis",
    "experience",
    "actually",
    "devops",
    "deployment",
    "able",
    "understand",
    "devops",
    "looks",
    "like",
    "pushing",
    "infrastructure",
    "second",
    "able",
    "validate",
    "ability",
    "one",
    "word",
    "caution",
    "go",
    "say",
    "hundred",
    "percent",
    "success",
    "uh",
    "reality",
    "servers",
    "degrade",
    "time",
    "maybe",
    "want",
    "talk",
    "time",
    "server",
    "degrade",
    "environment",
    "use",
    "story",
    "able",
    "successfully",
    "get",
    "solve",
    "degradation",
    "one",
    "terms",
    "popular",
    "moment",
    "infrastructure",
    "code",
    "going",
    "asked",
    "explain",
    "infrastructure",
    "code",
    "really",
    "something",
    "actually",
    "becomes",
    "byproduct",
    "work",
    "actually",
    "putting",
    "together",
    "devops",
    "environment",
    "infrastructure",
    "code",
    "really",
    "refers",
    "writing",
    "code",
    "actually",
    "manage",
    "environment",
    "go",
    "many",
    "tools",
    "covered",
    "series",
    "see",
    "xml",
    "ruby",
    "yaml",
    "used",
    "languages",
    "describe",
    "configuration",
    "environment",
    "allows",
    "create",
    "rules",
    "instructions",
    "read",
    "machines",
    "actually",
    "setting",
    "physical",
    "hardware",
    "versus",
    "traditional",
    "model",
    "software",
    "installing",
    "software",
    "directly",
    "onto",
    "machine",
    "really",
    "important",
    "comes",
    "cloud",
    "computing",
    "really",
    "strong",
    "emphasis",
    "able",
    "explain",
    "infrastructure",
    "service",
    "infrastructure",
    "code",
    "fundamental",
    "foundation",
    "infrastructure",
    "service",
    "finally",
    "allows",
    "able",
    "talk",
    "use",
    "scripted",
    "languages",
    "yammer",
    "able",
    "create",
    "consistent",
    "experience",
    "entire",
    "network",
    "right",
    "let",
    "get",
    "next",
    "section",
    "source",
    "code",
    "management",
    "going",
    "focus",
    "specifically",
    "git",
    "reason",
    "get",
    "really",
    "popular",
    "source",
    "code",
    "management",
    "solution",
    "right",
    "technologies",
    "types",
    "distributed",
    "environments",
    "uh",
    "source",
    "code",
    "management",
    "git",
    "uh",
    "probably",
    "effective",
    "first",
    "question",
    "asked",
    "comes",
    "git",
    "talk",
    "difference",
    "centralized",
    "distributed",
    "version",
    "control",
    "look",
    "way",
    "two",
    "set",
    "older",
    "technologies",
    "older",
    "versions",
    "team",
    "foundation",
    "server",
    "though",
    "current",
    "version",
    "actually",
    "git",
    "older",
    "versions",
    "required",
    "centralized",
    "server",
    "check",
    "check",
    "code",
    "developer",
    "centralized",
    "system",
    "files",
    "application",
    "centralized",
    "server",
    "crashes",
    "actually",
    "lose",
    "history",
    "code",
    "contrast",
    "distributed",
    "model",
    "actually",
    "check",
    "code",
    "server",
    "however",
    "effective",
    "building",
    "solution",
    "actually",
    "check",
    "code",
    "solution",
    "directly",
    "onto",
    "local",
    "development",
    "machine",
    "actually",
    "copy",
    "entire",
    "solution",
    "running",
    "local",
    "machine",
    "allows",
    "able",
    "work",
    "effectively",
    "offline",
    "really",
    "allows",
    "scalability",
    "comes",
    "building",
    "team",
    "team",
    "may",
    "europe",
    "actually",
    "scale",
    "team",
    "people",
    "asia",
    "north",
    "america",
    "south",
    "america",
    "easily",
    "worry",
    "whether",
    "right",
    "code",
    "wrong",
    "code",
    "addition",
    "actual",
    "main",
    "server",
    "checking",
    "code",
    "crash",
    "big",
    "deal",
    "actually",
    "person",
    "copy",
    "code",
    "soon",
    "server",
    "comes",
    "back",
    "check",
    "back",
    "everybody",
    "running",
    "back",
    "nothing",
    "happened",
    "one",
    "questions",
    "asked",
    "give",
    "answer",
    "commands",
    "use",
    "working",
    "git",
    "asked",
    "question",
    "git",
    "command",
    "downloads",
    "repository",
    "github",
    "computer",
    "screen",
    "four",
    "options",
    "git",
    "push",
    "git",
    "fork",
    "get",
    "clone",
    "get",
    "commit",
    "answer",
    "instance",
    "would",
    "git",
    "clone",
    "want",
    "able",
    "push",
    "code",
    "local",
    "system",
    "github",
    "repository",
    "using",
    "get",
    "first",
    "want",
    "able",
    "connect",
    "local",
    "repository",
    "remote",
    "repository",
    "example",
    "may",
    "want",
    "talk",
    "using",
    "command",
    "gate",
    "remote",
    "add",
    "origin",
    "actual",
    "path",
    "github",
    "repository",
    "could",
    "wanted",
    "actually",
    "point",
    "also",
    "talk",
    "repositories",
    "get",
    "lab",
    "also",
    "work",
    "private",
    "git",
    "repository",
    "would",
    "used",
    "development",
    "team",
    "actually",
    "added",
    "local",
    "repository",
    "local",
    "computer",
    "second",
    "action",
    "want",
    "use",
    "push",
    "actually",
    "push",
    "local",
    "files",
    "master",
    "environment",
    "use",
    "command",
    "git",
    "push",
    "origin",
    "master",
    "one",
    "question",
    "may",
    "asked",
    "difference",
    "bare",
    "repository",
    "standard",
    "way",
    "initializing",
    "get",
    "repository",
    "let",
    "look",
    "standard",
    "way",
    "standard",
    "way",
    "using",
    "git",
    "init",
    "allows",
    "create",
    "working",
    "directory",
    "using",
    "command",
    "git",
    "folder",
    "creates",
    "folder",
    "creates",
    "revision",
    "history",
    "related",
    "work",
    "contrast",
    "using",
    "bear",
    "way",
    "different",
    "commands",
    "setting",
    "would",
    "git",
    "init",
    "dash",
    "dash",
    "bear",
    "contain",
    "working",
    "checked",
    "source",
    "files",
    "locally",
    "machine",
    "addition",
    "revision",
    "history",
    "actually",
    "stored",
    "root",
    "folder",
    "versus",
    "subfolder",
    "normal",
    "git",
    "init",
    "initialization",
    "following",
    "cli",
    "commands",
    "would",
    "used",
    "rename",
    "file",
    "get",
    "rm",
    "git",
    "mv",
    "git",
    "none",
    "well",
    "instance",
    "would",
    "get",
    "mv",
    "question",
    "asked",
    "around",
    "commit",
    "going",
    "process",
    "revert",
    "commit",
    "already",
    "pushed",
    "made",
    "public",
    "two",
    "ways",
    "address",
    "first",
    "actually",
    "address",
    "bad",
    "file",
    "new",
    "commit",
    "use",
    "command",
    "git",
    "commit",
    "dash",
    "put",
    "comment",
    "file",
    "removed",
    "second",
    "actually",
    "create",
    "new",
    "commit",
    "actually",
    "undoes",
    "changes",
    "made",
    "bad",
    "commit",
    "would",
    "use",
    "git",
    "revert",
    "commit",
    "id",
    "commit",
    "id",
    "could",
    "something",
    "560e",
    "0938f",
    "find",
    "commit",
    "made",
    "would",
    "allow",
    "revert",
    "bad",
    "files",
    "submitted",
    "two",
    "ways",
    "able",
    "get",
    "files",
    "get",
    "repository",
    "going",
    "asked",
    "explain",
    "difference",
    "git",
    "fetch",
    "get",
    "paul",
    "get",
    "fetch",
    "allows",
    "fetch",
    "download",
    "new",
    "data",
    "root",
    "new",
    "repository",
    "integrate",
    "new",
    "data",
    "working",
    "files",
    "undone",
    "time",
    "wanted",
    "break",
    "remote",
    "tracking",
    "branches",
    "contrast",
    "git",
    "pull",
    "updates",
    "current",
    "head",
    "branch",
    "latest",
    "changes",
    "remote",
    "server",
    "get",
    "files",
    "downloaded",
    "downloads",
    "new",
    "data",
    "integrates",
    "current",
    "working",
    "files",
    "system",
    "tries",
    "merge",
    "remote",
    "changes",
    "local",
    "ones",
    "one",
    "questions",
    "get",
    "asked",
    "git",
    "git",
    "stash",
    "developer",
    "working",
    "current",
    "branch",
    "within",
    "solution",
    "happens",
    "come",
    "idea",
    "something",
    "take",
    "different",
    "amount",
    "time",
    "able",
    "complete",
    "want",
    "interrupt",
    "mainline",
    "branch",
    "actually",
    "actually",
    "create",
    "branch",
    "allows",
    "start",
    "working",
    "work",
    "outside",
    "main",
    "line",
    "branch",
    "called",
    "git",
    "stash",
    "allows",
    "able",
    "modify",
    "files",
    "without",
    "interrupting",
    "mainline",
    "branch",
    "start",
    "talking",
    "branching",
    "get",
    "prepared",
    "answer",
    "explain",
    "concept",
    "branching",
    "essentially",
    "allows",
    "mainline",
    "master",
    "branch",
    "code",
    "team",
    "checking",
    "checking",
    "allows",
    "indefinite",
    "number",
    "branches",
    "allows",
    "new",
    "features",
    "built",
    "parallel",
    "mainline",
    "branch",
    "point",
    "reintroduced",
    "main",
    "line",
    "branch",
    "allow",
    "team",
    "add",
    "new",
    "features",
    "look",
    "merge",
    "get",
    "rebase",
    "two",
    "features",
    "using",
    "continuously",
    "able",
    "talk",
    "take",
    "branch",
    "merge",
    "back",
    "mainline",
    "branch",
    "left",
    "hand",
    "side",
    "git",
    "merge",
    "allows",
    "take",
    "code",
    "creating",
    "merge",
    "back",
    "master",
    "right",
    "hand",
    "side",
    "slightly",
    "different",
    "approach",
    "projects",
    "reach",
    "point",
    "project",
    "go",
    "okay",
    "going",
    "effectively",
    "restart",
    "project",
    "point",
    "time",
    "want",
    "ignore",
    "complete",
    "history",
    "happened",
    "called",
    "get",
    "rebase",
    "would",
    "allow",
    "rewrite",
    "project",
    "history",
    "creating",
    "brand",
    "new",
    "mainline",
    "branch",
    "ignores",
    "previous",
    "branches",
    "happened",
    "want",
    "quickly",
    "easily",
    "find",
    "files",
    "used",
    "make",
    "particular",
    "commit",
    "somebody",
    "asks",
    "question",
    "find",
    "list",
    "files",
    "changed",
    "particular",
    "commit",
    "actually",
    "say",
    "go",
    "find",
    "command",
    "git",
    "diff",
    "dash",
    "tree",
    "dash",
    "r",
    "hash",
    "use",
    "commit",
    "would",
    "actually",
    "give",
    "breakdown",
    "files",
    "made",
    "particular",
    "commit",
    "question",
    "asked",
    "talking",
    "merging",
    "files",
    "merge",
    "conflict",
    "git",
    "resolved",
    "essentially",
    "merge",
    "conflict",
    "two",
    "branches",
    "competing",
    "commits",
    "git",
    "able",
    "determine",
    "appropriate",
    "files",
    "need",
    "submitted",
    "would",
    "go",
    "actually",
    "help",
    "resolve",
    "issue",
    "actually",
    "go",
    "manually",
    "edit",
    "conflicted",
    "files",
    "select",
    "changes",
    "want",
    "keep",
    "final",
    "merge",
    "let",
    "go",
    "steps",
    "would",
    "take",
    "able",
    "illustrate",
    "talking",
    "particular",
    "question",
    "interview",
    "essentially",
    "four",
    "stages",
    "first",
    "would",
    "repository",
    "name",
    "want",
    "select",
    "pull",
    "request",
    "want",
    "able",
    "show",
    "pull",
    "request",
    "would",
    "demonstrated",
    "inside",
    "github",
    "within",
    "pull",
    "request",
    "going",
    "highlight",
    "conflict",
    "markers",
    "able",
    "select",
    "conflicts",
    "want",
    "keep",
    "want",
    "merge",
    "ones",
    "want",
    "change",
    "step",
    "actually",
    "resolve",
    "emerge",
    "conflict",
    "first",
    "step",
    "would",
    "github",
    "want",
    "able",
    "pull",
    "repository",
    "name",
    "pull",
    "request",
    "around",
    "repository",
    "pull",
    "request",
    "list",
    "click",
    "pull",
    "request",
    "merge",
    "conflict",
    "like",
    "able",
    "resolve",
    "pull",
    "file",
    "list",
    "conflicts",
    "near",
    "bottom",
    "file",
    "list",
    "requests",
    "need",
    "resolved",
    "need",
    "make",
    "decision",
    "branches",
    "want",
    "keep",
    "ones",
    "want",
    "change",
    "something",
    "put",
    "instructions",
    "inside",
    "file",
    "actually",
    "see",
    "conflict",
    "markers",
    "within",
    "instructions",
    "going",
    "ask",
    "files",
    "want",
    "change",
    "ones",
    "want",
    "keep",
    "one",
    "merge",
    "conflict",
    "file",
    "scroll",
    "next",
    "set",
    "conflict",
    "markers",
    "repeat",
    "steps",
    "four",
    "five",
    "resolve",
    "conflicts",
    "want",
    "mark",
    "file",
    "resolved",
    "github",
    "repository",
    "knows",
    "everything",
    "resolved",
    "one",
    "file",
    "conflict",
    "want",
    "go",
    "onto",
    "next",
    "file",
    "start",
    "working",
    "files",
    "keep",
    "repeating",
    "steps",
    "done",
    "point",
    "conflicts",
    "resolved",
    "resolutions",
    "created",
    "want",
    "select",
    "button",
    "commit",
    "merge",
    "merge",
    "files",
    "back",
    "github",
    "take",
    "care",
    "manage",
    "resolution",
    "merge",
    "conflict",
    "within",
    "github",
    "also",
    "command",
    "line",
    "command",
    "line",
    "want",
    "use",
    "get",
    "bash",
    "want",
    "first",
    "step",
    "open",
    "get",
    "bash",
    "navigate",
    "local",
    "git",
    "repository",
    "command",
    "line",
    "using",
    "cd",
    "change",
    "directory",
    "list",
    "actual",
    "folder",
    "actually",
    "putting",
    "code",
    "want",
    "able",
    "generate",
    "list",
    "files",
    "affected",
    "merge",
    "conflict",
    "instance",
    "actually",
    "see",
    "file",
    "style",
    "merge",
    "conflict",
    "working",
    "github",
    "actually",
    "go",
    "use",
    "text",
    "address",
    "use",
    "text",
    "editor",
    "go",
    "edit",
    "want",
    "keep",
    "want",
    "uh",
    "manage",
    "conflict",
    "actually",
    "resolution",
    "created",
    "able",
    "using",
    "conflict",
    "markers",
    "actually",
    "merge",
    "files",
    "together",
    "solution",
    "allow",
    "incorporate",
    "commits",
    "effectively",
    "resolution",
    "gone",
    "applied",
    "changes",
    "able",
    "merge",
    "conflicted",
    "commits",
    "single",
    "commit",
    "able",
    "push",
    "remote",
    "repository",
    "right",
    "let",
    "talk",
    "next",
    "section",
    "continuous",
    "integration",
    "jenkins",
    "first",
    "question",
    "asked",
    "jenkins",
    "explain",
    "master",
    "slave",
    "architecture",
    "jenkins",
    "way",
    "jenkins",
    "set",
    "jenkins",
    "master",
    "pull",
    "code",
    "remote",
    "git",
    "repository",
    "github",
    "check",
    "repository",
    "every",
    "time",
    "code",
    "commit",
    "distribute",
    "workload",
    "code",
    "tests",
    "need",
    "applied",
    "code",
    "jenkins",
    "slaves",
    "request",
    "jenkins",
    "master",
    "slaves",
    "carry",
    "builds",
    "tests",
    "able",
    "produce",
    "test",
    "reports",
    "next",
    "question",
    "asked",
    "jenkins",
    "file",
    "simply",
    "put",
    "jenkins",
    "file",
    "text",
    "file",
    "definition",
    "jenkins",
    "pipeline",
    "checked",
    "source",
    "code",
    "repository",
    "really",
    "allows",
    "three",
    "distinct",
    "things",
    "happen",
    "one",
    "allows",
    "code",
    "review",
    "iteration",
    "pipeline",
    "permits",
    "audit",
    "trail",
    "pipeline",
    "also",
    "provides",
    "single",
    "source",
    "truth",
    "pipeline",
    "viewed",
    "edited",
    "following",
    "commands",
    "runs",
    "jenkins",
    "command",
    "line",
    "java",
    "jar",
    "jenkins",
    "dot",
    "war",
    "java",
    "dash",
    "war",
    "java",
    "answer",
    "jar",
    "jenkins",
    "dot",
    "wall",
    "working",
    "jenkins",
    "going",
    "asked",
    "key",
    "concepts",
    "aspects",
    "working",
    "jenkins",
    "pipeline",
    "want",
    "really",
    "hold",
    "fingers",
    "go",
    "four",
    "key",
    "areas",
    "pipeline",
    "node",
    "step",
    "stay",
    "pipeline",
    "refers",
    "model",
    "cd",
    "continuous",
    "delivery",
    "pipeline",
    "node",
    "machines",
    "part",
    "jenkins",
    "environment",
    "within",
    "pipeline",
    "step",
    "single",
    "task",
    "tells",
    "jenkins",
    "particular",
    "point",
    "time",
    "finally",
    "stage",
    "defines",
    "conceptually",
    "distinct",
    "subset",
    "tasks",
    "performed",
    "entire",
    "pipeline",
    "tasks",
    "could",
    "build",
    "test",
    "deploy",
    "following",
    "file",
    "used",
    "define",
    "dependency",
    "maven",
    "b",
    "c",
    "answer",
    "working",
    "jenkins",
    "going",
    "asked",
    "explain",
    "two",
    "types",
    "pipeline",
    "used",
    "jenkins",
    "along",
    "syntax",
    "scripted",
    "pipeline",
    "based",
    "groovyscript",
    "domain",
    "specific",
    "language",
    "jenkins",
    "one",
    "note",
    "blocks",
    "used",
    "throughout",
    "entire",
    "pipeline",
    "left",
    "hand",
    "side",
    "actually",
    "see",
    "actual",
    "script",
    "would",
    "look",
    "like",
    "right",
    "hand",
    "side",
    "shows",
    "actual",
    "declaration",
    "section",
    "script",
    "would",
    "second",
    "type",
    "jenkins",
    "pipeline",
    "declarative",
    "pipeline",
    "declarative",
    "pipeline",
    "provides",
    "simple",
    "friendly",
    "syntax",
    "define",
    "pipeline",
    "look",
    "like",
    "actually",
    "point",
    "use",
    "example",
    "actually",
    "break",
    "blocks",
    "used",
    "find",
    "work",
    "completed",
    "decorative",
    "pipeline",
    "create",
    "copy",
    "backup",
    "jenkins",
    "well",
    "create",
    "backup",
    "periodically",
    "back",
    "jenkins",
    "jenkins",
    "home",
    "directory",
    "create",
    "copy",
    "directory",
    "really",
    "simple",
    "question",
    "asked",
    "well",
    "copy",
    "jenkins",
    "one",
    "server",
    "another",
    "well",
    "essentially",
    "three",
    "ways",
    "one",
    "move",
    "job",
    "one",
    "installation",
    "jenkins",
    "another",
    "copying",
    "corresponding",
    "job",
    "directory",
    "second",
    "would",
    "create",
    "copy",
    "existing",
    "job",
    "directory",
    "making",
    "clone",
    "job",
    "directory",
    "different",
    "name",
    "third",
    "rename",
    "existing",
    "job",
    "renaming",
    "directory",
    "security",
    "fundamental",
    "work",
    "within",
    "devops",
    "jenkins",
    "provides",
    "center",
    "core",
    "work",
    "gets",
    "completed",
    "within",
    "devops",
    "environment",
    "three",
    "ways",
    "apply",
    "security",
    "authenticate",
    "users",
    "effectively",
    "asked",
    "question",
    "security",
    "within",
    "jenkins",
    "three",
    "responses",
    "want",
    "able",
    "provide",
    "jenkins",
    "internal",
    "database",
    "uses",
    "secured",
    "user",
    "data",
    "user",
    "credentials",
    "b",
    "use",
    "ldap",
    "lightweight",
    "directory",
    "access",
    "protocol",
    "server",
    "able",
    "authenticate",
    "jenkins",
    "users",
    "c",
    "actually",
    "configure",
    "jenkins",
    "authenticate",
    "using",
    "oauth",
    "modern",
    "method",
    "able",
    "authenticate",
    "users",
    "going",
    "asked",
    "deploy",
    "custom",
    "build",
    "core",
    "plugin",
    "within",
    "jenkins",
    "essentially",
    "four",
    "steps",
    "want",
    "go",
    "first",
    "copying",
    "dot",
    "hpi",
    "plugin",
    "file",
    "jenkins",
    "home",
    "plugins",
    "subdirectory",
    "want",
    "remove",
    "plugins",
    "development",
    "directory",
    "one",
    "want",
    "create",
    "empty",
    "file",
    "called",
    "completed",
    "three",
    "steps",
    "restart",
    "jenkins",
    "custom",
    "build",
    "plugin",
    "available",
    "temporarily",
    "turn",
    "jenkins",
    "security",
    "administrative",
    "user",
    "locked",
    "admin",
    "console",
    "well",
    "happen",
    "often",
    "good",
    "know",
    "actually",
    "get",
    "jenkins",
    "able",
    "resolve",
    "problems",
    "authenticating",
    "effectively",
    "system",
    "administrator",
    "want",
    "able",
    "get",
    "jenkins",
    "environment",
    "want",
    "able",
    "locate",
    "config",
    "file",
    "see",
    "set",
    "true",
    "allows",
    "security",
    "enabled",
    "change",
    "user",
    "security",
    "setting",
    "false",
    "security",
    "disable",
    "allow",
    "make",
    "administrative",
    "changes",
    "next",
    "time",
    "jenkins",
    "restarted",
    "ways",
    "build",
    "scheduled",
    "run",
    "jenkins",
    "well",
    "four",
    "ways",
    "identify",
    "way",
    "build",
    "scheduled",
    "running",
    "jenkins",
    "first",
    "source",
    "code",
    "management",
    "commits",
    "new",
    "code",
    "repository",
    "run",
    "jenkins",
    "point",
    "second",
    "completion",
    "builds",
    "maybe",
    "multiple",
    "builds",
    "project",
    "dependent",
    "many",
    "builds",
    "executed",
    "jenkins",
    "run",
    "schedule",
    "bills",
    "run",
    "specified",
    "time",
    "may",
    "nightly",
    "builds",
    "code",
    "illustrates",
    "changes",
    "solution",
    "building",
    "finally",
    "also",
    "manually",
    "build",
    "environment",
    "request",
    "occasionally",
    "want",
    "also",
    "restart",
    "jenkins",
    "good",
    "question",
    "around",
    "restart",
    "jenkins",
    "manually",
    "comes",
    "answers",
    "two",
    "ways",
    "one",
    "force",
    "restart",
    "without",
    "waiting",
    "bills",
    "complete",
    "using",
    "jenkins",
    "url",
    "environment",
    "slash",
    "restart",
    "allow",
    "running",
    "bills",
    "complete",
    "restart",
    "required",
    "case",
    "would",
    "use",
    "command",
    "url",
    "jenkins",
    "environment",
    "slash",
    "safe",
    "restart",
    "let",
    "go",
    "fourth",
    "final",
    "section",
    "first",
    "video",
    "talks",
    "continuous",
    "testing",
    "selenium",
    "first",
    "question",
    "asked",
    "likely",
    "around",
    "selenium",
    "four",
    "different",
    "selenium",
    "components",
    "want",
    "hold",
    "open",
    "fingers",
    "four",
    "distinct",
    "environments",
    "selenium",
    "integrated",
    "development",
    "environment",
    "selenium",
    "ide",
    "selenium",
    "remote",
    "control",
    "selenium",
    "rc",
    "selenium",
    "web",
    "driver",
    "selenium",
    "grid",
    "asked",
    "explain",
    "areas",
    "detail",
    "let",
    "start",
    "looking",
    "selenium",
    "driver",
    "different",
    "exceptions",
    "selenium",
    "webdriver",
    "useful",
    "remember",
    "exception",
    "event",
    "occurs",
    "execution",
    "program",
    "disrupts",
    "normal",
    "flow",
    "program",
    "instructions",
    "four",
    "timeout",
    "exception",
    "element",
    "visible",
    "exception",
    "element",
    "exception",
    "session",
    "found",
    "exception",
    "step",
    "four",
    "different",
    "types",
    "exceptions",
    "thrown",
    "using",
    "selenium",
    "web",
    "driver",
    "evolve",
    "digital",
    "world",
    "different",
    "types",
    "products",
    "available",
    "us",
    "able",
    "build",
    "solutions",
    "onto",
    "multiple",
    "platforms",
    "going",
    "asked",
    "selenium",
    "devops",
    "tools",
    "run",
    "environments",
    "good",
    "question",
    "around",
    "cancelium",
    "test",
    "application",
    "android",
    "web",
    "browser",
    "short",
    "answer",
    "absolutely",
    "yes",
    "use",
    "android",
    "driver",
    "able",
    "work",
    "want",
    "able",
    "talk",
    "three",
    "different",
    "types",
    "supported",
    "tests",
    "within",
    "selenium",
    "question",
    "comes",
    "different",
    "test",
    "types",
    "supported",
    "cyan",
    "answer",
    "three",
    "different",
    "types",
    "tests",
    "first",
    "functional",
    "test",
    "second",
    "regression",
    "test",
    "third",
    "load",
    "testing",
    "test",
    "functional",
    "test",
    "kind",
    "black",
    "box",
    "testing",
    "test",
    "cases",
    "based",
    "specific",
    "area",
    "feature",
    "within",
    "software",
    "regression",
    "test",
    "helps",
    "find",
    "specific",
    "areas",
    "functional",
    "tests",
    "areas",
    "code",
    "would",
    "able",
    "detect",
    "load",
    "testing",
    "test",
    "allows",
    "monitor",
    "response",
    "solution",
    "increase",
    "volume",
    "hits",
    "using",
    "code",
    "put",
    "onto",
    "additional",
    "question",
    "asked",
    "get",
    "text",
    "web",
    "element",
    "using",
    "selenium",
    "well",
    "get",
    "command",
    "due",
    "achieve",
    "text",
    "specific",
    "web",
    "element",
    "important",
    "remember",
    "however",
    "command",
    "return",
    "parameters",
    "returns",
    "string",
    "value",
    "want",
    "able",
    "capture",
    "stream",
    "value",
    "discuss",
    "question",
    "asked",
    "around",
    "selenium",
    "handle",
    "keyboard",
    "mouse",
    "actions",
    "using",
    "selenium",
    "answer",
    "yes",
    "make",
    "sure",
    "using",
    "advanced",
    "user",
    "interaction",
    "api",
    "advanced",
    "user",
    "interaction",
    "api",
    "something",
    "scripted",
    "tests",
    "allows",
    "capturing",
    "methods",
    "click",
    "hold",
    "drag",
    "drop",
    "mass",
    "events",
    "keyboard",
    "keyboard",
    "key",
    "release",
    "events",
    "want",
    "capture",
    "say",
    "use",
    "control",
    "shift",
    "specific",
    "function",
    "button",
    "keyboard",
    "able",
    "capture",
    "following",
    "four",
    "elements",
    "elements",
    "web",
    "element",
    "method",
    "get",
    "text",
    "b",
    "size",
    "c",
    "get",
    "tag",
    "name",
    "send",
    "keys",
    "b",
    "size",
    "going",
    "asked",
    "explain",
    "difference",
    "use",
    "find",
    "element",
    "find",
    "elements",
    "look",
    "find",
    "element",
    "find",
    "element",
    "finds",
    "first",
    "element",
    "current",
    "web",
    "page",
    "matches",
    "specified",
    "locator",
    "value",
    "contrast",
    "find",
    "elements",
    "finds",
    "elements",
    "web",
    "page",
    "matches",
    "specified",
    "value",
    "using",
    "webdriver",
    "driver",
    "close",
    "driver",
    "quit",
    "commands",
    "two",
    "different",
    "methods",
    "used",
    "close",
    "web",
    "browser",
    "session",
    "selenium",
    "driver",
    "close",
    "close",
    "current",
    "web",
    "browser",
    "focus",
    "set",
    "driver",
    "quit",
    "closes",
    "browser",
    "windows",
    "ends",
    "web",
    "driver",
    "session",
    "completely",
    "final",
    "question",
    "likely",
    "asked",
    "using",
    "selenium",
    "submit",
    "form",
    "using",
    "selenium",
    "well",
    "instance",
    "relatively",
    "easy",
    "following",
    "lines",
    "code",
    "let",
    "submit",
    "form",
    "selenium",
    "would",
    "web",
    "element",
    "el",
    "equals",
    "driver",
    "dot",
    "find",
    "element",
    "put",
    "id",
    "element",
    "id",
    "l",
    "submit",
    "open",
    "close",
    "parentheses",
    "semicolon",
    "let",
    "get",
    "first",
    "section",
    "configuration",
    "management",
    "one",
    "questions",
    "get",
    "asked",
    "right",
    "away",
    "ssl",
    "certificates",
    "used",
    "chef",
    "really",
    "fundamentally",
    "immediate",
    "answer",
    "security",
    "ssl",
    "provides",
    "high",
    "level",
    "private",
    "security",
    "private",
    "public",
    "key",
    "pairing",
    "really",
    "essential",
    "ensure",
    "secure",
    "environment",
    "throughout",
    "entire",
    "network",
    "second",
    "part",
    "using",
    "ssl",
    "using",
    "private",
    "public",
    "key",
    "model",
    "within",
    "ssl",
    "able",
    "guarantee",
    "systems",
    "network",
    "chef",
    "able",
    "validate",
    "nodes",
    "within",
    "network",
    "chef",
    "validating",
    "actually",
    "real",
    "nodes",
    "imposters",
    "also",
    "asked",
    "questions",
    "following",
    "following",
    "commands",
    "would",
    "use",
    "stop",
    "disable",
    "http",
    "service",
    "system",
    "boots",
    "typically",
    "get",
    "four",
    "responses",
    "system",
    "ctl",
    "disable",
    "system",
    "disable",
    "system",
    "disable",
    "httpd",
    "final",
    "option",
    "system",
    "ctl",
    "disable",
    "answer",
    "first",
    "one",
    "hashtag",
    "chef",
    "comes",
    "series",
    "tools",
    "allow",
    "function",
    "effectively",
    "one",
    "tools",
    "going",
    "asked",
    "test",
    "kitchen",
    "test",
    "kitchen",
    "essentially",
    "command",
    "line",
    "tool",
    "allows",
    "able",
    "test",
    "cookbook",
    "actually",
    "deploy",
    "real",
    "note",
    "commands",
    "would",
    "use",
    "instance",
    "want",
    "create",
    "instance",
    "test",
    "kitchen",
    "would",
    "kitchen",
    "create",
    "want",
    "destroy",
    "instance",
    "created",
    "kitchen",
    "destroy",
    "want",
    "able",
    "combine",
    "multiple",
    "instances",
    "would",
    "kitchen",
    "converge",
    "question",
    "get",
    "around",
    "chef",
    "chef",
    "apply",
    "differ",
    "chef",
    "client",
    "fundamentally",
    "difference",
    "chef",
    "apply",
    "validate",
    "recipe",
    "working",
    "whereas",
    "chef",
    "client",
    "looks",
    "apply",
    "validate",
    "entire",
    "cookbook",
    "run",
    "server",
    "environment",
    "one",
    "focused",
    "recipe",
    "focused",
    "entire",
    "cookbook",
    "differences",
    "working",
    "different",
    "command",
    "lines",
    "instance",
    "working",
    "puppets",
    "working",
    "one",
    "version",
    "puppet",
    "want",
    "command",
    "sign",
    "requested",
    "certificate",
    "top",
    "example",
    "public",
    "version",
    "whereas",
    "lower",
    "option",
    "puppet",
    "version",
    "something",
    "bear",
    "mind",
    "going",
    "interview",
    "process",
    "tools",
    "used",
    "within",
    "continuous",
    "integration",
    "continuous",
    "delivery",
    "devops",
    "model",
    "vary",
    "want",
    "able",
    "talk",
    "knowledgeably",
    "different",
    "versions",
    "tools",
    "talking",
    "interviewer",
    "able",
    "show",
    "deep",
    "knowledge",
    "open",
    "source",
    "community",
    "tools",
    "use",
    "make",
    "puppet",
    "powerful",
    "essentially",
    "question",
    "going",
    "asking",
    "look",
    "beyond",
    "core",
    "foundation",
    "puppet",
    "three",
    "options",
    "uh",
    "able",
    "track",
    "configurations",
    "jira",
    "anyway",
    "great",
    "way",
    "able",
    "clearly",
    "communicate",
    "work",
    "done",
    "puppet",
    "version",
    "control",
    "extended",
    "get",
    "changes",
    "passed",
    "jenkins",
    "three",
    "tools",
    "want",
    "looking",
    "integration",
    "jira",
    "git",
    "jenkins",
    "resources",
    "puppet",
    "well",
    "fundamentally",
    "four",
    "resources",
    "basic",
    "units",
    "configuration",
    "management",
    "tool",
    "features",
    "nodes",
    "written",
    "catalog",
    "execution",
    "catalog",
    "node",
    "dig",
    "deeper",
    "puppet",
    "one",
    "things",
    "likely",
    "asked",
    "regarding",
    "puppet",
    "class",
    "puppet",
    "class",
    "puppet",
    "really",
    "name",
    "blocks",
    "manifest",
    "contain",
    "various",
    "configurations",
    "thing",
    "include",
    "services",
    "files",
    "packages",
    "screen",
    "example",
    "class",
    "would",
    "look",
    "like",
    "write",
    "may",
    "want",
    "memorize",
    "one",
    "class",
    "memorize",
    "whole",
    "set",
    "classes",
    "memorize",
    "one",
    "person",
    "interviewing",
    "really",
    "looking",
    "someone",
    "working",
    "knowledge",
    "looking",
    "memorized",
    "complete",
    "massive",
    "classes",
    "one",
    "small",
    "class",
    "able",
    "illustrate",
    "experience",
    "extremely",
    "valuable",
    "interviewer",
    "particularly",
    "technical",
    "interview",
    "move",
    "ansible",
    "one",
    "things",
    "going",
    "asked",
    "around",
    "ansible",
    "ansible",
    "role",
    "role",
    "independent",
    "block",
    "tasks",
    "variable",
    "files",
    "templates",
    "embedded",
    "inside",
    "playbook",
    "example",
    "screen",
    "actually",
    "shows",
    "one",
    "role",
    "within",
    "playbook",
    "role",
    "install",
    "tomcat",
    "node",
    "previous",
    "question",
    "within",
    "puppet",
    "class",
    "probably",
    "good",
    "memorized",
    "one",
    "two",
    "roles",
    "talk",
    "knowledgeably",
    "ansible",
    "interview",
    "working",
    "ansible",
    "using",
    "curly",
    "brackets",
    "frame",
    "reference",
    "uh",
    "often",
    "two",
    "different",
    "ways",
    "kind",
    "brackets",
    "referred",
    "either",
    "referred",
    "french",
    "brackets",
    "curly",
    "brackets",
    "either",
    "way",
    "wanting",
    "ask",
    "would",
    "use",
    "specific",
    "types",
    "brackets",
    "within",
    "ansible",
    "really",
    "answer",
    "comes",
    "two",
    "things",
    "one",
    "makes",
    "easier",
    "distinguish",
    "strings",
    "undefined",
    "variables",
    "second",
    "putting",
    "together",
    "conditional",
    "statements",
    "actually",
    "using",
    "variables",
    "example",
    "prints",
    "value",
    "foo",
    "put",
    "variable",
    "conditional",
    "statement",
    "vu",
    "defined",
    "something",
    "best",
    "way",
    "make",
    "content",
    "reusable",
    "redistributable",
    "ansible",
    "really",
    "essentially",
    "three",
    "first",
    "include",
    "sub",
    "module",
    "another",
    "file",
    "playbook",
    "second",
    "import",
    "improvement",
    "include",
    "ensures",
    "file",
    "added",
    "third",
    "roles",
    "manage",
    "tasks",
    "within",
    "playbook",
    "question",
    "asked",
    "provide",
    "differences",
    "ansible",
    "puppets",
    "look",
    "ansible",
    "easy",
    "agentless",
    "installation",
    "based",
    "python",
    "configure",
    "yaml",
    "support",
    "windows",
    "contrast",
    "puppet",
    "installation",
    "written",
    "ruby",
    "configuration",
    "files",
    "written",
    "dsl",
    "support",
    "popular",
    "operating",
    "systems",
    "dig",
    "deeper",
    "actual",
    "architecture",
    "ansible",
    "much",
    "simple",
    "architecture",
    "definitely",
    "push",
    "architecture",
    "contrast",
    "puppet",
    "complicated",
    "sophisticated",
    "architecture",
    "able",
    "complete",
    "environment",
    "managed",
    "puppet",
    "architecture",
    "let",
    "get",
    "next",
    "section",
    "containerization",
    "let",
    "go",
    "going",
    "asked",
    "explain",
    "architecture",
    "docker",
    "docker",
    "really",
    "popular",
    "containerization",
    "environment",
    "docker",
    "uses",
    "client",
    "server",
    "architecture",
    "docker",
    "client",
    "service",
    "runs",
    "command",
    "line",
    "docker",
    "daemon",
    "run",
    "rest",
    "api",
    "within",
    "command",
    "line",
    "accept",
    "requests",
    "interacts",
    "operating",
    "system",
    "order",
    "build",
    "docker",
    "images",
    "run",
    "docker",
    "containers",
    "docker",
    "image",
    "template",
    "instructions",
    "used",
    "create",
    "containers",
    "docker",
    "container",
    "executable",
    "package",
    "applications",
    "dependencies",
    "together",
    "finally",
    "docker",
    "registry",
    "service",
    "host",
    "distribute",
    "docker",
    "images",
    "among",
    "users",
    "also",
    "asked",
    "provide",
    "advantages",
    "docker",
    "virtual",
    "machine",
    "something",
    "comes",
    "consistently",
    "fact",
    "um",
    "may",
    "want",
    "even",
    "extend",
    "differences",
    "dedicated",
    "machine",
    "virtual",
    "machine",
    "docker",
    "environment",
    "really",
    "arguments",
    "docker",
    "absolutely",
    "fantastic",
    "know",
    "first",
    "docker",
    "contain",
    "occupy",
    "docket",
    "containers",
    "occupy",
    "significantly",
    "less",
    "space",
    "virtual",
    "machine",
    "dedicated",
    "machine",
    "boot",
    "time",
    "docker",
    "significantly",
    "faster",
    "vm",
    "containers",
    "much",
    "better",
    "performance",
    "hosted",
    "single",
    "docker",
    "image",
    "docker",
    "highly",
    "efficient",
    "easy",
    "scale",
    "particularly",
    "start",
    "working",
    "kubernetes",
    "easily",
    "portable",
    "across",
    "multiple",
    "platforms",
    "finally",
    "space",
    "allocation",
    "docker",
    "data",
    "volumes",
    "shared",
    "reused",
    "among",
    "multiple",
    "containers",
    "argument",
    "virtual",
    "machines",
    "significant",
    "particularly",
    "going",
    "older",
    "environment",
    "company",
    "still",
    "using",
    "actual",
    "dedicated",
    "hardware",
    "moved",
    "cloud",
    "environment",
    "arguments",
    "docker",
    "going",
    "persuasive",
    "clear",
    "advantages",
    "docker",
    "virtual",
    "machine",
    "want",
    "able",
    "succinctly",
    "share",
    "team",
    "something",
    "important",
    "going",
    "interview",
    "process",
    "also",
    "equally",
    "important",
    "particularly",
    "working",
    "company",
    "transitioning",
    "going",
    "digital",
    "transformation",
    "used",
    "working",
    "tools",
    "like",
    "docker",
    "need",
    "able",
    "effectively",
    "share",
    "team",
    "benefits",
    "share",
    "docker",
    "containers",
    "different",
    "nodes",
    "instance",
    "want",
    "able",
    "leverage",
    "power",
    "docker",
    "swarm",
    "docker",
    "swarm",
    "tool",
    "allows",
    "administrators",
    "developers",
    "create",
    "manage",
    "clusters",
    "swarm",
    "nodes",
    "within",
    "darker",
    "platform",
    "two",
    "elements",
    "node",
    "manager",
    "node",
    "worker",
    "node",
    "manager",
    "node",
    "assume",
    "manages",
    "entire",
    "infrastructure",
    "working",
    "node",
    "actually",
    "work",
    "agent",
    "gets",
    "executed",
    "commands",
    "create",
    "docker",
    "swarm",
    "example",
    "manager",
    "node",
    "would",
    "look",
    "like",
    "created",
    "swarm",
    "magic",
    "node",
    "add",
    "worker",
    "nodes",
    "swarm",
    "stepping",
    "process",
    "precise",
    "execution",
    "part",
    "needs",
    "taken",
    "able",
    "effectively",
    "create",
    "swarm",
    "start",
    "manager",
    "node",
    "create",
    "worker",
    "node",
    "finally",
    "node",
    "initialized",
    "manager",
    "node",
    "immediately",
    "create",
    "token",
    "token",
    "used",
    "worker",
    "nodes",
    "associating",
    "ip",
    "address",
    "worker",
    "nodes",
    "question",
    "17",
    "run",
    "multiple",
    "containers",
    "using",
    "single",
    "service",
    "possible",
    "run",
    "multiple",
    "containers",
    "single",
    "service",
    "using",
    "docker",
    "compose",
    "docker",
    "compose",
    "actually",
    "run",
    "services",
    "isolation",
    "interact",
    "language",
    "used",
    "write",
    "compose",
    "files",
    "allow",
    "run",
    "service",
    "called",
    "yaml",
    "yamos",
    "stands",
    "yet",
    "another",
    "markup",
    "language",
    "use",
    "docker",
    "file",
    "docker",
    "file",
    "actually",
    "used",
    "creating",
    "docker",
    "images",
    "using",
    "build",
    "command",
    "let",
    "go",
    "show",
    "screen",
    "would",
    "look",
    "like",
    "would",
    "opportunity",
    "actually",
    "technical",
    "interview",
    "could",
    "potentially",
    "even",
    "ask",
    "hey",
    "draw",
    "whiteboard",
    "show",
    "architecture",
    "using",
    "build",
    "command",
    "would",
    "look",
    "like",
    "process",
    "would",
    "look",
    "like",
    "um",
    "going",
    "interview",
    "process",
    "someone",
    "interviews",
    "lot",
    "people",
    "one",
    "things",
    "really",
    "like",
    "interview",
    "candidate",
    "something",
    "slightly",
    "different",
    "instance",
    "great",
    "example",
    "stand",
    "whiteboard",
    "actually",
    "show",
    "actually",
    "done",
    "actually",
    "creating",
    "images",
    "whiteboard",
    "quickly",
    "little",
    "square",
    "boxes",
    "actually",
    "show",
    "flow",
    "creating",
    "build",
    "environment",
    "architect",
    "something",
    "comfortable",
    "interview",
    "certainly",
    "want",
    "ask",
    "permission",
    "actually",
    "interview",
    "really",
    "helps",
    "demonstrate",
    "comfortable",
    "feelings",
    "working",
    "kind",
    "architecture",
    "drawings",
    "back",
    "question",
    "creating",
    "docker",
    "file",
    "go",
    "docker",
    "file",
    "actually",
    "goes",
    "ahead",
    "creates",
    "docker",
    "image",
    "turns",
    "creates",
    "docker",
    "container",
    "able",
    "push",
    "docker",
    "hub",
    "share",
    "docker",
    "hub",
    "everybody",
    "else",
    "part",
    "docker",
    "registry",
    "whole",
    "network",
    "differences",
    "docker",
    "image",
    "docker",
    "containers",
    "let",
    "go",
    "docker",
    "image",
    "docker",
    "images",
    "templates",
    "docker",
    "container",
    "image",
    "built",
    "using",
    "docker",
    "file",
    "stores",
    "docker",
    "file",
    "docker",
    "repository",
    "docker",
    "hub",
    "use",
    "docker",
    "hub",
    "example",
    "image",
    "layer",
    "read",
    "file",
    "system",
    "docker",
    "container",
    "collection",
    "runtime",
    "instances",
    "docker",
    "image",
    "containers",
    "created",
    "using",
    "docker",
    "images",
    "stored",
    "docker",
    "daemon",
    "every",
    "container",
    "layer",
    "read",
    "write",
    "file",
    "system",
    "ca",
    "replace",
    "information",
    "append",
    "actually",
    "use",
    "yaml",
    "writing",
    "question",
    "asked",
    "instead",
    "yammer",
    "alternate",
    "file",
    "build",
    "docker",
    "compose",
    "yaml",
    "one",
    "default",
    "also",
    "use",
    "json",
    "comfortable",
    "working",
    "json",
    "something",
    "uh",
    "get",
    "comfortable",
    "want",
    "able",
    "use",
    "name",
    "files",
    "frame",
    "reference",
    "adjacent",
    "logical",
    "way",
    "able",
    "value",
    "paired",
    "matching",
    "using",
    "javascript",
    "like",
    "syntax",
    "going",
    "asked",
    "create",
    "docker",
    "container",
    "let",
    "go",
    "would",
    "look",
    "break",
    "task",
    "task",
    "task",
    "going",
    "create",
    "mysql",
    "docker",
    "container",
    "want",
    "able",
    "build",
    "docker",
    "image",
    "pull",
    "existing",
    "docker",
    "image",
    "docker",
    "repository",
    "hub",
    "want",
    "able",
    "use",
    "docker",
    "create",
    "new",
    "container",
    "sequel",
    "existing",
    "docker",
    "image",
    "simultaneously",
    "layer",
    "read",
    "write",
    "file",
    "system",
    "also",
    "created",
    "top",
    "image",
    "bottom",
    "screen",
    "commands",
    "lines",
    "look",
    "difference",
    "registry",
    "repository",
    "let",
    "go",
    "docker",
    "registry",
    "repository",
    "registry",
    "docker",
    "registry",
    "open",
    "source",
    "service",
    "used",
    "hosting",
    "distributing",
    "docker",
    "images",
    "whereas",
    "contrast",
    "repositories",
    "collection",
    "multiple",
    "versions",
    "docker",
    "image",
    "registry",
    "user",
    "distinguish",
    "docker",
    "images",
    "tag",
    "names",
    "finally",
    "registry",
    "docker",
    "also",
    "default",
    "registry",
    "called",
    "docker",
    "harb",
    "repository",
    "collection",
    "multiple",
    "versions",
    "docker",
    "images",
    "stored",
    "docker",
    "registry",
    "two",
    "types",
    "public",
    "private",
    "registry",
    "actually",
    "create",
    "enterprise",
    "registry",
    "gon",
    "na",
    "asked",
    "know",
    "cloud",
    "platforms",
    "support",
    "docker",
    "really",
    "know",
    "lifts",
    "listed",
    "amazon",
    "web",
    "services",
    "microsoft",
    "azure",
    "google",
    "cloud",
    "rackspace",
    "could",
    "add",
    "ibm",
    "bluemix",
    "could",
    "put",
    "red",
    "hat",
    "really",
    "cloud",
    "service",
    "providers",
    "today",
    "support",
    "docker",
    "become",
    "industry",
    "standard",
    "purpose",
    "expose",
    "publish",
    "commands",
    "docker",
    "go",
    "expose",
    "instruction",
    "used",
    "docker",
    "file",
    "whereas",
    "publish",
    "used",
    "docker",
    "run",
    "command",
    "expose",
    "used",
    "expose",
    "ports",
    "within",
    "docker",
    "network",
    "whereas",
    "publish",
    "used",
    "outside",
    "docker",
    "environment",
    "expose",
    "documenting",
    "instruction",
    "used",
    "time",
    "building",
    "image",
    "running",
    "container",
    "whereas",
    "published",
    "used",
    "map",
    "host",
    "port",
    "running",
    "container",
    "port",
    "expose",
    "command",
    "used",
    "docker",
    "whereas",
    "publish",
    "use",
    "command",
    "line",
    "used",
    "docker",
    "examples",
    "expose",
    "8080",
    "docker",
    "would",
    "put",
    "publish",
    "example",
    "docker",
    "run",
    "dash",
    "dash",
    "p",
    "colon",
    "80",
    "command",
    "line",
    "let",
    "look",
    "continuous",
    "monitoring",
    "continuous",
    "monitoring",
    "nagios",
    "help",
    "continuous",
    "monitoring",
    "systems",
    "applications",
    "servers",
    "really",
    "high",
    "level",
    "question",
    "using",
    "nagios",
    "within",
    "environment",
    "able",
    "come",
    "back",
    "quickly",
    "say",
    "nagios",
    "allows",
    "help",
    "manage",
    "servers",
    "check",
    "sufficiently",
    "utilized",
    "task",
    "failures",
    "need",
    "addressed",
    "three",
    "areas",
    "utilization",
    "risk",
    "want",
    "able",
    "manage",
    "able",
    "verify",
    "status",
    "services",
    "entire",
    "network",
    "health",
    "infrastructure",
    "whole",
    "applications",
    "working",
    "properly",
    "together",
    "web",
    "services",
    "apis",
    "reachable",
    "second",
    "question",
    "asked",
    "negatives",
    "help",
    "continuous",
    "monitoring",
    "systems",
    "applications",
    "services",
    "able",
    "initial",
    "negative",
    "process",
    "scheduler",
    "additional",
    "plugins",
    "would",
    "use",
    "network",
    "connect",
    "remote",
    "resources",
    "negatives",
    "web",
    "interface",
    "able",
    "run",
    "status",
    "checks",
    "predefined",
    "schedule",
    "mean",
    "nagios",
    "remote",
    "plugin",
    "executor",
    "mpre",
    "nagios",
    "mpre",
    "allows",
    "execute",
    "plugins",
    "links",
    "unix",
    "machines",
    "allow",
    "additional",
    "monitoring",
    "machine",
    "metrics",
    "disk",
    "usage",
    "cpu",
    "load",
    "etc",
    "ports",
    "used",
    "nagios",
    "monitoring",
    "purposes",
    "example",
    "three",
    "easy",
    "remember",
    "would",
    "memorize",
    "three",
    "essentially",
    "ports",
    "five",
    "six",
    "six",
    "six",
    "five",
    "six",
    "six",
    "seven",
    "five",
    "six",
    "six",
    "eight",
    "two",
    "types",
    "checks",
    "within",
    "year",
    "asked",
    "active",
    "passive",
    "check",
    "nagios",
    "active",
    "check",
    "initiated",
    "nagios",
    "process",
    "run",
    "regular",
    "schedule",
    "passive",
    "check",
    "initiated",
    "formed",
    "external",
    "application",
    "process",
    "may",
    "system",
    "failing",
    "checks",
    "results",
    "submitted",
    "nigeria",
    "processing",
    "continue",
    "active",
    "passive",
    "check",
    "active",
    "checks",
    "initiated",
    "check",
    "logic",
    "within",
    "nagios",
    "daemon",
    "negas",
    "execute",
    "pass",
    "information",
    "needs",
    "checked",
    "check",
    "operational",
    "state",
    "host",
    "oil",
    "service",
    "process",
    "results",
    "host",
    "service",
    "check",
    "send",
    "notifications",
    "contrast",
    "passive",
    "check",
    "external",
    "application",
    "initiates",
    "check",
    "writes",
    "results",
    "check",
    "external",
    "command",
    "line",
    "file",
    "guess",
    "reads",
    "external",
    "command",
    "file",
    "places",
    "results",
    "passive",
    "checks",
    "queue",
    "later",
    "processing",
    "go",
    "back",
    "revalidate",
    "negotiate",
    "may",
    "send",
    "notifications",
    "log",
    "alerts",
    "etc",
    "depending",
    "results",
    "get",
    "checking",
    "information",
    "going",
    "asked",
    "explain",
    "main",
    "configuration",
    "file",
    "location",
    "nagio",
    "main",
    "configuration",
    "file",
    "consists",
    "number",
    "directives",
    "affect",
    "nagios",
    "operate",
    "consider",
    "configuration",
    "file",
    "read",
    "nagios",
    "processor",
    "cgis",
    "allow",
    "able",
    "manage",
    "main",
    "configuration",
    "file",
    "placed",
    "settings",
    "directory",
    "nagios",
    "network",
    "analyzer",
    "hold",
    "four",
    "fingers",
    "four",
    "options",
    "nagios",
    "network",
    "analyzer",
    "one",
    "provides",
    "look",
    "network",
    "traffic",
    "source",
    "security",
    "threats",
    "two",
    "allows",
    "system",
    "admins",
    "gather",
    "information",
    "health",
    "network",
    "three",
    "provides",
    "central",
    "view",
    "network",
    "traffic",
    "bandwidth",
    "data",
    "four",
    "allows",
    "proactive",
    "resolving",
    "outages",
    "abnormal",
    "behavior",
    "threats",
    "affect",
    "critical",
    "business",
    "processes",
    "benefits",
    "http",
    "ssl",
    "certificate",
    "monitoring",
    "nagios",
    "http",
    "certificate",
    "monitoring",
    "allows",
    "increased",
    "server",
    "services",
    "application",
    "availability",
    "obviously",
    "important",
    "fast",
    "detection",
    "network",
    "outages",
    "protocol",
    "failures",
    "allows",
    "web",
    "transaction",
    "web",
    "service",
    "performance",
    "monitoring",
    "ssl",
    "certificate",
    "monitoring",
    "allows",
    "increased",
    "website",
    "availability",
    "frequent",
    "application",
    "availability",
    "provides",
    "increased",
    "security",
    "explain",
    "virtualization",
    "nagios",
    "responses",
    "first",
    "thing",
    "able",
    "talk",
    "nagios",
    "run",
    "many",
    "different",
    "virtualization",
    "platforms",
    "including",
    "microsoft",
    "visual",
    "pc",
    "vmware",
    "zen",
    "amazon",
    "ec2",
    "et",
    "cetera",
    "et",
    "cetera",
    "make",
    "sure",
    "get",
    "right",
    "bat",
    "yes",
    "able",
    "provide",
    "capabilities",
    "tomorrow",
    "assortment",
    "metrics",
    "different",
    "platforms",
    "allows",
    "ensure",
    "quick",
    "detection",
    "service",
    "application",
    "failures",
    "ability",
    "able",
    "monitor",
    "many",
    "metrics",
    "including",
    "cpu",
    "usage",
    "memory",
    "networking",
    "vm",
    "status",
    "name",
    "three",
    "variables",
    "affect",
    "recursion",
    "inheritance",
    "nagios",
    "name",
    "use",
    "register",
    "name",
    "template",
    "name",
    "referenced",
    "object",
    "definitions",
    "use",
    "specifies",
    "name",
    "template",
    "object",
    "want",
    "inherit",
    "properties",
    "variables",
    "register",
    "indicates",
    "whether",
    "object",
    "definition",
    "registered",
    "nagios",
    "right",
    "hand",
    "side",
    "screen",
    "example",
    "script",
    "would",
    "look",
    "like",
    "may",
    "want",
    "able",
    "memorize",
    "something",
    "actually",
    "write",
    "show",
    "someone",
    "going",
    "technical",
    "interview",
    "nagios",
    "said",
    "object",
    "oriented",
    "fundamentally",
    "comes",
    "object",
    "configuration",
    "format",
    "use",
    "object",
    "definitions",
    "allows",
    "inherit",
    "properties",
    "object",
    "definitions",
    "typical",
    "development",
    "applied",
    "nagios",
    "environment",
    "objects",
    "inherit",
    "services",
    "hosts",
    "commands",
    "time",
    "periods",
    "finally",
    "explain",
    "state",
    "talking",
    "nagios",
    "really",
    "four",
    "options",
    "talking",
    "state",
    "stalking",
    "state",
    "stalking",
    "used",
    "logging",
    "purposes",
    "nagios",
    "allows",
    "enable",
    "particular",
    "host",
    "service",
    "neighbors",
    "watch",
    "carefully",
    "log",
    "changes",
    "sees",
    "output",
    "check",
    "results",
    "finally",
    "helps",
    "analysis",
    "log",
    "files",
    "reached",
    "end",
    "devops",
    "whole",
    "course",
    "hope",
    "guys",
    "found",
    "informative",
    "helpful",
    "like",
    "share",
    "thanks",
    "watching",
    "stay",
    "tuned",
    "simplylaw",
    "hi",
    "like",
    "video",
    "subscribe",
    "simply",
    "learn",
    "youtube",
    "channel",
    "click",
    "watch",
    "similar",
    "videos",
    "turn",
    "get",
    "certified",
    "click"
  ],
  "keywords": [
    "devops",
    "course",
    "simply",
    "learn",
    "complete",
    "everything",
    "need",
    "know",
    "us",
    "begin",
    "basic",
    "video",
    "understand",
    "see",
    "present",
    "different",
    "tools",
    "git",
    "gradle",
    "maven",
    "selenium",
    "docker",
    "chef",
    "ansible",
    "puppet",
    "nagios",
    "jenkins",
    "amount",
    "regarding",
    "look",
    "interview",
    "questions",
    "make",
    "sure",
    "click",
    "without",
    "let",
    "tim",
    "builds",
    "environment",
    "done",
    "project",
    "takes",
    "ensure",
    "change",
    "really",
    "lot",
    "correct",
    "much",
    "well",
    "work",
    "together",
    "space",
    "working",
    "instead",
    "task",
    "feature",
    "ready",
    "use",
    "put",
    "build",
    "final",
    "product",
    "share",
    "speed",
    "process",
    "automate",
    "every",
    "stage",
    "means",
    "less",
    "manual",
    "organization",
    "would",
    "developer",
    "operations",
    "core",
    "approach",
    "set",
    "first",
    "terms",
    "software",
    "could",
    "mean",
    "codes",
    "repository",
    "versions",
    "called",
    "version",
    "control",
    "next",
    "code",
    "made",
    "executable",
    "sort",
    "deployment",
    "bugs",
    "popular",
    "tool",
    "testing",
    "deploy",
    "deployed",
    "continuously",
    "configured",
    "state",
    "used",
    "one",
    "back",
    "finally",
    "integration",
    "responsible",
    "test",
    "tests",
    "sent",
    "continuous",
    "sequence",
    "steps",
    "keep",
    "right",
    "answer",
    "target",
    "delivery",
    "two",
    "way",
    "created",
    "automatically",
    "users",
    "team",
    "enough",
    "automated",
    "faster",
    "benefits",
    "uh",
    "going",
    "go",
    "able",
    "actually",
    "successfully",
    "within",
    "also",
    "take",
    "time",
    "get",
    "good",
    "instructions",
    "setup",
    "started",
    "model",
    "waterfall",
    "building",
    "solutions",
    "reason",
    "bring",
    "user",
    "based",
    "development",
    "around",
    "quite",
    "still",
    "today",
    "long",
    "um",
    "write",
    "identify",
    "provide",
    "talking",
    "sometimes",
    "projects",
    "new",
    "method",
    "agile",
    "actual",
    "small",
    "teams",
    "part",
    "person",
    "release",
    "management",
    "group",
    "great",
    "thing",
    "even",
    "four",
    "depending",
    "typically",
    "goal",
    "end",
    "getting",
    "though",
    "similar",
    "system",
    "developers",
    "production",
    "run",
    "issues",
    "happen",
    "dependencies",
    "may",
    "additional",
    "applications",
    "installed",
    "operating",
    "program",
    "case",
    "got",
    "whether",
    "looks",
    "address",
    "key",
    "essentially",
    "communication",
    "happens",
    "comes",
    "releases",
    "many",
    "environments",
    "single",
    "structure",
    "say",
    "ability",
    "another",
    "using",
    "available",
    "five",
    "move",
    "open",
    "source",
    "want",
    "last",
    "life",
    "cycle",
    "start",
    "infrastructure",
    "conflict",
    "security",
    "line",
    "value",
    "number",
    "areas",
    "allows",
    "features",
    "high",
    "effectively",
    "page",
    "needs",
    "writing",
    "scale",
    "running",
    "errors",
    "earlier",
    "quickly",
    "anything",
    "gets",
    "looking",
    "concept",
    "talk",
    "little",
    "bit",
    "step",
    "branch",
    "works",
    "ahead",
    "application",
    "support",
    "monitoring",
    "instance",
    "network",
    "like",
    "remember",
    "level",
    "choose",
    "select",
    "free",
    "downloading",
    "installing",
    "type",
    "commands",
    "create",
    "local",
    "machine",
    "connect",
    "remote",
    "push",
    "file",
    "onto",
    "github",
    "things",
    "download",
    "install",
    "windows",
    "second",
    "link",
    "latest",
    "downloaded",
    "path",
    "launch",
    "nothing",
    "either",
    "master",
    "check",
    "command",
    "dash",
    "exactly",
    "help",
    "enter",
    "provides",
    "following",
    "various",
    "syntax",
    "always",
    "creating",
    "directory",
    "inside",
    "show",
    "completely",
    "text",
    "name",
    "demo",
    "content",
    "hello",
    "save",
    "status",
    "adding",
    "current",
    "commit",
    "add",
    "certain",
    "files",
    "changed",
    "screen",
    "account",
    "global",
    "dot",
    "username",
    "profile",
    "guys",
    "give",
    "underscore",
    "copy",
    "origin",
    "paste",
    "http",
    "completed",
    "distributed",
    "differences",
    "explain",
    "services",
    "architecture",
    "added",
    "list",
    "public",
    "service",
    "systems",
    "already",
    "virtual",
    "people",
    "stored",
    "website",
    "store",
    "changes",
    "later",
    "location",
    "however",
    "large",
    "multiple",
    "solution",
    "across",
    "package",
    "entire",
    "try",
    "updated",
    "role",
    "server",
    "client",
    "clients",
    "previous",
    "reference",
    "manually",
    "pull",
    "kind",
    "hub",
    "supports",
    "branches",
    "whereas",
    "moment",
    "locally",
    "manage",
    "allow",
    "find",
    "place",
    "easily",
    "come",
    "search",
    "fact",
    "something",
    "probably",
    "maybe",
    "difference",
    "folder",
    "main",
    "example",
    "rest",
    "merge",
    "term",
    "goes",
    "ones",
    "fork",
    "particular",
    "separate",
    "important",
    "access",
    "become",
    "rebase",
    "yeah",
    "easy",
    "read",
    "settings",
    "known",
    "runs",
    "point",
    "default",
    "commits",
    "base",
    "said",
    "c",
    "standard",
    "required",
    "usually",
    "makes",
    "written",
    "date",
    "drive",
    "email",
    "id",
    "creates",
    "top",
    "couple",
    "terminal",
    "window",
    "gone",
    "world",
    "call",
    "repositories",
    "whole",
    "slash",
    "connected",
    "url",
    "options",
    "hand",
    "primary",
    "option",
    "seconds",
    "web",
    "putting",
    "whatever",
    "request",
    "root",
    "okay",
    "third",
    "three",
    "performing",
    "compilation",
    "stuff",
    "helps",
    "dependent",
    "java",
    "specific",
    "jar",
    "pretty",
    "mechanism",
    "require",
    "apache",
    "ruby",
    "programming",
    "languages",
    "tasks",
    "object",
    "reports",
    "care",
    "installation",
    "ubuntu",
    "platform",
    "automation",
    "since",
    "jdk",
    "proceed",
    "ways",
    "extract",
    "home",
    "perform",
    "configurations",
    "chrome",
    "log",
    "trying",
    "wait",
    "minute",
    "variables",
    "fine",
    "executables",
    "double",
    "installer",
    "variable",
    "close",
    "libraries",
    "advanced",
    "setting",
    "prompt",
    "hyphen",
    "mvn",
    "bin",
    "whenever",
    "iphone",
    "execution",
    "clean",
    "cloud",
    "elements",
    "tab",
    "configure",
    "browser",
    "oracle",
    "yes",
    "related",
    "order",
    "configuration",
    "copied",
    "remove",
    "parameters",
    "details",
    "utilized",
    "scripts",
    "refer",
    "primarily",
    "mac",
    "linux",
    "data",
    "output",
    "says",
    "refers",
    "central",
    "host",
    "feel",
    "dependency",
    "downloads",
    "automations",
    "xml",
    "information",
    "built",
    "execute",
    "script",
    "according",
    "phase",
    "goals",
    "phases",
    "plugins",
    "artifacts",
    "performed",
    "components",
    "executed",
    "cycles",
    "generate",
    "collection",
    "site",
    "compile",
    "cases",
    "processes",
    "performance",
    "six",
    "basically",
    "sample",
    "artifact",
    "question",
    "eclipse",
    "language",
    "uses",
    "class",
    "triggered",
    "plugin",
    "war",
    "executions",
    "specify",
    "x",
    "credentials",
    "cradle",
    "definitely",
    "simple",
    "restart",
    "password",
    "job",
    "button",
    "send",
    "workspace",
    "webdriver",
    "grid",
    "driver",
    "browsers",
    "firefox",
    "gecko",
    "saw",
    "colon",
    "element",
    "machines",
    "results",
    "fast",
    "ide",
    "rc",
    "side",
    "box",
    "title",
    "asked",
    "database",
    "image",
    "designed",
    "layer",
    "training",
    "mentioned",
    "node",
    "nodes",
    "sudo",
    "images",
    "containers",
    "container",
    "memory",
    "contrast",
    "yaml",
    "secure",
    "registry",
    "types",
    "private",
    "manager",
    "httpd",
    "port",
    "workstation",
    "note",
    "recipe",
    "recipes",
    "cookbook",
    "cookbooks",
    "knife",
    "ip",
    "company",
    "servers",
    "administrator",
    "playbook",
    "inventory",
    "slave",
    "agent",
    "manifest",
    "certificate",
    "backup",
    "jobs",
    "tomcat",
    "deployments",
    "pipeline"
  ]
}