{
  "text": "a computer software is a set of\ninstructions data or programs used to\noperate a computer or perform a\nparticular task in a system but today we\nare going to look into something that is\nknown as sdlc sdlc refers to the\ndevelopment of a software for a system\nhi guys and welcome to yet and\ninteresting we video i simply learn but\nbefore we begin if you love watching\ntech videos subscribe to our channel and\nhit the bell icon to remiss an update\nfrom us now without further ado let's\ntake a look at the agenda for this\nsession\nthe first heading is what is sdlc\nto begin with we will know some\nintroductory knowledge about sdlc\nmoving on with why do we apply sdlc\ncontinuing with different phases\ninvolved in the development of a\nsoftware\nas for the last different models used to\ndevelop sdlc let's begin with the first\nheading that is sdlc\nthe software development lifecycle or\nsdlc refers to the planned designing of\nsoftware models that are systematically\nevaluated at each point by different\nprotocols involved in the sdlc phases\nthe sdlc process is defined using\nmultiple phases that involves different\nprotocols to be acted upon the software\ndevelopment for example planning phase\ndefining designing phase building\ntesting\ndeploying and maintenance\nthese are some of the main phases that\nleads to development of a software for\nthe client\nmoving on let's take a look at why do we\napply the sdlc cycle\nthe reason to apply the sdlc lifecycle\nin the development of a software is\nbecause\nit provides a team with a developed\nlifecycle format or a framework to build\na software from scratch\nit provides better control over each\ndevelopment phase of the software\ndesigning\nwhere the coding is to be done what\nabout the errors in the development\nand different particular points or\nattributes that affect the functioning\nof a software\nit also improved client interaction with\nthe multiple development phases of the\nsoftware now let's move on to the next\nheading that is\ndifferent phases that involve the\ndevelopment of a software\nthe sdlc lifecycle is divided into\nmultiple steps to provide a better end\nproduct according to the client's\nrequest\nwhich are\nplanning and requirement analysis at\nthis step the planning and the\nrequirement of the software is discussed\nwith the client\nmoving on with defining the requirements\naccording to the planned scenario we\nwill define certain terms for\ndevelopment of the software\ncontaining with designing the software\ncoding or implementing the physical\npoints of the software\nmoving on to the testing phase where\ndifferent scenarios are used to test the\noverall functioning of a software\nas for the last step we have deployment\nand maintenance where the developed\nsoftware\nis deployed and is assessed by the users\nto check for any errors or bugs moving\non let's take a look at the individual\nphases of sdlc the first phase is\nplanning and requirement analysis\nplanning is the most important step for\nsoftware development\nthe developer performs the requirement\nanalysis for the software in theme\nmoving on the software development data\nis obtained from client service and\ninformation\nwhich are used from consumers or sales\nteam\nthe analysis data acts as the basis for\nplanning the development route for the\nrequired software\nalso the analysis data is used to check\nfor any risk\nas for quality assurance of the software\nbeing developed at different stages of\nsdlc\nmoving on we have the second stage that\nis defining requirements\nwith the completion of planning step the\nnext step is to present the software\nrequirements and documents to the client\nand the stakeholders for verification if\nthey are satisfied with the planned\nscenario\nthe task of defining requirement is\nperformed by the software requirement\nspecification document also known as srs\ndocument\nwhich include all the data and\ninformation related to the product been\ndeveloped\nmoving on we have the third step\nthat is designing the software\nin this step the srs document is used by\nthe developer to use the most optimized\narchitecture for the development of the\nsoftware\nthe developed architecture is used using\nthe dds document also known as design\ndocument specification\nwhich is shared with the analyst and the\nstakeholders to check multiple\nattributes of the software\nmoving on after accessing all the\npossible attributes the best software\ndesign is used for the development\ndepending upon the requirements\ndifferent designs are used to develop\nthe software\nthe first one is known as high level\ndesign and the other one is known as low\nlevel design\nmoving on let's take a look at the\nfourth step of sdlc\nthat is developing software\nusing the designing outcome from the\nprevious step the developers begin the\ncoding implementation which is in\naccordance with the architecture design\nby the developers\nprogramming tools such as interpreters\ncompilers and debuggers are used to\ndesign the best and the most organized\nsoftware design\nit is developed using multiple languages\nfor example python kotlin java c\nnow let's move on to the next stage that\nis software testing\nin this stage the developed software is\ntested with multiple test cases\nand different scenarios to ensure proper\nexecution of all the functions included\nin the software\nwith respect to the testing of a\nsoftware in sdlc each phase has multiple\ncase scenarios to assess it\nthrough all the test cases done the bugs\nerrors or the flaws of the software\nproduct are fixed that are to meet the\nrequirement of the client as well as the\nsrs document now let's move on to the\nlast heading in phases of sdlc\nthat is deployment and maintenance of\nsoftware\nafter the completion of testing phase\nthe last step is to deploy the completed\nproduct in the market\nwhich is to be used by the users and\ncheck for any issues that may arise\nusing that\nwith regard to the maintenance of the\nsoftware there are generally three\nformats to be used the first one known\nas upgrade\nthat is upgrading the application to the\nlatest system version\nthen we have\nbug fixing\nthat is removing errors or any bugs that\nmay arise during the execution of the\nsoftware\nas for the last we have enhancement that\nmeans installation of new features for\nthe existing product with this we are\ncompleted with the multiple steps\ninvolved in the sdlc processing now\nlet's move on to the next heading that\nis\nmodels used in sdlc\nthe sdlc models are applied because they\nprovide a pre-designed model\nfor the developer to use\nlet's take a look at multiple models\nthat sdlc applies\nthe first one is waterfall model\nincremental model\niterative model\nspiral model\nv model and the last agile model\nthese are some of the most\ngenerally used models in sdlc\nbut the thing is why do we apply these\nmodels in sdlc\nbecause they provide a base for planning\nsoftware projects for multiple\nattributes\nit also provide a pre-applied framework\nfor the new software project\nas well it decreases the chances of bugs\nand errors occurring in the software\nwith this we are completed with all the\nheadings in the session for sdlc\nlifecycle if you have any questions\nregarding the topic you can ask them in\nthe comments section thank you for\nwatching\nhi there if you like this video\nsubscribe to the simply learn youtube\nchannel and click here to watch similar\nvideos to nerd up and get certified\nclick here\n",
  "words": [
    "computer",
    "software",
    "set",
    "instructions",
    "data",
    "programs",
    "used",
    "operate",
    "computer",
    "perform",
    "particular",
    "task",
    "system",
    "today",
    "going",
    "look",
    "something",
    "known",
    "sdlc",
    "sdlc",
    "refers",
    "development",
    "software",
    "system",
    "hi",
    "guys",
    "welcome",
    "yet",
    "interesting",
    "video",
    "simply",
    "learn",
    "begin",
    "love",
    "watching",
    "tech",
    "videos",
    "subscribe",
    "channel",
    "hit",
    "bell",
    "icon",
    "remiss",
    "update",
    "us",
    "without",
    "ado",
    "let",
    "take",
    "look",
    "agenda",
    "session",
    "first",
    "heading",
    "sdlc",
    "begin",
    "know",
    "introductory",
    "knowledge",
    "sdlc",
    "moving",
    "apply",
    "sdlc",
    "continuing",
    "different",
    "phases",
    "involved",
    "development",
    "software",
    "last",
    "different",
    "models",
    "used",
    "develop",
    "sdlc",
    "let",
    "begin",
    "first",
    "heading",
    "sdlc",
    "software",
    "development",
    "lifecycle",
    "sdlc",
    "refers",
    "planned",
    "designing",
    "software",
    "models",
    "systematically",
    "evaluated",
    "point",
    "different",
    "protocols",
    "involved",
    "sdlc",
    "phases",
    "sdlc",
    "process",
    "defined",
    "using",
    "multiple",
    "phases",
    "involves",
    "different",
    "protocols",
    "acted",
    "upon",
    "software",
    "development",
    "example",
    "planning",
    "phase",
    "defining",
    "designing",
    "phase",
    "building",
    "testing",
    "deploying",
    "maintenance",
    "main",
    "phases",
    "leads",
    "development",
    "software",
    "client",
    "moving",
    "let",
    "take",
    "look",
    "apply",
    "sdlc",
    "cycle",
    "reason",
    "apply",
    "sdlc",
    "lifecycle",
    "development",
    "software",
    "provides",
    "team",
    "developed",
    "lifecycle",
    "format",
    "framework",
    "build",
    "software",
    "scratch",
    "provides",
    "better",
    "control",
    "development",
    "phase",
    "software",
    "designing",
    "coding",
    "done",
    "errors",
    "development",
    "different",
    "particular",
    "points",
    "attributes",
    "affect",
    "functioning",
    "software",
    "also",
    "improved",
    "client",
    "interaction",
    "multiple",
    "development",
    "phases",
    "software",
    "let",
    "move",
    "next",
    "heading",
    "different",
    "phases",
    "involve",
    "development",
    "software",
    "sdlc",
    "lifecycle",
    "divided",
    "multiple",
    "steps",
    "provide",
    "better",
    "end",
    "product",
    "according",
    "client",
    "request",
    "planning",
    "requirement",
    "analysis",
    "step",
    "planning",
    "requirement",
    "software",
    "discussed",
    "client",
    "moving",
    "defining",
    "requirements",
    "according",
    "planned",
    "scenario",
    "define",
    "certain",
    "terms",
    "development",
    "software",
    "containing",
    "designing",
    "software",
    "coding",
    "implementing",
    "physical",
    "points",
    "software",
    "moving",
    "testing",
    "phase",
    "different",
    "scenarios",
    "used",
    "test",
    "overall",
    "functioning",
    "software",
    "last",
    "step",
    "deployment",
    "maintenance",
    "developed",
    "software",
    "deployed",
    "assessed",
    "users",
    "check",
    "errors",
    "bugs",
    "moving",
    "let",
    "take",
    "look",
    "individual",
    "phases",
    "sdlc",
    "first",
    "phase",
    "planning",
    "requirement",
    "analysis",
    "planning",
    "important",
    "step",
    "software",
    "development",
    "developer",
    "performs",
    "requirement",
    "analysis",
    "software",
    "theme",
    "moving",
    "software",
    "development",
    "data",
    "obtained",
    "client",
    "service",
    "information",
    "used",
    "consumers",
    "sales",
    "team",
    "analysis",
    "data",
    "acts",
    "basis",
    "planning",
    "development",
    "route",
    "required",
    "software",
    "also",
    "analysis",
    "data",
    "used",
    "check",
    "risk",
    "quality",
    "assurance",
    "software",
    "developed",
    "different",
    "stages",
    "sdlc",
    "moving",
    "second",
    "stage",
    "defining",
    "requirements",
    "completion",
    "planning",
    "step",
    "next",
    "step",
    "present",
    "software",
    "requirements",
    "documents",
    "client",
    "stakeholders",
    "verification",
    "satisfied",
    "planned",
    "scenario",
    "task",
    "defining",
    "requirement",
    "performed",
    "software",
    "requirement",
    "specification",
    "document",
    "also",
    "known",
    "srs",
    "document",
    "include",
    "data",
    "information",
    "related",
    "product",
    "developed",
    "moving",
    "third",
    "step",
    "designing",
    "software",
    "step",
    "srs",
    "document",
    "used",
    "developer",
    "use",
    "optimized",
    "architecture",
    "development",
    "software",
    "developed",
    "architecture",
    "used",
    "using",
    "dds",
    "document",
    "also",
    "known",
    "design",
    "document",
    "specification",
    "shared",
    "analyst",
    "stakeholders",
    "check",
    "multiple",
    "attributes",
    "software",
    "moving",
    "accessing",
    "possible",
    "attributes",
    "best",
    "software",
    "design",
    "used",
    "development",
    "depending",
    "upon",
    "requirements",
    "different",
    "designs",
    "used",
    "develop",
    "software",
    "first",
    "one",
    "known",
    "high",
    "level",
    "design",
    "one",
    "known",
    "low",
    "level",
    "design",
    "moving",
    "let",
    "take",
    "look",
    "fourth",
    "step",
    "sdlc",
    "developing",
    "software",
    "using",
    "designing",
    "outcome",
    "previous",
    "step",
    "developers",
    "begin",
    "coding",
    "implementation",
    "accordance",
    "architecture",
    "design",
    "developers",
    "programming",
    "tools",
    "interpreters",
    "compilers",
    "debuggers",
    "used",
    "design",
    "best",
    "organized",
    "software",
    "design",
    "developed",
    "using",
    "multiple",
    "languages",
    "example",
    "python",
    "kotlin",
    "java",
    "c",
    "let",
    "move",
    "next",
    "stage",
    "software",
    "testing",
    "stage",
    "developed",
    "software",
    "tested",
    "multiple",
    "test",
    "cases",
    "different",
    "scenarios",
    "ensure",
    "proper",
    "execution",
    "functions",
    "included",
    "software",
    "respect",
    "testing",
    "software",
    "sdlc",
    "phase",
    "multiple",
    "case",
    "scenarios",
    "assess",
    "test",
    "cases",
    "done",
    "bugs",
    "errors",
    "flaws",
    "software",
    "product",
    "fixed",
    "meet",
    "requirement",
    "client",
    "well",
    "srs",
    "document",
    "let",
    "move",
    "last",
    "heading",
    "phases",
    "sdlc",
    "deployment",
    "maintenance",
    "software",
    "completion",
    "testing",
    "phase",
    "last",
    "step",
    "deploy",
    "completed",
    "product",
    "market",
    "used",
    "users",
    "check",
    "issues",
    "may",
    "arise",
    "using",
    "regard",
    "maintenance",
    "software",
    "generally",
    "three",
    "formats",
    "used",
    "first",
    "one",
    "known",
    "upgrade",
    "upgrading",
    "application",
    "latest",
    "system",
    "version",
    "bug",
    "fixing",
    "removing",
    "errors",
    "bugs",
    "may",
    "arise",
    "execution",
    "software",
    "last",
    "enhancement",
    "means",
    "installation",
    "new",
    "features",
    "existing",
    "product",
    "completed",
    "multiple",
    "steps",
    "involved",
    "sdlc",
    "processing",
    "let",
    "move",
    "next",
    "heading",
    "models",
    "used",
    "sdlc",
    "sdlc",
    "models",
    "applied",
    "provide",
    "model",
    "developer",
    "use",
    "let",
    "take",
    "look",
    "multiple",
    "models",
    "sdlc",
    "applies",
    "first",
    "one",
    "waterfall",
    "model",
    "incremental",
    "model",
    "iterative",
    "model",
    "spiral",
    "model",
    "v",
    "model",
    "last",
    "agile",
    "model",
    "generally",
    "used",
    "models",
    "sdlc",
    "thing",
    "apply",
    "models",
    "sdlc",
    "provide",
    "base",
    "planning",
    "software",
    "projects",
    "multiple",
    "attributes",
    "also",
    "provide",
    "framework",
    "new",
    "software",
    "project",
    "well",
    "decreases",
    "chances",
    "bugs",
    "errors",
    "occurring",
    "software",
    "completed",
    "headings",
    "session",
    "sdlc",
    "lifecycle",
    "questions",
    "regarding",
    "topic",
    "ask",
    "comments",
    "section",
    "thank",
    "watching",
    "hi",
    "like",
    "video",
    "subscribe",
    "simply",
    "learn",
    "youtube",
    "channel",
    "click",
    "watch",
    "similar",
    "videos",
    "nerd",
    "get",
    "certified",
    "click"
  ],
  "keywords": [
    "software",
    "data",
    "used",
    "system",
    "look",
    "known",
    "sdlc",
    "development",
    "begin",
    "let",
    "take",
    "first",
    "heading",
    "moving",
    "apply",
    "different",
    "phases",
    "involved",
    "last",
    "models",
    "lifecycle",
    "planned",
    "designing",
    "using",
    "multiple",
    "planning",
    "phase",
    "defining",
    "testing",
    "maintenance",
    "client",
    "developed",
    "coding",
    "errors",
    "attributes",
    "also",
    "move",
    "next",
    "provide",
    "product",
    "requirement",
    "analysis",
    "step",
    "requirements",
    "scenarios",
    "test",
    "check",
    "bugs",
    "developer",
    "stage",
    "document",
    "srs",
    "architecture",
    "design",
    "one",
    "completed",
    "model"
  ]
}