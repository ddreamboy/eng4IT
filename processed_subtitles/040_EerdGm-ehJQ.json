{
  "text": "welcome to the complete JavaScript\ncourse in this course we're going to\nlearn how to build complex websites\nusing JavaScript from a beginner to a\nprofessional level and by the end of\nthis course we're going to build\namazon.com so this is an interactive\nmulti-page website where we can add\nproducts to our cart create an order and\neven track our\norder along the way we're also going to\nbuild some smaller projects like a rock\npaper scissors game a to-do list and a\ncalculator now you don't need any\nprevious coding or technical experience\nto follow along this course will cover\neverything that you need to learn\nJavaScript we're going to start from the\nvery basics of JavaScript and we're\ngoing to build our way up step by step\nwe're going to learn the major features\nof JavaScript and also how to use\nJavaScript together with other\nTechnologies like HTML and\nCSS we're also going to learn more\nadvanced features like objectoriented\nprogramming backend callbacks promises\nand async await and we'll use these\nfeatures together to build a complex\nproject which is the Amazon\nProject this will let you practice what\nyou learn and deepen your\nunderstanding you can find the different\nlessons of this course course below the\nvideo\nhere and\nhere if you need to you can adjust the\nspeed of the video\nhere and after each lesson I'm going to\ngive you a bunch of exercises that you\ncan do on your own to practice the\nskills that we learned in total this\ncourse will have over\n250 exercises so with that said let's\nget started\nbefore we begin if something in this\ncourse is not working properly make sure\nto check the first comment below the\nvideo for a list of\nsolutions I'm going to be doing this\ncourse on Windows but the steps are the\nsame if you're using a Mac we're going\nto start from the very basics of\nJavaScript and build our way up step by\nstep first of all what is Javascript\nJavaScript is a technology that we use\nto create websites a website is like\nyoutube.com or\namazon.com it's how we access YouTube\nand Amazon on our computer if we were\nusing a phone we usually use an app but\non our computer we use a\nwebsite so there's actually three\ntechnologies that we use to create\nwebsites HTML CSS and JavaScript each of\nthese Technologies has a specific\npurpose when creating a website HTML\ncreates the content of a website it\ncreates all the buttons the text and the\nimages CSS changes the appearance of the\nwebsite by adding CSS we can make our\nwebsite look nice and finally JavaScript\nmakes our website\ninteractive so if we only have HTML and\nCSS and we click one of these buttons\nour website doesn't do anything but once\nwe add JavaScript we can make our\nwebsite do something when we click a\nbutton such as add a product to our cart\nor create an\norder so this course is focused on\nJavaScript if you want to learn HTML and\nCSS in more detail I have a full whole\ncourse just like this one that you can\nfind in the video\ndescription let's get started with\nJavaScript the first thing we need to do\nis to install a piece of software called\na web browser a web browser lets us view\nwebsites that we create in this course\nthe most popular web browser for web\ndevelopment is Google Chrome so I\nrecommend using that if you don't have\nGoogle Chrome you can open the default\nweb browser on your computer for windows\nit's Microsoft Edge and for Mac it's\nSafari type in google.com at the top and\npress enter search for Google\nChrome click the result and follow the\ninstructions to download and install\nonce we've installed Chrome we're ready\nto\nbegin we're going to start by learning\nwhat exactly is Javascript and how does\nit work the easiest way to understand\nJavaScript is we're basically giving\ninstructions to a computer and then the\ncomputer follows our\ninstructions I find the best way to\nlearn this is to jump in and give it a\ntry so first let's open Google\nChrome next we're going to click at the\ntop\nhere and type\nsuper\nsimple\ndodev slj\ns- Basics and press\nenter and now we'll learn how to give\nour computer some instructions to follow\nto do that we're going to go to a blank\narea of the web page we're going to\nrightclick click\ninspect and then click the console\ntab now if your console doesn't show up\nat the bottom like this you can click\nthese three dots here here and then\nselect this\nicon okay so inside the console we can\ngive some instructions for our computer\nlet's learn our first instruction we're\ngoing to type here and we're going to\ntype\nalert Open Bracket single quote hello\nsingle quote close bracket and\nsemicolon make sure to type this out\nexactly as I have it here in JavaScript\nif you don't type things out correctly\nit won't work so this is an instruction\nto create a popup with the text hello\ninside to get the computer to follow our\ninstruction we can just press\nenter and as you can see the computer\ndoes exactly what we tell it to do it\ncreates a popup with a text hello\ninside now let's press\nokay and let's give another instruction\nto the computer so we're going to type\nhere again and we're going to type alert\nagain Open Bracket single quote but this\ntime we're going to type a different\nmessage in the\npopup good job and single quote close\nbracket and\nsemicolon so this is an instruction to\ncreate a popup again but this time with\na text good job in inside the popup if\nwe press\nenter the computer does exactly what we\ntell it to do and it creates a popup\nwith the text good job inside and that's\nbasically the main idea behind\nJavaScript we're giving instructions to\na computer and then the computer follows\nour\ninstructions so note that we can open\nand use this console on any website\nwe're just using superimple dodev as an\nexample\nlet's press\nokay and we're going to learn some\nterminology or\nnaming the instructions we give to our\ncomputer these instructions are called\ncode when we press enter and the\ncomputer follows our instructions this\nis called running the code now there are\nmany different languages we can use to\nwrite code called programming languages\nit's similar to how we have many human\nLang languages that we can use to\ncommunicate some examples of programming\nlanguages are JavaScript Python and Java\nso here we're writing our code using the\nJavaScript programming language so we\ncall this JavaScript\ncode now that we understand the basic\nterminology let's look at some more\nexamples of what we can do with\nJavaScript code another thing we can do\nis\nmath let's go back to the console and\ntype here and we're going to type 2 + 2\nso this is an instruction or code that\ntells the computer to do some math to\ncalculate 2 + 2 when we press\nenter the computer follows our\ninstruction or runs this code calculates\n2+ 2 and gives us the result which is\nfour let's do another example we're\ngoing to type 10 minus 3 and press enter\nto run this code again the computer does\nthis math calculates the result and\ngives us seven so as you can see\nJavaScript can do many different things\nlike create popups and do math let's\nlook at one more example of what\nJavaScript can do we're going to go to\nthe bottom and type out this code\ndocument.body do inner Capital\nHTML equals single quilt hello single\nquilt and\nsemicolon make sure to write this out\nexactly as I have it here with the dots\nand the capital letters because\nJavaScript is case\nsensitive let's press enter to run this\ncode what this code does is that it\nremoves everything on the page and\nreplaces it with the text hello in this\nexample we use JavaScript to modify the\nweb page modifying the web page is one\nof the most important features of\nJavaScript and we're going to be using\nthis feature throughout this course and\nthat's the basics of JavaScript we're\ngiving instructions to a computer these\ninstructions are called code and then\nthe computer follows our instru\ninstuctions this is called running the\ncode and also don't worry about\nmemorizing all this code you can find a\ncopy of all the code that we write in\nthis course in the video\ndescription now that we understand the\nbasics of JavaScript let's learn more\nabout the JavaScript language\nitself if we take a look at this code\nalert and hello you might be wondering\ning what the brackets and the quote mean\nall of these characters have a special\nmeaning in the language this is\nsomething called\nsyntax syntax are the rules that we have\nto follow when using a programming\nlanguage like JavaScript this is sort of\nlike in English we also have rules that\nwe follow called grammar the difference\nis that in English we don't have to\nfollow the rules of grammar perfectly\npeople can still understand us but in\nprogramming we have to follow the rules\nof syntax exactly otherwise the computer\nwon't understand our code for example if\nwe scroll down and we type this code\nalert Open Bracket quote hello quote\nclose bracket and semicolon but this\ntime we remove the first bracket and\npress\nenter it will give us a syntax error\nwe're not following the rules of syntax\nso the computer doesn't understand this\ncode now JavaScript has a lot of syntax\nrules and we can't learn them all at\nonce right now instead we're going to\nlearn the syntax rules one by one as we\ngo through the course for now we'll just\nlearn enough syntax to do the exercises\nat the end of this lesson what we need\nto know is that if we scroll up\nthis part of the code tells a computer\nto create a popup the text between these\nquotes is the text inside the popup if\nwe change this text we can change the\ntext inside the popup same thing for\nthis code down\nhere if we change the text between the\nquotes it will change the text that\nappears on the page and that's all we\nneed to know about JavaScript Syntax for\nnow we'll learn exact ly what the other\ncharacters like the brackets quotes and\nsemicolon mean later on in this course\nso in this lesson we learned that\nJavaScript is basically giving\ninstructions to a computer we wrote our\nfirst few lines of JavaScript code we\nlearned how to run our code using the\nconsole in our web browser and we\nlearned about syntax which are the rules\nthat we have to follow when writing our\ncode\nthanks for watching this course so far\nif you want to support this channel you\ncan check out the premium version of my\ncourses just like this one where you can\nget a certificate of completion and a\nBetter Learning platform if you're\ninterested in extra videos from me more\nin-depth videos and behind the scenes\ncontent you can check out these links\nhere you can also support the channel by\nliking the video subscribing and sharing\nthis video with others\nthanks again and let's continue with the\ncourse here are some exercises you can\ntry on your own to practice what we\nlearned in this\nlesson you can find the solutions to\nthese exercises in the video\ndescription now that we understand the\nbasics of JavaScript we're going to\nlearn about each feature of the language\nlanguage in this lesson we're going to\nfocus on numbers and math first we can\nclose the console for\nnow so I've actually prepared a project\nthat we can use for this lesson to open\nthis project we're going to go to our\nbrowser click up here and type\nsuper simple\ndodev SL\nprojects SL Amazon\nand press\nenter so this is actually the final\nproject we're going to create in this\ncourse this is an e-commerce website\nsimilar to Amazon where we can add\nproducts to our cart and then view our\ncart by clicking the top\nright and on this page we can see the\nproducts in our cart modify our cart and\ncreate an\norder for this lesson we're going to\nfocus on this right section which\ncalculates the cost of our cart\nincluding the cost of the products\nshipping and\ntaxes this section is a great way to\nlearn numbers and math in\nJavaScript first let's open the console\nagain so we can write JavaScript code\nwe're going to find a blank area of the\nweb page rightclick click\ninspect and then click the\nconsole so we already saw some examples\nof math in the previous lesson for\nexample we wrote the code 2 + 2 if we\npress\nenter the computer adds these two\nnumbers and results in\nfour we also did 10 minus 3 if we press\nenter the computer subtracts these two\nnumbers and gives us\nseven in addition to adding and\nsubtracting we can also multiply and\ndivide to multiply we're going to type\n10 star 3 and press\nenter so star is the character for\nmultiplying to divide we're going to\ntype\n10\nslash2 and press enter\nso forward slash is the character for\ndividing now let's learn the syntax\nrules for numbers and math the Syntax\nfor math is pretty straightforward in\nJavaScript we just write it out like\nnormal math we can also do math with\nmore than two numbers for example we can\nadd two plus 2 and then plus another two\nif if we press enter the computer will\nadd these three numbers together and\nresult in six and finally JavaScript can\nhandle decimal numbers like\n2.2 plus\n2.2 if we press enter it will calculate\nthese decimal numbers and result in\n4.4 now let's do some practical examples\nwe're going to calculate the number\nnumers here in our final project but\nfirst let's set up our cart so we have\nthe same products in our cart so make\nsure in your cart you have two socks\nwith free shipping and you have one\nbasketball with\n$4.99 of shipping and nothing else in\nyour cart if you need to you can modify\nyour cart by clicking update or delete\nor or by going to the homepage by\nclicking in the top left and adding any\nproducts that you're\nmissing once you have the same products\nas me in your cart and you have the same\nnumbers on the right we're ready to\nbegin let's start by calculating this\nnumber up here this is the cost of the\nproducts before shipping and taxes to\ncalculate this number using JavaScript\nwe're just going to add the cost of the\nproducts so in our console we're going\nto add the cost of the socks which is\n$10 and\n90 we have two of them so we're going to\nmultiply this by\ntwo and then we're going to add the cost\nof the basketball so plus\n$20.95 if we press\nenter the computer will do this math\ncalculation\nand give us this number and if we scroll\nto the top of our\nproject you'll see that the number that\nwe got matches what we have on the page\nso that's how we use JavaScript to\ncalculate this number here let's do\nanother example we're going to calculate\nthis third number which is the cost of\nthe products plus shipping feel free to\npause the video if you want to try it\nyourself first otherwise we'll do it\ntogether let's go back to our\nconsole and we're going to add the cost\nof the products again which is\n$10.90 * 2 plus\n$20.95 but this time we're going to add\nthe cost of shipping which is\n$4.99 so\n4.99 and press and\nenter the computer will do this\ncalculation and give us this number\nwhich matches what we see in the final\nproject next we're going to learn a very\nimportant feature of math called the\norder of\noperations adding subtracting\nmultiplying and dividing these are\ncalled operations and the characters in\nthe middle are called\noperators now there's a certain order\nthat we do these operations for example\nif we go back to our console and type\nthe calculation 1 + 1 * 3 and press\nenter notice that it multiplies 1 * 3\nfirst which equals 3 and then adds 1\nwhich equals\n4 notice that it does not add 1 + 1\nfirst\nwhich equal 2 and then 2 * 3 =\n6 the way math normally works is that\nmultiply and divide are done first add\nand subtract are done after this is\ncalled the order of operations and\nJavaScript follows the same rules\nmultiply and divide are done first add\nand subtract are done after the order of\noperations is also called operator\nprecedence in\nJavaScript one thing to note is that\nmultiply and divide have the same\npriority so if we have both in a\ncalculation it will calculate from left\nto right add and subtract also have the\nsame priority if we have both in the\ncalculation it will also calculate from\nleft to right another feature of the\norder of operations is that we can use\nbrackets to control which part of the\ncalculation gets done first for example\nlet's type out this calculation again 1\n+ 1 * 3 but this time we're going to add\nan Open\nBracket and a Clos bracket around 1 + 1\nif we press\nenter now the calculation inside the\nbrackets will be done first so it will\nadd 1 + 1 = 2 and then 2 * 3 = 6 so when\nwe use brackets JavaScript will always\ndo the calculation inside the brackets\nfirst and then do the rest of the\ncalculation brackets have the highest\npriority in the order of\noperations now let's learn the syntax\nrules for brackets\nso we just have to have a matching Open\nBracket and close bracket so something\nlike this doesn't work because we have\ntwo Open brackets and no Clos bracket we\nalso need to have a complete calculation\nin the brackets so this also doesn't\nwork because 1 + 1 multiply is not a\ncomplete\ncalculation now let's do some practical\nexamples using the order of\noperations first we're going to do some\nmore setup in the final project so we're\nactually going to remove all the\nproducts in our\ncart and then once our cart is empty\nwe'll go to the homepage by clicking the\ntop\nleft and this time we're going to add\nsome new products so we'll add one\nbasketball and two T-shirts\nnow let's go back to our cart by\nclicking the top\nright we'll scroll down and we're going\nto calculate the numbers in this section\nagain let's calculate this number at the\ntop which is the cost of the products\nwe'll go back to our\nconsole and add the cost of the\nbasketball which is\n$20.95 Plus the cost of the\nt-shirts which is\n$799 and we have two of them so we'll\nmultiply this by two if we press\nenter this will give us the number that\nwe see in the final project here notice\nthat in this calculation we're taking\nadvantage of the order of\noperations even though multiply is\nwritten last\nwe still multiply these two numbers\nfirst so we calculate the cost of two\nT-shirts first and then we add the cost\nof the basketball\nafter okay now let's try something a\nlittle more difficult we're going to\nlearn how to calculate this 10% tax here\nso how do we calculate 10% of something\nunfortunately we can't just multiply by\n10% in JavaScript instead\nwe have to calculate the percent\nmanually so how do we do that 1% is\nactually equal to 1 / 100 that's what\npercent means so 10% is equal to 10 /\n100 which equals\n0.1 so to calculate 10% manually we just\nmultiply this number by\n0.1 so we'll type 30 3\n6.93 multiplied by 10% or\n0.1 if we press\nenter it will give us a number that is\nclose to what we have in the final\nproject it's the same amount of money\nbut our number is more accurate than we\nneed so later in this lesson we'll learn\nhow to round this number down to exactly\nwhat we have on the web page for now\nlet's do some more practice with the\norder of\noperations let's calculate the tax again\nexcept instead of using the final number\n36.9 3 Let's calculate this number\nindividually like here so at the bottom\nwe're going to add the cost of the\nbasketball\n20.95% 2 and then multiply this by the\ntax percent time\n0.1 and press\nenter unfortunately this number doesn't\nmatch what we got up here and that's\nbecause if we look at this calculation\naccording to the order of operations\nmultiply is done first so it will\nmultiply these three numbers first and\nthen add 20.95%\nafter however this is not what we want\nwe actually want to calculate this\nnumber first this is the cost of the\nproducts so how do we get the computer\nto calculate this first and then\nmultiply by the tax percent\n0.1 to do this we can use brackets to\ncontrol which part of the calculation\ngets done first so let's create this\ncalculation again 20\n.95 +\n7.99 * 2 but this time we're going to\nadd brackets around this part of the\ncalculation to make sure that this gets\ncalculated first and then at the end\nwe'll multiply it by the tax percent\n0.1 and now if we press\nenter we will get the same number that\nwe had before\nso that's how we use math and the Order\nof Operations to calculate the numbers\nin this section of the final project so\ndon't worry you don't have to be good at\nmath to learn JavaScript this is just to\nshow you how math Works in\nJavaScript in the rest of this lesson\nwe're going to learn some more details\nabout numbers and math the first detail\nwe're going to learn is a weird behavior\nof math in JavaScript\nfirst we'll need to learn some\nterminology in programming whole numbers\nlike 2 3 and 4 are called integers\ndecimal numbers like\n2.2 and 2.5 are called floating Point\nnumbers or floats and unfortunately\ncomputers have a problem working with\nfloats for example if we go back to our\nconsole and type the calculation\n0.1 plus\n0.2 and press\nenter it will give us this weird number\nhere that's close to 0.3 but a little\nbit\ninaccurate so this problem is not\nspecific to JavaScript many programming\nlanguages also have this problem the\nreason this happens is because of how\ncomputers store numbers I'll give a\nsimplified explan\ncomputers can only store zeros and ones\nwhile humans can count from 0 to 9 so\nthere's sort of a mismatch between our\nnumber systems for integers this is not\na problem the computer can just use a\nbunch of zeros and ones to store it\nhowever for decimal numbers or floats\nsometimes the computer can't store the\nnumber properly for example here's how\nthe computer computer tries to store\n0.2 using only zeros and ones at the top\nis what the computer stores at the\nbottom is what this is equal to in human\nnumbers we can see that the computer\ngets closer and closer to 0.2 but never\nactually reaches it and this is why we\nget these inaccuracies when calculating\nwith floats because computers can't\nstore some floats properly note that\nthis doesn't happen with all floats for\nexample computers can store\n0.25 without any problems so these\ninaccuracies only happen with some\nfloats but not all of them however when\ncalculating money we definitely want to\navoid any inaccuracies so let's learn\nhow to do that first we're going to set\nup our cart again so make sure in your\ncart you have one basketball with free\nshipping and this time you have one\nt-shirt so we're going to click\nupdate change this to one and click\nsave and this t-shirt also has free\nshipping now let's scroll up and we're\ngoing to calculate this number at the\ntop again which is the cost of the\nproducts let's go into our\nconsole and we're going to add the cost\nof the basketball\n$20.95 plus the cost of the\nt-shirt which is\n$7.99 if we press\nenter calculating with these floats\ncauses the inaccuracies that we saw\nearlier so how do we avoid this problem\nthe best practice when calculating money\nis to calculate in cents instead of\ndollars so instead of\n$20.95 we're going to calculate\n2,95 plus\n$7.99 notice we're not using floats\nanymore so we avoid the\ninaccuracies but now this number is in\ncents so we need to convert back to\nDollars to do that we'll surround this\ncalculation with brackets to make sure\nwe calculate this first and then at the\nend we'll divide by 100 to convert back\nto dollars because there are 100 cents\nin each dollar if we press\nenter and scroll\nup that's how we get the exact number\nthat we see on the page so remember in\nprogramming calculations with floats are\nsometimes inaccurate and when working\nwith money the best practice is to do\nthe calculation in cents and then\nconvert back to dollars at the\nend the next detail we're going to learn\nis how to round a number in JavaScript\nrounding just means taking a number and\nmoving it to the nearest integer to\nround a number we can use this\ncode capital m\nmath. round Open Bracket close bracket\nso make sure you use a capital M because\nJavaScript is case\nsensitive now between the brackets we\ncan put a number that we want to round\nlike\n2.2 if we press enter it will round this\nnumber down to\ntwo if we do capital M math do round\nOpen Bracket close bracket and between\nthe brackets we put\n2.8 and press\nenter it will round 2.8 up to three now\nlet's do a practical example with\nmath.round we're going to calculate the\ntax again but this time we're going to\nround the result to exactly this number\non the page so first let's calculate the\ntax we'll go into our\nconsole and add the cost of the product\nproducts in cents so\n2,95 for the\nbasketball and plus the cost of the\nt-shirt which is\n$7.99 and we'll surround this in\nBrackets to make sure we calculate this\nfirst and then we're going to multiply\nthis by the tax percent or\n0.1 and finally we'll convert this back\nto dollars so let's surround this in\nBrackets as well to make sure we\ncalculate this first and at the end\nwe'll divide by 100 to convert back to\ndollars so notice here we can have\nbrackets inside brackets in this\nsituation JavaScript will calculate the\ninner brackets first and then the outer\nbrackets and then everything else if we\npress enter\nhere this gives us\n2.89 which is close to the number on the\npage it's the same amount of money but\nour number is more accurate than we need\nso now let's learn how to use math.round\nto round this number to exactly\n2.89 first let's create a copy of this\ncalculation so we'll select it right\nclick copy\nand down here right click and\npaste by the way if you paste in the\nconsole you might see this warning\nmessage to fix this you can type allow\npasting and press enter and now you can\npaste so let's continue and we were\ntrying to round 2.89 4 to exactly\n2.89 so one thing we might try to do is\nto round this entire\ncalculation however this will round 2.89\n4 to 3 because it rounds to the nearest\ninteger instead what we want to round is\nthis number here so remember that this\nnumber is the result in cents which is\n289.50\nif we round this number it will round\ndown to\n289 which is exactly\n$289 so to round this calculation at the\nfront we'll type capital M\nmath.round so we already have brackets\naround this so we don't need extra\nbrackets so this this will round to\n289 and finally we'll convert this back\nto dollars at the End by dividing by 100\nif we press\nenter that's how we rounded this\ncalculation to get the exact number on\nthe\npage so to summarize we first calculate\nthe result in cents and then we round\nthis to the nearest scent and then at\nthe end and we convert back to\nDollars again don't worry you don't have\nto be good at math to learn JavaScript\nthese examples are just for learning\nalmost all the math we do in JavaScript\nis more simple than this I'll give you\nsome exercises at the end of this lesson\nto help you get more practice the last\nthing we're going to learn in this\nlesson is how to use Google when you're\nlearning to code so far I've been giving\nyou different pieces pces of code like\nalert and\nmath.round you might be wondering where\ndo I find this code these pieces of code\nare features of JavaScript and I find\nthis code by searching on Google so\nwe're going to learn how to use Google\nto learn new features of JavaScript on\nour own let's go to our browser and\ncreate a new tab at the\ntop and we'll click here and type\ngoogle.com and press\nenter and we'll search in Google so the\ntrick to searching in Google is to\nsearch for what we are trying to do for\nexample if we want to round a number we\nwould search for\nJavaScript how to round a\nnumber if we press enter\nsometimes you might get the code right\naway in the first result and sometimes\nyou might have to go into the other\nresults to find the code that you need\nin my example I see the code math.round\nin the first result so I can click into\nthis result read about what this code\ndoes and also see some examples of how\nto use it one thing to keep in mind is\nthat when you're searching in Google you\nmight not understand understand all the\ncode that you get in your results for\nexample here there's a lot of code that\nwe haven't learned yet and actually\nthat's okay we just need to look for the\npieces of code that look familiar to us\nlike this part of the code we can then\nuse this part of the code in our own\ncode we don't have to understand every\nbit of code that we get from Google and\ndon't worry as we move through this\ncourse we we will understand more and\nmore of this code that we get from\nGoogle\nresults these days we also have some\nartificial intelligence or AI tools that\ncan help us search for code I'll provide\nlinks to some of these tools in the\nvideo\ndescription by the way to find the links\nmentioned in each lesson you can click\nhere in the\ndescription and this page contains all\nthe links mentioned in each\nlesson and that's the end of this lesson\nin this lesson we learned how to work\nwith numbers and math we learned the\norder of operations and brackets we\ncalculated the numbers in the final\nAmazon Project we learned that\ncalculations using floats can be\ninaccurate and how to avoid this problem\nwhen working with money we learned how\nto round numbers using\nmath.round and we learned how to search\nfor code on our own here are some\nexercises to help you practice numbers\nand math\nin the previous lesson we learned how to\nwork with numbers and math in this\nlesson we're going to learn how to work\nwith text and we're going to create the\ntext in this section of the final\nproject first make sure you have the\nfinal project open and you're on the\ncheckout page also make sure you have\nthe console open on this page if not you\ncan go to a blank area\nright click click\ninspect and then click the\nconsole now we're going to learn a\nfeature of JavaScript called strings a\nstring represents text let's go to our\nconsole and create our first string\nwe're going to type single quote hello\nand single quote and press\nenter this is a string and it represents\nthe text hello and we've actually seen\nthis code before in the first lesson the\nfirst piece of code that we learned was\nalert Open Bracket single quote hello\nsingle quote close bracket and\nsemicolon this code creates a popup on\nthe page if we press\nenter it creates a popup now in inside\nthese brackets we actually created a\nstring this string is the text that\nappears in the popup so as you can see a\nstring represents\ntext let's press\nokay and now let's learn the syntax\nrules for strings to create a string we\njust write some text like hello and then\nsurround this text with single quotes\none at the beginning and one at the end\nwe can also add strings together for\nexample let's type the string\nsum plus the string\ntext and press\nenter when we add two strings it\ncombines the strings together into a\nbigger string and this makes sense we're\nadding two pieces of text together we\ncan also add more than two strings at a\ntime\nfor example we can type the string\nsum plus the string\nmore plus the string\ntext if we press\nenter the computer will combine all\nthree strings into one big string by the\nway this is called concatenation when we\ncombine strings together now in in the\nprevious lesson we learned about numbers\nnumbers and strings are two different\ntypes of values in JavaScript they\nrepresent different things and we can\nactually check what type of value\nsomething is using this code type of and\nthen space and then a value like the\nnumber two if we press\nenter type of will tell us that two\nis a number if we do type of quote hello\nquote and press enter it will tell us\nthat hello is a\nstring now what if we added a string and\na number together for example let's type\nthe string\nhello plus the number three and press\nenter\nso when we add a string and a number\nJavaScript will automatically convert\nthis number into a string so this gets\nconverted into the string hello plus the\nstring\nthree and then it combines them together\ninto the string hello 3 this feature is\ncalled type coersion or automatic type\nconversion okay now that we understand\nunderstand the basics of strings let's\ndo some practical examples we're going\nto use strings and numbers to create the\ntext in this section of the project\nfirst make sure that in your cart you\nhave one basketball with free shipping\nand you have one t-shirt also with free\nshipping and you have no other\nproducts let's scroll up and we'll start\nby creating this text in the top right\nso this is the cost of the products but\nthis time we're going to have a dollar\nsign so instead of just a number this\nwill be\ntext so one thing we can do to create\nthis text is just type out the string\ndirectly like quote doll\n28.94 and\nquote however let's actually calculate\nthis number using math\nremember the advantage of JavaScript is\nthat it's able to do\ncalculations so instead of typing out\n28.94 we're just going to create the\nstring Dollar Sign Plus and we're going\nto calculate this number using math so\nwe're going to add the cost of the\nbasketball which is\n$2.95\nplus the cost of of the t-shirt which is\n$7.99 if we press\nenter unfortunately this doesn't look\nright instead of doing math and adding\nthese two numbers together it just sort\nof put the numbers one after another\ninto the string so why is this happening\nJavaScript adds from left to right so\nthe first step is to add these two\nvalues and as we learned if we add a\nstring and a number JavaScript will\nautomatically convert this number into a\nstring so the result of this calculation\nwill be the string doll\n2.95 and\nquote the next step is to add\n7.99 so it will add\n7.99 and now we're adding again a string\nand a number\nso JavaScript will automatically convert\nthis number into a string and combine\nthem together that's why it puts\n7.99 at the end of this string instead\nof doing\nmath so what we actually want to do here\nis to add these two numbers first and\nthen combine the total with the string\nso how do we do this the solution is\nthat strings also follow the order of\noperations just like numbers and\nremember in the order of operations we\ncan use brackets to control which part\nof a calculation gets done first so\nlet's type this calculation out again\nthe string Dollar Sign Plus 20.95%\nclose bracket around this\ncalculation this tells the computer to\ncalculate this number first using math\nand then combine this result with the\nstring after if we press\nenter now this is doing math and it\nsolves our original problem\nunfortunately now we have another\nproblem this math is inaccurate so\nremember from the previous lesson doing\ncalculations with floats can sometimes\ncause\ninaccuracies and the best practice when\ncalculating money is always calculate in\ncents and then convert back to dollars\nat the end so at the bottom here we're\ngoing to add the string\nDollar Plus open bracket and instead of\n$20.95 we're going to add\n2,95 Plus\n$7.99 and close bracket and then at the\nend we're going to convert this number\nback to Dollars by dividing by 100 if we\npress\nenter this will give us the text that we\nsee in the final\nproject again strings follow the same\norder of operations as numbers brackets\nare always calculated first multiply and\ndivide are done next and add and\nsubtract are done after so adding this\nresult to the string is the last\nstep now let's do a more complicated\nexample let's use strings and numbers to\ncreate this entire line of text not just\nthe dollar text to create this we're\ngoing to go from left to right let's go\nback in our console and we're going to\nstart with the string\nitems Open Bracket and here we could\njust type two and close bracket but\nlet's actually calculate this number as\nwell using math so this number is the\nquantity or the number of products in\nour cart let's go back to our console\nwe're going to end the string here and\nwe're going to add and we're going to\ncalculate the quantity\nso we have one basketball plus one\nt-shirt again we run into the same\nproblem as before this gets calculated\nfirst and results in a string and then\nit will just combine the one at the end\nof the string instead of doing math to\nsolve this we're going to use brackets\nagain so around the 1 + 1 we're going to\nadd Open Bracket and close\nbracket this tells the computer to add\nthe numbers first and then combine it\nwith a\nstring all right let's keep going from\nleft to right we're going to add the\nrest of the string quote close bracket\ncolon and let's just use a space to\nrepresent the space between these two so\nwe'll type a space dollar sign and then\nwe're going to calculate this number\nagain and add it to the string so we'll\nend the string and then plus and we\nalready did this calculation up here so\nwe can select this and then\nrightclick\ncopy and here right click and\npaste and press\nenter by the way if you paste in the\nconsole you might see this warning\nmessage\nto fix this you can type allow\npasting and press\nenter and now you can\npaste and that's how we create this\nfirst line of text using strings and\nnumbers we break up the string into\nParts calculate the numbers and then add\nthe parts back\ntogether all right now let's take these\nstrings that we created Creed and do\nsomething with them let's create a popup\nand display this first line of text\ninside the popup we'll go back to our\nconsole and type the code for creating a\npopup\nalert Open Bracket close bracket\nsemicolon and then inside the popup\nwe're going to display this string so\nlet's just make a copy of this code\nwe'll select it right click\ncopy and between the brackets right\nclick and\npaste if we press\nenter the computer displays a popup with\nthe first line of text of the final\nproject\ninside so that's how we use strings to\ncreate the text in the final project and\nonce we create the strings we can use\nthem in other JavaScript\ncode in in the rest of this lesson we're\ngoing to learn more details about\nstrings in JavaScript there are actually\nthree ways to create a string the first\nway is to use single quotes which we\nalready learned for example we can type\nsingle quote hello and single quote and\npress\nenter the second way to create a string\nis to use double quotes for example\ndouble quote hello and double quote and\npress\nenter this creates the exact same string\nas single quotes so which one should we\nuse to create a string single quotes or\ndouble quotes in JavaScript I recommend\nusing single quotes by default they're a\nlittle easier to read and type there is\none situation where double quotes might\nbe useful and that is is if we have a\nsingle quote inside the string for\nexample if we type the\nstring I'm\nlearning\nJavaScript and single quote and press\nenter this doesn't work because there's\na single quote inside the string and\nthis single quote will end the string\nearly to solve this we can create the\nstring using double quotes for example\ndouble quote I'm\nlearning\nJavaScript and double quote and press\nenter so now this works because we\ncreated the string using double quotes\nthe single quote no longer has a special\nmeaning and it will no longer end the\nstring early so this is a situation\nwhere double quotes might be useful\notherwise we use single quotes by\ndefault now there's actually another\nsolution to this problem other than\nusing double quotes and that's by using\nan escape character so a character is\none letter number or symbol in a piece\nof textt for example the text hello has\nfive characters h e l l\no a character can be a letter in number\nor also a symbol these are all\nconsidered\ncharacters now in addition to these\ncharacters we have a special set of\ncharacters we can also use in a string\ncalled Escape characters an escape\ncharacter looks like this a backslash\nand then another character like single\nquote this combination actually counts\nas one character in a string this\ncharacter creat creat a single quote\nthat is just text it doesn't have a\nspecial meaning and it doesn't start or\nend strings for example we can create\nthis string with single quotes again so\nsingle quote I and this time we'll use\nthe Escape character back slash single\nquote and then M\nlearning\nJavaScript and single quote and press\nenter and now this works because the\nEscape character back SL single quote\ncreates a single quote that is just text\nit doesn't start or end the\nstring another Escape character that's\nuseful to know is back SL double quote\nthis creates a double quote that is just\ntext it doesn't start or end a\nstring the last Escape character we'll\nlearn in this lesson is back\nsln this is called the new line\ncharacter this Escape character doesn't\ncreate the letter N anymore it creates a\nnew line of text for example let's\ncreate a popup using\nalert Open Bracket close bracket and\nsemicolon and then inside the brackets\nwe're going to create a string sum and\nthen back\nsln text and single quote if we press\nenter you'll notice that this Escape\ncharacter created a new line of text in\nthe popup and that's why we call this\nthe new line character so that's how\nEscape characters work they are a set of\nspecial characters that start with back\nslash and we can use them in a\nstring now let's press okay\nand we're going to learn the Third Way\nof creating a string in JavaScript which\nis using back ticks for example let's\ntype in our console and we'll type\nbacktick hello and backtick and press\nenter this creates the same string as\nsingle quotes and double quotes strings\ncreated with backx actually have a name\nwe call these template strings and they\nhave a name because they have some\nspecial features the first special\nfeature of template strings is called\ninterpolation interpolation lets us\ninsert a value directly into a string\nfor example let's say we want to create\nthe first line of text in our project\nearlier in this lesson we created this\ntext with concatenation which means we\nbroke it up into parts and added them\nback together in interpolation gives us\na much easier way to do this we'll go to\nour console and we'll create this text\nusing a template string because\ninterpolation is only a feature of\ntemplate strings so we'll type backtick\nitems Open Bracket close bracket and\nback tick and now between these brackets\nwe want to insert the quantity or the\nnumber of products in our cart to insert\nthis with interpolation we're going to\ntype Dollar open curly bracket close\ncurly bracket so this combination of\ncharacters allows us to insert values\ndirectly into the string between these\ncurly brackets we can calculate the\nquantity which is one basketball plus\none\nt-shirt this will add 1 + 1 which equals\n2 and then insert it directly into the\nstring\nlet's keep going and create the rest of\nthis line so we're going to type at the\nend a Colin space and dollar and now\nwe're going to insert another value into\nthe string which is the cost of the\nproducts to insert another value we're\ngoing to type Dollar open curly bracket\nclose curly bracket again in between the\ncurly brackets we're going to calculate\nthe cost of the products\nwhich is\n2,95\nplus\n$7.99 and we'll surround this in\nBrackets to make sure we calculate this\nfirst and at the end we're going to\nconvert back to Dollars by dividing by\n100 if we press\nenter this creates the first line of\ntext again in our final project\nif we compare this code which uses\ninterpolation to our previous code which\nuses concatenation you can see that\ninterpolation is a much cleaner way of\ninserting values into a string so\ninterpolation is a recommended\nsolution next template strings have\nanother special feature called\nmulti-line strings let's go to our\nconsole and we're going to type a\nbacktick\nsum and then press\nenter and text and back tick notice that\nthis string is on multiple lines so we\ncall this a multi-line string and this\nfeature is only available for template\nstrings if we press\nenter you can see that the new line in\nthe string just creates the new line\nEscape character that we learned earlier\nso that's the multi-line string feature\nof template strings we're going to use\nmulti-line strings a lot later in this\ncourse but for now I just wanted to\nintroduce you to this feature now you\nmight be wondering again what should we\nuse to create a string single quotes or\ntemplate strings even though template\nstrings have more features I find that\nmost JavaScript code still uses single\nquotes by default so my personal\nrecommendation is to use single quotes\nby default and if we need to insert a\nvalue into the string or type the string\non multiple lines then use template\nstrings and that's the end of this\nlesson in this lesson we learned about\nstrings a string represents text we\nlearned how to use strings and numbers\nto create the text in our final project\nwe learned three different ways of\ncreating a string single quotes double\nquotes and back ticks or template\nstrings we learned about Escape\ncharacters and we learned two useful\nfeatures of template strings\ninterpolation and multi-line\nstrings here are some exercises to help\nyou practice working with strings\nso far in this course we've learned some\nbasic features of JavaScript like\nnumbers and strings in this lesson we're\ngoing to learn how to use HTML CSS and\nJavaScript together because as I\nmentioned at the beginning of this\ncourse we use all three Technologies to\nbuild build a full\nwebsite HTML creates the content of a\nwebsite like the buttons and the text\nCSS changes the appearance of the\nwebsite and JavaScript makes the website\ninteractive the first thing we're going\nto do is review the basics of HTML and\nCSS that we will need for the rest of\nthis\ncourse now in order to write HTML and\nCSS code we need to install another\npiece of software called a code editor a\ncode editor helps us write and organize\nour code the most popular code editor\nfor web development is called vs code or\nVisual Studio code to install vs code\nyou can go to google.com in your\nbrowser search for VSS\ncode click the result\nand follow the instructions to download\nand\ninstall once we've installed VSS code\nwe're ready to review the basics of HTML\nand\nCSS we'll start with\nHTML HTML stands for hyper text markup\nlanguage and just like JavaScript HTML\nis also giving instructions to a\ncomputer now unlike JavaScript we can't\nuse the console to write and run HTML\ncode instead we write HTML code inside a\nfile using our code editor let's do that\nright now we'll start by going to our\ndesktop so I'm going to close my browser\nto go to my\ndesktop and then we're going to create a\nnew folder so we can right click new\nfolder this folder is going to contain\nall the code that we write in this\ncourse let's name this folder JavaScript\ndasc next we're going to open this\nfolder in our code editor so let's open\nvs\ncode and then we'll click\nfile open\nfolder and find the folder that we just\ncreated for me it's on the\ndesktop and it's this folder right right\nhere so we're going to select the folder\nand then click select\nfolder now we can close this startup\nmessage and we're going to create an\nHTML file we're going to click this icon\nto create a new\nfile and we're going to name this file\nwebsite do\nHTML and press\nenter ending the file name name with\nHTML tells a computer that this file\ncontains HTML code rather than just\ntext now let's review some basic HTML\ncode we're going to type the code less\nthan button greater than and we also\nneed to type less than slash button\ngreater than but our code editor might\nautocomplete this for us so this code\ntells a computer to create a button and\ninside the button we're going to have\nthe text\nhello now let's save this file by\nclicking\nfile\nsave or by typing contrl s on Windows or\ncommand s on\nMac now to run this HTML code we're\ngoing to open this file in our browser\nlet's go back to our desktop\nwe're going to open the folder that we\ncreated find the HTML file select it and\nthen right click open with Google\nChrome as you can see we have a website\nand we created a button with the text\nhello inside and if we look back at our\ncode that's exactly what we told the\ncomputer to do\nso just like JavaScript HTML is also\ngiving instructions to a\ncomputer let's review some more HTML\ncode first I'm just going to rearrange\nmy windows here so that it's easy to see\nthe website side by\nside next we're going to click the end\nof the first line and press enter to\ncreate a new line and we're going to\ntype the code less than P greater than\nand we also need to type less than SLP\ngreater than so this code creates a\nparagraph and inside the paragraph we're\ngoing to put some text for example\nparagraph of text now let's save our\nfile by typing contrl s on Windows or\ncommand s on\nMac and to update our website to the new\ncode we're going to go to our website\nand click refresh or typ controlr on\nWindows or command r on\nMac and now you can see that the\ncomputer created a paragraph of text\njust like we told it to do and that's\nthe basics of HTML the computer reads\nour code and then follows our\ninstructions one by one first it creates\na button and then it creates a paragraph\nof text\nnow let's review the syntax rules for\nHTML each of these things that were\ndisplaying on a web page these are\ncalled HTML elements so a button is a\ntype of HTML element and a paragraph is\nanother type of HTML element to create\nan element we start with a less than\nsymbol and then the element name like a\nbutton and then the greater than symbol\nso this whole thing is called an HTML\ntag this tells a computer to create a\nbutton\nelement every HTML tag needs a matching\ntag the matching tag follows the same\nsyntax except it has a slash in front of\nthe element name so this is called the\nopening tag and this is called the\nclosing tag you can think of the opening\ntag as the start of the button and the\nclosing tag tag as the end of the button\nand in between we have the contents\ninside the button in this case it's the\ntext\nhello in addition to text we can also\nhave elements inside an element for\nexample we can go to our paragraph\nelement and we can add a button inside\nso less than button greater than and we\nalso need less than SL button greater\nthan and then inside the button we'll\nalso have the text\nhello if we save this file and refresh\nthe\npage now our paragraph element has a\nbutton element\ninside by the way this is called nesting\nwhen we have an element inside another\nelement the last syntax rule we have to\nreview is that in HTML if we have\nmultiple spaces for example if we go\nhere and type multiple\nspaces multiple spaces are combined into\none space on the web page so if we save\nthis code and\nrefresh you'll notice that all of the\nspaces that we added only show up as one\nspace on the web page in addition in\nHTML new lines also count as spaces so\nif we go back to our\ncode and we type here and press enter to\ncreate a new line and then save and\nrefresh notice that the new line doesn't\nappear on the web page and that's\nbecause this new line here is the same\nas spaces in HTML so all of these get\ncombined into one space on the web\npage at first this might seem a little\nweird but this feature gives us a lot of\nflexibility when organizing our h ml\ncode for example we can go into our code\nand add a new line here to separate\nthese two elements and make our code\neasier to read another thing we usually\ndo to make our code easier to read is to\nput the contents of an element on its\nown line for example we're going to type\nhere and press enter and here and press\nenter\nagain to put the contents of the button\nButon on its own line now it's a lot\neasier to see where this button starts\nand where it ends we can do the same\nthing with the paragraph We can type\nhere and press enter and type here as\nwell and press enter and then remove\nsome of the Extra\nSpaces to put the content of the\nparagraph on its own line and now if we\nsave our\nfile and refresh\nyou notice that none of the new lines\nthat we added appear on the web page by\nthe way a web page is a single page like\nthe homepage or the cart page together\nwe call this a\nwebsite so that's the basics of HTML and\nHTML\nsyntax now let's review CSS CSS stands\nfor cascading style sheets and CSS\nchanges the appearance of our website\nlet's review some CSS code we're going\nto write our CSS code inside our HTML\nfile first let's type here and create\nsome new lines at the top and then at\nthe top we're going to create a special\nHTML element called the style element so\nlet's type less than style greater\nthan and we also need the closing tag\nless than SL style greater than so the\nstyle element is unique because it\ndoesn't appear visibly on the page\ninstead the purpose of the style element\nis that it lets us write CSS code\ninside so inside here let's press enter\nto create a new line and we're going to\ntype\nbutton open curly bracket close curly\nbracket and then inside the curly\nbrackets we're also going to press enter\nto create a new line so this is CSS code\nand this code tells a computer to change\nthe appearance of all buttons on the\npage and then inside these curly\nbrackets we can tell the computer how to\nchange the appearance for example we can\ntype\nbackground- color colon red and\nsemicolon if we save\nand\nrefresh you can see that this CSS code\nchanges the appearance of all buttons on\nthe page and changes their background\ncolor to\nRed let's do another example we're going\nto go back to our CSS code going to type\nhere and press enter to create a new\nline and we're going to add color colon\nwhite and semicolon let's save\nand\nrefresh and this CSS code changes the\ntext color of all buttons on the page to\nWhite let's do one more example we're\ngoing to type the\ncode order Colon none and\nsemicolon let's save this and\nrefresh and this CSS code removes the\nborder for all buttons on the page\nand that's how CSS works we tell the\ncomputer which elements we want to\nchange and then how to change the\nappearance of these\nelements now let's review the syntax\nrules for\nCSS this part of the CSS code is called\nthe CSS selector it tells a computer\nwhich elements we want to change in\nother words it selects which elements to\nchange inside the curly brackets we have\nsome CSS Styles this tells a computer\nhow to change the\nappearance for each style the left side\nis called the CSS property this tells a\ncomputer what we're changing the right\nside is called the CSS value this tells\na computer what we're changing the\nproperty to for example this style\nchanges the background color to\nRed we use a colon to separate the\nproperty and the value and a semicolon\nat the end to tell the computer that\nthis is the end of a style so that's the\nbasic syntax of CSS we tell the computer\nwhich elements we want to change and\nthen how to change the appearance of\nthese\nelements the next thing we're going to\nreview is HTML\nattributes right now this CSS selector\nchanges the appearance of all but\nbuttons on the page however what if we\nonly want to change the appearance of\nthis one button and we want to style the\nother button differently how do we do\nthat we're going to review a feature of\nHTML called attributes attributes change\nthe behavior of an element for example\nwe're going to go to the opening tag of\nthe first button and then here we're\ngoing to add an HTML attribute by typing\nspace\ntitle equals double quotes and then in\nbetween the double quotes we're going to\ntype tool\ntip so this is an HTML attribute and\nthis attribute adds a tool tip to this\nbutton if you're wondering what a tool\ntip is if we hover over some code in our\ncode editor it'll show us this sort of\npopup with more\ninformation this is called a tool tip\nwhen we hover over something and this\nshows up so if we save our\nfile and refresh the web page and now we\nhover over our button we can see that\nthe HTML attribute added a tool tip to\nour button and then inside the double\nquotes is the text inside the tool tip\nfor example we can actually change this\nto good\njob and if we save save and\nrefresh and hover over our button the\ntext between the double quotes is what\nshows up in our tool tip so that's an\nexample of an HTML\nattribute now let's review the syntax\nrules for\nattributes we always put attributes on\nthe opening tag and we add a space\nbetween the element name and the\nattribute to separate them on the left\nside is the attribute name this tells\nthe computer what we're changing about\nthis element on the right side is the\nattribute value this tells a computer\nwhat we're changing this attribute to\nfor example here we're changing the tool\ntip of this element to good job we\nseparate the name and value with an\nequal sign and make sure there are no\nspaces around the equal sign and we\nsurround the value with double quotes\nnow let's go back to the original\nproblem how do we style these buttons\ndifferently we can do this using a very\nimportant attribute called the class\nattribute let's review that right now\nwe're going to go back to our button and\nthen here we're going to type space\nclass equals double quotes and then\ninside the double quotes we're going to\ntype red Das\nbutton so the class attribute sort of\nadds a label to an element so here we\nlabeled this button as a red button and\nnow that we labeled this element we can\nselect it in\nCSS to do that we're going to go to our\nCSS code we're going to remove the\nbutton\nselector and replace it\nwitht\nred-\nbutton when we start the selector with a\nDOT this means that now we're looking\nfor a class so here we're going to look\nfor all elements with the class red dash\nbutton which is only this element if we\nsave and\nrefresh now only the elements with the\nclass red button gets these Styles we\ncan also add the same class to multiple\nelements for example we can go to to our\nother\nbutton and add the class equals\nred-\nbutton if we save and\nrefresh now these Styles get applied to\nboth buttons again because they both\nhave the class red-b button if we want\nto style this button differently we just\ngive it a different class for example we\ncan change this to Yellow yellow dash\nbutton and then in our CSS we can add\nanother selector so we can type dot this\nmeans we're going to select a class and\nwe're going to select the yellow Das\nbutton class open curly bracket close\ncurly bracket and then inside here we\ncan add some styles for the yellow\nbutton for\nexample background Das color colon\nyellow and\nsemicolon now let's save and\nrefresh and that's how we use the class\nattribute in HTML to modify specific\nelements the final thing we need to\nreview is something called the HTML\nstructure let's go back to our website\nwe're going to find a blank area and\nthen\nrightclick and then click inspect\nso we already learned about the console\ntab here we can write and run JavaScript\ncode now we're going to go to the\nelements tab which is for HTML and CSS\nso in the elements tab we can see all\nthe HTML on the page as well as all the\nCSS on the page and we can play around\nwith the CSS if we\nwant now if we go back to to the\nHTML you'll notice that our web page has\nsome elements that we didn't add before\nthe HTML element the head element and\nthe body\nelement so this is the structure that\nwe're supposed to follow when writing\nHTML in our code we didn't follow the\nstructure so the browser actually adds\nit for us\nautomatically however it's still best\npractice to follow this structure in our\ncode because it gives us access to some\nmore features of\nHTML let's review the HTML structure and\nadd it to our\ncode we're going to type up here and\nwe're going to create some new\nlines and now every HTML file is going\nto start with less than\nexclamation dock type in capitals and\nthen space\nHTML and greater\nthan this is not an HTML element it's a\nspecial line of code that tells a\nbrowser to use a modern version of\nHTML if we don't have this the browser\nmight fall back to an older version of\nHTML that has less\nfeatures next we're going to create an\nHTML element so less than\nHTML and greater\nthan the HTML element represents the\nentire web page\nso everything on the web page should go\ninside this\nelement and then inside the HTML element\nwe're also going to split it up into two\nsections the head\nelement and the body\nelement so the body element is supposed\nto contain everything that is visible on\nthe page in our example that would be\nthe buttons and the parag graph so let's\nactually select this\ncode and we're going to\nrightclick and\ncut and then inside the\nbody we're going to right click and\npaste the head element contains\ninformation about the page in general\neverything that is not visible on the\npage goes inside the\nhead in our examp example that would be\nthe style element so let's select this\nas\nwell we're going to rightclick and\ncut and then inside the\nhead we're going to right click and\npaste and at the bottom let's just clean\nup by removing all of the extra new\nlines so this is a structure that we're\nsupposed to follow in all of our HTML\nfiles as you can see this structure uses\na lot of nesting or elements inside\nelements to organize our\ncode okay so what are the benefits of\nfollowing this structure one benefit is\nthat there are other elements that we\ncan use inside the head for example\nlet's type here press enter and we're\ngoing to add the title element so the\ntitle element sets the text in the\ntabs inside we can type HTML CSS review\nif we save and refresh the title will\nshow up in the\ntab so this is an example of an element\nthat we can now add in the\nhead another benefit that we get from\nthis structure is the ability to\nautomatically refresh our web page when\nwe change our code\nso far every time we change our code we\nhave to save and then manually refresh\nthe web page we can actually automate\nthis by following the structure and then\ninstalling a VSS code\nextension so let's click the extension\narea and we're going to search for the\nextension live\nserver and click install\nonce we have that installed we're going\nto change a\nsetting let's open the settings by\nclicking this icon in the bottom left\nand then click\nsettings at the top we're going to\nsearch for live\nserver and we're going to look for a\nsetting called live server custom\nbrowser and we're going to change this\nto\nChrome now now if Google Chrome is\nalready your default web browser you\ndon't need to do this step but it's nice\nto\nknow now let's close the\nsettings and go back to our\ncode next instead of opening this file\ndirectly in the browser like before\nwe're going to use live server to open\nthis file to do that we're going to\nrightclick this file in our code editor\nand then click open open with live\nserver if we open a file with live\nserver this web page will automatically\nrefresh when we change our\ncode for example we can go here and\nchange the background color to Green if\nwe save live server will automatically\nrefresh the web page so we don't have to\ndo that back and forth\nanymore let's just change it back to Red\nso that the class last name makes sense\nand\nsave and we can also close the previous\ntab so this is the HTML structure it\ngives us access to more features of\nHTML and this is all we need to review\nabout HTML and CSS for now if you want\nto learn more you can check out my HTML\nand CSS full course in the video\ndescription by the way to find the links\nmentioned in each lesson you can click\nhere in the\ndescription and this page contains all\nthe links mentioned in each\nlesson before we add JavaScript to our\nwebsite we're going to review some VSS\ncode\nsetup so you'll notice that many of\nthese lines have spaces at the front\nthese spaces are called in indents and\nindents make our code easier to read for\nexample we can easily tell that this\ncode is inside the brackets because it\nhas an extra indent in the\nfront if we didn't have indents here's\nwhat the code would look like it's a lot\nharder to\nread to add an indent we can type at the\nbeginning of the line and press\ntab to remove an indent we can press\nshift tab or just use\nbackspace now by default VSS code uses\nfour spaces per indet however in HTML\nCSS and JavaScript we usually use two\nspaces per indet so we're going to\nupdate this setting let's go to our\nsettings by clicking this icon in the\nbottom\nleft and then click\nsettings and at the top we're going to\nsearch for tab\nand we're going to change the tab size\nfrom 4 to\n2 now let's close the\nsettings and we're also going to change\nthe indents for this file we're going to\ngo down here and click select\nindent and we're going to choose indent\nusing\nspaces and then click\ntwo and now if we type at the start of a\nline and press tab it will only add two\nspaces per\nindent so let's reformat our code to use\ntwo spaces per indent instead of four\nfirst we're going to remove all the\nindents in our code a shortcut for this\nis to select all of these\nlines and press shift tab to remove one\nindent for each line so we're going to\nkeep pressing shift tab until we remove\nall the\nindents next next we're going to add the\nindents back using a similar shortcut\nwe're going to select the head\nelement and press tab to add one indent\nfor each line and then select everything\ninside the head and press tab to add\nanother indent and then select\neverything inside style and press Tab\nand then inside each of these brackets\nwe're going to select the lines press\nTab and then here press tab we'll do the\nsame thing for the body element we'll\nselect all these lines and press tab\nwe'll select everything inside the body\npress Tab and then inside each of these\nelements we're going to press Tab and\npress\ntab now if we save our website will look\nthe same because all we did was adjust\nthe\nindents so there's one other setting in\nvs code that we're going to set up which\nis line wrapping if you look at this\nline of code you can see that it's\nreally long and we need to scroll\nhorizontally to see the rest of the line\ninstead we're going to make this line\nwrap around if it gets too long let's go\nback into our settings by clicking here\nand then click the\nsettings and then up here we're going to\nsearch for\nwrap and we're going to look for editor\nword wrap and we're going to turn this\non now if we close our settings and go\nback to our\ncode this line which is really long will\nwrap around to the next line instead of\nus having to horizontally\nscroll so that's the vs code setup that\nwe need two spaces per indent and line\nwrapping finally we're going to add\nJavaScript to this website so we learned\nthat we can use the console to write and\nrun JavaScript well there's actually\nanother way to run JavaScript which is\ninside an HTML file let's learn how to\ndo that so we learned that HTML has a\nspecial element that runs CSS code\ncalled the style element while HTML has\nanother special element that runs\nJavaScript code and this element is\ncalled the script\nelement so inside\nbody at the bottom of the body we're\ngoing to add less than script greater\nthan and the closing tag less than SL\nscript greater than and inside the\nscript element we can put some\nJavaScript code we're going to add the\ncode alert Open Bracket quote hello\nquote close bracket and semicolon if we\nsave\nlive server will refresh the page and\nnow you notice that the computer now\nruns our JavaScript code just like it\ndid in the console it creates a popup\nwith the text hello\ninside and we usually put the script\nelement at the bottom of the body\nbecause we want the web page to be\ncreated first and then we use JavaScript\nto make it\ninteractive for the rest of this course\nwe're going to run our JavaScript code\nusing using an HTML file the console\nthat we used in the previous lessons is\nmore of a way to try out JavaScript code\nwe wouldn't use a console for a real\nwebsite in addition to the script\nelement we have another way to run\nJavaScript code inside HTML and that's\nby using an attribute let's go back to\nour first button and here we're going to\nadd another attribute so let's type\nspace and this time we're going to add\nthe\nonclick attribute equals double\nquotes So this attribute will run\nJavaScript code whenever we click this\nbutton that's what onclick means between\nthe double quotes we can write some\nJavaScript for example let's press enter\nenter and then here we're going to type\nalert\nOpen Bracket\nquote good job quote close bracket and\nsemicolon now if we\nsave live server will refresh the page\nand run this line of JavaScript code\nlet's press okay and now if we click\nthis\nbutton it will run this line of\nJavaScript code and create a popup with\na text good job inside\nso those are two places where we can run\nJavaScript code the script element and\nthe onclick attribute the code in the\nscript element runs first when the page\nis loaded the code in the onclick\nattribute runs after when we click the\nbutton on the\npage and that's how we use HTML CSS and\nJavaScript together on a website\nnotice that everything starts from\nHTML HTML first creates the website and\nthen inside the HTML we can run CSS code\nto change the appearance and we can run\nJavaScript code to make the website\ninteractive now let's learn some new\nfeatures of JavaScript that we haven't\nseen yet in this course the next feature\nwe're going to learn is called comments\ncomments are pieces of code that the\ncomputer ignores so let's create our\nfirst comment we're going to go down to\nthe script element\nhere and type forward slash forward\nslash so this is a comment anything\nafter the double slash will be ignored\nby the computer so we can type anything\nwe want like this is a\ncomment if we save it ignores this line\nand creates the popup in the next\nline now let's close this popup and\nlearn why we use\ncomments comments are useful for\nproviding more information for people\nreading our code for example we can\ncreate a comment above this code like\nthis code creates a\npopup this comment helps others and\nourselves understand what this code does\nso that's one way we use\ncomments another way we use comments is\nif we don't want to run some code\nanymore but we also don't want to delete\nit for example this code creates a popup\nevery time we refresh the page and this\ncan be\nannoying so I want to stop running this\ncode but I also don't want to delete it\nbecause you might want to review this\ncode\nlater so what we can do here is to add a\ndouble slash in front of this line to\nturn this code into a\ncomment now if we save the computer will\nignore this line of code and not create\nthe\npopup this is called commenting out the\ncode it's useful if we don't want to run\nsome code anymore but we also don't want\nto delete it for informational purposes\nso JavaScript has another Syntax for\nwriting comments and that syntax is\nslash star and star\nslash here anything between the stars is\na comment this is called a multi-line\ncomment because between the Stars we can\nwrite a comment on multiple lines for\nexample we can type multi enter line\nLine enter\ncomment on the other hand double slash\nis known as a single line\ncomment now just like JavaScript HTML\nand CSS also have comments but they use\na different\nsyntax if we scroll up to our\nHTML here we can type less than\nexclamation\nd-h and we also need dh- greater than so\nanything between these double dashes is\na comment for example this is a\ncomment in CSS to create a comment we\ncan type slash star star slash so it's\nthe same multi-line comment as\nJavaScript between the Stars we can add\na comment so this\nis a\ncomment if we save our\nfile nothing changes on our web page\nbecause comments are ignored by the\ncomputer the last feature of JavaScript\nwe're going to learn is called\nconsole.log let's go back to our\ncode and at the bottom in the script\nelement we're going to type the code 2 +\n2 so we learned that this code in Java\nscript does some math however if we save\nthis\nfile where is the result of this math so\nwe might think that the result will show\nup in the console but if we\nrightclick click\ninspect and then click the\nconsole you'll notice that the result\ndoesn't show up here either and that's\nbecause before we were running 2 + 2\ninside the console so the result shows\nup in the console but now we're not\nrunning this code in the console anymore\nwe're running this code on the web page\nso how do we see this\nresult the solution is we're going to\nredirect this result back to the console\nto do that we're going to use this piece\nof\ncode\nconsole.log Open Bracket close bracket\nand\nsemicolon console.log will display\nwhatever's between the brackets back in\nthe console so if we move this code\nbetween the brackets so we select this\nand then right click cut and then\nbetween the brackets right click paste\nand\nsave the result of this code is\ndisplayed back in the console\nand console.log works for any code that\nwe learned so far for example we can use\nstrings so let's create a new line and\ntype\nconsole.log Open Bracket close bracket\nsemicolon and then between the brackets\nlet's type some\nstrings quote Su quote plus quote text\nquote\nand save this\nfile again it will display the result of\nwhatever's between the brackets back in\nthe\nconsole so that's how we see the result\nof JavaScript code that is running in a\nfile we use\nconsole.log and that's the end of this\nlesson in this lesson we reviewed the\nbasics of HTML and CSS we set up our\ncode editor vs code we learned how to\nload JavaScript inside an HTML file\nusing the script element and the onclick\nattribute we learned how to create\ncomments and we learned how to use\nconsole.log thanks for watching this\ncourse so far if you want to support\nthis channel you can check out the\npremium version of my courses just like\nthis one where you can get a certificate\nof completion and a learning platform if\nyou're interested in extra videos from\nme more in-depth videos and behind thes\nscenes content you can check out these\nlinks here you can also support the\nchannel by liking the video subscribing\nand sharing this video with others\nthanks again and let's continue with the\ncourse here are some exercises you can\ntry on your own to practice what we\nlearned in this lesson\nin this lesson we're going to learn the\nnext feature of JavaScript called\nvariables and we're going to use\nvariables to build a simple version of\nthe cart quantity feature of the final\nproject\nfirst let's create a new HTML file just\nfor learning variables we're going to go\nto our code editor and click this icon\nto show our files and then click this\nicon to create a new\nfile and we're going to name this file\n05-\nvariables.\nHTML and press\nenter so the 05 just means that this\nfile is for lesson\nfive let's also add the lesson number to\nwebsite.\nHTML we'll select this file and then\nrightclick\nrename and then at the front We'll add\n04- and press\nenter next we're going to copy all the\ncode in website. HTML to variables.\nHTML so let's click in this file and\nwe're going to select all of this code\nby typing control a on Windows or\ncommand a on\nMac and then we're going to\nrightclick\ncopy and then inside variables.\nHTML rightclick and\npaste let's click this icon to hide our\nfiles for now and we'll prepare this\nfile for this lesson so let's scroll up\nto the top and first we're going to\nchange the title to\nvariables next we're going to delete all\nthe CSS because we're going to start\nover and we're going to delete all the\nHTML except for the script\nelement and let's delete all the\nJavaScript from the previous\nlesson and finally let's save\nand we'll open this file in our browser\nby right clicking and then open with\nlive\nserver and now we can close the previous\ntab and the previous code for\nnow now we're ready to learn\nvariables first of all what is a\nvariable a variable is like a container\nwe can save a value like a number or a\nstring inside a variable and then then\nuse it later Let's do an example and\ncreate our first\nvariable inside the script element we're\ngoing to type the code let and space the\nword let creates a new variable and now\nwe're going to choose a name for our new\nvariable let's name this variable\none so this creates a variable or a\ncontainer named variable one and now we\ncan save a value inside this variable to\ndo that we're going to type space equals\nspace and then a value like a number or\na string so let's save the number three\ninside and we'll type a semicolon at the\nend so here we use the let to create a\nnew variable we named this variable\nvariable one and we saved the value\nthree inside this\nvariable now that we saved this value we\ncan use it later for example let's type\na new line and type the code\nconsole. log Open Bracket close bracket\nand\nsemicolon remember from the previous\nlesson that this code displays\nwhatever's inside the brackets in the\nconsole so far we put a value inside\nlike the number\ntwo if we save and then go to our\nwebsite and open the console so right\nclick\ninspect and then click the\nconsole we can see that the number two\nwas displayed in the\nconsole so now let's try replacing this\nvalue with the variable that we created\nabove so instead of two we're going to\nconsole.log variable one\nif we\nsave notice that it now displays three\nso it's displaying whatever value is\nsaved inside the variable as you can see\nwe can save a value inside a variable\nand then use that variable later\non let's do another example we're going\nto create another variable so we're\ngoing to create some new lines and we'll\ntype\nlet and this time let's name this\nvariable\ncalculation and we're going to type\nspace equals space to save a value\ninside this new variable and this time\ninstead of just a number we're going to\nsave a\ncalculation 2 + 2 and semicolon so this\nwill calculate 2 + 2 and then save the\nresult which is four into the\nvariable if we call\nconsole. log Open\nBracket\ncalculation and semicolon and\nsave it will show us that the value for\nis saved inside\ncalculation now let's try this code\nwe're going to type a new line and then\nconsole. log Open Bracket and\ncalculation again\nand plus 2 and\nsemicolon so here we're using a variable\ninside a\ncalculation what this does is that it\ntakes whatever value is saved inside the\nvariable right now it is four and then\nsubstitutes that value into the\ncalculation so this will be 4 + 2 which\nequals\nsix if we\nsave we can see that in the console it\ndisplay blade\nsix so we can use a variable wherever we\nuse a value and JavaScript will\nsubstitute whatever is inside the\nvariable into the\ncode let's do another example we're\ngoing to type some new lines and create\na new variable again using\nlet and we're going to name this\nvariable\nresult and we're going to make it equal\nto calcul\nation plus 2 and\nsemicolon so this does the same thing as\na code before it will take whatever\nvalue is inside calculation which is\nfour and substitute it into this code so\nwe get 4 + 2 =\n6 but this time we have an extra step\nwe're going to save this result which is\nsix into another\nvariable so so if we\nconsole.log\nresult and\nsave we can see that six was saved into\nthe result\nvariable again we can use a variable\nwherever we use a value now in addition\nto numbers we can save any type of value\nin a variable including\nstrings for example let's create a new\nvariable using\nlet and let's name this\nmessage and we're going to save inside\nthis variable a string this time so\nquote hello quote and\nsemicolon again we're going to\nconsole.log this variable so\nconsole.log and\nmessage and a semicolon at the end if we\nsave\nit will show us that the string hello is\nsaved inside this\nvariable okay now that we learned how\nvariables work let's learn the syntax\nrules for\nvariables the word let creates a new\nvariable and then we give the variable a\nname so we can name variables almost\nanything we want except for a few\nrestrictions number one we can't use\nspecial words like let as a variable\nname\nthat's because let already has a special\nmeaning in JavaScript it creates a\nvariable so let is a reserved word\nhowever we can use let one or let two as\nvariable names we just can't use\nlet number two we can't start a variable\nname with a number if we start with a\nnumber JavaScript will think this is a\nnumber instead of a variable name\nhowever we can use numbers in the middle\nor the\nend lastly we can't use most special\ncharacters like these or a space in a\nvariable name however there are two\nspecial characters we can use dollar and\nunderscore so those are the rules for\nnaming\nvariables and then to save something\ninside a variable we just use the equal\nsign and then the value we want to save\nand that's it after we create a variable\nwe can start using it in the rest of our\ncode now there's one last part of the\nsyntax that we haven't learned which is\nthe semicolon we've seen semicolons in\nmany places already in JavaScript a\nsemicolon means this is the end of an\ninstruction it's similar to a period in\nEnglish in English a period means this\nis the end of a\nsentence so here this semicolon tells\nJava script that this is the end of an\ninstruction and now after this we can\nadd another instruction like\nconsole. log Open Bracket and then the\nstring semicolon and a semicolon at the\nend if we\nsave it will run these two instructions\none after another without any\nproblems so if we didn't have the\nsemicolon here and and we save it\nwouldn't work because JavaScript thinks\nthat this entire line is one\ninstruction so we need semicolons to\nseparate different instructions in\nJavaScript if we\nsave everything goes back to\nnormal so JavaScript is a little special\nbecause it has a feature called\nsemicolon\ninsertion that means it will try to\ninsert the last semicolon in a line of\ncode automat automatically for example\nif we removed the last\nsemicolon and\nsave this code will work without that\nsemicolon and that's because JavaScript\ninserts the last semicolon\nautomatically however a lot of companies\nstill prefer to use semicolons in their\nJavaScript code because semicolon\ninsertion can sometimes put the\nsemicolon in the wrong place for this\nreason we're also going to use sem\ncolons in this course to help you get\nused to JavaScript code with\nsemicolons next we're going to learn how\nto change the value that is saved inside\na variable for example here we save the\nnumber three inside variable one now\nwe're going to change the value saved\ninside variable one to do that we're\ngoing to go to the bottom and create\nsome new\nlines and we're going to type the\nvariable name again so\nvariable one and now to change the value\nsaved inside we're just going to type\nthe equal sign and then a different\nvalue like five and\nsemicolon and now if we console.log this\nvariable\nconsole.log variable 1 and semicolon and\nsave it will show us that five is now\nnow saved inside variable\none notice also that if we scroll up to\nthe top the first console.log still\ndisplays the value three and that's\nbecause at this point in the code\nvariable one still contained three we\ndidn't update the variable yet so when\nwe first saved a value inside this\nvariable this is called assigning a\nvalue to a\nvariable then when we change the value\ninside this varable iable this is called\nreassigning a value to a\nvariable now let's learn the syntax\nrules for reassigning a value notice\nthat we don't use the word let when\nreassigning that's because let creates a\nnew\nvariable so if we try to use let again\nit would try to create a new variable\nnamed variable one however variable one\nalready exists and we can't create two\nVAR variables with the same name so this\nwould cause an error instead to reassign\na variable we just type out the variable\nname and make it equal to something else\nso that's the Syntax for reassigning a\nvariable now we're going to do one last\nexample before working on the project\nlet's go to the end of our code we're\ngoing to type some new\nlines and this time we're going to re\nreassign variable one again so we can\nreassign a variable as many times as we\nwant so let's type variable 1 and then\nequals and we're going to type variable\n1 + 1 and\nsemicolon so we learned earlier that we\ncan use a variable inside a calculation\nand it will substitute whatever value is\ninside the variable\nhere we're also using a variable inside\nthe calculation but we're using this\nvariable\nitself so it's essentially taking this\nvariable increasing it by one and then\nsaving it\nback if we\nconsole.log this variable variable\none and\nsave variable one now contains six so it\ntook the previous value in variable one\nwhich was five added one and then saved\nit\nback so this is how we increase the\nvalue of a variable by a certain\nnumber okay now that we know how to\ncreate and reassign variables we're\nready to work on a project so I actually\nprepared a project that we can do for\nthis lesson and we can see this project\nby going to our browser clicking at the\ntop and and typing\nsuper simple\ndodev SL projects SLV\nvariables and press\nenter so we're going to work on the cart\nquantity feature of the final project so\nin the final project we have a number in\nthe top right corner that shows how many\nproducts are in our cart when we click\nthe add to cart button this quantity\nwill increase\nso what you see here is a simple version\nof the cart quantity feature that we can\ncreate right now let's go over how it\nworks first make sure you have the\nconsole open on this page now when we\nclick the show quantity button it will\nshow us that there are zero products in\nour cart if we click the add to cart\nbutton it will increase the quantity by\none and display it in the console\nif we click add to cart again it will\nincrease the quantity by one again now\nin the final project we can also add\nmore than one product at a time using\nthis\ndrop-down for now we're going to build a\nsimpler version of that we're going to\nuse the plus two and plus three buttons\nto add multiple products so when we\nclick the plus two button it will\nincrease the quantity by two and display\nit in the console\nand when we click the plus three button\nit will increase the quantity by\nthree and finally when we click the\nreset cart button it will reset the\nquantity back to zero and display this\nmessage in the\nconsole so now that we understand how\nthis project Works let's build this step\nby step first let's create a new HTML\nfile just for this project we're going\nto go to our code editor and click this\nicon to show our files and then click\nthis icon to create a new\nfile let's name this file 05\ndcart D\nquantity.\nHTML and press\nenter next let's open variables. HTML\nand we're going to copy all the code\nhere into our new\nfile let's type control a on Windows or\ncommand a on Mac to select all this code\nand then\nrightclick\ncopy and then in our new\nfile right click and\npaste let's close this for\nnow and in the new file we're going to\nchange the title to cart quantity\nand let's remove all of our JavaScript\ncode but keep the script element because\nwe're going to write new JavaScript\ncode now we're ready to begin let's\nstart by creating these\nbuttons let's go to the body element\ngoing to create a new\nline and here as we learned in the\nprevious lesson we can create a button\nusing this HTML code less than button\ngreater than and the closing tag less\nthan SLB button greater\nthan inside this button we're going to\nhave the text show\nquantity and let's\nsave now let's open this file in live\nserver by right clicking and then open\nwith live\nserver and we can see that we created\nthe first button now let's create the\nother buttons here feel free to pause\nthe video if you want to try it\nyourself we're going to go back to our\nHTML and create another\nbutton inside this one we're going to\nhave the text add to\ncart let's create another\nbutton this one is going to have the\ntext plus\ntwo and we'll create another\nbutton this one is going to be + 3 and\nfinally we'll create the last\nbutton and this one is\nreset\ncart and now let's\nsave and if we go back to our\ntab we've created all the\nbuttons now let's make this web page\ninteractive with\nJavaScript first of all we need\nsomewhere to save the cart quantity so\nas we learned in this lesson variables\nare the perfect solution for this\nvariables let us save a value so let's\ngo into the script element and we're\ngoing to create a variable by typing\nlet and this variable is going to save\nthe cart quantity so let's just name it\ncart capital Q\nquantity so the card quantity will start\nout at zero so we're going to type equal\nZ and\nsemicolon next when we click the show\nquantity button we want to display the\nquantity in the console to do this we\nlearned a special HTML attribute in the\nprevious lesson called the onclick\nattribute so we're going to type in this\nopening tag here space\nonclick equals and double quotes So the\nonclick attribute run some JavaScript\nwhen we click this\nbutton and between the double quotes we\ncan write JavaScript code so let's press\nenter\nenter And now when we click this button\nwe want to display the card quantity in\nthe console so let's type\nconsole.log Open Bracket close bracket\nsemicolon and then between the brackets\nwe're going to display a message\nnow if we go back to Super\nsimple. and we click show\nquantity we want to display this message\nin the\nconsole so in our code between the\nbrackets we're going to type the string\nquote cart\nquantity colon\n0 now let's save and go back to our tab\nto try it\nout so we're going to open the console\nfirst by right clicking and then click\ninspect and then click the\nconsole and now when we press the show\nquantity button it should display that\nmessage in the\nconsole okay so we just made our project\ninteractive however we obviously don't\nwant to display zero every time we want\nto display the value inside cart\nquantity so we need to insert this value\nin inside this\nstring remember from the strings lesson\nwhen we want to insert a value into a\nstring we're going to use a template\nstring so let's switch the single quotes\nto back\nticks to create a template\nstring and now instead of zero we're\ngoing to insert a value using Dollar\nopen curly bracket and close curly\nbracket and in between these brackets\nwe're going to insert this\nvariable\ncart capital Q\nquantity remember that JavaScript is\ncase sensitive so make sure you type the\nvariable name exactly the\nsame now let's\nsave and click show quantity\nagain and now it displays the value\ninside card quantity in the console so\nnotice that variables also work with\nstring\ninterpolation again we can use a\nvariable wherever we use a value and it\nwill just substitute whatever value is\nsaved inside this variable into the\ncode now let's make the rest of the\nbuttons\ninteractive so when we click the add to\ncart button we're going to add one to\nthis cart quantity and display it in the\nconsole so again we're going to type\nhere and type space\non click equals double quotes and\nbetween the double quotes we're going to\nadd\nJavaScript let's also add some new lines\nhere to make our code easier to\nread okay so in the onclick attribute\nwe're going to do two things the first\none is increase the card quantity by\none we can do that by reassigning the\ncard quantity variable\nso we're going to type just the variable\nname cart\nquantity and we're going to make it\nequal to\nitself plus one and\nsemicolon next we're going to display\nthe updated quantity in the console so\nlet's press\nenter and we're going to display this\nmessage again so we can actually just\ncopy this code so we'll select it and\nthen right click and\ncopy and then\nhere right click and\npaste now if we\nsave and click the add to card\nbutton we'll see that it increased the\nquantity by one and displayed the\nupdated quantity in the console let's\npress it again to make sure it\nworks so it increases it by one again\nand then displays it in the console\nso that's basically how the cart\nquantity feature works in the final\nproject first we need a variable to save\nthe quantity and then when we click a\nbutton we're going to update the\nquantity so now let's make the rest of\nthese buttons interactive feel free to\npause the video if you want to try it\nyourself for the plus two button we're\ngoing to add the onclick attribute again\nonclick equals double quote\nand inside we're going to increase the\ncart quantity by two so cart quantity\nand then we'll just make it equal to\nitself plus two and\nsemicolon and again we're going to\ndisplay the updated quantity in the\nconsole so we can create a new line and\njust copy this code so select it right\nclick\ncopy and here right click and\npaste let's save and click plus two a\nfew times and we can see that it adds\ntwo to the card quantity and displays it\nin the\nconsole for the plus three button we'll\ndo the\nsame let's type an onclick\nattribute click equals double\nquotes and here we're going to increase\nthe card quantity by three three so cart\nquantity equals\nitself plus 3 and\nsemicolon and we're going to display\nthis in the console again so we'll\nselect this right click copy and here\nrightclick and paste let's save again\nand try it out to make sure it works so+\nthree +\nthree and finally let's do the reset\ncard\nbutton so we'll add the onclick\nattribute again on click equals double\nquotes and inside the double quotes\nwe're going to do something a little\ndifferent this time instead of\nincreasing the cart quantity we'll set\nit back to\nzero to do this we can just reassign the\ncart quantity variable so cart\nquantity and just make it equal to Z and\nsemicolon now if we go back to\nsuperimple\ndodev and try out this reset cart\nbutton you'll notice that it displays\ntwo messages the first message is cart\nwas reset so we're going to display that\nmessage in our code\nfirst\nconsole.log and the string cart was\nreset\nand the second message is the same\nmessage as the other buttons so we can\njust select\nthis and then right click\ncopy and then here right click and\npaste and now let's save and go back to\nour Tab and give this a\ntry so the cart quantity starts at zero\nwhen we press add to cart increase in es\nby one this increases by two this\nincreases by three and when we click\nreset cart it'll display cart was reset\nand reset the cart quantity back to\nzero and that's it we just created a\nsimple version of the cart quantity\nfeature of our final project using\neverything that we learned in this\ncourse so\nfar now we're going to learn some\nshortcuts for reassigning\nvariables so if we look at this line of\ncode here we're increasing the value of\nthis variable by two and then saving it\nback well there's actually a shortcut\nfor this and that shortcut is cart\nquantity plus equal 2 and\nsemicolon so this does the same thing as\nthe line above but it's just shorter the\nplus means we're going to add two to\ncart quantity\nand equals means we're going to save\nthat result back to card quantity so we\ncan actually delete this\nline and the code will work the same way\nif we\nsave and try it\nout it will still add a two and then\nsave it back in card\nquantity let's scroll up and practice by\nusing this shortcut for card quantity +\none so instead of this line we can type\ncart\nquantity plus equal 1 and\nsemicolon so it turns out that in\nprogramming plus equals 1 is so common\nthat we have an even shorter shortcut\nfor plus equals 1 and that shortcut is\ncart\nquantity plus plus and\nsemicolon so this is the same thing as\nplus equal 1\nand all three lines do the same\nthing so we can remove these\nlines and the code will work the same\nbecause it's just a\nshortcut if we\nsave so if we click add to\ncart it will add one every\ntime so those are some shortcuts for\nreassigning\nvariables we also have these shortcuts\nfor the other operators like minus\nequals multiply equals divide equals and\nminus minus I'll leave some exercises\nfor these other shortcuts at the end of\nthis\nlesson next we're going to learn some\nbest practices for naming variables so\nif we scroll\ndown notice that our variable cart\nquantity has two words in it cart and\nquantity we learned earlier that we\ncan't have spaces in a variable name so\nif we want to have multiple words we\nhave to combine them together like this\nnow you might be wondering why we wrote\nit this way with a lowercase c and a\ncapital\nQ This is actually a naming convention\ncalled cam case in cam case we combine\nthe words together and capitalize every\nword except the first\nword so for cart quantity we capitalize\nquantity but we keep cart lowercase\nbecause it's the first\nword cam case is actually the standard\nnaming convention for JavaScript all of\nour variable names should use cam\ncase now in programming there are other\nnaming conventions that exist another\none is called Pascal case Pascal case is\nthe same as camel case except we\ncapitalize the first word so for cart\nquantity Pascal case would be Capital\ncart and capital quantity in JavaScript\nthere is one feature where we use Pascal\ncase which we'll learn later in this\ncourse for everything else we use camel\ncase another naming convention is Kebab\ncase here we keep the words lowercase\nand combine them with a dash like cart\nDash\nquantity Kebab case doesn't work in\nJavaScript because the dash is already a\nminus symbol however we use Kebab case\nin HTML and CSS and also in our file\nnames as you can see\nhere and finally we have snake case\nwhere we keep the words lowercase and\ncombine them with underscores snake case\nis used in other languages but it's not\nreally used in\nJavaScript so those are the common\nnaming conventions that we use in\nprogramming now one more thing I want to\nnote is that when we name our variables\ntry to pick a name that is not too short\nor too long for example instead of cart\nquantity we could have named this\nvariable\nC but this name is too short it's hard\nto understand what c means we could also\nuse a name like this quantity of\nproducts in the cart but this name is\ntoo long it's hard to read this in the\ncode so try to have a balance between a\nname that is understandable but not too\nlong like cart\nquantity the last thing we're going to\nlearn in this lesson is there are three\nways to create variables in JavaScript\nlet's go back to our variables. HTML\nfile and we're going to learn those\nthree\nways so the first way is to use let\nwhich we already learned the second way\nto create a variable is to use the word\nconst so at the bottom we can type const\nspace and then a variable name like\nvariable 2 and make it equal to\nthree so const creates a variable just\nlike let except we can't change its\nvalue later this value stays constant\nthat's why it's called const if we try\nto change its value like variable 2 = 5\nand then and we save this and we open\nthis file in the browser by right\nclicking and then open with live\nserver and then open the console so\nrightclick\ninspect and then click the\nconsole it will give us an error when we\ntry to change this variable so this\ndoesn't work let's remove this line and\nSave\nso why would we ever use const instead\nof let well const makes our code safer\nand easier to understand when we create\na variable with const we know for sure\nthat this variable will always contain\nthree for let however if we create a\nvariable it's hard to know what value is\ninside this variable because later on we\ncan change this value in our\ncode so in order to keep our code safer\nit's actually a best practice to use\nconst by default and only use let when\nwe know that we need to change the\nvariable so here it's actually best\npractice to use const to create this\ncalculation variable because we're not\nchanging it later same thing for the\nresult\nvariable and the message\nvariable now for variable one we have to\nuse let because we're changing it later\nin this code\nso that's const it creates a variable\nthat can't be changed\nlater finally the Third Way of creating\na variable is to use another word VAR so\nat the bottom we can type VAR space and\nthen a variable name like variable 3 and\nmake it equal to\nthree so VAR creates a variable just\nlike let and this variable can be\nchanged\nlater VAR is actually the original way\nto create variables in JavaScript VAR\nmeans\nvariable however VAR has some issues\nthat we'll learn later in this course\nand because of these issues we don't use\nVAR in new JavaScript code you might see\nVAR in older JavaScript code so it's\nstill useful to know so those are three\nways to create variables in JavaScript\nlet constant and VAR we use const by\ndefault and if we have to change a\nvariable then use\nlet so one more thing we're going to\nlearn is that we can use type of with\nvariables so remember that type of tells\nus what type a value is for example if\nwe\nwrote\nconsole.\nlog type of\nthree and\nsave type of will tell us that three is\na\nnumber well we can actually use type of\nwith a\nvariable so if we change this to\nvariable 2 and\nsave type of will tell us the type of\nvalue inside the variable which is a\nnumber and that's what we see in the\nconsole\nnow let's check the type of this\nvariable message so message contains a\nstring and if we do\nconsole.log type of\nmessage and\nsave this will tell us that the value\ninside the message variable is a string\nso we can use type of to check the type\nof value that is saved inside a variable\nand that's the end of this lesson in\nthis lesson we learned about variables\nwhich are a way to save values and use\nthem later we learned how to reassign a\nvariable we created the cart quantity\nfeature of the final project we learned\nsome shortcuts for reassigning a\nvariable we learned some naming\nconventions and best practices for\nvariable names and we learned learned\nthree ways to create a variable let\nconst and\nVAR here are some exercises to help you\npractice using variables\nin this lesson we're going to learn two\nmore features of JavaScript called\nbooleans and if statements and we're\ngoing to use these features to build\nthis rock paper scissors\nproject let's start by creating a new\nHTML file for this lesson we're going to\ngo to our code editor and click this\nicon to show our files and then click\nthis icon to create a new file we're\ngoing to name this file\n06-\nbooleans\nHTML and press\nenter let's open variables.\nHTML and we're going to copy all this\ncode into our new file let's select the\ncode using control a on Windows or\ncommand a on Mac and then\nrightclick\ncopy and in\nhere rightclick and\npaste let's close this for now and\nprepare this file for this lesson so\nwe'll scroll to the top and change this\nto\nbooleans and then remove all the\nJavaScript code but keep the script\nelement\nnow let's\nsave and open this file in live server\nby right clicking and then open with\nlive\nserver and we can close the previous\ntabs as well as the previous code for\nnow we'll start by learning what are\nbooleans so far in this course we learn\ntwo types of values in JavaScript\nnumbers and strings booleans are another\ntype of value in JavaScript but booleans\nare special because there are only two\nBoolean values true and\nfalse let's click in the script element\nand type true press enter and type\nfalse so these are the only two Boolean\nvalues that exist true and false so\nwhat's the purpose of Boolean values a\nBoolean value represents whether\nsomething is true or\nfalse for example in JavaScript we can\ncompare two numbers let's create some\nnew lines and type the code 3 less than\n5 so this code checks whether the number\nthree is less than five and of course\nthis is true so if we console.log this\ncode console.log\nand\nsave and then go to our website and open\nthe console rightclick\ninspect and\nconsole it will show us that the result\nof this code is the Boolean value\ntrue let's try another\nexample let's delete this less than\nsymbol and replace it with a greater\nthan symbol so now this code checks\nwhether three is greater than five\nand we know that three is not greater\nthan five so if we\nsave the computer will tell us that the\nresult of this comparison is the Boolean\nvalue false so as you can see a Boolean\nvalue represents whether something is\ntrue or\nfalse now let's learn the syntax rules\nfor booleans to create a Boolean we just\ntype true or false note that we don't\nsurround these with quotes like this if\nwe surround them with quotes this is now\na string not a\nBoolean we can use type of to check this\nso at the front we can type\nconsole.log type of\ntrue if we\nsave this will tell us that this is a\nstring now if we remove the\nquotes and Save\nthis will tell us that this is now a\nBoolean so when creating a Boolean don't\nput quotes around true or\nfalse let's\nsave now one way to create a Boolean is\nto compare two numbers for example 3\ngreater than 5 so this greater than\nsymbol is called a comparison operator\nand there are many other comparison\noperators we can use\nwe saw less than earlier and we also\nhave greater than or equal to less than\nor equal to Triple equals which checks\nif two values are equal to each other\nand exclamation double equals which\nchecks if two values are not equal to\neach other now JavaScript is a little\nspecial because it has two ways to check\nif two values are equal triple equals\nand double equals the difference is that\ndouble equals tries to convert both\nvalues into the same type for example in\nour code let's create some new lines and\nconsole.\nlog and let's check if the number five\nis equal to the string\n5. if we\nsave it will tell us that these two\nvalues are equal to each other even\nthough one of of them is a number and\nthe other is a string and that's because\nthe double equals converts both values\ninto the same type so converts both of\nthese into the number five and then\nCompares them so that's why they are\nequal however this is not a good idea\nbecause this value is a number and this\nvalue is a string it's a piece of text\nso they shouldn't really be equal to\neach other that's why in JavaScript we\nalways use the triple equals to check if\ntwo values are the same so that we avoid\nthe conversion behavior of double equals\nso if we\nsave now it will tell us that these two\nvalues are not equal to each other\nbecause one value is a number and the\nother value is a\nstring so this rule also applies to not\nequal to in JavaScript we always use\nexclamation double equals instead of\nexclamation equals to avoid the\nconversion\nBehavior All right so those are\ncomparison operators in the order of\noperations comparison operators have a\nlower priority than math so if we did\nsomething like 5 and then minus\n5 this would calculate 5 - 5 first which\nis zero and then compare the two numbers\nso three is now greater than zero so if\nwe\nsave the first comparison will now be\ntrue so comparison operators have a\nlower priority than math\noperators now that we know what Boolean\nvalues are we're going to combine them\nwith a really useful feature called if\nstatements an if statement lets us write\nmultiple groups of code and then decide\nwhich code to run Let's do an example\nand create our first if statement we're\ngoing to go to the the\nbottom and create some new\nlines and type if and Open Bracket Clos\nbracket and open curly bracket closed\ncurly\nbracket between these round brackets\nwe're going to put a Boolean value like\ntrue and in between the curly brackets\nwe're going to put some code to run for\nexample console.log\nhello so the way that an if statement\nworks is that if this Boolean value is\ntrue then we're going to run the code in\nthe curly brackets if this Boolean value\nis false then we're not going to run the\ncode if we\nsave the value between the brackets is\ntrue so we're going to run this code and\ndisplay\nhello now if we change this to false and\nsave it will not run this\ncode so an if statement lets us decide\nwhether or not to run some code based on\nthis Boolean\nvalue now if statements have another\nuseful feature called\nelse let's go to the end of this if\nstatement and\ntype\nelse open curly bracket close curly\nbracket and then inside these curly\nbrackets we're going to put some\ndifferent code like\nconsole.log\nelse the way else works is if this\nBoolean value is true the computer will\nrun this code otherwise we will run the\ncode inside\nelse let's give it a try we'll change\nthis Boolean value to true and\nsave and because it is true it will run\nthis code\nand display\nhello now if this Boolean value is false\nand\nsave because it is false it will not run\nthis code and it will run the code\ninside else and display\nelse so using IF and else we can write\ntwo groups of code and then decide which\ncode to\nrun now let's do a practical example\nwe're going to write some code to check\nif someone is old enough to\ndrive let's go to the bottom and create\nsome new\nlines and we're going to type if\nbrackets and curly\nbrackets and inside here we're going to\ncompare two numbers the first number is\na person's age let's pretend we have a\nperson who is 30 years old so we're\ngoing to type\n30 then we're going to check if this age\nis greater than or equal to the legal\ndriving age Let's Pretend the legal\ndriving age is\n16 notice that between the brackets we\ndon't have to just put a Boolean value\nwe can put any code that results in a\nBoolean\nvalue so this comparison results in the\nBoolean value true that means the\ncomputer will run the code between the\ncurly brackets so in here let's type\nconsole\n.\nlog you can\ndrive now if this is not true let's run\nsome different code at the bottom we'll\ntype\nelse and curly brackets and then inside\nthese brackets we'll type\nconsole.log you canot drive\nnow let's\nsave and it will tell me that this\nperson who is 30 years old can\ndrive if we go back and change this to a\nperson that is 15 years old and\nsave this comparison will result in\nfalse so it will display you cannot\ndrive so that's how we use if statements\nwe can write multiple groups of code for\ndifferent situations and then decide\nwhich Cod code to\nrun now let's learn the syntax rules for\nif statements to create an if statement\nwe type if and then round brackets with\na Boolean value inside this is called\nthe condition if this condition is true\nwe will run the code inside the curly\nbrackets we can also add an else\nstatement this code will run if the\ncondition is false the else statement is\noptional we don't have to have\none so these curly brackets and the code\ninside these are called branches because\nit's like a tree branch the code is\nsplitting off into two directions and we\neither run this code or we run this\ncode one more thing to know is in a\nbranch if we only have one line of code\nthe curly brackets are actually optional\nso we can delete these and the code will\nstill work\nhowever if we have more than one line of\ncode in this Branch for example if we\nadd another line\nconsole.log\ncongrats now this branch has two lines\nof code so the curly brackets are\nmandatory so we have to add them\nback now we're going to learn another\nfeature of if statements which is we can\nhave more than one condition for example\nwe're going to go to the end of this if\nbranch and type else if and then\nbrackets and curly\nbrackets else if lets us add another\nBranch to our if\nstatement between these round brackets\nwe can add another condition for example\nif a person is almost old enough to\ndrive let's display a different message\nso inside this condition\nlet's check if this person's age which\nis 15 is greater than or equal to 14 so\nwe're checking if they are almost old\nenough to drive and now inside the curly\nbrackets we're going to display a\ndifferent\nmessage\nconsole.log almost\nthere so the way this works is that the\nif statement checks the condition one by\none first it checks if this is true if\nit is it will run this Branch then it\nchecks if this is true if it is it will\nrun this branch and if none of the\nconditions are true it will run the else\nBranch so here this condition is false\nso we're not going to run this code but\nnow the second condition is true so\nwe're going to run this code if we\nsave we display almost there\nin the\nconsole so using else if branches we can\nadd as many conditions as we want to an\nif\nstatement the next thing we're going to\nlearn is that we can combine if\nstatements with variables from the\nprevious\nlesson for example here we wrote the\nperson's age two times so we can\nactually save this age in a variable and\nthen reuse that\nvalue so above the if statement\nlet's create a variable using const and\nlet's name this variable H and we'll\nmake it equal to\n15 remember the best practice for\ncreating a variable is to use const by\ndefault and only use let if we're going\nto change this value\nlater and now that we saved this number\nin a variable we can use the variable\ninside the if statement so we'll replace\n15 with age and here as well with\nage so this will take whatever value is\ninside the variable and substitute it\ninto the\ncode if we\nsave the if statement works the same way\nas before and we run this\nline okay now we're ready to use\nbooleans and if statements to do a\nproject we're going to build a rock\npaper scissors gate G first let's take a\nlook at the project we're going to go to\nour browser and at the top create a new\ntab and we're going to type here\nsuperimple dodev SL\nprojects SL\nbooleans and press\nenter here we can see a simple version\nof a rock paper scissors game and if we\nclick this link it will take us to the\nfinal version of this game so in this\ngame we can pick a\nmove and then the computer will pick a\nrandom move and it will show us the\nresult and we also have a score of how\nmany times we won lost and tied so we're\ngoing to build this as we go through the\ncourse but for now let's go\nback and we're going to start by\nbuilding this simple version of the game\nso how this simple version works is we\nclick one of these buttons to pick a\nmove so let's pick\nRock then the computer will randomly\npick a move in this case it's paper but\nfor you it might be different and it\nwill compare the two moves and display\nthe results in this\npopup so the rules of rock paper\nscissors are rock beats scissors paper\nbeats Rock and scissors beats\npaper let's press okay and we'll get\nstarted on this\nproject first we'll create a new HTML\nfile just for this project let's go to\nour code editor and click here and\ncreate a new file and we're going to\nname this file\n06-\nrock-paper-scissors HTML and press\nenter next let's copy all the code from\nbooleans HTML into this new file so\nwe'll open this again and then control a\nor command a to select all the code and\nthen right click\ncopy and in here right click and\npaste let's close this and prepare this\nfile so we'll change this to rock\npaper\nscissors and remove all of the\nJavaScript code that we had\nbefore finally let's save and open this\nfile in the browser by right clicking\nand then open with live\nserver let's take a look at the project\nagain so we're going to start by\ncreating the text first because this\ntext is in the final version of the\nproject so in our\nHTML we're going to create a paragraph\nelement for this text so less than P\ngreater than and the closing tag less\nthan /p greater than inside our\nparagraph we're going to have the text\nrock paper\nscissors next let's create the\nbuttons so we'll go to our\nHTML and create a\nbutton and inside this first button\nwe'll have the text\nRock Let's create another\nbutton this one will be\npaper and we'll create the last\nbutton this one will be\nscissors now let's save and check our\nnew\ntab and now we created all the elements\nthat we\nneed next let's make these elements\ninteractive with Javas JavaScript so\nwhen writing JavaScript a good strategy\nis to think about what steps we need to\ndo and then convert those steps into\ncode so here when we click a button the\nfirst step is the computer will randomly\nselect a move and then we're going to\ncompare the moves to get the result and\nfinally we'll display the result in a\npopup by the way this is called an\nalgorithm an algorithm is a set of steps\nto complete delete a task or to solve a\nproblem now that we know what steps we\nneed to do we're going to convert these\nsteps or this algorithm into\ncode first we're going to run some\nJavaScript when we click these buttons\nso let's use the onclick attribute again\nwe'll go to the opening tag of the\nbutton and type\nonclick equals double\nquotes and then inside these double\nquotes we can add our JavaScript\nso now we have to figure out how to\nrandomly select a move for the computer\nto do this we need to learn a new piece\nof JavaScript\ncode so here we're going to type capital\nm\nmath.random Open Bracket close bracket\nmath.random generates a random number\nbetween 0o and 1 so if we console.log\nthis console\nlog and\nsave and click this\nbutton and then check in our console by\nright-clicking\ninspect and the\nconsole it will display a random number\nbetween Z and 1 if we click this button\nagain it will generate a different\nrandom number so every time we run MTH\nrandom it generates a different random\nnumber between 0 and one now to be more\nprecise it actually generates a number\ngreater than equal to zero and less than\none now let's save this random number in\na variable so we can use it later so\nwe'll replace the\nconsole.log with\nconst and then a variable name let's\njust name it random capital N number\nand then\nequals so we saved this random number\ninside this\nvariable next we need a way to convert\nthis random number into a move like rock\npaper or scissors to do this let's\nimagine the space between 0 and 1 and\nthen divide the space into three equal\nparts each part represents a move if we\ngenerate a random number and it's\nbetween 0 and 1/3 the move will be Rock\nif it's between 1/3 and 2/3 the move\nwill be paper and if it's between 2/3\nand one the move will be scissors this\nis how we can convert the random number\ninto a move and this will give the\ncomputer an equal chance of picking rock\npaper or\nscissors now let's convert these steps\ninto code and an if statement is the\nperfect solution for this this already\nlooks like an if statement so in our\nonclick attribute let's add some new\nlines and type if brackets and curly\nbrackets for this first condition we're\ngoing to check if the random number is\nbetween 0 and 1/3 so let's check if\nrandom number is greater than or equal\nto\nzero but in this case we also need to\ncheck that random number is less than\n1/3 because we're checking if the number\nis between 0 and 1/3 but how do we do\nthis how do we check that two\ncomparisons are both true to do this\nwe're going to learn another type of\noperator in JavaScript called logical\noperators logical operators let us\ncombine Boolean values which is what we\nneed to do here let's go back into\nbooleans\nHTML and we're going to learn logical\noperators so first let's open the tab\nfor this\nfile and we're going to comment out all\nthe previous code so our console doesn't\nget too messy\nslashstar and then at the\nbottom star\nslash now let's create some new\nlines and the first logical operator\nwe're going to learn is called the and\noperator\nlet's type\nconsole. log a Boolean value\ntrue and another Boolean value\ntrue so this is the and operator and it\nchecks if two Boolean values are both\ntrue so it checks if the left side is\ntrue and the right side is true that's\nwhy it's called the and operator so here\nthe left side is true and the right side\nis also true so the and operator will\nresult in true if we\nsave this displays true now if one of\nthese sides is false for example if we\nchange this to\nfalse now let's check is the left side\nand the right side both true in this\ncase no so and will now result in false\nif we save it now displays false\nso that's the logical and operator it\nchecks if the left side is true and the\nright side is also true so this is\nexactly what we need for our project for\nexample let's create a new line and type\nconsole.log and let's say that we\ngenerated a random number like\n0.2 and we want to check if it's between\n0 and 1/3 so we can do\n0.2 is greater than or equal to 0 and\nwe're also going to check if\n0.2 is less than\n1/3 so we're using the logical and\noperator to check if the left side is\ntrue and the right side is also true so\nin this example both sides are true 0.2\nis between 0 and 1/3 so if we save\nthis whole thing will display true now\nin the order of operations logical\noperators like and have a lower priority\nthan math and comparisons so in this\nexample it will calculate the math first\nand then it will calculate the\ncomparison on the left and then the\ncomparison on the right and then at the\nend the and operator checks if both\nsides result in\ntrue now let's use the and operator in\nour project let's go back to the file\nfor our\nproject and then inside this first\ncondition we're going to check if the\nrandom number is greater than or equal\nto zero and at the same time is the\nrandom number less than 1/3 so this is\nhow we check if a number is between 0\nand\n1/3 in this case the computer will pick\nRock so between the curly brackets let's\njust type con\ncons. log\nRock let's get some practice and create\nthe other two branches for picking paper\nand scissors feel free to pause this\nvideo if you want to try it yourself\nfirst so here we're going to type else\nif to add another branch and then\nbrackets and curly brackets and in this\ncondition we're going to check if random\nnumber is greater than or equal to\n1/3\nand\nrandom number is less than\n2/3 so if this random number is between\n1/3 and 2/3 inside here we're going to\nconsole do log\npaper and finally let's create another\nBranch using else\nif random\nnumber greater than or equal to\n2/3 and random number less than\n1 and\nconsole.log\nscissors if we\nsave and then go back to our rock paper\nscissors tab\nand then click the rock button a few\ntimes it will pick some random moves for\nthe\ncomputer so that's how we generate the\ncomputer's move one thing I want to\npoint out is that I use the less than\ncomparison instead of less than or equal\nto I just did this so that the\ncomparisons don't\noverlap before we continue in the\nproject we're going to learn two other\nlogical operators we can use let's go\nback to booleans\nHTML and let's also open the tab for\nthis\nfile the next logical operator is called\nthe or operator for example let's type\nsome new lines and type\nconsole.log true or\nfalse so this is the logical or operator\nit checks if at least one side is true\nso it checks if the left side is true or\nthe right side is true that's why it's\ncalled the or\noperator so here one of these sides is\ntrue so the or operator will result in\ntrue if we\nsave this displays\ntrue if both sides are true it will also\nresult in true because at least one side\nis\ntrue the last logical operator we're\ngoing to learn is called the not\noperator for example let's create a new\nline and type\nconsole. log exclamation\ntrue so the exclamation is called the\nnot operator the not operator only uses\none Boolean value and it flips it into\nthe opposite value so if this value is\ntrue the not operator will flip it into\nfalse so if we\nsave this will result in false now if\nyou think about it if we say that\nsomething is not true that's the same\nthing as saying that it is false so\nthat's why this is called the not\noperator now if we change the value to\nfalse again the not operator will flip\nthis into true so if we\nsave this will now result in true\nso those are the logical or and not\noperators we don't need to use these in\nour project right now but I'll leave\nsome exercises for these at the end of\nthis lesson now let's go back and\ncontinue the project let's open the code\nand open the\ntab the next step is to compare the\ncomputer's move to our move which is\nRock so first let's save the computer's\nmove in a variable so we can compare it\nlater so instead of\nconsole.log we're going to create a\nvariable with\nconst\ncomputer capital M move and make it\nequal to the string\nRock and we'll do the same thing\nhere const computer move equals\npaper and\nhere const comp futter move equals\nscissors and now at the bottom let's\nconsole.log the computer move variable\nto make sure that it\nworked if we save and then click our\nRock\nbutton unfortunately it gives us an\nerror telling us that computer move is\nnot defined even though we created it\nright here so what is happening here if\nstatements have a special feature they\ncreate something called a scope a scope\nlimits where a variable exists basically\nwhenever we have these curly brackets\nlike this any variable we create inside\nthe curly brackets will only exist\ninside the curly brackets and we can't\nuse these variables outside the curly\nbrackets so this is called a scope\nScopes are a feature of many programming\nlanguages and they help us avoid naming\nconflicts for example if I create a\nvariable here called random number\nequals\n0.5 and this didn't create a scope so if\nI delete these curly\nbrackets this variable name will now\nconflict with the variable name up here\nbecause we can't have two variables with\nthe same name so you can imagine that if\nwe didn't have scope and we had hundreds\nor even thousands of lines of code we\nwould quickly start to run out of\nvariable names so by creating a new\nscope here all the variable names inside\nthe scope only exist between the curly\nbrackets and it won't affect anything\noutside in the code so Scopes help us\navoid naming\nconflicts okay so I'll delete this\nexample and we'll learn how to access\nthis variable\noutside of this scope so to access this\nvariable outside of the if statement we\nhave to create this variable outside of\nthe if statement so above\nhere we can create this\nvariable\nconst\ncomputer move and let's just make it\nequal to the empty string for\nnow so this variable was not created\ninside any curly brackets so it's\naccessible from all of this code inside\nthe onclick attribute including inside\nthe if\nstatement and then inside the if\nstatement instead of creating a new\nvariable we're just going to save the\nmove inside this variable up here\nbecause we can access this variable\nanywhere else in the\ncode so instead of using const we're\njust going to reassign computer move and\nwe're going to move it here as well and\nhere as\nwell and remember when we reassign a\nvariable we have to switch from const to\nlet and now if we\nsave and then click the rock\nbutton we're able to console.log\ncomputer move because computer move is\nno longer inside this scope it's up here\nso we can access it in this line of code\nso that's how scope Works any variable\nthat we create inside the curly brackets\nwill only exist inside the curly\nbrackets so remember in the previous\nlesson we learned a third way of\ncreating variables called VAR the issue\nwith VAR is that it doesn't really\nfollow the rules of scope for example\nhere if we create a variable with VAR\nlike VAR and\nrandom number\nequals\n0.5 this variable will conflict with the\nvariable up here with the same name even\nthough it's inside a scope so that's why\nwe don't use VAR anymore and we just use\nconst and let because of VAR doesn't\nreally follow the rules of scope so we\ncan remove this for now and move on to\nthe next\nstep so we generated a random move for\nthe computer\nnow we have to compare our move which is\nRock to the computer's move to get the\nresult and see who wins to do that we'll\nuse another if statement so at the\nbottom here let's type if and then\nbrackets and curly\nbrackets and then inside this condition\nlet's check if the\ncomputer move is equal to rock\nso remember in JavaScript we always use\ntriple equals instead of double equals\nto avoid the conversion\nbehavior and now if the computer's move\nis rock and our move is Rock then inside\nthe curly brackets the result is going\nto be a\ntie and let's save the string in a\nvariable so we can use it later again we\nhave the same situation as before we\ndon't want to create the variable inside\nhere because then it only exists in this\nscope between the curly brackets instead\nwe're going to create the variable above\noutside the if statement so we'll use\nlet to create this variable because\nwe're going to reassign it in the if\nstatement let's name this variable\nresult and just make it equal to the\nempty string at the top and then in the\nif statement we'll save the result into\nthis variable\nso\nresult equals\ntie now let's create the other branches\nof this if statement so here we'll add\nelse if brackets and curly\nbrackets and we'll check if the\ncomputer move is equal to paper this\ntime if the computer move is paper and\nwe picked Rock\nthen we lose so the result is equal to\nyou\nlose and finally we'll add another else\nif brackets and curly brackets and we'll\ncheck if the\ncomputer move is equal to\nscissors and if the computer picked\nscissors and we pick Rock the result is\nis that you\nwin so that's how we compare our move to\nthe computer's random move using an if\nstatement the last step is to display\nthis result in the\npopup so at the bottom let's create a\npopup using alert Open Bracket close\nbracket and let's go back to super\nsimple Dev to see the message in the\npopup so we'll click this and in the\npopup it shows our move the computer's\nmove and then the result so we can\nactually just copy\nthis rightclick\ncopy and then in here right click and\npaste so obviously the computer is not\ngoing to pick this move every time and\nthis is not going to be the same result\nevery time instead we want to insert\ncomputer move into here and we want to\ninsert result into here so because we\nwant to insert values we're going to\nturn this into a template string using\nback\nticks and now instead of paper we're\ngoing to insert a value using dollar and\ncurly brackets and we're going to insert\nthe variable\ncomputer\nmove and instead of this text every time\nwe're going to\ninsert the variable\nresult and now if we\nsave and we can click okay to close this\nand go back to our Tab and click the\nrock\nbutton we're going to pick Rock the\ncomputer will pick a random move and it\nwill show us the result in a\npopup so that's how we create this\nsimple version of rock paper scissors in\nour code we did things step by step\nfirst we generated a random number we\nconverted it into a move for the\ncomputer and then we compared our move\nto the computer move and we displayed\nthe result in a\npopup so as you can see when we're\nwriting JavaScript we first figure out\nwhat steps we need to do this is called\nan algorithm and then we convert these\nsteps or this algorithm into\ncode so now now we can actually remove\nthis console.log because we don't need\nit\nanymore and the last step is to make the\nother buttons here interactive so feel\nfree to pause this video if you want to\ntry it yourself\nfirst for the paper button let's add\nsome new lines to make it a little\neasier to read and again we'll add the\nonclick\nattribute and then inside here we can\nactually make a copy of all the\nJavaScript we wrote so we can select all\nof\nthis and then write click\ncopy and then in here right click and\npaste if the formatting doesn't look\nright we can select all of these\nlines and press tab to add indents until\nthe formatting looks good\nthe one thing we have to change here is\nthat now we picked paper so the result\nis going to be different if the computer\npicks Rock and we pick paper that means\nyou\nwin if the computer picks paper now it\nmeans that we tie and if the computer\npicks scissors that means you\nlose and here what will also change up\npick Rock to\npaper and that's\nit the last step is to make the scissors\nbutton interactive so again\nonclick equals double\nquotes and then we'll make a copy of the\ncode so I already have it so just write\nclick and\npaste and then again select the code\nthat we need to fix the formatting for\nand press\nTab and here we pick scissors so if the\ncomputer picks Rock then the result is\nyou lose if the computer picks paper the\nresult is you win and if the computer\nalso picks scissors the result is a\ntie and we'll change you pick Rock to\nscissors\nnow if we save and try out our game if\nwe click Rock we're going to pick Rock\ncomputer picks a random move and it will\nshow us the result here let's press okay\nand try\npaper this also works correctly let's\npress\nokay and click\nscissors and this also works\ncorrectly and that's it we just finished\ncreating a simple version of this rock\nrock paper scissors\ngame in the rest of this lesson we're\ngoing to learn more details about\nbooleans and if\nstatements let's go back to booleans\nHTML and open the tab for this\nfile and let's comment out the previous\ncode using\nslashstar and star slash and create some\nnew\nlines the next thing we're going to\nlearn is called truthy and and falsy\nvalues so if statements don't just work\nwith Boolean values like true and false\nthey actually work with any type of\nvalue including numbers and strings for\nexample let's type if brackets and curly\nbrackets and inside this condition\ninstead of putting a Boolean value we're\ngoing to put a number like five and then\nin inside the curly brackets let's\nconsole.log the string\ntruthy if we\nsave the number five behaves just like\ntrue it causes the if statement to run\nthis code so we call this value a truthy\nvalue because it behaves just like true\nnow let's change this value to a\ndifferent number zero if we say\nthe number zero behaves just like false\nit causes the if statement to not run\nthis code we call this value zero a\nfalsy value because it behaves just like\nfalse so how do we know if a value is\ntruthy or falsy in JavaScript the list\nof falsy values are false the number\nzero the empty string Nan undefined and\nnull\nany value that is not on this list is a\ntruthy\nvalue so why do we use truthy and falsy\nvalues one way we use them is like a\nshortcut in our code for example let's\ncreate a variable at the bottom using\nconst and let's call it cart\nquantity and make it equal to\nfive next let's create an if statement\nif brackets and curly brackets and\ninside the curly brackets let's type\nconsole.log the string cart has\nproducts now let's say that we only want\nto display this message if our cart has\nproducts usually inside this condition\nwe would check if cart quantity\nis greater than zero but now instead of\ndoing this comparison we can actually\njust type cart quantity and it will\nbehave the same way if the card quantity\nis not zero they will both behave like\ntrue if the card quantity is zero they\nwill both behave like false so here the\ncard quantity is five which is a truthy\nvalue if we\nsave this caus the if statement to run\nthis code as you can see instead of\ndoing comparisons we can use truthy and\nfalsey values as\nshortcuts truthy and falsy values also\nwork with logical operators for example\nif we\nconsole.log the not operator and the\nnumber\nzero zero is a falsy value it behaves\njust like false so the not operator will\nflip it into true if we\nsave this will display\ntrue now that we understand truthy and\nfalsy values let's go over the list of\nfalsy values because there are some that\nwe haven't learned yet we already\nlearned false zero and the empty string\nthe next falsy value is Nan which means\nnot a\nnumber we get Nan if we do some invalid\nmath for example at the bottom let's\ntype\nconsole.log the string\ntext divided by the number\nfive so obviously this is not valid math\nif we save JavaScript will tell us that\nthe result of this calculation is not a\nnumber or\nNan the next falsy value is undefined\nundefined represents that something\ndoesn't have a value for example at the\nbottom if we create a variable with\nlet variable one and we don't give it a\nvalue and then we\nconsole. log this\nvariable and we\nsave it will show us that variable one\ncontains the value undefined so\nundefined represents that this variable\ndoesn't have a\nvalue one thing to note with undefined\nis that we can only use this syntax with\nlet we can't use it with\nconst if we really want to use this with\nconst we have to type out equals\nundefined\ndirectly the last faly value is null\nwe'll need some extra knowledge to\nunderstand null so we'll learn about\nnull later in in this\ncourse the last thing we're going to\nlearn in this lesson are some shortcuts\nfor if statements called the Turner\noperator the guard operator and the\ndefault\noperator first let's comment out this\ncode so our console doesn't get too\nmessy SL star and then at the bottom\nstar\nslash and let's scroll down and we'll\nstart by learning the Turner operator\nwe're going to type a Boolean value like\ntrue and question mark another value for\nexample the string\ntruthy and then colon and another value\nlike the string\nfalsy so this is the Turner operator\nthis is similar to an if else statement\nthe first value is like the condition if\nit's truthy the result of this code is a\nvalue after the question mark if the\nfirst value is falsy the result of this\ncode is the value after the colon so you\ncan think of the question mark as the if\nbranch and the colon as the else Branch\nthis is sort of like a shortcut for an\nif statement like\nthis now an advantage of the Turner\noperator over an if statement is that we\ncan save a tary operator in a variable\nso at the front\nwe can do\nconst result\nequals and now if we\nconsole.log the\nresult and\nsave the first value is true so the\nvalue after the question mark gets saved\nin the\nvariable as always we can use truthy and\nfalsy values instead of just true and\nfalse so here if we change the first\nvalue to a falsy value like zero this\nwill cause the value after the colon to\nget saved inside the variable if we\nsave that's exactly what happens so this\nis the turnery operator it's sort of a\nshortcut for an if else statement like\nthis the next shortcut is called the\nguard operator earlier in this lesson we\nlearned the and operator which checks if\ntwo sides are both\ntruthy the and operator has a special\nfeature let's say we have an and\noperator and the left side is\nfalse in this situation we already know\nit's impossible for both sides to be\ntruthy so we don't even need to check\nthe right side so the and operator\nactually stops early and doesn't even\nrun the code on the right this is called\na shortcircuit\nevaluation for example let's go into our\ncode and create some new lines and we'll\ntype\nfalse\nand\nconsole.\nlog\nhello if we\nsave the left side is falsy so the and\noperator stops early or short circuits\nand it doesn't even run the code on the\nright so as you can see we can use the\nvalue on the left to block or guard the\ncode on the right so when we use the and\noperator like this we call it the guard\noperator this is sort of like a shortcut\nfor an if statement like\nthis and just like the Turner operator\nwe can save the guard operator in a\nvariable for example let's create a\nvariable const\nmessage and make it equal to\nfalse and the string\nhello if the first value is falsy the\nguard operator will stop early and the\nresult will be the first value if we\nconsole. log this\nmessage and\nsave the value f false will be saved\ninside this\nvariable now let's change this value to\na truthy value like the number five now\nit will not stop early and it will give\nus the second value as the result if we\nsave the string hello is now saved\ninside this\nvariable this is sort of like a shortcut\nfor an if statement like this so don't\nworry if it's a bit confusing all of\nthese are just shortcuts for an if\nstatement they're sort of like an if\nstatement that we can write on a single\nline the last shortcut is called the\ndefault operator which is similar to the\nguard operator but uses\nor earlier in this lesson we learned the\nor operator which checks if at least one\nside is truthy let's imagine we have an\nor operator and the left side is\ntrue in this situation we already know\nthe result of the or operator because\nthe left side is already truthy we don't\neven need to check the right side so the\nor operator also stops early or short\ncircuits if the first value is truthy\nfor example let's create some new lines\nand let's say that in our final Amazon\nProject we can choose a currency to pay\nfor our order let's create a variable\nwith\nconst currency and make it equal to the\nstring e or\nEuros now let's say that choosing a\ncurrency is optional if we don't choose\na currency we'll use a default value of\nUSD or United States dollars to create a\ndefault value we can go to the end and\ntype or the string\nUSD so here\nthe left side is truthy so the or\noperator will stop early and it will\nresult in the value on the\nleft if we\nconsole. log the\ncurrency and\nsave it will display\nEuros now let's say that we didn't\nchoose a currency because it's optional\nso let's go here and we're going to\nchange this currency to\nundefined now the left side is falsy so\nthe or operator does not short circuit\nit will continue and the result will be\nthe value on the right if we\nsave now the string USD is saved inside\ncurrency as you can see we can use the\nor operator to set a default value so\nwhen we use the or operator like this we\ncall it the default operator\nthe default operator is sort of a\nshortcut for an if statement like\nthis so don't worry remember that\neverything that we learned in this last\nsection are basically some shortcuts for\nif statements we don't have to use them\nbut they can save us some\ntyping and that's the end of this lesson\nin this lesson we learned about booleans\nand if statements Boolean values\nrepresent whether something is true or\nfalse we learned how to use if\nstatements to make decisions in our code\nwe learn how to use comparison and\nlogical operators we learned about\nalgorithms and created a simple version\nof rock paper scissors we learned about\ntruthy and falsey values and we learned\nsome shortcuts for if statements the\nturnery operator the guard operator and\nthe default operator here are some\nexercises to help you practice booleans\nand if\nstatements in this lesson we're going to\nlearn the next feature of JavaScript\ncalled functions and we're going to use\nfunctions to improve our rock paper\nscissors project first let's create a\nnew file for this lesson we'll go to our\ncode\neditor and create a new\nfile and let's name this file\n07-\nfunctions.\nHTML and press enter\nnext let's copy booleans HTML to\nfunctions. HTML so we'll click this file\nand then select all this code using\ncontrol a or command\na and then right click\ncopy and in\nhere rightclick and\npaste and we'll hide our files and\nprepare this file for this lesson\nso at the top we'll change the title to\nfunctions and we'll remove all the code\nin the script\nelement and let's\nsave and we'll open this file in live\nserver by\nright-clicking open with live\nserver and we're going to open the\nconsole as well so right\nclick inspect\nand then click the\nconsole and finally we can close the\nprevious\ntabs as well as the previous\ncode okay now we're ready to learn\nfunctions first of all what is a\nfunction a function lets us reuse code\nlet's create our first function we're\ngoing to go to the script element\nand type the word\nfunction and\nspace so this creates a new function and\nthen we're going to give a name to our\nfunction we can name it almost anything\nwe want but for now let's just name it\nfunction one and then we're going to\ntype round brackets and curly\nbrackets then inside these curly\nbrackets we're going to create a new\nline\nand we're going to type some code so\nconsole.log the string\nhello and we'll also type\nconsole.log 2 +\n2 and\nsave so this creates a function now\nlet's learn how to use this function\nwe're going to type at the bottom\nthe function name so\nfunction one and then Open Bracket close\nbracket and\nsemicolon when we type the function name\nwith brackets this will run the code\ninside the function if we\nsave notice that it runs the code inside\nthe function and displays the two lines\nin the\nconsole so why do we use functions a\nfunction lets us reuse code so if we\nwanted to run both these lines of code\nagain all we have to do is type the\nfunction name again with brackets so\nfunction one and brackets again if we\nsave this will run the code inside the\nfunction two times and we can reuse this\ncode as many times as we want by typing\nthe function name with brackets so\nthat's what a function is it lets us\nreuse code now let's learn the syntax\nrules for functions the word function\ncreates a new\nfunction and then we choose a name for\nour function the rules for function\nnames are the same as variable names we\ncan't use special words like function we\ncan't start with a number and we can't\nuse special characters although dollar\nsign and underscore are allowed and just\nlike variable names the best practice is\nto use camo case for function\nnames and inside these curly brackets we\nput the code that we want to run when we\nuse the function this is called the\nfunction body now one very important\nthing to remember is that this code only\ncreates a function it doesn't run the\ncode in the function or do anything else\nin order to actually run the code we\nhave to use the function like below by\ntyping the function name with\nbrackets this is known as calling the\nfunction it's also known as running the\nfunction or executing the\nfunction now that we learned the syntax\nrules for functions let's do a practical\nexample we're going to use functions to\nimprove the code of our rock paper\nscissors project first let's click here\nto show our files and we're actually\ngoing to make a copy of the project just\nfor this lesson so we're going to\nrightclick this\nfile\ncopy and then at the bottom right click\nand\npaste and we're going to rename this\nfile so rightclick\nrename remove copy at the end and then\nat the beginning we'll change this to\n07 and press enter\nnext we're going to open this file in\nlive server by right clicking and then\nopen with live\nserver and let's also open the console\non this page we'll right click\ninspect and then click the\nconsole all right now if we look at the\ncode for generating a computer move\nyou'll notice that this code is the same\nfor all three\nbuttons so this is a perfect situation\nto use a function because a function\nlets us reuse code so let's scroll down\nto the script element and we're going to\nmake a function here so let's type\nfunction and then a function name let's\nname this function\npick\ncomputer move and then brackets and\ncurly brackets so one recommendation for\nfunction names is to use a verb or an\naction in the name such as\npick so next we're going to move all the\ncode for picking a computer move into\nour new function so let's create a new\nline here and we'll scroll up to the\nscissors button because it's the closest\none and we'll select all of this code\nfor picking a computer move and then\nrightclick\ncut and inside the\nfunction right click and\npaste if we need to fix the formatting\nwe can select these lines and press tab\nto add\nindents so the reason we created this\nfunction in the script element is\nbecause remember that the script element\nruns when the page is loaded so we want\nto make sure that we create the function\nfirst and then we use it in the buttons\nafter now remember this code just\ncreates a function it doesn't actually\nrun the code inside to run the code\ninside we're going to call this function\nso let's scroll up to the scissors\nbutton and we're going to call this\nfunction by typing the function name\npick computer move Open Bracket close\nbracket ET and\nsemicolon if we\nsave and then click the scissors\nbutton unfortunately it now gives us an\nerror saying computer move is not\ndefined now this might seem weird\nbecause down here we actually create the\ncomputer move so what's going on the\nreason this happens is because functions\ncreate a scope in the previous lesson we\nlearned about Scopes which limit weight\nwhere a variable exists we learned about\nif statements and that if statements\ncreate a scope between the curly\nbrackets this means that any variable\ncreated between the curly brackets only\nexist between the curly\nbrackets functions also create a scope\nany variable that is created between\nthese curly brackets only exists inside\nthe curly brackets and we can't use it\noutside the curly Brack ETS like we do\nhere so that's why we're getting this\nerror so how do we solve this problem\nremember that with if statements we\nsolve this by creating the variable\noutside of the if statement like this we\ncan use a similar solution with\nfunctions to make this variable exist\noutside the function we just have to\ncreate it outside the function so let's\nselect this code we're going to\nrightclick\nand\ncut and remove these lines and then\noutside the function we're going to\nrightclick and\npaste so now this variable is no longer\ninside the function's scope and it can\nbe used anywhere else in the code so\nvariables like this that can be accessed\nanywhere are called Global\nvariables if we save\nand now click the scissors\nbutton everything is working again\nbecause this code above can now access\nthis\nvariable now let's press\nokay and let's use this function to\nreuse this code so we'll scroll up to\nthe paper\nbutton and now instead of all this code\nagain we're just going to remove it and\ncall the function pick\ncomputer move Open Bracket close bracket\nsemicolon and also with the rock button\nwe'll select all this\ncode and remove it and just call the\nfunction\npick\ncomputer move brackets and\nsemicolon now if we\nsave and click the rock\nbutton it works just like before\nwe'll press okay and click the paper\nbutton it also works just like before so\nas you can see functions let us reuse\ncode and they make our code a lot\ncleaner by removing all the duplication\nthat we had another benefit of removing\nduplication is that before if we ever\nwanted to update the code for picking a\ncomputer move we had to update it in\nthree places in each of the buttons but\nnow if we scroll\ndown we only have to update it in one\nplace inside this function so functions\nalso make our code easier to update in\nthe\nfuture next we're going to learn a\nfeature of functions called a return\nstatement a return statement lets us get\na value out of a function so at the end\nof this function let's type some new\nlines and we're going to type type\nreturn and then a value like the number\nfive and\nsemicolon now whenever we call this\nfunction it will result in a value the\nnumber five so up\nhere when we call this function this\nwill result in the number five so we can\nactually console.log this console.log\nand then\nsave and click the scissors\nbutton and it will show us that calling\nthe function now results in the number\nfive and we display it in the\nconsole so that's how a return statement\nworks it lets us get a value out of this\nfunction let's press okay and do another\nexample we'll scroll\ndown and this time let's change CH this\nvalue to the string\nRock now whenever we call this function\nit will result in the string Rock if we\nsave and then click\nscissors and scroll up\nhere calling this function now results\nin the string Rock and then we display\nit in the\nconsole so now let's press okay and\nwe'll learn the syntax rules for a\nreturn\nstatement so we just have to type the\nword return and then a value and it will\nget this value out of the function now\ninstead of just a value we can also\nreturn a calculation or a variable or\nanything that results in a\nvalue so this is known as returning a\nvalue from a function and this value is\nknown as the return value we also Al\ndon't have to return anything from a\nfunction if a function doesn't have a\nreturn statement or we return without a\nvalue like this this will return the\nvalue\nundefined so if we\nsave and then click scissors\nagain the function will return\nundefined and lastly when we use a\nreturn statement it ends the function\nimmediately so after the the return\nstatement if we type\nconsole.log the string\nafter and press okay here and save this\nfile and then click the scissors\nbutton notice that it doesn't run this\ncode and that's because once we return\nthe code returns back to where we called\nthe function that's why it's called a\nreturn statement so it's not going to\nrun anything after the return so we can\nremove this\ncode and press\nokay so now that we understand return\nstatements we're going to learn a better\nway of getting the computer move out of\nthis function so first let's actually\nmove this variable back into the\nfunction so we right click and\ncut and then in\nhere right right click and\npaste and delete these\nlines so now we're back to the original\nproblem how do we access computer move\noutside of the function so another\nsolution is to return this variable\nbecause remember a return statement lets\nus get a value out of the function so\ndown\nhere we're going to return the\ncomputer\nmove so this will take whatever value is\nsaved inside computer move which is one\nof these values and return it out of the\nfunction if we\nsave and then click these scissors\nbutton we were able to get the move\nscissors outside of this function so\nwhat happened here is that we return\nthis move and then up\nhere we took the move and displayed it\nin the console to get\nscissors so that's another way of\ngetting the computer move out of a\nfunction using the return\nstatement however now we're back to this\nproblem with computer move not being\ndefined because we moved it back into\nthe function's scope so let's scroll up\nand remember that this return value is\njust a value we can use it like any\nother value for example we can\nconsole.log it or we can also save this\nin a variable so let's do that right now\nwe're going to remove\nthis and create a new variable with\nconst and let's just name this variable\ncomputer move to match what we use down\nhere and we use equals to save the\nreturn value inside inside this\nvariable so note that even though we use\ncomputer move here as well as here\nthere're different variables this one is\ninside the function's scope so it\nprevents it from conflicting with\nvariables outside the function's scope\nthat's one of the main benefits of\nScopes so now that we saved the return\nvalue into this variable and we're using\nthis variable down here the code should\nnow work work if we\nsave and click\nscissors everything is back to\nnormal and let's press okay so don't\nworry functions can be a little\nconfusing at first because the code is\nno longer simply going from top to\nbottom it sort of jumps around a little\nbit so let's go through this step by\nstep when we click this button we're\ngoing to run this function so the code\nis going going to jump down here and\nthen it's going to run all of this code\nfrom top to\nbottom at the end we're going to return\nwhatever is inside computer move back to\nwhere we called this function so we're\ngoing to return all the way back here\nand then we're going to save that return\nvalue into a new variable computer move\nand then use computer move down\nhere so following the code line by line\nlike this is called tracing the code\nit's a useful technique to understand\nexactly what the code is\ndoing now let's compare the two\nsolutions that we used a global variable\nand returning a\nvariable so returning a variable like\nthis is actually preferred over using a\nglobal variable and that's because a\nscope can help us prevent naming\nconflicts so all the variables inside\nhere will not conflict with anything\noutside the scope so generally it's a\nbest practice to keep things inside a\nscope if we\ncan now let's move on and use this\nfunction in the other buttons feel free\nto pause the video if you want to try it\nyourself\nfirst so we'll scroll up to the paper\nbutton and then here we're going to save\nThe Returned computer move into a\nvariable so\nconst\ncomputer move so that it matches the\ncode down here make it equal to whatever\nis returned and then same thing for the\nrock button we're going to save the\nreturn value in a variable const\ncomputer move\nequals if we\nsave and click the rock button\nit\nworks let's press okay and click the\npaper button and this also works and\nlet's press okay so that's how we use a\nreturn statement to take advantage of\nthe benefits of\nscope next if we look at the rest of\nthis code where we compare our move and\ndisplay the result you'll notice that\nthis code is very similar for each of\nthe buttons you the only thing that's\ndifferent is the result and the message\nthat we display so we can actually use\nfunctions here as well to reuse code\nthat has small differences to do this\nwe're going to need another feature of\nfunctions called\nparameters so let's go back into\nfunctions.\nHTML and let's open the tab for this\nfile and let's also comment out the\nprevious code by typing\nslash star and at the bottom star\nslash and create some new\nlines and now we're ready to learn\nparameters so parameters are sort of the\nopposite of a return statement a return\nstatement gets a value out of a function\na parameter puts a value into a function\nso let's do an example let's say that\nwe're working on the final Amazon\nProject\nand we need to calculate the tax for our\norder let's create a function to\ncalculate the tax so\nfunction let's name it\ncalculate tax brackets and curly\nbrackets and then inside the curly\nbrackets let's say that the cost of our\nproducts is\n1,000 or $10 and the tax is\n10% to calc calculate the tax we can do\n1,000 *\n0.1 which is\n10% let's also display this number in\nthe console so at the front we'll type\nconsole.log and\nbrackets now let's save and remember\nthis code only creates a function it\ndoesn't run the code inside to run this\ncode we're going to call this function\nso down here we're going to type the\nfunction name calculate tax and then\nbrackets if we\nsave it runs this code and then it\ndisplays the tax which is 100 cents or\n$1 however right now this function only\ncalculates the tax for\n1,000 what if we want to calculate the\ntax for a different amount how would we\nmodify this function to work with any\nnumber to do this we're going to learn a\nfeature of functions called parameters a\nparameter lets us put a value into a\nfunction so let's finally create our\nfirst parameter so inside these round\nbrackets we're going to choose a name\nfor our parameter so let's just name\nthis\nparameter\n1 a parameter one works the same way as\na variable we can save a value inside\nthis parameter and then use it just like\na\nvariable so first let's save a value\ninside the parameter to do that we're\ngoing to go to where we call the\nfunction and then inside these brackets\nwe're going to put a value for example\n2,000 this will save this value into\nthis parameter\nand now we can use it just like a\nvariable so instead of\n1,000 we're going to type\nparameter 1 and it will take whatever\nvalue is inside parameter 1 in this case\n2,000 and substitute it into the code if\nwe\nsave it now calculates 2,000 *\n0.1 to give us 200 cents as the tax\nnow every time we call the function we\ncan save a different value into the\nparameter for example let's create a new\nline and call the function\ncalculate\ntax and this time we're going to save\nthe value\n5,000 into parameter 1 if we\nsave this line of code will calculate\nthe tax for 5,000\nand result in 500 cents so as you can\nsee a parameter lets us put values into\na function and this allows our function\nto work with any\nvalue now let's learn the syntax rules\nfor parameters to create a parameter we\njust type the parameter name between the\nbrackets parameter names follow the same\nrules as variable names we can't use\nspecial words we can't start with a\nnumber and we can't use special\ncharacters other than dollar sign and\nunderscore and the best practice is to\nuse cam\ncase let's actually change this\nparameter name to cost so the code makes\nmore\nsense and\nsave next when a function has a\nparameter we usually say this function\ntakes a parameter if this parameter\nshould be a number we say this function\ntakes a\nnumber when we put a value into the\nfunction like this we call this passing\na value into the function another name\nfor this value is called the\nargument and believe it or not we've\nactually used functions and parameters\nthis whole time the first code that we\nlearned in this course was alert alert\nis actually a function you can tell it's\na function because of the round brackets\nand between the brackets we put a string\nso this is an example of a\nparameter and lastly a parameter only\nexists inside the function's scope so we\ncan only use this parameter between the\ncurly brackets we can't use it outside\nthe\nfunction next a function can actually\nhave more than one parameter for example\nright now our calculate TX function can\nonly calculate a 10% tax but what if\nwe're in a different country and we want\nto calculate a different tax percent to\nsolve this we can add a second parameter\nby typing after the first parameter a\ncomma and then another parameter name\nlet's name this tax\npercent and now to save a value into the\nsecond parameter we'll go go to where we\ncall this function and also type a comma\nand a second value like\n0.2 or a 20% tax so the first value gets\nsaved in the first parameter and the\nsecond value gets saved in the second\nparameter and now we can use our second\nparameter just like a variable so\ninstead of 0.1 every time we're going to\ncalculate it with tax\npercent and it will substitute whatever\nvalue is inside tax percent into the\ncode if we\nsave this first line will multiply 2,000\nby\n0.2 and give us 400 cents as the\nresult so we can have as many parameters\nas we want in a function we just have to\nseparate them with a\ncomma Now notice that the second time we\ncall this function we didn't give a\nvalue for the second parameter if we\ndon't save a value into the parameter\nthe parameter will get the value\nundefined so here if we\nconsole. log the second parameter tax\npercent and\nsave it will show us that the second\ntime tax percent is\nundefined and then multiplying the cost\ntime undefined is not valid math so we\nget the result Nan or not a number so\nnow let's remove the\nconsole.log and we'll learn how to fix\nthis so to fix this we can either pass a\nsecond value into the function like this\nline or we can also set a default value\nfor the parameter to set a default value\nwe can just type after the parameter\nand then add equal sign and a default\nvalue like\n0.1 if we\nsave the second function call Will\nmultiply 5,000 by the default value\n0.1 and give us\n500 so that's how we add a default value\nfor a\nparameter all right now that we learned\nparameters we're going to go back to the\nrock paper scissors project and reuse\neven more code so let's go back to the\nfile for the project and also the tab\nfor this\nproject and now if we look at the code\ninside each of the buttons you'll notice\nthat the code is basically the same for\nall three buttons the only small\ndifference is the move that we picked so\nthis is a perfect situation to use a\nparameter so so inside the script\nelement let's create a new function to\nreuse all of this code we'll type\nfunction and let's name this function\nplay game brackets and curly\nbrackets next let's move all of this\ncode inside the function so we can reuse\nit we'll select this\ncode and then\nrightclick\ncut and inside the\nfunction right click and\npaste and if we need to reformat we can\nselect these lines and press\ntab so the value that is different for\neach button is the move that we picked\nso we're going to turn this move into a\nparameter so at the top between the\nbrackets we're going to create a new\nparameter let's name it Player\nmove and now let's save a value into\nthis parameter so inside our scissors\nbutton we're going to call this function\nand run all this code so let's type play\ngame and call this function and for the\nscissors button let's save the string\nscissors into Player move to do that\nwe'll type between the brackets here and\ntype the string\nscissors so as we learned this will save\nscissors into Player move and now we can\nuse Player move just like a variable in\nthe\nfunction now let's modify the code based\non the parameter so here this code\ncalculates the result however this only\nworks if the player move is scissors so\nwe're going to put this in an if\nstatement so we'll type\nif\nPlayer move equals\nscissors and curly brackets inside this\nif statement we're going to put this if\nstatement so let's select this and then\nright click\ncut and then inside\nhere right click click and\npaste and select these lines and press\ntab so notice that we can put an if\nstatement inside another if statement\nand we did this because this code only\nmakes sense if the player move is\nscissors and finally let's modify the\ncode that displays the message so here\ninstead of displaying scissors every\ntime we're going to display whatever is\nsaved inside Player\nmove so we'll replace it with Dollar\nopen curly bracket close curly bracket\nand in between we'll insert Player\nmove and that's it we modify this\nfunction to use a parameter instead of\nalways using\nscissors now let's save and click the\nscissors\nbutton and you'll notice that it works\nwe displayed the move scissors and we\ncalculated the result\ncorrectly let's press okay and we're\ngoing to use this function to reuse the\ncode for the other buttons so we'll\nscroll up and for the paper button we're\ngoing to use a different if statement to\ncalculate the result so let's actually\ncopy this into the function we're going\nto\nrightclick click copy\nand then inside the\nfunction we're going to create another\nBranch if the player move is paper so\nhere let's type else if brackets and\ncurly\nbrackets inside this condition we're\ngoing to check if the\nplayer move is equal to paper this time\nand then inside these curly brackets\nwe're going going to paste the if\nstatement we copied earlier so right\nclick and\npaste and we can select these lines and\npress tab to\nreformat so now we have the code that\ndetermines the result for paper down\nhere we don't need to modify this code\nbecause we're always displaying whatever\nis inside Player\nmove finally we can scroll up to the\npaper button\nand remove all this duplicated code and\njust use our function play\ngame and we're going to pass paper\ninside so now paper will get saved\ninside Player move and it's going to run\nthis if statement\ninstead if we\nsave and click the paper\nbutton in this example I pick paper\ncomputer pick Rock and it calculated the\nresult\ncorrectly let's press okay and use this\nfunction for the rock button feel free\nto pause the video if you want to try it\nyourself\nfirst so let's scroll up to the Rock\nbutton and first we need to copy this if\nstatement into the function so let's\nrightclick\ncopy and then inside the function\nlet's create a branch for rock else if\nPlayer move is equal to\nrock and then curly brackets and inside\nhere we're going to rightclick and paste\nthe if statement we copied\nearlier and now let's select these lines\nand press tab a few times to\nreformat and again this doesn't need\nneed to\nchange the last step is to scroll up to\nour Rock button and instead of\nduplicating all of this code we're going\nto remove it and just call our function\ninstead play game brackets and then\ninside we'll have the string\nRock now let's\nsave and click the rock\nbutton so I picked Rock the computer\npicked paper and we calculated the\nresult\ncorrectly let's press okay so by using a\nfunction with a parameter we were able\nto reuse all of the code in our buttons\nand you can see that it made our code a\nlot cleaner so lastly notice that inside\na function we can call other functions\nlet's go through the code step by step\nso that we understand how how it works\nso here when we call the play game\nfunction we go inside here and then we\ncall the pick computer move function so\nnow we're going to go inside this\nfunction and run all the code and then\nwhen this function returns we're going\nto return back to where we called it and\nthen keep going and run the rest of the\ncode and then when the play game\nfunction finishes it's going to return\nback to\nhere so inside a function we can call\nother\nfunctions now one last thing we're going\nto do for this code is we'll scroll\ndown and we're just going to add some\nnew lines to this if statement to\nseparate the branches and make the code\na little easier to\nread and\nsave and let's scroll\nup and that's the end of this\nlesson in this lesson we learned about\nfunctions which let us reuse code we\nlearned how to get a value out of a\nfunction using return we learn how to\nput values into a function using\nparameters and we improve the code for\nour rock paper scissors project by\nreusing the code and removing\nduplication\nthanks for watching this course so far\nif you want to support this channel you\ncan check out the premium version of my\ncourses just like this one where you can\nget a certificate of completion and a\nBetter Learning platform if you're\ninterested in extra videos from me more\nin-depth videos and behind the scenes\ncontent you can check out these links\nhere you can also support the channel by\nliking the video subscribing and sharing\nthis video with others thanks again and\nlet's go continue with the\ncourse here are some exercises you can\ndo on your own to practice using\nfunctions\nin this lesson we're going to learn\nanother type of value in JavaScript\ncalled objects and we're going to use\nobjects to create a score in our rock\npaper scissors project first let's\ncreate a new file for this lesson we'll\ngo to our code editor and click this\nicon and then click this icon to create\na new file and we'll name this file\n08-\nobjects.\nHTML and press\nenter next we'll copy all the code in\nfunctions. HTML to objects. HTML so\nwe'll type here and press contrl a or\ncommand a to select the code and then\nright click\ncopy and in\nhere right click\nand\npaste now let's hide the files for now\nand we'll prepare this file for this\nlesson so we can change this to objects\nand remove all the code in the script\nelement finally let's save and open this\nin live server by right clicking open\nwith live\nserver and let's also open the console\non on this page so we'll right click\nclick\ninspect and click the\nconsole let's close our previous\ntabs and also the previous\ncode and now we're ready to learn\nobjects so what is an object an object\ngroups multiple values together let's do\nan example and create our first object\nwe'll go to the script element and we'll\ncreate a variable using const and we'll\nname this variable product and make it\nequal to open curly bracket close curly\nbracket and semic it so this is an\nobject inside this object we can add\nsome values so we'll type enter and then\nName colon and then a value like the\nstring\nsocks and at the end we'll type a\ncomma and then price colon and another\nvalue like the number\n1,90 so inside our object we just added\ntwo values so at the bottom here let's\ntry console. logging this object\nconsole.log\nproduct and\nsave and it will display both values\ninto the\nconsole so as you can see an object lets\nus group multiple values together so for\neach of these values we have some code\non the left this code is called the\nproperty and using the property we can\naccess specific values in the object for\nexample let's type and enter and\nconsole.log we're going to type the\nobject product and then a DOT and then a\nproperty like\nname so dot name Will access the value\nthat is associated with the name\nproperty which is the string socks so if\nwe\nsave it will display the string socks in\nthe console\nlet's do another example and we'll\naccess this second value using the\nproperty price so we'll type enter\nconsole. log the object product and then\na DOT and then a property\nprice so this will access the value\nassociated with price which is\n1,090 if we save\nthat's what gets displayed in the\nconsole now we can also use the property\nto change a value inside an object to do\nthat we're going to type the object's\nname product and then Dot and a property\nlike name and just make it equal to\nsomething else like the string cotton\nsocks so this code will change change\nthe value associated with the name\nproperty to cotton socks so at the\nbottom if we type\nconsole.log the product\nagain and\nsave you'll notice the value associated\nwith the name property was changed to\ncotton\nsocks so that's how an object works we\ngroup multiple values together and then\nwe can access or change these values\nusing the properties on the left now\nlet's learn the syntax rules for objects\nto create an object we start with an\nopen curly bracket and end with a closed\ncurly bracket inside the object we can\nput multiple\nvalues for each value the code on the\nleft is called the property this is how\nwe access the value inside the object we\nseparate the property and value with a\ncolon and this is called a property\nvalue pair we can have many property\nvalue pairs in an object and we separate\nthem with a\ncomma to access a value inside the\nobject we type the object's name and\nthen Dot and then the property we want\nto access like name this will give us\nthe value associated with the name\nproperty this syntax is called do\nnotation if we access a property that\ndoesn't exist the value will be\nundefined to change a value in an object\nwe can use the dot notation again so\nproduct. name and just make it equal to\nsomething else now using the syntax we\ncan also add a value to an object we can\ntype a property that doesn't exist for\nexample here we can type\nproduct do new\nproperty and make this equal to\nsomething like the Boolean value\ntrue if we\nconsole.log the product\nagain and\nsave it will add this value to the\nobject along with the new\nproperty we can also remove a value from\nan object by typing\ndelete and then the object\nproduct Dot and then the property we\nwant to delete like new\nproperty if we\nconsole.log the product\nagain and\nsave this code will delete new property\nfrom the\nobject and lastly notice that then an\nobject is just another type of value we\ncan save an object inside a variable and\nwe can also console.log objects if we\ncheck the type of this value so type of\nproduct and\nsave and scroll up in the\nconsole it will tell us that product is\nan object so let's remove\nthis and Save\nand now we'll learn why we use objects\nso objects make our code more\norganized instead of creating a bunch of\nvariables for the products values like\nthe name and the price and other details\nwe can just group all these related\nvalues together into one object objects\nalso allow us to use multiple values\ntogether instead of console. logging\neach of these values individually we can\njust console log the whole object and\ndisplay all the values at\nonce so objects let us group multiple\nvalues together and let us use multiple\nvalues\ntogether next let's do a practical\nexample with objects we're going to add\na score to our rock paper scissors game\nso I've actually prepared a project we\ncan use for this lesson to see this\nproject we're going to go to our website\nand then create a new\ntab and then up here we're going to type\nsuper simple dodev SL projects\nslobs and press\nenter so this is our simplified rock\npaper scissors game again except in this\nproject when we play the\ngame it's also going to keep track of a\nscore so how many times we win lose and\ntie and also if we click\nokay we have a reset score button so if\nwe play the game a few\ntimes and add to our\nscore and then click the reset score\nbutton this will reset the score back to\nzero so if we play the game again the\nscore starts from zero\nagain so we're going to learn how to use\nobjects to create create this feature\nlet's press\nokay and first let's create a copy of\nour project just for this lesson we'll\ngo to our code editor and click this\nicon to show our files and we'll make a\ncopy of the rock paper scissors project\nfrom the previous lesson so we'll\nrightclick and\ncopy and down here right click and\npaste and we we right click and rename\nthis\nfile we'll remove the copy at the end\nand at the front we'll change this to 08\nand press\nenter now let's hide these files and we\ncan close the 07 file for now and let's\nopen this in live server by right\nclicking and open with live\nserver let's also open the console on\nthis page so\nrightclick\ninspect and the\nconsole all right now let's go into our\ncode and add a score to our game so\nremember when writing JavaScript a good\nstrategy is to think about what steps we\nneed to do this is called an algorithm\nand then convert those steps into code\nso we already had an algorithm for the\nrock paper scissors game\nlet's update this algorithm to include\nthe score so first the computer randomly\nselects a move this step will stay the\nsame number two we're going to compare\nthe moves to get the result this step\nwill also be the same but now we're\ngoing to add an extra step after getting\nthe result we're going to update a score\nand finally we'll display the result and\nthe score in a popup now let's convert\nthese updated steps or this algorithm\ninto code the first thing we need to\nchange is we added a third step we're\ngoing to save and update a score so\nfirst we need somewhere to save our\nscore so one place we can save it is\ninside a variable let's go to our script\nelement and at the top we're going to\ncreate a variable for our score using\nconst\nscore and make it equal to an\nobject and inside this object we're\ngoing to have the property\nwins so this will keep track of how many\nwins that we have we'll type colon and\nthe number zero because the score starts\nat zero and then a comma and then\nanother property\nlosses this will be how many losses we\nhave and then colon and zero and then\nanother comma and ties colon and zero so\nwe use an object here because these\nvalues are related to each other you\ncould use separate variables but we're\nusing an object for\nconvenience another thing you'll notice\nis that we're creating this variable\noutside of a function and outside of a\nscope and that's because every time we\nmake a move we need to update the score\nfrom last time so in order to save the\nscore from last time we need to keep it\noutside the function if the score was\ninside the function the function would\ncreate a new score every time which is\nnot what we want so in this situation in\norder to save a score from last time\nwe're going to keep this variable\noutside now every time we play the game\nafter we calc calate the result we're\ngoing to update the score so let's\nscroll down to where we calculate the\nresult which is here and then below it\nwe're going to type some new\nlines and type the code for updating the\nscore so we can do that with an if\nstatement so we'll type if brackets and\ncurly brackets and inside the condition\nwe're going to check if the result is a\nwin if it is a win\nwe're going to update the winds property\nand increase it by one so down\nhere if the\nresult is equal to the string you\nwin and make sure that this string\nmatches the string up here inside the\ncurly brackets we're going to update\nscore. wins and we'll make it equal to\nitself plus\none so this is how we increase the winds\nproperty in the score object by one now\nremember from the variables lesson that\nwe have a shortcut for increasing\nsomething by one and that shortcut\nis plus =\n1 next let's add another Branch to this\nif statement for the other two results\nso else if brackets and curly brackets\nand in the second condition we're going\nto check if result is equal to the\nstring you\nlose and make sure this string matches\nthe string up here so if the result is\nyou lose we're going to update score do\nlosses property and increase it by 1 so\nplus equal\n1 and finally we'll check if the result\nis a tie else if brackets and curly\nbrackets\nresult equals to the string\ntie and here we'll update\nscore. ties plus equal\n1 so we converted this step in the\nalgorithm to code the score starts at\nzero and every time we play the game\nafter we calculate the result we're\ngoing to update the score using this\ncode now let's convert the last step\ninto code we're going to display the\nresult and the score in the popup at the\nend so let's actually go back to the\nsuper simple dodev\nproject and we'll see what the popup\nlooks like we'll click one of these\nbuttons and in this popup on the second\nline we display the score so in our\ncode this is the code that displays that\npopup so how do we add a second line to\nthe popup remember that template strings\nhave another special feature called\nmulti-line strings so we can type at the\nend of this template string and press\nenter to add another line to this Str\nso here we can type winds colon and\nwe're going to insert a value using\nDollar open curly bracket Clos curly\nbracket and here we're going to insert\nthe number of wins that we have which is\nscore. wins so we'll type score\ndowins next we're going to show the\nnumber of losses that we have so after\nthis\nlet's type a comma and losses colon and\ninsert another\nvalue here we'll insert\nscore.\nlosses and finally we'll type a comma\nand we'll display ties colon and\ninserted value score dot\nties and this will display our score in\nthe popup so let's save this and give it\na try we'll click okay and then go back\nto our Tab and play the\ngame so now on the second line we will\ndisplay the score one small issue here\nis that we have a lot of spaces on the\nsecond line so these spaces correspond\nto the spaces here when we use\nmulti-line strings these Extra Spaces\nwill show up in the popup so to remove\nthese SP cases we can just remove them\nin the code like this now if we\nsave press\nokay and play the game it will show our\nscore on the second line without those\nExtra Spaces at the front let's press\nokay we're going to add one more feature\nto this project if we go back to Super\nsimple. Dev we have a reset score button\nwhich will reset the score back to zero\nwhen we click it let's add this button\nin our project so we'll scroll\nup and inside the\nHTML We'll add a button with the code\nless than button greater than and inside\nthe button we'll have the text reset\nscore and now when we click this button\nwe'll run some code using the onclick\nattribute equals double quotes and then\nin here we're going to write some code\nto reset this score back to\nzero so one way we can do it is because\nthis score is an object we can use dot\nnotation to change everything back to\nzero so we can type\nscore. wins and make it equal to zero\nwe'll also type\nscore. losses and make it equal to Z and\nfinally\nscore. ties and make it equal to\nzero now let's\nsave and go back to our\nTab and play the game a few times to get\na\nscore let's press okay and press reset\nscore and then play the game again and\nyou'll notice that the score started\nfrom zero again so that's how we create\nthe reset score button we just set all\nof these properties back to\nzero and that's it that's how we add a\nscore feature to our rock paper scissors\nproject using an object to save the\nscore let's press\nokay and we're going to learn more\ndetails about objects let's go back to\nobjects.\nHTML and what open the tab for this\nfile and let's also comment out the\nprevious code using\nslashstar and at the\nbottom star\nslash and\nsave now let's scroll to the bottom and\nwe'll do some\nsetup so first let's create a variable\nwith const we'll name it Product 2 and\nmake it equal to another object\ninside this object we have the property\nName colon and the string\nshirt and we're going to console.log\nthis object so\nconsole.log Product 2 and\nsave so the next detail we're going to\nlearn about objects is another way to\naccess the values\ninside we previously learned the\nnotation to do this for example\nconsole.log product\nto.\nname this will access the value\nassociated with the name\nproperty in JavaScript we have another\nway of accessing values inside objects\nwhich is using square brackets so we'll\ncreate a new line and type console\ndo\nlog product 2 and this time we'll type\nsquare\nbrackets and then inside the square\nbrackets we'll have a string with\nname so this is called bracket notation\nand this does the same thing as dot\nnotation up here it gets the value\nassociated with the name property if we\nsave these two lines of code both access\nthe string shirt which we see here so\nwhen do we use the bracket notation\ninstead of the dot notation bracket\nnotation lets us use properties that\nnormally don't work with do notation for\nexample at the bottom we can type\nconsole.log Product 2 and then use a DOT\nand try to access a property called\ndelivery-time if we\nsave this property will give us an error\nand that's because JavaScript thinks\nthat this Dash is a minus sign and it's\ntrying to do math so in order to use a\nproperty like this we have to use\nbracket notation so we're going to\nreplace the dot with square\nbrackets and and turn this into a\nstring now if we\nsave it no longer gives us an error and\nbecause delivery time does not exist in\nthe object we get the value\nundefined so using bracket notation we\ncan also add values to the object when\nwe create it so here we can add a\ncomma and we'll add another property\nusing bracket notation and a string\ndelivery-time and a colon and then a\nvalue like the string one\nday if we\nsave this lets us add a delivery-time\nproperty to this object so as you can\nsee bracket notation lets us use\nproperties that normally don't work with\nDOT\nnotation another feature of bracket\nnotation is that between the brackets we\ndon't just have to use a string we can\nuse a variable a calculation or anything\nthat results in a\nvalue so you might be wondering which\none should we use do notation or bracket\nnotation we usually use do notation by\ndefault because it's shorter and easier\nto read but if we need to use properties\nthat don't work with do notation then we\nuse bracket not\nnotation now a shortcut here is when we\ncreate the object if we only have a\nstring between the brackets the brackets\nare actually optional so we can just\ntype this if we save the code will still\nwork okay the next detail we're going to\nlearn is that inside an object we can\nsave any type of value so this includes\nnumbers strings booleans\nas well as other objects because\nremember objects themselves are also\nvalues for example we can type a comma\nand add a property called\nrating colon and then an object open\ncurly bracket close curly bracket and\ninside this inner object we can add more\nproperties like stars colon 4.5\nthis is how many stars a product has and\nthen a comma and a property called count\ncolon\n87 this is how many ratings a product\nhas so this is called a nested object or\nan object inside an object we can use\nnested objects to make our values more\norganized so inside the product the\nnumber of stars that has and the number\nof ratings that it has are both related\nto a rating so it makes sense to group\nthem together further inside the\nproduct now to access values inside the\ninner object we just use the dot\nnotation or bracket notation multiple\ntimes for example at the bottom we can\ntype\nconsole.log product\n2 dot\nrating this will get the value\nassociated with rating and this is an\nobject so we can use the dot notation\nagain\ncount so this will get the count inside\nthe rating object which is this value\nright here so if we save it will display\n87 and finally another type Ty of value\nwe can put in an object is a function so\nin this object let's type comma and\nanother property\nfun colon and we're going to create a\nfunction here so let's type\nfunction and we'll name the function\nFunction One brackets and curly brackets\nand then inside the function we're going\nto have some JavaScript code like usual\nso\nconsole. log the string\nfunction inside\nobject this saves a function inside the\nobject and this works because a function\nis actually just another type of value\nin JavaScript but we'll learn more about\nthis feature of functions later in this\ncourse for now just know that functions\nare also values and we can save them in\nan object to access this function we can\nuse the dot or bracket notation as usual\nso at the\nbottom we can type the object Product 2\nand then a DOT and then the property\nfun so this will access the value\nassociated with the fun property which\nis a function and because this is a fun\nfunction we can call it as usual using\nbrackets if we\nsave this will run the function here and\nit will display function inside object\ninto the\nconsole so when we save functions inside\nan object this is called a method and\nwe've actually been using methods this\nwhole time\nconsole.log is actually a method\nconsole is an object provided by\nJavaScript and log is a function that is\nsaved inside the console\nobject if we go to the bottom and type\nconsole.log type of\nconsole and\nsave this will confirm that console is\njust an object and if we change this to\nconsole.log and\nsave this will show us that console.log\nis a function so log is a function that\nis saved inside the console object so we\ncall this a method another example of a\nmethod is math.random which we used in\nthe rock paper scissors project math is\nalso an object provided by JavaScript\nand random is a function saved inside\nthe math object so we call math.random a\nmethod as well so we've actually been\nusing objects and methods all throughout\nthis course and now we understand all\nthe code that we've been using so far\nnext we're going to learn about builtin\nobjects so the console object and the\nmath object are known as builtin objects\nbecause they are built in to the\nlanguage they provided by the\nlanguage we're going to learn two more\nbuilt-in objects called Json and local\nstorage and we will use these objects to\nimprove our rock paper scissors project\nlet's start with the Json built-in\nobject this object helps us work with\nsomething called\nJson Json stands for JavaScript object\nnotation the easiest way to understand\nJason is it's BAS basically a syntax\nit's a similar syntax to a JavaScript\nobject but it has less features for\nexample the code on the left uses\nJavaScript object syntax and the code on\nthe right uses Json syntax so one\ndifference is that all properties and\nstrings must use double quotes in Json\nJason does not support single quotes\nanother difference is that Json does not\nsupport function functions so as you can\nsee Json is basically a syntax that's\nsimilar to a JavaScript object syntax\nbut with less\nfeatures so why would we use Json syntax\ninstead of a JavaScript object\nsyntax a JavaScript object only makes\nsense in\nJavaScript on the other hand Json syntax\ncan be understood by almost every\nprogramming language so Json syntax is\nmore un\nUniversal for this reason we use Json\nwhen we send data between two computers\nthat might use different programming\nlanguages we'll learn how to do this\nlater in the course we also use Json\nwhen we store data we'll learn how to\nstore data in this\nlesson now that we understand what Json\nis let's learn about the built in Json\nobject the Json object helps us convert\na JavaScript object to Json for example\nlet's convert our object product two to\nJson so we'll create some new\nlines and we'll type the Json object do\nstringify and Open Bracket close bracket\nso stringify is a method of the Json\nobject so it's a function that is saved\ninside this object and we can call this\nfunction using\nbrackets between the brackets we can\ngive it a JavaScript object we want to\nconvert like Product\n2 this will convert the object into Json\nso now let's\nconsole. log the\nresult and\nsave and in the console it will display\nthe product using Json syntax if we we\nscroll up you'll notice that the\nfunction that we saved in the object is\nnot inside the Json and that's because\nJson does not support\nfunctions so one thing to note about\nstringify is that it actually results in\na string so at the front if we type type\nof and\nsave it will tell us that the result\nthat it gives is actually a\nstring so if we remove\nthis and\nsave now this Json string is ready to be\nsent to another computer or to be saved\nin\nstorage next let's learn how to convert\nthe other way from a Json back to a\nJavaScript object to do that we'll use\nanother method in the built-in Json\nobject called json.parse\nat the end we'll type Jon\ndop\npars and\nbrackets and between the brackets we can\nput a Json string that we want to\nconvert so we actually have a Json\nstring up here so let's just make a copy\nof this we'll select it\nrightclick\ncopy and let's create an extra variable\nto make it more clear const Json string\nand make get equal to right click and\npaste and now let's convert this Json\nstring back into an object by putting it\ninto\npars and finally we console.log this\nresult so\nconsole.log and\nsave and json. pars will turn the Json\nstring back into a JavaScript object so\nthat's the built-in Json object it helps\nus convert back and forth between a\nJavaScript object and\nJson now we're going to learn the next\nbuilt-in object called local storage\nlocal storage is used to save values\nmore permanently so far we've been\nsaving our values in\nvariables however variables are\ntemporary they only exist on the current\npage if we refresh the page or close the\npage all the variables are deleted for\nexample if we go back to our rock paper\nscissors\nproject and open the tab for this\nproject and we play a few\ngames and play it again so we have two\ngames if we refresh the page\nnotice the score starts from zero again\nand that's because when we refresh the\npage all of these variables are deleted\nand the score gets reset back to zero\nhowever if we press okay and go to\nsuperimple\ndodev and we refresh the page and we\nplay the\ngame notice that the score doesn't start\nfrom zero it starts from the previous\nscore even though we refreshed the page\nand that's because this project saves\nthe score in local storage and local\nstorage doesn't get deleted when we\nrefresh the\npage now let's learn how to use local\nstorage in our project let's press okay\nand we'll go back to our code and we'll\nscroll down to where we update the\nscore so here after we update the score\nwe're going to save it in local storage\nbut first first let's learn how local\nstorage works so at the bottom here\nwe're going to type the local capital S\nStorage\nobject to save a value inside local\nstorage it has a method called set item\nso we can type dot set capital I item\nand brackets because this is a method or\na function saved inside the object\nobject and we're going to give two\nstrings to this method the first string\nis a name this is how we're going to\naccess the value that we save later so\nlet's use the string\nmessage as the name and we'll type a\ncomma and then we'll type the value that\nwe want to save into local storage so\nlocal storage only supports strings so\nlet's save the string\nhello inside local\nstorage if we\nsave and then go back to our Tab and\nplay the\ngame it will run all this code and save\nthis string into local storage now let's\nlearn how to get this string out of\nlocal storage we'll press okay and we'll\nscroll to the\ntop and when we first load the page\nwe're going to get that value out of\nlocal local storage by typing local\ncapital S\nstorage. getet item this\ntime and\nbrackets so the get item method gets a\nvalue out of local storage and we're\ngoing to give it one string so this\nstring is the name that we used earlier\nwhich was message so we'll type the\nstring\nmessage now let's console log this\nresult so\nconsole.log and a bracket at the\nend and\nsave it will get the value that we saved\nearlier out of local storage so we saved\nthe string hello and that's exactly what\ngets displayed in the\nconsole so using local storage we were\nable to get the value that we saved\nearlier even though we refresh the\npage now let's save our score into local\nstorage so it doesn't get reset when we\nrefresh the page so let's scroll to the\nbottom and instead of using the name\nmessage we're going to use the name\nscore to save our score and instead of\nthe string\nhello we're going to save the score\nobject now one problem here is that\nlocal storage only supports strings so\nwe need to convert our object into a\nstring and we actually learned how to do\nthis earlier using json.stringify\nso at the front we can type\njson.\nstringify and then brackets around the\nscore and this will convert the\nJavaScript object score into a Json\nstring and then it's ready to be saved\nin local store\nso if we save this and then play the\ngame it will run this code and save our\nscore into local\nstorage now let's press\nokay and then's scroll up to the\ntop and now instead of getting the\nmessage we're going to get the score out\nof local storage if we\nsave now when we load the page we're\nable to get the score that we saved from\nlast time as a Json\nstring the last step is instead of\nresetting the score to zero every time\nwe're just going to use the score from\nlocal storage before we do that remember\nthat this is just a string so we need to\nconvert this back to an\nobject we also learned how to do this\nearlier using json. pars so at the\nfront we can type\njson. pars and then Open Bracket and at\nthe end a close bracket and it will\nconvert this back to an object if we\nsave it will convert the score from a\nJson string back to an object so now we\ncan use it up here so instead of doing\nthis we'll remove it and replace it with\nthis code so right click cut\nand then here right click and\npaste and we'll remove\nconsole.log and\nsave so now when we load the page it\nwill load the score from local storage\nif we play the\ngame notice that the score doesn't start\nfrom zero it starts from the score that\nwe had last time let's review what we\ndid step by step first when we update\nour score in this code after we update\nthe score we're going to save it in\nlocal storage using local storage. set\nitem now local storage only supports\nstrings so we have to convert our score\nobject into a Json string using json.\nstringify and then after we've saved\nthis into local storage when we load the\npage up here we're going to load the\nscore that we just saved from local\nstorage using local storage. getet item\nand the score was saved as a Json string\nso we need to convert it back into an\nobject using json.parse\nso that's how we use the Json object and\nthe local storage object to save our\nscore more\npermanently let's press okay\nokay and the last feature we're going to\nadd is when we click the reset score\nbutton we also need to remove the score\nfrom local storage otherwise if we press\nreset score and\nrefresh and then play the game it will\njust grab the old score from local\nstorage so reset score doesn't really\nwork here let's press okay and fix this\nissue so here in the set score button at\nthe end we're going to remove the score\nfrom local storage so we'll type\nlocal\nstorage and then a method called do\nremove item and\nbrackets and between the brackets we're\ngoing to tell local storage which value\nwe want to remove so we're going to\nremove the score so we'll type the\nstring score\nif we\nsave and we click the reset button and\nthen we refresh the page and try to play\nthe game\nagain unfortunately it now gives us an\nerror so what is happening here so\nremember that we remov the score from\nlocal storage so now when we load the\npage this actually doesn't exist when\nsomething doesn't exist in local storage\nit's going to give us a value called\nnull\nand at the\nbottom if we try to access any property\non null it will give us an error so\nthat's what we see here so how do we\nsolve this problem if we scroll\nup one way to solve this problem is that\nif there is no score in local storage\nwe're going to give it a default value\nlet's look at how we can do that so\nafter this line we're going to check if\nthe score is null we can do that using\nan if statement if brackets and curly\nbrackets and we'll check if score is\nequal to\nnull and if it is equal to null we're\ngoing to give this a default score so\ninside the curly\nbrackets we'll just make the score equal\nto the default object we had earlier\nwhich was\nwins zero and then\nlosses zero and\nties\nzero and remember if we need to reassign\na variable we have to change it from\nconst to let if we\nsave the score will be null because we\nremoved it earlier and now this will\ngive it a default score so everything\nshould work as before\nif we play the\ngame you'll notice that the score starts\nfrom zero or this default score and\neverything is working again so that's\nhow we create the score feature in the\nrock paper scissors project as well as\nthe reset score\nfeature next we're going to use some\nshortcuts to simplify our code so these\nshortcuts are things that we learned in\nthe Boolean lesson so remember that null\nis a falsy\nvalue that means it will behave just\nlike false so a shortcut we can use here\nis instead of checking if the score is\nequal to null we can also remove this\nand check if not\nscore so not score does the same thing\nas checking if it's null if the score is\nnull not score will flip it into true so\nboth of these will return true if the\nscore exists it's an object then both of\nthese will return false so instead of\nchecking if a value is equal to null we\ncan just use the not operator as a\nshortcut now also from the boolean's\nlesson we have an even shorter shortcut\nfor doing this so notice here that this\ncode basically sets a default value if\nthe score doesn't exist in the boolean's\nlesson we learned a technique called the\ndefault operator which is exactly what\nwe need here so on this line we can\nremove the semicolon and type\nor and then a default value so we want\nour default value to be this object so\nlet's select it and then\nrightclick copy\nand then here right click and\npaste and I'll select these lines and\npress shift tab to remove and indent and\nI'll add a semicolon back at the\nend so the way that the default operator\nworks is that if the left side is truthy\nso in this case we have a score it will\nuse the left side if the left side is\nfalsy or in this case the score is null\nthen we will use the right side as a\ndefault value so this does the same\nthing as this code below but it's just a\nshortcut so now let's comment out this\ncode using\nslashstar and at the bottom start slash\nso we'll leave it here just for\nreference and then\nsave and if we click reset score again\nand\nrefresh and play the\ngame it will still work so this is a\nperfect situation to use the default\noperator to simplify our\ncode so let's press\nokay and that's all we're going to do\nfor this project in this\nlesson now let's move on and learn more\ndetails about objects the first thing\nwe'll learn is the value null so null is\none of the falsy values in JavaScript\nit's similar to the value undefined they\nboth represent that something doesn't\nhave a value so what's the difference\nbetween null and undefined we use null\nwhen we intentionally want something to\nbe empty for example in the previous\nlesson we learned that if a function has\nparameters we can give the parameter a\ndefault value if the parameter is\nundefined\nit will use the default value however if\nwe set this parameter to null it will\nnot use the default value and it will\njust use null so null means we\nintentionally want something to be\nempty in most cases though null and\nundefined work the same way okay so the\nnext detail about objects we're going to\nlearn is called\nautoboxing let's go back to objects. HT\nHML and open the tab for this\nfile and let's also comment out the\nprevious code so our console doesn't get\ntoo messy so\nslashstar and at the\nbottom star slash and\nsave so let's scroll\ndown we learned in this lesson that\nobjects can have properties and methods\nso you might be surprised to learn that\nother values also have have properties\nand methods for example at the bottom\nwe're going to type\nconsole.\nlog the string\nhello and then the dot notation and a\nproperty called\nlength so strings can also have\nproperties the length property tells us\nhow many characters or letters are in\nthis string so hello has five letters so\nif we save the length property will be\nfive here's another example we'll type\nconsole.log the string hello and then\nthe dot notation and a method this time\n2 capital u upper Capital C case and\nbrackets so this string also has a\nmethod called two\nuppercase and this method gives us a\ncopy of the string with all letters\ncapitalized or in\nuppercase if we save it will give us\nhello in capital\nletters so as you can see simple values\nlike strings can also have properties\nand\nmethods so now you might be wondering\nthese are strings not objects how can\nstrings have properties and methods the\nanswer is that JavaScript has a special\nfeature called Auto boxing JavaScript\nautomatically wraps this string in a\nspecial object first and this object has\nthe property length and the method to\nuppercase so this is done automatically\nwe don't see the special object that's\nwrapped around this string so this\nfeature is called\nautoboxing because JavaScript automat\nautomatically wraps the string in an\nobject like a\nbox so autoboxing also works with other\ntypes of values like numbers and\nbooleans the only thing is that auto\nboxing does not work with null and\nundefined it would just give us an\nerror The Last Detail we're going to\nlearn about objects is a really\nimportant detail and that is objects are\nreferences to demonstrate let's create a\nnew variable with an object so\nconst object one and make it equal to an\nobject inside this object let's have a\nproperty\nmessage colon and the string\nhello so you might think that when we\ncreate an object like this we create a\nvalue that has other values inside and\nwe save the whole thing and a variable\nhowever this actually works a little\ndifferently when we create this object\nthe actual value is created somewhere in\nthe computer's memory and this variable\nactually just gets a reference that\npoints to that location in the\ncomputer's memory this is like a\nshortcut on your computer a shortcut\npoints to where the actual file or\nfolder is so there's no way to actually\nsee this reference but just just know\nthat this is a reference and the object\nis somewhere else in the computer's\nmemory so the reason it works this way\nis to make the language more efficient\nfor example below this line we can\ncreate a variable const and call it\nobject 2 and make it equal to object\none so this code doesn't actually make a\ncopy of the object it this makes a copy\nof the reference that points to the\nobject so this makes a language more\nefficient because if we had a really big\nobject here it's not good to copy the\nentire object over and over again\ninstead Javas just copies the reference\nwhich is much faster this is called copy\nby\nreference now that we learned that\nobjects are actually references let's\nlearn some interesting behaviors of\nreferences so at the bottom here we're\ngoing to change the property message in\nthis object we can do that by typing the\nobject object\n1. message property and make it equal to\nsomething else like the string good\njob and now if we\nconsole. log object one\nand\nsave notice that we were able to change\nthe message property even though we\ncreated object one with const and that's\nbecause this variable just contains a\nreference that points to the object so\nconst prevents us from changing the\nreference in the variable but it doesn't\nprevent us from reaching into the\nreference and changing the object that\nit's pointing to so just be careful when\nyou're working with with objects even\nthough we use const we can still change\nthe values inside the object another\ninteresting behavior is that on this\nline we're not actually copying the\nobject into this variable we're copying\nthe reference so object two actually has\nthe same reference as object one they\nactually point to the same object in the\ncomputer's\nmemory so at the bottom if we type\nconsole\nlog object 2 and save you'll notice that\nfor object two the message property was\nalso changed even though we only changed\nobject one the last interesting behavior\nis that we can't compare objects\ndirectly for example let's go to the\nbottom and we'll create a new object\nusing\nconst object 3 and we'll make it equal\nto an object and then inside we're going\nto have these same values as object one\nso we'll have the property\nmessage and the value is the string good\njob so now let's try comparing object 3\nto object one so here we'll type console\ndo\nlog and check if object 3 is equal to\nobject\none if we\nsave it will tell us that these two\nobjects are not equal to each other even\nthough they have the same values inside\nand that's because remember objects are\nreferences so object 3 also contains a\nreference and this code compares the\nreferences and not the values inside the\nobject so because object 3 is a\ndifferent reference than object one\nthat's why this code results in\nfalse if we\ndid\nconsole. log and we check if object 2 is\nequal to object\n1 object two has the same reference as\nobject one it points to the the same\nobject in the computer's memory so if we\nsave this will tell us that these two\nvariables have the same\nreference so just remember that when\nyou're comparing two variables that\ncontain objects you're actually\ncomparing the references not the values\ninside if we want to compare the values\ninside we would do that manually by\nchecking the message property against\nthis message property so don't worry\nobject references are a little confusing\nat first but the more you work with it\nthe more you just get used to\nit the last thing we're going to learn\nin this lesson are some shortcuts for\nobjects so first let's make a copy of\nobject 3 we'll select the code and\nrightclick\ncopy and then at the\nbottom we'll scroll down and right click\nand paste\nand let's rename this variable to object\n4 so now let's say that we want to get\nthe message property out of this object\nwe can do that by typing object\n4.\nmessage and now let's also say that we\nwant to save this in a variable also\ncalled message so at the front we'll\ntype con\nmessage and make it equal to this\nvalue so now if the variable name and\nthe property name are the same we\nactually have a shortcut for this to use\na shortcut we're going to type const and\ncurly brackets\nmessage and make it equal to object\n4 so this shortcut is called\ndestructuring this will take the message\nproperty out of object 4 and save it in\na variable called message so this line\nof code does the same thing as the code\nabove so let's comment out this line\nusing double slash and we'll just keep\nit for reference so at the bottom if we\ntype\nconsole.log\nmessage and Save\nit will display good job so the\ndestructuring shortcut took the property\nout of the object and saved it in this\nmessage\nvariable next we can use this\ndestructuring shortcut for multiple\nproperties for example let's add another\nproperty to this object using comma and\nwe'll add a price property colon\n$7.99 and now we can take the price\nproperty out of this object by typing\nafter message a comma and\nprice so this will take the price\nproperty out of the object and save it\nin a variable called\nprice if we\nconsole.log the\nprice and\nsave it will display $799\nso that's the destructuring shortcut\nit's an easier way to take properties\nout of an\nobject the next shortcut we're going to\nlearn is called the shorthand property\nso at the bottom let's create some new\nlines and let's say we want to create a\nnew object so we'll type const and let's\nname this object 5 and we'll make it\nequal to an\nobject and inside ins this object let's\nsay we want to create a message property\nso we'll type message colon and for the\nvalue let's type the variable\nmessage so what this does is that it\ntakes whatever is inside the message\nvariable and substitutes it into this\ncode so at the bottom if we\nconsole.log object 5 and\nsave this object will have a property\ncalled message and the value is whatever\nis inside the message variable which is\ngood job so now we actually have a\nshortcut for this code if the property\nand the variable name are the same we\ncan actually just type it out once like\nmessage so this code does the same thing\nas message colon message and this\nshortcut is called the shorthand\nproperty so if we comment out this line\nusing double\nslash and\nsave you can see that this shortcut\ncreates the same object that we had\nbefore the last shortcut we're going to\nlearn is called the shorthand method so\nat the end let's create a new property\ncomma and let's name it\nmethod Po in and we'll save a function\nin this property so we'll type\nfunction and let's name it Function One\nbrackets and curly\nbrackets and inside this function let's\nconsole.log\nmethod and now here at the\nbottom let's run this function by Ty\ntyping object 5. method so this will\naccess this function and we'll run it by\ntyping\nbrackets if we\nsave this will run the code in the\nfunction and display method in the\nconsole so we actually have a shortcut\nfor writing this so at the bottom we can\ntype method again and just type brackets\nand curly brackets\nconsole.log string\nmethod so this code does the same thing\nas the code above so these brackets will\ncreate a function just like here so this\nfunction name is actually not needed so\nif we comment out these lines of\ncode and\nsave it will still display method in the\nconsole because this is a shortcut for\nthese lines of code so this shortcut is\ncalled the shorthand method\nsyntax and that's the end of this lesson\nin this lesson we learned another type\nof value called objects objects group\nrelated values together we added a score\nto our rock paper scissors game we\nlearned about built-in objects and used\nthe Json and local storage objects to\nsave our our score more permanently we\nlearned more details about objects like\nnull autoboxing and references and we\nlearned some useful shortcuts like\ndestructuring shorthand properties and\nshorthand methods here are some\nexercises to help you practice working\nwith objects\nin this lesson we're going to learn one\nof the most important features of\nJavaScript called the document object\nmodel or the Dom and we're going to use\nthe Dom to improve our rock paper\nscissors project so first we'll create a\nnew file for this lesson let's go to our\ncode editor and click this icon to show\nour files and then click this icon to\ncreate a new file and we'll name this\nfile 09\ndd.\nHTML and press\nenter next let's copy objects. HTML into\ndom.\nHTML so we'll click here to open the\nfile file and then click inside and then\ntype contrl A or command a to select the\ncode and then\nrightclick\ncopy and in\nhere right click and\npaste now let's hide these files and\nwe'll prepare this file for this lesson\nso let's scroll to the\ntop and we'll change the title to\nDom and let's delete all the JavaScript\ncode from the previous\nlesson now let's save this file and\nwe'll open it in the browser by right\nclicking open with live\nserver and let's also open the console\non this page we'll right click click\ninspect and then click the console\nand now we can close the previous\ntabs as well as the previous code for\nnow and for this lesson we're going to\ndo an extra step in the setup inside the\nbody we're going to create a\nbutton so here let's type the code less\nthan button greater than and inside the\nbutton we'll have the text\nhello now let's\nsave and we should have a button on the\npage and now we're ready to learn the\ndocument object model or the Dom in the\nprevious lesson we learned about objects\nwhich group multiple values together we\nalso learned about builtin objects which\nare objects that are provided by\nJavaScript some examples of built-in\nobjects are console math Json and local\nstorage the Dom is another builtin\nobject called the document object so\nlet's go to our script element and we're\ngoing to type\ndocument so this is a built-in object\nprovided by JavaScript and we've\nactually seen this document object\nbefore in the first lesson one of the\nfirst pieces of code that we learned was\ndocument dot body do inner Capital\nHTML equals the string hello and\nsemicolon so this code removes\neverything on the page and replaces it\nwith the text hello if we\nsave it will remove the button and just\nput\nhello and now that we learned objects in\nthe previous lesson we can fully\nunderstand this\nsyntax document here is a built-in\nobject and this is the dot notation this\nmeans we're accessing a property of the\ndocument object called body now body is\nalso an object so we can use the dot\nnotation again to access a property of\nthe body object called inner\nHTML and finally we use an equal sign to\nchange the inner HTML property to the\nstring\nhello but as you can see there's\nsomething very special about the inner\nHTML property when we change this\nproperty it also changes the web page so\nthis document object and the web page\nare linked together let's do another\nexample we'll go to the end here and\npress enter and we'll type the document\nobject again\nand we'll use the dot notation again and\nthis time let's access the property\ntitle and we'll change the title\nproperty using an equal sign and we'll\nchange it to the string good\njob if we\nsave changing the title property we'll\nalso change the title at the top of the\ntabs here so now this says good job\nagain as you can see the document object\nis linked to the web page so from these\nexamples it shows us that the document\nobject represents or models the web page\nand that's why we call this feature the\ndocument object model or the\nDom now that we know what the Dom means\nlet's learn the syntax rules for the Dom\nso the Dom is just this built in\ndocument object and this object works\nthe same way as any other object it\ncontains properties like body and title\nthat we can access using the dot\nnotation now the special thing about the\ndocument object is that it is linked to\nthe web page that means if we change\ncertain properties in this object it\nwill also change the web\npage now in addition to properties the\ndocument object also has methods we can\nuse and we'll learn about them later in\nthis\nlesson now that we understand the syntax\nof the document object let's learn about\nthe properties and methods we can use\nfirst let's comment out this previous\ncode using\nslashstar star slash and we'll create\nsome new lines at the\ntop so the first property will we're\ngoing to learn is called\ndocument.title\nso this property will give us the title\nat the top of the tabs here so if we\nconsole.log this property\nconsole.log and\nsave this will give us the text at the\ntop which is Dom and that's what gets\ndisplayed in the\nconsole if we change the doc do. tile\nproperty it will change the text at the\ntop of the tab so here if we type\ndocument.title and make it equal to the\nstring\nchanged and\nsave now the title at the top of the tab\nwill be\nchanged so as you can see the title\nproperty is linked to the title at the\ntop of the tab\nwe can use it to get the title and we\ncan also use it to change the\ntitle next we're going to learn another\nproperty called\ndocument.body so let's go into our\ncode and let's type\ndocument.body now document.body is a\nvery special property so this will\nliterally get this body HTML element\nelement and put it inside our\nJavaScript so let's actually console.log\nthis to see how it works\nconsole.log Open\nBracket and then close bracket and\nsave and inside the console it will tell\nus that\ndocument.body is the body HTML element\nand if I hover over this it will tell us\nthat it is a exactly the body on our\npage if I expand this you can see that\nthis code is exactly the code that we\nhave here and this shows us one of the\nmost important features of JavaScript we\ncan have HTML elements inside\nJavaScript the document object or the\nDom combines JavaScript and HTML\ntogether and it gives JavaScript control\nof the web page\nokay so now that we have an HTML element\ninside our JavaScript what can we do\nwith it a really important thing to know\nis that when an HTML element is inside a\nJavaScript like this the HTML element is\nconverted into a JavaScript object so\nfor example if we do\nconsole.\nlog type of document do\nbody and\nsave it will tell us that the body HTML\nelement is just an object when it's\ninside\nJavaScript so just like any other object\nthis has properties and methods we can\nuse so one useful property of the body\nelement is inner HTML which we saw\nearlier so down here let's type\ndocument dot body dot inner Capital\nHTML so the inner HTML property controls\nall the HTML inside the body that's why\nit's called inner\nHTML so if we access this property it\nwill give us all the HTML inside the\nbody so let's console.log to\nconfirm\nconsole.log and\nsave and inner HTML will give us all of\nthis HTML inside the body\nelement and if we change the inner HTML\nproperty it will change the HTML inside\nthe body element so let's create a new\nline and we'll type document\ndot\nbody do inner Capital\nHTML and we'll change it to the string\nchanged so this will replace all of the\nHTML inside the body with a text changed\nif we\nsave that's exactly what it does and we\ncan actually confirm this by going into\nthe elements tab so this tab is for HTML\nand CSS we can find the body element\nexpand it and you can see all of the\nHTML that we had before was replaced\nwith\nchanged and don't worry about this part\nthis part is just added by live server\nafter so this shows that inner HTML\ngives us control of all the HTML inside\nthe body we can get this h HTML and we\ncan also change this\nHTML now another feature of inner HTML\nis that we can replace this HTML with\nnew HTML code not just text so for\nexample instead of just text we can\nreplace it with the code less than\nbutton greater than and also less than\nslash button greater than so so this is\nHTML code for creating a button and\ninside the button let's put the text\ngood\njob and now this code will replace all\nthe HTML inside the body with this new\nHTML if we\nsave it removes all the previous HTML\nand this new HTML creates this button so\nusing this inner HTML property\nJavaScript can replace the HTML inside\nthe body to whatever we want we have\nfull control of the web\npage all right now we're going to learn\na method of the document object that we\ncan use as a reminder a method is a\nfunction that is saved inside an\nobject so we're going to learn a very\nimportant method called document. query\nselector we just learned that\ndocument.body lets us get the body\nelement and put it inside our\nJavaScript document. query selector lets\nus get any element from the page and put\nit inside our JavaScript let's give it a\ntry so first we'll comment out the\nprevious code using\nslashstar and star\nslash let's create some new lines at the\ntop\nand let's type\ndocument. query capital S\nselector and\nbrackets so document. query selector\nlets us get any element from the page\nand put it inside our\nJavaScript between these brackets we're\ngoing to put a string this string tells\nJavaScript which HTML element to get\nfrom the page\nso if we type\nbutton this will get the first button\nelement from the page and put it inside\nour JavaScript so let's console.log this\nto\nconfirm\nconsole.\nlog close bracket and\nsave and let's go back to our\nconsole now it will tell us that\ndocument. query selector got this button\nelement and put it inside our JavaScript\nwhich you can see in the console and if\nI hover over this button element it will\ntell us that it is exactly the button on\nthe page so that's what document. query\nselector does it can get any element\nfrom the page and put it inside our\nJavaScript this string tells it which\nelement to get if we type button it will\nget the first button element from from\nthe page if we type\nbody this will now get the first body\nelement from the page so it will do the\nsame thing as\ndocument.body but for now let's just\nchange this back to Button as an example\nand\nsave so remember when an HTML element is\ninside JavaScript it's just a JavaScript\nobject so this button element\nis also just an object and it has\nproperties and methods we can\nuse every HTML element actually has a\nproperty called inner\nHTML which lets us control the HTML\ninside the element so for this button\nelement let's type at the end dot inner\nHTML and this will give us the HTML\ninside the button if we\nsave it will give us\nhello and again if we change the inner\nHTML property it will change the HTML\ninside the button so let's make a copy\nof this code we'll select it and\nrightclick\ncopy and down\nhere right click and\npaste and let's change the inner HTML\nproperty using an equal sign and the\nstring\nchanged so this will only change the\nHTML inside the button which is here to\nchanged if we\nsave you can see that the text inside\nthe button is now changed a little\nsyntax shortcut I'm going to show you is\nthat for the dot notation we can\nactually put it on multiple lines so we\ncan type document. query selector and\nthen put doin HTML on a separate line to\nmake it easier to read and make sure to\nput a tab at the front so that we know\nit's a continuation of the previous\nline okay so using document. query\nselector we can get any element from the\npage put it inside our JavaScript and\nthen we can control the h HML inside\nthat element and this allows us to only\nchange the parts of the page that we\nneed next what if we have two buttons on\nthe page so let's go up here and we'll\ncreate another button using less than\nbutton greater than and we'll have the\ntext\nsecond\nbutton and\nSave so now we have two buttons on the\npage but document. query selector will\nonly get the first button on the page\nhow do we get this second button the\nsolution is that we're going to add an\nattribute to this button called the\nclass attribute so in the opening tag\nwe're going to type space class equals\ndouble quotes So the class attribute\nsort of adds a label to this button so\ninside the double quotes we're going to\nlabel this button a JS dash\nbutton and now that we labeled this\nbutton we can select it using document.\nquery\nselector so at the bottom here we'll\ntype\ndocument. query selector again and\nbrackets and we'll type A String inside\nand this time we're going to start with\na DOT when we start with a DOT this\nmeans that it's going to look for a\nclass rather than an element name so\nwe're going to look for the class\njs-\nbutton and now document. query selector\nwill select an element with the class JS\nbutton which is this element here so\nlet's confirm this by\nconsole. logging this\ncode and\nsave and now you will see that this code\ngives us the second button on the page\nso using a class attribute and then\nstarting with a dot in query selector we\ncan get any specific element from the\npage and put it in our\nJavaScript by the way when we start with\na DOT this is called called a class\nselector and this is also used in CSS to\nstyle elements with a specific class in\nfact anything we use in CSS can also be\nused in this\nstring and also a common practice is to\nstart the class with\njs- to make it clear that this class is\nbeing used in\nJavaScript and again HTML elements are\nJavaScript objects so this second button\nis also just an object and remember\nobjects are values and we can save them\ninside a variable so instead of\nconsole.log let's create a variable\nusing const and we'll name the variable\nbutton capital E\nelement we usually end the variable name\nwith element or LM to make it clear\nclear there's an HTML element inside\nthis\nvariable and finally we'll type an equal\nsign to save this element and we can\nremove this extra\nbracket and now if we console.log this\nvariable\nconsole.log\nbutton\nelement and\nsave it will tell us that the second\nbutton was Sav saved inside this\nvariable so using the Dom we can get\nHTML elements from the page put it\ninside a JavaScript and then save it in\na variable so the Dom combines\nJavaScript and HTML together it gives\nJavaScript full control of the web\npage all right now that we learned how\nto use the Dom let's do some practical\nexamples so I've actually prepared some\nprojects that we can do for this lesson\nto open these projects we'll go to our\nbrowser and create a new tab at the\ntop and here we'll type\nsuper\nsimple. SL projects\nslod and press\nenter on this page we'll be working on\nthree projects the YouTube subscribe\nbutton the rock paper scissors project\nwe've been working on for the last few\nlessons and this Amazon shipping\ncalculator and you'll notice that these\nprojects modify the web page so we're\ngoing to be using the Dom to create\nthese projects and in the next lesson\nwe're going to use CSS to style these\nprojects and make them look nice and you\ncan preview that by clicking\nhere so using CSS we can make the sub\nsubscribe button look like the actual\nsubscribe button on YouTube and if we\nclick this link to see the rock paper\nscissors game you'll see that we'll make\nit look really nice with these icons but\nfor this lesson we're only going to\nfocus on the functionality and not the\nstyling so let's go back to the projects\nwe'll click back and click back\nagain until we're at projects sdom\nand we're going to create the\nfunctionality for these projects first\nso before we start let's create a new\nfile just for these projects we'll go to\nour code editor and click this icon and\nthen click this icon to create a new\nfile let's name this file 09\ndd-\nprojects. HTML and press\nenter now let's copy dom. HTML into this\nfile so we'll open it and then click in\nhere and type control a or command a to\nselect the code and then\nrightclick\ncopy and in\nhere right click and\npaste now let's close our files and\nwe'll prepare this file\nso let's scroll up and we'll change the\ntitle to Dom\nprojects and let's remove our HTML but\nkeep the script\nelement and we'll also remove the\nJavaScript from\nbefore finally let's save this file and\nwe'll open it in the browser by right\nclicking open with live server\nand let's also open the console just in\ncase right click click\ninspect and then click the\nconsole all right we're ready to start\nwith the projects let's go back to super\nsimple\ndodev and we'll start by creating the\nYouTube subscribe button let's actually\npress refresh to get it back to normal\nand when we click this button it will\nchange to subscribe\nred first let's create the HTML elements\nfor this project we'll go to the body\nwe'll create some new\nlines and let's create the paragraph\nfirst we'll type less than P greater\nthan and inside the paragraph we'll have\nthe text\nYouTube\nsubscribe\nbutton and now let's create the button\nso on the next\nline we'll type less than button greater\nthan and inside the button\nsubscribe now let's save and go back to\nour\nTab and now we have the HTML elements\nthat we need so now let's make this\ninteractive with JavaScript and remember\nwe have a process for this first we'll\nfigure out what steps we need to do this\nis called an algorithm and then we'll\nconvert these steps into code so the\nsteps that we need here are when we\nclick this button if the text is\nsubscribe we'll change it to\nsubscribed otherwise we'll change it\nback now let's convert these steps into\ncode let's go to our button element and\nwe're going to add an onclick attribute\nwe'll type space on click equals double\nquotes and inside here we'll write some\nJavaScript so first we need to get the\ntext inside the button and we learned\nhow to do this earlier we can use\ndocument. Query selector to put this\nbutton into our JavaScript and then use\ninner HTML to get this HTML inside the\nbutton so in our code let's type\ndocument. query\nselector brackets and a string and as we\nlearned we're going to use a class\nattribute to select this specific button\nso in the opening tag let's add a class\nattribute and let's make the class\njs-\nsubscribe Dash\nbutton and then inside document. query\nselector we're going to type a DOT to\nselect a class and we're going to select\nthe class\njs-\nsubscribe Das\nbutton and now let's console.log this to\nconfirm that we got this button so at\nthe front\nconsole.log and\nsave and now let's click our\nbutton and it will show us that\ndocument. query selector got the button\non the page so now let's save this\nbutton in a variable so we can use it\nlater instead of\nconsole.log let's type const to create a\nvariable and we'll name it\nbutton\nelement and make it equal to this\nresult so now that we have the button\ninside our JavaScript we're going to\ncheck if the text inside the button is\nsubscribe to check the text we can use\nan if statement so at the bottom here\nwe're going to type if brackets and\ncurly\nbrackets and inside this condition let's\nget the text inside the button so we'll\ntype button\nelement do inner Capital\nHTML and we're going to check if it's\nequal to subscribe so we'll type triple\nequal the string\nsubscribe now if it is equal to\nsubscribe inside the curly brackets\nwe're going to change the text in the\nbutton to\nsubscribed so let's type the code\nbutton\nelement do inner Capital HTM L and we'll\nchange it with an equal sign to the\nstring\nsubscribed and the last step is\notherwise we'll change it back so we'll\nadd an else to this if\nstatement else and curly brackets and\ninside we're going to change the text\nback to\nsubscribe so let's type\nbutton\nelement. inner Capital\nHTML and make it equal to the string\nsubscribe and\nsave now before you try out this project\nmake sure that the text inside the\nbutton has no spaces or new lines around\nit and it looks like this and I'll show\nyou why in a second let's go to our\nproject and try it out so when we click\nthis button it will change to the text\nsubscribed if we click it again it will\ngo back to the original text so that's\nhow we create the Subscribe button\nproject using the Dom so now let's go\nback into our code and I'll show you why\nif we add new lines\nand some spaces around this\ntext there's actually going to be some\nproblems so if we save this\ncode and then go back to our project and\nclick the button again you'll notice\nthat it no longer changes the text and\nthat's because now we have a bunch of\nspaces around this text and these spaces\nwill show up in inner\nHTML and now inner HTML will not equal\nexactly\nsubscribe so how do we solve this\nproblem when there are spaces around our\ntext to solve this we're going to use a\ndifferent property of an HTML element so\ninstead of the inner HTML property we're\ngoing to use the property inner capital\nT\ntext so inner text will give us the text\ninside this element but without all the\nspaces around it\nso now this will equal exactly\nsubscribe if we save and go back to our\nproject and click it again it'll start\nworking again so that's the inner text\nproperty of an HTML element it gets us\nthe text without the extra\nspaces so before we move on to the\nsecond project I'm going to show you how\nto make our code\ncleaner right now we're mixing a HTML\nand JavaScript together so to make our\ncode cleaner and easier to read we're\ngoing to separate the JavaScript code\nand to do that we're going to put this\ncode in a function\ninstead so inside the script\nelement let's create a function using\nfunction and we'll name the function\nsubcribe brackets and curly brackets\nand inside these curly brackets we're\ngoing to move all of this code so let's\nselect this\ncode and we'll right\nclick\ncut and in here right click and\npaste and if we need to fix the\nformatting we can select these lines and\npress tab a few times and now that we\nhave this function we're going to go to\nthe onclick attribute and and we're\ngoing to call this function so we'll\ntype the function name\nsubscribe and\nbrackets so this will run all the code\ninside the function so it will do the\nsame thing as before except now our code\nis cleaner because we grouped all the\nJavaScript code at the bottom and we're\nno longer mixing as much HTML and\nJavaScript\ntogether now let's move on to the second\nproject we'll go back to superimple\ndodev and we're going to work on the\nrock paper scissors project so let's\nclick this\nlink and it will show us the next\nversion of this project so you notice a\nfew changes here the first change is\nthat we're going to show the score on\nthe page instead of in a popup and the\nsecond change is that when we click one\nof these buttons to play the game it\nwill show us the result and the moves\nthat we picked on the page rather than\nin a\npopup let's create a new file for this\nrock paper scissors game for this lesson\nso let's go to our code\neditor and we'll click this icon and\nclick this icon to create a new file and\nwe'll name this\n09-\nrock- paper Das\nscissors.\nHTML and press\nenter and let's copy the previous rock\npaper scissors which is here we'll click\nhere and type control a or command a\nright click\ncopy and here right click and\npaste and let's hide our\nfiles and let's save this F file and we\ncan also close 08 rock paper scissors\nand finally we'll open this in the\nbrowser by right clicking open with live\nserver now we're ready to begin the\nsecond project so let's go back to the\nproject at super simple Dev and we're\ngoing to start by putting the score on\nthe page so to do this we're going to\nneed somewhere to put the score so let's\ncreate an HTML element for this we'll\nscroll up to our\nHTML which is\nhere and after the scissors button let's\nadd a paragraph element where we're\ngoing to put our score so less than P\ngreater\nthan and let's add a class attribute so\nwe can select this element in our\nJavaScript so in the opening tag we'll\ntype space class equals double quotes\njs-\nscore now that we have a class let's get\nthis element in our\nJavaScript so let's just do it down here\nso we'll type\ndocument.\nquery\nselector brackets and a string and then\nwe're going to type a Dot and we're\ngoing to select the class js- score so\njs-\nscore so this will get the paragraph\nelement from above and put it inside our\nJavaScript and now let's put the score\ninside the element to do that we can use\ninner\nHTML dot inner Capital\nHTML and we'll make it equal to the\nscore if we scroll\ndown we actually create the score down\nhere so we can actually just copy this\nstring so we'll select it\nrightclick\ncopy and let's scroll\nup to here and I'll actually put this on\na separate line to make it easier to\nread and now here we're going to type a\nstring using back\nticks and inside the string we're going\nto rightclick and\npaste so this will put the score that we\nused to have in our popup inside this\nelement so inside this\nparagraph if we\nsave and then go back to our\ntab you can see that now it displays the\nscore on the page now before we move on\nI want want to point something out with\nHTML so remember that our reset score\nbutton was beside our other buttons and\nnow it's below them so what determines\nif an element appears beside something\nor below something so the paragraph\nelement Here is known as a block element\na block element will always take up an\nentire line by itself so this line\nalready has some buttons so the\nparagraph will take up the entire line\nunder the buttons that's why this text\nappears under the buttons and not beside\nthem and also because a block element\nlike this paragraph takes up this entire\nline the next button has to appear below\nit so that's why we get this layout here\nso this is just a short review of\nlayouts if you want to learn this in\nmore detail you can check out my HTML\nand CSS full course in the video\ndescription all right the next feature\nwe're going to do is if we play the game\nwe also want to update the score right\nnow if we play it doesn't update it on\nthe page let's fix this in our\nJavaScript so let's go down to where we\nupdate the score so we'll scroll\ndown which is right here we update the\nscore and save it in local storage and\nafter we do this we're also going to\nupdate the score on the page so we can\nactually use the same code that we used\nabove which is here so let's make a copy\nof this code\nrightclick\ncopy and down\nhere right click and\npaste and I'll add a tab at the front if\nwe save and then try out our game we'll\nclick a move press\nokay and now you'll notice the score\nalso updates on the page so let's go\nback into our code and do some cleanup\nso you notice that this code is the same\nas the code we had above and this is a\ngreat situation to use a function to\nreuse this code so at the bottom here\nlet's create a function using function\nand we'll call it\nupdate\nscore\nelement brackets and curly\nbrackets and we'll move this code into\nthe function so we'll select it right\nclick\ncopy and in here right click and\npaste and now instead of writing this\ncode multiple times we're just going to\ncall the function\nupdate score element and\nbrackets this will run all the code\ninside the function so it does the same\nthing as before except we can reuse the\ncode so let's scroll back\nup and instead of typing out all this\ncode again we can just use our\nfunction\nupdate\nscore element\nand\nbrackets now let's\nsave it will display the score on the\npage at the start and when we click a\nmove and click okay it will update the\nscore on the page so the last feature\nwe're going to do in relation to the\nscore is when we click the reset score\nbutton we also want to update the score\non the\npage right now if we click it it doesn't\nactually update it\nso let's go into our code and let's go\nto the reset button which is here and\nafter we reset the score we're going to\ncall that function again\nupdate\nscore element and\nbrackets if we\nsave and now let's play the game and\npress okay so we have a score and if we\nclick reset score it will reset\neverything back to zero so now we\nfinished the score let's go back to\nsuper simple\nDev and play the\ngame and now we're going to work on this\nsection we're going to show the result\nand the moves that we picked on the page\nso first let's create some paragraphs\nfor these as well we'll go to our\nHTML and above the score\nlet's add a less than P greater than\nthis is going to be the result so let's\ngive it a class of\njs-\nresult and let's create another\nparagraph less than P greater than and\nwe'll give this one a class equals\njs- moves\nnow let's use the Dom to put the result\nand the moves in these paragraphs feel\nfree to pause the video if you want to\ntry it yourself first so let's scroll\ndown to where we display the\nresult which is here so we display it in\na popup and instead of a popup we're\ngoing to get the paragraph and put this\nresult inside the paragraph so we'll\ntype\ndocument. query\nselector brackets and a string and we'll\ntype a DOT and select the class\njs-\nresult and then dot inner Capital\nHTML and we'll change this to\nresult and now let's also display the\nmoves so we'll type some new lines and\ndocument. query selector again brackets\nand a string dot\njs-\nmoves do inner Capital\nHTML and make it equal to this text\nright here so let's type a template\nstring because we're going to insert our\nMoves In inside the string and we'll\nType\nU and we'll insert the player move\ndollar curly\nbrackets Player move and then a dash and\nthen the computers move so dollar curly\nbrackets again and\ncomputer\nmove computer at the end so now that\nwe're displaying everything on the page\nwe don't need this popup at the end so\nwe can actually delete this\npopup all right now let's\nsave and go back to our\nTab and play our\ngame now it will show the result and the\nmoves that we picked on the page instead\nof in a popup let's play it again to\nmake sure it works and finally when we\nclick reset score it it will reset\neverything back to zero and that's it\nnow we're displaying everything on the\nweb page using the\nDom now let's move on to the third and\nfinal project we'll go back to Super\nsimple.\ndeev and we'll click back to go back to\nour projects and we're going to create\nthis third project here which is an\nAmazon shipping\ncalculator the way this works is is that\ninside this text box we're going to type\nthe cost of an order in dollars if the\norder is under\n$4 for example\n$25 and we click\ncalculate it will add $10 of shipping\nand display the total down here but if\nwe type a cost that is over\n$40 like 50 and press\ncalculate it will be free shipping so so\nit will display the same total down here\nso let's learn how to create this using\nthe\nDom let's go back to our 09 Dom projects\nfile and we'll start by creating the\nHTML\nelements so under our subscribe\nbutton let's create this paragraph using\nless than P greater than\nAmazon shipping\ncalculator and next let's create this\ntext box so the HTML element for a text\nbox is called input so we'll type less\nthan input greater than so the input\nelement is special because it doesn't\nrequire a closing tag this is called a\nvoid\nelement and lastly let's create the\nbutton so here we create less than\nbutton greater than\ncalculate now let's\nsave and open the tab for this file\nwhich is right here and we have the text\nthe text box and the button that we need\nnow one other thing we're going to add\nis that in the final project if we don't\nhave anything in the text box we're\ngoing to have this gray text so this is\ncalled a placeholder to add a\nplaceholder to a text box we're going to\nuse the placeholder attribute so inside\nour input element we're going to type\nSpace Place\nholder equals double quotes and inside\nthe quotes we'll put the text we want as\nthe placeholder which is cost of\norder and\nsave now if we go back to our project we\nnow have a placeholder in our text box\nthat disappears when we start\ntyping so that's all the HTML that we\nneed now let's work on the JavaScript\nand again we'll figure out what steps we\nneed to do so when we click this button\nwe're going to get the text inside the\ntext box if the amount is below $40\nwe'll add $10 of shipping and then we'll\ndisplay the total on the page let's\nconvert these steps into code so we'll\ngo to our button and add and onclick\nattribute and inside here let's also\ncreate a function to separate our\nJavaScript code like we did before so in\nthe script we're going to create a\nfunction function\nand let's name it\ncalculate total brackets and curly\nbrackets and inside on click we're just\ngoing to call the function so\ncalculate\ntotal\nbrackets the next step is to get the\ntext inside the text box so first let's\nget this input element and put it inside\nour J JavaScript to do that we can use\ndocument. Query selector again so we'll\nadd a class to this input so we can\nselect it class equals\njs-\ncost-\ninput and then inside our JavaScript\nwe'll use\ndocument.\nQuery\nselector brackets and a string and a Dot\nand this class\njs-\ncost-\ninput so this code will get the input\nelement and put it inside our JavaScript\nlet's confirm by\nconsole. logging the\nresult and\nsave and now when we click the calculate\nbutton it will give us\nthe input element from the page let's\nsave this input element in a variable so\nwe can use it later instead of\nconsole.log we'll use const and we'll\nname the variable\ninput element and make it equal to this\nelement and remove the extra\nbracket and next we need to get the text\ninside the input element so so far in\nthis lesson we've been using the\nproperty inner HTML to do this however\nfor input elements you notice that there\nis no HTML inside so for input elements\nwe're going to use a different property\ncalled\nvalue so at the bottom here we're going\nto type\ninput\nelement.\nvalue this is how we get the text inside\na text box\nso let's console.log this to confirm\nthat it works so we\nconsole do\nlog and\nsave and now let's type something in the\ntext box like 50 and click\ncalculate and input. value will give us\nthe text inside the text\nbox let's save this text in a variable\nso so we can use it later con and we'll\nname the variable cost and make it equal\nto the text in the text\nbox the next step is to check if this\ncost is under\n$40 if it is We'll add\n$10 so down here let's type if brackets\nand curly\nbrackets and inside the condition we'll\ncheck if cost is less than\n40 and if it is inside the curly\nbrackets we'll do cost equals itself\nplus $10 of shipping and remember when\nwe change a variable we have to switch\nfrom const to\nlet and finally we're going to display\nthe total cost on the page so let's\ncreate a paragraph where we can display\nthe cost so down here we'll create a\nparagraph less than P greater than let's\ngive it a class\njs- total Das cost and now inside our\nJavaScript let's use\ndocument. Query selector brackets and\nstring and we'll Type A Dot and the\nclass\njs- total Das cost and we're going to\nput the cost inside the paragraph we can\nuse dot inner Capital\nHTML and make it equal and let's use a\ntemplate string so back ticks and we'll\nhave a dollar and we're going to insert\nthe cost using dollar and curly brackets\ncost now let's save and try out this\nproject so first we'll type a cost that\nis over\n$40 like 50 if we press\ncalculate we're not going to add $10 of\nshipping and we'll display the same\ntotal on the page now let's try a number\nunder\n$40 like 25 and press calculate\nand this number doesn't look right it's\nsaying that we have to pay\n$2,510 so what's going on here let's go\ninto our code and let's use console.log\nto figure out what's wrong so first\nlet's console.log the cost to make sure\nthat we're getting the right number from\nthe text box so down here\nconsole.log the cost\nand save and then let's Type 25 again\nand press\ncalculate and it will give us 25 so\nwe're getting the correct text from the\ntext box now let's console.log down here\nto see if the math is working so we'll\ntype\nconsole.\nlog\ncost and\nsave and let's try 25 again and\ncalculate\nand down here when we add 10 this is\nwhere things go wrong and it results in\n20510 so it's not doing math properly\nhere so let's check if cost is a number\nto make sure that it's doing math so\nhere we'll type\nconsole.log the type of\ncost and Save\nlet's Type 25 again and calculate and\naha it's telling us that the cost is a\nstring so this is actually not a number\nit is a string that's why it's not doing\nmath so remember from the strings lesson\nwhen we add a string with a number\nJavaScript will automatically convert\nthis number into a string and combine\nthem together that's that's why it just\ncombines 25 and 10 here this is called\ntype\ncoercion so whenever we get a value from\nthe Dom like this the value will be a\nstring so in order to do math we have to\nmanually convert this string into a\nnumber to do that JavaScript has a\nbuiltin function called number so before\nthis code we're going to type capital n\nnumber Open Bracket and close bracket so\nthe number function takes whatever's\nbetween the brackets and manually\nconverts it into a number so now if we\nsave and we Type 25 and press\ncalculate the cost is now a number and\nit will do the math properly and give us\n35 so remember whenever we get a value\nfrom the Dom the value will be a string\nso if we want to do math with it we have\nto manually convert this value into a\nnumber first so now let's remove the\nconsole. logs that we used to figure out\nthis\nproblem and\nsave okay we're going to add one more\nfeature to this project let's go back to\nsuperimple\ndodev and inside the text box we're\ngoing to Type 25 and press\nenter so pressing enter will also\ncalculate the total and display it on\nthe page so let's learn how to create\nthis feature so if we go back to our\ncode so far in this course we've been\nusing the attribute\nonclick which runs some JavaScript when\nwe click an element HTML has another\nattribute we can use called on key down\nwhich runs JavaScript when we press a\nkey down on our keyboard so inside the\ninput this time let's add the attribute\non key down equals double quotes and\nthen inside here\nconsole. log and the string\ntyping so now every time we type in the\ninput it will console.log this message\nlet's save it and give it a try we'll go\nto the tab for this file and then inside\nthe text box we'll type some numbers and\nyou can see that every time we type\nsomething it will run this code and\ndisplay this\nmessage so that's how we do something\nwhen we type in an element so clicks and\nkey Downs are known known as events on\nclick and on key down are known as event\nlisteners they check for events and runs\nJavaScript when those events happen now\nin addition to clicks and key Downs\nthere are many other events we can\nlisten for in\nJavaScript okay so now let's figure out\nwhat steps we need to do for this\nproject when we press a key down in the\ntext box we're going to check if the key\nis the enter key if it is we'll do the\nsame thing as the calculate\nbutton so how do we know what key we\npressed inside on key down we're\nactually given a special object called\nevent so instead of this string let's\nremove it and we'll\nconsole.log\nevent so this is an object that's\nprovided to us by JavaScript and it\ncontains information about the event\nevery event listener including on click\nalso gets an event object if we\nsave and type in this text\nbox it will show us that event is this\nobject and inside the object it has a\nbunch of information including the key\nthat we typed so here let's use the\nevent object and we'll get dot key and\nsave so now inside this text box if we\ntype something it will tell us the key\nthat we pressed and if we press\nenter it will tell us that the key is\nenter so the next step is to check if\nthe key is enter and we can do that\nusing an if statement so in our\ncode we'll type a new line\nif brackets and curly brackets and\ninside the condition we'll check if\nevent. key is equal to the string\nenter if it is equal to enter we're\ngoing to do the same thing as the\ncalculate button so we can actually just\nuse this function again inside the curly\nbrackets we'll type calculate\ntotal and\nbrackets and\nsave so now let's go back to our project\nand type 25 enter and it will calculate\nthe total and display it on the page so\nthat's how we create this keyboard\nfeature of this project lastly let's\nclean up our code and move this into a\nfunction like the rest of our code so\ninside the script\nelement let's create a new function\nusing\nfunction and we'll name it\nhandle cost key down brackets and curly\nbrackets and let's move this code into\nthe function we'll select it\nrightclick\ncut and in here right click and paste\nif we need to fix the formatting we can\nselect these lines and press Tab and\nlet's remove this\nconsole.log and now up here we're going\nto call this\nfunction\nhandle cost key down and\nbrackets now the last thing we have to\ndo is that event does not exist inside\nthis function so we have to put the\nevent object into the function\nand remember to put a value into a\nfunction we can use a\nparameter so between these brackets we\ncan create a parameter called event and\nnow to save something inside this\nparameter we're going to go up to these\nbrackets and type\nevent this will take the event object\nand put it inside the function where we\ncan use it just like a variable so now\nif we\nsave and try out the project 25 enter so\nthis still works and now we finished all\nthree projects in this lesson so in the\nrest of this lesson we're going to learn\nsome more details about\nJavaScript in the last project we\nlearned how to manually convert a string\ninto a number using the number function\nwe can also convert the other way from a\nnumber to a string so let's go to the\ntop of the script\nelement and we can type capital S string\nand brackets so the built-in string\nfunction will convert a value into a\nstring between the brackets we can put a\nnumber like 25 and this will convert the\nnumber into the string\n25 the next detail we're going to learn\nis a special behavior of\nstrings So Below this line we can type\nconsole do log the string\n25 minus\n5 so if a string only contains a number\nand we subtract multiply or divide\nJavaScript will automatically convert\nthe string into a number so this gets\nconverted into the number 25 minus 5 and\nif we save it will do math and give us\n20 so this is another example of type\ncoercion or automatic type\nconversion however it's not recommended\nto do math with strings like this\nbecause adding Works differently for\nexample on a new line let's type\nconsole.log the string 25\n+ 5 and\nsave this will convert the number into a\nstring and combine them together into\n255 so because adding strings Works\ndifferently the best practice is always\ndo math using numbers don't do math\nusing strings if we need to we can\nmanually convert the string into a\nnumber using the number function like we\ndid here the last thing we're going to\nlearn in this lesson is another built-in\nobject called the window object so in\nthis lesson we learned about the\ndocument object the document object\nrepresents the web page the window\nobject represents the browser so let's\ngo into our script element and Try It\nOut Below this we'll Type\nwindow so so this is the window object\nand it represents the browser because it\nrepresents the browser everything inside\nthe browser is inside the window object\nso let's think what's inside the browser\nwell the web page is inside the browser\nso the document object is inside the\nwindow object if we type\nwindow.\ndocument this will give us the same\ndocument object that we've been using in\nthis lesson so what else is part of the\nbrowser well the console is also part of\nthe browser so here if we type\nwindow.\nconsole this will give us the same\nconsole object we've been using in this\ncourse so we can actually do\nconsole.log and the string window\nand\nsave and this will do the same thing as\nconsole.log what else is part of the\nbrowser well popups are also part of the\nbrowser so if we type\nwindow.\nalert this will give us the same alert\nfunction that we've been using in this\ncourse to create\npopups however you might have noticed\nthat we never Type window window. doent\nor window.\nconsole.log and that's because the\nwindow object has a shortcut we don't\nhave to type window dot at the front we\ncan just type document or console and\nJavaScript will automatically add window\ndot at the front for us so window is a\nbuilt-in object that represents the\nbrowser we don't have to type out window\ndot ourselves because JavaScript adds it\nfor us automatically but it's still nice\nto know how this works behind the scenes\nand that's the end of this lesson in\nthis lesson we learned about the\ndocument object model or the Dom which\nallows JavaScript to fully control the\nweb page we learned how to use document.\nQuery selector to get elements from the\nweb page and put them inside our\nJavaScript we learned how to use inner\nHTML to modify the HTML inside an\nelement we worked on three projects\nusing the Dom we learned how to make\nelements interactive with the keyboard\nusing on key down and we learned some\nmore details about strings as well as\nthe window object which represents the\nbrowser here are some exercises you can\ndo on your own to practice using the Dom\nin this lesson we're going to add CSS to\nall of our projects and we're going to\nfinish our rock paper scissors project\nCSS is a different language that changes\nthe appearance of our website it's one\nof the three languages that we use to\ncreate websites so first let's look at\nthe projects we're going to work on in\nthis lesson we'll go to our browser and\ncreate a new tab at the\ntop and here we're going to type\nsuper simple\ndodev SL projects slash\nDom Das\nwith-\nCSS and press\nenter so these are the same three\nprojects we created in the previous\nlesson except this time we're going to\nadd CSS to make these projects look nice\nlet's start by creating a copy of the\nProject's HTML file from the previous\nlesson we'll go to our code\neditor and click this icon to show our\nfiles and then here we're going to\nselect\n09-- projects we're going to right\nclick\ncopy and down here right click and\npaste and let's rename this file by\nright-clicking\nrename at the end we're going to remove\ncopy and at the beginning\nwe're going to change it to 10 and press\nenter now let's hide our\nfiles and we're going to open 10 Dom\nprojects in the browser by\nright-clicking open with live\nserver now we can close our previous\ntabs as well as the previous code from\nlesson 9 which is this file and these\ntwo\nand now we're ready to add CSS to our\nprojects we'll start with the YouTube\nsubscribe button let's go to the tab for\nour\nproject and we're going to style this\nbutton first so we reviewed CSS in\nlesson 4 and one of the ways we can\nwrite CSS code is using the style\nelement so inside the head section we're\ngoing to create an element using less\nthan style greater than so the style\nelement lets us write CSS code inside so\ninside here we're going to write\nbutton open curly bracket close curly\nbracket so the code in front of the\nbrackets is called the CSS selector this\ntells the computer which elements we\nwant to style or change the appearance\nso button will style all button elements\non the page but in this situation we\nonly want to style the Subscribe button\nbecause the calculate button will be\nstyled differently so to style a\nspecific element we can use the class\nattribute so if we look at our button\ncurrently it already has a class of JS\nsubscribe button but this class is being\nused by our JavaScript a good practice\nis to add a different class that will be\nused by\nCSS so an element can have multiple\nclasses we just separate them with a\nspace so inside this class attribute\nwe're going to type space and add\nanother class\nsubcribe dash\nbutton now this element has two classes\nand we're going to use this second class\nin our\nCSS so to style a specific class we're\ngoing to remove button and we're going\nto type a DOT so starting with a DOT\nmeans we're going to style a class\nrather than an element name so we'll\nstyle the class\nsubscribe Das\nbutton which is this button right here\nand now inside these curly brackets\nwe're going to tell the computer how to\nstyle this button for example border\ncolon none and\nsemicolon if we\nsave this will remove the border from\nthe button so it no longer has a border\nlike this button so that's how we style\na specific element with CSS we add a\nclass to the element and then inside CSS\nwe start with a DOT and the class and\nbetween the curly brackets the code on\nthe left is called the property\nthis tells a computer what we want to\nchange on the right is called the value\nthis tells a computer what we want to\nchange the property to we separate the\nproperty and value with a colon and we\nend the whole thing with a semicolon so\nthis is also called a property value\npair as a reminder this is just a review\nof CSS if you want to learn CSS in more\ndetail you can check out my HTML and and\nCSS full course in the video\ndescription so we just added one style\nto this button we're going to add more\nStyles so that it looks like our final\ndesign to make this easier I'm going to\nrearrange my windows and I'm going to\nput the final design at the bottom and\nthen our project at the\ntop this will make it easier to compare\nthe two\ndesigns next to make it look like the\nfinal design we're we're going to style\nour element one by one let's go back to\nour\ncode and press enter and next let's\nchange the background color to Black to\ndo that we'll type\nbackground Das color colon black and\nsemicolon and\nsave now our button has a black\nbackground let's keep going one by one\nwe change the text color to white next\nso in our code we'll type color colon\nwhite and semicolon and\nsave now if you're wondering how I know\nall these properties you can usually\nfind them by searching in Google just\nmake sure you search for what you are\ntrying to\ndo let's keep going one by one the next\nthing we'll change is we're going to add\nspacing on the inside of the button in\nCSS space on the inside of an element is\ncalled padding so we'll create a new\nline and we'll use the property\npadding Das toop colon\n10px and\nsave so this will add space on the\ninside of the element called the padding\nat the top of 10 PX\nso the PX here means pixels a pixel is a\nunit of measurement in computers your\nscreen is made up of many small little\nsquares each of these squares is called\na pixel so a pixel is the smallest thing\nthat you can have on your screen screen\nsizes are measured in pixels images and\nvideo sizes are also measured in pixels\nand don't worry the more you work with\npixels the more you'll get used to how\nbig a pixel is so in this example 10\npixels is equal to this amount of space\nand it looks pretty close to the final\ndesign so let's keep going we'll add\nspace on the inside of the element at\nthe bottom this time so we'll create a\nnew line and type padding Dash bottom\ncolon\n10px again and Save\nand that adds space at the bottom of the\nelement of 10\npixels next let's increase the space on\nthe left and the right we'll go into our\ncode and add padding Das left colon 10\npixels and padding Das right colon 10\npixels let's save\nand it added some extra space on the\nleft and right but I think our final\ndesign has a little more space on the\nleft and right so let's go back and\nincrease our padding so instead of 10\nlet's try 15 on both\nsides so we'll\nsave and now the spacing looks close\nenough to the final\ndesign so in CSS it's normal to do some\ntrial and error to get the styling right\nlet's keep styling this one by one next\nwe'll make the text thicker or bold so\nlet's go into our code and to change the\nthickness of the text we'll use the\nproperty font Das weight colon\nbold let's\nsave and that will make our text bold so\nwe're almost there now let's make the\ncorners rounded look like in the final\ndesign we'll go back to our CSS and the\nproperty for making the corners round is\ncalled\nborder Das\nradius and we'll make it colon 5\npixels let's\nsave and you can see that it made our\nCorners round so the pixels here tells\nthe computer how round we want the\ncorners to be the higher the pixels the\nmore round it will get\nso if we change this to 10 pixels and\nsave it will make the corners even more\nround so let's change this to something\nreally big to make it completely round\nwe'll change this to 50 pixels and\nsave and now our button is completely\nround the last style we're going to add\nis in the final design if we put our\nMouse over the button it turns into this\nhand the icon so we call this a pointer\nand we're going to do the same thing in\nour project so let's go to our code and\nto create that pointer icon we're going\nto use the property\ncursor colon\npointer and let's\nsave and put our Mouse over the button\nand you'll notice it turns into this\nhand pointer icon and that's it now our\nsubscribe button looks like the final\ndesign next let's click the Subscribe\nbutton you'll notice that it only\nchanges the text but if we click the\nfinal\ndesign it also changes the background\ncolor and the text color so we're going\nto learn how to change the CSS when we\nclick a\nbutton let's go back to our code and\nthis time we're going to scroll down to\nour\nJavaScript which is here so we learned\nin the previous lesson we can get HTML\nelements from the page and put them\ninside our JavaScript and we also\nlearned that these HTML elements are\njust JavaScript objects and they can\nhave properties like inner text and\ninner\nHTML every element has another property\nwe can use called class list class list\ngives us control of the class attribute\nso one solution we can do is when we\nclick the button we can add a class and\nthen this class will have different\nstyles so let's see how we do that in\nour code we'll scroll down to the\nSubscribe function and when we click the\nbutton and make the button subscribed\nwe're also going to add a class so let's\ncreate a new line and we'll type button\nelement dot class capital L\nlist so class list itself is an object\nwhich means it has properties and\nmethods we can use one method is called\nadd which adds a class to an element so\nafter this let's type dot add and\nbrackets and now inside these brackets\nwe're going to put a string so this\nstring is a class that we want want to\nadd when we click this button let's add\na class called\nis-\nsubscribed and\nsave so now every time we click this\nbutton it will add a class to the button\ncalled is- subscribed let's give it a\ntry first we'll rightclick on the page\nand then click\ninspect and we'll go to the elements Tab\nand I'll rearrange my windows so you can\nsee\nit and then inside the HTML pay\nattention to the class of the button now\nwhen we click the\nbutton it's going to add an extra class\ncalled is- subscribed so that's what\nthis line of code does and now that this\nbutton has the is subscribed class we\ncan style it in our CSS so let's go back\nto our code\nand we'll scroll up to our\nCSS and here we'll type dot to style a\nclass and we'll style the class is-\nsubscribed\nis-\nsubscribed and curly\nbrackets and now inside these curly\nbrackets let's change the background\ncolor to Gray and the text color to\nBlack\nBackground Das color colon\ngray and then color colon\nblack and make sure to type these Styles\nbelow the Subscribe button Styles so\nthat these Styles will override the\nStyles\nabove now if we\nsave and then click our\nbutton it will add the is subscrib class\nand now this button will get our new\nstyles that we added here so that's one\nway to change the CSS when we click a\nbutton all right now I'm going to move\nthis back to the\ntop and notice that our background color\nis different from the final design the\nfinal design uses a much lighter gray so\nhow do we get this exact color to do\nthat we're going to open the elements\ntab again so on this page we're going to\nrightclick click\ninspect and then click the elements\nTab and I'll rearrange my windows so we\ncan see\nit so in this section in the style\nsection we can see the CSS that the\nelement has so first let's actually find\nthis button which is right here and\nwe'll click\nit and here it will show us the CSS that\nthis button has and it will show us the\nbackground color that we should use so\nlet's make a copy of this color and put\nit into our code\nrightclick\ncopy and here we'll remove it and\nrightclick and\npaste now let's\nsave and go back to our project and try\nit\nout and now we get get the exact same\ncolor as the final design so by the way\nthis color is known as an RGB value RGB\nmeans red green and blue and computers\ncan create any color using a combination\nof red green and blue so the first\nnumber here is how much red we want in\nour color the second number is how much\ngreen we want and the third number is\nhow much blue we want\neach number goes from 0 to\n255 Zer means less color and darker 255\nmeans more color and lighter so this\ncolor here uses 240 for all of the\ncolors so it's close to 255 and will\ngive us a very light gray color that you\nsee\nhere next if we go back to the final\ndesign and we click our button again\nit will change back to the original\nstyle so we're going to create this\nfeature in our project as well so one\nway to do this is when we click the\nbutton again we can remove this class so\nlet's scroll down to the\nbottom to the Subscribe function and\nwhen we click the button and we change\nit back to subscribe we can remove this\nclass to do that class list has a\nanother method we can use called remove\nso let's create a new line and we'll\ntype\nbutton element do class capital L\nlist dot\nremove and\nbrackets so this does the opposite of\nadd it will remove a class from this\nelement so inside the brackets we'll\ntype a string and the class we want to\nremove which is\nis-\nsubscribed and\nsave now let's try out our project we'll\nclick the button it will get the class\nis subscribed and get the extra Styles\nand now when we click the button again\nit will remove the class and it will\nremove the extra\nStyles so notice here that when we add a\nclass we just type the class name we\ndon't type a DOT and the class name like\nwe did for query selector typing a DOT\nonly makes sense in query\nselector next we're going to style the\ntext on the page let's scroll up to our\nCSS and one thing we can do is to style\nall the paragraph elements on the page\nusing this code P and curly brackets\nhowever we're going to use a better\nsolution instead of styling all the\nparagraphs we're just going to style the\nbody\nelement when we change the text in the\nbody element it will change the text in\nthe entire page so inside these curly\nbrackets let's change the text here so\nwe're going to use a different style of\ntext this is called a font to change the\nfont font we're going to use this\nproperty font Das\nfamily colon and we'll change it to\naial which is what I used in the final\ndesign so let's\nsave and this will style all the text\ninside the body and change the font to\naial and a good practice is to write any\nstyles for the body at the top so if we\nneed to we can override it later so\nlet's move these to the top we'll right\nclick\ncut and then up\nhere create some new lines and right\nclick and\npaste and we're going to add one more\nstyle before moving on let's add some\nspace between the Subscribe button and\nthe second project so earlier we learned\nthat space on the inside of it element\nis called padding space on the outside\nof an element is called margin so inside\nour subscribe button at the\nbottom let's add a property called\nmargin Das bottom colon 30 pixels and\nsave so this will add space on the\noutside of the element at the bottom of\n30 pixels\nnow let's move on and style the Amazon\nshipping calculator with\nCSS again we'll add a class to these\nelements and then style them in our\nCSS let's scroll down to the text box\nwhich is the input element and we're\ngoing to add another class by typing\nspace and let's use the class cost Das\ninput and now we're going to style this\nin CSS so let's scroll up and here we'll\nstyle the class using dot cost Das\ninput and curly\nbrackets and inside we'll style this one\nby one let's look at our final design\nand see what styles we need so first\nlet's change the text size because our\ntext is a little smaller than the text\nhere so the change the text size\nwe're going to use Font Das size colon\nand let's try 15 pixels and\nsave and now our text looks close enough\nto the final\ndesign next let's add some space inside\nthe text box so remember space inside an\nelement is called padding so we're going\nto type\npadding Das\ntop of 10\npixels padding Das bottom also 10\npixels and let's add padding to the\nleft 10\npixels and padding\ndasr of 10 pixels so this will add a\nspace on the inside of our text box in\nevery direction if we\nsave now it looks just like the final\ndesign now I'm going to show you a\nshortcut for padding that will save us\nsome typing so if we create a new line\nwe can actually use a property called\npadding and colon and then type 10\npixels this padding property let us add\npadding on multiple sides at once if we\ntype one value here like 10 pixels it\nwill add 10 pixels to every side so this\nline does the same thing as these four\nlines above so let's actually comment\nthis out using\nslashstar and star slash and\nsave and you can see that this one line\nof CSS did the same thing as the other\nfour lines of CSS so this shortcut can\nsave us some typing\nnext let's move on and style the\ncalculate\nbutton again we'll add a class to this\nbutton so we can style it so in this\nbutton let's add a class\nattribute class equals\ncalculate Das\nbutton now let's style this in our CSS\nby scrolling up and here we'll type Dot\ncalculate dash\nbutton and curly\nbrackets and inside these curly brackets\nwe're going to style this button one by\none so let's start with the background\ncolor so we'll type\nbackground Das color colon green and\nsemicolon and\nsave next let's change the text color to\nwhite\nso we'll type color colon\nwhite and save\nagain okay let's keep going and we'll\nremove the border around this button so\nwe'll type\nborder colon\nnone\nsave next let's make our text a little\nbigger like in the final\ndesign so we'll type font Das\nsize and make it 15\npixels and\nsave okay so now let's add the space on\nthe inside of the button so we're going\nto use this shortcut again we'll type\nthe padding\nproperty colon and this time we're going\nto give it two values separated by\nspaces 10\npixels and maybe 50 pixels so it's\neasier to see what this does so when we\ngive two values to padding the first\nvalue is the vertical padding so the top\nand bottom the second value is the\nhorizontal padding or left and right if\nwe\nsave so you can see that the left and\nright has a lot of padding which is 50\npixels so now let's make this match our\nfinal design so instead of 50 pixels\nlet's bring it down to 15 pixels and\nsave okay so that looks pretty close\nlet's also increase the padding on the\ntop and bottom so that the text box and\nthe button line up with each other like\nin the final\nproject so let's change the vertical\npadding to maybe 12 pixels and\nsave the last thing we'll style for this\nproject is when we put our Mouse over\nthe button it turns into the pointer\nicon so to create this we're going to\nuse the property\ncursor colon\npointer and save and give it a\ntry and that's it we just finished\nstyling the Amazon shipping calculator\nso now let's give this a try we'll Type\n25 in the text box and press calculate\nand at the bottom it will add $10 of\nshipping and show\n$35 finally we're going to style the\nlast project in this lesson which is the\nrock paper scissors project and this\nwill finish the project let's go back to\nsuperimple dodev and we'll scroll down\non this page and then click this link to\nshow the final design for rock paper\nscissors so I'll rearrange my windows so\nwe can see\nthis and we're going to change the\nbuttons to these nice big icons for each\nof the moves and when we click a move it\nwill show the result in bold and show an\nicon of the move that we picked and the\nmove that the computer picked so we're\ngoing to make this project look really\nnice now let's get started I'm going to\nrearrange my windows back so we have it\nat the bottom and let's create a cop\ncopy of the rock paper scissors project\nfor this lesson we'll go to our code\neditor and click here to show our\nfiles and we're going to make a copy of\n09- Ro paper scissors so let's click\nthis file and then\nrightclick\ncopy and down here right click and\npaste and we'll rename this file by\nright-clicking\nrename and at the end we'll remove copy\nand at the beginning we'll change it\nfrom 9 to 10 and press\nenter now let's click here to hide the\nfiles and we can close the 09\nfile and let's open the 10 rock paper\nscissors file in the browser so we'll\nright click and then open with live\nserver and I'll move this tab to the top\nhere so we can see it side by side so\nlet's start by styling the body we want\nto make the background color of the\nentire page this dark gray color we'll\ngo into our code and let's create a\nstyle element so we can write some\nCSS inside the head let's type less than\nStyle\ngreater than and then inside here we're\ngoing to style the body so we'll type\nbody and curly\nbrackets now inside here we're going to\nchange the background color so\nbackground-color colon and we're going\nto get the color that we see here by\nright clicking click\ninspect and then go to the elements tab\nTab and I'll rearrange it so we can see\nit and then here we'll find the body\nelement and click it and in this style\nsection we can find the background color\nthat we need so let's select\nthis and\nrightclick\ncopy and in\nhere right click and\npaste and a semi colon at the end let's\nsave and I'll move this back to the\ncorner and now our project has the same\nbackground color as the final design\nnext let's make the text color white so\nin our CSS we'll use the color property\nand colon white and semicolon and save\nand that will make our text White\nnext let's change the style or the font\nof this text we'll type font\ndasam colon\naial which is what the final design uses\nand\nsave all right now let's style these\nelements one by one to match the final\ndesign we'll start with this paragraph\nat the top so inside the paragraph\nelement\nlet's add a class so we can style it in\nCSS we'll add class\nequals let's call this the\ntitle and then in our CSS we can style\nthis class by starting with a DOT and\nthen\ntitle and curly\nbrackets so let's make our title really\nbig like the final design we'll change\nthe font Das size colon 30 pixels and\nsave so that looks close enough next\nlet's make the text bold in our CSS\nwe'll use Font D weight colon bold and\nsave now let's move on to installing the\nbuttons so first we're going to need\nthese images in our project and I'll\nshow you how to get them we'll put our\nMouse over the rock image and we'll\nrightclick and we'll click save\nimage and now we're going to find the\nfolder that contains all of our code so\nfor me it's on the\ndesktop and it's this folder right here\nso I'll double click this folder and\nthen leave the file name as the default\nrock- emoji and click save\nand now in our code editor if we click\nhere we should be able to see the rock\nimage let's do the same with the paper\nand scissors image so we'll hover over\nit rightclick save\nimage and in the same folder that\ncontains our code we're going to save\nthe paper image and finally rightclick\nsave image and we'll save the scissors\nimage\nall right now that we have these images\nin our code editor let's learn how to\nload them onto the page so we can do\nthis using an HTML element so we'll go\nback to our HTML code and we'll scroll\ndown and inside the button we're going\nto add an image element so let's type\nless than IMG and greater than so this\nis the image HTML element it loads an\nimage onto the page the image element\ndoesn't require a closing tag this is\ncalled a void element now to load an\nimage we're going to add an attribute to\nthis element called\nSRC so SRC stands for Source it tells a\ncomputer which file or image to load so\nlet's look in our\nproject for this button we're going to\nload rock- emoji.png\ninside the source attribute we'll type\nrock-\nemoji.png\nso what this does is it will look for\nthe file with this name beside the HTML\nfile and it finds it right here and it\nwill load it onto the page if we\nsave now inside our button it loaded the\nrock\nimage right now this image is too big so\nlet's use CSS to decrease the size of\nthis image we'll hide the files and\nlet's give a class attribute to the\nimage element so we can style it so\nwe'll type class equals and let's call\nthis a move Das\nicon and I'm also just going to add some\nnew lines to make the code a little\neasier to read so we'll scroll up to the\nCSS and we're going to style this class\nusing dot move Dash icon and curly\nbrackets and let's decrease the height\nof this image we can use the property\nheight colon and a pixel value 50 pixels\nand Save\nso this will make the height of this\nimage 50 pixels and it will also resize\nthe width automatically so that the\nimage keeps its shape so this size looks\npretty close to the final design so we\ncan move\non another feature of the source\nattribute is that we can put our files\ninto folders so let's open the files by\nclicking\nhere and let's say that we want to\norganize all of our images into a folder\nso we're going to create a folder by\nclicking this\nicon and let's name this folder\nimages and we're going to drag these\nimages into this\nfolder and drag this in\nhere and in\nhere now unfortunately you can see that\nthe image doesn't load anymore and\nthat's because if we look at our code\nSource tells a computer to look for this\nfile beside this HTML\nfile and right now there is no file\ncalled rock- emoji.png because we put it\nin a folder so to tell the computer to\nlook inside this folder we're going to\ntype the folder name at the start which\nis\nimages and then we're going to type a\nslash to go into the images folder and\nthen look for this file which is right\nhere if we\nsave the computer is now able to find\nthis image and load it onto the web page\nso this feature is called file paaths we\ncan tell the computer to look for a\nfolder beside the HTML file like images\nand then use a slash to tell it to go\ninto the folder and look for a file\nnow let's use this code to load the\nother images onto our page so for the\npaper image we're going to go to this\nbutton remove the text and then create\nan image element less than IMG greater\nthan and we'll give it an attribute\nSource equals and we'll locate the image\nit is in the images folder so we'll type\nimages and then slash to go into the\nfolder and we'll load the file paper-\nemoji.png\nso\npaper-\nemoji.png\nand\nsave so our image is really big let's\ngive it the same class that we gave the\nrock image so we'll add a class equals\nmove Dash icon and\nsave so these Styles get applied to all\nelements with the class move- icon so it\napplies to both of these\nelements now let's do the same thing for\nthe scissors button we'll remove the\ntext and we'll replace it with an image\nelement and we'll give it the source\nattribute images\nslash\nscissors Das\nemoji.png\nand we'll also give this a\nclass of\nmove- icon to resize the images like up\nhere let's\nsave and now we have all the images that\nwe\nneed now let's make these buttons look\nlike the final design we we scroll\nup and let's add a class to these\nbuttons so we can style them with\nCSS so we'll add class equals and let's\nuse\nmove-\nbutton and for this button We'll add the\nsame class class equals\nmove-\nButton as well as for the third\nbutton class = move-\nbutton now let's scroll up to our CSS\nand we're going to style this class\nusing move- button and curly\nbrackets so first let's change the\nbackground color to match the background\ncolor of the page so we'll use\nbackground Das color colon and we'll use\na special value called\ntransparent and this will make the\nbutton see- through if we\nsave now these buttons are\nsee-through next let's add this white\nborder to our buttons so we'll use the\nBorder\nproperty colon and we're going to give\nit three values the first value is our\nborder width or how thick the border is\nlet's use one pixel for now the second\nvalue is the Border style and we'll use\nsolid because it's a solid border other\nvalues we can use here are dotted or\ndashed and the third value is the Border\ncolor so we're going to use\nwhite and semicolon at the end and\nsave and that will add a border so let's\nmake our border a little thicker like\nthe final design we'll change this first\nvalue which is the Border width to three\npixels and\nsave okay so that looks pretty close now\nlet's change the size of our buttons\nusually we use the padding to add space\non the inside of an element but in this\ncase our images have different sizes so\nwe're going to use width and height to\nset an exact size so so in our CSS we'll\ntype\nWID colon and let's make it 100\npixels and\nheight and also 100 pixels and\nsave so it looks like our final design\nis a little bigger than what we have\nhere so let's increase the width and the\nheight so let's try 120 pixels and Save\nall right so that looks pretty close now\nlet's make these buttons round and the\nproperty for that is called border Das\nradius\ncolon and to know how much we need to\nmake it round we can set it to half of\nthe width or the height so we'll set it\nto 60\npixels and\nsave okay so it's coming along really\nwell and lastly we're going to add some\nspace between the buttons so remember\nthat space outside of an element is\ncalled margin so let's add some margin\non the right so we'll\ntype\nmargin\ndasr colon and maybe 10 pixels and\nsave and finally when we put our Mouse\nover the button it turns into a pointer\nso the property for that is cursor colon\npointer and save and now our buttons\nmatch the final design so let's keep\nmoving and style the next part of the\nproject which is the result and the\nmoves if you don't see this here you can\njust play the game and it'll give us a\nnew\nresult so to make this easier to style\nwe're going to go into our code we're\ngoing to find the result which is here\nand we're going to add some fake results\nlike you\nwin let's save and now we have this\nresult and we're going to style it so\nlet's give this a class of\nresult and then in our\nCSS we're going to style the class dot\nresult and curly brackets\nso let's make the text bigger we're\ngoing to use Font Das size colon and\nmaybe 25 pixels and\nsave okay that looks pretty good let's\nmake the text bold so we use Font Das\nweight colon\nbold and\nsave and finally we're going to add\nextra spaces between this and the\nbuttons so we'll add\nmargin-top and maybe 50 pixels and\nsave okay so I think that looks close\nenough now let's style the moves and\nagain we'll scroll\ndown and we're going to add some fake\nmoves in here so it's easier to style so\nwe'll Type U\nand then an image so let's use the less\nthan image and the source\nattribute and let's just load the rock\nimage and the scissors image for the\ncomputer so to load the rock image we'll\nlook inside the images folder slash to\ngo into the folder and then rock-\nemoji.png\nso\nrock- emoji\nPNG and greater than and we'll add\nanother image less than image source\nequals Images slash the scissors\nEmoji scissors Das\nemoji.png\nand greater than and finally the text\ncomputer\ncomputer let's save\nand this will create some results\nalthough the images are really big so we\ncan use the class move icon to resize\nthem to be the same size as the buttons\nso for both of these images let's add\nthe\nclass\nmove-\nicon and here as well class equals\nmove- icon and Save\nand now our images look\ngood next let's style this score section\nso the only thing we need here is to add\nspaces between these two so in this\nscore element let's add a class of\nscore and we'll scroll up and style this\nelement using DOT score\nbrackets and let's add some margin at\nthe top\nso\nmargin-top colon 50 pixels and\nsave and let's compare it and it looks\nlike our final design has a little more\nspacing than this so let's change this\nto 60 pixels and\nsave and that looks close enough and\nfinally we'll style the reset score\nbutton so let's go back to our HTM\nml we'll add a class to this button so\nhere class equals reset\ndcore Das\nbutton so at the top we'll type dot\nreset\ndcore\nDutton curly\nbrackets and we'll make the background\ncolor white so background dasc color\ncolon\nwhite and let's also remove the border\nfrom our button using border colon\nnone let's save and see how it\nlooks and then let's increase the size\nof this text because the final design\nlooks a little bigger so we'll add font\nDas size colon 15 pixels and\nsave now let's add some extra space on\nthe inside of the button so that's\npadding padding colon and we'll give it\ntwo values the first value is the\nvertical padding let's use 10\npixels and the second value is the\nhorizontal padding so let's use 15\npixels and Save\nand it looks like our final project is a\nlittle shorter than our button so let's\nchange the vertical padding to maybe\neight and save and the last step is to\nadd the cursor pointer so here cursor\ncolon\npointer and\nsave and that's pretty much it we\nfinished styling our rock paper scissors\nproject so now I'm going to rearrange my\nwindows so we can see the entire design\nand it looks really nice the last step\nhere is to remove these fake results and\nuse JavaScript to insert these results\ninstead so let's scroll\ndown and we'll remove this\nresult and let's actually copy this code\nbecause we want our JavaScript to\ngenerate this code so we'll right click\nand\ncopy and let's scroll to the\nbottom to where we insert the moves onto\nthe page which is here and instead of\nthis text we're going to rightclick and\npaste the code that we had before and\nthis time instead of picking Rock every\ntime we're going to substitute this with\nthe player move so we're remove this and\nbecause this is already a template\nstring we can insert a value directly\ninside using dollar and curly brackets\nand we'll insert the\nplayer\nmove let's also insert the computer's\nmove in here so we'll remove this and\ninsert a value using dollar and curly\nbrackets and we'll insert computer\nmove and now that we're inserting this\nwith JavaScript we can scroll up and\nremove the fake\nresult which is here so we can select it\nand delete\nit now let's\nsave and we're not going to have\nanything in our results and when we\nclick a move it will show us the result\nand also show us the moves that we\npicked and that's it we finished the\nrock paper scissors\nproject the last thing we're going to\nlearn in this lesson is how to organize\nour code into different\nfiles so notice that right now all of\nour HTML CSS and JavaScript is in one\nHTML file and this makes the code harder\nto read because the file is bigger and\nit mixes three different languages to\nmake our code more organized and easier\nto read we're going to separate each\nlanguage into its own file so let's\nscroll down and we'll start by\nseparating our JavaScript into its own\nfile we'll click here to show our files\nand then click this icon to create a new\nfile and we'll name this file\n10-\nrock-paper-\nscissors. JS and press\nenter so when we end a file\nwithjs it tells the computer that this\nfile contains JavaScript code not just\ntext now let's go back to our HTML\nfile and we're going to move all of this\ncode into the Javascript file so we'll\nselect this\ncode and then we'll\nrightclick and\ncopy and inside the Javascript file\nwe'll rightclick and paste\nnow let's\nsave and we'll go back to the HTML file\nand we can delete all this JavaScript\ncode and now we're just going to load\nour Javascript file on to the web page\nto do that we can use an attribute of\nthe script element called SRC or source\nso we'll make it equal and this does the\nsame thing as the image element it tells\na computer which file to\nload if we type\n10-\nrock-paper-scissors\nDJs this will look for a file called 10\nrockpaper scissors. JS beside our HTML\nfile which is this file here and it will\nrun all the JavaScript inside this file\nso it does the same thing as before\nexcept now our JavaScript code is in its\nown\nfile and this makes our code cleaner\nbecause each file only contains one\nlanguage and each file also contains\nless\ncode now let's go back to the HTML file\nand\nsave and you'll notice that our project\nworks the same way as before we just\norganized our code\nbetter another feature of The Source\nattribute is that it also uses file\npaths so we can put this Javascript file\nin a folder and we'll be able to find it\nfor example let's show our files and\nlet's create a new folder by clicking\nthis\nicon and let's name this folder\nscripts so this folder will contain all\nof our JS files so we can drag this file\ninto the\nfolder and now we can locate it using\nthe source attribute by typing the\nfolder name which is scripts and then a\nslash to go inside this folder and look\nfor this file and it will find it right\nhere if we\nsave everything works as\nnormal another feature is we can use\nmultiple script elements this lets us\nsplit our JavaScript into multiple files\nand then load them all onto the page\nfrom top to\nbottom next we're going to learn how to\nseparate our CSS into its own\nfile let's scroll up to our\nCSS so we can do the same thing with CSS\nso let's click the HTML\nfile and let's create a new\nfolder and we'll call this folder Style\nand press\nenter so this folder will contain all of\nour CSS code let's click the folder and\nwe'll create a new file by clicking this\nicon and let's name this file\n10-\nro-\npaper-\nscissors. CSS and press\nenter so ending the file with CSS means\nthis file contains CSS code and now we\ncan go back to our\nHTML and move our CSS into its own file\nso let's select all this\ncode and then right\nclick\ncopy and in here right click and\npaste and save this\nfile now let's go back to our HTML\nand we can remove this\ncode and we'll learn how to load our CSS\nfile onto our\nwebsite so we're not going to use the\nstyle element for this we're going to\nuse a different element called the link\nelement so we'll type less than link\ngreater than and the link element\ndoesn't require a closing tag this is\nanother void element so the link element\nuses two attributes the first attribute\nis called\nR means relation this tells a computer\nwhat type of file we're loading so we're\ngoing to set this attribute to style\nsheet this means we're loading a CSS\nfile and then we'll add a second\nattribute called\nhref so href tells a computer which file\nwe want to load\nso this also supports file paaths so we\ncan type the Styles\nfolder this will look for a folder\nbeside the HTML called Styles which is\nthis one right here and then we'll type\nslash to go inside the folder and look\nfor this CSS file which is\n10- Rock Das paper Das scissors\nCSS so this will load all the CSS inside\nthis file and apply it to our page so it\ndoes the same thing as before except we\nseparated each language into its own\nfile if we save everything still works\nand all the Styles get applied and just\nlike the script element we can also use\nmultiple link elements to load multiple\nCSS\nfiles so that's how we separate our code\ninto separate files using the script\nelement and the link element it makes\nour code a lot easier to read because\neach file contains one language and it\ncontains less code and that's the end of\nthis lesson as a final reminder the CSS\nwe learned in this lesson is just a\nreview if you want to learn CSS in more\ndetail you can check out my HTML and CSS\nfull course in the video\ndescription so in this lesson we\nreviewed CSS and added CSS to all of our\nprojects we learned about the class list\nproperty which lets us control the class\nattribute of an element we finished our\nrock paper scissors project and we\nlearned how to organize our JavaScript\nand CSS code into separate\nfiles thanks for watching this course so\nfar if you want to support this channel\nyou can check out the premium version of\nmy courses just like this one where you\ncan get a certificate of completion and\na Better Learning platform if you're\ninterested in extra videos from me more\nin-depth videos and behindth scenes\ncontent you can check out these links\nhere you can also support the channel by\nliking the video subscribing and sharing\nthis video with others thanks again and\nlet's continue with the course\nhere are some exercises to help you\npractice using HTML CSS and JavaScript\ntogether\nin this lesson we're going to learn two\nmore features of JavaScript called\narrays and loops and we're going to use\nthese features to create this to-do list\nproject first let's create a new file\nfor this lesson we'll go to our code\neditor and click up here to show our\nfiles and this time make sure you have\none of these HTML files selected so we\ndon't create the new file in one of\nthese\nfolders so now we're going to click this\nicon to create a new\nfile and we're going to name this file\n11- arrays Das and Das\nloops.\nHTML and press\nenter now let's copy the previous lesson\ninto this file so we'll click on 10 Dom\nprojects and and we'll type here and typ\ncontrol a or command a to select the\ncode and then\nrightclick\ncopy and in\nhere right click and\npaste now let's hide our files and we'll\nprepare this file for this lesson so we\ncan scroll to the\ntop and we'll change the title to arrays\nand\nloops and let's remove all of the\nCSS and we'll also remove the\nHTML which is right\nhere and we'll remove all the\nJavaScript now let's\nsave and we'll open this file in the\nbrowser by right clicking open with live\nserver and let's also open the console\nso we right click click\ninspect and click the\nconsole and now we can close the\nprevious\ntabs and the previous code for\nnow until we just have the lesson 11\nfile now we're ready to learn arrays an\narray is another type of value in\nJavaScript and it represents a list of\nother values so let's do an example and\ncreate our first array we'll go into the\nscript element and we're going to type\nopen square bracket and closed square\nbracket and inside the square brackets\nwe'll type a value like the number 10\nand then we'll type comma and and\nanother value like the number 20 and\nthen comma again and a third value like\nthe number\n30 so this is an array and it represents\na list of three numbers 10 20 and\n30 now arrays themselves are also values\nwhich means we can save them in a\nvariable so at the front we can create a\nvariable using const\nand let's name it my array and we'll\nmake it equal to this array and we'll\nadd a semicolon at the end so now we\ncreated a list of values and we saved\nthis list in this\nvariable let's create a new line and\nwe'll\nconsole.log my\narray and Save\nand it will display the list of values\nin the console so that's basically what\nan array is it's a list of\nvalues now to get a specific value in an\narray we can use square brackets so\nlet's create a new line and we'll type\nmy array and square\nbrackets inside these brackets we'll put\na number like\nzero this number represents the position\nin the array so zero means the first\nvalue if we\nconsole do log this\ncode and\nsave my array Square braet 0 gives us\nthe first value which is 10 and that's\nwhat's displayed in the\nconsole now if we change this to\none this will get us the second value in\nthe array which is 20 if we save it\ndisplays 20 so this number represents\nthe position in the array zero is the\nfirst value one is the second value two\nis the third value and so on we can also\nchange a value in an array also using\nsquare brackets so let's create a new\nline and we'll type my array\nsquare brackets and let's say we want to\nchange the first value so we'll type\nzero for the first value and we just\nmake it equal to something else like\n99 now if we\nconsole.log my array\nagain and\nsave you can see that this changed the\nfirst value to 99\nso that's basically how arrays work we\ncan access a value inside an array and\nwe can also change a value inside an\narray now that we understand the basics\nof arrays let's learn the syntax rules\nto create an array we start with an open\nsquare bracket and we end with a closed\nsquare bracket inside we can put a list\nof values and we separate each value\nwith a comma\nwe can also write an array on multiple\nlines like this we just put the new\nlines after the\ncomma Now to get a value inside an array\nwe can use square brackets and a number\nlike one this number is called the index\nit represents the position in the array\nthat we want to get so the first value\nis index zero the second value is index\none 1 third value is index 2 and so on\nnotice that the index starts at zero\nthis is called a zero indexed\narray now inside an array we can put any\ntype of value for example let's create a\nnew line and we'll create a new array\nusing square brackets and inside we can\nput the number one and then comma and we\ncan also put a string like\nhello and another comma and we can put a\nBoolean value like true and another\ncomma and we can even put an object like\nCurly\nbrackets Name\ncolon\nsocks now an array itself is also a\nvalue that means we can save arrays in\nvery variables like this or even save it\nin an array for example in this array we\ncan add an array inside like 1 comma\n2 next arrays have a weird behavior when\nwe try to check the type of an array so\non a new line let's type\nconsole.log type of and then square\nbrackets one comma\n2 and\nsave this will tell us that an array is\nan object and that's because an array is\nactually an object but it's just a\nspecial type of object if we want to\ncheck if something is specifically an\narray we can use this code capital A\narray dot is\narray\nbrackets and inside the brackets we'll\nput an array like square brackets 1\ncomma 2 so this will check if this value\nis an array if we\nconsole. log this\nresult and\nsave it will display\ntrue and finally because arrays are are\njust a type of object they also have\nproperties and methods we can use so one\nuseful property is called length so\nwe'll type\nconsole.log my\narray.\nlength this will tell us how many values\nare in the array so my array has three\nvalues so if we save\nit will display\nthree next we'll learn a useful method\nof an array called push this adds a\nvalue to the end of the\narray if we did my\narray.\npush\n100 this will add 100 to the end of my\narray if we console.log\nmy\narray and\nsave you can see that 100 was added at\nthe\nend the last method we're going to learn\nfor now is called do splice this removes\na value from an array for example my\narray do\nsplice and\nbrackets and a splice takes two numbers\nthe first number is the index that we\nwant to remove so let's say we want to\nremove the first value which is index\nzero the second number we give to splice\nis the number of values we want to\nremove if we give it one it will remove\none value at index zero if we give it\ntwo it will remove two values starting\nat index zero so for now let's just\nremove one value\nand let's create a new line and\nconsole.log my\narray and\nsave you can see that splice removed the\nfirst value from the array or index0\nwhich was\n99 all right now that we understand the\nbasics of arrays and the syntax rules\nlet's do some practical examples so\nprepared a project we can do for this\nlesson we'll go to our browser create a\nnew tab at the\ntop and here we'll type\nsuperimple\ndodev SL projects slash arrays and press\nenter so this page contains the to-do\nlist project we're going to create in\nthis lesson so down here is the final\nversion of the project we can type a\nname for our to-do like make\ndinner give it a due date and then click\nadd and it will add it to our list we\ncan add another to-do like wash\ndishes and then select a due date and\nclick add again and it will add another\nto-do to our list and each to-do also\nhas a delete button so we can delete it\nwhen we're finished the task so this is\nthe final version of the project and\nthese two up here are simpler versions\nof the project that we're going to use\nto work our way up so let's start with\nthe first project up here we're going to\nopen our console by\nright-clicking click\ninspect and click the\nconsole and the way way this first\nproject works is we can type a to-do in\nthis text box like make\ndinner and when we click add it will add\nthe to-do to an array and display it in\nthe\nconsole if we type another to-do like\nwash dishes and click add it will add it\nto the array and display it in the\nconsole so let's create create this\nproject we'll start by creating a file\nfor this project we'll go to our code\neditor and click up here to show our\nfiles and click this icon to create a\nfile and we'll name this\n11-\ntoo-\nlist.\nHTML and press\nenter now let's copy the code from\narrays and loops. HTML\nso we'll click here control a or command\na and then\nrightclick\ncopy and down here right click and\npaste and let's close this for\nnow we'll scroll up and change the title\nto to do list and remove all the\nJavaScript code\nand this time instead of writing all the\nJavaScript in here let's actually put\nthe JavaScript in a separate file which\nwe learned in the previous lesson so\nwe'll open our files\nagain and this time we'll go to our\nscripts folder we'll click this JS file\nand we'll click this icon to add a new\nfile to this folder and let's name it\n11- to-do Das\nlist.js and press\nenter next we're going to load this file\ninto our HTML file so let's open this\nand in the script element we can remove\nthe spaces and we're going to add an\nattribute called\nSRC equals and we're going to load the\nJavascript file that we just created\nwhich is inside the script folder so\nwe'll type\nscripts and then a slash to go into this\nfolder and we'll load the file\n11-\ntoo-\nlist.js and\nsave so now I'm going to drag this file\ndown here so I can see both the HTML and\nJavaScript at the same time close this\nfor now and I can close the other code\nfor now as\nwell and finally let's open this in our\nbrowser so we'll right\nclick open with live\nserver and let's also open the console\non this page right click click\ninspect and click the\nconsole now one more thing I'm going to\ndo for this video is I'll rearrange my\nwindows so that we can have the the\nfinal design at the\nbottom let's start by creating the HTML\nelements let's go to the body and we'll\nactually create a paragraph element to\nstart inside the paragraph we'll put the\ntext to-do\nlist next let's create the text box so\nto create a text box less than\ninput greater than and add a placeholder\nto this text box Place holder equals to\ndo name finally let's add this\nbutton so on a new line let's type less\nthan button greater than and inside the\nbutton we'll have the text\nadd now let's\nsave and this creates all the HTML\nelements that we need\nnext let's write our JavaScript so first\nwe're going to create an array to store\nour to-dos and then when we click the\nadd button we're going to get the text\nfrom the text box and add it to our\narray and finally we'll console.log the\narray now let's convert these steps into\ncode let's create a new array first\nusing const\nlet's name it\nto-do list and we'll make it equal to\nsquare\nbrackets so this is an array with no\nvalues inside we also call this an empty\narray next when we click the button\nlet's get the value from the text box so\nlet's go to our button and add an\nonclick\nattribute and then inside here let's\ncreate a function for this so down here\nlet's create a\nfunction we'll name it add Todo brackets\nand curly\nbrackets and then inside the onclick\nattribute we're just going to call this\nfunction add too and\nbrackets the next step is to get the\ntext in the text box we can do that\nusing document. query selector so to use\nQuery selector we're going to put a\nclass on this input element so we'll\ntype the class\nattribute\njs- name Das\ninput and then in here document do query\nselector brackets and a string and we'll\ntype a DOT to get a class and we'll get\nthis class\njs-\nname-\ninput as a reminder this gets an element\nwith the class JS name input which is\nthis element and puts it into our\nJavaScript and now let's save this in a\nvariable so at the start let's type\nconst in input element and make it equal\nto this\nresult so now we took this input and put\nit into our\nJavaScript to get the text out we're\ngoing to use a property of the input\nelement called value so down here\ninput\nelement.\nvalue and let's save the value in the\ntext box in a variable so we can use it\nlater\nat the front const name and we'll make\nit equal to whatever's in the text\nbox before we continue let's\nconsole.log the name to check if this is\nworking so let's save this Javascript\nfile and let's also save this HTML\nfile we'll go to our browser and I'll\nresize it so we can you can see the\nconsole and now if we type something in\nthe text box like make dinner and click\nadd it will get the text from the text\nbox and then display it in the\nconsole okay so it's looking good so far\nthe next step is to add this name to our\nto-do list so we learned how to do this\nearlier we can use a method called push\npush will add a value to the end of the\narray so let's remove this for now and\nat the\nbottom we're going to type our\narray to do\nlist. push\nbrackets and then between the brackets\nwe're going to add our name\nhere and now the last step is to\nconsole.log the entire array\nconsole.log Todo\nlist and\nsave now let's give it a try or'll type\nmake dinner in the text box and click\nadd it will take this text add it to the\narray and then console.log the array and\nnow we have our to-do list let's add\nanother to-do we'll type type wash\ndishes and click\nadd again it will get the text in the\ntext box and then add it to the array so\nnow our array has two values and then we\ndisplay them in the\nconsole so that's how we create this\nfirst version of the to-do list project\nnow one more feature we're going to\ncreate is if we add something to our\nto-do list and click add\nit will reset the text box to do that\nlet's go into our\ncode and we'll create some new lines and\nremember that the value property\nrepresents the text in the text box so\nto change the text in the text box we\ncan simply change the value property so\nwe'll type\ninput\nelement. value and change it to the\nempty string\nso this will make the text in the text\nbox become empty if we\nsave and now type something in the text\nbox and click\nadd it will reset the text in the text\nbox let's move on to the second version\nof the to-do list so here when we type\nsomething in the text box like make\ndinner and click add it will actually\ndisplay it on the page if we type\nsomething else like wash dishes and\nclick add it will also add it to the\npage so how do we take our array and\ndisplay each value on the page to do\nthis we're going to learn another\nfeature of JavaScript called loops loops\nlet us run some code over and over like\na loop so let's go back to our 11 arrays\nand Loops file and we can close this\nJavaScript file for now and we're going\nto learn Loops so first let's comment\nout the previous code by typing\nslashstar and at the bottom star\nslash let's scroll\ndown and we'll create our first Loop\nwe'll start by creating a variable using\nthe word let and we'll name name this\nvariable I and we'll make it equal to\n1 next we're going to type the word\nwhile and then brackets and curly\nbrackets and then inside these curly\nbrackets we're going to put some code\nthat the computer will run over and over\njust like a loop let's put the code\nconsole.\nlog\nI so this will display the variable I in\nthe console over and over again now\nobviously we don't want to Loop this\nforever so how do we get this Loop to\nstop we can do that using the round\nbrackets up here inside these round\nbrackets we're going to put some code\nthat results in true or false for\nexample we can check if I is less than\nor equal to 5 so the way this works is\nthat if this code results in true the\nloop will keep going over and over once\nthis results in false the loop will stop\nand it will go to the next line now you\nmay notice that this code will never\nresult in false because I is equal to 1\nand 1 is always less than or equal to 5\nso when does this actually become false\nand Stop the Loop the answer is inside\nthis loop we're also going to update\nthis variable I so we'll type I and\nwe'll make it equal to itself plus\n1 so now every time we Loop over this\ncode we're going to increase I by 1 and\neventually I will be greater than 5 this\nwill return false and it will stop the\nloop if we\nsave and then go back back to the tab\nfor this file and I'll rearrange my\nwindows so we can see the console this\nLoop makes the computer count from 1 to\n5 so let's go over this code step by\nstep to make sure we understand how it\nworks first we create a variable I and\nwe make it equal to one and then we do a\nloop so if this condition is true the\ncomputer will keep running this code\nover and over again so the first time it\nLoops I equals 1 and then it displays\none in the console and then we increase\nI to two now we go back to the top and\nwe check this code 2 is less than or\nequal to 5 this is true so we're going\nto run this code again this time I equal\n2 and we display it in the console and\nthen we we increase I to three and now 3\nis still less than or equal to 5 so this\nis true which means we keep running this\ncode and eventually this is going to\nincrease I to six once I is six this\nwill become false which will cause the\nloop to stop and then we go to the next\nline so that's why it counts from 1 to 5\nand then it stops at five\nso this is called a while loop while\nthis condition is true it will keep\nrunning this code over and over again\njust like a loop as soon as this\ncondition is false it will stop the\nloop all right now that we understand\nhow a while loop Works let's learn the\nsyntax rules to create a while loop we\ntype the word while and then round\nbrackets and curly brackets the code\ninside the round brackets is called the\nloop condition the code inside the curly\nbrackets is called the loop body the\nvariable I at the top is called the loop\nvariable every time we loop we're going\nto increase the loop variable this is\nknown as the increment step the\nincrement step makes sure that the loop\nends at some point without this\nincrement step the loop would just keep\ngoing forever this is known as an\ninfinite\nLoop now remember that I = I + 1 has a\nshortcut instead of this we can just do\nI plus = 1 and remember we actually have\nan even shorter shortcut for plus equal\n1 instead of this we can also do I ++\nso this will increase the value of I by\none every time just like before so those\nare the three major parts of a loop the\nloop variable the loop condition and the\nincrement\nstep now each time we run this Loop this\nis called an\niteration so in this Loop we did five\niterations we ran this code five times\nand lastly Loops create a scope any\nvariable that we create between these\ncurly brackets will only exist inside\nthe curly brackets so that's a while\nloop while this condition is true it\nwill keep running this code over and\nover again once this condition becomes\nfalse it will stop the loop and go to\nthe next\nline so in JavaScript there's actually\ntwo types of loops\nthe first type is a while loop which we\njust learned now we're going to learn\nanother type of loop called a for Loop\nto create a for Loop we'll create some\nnew lines and then down here we'll type\nfour and brackets and curly\nbrackets inside these brackets we're\ngoing to type three pieces of code the\nfirst piece of code is a loop variable\nwhich is the same thing as this line up\nhere so we'll type let I equal one and\nthen semicolon space and we'll type a\nsecond piece of code which is the loop\ncondition so here we'll type I less than\nequal to 5 and then semicolon and space\nand the last piece of code is the\nincrement step which is this line right\nhere so we'll type\ni++ and between these curly brackets\nwe'll write the code that we want to\nLoop over and over so let's just type\nthe code\nconsole.log I and\nsave so this for Loop does the same\nthing as the while loop above it counts\nfrom 1 to 5 and if we look at this code\nwe can see that a for Loop is just a\nshorter version of this while loop\ninstead of writing the loop variable\ncondition and increment step separately\nwe group all of them together at the top\nso this Loop works the same way first we\ncreate a loop variable and then as long\nas this Loop condition is true we will\nkeep running this code over and over and\nevery time we run this code we're also\ngoing to increase the loop variable by\none so now that we learned two ways of\ndoing a loop which one should we use if\nwe're doing a standard Loop for example\nit has a loop variable a condition and\nan increment step every time it's\nrecommended to use a for Loop because a\nfor Loop is shorter and more organized\nthan a while loop however if it's a\nnonstandard loop then it might be better\nto use a while loop so what's an example\nof a non-standard loop so let's say we\nwant to Generate random numbers until we\nget a number that's at least\n0.5 to create this Loop we'll create a\nvariable that will store the random\nnumber using\nlet\nrandom\nnumber and make it equal to zero to\nstart and then we'll do a while\nloop brackets and curly brackets now\ninside the loop condition we want to\nkeep running this Loop until random\nnumber is at least\n0.5 so we'll check if\nrandom number is less than\n0.5 because if it is less than 0.5 we\nwant to keep running this Loop until we\nget a random number that's at least\n0.5 and then inside this loop we're\ngoing to generate a random number\nbetween 0 and 1 and then save it in the\nvariable up here so we'll type random\nnumber and make it equal to capital M\nmath.\nrandom so if this random number is less\nthan 0.5 it will keep generating random\nnumbers until we get a number that is at\nleast\n0.5 so at the bottom if we\nconsole. log\nrandom\n[Music]\nnumber and\nsave it will give us a random number\nthat's at least\n0.5 so notice that this is a\nnon-standard loop it doesn't really have\na loop variable that we increase every\ntime and it also doesn't have the\nincrement step so in this situation when\nwe have a non-standard loop it's better\nto use a while loop because they're a\nbit more\nflexible all right now that we learned\nthe basics of Loops let's do some\npractical examples we're going to learn\na technique called looping through an\narray this means we're going to go\nthrough each value of an array one by\none and do something with each each\nvalue so first let's comment out the\nprevious code using\nslashstar and star slash at the bottom\nlet's create an array of strings so\nwe'll create a variable const to do list\nequal to an\narray and inside this array we'll have\nthe string make\ndinner another string wash\ndishes and another\nstring watch\nYouTube now let's take each value in\nthis array and display it in the console\nto do that we're going to run a loop and\nthis Loop is going to count from zero to\nthe last index in the array so remember\nthat the index is the position of a\nvalue in the array the first value is\nindex zero the second value is index one\nthird value is index 2 and so on So\nBelow this let's type four brackets and\ncurly\nbrackets inside these brackets we're\ngoing to create the loop variable so\nhere we're going to count the\nindexes let index equals zero semicolon\nspace and we'll do the loop condition so\nwe'll keep looping as long as the index\nis less than or equal to the last index\nso remember that the index starts from\nzero this means that the last index in\nan array will be the number of values in\nthe array minus one or the array. length\nminus\none to do list do\nlength minus\n1 and here we'll add another semicolon\nand we'll add the increment step which\nis index Plus+ so we'll increase it by\none every time now inside these curly\nbrackets we can do something for each\nindex of this array for now let's just\nconsole. log this index\nand\nsave so this will count from 0 to two\nwhich is exactly all the indexes in this\narray and now using this index we can\nalso access the value at this\nindex so instead of just the index here\nwe can do to-do list and then square\nbrackets and between the brackets index\nthis will take whatever the index\nvariable is and access that index in the\narray so if the index variable is zero\nthis will access to-do list index0 which\nis the first value when the index is one\nit will access to-do list index one\nwhich is the second value and so\non so for now let's save the value in a\nvariable using const value\nand make it equal to to-do list bracket\nindex and now let's\nconsole.log the value instead if we\nsave this will Loop through each index\nof the array get the value at each index\nand then display each value which is\nwhat we see in the console so this\ntechnique is called looping through an\narray we use a loop to go through each\nvalue of an array and then we can do\nsomething with each\nvalue now I'm going to show you a few\nshortcuts we can use when looping\nthrough an array instead of checking if\nindex is less than or equal to to-do\nlist. length minus one we can shorten\nthis to index less than to-do list.\nlength so this check does the same thing\nas before the loop Loop will stop at\nindex equal length minus one but it\nsaves us some\ntyping another shortcut is instead of\nnaming the loop variable index we can\nshorten this to\nI and we'll shorten this as well and\nthis as well and that's why we often\nname the loop variable I I means\nindex next we're going to learn a\ntechnique that we can combine with\nlooping through an array called the\naccumulator pattern so first let's\ncomment out the previous code using\nslashstar and star\nslash and at the\nbottom let's say we have an array of\nnumbers like this how do we calculate\nthe total of all the numbers in the\narray let's set up this problem let's\nsay we have an array of numbers const\nnums equals array and then the numbers 1\n1 and\n3 and we want to calculate the total of\nall the numbers in this array to\ncalculate the total we'll learn the\naccumulator pattern the first step of\nthe accumulator pattern is to create a\nvariable to store the result so below\nthis let's create a variable const total\nand we'll make it equal to zero and the\nnext step is to Loop through this array\nand update the result so down here four\nbrackets and curly brackets and inside\nthe round brackets we'll create the loop\nvariable let I or index equals z\nsemicolon space and we'll create the\nloop condition I less than nums do\nlength and then semicolon and the\nincrement step\ni++ so as we learned earlier this Loop\nwill go through each index of this array\nand now between these curly\nbrackets first let's use the index to\nget each value so we'll type\nnums and then square brackets and access\nthe index I and let's save this in a\nvariable using\nconst num equals this\nvalue and finally we're going to add\neach number to the total we can type\ntotal and make it equal to\nitself plus each number and remember\nremember we have a shortcut for this\nwhich is plus\nequals and finally since we're changing\nthis total variable we have to change\nfrom const to\nlet all right so after this Loop we\nshould have added each number in the\narray to the total so at the bottom\nlet's\nconsole. log the\ntotal and Save\nand it will display five which is the\nexact total of all the numbers in this\narray so that's the accumulator pattern\nwe first create a variable to store the\nresult and then we Loop through the\narray and update the result so notice\nthat as we Loop through the array we're\nadding or accumulating the results into\nthis variable and that's why this is\ncalled the accumulator pattern pattern\nand we call this variable the\naccumulator\nvariable all right let's do another\nexample using the accumulator pattern\nlet's say we're given this array of\nnumbers again and we want to create a\ncopy of the array where each number is\ndoubled so if the array is 1 13 we're\ngoing to create a new array with 2\n26 so as at the bottom we'll create some\nnew lines and use the accumulator\npattern the first step is to create a\nvariable to store the result let's type\nconst and let's name this\nnums\ndoubled and we'll make it equal to an\narray this time so notice in the\nprevious example the accumulator\nvariable was a number in this example\nthe accumulator variable is an array so\nwe can use different types of values to\naccumulate the result it all depends on\nthe problem we're trying to solve so now\nthe next step is to Loop through this\narray and update the result at the\nbottom we'll create a four Loop brackets\nand curly\nbrackets inside the round brackets we'll\ncreate the loop variable let I equal\nzero and we'll create the loop condition\nI less than nums do length and then the\nincrement step\ni++ and now between the curly brackets\nwe're going to get the number at each\nindex so const num equals nums square\nbracket I and then we're going to update\nthe result\nso down here we're going to add this\nnumber doubled to this\narray so remember to add a value to an\narray we can use the method push so\nwe'll type\nnums\ndoubled do push\nbrackets and we're going to add to this\narray the number num multiplied by 2 and\nnow at the bottom\nlet's\nconsole. log the result nums\ndoubled and\nsave so this second Loop will create an\narray where each number is doubled so\nthat's how we solve this\nexample all right now that we understand\nhow to Loop through an array and the\naccumulator pattern let's go\nback and we'll create the second version\nof our to-do list so when we add\nsomething to the list it will appear on\nthe page let's go to our code editor and\nwe'll open 11 Todo list.\nHTML and we're also going to open the\nJavascript file so it's this one and for\nthe video I'm going to drag it to the\nbottom of my code editor so that I can\nsee the files side by side so I'll close\nthis for now\nand I'll rearrange my windows a\nbit let's open the tab for this project\nso we'll review what we have so far we\ncan click in this text box and type a\nto-do like make dinner and click add and\nit will add this to-do to this array\nwhich is this array right here we can\ntype another to-do like wash dishes and\nclick add and it will add it to the end\nof the array so now that we have this\narray of to-dos we want to display it on\nthe page to do that we're going to Loop\nthrough this array and we're going to\ncreate some HTML code for each to-do and\nthen put that code on the web page using\nthe Dom so first let's Loop through this\narray to make this easier let's make a\ncopy of this array so right click\ncopy and then here we'll remove this and\nrightclick and\npaste so this will give us some default\nvalues to work with so at the top let's\nLoop through this array using a for Loop\nso we'll type four brackets and curly\nbrackets and then in inside the round\nbrackets we're going to create the loop\nvariable let I or index equal zero\nsemicolon and the loop condition I less\nthan too list do\nlength semicolon and then the increment\nstep\ni++ so this will Loop through each index\nof this array and then inside the curly\nbrackets let's get the string for each\nindex so we'll create a variable to save\nit const to-do and we'll make it equal\nto to-do list square brackets and\nI and now for each to-do we're going to\ncreate some HTML code so we'll create a\nnew line and create a variable const\nHTML and make it equal and we'll create\nsome HTML code using this to-do using a\ntemplate\nstring and then inside we'll create a\nparagraph element so less than P greater\nthan and then less than SL P greater\nthan inside this paragraph we're going\nto insert this to-do so we'll type\ndollar and curly brackets and\nTodo all right so now we're looping\nthrough this array and for each to-do we\ncreated some HTML code and now we're\ngoing to combine all of this HTML code\ntogether and put it on the web page to\ncombine this HTML together we're going\nto use the accumulator pattern so at the\ntop of the loop we'll create a variable\nto store the result let to do list\nCapital\nHTML and we'll make it equal to the\nempty string at the start and then as we\nLoop through the array we're going to\nadd this HTML to the variable up here so\nlet's create a new line and we'll do\nto-do list Capital\nHTML plus equals\nHTML to combine all of this HTML code\ntogether so now after the loop let's\nconsole do log to do list\nHTML to see what we get if we\nsave we took this array of strings\ngenerated paragraph elements for each\nstring and then combine them all\ntogether so now that we have all this\nHTML we can put it on the page using the\nDom so first let's create an element\nwhere we can put this\nHTML so inside the HTML file after the\nbutton we're going to create a different\ntype of element called a div element so\nwe'll type less than div greater\nthan so the div element represents a\ncontainer its purpose is to contain\nother elements inside like paragraphs\nbuttons and even other\ndivs so in this situation we can't\nactually use a paragraph element because\nin HTML we cannot have a paragraph\ninside another paragraph so that's why\nwe have to use a div element here for\nnow let's put some text inside this\nelement so we can learn more about it\nwe'll type text and Save\nso like the paragraph element the div\nelement is a block element that means it\nwill take up an entire line by itself\nand that's why it appears below the text\nbox and the button now one difference\nbetween a div and a paragraph is that a\nparagraph adds extra space above and\nbelow the paragraph while a div does not\nadd any extra space above or below so it\ndoesn't have any default\nstyling all right so now that we learned\nthe div let's put this HTML code inside\nthis div first we need to get this\nelement into our JavaScript and to do\nthat we'll add a class to this element\nclass equals\njs- too Das\nlist and then down here let's scroll\ndown and we'll put this div element\ninside our JavaScript we can do that\nusing document do query\nselector brackets and a string and we'll\ntype a DOT to select a class and we'll\nselect the class\njs-\ntoo-\nlist so this will get this div element\nand put it in inside our\nJavaScript and then every HTML element\nhas a property called dot inner Capital\nHTML which controls the HTML inside this\nelement and now to put the to-do list\nHTML into this div element we're going\nto make the inner\nHTML equal to the\nto-do list HTML\nand now let's save this\nfile and also save the HTML\nfile so this code will take the HTML\nthat we created using the loop and put\nit into the div element and that's how\nwe make them show up on the page so now\nlet's try adding another to-do we'll\ntype watch YouTube and click\nadd and unfortunately\nthis new Todo doesn't show up on the\npage and that's because when we click\nadd it will run this add Todo function\nand update the list but we didn't\nactually update the HTML on the\npage so to update the HTML we need to\nrun all this code again every time we\nadd a too so let's create a function for\nthis code so we can reuse it so at the\ntop we'll create a\nfunction and let's name this\nrender\nto-do list brackets and curly\nbrackets so the word render means to\ndisplay something on the page so we'll\nput all of this code into this function\nso we can delete this curly bracket and\nthen at the end we'll type a closed\ncurly bracket and let's reformat this\ncode by selecting these lines and then\npress tab to add an\nindent so now let's use this function at\nthe start we'll display this to-do list\non the page so we'll call this function\nby typing render\nto-do list and\nbrackets and then let's scroll down\nevery time we add a to-do to the list\nwe're also going to display the list\nagain so at the bottom\nrender to do list and brackets again so\nif we\nsave at the start it will display the\nlist on the page and then if we add it\nto the list like watch YouTube and click\nadd it will add it to the list and also\ndisplay it on the page so that's how we\ncreate the second version of the to-do\nlist\nproject by the way if we scroll up to\nthe render Todo list function this\ntechnique is called generating the\nHTML instead of writing all the HTML by\nhand up here we looped through an array\nand we generated the HTML using\nJavaScript\nso when creating websites with\nJavaScript we usually follow a\nthree-step process first we save the\ndata in this case we saved our data as\nan\narray next we use the data to generate\nthe HTML which we did here and finally\nwe make the website interactive which\nwe'll do later in this\nlesson this is the main idea of\nJavaScript and we follow follow this\noverall process when creating\nwebsites the rock paper scissors project\nfrom the previous lessons was a bit\ndifferent because all the HTML we needed\nwas already there we just had to modify\nit with\nJavaScript so this process we're using\nfor the to-do list is one step above\nwhat we did for rock paper scissors we\nneed to generate some\nHTML and this is a standard process for\ncreating websites we're going to use\nthis process for the to-do list and\nlater the Amazon Project as well as\nwebsites that you build Beyond this\ncourse let's take a break before\ncontinuing with the rest of this lesson\nhere are some exercises that will help\nyou practice what we learned so far\nnow let's create the final version of\nthe to-do list we'll go back to\nsuperimple\ndodev and then here we'll scroll down\nand we'll create this final version so\nin this version we can type a too like\nmake\ndinner and we can also add a due\ndate and when we click add each to-do\nwill now have a name and a due date and\nthey will also have a delete button that\nwe can click to remove it from the list\nso let's build this out one feature at a\ntime we'll start by creating this delete\nbutton we'll go into our code and\nremember we're generating the HTML\nfor the to-do list so for each value in\nthe array we create a paragraph element\nso to add a delete button we just have\nto add a delete button inside here so\ninside the paragraph we'll create a less\nthan button greater than and then less\nthan SLB button greater than and then\ninside this button we'll put the text\ndelete\nlet's\nsave and in the console you'll see that\nthe HTML we generated now has a delete\nbutton inside the paragraph and that's\nwhat shows up on the\npage next we're going to reformat this\nHTML to make it a little easier to read\nso we'll create some new lines here and\nat the\nend and let's put the content of the\nparagraph on its own line like this\nand also put the delete button on its\nown line so remember that template\nstrings have a feature called multi-line\nstrings so this is perfect for writing\nHTML\ncode the last step in the process is to\nmake the website\ninteractive so next let's make our\ndelete button do something when we click\nit to do that we use the onclick\nattribute as usual so inside this button\nwe're going to add an\nonclick attribute equals double quotes\nand then inside these double quotes we\ncan run some JavaScript when we click\nthis button so this works the exact same\nway as what we've been doing so far in\nthis course the only difference now is\nthat here we're generating this HTML\nusing\nJavaScript okay so when we click one of\nthese delete buttons we want to remove\nthis to-do from the list earlier in this\nlesson we learned how to remove a value\nfrom an array using a method called\nsplice so inside this onclick attribute\nwe're going to type the to-do list dot\nsplice and\nbrackets so splice takes two numbers the\nfirst number is the index that we want\nto remove\nso if we click this delete button how do\nwe know which index to\nremove well if we look at our Loop up\nhere we already have the index it's this\nvariable I so we're going to insert I\ninto this string and we can do that by\ntyping dollar curly brackets and\nI now splice also takes another number\nso we'll type comma and the second\nnumber is how many values we want to\nremove so here we just want to remove\none value at this\nindex and finally because we updated the\nto-do list we need to display the list\nagain on the page to display the list we\ncan use this function render to do list\nso down here we're going to type render\nTodo list and brackets\nnow if we\nsave you can see that in the generated\nHTML when we click the first delete\nbutton it will remove the value at\nindex0 which is the first value if we\nclick the second button it will remove\nthe value at index one which is the\nsecond value so we're basically\ngenerating all this HTML using a loop so\nnow if we click this delete button\nit will remove it from the list and then\ndisplay the updated list on the page so\nthat's how we create the delete\nbutton next let's go back to superimple\ndodev and we're going to create the due\ndate\nfeature so first let's create this date\nselector in our\nHTML we'll go to our HTML file and then\nunder the text box we're going to add\nanother input element\nso less than input greater than and to\nmake it a date selector input elements\nhave an attribute called\ntype so this attribute determines what\nkind of input it is if the type is text\nwhich is the default value it's going to\nbe a\ntextbox now if we change the type to\ndate and\nsave it's going to create a date\nselector now let's go back into our\nJavaScript code and first we're going to\nscroll up and remember that right now\nour to-do list is just an array of\nstrings but this time each to-do is also\ngoing to have a due date so how do we\ngroup the name and the due date together\nwe can do that using an object so here\ninstead of just a string we're going to\ncreate an an object and we'll give it a\nname property which is make dinner and\nwe'll give it a due date property and\nwe'll make the due date a\nstring so you can type whatever date you\nhave on the page for me it's 20\n22-12\nd22 and I'll end this object with a\ncurly bracket and I'll turn this to do\ninto an object as well so open curly\nbracket\nname and do\ndate\n2022\nD12\nd22 and closed curly\nbracket now that each to-do is an object\nwe need to update the rest of our code\nlet's scroll down and we'll start with\nthe render function\nso here inside the loop each to-do is no\nlonger just a string it's an object so\nlet's change this variable name to to-do\nobject to make it more clear and now we\nneed to get the name and due date out of\nthis object so we'll type const name\nequals to do object. name and const do\ndate equals to do\nobject. do\ndate and now instead of inserting to-do\nwhich no longer exists we're going to\ninsert the\nname and we're also going to insert the\nDU\ndate if we\nsave now each to-do will also display a\ndue\ndate before before we continue we're\ngoing to review a shortcut we can use\nwith objects called\ndestructuring so here you'll notice the\nvariable name is the same as the\nproperty name we actually have a\nshortcut for this using\nconst curly brackets\nname equals Todo\nobject so this is called destructuring\nthis takes the name property out of the\nobject and and puts it in a variable\nalso called name and this is a shortcut\nfor this line up here so we can comment\nout this line we can also use multiple\nproperties in this shortcut to also take\nthe due date out of the object we can\njust add a comma and do\ndate so this will do the same thing as\nthis line of code and we can comment\nthis\nout if we save\neverything still\nworks next let's scroll down and we're\ngoing to update our add Todo function so\nthis time when we click the add button\nwe're going to get the name and the due\ndate and put it into our list so let's\nget the due date out of this date\nselector first we can do that using the\nDom like we did here so let's add a\nclass attribute so we can get it using\nqueries selector\njs- do\ndd-\ninput and then down here let's create a\nvariable\nconst date input element and make it\nequal to\ndocument. query\nselector and a string Dot and then the\nclass we want to select which which is\nthis class\njs-\ndo-\ndate-\ninput so this will get the date selector\nelement and put it into our\nJavaScript and now below this let's get\nthe due date out of the\nelement we can do that using the value\nproperty again so let's create a\nvariable first const do date and we'll\nmake it equal to the date input\nelement.\nvalue so this will get the date that we\nselected and save it in this\nvariable and now when we add a to-do to\nour list instead of just a name we're\ngoing to add an object so open curly\nbracket We'll add a name property and\nthe value will be the name variable up\nhere so name and then comma and a doe\ndate\nproperty and the value will be this due\ndate variable up here so due date and\nthen a closed curly\nbracket and remember that objects also\nhave a shortcut for this if the property\nand the variable name are the same we\ncan just type it out once like\nthis this will do the same thing as this\nline above same thing with the second\nline if the property and the variable\nname are the same we can just type a\ncomma and type it out\nonce this is called the shorthand\nproperty syntax so these two lines do\nthe same thing as these lines above so\nwe can comment this out using double\nslash and double\nslash so that's all the code that we\nneeded to update now let's save our\nJavascript\nfile and we'll also save our HTML\nfile and let's go to our project We'll\nadd a new to-do like watch\nYouTube and select a\ndate and click\nadd and scroll down you can see that it\nadded our new to-do with a name due date\nand a delete button\nif we click this delete button it will\nremove that to-do if we click this one\nit will also remove the correct\nto-do and that's actually all the\nfunctionality that we need for this\nproject so let's go into our code and\nwe're going to clean up by removing the\nconsole.log\nhere and the console.log up\nhere and Save\nfinally let's add CSS to our project to\nmake it look like the final design we'll\ngo into our code editor and scroll to\nthe top and instead of writing all the\nCSS in here let's put the CSS in a\nseparate file just like our JavaScript\nso we'll click here to show our\nfiles and then find the Styles folder\nand we'll click the Styles folder and\nclick this icon to create a new file\ninside and we'll name this file\n11-\n[Music]\nto-do-list\ndocss and press\nenter and for the video I'm going to\ntake this CSS file and put it at the\nbottom of my code editor so I can see\nthese files side by side and now I'll\nclick here to close\nit and will load this CSS into our\nHTML to do that we can use a link\nelement so inside the head section let's\ntype less than link greater than and\nwe're going to give it two attributes\nRel equals style\nsheet and\nhre equals the file that we want to load\nso we created this this in the Styles\nfolder so we'll type Styles and then a\nslash to go into the folder and we load\nthis file\n11-\ntoo- list.\nCSS and\nsave now let's style our project one by\none until it matches the final design\nwe'll start with the text on the page\nwe're going to change the font so in\nhere let's type\nbody curly brackets and then we'll\nchange the font Das family colon Arial\nand\nsave so that looks pretty good now let's\nwork on styling the to-do list first\nlet's add some more to-dos to the list\nso we'll type\nwatch\nYouTube and then we'll select a date\nand click\nadd and we're going to learn how to\nstyle our list to look like this so\nnotice that this list creates a sort of\ngrid we're going to create this grid\nusing a feature called CSS grid so let's\ngo into our HTML\nfirst we're going to add a class to this\ndiv element so we can style\nit to-do Das grid R and let's\nsave and inside our CSS we're going to\nstyle this class using dot Todo Das grid\nand curly\nbrackets and to turn this into a grid\nwe're going to use the property\ndisplay and\ngrid and we're going to add another\nproperty called grid Das template Dash\ncolumns so this basically sets how many\ncolumns are in our grid the number of\nvalues that we give it is the number of\ncolumns for example if we give it 200\npixels 150 pixels and 100\npixels this will create three columns in\nthe grid the First Column will be 200\npixels the second Colum column will be\n150 pixels and the third column will be\n100\npixels and now each element inside this\ndiv will go into the columns so the\nfirst element will go in the First\nColumn second element will go in the\nsecond column and the third element will\ngo in the third column if we have more\nthan three elements it will wrap around\nand create a new\nrow so let's\nsave and and unfortunately that didn't\nquite work and that's because if we go\nback to our\nJavaScript remember that each to-do is\none paragraph element so this entire\nto-do with the name due date and delete\nbutton will go inside the First Column\nand then the next entire to-do will go\ninside the second column but what we\nactually want is for the name to go in\ncolumn 1 due date column 2\nand delete button column 3 to do this\nwe're going to separate this element\ninto three elements so that each element\nwill go into each\ncolumn so instead of one\nparagraph let's actually use a div\nelement so less than div greater than\nand less than slash div greater than and\nin between we'll insert the name\nso the reason we use a div element is\nbecause div elements don't have any\ndefault styling so it's a little easier\nto style with\nCSS for the due date let's also create a\ndiv element so less than\ndiv and then at the end less than slash\ndiv greater than and finally for the\ndelete button we already have an element\nso so let's just reformat these lines\nwe'll select these lines and then press\nshift tab to remove the\nindent let's remove the extra line and\nwe basically separated each to-do into\nthree\nelements if we\nsave now the grid is working because\nthis element goes into the First Column\nthis element goes into the second column\nand the button goes into the third\ncolumn\nand that's how we lay out these elements\nin a grid like the final design next\nlet's also lay out the inputs and the\nadd button in a grid we'll go to our\nHTML and let's put these three elements\nin a div so we can use grid so we'll\ncreate a less than div greater\nthan and then\ninside let's remove this and we'll add\nit at the end less than SL div and let's\nreformat these lines by selecting them\nand then press tab to add an\nindent and now let's make this div a\ngrid as well let's go back to our CSS\nand we'll add a class to this div class\nequals let's call it to-do Das input d\ndgrid and instead of writing all this\nCSS again we can use a feature of CSS so\nhere we're going to type a comma and\nenter so when we type a comma we can\nstyle multiple classes at the same time\nso we're also going to style dot\ntoo- input Das grid if we save the CSS\nfile\nand let's also save the HTML\nfile now the input and the add button\nare also laid out in the same\ngrid next let's adjust the spacing\ninside our grid so grid has some\nproperties for this we'll go to our CSS\npress enter and we'll use the property\ncolumn Das Gap so this sets the spacing\nbetween the Columns of the grid so let's\nmake this colon 10 pixels and\nsave so now it will add 10 pixels\nbetween each column let's add some\nspacing between the rows as well and\ngrid has another property for this row\nDas Gap colon 10 pixels and\nsave so that will add 10 pixels of space\nbetween the rows now notice it didn't\nadd space between these two rows and\nthat's because these two are separate\ngrids this is the to-do list and this is\nthe to-do input\ngrid so to add space between them we\njust going to use\nmargin at the bottom we'll style dot\ntoo- input Das\ngrid and we'll just add some margin\nunder this grid so margin Das bottom\ncolon 10 pixels and\nsave all right now let's move on to\nstyling the inputs and the buttons we'll\nstart with the inputs first let's add a\nclass so we can style them here let's\nadd a class name Das\ninput and down here let's let's also add\nanother class\ndo- dat Das\ninput let's\nsave and now inside our CSS we'll style\nboth of these\ninputs so we'll style do\nname- input curly brackets and first\nlet's make the text bigger like the\nfinal design we'll set the font Das size\ncolon 15 pixels and save okay so that\nlooks pretty good now let's add spacing\non the inside of this input so we'll add\npadding six pixels and\nsave and that looks pretty good let's\nmove on to the due date input so we\nactually want the same Styles as the\nname input so again we can use that\nfeature of CSS we'll type a comma and\nthen dot\ndo-\ndate- input so now these Styles will be\napplied to this class and to this class\nlet's\nsave and that looks pretty good to me\nlet's move on and style the\nbuttons we'll go into our HTML and find\nthe add button let's add a class so we\ncan style\nit and we'll use add-\ntoo- button let's\nsave and then inside our CSS we'll style\nthat class using dot add-\ntoo- button curly\nbrackets and let's start with the\nbackground color we'll set the\nbackground-color\ncolon\ngreen and\nsave now let's do the text\ncolor color colon\nwhite and\nsave now let's remove the border around\nour button using border colon\nnone\nsave and let's make the text a little\nbigger so we'll do font\nD size colon 15\npixels and\nsave and the last thing we'll add is\nwhen we put our Mouse over the button it\nturns into this pointer icon we can do\nthat using\ncursor colon\npointer and\nsave next let's style the delete buttons\nso these delete buttons are created in\nour JavaScript we'll go into our\nJavaScript\nfile and then here let's add a class to\neach of the delete buttons so we can\nstyle them so we'll add class equals\ndouble quotes and then delete Das\ntoo-\nbutton let's\nsave and then inside our\nCSS at the bottom we style dot delete\nDas too Das button curly\nbrackets and let's start with the\nbackground color so we'll set background\nDas color colon and for this design I\nuse the color dark\nred and\nsave so that will style our delete\nbuttons now let's change change the text\ncolor to white so we'll use color colon\nwhite and\nsave now let's remove the Border using\nborder colon\nnone\nsave and let's also make the text bigger\nusing font Das size colon 15\npixels save\nlet's add this pointer icon using cursor\ncolon\npointer save and let's add some padding\nat the top and bottom of the button so\nwe'll add\npadding-top colon 10 pixels and padding\nDash bottom colon 10 pixels and Save\nso that's all the Styles we need for the\ndelete button and we can also close the\nconsole to see the entire list however\nnow we have another problem which is\nthis text and this button are not\nvertically aligned in the center to\nvertically align in the center we're\ngoing to go back to the grid Styles so\nwe'll scroll\nup to the to-do\ngrid and CSS grid has another property\nfor vertical alignment and that is align\nDas items Colon\nCenter to vertically align in the center\nif we\nsave now the text is aligned with the\nbutton but now we have a new problem our\nadd button is no longer stretching to be\nthe same as the inputs so by default\nalign items is\nstretch that's why this button stretches\nto match the inputs and now that we\nchanged it to align center it's no\nlonger going to stretch so to solve this\nproblem we just have to make this grid\nstretch so down here in the to-do input\ngrid Styles we'll change align Das items\nback to\nstretch and Save\nsave and that will cause this Grid at\nthe top to stretch vertically again and\nthat's it that's all the styling that we\nneed and now we finished this to-do list\nproject in the rest of this lesson we're\ngoing to learn more details about arrays\nand\nLoops so I'm going to put this back in\nthe same\nwindow and I'll rearrange this\nwindow and now let's go back to 11\narrays and loops.\nHTML and we'll open the tab for that\nfile and we can also close these other\nfiles for\nnow and first let's comment out the\nprevious code\nusing\nslashstar and at the bottom star\nslash and we'll scroll down and\nsave the first detail we're going to\nlearn is that that arrays are references\nso in the object lesson we learned that\nobjects are references arrays work the\nsame way so for example if we create an\narray\nconst array 1 equals the array 1 2\n3 this variable doesn't actually contain\nthe values 1 2 3 this array is saved\nsomewhere in the computer's memory and\nthis variable only contains a reference\nthat points to where this array is in\nmemory and that means if we create a\ncopy of this variable\nconst array 2 equals array\n1 array 2 doesn't contain a copy of the\nvalues it actually just contains a copy\nof the reference so now both of these\nvariables are pointing to the same array\nso if we did array\n2. push\nfor and then we\nconsole.log array 1 and we\nconsole.log array\ntwo and\nsave it will show us that even though we\nadded four to array two array 1 and two\nwere both modified and that's because\narrays are references so both of these\npoint to the same array in memory to\navoid this Behavior we can create a copy\nof the values in the array using a\nmethod called slice so here if we did\narray\n1. slice instead\nthis will make a copy of the values in\nArray one and now these two variables\npoint to two different arrays if we\nsave now you'll see that this line only\naffected array\ntwo the second detail we're going to\nlearn is a shortcut called\ndestructuring so at the bottom here\nlet's create a new array\nconst array 3 3 equals the array 1 2\n3 and let's say we want to get the first\nvalue and the second value out of this\narray one way to do this is to use the\nindex like this another way is to use a\nshortcut called\ndestructuring so here we're going to\nreplace this with square brackets and\nnow we can type some variable name\nif we type first value it will take the\nfirst value and save it in a variable\ncalled first value if we type comma and\nsecond value it will take the second\nvalue and save it in this variable so\nthis is an easier way to get values out\nof an array and save them inside a\nvariable next we're going to learn more\ndetails about loops so Loops have two\nfeatures called break and continue break\nlets us exit a loop early for example\nlet's create some new lines and let's\ncreate a loop that counts from 1 to 10\nso as usual we can use a four\nLoop let I =\n1 I less than or equal to 10\nand I\n++ and we'll\nconsole. log I and\nsave so this will count from 1 to\n10 so now let's say that when I is 8 we\nwant to stop this Loop early so first\nlet's check if I is equal to 8\nif it is equal to 8 we're going to stop\nthis Loop by typing break and\nsemicolon if we\nsave once this reaches eight break will\ncause this Loop to stop and now it only\ncounts up to eight so that's the break\nfeature of a loop it lets us stop a loop\nearly the next feature is called\ncontinue continue lets us skip one\niteration of the loop or one run of the\nloop for example let's say we want to\nskip the number three so at the top we\ncan check if I is equal to\nthree and if it is we can use the code\ncontinue this will skip the rest of this\ncode and go back up to the top of the\nloop and do i = 4 if we\nsave this will skip three in the loop so\ncontinue let us Skip One iteration of\nthe loop so now let's say that we want\nto skip a number if it's divisible by\nthree divisible by three means the\nnumber can be divided evenly into three\nfor example 3 and six are both divisible\nby three but s is not divisible by three\nbecause there's one remaining this is\ncalled the remainder and we can\ncalculate the remainder using the\nremainder operator which looks like this\nso to check if a number is divisible by\nthree we can check if the remainder is\nzero so here we're going to replace this\nwith I remainder 3 and we'll check if\nthe remainder is equal to to Z if we\nsave this will skip three and six\nbecause they're both divisible by\nthree next let's use continue in a while\nloop so at the end here we'll create\nsome new lines and let's say we want to\ncount from 1 to 10 using a while loop so\nwe'll create a loop variable let I equal\n1 and we'll create a while\nloop I less than or equal to 10 curly\nbrackets and the increment step\ni++ and inside the loop we just\nconsole. log I and\nsave so this will count from 1 to 10\nagain and let's say we want to not count\nnumbers that are divisible by three so 3\n6 and 9 so at the top here we can check\nif I remainder 3 is equal to zero and\ncurly brackets and we might just try to\ndo\ncontinue however in a while loop\ncontinue will actually skip the\nincrement step and this will cause an\ninfinite Loop Loop so when using\ncontinue in a while loop we have to do\nthis increment step manually so before\ncontinue we have to do I\n++ to avoid an infinite Loop if we\nsave it will skip the numbers that are\ndivisible by three which is 3 6 and 9 so\nremember in a while loop if we use\ncontinue always do the increment step\nmanually in a for Loop however the\nincrement step is done automatically\nafter every\niteration all right the last detail\nwe're going to learn is how to use loops\nwith functions so let's say we have an\narray of numbers and we want to create a\ncopy of this array where each number is\ndoubled so we already have the code for\nthis we can scroll up and the code for\nthis is here\nso let's actually make a copy of this\ncode from before we'll\nrightclick\ncopy and scroll down\nhere and at the\nbottom right click and\npaste at the top let's create an array\ncalled\nnums so const nums equals array and one\n1 and\nthree if we\nsave this will create an array where\neach number is\ndoubled now what if we wanted to use\nthis loop on a different array other\nthan one one and three we can do that\nusing a function so let's create a\nfunction around this Loop we'll create\nfunction let's name it dou full\narray brackets and curly bracket we'll\nremove the closed curly bracket and at\nthe bottom We'll add it back and we'll\nselect these\nlines and press\ntab so now instead of doing this loop on\nthe same array every time we can turn\nthis into a parameter so at the top here\nwe'll create a parameter called\nnums and we're going to delete this\nline and we're going to Loop over this\nparameter instead so at the bottom we\ncan call our function using double array\nand\nbrackets and between the brackets we're\ngoing to save an array into nums so\nsquare bracket 1 1 and 3 if we\nsave this will do the same thing as\nbefore but now because it's in a\nfunction we can use this loop with any\narray not just one one and three so at\nthe end we can do double array\nbrackets and an array 2 2 five this time\nand\nsave and it will create an array where\nthese numbers are doubled so using a\nfunction we can reuse this Loop for any\nvalue another feature of using a\nfunction with a loop is that we can\nbreak out of this Loop using a return\ninstead so first let's actually use a\nreturn in this function instead of\nconsole.log we're going to\nreturn nums doubled\nand here we're going to console.log the\nresult\nconsole.log and\nconsole.log and\nsave so this does the same thing as\nbefore except we're returning the result\nand console. logging outside of the\nfunction now let's say that if we see\nthe number zero we want to stop this\nLoop early to do that we can click here\nand check if num is equal to\nzero and if it is we can break out of\nthis Loop now when we're inside a\nfunction we can also use a return\nstatement to break out of this Loop so\nwe can also do return nums\ndoubled so a return statement will end\nthis function immediately so this is\nanother way of ending the\nloop so down here if we add the number\nzero and then five and\nsave you'll notice that the loop stops\nwhen we see the number zero so return is\nanother way of breaking out of a loop\nwhen it's inside a function and that's\nthe end of this lesson in this lesson we\nlearned about arrays which represent a\nlist of values we learned about loops\nwhich let us run some code over and over\njust like a loop we learned a Technique\nwe can use with loops called the\naccumulator pattern and we used it to\ncreate a to-do list project we learned\nthat arrays are references and the\ndestructuring shortcut and we learned\nmore features of Loops like break\ncontinue and using Loops inside a\nfunction here are some exercises to help\nyou practice arrays and loops\nin this lesson we're going to learn some\nAdvanced features of functions and we're\ngoing to use them to improve our\nprevious\nprojects first let's create a new file\nfor this lesson we'll go to our code\neditor and click here to show our files\nand click here to create a new file and\nwe'll name this\n12- Advanced D\nfunctions.\nHTML and press\nenter now let's copy 11 arrays and Loops\ninto this file so we'll click here\ncontrol a or command a and then\nrightclick\ncopy and in\nhere right click and paste\nand we can close this for now and let's\nprepare this file for this lesson so\nwe'll scroll\nup and change the title to\nAdvanced\nfunctions and let's remove all the\nJavaScript code from\nbefore and now let's save and open this\nfile in the browser by right click\nclicking open with live\nserver and let's also open the console\non this page so we'll\nrightclick\ninspect and open the\nconsole and now we can close the\nprevious\ntabs as well as the previous\nfiles and now we're ready to begin so\nfirst we're going to review how to use\nfun\nfunctions inside the script element\nlet's create a function using the word\nfunction will give it a name\ngreeting brackets and curly brackets and\ninside the function we'll type the code\nconsole.log the string\nhello so this is a function and it lets\nus reuse code to run the code inside\nthis function we can type the function\nname which is greeing and then\nbrackets if we\nsave this line of code we'll run the\ncode inside the function and display\nhello this is known as calling the\nfunction or running the\nfunction so now that we understand\nfunctions we're going to learn an\nadvanced feature of functions which is\nfunctions are values so we learned many\ntypes of values in this course like\nnumbers strings and booleans and we can\nsave a value in a variable for example\nlet's create some new lines and we'll\ncreate a variable const num equal\n2 so this will save the value two inside\nthe variable num\nnow functions are also values and this\nmeans just like a number we can save a\nfunction inside a variable so let's give\nit a try we'll create a new line and\ntype\nconst function one and we'll make this\nequal to a function this time so we'll\njust type\nfunction and a name\ngreeting brackets and curly\nbrackets and inside the function we'll\ntype\nconsole. log the string hello\n2 and we'll put a semicolon at the end\nsince we're saving in a\nvariable so this variable now contains a\nfunction we're using the exact same\nsyntax as before except we're just\ntaking this function and saving it in a\nvariable because functions are values\nso now that this function is inside this\nvariable let's actually console.log it\nso we\nconsole.log function one and\nsave and this will show us that the\nvariable function one actually contains\nthis\nfunction now on a new line we can also\ndo console.log\nand check the type of function one and\nsave and it will tell us that the type\nof this variable is a function so as you\ncan see a function is just another type\nof value and we can save it in a\nvariable we can also run the function\ninside this\nvariable by typing the variable name\nfunction 1 and because this contains a\nfunction we can actually just call it\nusing\nbrackets so this will run the code\ninside this function if we save it\ndisplays hello\nto now let's do some Cleanup in this\ncode in JavaScript as long as there's a\nway to access a function this function\nname is not needed so here we can access\nthis function using this variable so\nthis function name is not needed and we\ncan actually just delete it like this\nand now this is called an anonymous\nfunction which means a function without\na\nname now an interesting thing to know is\nthat the function syntax that we've been\nusing this entire course up here is\nactually a shortcut for this code now\neven though this syntax uses VAR and we\nusually don't recommend VAR this syntax\nactually has a couple advantages number\none it's easier to read and number two\nit gives us a feature called hoisting\nwhich means we can call this function\ngreeting brackets before we create it in\nthe code so using hoisting we don't have\nto worry about what order we write this\ncode hoisting doesn't work when we\ncreate our function and save it in a\nvariable like this so in JavaScript\nfunctions are values and just like any\nother value we can save it in a\nvariable now let's think what else can\nwe do with a value well we can save a\nvalue in an object for example let's\nscroll\ndown and create some new lines and we'll\ncreate an object\nconst object 1 equals curly\nbrackets and inside this object we'll\nhave a property num with the value\ntwo so this saves the number two inside\nthis object now because functions are\nvalues we can also save a function\ninside this object so we'll type comma\nand then a property fun colon and we'll\ncreate a function this time function\n[Music]\ngreeting brackets and curly brackets and\ninside we type\nconsole. log the string hello\n3 so this saves a function inside this\nobject under the property fun now to\naccess this function we just use the dot\nnotation as normal so object one dot\nfun and because this value is a function\nwe can call it using\nbrackets if we\nsave this will run the code inside the\nfunction and display hello 3 so remember\nthis is called a method when we have a\nfunction saved inside an\nobject again as long as there's a way to\naccess this function for example using\nobject one. fun then we don't need this\nfunction name so we'll delete it and use\nan anonymous\nfunction now let's think what else can\nwe do with a value we can pass a value\ninto a function for example down here\nlet's create a function\nfunction\ndisplay brackets and curly brackets and\nwe'll give this function a parameter so\nin here we'll create a parameter and\nname it\nparam and inside the function we can use\na parameter just like a variable so we\nconsole.log the\nparam and then down here let's call this\nfunction using\ndisplay brackets and two\nthis will take the value two save it\ninside Pam and then we can use it just\nlike a variable if we\nsave this will display two in the\nconsole so this is known as passing a\nvalue into a function now because\nfunctions are values we can also pass a\nfunction into a function so let's give\nit a try down here\nwe'll create a new function\nfunction run brackets and curly\nbrackets and this function will also\nhave a parameter let's call it\nparam and down here we'll call this\nfunction run\nbrackets and between the brackets we're\ngoing to give it a function this time so\nwe'll type function\nbrackets and curly brackets and inside\nthe function we'll type\nconsole.log the string hello\n4 so this will take this function and\nsave it inside Pam and now up here we\ncan use Pam just like a variable so we\ncan type\nPam and because Pam contains a function\nwe can actually just call it using\nbrackets if we\nsave this code will run the function\nthat we created down here and display\nhello 4 so this is called passing a\nfunction into another\nfunction the function that we're passing\nin is called a callback function or a\ncallback so to summarize functions are\nvalues anything we can do with a value\nwe can also do with a\nfunction now let's do some practical\nexamples using functions as values we're\ngoing to learn a feature of JavaScript\ncalled set timeout set timeout allows us\nto run a function in the\nfuture first we'll comment out the\nprevious code using\nslashstar and at the bottom\nstar slash and let's create some new\nlines and we're going to type the code\nset capital T time\nout so set timeout is a built-in\nfunction so we can type brackets to call\nthis function Now set timeout takes two\nparameters inside these brackets the\nfirst parameter is a function that we\nwant to run in the future\nlet's create a\nfunction brackets and curly brackets and\ninside this function let's type\nconsole.log the string time\nout so here we're using a function as a\nvalue and we're passing it into another\nfunction at the end we'll type a comma\nand we'll give set timeout a second\nparameter the second parameter is how\nlong to wait before running this\nfunction so this is a number in\nmilliseconds 1,000 milliseconds is equal\nto 1 second so if we type 3,000\nmilliseconds this is equal to 3 seconds\nso set timeout will wait for 3 seconds\nand then call this function if we\nsave after 3 seconds\nit's going to display timeout in the\nconsole so that's set timeout we give it\na function and it will call this\nfunction after a certain amount of\ntime so now we're going to learn an\nimportant concept called a synchronous\ncode so after set timeout let's type\nconsole.log the string next\nline and Save\nso notice that it displays next line\nfirst and then after 3 seconds it\ndisplays timeout so what's happening\nhere why are they reversed set timeout\nsets up a timer and after 3 seconds it\nwill call this function however it\ndoesn't actually wait for the 3 seconds\nto finish it just sets up the timer and\nimmediately goes to the next line so\nthat's why this line is displayed first\nso this is called asynchronous code\nasynchronous code means the computer\nwon't wait for this line to finish\nbefore going on to the next line so for\nset timeout it'll just set up the timer\nand then immediately go to the next line\nsynchronous code on the other hand means\nthe computer will wait for one line to\nfinish before going to the next line so\nall the code we've written in this\ncourse so far has been synchronous code\nin addition all the code inside this\nfunction is also synchronous code so if\nwe added\nconsole.log the string time out\nto and\nsave the code inside the function will\nstill run line by line it will wait for\neach line to finish before going to the\nnext line and after 3 seconds it will\ndisplay timeout followed by timeout\n2 so don't worry all the code that we\nnormally write will be synchronous code\nit will run line by line as usual the\nonly time that code becomes asynchronous\nis when we use certain features of\nJavaScript like set timeout so set\ntimeout is the only part that is\nasynchronous now the advantage of set\ntimeout being asynchronous is that it\ndoes doesn't block our code for 3\nseconds waiting for this timer to finish\nit just sets up the timer in the\nbackground and then goes to the next\nline of code so this allows our code to\ndo other things while this timer is\nrunning in the background and this is\nsimilar to real life if you set up a\ntimer on your alarm clock you're not\ngoing to stop and wait for the timer to\nfinish you're going to go and do\nsomething else asynchronous code is the\nexact same concept\nnext we're going to learn a similar\nfunction to set timeout called set\ninterval so at the bottom let's type the\ncode set capital I\ninterval and set interval is another\nbuilt-in function so we can call it\nusing\nbrackets and set interval takes these\nsame two parameters as set timeout the\nfirst parameter is a function that we\nwant to run in the future so let's type\nfunction brackets and curly brackets and\ninside we'll type\nconsole. log the string\ninterval now let's add a comma and the\nsecond parameter is also a number in\nmilliseconds so we'll type 3,000\nmilliseconds or 3 seconds so set\ninterval will run this function 3\nseconds in the future but this time it\nwill keep running the function every 3\nseconds if we\nsave in the console every 3 seconds it\nwill run the function and display\ninterval so set interval is also\nasynchronous below it if we type\nconsole.log the string next\nline\ntwo and\nsave it will set up the interval and\nthen immediately go to the next line and\ndisplay next line two so that's set\ninterval we give it a function and it\nwill keep running this function after a\ncertain period of time so now let's do a\nproject using what we learned so far\nlet's go to our browser and we'll create\na new tab at the top\ntop and here let's type\nsuperimple\ndodev slash projects slash Advanced Das\nfunctions and press\nenter so this is basically the rock\npaper scissors game that we created\nearlier except this time it has an extra\nbutton called autop playay if we click\nthis Buton\nbutton every second the computer will\nplay by\nitself so this feature will help us\npractice using set\ninterval so first let's make a copy of\nthe project files we'll go into our code\neditor and click this icon to show our\nfiles and let's make a copy of 10 rock\npaper scissors for this lesson so we'll\nrightclick copy\nand down here rightclick and\npaste and I'll stop this for now so here\nwe're going to change the name by right\nclicking\nrename we'll remove copy at the end and\nat the beginning we'll change it to 12\nand press\nenter and let's also make a copy of the\nJavaScript and CSS files so we'll click\nthis file and right click\ncopy and then click the folder right\nclick\npaste and we'll rename this file\nrightclick\nrename remove copy at the end and at the\nbeginning change it to 12 and press\nenter and let's also make a copy of the\nCSS file select it rightclick copy\nclick the folder right click and\npaste and right click\nrename remove copy and at the front\nchange it to 12 and press\nenter now let's scroll down to 12 rock\npaper\nscissors and I'll close this for\nnow and inside the head let's change\nthis to load 12 rock paper scissors and\nwe'll scroll to the\nbottom and here instead of the lesson 10\nfile we'll load The Lesson 12 Javascript\nfile let's save and we'll open this in\nthe browser by\nright-clicking open with live\nserver so now we're ready to begin let's\ngo back to superimple\ndodev and the first thing thing we're\ngoing to create is this autoplay button\nso beside the reset score button which\nis here we're going to create a new\nbutton less than button greater than and\ninside we'll have the text auto\nplay let's\nsave and go back to our\nTab and now we have this button so next\nlet's style this button with CSS so\nwe'll give it a\nclass class equals\nauto-play Das\nbutton and\nsave and now let's open the CSS\nfile I'm going to take this file and\nthen drag it to the bottom so I can see\nit side by side so I'll close this for\nnow and rearrange this a little bit and\nthen down here and we're going to style\nthe autop playay button so let's just\nmake the style the same as the reset\nscore button so in the CSS we'll scroll\ndown to the reset score button Styles so\nwe'll add a comma at the end and type\ndot\nauto-play dasb button so now these\nStyles will apply to the class reset\nscore button and the auto playay button\nif if we\nsave now we styled our project so next\nlet's make this button interactive so at\nthe top here we'll add an onclick\nattribute and then in here we're going\nto run some JavaScript code let's\nactually create a function so we can\nseparate the JavaScript into its own\nfile so we'll run a function called auto\nplay and\nbrackets so now let's\nsave and right now this function doesn't\nexist so we have to create this function\nin the Javascript file so for me the\nfile is right here I'll select it and\nthen drag it down here so I can see it\nside by side so let's scroll down and\nI'm going to create it just above the\nplay game function so here we'll create\nsome new lines and type function\nauto play brackets and curly\nbrackets and now inside this function we\nwant to play the game every second so we\ncan use set interval to run some code\nevery second so let's type set\ninterval\nbrackets and inside the brackets will\ngive it a function that we want to run\nso brackets and curly\nbrackets and then at the end let's type\na comma and we'll give it\n1,000 so this means it will run this\nfunction every 1,000 milliseconds or 1\nsecond and now inside this function\nwe're going to automatically play the\ngame and to play the game we can use\nthis function right here play game so\nhere we'll type play game\nbrackets now we need to provide this\nfunction with a Player move and remember\nwe have another function pick computer\nmove which will give us a random move so\nabove this line let's create a variable\nconst\nPlayer move and we'll make it equal and\nwe'll pick a random move using pick\ncomputer move\nand\nbrackets and finally we'll take this\nmove that we picked and pass it into\nthis function so Player\nmove so now when we click this button it\nshould play the game every second let's\nsave and click\nautoplay and it works the computer is\nplaying against itself every second so\nnow let's make this button button stop\nplaying when we click it again so at the\ntop let's create a variable to keep\ntrack of whether or not we're playing so\nwe use let is auto playing and at the\nstart we'll make it equal to\nfalse and\nsave and now inside this function we'll\ncheck using an if statement brackets and\ncurly\nbrackets and inside this condition let's\ncheck if we're not playing so not is\nauto\nplaying so if we're not playing then we\nwant to start playing the game which is\nthis code down here so let's select this\ncode and then right click\ncut and in here right click and\npaste and also after we start playing\nthe game we're going to change this\nvariable to true so is auto playing and\nwe'll make it equal to true because now\nwe are autop playing so now let's add\nthe else Branch to this\nstatement else curly\nbrackets so now we need to stop this\ninterval so how do we do that the answer\nis that set interval actually returns a\nnumber and this number is like an ID we\ncan use this ID to stop the interval so\nat the front let's create a variable to\nsave this ID\nconst\ninterval ID and\nequals however there's another problem\nhere every time we run the function\nwe're going to get a different ID so in\norder to save the ID from last time we\nneed to put this variable outside the\nfunction so let's select this and remove\nit for now and we'll scroll up and here\nwe'll create the variable let\ninterval ID and we'll leave it undefined\nto start and now down here we're going\nto save the return value into this\nvariable by typing\ninterval ID equals set\ninterval and now at the bottom we're\ngoing to use the interval ID to stop the\ninterval let's scroll down and to stop\nan interval we can use a function called\nclear interval so we'll type clear\ncapital I interval\nand\nbrackets and between the brackets we're\ngoing to give it an ID that we want to\nstop so we'll give it this interval\nID\ninterval\nID and then at the bottom let's also\nchange is autop playing to false because\nwe just stopped it so is auto playing\nequals false\nand\nsave so now if we try out this\nbutton it will start playing the game by\nitself every second and if we click the\nbutton again it will stop playing the\ngame so that's how we stop an interval\nwe need to save the ID and then call\nclear interval with this ID so now I'll\nclean up the code a little by removing\nthis extra line and Save\nand now we're finished with this\nfeature so next let's go back to our\nAdvanced functions file so I'll click up\nhere and then at the bottom I'll open 12\nAdvanced\nfunctions and hide the files for now and\nwe're going to learn some more features\nof functions as values so let's actually\nclose the other files that we opened\nand first let's comment out the previous\ncode with\nslashstar and at the bottom star\nslash let's scroll down and\nsave and let's open the tab for this\nfile so now we're going to learn another\nway to Loop through an array first let's\ncreate an array we'll type square\nbrackets and inside the array we'll have\nthe string make\ndinner and another string wash\ndishes and another\nstring watch\nYouTube so in the previous lesson we\nlearned how to Loop through an array\nusing a for Loop or a while loop another\nway to Loop through an array is using a\nmethod of the array called four each so\nat the bottom let's type dot for capital\nE each and\nbrackets so this is the four each method\nand it allows us to Loop through this\narray inside these brackets we're going\nto give for each a function so we'll\ntype\nfunction brackets and curly brackets so\nagain we're just passing a function into\nanother\nfunction however this function will be a\nlittle different we're going to give it\na parameter so up here let's create a\nparameter called\nvalue so what four each does is that it\nLoops through the array and for each of\nthese values it will save the value in\nthe parameter and run the function so\nlet's\nconsole.log\nvalue and\nsave so this will Loop through the array\nand display each value in the console so\nlet's go through this step bystep so\nit'll take the first value save it in\nthis parameter and run the function then\nit will take the second value save it in\nthe parameter and run the function then\nit will take the Third value save it in\nthe parameter and run the\nfunction so the for each method is\nactually the preferred way to Loop\nthrough an array because this is easier\nto read than a for Loop like this and\nfor each also has another feature we can\ngive this function a second parameter so\nwe can type comma and the second\nparameter is the\nindex or the position of the value in\nthe array so for the first value index\nwill be zero for the second value index\nwill be one third value index will be\ntwo and so on so above this line let's\nalso\nconsole.log the\nindex and\nsave and this will also display the\nindex of each\nvalue all right now let's do a practical\nexample using the for each method we're\ngoing to go back to the to-do list\nproject that we created in the previous\nlesson so we'll click up here to show\nour\nfiles and let's scroll up and let's open\n11 too\nlist.js so in this code we used a for\nLoop to display the to-do list on the\npage we're going to switch this to using\na for each method instead said so first\nlet's actually make a copy of the files\nfor this project we'll click up\nhere and let's click 11 to-do list and\nrightclick\ncopy and let's click the script\nfolder rightclick and\npaste and now we'll rename this by\nright-clicking\nrename remove copy from the end and\nchange the beginning to 12 and press\nenter let's also make a copy of the CSS\nand HTML file for this project so we'll\nclick the CSS file right click\ncopy click the Styles folder right click\nand\npaste rightclick\nrename remove copy\nand at the front change it to 12 and\npress\nenter and finally we'll scroll down\nclick 11 Todo list.\nHTML\nrightclick\ncopy and then down here right click and\npaste right click\nrename remove copy at the end and at the\nbeginning change it to 12 and and press\nenter now we can hide these\nfiles and we can close the lesson 11\nfiles and now here we're going to change\nthe CSS file that we load to 12 to-do\nlist and we'll scroll down and we'll\nalso change the Javascript file that we\nload to 12 to-do list now let's\nsave and we'll open this in the browser\nby right clicking\nopen with live\nserver okay now let's go back to the JS\nfile so I'll take this file and drag it\nto the\nbottom and I'll rearrange the windows\nhere we're going to scroll down and\nwe'll change this for Loop to use a for\neach method so first let's type above\nthis for Loop and we'll type the array\nthat we want to Loop through which is\nTodo list and we'll type Dot and use the\nfour each method and\nbrackets inside the brackets we'll give\nit a function that we want to run for\neach to do so we'll type\nfunction brackets and curly\nbrackets and this function can have two\nparameters the first parameter will\ncontain each value in the array so we'll\ncall it too\n[Music]\nobject we'll type a comma and the second\nparameter contains each index in the\narray so we'll just call it\nindex and now inside this Loop we\nbasically want to do everything that we\ndid here so let's just make a copy of\nthis\ncode right click\ncopy and then up here inside for each\nright click and and\npaste so now if we scroll up we already\nhave the to-do object up here so we\ndon't need to get it from the array like\nbefore so we can remove this line and\nlet's also remove these\ncomments the other thing we have to\nchange is that previously we were using\nI for the index but now the index is\ncalled index so we just change this to\nto\nindex so that's how we use a for each\nmethod instead of a for Loop if we\ncompare this code to the four Loop that\nwe had before the for each method is\neasier to read so for the rest of this\ncourse we're going to prefer to use four\neach instead of a for Loop so we're\ngoing to remove this for\nLoop let's scroll back up and\nsave and the project still works so\nthat's a practical example of using the\nfor each method now let's go back and\nlearn some more details about for each\nwe'll close the Javascript file for now\nand go back to Advanced functions. HTML\nand open the tab for this\nfile so in the previous lesson we\nlearned a feature of Loops called\ncontinue continue lets us skip to the\nnext iteration or the next run of the\nloop for each methods don't have\ncontinue but we can do the same thing\nwith a return statement so let's say in\nthis Loop we don't like washing dishes\nif the value is wash dishes we're going\nto skip it and not display it in the\nconsole so above we'll create an if\nstatement\nand then inside the condition we'll\ncheck if value is equal to the string\nwash\ndishes and then in the curly brackets if\nit is equal will return and\nsemicolon so this return statement will\nend this function early and it will go\non to the next function so it basically\ndoes the same thing as continue in a for\nLoop if we\nsave you'll notice that it skipped wash\ndishes in the previous lesson we also\nlearned a feature of Loops called break\nbreak lets us exit a loop early\nunfortunately there's not an easy way to\nbreak in a 4 each Loop so if we need to\nuse break to exit this Loop early then\nit's better to use a regular for\nLoop let's take a break before\ncontinuing with the rest of this lesson\nhere are some exercises that will help\nyou practice what we learned so far\nso next we're going to move on and learn\na shorter way to write functions called\nArrow functions so let's go to the\nbottom of this code we'll create some\nnew lines and let's create a variable\nconst and we'll name the variable Arrow\nfunction and we'll make it equal to to\nbrackets equal greater than or an arrow\nand then curly\nbrackets inside the curly brackets we'll\ntype some code\nconsole.log brackets and the string\nhello and we'll put a semicolon at the\nend so this is an arrow function it\nworks the same way as a regular function\nfor example we can call this Arrow\nfunction by typing the variable name\nArrow\nfunction and\nbrackets if we\nsave this line of code will run the code\ninside this Arrow function and display\nhello so Arrow functions mostly work the\nsame way as regular functions so to\ncompare them let's actually type above\nthis code we'll create some new lines\nand type\nconst\nregular\nfunction equals the word\nfunction brackets and curly brackets\nconsole.log string\nhello so these two syntaxes do the same\nthing the difference is that instead of\nusing the word function an arrow\nfunction just uses an\narrow now parameters work the same way\nin an arrow function we just type the\nparameter between these round brackets\nso here let's type\nparam and here as\nwell if we want multiple parameters it\nalso works the same way up here we can\ntype comma param 2 and down here comma\nPam 2 and finally return statements also\nwork the same way so in this function we\ncan return five and in the arrow\nfunction we can also return\nfive so now let's learn some differences\nbetween these two Arrow functions have a\nfew shortcuts that regular functions\ndon't have for example at the bottom\nlet's create an arrow function using\nconst and we'll name it one\nperm and make it equal to an arrow\nfunction brackets arrow and curly\nbrackets now in this Arrow function\nwe're going to give it one parameter\nparam and inside the function will\nconsole.log param plus\none so when an arrow function only has\none parameter these round brackets are\noptional so we can actually remove\nthem if we do one param brackets 2 if we\nsave it will display 2 + 1 which is\n3 let's learn another shortcut we'll\ncreate some new lines and type const one\nline and make it equal to an arrow\nfunction brackets arrow and curly\nbrackets and inside will return 2 +\n3 so when an arrow function only has one\nline like this we can actually put it on\nthe same line as the\narrow and now that everything's on the\nsame line the curly brackets are\nactually optional so we can remove them\nand we can also remove the return\nstatement so this is a oneline arrow\nfunction if we just have an arrow it\nwill automatically return the result on\nthe right so at the bottom we can\nconsole. log and call the one line\nfunction with\nbrackets if we\nsave this function will return to plus\nthree and it will display five in the\nconsole so that's Arrow functions it's a\nshorter way of writing a regular\nfunction and it has a few\nshortcuts for now let's get some\npractice using Arrow functions so let's\nscroll up in this code to the for each\nmethod so let's use an arrow function\nhere instead we just have to remove the\nword\nfunction and after the round brackets\nadd an arrow equals greater than if we\nsave the loop still works so when we're\npassing a function into another function\nlike for each it's recommended to use\nArrow functions because it makes our\ncode easier to read so now let's use use\nArrow functions in some of our previous\nprojects we'll start with the rock paper\nscissors game let's open our files by\nclicking\nhere and we'll find the 12 rock paper\nscissors. JS\nfile and then inside this file we're\ngoing to scroll down to the autoplay\nfunction so here we're passing a\nfunction into another function so it's\nrecommended to use an arrow\nfunction let's remove the word\nfunction and add an arrow so now this\ncode is a little easier to read now what\nabout this function up here function\nautoplay should we also switch this to\nan arrow function so this situation is\nmore personal preference so above this\nlet's actually create an arrow function\nversion of this const\nauto play equals brackets and arrow and\ncurly\nbrackets so even though we could create\nan arrow function version of this I\nactually prefer the regular function\nsyntax here for two reasons number one I\nthink this is easier to read than this\nand number two this function syntax\nenables hoisting which means we can call\nthis function before we create it and we\ndon't have to worry about which order we\nwrite the code so for these reasons I\nactually prefer this situation to use a\nregular function syntax and not an arrow\nfunction so we'll comment out the arrow\nfunction using double\nslash and double\nslash now let's\nsave and let's open the tab for this\nproject and we'll give give it a try so\nclick\nautoplay and this still works after\nreplacing with an arrow\nfunction next let's go to the to-do list\nproject and switch to Arrow functions so\nwe'll go to our code editor and find the\nto-do list project which is\nhere and let's scroll\ndown so inside render to-do list we're\nusing four each and we're passing this\nfunction into another function so it's\nrecommended to use an arrow function\nhere so we'll remove the word\nfunction and after the brackets We'll\nadd an\narrow and again I'll leave this function\nsyntax as a regular function because\nit's easier to read and enables hoisting\nso let's\nsave and go back to our to-do list\nand everything still\nworks next let's go back to 12 Advanced\nfunctions.\nHTML and we'll scroll to the\nbottom and we'll open the tab for this\nfile and we'll review another place we\ncould use Arrow functions which is\ninside an object so at the bottom here\nlet's create a new object con\nobject 2 equals\nobject and then inside let's type the\nproperty method colon and an arrow\nfunction brackets arrow and curly\nbrackets so even though we could save an\narrow function inside an object like\nthis objects already have a shortcut for\nfunctions so at the bottom we could just\ntype\nmethod brackets and curly\nbrackets so this syntax is called the\nshorthand method syntax so this\nshorthand method syntax is actually\neasier to read than an arrow function so\nwhen saving a function in an object it's\nactually recommended to use this syntax\ninstead there's also another difference\nbetween regular functions and arrow\nfunctions but we'll learn about it later\nin in this course because it's a more\nadvanced\nfeature now let's move on and we're\ngoing to learn another Improvement we\ncan make to our projects so let's\ncomment out this code we'll scroll up\nand type SL star and at the\nbottom star slash and\nsave and next we're actually going to\nscroll up to the very top of this file\nand we're going to create a button on\nthe page so inside the body we'll type\nless than button greater than and inside\nthe button we'll have the text\nclick now let's say that we want to run\nsome JavaScript code when we click this\nbutton so here we can type on click\nequals double quotes and write some\nJavaScript inside this double quotes\nquot now we're going to learn a better\nway of doing this called add event\nlistener to use add event listener first\nwe're going to get this button and put\nit into our JavaScript using document.\nquery selector so let's add a class to\nthis button so we can select it and\nwe'll set it to\njs-\nbutton and now inside the script element\nwe're going to use\ndocument. query\nselector brackets and the string do\njs-\nbutton so now let's save this button in\na variable so we can use it later at the\nfront we'll type\nconst button element equals this\nresult now every HT H ml element has a\nmethod called add event listener add\nevent listener let us run some code when\nwe interact with the element so it sort\nof does the same thing as\nonclick so at the bottom let's type\nbutton\nelement dot add capital E Event capital\nL\nlistener and brackets\nso add event listener has two parameters\nthe first parameter is the event or what\ntype of interaction we want to listen\nfor so between these brackets let's type\nthe string\nclick so this will run some code when we\nclick the button the way to find these\nevent names is to look at this attribute\nthe word after on is the\nevent next the second parameter is a\nfunction that we want to run when we\nclick this element so we'll type a comma\nand because we're passing a function\ninto another function we're going to use\nan arrow function so we'll type\nbrackets arrow and curly\nbrackets so inside here let's just do\nconsole. log string click\nand\nsave and now when we click this button\nit will run this function and display\nclick so this code does the same thing\nas the onclick attribute however add\nevent listener has some advantages over\nusing an attribute first it lets us add\nmultiple event listeners for an event\nfor example let's add another click\nevent listener we can select this\ncode and\nrightclick\ncopy and then down\nhere rightclick and\npaste and let's change this to log click\nto if we\nsave and click the\nbutton it will run both these functions\nso add event listener let us add\nmultiple listeners to one event another\nadvantage of doing this is that we can\nremove an event listener using a method\ncalled remove event\nlistener so under this code we can type\nbutton\nelement do remove capital E Event\ncapital L listener and\nbrackets and remove EV listener also has\ntwo\nparameters the first parameter is the\nevent so in this case it is the string\nclick and we'll type a comma and the\nsecond parameter is the function that we\nwant to remove so that when we click\nthis button it will no longer run that\nfunction now we can't just type a copy\nof this function we need to use this\nexact function inside remove event\nlistener to do that we'll save this in a\nvariable first so above this let's\ncreate a\nvariable\nconst event\nlistener equals and we'll select this\ncode right click\ncopy and in here right click and\npaste and now we'll replace this with\nthe VAR\nvariable event\nlistener and down here we'll remove this\nsame\nvariable event\nlistener if we\nsave and click the button again it will\nonly display click two because we added\nthis event listener and then we removed\nit so it will no longer run this\nfunction when we click the button so as\nyou can see\nadd event listener gives us more control\nover event listeners we can add multiple\nlisteners to an event and we can also\nremove a listener from an event so\nbecause of these advantages the best\npractice is to use add event listener\ninstead of an onclick attribute so let's\ngo back into our projects and switch to\nusing add event listener we'll start\nwith the rock paper scissors project so\nwe'll open our\nfiles and we'll open 12 rock paper\nscissors and click here and\nsave and we'll scroll up to 12 rockpaper\nscissors. JS and for the video I'll drag\nthis down to the bottom and I'll hide\nthe files for\nnow and then rearrange the\nwindows and finally open the tab for\nthis file\nnow let's go to the HTML we'll scroll up\nto these move buttons which is up\nhere so here we're using the onclick\nattribute and we're going to switch it\nto add event listener so first let's get\nthis button into our\nJavaScript We'll add a class so we can\nselect it\njs-\nrock- button\nand\nsave and then down\nhere let's go below the autoplay\nfunction right here and we'll use add\nevent listener so we'll get this button\ninto our JavaScript using\ndocument do query\nselector brackets and a string dot\njs-\nro-\nbutton and we're going to use dot add\nevent\nlistener\nbrackets so we're going to listen for a\nclick and a comma and we'll give it a\nfunction that we want to run so a common\nmistake here is to actually run the\nfunction for example play game brackets\nand the string\nRock so we're supposed to give a\nfunction to add event listener however\nthis doesn't result in a function this\nwill actually run play game and give us\nthe return value which is undefined so\nthis code will actually result in\nundefined and then we're giving\nundefined to add event listener so it\nwon't\nwork so in order to give add event\nlistener a function we need to create a\nfunction here\nso let's remove this code and we'll\ncreate a function using brackets arrow\nand curly\nbrackets and then inside this function\nwe're going to call play game so we'll\ntype play game brackets and\nrock so now when we click the rock\nbutton it will run this function and\nplay the game so let's remove the\nonclick\nattribute and save the\nHTML and also save the\nJavaScript and then go to our project\nand click the rock button you can see\nthat it works except this time we're\nusing add event listener so let's do the\nsame thing for the paper and the\nscissors button feel free to pause the\nvideo if you want to try it\nyourself so we'll scroll down here and\nlet's add a class to the paper button so\nwe can select it\njs-\npaper- button and then in our JavaScript\nwe'll make a copy of this code so right\nclick\ncopy and then down\nhere right click and\npaste and now we're going to replace the\nrock button\nwith\npaper and when we click this button\nwe're going to play the game with\npaper now let's\nsave and we'll remove the onclick\nattribute and save the\nHTML if we click the paper button it\nworks as\nbefore finally let's do the scissors\nbutton so we'll add a class Js\ns- scissors dasb\nbutton and then inside our JavaScript\nwe'll make a copy of this rightclick\ncopy and then down here create some new\nlines rightclick and\npaste and now switch to the scissors\nbutton and play game with\nscissors let's save\nand remove the onclick\nattribute save the\nHTML and try the scissors\nbutton so everything still\nworks and I'll leave switching the reset\nscore button and the autop playay button\nas\nexercises so now let's try add event\nlistener with a different event we'll\nuse it with key down so let's say that\nin our project we want to make it so we\ncan play the the game with our keyboard\nif we Type R it will play Rock if we\ntype P it will play paper and if we Type\nS it will play\nscissors let's go into our\nJavaScript and we'll scroll\ndown and we're going to add an event\nlistener to the body this time so that\nif we type anywhere on the page we can\nrun some code so we're going to get the\nbody element using document\nbody and\nthen add event listener and\nbrackets this time the first parameter\nor the event will be the string key\ndown and let's type comma and give it a\nfunction that we want to run brackets\narrow and curly\nbrackets inside here let's just type\nconsole.log key down for now and\nsave so now if we go to the project and\nwe open the console\nrightclick and click\ninspect click the\nconsole and then click on the page if we\ntype a key on our\nkeyboard it will run this function and\ndisplay key down so now we have to check\nwhat key was pressed and play the game\nso how do we know which key that we\npressed earlier in this course we used\nthe attribute on key down and we learned\nthat it gets a special object called\nevent and the event object contains\nwhich key was pressed add event listener\nalso provides this event object but it\nprovides it as a parameter to this\nfunction so inside the round brackets\nlet's add a parameter\nevent now every time we type on our\nkeyboard add event listener will save\nthe event object in here and run the\nfunction and this event object contains\nthe key that we\npressed so in the console.log let's\ndisplay event. key this time and\nsave now if we click on the page and\ntype R\nevent. key will contain R if we press P\nevent. key will contain P so that's how\nwe know which key we pressed so now\nlet's close this and instead of\nconsole.log we'll create an if statement\nto check which key we pressed so if\nbrackets and curly\nbrackets and here we'll check if event.\nkey\nis equal to the string R if it is we're\ngoing to play the game with rock so\ninside here we can just run this play\ngame\nfunction play game and brackets and\ninside we'll type the string\nRock now let's check if we pressed P so\nwe'll add another Branch else if\nbrackets and curly brackets and in the\nsecond condition we'll check if event.\nkey is equal to the string P if it is\nwe'll play the game with paper so inside\nhere we'll run play game brackets and\nthe string paper and finally we'll check\nif we pressed s so at the end We'll add\nanother else if brackets curly brackets\nand inside here we'll check if event.\nkey is equal to the string s if it is\nwe'll play the\ngame with the string\nscissors now let's\nsave click our page and type R\nand it plays the game with rock if we\ntype P it will play the game with paper\nand if we Type S it will play the game\nwith\nscissors so that's an example of using\nadd event listener with a different type\nof event with a key down if we need the\nevent object we can get it using a\nparameter up here so those are all the\nfeatures we're going to create for our\nrock paper scissors project\nnow let's move on to the to-do list\nproject and switch to add event listener\nwe'll go into our code editor click up\nhere and find 12 to-do list.\nHTML we'll also scroll up to the scripts\nfolder find 12 to-do\nlist.js and open this file and I'm going\nto put it at the bottom here so I can\nsee it side by side I'll close this for\nnow\nand close rock paper\nscissors and then open the tab for this\nproject okay so let's start by switching\nthe add button to use add event listener\nwe'll go into our HTML and find the add\nbutton which is here and we're going to\nadd a class so we can select it in\nJavaScript\njs-\nadd- too dasb button\nnow let's go to our JavaScript and\nscroll\ndown above the add Todo\nfunction we'll get this button into our\nJavaScript using\ndocument. query\nselector brackets and then a string Dot\nand the class we want to get\njs- add- too dasb button\nand then after this we use do add event\nlistener\nbrackets inside these brackets we'll\ngive it the event the string click comma\nand then a function to run when this\nevent happens so brackets arrow and\ncurly\nbrackets and in here we just want to do\nthe same thing as the onclick attribute\nwhich is ADD too and call this function\nlet's\nsave and then in the HTML let's remove\nthe onclick\nattribute and\nsave and let's try it out so we'll type\nA\ntoo watch\nYouTube select a due\ndate and then click add\nand the add button still works as before\nbut we're just using add event\nlistener next let's switch all the\ndelete buttons let's scroll up to where\nwe create these delete buttons which is\nhere and first We'll add a class to all\nthe delete buttons so we can select them\nin\nJavaScript\njs- delete Das too dasb button\nand now we're going to use document.\nQuery selector and add an event listener\nto all of these buttons however there's\ntwo problems here first is that at this\npoint in the code this is just a string\nwe haven't actually put this button on\nthe page yet we do that down here in\nthis line of code we put the HTML that\nwe generated onto the page so in order\nto add an event listener we need to put\nthe HTML on the page first so we have to\ndo it after this code so down here we're\ngoing to type\ndocument. query\nselector brackets and the string Dot and\nwe'll select this class\njs- delete Das too\nDutton however there's also a second\nproblem here which is we're going to\nhave multiple delete\nbuttons and query selector only gives us\nthe first one so how do we select all\nthe buttons on the page that match this\ncriteria instead of just the first one\nto do that the document object has\nanother method called query\nselector\nall so query selector all will give us\nall the elements on the page that have\nthe class JS delete Todo button so down\nhere let's console.log this result to\nsee what it looks like\n[Music]\nconsole.log brackets and close bracket\nand\nsave and then here\nrightclick\ninspect and the\nconsole and expand this you'll see that\ndocument. query selector all gives us a\nlist of elements and this list works\njust like an array this is index zero or\nthe first button and this is index one\nwhich is the second button so now let's\nremove\nconsole.log and add event listeners to\nall of these\nbuttons to do that we're going to Loop\nthrough this list of delete buttons\nso again this list works like an array\nso we can use a for each method to Loop\nthrough it so at the end let's type\nenter and tab and then dot for each and\nbrackets as usual we'll give for each a\nfunction that we want to run for each of\nthese values so we'll type brackets\nArrow and curly\nbrackets and now every time we Loop\nthrough the list for each will give us\ntwo parameters the first one is the\nvalue in the list which is a delete\nbutton element so let's name it delete\nbutton and we'll type comma and the\nsecond parameter is the index so\nindex so now we want to add an event\nlistener to each delete button so inside\nhere we'll type delete button dot add\nevent listener and\nbrackets inside these brackets we'll\ntell it what event we want to listen to\nwhich is the string click and comma and\nthen a function that we want to run when\nthis event happens so brackets Arrow and\ncurly\nbrackets so now when we click a delete\nbutton we want to do the same thing as\nthis onclick attribute above so let's\nselect this\ncode we'll\nrightclick\ncopy and then down\nhere right click and\npaste and now we can remove these\ncharacters because we're not in a string\nanymore and that's all we need to\ndo so to summarize we used query\nselector all to get a list of all the\ndelete buttons on the page and then we\nlooped through the list using four each\nand for each delete button we added a\nclick event listener and ran the same\ncode that we did before so now we can\nscroll up and remove this onclick\nattribute and Save\ngo back to the page close a console and\ntry out the delete\nbutton and you can see that it still\nworks so that's how we switch the to-do\nlist project to use add event\nlistener so now we're finished improving\nall of our\nprojects in the rest of this lesson\nwe're going to learn more features that\nuse functions as\nvalues so let's close this for now and\nwe'll go back to\n12 Advanced functions.\nHTML and we'll open the tab for this\nfile and let's also comment out this\nJavaScript code using\nslashstar and star\nslash let's\nsave and now let's scroll to the bottom\nof this\ncode and create some new\nlines so in this lesson we learned the\narray method for each which lets us Loop\nthrough an array now we're going to\nlearn two more array methods called\nfilter and map so let's start with\nFilter let's say we have an array of\nnumbers and we want to create a copy of\nthis array with all the negative numbers\nremoved so let's go up here and create\nan array of the number one comma -3\ncomma 5 and type the method do\nfilter and\nbrackets so Filter Works the same way as\nfor each we give it a function so\nbracket arrow and curly bracket and this\nfunction has two parameters the\nvalue and the\nindex so filter will take the first\nfirst value save it in here and run the\nfunction then it will take the second\nvalue save it in here run the function\nand the third value save it and run the\nfunction now the only difference is that\nthis time this inner function will\nreturn a value so we'll type\nreturn and we're going to return a\nBoolean like\ntrue so now the return value matters so\nwhat filter does is it creates a new\narray if the inner function returns true\nit will put this value in the new array\nif the inner function returns false it\nwill not put this value in the new array\nfor example at the front let's\nconsole.log the result of this so we'll\ntype\nconsole.log Open Bracket and down here\nclose bracket and Save\nso in this example the inner function\nalways returns true so all three values\nwill be in the new array if we change\nthe return value to false every time and\nsave all three values will not be added\nto the new\narray so now let's use this to solve our\nproblem we want to remove the negative\nnumbers from this array so inside this\ninner function we're going to return\ntrue if the number is positive and\nreturn false if the number is\nnegative so we'll check if value is\ngreater than or equal to\nzero curly brackets will return true and\ninclude it in the new\narray\nelse will return false and not include\nit in the new array so let's remove this\nand\nsave so now only values that are greater\nthan zero will be in the new copy so\nusing this we can sort of filter out\nvalues based on a criteria that's why\nthis method is called\nfilter now we can shorten this logic by\nusing this code return value greater\nthan or equal to zero so this comparison\nwill return true if it's greater than or\nequal to zero and it will return false\notherwise so this line does the same\nthing as this code up here so we can\ncomment this out with slashstar and star\nslash and\nsave and as always we can return a\ntruthy or falsy value instead of just\ntrue or\nfalse the last array method we're going\nto learn is called map so let's create\nsome new lines and scroll\ndown and let's say we have an array of\nnumbers again like the array 1 1 3 and\nwe want to make a copy of this array\nwith each number\ndoubled so at the end we'll\ntype map\nbrackets and Map works just like for\neach and filter between the brackets\nwe'll give it a function bracket arrow\nand curly brackets and this function\nwill get two\nparameters the first parameter is each\nvalue in the array and the second\nparameter comma is the\nindex so map will take the first value\nsave it in this parameter and run the\nfunction take the second value\nsave it in this parameter run the\nfunction third value save it and run the\nfunction and inside this function we're\ngoing to return a\nvalue so what map does is it creates a\nnew array and then whatever we return\nwill be added to the new array so if we\nreturn\n10 and then we console.log this result\nconsole.log\nand close bracket and\nsave it will create an array where each\nvalue becomes\n10 now the interesting thing is that we\ncan actually use the value itself in the\nreturn so here if we did value + 10 and\nsave it will take each value in the\noriginal array add a 10 and put it in\nthe new array\nso map will transform an array into\nanother array based on the return value\nso if we want to return an array where\neach number is doubled we just have to\nmultiply each value by two and save and\nthis will give us 2\n26 next we're going to review some\nshortcuts of Arrow functions to make\nthis code more\ncompact first let's make a copy of this\ncode rightclick\ncopy and down\nhere rightclick and\npaste so notice in the inner function\nwe're not using index so let's just\nremove it for now and now that this\nArrow function only has one parameter\nthese round brackets are optional so we\ncan also remove these to make the code\nmore compact another shortcut is if we\nonly have one line of code in an arrow\nfunction we can put the code on one line\nlike\nthis and now the curly brackets and the\nreturn are optional so we can actually\njust remove all of this\ncode so if we have just an arrow it will\nautomatically return this result on the\nright and we don't have to type return\nourselves\nso this code does the same thing as the\ncode above but as you can see these\nshortcuts make our code very Compact and\nclean so let's save and this will give\nus the same\nresult the last thing we're going to\nlearn in this lesson is a feature of\nfunctions called a closure a closure\nmeans if a function has access to a\nvalue it will always have access to that\nvalue so let's take a look at an example\nwe're going to go back to the to-do list\nproject so we'll click up here and then\nscroll up to 12 to-do\nlist.js and close this and then open the\ntab for the to-do list which is here and\nlet's scroll down to the query selector\nall so we're going to focus on this\ninner function here so notice that this\nfun function uses index from above now\nthe interesting thing about index is\nthat as soon as this for each ends index\ngets deleted for example if we add some\nnew lines and we try to\nconsole.\nlog\nindex and\nsave and then go into our project\nrightclick\ninspect and the con\nit'll tell us that the index is not\ndefined so as soon as we end the for\neach Loop index doesn't exist\nanymore however if we move this into the\ninner function so inside here and we\nconsole.log\nindex and\nsave and we click a delete button it\nwill tell us that the index is zero so\neven though index gets deleted right\naway down here if we click one of these\nbuttons later on it still has access to\nIndex this feature is called a closure\nif a function has access to a value it\nwill always have access to that value\nthe value like index gets packaged\ntogether or enclosed with the function\nthat's why we call it a closure\nso even if the value index gets deleted\nafter the loop we can click the delete\nbutton 5 seconds later or even 5 minutes\nlater and this function will always have\naccess to\nindex so closures are something that\nnaturally happens as we write JavaScript\ncode and it's nice to know how this\nfeature works there are some Advanced\nTechniques that we can do with closures\nbut they're not used that often so I\nwon't be covering them in this course\nbut maybe in a different video now let's\nremove\nconsole.log and\nsave and that's the end of this lesson\nin this lesson we learned that functions\nare values we learned set time out and\nset interval which lets us run a\nfunction in the future we learned an\narray method called for each which is a\ncleaner way of looping through an array\nwe used four each Arrow functions and\nand add event listener to improve our\nprojects we learned two more array\nmethods filter and map and we learned a\nfeature of functions called\nclosures here are some exercises to help\nyou practice what we learned in this\nlesson\nin this lesson we're going to start the\nAmazon Project and we're also going to\nlearn a very useful technology called\ngit so first let's take a look at the\nAmazon Project to see how it works we're\ngoing to go to our browser\nand create a new tab at the top and\nwe're going to type super simple dodev\nSL projects SL Amazon and press\nenter so this is going to be the project\nwe're going to build in this course this\nis an e-commerce website that looks like\nAmazon where we can see a list of\nproducts on the homepage and then we can\nadd these products to a cart by clicking\nadd to\ncart and then we can see our cart by\nclicking the top\nright and on this page it will show us\nwhich products are in our cart and it\nwill also show us the cost of our order\nincluding shipping and taxes and once\nwe're ready to create an order we can\nclick this button to create the order\nand it will take us to this page which\nshows us a list of our past orders we\ncan also track our order by clicking\nthis track package\nbutton and it will take us to this page\nwhich tells us the progress of our order\nwhether it's preparing it's shipped and\nit's\ndelivered so that's an overview of the\nproject we're going to built this is a\ncomplex multi-page website where the\ndifferent pages interact with each other\nto create a full app the first thing\nwe're going to do is to download the\nstarting code for this project we're\ngoing to create a new\ntab and here we're going to type\ngithub.com\nslup\nsimple Dev SL JavaScript D Amazon d\nproject and press enter\nyou can also find the starting code in\nthe description by clicking\nhere and then going to the links for\nthis\nlesson and on this page we can see the\nstarting code for the Amazon Project so\nthis code contains all the HTML and CSS\nthat we need the reason we're going to\nuse some starting code instead of\nwriting all of this ourselves is because\nthis course is focused on JavaScript not\nHTML and CSS if we were to write all of\nthis code ourselves it would just take\nup too much time and it would be an\nentire course by itself if you want to\nlearn how to create this code you can\ncheck out my HTML and CSS full course\nwhich would teach you all the skills\nthat you need but for this JavaScript\ncourse we're going to start with the\nHTML and CSS here and we're just going\nto focus on adding JavaScript to this\nwebsite so now let's download all of\nthis code we can do that by clicking\nthis green code button here and then\nclick download\nzip once that's finished downloading\nwe're going to go to our downloads\nfolder so for me it's this folder right\nhere called downloads\nand then we're going to unzip this file\nby double clicking\nit and this will give us a folder that\ncontains all the code so we're going to\nselect this folder and move it to our\ndesktop next let's go to our desktop so\nwe're going to close this for now and\nI'll hide the\nbrowser and on the desktop we're going\nto select the folder that we downloaded\nand we're going to rename this so at the\nend we'll remove Main and press enter to\nrename it to JavaScript Amazon\nProject next we're going to take this\nfolder and open it in our code editor so\nlet's open vs\ncode and we're going to click\nfile open\nfolder and we're going to find the\nfolder that we downloaded for me it's on\nthe desktop and it's this folder right\nhere so we'll click this folder and then\nclick select\nfolder and then we can close this\nwelcome\nmessage okay so now we have our starting\ncode and we're going to set up the\nproject so first let's open our browser\nagain and we can close the GitHub\npage as well as the tabs for the\nprevious lessons so we'll close these\ntabs right\nhere but we'll leave the final Amazon\nProject\nopen next let's go back to vs\ncode and we're going to open this\nproject in our browser so we're going to\nselect this file amazon.\nHTML so this file corresponds to the\nhomepage here so let's select this file\nand then\nrightclick open with live server\nso I'm just going to rearrange my\nwindows here so we can see these side by\nside and now we're ready to begin so\nlet's take a look at the code that we\nhave to start with as I mentioned all we\nhave here is the HTML and CSS for this\nwebsite there's currently no JavaScript\nat all on this\npage so one thing you'll notice is that\nwe can actually create almost all of the\nwebsite using just HTML and CSS we\nactually don't even need JavaScript to\ncreate all of this we're able to create\nthe header at the top as well as three\nproducts to start with and this shows\nthat HTML and CSS can pretty much create\neverything that we see visually on the\nwebsite where JavaScript comes in is\nthat JavaScript makes this website\ninteractive so right now if we click the\nadd to card button it looks pretty nice\nbut it doesn't actually do anything and\nthat's because we haven't added\nJavaScript yet so the role of JavaScript\nis to make our website interactive after\nwe created all the content and The\nStyling now before we begin adding\nJavaScript to this website we're\nactually going to take some time and\nlearn another very useful technology\ncalled git so git is a technology that\nlets us track changes in our code for\nexamp example do not follow along here\nbut let's say that I'm working on this\nwebsite and I go into my code editor and\nI change some code here so let's say\nthat I add some code\nhere and then in this file I'm going to\ndelete some code so I just select some\ncode and delete it and then\nsave and then in this file I'm going to\nchange some code at the bottom\nso now let's say that I made a mistake\nand I want to undo all the changes that\nI just made so how would I do that how\nwould I remember all the code that I\nchanged in the different files so right\nnow this is really difficult and this is\na problem that we run into in bigger\nprojects we're changing lots of code in\ndifferent files and it's really hard to\nkeep track of what code has changed and\nthis is where git comes in git lets us\ntrack changes in our code and it helps\nus solve this\nproblem so here's what it looks like if\nI have git set up in my project I can go\ninto this section of VSS code this\nsection is for git and then here git\nwill tell me which files I changed and\nif I click these files it will tell me\nwhich lines I changed and exactly which\ncode I changed if I want to I can click\nthis button\nto reverse all the changes in this\nfile I can also click here to reverse\nall the changes in all the\nfiles so as you can see kit helps us\ntrack changes in our code and it lets us\neasily undo our changes if we need\nto and this technology is really useful\nin bigger projects like this Amazon\nProject where we're going to be changing\nlots of code in in many different files\nso before we start this project we're\ngoing to learn how to set up and use\ngit the first thing we need to do is to\ninstall git to do that we can go to this\nsection of vs code called Source\ncontrol now if this section looks like\nthis with a button initialize repository\nthat means you already have git\ninstalled otherwise if you're on Windows\nyou can click this button and then click\nopen or you can go to this website\ndirectly and then click this link to\ndownload\ngit once it's finished downloading we're\ngoing to run the installer and then just\ngo with the default\noptions if you're using a Mac you can\nclick up\nhere and then type\nterminal and press enter\nand inside here you're going to type git\nand press\nenter and then click this link and\ninstall\ngit all right after installing git we're\ngoing to restart vs\ncode and make sure you have the Amazon\nProject\nopen and now if if we go into the git\nsection it should look like this with\nthe button initialize\nrepository so now that we've installed\ngit we're going to set up git in our\nAmazon Project we can do that by\nclicking initialize\nrepository if this button doesn't work\nfor you you can also try going to the\nterminal menu and click new terminal\nand then inside this terminal type kit\nin it and press\nenter so a repository is just a folder\nwhere changes are being tracked by\nclicking initialize repository this\nturns the current folder which is\nJavascript Amazon Project into a\nrepository and now all the changes\ninside this folder will be tracked by\ngit so to start off git will tell us\nthat all of these files are new files\nand that's because we just set up this\nrepository so all of these files are\nconsidered new changes that we're\nstarting to keep track\nof next we need to configure a username\nand email with Git now don't worry this\ninformation is not used anywhere online\nthis is just forget to add an author to\nthe changes that we make so to configure\na username and email we're going to go\nto the\ntop and open the terminal menu and click\nnew\nterminal and then inside\nhere we're going to type get config\nuser.name and double\nquotes now if this looks familiar to you\nand you've already done this before you\ncan skip this step and and the next\nstep so between these double quotes\nwe'll pick a username that we want to\nuse so for me I'll use super simple Dev\nand press\nenter and we'll also configure an email\nby typing get config user. Emil double\nquotes and between these double quotes\nwe'll put an email so I'll put Simon at\nsuperimple\ndodev and press\nenter so now that we configured a\nusername and email we can close this\nterminal next we're going to save these\nchanges into git so that git will start\ntracking any new changes that we make to\nsave these changes we're just going to\ntype type a message here describing what\nwe changed so let's just type the\nmessage add the starting\nfiles and then we're going to click\ncommit and if this popup shows up we're\ngoing to click\nyes so that will take all of our changes\nand save them into git so now that we've\nsaved those changes into git any new\nchanges that we add will start showing\nup here so let's do an example and let's\nchange some code in a couple different\nfiles for practice so let's click this\nicon up here to show our code and let's\ngo into amazon.\nHTML and we'll just change this title to\nintro to git and\nsave and then let's go into checkout.\nHTML and at the top let's actually\nremove the title and save and then let's\nopen orders.\nHTML and at the top let's just add\nsomething to the title like\npage if we\nsave and then go into the source control\nsection or the git\nsection it will tell us all the changes\nthat we just made in our code in the\nthree different files if we click one of\nthese files it will actually tell us\nexactly which code that we\nchanged now if your git section looks\nlike this where the changes are on top\nof each other instead of side by side if\nyou want to you can change this by\nclicking these three dots here making\nsure that inline view is unchecked and\nalso unchecking use inline view when\nspace is\nlimited so now it's very easy to undo\nthis code we can just take the code on\nthe left and then copy paste it on the\nright to undo this change we can also\nclick here to undo all the changes in\nthis\nfile and up here we can also click this\nbutton to undo all the changes in all\nthe different\nfiles so that's an intro to Git it helps\nus keep track of changes in our code and\nit's very useful for bigger projects\nlike this Amazon Project where we're\ngoing to be changing lots of code in\nmany different files if you want to\nlearn about git in more detail you can\ncheck out my git and GitHub full course\nin the video\ndescription so now that we've setup git\nlet's start the Amazon Project so first\nmake sure that this section is empty and\nwe've reversed all the changes that we\nmade when practicing\ngit next let's click the this icon to\nshow our\nfiles and let's remove the previous\ncode and we're going to start in the\namazon. HTML\nfile and let's close the git page and\nthen open the tab for this file it\nshould say amazon. HTML up\nhere so we'll start by creating the list\nof products on the homepage so right now\nwe start with three products if we go to\nthe final project we're going to add the\nrest of the products that you see here\nand we're also going to make this\ninteractive so that when we click the\nadd to card button it will add this\nproduct to our\ncart so let's go back to our\nproject and in order to create this\nwe're going to learn the main idea of\nJavaScript so when using JavaScript\nscript we usually do a three-step\nprocess the first step is to save the\ndata and then we generate the\nHTML and finally we make it\ninteractive let's go through each step\nto create this list of\nproducts so right now we have three\nproducts on our page to start with and\nwe're going to add more products to this\npage so let's start by finding the HTML\nfor one of these products because we can\nalways just copy and paste this to\ncreate another one now we're going to\nlearn a very important skill for bigger\nprojects which is how to find the code\nfor something on this page so let's say\nthat we want to find the code for one of\nthese products we're going to\nrightclick and click\ninspect and this will bring up the\nconsole and I'm actually going to click\nthese three dots and click this icon to\nmove the console to a separate window so\nthat we can see the whole web page so\nnow we're going to click this icon in\nthe top\nleft and we're going to hover over and\nclick the thing that we want to get the\ncode for so I want to get the code for\nthis entire first product so I'll click\nin this\nspace and this will tell us that the\ncode for the product is this code a div\nwith the class product -\ncontainer so now we're going to take\nthis class and then search for it in our\ncode editor so let's open vs\ncode and we're going to type contrl f on\nWindows or command F on Mac to search\nfor code in this file so we're going to\nsearch for the class that we saw earlier\nwhich is\nproduct-\ncontainer and this will take us to the\ncode for one of these products so we can\nactually click the arrow on the left to\ncollapse this code and we'll see another\nproduct container which corresponds to\nthe second product we can click this\nArrow again and we'll see a third\nproduct container which corresponds to\nthe third\nproduct so that's how we find the code\nfor something on the page now to add\nanother product to this page one thing\nwe can do is to take this HTML and just\nmake a copy of it at the bottom of the\npage however this is not a good idea\nbecause if we add lots of products we're\ngoing to be copying this HTML over and\nover and if we expand this you can see\nthat each product has a lot of HTML code\nso we don't want to be copying all of\nthis over and over again it's going to\nbe a lot of code and it's going to be\nhard to manage in instead another\nstrategy is to generate this HTML code\nusing JavaScript so let's learn how to\ndo that before we can do that we need to\nadd JavaScript to this page so we're\ngoing to create a Javascript file so\nlet's click up here to show our\nfiles and first let's create a new\nfolder to contain all of our JavaScript\ncode so let's name this folder SC\nscripts and press\nenter next let's click on our folder and\nwe're going to click this icon to create\na new file and we'll name this file\namazon. JS and press enter so this will\nbe the Javascript file for this HTML\nfile next inside this Javascript file\nlet's type the code\nconsole.\nlog\nhello just to make sure that this works\nand\nsave next we're going to load this\nJavascript file in our HTML file so\nlet's go back to amazon.\nHTML and then at the bottom of the code\nwe're going to scroll down and then\nright above the closing tag for the body\nwe're going to add a script element\nand we're going to give this element an\nattribute SRC or Source equals double\nquotes and we're going to load this\nJavascript file so this Javascript file\nis in a folder called scripts so here\nwe're going to type the folder name\nscripts and then a forward slash to go\ninto the folder and we'll load the file\namazon. JS and\nsave so now let let's go back to the\npage and we'll open the console right\nclick\ninspect and then click the\nconsole and it should display hello so\nnow we're loading JavaScript on this\npage so let's open up vs code\nagain and we're going to generate all of\nthis HTML using JavaScript instead so\nthe first step in our process is to save\nthe data what does this mean data means\ninformation so in this case the data is\nthe information about our products for\nexample the products name the price\nratings and the image so right now the\ninformation about the products or the\ndata is inside our\nHTML so in our code if we click here to\nexpand this element you can see that the\ninform\nabout the products for example the name\nand the image is inside the\nHTML so what we need to do is to take\nthis data and save it inside our\nJavaScript so that our JavaScript can\nuse it so let's go to our Javascript\nfile and I'm just going to put it down\nhere so we can see it side by\nside and we're going to move this data\ninto our JavaScript\nso let's remove\nconsole.log and let's create a variable\nto save the data so we'll type const and\nlet's name it\nproducts and make it\nequal and now we want to create\nsomething that closely matches our data\nso in this case we have a list of\nproducts so in here we're going to\ncreate an array because an array\nrepresents a list\nand now each product in the list has\nmany values like an image a name and a\nprice so we're going to use an object to\nrepresent each product because an object\nlets us group multiple values\ntogether so inside this array we're\ngoing to create an object using curly\nbrackets and now inside this object\nwe're going to save the data for the\nfirst product so first let's find the\ndata in our HTML we're going to search\nfor the product's name by typing contrl\nF or command F and we'll search for\nblack and\ngray and this will take us to the code\nfor the first product so this is the\nname of the first product so let's\nactually scroll up and we're going to\nget get the image for the first product\nand we're going to take this and save it\nin our JavaScript so let's select this\ncode we're going to\nrightclick\ncopy and then inside this object let's\ncreate a property called image colon and\nthen here right click and\npaste and let's save this as a string so\nat the front we'll type a single quote\nand at the end we'll type a single\nquote so we just saved the image inside\nour\nJavaScript let's move on and save the\nname inside our JavaScript so we'll\nscroll down we'll select this code and\nthen\nrightclick\ncopy and in this object we'll type comma\nand a property called name col in a\nstring\nand we'll right click and\npaste next we're going to save the\nrating into our JavaScript so we'll type\ncomma and let's create a property called\nrating\ncolon for the rating there's actually\ntwo parts the stars and the number of\nratings that it has so let's actually\ngroup these two values into an object\nbecause these values are related to each\nother so in here we'll make the rating\nand\nobject and each rating will have the\nstars and for the socks it's\n4.5 comma and the rating will also have\na\ncount and for the first product it's\n87 next let's save the price into our\nJavaScript\nso we'll create another property called\nprice and for the first product the\nprice is\n$10.90 however JavaScript has problems\ndoing math with decimal numbers or\nfloats like this so a best practice when\ncalculating money is to calculate in\ncents instead of dollars so for this\nreason we're going to save the price as\ncents so we'll save it as\n1,90 as a reminder $1 is equal to 100\ncents and because we're saving in cents\nit's helpful to rename this property to\nprice cents\ninstead so now if we scroll up we just\nsaved all the information or the data\nabout the first product into our\nJavaScript next let's go to the end here\nand type comma and create another object\nand we're going to save the data for the\nsecond product into this object so feel\nfree to pause the video if you want to\ntry it yourself\nfirst so again let's find this product\nin our HTML we'll go to our HTML and\ntype contrl f or command F to search for\ncode and we'll search for the name\nintermediate\nsize basketball so now this is the code\nfor the second product we're going to\nscroll up a bit and find the image for\nthis product and we're going to select\nit rightclick\ncopy and then inside the second object\nwe'll create an image property just like\nwe did up\nhere and we'll save it as a string and\nwe're going to rightclick and\npaste and let's type comma and we'll\nsave the name inside the second object\nso we'll scroll down and select the\nname and then right click\ncopy and then down here create a string\nand rightclick and\npaste and we'll type a comma and we'll\nsave the rating\ncolon\nobject and we'll save the number of\nstars which is\nfour and the number of ratings that it\nhas count colon\n127 and finally we'll type a comma and\nwe'll save the price of the product in\ncents colon\n295 so now the data for these second\nproduct is saved inside our\nJavaScript let's go to the end and type\ncomma and create another object and\nwe're going to save the data for the\nthird product inside again feel free to\npause the video to try it yourself first\nso let's save the image we'll find the\ncode for this product in our HTML so up\nhere we'll typ contrl F or command\nF and we'll search for the product name\nwhich is\nadults plain cotton\nt-shirt and scroll up and we're going to\nsave the image first so let's select\nthis right click copy and then down here\ncreate an image property colon and a\nstring and then right click and\npaste and we'll create a comma and let's\nsave the name in our Javas script next\ncreate a string and then we'll scroll\ndown here we'll select the\nname right\nclick\ncopy and then in here right click and\npaste and comma and we'll save the\nrating colon and object and we have the\nnumber of stars for this one it's\n4.5 colon and the\ncount and for this one it is\n56 and lastly type a comma and we'll\nsave the price in\ncents colon\n799 and now let's save our Javascript\nfile now one really important thing is\nto make sure that in each of these\nobjects we have the same property so we\nhave the image property the name\nproperty and the same rating property\nwith the same structure we want all of\nour objects to have the same structure\nso that our code can handle each product\nthe\nsame so that's what it means to save the\ndata we create something in JavaScript\nthat closely matches the data that we\nhave on the Page by the way this is\ncalled a data structure because its\nstructure structures or organizes the\ndata and this represents a list of\nproducts so we usually use a combination\nof objects and arrays to create a data\nstructure in\nJavaScript so now that we've saved the\ndata the next step is to use this data\nto generate the HTML instead of writing\nthe HTML\nmanually to generate the HTML we can\nLoop through this array and for each of\nthese products we're going to create\nsome\nHTML so let's go ahead and loop through\nthis array first we'll scroll down to\nthe\nbottom and we'll type the name of the\narray which is products and then we'll\nLoop through this array using a for each\nmethod so we'll type Dot 4 Capital each\nbrackets and inside we create a function\nusing brackets arrow and curly\nbrackets and we'll give it a parameter\ncalled\nProduct so I'm going to move this back\nto the top here so we can see more of\nthe code so the way that for each works\nis that it takes each object saves it in\nthis parameter called Product and then\nruns the function so it takes the first\nobject saves it in product runs the\nfunction function takes a second object\nsaves a product runs a function and so\non so for each of these products or each\nof these objects we want to create some\nHTML so inside this function let's\ncreate a variable const\nHTML equals and we'll create a template\nstring using back\nticks and now inside this template\nstring we're basically going going to\ncopy all the HTML for one of these\nproducts so let's go back to our HTML\nfile and how do we find the HTML for one\nproduct so we learned this earlier we\ncan\nrightclick\ninspect and then click the top left\nicon and click the element we want to\nget the HTML for so this HTML represents\none product and we can search for this\nclass product- container in our code so\nwe'll go back to our vs\ncode inside the HTML file we can contrl\nf or command F to search for code and\nwe'll search for the class product Das\ncontainer and let's go to the first\nresult so we'll go to the first result\nwhich is here and let's copy all of the\ncode inside this ele element one trick\nwe can do is to click the arrow on the\nleft to collapse it and then we'll\nselect all this code and we'll\nrightclick\ncopy and then inside our Javascript file\ninside the string we're just going to\nrightclick and paste the\nHTML and if we need to fix the\nformatting we can select all of this\ncode and then press tab a few times to\nadd some indexs and here we can remove\nthe indent and let's\nsave so now we're basically looping\nthrough the array of products and for\neach product we're creating all of the\nHTML that we had before so we're\ngenerating this HTML using\nJavaScript now let's console.log this\nHTML to make sure that it's working\nwe'll scroll down to the\nbottom and here let's\nconsole.log the HTML that we just\ncreated if we\nsave and then go back to our page right\nclick and\ninspect and click the\nconsole you can see in the console that\nwe just generated all this HTML and we\ngenerated three of these\nlet's go back to our\ncode and scroll\nup now one problem here is that in the\nHTML that we generate we don't want to\nhave the name black and gray socks every\ntime for the second product we want to\nhave a different name and a different\nimage and for the third product we want\nto have a different name and a different\nimage so how do we create slightly\ndifferent HTML for each\nproduct to do that we're going to\nreplace this part of the code with\nwhatever the image property is so for\nhere we're going to delete it and we're\ngoing to insert the property image into\nthis string so to insert values into a\ntemplate string like this we can use\nDollar open curly bracket Clos curly\nbracket and then inside here we're going\nto insert the\nproduct. image property so it's going to\ntake whatever the image property is of\nthe product and put it inside this HTML\ncode same thing for the name instead of\nblack and gray socks every time we're\ngoing to delete this and then insert a\nvalue we're going to insert the\nproduct Dot and we'll insert the name\nproperty this time into this HTML so dot\nname and we'll do the same thing for the\nother pieces of data so for each product\nthe number of stars could be different\nso instead of 4.5 every time let's\ndelete this and we're going to insert\nthe products rating and stars so\nproduct.\nrating. Stars\none thing we have to watch out here for\nis that this image has to exist so right\nnow if we substitute the product.\nratings. Stars into this we will get\nthis image and if we go into our files\nby clicking here and open the images\nfolder and then open the ratings\nfolder we can see that there's no image\ncalled rating\n-4.5 instead there's an image called\nrating\n-45 so if the rating is 4.5 we should\nconvert it into 45 so that this image\nactually\nexists similarly if the rating is four\nwe should convert it into 40 so that\nthis image actually exists so in here we\nshould actually multiply this by 10 so\nthat this points to an actual image that\nexists\nhere next let's move\non and we'll work on replacing the count\nso we'll remove this and dollar curly\nbrackets and we'll replace it with the\nproducts. rating Dot and the count\nproperty so\ncount and finally we're going to replace\nthe price for each product so in here\nwe're going to remove this and\nsubstitute\nproduct. price\nsense and remember that this is a number\nin cents but when we display it on the\npage we want to display it as dollars so\nwe're going to divide this by 100\nbecause there are 100 cents in each\ndollar so now in the HTML that we're\ngenerating we're actually inserting the\ndetails about each product if we\nsave and then go back to the console\nright click\ninspect and\nconsole and look at the HTML that we\ngenerated you'll see that it's different\nfor each of the products so that's how\nwe use JavaScript to generate all the\nHTML\nhere so now the last step is we're going\nto combine all this HTML together into\none string and put it on the web page\nlet's go back into VSS\ncode and to combine all this HTML\ntogether let's create a variable at the\ntop for combining all the strings\ntogether so we'll type let let's call it\nproducts cap Capital\nHTML and make it equal to an empty\nstring to start and then each time we go\nthrough the loop we're going to add this\nHTML string up here so instead of\ncreating a new variable we're just going\nto add products\nHTML equals itself products\nHTML plus this string and remember a\nshortcut for this is to just type plus\nequals so this is called the accumulator\npattern we Loop through an array and\neach time we're adding to the result so\nwe're accumulating the result and now\nthat we combine all the HTML into this\nvariable we can scroll to the\nbottom and let's remove this line\nbecause this doesn't exist anymore\nand then after the loop let's\nconsole.log the products\nHTML and\nsave and now if we go into our\nconsole we combined all the HTML for all\nthe products\ntogether and now the last step is to\ntake this HTML and put it on the page\nand we can do that using the Dom\nso let's go back into our\ncode and to use the Dom we're first\ngoing to get an HTML element from the\npage and put it inside our\nJavaScript so first let's go to our HTML\nfile and remember that a product-\ncontainer represents one of these\nproducts here so we're going to look for\nthis element here a div products- grid\nso this element contains all of our\nproducts so we're going to use the Dom\nto take this element put it into our\nJavaScript and replace all the HTML\ninside so to put this element in our\nJavaScript we're going to give it a\nclass so let's add a class\njs-\nproducts- grid and\nsave and let's go into our JavaScript so\nI'm just going to move this this down to\nthe bottom again so we can see it side\nby\nside and then inside our JavaScript at\nthe bottom we're going to use the Dom by\ntyping\ndocument. query selector brackets and a\nstring and we're going to type dot to\nselect a class and we're going to select\njs-\nproducts-\ngrid so the DOT means we're going to\nlook for a class called JS products grid\nwhich is right here and it's going to\ntake this element and put it inside our\nJavaScript and now we can change the\nHTML inside the element to do that we'll\nuse the property do inner Capital\nHTML and we'll change it to the products\nHTML that we created Above So for\nproducts Capital\nHTML and\nsave so it's not going to look any\ndifferent but now we're actually\ngenerating all the HTML with JavaScript\nand then using the Dom to put this HTML\ninside here so now we can actually\ndelete all of this because we're\ngenerating this with\nJavaScript if we save this file\nour products will still be here because\neven though we deleted the HTML we're\nnow generating it with\nJavaScript now one problem that I see\nhere is that the price shows up with one\ndecimal but we actually wanted to show\nup as\n10.90 so let's scroll up to this part in\nthe code so we'll scroll up\nhere and look for Price\nsense and the reason this happens is\nbecause price sense is\n1,90 so if we divide that by 100 the\nresult is actually\n10.9 if we want to force this to show\ntwo decimals like\n10.90 we actually have a special method\nthat we can use with a number so here we\ncan add brackets around this to make\nsure we calculate this number first and\nnumbers have a special method called dot\n2 Capital fixed and brackets so to fixed\nwe'll convert a number into a string but\nwe can tell it how many decimals we want\nbetween the brackets if we type two it\nwill show two decimals so if we save now\nit shows correctly on the page if you're\nwondering how to find this method you\ncan find it by searching in Google or\nusing an AI\ntool okay let's let's take a break here\nand take a look at git to see all the\nchanges that we made so I'm going to\nexpand this here and we're going to\nclick the git\nsection and it's going to tell us that\nwe changed two files if we click the\nHTML\nfile git will tell us that we deleted\nall of the HTML code for the products\nwhich is correct if we open the\nJavascript file it will tell us that we\nadded all of this new JavaScript code\nincluding the data and the loop for\ngenerating the\nHTML so git helps us track all of the\nchanges that we made so now let's\nactually take these changes and save\nthem into git so we can track new\nchanges at the top let's type a message\nto describe the changes that we made so\nlet's type\ngenerate HTML with\nJavaScript and click\ncommit and yes if this shows\nup so now let's talk about the benefit\nof generating the\nHTML so let's close git for now and I'll\nmove this to the side\nhere so the benefit of generating the\nHTML is that if we want to add another\nproduct we don't have to copy paste all\nof this HTML again all we need to do is\nto go up to the data and add the data\nfor a new product so let's do an example\nand add a fourth product to our list so\nat the end here let's type a comma and\ncreate another\nobject and let's go to the final\nproject and we'll scroll down to this\nfour fourth product here so we're going\nto take the data about this product and\nsave it in our JavaScript so first let's\ncreate a property image colon string and\nwe're going to take this image and put\nit in here to do that we can rightclick\nthe image\ninspect and then we're going to copy\nthis Source attribute so we can double\nclick it and we can select this\nattribute\nrightclick\ncopy and then inside our JavaScript\nwe're going to right click and\npaste and at the end we'll type a comma\nand create the name\nproperty and a string and we're going to\nselect this\nname rightclick copy and then in here\nright click\npaste copy comma and a rating property\ncolon and object we have these Stars\nwhich is five and the\ncount which is\n2,197 and at the end we're going to add\nthe price in cents colon\n1,899 so now if we save this JavaScript\nfile and then go back to our\nproject and we scroll down you'll notice\nthat it automatically added the fourth\nproduct and all we had to do was to add\nanother object to our array and then our\nLoop will handle generating all the HTML\nfor us so you can see that generating\nthe HTML with JavaScript is a lot easier\nthan copy pasting this HTML every time\nand that's why we use this\ntechnique next we're going to add the\nrest of the products in the final\nproject now one thing we could do is to\nmanually copy this over one by one but\nto make this easier inside the starting\ncode I've actually created a file that\ncontains all the data so if we scroll up\nand close this for now and we're going\nto go to this data folder and open it\nand inside this folder I've provided a\nJavascript file called products. JS and\nin here it contains an array with the\ndata for all the products in the final\nproject so we don't have to create it\nourselves so now let's use this products\narray in our code so first we need to\nload this file on our page we can go to\nour amazon. HTML file and then scroll\ndown to the\nbottom and then at the bottom in the\nscript element we're going to add\nanother script element above it so we\ntype script and then the source is going\nto be equal to this Javascript file so\nwe'll type the folder called data and\nthen a slash to go into the folder and\nload the file\nproducts.\nJS so what this does is that it will run\nthe files one by one\nfirst it will run the products. JS file\nand create the array and then it will\nrun our amazon. JS file and generate the\nHTML so back here let's\nsave and then go back into amazon.\nJS so now instead of using our own\nproducts array let's just use the\nproducts array in this\nfile so we'll go back to to amazon.\nJS and we're just going to delete this\narray so over here we can click this\nArrow to collapse the code and I'm going\nto select it and then just delete\nit and\nsave so now this variable will be coming\nfrom this file if we go back to our\nproject and scroll down you can see that\nwe created all the products in our final\nproject so the way this works is that\ninside our amazon.\nHTML we're loading two JavaScript files\nthis Javascript file creates all the\nproducts and then this Javascript file\nLoops through the products and creates\nall the\nHTML so keep in mind that script\nelements are loaded one by one so the\norder matters we have to first create\nthe products array and then we can use\nit if these two were reversed then the\ncode wouldn't\nwork so this is how a real world website\nis created we don't write all the HTML\nmanually instead we save the data for\nthe website in a data structure like\nthis and then we use JavaScript to\ngenerate the HTML using the data so now\nlet's go into get and look at our most\nrecent\nchanges so here it will tell us that we\nchanged two files in the amazon. HTML\nfile we added a script element and then\nin the amazon. JS file we deleted the\nproducts array that we created on our\nown so let's type a message to describe\nour changes use products. JS file and\nthen click commit and yes\nnow one other thing I want to show you\nabout git is if we go back to our files\nhere and then open amazon. JS git has a\nreally useful feature called a history\nso we can open this timeline section and\nthen click this filter icon and only\ncheck git\nhistory and now you can see that we\nactually have a history of all of our\nchanges for this file so if we click the\nfirst line in the history it will show\nus that here we added all of the code\nand then the second line in the history\nwe deleted this part of the code so this\ngives us a step-by-step history of all\nthe changes in our code and in git this\nis called a version history you can also\nsee that the messages that we created\nwhen we commit show up here and these\nmessages help us us understand what was\nchanged in each version in the\nhistory all right so let's close this\nfor\nnow and the last step in the process is\nto make it\ninteractive so let's take a look at our\ncurrent\nproject so we'll go here and open this\ntab and let's scroll\nup so right now if we click the add to\ncart button Buton it doesn't do anything\nso we're going to add some JavaScript to\nmake this interactive and actually add\nthis product to a cart so first let's\nfind the add to cart button in our code\nwe'll go back to our amazon. JS file\nclose this for\nnow and to find the code we can actually\njust search the text in the button so\ninside here let's typ contrl F or\ncommand F and we're going to search for\nthe text add to\ncart and this will take us to the code\nfor this button so now we're going to\nadd an event listener to this button and\nmake it do something when we click it to\nadd an event listener we're first going\nto add a\nclass\njs-\nadd-2\ndcart and then we're going to use the\ndawn to add an event listener to this\nbutton so down\nhere after we've put this HTML on the\npage we're going to use\ndocument. Query\nselector all brackets and then a string\na DOT and we're going to select all the\njs- add to cart so\njs- add-2 to- cart so this will give us\na list of all the add to cart buttons on\nthe page and then we can Loop through\neach of the buttons so we can type dot\nfor each\nbrackets and then in here we'll give it\na function bracket arrow and curly\nbrackets and a parameter so the\nparameter is going to be the button\nelement that we got from the page so now\nfor each of these buttons we're going to\nadd an event listener so we can do\nsomething when we click the button to do\nthat we'll type\nbutton. add event\nlistener brackets and then the event\nthat we want to listen for which is the\nclick\nevent and then a function that we want\nto run when we click this button so\nbrackets arrow and curly\nbrackets so for now let's just\nconsole.log a message to make sure that\nthis is working so we'll\nconsole.log added\nproduct and\nsave and we can also remove this line\nfor now because we're not using it and\nsave again and then now on our page\nwe're going to click add it to\ncart and then look inside our console so\nrightclick\ninspect and click the\nconsole and it displays added product so\nnow whenever we click one of these\nbuttons it will display this message so\nthat means that our code here is working\ncorrectly next we need to figure out how\nto add the product to a cart and we need\nto figure out what this looks like if we\nthink about a cart a cart is basically\njust a list and inside this list we have\nthe product that we want to buy and the\nquantity or the number of this product\nthat we want to buy so we can actually\nrepresent this in JavaScript as an array\ninside the array we can have some\nobjects and each object is going to\ncontain the product and a\nquantity so we can use something like\nthis to represent our cart so let's go\nahead and create create this cart array\nnow to keep things cleaner let's\nactually separate the cart into its own\nfile so we'll click up here to show our\nfiles and then we'll go into the data\nfolder and click this folder and click\nthis icon to create a new\nfile and we'll name this file cart. JS\nand press\nenter so this file will contain all the\ncode related to the cart and the reason\nwe separate it is to keep our code\norganized each file will focus on one\nparticular thing so inside\nC.J let's create our cart so we can just\ncreate a variable const cart and make it\nequal to an array so we'll start off\nwith an MD cart and let's save this\nfile and now we need to load this file\ninto our\nHTML so we can open amazon.\nHTML and again we can just add another\nscript element so let's add it at the\ntop to make sure we load the cart before\nrunning the rest of our code so we'll\ntype less than\nscript and the attribute\nsource and we'll load the data folder\nslash to go inside cart. Js\nand\nsave so now it will run this file at the\nstart and it will create an array\nrepresenting our cart so now that we\nhave a cart we need to figure out what\nhappens when we click a button how do we\nadd a product to this cart so let's go\nback into amazon. JS and we'll figure\nthis out together so down here this is\nthe function that is run when we click\nthe button so in here we have to figure\nout how to add this product to the\ncart one way to do this is to just add\nan object to the cart like this we have\nthe product's name and the quantity that\nwe want however when we click this\nbutton how do we know which product\nwe're supposed to add to the cart to\nsolve this problem we're going to learn\na feature of HTML called a data\nattribute\na data attribute is just another HTML\nattribute except the purpose of a data\nattribute is that it allows us to attach\nany information to an HTML element so\nlet's do an example and create a data\nattribute we're going to scroll up to\nthe add to card button here and then at\nthe end of the opening tag after the\nclass we'll type enter\nand then we're going to type data Dash\nand then we can type any name that we\nwant like\nproduct-name and we'll make it equal to\ndouble\nquotes and then inside the double quotes\nwe're going to put the product's name\nlike a basketball or a t-shirt so to do\nthat we're going to insert using dollar\nand curly\nbrackets product\nAME and\nsave so now let's inspect the HTML on\nthe page we're going to rightclick on\nthis add to card button and\ninspect and then in the elements tab it\nwill show us the HTML for the button and\nnow you can see that each of these\nbuttons now has a data attribute called\ndata- product-name and it's equal to the\nproduct name\nso before we continue let's learn the\nsyntax rules for the data\nattribute a data attribute is just an\nHTML attribute that means it follows the\nsame syntax rules we have an attribute\nname on the left and an attribute value\non the right the one difference is that\ndata attributes have to start with data\nDash and then we can give it any name\nthat we want like product- name but we\nhave to make sure to separate the words\nwith a dash this is also known as Kabob\ncase so the purpose of a data attribute\nis that we can attach any information to\nan element so here we attached the\nproduct name to this button but we can\nalso attach the product's image or the\nprice and so on so now that we attached\nthe product's name to this button when\nwe click this button we can actually get\nthe name and this will tell us which\nproduct we should add to the\ncart so let's see what this looks like\nin our code so we'll go to our\ncode and then when we click the button\nwe're first going to get the product\nname from the button to do that we're\ngoing to type button and then the\nproperty dot data set\nso the data set property basically gives\nus all the data attributes that are\nattached to this button so now we're\nable to get the product name so let's\nconsole.log this to see what it looks\nlike\nconsole.log Open Bracket close bracket\nand\nsave and then in here let's click the\nbasketballs add to cart\nbutton and we'll go into our console\nright click\ninspect and\nconsole and I'm just going to move this\nto the left so we can see it side by\nside with our\ncode so this is what the data set\nproperty looks like it gives us all the\ndata attributes that are attached to the\nelement so in our case we have the\nproduct name now this works just like an\nobject so to access the product name we\njust have to type dot product capital N\nname so notice that the name gets\nconverted from Kebab case to camo case\nso now if we\nsave and let's go back to our\nwebsite and click the add to cardart\nbutton it will get that data attribute\nfrom the button and display it in the\nconsole if we click the socks at to cart\nbutton this will tell us which product\nwe should add to the cart so now that we\nhave the product name let's actually put\nthis into our cart so let's go into our\ncode and here let's save the product\nname in a variable called const\nProduct name\nequals and then here we're going to add\nthis to the cart\nso we already created a cart variable\nhere so we're just going to type the\nvariable cart and we're going to dot\npush into the array and let's push an\nobject because we said we wanted a\nproduct and the\nquantity so we'll add an object\ncontaining the product name which is\nthis variable product\nname and a quantity\nof\none and that's pretty much it we first\nattached the product name to the button\nusing a data attribute and then when we\nclick the button we got the product name\nout and then we add the product to the\ncart so at the bottom let's\nconsole.log thee cart to see what it\nlooks like if we\nsave and then go here and open the\nconsole right click inspect\nconsole and let's add a basketball to\nour cart so we'll click here and then in\nour cart we now have a basketball with a\nquantity of one so now let's add another\nproduct to our cart we'll go to the\nt-shirt and click add to\ncart and now we have two products in our\ncart one b basketball and one\nt-shirt so now we're successfully adding\nproducts to a cart next let's try adding\none t-shirt again if we click add to\ncart and unfortunately this doesn't look\nquite right the T-shirt product is\nrepeated twice and each of them has a\nquantity of one what we actually want to\ndo is we want one t-shirt product with a\nquantity of two\nbecause this is how we're going to\ndisplay it on the cart page so let's\nfigure out how to achieve this and we'll\ndo this step by step first we'll check\nif the product is already in the cart if\nit is in the cart we'll just increase\nthe quantity by one if it's not in the\ncart We'll add it to the cart so let's\nconvert these steps into code so the\nfirst step is to check if a product is\nalready in the cart so how do we do that\nlet's go back to our\ncode and one way to check this is we can\nLoop through our cart and look for a\nparticular product name so up here let's\ncreate some new lines and let's check if\nthis product name is already in the cart\narray so we'll type cart and we'll Loop\nthrough the cart using dot for each\nbrackets and then inside we'll give it a\nfunction brackets arrow and curly\nbrackets and we'll give this a parameter\nand let's just call it an item so an\nitem will contain a product name and a\nquantity so we want to see if this\nproduct name is already in the\ncard so we're going to check if the\nproduct\nname over here is equal to this item's\nproduct name so we'll type equals the\nitem.\nproduct name and curly\nbrackets so if the product names match\nthat means this product is already in\nthe\ncart so let's save this matching item in\na variable so we can use it later so\nwe're going to create the variable\noutside the for each Loop and outside of\nits scope so we'll type let matching\ncapital I item and we'll make it\nundefined to start and if we find a\nmatching item we're going to save it in\nthis variable so\nmatching item equals\nitem so this is how we figure out if a\nproduct is already already in the cart\nnow the next step is If the product is\nin the cart we'll just increase its\nquantity by one so we'll type\nif\nmatching item and curly brackets so we\ncan just type matching item here because\nif we did find a matching item it will\nbe an object which is a truthy value so\nin here we're going to increase the\nmatching items quantity by one using\nmatching\nitem. quantity and we'll plus equal\n1 and finally If the product is not in\nthe cart We'll add it to the cart which\nis basically what we do here so at the\nend we can just type else if we did not\nfind a matching item curly brackets and\nmove this code so we'll select it right\nclick\ncut and then in here rightclick and\npaste and remove the new lines and\nsave so now let's go into our project\nwe'll\nrightclick inspect the\nconsole and let's click the add to card\nbutton for the basketball so we'll click\nthis\nand then in our cart we have a\nbasketball with a quantity of\none let's add a\nT-shirt and now we have one T-shirt with\na quantity of one and if we click add to\ncart on the T-shirt\nagain now we have a t-shirt with a\nquantity of two so that's how we solve\nthe problem of combining the quantities\ntogether now there's one last problem\nthat we have to solve here\nwhich is it's not good to use the\nproduct name to identify the product in\nthe cart because in an e-commerce\nwebsite we might actually have two\nproducts that have the same name but\nfrom different brands so to fix this we\nshould give each product an ID and this\nID should be unique so no two products\nwill have the same ID so let's use an ID\nto identify these products instead of\nusing the name we'll go back to our\ncode and if we open our files here and\ngo to data products.\nJS you'll notice that I've actually\nadded an ID for each of these products\nand this ID is unique so I added it here\nto save us a bit of work so we don't\nhave to create the IDS\nourselves so now let's just use this ID\nin our code so we'll go back to amazon.\nJS and then in here instead of using the\nproduct name we're going to use the\nproducts ID to identify it in the cart\nbut first we need to attach the ID to\nthe button so we'll scroll up and\ninstead of a data- product name\nattribute we're going to use a data\nproduct-id attribute and we're going to\nsave the\nproducts ID\ninstead and now down here we're going to\ngrab the ID from the button to do that\nwe'll change this to product ID so\nremember this gets converted from Kebab\ncase to cam case and we'll rename this\nvariable product\nID and then here we'll compare product\nID is equal to the items product\nID and lastly when we add to the cart\nwe're just going to add the product ID\nto the\ncart and\nsave so now if we go to our website and\nclick add to cart and check our\nconsole and expand this you can see that\nwe're saving the product ID so that two\nproducts with the same name will be able\nto be added to the\ncart okay so that's how we make the add\nto cart button\ninteractive and now we finished all\nthree steps first we save the data for\nthe website in our JavaScript and then\nwe use this data to generate the\nHTML and finally we made it\ninteractive and this is the main idea of\nJavaScript this is generally how we use\nJavaScript on a real\nwebsite now let's go back to git so\nwe'll open our code editor and open the\ngit section and review the changes that\nwe made so we'll expand it and then in\nthe HTML file we just added the cart. JS\nfile and then in here we just created\nthe cart array and in our amazon. JS\nfile we basically added a data attribute\nto the button and then down here we made\nthe button interactive by adding an\nevent\nlistener so now let's save these changes\ninto git we'll type a message to\ndescribe our\nchanges make add to cart button\nInteractive\nand click\ncommit all right so let's close this for\nnow and the last feature we're going to\ncreate in this lesson is we're going to\nmake this cart quantity in the top right\ninteractive so we'll do this step by\nstep first we need to calculate the\nquantity or the total number of products\nin our cart and then we're going to put\nthat quantity\non the page here so how do we calculate\nthe total quantity of the cart so\nremember that the cart is an array of\nobjects and each object has a quantity\nso to calculate the total quantity we\ncan Loop through this array and add the\nquantities together let's go into our\ncode and we'll open amazon. JS and let's\nscroll to the\nbottom so here after we update our cart\nwe're going to calculate the total\nquantity so let's create some new lines\nand as we saw earlier we can Loop\nthrough the cart array so we'll type\ncart dot for each brackets and a\nfunction arrow and curly brackets and\nwe'll give this a parameter\nitem so this is going to Loop through\neach object in the cart\nnext we need a variable to store the\ntotal quantity so let's create a\nvariable up here we'll type let and name\nit cart\nquantity and make it equal to zero to\nstart and then as we Loop through this\narray we're going to add the items\nquantity to this variable up here so\nhere we can type cart quantity plus\nequals the\nitems.\nquantity so this will add up all the\nquantities and save it in this\nvariable so at the bottom let's\nconsole.log the cart quantity to make\nsure that this is working so we'll\nsave and go back to our page and open\nthe console right click inspect and\nconsole when we click add to cart on the\nbasketball the quantity will be one if\nwe click add to cart on the T-shirt the\nquantity will be two if we click again\nthe quantity will be three so looking at\nthe cart it basically added one\nbasketball and two T-shirts to get a\ntotal of three so that's how we can\ncalculate the total quantity of the cart\nso now that we have the total quantity\nwe're going going to put it on the page\nhere and we can do this using the Dom so\nlet's go back to our\ncode and to use the Dom we first need an\nHTML element where we're going to put\nthis quantity so let's find the HTML\nelement for this number here we can go\nback to our page we're going to\nrightclick this number and then\ninspect and then we can click this icon\nin the top\nleft hover over this number and click\nit so this will tell us that the code\nfor the number is this code right here a\ndiv with a class cart quantity so now\nwe're going to search for this class\ncart quantity in our code so let's go\nback to our\ncode and let's go to the amazon. HTML\nfile because the header is still in this\nfile and we'll type contrl f or command\nF to search for code and we'll search\nfor cart Das\nquantity and it will tell us that it's\nthis line right here so next to use the\nDom we need to get this element into our\nJavaScript to do that we're going to add\na class to this element so let's add the\nclass\njs- cart D quantity and say\nsave now let's go back to our JavaScript\nfile and I'm just going to move it down\nhere so we can see it side by\nside and we'll scroll down after we\ncalculate the quantity let's get this\nelement into our JavaScript using the\nDom so at the bottom we'll type\ndocument. query\nselector brackets and a string we start\nwith a DOT and the class\njs- cart D\nquantity and now that we have this\nelement we can change the HTML inside\nusing the property do inner Capital\nHTML and we'll make it equal to the cart\nquantity that we calculated above so\nlet's\nsave and go back to our website and\nlet's click the add to card button for\nthe\nbasketball now it will update the\nquantity to be one let's click the add\nto cart for the T-shirt it will update\nthe quantity again and it will be two if\nwe click it again it will increase to\nthree so now the cart quantity up here\nis\ninteractive the last thing we need to do\nis we'll go back to our\nHTML and in instead of starting at three\nthe card quantity should start at zero\nso let's\nsave and now the cart quantity starts at\nzero if we click add to cart it will\nincrease to one so that's how we create\nthis cart quantity feature in the final\nproject so now we're finished all the\nfeatures that we're going to do in this\nlesson let's go back to our JavaScript\nand I'm just going to move it back up\nhere\nand let's clean up this code by removing\nthese console.\nlogs and\nsave and finally let's check git one\nmore time to see the changes that we\nmade so we can expand this and go to the\ngit\nsection if we click amazon. HTML it will\ntell us we added this class and if we\nclick amazon. JS it will show us the\ncode that we added for C calculating the\ncard quantity and putting it on the\npage so finally let's type a message to\ndescribe our\nchanges make the cart quantity\ninteractive and\ncommit so now we can close\nthis and that's the end of this lesson\nin this lesson we started the final\nAmazon Project\nwe set up and learned how to use git to\ntrack changes we learned the main idea\nof JavaScript which is save the data\ngenerate the HTML and make it\ninteractive we created a list of\nproducts on the homepage we made the add\nto cart button interactive and we made\nthe cart quantity\ninteractive thanks for watching this\ncourse so so far if you want to support\nthis channel you can check out the\npremium version of my courses just like\nthis one where you can get a certificate\nof completion and a Better Learning\nplatform if you're interested in extra\nvideos from me more in-depth videos and\nbehind the scenes content you can check\nout these links here you can also\nsupport the channel by liking the video\nsubscribing and sharing this video with\nothers thanks again and let's continue\nwith the course\nhere are some exercises to help you\npractice what we learned in this lesson\nin this lesson we're going to learn a\nfeature of JavaScript called modules\nwhich is a better way to organize our\ncode so first let's take a look at a\nproblem that we have in our current code\nwe're going to go to our files here and\nwe're going to open amazon.\nHTML and then we're going to scroll to\nthe bottom of this file to our script\ntags so right now we're using three\nscript tags to run all of our\nJavaScript so this runs all the code in\ncart. JS and then it runs all the code\nin products. JS and finally it runs all\nthe code in amazon. JS so this is\nbasically the same thing as combining\nall the files together into one big file\nand then running all of our code however\nthere's a big problem with using script\ntags like this and that problem is it\ncan cause naming conflicts so in our\nsituation here we created a variable\nnamed cart in cart. Js\nthis means we can't use the variable\nname cart in any of our other files so\nfor example if we went to amazon.\nJS and then we scroll to the top\nhere and let's say that we try to create\nanother variable named cart so at the\ntop we type const cart equals square\nbrackets and\nsave and now if we go back to our\nproject you'll notice that the website\nstops working and if we rightclick\ninspect and open the\nconsole it will tell us that we got an\nerror and it says that cart has already\nbeen declared so this is happening\nbecause we created a variable called\ncart in cart. JS and then later in\namazon. JS we created another variable\nnamed cart now we can't have two\nvariables with the same name in\nJavaScript and this causes an error and\nit causes our website to break so this\nis called a naming conflict when we have\ntwo variables with the same\nname so the big problem with script tags\nis if we go back to our\ncode you can see here that it's really\nhard to tell which variables have been\ncreated in other files and it's really\neasy to accidentally create a naming\nconflict like this so that's the problem\nwith using script tags like this and\nrunning our code one file at a time it's\nvery easy to get naming\nconflicts so now we're going to learn\nhow to solve this problem using a\nfeature of JavaScript called\nmodules so a module basically contains a\nvariable inside a file so now this\nvariable is not going to cause conflicts\nwith anything outside the file for\nexample in our project we created a\nvariable called cart and we want to\ncontain this variable inside the cart.\nJS file so that it doesn't conflict with\nthe cart variable inside the amazon. JS\nfile so we can do this using a module so\nnow let's learn how to create our first\nmodule we're going to go back to amazon.\nHTML and then here to create a module\nwe're simply going to delete this line\nof code that uses a script tag to load\ncart. JS so we'll delete it and\nsave and you'll see that the website is\nworking again so how does this work when\nwe use a script tag it will run all the\ncode inside cart. JS so this code will\ncreate a card variable and this will\ncause a naming Conflict by removing the\nscript tag we're no longer running the\ncode inside cart. JS so we're no longer\ncreating a cart variable and it will no\nlonger cause a naming\nconflict so to create a module we simply\ndo two steps number one we create a file\nand write our code inside the file and\nnumber two don't load the file with a\nscript tag by doing this any variables\nwe create inside the file will be\ncontained inside the file and it won't\ncause naming conflicts so that's\nbasically how we create a\nmodule okay so now we run into another\nproblem in our code if we open amazon.\nJS we created this card variable as an\nexample but what we actually want to do\nis to keep the cart variable inside\ncart. JS because we want to keep all the\ncode that's related to the cart inside\nthis file so in\nand if we\nsave and then go back to our project and\nclick add to cart you'll notice that it\nno longer works so let's look at the\nconsole again to see what error we get\nwe'll right click\ninspect and open the\nconsole and it's going to tell us that\ncart is not defined so the problem that\nwe have here is that in this file we're\nusing the variable cart but now because\nwe're not loading cart. JS using a\nscript tag the cart variable doesn't\nexist anymore it's contained inside\ncart. JS and we can't access it from the\noutside so now we're going to learn how\nto get a variable out of a file or a\nmodule to do that we're going to do\nthree steps the first step is to add a\ntype equals module attribute the second\nstep is to export and the third step is\nto import let's learn these steps one by\none so the first step is to add a type\nequals module attribute we're going to\nopen amazon.\nHTML and we're going to scroll to the\nbottom and here in the last script tag\nwhere we load amazon. JS we're going to\nadd an HTML attribute here so we're\ngoing to type type equal equal module\nand\nsave so the type equals module attribute\nbasically lets this file get variables\nout of other files it basically enables\nthis feature now the second step is to\nexport so we're going to go to cart.\nJS and now we're going to choose which\nvariables can be accessed outside of\nthis file so for example we want to\naccess the VAR variable cart outside of\nthis file to do that in front of the\nvariable we're just going to type the\nword export and space and save so now\nthis variable can be used outside of\ncart.\nJS the last step is to\nimport so we're going to go to the place\nwhere we're going to use this variable\nwhich is inside amazon.\nJS and now at the top we're going to\ntell the computer which variable we want\nto get from another file so we'll type\nimport open curly bracket close curly\nbracket and between these brackets we're\ngoing to give the name of the variable\nwe want to get which is the cart\nvariable and then we'll tell the\ncomputer which file we want to get this\nvariable from so we'll type\nfrom single quotes and and\nsemicolon and now inside these quotes\nwe're going to locate the file using a\nfile path so let's open up our files\nhere so it's easy to see what files we\nhave so right now we're in amazon. JS\nand we want to locate cart. JS so the\nfirst step is we actually need to get\nout of the scripts folder we're in the\nscripts folder and we need to get out of\nit and into the data folder so to get\nout of the current Cent folder that this\nfile is in we're going to type dot dot\nso dot dot basically represents the\nfolder outside of this current folder\nwhich is this folder right here\nJavaScript Amazon projects and then\nwe're going to type a forward slash to\ngo outside of the scripts folder so now\nthat we're outside of this folder we're\ngoing to go into the data folder so here\nwe're going to type data and then a\nslash to go into this folder and we're\ngoing to locate the file cart. JS\nC.J and\nsave so what this code does is that it's\ngoing to take the variable cart out of\nthe file cart. JS and we use this file\npath here to locate that file so as a\nreminder dot dot means to go outside of\nthe current folder outside of scripts\ninto here and then we go into the data\nfolder and then inside the data folder\nwe find cart.\nJS so those are the three steps to get a\nvariable out of a module first we add a\ntype equals module attribute to enable\nthis feature and then we export the\nvariables that we want to get out and\nfinally we import the variables when we\nneed\nthem now there's two more things that we\nneed to know about modules number one we\nhave to put all of our Imports at the\ntop of the\nfile and number two in order for modules\nto work we need to use live server so\nfor example if I open the folder that\ncontains amazon.\nHTML so I open JavaScript Amazon Project\nand then I select this HTML file and\nrightclick open with Google\nChrome the website won't work and that's\nbecause modules don't work if we open\nthe HTML file directly like this so\nlet's close this for\nnow and to get modules to work we need\nto open our code editor and then\nrightclick the HTML\nfile and open with live\nserver so in this course in order for\nmodules to work we need to use live\nserver to open our HTML files\nso now that we learned how to use a\nmodule let's talk about the benefits of\nmodules the first big benefit is that it\nhelps us avoid naming conflicts the only\ntime that this causes naming conflicts\nis if we import this variable and we\nhave another variable named cart inside\nthis file like\nthis so this will again create a naming\nconflict if I save this the website will\nstop working but at least now we have\ncontrol over when naming conflicts\nhappen they will only happen if we\nimport the same variable name now\nmodules have another feature that allows\nus to avoid this problem as well so\nafter the variable name that we import\nwe can type as and then a different name\nsuch as my cart and save so this will\nbasically take the input and rename it\nto my cart so that this will no longer\nconflict with this variable name so as\nyou can see modules have a lot of\nfeatures that help us avoid naming\nconflicts when we have lots of files in\nour project so now I'm just going to\ndelete this and put the code back\nbecause that was just an example and\nsave so the second big benefit of\nmodules is that we don't have to worry\nabout the order of our files\nbefore when we loaded everything with\nscript tags we had to make sure that we\nload C.J first because we need the cart\nvariable to be created and then we can\nuse it in amazon.\nJS so the order of our script tags\nreally matter and it becomes really hard\nto manage when we have lots of files in\na big\nproject but now with modules we can just\nimport the variables that we need and we\ndon't have to worry about the order that\nwe're loading our\nfiles so as you can see modules are a\nbetter way to organize our code\nespecially in bigger projects so now\nlet's use git and save our changes so\nwe'll go to the git section here and it\nwill tell us we changed three files in\namazon. JS we removed the script tag and\nadded type equals module in cart. JS we\nexported the cart variable and in\namazon. JS we imported the cart variable\nfrom cart. JS so now let's save these\ninto get so here we'll type a message\nuse\nmodules and import cart from cart. JS\nand\ncommit now that we learned modules let's\nuse them in more places in our project\nso let's close this for now and we're\ngoing to open amazon.\nHTML and next we're going to turn\nproducts. JS into a module as well so\nwe'll start off by deleting the script\ntag because the script tag will just\nload all the code onto the page so we'll\ndelete this and\nsave so notice that our website stops\nworking and now inside amazon. JS we\nneed to to access products from\nproducts. JS so again we're going to do\nthree steps the first step is to add a\ntype equals module attribute which we\nalready have so we don't need to do this\nagain the second step is to export the\nvariables that we want to get out so in\nthis case we want to get the products\nvariable out of the products. JS file so\nlet's open our files and open products.\nJs\nand we'll scroll to the\ntop so to get the products variable out\nof this file in front of the variable\nwe're going to type export and space and\nsave and the last step is to import the\nvariable that we need so inside amazon.\nJS we need the products variable so at\nthe top we're going to type\nimport curly brackets\nand then inside here we're going to type\nthe variable name that we want to get\nwhich is\nproducts and we're going to get this\nvariable from single quotes semicolon\nand then inside here we're going to\nlocate the products. JS file so we're\ngoing to type dot dot and slash to go\noutside of the current folder so outside\nof the scripts folder and then we're\ngoing to go into the data folder so type\ndata and a slash to go into the folder\nand we're going to locate the file\nproducts. JS and\nsave so now that we're importing this\nvariable from this file the rest of our\ncode will work and our website will\nstart working\nagain so that's how we turn products. JS\ninto a module as well so let's go into\nget and take a look at our\nchanges so in amazon. HTML we deleted\nthe script tag and then in products. JS\nwe exported the variables that we wanted\nto get out and then in amazon. JS we\nimported the variables that we need from\nthe\nfile so let's type a message and save\nthese changes into git import products\nfrom products. JS and\ncommit let's close\nthis and let's open amazon.\nHTML now the last thing is you might be\nwondering should we also delete this\nscript tag that loads amazon. JS and the\nanswer is no because we still need one\nJavascript file to load our code so this\nfile will import from all the other\nfiles that we created\nand this is how we organize our code in\na real\nwebsite so this file is called the entry\npoint so now that we've seen some\nexamples of modules we're going to use\nmodules to organize our code better so\nlet's go into amazon.\nJS and then we're going to scroll down\nto the code for the add to card button\nso inside this file we're going to\nscroll down here all the way down to\nthis code here so this is a code that we\nrun when we click add it to cart and\nyou'll notice that we're running a lot\nof code here when we click that button\nwe're running code that adds the product\nto the cart and we're also running code\nthat calculates the quantity and updates\nthe page so a best practice in\nprogramming is that when we have a lot\nof code here that does different things\nit's better to split these up into\nsmaller functions to make our code\neasier to read so here this part of the\ncode takes the product ID and then adds\nit to the cart so it makes sense to\nsplit this into its own function so\nlet's scroll up and at the top here\nlet's create a function for this code so\nwe'll type function and let's call it\nadd to cart brackets and curly brackets\nand then we're just going to move all\nthis code into the function so we'll\nselect this\ncode and then\nrightclick\ncut and then inside this\nfunction rightclick and\npaste and then down here we're going to\nrun this function inside here so when we\nclick add to cart we're going to run add\nto cart function that we just created\nand Save\nso now let's give this a try so we'll\nclick add to\ncart and unfortunately it doesn't work\nanymore so let's take a look at the\nconsole to see if there's any errors\nwe'll rightclick\ninspect and then open the\nconsole and it's telling us that product\nID is not defined so if we look at our\ncode\nhere and scroll up in the function\nyou'll notice that we're using product\nbut it's no longer anywhere in the\nfunction and that's because product ID\nis outside the\nfunction so we actually want to keep\nthis code outside because it's using\nthis button so instead we're going to\ntake product ID and put it into a\nfunction using a parameter so at the top\nof the function we're going to add a\nparameter product\nID and then when we call this function\nwe're going to pass it the product\nID so we're going to take this value put\nit into the function and save it in here\nand then the function can run as normal\nso now if we save and then go to our\nproject and click add to cart you can\nsee that it's working\nagain next let's go back and scroll\ndown and we're going to put the rest of\nour code into its own function as well\nto make it more organized so at the top\nhere let's create some new lines and\ncreate a\nfunction and this code updates the card\nquantity on the page\nhere so let's name this function\nupdate cart quantity brackets and curly\nbrackets and we'll move this code into\nthe function so let's select this code\nand then rightclick cut and then in here\nrightclick and\npaste and then down here we'll call the\nfunction using update cart quantity and\nbrackets and\nsave so as you can see by splitting up\nour code into smaller functions it makes\nour code a lot easier to read when we\nclick add to cart it's really easy to\nunderstand what's going on first we're\ngoing to add a product to our cart and\nthen we're going to update the card\nquantity so now let's save and then go\nback to our project and try it out and\nyou can see that everything is working\nagain so we're going to do two more\nthings to better organize our code so\nlet's go back to our code and the first\nthing is we're going to scroll up to the\nadd to cart function and I made a small\nmistake in the previous lesson I\nactually want to rename this parameter\nfrom item to cart item instead to make\nit a little more clear so we're just\ngoing to rename this to cart item and\nhere as well we name it to cart item and\nsave and we'll scroll down here and\nwe're going to do the same thing for\nthis parameter so we'll rename it to\ncart item and then here cart item and\nSave\nand the last thing we'll do is let's\nscroll up to the add to cart\nfunction so you'll notice that this code\nmanages our cart so it's actually a best\npractice to move this function into\ncart. JS because cart. JS contains all\nthe code that's related to the cart a\nbest practice is to group related code\ntogether into its own\nfile so here let's take the function add\nto cart we'll select it and then\nrightclick\ncut and then inside cart. JS we're going\nto rightclick and paste and just move\nthat function into this file because\nthis file contains all the code that's\nrelated to the cart so now that this\nfunction is inside the file we need to\naccess it from amazon.\nJS and we can do that using modules\nusing the features export and import so\ninside cart. JS in front of the function\nwe're going to export it so we can use\nit in other files so let's save this\nfile and then inside amazon. JS we're\ngoing to scroll to the\ntop and you'll notice that we're already\nimporting something from cart. JS so we\nactually don't need to write import\nagain here we can actually import\nmultiple things from this file by typing\ncomma and space and then something else\nthat we want to import so in our case\nwe're going to import the function add\nto cart so here we'll type comma add to\ncart so now it will import both the cart\nand the add to cart function from this\nfile so Imports can import multiple\nthings from a\nfile Imports have another syntax import\nStar as this Imports everything from a\nfile and groups it together inside this\nobject and then we can access each\nimport as a property or a\nmethod so lastly I'm just going to\nscroll down to my code\nhere and I'm just going to remove this\nextra new line and\nsave now you might be wondering if we\nshould move update cart quantity into\ncart. JS as\nwell so this function actually handles\nupdating the web page rather than\nmanaging the cart so we're going to keep\nthis function inside this file for\nnow so now let's go into get and save\nour changes so we'll go here and inside\ncart. JS we moved the add to cart\nfunction and then we exported it and\nthen inside amazon. JS we imported the\nadd to card\nfunction and then down here we took the\nbig block of code that we had before and\nwe separated it into two functions add\nto cart and update cart quantity and\nthis made our code a lot easier to\nread so now let's type a message\ndescribing our changes move add to cart\ninto cart. JS and commit\nnext we're going to create the checkout\npage in our final project and we're\ngoing to use modules to organize our\ncode again so let's open the final\nproject and we're going to click this\ncart icon in the top\nright and this will take us to another\npage which is the checkout page so on\nthis page we can see the products that\nare in our\ncart so if you're wondering how that\ncart icon works it basically uses is an\nHTML element called a link element which\nlooks like this link elements have a\nspecial attribute called href when we\nclick a link element whatever is inside\nthe href attribute it will open it in\nthe page so if we put youtube.com inside\nthe href and we click the link it will\nopen youtube.com in our browser if we\nput a file like checkout. HTML inside\nhref it will look for a file called\ncheckout. HTML and open that\nfile so in our project if we look at our\ncode and open our\nfiles inside amazon.\nHTML we're basically just using a link\nelement or an a element and this has an\nhre of checkout. HTML so what this does\nis it's going to look for a file called\ncheckout. HTML beside the current file\namazon. HTML so here's amazon. HTML and\nit's going to look for checkout. HTML\nbeside it and then open that in our\nbrowser which is how that cart icon\nworks so in our browser at the top you\ncan see that it opened checkout. HTML so\nthat's basically how a link element\nworks and how we can navigate from one\npage to another you can learn more about\nlink elements in my HTML and CSS full\ncourse but for now now we're going to\nlearn how to build the checkout page\nusing\nJavaScript so first let's take a look at\nthe code for this page so again the code\nis inside checkout.\nHTML so in our code editor we're going\nto open checkout.\nHTML and this is a code for the page\nthat we saw earlier that contains our\ncart so just like with the homepage\ninstead of writing all this HTML\nmanually we're going to use JavaScript\nto generate this\nHTML so first we need to add JavaScript\nto this page so let's scroll down to the\nvery bottom\nhere and right before the end of the\nbody we're going to create a script\nelement to load some\nJavaScript and we'll give it an\nattribute Source equals double quotes\nand then a file we want to load so let's\ncreate a new Javascript file file for\nthis page so inside our scripts folder\nlet's click amazon. JS and then click\nthis icon to create a new file and let's\nname this file checkout. JS and press\nenter and now we're going to load this\npage inside checkout.\nHTML so here in the source attribute\nwe're going to locate this file so first\nwe need to go into this scripts folder\nso we'll type\nscripts and then a slash to go into the\nfolder and then we'll load the file\ncheckout.\nJS and next we're going to add another\nattribute type equals double quotes\nmodule so remember from earlier in the\nlesson this attribute enables module\nfeatures for this file so now this file\ncan import from other JavaScript files\nso now let's\nsave and let's open checkout. JS and\nwe'll start creating this page with\nJavaScript so let's go back to our page\nfirst and take a look at the structure\nof this page so you can see on this page\nwe actually have two sections we have\nthe cart section on the left which shows\nthe products in our cart and we also\nhave the payment section on the right\nwhich calculates the cost of our order\nso let's use JavaScript to create the\ncart section first so remember the main\nidea of JavaScript is first we're going\nto save the data and then we're going to\ngenerate the HTML and finally we'll make\nit\ninteractive let's start by saving the\ndata that we need for this section of\nthe page so for this section we're\nbasically displaying a list of products\nalong with the quantity of each product\nthat we want to buy and and if you\nremember we already created a data\nstructure to represent this which is our\ncart inside our cart we have the ID of\nthe product as well as the quantity that\nwe want to buy so we can just reuse this\ndata structure to create this section so\nlet's go into our\ncode and we're going to open cart.\nJS so inside here we have an array\ncalled cart that's supposed to represent\nour data here\nso right now our card is empty so to\nmake it easier for us to develop we're\njust going to add some default values\ninto this array so inside here let's\ncreate an object and put one product\ninto our card first so looking at this\npage the product that we want to put is\nthe socks so we'll go back into our code\nand I'll rearrange my windows so we can\nsee it side by side and we're going to\nget the product ID for the socks here so\nwe're going to go into products.\nJS and then here's the socks we just\ngoing to take this\nID right click\ncopy and then inside the\ncart and remember we structured our data\nso that each card item has a product ID\nas well as a\nquantity so here we're going to create\nthe same structure that our current code\nuses\nso we're going to give each object a\nproduct ID colon and single quotes and\nwe're just going to rightclick and\npaste the ID that we copied earlier and\nthen we'll type a comma and we'll give\nit a\nquantity colon and for the first item\nwe're going to give it a quantity of two\nso we'll just create a cart that kind of\nmatches what we see on this page\nnext let's create a second card item to\nrepresent the basketball so we'll type\ncomma curly brackets we'll give it a\nproduct ID colon and single quotes and\nthen we're going to get the ID for this\nbasketball so inside products. JS we\ngoing to scroll down to the basketball\nhere and we're going to copy this\nID right click copy\nand then inside cart.\nJS in here right click and\npaste and we'll give this one a\nquantity colon one and\nsave so what we're doing here is we're\njust creating some default values that\nwe can use to write the code to generate\nthis page so this is just for\ndevelopment when we're actually using\nthe website the cart will start off as\nempty so so if we compare our data to\nour page you might notice that there's a\nfew things that are missing such as the\nproduct's image the name and the price\nso how come we're not saving these into\nour data and that's because we're using\na special technique we're just saving\nthe product's ID and then we can use\nthis ID to search for this product\ninside the products array here so using\nthe ID we can find all the other details\nof the product like the image the name\nand the price so there's no need to save\nthis data twice inside the products\narray and inside the cart array all we\nhave to do is save the ID of the product\nthat we want and then search for it so\nthis technique is called duplicating the\ndata or normalizing the data and this is\na very common technique in software\nengineering okay so the one other thing\nthat we probably need to save in our\ndata is the delivery times and the\ndelivery options but we're going to\nleave this for the next lesson because\nit requires some more features that\nwe're going to\nlearn so for now we finished saving the\ndata that we need the next step is to\nuse this data to generate the\nHTML so let's open checkout.\nJS so I'm just going to drag it to the\nbottom here so we can see it side by\nside\nso the first step we need to do is to\ntake the cart array and import it into\ncheckout. JS so we can use it so in here\nlet's import curly brackets the cart\narray and we're going to import it from\nsingle quotes and semicolon and we're\ngoing to use a file path between the\nquotes to locate cart. JS so let's open\nour files again and to get from here to\nhere we need to go out of the scripts\nfolder so to do that we can type dot dot\nand then slash to go to the outer folder\nand then we're going to go to the data\nfolder so we'll type data slash to go\ninto this folder and we'll locate cart.\nJS so cart. JS and save and next we're\ngoing to Loop through this cart and\ngenerate the HTML just like we did for\nthe\nhomepage so let's close this for now and\nhere we're going to create a loop over\nthe cart so we'll type cart. for each\nbrackets and a\nfunction and then we'll give it a\nparameter let's call it cart\nitem and then for each cart item here\nwe're going to generate this\nHTML so in here let's create a template\nstring for the HTML using back ticks and\nwe'll create some new lines and then\nhere we're going to copy and paste the\nHTML for one of these products so first\nlet's find the HTML for one of these\nproducts and to do that we can\nrightclick\ninspect and then click this top left\nicon and then click the element we want\nto get the HTML\nfor so here's the HTML for one of these\nproducts and we're going to search for\nthis class card item container and our\ncode so inside our\ncode let's open checkout.\nHTML and we'll type control F or command\nF to search for code and we'll search\nfor the class cart D item D\ncontainer which is this code right here\nso if we collapse it and collapse this\nthis is the code for these two products\nhere so we're going to take this HTML\nand we're going to move it into our\nJavaScript so we can generate it with\nJavaScript so we'll right click\ncopy and then in here right click and\npaste and if we need to fix the\nformatting we can select all of these\nlines and then press shift tab to remove\nsome indents\nand I'll add an indent here next when\nwe're generating this HTML we want to\nreplace this with the actual products\nimage and this with the actual products\nname so we're going to take this card\nitem and use it to get the data that we\nneed so let's open card. JS to see what\neach cart item looks like so we have the\nproduct ID and the\nquantity so first we need to use this\nproduct ID to search for the product in\norder to get the other details like the\nimage the name and the\nprice so to do that let's get the\nproduct ID out of the cart item first so\nwe'll create a variable const product ID\nequals the cart item do product\nID and now we need to use this to search\nfor the full product so the full product\nif we open our files is INS inside\nproducts.\nJS which is this array right here so I'm\njust going to move this up here so we\ncan see it side by\nside so to search inside this array we\nactually need to import products into\ncheckout. JS so let's use some module\nfeatures again at the top we'll import\ncurly\nbrackets the products array and we'll\nimport it from single quotes and\nsemicolon and then here we'll locate the\nproducts. JS file so we'll type do dot\nslash to go out of the scripts folder\nand then we'll go into the data folder\ndata and then a slash to go into this\nfolder and we import from products. JS\nso\nproducts. JS and save so now we have\naccess to this products array here and\nwe'll search the array for the full\nproduct details so down\nhere let's create a variable to save the\nresult so we'll type let and we'll name\nit matching\nproduct and then down here we'll Loop\nthrough the products array so we'll type\nproducts. for each brackets and a\nfunction and then we'll give it a\nparameter\nproduct and now for each product here\nwe're going to check if the ID property\nis equal to our product ID here so down\nhere we'll check if the\nproduct. ID property is equal to our\nproduct ID up here and then if they're\nequal that means we found the matching\nproduct and we're going to save it in\nthis variable so matching\nproduct equals this product that We're\nlooping\nthrough so now that we have the matching\nproduct we have access to the image the\nname as well as the price that we can\nuse to generate this HTML so this is a\ngood example of duplicating or\nnormalizing our data so now at the\nbottom let's\nconsole.log our matching product to see\nif it works so matching\nproduct and\nsave now if we go into our project and\nwe rightclick inspect and check our\nconsole you can see that we were able to\nget the full product details for each of\nthese products using the product ID so\nnow that we have the full product\ndetails we can use this to generate all\nthis HTML\nso down here instead of generating the\nsame image every time we're going to use\nthe image in the matching product so\nlet's get rid of this\ncode and here we're going to remove this\nand we're going to substitute using\ndollar curly\nbrackets the matching\nproduct.\nimage and we'll scroll down and instead\nof the same product name every time\nwe're going we're going to replace this\nand we're going to substitute the\nmatching\nproduct. name so each time we're going\nto generate HTML with a different image\nand a different name and down here the\nsame thing remove the price and we'll\nreplace it with matching product Dot and\nthen we'll just check here what the\nproperty is it's called a price sense\nand remember this is in\nand to display it as dollars we have to\nconvert it by dividing by 100 and\nsave and lastly we're going to replace\nthe quantity here so if we scroll down\nwe can see that this is the quantity so\ninstead of two every time we'll\nsubstitute and for the quantity remember\nit's not part of a product it's part of\nour cart so each cart item has a\nproperty called called quantity so down\nhere we're going to substitute the cart\nitem.\nquantity and\nsave so now we're generating all this\nHTML by looping through our cart so the\nnext step is we're going to combine all\nthis HTML together and then put it on\nthe page so I'm just going to move this\nup here so we can see more of the\ncode so to combine all this HTML\ntogether let's create a variable up here\nto store the result so we'll type let\nand let's call it the cart summary\nHTML equals an empty string and now each\ntime we Loop through the cart we're\ngoing to add this HTML up here so that\nwe combine it so here we'll type cart\nsummary\nHTML Plus\nequals this HTML that we\ngenerated and at the bottom I'll just\nadd a\nsemicolon and then let's console.log the\ncart summary\nHTML\nconsole.log cart summary HTML to make\nsure that it worked so we'll save and\nthen in here we'll check the console\nright click\ninspect the console\nand now you can see that we generated\nthe HTML and each cart item is different\ndepending on the product that is being\ndisplayed so that's how we generate all\nthe HTML for this section and the last\nstep is to take this and put it on the\npage using the Dom so first we need an\nelement that we can put the HTML inside\nof to find this element let's rightclick\ninspect and click the top left left and\nclick one of these\nproducts and let's find this order\nsummary element because this contains\nboth of our products here so we're going\nto replace all the HTML inside here with\nwhat we generated so let's search for\nthe class order summary in our code so\nwe'll go back to our code and let's open\ncheckout.\nHTML and we'll type contrl f or command\nF to search for code and we'll search\nfor the class\norder-\nsummary and then it's right\nhere and we're going to add a class so\nwe can select it using the Dom so js-\norder- summary and\nsave so now let's use the Dom and put\nthis element in our JavaScript so inside\nhere at the\n[Music]\nbottom we use\ndocument. Query select VOR\nbrackets and the class we just\ncreated js-\norder-\nsummary and we'll use the property.\ninner Capital\nHTML and we'll change the HTML to cart\nsummary\nHTML and we can remove this\nline and now if we\nsave we're basically generating all this\nh HTML with JavaScript and then putting\nit on the page so now we can go back to\ncheckout.\nHTML and we can actually remove the code\ninside this order summary so we can\ndelete this\ncode and save and everything will still\nwork because this is now being generated\nby\nJavaScript so that's how we create the\ncart section of this page with\nJavaScript let's go into get and save\nour changes so we'll open the git\nsection and then it will tell us that we\nchanged three files in checkout. HTML we\nremoved all the HTML that was written\nmanually and then at the bottom we\ncreated a script tag to load our\nJavaScript and then we also changed\ncart. JS and added some default values\nto work with and then we created\ncheckout. JS which loops through the\ncart creates the HTML and puts it on the\npage so let's create a message to\ndescribe our\nchanges generate\nHTML for the order summary and\ncommit next let's open our project\nagain and before we continue we actually\nhave two issues that we need to fix the\nfirst issue is that the price is\ndisplaying as one decimal here instead\nof two and the second issue is that\nthese delivery options are actually\nshared between the two products for\nexample if I click this delivery option\nhere it will actually unselect for the\nsecond product so they're sort of shared\nbetween the two\nproducts but what we actually want is\nfor each product to be able to select\nits own delivery options so we're going\nto fix these two issues\nnext first let's focus on the price and\nwe want to display it in two\ndecimals so we actually learn how to fix\nthis on the homepage using the method to\nfixed so we're going to use the same\ncode here let's go into our\ncode and we'll open our files and let's\nopen checkout. JS\nagain so here we're going to scroll down\nto where we display the\nprice which is here price sense and to\nshow this in two decimal places we're\ngoing to surround this with brackets to\nmake sure we calculate it\nfirst and then use the method\ndo2 fixed brackets and then two to show\ntwo decimal places if we save and then\nopen our\nproject now the price is displaying\ncorrectly before we move on we're going\nto learn how to better organize this\ncode so if we go\nback so notice that we're using this\ncode inside the checkout page as well as\ninside amazon. JS which is the homepage\nso we can actually share this code\nbetween the two files so we don't have\nto repeat it and to do that we can use\nmodules so let's open checkout. JS again\nand what we'll do is we're going to\ncreate a function that does the same\nthing as this code and then we can share\nthis function between the two files so\nlet's create a file that's going to\ncontain this shared function so we're\ngoing to go to our scripts folder here\nand inside we're going to create a new\nfolder this time and let's call this\nfolder\nutils and press\nenter so we're naming it utils because\nthis code is sort of like a useful\nutility that we want to\nshare now inside this folder we're going\nto have different types of utils so\nlet's create a new\nfile and let's name it money. JJs so\nthis file is going to contain utilities\nthat are related to money which is this\ncode right here so let's press\nenter and I'm just going to move this to\nthe bottom so we can see it side by\nside so now inside this UIL file we're\ngoing to create a function that does the\nsame thing as here and then we can share\nit between the two\nfiles so here we'll create a function\nand let's name it format currency\nbecause that's what this code is doing\nand then brackets and curly\nbrackets so this function is basically\ngoing to do the same thing as here so\nwe're going to add a parameter here\nprice sense\nbecause we want to use this function for\nany amount of price\nsents and then in here we're going to do\nthe same thing which is price sents\ndivided 100 and then we're going to\nsurround this with brackets to make sure\nwe calculate this\nfirst and then display it in two decimal\nplaces using dot 2 fixed brackets and\ntwo and finally let's return this result\nreturn and\nsave so what we just did is we created a\nfunction that does the same thing as\nthis code here and now we're going to\nshare this function between checkout. JS\nand amazon. JS so first in order to\nshare it we need to export this function\nso at the front we're going to type\nexport and\nsave and now inside each of these files\nwe're going to to import this function\nand use it so let's scroll to the\ntop and here we're going to import curly\nbrackets we're going to import the\nfunction format\ncurrency and we're going to import it\nfrom single quotes and\nsemicolon and then inside here we're\ngoing to locate the file money. JS so\nhere we're in the checkout. JS file\nwhich is right here and to go here we're\nfirst going to go into the UTS folder so\nwe're going to Type U toils and then a\nslash to go into this folder and we're\ngoing to locate the file money. JS so\nmoney.\nJS now for modules we have to do one\nextra thing at the front of this file\npath we need to type dot\nslash so remember that dot dot\nrepresents the folder outside the\ncurrent folder so for checkout. JS if we\ngo outside of this folder we're going to\ngo outside the scripts\nfolder now a single dot on the other\nhand means the current folder so this\ndot means we're going to go into the\ncurrent folder which is the scripts\nfolder and then we're going to go into\nthe utils folder and then we're going to\ngo and locate money.\nJS so for modules if we want to start in\nthe current f folder our file paths have\nto start with Slash so that's one extra\nthing that we have to do so now that\nwe've imported the format currency\nfunction let's use it in the rest of our\ncode so we're going to scroll\ndown to here and instead of writing this\nall over again we're just going to use\nthe function format\ncurrency and then brackets and we're\ngoing to remove the rest of the code\nhere and and close bracket and\nsave so we're basically running the same\ncode except we're using this shared\nfunction that's located in another file\nso let's open our\nproject and we can see that the price is\nstill displaying\ncorrectly so now let's go back into our\ncode and we're going to share this\nfunction inside amazon. JS as well so\nlet's open amazon.\nJS and then we'll scroll to where we\nshow the price which is here and we're\ngoing to use this function again so\nfirst we have to import it so we'll\nscroll up to the top and import curly\nbrackets we'll import the function\nformat\ncurrency and we'll import it from single\nquotes semicolon and then here we'll\nlocate the file money. JS so remember\nfor module if we want to start in the\ncurrent folder we have to type slash and\nthen we're going to go to the UIL folder\nso utils and then a slash to go inside\nthe folder and locate the\nfile money.\nJS and now we're going to use this\nfunction so let's scroll\ndown and we're going to replace this\ncode and use format currency and\nbrackets so we can remove the rest of\nthe code here and\nsave and now let's look at our\nproject and we'll click up here to go\nback to the\nhomepage and you can see that the prices\nare displaying as two decimal\nplaces and that's it if we look at our\ncode again we're essentially taking this\nfunction and sharing it across two files\nusing modules so using modules we can re\nuse a lot of our code and reduce\nrepetition next let's work on the second\nissue that we saw earlier so we'll go\nback to our project and click the top\nright to go back to the checkout page\nand then here the delivery options are\nshared between the two products but we\nwant each product to choose its own\ndelivery\noptions so to fix that let's go back\ninto our code and just going to resize a\nhere so we can see it side by\nside and we'll open checkout. JS again\nand we can close this for\nnow so this is an HTML element called a\nradial selector and here's the code for\na radial selector so the way that radial\nselectors work is that if a set of radio\nselectors have the same name then we can\nonly select one of them so for example\nif these three radio selectors have the\nsame name attribute then we can only\nselect one of them now if the three at\nthe top have one name and the three at\nthe bottom have a different name then we\ncan select one from the first three as\nwell as one from the second\nthree now what's the problem with the\nradial selectors here well let's take a\nlook at the code for these selectors to\ndo that we're going to rightclick one of\nthem and then\ninspect and then click the top left and\nclick one of these selectors to get the\nHTML code so here we have the code for\nthe radio selector and you can see that\nthe name of the selector is delivery\noption one and now if we click the top\nleft again and find one of these bottom\nselectors you'll notice that these also\nhave the name delivery option one so all\nsix of these have the same name at\nattribute that's why we can only select\none of these six at a time so what we\nactually want to do is we want the first\nthree selectors to have one name and the\nsecond three selectors to have a\ndifferent name so let's figure out how\nto give these a different name so inside\nthe console we can see the code for this\nselector and we have a name attribute\ndelivery D\noption-1 so let's actually find this\nname in our code so we'll go to our code\neditor and contrl F or command F to\nsearch for code and we'll search for\ndelivery Das\noption-1 and if we scroll\ndown you'll notice that every time we're\ngenerating these radio selectors we're\nalways using the same name delivery\noption one so every product is going to\nhave the same name for the radio\nselectors and all of these are going to\nbe shared so what we actually want to do\nis instead of using the name delivery\noption one every time each product is\ngoing to use a different name for these\nthree\nselectors so one way we can do that is\ninstead of the number one every time we\ncan replace it with the product's ID\nbecause the ID is always unique for each\nproduct so let's substitute using dollar\nand curly\nbrackets the product\nID and then down here as well instead of\nusing the name one every time we're\ngoing to\nsubstitute\nproduct. and\nactually we use the name matching\nproduct so we'll scroll down and just\nupdate this to matching\nproduct and then down here matching\nproduct and and as well down here\ninstead of one every\ntime substitute the matching product. ID\nand\nsave so now these three radial selectors\nwill have a different name attribute\nthan these three radial selectors that\nmeans we can select one out of these\nthree and we can select one out of these\nthree so that's how we fix that error\ninstead of using the same name delivery\noption one every time we're going to\ngenerate a name using the product's ID\nso let's go into get and save our\nchanges so in amazon. JS we imported\nthis shared function and we used it to\nformat the price in two decimal places\nand then in checkout. JS we also used\nthe shared function\nhere and we fix the radio selectors\nand then in this file\nmoneyjar\nfunction so let's create a message to\ndescribe our changes fix price\nformatting and radio\nselectors and\ncommit the last step in our process is\nto make it\ninteractive so I'm just going to close\nthese for now\nand going to move it to the right again\nso we can see our\nproject and for the order summary\nthere's a few things we can make\ninteractive for now we're going to start\nwith this delete link when we click this\nlink it should remove this product from\nthe cart so we're going to learn how to\nbuild\nthis so let's go back to our code and\nfirst let's add event listeners to all\nof these delete links to do that we're\ngoing to find the code for these delete\nlinks so we'll rightclick\ninspect and then in here this is the\ncode so we're going to search for this\nclass in our code editor delete quantity\ndlink so in here let's open checkout. JS\nand we're going to contrl f or command F\nand search for delete - quantity\ndlink which is right\nhere next we're going to add a class to\nthese elements so we can add event\nlisteners so at the end here let's add a\nclass\njs- delete\ndaslink and\nsave and then at the bottom we're going\nto scroll down and then out here we're\ngoing to add the event\nlisteners so first we're going to select\nall the delete links on the page using\ndocument. query selector all brackets\nand then a string and we're going to\nselect a class using Dot and the class\njs- delete\ndaslink and then we're going to Loop\nthrough all these links so dot for each\nbrackets and a\nfunction and and in here it will give us\nthe link every time and then for each of\nthese links we're going to add an event\nlistener so\nlink.\naddevent\nlistener\nbrackets and here we're going to give a\nstring and the event we want to listen\nfor which is a\nclick and then a function that we want\nto run when we click these links so for\nnow let's just\nconsole.log string delete to make sure\nthat it's working so we'll save\nthis and then in here we click these\ndelete links and then open the console\nright click\ninspect\nconsole we can see that it's working now\nso now let's go back to our\ncode so when we click delete we're going\nto do two steps the first step is we're\ngoing to remove the product from the\ncart and the second step is we're also\ngoing to update our HTML and remove the\nproduct from the page so let's start\nwith the first step so when we click\ndelete how do we know which product we\nneed to remove from the\ncart so we learned how to do this for\nthe added to cart button we can attach\nthe product's ID to the link element so\nlet's scroll up again to where the\ndelete link is which is right here and\nwe're going to attach the products ID to\nthis element using a data attribute so\nat the end here we're going to add\ndata-\nproduct-id equals double quotes and then\nhere we'll\nsubstitute the matching\nproduct. ID and\nsave and now that we attached the\nproduct ID to this element we can get it\nin our JavaScript below so let's scroll\ndown and then here we're going to delete\nthis line and using the link element we\ncan get that product ID using link. dat\nset to access the data attributes and\nwe're going to access product\nID and let's save this in a variable so\nwe can use it later so const product ID\nequals this\nvalue and let's\nconsole.log this to see if it\nworks and\nsave so now if we go to the project and\nclick the delete link for the first\nproduct and then look at the console\ninspect and console it will show us the\nproducts\nID if we click the second products\ndelete link it will show us the second\nproducts ID so now now we have the ID\nthat we need to remove from the cart so\nnow how do we actually do that so before\nwe begin figuring that out instead of\nwriting all the code down here let's\nactually create a function inside C.J to\ndo this task the reason we're going to\ndo this is because cart. JS is supposed\nto contain all the code that's related\nto the cart so this will help us\norganize our code better so let's open\nour files again again and we're going to\nopen cart.\nJS and we're going to scroll to the\nbottom and we're going to create a\nfunction for removing a product from the\ncart so let's type function and let's\nname it remove from cart brackets and\ncurly\nbrackets so this function we'll take a\nproduct ID which we have and remove it\nfrom the cart so here let's let's create\na parameter for the ID product ID and\nnow in here we're going to figure out\nhow to remove it so here's one way we\ncan do this first we can create a new\narray and then we can Loop through our\ncart and then add each product to the\nnew array except for this product ID so\nnow let's convert these steps into code\nso inside this function here let's\ncreate a new new array using const we'll\ncall it new cart equals an empty\narray the next step is we're going to\nLoop through our cart so we'll type\ncart. for each brackets and a\nfunction and we'll give it a parameter\ncart item and the last step is that\nwe're going to add each card item to the\nnew array except if it has this product\nID so we can do that by checking if the\ncart\nitem. product ID is not equal to the\nproduct ID that we're looking for\nproduct\nID so if it's not equal to the product\nwe're trying to remove we're going to\nadd it to the new cart so new cart. push\ncart item\nso the result of this Loop is it's going\nto contain all the cart items that don't\nmatch this product ID and that's the\nsame thing as removing this from the\ncart so now the last step is we're going\nto take our new cart and replace the\ncart up here so we'll scroll\ndown and then here we'll make cart equal\nto our new\ncart because we're reassigning this\nvariable we have to scroll up and change\nit from const to let and\nsave so now that we created this\nfunction let's use it in our checkout\npage first we're going to use the\nmodules feature and Export this function\nand\nsave and then inside checkout. JS we're\ngoing to import this function so I'm\njust going to move this down to the\nbottom so we can see it side by side\nso here so in checkout. JS we're going\nto scroll up and we're already importing\nfrom cart. JS so we're just going to\nimport one additional Thing by typing\ncomma and we're going to import this\nfunction remove from cart and\nsave and then we're going to use this\nfunction at the bottom so we'll scroll\ndown and then here we're going to\nremove from cart brackets and we're\ngoing to give it the product ID we want\nto remove so product\nID and lastly let's just console.log the\ncart to make sure that this works so\nconsole.log the card and\nsave so now let's go into our\nproject and we're going to click this\ndelete link for the first product so\ndelete and let's open the console right\nclick inspect the console and now it's\ngoing to show us that we have one\nproduct remaining in the cart and this\nproduct has a quantity of one which is\nthe second product here so by clicking\nthat delete link We successfully removed\nthis product from the cart so now if we\nrefresh and tried clicking the second\ndelete\nlink and look at the\nconsole and then EXP expand the cart it\nwill tell us that the remaining product\nhas a quantity of two which is this\nproduct so we successfully removed the\nsecond product from the cart when we\nclicked\ndelete so now let's go into get and look\nat our changes so we'll go into this\nsection well I can close this for now\nand we'll open git and it will tell us\nthat in C.J we change it to let and we\ncreated this new remove from cart\nfunction and then in checkout. JS we\nimport that function and then at the\nbottom when we click the delete link\nwe're going to remove this product from\nthe cart now finally we can remove this\nconsole.log save and we're going to put\nthese changes into git so we'll type a\nmessage to describe our\nchanges delete products from cart when\nclicking\ndelete and\ncommit the second thing we have to do\nwhen we click delete is to update our\nHTML so if we go back to our\nproject when we click delete we want to\nremove this product from the page so one\nway we can do this is first we're going\nto use the Dom to get the element we\nwant to remove and then we can use a\nmethod called\nremove so every element that we get from\nthe Dom has a method called remove which\nremoves it from the page so first of all\nhow do we know which element to get from\nthe page so let's actually look at the\nHTML for one of these products we're\ngoing to\nrightclick\ninspect and then click the top left and\nthen click one of these products\nhere and this will give us the HTML so\nthese two products are represented by\nthese two divs here with the class\ncart--\ncontainer so one way to identify which\nproduct this is for is to add a special\nclass to this element and this class\nwill contain the product\nID and then if we go back to our code\nand we open checkout. JS and scroll to\nthe\nbottom when we click delete we have the\nproduct ID here so we can use this to\nselect that special class that we're\ngoing to add so first let's add that\nspecial class to each of these elements\nso we're going to scroll up to the\nHTML and we're going to go to the top\nhere to the div cart--\ncontainer and then here we'll add a\nspecial class\njs- cart Das item Das container Das and\nthen we'll substitute the product's ID\nso we'll type the\nmatching\nproduct.\nID and let's put this class on a\nseparate line so the line is not too\nlong now let's\nsave and now we're going to scroll to\nthe bottom and use our code to get this\nclass so we'll scroll to the\n[Music]\nbottom and here we're going to use the\nDom as well as this product ID to get\nthat special class that we just added\nabove so here we can type\ndocument. query selector brackets and\nthen inside we'll type a string and\nwe'll select the class using a DOT js-\ncart D item D container Dash and then\nwe're going to substitute the product ID\nso because we want to insert something\nin here we're going to switch this to a\ntemplate string using\nbacktick and now we can substitute this\nproduct ID into this\nstring product\nID so by creating the string like this\nwe're able to select the specific\ncontainer that we need so now let's save\nthis in a variable so we can use it\nlater so const container equals this\nresult so for now let's let's actually\nconsole.log this to see if it works\nconsole.log\ncontainer and\nsave and then we'll go back to our\nproject so just move this\nhere and then in our project if we click\ndelete on the first product and then\ncheck the console right click inspect\nand the console you can see that we're\ngetting the correct element that we\nshould delete if we go out here and\nclick this delete link and check the\nconsole you can see that this is also\ngetting us the correct element that we\nwant to\ndelete so now that we have the element\nwe want to delete the next step is to\nuse the do remove method so again every\nelement we get with the Dom has a method\ncalled do remove which will remove it\nfrom the page so if we go back into our\ncode down here all we have to do is type\nout the element\ncontainer. remove and brackets and this\nwill remove it from the page if we\nsave and try it out so we'll go in here\nwe'll click delete on the first product\nand it will remove it from the\npage if we click delete on the second\nproduct it will also remove it from the\npage so that's it now let's refresh to\nbring the products back\nand that's how we make the delete link\ninteractive and remove the products from\nthe cart as well as from the\npage so now let's save our changes into\ngit we'll go to the git\nsection and it will tell us that in\ncheckout. JS at the top we added that\nspecial class which contains the product\nID and if we scroll down to the\nbottom we created the string which will\nget us these specific element that we\nwant to remove and then we use the do\nremove method so now let's create a\nmessage to describe our\nchanges delete products from\nHTML when clicking delete and\ncommit the last thing we're going to do\nin this lesson is we're going to add\nlocal storage to our cart so if we go\nback to our\nproject if we delete some products in\nour cart and then\nrefresh notice that our cart goes back\nto what it was before and that's because\nright now if we look at our code and we\nopen cart.\nJS our cart is just a variable and\nvariables are reset when we refresh the\npage or when we go to a different page\nso again if we go back to our project\nand we go to a different Page by\nclicking the top left so on this\nhomepage we can add as many products as\nwe want to our cart and if we go back to\nthe checkout page our cart will just get\nreset to whatever it is here so that's a\nproblem with just using a variable to\nsave our cart it gets reset when we\nrefresh the page or we go to a different\npage to solve this problem we're going\nto use local storage to save our cart\nso first let's create a function for\nsaving the cart to local storage because\nwe might want to reuse this code so down\nhere let's create a function we'll call\nit save to storage brackets and curler\nbrackets and we're just going to save\nthe cart to local storage using local\nstorage do set item\nbrackets and set item takes two\nstrings the first string is the name of\nwhatever we want to save so we're going\nto save our cart so we're just going to\ncall this the cart and then the second\nstring is the data that we want to save\nso remember that local storage can only\nsave strings so to save our cart we need\nto convert it into a string first and we\ncan do that using\njson.\nstringify brackets and then inside we're\ngoing to give it the cart so this will\nconvert the cart into a string and now\nwe can save it in local storage so now\nlet's use this function whenever we\nupdate the cart we need to save it to\nlocal storage so it doesn't get reset\nwhen we refresh the page so here when we\nadd it to the cart at the bottom after\nwe update the cart we're going to use\nthat function we created above save to\nto storage and\nbrackets and also in the function remove\nfrom cart so this function is also\nupdating the cart so after we update the\ncart we're also going to save to storage\nand brackets and\nsave so now whenever we update the cart\nwe're going to save it in local\nstorage the last thing we need to do is\nat the top at the beginning of our code\nwe need to get the cart from local\nstorage instead of using this default\nvalue so let's add some new lines here\nto separate the code for a bit and here\nwe're going to get the cart from local\nstorage and we can do that using local\nstorage. get item and brackets so get\nitem takes one string and that is the\nname of what we saved earlier which is\nthe cart so we're going to to give it\nthe string\ncart so this will give us the cart that\nwe\nsaved however remember that local\nstorage can only save strings so it will\ngive us the string version of our cart\nand we need to convert it back into an\narray to convert it back to an array we\ncan use the code\njson. pars and brackets and close\nbracket the last thing we need to do is\nwhen we first use the website we might\nnot have a cart in local storage so if\nwe don't have a cart saved local storage\nwill give us null so in this situation\nif this value is null we want to give\nthe cart a default value which is this\nvalue below so to give the cart a\ndefault value if it's empty we can use\nan if statement by typing if brackets\nand curly brackets and then here we can\ncheck if not\ncart so if we don't have a cart in local\nstorage this will give us\nnull in this case not null will become\ntruthy and we're going to run the code\nin this if\nstatement so if the cart is empty we're\ngoing to make the cart equal this\ndefault value below so let's just select\nthis code and we'll right click cut and\nthen in here right click and\npaste and remove the extra line and\nsave so now if the cart is empty we just\ngive it a default value if we go back to\nour project and try out our code so\nlet's delete the first product and\nrefresh the page notice that the cart\ngets saved and the first product remains\ndeleted if we go to the homepage and we\nadd some new products\nand then go to our\ncart notice that our cart is saved\nbetween pages so by using local storage\nwe can save our cart even when we\nrefresh the page or go between different\npages so that's all we're going to build\nin this lesson so to clean up let's\ndelete all these products in the\ncart and then go to the\nhomepage and we'll add back two socks\nand one basketball which which is the\ndefault value of the\ncart let's go back to the checkout\npage and now we're done with this part\nof the page so finally let's save our\nchanges into git we'll go to the git\nsection and it will tell us that inside\ncart. JS we're now loading the cart from\nlocal storage when we open the page if\nthe cart doesn't exist we're going to\ngive it a default value and we created a\nfunction to save the cart into local\nstore\nstage so now let's add a message to\ndescribe our\nchanges save cart in local storage and\ncommit and that's the end of this lesson\nin this lesson we learned about modules\nwhich is a better way to organize our\ncode we created the checkout page in our\nfinal project we learned about HTML link\nelements and radio selectors we made the\ndelete link interactive and we saved the\ncart in local\nstorage here are some exercises to help\nyou practice what we learned in this\nlesson e\nin this lesson we're going to learn\nabout external libraries and we're going\nto finish the checkout page in our final\nproject an external library is basically\njust code that is outside of our\nproject so far we've only been using\nCode that is inside our project like\nthese\nfiles well a lot of developers write\nJavaScript code and then put their code\non the internet and we can actually load\ntheir code from the internet into our\nproject and use it we call this code an\nexternal library because it's code that\nis outside of our project Let's do an\nexample and load our first external\nLibrary we're going to go to the video\ndescription and we're going to click\nthis\nlink for the hello external Library\nand it will open up a page that contains\nJavaScript code so I actually wrote this\ncode myself and you'll notice that this\nis just normal JavaScript code we create\na function called hello and it just\nconsole.log hello so this is called an\nexternal Library it's code that is\noutside of our project so the cool thing\nis we can actually load this code from\nthe internet into our project so let's\ngive that a try we're going to go to our\nproject and we're going to open\ncheckout.\nHTML and we're going to scroll to the\nbottom and above the script tag we're\ngoing to add another script tag to load\nsome code so\nscript and we'll give it a source\nattribute and then in here instead of\nusing a fth like we've done before we're\ngoing to give this a a URL of a website\nthat contains JavaScript code so if we\ngo back to our\nbrowser and here the URL of this page is\nup here so we're just going to copy this\nright click copy and then paste it into\nour\ncode right click and\npaste so now the computer will get all\nthe JavaScript code from this URL or\nfrom this\npage so it's going to get all the code\nfrom this page and load it into our\nproject like normal code so let's save\nand let's give this a\ntry so this code creates a function\ncalled hello so let's try running this\nhello function in our project we'll go\nto checkout. JS and then scroll to the\ntop and then here let's just run the\nfunction hello so hello and brackets and\nSave\nnow if we go back to our\nproject go to the checkout page and\ncheck the console right click inspect\nand the console you'll see that it\ndisplayed the message\nhello so that's how an external Library\nworks it's just code that is outside of\nour project and we can load this code\nusing a script tag like this we just\ngive it the URL of where this code is\nlocated\nso there's two things you might be\nwondering about how come we put the\nscript tag at the top so generally we\nload external libraries first and then\nwe can use the library in our own code\nbelow and the second thing is how do you\nput code on the internet like this to\nlearn this you can check out my video on\nhow to put a website on the internet\nit'll show you how to put any file like\nHTML CSS and JavaScript files onto a\nwebsite like this\nthis next let's talk about why we use\nexternal libraries external libraries\nlet us share code instead of writing all\nthe code ourselves we can use code that\nother people wrote and this helps us\nsave time and avoid duplicating work\nright now we're loading a very simple\nLibrary so let's load a more complex\nlibrary to show how we can save a lot of\ntime and work let's go back to our\nproject and go to the checkout\npage here we have a section for choosing\na delivery option for this product and\nyou'll notice that each option has a\ndate so this is the date that the\nproduct should be delivered by so the\nway this works is that the cheapest\noption here takes 7 days to deliver the\n$4.99 option takes 3 days to deliver and\nthe\n$9.99 option takes one day to deliver so\nto get these dates here we need to do\nthree things first we need to somehow\nget today's date in our JavaScript\nnumber two we need to do calculations\nwith the date such as ADD seven days or\nadd 3 days and number three we need to\ndisplay the date in an easyto read\nformat like\nthis now we could try to figure out how\nto do this ourselves by writing our own\ncode but this is going to be a lot of\nwork instead we can use an external\nLibrary to help us work with dates so in\nthis project we're going to use an\nexternal Library called DJs this is a\npopular library that helps us work with\ndates so first let's load DJs into our\nproject we're going to go to the video\ndescription and we'll click this\nlink for the DJs external Library\nand when the page opens you'll see a\nbunch of random code here now you might\nthink that this is some special code but\nthis is actually just regular JavaScript\ncode that has been compressed so\nbasically all the extra spaces have been\nremoved and the variable names have been\nshortened to one\nletter we can press JavaScript code like\nthis because we need to load this code\nfrom the internet into our project by\ncompressing it it makes this code\nsmaller so it will load into our project\nfaster so this compression process is\ncalled minification or we Minify the\ncode okay so this is the code for the\nexternal Library DJs now let's load this\ncode into our project we'll go back to\nour\ncode and then go to checkout.\nHTML and then here we're going to add\nanother script tag less than script and\nthe source\nattribute and then here we're going to\ngive it the URL of the code we want to\nload so let's go back to the code for\nDJs and then up here we're going to\nrightclick and copy this\nURL and then inside our code in the\nsource attribute we're going to\nrightclick and paste the\nURL and\nsave so again this will take all the\ncode that's located on this page and\nthen load it into our\nproject now let's give it a try the DJs\nexternal Library creates a function\ncalled\nDJs so we'll go to checkout. JS and then\nat the top we're going to run the JJs\nfunction and\nbrackets now make sure this is all\nlowercase cuz that's the name that the\nlibrary used so now let's actually\nconsole.log the result of this function\nconsole.log\nand\nsave and we'll go back to our project in\nthe checkout page we're going to check\nour\nconsole and you'll see that the DJs\nfunction gives us an object and this\nobject represents the current date and\ntime so we know that DJs is working and\nthat's it we successfully loaded the DJs\nexternal Library into our\nproject now let's learn how to use\nDJs external libraries usually have a\ndocumentation page that shows us how to\nuse the library we can find the\ndocumentation Page by searching on\nGoogle the library name like DJs and\nthen documentation or we can ask an AI\ntool how to use the library to make\nthings easier in this video I'm going to\nshow you the features that we need and\nyou can go through the documentation\nlater if you want so earlier we said we\nneeded to do three things with the date\nfirst we want to get today's date number\ntwo we want to do calculations with the\ndate and number three we want to display\nthe date in an easyto read format DJs\nhelps us do all of these things so first\nlet's use DJs to get today's date\naccording to the documentation to get\nthe current date and time we can just\nuse the DJs function like\nthis so if we go back to our code\nand that's what we have here we call DJs\nand it gives us an object that\nrepresents the current date and time the\nsecond thing we need to do is to do\ncalculations with the date so for the\ndelivery options here we need to\ncalculate today's date plus 7 days or\ntoday's date plus 3 days so again the\nDJs Library can help us do\nthis so let's go back to our\nconsole and look at the object that we\nget back from DJs so this object\nrepresents today's date and time and\nthis object also has a method called add\nwhich adds a certain amount of time to\nthis date so this is what we need for\nthe project to calculate these dates\nhere let's go to our\ncode and first let's save this result in\na variable so we're going to remove this\nand create a variable const today\nequals\nDJs and then down here we're going to\nuse the add method so we'll type\ntoday. add and\nbrackets now the add method takes two\nparameters the first one is the number\nof time that we want to add so if we\nwant to add seven days we're going to\ntype seven and then the second parameter\nis the length of time that we want to\nadd so if we want to add seven days\nwe're going to give it a string days so\nthis will add seven days to today's\ndate so let's save this result in a\nvariable const delivery date equals this\nresult and we'll console.log it to make\nsure it's working correctly\nconsole.log the delivery date and\nsave now if we go back to our project\nand open the\nconsole it will give us an object that\nrepresents 7 days after to date or 7\ndays after when you're watching this\nvideo so that's how we use DJs to do\ncalculations with the date it gives us\nmethods like add to add a certain amount\nof time to the date finally we're going\nto use DJs to display this date in an\neasyto read format like\nthis so according to the document\nthis date object has another method\ncalled format which will display the\ndate in an easyto read format so let's\ngo back to our\ncode and we'll remove the\nconsole.log and we'll type delivery\ndate.\nformat and then inside these brackets\nwe're going to give this method a string\nso this string tells DJs what kind kind\nof format we want for the date so in the\ndocumentation it has a table showing us\nsome special characters we can put into\nthis string for example if we want to\nshow the day of the week like Monday or\nTuesday we can type four D's into the\nstring and this will give us a string\nwhere this text is replaced by the\nactual day of the\nweek if we want to add a comma and a\nspace to this format we can just add a\ncomma and space and this will show up\ndirectly in the result now let's say\nthat after this we want to show the\nmonth according to the documentation to\nshow the month we can type for Capital\nM's and it will replace this with the\nmonth and finally we'll type a space and\naccording to the documentation if we\nwant to insert the day of the month into\nthe string we can type a capital D\nso this method takes this date and\nconverts it into a string with this\nformat so now let's console.log this to\nsee what it looks like well\nconsole.log and\nbrackets and\nsave and then go into our project and\nopen the\nconsole and now you should see the date\n7 days after today but displayed in an\neasyto read format\nso that's how we use the DJs external\nlibrary to help us work with dates and\nas you can see it saves us a lot of time\nand work we don't have to figure out how\nto work with dates ourselves we can just\nuse someone else's code to solve this\nproblem so a best practice in\nprogramming is when we need to do\nsomething complicated try to find an\nexternal Library first before writing\nthe code\nourselves to find external libraries we\ncan you can search in Google JavaScript\nand then what kind of Library we're\nlooking for like date\nLibrary we can also use an AI tool to\nhelp us find external\nlibraries next we're going to learn how\nto use external libraries and JavaScript\nmodules together right now if we look at\nour code and go to checkout.\nHTML we're loading these libraries using\nscript tags the problem with script tags\nis that it runs this code directly on\nthe page and this might cause naming\nconflicts for example the hello Library\ncreates a function called hello so if\nsomething else is called hello in any of\nour other code it might cause a naming\nconflict a better way to load external\nlibraries is to use JavaScript modules\nbecause a module will contain this code\ninside a file and any variables that are\ncreated inside inside the file will not\nconflict with anything outside of the\nfile to use external libraries and\nJavaScript modules together we're going\nto use a special version of the library\ncalled an esm version esm stands for\necmascript modules ecmascript is just\nanother name for JavaScript so the esm\nversion of a library is just a version\nthat works with JavaScript\nmodules so let's do an example we're\ngoing to go to the video description and\nwe're going to open the esm version of\nhello.js so you can see that it's the\nexact same code as before we're creating\na function called hello except this time\nI just added the word export in front of\nfunction so this turns the library into\nan esm version and now it will work with\nJavaScript modules so let's use the esm\nversion in our code we're going to go\nback to our\ncode and we're not going to use script\ntags to load this anymore so let's\ndelete\nthis and\nsave and then in checkout. JS at the top\nwe're going to use an import to import\nthis function into our code so we'll\ntype import curly brackets we'll import\nthe function\nhello and we're going to import it from\na string and then this time instead of\ngiving it a file path like before we're\ngoing to give it a URL that contains our\ncode so on the web page we're going to\nrightclick and copy the URL at the top\nand then inside our code in here we're\ngoing to rightclick and\npaste so this import works the same way\nas before before except now the codee is\ncoming from the internet rather than one\nof our files so let's\nsave and then go back to our project and\ncheck the\nconsole and you can see that everything\nis still\nworking so that's how we use external\nlibraries and JavaScript modules\ntogether we just load the esm version of\nthe library and we use import as normal\nexcept this time we're importing from\ncode that is on the\ninternet next let's use DJs with\nJavaScript modules to do that we're\ngoing to load the esm version of DJs so\nwe're going to go to the video\ndescription and click this link for the\nDJs esm\nversion and now we're going to load this\ncode into our project so let's go back\ninto our codee and first let's open\ncheckout.\nHTML and we're going to remove this\nscript tag because we're going to load\nthis with JavaScript modules so let's\nsave and then go into checkout. JS and\nthen at the top we're going to import\nfrom the DJs esm version so we'll\nimport and we're going to use a slightly\ndifferent syntax we're just going to\ntype\nDJs without the curly brackets and then\nwe'll type from a\nstring and we're going to give it the\nURL that contains the code so we'll go\nto our\nbrowser and then click the URL at the\ntop we're going to right click\ncopy and then in our code inside these\nquotes rightclick and\npaste and\nsave so now let's open our project and\ntake a look at the the console to make\nsure it works so we'll right click\ninspect the\nconsole and everything is still working\nso that's how we use the DJs external\nlibrary with JavaScript modules so\nbefore we continue we're going to learn\nabout this new syntax that we used here\nso this syntax is called a default\nexport a default export is another way\nof exporting something from a file we\ncan use it when we only want to export\none thing from a file and it makes the\nsyntax a little bit cleaner because we\ndon't have to type the curly brackets so\nlet's do an example of a default export\nto see how it works we're going to open\nthe utils folder and open money.\nJS and at the bottom we're going to\ncreate a default export by typing\nexport default and then whatever we want\nto export so let's say we want to export\nthis function here so we just type the\nname of the function format\ncurrency and\nsave and now when we import this we can\njust import the name without the curly\nbrackets so the syntax is a little bit\ncleaner now each file can only have one\ndefault export so if we only want to\nexport one thing from a file this is\nanother syntax that we can\nuse so some people like using default\nexports because they feel that exporting\nonly one thing from a file makes the\ncode cleaner however in your own code\nit's up to you which version of export\nyou want to\nuse let's go back to checkout.\nJS and then here the DJs Library only\nexports one thing which is the DJs\nfunction so they chose to use a default\nexport instead of a normal export that\nwe were using before\nby the way the syntax up here with the\ncurly brackets is called a named\nexport so when we use external libraries\nin the future some libraries will use\nnamed exports like this and other\nlibraries will use a default export like\nthis so it's useful to know both\nsyntaxes so that's how we use external\nlibraries and JavaScript modules\ntogether we just import from the esm\nversion of the library now keep in mind\nthat not every library has an esm\nversion so for some libraries we still\nhave to use a script\ntag okay now that we learned external\nlibraries let's do some practical\nexamples we're going to go back to the\ncheckout page and we're going to use DJs\nto create the delivery options here so\nthe way this works is that we can select\none of three delivery options when we\nclick an option it should change the\ndelivery date up here and it should\nchange the prices on the right side so\nlet's get started as always we're going\nto do three steps first we're going to\nsave the data and then we're going to\ngenerate the HTML and finally we're\ngoing to make it interactive so first\nwhat data do we need to save for this\nsection well each delivery option has a\ndelivery time like 7 days or 3 days and\neach option also has a\nprice so right now here's what our cart\nlooks like now we could save the\ndelivery option details inside the cart\nlike this however notice that this data\ngets duplicated for each product in the\ncart instead we're going to save the\ndelivery options\nseparately and then just save an ID that\npoints to the delivery\noption as a reminder this technique is\ncalled normalizing the data we save the\ndelivery options separately and then we\njust save an ID\nthat points to the full delivery\noption so let's create the data for the\ndelivery options we'll go into our code\nand then in the data folder let's create\na new file for this and we're going to\nname this file delivery options. JS and\npress\nenter and in here we'll create a list of\ndelivery options that we can pick from\nwe'll create a variable const delivery\noptions equals and array because we want\na list and then each delivery option is\ngoing to have multiple values like the\ntime to deliver as well as the price so\nwe're going to make each of them an\nobject to group these values together so\nI'm going to rearrange my windows here\nso that we can see the data that we're\ntrying to save and we can actually close\nthese tabs for now\nso here let's save the data for the\nfirst delivery\noption first let's give it an ID\nproperty because as we mentioned we're\ngoing to save the ID in the cart and\nthen we're going to use that ID to get\nthe full delivery option here so to keep\nthings simple let's just give it a\nstring and an ID of\none and then we're going to give it\nanother property and we're going to save\nthe delivery time so for the first\noption it's going to take seven days to\ndeliver so let's create a property\ndelivery days colon 7 and comma and\nwe're also going to save the price so\nthis one is free so we're going to save\nthe price cents and zero remember that a\nbest practice when calculating money is\nto save it in\ncents and next let's save the data for\nthe second delivery option here we'll\ntype a comma and another object and\nlet's give it an ID of two this time and\nthis one is going to take three days to\ndeliver so we'll type delivery days\ncolon 3 and we'll give it a price cents\nand this one is\n$4.99 so\n$4.99 and then finally we're going to\nsave the data for the third delivery\noption comma another object ID of three\nand this one is going to take one day to\ndeliver so we'll type delivery days\ncolon 1 comma and the price sense is\n$9.99 so price sense 999 and\nsave so now that we've created our\ndelivery options for each product in the\ncart we're going to save the ID of the\ndelivery option that's selected so for\nexample here we selected the first First\nOption we're going to save an ID of one\nin our cart so let's go back into our\ncode and we're going to open the\ncart so here in the default cart we're\ngoing to save the delivery option ID\ncolon and let's say that the first\nproduct selected the first delivery\noption so we're going to save the ID one\nand then for the second product we're\nalso going to save a delivery option ID\ncolon and then let's say that for the\nsecond product we chose the second\ndelivery option here so here we're going\nto give it an ID of\ntwo next when we add a product to the\ncart we also need to give it a delivery\noption ID so if we scroll down to the\nadd to cart function here we're adding a\nproduct to the cart so when we add a new\nproduct we also want to give it a\ndelivery option ID so we'll type\ndelivery option ID colon and for new\nproducts let's give it a default\ndelivery option of one so for new\nproducts to select the first one and now\nlet's\nsave and lastly we might have a cart\nthat is saved in local storage so we'll\nneed to add the delivery option ID to\nlocal storage as well but to keep things\nsimple let's just do a shortcut we're\ngoing to delete the cart in local\nstorage and then it will go back to\nusing this default value which has the\ndelivery option\nIDs so to delete the cart from local\nstorage we're going to go into our page\nand open the console right click\ninspect the\nconsole and we're going to type local\nstorage. remove item brackets and the\ncart and press\nenter so this will erase the cart from\nlocal storage and it will use those\ndefault values so now let's go to our\npage and\nrefresh and it should be using the\ndefault cart so that's how we save the\ndata for the delivery\noptions by the way in the rest of this\ncourse if you get an error in your\nproject but your code looks correct you\nmay have some bad data saved in local\nstorage to fix this you can try running\nlocal storage. CLE in your console to\nremove everything from local\nstorage and then refresh the\npage the next step is to generate the\nHTML first let's find the HTML for the\ndelivery options here to do that we can\nrightclick this part of the page and\ninspect\nand this will give us the HTML for this\npart so we're going to find the element\nthat represents this part of the page\nand that's this one right here it's a\ndiv with the class delivery Das options\nand to find this in our code we're going\nto search for this class so let's go\nback to our\ncode and then we're going to open\ncheckout. JS which is right\nhere and we'll press crlf or command F\nto find code and we're going to look for\nthe class delivery Das\noptions and it will give us this code\nright here so this is the HTML for the\ndelivery\noptions so now instead of writing this\nHTML directly we're going to generate\nthis with\nJavaScript to keep our code organized\nlet's create a function for generating\nthis\nHTML we'll scroll to the\nbottom and then here we'll create a\nfunction and let's call it delivery\noptions\nHTML brackets and curly\nbrackets and now inside here we're going\nto do three steps first we're going to\nLoop through the delivery options we\ncreated earlier and then for each option\nwe're going to generate some HTML and\nthen finally we're going to combine all\nthe HTML together so first let's import\nthe delivery options at the top so we'll\nscroll up and we're going to\nimport curly brackets from quotes and\nwe're going to locate the delivery\noptions file which is inside the data\nfolder so first we need to get out of\nthe scripts folder we'll type dot do\nslash and then go into the data folder\nslash delivery options. JS and we're\ngoing to import the delivery\noptions now one thing I forgot to do is\nthat inside these delivery options we\nneed to make sure that we export this\nvariable so we're going to type export\nand\nsave and we'll go back to checkout. JS\nand then here we're going to Loop\nthrough the delivery options below so\nwe'll scroll back\ndown to this new\nfunction and type delivery options. for\neach brackets and a function\ninside and we'll name the parameter\ndelivery\noption so for each delivery option we're\ngoing to generate some HTML so let's use\na template string to save the\nHTML and then we're going to scroll up\nand we're going to find the class\ndelivery Das option so this is the HTML\nfor one delivery option so we're just\ngoing to copy this HTML into our Java\nJavaScript below so we'll right click\ncopy and then down here inside the\nstring give some new lines and\nrightclick and\npaste and if we need to reformat we can\nselect these lines and press\ntab okay now when we're generating the\nHTML instead of using the same date\nevery time we're going to calculate the\ndate using DJs and then insert it into\nhere to calculate the date we're going\nto get today's date first using\nDJs so up here let's create a variable\nconst today\nequals and according to the\ndocumentation to get today's date we can\njust call the DJs function so we'll type\nDJs and\nbrackets next\neach delivery option takes a certain\namount of days to deliver so we need to\nadd that to today's date to do that we\nhave a method called add So Below this\nlet's create a variable to save the\nresult const delivery date\nequals\ntoday. add\nbrackets and we're going to give it two\nparameters the first parameter is how\nmany dat days we want to add and this is\nsaved in the delivery option so here\nwe'll give it the delivery option dot\ndelivery days\ncomma and then we'll give it the length\nof time we want to add which is a string\ndays now that we calculated the correct\ndelivery date we need to display it in\nan easyto read format and again DJs has\na method called format that Let's us do\nthis so below let's create a variable\nconst and we'll call it date string and\nmake it equal to delivery\ndate.\nformat brackets and will give it a\nstring so the format we want is we want\nto insert the day of the week so\naccording to the documentation we can\nuse\n4ds and then a comma and a space and\nthen we want to insert the month and\naccording to the documentation that's 4\nCapital\nM's and finally we're going to insert\nthe day of month which is capital\nD so now that we calculated this date\nstring we're going to insert it into the\nHTML instead of using the same date\nevery time so we'll remove this and then\ninsert the date\nstring next let's insert the price\nbecause it's going to be different\nprices every time so at the\ntop let's create a variable const and\nwe'll call it price string and make it\nequals and remember each delivery option\nhas a property price sense so if the\nprice ense is zero we want to display\nthe text free if the price sense is not\nzero we want to display the price as\ndollars with a\ndash so to do that let's practice using\na Turner operator so first we'll check\nif the price sense is zero so we'll type\ndelivery option. price sense is triple\nequals to\nZ and then we'll type a new line and\nquestion mark and also a new line and\ncolon so remember the way that a Turner\noperator works is that if the first part\nreturns true the value is whatever is\nafter this question Mark if the first\npart is false then the value is whatever\nis after the colon so it's sort of like\nan if statement except we can save the\nresult in a\nvariable so if the price sense is zero\nthat means it's free so we want to\ndisplay the text free so we'll create a\nstring\nfree and if the price sense is not zero\nwe want to display the price as dollars\nso here we're going to type a template\nstring a dollar sign and we're going to\ninsert the price sents as\ndollars so here we'll type delivery\noption. price sense and to display this\nas dollars we already have a function\nfor this called format currency so at\nthe front we're just going to type\nformat\ncurrency Open Bracket and close\nbracket and then at the end let's add a\ndash so here we'll add space and dash\nand\nsemicolon so that's how we create the\nprice string for each delivery option so\nnow let's substitute this into the HTML\nso we'll remove this and substitute the\nprice string and\nsave so now instead of using these same\nvalues every time we're substituting the\nvalues in into the\nHTML finally let's combine all this HTML\ntogether so we're going to scroll up to\nthe top and outside of this loop we're\ngoing to create a variable to save the\nresult so let HTML equals empty string\nto start and then every time we Loop\nthrough we're going to add this HTML to\nthis result so here we're going to type\nHTML plus\nequals and finally after we've created\nthis HTML we're going to return it from\nthis function so at the bottom we're\njust going to return the\nHTML and\nsave now that we generated the HTML for\nthe delivery options let's insert this\ninto the HTML\nabove so instead of creating this HTML\ndirectly we're going to delete it\nand then here we're going to insert and\nwe're going to run this function to\ngenerate it so here we're going to type\ndelivery options HTML and\nbrackets now before we save one thing\nthat we're missing in this function is\nthat if we scroll down here we're using\na variable called matching product but\nthis variable is not accessible inside\nthis function so let's actually pass the\nmatching product into here so at the top\nwe're going to add a parameter matching\nproduct and then when we call this\nfunction up here we're going to pass in\nthe matching product so matching product\nso now let's\nsave and check our page and now we're\ngenerating the HTML for these delivery\noptions and you'll notice that your\ndelivery dates here will be based on\ntoday's date or when you're watching\nthis video so this will be 7 days after\ntoday or 7 days after when you're\nwatching this video this will be 3 days\nafter today or 3 days after when you're\nwatching this video and this will be one\nday after\ntoday now one thing we need to fix here\nis that these selectors are empty\nhowever we want the delivery option that\nis saved in the cart to be checked to do\nthat let's go back to our\ncode and in order to make one of these\nselectors selected we're going to scroll\ndown to the input\nelement and we're going to add an\nattribute called\nchecked and this attribute makes a\nselector\nchecked however we don't want all of\nthese delivery options to be checked we\nonly want it to be checked if it matches\nthe delivery option ID that is saved in\nthe cart so let's write some code up\nhere to figure out which delivery option\nshould be checked we're going to create\na variable const is\nchecked\nequals and we only want it to be checked\nif this delivery options ID matches the\ndelivery option ID in the cart so we'll\ntest if delivery option. ID is equal to\nthe cart item\ndo delivery option\nID now inside this function we actually\ndon't have access to cart item so let's\nactually pass it in as a parameter cart\nitem up here and then when we call the\nfunction this outer function has access\nto the cart item so we're going to give\nit the cart item so we're going to put\nit into this function and then we can\nuse it down here\nso now that we have this\nvariable instead of being checked all\nthe time we're going to remove this and\ninsert and we're going to use a tary\noperator here is\nchecked question mark and colon so we\ncan also use a ternary operator when\nwe're inserting into a string so again\nif this is true it's going to get the\nvalue after the question mark So if it\nis checked we're going to give it the\nvalue\nchecked if this is false we're going to\ngive it the value of empty string so\nit's the same thing as if this attribute\ndidn't exist so now if we\nsave you'll notice that the correct\ndelivery option is checked for each\nproduct the first product we saved\ndelivery option one and the second\nproduct we say delivery option\ntwo finally let's replace this date at\nthe top with the delivery date that we\nselected\nhere we'll go back to our\ncode and we'll scroll to the\ntop until we see this date in our code\nhere so now we're going to calculate\nthis date using the delivery option that\nwe picked so remember that inside the\ncart we only saved the delivery option\nID so let's use this to get the full\ndelivery\noption so at the top here let's get the\ndelivery option ID out of the cart const\ndelivery option ID equals cart item.\ndelivery option\nID next we're going to use this ID to\nfind the full delivery option now we did\nsomething similar with the product ID we\nLoop through the products found a\nmatching ID and then saved it in a\nvariable up here so we'll do the same\nlet's create a variable to store the\nresult let\ndelivery option and then we're going to\nLoop through the delivery options so\ndelivery options. for each brackets and\na\nfunction and let's name the parameter\noption because we use the name delivery\noption up here so in here we're going to\nlook for a matching ID so if this option\nID is equal to the delivery option ID\nhere we're going to save this inside\nthis variable so delivery option equals\noption so now we have the full delivery\noption in our code and we can use it to\nget the delivery days property and then\ncalculate the day that we need\nhere to calculate this state we already\nwrote some code for this at the bottom\nif we scroll down in our\ncode when we created the delivery\noptions we calculated the date for each\ndelivery option so we can reuse this\ncode above so let's select this code and\nthen right\nclick\ncopy and then at the\ntop after we get the delivery option\nwe're just going to rightclick and paste\nthat code again\nand if we need to we can reformat by\nselecting these lines and press shift\ntab so this code will take the delivery\noption that we selected and calculate\nthe delivery date that we need to show\ndown here and now instead of using the\nsame date every time we're going to\nremove this and insert the date string\nthat we created Above So date string and\nsave so now this date string up here\nwill match the delivery date that we\nchose on the right side so that's how we\ngenerate the HTML for the delivery\noptions using the DJs external Library\nso now let's take a look at our changes\nin git we'll go to our code and open the\ngit\nsection and here it'll tell us in cart.\nJS we added delivery option IDs to the\ncart\nas well as when we add to the\ncart and then in this file we created\nthe list of delivery\noptions and in checkout. JS instead of\nwriting this HTML directly we generated\nit and then in money. JS we learned\nabout default exports so let's type a\nmessage to describe our changes save\ndata and generate HTML for for delivery\noptions and\ncommit the last step is to make it\ninteractive so when we click a delivery\noption we need to do two things first we\nneed to update the delivery option ID in\nthe cart array and number two we need to\nupdate the page so we need to update\nthis date here to match the date that we\nselect\nlet's start with the first step let's\ncreate a function for updating the\ndelivery option in the cart we're going\nto go to our\ncode and we're going to open the file\ncalled cart.\nJS so because we're modifying the cart a\nbest practice is to put the code inside\nthis file this file should contain all\nthe code that manages the cart so we're\ngoing to scroll down to the bottom and\nwe're going to add a new function so\nlet's type function and let's name it\nupdate\ndelivery option brackets and curly\nbrackets so when we update a delivery\noption we need to know the product that\nwe want to update as well as the\ndelivery option that we chose so we're\ngoing to need two things for this\nfunction the product ID and the delivery\noption\nID so the steps to do this is first\nwe're going to Loop through the cart and\nfind the product and then we're going to\nupdate the delivery option ID of that\nproduct so to find the product using the\nproduct ID we already have some code for\nthis if we scroll up to the add to cart\nfunction we have this code which takes a\nproduct ID and finds the matching\nproduct in the cart so let's just make a\ncopy of this code we're going to select\nit right click\ncopy and then paste it into our new\nfunction so down here right click and\npaste so this will give us the card item\nthat matches this product ID and save it\nin this\nvariable next each card item has a\nproperty called delivery option ID so\nwe're just going to update that property\nso down here we can just type the code\nmatching item. delivery op option ID and\nmake it equal to the delivery option ID\nthat we give to this function so\ndelivery option\nID and lastly because we updated the\ncart we should save it to local\nstorage so we can use this function we\ncreated earlier save to\nstorage and brackets now let's\nsave now that we have this function\nlet's use it on the checkout page so\nfirst let's export it so we can use this\nin another file we're going to export\nthis\nfunction and\nsave and then open checkout.\nJS and then in our project we need to\nadd event listeners to each of these\ndelivery options so we run some code\nwhen we click them so inside our code\nhere we're going to scroll to the HTML\nfor each delivery option which is right\nhere and then we're going to add a class\nso we can select it using the Dom js-\ndelivery D option and then we'll add an\nevent listener to these so we'll scroll\ndown and down here we'll add the event\nlistener using\ndocument. query selector all brackets\nand a string will'll select that class\nwe just created using dot js- delivery D\noption\nand then dot for each brackets and a\nfunction so for each option we're going\nto add an event listener and listen for\nclicks so let's just call each of the\noptions an\nelement so for each of these elements\nwe're going to element.\naddevent listener brackets and we're\ngoing to listen for clicks comma and\nwe're going to run this function when we\nclick\nit so as we said the first thing we'll\ndo is to update the delivery option ID\nin the cart so now let's import that\nfunction that we created earlier we're\ngoing to scroll to the\ntop and we're already importing from the\ncart so to import something else we're\ngoing to add a comma and we're going to\nimport that function update delivery\noption so now let's scroll back down and\nuse use it in our\ncode so here when we click a delivery\noption we're going to update delivery\noption brackets now we said we need to\ngive this function two things the\nproduct ID that we want to updated for\nas well as the delivery option ID that\nwe picked but how do we get these two\nvalues and the answer is if we scroll\nup here here we have access to the\nproduct ID and we also have access to\nthe delivery option\nID so we can use data attributes to\nattach it to this element\nhere so let's create a data attribute\ndata-\nproduct-id equals double quotes and\ninsert the product ID which is matching\nproduct. ID and we're also going to use\na data attribute for the delivery option\ndata- delivery D option- ID equals\ndouble\nquotes and we're going to insert the\ndelivery option here so delivery\noption. and\nsave next let's scroll back\ndown and then here we're going to get\nthose values out of the the data\nattributes by using const and let's use\nthe shorthand property here for practice\ncurly brackets equals the element. data\nset and then out of the data attributes\nwe're going to get the product ID comma\nas well as the delivery option\nID as a reminder this is a shorthand\nproperty it does the same thing as the\ncode down here but it's just a\nshortcut now let's\nsave and try out the project we'll go\nback and here if we click the second\ndelivery option and then refresh the\npage you'll notice that now this one is\nchecked and the date here is\ncorrect so that's how we make the\nsection interactive we just update the\ncart and then when we refresh the page\nit will regenerate the HTML based on the\nnew cart\nnow let's save our code into git we'll\ngo back and open the git\nsection and then it will tell us in\ncart. JS we added this function for\nupdating the delivery\noption and in checkout. JS we imported\nthat function and then at the bottom we\nadded some event listeners and data\nattributes and we use that function to\nupdate the\ncard now let's add a message describe\ndescribing our changes make delivery\noptions\ninteractive and\ncommit next when we select a delivery\noption we need to update the\npage so right now in our project when we\nclick a delivery option we need to\nrefresh the page for the text to be\nupdated so what we're going to work on\nnow is when we click this we want the\npage to update\nimmediately so far in this course the\nway we solve this problem is once we\nclick this we're going to use a Dom to\nget this element here and then update\nthe text\ndirectly however the problem with this\napproach is that we need to update the\npage one by one and later there might be\nlots of places on the page that we need\nto update for example when we change a\ndelivery option we also need to change\nthe numbers here on the right so there's\npotentially a lot of things that we need\nto update one by one and it's easy to\nmake a mistake or forget something so\nnow we're going to learn a better way to\nupdate the page we'll go back to our\ncode and let's open checkout. JS\nagain and notice if we scroll\nup here we already have all of this code\nthat takes our data and generates the\nHTML so another way to update the page\nis after we update our data we just need\nto rerun all this code and regenerate\nall this HTML so let's give this a try\nfirst we're going to put all of this\ncode inside a function so we can rerun\nit we're going to scroll to the\ntop and let's put this in a function by\ntyping function and let's call call it\nrender order summary brackets and curly\nbrackets so the word render just means\nto display on the\npage and we're going to call this\nsection the order\nsummary so this function should display\nthe order summary on the page next we're\ngoing to put all of this code inside our\nnew function so let's just remove this\ncurly bracket\nhere and let's actually select all of\nthis code and we're just going to\nreformat it by pressing Tab and adding\nan indent and then at the end we're\ngoing to add back that closed curly\nbracket to finish the\nfunction so all we did was we put all of\nour code inside a\nfunction and then at the bottom let's\nrun this function because we still need\nto run all this code at the start of our\npage so we're going to type render the\norder summary\nand brackets so this shouldn't change\nanything because we're just running the\nsame code but now it's just in a\nfunction let's save and\ncheck and everything's still working so\nthat's good so now let's go back into\nour\ncode and this time to update the page\ninstead of using the Dom to update the\npage directly like we did up here we're\njust going to rerun all of this code and\nregenerate all the HTML\nso after we update the data we're going\nto rerun the code using render order\nsummary and\nbrackets now let's\nsave and try it\nout so here let's say we start off with\nthe first delivery option if we click\nthe third delivery option you'll notice\nthat the date up here updates\nautomatically if we click the second\ndelivery option it updates automatically\nas well\nso that's a better way to keep the page\nup to dat instead of using the Dom and\nchanging the HTML directly one by one we\njust update the data and then regenerate\nall of this\nHTML so let's go back into our code and\nthere's two things that I want to point\nout here so notice that we put our event\nlisteners into this big function and\nthat's because when we're regenerating\nall the HTML we're essentially deleting\nthe previous HTML and replacing it so we\nneed to add the event listeners again\nand the second thing I want to point out\nis that inside the render order summary\nfunction we can call render order\nsummary\nagain so a function can actually call\nitself or rerun itself and this feature\nis called recursion it's useful when a\nfunction needs to rerun all of its code\nso now let's save our changes into git\nwe'll open the git section and it will\ntell us in checkout. JS we basically\nmoved all of our code into this function\nand then at the bottom we call the\nfunction at the start of the page and we\nalso call the function when we select a\ndelivery option so now let's add a\nmessage describing our\nchanges\nregenerate\nHTML when updating\ndelivery option and\ncommit so the technique we just used\nwhere we update the data and then\nregenerate all the HTML this technique\nis called\nMVC MVC stands for model view controller\nand is a popular technique in software\nengineering in MVC we split our code\ninto three parts the first part is the\nmodel this is all the code that saves\nand manages the\ndata so in our project all the code in\nthis data folder is called the model\nbecause this code saves and manages our\ndata the second part of MVC is the view\nthis is code that takes the data and\ndisplays it on the page so in our\nproject if we open checkout. JS and\nscroll to the top here we have code that\ntakes our data and then generates all\nthe HTML so this code is called the\nview the last part of MVC is the\ncontroller so this runs some code when\nwe interact with the\npage so in our project at the\nbottom these event listeners here would\nbe called the controller because they do\nsomething when we interact with the page\nor with the\nview so in MVC we divide our code Lo\ninto these three parts and then they\ninteract with each other in a\nloop first we use the model to generate\nthe\nview so in our code that's what we did\nhere we took the model or the data which\nis our cart and then we generated the\nHTML or the view then when we interact\nwith the view it will run the\ncontroller so that's what we did at the\nbottom here\nwhen we interact with the page we run\nsome\ncode then the controller will update the\nmodel so that's what we did here inside\nthe controller we just updated our data\nusing this\nfunction and finally we use the updated\nmodel to regenerate The\nView so that's what this code does it\ntakes the updated data and then\nregenerates all the HTM ml or\nregenerates The\nView so that's how MVC Works instead of\nupdating the page directly with the Dom\nwe just update our data and then\nregenerate all the\nHTML so we use MVC because doing this\nmakes sure that the page always matches\nthe\ndata so MVC is known as a design pattern\nit's a way to organize and design our\ncode in the future you might use a\ntechnology called a JavaScript framework\nto build websites many JavaScript\nFrameworks are based on MVC so it's\nuseful to know how it\nworks okay now that we learned the MVC\ndesign pattern let's do some practical\nexamples using\nMBC we're going to open our project\nagain to the checkout page and we're\ngoing to create this payment section on\nthe right now before we start if we look\nat our code in this checkout. JS file\nyou'll notice that we already have a lot\nof code\nhere instead of adding even more code to\nthis file let's actually split this up\ninto two different\nfiles so one file will be responsible\nfor this left section and then one file\nwill be responsible for this right\nsection we're doing this to keep our\ncode more organized and so that we don't\nhave too much code in one file\nso let's go back and let's create two\nnew files for the checkout page so up\nhere we'll create a file and let's call\nthis one the order summary. JS and press\nenter and let's create another file for\nthe right section and let's call this\none the payment\nsummary. JS and press\nenter now both of these files are\nrelated to the checkout page so let's\ncreate a folder and group them together\nwe'll create a new folder up here and\nlet's call it checkout and press enter\nand we're going to move these two files\ninto this new folder so we move that and\nwe'll move\nthat next let's open checkout. JS and\nlet's move all of this code into the\norder summary so we'll press control a\nor command a to select all the code and\nthen\nrightclick\ncut and then in here we're going to\nrightclick and\npaste now there's a few things that we\nneed to fix here so first our checkout.\nHTML file is still loading checkout. JS\nso we actually need to run this function\ninside checkout. JS instead of inside\nhere so let's actually remove\nthis and save and we're going to scroll\nto the\ntop and let's export this function so we\ncan run it inside here so we'll type\nexport and save and then inside checkout\nwe're going to import curly brackets the\nrender order summary\nfunction from a string and to locate\nthis file we're going to type A do slir\nthat means to start from the current\nfolder and we'll go into the checkout\nfolder checkout SL orderers\nsummary.\nJS and finally we're going to run this\nfunction when we load the page so render\norder summary and brackets and\nsave another thing we need to fix is if\nwe open order summary .js we moved this\nfile into a folder so now all of these\nfile paths need to be updated do do\nslash is now inside the scripts folder\nand we can't find a data folder anymore\nso this is going to cause an error so to\nfind the data folder we need to get out\nof the checkout folder and then we need\nto get out of the scripts folder so we\nneed to get out of two folders so we'll\njust add an additional do dot slash and\nthen same thing for this we'll add\nanother dot dot slash and for the utils\nnow we need to get out of the checkout\nfolder and then into the utils folder so\nwe'll change this to do/\nutils and then for here we're going to\ngo out an additional folder so another\ndot dot slash and\nsave so now let's check if this still\nworks we'll go to our project and\nrefresh and try it\nout and the p still works because we're\nstill running all of the same code but\nwe just organized it into its own file\nso now let's open git and save our\nchanges so it's going to tell us that in\nhere we removed all this code and then\nwe separated it into the order summary\nfile and the payment summary file which\nwe're going to work on next so let's\ntype a message describing our changes\nmove order\nsummary into its own own file and\ncommit now let's start creating the\npayment summary on the right side so in\nour code let's open payment summary.\nJS and just like the order summary let's\nput all our code in a function so we can\nregenerate the HTML if we need to so\nwe'll type function and let's call it\nrender payment summary brackets and\ncurly\nbrackets and let's just\nconsole.log string payment summary just\nto make sure it's working so we'll save\nand let's export this function and then\nrun it inside checkout. JS so export\nsave and then in checkout. JS at the top\nwe're going to import curly brackets the\nrender payment summary function from a\nstring the current folder go into the\ncheckout folder and the payment summary.\nJS file and then at the bottom we're\ngoing to run the function so render\npayment summary brackets and\nsave let's go back to our project and\nopen the console rightclick inspect the\nconsole and we'll see the message\npayment summary so now we know that our\ncode here is working and the export is\nworking\ncorrectly now let's remove this code and\nactually build the payment\nsummary as always we're going to do\nthree steps save the data generate the\nHTML and make it interactive so let's\nstart with saving the data in MVC this\nis called the\nmodel so if we go to our\nproject for this section the data that\nwe need is just to calculate these\nnumbers\nhere so let's start by calculating this\nfirst number here which is the cost of\nthe products to calculate this we can\nLoop through the cart and for each\nproduct in the cart we can multiply the\nproducts price times the quantity and\nthen add everything together now let's\nconvert these steps into code we'll go\nto our project and inside the payment\nsummary\nfile first we need to get the cart so\nlet's import it import curly brackets\nthe\ncart from the string and we'll locate\ncart.\nJS so first we'll go out of the checkout\nfolder do do slash and then go out of\nthe scripts folder do do slash and then\ninto the data folder\ndata.js and\nsave and now we're going to Loop through\nthe cart so we can type cart. for each\nbrackets and a\nfunction and let's name the parameter\ncart item so for each cart item we have\nthe product ID and the quantity so we\nneed to multiply the product's price\ntimes the quantity so first we need to\nuse the product ID and get the full\nproduct details and we already have some\ncode for this inside orders summary. JS\nif we scroll down here we have some code\nthat takes a product ID and finds the\nmatching\nproduct now instead of copy and pasting\nthis code let's actually put this into a\nfunction so we can reuse this and we'll\npractice some modules so let's select\nthis code and rightclick and copy it\nfirst and then let's go into the\nproducts. JS\nfile and at the top we're going to\ncreate a function so we can reuse that\ncode so let's type function and let's\nname it get product brackets and curer\nbrackets and we're going to give this\nfunction the product ID that we're\nlooking for and then let's paste the\ncode we copied earlier right click and\npaste so this finds the matching product\nusing the product ID and then at the end\nof the function let's return the\nmatching product so we can use this\noutside of the function so now let's\nexport this function so we can share it\nacross files so export and\nsave first we'll go to the order summary\nand at the top let's import that\nfunction so we're already importing from\nproduct .js we're going to import\nsomething else using a comma the get\nproduct function and then down\nhere instead of all this\ncode we're going to run that function so\nwe make this equal to get product and\nrun the function and we need to give the\nfunction the product ID so let's just\ngive that here product\nID and because we're no longer updating\nthis variable we can change from let to\nconst and\nsave let's go to our project to make\nsure everything's still working so that\nlooks\ngood and now let's use this function\ninside payment summary. JS so the same\nthing we will import curly brackets the\nget product function from a\nstring and we'll go to the data folder\ndo SL do do SL data SL\nand products.\nJS and let's run that function to get\nthe full product so get product brackets\nand then each cart item has the product\nID so we're going to give it to the\nfunction cart item. product\nID and let's save this product in a\nvariable so we can use it for our\ncalculations con product equals get\nproduct so now now as we said we're\ngoing to multiply the product's price by\nthe quantity so down here we can do\nproduct and it has a property\ncalled price sense and we're going to\nmultiply it by the cart item and this\nhas a property do\nquantity and the last step is to add all\nof these\ntogether so outside of the loop let's\ncreate a variable to save the result of\nadding them together let's type let and\nwe'll name it product price sense equals\nand we'll make it zero to start and then\nevery time we Loop through the cart\nwe're going to add this to this variable\nso we'll type product price sense plus\nequals this value\nhere and that's how we calculate the\ncost of the products so at the bottom\nlet's\nconsole.log the product price sense just\nto make sure that this is working we'll\nsave and in our project we're going to\ncheck the\nconsole and it will give us this number\nhere and this number should match the\nnumber on the page except it's in sense\nand assuming you also have two socks and\none basketball in your\ncart okay so that's how we calculate\nthis first number here now let's\ncalculate the second number which is the\ncost of shipping so to calculate this\nwe're going to Loop through the cart and\nadd all the shipping costs\ntogether so let's go into our\ncode and here we're already looping\nthrough the cart so instead of creating\nanother loop let's just calculate the\nshipping cost in the same Loop so let's\ncreate some new\nlines and each card item has a property\ndelivery option ID so we need to use\nthis ID to get the full delivery option\nwhich has the price so in the order\nsummary we also have this code that\ntakes the delivery option ID and finds\nthe full delivery option so again let's\ncreate a function to share and reuse\nthis\ncode so first let's select this code and\nwe'll write click and\ncopy and let's go to the delivery\noptions. Js\nfile and then at the bottom we'll create\na\nfunction let's call it get delivery\noption brackets and curly brackets and\nwe'll give this function the delivery\noption\nID and inside here we'll rightclick and\npaste the code that we copied earlier so\nthis will take this ID and get the\ndelivery option from this array and\nlet's return return this delivery\noption so we can use it outside of this\nfunction and just to be safe let's also\ngive this a default value if we don't\nfind a delivery option so we'll use the\ndefault operator\nor and let's make the default value the\nfirst delivery option so delivery\noptions square bracket 0\nso now let's export this and\nsave and then inside order summary we'll\nuse this function so at the\ntop we're already importing from\ndelivery options so we'll type a comma\nand get delivery\noption and then down here instead of\nrunning all this code we'll select it\nand make this equal and run the function\nget delivery option\nbrackets and we'll give it this delivery\noption ID delivery option\nID and we can change from let to const\nsince we're not changing this variable\nso now let's save and let's use this\nfunction inside payment summary as well\nso in here at the top we'll import curly\nbrackets the get delivery option\nfunction from\nquotes the data folder do do slash do\ndata slash and the delivery options. JS\nfile and now we'll run this function get\ndelivery option and\nbrackets and each cart item has a\ndelivery option ID so we'll put that\ninto the function cart item. delivery\noption\nID and let's save this in a\nvariable con delivery option\nequals and now we can get the price for\nthe delivery option using delivery\noption price sense\nproperty and finally we're going to add\nall these together so at the top let's\ncreate a variable to save the result let\nwe'll call it ship\nshipping price cents equals zero and\nwhen we Loop through the cart we're\ngoing to\ndo shipping price sents plus equals this\ndelivery options\nprice and let's also console.log this to\nmake sure it's working so shipping price\ncents and Save\nnow let's go to our project and check\nthe\nconsole and this value\nhere should be the same as adding these\ntwo numbers together in\nsense so that's how we calculate the\nsecond number the shipping price so note\nthat this\n$4.99 number is just a practice number\nright now the actual shipping price\nshould be the total of adding all these\nsh shipping prices\ntogether the next number we need to\ncalculate is the total before tax so let\njust adding these two numbers together\ninside our\ncode let's remove these console. logs\nand we'll create const total before tax\nsense and make it equal and we'll add\nthese two together product price sense\nPlus shipping price\nsense and the next number is the tax so\nwe're going to calculate a 10% tax on\nthis number here to calculate 10% of\nsomething we can multiply this by 10 /\n100 that's what percent means so 10 ID\n100 is also equal to\n0.1 so we can also multiply this number\nby\n0.1 let's go into code and we'll create\na variable const tax sense make it equal\nto the total before tax sense times 0.1\nor\n10% finally to calculate the total we're\ngoing to add these two numbers together\nso const total sense equals the total\nbefore tax sense Plus the tax\nsense so that's how we calculate all the\nnumbers in the payment summary and now\nwe have all the data that we need next\nwe're going to generate the HTML in MVC\nthis is called The\nView so at the bottom here let's create\na variable to store the\nHTML const payment summary\nHTML and we'll make make it equal to a\ntemplate\nstring and then inside here we're going\nto copy and paste the\nHTML so let's open checkout.\nHTML and we're going to scroll up until\nwe find the class payment D summary so\nwe're going to generate all the HTML\ninside here so let's actually select\nthis HTML and move it into our\nJavaScript so we'll select it up until\nthis button and then we we can\nrightclick\ncut and remove the new line save and\nthen inside the payment summary inside\nthe screen we'll rightclick and paste\nthe\nHTML and if we need to reformat we can\nselect these\nlines and press tab a few times to\nreformat\nit and and\nsave next instead of using these same\nnumbers every time we're going to take\nthe numbers we calculated up here and\ninsert it into this HTML string so\ninstead of 42.75 every time we're going\nto insert the product price\nsense and let's give it some new lines\nto make it a little easier to\nread now remember that this number is in\nsense and we want to display it as\ndollars to do that we already have a\nfunction for this so in the utils money.\nJS file we have a function format\ncurrency that displays it in dollars so\nlet's use this function inside payment\nsummary so at the top let's import the\nfunction\nfirst import curly brackets the format\ncurrency function from a Str\nand to locate this folder we'll go out\nof the checkout folder do do/ the UIL\nfolder SL money.jpg\nnumbers here so this one is the shipping\nprice so we can\ninsert format currency brackets the\nshipping price sents and let's give it\nsome new lines to make it a little\neasier to\nread next let's insert the total before\ntax so we'll remove this number and\ninsert format currency bracket gets the\ntotal before tax\nsents and new\nlines and next is the tax we'll remove\nthis and\ninsert format currency brackets the tax\nsents and we'll enter some new lines and\nfinally the total so we remove this\ninsert\nformat currency brackets total sense and\nadd some new\nlines and\nsave now before we continue I actually\nlearned of a small issue with the format\ncurrency function so let's open the\nmoney. JS\nfile and I recently learned that this\ntwo fixed method has a small issue with\nrounding so for some numbers that end in\nfive it won't round the number\nproperly one way to fix this issue is to\nround the price sense first so that this\nmethod doesn't have to do any rounding\nso at the front here let's just type\nmath.round Open Bracket and close\nbracket so this is just a tricky issue\nthat I discovered with the help of AI\nrecently we just need to add a little\nbit of code here to fix it\nso now let's save this\nfile and go back to payment\nsummary so now that we generated all\nthis HTML and inserted our numbers into\nit let's put this HTML on the page so\ninside checkout.\nHTML let's give this payment summary\nanother class\njs- payment Das summary and then we'll\nselect this using the Dom so now let's\nsave this\nfile inside payment summary at the\nbottom after we create the HTML we're\ngoing to document. query selector\nbrackets and a string and we'll select\njs- payment D summary to get that\nelement and we'll change the HTML inside\nthat element using do inner Capital H\nHTML and we'll make it equal to the\npayment summary\nHTML that we just created so now let's\nsave and check our\nproject and now these numbers on the\nright should match what we have in the\ncart and the delivery options that we\nselected so that's how we generate the\nHTML for this section\nhere now let's save our changes into git\nwe'll open\ngit and it will tell us in checkout.\nHTML we removed the HTML we created\nmanually in delivery options. JS we\ncreated this shared function for finding\nthe full delivery option and the same\nthing in products. JS for finding the\nfull\nproduct inside checkout. JS we're now\nrunning all the code inside payment\nsummary in order summary we're just\nusing those shared functions that we\ncreated and then in payment summary we\ncalculated the numbers and generated all\nthe\nHTML and finally in money. JS we fixed a\nsmall bug related to rounding let's type\na message to describe our changes save\ndata and generate\nHTML for payment\nsummary and commit\nthe last step is to make it interactive\nin MVC this is called the\ncontroller let's go to our\nproject and one thing we can make\ninteractive in this section is the place\norder button however we haven't figured\nout how orders work yet so we'll work on\nthis in the next lesson another thing we\ncan make interactive however is when we\nchange the cart on the left these prices\nshould also update so let's make this\ninteractive first when we delete a\nproduct the prices here should update so\nlet's actually practice using MVC to\ncreate this\nfunctionality according to MVC when we\nclick delete we should update the data\nand then regenerate all of this\nHTML so let's get started and go to the\ncode for the delete link so this is in\nthe order summary section so in our code\nlet's open the orders summary. JS\nfile and we'll scroll down and find the\nevent listener for the delete link which\nis right\nhere when we click delete first we're\ngoing to update the\ndata so we already update the data using\nthis function remove from cart\nand now the next step according to MBC\nis to just regenerate all the\nHTML so to regenerate the HTML for the\npayment summary we created this function\nat the top render payment\nsummary so this will recalculate all the\nnumbers and then regenerate the\nHTML so let's import this\nfunction in order summary. JS we'll\nscroll to the top\nand down here we can import curly\nbrackets the render payment summary\nfunction from a string and we'll locate\nthe payment summary file so it's in the\nsame folder so we're going to start with\na slash which is the current folder the\npayment summary. JS file and now let's\nuse this function in the event listener\nso let's scroll\ndown when we click delete we're going to\nupdate the data and then regenerate all\nthe HTML using render payment summary\nbrackets now let's save and go to our\nproject focus on the numbers on the\nright here and now let's click\ndelete and you'll notice that all of\nthese numbers updated to match our new\nso that's another example of using MVC\nwhen we click delete instead of using\nthe Dom to change these numbers one by\none we just update the data and then\nregenerate all of the\nHTML MVC makes sure that the HTML always\nmatches the data or that the view always\nmatches the\nmodel let's do one last example of NBC\nfor this lesson when we change the\ndelivery options here we also want these\nnumbers on the right to update so let's\nfind the code for the delivery options\nagain this is in the order summary\nsection so in our code we'll open orders\nsummary. JS scroll down and then here we\nupdated the data and then we're just\ngoing to regenerate the HTML for the\npayment summary using render payment\nsummary and and\nbrackets now let's\nsave and then look at our project and\nlet's try changing the delivery option\nhere and you'll notice the numbers on\nthe right update automatically to match\nthe cart and that's it we finished the\ncheckout page so now let's save our code\ninto git we'll go into the git\nsection here and inside order summary we\nbasically imported the render payment\nsummary function\nand then at the\nbottom we used MVC so when we click\ndelete we update the data or the model\nand then we regenerate all the HTML or\nregenerate The View down here same thing\nwhen we click a delivery option we\nupdate the data and then regenerate all\nthe\nHTML the last thing we're going to do is\nat the top of this file\nwe're going to remove this practice code\nthat we use to learn external libraries\nso let's open orders summary.\nJS and at the top we're going to remove\nthis\ncode and\nsave now let's go back into\nget and that looks good finally let's\ntype a message describing our\nchanges make\npayment\nsummary\ninteractive and\ncommit and that's the end of this lesson\nin this lesson we learned about external\nlibraries which is code that is outside\nof our project we learned about the DJs\nexternal Library which helps us work\nwith dates we also learned how to use\nexternal libraries with JavaScript\nmodules together as well as the default\nexport syntax we created the delivery\nsection of the checkout page we learned\nMBC which is a better way to design our\ncode and we created the payment section\nof the checkout\npage thanks for watching this course so\nfar if you want to support this channel\nyou can check out the premium version of\nmy courses just like this one where you\ncan get a certificate of completion and\na Better Learning platform if you're\ninterested in extra videos from me more\nin-depth videos and behind the scenes\ncontent you can check out these links\nhere you can also support the channel by\nliking the video subscribing and sharing\nthis video with others thanks again and\nlet's continue with the\ncourse here are some exercises to help\nyou practice what we learned in this\nlesson e\nin the rest of this course if you get an\nerror in your project but your code\nlooks correct you may have some bad data\nsaved in local storage to fix this you\ncan try running local storage. CLE in\nyour console to remove everything from\nlocal\nstorage and then refresh the\npage if you see an error like this\nobject object that means that you saved\nsomething directly into local storage\nbut you have to json.stringify it first\nso check your code to make sure that\nyou're always stringifying before saving\nto local storage and then clear your\nlocal storage and refresh the\npage in this lesson we're going to learn\nhow to test our code so when we're\nwriting code it's important to test our\ncode to see if it's working correctly\nand if you're working at a company in\nthe future you'll also be expected to\ntest your code so let's learn how to do\nthat in this\nlesson the easiest way to test our code\nis to just open the website and try out\nthe code for example in our code here\nlet's open the file utils money.jpg\nserver so on this website we have a\ncouple of prices here as well as here\nand we created these prices using the\nfunction format\ncurrency so if we just look at the\nwebsite we can see that these prices\nlook correct and this tells us that the\nfunction format currency is working\ncorrectly so that's one way to test that\nfunction we just open the website and\ntry it out so this is called manual\ntesting when we manually open the\nwebsite and try our code so manual\ntesting is really useful for quickly\nchecking to see if everything is\nworking so now let's talk about the\ndisadvantages of manual testing one\ndisadvantage is it's hard to test every\nsituation for example here we just\nhappen to have the number\n295 and we test with that however what\nif we want to test with different\nnumbers like the number zero or a number\nthat requires rounding like\n2.5 in order to test all these\nsituations we have to manually set up\nour website so that our code runs with\nthose numbers so here we ran with 2095\nas well as zero so we covered those\nsituations however we did not cover\n2.5 so we have to do a bunch of setup in\norder to test that situation\nso as you can see it takes a lot of time\nand effort to test different situations\nin our code the second disadvantage of\nmanual testing is that it's hard to\nretest the code for example if we change\nsome of our code how do we retest format\ncurrency and make sure that it's still\nworking\ncorrectly well we would have to open the\nwebsite and set up all the situations\nagain and retest all those situations\nmanually so this takes too much time and\neffort to retest the\ncode to solve these two problems we're\ngoing to learn another way to test our\ncode called automated\ntesting automated testing basically\nmeans using code to test code instead of\nmanually opening the website and\nclicking around to try our code we're\ngoing to tell the computer to do these\ntests for us and this will save a lot of\ntime and effort so let's go ahead and\ncreate our first automated test we're\ngoing to go back to our\ncode and again let's test this format\ncurrency function to create an automated\ntest we're just going to write some code\nto test this function so first let's\ncreate a folder to group all of our test\ncode together we're going to click this\nicon to create a folder and let's just\nname this tests and press enter\nand we're going to move this folder so\nwe'll drag it to the top level here\nbeside the HTML\nfiles so we want the test folder to be\nbeside the scripts\nfolder next let's click on the test\nfolder and we're going to create our\nfirst test file we'll click\nthis and we're going to test format\ncurrency which is inside the money.jpg\nmoney\ntest.js so we know that this file\ncontains tests for money. JS so let's\npress\nenter and inside this file we're going\nto write some code to test format\ncurrency so first let's import format\ncurrency so we can test it at the top\nwe'll type import curly brackets format\ncurrency\nfrom a string and from here we're going\nto locate money. JS so we start out in\nmoney test.js and we need to get out of\nthe test folder so we'll type do do\nslash to get out of this folder and then\nwe'll go into the scripts folder scripts\nslash and then into the utils folder\nutils slash and locat\nmoney. Js\nso as a reminder format currency takes a\nnumber in cents like 295 cents and then\nconverts it into Dollars like\n$20.95 so first let's test this function\nusing that number 2095 as an example\nwe're going to run the function format\ncurrency brackets and give it\n295 and now we're going to check if the\nresult of this function is correct to do\nthat we can just use an if statement so\nwe'll type if Open Bracket close\nbracket and we said we expect format\ncurrency\n295 to give us the string\n20959 and curly brackets and and if\nthese two are equal that means the code\nis working correctly so we're going to\nconsole. log the string\npassed to say that this test has passed\nnow if it is not equal to\n20.95%\nfailed and\nsave and that's it this is our first\nautomated test it checks if the result\nof this function is correct if it is\ncorrect we're going to display past and\nif it's not correct we're going to\ndisplay\nfailed now let's run this test code so\nremember we can't run JavaScript files\ndirectly we need to load this Javascript\nfile using an HTML file so let's create\nan HTML file to run this test inside the\ntest folder we're going to create a new\nfile by clicking up\nhere and let's name this file\ntests.\nHTML and press\nenter and in here we're going to start\nby creating a basic HTML structure so as\na reminder at the top we'll type less\nthan exclamation\ndock type space HTML greater than and\nwe'll create an HTML\nelement and then inside we'll create a\nhead\nelement as well as a body\nelement and then inside the body we're\ngoing to create a script tag to run\nJavaScript\ncode and we're going to give the script\ntag an attribute called SRC or source\nequals double quotes and we're going to\ngive it this JavaScript file to\nrun money\ntest.js and also because this file uses\nimport we also need to add an attribute\ncalled type equals modules to give this\nfile access to JavaScript module\nfeatures like\nimport so now let's\nsave and we're going to run this file in\nlive server so we're going to click it\nand then\nrightclick open with live\nserver and then we're going to check the\nconsole by right\nclicking\ninspect and open the\nconsole and our code display the text\npassed so if we look at our\ncode and open money\ntest.js it's telling us that the result\nof this function matched what we\nexpected\nand this test\npassed so that's how we run an automated\ntest we just load it like normal\nJavaScript so as you can see automated\ntests are pretty straightforward we're\njust using code to test\ncode okay so I mentioned earlier that a\ndisadvantage of manual testing is it's\nhard to test every\nsituation now let's solve this problem\nusing automated\ntests so inside money\ntest.js if we want to test format\ncurrency in different situations or with\ndifferent numbers we can just add some\nmore tests at the bottom so at the\nbottom let's create some new lines and\nwe'll just add another test using IF\nbrackets and curly\nbrackets and inside here let's test\nformat currency with the number zero so\nwe'll type format\ncurrency brackets 0 and we expect this\nresult to be the string 0.0 0 so we'll\ncheck if this triple equals the string\n0. if this result matches we're going to\nconsole.log the string\npassed and if this result does not match\nwe're going to type else curly brackets\nand\nconsole.log the string\nfailed so that's how we test format\ncurrency in a different situation with\nthe number zero so now let's\nsave and then go back to our test page\nwhich is here and then open the console\nright click\ninspect the\nconsole and it will tell us that both of\nour automated tests\npassed so as you can see automated tests\nhelp us test our code in different\nsituations very easily this is a lot\nfaster than manually opening our website\nand setting it up to test with different\nnumbers so let's go back to our\ncode and by the way another name for a\nsituation that we're testing is called a\ntest case so here instead of saying\nwe're testing two different situations\nwe usually say we're testing two test\ncases okay now let's get more practice\nand add another test case at the bottom\nof this file we're going to create\nanother if statement if brackets and\ncurly\nbrackets and this time let's test format\ncurrency brackets and we'll give it a\nnumber that requires some rounding\nso when we calculate the 10% tax on our\nwebsite the result could be a decimal\nlike the number\n2000.5 if we use the number\n2.5 this will convert into $20 and\n0.5 however we can't have\n0.5 so we're going to round this up to 1\ncent so we're going to have $20 And1\nso let's check if this result triple\nequals the string\n20.1 and if it is equal we're going to\nconsole.log\npast and if it is not equal else curly\nbrackets\nconsole.log\nfailed and\nsave and open our test page and open the\ncon\nand you can see that all three of our\ntest cases passed and that's it we just\ncreated three test cases for format\ncurrency using automated\ntests now let's go back to our\ncode and currently we have three test\ncases and you might be wondering how\nmany test cases should we have generally\nwe create two types of test cases basic\ntest cases and edge\ncases a basic test case just tests if\nthe code is working or not so here our\nfirst test case is a basic test case we\nuse a normal number like\n2095 and we see if format currency is\nworking\ncorrectly the second type of test cases\nthat we should have are edge cases this\nmeans we test a code with values that\nare a little bit bit tricky they're on\nthe edge of what our code can handle for\nexample in our test here the last two\ntest cases are edge cases zero is sort\nof a special number that's not positive\nor negative and\n2.5 is a number that requires some\nrounding so these numbers are acceptable\nwe can use them with format currency but\nthey're a little bit tricky and on the\nedge of what our code can handle\nso when creating test cases make sure to\ncreate basic test cases as well as edge\ncases if there are any edge\ncases now we could have added another\nbasic test case like format currency\n1095 however this is very similar to\n2095 it's basically testing the same\nthing so we don't need another test case\nlike this generally we should try to\ntest something different in each test\ncase for example an edge case that we\nhave not tested is a number\n200.4 so this would check if the code\nrounds down correctly to $20\nand0 however I'll leave creating this\ntest case as an\nexercise now let's move on and talk\nabout the second disadvantage of manual\ntests which is it's hard to retest the\ncode automated test also solve this\nproblem for example let's say that we\nChang the format currency function so\ninside UIL money.jpg\nwe would have to open up the website set\nup everything manually and then click\naround to see if it's\nworking however with automated testing\nall we need to do is to rerun all of\nthis test code and it will instantly\nretest all of these cases so let's go\nback to money. JS and save this\ncode and then go into our test\npage and check our console right click\ninspect the\nconsole and you can see that it\ninstantly reruns all the test cases and\nit tells us that the last test case\nfailed so automated tests make it really\neasy to retest our code after we make\nany\nchanges okay now we have another problem\nhere we can see that the test Cas is\npassed passed and failed but it's not\nclear which ones passed and which ones\nfailed we don't really have a name for\nthese tests so we don't know what\nthey're doing so that's what we're going\nto add next we're going to give each of\nthese tests a name so let's go back to\nour\ncode and open money\ntest.js and now we're going to give each\nof these test cases a name so above the\nfirst test\ncase let's just\nconsole.\nlog a string and we're going to give\nthis test a name so the name should\ndescribe what this test is doing so in\nhere let's just use the name converts\ncents into\ndollars and that's how we give a test\ncase a name let's do the same thing with\nthe other two test cases so down here\nwe're going to console.\nlog brackets and a string and we give\nthe second test case a name so this one\ntests the number zero so let's use the\nname works with zero so again the name\njust describes what the test is\ndoing and let's do the same thing for\nthe third test case we\nconsole.log a string and here we're\ntesting if the function rounds up to the\nnearest scent so let's use the name\nrounds up to the nearest\nscent and\nsave if you're wondering how I came up\nwith these names a naming convention\nthat we use is to describe what the code\nis doing for example the code works with\nzero or the code rounds up to the\nnearest scent and then we remove the\ncode some people also like to use the\nword it instead of the\ncode so now each of these test cases has\na name above it if we open up our test\npage and open the\nconsole now we can see exactly which\ntest case passed and which test case\nfailed so this failed test case tells us\nwe have a rounding problem in our code\nso now we can go back to our code into\nmoney. JS and investigate the rounding\nproblem so of course we removed\nmath.round as an example we're just\ngoing to add it back to fix that failing\ntest capital m\nmath.round Open Bracket and close\nbracket and\nsave and then open the console for our\ntest which is here and now all of our\ntest cases\npassed next another thing we do when\nnaming our tests is to group related\ntests together for example these three\ntest cases are for the format currency\nfunction so we're going to group these\ntests together and give this group a\nname by the way a group of related tests\nis called a test\nSuite so let's go back to our code and\nopen Money test.js\nand at the top let's give this group of\ntests or this test Suite A Name by\ntyping\nconsole.log brackets and a string we're\ngoing to name it test Suite colon format\ncurrency and\nsave so now let's open the console for\nour\ntests and now at the top it will show us\ntest site format currency so this makes\nit clear that this group of tests here\nare for the format currency\nfunction in the future if we are testing\nsome other code for example a calculated\ntax function we can create another group\nof tests or another test Suite like this\nand this makes it clear that the second\ngroup of tests is for the calculate tax\nfunction so this is how we name our\ntests and group our tests together\ntogether to make it more clear what is\nbeing tested and which tests have passed\nor\nfailed and now we created our first set\nof automated tests as you can see\nautomated tests are basically using code\nto test code and they make it really\neasy to check if our code is working\ncorrectly so now let's save this into\ngit we're going to open the git\nsection and our first change in money\ntest.js we created the tests for format\ncurrency and then we created an HTML\nfile to load our test\ncode so let's create a message\ndescribing these\nchanges create automated tests for\nformat\ncurrency and\ncommit next we're going to learn how to\nuse a testing framework to write\nautomated tests so what is a testing\nframework in the previous lesson we\nlearned about external libraries which\nis code that is outside of our project\nthat someone else wrote and we can load\nexternal libraries into our project and\nuse\nthem so a testing framework is an\nexternal library that helps us write\ntests\neasier let's go back to our code and\nwe're going to open the money test.js\nfile and notice that in our tests we\nneed to do several things first we\ncreate a test suite and we give it a\nname and then we create some tests and\nfor each test we give it a name and then\nwe compare the values and display the\nresult in the console so a testing\nframework helps us do all of these\nthings automatically and gives us many\nother features so now let's learn our\nfirst testing\nframework in this course we're going to\nuse a popular testing framework called\nJasmine now if you're working at a\ncompany in the future you'll definitely\nbe using a testing framework but it\nmight not always be Jasmine and that's\nokay because most testing Frameworks are\npretty similar so by learning Jasmine\nyou'll be able to easily use other\ntesting Frameworks in the\nfuture to load Jasmine into our project\nwe're going to go into the video\ndescription and we're going to click\nthis link to download\nJasmine so once that link opens we're\ngoing to be on this page and we're going\nto scroll down and we're going to click\nthis Jasmine DST standalone. zip file to\ndownload it\nnow once that's finished downloading\nwe're going to open our downloads\nfolder and if you're on Windows we're\ngoing to rightclick the zip file and\nclick extract\nall and click\nextract now if you don't have that\nextract all option you can also create a\nfolder with this name and then double\nclick the zip file and drag everything\ninto that folder\nif you're using a Mac you can just\ndoubleclick the zip\nfile so this folder contains the code\nfor Jasmine and we're going to drag this\nfolder into our project so let's open\nthe code for our\nproject and then we're just going to\ndrag this folder down\nhere and click copy\nfolder so just make sure that this fold\nfolder is beside the scripts and images\nfolder next we're going to rename this\nfolder so we'll right click\nrename and let's rename it to\ntest- Jasmine to make it clear this\nfolder contains test created with\nJasmine so now let's press\nenter and now we have Jasmine inside our\nproject so inside the lip folder we have\nsome JavaScript files here and this is\nthe code for the Jasmine testing\nframework so this is another way to load\nan external Library into our project we\ncan just download all the code and put\nit into our project and this is useful\nif an external library has lots of\ndifferent files like\nthis before we continue let's save the\nchanges into git so if we make any\nchanges later it will be easier to see\nthem we'll open the git section\nand then we just added all the code for\nJasmine so at the top let's type the\nmessage add Jasmin testing\nframework and\ncommit now that we loaded Jasmine into\nour project let's learn how to use it so\nJasmine has a documentation page that\nshows you how to use the testing\nframework however to save time I'm just\ngoing to show you the features that we\nneed and you can read the documentation\nlater if you want so first let's learn\nhow to run tests using\nJasmine I'm going to close this for now\nand then in our code we're going to open\nthe test- Jasmin folder and at the\nbottom we're going to open this spec\nrunner. HTML\nfile so this file loads all of the\ntests so this does the same thing as our\ntest.html file from before and by the\nway in Jasmine spec is another name for\ntest so spec Runner just means test\nRunner this file runs all the\ntests so let's actually rename this file\nto test.html so we can match what we had\nbefore and compare the two so here we're\ngoing to right click and\nrename\ntests. HTML and press\nenter and now let's open this file and\ntake a look at the code that's\ninside so here at the top this is the\ncode for the Jasmine testing framework\nso we're just loading the framework up\nhere below that here we have the code\nthat we want to test so this code is\nsort of like the money JS file that we\nwere testing\nearlier and then at the bottom these\nfiles contain the tests so these files\nare sort of like the money test.js file\nthat we had earlier and you'll notice\nthat these are in a spec folder so as a\nreminder in Jasmine spec is another name\nfor test so this is basically the test\nfolder this folder contains all of our\ntests so now let's run these tests and\nto do that we just need to open this\nHTML file in live server just like we\ndid before\nso for this file we're going to right\nclick and open with live\nserver and I'm just going to make this a\nlittle bigger by pressing control equals\nso it's easier to see in the\nvideo so this is what Jasmine tests look\nlike up here we have five Green Dots\nthis means we have five tests that we\nran and the green color means that all\nof them passed so that here each test\nhas a Green Dot and you'll notice that\neach test also has a name next to it\nwhich tells us what the test does and\ndon't worry if this is in a different\norder for you Jasmine randomizes the\norder of the\ntests also notice that some of these\ntests are grouped together into a test\nsuite and up here we have the name of\nthe test Suite so as you can see a\ntesting framework helps us do all of the\nthings we were doing before and it also\nprovides a nice looking website where we\ncan see the test results so a testing\nframework is just an external library\nthat helps us write tests\neasier now that we know what Jasmine and\na testing framework is let's learn how\nto write our tests using\nJasmine first we're going to go back to\nour\ncode and we're going to remove the\nexample code provided by\nJasmine so down here we'll remove these\nfour script\ntexts and let's also remove the source\nfolder so we'll right click\ndelete as well as the spec folder right\nclick\ndelete but make sure we keep this lib\nfolder because this contains a code for\nJasmine and now inside test Jasmin we're\ngoing to create a new file for our test\nso we'll create a new\nfile and let's say that we're testing\nmoney. JS again so let's name it the\nsame thing here money\ntest.js and press\nenter and now let's create the same test\nwe had before by using Jasmine this time\nso to make it easier for the video I'm\njust going to take this file and drag it\nto the top here so we can see these two\nside by\nside so like before we're going to\ncreate tests for format currency first\nwe'll need to import this function at\nthe top so let's just actually select\nthis and right click\ncopy and then down here right click and\npaste and just make sure that this file\npath still works so our money test.js\nfile has to be inside test- Jasmin and\nthis folder should be beside the\nprevious test\nfolder next we're going to create a test\nsuite and name the test Suite so in\nJasmine to create a test Suite we're\ngoing to use a function called\ndescribe so this describe function is\nprovided by Jasmine and it creates a\ntest\nSuite next we're going to give a name to\nthe test Suite so to name a test Suite\nin Jasmine we're going to give describe\na string and this string is the name of\nthe test Suite so let's name it the same\nthing as before test Suite colon format\ncurrency next we're going to add some\ntests inside the test Suite to do that\nwe're going to give describe a second\nparameter which is a function brackets\narrow and curly\nbrackets and inside here we're going to\ncreate a test and give the test a name\nto create a test in Jasmine we're going\nto use another function called it and\nbrackets so it is a another function\nprovided by Jasmine and this creates a\ntest next let's give a name to our test\nso that we know what it's doing to name\na test we're going to give it a string\nand this is going to be the test name so\nlet's name it the same thing we had\nbefore\nconverts sense into\ndollars and now we're going to add some\ncode into our tests to do that in\nJasmine we're going to give it a second\nparameter which is another function\nbrackets arrow and curly\nbrackets so this is the code inside the\ntest and in this test we need to compare\nthese two values and display the result\nin Jasmine instead of creating an if\nstatement and displaying the result\nourselves Jasmine provides us another\nfunction to do all of this\nand that function is called expect and\nbrackets so expect lets us compare a\nvalue to another value for example let's\ngive expect the first value that we want\nto compare which is format currency\n2095 so we'll type format\ncurrency brackets\n295 and now to compare this value to\nanother value expect gives us an\nobject and this object has many methods\nwe can use to do\ncomparisons so one of the methods we can\nuse in this object is dot 2 equal\nbrackets and then inside these brackets\nwe'll put another value that we want to\ncompare this to so we want to compare\nthis to the string 2095\nand that's it this checks if this value\nis equal to this value and then displays\nthe result on the page so it does\neverything that we did before except\nwith one line of code and you'll also\nnotice that jasmin's code is designed so\nthat it reads like English for example\nwe expect format currency\n2095 to equal this string and this makes\na test code easier to read\nso we just created our first test suite\nand our first test using\nJasmine now let's run this test to do\nthat we just need to run this Javascript\nfile inside test.html\nso first let's save this\nfile and then inside test.html we're\ngoing to load this file so in here at\nthe bottom we're going to create a\nscript tag\nand we'll give it a source attribute SRC\nequals double\nquotes and we're going to load money\ntest.js\ntest.js and remember our test file uses\nimport so we also need to give it the\nattribute type equals module so this\nfile has access to JavaScript module\nfeatures so now let's save\nand we'll open this file in our browser\nso we should have it open from before if\nyou don't you can write click and open\nwith live\nserver so we'll open the test page and\nnow you can see that we have our one\ntest that we created here and it's\npassing so it's green you can see here\nthat we created a test Suite with a name\nand we also created a test with this\nname so we just created the first test\nthat we had before except using Jasmine\nthis time and you can see that Jasmine\nalso creates a nice website for us to\nsee the test\nresults okay now that we learned how to\nuse Jasmine to create a test let's get\nsome practice and create the rest of our\ntests from before we'll go back to our\ncode and open money\ntest.js and here we're going to create\nthe other two tests that we had here so\nat the bottom inside the same test Suite\nwe're going to create another test using\nthe function it brackets and we'll give\nit a string which is the test name and\nlet's name it the same as\nbefore works with zero comma brackets\narrow and curly\nbrackets and now we can put something\ninside this test so in the second test\nwe're going to compare these two values\nto compare values we're going to use the\nfunction expect\nbrackets and the first value is going to\nbe format\ncurrency brackets\nzero and then expect gives us an\nobject and this object has a method\ncalled dot to equal which lets us\ncompare this value to another value\nso we'll call this method using brackets\nand compare to the string the string 0 0\n0 and now let's\nsave and live server will update our web\npage automatically so we'll open the\ntest page and now we have two tests and\nthey both passed so that's how we create\nthe second test using Jasmine and again\ndon't worry if this is in a different\norder for you Jasmine randomizes the\norder of the\ntests finally let's create that third\ntest that we had before we'll go back to\nour code and then in our old money test\nfile we're going to create this third\ntest feel free to pause the video if you\nwant to give it a try\nyourself so we'll scroll down and we'll\ncreate another test inside this test\nSuite using the function it brackets and\na string and we'll give it the same test\nname as before\nrounds up to the\nnearest set comma brackets arrow and\ncurly\nbrackets and we're going to compare\nthese two values so we use exp brackets\nand give it the first value format\ncurrency brackets\n2000.5 and to compare it we'll use the\nmethod\ndo2 equal brackets and compare it to\n20.01 and\nsave and let's go back to our test page\nand now we have three tests and all\nthree of them passed so we recreated the\ntests that we had\nbefore now let's try making one of these\ntests fail to see what it looks like in\nJasmine we'll open our\ncode and and let's open the file utils\nmoney.jpg\ntest so it tells us the test Suite name\nand the test name that failed and it\nwill also tell us the two values that\nare not equal to each other and here it\nwill tell us where this test failed so\nit tell us that it failed in money\ntest.js at line\n13 so if we go back to our\ncode and we open the Jasmine money\ntest.js line 13 is right here so just\ntelling us that this line failed the\ntest\nhere we can see the full list of tests\nand it will tell us that we have three\ntests two of them passed and one of them\nfailed so Jasmine gives us a lot of\ndetails on where a test failed to help\nus fix the\nissue now let's add back math.round to\nmake everything pass again we'll open\nour code and open UTS money.jpg\nmath.round Open Bracket and close\nbracket and\nsave and if we check our test page\neverything passes\nagain so this is how we use a testing\nframework like Jasmine to create tests\nthe testing framework gives us a bunch\nof functions such as describe it and\nexpect and then we use these functions\nto create our test so so these functions\nhave a lot of features inside them they\ndo all of the setup for us and they also\ndisplay the test on a nice web page for\nus now there's one more thing I want to\nmention which is we can use describe\ninside describe this helps us organize\nour tests\nfurther so now let's save our changes\ninto git we'll open the git\nsection and let's close this file at the\ntop for\nnow so inside money test.js we created\nall the tests that we had before for\nformat currency by using Jasmine this\ntime and for spec Runner we rename this\nfile to test.html and finally we deleted\nall the test code that came with Jasmine\nso now let's add a message to describe\nour\nchanges\nremove default tests and add\nmoney tests and\ncommit now let's test a different\nfunction using Jasmine and along the way\nwe're going to learn some more features\nof testing\nFrameworks let's go back to our\ncode and we're going to scroll to the\ntop and open the data/ cart. JS\nfile so inside this file we have a\nfunction called add to cart so we're\ngoing to create tests for the add to\ncart\nfunction first since this function is in\na different file we're going to create a\nnew test file so we're going to scroll\ndown and let's close the test folder so\nwe don't get confused and then inside\ntest- Jasmine we're going to click in\nthis folder and then create a new file\nand let's name it cart\ntest.js and press\nenter so we name it the original file\nname which is cart and then just add\ntest at the\nend and to better organize our test\nfiles we usually try to match the folder\nstructure of the code so for example in\nour code money. JS is inside this UIL\nfolder so inside our tests we should\nalso create a utils folder and put this\nfile inside so we'll create a new folder\nby clicking up here and let's name it\nutils and press\nenter and then move the money test.js\nfile\ninside if it asks you if you want to\nupdate Imports automatically you can\nclick\nyes if you check your code scroll to the\ntop make sure that your file path starts\nwith do do slash do do slash because now\nwe're inside another\nfolder VSS code sometimes updates the\nfile paths for us automatically but if\nit doesn't we can just add an extra dot\ndo slash in front\nourselves and we're also going to open\nmoney test.js and save this\nfile next if we scroll up cart. JS is in\ninside a data folder so inside our tests\nwe're also going to create a data folder\nlet's click cart\ntest.js we'll create a new folder and\nlet's name this the data folder and\npress\nenter and then move card test.js inside\nhere now you'll notice that this folder\nstructure doesn't perfectly match the\nfolder structure that we have up here\nbecause utils is inside the scripts\nfolder but usually this data folder\nshould also be inside the scripts folder\nI just made a mistake when structuring\nthe\nproject so let's just use this folder\nstructure in our\ntests okay so now let's open cart\ntest.js and now we're ready to test the\nadd to cart\nfunction so first let's import add to\ncart at the top we'll import\ncurly brackets add to\ncart from a\nstring and we're going to locate cart.\nJS so first we need to get out of the\ndata folder using do slash and then get\nout of the test djine folder do do slash\nand we'll go into this data folder data\nSL cart.\nJS next let's create a test suite for\nthis function so we'll create some new\nlines and to create a test Suite in\nJasmine we'll use the function\ndescribe\nbrackets and we'll give this test Suite\nA Name by giving it a\nstring so let's use the name test Suite\ncolon add to\ncart and we'll give it a second\nparameter which is a function brackets\narrow and curly\nbrackets and now inside this test Suite\nwe're going to add some tests so let's\nlook at the code for add to cart to see\nwhat kind of tests we should\nadd so we'll open data/ cart.\nJS and then inside add to cart you'll\nnotice that this function uses an if\nstatement a best practice in testing is\nto test each condition of the if\nstatement\nthis is known as test coverage test\ncoverage means how much of the code is\nbeing tested and a best practice is we\ntry to maximize test\ncoverage so for this if statement we'll\ncreate a test for the first condition\nwhich is when the product is already in\nthe cart and we'll create a test for the\nelse condition when the product is not\nin the\ncart let's go back to cart\ntest.js and inside this test Suite we're\ngoing to create a test using the\nfunction it brackets and we'll give it a\nstring and this will be the test name so\nfor the video I'm just going to scroll\nup and take this cart. JS file and put\nit at the top here so we can see our\ncode and our test side by side so I'm\ngoing to scroll down to the add to card\nfunction and we mentioned that we're\ngoing to test each condition of this if\nstatement so the first test is going to\nbe when the product is already in the\ncart so that here let's name it ads and\nexisting product to the cart comma\nbrackets arrow and curly\nbrackets and let's add another test for\nwhen the product is not in the cart so\nthis else condition so down here we'll\ncreate another test using it brackets\nand a string and the test name adds a\nnew product to the cart comma and a\nfunction brackets arrow and curly\nbrackets so these are the two tests that\nwe need for the two conditions of this\nif\nstatement let's actually start with\nadding a new product to the cart since\nit's a little easier to\ntest now unlike the format currency\nfunction add to cart doesn't return a\nvalue so we can't really compare it to\nanother value using\nexpect instead we're going to call add\nto cart to modify the cart and then\ncheck if this cart looks correct to do\nthat inside here let's call the function\nadd to cart\nbrackets and this function takes one\nstring which is the product\nID so inside here let's give it a string\nand to find a product ID that we can\ntest with we're going to go to the left\nand scroll up and we're going to open\nthe data/ products. JS\nfile and inside here we have a list of\nproducts so let's just take the first\nproduct ID and use it in our test we're\ngoing to select this ID and right click\ncopy and then inside cart\ntest.js in this string we're going to\nrightclick and\npaste so this will add this product ID\nto the cart and now to check if this\ncode is working correctly we're going to\ncheck what the cart look looks like so\nfirst we need to import the cart we're\ngoing to scroll up and since we're\nalready importing from cart. JS to UT\nthe cart we can type a comma\ncart and then at the bottom here we're\ngoing to create a new\nline and first let's check if the card.\nlength is correct so if we assume that\nwe start with an empty cart when we add\na product the cart. length should should\nbe one so we can compare these two\nvalues cart. length and one so to\ncompare values we're going to use the\nfunction expect brackets and we'll\ncompare the\ncart.\nlength and then here we'll use the\nmethod2 equal brackets\n1 so now let's save this\nfile and we're going to run these tests\nto run them we're just going to load\nthis file inside test.html so we'll open\nthis and then at the bottom we'll create\na script\ntag give it a source attribute double\nquotes and we're going to load this file\nso this file is inside the data folder\nso we need to type data SL to go into\nthe folder and then load cart test.js\nand this file also uses import so we're\ngoing to give it the attribute type\nequals module to enable JavaScript\nmodule\nfeatures and one thing that I forgot to\ndo is we moved money test into the util\nfolder so we need to update the source\nattribute to add the utils folder and\nthen slash to go into the folder and\nthen locate money\ntest.js so now let's save this HTML file\nand open this test page in our\nbrowser and now we should have two\nadditional tests and the test that we\njust created should fail if it doesn't\nfail for you you can go into your\nconsole and run local storage. CLE and\nthen refresh the page and it should\nfail so this tells us that the failure\nhappened in the test suite at Dart in\nthe test adds a new product to the cart\nwhich is the one we just\ncreated so it's telling us that the\ncart. length is not equal to one it's\nequal to a different number so why is\nthis happening let's go back to our\ntest open cart\ntest.js and in here remember that we\nassumed the cart starts as empty and if\nwe add a product the card dot length\nwould be one however the cart doesn't\nactually start as\nempty in cart. JS at the top here we're\nloading the cart from local storage if\nthere's nothing in local storage we use\nthis default cart so our starting cart\ndepends on what's inside local storage\nand this is a big problem when testing\nbecause local storage can change if\nthere's an empty card saved in local\nstorage our test will pass but if\nthere's not an empty cart in local\nstorage then this test will fail this is\nknown as a flaky test a test that\nsometimes passes and sometimes fails\neven if we don't change the\ncode now to solve this problem we're\ngoing to use a feature of Jasmine called\nmocks a mock lets us replace a method\nwith a fake version and then we can make\nthe fake version do anything we want for\nexample\nwhen we load the cart from local storage\nwe're using local storage. getet item so\nwe can use a mock to create a fake\nversion of get item and then we can make\nthis fake version do anything we want\nlike return an empty\narray so let's go ahead and create our\nfirst\nmock we'll go back to cart\ntest.js and at the top of this test\nwe're going to create a mock using\nanother function of Jasmine called spy\non and\nbrackets and we'll give spy on two\nparameters the first parameter is the\nobject that we want to mock in our case\nit's local storage so we'll type local\nstorage comma and then we'll give it a\nstring and this string will be the\nmethod that we want to Mark in our case\nwe want to Mark the get item method so\nhere we'll type get item and make sure I\nis uppercase so that we exactly match\nthe method\nname so now this will replace local\nstorage. getet item with a fake version\nand we can make this fake version do\nanything we want to do that spy on gives\nus an object and this object has a\nproperty we can\nuse so at the end we'll type Dot\nand the property called\nan and this result is also an object and\nthis object has a method called dot call\nfake brackets so don't worry about all\nthe Dots here Jasmine just organizes its\ncode so that it reads like English so\nwe're spying on local storage. getet\nitem and call fake so next we're going\nto give call fake a function brackets\narrow and curly\nbrackets and this function is what we\nwant get item to do so we're essentially\noverwriting the original get item with\nwhatever is inside this\nfunction so earlier we said we wanted\nget item to return the empty array for\nthis test so inside this fake function\nlet's make get item return the empty\narray\nnow remember that local storage only\nsupports strings so we need to return\nthis as a string to do that we're going\nto use the code Json all uppercase do\nstringify Open Bracket and close bracket\nso this will convert whatever is in the\nbrackets to a Json string and that's\nwhat we need for local\nstorage so now let's test out this mock\nto see if it works\nbelow this we're going to\nconsole.log\nbrackets and run local\nstorage doget capital I item brackets\nthe string\ncart let's save this file and then open\nthe test page in our\nbrowser and we're going to open the\nconsole so\nrightclick inspect\nand the\nconsole and you'll see that Here Local\nstorage. getet item is no longer loading\nfrom the actual local storage it's\ngiving us an empty array every\ntime so now we have mocked the get item\nmethod however you'll also notice that\nour test is still failing so how come it\nstill\nfails to understand what's happening\nlet's take a closer look at our code\nwe'll go back to our\ncode and inside our tests here we're\nmocking local storage. getet item but\nnotice that above this if we scroll up\nwe import the cart at the top so the\norder of this code matters first we load\nthe cart from local storage and after\nwe're mocking local storage. getet item\nso the card is already loaded at this\npoint and this code doesn't have the\neffect that we\nwant so one way to solve this problem is\nafter we mock local storage here we\nshould reload the cart so inside cart.\nJS just going to give it a little more\nspace to reload this cart after we mock\nwe just need to rerun all of this code\nso let's create a function so we can\nrerun this code at the bottom here we'll\ncreate a\nfunction and we'll call it load from\nStorage brackets and curly\nbrackets and we're just going to move\nall of this code inside the function so\nlet's select all the code up to cart\nequals we'll\nrightclick\ncut and then in the function we'll\nrightclick and paste\nand at the top let's create the cart\nvariable again let cart and\nsemicolon and lastly when we load this\nfile we need to run this function so\nthat we run this code at least\nonce so down here we'll just run this\nfunction load from storage and\nbrackets so let's\nsave so we're basically running the\nexact same code as before except this\ncode is now inside a\nfunction and now in our\ntest after we mock local storage. getet\nitem we're going to reload the cart\nusing this function so first let's\nexport it so we can use it in our test\nwe'll type\nexport and save this file and Insider\ntest let's scroll up to the top we're\nalready importing from cart. Js so we'll\ntype a comma and we'll import load from\nstorage and then we'll scroll down back\nto our test and here after we mock local\nstorage. getet item we're going to load\nfrom Storage brackets and\nsave so this time we mock local storage.\ngetet item first to return an empty\narray and then when we reload the cart\nthis is going to be an empty array and\nthe cart will be empty and now in our\ntest when we add a product to an empty\ncart the cart length will be equal to\none so this test will pass so we can\nactually remove the console.log here and\nsave and check our test\npage and now this test should be\npassing next let's go back to our code\nCod and if we look at the add to cart\nfunction in cart.\nJS so in here at the bottom of this\nfunction you'll notice that we're saving\nthe cart to local storage so this is\ngoing to call local storage. set\nitem however we don't actually want to\nsave to local storage because this is\njust test code we don't want our test\ncode to be modifying local storage or\naffecting our real code\nto prevent this we're also going to mock\nlocal storage. set\nitem so down here we're going to create\nsome new lines at the top of the test\nand we're going to mock local storage.\nset item using the function spy on\nbrackets and we'll give it local\nstorage comma a string and the method we\nwant to mock which is set\nitem and\nsave and remember the order of the code\nmatters so we want to mock local\nstorage. set item first and then we call\nadd to cart so now set item will be\nreplaced with a fake version and this\nwill no longer save to local\nstorage next spyon has another useful\nfeature which is it records every time a\nmethod is used for example what if we\nwant to make sure that add to cart saves\nthe cart to local storage at the end in\nour tests set item is mocked so we can't\nreally check what's inside the local\nstorage instead we can just check if add\nto cart calls set item at some\npoint to check if set item was called at\nthe bottom we can use the function\nexpect\nbrackets and we're going to give this\nthe method that we loed which is local\nstorage. set\nitem and remember that expect gives us\nan object and this object has many\nuseful methods to check stuff like dot\nto\nequal so another method we get from\nexpect is dot 2 have been called times\nbrackets\nso make sure that you write this method\nin cam case two is lowercase and every\nword after starts with a\ncapital so this method checks how many\ntimes local storage. set item was called\nin the code above so we expect it to be\ncalled once inside add to cart so we're\ngoing to give it the number\none so keep in mind that this only works\nif this method has been mocked with spy\non so now let's\nsave and open our test\npage and you can see that all of our\ntests passed and local storage. set item\nwas called\nonce so after we mock a method we can\ncheck how many times this method was\ncalled and we can even check what values\nthis method received but I'll leave that\nas an\nexercise another thing you'll notice\nhere is that each test can have multiple\nexpectations\nand the test will only pass if all of\nits expectations\npass now let's add a few more\nexpectations to this test for practice\nso one thing we can check is we can\ncheck the first product in the cart and\nmake sure that its product ID matches\nthis string here so below this let's use\nanother expect brackets and we're going\nto check the first product in the cart\nusing cart square bracket\n0 so this is going to be an object and\nthis object is going to have a property\ncalled product ID so that here we'll get\nthe dot product\nID and we're going to check if this\nproduct ID is equal to this string so to\ndo that we'll use the dot 2 equal method\nbrackets and we'll give it this string\nhere so let's just select this and\nrightclick\ncopy and here right click and\npaste another thing that we can check is\nthe quantity when we add a new product\nto the cart the quantity should start\nout as one so down here we're going to\nadd another\nexpect\nbrackets and we're going to check the\nfirst product\ncart square bracket\n0.\nquantity. 2 equal brackets one and\nsave now let's open our test\npage and you can see that all of those\nexpectations\npassed now let's move on and create the\ntest for adding an existing product to\nthe cart so we'll go back to our code\nand scroll up to the first test\nhere so first we need to set up the cart\nso that it already contains the product\nthat we want to add to do that we're\ngoing to Mark local storage. getet item\nagain so down here we can just reuse\nthis code so we're going to select this\ncode and right\nclick\ncopy and then in the first test here\nrightclick and\npaste and this time do set up the test\nwe're going to put a product into the\ncart at the beginning and then we're\ngoing to add the same product to the\ncart so inside this cart array let's add\nan\nobject and each product has a property\ncalled product ID so we're going to add\nthis property product ID colon\nand let's just give the same product ID\nthat we used down here so we'll select\nthis and then right click\ncopy and then up here we're going to\nright click and\npaste\ncomma and each product also has a\nquantity so we'll give it a quantity\ncolon and let's just give it one comma\nand also a delivery option so delivery\noption ID colon and let's just give it\nthe string\none and\nsave so now when we do local storage.\ngetet item it will give back this array\nas the starting cart and then we need to\nmake sure that we reload the cart from\nStorage next let's scroll down and let's\ncopy the rest of the tests because it's\ngoing to be very similar so we're going\nto select this code and\nrightclick\ncopy and then up here create some new\nlines and right click and\npaste and also one thing I forgot to\ncopy over is to mock local storage. set\nitem so at the\ntop let's\nalso spy on brackets\nlocal\nstorage comma a string set\nitem so a mock only lasts for one test\nonce that test is finished the method is\nno longer mocked so that's why in this\ntest we also have to mock local storage.\nset\nitem and now in this test we're just\ngoing to modify these expectations so\nthat they make sense for this test\nif we add an existing product to the\ncart the cart. length will still equal\none because these product IDs match and\nwe're just increasing the\nquantity we're still going to call local\nstorage. set item once so this is\ncorrect\nstill the first item in the cart is\ngoing to have this product ID and the\nonly thing we're going to change is that\nthe quantity is now going to increase by\none so it's going to go from one to two\nthis\ntime so everything is the same except if\nwe add an existing product we're just\nincreasing the quantity now let's\nsave and check the test\npage and now the existing product test\nis\npassing and that's it we created tests\nfor the add to cart\nfunction so now let's do some cleanup\nand we're actually going to remove\neverything from local storage since we\nwere modifying it earlier in the test\nand we might have messed it up so on\nthis page we're going to\nrightclick\ninspect and open the console and to\nremove everything from local storage\nwe're going to type the code local\ncapital S\nstorage. clear and brackets and press\nenter and then we'll refresh the\npage now finally let's go into get and\nsave our changes so we'll open our code\nand we can close this one for\nnow and we'll open the get\nSection so in cart. JS at the top we\nbasically put all the code that loads\nthe cart into a function so we can use\nit in our\ntests and then here we moved money\ntest.js into a utils folder in test.html\nwe're loading the new cart test.js file\nand then inside cart test.js we added\nsome tests for the add to cart function\nso now let's create a message describing\nthese\nchanges\ncreate\nautomated tests for add to cart and\ncommit\nthe last thing we're going to learn in\nthis lesson is how to create more\ncomplicated\ntests so far we've only been testing a\nsingle function for example we tested\nthe add to card function as well as the\nformat currency function so these are\ncalled Unit tests because we're only\ntesting one unit or one piece of the\ncode now what if we want to test t a\nwhole page or part of a page and this\nrequires a more complicated test called\nan integration\ntest an integration test tests many\nunits of code or pieces of code working\ntogether for example in our code we're\ngoing to go to scripts checkout thee\norders summary. JS\nfile and we're going to test this render\norder summary function so this function\ncreates a whole section on the checkout\npage and it uses many different\nfunctions and libraries to create the\npage so testing this function will be\nconsidered an integration test because\nit uses many different pieces of code or\nunits of code together so let's start by\ncreating a test file for this function\nso this is in the orders summary. JS\nfile inside our test here let's match\nthe file structure that we have here\nhere so we're going to click test-\nJasmin and first we're going to create a\ncheckout folder so we'll click here to\ncreate a\nfolder and we're going to name it\ncheckout and press\nenter and then inside the checkout\nfolder we're going to create a new file\nso we'll click this to create a new\nfile and we'll name it the same as above\norder summary and ADD test\n.js and press\nenter so by matching the file structure\nit's clear that this test file is going\nto test ORD summary.\nJS and again for the video I'm just\ngoing to drag this file to the top here\nso we can see this and the test side by\nside and now we're going to test this\nrender order summary function so first\nwe're going to import this function into\nto our test file at the top we'll import\ncurly brackets the render order summary\nfunction from a string and we're going\nto locate this file so first we need to\nget out of the checkout folder and out\nof the test Jasmine folder so we'll use\ntwo do do slash do do slash and then\nwe're going to go into the scripts\nfolder and into the checkout folder\nScripts slash checkout slash and we'll\nload order\nsummary.jpg\n[Music]\norder summary\na comma and a function brackets arrow\nand curler\nbrackets and now what test cases should\nwe create render order summary creates a\npart of the page so when we're testing a\npage the two things we need to test is\nhow the page looks and how the page\nbehaves let's start by testing how the\npage looks inside our test Suite we're\ngoing to create a test using it brackets\nand we'll name this test with a\nstring and this will just be a basic\ntest case so we'll describe what this\nfunction does which is\ndisplays the\ncart comma and we'll give it a function\nbrackets arrow and curly brackets and\nnow we're ready to create the\ntest so render order summary usually\ndisplays the cart on the page however in\nour tests where does this cart get\ndisplayed so if we look at the code in\nthis\nfunction and we scroll down here we\ngenerate the HTML for the\ncart and then after we generate the\nHTML we put the HTML inside an element\nwith the class js- order-\nsummary however we don't have this\nelement in our tests so to fix this\nwe're just going to create an element\nwith the class js- order-\nsummary to do this we're going to scroll\ndown and we're going to open the\ntest.html\nfile and then at the bottom we're going\nto go to the body and then inside here\nwe're going to create a div so less than\ndiv and greater\nthan so remember how we said we need to\ncreate create an element with the class\njs- order- summary we're going to create\nthat element and put it inside this div\nso this div is going to act like a\ncontainer the reason we use a container\nis that when we create elements in our\ntest we don't want to be modifying the\nentire body because the body might\ncontain our test results from jasine so\nwe put everything inside a\ncontainer so now let's give this div a\nclass so we can use it in our JavaScript\nwe're going to give it a class equals\ndouble quotes and we're going to call\nthis the js- test-\ncontainer to make it clear this is a\ncontainer for all of our test\ncode and\nsave and now let's get this container\ninto our tests we can do that using\ndocument. query\nselector brackets and a string and we'll\nselect the class using using a js- test-\ncontainer and then inside this container\nwe're going to create an element with\nthe class js- order- summary so to put\nsomething inside this element we're\ngoing to use the property do inner\nCapital\nHTML equals a template\nstring and inside this template\nlet's create a div element less than div\ngreater than less than SL div greater\nthan and as we mentioned we'll give this\nelement a class equals double quotes of\njs- order-\nsummary so this basically takes this\nHTML and puts it inside our test\ncontainer so it will put it inside here\nand now we have the element that we need\nfor render order summary so when we call\nthis function it's going to create the\ncart and display it in this element\nhere next if we look at the code for\nrender order summary and we scroll to\nthe\ntop you'll notice that it takes the cart\nand then displays it on the page but\nremember that by default we load this\ncart from local storage and this can\ncause problems in our test depending on\nwhat is inside local storage so to fix\nthis we're going to mock local storage.\ngetet item again to control exactly\nwhat's inside this cart so let's\nactually open the cart test that we had\nbefore and we're just going to copy\npaste this mock that we created so we're\ngoing to start from here this function\nand we're going to select the code up to\nspy on get item and then\nrightclick copy\nand then down here we're going to\nrightclick and\npaste and one other thing we need to do\nhere is we don't have access to load\nfrom Storage right now so we need to\nimport it at the\ntop let's also copy the import that we\nhad here so we're going to select this\nand then right click\ncopy and then down here we're going to\nrightclick and paste the\nimport and we just need to make sure\nthat this file path locates cart. JS so\ndo/ do slash it's going to go outside\ncheckout and outside test- Jasmin and\nthen it will go inside the data folder\nand then locate card. JS so this file\npath is correct and currently we're not\nusing these two values so we can just\nremove\nthem and now let's set up this cart for\nthis test so we could just use this cart\nhere however to make our test a little\nmore detailed let's open the cart. JS\nfile and at the top here we're going to\nuse this default card instead because it\nhas two products with different\nquantities so we can test more things so\nwe're just going to select this card\nhere and then right click\ncopy and then down here open order\nsummary\ntest and we're going to select this card\nand remove\nit and inside these brackets we're going\nto right click and paste that default\ncart and now that the HTML and the cart\nis set up for this function at the\nbottom we can call the function render\norder summary and\nbrackets and Save\nso now let's run this test file we're\ngoing to open test.html\nand then beneath these tests we're going\nto add another script Tech less than\nscript Source equals and we'll load the\ncheckout slash order summary test.js\nfile and we need to give it the\nattribute type Ty\nequals module because we used\nImports and let's save so we run this\ntest so we'll open our test\npage and you can see that the cart was\nrendered onto this test page and we\nstill have our Jasmine results at the\nbottom here so you notice that when we\nrender this it didn't load any CSS or\nimages and this is okay because we can't\nreally use code to check if the page\nvisually looks correct however we can\nuse this to check the contents of the\npage like if the products and the\nquantities are\ncorrect so first our cart has two\nproducts in it so we can check if there\nwere two products that were rendered on\nthe page let's go back to our\ntests and let's take a look at the\norderers summary. JS file\nand when we render the order summary we\nscroll down for each product in the cart\nwe create an element with the class\ncart--\ncontainer since we have two products in\nthe cart let's check that we created two\nof these elements on the page so we're\ngoing to open the order summary test.js\nfile and then in the first test at the\nbottom of this test we're going to add\nsome lines and we're going to check if\nwe have two of these elements to do that\nwe can use the Dom using\ndocument. query selector all brackets\nand a string and we could select the\nclass card- item D container however\nthis class is used for CSS so remember\nif we're going to use a class in\nJavaScript we start with js-\nlet's add a new class to this element\nthat we can use for the test we'll add\njs- cart D item D\ncontainer so now we're going to select\nall the elements with this class\nusing js- card- item D\ncontainer and let's save the ORD\nsummary. JS\nfile and then down here we're going to\ncheck if we have two of these elements\non the page so again to check something\nin our tests we're going to use the\nfunction expect Open Bracket and let's\ncreate a new line to make it a little\ncleaner and at the end we'll give a Clos\nbracket like\nthis and this code gives us an array of\nelements so here we're going to check if\nthe dot length of this is equal to to\ntwo so expect gives us an object which\nhas a method called dot 2 equal brackets\nand two so this checks if we have two of\nthese elements on the page so let's\nsave and then check the test\npage and scroll to the bottom and you'll\nsee that this test\npassed so that's how we check if we\nrender the page correctly\nnext let's do another check of what we\nrendered on the page so another thing we\ncan test is If the product quantities\nare correct so first we need to get this\nquantity element into our tests so we'll\ngo back to our\ncode and then inside the HTML of the\norder summary we're going to scroll\ndown until we see a div with the class\nproduct- quantity and we're displaying\nthe Quant\nhere so now we're going to take this\nelement put it into our test and check\nthat the quantity here is\ncorrect so to do that let's give another\nclass to this element so we can select\nit using JavaScript so here we'll add\nanother class\njs-\nproduct-\nquantity and we want to check the\nquantity for each product so we need to\nidentify which product this is for we\ncan do that by adding a dash to this\nclass and then inserting using dollar\nand curly brackets the products ID which\nis the matching product matching\nproduct. ID and\nsave and now let's get this element into\nour test so down here we're going to\ndocument. query\nselector\nbrackets and we'll give it a template\nstring because we're going to insert a\nproduct ID so we're going to select this\nclass using a js- product- quantity Dash\nand then insert the product ID so in our\ncart we have two products and let's\nstart with the first product ID now to\nmake this easier let's put this string\ninside a variable so we can reuse it\nbelow so above the this let's create a\nvariable with const call it product\nid1 equals and we're going to select\nthis ID and then right click\ncut and then up here rightclick and\npaste and then we're just going to use\nthis variable down here product\nid1 and then when we're getting this\nelement into our our code we're also\ngoing to insert the product ID which is\nproduct\nid1 but now we're going to check if the\ntext inside is correct so for the first\nproduct we have a quantity of two so the\ntext inside this element should say\nQuantity colon\n2 so to check this at the bottom of our\ntest as usual we're going to use the\nfunction\nexpect Open Bracket and a new line and\nthen here we can remove the semicolon\nand close\nbracket and we're going to get the text\ninside this element now we're not going\nto usein HTML because this element\ncontains a bunch of HTML inside but we\nonly want the text to get just the text\nwe're going to use the property do inner\ntext so we expect the text inside this\nelement to contain quantity colon\n2 however this element also has some\nother text like update and\ndelete so we just want to check if\nquantity 2 is somewhere inside this\nelement so how do we check that to do\nthat we're going to use a different\nmethod of expect called dot to\ncontain and\nbrackets and we're going to give it the\nstring that we want to check for which\nis capital Q quantity colon\n2 so the two contain method checks if\nthis value contains this string so they\ndon't have to be an exact match like\nwith two\nequal as long as quantity colon 2 is\nsomewhere in this element then this\nexpectation will pass and this is\nexactly what we need when this El has\nsome extra text that we don't really\nneed to\ncheck so now let's click our test file\nand\nsave and open the test\npage and scroll to the bottom and you'll\nnotice that the test passed so for the\nfirst product we're displaying the\nquantity of two\ncorrectly let's also check the quantity\nof the second product we'll go back to\nour\ntests and and just like before let's\ncreate a variable to store this ID so\nwe'll create a variable with const\nproduct\nid2 equals and we'll select this\nID and right click\ncopy and then here right click and\npaste and then we'll remove\nthis and use the variable product\nid2 and then at the bottom we're going\nto get the quantity element for Product\n2 so let's just copy this code because\nit's very similar we'll select it right\nclick copy and then down\nhere right click and\npaste so this time we're going to get\nthe quantity element for product ID\n2 and in our cart product two has a\nquantity of one so down here we're going\nto check if the text contains quantity\ncolon 1 and\nsave and let's open our test\npage and scroll to the\nbottom and this test passed so we're\ndisplaying the quantity of both products\ncorrectly on the\npage the second thing we can test in an\nintegration test is how the page behaves\nfor for example on this page we can\nclick the delete link to remove a\nproduct from the page so let's create a\nnew test to make sure that the delete\nlink behaves\ncorrectly we'll open our test\ncode and at the bottom we're going to\ncreate a new test using the function it\nand\nbrackets we'll give it a name and let's\ndescribe what the behavior should be\nwhich is removes a\nproduct comma and a function brackets\narrow and curler\nbrackets now let's do the same setup as\nthe first test so we start with two\nproducts in the cart so we can select\nfrom load from storage and we'll select\nall of this code up here and then\nrightclick\ncopy and at the bottom\nwe're going to right click and\npaste so this will set up the HTML\nelement that we need for the order\nsummary as well as the\ncart and after this let's render the\norder summary using the function render\norder summary and\nbrackets so once we've displayed this on\nthe page we're going to get the delete\nlink and click it so first let's get the\ndelete link into our code so we'll go to\nthe orders summary. JS file and inside\nthe HTML we're going to scroll down a\nbit till we see the delete quantity link\nand let's test the delete link for the\nfirst product in the\ncart so first we need to add a class to\nthis element so we know which product\nthis is for so here we're going to add a\nclass JF s- delete\ndink Dash and insert the product ID\nwhich is the matching\nproduct\ndoid and I'll add a new line to make the\ncode a little bit cleaner and now we can\nsave and then down here we're going to\nget the delete link for the first\nproduct ID so at the bottom we use\ndocument do query\nselector\nbrackets and we'll give it a template\nstring because we're going to insert the\nproduct ID and we'll select this class\nusing js- delete\ndlink D and then insert dollar curly\nbrackets product\nid1 and now we need to click this delete\nlink to remove the first product from\nthe page and from the cart to click an\nelement using Code we can just get it\nusing the Dom and then use the method\ndot click and\nbrackets so this will click delete on\nthe first product and remove it so let's\nsave and take a look at our test\npage and unfortunately this test failed\nso let's take a look at the details of\nthe failure to figure out how to fix it\nso it's telling us that we cannot set\nproperties of null this means that a\nvalue in our code is null and we're\ntrying to give it a\nproperty and here it will tell us which\nline we got this error from so this\nerror happened in our test file and the\nline that created this error was in Ord\nsummary. js on line\n132 or whatever line that you see here\non your page\nso inside our code we're going to open\norders summary.\nJS and I'm going to scroll down to line\n132 and you can scroll down to the line\nthat you got on your\npage so this line of code is actually\npart of the code that we run when we\nclick delete so remember that when we\nclick delete we also update the payment\nsummary on the right side of the page\nand that's what this line does now the\nreason this is not working is if we open\nthe payment summary JS file and we look\nat what this does at the bottom after we\ngenerate the HTML we try to put the HTML\nin an element with a class js- payment D\nsummary and this element does not exist\nin our tests so one way to fix this is\nto add this element to our\ntest so let's open our test again\nwe'll open the order summary\ntest.js and then we'll scroll\nup and then here when we create the\norder summary element we're also going\nto create the payment summary\nelement so we'll create a less than div\ngreater than less than SL div greater\nthan and here we'll give it a class\nequals double quotes and we'll give the\nclass that the payment summary needs\nwhich is\njs- payment D\nsummary and\nsave so now that the payment summary\nelement is set up we can open our test\npage and our test should no longer have\na failure so you also notice that the\npayment summary got rendered or\ndisplayed on the\npage okay so in our tests we only\nclicked the delete link for the first\nproduct but we didn't actually check if\nthe page looks\ncorrect and that's what it shows here\nwith this yellow dot this test has no\nexpectations\nyet so let's go back to our test and add\nsome expectations at the bottom so we'll\nscroll down and down\nhere after we click delete for the first\nproduct we expect that there's only one\nelement left on the page for the\ncart so in our first test we actually\nhad a check for this so we can scroll up\nand here we check if we have two cart\nitem containers on the page so let's\njust reuse this check because it's very\nsimilar we'll select it right click\ncopy and then down\nhere we're going to right click and\npaste and this time we only expect one\ncart item container to be left on the\npage so so we'll change this to one so\nwe'll\nsave open the test page scroll down and\nnow this test\npassed let's also do a more detailed\ncheck so we're going to check that the\nfirst product is no longer on the page\nwe'll go back to our\ntests and then down here we're going to\nget the card item container for the\nfirst product we use\ndocument. query selector\nbrackets and to get the element for the\nfirst product we're going to open orders\nsummary. JS and then scroll up in the\nHTML until we find the cart item\ncontainer\nelement and we're going to look for this\nclass right here which tells us which\nproduct this element is for so in here\nwe'll give it a template string because\nwe'll in insert the product ID and we'll\nlook for this class using a\njs-- item Das container Dash and insert\nthe first product so product\nid1 and because we removed this product\nfrom the page we expect this result to\nbe null so we'll use the function expect\nopen bracket and a new line and then\ndown here a close bracket and we'll use\nthe method\ndo2 equal brackets and we expect this to\nbe null and\nsave let's also check that the second\nproduct is still on the page because we\ndidn't delete\nit so let's just make a copy of this\ncheck we'll select it right click copy\nand then\nhere right click and\npaste and we'll get the element for\nproduct ID 2 this time and we want to\nmake sure that this exists so that it is\nnot equal to null in Jasmine to check if\nsomething is not equal\nto expect gives us another property we\ncan use called dot\nnot so if we use theot property it will\ncheck the opposite of whatever is next\nso this will check if this value is not\nequal to null so remember the code for\nJasmine is designed to read like\nEnglish let's save and check the test\npage and scroll\ndown and this test passed so we're\ndisplaying the correct products on the\npage after\ndeleting now there's one more thing that\nwe need to check here which is after\ndeleting is the cart array itself\nupdated so we'll go back to our code and\nadd that\ncheck so first we need to import the\ncart so we can use it in this test we're\ngoing to scroll up to the\ntop and we're already importing from\ncart. JS so we'll add a comma and import\nthe\ncart and then at the\nbottom we're going to check if the card\nis correct\nso the cart started out with two\nproducts inside after removing the first\nproduct the card should have a length of\none and the remaining product should\nhave product id2 so let's add both of\nthese checks at the bottom so we'll\nscroll back\ndown and we'll use expect\nbrackets and we'll check if cart. length\ndo 2 equal brackets\n1 and we'll also expect brackets and\nwe'll check the first product in the\ncart which is cart square bracket 0 and\nwe'll check its product ID do2\nequal and it should equal product ID 2\nso product id2\nand\nsave so let's open our test\npage and scroll to the bottom and this\ntest still passed so once we click\ndelete the card array is also\ncorrect so that's how we create an\nintegration test it tests many units of\ncode or pieces of code working together\nand it lets us test how our page looks\nand how our page behaves\nnow there's one thing that I forgot to\ndo when we created these tests if we\nlook at our\ncode and I'm going to open orders\nsummary.\nJS when we click delete at the bottom\nhere it uses a function called remove\nfrom\ncart and if I look at the code for this\nfunction which is right here remove from\ncart this function actually saves the\ncart to local storage and and calls\nlocal storage. set\nitem however it's recommended not to\nmodify local storage in our test so\ninside the order summary test file we\nshould also mock local storage. set item\nin this test so we'll scroll to the\ntop and at the start of the test let's\nmock set item using spy on\nbrackets local\nstorage comma the string set\nitem and\nsave and we'll open the test page and\nmake sure that the test still passes and\nwe might have messed up our local\nstorage because of that mistake so let's\nreset local storage again we'll right\nclick on this page\ninspect open the\nconsole and we'll type the code local\nstorage. CLE brackets and press\nenter and refresh the page just to be\nsafe now another thing that we might\nwant to add is that when we render the\norder summary on the page it's taking up\na lot of space and it pushes the test\nresults to the bottom so what we can do\nis after our test we can actually remove\nall of this\nHTML so let's go back to our code\nin the order summary test file at the\nend of the first test we'll create some\nnew lines and remove the HTML that we\ncreated to do that we can scroll up to\nthis code so to remove the HTML we can\njust set this element inner HTML to the\nempty string so we'll select this code\nright click\ncopy and then down here right click and\nand\npaste so in our test all the HTML we\ncreated was placed inside this test\ncontainer and we're just going to remove\nall that\nHTML by setting the inner HTML to the\nempty string and we'll do the same thing\nfor the second test so we'll select this\ncode rightclick\ncopy and then down here at the\nbottom we'll right click and\npaste so this is just some cleanup we\ncan do at the end of each test let's\nsave and look at our test\npage and now all the HTML that we\ngenerated is gone and we can see the\ntest results more\nclearly lastly we're going to learn a\nshortcut we can use in Jasmine called\nhooks a hook lets us run some code for\neach test for example\nif we go back to our code notice that\nbefore each of our tests we do a bunch\nof setup here so we can actually share\nall of this code between our two tests\nusing a hook so to create a hook we're\ngoing to scroll up to outside of both of\nthese\ntests and at the top of the test Suite\nwe're going to use another function\nprovided by Jasmine called before\ncapital E\neach brackets and we'll give this a\nfunction brackets arrow and curler\nbrackets so this is called a before each\nhook and it will run this function\nbefore each of our\ntests so inside this function we can put\nour setup code so that we run the setup\ncode before each of our\ntests let's actually take the setup code\nfor the second test because it's a\nlittle more\ndetailed so down here we're going to\nselect the code starting from render\norder summary all the way up to mocking\nlocal storage. set item and we'll\nrightclick and cut this\ncode and remove these new\nlines and then at the top inside before\neach we're going to rightclick and paste\nso now before each of our tests it's\ngoing to run this function and it's\ngoing to run all of our setup code so\nthis is a great way to share code\nbetween our tests and remove\nduplication so now that we're running\nthis inside before each if we scroll\ndown to the first test we don't have to\nrun this code again so we can actually\nremove\nit and we'll remove this Mock and we'll\nremove the render order summary as\nW and all we're left with are the\nexpectations for our\ntest now before we save we need to fix\none thing with this code here so right\nnow these two variables are inside this\nfunction and because of scope these will\nbe contained inside this function and we\ncan't use it down here in our\ntests so to fix this we can just move\nthese variables outside of this function\nup here so we're going to select these\nlines and then right click\ncut and up\nhere we're going to right click and\npaste so now any code inside this outer\nfunction can use these two variables\nincluding our\ntests so now let's\nsave and check the test\npage and everything is still still\npassing so that's how we use a hook to\nrun some code before each test now\nbefore each is not the only hook that we\ncan use Jasmine provides several hooks\nthat we can use in our\ntests another common Hook is after each\nwhich lets us run a function after each\ntest so this is really useful for\ncleanup code like we have down here when\nwe remove the\nHTML all leave using after each as an\nexercise now let's go into git and save\nour changes and I can close these three\nfiles at the top for\nnow so we'll open the git\nsection and then inside orders summary.\nJS we added some classes that we're\ngoing to use in our\ntests inside test.html we are loading\nour order summary test file and we also\ncreated a test container where we're\ngoing to put our HTML that we\ngenerate and then for the order summary\ntest file this contains the test that we\ncreated for the order\nsummary now let's create a message\ndescribing our\nchanges create automated tests for order\nsummary and commit\nnow that we've created all these tests\nfor our project when we make some\nchanges to our code we can just open the\ntesting page and it will rerun all of\nour\ntests so here's the process that we do\nwhen we write code first we make changes\nto our code and then we rerun the tests\nto make sure that everything still works\nand finally we save our changes into\ngit now before we end the lesson we're\ngoing to do one more cleanup we'll go\nback to our\ncode and we'll open our\nfiles and here we usually organize all\nof our tests into a folder called tests\nhowever in this lesson we named this\nfolder test- Jasmin because we wanted to\ncompare this folder to tests that were\ncreated without a testing framework but\nnow that the lesson's over we're going\nto rename test- Jasmine to just test to\nmake it more\nstandard first we need to rename this\nfolder up here so we'll right\nclick\nrename and let's rename it to test-\nsimple because this folder contains\ntests that were created without a\nframework let's press enter\nand now we can rename test- Jasmine to\ntest by right clicking\nrename and rename it to tests and press\nenter another thing we can do is we're\ngoing to drag test- simple into the test\nfolder so that all of our tests are\ncontained in one\nfolder so if it asks you to update the\nImports you can click yes\nand we also need to open money test.js\nin the test- simple folder because it\nupdated the Imports and then save this\nfile finally we're going to run all of\nour tests again to make sure everything\nstill works after we move things around\nso because test.html is inside a\ndifferent folder now we need to reopen\nthis with live server\nso we'll rightclick and click open with\nlive\nserver and it'll show us that all the\ntests are still passing so our code is\nstill\ncorrect so now we can close some of\nthese extra tabs\nhere and save our changes into git we'll\nopen the git\nsection and all of these changes are\nrelated to renaming the folders\nso we'll give a message at the\ntop rename test- Jasmine\nfolder to\ntests and\ncommit and that's the end of this lesson\nin this lesson we learned how to test\nour code using manual and automated\ntests we learned how to organize our\ntest using test cases and test Suites we\nlearned how to use a testing framework\nlike Jasmine to help us write tests\neasier we learned how to Mock and spy on\nmethods we learned how to test web pages\nusing integration tests and we learned\nabout hooks which lets us share code\nbetween our\ntests here are some exercises to help\nyou practice what we learned in this\nlesson e\nin the rest of this course if you get an\nerror in your project but your code\nlooks correct you may have some bad data\nsaved in local storage to fix this you\ncan try running local storage. CLE in\nyour console to remove everything from\nlocal\nstorage and then refresh the\npage if you see an error like this\nobject object that means that you saved\nsomething directly into local storage\nbut you have to jason. stringify it\nfirst so check your code to make sure\nthat you're always stringifying before\nsaving to local storage and then clear\nyour local storage and refresh the page\nin this lesson we're going to learn\nobjectoriented\nprogramming objectoriented programming\nor oop is another style of programming\nso it's another way that we write our\ncode it's useful to know because many\nprogramming languages use\noop now how do we use objectoriented\nprogramming object-oriented programming\nis basically organizing our code into\ninto\nobjects let's look at an\nexample we're going to go to our\ncode and we're going to scroll up and\nopen data/ cart.\nJS inside this file we have the code for\nour cart and you'll notice that for the\ncart we have some data at the top and\nthen we have a bunch of functions at the\nbottom that modify the cart and these\nare separate from each other the data\nand the functions so this style of\nprogramming that we've been using\nthroughout this course is called\nprocedural programming procedure means a\nset of step-by-step\ninstructions and this is basically a\nfunction so in procedural programming we\norganize our code into separate\nfunctions like we did\nhere on the other hand in objectoriented\nprogramming we organize all of this code\ninto an object so we put everything\ntogether into an\nobject so let's do an example and\nconvert this cart code into\nobjectoriented\nprogramming we're going to click cart.\nJS and inside this folder we're going to\ncreate a new file by clicking\nhere and let's name this file\nC- oop or objectoriented\nprogramming. JS and press\nenter and now we're going to copy all of\nthe code in cart into this new file so\nlet's open this and we'll click in this\nfile and then we'll type control a or\ncommand a to select all the code and\nthen right click\ncopy and inside C- oop we're going to\nrightclick and paste\nand let's scroll back up to the\ntop and now to convert this code into\nobjectoriented programming we're going\nto group all the data and the functions\ntogether into an object first at the top\nlet's create an object that we can put\nall of these inside\nof so we'll create a variable const\nlet's call it cart equals and object\nand now we're going to group our data\nand all of our functions into this\nobject so let's do it step by step and\nwe'll start with this cart\nvariable as a reminder cart semicolon is\nactually a shortcut for cart equals\nundefined to make things easier to\nunderstand let's actually write this out\nin full instead of using the shortcut so\nwe'll type cart equals undefined\nand now we're going to move this into\nthe object so we'll select this\nline and then\nrightclick\ncut and then inside the object we're\ngoing to rightclick and\npaste now inside an object we can't use\nthe word export or\nlet so to move a variable into an object\nwe're going to convert it into a\nproperty and a value so we'll remove\nthese\nwords and then type cart and colon\nundefined and remove the semicolon and\nreplace it with a\ncomma so this is the same thing as cart\nequals undefined but we move that value\ninto an\nobject now one problem here is that if\nwe access this cart property we're going\nto do cart. cart which can be a bit\nconfusing so let's actually rename this\nproperty to cart capital I items instead\nto make it a bit more clear that this\ncontains the items in the cart or the\nproducts that are in the\ncart next we're going to group all of\nour functions into this object as well\nso let's create some new\nlines and we're going to move this\nfunction inside here so let's select\nthis\nfunction and then\nrightclick\ncut and inside the\nobject we're going to\nrightclick and\npaste and again we can't use the word\nexport inside an object so we're going\nto convert this into a property and\nvalue as\nwell so let's remove these words\nand let's make the property name load\nfrom storage and then we'll type a colon\nand we'll make the value a\nfunction brackets and curly\nbrackets so that's how we move a\nfunction into this object now make sure\nthat you use a regular function syntax\nhere and not an arrow function and I'll\nexplain why later in this\nlesson now as a reminder when we have a\nfunction inside an object\nwe call this a\nmethod also JavaScript has a shortcut\nfor methods called the shorthand method\nsyntax so instead of typing colon and\nfunction we can actually just remove\nthis\ncode and just type brackets and curly\nbrackets after the function name and\nthis is a shortcut for the code that we\nhad\nbefore now the code inside this function\ndoesn't actually work anymore because\ncart was actually renamed to cart items\nso we have to rename this variable so\ninstead of cart we're going to do cart\ndot cart\nitems to access this value and same\nthing here cart do cart\nitems and here cart\ndoart\nitems so so this code Works however we\nhave a small problem here if we change\nthe name of the object up here this code\nwill no longer\nwork to solve this problem JavaScript\nhas a feature called this this gives us\nthe object that contains this function\nso it gives us this outer object up here\nso to improve our code we're going to\nchange from using a variable named cart\nto this and here as well this. cart\nitems and this Dot card\nitems so this will give us the outer\nobject and now this code will always\nwork and it doesn't matter what the\nvariable name\nis the last thing we're going to change\nin this function is we're currently\nloading from local storage\ncart however our original cart was also\nloading from local storage cart so let's\nactually change this to C- oop so that\nwe don't affect our original\ncart let's move on and we're going to\nmove the other functions into this\nobject so let's go down to the next\nfunction which is save to storage we're\ngoing to select this and then\nrightclick\ncut and then inside this object at the\nend we're going to add a comma and some\nnew\nlines and we're going to rightclick and\npaste and we can't use the word function\nat the front here so let's remove this\nword and just use the shorthand method\nsyntax so this is a shortcut for colon\nfunction and here we're saving to local\nstorage cart\nso let's also change this to C- oop so\nwe don't affect our original cart so\nwe'll change it to card-\noop another thing we need to change is\nthat the cart was renamed to cart\nitems so here we're going to change from\ncart to this which gives us the outer\nobject and then dot cart items\nwhich is this property so it should do\nthe same thing as before except this\nfunction is now inside an\nobject let's continue and move another\nfunction into the object so we're going\nto do add to cart this time so let's\nselect this\ncode and then\nrightclick\ncut and inside the object we're going to\nadd a comma and some new lines and then\nrightclick and\npaste so again instead of using export\nfunction we're just going to remove this\ncode and use the shorthand method syntax\nwhich is a shortcut for this\ncode and now let's update the code\ninside this function as well so instead\nof the cart we rename this to this. cart\nitems so we'll change it to this do cart\nitems\nand then down here we're going to change\nfrom cart to this. cart\nitems and also the function save to\nstorage was moved inside the object so\nnow to access this function we're going\nto get the outer object again using this\nand then dot save to storage so down\nhere we'll add this dot in front to\naccess the function inside the\nobject and now let's move on and move\nthe next function into the object so\nwe'll select this\ncode and then\nrightclick\ncut inside the object add a comma and\nsome new lines and right click and\npaste we'll remove export\nfunction and use the shorthand method\nsyntax and again we'll change from cart\nto this. cart\nitems we're going to change cart here to\nthis.c cart\nitems and change save to storage to this\ndo save to\nstorage so we access save to storage\ninside this\nobject next let's move this last\nfunction into the object so we'll select\nthe code and then rightclick\ncut and inside the object we're going to\ntype a comma and some new lines right\nclick and\npaste we'll remove export function and\nuse the shorthand method\nsyntax and update the code in this\nmethod so we'll change cart to this do\ncart\nitems and save to storage to this Dove\nto\nstorage now let's remove the extra\nlines and the last thing we need to\nupdate is that load from Storage was\nmoved inside the cart object so to\naccess this function at the front we're\ngoing to type\ncart. load from storage and save this\nfile and that's it this is the basic\nidea behind objectoriented programming\nwe organize our code into objects so we\ngroup the data and the functions\ntogether into an object like\nthis now let's talk about why do we use\nobjectoriented\nprogramming objectoriented programming\ntries to represent the real\nworld in the real world a cart is a\nphysical object object so in\nobjectoriented programming we represent\nthis physical object as a digital object\nor in this case a JavaScript\nobject a physical cart can have products\ninside so our JavaScript object can also\nhave products\ninside a physical cart also has actions\nwe can take to modify the cart like we\ncan add a product or remove a product\nour JavaScript object also has actions\nwe can take to modify the cart like the\nadd to cart function or the remove from\ncart\nfunction so as you can see\nobjectoriented programming tries to\nrepresent the real world we take a\nphysical object like a cart and\nrepresent it as a digital object like a\nJavaScript\nobject and some people feel feel that\nthis makes the code more intuitive or\neasier to\nunderstand now let's try out the code in\nthis object to make sure it actually\nworks we're going to scroll down to the\nbottom and\nhere we're just going to type\nconsole.log the\ncart and save this\nfile and now let's load this code into\nthe project to do that we're going to\nopen the scripts folder and open the\nfile checkout.\nJS and at the top below the Imports\nwe're going to import our new file so\nlet's type\nimport and we're going to use a slightly\ndifferent syntax we're just going to\ntype a\nstring and give it the file that we want\nto load so we need to load C- oop. Js\nso first we need to get out of the\nscripts folder using do slash and then\ngo into the data folder data slash and\nload C-\noop.\nJS so this is another syntax we can use\nfor imports this just runs all the code\ninside this file without importing\nanything which is what we need in this\nsituation so let's save this file\nand then open this page in the browser\nso if you don't have this page open you\ncan scroll down to checkout. HTML and\nthen right click and open with live\nserver I already have this page open so\nI'm just going to open that\nTab and if the page is too big we can\nzoom out by pressing control minus or\ncommand minus a few\ntimes and now let's check the console to\nsee what the cart looks like on this\npage we're going to\nrightclick and click\ninspect and then open the\nconsole and in the console we'll see\nthis cart object so inside this object\nwe have the data as well as all the\nfunctions for our cart but it's grouped\ninside an object and you'll see that the\ncode still works the same as before cart\nitems has a the two default\nproducts if we look at our code and open\ncard-\no at the beginning we run cart. load\nfrom storage and then inside this\nfunction if we scroll up it will give\nthe cart items this default cart with\ntwo products inside and that's what we\nsee in the console\nhere so we know that the code inside\nthis object still works works the same\nway as\nbefore so now let's try another method\nto make sure that it's working so let's\ntry using the add to cart method to add\na product to the cart items up here so\nwe'll scroll\ndown to the bottom and then above\nconsole.log cart we're going to call add\nto cart now add to cart was saved inside\nthis cart object so to access it we're\ngoing to type\ncart. add to cart and\nbrackets now add to cart takes one\nparameter which is a string and this is\nthe product ID that we want to add so to\nfind a product ID we can go to the data\nfolder and products. JS and then inside\nhere we have this list of products so\nlet's actually scroll down to the third\nproduct which is right here so this\nt-shirt product and we're going to add\nthis product ID to the cart so let's\nselect this ID we're going to\nrightclick\ncopy and then inside C-\noop inside the string we're going to\nrightclick and paste that product\nID and let's\nsave and let's check the console\nso I'll open the console\nHere and Now inside the cart object if\nwe expand it cart items now has three\nproducts because we just added a new\nproduct to the cart so this shows that\nall of the code is working the exact\nsame way as before we just organized it\ninto an object and that's objectoriented\nprogramming now that we're done with\nthis example let's remove these two\nlines of\ncode and\nsave next another reason we use\nobjectoriented programming is it's easy\nto create multiple objects for example\nthe real amazon.com has a feature called\nAmazon business where you can have a\nseparate cart for your business\npurchases so how do we create two\nseparate carts in our code with\nobjectoriented programming this is easy\nwe can just make a copy of the cart\nobject so we can scroll up in this\ncode and I'm just going to click this\nArrow here beside the card variable to\ncollapse this code and to create a\nseparate cart for business purchases\nwe're just going to select this code and\nthen right click\ncopy and at the\nbottom right click and\npaste and now we have two separate cards\nso let's scroll up to the top of the\nsecond cart which is right here and we\nsaid that we wanted this card for\nbusiness purchases so let's rename this\nto\nbusiness Capital C\ncart and when we load from Storage let's\nload it from cart Das business instead\nso that it doesn't conflict with the\ncart up\nhere and if we scroll down same thing in\nsave to storage let's save this cart to\ncart Das\nbusiness and finally let's scroll down\nto the\nbottom and here instead of cart. load\nfrom Storage we're going to change this\nto business cart. load from Storage\nand that's it we just created a\ncompletely separate cart simply by\ncopying this object so object-oriented\nprogramming makes it easy to create\nmultiple\nobjects so now let's console.log both of\nthese cards to see what they look like\nwe're going to scroll to the\nbottom and here we're going to\nconsole.log the\ncart and\nconsole.log the business cart and\nsave and if we open the console for the\ncheckout\npage it will show us that we have two\ncarts the regular cart has three\nproducts inside and the business cart\nhas two products inside and these are\njust the default products that we get\nwhen we first load the cart\nso you can see that these two cards are\ncompletely separate from each\nother in the real world we can have two\nphysical cards that are completely\nseparate from each other and in\nprogramming we can also have two cards\nthat are completely separate from each\nother by simply making a copy of the\nobject so again object-oriented\nprogramming tries to represent the real\nworld\nnow currently there's an obvious problem\nwith how we're creating multiple objects\nwhich is we're copy pasting a lot of\ncode and this can make our code messy\nand hard to manage so now we're going to\nmake our code cleaner by using a\nfunction to create multiple\nobjects so first let's delete this\nbusiness card that we copy pasted so\nwe're going to select this\nobject and then up to here the business\ncard we're going to remove\nit and now instead of copy pasting this\nobject we're going to use a function to\ngenerate these objects so at the top of\nthis file let's create a new\nfunction and we'll name it capital c\ncart brackets and curly\nbrackets so by the way in objectoriented\nprogramming a naming convention is to\nuse Pascal case for things that create\nor generate objects in Pascal case we\nstart every word with a capital\nincluding the first word so that's why\nwe started cart with a Capital\nC now inside this function we're going\nto create cart\nobjects so let's actually move this\nobject into the function so we can\ncreate it using the function so we're\ngoing to select this object to here and\nthen we'll right\nclick and cut\nand then move it into the function by\nclicking in the function and then\nrightclick and\npaste so now every time we run this\nfunction it will generate a new cart\nobject and we don't have to copy paste\nthis code over and over to create\nmultiple\nobjects so at the bottom I'm going to\nclick this Arrow to collapse this object\nfor now and at the bottom of this\nfunction we're going to return this C\nobject so we can use it outside the\nfunction okay now let's give this a try\nand we'll use this function to generate\ncart objects so first let's create the\nnormal cart using const cart make it\nequal and we'll run this function to\ngenerate an object Capital C cart and\nbrackets and let's generate another\nobject using the function using const\nand we'll name it business\ncart equals Capital C cart and\nbrackets and we'll still load from\nstorage for both of these and then\nconsole log both of\nthese so basically instead of copy\npasting all the time we're going to use\na function to generate\nobjects so now let's\nsave and then open the\nconsole and and now we have two cart\nobjects\nagain however now both of these carts\nhave three products\ninside but before the regular card had\nthree products and the business card had\ntwo\nproducts so what\nhappened if we go back to our code and\nlook inside this cart\nobject you'll notice that we're loading\nfrom the same key in local storage which\nis C- o that means every cart that we\ngenerate will be getting its data from\nthe same place in local\nstorage so to fix this we're going to\nreplace C- oop with a parameter so\ndifferent carts can use a different key\nin local storage so at the top let's\ncreate a parameter called local storage\nkey and then instead of using the same\nstring every time we're going to use the\nparameter local storage\nkey and the same thing for save to\nstorage instead of saving to the same\nkey every time we're going to replace\nthis with the parameter local storage\nkey and finally when we run this\nfunction at the bottom\nhere we need to give the function a\nlocal storage key so for our regular\ncart let's use the string cart C-\noop and for the business cart we can use\na different key like the string cart Das\nbusiness so now these two carts will\nload from different keys in local\nstorage and they can have different data\nso let's save and then check the\nconsole and now our regular card has\nthree products and our business card has\ntwo products like\nbefore so let's go back to our code and\nthis is a better way to create multiple\nobjects instead of copy pasting a bunch\nof code every time we can create a\nfunction that generates\nobjects so now let's save this example\ninto git we'll go into our git\nsection and then at the top here we\ncreated a function to generate these\nobjects and in checkout. JS we are\nloading that c - oop practice file so\nwe'll type a message to describe these\nchanges create oop or objectoriented\nprogramming version of cart and\ncommit next we're going to learn an even\nbetter way to generate objects\nobject-oriented programming has a\nfeature called a Class A Class is\nspecifically designed for generating\nobjects a class is basically an object\ngenerator So currently if we open our\ncode and then open C-\noop we learn how to use a function to\ngenerate objects in objectoriented\nprogramming so now we're going to switch\nthis to using a class to generate these\nobjects instead because classes are\ncleaner and have more features than\nusing a function so first let's create a\nnew file for learning\nclasses inside the data folder we're\ngoing to click C- oop and then create a\nnew\nfile and we'll name this file cart DCL\nclass. JS and press enter\nso first let's copy over all the code so\nwe can compare it we're going to open C-\noop click this file and then press\ncontrl a or command a to select the code\nand right\nclick\ncopy and in\nC-Class we're going to right click and\npaste and we'll scroll to the\ntop and at the top we're going to create\nour first class class using the word\nclass and now we're going to give a name\nto this class so let's name it the same\nas here Capital C cart and then curly\nbrackets as a reminder a naming\nconvention is to use Pascal case for\nthings that generate objects so that's\nwhy we start this cart with a Capital\nC so this is a class A Class is\nbasically an object\ngenerator so now inside the class we're\ngoing to put the properties and methods\nthat we want for each object that we\ngenerate so here we have our properties\nand methods we're just going to move\nthem into the\nclass so first let's select the card\nitems\nproperty we're going to right click\ncut and then move it into the class by\nclicking in here and then right click\nand\npaste and classes use a slightly\ndifferent syntax than objects so to\ncreate a property called cart items\nwe're going to type the property name\nand instead of a colon we're just going\nto make it equal to undefined and\ninstead of a comma at the end we're\ngoing to put a\nsemicolon so that's how we add a\nproperty to a class and now every object\nthat we generate will have this property\njust like we did\nbefore next let's move the methods into\nthe class so we'll delete these lines\nfor now and we'll move load from Storage\nso we'll select this method and then\nrightclick and\ncut and inside the class we're going to\nmove it by right clicking and\npaste and classes use a slightly\ndifferent syntax to create methods as\nwell so instead of having a comma at the\nend we can just remove it and every\nobject that we generate will now have\nthis\nmethod so now let's move the rest of the\nmethods into this class we're going to\nscroll down and we'll move save to\nstorage so we'll select the method and\nright click\ncut and at the bottom of the class we're\ngoing to right click and paste\nand remove the comma at the\nend same with add to cut we'll select\nthis\nmethod and then right\nclick\ncut and inside the bottom of the class\nwe're going to rightclick and\npaste and remove the comma at the\nend as well as remove from cart so we'll\nselect this\nmethod right click\ncut and at the bottom of the class right\nclick and\npaste and remove the comma at the\nend and finally we'll move the last\nmethod update delivery\noption and right click\ncut inside this class we're going to\nright click and\npaste so this method did not have a\ncomma at the end so this looks\ngood so that's how we create a class we\nbasically give it some properties and\nmethods and now when we generate objects\nusing this class every object that we\ngenerate will have these properties and\nmethods now one thing we need to fix\nhere is that local storage key doesn't\nexist anymore to fix this we're going to\nsave this in a property instead so at\nthe top\nwe're going to give a new property to\nevery object that we generate called\nlocal storage key and make it equal to\nundefined to\nstart and then inside the methods we're\ngoing to switch this to this. local\nstorage key so this is going to point to\nthe object that we generate just like\nbefore and then local storage key will\naccess this property\nand another place we need to fix this is\ninside save to storage so instead of\nusing a variable local storage key we're\ngoing to use the property this. local\nstorage\nkey and that's it so if we scroll\ndown we basically converted this whole\nfunction into a class so now we can\nremove it\nand the final step here is now that we\nhave this class let's use it to generate\nthese two objects\nagain to do that instead of this code\nwe're going to type the word new and\nthen type the class name which is\ncapital c cart and\nbrackets so you see that a class uses a\nsimilar syntax as a function except we\nuse the word new in front of\nit so this generates a new object using\nour\nclass and this new object will have all\nthe properties and methods that we added\nabove so let's do the same thing for the\nbusiness card we'll use the class to\ngenerate it we'll remove this\ncode and then we'll type new and the\nclass name Capital C cart and brackets\nto generate another object using this\nclass now there's one thing we need to\nfix here each of these objects has a\nproperty called local storage key and\nthey're currently undefined so we need\nto set this\nproperty so at the bottom here we're\ngoing to type\ncart. local storage key and we'll make\nit\nequal and we'll use the same string as\nbefore which is C-\noop and we'll do the same thing for the\nbusiness cart we'll type the\nbusiness\ncart. local storage\nkey and make it equal the same string\nthat we had before which is cart Das\nbusiness and then we'll load the cart\nfrom Storage as well as the business C\nfrom storage and we'll console.log\nthem so we have the same code as before\nexcept we converted it from a function\nto a\nclass so now let's\nsave and we're going to run this code So\ncurrently if we go into our code and\nopen checkout.\nJS we're still loading C-\noop so we're just going to update this\nand load\nC-Class instead and\nsave and we'll open cart Das class\nagain and now if we open the\nconsole you can see that we created two\ncart objects just like we did\nbefore and the regular card has three\nproducts inside and the business card\nhas two products\ninside and if we click this Arrow beside\nprototype we can see the methods that\neach of these objects have\nso we're basically creating the same\nobjects that we had before except this\ntime we used a\nclass by the way each object that we\ngenerate from a class is called an\ninstance of the\nclass we can also check if an object is\nan instance of a class using the code\nbusiness cart and then instance of and\nthen the class name name Capital C\ncart so this will check if this object\nwas generated from this class so we can\nconsole.log this result\nconsole.log and close bracket and\nsave and then check the\nconsole and it will tell us that this is\ntrue so business card was generated from\nthis\nclass okay don't worry if class are a\nbit confusing at first just remember\nthat objectoriented programming means\norganizing our code into objects because\nthis tries to represent the real\nworld and then classes are a feature\nthat help us generate these objects so\nthey make it easier to create these\nobjects a class is basically an object\ngenerator\nnow that we learned how classes work\nlet's talk about the benefits of\nclasses if we scroll\nup when we generate an object it's going\nto have these properties and these\nmethods and you'll notice that a class\nactually looks like the object that we\ngenerate and this is cleaner than using\na function like we had before\nanother benefit of classes is that they\nhave extra features for object-oriented\nprogramming the first feature is called\na Constructor which lets us run some\nsetup code after creating an\nobject so if we scroll down in our\ncode you'll notice that after we create\nthese objects we run some setup code a\nConstructor lets us put the setup code\ninside the class and this makes our code\ncleaner because we can group everything\ntogether inside the\nclass to create a Constructor we're\ngoing to scroll up in the\nclass and Below these properties we're\ngoing to create a new method called\nConstructor brackets and curly\nbrackets so the Constructor method works\nlike a normal method we can put code\ninside and it will run the\ncode but the special thing about the\nConstructor is that when we generate an\nobject it will run this Constructor\nautomatically so this is a great place\nto put our setup\ncode so let's scroll down to the\nbottom and here instead of running the\nsetup code outside the class we're just\ngoing to move this into the class and\ninto the Constructor so we'll select\nthis code\nand then right click\ncut and scroll to the\ntop and inside the Constructor we're\ngoing to rightclick and\npaste so now after we create an object\nit will run the code in the Constructor\nand set up the\nobject so there's a few things that we\nneed to fix here the first thing is each\nobject object that we create is going to\nrun the Constructor so we only need one\nof each of these lines so let's remove\nthe setup for the business\ncard so now the setup code has two steps\nwe set the local storage key and then we\nload from Storage the next problem is\nthat the object that we create is not\ngoing to be called cart every time\nto solve this we can replace cart with\nthis and here as well this. load from\nStorage so as a reminder this points to\nthe object that we generate so whatever\nobject that we generate we're going to\nget its local storage key and set it and\nwe're going to get its load from Storage\nmethod and run that\nmethod now the second problem here is\nthat we don't want local storage key to\nbe card- oop every\ntime to fix this the Constructor can\nalso have parameters let's give the\nConstructor a parameter and we'll name\nit\nlocal storage key and instead of the\nsame string every time we're going to\nuse local storage\nkey now the last thing is how do we save\na value into this parameter\nso if we scroll down to the\nbottom when we call the class between\nthese brackets we can put the parameters\nfor the Constructor so for the cart we\nwant the local storage key to be the\nstring C- oop and for the business cart\nwe want the local storage key to be the\nstring cart Das\nbusiness so the values inside here are\nsaved in the parameters in the\nConstructor so C- oop will be saved\ninside local storage key and then we use\nit and then the same thing for cart D\nbusiness so now let's save this\ncode and then open the\nconsole and you'll see that the cart\nobjects are correct so after we\ngenerated each object we also ran this\nsetup code so that's how the Constructor\nworks every time we generate an object\nit will run the code inside here so this\nis a great place to put setup code and\nmake our code\ncleaner so here are a few more details\nabout the\nConstructor the method has to be named\nConstructor we can't just use any name\nthat we want we also should not return\nanything from a\nConstructor so last ly a shortcut that\nwe can use in a class is when we have a\nproperty and it's equal undefined we can\nactually remove equal undefined and just\nuse a semicolon so this is the same\nthing as the code before and same thing\nhere we can remove equal undefined and\njust use a semicolon and\nsave so we finished converting our code\nfrom using a function to using a class\nand as you can see a class is just a\nbetter way to generate objects in\nobjectoriented\nprogramming so now let's save our code\ninto git we'll open the git section\ninside cart Das class we created our\ncart class and inside checkout. JS we're\nbasically loading the cart Das class\nfile so we'll type a message to describe\nthis change create\nclass\nversion of cart and\ncommit next we're going to learn an\nimportant feature of classes called\nprivate properties and\nmethods so let's open our code again and\nopen\nC-Class and you'll see that this class\nhas a property called local storage\nkey so this property is useful inside\nthe class but it's not really meant to\nbe used outside the class for example at\nthe bottom\nhere we could take this\nobject cart and then change the local\nstorage key using dot local storage key\nequals something\nelse now this is a problem because it\nwill mess up how this object works and\nit will start saving to a different\nlocal storage key so this is a common\nproblem in programming where if you're\nworking on a team somebody might\naccidentally change properties that\nthey're not supposed to to prevent this\nclasses let us make a property or a\nmethod private which means it can only\nbe accessed inside the\nclass so let's remove this line\nand scroll\nup and to make local storage key private\nwe're just going to add a number sign in\nfront or a\nhash and also whenever we access this\nproperty inside the class we're going to\nadd the hash in front so we'll type\nthis. has local storage key this.h local\nstorage key and inside save to storage\nthis.h local storage\nkey so this is called a private property\nthis means it can only be used inside\nthis class or inside these curly\nbrackets it cannot be used outside the\nclass a property without a hash in front\nis called a public property meaning it\ncan be accessed\nanywhere so now let's\nsave and open the console\nand the code still\nworks so we made this property private\nand we're able to access it inside the\nclass so now let's try accessing this\nproperty outside the class to see what\nhappens we're going to scroll\ndown and we're going to try to access\ncart. hash local storage key\nand change it to something else like\ntest and\nsave and if we open our\nconsole you'll see that when we try to\naccess a private property here it will\ngive us a syntax error saying this is a\nprivate field and by the way a field is\nthe same thing as a\nproperty so that's how a private\nproperty works it prevents us from\naccessing this property\noutside the object and messing it\nup we can also have private\nmethods so let's remove this\nline and scroll\nup and the method load from Storage\nshould also only be used inside this\nclass there's really no reason for code\noutside to be calling load from Storage\nso to make our code safer we're going to\nmake this a private\nmethod to make a method private we're\ngoing to do the same thing in front of\nthe method we're going to add a number\nsign or a hash and we're going to update\nthe rest of our code so we're going to\ndo this dot hash load from\nstorage and now we can\nsave and check the console to make sure\nthat everything is still working so\neverything still looks good\nbecause we're only using this private\nmethod inside this\nclass so a class Let's us create private\nproperties and methods and this is\nuseful on a bigger project where people\nmight not be sure which properties and\nmethods they're supposed to use outside\nthe class and which ones to\navoid so now let's save our changes into\ngit we'll go into the git section and\ninside here we we made local storage key\nand load from Storage\nprivate we'll create a message to\ndescribe these changes make local\nstorage key and load from Storage\nprivate and\ncommit now that we learned\nobjectoriented programming and and\nclasses we're going to use it in our\nproject so one thing we could do is to\ntake this card class and replace\neverywhere we use cart in our project\nhowever we use cart in a lot of places\nand this would take too much time so I'm\ngoing to leave replacing the cart as a\nchallenge\nexercise instead we're going to work on\nthe\nhomepage so first let's go back to our\ncode and we're going to open checkout.\nJS and we're just going to comment out\nthis import because we're just using\nthis file for practice so let's save\nthis and then let's open the checkout\npage so I already have it open if you\ndon't have it open you can rightclick\ncheckout. HTML and open with live\nserver on the checkout page we're going\nto click this icon in the top left to go\nto the\nhomepage on this page we have a list of\nproducts\nhere and the code for these products is\nif we go back to vs\ncode and on the left side we're going to\nopen\ndataproducts\nDJs so here is the code or the data for\nall the products on the homepage and\nyou'll notice that each product is an\nobject we're going to learn a technique\ncalled converting an object into a\nclass so what this means is instead of\nusing regular objects in this array\nwe're going to use a class to generate\nthese objects so Above This array let's\ncreate a new class using the word class\nand let's call it capital P product and\ncurly brackets\nbecause this class is meant to generate\nproducts so now each of our products is\ngoing to have some properties like the\nID image and the name so let's add these\nto the class We'll add the ID property\nand a semicolon so that it starts off as\nundefined and then an image property and\na name\nproperty and each product will also have\na rating and the price sets rating and\nprice\nset and you'll notice each object here\nalso has a property called keywords now\nwe're not currently using this in our\nproject so we're going to leave it out\nof the class for now and if we need to\nuse it later we can always add it back\nin so now we have all the properties\nthat we want for each product so now\nlet's test this by generating a product\nusing this class so that here\nlet's create a variable const product\none equals and to generate an object\nwe're going to use the word new and then\nthe class name capital P product and\nbrackets and let's console.log this to\nsee if it worked\nconsole.log product one and\nsave so now we're going to open the web\npage and then open the console so right\nclick and\ninspect and open the\nconsole and inside here you'll see that\nwe created a product object using the\nclass so right now all of these\nproperties are undefined so now let's\nset the values of these properties we'll\ngo back to our\ncode don't follow along here but one way\nto set set these prop properties is to\naccess them outside the\nclass for example product\n1. equals something and then do product\n1. image equals something and then\nproduct one. name and so\non so this is not a good way to set\nthese properties because we have to do\nthis for each product that we create so\nit makes our code repetitive and messy\ninstead notice that when we create a\nproduct this is kind of like the setup\ncode we create a product and then set\nall of its\nproperties and remember classes have a\nspecific feature for setup code called\nThe\nConstructor and now you can follow\nalong so inside this class we're going\nto create a\nConstructor brackets and curly brackets\nso whenever we generate an object it's\ngoing to automatically run this\nConstructor so this Constructor is where\nwe should put our setup\ncode so let's remove this\ncode and then do all of that inside the\nConstructor so first we want to set the\nID property we're going to do this do ID\nand make it equal and now what value do\nwe set the ID to so the value of the ID\nis inside each of these\nobjects so when we create a product up\nhere we're going to put this object\ninside these\nbrackets and then that's going to go\ninto the Constructor in here so in the\nConstructor let's create a parameter to\nsave this data so we'll name it product\ndetails and now to save something inside\nins this parameter we're going to put it\nbetween these\nbrackets so let's actually give this\nentire object to the\nConstructor so we're going to right\nclick and\ncopy and then between these brackets\nwe're going to rightclick and\npaste so whenever we create a new\nproduct we're going to give it this\nobject with all the details\nit's going to get saved in here and now\nwe can set the\nproperties so this. ID is going to be\nequal to the product details. ID\nproperty so product\ndetails.\nID and for the image we're going to do\nthis. image equals the product details\nwhich is this object that we passed in\ndot the image\nproperty same thing for the name so this\ndo name equals product\ndetails. name which is this property\nhere same thing for the rating this.\nrating equals product details.\nrating and finally the price\nsense this. price sense equals the\nproduct\ndetails. Price\nsets so this is called converting an\nobject into a class what we're doing is\nwe're basically taking a regular object\nlike this we put it inside a class and\nthen we copy over the\nproperties you can also visualize it\nlike this we have a regular object and\nwe're basically wrapping it inside a\nclass and the reason we do this is that\nclasses have extra features we can use\nlike we can add methods and we can also\nhave private properties and private\nmethods so we basically have these same\nobject as before except we have an\nenhanced version of that object it has\nsome extra features from\nclasses so for now let's save this code\nand then down here we console.log\nproduct one so let's take a look at it\nin our console so we'll open the\nconsole and now we can see that we\ncreated a product object so it's the\nsame object as before except now it's\nenhanced it has some extra features from\nclasses so next we're going to take this\ntechnique and apply it to this entire\narray so instead of having an array of\nregular objects we're going to convert\neach of these objects into the product\nclass now one way we could do this is\nthat in front of the object we can just\ntype new product Open Bracket and then\nclose bracket at the\nbottom and this will essentially convert\nthis regular object into the product\nclass however we're going to have to\nrepeat this code for every object in the\narray and it's going to be a lot of work\nand\nrepetition so instead let's just Loop\nthrough this array and then use code to\nconvert each of these objects so instead\nof typing this out manually we're going\nto remove this and remove the round\nbracket at the end and then I'm going to\nclick this Arrow beside the array to\ncollapse\nit and at the end of the array we're\ngoing to use an array method called do\nmap and\nbrackets so map basically Loops through\nan array and for each value it runs a\nfunction so we're going to give this a\nfunction that we want to run for each\nvalue so arrow and curly\nbrackets and this inner function is\ngoing to get a\nparameter so this parameter is basically\neach value in the\narray so it's going to take the first\nvalue and then save it inside this\nparameter run the function and then take\nthe second value save it in here run the\nfunction third value save it and run the\nfunction so let's name this parameter\nthe product\ndetails because each object in this\narray contains product details so now\nit's going to take each object save it\nin the parameter and run the function\nand here we're going to convert the\nobject into a class to do that we're\ngoing to use the code new capital P\nproduct\nbrackets and we're going to give it this\nregular object which is the product\ndetails and now there's a second part to\nhow Map works so map creates a new array\nand whatever we return from this inner\nfunction is going to go inside that new\narray so here we're going to return this\nclass so this result is going to be put\ninside a new array so you can think of\nmap as we take each value in an array we\nrun this function on it and we transform\nit and then put it inside a new\narray so here we're essentially\ntransforming each of these products or\nthese regular objects into a\nclass so at the bottom let's\nconsole.log the products array to\nconfirm this so we'll\nsave and open the\nconsole and now you can see we have an\narray and each of the values is a\nproduct class instead of just a regular\nobject\nso we converted all of our products from\nregular objects into this product class\nand now let's open the web page to make\nsure that everything still\nworks so if we open the\npage you notice that everything is still\nworking\ncorrectly and that's because we have the\nexact same objects as before except\nthey're now just sort of enhanced\nobjects next let's use those extra\nfeatures of classes to simplify our code\nfor this page we'll go back to our\ncode and on the left side let's open\namazon.\nJS so this is the code that creates the\nhomepage so in here we're going to\nscroll down until we see the rating\nsection where we calculate the stars and\nthe rating\naccount so notice that inside our HTML\nwe're constru in this URL here for the\nnumber of stars a product\nhas and we're also creating the price\nthat we want to display on the\npage now instead of doing this all in\nthe HTML our code would be cleaner if we\nmoved this logic into our class because\nwe want to group this related code\ntogether so let's use the features of\nclasses to make this code a little bit\ncleaner we'll open products. Js\nand we'll scroll up to the product class\nand inside here let's add some methods\nfor calculating the stars and the\nprice so we're going to add a method and\ncall it get Stars URL brackets and curly\nbrackets and let's create another method\ncalled get price brackets and curly\nbrackets\nand now we're going to move the code\nfrom our HTML into this class so we'll\nopen amazon.\nJS and then here we're creating the URL\nof the Stars so let's actually select\nall this\ncode and\nrightclick\ncopy and inside products.\nJS inside get Stars URL we're going to\nrightclick and paste\nand this is going to be a string so at\nthe front let's add a back tick so we're\ngoing to use a template string because\nwe're going to insert a value inside and\nat the end we'll add another back\ntick so now that we created the string\nwe're going to return it from this\nmethod so\nreturn and semicolon at the\nend and one thing we need to fix is that\nproduct is not defined anywhere so to\nget the rating property of whatever\nobject this is we're going to use this.\nratings.\nStars so now each product is able to\nconstruct its own Stars URL here so\nlet's save this\nfile and then inside amazon.\nJS instead of doing this calculation\ndirectly inside the HTML\nwe're going to delete it and we're going\nto insert the\nproduct. getet Stars URL method and\nbrackets so you'll notice that we have\nthe same product object as before but\nnow it's sort of an enhanced product we\ncan add methods to group related code\ntogether and make our code\ncleaner let's do the same thing with the\nprice down here we're going to calculate\nthis using the method instead of\ndirectly in the\nHTML so we're going to select this code\nand then right click\ncopy inside products.\nJS inside the get price method we're\ngoing to\nrightclick and\npaste and again we want to return the\nprice as a string so at the front we'll\ncreate a template string because we're\ninserting a\nvalue and at the back a template string\nor a back tick and we're going to return\nthis from the\nmethod and another thing we need to fix\nis that product is undefined so to get\nthe price sets property we're going to\nuse this Price\nsets now one extra thing we need to do\nhere is that we're using the format\ncurrency function but we didn't import\nit so we're going to scroll to the\ntop and import format\ncurrency import curly brackets the\nformat currency function from a\nstring and here we're going to locate\nthis function so we're inside the data\nfolder we need to get out of the data\nfolder using do slash and then go into\nthe scripts folder into the UTS folder\nand load money. JS so scripts SL\nutils\nmoney.jpg\nand instead of calculating the price\ninside the HTML we're going to remove\nthis and then insert the\nproduct. getet price method and\nbrackets so now let's\nsave and let's open the homepage to make\nsure that it's\nworking so now you see that everything\nis still working including the stars and\nthe\nprices so we'll go back to our\ncode and now that we have these methods\nlet's use them in our other page which\nis the checkout page so we'll open\nscripts\ncheckout.\nJS and this basically displays the\nproducts on the checkout\npage if we scroll to the HTML and find\nthe delivery date the product image and\nthe product name we're going to see that\nhere we're also calculating the\nproduct's price directly in the\nHTML so instead of doing this let's use\nthe method we just created so select\nthis code and remove it and insert the\nmatching product this time so\nmatching\nproduct and remember we converted all of\nour products into classes so this is not\na regular object anymore it's more of an\nenhanced object it's a product\nclass and that means this will have the\nmethod. get price and brackets and Save\nso now let's open the checkout page to\nsee if this works we'll open the web\npage and then at the top right we're\ngoing to click the\ncart and now you can see that on the\ncheckout page the price is still\ndisplayed\ncorrectly and that's it if we go back to\nour\ncode you'll see that by converting our\nobjects into classes we're able to use\nextra features of classes like methods\nto make our code\ncleaner so now let's make sure that all\nof our tests are passing we'll go to the\nleft and scroll down and we're going to\nopen test.html in the browser so if you\ndon't have it open you can right click\nand open with live server but for me I\nalready have it open so I'm going to\nopen the test page and all of our tests\nare still passing so our code is still\ncorrect and now now let's save our\nchanges into git we'll open the git\nsection and in products. JS we created\nthe products class and at the bottom we\nconverted all of our objects into the\nproducts\nclass so actually one thing I forgot to\ndo is to clean up these console. logs so\nlet's do that right now we're going to\nopen our code and go into products.\nJS and we'll scroll down right after the\nproduct class and let's remove this\nproduct one because it was just an\nexample and we'll also remove the\nconsole.log products at the\nend and\nsave so now if we go back into git and\nopen products. JS we just have the code\nwhere we convert our objects into a\nclass in amazon.\nJS we use the feature of classes called\nMethods to make our code cleaner in\ncheckout. JS we stop loading our cart\nclass practice file and in orders\nsummary. JS we also use a method to make\nour code\ncleaner so now let's create a message to\ndescribe these\nchanges\nconvert products into classes and commit\nnext we're going to learn an important\nfeature of object-oriented programming\ncalled\ninheritance inheritance lets us reuse\ncode between\nclasses so first let's learn the concept\nof\ninheritance to do that we're going to\nopen our\nproject so we'll open this page here to\nour checkout page\nand we're going to go to the homepage by\nclicking the top\nleft and on this page we have a bunch of\nproducts but you also notice that we\nhave different types of products for\nexample we have clothing like this\nt-shirt and we have appliances like this\ntoaster so clothing and appliances are\nstill products they have a name a price\nand a rating but they are a more\nspecific type of product for example\nclothing can have all the properties of\na regular product but it can also have\nspecific properties like a size\nchart so how do we represent this kind\nof relationship in our code we have a\nproduct and then we have a more specific\ntype of\nproduct one way to represent this is to\ncreate a new class called clothing and\nthis class will have all the properties\nof a regular product but also more\nspecific\nproperties however there's a problem\nwith this which is we're duplicating a\nlot of\ncode instead objectoriented programming\nhas a feature called inheritance that\nallows one class to get all the\nproperties and methods from another\nclass so we don't have to copy paste\nthis\ncode for example we can make a clothing\nclass and then use inheritance to get\nall the properties and methods from the\nproduct\nclass this is similar to how a child\ninherits things from their parents like\ntheir hair color or the shape of their\neyes in fact we call the product class\nthe parent class and we call the\nclothing class the child\nclass so now let's learn how to use\ninheritance in our code we're going to\nopen VSS\ncode and open our code on the left and\nthen open products.\nJS and we're going to scroll to the\nproduct class and then below this class\nwe're going to create a more specific\ntype of product called\nclass and capital c\nclothing and curly\nbrackets so we said that clothing is is\njust a specific type of product so that\nmeans clothing should have all the\nproperties and methods of a\nproduct so first let's inherit all these\nproperties and methods into the clothing\nclass to use inheritance after the class\nname we're going to use the word\nextends and then we're going to give it\nthe class that we want to inherit from\nwhich is the product class\nAbove So this means that clothing will\nget all the properties and methods of\nthis class or it will inherit all the\nproperties and\nmethods to demonstrate this let's leave\nthis empty and create a new clothing\nobject so down\nhere let's create a variable first using\nconst and we'll name it a\nt-shirt make it equal\nand we'll generate a new clothing object\nto do that we'll use the word New\nCapital C clothing and\nbrackets and next we're going to expand\nthe products array and we're going to\ngive the product details to this class\nso we're going to scroll down to the\nthird product which is the\nt-shirt and we're going to select this\nobject\nand then right\nclick\ncopy and scroll\nup and now between these brackets we're\ngoing to right click and\npaste so now we created a new closing\nclass we gave it all the data that it\nneeds and let's console.log it to see\nwhat it looks like so down here we're\ngoing to\nconsole.log brackets and the variable\nname which is t-shirt so here\nt-shirt and\nsave and now let's open the console so\nwe'll open our web page and then on this\npage we're going to right\nclick\ninspect and open the\nconsole and you'll see that we created a\nnew clothing\nobject and if we open it you'll see that\nthis has the same properties as the\nproduct class\nso this inherited all the properties\nfrom\nproduct so let's see if we inherited the\nmethods as well we'll go to our\ncode and let's try the method get price\nso we'll\nconsole.log\nt-shirt. getet price and\nbrackets and\nsave and now if we open the console\nagain you'll see that get price also\nworks so clothing inherited the methods\nfrom product as well so even though this\nis empty this class gets or inherits all\nthe properties and methods of\nproduct so we use inheritance when we\nhave one class which is a more specific\ntype of another class for example\nclothing is a more specific type of\nproduct we want all the properties and\nmethods of the product still but we just\ndon't want to copy paste all this code\ndown here so inheritance lets us reuse\ncode between\nclasses so now that we have this\nclothing class we can add properties and\nmethods that are more specific to\nclothing for example clothing can have a\nsize\nchart so for con convenience inside this\nt-shirt object I've actually added a\nsize chart link so let's add this to our\nclothing class so up here we're going to\nadd a\nproperty size chart\nlink and now to set this value we're\ngoing to use the Constructor like we did\nbefore so down here we're going to use a\nConstructor brackets and curly brackets\nand we're going to give this a parameter\ncalled Product\ndetails so when we create the clothing\nwe save this object into product details\nand then we can use it to set the\nproperties up here so we're going to do\nthis do size chart link and make it\nequal to the product details\nwhich is this object and we're going to\nget the size chart link\nproperty dot size chart\nlink now one problem we have here is\nthat clothing inherits all the\nproperties from the product so we also\nneed to set the ID the image the name\nand so on so if we scroll down we could\ndo something like this . ID equals\nproduct details.\nID however instead of doing this one by\none all over again inheritance gives us\na shortcut we can actually just use the\nConstructor in the parent class up\nhere so to call the parents Constructor\nwe're going to use a special feature of\nclasses called super and brackets\nso super basically calls the Constructor\nof the parent class which is the product\nso this will call the Constructor up\nhere and we also need to give this the\nproduct details so down here we're going\nto call Super and give it the product\ndetails so this will call the\nConstructor of the parent class which is\nproduct and that will set the ID the\nname and the rating\nso now let's save\nthis and check our console\nagain and open up the clothing object\nand you'll see that now we have a size\nchart link\nproperty so that's how inheritance Works\na class can get or inherit all the\nproperties and methods of another class\nand reuse that code and this class can\nalso have more specific properties and\nmethods like a size chart\nlink one last thing to know is that if\nwe don't create a Constructor by default\nit will run the parents Constructor so\nthat's why when this class was empty the\ncode still\nworked now that we have this clothing\nclass we're going to use it in our\nproject so right now if we scroll down\nto our products array we can converted\nall of these into a product\nclass however we're going to convert\nsome of them like the t-shirt into a\nclothing class instead to make it more\nspecific so how do we know which objects\nto convert into a product and which ones\nto convert into clothing to help us do\nthat I included a property called type\nso type tells us which class we should\nuse when we're converting this into a\nclass this is sometimes called a\ndiscriminator property it tells us which\nclass we should convert this\nto so we're going to go down to the\nbottom of this code so I'm going to do a\ntrick here I'm going to scroll up to the\nproducts array and click this Arrow to\ncollapse it and then at the bottom we're\ngoing to use that type property to\ndecide which class to use so inside this\nfunction we're going to use an if\nstatement bracket ET and curler\nbrackets and inside we're going to check\nthe type\nproperty product\ndetails.\ntype and we'll check if it is equal to\nthe string\nclothing if it is equal to clothing\nwe're going to convert this object into\na clothing class instead so let's\nreturn new Capital C clothing and\nbrackets and we're going to give the\nConstructor product\ndetails so now our array will contain a\nmix of regular products and\nclothing next for each of our clothing\nwe're going to display the size chart\nlink on the\npage but first let's make sure that we\nhave this image here the closing size\nchart so if we go into our images\nfolder you might see the image here\ncalled clothing siiz\nchart.png but currently I don't have\nthis so I need to download this first to\ndo that we're going to click this link\nin the\ndescription which will open the size\nchart\nand then on this image we're going to\nright click save image\nas and then find the folder that\ncontains all our code so for me it's on\nthe\ndesktop inside a JavaScript Amazon\nProject and inside the images\nfolder and we'll save it\nhere and if we go back to our code we\nshould have the closing size chart image\ninside the images\nfolder now let's display the size chart\non the\npage so if I go to the\nhomepage whenever we have a clothing\nproduct like this t-shirt we're going to\ndisplay a size chart\nunderneath let's go back to our\ncode and open amazon. JS which creates\nthe homepage\nwhich is right\nhere and we're going to scroll down the\nHTML below the product price and the\nquantity selector here and underneath\nthis if we have a clothing product we're\ngoing to display a size chart link under\nthe quantity selector like\nthis so one way we can do this is to use\nsomething like an if statement or a\nturnery like a this if it's a clothing\nthen display some HTML if it's not a\nclothing then just display\nnothing however we're going to learn a\ndifferent way to do this using\ninheritance so first we're going to\ncreate a new method on the clothing\nclass that's going to generate the HTML\nthat we need here so we're going to go\nto our code and scroll up and open\nproducts. Js\nand we're going to scroll up to the\nclothing\nclass and at the bottom we're going to\ncreate a new method and let's call it\nextra\ninfo\nHTML brackets and Cur\nbrackets so this method will generate\nsome HTML that contains some extra\ninformation about this product like the\nsize\nchart so here we're going to return some\nHTML and we use a template string\nbecause we're going to insert some\nvalues inside and inside here let's\ncreate some HTML for a\nlink to create a link we're going to use\nthe code less than a greater than less\nthan SL a greater than so this HTML\nelement creates a link when we click\nthis link it will open another page\npage inside this link let's put the text\nsize chart so this is what's going to\nshow up on the\npage and Link elements have two\nattributes the first attribute is called\nhre Equals double\nquotes So this tells the computer which\npage this should open when we click this\nlink inside here we're going to insert\nthe size chart link so we're going to\ninsert this. siiz chart\nlink so when we click this it will open\na page containing the size chart\nimage we'll scroll back\nup and Link elements can have another\nattribute called Target equals double\nquotes and we're going to give it a\nvalue of underscore blank\nand I'll add some new lines here to make\nit a little easier to\nread so Target equals blank tells the\nlink to open in a new\ntab so now let's save this\nfile and we'll go back to the homepage\nso I'll scroll down here to amazon.\nJS and below the quantity\nselector let's\ninsert and we'll call the method that we\njust created which is the\nproduct. extra info\nHTML and\nbrackets so this will ins some HTML\ncontaining extra information about the\nproduct like the size\nchart now before we run this code\nthere's one thing that we need to fix\ncurrently only the clothing class has\nthis\nmethod if it's just a regular product\nit's not going to have this method and\nit's going to cause an\nerror to fix this we're also going to\ncreate this method on the product class\nso we'll go back to our\ncode and open products.\nJS and we're going to scroll up to the\nproducts class here and at the bottom\nwe're going to add the same\nmethod extra info HTML brackets and\ncurly\nbrackets and for regular products we\ndon't have any extra info we want to\ndisplay so let's just return and empty\nstring and\nsave so now if we call extra info HTML\nit doesn't matter if it's a product or a\nclothing both of these will have this\nmethod\ndefined so we'll go back to amazon.\nJS and now this should always\nwork so let's click this file and\nsave and then open the web page to see\nthe\nresult so now you notice that products\nthat are clothing have a size chart\nunderneath and regular products don't\nhave any extra\ninformation and if we click the size\nchart link it will open a new tab to the\nsize chart image\nso that's how we create this size chart\nlink for only the clothing\nproducts let's go back to our code and\nwe'll learn more about this new\ntechnique that we just\nused so on the left we'll go back to\nproducts. JS\nfirst so notice that the product class\nhas a method called extra info HT ML and\nthen clothing extends this\nclass that means clothing will\nautomatically get the extra info HTML\nmethod but then we Define this method\nagain inside\nclothing so this will actually override\nor replace the parents method and this\ntechnique is called method\noverwriting one more thing to know about\nmethod overwriting is that if we really\nneed access to the parents method\nthere's a feature that we can use called\nsuper so super gives us access to the\nparent\nclass so if we want to call this method\nup here we can do super and then extra\ninfo\nHTML so it's the same super as we used\nup here except this calls the parents\nConstructor and this calls one of the\nparents\nmethods so let's comment this out since\nit's just an\nexample and let's\nsave and lastly let's go back to amazon.\nJS and we'll take a look at this code\nand notice that when we call extra info\nHTML we don't know what class this is\nthis might be a clothing class or a\nmight just be a product\nclass this technique is called\npolymorphism which means we can use a\nmethod without needing to know exactly\nwhat class this\nis polymorphism is sort of like an\nalternative to doing if statements here\ninstead of doing if it's clothing do\nthis if it's a regular product do\nsomething else we can just have both of\nthe classes use the same method and then\nthe class itself will Det determine what\nthis method\ndoes if we add a new class like an\nappliance class we don't need to change\nany of this code the appliance class\nwill determine what extra info HTML\ndoes and that's it we learned about\ninheritance which lets us reuse code\nbetween classes and we learn some of the\ntechniques we can do with inheritance\nlike method overwriting and polymorph\nPRM which can make our code a little bit\ncleaner now let's check our test to make\nsure that everything still works so\nwe'll open the test page and make sure\nthat everything is still passing and\nthen we'll go back to our code and we'll\nsave this into git open the git\nsection and in products.\nJS we created the clothing class which\ninherits from product\nand one thing I forgot to do is to\nremove this practice\ncode so let's actually go back to our\ncode in products.\nJS and below the clothing let's remove\nthis practice\ncode and\nsave we'll go back to\ngit and just make sure that it's been\nremoved and then we added the size chart\nimage\nand in amazon. JS we used polymorphism\nto add some extra info below each\nproduct so let's create a message\ndescribing our\nchanges use\ninheritance and\npolymorphism to add size chart and\ncommit\nin the rest of this lesson we're going\nto learn more details about classes the\nfirst detail is how to test classes so\ntesting classes is the same as writing\nnormal\ntests so we generate an object using a\nclass and then we test if its properties\nand methods are\ncorrect I'll leave writing tests as an\nexercise at the end of this\nlesson the second detail we're going to\nlearn is built in\nclasses these are classes that are\nprovided by the\nlanguage so let's go back to our\ncode and open products. JS\nagain and we're going to practice using\na buil-in\nclass an example of a built-in class is\ndate this class generates an object that\nrepresents the current date\nbelow the classes that we created we're\ngoing to create some new lines and we're\ngoing to practice using the built-in\ndate\nclass first we'll generate a new date\nobject using the code new and then the\nclass capital D date and\nbrackets and now let's save this object\nin a variable so at the front we'll use\nconst and we'll call it date and make it\nequal to this object that we just\ngenerated and below this let's\nconsole.log the date to see what it\nlooks like so we'll\nsave and then open the\npage and we'll go back to our project\nhere and we're going to check the\nconsole so right click\ninspect and the\nconsole and we can see that the date\nobject represents the current date and\ntime so this is the current date and\ntime that I'm recording this\nvideo so this date object has properties\nand methods that we can use that are\nrelated to the\ndate for example we'll go back to our\ncode and every date object has a method\ncalled two local time string this\nbasically gives us the current\ntime so let's try it out we'll create\ncreate a new line and type the code date\ndot to local time string and brackets so\nmake sure that this is in cam case two\nis lowercase and every other word starts\nwith an\nuppercase and we'll console.log this to\nsee what it looks like\nconsole. log and\nbrackets so let's save this file\nand open the\nconsole and that method gave us the time\nso for you you should see your current\ntime\nhere so that's the built-in date class\nit lets us create objects that represent\nthe current date and\ntime an interesting thing to know is\nthat we used the external Library DJs\nearlier in the project DJs uses this\ndate class behind the\nscenes however DJs gives us a lot of\nextra features so we usually use DJs\ninstead of using the date class\ndirectly so now let's comment out this\ncode because it was just an example so\nat the top we'll type\nslashstar and below it star\nslash the last thing we're going to\nlearn is more detail dets about\nthis as a\nreminder inside an object we can use the\nvalue this and this will point to the\nouter\nobject so this feature lets an object\naccess its own\nproperties now in JavaScript this can\nactually be used anywhere in our\ncode for example we're going to create\nsome new lines\nand here we can just directly\nconsole.log\nthis so here we're using this but we're\nusing it outside of any object in this\nsituation there's no object for this to\npoint to so this will be undefined which\nactually makes\nsense if we\nsave and we check our console\nthis will equal\nundefined now originally this actually\nequaled the window\nobject however this Behavior caused\nconfusion so when they release\nJavaScript modules inside a module this\nis now undefined which makes more\nsense let's go back to our code and\nanother place we can use this is when\nwe're creating an object so let's go\ndown here and we're going to create a\nnew object using const we'll call it\nobject two and make it equal to curly\nbrackets and we're going to give this\nobject a property let's just call it a\ncolon give it a value of two comma and\nadd another property B\ncolon and we'll set the value of this\nproperty to this Dot\na now you might think that because we're\ninside this object this will point to\nobject 2 however at this point in the\ncode object 2 has not been created yet\nso this doesn't have anything to point\nto and this will be\nundefined if we\nsave and then open the\nconsole it will give us an error because\nthis is\nundefined let's go back to our\ncode so so far if we're inside a method\nwe can use this and it will point to the\nobject if we're outside of a method\nthere's no object to point to and this\nwill be\nundefined and everything makes sense so\nfar so let's comment this out using SL\nstar and and at the bottom start\nslash now the last important place we\ncan use this is inside a\nfunction so at the bottom here we're\ngoing to create a\nfunction and let's call it log this\nbrackets and curly\nbrackets and inside we're just going to\nconsole. log this\nso again we're not inside of any object\nso there's nothing for this to point2\nand in this situation this will be\nundefined as\nwell below this if we run the function\nlog this and brackets and\nsave and check the\nconsole it will tell us that this is\nundefined when it's just inside a\nregular\nfunction next this actually has a\nspecial\nfeature so inside a function we can\nchange this to whatever we want to do\nthat functions have a method called\ncall So Below this line let's type the\nfunction name log this and use a method\ndo call and brackets\nso call runs this function so it does\nthe same thing as the line above except\nwe can set the value of this to be\nwhatever we want so the first value that\nwe give to do call is going to be the\nvalue of this for example we can give it\nthe string\nhello and now this will run the function\nand this will be equal to hello if we\nsave\nand open the\nconsole you can see that we set this to\nbe equal to\nhello so that's a special feature of\nthis inside just a function we can\nchange this to whatever we want using a\nmethod like\ncall so call is the same as calling or\nrunning the function except we add an\nextra parameter in front this first\nparameter is the value of\nthis the last important thing to know\nabout this is that Arrow functions do\nnot change the value of\nthis for example below this let's create\na method by using an arrow function this\ntime so we'll create some new lines and\nfirst we're going to create an object\nusing\nconst we'll call it object three equals\ncurly\nbrackets and inside will give it a\nmethod and colon and we're going to\ncreate this method using an arrow\nfunction this time brackets arrow and\ncurly brackets and inside we'll just\nconsole. log\nthis so usually this will point to the\nobject itself\nhowever Arrow functions do not change\nthe value of\nthis here this will have the same value\nas outside the arrow\nfunction outside the arrow function\nlet's type\nthis here this has no object to point to\nso this will be\nundefined and then inside the arrow\nfunction it will also be undefined\nbasically this keeps the value that it\nhad outside the arrow\nfunction as a test below this we'll run\nobject 3. method and\nbrackets if we\nsave and check the\nconsole it will show us that inside here\nthis is also undefined\nso in an arrow function this will be\nwhatever the value is outside the arrow\nfunction now you might be wondering why\nare Arrow functions designed this\nway so JavaScript had a common problem\nin the past when we are inside a method\nthis points to the object but if we try\nto do a for each Loop inside the for\neach Loop this does not point to the\nobject anymore it points to undefined\nand that's because we created a whole\nnew function here and remember inside a\nregular function this becomes\nundefined so this caused problems\nbecause we no longer had access to the\nouter object up\nhere so that's why we created Arrow\nfunctions if we replace this with an\narrow function this would be equal to\nwhatever it is outside the Arrow\nfunction Arrow functions do not change\nthe value of\nthis so outside for each this points to\nthe object and inside for each this also\npoints to the\nobject so that's why Arrow functions are\ndesigned this way to avoid accidentally\noverwriting\nthis so let's summarize what we learned\nabout this inside a method this points\nto to the outer object inside a function\nthis is undefined but we can change it\nto whatever we want using something like\ncall and arrow functions do not change\nthe value of\nthis don't worry if these rules are a\nbit confusing at first they are actually\nsort of\nreasonable if there's an object to point\nto this will point to that object if\nthere's no object to point to this will\nbe undefined and we have tools like call\nand arrow functions to kind of\nmanipulate the value of this to be what\nwe want the more that you work with it\nthe more you just get used to\nit so now let's comment out this\npractice code at the top we'll type\nslashstar and at the bottom star slash\nand\nsave and we'll save to get\nwe'll open the git\nsection inside products. JS we added\nsome practice code to learn more details\nabout classes and\nthis let's type a message describing our\nchanges learn more details about classes\nand this and commit\nnow that we learned object-oriented\nprogramming you might notice that it's a\nvery different style of programming than\njust writing out a bunch of functions\ndirectly so you might be wondering which\nstyle of programming should we use\nobjectoriented programming or procedural\nprogramming which is the step-by-step\nstyle that we used in the earlier\nlessons the answer is it's up to you I\npersonally prefer procedural programming\nin JavaScript because I think it's\nsimpler I only use objectoriented\nprogramming if I'm working on a team\nthat also uses it also object-oriented\nprogramming is much more popular in\nother languages so it's still useful to\nknow object-oriented programming in case\nyou work with other programming\nlanguages in the\nfuture and that's the end of this lesson\nin this lesson we learned about\nobjectoriented programming which means\nwe organize our code into objects we\nlearned how to use a function to\ngenerate objects and we improve that by\nusing a class to generate objects we\nlearned that classes can have private\nproperties and methods we learned about\ninheritance which lets us reuse code\nbetween classes and we learned about\nmethod overwriting and polymorphism\nwhich lets us call a method without\nneeding to know what the class is and\nlastly we learned more details about\nthis and how to control the value of\nthis thanks for watching this course so\nfar if you want to support this channel\nyou can check out the premium version of\nmy courses just like this one where you\ncan get a certificate of completion and\na Better Learning platform if you're\ninterested in extra videos from me more\nin-depth videos and behind the scenes\ncontent you can check out these links\nhere you can also support the channel by\nliking the video subscribing and sharing\nthis video with others thanks again and\nlet's continue with the\ncourse here are some exercises to help\nyou practice what we learned in this\nlesson\nin this lesson we're going to learn\nabout backend and this will prepare you\nfor the next step after finishing this\ncourse first of all\nwhat is backend a backend is just\nanother computer that manages the data\nof a\nwebsite for example in our Amazon\nProject we created this website where we\ncan pick which products we want but how\ndoes Amazon the company know which\nproducts that we\nordered in this situation there has to\nbe a second computer somewhere that's\nowned by\nAmazon and then our computer sends the\norder information to this second\ncomputer and now Amazon will know what\nwe\nordered so this second computer is\ncalled the backend computer or just the\nbackend it manages the data of a\nwebsite on the other hand our computer\nor the web page where we can see and\ninteract with the products this is\ncalled the front end\nnow that we know what a backend is how\ndoes our computer or the front end send\ninformation to the back end when two\ncomputers are connected to the internet\nthey can actually send messages to each\nother using a feature called\nHTTP or hypertext transfer\nprotocol in an HTTP message we can\nactually attach information like our\nAmazon order\nwhen Amazon's backend receives this HTTP\nmessage now Amazon will know what we\nordered now that we know what HTTP is\nlet's send our first HTTP message using\nJavaScript so we'll go to our code and\non the left we're going to create a new\nfile just for practicing backend so\nwe'll scroll up to the data folder and\nwe'll click inside this folder and then\ncreate a new\nfile and let's name this file backend\nDas\npractice. JS and press\nenter and now to send an HTTP message\nwe're going to use a class called XML\nHTTP request so this is a built in class\nmeaning it's provided by\nJavaScript first we gener at an object\nusing this class using the code\nnew and the class name\nXML all capital capital\nHTTP capital r request and\nbrackets so this creates a new HTTP\nmessage that we want to send to the\nbackend a message is also known as a\nrequest so now let's save this request\nin a variable at the front we'll create\na variable with const and name it\nxhr equals this\nrequest next we need to set up this\nrequest so we'll create a new line and\nto set it up we'll do xhr\ndoop and\nbrackets and to set up this request\nwe're going to give open two\nparameters the first parameter is what\ntype of HTTP message to\nsend so one type of message we can send\nis the string\nget get means we want to get some\ninformation from the back\nend there are several common types of\nrequests that we can give to the backend\nbut we're going to start by learning get\nnext we're going to give open a second\nparameter and this parameter tells a\ncomputer where to send this HTTP message\nso using HTTP we can send a message to\nany computer that's connected to the\ninternet now to locate another computer\non the internet we need to use a\nurl url stands for uniform resource\nlocator and it's kind of like an address\nbut for the internet a URL helps us\nlocate another computer on the\ninternet so URLs look like this this is\nthe URL for Amazon YouTube and my\nwebsite the https in front means we're\nusing HTTP to communicate with this\ncomputer the S after the http means\nwe're using a secure version of http\nthe second part of a URL is called a\ndomain name this is like an address it\npoints to another computer on the\ninternet so amazon.com points to one of\nAmazon's backend computers youtube.com\npoints to one of YouTube's backend\ncomputers and superimple dodev points to\none of my backend\ncomputers if you want to learn more\nabout domain names and how the internet\nworks you can check out my video on how\nto put a website on the\ninternet now for this lesson I actually\nset up a backend computer that we can\npractice with so my backend is located\nat the URL\nhttps super simple backend\ndodev so in the second parameter of open\nwe're going to give it a\nstring and we're going to give it the\nURL of the back end end that we want to\nsend the message\nto so the URL for my backend is\nhttps colon SL SL super simple\nbackend.\ndeath so that's how we set up an HTTP\nmessage we give it the type of message\nwe want to send and also the URL which\nis where to send this message to\nthe last step is to just send this\nmessage so we'll create a new line and\nwe'll type xhr\ndoent brackets and\nsave so this creates a new HTTP message\nsets it up and then sends this message\nacross the internet to my backend\ncomputer located at superimple backend.\ndeev so now let's actually run this code\nand see the results we're going to go to\nthe left and we're going to open\ncheckout.\nJS and in here just like we did before\nwe're going to load that practice file\nthat we just created so we'll create a\nnew line and we're going to import a\nfile or a string and we'll locate that\npractice\nfile so first we need to go to the data\nfolder using using do dot SL dat slash\nand load\nbackend D\npractice. JS and\nsave so we'll go back to the practice\nfile and now when we open the website it\nwill run this code and send the HTTP\nmessage to see that let's open the\nwebsite so we'll scroll down and if you\ndon't have the website open you can open\nit again by right clicking checkout.\nHTML and then open with live\nserver I already have the website open\nso I'm going to open\nit and then I'm going to go to the\ncheckout\npage and now we're going to look at the\nconsole so we'll right\nclick and\ninspect and this time instead of going\nto the console tab we're going to go to\na new tab\ncalled the network\ntab if you don't see this tab you can\nmake this window wider or you might find\nit under these\narrows so we'll open the network\nTab and in here this will show us all\nthe HTTP messages that are coming in and\nout of our\ncomputer now before we start looking at\nthe the HTTP messages there's one\nimportant thing to know about the\nnetwork Tab and that is messages will\nonly appear here after we open the\nconsole if we send some messages and\nthen we open the console it's not going\nto show up\nhere so to make sure our HTTP messages\nare recorded here we need to open the\nnetwork tab first and then we're going\nto refresh the page to resend those\nmessages and now if we open the network\ntab we should be able to see the HTTP\nmessages at the\nbottom okay so inside this list we\nshould be able to see that we sent a\nmessage to superimple backend. deev if\nyou don't see it we can also search this\nlist by using the text box up\nhere so in here we can type part of the\nURL that we sent the message to for\nexample super\nsimple and the message that we sent\nshould appear here so now we can click\nthis message to get more details about\nit on the right side we have several\ntabs here the headers tab gives us\ndetails about our message or about our\nrequest so it tells us which type of\nrequests that we sent which is get and\nthe URL that we sent it to which is\nsuper simple backend.\nDev this sends the request across the\ninternet to my\nbackend and then when my backend\nreceives this message or this request it\nwill send back a message which is called\na\nresponse to see the response from my\nbackend we can open the the response\nTab and you can see that my backend\nresponded with hello this is super\nsimple dev's back end and a\ndocumentation page that we can check\nout so we have successfully sent an HTTP\nmessage or a request to my backend and\nwe got back a\nresponse another useful tab here is the\npreview tab it basically takes a\nresponse and displays it in an easy to\nread\nformat so now let's learn some\nterminology when we send a message to\nthe backend this message is called a\nrequest we are requesting something from\nthe\nbackend when the backend receives our\nrequest it will send an HTTP message\nback to us and this message is called\nthe\nresponse so each request that we make\nwill get one response from the back\nend and this is called a request\nresponse cycle it's always one request\none\nresponse next currently we're viewing\nthe response in the network tab but we\ncan actually get this response in our\ncode and then do something with this\nresponse so let's go back to our\ncode and here after we send the requ\nQuest we can get the response using a\nproperty called xhr do\nresponse however there's a slight\nproblem with doing this when we send a\nrequest to the backend it takes time for\nthe request to travel across the\ninternet to the back end and for the\nresponse to come\nback so the response is not available\nright away and xr. response will be\nundefined at first so xr. send is known\nas asynchronous code asynchronous code\nmeans it does not wait for this line of\ncode to finish it just sends the request\nand then immediately goes to the next\nline the response might come back later\nin the future but we don't have access\nto it\nhere so in this situation in order to\nget this response we need to wait for\nthe response to come back first and then\nwe can access do\nresponse in order to wait for the\nresponse to come back at the top after\nwe create the\nxhr we're going to use this code\nxhr do add capital E Event capital L\nlistener and\nbrackets so this method listens or waits\nfor an event and then it can run a\nfunction so this method takes two\nparameters the first parameter is the\nevent that we want to listen for or to\nwait for in this case we want to wait\nfor the response to come back so we're\ngoing to give it the string load load\nmeans the response has\nloaded the second parameter is a\nfunction that we want to run\nafter this event\nhappens so in this case after the\nresponse has loaded we're going to run a\nfunction brackets arrow and curly\nbrackets so because this function runs\nafter the response loaded inside here we\ncan access xhr do\nresponse and this will not be undefined\nit will contain the response that we saw\nearlier in the network\ntab so let's console.log this to see\nwhat it looks like\nconsole.log and\nbrackets and we'll remove this line at\nthe\nend and\nsave so now let's go back and check the\nconsole for the response so we'll open\nthe\nconsole and then open the console\nTab and here you can see that we have\nthe response in our code and we console.\nlogged\nit so this\nresponse is a string and now we can save\nthis in a variable or do whatever we\nwant with it in our\ncode now one thing you might be\nwondering is why do we put the event\nlistener up here at the top so first we\nneed to set up the event listener and\nthen trigger the event or send the\nrequest this is the same as setting up\nan event listener for clicking a button\nwe need to set up the event listener\nfirst and then we click the button\nafter so that's how we send a request to\nthe back end wait for the response and\nthen save the response in our\ncode next we can send different messages\nor different requests to the backend\nusing URL\npaths a URL path is the part that comes\nafter the domain name for example in\nthis URL the URL path is /hello in this\nURL the URL path is/ products\nslir in this URL if there is no URL path\nthe URL path is\nslash we can send a request to these URL\npaths and each URL path will give us a\ndifferent\nresponse so let's try sending requests\nto different URL paths and see what\ndifferent responses that we\nget so for this example let's send the\nrequest to super simple backend. deev\nand then the URL path SL hello and\nsave and now let's open our console to\nsee the response\nand here you can see that this URL path\ngave us a different response than last\ntime let's go back and try another URL\npath to see what it looks like so we'll\ndelete this and then send the request to\nslash products\nslir and\nsave and we'll open the console to view\nthe\nresponse and here here this URL path\ngive us a Json and this contains the\ndetails of the first product in our\nAmazon\nProject so we can send requests to\ndifferent URL paths and we will get\ndifferent responses from the\nbackend next a backend only supports a\ncertain set of URL paths for example\nwhen I created my backend super simple\nbackend .d I had to decide which URL\npaths are supported and how my backend\nwould respond to each URL path if we\nsend a request to a URL path that is not\nsupported the back end will respond with\nan\nerror let's go back to our\ncode and we'll try a URL path that is\nnot\nsupported so let's remove this at the\nend\nand we'll try sending the request to\nnot-\nsupported and\nsave and now if we look at our\nconsole you'll see that the backend\nresponded with an error message saying\nthis URL path is not\nsupported the browser will also\nconsole.log this red error\nmessage this red message is displayed\nautomatically when there's an error\nso this message tells us the type of\nrequest that we sent which is get and\nthe URL that we sent it to and also this\nnumber which is called the status\ncode whenever we get a response from the\nbackend the backend also gives us a\nstatus code which tells us if a request\nsucceeded or\nfailed a status code that starts with\nfour or five means the response\nfailed starting with four means it was\nour problem we sent the request to a URL\npath that was not\nsupported starting with five means it\nwas the backends problem for example the\nbackend\ncrashed a status code starting with a\ntwo means the response was\nsuccessful so we can also see the status\ncode in the network\ntab so we can search for our request and\nthen when we click the request in the\nheaders tab it will show us the status\ncode in this\nrow so this tells us if our request\nsucceeded or\nfailed so now you might be wondering how\ndo we know which URL paths are supported\nand which are\nnot so there's actually no way to figure\nout all the URL paths that are supported\nand this is for security reasons\nhowever some backends do provide a\ndocumentation page that lists the URL\npaths that are supported and also what\nkind of response that they give for my\nbackend I created a documentation page\nand we're going to take a look at that\nso we'll open the\nbrowser and at the top we're going to\ncreate a new\ntab and to see the documentation for my\nbackend we're going to go to super\nsimple back back end dodev SL\ndocumentation and press\nenter so this is the documentation page\nfor my backend it gives us a list of\nwhich URL paths that are supported and\nwhat each URL path does so when we make\na request to slash it will give us this\nmessage which we saw earlier if we make\na request to/ hello it will give us this\nmessage which we also saw\nearlier so by the way the list of all\nthe URL paths that are supported is\ncalled the backend\nAPI API means application programming\ninterface interface means how we\ninteract with something so this list of\nURL paths are all the ways that we can\ninteract with the backend and that's why\nwe call this the backend\nAPI next the backend can respond with\ndifferent types of data so one type of\ndata the back end can respond with is\ntext for example when we sent the\nrequest to get/ hello it gave us some\ntext\nback so in our\ncode if we change this URL path to\n/hello\nand\nsave and we open the\nconsole and click the console\ntab it gives us back some\ntext we can also see what type of\nresponse that we got using the network\ntab so we'll open the network Tab and\nthen search for the\nrequest and then here when we click\nit inside the headers tab if we scroll\ndown to the response\nsection here it will give us the content\ntype or the type of response that we got\nback so in this example /hello gave us\nsome text and the type is text\nslpl another type of data the backend\ncan respond with is\nJson so if we go back to our code and\nchange the url path to products\nslir and\nsave and then look at our\nconsole in the network tab we'll open\nthis request and inside the headers if\nwe scroll\ndown it will tell us that the type of\nthe response is application SL\nJson so the backend sent us back some\nJson if we open the console tab we can\nsee the Json string here\nso once we get this Json from the\nbackend we can use json.parse to convert\nthis back into a JavaScript\nobject basically this allows us to send\nJavaScript objects across the internet\nto the back\nend another type of data the back end\ncan respond with is\nHTML we'll go back to our\ncode and we'll change the URL path to\ndocumentation so this was the\ndocumentation page that we saw earlier\nif we\nsave and then open the\nconsole you'll see that the back end\nresponded with a bunch of\nHTML if we look at the network Tab and\nsearch for the request and open the\nrequest here and in the headers tab we\nscroll down\nto the content type it will tell us that\nthe type of the response was text/html\nfinally another type of data the backend\ncan respond with is an\nimage for example we'll go back to our\ncode and change the url path to\nimagesapple\njpg and say\nsave and we'll open the\nconsole and in the network tab we can\nopen this\nrequest and in the headers tab we can\nscroll down and it will tell us that the\ntype of response was an\nimage/jpeg as you can see the backend\ncan respond with different types of data\nnot just\ntext okay so we got this image back from\nthe back end but what does this look\nlike in the console we'll open the\nconsole and we'll see that we just get a\nbunch of random characters here and\nthat's because the console is trying to\ndisplay the image as text but the image\nis not really\ntext this is the image's raw data so\nthat's why it shows all these random\ncharacters\nhere however it would be better to\ndisplay this as an actual ual image\ninstead of raw\ndata we can display this as an image by\nusing the\nbrowser so if we open the\nbrowser when we type a URL at the top of\nthe browser it actually sends a get\nrequest to that\nURL so typing in here actually does the\nsame thing as our code it makes a get\nrequest the one big difference is that\nthat in the browser when it gets back\nthe response it will display the\nresponse on the\npage for example if we enter superimple\nbackend dodev and change the url path to\njust nothing or slash and press\nenter this actually sends a get request\nto my back end the backend responds with\nsome text and it displays this response\non the\npage so using the browser is the same\nthing as making a get\nrequest now the cool thing about this is\nthat if the browser gets back an image\nit will display it as an actual image\ninstead of raw data that we saw in the\nconsole so here if we change the url\npath\nto/ images\nslapple jpg and press enter\nit will get back the same image as\nbefore except the browser will display\nit as an actual image on the\npage same thing happens with the backend\nresponds with\nHTML so at the Top If we change the url\npath to slash\ndocumentation and press\nenter if the response from the back end\nis HTML theow browser will display this\nHTML as an actual web page instead of\nraw\nHTML so again using the browser is the\nsame thing as making a get\nrequest and depending on the type of\nresponse the browser can display the\nresponse in a more useful way on the\npage and that's it we learn the basics\nof how a backend Works how to send\nrequests to a backend and how to send\nrequests to different different URL\npaths so now let's go back into our\ncode and we'll remove this URL path and\njust dodev so that we don't keep console\nlogging and image and then\nsave and let's save this practice code\ninto git we'll open the kit\nsection in backend practice we learn how\nto make requests to the backend and in\ncheckout. as we loaded that backend\npractice\nfile so let's type a message describing\nour\nchanges add backend\npractice file and\ncommit now that we learned what a\nbackend is and how to communicate with a\nbackend let's use a backend in our\nproject\nso first we're going to open our code\nand we're actually going to open\ncheckout.\nJS and we're going to comment out this\nimport statement because we're not going\nto run the practice file anymore so\nwe'll type double slash to comment that\nout and\nsave next super simple backend dodev has\na URL path called slash\nproducts this gives us a list of all the\nproducts in the Amazon Project so first\nlet's open our browser and visit this\nURL path to see what the response looks\nlike we'll open this tab to super simple\nbackend dodev and we're going to change\nthe url path at the end to slash\nproducts and press\nenter and you can see that this URL path\ngives us a Json response so this\ncontains all the details of the products\nfor our\nproject now instead of using a file on\nour computer to load the products let's\nuse the backend to load the\nproducts so let's go back into our\ncode and on the left we're going to open\ndata/ products.\nJS and we're going to scroll down to the\narray of prodct S at the end so now\ninstead of loading the products from\nthis file we're going to load the\nproducts from the back end so first\nlet's comment out all this code if you\nneed to you can click this arrow on the\nleft to collapse this array and we're\ngoing to comment this out using slash\nstar and at the end star\nslash and above this we're going to load\nthe products from the back end\nfirst let's create a variable to save\nthe products again so we use let\nproducts equal and empty array and let's\nexport this so we can use it outside of\nthis file like before at the front we'll\ntype\nexport next let's create a function to\nload these products from the back end\nwe'll create a\nfunction and let's name it load products\nbrackets and curly\nbrackets and inside here we're going to\ncreate an XML HTTP request again to make\na request to my\nbackend so to create a request we're\ngoing to use new in the class XML HTTP\nrequest and brackets so this will\ngenerate a new request object and let's\nsave this in a variable\nso at the front we'll use const and\nwe'll name it xhr equals this\nobject next we're going to set up the\nrequest using xhr doop and\nbrackets so open takes two parameters\nthe first parameter is the type of\nrequest that we want to send in this\ncase the type of request will be the\nstring get\nand we're going to give open a second\nparameter which is the URL that we want\nto send this request to so we'll give it\na string and the URL of my backend is\nhttps colon slash super simple backend\ndodev and then we'll add the URL path\nwhich is slash\nproducts finally we're going to send\nthis request using the code xr. send and\nbrackets so this will create and set up\na request and then send it to my backend\nnow remember that do send is\nasynchronous that means it will just\nsend the request but it will not wait\nfor a response to come\nback in order to wait for a response\nabove this code we're going to create\nsome new lines and set up an event\nlistener using\nxr. add event listener and\nbrackets and this takes two parameters\nthe first one is the event we want to\nlisten for in this case it's the string\nload which means the response has\nloaded next we're going to give it a\nsecond parameter which is a function so\nbrackets Arrow and curly\nbrackets and this is a function that we\nwant to run after the response has\nloaded so inside here after the response\nhas loaded we can access it using xhr do\nresponse for now let's console.log this\nto see what it looks like so we console.\nlog and brackets\nfinally let's run this function so that\nwe run all this code at the bottom we're\ngoing to load products and\nbrackets and\nsave so this will send a request to my\nbackend and then once we get the\nresponse it will display it in the\nconsole so now let's go to our\nwebsite we're going to open the project\ntab\nand don't worry if the page is blank for\nyou we're going to fix this in a bit for\nnow we're going to open the console by\nright\nclicking\ninspect and open the\nconsole and in here you'll see that xr.\nresponse gave us this Json and this\nrepresents all the products in our\nAmazon\nProject now that we have all this Json\nwe're going to convert this back into a\nJavaScript object and then use it in the\nrest of our code let's go back to our\ncode and here the response is a\nJson we're going to convert it back into\na JavaScript object or in this case a\nJavaScript array using the code\njson. pars and\nbrackets so once we' converted this back\nto an array we're going to replace the\nproduct up here with what we loaded from\nthe back end to do that we'll do\nproducts and make it equal to this\nresult that we got from the back\nend now one more thing we need to do is\npreviously we converted the product\nobjects into a class so we're just going\nto do that again with this\narray so we'll select the code from map\nall the way to the end\nand then right click\ncopy and\nhere after this products array that we\ngot from the back\nend right click\npaste we're also going to transform this\narray from objects into these\nclasses and at the end let's console.log\nthis products array to see what it looks\nlike now so we'll console\n. log\nproducts and\nsave and now if we open the console for\nour\nproject you'll see that products is now\nan array of product classes and clothing\nclasses so we converted the response\nfrom a Json into a JavaScript array and\nthen into these\nclasses so that's how we load data from\nthe the back end and then convert it\ninto a JavaScript object or array that\nwe can use in our\ncode next let's go back to our code and\ninstead of console. loging the products\nevery time which will display a lot of\nstuff in the console let's just\nconsole.log a message to make sure that\nthis is working so we'll change this to\nthe string load products\nand now that we have this function let's\nuse it in each of our\nPages first we're going to remove\ncalling this function for now and we're\ngoing to export this function so we can\nuse it outside of this file so\nexport and save this\nfile and we're going to start from the\nhomepage so we'll scroll down to the\nbottom to amazon.\nJS and we're going to scroll to the\ntop and first we're going to import load\nproducts we're already importing from\nproducts. JS so we'll just add a comma\nand load\nproducts and now before we run all of\nthis code at the top we're going to load\nthe products first and brackets\nso now let's\nsave and open the project in our\nbrowser and we'll click the top left\nicon to go to the\nhomepage and you'll see that the\nhomepage is actually empty so what went\nwrong\nhere remember that HTTP requests are\nasynchronous if we go back into our\ncode load products will send a request\nto my backend\nbut it takes time for the request to\ntravel across the internet to my backend\nand to travel\nback so here it will just send the\nrequest and at the next line the\nresponse has not loaded yet so the\nproducts array is still\nempty and when we run this code with an\nempty array the page will be\nempty to solve this problem we need to\nwait for this HTTP request to finish\nfirst and for the response to come back\nand then we're going to run the rest of\nthis\ncode so how do we do\nthat so we're going to go to the left\nand we're going to scroll up to data/\nproducts.\nJS and I'm going to drag this file to\nthe top so we can see the code side by\nside and I'll scroll down to the HTTP\nrequest\nwhich is right\nhere and remember that we used an event\nlistener to wait for the response to\ncome back once the response is loaded\nwe're going to run this\nfunction so basically we want to run all\nof this code at the bottom of this event\nlistener so after we've loaded our\nproducts so one way to solve this\nproblem is maybe we can just copy all\nthis code and then paste it at the\nbottom\nhere now obviously this doesn't make\nsense because we're copy pasting a bunch\nof code and then we can't really reuse\nthis\nfunction a better solution is we're\ngoing to put all this code in a\nfunction and then we can give this\nfunction to load products let's do this\nstep by step\nso first at the top let's create a\nfunction to group all of this code\ntogether we'll use the word\nfunction and let's name it render\nproducts grid brackets and curly\nbrackets and now we're going to move all\nof this code into the\nfunction so we can do that by removing\nthis closing curly\nbracket and then at the bottom we we're\ngoing to scroll down all the way to the\nbottom here we're going to add back the\nclosing curler bracket to put all this\ncode inside the function and now let's\nalso select this code so we can fix the\nindex so we'll select it all the way up\nto\nhere and then press tab to add an indet\nso now we put all the code inside render\nproducts grid\nnext we're going to put this function\ninside load products using a parameter\nso between these brackets we're going to\ngive it this\nfunction\nrender products\ngrid so remember in JavaScript functions\nare values and we can use a function as\na\nparameter so now inside load products if\nwe go up here at the top this function\nwill be saved in a parameter so let's\ncreate a parameter at the top and we'll\nname it fun to say that this parameter\nwill contain a\nfunction so we basically saved this\nfunction inside this parameter and now\nafter we load the response we're going\nto run the\nfunction so at the bottom here after\nwe've created the products array we're\ngoing to run font and\nbrackets so that's how we run all of\nthis code after we've loaded the\nproducts we group this code into a\nfunction and then we save the function\nup here after we load the response we're\ngoing to run the\nfunction so let's save these two files\nwe'll save products. Js\nand then down here we'll save amazon.\nJS and then open our\nwebsite and you'll see that the products\nloaded again because this time we're\nwaiting for the response to come back\nand then we run our\ncode so that's how we wait for an HTTP\nrequest to finish first and then we run\nsome\ncode by the the way this function that\nwe provide to load products this is\nknown as a call back because we're\ngiving it a function to run in the\nfuture or to call in the future so this\nfunction will be called back in the\nfuture and we've actually used call\nbacks before when we wrote the code set\ntimeout we provided set timeout a\nfunction to run in the future or or to\ncall in the future so this function is\nalso known as a call\nback don't worry if this technique is a\nlittle complicated at first the more you\nwork with callbacks the more you'll get\nused to\nit let's get some more practice and use\nthe backend and callbacks on the\ncheckout page so we're going to open\ncheckout. JS which is the checkout page\nand first we're going to in import load\nproducts so at the top we'll create an\nimport curly brackets load\nproducts from a\nstring and we'll locate products. JS so\ninside here we're in the scripts folder\nwe're going to get out of it using do do\nslash and then we're going to go into\nthe data\nfolder and then we'll add slash data\nslash and we'll load products.\nJS and then down here we're also going\nto load products and\nbrackets and again we're going to give\nload products a call back or a function\nthat we want to run in the\nfuture this time instead of creating a\nwhole new function we're just going to\ncreate a function in inside these\nbrackets using brackets arrow and curly\nbrackets so we don't need to create a\nfunction name every time we can also\njust create an anonymous function or a\nfunction without a\nname and then give this to load products\nto run in the\nfuture now inside this Anonymous\nfunction we're just going to move this\ncode into here so we'll select this code\nand then rightclick\ncut and then inside here we're going to\nrightclick and\npaste and if you need to you can fix the\nformatting so again this is going to\nsave this function inside the parameter\nfun and then we're going to call fun\nafter we've loaded all the\nproducts so let's save this file\nand open our\nwebsite and we'll click the cart in the\ntop right to go to the checkout page and\nnow the checkout page is loading\nagain so that's how we use a backend in\nour project we need to send a request\nand then use a call back to wait for a\nresponse and then run the rest of our\ncode so now let's save our changes into\nG\nwe'll go to the git\nsection and in products.\nJS we created the load products\nfunction in amazon.\nJS we used load products and gave it a\ncall\nback and in checkout. JS we also used\nload products and we gave it a call back\nusing an anonymous function or a\nfunction without a\nname let's create a message describing\nour\nchanges load products from the backend\nand\ncommit next we're going to learn testing\nwith a\nbackend now that we're using a back back\nend in our code we need to update our\ntests first let's go to our code and\nwe're going to run our tests so we'll\nscroll to the bottom and if you don't\nhave the tests open we can run them by\nright clicking test.html and then click\nopen with live server now I already have\nthe test open in my browser so I'm just\ngoing to open that\nTab and for the video I'll zoom in using\ncontrol equals or command\nequals and we have some failing tests\nnow so if you did the exercises from the\nprevious few lessons you might have more\nthan two failing tests but we're going\nto focus on fixing these two tests here\nfor the\nvideo so first let's open the code for\nour order summary tests we'll open vs\ncode and then on the left we're going to\ngo into the test folder SL checkout SL\nOrd summary\ntest.js so now we're going to scroll\ndown in this test and notice that here\nwe are rendering the order summary which\ncreates the cart on the checkout\npage however this card requires the\nproducts to be loaded from the back end\nand currently we're not loading the\nproducts in our tests so that's why the\ntests are failing we need to to load the\nproducts\nfirst to do that let's import the load\nproducts function at the top so we'll\nscroll\nup and we're going to add another\nimport curly brackets the load products\nfunction from a string and we'll locate\nproducts. JS so we need to get out of\ncheckout and out of tests using do do\nslash do do slash and and then we'll go\ninto the data folder data/ and load\nproducts.\nJS and now we could call load products\ninside before each but this will load\nthe products before each of our tests so\nit will load it multiple times and we\ndon't really need to do this we only\nneed to load the products once for all\nof our\ntests to do that we're going to use\nanother hook provided by Jasmine called\nbefore\nall so above before\neach we're going to use the function\nbefore all and\nbrackets so this is the before all hook\nit will run a function before all of our\ntests inside these brackets we're going\nto give it a function to run so brackets\narrow and curly brackets\nand now before all of our tests we're\ngoing to load the products so let's load\nproducts and\nbrackets and\nsave and now let's open our tests in the\nbrowser and unfortunately the tests are\nstill\nfailing let's go back to our code and\nsee what the problem is we'll open vs\ncode and here\nremember that load products is\nasynchronous that means it just sends a\nrequest to my back end but it doesn't\nwait for the response to come back so it\nwould just send a request and then\ncontinue with the rest of the test\ncode and unfortunately at this point the\nresponse has not come back yet products\nis still an empty\narray to fix this issue we need to wait\nfor a load products to finish first and\nthen continue with the rest of the\ntest to do that Jasmine has a feature\nfor waiting for some code to finish\ncalled a done\nfunction so in before all we can give\nthis inner Function One parameter called\ndone so done is a function and it's\nprovided by Jasmine when we we add this\ndone parameter before all will not\nautomatically go to the next step now\nit's just going to wait and it will only\ngo to the next step when we call this\ndone function so when we do done and\nbrackets then it will go to the next\nstep if we don't call done then before\nall we'll just keep waiting forever so\nthis done function allows us to control\nexactly when before all finishes and\ngoes to the next\nstep and this is what we need to fix the\ntest we need to wait for load products\nto finish first and then we're going to\ncall done and then go to the next\nstep to wait for load products to finish\nremember we're going to give it a\nfunction so between these brackets we'll\ncreate a function using brackets Arrow\nand curly\nbrackets now once the products have\nfinished loading it will run the\nfunction inside here we're going to call\ndone and\nbrackets so this makes sure that the\nproducts load first and then we call\ndone and then it goes to the next step\nwhich is the before each hook and then\neventually it runs the tests at the\nbottom\nso now let's\nsave and take a look at our test page\nand you'll see that those order summary\ntests are now passing if you have any\nother fail tests I'll leave that as an\nexercise let's go back to our\ncode and that's how we test with a\nbackend we wait until the backend code\nis finished and then we use the done\nfunction to control exactly when to go\nto the next step by the way we can also\nuse done inside before each and inside\nit as well to wait for backend code to\nfinish now let's save our changes into\ngit we'll open the get section and\ninside order summary test we imported\nload products and then we called load\nproducts and use the done function to\nmake sure that the products are loaded\nfirst and then we go to The Next\nStep let's create a message describing\nour\nchanges load products in before all hook\nand\ncommit next we're going to learn\npromises which are a better way to\nhandle asynchronous code promises are\nsimilar to Jasmine done function that we\njust learned they let us wait for some\nasynchronous code to finish before going\nto the next\nstep so now let's create our first\npromise we're going to open our code and\non the left we're going to go to\ncheckout.\nJS and in here at the top we're going to\npractice promises\npromise is a class so we're going to\ntype the code new capital P promise and\nbrackets to create a new promise\nobject now inside these brackets we're\ngoing to give it a function so brackets\narrow and curly\nbrackets so that's just how promises are\ndesigned it's a built-in class and when\nwe create a promise we need to give it a\nfunction\nso when we create This Promise it's\ngoing to run this function\nimmediately so inside here let's\nconsole.log the string\npromise to show that it runs\nimmediately so we'll save this\nfile and then go to the\nwebsite and we'll open the tab for our\nproject\nand I'm going to zoom out a bit by\npressing control or command\nminus and then open the console right\nclick\ninspect and the\nconsole and you'll see a logged\npromise so when we create a promise it\nruns this inner function\nimmediately now this inner function gets\na parameter called called\nresolve and resolve is a function and it\nworks very similar to Jasmine's done\nfunction so resolve lets us control when\nto go to the next\nstep for example let's add some\nasynchronous code into this\npromise we'll remove the\nconsole.log and we're going to run load\nproducts which is asynchronous\nso here we'll type load products and\nbrackets and now we're going to give\nload products a callback function like\nwe did down\nhere brackets arrow and curly\nbrackets so it will run this function\nafter load products is\nfinished once this is finished we want\nto go to the next step so here we're\ngoing to call resolve so resolve and\nbrackets so you can see that the syntax\nhere is very similar to jasmin's done\nfunction we run some asynchronous code\nand then we wait for it to finish and\nthen we call resolve to go to the next\nstep now what is the next step to This\nPromise so you might think that this\ncode down here is the next\nstep however a promise actually creates\na separate line of code or a separate\nthread of\ncode so here these two groups of code\nare sort of running at the same time\nfeel free to pause the video to get a\nlonger look at this\ndiagram the reason promises are designed\nthis way is it allows JavaScript to do\nmultiple things at the same\ntime so when the promise finishes it can\ndo a Next Step but this next step is\ngoing to be separate from the rest of\nthe code it sort of does the next step\non the\nside so right now this promise creates a\nseparate thread of code but this\nseparate thread doesn't actually have a\nnext step so we're going to add\none to add a next step to a promise at\nthe end and we're going to use a method\ncalled dot then and\nbrackets and we need to give then a\nfunction so we're going to type brackets\narrow and Cur\nbrackets and inside here let's just\nconsole.log the string Next\nStep so first we run this asynchronous\ncode and then we wait for it to finish\nand then we run resolve and resolve\nmakes it go to the next\nstep to make this easier to see in the\nconsole let's actually add some console.\nlogs to track the progress of this code\nso at the top let's\nconsole.log the string start\npromise and then in here let's\nconsole.log the string\nfinished\nloading and we'll also comment out the\ncode that we had\nbefore so we'll type\nslashstar and at the bottom star slash\nand now let's\nsave and check our\nconsole so let's go through this step by\nstep first we start the promise which we\nsee here\nand then we call load products which we\nsee here once the products are finished\nloading it's going to run this function\nand then we'll display finish loading\nand then we're going to call resolve\nwhich goes to the next step which runs\nthis function and we display Next\nStep so resolve lets us control when to\ngo to the next\nstep in this case we waited until load\nproduct prods was finished and then we\ncalled resolve to go to the next\nstep so that's how promises work they\nlet us split our code into separate\nsteps and then we can wait for one step\nto finish before going to the next\nstep now that we understand promises\nlet's convert the code that we had\nbefore from a call back to using a\npromise so first let's remove these\nconsole. logs to make our code a little\neasier to\nread now in our previous code we\nactually had two steps the first step is\nto call load products and then once this\nis finished the second step is to call\nrender order summary and render payment\nsummary and in our promise we have the\nsame thing our first step is load\nproduct\nonce this is finished we're going to\ncall resolve and then go to the Second\nStep so we're just going to copy this\nsecond step into the second step up here\nso we'll select this code and then right\nclick\ncopy and in do then we're going to right\nclick and\npaste and now let's save\nand let's check the web page so we'll\nopen the project and you can see that\neverything is loading\ncorrectly So This Promise does the same\nthing as a call back that we had before\nboth of them have two steps the first\nstep is to load the products and then we\nwait for the products to finish loading\nand then we do the Second Step which is\nto render the page\nso now you might be wondering why do we\nuse promises it looks like it's more\nwork and more code than just using a\ncallback so callbacks have a big problem\nwhich is multiple callbacks cause a lot\nof\nnesting nesting means having code inside\ncode like\nthis to see why this is a problem let's\nsay that we want to load the cart from\nthe back end as well I actually set up a\nURL path that we can use to practice\ncalled SLC\ncart so first let's go into products.\nJS and we're going to copy load products\nand change it to load the\ncart so we'll select this\nfunction and then\nrightclick\ncopy and let's open cart. Js\nsince we're going to load the cart from\nthe back end and let's scroll down to\nthe\nbottom and here we'll right click and\npaste that\ncode and now instead of loading the\nproducts let's load the cart from the\nbackend so first let's rename this\nfunction to load Capital C cart\nand the first thing we need to change is\nthe URL path so instead of loading SL\nproducts we're going to load slash cart\nfrom my\nbackend so normally when we load SL cart\nthe backend will give us a cart\narray however since we're just\npracticing my backend will just give us\nsome text when we load SL\ncart next we don't need this products\ncode anymore so we can select it and\nthen delete\nit and instead let's just console. log\nbrackets and we just display the\nresponse that we get back xhr do\nresponse and we can remove this other\nconsole.log and\nsave so now let's use load cart in our\nprevious\nexample on the left we'll scroll down\nand open checkout.\nJS and at the top let's import load cart\nso here we'll import curly brackets load\ncart from a string and we'll go to the\ndata folder which is do\ndotdata slash and we'll load C.J\nand now we're going to use this in our\ncallback code to show the problem with\ncallbacks first let's comment out this\npromise so we can focus on the Callback\ncode at the top we'll type\nslashstar and here star\nslash and we'll remove the comments for\nthe\nCallback and after we load the products\nwe're also going to load the\ncart so inside this function we're going\nto type load cart brackets and we're\ngoing to give it a\nfunction so this function is going to\nrun after the cart has\nloaded so now let's say that we want to\nwait for the products and the cart to\nload before we render the\npage to do that we need to move this\ncode inside this inner\nfunction so we'll select this and then\nright click\ncut inside load cart we're going to\nright click and\npaste and remove this extra\nline so now this code is going to load\nthe products wait for it to finish and\nthen it's going to load the cart and\nthen wait for the cart to finish\nand then it will render the page or\ndisplay the page so let's\nsave and check the\nconsole and now you can see that we\nloaded the products and then we loaded\nthe cart and if we open the\npage everything was displayed\nproperly so now let's go back to our\ncode and notice that when we added\nanother call back we we created another\nlayer of\nnesting so we have code inside code\ninside\ncode the problem with this is that each\nlayer of nesting adds some indents at\nthe front or spaces at the\nfront this means if we have lots of\ncallbacks our code will become more and\nmore nested like\nthis this is a big problem with\ncallbacks multi multiple callbacks cause\na lot of nesting and all these indents\nmake our code hard to work\nwith the promises solve this problem by\nletting us flatten our\ncode for example let's load the products\nand the carts again but this time using\nour promise\ninstead first let's comment out the\nCallback using\nslashstar and and at the bottom star\nslash and we're going to uncomment the\npromise so here we'll remove the\ncomments and then in the next\nstep instead of rendering the\npage we're going to load the cart like\nwe did down here so we'll type load cart\nand\nbrackets now we have a problem here we\nwant to wait for load card to finish and\nthen go to the next step however we\nusually do this using resolve but we\ndon't have resolve inside this\nfunction to solve this problem inside.\nthen we can actually return a new\npromise so at the top we're going to\nreturn a new promise and\nbrackets so we're going to give this\npromise a function just like we did up\nhere so we'll type brackets arrow and\ncurly\nbrackets and this function gets one\nparameter called\nresolve so inside do then if we want to\nuse resolve to wait for some code to\nfinish we can return a new promise\nso now let's move our code into this new\npromise so we can use resolve so we'll\nselect this code and then right click\ncut and inside here we're going to right\nclick and\npaste and remove these new\nlines and we can give load card a\nfunction to run when it's finished so\nwe'll type brackets arrow and and curler\nbrackets once load card is finished it\nruns this function and then inside here\nwe're going to call resolve so that we\nmove to the next step so here we'll call\nresolve and\nbrackets so now this will go to the next\nstep and we currently don't have a next\nstep to This Promise so let's add The\nNext Step at the end to add another step\nwe're going to use dot then\nbrackets and we'll give this a function\nbrackets arrow and curler\nbrackets so the third step is to render\nthe page so we're going to do the same\nthing inside\nhere so let's select this code and we'll\nrightclick copy\ninside the third step we're going to\nright click and\npaste and adjust the formatting if you\nneed\nto so that's how we do these three steps\nin the Callback using a\npromise we do the first step wait for it\nto finish call resolve and then it goes\nto the second step we do the Second Step\nwait for it to finish call resolve and\nand then we go to the third\nstep so we promise let us have as many\nsteps as we want and we can use resolve\nto wait for each step to finish before\ngoing to the next\nstep so let's save this and check the\nconsole to make sure it worked so we'll\nopen the\nconsole and inside here we have the same\nmessages as last time first we load the\nproducts we wait for it to finish and\nthen go to the next step then we load\nthe\ncart wait for it to finish and then go\nto the next step and then we render or\ndisplay the page if we open the page\nyou'll see that everything displayed\nproperly so now let's go back and\ncompare promises and\ncallbacks so even though promises\nrequire a bunch of setup code you can\nsee that it keeps our code relatively\nflat the third step doesn't get more and\nmore nested like in\ncallbacks so if we have lots of steps in\nour promise this is what the code will\nlook like you can see that even when we\nadd more steps the code does not become\nmore and more\nnested so promises help keep our code\nflat\nand avoid too much\nnesting so that's why it's recommended\nto use promises instead of callbacks\npromises will keep our code more\nflat so let's actually add some new\nlines here as well as\nhere to better separate these steps so\nit's a little easier to read\nlastly we're going to learn two more\nfeatures of\npromises the first feature is we can\ngive resolve a value so inside here\nlet's give it a value like the string\nvalue\none so whatever we give to resolve is\ngoing to be saved in a parameter inside\ndoth so inside this function we can add\na parameter called value\nand now whatever we give to resolve is\ngoing to be saved inside here and now we\ncan use\nit so this lets us share a value between\ntwo steps of a\npromise so in here let's check if this\nworked using\nconsole.log\nvalue and\nsave and if we look inside our\nconsole you'll see that it displayed\nvalue\none so whatever we give to resolve will\nbe saved in this\nparameter the second feature is we can\nrun multiple Promises at the same time\ncurrently we wait for things to load one\nat a time for example we wait for the\nproducts to load and then we wait for\nthe cart to load and then we go to the\nnext step to make this more efficient we\ncan actually load the products and the\ncart at the same\ntime to do that we can use a feature\ncalled\npromise.all promise.all lets us run\nmultiple Promises at the same time and\nwait for all of them to\nfinish so let's scroll to the top and\nwe'll do an\nexample so here we'll type the code\ncapital P\npromise.all and\nbrackets inside these brackets we're\ngoing to give this an\narray inside this array we can give it\nmultiple promises to wait\nfor so let's just copy paste the two\npromises that we have here into this\narray so we'll start from here at the\nend of the first promise and we'll\nselect this code right click\ncopy and in this array we're going to\nright click and\npaste and remove this line so we have\nour first promise and at the end we're\ngoing to add a comma and we're going to\ngive it a second promise so we'll scroll\ndown to our second promise here and\nwe're going to select this code starting\nfrom here\nand select the promise right click\ncopy and at the top we're going to right\nclick and\npaste so we basically created an array\nof promises and then we're going to give\nthis array to\npromise.all and it's going to wait for\nall of the promises to finish before\ngoing to the next\nstep so now let's add a next\nStep at the end to add a Next Step we're\ngoing to use dot then and brackets and\nwe'll add a new line to make it a little\neasier to\nread so as usual dot then adds a next\nstep to a\npromise it will give it a function to\nrun so brackets arrow and curling\nbrackets after we load the products and\nload the cart we're going to render the\npage so let's copy paste that code\ninside this next step so we'll scroll\ndown to the render code and we'll select\nit right click\ncopy and at the top inside then we'll\nright click and\npaste so now let's comment out our old\npromise and try out promise do\nall above our old promise we're going to\ntype\nslashstar and below it we're going to\ntype star\nslash and let's\nsave we'll go to our\nconsole and you can see that it did the\nsame thing it loaded the products and it\nloaded the cart and it's going to wait\nfor both of them to call resolve before\ngoing to the next step which is to\nrender or display the page if we open\nthe page you'll see that everything\ndisplayed\nproperly so that's\npromise.all we can give it an array of\npromises and it will run both of them at\nthe same time instead of waiting for\neach promise one by\none also the values that we give to\nresolve are saved in a parameter so\ninside do then we can add a parameter\ncalled\nvalues and then these values that we\ngive to resolve are going to be saved\ninside here so if we\nconsole.log\nvalues and\nsave and check the\nconsole and it gives us an array of\nvalues the first value is from the first\npromise and the second value is from the\nthe second promise so here we didn't\ngive anything to resolve so the second\nvalue is\nundefined so that's an overview of\npromises and\npromise.all promises are a better way to\nwait for asynchronous code to finish\nversus\ncallbacks because they help us avoid\nnesting and keep our code relatively\nflat promises also have more features\nlike promise all which lets us run\nmultiple Promises at the same\ntime now let's save our changes into git\nwe're going to open the git\nsection inside cart.\nJS we added a function to practice\nloading the cart from the back\nend and then in checkout.\nJS we learn a promises and converted our\ncode from a callback to a promise\nlet's type a message describing our\nchanges learn\npromises and convert code to promises\nand\ncommit now that we learned promises\nwe're going to learn another feature\ncalled\nfetch fetch is a better way to make htd\nPP\nrequests let's go back to our\ncode and we're going to open products.\nJS and we're going to scroll down to the\nload products\nfunction currently we're using XML HTTP\nrequest to make requests to the back end\nand this uses a call\nback fetch also lets us make requests to\nthe backend but fetch uses a\npromise so let's do an example and we'll\nmake the same request except using fetch\nthis\ntime we'll scroll up and above load\nproducts let's create another function\nusing\nfunction and we'll name it load products\nFetch and brackets and curly\nbrackets and to use fetch we're going to\nuse the built-in function Fetch and\nbrackets so this makes an HTTP request\njust like we did down here so let's make\nthe same request as we did in this\nfunction at the bottom we made a get\nrequest to this\nURL so by default fetch will make a get\nrequest so we just need to give it the\nthe URL that we want to make the request\nto so at the bottom let's select this\nURL and we're just going to\nrightclick\ncopy and at the top inside fetch we're\ngoing to right click and\npaste so this will make the exact same\nrequest as we did\nbelow so you can see that fetch is a lot\nmore simple than XML HTTP request we\ndon't have to create a new object or do\nany setup we can just call Fetch and\ntell it where we want the request to\ngo so this will send a request to the\nback end and now how do we get the\nresponse so instead of using a call back\nto get the response fetch uses a\npromise when we call fetch this is going\nto create a promise and we can add a\nnext step to This Promise using dot then\nand\nbrackets so we'll give dot then a\nfunction brackets arrow and curly\nbrackets so the way this works is that\nfetch is going to send a request to the\nbackend when we get a response it's\ngoing to go to the next\nstep it's also going to save the\nresponse inside inside a parameter in\nhere so we'll add a parameter called\nresponse and this will contain the\nresponse from the back\nend so instead of using a call back to\nwait for the response fetch uses a\npromise to wait for the\nresponse so here let's\nconsole.log the response to see what it\nlooks\nlike and now let's run this code\nat the\nbottom we'll run this function using\nload products Fetch and\nbrackets so now let's\nsave and take a look at the\nconsole so here's the response that we\nget from Fetch if we open it you can see\nit gives us a bunch of information about\nthe response like the status or whether\nit succeeded or\nfailed as well as the URL that we made\nthe request\nto so how do we get the data for the\nproducts from this\nresponse to do that we'll go back to our\ncode and to get data that's attached to\nthis\nresponse we're going to use\nresponse. Json and\nbrackets so this gives us the Json or\nthe data attached to the response in\nthis case it's our products\ndata next response. Jon is actually\nasynchronous it returns a\npromise so we need to wait for this\npromise to finish before we continue to\nthe next\nstep to do that inside. then we can\nactually return another promise so here\nwe're going to return this\npromise when we return a promise it will\nwait for this promise to finish before\ngoing to the next\nstep so now let's add another step to\nThis Promise using dot then brackets and\nwe'll give this a function again so\nbrackets arrow and curly\nbrackets when response. Json finishes\nit's going to give us the data that's\nattached to the response and it's going\nto save it inside this\nparameter so this response should\ncontain our products data so let's name\nthis\nparameter products data and let's\nconsole.log this to see what it looks\nlike so here we\nconsole. log the\nproducts\ndata and and\nsave and let's open the\nconsole and you see here that the\nproducts data is the array of products\nthat we're going to use in our Amazon\nProject you'll also notice that instead\nof giving us just a big Json string like\nbefore it actually converted the Json\ninto an array so basically it did json.\npars on the response for us so this this\nsaved us a little bit of\ncode finally now that we have the\nproducts array let's do the same thing\nthat we did down here so we'll scroll\ndown and select all of this\ncode and we'll right\nclick\ncopy and then up\nhere we'll remove\nthis and rightclick and\npaste so we'll do the same steps as\nbefore\nexcept using a promise this\ntime first instead of doing json. pars\non the response we already have the\narray of products so we can remove this\nand replace it with products\ndata and then we're still going to\nconvert this from objects to classes\nlike before we'll keep this console.log\nso we can track the progress\nthis last line of code let us do\nsomething after we finish loading the\nproducts however instead of using a call\nback like before we're going to remove\nthis\nline and to do something after this step\nwe can actually return this entire\npromise so to make it easier to read\nlet's save this entire promise into a\nvariable using const\nlet's call it promise equals\nfetch so let's add some new lines here\nas well as here to make the code a\nlittle easier to\nread so we're basically calling fetch\nwhich creates a promise and then we're\ngoing to save this promise inside this\nvariable and then at the end of this\nfunction we can just\nreturn the promise so we're just going\nto return this whole promise out of the\nfunction and then we can add even more\nsteps after this\npromise so down here this is going to\ngive us the promise and then we can\nattach another step using dot then\nbrackets and inside here we can give it\na\nfunction brackets arrow and curly\nbrackets\nso this attaches another step to the end\nof This Promise so basically attaches\nanother step\nhere so after we load all the products\nlet's just\nconsole.log next\nstep and\nsave so we'll check the\nconsole and we'll see that we loaded the\nproducts and then after we did The Next\nStep so we can actually return a promise\nout of a function and then keep\nattaching more steps to that\npromise so that's how we use fetch it's\na better way to make HTTP requests\nbecause it uses promises\ndirectly so now let's use fetch in our\nproject instead of using XML HTTP\nrequest so first let's comment out this\ncode because we were just practicing\nwe'll type\nslashstar and at the bottom star\nslash and let's scroll up to load\nproducts Fetch and we're going to export\nthis\nfunction so we can use it outside this\nfile let's\nsave we'll go to the left\nand open checkout.\nJS and here instead of using load\nproducts which uses callbacks let's\nswitch to load products fetch which uses\npromises we'll scroll\nup and we're going to import load\nproducts fetch so here we're already\nimporting from products. JS we'll type a\ncomma load products\nFetch and now will replace load products\nso remember that we need to give this a\npromise and also remember that fetch\nreturns a promise so all we need to do\nis to remove this code and just call\nload products Fetch and\nbrackets this will return a promise and\nwe can use it with\npromise.all so now let's save\nwe'll check our\nwebsite and you'll see that everything\nis still\nworking so fetch helps us make our code\na lot cleaner because it can return a\npromise directly and we don't have to\ntype out all of this extra\ncode finally let's use fetch inside our\ntests on the left we'll open order\nsummary\ntest.js and remember that inside here we\nused load products so let's switch this\nto using load products fetch instead\nfirst we'll import it at the top we're\nimporting from products. JS so we'll\ntype comma and import load products\nFetch and instead of load products we're\ngoing to call load products\nFetch and brackets\nso remember that this returns a promise\nand we can attach more steps to This\nPromise using the method dot then and\nbrackets and we'll give then a function\nto run so brackets arrow and curly\nbrackets once the products are finished\nloading it's going to run then and\ninside here we're going to call done to\ngo to the next step of the test so here\nwe'll just call done and\nbrackets and we'll remove the old\ncode so now let's save to make sure this\nis\nworking and we'll open the tests go to\nthe browser and open the\ntest and the order summary test should\nbe\npassing so now let's save our changes\ninto git we'll open the git set\nsection inside products. JS we learned\nhow to use fetch which returns a promise\ndirectly inside checkout. JS we used\nload products fetch inside our project\nand in order summary\ntest.js we use load products fetch\ninside our tests let's create a message\ndescribing these\nchanges convert load products\nfrom xhr or XML HTTP request to fetch\nand\ncommit next we're going to learn async\nawait which is an even better way to\nhandle asynchronous\ncode let's go back to our\ncode and we'll open checkout. Js\ncurrently we're using promises to handle\nasynchronous code but the problem with\npromises is that it creates a lot of\nextra code for example we need to create\na new promise we need to use resolve and\nwe need to use do\nthat async await is a shortcut for\npromises and it removes all this extra\ncode so let's do our first example of\nasyn a weit we're going to scroll\nup and at the top we're going to create\na function using\nfunction and let's name it load page\nbrackets and curly\nbrackets and inside we're going to\nconsole.log the string load\npage and now we'll learn the first part\nof async await which is\nasync in front of the word function\nwe're going to add the word async and\nspace so async makes a function return a\npromise so this code is a shortcut for\nthis code it basically wraps the code in\na\npromise so now let's run this function\nto show that it actually returns a\npromise\nSo Below this we'll call load page and\nbrackets and because this returns a\npromise we can add a next step to This\nPromise using dot then\nbrackets and we'll give then a function\nbrackets arrow and curly\nbrackets and inside here let's just\nconsole.log the string Next Step\nnow let's\nsave and we'll check the console so\nwe'll open the\nconsole and you'll see that we loaded\nthe page and then in the next step we\ndisplayed Next Step so when we put a\nsync in front of function it makes this\nfunction return a\npromise this code is a shortcut for this\ncode\nnext if we return something from this\nfunction for example we're going to\nreturn a value like the string value\ntwo this gets converted into resolve\nvalue\ntwo so this value is going to be saved\nin a parameter in The Next Step so here\nwe'll add a parameter value and value\ntwo is going to be saved inside here if\nwe\nconsole.log the value and\nsave and then check the\nconsole we'll see that value is equal to\nthis\nstring and that's it for async it just\nmakes a function return a\npromise now you might be wondering\nwhat's the point of this feature\nso the reason we use async is because it\nlets us use the second feature called\nawait await lets us wait for a promise\nto finish before going to the next\nline so let's do an example inside here\nlet's run some code that creates a\npromise let's run load products fetch so\nwe'll type load products Fetch and\nbrackets so this loads the products from\nthe back end and usually this returns a\npromise so one way to wait for this to\nfinish is to use do then and then give\nit a\nfunction so this runs this function\nafter load products has finished\nnow await gives us another way to wait\nfor this promise to finish instead of\nusing\nthen at the front we can just type\nawait so await lets us write\nasynchronous code like normal code so\nnow it will wait for this line to finish\nand get the response from the back end\nbefore going to the next next line so we\ndon't have to do any more do then we\njust write it like normal code line by\nline this code is a shortcut for this\ncode and this makes our code a lot\neasier to read than what we have down\nhere so now let's see what this looks\nlike in the console before we save let's\ncomment out this promise at the bottom\nso we don't get\nconfused so we'll type\nslashstar and at the bottom star\nslash and now we're going to save this\ncode and check the console to see what\nit\ndid so you see that we loaded the page\nand then notice that it finish loading\nthe products before going to the next\nstep so this actually Waits for this\nline to finish before going to the next\nline in the code and this makes our code\na lot\ncleaner now one very important thing to\nknow is that we can only use a weight\nwhen we're inside an async\nfunction that's actually the main reason\nwe use async so that we can use a weight\nto make our code\ncleaner now that we learned asyn wait\nlet's use it in our\nproject so previously we loaded the\nproducts and then we loaded the cart and\nthen we rendered the page so let's\nrecreate this using async\nawait first we want to load the products\nwhich we did here and we're going to\nwait for this to finish and then we're\ngoing to load the\ncart so to load the cart let's use this\npromise down here asyn await can only be\nused with promises it doesn't do\nanything with a call\nback so we'll select this promise and\nrightclick\ncopy and then up here we're going to\nload the cart with a promise by right\nclicking and\npaste so now we want to wait for this\npromise to finish before going to the\nnext line to do that at the front we can\nsimply type\nawait finally after we load the products\nand we load the cart we're going to\nrender the page so we'll scroll down and\nwe'll select this\ncode and we're going to right click\ncopy and at the top\nwe're going to rightclick and\npaste and that's it you can see that our\nasynchronous code is a lot cleaner now\nwe load the products and then we just\nwait for it to finish then we load the\ncart and we also wait for it to finish\nand then we run the rest of our code so\nwe can write asynchronous code like\nnormal code\nso now let's remove the console.log at\nthe\ntop and also remove this return value\nbecause we don't need\nit and we'll remove do then at the\nend and let's\nsave so now if we open our\nwebsite and open the\nproject you can see that everything\nloaded properly\ninside the\nconsole you can see that we loaded the\nproducts first wait for it to finish\nthen load the cart wait for it to finish\nand then we displayed the page so that's\nhow we use a syn8 to make our code a lot\ncleaner than what we had\nbefore so now we'll learn some more\ndetails about Ayn a weit\nas I mentioned we can only use a weight\ninside an async\nfunction also the closest function has\nto be\nasync for example here we have an async\nfunction at the top and inside we have a\nnormal function so we can't use a weight\ninside the normal function we have to\nmake this one\nasync another another detail is if a\npromise resolves with a value for\nexample here we give resolve a value\nlike the string value\nthree normally this value will be saved\nin The Next Step so if we did do then\nand gave it a\nfunction this value would be saved in\nthis\nparameter however if we use await this\nvalue just gets returned and we can save\nit in a variable so instead of using\nthen we can Simply Save whatever is\nresolved inside a variable using const\nvalue\nequals and this makes our code a lot\neasier to read instead of having to use\nthen we can simply save this inside a\nvariable like normal code\nand finally we can use await with\npromise.all as well but I'll leave that\nas an\nexercise so that's async await it's a\nshortcut for promises and it lets us\nwrite asynchronous code like normal\ncode so when working with asynchronous\ncode a best practice is to use asyn\nawait over promises and callbacks\nbecause they are much\ncleaner so now let's save our changes\ninto git we'll open the git section in\ncheckout. JS we created the load page\nfunction where we learned async and\nawait let's create a message describing\nthese\nchanges convert from promises to async\nawait and\ncommit now we're going to learn about\nerror handling when we're sending HTTP\nrequests across the internet we could\nget unexpected errors for example the\ninternet connection might stop working\nso we're going to learn how to handle\nthese kinds of unexpected\nerrors let's go back to our code and\nwe're going to open data/ products.\nJS and we're going to\nscroll to the load products\nfunction so this uses a call back to\nsend a request and get a\nresponse now what if there's an error\nalong the way for callbacks we usually\nset up a separate callback just for\nerrors for example below this we're\ngoing to add another event listener\nusing xhr do add event listener\nbrackets and the first parameter is the\nevent this time we're going to listen\nfor the error\nevent and then we're going to give it a\nfunction so now if we get an unexpected\nerror it's going to run this function so\nif we get an error let's just console\nlog a message\nconsole.log a string\nunexpected\nerror and usually when we get an error\nwe give some instructions on what to\ndo here let's just type please try again\nlater\nand\nsave so this is called error handling if\nwe get an error during the request we\ncan handle it with this function so we\njust display a\nmessage so now let's try out this code\nto simulate an error we're going to\nchange the url of the\nrequest to\nerror. superimple backend. deev so this\nwill create an error because this URL\ndoesn't\nexist so now down here let's call this\nfunction so that we run this code and\nget the error so we'll type load\nproducts and\nbrackets and\nsave let's check the\nconsole and you'll see that we displayed\nthis error\nmessage so we got an error and it ran\nthis error function and it did not run\nthe load function\nabove also usually this callback gets a\nparameter called error and this contains\nsome information about the\nerror so that's how we handle errors\nwhen using callbacks we usually set up a\nseparate callback just for errors\nso now let's remove this line since it\nwas just for\npractice and we'll remove error from the\nURL and change it back to super simple\nbackend dodev and\nsave next we'll learn how to handle\nerrors in\npromises so we'll scroll up to the load\nproducts fetch\nfunction and this makes the same request\nas below\nbut it uses\npromises to handle an error in promises\npromises give us two methods do then and\nanother method called dot catch brackets\nand we're going to give catch a function\nbrackets arrow and curly\nbrackets so now if this request has an\nerror it's going to go to this catch\nmethod and it's going to run this error\nfunction so inside here let's also\ndisplay a message so let's just copy the\nmessage that we had\nbelow we're going to select this message\nand then\nrightclick\ncopy and then inside catch we're going\nto right click and\npaste and again to simulate an error\nwe're going to scroll up and change the\nurl\nso we're going to add error at the front\ndo superimple backend\ndodev so now let's call this function\nand test out this error code at the\nbottom we'll type load products Fetch\nand\nbrackets and\nsave so now let's open the\nconsole and you'll see in here that we\ndisplayed the error message so we're\nsuccessfully creating an error it's\ngoing inside catch and it displays this\nmessage so just like callbacks catch\ngets a parameter called error and this\ncontains information about the error if\nwe need\nit so that's how we handle errors with\npromises we have another method called\nDot catch that will run this function if\nthere's an\nerror so now let's remove this practice\ncode and switch back the\nURL so remove error and Dot and\nsave lastly we'll learn how to handle\nerrors in async\nawait so let's go to the left and we're\ngoing to open the checkout file so we'll\nscroll down and open checkout.\nJS and inside here we're using async\nawait so the catch errors when using\nasync await we're going to use some new\nsyntax called try\ncatch above this we're going to type the\nword try and curly\nbrackets and now we're going to put the\ncode that could cause an error into try\nso here we're making a request to the\nback end and here we're also making a\nrequest to the back end so this code\ncould cause an error so we're going to\nmove it inside try so we'll select it\nright click\ncut and then inside here we'll right\nclick and\npaste and now if any of this code inside\na try gets an error we can catch it\nusing this code at at the bottom we'll\ntype\ncatch brackets and curly\nbrackets Now Catch is going to get one\nparameter in these brackets called error\nand this contains information about the\nerror if we need\nit so catch Works similarly to catch for\npromises if there's an error inside here\nit's going to catch the error or it's\ngoing to hand handle the error and run\nthe code inside catch so in here we can\nput our error message so let's go back\nto products.\nJS and let's copy the error message so\nwe'll select this and right click\ncopy and back to\ncheckout inside catch we'll right click\nand paste\nso now I'll remove this new line and add\na new line here to make it a little\neasier to\nread and let's test out this\ncode to do that we'll go inside\nproducts. JS again and we're going to\nmodify the URL again so at the front\nhere we're going to add error do super\nsimple backend and also we're going to\ncomment out the dot catch because right\nnow the error is going to be handled\nhere and it's not going to be handled\noutside in the try catch so we're going\nto comment this out using\nslashstar and at the\nend star slash and\nsave so we'll go back to checkout.\nJS and here we'll also\nsave and now let's open the console\nand you'll see that we had an error here\nwe caught the error and it ran this code\nand displayed the error\nmessage so that's how we handle errors\nwith async await we put our code that\ncan cause an error inside try and if\nthere is an error it's going to run the\ncode inside\ncatch so now let's go back to products\nand remove error from the URL and the\ndot and we'll also uncomment\ncatch and\nsave next we're going to learn some more\ndetails about try catch so we'll open\ncheckout.\nJS and one thing to know about TR catch\nis that we don't have to use it with\nasync await we can actually use TR catch\nwith synchronous code or normal code for\nexample here we try to run a function\nthat does not exist and this will cause\nan error try catch will catch this error\nand display a message so notice that\nwe're not using async O8 here this is\njust normal code so we can use try catch\nto catch errors in normal code as well\nanother detail is whenever we get an\nerror it will skip the rest of the code\nso here it will not console.log next\nline it will skip the rest of this code\nand go directly into\ncatch now one thing you might be\nwondering is why don't we just use TR\ncatch everywhere and prevent all of our\nerrors so try catch and any error\nhandling is meant to handle unexpected\nerrors that means our code is correct\nbut something outside our control caused\nthe error so we can give some\ninstructions on what to\ndo so that's why we don't use try catch\neverywhere we only use it for unexpected\nerrors or errors outside of our\ncontrol so the last thing to know about\nerror handling is that we can man\nmanually create\nerrors to manually create an error in TR\ncatch at the top we're going to use the\nword\nthrow so throw creates a new error or it\nthrows an error that we're going to\ncatch a\nlater and now we need to give this error\na\nvalue so we can use any type of value\nfor an error like a string number or an\nobject for an example we're just going\nto use a string error\none so this will manually create an\nerror when we get an error it's going to\nskip the rest of the code inside these\ncurly brackets and it's going to go\nstraight into catch so this error value\nis going to be saved inside this\nparameter and it's going to run the code\ninside\ncatch so if we\nsave and then check the\nconsole throw creates an error and it's\ngoing to display this error message up\nhere so now let's comment out this\nexample and\nsave next if we're using promises there\nare two ways to manually create an\nerror so inside this promise if we want\nwant to manually create an error we can\nalso just throw an error like the string\nerror\n2 and this will throw an error and go\ninside dot catch by the way if we await\na promise instead of going into catch\nit's going to go inside catch\nhere so await makes it behave sort of\nlike synchronous code or normal code if\nwe save\nand check the\nconsole it will get an error it will not\nload the cart and it will display this\nerror\nmessage so now let's comment out this\nexample and we'll learn the second way\nto create an error in a\npromise inside a promise if we need to\ncreate an error in the future then we\nneed to use different code for example\nhere we load the cart and then once it's\nfinished loading we're going to run this\nfunction so this function runs in the\nfuture inside this function throw does\nnot work because throw does not work in\nthe\nfuture instead promises give us another\nway to create an error when we create a\nnew promise it gives us a second\nparameter\ncalled\nreject reject is a function and it lets\nus create an error in the\nfuture so here after we load the cart in\nthe future let's create an error using\nreject brackets and a string error\nthree so let's comment out resolve as an\nexample\nso now let's\nsave and check the\nconsole and you'll see that reject\ncreated an error in the\nfuture and then it goes down here and\nruns the code inside catch and creates\nthe error\nmessage so the manually create an error\nin a promise we have two ways we can use\nthrow if we're creating the error\nsynchronously or right away or we can\nuse reject if we're creating the error\nasynchronously or in the\nfuture so now let's comment out\nreject and uncomment resolve and\nsave so that's error handling it lets us\nhandle unexpected errors and it also\nlets us create our own\nerrors so now let's save these changes\ninto git we'll open git inside products.\nJS we added. catch for\npromises and an error function for\ncallbacks and then in checkout. JS we\nadded try catch for async await and we\nalso learned how to manually create our\nown\nerrors so we'll type a message\ndescribing our\nchanges learn and error\nhandling and\ncommit now that we learned backend\npromises and async await let's use them\nin our\nproject we'll open our\nproject and open the tab for the project\nand we're going to go to the checkout\npage so the feature we're going to work\non is in the checkout page we're going\nto make this place order button\ninteractive when we click this button\nit's going to take our cart and turn it\ninto an\norder this time instead of writing this\ncode ourselves we're going to use the\nback end to create an\norder so first let's set up an event\nlistener for this button we'll go back\nto our\ncode and open our files\nand that button is in a section called\nthe payment\nsummary so we're going to open scripts\nSL checkout payment summary.jpg\nyour order and now we have the code for\nthe button right here so we're going to\nset up an event listener so we can do\nsomething when we click\nit first we'll add a class to the button\nso we can get it in our\nJavaScript at the end of the class let's\ncreate a new line and add a class\njs- Place Das\norder and now after we put this HTML on\nthe page we're going to set up an event\nlistener to do that we're going to get\nthis button into our JavaScript using\ndocument. query\nselector\nbrackets and a string and to select this\nclass we're going to start with a\njs- place-\norder and now that we have this button\nwe're going to add an event listener to\nto it so we'll create a new line and use\nthe method do add event\nlistener\nbrackets and we'll give this two\nparameters the first parameter is the\nevent we want to listen for which is\nclick and the second parameter is a\nfunction we want to run when we click\nthis button so we'll type brackets arrow\nand curler brackets\nand now when we click this button we're\ngoing to make a request to the back end\nto create the\norder so for this example I set up a URL\npath in my backend for creating orders\ncalled slash\norders so inside here we're going to\nmake a request to the backend using\nfetch\nbrackets and then we're going to give it\nthe URL of the request which is H ttps\ncolon double\nslash super simple\nbackend. Dev and the URL path slash\norders however this time we need to send\nsome data to the back end so we need to\nsend our cart to the backend in order to\ncreate an\norder to send data in a request we need\nto use a different type of requests so\nthere are four common types of requests\nget post put and delete get means we\nwant to get something from the back end\npost means we want the back end to\ncreate something put means we want it to\nupdate something and delete means we\nwant to delete something so far we only\nuse get request which let us get data\nfrom from the back\nend however get requests don't really\nlet us send data to the back\nend so in this situation we want to\ncreate an order so we're going to use\npost to create something post lets us\nsend data to the\nbackend so to create a post request\ninstead of a get request we're going to\ngive fetch a second\nparameter which is an\nobject and inside this object we're\ngoing to give it a property called\nmethod\ncolon and this is the type of the\nrequest in this case we'll use the\nstring\npost and after this we're going to give\nanother property called\nheaders colon and this is going to be an\nobject\nheaders gives the backend more\ninformation about our request and this\nis needed when we're sending data to the\nback\nend inside this object we'll add the\nproperty string Capital C content Das\ncapital T\ntype\ncolon and the value will be the string\napplication slash Json\nthis tells the back endend what type of\ndata we're sending in our request here\nwe're going to send some Jon which is\nbasically a JavaScript\nobject next we're going to add another\nproperty called body\ncolon and this is the actual data we're\ngoing to send to the back\nend according to the documentation we\nneed to send an object with a property\ncalled cart and this contains our cart\narray so in the body let's send an\nobject with a property called cart colon\nand give it the cart\narray so we should have the cart array\nin this file and it should be called\ncart and finally we can't send an object\ndirectly in our request we need to\nconvert it into a Json string\nto do that at the front we'll use\njson.\nstringify Open Bracket and close bracket\nso this will convert this data into a\nJson string and now we can send it to\nthe back\nend okay so after we send this request\nwe need to wait for the response to come\nback to do that fetch returns a\npromise however instead of using dot\nthen to add a Next Step let's use async\na weit because it's cleaner so first we\nneed to make this function\nasync remember we can only use await\ninside an async\nfunction so at the front of this\nfunction we'll type the word\nasync and now in front of fetch we can\nuse\nawait this is going to wait for fetch to\nfinish or for fetch to get a response\nfrom the back end and then go to the\nnext\nline now because we used await we can\nsave the response in a variable so at\nthe front we'll create a variable const\nand call it response and make it equal\nto this result\nnext remember that to get the data\nthat's attached to the response we need\nto use response.\nJson so down here we're going to use\nresponse. Json and\nbrackets now remember that response.\nJson is also a promise so at the front\nwe can use await to wait for this\npromise to finish before going to the\nnext line\nso this will give us the data that's\nattached to the response which should be\nthe order that was created by the\nbacket so let's save this in a variable\nusing const order\nequals and finally let's\nconsole.log the order to see what it\nlooks like so now let's save\nand then we'll open the\nproject and make sure you have some\nproducts in your\ncart and then we'll click place\norder and now we can check our console\nto see what the order looks\nlike and you'll see that we got an order\nobject from the back end it has an order\nID an order time and the products in our\norder including a delivery time and the\nquantity that we\nwant so we successfully use the back end\nto create a new\norder let's also check the network tab\nup here and open\nnetwork so I'll resize this to make it a\nlittle easier to read and we'll search\nfor the super simple\nURL and then we'll find this request\norders with a status 200 and we'll click\nit so inside the details you'll see that\nit was a post request sent to/ orders\nand the status code was 200 so it was\nsuccessful inside the payload tab this\nis what we sent to the back end which is\nour\ncart in the preview tab this is what the\nbackend sent back an order object\nand the response tab is the same thing\nwe got the order object\nback so that's how a real world website\nworks instead of creating the order on\nthe web page or on our computer we send\nan HTTP request to the backend to create\nthe\norder okay now that we created an order\nlet's save it\nsomewhere we'll go back to our\ncode and on the left inside the data\nfolder let's create a file for our\norders so we'll click inside this folder\nand then click here to create a file and\nlet's name it\norders. JS and press\nenter at the top let's create an array\nto contain rain all of our orders we use\nconst orders equals and empty array and\nlet's export this so we can use it in\nother files\nexport next let's create a function for\nadding an order to this array so we'll\ncreate a\nfunction add\norder brackets and curly brackets and\nwe'll give this function an order object\nand we're just going to add it to the\narray now for orders we usually want the\nmost recent order at the top so we're\ngoing to add this order to the front of\nthe array to do that we'll type the\narray name orders and use the method do\nunshift\nbrackets and we'll give it the\norder so this will add the order to the\nfront of the array instead of the\nback finally let's save our orders into\nlocal storage so we'll create a function\nto save to local storage\nfunction save to\nstorage brackets and curly brackets and\nwe'll run local\nstorage. set item brackets and a string\nwe'll use a local storage key orders\ncomma and remember local storage only\nsupports strings so we'll use\njson.\nstringify\nbrackets\norders and now when we modify this array\nwe're going to save to storage and\nbrackets finally at the top let's load\nthe orders from Storage\nso\nhere we use local\nstorage. getet item brackets the string\norders and remember that this will be a\nstring so we need to convert it back\ninto an array using the code json. pars\nand\nbrackets now in the beginning we're not\ngoing to have any orders saved in local\nstorage so we can give this a default\nvalue using or and an empty array so if\nthere's nothing in local storage it's\ngoing to use this empty array as a\ndefault and\nsave so now let's use add order in the\npayment summary so first we'll export\nthis\nfunction and and\nsave and then open the payment summary\nagain and at the top we're going to\nimport that function so here we'll\nimport curly brackets add\norder from a\nstring and we'll go into the data folder\nwhich is do do slash\ndotdata SL orders\ndoj and and we'll scroll back\ndown and now after we create an order\nfrom the back end we're going to add it\nto the array and save it in local\nstorage using the function add order\nbrackets the order\nobject and\nsave now if we go to our web page and\nclick place\norder this should create an order order\nfrom the back end and save it in local\nstorage so now we can open our\nconsole and go to the console Tab and\nlet's check if it's inside local storage\nusing local\nstorage. getet item brackets and the\nstring\norders and press\nenter and you'll see that we saved an\norder in local store\nstorage if you ever want to remove the\norders from local storage you can use\nthis\ncode local\nstorage. remove item brackets and the\nstring\norders press enter and then refresh the\npage let's go back to our code\nand let's get some practice and add some\nerror handling to this code so at the\ntop for asyn of weight we're going to\nuse try catch so we'll type try curly\nbracket and catch brackets and curly\nbrackets and catch gets a parameter\ncalled\nerror so now we're going to move our\ncode inside a try we'll select this code\nand then right click\ncut inside try right click and\npaste and I'll create a new line and now\nif we make a request and there's some\nsort of network error that error will go\ndown here and we'll run the code inside\ncatch so in here let's display a\nmessage\nconsole. log the string\nunexpected\nerror try again\nlater the last step is after we create\nan order we should go to the orders\npage to do that at the bottom\nhere we're going to use an object called\nwindow.location window.location is a\nspecial object object provided by\nJavaScript and it lets us control the\nURL at the top of the\nbrowser if we change the location object\nit will change the url at the top so\nlet's give this a try we'll go into our\ncode and we'll type\nwindow.location Now location has a\nproperty\ncalled href\nthis gives us the URL at the top of the\nbrowser and if we change the href\nproperty it will change the url at the\ntop of the browser so we'll try that in\nour code we're going to change. href and\nmake it equal to the string orders.\nHTML so this will replace everything\nafter the slash here with orders.\nHTML and this will open the orders. HTML\nfile which is at the bottom\nhere and this will open the orders\nPage by the way orders. HTML is a file\npath the current file is checkout. HTML\nbecause this code is running on the\ncheckout page so it starts from\ncheckout. HTML and then looks for a file\ncalled orders. HTML beside it which is\nthis file here and it loads this file in\nthe\nbrowser so now let's\nsave we'll open the project and then\nclick place\norder so it should create a new order\nusing the backend and it will take us to\nthe orders\npage so right now we have a list of\norder objects and that's all the data\nthat we need to create this page I'll\nleave generating the HTML and making\nthis page interactive as\nexercises so now let's check our tests\nto make sure that everything is still\nworking we'll open the tab for our tests\nand I'll refresh just in case and it\nlooks good and we'll save our changes\ninto git we'll go to the git section\ninside orders. JS we created some\nfunctions for saving our orders and in\npayment summary.\nJS we made the place order button\ninteractive and we use the backend to\ncreate an order let's create a message\ndescribing these\nchanges create order using the back end\nand\ncommit so we're going to learn one more\nthing in this lesson and this is needed\nto create the tracking page we're going\nto learn how to use URL\nparameters so first let's open our\nproject and we'll go back to the orders\npage and on this page we have these\ntrack package links beside the products\nif we click this link it will take us to\nthe tracking page at tracking.\nHTML however right now this page is just\nplain HTML there's no\nJavaScript so if we go back to our\norders and then track a different\nproduct you'll notice that all of the\ntracking pag pages are the\nsame so we need to make each tracking\npage different depending on the order\nand the product so how do we know which\nproduct to track on this\npage to create this we can use a feature\ncalled URL\nparameters URL parameters let us save\ndata directly in the\nURL to create a URL parameter at the top\nafter this URL we're going to type\nquestion mark and then order capital i d\nequals 1 2 3 for example and press\nenter so the question mark means we're\nadding a URL parameter to this\nURL so a parameter is a property value\npair the left side is a property and the\nright side is a value\nthis is sort of like an object like\nthis so using URL parameters we can save\nsome data in the URL like\nthis and then we can use JavaScript to\nget this data out of the URL to do that\nwe'll go back to our\ncode and we'll open our files here and\nwe'll scroll down to the bottom to the\ntracking\npage and let's scroll all the way down\nto the\nbottom and at the bottom of the body\nlet's add a script tag to run some\nJavaScript so we'll type less than\nscript greater\nthan and to get the parameters out of\nthe URL we can use a built-in class\ncalled\nURL first let's generate an object using\nthis class we'll type\nNew Capital URL and\nbrackets and we'll give it the URL that\nwe want to get the parameters\nfrom so in here we'll type\nwindow.location.href\nremember that\nwindow.location.href gets the URL at the\ntop of the\nbrowser and now let's save this object\nin a variable\nat the front we'll create const URL\nequals this\nobject so this URL class analyzes the\nURL that we give it and breaks it down\ninto different parts one of the parts\nare the URL\nparameters to get the parameters we're\ngoing to use a property\nurl. search capital p perams\nby the way URL parameters are also\ncalled search\nparameters because they're used for\nfeatures like YouTube\nsearch so search params will let us get\nthe URL parameters up\nhere so let's say that we wanted the\norder ID\nparameter inside our\ncode search params has a method called\nDot\nget brackets and this lets us get\nindividual parameters so inside here\nwe'll give it a string and we'll get the\norder capital i d parameter out of the\nURL so let's console.log this\nconsole.log and\nbrackets if we\nsave and then open our project and go to\nthe tracking page and then open the\nconsole right click\ninspect the\nconsole you'll see that it gave us the\norder ID that we saved up\nhere so using that code we can get URL\nparameters out of the URL at the top and\nthen use them to create this\npage we can also say save multiple\nparameters in the URL to save another\nparameter at the end we can just type\nand and now we can give it another\nproperty value pair like product Capital\nID equal\n456 and press\nenter and now inside our code we can get\nthis second parameter\nso inside here we're going to make a\ncopy of this line select it right click\ncopy and then down here right click\npaste and this time we're going to get\nthe\nparameter product Capital ID and\nsave if we open the page and open the\nconsole\nwe got the order ID as well as the\nproduct ID out of the\nURL so URL parameters lets us save\ndifferent data in each\nURL and we can actually go back and\nforth between them so if we click the\nback button it will go to this URL and\nthis URL has different data or\nparameters saved inside if we click\nforward this URL has different\nparameters or data saved\ninside and this is how YouTube search\nworks if we search for something our\nsearch is saved as a URL parameter if we\nsearch for something else our search is\nalso saved as a URL parameter and we can\ngo back and forth between the\ntwo so this is actually all the data\nthat we need to create the tracking page\nwe need to know which order it is and\nwhich product it\nis now there's one more thing to know to\ncreate this page we'll go back to our\ncode and we're going to open the orders\npage at orders.\nHTML and we're going to find the track\npackage button using control F or\ncommand F and we'll type the text in\nthat button track\npackage so notice that these buttons are\njust a link to the tracking page or\ntracking.\nHTML so when you're generating this\nHTML make sure that you add URL\nparameters after this tracking page\nURL using question mark the order\nCapital ID equals and then you\nsubstitute the order ID like 1 2 3\nand then and also attach the product ID\nproduct Capital ID equals\n456 so when generating this HTML make\nsure you substitute the order ID and\nproduct ID into this URL so that when it\nopens the tracking page you know which\norder and which product to track\nI'll leave generating the HTML and\nmaking the tracking page interactive as\nexercises so now let's save this\nfile and let's check our tests so we'll\nopen the browser and open the test Tab\nand everything is still working and\nwe'll save these changes into git open\nthe git\nsection in orders.\nHTML we added an example of adding URL\nparameters to the tracking page\nLink in tracking. HTML we added an\nexample of getting the parameters out of\nthe URL at the\ntop let's create a message describing\nthese\nchanges add URL\nparameters\nexample and commit\nand that's the end of this lesson in\nthis lesson we learned what a vend is\nand how to make HTTP requests to the\nback end we learned how to use XML HTTP\nrequest and\nfetch we learned how to handle\nasynchronous code using callbacks\npromises and async await we learned how\nto test asynchronous code we learned\nabout error handling for unexpected\nerrors we use the backend in our project\nand we learn URL\nparameters before we look at the\nexercises you might be wondering what's\nthe next step after this course instead\nof just using a backend the next step is\nto learn how to create our own backend\nto do that you need to learn the command\nline and after that you'll learn a\ntechnology called nodejs which lets us\ncreate our own\nbackend also after this course you can\nlearn how to put a website on the\ninternet using this video right\nhere here are some exercises that'll\nhelp you practice what we learned in\nthis\nlesson e\nthanks for watching here are some other\nvideos and courses that you might be\ninterested in if you want to support\nthis channel you can click like\nsubscribe and share this video with\nothers thanks again and I'll see you in\nthe next one\n",
  "words": [
    "welcome",
    "complete",
    "javascript",
    "course",
    "course",
    "going",
    "learn",
    "build",
    "complex",
    "websites",
    "using",
    "javascript",
    "beginner",
    "professional",
    "level",
    "end",
    "course",
    "going",
    "build",
    "interactive",
    "website",
    "add",
    "products",
    "cart",
    "create",
    "order",
    "even",
    "track",
    "order",
    "along",
    "way",
    "also",
    "going",
    "build",
    "smaller",
    "projects",
    "like",
    "rock",
    "paper",
    "scissors",
    "game",
    "list",
    "calculator",
    "need",
    "previous",
    "coding",
    "technical",
    "experience",
    "follow",
    "along",
    "course",
    "cover",
    "everything",
    "need",
    "learn",
    "javascript",
    "going",
    "start",
    "basics",
    "javascript",
    "going",
    "build",
    "way",
    "step",
    "step",
    "going",
    "learn",
    "major",
    "features",
    "javascript",
    "also",
    "use",
    "javascript",
    "together",
    "technologies",
    "like",
    "html",
    "css",
    "also",
    "going",
    "learn",
    "advanced",
    "features",
    "like",
    "objectoriented",
    "programming",
    "backend",
    "callbacks",
    "promises",
    "async",
    "await",
    "use",
    "features",
    "together",
    "build",
    "complex",
    "project",
    "amazon",
    "project",
    "let",
    "practice",
    "learn",
    "deepen",
    "understanding",
    "find",
    "different",
    "lessons",
    "course",
    "course",
    "video",
    "need",
    "adjust",
    "speed",
    "video",
    "lesson",
    "going",
    "give",
    "bunch",
    "exercises",
    "practice",
    "skills",
    "learned",
    "total",
    "course",
    "250",
    "exercises",
    "said",
    "let",
    "get",
    "started",
    "begin",
    "something",
    "course",
    "working",
    "properly",
    "make",
    "sure",
    "check",
    "first",
    "comment",
    "video",
    "list",
    "solutions",
    "going",
    "course",
    "windows",
    "steps",
    "using",
    "mac",
    "going",
    "start",
    "basics",
    "javascript",
    "build",
    "way",
    "step",
    "step",
    "first",
    "javascript",
    "javascript",
    "technology",
    "use",
    "create",
    "websites",
    "website",
    "like",
    "access",
    "youtube",
    "amazon",
    "computer",
    "using",
    "phone",
    "usually",
    "use",
    "app",
    "computer",
    "use",
    "website",
    "actually",
    "three",
    "technologies",
    "use",
    "create",
    "websites",
    "html",
    "css",
    "javascript",
    "technologies",
    "specific",
    "purpose",
    "creating",
    "website",
    "html",
    "creates",
    "content",
    "website",
    "creates",
    "buttons",
    "text",
    "images",
    "css",
    "changes",
    "appearance",
    "website",
    "adding",
    "css",
    "make",
    "website",
    "look",
    "nice",
    "finally",
    "javascript",
    "makes",
    "website",
    "interactive",
    "html",
    "css",
    "click",
    "one",
    "buttons",
    "website",
    "anything",
    "add",
    "javascript",
    "make",
    "website",
    "something",
    "click",
    "button",
    "add",
    "product",
    "cart",
    "create",
    "order",
    "course",
    "focused",
    "javascript",
    "want",
    "learn",
    "html",
    "css",
    "detail",
    "full",
    "whole",
    "course",
    "like",
    "one",
    "find",
    "video",
    "description",
    "let",
    "get",
    "started",
    "javascript",
    "first",
    "thing",
    "need",
    "install",
    "piece",
    "software",
    "called",
    "web",
    "browser",
    "web",
    "browser",
    "lets",
    "us",
    "view",
    "websites",
    "create",
    "course",
    "popular",
    "web",
    "browser",
    "web",
    "development",
    "google",
    "chrome",
    "recommend",
    "using",
    "google",
    "chrome",
    "open",
    "default",
    "web",
    "browser",
    "computer",
    "windows",
    "microsoft",
    "edge",
    "mac",
    "safari",
    "type",
    "top",
    "press",
    "enter",
    "search",
    "google",
    "chrome",
    "click",
    "result",
    "follow",
    "instructions",
    "download",
    "install",
    "installed",
    "chrome",
    "ready",
    "begin",
    "going",
    "start",
    "learning",
    "exactly",
    "javascript",
    "work",
    "easiest",
    "way",
    "understand",
    "javascript",
    "basically",
    "giving",
    "instructions",
    "computer",
    "computer",
    "follows",
    "instructions",
    "find",
    "best",
    "way",
    "learn",
    "jump",
    "give",
    "try",
    "first",
    "let",
    "open",
    "google",
    "chrome",
    "next",
    "going",
    "click",
    "top",
    "type",
    "super",
    "simple",
    "dodev",
    "slj",
    "basics",
    "press",
    "enter",
    "learn",
    "give",
    "computer",
    "instructions",
    "follow",
    "going",
    "go",
    "blank",
    "area",
    "web",
    "page",
    "going",
    "rightclick",
    "click",
    "inspect",
    "click",
    "console",
    "tab",
    "console",
    "show",
    "bottom",
    "like",
    "click",
    "three",
    "dots",
    "select",
    "icon",
    "okay",
    "inside",
    "console",
    "give",
    "instructions",
    "computer",
    "let",
    "learn",
    "first",
    "instruction",
    "going",
    "type",
    "going",
    "type",
    "alert",
    "open",
    "bracket",
    "single",
    "quote",
    "hello",
    "single",
    "quote",
    "close",
    "bracket",
    "semicolon",
    "make",
    "sure",
    "type",
    "exactly",
    "javascript",
    "type",
    "things",
    "correctly",
    "wo",
    "work",
    "instruction",
    "create",
    "popup",
    "text",
    "hello",
    "inside",
    "get",
    "computer",
    "follow",
    "instruction",
    "press",
    "enter",
    "see",
    "computer",
    "exactly",
    "tell",
    "creates",
    "popup",
    "text",
    "hello",
    "inside",
    "let",
    "press",
    "okay",
    "let",
    "give",
    "another",
    "instruction",
    "computer",
    "going",
    "type",
    "going",
    "type",
    "alert",
    "open",
    "bracket",
    "single",
    "quote",
    "time",
    "going",
    "type",
    "different",
    "message",
    "popup",
    "good",
    "job",
    "single",
    "quote",
    "close",
    "bracket",
    "semicolon",
    "instruction",
    "create",
    "popup",
    "time",
    "text",
    "good",
    "job",
    "inside",
    "popup",
    "press",
    "enter",
    "computer",
    "exactly",
    "tell",
    "creates",
    "popup",
    "text",
    "good",
    "job",
    "inside",
    "basically",
    "main",
    "idea",
    "behind",
    "javascript",
    "giving",
    "instructions",
    "computer",
    "computer",
    "follows",
    "instructions",
    "note",
    "open",
    "use",
    "console",
    "website",
    "using",
    "superimple",
    "dodev",
    "example",
    "let",
    "press",
    "okay",
    "going",
    "learn",
    "terminology",
    "naming",
    "instructions",
    "give",
    "computer",
    "instructions",
    "called",
    "code",
    "press",
    "enter",
    "computer",
    "follows",
    "instructions",
    "called",
    "running",
    "code",
    "many",
    "different",
    "languages",
    "use",
    "write",
    "code",
    "called",
    "programming",
    "languages",
    "similar",
    "many",
    "human",
    "lang",
    "languages",
    "use",
    "communicate",
    "examples",
    "programming",
    "languages",
    "javascript",
    "python",
    "java",
    "writing",
    "code",
    "using",
    "javascript",
    "programming",
    "language",
    "call",
    "javascript",
    "code",
    "understand",
    "basic",
    "terminology",
    "let",
    "look",
    "examples",
    "javascript",
    "code",
    "another",
    "thing",
    "math",
    "let",
    "go",
    "back",
    "console",
    "type",
    "going",
    "type",
    "2",
    "2",
    "instruction",
    "code",
    "tells",
    "computer",
    "math",
    "calculate",
    "2",
    "2",
    "press",
    "enter",
    "computer",
    "follows",
    "instruction",
    "runs",
    "code",
    "calculates",
    "2",
    "gives",
    "us",
    "result",
    "four",
    "let",
    "another",
    "example",
    "going",
    "type",
    "10",
    "minus",
    "3",
    "press",
    "enter",
    "run",
    "code",
    "computer",
    "math",
    "calculates",
    "result",
    "gives",
    "us",
    "seven",
    "see",
    "javascript",
    "many",
    "different",
    "things",
    "like",
    "create",
    "popups",
    "math",
    "let",
    "look",
    "one",
    "example",
    "javascript",
    "going",
    "go",
    "bottom",
    "type",
    "code",
    "inner",
    "capital",
    "html",
    "equals",
    "single",
    "quilt",
    "hello",
    "single",
    "quilt",
    "semicolon",
    "make",
    "sure",
    "write",
    "exactly",
    "dots",
    "capital",
    "letters",
    "javascript",
    "case",
    "sensitive",
    "let",
    "press",
    "enter",
    "run",
    "code",
    "code",
    "removes",
    "everything",
    "page",
    "replaces",
    "text",
    "hello",
    "example",
    "use",
    "javascript",
    "modify",
    "web",
    "page",
    "modifying",
    "web",
    "page",
    "one",
    "important",
    "features",
    "javascript",
    "going",
    "using",
    "feature",
    "throughout",
    "course",
    "basics",
    "javascript",
    "giving",
    "instructions",
    "computer",
    "instructions",
    "called",
    "code",
    "computer",
    "follows",
    "instru",
    "instuctions",
    "called",
    "running",
    "code",
    "also",
    "worry",
    "memorizing",
    "code",
    "find",
    "copy",
    "code",
    "write",
    "course",
    "video",
    "description",
    "understand",
    "basics",
    "javascript",
    "let",
    "learn",
    "javascript",
    "language",
    "take",
    "look",
    "code",
    "alert",
    "hello",
    "might",
    "wondering",
    "ing",
    "brackets",
    "quote",
    "mean",
    "characters",
    "special",
    "meaning",
    "language",
    "something",
    "called",
    "syntax",
    "syntax",
    "rules",
    "follow",
    "using",
    "programming",
    "language",
    "like",
    "javascript",
    "sort",
    "like",
    "english",
    "also",
    "rules",
    "follow",
    "called",
    "grammar",
    "difference",
    "english",
    "follow",
    "rules",
    "grammar",
    "perfectly",
    "people",
    "still",
    "understand",
    "us",
    "programming",
    "follow",
    "rules",
    "syntax",
    "exactly",
    "otherwise",
    "computer",
    "wo",
    "understand",
    "code",
    "example",
    "scroll",
    "type",
    "code",
    "alert",
    "open",
    "bracket",
    "quote",
    "hello",
    "quote",
    "close",
    "bracket",
    "semicolon",
    "time",
    "remove",
    "first",
    "bracket",
    "press",
    "enter",
    "give",
    "us",
    "syntax",
    "error",
    "following",
    "rules",
    "syntax",
    "computer",
    "understand",
    "code",
    "javascript",
    "lot",
    "syntax",
    "rules",
    "ca",
    "learn",
    "right",
    "instead",
    "going",
    "learn",
    "syntax",
    "rules",
    "one",
    "one",
    "go",
    "course",
    "learn",
    "enough",
    "syntax",
    "exercises",
    "end",
    "lesson",
    "need",
    "know",
    "scroll",
    "part",
    "code",
    "tells",
    "computer",
    "create",
    "popup",
    "text",
    "quotes",
    "text",
    "inside",
    "popup",
    "change",
    "text",
    "change",
    "text",
    "inside",
    "popup",
    "thing",
    "code",
    "change",
    "text",
    "quotes",
    "change",
    "text",
    "appears",
    "page",
    "need",
    "know",
    "javascript",
    "syntax",
    "learn",
    "exact",
    "ly",
    "characters",
    "like",
    "brackets",
    "quotes",
    "semicolon",
    "mean",
    "later",
    "course",
    "lesson",
    "learned",
    "javascript",
    "basically",
    "giving",
    "instructions",
    "computer",
    "wrote",
    "first",
    "lines",
    "javascript",
    "code",
    "learned",
    "run",
    "code",
    "using",
    "console",
    "web",
    "browser",
    "learned",
    "syntax",
    "rules",
    "follow",
    "writing",
    "code",
    "thanks",
    "watching",
    "course",
    "far",
    "want",
    "support",
    "channel",
    "check",
    "premium",
    "version",
    "courses",
    "like",
    "one",
    "get",
    "certificate",
    "completion",
    "better",
    "learning",
    "platform",
    "interested",
    "extra",
    "videos",
    "videos",
    "behind",
    "scenes",
    "content",
    "check",
    "links",
    "also",
    "support",
    "channel",
    "liking",
    "video",
    "subscribing",
    "sharing",
    "video",
    "others",
    "thanks",
    "let",
    "continue",
    "course",
    "exercises",
    "try",
    "practice",
    "learned",
    "lesson",
    "find",
    "solutions",
    "exercises",
    "video",
    "description",
    "understand",
    "basics",
    "javascript",
    "going",
    "learn",
    "feature",
    "language",
    "language",
    "lesson",
    "going",
    "focus",
    "numbers",
    "math",
    "first",
    "close",
    "console",
    "actually",
    "prepared",
    "project",
    "use",
    "lesson",
    "open",
    "project",
    "going",
    "go",
    "browser",
    "click",
    "type",
    "super",
    "simple",
    "dodev",
    "sl",
    "projects",
    "sl",
    "amazon",
    "press",
    "enter",
    "actually",
    "final",
    "project",
    "going",
    "create",
    "course",
    "website",
    "similar",
    "amazon",
    "add",
    "products",
    "cart",
    "view",
    "cart",
    "clicking",
    "top",
    "right",
    "page",
    "see",
    "products",
    "cart",
    "modify",
    "cart",
    "create",
    "order",
    "lesson",
    "going",
    "focus",
    "right",
    "section",
    "calculates",
    "cost",
    "cart",
    "including",
    "cost",
    "products",
    "shipping",
    "taxes",
    "section",
    "great",
    "way",
    "learn",
    "numbers",
    "math",
    "javascript",
    "first",
    "let",
    "open",
    "console",
    "write",
    "javascript",
    "code",
    "going",
    "find",
    "blank",
    "area",
    "web",
    "page",
    "rightclick",
    "click",
    "inspect",
    "click",
    "console",
    "already",
    "saw",
    "examples",
    "math",
    "previous",
    "lesson",
    "example",
    "wrote",
    "code",
    "2",
    "2",
    "press",
    "enter",
    "computer",
    "adds",
    "two",
    "numbers",
    "results",
    "four",
    "also",
    "10",
    "minus",
    "3",
    "press",
    "enter",
    "computer",
    "subtracts",
    "two",
    "numbers",
    "gives",
    "us",
    "seven",
    "addition",
    "adding",
    "subtracting",
    "also",
    "multiply",
    "divide",
    "multiply",
    "going",
    "type",
    "10",
    "star",
    "3",
    "press",
    "enter",
    "star",
    "character",
    "multiplying",
    "divide",
    "going",
    "type",
    "10",
    "slash2",
    "press",
    "enter",
    "forward",
    "slash",
    "character",
    "dividing",
    "let",
    "learn",
    "syntax",
    "rules",
    "numbers",
    "math",
    "syntax",
    "math",
    "pretty",
    "straightforward",
    "javascript",
    "write",
    "like",
    "normal",
    "math",
    "also",
    "math",
    "two",
    "numbers",
    "example",
    "add",
    "two",
    "plus",
    "2",
    "plus",
    "another",
    "two",
    "press",
    "enter",
    "computer",
    "add",
    "three",
    "numbers",
    "together",
    "result",
    "six",
    "finally",
    "javascript",
    "handle",
    "decimal",
    "numbers",
    "like",
    "plus",
    "press",
    "enter",
    "calculate",
    "decimal",
    "numbers",
    "result",
    "let",
    "practical",
    "examples",
    "going",
    "calculate",
    "number",
    "numers",
    "final",
    "project",
    "first",
    "let",
    "set",
    "cart",
    "products",
    "cart",
    "make",
    "sure",
    "cart",
    "two",
    "socks",
    "free",
    "shipping",
    "one",
    "basketball",
    "shipping",
    "nothing",
    "else",
    "cart",
    "need",
    "modify",
    "cart",
    "clicking",
    "update",
    "delete",
    "going",
    "homepage",
    "clicking",
    "top",
    "left",
    "adding",
    "products",
    "missing",
    "products",
    "cart",
    "numbers",
    "right",
    "ready",
    "begin",
    "let",
    "start",
    "calculating",
    "number",
    "cost",
    "products",
    "shipping",
    "taxes",
    "calculate",
    "number",
    "using",
    "javascript",
    "going",
    "add",
    "cost",
    "products",
    "console",
    "going",
    "add",
    "cost",
    "socks",
    "10",
    "90",
    "two",
    "going",
    "multiply",
    "two",
    "going",
    "add",
    "cost",
    "basketball",
    "plus",
    "press",
    "enter",
    "computer",
    "math",
    "calculation",
    "give",
    "us",
    "number",
    "scroll",
    "top",
    "project",
    "see",
    "number",
    "got",
    "matches",
    "page",
    "use",
    "javascript",
    "calculate",
    "number",
    "let",
    "another",
    "example",
    "going",
    "calculate",
    "third",
    "number",
    "cost",
    "products",
    "plus",
    "shipping",
    "feel",
    "free",
    "pause",
    "video",
    "want",
    "try",
    "first",
    "otherwise",
    "together",
    "let",
    "go",
    "back",
    "console",
    "going",
    "add",
    "cost",
    "products",
    "2",
    "plus",
    "time",
    "going",
    "add",
    "cost",
    "shipping",
    "press",
    "enter",
    "computer",
    "calculation",
    "give",
    "us",
    "number",
    "matches",
    "see",
    "final",
    "project",
    "next",
    "going",
    "learn",
    "important",
    "feature",
    "math",
    "called",
    "order",
    "operations",
    "adding",
    "subtracting",
    "multiplying",
    "dividing",
    "called",
    "operations",
    "characters",
    "middle",
    "called",
    "operators",
    "certain",
    "order",
    "operations",
    "example",
    "go",
    "back",
    "console",
    "type",
    "calculation",
    "1",
    "1",
    "3",
    "press",
    "enter",
    "notice",
    "multiplies",
    "1",
    "3",
    "first",
    "equals",
    "3",
    "adds",
    "1",
    "equals",
    "4",
    "notice",
    "add",
    "1",
    "1",
    "first",
    "equal",
    "2",
    "2",
    "3",
    "6",
    "way",
    "math",
    "normally",
    "works",
    "multiply",
    "divide",
    "done",
    "first",
    "add",
    "subtract",
    "done",
    "called",
    "order",
    "operations",
    "javascript",
    "follows",
    "rules",
    "multiply",
    "divide",
    "done",
    "first",
    "add",
    "subtract",
    "done",
    "order",
    "operations",
    "also",
    "called",
    "operator",
    "precedence",
    "javascript",
    "one",
    "thing",
    "note",
    "multiply",
    "divide",
    "priority",
    "calculation",
    "calculate",
    "left",
    "right",
    "add",
    "subtract",
    "also",
    "priority",
    "calculation",
    "also",
    "calculate",
    "left",
    "right",
    "another",
    "feature",
    "order",
    "operations",
    "use",
    "brackets",
    "control",
    "part",
    "calculation",
    "gets",
    "done",
    "first",
    "example",
    "let",
    "type",
    "calculation",
    "1",
    "1",
    "3",
    "time",
    "going",
    "add",
    "open",
    "bracket",
    "clos",
    "bracket",
    "around",
    "1",
    "1",
    "press",
    "enter",
    "calculation",
    "inside",
    "brackets",
    "done",
    "first",
    "add",
    "1",
    "1",
    "2",
    "2",
    "3",
    "6",
    "use",
    "brackets",
    "javascript",
    "always",
    "calculation",
    "inside",
    "brackets",
    "first",
    "rest",
    "calculation",
    "brackets",
    "highest",
    "priority",
    "order",
    "operations",
    "let",
    "learn",
    "syntax",
    "rules",
    "brackets",
    "matching",
    "open",
    "bracket",
    "close",
    "bracket",
    "something",
    "like",
    "work",
    "two",
    "open",
    "brackets",
    "clos",
    "bracket",
    "also",
    "need",
    "complete",
    "calculation",
    "brackets",
    "also",
    "work",
    "1",
    "1",
    "multiply",
    "complete",
    "calculation",
    "let",
    "practical",
    "examples",
    "using",
    "order",
    "operations",
    "first",
    "going",
    "setup",
    "final",
    "project",
    "actually",
    "going",
    "remove",
    "products",
    "cart",
    "cart",
    "empty",
    "go",
    "homepage",
    "clicking",
    "top",
    "left",
    "time",
    "going",
    "add",
    "new",
    "products",
    "add",
    "one",
    "basketball",
    "two",
    "let",
    "go",
    "back",
    "cart",
    "clicking",
    "top",
    "right",
    "scroll",
    "going",
    "calculate",
    "numbers",
    "section",
    "let",
    "calculate",
    "number",
    "top",
    "cost",
    "products",
    "go",
    "back",
    "console",
    "add",
    "cost",
    "basketball",
    "plus",
    "cost",
    "799",
    "two",
    "multiply",
    "two",
    "press",
    "enter",
    "give",
    "us",
    "number",
    "see",
    "final",
    "project",
    "notice",
    "calculation",
    "taking",
    "advantage",
    "order",
    "operations",
    "even",
    "though",
    "multiply",
    "written",
    "last",
    "still",
    "multiply",
    "two",
    "numbers",
    "first",
    "calculate",
    "cost",
    "two",
    "first",
    "add",
    "cost",
    "basketball",
    "okay",
    "let",
    "try",
    "something",
    "little",
    "difficult",
    "going",
    "learn",
    "calculate",
    "10",
    "tax",
    "calculate",
    "10",
    "something",
    "unfortunately",
    "ca",
    "multiply",
    "10",
    "javascript",
    "instead",
    "calculate",
    "percent",
    "manually",
    "1",
    "actually",
    "equal",
    "1",
    "100",
    "percent",
    "means",
    "10",
    "equal",
    "10",
    "100",
    "equals",
    "calculate",
    "10",
    "manually",
    "multiply",
    "number",
    "type",
    "30",
    "3",
    "multiplied",
    "10",
    "press",
    "enter",
    "give",
    "us",
    "number",
    "close",
    "final",
    "project",
    "amount",
    "money",
    "number",
    "accurate",
    "need",
    "later",
    "lesson",
    "learn",
    "round",
    "number",
    "exactly",
    "web",
    "page",
    "let",
    "practice",
    "order",
    "operations",
    "let",
    "calculate",
    "tax",
    "except",
    "instead",
    "using",
    "final",
    "number",
    "3",
    "let",
    "calculate",
    "number",
    "individually",
    "like",
    "bottom",
    "going",
    "add",
    "cost",
    "basketball",
    "2",
    "multiply",
    "tax",
    "percent",
    "time",
    "press",
    "enter",
    "unfortunately",
    "number",
    "match",
    "got",
    "look",
    "calculation",
    "according",
    "order",
    "operations",
    "multiply",
    "done",
    "first",
    "multiply",
    "three",
    "numbers",
    "first",
    "add",
    "however",
    "want",
    "actually",
    "want",
    "calculate",
    "number",
    "first",
    "cost",
    "products",
    "get",
    "computer",
    "calculate",
    "first",
    "multiply",
    "tax",
    "percent",
    "use",
    "brackets",
    "control",
    "part",
    "calculation",
    "gets",
    "done",
    "first",
    "let",
    "create",
    "calculation",
    "20",
    "2",
    "time",
    "going",
    "add",
    "brackets",
    "around",
    "part",
    "calculation",
    "make",
    "sure",
    "gets",
    "calculated",
    "first",
    "end",
    "multiply",
    "tax",
    "percent",
    "press",
    "enter",
    "get",
    "number",
    "use",
    "math",
    "order",
    "operations",
    "calculate",
    "numbers",
    "section",
    "final",
    "project",
    "worry",
    "good",
    "math",
    "learn",
    "javascript",
    "show",
    "math",
    "works",
    "javascript",
    "rest",
    "lesson",
    "going",
    "learn",
    "details",
    "numbers",
    "math",
    "first",
    "detail",
    "going",
    "learn",
    "weird",
    "behavior",
    "math",
    "javascript",
    "first",
    "need",
    "learn",
    "terminology",
    "programming",
    "whole",
    "numbers",
    "like",
    "2",
    "3",
    "4",
    "called",
    "integers",
    "decimal",
    "numbers",
    "like",
    "called",
    "floating",
    "point",
    "numbers",
    "floats",
    "unfortunately",
    "computers",
    "problem",
    "working",
    "floats",
    "example",
    "go",
    "back",
    "console",
    "type",
    "calculation",
    "plus",
    "press",
    "enter",
    "give",
    "us",
    "weird",
    "number",
    "close",
    "little",
    "bit",
    "inaccurate",
    "problem",
    "specific",
    "javascript",
    "many",
    "programming",
    "languages",
    "also",
    "problem",
    "reason",
    "happens",
    "computers",
    "store",
    "numbers",
    "give",
    "simplified",
    "explan",
    "computers",
    "store",
    "zeros",
    "ones",
    "humans",
    "count",
    "0",
    "9",
    "sort",
    "mismatch",
    "number",
    "systems",
    "integers",
    "problem",
    "computer",
    "use",
    "bunch",
    "zeros",
    "ones",
    "store",
    "however",
    "decimal",
    "numbers",
    "floats",
    "sometimes",
    "computer",
    "ca",
    "store",
    "number",
    "properly",
    "example",
    "computer",
    "computer",
    "tries",
    "store",
    "using",
    "zeros",
    "ones",
    "top",
    "computer",
    "stores",
    "bottom",
    "equal",
    "human",
    "numbers",
    "see",
    "computer",
    "gets",
    "closer",
    "closer",
    "never",
    "actually",
    "reaches",
    "get",
    "inaccuracies",
    "calculating",
    "floats",
    "computers",
    "ca",
    "store",
    "floats",
    "properly",
    "note",
    "happen",
    "floats",
    "example",
    "computers",
    "store",
    "without",
    "problems",
    "inaccuracies",
    "happen",
    "floats",
    "however",
    "calculating",
    "money",
    "definitely",
    "want",
    "avoid",
    "inaccuracies",
    "let",
    "learn",
    "first",
    "going",
    "set",
    "cart",
    "make",
    "sure",
    "cart",
    "one",
    "basketball",
    "free",
    "shipping",
    "time",
    "one",
    "going",
    "click",
    "update",
    "change",
    "one",
    "click",
    "save",
    "also",
    "free",
    "shipping",
    "let",
    "scroll",
    "going",
    "calculate",
    "number",
    "top",
    "cost",
    "products",
    "let",
    "go",
    "console",
    "going",
    "add",
    "cost",
    "basketball",
    "plus",
    "cost",
    "press",
    "enter",
    "calculating",
    "floats",
    "causes",
    "inaccuracies",
    "saw",
    "earlier",
    "avoid",
    "problem",
    "best",
    "practice",
    "calculating",
    "money",
    "calculate",
    "cents",
    "instead",
    "dollars",
    "instead",
    "going",
    "calculate",
    "plus",
    "notice",
    "using",
    "floats",
    "anymore",
    "avoid",
    "inaccuracies",
    "number",
    "cents",
    "need",
    "convert",
    "back",
    "dollars",
    "surround",
    "calculation",
    "brackets",
    "make",
    "sure",
    "calculate",
    "first",
    "end",
    "divide",
    "100",
    "convert",
    "back",
    "dollars",
    "100",
    "cents",
    "dollar",
    "press",
    "enter",
    "scroll",
    "get",
    "exact",
    "number",
    "see",
    "page",
    "remember",
    "programming",
    "calculations",
    "floats",
    "sometimes",
    "inaccurate",
    "working",
    "money",
    "best",
    "practice",
    "calculation",
    "cents",
    "convert",
    "back",
    "dollars",
    "end",
    "next",
    "detail",
    "going",
    "learn",
    "round",
    "number",
    "javascript",
    "rounding",
    "means",
    "taking",
    "number",
    "moving",
    "nearest",
    "integer",
    "round",
    "number",
    "use",
    "code",
    "capital",
    "math",
    "round",
    "open",
    "bracket",
    "close",
    "bracket",
    "make",
    "sure",
    "use",
    "capital",
    "javascript",
    "case",
    "sensitive",
    "brackets",
    "put",
    "number",
    "want",
    "round",
    "like",
    "press",
    "enter",
    "round",
    "number",
    "two",
    "capital",
    "math",
    "round",
    "open",
    "bracket",
    "close",
    "bracket",
    "brackets",
    "put",
    "press",
    "enter",
    "round",
    "three",
    "let",
    "practical",
    "example",
    "going",
    "calculate",
    "tax",
    "time",
    "going",
    "round",
    "result",
    "exactly",
    "number",
    "page",
    "first",
    "let",
    "calculate",
    "tax",
    "go",
    "console",
    "add",
    "cost",
    "product",
    "products",
    "cents",
    "basketball",
    "plus",
    "cost",
    "surround",
    "brackets",
    "make",
    "sure",
    "calculate",
    "first",
    "going",
    "multiply",
    "tax",
    "percent",
    "finally",
    "convert",
    "back",
    "dollars",
    "let",
    "surround",
    "brackets",
    "well",
    "make",
    "sure",
    "calculate",
    "first",
    "end",
    "divide",
    "100",
    "convert",
    "back",
    "dollars",
    "notice",
    "brackets",
    "inside",
    "brackets",
    "situation",
    "javascript",
    "calculate",
    "inner",
    "brackets",
    "first",
    "outer",
    "brackets",
    "everything",
    "else",
    "press",
    "enter",
    "gives",
    "us",
    "close",
    "number",
    "page",
    "amount",
    "money",
    "number",
    "accurate",
    "need",
    "let",
    "learn",
    "use",
    "round",
    "number",
    "exactly",
    "first",
    "let",
    "create",
    "copy",
    "calculation",
    "select",
    "right",
    "click",
    "copy",
    "right",
    "click",
    "paste",
    "way",
    "paste",
    "console",
    "might",
    "see",
    "warning",
    "message",
    "fix",
    "type",
    "allow",
    "pasting",
    "press",
    "enter",
    "paste",
    "let",
    "continue",
    "trying",
    "round",
    "4",
    "exactly",
    "one",
    "thing",
    "might",
    "try",
    "round",
    "entire",
    "calculation",
    "however",
    "round",
    "4",
    "3",
    "rounds",
    "nearest",
    "integer",
    "instead",
    "want",
    "round",
    "number",
    "remember",
    "number",
    "result",
    "cents",
    "round",
    "number",
    "round",
    "289",
    "exactly",
    "289",
    "round",
    "calculation",
    "front",
    "type",
    "capital",
    "already",
    "brackets",
    "around",
    "need",
    "extra",
    "brackets",
    "round",
    "289",
    "finally",
    "convert",
    "back",
    "dollars",
    "end",
    "dividing",
    "100",
    "press",
    "enter",
    "rounded",
    "calculation",
    "get",
    "exact",
    "number",
    "page",
    "summarize",
    "first",
    "calculate",
    "result",
    "cents",
    "round",
    "nearest",
    "scent",
    "end",
    "convert",
    "back",
    "dollars",
    "worry",
    "good",
    "math",
    "learn",
    "javascript",
    "examples",
    "learning",
    "almost",
    "math",
    "javascript",
    "simple",
    "give",
    "exercises",
    "end",
    "lesson",
    "help",
    "get",
    "practice",
    "last",
    "thing",
    "going",
    "learn",
    "lesson",
    "use",
    "google",
    "learning",
    "code",
    "far",
    "giving",
    "different",
    "pieces",
    "pces",
    "code",
    "like",
    "alert",
    "might",
    "wondering",
    "find",
    "code",
    "pieces",
    "code",
    "features",
    "javascript",
    "find",
    "code",
    "searching",
    "google",
    "going",
    "learn",
    "use",
    "google",
    "learn",
    "new",
    "features",
    "javascript",
    "let",
    "go",
    "browser",
    "create",
    "new",
    "tab",
    "top",
    "click",
    "type",
    "press",
    "enter",
    "search",
    "google",
    "trick",
    "searching",
    "google",
    "search",
    "trying",
    "example",
    "want",
    "round",
    "number",
    "would",
    "search",
    "javascript",
    "round",
    "number",
    "press",
    "enter",
    "sometimes",
    "might",
    "get",
    "code",
    "right",
    "away",
    "first",
    "result",
    "sometimes",
    "might",
    "go",
    "results",
    "find",
    "code",
    "need",
    "example",
    "see",
    "code",
    "first",
    "result",
    "click",
    "result",
    "read",
    "code",
    "also",
    "see",
    "examples",
    "use",
    "one",
    "thing",
    "keep",
    "mind",
    "searching",
    "google",
    "might",
    "understand",
    "understand",
    "code",
    "get",
    "results",
    "example",
    "lot",
    "code",
    "learned",
    "yet",
    "actually",
    "okay",
    "need",
    "look",
    "pieces",
    "code",
    "look",
    "familiar",
    "us",
    "like",
    "part",
    "code",
    "use",
    "part",
    "code",
    "code",
    "understand",
    "every",
    "bit",
    "code",
    "get",
    "google",
    "worry",
    "move",
    "course",
    "understand",
    "code",
    "get",
    "google",
    "results",
    "days",
    "also",
    "artificial",
    "intelligence",
    "ai",
    "tools",
    "help",
    "us",
    "search",
    "code",
    "provide",
    "links",
    "tools",
    "video",
    "description",
    "way",
    "find",
    "links",
    "mentioned",
    "lesson",
    "click",
    "description",
    "page",
    "contains",
    "links",
    "mentioned",
    "lesson",
    "end",
    "lesson",
    "lesson",
    "learned",
    "work",
    "numbers",
    "math",
    "learned",
    "order",
    "operations",
    "brackets",
    "calculated",
    "numbers",
    "final",
    "amazon",
    "project",
    "learned",
    "calculations",
    "using",
    "floats",
    "inaccurate",
    "avoid",
    "problem",
    "working",
    "money",
    "learned",
    "round",
    "numbers",
    "using",
    "learned",
    "search",
    "code",
    "exercises",
    "help",
    "practice",
    "numbers",
    "math",
    "previous",
    "lesson",
    "learned",
    "work",
    "numbers",
    "math",
    "lesson",
    "going",
    "learn",
    "work",
    "text",
    "going",
    "create",
    "text",
    "section",
    "final",
    "project",
    "first",
    "make",
    "sure",
    "final",
    "project",
    "open",
    "checkout",
    "page",
    "also",
    "make",
    "sure",
    "console",
    "open",
    "page",
    "go",
    "blank",
    "area",
    "right",
    "click",
    "click",
    "inspect",
    "click",
    "console",
    "going",
    "learn",
    "feature",
    "javascript",
    "called",
    "strings",
    "string",
    "represents",
    "text",
    "let",
    "go",
    "console",
    "create",
    "first",
    "string",
    "going",
    "type",
    "single",
    "quote",
    "hello",
    "single",
    "quote",
    "press",
    "enter",
    "string",
    "represents",
    "text",
    "hello",
    "actually",
    "seen",
    "code",
    "first",
    "lesson",
    "first",
    "piece",
    "code",
    "learned",
    "alert",
    "open",
    "bracket",
    "single",
    "quote",
    "hello",
    "single",
    "quote",
    "close",
    "bracket",
    "semicolon",
    "code",
    "creates",
    "popup",
    "page",
    "press",
    "enter",
    "creates",
    "popup",
    "inside",
    "brackets",
    "actually",
    "created",
    "string",
    "string",
    "text",
    "appears",
    "popup",
    "see",
    "string",
    "represents",
    "text",
    "let",
    "press",
    "okay",
    "let",
    "learn",
    "syntax",
    "rules",
    "strings",
    "create",
    "string",
    "write",
    "text",
    "like",
    "hello",
    "surround",
    "text",
    "single",
    "quotes",
    "one",
    "beginning",
    "one",
    "end",
    "also",
    "add",
    "strings",
    "together",
    "example",
    "let",
    "type",
    "string",
    "sum",
    "plus",
    "string",
    "text",
    "press",
    "enter",
    "add",
    "two",
    "strings",
    "combines",
    "strings",
    "together",
    "bigger",
    "string",
    "makes",
    "sense",
    "adding",
    "two",
    "pieces",
    "text",
    "together",
    "also",
    "add",
    "two",
    "strings",
    "time",
    "example",
    "type",
    "string",
    "sum",
    "plus",
    "string",
    "plus",
    "string",
    "text",
    "press",
    "enter",
    "computer",
    "combine",
    "three",
    "strings",
    "one",
    "big",
    "string",
    "way",
    "called",
    "concatenation",
    "combine",
    "strings",
    "together",
    "previous",
    "lesson",
    "learned",
    "numbers",
    "numbers",
    "strings",
    "two",
    "different",
    "types",
    "values",
    "javascript",
    "represent",
    "different",
    "things",
    "actually",
    "check",
    "type",
    "value",
    "something",
    "using",
    "code",
    "type",
    "space",
    "value",
    "like",
    "number",
    "two",
    "press",
    "enter",
    "type",
    "tell",
    "us",
    "two",
    "number",
    "type",
    "quote",
    "hello",
    "quote",
    "press",
    "enter",
    "tell",
    "us",
    "hello",
    "string",
    "added",
    "string",
    "number",
    "together",
    "example",
    "let",
    "type",
    "string",
    "hello",
    "plus",
    "number",
    "three",
    "press",
    "enter",
    "add",
    "string",
    "number",
    "javascript",
    "automatically",
    "convert",
    "number",
    "string",
    "gets",
    "converted",
    "string",
    "hello",
    "plus",
    "string",
    "three",
    "combines",
    "together",
    "string",
    "hello",
    "3",
    "feature",
    "called",
    "type",
    "coersion",
    "automatic",
    "type",
    "conversion",
    "okay",
    "understand",
    "understand",
    "basics",
    "strings",
    "let",
    "practical",
    "examples",
    "going",
    "use",
    "strings",
    "numbers",
    "create",
    "text",
    "section",
    "project",
    "first",
    "make",
    "sure",
    "cart",
    "one",
    "basketball",
    "free",
    "shipping",
    "one",
    "also",
    "free",
    "shipping",
    "products",
    "let",
    "scroll",
    "start",
    "creating",
    "text",
    "top",
    "right",
    "cost",
    "products",
    "time",
    "going",
    "dollar",
    "sign",
    "instead",
    "number",
    "text",
    "one",
    "thing",
    "create",
    "text",
    "type",
    "string",
    "directly",
    "like",
    "quote",
    "doll",
    "quote",
    "however",
    "let",
    "actually",
    "calculate",
    "number",
    "using",
    "math",
    "remember",
    "advantage",
    "javascript",
    "able",
    "calculations",
    "instead",
    "typing",
    "going",
    "create",
    "string",
    "dollar",
    "sign",
    "plus",
    "going",
    "calculate",
    "number",
    "using",
    "math",
    "going",
    "add",
    "cost",
    "basketball",
    "plus",
    "cost",
    "press",
    "enter",
    "unfortunately",
    "look",
    "right",
    "instead",
    "math",
    "adding",
    "two",
    "numbers",
    "together",
    "sort",
    "put",
    "numbers",
    "one",
    "another",
    "string",
    "happening",
    "javascript",
    "adds",
    "left",
    "right",
    "first",
    "step",
    "add",
    "two",
    "values",
    "learned",
    "add",
    "string",
    "number",
    "javascript",
    "automatically",
    "convert",
    "number",
    "string",
    "result",
    "calculation",
    "string",
    "doll",
    "quote",
    "next",
    "step",
    "add",
    "add",
    "adding",
    "string",
    "number",
    "javascript",
    "automatically",
    "convert",
    "number",
    "string",
    "combine",
    "together",
    "puts",
    "end",
    "string",
    "instead",
    "math",
    "actually",
    "want",
    "add",
    "two",
    "numbers",
    "first",
    "combine",
    "total",
    "string",
    "solution",
    "strings",
    "also",
    "follow",
    "order",
    "operations",
    "like",
    "numbers",
    "remember",
    "order",
    "operations",
    "use",
    "brackets",
    "control",
    "part",
    "calculation",
    "gets",
    "done",
    "first",
    "let",
    "type",
    "calculation",
    "string",
    "dollar",
    "sign",
    "plus",
    "close",
    "bracket",
    "around",
    "calculation",
    "tells",
    "computer",
    "calculate",
    "number",
    "first",
    "using",
    "math",
    "combine",
    "result",
    "string",
    "press",
    "enter",
    "math",
    "solves",
    "original",
    "problem",
    "unfortunately",
    "another",
    "problem",
    "math",
    "inaccurate",
    "remember",
    "previous",
    "lesson",
    "calculations",
    "floats",
    "sometimes",
    "cause",
    "inaccuracies",
    "best",
    "practice",
    "calculating",
    "money",
    "always",
    "calculate",
    "cents",
    "convert",
    "back",
    "dollars",
    "end",
    "bottom",
    "going",
    "add",
    "string",
    "dollar",
    "plus",
    "open",
    "bracket",
    "instead",
    "going",
    "add",
    "plus",
    "close",
    "bracket",
    "end",
    "going",
    "convert",
    "number",
    "back",
    "dollars",
    "dividing",
    "100",
    "press",
    "enter",
    "give",
    "us",
    "text",
    "see",
    "final",
    "project",
    "strings",
    "follow",
    "order",
    "operations",
    "numbers",
    "brackets",
    "always",
    "calculated",
    "first",
    "multiply",
    "divide",
    "done",
    "next",
    "add",
    "subtract",
    "done",
    "adding",
    "result",
    "string",
    "last",
    "step",
    "let",
    "complicated",
    "example",
    "let",
    "use",
    "strings",
    "numbers",
    "create",
    "entire",
    "line",
    "text",
    "dollar",
    "text",
    "create",
    "going",
    "go",
    "left",
    "right",
    "let",
    "go",
    "back",
    "console",
    "going",
    "start",
    "string",
    "items",
    "open",
    "bracket",
    "could",
    "type",
    "two",
    "close",
    "bracket",
    "let",
    "actually",
    "calculate",
    "number",
    "well",
    "using",
    "math",
    "number",
    "quantity",
    "number",
    "products",
    "cart",
    "let",
    "go",
    "back",
    "console",
    "going",
    "end",
    "string",
    "going",
    "add",
    "going",
    "calculate",
    "quantity",
    "one",
    "basketball",
    "plus",
    "one",
    "run",
    "problem",
    "gets",
    "calculated",
    "first",
    "results",
    "string",
    "combine",
    "one",
    "end",
    "string",
    "instead",
    "math",
    "solve",
    "going",
    "use",
    "brackets",
    "around",
    "1",
    "1",
    "going",
    "add",
    "open",
    "bracket",
    "close",
    "bracket",
    "tells",
    "computer",
    "add",
    "numbers",
    "first",
    "combine",
    "string",
    "right",
    "let",
    "keep",
    "going",
    "left",
    "right",
    "going",
    "add",
    "rest",
    "string",
    "quote",
    "close",
    "bracket",
    "colon",
    "let",
    "use",
    "space",
    "represent",
    "space",
    "two",
    "type",
    "space",
    "dollar",
    "sign",
    "going",
    "calculate",
    "number",
    "add",
    "string",
    "end",
    "string",
    "plus",
    "already",
    "calculation",
    "select",
    "rightclick",
    "copy",
    "right",
    "click",
    "paste",
    "press",
    "enter",
    "way",
    "paste",
    "console",
    "might",
    "see",
    "warning",
    "message",
    "fix",
    "type",
    "allow",
    "pasting",
    "press",
    "enter",
    "paste",
    "create",
    "first",
    "line",
    "text",
    "using",
    "strings",
    "numbers",
    "break",
    "string",
    "parts",
    "calculate",
    "numbers",
    "add",
    "parts",
    "back",
    "together",
    "right",
    "let",
    "take",
    "strings",
    "created",
    "creed",
    "something",
    "let",
    "create",
    "popup",
    "display",
    "first",
    "line",
    "text",
    "inside",
    "popup",
    "go",
    "back",
    "console",
    "type",
    "code",
    "creating",
    "popup",
    "alert",
    "open",
    "bracket",
    "close",
    "bracket",
    "semicolon",
    "inside",
    "popup",
    "going",
    "display",
    "string",
    "let",
    "make",
    "copy",
    "code",
    "select",
    "right",
    "click",
    "copy",
    "brackets",
    "right",
    "click",
    "paste",
    "press",
    "enter",
    "computer",
    "displays",
    "popup",
    "first",
    "line",
    "text",
    "final",
    "project",
    "inside",
    "use",
    "strings",
    "create",
    "text",
    "final",
    "project",
    "create",
    "strings",
    "use",
    "javascript",
    "code",
    "rest",
    "lesson",
    "going",
    "learn",
    "details",
    "strings",
    "javascript",
    "actually",
    "three",
    "ways",
    "create",
    "string",
    "first",
    "way",
    "use",
    "single",
    "quotes",
    "already",
    "learned",
    "example",
    "type",
    "single",
    "quote",
    "hello",
    "single",
    "quote",
    "press",
    "enter",
    "second",
    "way",
    "create",
    "string",
    "use",
    "double",
    "quotes",
    "example",
    "double",
    "quote",
    "hello",
    "double",
    "quote",
    "press",
    "enter",
    "creates",
    "exact",
    "string",
    "single",
    "quotes",
    "one",
    "use",
    "create",
    "string",
    "single",
    "quotes",
    "double",
    "quotes",
    "javascript",
    "recommend",
    "using",
    "single",
    "quotes",
    "default",
    "little",
    "easier",
    "read",
    "type",
    "one",
    "situation",
    "double",
    "quotes",
    "might",
    "useful",
    "single",
    "quote",
    "inside",
    "string",
    "example",
    "type",
    "string",
    "learning",
    "javascript",
    "single",
    "quote",
    "press",
    "enter",
    "work",
    "single",
    "quote",
    "inside",
    "string",
    "single",
    "quote",
    "end",
    "string",
    "early",
    "solve",
    "create",
    "string",
    "using",
    "double",
    "quotes",
    "example",
    "double",
    "quote",
    "learning",
    "javascript",
    "double",
    "quote",
    "press",
    "enter",
    "works",
    "created",
    "string",
    "using",
    "double",
    "quotes",
    "single",
    "quote",
    "longer",
    "special",
    "meaning",
    "longer",
    "end",
    "string",
    "early",
    "situation",
    "double",
    "quotes",
    "might",
    "useful",
    "otherwise",
    "use",
    "single",
    "quotes",
    "default",
    "actually",
    "another",
    "solution",
    "problem",
    "using",
    "double",
    "quotes",
    "using",
    "escape",
    "character",
    "character",
    "one",
    "letter",
    "number",
    "symbol",
    "piece",
    "textt",
    "example",
    "text",
    "hello",
    "five",
    "characters",
    "h",
    "e",
    "l",
    "l",
    "character",
    "letter",
    "number",
    "also",
    "symbol",
    "considered",
    "characters",
    "addition",
    "characters",
    "special",
    "set",
    "characters",
    "also",
    "use",
    "string",
    "called",
    "escape",
    "characters",
    "escape",
    "character",
    "looks",
    "like",
    "backslash",
    "another",
    "character",
    "like",
    "single",
    "quote",
    "combination",
    "actually",
    "counts",
    "one",
    "character",
    "string",
    "character",
    "creat",
    "creat",
    "single",
    "quote",
    "text",
    "special",
    "meaning",
    "start",
    "end",
    "strings",
    "example",
    "create",
    "string",
    "single",
    "quotes",
    "single",
    "quote",
    "time",
    "use",
    "escape",
    "character",
    "back",
    "slash",
    "single",
    "quote",
    "learning",
    "javascript",
    "single",
    "quote",
    "press",
    "enter",
    "works",
    "escape",
    "character",
    "back",
    "sl",
    "single",
    "quote",
    "creates",
    "single",
    "quote",
    "text",
    "start",
    "end",
    "string",
    "another",
    "escape",
    "character",
    "useful",
    "know",
    "back",
    "sl",
    "double",
    "quote",
    "creates",
    "double",
    "quote",
    "text",
    "start",
    "end",
    "string",
    "last",
    "escape",
    "character",
    "learn",
    "lesson",
    "back",
    "sln",
    "called",
    "new",
    "line",
    "character",
    "escape",
    "character",
    "create",
    "letter",
    "n",
    "anymore",
    "creates",
    "new",
    "line",
    "text",
    "example",
    "let",
    "create",
    "popup",
    "using",
    "alert",
    "open",
    "bracket",
    "close",
    "bracket",
    "semicolon",
    "inside",
    "brackets",
    "going",
    "create",
    "string",
    "sum",
    "back",
    "sln",
    "text",
    "single",
    "quote",
    "press",
    "enter",
    "notice",
    "escape",
    "character",
    "created",
    "new",
    "line",
    "text",
    "popup",
    "call",
    "new",
    "line",
    "character",
    "escape",
    "characters",
    "work",
    "set",
    "special",
    "characters",
    "start",
    "back",
    "slash",
    "use",
    "string",
    "let",
    "press",
    "okay",
    "going",
    "learn",
    "third",
    "way",
    "creating",
    "string",
    "javascript",
    "using",
    "back",
    "ticks",
    "example",
    "let",
    "type",
    "console",
    "type",
    "backtick",
    "hello",
    "backtick",
    "press",
    "enter",
    "creates",
    "string",
    "single",
    "quotes",
    "double",
    "quotes",
    "strings",
    "created",
    "backx",
    "actually",
    "name",
    "call",
    "template",
    "strings",
    "name",
    "special",
    "features",
    "first",
    "special",
    "feature",
    "template",
    "strings",
    "called",
    "interpolation",
    "interpolation",
    "lets",
    "us",
    "insert",
    "value",
    "directly",
    "string",
    "example",
    "let",
    "say",
    "want",
    "create",
    "first",
    "line",
    "text",
    "project",
    "earlier",
    "lesson",
    "created",
    "text",
    "concatenation",
    "means",
    "broke",
    "parts",
    "added",
    "back",
    "together",
    "interpolation",
    "gives",
    "us",
    "much",
    "easier",
    "way",
    "go",
    "console",
    "create",
    "text",
    "using",
    "template",
    "string",
    "interpolation",
    "feature",
    "template",
    "strings",
    "type",
    "backtick",
    "items",
    "open",
    "bracket",
    "close",
    "bracket",
    "back",
    "tick",
    "brackets",
    "want",
    "insert",
    "quantity",
    "number",
    "products",
    "cart",
    "insert",
    "interpolation",
    "going",
    "type",
    "dollar",
    "open",
    "curly",
    "bracket",
    "close",
    "curly",
    "bracket",
    "combination",
    "characters",
    "allows",
    "us",
    "insert",
    "values",
    "directly",
    "string",
    "curly",
    "brackets",
    "calculate",
    "quantity",
    "one",
    "basketball",
    "plus",
    "one",
    "add",
    "1",
    "1",
    "equals",
    "2",
    "insert",
    "directly",
    "string",
    "let",
    "keep",
    "going",
    "create",
    "rest",
    "line",
    "going",
    "type",
    "end",
    "colin",
    "space",
    "dollar",
    "going",
    "insert",
    "another",
    "value",
    "string",
    "cost",
    "products",
    "insert",
    "another",
    "value",
    "going",
    "type",
    "dollar",
    "open",
    "curly",
    "bracket",
    "close",
    "curly",
    "bracket",
    "curly",
    "brackets",
    "going",
    "calculate",
    "cost",
    "products",
    "plus",
    "surround",
    "brackets",
    "make",
    "sure",
    "calculate",
    "first",
    "end",
    "going",
    "convert",
    "back",
    "dollars",
    "dividing",
    "100",
    "press",
    "enter",
    "creates",
    "first",
    "line",
    "text",
    "final",
    "project",
    "compare",
    "code",
    "uses",
    "interpolation",
    "previous",
    "code",
    "uses",
    "concatenation",
    "see",
    "interpolation",
    "much",
    "cleaner",
    "way",
    "inserting",
    "values",
    "string",
    "interpolation",
    "recommended",
    "solution",
    "next",
    "template",
    "strings",
    "another",
    "special",
    "feature",
    "called",
    "strings",
    "let",
    "go",
    "console",
    "going",
    "type",
    "backtick",
    "sum",
    "press",
    "enter",
    "text",
    "back",
    "tick",
    "notice",
    "string",
    "multiple",
    "lines",
    "call",
    "string",
    "feature",
    "available",
    "template",
    "strings",
    "press",
    "enter",
    "see",
    "new",
    "line",
    "string",
    "creates",
    "new",
    "line",
    "escape",
    "character",
    "learned",
    "earlier",
    "string",
    "feature",
    "template",
    "strings",
    "going",
    "use",
    "strings",
    "lot",
    "later",
    "course",
    "wanted",
    "introduce",
    "feature",
    "might",
    "wondering",
    "use",
    "create",
    "string",
    "single",
    "quotes",
    "template",
    "strings",
    "even",
    "though",
    "template",
    "strings",
    "features",
    "find",
    "javascript",
    "code",
    "still",
    "uses",
    "single",
    "quotes",
    "default",
    "personal",
    "recommendation",
    "use",
    "single",
    "quotes",
    "default",
    "need",
    "insert",
    "value",
    "string",
    "type",
    "string",
    "multiple",
    "lines",
    "use",
    "template",
    "strings",
    "end",
    "lesson",
    "lesson",
    "learned",
    "strings",
    "string",
    "represents",
    "text",
    "learned",
    "use",
    "strings",
    "numbers",
    "create",
    "text",
    "final",
    "project",
    "learned",
    "three",
    "different",
    "ways",
    "creating",
    "string",
    "single",
    "quotes",
    "double",
    "quotes",
    "back",
    "ticks",
    "template",
    "strings",
    "learned",
    "escape",
    "characters",
    "learned",
    "two",
    "useful",
    "features",
    "template",
    "strings",
    "interpolation",
    "strings",
    "exercises",
    "help",
    "practice",
    "working",
    "strings",
    "far",
    "course",
    "learned",
    "basic",
    "features",
    "javascript",
    "like",
    "numbers",
    "strings",
    "lesson",
    "going",
    "learn",
    "use",
    "html",
    "css",
    "javascript",
    "together",
    "mentioned",
    "beginning",
    "course",
    "use",
    "three",
    "technologies",
    "build",
    "build",
    "full",
    "website",
    "html",
    "creates",
    "content",
    "website",
    "like",
    "buttons",
    "text",
    "css",
    "changes",
    "appearance",
    "website",
    "javascript",
    "makes",
    "website",
    "interactive",
    "first",
    "thing",
    "going",
    "review",
    "basics",
    "html",
    "css",
    "need",
    "rest",
    "course",
    "order",
    "write",
    "html",
    "css",
    "code",
    "need",
    "install",
    "another",
    "piece",
    "software",
    "called",
    "code",
    "editor",
    "code",
    "editor",
    "helps",
    "us",
    "write",
    "organize",
    "code",
    "popular",
    "code",
    "editor",
    "web",
    "development",
    "called",
    "vs",
    "code",
    "visual",
    "studio",
    "code",
    "install",
    "vs",
    "code",
    "go",
    "browser",
    "search",
    "vss",
    "code",
    "click",
    "result",
    "follow",
    "instructions",
    "download",
    "install",
    "installed",
    "vss",
    "code",
    "ready",
    "review",
    "basics",
    "html",
    "css",
    "start",
    "html",
    "html",
    "stands",
    "hyper",
    "text",
    "markup",
    "language",
    "like",
    "javascript",
    "html",
    "also",
    "giving",
    "instructions",
    "computer",
    "unlike",
    "javascript",
    "ca",
    "use",
    "console",
    "write",
    "run",
    "html",
    "code",
    "instead",
    "write",
    "html",
    "code",
    "inside",
    "file",
    "using",
    "code",
    "editor",
    "let",
    "right",
    "start",
    "going",
    "desktop",
    "going",
    "close",
    "browser",
    "go",
    "desktop",
    "going",
    "create",
    "new",
    "folder",
    "right",
    "click",
    "new",
    "folder",
    "folder",
    "going",
    "contain",
    "code",
    "write",
    "course",
    "let",
    "name",
    "folder",
    "javascript",
    "dasc",
    "next",
    "going",
    "open",
    "folder",
    "code",
    "editor",
    "let",
    "open",
    "vs",
    "code",
    "click",
    "file",
    "open",
    "folder",
    "find",
    "folder",
    "created",
    "desktop",
    "folder",
    "right",
    "right",
    "going",
    "select",
    "folder",
    "click",
    "select",
    "folder",
    "close",
    "startup",
    "message",
    "going",
    "create",
    "html",
    "file",
    "going",
    "click",
    "icon",
    "create",
    "new",
    "file",
    "going",
    "name",
    "file",
    "website",
    "html",
    "press",
    "enter",
    "ending",
    "file",
    "name",
    "name",
    "html",
    "tells",
    "computer",
    "file",
    "contains",
    "html",
    "code",
    "rather",
    "text",
    "let",
    "review",
    "basic",
    "html",
    "code",
    "going",
    "type",
    "code",
    "less",
    "button",
    "greater",
    "also",
    "need",
    "type",
    "less",
    "slash",
    "button",
    "greater",
    "code",
    "editor",
    "might",
    "autocomplete",
    "us",
    "code",
    "tells",
    "computer",
    "create",
    "button",
    "inside",
    "button",
    "going",
    "text",
    "hello",
    "let",
    "save",
    "file",
    "clicking",
    "file",
    "save",
    "typing",
    "contrl",
    "windows",
    "command",
    "mac",
    "run",
    "html",
    "code",
    "going",
    "open",
    "file",
    "browser",
    "let",
    "go",
    "back",
    "desktop",
    "going",
    "open",
    "folder",
    "created",
    "find",
    "html",
    "file",
    "select",
    "right",
    "click",
    "open",
    "google",
    "chrome",
    "see",
    "website",
    "created",
    "button",
    "text",
    "hello",
    "inside",
    "look",
    "back",
    "code",
    "exactly",
    "told",
    "computer",
    "like",
    "javascript",
    "html",
    "also",
    "giving",
    "instructions",
    "computer",
    "let",
    "review",
    "html",
    "code",
    "first",
    "going",
    "rearrange",
    "windows",
    "easy",
    "see",
    "website",
    "side",
    "side",
    "next",
    "going",
    "click",
    "end",
    "first",
    "line",
    "press",
    "enter",
    "create",
    "new",
    "line",
    "going",
    "type",
    "code",
    "less",
    "p",
    "greater",
    "also",
    "need",
    "type",
    "less",
    "slp",
    "greater",
    "code",
    "creates",
    "paragraph",
    "inside",
    "paragraph",
    "going",
    "put",
    "text",
    "example",
    "paragraph",
    "text",
    "let",
    "save",
    "file",
    "typing",
    "contrl",
    "windows",
    "command",
    "mac",
    "update",
    "website",
    "new",
    "code",
    "going",
    "go",
    "website",
    "click",
    "refresh",
    "typ",
    "controlr",
    "windows",
    "command",
    "r",
    "mac",
    "see",
    "computer",
    "created",
    "paragraph",
    "text",
    "like",
    "told",
    "basics",
    "html",
    "computer",
    "reads",
    "code",
    "follows",
    "instructions",
    "one",
    "one",
    "first",
    "creates",
    "button",
    "creates",
    "paragraph",
    "text",
    "let",
    "review",
    "syntax",
    "rules",
    "html",
    "things",
    "displaying",
    "web",
    "page",
    "called",
    "html",
    "elements",
    "button",
    "type",
    "html",
    "element",
    "paragraph",
    "another",
    "type",
    "html",
    "element",
    "create",
    "element",
    "start",
    "less",
    "symbol",
    "element",
    "name",
    "like",
    "button",
    "greater",
    "symbol",
    "whole",
    "thing",
    "called",
    "html",
    "tag",
    "tells",
    "computer",
    "create",
    "button",
    "element",
    "every",
    "html",
    "tag",
    "needs",
    "matching",
    "tag",
    "matching",
    "tag",
    "follows",
    "syntax",
    "except",
    "slash",
    "front",
    "element",
    "name",
    "called",
    "opening",
    "tag",
    "called",
    "closing",
    "tag",
    "think",
    "opening",
    "tag",
    "start",
    "button",
    "closing",
    "tag",
    "tag",
    "end",
    "button",
    "contents",
    "inside",
    "button",
    "case",
    "text",
    "hello",
    "addition",
    "text",
    "also",
    "elements",
    "inside",
    "element",
    "example",
    "go",
    "paragraph",
    "element",
    "add",
    "button",
    "inside",
    "less",
    "button",
    "greater",
    "also",
    "need",
    "less",
    "sl",
    "button",
    "greater",
    "inside",
    "button",
    "also",
    "text",
    "hello",
    "save",
    "file",
    "refresh",
    "page",
    "paragraph",
    "element",
    "button",
    "element",
    "inside",
    "way",
    "called",
    "nesting",
    "element",
    "inside",
    "another",
    "element",
    "last",
    "syntax",
    "rule",
    "review",
    "html",
    "multiple",
    "spaces",
    "example",
    "go",
    "type",
    "multiple",
    "spaces",
    "multiple",
    "spaces",
    "combined",
    "one",
    "space",
    "web",
    "page",
    "save",
    "code",
    "refresh",
    "notice",
    "spaces",
    "added",
    "show",
    "one",
    "space",
    "web",
    "page",
    "addition",
    "html",
    "new",
    "lines",
    "also",
    "count",
    "spaces",
    "go",
    "back",
    "code",
    "type",
    "press",
    "enter",
    "create",
    "new",
    "line",
    "save",
    "refresh",
    "notice",
    "new",
    "line",
    "appear",
    "web",
    "page",
    "new",
    "line",
    "spaces",
    "html",
    "get",
    "combined",
    "one",
    "space",
    "web",
    "page",
    "first",
    "might",
    "seem",
    "little",
    "weird",
    "feature",
    "gives",
    "us",
    "lot",
    "flexibility",
    "organizing",
    "h",
    "ml",
    "code",
    "example",
    "go",
    "code",
    "add",
    "new",
    "line",
    "separate",
    "two",
    "elements",
    "make",
    "code",
    "easier",
    "read",
    "another",
    "thing",
    "usually",
    "make",
    "code",
    "easier",
    "read",
    "put",
    "contents",
    "element",
    "line",
    "example",
    "going",
    "type",
    "press",
    "enter",
    "press",
    "enter",
    "put",
    "contents",
    "button",
    "buton",
    "line",
    "lot",
    "easier",
    "see",
    "button",
    "starts",
    "ends",
    "thing",
    "paragraph",
    "type",
    "press",
    "enter",
    "type",
    "well",
    "press",
    "enter",
    "remove",
    "extra",
    "spaces",
    "put",
    "content",
    "paragraph",
    "line",
    "save",
    "file",
    "refresh",
    "notice",
    "none",
    "new",
    "lines",
    "added",
    "appear",
    "web",
    "page",
    "way",
    "web",
    "page",
    "single",
    "page",
    "like",
    "homepage",
    "cart",
    "page",
    "together",
    "call",
    "website",
    "basics",
    "html",
    "html",
    "syntax",
    "let",
    "review",
    "css",
    "css",
    "stands",
    "cascading",
    "style",
    "sheets",
    "css",
    "changes",
    "appearance",
    "website",
    "let",
    "review",
    "css",
    "code",
    "going",
    "write",
    "css",
    "code",
    "inside",
    "html",
    "file",
    "first",
    "let",
    "type",
    "create",
    "new",
    "lines",
    "top",
    "top",
    "going",
    "create",
    "special",
    "html",
    "element",
    "called",
    "style",
    "element",
    "let",
    "type",
    "less",
    "style",
    "greater",
    "also",
    "need",
    "closing",
    "tag",
    "less",
    "sl",
    "style",
    "greater",
    "style",
    "element",
    "unique",
    "appear",
    "visibly",
    "page",
    "instead",
    "purpose",
    "style",
    "element",
    "lets",
    "us",
    "write",
    "css",
    "code",
    "inside",
    "inside",
    "let",
    "press",
    "enter",
    "create",
    "new",
    "line",
    "going",
    "type",
    "button",
    "open",
    "curly",
    "bracket",
    "close",
    "curly",
    "bracket",
    "inside",
    "curly",
    "brackets",
    "also",
    "going",
    "press",
    "enter",
    "create",
    "new",
    "line",
    "css",
    "code",
    "code",
    "tells",
    "computer",
    "change",
    "appearance",
    "buttons",
    "page",
    "inside",
    "curly",
    "brackets",
    "tell",
    "computer",
    "change",
    "appearance",
    "example",
    "type",
    "color",
    "colon",
    "red",
    "semicolon",
    "save",
    "refresh",
    "see",
    "css",
    "code",
    "changes",
    "appearance",
    "buttons",
    "page",
    "changes",
    "background",
    "color",
    "red",
    "let",
    "another",
    "example",
    "going",
    "go",
    "back",
    "css",
    "code",
    "going",
    "type",
    "press",
    "enter",
    "create",
    "new",
    "line",
    "going",
    "add",
    "color",
    "colon",
    "white",
    "semicolon",
    "let",
    "save",
    "refresh",
    "css",
    "code",
    "changes",
    "text",
    "color",
    "buttons",
    "page",
    "white",
    "let",
    "one",
    "example",
    "going",
    "type",
    "code",
    "order",
    "colon",
    "none",
    "semicolon",
    "let",
    "save",
    "refresh",
    "css",
    "code",
    "removes",
    "border",
    "buttons",
    "page",
    "css",
    "works",
    "tell",
    "computer",
    "elements",
    "want",
    "change",
    "change",
    "appearance",
    "elements",
    "let",
    "review",
    "syntax",
    "rules",
    "css",
    "part",
    "css",
    "code",
    "called",
    "css",
    "selector",
    "tells",
    "computer",
    "elements",
    "want",
    "change",
    "words",
    "selects",
    "elements",
    "change",
    "inside",
    "curly",
    "brackets",
    "css",
    "styles",
    "tells",
    "computer",
    "change",
    "appearance",
    "style",
    "left",
    "side",
    "called",
    "css",
    "property",
    "tells",
    "computer",
    "changing",
    "right",
    "side",
    "called",
    "css",
    "value",
    "tells",
    "computer",
    "changing",
    "property",
    "example",
    "style",
    "changes",
    "background",
    "color",
    "red",
    "use",
    "colon",
    "separate",
    "property",
    "value",
    "semicolon",
    "end",
    "tell",
    "computer",
    "end",
    "style",
    "basic",
    "syntax",
    "css",
    "tell",
    "computer",
    "elements",
    "want",
    "change",
    "change",
    "appearance",
    "elements",
    "next",
    "thing",
    "going",
    "review",
    "html",
    "attributes",
    "right",
    "css",
    "selector",
    "changes",
    "appearance",
    "buttons",
    "page",
    "however",
    "want",
    "change",
    "appearance",
    "one",
    "button",
    "want",
    "style",
    "button",
    "differently",
    "going",
    "review",
    "feature",
    "html",
    "called",
    "attributes",
    "attributes",
    "change",
    "behavior",
    "element",
    "example",
    "going",
    "go",
    "opening",
    "tag",
    "first",
    "button",
    "going",
    "add",
    "html",
    "attribute",
    "typing",
    "space",
    "title",
    "equals",
    "double",
    "quotes",
    "double",
    "quotes",
    "going",
    "type",
    "tool",
    "tip",
    "html",
    "attribute",
    "attribute",
    "adds",
    "tool",
    "tip",
    "button",
    "wondering",
    "tool",
    "tip",
    "hover",
    "code",
    "code",
    "editor",
    "show",
    "us",
    "sort",
    "popup",
    "information",
    "called",
    "tool",
    "tip",
    "hover",
    "something",
    "shows",
    "save",
    "file",
    "refresh",
    "web",
    "page",
    "hover",
    "button",
    "see",
    "html",
    "attribute",
    "added",
    "tool",
    "tip",
    "button",
    "inside",
    "double",
    "quotes",
    "text",
    "inside",
    "tool",
    "tip",
    "example",
    "actually",
    "change",
    "good",
    "job",
    "save",
    "save",
    "refresh",
    "hover",
    "button",
    "text",
    "double",
    "quotes",
    "shows",
    "tool",
    "tip",
    "example",
    "html",
    "attribute",
    "let",
    "review",
    "syntax",
    "rules",
    "attributes",
    "always",
    "put",
    "attributes",
    "opening",
    "tag",
    "add",
    "space",
    "element",
    "name",
    "attribute",
    "separate",
    "left",
    "side",
    "attribute",
    "name",
    "tells",
    "computer",
    "changing",
    "element",
    "right",
    "side",
    "attribute",
    "value",
    "tells",
    "computer",
    "changing",
    "attribute",
    "example",
    "changing",
    "tool",
    "tip",
    "element",
    "good",
    "job",
    "separate",
    "name",
    "value",
    "equal",
    "sign",
    "make",
    "sure",
    "spaces",
    "around",
    "equal",
    "sign",
    "surround",
    "value",
    "double",
    "quotes",
    "let",
    "go",
    "back",
    "original",
    "problem",
    "style",
    "buttons",
    "differently",
    "using",
    "important",
    "attribute",
    "called",
    "class",
    "attribute",
    "let",
    "review",
    "right",
    "going",
    "go",
    "back",
    "button",
    "going",
    "type",
    "space",
    "class",
    "equals",
    "double",
    "quotes",
    "inside",
    "double",
    "quotes",
    "going",
    "type",
    "red",
    "das",
    "button",
    "class",
    "attribute",
    "sort",
    "adds",
    "label",
    "element",
    "labeled",
    "button",
    "red",
    "button",
    "labeled",
    "element",
    "select",
    "css",
    "going",
    "go",
    "css",
    "code",
    "going",
    "remove",
    "button",
    "selector",
    "replace",
    "witht",
    "button",
    "start",
    "selector",
    "dot",
    "means",
    "looking",
    "class",
    "going",
    "look",
    "elements",
    "class",
    "red",
    "dash",
    "button",
    "element",
    "save",
    "refresh",
    "elements",
    "class",
    "red",
    "button",
    "gets",
    "styles",
    "also",
    "add",
    "class",
    "multiple",
    "elements",
    "example",
    "go",
    "button",
    "add",
    "class",
    "equals",
    "button",
    "save",
    "refresh",
    "styles",
    "get",
    "applied",
    "buttons",
    "class",
    "button",
    "want",
    "style",
    "button",
    "differently",
    "give",
    "different",
    "class",
    "example",
    "change",
    "yellow",
    "yellow",
    "dash",
    "button",
    "css",
    "add",
    "another",
    "selector",
    "type",
    "dot",
    "means",
    "going",
    "select",
    "class",
    "going",
    "select",
    "yellow",
    "das",
    "button",
    "class",
    "open",
    "curly",
    "bracket",
    "close",
    "curly",
    "bracket",
    "inside",
    "add",
    "styles",
    "yellow",
    "button",
    "example",
    "background",
    "das",
    "color",
    "colon",
    "yellow",
    "semicolon",
    "let",
    "save",
    "refresh",
    "use",
    "class",
    "attribute",
    "html",
    "modify",
    "specific",
    "elements",
    "final",
    "thing",
    "need",
    "review",
    "something",
    "called",
    "html",
    "structure",
    "let",
    "go",
    "back",
    "website",
    "going",
    "find",
    "blank",
    "area",
    "rightclick",
    "click",
    "inspect",
    "already",
    "learned",
    "console",
    "tab",
    "write",
    "run",
    "javascript",
    "code",
    "going",
    "go",
    "elements",
    "tab",
    "html",
    "css",
    "elements",
    "tab",
    "see",
    "html",
    "page",
    "well",
    "css",
    "page",
    "play",
    "around",
    "css",
    "want",
    "go",
    "back",
    "html",
    "notice",
    "web",
    "page",
    "elements",
    "add",
    "html",
    "element",
    "head",
    "element",
    "body",
    "element",
    "structure",
    "supposed",
    "follow",
    "writing",
    "html",
    "code",
    "follow",
    "structure",
    "browser",
    "actually",
    "adds",
    "us",
    "automatically",
    "however",
    "still",
    "best",
    "practice",
    "follow",
    "structure",
    "code",
    "gives",
    "us",
    "access",
    "features",
    "html",
    "let",
    "review",
    "html",
    "structure",
    "add",
    "code",
    "going",
    "type",
    "going",
    "create",
    "new",
    "lines",
    "every",
    "html",
    "file",
    "going",
    "start",
    "less",
    "exclamation",
    "dock",
    "type",
    "capitals",
    "space",
    "html",
    "greater",
    "html",
    "element",
    "special",
    "line",
    "code",
    "tells",
    "browser",
    "use",
    "modern",
    "version",
    "html",
    "browser",
    "might",
    "fall",
    "back",
    "older",
    "version",
    "html",
    "less",
    "features",
    "next",
    "going",
    "create",
    "html",
    "element",
    "less",
    "html",
    "greater",
    "html",
    "element",
    "represents",
    "entire",
    "web",
    "page",
    "everything",
    "web",
    "page",
    "go",
    "inside",
    "element",
    "inside",
    "html",
    "element",
    "also",
    "going",
    "split",
    "two",
    "sections",
    "head",
    "element",
    "body",
    "element",
    "body",
    "element",
    "supposed",
    "contain",
    "everything",
    "visible",
    "page",
    "example",
    "would",
    "buttons",
    "parag",
    "graph",
    "let",
    "actually",
    "select",
    "code",
    "going",
    "rightclick",
    "cut",
    "inside",
    "body",
    "going",
    "right",
    "click",
    "paste",
    "head",
    "element",
    "contains",
    "information",
    "page",
    "general",
    "everything",
    "visible",
    "page",
    "goes",
    "inside",
    "head",
    "examp",
    "example",
    "would",
    "style",
    "element",
    "let",
    "select",
    "well",
    "going",
    "rightclick",
    "cut",
    "inside",
    "head",
    "going",
    "right",
    "click",
    "paste",
    "bottom",
    "let",
    "clean",
    "removing",
    "extra",
    "new",
    "lines",
    "structure",
    "supposed",
    "follow",
    "html",
    "files",
    "see",
    "structure",
    "uses",
    "lot",
    "nesting",
    "elements",
    "inside",
    "elements",
    "organize",
    "code",
    "okay",
    "benefits",
    "following",
    "structure",
    "one",
    "benefit",
    "elements",
    "use",
    "inside",
    "head",
    "example",
    "let",
    "type",
    "press",
    "enter",
    "going",
    "add",
    "title",
    "element",
    "title",
    "element",
    "sets",
    "text",
    "tabs",
    "inside",
    "type",
    "html",
    "css",
    "review",
    "save",
    "refresh",
    "title",
    "show",
    "tab",
    "example",
    "element",
    "add",
    "head",
    "another",
    "benefit",
    "get",
    "structure",
    "ability",
    "automatically",
    "refresh",
    "web",
    "page",
    "change",
    "code",
    "far",
    "every",
    "time",
    "change",
    "code",
    "save",
    "manually",
    "refresh",
    "web",
    "page",
    "actually",
    "automate",
    "following",
    "structure",
    "installing",
    "vss",
    "code",
    "extension",
    "let",
    "click",
    "extension",
    "area",
    "going",
    "search",
    "extension",
    "live",
    "server",
    "click",
    "install",
    "installed",
    "going",
    "change",
    "setting",
    "let",
    "open",
    "settings",
    "clicking",
    "icon",
    "bottom",
    "left",
    "click",
    "settings",
    "top",
    "going",
    "search",
    "live",
    "server",
    "going",
    "look",
    "setting",
    "called",
    "live",
    "server",
    "custom",
    "browser",
    "going",
    "change",
    "chrome",
    "google",
    "chrome",
    "already",
    "default",
    "web",
    "browser",
    "need",
    "step",
    "nice",
    "know",
    "let",
    "close",
    "settings",
    "go",
    "back",
    "code",
    "next",
    "instead",
    "opening",
    "file",
    "directly",
    "browser",
    "like",
    "going",
    "use",
    "live",
    "server",
    "open",
    "file",
    "going",
    "rightclick",
    "file",
    "code",
    "editor",
    "click",
    "open",
    "open",
    "live",
    "server",
    "open",
    "file",
    "live",
    "server",
    "web",
    "page",
    "automatically",
    "refresh",
    "change",
    "code",
    "example",
    "go",
    "change",
    "background",
    "color",
    "green",
    "save",
    "live",
    "server",
    "automatically",
    "refresh",
    "web",
    "page",
    "back",
    "forth",
    "anymore",
    "let",
    "change",
    "back",
    "red",
    "class",
    "last",
    "name",
    "makes",
    "sense",
    "save",
    "also",
    "close",
    "previous",
    "tab",
    "html",
    "structure",
    "gives",
    "us",
    "access",
    "features",
    "html",
    "need",
    "review",
    "html",
    "css",
    "want",
    "learn",
    "check",
    "html",
    "css",
    "full",
    "course",
    "video",
    "description",
    "way",
    "find",
    "links",
    "mentioned",
    "lesson",
    "click",
    "description",
    "page",
    "contains",
    "links",
    "mentioned",
    "lesson",
    "add",
    "javascript",
    "website",
    "going",
    "review",
    "vss",
    "code",
    "setup",
    "notice",
    "many",
    "lines",
    "spaces",
    "front",
    "spaces",
    "called",
    "indents",
    "indents",
    "make",
    "code",
    "easier",
    "read",
    "example",
    "easily",
    "tell",
    "code",
    "inside",
    "brackets",
    "extra",
    "indent",
    "front",
    "indents",
    "code",
    "would",
    "look",
    "like",
    "lot",
    "harder",
    "read",
    "add",
    "indent",
    "type",
    "beginning",
    "line",
    "press",
    "tab",
    "remove",
    "indent",
    "press",
    "shift",
    "tab",
    "use",
    "backspace",
    "default",
    "vss",
    "code",
    "uses",
    "four",
    "spaces",
    "per",
    "indet",
    "however",
    "html",
    "css",
    "javascript",
    "usually",
    "use",
    "two",
    "spaces",
    "per",
    "indet",
    "going",
    "update",
    "setting",
    "let",
    "go",
    "settings",
    "clicking",
    "icon",
    "bottom",
    "left",
    "click",
    "settings",
    "top",
    "going",
    "search",
    "tab",
    "going",
    "change",
    "tab",
    "size",
    "4",
    "2",
    "let",
    "close",
    "settings",
    "also",
    "going",
    "change",
    "indents",
    "file",
    "going",
    "go",
    "click",
    "select",
    "indent",
    "going",
    "choose",
    "indent",
    "using",
    "spaces",
    "click",
    "two",
    "type",
    "start",
    "line",
    "press",
    "tab",
    "add",
    "two",
    "spaces",
    "per",
    "indent",
    "let",
    "reformat",
    "code",
    "use",
    "two",
    "spaces",
    "per",
    "indent",
    "instead",
    "four",
    "first",
    "going",
    "remove",
    "indents",
    "code",
    "shortcut",
    "select",
    "lines",
    "press",
    "shift",
    "tab",
    "remove",
    "one",
    "indent",
    "line",
    "going",
    "keep",
    "pressing",
    "shift",
    "tab",
    "remove",
    "indents",
    "next",
    "next",
    "going",
    "add",
    "indents",
    "back",
    "using",
    "similar",
    "shortcut",
    "going",
    "select",
    "head",
    "element",
    "press",
    "tab",
    "add",
    "one",
    "indent",
    "line",
    "select",
    "everything",
    "inside",
    "head",
    "press",
    "tab",
    "add",
    "another",
    "indent",
    "select",
    "everything",
    "inside",
    "style",
    "press",
    "tab",
    "inside",
    "brackets",
    "going",
    "select",
    "lines",
    "press",
    "tab",
    "press",
    "tab",
    "thing",
    "body",
    "element",
    "select",
    "lines",
    "press",
    "tab",
    "select",
    "everything",
    "inside",
    "body",
    "press",
    "tab",
    "inside",
    "elements",
    "going",
    "press",
    "tab",
    "press",
    "tab",
    "save",
    "website",
    "look",
    "adjust",
    "indents",
    "one",
    "setting",
    "vs",
    "code",
    "going",
    "set",
    "line",
    "wrapping",
    "look",
    "line",
    "code",
    "see",
    "really",
    "long",
    "need",
    "scroll",
    "horizontally",
    "see",
    "rest",
    "line",
    "instead",
    "going",
    "make",
    "line",
    "wrap",
    "around",
    "gets",
    "long",
    "let",
    "go",
    "back",
    "settings",
    "clicking",
    "click",
    "settings",
    "going",
    "search",
    "wrap",
    "going",
    "look",
    "editor",
    "word",
    "wrap",
    "going",
    "turn",
    "close",
    "settings",
    "go",
    "back",
    "code",
    "line",
    "really",
    "long",
    "wrap",
    "around",
    "next",
    "line",
    "instead",
    "us",
    "horizontally",
    "scroll",
    "vs",
    "code",
    "setup",
    "need",
    "two",
    "spaces",
    "per",
    "indent",
    "line",
    "wrapping",
    "finally",
    "going",
    "add",
    "javascript",
    "website",
    "learned",
    "use",
    "console",
    "write",
    "run",
    "javascript",
    "well",
    "actually",
    "another",
    "way",
    "run",
    "javascript",
    "inside",
    "html",
    "file",
    "let",
    "learn",
    "learned",
    "html",
    "special",
    "element",
    "runs",
    "css",
    "code",
    "called",
    "style",
    "element",
    "html",
    "another",
    "special",
    "element",
    "runs",
    "javascript",
    "code",
    "element",
    "called",
    "script",
    "element",
    "inside",
    "body",
    "bottom",
    "body",
    "going",
    "add",
    "less",
    "script",
    "greater",
    "closing",
    "tag",
    "less",
    "sl",
    "script",
    "greater",
    "inside",
    "script",
    "element",
    "put",
    "javascript",
    "code",
    "going",
    "add",
    "code",
    "alert",
    "open",
    "bracket",
    "quote",
    "hello",
    "quote",
    "close",
    "bracket",
    "semicolon",
    "save",
    "live",
    "server",
    "refresh",
    "page",
    "notice",
    "computer",
    "runs",
    "javascript",
    "code",
    "like",
    "console",
    "creates",
    "popup",
    "text",
    "hello",
    "inside",
    "usually",
    "put",
    "script",
    "element",
    "bottom",
    "body",
    "want",
    "web",
    "page",
    "created",
    "first",
    "use",
    "javascript",
    "make",
    "interactive",
    "rest",
    "course",
    "going",
    "run",
    "javascript",
    "code",
    "using",
    "using",
    "html",
    "file",
    "console",
    "used",
    "previous",
    "lessons",
    "way",
    "try",
    "javascript",
    "code",
    "would",
    "use",
    "console",
    "real",
    "website",
    "addition",
    "script",
    "element",
    "another",
    "way",
    "run",
    "javascript",
    "code",
    "inside",
    "html",
    "using",
    "attribute",
    "let",
    "go",
    "back",
    "first",
    "button",
    "going",
    "add",
    "another",
    "attribute",
    "let",
    "type",
    "space",
    "time",
    "going",
    "add",
    "onclick",
    "attribute",
    "equals",
    "double",
    "quotes",
    "attribute",
    "run",
    "javascript",
    "code",
    "whenever",
    "click",
    "button",
    "onclick",
    "means",
    "double",
    "quotes",
    "write",
    "javascript",
    "example",
    "let",
    "press",
    "enter",
    "enter",
    "going",
    "type",
    "alert",
    "open",
    "bracket",
    "quote",
    "good",
    "job",
    "quote",
    "close",
    "bracket",
    "semicolon",
    "save",
    "live",
    "server",
    "refresh",
    "page",
    "run",
    "line",
    "javascript",
    "code",
    "let",
    "press",
    "okay",
    "click",
    "button",
    "run",
    "line",
    "javascript",
    "code",
    "create",
    "popup",
    "text",
    "good",
    "job",
    "inside",
    "two",
    "places",
    "run",
    "javascript",
    "code",
    "script",
    "element",
    "onclick",
    "attribute",
    "code",
    "script",
    "element",
    "runs",
    "first",
    "page",
    "loaded",
    "code",
    "onclick",
    "attribute",
    "runs",
    "click",
    "button",
    "page",
    "use",
    "html",
    "css",
    "javascript",
    "together",
    "website",
    "notice",
    "everything",
    "starts",
    "html",
    "html",
    "first",
    "creates",
    "website",
    "inside",
    "html",
    "run",
    "css",
    "code",
    "change",
    "appearance",
    "run",
    "javascript",
    "code",
    "make",
    "website",
    "interactive",
    "let",
    "learn",
    "new",
    "features",
    "javascript",
    "seen",
    "yet",
    "course",
    "next",
    "feature",
    "going",
    "learn",
    "called",
    "comments",
    "comments",
    "pieces",
    "code",
    "computer",
    "ignores",
    "let",
    "create",
    "first",
    "comment",
    "going",
    "go",
    "script",
    "element",
    "type",
    "forward",
    "slash",
    "forward",
    "slash",
    "comment",
    "anything",
    "double",
    "slash",
    "ignored",
    "computer",
    "type",
    "anything",
    "want",
    "like",
    "comment",
    "save",
    "ignores",
    "line",
    "creates",
    "popup",
    "next",
    "line",
    "let",
    "close",
    "popup",
    "learn",
    "use",
    "comments",
    "comments",
    "useful",
    "providing",
    "information",
    "people",
    "reading",
    "code",
    "example",
    "create",
    "comment",
    "code",
    "like",
    "code",
    "creates",
    "popup",
    "comment",
    "helps",
    "others",
    "understand",
    "code",
    "one",
    "way",
    "use",
    "comments",
    "another",
    "way",
    "use",
    "comments",
    "want",
    "run",
    "code",
    "anymore",
    "also",
    "want",
    "delete",
    "example",
    "code",
    "creates",
    "popup",
    "every",
    "time",
    "refresh",
    "page",
    "annoying",
    "want",
    "stop",
    "running",
    "code",
    "also",
    "want",
    "delete",
    "might",
    "want",
    "review",
    "code",
    "later",
    "add",
    "double",
    "slash",
    "front",
    "line",
    "turn",
    "code",
    "comment",
    "save",
    "computer",
    "ignore",
    "line",
    "code",
    "create",
    "popup",
    "called",
    "commenting",
    "code",
    "useful",
    "want",
    "run",
    "code",
    "anymore",
    "also",
    "want",
    "delete",
    "informational",
    "purposes",
    "javascript",
    "another",
    "syntax",
    "writing",
    "comments",
    "syntax",
    "slash",
    "star",
    "star",
    "slash",
    "anything",
    "stars",
    "comment",
    "called",
    "comment",
    "stars",
    "write",
    "comment",
    "multiple",
    "lines",
    "example",
    "type",
    "multi",
    "enter",
    "line",
    "line",
    "enter",
    "comment",
    "hand",
    "double",
    "slash",
    "known",
    "single",
    "line",
    "comment",
    "like",
    "javascript",
    "html",
    "css",
    "also",
    "comments",
    "use",
    "different",
    "syntax",
    "scroll",
    "html",
    "type",
    "less",
    "exclamation",
    "also",
    "need",
    "greater",
    "anything",
    "double",
    "dashes",
    "comment",
    "example",
    "comment",
    "css",
    "create",
    "comment",
    "type",
    "slash",
    "star",
    "star",
    "slash",
    "comment",
    "javascript",
    "stars",
    "add",
    "comment",
    "comment",
    "save",
    "file",
    "nothing",
    "changes",
    "web",
    "page",
    "comments",
    "ignored",
    "computer",
    "last",
    "feature",
    "javascript",
    "going",
    "learn",
    "called",
    "let",
    "go",
    "back",
    "code",
    "bottom",
    "script",
    "element",
    "going",
    "type",
    "code",
    "2",
    "2",
    "learned",
    "code",
    "java",
    "script",
    "math",
    "however",
    "save",
    "file",
    "result",
    "math",
    "might",
    "think",
    "result",
    "show",
    "console",
    "rightclick",
    "click",
    "inspect",
    "click",
    "console",
    "notice",
    "result",
    "show",
    "either",
    "running",
    "2",
    "2",
    "inside",
    "console",
    "result",
    "shows",
    "console",
    "running",
    "code",
    "console",
    "anymore",
    "running",
    "code",
    "web",
    "page",
    "see",
    "result",
    "solution",
    "going",
    "redirect",
    "result",
    "back",
    "console",
    "going",
    "use",
    "piece",
    "code",
    "open",
    "bracket",
    "close",
    "bracket",
    "semicolon",
    "display",
    "whatever",
    "brackets",
    "back",
    "console",
    "move",
    "code",
    "brackets",
    "select",
    "right",
    "click",
    "cut",
    "brackets",
    "right",
    "click",
    "paste",
    "save",
    "result",
    "code",
    "displayed",
    "back",
    "console",
    "works",
    "code",
    "learned",
    "far",
    "example",
    "use",
    "strings",
    "let",
    "create",
    "new",
    "line",
    "type",
    "open",
    "bracket",
    "close",
    "bracket",
    "semicolon",
    "brackets",
    "let",
    "type",
    "strings",
    "quote",
    "su",
    "quote",
    "plus",
    "quote",
    "text",
    "quote",
    "save",
    "file",
    "display",
    "result",
    "whatever",
    "brackets",
    "back",
    "console",
    "see",
    "result",
    "javascript",
    "code",
    "running",
    "file",
    "use",
    "end",
    "lesson",
    "lesson",
    "reviewed",
    "basics",
    "html",
    "css",
    "set",
    "code",
    "editor",
    "vs",
    "code",
    "learned",
    "load",
    "javascript",
    "inside",
    "html",
    "file",
    "using",
    "script",
    "element",
    "onclick",
    "attribute",
    "learned",
    "create",
    "comments",
    "learned",
    "use",
    "thanks",
    "watching",
    "course",
    "far",
    "want",
    "support",
    "channel",
    "check",
    "premium",
    "version",
    "courses",
    "like",
    "one",
    "get",
    "certificate",
    "completion",
    "learning",
    "platform",
    "interested",
    "extra",
    "videos",
    "videos",
    "behind",
    "thes",
    "scenes",
    "content",
    "check",
    "links",
    "also",
    "support",
    "channel",
    "liking",
    "video",
    "subscribing",
    "sharing",
    "video",
    "others",
    "thanks",
    "let",
    "continue",
    "course",
    "exercises",
    "try",
    "practice",
    "learned",
    "lesson",
    "lesson",
    "going",
    "learn",
    "next",
    "feature",
    "javascript",
    "called",
    "variables",
    "going",
    "use",
    "variables",
    "build",
    "simple",
    "version",
    "cart",
    "quantity",
    "feature",
    "final",
    "project",
    "first",
    "let",
    "create",
    "new",
    "html",
    "file",
    "learning",
    "variables",
    "going",
    "go",
    "code",
    "editor",
    "click",
    "icon",
    "show",
    "files",
    "click",
    "icon",
    "create",
    "new",
    "file",
    "going",
    "name",
    "file",
    "variables",
    "html",
    "press",
    "enter",
    "05",
    "means",
    "file",
    "lesson",
    "five",
    "let",
    "also",
    "add",
    "lesson",
    "number",
    "website",
    "html",
    "select",
    "file",
    "rightclick",
    "rename",
    "front",
    "add",
    "press",
    "enter",
    "next",
    "going",
    "copy",
    "code",
    "website",
    "html",
    "variables",
    "html",
    "let",
    "click",
    "file",
    "going",
    "select",
    "code",
    "typing",
    "control",
    "windows",
    "command",
    "mac",
    "going",
    "rightclick",
    "copy",
    "inside",
    "variables",
    "html",
    "rightclick",
    "paste",
    "let",
    "click",
    "icon",
    "hide",
    "files",
    "prepare",
    "file",
    "lesson",
    "let",
    "scroll",
    "top",
    "first",
    "going",
    "change",
    "title",
    "variables",
    "next",
    "going",
    "delete",
    "css",
    "going",
    "start",
    "going",
    "delete",
    "html",
    "except",
    "script",
    "element",
    "let",
    "delete",
    "javascript",
    "previous",
    "lesson",
    "finally",
    "let",
    "save",
    "open",
    "file",
    "browser",
    "right",
    "clicking",
    "open",
    "live",
    "server",
    "close",
    "previous",
    "tab",
    "previous",
    "code",
    "ready",
    "learn",
    "variables",
    "first",
    "variable",
    "variable",
    "like",
    "container",
    "save",
    "value",
    "like",
    "number",
    "string",
    "inside",
    "variable",
    "use",
    "later",
    "let",
    "example",
    "create",
    "first",
    "variable",
    "inside",
    "script",
    "element",
    "going",
    "type",
    "code",
    "let",
    "space",
    "word",
    "let",
    "creates",
    "new",
    "variable",
    "going",
    "choose",
    "name",
    "new",
    "variable",
    "let",
    "name",
    "variable",
    "one",
    "creates",
    "variable",
    "container",
    "named",
    "variable",
    "one",
    "save",
    "value",
    "inside",
    "variable",
    "going",
    "type",
    "space",
    "equals",
    "space",
    "value",
    "like",
    "number",
    "string",
    "let",
    "save",
    "number",
    "three",
    "inside",
    "type",
    "semicolon",
    "end",
    "use",
    "let",
    "create",
    "new",
    "variable",
    "named",
    "variable",
    "variable",
    "one",
    "saved",
    "value",
    "three",
    "inside",
    "variable",
    "saved",
    "value",
    "use",
    "later",
    "example",
    "let",
    "type",
    "new",
    "line",
    "type",
    "code",
    "console",
    "log",
    "open",
    "bracket",
    "close",
    "bracket",
    "semicolon",
    "remember",
    "previous",
    "lesson",
    "code",
    "displays",
    "whatever",
    "inside",
    "brackets",
    "console",
    "far",
    "put",
    "value",
    "inside",
    "like",
    "number",
    "two",
    "save",
    "go",
    "website",
    "open",
    "console",
    "right",
    "click",
    "inspect",
    "click",
    "console",
    "see",
    "number",
    "two",
    "displayed",
    "console",
    "let",
    "try",
    "replacing",
    "value",
    "variable",
    "created",
    "instead",
    "two",
    "going",
    "variable",
    "one",
    "save",
    "notice",
    "displays",
    "three",
    "displaying",
    "whatever",
    "value",
    "saved",
    "inside",
    "variable",
    "see",
    "save",
    "value",
    "inside",
    "variable",
    "use",
    "variable",
    "later",
    "let",
    "another",
    "example",
    "going",
    "create",
    "another",
    "variable",
    "going",
    "create",
    "new",
    "lines",
    "type",
    "let",
    "time",
    "let",
    "name",
    "variable",
    "calculation",
    "going",
    "type",
    "space",
    "equals",
    "space",
    "save",
    "value",
    "inside",
    "new",
    "variable",
    "time",
    "instead",
    "number",
    "going",
    "save",
    "calculation",
    "2",
    "2",
    "semicolon",
    "calculate",
    "2",
    "2",
    "save",
    "result",
    "four",
    "variable",
    "call",
    "console",
    "log",
    "open",
    "bracket",
    "calculation",
    "semicolon",
    "save",
    "show",
    "us",
    "value",
    "saved",
    "inside",
    "calculation",
    "let",
    "try",
    "code",
    "going",
    "type",
    "new",
    "line",
    "console",
    "log",
    "open",
    "bracket",
    "calculation",
    "plus",
    "2",
    "semicolon",
    "using",
    "variable",
    "inside",
    "calculation",
    "takes",
    "whatever",
    "value",
    "saved",
    "inside",
    "variable",
    "right",
    "four",
    "substitutes",
    "value",
    "calculation",
    "4",
    "2",
    "equals",
    "six",
    "save",
    "see",
    "console",
    "display",
    "blade",
    "six",
    "use",
    "variable",
    "wherever",
    "use",
    "value",
    "javascript",
    "substitute",
    "whatever",
    "inside",
    "variable",
    "code",
    "let",
    "another",
    "example",
    "going",
    "type",
    "new",
    "lines",
    "create",
    "new",
    "variable",
    "using",
    "let",
    "going",
    "name",
    "variable",
    "result",
    "going",
    "make",
    "equal",
    "calcul",
    "ation",
    "plus",
    "2",
    "semicolon",
    "thing",
    "code",
    "take",
    "whatever",
    "value",
    "inside",
    "calculation",
    "four",
    "substitute",
    "code",
    "get",
    "4",
    "2",
    "6",
    "time",
    "extra",
    "step",
    "going",
    "save",
    "result",
    "six",
    "another",
    "variable",
    "result",
    "save",
    "see",
    "six",
    "saved",
    "result",
    "variable",
    "use",
    "variable",
    "wherever",
    "use",
    "value",
    "addition",
    "numbers",
    "save",
    "type",
    "value",
    "variable",
    "including",
    "strings",
    "example",
    "let",
    "create",
    "new",
    "variable",
    "using",
    "let",
    "let",
    "name",
    "message",
    "going",
    "save",
    "inside",
    "variable",
    "string",
    "time",
    "quote",
    "hello",
    "quote",
    "semicolon",
    "going",
    "variable",
    "message",
    "semicolon",
    "end",
    "save",
    "show",
    "us",
    "string",
    "hello",
    "saved",
    "inside",
    "variable",
    "okay",
    "learned",
    "variables",
    "work",
    "let",
    "learn",
    "syntax",
    "rules",
    "variables",
    "word",
    "let",
    "creates",
    "new",
    "variable",
    "give",
    "variable",
    "name",
    "name",
    "variables",
    "almost",
    "anything",
    "want",
    "except",
    "restrictions",
    "number",
    "one",
    "ca",
    "use",
    "special",
    "words",
    "like",
    "let",
    "variable",
    "name",
    "let",
    "already",
    "special",
    "meaning",
    "javascript",
    "creates",
    "variable",
    "let",
    "reserved",
    "word",
    "however",
    "use",
    "let",
    "one",
    "let",
    "two",
    "variable",
    "names",
    "ca",
    "use",
    "let",
    "number",
    "two",
    "ca",
    "start",
    "variable",
    "name",
    "number",
    "start",
    "number",
    "javascript",
    "think",
    "number",
    "instead",
    "variable",
    "name",
    "however",
    "use",
    "numbers",
    "middle",
    "end",
    "lastly",
    "ca",
    "use",
    "special",
    "characters",
    "like",
    "space",
    "variable",
    "name",
    "however",
    "two",
    "special",
    "characters",
    "use",
    "dollar",
    "underscore",
    "rules",
    "naming",
    "variables",
    "save",
    "something",
    "inside",
    "variable",
    "use",
    "equal",
    "sign",
    "value",
    "want",
    "save",
    "create",
    "variable",
    "start",
    "using",
    "rest",
    "code",
    "one",
    "last",
    "part",
    "syntax",
    "learned",
    "semicolon",
    "seen",
    "semicolons",
    "many",
    "places",
    "already",
    "javascript",
    "semicolon",
    "means",
    "end",
    "instruction",
    "similar",
    "period",
    "english",
    "english",
    "period",
    "means",
    "end",
    "sentence",
    "semicolon",
    "tells",
    "java",
    "script",
    "end",
    "instruction",
    "add",
    "another",
    "instruction",
    "like",
    "console",
    "log",
    "open",
    "bracket",
    "string",
    "semicolon",
    "semicolon",
    "end",
    "save",
    "run",
    "two",
    "instructions",
    "one",
    "another",
    "without",
    "problems",
    "semicolon",
    "save",
    "would",
    "work",
    "javascript",
    "thinks",
    "entire",
    "line",
    "one",
    "instruction",
    "need",
    "semicolons",
    "separate",
    "different",
    "instructions",
    "javascript",
    "save",
    "everything",
    "goes",
    "back",
    "normal",
    "javascript",
    "little",
    "special",
    "feature",
    "called",
    "semicolon",
    "insertion",
    "means",
    "try",
    "insert",
    "last",
    "semicolon",
    "line",
    "code",
    "automat",
    "automatically",
    "example",
    "removed",
    "last",
    "semicolon",
    "save",
    "code",
    "work",
    "without",
    "semicolon",
    "javascript",
    "inserts",
    "last",
    "semicolon",
    "automatically",
    "however",
    "lot",
    "companies",
    "still",
    "prefer",
    "use",
    "semicolons",
    "javascript",
    "code",
    "semicolon",
    "insertion",
    "sometimes",
    "put",
    "semicolon",
    "wrong",
    "place",
    "reason",
    "also",
    "going",
    "use",
    "sem",
    "colons",
    "course",
    "help",
    "get",
    "used",
    "javascript",
    "code",
    "semicolons",
    "next",
    "going",
    "learn",
    "change",
    "value",
    "saved",
    "inside",
    "variable",
    "example",
    "save",
    "number",
    "three",
    "inside",
    "variable",
    "one",
    "going",
    "change",
    "value",
    "saved",
    "inside",
    "variable",
    "one",
    "going",
    "go",
    "bottom",
    "create",
    "new",
    "lines",
    "going",
    "type",
    "variable",
    "name",
    "variable",
    "one",
    "change",
    "value",
    "saved",
    "inside",
    "going",
    "type",
    "equal",
    "sign",
    "different",
    "value",
    "like",
    "five",
    "semicolon",
    "variable",
    "variable",
    "1",
    "semicolon",
    "save",
    "show",
    "us",
    "five",
    "saved",
    "inside",
    "variable",
    "one",
    "notice",
    "also",
    "scroll",
    "top",
    "first",
    "still",
    "displays",
    "value",
    "three",
    "point",
    "code",
    "variable",
    "one",
    "still",
    "contained",
    "three",
    "update",
    "variable",
    "yet",
    "first",
    "saved",
    "value",
    "inside",
    "variable",
    "called",
    "assigning",
    "value",
    "variable",
    "change",
    "value",
    "inside",
    "varable",
    "iable",
    "called",
    "reassigning",
    "value",
    "variable",
    "let",
    "learn",
    "syntax",
    "rules",
    "reassigning",
    "value",
    "notice",
    "use",
    "word",
    "let",
    "reassigning",
    "let",
    "creates",
    "new",
    "variable",
    "try",
    "use",
    "let",
    "would",
    "try",
    "create",
    "new",
    "variable",
    "named",
    "variable",
    "one",
    "however",
    "variable",
    "one",
    "already",
    "exists",
    "ca",
    "create",
    "two",
    "var",
    "variables",
    "name",
    "would",
    "cause",
    "error",
    "instead",
    "reassign",
    "variable",
    "type",
    "variable",
    "name",
    "make",
    "equal",
    "something",
    "else",
    "syntax",
    "reassigning",
    "variable",
    "going",
    "one",
    "last",
    "example",
    "working",
    "project",
    "let",
    "go",
    "end",
    "code",
    "going",
    "type",
    "new",
    "lines",
    "time",
    "going",
    "reassign",
    "variable",
    "one",
    "reassign",
    "variable",
    "many",
    "times",
    "want",
    "let",
    "type",
    "variable",
    "1",
    "equals",
    "going",
    "type",
    "variable",
    "1",
    "1",
    "semicolon",
    "learned",
    "earlier",
    "use",
    "variable",
    "inside",
    "calculation",
    "substitute",
    "whatever",
    "value",
    "inside",
    "variable",
    "also",
    "using",
    "variable",
    "inside",
    "calculation",
    "using",
    "variable",
    "essentially",
    "taking",
    "variable",
    "increasing",
    "one",
    "saving",
    "back",
    "variable",
    "variable",
    "one",
    "save",
    "variable",
    "one",
    "contains",
    "six",
    "took",
    "previous",
    "value",
    "variable",
    "one",
    "five",
    "added",
    "one",
    "saved",
    "back",
    "increase",
    "value",
    "variable",
    "certain",
    "number",
    "okay",
    "know",
    "create",
    "reassign",
    "variables",
    "ready",
    "work",
    "project",
    "actually",
    "prepared",
    "project",
    "lesson",
    "see",
    "project",
    "going",
    "browser",
    "clicking",
    "top",
    "typing",
    "super",
    "simple",
    "dodev",
    "sl",
    "projects",
    "slv",
    "variables",
    "press",
    "enter",
    "going",
    "work",
    "cart",
    "quantity",
    "feature",
    "final",
    "project",
    "final",
    "project",
    "number",
    "top",
    "right",
    "corner",
    "shows",
    "many",
    "products",
    "cart",
    "click",
    "add",
    "cart",
    "button",
    "quantity",
    "increase",
    "see",
    "simple",
    "version",
    "cart",
    "quantity",
    "feature",
    "create",
    "right",
    "let",
    "go",
    "works",
    "first",
    "make",
    "sure",
    "console",
    "open",
    "page",
    "click",
    "show",
    "quantity",
    "button",
    "show",
    "us",
    "zero",
    "products",
    "cart",
    "click",
    "add",
    "cart",
    "button",
    "increase",
    "quantity",
    "one",
    "display",
    "console",
    "click",
    "add",
    "cart",
    "increase",
    "quantity",
    "one",
    "final",
    "project",
    "also",
    "add",
    "one",
    "product",
    "time",
    "using",
    "going",
    "build",
    "simpler",
    "version",
    "going",
    "use",
    "plus",
    "two",
    "plus",
    "three",
    "buttons",
    "add",
    "multiple",
    "products",
    "click",
    "plus",
    "two",
    "button",
    "increase",
    "quantity",
    "two",
    "display",
    "console",
    "click",
    "plus",
    "three",
    "button",
    "increase",
    "quantity",
    "three",
    "finally",
    "click",
    "reset",
    "cart",
    "button",
    "reset",
    "quantity",
    "back",
    "zero",
    "display",
    "message",
    "console",
    "understand",
    "project",
    "works",
    "let",
    "build",
    "step",
    "step",
    "first",
    "let",
    "create",
    "new",
    "html",
    "file",
    "project",
    "going",
    "go",
    "code",
    "editor",
    "click",
    "icon",
    "show",
    "files",
    "click",
    "icon",
    "create",
    "new",
    "file",
    "let",
    "name",
    "file",
    "05",
    "dcart",
    "quantity",
    "html",
    "press",
    "enter",
    "next",
    "let",
    "open",
    "variables",
    "html",
    "going",
    "copy",
    "code",
    "new",
    "file",
    "let",
    "type",
    "control",
    "windows",
    "command",
    "mac",
    "select",
    "code",
    "rightclick",
    "copy",
    "new",
    "file",
    "right",
    "click",
    "paste",
    "let",
    "close",
    "new",
    "file",
    "going",
    "change",
    "title",
    "cart",
    "quantity",
    "let",
    "remove",
    "javascript",
    "code",
    "keep",
    "script",
    "element",
    "going",
    "write",
    "new",
    "javascript",
    "code",
    "ready",
    "begin",
    "let",
    "start",
    "creating",
    "buttons",
    "let",
    "go",
    "body",
    "element",
    "going",
    "create",
    "new",
    "line",
    "learned",
    "previous",
    "lesson",
    "create",
    "button",
    "using",
    "html",
    "code",
    "less",
    "button",
    "greater",
    "closing",
    "tag",
    "less",
    "slb",
    "button",
    "greater",
    "inside",
    "button",
    "going",
    "text",
    "show",
    "quantity",
    "let",
    "save",
    "let",
    "open",
    "file",
    "live",
    "server",
    "right",
    "clicking",
    "open",
    "live",
    "server",
    "see",
    "created",
    "first",
    "button",
    "let",
    "create",
    "buttons",
    "feel",
    "free",
    "pause",
    "video",
    "want",
    "try",
    "going",
    "go",
    "back",
    "html",
    "create",
    "another",
    "button",
    "inside",
    "one",
    "going",
    "text",
    "add",
    "cart",
    "let",
    "create",
    "another",
    "button",
    "one",
    "going",
    "text",
    "plus",
    "two",
    "create",
    "another",
    "button",
    "one",
    "going",
    "3",
    "finally",
    "create",
    "last",
    "button",
    "one",
    "reset",
    "cart",
    "let",
    "save",
    "go",
    "back",
    "tab",
    "created",
    "buttons",
    "let",
    "make",
    "web",
    "page",
    "interactive",
    "javascript",
    "first",
    "need",
    "somewhere",
    "save",
    "cart",
    "quantity",
    "learned",
    "lesson",
    "variables",
    "perfect",
    "solution",
    "variables",
    "let",
    "us",
    "save",
    "value",
    "let",
    "go",
    "script",
    "element",
    "going",
    "create",
    "variable",
    "typing",
    "let",
    "variable",
    "going",
    "save",
    "cart",
    "quantity",
    "let",
    "name",
    "cart",
    "capital",
    "q",
    "quantity",
    "card",
    "quantity",
    "start",
    "zero",
    "going",
    "type",
    "equal",
    "z",
    "semicolon",
    "next",
    "click",
    "show",
    "quantity",
    "button",
    "want",
    "display",
    "quantity",
    "console",
    "learned",
    "special",
    "html",
    "attribute",
    "previous",
    "lesson",
    "called",
    "onclick",
    "attribute",
    "going",
    "type",
    "opening",
    "tag",
    "space",
    "onclick",
    "equals",
    "double",
    "quotes",
    "onclick",
    "attribute",
    "run",
    "javascript",
    "click",
    "button",
    "double",
    "quotes",
    "write",
    "javascript",
    "code",
    "let",
    "press",
    "enter",
    "enter",
    "click",
    "button",
    "want",
    "display",
    "card",
    "quantity",
    "console",
    "let",
    "type",
    "open",
    "bracket",
    "close",
    "bracket",
    "semicolon",
    "brackets",
    "going",
    "display",
    "message",
    "go",
    "back",
    "super",
    "simple",
    "click",
    "show",
    "quantity",
    "want",
    "display",
    "message",
    "console",
    "code",
    "brackets",
    "going",
    "type",
    "string",
    "quote",
    "cart",
    "quantity",
    "colon",
    "0",
    "let",
    "save",
    "go",
    "back",
    "tab",
    "try",
    "going",
    "open",
    "console",
    "first",
    "right",
    "clicking",
    "click",
    "inspect",
    "click",
    "console",
    "press",
    "show",
    "quantity",
    "button",
    "display",
    "message",
    "console",
    "okay",
    "made",
    "project",
    "interactive",
    "however",
    "obviously",
    "want",
    "display",
    "zero",
    "every",
    "time",
    "want",
    "display",
    "value",
    "inside",
    "cart",
    "quantity",
    "need",
    "insert",
    "value",
    "inside",
    "string",
    "remember",
    "strings",
    "lesson",
    "want",
    "insert",
    "value",
    "string",
    "going",
    "use",
    "template",
    "string",
    "let",
    "switch",
    "single",
    "quotes",
    "back",
    "ticks",
    "create",
    "template",
    "string",
    "instead",
    "zero",
    "going",
    "insert",
    "value",
    "using",
    "dollar",
    "open",
    "curly",
    "bracket",
    "close",
    "curly",
    "bracket",
    "brackets",
    "going",
    "insert",
    "variable",
    "cart",
    "capital",
    "q",
    "quantity",
    "remember",
    "javascript",
    "case",
    "sensitive",
    "make",
    "sure",
    "type",
    "variable",
    "name",
    "exactly",
    "let",
    "save",
    "click",
    "show",
    "quantity",
    "displays",
    "value",
    "inside",
    "card",
    "quantity",
    "console",
    "notice",
    "variables",
    "also",
    "work",
    "string",
    "interpolation",
    "use",
    "variable",
    "wherever",
    "use",
    "value",
    "substitute",
    "whatever",
    "value",
    "saved",
    "inside",
    "variable",
    "code",
    "let",
    "make",
    "rest",
    "buttons",
    "interactive",
    "click",
    "add",
    "cart",
    "button",
    "going",
    "add",
    "one",
    "cart",
    "quantity",
    "display",
    "console",
    "going",
    "type",
    "type",
    "space",
    "click",
    "equals",
    "double",
    "quotes",
    "double",
    "quotes",
    "going",
    "add",
    "javascript",
    "let",
    "also",
    "add",
    "new",
    "lines",
    "make",
    "code",
    "easier",
    "read",
    "okay",
    "onclick",
    "attribute",
    "going",
    "two",
    "things",
    "first",
    "one",
    "increase",
    "card",
    "quantity",
    "one",
    "reassigning",
    "card",
    "quantity",
    "variable",
    "going",
    "type",
    "variable",
    "name",
    "cart",
    "quantity",
    "going",
    "make",
    "equal",
    "plus",
    "one",
    "semicolon",
    "next",
    "going",
    "display",
    "updated",
    "quantity",
    "console",
    "let",
    "press",
    "enter",
    "going",
    "display",
    "message",
    "actually",
    "copy",
    "code",
    "select",
    "right",
    "click",
    "copy",
    "right",
    "click",
    "paste",
    "save",
    "click",
    "add",
    "card",
    "button",
    "see",
    "increased",
    "quantity",
    "one",
    "displayed",
    "updated",
    "quantity",
    "console",
    "let",
    "press",
    "make",
    "sure",
    "works",
    "increases",
    "one",
    "displays",
    "console",
    "basically",
    "cart",
    "quantity",
    "feature",
    "works",
    "final",
    "project",
    "first",
    "need",
    "variable",
    "save",
    "quantity",
    "click",
    "button",
    "going",
    "update",
    "quantity",
    "let",
    "make",
    "rest",
    "buttons",
    "interactive",
    "feel",
    "free",
    "pause",
    "video",
    "want",
    "try",
    "plus",
    "two",
    "button",
    "going",
    "add",
    "onclick",
    "attribute",
    "onclick",
    "equals",
    "double",
    "quote",
    "inside",
    "going",
    "increase",
    "cart",
    "quantity",
    "two",
    "cart",
    "quantity",
    "make",
    "equal",
    "plus",
    "two",
    "semicolon",
    "going",
    "display",
    "updated",
    "quantity",
    "console",
    "create",
    "new",
    "line",
    "copy",
    "code",
    "select",
    "right",
    "click",
    "copy",
    "right",
    "click",
    "paste",
    "let",
    "save",
    "click",
    "plus",
    "two",
    "times",
    "see",
    "adds",
    "two",
    "card",
    "quantity",
    "displays",
    "console",
    "plus",
    "three",
    "button",
    "let",
    "type",
    "onclick",
    "attribute",
    "click",
    "equals",
    "double",
    "quotes",
    "going",
    "increase",
    "card",
    "quantity",
    "three",
    "three",
    "cart",
    "quantity",
    "equals",
    "plus",
    "3",
    "semicolon",
    "going",
    "display",
    "console",
    "select",
    "right",
    "click",
    "copy",
    "rightclick",
    "paste",
    "let",
    "save",
    "try",
    "make",
    "sure",
    "works",
    "three",
    "three",
    "finally",
    "let",
    "reset",
    "card",
    "button",
    "add",
    "onclick",
    "attribute",
    "click",
    "equals",
    "double",
    "quotes",
    "inside",
    "double",
    "quotes",
    "going",
    "something",
    "little",
    "different",
    "time",
    "instead",
    "increasing",
    "cart",
    "quantity",
    "set",
    "back",
    "zero",
    "reassign",
    "cart",
    "quantity",
    "variable",
    "cart",
    "quantity",
    "make",
    "equal",
    "z",
    "semicolon",
    "go",
    "back",
    "superimple",
    "dodev",
    "try",
    "reset",
    "cart",
    "button",
    "notice",
    "displays",
    "two",
    "messages",
    "first",
    "message",
    "cart",
    "reset",
    "going",
    "display",
    "message",
    "code",
    "first",
    "string",
    "cart",
    "reset",
    "second",
    "message",
    "message",
    "buttons",
    "select",
    "right",
    "click",
    "copy",
    "right",
    "click",
    "paste",
    "let",
    "save",
    "go",
    "back",
    "tab",
    "give",
    "try",
    "cart",
    "quantity",
    "starts",
    "zero",
    "press",
    "add",
    "cart",
    "increase",
    "es",
    "one",
    "increases",
    "two",
    "increases",
    "three",
    "click",
    "reset",
    "cart",
    "display",
    "cart",
    "reset",
    "reset",
    "cart",
    "quantity",
    "back",
    "zero",
    "created",
    "simple",
    "version",
    "cart",
    "quantity",
    "feature",
    "final",
    "project",
    "using",
    "everything",
    "learned",
    "course",
    "far",
    "going",
    "learn",
    "shortcuts",
    "reassigning",
    "variables",
    "look",
    "line",
    "code",
    "increasing",
    "value",
    "variable",
    "two",
    "saving",
    "back",
    "well",
    "actually",
    "shortcut",
    "shortcut",
    "cart",
    "quantity",
    "plus",
    "equal",
    "2",
    "semicolon",
    "thing",
    "line",
    "shorter",
    "plus",
    "means",
    "going",
    "add",
    "two",
    "cart",
    "quantity",
    "equals",
    "means",
    "going",
    "save",
    "result",
    "back",
    "card",
    "quantity",
    "actually",
    "delete",
    "line",
    "code",
    "work",
    "way",
    "save",
    "try",
    "still",
    "add",
    "two",
    "save",
    "back",
    "card",
    "quantity",
    "let",
    "scroll",
    "practice",
    "using",
    "shortcut",
    "card",
    "quantity",
    "one",
    "instead",
    "line",
    "type",
    "cart",
    "quantity",
    "plus",
    "equal",
    "1",
    "semicolon",
    "turns",
    "programming",
    "plus",
    "equals",
    "1",
    "common",
    "even",
    "shorter",
    "shortcut",
    "plus",
    "equals",
    "1",
    "shortcut",
    "cart",
    "quantity",
    "plus",
    "plus",
    "semicolon",
    "thing",
    "plus",
    "equal",
    "1",
    "three",
    "lines",
    "thing",
    "remove",
    "lines",
    "code",
    "work",
    "shortcut",
    "save",
    "click",
    "add",
    "cart",
    "add",
    "one",
    "every",
    "time",
    "shortcuts",
    "reassigning",
    "variables",
    "also",
    "shortcuts",
    "operators",
    "like",
    "minus",
    "equals",
    "multiply",
    "equals",
    "divide",
    "equals",
    "minus",
    "minus",
    "leave",
    "exercises",
    "shortcuts",
    "end",
    "lesson",
    "next",
    "going",
    "learn",
    "best",
    "practices",
    "naming",
    "variables",
    "scroll",
    "notice",
    "variable",
    "cart",
    "quantity",
    "two",
    "words",
    "cart",
    "quantity",
    "learned",
    "earlier",
    "ca",
    "spaces",
    "variable",
    "name",
    "want",
    "multiple",
    "words",
    "combine",
    "together",
    "like",
    "might",
    "wondering",
    "wrote",
    "way",
    "lowercase",
    "c",
    "capital",
    "q",
    "actually",
    "naming",
    "convention",
    "called",
    "cam",
    "case",
    "cam",
    "case",
    "combine",
    "words",
    "together",
    "capitalize",
    "every",
    "word",
    "except",
    "first",
    "word",
    "cart",
    "quantity",
    "capitalize",
    "quantity",
    "keep",
    "cart",
    "lowercase",
    "first",
    "word",
    "cam",
    "case",
    "actually",
    "standard",
    "naming",
    "convention",
    "javascript",
    "variable",
    "names",
    "use",
    "cam",
    "case",
    "programming",
    "naming",
    "conventions",
    "exist",
    "another",
    "one",
    "called",
    "pascal",
    "case",
    "pascal",
    "case",
    "camel",
    "case",
    "except",
    "capitalize",
    "first",
    "word",
    "cart",
    "quantity",
    "pascal",
    "case",
    "would",
    "capital",
    "cart",
    "capital",
    "quantity",
    "javascript",
    "one",
    "feature",
    "use",
    "pascal",
    "case",
    "learn",
    "later",
    "course",
    "everything",
    "else",
    "use",
    "camel",
    "case",
    "another",
    "naming",
    "convention",
    "kebab",
    "case",
    "keep",
    "words",
    "lowercase",
    "combine",
    "dash",
    "like",
    "cart",
    "dash",
    "quantity",
    "kebab",
    "case",
    "work",
    "javascript",
    "dash",
    "already",
    "minus",
    "symbol",
    "however",
    "use",
    "kebab",
    "case",
    "html",
    "css",
    "also",
    "file",
    "names",
    "see",
    "finally",
    "snake",
    "case",
    "keep",
    "words",
    "lowercase",
    "combine",
    "underscores",
    "snake",
    "case",
    "used",
    "languages",
    "really",
    "used",
    "javascript",
    "common",
    "naming",
    "conventions",
    "use",
    "programming",
    "one",
    "thing",
    "want",
    "note",
    "name",
    "variables",
    "try",
    "pick",
    "name",
    "short",
    "long",
    "example",
    "instead",
    "cart",
    "quantity",
    "could",
    "named",
    "variable",
    "c",
    "name",
    "short",
    "hard",
    "understand",
    "c",
    "means",
    "could",
    "also",
    "use",
    "name",
    "like",
    "quantity",
    "products",
    "cart",
    "name",
    "long",
    "hard",
    "read",
    "code",
    "try",
    "balance",
    "name",
    "understandable",
    "long",
    "like",
    "cart",
    "quantity",
    "last",
    "thing",
    "going",
    "learn",
    "lesson",
    "three",
    "ways",
    "create",
    "variables",
    "javascript",
    "let",
    "go",
    "back",
    "variables",
    "html",
    "file",
    "going",
    "learn",
    "three",
    "ways",
    "first",
    "way",
    "use",
    "let",
    "already",
    "learned",
    "second",
    "way",
    "create",
    "variable",
    "use",
    "word",
    "const",
    "bottom",
    "type",
    "const",
    "space",
    "variable",
    "name",
    "like",
    "variable",
    "2",
    "make",
    "equal",
    "three",
    "const",
    "creates",
    "variable",
    "like",
    "let",
    "except",
    "ca",
    "change",
    "value",
    "later",
    "value",
    "stays",
    "constant",
    "called",
    "const",
    "try",
    "change",
    "value",
    "like",
    "variable",
    "2",
    "5",
    "save",
    "open",
    "file",
    "browser",
    "right",
    "clicking",
    "open",
    "live",
    "server",
    "open",
    "console",
    "rightclick",
    "inspect",
    "click",
    "console",
    "give",
    "us",
    "error",
    "try",
    "change",
    "variable",
    "work",
    "let",
    "remove",
    "line",
    "save",
    "would",
    "ever",
    "use",
    "const",
    "instead",
    "let",
    "well",
    "const",
    "makes",
    "code",
    "safer",
    "easier",
    "understand",
    "create",
    "variable",
    "const",
    "know",
    "sure",
    "variable",
    "always",
    "contain",
    "three",
    "let",
    "however",
    "create",
    "variable",
    "hard",
    "know",
    "value",
    "inside",
    "variable",
    "later",
    "change",
    "value",
    "code",
    "order",
    "keep",
    "code",
    "safer",
    "actually",
    "best",
    "practice",
    "use",
    "const",
    "default",
    "use",
    "let",
    "know",
    "need",
    "change",
    "variable",
    "actually",
    "best",
    "practice",
    "use",
    "const",
    "create",
    "calculation",
    "variable",
    "changing",
    "later",
    "thing",
    "result",
    "variable",
    "message",
    "variable",
    "variable",
    "one",
    "use",
    "let",
    "changing",
    "later",
    "code",
    "const",
    "creates",
    "variable",
    "ca",
    "changed",
    "later",
    "finally",
    "third",
    "way",
    "creating",
    "variable",
    "use",
    "another",
    "word",
    "var",
    "bottom",
    "type",
    "var",
    "space",
    "variable",
    "name",
    "like",
    "variable",
    "3",
    "make",
    "equal",
    "three",
    "var",
    "creates",
    "variable",
    "like",
    "let",
    "variable",
    "changed",
    "later",
    "var",
    "actually",
    "original",
    "way",
    "create",
    "variables",
    "javascript",
    "var",
    "means",
    "variable",
    "however",
    "var",
    "issues",
    "learn",
    "later",
    "course",
    "issues",
    "use",
    "var",
    "new",
    "javascript",
    "code",
    "might",
    "see",
    "var",
    "older",
    "javascript",
    "code",
    "still",
    "useful",
    "know",
    "three",
    "ways",
    "create",
    "variables",
    "javascript",
    "let",
    "constant",
    "var",
    "use",
    "const",
    "default",
    "change",
    "variable",
    "use",
    "let",
    "one",
    "thing",
    "going",
    "learn",
    "use",
    "type",
    "variables",
    "remember",
    "type",
    "tells",
    "us",
    "type",
    "value",
    "example",
    "wrote",
    "console",
    "log",
    "type",
    "three",
    "save",
    "type",
    "tell",
    "us",
    "three",
    "number",
    "well",
    "actually",
    "use",
    "type",
    "variable",
    "change",
    "variable",
    "2",
    "save",
    "type",
    "tell",
    "us",
    "type",
    "value",
    "inside",
    "variable",
    "number",
    "see",
    "console",
    "let",
    "check",
    "type",
    "variable",
    "message",
    "message",
    "contains",
    "string",
    "type",
    "message",
    "save",
    "tell",
    "us",
    "value",
    "inside",
    "message",
    "variable",
    "string",
    "use",
    "type",
    "check",
    "type",
    "value",
    "saved",
    "inside",
    "variable",
    "end",
    "lesson",
    "lesson",
    "learned",
    "variables",
    "way",
    "save",
    "values",
    "use",
    "later",
    "learned",
    "reassign",
    "variable",
    "created",
    "cart",
    "quantity",
    "feature",
    "final",
    "project",
    "learned",
    "shortcuts",
    "reassigning",
    "variable",
    "learned",
    "naming",
    "conventions",
    "best",
    "practices",
    "variable",
    "names",
    "learned",
    "learned",
    "three",
    "ways",
    "create",
    "variable",
    "let",
    "const",
    "var",
    "exercises",
    "help",
    "practice",
    "using",
    "variables",
    "lesson",
    "going",
    "learn",
    "two",
    "features",
    "javascript",
    "called",
    "booleans",
    "statements",
    "going",
    "use",
    "features",
    "build",
    "rock",
    "paper",
    "scissors",
    "project",
    "let",
    "start",
    "creating",
    "new",
    "html",
    "file",
    "lesson",
    "going",
    "go",
    "code",
    "editor",
    "click",
    "icon",
    "show",
    "files",
    "click",
    "icon",
    "create",
    "new",
    "file",
    "going",
    "name",
    "file",
    "booleans",
    "html",
    "press",
    "enter",
    "let",
    "open",
    "variables",
    "html",
    "going",
    "copy",
    "code",
    "new",
    "file",
    "let",
    "select",
    "code",
    "using",
    "control",
    "windows",
    "command",
    "mac",
    "rightclick",
    "copy",
    "rightclick",
    "paste",
    "let",
    "close",
    "prepare",
    "file",
    "lesson",
    "scroll",
    "top",
    "change",
    "booleans",
    "remove",
    "javascript",
    "code",
    "keep",
    "script",
    "element",
    "let",
    "save",
    "open",
    "file",
    "live",
    "server",
    "right",
    "clicking",
    "open",
    "live",
    "server",
    "close",
    "previous",
    "tabs",
    "well",
    "previous",
    "code",
    "start",
    "learning",
    "booleans",
    "far",
    "course",
    "learn",
    "two",
    "types",
    "values",
    "javascript",
    "numbers",
    "strings",
    "booleans",
    "another",
    "type",
    "value",
    "javascript",
    "booleans",
    "special",
    "two",
    "boolean",
    "values",
    "true",
    "false",
    "let",
    "click",
    "script",
    "element",
    "type",
    "true",
    "press",
    "enter",
    "type",
    "false",
    "two",
    "boolean",
    "values",
    "exist",
    "true",
    "false",
    "purpose",
    "boolean",
    "values",
    "boolean",
    "value",
    "represents",
    "whether",
    "something",
    "true",
    "false",
    "example",
    "javascript",
    "compare",
    "two",
    "numbers",
    "let",
    "create",
    "new",
    "lines",
    "type",
    "code",
    "3",
    "less",
    "5",
    "code",
    "checks",
    "whether",
    "number",
    "three",
    "less",
    "five",
    "course",
    "true",
    "code",
    "save",
    "go",
    "website",
    "open",
    "console",
    "rightclick",
    "inspect",
    "console",
    "show",
    "us",
    "result",
    "code",
    "boolean",
    "value",
    "true",
    "let",
    "try",
    "another",
    "example",
    "let",
    "delete",
    "less",
    "symbol",
    "replace",
    "greater",
    "symbol",
    "code",
    "checks",
    "whether",
    "three",
    "greater",
    "five",
    "know",
    "three",
    "greater",
    "five",
    "save",
    "computer",
    "tell",
    "us",
    "result",
    "comparison",
    "boolean",
    "value",
    "false",
    "see",
    "boolean",
    "value",
    "represents",
    "whether",
    "something",
    "true",
    "false",
    "let",
    "learn",
    "syntax",
    "rules",
    "booleans",
    "create",
    "boolean",
    "type",
    "true",
    "false",
    "note",
    "surround",
    "quotes",
    "like",
    "surround",
    "quotes",
    "string",
    "boolean",
    "use",
    "type",
    "check",
    "front",
    "type",
    "type",
    "true",
    "save",
    "tell",
    "us",
    "string",
    "remove",
    "quotes",
    "save",
    "tell",
    "us",
    "boolean",
    "creating",
    "boolean",
    "put",
    "quotes",
    "around",
    "true",
    "false",
    "let",
    "save",
    "one",
    "way",
    "create",
    "boolean",
    "compare",
    "two",
    "numbers",
    "example",
    "3",
    "greater",
    "5",
    "greater",
    "symbol",
    "called",
    "comparison",
    "operator",
    "many",
    "comparison",
    "operators",
    "use",
    "saw",
    "less",
    "earlier",
    "also",
    "greater",
    "equal",
    "less",
    "equal",
    "triple",
    "equals",
    "checks",
    "two",
    "values",
    "equal",
    "exclamation",
    "double",
    "equals",
    "checks",
    "two",
    "values",
    "equal",
    "javascript",
    "little",
    "special",
    "two",
    "ways",
    "check",
    "two",
    "values",
    "equal",
    "triple",
    "equals",
    "double",
    "equals",
    "difference",
    "double",
    "equals",
    "tries",
    "convert",
    "values",
    "type",
    "example",
    "code",
    "let",
    "create",
    "new",
    "lines",
    "console",
    "log",
    "let",
    "check",
    "number",
    "five",
    "equal",
    "string",
    "save",
    "tell",
    "us",
    "two",
    "values",
    "equal",
    "even",
    "though",
    "one",
    "number",
    "string",
    "double",
    "equals",
    "converts",
    "values",
    "type",
    "converts",
    "number",
    "five",
    "compares",
    "equal",
    "however",
    "good",
    "idea",
    "value",
    "number",
    "value",
    "string",
    "piece",
    "text",
    "really",
    "equal",
    "javascript",
    "always",
    "use",
    "triple",
    "equals",
    "check",
    "two",
    "values",
    "avoid",
    "conversion",
    "behavior",
    "double",
    "equals",
    "save",
    "tell",
    "us",
    "two",
    "values",
    "equal",
    "one",
    "value",
    "number",
    "value",
    "string",
    "rule",
    "also",
    "applies",
    "equal",
    "javascript",
    "always",
    "use",
    "exclamation",
    "double",
    "equals",
    "instead",
    "exclamation",
    "equals",
    "avoid",
    "conversion",
    "behavior",
    "right",
    "comparison",
    "operators",
    "order",
    "operations",
    "comparison",
    "operators",
    "lower",
    "priority",
    "math",
    "something",
    "like",
    "5",
    "minus",
    "5",
    "would",
    "calculate",
    "5",
    "5",
    "first",
    "zero",
    "compare",
    "two",
    "numbers",
    "three",
    "greater",
    "zero",
    "save",
    "first",
    "comparison",
    "true",
    "comparison",
    "operators",
    "lower",
    "priority",
    "math",
    "operators",
    "know",
    "boolean",
    "values",
    "going",
    "combine",
    "really",
    "useful",
    "feature",
    "called",
    "statements",
    "statement",
    "lets",
    "us",
    "write",
    "multiple",
    "groups",
    "code",
    "decide",
    "code",
    "run",
    "let",
    "example",
    "create",
    "first",
    "statement",
    "going",
    "go",
    "bottom",
    "create",
    "new",
    "lines",
    "type",
    "open",
    "bracket",
    "clos",
    "bracket",
    "open",
    "curly",
    "bracket",
    "closed",
    "curly",
    "bracket",
    "round",
    "brackets",
    "going",
    "put",
    "boolean",
    "value",
    "like",
    "true",
    "curly",
    "brackets",
    "going",
    "put",
    "code",
    "run",
    "example",
    "hello",
    "way",
    "statement",
    "works",
    "boolean",
    "value",
    "true",
    "going",
    "run",
    "code",
    "curly",
    "brackets",
    "boolean",
    "value",
    "false",
    "going",
    "run",
    "code",
    "save",
    "value",
    "brackets",
    "true",
    "going",
    "run",
    "code",
    "display",
    "hello",
    "change",
    "false",
    "save",
    "run",
    "code",
    "statement",
    "lets",
    "us",
    "decide",
    "whether",
    "run",
    "code",
    "based",
    "boolean",
    "value",
    "statements",
    "another",
    "useful",
    "feature",
    "called",
    "else",
    "let",
    "go",
    "end",
    "statement",
    "type",
    "else",
    "open",
    "curly",
    "bracket",
    "close",
    "curly",
    "bracket",
    "inside",
    "curly",
    "brackets",
    "going",
    "put",
    "different",
    "code",
    "like",
    "else",
    "way",
    "else",
    "works",
    "boolean",
    "value",
    "true",
    "computer",
    "run",
    "code",
    "otherwise",
    "run",
    "code",
    "inside",
    "else",
    "let",
    "give",
    "try",
    "change",
    "boolean",
    "value",
    "true",
    "save",
    "true",
    "run",
    "code",
    "display",
    "hello",
    "boolean",
    "value",
    "false",
    "save",
    "false",
    "run",
    "code",
    "run",
    "code",
    "inside",
    "else",
    "display",
    "else",
    "using",
    "else",
    "write",
    "two",
    "groups",
    "code",
    "decide",
    "code",
    "run",
    "let",
    "practical",
    "example",
    "going",
    "write",
    "code",
    "check",
    "someone",
    "old",
    "enough",
    "drive",
    "let",
    "go",
    "bottom",
    "create",
    "new",
    "lines",
    "going",
    "type",
    "brackets",
    "curly",
    "brackets",
    "inside",
    "going",
    "compare",
    "two",
    "numbers",
    "first",
    "number",
    "person",
    "age",
    "let",
    "pretend",
    "person",
    "30",
    "years",
    "old",
    "going",
    "type",
    "30",
    "going",
    "check",
    "age",
    "greater",
    "equal",
    "legal",
    "driving",
    "age",
    "let",
    "pretend",
    "legal",
    "driving",
    "age",
    "16",
    "notice",
    "brackets",
    "put",
    "boolean",
    "value",
    "put",
    "code",
    "results",
    "boolean",
    "value",
    "comparison",
    "results",
    "boolean",
    "value",
    "true",
    "means",
    "computer",
    "run",
    "code",
    "curly",
    "brackets",
    "let",
    "type",
    "console",
    "log",
    "drive",
    "true",
    "let",
    "run",
    "different",
    "code",
    "bottom",
    "type",
    "else",
    "curly",
    "brackets",
    "inside",
    "brackets",
    "type",
    "canot",
    "drive",
    "let",
    "save",
    "tell",
    "person",
    "30",
    "years",
    "old",
    "drive",
    "go",
    "back",
    "change",
    "person",
    "15",
    "years",
    "old",
    "save",
    "comparison",
    "result",
    "false",
    "display",
    "drive",
    "use",
    "statements",
    "write",
    "multiple",
    "groups",
    "code",
    "different",
    "situations",
    "decide",
    "cod",
    "code",
    "run",
    "let",
    "learn",
    "syntax",
    "rules",
    "statements",
    "create",
    "statement",
    "type",
    "round",
    "brackets",
    "boolean",
    "value",
    "inside",
    "called",
    "condition",
    "condition",
    "true",
    "run",
    "code",
    "inside",
    "curly",
    "brackets",
    "also",
    "add",
    "else",
    "statement",
    "code",
    "run",
    "condition",
    "false",
    "else",
    "statement",
    "optional",
    "one",
    "curly",
    "brackets",
    "code",
    "inside",
    "called",
    "branches",
    "like",
    "tree",
    "branch",
    "code",
    "splitting",
    "two",
    "directions",
    "either",
    "run",
    "code",
    "run",
    "code",
    "one",
    "thing",
    "know",
    "branch",
    "one",
    "line",
    "code",
    "curly",
    "brackets",
    "actually",
    "optional",
    "delete",
    "code",
    "still",
    "work",
    "however",
    "one",
    "line",
    "code",
    "branch",
    "example",
    "add",
    "another",
    "line",
    "congrats",
    "branch",
    "two",
    "lines",
    "code",
    "curly",
    "brackets",
    "mandatory",
    "add",
    "back",
    "going",
    "learn",
    "another",
    "feature",
    "statements",
    "one",
    "condition",
    "example",
    "going",
    "go",
    "end",
    "branch",
    "type",
    "else",
    "brackets",
    "curly",
    "brackets",
    "else",
    "lets",
    "us",
    "add",
    "another",
    "branch",
    "statement",
    "round",
    "brackets",
    "add",
    "another",
    "condition",
    "example",
    "person",
    "almost",
    "old",
    "enough",
    "drive",
    "let",
    "display",
    "different",
    "message",
    "inside",
    "condition",
    "let",
    "check",
    "person",
    "age",
    "15",
    "greater",
    "equal",
    "14",
    "checking",
    "almost",
    "old",
    "enough",
    "drive",
    "inside",
    "curly",
    "brackets",
    "going",
    "display",
    "different",
    "message",
    "almost",
    "way",
    "works",
    "statement",
    "checks",
    "condition",
    "one",
    "one",
    "first",
    "checks",
    "true",
    "run",
    "branch",
    "checks",
    "true",
    "run",
    "branch",
    "none",
    "conditions",
    "true",
    "run",
    "else",
    "branch",
    "condition",
    "false",
    "going",
    "run",
    "code",
    "second",
    "condition",
    "true",
    "going",
    "run",
    "code",
    "save",
    "display",
    "almost",
    "console",
    "using",
    "else",
    "branches",
    "add",
    "many",
    "conditions",
    "want",
    "statement",
    "next",
    "thing",
    "going",
    "learn",
    "combine",
    "statements",
    "variables",
    "previous",
    "lesson",
    "example",
    "wrote",
    "person",
    "age",
    "two",
    "times",
    "actually",
    "save",
    "age",
    "variable",
    "reuse",
    "value",
    "statement",
    "let",
    "create",
    "variable",
    "using",
    "const",
    "let",
    "name",
    "variable",
    "h",
    "make",
    "equal",
    "15",
    "remember",
    "best",
    "practice",
    "creating",
    "variable",
    "use",
    "const",
    "default",
    "use",
    "let",
    "going",
    "change",
    "value",
    "later",
    "saved",
    "number",
    "variable",
    "use",
    "variable",
    "inside",
    "statement",
    "replace",
    "15",
    "age",
    "well",
    "age",
    "take",
    "whatever",
    "value",
    "inside",
    "variable",
    "substitute",
    "code",
    "save",
    "statement",
    "works",
    "way",
    "run",
    "line",
    "okay",
    "ready",
    "use",
    "booleans",
    "statements",
    "project",
    "going",
    "build",
    "rock",
    "paper",
    "scissors",
    "gate",
    "g",
    "first",
    "let",
    "take",
    "look",
    "project",
    "going",
    "go",
    "browser",
    "top",
    "create",
    "new",
    "tab",
    "going",
    "type",
    "superimple",
    "dodev",
    "sl",
    "projects",
    "sl",
    "booleans",
    "press",
    "enter",
    "see",
    "simple",
    "version",
    "rock",
    "paper",
    "scissors",
    "game",
    "click",
    "link",
    "take",
    "us",
    "final",
    "version",
    "game",
    "game",
    "pick",
    "move",
    "computer",
    "pick",
    "random",
    "move",
    "show",
    "us",
    "result",
    "also",
    "score",
    "many",
    "times",
    "lost",
    "tied",
    "going",
    "build",
    "go",
    "course",
    "let",
    "go",
    "back",
    "going",
    "start",
    "building",
    "simple",
    "version",
    "game",
    "simple",
    "version",
    "works",
    "click",
    "one",
    "buttons",
    "pick",
    "move",
    "let",
    "pick",
    "rock",
    "computer",
    "randomly",
    "pick",
    "move",
    "case",
    "paper",
    "might",
    "different",
    "compare",
    "two",
    "moves",
    "display",
    "results",
    "popup",
    "rules",
    "rock",
    "paper",
    "scissors",
    "rock",
    "beats",
    "scissors",
    "paper",
    "beats",
    "rock",
    "scissors",
    "beats",
    "paper",
    "let",
    "press",
    "okay",
    "get",
    "started",
    "project",
    "first",
    "create",
    "new",
    "html",
    "file",
    "project",
    "let",
    "go",
    "code",
    "editor",
    "click",
    "create",
    "new",
    "file",
    "going",
    "name",
    "file",
    "html",
    "press",
    "enter",
    "next",
    "let",
    "copy",
    "code",
    "booleans",
    "html",
    "new",
    "file",
    "open",
    "control",
    "command",
    "select",
    "code",
    "right",
    "click",
    "copy",
    "right",
    "click",
    "paste",
    "let",
    "close",
    "prepare",
    "file",
    "change",
    "rock",
    "paper",
    "scissors",
    "remove",
    "javascript",
    "code",
    "finally",
    "let",
    "save",
    "open",
    "file",
    "browser",
    "right",
    "clicking",
    "open",
    "live",
    "server",
    "let",
    "take",
    "look",
    "project",
    "going",
    "start",
    "creating",
    "text",
    "first",
    "text",
    "final",
    "version",
    "project",
    "html",
    "going",
    "create",
    "paragraph",
    "element",
    "text",
    "less",
    "p",
    "greater",
    "closing",
    "tag",
    "less",
    "greater",
    "inside",
    "paragraph",
    "going",
    "text",
    "rock",
    "paper",
    "scissors",
    "next",
    "let",
    "create",
    "buttons",
    "go",
    "html",
    "create",
    "button",
    "inside",
    "first",
    "button",
    "text",
    "rock",
    "let",
    "create",
    "another",
    "button",
    "one",
    "paper",
    "create",
    "last",
    "button",
    "one",
    "scissors",
    "let",
    "save",
    "check",
    "new",
    "tab",
    "created",
    "elements",
    "need",
    "next",
    "let",
    "make",
    "elements",
    "interactive",
    "javas",
    "javascript",
    "writing",
    "javascript",
    "good",
    "strategy",
    "think",
    "steps",
    "need",
    "convert",
    "steps",
    "code",
    "click",
    "button",
    "first",
    "step",
    "computer",
    "randomly",
    "select",
    "move",
    "going",
    "compare",
    "moves",
    "get",
    "result",
    "finally",
    "display",
    "result",
    "popup",
    "way",
    "called",
    "algorithm",
    "algorithm",
    "set",
    "steps",
    "complete",
    "delete",
    "task",
    "solve",
    "problem",
    "know",
    "steps",
    "need",
    "going",
    "convert",
    "steps",
    "algorithm",
    "code",
    "first",
    "going",
    "run",
    "javascript",
    "click",
    "buttons",
    "let",
    "use",
    "onclick",
    "attribute",
    "go",
    "opening",
    "tag",
    "button",
    "type",
    "onclick",
    "equals",
    "double",
    "quotes",
    "inside",
    "double",
    "quotes",
    "add",
    "javascript",
    "figure",
    "randomly",
    "select",
    "move",
    "computer",
    "need",
    "learn",
    "new",
    "piece",
    "javascript",
    "code",
    "going",
    "type",
    "capital",
    "open",
    "bracket",
    "close",
    "bracket",
    "generates",
    "random",
    "number",
    "0o",
    "1",
    "console",
    "log",
    "save",
    "click",
    "button",
    "check",
    "console",
    "inspect",
    "console",
    "display",
    "random",
    "number",
    "z",
    "1",
    "click",
    "button",
    "generate",
    "different",
    "random",
    "number",
    "every",
    "time",
    "run",
    "mth",
    "random",
    "generates",
    "different",
    "random",
    "number",
    "0",
    "one",
    "precise",
    "actually",
    "generates",
    "number",
    "greater",
    "equal",
    "zero",
    "less",
    "one",
    "let",
    "save",
    "random",
    "number",
    "variable",
    "use",
    "later",
    "replace",
    "const",
    "variable",
    "name",
    "let",
    "name",
    "random",
    "capital",
    "n",
    "number",
    "equals",
    "saved",
    "random",
    "number",
    "inside",
    "variable",
    "next",
    "need",
    "way",
    "convert",
    "random",
    "number",
    "move",
    "like",
    "rock",
    "paper",
    "scissors",
    "let",
    "imagine",
    "space",
    "0",
    "1",
    "divide",
    "space",
    "three",
    "equal",
    "parts",
    "part",
    "represents",
    "move",
    "generate",
    "random",
    "number",
    "0",
    "move",
    "rock",
    "move",
    "paper",
    "one",
    "move",
    "scissors",
    "convert",
    "random",
    "number",
    "move",
    "give",
    "computer",
    "equal",
    "chance",
    "picking",
    "rock",
    "paper",
    "scissors",
    "let",
    "convert",
    "steps",
    "code",
    "statement",
    "perfect",
    "solution",
    "already",
    "looks",
    "like",
    "statement",
    "onclick",
    "attribute",
    "let",
    "add",
    "new",
    "lines",
    "type",
    "brackets",
    "curly",
    "brackets",
    "first",
    "condition",
    "going",
    "check",
    "random",
    "number",
    "0",
    "let",
    "check",
    "random",
    "number",
    "greater",
    "equal",
    "zero",
    "case",
    "also",
    "need",
    "check",
    "random",
    "number",
    "less",
    "checking",
    "number",
    "0",
    "check",
    "two",
    "comparisons",
    "true",
    "going",
    "learn",
    "another",
    "type",
    "operator",
    "javascript",
    "called",
    "logical",
    "operators",
    "logical",
    "operators",
    "let",
    "us",
    "combine",
    "boolean",
    "values",
    "need",
    "let",
    "go",
    "back",
    "booleans",
    "html",
    "going",
    "learn",
    "logical",
    "operators",
    "first",
    "let",
    "open",
    "tab",
    "file",
    "going",
    "comment",
    "previous",
    "code",
    "console",
    "get",
    "messy",
    "slashstar",
    "bottom",
    "star",
    "slash",
    "let",
    "create",
    "new",
    "lines",
    "first",
    "logical",
    "operator",
    "going",
    "learn",
    "called",
    "operator",
    "let",
    "type",
    "console",
    "log",
    "boolean",
    "value",
    "true",
    "another",
    "boolean",
    "value",
    "true",
    "operator",
    "checks",
    "two",
    "boolean",
    "values",
    "true",
    "checks",
    "left",
    "side",
    "true",
    "right",
    "side",
    "true",
    "called",
    "operator",
    "left",
    "side",
    "true",
    "right",
    "side",
    "also",
    "true",
    "operator",
    "result",
    "true",
    "save",
    "displays",
    "true",
    "one",
    "sides",
    "false",
    "example",
    "change",
    "false",
    "let",
    "check",
    "left",
    "side",
    "right",
    "side",
    "true",
    "case",
    "result",
    "false",
    "save",
    "displays",
    "false",
    "logical",
    "operator",
    "checks",
    "left",
    "side",
    "true",
    "right",
    "side",
    "also",
    "true",
    "exactly",
    "need",
    "project",
    "example",
    "let",
    "create",
    "new",
    "line",
    "type",
    "let",
    "say",
    "generated",
    "random",
    "number",
    "like",
    "want",
    "check",
    "0",
    "greater",
    "equal",
    "0",
    "also",
    "going",
    "check",
    "less",
    "using",
    "logical",
    "operator",
    "check",
    "left",
    "side",
    "true",
    "right",
    "side",
    "also",
    "true",
    "example",
    "sides",
    "true",
    "0",
    "save",
    "whole",
    "thing",
    "display",
    "true",
    "order",
    "operations",
    "logical",
    "operators",
    "like",
    "lower",
    "priority",
    "math",
    "comparisons",
    "example",
    "calculate",
    "math",
    "first",
    "calculate",
    "comparison",
    "left",
    "comparison",
    "right",
    "end",
    "operator",
    "checks",
    "sides",
    "result",
    "true",
    "let",
    "use",
    "operator",
    "project",
    "let",
    "go",
    "back",
    "file",
    "project",
    "inside",
    "first",
    "condition",
    "going",
    "check",
    "random",
    "number",
    "greater",
    "equal",
    "zero",
    "time",
    "random",
    "number",
    "less",
    "check",
    "number",
    "0",
    "case",
    "computer",
    "pick",
    "rock",
    "curly",
    "brackets",
    "let",
    "type",
    "con",
    "cons",
    "log",
    "rock",
    "let",
    "get",
    "practice",
    "create",
    "two",
    "branches",
    "picking",
    "paper",
    "scissors",
    "feel",
    "free",
    "pause",
    "video",
    "want",
    "try",
    "first",
    "going",
    "type",
    "else",
    "add",
    "another",
    "branch",
    "brackets",
    "curly",
    "brackets",
    "condition",
    "going",
    "check",
    "random",
    "number",
    "greater",
    "equal",
    "random",
    "number",
    "less",
    "random",
    "number",
    "inside",
    "going",
    "console",
    "log",
    "paper",
    "finally",
    "let",
    "create",
    "another",
    "branch",
    "using",
    "else",
    "random",
    "number",
    "greater",
    "equal",
    "random",
    "number",
    "less",
    "1",
    "scissors",
    "save",
    "go",
    "back",
    "rock",
    "paper",
    "scissors",
    "tab",
    "click",
    "rock",
    "button",
    "times",
    "pick",
    "random",
    "moves",
    "computer",
    "generate",
    "computer",
    "move",
    "one",
    "thing",
    "want",
    "point",
    "use",
    "less",
    "comparison",
    "instead",
    "less",
    "equal",
    "comparisons",
    "overlap",
    "continue",
    "project",
    "going",
    "learn",
    "two",
    "logical",
    "operators",
    "use",
    "let",
    "go",
    "back",
    "booleans",
    "html",
    "let",
    "also",
    "open",
    "tab",
    "file",
    "next",
    "logical",
    "operator",
    "called",
    "operator",
    "example",
    "let",
    "type",
    "new",
    "lines",
    "type",
    "true",
    "false",
    "logical",
    "operator",
    "checks",
    "least",
    "one",
    "side",
    "true",
    "checks",
    "left",
    "side",
    "true",
    "right",
    "side",
    "true",
    "called",
    "operator",
    "one",
    "sides",
    "true",
    "operator",
    "result",
    "true",
    "save",
    "displays",
    "true",
    "sides",
    "true",
    "also",
    "result",
    "true",
    "least",
    "one",
    "side",
    "true",
    "last",
    "logical",
    "operator",
    "going",
    "learn",
    "called",
    "operator",
    "example",
    "let",
    "create",
    "new",
    "line",
    "type",
    "console",
    "log",
    "exclamation",
    "true",
    "exclamation",
    "called",
    "operator",
    "operator",
    "uses",
    "one",
    "boolean",
    "value",
    "flips",
    "opposite",
    "value",
    "value",
    "true",
    "operator",
    "flip",
    "false",
    "save",
    "result",
    "false",
    "think",
    "say",
    "something",
    "true",
    "thing",
    "saying",
    "false",
    "called",
    "operator",
    "change",
    "value",
    "false",
    "operator",
    "flip",
    "true",
    "save",
    "result",
    "true",
    "logical",
    "operators",
    "need",
    "use",
    "project",
    "right",
    "leave",
    "exercises",
    "end",
    "lesson",
    "let",
    "go",
    "back",
    "continue",
    "project",
    "let",
    "open",
    "code",
    "open",
    "tab",
    "next",
    "step",
    "compare",
    "computer",
    "move",
    "move",
    "rock",
    "first",
    "let",
    "save",
    "computer",
    "move",
    "variable",
    "compare",
    "later",
    "instead",
    "going",
    "create",
    "variable",
    "const",
    "computer",
    "capital",
    "move",
    "make",
    "equal",
    "string",
    "rock",
    "thing",
    "const",
    "computer",
    "move",
    "equals",
    "paper",
    "const",
    "comp",
    "futter",
    "move",
    "equals",
    "scissors",
    "bottom",
    "let",
    "computer",
    "move",
    "variable",
    "make",
    "sure",
    "worked",
    "save",
    "click",
    "rock",
    "button",
    "unfortunately",
    "gives",
    "us",
    "error",
    "telling",
    "us",
    "computer",
    "move",
    "defined",
    "even",
    "though",
    "created",
    "right",
    "happening",
    "statements",
    "special",
    "feature",
    "create",
    "something",
    "called",
    "scope",
    "scope",
    "limits",
    "variable",
    "exists",
    "basically",
    "whenever",
    "curly",
    "brackets",
    "like",
    "variable",
    "create",
    "inside",
    "curly",
    "brackets",
    "exist",
    "inside",
    "curly",
    "brackets",
    "ca",
    "use",
    "variables",
    "outside",
    "curly",
    "brackets",
    "called",
    "scope",
    "scopes",
    "feature",
    "many",
    "programming",
    "languages",
    "help",
    "us",
    "avoid",
    "naming",
    "conflicts",
    "example",
    "create",
    "variable",
    "called",
    "random",
    "number",
    "equals",
    "create",
    "scope",
    "delete",
    "curly",
    "brackets",
    "variable",
    "name",
    "conflict",
    "variable",
    "name",
    "ca",
    "two",
    "variables",
    "name",
    "imagine",
    "scope",
    "hundreds",
    "even",
    "thousands",
    "lines",
    "code",
    "would",
    "quickly",
    "start",
    "run",
    "variable",
    "names",
    "creating",
    "new",
    "scope",
    "variable",
    "names",
    "inside",
    "scope",
    "exist",
    "curly",
    "brackets",
    "wo",
    "affect",
    "anything",
    "outside",
    "code",
    "scopes",
    "help",
    "us",
    "avoid",
    "naming",
    "conflicts",
    "okay",
    "delete",
    "example",
    "learn",
    "access",
    "variable",
    "outside",
    "scope",
    "access",
    "variable",
    "outside",
    "statement",
    "create",
    "variable",
    "outside",
    "statement",
    "create",
    "variable",
    "const",
    "computer",
    "move",
    "let",
    "make",
    "equal",
    "empty",
    "string",
    "variable",
    "created",
    "inside",
    "curly",
    "brackets",
    "accessible",
    "code",
    "inside",
    "onclick",
    "attribute",
    "including",
    "inside",
    "statement",
    "inside",
    "statement",
    "instead",
    "creating",
    "new",
    "variable",
    "going",
    "save",
    "move",
    "inside",
    "variable",
    "access",
    "variable",
    "anywhere",
    "else",
    "code",
    "instead",
    "using",
    "const",
    "going",
    "reassign",
    "computer",
    "move",
    "going",
    "move",
    "well",
    "well",
    "remember",
    "reassign",
    "variable",
    "switch",
    "const",
    "let",
    "save",
    "click",
    "rock",
    "button",
    "able",
    "computer",
    "move",
    "computer",
    "move",
    "longer",
    "inside",
    "scope",
    "access",
    "line",
    "code",
    "scope",
    "works",
    "variable",
    "create",
    "inside",
    "curly",
    "brackets",
    "exist",
    "inside",
    "curly",
    "brackets",
    "remember",
    "previous",
    "lesson",
    "learned",
    "third",
    "way",
    "creating",
    "variables",
    "called",
    "var",
    "issue",
    "var",
    "really",
    "follow",
    "rules",
    "scope",
    "example",
    "create",
    "variable",
    "var",
    "like",
    "var",
    "random",
    "number",
    "equals",
    "variable",
    "conflict",
    "variable",
    "name",
    "even",
    "though",
    "inside",
    "scope",
    "use",
    "var",
    "anymore",
    "use",
    "const",
    "let",
    "var",
    "really",
    "follow",
    "rules",
    "scope",
    "remove",
    "move",
    "next",
    "step",
    "generated",
    "random",
    "move",
    "computer",
    "compare",
    "move",
    "rock",
    "computer",
    "move",
    "get",
    "result",
    "see",
    "wins",
    "use",
    "another",
    "statement",
    "bottom",
    "let",
    "type",
    "brackets",
    "curly",
    "brackets",
    "inside",
    "condition",
    "let",
    "check",
    "computer",
    "move",
    "equal",
    "rock",
    "remember",
    "javascript",
    "always",
    "use",
    "triple",
    "equals",
    "instead",
    "double",
    "equals",
    "avoid",
    "conversion",
    "behavior",
    "computer",
    "move",
    "rock",
    "move",
    "rock",
    "inside",
    "curly",
    "brackets",
    "result",
    "going",
    "tie",
    "let",
    "save",
    "string",
    "variable",
    "use",
    "later",
    "situation",
    "want",
    "create",
    "variable",
    "inside",
    "exists",
    "scope",
    "curly",
    "brackets",
    "instead",
    "going",
    "create",
    "variable",
    "outside",
    "statement",
    "use",
    "let",
    "create",
    "variable",
    "going",
    "reassign",
    "statement",
    "let",
    "name",
    "variable",
    "result",
    "make",
    "equal",
    "empty",
    "string",
    "top",
    "statement",
    "save",
    "result",
    "variable",
    "result",
    "equals",
    "tie",
    "let",
    "create",
    "branches",
    "statement",
    "add",
    "else",
    "brackets",
    "curly",
    "brackets",
    "check",
    "computer",
    "move",
    "equal",
    "paper",
    "time",
    "computer",
    "move",
    "paper",
    "picked",
    "rock",
    "lose",
    "result",
    "equal",
    "lose",
    "finally",
    "add",
    "another",
    "else",
    "brackets",
    "curly",
    "brackets",
    "check",
    "computer",
    "move",
    "equal",
    "scissors",
    "computer",
    "picked",
    "scissors",
    "pick",
    "rock",
    "result",
    "win",
    "compare",
    "move",
    "computer",
    "random",
    "move",
    "using",
    "statement",
    "last",
    "step",
    "display",
    "result",
    "popup",
    "bottom",
    "let",
    "create",
    "popup",
    "using",
    "alert",
    "open",
    "bracket",
    "close",
    "bracket",
    "let",
    "go",
    "back",
    "super",
    "simple",
    "dev",
    "see",
    "message",
    "popup",
    "click",
    "popup",
    "shows",
    "move",
    "computer",
    "move",
    "result",
    "actually",
    "copy",
    "rightclick",
    "copy",
    "right",
    "click",
    "paste",
    "obviously",
    "computer",
    "going",
    "pick",
    "move",
    "every",
    "time",
    "going",
    "result",
    "every",
    "time",
    "instead",
    "want",
    "insert",
    "computer",
    "move",
    "want",
    "insert",
    "result",
    "want",
    "insert",
    "values",
    "going",
    "turn",
    "template",
    "string",
    "using",
    "back",
    "ticks",
    "instead",
    "paper",
    "going",
    "insert",
    "value",
    "using",
    "dollar",
    "curly",
    "brackets",
    "going",
    "insert",
    "variable",
    "computer",
    "move",
    "instead",
    "text",
    "every",
    "time",
    "going",
    "insert",
    "variable",
    "result",
    "save",
    "click",
    "okay",
    "close",
    "go",
    "back",
    "tab",
    "click",
    "rock",
    "button",
    "going",
    "pick",
    "rock",
    "computer",
    "pick",
    "random",
    "move",
    "show",
    "us",
    "result",
    "popup",
    "create",
    "simple",
    "version",
    "rock",
    "paper",
    "scissors",
    "code",
    "things",
    "step",
    "step",
    "first",
    "generated",
    "random",
    "number",
    "converted",
    "move",
    "computer",
    "compared",
    "move",
    "computer",
    "move",
    "displayed",
    "result",
    "popup",
    "see",
    "writing",
    "javascript",
    "first",
    "figure",
    "steps",
    "need",
    "called",
    "algorithm",
    "convert",
    "steps",
    "algorithm",
    "code",
    "actually",
    "remove",
    "need",
    "anymore",
    "last",
    "step",
    "make",
    "buttons",
    "interactive",
    "feel",
    "free",
    "pause",
    "video",
    "want",
    "try",
    "first",
    "paper",
    "button",
    "let",
    "add",
    "new",
    "lines",
    "make",
    "little",
    "easier",
    "read",
    "add",
    "onclick",
    "attribute",
    "inside",
    "actually",
    "make",
    "copy",
    "javascript",
    "wrote",
    "select",
    "write",
    "click",
    "copy",
    "right",
    "click",
    "paste",
    "formatting",
    "look",
    "right",
    "select",
    "lines",
    "press",
    "tab",
    "add",
    "indents",
    "formatting",
    "looks",
    "good",
    "one",
    "thing",
    "change",
    "picked",
    "paper",
    "result",
    "going",
    "different",
    "computer",
    "picks",
    "rock",
    "pick",
    "paper",
    "means",
    "win",
    "computer",
    "picks",
    "paper",
    "means",
    "tie",
    "computer",
    "picks",
    "scissors",
    "means",
    "lose",
    "also",
    "change",
    "pick",
    "rock",
    "paper",
    "last",
    "step",
    "make",
    "scissors",
    "button",
    "interactive",
    "onclick",
    "equals",
    "double",
    "quotes",
    "make",
    "copy",
    "code",
    "already",
    "write",
    "click",
    "paste",
    "select",
    "code",
    "need",
    "fix",
    "formatting",
    "press",
    "tab",
    "pick",
    "scissors",
    "computer",
    "picks",
    "rock",
    "result",
    "lose",
    "computer",
    "picks",
    "paper",
    "result",
    "win",
    "computer",
    "also",
    "picks",
    "scissors",
    "result",
    "tie",
    "change",
    "pick",
    "rock",
    "scissors",
    "save",
    "try",
    "game",
    "click",
    "rock",
    "going",
    "pick",
    "rock",
    "computer",
    "picks",
    "random",
    "move",
    "show",
    "us",
    "result",
    "let",
    "press",
    "okay",
    "try",
    "paper",
    "also",
    "works",
    "correctly",
    "let",
    "press",
    "okay",
    "click",
    "scissors",
    "also",
    "works",
    "correctly",
    "finished",
    "creating",
    "simple",
    "version",
    "rock",
    "rock",
    "paper",
    "scissors",
    "game",
    "rest",
    "lesson",
    "going",
    "learn",
    "details",
    "booleans",
    "statements",
    "let",
    "go",
    "back",
    "booleans",
    "html",
    "open",
    "tab",
    "file",
    "let",
    "comment",
    "previous",
    "code",
    "using",
    "slashstar",
    "star",
    "slash",
    "create",
    "new",
    "lines",
    "next",
    "thing",
    "going",
    "learn",
    "called",
    "truthy",
    "falsy",
    "values",
    "statements",
    "work",
    "boolean",
    "values",
    "like",
    "true",
    "false",
    "actually",
    "work",
    "type",
    "value",
    "including",
    "numbers",
    "strings",
    "example",
    "let",
    "type",
    "brackets",
    "curly",
    "brackets",
    "inside",
    "condition",
    "instead",
    "putting",
    "boolean",
    "value",
    "going",
    "put",
    "number",
    "like",
    "five",
    "inside",
    "curly",
    "brackets",
    "let",
    "string",
    "truthy",
    "save",
    "number",
    "five",
    "behaves",
    "like",
    "true",
    "causes",
    "statement",
    "run",
    "code",
    "call",
    "value",
    "truthy",
    "value",
    "behaves",
    "like",
    "true",
    "let",
    "change",
    "value",
    "different",
    "number",
    "zero",
    "say",
    "number",
    "zero",
    "behaves",
    "like",
    "false",
    "causes",
    "statement",
    "run",
    "code",
    "call",
    "value",
    "zero",
    "falsy",
    "value",
    "behaves",
    "like",
    "false",
    "know",
    "value",
    "truthy",
    "falsy",
    "javascript",
    "list",
    "falsy",
    "values",
    "false",
    "number",
    "zero",
    "empty",
    "string",
    "nan",
    "undefined",
    "null",
    "value",
    "list",
    "truthy",
    "value",
    "use",
    "truthy",
    "falsy",
    "values",
    "one",
    "way",
    "use",
    "like",
    "shortcut",
    "code",
    "example",
    "let",
    "create",
    "variable",
    "bottom",
    "using",
    "const",
    "let",
    "call",
    "cart",
    "quantity",
    "make",
    "equal",
    "five",
    "next",
    "let",
    "create",
    "statement",
    "brackets",
    "curly",
    "brackets",
    "inside",
    "curly",
    "brackets",
    "let",
    "type",
    "string",
    "cart",
    "products",
    "let",
    "say",
    "want",
    "display",
    "message",
    "cart",
    "products",
    "usually",
    "inside",
    "condition",
    "would",
    "check",
    "cart",
    "quantity",
    "greater",
    "zero",
    "instead",
    "comparison",
    "actually",
    "type",
    "cart",
    "quantity",
    "behave",
    "way",
    "card",
    "quantity",
    "zero",
    "behave",
    "like",
    "true",
    "card",
    "quantity",
    "zero",
    "behave",
    "like",
    "false",
    "card",
    "quantity",
    "five",
    "truthy",
    "value",
    "save",
    "caus",
    "statement",
    "run",
    "code",
    "see",
    "instead",
    "comparisons",
    "use",
    "truthy",
    "falsey",
    "values",
    "shortcuts",
    "truthy",
    "falsy",
    "values",
    "also",
    "work",
    "logical",
    "operators",
    "example",
    "operator",
    "number",
    "zero",
    "zero",
    "falsy",
    "value",
    "behaves",
    "like",
    "false",
    "operator",
    "flip",
    "true",
    "save",
    "display",
    "true",
    "understand",
    "truthy",
    "falsy",
    "values",
    "let",
    "go",
    "list",
    "falsy",
    "values",
    "learned",
    "yet",
    "already",
    "learned",
    "false",
    "zero",
    "empty",
    "string",
    "next",
    "falsy",
    "value",
    "nan",
    "means",
    "number",
    "get",
    "nan",
    "invalid",
    "math",
    "example",
    "bottom",
    "let",
    "type",
    "string",
    "text",
    "divided",
    "number",
    "five",
    "obviously",
    "valid",
    "math",
    "save",
    "javascript",
    "tell",
    "us",
    "result",
    "calculation",
    "number",
    "nan",
    "next",
    "falsy",
    "value",
    "undefined",
    "undefined",
    "represents",
    "something",
    "value",
    "example",
    "bottom",
    "create",
    "variable",
    "let",
    "variable",
    "one",
    "give",
    "value",
    "console",
    "log",
    "variable",
    "save",
    "show",
    "us",
    "variable",
    "one",
    "contains",
    "value",
    "undefined",
    "undefined",
    "represents",
    "variable",
    "value",
    "one",
    "thing",
    "note",
    "undefined",
    "use",
    "syntax",
    "let",
    "ca",
    "use",
    "const",
    "really",
    "want",
    "use",
    "const",
    "type",
    "equals",
    "undefined",
    "directly",
    "last",
    "faly",
    "value",
    "null",
    "need",
    "extra",
    "knowledge",
    "understand",
    "null",
    "learn",
    "null",
    "later",
    "course",
    "last",
    "thing",
    "going",
    "learn",
    "lesson",
    "shortcuts",
    "statements",
    "called",
    "turner",
    "operator",
    "guard",
    "operator",
    "default",
    "operator",
    "first",
    "let",
    "comment",
    "code",
    "console",
    "get",
    "messy",
    "sl",
    "star",
    "bottom",
    "star",
    "slash",
    "let",
    "scroll",
    "start",
    "learning",
    "turner",
    "operator",
    "going",
    "type",
    "boolean",
    "value",
    "like",
    "true",
    "question",
    "mark",
    "another",
    "value",
    "example",
    "string",
    "truthy",
    "colon",
    "another",
    "value",
    "like",
    "string",
    "falsy",
    "turner",
    "operator",
    "similar",
    "else",
    "statement",
    "first",
    "value",
    "like",
    "condition",
    "truthy",
    "result",
    "code",
    "value",
    "question",
    "mark",
    "first",
    "value",
    "falsy",
    "result",
    "code",
    "value",
    "colon",
    "think",
    "question",
    "mark",
    "branch",
    "colon",
    "else",
    "branch",
    "sort",
    "like",
    "shortcut",
    "statement",
    "like",
    "advantage",
    "turner",
    "operator",
    "statement",
    "save",
    "tary",
    "operator",
    "variable",
    "front",
    "const",
    "result",
    "equals",
    "result",
    "save",
    "first",
    "value",
    "true",
    "value",
    "question",
    "mark",
    "gets",
    "saved",
    "variable",
    "always",
    "use",
    "truthy",
    "falsy",
    "values",
    "instead",
    "true",
    "false",
    "change",
    "first",
    "value",
    "falsy",
    "value",
    "like",
    "zero",
    "cause",
    "value",
    "colon",
    "get",
    "saved",
    "inside",
    "variable",
    "save",
    "exactly",
    "happens",
    "turnery",
    "operator",
    "sort",
    "shortcut",
    "else",
    "statement",
    "like",
    "next",
    "shortcut",
    "called",
    "guard",
    "operator",
    "earlier",
    "lesson",
    "learned",
    "operator",
    "checks",
    "two",
    "sides",
    "truthy",
    "operator",
    "special",
    "feature",
    "let",
    "say",
    "operator",
    "left",
    "side",
    "false",
    "situation",
    "already",
    "know",
    "impossible",
    "sides",
    "truthy",
    "even",
    "need",
    "check",
    "right",
    "side",
    "operator",
    "actually",
    "stops",
    "early",
    "even",
    "run",
    "code",
    "right",
    "called",
    "shortcircuit",
    "evaluation",
    "example",
    "let",
    "go",
    "code",
    "create",
    "new",
    "lines",
    "type",
    "false",
    "console",
    "log",
    "hello",
    "save",
    "left",
    "side",
    "falsy",
    "operator",
    "stops",
    "early",
    "short",
    "circuits",
    "even",
    "run",
    "code",
    "right",
    "see",
    "use",
    "value",
    "left",
    "block",
    "guard",
    "code",
    "right",
    "use",
    "operator",
    "like",
    "call",
    "guard",
    "operator",
    "sort",
    "like",
    "shortcut",
    "statement",
    "like",
    "like",
    "turner",
    "operator",
    "save",
    "guard",
    "operator",
    "variable",
    "example",
    "let",
    "create",
    "variable",
    "const",
    "message",
    "make",
    "equal",
    "false",
    "string",
    "hello",
    "first",
    "value",
    "falsy",
    "guard",
    "operator",
    "stop",
    "early",
    "result",
    "first",
    "value",
    "console",
    "log",
    "message",
    "save",
    "value",
    "f",
    "false",
    "saved",
    "inside",
    "variable",
    "let",
    "change",
    "value",
    "truthy",
    "value",
    "like",
    "number",
    "five",
    "stop",
    "early",
    "give",
    "us",
    "second",
    "value",
    "result",
    "save",
    "string",
    "hello",
    "saved",
    "inside",
    "variable",
    "sort",
    "like",
    "shortcut",
    "statement",
    "like",
    "worry",
    "bit",
    "confusing",
    "shortcuts",
    "statement",
    "sort",
    "like",
    "statement",
    "write",
    "single",
    "line",
    "last",
    "shortcut",
    "called",
    "default",
    "operator",
    "similar",
    "guard",
    "operator",
    "uses",
    "earlier",
    "lesson",
    "learned",
    "operator",
    "checks",
    "least",
    "one",
    "side",
    "truthy",
    "let",
    "imagine",
    "operator",
    "left",
    "side",
    "true",
    "situation",
    "already",
    "know",
    "result",
    "operator",
    "left",
    "side",
    "already",
    "truthy",
    "even",
    "need",
    "check",
    "right",
    "side",
    "operator",
    "also",
    "stops",
    "early",
    "short",
    "circuits",
    "first",
    "value",
    "truthy",
    "example",
    "let",
    "create",
    "new",
    "lines",
    "let",
    "say",
    "final",
    "amazon",
    "project",
    "choose",
    "currency",
    "pay",
    "order",
    "let",
    "create",
    "variable",
    "const",
    "currency",
    "make",
    "equal",
    "string",
    "e",
    "euros",
    "let",
    "say",
    "choosing",
    "currency",
    "optional",
    "choose",
    "currency",
    "use",
    "default",
    "value",
    "usd",
    "united",
    "states",
    "dollars",
    "create",
    "default",
    "value",
    "go",
    "end",
    "type",
    "string",
    "usd",
    "left",
    "side",
    "truthy",
    "operator",
    "stop",
    "early",
    "result",
    "value",
    "left",
    "console",
    "log",
    "currency",
    "save",
    "display",
    "euros",
    "let",
    "say",
    "choose",
    "currency",
    "optional",
    "let",
    "go",
    "going",
    "change",
    "currency",
    "undefined",
    "left",
    "side",
    "falsy",
    "operator",
    "short",
    "circuit",
    "continue",
    "result",
    "value",
    "right",
    "save",
    "string",
    "usd",
    "saved",
    "inside",
    "currency",
    "see",
    "use",
    "operator",
    "set",
    "default",
    "value",
    "use",
    "operator",
    "like",
    "call",
    "default",
    "operator",
    "default",
    "operator",
    "sort",
    "shortcut",
    "statement",
    "like",
    "worry",
    "remember",
    "everything",
    "learned",
    "last",
    "section",
    "basically",
    "shortcuts",
    "statements",
    "use",
    "save",
    "us",
    "typing",
    "end",
    "lesson",
    "lesson",
    "learned",
    "booleans",
    "statements",
    "boolean",
    "values",
    "represent",
    "whether",
    "something",
    "true",
    "false",
    "learned",
    "use",
    "statements",
    "make",
    "decisions",
    "code",
    "learn",
    "use",
    "comparison",
    "logical",
    "operators",
    "learned",
    "algorithms",
    "created",
    "simple",
    "version",
    "rock",
    "paper",
    "scissors",
    "learned",
    "truthy",
    "falsey",
    "values",
    "learned",
    "shortcuts",
    "statements",
    "turnery",
    "operator",
    "guard",
    "operator",
    "default",
    "operator",
    "exercises",
    "help",
    "practice",
    "booleans",
    "statements",
    "lesson",
    "going",
    "learn",
    "next",
    "feature",
    "javascript",
    "called",
    "functions",
    "going",
    "use",
    "functions",
    "improve",
    "rock",
    "paper",
    "scissors",
    "project",
    "first",
    "let",
    "create",
    "new",
    "file",
    "lesson",
    "go",
    "code",
    "editor",
    "create",
    "new",
    "file",
    "let",
    "name",
    "file",
    "functions",
    "html",
    "press",
    "enter",
    "next",
    "let",
    "copy",
    "booleans",
    "html",
    "functions",
    "html",
    "click",
    "file",
    "select",
    "code",
    "using",
    "control",
    "command",
    "right",
    "click",
    "copy",
    "rightclick",
    "paste",
    "hide",
    "files",
    "prepare",
    "file",
    "lesson",
    "top",
    "change",
    "title",
    "functions",
    "remove",
    "code",
    "script",
    "element",
    "let",
    "save",
    "open",
    "file",
    "live",
    "server",
    "open",
    "live",
    "server",
    "going",
    "open",
    "console",
    "well",
    "right",
    "click",
    "inspect",
    "click",
    "console",
    "finally",
    "close",
    "previous",
    "tabs",
    "well",
    "previous",
    "code",
    "okay",
    "ready",
    "learn",
    "functions",
    "first",
    "function",
    "function",
    "lets",
    "us",
    "reuse",
    "code",
    "let",
    "create",
    "first",
    "function",
    "going",
    "go",
    "script",
    "element",
    "type",
    "word",
    "function",
    "space",
    "creates",
    "new",
    "function",
    "going",
    "give",
    "name",
    "function",
    "name",
    "almost",
    "anything",
    "want",
    "let",
    "name",
    "function",
    "one",
    "going",
    "type",
    "round",
    "brackets",
    "curly",
    "brackets",
    "inside",
    "curly",
    "brackets",
    "going",
    "create",
    "new",
    "line",
    "going",
    "type",
    "code",
    "string",
    "hello",
    "also",
    "type",
    "2",
    "2",
    "save",
    "creates",
    "function",
    "let",
    "learn",
    "use",
    "function",
    "going",
    "type",
    "bottom",
    "function",
    "name",
    "function",
    "one",
    "open",
    "bracket",
    "close",
    "bracket",
    "semicolon",
    "type",
    "function",
    "name",
    "brackets",
    "run",
    "code",
    "inside",
    "function",
    "save",
    "notice",
    "runs",
    "code",
    "inside",
    "function",
    "displays",
    "two",
    "lines",
    "console",
    "use",
    "functions",
    "function",
    "lets",
    "us",
    "reuse",
    "code",
    "wanted",
    "run",
    "lines",
    "code",
    "type",
    "function",
    "name",
    "brackets",
    "function",
    "one",
    "brackets",
    "save",
    "run",
    "code",
    "inside",
    "function",
    "two",
    "times",
    "reuse",
    "code",
    "many",
    "times",
    "want",
    "typing",
    "function",
    "name",
    "brackets",
    "function",
    "lets",
    "us",
    "reuse",
    "code",
    "let",
    "learn",
    "syntax",
    "rules",
    "functions",
    "word",
    "function",
    "creates",
    "new",
    "function",
    "choose",
    "name",
    "function",
    "rules",
    "function",
    "names",
    "variable",
    "names",
    "ca",
    "use",
    "special",
    "words",
    "like",
    "function",
    "ca",
    "start",
    "number",
    "ca",
    "use",
    "special",
    "characters",
    "although",
    "dollar",
    "sign",
    "underscore",
    "allowed",
    "like",
    "variable",
    "names",
    "best",
    "practice",
    "use",
    "camo",
    "case",
    "function",
    "names",
    "inside",
    "curly",
    "brackets",
    "put",
    "code",
    "want",
    "run",
    "use",
    "function",
    "called",
    "function",
    "body",
    "one",
    "important",
    "thing",
    "remember",
    "code",
    "creates",
    "function",
    "run",
    "code",
    "function",
    "anything",
    "else",
    "order",
    "actually",
    "run",
    "code",
    "use",
    "function",
    "like",
    "typing",
    "function",
    "name",
    "brackets",
    "known",
    "calling",
    "function",
    "also",
    "known",
    "running",
    "function",
    "executing",
    "function",
    "learned",
    "syntax",
    "rules",
    "functions",
    "let",
    "practical",
    "example",
    "going",
    "use",
    "functions",
    "improve",
    "code",
    "rock",
    "paper",
    "scissors",
    "project",
    "first",
    "let",
    "click",
    "show",
    "files",
    "actually",
    "going",
    "make",
    "copy",
    "project",
    "lesson",
    "going",
    "rightclick",
    "file",
    "copy",
    "bottom",
    "right",
    "click",
    "paste",
    "going",
    "rename",
    "file",
    "rightclick",
    "rename",
    "remove",
    "copy",
    "end",
    "beginning",
    "change",
    "07",
    "press",
    "enter",
    "next",
    "going",
    "open",
    "file",
    "live",
    "server",
    "right",
    "clicking",
    "open",
    "live",
    "server",
    "let",
    "also",
    "open",
    "console",
    "page",
    "right",
    "click",
    "inspect",
    "click",
    "console",
    "right",
    "look",
    "code",
    "generating",
    "computer",
    "move",
    "notice",
    "code",
    "three",
    "buttons",
    "perfect",
    "situation",
    "use",
    "function",
    "function",
    "lets",
    "us",
    "reuse",
    "code",
    "let",
    "scroll",
    "script",
    "element",
    "going",
    "make",
    "function",
    "let",
    "type",
    "function",
    "function",
    "name",
    "let",
    "name",
    "function",
    "pick",
    "computer",
    "move",
    "brackets",
    "curly",
    "brackets",
    "one",
    "recommendation",
    "function",
    "names",
    "use",
    "verb",
    "action",
    "name",
    "pick",
    "next",
    "going",
    "move",
    "code",
    "picking",
    "computer",
    "move",
    "new",
    "function",
    "let",
    "create",
    "new",
    "line",
    "scroll",
    "scissors",
    "button",
    "closest",
    "one",
    "select",
    "code",
    "picking",
    "computer",
    "move",
    "rightclick",
    "cut",
    "inside",
    "function",
    "right",
    "click",
    "paste",
    "need",
    "fix",
    "formatting",
    "select",
    "lines",
    "press",
    "tab",
    "add",
    "indents",
    "reason",
    "created",
    "function",
    "script",
    "element",
    "remember",
    "script",
    "element",
    "runs",
    "page",
    "loaded",
    "want",
    "make",
    "sure",
    "create",
    "function",
    "first",
    "use",
    "buttons",
    "remember",
    "code",
    "creates",
    "function",
    "actually",
    "run",
    "code",
    "inside",
    "run",
    "code",
    "inside",
    "going",
    "call",
    "function",
    "let",
    "scroll",
    "scissors",
    "button",
    "going",
    "call",
    "function",
    "typing",
    "function",
    "name",
    "pick",
    "computer",
    "move",
    "open",
    "bracket",
    "close",
    "bracket",
    "et",
    "semicolon",
    "save",
    "click",
    "scissors",
    "button",
    "unfortunately",
    "gives",
    "us",
    "error",
    "saying",
    "computer",
    "move",
    "defined",
    "might",
    "seem",
    "weird",
    "actually",
    "create",
    "computer",
    "move",
    "going",
    "reason",
    "happens",
    "functions",
    "create",
    "scope",
    "previous",
    "lesson",
    "learned",
    "scopes",
    "limit",
    "weight",
    "variable",
    "exists",
    "learned",
    "statements",
    "statements",
    "create",
    "scope",
    "curly",
    "brackets",
    "means",
    "variable",
    "created",
    "curly",
    "brackets",
    "exist",
    "curly",
    "brackets",
    "functions",
    "also",
    "create",
    "scope",
    "variable",
    "created",
    "curly",
    "brackets",
    "exists",
    "inside",
    "curly",
    "brackets",
    "ca",
    "use",
    "outside",
    "curly",
    "brack",
    "ets",
    "like",
    "getting",
    "error",
    "solve",
    "problem",
    "remember",
    "statements",
    "solve",
    "creating",
    "variable",
    "outside",
    "statement",
    "like",
    "use",
    "similar",
    "solution",
    "functions",
    "make",
    "variable",
    "exist",
    "outside",
    "function",
    "create",
    "outside",
    "function",
    "let",
    "select",
    "code",
    "going",
    "rightclick",
    "cut",
    "remove",
    "lines",
    "outside",
    "function",
    "going",
    "rightclick",
    "paste",
    "variable",
    "longer",
    "inside",
    "function",
    "scope",
    "used",
    "anywhere",
    "else",
    "code",
    "variables",
    "like",
    "accessed",
    "anywhere",
    "called",
    "global",
    "variables",
    "save",
    "click",
    "scissors",
    "button",
    "everything",
    "working",
    "code",
    "access",
    "variable",
    "let",
    "press",
    "okay",
    "let",
    "use",
    "function",
    "reuse",
    "code",
    "scroll",
    "paper",
    "button",
    "instead",
    "code",
    "going",
    "remove",
    "call",
    "function",
    "pick",
    "computer",
    "move",
    "open",
    "bracket",
    "close",
    "bracket",
    "semicolon",
    "also",
    "rock",
    "button",
    "select",
    "code",
    "remove",
    "call",
    "function",
    "pick",
    "computer",
    "move",
    "brackets",
    "semicolon",
    "save",
    "click",
    "rock",
    "button",
    "works",
    "like",
    "press",
    "okay",
    "click",
    "paper",
    "button",
    "also",
    "works",
    "like",
    "see",
    "functions",
    "let",
    "us",
    "reuse",
    "code",
    "make",
    "code",
    "lot",
    "cleaner",
    "removing",
    "duplication",
    "another",
    "benefit",
    "removing",
    "duplication",
    "ever",
    "wanted",
    "update",
    "code",
    "picking",
    "computer",
    "move",
    "update",
    "three",
    "places",
    "buttons",
    "scroll",
    "update",
    "one",
    "place",
    "inside",
    "function",
    "functions",
    "also",
    "make",
    "code",
    "easier",
    "update",
    "future",
    "next",
    "going",
    "learn",
    "feature",
    "functions",
    "called",
    "return",
    "statement",
    "return",
    "statement",
    "lets",
    "us",
    "get",
    "value",
    "function",
    "end",
    "function",
    "let",
    "type",
    "new",
    "lines",
    "going",
    "type",
    "type",
    "return",
    "value",
    "like",
    "number",
    "five",
    "semicolon",
    "whenever",
    "call",
    "function",
    "result",
    "value",
    "number",
    "five",
    "call",
    "function",
    "result",
    "number",
    "five",
    "actually",
    "save",
    "click",
    "scissors",
    "button",
    "show",
    "us",
    "calling",
    "function",
    "results",
    "number",
    "five",
    "display",
    "console",
    "return",
    "statement",
    "works",
    "lets",
    "us",
    "get",
    "value",
    "function",
    "let",
    "press",
    "okay",
    "another",
    "example",
    "scroll",
    "time",
    "let",
    "change",
    "ch",
    "value",
    "string",
    "rock",
    "whenever",
    "call",
    "function",
    "result",
    "string",
    "rock",
    "save",
    "click",
    "scissors",
    "scroll",
    "calling",
    "function",
    "results",
    "string",
    "rock",
    "display",
    "console",
    "let",
    "press",
    "okay",
    "learn",
    "syntax",
    "rules",
    "return",
    "statement",
    "type",
    "word",
    "return",
    "value",
    "get",
    "value",
    "function",
    "instead",
    "value",
    "also",
    "return",
    "calculation",
    "variable",
    "anything",
    "results",
    "value",
    "known",
    "returning",
    "value",
    "function",
    "value",
    "known",
    "return",
    "value",
    "also",
    "al",
    "return",
    "anything",
    "function",
    "function",
    "return",
    "statement",
    "return",
    "without",
    "value",
    "like",
    "return",
    "value",
    "undefined",
    "save",
    "click",
    "scissors",
    "function",
    "return",
    "undefined",
    "lastly",
    "use",
    "return",
    "statement",
    "ends",
    "function",
    "immediately",
    "return",
    "statement",
    "type",
    "string",
    "press",
    "okay",
    "save",
    "file",
    "click",
    "scissors",
    "button",
    "notice",
    "run",
    "code",
    "return",
    "code",
    "returns",
    "back",
    "called",
    "function",
    "called",
    "return",
    "statement",
    "going",
    "run",
    "anything",
    "return",
    "remove",
    "code",
    "press",
    "okay",
    "understand",
    "return",
    "statements",
    "going",
    "learn",
    "better",
    "way",
    "getting",
    "computer",
    "move",
    "function",
    "first",
    "let",
    "actually",
    "move",
    "variable",
    "back",
    "function",
    "right",
    "click",
    "cut",
    "right",
    "right",
    "click",
    "paste",
    "delete",
    "lines",
    "back",
    "original",
    "problem",
    "access",
    "computer",
    "move",
    "outside",
    "function",
    "another",
    "solution",
    "return",
    "variable",
    "remember",
    "return",
    "statement",
    "lets",
    "us",
    "get",
    "value",
    "function",
    "going",
    "return",
    "computer",
    "move",
    "take",
    "whatever",
    "value",
    "saved",
    "inside",
    "computer",
    "move",
    "one",
    "values",
    "return",
    "function",
    "save",
    "click",
    "scissors",
    "button",
    "able",
    "get",
    "move",
    "scissors",
    "outside",
    "function",
    "happened",
    "return",
    "move",
    "took",
    "move",
    "displayed",
    "console",
    "get",
    "scissors",
    "another",
    "way",
    "getting",
    "computer",
    "move",
    "function",
    "using",
    "return",
    "statement",
    "however",
    "back",
    "problem",
    "computer",
    "move",
    "defined",
    "moved",
    "back",
    "function",
    "scope",
    "let",
    "scroll",
    "remember",
    "return",
    "value",
    "value",
    "use",
    "like",
    "value",
    "example",
    "also",
    "save",
    "variable",
    "let",
    "right",
    "going",
    "remove",
    "create",
    "new",
    "variable",
    "const",
    "let",
    "name",
    "variable",
    "computer",
    "move",
    "match",
    "use",
    "use",
    "equals",
    "save",
    "return",
    "value",
    "inside",
    "inside",
    "variable",
    "note",
    "even",
    "though",
    "use",
    "computer",
    "move",
    "well",
    "different",
    "variables",
    "one",
    "inside",
    "function",
    "scope",
    "prevents",
    "conflicting",
    "variables",
    "outside",
    "function",
    "scope",
    "one",
    "main",
    "benefits",
    "scopes",
    "saved",
    "return",
    "value",
    "variable",
    "using",
    "variable",
    "code",
    "work",
    "work",
    "save",
    "click",
    "scissors",
    "everything",
    "back",
    "normal",
    "let",
    "press",
    "okay",
    "worry",
    "functions",
    "little",
    "confusing",
    "first",
    "code",
    "longer",
    "simply",
    "going",
    "top",
    "bottom",
    "sort",
    "jumps",
    "around",
    "little",
    "bit",
    "let",
    "go",
    "step",
    "step",
    "click",
    "button",
    "going",
    "run",
    "function",
    "code",
    "going",
    "going",
    "jump",
    "going",
    "run",
    "code",
    "top",
    "bottom",
    "end",
    "going",
    "return",
    "whatever",
    "inside",
    "computer",
    "move",
    "back",
    "called",
    "function",
    "going",
    "return",
    "way",
    "back",
    "going",
    "save",
    "return",
    "value",
    "new",
    "variable",
    "computer",
    "move",
    "use",
    "computer",
    "move",
    "following",
    "code",
    "line",
    "line",
    "like",
    "called",
    "tracing",
    "code",
    "useful",
    "technique",
    "understand",
    "exactly",
    "code",
    "let",
    "compare",
    "two",
    "solutions",
    "used",
    "global",
    "variable",
    "returning",
    "variable",
    "returning",
    "variable",
    "like",
    "actually",
    "preferred",
    "using",
    "global",
    "variable",
    "scope",
    "help",
    "us",
    "prevent",
    "naming",
    "conflicts",
    "variables",
    "inside",
    "conflict",
    "anything",
    "outside",
    "scope",
    "generally",
    "best",
    "practice",
    "keep",
    "things",
    "inside",
    "scope",
    "let",
    "move",
    "use",
    "function",
    "buttons",
    "feel",
    "free",
    "pause",
    "video",
    "want",
    "try",
    "first",
    "scroll",
    "paper",
    "button",
    "going",
    "save",
    "returned",
    "computer",
    "move",
    "variable",
    "const",
    "computer",
    "move",
    "matches",
    "code",
    "make",
    "equal",
    "whatever",
    "returned",
    "thing",
    "rock",
    "button",
    "going",
    "save",
    "return",
    "value",
    "variable",
    "const",
    "computer",
    "move",
    "equals",
    "save",
    "click",
    "rock",
    "button",
    "works",
    "let",
    "press",
    "okay",
    "click",
    "paper",
    "button",
    "also",
    "works",
    "let",
    "press",
    "okay",
    "use",
    "return",
    "statement",
    "take",
    "advantage",
    "benefits",
    "scope",
    "next",
    "look",
    "rest",
    "code",
    "compare",
    "move",
    "display",
    "result",
    "notice",
    "code",
    "similar",
    "buttons",
    "thing",
    "different",
    "result",
    "message",
    "display",
    "actually",
    "use",
    "functions",
    "well",
    "reuse",
    "code",
    "small",
    "differences",
    "going",
    "need",
    "another",
    "feature",
    "functions",
    "called",
    "parameters",
    "let",
    "go",
    "back",
    "functions",
    "html",
    "let",
    "open",
    "tab",
    "file",
    "let",
    "also",
    "comment",
    "previous",
    "code",
    "typing",
    "slash",
    "star",
    "bottom",
    "star",
    "slash",
    "create",
    "new",
    "lines",
    "ready",
    "learn",
    "parameters",
    "parameters",
    "sort",
    "opposite",
    "return",
    "statement",
    "return",
    "statement",
    "gets",
    "value",
    "function",
    "parameter",
    "puts",
    "value",
    "function",
    "let",
    "example",
    "let",
    "say",
    "working",
    "final",
    "amazon",
    "project",
    "need",
    "calculate",
    "tax",
    "order",
    "let",
    "create",
    "function",
    "calculate",
    "tax",
    "function",
    "let",
    "name",
    "calculate",
    "tax",
    "brackets",
    "curly",
    "brackets",
    "inside",
    "curly",
    "brackets",
    "let",
    "say",
    "cost",
    "products",
    "10",
    "tax",
    "10",
    "calc",
    "calculate",
    "tax",
    "10",
    "let",
    "also",
    "display",
    "number",
    "console",
    "front",
    "type",
    "brackets",
    "let",
    "save",
    "remember",
    "code",
    "creates",
    "function",
    "run",
    "code",
    "inside",
    "run",
    "code",
    "going",
    "call",
    "function",
    "going",
    "type",
    "function",
    "name",
    "calculate",
    "tax",
    "brackets",
    "save",
    "runs",
    "code",
    "displays",
    "tax",
    "100",
    "cents",
    "1",
    "however",
    "right",
    "function",
    "calculates",
    "tax",
    "want",
    "calculate",
    "tax",
    "different",
    "amount",
    "would",
    "modify",
    "function",
    "work",
    "number",
    "going",
    "learn",
    "feature",
    "functions",
    "called",
    "parameters",
    "parameter",
    "lets",
    "us",
    "put",
    "value",
    "function",
    "let",
    "finally",
    "create",
    "first",
    "parameter",
    "inside",
    "round",
    "brackets",
    "going",
    "choose",
    "name",
    "parameter",
    "let",
    "name",
    "parameter",
    "1",
    "parameter",
    "one",
    "works",
    "way",
    "variable",
    "save",
    "value",
    "inside",
    "parameter",
    "use",
    "like",
    "variable",
    "first",
    "let",
    "save",
    "value",
    "inside",
    "parameter",
    "going",
    "go",
    "call",
    "function",
    "inside",
    "brackets",
    "going",
    "put",
    "value",
    "example",
    "save",
    "value",
    "parameter",
    "use",
    "like",
    "variable",
    "instead",
    "going",
    "type",
    "parameter",
    "1",
    "take",
    "whatever",
    "value",
    "inside",
    "parameter",
    "1",
    "case",
    "substitute",
    "code",
    "save",
    "calculates",
    "give",
    "us",
    "200",
    "cents",
    "tax",
    "every",
    "time",
    "call",
    "function",
    "save",
    "different",
    "value",
    "parameter",
    "example",
    "let",
    "create",
    "new",
    "line",
    "call",
    "function",
    "calculate",
    "tax",
    "time",
    "going",
    "save",
    "value",
    "parameter",
    "1",
    "save",
    "line",
    "code",
    "calculate",
    "tax",
    "result",
    "500",
    "cents",
    "see",
    "parameter",
    "lets",
    "us",
    "put",
    "values",
    "function",
    "allows",
    "function",
    "work",
    "value",
    "let",
    "learn",
    "syntax",
    "rules",
    "parameters",
    "create",
    "parameter",
    "type",
    "parameter",
    "name",
    "brackets",
    "parameter",
    "names",
    "follow",
    "rules",
    "variable",
    "names",
    "ca",
    "use",
    "special",
    "words",
    "ca",
    "start",
    "number",
    "ca",
    "use",
    "special",
    "characters",
    "dollar",
    "sign",
    "underscore",
    "best",
    "practice",
    "use",
    "cam",
    "case",
    "let",
    "actually",
    "change",
    "parameter",
    "name",
    "cost",
    "code",
    "makes",
    "sense",
    "save",
    "next",
    "function",
    "parameter",
    "usually",
    "say",
    "function",
    "takes",
    "parameter",
    "parameter",
    "number",
    "say",
    "function",
    "takes",
    "number",
    "put",
    "value",
    "function",
    "like",
    "call",
    "passing",
    "value",
    "function",
    "another",
    "name",
    "value",
    "called",
    "argument",
    "believe",
    "actually",
    "used",
    "functions",
    "parameters",
    "whole",
    "time",
    "first",
    "code",
    "learned",
    "course",
    "alert",
    "alert",
    "actually",
    "function",
    "tell",
    "function",
    "round",
    "brackets",
    "brackets",
    "put",
    "string",
    "example",
    "parameter",
    "lastly",
    "parameter",
    "exists",
    "inside",
    "function",
    "scope",
    "use",
    "parameter",
    "curly",
    "brackets",
    "ca",
    "use",
    "outside",
    "function",
    "next",
    "function",
    "actually",
    "one",
    "parameter",
    "example",
    "right",
    "calculate",
    "tx",
    "function",
    "calculate",
    "10",
    "tax",
    "different",
    "country",
    "want",
    "calculate",
    "different",
    "tax",
    "percent",
    "solve",
    "add",
    "second",
    "parameter",
    "typing",
    "first",
    "parameter",
    "comma",
    "another",
    "parameter",
    "name",
    "let",
    "name",
    "tax",
    "percent",
    "save",
    "value",
    "second",
    "parameter",
    "go",
    "go",
    "call",
    "function",
    "also",
    "type",
    "comma",
    "second",
    "value",
    "like",
    "20",
    "tax",
    "first",
    "value",
    "gets",
    "saved",
    "first",
    "parameter",
    "second",
    "value",
    "gets",
    "saved",
    "second",
    "parameter",
    "use",
    "second",
    "parameter",
    "like",
    "variable",
    "instead",
    "every",
    "time",
    "going",
    "calculate",
    "tax",
    "percent",
    "substitute",
    "whatever",
    "value",
    "inside",
    "tax",
    "percent",
    "code",
    "save",
    "first",
    "line",
    "multiply",
    "give",
    "us",
    "400",
    "cents",
    "result",
    "many",
    "parameters",
    "want",
    "function",
    "separate",
    "comma",
    "notice",
    "second",
    "time",
    "call",
    "function",
    "give",
    "value",
    "second",
    "parameter",
    "save",
    "value",
    "parameter",
    "parameter",
    "get",
    "value",
    "undefined",
    "console",
    "log",
    "second",
    "parameter",
    "tax",
    "percent",
    "save",
    "show",
    "us",
    "second",
    "time",
    "tax",
    "percent",
    "undefined",
    "multiplying",
    "cost",
    "time",
    "undefined",
    "valid",
    "math",
    "get",
    "result",
    "nan",
    "number",
    "let",
    "remove",
    "learn",
    "fix",
    "fix",
    "either",
    "pass",
    "second",
    "value",
    "function",
    "like",
    "line",
    "also",
    "set",
    "default",
    "value",
    "parameter",
    "set",
    "default",
    "value",
    "type",
    "parameter",
    "add",
    "equal",
    "sign",
    "default",
    "value",
    "like",
    "save",
    "second",
    "function",
    "call",
    "multiply",
    "default",
    "value",
    "give",
    "us",
    "500",
    "add",
    "default",
    "value",
    "parameter",
    "right",
    "learned",
    "parameters",
    "going",
    "go",
    "back",
    "rock",
    "paper",
    "scissors",
    "project",
    "reuse",
    "even",
    "code",
    "let",
    "go",
    "back",
    "file",
    "project",
    "also",
    "tab",
    "project",
    "look",
    "code",
    "inside",
    "buttons",
    "notice",
    "code",
    "basically",
    "three",
    "buttons",
    "small",
    "difference",
    "move",
    "picked",
    "perfect",
    "situation",
    "use",
    "parameter",
    "inside",
    "script",
    "element",
    "let",
    "create",
    "new",
    "function",
    "reuse",
    "code",
    "type",
    "function",
    "let",
    "name",
    "function",
    "play",
    "game",
    "brackets",
    "curly",
    "brackets",
    "next",
    "let",
    "move",
    "code",
    "inside",
    "function",
    "reuse",
    "select",
    "code",
    "rightclick",
    "cut",
    "inside",
    "function",
    "right",
    "click",
    "paste",
    "need",
    "reformat",
    "select",
    "lines",
    "press",
    "tab",
    "value",
    "different",
    "button",
    "move",
    "picked",
    "going",
    "turn",
    "move",
    "parameter",
    "top",
    "brackets",
    "going",
    "create",
    "new",
    "parameter",
    "let",
    "name",
    "player",
    "move",
    "let",
    "save",
    "value",
    "parameter",
    "inside",
    "scissors",
    "button",
    "going",
    "call",
    "function",
    "run",
    "code",
    "let",
    "type",
    "play",
    "game",
    "call",
    "function",
    "scissors",
    "button",
    "let",
    "save",
    "string",
    "scissors",
    "player",
    "move",
    "type",
    "brackets",
    "type",
    "string",
    "scissors",
    "learned",
    "save",
    "scissors",
    "player",
    "move",
    "use",
    "player",
    "move",
    "like",
    "variable",
    "function",
    "let",
    "modify",
    "code",
    "based",
    "parameter",
    "code",
    "calculates",
    "result",
    "however",
    "works",
    "player",
    "move",
    "scissors",
    "going",
    "put",
    "statement",
    "type",
    "player",
    "move",
    "equals",
    "scissors",
    "curly",
    "brackets",
    "inside",
    "statement",
    "going",
    "put",
    "statement",
    "let",
    "select",
    "right",
    "click",
    "cut",
    "inside",
    "right",
    "click",
    "click",
    "paste",
    "select",
    "lines",
    "press",
    "tab",
    "notice",
    "put",
    "statement",
    "inside",
    "another",
    "statement",
    "code",
    "makes",
    "sense",
    "player",
    "move",
    "scissors",
    "finally",
    "let",
    "modify",
    "code",
    "displays",
    "message",
    "instead",
    "displaying",
    "scissors",
    "every",
    "time",
    "going",
    "display",
    "whatever",
    "saved",
    "inside",
    "player",
    "move",
    "replace",
    "dollar",
    "open",
    "curly",
    "bracket",
    "close",
    "curly",
    "bracket",
    "insert",
    "player",
    "move",
    "modify",
    "function",
    "use",
    "parameter",
    "instead",
    "always",
    "using",
    "scissors",
    "let",
    "save",
    "click",
    "scissors",
    "button",
    "notice",
    "works",
    "displayed",
    "move",
    "scissors",
    "calculated",
    "result",
    "correctly",
    "let",
    "press",
    "okay",
    "going",
    "use",
    "function",
    "reuse",
    "code",
    "buttons",
    "scroll",
    "paper",
    "button",
    "going",
    "use",
    "different",
    "statement",
    "calculate",
    "result",
    "let",
    "actually",
    "copy",
    "function",
    "going",
    "rightclick",
    "click",
    "copy",
    "inside",
    "function",
    "going",
    "create",
    "another",
    "branch",
    "player",
    "move",
    "paper",
    "let",
    "type",
    "else",
    "brackets",
    "curly",
    "brackets",
    "inside",
    "condition",
    "going",
    "check",
    "player",
    "move",
    "equal",
    "paper",
    "time",
    "inside",
    "curly",
    "brackets",
    "going",
    "going",
    "paste",
    "statement",
    "copied",
    "earlier",
    "right",
    "click",
    "paste",
    "select",
    "lines",
    "press",
    "tab",
    "reformat",
    "code",
    "determines",
    "result",
    "paper",
    "need",
    "modify",
    "code",
    "always",
    "displaying",
    "whatever",
    "inside",
    "player",
    "move",
    "finally",
    "scroll",
    "paper",
    "button",
    "remove",
    "duplicated",
    "code",
    "use",
    "function",
    "play",
    "game",
    "going",
    "pass",
    "paper",
    "inside",
    "paper",
    "get",
    "saved",
    "inside",
    "player",
    "move",
    "going",
    "run",
    "statement",
    "instead",
    "save",
    "click",
    "paper",
    "button",
    "example",
    "pick",
    "paper",
    "computer",
    "pick",
    "rock",
    "calculated",
    "result",
    "correctly",
    "let",
    "press",
    "okay",
    "use",
    "function",
    "rock",
    "button",
    "feel",
    "free",
    "pause",
    "video",
    "want",
    "try",
    "first",
    "let",
    "scroll",
    "rock",
    "button",
    "first",
    "need",
    "copy",
    "statement",
    "function",
    "let",
    "rightclick",
    "copy",
    "inside",
    "function",
    "let",
    "create",
    "branch",
    "rock",
    "else",
    "player",
    "move",
    "equal",
    "rock",
    "curly",
    "brackets",
    "inside",
    "going",
    "rightclick",
    "paste",
    "statement",
    "copied",
    "earlier",
    "let",
    "select",
    "lines",
    "press",
    "tab",
    "times",
    "reformat",
    "need",
    "need",
    "change",
    "last",
    "step",
    "scroll",
    "rock",
    "button",
    "instead",
    "duplicating",
    "code",
    "going",
    "remove",
    "call",
    "function",
    "instead",
    "play",
    "game",
    "brackets",
    "inside",
    "string",
    "rock",
    "let",
    "save",
    "click",
    "rock",
    "button",
    "picked",
    "rock",
    "computer",
    "picked",
    "paper",
    "calculated",
    "result",
    "correctly",
    "let",
    "press",
    "okay",
    "using",
    "function",
    "parameter",
    "able",
    "reuse",
    "code",
    "buttons",
    "see",
    "made",
    "code",
    "lot",
    "cleaner",
    "lastly",
    "notice",
    "inside",
    "function",
    "call",
    "functions",
    "let",
    "go",
    "code",
    "step",
    "step",
    "understand",
    "works",
    "call",
    "play",
    "game",
    "function",
    "go",
    "inside",
    "call",
    "pick",
    "computer",
    "move",
    "function",
    "going",
    "go",
    "inside",
    "function",
    "run",
    "code",
    "function",
    "returns",
    "going",
    "return",
    "back",
    "called",
    "keep",
    "going",
    "run",
    "rest",
    "code",
    "play",
    "game",
    "function",
    "finishes",
    "going",
    "return",
    "back",
    "inside",
    "function",
    "call",
    "functions",
    "one",
    "last",
    "thing",
    "going",
    "code",
    "scroll",
    "going",
    "add",
    "new",
    "lines",
    "statement",
    "separate",
    "branches",
    "make",
    "code",
    "little",
    "easier",
    "read",
    "save",
    "let",
    "scroll",
    "end",
    "lesson",
    "lesson",
    "learned",
    "functions",
    "let",
    "us",
    "reuse",
    "code",
    "learned",
    "get",
    "value",
    "function",
    "using",
    "return",
    "learn",
    "put",
    "values",
    "function",
    "using",
    "parameters",
    "improve",
    "code",
    "rock",
    "paper",
    "scissors",
    "project",
    "reusing",
    "code",
    "removing",
    "duplication",
    "thanks",
    "watching",
    "course",
    "far",
    "want",
    "support",
    "channel",
    "check",
    "premium",
    "version",
    "courses",
    "like",
    "one",
    "get",
    "certificate",
    "completion",
    "better",
    "learning",
    "platform",
    "interested",
    "extra",
    "videos",
    "videos",
    "behind",
    "scenes",
    "content",
    "check",
    "links",
    "also",
    "support",
    "channel",
    "liking",
    "video",
    "subscribing",
    "sharing",
    "video",
    "others",
    "thanks",
    "let",
    "go",
    "continue",
    "course",
    "exercises",
    "practice",
    "using",
    "functions",
    "lesson",
    "going",
    "learn",
    "another",
    "type",
    "value",
    "javascript",
    "called",
    "objects",
    "going",
    "use",
    "objects",
    "create",
    "score",
    "rock",
    "paper",
    "scissors",
    "project",
    "first",
    "let",
    "create",
    "new",
    "file",
    "lesson",
    "go",
    "code",
    "editor",
    "click",
    "icon",
    "click",
    "icon",
    "create",
    "new",
    "file",
    "name",
    "file",
    "objects",
    "html",
    "press",
    "enter",
    "next",
    "copy",
    "code",
    "functions",
    "html",
    "objects",
    "html",
    "type",
    "press",
    "contrl",
    "command",
    "select",
    "code",
    "right",
    "click",
    "copy",
    "right",
    "click",
    "paste",
    "let",
    "hide",
    "files",
    "prepare",
    "file",
    "lesson",
    "change",
    "objects",
    "remove",
    "code",
    "script",
    "element",
    "finally",
    "let",
    "save",
    "open",
    "live",
    "server",
    "right",
    "clicking",
    "open",
    "live",
    "server",
    "let",
    "also",
    "open",
    "console",
    "page",
    "right",
    "click",
    "click",
    "inspect",
    "click",
    "console",
    "let",
    "close",
    "previous",
    "tabs",
    "also",
    "previous",
    "code",
    "ready",
    "learn",
    "objects",
    "object",
    "object",
    "groups",
    "multiple",
    "values",
    "together",
    "let",
    "example",
    "create",
    "first",
    "object",
    "go",
    "script",
    "element",
    "create",
    "variable",
    "using",
    "const",
    "name",
    "variable",
    "product",
    "make",
    "equal",
    "open",
    "curly",
    "bracket",
    "close",
    "curly",
    "bracket",
    "semic",
    "object",
    "inside",
    "object",
    "add",
    "values",
    "type",
    "enter",
    "name",
    "colon",
    "value",
    "like",
    "string",
    "socks",
    "end",
    "type",
    "comma",
    "price",
    "colon",
    "another",
    "value",
    "like",
    "number",
    "inside",
    "object",
    "added",
    "two",
    "values",
    "bottom",
    "let",
    "try",
    "console",
    "logging",
    "object",
    "product",
    "save",
    "display",
    "values",
    "console",
    "see",
    "object",
    "lets",
    "us",
    "group",
    "multiple",
    "values",
    "together",
    "values",
    "code",
    "left",
    "code",
    "called",
    "property",
    "using",
    "property",
    "access",
    "specific",
    "values",
    "object",
    "example",
    "let",
    "type",
    "enter",
    "going",
    "type",
    "object",
    "product",
    "dot",
    "property",
    "like",
    "name",
    "dot",
    "name",
    "access",
    "value",
    "associated",
    "name",
    "property",
    "string",
    "socks",
    "save",
    "display",
    "string",
    "socks",
    "console",
    "let",
    "another",
    "example",
    "access",
    "second",
    "value",
    "using",
    "property",
    "price",
    "type",
    "enter",
    "console",
    "log",
    "object",
    "product",
    "dot",
    "property",
    "price",
    "access",
    "value",
    "associated",
    "price",
    "save",
    "gets",
    "displayed",
    "console",
    "also",
    "use",
    "property",
    "change",
    "value",
    "inside",
    "object",
    "going",
    "type",
    "object",
    "name",
    "product",
    "dot",
    "property",
    "like",
    "name",
    "make",
    "equal",
    "something",
    "else",
    "like",
    "string",
    "cotton",
    "socks",
    "code",
    "change",
    "change",
    "value",
    "associated",
    "name",
    "property",
    "cotton",
    "socks",
    "bottom",
    "type",
    "product",
    "save",
    "notice",
    "value",
    "associated",
    "name",
    "property",
    "changed",
    "cotton",
    "socks",
    "object",
    "works",
    "group",
    "multiple",
    "values",
    "together",
    "access",
    "change",
    "values",
    "using",
    "properties",
    "left",
    "let",
    "learn",
    "syntax",
    "rules",
    "objects",
    "create",
    "object",
    "start",
    "open",
    "curly",
    "bracket",
    "end",
    "closed",
    "curly",
    "bracket",
    "inside",
    "object",
    "put",
    "multiple",
    "values",
    "value",
    "code",
    "left",
    "called",
    "property",
    "access",
    "value",
    "inside",
    "object",
    "separate",
    "property",
    "value",
    "colon",
    "called",
    "property",
    "value",
    "pair",
    "many",
    "property",
    "value",
    "pairs",
    "object",
    "separate",
    "comma",
    "access",
    "value",
    "inside",
    "object",
    "type",
    "object",
    "name",
    "dot",
    "property",
    "want",
    "access",
    "like",
    "name",
    "give",
    "us",
    "value",
    "associated",
    "name",
    "property",
    "syntax",
    "called",
    "notation",
    "access",
    "property",
    "exist",
    "value",
    "undefined",
    "change",
    "value",
    "object",
    "use",
    "dot",
    "notation",
    "product",
    "name",
    "make",
    "equal",
    "something",
    "else",
    "using",
    "syntax",
    "also",
    "add",
    "value",
    "object",
    "type",
    "property",
    "exist",
    "example",
    "type",
    "product",
    "new",
    "property",
    "make",
    "equal",
    "something",
    "like",
    "boolean",
    "value",
    "true",
    "product",
    "save",
    "add",
    "value",
    "object",
    "along",
    "new",
    "property",
    "also",
    "remove",
    "value",
    "object",
    "typing",
    "delete",
    "object",
    "product",
    "dot",
    "property",
    "want",
    "delete",
    "like",
    "new",
    "property",
    "product",
    "save",
    "code",
    "delete",
    "new",
    "property",
    "object",
    "lastly",
    "notice",
    "object",
    "another",
    "type",
    "value",
    "save",
    "object",
    "inside",
    "variable",
    "also",
    "objects",
    "check",
    "type",
    "value",
    "type",
    "product",
    "save",
    "scroll",
    "console",
    "tell",
    "us",
    "product",
    "object",
    "let",
    "remove",
    "save",
    "learn",
    "use",
    "objects",
    "objects",
    "make",
    "code",
    "organized",
    "instead",
    "creating",
    "bunch",
    "variables",
    "products",
    "values",
    "like",
    "name",
    "price",
    "details",
    "group",
    "related",
    "values",
    "together",
    "one",
    "object",
    "objects",
    "also",
    "allow",
    "us",
    "use",
    "multiple",
    "values",
    "together",
    "instead",
    "console",
    "logging",
    "values",
    "individually",
    "console",
    "log",
    "whole",
    "object",
    "display",
    "values",
    "objects",
    "let",
    "us",
    "group",
    "multiple",
    "values",
    "together",
    "let",
    "us",
    "use",
    "multiple",
    "values",
    "together",
    "next",
    "let",
    "practical",
    "example",
    "objects",
    "going",
    "add",
    "score",
    "rock",
    "paper",
    "scissors",
    "game",
    "actually",
    "prepared",
    "project",
    "use",
    "lesson",
    "see",
    "project",
    "going",
    "go",
    "website",
    "create",
    "new",
    "tab",
    "going",
    "type",
    "super",
    "simple",
    "dodev",
    "sl",
    "projects",
    "slobs",
    "press",
    "enter",
    "simplified",
    "rock",
    "paper",
    "scissors",
    "game",
    "except",
    "project",
    "play",
    "game",
    "also",
    "going",
    "keep",
    "track",
    "score",
    "many",
    "times",
    "win",
    "lose",
    "tie",
    "also",
    "click",
    "okay",
    "reset",
    "score",
    "button",
    "play",
    "game",
    "times",
    "add",
    "score",
    "click",
    "reset",
    "score",
    "button",
    "reset",
    "score",
    "back",
    "zero",
    "play",
    "game",
    "score",
    "starts",
    "zero",
    "going",
    "learn",
    "use",
    "objects",
    "create",
    "create",
    "feature",
    "let",
    "press",
    "okay",
    "first",
    "let",
    "create",
    "copy",
    "project",
    "lesson",
    "go",
    "code",
    "editor",
    "click",
    "icon",
    "show",
    "files",
    "make",
    "copy",
    "rock",
    "paper",
    "scissors",
    "project",
    "previous",
    "lesson",
    "rightclick",
    "copy",
    "right",
    "click",
    "paste",
    "right",
    "click",
    "rename",
    "file",
    "remove",
    "copy",
    "end",
    "front",
    "change",
    "08",
    "press",
    "enter",
    "let",
    "hide",
    "files",
    "close",
    "07",
    "file",
    "let",
    "open",
    "live",
    "server",
    "right",
    "clicking",
    "open",
    "live",
    "server",
    "let",
    "also",
    "open",
    "console",
    "page",
    "rightclick",
    "inspect",
    "console",
    "right",
    "let",
    "go",
    "code",
    "add",
    "score",
    "game",
    "remember",
    "writing",
    "javascript",
    "good",
    "strategy",
    "think",
    "steps",
    "need",
    "called",
    "algorithm",
    "convert",
    "steps",
    "code",
    "already",
    "algorithm",
    "rock",
    "paper",
    "scissors",
    "game",
    "let",
    "update",
    "algorithm",
    "include",
    "score",
    "first",
    "computer",
    "randomly",
    "selects",
    "move",
    "step",
    "stay",
    "number",
    "two",
    "going",
    "compare",
    "moves",
    "get",
    "result",
    "step",
    "also",
    "going",
    "add",
    "extra",
    "step",
    "getting",
    "result",
    "going",
    "update",
    "score",
    "finally",
    "display",
    "result",
    "score",
    "popup",
    "let",
    "convert",
    "updated",
    "steps",
    "algorithm",
    "code",
    "first",
    "thing",
    "need",
    "change",
    "added",
    "third",
    "step",
    "going",
    "save",
    "update",
    "score",
    "first",
    "need",
    "somewhere",
    "save",
    "score",
    "one",
    "place",
    "save",
    "inside",
    "variable",
    "let",
    "go",
    "script",
    "element",
    "top",
    "going",
    "create",
    "variable",
    "score",
    "using",
    "const",
    "score",
    "make",
    "equal",
    "object",
    "inside",
    "object",
    "going",
    "property",
    "wins",
    "keep",
    "track",
    "many",
    "wins",
    "type",
    "colon",
    "number",
    "zero",
    "score",
    "starts",
    "zero",
    "comma",
    "another",
    "property",
    "losses",
    "many",
    "losses",
    "colon",
    "zero",
    "another",
    "comma",
    "ties",
    "colon",
    "zero",
    "use",
    "object",
    "values",
    "related",
    "could",
    "use",
    "separate",
    "variables",
    "using",
    "object",
    "convenience",
    "another",
    "thing",
    "notice",
    "creating",
    "variable",
    "outside",
    "function",
    "outside",
    "scope",
    "every",
    "time",
    "make",
    "move",
    "need",
    "update",
    "score",
    "last",
    "time",
    "order",
    "save",
    "score",
    "last",
    "time",
    "need",
    "keep",
    "outside",
    "function",
    "score",
    "inside",
    "function",
    "function",
    "would",
    "create",
    "new",
    "score",
    "every",
    "time",
    "want",
    "situation",
    "order",
    "save",
    "score",
    "last",
    "time",
    "going",
    "keep",
    "variable",
    "outside",
    "every",
    "time",
    "play",
    "game",
    "calc",
    "calate",
    "result",
    "going",
    "update",
    "score",
    "let",
    "scroll",
    "calculate",
    "result",
    "going",
    "type",
    "new",
    "lines",
    "type",
    "code",
    "updating",
    "score",
    "statement",
    "type",
    "brackets",
    "curly",
    "brackets",
    "inside",
    "condition",
    "going",
    "check",
    "result",
    "win",
    "win",
    "going",
    "update",
    "winds",
    "property",
    "increase",
    "one",
    "result",
    "equal",
    "string",
    "win",
    "make",
    "sure",
    "string",
    "matches",
    "string",
    "inside",
    "curly",
    "brackets",
    "going",
    "update",
    "score",
    "wins",
    "make",
    "equal",
    "plus",
    "one",
    "increase",
    "winds",
    "property",
    "score",
    "object",
    "one",
    "remember",
    "variables",
    "lesson",
    "shortcut",
    "increasing",
    "something",
    "one",
    "shortcut",
    "plus",
    "1",
    "next",
    "let",
    "add",
    "another",
    "branch",
    "statement",
    "two",
    "results",
    "else",
    "brackets",
    "curly",
    "brackets",
    "second",
    "condition",
    "going",
    "check",
    "result",
    "equal",
    "string",
    "lose",
    "make",
    "sure",
    "string",
    "matches",
    "string",
    "result",
    "lose",
    "going",
    "update",
    "score",
    "losses",
    "property",
    "increase",
    "1",
    "plus",
    "equal",
    "1",
    "finally",
    "check",
    "result",
    "tie",
    "else",
    "brackets",
    "curly",
    "brackets",
    "result",
    "equals",
    "string",
    "tie",
    "update",
    "score",
    "ties",
    "plus",
    "equal",
    "1",
    "converted",
    "step",
    "algorithm",
    "code",
    "score",
    "starts",
    "zero",
    "every",
    "time",
    "play",
    "game",
    "calculate",
    "result",
    "going",
    "update",
    "score",
    "using",
    "code",
    "let",
    "convert",
    "last",
    "step",
    "code",
    "going",
    "display",
    "result",
    "score",
    "popup",
    "end",
    "let",
    "actually",
    "go",
    "back",
    "super",
    "simple",
    "dodev",
    "project",
    "see",
    "popup",
    "looks",
    "like",
    "click",
    "one",
    "buttons",
    "popup",
    "second",
    "line",
    "display",
    "score",
    "code",
    "code",
    "displays",
    "popup",
    "add",
    "second",
    "line",
    "popup",
    "remember",
    "template",
    "strings",
    "another",
    "special",
    "feature",
    "called",
    "strings",
    "type",
    "end",
    "template",
    "string",
    "press",
    "enter",
    "add",
    "another",
    "line",
    "str",
    "type",
    "winds",
    "colon",
    "going",
    "insert",
    "value",
    "using",
    "dollar",
    "open",
    "curly",
    "bracket",
    "clos",
    "curly",
    "bracket",
    "going",
    "insert",
    "number",
    "wins",
    "score",
    "wins",
    "type",
    "score",
    "dowins",
    "next",
    "going",
    "show",
    "number",
    "losses",
    "let",
    "type",
    "comma",
    "losses",
    "colon",
    "insert",
    "another",
    "value",
    "insert",
    "score",
    "losses",
    "finally",
    "type",
    "comma",
    "display",
    "ties",
    "colon",
    "inserted",
    "value",
    "score",
    "dot",
    "ties",
    "display",
    "score",
    "popup",
    "let",
    "save",
    "give",
    "try",
    "click",
    "okay",
    "go",
    "back",
    "tab",
    "play",
    "game",
    "second",
    "line",
    "display",
    "score",
    "one",
    "small",
    "issue",
    "lot",
    "spaces",
    "second",
    "line",
    "spaces",
    "correspond",
    "spaces",
    "use",
    "strings",
    "extra",
    "spaces",
    "show",
    "popup",
    "remove",
    "sp",
    "cases",
    "remove",
    "code",
    "like",
    "save",
    "press",
    "okay",
    "play",
    "game",
    "show",
    "score",
    "second",
    "line",
    "without",
    "extra",
    "spaces",
    "front",
    "let",
    "press",
    "okay",
    "going",
    "add",
    "one",
    "feature",
    "project",
    "go",
    "back",
    "super",
    "simple",
    "dev",
    "reset",
    "score",
    "button",
    "reset",
    "score",
    "back",
    "zero",
    "click",
    "let",
    "add",
    "button",
    "project",
    "scroll",
    "inside",
    "html",
    "add",
    "button",
    "code",
    "less",
    "button",
    "greater",
    "inside",
    "button",
    "text",
    "reset",
    "score",
    "click",
    "button",
    "run",
    "code",
    "using",
    "onclick",
    "attribute",
    "equals",
    "double",
    "quotes",
    "going",
    "write",
    "code",
    "reset",
    "score",
    "back",
    "zero",
    "one",
    "way",
    "score",
    "object",
    "use",
    "dot",
    "notation",
    "change",
    "everything",
    "back",
    "zero",
    "type",
    "score",
    "wins",
    "make",
    "equal",
    "zero",
    "also",
    "type",
    "score",
    "losses",
    "make",
    "equal",
    "z",
    "finally",
    "score",
    "ties",
    "make",
    "equal",
    "zero",
    "let",
    "save",
    "go",
    "back",
    "tab",
    "play",
    "game",
    "times",
    "get",
    "score",
    "let",
    "press",
    "okay",
    "press",
    "reset",
    "score",
    "play",
    "game",
    "notice",
    "score",
    "started",
    "zero",
    "create",
    "reset",
    "score",
    "button",
    "set",
    "properties",
    "back",
    "zero",
    "add",
    "score",
    "feature",
    "rock",
    "paper",
    "scissors",
    "project",
    "using",
    "object",
    "save",
    "score",
    "let",
    "press",
    "okay",
    "going",
    "learn",
    "details",
    "objects",
    "let",
    "go",
    "back",
    "objects",
    "html",
    "open",
    "tab",
    "file",
    "let",
    "also",
    "comment",
    "previous",
    "code",
    "using",
    "slashstar",
    "bottom",
    "star",
    "slash",
    "save",
    "let",
    "scroll",
    "bottom",
    "setup",
    "first",
    "let",
    "create",
    "variable",
    "const",
    "name",
    "product",
    "2",
    "make",
    "equal",
    "another",
    "object",
    "inside",
    "object",
    "property",
    "name",
    "colon",
    "string",
    "shirt",
    "going",
    "object",
    "product",
    "2",
    "save",
    "next",
    "detail",
    "going",
    "learn",
    "objects",
    "another",
    "way",
    "access",
    "values",
    "inside",
    "previously",
    "learned",
    "notation",
    "example",
    "product",
    "name",
    "access",
    "value",
    "associated",
    "name",
    "property",
    "javascript",
    "another",
    "way",
    "accessing",
    "values",
    "inside",
    "objects",
    "using",
    "square",
    "brackets",
    "create",
    "new",
    "line",
    "type",
    "console",
    "log",
    "product",
    "2",
    "time",
    "type",
    "square",
    "brackets",
    "inside",
    "square",
    "brackets",
    "string",
    "name",
    "called",
    "bracket",
    "notation",
    "thing",
    "dot",
    "notation",
    "gets",
    "value",
    "associated",
    "name",
    "property",
    "save",
    "two",
    "lines",
    "code",
    "access",
    "string",
    "shirt",
    "see",
    "use",
    "bracket",
    "notation",
    "instead",
    "dot",
    "notation",
    "bracket",
    "notation",
    "lets",
    "us",
    "use",
    "properties",
    "normally",
    "work",
    "notation",
    "example",
    "bottom",
    "type",
    "product",
    "2",
    "use",
    "dot",
    "try",
    "access",
    "property",
    "called",
    "save",
    "property",
    "give",
    "us",
    "error",
    "javascript",
    "thinks",
    "dash",
    "minus",
    "sign",
    "trying",
    "math",
    "order",
    "use",
    "property",
    "like",
    "use",
    "bracket",
    "notation",
    "going",
    "replace",
    "dot",
    "square",
    "brackets",
    "turn",
    "string",
    "save",
    "longer",
    "gives",
    "us",
    "error",
    "delivery",
    "time",
    "exist",
    "object",
    "get",
    "value",
    "undefined",
    "using",
    "bracket",
    "notation",
    "also",
    "add",
    "values",
    "object",
    "create",
    "add",
    "comma",
    "add",
    "another",
    "property",
    "using",
    "bracket",
    "notation",
    "string",
    "colon",
    "value",
    "like",
    "string",
    "one",
    "day",
    "save",
    "lets",
    "us",
    "add",
    "property",
    "object",
    "see",
    "bracket",
    "notation",
    "lets",
    "us",
    "use",
    "properties",
    "normally",
    "work",
    "dot",
    "notation",
    "another",
    "feature",
    "bracket",
    "notation",
    "brackets",
    "use",
    "string",
    "use",
    "variable",
    "calculation",
    "anything",
    "results",
    "value",
    "might",
    "wondering",
    "one",
    "use",
    "notation",
    "bracket",
    "notation",
    "usually",
    "use",
    "notation",
    "default",
    "shorter",
    "easier",
    "read",
    "need",
    "use",
    "properties",
    "work",
    "notation",
    "use",
    "bracket",
    "notation",
    "shortcut",
    "create",
    "object",
    "string",
    "brackets",
    "brackets",
    "actually",
    "optional",
    "type",
    "save",
    "code",
    "still",
    "work",
    "okay",
    "next",
    "detail",
    "going",
    "learn",
    "inside",
    "object",
    "save",
    "type",
    "value",
    "includes",
    "numbers",
    "strings",
    "booleans",
    "well",
    "objects",
    "remember",
    "objects",
    "also",
    "values",
    "example",
    "type",
    "comma",
    "add",
    "property",
    "called",
    "rating",
    "colon",
    "object",
    "open",
    "curly",
    "bracket",
    "close",
    "curly",
    "bracket",
    "inside",
    "inner",
    "object",
    "add",
    "properties",
    "like",
    "stars",
    "colon",
    "many",
    "stars",
    "product",
    "comma",
    "property",
    "called",
    "count",
    "colon",
    "87",
    "many",
    "ratings",
    "product",
    "called",
    "nested",
    "object",
    "object",
    "inside",
    "object",
    "use",
    "nested",
    "objects",
    "make",
    "values",
    "organized",
    "inside",
    "product",
    "number",
    "stars",
    "number",
    "ratings",
    "related",
    "rating",
    "makes",
    "sense",
    "group",
    "together",
    "inside",
    "product",
    "access",
    "values",
    "inside",
    "inner",
    "object",
    "use",
    "dot",
    "notation",
    "bracket",
    "notation",
    "multiple",
    "times",
    "example",
    "bottom",
    "type",
    "product",
    "2",
    "dot",
    "rating",
    "get",
    "value",
    "associated",
    "rating",
    "object",
    "use",
    "dot",
    "notation",
    "count",
    "get",
    "count",
    "inside",
    "rating",
    "object",
    "value",
    "right",
    "save",
    "display",
    "87",
    "finally",
    "another",
    "type",
    "ty",
    "value",
    "put",
    "object",
    "function",
    "object",
    "let",
    "type",
    "comma",
    "another",
    "property",
    "fun",
    "colon",
    "going",
    "create",
    "function",
    "let",
    "type",
    "function",
    "name",
    "function",
    "function",
    "one",
    "brackets",
    "curly",
    "brackets",
    "inside",
    "function",
    "going",
    "javascript",
    "code",
    "like",
    "usual",
    "console",
    "log",
    "string",
    "function",
    "inside",
    "object",
    "saves",
    "function",
    "inside",
    "object",
    "works",
    "function",
    "actually",
    "another",
    "type",
    "value",
    "javascript",
    "learn",
    "feature",
    "functions",
    "later",
    "course",
    "know",
    "functions",
    "also",
    "values",
    "save",
    "object",
    "access",
    "function",
    "use",
    "dot",
    "bracket",
    "notation",
    "usual",
    "bottom",
    "type",
    "object",
    "product",
    "2",
    "dot",
    "property",
    "fun",
    "access",
    "value",
    "associated",
    "fun",
    "property",
    "function",
    "fun",
    "function",
    "call",
    "usual",
    "using",
    "brackets",
    "save",
    "run",
    "function",
    "display",
    "function",
    "inside",
    "object",
    "console",
    "save",
    "functions",
    "inside",
    "object",
    "called",
    "method",
    "actually",
    "using",
    "methods",
    "whole",
    "time",
    "actually",
    "method",
    "console",
    "object",
    "provided",
    "javascript",
    "log",
    "function",
    "saved",
    "inside",
    "console",
    "object",
    "go",
    "bottom",
    "type",
    "type",
    "console",
    "save",
    "confirm",
    "console",
    "object",
    "change",
    "save",
    "show",
    "us",
    "function",
    "log",
    "function",
    "saved",
    "inside",
    "console",
    "object",
    "call",
    "method",
    "another",
    "example",
    "method",
    "used",
    "rock",
    "paper",
    "scissors",
    "project",
    "math",
    "also",
    "object",
    "provided",
    "javascript",
    "random",
    "function",
    "saved",
    "inside",
    "math",
    "object",
    "call",
    "method",
    "well",
    "actually",
    "using",
    "objects",
    "methods",
    "throughout",
    "course",
    "understand",
    "code",
    "using",
    "far",
    "next",
    "going",
    "learn",
    "builtin",
    "objects",
    "console",
    "object",
    "math",
    "object",
    "known",
    "builtin",
    "objects",
    "built",
    "language",
    "provided",
    "language",
    "going",
    "learn",
    "two",
    "objects",
    "called",
    "json",
    "local",
    "storage",
    "use",
    "objects",
    "improve",
    "rock",
    "paper",
    "scissors",
    "project",
    "let",
    "start",
    "json",
    "object",
    "object",
    "helps",
    "us",
    "work",
    "something",
    "called",
    "json",
    "json",
    "stands",
    "javascript",
    "object",
    "notation",
    "easiest",
    "way",
    "understand",
    "jason",
    "bas",
    "basically",
    "syntax",
    "similar",
    "syntax",
    "javascript",
    "object",
    "less",
    "features",
    "example",
    "code",
    "left",
    "uses",
    "javascript",
    "object",
    "syntax",
    "code",
    "right",
    "uses",
    "json",
    "syntax",
    "one",
    "difference",
    "properties",
    "strings",
    "must",
    "use",
    "double",
    "quotes",
    "json",
    "jason",
    "support",
    "single",
    "quotes",
    "another",
    "difference",
    "json",
    "support",
    "function",
    "functions",
    "see",
    "json",
    "basically",
    "syntax",
    "similar",
    "javascript",
    "object",
    "syntax",
    "less",
    "features",
    "would",
    "use",
    "json",
    "syntax",
    "instead",
    "javascript",
    "object",
    "syntax",
    "javascript",
    "object",
    "makes",
    "sense",
    "javascript",
    "hand",
    "json",
    "syntax",
    "understood",
    "almost",
    "every",
    "programming",
    "language",
    "json",
    "syntax",
    "un",
    "universal",
    "reason",
    "use",
    "json",
    "send",
    "data",
    "two",
    "computers",
    "might",
    "use",
    "different",
    "programming",
    "languages",
    "learn",
    "later",
    "course",
    "also",
    "use",
    "json",
    "store",
    "data",
    "learn",
    "store",
    "data",
    "lesson",
    "understand",
    "json",
    "let",
    "learn",
    "built",
    "json",
    "object",
    "json",
    "object",
    "helps",
    "us",
    "convert",
    "javascript",
    "object",
    "json",
    "example",
    "let",
    "convert",
    "object",
    "product",
    "two",
    "json",
    "create",
    "new",
    "lines",
    "type",
    "json",
    "object",
    "stringify",
    "open",
    "bracket",
    "close",
    "bracket",
    "stringify",
    "method",
    "json",
    "object",
    "function",
    "saved",
    "inside",
    "object",
    "call",
    "function",
    "using",
    "brackets",
    "brackets",
    "give",
    "javascript",
    "object",
    "want",
    "convert",
    "like",
    "product",
    "2",
    "convert",
    "object",
    "json",
    "let",
    "console",
    "log",
    "result",
    "save",
    "console",
    "display",
    "product",
    "using",
    "json",
    "syntax",
    "scroll",
    "notice",
    "function",
    "saved",
    "object",
    "inside",
    "json",
    "json",
    "support",
    "functions",
    "one",
    "thing",
    "note",
    "stringify",
    "actually",
    "results",
    "string",
    "front",
    "type",
    "type",
    "save",
    "tell",
    "us",
    "result",
    "gives",
    "actually",
    "string",
    "remove",
    "save",
    "json",
    "string",
    "ready",
    "sent",
    "another",
    "computer",
    "saved",
    "storage",
    "next",
    "let",
    "learn",
    "convert",
    "way",
    "json",
    "back",
    "javascript",
    "object",
    "use",
    "another",
    "method",
    "json",
    "object",
    "called",
    "end",
    "type",
    "jon",
    "dop",
    "pars",
    "brackets",
    "brackets",
    "put",
    "json",
    "string",
    "want",
    "convert",
    "actually",
    "json",
    "string",
    "let",
    "make",
    "copy",
    "select",
    "rightclick",
    "copy",
    "let",
    "create",
    "extra",
    "variable",
    "make",
    "clear",
    "const",
    "json",
    "string",
    "make",
    "get",
    "equal",
    "right",
    "click",
    "paste",
    "let",
    "convert",
    "json",
    "string",
    "back",
    "object",
    "putting",
    "pars",
    "finally",
    "result",
    "save",
    "json",
    "pars",
    "turn",
    "json",
    "string",
    "back",
    "javascript",
    "object",
    "json",
    "object",
    "helps",
    "us",
    "convert",
    "back",
    "forth",
    "javascript",
    "object",
    "json",
    "going",
    "learn",
    "next",
    "object",
    "called",
    "local",
    "storage",
    "local",
    "storage",
    "used",
    "save",
    "values",
    "permanently",
    "far",
    "saving",
    "values",
    "variables",
    "however",
    "variables",
    "temporary",
    "exist",
    "current",
    "page",
    "refresh",
    "page",
    "close",
    "page",
    "variables",
    "deleted",
    "example",
    "go",
    "back",
    "rock",
    "paper",
    "scissors",
    "project",
    "open",
    "tab",
    "project",
    "play",
    "games",
    "play",
    "two",
    "games",
    "refresh",
    "page",
    "notice",
    "score",
    "starts",
    "zero",
    "refresh",
    "page",
    "variables",
    "deleted",
    "score",
    "gets",
    "reset",
    "back",
    "zero",
    "however",
    "press",
    "okay",
    "go",
    "superimple",
    "dodev",
    "refresh",
    "page",
    "play",
    "game",
    "notice",
    "score",
    "start",
    "zero",
    "starts",
    "previous",
    "score",
    "even",
    "though",
    "refreshed",
    "page",
    "project",
    "saves",
    "score",
    "local",
    "storage",
    "local",
    "storage",
    "get",
    "deleted",
    "refresh",
    "page",
    "let",
    "learn",
    "use",
    "local",
    "storage",
    "project",
    "let",
    "press",
    "okay",
    "go",
    "back",
    "code",
    "scroll",
    "update",
    "score",
    "update",
    "score",
    "going",
    "save",
    "local",
    "storage",
    "first",
    "first",
    "let",
    "learn",
    "local",
    "storage",
    "works",
    "bottom",
    "going",
    "type",
    "local",
    "capital",
    "storage",
    "object",
    "save",
    "value",
    "inside",
    "local",
    "storage",
    "method",
    "called",
    "set",
    "item",
    "type",
    "dot",
    "set",
    "capital",
    "item",
    "brackets",
    "method",
    "function",
    "saved",
    "inside",
    "object",
    "object",
    "going",
    "give",
    "two",
    "strings",
    "method",
    "first",
    "string",
    "name",
    "going",
    "access",
    "value",
    "save",
    "later",
    "let",
    "use",
    "string",
    "message",
    "name",
    "type",
    "comma",
    "type",
    "value",
    "want",
    "save",
    "local",
    "storage",
    "local",
    "storage",
    "supports",
    "strings",
    "let",
    "save",
    "string",
    "hello",
    "inside",
    "local",
    "storage",
    "save",
    "go",
    "back",
    "tab",
    "play",
    "game",
    "run",
    "code",
    "save",
    "string",
    "local",
    "storage",
    "let",
    "learn",
    "get",
    "string",
    "local",
    "storage",
    "press",
    "okay",
    "scroll",
    "top",
    "first",
    "load",
    "page",
    "going",
    "get",
    "value",
    "local",
    "local",
    "storage",
    "typing",
    "local",
    "capital",
    "storage",
    "getet",
    "item",
    "time",
    "brackets",
    "get",
    "item",
    "method",
    "gets",
    "value",
    "local",
    "storage",
    "going",
    "give",
    "one",
    "string",
    "string",
    "name",
    "used",
    "earlier",
    "message",
    "type",
    "string",
    "message",
    "let",
    "console",
    "log",
    "result",
    "bracket",
    "end",
    "save",
    "get",
    "value",
    "saved",
    "earlier",
    "local",
    "storage",
    "saved",
    "string",
    "hello",
    "exactly",
    "gets",
    "displayed",
    "console",
    "using",
    "local",
    "storage",
    "able",
    "get",
    "value",
    "saved",
    "earlier",
    "even",
    "though",
    "refresh",
    "page",
    "let",
    "save",
    "score",
    "local",
    "storage",
    "get",
    "reset",
    "refresh",
    "page",
    "let",
    "scroll",
    "bottom",
    "instead",
    "using",
    "name",
    "message",
    "going",
    "use",
    "name",
    "score",
    "save",
    "score",
    "instead",
    "string",
    "hello",
    "going",
    "save",
    "score",
    "object",
    "one",
    "problem",
    "local",
    "storage",
    "supports",
    "strings",
    "need",
    "convert",
    "object",
    "string",
    "actually",
    "learned",
    "earlier",
    "using",
    "front",
    "type",
    "json",
    "stringify",
    "brackets",
    "around",
    "score",
    "convert",
    "javascript",
    "object",
    "score",
    "json",
    "string",
    "ready",
    "saved",
    "local",
    "store",
    "save",
    "play",
    "game",
    "run",
    "code",
    "save",
    "score",
    "local",
    "storage",
    "let",
    "press",
    "okay",
    "scroll",
    "top",
    "instead",
    "getting",
    "message",
    "going",
    "get",
    "score",
    "local",
    "storage",
    "save",
    "load",
    "page",
    "able",
    "get",
    "score",
    "saved",
    "last",
    "time",
    "json",
    "string",
    "last",
    "step",
    "instead",
    "resetting",
    "score",
    "zero",
    "every",
    "time",
    "going",
    "use",
    "score",
    "local",
    "storage",
    "remember",
    "string",
    "need",
    "convert",
    "back",
    "object",
    "also",
    "learned",
    "earlier",
    "using",
    "json",
    "pars",
    "front",
    "type",
    "json",
    "pars",
    "open",
    "bracket",
    "end",
    "close",
    "bracket",
    "convert",
    "back",
    "object",
    "save",
    "convert",
    "score",
    "json",
    "string",
    "back",
    "object",
    "use",
    "instead",
    "remove",
    "replace",
    "code",
    "right",
    "click",
    "cut",
    "right",
    "click",
    "paste",
    "remove",
    "save",
    "load",
    "page",
    "load",
    "score",
    "local",
    "storage",
    "play",
    "game",
    "notice",
    "score",
    "start",
    "zero",
    "starts",
    "score",
    "last",
    "time",
    "let",
    "review",
    "step",
    "step",
    "first",
    "update",
    "score",
    "code",
    "update",
    "score",
    "going",
    "save",
    "local",
    "storage",
    "using",
    "local",
    "storage",
    "set",
    "item",
    "local",
    "storage",
    "supports",
    "strings",
    "convert",
    "score",
    "object",
    "json",
    "string",
    "using",
    "json",
    "stringify",
    "saved",
    "local",
    "storage",
    "load",
    "page",
    "going",
    "load",
    "score",
    "saved",
    "local",
    "storage",
    "using",
    "local",
    "storage",
    "getet",
    "item",
    "score",
    "saved",
    "json",
    "string",
    "need",
    "convert",
    "back",
    "object",
    "using",
    "use",
    "json",
    "object",
    "local",
    "storage",
    "object",
    "save",
    "score",
    "permanently",
    "let",
    "press",
    "okay",
    "okay",
    "last",
    "feature",
    "going",
    "add",
    "click",
    "reset",
    "score",
    "button",
    "also",
    "need",
    "remove",
    "score",
    "local",
    "storage",
    "otherwise",
    "press",
    "reset",
    "score",
    "refresh",
    "play",
    "game",
    "grab",
    "old",
    "score",
    "local",
    "storage",
    "reset",
    "score",
    "really",
    "work",
    "let",
    "press",
    "okay",
    "fix",
    "issue",
    "set",
    "score",
    "button",
    "end",
    "going",
    "remove",
    "score",
    "local",
    "storage",
    "type",
    "local",
    "storage",
    "method",
    "called",
    "remove",
    "item",
    "brackets",
    "brackets",
    "going",
    "tell",
    "local",
    "storage",
    "value",
    "want",
    "remove",
    "going",
    "remove",
    "score",
    "type",
    "string",
    "score",
    "save",
    "click",
    "reset",
    "button",
    "refresh",
    "page",
    "try",
    "play",
    "game",
    "unfortunately",
    "gives",
    "us",
    "error",
    "happening",
    "remember",
    "remov",
    "score",
    "local",
    "storage",
    "load",
    "page",
    "actually",
    "exist",
    "something",
    "exist",
    "local",
    "storage",
    "going",
    "give",
    "us",
    "value",
    "called",
    "null",
    "bottom",
    "try",
    "access",
    "property",
    "null",
    "give",
    "us",
    "error",
    "see",
    "solve",
    "problem",
    "scroll",
    "one",
    "way",
    "solve",
    "problem",
    "score",
    "local",
    "storage",
    "going",
    "give",
    "default",
    "value",
    "let",
    "look",
    "line",
    "going",
    "check",
    "score",
    "null",
    "using",
    "statement",
    "brackets",
    "curly",
    "brackets",
    "check",
    "score",
    "equal",
    "null",
    "equal",
    "null",
    "going",
    "give",
    "default",
    "score",
    "inside",
    "curly",
    "brackets",
    "make",
    "score",
    "equal",
    "default",
    "object",
    "earlier",
    "wins",
    "zero",
    "losses",
    "zero",
    "ties",
    "zero",
    "remember",
    "need",
    "reassign",
    "variable",
    "change",
    "const",
    "let",
    "save",
    "score",
    "null",
    "removed",
    "earlier",
    "give",
    "default",
    "score",
    "everything",
    "work",
    "play",
    "game",
    "notice",
    "score",
    "starts",
    "zero",
    "default",
    "score",
    "everything",
    "working",
    "create",
    "score",
    "feature",
    "rock",
    "paper",
    "scissors",
    "project",
    "well",
    "reset",
    "score",
    "feature",
    "next",
    "going",
    "use",
    "shortcuts",
    "simplify",
    "code",
    "shortcuts",
    "things",
    "learned",
    "boolean",
    "lesson",
    "remember",
    "null",
    "falsy",
    "value",
    "means",
    "behave",
    "like",
    "false",
    "shortcut",
    "use",
    "instead",
    "checking",
    "score",
    "equal",
    "null",
    "also",
    "remove",
    "check",
    "score",
    "score",
    "thing",
    "checking",
    "null",
    "score",
    "null",
    "score",
    "flip",
    "true",
    "return",
    "true",
    "score",
    "exists",
    "object",
    "return",
    "false",
    "instead",
    "checking",
    "value",
    "equal",
    "null",
    "use",
    "operator",
    "shortcut",
    "also",
    "boolean",
    "lesson",
    "even",
    "shorter",
    "shortcut",
    "notice",
    "code",
    "basically",
    "sets",
    "default",
    "value",
    "score",
    "exist",
    "boolean",
    "lesson",
    "learned",
    "technique",
    "called",
    "default",
    "operator",
    "exactly",
    "need",
    "line",
    "remove",
    "semicolon",
    "type",
    "default",
    "value",
    "want",
    "default",
    "value",
    "object",
    "let",
    "select",
    "rightclick",
    "copy",
    "right",
    "click",
    "paste",
    "select",
    "lines",
    "press",
    "shift",
    "tab",
    "remove",
    "indent",
    "add",
    "semicolon",
    "back",
    "end",
    "way",
    "default",
    "operator",
    "works",
    "left",
    "side",
    "truthy",
    "case",
    "score",
    "use",
    "left",
    "side",
    "left",
    "side",
    "falsy",
    "case",
    "score",
    "null",
    "use",
    "right",
    "side",
    "default",
    "value",
    "thing",
    "code",
    "shortcut",
    "let",
    "comment",
    "code",
    "using",
    "slashstar",
    "bottom",
    "start",
    "slash",
    "leave",
    "reference",
    "save",
    "click",
    "reset",
    "score",
    "refresh",
    "play",
    "game",
    "still",
    "work",
    "perfect",
    "situation",
    "use",
    "default",
    "operator",
    "simplify",
    "code",
    "let",
    "press",
    "okay",
    "going",
    "project",
    "lesson",
    "let",
    "move",
    "learn",
    "details",
    "objects",
    "first",
    "thing",
    "learn",
    "value",
    "null",
    "null",
    "one",
    "falsy",
    "values",
    "javascript",
    "similar",
    "value",
    "undefined",
    "represent",
    "something",
    "value",
    "difference",
    "null",
    "undefined",
    "use",
    "null",
    "intentionally",
    "want",
    "something",
    "empty",
    "example",
    "previous",
    "lesson",
    "learned",
    "function",
    "parameters",
    "give",
    "parameter",
    "default",
    "value",
    "parameter",
    "undefined",
    "use",
    "default",
    "value",
    "however",
    "set",
    "parameter",
    "null",
    "use",
    "default",
    "value",
    "use",
    "null",
    "null",
    "means",
    "intentionally",
    "want",
    "something",
    "empty",
    "cases",
    "though",
    "null",
    "undefined",
    "work",
    "way",
    "okay",
    "next",
    "detail",
    "objects",
    "going",
    "learn",
    "called",
    "autoboxing",
    "let",
    "go",
    "back",
    "objects",
    "ht",
    "hml",
    "open",
    "tab",
    "file",
    "let",
    "also",
    "comment",
    "previous",
    "code",
    "console",
    "get",
    "messy",
    "slashstar",
    "bottom",
    "star",
    "slash",
    "save",
    "let",
    "scroll",
    "learned",
    "lesson",
    "objects",
    "properties",
    "methods",
    "might",
    "surprised",
    "learn",
    "values",
    "also",
    "properties",
    "methods",
    "example",
    "bottom",
    "going",
    "type",
    "console",
    "log",
    "string",
    "hello",
    "dot",
    "notation",
    "property",
    "called",
    "length",
    "strings",
    "also",
    "properties",
    "length",
    "property",
    "tells",
    "us",
    "many",
    "characters",
    "letters",
    "string",
    "hello",
    "five",
    "letters",
    "save",
    "length",
    "property",
    "five",
    "another",
    "example",
    "type",
    "string",
    "hello",
    "dot",
    "notation",
    "method",
    "time",
    "2",
    "capital",
    "u",
    "upper",
    "capital",
    "c",
    "case",
    "brackets",
    "string",
    "also",
    "method",
    "called",
    "two",
    "uppercase",
    "method",
    "gives",
    "us",
    "copy",
    "string",
    "letters",
    "capitalized",
    "uppercase",
    "save",
    "give",
    "us",
    "hello",
    "capital",
    "letters",
    "see",
    "simple",
    "values",
    "like",
    "strings",
    "also",
    "properties",
    "methods",
    "might",
    "wondering",
    "strings",
    "objects",
    "strings",
    "properties",
    "methods",
    "answer",
    "javascript",
    "special",
    "feature",
    "called",
    "auto",
    "boxing",
    "javascript",
    "automatically",
    "wraps",
    "string",
    "special",
    "object",
    "first",
    "object",
    "property",
    "length",
    "method",
    "uppercase",
    "done",
    "automatically",
    "see",
    "special",
    "object",
    "wrapped",
    "around",
    "string",
    "feature",
    "called",
    "autoboxing",
    "javascript",
    "automat",
    "automatically",
    "wraps",
    "string",
    "object",
    "like",
    "box",
    "autoboxing",
    "also",
    "works",
    "types",
    "values",
    "like",
    "numbers",
    "booleans",
    "thing",
    "auto",
    "boxing",
    "work",
    "null",
    "undefined",
    "would",
    "give",
    "us",
    "error",
    "last",
    "detail",
    "going",
    "learn",
    "objects",
    "really",
    "important",
    "detail",
    "objects",
    "references",
    "demonstrate",
    "let",
    "create",
    "new",
    "variable",
    "object",
    "const",
    "object",
    "one",
    "make",
    "equal",
    "object",
    "inside",
    "object",
    "let",
    "property",
    "message",
    "colon",
    "string",
    "hello",
    "might",
    "think",
    "create",
    "object",
    "like",
    "create",
    "value",
    "values",
    "inside",
    "save",
    "whole",
    "thing",
    "variable",
    "however",
    "actually",
    "works",
    "little",
    "differently",
    "create",
    "object",
    "actual",
    "value",
    "created",
    "somewhere",
    "computer",
    "memory",
    "variable",
    "actually",
    "gets",
    "reference",
    "points",
    "location",
    "computer",
    "memory",
    "like",
    "shortcut",
    "computer",
    "shortcut",
    "points",
    "actual",
    "file",
    "folder",
    "way",
    "actually",
    "see",
    "reference",
    "know",
    "reference",
    "object",
    "somewhere",
    "else",
    "computer",
    "memory",
    "reason",
    "works",
    "way",
    "make",
    "language",
    "efficient",
    "example",
    "line",
    "create",
    "variable",
    "const",
    "call",
    "object",
    "2",
    "make",
    "equal",
    "object",
    "one",
    "code",
    "actually",
    "make",
    "copy",
    "object",
    "makes",
    "copy",
    "reference",
    "points",
    "object",
    "makes",
    "language",
    "efficient",
    "really",
    "big",
    "object",
    "good",
    "copy",
    "entire",
    "object",
    "instead",
    "javas",
    "copies",
    "reference",
    "much",
    "faster",
    "called",
    "copy",
    "reference",
    "learned",
    "objects",
    "actually",
    "references",
    "let",
    "learn",
    "interesting",
    "behaviors",
    "references",
    "bottom",
    "going",
    "change",
    "property",
    "message",
    "object",
    "typing",
    "object",
    "object",
    "message",
    "property",
    "make",
    "equal",
    "something",
    "else",
    "like",
    "string",
    "good",
    "job",
    "console",
    "log",
    "object",
    "one",
    "save",
    "notice",
    "able",
    "change",
    "message",
    "property",
    "even",
    "though",
    "created",
    "object",
    "one",
    "const",
    "variable",
    "contains",
    "reference",
    "points",
    "object",
    "const",
    "prevents",
    "us",
    "changing",
    "reference",
    "variable",
    "prevent",
    "us",
    "reaching",
    "reference",
    "changing",
    "object",
    "pointing",
    "careful",
    "working",
    "objects",
    "even",
    "though",
    "use",
    "const",
    "still",
    "change",
    "values",
    "inside",
    "object",
    "another",
    "interesting",
    "behavior",
    "line",
    "actually",
    "copying",
    "object",
    "variable",
    "copying",
    "reference",
    "object",
    "two",
    "actually",
    "reference",
    "object",
    "one",
    "actually",
    "point",
    "object",
    "computer",
    "memory",
    "bottom",
    "type",
    "console",
    "log",
    "object",
    "2",
    "save",
    "notice",
    "object",
    "two",
    "message",
    "property",
    "also",
    "changed",
    "even",
    "though",
    "changed",
    "object",
    "one",
    "last",
    "interesting",
    "behavior",
    "ca",
    "compare",
    "objects",
    "directly",
    "example",
    "let",
    "go",
    "bottom",
    "create",
    "new",
    "object",
    "using",
    "const",
    "object",
    "3",
    "make",
    "equal",
    "object",
    "inside",
    "going",
    "values",
    "object",
    "one",
    "property",
    "message",
    "value",
    "string",
    "good",
    "job",
    "let",
    "try",
    "comparing",
    "object",
    "3",
    "object",
    "one",
    "type",
    "console",
    "log",
    "check",
    "object",
    "3",
    "equal",
    "object",
    "one",
    "save",
    "tell",
    "us",
    "two",
    "objects",
    "equal",
    "even",
    "though",
    "values",
    "inside",
    "remember",
    "objects",
    "references",
    "object",
    "3",
    "also",
    "contains",
    "reference",
    "code",
    "compares",
    "references",
    "values",
    "inside",
    "object",
    "object",
    "3",
    "different",
    "reference",
    "object",
    "one",
    "code",
    "results",
    "false",
    "console",
    "log",
    "check",
    "object",
    "2",
    "equal",
    "object",
    "1",
    "object",
    "two",
    "reference",
    "object",
    "one",
    "points",
    "object",
    "computer",
    "memory",
    "save",
    "tell",
    "us",
    "two",
    "variables",
    "reference",
    "remember",
    "comparing",
    "two",
    "variables",
    "contain",
    "objects",
    "actually",
    "comparing",
    "references",
    "values",
    "inside",
    "want",
    "compare",
    "values",
    "inside",
    "would",
    "manually",
    "checking",
    "message",
    "property",
    "message",
    "property",
    "worry",
    "object",
    "references",
    "little",
    "confusing",
    "first",
    "work",
    "get",
    "used",
    "last",
    "thing",
    "going",
    "learn",
    "lesson",
    "shortcuts",
    "objects",
    "first",
    "let",
    "make",
    "copy",
    "object",
    "3",
    "select",
    "code",
    "rightclick",
    "copy",
    "bottom",
    "scroll",
    "right",
    "click",
    "paste",
    "let",
    "rename",
    "variable",
    "object",
    "4",
    "let",
    "say",
    "want",
    "get",
    "message",
    "property",
    "object",
    "typing",
    "object",
    "message",
    "let",
    "also",
    "say",
    "want",
    "save",
    "variable",
    "also",
    "called",
    "message",
    "front",
    "type",
    "con",
    "message",
    "make",
    "equal",
    "value",
    "variable",
    "name",
    "property",
    "name",
    "actually",
    "shortcut",
    "use",
    "shortcut",
    "going",
    "type",
    "const",
    "curly",
    "brackets",
    "message",
    "make",
    "equal",
    "object",
    "4",
    "shortcut",
    "called",
    "destructuring",
    "take",
    "message",
    "property",
    "object",
    "4",
    "save",
    "variable",
    "called",
    "message",
    "line",
    "code",
    "thing",
    "code",
    "let",
    "comment",
    "line",
    "using",
    "double",
    "slash",
    "keep",
    "reference",
    "bottom",
    "type",
    "message",
    "save",
    "display",
    "good",
    "job",
    "destructuring",
    "shortcut",
    "took",
    "property",
    "object",
    "saved",
    "message",
    "variable",
    "next",
    "use",
    "destructuring",
    "shortcut",
    "multiple",
    "properties",
    "example",
    "let",
    "add",
    "another",
    "property",
    "object",
    "using",
    "comma",
    "add",
    "price",
    "property",
    "colon",
    "take",
    "price",
    "property",
    "object",
    "typing",
    "message",
    "comma",
    "price",
    "take",
    "price",
    "property",
    "object",
    "save",
    "variable",
    "called",
    "price",
    "price",
    "save",
    "display",
    "799",
    "destructuring",
    "shortcut",
    "easier",
    "way",
    "take",
    "properties",
    "object",
    "next",
    "shortcut",
    "going",
    "learn",
    "called",
    "shorthand",
    "property",
    "bottom",
    "let",
    "create",
    "new",
    "lines",
    "let",
    "say",
    "want",
    "create",
    "new",
    "object",
    "type",
    "const",
    "let",
    "name",
    "object",
    "5",
    "make",
    "equal",
    "object",
    "inside",
    "ins",
    "object",
    "let",
    "say",
    "want",
    "create",
    "message",
    "property",
    "type",
    "message",
    "colon",
    "value",
    "let",
    "type",
    "variable",
    "message",
    "takes",
    "whatever",
    "inside",
    "message",
    "variable",
    "substitutes",
    "code",
    "bottom",
    "object",
    "5",
    "save",
    "object",
    "property",
    "called",
    "message",
    "value",
    "whatever",
    "inside",
    "message",
    "variable",
    "good",
    "job",
    "actually",
    "shortcut",
    "code",
    "property",
    "variable",
    "name",
    "actually",
    "type",
    "like",
    "message",
    "code",
    "thing",
    "message",
    "colon",
    "message",
    "shortcut",
    "called",
    "shorthand",
    "property",
    "comment",
    "line",
    "using",
    "double",
    "slash",
    "save",
    "see",
    "shortcut",
    "creates",
    "object",
    "last",
    "shortcut",
    "going",
    "learn",
    "called",
    "shorthand",
    "method",
    "end",
    "let",
    "create",
    "new",
    "property",
    "comma",
    "let",
    "name",
    "method",
    "po",
    "save",
    "function",
    "property",
    "type",
    "function",
    "let",
    "name",
    "function",
    "one",
    "brackets",
    "curly",
    "brackets",
    "inside",
    "function",
    "let",
    "method",
    "bottom",
    "let",
    "run",
    "function",
    "ty",
    "typing",
    "object",
    "method",
    "access",
    "function",
    "run",
    "typing",
    "brackets",
    "save",
    "run",
    "code",
    "function",
    "display",
    "method",
    "console",
    "actually",
    "shortcut",
    "writing",
    "bottom",
    "type",
    "method",
    "type",
    "brackets",
    "curly",
    "brackets",
    "string",
    "method",
    "code",
    "thing",
    "code",
    "brackets",
    "create",
    "function",
    "like",
    "function",
    "name",
    "actually",
    "needed",
    "comment",
    "lines",
    "code",
    "save",
    "still",
    "display",
    "method",
    "console",
    "shortcut",
    "lines",
    "code",
    "shortcut",
    "called",
    "shorthand",
    "method",
    "syntax",
    "end",
    "lesson",
    "lesson",
    "learned",
    "another",
    "type",
    "value",
    "called",
    "objects",
    "objects",
    "group",
    "related",
    "values",
    "together",
    "added",
    "score",
    "rock",
    "paper",
    "scissors",
    "game",
    "learned",
    "objects",
    "used",
    "json",
    "local",
    "storage",
    "objects",
    "save",
    "score",
    "permanently",
    "learned",
    "details",
    "objects",
    "like",
    "null",
    "autoboxing",
    "references",
    "learned",
    "useful",
    "shortcuts",
    "like",
    "destructuring",
    "shorthand",
    "properties",
    "shorthand",
    "methods",
    "exercises",
    "help",
    "practice",
    "working",
    "objects",
    "lesson",
    "going",
    "learn",
    "one",
    "important",
    "features",
    "javascript",
    "called",
    "document",
    "object",
    "model",
    "dom",
    "going",
    "use",
    "dom",
    "improve",
    "rock",
    "paper",
    "scissors",
    "project",
    "first",
    "create",
    "new",
    "file",
    "lesson",
    "let",
    "go",
    "code",
    "editor",
    "click",
    "icon",
    "show",
    "files",
    "click",
    "icon",
    "create",
    "new",
    "file",
    "name",
    "file",
    "09",
    "dd",
    "html",
    "press",
    "enter",
    "next",
    "let",
    "copy",
    "objects",
    "html",
    "dom",
    "html",
    "click",
    "open",
    "file",
    "file",
    "click",
    "inside",
    "type",
    "contrl",
    "command",
    "select",
    "code",
    "rightclick",
    "copy",
    "right",
    "click",
    "paste",
    "let",
    "hide",
    "files",
    "prepare",
    "file",
    "lesson",
    "let",
    "scroll",
    "top",
    "change",
    "title",
    "dom",
    "let",
    "delete",
    "javascript",
    "code",
    "previous",
    "lesson",
    "let",
    "save",
    "file",
    "open",
    "browser",
    "right",
    "clicking",
    "open",
    "live",
    "server",
    "let",
    "also",
    "open",
    "console",
    "page",
    "right",
    "click",
    "click",
    "inspect",
    "click",
    "console",
    "close",
    "previous",
    "tabs",
    "well",
    "previous",
    "code",
    "lesson",
    "going",
    "extra",
    "step",
    "setup",
    "inside",
    "body",
    "going",
    "create",
    "button",
    "let",
    "type",
    "code",
    "less",
    "button",
    "greater",
    "inside",
    "button",
    "text",
    "hello",
    "let",
    "save",
    "button",
    "page",
    "ready",
    "learn",
    "document",
    "object",
    "model",
    "dom",
    "previous",
    "lesson",
    "learned",
    "objects",
    "group",
    "multiple",
    "values",
    "together",
    "also",
    "learned",
    "builtin",
    "objects",
    "objects",
    "provided",
    "javascript",
    "examples",
    "objects",
    "console",
    "math",
    "json",
    "local",
    "storage",
    "dom",
    "another",
    "builtin",
    "object",
    "called",
    "document",
    "object",
    "let",
    "go",
    "script",
    "element",
    "going",
    "type",
    "document",
    "object",
    "provided",
    "javascript",
    "actually",
    "seen",
    "document",
    "object",
    "first",
    "lesson",
    "one",
    "first",
    "pieces",
    "code",
    "learned",
    "document",
    "dot",
    "body",
    "inner",
    "capital",
    "html",
    "equals",
    "string",
    "hello",
    "semicolon",
    "code",
    "removes",
    "everything",
    "page",
    "replaces",
    "text",
    "hello",
    "save",
    "remove",
    "button",
    "put",
    "hello",
    "learned",
    "objects",
    "previous",
    "lesson",
    "fully",
    "understand",
    "syntax",
    "document",
    "object",
    "dot",
    "notation",
    "means",
    "accessing",
    "property",
    "document",
    "object",
    "called",
    "body",
    "body",
    "also",
    "object",
    "use",
    "dot",
    "notation",
    "access",
    "property",
    "body",
    "object",
    "called",
    "inner",
    "html",
    "finally",
    "use",
    "equal",
    "sign",
    "change",
    "inner",
    "html",
    "property",
    "string",
    "hello",
    "see",
    "something",
    "special",
    "inner",
    "html",
    "property",
    "change",
    "property",
    "also",
    "changes",
    "web",
    "page",
    "document",
    "object",
    "web",
    "page",
    "linked",
    "together",
    "let",
    "another",
    "example",
    "go",
    "end",
    "press",
    "enter",
    "type",
    "document",
    "object",
    "use",
    "dot",
    "notation",
    "time",
    "let",
    "access",
    "property",
    "title",
    "change",
    "title",
    "property",
    "using",
    "equal",
    "sign",
    "change",
    "string",
    "good",
    "job",
    "save",
    "changing",
    "title",
    "property",
    "also",
    "change",
    "title",
    "top",
    "tabs",
    "says",
    "good",
    "job",
    "see",
    "document",
    "object",
    "linked",
    "web",
    "page",
    "examples",
    "shows",
    "us",
    "document",
    "object",
    "represents",
    "models",
    "web",
    "page",
    "call",
    "feature",
    "document",
    "object",
    "model",
    "dom",
    "know",
    "dom",
    "means",
    "let",
    "learn",
    "syntax",
    "rules",
    "dom",
    "dom",
    "built",
    "document",
    "object",
    "object",
    "works",
    "way",
    "object",
    "contains",
    "properties",
    "like",
    "body",
    "title",
    "access",
    "using",
    "dot",
    "notation",
    "special",
    "thing",
    "document",
    "object",
    "linked",
    "web",
    "page",
    "means",
    "change",
    "certain",
    "properties",
    "object",
    "also",
    "change",
    "web",
    "page",
    "addition",
    "properties",
    "document",
    "object",
    "also",
    "methods",
    "use",
    "learn",
    "later",
    "lesson",
    "understand",
    "syntax",
    "document",
    "object",
    "let",
    "learn",
    "properties",
    "methods",
    "use",
    "first",
    "let",
    "comment",
    "previous",
    "code",
    "using",
    "slashstar",
    "star",
    "slash",
    "create",
    "new",
    "lines",
    "top",
    "first",
    "property",
    "going",
    "learn",
    "called",
    "property",
    "give",
    "us",
    "title",
    "top",
    "tabs",
    "property",
    "save",
    "give",
    "us",
    "text",
    "top",
    "dom",
    "gets",
    "displayed",
    "console",
    "change",
    "doc",
    "tile",
    "property",
    "change",
    "text",
    "top",
    "tab",
    "type",
    "make",
    "equal",
    "string",
    "changed",
    "save",
    "title",
    "top",
    "tab",
    "changed",
    "see",
    "title",
    "property",
    "linked",
    "title",
    "top",
    "tab",
    "use",
    "get",
    "title",
    "also",
    "use",
    "change",
    "title",
    "next",
    "going",
    "learn",
    "another",
    "property",
    "called",
    "let",
    "go",
    "code",
    "let",
    "type",
    "special",
    "property",
    "literally",
    "get",
    "body",
    "html",
    "element",
    "element",
    "put",
    "inside",
    "javascript",
    "let",
    "actually",
    "see",
    "works",
    "open",
    "bracket",
    "close",
    "bracket",
    "save",
    "inside",
    "console",
    "tell",
    "us",
    "body",
    "html",
    "element",
    "hover",
    "tell",
    "us",
    "exactly",
    "body",
    "page",
    "expand",
    "see",
    "code",
    "exactly",
    "code",
    "shows",
    "us",
    "one",
    "important",
    "features",
    "javascript",
    "html",
    "elements",
    "inside",
    "javascript",
    "document",
    "object",
    "dom",
    "combines",
    "javascript",
    "html",
    "together",
    "gives",
    "javascript",
    "control",
    "web",
    "page",
    "okay",
    "html",
    "element",
    "inside",
    "javascript",
    "really",
    "important",
    "thing",
    "know",
    "html",
    "element",
    "inside",
    "javascript",
    "like",
    "html",
    "element",
    "converted",
    "javascript",
    "object",
    "example",
    "console",
    "log",
    "type",
    "document",
    "body",
    "save",
    "tell",
    "us",
    "body",
    "html",
    "element",
    "object",
    "inside",
    "javascript",
    "like",
    "object",
    "properties",
    "methods",
    "use",
    "one",
    "useful",
    "property",
    "body",
    "element",
    "inner",
    "html",
    "saw",
    "earlier",
    "let",
    "type",
    "document",
    "dot",
    "body",
    "dot",
    "inner",
    "capital",
    "html",
    "inner",
    "html",
    "property",
    "controls",
    "html",
    "inside",
    "body",
    "called",
    "inner",
    "html",
    "access",
    "property",
    "give",
    "us",
    "html",
    "inside",
    "body",
    "let",
    "confirm",
    "save",
    "inner",
    "html",
    "give",
    "us",
    "html",
    "inside",
    "body",
    "element",
    "change",
    "inner",
    "html",
    "property",
    "change",
    "html",
    "inside",
    "body",
    "element",
    "let",
    "create",
    "new",
    "line",
    "type",
    "document",
    "dot",
    "body",
    "inner",
    "capital",
    "html",
    "change",
    "string",
    "changed",
    "replace",
    "html",
    "inside",
    "body",
    "text",
    "changed",
    "save",
    "exactly",
    "actually",
    "confirm",
    "going",
    "elements",
    "tab",
    "tab",
    "html",
    "css",
    "find",
    "body",
    "element",
    "expand",
    "see",
    "html",
    "replaced",
    "changed",
    "worry",
    "part",
    "part",
    "added",
    "live",
    "server",
    "shows",
    "inner",
    "html",
    "gives",
    "us",
    "control",
    "html",
    "inside",
    "body",
    "get",
    "h",
    "html",
    "also",
    "change",
    "html",
    "another",
    "feature",
    "inner",
    "html",
    "replace",
    "html",
    "new",
    "html",
    "code",
    "text",
    "example",
    "instead",
    "text",
    "replace",
    "code",
    "less",
    "button",
    "greater",
    "also",
    "less",
    "slash",
    "button",
    "greater",
    "html",
    "code",
    "creating",
    "button",
    "inside",
    "button",
    "let",
    "put",
    "text",
    "good",
    "job",
    "code",
    "replace",
    "html",
    "inside",
    "body",
    "new",
    "html",
    "save",
    "removes",
    "previous",
    "html",
    "new",
    "html",
    "creates",
    "button",
    "using",
    "inner",
    "html",
    "property",
    "javascript",
    "replace",
    "html",
    "inside",
    "body",
    "whatever",
    "want",
    "full",
    "control",
    "web",
    "page",
    "right",
    "going",
    "learn",
    "method",
    "document",
    "object",
    "use",
    "reminder",
    "method",
    "function",
    "saved",
    "inside",
    "object",
    "going",
    "learn",
    "important",
    "method",
    "called",
    "document",
    "query",
    "selector",
    "learned",
    "lets",
    "us",
    "get",
    "body",
    "element",
    "put",
    "inside",
    "javascript",
    "document",
    "query",
    "selector",
    "lets",
    "us",
    "get",
    "element",
    "page",
    "put",
    "inside",
    "javascript",
    "let",
    "give",
    "try",
    "first",
    "comment",
    "previous",
    "code",
    "using",
    "slashstar",
    "star",
    "slash",
    "let",
    "create",
    "new",
    "lines",
    "top",
    "let",
    "type",
    "document",
    "query",
    "capital",
    "selector",
    "brackets",
    "document",
    "query",
    "selector",
    "lets",
    "us",
    "get",
    "element",
    "page",
    "put",
    "inside",
    "javascript",
    "brackets",
    "going",
    "put",
    "string",
    "string",
    "tells",
    "javascript",
    "html",
    "element",
    "get",
    "page",
    "type",
    "button",
    "get",
    "first",
    "button",
    "element",
    "page",
    "put",
    "inside",
    "javascript",
    "let",
    "confirm",
    "console",
    "log",
    "close",
    "bracket",
    "save",
    "let",
    "go",
    "back",
    "console",
    "tell",
    "us",
    "document",
    "query",
    "selector",
    "got",
    "button",
    "element",
    "put",
    "inside",
    "javascript",
    "see",
    "console",
    "hover",
    "button",
    "element",
    "tell",
    "us",
    "exactly",
    "button",
    "page",
    "document",
    "query",
    "selector",
    "get",
    "element",
    "page",
    "put",
    "inside",
    "javascript",
    "string",
    "tells",
    "element",
    "get",
    "type",
    "button",
    "get",
    "first",
    "button",
    "element",
    "page",
    "type",
    "body",
    "get",
    "first",
    "body",
    "element",
    "page",
    "thing",
    "let",
    "change",
    "back",
    "button",
    "example",
    "save",
    "remember",
    "html",
    "element",
    "inside",
    "javascript",
    "javascript",
    "object",
    "button",
    "element",
    "also",
    "object",
    "properties",
    "methods",
    "use",
    "every",
    "html",
    "element",
    "actually",
    "property",
    "called",
    "inner",
    "html",
    "lets",
    "us",
    "control",
    "html",
    "inside",
    "element",
    "button",
    "element",
    "let",
    "type",
    "end",
    "dot",
    "inner",
    "html",
    "give",
    "us",
    "html",
    "inside",
    "button",
    "save",
    "give",
    "us",
    "hello",
    "change",
    "inner",
    "html",
    "property",
    "change",
    "html",
    "inside",
    "button",
    "let",
    "make",
    "copy",
    "code",
    "select",
    "rightclick",
    "copy",
    "right",
    "click",
    "paste",
    "let",
    "change",
    "inner",
    "html",
    "property",
    "using",
    "equal",
    "sign",
    "string",
    "changed",
    "change",
    "html",
    "inside",
    "button",
    "changed",
    "save",
    "see",
    "text",
    "inside",
    "button",
    "changed",
    "little",
    "syntax",
    "shortcut",
    "going",
    "show",
    "dot",
    "notation",
    "actually",
    "put",
    "multiple",
    "lines",
    "type",
    "document",
    "query",
    "selector",
    "put",
    "doin",
    "html",
    "separate",
    "line",
    "make",
    "easier",
    "read",
    "make",
    "sure",
    "put",
    "tab",
    "front",
    "know",
    "continuation",
    "previous",
    "line",
    "okay",
    "using",
    "document",
    "query",
    "selector",
    "get",
    "element",
    "page",
    "put",
    "inside",
    "javascript",
    "control",
    "h",
    "hml",
    "inside",
    "element",
    "allows",
    "us",
    "change",
    "parts",
    "page",
    "need",
    "next",
    "two",
    "buttons",
    "page",
    "let",
    "go",
    "create",
    "another",
    "button",
    "using",
    "less",
    "button",
    "greater",
    "text",
    "second",
    "button",
    "save",
    "two",
    "buttons",
    "page",
    "document",
    "query",
    "selector",
    "get",
    "first",
    "button",
    "page",
    "get",
    "second",
    "button",
    "solution",
    "going",
    "add",
    "attribute",
    "button",
    "called",
    "class",
    "attribute",
    "opening",
    "tag",
    "going",
    "type",
    "space",
    "class",
    "equals",
    "double",
    "quotes",
    "class",
    "attribute",
    "sort",
    "adds",
    "label",
    "button",
    "inside",
    "double",
    "quotes",
    "going",
    "label",
    "button",
    "js",
    "dash",
    "button",
    "labeled",
    "button",
    "select",
    "using",
    "document",
    "query",
    "selector",
    "bottom",
    "type",
    "document",
    "query",
    "selector",
    "brackets",
    "type",
    "string",
    "inside",
    "time",
    "going",
    "start",
    "dot",
    "start",
    "dot",
    "means",
    "going",
    "look",
    "class",
    "rather",
    "element",
    "name",
    "going",
    "look",
    "class",
    "button",
    "document",
    "query",
    "selector",
    "select",
    "element",
    "class",
    "js",
    "button",
    "element",
    "let",
    "confirm",
    "console",
    "logging",
    "code",
    "save",
    "see",
    "code",
    "gives",
    "us",
    "second",
    "button",
    "page",
    "using",
    "class",
    "attribute",
    "starting",
    "dot",
    "query",
    "selector",
    "get",
    "specific",
    "element",
    "page",
    "put",
    "javascript",
    "way",
    "start",
    "dot",
    "called",
    "called",
    "class",
    "selector",
    "also",
    "used",
    "css",
    "style",
    "elements",
    "specific",
    "class",
    "fact",
    "anything",
    "use",
    "css",
    "also",
    "used",
    "string",
    "also",
    "common",
    "practice",
    "start",
    "class",
    "make",
    "clear",
    "class",
    "used",
    "javascript",
    "html",
    "elements",
    "javascript",
    "objects",
    "second",
    "button",
    "also",
    "object",
    "remember",
    "objects",
    "values",
    "save",
    "inside",
    "variable",
    "instead",
    "let",
    "create",
    "variable",
    "using",
    "const",
    "name",
    "variable",
    "button",
    "capital",
    "e",
    "element",
    "usually",
    "end",
    "variable",
    "name",
    "element",
    "lm",
    "make",
    "clear",
    "clear",
    "html",
    "element",
    "inside",
    "variable",
    "finally",
    "type",
    "equal",
    "sign",
    "save",
    "element",
    "remove",
    "extra",
    "bracket",
    "variable",
    "button",
    "element",
    "save",
    "tell",
    "us",
    "second",
    "button",
    "sav",
    "saved",
    "inside",
    "variable",
    "using",
    "dom",
    "get",
    "html",
    "elements",
    "page",
    "put",
    "inside",
    "javascript",
    "save",
    "variable",
    "dom",
    "combines",
    "javascript",
    "html",
    "together",
    "gives",
    "javascript",
    "full",
    "control",
    "web",
    "page",
    "right",
    "learned",
    "use",
    "dom",
    "let",
    "practical",
    "examples",
    "actually",
    "prepared",
    "projects",
    "lesson",
    "open",
    "projects",
    "go",
    "browser",
    "create",
    "new",
    "tab",
    "top",
    "type",
    "super",
    "simple",
    "sl",
    "projects",
    "slod",
    "press",
    "enter",
    "page",
    "working",
    "three",
    "projects",
    "youtube",
    "subscribe",
    "button",
    "rock",
    "paper",
    "scissors",
    "project",
    "working",
    "last",
    "lessons",
    "amazon",
    "shipping",
    "calculator",
    "notice",
    "projects",
    "modify",
    "web",
    "page",
    "going",
    "using",
    "dom",
    "create",
    "projects",
    "next",
    "lesson",
    "going",
    "use",
    "css",
    "style",
    "projects",
    "make",
    "look",
    "nice",
    "preview",
    "clicking",
    "using",
    "css",
    "make",
    "sub",
    "subscribe",
    "button",
    "look",
    "like",
    "actual",
    "subscribe",
    "button",
    "youtube",
    "click",
    "link",
    "see",
    "rock",
    "paper",
    "scissors",
    "game",
    "see",
    "make",
    "look",
    "really",
    "nice",
    "icons",
    "lesson",
    "going",
    "focus",
    "functionality",
    "styling",
    "let",
    "go",
    "back",
    "projects",
    "click",
    "back",
    "click",
    "back",
    "projects",
    "sdom",
    "going",
    "create",
    "functionality",
    "projects",
    "first",
    "start",
    "let",
    "create",
    "new",
    "file",
    "projects",
    "go",
    "code",
    "editor",
    "click",
    "icon",
    "click",
    "icon",
    "create",
    "new",
    "file",
    "let",
    "name",
    "file",
    "09",
    "projects",
    "html",
    "press",
    "enter",
    "let",
    "copy",
    "dom",
    "html",
    "file",
    "open",
    "click",
    "type",
    "control",
    "command",
    "select",
    "code",
    "rightclick",
    "copy",
    "right",
    "click",
    "paste",
    "let",
    "close",
    "files",
    "prepare",
    "file",
    "let",
    "scroll",
    "change",
    "title",
    "dom",
    "projects",
    "let",
    "remove",
    "html",
    "keep",
    "script",
    "element",
    "also",
    "remove",
    "javascript",
    "finally",
    "let",
    "save",
    "file",
    "open",
    "browser",
    "right",
    "clicking",
    "open",
    "live",
    "server",
    "let",
    "also",
    "open",
    "console",
    "case",
    "right",
    "click",
    "click",
    "inspect",
    "click",
    "console",
    "right",
    "ready",
    "start",
    "projects",
    "let",
    "go",
    "back",
    "super",
    "simple",
    "dodev",
    "start",
    "creating",
    "youtube",
    "subscribe",
    "button",
    "let",
    "actually",
    "press",
    "refresh",
    "get",
    "back",
    "normal",
    "click",
    "button",
    "change",
    "subscribe",
    "red",
    "first",
    "let",
    "create",
    "html",
    "elements",
    "project",
    "go",
    "body",
    "create",
    "new",
    "lines",
    "let",
    "create",
    "paragraph",
    "first",
    "type",
    "less",
    "p",
    "greater",
    "inside",
    "paragraph",
    "text",
    "youtube",
    "subscribe",
    "button",
    "let",
    "create",
    "button",
    "next",
    "line",
    "type",
    "less",
    "button",
    "greater",
    "inside",
    "button",
    "subscribe",
    "let",
    "save",
    "go",
    "back",
    "tab",
    "html",
    "elements",
    "need",
    "let",
    "make",
    "interactive",
    "javascript",
    "remember",
    "process",
    "first",
    "figure",
    "steps",
    "need",
    "called",
    "algorithm",
    "convert",
    "steps",
    "code",
    "steps",
    "need",
    "click",
    "button",
    "text",
    "subscribe",
    "change",
    "subscribed",
    "otherwise",
    "change",
    "back",
    "let",
    "convert",
    "steps",
    "code",
    "let",
    "go",
    "button",
    "element",
    "going",
    "add",
    "onclick",
    "attribute",
    "type",
    "space",
    "click",
    "equals",
    "double",
    "quotes",
    "inside",
    "write",
    "javascript",
    "first",
    "need",
    "get",
    "text",
    "inside",
    "button",
    "learned",
    "earlier",
    "use",
    "document",
    "query",
    "selector",
    "put",
    "button",
    "javascript",
    "use",
    "inner",
    "html",
    "get",
    "html",
    "inside",
    "button",
    "code",
    "let",
    "type",
    "document",
    "query",
    "selector",
    "brackets",
    "string",
    "learned",
    "going",
    "use",
    "class",
    "attribute",
    "select",
    "specific",
    "button",
    "opening",
    "tag",
    "let",
    "add",
    "class",
    "attribute",
    "let",
    "make",
    "class",
    "subscribe",
    "dash",
    "button",
    "inside",
    "document",
    "query",
    "selector",
    "going",
    "type",
    "dot",
    "select",
    "class",
    "going",
    "select",
    "class",
    "subscribe",
    "das",
    "button",
    "let",
    "confirm",
    "got",
    "button",
    "front",
    "save",
    "let",
    "click",
    "button",
    "show",
    "us",
    "document",
    "query",
    "selector",
    "got",
    "button",
    "page",
    "let",
    "save",
    "button",
    "variable",
    "use",
    "later",
    "instead",
    "let",
    "type",
    "const",
    "create",
    "variable",
    "name",
    "button",
    "element",
    "make",
    "equal",
    "result",
    "button",
    "inside",
    "javascript",
    "going",
    "check",
    "text",
    "inside",
    "button",
    "subscribe",
    "check",
    "text",
    "use",
    "statement",
    "bottom",
    "going",
    "type",
    "brackets",
    "curly",
    "brackets",
    "inside",
    "condition",
    "let",
    "get",
    "text",
    "inside",
    "button",
    "type",
    "button",
    "element",
    "inner",
    "capital",
    "html",
    "going",
    "check",
    "equal",
    "subscribe",
    "type",
    "triple",
    "equal",
    "string",
    "subscribe",
    "equal",
    "subscribe",
    "inside",
    "curly",
    "brackets",
    "going",
    "change",
    "text",
    "button",
    "subscribed",
    "let",
    "type",
    "code",
    "button",
    "element",
    "inner",
    "capital",
    "htm",
    "l",
    "change",
    "equal",
    "sign",
    "string",
    "subscribed",
    "last",
    "step",
    "otherwise",
    "change",
    "back",
    "add",
    "else",
    "statement",
    "else",
    "curly",
    "brackets",
    "inside",
    "going",
    "change",
    "text",
    "back",
    "subscribe",
    "let",
    "type",
    "button",
    "element",
    "inner",
    "capital",
    "html",
    "make",
    "equal",
    "string",
    "subscribe",
    "save",
    "try",
    "project",
    "make",
    "sure",
    "text",
    "inside",
    "button",
    "spaces",
    "new",
    "lines",
    "around",
    "looks",
    "like",
    "show",
    "second",
    "let",
    "go",
    "project",
    "try",
    "click",
    "button",
    "change",
    "text",
    "subscribed",
    "click",
    "go",
    "back",
    "original",
    "text",
    "create",
    "subscribe",
    "button",
    "project",
    "using",
    "dom",
    "let",
    "go",
    "back",
    "code",
    "show",
    "add",
    "new",
    "lines",
    "spaces",
    "around",
    "text",
    "actually",
    "going",
    "problems",
    "save",
    "code",
    "go",
    "back",
    "project",
    "click",
    "button",
    "notice",
    "longer",
    "changes",
    "text",
    "bunch",
    "spaces",
    "around",
    "text",
    "spaces",
    "show",
    "inner",
    "html",
    "inner",
    "html",
    "equal",
    "exactly",
    "subscribe",
    "solve",
    "problem",
    "spaces",
    "around",
    "text",
    "solve",
    "going",
    "use",
    "different",
    "property",
    "html",
    "element",
    "instead",
    "inner",
    "html",
    "property",
    "going",
    "use",
    "property",
    "inner",
    "capital",
    "text",
    "inner",
    "text",
    "give",
    "us",
    "text",
    "inside",
    "element",
    "without",
    "spaces",
    "around",
    "equal",
    "exactly",
    "subscribe",
    "save",
    "go",
    "back",
    "project",
    "click",
    "start",
    "working",
    "inner",
    "text",
    "property",
    "html",
    "element",
    "gets",
    "us",
    "text",
    "without",
    "extra",
    "spaces",
    "move",
    "second",
    "project",
    "going",
    "show",
    "make",
    "code",
    "cleaner",
    "right",
    "mixing",
    "html",
    "javascript",
    "together",
    "make",
    "code",
    "cleaner",
    "easier",
    "read",
    "going",
    "separate",
    "javascript",
    "code",
    "going",
    "put",
    "code",
    "function",
    "instead",
    "inside",
    "script",
    "element",
    "let",
    "create",
    "function",
    "using",
    "function",
    "name",
    "function",
    "subcribe",
    "brackets",
    "curly",
    "brackets",
    "inside",
    "curly",
    "brackets",
    "going",
    "move",
    "code",
    "let",
    "select",
    "code",
    "right",
    "click",
    "cut",
    "right",
    "click",
    "paste",
    "need",
    "fix",
    "formatting",
    "select",
    "lines",
    "press",
    "tab",
    "times",
    "function",
    "going",
    "go",
    "onclick",
    "attribute",
    "going",
    "call",
    "function",
    "type",
    "function",
    "name",
    "subscribe",
    "brackets",
    "run",
    "code",
    "inside",
    "function",
    "thing",
    "except",
    "code",
    "cleaner",
    "grouped",
    "javascript",
    "code",
    "bottom",
    "longer",
    "mixing",
    "much",
    "html",
    "javascript",
    "together",
    "let",
    "move",
    "second",
    "project",
    "go",
    "back",
    "superimple",
    "dodev",
    "going",
    "work",
    "rock",
    "paper",
    "scissors",
    "project",
    "let",
    "click",
    "link",
    "show",
    "us",
    "next",
    "version",
    "project",
    "notice",
    "changes",
    "first",
    "change",
    "going",
    "show",
    "score",
    "page",
    "instead",
    "popup",
    "second",
    "change",
    "click",
    "one",
    "buttons",
    "play",
    "game",
    "show",
    "us",
    "result",
    "moves",
    "picked",
    "page",
    "rather",
    "popup",
    "let",
    "create",
    "new",
    "file",
    "rock",
    "paper",
    "scissors",
    "game",
    "lesson",
    "let",
    "go",
    "code",
    "editor",
    "click",
    "icon",
    "click",
    "icon",
    "create",
    "new",
    "file",
    "name",
    "paper",
    "das",
    "scissors",
    "html",
    "press",
    "enter",
    "let",
    "copy",
    "previous",
    "rock",
    "paper",
    "scissors",
    "click",
    "type",
    "control",
    "command",
    "right",
    "click",
    "copy",
    "right",
    "click",
    "paste",
    "let",
    "hide",
    "files",
    "let",
    "save",
    "f",
    "file",
    "also",
    "close",
    "08",
    "rock",
    "paper",
    "scissors",
    "finally",
    "open",
    "browser",
    "right",
    "clicking",
    "open",
    "live",
    "server",
    "ready",
    "begin",
    "second",
    "project",
    "let",
    "go",
    "back",
    "project",
    "super",
    "simple",
    "dev",
    "going",
    "start",
    "putting",
    "score",
    "page",
    "going",
    "need",
    "somewhere",
    "put",
    "score",
    "let",
    "create",
    "html",
    "element",
    "scroll",
    "html",
    "scissors",
    "button",
    "let",
    "add",
    "paragraph",
    "element",
    "going",
    "put",
    "score",
    "less",
    "p",
    "greater",
    "let",
    "add",
    "class",
    "attribute",
    "select",
    "element",
    "javascript",
    "opening",
    "tag",
    "type",
    "space",
    "class",
    "equals",
    "double",
    "quotes",
    "score",
    "class",
    "let",
    "get",
    "element",
    "javascript",
    "let",
    "type",
    "document",
    "query",
    "selector",
    "brackets",
    "string",
    "going",
    "type",
    "dot",
    "going",
    "select",
    "class",
    "score",
    "score",
    "get",
    "paragraph",
    "element",
    "put",
    "inside",
    "javascript",
    "let",
    "put",
    "score",
    "inside",
    "element",
    "use",
    "inner",
    "html",
    "dot",
    "inner",
    "capital",
    "html",
    "make",
    "equal",
    "score",
    "scroll",
    "actually",
    "create",
    "score",
    "actually",
    "copy",
    "string",
    "select",
    "rightclick",
    "copy",
    "let",
    "scroll",
    "actually",
    "put",
    "separate",
    "line",
    "make",
    "easier",
    "read",
    "going",
    "type",
    "string",
    "using",
    "back",
    "ticks",
    "inside",
    "string",
    "going",
    "rightclick",
    "paste",
    "put",
    "score",
    "used",
    "popup",
    "inside",
    "element",
    "inside",
    "paragraph",
    "save",
    "go",
    "back",
    "tab",
    "see",
    "displays",
    "score",
    "page",
    "move",
    "want",
    "want",
    "point",
    "something",
    "html",
    "remember",
    "reset",
    "score",
    "button",
    "beside",
    "buttons",
    "determines",
    "element",
    "appears",
    "beside",
    "something",
    "something",
    "paragraph",
    "element",
    "known",
    "block",
    "element",
    "block",
    "element",
    "always",
    "take",
    "entire",
    "line",
    "line",
    "already",
    "buttons",
    "paragraph",
    "take",
    "entire",
    "line",
    "buttons",
    "text",
    "appears",
    "buttons",
    "beside",
    "also",
    "block",
    "element",
    "like",
    "paragraph",
    "takes",
    "entire",
    "line",
    "next",
    "button",
    "appear",
    "get",
    "layout",
    "short",
    "review",
    "layouts",
    "want",
    "learn",
    "detail",
    "check",
    "html",
    "css",
    "full",
    "course",
    "video",
    "description",
    "right",
    "next",
    "feature",
    "going",
    "play",
    "game",
    "also",
    "want",
    "update",
    "score",
    "right",
    "play",
    "update",
    "page",
    "let",
    "fix",
    "javascript",
    "let",
    "go",
    "update",
    "score",
    "scroll",
    "right",
    "update",
    "score",
    "save",
    "local",
    "storage",
    "also",
    "going",
    "update",
    "score",
    "page",
    "actually",
    "use",
    "code",
    "used",
    "let",
    "make",
    "copy",
    "code",
    "rightclick",
    "copy",
    "right",
    "click",
    "paste",
    "add",
    "tab",
    "front",
    "save",
    "try",
    "game",
    "click",
    "move",
    "press",
    "okay",
    "notice",
    "score",
    "also",
    "updates",
    "page",
    "let",
    "go",
    "back",
    "code",
    "cleanup",
    "notice",
    "code",
    "code",
    "great",
    "situation",
    "use",
    "function",
    "reuse",
    "code",
    "bottom",
    "let",
    "create",
    "function",
    "using",
    "function",
    "call",
    "update",
    "score",
    "element",
    "brackets",
    "curly",
    "brackets",
    "move",
    "code",
    "function",
    "select",
    "right",
    "click",
    "copy",
    "right",
    "click",
    "paste",
    "instead",
    "writing",
    "code",
    "multiple",
    "times",
    "going",
    "call",
    "function",
    "update",
    "score",
    "element",
    "brackets",
    "run",
    "code",
    "inside",
    "function",
    "thing",
    "except",
    "reuse",
    "code",
    "let",
    "scroll",
    "back",
    "instead",
    "typing",
    "code",
    "use",
    "function",
    "update",
    "score",
    "element",
    "brackets",
    "let",
    "save",
    "display",
    "score",
    "page",
    "start",
    "click",
    "move",
    "click",
    "okay",
    "update",
    "score",
    "page",
    "last",
    "feature",
    "going",
    "relation",
    "score",
    "click",
    "reset",
    "score",
    "button",
    "also",
    "want",
    "update",
    "score",
    "page",
    "right",
    "click",
    "actually",
    "update",
    "let",
    "go",
    "code",
    "let",
    "go",
    "reset",
    "button",
    "reset",
    "score",
    "going",
    "call",
    "function",
    "update",
    "score",
    "element",
    "brackets",
    "save",
    "let",
    "play",
    "game",
    "press",
    "okay",
    "score",
    "click",
    "reset",
    "score",
    "reset",
    "everything",
    "back",
    "zero",
    "finished",
    "score",
    "let",
    "go",
    "back",
    "super",
    "simple",
    "dev",
    "play",
    "game",
    "going",
    "work",
    "section",
    "going",
    "show",
    "result",
    "moves",
    "picked",
    "page",
    "first",
    "let",
    "create",
    "paragraphs",
    "well",
    "go",
    "html",
    "score",
    "let",
    "add",
    "less",
    "p",
    "greater",
    "going",
    "result",
    "let",
    "give",
    "class",
    "result",
    "let",
    "create",
    "another",
    "paragraph",
    "less",
    "p",
    "greater",
    "give",
    "one",
    "class",
    "equals",
    "moves",
    "let",
    "use",
    "dom",
    "put",
    "result",
    "moves",
    "paragraphs",
    "feel",
    "free",
    "pause",
    "video",
    "want",
    "try",
    "first",
    "let",
    "scroll",
    "display",
    "result",
    "display",
    "popup",
    "instead",
    "popup",
    "going",
    "get",
    "paragraph",
    "put",
    "result",
    "inside",
    "paragraph",
    "type",
    "document",
    "query",
    "selector",
    "brackets",
    "string",
    "type",
    "dot",
    "select",
    "class",
    "result",
    "dot",
    "inner",
    "capital",
    "html",
    "change",
    "result",
    "let",
    "also",
    "display",
    "moves",
    "type",
    "new",
    "lines",
    "document",
    "query",
    "selector",
    "brackets",
    "string",
    "dot",
    "moves",
    "inner",
    "capital",
    "html",
    "make",
    "equal",
    "text",
    "right",
    "let",
    "type",
    "template",
    "string",
    "going",
    "insert",
    "moves",
    "inside",
    "string",
    "type",
    "u",
    "insert",
    "player",
    "move",
    "dollar",
    "curly",
    "brackets",
    "player",
    "move",
    "dash",
    "computers",
    "move",
    "dollar",
    "curly",
    "brackets",
    "computer",
    "move",
    "computer",
    "end",
    "displaying",
    "everything",
    "page",
    "need",
    "popup",
    "end",
    "actually",
    "delete",
    "popup",
    "right",
    "let",
    "save",
    "go",
    "back",
    "tab",
    "play",
    "game",
    "show",
    "result",
    "moves",
    "picked",
    "page",
    "instead",
    "popup",
    "let",
    "play",
    "make",
    "sure",
    "works",
    "finally",
    "click",
    "reset",
    "score",
    "reset",
    "everything",
    "back",
    "zero",
    "displaying",
    "everything",
    "web",
    "page",
    "using",
    "dom",
    "let",
    "move",
    "third",
    "final",
    "project",
    "go",
    "back",
    "super",
    "simple",
    "deev",
    "click",
    "back",
    "go",
    "back",
    "projects",
    "going",
    "create",
    "third",
    "project",
    "amazon",
    "shipping",
    "calculator",
    "way",
    "works",
    "inside",
    "text",
    "box",
    "going",
    "type",
    "cost",
    "order",
    "dollars",
    "order",
    "4",
    "example",
    "25",
    "click",
    "calculate",
    "add",
    "10",
    "shipping",
    "display",
    "total",
    "type",
    "cost",
    "40",
    "like",
    "50",
    "press",
    "calculate",
    "free",
    "shipping",
    "display",
    "total",
    "let",
    "learn",
    "create",
    "using",
    "dom",
    "let",
    "go",
    "back",
    "09",
    "dom",
    "projects",
    "file",
    "start",
    "creating",
    "html",
    "elements",
    "subscribe",
    "button",
    "let",
    "create",
    "paragraph",
    "using",
    "less",
    "p",
    "greater",
    "amazon",
    "shipping",
    "calculator",
    "next",
    "let",
    "create",
    "text",
    "box",
    "html",
    "element",
    "text",
    "box",
    "called",
    "input",
    "type",
    "less",
    "input",
    "greater",
    "input",
    "element",
    "special",
    "require",
    "closing",
    "tag",
    "called",
    "void",
    "element",
    "lastly",
    "let",
    "create",
    "button",
    "create",
    "less",
    "button",
    "greater",
    "calculate",
    "let",
    "save",
    "open",
    "tab",
    "file",
    "right",
    "text",
    "text",
    "box",
    "button",
    "need",
    "one",
    "thing",
    "going",
    "add",
    "final",
    "project",
    "anything",
    "text",
    "box",
    "going",
    "gray",
    "text",
    "called",
    "placeholder",
    "add",
    "placeholder",
    "text",
    "box",
    "going",
    "use",
    "placeholder",
    "attribute",
    "inside",
    "input",
    "element",
    "going",
    "type",
    "space",
    "place",
    "holder",
    "equals",
    "double",
    "quotes",
    "inside",
    "quotes",
    "put",
    "text",
    "want",
    "placeholder",
    "cost",
    "order",
    "save",
    "go",
    "back",
    "project",
    "placeholder",
    "text",
    "box",
    "disappears",
    "start",
    "typing",
    "html",
    "need",
    "let",
    "work",
    "javascript",
    "figure",
    "steps",
    "need",
    "click",
    "button",
    "going",
    "get",
    "text",
    "inside",
    "text",
    "box",
    "amount",
    "40",
    "add",
    "10",
    "shipping",
    "display",
    "total",
    "page",
    "let",
    "convert",
    "steps",
    "code",
    "go",
    "button",
    "add",
    "onclick",
    "attribute",
    "inside",
    "let",
    "also",
    "create",
    "function",
    "separate",
    "javascript",
    "code",
    "like",
    "script",
    "going",
    "create",
    "function",
    "function",
    "let",
    "name",
    "calculate",
    "total",
    "brackets",
    "curly",
    "brackets",
    "inside",
    "click",
    "going",
    "call",
    "function",
    "calculate",
    "total",
    "brackets",
    "next",
    "step",
    "get",
    "text",
    "inside",
    "text",
    "box",
    "first",
    "let",
    "get",
    "input",
    "element",
    "put",
    "inside",
    "j",
    "javascript",
    "use",
    "document",
    "query",
    "selector",
    "add",
    "class",
    "input",
    "select",
    "class",
    "equals",
    "input",
    "inside",
    "javascript",
    "use",
    "document",
    "query",
    "selector",
    "brackets",
    "string",
    "dot",
    "class",
    "input",
    "code",
    "get",
    "input",
    "element",
    "put",
    "inside",
    "javascript",
    "let",
    "confirm",
    "console",
    "logging",
    "result",
    "save",
    "click",
    "calculate",
    "button",
    "give",
    "us",
    "input",
    "element",
    "page",
    "let",
    "save",
    "input",
    "element",
    "variable",
    "use",
    "later",
    "instead",
    "use",
    "const",
    "name",
    "variable",
    "input",
    "element",
    "make",
    "equal",
    "element",
    "remove",
    "extra",
    "bracket",
    "next",
    "need",
    "get",
    "text",
    "inside",
    "input",
    "element",
    "far",
    "lesson",
    "using",
    "property",
    "inner",
    "html",
    "however",
    "input",
    "elements",
    "notice",
    "html",
    "inside",
    "input",
    "elements",
    "going",
    "use",
    "different",
    "property",
    "called",
    "value",
    "bottom",
    "going",
    "type",
    "input",
    "element",
    "value",
    "get",
    "text",
    "inside",
    "text",
    "box",
    "let",
    "confirm",
    "works",
    "console",
    "log",
    "save",
    "let",
    "type",
    "something",
    "text",
    "box",
    "like",
    "50",
    "click",
    "calculate",
    "input",
    "value",
    "give",
    "us",
    "text",
    "inside",
    "text",
    "box",
    "let",
    "save",
    "text",
    "variable",
    "use",
    "later",
    "con",
    "name",
    "variable",
    "cost",
    "make",
    "equal",
    "text",
    "text",
    "box",
    "next",
    "step",
    "check",
    "cost",
    "40",
    "add",
    "10",
    "let",
    "type",
    "brackets",
    "curly",
    "brackets",
    "inside",
    "condition",
    "check",
    "cost",
    "less",
    "40",
    "inside",
    "curly",
    "brackets",
    "cost",
    "equals",
    "plus",
    "10",
    "shipping",
    "remember",
    "change",
    "variable",
    "switch",
    "const",
    "let",
    "finally",
    "going",
    "display",
    "total",
    "cost",
    "page",
    "let",
    "create",
    "paragraph",
    "display",
    "cost",
    "create",
    "paragraph",
    "less",
    "p",
    "greater",
    "let",
    "give",
    "class",
    "total",
    "das",
    "cost",
    "inside",
    "javascript",
    "let",
    "use",
    "document",
    "query",
    "selector",
    "brackets",
    "string",
    "type",
    "dot",
    "class",
    "total",
    "das",
    "cost",
    "going",
    "put",
    "cost",
    "inside",
    "paragraph",
    "use",
    "dot",
    "inner",
    "capital",
    "html",
    "make",
    "equal",
    "let",
    "use",
    "template",
    "string",
    "back",
    "ticks",
    "dollar",
    "going",
    "insert",
    "cost",
    "using",
    "dollar",
    "curly",
    "brackets",
    "cost",
    "let",
    "save",
    "try",
    "project",
    "first",
    "type",
    "cost",
    "40",
    "like",
    "50",
    "press",
    "calculate",
    "going",
    "add",
    "10",
    "shipping",
    "display",
    "total",
    "page",
    "let",
    "try",
    "number",
    "40",
    "like",
    "25",
    "press",
    "calculate",
    "number",
    "look",
    "right",
    "saying",
    "pay",
    "going",
    "let",
    "go",
    "code",
    "let",
    "use",
    "figure",
    "wrong",
    "first",
    "let",
    "cost",
    "make",
    "sure",
    "getting",
    "right",
    "number",
    "text",
    "box",
    "cost",
    "save",
    "let",
    "type",
    "25",
    "press",
    "calculate",
    "give",
    "us",
    "25",
    "getting",
    "correct",
    "text",
    "text",
    "box",
    "let",
    "see",
    "math",
    "working",
    "type",
    "console",
    "log",
    "cost",
    "save",
    "let",
    "try",
    "25",
    "calculate",
    "add",
    "10",
    "things",
    "go",
    "wrong",
    "results",
    "20510",
    "math",
    "properly",
    "let",
    "check",
    "cost",
    "number",
    "make",
    "sure",
    "math",
    "type",
    "type",
    "cost",
    "save",
    "let",
    "type",
    "25",
    "calculate",
    "aha",
    "telling",
    "us",
    "cost",
    "string",
    "actually",
    "number",
    "string",
    "math",
    "remember",
    "strings",
    "lesson",
    "add",
    "string",
    "number",
    "javascript",
    "automatically",
    "convert",
    "number",
    "string",
    "combine",
    "together",
    "combines",
    "25",
    "10",
    "called",
    "type",
    "coercion",
    "whenever",
    "get",
    "value",
    "dom",
    "like",
    "value",
    "string",
    "order",
    "math",
    "manually",
    "convert",
    "string",
    "number",
    "javascript",
    "builtin",
    "function",
    "called",
    "number",
    "code",
    "going",
    "type",
    "capital",
    "n",
    "number",
    "open",
    "bracket",
    "close",
    "bracket",
    "number",
    "function",
    "takes",
    "whatever",
    "brackets",
    "manually",
    "converts",
    "number",
    "save",
    "type",
    "25",
    "press",
    "calculate",
    "cost",
    "number",
    "math",
    "properly",
    "give",
    "us",
    "35",
    "remember",
    "whenever",
    "get",
    "value",
    "dom",
    "value",
    "string",
    "want",
    "math",
    "manually",
    "convert",
    "value",
    "number",
    "first",
    "let",
    "remove",
    "console",
    "logs",
    "used",
    "figure",
    "problem",
    "save",
    "okay",
    "going",
    "add",
    "one",
    "feature",
    "project",
    "let",
    "go",
    "back",
    "superimple",
    "dodev",
    "inside",
    "text",
    "box",
    "going",
    "type",
    "25",
    "press",
    "enter",
    "pressing",
    "enter",
    "also",
    "calculate",
    "total",
    "display",
    "page",
    "let",
    "learn",
    "create",
    "feature",
    "go",
    "back",
    "code",
    "far",
    "course",
    "using",
    "attribute",
    "onclick",
    "runs",
    "javascript",
    "click",
    "element",
    "html",
    "another",
    "attribute",
    "use",
    "called",
    "key",
    "runs",
    "javascript",
    "press",
    "key",
    "keyboard",
    "inside",
    "input",
    "time",
    "let",
    "add",
    "attribute",
    "key",
    "equals",
    "double",
    "quotes",
    "inside",
    "console",
    "log",
    "string",
    "typing",
    "every",
    "time",
    "type",
    "input",
    "message",
    "let",
    "save",
    "give",
    "try",
    "go",
    "tab",
    "file",
    "inside",
    "text",
    "box",
    "type",
    "numbers",
    "see",
    "every",
    "time",
    "type",
    "something",
    "run",
    "code",
    "display",
    "message",
    "something",
    "type",
    "element",
    "clicks",
    "key",
    "downs",
    "known",
    "known",
    "events",
    "click",
    "key",
    "known",
    "event",
    "listeners",
    "check",
    "events",
    "runs",
    "javascript",
    "events",
    "happen",
    "addition",
    "clicks",
    "key",
    "downs",
    "many",
    "events",
    "listen",
    "javascript",
    "okay",
    "let",
    "figure",
    "steps",
    "need",
    "project",
    "press",
    "key",
    "text",
    "box",
    "going",
    "check",
    "key",
    "enter",
    "key",
    "thing",
    "calculate",
    "button",
    "know",
    "key",
    "pressed",
    "inside",
    "key",
    "actually",
    "given",
    "special",
    "object",
    "called",
    "event",
    "instead",
    "string",
    "let",
    "remove",
    "event",
    "object",
    "provided",
    "us",
    "javascript",
    "contains",
    "information",
    "event",
    "every",
    "event",
    "listener",
    "including",
    "click",
    "also",
    "gets",
    "event",
    "object",
    "save",
    "type",
    "text",
    "box",
    "show",
    "us",
    "event",
    "object",
    "inside",
    "object",
    "bunch",
    "information",
    "including",
    "key",
    "typed",
    "let",
    "use",
    "event",
    "object",
    "get",
    "dot",
    "key",
    "save",
    "inside",
    "text",
    "box",
    "type",
    "something",
    "tell",
    "us",
    "key",
    "pressed",
    "press",
    "enter",
    "tell",
    "us",
    "key",
    "enter",
    "next",
    "step",
    "check",
    "key",
    "enter",
    "using",
    "statement",
    "code",
    "type",
    "new",
    "line",
    "brackets",
    "curly",
    "brackets",
    "inside",
    "condition",
    "check",
    "event",
    "key",
    "equal",
    "string",
    "enter",
    "equal",
    "enter",
    "going",
    "thing",
    "calculate",
    "button",
    "actually",
    "use",
    "function",
    "inside",
    "curly",
    "brackets",
    "type",
    "calculate",
    "total",
    "brackets",
    "save",
    "let",
    "go",
    "back",
    "project",
    "type",
    "25",
    "enter",
    "calculate",
    "total",
    "display",
    "page",
    "create",
    "keyboard",
    "feature",
    "project",
    "lastly",
    "let",
    "clean",
    "code",
    "move",
    "function",
    "like",
    "rest",
    "code",
    "inside",
    "script",
    "element",
    "let",
    "create",
    "new",
    "function",
    "using",
    "function",
    "name",
    "handle",
    "cost",
    "key",
    "brackets",
    "curly",
    "brackets",
    "let",
    "move",
    "code",
    "function",
    "select",
    "rightclick",
    "cut",
    "right",
    "click",
    "paste",
    "need",
    "fix",
    "formatting",
    "select",
    "lines",
    "press",
    "tab",
    "let",
    "remove",
    "going",
    "call",
    "function",
    "handle",
    "cost",
    "key",
    "brackets",
    "last",
    "thing",
    "event",
    "exist",
    "inside",
    "function",
    "put",
    "event",
    "object",
    "function",
    "remember",
    "put",
    "value",
    "function",
    "use",
    "parameter",
    "brackets",
    "create",
    "parameter",
    "called",
    "event",
    "save",
    "something",
    "inside",
    "parameter",
    "going",
    "go",
    "brackets",
    "type",
    "event",
    "take",
    "event",
    "object",
    "put",
    "inside",
    "function",
    "use",
    "like",
    "variable",
    "save",
    "try",
    "project",
    "25",
    "enter",
    "still",
    "works",
    "finished",
    "three",
    "projects",
    "lesson",
    "rest",
    "lesson",
    "going",
    "learn",
    "details",
    "javascript",
    "last",
    "project",
    "learned",
    "manually",
    "convert",
    "string",
    "number",
    "using",
    "number",
    "function",
    "also",
    "convert",
    "way",
    "number",
    "string",
    "let",
    "go",
    "top",
    "script",
    "element",
    "type",
    "capital",
    "string",
    "brackets",
    "string",
    "function",
    "convert",
    "value",
    "string",
    "brackets",
    "put",
    "number",
    "like",
    "25",
    "convert",
    "number",
    "string",
    "25",
    "next",
    "detail",
    "going",
    "learn",
    "special",
    "behavior",
    "strings",
    "line",
    "type",
    "console",
    "log",
    "string",
    "25",
    "minus",
    "5",
    "string",
    "contains",
    "number",
    "subtract",
    "multiply",
    "divide",
    "javascript",
    "automatically",
    "convert",
    "string",
    "number",
    "gets",
    "converted",
    "number",
    "25",
    "minus",
    "5",
    "save",
    "math",
    "give",
    "us",
    "20",
    "another",
    "example",
    "type",
    "coercion",
    "automatic",
    "type",
    "conversion",
    "however",
    "recommended",
    "math",
    "strings",
    "like",
    "adding",
    "works",
    "differently",
    "example",
    "new",
    "line",
    "let",
    "type",
    "string",
    "25",
    "5",
    "save",
    "convert",
    "number",
    "string",
    "combine",
    "together",
    "255",
    "adding",
    "strings",
    "works",
    "differently",
    "best",
    "practice",
    "always",
    "math",
    "using",
    "numbers",
    "math",
    "using",
    "strings",
    "need",
    "manually",
    "convert",
    "string",
    "number",
    "using",
    "number",
    "function",
    "like",
    "last",
    "thing",
    "going",
    "learn",
    "lesson",
    "another",
    "object",
    "called",
    "window",
    "object",
    "lesson",
    "learned",
    "document",
    "object",
    "document",
    "object",
    "represents",
    "web",
    "page",
    "window",
    "object",
    "represents",
    "browser",
    "let",
    "go",
    "script",
    "element",
    "try",
    "type",
    "window",
    "window",
    "object",
    "represents",
    "browser",
    "represents",
    "browser",
    "everything",
    "inside",
    "browser",
    "inside",
    "window",
    "object",
    "let",
    "think",
    "inside",
    "browser",
    "well",
    "web",
    "page",
    "inside",
    "browser",
    "document",
    "object",
    "inside",
    "window",
    "object",
    "type",
    "window",
    "document",
    "give",
    "us",
    "document",
    "object",
    "using",
    "lesson",
    "else",
    "part",
    "browser",
    "well",
    "console",
    "also",
    "part",
    "browser",
    "type",
    "window",
    "console",
    "give",
    "us",
    "console",
    "object",
    "using",
    "course",
    "actually",
    "string",
    "window",
    "save",
    "thing",
    "else",
    "part",
    "browser",
    "well",
    "popups",
    "also",
    "part",
    "browser",
    "type",
    "window",
    "alert",
    "give",
    "us",
    "alert",
    "function",
    "using",
    "course",
    "create",
    "popups",
    "however",
    "might",
    "noticed",
    "never",
    "type",
    "window",
    "window",
    "doent",
    "window",
    "window",
    "object",
    "shortcut",
    "type",
    "window",
    "dot",
    "front",
    "type",
    "document",
    "console",
    "javascript",
    "automatically",
    "add",
    "window",
    "dot",
    "front",
    "us",
    "window",
    "object",
    "represents",
    "browser",
    "type",
    "window",
    "dot",
    "javascript",
    "adds",
    "us",
    "automatically",
    "still",
    "nice",
    "know",
    "works",
    "behind",
    "scenes",
    "end",
    "lesson",
    "lesson",
    "learned",
    "document",
    "object",
    "model",
    "dom",
    "allows",
    "javascript",
    "fully",
    "control",
    "web",
    "page",
    "learned",
    "use",
    "document",
    "query",
    "selector",
    "get",
    "elements",
    "web",
    "page",
    "put",
    "inside",
    "javascript",
    "learned",
    "use",
    "inner",
    "html",
    "modify",
    "html",
    "inside",
    "element",
    "worked",
    "three",
    "projects",
    "using",
    "dom",
    "learned",
    "make",
    "elements",
    "interactive",
    "keyboard",
    "using",
    "key",
    "learned",
    "details",
    "strings",
    "well",
    "window",
    "object",
    "represents",
    "browser",
    "exercises",
    "practice",
    "using",
    "dom",
    "lesson",
    "going",
    "add",
    "css",
    "projects",
    "going",
    "finish",
    "rock",
    "paper",
    "scissors",
    "project",
    "css",
    "different",
    "language",
    "changes",
    "appearance",
    "website",
    "one",
    "three",
    "languages",
    "use",
    "create",
    "websites",
    "first",
    "let",
    "look",
    "projects",
    "going",
    "work",
    "lesson",
    "go",
    "browser",
    "create",
    "new",
    "tab",
    "top",
    "going",
    "type",
    "super",
    "simple",
    "dodev",
    "sl",
    "projects",
    "slash",
    "dom",
    "das",
    "css",
    "press",
    "enter",
    "three",
    "projects",
    "created",
    "previous",
    "lesson",
    "except",
    "time",
    "going",
    "add",
    "css",
    "make",
    "projects",
    "look",
    "nice",
    "let",
    "start",
    "creating",
    "copy",
    "project",
    "html",
    "file",
    "previous",
    "lesson",
    "go",
    "code",
    "editor",
    "click",
    "icon",
    "show",
    "files",
    "going",
    "select",
    "09",
    "projects",
    "going",
    "right",
    "click",
    "copy",
    "right",
    "click",
    "paste",
    "let",
    "rename",
    "file",
    "rename",
    "end",
    "going",
    "remove",
    "copy",
    "beginning",
    "going",
    "change",
    "10",
    "press",
    "enter",
    "let",
    "hide",
    "files",
    "going",
    "open",
    "10",
    "dom",
    "projects",
    "browser",
    "open",
    "live",
    "server",
    "close",
    "previous",
    "tabs",
    "well",
    "previous",
    "code",
    "lesson",
    "9",
    "file",
    "two",
    "ready",
    "add",
    "css",
    "projects",
    "start",
    "youtube",
    "subscribe",
    "button",
    "let",
    "go",
    "tab",
    "project",
    "going",
    "style",
    "button",
    "first",
    "reviewed",
    "css",
    "lesson",
    "4",
    "one",
    "ways",
    "write",
    "css",
    "code",
    "using",
    "style",
    "element",
    "inside",
    "head",
    "section",
    "going",
    "create",
    "element",
    "using",
    "less",
    "style",
    "greater",
    "style",
    "element",
    "lets",
    "us",
    "write",
    "css",
    "code",
    "inside",
    "inside",
    "going",
    "write",
    "button",
    "open",
    "curly",
    "bracket",
    "close",
    "curly",
    "bracket",
    "code",
    "front",
    "brackets",
    "called",
    "css",
    "selector",
    "tells",
    "computer",
    "elements",
    "want",
    "style",
    "change",
    "appearance",
    "button",
    "style",
    "button",
    "elements",
    "page",
    "situation",
    "want",
    "style",
    "subscribe",
    "button",
    "calculate",
    "button",
    "styled",
    "differently",
    "style",
    "specific",
    "element",
    "use",
    "class",
    "attribute",
    "look",
    "button",
    "currently",
    "already",
    "class",
    "js",
    "subscribe",
    "button",
    "class",
    "used",
    "javascript",
    "good",
    "practice",
    "add",
    "different",
    "class",
    "used",
    "css",
    "element",
    "multiple",
    "classes",
    "separate",
    "space",
    "inside",
    "class",
    "attribute",
    "going",
    "type",
    "space",
    "add",
    "another",
    "class",
    "subcribe",
    "dash",
    "button",
    "element",
    "two",
    "classes",
    "going",
    "use",
    "second",
    "class",
    "css",
    "style",
    "specific",
    "class",
    "going",
    "remove",
    "button",
    "going",
    "type",
    "dot",
    "starting",
    "dot",
    "means",
    "going",
    "style",
    "class",
    "rather",
    "element",
    "name",
    "style",
    "class",
    "subscribe",
    "das",
    "button",
    "button",
    "right",
    "inside",
    "curly",
    "brackets",
    "going",
    "tell",
    "computer",
    "style",
    "button",
    "example",
    "border",
    "colon",
    "none",
    "semicolon",
    "save",
    "remove",
    "border",
    "button",
    "longer",
    "border",
    "like",
    "button",
    "style",
    "specific",
    "element",
    "css",
    "add",
    "class",
    "element",
    "inside",
    "css",
    "start",
    "dot",
    "class",
    "curly",
    "brackets",
    "code",
    "left",
    "called",
    "property",
    "tells",
    "computer",
    "want",
    "change",
    "right",
    "called",
    "value",
    "tells",
    "computer",
    "want",
    "change",
    "property",
    "separate",
    "property",
    "value",
    "colon",
    "end",
    "whole",
    "thing",
    "semicolon",
    "also",
    "called",
    "property",
    "value",
    "pair",
    "reminder",
    "review",
    "css",
    "want",
    "learn",
    "css",
    "detail",
    "check",
    "html",
    "css",
    "full",
    "course",
    "video",
    "description",
    "added",
    "one",
    "style",
    "button",
    "going",
    "add",
    "styles",
    "looks",
    "like",
    "final",
    "design",
    "make",
    "easier",
    "going",
    "rearrange",
    "windows",
    "going",
    "put",
    "final",
    "design",
    "bottom",
    "project",
    "top",
    "make",
    "easier",
    "compare",
    "two",
    "designs",
    "next",
    "make",
    "look",
    "like",
    "final",
    "design",
    "going",
    "style",
    "element",
    "one",
    "one",
    "let",
    "go",
    "back",
    "code",
    "press",
    "enter",
    "next",
    "let",
    "change",
    "background",
    "color",
    "black",
    "type",
    "background",
    "das",
    "color",
    "colon",
    "black",
    "semicolon",
    "save",
    "button",
    "black",
    "background",
    "let",
    "keep",
    "going",
    "one",
    "one",
    "change",
    "text",
    "color",
    "white",
    "next",
    "code",
    "type",
    "color",
    "colon",
    "white",
    "semicolon",
    "save",
    "wondering",
    "know",
    "properties",
    "usually",
    "find",
    "searching",
    "google",
    "make",
    "sure",
    "search",
    "trying",
    "let",
    "keep",
    "going",
    "one",
    "one",
    "next",
    "thing",
    "change",
    "going",
    "add",
    "spacing",
    "inside",
    "button",
    "css",
    "space",
    "inside",
    "element",
    "called",
    "padding",
    "create",
    "new",
    "line",
    "use",
    "property",
    "padding",
    "das",
    "toop",
    "colon",
    "10px",
    "save",
    "add",
    "space",
    "inside",
    "element",
    "called",
    "padding",
    "top",
    "10",
    "px",
    "px",
    "means",
    "pixels",
    "pixel",
    "unit",
    "measurement",
    "computers",
    "screen",
    "made",
    "many",
    "small",
    "little",
    "squares",
    "squares",
    "called",
    "pixel",
    "pixel",
    "smallest",
    "thing",
    "screen",
    "screen",
    "sizes",
    "measured",
    "pixels",
    "images",
    "video",
    "sizes",
    "also",
    "measured",
    "pixels",
    "worry",
    "work",
    "pixels",
    "get",
    "used",
    "big",
    "pixel",
    "example",
    "10",
    "pixels",
    "equal",
    "amount",
    "space",
    "looks",
    "pretty",
    "close",
    "final",
    "design",
    "let",
    "keep",
    "going",
    "add",
    "space",
    "inside",
    "element",
    "bottom",
    "time",
    "create",
    "new",
    "line",
    "type",
    "padding",
    "dash",
    "bottom",
    "colon",
    "10px",
    "save",
    "adds",
    "space",
    "bottom",
    "element",
    "10",
    "pixels",
    "next",
    "let",
    "increase",
    "space",
    "left",
    "right",
    "go",
    "code",
    "add",
    "padding",
    "das",
    "left",
    "colon",
    "10",
    "pixels",
    "padding",
    "das",
    "right",
    "colon",
    "10",
    "pixels",
    "let",
    "save",
    "added",
    "extra",
    "space",
    "left",
    "right",
    "think",
    "final",
    "design",
    "little",
    "space",
    "left",
    "right",
    "let",
    "go",
    "back",
    "increase",
    "padding",
    "instead",
    "10",
    "let",
    "try",
    "15",
    "sides",
    "save",
    "spacing",
    "looks",
    "close",
    "enough",
    "final",
    "design",
    "css",
    "normal",
    "trial",
    "error",
    "get",
    "styling",
    "right",
    "let",
    "keep",
    "styling",
    "one",
    "one",
    "next",
    "make",
    "text",
    "thicker",
    "bold",
    "let",
    "go",
    "code",
    "change",
    "thickness",
    "text",
    "use",
    "property",
    "font",
    "das",
    "weight",
    "colon",
    "bold",
    "let",
    "save",
    "make",
    "text",
    "bold",
    "almost",
    "let",
    "make",
    "corners",
    "rounded",
    "look",
    "like",
    "final",
    "design",
    "go",
    "back",
    "css",
    "property",
    "making",
    "corners",
    "round",
    "called",
    "border",
    "das",
    "radius",
    "make",
    "colon",
    "5",
    "pixels",
    "let",
    "save",
    "see",
    "made",
    "corners",
    "round",
    "pixels",
    "tells",
    "computer",
    "round",
    "want",
    "corners",
    "higher",
    "pixels",
    "round",
    "get",
    "change",
    "10",
    "pixels",
    "save",
    "make",
    "corners",
    "even",
    "round",
    "let",
    "change",
    "something",
    "really",
    "big",
    "make",
    "completely",
    "round",
    "change",
    "50",
    "pixels",
    "save",
    "button",
    "completely",
    "round",
    "last",
    "style",
    "going",
    "add",
    "final",
    "design",
    "put",
    "mouse",
    "button",
    "turns",
    "hand",
    "icon",
    "call",
    "pointer",
    "going",
    "thing",
    "project",
    "let",
    "go",
    "code",
    "create",
    "pointer",
    "icon",
    "going",
    "use",
    "property",
    "cursor",
    "colon",
    "pointer",
    "let",
    "save",
    "put",
    "mouse",
    "button",
    "notice",
    "turns",
    "hand",
    "pointer",
    "icon",
    "subscribe",
    "button",
    "looks",
    "like",
    "final",
    "design",
    "next",
    "let",
    "click",
    "subscribe",
    "button",
    "notice",
    "changes",
    "text",
    "click",
    "final",
    "design",
    "also",
    "changes",
    "background",
    "color",
    "text",
    "color",
    "going",
    "learn",
    "change",
    "css",
    "click",
    "button",
    "let",
    "go",
    "back",
    "code",
    "time",
    "going",
    "scroll",
    "javascript",
    "learned",
    "previous",
    "lesson",
    "get",
    "html",
    "elements",
    "page",
    "put",
    "inside",
    "javascript",
    "also",
    "learned",
    "html",
    "elements",
    "javascript",
    "objects",
    "properties",
    "like",
    "inner",
    "text",
    "inner",
    "html",
    "every",
    "element",
    "another",
    "property",
    "use",
    "called",
    "class",
    "list",
    "class",
    "list",
    "gives",
    "us",
    "control",
    "class",
    "attribute",
    "one",
    "solution",
    "click",
    "button",
    "add",
    "class",
    "class",
    "different",
    "styles",
    "let",
    "see",
    "code",
    "scroll",
    "subscribe",
    "function",
    "click",
    "button",
    "make",
    "button",
    "subscribed",
    "also",
    "going",
    "add",
    "class",
    "let",
    "create",
    "new",
    "line",
    "type",
    "button",
    "element",
    "dot",
    "class",
    "capital",
    "l",
    "list",
    "class",
    "list",
    "object",
    "means",
    "properties",
    "methods",
    "use",
    "one",
    "method",
    "called",
    "add",
    "adds",
    "class",
    "element",
    "let",
    "type",
    "dot",
    "add",
    "brackets",
    "inside",
    "brackets",
    "going",
    "put",
    "string",
    "string",
    "class",
    "want",
    "want",
    "add",
    "click",
    "button",
    "let",
    "add",
    "class",
    "called",
    "subscribed",
    "save",
    "every",
    "time",
    "click",
    "button",
    "add",
    "class",
    "button",
    "called",
    "subscribed",
    "let",
    "give",
    "try",
    "first",
    "rightclick",
    "page",
    "click",
    "inspect",
    "go",
    "elements",
    "tab",
    "rearrange",
    "windows",
    "see",
    "inside",
    "html",
    "pay",
    "attention",
    "class",
    "button",
    "click",
    "button",
    "going",
    "add",
    "extra",
    "class",
    "called",
    "subscribed",
    "line",
    "code",
    "button",
    "subscribed",
    "class",
    "style",
    "css",
    "let",
    "go",
    "back",
    "code",
    "scroll",
    "css",
    "type",
    "dot",
    "style",
    "class",
    "style",
    "class",
    "subscribed",
    "subscribed",
    "curly",
    "brackets",
    "inside",
    "curly",
    "brackets",
    "let",
    "change",
    "background",
    "color",
    "gray",
    "text",
    "color",
    "black",
    "background",
    "das",
    "color",
    "colon",
    "gray",
    "color",
    "colon",
    "black",
    "make",
    "sure",
    "type",
    "styles",
    "subscribe",
    "button",
    "styles",
    "styles",
    "override",
    "styles",
    "save",
    "click",
    "button",
    "add",
    "subscrib",
    "class",
    "button",
    "get",
    "new",
    "styles",
    "added",
    "one",
    "way",
    "change",
    "css",
    "click",
    "button",
    "right",
    "going",
    "move",
    "back",
    "top",
    "notice",
    "background",
    "color",
    "different",
    "final",
    "design",
    "final",
    "design",
    "uses",
    "much",
    "lighter",
    "gray",
    "get",
    "exact",
    "color",
    "going",
    "open",
    "elements",
    "tab",
    "page",
    "going",
    "rightclick",
    "click",
    "inspect",
    "click",
    "elements",
    "tab",
    "rearrange",
    "windows",
    "see",
    "section",
    "style",
    "section",
    "see",
    "css",
    "element",
    "first",
    "let",
    "actually",
    "find",
    "button",
    "right",
    "click",
    "show",
    "us",
    "css",
    "button",
    "show",
    "us",
    "background",
    "color",
    "use",
    "let",
    "make",
    "copy",
    "color",
    "put",
    "code",
    "rightclick",
    "copy",
    "remove",
    "rightclick",
    "paste",
    "let",
    "save",
    "go",
    "back",
    "project",
    "try",
    "get",
    "get",
    "exact",
    "color",
    "final",
    "design",
    "way",
    "color",
    "known",
    "rgb",
    "value",
    "rgb",
    "means",
    "red",
    "green",
    "blue",
    "computers",
    "create",
    "color",
    "using",
    "combination",
    "red",
    "green",
    "blue",
    "first",
    "number",
    "much",
    "red",
    "want",
    "color",
    "second",
    "number",
    "much",
    "green",
    "want",
    "third",
    "number",
    "much",
    "blue",
    "want",
    "number",
    "goes",
    "0",
    "255",
    "zer",
    "means",
    "less",
    "color",
    "darker",
    "255",
    "means",
    "color",
    "lighter",
    "color",
    "uses",
    "240",
    "colors",
    "close",
    "255",
    "give",
    "us",
    "light",
    "gray",
    "color",
    "see",
    "next",
    "go",
    "back",
    "final",
    "design",
    "click",
    "button",
    "change",
    "back",
    "original",
    "style",
    "going",
    "create",
    "feature",
    "project",
    "well",
    "one",
    "way",
    "click",
    "button",
    "remove",
    "class",
    "let",
    "scroll",
    "bottom",
    "subscribe",
    "function",
    "click",
    "button",
    "change",
    "back",
    "subscribe",
    "remove",
    "class",
    "class",
    "list",
    "another",
    "method",
    "use",
    "called",
    "remove",
    "let",
    "create",
    "new",
    "line",
    "type",
    "button",
    "element",
    "class",
    "capital",
    "l",
    "list",
    "dot",
    "remove",
    "brackets",
    "opposite",
    "add",
    "remove",
    "class",
    "element",
    "inside",
    "brackets",
    "type",
    "string",
    "class",
    "want",
    "remove",
    "subscribed",
    "save",
    "let",
    "try",
    "project",
    "click",
    "button",
    "get",
    "class",
    "subscribed",
    "get",
    "extra",
    "styles",
    "click",
    "button",
    "remove",
    "class",
    "remove",
    "extra",
    "styles",
    "notice",
    "add",
    "class",
    "type",
    "class",
    "name",
    "type",
    "dot",
    "class",
    "name",
    "like",
    "query",
    "selector",
    "typing",
    "dot",
    "makes",
    "sense",
    "query",
    "selector",
    "next",
    "going",
    "style",
    "text",
    "page",
    "let",
    "scroll",
    "css",
    "one",
    "thing",
    "style",
    "paragraph",
    "elements",
    "page",
    "using",
    "code",
    "p",
    "curly",
    "brackets",
    "however",
    "going",
    "use",
    "better",
    "solution",
    "instead",
    "styling",
    "paragraphs",
    "going",
    "style",
    "body",
    "element",
    "change",
    "text",
    "body",
    "element",
    "change",
    "text",
    "entire",
    "page",
    "inside",
    "curly",
    "brackets",
    "let",
    "change",
    "text",
    "going",
    "use",
    "different",
    "style",
    "text",
    "called",
    "font",
    "change",
    "font",
    "font",
    "going",
    "use",
    "property",
    "font",
    "das",
    "family",
    "colon",
    "change",
    "aial",
    "used",
    "final",
    "design",
    "let",
    "save",
    "style",
    "text",
    "inside",
    "body",
    "change",
    "font",
    "aial",
    "good",
    "practice",
    "write",
    "styles",
    "body",
    "top",
    "need",
    "override",
    "later",
    "let",
    "move",
    "top",
    "right",
    "click",
    "cut",
    "create",
    "new",
    "lines",
    "right",
    "click",
    "paste",
    "going",
    "add",
    "one",
    "style",
    "moving",
    "let",
    "add",
    "space",
    "subscribe",
    "button",
    "second",
    "project",
    "earlier",
    "learned",
    "space",
    "inside",
    "element",
    "called",
    "padding",
    "space",
    "outside",
    "element",
    "called",
    "margin",
    "inside",
    "subscribe",
    "button",
    "bottom",
    "let",
    "add",
    "property",
    "called",
    "margin",
    "das",
    "bottom",
    "colon",
    "30",
    "pixels",
    "save",
    "add",
    "space",
    "outside",
    "element",
    "bottom",
    "30",
    "pixels",
    "let",
    "move",
    "style",
    "amazon",
    "shipping",
    "calculator",
    "css",
    "add",
    "class",
    "elements",
    "style",
    "css",
    "let",
    "scroll",
    "text",
    "box",
    "input",
    "element",
    "going",
    "add",
    "another",
    "class",
    "typing",
    "space",
    "let",
    "use",
    "class",
    "cost",
    "das",
    "input",
    "going",
    "style",
    "css",
    "let",
    "scroll",
    "style",
    "class",
    "using",
    "dot",
    "cost",
    "das",
    "input",
    "curly",
    "brackets",
    "inside",
    "style",
    "one",
    "one",
    "let",
    "look",
    "final",
    "design",
    "see",
    "styles",
    "need",
    "first",
    "let",
    "change",
    "text",
    "size",
    "text",
    "little",
    "smaller",
    "text",
    "change",
    "text",
    "size",
    "going",
    "use",
    "font",
    "das",
    "size",
    "colon",
    "let",
    "try",
    "15",
    "pixels",
    "save",
    "text",
    "looks",
    "close",
    "enough",
    "final",
    "design",
    "next",
    "let",
    "add",
    "space",
    "inside",
    "text",
    "box",
    "remember",
    "space",
    "inside",
    "element",
    "called",
    "padding",
    "going",
    "type",
    "padding",
    "das",
    "top",
    "10",
    "pixels",
    "padding",
    "das",
    "bottom",
    "also",
    "10",
    "pixels",
    "let",
    "add",
    "padding",
    "left",
    "10",
    "pixels",
    "padding",
    "dasr",
    "10",
    "pixels",
    "add",
    "space",
    "inside",
    "text",
    "box",
    "every",
    "direction",
    "save",
    "looks",
    "like",
    "final",
    "design",
    "going",
    "show",
    "shortcut",
    "padding",
    "save",
    "us",
    "typing",
    "create",
    "new",
    "line",
    "actually",
    "use",
    "property",
    "called",
    "padding",
    "colon",
    "type",
    "10",
    "pixels",
    "padding",
    "property",
    "let",
    "us",
    "add",
    "padding",
    "multiple",
    "sides",
    "type",
    "one",
    "value",
    "like",
    "10",
    "pixels",
    "add",
    "10",
    "pixels",
    "every",
    "side",
    "line",
    "thing",
    "four",
    "lines",
    "let",
    "actually",
    "comment",
    "using",
    "slashstar",
    "star",
    "slash",
    "save",
    "see",
    "one",
    "line",
    "css",
    "thing",
    "four",
    "lines",
    "css",
    "shortcut",
    "save",
    "us",
    "typing",
    "next",
    "let",
    "move",
    "style",
    "calculate",
    "button",
    "add",
    "class",
    "button",
    "style",
    "button",
    "let",
    "add",
    "class",
    "attribute",
    "class",
    "equals",
    "calculate",
    "das",
    "button",
    "let",
    "style",
    "css",
    "scrolling",
    "type",
    "dot",
    "calculate",
    "dash",
    "button",
    "curly",
    "brackets",
    "inside",
    "curly",
    "brackets",
    "going",
    "style",
    "button",
    "one",
    "one",
    "let",
    "start",
    "background",
    "color",
    "type",
    "background",
    "das",
    "color",
    "colon",
    "green",
    "semicolon",
    "save",
    "next",
    "let",
    "change",
    "text",
    "color",
    "white",
    "type",
    "color",
    "colon",
    "white",
    "save",
    "okay",
    "let",
    "keep",
    "going",
    "remove",
    "border",
    "around",
    "button",
    "type",
    "border",
    "colon",
    "none",
    "save",
    "next",
    "let",
    "make",
    "text",
    "little",
    "bigger",
    "like",
    "final",
    "design",
    "type",
    "font",
    "das",
    "size",
    "make",
    "15",
    "pixels",
    "save",
    "okay",
    "let",
    "add",
    "space",
    "inside",
    "button",
    "going",
    "use",
    "shortcut",
    "type",
    "padding",
    "property",
    "colon",
    "time",
    "going",
    "give",
    "two",
    "values",
    "separated",
    "spaces",
    "10",
    "pixels",
    "maybe",
    "50",
    "pixels",
    "easier",
    "see",
    "give",
    "two",
    "values",
    "padding",
    "first",
    "value",
    "vertical",
    "padding",
    "top",
    "bottom",
    "second",
    "value",
    "horizontal",
    "padding",
    "left",
    "right",
    "save",
    "see",
    "left",
    "right",
    "lot",
    "padding",
    "50",
    "pixels",
    "let",
    "make",
    "match",
    "final",
    "design",
    "instead",
    "50",
    "pixels",
    "let",
    "bring",
    "15",
    "pixels",
    "save",
    "okay",
    "looks",
    "pretty",
    "close",
    "let",
    "also",
    "increase",
    "padding",
    "top",
    "bottom",
    "text",
    "box",
    "button",
    "line",
    "like",
    "final",
    "project",
    "let",
    "change",
    "vertical",
    "padding",
    "maybe",
    "12",
    "pixels",
    "save",
    "last",
    "thing",
    "style",
    "project",
    "put",
    "mouse",
    "button",
    "turns",
    "pointer",
    "icon",
    "create",
    "going",
    "use",
    "property",
    "cursor",
    "colon",
    "pointer",
    "save",
    "give",
    "try",
    "finished",
    "styling",
    "amazon",
    "shipping",
    "calculator",
    "let",
    "give",
    "try",
    "type",
    "25",
    "text",
    "box",
    "press",
    "calculate",
    "bottom",
    "add",
    "10",
    "shipping",
    "show",
    "35",
    "finally",
    "going",
    "style",
    "last",
    "project",
    "lesson",
    "rock",
    "paper",
    "scissors",
    "project",
    "finish",
    "project",
    "let",
    "go",
    "back",
    "superimple",
    "dodev",
    "scroll",
    "page",
    "click",
    "link",
    "show",
    "final",
    "design",
    "rock",
    "paper",
    "scissors",
    "rearrange",
    "windows",
    "see",
    "going",
    "change",
    "buttons",
    "nice",
    "big",
    "icons",
    "moves",
    "click",
    "move",
    "show",
    "result",
    "bold",
    "show",
    "icon",
    "move",
    "picked",
    "move",
    "computer",
    "picked",
    "going",
    "make",
    "project",
    "look",
    "really",
    "nice",
    "let",
    "get",
    "started",
    "going",
    "rearrange",
    "windows",
    "back",
    "bottom",
    "let",
    "create",
    "cop",
    "copy",
    "rock",
    "paper",
    "scissors",
    "project",
    "lesson",
    "go",
    "code",
    "editor",
    "click",
    "show",
    "files",
    "going",
    "make",
    "copy",
    "ro",
    "paper",
    "scissors",
    "let",
    "click",
    "file",
    "rightclick",
    "copy",
    "right",
    "click",
    "paste",
    "rename",
    "file",
    "rename",
    "end",
    "remove",
    "copy",
    "beginning",
    "change",
    "9",
    "10",
    "press",
    "enter",
    "let",
    "click",
    "hide",
    "files",
    "close",
    "09",
    "file",
    "let",
    "open",
    "10",
    "rock",
    "paper",
    "scissors",
    "file",
    "browser",
    "right",
    "click",
    "open",
    "live",
    "server",
    "move",
    "tab",
    "top",
    "see",
    "side",
    "side",
    "let",
    "start",
    "styling",
    "body",
    "want",
    "make",
    "background",
    "color",
    "entire",
    "page",
    "dark",
    "gray",
    "color",
    "go",
    "code",
    "let",
    "create",
    "style",
    "element",
    "write",
    "css",
    "inside",
    "head",
    "let",
    "type",
    "less",
    "style",
    "greater",
    "inside",
    "going",
    "style",
    "body",
    "type",
    "body",
    "curly",
    "brackets",
    "inside",
    "going",
    "change",
    "background",
    "color",
    "colon",
    "going",
    "get",
    "color",
    "see",
    "right",
    "clicking",
    "click",
    "inspect",
    "go",
    "elements",
    "tab",
    "tab",
    "rearrange",
    "see",
    "find",
    "body",
    "element",
    "click",
    "style",
    "section",
    "find",
    "background",
    "color",
    "need",
    "let",
    "select",
    "rightclick",
    "copy",
    "right",
    "click",
    "paste",
    "semi",
    "colon",
    "end",
    "let",
    "save",
    "move",
    "back",
    "corner",
    "project",
    "background",
    "color",
    "final",
    "design",
    "next",
    "let",
    "make",
    "text",
    "color",
    "white",
    "css",
    "use",
    "color",
    "property",
    "colon",
    "white",
    "semicolon",
    "save",
    "make",
    "text",
    "white",
    "next",
    "let",
    "change",
    "style",
    "font",
    "text",
    "type",
    "font",
    "dasam",
    "colon",
    "aial",
    "final",
    "design",
    "uses",
    "save",
    "right",
    "let",
    "style",
    "elements",
    "one",
    "one",
    "match",
    "final",
    "design",
    "start",
    "paragraph",
    "top",
    "inside",
    "paragraph",
    "element",
    "let",
    "add",
    "class",
    "style",
    "css",
    "add",
    "class",
    "equals",
    "let",
    "call",
    "title",
    "css",
    "style",
    "class",
    "starting",
    "dot",
    "title",
    "curly",
    "brackets",
    "let",
    "make",
    "title",
    "really",
    "big",
    "like",
    "final",
    "design",
    "change",
    "font",
    "das",
    "size",
    "colon",
    "30",
    "pixels",
    "save",
    "looks",
    "close",
    "enough",
    "next",
    "let",
    "make",
    "text",
    "bold",
    "css",
    "use",
    "font",
    "weight",
    "colon",
    "bold",
    "save",
    "let",
    "move",
    "installing",
    "buttons",
    "first",
    "going",
    "need",
    "images",
    "project",
    "show",
    "get",
    "put",
    "mouse",
    "rock",
    "image",
    "rightclick",
    "click",
    "save",
    "image",
    "going",
    "find",
    "folder",
    "contains",
    "code",
    "desktop",
    "folder",
    "right",
    "double",
    "click",
    "folder",
    "leave",
    "file",
    "name",
    "default",
    "emoji",
    "click",
    "save",
    "code",
    "editor",
    "click",
    "able",
    "see",
    "rock",
    "image",
    "let",
    "paper",
    "scissors",
    "image",
    "hover",
    "rightclick",
    "save",
    "image",
    "folder",
    "contains",
    "code",
    "going",
    "save",
    "paper",
    "image",
    "finally",
    "rightclick",
    "save",
    "image",
    "save",
    "scissors",
    "image",
    "right",
    "images",
    "code",
    "editor",
    "let",
    "learn",
    "load",
    "onto",
    "page",
    "using",
    "html",
    "element",
    "go",
    "back",
    "html",
    "code",
    "scroll",
    "inside",
    "button",
    "going",
    "add",
    "image",
    "element",
    "let",
    "type",
    "less",
    "img",
    "greater",
    "image",
    "html",
    "element",
    "loads",
    "image",
    "onto",
    "page",
    "image",
    "element",
    "require",
    "closing",
    "tag",
    "called",
    "void",
    "element",
    "load",
    "image",
    "going",
    "add",
    "attribute",
    "element",
    "called",
    "src",
    "src",
    "stands",
    "source",
    "tells",
    "computer",
    "file",
    "image",
    "load",
    "let",
    "look",
    "project",
    "button",
    "going",
    "load",
    "inside",
    "source",
    "attribute",
    "type",
    "look",
    "file",
    "name",
    "beside",
    "html",
    "file",
    "finds",
    "right",
    "load",
    "onto",
    "page",
    "save",
    "inside",
    "button",
    "loaded",
    "rock",
    "image",
    "right",
    "image",
    "big",
    "let",
    "use",
    "css",
    "decrease",
    "size",
    "image",
    "hide",
    "files",
    "let",
    "give",
    "class",
    "attribute",
    "image",
    "element",
    "style",
    "type",
    "class",
    "equals",
    "let",
    "call",
    "move",
    "das",
    "icon",
    "also",
    "going",
    "add",
    "new",
    "lines",
    "make",
    "code",
    "little",
    "easier",
    "read",
    "scroll",
    "css",
    "going",
    "style",
    "class",
    "using",
    "dot",
    "move",
    "dash",
    "icon",
    "curly",
    "brackets",
    "let",
    "decrease",
    "height",
    "image",
    "use",
    "property",
    "height",
    "colon",
    "pixel",
    "value",
    "50",
    "pixels",
    "save",
    "make",
    "height",
    "image",
    "50",
    "pixels",
    "also",
    "resize",
    "width",
    "automatically",
    "image",
    "keeps",
    "shape",
    "size",
    "looks",
    "pretty",
    "close",
    "final",
    "design",
    "move",
    "another",
    "feature",
    "source",
    "attribute",
    "put",
    "files",
    "folders",
    "let",
    "open",
    "files",
    "clicking",
    "let",
    "say",
    "want",
    "organize",
    "images",
    "folder",
    "going",
    "create",
    "folder",
    "clicking",
    "icon",
    "let",
    "name",
    "folder",
    "images",
    "going",
    "drag",
    "images",
    "folder",
    "drag",
    "unfortunately",
    "see",
    "image",
    "load",
    "anymore",
    "look",
    "code",
    "source",
    "tells",
    "computer",
    "look",
    "file",
    "beside",
    "html",
    "file",
    "right",
    "file",
    "called",
    "put",
    "folder",
    "tell",
    "computer",
    "look",
    "inside",
    "folder",
    "going",
    "type",
    "folder",
    "name",
    "start",
    "images",
    "going",
    "type",
    "slash",
    "go",
    "images",
    "folder",
    "look",
    "file",
    "right",
    "save",
    "computer",
    "able",
    "find",
    "image",
    "load",
    "onto",
    "web",
    "page",
    "feature",
    "called",
    "file",
    "paaths",
    "tell",
    "computer",
    "look",
    "folder",
    "beside",
    "html",
    "file",
    "like",
    "images",
    "use",
    "slash",
    "tell",
    "go",
    "folder",
    "look",
    "file",
    "let",
    "use",
    "code",
    "load",
    "images",
    "onto",
    "page",
    "paper",
    "image",
    "going",
    "go",
    "button",
    "remove",
    "text",
    "create",
    "image",
    "element",
    "less",
    "img",
    "greater",
    "give",
    "attribute",
    "source",
    "equals",
    "locate",
    "image",
    "images",
    "folder",
    "type",
    "images",
    "slash",
    "go",
    "folder",
    "load",
    "file",
    "save",
    "image",
    "really",
    "big",
    "let",
    "give",
    "class",
    "gave",
    "rock",
    "image",
    "add",
    "class",
    "equals",
    "move",
    "dash",
    "icon",
    "save",
    "styles",
    "get",
    "applied",
    "elements",
    "class",
    "icon",
    "applies",
    "elements",
    "let",
    "thing",
    "scissors",
    "button",
    "remove",
    "text",
    "replace",
    "image",
    "element",
    "give",
    "source",
    "attribute",
    "images",
    "slash",
    "scissors",
    "das",
    "also",
    "give",
    "class",
    "icon",
    "resize",
    "images",
    "like",
    "let",
    "save",
    "images",
    "need",
    "let",
    "make",
    "buttons",
    "look",
    "like",
    "final",
    "design",
    "scroll",
    "let",
    "add",
    "class",
    "buttons",
    "style",
    "css",
    "add",
    "class",
    "equals",
    "let",
    "use",
    "button",
    "button",
    "add",
    "class",
    "class",
    "equals",
    "button",
    "well",
    "third",
    "button",
    "class",
    "button",
    "let",
    "scroll",
    "css",
    "going",
    "style",
    "class",
    "using",
    "button",
    "curly",
    "brackets",
    "first",
    "let",
    "change",
    "background",
    "color",
    "match",
    "background",
    "color",
    "page",
    "use",
    "background",
    "das",
    "color",
    "colon",
    "use",
    "special",
    "value",
    "called",
    "transparent",
    "make",
    "button",
    "save",
    "buttons",
    "next",
    "let",
    "add",
    "white",
    "border",
    "buttons",
    "use",
    "border",
    "property",
    "colon",
    "going",
    "give",
    "three",
    "values",
    "first",
    "value",
    "border",
    "width",
    "thick",
    "border",
    "let",
    "use",
    "one",
    "pixel",
    "second",
    "value",
    "border",
    "style",
    "use",
    "solid",
    "solid",
    "border",
    "values",
    "use",
    "dotted",
    "dashed",
    "third",
    "value",
    "border",
    "color",
    "going",
    "use",
    "white",
    "semicolon",
    "end",
    "save",
    "add",
    "border",
    "let",
    "make",
    "border",
    "little",
    "thicker",
    "like",
    "final",
    "design",
    "change",
    "first",
    "value",
    "border",
    "width",
    "three",
    "pixels",
    "save",
    "okay",
    "looks",
    "pretty",
    "close",
    "let",
    "change",
    "size",
    "buttons",
    "usually",
    "use",
    "padding",
    "add",
    "space",
    "inside",
    "element",
    "case",
    "images",
    "different",
    "sizes",
    "going",
    "use",
    "width",
    "height",
    "set",
    "exact",
    "size",
    "css",
    "type",
    "wid",
    "colon",
    "let",
    "make",
    "100",
    "pixels",
    "height",
    "also",
    "100",
    "pixels",
    "save",
    "looks",
    "like",
    "final",
    "design",
    "little",
    "bigger",
    "let",
    "increase",
    "width",
    "height",
    "let",
    "try",
    "120",
    "pixels",
    "save",
    "right",
    "looks",
    "pretty",
    "close",
    "let",
    "make",
    "buttons",
    "round",
    "property",
    "called",
    "border",
    "das",
    "radius",
    "colon",
    "know",
    "much",
    "need",
    "make",
    "round",
    "set",
    "half",
    "width",
    "height",
    "set",
    "60",
    "pixels",
    "save",
    "okay",
    "coming",
    "along",
    "really",
    "well",
    "lastly",
    "going",
    "add",
    "space",
    "buttons",
    "remember",
    "space",
    "outside",
    "element",
    "called",
    "margin",
    "let",
    "add",
    "margin",
    "right",
    "type",
    "margin",
    "dasr",
    "colon",
    "maybe",
    "10",
    "pixels",
    "save",
    "finally",
    "put",
    "mouse",
    "button",
    "turns",
    "pointer",
    "property",
    "cursor",
    "colon",
    "pointer",
    "save",
    "buttons",
    "match",
    "final",
    "design",
    "let",
    "keep",
    "moving",
    "style",
    "next",
    "part",
    "project",
    "result",
    "moves",
    "see",
    "play",
    "game",
    "give",
    "us",
    "new",
    "result",
    "make",
    "easier",
    "style",
    "going",
    "go",
    "code",
    "going",
    "find",
    "result",
    "going",
    "add",
    "fake",
    "results",
    "like",
    "win",
    "let",
    "save",
    "result",
    "going",
    "style",
    "let",
    "give",
    "class",
    "result",
    "css",
    "going",
    "style",
    "class",
    "dot",
    "result",
    "curly",
    "brackets",
    "let",
    "make",
    "text",
    "bigger",
    "going",
    "use",
    "font",
    "das",
    "size",
    "colon",
    "maybe",
    "25",
    "pixels",
    "save",
    "okay",
    "looks",
    "pretty",
    "good",
    "let",
    "make",
    "text",
    "bold",
    "use",
    "font",
    "das",
    "weight",
    "colon",
    "bold",
    "save",
    "finally",
    "going",
    "add",
    "extra",
    "spaces",
    "buttons",
    "add",
    "maybe",
    "50",
    "pixels",
    "save",
    "okay",
    "think",
    "looks",
    "close",
    "enough",
    "let",
    "style",
    "moves",
    "scroll",
    "going",
    "add",
    "fake",
    "moves",
    "easier",
    "style",
    "type",
    "u",
    "image",
    "let",
    "use",
    "less",
    "image",
    "source",
    "attribute",
    "let",
    "load",
    "rock",
    "image",
    "scissors",
    "image",
    "computer",
    "load",
    "rock",
    "image",
    "look",
    "inside",
    "images",
    "folder",
    "slash",
    "go",
    "folder",
    "emoji",
    "png",
    "greater",
    "add",
    "another",
    "image",
    "less",
    "image",
    "source",
    "equals",
    "images",
    "slash",
    "scissors",
    "emoji",
    "scissors",
    "das",
    "greater",
    "finally",
    "text",
    "computer",
    "computer",
    "let",
    "save",
    "create",
    "results",
    "although",
    "images",
    "really",
    "big",
    "use",
    "class",
    "move",
    "icon",
    "resize",
    "size",
    "buttons",
    "images",
    "let",
    "add",
    "class",
    "icon",
    "well",
    "class",
    "equals",
    "icon",
    "save",
    "images",
    "look",
    "good",
    "next",
    "let",
    "style",
    "score",
    "section",
    "thing",
    "need",
    "add",
    "spaces",
    "two",
    "score",
    "element",
    "let",
    "add",
    "class",
    "score",
    "scroll",
    "style",
    "element",
    "using",
    "dot",
    "score",
    "brackets",
    "let",
    "add",
    "margin",
    "top",
    "colon",
    "50",
    "pixels",
    "save",
    "let",
    "compare",
    "looks",
    "like",
    "final",
    "design",
    "little",
    "spacing",
    "let",
    "change",
    "60",
    "pixels",
    "save",
    "looks",
    "close",
    "enough",
    "finally",
    "style",
    "reset",
    "score",
    "button",
    "let",
    "go",
    "back",
    "htm",
    "ml",
    "add",
    "class",
    "button",
    "class",
    "equals",
    "reset",
    "dcore",
    "das",
    "button",
    "top",
    "type",
    "dot",
    "reset",
    "dcore",
    "dutton",
    "curly",
    "brackets",
    "make",
    "background",
    "color",
    "white",
    "background",
    "dasc",
    "color",
    "colon",
    "white",
    "let",
    "also",
    "remove",
    "border",
    "button",
    "using",
    "border",
    "colon",
    "none",
    "let",
    "save",
    "see",
    "looks",
    "let",
    "increase",
    "size",
    "text",
    "final",
    "design",
    "looks",
    "little",
    "bigger",
    "add",
    "font",
    "das",
    "size",
    "colon",
    "15",
    "pixels",
    "save",
    "let",
    "add",
    "extra",
    "space",
    "inside",
    "button",
    "padding",
    "padding",
    "colon",
    "give",
    "two",
    "values",
    "first",
    "value",
    "vertical",
    "padding",
    "let",
    "use",
    "10",
    "pixels",
    "second",
    "value",
    "horizontal",
    "padding",
    "let",
    "use",
    "15",
    "pixels",
    "save",
    "looks",
    "like",
    "final",
    "project",
    "little",
    "shorter",
    "button",
    "let",
    "change",
    "vertical",
    "padding",
    "maybe",
    "eight",
    "save",
    "last",
    "step",
    "add",
    "cursor",
    "pointer",
    "cursor",
    "colon",
    "pointer",
    "save",
    "pretty",
    "much",
    "finished",
    "styling",
    "rock",
    "paper",
    "scissors",
    "project",
    "going",
    "rearrange",
    "windows",
    "see",
    "entire",
    "design",
    "looks",
    "really",
    "nice",
    "last",
    "step",
    "remove",
    "fake",
    "results",
    "use",
    "javascript",
    "insert",
    "results",
    "instead",
    "let",
    "scroll",
    "remove",
    "result",
    "let",
    "actually",
    "copy",
    "code",
    "want",
    "javascript",
    "generate",
    "code",
    "right",
    "click",
    "copy",
    "let",
    "scroll",
    "bottom",
    "insert",
    "moves",
    "onto",
    "page",
    "instead",
    "text",
    "going",
    "rightclick",
    "paste",
    "code",
    "time",
    "instead",
    "picking",
    "rock",
    "every",
    "time",
    "going",
    "substitute",
    "player",
    "move",
    "remove",
    "already",
    "template",
    "string",
    "insert",
    "value",
    "directly",
    "inside",
    "using",
    "dollar",
    "curly",
    "brackets",
    "insert",
    "player",
    "move",
    "let",
    "also",
    "insert",
    "computer",
    "move",
    "remove",
    "insert",
    "value",
    "using",
    "dollar",
    "curly",
    "brackets",
    "insert",
    "computer",
    "move",
    "inserting",
    "javascript",
    "scroll",
    "remove",
    "fake",
    "result",
    "select",
    "delete",
    "let",
    "save",
    "going",
    "anything",
    "results",
    "click",
    "move",
    "show",
    "us",
    "result",
    "also",
    "show",
    "us",
    "moves",
    "picked",
    "finished",
    "rock",
    "paper",
    "scissors",
    "project",
    "last",
    "thing",
    "going",
    "learn",
    "lesson",
    "organize",
    "code",
    "different",
    "files",
    "notice",
    "right",
    "html",
    "css",
    "javascript",
    "one",
    "html",
    "file",
    "makes",
    "code",
    "harder",
    "read",
    "file",
    "bigger",
    "mixes",
    "three",
    "different",
    "languages",
    "make",
    "code",
    "organized",
    "easier",
    "read",
    "going",
    "separate",
    "language",
    "file",
    "let",
    "scroll",
    "start",
    "separating",
    "javascript",
    "file",
    "click",
    "show",
    "files",
    "click",
    "icon",
    "create",
    "new",
    "file",
    "name",
    "file",
    "scissors",
    "js",
    "press",
    "enter",
    "end",
    "file",
    "withjs",
    "tells",
    "computer",
    "file",
    "contains",
    "javascript",
    "code",
    "text",
    "let",
    "go",
    "back",
    "html",
    "file",
    "going",
    "move",
    "code",
    "javascript",
    "file",
    "select",
    "code",
    "rightclick",
    "copy",
    "inside",
    "javascript",
    "file",
    "rightclick",
    "paste",
    "let",
    "save",
    "go",
    "back",
    "html",
    "file",
    "delete",
    "javascript",
    "code",
    "going",
    "load",
    "javascript",
    "file",
    "web",
    "page",
    "use",
    "attribute",
    "script",
    "element",
    "called",
    "src",
    "source",
    "make",
    "equal",
    "thing",
    "image",
    "element",
    "tells",
    "computer",
    "file",
    "load",
    "type",
    "djs",
    "look",
    "file",
    "called",
    "10",
    "rockpaper",
    "scissors",
    "js",
    "beside",
    "html",
    "file",
    "file",
    "run",
    "javascript",
    "inside",
    "file",
    "thing",
    "except",
    "javascript",
    "code",
    "file",
    "makes",
    "code",
    "cleaner",
    "file",
    "contains",
    "one",
    "language",
    "file",
    "also",
    "contains",
    "less",
    "code",
    "let",
    "go",
    "back",
    "html",
    "file",
    "save",
    "notice",
    "project",
    "works",
    "way",
    "organized",
    "code",
    "better",
    "another",
    "feature",
    "source",
    "attribute",
    "also",
    "uses",
    "file",
    "paths",
    "put",
    "javascript",
    "file",
    "folder",
    "able",
    "find",
    "example",
    "let",
    "show",
    "files",
    "let",
    "create",
    "new",
    "folder",
    "clicking",
    "icon",
    "let",
    "name",
    "folder",
    "scripts",
    "folder",
    "contain",
    "js",
    "files",
    "drag",
    "file",
    "folder",
    "locate",
    "using",
    "source",
    "attribute",
    "typing",
    "folder",
    "name",
    "scripts",
    "slash",
    "go",
    "inside",
    "folder",
    "look",
    "file",
    "find",
    "right",
    "save",
    "everything",
    "works",
    "normal",
    "another",
    "feature",
    "use",
    "multiple",
    "script",
    "elements",
    "lets",
    "us",
    "split",
    "javascript",
    "multiple",
    "files",
    "load",
    "onto",
    "page",
    "top",
    "bottom",
    "next",
    "going",
    "learn",
    "separate",
    "css",
    "file",
    "let",
    "scroll",
    "css",
    "thing",
    "css",
    "let",
    "click",
    "html",
    "file",
    "let",
    "create",
    "new",
    "folder",
    "call",
    "folder",
    "style",
    "press",
    "enter",
    "folder",
    "contain",
    "css",
    "code",
    "let",
    "click",
    "folder",
    "create",
    "new",
    "file",
    "clicking",
    "icon",
    "let",
    "name",
    "file",
    "scissors",
    "css",
    "press",
    "enter",
    "ending",
    "file",
    "css",
    "means",
    "file",
    "contains",
    "css",
    "code",
    "go",
    "back",
    "html",
    "move",
    "css",
    "file",
    "let",
    "select",
    "code",
    "right",
    "click",
    "copy",
    "right",
    "click",
    "paste",
    "save",
    "file",
    "let",
    "go",
    "back",
    "html",
    "remove",
    "code",
    "learn",
    "load",
    "css",
    "file",
    "onto",
    "website",
    "going",
    "use",
    "style",
    "element",
    "going",
    "use",
    "different",
    "element",
    "called",
    "link",
    "element",
    "type",
    "less",
    "link",
    "greater",
    "link",
    "element",
    "require",
    "closing",
    "tag",
    "another",
    "void",
    "element",
    "link",
    "element",
    "uses",
    "two",
    "attributes",
    "first",
    "attribute",
    "called",
    "r",
    "means",
    "relation",
    "tells",
    "computer",
    "type",
    "file",
    "loading",
    "going",
    "set",
    "attribute",
    "style",
    "sheet",
    "means",
    "loading",
    "css",
    "file",
    "add",
    "second",
    "attribute",
    "called",
    "href",
    "href",
    "tells",
    "computer",
    "file",
    "want",
    "load",
    "also",
    "supports",
    "file",
    "paaths",
    "type",
    "styles",
    "folder",
    "look",
    "folder",
    "beside",
    "html",
    "called",
    "styles",
    "one",
    "right",
    "type",
    "slash",
    "go",
    "inside",
    "folder",
    "look",
    "css",
    "file",
    "rock",
    "das",
    "paper",
    "das",
    "scissors",
    "css",
    "load",
    "css",
    "inside",
    "file",
    "apply",
    "page",
    "thing",
    "except",
    "separated",
    "language",
    "file",
    "save",
    "everything",
    "still",
    "works",
    "styles",
    "get",
    "applied",
    "like",
    "script",
    "element",
    "also",
    "use",
    "multiple",
    "link",
    "elements",
    "load",
    "multiple",
    "css",
    "files",
    "separate",
    "code",
    "separate",
    "files",
    "using",
    "script",
    "element",
    "link",
    "element",
    "makes",
    "code",
    "lot",
    "easier",
    "read",
    "file",
    "contains",
    "one",
    "language",
    "contains",
    "less",
    "code",
    "end",
    "lesson",
    "final",
    "reminder",
    "css",
    "learned",
    "lesson",
    "review",
    "want",
    "learn",
    "css",
    "detail",
    "check",
    "html",
    "css",
    "full",
    "course",
    "video",
    "description",
    "lesson",
    "reviewed",
    "css",
    "added",
    "css",
    "projects",
    "learned",
    "class",
    "list",
    "property",
    "lets",
    "us",
    "control",
    "class",
    "attribute",
    "element",
    "finished",
    "rock",
    "paper",
    "scissors",
    "project",
    "learned",
    "organize",
    "javascript",
    "css",
    "code",
    "separate",
    "files",
    "thanks",
    "watching",
    "course",
    "far",
    "want",
    "support",
    "channel",
    "check",
    "premium",
    "version",
    "courses",
    "like",
    "one",
    "get",
    "certificate",
    "completion",
    "better",
    "learning",
    "platform",
    "interested",
    "extra",
    "videos",
    "videos",
    "behindth",
    "scenes",
    "content",
    "check",
    "links",
    "also",
    "support",
    "channel",
    "liking",
    "video",
    "subscribing",
    "sharing",
    "video",
    "others",
    "thanks",
    "let",
    "continue",
    "course",
    "exercises",
    "help",
    "practice",
    "using",
    "html",
    "css",
    "javascript",
    "together",
    "lesson",
    "going",
    "learn",
    "two",
    "features",
    "javascript",
    "called",
    "arrays",
    "loops",
    "going",
    "use",
    "features",
    "create",
    "list",
    "project",
    "first",
    "let",
    "create",
    "new",
    "file",
    "lesson",
    "go",
    "code",
    "editor",
    "click",
    "show",
    "files",
    "time",
    "make",
    "sure",
    "one",
    "html",
    "files",
    "selected",
    "create",
    "new",
    "file",
    "one",
    "folders",
    "going",
    "click",
    "icon",
    "create",
    "new",
    "file",
    "going",
    "name",
    "file",
    "arrays",
    "das",
    "das",
    "loops",
    "html",
    "press",
    "enter",
    "let",
    "copy",
    "previous",
    "lesson",
    "file",
    "click",
    "10",
    "dom",
    "projects",
    "type",
    "typ",
    "control",
    "command",
    "select",
    "code",
    "rightclick",
    "copy",
    "right",
    "click",
    "paste",
    "let",
    "hide",
    "files",
    "prepare",
    "file",
    "lesson",
    "scroll",
    "top",
    "change",
    "title",
    "arrays",
    "loops",
    "let",
    "remove",
    "css",
    "also",
    "remove",
    "html",
    "right",
    "remove",
    "javascript",
    "let",
    "save",
    "open",
    "file",
    "browser",
    "right",
    "clicking",
    "open",
    "live",
    "server",
    "let",
    "also",
    "open",
    "console",
    "right",
    "click",
    "click",
    "inspect",
    "click",
    "console",
    "close",
    "previous",
    "tabs",
    "previous",
    "code",
    "lesson",
    "11",
    "file",
    "ready",
    "learn",
    "arrays",
    "array",
    "another",
    "type",
    "value",
    "javascript",
    "represents",
    "list",
    "values",
    "let",
    "example",
    "create",
    "first",
    "array",
    "go",
    "script",
    "element",
    "going",
    "type",
    "open",
    "square",
    "bracket",
    "closed",
    "square",
    "bracket",
    "inside",
    "square",
    "brackets",
    "type",
    "value",
    "like",
    "number",
    "10",
    "type",
    "comma",
    "another",
    "value",
    "like",
    "number",
    "20",
    "comma",
    "third",
    "value",
    "like",
    "number",
    "30",
    "array",
    "represents",
    "list",
    "three",
    "numbers",
    "10",
    "20",
    "30",
    "arrays",
    "also",
    "values",
    "means",
    "save",
    "variable",
    "front",
    "create",
    "variable",
    "using",
    "const",
    "let",
    "name",
    "array",
    "make",
    "equal",
    "array",
    "add",
    "semicolon",
    "end",
    "created",
    "list",
    "values",
    "saved",
    "list",
    "variable",
    "let",
    "create",
    "new",
    "line",
    "array",
    "save",
    "display",
    "list",
    "values",
    "console",
    "basically",
    "array",
    "list",
    "values",
    "get",
    "specific",
    "value",
    "array",
    "use",
    "square",
    "brackets",
    "let",
    "create",
    "new",
    "line",
    "type",
    "array",
    "square",
    "brackets",
    "inside",
    "brackets",
    "put",
    "number",
    "like",
    "zero",
    "number",
    "represents",
    "position",
    "array",
    "zero",
    "means",
    "first",
    "value",
    "console",
    "log",
    "code",
    "save",
    "array",
    "square",
    "braet",
    "0",
    "gives",
    "us",
    "first",
    "value",
    "10",
    "displayed",
    "console",
    "change",
    "one",
    "get",
    "us",
    "second",
    "value",
    "array",
    "20",
    "save",
    "displays",
    "20",
    "number",
    "represents",
    "position",
    "array",
    "zero",
    "first",
    "value",
    "one",
    "second",
    "value",
    "two",
    "third",
    "value",
    "also",
    "change",
    "value",
    "array",
    "also",
    "using",
    "square",
    "brackets",
    "let",
    "create",
    "new",
    "line",
    "type",
    "array",
    "square",
    "brackets",
    "let",
    "say",
    "want",
    "change",
    "first",
    "value",
    "type",
    "zero",
    "first",
    "value",
    "make",
    "equal",
    "something",
    "else",
    "like",
    "99",
    "array",
    "save",
    "see",
    "changed",
    "first",
    "value",
    "99",
    "basically",
    "arrays",
    "work",
    "access",
    "value",
    "inside",
    "array",
    "also",
    "change",
    "value",
    "inside",
    "array",
    "understand",
    "basics",
    "arrays",
    "let",
    "learn",
    "syntax",
    "rules",
    "create",
    "array",
    "start",
    "open",
    "square",
    "bracket",
    "end",
    "closed",
    "square",
    "bracket",
    "inside",
    "put",
    "list",
    "values",
    "separate",
    "value",
    "comma",
    "also",
    "write",
    "array",
    "multiple",
    "lines",
    "like",
    "put",
    "new",
    "lines",
    "comma",
    "get",
    "value",
    "inside",
    "array",
    "use",
    "square",
    "brackets",
    "number",
    "like",
    "one",
    "number",
    "called",
    "index",
    "represents",
    "position",
    "array",
    "want",
    "get",
    "first",
    "value",
    "index",
    "zero",
    "second",
    "value",
    "index",
    "one",
    "1",
    "third",
    "value",
    "index",
    "2",
    "notice",
    "index",
    "starts",
    "zero",
    "called",
    "zero",
    "indexed",
    "array",
    "inside",
    "array",
    "put",
    "type",
    "value",
    "example",
    "let",
    "create",
    "new",
    "line",
    "create",
    "new",
    "array",
    "using",
    "square",
    "brackets",
    "inside",
    "put",
    "number",
    "one",
    "comma",
    "also",
    "put",
    "string",
    "like",
    "hello",
    "another",
    "comma",
    "put",
    "boolean",
    "value",
    "like",
    "true",
    "another",
    "comma",
    "even",
    "put",
    "object",
    "like",
    "curly",
    "brackets",
    "name",
    "colon",
    "socks",
    "array",
    "also",
    "value",
    "means",
    "save",
    "arrays",
    "variables",
    "like",
    "even",
    "save",
    "array",
    "example",
    "array",
    "add",
    "array",
    "inside",
    "like",
    "1",
    "comma",
    "2",
    "next",
    "arrays",
    "weird",
    "behavior",
    "try",
    "check",
    "type",
    "array",
    "new",
    "line",
    "let",
    "type",
    "type",
    "square",
    "brackets",
    "one",
    "comma",
    "2",
    "save",
    "tell",
    "us",
    "array",
    "object",
    "array",
    "actually",
    "object",
    "special",
    "type",
    "object",
    "want",
    "check",
    "something",
    "specifically",
    "array",
    "use",
    "code",
    "capital",
    "array",
    "dot",
    "array",
    "brackets",
    "inside",
    "brackets",
    "put",
    "array",
    "like",
    "square",
    "brackets",
    "1",
    "comma",
    "2",
    "check",
    "value",
    "array",
    "console",
    "log",
    "result",
    "save",
    "display",
    "true",
    "finally",
    "arrays",
    "type",
    "object",
    "also",
    "properties",
    "methods",
    "use",
    "one",
    "useful",
    "property",
    "called",
    "length",
    "type",
    "array",
    "length",
    "tell",
    "us",
    "many",
    "values",
    "array",
    "array",
    "three",
    "values",
    "save",
    "display",
    "three",
    "next",
    "learn",
    "useful",
    "method",
    "array",
    "called",
    "push",
    "adds",
    "value",
    "end",
    "array",
    "array",
    "push",
    "100",
    "add",
    "100",
    "end",
    "array",
    "array",
    "save",
    "see",
    "100",
    "added",
    "end",
    "last",
    "method",
    "going",
    "learn",
    "called",
    "splice",
    "removes",
    "value",
    "array",
    "example",
    "array",
    "splice",
    "brackets",
    "splice",
    "takes",
    "two",
    "numbers",
    "first",
    "number",
    "index",
    "want",
    "remove",
    "let",
    "say",
    "want",
    "remove",
    "first",
    "value",
    "index",
    "zero",
    "second",
    "number",
    "give",
    "splice",
    "number",
    "values",
    "want",
    "remove",
    "give",
    "one",
    "remove",
    "one",
    "value",
    "index",
    "zero",
    "give",
    "two",
    "remove",
    "two",
    "values",
    "starting",
    "index",
    "zero",
    "let",
    "remove",
    "one",
    "value",
    "let",
    "create",
    "new",
    "line",
    "array",
    "save",
    "see",
    "splice",
    "removed",
    "first",
    "value",
    "array",
    "index0",
    "99",
    "right",
    "understand",
    "basics",
    "arrays",
    "syntax",
    "rules",
    "let",
    "practical",
    "examples",
    "prepared",
    "project",
    "lesson",
    "go",
    "browser",
    "create",
    "new",
    "tab",
    "top",
    "type",
    "superimple",
    "dodev",
    "sl",
    "projects",
    "slash",
    "arrays",
    "press",
    "enter",
    "page",
    "contains",
    "list",
    "project",
    "going",
    "create",
    "lesson",
    "final",
    "version",
    "project",
    "type",
    "name",
    "like",
    "make",
    "dinner",
    "give",
    "due",
    "date",
    "click",
    "add",
    "add",
    "list",
    "add",
    "another",
    "like",
    "wash",
    "dishes",
    "select",
    "due",
    "date",
    "click",
    "add",
    "add",
    "another",
    "list",
    "also",
    "delete",
    "button",
    "delete",
    "finished",
    "task",
    "final",
    "version",
    "project",
    "two",
    "simpler",
    "versions",
    "project",
    "going",
    "use",
    "work",
    "way",
    "let",
    "start",
    "first",
    "project",
    "going",
    "open",
    "console",
    "click",
    "inspect",
    "click",
    "console",
    "way",
    "way",
    "first",
    "project",
    "works",
    "type",
    "text",
    "box",
    "like",
    "make",
    "dinner",
    "click",
    "add",
    "add",
    "array",
    "display",
    "console",
    "type",
    "another",
    "like",
    "wash",
    "dishes",
    "click",
    "add",
    "add",
    "array",
    "display",
    "console",
    "let",
    "create",
    "create",
    "project",
    "start",
    "creating",
    "file",
    "project",
    "go",
    "code",
    "editor",
    "click",
    "show",
    "files",
    "click",
    "icon",
    "create",
    "file",
    "name",
    "list",
    "html",
    "press",
    "enter",
    "let",
    "copy",
    "code",
    "arrays",
    "loops",
    "html",
    "click",
    "control",
    "command",
    "rightclick",
    "copy",
    "right",
    "click",
    "paste",
    "let",
    "close",
    "scroll",
    "change",
    "title",
    "list",
    "remove",
    "javascript",
    "code",
    "time",
    "instead",
    "writing",
    "javascript",
    "let",
    "actually",
    "put",
    "javascript",
    "separate",
    "file",
    "learned",
    "previous",
    "lesson",
    "open",
    "files",
    "time",
    "go",
    "scripts",
    "folder",
    "click",
    "js",
    "file",
    "click",
    "icon",
    "add",
    "new",
    "file",
    "folder",
    "let",
    "name",
    "das",
    "press",
    "enter",
    "next",
    "going",
    "load",
    "file",
    "html",
    "file",
    "let",
    "open",
    "script",
    "element",
    "remove",
    "spaces",
    "going",
    "add",
    "attribute",
    "called",
    "src",
    "equals",
    "going",
    "load",
    "javascript",
    "file",
    "created",
    "inside",
    "script",
    "folder",
    "type",
    "scripts",
    "slash",
    "go",
    "folder",
    "load",
    "file",
    "save",
    "going",
    "drag",
    "file",
    "see",
    "html",
    "javascript",
    "time",
    "close",
    "close",
    "code",
    "well",
    "finally",
    "let",
    "open",
    "browser",
    "right",
    "click",
    "open",
    "live",
    "server",
    "let",
    "also",
    "open",
    "console",
    "page",
    "right",
    "click",
    "click",
    "inspect",
    "click",
    "console",
    "one",
    "thing",
    "going",
    "video",
    "rearrange",
    "windows",
    "final",
    "design",
    "bottom",
    "let",
    "start",
    "creating",
    "html",
    "elements",
    "let",
    "go",
    "body",
    "actually",
    "create",
    "paragraph",
    "element",
    "start",
    "inside",
    "paragraph",
    "put",
    "text",
    "list",
    "next",
    "let",
    "create",
    "text",
    "box",
    "create",
    "text",
    "box",
    "less",
    "input",
    "greater",
    "add",
    "placeholder",
    "text",
    "box",
    "place",
    "holder",
    "equals",
    "name",
    "finally",
    "let",
    "add",
    "button",
    "new",
    "line",
    "let",
    "type",
    "less",
    "button",
    "greater",
    "inside",
    "button",
    "text",
    "add",
    "let",
    "save",
    "creates",
    "html",
    "elements",
    "need",
    "next",
    "let",
    "write",
    "javascript",
    "first",
    "going",
    "create",
    "array",
    "store",
    "click",
    "add",
    "button",
    "going",
    "get",
    "text",
    "text",
    "box",
    "add",
    "array",
    "finally",
    "array",
    "let",
    "convert",
    "steps",
    "code",
    "let",
    "create",
    "new",
    "array",
    "first",
    "using",
    "const",
    "let",
    "name",
    "list",
    "make",
    "equal",
    "square",
    "brackets",
    "array",
    "values",
    "inside",
    "also",
    "call",
    "empty",
    "array",
    "next",
    "click",
    "button",
    "let",
    "get",
    "value",
    "text",
    "box",
    "let",
    "go",
    "button",
    "add",
    "onclick",
    "attribute",
    "inside",
    "let",
    "create",
    "function",
    "let",
    "create",
    "function",
    "name",
    "add",
    "todo",
    "brackets",
    "curly",
    "brackets",
    "inside",
    "onclick",
    "attribute",
    "going",
    "call",
    "function",
    "add",
    "brackets",
    "next",
    "step",
    "get",
    "text",
    "text",
    "box",
    "using",
    "document",
    "query",
    "selector",
    "use",
    "query",
    "selector",
    "going",
    "put",
    "class",
    "input",
    "element",
    "type",
    "class",
    "attribute",
    "name",
    "das",
    "input",
    "document",
    "query",
    "selector",
    "brackets",
    "string",
    "type",
    "dot",
    "get",
    "class",
    "get",
    "class",
    "input",
    "reminder",
    "gets",
    "element",
    "class",
    "js",
    "name",
    "input",
    "element",
    "puts",
    "javascript",
    "let",
    "save",
    "variable",
    "start",
    "let",
    "type",
    "const",
    "input",
    "element",
    "make",
    "equal",
    "result",
    "took",
    "input",
    "put",
    "javascript",
    "get",
    "text",
    "going",
    "use",
    "property",
    "input",
    "element",
    "called",
    "value",
    "input",
    "element",
    "value",
    "let",
    "save",
    "value",
    "text",
    "box",
    "variable",
    "use",
    "later",
    "front",
    "const",
    "name",
    "make",
    "equal",
    "whatever",
    "text",
    "box",
    "continue",
    "let",
    "name",
    "check",
    "working",
    "let",
    "save",
    "javascript",
    "file",
    "let",
    "also",
    "save",
    "html",
    "file",
    "go",
    "browser",
    "resize",
    "see",
    "console",
    "type",
    "something",
    "text",
    "box",
    "like",
    "make",
    "dinner",
    "click",
    "add",
    "get",
    "text",
    "text",
    "box",
    "display",
    "console",
    "okay",
    "looking",
    "good",
    "far",
    "next",
    "step",
    "add",
    "name",
    "list",
    "learned",
    "earlier",
    "use",
    "method",
    "called",
    "push",
    "push",
    "add",
    "value",
    "end",
    "array",
    "let",
    "remove",
    "bottom",
    "going",
    "type",
    "array",
    "list",
    "push",
    "brackets",
    "brackets",
    "going",
    "add",
    "name",
    "last",
    "step",
    "entire",
    "array",
    "todo",
    "list",
    "save",
    "let",
    "give",
    "try",
    "type",
    "make",
    "dinner",
    "text",
    "box",
    "click",
    "add",
    "take",
    "text",
    "add",
    "array",
    "array",
    "list",
    "let",
    "add",
    "another",
    "type",
    "type",
    "wash",
    "dishes",
    "click",
    "add",
    "get",
    "text",
    "text",
    "box",
    "add",
    "array",
    "array",
    "two",
    "values",
    "display",
    "console",
    "create",
    "first",
    "version",
    "list",
    "project",
    "one",
    "feature",
    "going",
    "create",
    "add",
    "something",
    "list",
    "click",
    "add",
    "reset",
    "text",
    "box",
    "let",
    "go",
    "code",
    "create",
    "new",
    "lines",
    "remember",
    "value",
    "property",
    "represents",
    "text",
    "text",
    "box",
    "change",
    "text",
    "text",
    "box",
    "simply",
    "change",
    "value",
    "property",
    "type",
    "input",
    "element",
    "value",
    "change",
    "empty",
    "string",
    "make",
    "text",
    "text",
    "box",
    "become",
    "empty",
    "save",
    "type",
    "something",
    "text",
    "box",
    "click",
    "add",
    "reset",
    "text",
    "text",
    "box",
    "let",
    "move",
    "second",
    "version",
    "list",
    "type",
    "something",
    "text",
    "box",
    "like",
    "make",
    "dinner",
    "click",
    "add",
    "actually",
    "display",
    "page",
    "type",
    "something",
    "else",
    "like",
    "wash",
    "dishes",
    "click",
    "add",
    "also",
    "add",
    "page",
    "take",
    "array",
    "display",
    "value",
    "page",
    "going",
    "learn",
    "another",
    "feature",
    "javascript",
    "called",
    "loops",
    "loops",
    "let",
    "us",
    "run",
    "code",
    "like",
    "loop",
    "let",
    "go",
    "back",
    "11",
    "arrays",
    "loops",
    "file",
    "close",
    "javascript",
    "file",
    "going",
    "learn",
    "loops",
    "first",
    "let",
    "comment",
    "previous",
    "code",
    "typing",
    "slashstar",
    "bottom",
    "star",
    "slash",
    "let",
    "scroll",
    "create",
    "first",
    "loop",
    "start",
    "creating",
    "variable",
    "using",
    "word",
    "let",
    "name",
    "name",
    "variable",
    "make",
    "equal",
    "1",
    "next",
    "going",
    "type",
    "word",
    "brackets",
    "curly",
    "brackets",
    "inside",
    "curly",
    "brackets",
    "going",
    "put",
    "code",
    "computer",
    "run",
    "like",
    "loop",
    "let",
    "put",
    "code",
    "console",
    "log",
    "display",
    "variable",
    "console",
    "obviously",
    "want",
    "loop",
    "forever",
    "get",
    "loop",
    "stop",
    "using",
    "round",
    "brackets",
    "inside",
    "round",
    "brackets",
    "going",
    "put",
    "code",
    "results",
    "true",
    "false",
    "example",
    "check",
    "less",
    "equal",
    "5",
    "way",
    "works",
    "code",
    "results",
    "true",
    "loop",
    "keep",
    "going",
    "results",
    "false",
    "loop",
    "stop",
    "go",
    "next",
    "line",
    "may",
    "notice",
    "code",
    "never",
    "result",
    "false",
    "equal",
    "1",
    "1",
    "always",
    "less",
    "equal",
    "5",
    "actually",
    "become",
    "false",
    "stop",
    "loop",
    "answer",
    "inside",
    "loop",
    "also",
    "going",
    "update",
    "variable",
    "type",
    "make",
    "equal",
    "plus",
    "1",
    "every",
    "time",
    "loop",
    "code",
    "going",
    "increase",
    "1",
    "eventually",
    "greater",
    "5",
    "return",
    "false",
    "stop",
    "loop",
    "save",
    "go",
    "back",
    "back",
    "tab",
    "file",
    "rearrange",
    "windows",
    "see",
    "console",
    "loop",
    "makes",
    "computer",
    "count",
    "1",
    "5",
    "let",
    "go",
    "code",
    "step",
    "step",
    "make",
    "sure",
    "understand",
    "works",
    "first",
    "create",
    "variable",
    "make",
    "equal",
    "one",
    "loop",
    "condition",
    "true",
    "computer",
    "keep",
    "running",
    "code",
    "first",
    "time",
    "loops",
    "equals",
    "1",
    "displays",
    "one",
    "console",
    "increase",
    "two",
    "go",
    "back",
    "top",
    "check",
    "code",
    "2",
    "less",
    "equal",
    "5",
    "true",
    "going",
    "run",
    "code",
    "time",
    "equal",
    "2",
    "display",
    "console",
    "increase",
    "three",
    "3",
    "still",
    "less",
    "equal",
    "5",
    "true",
    "means",
    "keep",
    "running",
    "code",
    "eventually",
    "going",
    "increase",
    "six",
    "six",
    "become",
    "false",
    "cause",
    "loop",
    "stop",
    "go",
    "next",
    "line",
    "counts",
    "1",
    "5",
    "stops",
    "five",
    "called",
    "loop",
    "condition",
    "true",
    "keep",
    "running",
    "code",
    "like",
    "loop",
    "soon",
    "condition",
    "false",
    "stop",
    "loop",
    "right",
    "understand",
    "loop",
    "works",
    "let",
    "learn",
    "syntax",
    "rules",
    "create",
    "loop",
    "type",
    "word",
    "round",
    "brackets",
    "curly",
    "brackets",
    "code",
    "inside",
    "round",
    "brackets",
    "called",
    "loop",
    "condition",
    "code",
    "inside",
    "curly",
    "brackets",
    "called",
    "loop",
    "body",
    "variable",
    "top",
    "called",
    "loop",
    "variable",
    "every",
    "time",
    "loop",
    "going",
    "increase",
    "loop",
    "variable",
    "known",
    "increment",
    "step",
    "increment",
    "step",
    "makes",
    "sure",
    "loop",
    "ends",
    "point",
    "without",
    "increment",
    "step",
    "loop",
    "would",
    "keep",
    "going",
    "forever",
    "known",
    "infinite",
    "loop",
    "remember",
    "1",
    "shortcut",
    "instead",
    "plus",
    "1",
    "remember",
    "actually",
    "even",
    "shorter",
    "shortcut",
    "plus",
    "equal",
    "1",
    "instead",
    "also",
    "increase",
    "value",
    "one",
    "every",
    "time",
    "like",
    "three",
    "major",
    "parts",
    "loop",
    "loop",
    "variable",
    "loop",
    "condition",
    "increment",
    "step",
    "time",
    "run",
    "loop",
    "called",
    "iteration",
    "loop",
    "five",
    "iterations",
    "ran",
    "code",
    "five",
    "times",
    "lastly",
    "loops",
    "create",
    "scope",
    "variable",
    "create",
    "curly",
    "brackets",
    "exist",
    "inside",
    "curly",
    "brackets",
    "loop",
    "condition",
    "true",
    "keep",
    "running",
    "code",
    "condition",
    "becomes",
    "false",
    "stop",
    "loop",
    "go",
    "next",
    "line",
    "javascript",
    "actually",
    "two",
    "types",
    "loops",
    "first",
    "type",
    "loop",
    "learned",
    "going",
    "learn",
    "another",
    "type",
    "loop",
    "called",
    "loop",
    "create",
    "loop",
    "create",
    "new",
    "lines",
    "type",
    "four",
    "brackets",
    "curly",
    "brackets",
    "inside",
    "brackets",
    "going",
    "type",
    "three",
    "pieces",
    "code",
    "first",
    "piece",
    "code",
    "loop",
    "variable",
    "thing",
    "line",
    "type",
    "let",
    "equal",
    "one",
    "semicolon",
    "space",
    "type",
    "second",
    "piece",
    "code",
    "loop",
    "condition",
    "type",
    "less",
    "equal",
    "5",
    "semicolon",
    "space",
    "last",
    "piece",
    "code",
    "increment",
    "step",
    "line",
    "right",
    "type",
    "curly",
    "brackets",
    "write",
    "code",
    "want",
    "loop",
    "let",
    "type",
    "code",
    "save",
    "loop",
    "thing",
    "loop",
    "counts",
    "1",
    "5",
    "look",
    "code",
    "see",
    "loop",
    "shorter",
    "version",
    "loop",
    "instead",
    "writing",
    "loop",
    "variable",
    "condition",
    "increment",
    "step",
    "separately",
    "group",
    "together",
    "top",
    "loop",
    "works",
    "way",
    "first",
    "create",
    "loop",
    "variable",
    "long",
    "loop",
    "condition",
    "true",
    "keep",
    "running",
    "code",
    "every",
    "time",
    "run",
    "code",
    "also",
    "going",
    "increase",
    "loop",
    "variable",
    "one",
    "learned",
    "two",
    "ways",
    "loop",
    "one",
    "use",
    "standard",
    "loop",
    "example",
    "loop",
    "variable",
    "condition",
    "increment",
    "step",
    "every",
    "time",
    "recommended",
    "use",
    "loop",
    "loop",
    "shorter",
    "organized",
    "loop",
    "however",
    "nonstandard",
    "loop",
    "might",
    "better",
    "use",
    "loop",
    "example",
    "loop",
    "let",
    "say",
    "want",
    "generate",
    "random",
    "numbers",
    "get",
    "number",
    "least",
    "create",
    "loop",
    "create",
    "variable",
    "store",
    "random",
    "number",
    "using",
    "let",
    "random",
    "number",
    "make",
    "equal",
    "zero",
    "start",
    "loop",
    "brackets",
    "curly",
    "brackets",
    "inside",
    "loop",
    "condition",
    "want",
    "keep",
    "running",
    "loop",
    "random",
    "number",
    "least",
    "check",
    "random",
    "number",
    "less",
    "less",
    "want",
    "keep",
    "running",
    "loop",
    "get",
    "random",
    "number",
    "least",
    "inside",
    "loop",
    "going",
    "generate",
    "random",
    "number",
    "0",
    "1",
    "save",
    "variable",
    "type",
    "random",
    "number",
    "make",
    "equal",
    "capital",
    "math",
    "random",
    "random",
    "number",
    "less",
    "keep",
    "generating",
    "random",
    "numbers",
    "get",
    "number",
    "least",
    "bottom",
    "console",
    "log",
    "random",
    "music",
    "number",
    "save",
    "give",
    "us",
    "random",
    "number",
    "least",
    "notice",
    "loop",
    "really",
    "loop",
    "variable",
    "increase",
    "every",
    "time",
    "also",
    "increment",
    "step",
    "situation",
    "loop",
    "better",
    "use",
    "loop",
    "bit",
    "flexible",
    "right",
    "learned",
    "basics",
    "loops",
    "let",
    "practical",
    "examples",
    "going",
    "learn",
    "technique",
    "called",
    "looping",
    "array",
    "means",
    "going",
    "go",
    "value",
    "array",
    "one",
    "one",
    "something",
    "value",
    "first",
    "let",
    "comment",
    "previous",
    "code",
    "using",
    "slashstar",
    "star",
    "slash",
    "bottom",
    "let",
    "create",
    "array",
    "strings",
    "create",
    "variable",
    "const",
    "list",
    "equal",
    "array",
    "inside",
    "array",
    "string",
    "make",
    "dinner",
    "another",
    "string",
    "wash",
    "dishes",
    "another",
    "string",
    "watch",
    "youtube",
    "let",
    "take",
    "value",
    "array",
    "display",
    "console",
    "going",
    "run",
    "loop",
    "loop",
    "going",
    "count",
    "zero",
    "last",
    "index",
    "array",
    "remember",
    "index",
    "position",
    "value",
    "array",
    "first",
    "value",
    "index",
    "zero",
    "second",
    "value",
    "index",
    "one",
    "third",
    "value",
    "index",
    "2",
    "let",
    "type",
    "four",
    "brackets",
    "curly",
    "brackets",
    "inside",
    "brackets",
    "going",
    "create",
    "loop",
    "variable",
    "going",
    "count",
    "indexes",
    "let",
    "index",
    "equals",
    "zero",
    "semicolon",
    "space",
    "loop",
    "condition",
    "keep",
    "looping",
    "long",
    "index",
    "less",
    "equal",
    "last",
    "index",
    "remember",
    "index",
    "starts",
    "zero",
    "means",
    "last",
    "index",
    "array",
    "number",
    "values",
    "array",
    "minus",
    "one",
    "array",
    "length",
    "minus",
    "one",
    "list",
    "length",
    "minus",
    "1",
    "add",
    "another",
    "semicolon",
    "add",
    "increment",
    "step",
    "index",
    "increase",
    "one",
    "every",
    "time",
    "inside",
    "curly",
    "brackets",
    "something",
    "index",
    "array",
    "let",
    "console",
    "log",
    "index",
    "save",
    "count",
    "0",
    "two",
    "exactly",
    "indexes",
    "array",
    "using",
    "index",
    "also",
    "access",
    "value",
    "index",
    "instead",
    "index",
    "list",
    "square",
    "brackets",
    "brackets",
    "index",
    "take",
    "whatever",
    "index",
    "variable",
    "access",
    "index",
    "array",
    "index",
    "variable",
    "zero",
    "access",
    "list",
    "index0",
    "first",
    "value",
    "index",
    "one",
    "access",
    "list",
    "index",
    "one",
    "second",
    "value",
    "let",
    "save",
    "value",
    "variable",
    "using",
    "const",
    "value",
    "make",
    "equal",
    "list",
    "bracket",
    "index",
    "let",
    "value",
    "instead",
    "save",
    "loop",
    "index",
    "array",
    "get",
    "value",
    "index",
    "display",
    "value",
    "see",
    "console",
    "technique",
    "called",
    "looping",
    "array",
    "use",
    "loop",
    "go",
    "value",
    "array",
    "something",
    "value",
    "going",
    "show",
    "shortcuts",
    "use",
    "looping",
    "array",
    "instead",
    "checking",
    "index",
    "less",
    "equal",
    "list",
    "length",
    "minus",
    "one",
    "shorten",
    "index",
    "less",
    "list",
    "length",
    "check",
    "thing",
    "loop",
    "loop",
    "stop",
    "index",
    "equal",
    "length",
    "minus",
    "one",
    "saves",
    "us",
    "typing",
    "another",
    "shortcut",
    "instead",
    "naming",
    "loop",
    "variable",
    "index",
    "shorten",
    "shorten",
    "well",
    "well",
    "often",
    "name",
    "loop",
    "variable",
    "means",
    "index",
    "next",
    "going",
    "learn",
    "technique",
    "combine",
    "looping",
    "array",
    "called",
    "accumulator",
    "pattern",
    "first",
    "let",
    "comment",
    "previous",
    "code",
    "using",
    "slashstar",
    "star",
    "slash",
    "bottom",
    "let",
    "say",
    "array",
    "numbers",
    "like",
    "calculate",
    "total",
    "numbers",
    "array",
    "let",
    "set",
    "problem",
    "let",
    "say",
    "array",
    "numbers",
    "const",
    "nums",
    "equals",
    "array",
    "numbers",
    "1",
    "1",
    "3",
    "want",
    "calculate",
    "total",
    "numbers",
    "array",
    "calculate",
    "total",
    "learn",
    "accumulator",
    "pattern",
    "first",
    "step",
    "accumulator",
    "pattern",
    "create",
    "variable",
    "store",
    "result",
    "let",
    "create",
    "variable",
    "const",
    "total",
    "make",
    "equal",
    "zero",
    "next",
    "step",
    "loop",
    "array",
    "update",
    "result",
    "four",
    "brackets",
    "curly",
    "brackets",
    "inside",
    "round",
    "brackets",
    "create",
    "loop",
    "variable",
    "let",
    "index",
    "equals",
    "z",
    "semicolon",
    "space",
    "create",
    "loop",
    "condition",
    "less",
    "nums",
    "length",
    "semicolon",
    "increment",
    "step",
    "learned",
    "earlier",
    "loop",
    "go",
    "index",
    "array",
    "curly",
    "brackets",
    "first",
    "let",
    "use",
    "index",
    "get",
    "value",
    "type",
    "nums",
    "square",
    "brackets",
    "access",
    "index",
    "let",
    "save",
    "variable",
    "using",
    "const",
    "num",
    "equals",
    "value",
    "finally",
    "going",
    "add",
    "number",
    "total",
    "type",
    "total",
    "make",
    "equal",
    "plus",
    "number",
    "remember",
    "remember",
    "shortcut",
    "plus",
    "equals",
    "finally",
    "since",
    "changing",
    "total",
    "variable",
    "change",
    "const",
    "let",
    "right",
    "loop",
    "added",
    "number",
    "array",
    "total",
    "bottom",
    "let",
    "console",
    "log",
    "total",
    "save",
    "display",
    "five",
    "exact",
    "total",
    "numbers",
    "array",
    "accumulator",
    "pattern",
    "first",
    "create",
    "variable",
    "store",
    "result",
    "loop",
    "array",
    "update",
    "result",
    "notice",
    "loop",
    "array",
    "adding",
    "accumulating",
    "results",
    "variable",
    "called",
    "accumulator",
    "pattern",
    "pattern",
    "call",
    "variable",
    "accumulator",
    "variable",
    "right",
    "let",
    "another",
    "example",
    "using",
    "accumulator",
    "pattern",
    "let",
    "say",
    "given",
    "array",
    "numbers",
    "want",
    "create",
    "copy",
    "array",
    "number",
    "doubled",
    "array",
    "1",
    "13",
    "going",
    "create",
    "new",
    "array",
    "2",
    "26",
    "bottom",
    "create",
    "new",
    "lines",
    "use",
    "accumulator",
    "pattern",
    "first",
    "step",
    "create",
    "variable",
    "store",
    "result",
    "let",
    "type",
    "const",
    "let",
    "name",
    "nums",
    "doubled",
    "make",
    "equal",
    "array",
    "time",
    "notice",
    "previous",
    "example",
    "accumulator",
    "variable",
    "number",
    "example",
    "accumulator",
    "variable",
    "array",
    "use",
    "different",
    "types",
    "values",
    "accumulate",
    "result",
    "depends",
    "problem",
    "trying",
    "solve",
    "next",
    "step",
    "loop",
    "array",
    "update",
    "result",
    "bottom",
    "create",
    "four",
    "loop",
    "brackets",
    "curly",
    "brackets",
    "inside",
    "round",
    "brackets",
    "create",
    "loop",
    "variable",
    "let",
    "equal",
    "zero",
    "create",
    "loop",
    "condition",
    "less",
    "nums",
    "length",
    "increment",
    "step",
    "curly",
    "brackets",
    "going",
    "get",
    "number",
    "index",
    "const",
    "num",
    "equals",
    "nums",
    "square",
    "bracket",
    "going",
    "update",
    "result",
    "going",
    "add",
    "number",
    "doubled",
    "array",
    "remember",
    "add",
    "value",
    "array",
    "use",
    "method",
    "push",
    "type",
    "nums",
    "doubled",
    "push",
    "brackets",
    "going",
    "add",
    "array",
    "number",
    "num",
    "multiplied",
    "2",
    "bottom",
    "let",
    "console",
    "log",
    "result",
    "nums",
    "doubled",
    "save",
    "second",
    "loop",
    "create",
    "array",
    "number",
    "doubled",
    "solve",
    "example",
    "right",
    "understand",
    "loop",
    "array",
    "accumulator",
    "pattern",
    "let",
    "go",
    "back",
    "create",
    "second",
    "version",
    "list",
    "add",
    "something",
    "list",
    "appear",
    "page",
    "let",
    "go",
    "code",
    "editor",
    "open",
    "11",
    "todo",
    "list",
    "html",
    "also",
    "going",
    "open",
    "javascript",
    "file",
    "one",
    "video",
    "going",
    "drag",
    "bottom",
    "code",
    "editor",
    "see",
    "files",
    "side",
    "side",
    "close",
    "rearrange",
    "windows",
    "bit",
    "let",
    "open",
    "tab",
    "project",
    "review",
    "far",
    "click",
    "text",
    "box",
    "type",
    "like",
    "make",
    "dinner",
    "click",
    "add",
    "add",
    "array",
    "array",
    "right",
    "type",
    "another",
    "like",
    "wash",
    "dishes",
    "click",
    "add",
    "add",
    "end",
    "array",
    "array",
    "want",
    "display",
    "page",
    "going",
    "loop",
    "array",
    "going",
    "create",
    "html",
    "code",
    "put",
    "code",
    "web",
    "page",
    "using",
    "dom",
    "first",
    "let",
    "loop",
    "array",
    "make",
    "easier",
    "let",
    "make",
    "copy",
    "array",
    "right",
    "click",
    "copy",
    "remove",
    "rightclick",
    "paste",
    "give",
    "us",
    "default",
    "values",
    "work",
    "top",
    "let",
    "loop",
    "array",
    "using",
    "loop",
    "type",
    "four",
    "brackets",
    "curly",
    "brackets",
    "inside",
    "round",
    "brackets",
    "going",
    "create",
    "loop",
    "variable",
    "let",
    "index",
    "equal",
    "zero",
    "semicolon",
    "loop",
    "condition",
    "less",
    "list",
    "length",
    "semicolon",
    "increment",
    "step",
    "loop",
    "index",
    "array",
    "inside",
    "curly",
    "brackets",
    "let",
    "get",
    "string",
    "index",
    "create",
    "variable",
    "save",
    "const",
    "make",
    "equal",
    "list",
    "square",
    "brackets",
    "going",
    "create",
    "html",
    "code",
    "create",
    "new",
    "line",
    "create",
    "variable",
    "const",
    "html",
    "make",
    "equal",
    "create",
    "html",
    "code",
    "using",
    "using",
    "template",
    "string",
    "inside",
    "create",
    "paragraph",
    "element",
    "less",
    "p",
    "greater",
    "less",
    "sl",
    "p",
    "greater",
    "inside",
    "paragraph",
    "going",
    "insert",
    "type",
    "dollar",
    "curly",
    "brackets",
    "todo",
    "right",
    "looping",
    "array",
    "created",
    "html",
    "code",
    "going",
    "combine",
    "html",
    "code",
    "together",
    "put",
    "web",
    "page",
    "combine",
    "html",
    "together",
    "going",
    "use",
    "accumulator",
    "pattern",
    "top",
    "loop",
    "create",
    "variable",
    "store",
    "result",
    "let",
    "list",
    "capital",
    "html",
    "make",
    "equal",
    "empty",
    "string",
    "start",
    "loop",
    "array",
    "going",
    "add",
    "html",
    "variable",
    "let",
    "create",
    "new",
    "line",
    "list",
    "capital",
    "html",
    "plus",
    "equals",
    "html",
    "combine",
    "html",
    "code",
    "together",
    "loop",
    "let",
    "console",
    "log",
    "list",
    "html",
    "see",
    "get",
    "save",
    "took",
    "array",
    "strings",
    "generated",
    "paragraph",
    "elements",
    "string",
    "combine",
    "together",
    "html",
    "put",
    "page",
    "using",
    "dom",
    "first",
    "let",
    "create",
    "element",
    "put",
    "html",
    "inside",
    "html",
    "file",
    "button",
    "going",
    "create",
    "different",
    "type",
    "element",
    "called",
    "div",
    "element",
    "type",
    "less",
    "div",
    "greater",
    "div",
    "element",
    "represents",
    "container",
    "purpose",
    "contain",
    "elements",
    "inside",
    "like",
    "paragraphs",
    "buttons",
    "even",
    "divs",
    "situation",
    "ca",
    "actually",
    "use",
    "paragraph",
    "element",
    "html",
    "paragraph",
    "inside",
    "another",
    "paragraph",
    "use",
    "div",
    "element",
    "let",
    "put",
    "text",
    "inside",
    "element",
    "learn",
    "type",
    "text",
    "save",
    "like",
    "paragraph",
    "element",
    "div",
    "element",
    "block",
    "element",
    "means",
    "take",
    "entire",
    "line",
    "appears",
    "text",
    "box",
    "button",
    "one",
    "difference",
    "div",
    "paragraph",
    "paragraph",
    "adds",
    "extra",
    "space",
    "paragraph",
    "div",
    "add",
    "extra",
    "space",
    "default",
    "styling",
    "right",
    "learned",
    "div",
    "let",
    "put",
    "html",
    "code",
    "inside",
    "div",
    "first",
    "need",
    "get",
    "element",
    "javascript",
    "add",
    "class",
    "element",
    "class",
    "equals",
    "das",
    "list",
    "let",
    "scroll",
    "put",
    "div",
    "element",
    "inside",
    "javascript",
    "using",
    "document",
    "query",
    "selector",
    "brackets",
    "string",
    "type",
    "dot",
    "select",
    "class",
    "select",
    "class",
    "list",
    "get",
    "div",
    "element",
    "put",
    "inside",
    "javascript",
    "every",
    "html",
    "element",
    "property",
    "called",
    "dot",
    "inner",
    "capital",
    "html",
    "controls",
    "html",
    "inside",
    "element",
    "put",
    "list",
    "html",
    "div",
    "element",
    "going",
    "make",
    "inner",
    "html",
    "equal",
    "list",
    "html",
    "let",
    "save",
    "file",
    "also",
    "save",
    "html",
    "file",
    "code",
    "take",
    "html",
    "created",
    "using",
    "loop",
    "put",
    "div",
    "element",
    "make",
    "show",
    "page",
    "let",
    "try",
    "adding",
    "another",
    "type",
    "watch",
    "youtube",
    "click",
    "add",
    "unfortunately",
    "new",
    "todo",
    "show",
    "page",
    "click",
    "add",
    "run",
    "add",
    "todo",
    "function",
    "update",
    "list",
    "actually",
    "update",
    "html",
    "page",
    "update",
    "html",
    "need",
    "run",
    "code",
    "every",
    "time",
    "add",
    "let",
    "create",
    "function",
    "code",
    "reuse",
    "top",
    "create",
    "function",
    "let",
    "name",
    "render",
    "list",
    "brackets",
    "curly",
    "brackets",
    "word",
    "render",
    "means",
    "display",
    "something",
    "page",
    "put",
    "code",
    "function",
    "delete",
    "curly",
    "bracket",
    "end",
    "type",
    "closed",
    "curly",
    "bracket",
    "let",
    "reformat",
    "code",
    "selecting",
    "lines",
    "press",
    "tab",
    "add",
    "indent",
    "let",
    "use",
    "function",
    "start",
    "display",
    "list",
    "page",
    "call",
    "function",
    "typing",
    "render",
    "list",
    "brackets",
    "let",
    "scroll",
    "every",
    "time",
    "add",
    "list",
    "also",
    "going",
    "display",
    "list",
    "bottom",
    "render",
    "list",
    "brackets",
    "save",
    "start",
    "display",
    "list",
    "page",
    "add",
    "list",
    "like",
    "watch",
    "youtube",
    "click",
    "add",
    "add",
    "list",
    "also",
    "display",
    "page",
    "create",
    "second",
    "version",
    "list",
    "project",
    "way",
    "scroll",
    "render",
    "todo",
    "list",
    "function",
    "technique",
    "called",
    "generating",
    "html",
    "instead",
    "writing",
    "html",
    "hand",
    "looped",
    "array",
    "generated",
    "html",
    "using",
    "javascript",
    "creating",
    "websites",
    "javascript",
    "usually",
    "follow",
    "process",
    "first",
    "save",
    "data",
    "case",
    "saved",
    "data",
    "array",
    "next",
    "use",
    "data",
    "generate",
    "html",
    "finally",
    "make",
    "website",
    "interactive",
    "later",
    "lesson",
    "main",
    "idea",
    "javascript",
    "follow",
    "follow",
    "overall",
    "process",
    "creating",
    "websites",
    "rock",
    "paper",
    "scissors",
    "project",
    "previous",
    "lessons",
    "bit",
    "different",
    "html",
    "needed",
    "already",
    "modify",
    "javascript",
    "process",
    "using",
    "list",
    "one",
    "step",
    "rock",
    "paper",
    "scissors",
    "need",
    "generate",
    "html",
    "standard",
    "process",
    "creating",
    "websites",
    "going",
    "use",
    "process",
    "list",
    "later",
    "amazon",
    "project",
    "well",
    "websites",
    "build",
    "beyond",
    "course",
    "let",
    "take",
    "break",
    "continuing",
    "rest",
    "lesson",
    "exercises",
    "help",
    "practice",
    "learned",
    "far",
    "let",
    "create",
    "final",
    "version",
    "list",
    "go",
    "back",
    "superimple",
    "dodev",
    "scroll",
    "create",
    "final",
    "version",
    "version",
    "type",
    "like",
    "make",
    "dinner",
    "also",
    "add",
    "due",
    "date",
    "click",
    "add",
    "name",
    "due",
    "date",
    "also",
    "delete",
    "button",
    "click",
    "remove",
    "list",
    "let",
    "build",
    "one",
    "feature",
    "time",
    "start",
    "creating",
    "delete",
    "button",
    "go",
    "code",
    "remember",
    "generating",
    "html",
    "list",
    "value",
    "array",
    "create",
    "paragraph",
    "element",
    "add",
    "delete",
    "button",
    "add",
    "delete",
    "button",
    "inside",
    "inside",
    "paragraph",
    "create",
    "less",
    "button",
    "greater",
    "less",
    "slb",
    "button",
    "greater",
    "inside",
    "button",
    "put",
    "text",
    "delete",
    "let",
    "save",
    "console",
    "see",
    "html",
    "generated",
    "delete",
    "button",
    "inside",
    "paragraph",
    "shows",
    "page",
    "next",
    "going",
    "reformat",
    "html",
    "make",
    "little",
    "easier",
    "read",
    "create",
    "new",
    "lines",
    "end",
    "let",
    "put",
    "content",
    "paragraph",
    "line",
    "like",
    "also",
    "put",
    "delete",
    "button",
    "line",
    "remember",
    "template",
    "strings",
    "feature",
    "called",
    "strings",
    "perfect",
    "writing",
    "html",
    "code",
    "last",
    "step",
    "process",
    "make",
    "website",
    "interactive",
    "next",
    "let",
    "make",
    "delete",
    "button",
    "something",
    "click",
    "use",
    "onclick",
    "attribute",
    "usual",
    "inside",
    "button",
    "going",
    "add",
    "onclick",
    "attribute",
    "equals",
    "double",
    "quotes",
    "inside",
    "double",
    "quotes",
    "run",
    "javascript",
    "click",
    "button",
    "works",
    "exact",
    "way",
    "far",
    "course",
    "difference",
    "generating",
    "html",
    "using",
    "javascript",
    "okay",
    "click",
    "one",
    "delete",
    "buttons",
    "want",
    "remove",
    "list",
    "earlier",
    "lesson",
    "learned",
    "remove",
    "value",
    "array",
    "using",
    "method",
    "called",
    "splice",
    "inside",
    "onclick",
    "attribute",
    "going",
    "type",
    "list",
    "dot",
    "splice",
    "brackets",
    "splice",
    "takes",
    "two",
    "numbers",
    "first",
    "number",
    "index",
    "want",
    "remove",
    "click",
    "delete",
    "button",
    "know",
    "index",
    "remove",
    "well",
    "look",
    "loop",
    "already",
    "index",
    "variable",
    "going",
    "insert",
    "string",
    "typing",
    "dollar",
    "curly",
    "brackets",
    "splice",
    "also",
    "takes",
    "another",
    "number",
    "type",
    "comma",
    "second",
    "number",
    "many",
    "values",
    "want",
    "remove",
    "want",
    "remove",
    "one",
    "value",
    "index",
    "finally",
    "updated",
    "list",
    "need",
    "display",
    "list",
    "page",
    "display",
    "list",
    "use",
    "function",
    "render",
    "list",
    "going",
    "type",
    "render",
    "todo",
    "list",
    "brackets",
    "save",
    "see",
    "generated",
    "html",
    "click",
    "first",
    "delete",
    "button",
    "remove",
    "value",
    "index0",
    "first",
    "value",
    "click",
    "second",
    "button",
    "remove",
    "value",
    "index",
    "one",
    "second",
    "value",
    "basically",
    "generating",
    "html",
    "using",
    "loop",
    "click",
    "delete",
    "button",
    "remove",
    "list",
    "display",
    "updated",
    "list",
    "page",
    "create",
    "delete",
    "button",
    "next",
    "let",
    "go",
    "back",
    "superimple",
    "dodev",
    "going",
    "create",
    "due",
    "date",
    "feature",
    "first",
    "let",
    "create",
    "date",
    "selector",
    "html",
    "go",
    "html",
    "file",
    "text",
    "box",
    "going",
    "add",
    "another",
    "input",
    "element",
    "less",
    "input",
    "greater",
    "make",
    "date",
    "selector",
    "input",
    "elements",
    "attribute",
    "called",
    "type",
    "attribute",
    "determines",
    "kind",
    "input",
    "type",
    "text",
    "default",
    "value",
    "going",
    "textbox",
    "change",
    "type",
    "date",
    "save",
    "going",
    "create",
    "date",
    "selector",
    "let",
    "go",
    "back",
    "javascript",
    "code",
    "first",
    "going",
    "scroll",
    "remember",
    "right",
    "list",
    "array",
    "strings",
    "time",
    "also",
    "going",
    "due",
    "date",
    "group",
    "name",
    "due",
    "date",
    "together",
    "using",
    "object",
    "instead",
    "string",
    "going",
    "create",
    "object",
    "give",
    "name",
    "property",
    "make",
    "dinner",
    "give",
    "due",
    "date",
    "property",
    "make",
    "due",
    "date",
    "string",
    "type",
    "whatever",
    "date",
    "page",
    "20",
    "d22",
    "end",
    "object",
    "curly",
    "bracket",
    "turn",
    "object",
    "well",
    "open",
    "curly",
    "bracket",
    "name",
    "date",
    "2022",
    "d12",
    "d22",
    "closed",
    "curly",
    "bracket",
    "object",
    "need",
    "update",
    "rest",
    "code",
    "let",
    "scroll",
    "start",
    "render",
    "function",
    "inside",
    "loop",
    "longer",
    "string",
    "object",
    "let",
    "change",
    "variable",
    "name",
    "object",
    "make",
    "clear",
    "need",
    "get",
    "name",
    "due",
    "date",
    "object",
    "type",
    "const",
    "name",
    "equals",
    "object",
    "name",
    "const",
    "date",
    "equals",
    "object",
    "date",
    "instead",
    "inserting",
    "longer",
    "exists",
    "going",
    "insert",
    "name",
    "also",
    "going",
    "insert",
    "du",
    "date",
    "save",
    "also",
    "display",
    "due",
    "date",
    "continue",
    "going",
    "review",
    "shortcut",
    "use",
    "objects",
    "called",
    "destructuring",
    "notice",
    "variable",
    "name",
    "property",
    "name",
    "actually",
    "shortcut",
    "using",
    "const",
    "curly",
    "brackets",
    "name",
    "equals",
    "todo",
    "object",
    "called",
    "destructuring",
    "takes",
    "name",
    "property",
    "object",
    "puts",
    "variable",
    "also",
    "called",
    "name",
    "shortcut",
    "line",
    "comment",
    "line",
    "also",
    "use",
    "multiple",
    "properties",
    "shortcut",
    "also",
    "take",
    "due",
    "date",
    "object",
    "add",
    "comma",
    "date",
    "thing",
    "line",
    "code",
    "comment",
    "save",
    "everything",
    "still",
    "works",
    "next",
    "let",
    "scroll",
    "going",
    "update",
    "add",
    "todo",
    "function",
    "time",
    "click",
    "add",
    "button",
    "going",
    "get",
    "name",
    "due",
    "date",
    "put",
    "list",
    "let",
    "get",
    "due",
    "date",
    "date",
    "selector",
    "first",
    "using",
    "dom",
    "like",
    "let",
    "add",
    "class",
    "attribute",
    "get",
    "using",
    "queries",
    "selector",
    "input",
    "let",
    "create",
    "variable",
    "const",
    "date",
    "input",
    "element",
    "make",
    "equal",
    "document",
    "query",
    "selector",
    "string",
    "dot",
    "class",
    "want",
    "select",
    "class",
    "input",
    "get",
    "date",
    "selector",
    "element",
    "put",
    "javascript",
    "let",
    "get",
    "due",
    "date",
    "element",
    "using",
    "value",
    "property",
    "let",
    "create",
    "variable",
    "first",
    "const",
    "date",
    "make",
    "equal",
    "date",
    "input",
    "element",
    "value",
    "get",
    "date",
    "selected",
    "save",
    "variable",
    "add",
    "list",
    "instead",
    "name",
    "going",
    "add",
    "object",
    "open",
    "curly",
    "bracket",
    "add",
    "name",
    "property",
    "value",
    "name",
    "variable",
    "name",
    "comma",
    "doe",
    "date",
    "property",
    "value",
    "due",
    "date",
    "variable",
    "due",
    "date",
    "closed",
    "curly",
    "bracket",
    "remember",
    "objects",
    "also",
    "shortcut",
    "property",
    "variable",
    "name",
    "type",
    "like",
    "thing",
    "line",
    "thing",
    "second",
    "line",
    "property",
    "variable",
    "name",
    "type",
    "comma",
    "type",
    "called",
    "shorthand",
    "property",
    "syntax",
    "two",
    "lines",
    "thing",
    "lines",
    "comment",
    "using",
    "double",
    "slash",
    "double",
    "slash",
    "code",
    "needed",
    "update",
    "let",
    "save",
    "javascript",
    "file",
    "also",
    "save",
    "html",
    "file",
    "let",
    "go",
    "project",
    "add",
    "new",
    "like",
    "watch",
    "youtube",
    "select",
    "date",
    "click",
    "add",
    "scroll",
    "see",
    "added",
    "new",
    "name",
    "due",
    "date",
    "delete",
    "button",
    "click",
    "delete",
    "button",
    "remove",
    "click",
    "one",
    "also",
    "remove",
    "correct",
    "actually",
    "functionality",
    "need",
    "project",
    "let",
    "go",
    "code",
    "going",
    "clean",
    "removing",
    "save",
    "finally",
    "let",
    "add",
    "css",
    "project",
    "make",
    "look",
    "like",
    "final",
    "design",
    "go",
    "code",
    "editor",
    "scroll",
    "top",
    "instead",
    "writing",
    "css",
    "let",
    "put",
    "css",
    "separate",
    "file",
    "like",
    "javascript",
    "click",
    "show",
    "files",
    "find",
    "styles",
    "folder",
    "click",
    "styles",
    "folder",
    "click",
    "icon",
    "create",
    "new",
    "file",
    "inside",
    "name",
    "file",
    "music",
    "docss",
    "press",
    "enter",
    "video",
    "going",
    "take",
    "css",
    "file",
    "put",
    "bottom",
    "code",
    "editor",
    "see",
    "files",
    "side",
    "side",
    "click",
    "close",
    "load",
    "css",
    "html",
    "use",
    "link",
    "element",
    "inside",
    "head",
    "section",
    "let",
    "type",
    "less",
    "link",
    "greater",
    "going",
    "give",
    "two",
    "attributes",
    "rel",
    "equals",
    "style",
    "sheet",
    "hre",
    "equals",
    "file",
    "want",
    "load",
    "created",
    "styles",
    "folder",
    "type",
    "styles",
    "slash",
    "go",
    "folder",
    "load",
    "file",
    "list",
    "css",
    "save",
    "let",
    "style",
    "project",
    "one",
    "one",
    "matches",
    "final",
    "design",
    "start",
    "text",
    "page",
    "going",
    "change",
    "font",
    "let",
    "type",
    "body",
    "curly",
    "brackets",
    "change",
    "font",
    "das",
    "family",
    "colon",
    "arial",
    "save",
    "looks",
    "pretty",
    "good",
    "let",
    "work",
    "styling",
    "list",
    "first",
    "let",
    "add",
    "list",
    "type",
    "watch",
    "youtube",
    "select",
    "date",
    "click",
    "add",
    "going",
    "learn",
    "style",
    "list",
    "look",
    "like",
    "notice",
    "list",
    "creates",
    "sort",
    "grid",
    "going",
    "create",
    "grid",
    "using",
    "feature",
    "called",
    "css",
    "grid",
    "let",
    "go",
    "html",
    "first",
    "going",
    "add",
    "class",
    "div",
    "element",
    "style",
    "das",
    "grid",
    "r",
    "let",
    "save",
    "inside",
    "css",
    "going",
    "style",
    "class",
    "using",
    "dot",
    "todo",
    "das",
    "grid",
    "curly",
    "brackets",
    "turn",
    "grid",
    "going",
    "use",
    "property",
    "display",
    "grid",
    "going",
    "add",
    "another",
    "property",
    "called",
    "grid",
    "das",
    "template",
    "dash",
    "columns",
    "basically",
    "sets",
    "many",
    "columns",
    "grid",
    "number",
    "values",
    "give",
    "number",
    "columns",
    "example",
    "give",
    "200",
    "pixels",
    "150",
    "pixels",
    "100",
    "pixels",
    "create",
    "three",
    "columns",
    "grid",
    "first",
    "column",
    "200",
    "pixels",
    "second",
    "colum",
    "column",
    "150",
    "pixels",
    "third",
    "column",
    "100",
    "pixels",
    "element",
    "inside",
    "div",
    "go",
    "columns",
    "first",
    "element",
    "go",
    "first",
    "column",
    "second",
    "element",
    "go",
    "second",
    "column",
    "third",
    "element",
    "go",
    "third",
    "column",
    "three",
    "elements",
    "wrap",
    "around",
    "create",
    "new",
    "row",
    "let",
    "save",
    "unfortunately",
    "quite",
    "work",
    "go",
    "back",
    "javascript",
    "remember",
    "one",
    "paragraph",
    "element",
    "entire",
    "name",
    "due",
    "date",
    "delete",
    "button",
    "go",
    "inside",
    "first",
    "column",
    "next",
    "entire",
    "go",
    "inside",
    "second",
    "column",
    "actually",
    "want",
    "name",
    "go",
    "column",
    "1",
    "due",
    "date",
    "column",
    "2",
    "delete",
    "button",
    "column",
    "3",
    "going",
    "separate",
    "element",
    "three",
    "elements",
    "element",
    "go",
    "column",
    "instead",
    "one",
    "paragraph",
    "let",
    "actually",
    "use",
    "div",
    "element",
    "less",
    "div",
    "greater",
    "less",
    "slash",
    "div",
    "greater",
    "insert",
    "name",
    "reason",
    "use",
    "div",
    "element",
    "div",
    "elements",
    "default",
    "styling",
    "little",
    "easier",
    "style",
    "css",
    "due",
    "date",
    "let",
    "also",
    "create",
    "div",
    "element",
    "less",
    "div",
    "end",
    "less",
    "slash",
    "div",
    "greater",
    "finally",
    "delete",
    "button",
    "already",
    "element",
    "let",
    "reformat",
    "lines",
    "select",
    "lines",
    "press",
    "shift",
    "tab",
    "remove",
    "indent",
    "let",
    "remove",
    "extra",
    "line",
    "basically",
    "separated",
    "three",
    "elements",
    "save",
    "grid",
    "working",
    "element",
    "goes",
    "first",
    "column",
    "element",
    "goes",
    "second",
    "column",
    "button",
    "goes",
    "third",
    "column",
    "lay",
    "elements",
    "grid",
    "like",
    "final",
    "design",
    "next",
    "let",
    "also",
    "lay",
    "inputs",
    "add",
    "button",
    "grid",
    "go",
    "html",
    "let",
    "put",
    "three",
    "elements",
    "div",
    "use",
    "grid",
    "create",
    "less",
    "div",
    "greater",
    "inside",
    "let",
    "remove",
    "add",
    "end",
    "less",
    "sl",
    "div",
    "let",
    "reformat",
    "lines",
    "selecting",
    "press",
    "tab",
    "add",
    "indent",
    "let",
    "make",
    "div",
    "grid",
    "well",
    "let",
    "go",
    "back",
    "css",
    "add",
    "class",
    "div",
    "class",
    "equals",
    "let",
    "call",
    "das",
    "input",
    "dgrid",
    "instead",
    "writing",
    "css",
    "use",
    "feature",
    "css",
    "going",
    "type",
    "comma",
    "enter",
    "type",
    "comma",
    "style",
    "multiple",
    "classes",
    "time",
    "also",
    "going",
    "style",
    "dot",
    "input",
    "das",
    "grid",
    "save",
    "css",
    "file",
    "let",
    "also",
    "save",
    "html",
    "file",
    "input",
    "add",
    "button",
    "also",
    "laid",
    "grid",
    "next",
    "let",
    "adjust",
    "spacing",
    "inside",
    "grid",
    "grid",
    "properties",
    "go",
    "css",
    "press",
    "enter",
    "use",
    "property",
    "column",
    "das",
    "gap",
    "sets",
    "spacing",
    "columns",
    "grid",
    "let",
    "make",
    "colon",
    "10",
    "pixels",
    "save",
    "add",
    "10",
    "pixels",
    "column",
    "let",
    "add",
    "spacing",
    "rows",
    "well",
    "grid",
    "another",
    "property",
    "row",
    "das",
    "gap",
    "colon",
    "10",
    "pixels",
    "save",
    "add",
    "10",
    "pixels",
    "space",
    "rows",
    "notice",
    "add",
    "space",
    "two",
    "rows",
    "two",
    "separate",
    "grids",
    "list",
    "input",
    "grid",
    "add",
    "space",
    "going",
    "use",
    "margin",
    "bottom",
    "style",
    "dot",
    "input",
    "das",
    "grid",
    "add",
    "margin",
    "grid",
    "margin",
    "das",
    "bottom",
    "colon",
    "10",
    "pixels",
    "save",
    "right",
    "let",
    "move",
    "styling",
    "inputs",
    "buttons",
    "start",
    "inputs",
    "first",
    "let",
    "add",
    "class",
    "style",
    "let",
    "add",
    "class",
    "name",
    "das",
    "input",
    "let",
    "let",
    "also",
    "add",
    "another",
    "class",
    "dat",
    "das",
    "input",
    "let",
    "save",
    "inside",
    "css",
    "style",
    "inputs",
    "style",
    "input",
    "curly",
    "brackets",
    "first",
    "let",
    "make",
    "text",
    "bigger",
    "like",
    "final",
    "design",
    "set",
    "font",
    "das",
    "size",
    "colon",
    "15",
    "pixels",
    "save",
    "okay",
    "looks",
    "pretty",
    "good",
    "let",
    "add",
    "spacing",
    "inside",
    "input",
    "add",
    "padding",
    "six",
    "pixels",
    "save",
    "looks",
    "pretty",
    "good",
    "let",
    "move",
    "due",
    "date",
    "input",
    "actually",
    "want",
    "styles",
    "name",
    "input",
    "use",
    "feature",
    "css",
    "type",
    "comma",
    "dot",
    "input",
    "styles",
    "applied",
    "class",
    "class",
    "let",
    "save",
    "looks",
    "pretty",
    "good",
    "let",
    "move",
    "style",
    "buttons",
    "go",
    "html",
    "find",
    "add",
    "button",
    "let",
    "add",
    "class",
    "style",
    "use",
    "button",
    "let",
    "save",
    "inside",
    "css",
    "style",
    "class",
    "using",
    "dot",
    "button",
    "curly",
    "brackets",
    "let",
    "start",
    "background",
    "color",
    "set",
    "colon",
    "green",
    "save",
    "let",
    "text",
    "color",
    "color",
    "colon",
    "white",
    "save",
    "let",
    "remove",
    "border",
    "around",
    "button",
    "using",
    "border",
    "colon",
    "none",
    "save",
    "let",
    "make",
    "text",
    "little",
    "bigger",
    "font",
    "size",
    "colon",
    "15",
    "pixels",
    "save",
    "last",
    "thing",
    "add",
    "put",
    "mouse",
    "button",
    "turns",
    "pointer",
    "icon",
    "using",
    "cursor",
    "colon",
    "pointer",
    "save",
    "next",
    "let",
    "style",
    "delete",
    "buttons",
    "delete",
    "buttons",
    "created",
    "javascript",
    "go",
    "javascript",
    "file",
    "let",
    "add",
    "class",
    "delete",
    "buttons",
    "style",
    "add",
    "class",
    "equals",
    "double",
    "quotes",
    "delete",
    "das",
    "button",
    "let",
    "save",
    "inside",
    "css",
    "bottom",
    "style",
    "dot",
    "delete",
    "das",
    "das",
    "button",
    "curly",
    "brackets",
    "let",
    "start",
    "background",
    "color",
    "set",
    "background",
    "das",
    "color",
    "colon",
    "design",
    "use",
    "color",
    "dark",
    "red",
    "save",
    "style",
    "delete",
    "buttons",
    "let",
    "change",
    "change",
    "text",
    "color",
    "white",
    "use",
    "color",
    "colon",
    "white",
    "save",
    "let",
    "remove",
    "border",
    "using",
    "border",
    "colon",
    "none",
    "save",
    "let",
    "also",
    "make",
    "text",
    "bigger",
    "using",
    "font",
    "das",
    "size",
    "colon",
    "15",
    "pixels",
    "save",
    "let",
    "add",
    "pointer",
    "icon",
    "using",
    "cursor",
    "colon",
    "pointer",
    "save",
    "let",
    "add",
    "padding",
    "top",
    "bottom",
    "button",
    "add",
    "colon",
    "10",
    "pixels",
    "padding",
    "dash",
    "bottom",
    "colon",
    "10",
    "pixels",
    "save",
    "styles",
    "need",
    "delete",
    "button",
    "also",
    "close",
    "console",
    "see",
    "entire",
    "list",
    "however",
    "another",
    "problem",
    "text",
    "button",
    "vertically",
    "aligned",
    "center",
    "vertically",
    "align",
    "center",
    "going",
    "go",
    "back",
    "grid",
    "styles",
    "scroll",
    "grid",
    "css",
    "grid",
    "another",
    "property",
    "vertical",
    "alignment",
    "align",
    "das",
    "items",
    "colon",
    "center",
    "vertically",
    "align",
    "center",
    "save",
    "text",
    "aligned",
    "button",
    "new",
    "problem",
    "add",
    "button",
    "longer",
    "stretching",
    "inputs",
    "default",
    "align",
    "items",
    "stretch",
    "button",
    "stretches",
    "match",
    "inputs",
    "changed",
    "align",
    "center",
    "longer",
    "going",
    "stretch",
    "solve",
    "problem",
    "make",
    "grid",
    "stretch",
    "input",
    "grid",
    "styles",
    "change",
    "align",
    "das",
    "items",
    "back",
    "stretch",
    "save",
    "save",
    "cause",
    "grid",
    "top",
    "stretch",
    "vertically",
    "styling",
    "need",
    "finished",
    "list",
    "project",
    "rest",
    "lesson",
    "going",
    "learn",
    "details",
    "arrays",
    "loops",
    "going",
    "put",
    "back",
    "window",
    "rearrange",
    "window",
    "let",
    "go",
    "back",
    "11",
    "arrays",
    "loops",
    "html",
    "open",
    "tab",
    "file",
    "also",
    "close",
    "files",
    "first",
    "let",
    "comment",
    "previous",
    "code",
    "using",
    "slashstar",
    "bottom",
    "star",
    "slash",
    "scroll",
    "save",
    "first",
    "detail",
    "going",
    "learn",
    "arrays",
    "references",
    "object",
    "lesson",
    "learned",
    "objects",
    "references",
    "arrays",
    "work",
    "way",
    "example",
    "create",
    "array",
    "const",
    "array",
    "1",
    "equals",
    "array",
    "1",
    "2",
    "3",
    "variable",
    "actually",
    "contain",
    "values",
    "1",
    "2",
    "3",
    "array",
    "saved",
    "somewhere",
    "computer",
    "memory",
    "variable",
    "contains",
    "reference",
    "points",
    "array",
    "memory",
    "means",
    "create",
    "copy",
    "variable",
    "const",
    "array",
    "2",
    "equals",
    "array",
    "1",
    "array",
    "2",
    "contain",
    "copy",
    "values",
    "actually",
    "contains",
    "copy",
    "reference",
    "variables",
    "pointing",
    "array",
    "array",
    "push",
    "array",
    "1",
    "array",
    "two",
    "save",
    "show",
    "us",
    "even",
    "though",
    "added",
    "four",
    "array",
    "two",
    "array",
    "1",
    "two",
    "modified",
    "arrays",
    "references",
    "point",
    "array",
    "memory",
    "avoid",
    "behavior",
    "create",
    "copy",
    "values",
    "array",
    "using",
    "method",
    "called",
    "slice",
    "array",
    "slice",
    "instead",
    "make",
    "copy",
    "values",
    "array",
    "one",
    "two",
    "variables",
    "point",
    "two",
    "different",
    "arrays",
    "save",
    "see",
    "line",
    "affected",
    "array",
    "two",
    "second",
    "detail",
    "going",
    "learn",
    "shortcut",
    "called",
    "destructuring",
    "bottom",
    "let",
    "create",
    "new",
    "array",
    "const",
    "array",
    "3",
    "3",
    "equals",
    "array",
    "1",
    "2",
    "3",
    "let",
    "say",
    "want",
    "get",
    "first",
    "value",
    "second",
    "value",
    "array",
    "one",
    "way",
    "use",
    "index",
    "like",
    "another",
    "way",
    "use",
    "shortcut",
    "called",
    "destructuring",
    "going",
    "replace",
    "square",
    "brackets",
    "type",
    "variable",
    "name",
    "type",
    "first",
    "value",
    "take",
    "first",
    "value",
    "save",
    "variable",
    "called",
    "first",
    "value",
    "type",
    "comma",
    "second",
    "value",
    "take",
    "second",
    "value",
    "save",
    "variable",
    "easier",
    "way",
    "get",
    "values",
    "array",
    "save",
    "inside",
    "variable",
    "next",
    "going",
    "learn",
    "details",
    "loops",
    "loops",
    "two",
    "features",
    "called",
    "break",
    "continue",
    "break",
    "lets",
    "us",
    "exit",
    "loop",
    "early",
    "example",
    "let",
    "create",
    "new",
    "lines",
    "let",
    "create",
    "loop",
    "counts",
    "1",
    "10",
    "usual",
    "use",
    "four",
    "loop",
    "let",
    "1",
    "less",
    "equal",
    "10",
    "console",
    "log",
    "save",
    "count",
    "1",
    "10",
    "let",
    "say",
    "8",
    "want",
    "stop",
    "loop",
    "early",
    "first",
    "let",
    "check",
    "equal",
    "8",
    "equal",
    "8",
    "going",
    "stop",
    "loop",
    "typing",
    "break",
    "semicolon",
    "save",
    "reaches",
    "eight",
    "break",
    "cause",
    "loop",
    "stop",
    "counts",
    "eight",
    "break",
    "feature",
    "loop",
    "lets",
    "us",
    "stop",
    "loop",
    "early",
    "next",
    "feature",
    "called",
    "continue",
    "continue",
    "lets",
    "us",
    "skip",
    "one",
    "iteration",
    "loop",
    "one",
    "run",
    "loop",
    "example",
    "let",
    "say",
    "want",
    "skip",
    "number",
    "three",
    "top",
    "check",
    "equal",
    "three",
    "use",
    "code",
    "continue",
    "skip",
    "rest",
    "code",
    "go",
    "back",
    "top",
    "loop",
    "4",
    "save",
    "skip",
    "three",
    "loop",
    "continue",
    "let",
    "us",
    "skip",
    "one",
    "iteration",
    "loop",
    "let",
    "say",
    "want",
    "skip",
    "number",
    "divisible",
    "three",
    "divisible",
    "three",
    "means",
    "number",
    "divided",
    "evenly",
    "three",
    "example",
    "3",
    "six",
    "divisible",
    "three",
    "divisible",
    "three",
    "one",
    "remaining",
    "called",
    "remainder",
    "calculate",
    "remainder",
    "using",
    "remainder",
    "operator",
    "looks",
    "like",
    "check",
    "number",
    "divisible",
    "three",
    "check",
    "remainder",
    "zero",
    "going",
    "replace",
    "remainder",
    "3",
    "check",
    "remainder",
    "equal",
    "z",
    "save",
    "skip",
    "three",
    "six",
    "divisible",
    "three",
    "next",
    "let",
    "use",
    "continue",
    "loop",
    "end",
    "create",
    "new",
    "lines",
    "let",
    "say",
    "want",
    "count",
    "1",
    "10",
    "using",
    "loop",
    "create",
    "loop",
    "variable",
    "let",
    "equal",
    "1",
    "create",
    "loop",
    "less",
    "equal",
    "10",
    "curly",
    "brackets",
    "increment",
    "step",
    "inside",
    "loop",
    "console",
    "log",
    "save",
    "count",
    "1",
    "10",
    "let",
    "say",
    "want",
    "count",
    "numbers",
    "divisible",
    "three",
    "3",
    "6",
    "9",
    "top",
    "check",
    "remainder",
    "3",
    "equal",
    "zero",
    "curly",
    "brackets",
    "might",
    "try",
    "continue",
    "however",
    "loop",
    "continue",
    "actually",
    "skip",
    "increment",
    "step",
    "cause",
    "infinite",
    "loop",
    "loop",
    "using",
    "continue",
    "loop",
    "increment",
    "step",
    "manually",
    "continue",
    "avoid",
    "infinite",
    "loop",
    "save",
    "skip",
    "numbers",
    "divisible",
    "three",
    "3",
    "6",
    "9",
    "remember",
    "loop",
    "use",
    "continue",
    "always",
    "increment",
    "step",
    "manually",
    "loop",
    "however",
    "increment",
    "step",
    "done",
    "automatically",
    "every",
    "iteration",
    "right",
    "last",
    "detail",
    "going",
    "learn",
    "use",
    "loops",
    "functions",
    "let",
    "say",
    "array",
    "numbers",
    "want",
    "create",
    "copy",
    "array",
    "number",
    "doubled",
    "already",
    "code",
    "scroll",
    "code",
    "let",
    "actually",
    "make",
    "copy",
    "code",
    "rightclick",
    "copy",
    "scroll",
    "bottom",
    "right",
    "click",
    "paste",
    "top",
    "let",
    "create",
    "array",
    "called",
    "nums",
    "const",
    "nums",
    "equals",
    "array",
    "one",
    "1",
    "three",
    "save",
    "create",
    "array",
    "number",
    "doubled",
    "wanted",
    "use",
    "loop",
    "different",
    "array",
    "one",
    "one",
    "three",
    "using",
    "function",
    "let",
    "create",
    "function",
    "around",
    "loop",
    "create",
    "function",
    "let",
    "name",
    "dou",
    "full",
    "array",
    "brackets",
    "curly",
    "bracket",
    "remove",
    "closed",
    "curly",
    "bracket",
    "bottom",
    "add",
    "back",
    "select",
    "lines",
    "press",
    "tab",
    "instead",
    "loop",
    "array",
    "every",
    "time",
    "turn",
    "parameter",
    "top",
    "create",
    "parameter",
    "called",
    "nums",
    "going",
    "delete",
    "line",
    "going",
    "loop",
    "parameter",
    "instead",
    "bottom",
    "call",
    "function",
    "using",
    "double",
    "array",
    "brackets",
    "brackets",
    "going",
    "save",
    "array",
    "nums",
    "square",
    "bracket",
    "1",
    "1",
    "3",
    "save",
    "thing",
    "function",
    "use",
    "loop",
    "array",
    "one",
    "one",
    "three",
    "end",
    "double",
    "array",
    "brackets",
    "array",
    "2",
    "2",
    "five",
    "time",
    "save",
    "create",
    "array",
    "numbers",
    "doubled",
    "using",
    "function",
    "reuse",
    "loop",
    "value",
    "another",
    "feature",
    "using",
    "function",
    "loop",
    "break",
    "loop",
    "using",
    "return",
    "instead",
    "first",
    "let",
    "actually",
    "use",
    "return",
    "function",
    "instead",
    "going",
    "return",
    "nums",
    "doubled",
    "going",
    "result",
    "save",
    "thing",
    "except",
    "returning",
    "result",
    "console",
    "logging",
    "outside",
    "function",
    "let",
    "say",
    "see",
    "number",
    "zero",
    "want",
    "stop",
    "loop",
    "early",
    "click",
    "check",
    "num",
    "equal",
    "zero",
    "break",
    "loop",
    "inside",
    "function",
    "also",
    "use",
    "return",
    "statement",
    "break",
    "loop",
    "also",
    "return",
    "nums",
    "doubled",
    "return",
    "statement",
    "end",
    "function",
    "immediately",
    "another",
    "way",
    "ending",
    "loop",
    "add",
    "number",
    "zero",
    "five",
    "save",
    "notice",
    "loop",
    "stops",
    "see",
    "number",
    "zero",
    "return",
    "another",
    "way",
    "breaking",
    "loop",
    "inside",
    "function",
    "end",
    "lesson",
    "lesson",
    "learned",
    "arrays",
    "represent",
    "list",
    "values",
    "learned",
    "loops",
    "let",
    "us",
    "run",
    "code",
    "like",
    "loop",
    "learned",
    "technique",
    "use",
    "loops",
    "called",
    "accumulator",
    "pattern",
    "used",
    "create",
    "list",
    "project",
    "learned",
    "arrays",
    "references",
    "destructuring",
    "shortcut",
    "learned",
    "features",
    "loops",
    "like",
    "break",
    "continue",
    "using",
    "loops",
    "inside",
    "function",
    "exercises",
    "help",
    "practice",
    "arrays",
    "loops",
    "lesson",
    "going",
    "learn",
    "advanced",
    "features",
    "functions",
    "going",
    "use",
    "improve",
    "previous",
    "projects",
    "first",
    "let",
    "create",
    "new",
    "file",
    "lesson",
    "go",
    "code",
    "editor",
    "click",
    "show",
    "files",
    "click",
    "create",
    "new",
    "file",
    "name",
    "advanced",
    "functions",
    "html",
    "press",
    "enter",
    "let",
    "copy",
    "11",
    "arrays",
    "loops",
    "file",
    "click",
    "control",
    "command",
    "rightclick",
    "copy",
    "right",
    "click",
    "paste",
    "close",
    "let",
    "prepare",
    "file",
    "lesson",
    "scroll",
    "change",
    "title",
    "advanced",
    "functions",
    "let",
    "remove",
    "javascript",
    "code",
    "let",
    "save",
    "open",
    "file",
    "browser",
    "right",
    "click",
    "clicking",
    "open",
    "live",
    "server",
    "let",
    "also",
    "open",
    "console",
    "page",
    "rightclick",
    "inspect",
    "open",
    "console",
    "close",
    "previous",
    "tabs",
    "well",
    "previous",
    "files",
    "ready",
    "begin",
    "first",
    "going",
    "review",
    "use",
    "fun",
    "functions",
    "inside",
    "script",
    "element",
    "let",
    "create",
    "function",
    "using",
    "word",
    "function",
    "give",
    "name",
    "greeting",
    "brackets",
    "curly",
    "brackets",
    "inside",
    "function",
    "type",
    "code",
    "string",
    "hello",
    "function",
    "lets",
    "us",
    "reuse",
    "code",
    "run",
    "code",
    "inside",
    "function",
    "type",
    "function",
    "name",
    "greeing",
    "brackets",
    "save",
    "line",
    "code",
    "run",
    "code",
    "inside",
    "function",
    "display",
    "hello",
    "known",
    "calling",
    "function",
    "running",
    "function",
    "understand",
    "functions",
    "going",
    "learn",
    "advanced",
    "feature",
    "functions",
    "functions",
    "values",
    "learned",
    "many",
    "types",
    "values",
    "course",
    "like",
    "numbers",
    "strings",
    "booleans",
    "save",
    "value",
    "variable",
    "example",
    "let",
    "create",
    "new",
    "lines",
    "create",
    "variable",
    "const",
    "num",
    "equal",
    "2",
    "save",
    "value",
    "two",
    "inside",
    "variable",
    "num",
    "functions",
    "also",
    "values",
    "means",
    "like",
    "number",
    "save",
    "function",
    "inside",
    "variable",
    "let",
    "give",
    "try",
    "create",
    "new",
    "line",
    "type",
    "const",
    "function",
    "one",
    "make",
    "equal",
    "function",
    "time",
    "type",
    "function",
    "name",
    "greeting",
    "brackets",
    "curly",
    "brackets",
    "inside",
    "function",
    "type",
    "console",
    "log",
    "string",
    "hello",
    "2",
    "put",
    "semicolon",
    "end",
    "since",
    "saving",
    "variable",
    "variable",
    "contains",
    "function",
    "using",
    "exact",
    "syntax",
    "except",
    "taking",
    "function",
    "saving",
    "variable",
    "functions",
    "values",
    "function",
    "inside",
    "variable",
    "let",
    "actually",
    "function",
    "one",
    "save",
    "show",
    "us",
    "variable",
    "function",
    "one",
    "actually",
    "contains",
    "function",
    "new",
    "line",
    "also",
    "check",
    "type",
    "function",
    "one",
    "save",
    "tell",
    "us",
    "type",
    "variable",
    "function",
    "see",
    "function",
    "another",
    "type",
    "value",
    "save",
    "variable",
    "also",
    "run",
    "function",
    "inside",
    "variable",
    "typing",
    "variable",
    "name",
    "function",
    "1",
    "contains",
    "function",
    "actually",
    "call",
    "using",
    "brackets",
    "run",
    "code",
    "inside",
    "function",
    "save",
    "displays",
    "hello",
    "let",
    "cleanup",
    "code",
    "javascript",
    "long",
    "way",
    "access",
    "function",
    "function",
    "name",
    "needed",
    "access",
    "function",
    "using",
    "variable",
    "function",
    "name",
    "needed",
    "actually",
    "delete",
    "like",
    "called",
    "anonymous",
    "function",
    "means",
    "function",
    "without",
    "name",
    "interesting",
    "thing",
    "know",
    "function",
    "syntax",
    "using",
    "entire",
    "course",
    "actually",
    "shortcut",
    "code",
    "even",
    "though",
    "syntax",
    "uses",
    "var",
    "usually",
    "recommend",
    "var",
    "syntax",
    "actually",
    "couple",
    "advantages",
    "number",
    "one",
    "easier",
    "read",
    "number",
    "two",
    "gives",
    "us",
    "feature",
    "called",
    "hoisting",
    "means",
    "call",
    "function",
    "greeting",
    "brackets",
    "create",
    "code",
    "using",
    "hoisting",
    "worry",
    "order",
    "write",
    "code",
    "hoisting",
    "work",
    "create",
    "function",
    "save",
    "variable",
    "like",
    "javascript",
    "functions",
    "values",
    "like",
    "value",
    "save",
    "variable",
    "let",
    "think",
    "else",
    "value",
    "well",
    "save",
    "value",
    "object",
    "example",
    "let",
    "scroll",
    "create",
    "new",
    "lines",
    "create",
    "object",
    "const",
    "object",
    "1",
    "equals",
    "curly",
    "brackets",
    "inside",
    "object",
    "property",
    "num",
    "value",
    "two",
    "saves",
    "number",
    "two",
    "inside",
    "object",
    "functions",
    "values",
    "also",
    "save",
    "function",
    "inside",
    "object",
    "type",
    "comma",
    "property",
    "fun",
    "colon",
    "create",
    "function",
    "time",
    "function",
    "music",
    "greeting",
    "brackets",
    "curly",
    "brackets",
    "inside",
    "type",
    "console",
    "log",
    "string",
    "hello",
    "3",
    "saves",
    "function",
    "inside",
    "object",
    "property",
    "fun",
    "access",
    "function",
    "use",
    "dot",
    "notation",
    "normal",
    "object",
    "one",
    "dot",
    "fun",
    "value",
    "function",
    "call",
    "using",
    "brackets",
    "save",
    "run",
    "code",
    "inside",
    "function",
    "display",
    "hello",
    "3",
    "remember",
    "called",
    "method",
    "function",
    "saved",
    "inside",
    "object",
    "long",
    "way",
    "access",
    "function",
    "example",
    "using",
    "object",
    "one",
    "fun",
    "need",
    "function",
    "name",
    "delete",
    "use",
    "anonymous",
    "function",
    "let",
    "think",
    "else",
    "value",
    "pass",
    "value",
    "function",
    "example",
    "let",
    "create",
    "function",
    "function",
    "display",
    "brackets",
    "curly",
    "brackets",
    "give",
    "function",
    "parameter",
    "create",
    "parameter",
    "name",
    "param",
    "inside",
    "function",
    "use",
    "parameter",
    "like",
    "variable",
    "param",
    "let",
    "call",
    "function",
    "using",
    "display",
    "brackets",
    "two",
    "take",
    "value",
    "two",
    "save",
    "inside",
    "pam",
    "use",
    "like",
    "variable",
    "save",
    "display",
    "two",
    "console",
    "known",
    "passing",
    "value",
    "function",
    "functions",
    "values",
    "also",
    "pass",
    "function",
    "function",
    "let",
    "give",
    "try",
    "create",
    "new",
    "function",
    "function",
    "run",
    "brackets",
    "curly",
    "brackets",
    "function",
    "also",
    "parameter",
    "let",
    "call",
    "param",
    "call",
    "function",
    "run",
    "brackets",
    "brackets",
    "going",
    "give",
    "function",
    "time",
    "type",
    "function",
    "brackets",
    "curly",
    "brackets",
    "inside",
    "function",
    "type",
    "string",
    "hello",
    "4",
    "take",
    "function",
    "save",
    "inside",
    "pam",
    "use",
    "pam",
    "like",
    "variable",
    "type",
    "pam",
    "pam",
    "contains",
    "function",
    "actually",
    "call",
    "using",
    "brackets",
    "save",
    "code",
    "run",
    "function",
    "created",
    "display",
    "hello",
    "4",
    "called",
    "passing",
    "function",
    "another",
    "function",
    "function",
    "passing",
    "called",
    "callback",
    "function",
    "callback",
    "summarize",
    "functions",
    "values",
    "anything",
    "value",
    "also",
    "function",
    "let",
    "practical",
    "examples",
    "using",
    "functions",
    "values",
    "going",
    "learn",
    "feature",
    "javascript",
    "called",
    "set",
    "timeout",
    "set",
    "timeout",
    "allows",
    "us",
    "run",
    "function",
    "future",
    "first",
    "comment",
    "previous",
    "code",
    "using",
    "slashstar",
    "bottom",
    "star",
    "slash",
    "let",
    "create",
    "new",
    "lines",
    "going",
    "type",
    "code",
    "set",
    "capital",
    "time",
    "set",
    "timeout",
    "function",
    "type",
    "brackets",
    "call",
    "function",
    "set",
    "timeout",
    "takes",
    "two",
    "parameters",
    "inside",
    "brackets",
    "first",
    "parameter",
    "function",
    "want",
    "run",
    "future",
    "let",
    "create",
    "function",
    "brackets",
    "curly",
    "brackets",
    "inside",
    "function",
    "let",
    "type",
    "string",
    "time",
    "using",
    "function",
    "value",
    "passing",
    "another",
    "function",
    "end",
    "type",
    "comma",
    "give",
    "set",
    "timeout",
    "second",
    "parameter",
    "second",
    "parameter",
    "long",
    "wait",
    "running",
    "function",
    "number",
    "milliseconds",
    "milliseconds",
    "equal",
    "1",
    "second",
    "type",
    "milliseconds",
    "equal",
    "3",
    "seconds",
    "set",
    "timeout",
    "wait",
    "3",
    "seconds",
    "call",
    "function",
    "save",
    "3",
    "seconds",
    "going",
    "display",
    "timeout",
    "console",
    "set",
    "timeout",
    "give",
    "function",
    "call",
    "function",
    "certain",
    "amount",
    "time",
    "going",
    "learn",
    "important",
    "concept",
    "called",
    "synchronous",
    "code",
    "set",
    "timeout",
    "let",
    "type",
    "string",
    "next",
    "line",
    "save",
    "notice",
    "displays",
    "next",
    "line",
    "first",
    "3",
    "seconds",
    "displays",
    "timeout",
    "happening",
    "reversed",
    "set",
    "timeout",
    "sets",
    "timer",
    "3",
    "seconds",
    "call",
    "function",
    "however",
    "actually",
    "wait",
    "3",
    "seconds",
    "finish",
    "sets",
    "timer",
    "immediately",
    "goes",
    "next",
    "line",
    "line",
    "displayed",
    "first",
    "called",
    "asynchronous",
    "code",
    "asynchronous",
    "code",
    "means",
    "computer",
    "wo",
    "wait",
    "line",
    "finish",
    "going",
    "next",
    "line",
    "set",
    "timeout",
    "set",
    "timer",
    "immediately",
    "go",
    "next",
    "line",
    "synchronous",
    "code",
    "hand",
    "means",
    "computer",
    "wait",
    "one",
    "line",
    "finish",
    "going",
    "next",
    "line",
    "code",
    "written",
    "course",
    "far",
    "synchronous",
    "code",
    "addition",
    "code",
    "inside",
    "function",
    "also",
    "synchronous",
    "code",
    "added",
    "string",
    "time",
    "save",
    "code",
    "inside",
    "function",
    "still",
    "run",
    "line",
    "line",
    "wait",
    "line",
    "finish",
    "going",
    "next",
    "line",
    "3",
    "seconds",
    "display",
    "timeout",
    "followed",
    "timeout",
    "2",
    "worry",
    "code",
    "normally",
    "write",
    "synchronous",
    "code",
    "run",
    "line",
    "line",
    "usual",
    "time",
    "code",
    "becomes",
    "asynchronous",
    "use",
    "certain",
    "features",
    "javascript",
    "like",
    "set",
    "timeout",
    "set",
    "timeout",
    "part",
    "asynchronous",
    "advantage",
    "set",
    "timeout",
    "asynchronous",
    "block",
    "code",
    "3",
    "seconds",
    "waiting",
    "timer",
    "finish",
    "sets",
    "timer",
    "background",
    "goes",
    "next",
    "line",
    "code",
    "allows",
    "code",
    "things",
    "timer",
    "running",
    "background",
    "similar",
    "real",
    "life",
    "set",
    "timer",
    "alarm",
    "clock",
    "going",
    "stop",
    "wait",
    "timer",
    "finish",
    "going",
    "go",
    "something",
    "else",
    "asynchronous",
    "code",
    "exact",
    "concept",
    "next",
    "going",
    "learn",
    "similar",
    "function",
    "set",
    "timeout",
    "called",
    "set",
    "interval",
    "bottom",
    "let",
    "type",
    "code",
    "set",
    "capital",
    "interval",
    "set",
    "interval",
    "another",
    "function",
    "call",
    "using",
    "brackets",
    "set",
    "interval",
    "takes",
    "two",
    "parameters",
    "set",
    "timeout",
    "first",
    "parameter",
    "function",
    "want",
    "run",
    "future",
    "let",
    "type",
    "function",
    "brackets",
    "curly",
    "brackets",
    "inside",
    "type",
    "console",
    "log",
    "string",
    "interval",
    "let",
    "add",
    "comma",
    "second",
    "parameter",
    "also",
    "number",
    "milliseconds",
    "type",
    "milliseconds",
    "3",
    "seconds",
    "set",
    "interval",
    "run",
    "function",
    "3",
    "seconds",
    "future",
    "time",
    "keep",
    "running",
    "function",
    "every",
    "3",
    "seconds",
    "save",
    "console",
    "every",
    "3",
    "seconds",
    "run",
    "function",
    "display",
    "interval",
    "set",
    "interval",
    "also",
    "asynchronous",
    "type",
    "string",
    "next",
    "line",
    "two",
    "save",
    "set",
    "interval",
    "immediately",
    "go",
    "next",
    "line",
    "display",
    "next",
    "line",
    "two",
    "set",
    "interval",
    "give",
    "function",
    "keep",
    "running",
    "function",
    "certain",
    "period",
    "time",
    "let",
    "project",
    "using",
    "learned",
    "far",
    "let",
    "go",
    "browser",
    "create",
    "new",
    "tab",
    "top",
    "top",
    "let",
    "type",
    "superimple",
    "dodev",
    "slash",
    "projects",
    "slash",
    "advanced",
    "das",
    "functions",
    "press",
    "enter",
    "basically",
    "rock",
    "paper",
    "scissors",
    "game",
    "created",
    "earlier",
    "except",
    "time",
    "extra",
    "button",
    "called",
    "autop",
    "playay",
    "click",
    "buton",
    "button",
    "every",
    "second",
    "computer",
    "play",
    "feature",
    "help",
    "us",
    "practice",
    "using",
    "set",
    "interval",
    "first",
    "let",
    "make",
    "copy",
    "project",
    "files",
    "go",
    "code",
    "editor",
    "click",
    "icon",
    "show",
    "files",
    "let",
    "make",
    "copy",
    "10",
    "rock",
    "paper",
    "scissors",
    "lesson",
    "rightclick",
    "copy",
    "rightclick",
    "paste",
    "stop",
    "going",
    "change",
    "name",
    "right",
    "clicking",
    "rename",
    "remove",
    "copy",
    "end",
    "beginning",
    "change",
    "12",
    "press",
    "enter",
    "let",
    "also",
    "make",
    "copy",
    "javascript",
    "css",
    "files",
    "click",
    "file",
    "right",
    "click",
    "copy",
    "click",
    "folder",
    "right",
    "click",
    "paste",
    "rename",
    "file",
    "rightclick",
    "rename",
    "remove",
    "copy",
    "end",
    "beginning",
    "change",
    "12",
    "press",
    "enter",
    "let",
    "also",
    "make",
    "copy",
    "css",
    "file",
    "select",
    "rightclick",
    "copy",
    "click",
    "folder",
    "right",
    "click",
    "paste",
    "right",
    "click",
    "rename",
    "remove",
    "copy",
    "front",
    "change",
    "12",
    "press",
    "enter",
    "let",
    "scroll",
    "12",
    "rock",
    "paper",
    "scissors",
    "close",
    "inside",
    "head",
    "let",
    "change",
    "load",
    "12",
    "rock",
    "paper",
    "scissors",
    "scroll",
    "bottom",
    "instead",
    "lesson",
    "10",
    "file",
    "load",
    "lesson",
    "12",
    "javascript",
    "file",
    "let",
    "save",
    "open",
    "browser",
    "open",
    "live",
    "server",
    "ready",
    "begin",
    "let",
    "go",
    "back",
    "superimple",
    "dodev",
    "first",
    "thing",
    "thing",
    "going",
    "create",
    "autoplay",
    "button",
    "beside",
    "reset",
    "score",
    "button",
    "going",
    "create",
    "new",
    "button",
    "less",
    "button",
    "greater",
    "inside",
    "text",
    "auto",
    "play",
    "let",
    "save",
    "go",
    "back",
    "tab",
    "button",
    "next",
    "let",
    "style",
    "button",
    "css",
    "give",
    "class",
    "class",
    "equals",
    "das",
    "button",
    "save",
    "let",
    "open",
    "css",
    "file",
    "going",
    "take",
    "file",
    "drag",
    "bottom",
    "see",
    "side",
    "side",
    "close",
    "rearrange",
    "little",
    "bit",
    "going",
    "style",
    "autop",
    "playay",
    "button",
    "let",
    "make",
    "style",
    "reset",
    "score",
    "button",
    "css",
    "scroll",
    "reset",
    "score",
    "button",
    "styles",
    "add",
    "comma",
    "end",
    "type",
    "dot",
    "dasb",
    "button",
    "styles",
    "apply",
    "class",
    "reset",
    "score",
    "button",
    "auto",
    "playay",
    "button",
    "save",
    "styled",
    "project",
    "next",
    "let",
    "make",
    "button",
    "interactive",
    "top",
    "add",
    "onclick",
    "attribute",
    "going",
    "run",
    "javascript",
    "code",
    "let",
    "actually",
    "create",
    "function",
    "separate",
    "javascript",
    "file",
    "run",
    "function",
    "called",
    "auto",
    "play",
    "brackets",
    "let",
    "save",
    "right",
    "function",
    "exist",
    "create",
    "function",
    "javascript",
    "file",
    "file",
    "right",
    "select",
    "drag",
    "see",
    "side",
    "side",
    "let",
    "scroll",
    "going",
    "create",
    "play",
    "game",
    "function",
    "create",
    "new",
    "lines",
    "type",
    "function",
    "auto",
    "play",
    "brackets",
    "curly",
    "brackets",
    "inside",
    "function",
    "want",
    "play",
    "game",
    "every",
    "second",
    "use",
    "set",
    "interval",
    "run",
    "code",
    "every",
    "second",
    "let",
    "type",
    "set",
    "interval",
    "brackets",
    "inside",
    "brackets",
    "give",
    "function",
    "want",
    "run",
    "brackets",
    "curly",
    "brackets",
    "end",
    "let",
    "type",
    "comma",
    "give",
    "means",
    "run",
    "function",
    "every",
    "milliseconds",
    "1",
    "second",
    "inside",
    "function",
    "going",
    "automatically",
    "play",
    "game",
    "play",
    "game",
    "use",
    "function",
    "right",
    "play",
    "game",
    "type",
    "play",
    "game",
    "brackets",
    "need",
    "provide",
    "function",
    "player",
    "move",
    "remember",
    "another",
    "function",
    "pick",
    "computer",
    "move",
    "give",
    "us",
    "random",
    "move",
    "line",
    "let",
    "create",
    "variable",
    "const",
    "player",
    "move",
    "make",
    "equal",
    "pick",
    "random",
    "move",
    "using",
    "pick",
    "computer",
    "move",
    "brackets",
    "finally",
    "take",
    "move",
    "picked",
    "pass",
    "function",
    "player",
    "move",
    "click",
    "button",
    "play",
    "game",
    "every",
    "second",
    "let",
    "save",
    "click",
    "autoplay",
    "works",
    "computer",
    "playing",
    "every",
    "second",
    "let",
    "make",
    "button",
    "button",
    "stop",
    "playing",
    "click",
    "top",
    "let",
    "create",
    "variable",
    "keep",
    "track",
    "whether",
    "playing",
    "use",
    "let",
    "auto",
    "playing",
    "start",
    "make",
    "equal",
    "false",
    "save",
    "inside",
    "function",
    "check",
    "using",
    "statement",
    "brackets",
    "curly",
    "brackets",
    "inside",
    "condition",
    "let",
    "check",
    "playing",
    "auto",
    "playing",
    "playing",
    "want",
    "start",
    "playing",
    "game",
    "code",
    "let",
    "select",
    "code",
    "right",
    "click",
    "cut",
    "right",
    "click",
    "paste",
    "also",
    "start",
    "playing",
    "game",
    "going",
    "change",
    "variable",
    "true",
    "auto",
    "playing",
    "make",
    "equal",
    "true",
    "autop",
    "playing",
    "let",
    "add",
    "else",
    "branch",
    "statement",
    "else",
    "curly",
    "brackets",
    "need",
    "stop",
    "interval",
    "answer",
    "set",
    "interval",
    "actually",
    "returns",
    "number",
    "number",
    "like",
    "id",
    "use",
    "id",
    "stop",
    "interval",
    "front",
    "let",
    "create",
    "variable",
    "save",
    "id",
    "const",
    "interval",
    "id",
    "equals",
    "however",
    "another",
    "problem",
    "every",
    "time",
    "run",
    "function",
    "going",
    "get",
    "different",
    "id",
    "order",
    "save",
    "id",
    "last",
    "time",
    "need",
    "put",
    "variable",
    "outside",
    "function",
    "let",
    "select",
    "remove",
    "scroll",
    "create",
    "variable",
    "let",
    "interval",
    "id",
    "leave",
    "undefined",
    "start",
    "going",
    "save",
    "return",
    "value",
    "variable",
    "typing",
    "interval",
    "id",
    "equals",
    "set",
    "interval",
    "bottom",
    "going",
    "use",
    "interval",
    "id",
    "stop",
    "interval",
    "let",
    "scroll",
    "stop",
    "interval",
    "use",
    "function",
    "called",
    "clear",
    "interval",
    "type",
    "clear",
    "capital",
    "interval",
    "brackets",
    "brackets",
    "going",
    "give",
    "id",
    "want",
    "stop",
    "give",
    "interval",
    "id",
    "interval",
    "id",
    "bottom",
    "let",
    "also",
    "change",
    "autop",
    "playing",
    "false",
    "stopped",
    "auto",
    "playing",
    "equals",
    "false",
    "save",
    "try",
    "button",
    "start",
    "playing",
    "game",
    "every",
    "second",
    "click",
    "button",
    "stop",
    "playing",
    "game",
    "stop",
    "interval",
    "need",
    "save",
    "id",
    "call",
    "clear",
    "interval",
    "id",
    "clean",
    "code",
    "little",
    "removing",
    "extra",
    "line",
    "save",
    "finished",
    "feature",
    "next",
    "let",
    "go",
    "back",
    "advanced",
    "functions",
    "file",
    "click",
    "bottom",
    "open",
    "12",
    "advanced",
    "functions",
    "hide",
    "files",
    "going",
    "learn",
    "features",
    "functions",
    "values",
    "let",
    "actually",
    "close",
    "files",
    "opened",
    "first",
    "let",
    "comment",
    "previous",
    "code",
    "slashstar",
    "bottom",
    "star",
    "slash",
    "let",
    "scroll",
    "save",
    "let",
    "open",
    "tab",
    "file",
    "going",
    "learn",
    "another",
    "way",
    "loop",
    "array",
    "first",
    "let",
    "create",
    "array",
    "type",
    "square",
    "brackets",
    "inside",
    "array",
    "string",
    "make",
    "dinner",
    "another",
    "string",
    "wash",
    "dishes",
    "another",
    "string",
    "watch",
    "youtube",
    "previous",
    "lesson",
    "learned",
    "loop",
    "array",
    "using",
    "loop",
    "loop",
    "another",
    "way",
    "loop",
    "array",
    "using",
    "method",
    "array",
    "called",
    "four",
    "bottom",
    "let",
    "type",
    "dot",
    "capital",
    "e",
    "brackets",
    "four",
    "method",
    "allows",
    "us",
    "loop",
    "array",
    "inside",
    "brackets",
    "going",
    "give",
    "function",
    "type",
    "function",
    "brackets",
    "curly",
    "brackets",
    "passing",
    "function",
    "another",
    "function",
    "however",
    "function",
    "little",
    "different",
    "going",
    "give",
    "parameter",
    "let",
    "create",
    "parameter",
    "called",
    "value",
    "four",
    "loops",
    "array",
    "values",
    "save",
    "value",
    "parameter",
    "run",
    "function",
    "let",
    "value",
    "save",
    "loop",
    "array",
    "display",
    "value",
    "console",
    "let",
    "go",
    "step",
    "bystep",
    "take",
    "first",
    "value",
    "save",
    "parameter",
    "run",
    "function",
    "take",
    "second",
    "value",
    "save",
    "parameter",
    "run",
    "function",
    "take",
    "third",
    "value",
    "save",
    "parameter",
    "run",
    "function",
    "method",
    "actually",
    "preferred",
    "way",
    "loop",
    "array",
    "easier",
    "read",
    "loop",
    "like",
    "also",
    "another",
    "feature",
    "give",
    "function",
    "second",
    "parameter",
    "type",
    "comma",
    "second",
    "parameter",
    "index",
    "position",
    "value",
    "array",
    "first",
    "value",
    "index",
    "zero",
    "second",
    "value",
    "index",
    "one",
    "third",
    "value",
    "index",
    "two",
    "line",
    "let",
    "also",
    "index",
    "save",
    "also",
    "display",
    "index",
    "value",
    "right",
    "let",
    "practical",
    "example",
    "using",
    "method",
    "going",
    "go",
    "back",
    "list",
    "project",
    "created",
    "previous",
    "lesson",
    "click",
    "show",
    "files",
    "let",
    "scroll",
    "let",
    "open",
    "11",
    "code",
    "used",
    "loop",
    "display",
    "list",
    "page",
    "going",
    "switch",
    "using",
    "method",
    "instead",
    "said",
    "first",
    "let",
    "actually",
    "make",
    "copy",
    "files",
    "project",
    "click",
    "let",
    "click",
    "11",
    "list",
    "rightclick",
    "copy",
    "let",
    "click",
    "script",
    "folder",
    "rightclick",
    "paste",
    "rename",
    "rename",
    "remove",
    "copy",
    "end",
    "change",
    "beginning",
    "12",
    "press",
    "enter",
    "let",
    "also",
    "make",
    "copy",
    "css",
    "html",
    "file",
    "project",
    "click",
    "css",
    "file",
    "right",
    "click",
    "copy",
    "click",
    "styles",
    "folder",
    "right",
    "click",
    "paste",
    "rightclick",
    "rename",
    "remove",
    "copy",
    "front",
    "change",
    "12",
    "press",
    "enter",
    "finally",
    "scroll",
    "click",
    "11",
    "todo",
    "list",
    "html",
    "rightclick",
    "copy",
    "right",
    "click",
    "paste",
    "right",
    "click",
    "rename",
    "remove",
    "copy",
    "end",
    "beginning",
    "change",
    "12",
    "press",
    "enter",
    "hide",
    "files",
    "close",
    "lesson",
    "11",
    "files",
    "going",
    "change",
    "css",
    "file",
    "load",
    "12",
    "list",
    "scroll",
    "also",
    "change",
    "javascript",
    "file",
    "load",
    "12",
    "list",
    "let",
    "save",
    "open",
    "browser",
    "right",
    "clicking",
    "open",
    "live",
    "server",
    "okay",
    "let",
    "go",
    "back",
    "js",
    "file",
    "take",
    "file",
    "drag",
    "bottom",
    "rearrange",
    "windows",
    "going",
    "scroll",
    "change",
    "loop",
    "use",
    "method",
    "first",
    "let",
    "type",
    "loop",
    "type",
    "array",
    "want",
    "loop",
    "todo",
    "list",
    "type",
    "dot",
    "use",
    "four",
    "method",
    "brackets",
    "inside",
    "brackets",
    "give",
    "function",
    "want",
    "run",
    "type",
    "function",
    "brackets",
    "curly",
    "brackets",
    "function",
    "two",
    "parameters",
    "first",
    "parameter",
    "contain",
    "value",
    "array",
    "call",
    "music",
    "object",
    "type",
    "comma",
    "second",
    "parameter",
    "contains",
    "index",
    "array",
    "call",
    "index",
    "inside",
    "loop",
    "basically",
    "want",
    "everything",
    "let",
    "make",
    "copy",
    "code",
    "right",
    "click",
    "copy",
    "inside",
    "right",
    "click",
    "paste",
    "scroll",
    "already",
    "object",
    "need",
    "get",
    "array",
    "like",
    "remove",
    "line",
    "let",
    "also",
    "remove",
    "comments",
    "thing",
    "change",
    "previously",
    "using",
    "index",
    "index",
    "called",
    "index",
    "change",
    "index",
    "use",
    "method",
    "instead",
    "loop",
    "compare",
    "code",
    "four",
    "loop",
    "method",
    "easier",
    "read",
    "rest",
    "course",
    "going",
    "prefer",
    "use",
    "four",
    "instead",
    "loop",
    "going",
    "remove",
    "loop",
    "let",
    "scroll",
    "back",
    "save",
    "project",
    "still",
    "works",
    "practical",
    "example",
    "using",
    "method",
    "let",
    "go",
    "back",
    "learn",
    "details",
    "close",
    "javascript",
    "file",
    "go",
    "back",
    "advanced",
    "functions",
    "html",
    "open",
    "tab",
    "file",
    "previous",
    "lesson",
    "learned",
    "feature",
    "loops",
    "called",
    "continue",
    "continue",
    "lets",
    "us",
    "skip",
    "next",
    "iteration",
    "next",
    "run",
    "loop",
    "methods",
    "continue",
    "thing",
    "return",
    "statement",
    "let",
    "say",
    "loop",
    "like",
    "washing",
    "dishes",
    "value",
    "wash",
    "dishes",
    "going",
    "skip",
    "display",
    "console",
    "create",
    "statement",
    "inside",
    "condition",
    "check",
    "value",
    "equal",
    "string",
    "wash",
    "dishes",
    "curly",
    "brackets",
    "equal",
    "return",
    "semicolon",
    "return",
    "statement",
    "end",
    "function",
    "early",
    "go",
    "next",
    "function",
    "basically",
    "thing",
    "continue",
    "loop",
    "save",
    "notice",
    "skipped",
    "wash",
    "dishes",
    "previous",
    "lesson",
    "also",
    "learned",
    "feature",
    "loops",
    "called",
    "break",
    "break",
    "lets",
    "us",
    "exit",
    "loop",
    "early",
    "unfortunately",
    "easy",
    "way",
    "break",
    "4",
    "loop",
    "need",
    "use",
    "break",
    "exit",
    "loop",
    "early",
    "better",
    "use",
    "regular",
    "loop",
    "let",
    "take",
    "break",
    "continuing",
    "rest",
    "lesson",
    "exercises",
    "help",
    "practice",
    "learned",
    "far",
    "next",
    "going",
    "move",
    "learn",
    "shorter",
    "way",
    "write",
    "functions",
    "called",
    "arrow",
    "functions",
    "let",
    "go",
    "bottom",
    "code",
    "create",
    "new",
    "lines",
    "let",
    "create",
    "variable",
    "const",
    "name",
    "variable",
    "arrow",
    "function",
    "make",
    "equal",
    "brackets",
    "equal",
    "greater",
    "arrow",
    "curly",
    "brackets",
    "inside",
    "curly",
    "brackets",
    "type",
    "code",
    "brackets",
    "string",
    "hello",
    "put",
    "semicolon",
    "end",
    "arrow",
    "function",
    "works",
    "way",
    "regular",
    "function",
    "example",
    "call",
    "arrow",
    "function",
    "typing",
    "variable",
    "name",
    "arrow",
    "function",
    "brackets",
    "save",
    "line",
    "code",
    "run",
    "code",
    "inside",
    "arrow",
    "function",
    "display",
    "hello",
    "arrow",
    "functions",
    "mostly",
    "work",
    "way",
    "regular",
    "functions",
    "compare",
    "let",
    "actually",
    "type",
    "code",
    "create",
    "new",
    "lines",
    "type",
    "const",
    "regular",
    "function",
    "equals",
    "word",
    "function",
    "brackets",
    "curly",
    "brackets",
    "string",
    "hello",
    "two",
    "syntaxes",
    "thing",
    "difference",
    "instead",
    "using",
    "word",
    "function",
    "arrow",
    "function",
    "uses",
    "arrow",
    "parameters",
    "work",
    "way",
    "arrow",
    "function",
    "type",
    "parameter",
    "round",
    "brackets",
    "let",
    "type",
    "param",
    "well",
    "want",
    "multiple",
    "parameters",
    "also",
    "works",
    "way",
    "type",
    "comma",
    "param",
    "2",
    "comma",
    "pam",
    "2",
    "finally",
    "return",
    "statements",
    "also",
    "work",
    "way",
    "function",
    "return",
    "five",
    "arrow",
    "function",
    "also",
    "return",
    "five",
    "let",
    "learn",
    "differences",
    "two",
    "arrow",
    "functions",
    "shortcuts",
    "regular",
    "functions",
    "example",
    "bottom",
    "let",
    "create",
    "arrow",
    "function",
    "using",
    "const",
    "name",
    "one",
    "perm",
    "make",
    "equal",
    "arrow",
    "function",
    "brackets",
    "arrow",
    "curly",
    "brackets",
    "arrow",
    "function",
    "going",
    "give",
    "one",
    "parameter",
    "param",
    "inside",
    "function",
    "param",
    "plus",
    "one",
    "arrow",
    "function",
    "one",
    "parameter",
    "round",
    "brackets",
    "optional",
    "actually",
    "remove",
    "one",
    "param",
    "brackets",
    "2",
    "save",
    "display",
    "2",
    "1",
    "3",
    "let",
    "learn",
    "another",
    "shortcut",
    "create",
    "new",
    "lines",
    "type",
    "const",
    "one",
    "line",
    "make",
    "equal",
    "arrow",
    "function",
    "brackets",
    "arrow",
    "curly",
    "brackets",
    "inside",
    "return",
    "2",
    "3",
    "arrow",
    "function",
    "one",
    "line",
    "like",
    "actually",
    "put",
    "line",
    "arrow",
    "everything",
    "line",
    "curly",
    "brackets",
    "actually",
    "optional",
    "remove",
    "also",
    "remove",
    "return",
    "statement",
    "oneline",
    "arrow",
    "function",
    "arrow",
    "automatically",
    "return",
    "result",
    "right",
    "bottom",
    "console",
    "log",
    "call",
    "one",
    "line",
    "function",
    "brackets",
    "save",
    "function",
    "return",
    "plus",
    "three",
    "display",
    "five",
    "console",
    "arrow",
    "functions",
    "shorter",
    "way",
    "writing",
    "regular",
    "function",
    "shortcuts",
    "let",
    "get",
    "practice",
    "using",
    "arrow",
    "functions",
    "let",
    "scroll",
    "code",
    "method",
    "let",
    "use",
    "arrow",
    "function",
    "instead",
    "remove",
    "word",
    "function",
    "round",
    "brackets",
    "add",
    "arrow",
    "equals",
    "greater",
    "save",
    "loop",
    "still",
    "works",
    "passing",
    "function",
    "another",
    "function",
    "like",
    "recommended",
    "use",
    "arrow",
    "functions",
    "makes",
    "code",
    "easier",
    "read",
    "let",
    "use",
    "use",
    "arrow",
    "functions",
    "previous",
    "projects",
    "start",
    "rock",
    "paper",
    "scissors",
    "game",
    "let",
    "open",
    "files",
    "clicking",
    "find",
    "12",
    "rock",
    "paper",
    "scissors",
    "js",
    "file",
    "inside",
    "file",
    "going",
    "scroll",
    "autoplay",
    "function",
    "passing",
    "function",
    "another",
    "function",
    "recommended",
    "use",
    "arrow",
    "function",
    "let",
    "remove",
    "word",
    "function",
    "add",
    "arrow",
    "code",
    "little",
    "easier",
    "read",
    "function",
    "function",
    "autoplay",
    "also",
    "switch",
    "arrow",
    "function",
    "situation",
    "personal",
    "preference",
    "let",
    "actually",
    "create",
    "arrow",
    "function",
    "version",
    "const",
    "auto",
    "play",
    "equals",
    "brackets",
    "arrow",
    "curly",
    "brackets",
    "even",
    "though",
    "could",
    "create",
    "arrow",
    "function",
    "version",
    "actually",
    "prefer",
    "regular",
    "function",
    "syntax",
    "two",
    "reasons",
    "number",
    "one",
    "think",
    "easier",
    "read",
    "number",
    "two",
    "function",
    "syntax",
    "enables",
    "hoisting",
    "means",
    "call",
    "function",
    "create",
    "worry",
    "order",
    "write",
    "code",
    "reasons",
    "actually",
    "prefer",
    "situation",
    "use",
    "regular",
    "function",
    "syntax",
    "arrow",
    "function",
    "comment",
    "arrow",
    "function",
    "using",
    "double",
    "slash",
    "double",
    "slash",
    "let",
    "save",
    "let",
    "open",
    "tab",
    "project",
    "give",
    "give",
    "try",
    "click",
    "autoplay",
    "still",
    "works",
    "replacing",
    "arrow",
    "function",
    "next",
    "let",
    "go",
    "list",
    "project",
    "switch",
    "arrow",
    "functions",
    "go",
    "code",
    "editor",
    "find",
    "list",
    "project",
    "let",
    "scroll",
    "inside",
    "render",
    "list",
    "using",
    "four",
    "passing",
    "function",
    "another",
    "function",
    "recommended",
    "use",
    "arrow",
    "function",
    "remove",
    "word",
    "function",
    "brackets",
    "add",
    "arrow",
    "leave",
    "function",
    "syntax",
    "regular",
    "function",
    "easier",
    "read",
    "enables",
    "hoisting",
    "let",
    "save",
    "go",
    "back",
    "list",
    "everything",
    "still",
    "works",
    "next",
    "let",
    "go",
    "back",
    "12",
    "advanced",
    "functions",
    "html",
    "scroll",
    "bottom",
    "open",
    "tab",
    "file",
    "review",
    "another",
    "place",
    "could",
    "use",
    "arrow",
    "functions",
    "inside",
    "object",
    "bottom",
    "let",
    "create",
    "new",
    "object",
    "con",
    "object",
    "2",
    "equals",
    "object",
    "inside",
    "let",
    "type",
    "property",
    "method",
    "colon",
    "arrow",
    "function",
    "brackets",
    "arrow",
    "curly",
    "brackets",
    "even",
    "though",
    "could",
    "save",
    "arrow",
    "function",
    "inside",
    "object",
    "like",
    "objects",
    "already",
    "shortcut",
    "functions",
    "bottom",
    "could",
    "type",
    "method",
    "brackets",
    "curly",
    "brackets",
    "syntax",
    "called",
    "shorthand",
    "method",
    "syntax",
    "shorthand",
    "method",
    "syntax",
    "actually",
    "easier",
    "read",
    "arrow",
    "function",
    "saving",
    "function",
    "object",
    "actually",
    "recommended",
    "use",
    "syntax",
    "instead",
    "also",
    "another",
    "difference",
    "regular",
    "functions",
    "arrow",
    "functions",
    "learn",
    "later",
    "course",
    "advanced",
    "feature",
    "let",
    "move",
    "going",
    "learn",
    "another",
    "improvement",
    "make",
    "projects",
    "let",
    "comment",
    "code",
    "scroll",
    "type",
    "sl",
    "star",
    "bottom",
    "star",
    "slash",
    "save",
    "next",
    "actually",
    "going",
    "scroll",
    "top",
    "file",
    "going",
    "create",
    "button",
    "page",
    "inside",
    "body",
    "type",
    "less",
    "button",
    "greater",
    "inside",
    "button",
    "text",
    "click",
    "let",
    "say",
    "want",
    "run",
    "javascript",
    "code",
    "click",
    "button",
    "type",
    "click",
    "equals",
    "double",
    "quotes",
    "write",
    "javascript",
    "inside",
    "double",
    "quotes",
    "quot",
    "going",
    "learn",
    "better",
    "way",
    "called",
    "add",
    "event",
    "listener",
    "use",
    "add",
    "event",
    "listener",
    "first",
    "going",
    "get",
    "button",
    "put",
    "javascript",
    "using",
    "document",
    "query",
    "selector",
    "let",
    "add",
    "class",
    "button",
    "select",
    "set",
    "button",
    "inside",
    "script",
    "element",
    "going",
    "use",
    "document",
    "query",
    "selector",
    "brackets",
    "string",
    "button",
    "let",
    "save",
    "button",
    "variable",
    "use",
    "later",
    "front",
    "type",
    "const",
    "button",
    "element",
    "equals",
    "result",
    "every",
    "ht",
    "h",
    "ml",
    "element",
    "method",
    "called",
    "add",
    "event",
    "listener",
    "add",
    "event",
    "listener",
    "let",
    "us",
    "run",
    "code",
    "interact",
    "element",
    "sort",
    "thing",
    "onclick",
    "bottom",
    "let",
    "type",
    "button",
    "element",
    "dot",
    "add",
    "capital",
    "e",
    "event",
    "capital",
    "l",
    "listener",
    "brackets",
    "add",
    "event",
    "listener",
    "two",
    "parameters",
    "first",
    "parameter",
    "event",
    "type",
    "interaction",
    "want",
    "listen",
    "brackets",
    "let",
    "type",
    "string",
    "click",
    "run",
    "code",
    "click",
    "button",
    "way",
    "find",
    "event",
    "names",
    "look",
    "attribute",
    "word",
    "event",
    "next",
    "second",
    "parameter",
    "function",
    "want",
    "run",
    "click",
    "element",
    "type",
    "comma",
    "passing",
    "function",
    "another",
    "function",
    "going",
    "use",
    "arrow",
    "function",
    "type",
    "brackets",
    "arrow",
    "curly",
    "brackets",
    "inside",
    "let",
    "console",
    "log",
    "string",
    "click",
    "save",
    "click",
    "button",
    "run",
    "function",
    "display",
    "click",
    "code",
    "thing",
    "onclick",
    "attribute",
    "however",
    "add",
    "event",
    "listener",
    "advantages",
    "using",
    "attribute",
    "first",
    "lets",
    "us",
    "add",
    "multiple",
    "event",
    "listeners",
    "event",
    "example",
    "let",
    "add",
    "another",
    "click",
    "event",
    "listener",
    "select",
    "code",
    "rightclick",
    "copy",
    "rightclick",
    "paste",
    "let",
    "change",
    "log",
    "click",
    "save",
    "click",
    "button",
    "run",
    "functions",
    "add",
    "event",
    "listener",
    "let",
    "us",
    "add",
    "multiple",
    "listeners",
    "one",
    "event",
    "another",
    "advantage",
    "remove",
    "event",
    "listener",
    "using",
    "method",
    "called",
    "remove",
    "event",
    "listener",
    "code",
    "type",
    "button",
    "element",
    "remove",
    "capital",
    "e",
    "event",
    "capital",
    "l",
    "listener",
    "brackets",
    "remove",
    "ev",
    "listener",
    "also",
    "two",
    "parameters",
    "first",
    "parameter",
    "event",
    "case",
    "string",
    "click",
    "type",
    "comma",
    "second",
    "parameter",
    "function",
    "want",
    "remove",
    "click",
    "button",
    "longer",
    "run",
    "function",
    "ca",
    "type",
    "copy",
    "function",
    "need",
    "use",
    "exact",
    "function",
    "inside",
    "remove",
    "event",
    "listener",
    "save",
    "variable",
    "first",
    "let",
    "create",
    "variable",
    "const",
    "event",
    "listener",
    "equals",
    "select",
    "code",
    "right",
    "click",
    "copy",
    "right",
    "click",
    "paste",
    "replace",
    "var",
    "variable",
    "event",
    "listener",
    "remove",
    "variable",
    "event",
    "listener",
    "save",
    "click",
    "button",
    "display",
    "click",
    "two",
    "added",
    "event",
    "listener",
    "removed",
    "longer",
    "run",
    "function",
    "click",
    "button",
    "see",
    "add",
    "event",
    "listener",
    "gives",
    "us",
    "control",
    "event",
    "listeners",
    "add",
    "multiple",
    "listeners",
    "event",
    "also",
    "remove",
    "listener",
    "event",
    "advantages",
    "best",
    "practice",
    "use",
    "add",
    "event",
    "listener",
    "instead",
    "onclick",
    "attribute",
    "let",
    "go",
    "back",
    "projects",
    "switch",
    "using",
    "add",
    "event",
    "listener",
    "start",
    "rock",
    "paper",
    "scissors",
    "project",
    "open",
    "files",
    "open",
    "12",
    "rock",
    "paper",
    "scissors",
    "click",
    "save",
    "scroll",
    "12",
    "rockpaper",
    "scissors",
    "js",
    "video",
    "drag",
    "bottom",
    "hide",
    "files",
    "rearrange",
    "windows",
    "finally",
    "open",
    "tab",
    "file",
    "let",
    "go",
    "html",
    "scroll",
    "move",
    "buttons",
    "using",
    "onclick",
    "attribute",
    "going",
    "switch",
    "add",
    "event",
    "listener",
    "first",
    "let",
    "get",
    "button",
    "javascript",
    "add",
    "class",
    "select",
    "button",
    "save",
    "let",
    "go",
    "autoplay",
    "function",
    "right",
    "use",
    "add",
    "event",
    "listener",
    "get",
    "button",
    "javascript",
    "using",
    "document",
    "query",
    "selector",
    "brackets",
    "string",
    "dot",
    "button",
    "going",
    "use",
    "dot",
    "add",
    "event",
    "listener",
    "brackets",
    "going",
    "listen",
    "click",
    "comma",
    "give",
    "function",
    "want",
    "run",
    "common",
    "mistake",
    "actually",
    "run",
    "function",
    "example",
    "play",
    "game",
    "brackets",
    "string",
    "rock",
    "supposed",
    "give",
    "function",
    "add",
    "event",
    "listener",
    "however",
    "result",
    "function",
    "actually",
    "run",
    "play",
    "game",
    "give",
    "us",
    "return",
    "value",
    "undefined",
    "code",
    "actually",
    "result",
    "undefined",
    "giving",
    "undefined",
    "add",
    "event",
    "listener",
    "wo",
    "work",
    "order",
    "give",
    "add",
    "event",
    "listener",
    "function",
    "need",
    "create",
    "function",
    "let",
    "remove",
    "code",
    "create",
    "function",
    "using",
    "brackets",
    "arrow",
    "curly",
    "brackets",
    "inside",
    "function",
    "going",
    "call",
    "play",
    "game",
    "type",
    "play",
    "game",
    "brackets",
    "rock",
    "click",
    "rock",
    "button",
    "run",
    "function",
    "play",
    "game",
    "let",
    "remove",
    "onclick",
    "attribute",
    "save",
    "html",
    "also",
    "save",
    "javascript",
    "go",
    "project",
    "click",
    "rock",
    "button",
    "see",
    "works",
    "except",
    "time",
    "using",
    "add",
    "event",
    "listener",
    "let",
    "thing",
    "paper",
    "scissors",
    "button",
    "feel",
    "free",
    "pause",
    "video",
    "want",
    "try",
    "scroll",
    "let",
    "add",
    "class",
    "paper",
    "button",
    "select",
    "button",
    "javascript",
    "make",
    "copy",
    "code",
    "right",
    "click",
    "copy",
    "right",
    "click",
    "paste",
    "going",
    "replace",
    "rock",
    "button",
    "paper",
    "click",
    "button",
    "going",
    "play",
    "game",
    "paper",
    "let",
    "save",
    "remove",
    "onclick",
    "attribute",
    "save",
    "html",
    "click",
    "paper",
    "button",
    "works",
    "finally",
    "let",
    "scissors",
    "button",
    "add",
    "class",
    "js",
    "scissors",
    "dasb",
    "button",
    "inside",
    "javascript",
    "make",
    "copy",
    "rightclick",
    "copy",
    "create",
    "new",
    "lines",
    "rightclick",
    "paste",
    "switch",
    "scissors",
    "button",
    "play",
    "game",
    "scissors",
    "let",
    "save",
    "remove",
    "onclick",
    "attribute",
    "save",
    "html",
    "try",
    "scissors",
    "button",
    "everything",
    "still",
    "works",
    "leave",
    "switching",
    "reset",
    "score",
    "button",
    "autop",
    "playay",
    "button",
    "exercises",
    "let",
    "try",
    "add",
    "event",
    "listener",
    "different",
    "event",
    "use",
    "key",
    "let",
    "say",
    "project",
    "want",
    "make",
    "play",
    "game",
    "keyboard",
    "type",
    "r",
    "play",
    "rock",
    "type",
    "p",
    "play",
    "paper",
    "type",
    "play",
    "scissors",
    "let",
    "go",
    "javascript",
    "scroll",
    "going",
    "add",
    "event",
    "listener",
    "body",
    "time",
    "type",
    "anywhere",
    "page",
    "run",
    "code",
    "going",
    "get",
    "body",
    "element",
    "using",
    "document",
    "body",
    "add",
    "event",
    "listener",
    "brackets",
    "time",
    "first",
    "parameter",
    "event",
    "string",
    "key",
    "let",
    "type",
    "comma",
    "give",
    "function",
    "want",
    "run",
    "brackets",
    "arrow",
    "curly",
    "brackets",
    "inside",
    "let",
    "type",
    "key",
    "save",
    "go",
    "project",
    "open",
    "console",
    "rightclick",
    "click",
    "inspect",
    "click",
    "console",
    "click",
    "page",
    "type",
    "key",
    "keyboard",
    "run",
    "function",
    "display",
    "key",
    "check",
    "key",
    "pressed",
    "play",
    "game",
    "know",
    "key",
    "pressed",
    "earlier",
    "course",
    "used",
    "attribute",
    "key",
    "learned",
    "gets",
    "special",
    "object",
    "called",
    "event",
    "event",
    "object",
    "contains",
    "key",
    "pressed",
    "add",
    "event",
    "listener",
    "also",
    "provides",
    "event",
    "object",
    "provides",
    "parameter",
    "function",
    "inside",
    "round",
    "brackets",
    "let",
    "add",
    "parameter",
    "event",
    "every",
    "time",
    "type",
    "keyboard",
    "add",
    "event",
    "listener",
    "save",
    "event",
    "object",
    "run",
    "function",
    "event",
    "object",
    "contains",
    "key",
    "pressed",
    "let",
    "display",
    "event",
    "key",
    "time",
    "save",
    "click",
    "page",
    "type",
    "r",
    "event",
    "key",
    "contain",
    "r",
    "press",
    "p",
    "event",
    "key",
    "contain",
    "p",
    "know",
    "key",
    "pressed",
    "let",
    "close",
    "instead",
    "create",
    "statement",
    "check",
    "key",
    "pressed",
    "brackets",
    "curly",
    "brackets",
    "check",
    "event",
    "key",
    "equal",
    "string",
    "r",
    "going",
    "play",
    "game",
    "rock",
    "inside",
    "run",
    "play",
    "game",
    "function",
    "play",
    "game",
    "brackets",
    "inside",
    "type",
    "string",
    "rock",
    "let",
    "check",
    "pressed",
    "p",
    "add",
    "another",
    "branch",
    "else",
    "brackets",
    "curly",
    "brackets",
    "second",
    "condition",
    "check",
    "event",
    "key",
    "equal",
    "string",
    "p",
    "play",
    "game",
    "paper",
    "inside",
    "run",
    "play",
    "game",
    "brackets",
    "string",
    "paper",
    "finally",
    "check",
    "pressed",
    "end",
    "add",
    "another",
    "else",
    "brackets",
    "curly",
    "brackets",
    "inside",
    "check",
    "event",
    "key",
    "equal",
    "string",
    "play",
    "game",
    "string",
    "scissors",
    "let",
    "save",
    "click",
    "page",
    "type",
    "r",
    "plays",
    "game",
    "rock",
    "type",
    "p",
    "play",
    "game",
    "paper",
    "type",
    "play",
    "game",
    "scissors",
    "example",
    "using",
    "add",
    "event",
    "listener",
    "different",
    "type",
    "event",
    "key",
    "need",
    "event",
    "object",
    "get",
    "using",
    "parameter",
    "features",
    "going",
    "create",
    "rock",
    "paper",
    "scissors",
    "project",
    "let",
    "move",
    "list",
    "project",
    "switch",
    "add",
    "event",
    "listener",
    "go",
    "code",
    "editor",
    "click",
    "find",
    "12",
    "list",
    "html",
    "also",
    "scroll",
    "scripts",
    "folder",
    "find",
    "12",
    "open",
    "file",
    "going",
    "put",
    "bottom",
    "see",
    "side",
    "side",
    "close",
    "close",
    "rock",
    "paper",
    "scissors",
    "open",
    "tab",
    "project",
    "okay",
    "let",
    "start",
    "switching",
    "add",
    "button",
    "use",
    "add",
    "event",
    "listener",
    "go",
    "html",
    "find",
    "add",
    "button",
    "going",
    "add",
    "class",
    "select",
    "javascript",
    "dasb",
    "button",
    "let",
    "go",
    "javascript",
    "scroll",
    "add",
    "todo",
    "function",
    "get",
    "button",
    "javascript",
    "using",
    "document",
    "query",
    "selector",
    "brackets",
    "string",
    "dot",
    "class",
    "want",
    "get",
    "dasb",
    "button",
    "use",
    "add",
    "event",
    "listener",
    "brackets",
    "inside",
    "brackets",
    "give",
    "event",
    "string",
    "click",
    "comma",
    "function",
    "run",
    "event",
    "happens",
    "brackets",
    "arrow",
    "curly",
    "brackets",
    "want",
    "thing",
    "onclick",
    "attribute",
    "add",
    "call",
    "function",
    "let",
    "save",
    "html",
    "let",
    "remove",
    "onclick",
    "attribute",
    "save",
    "let",
    "try",
    "type",
    "watch",
    "youtube",
    "select",
    "due",
    "date",
    "click",
    "add",
    "add",
    "button",
    "still",
    "works",
    "using",
    "add",
    "event",
    "listener",
    "next",
    "let",
    "switch",
    "delete",
    "buttons",
    "let",
    "scroll",
    "create",
    "delete",
    "buttons",
    "first",
    "add",
    "class",
    "delete",
    "buttons",
    "select",
    "javascript",
    "delete",
    "das",
    "dasb",
    "button",
    "going",
    "use",
    "document",
    "query",
    "selector",
    "add",
    "event",
    "listener",
    "buttons",
    "however",
    "two",
    "problems",
    "first",
    "point",
    "code",
    "string",
    "actually",
    "put",
    "button",
    "page",
    "yet",
    "line",
    "code",
    "put",
    "html",
    "generated",
    "onto",
    "page",
    "order",
    "add",
    "event",
    "listener",
    "need",
    "put",
    "html",
    "page",
    "first",
    "code",
    "going",
    "type",
    "document",
    "query",
    "selector",
    "brackets",
    "string",
    "dot",
    "select",
    "class",
    "delete",
    "das",
    "dutton",
    "however",
    "also",
    "second",
    "problem",
    "going",
    "multiple",
    "delete",
    "buttons",
    "query",
    "selector",
    "gives",
    "us",
    "first",
    "one",
    "select",
    "buttons",
    "page",
    "match",
    "criteria",
    "instead",
    "first",
    "one",
    "document",
    "object",
    "another",
    "method",
    "called",
    "query",
    "selector",
    "query",
    "selector",
    "give",
    "us",
    "elements",
    "page",
    "class",
    "js",
    "delete",
    "todo",
    "button",
    "let",
    "result",
    "see",
    "looks",
    "like",
    "music",
    "brackets",
    "close",
    "bracket",
    "save",
    "rightclick",
    "inspect",
    "console",
    "expand",
    "see",
    "document",
    "query",
    "selector",
    "gives",
    "us",
    "list",
    "elements",
    "list",
    "works",
    "like",
    "array",
    "index",
    "zero",
    "first",
    "button",
    "index",
    "one",
    "second",
    "button",
    "let",
    "remove",
    "add",
    "event",
    "listeners",
    "buttons",
    "going",
    "loop",
    "list",
    "delete",
    "buttons",
    "list",
    "works",
    "like",
    "array",
    "use",
    "method",
    "loop",
    "end",
    "let",
    "type",
    "enter",
    "tab",
    "dot",
    "brackets",
    "usual",
    "give",
    "function",
    "want",
    "run",
    "values",
    "type",
    "brackets",
    "arrow",
    "curly",
    "brackets",
    "every",
    "time",
    "loop",
    "list",
    "give",
    "us",
    "two",
    "parameters",
    "first",
    "one",
    "value",
    "list",
    "delete",
    "button",
    "element",
    "let",
    "name",
    "delete",
    "button",
    "type",
    "comma",
    "second",
    "parameter",
    "index",
    "index",
    "want",
    "add",
    "event",
    "listener",
    "delete",
    "button",
    "inside",
    "type",
    "delete",
    "button",
    "dot",
    "add",
    "event",
    "listener",
    "brackets",
    "inside",
    "brackets",
    "tell",
    "event",
    "want",
    "listen",
    "string",
    "click",
    "comma",
    "function",
    "want",
    "run",
    "event",
    "happens",
    "brackets",
    "arrow",
    "curly",
    "brackets",
    "click",
    "delete",
    "button",
    "want",
    "thing",
    "onclick",
    "attribute",
    "let",
    "select",
    "code",
    "rightclick",
    "copy",
    "right",
    "click",
    "paste",
    "remove",
    "characters",
    "string",
    "anymore",
    "need",
    "summarize",
    "used",
    "query",
    "selector",
    "get",
    "list",
    "delete",
    "buttons",
    "page",
    "looped",
    "list",
    "using",
    "four",
    "delete",
    "button",
    "added",
    "click",
    "event",
    "listener",
    "ran",
    "code",
    "scroll",
    "remove",
    "onclick",
    "attribute",
    "save",
    "go",
    "back",
    "page",
    "close",
    "console",
    "try",
    "delete",
    "button",
    "see",
    "still",
    "works",
    "switch",
    "list",
    "project",
    "use",
    "add",
    "event",
    "listener",
    "finished",
    "improving",
    "projects",
    "rest",
    "lesson",
    "going",
    "learn",
    "features",
    "use",
    "functions",
    "values",
    "let",
    "close",
    "go",
    "back",
    "12",
    "advanced",
    "functions",
    "html",
    "open",
    "tab",
    "file",
    "let",
    "also",
    "comment",
    "javascript",
    "code",
    "using",
    "slashstar",
    "star",
    "slash",
    "let",
    "save",
    "let",
    "scroll",
    "bottom",
    "code",
    "create",
    "new",
    "lines",
    "lesson",
    "learned",
    "array",
    "method",
    "lets",
    "us",
    "loop",
    "array",
    "going",
    "learn",
    "two",
    "array",
    "methods",
    "called",
    "filter",
    "map",
    "let",
    "start",
    "filter",
    "let",
    "say",
    "array",
    "numbers",
    "want",
    "create",
    "copy",
    "array",
    "negative",
    "numbers",
    "removed",
    "let",
    "go",
    "create",
    "array",
    "number",
    "one",
    "comma",
    "comma",
    "5",
    "type",
    "method",
    "filter",
    "brackets",
    "filter",
    "works",
    "way",
    "give",
    "function",
    "bracket",
    "arrow",
    "curly",
    "bracket",
    "function",
    "two",
    "parameters",
    "value",
    "index",
    "filter",
    "take",
    "first",
    "first",
    "value",
    "save",
    "run",
    "function",
    "take",
    "second",
    "value",
    "save",
    "run",
    "function",
    "third",
    "value",
    "save",
    "run",
    "function",
    "difference",
    "time",
    "inner",
    "function",
    "return",
    "value",
    "type",
    "return",
    "going",
    "return",
    "boolean",
    "like",
    "true",
    "return",
    "value",
    "matters",
    "filter",
    "creates",
    "new",
    "array",
    "inner",
    "function",
    "returns",
    "true",
    "put",
    "value",
    "new",
    "array",
    "inner",
    "function",
    "returns",
    "false",
    "put",
    "value",
    "new",
    "array",
    "example",
    "front",
    "let",
    "result",
    "type",
    "open",
    "bracket",
    "close",
    "bracket",
    "save",
    "example",
    "inner",
    "function",
    "always",
    "returns",
    "true",
    "three",
    "values",
    "new",
    "array",
    "change",
    "return",
    "value",
    "false",
    "every",
    "time",
    "save",
    "three",
    "values",
    "added",
    "new",
    "array",
    "let",
    "use",
    "solve",
    "problem",
    "want",
    "remove",
    "negative",
    "numbers",
    "array",
    "inside",
    "inner",
    "function",
    "going",
    "return",
    "true",
    "number",
    "positive",
    "return",
    "false",
    "number",
    "negative",
    "check",
    "value",
    "greater",
    "equal",
    "zero",
    "curly",
    "brackets",
    "return",
    "true",
    "include",
    "new",
    "array",
    "else",
    "return",
    "false",
    "include",
    "new",
    "array",
    "let",
    "remove",
    "save",
    "values",
    "greater",
    "zero",
    "new",
    "copy",
    "using",
    "sort",
    "filter",
    "values",
    "based",
    "criteria",
    "method",
    "called",
    "filter",
    "shorten",
    "logic",
    "using",
    "code",
    "return",
    "value",
    "greater",
    "equal",
    "zero",
    "comparison",
    "return",
    "true",
    "greater",
    "equal",
    "zero",
    "return",
    "false",
    "otherwise",
    "line",
    "thing",
    "code",
    "comment",
    "slashstar",
    "star",
    "slash",
    "save",
    "always",
    "return",
    "truthy",
    "falsy",
    "value",
    "instead",
    "true",
    "false",
    "last",
    "array",
    "method",
    "going",
    "learn",
    "called",
    "map",
    "let",
    "create",
    "new",
    "lines",
    "scroll",
    "let",
    "say",
    "array",
    "numbers",
    "like",
    "array",
    "1",
    "1",
    "3",
    "want",
    "make",
    "copy",
    "array",
    "number",
    "doubled",
    "end",
    "type",
    "map",
    "brackets",
    "map",
    "works",
    "like",
    "filter",
    "brackets",
    "give",
    "function",
    "bracket",
    "arrow",
    "curly",
    "brackets",
    "function",
    "get",
    "two",
    "parameters",
    "first",
    "parameter",
    "value",
    "array",
    "second",
    "parameter",
    "comma",
    "index",
    "map",
    "take",
    "first",
    "value",
    "save",
    "parameter",
    "run",
    "function",
    "take",
    "second",
    "value",
    "save",
    "parameter",
    "run",
    "function",
    "third",
    "value",
    "save",
    "run",
    "function",
    "inside",
    "function",
    "going",
    "return",
    "value",
    "map",
    "creates",
    "new",
    "array",
    "whatever",
    "return",
    "added",
    "new",
    "array",
    "return",
    "10",
    "result",
    "close",
    "bracket",
    "save",
    "create",
    "array",
    "value",
    "becomes",
    "10",
    "interesting",
    "thing",
    "actually",
    "use",
    "value",
    "return",
    "value",
    "10",
    "save",
    "take",
    "value",
    "original",
    "array",
    "add",
    "10",
    "put",
    "new",
    "array",
    "map",
    "transform",
    "array",
    "another",
    "array",
    "based",
    "return",
    "value",
    "want",
    "return",
    "array",
    "number",
    "doubled",
    "multiply",
    "value",
    "two",
    "save",
    "give",
    "us",
    "2",
    "26",
    "next",
    "going",
    "review",
    "shortcuts",
    "arrow",
    "functions",
    "make",
    "code",
    "compact",
    "first",
    "let",
    "make",
    "copy",
    "code",
    "rightclick",
    "copy",
    "rightclick",
    "paste",
    "notice",
    "inner",
    "function",
    "using",
    "index",
    "let",
    "remove",
    "arrow",
    "function",
    "one",
    "parameter",
    "round",
    "brackets",
    "optional",
    "also",
    "remove",
    "make",
    "code",
    "compact",
    "another",
    "shortcut",
    "one",
    "line",
    "code",
    "arrow",
    "function",
    "put",
    "code",
    "one",
    "line",
    "like",
    "curly",
    "brackets",
    "return",
    "optional",
    "actually",
    "remove",
    "code",
    "arrow",
    "automatically",
    "return",
    "result",
    "right",
    "type",
    "return",
    "code",
    "thing",
    "code",
    "see",
    "shortcuts",
    "make",
    "code",
    "compact",
    "clean",
    "let",
    "save",
    "give",
    "us",
    "result",
    "last",
    "thing",
    "going",
    "learn",
    "lesson",
    "feature",
    "functions",
    "called",
    "closure",
    "closure",
    "means",
    "function",
    "access",
    "value",
    "always",
    "access",
    "value",
    "let",
    "take",
    "look",
    "example",
    "going",
    "go",
    "back",
    "list",
    "project",
    "click",
    "scroll",
    "12",
    "close",
    "open",
    "tab",
    "list",
    "let",
    "scroll",
    "query",
    "selector",
    "going",
    "focus",
    "inner",
    "function",
    "notice",
    "fun",
    "function",
    "uses",
    "index",
    "interesting",
    "thing",
    "index",
    "soon",
    "ends",
    "index",
    "gets",
    "deleted",
    "example",
    "add",
    "new",
    "lines",
    "try",
    "console",
    "log",
    "index",
    "save",
    "go",
    "project",
    "rightclick",
    "inspect",
    "con",
    "tell",
    "us",
    "index",
    "defined",
    "soon",
    "end",
    "loop",
    "index",
    "exist",
    "anymore",
    "however",
    "move",
    "inner",
    "function",
    "inside",
    "index",
    "save",
    "click",
    "delete",
    "button",
    "tell",
    "us",
    "index",
    "zero",
    "even",
    "though",
    "index",
    "gets",
    "deleted",
    "right",
    "away",
    "click",
    "one",
    "buttons",
    "later",
    "still",
    "access",
    "index",
    "feature",
    "called",
    "closure",
    "function",
    "access",
    "value",
    "always",
    "access",
    "value",
    "value",
    "like",
    "index",
    "gets",
    "packaged",
    "together",
    "enclosed",
    "function",
    "call",
    "closure",
    "even",
    "value",
    "index",
    "gets",
    "deleted",
    "loop",
    "click",
    "delete",
    "button",
    "5",
    "seconds",
    "later",
    "even",
    "5",
    "minutes",
    "later",
    "function",
    "always",
    "access",
    "index",
    "closures",
    "something",
    "naturally",
    "happens",
    "write",
    "javascript",
    "code",
    "nice",
    "know",
    "feature",
    "works",
    "advanced",
    "techniques",
    "closures",
    "used",
    "often",
    "wo",
    "covering",
    "course",
    "maybe",
    "different",
    "video",
    "let",
    "remove",
    "save",
    "end",
    "lesson",
    "lesson",
    "learned",
    "functions",
    "values",
    "learned",
    "set",
    "time",
    "set",
    "interval",
    "lets",
    "us",
    "run",
    "function",
    "future",
    "learned",
    "array",
    "method",
    "called",
    "cleaner",
    "way",
    "looping",
    "array",
    "used",
    "four",
    "arrow",
    "functions",
    "add",
    "event",
    "listener",
    "improve",
    "projects",
    "learned",
    "two",
    "array",
    "methods",
    "filter",
    "map",
    "learned",
    "feature",
    "functions",
    "called",
    "closures",
    "exercises",
    "help",
    "practice",
    "learned",
    "lesson",
    "lesson",
    "going",
    "start",
    "amazon",
    "project",
    "also",
    "going",
    "learn",
    "useful",
    "technology",
    "called",
    "git",
    "first",
    "let",
    "take",
    "look",
    "amazon",
    "project",
    "see",
    "works",
    "going",
    "go",
    "browser",
    "create",
    "new",
    "tab",
    "top",
    "going",
    "type",
    "super",
    "simple",
    "dodev",
    "sl",
    "projects",
    "sl",
    "amazon",
    "press",
    "enter",
    "going",
    "project",
    "going",
    "build",
    "course",
    "website",
    "looks",
    "like",
    "amazon",
    "see",
    "list",
    "products",
    "homepage",
    "add",
    "products",
    "cart",
    "clicking",
    "add",
    "cart",
    "see",
    "cart",
    "clicking",
    "top",
    "right",
    "page",
    "show",
    "us",
    "products",
    "cart",
    "also",
    "show",
    "us",
    "cost",
    "order",
    "including",
    "shipping",
    "taxes",
    "ready",
    "create",
    "order",
    "click",
    "button",
    "create",
    "order",
    "take",
    "us",
    "page",
    "shows",
    "us",
    "list",
    "past",
    "orders",
    "also",
    "track",
    "order",
    "clicking",
    "track",
    "package",
    "button",
    "take",
    "us",
    "page",
    "tells",
    "us",
    "progress",
    "order",
    "whether",
    "preparing",
    "shipped",
    "delivered",
    "overview",
    "project",
    "going",
    "built",
    "complex",
    "website",
    "different",
    "pages",
    "interact",
    "create",
    "full",
    "app",
    "first",
    "thing",
    "going",
    "download",
    "starting",
    "code",
    "project",
    "going",
    "create",
    "new",
    "tab",
    "going",
    "type",
    "slup",
    "simple",
    "dev",
    "sl",
    "javascript",
    "amazon",
    "project",
    "press",
    "enter",
    "also",
    "find",
    "starting",
    "code",
    "description",
    "clicking",
    "going",
    "links",
    "lesson",
    "page",
    "see",
    "starting",
    "code",
    "amazon",
    "project",
    "code",
    "contains",
    "html",
    "css",
    "need",
    "reason",
    "going",
    "use",
    "starting",
    "code",
    "instead",
    "writing",
    "course",
    "focused",
    "javascript",
    "html",
    "css",
    "write",
    "code",
    "would",
    "take",
    "much",
    "time",
    "would",
    "entire",
    "course",
    "want",
    "learn",
    "create",
    "code",
    "check",
    "html",
    "css",
    "full",
    "course",
    "would",
    "teach",
    "skills",
    "need",
    "javascript",
    "course",
    "going",
    "start",
    "html",
    "css",
    "going",
    "focus",
    "adding",
    "javascript",
    "website",
    "let",
    "download",
    "code",
    "clicking",
    "green",
    "code",
    "button",
    "click",
    "download",
    "zip",
    "finished",
    "downloading",
    "going",
    "go",
    "downloads",
    "folder",
    "folder",
    "right",
    "called",
    "downloads",
    "going",
    "unzip",
    "file",
    "double",
    "clicking",
    "give",
    "us",
    "folder",
    "contains",
    "code",
    "going",
    "select",
    "folder",
    "move",
    "desktop",
    "next",
    "let",
    "go",
    "desktop",
    "going",
    "close",
    "hide",
    "browser",
    "desktop",
    "going",
    "select",
    "folder",
    "downloaded",
    "going",
    "rename",
    "end",
    "remove",
    "main",
    "press",
    "enter",
    "rename",
    "javascript",
    "amazon",
    "project",
    "next",
    "going",
    "take",
    "folder",
    "open",
    "code",
    "editor",
    "let",
    "open",
    "vs",
    "code",
    "going",
    "click",
    "file",
    "open",
    "folder",
    "going",
    "find",
    "folder",
    "downloaded",
    "desktop",
    "folder",
    "right",
    "click",
    "folder",
    "click",
    "select",
    "folder",
    "close",
    "welcome",
    "message",
    "okay",
    "starting",
    "code",
    "going",
    "set",
    "project",
    "first",
    "let",
    "open",
    "browser",
    "close",
    "github",
    "page",
    "well",
    "tabs",
    "previous",
    "lessons",
    "close",
    "tabs",
    "right",
    "leave",
    "final",
    "amazon",
    "project",
    "open",
    "next",
    "let",
    "go",
    "back",
    "vs",
    "code",
    "going",
    "open",
    "project",
    "browser",
    "going",
    "select",
    "file",
    "amazon",
    "html",
    "file",
    "corresponds",
    "homepage",
    "let",
    "select",
    "file",
    "rightclick",
    "open",
    "live",
    "server",
    "going",
    "rearrange",
    "windows",
    "see",
    "side",
    "side",
    "ready",
    "begin",
    "let",
    "take",
    "look",
    "code",
    "start",
    "mentioned",
    "html",
    "css",
    "website",
    "currently",
    "javascript",
    "page",
    "one",
    "thing",
    "notice",
    "actually",
    "create",
    "almost",
    "website",
    "using",
    "html",
    "css",
    "actually",
    "even",
    "need",
    "javascript",
    "create",
    "able",
    "create",
    "header",
    "top",
    "well",
    "three",
    "products",
    "start",
    "shows",
    "html",
    "css",
    "pretty",
    "much",
    "create",
    "everything",
    "see",
    "visually",
    "website",
    "javascript",
    "comes",
    "javascript",
    "makes",
    "website",
    "interactive",
    "right",
    "click",
    "add",
    "card",
    "button",
    "looks",
    "pretty",
    "nice",
    "actually",
    "anything",
    "added",
    "javascript",
    "yet",
    "role",
    "javascript",
    "make",
    "website",
    "interactive",
    "created",
    "content",
    "styling",
    "begin",
    "adding",
    "javascript",
    "website",
    "actually",
    "going",
    "take",
    "time",
    "learn",
    "another",
    "useful",
    "technology",
    "called",
    "git",
    "git",
    "technology",
    "lets",
    "us",
    "track",
    "changes",
    "code",
    "examp",
    "example",
    "follow",
    "along",
    "let",
    "say",
    "working",
    "website",
    "go",
    "code",
    "editor",
    "change",
    "code",
    "let",
    "say",
    "add",
    "code",
    "file",
    "going",
    "delete",
    "code",
    "select",
    "code",
    "delete",
    "save",
    "file",
    "going",
    "change",
    "code",
    "bottom",
    "let",
    "say",
    "made",
    "mistake",
    "want",
    "undo",
    "changes",
    "made",
    "would",
    "would",
    "remember",
    "code",
    "changed",
    "different",
    "files",
    "right",
    "really",
    "difficult",
    "problem",
    "run",
    "bigger",
    "projects",
    "changing",
    "lots",
    "code",
    "different",
    "files",
    "really",
    "hard",
    "keep",
    "track",
    "code",
    "changed",
    "git",
    "comes",
    "git",
    "lets",
    "us",
    "track",
    "changes",
    "code",
    "helps",
    "us",
    "solve",
    "problem",
    "looks",
    "like",
    "git",
    "set",
    "project",
    "go",
    "section",
    "vss",
    "code",
    "section",
    "git",
    "git",
    "tell",
    "files",
    "changed",
    "click",
    "files",
    "tell",
    "lines",
    "changed",
    "exactly",
    "code",
    "changed",
    "want",
    "click",
    "button",
    "reverse",
    "changes",
    "file",
    "also",
    "click",
    "reverse",
    "changes",
    "files",
    "see",
    "kit",
    "helps",
    "us",
    "track",
    "changes",
    "code",
    "lets",
    "us",
    "easily",
    "undo",
    "changes",
    "need",
    "technology",
    "really",
    "useful",
    "bigger",
    "projects",
    "like",
    "amazon",
    "project",
    "going",
    "changing",
    "lots",
    "code",
    "many",
    "different",
    "files",
    "start",
    "project",
    "going",
    "learn",
    "set",
    "use",
    "git",
    "first",
    "thing",
    "need",
    "install",
    "git",
    "go",
    "section",
    "vs",
    "code",
    "called",
    "source",
    "control",
    "section",
    "looks",
    "like",
    "button",
    "initialize",
    "repository",
    "means",
    "already",
    "git",
    "installed",
    "otherwise",
    "windows",
    "click",
    "button",
    "click",
    "open",
    "go",
    "website",
    "directly",
    "click",
    "link",
    "download",
    "git",
    "finished",
    "downloading",
    "going",
    "run",
    "installer",
    "go",
    "default",
    "options",
    "using",
    "mac",
    "click",
    "type",
    "terminal",
    "press",
    "enter",
    "inside",
    "going",
    "type",
    "git",
    "press",
    "enter",
    "click",
    "link",
    "install",
    "git",
    "right",
    "installing",
    "git",
    "going",
    "restart",
    "vs",
    "code",
    "make",
    "sure",
    "amazon",
    "project",
    "open",
    "go",
    "git",
    "section",
    "look",
    "like",
    "button",
    "initialize",
    "repository",
    "installed",
    "git",
    "going",
    "set",
    "git",
    "amazon",
    "project",
    "clicking",
    "initialize",
    "repository",
    "button",
    "work",
    "also",
    "try",
    "going",
    "terminal",
    "menu",
    "click",
    "new",
    "terminal",
    "inside",
    "terminal",
    "type",
    "kit",
    "press",
    "enter",
    "repository",
    "folder",
    "changes",
    "tracked",
    "clicking",
    "initialize",
    "repository",
    "turns",
    "current",
    "folder",
    "javascript",
    "amazon",
    "project",
    "repository",
    "changes",
    "inside",
    "folder",
    "tracked",
    "git",
    "start",
    "git",
    "tell",
    "us",
    "files",
    "new",
    "files",
    "set",
    "repository",
    "files",
    "considered",
    "new",
    "changes",
    "starting",
    "keep",
    "track",
    "next",
    "need",
    "configure",
    "username",
    "email",
    "git",
    "worry",
    "information",
    "used",
    "anywhere",
    "online",
    "forget",
    "add",
    "author",
    "changes",
    "make",
    "configure",
    "username",
    "email",
    "going",
    "go",
    "top",
    "open",
    "terminal",
    "menu",
    "click",
    "new",
    "terminal",
    "inside",
    "going",
    "type",
    "get",
    "config",
    "double",
    "quotes",
    "looks",
    "familiar",
    "already",
    "done",
    "skip",
    "step",
    "next",
    "step",
    "double",
    "quotes",
    "pick",
    "username",
    "want",
    "use",
    "use",
    "super",
    "simple",
    "dev",
    "press",
    "enter",
    "also",
    "configure",
    "email",
    "typing",
    "get",
    "config",
    "user",
    "emil",
    "double",
    "quotes",
    "double",
    "quotes",
    "put",
    "email",
    "put",
    "simon",
    "superimple",
    "dodev",
    "press",
    "enter",
    "configured",
    "username",
    "email",
    "close",
    "terminal",
    "next",
    "going",
    "save",
    "changes",
    "git",
    "git",
    "start",
    "tracking",
    "new",
    "changes",
    "make",
    "save",
    "changes",
    "going",
    "type",
    "type",
    "message",
    "describing",
    "changed",
    "let",
    "type",
    "message",
    "add",
    "starting",
    "files",
    "going",
    "click",
    "commit",
    "popup",
    "shows",
    "going",
    "click",
    "yes",
    "take",
    "changes",
    "save",
    "git",
    "saved",
    "changes",
    "git",
    "new",
    "changes",
    "add",
    "start",
    "showing",
    "let",
    "example",
    "let",
    "change",
    "code",
    "couple",
    "different",
    "files",
    "practice",
    "let",
    "click",
    "icon",
    "show",
    "code",
    "let",
    "go",
    "amazon",
    "html",
    "change",
    "title",
    "intro",
    "git",
    "save",
    "let",
    "go",
    "checkout",
    "html",
    "top",
    "let",
    "actually",
    "remove",
    "title",
    "save",
    "let",
    "open",
    "orders",
    "html",
    "top",
    "let",
    "add",
    "something",
    "title",
    "like",
    "page",
    "save",
    "go",
    "source",
    "control",
    "section",
    "git",
    "section",
    "tell",
    "us",
    "changes",
    "made",
    "code",
    "three",
    "different",
    "files",
    "click",
    "one",
    "files",
    "actually",
    "tell",
    "us",
    "exactly",
    "code",
    "changed",
    "git",
    "section",
    "looks",
    "like",
    "changes",
    "top",
    "instead",
    "side",
    "side",
    "want",
    "change",
    "clicking",
    "three",
    "dots",
    "making",
    "sure",
    "inline",
    "view",
    "unchecked",
    "also",
    "unchecking",
    "use",
    "inline",
    "view",
    "space",
    "limited",
    "easy",
    "undo",
    "code",
    "take",
    "code",
    "left",
    "copy",
    "paste",
    "right",
    "undo",
    "change",
    "also",
    "click",
    "undo",
    "changes",
    "file",
    "also",
    "click",
    "button",
    "undo",
    "changes",
    "different",
    "files",
    "intro",
    "git",
    "helps",
    "us",
    "keep",
    "track",
    "changes",
    "code",
    "useful",
    "bigger",
    "projects",
    "like",
    "amazon",
    "project",
    "going",
    "changing",
    "lots",
    "code",
    "many",
    "different",
    "files",
    "want",
    "learn",
    "git",
    "detail",
    "check",
    "git",
    "github",
    "full",
    "course",
    "video",
    "description",
    "setup",
    "git",
    "let",
    "start",
    "amazon",
    "project",
    "first",
    "make",
    "sure",
    "section",
    "empty",
    "reversed",
    "changes",
    "made",
    "practicing",
    "git",
    "next",
    "let",
    "click",
    "icon",
    "show",
    "files",
    "let",
    "remove",
    "previous",
    "code",
    "going",
    "start",
    "amazon",
    "html",
    "file",
    "let",
    "close",
    "git",
    "page",
    "open",
    "tab",
    "file",
    "say",
    "amazon",
    "html",
    "start",
    "creating",
    "list",
    "products",
    "homepage",
    "right",
    "start",
    "three",
    "products",
    "go",
    "final",
    "project",
    "going",
    "add",
    "rest",
    "products",
    "see",
    "also",
    "going",
    "make",
    "interactive",
    "click",
    "add",
    "card",
    "button",
    "add",
    "product",
    "cart",
    "let",
    "go",
    "back",
    "project",
    "order",
    "create",
    "going",
    "learn",
    "main",
    "idea",
    "javascript",
    "using",
    "javascript",
    "script",
    "usually",
    "process",
    "first",
    "step",
    "save",
    "data",
    "generate",
    "html",
    "finally",
    "make",
    "interactive",
    "let",
    "go",
    "step",
    "create",
    "list",
    "products",
    "right",
    "three",
    "products",
    "page",
    "start",
    "going",
    "add",
    "products",
    "page",
    "let",
    "start",
    "finding",
    "html",
    "one",
    "products",
    "always",
    "copy",
    "paste",
    "create",
    "another",
    "one",
    "going",
    "learn",
    "important",
    "skill",
    "bigger",
    "projects",
    "find",
    "code",
    "something",
    "page",
    "let",
    "say",
    "want",
    "find",
    "code",
    "one",
    "products",
    "going",
    "rightclick",
    "click",
    "inspect",
    "bring",
    "console",
    "actually",
    "going",
    "click",
    "three",
    "dots",
    "click",
    "icon",
    "move",
    "console",
    "separate",
    "window",
    "see",
    "whole",
    "web",
    "page",
    "going",
    "click",
    "icon",
    "top",
    "left",
    "going",
    "hover",
    "click",
    "thing",
    "want",
    "get",
    "code",
    "want",
    "get",
    "code",
    "entire",
    "first",
    "product",
    "click",
    "space",
    "tell",
    "us",
    "code",
    "product",
    "code",
    "div",
    "class",
    "product",
    "container",
    "going",
    "take",
    "class",
    "search",
    "code",
    "editor",
    "let",
    "open",
    "vs",
    "code",
    "going",
    "type",
    "contrl",
    "f",
    "windows",
    "command",
    "f",
    "mac",
    "search",
    "code",
    "file",
    "going",
    "search",
    "class",
    "saw",
    "earlier",
    "container",
    "take",
    "us",
    "code",
    "one",
    "products",
    "actually",
    "click",
    "arrow",
    "left",
    "collapse",
    "code",
    "see",
    "another",
    "product",
    "container",
    "corresponds",
    "second",
    "product",
    "click",
    "arrow",
    "see",
    "third",
    "product",
    "container",
    "corresponds",
    "third",
    "product",
    "find",
    "code",
    "something",
    "page",
    "add",
    "another",
    "product",
    "page",
    "one",
    "thing",
    "take",
    "html",
    "make",
    "copy",
    "bottom",
    "page",
    "however",
    "good",
    "idea",
    "add",
    "lots",
    "products",
    "going",
    "copying",
    "html",
    "expand",
    "see",
    "product",
    "lot",
    "html",
    "code",
    "want",
    "copying",
    "going",
    "lot",
    "code",
    "going",
    "hard",
    "manage",
    "instead",
    "another",
    "strategy",
    "generate",
    "html",
    "code",
    "using",
    "javascript",
    "let",
    "learn",
    "need",
    "add",
    "javascript",
    "page",
    "going",
    "create",
    "javascript",
    "file",
    "let",
    "click",
    "show",
    "files",
    "first",
    "let",
    "create",
    "new",
    "folder",
    "contain",
    "javascript",
    "code",
    "let",
    "name",
    "folder",
    "sc",
    "scripts",
    "press",
    "enter",
    "next",
    "let",
    "click",
    "folder",
    "going",
    "click",
    "icon",
    "create",
    "new",
    "file",
    "name",
    "file",
    "amazon",
    "js",
    "press",
    "enter",
    "javascript",
    "file",
    "html",
    "file",
    "next",
    "inside",
    "javascript",
    "file",
    "let",
    "type",
    "code",
    "console",
    "log",
    "hello",
    "make",
    "sure",
    "works",
    "save",
    "next",
    "going",
    "load",
    "javascript",
    "file",
    "html",
    "file",
    "let",
    "go",
    "back",
    "amazon",
    "html",
    "bottom",
    "code",
    "going",
    "scroll",
    "right",
    "closing",
    "tag",
    "body",
    "going",
    "add",
    "script",
    "element",
    "going",
    "give",
    "element",
    "attribute",
    "src",
    "source",
    "equals",
    "double",
    "quotes",
    "going",
    "load",
    "javascript",
    "file",
    "javascript",
    "file",
    "folder",
    "called",
    "scripts",
    "going",
    "type",
    "folder",
    "name",
    "scripts",
    "forward",
    "slash",
    "go",
    "folder",
    "load",
    "file",
    "amazon",
    "js",
    "save",
    "let",
    "let",
    "go",
    "back",
    "page",
    "open",
    "console",
    "right",
    "click",
    "inspect",
    "click",
    "console",
    "display",
    "hello",
    "loading",
    "javascript",
    "page",
    "let",
    "open",
    "vs",
    "code",
    "going",
    "generate",
    "html",
    "using",
    "javascript",
    "instead",
    "first",
    "step",
    "process",
    "save",
    "data",
    "mean",
    "data",
    "means",
    "information",
    "case",
    "data",
    "information",
    "products",
    "example",
    "products",
    "name",
    "price",
    "ratings",
    "image",
    "right",
    "information",
    "products",
    "data",
    "inside",
    "html",
    "code",
    "click",
    "expand",
    "element",
    "see",
    "inform",
    "products",
    "example",
    "name",
    "image",
    "inside",
    "html",
    "need",
    "take",
    "data",
    "save",
    "inside",
    "javascript",
    "javascript",
    "use",
    "let",
    "go",
    "javascript",
    "file",
    "going",
    "put",
    "see",
    "side",
    "side",
    "going",
    "move",
    "data",
    "javascript",
    "let",
    "remove",
    "let",
    "create",
    "variable",
    "save",
    "data",
    "type",
    "const",
    "let",
    "name",
    "products",
    "make",
    "equal",
    "want",
    "create",
    "something",
    "closely",
    "matches",
    "data",
    "case",
    "list",
    "products",
    "going",
    "create",
    "array",
    "array",
    "represents",
    "list",
    "product",
    "list",
    "many",
    "values",
    "like",
    "image",
    "name",
    "price",
    "going",
    "use",
    "object",
    "represent",
    "product",
    "object",
    "lets",
    "us",
    "group",
    "multiple",
    "values",
    "together",
    "inside",
    "array",
    "going",
    "create",
    "object",
    "using",
    "curly",
    "brackets",
    "inside",
    "object",
    "going",
    "save",
    "data",
    "first",
    "product",
    "first",
    "let",
    "find",
    "data",
    "html",
    "going",
    "search",
    "product",
    "name",
    "typing",
    "contrl",
    "f",
    "command",
    "f",
    "search",
    "black",
    "gray",
    "take",
    "us",
    "code",
    "first",
    "product",
    "name",
    "first",
    "product",
    "let",
    "actually",
    "scroll",
    "going",
    "get",
    "get",
    "image",
    "first",
    "product",
    "going",
    "take",
    "save",
    "javascript",
    "let",
    "select",
    "code",
    "going",
    "rightclick",
    "copy",
    "inside",
    "object",
    "let",
    "create",
    "property",
    "called",
    "image",
    "colon",
    "right",
    "click",
    "paste",
    "let",
    "save",
    "string",
    "front",
    "type",
    "single",
    "quote",
    "end",
    "type",
    "single",
    "quote",
    "saved",
    "image",
    "inside",
    "javascript",
    "let",
    "move",
    "save",
    "name",
    "inside",
    "javascript",
    "scroll",
    "select",
    "code",
    "rightclick",
    "copy",
    "object",
    "type",
    "comma",
    "property",
    "called",
    "name",
    "col",
    "string",
    "right",
    "click",
    "paste",
    "next",
    "going",
    "save",
    "rating",
    "javascript",
    "type",
    "comma",
    "let",
    "create",
    "property",
    "called",
    "rating",
    "colon",
    "rating",
    "actually",
    "two",
    "parts",
    "stars",
    "number",
    "ratings",
    "let",
    "actually",
    "group",
    "two",
    "values",
    "object",
    "values",
    "related",
    "make",
    "rating",
    "object",
    "rating",
    "stars",
    "socks",
    "comma",
    "rating",
    "also",
    "count",
    "first",
    "product",
    "87",
    "next",
    "let",
    "save",
    "price",
    "javascript",
    "create",
    "another",
    "property",
    "called",
    "price",
    "first",
    "product",
    "price",
    "however",
    "javascript",
    "problems",
    "math",
    "decimal",
    "numbers",
    "floats",
    "like",
    "best",
    "practice",
    "calculating",
    "money",
    "calculate",
    "cents",
    "instead",
    "dollars",
    "reason",
    "going",
    "save",
    "price",
    "cents",
    "save",
    "reminder",
    "1",
    "equal",
    "100",
    "cents",
    "saving",
    "cents",
    "helpful",
    "rename",
    "property",
    "price",
    "cents",
    "instead",
    "scroll",
    "saved",
    "information",
    "data",
    "first",
    "product",
    "javascript",
    "next",
    "let",
    "go",
    "end",
    "type",
    "comma",
    "create",
    "another",
    "object",
    "going",
    "save",
    "data",
    "second",
    "product",
    "object",
    "feel",
    "free",
    "pause",
    "video",
    "want",
    "try",
    "first",
    "let",
    "find",
    "product",
    "html",
    "go",
    "html",
    "type",
    "contrl",
    "f",
    "command",
    "f",
    "search",
    "code",
    "search",
    "name",
    "intermediate",
    "size",
    "basketball",
    "code",
    "second",
    "product",
    "going",
    "scroll",
    "bit",
    "find",
    "image",
    "product",
    "going",
    "select",
    "rightclick",
    "copy",
    "inside",
    "second",
    "object",
    "create",
    "image",
    "property",
    "like",
    "save",
    "string",
    "going",
    "rightclick",
    "paste",
    "let",
    "type",
    "comma",
    "save",
    "name",
    "inside",
    "second",
    "object",
    "scroll",
    "select",
    "name",
    "right",
    "click",
    "copy",
    "create",
    "string",
    "rightclick",
    "paste",
    "type",
    "comma",
    "save",
    "rating",
    "colon",
    "object",
    "save",
    "number",
    "stars",
    "four",
    "number",
    "ratings",
    "count",
    "colon",
    "127",
    "finally",
    "type",
    "comma",
    "save",
    "price",
    "product",
    "cents",
    "colon",
    "295",
    "data",
    "second",
    "product",
    "saved",
    "inside",
    "javascript",
    "let",
    "go",
    "end",
    "type",
    "comma",
    "create",
    "another",
    "object",
    "going",
    "save",
    "data",
    "third",
    "product",
    "inside",
    "feel",
    "free",
    "pause",
    "video",
    "try",
    "first",
    "let",
    "save",
    "image",
    "find",
    "code",
    "product",
    "html",
    "typ",
    "contrl",
    "f",
    "command",
    "f",
    "search",
    "product",
    "name",
    "adults",
    "plain",
    "cotton",
    "scroll",
    "going",
    "save",
    "image",
    "first",
    "let",
    "select",
    "right",
    "click",
    "copy",
    "create",
    "image",
    "property",
    "colon",
    "string",
    "right",
    "click",
    "paste",
    "create",
    "comma",
    "let",
    "save",
    "name",
    "javas",
    "script",
    "next",
    "create",
    "string",
    "scroll",
    "select",
    "name",
    "right",
    "click",
    "copy",
    "right",
    "click",
    "paste",
    "comma",
    "save",
    "rating",
    "colon",
    "object",
    "number",
    "stars",
    "one",
    "colon",
    "count",
    "one",
    "56",
    "lastly",
    "type",
    "comma",
    "save",
    "price",
    "cents",
    "colon",
    "799",
    "let",
    "save",
    "javascript",
    "file",
    "one",
    "really",
    "important",
    "thing",
    "make",
    "sure",
    "objects",
    "property",
    "image",
    "property",
    "name",
    "property",
    "rating",
    "property",
    "structure",
    "want",
    "objects",
    "structure",
    "code",
    "handle",
    "product",
    "means",
    "save",
    "data",
    "create",
    "something",
    "javascript",
    "closely",
    "matches",
    "data",
    "page",
    "way",
    "called",
    "data",
    "structure",
    "structure",
    "structures",
    "organizes",
    "data",
    "represents",
    "list",
    "products",
    "usually",
    "use",
    "combination",
    "objects",
    "arrays",
    "create",
    "data",
    "structure",
    "javascript",
    "saved",
    "data",
    "next",
    "step",
    "use",
    "data",
    "generate",
    "html",
    "instead",
    "writing",
    "html",
    "manually",
    "generate",
    "html",
    "loop",
    "array",
    "products",
    "going",
    "create",
    "html",
    "let",
    "go",
    "ahead",
    "loop",
    "array",
    "first",
    "scroll",
    "bottom",
    "type",
    "name",
    "array",
    "products",
    "loop",
    "array",
    "using",
    "method",
    "type",
    "dot",
    "4",
    "capital",
    "brackets",
    "inside",
    "create",
    "function",
    "using",
    "brackets",
    "arrow",
    "curly",
    "brackets",
    "give",
    "parameter",
    "called",
    "product",
    "going",
    "move",
    "back",
    "top",
    "see",
    "code",
    "way",
    "works",
    "takes",
    "object",
    "saves",
    "parameter",
    "called",
    "product",
    "runs",
    "function",
    "takes",
    "first",
    "object",
    "saves",
    "product",
    "runs",
    "function",
    "function",
    "takes",
    "second",
    "object",
    "saves",
    "product",
    "runs",
    "function",
    "products",
    "objects",
    "want",
    "create",
    "html",
    "inside",
    "function",
    "let",
    "create",
    "variable",
    "const",
    "html",
    "equals",
    "create",
    "template",
    "string",
    "using",
    "back",
    "ticks",
    "inside",
    "template",
    "string",
    "basically",
    "going",
    "going",
    "copy",
    "html",
    "one",
    "products",
    "let",
    "go",
    "back",
    "html",
    "file",
    "find",
    "html",
    "one",
    "product",
    "learned",
    "earlier",
    "rightclick",
    "inspect",
    "click",
    "top",
    "left",
    "icon",
    "click",
    "element",
    "want",
    "get",
    "html",
    "html",
    "represents",
    "one",
    "product",
    "search",
    "class",
    "container",
    "code",
    "go",
    "back",
    "vs",
    "code",
    "inside",
    "html",
    "file",
    "contrl",
    "f",
    "command",
    "f",
    "search",
    "code",
    "search",
    "class",
    "product",
    "das",
    "container",
    "let",
    "go",
    "first",
    "result",
    "go",
    "first",
    "result",
    "let",
    "copy",
    "code",
    "inside",
    "ele",
    "element",
    "one",
    "trick",
    "click",
    "arrow",
    "left",
    "collapse",
    "select",
    "code",
    "rightclick",
    "copy",
    "inside",
    "javascript",
    "file",
    "inside",
    "string",
    "going",
    "rightclick",
    "paste",
    "html",
    "need",
    "fix",
    "formatting",
    "select",
    "code",
    "press",
    "tab",
    "times",
    "add",
    "indexs",
    "remove",
    "indent",
    "let",
    "save",
    "basically",
    "looping",
    "array",
    "products",
    "product",
    "creating",
    "html",
    "generating",
    "html",
    "using",
    "javascript",
    "let",
    "html",
    "make",
    "sure",
    "working",
    "scroll",
    "bottom",
    "let",
    "html",
    "created",
    "save",
    "go",
    "back",
    "page",
    "right",
    "click",
    "inspect",
    "click",
    "console",
    "see",
    "console",
    "generated",
    "html",
    "generated",
    "three",
    "let",
    "go",
    "back",
    "code",
    "scroll",
    "one",
    "problem",
    "html",
    "generate",
    "want",
    "name",
    "black",
    "gray",
    "socks",
    "every",
    "time",
    "second",
    "product",
    "want",
    "different",
    "name",
    "different",
    "image",
    "third",
    "product",
    "want",
    "different",
    "name",
    "different",
    "image",
    "create",
    "slightly",
    "different",
    "html",
    "product",
    "going",
    "replace",
    "part",
    "code",
    "whatever",
    "image",
    "property",
    "going",
    "delete",
    "going",
    "insert",
    "property",
    "image",
    "string",
    "insert",
    "values",
    "template",
    "string",
    "like",
    "use",
    "dollar",
    "open",
    "curly",
    "bracket",
    "clos",
    "curly",
    "bracket",
    "inside",
    "going",
    "insert",
    "product",
    "image",
    "property",
    "going",
    "take",
    "whatever",
    "image",
    "property",
    "product",
    "put",
    "inside",
    "html",
    "code",
    "thing",
    "name",
    "instead",
    "black",
    "gray",
    "socks",
    "every",
    "time",
    "going",
    "delete",
    "insert",
    "value",
    "going",
    "insert",
    "product",
    "dot",
    "insert",
    "name",
    "property",
    "time",
    "html",
    "dot",
    "name",
    "thing",
    "pieces",
    "data",
    "product",
    "number",
    "stars",
    "could",
    "different",
    "instead",
    "every",
    "time",
    "let",
    "delete",
    "going",
    "insert",
    "products",
    "rating",
    "stars",
    "product",
    "rating",
    "stars",
    "one",
    "thing",
    "watch",
    "image",
    "exist",
    "right",
    "substitute",
    "product",
    "ratings",
    "stars",
    "get",
    "image",
    "go",
    "files",
    "clicking",
    "open",
    "images",
    "folder",
    "open",
    "ratings",
    "folder",
    "see",
    "image",
    "called",
    "rating",
    "instead",
    "image",
    "called",
    "rating",
    "rating",
    "convert",
    "45",
    "image",
    "actually",
    "exists",
    "similarly",
    "rating",
    "four",
    "convert",
    "40",
    "image",
    "actually",
    "exists",
    "actually",
    "multiply",
    "10",
    "points",
    "actual",
    "image",
    "exists",
    "next",
    "let",
    "move",
    "work",
    "replacing",
    "count",
    "remove",
    "dollar",
    "curly",
    "brackets",
    "replace",
    "products",
    "rating",
    "dot",
    "count",
    "property",
    "count",
    "finally",
    "going",
    "replace",
    "price",
    "product",
    "going",
    "remove",
    "substitute",
    "product",
    "price",
    "sense",
    "remember",
    "number",
    "cents",
    "display",
    "page",
    "want",
    "display",
    "dollars",
    "going",
    "divide",
    "100",
    "100",
    "cents",
    "dollar",
    "html",
    "generating",
    "actually",
    "inserting",
    "details",
    "product",
    "save",
    "go",
    "back",
    "console",
    "right",
    "click",
    "inspect",
    "console",
    "look",
    "html",
    "generated",
    "see",
    "different",
    "products",
    "use",
    "javascript",
    "generate",
    "html",
    "last",
    "step",
    "going",
    "combine",
    "html",
    "together",
    "one",
    "string",
    "put",
    "web",
    "page",
    "let",
    "go",
    "back",
    "vss",
    "code",
    "combine",
    "html",
    "together",
    "let",
    "create",
    "variable",
    "top",
    "combining",
    "strings",
    "together",
    "type",
    "let",
    "let",
    "call",
    "products",
    "cap",
    "capital",
    "html",
    "make",
    "equal",
    "empty",
    "string",
    "start",
    "time",
    "go",
    "loop",
    "going",
    "add",
    "html",
    "string",
    "instead",
    "creating",
    "new",
    "variable",
    "going",
    "add",
    "products",
    "html",
    "equals",
    "products",
    "html",
    "plus",
    "string",
    "remember",
    "shortcut",
    "type",
    "plus",
    "equals",
    "called",
    "accumulator",
    "pattern",
    "loop",
    "array",
    "time",
    "adding",
    "result",
    "accumulating",
    "result",
    "combine",
    "html",
    "variable",
    "scroll",
    "bottom",
    "let",
    "remove",
    "line",
    "exist",
    "anymore",
    "loop",
    "let",
    "products",
    "html",
    "save",
    "go",
    "console",
    "combined",
    "html",
    "products",
    "together",
    "last",
    "step",
    "take",
    "html",
    "put",
    "page",
    "using",
    "dom",
    "let",
    "go",
    "back",
    "code",
    "use",
    "dom",
    "first",
    "going",
    "get",
    "html",
    "element",
    "page",
    "put",
    "inside",
    "javascript",
    "first",
    "let",
    "go",
    "html",
    "file",
    "remember",
    "container",
    "represents",
    "one",
    "products",
    "going",
    "look",
    "element",
    "div",
    "grid",
    "element",
    "contains",
    "products",
    "going",
    "use",
    "dom",
    "take",
    "element",
    "put",
    "javascript",
    "replace",
    "html",
    "inside",
    "put",
    "element",
    "javascript",
    "going",
    "give",
    "class",
    "let",
    "add",
    "class",
    "grid",
    "save",
    "let",
    "go",
    "javascript",
    "going",
    "move",
    "bottom",
    "see",
    "side",
    "side",
    "inside",
    "javascript",
    "bottom",
    "going",
    "use",
    "dom",
    "typing",
    "document",
    "query",
    "selector",
    "brackets",
    "string",
    "going",
    "type",
    "dot",
    "select",
    "class",
    "going",
    "select",
    "grid",
    "dot",
    "means",
    "going",
    "look",
    "class",
    "called",
    "js",
    "products",
    "grid",
    "right",
    "going",
    "take",
    "element",
    "put",
    "inside",
    "javascript",
    "change",
    "html",
    "inside",
    "element",
    "use",
    "property",
    "inner",
    "capital",
    "html",
    "change",
    "products",
    "html",
    "created",
    "products",
    "capital",
    "html",
    "save",
    "going",
    "look",
    "different",
    "actually",
    "generating",
    "html",
    "javascript",
    "using",
    "dom",
    "put",
    "html",
    "inside",
    "actually",
    "delete",
    "generating",
    "javascript",
    "save",
    "file",
    "products",
    "still",
    "even",
    "though",
    "deleted",
    "html",
    "generating",
    "javascript",
    "one",
    "problem",
    "see",
    "price",
    "shows",
    "one",
    "decimal",
    "actually",
    "wanted",
    "show",
    "let",
    "scroll",
    "part",
    "code",
    "scroll",
    "look",
    "price",
    "sense",
    "reason",
    "happens",
    "price",
    "sense",
    "divide",
    "100",
    "result",
    "actually",
    "want",
    "force",
    "show",
    "two",
    "decimals",
    "like",
    "actually",
    "special",
    "method",
    "use",
    "number",
    "add",
    "brackets",
    "around",
    "make",
    "sure",
    "calculate",
    "number",
    "first",
    "numbers",
    "special",
    "method",
    "called",
    "dot",
    "2",
    "capital",
    "fixed",
    "brackets",
    "fixed",
    "convert",
    "number",
    "string",
    "tell",
    "many",
    "decimals",
    "want",
    "brackets",
    "type",
    "two",
    "show",
    "two",
    "decimals",
    "save",
    "shows",
    "correctly",
    "page",
    "wondering",
    "find",
    "method",
    "find",
    "searching",
    "google",
    "using",
    "ai",
    "tool",
    "okay",
    "let",
    "let",
    "take",
    "break",
    "take",
    "look",
    "git",
    "see",
    "changes",
    "made",
    "going",
    "expand",
    "going",
    "click",
    "git",
    "section",
    "going",
    "tell",
    "us",
    "changed",
    "two",
    "files",
    "click",
    "html",
    "file",
    "git",
    "tell",
    "us",
    "deleted",
    "html",
    "code",
    "products",
    "correct",
    "open",
    "javascript",
    "file",
    "tell",
    "us",
    "added",
    "new",
    "javascript",
    "code",
    "including",
    "data",
    "loop",
    "generating",
    "html",
    "git",
    "helps",
    "us",
    "track",
    "changes",
    "made",
    "let",
    "actually",
    "take",
    "changes",
    "save",
    "git",
    "track",
    "new",
    "changes",
    "top",
    "let",
    "type",
    "message",
    "describe",
    "changes",
    "made",
    "let",
    "type",
    "generate",
    "html",
    "javascript",
    "click",
    "commit",
    "yes",
    "shows",
    "let",
    "talk",
    "benefit",
    "generating",
    "html",
    "let",
    "close",
    "git",
    "move",
    "side",
    "benefit",
    "generating",
    "html",
    "want",
    "add",
    "another",
    "product",
    "copy",
    "paste",
    "html",
    "need",
    "go",
    "data",
    "add",
    "data",
    "new",
    "product",
    "let",
    "example",
    "add",
    "fourth",
    "product",
    "list",
    "end",
    "let",
    "type",
    "comma",
    "create",
    "another",
    "object",
    "let",
    "go",
    "final",
    "project",
    "scroll",
    "four",
    "fourth",
    "product",
    "going",
    "take",
    "data",
    "product",
    "save",
    "javascript",
    "first",
    "let",
    "create",
    "property",
    "image",
    "colon",
    "string",
    "going",
    "take",
    "image",
    "put",
    "rightclick",
    "image",
    "inspect",
    "going",
    "copy",
    "source",
    "attribute",
    "double",
    "click",
    "select",
    "attribute",
    "rightclick",
    "copy",
    "inside",
    "javascript",
    "going",
    "right",
    "click",
    "paste",
    "end",
    "type",
    "comma",
    "create",
    "name",
    "property",
    "string",
    "going",
    "select",
    "name",
    "rightclick",
    "copy",
    "right",
    "click",
    "paste",
    "copy",
    "comma",
    "rating",
    "property",
    "colon",
    "object",
    "stars",
    "five",
    "count",
    "end",
    "going",
    "add",
    "price",
    "cents",
    "colon",
    "save",
    "javascript",
    "file",
    "go",
    "back",
    "project",
    "scroll",
    "notice",
    "automatically",
    "added",
    "fourth",
    "product",
    "add",
    "another",
    "object",
    "array",
    "loop",
    "handle",
    "generating",
    "html",
    "us",
    "see",
    "generating",
    "html",
    "javascript",
    "lot",
    "easier",
    "copy",
    "pasting",
    "html",
    "every",
    "time",
    "use",
    "technique",
    "next",
    "going",
    "add",
    "rest",
    "products",
    "final",
    "project",
    "one",
    "thing",
    "could",
    "manually",
    "copy",
    "one",
    "one",
    "make",
    "easier",
    "inside",
    "starting",
    "code",
    "actually",
    "created",
    "file",
    "contains",
    "data",
    "scroll",
    "close",
    "going",
    "go",
    "data",
    "folder",
    "open",
    "inside",
    "folder",
    "provided",
    "javascript",
    "file",
    "called",
    "products",
    "js",
    "contains",
    "array",
    "data",
    "products",
    "final",
    "project",
    "create",
    "let",
    "use",
    "products",
    "array",
    "code",
    "first",
    "need",
    "load",
    "file",
    "page",
    "go",
    "amazon",
    "html",
    "file",
    "scroll",
    "bottom",
    "bottom",
    "script",
    "element",
    "going",
    "add",
    "another",
    "script",
    "element",
    "type",
    "script",
    "source",
    "going",
    "equal",
    "javascript",
    "file",
    "type",
    "folder",
    "called",
    "data",
    "slash",
    "go",
    "folder",
    "load",
    "file",
    "products",
    "js",
    "run",
    "files",
    "one",
    "one",
    "first",
    "run",
    "products",
    "js",
    "file",
    "create",
    "array",
    "run",
    "amazon",
    "js",
    "file",
    "generate",
    "html",
    "back",
    "let",
    "save",
    "go",
    "back",
    "amazon",
    "js",
    "instead",
    "using",
    "products",
    "array",
    "let",
    "use",
    "products",
    "array",
    "file",
    "go",
    "back",
    "amazon",
    "js",
    "going",
    "delete",
    "array",
    "click",
    "arrow",
    "collapse",
    "code",
    "going",
    "select",
    "delete",
    "save",
    "variable",
    "coming",
    "file",
    "go",
    "back",
    "project",
    "scroll",
    "see",
    "created",
    "products",
    "final",
    "project",
    "way",
    "works",
    "inside",
    "amazon",
    "html",
    "loading",
    "two",
    "javascript",
    "files",
    "javascript",
    "file",
    "creates",
    "products",
    "javascript",
    "file",
    "loops",
    "products",
    "creates",
    "html",
    "keep",
    "mind",
    "script",
    "elements",
    "loaded",
    "one",
    "one",
    "order",
    "matters",
    "first",
    "create",
    "products",
    "array",
    "use",
    "two",
    "reversed",
    "code",
    "would",
    "work",
    "real",
    "world",
    "website",
    "created",
    "write",
    "html",
    "manually",
    "instead",
    "save",
    "data",
    "website",
    "data",
    "structure",
    "like",
    "use",
    "javascript",
    "generate",
    "html",
    "using",
    "data",
    "let",
    "go",
    "get",
    "look",
    "recent",
    "changes",
    "tell",
    "us",
    "changed",
    "two",
    "files",
    "amazon",
    "html",
    "file",
    "added",
    "script",
    "element",
    "amazon",
    "js",
    "file",
    "deleted",
    "products",
    "array",
    "created",
    "let",
    "type",
    "message",
    "describe",
    "changes",
    "use",
    "products",
    "js",
    "file",
    "click",
    "commit",
    "yes",
    "one",
    "thing",
    "want",
    "show",
    "git",
    "go",
    "back",
    "files",
    "open",
    "amazon",
    "js",
    "git",
    "really",
    "useful",
    "feature",
    "called",
    "history",
    "open",
    "timeline",
    "section",
    "click",
    "filter",
    "icon",
    "check",
    "git",
    "history",
    "see",
    "actually",
    "history",
    "changes",
    "file",
    "click",
    "first",
    "line",
    "history",
    "show",
    "us",
    "added",
    "code",
    "second",
    "line",
    "history",
    "deleted",
    "part",
    "code",
    "gives",
    "us",
    "history",
    "changes",
    "code",
    "git",
    "called",
    "version",
    "history",
    "also",
    "see",
    "messages",
    "created",
    "commit",
    "show",
    "messages",
    "help",
    "us",
    "us",
    "understand",
    "changed",
    "version",
    "history",
    "right",
    "let",
    "close",
    "last",
    "step",
    "process",
    "make",
    "interactive",
    "let",
    "take",
    "look",
    "current",
    "project",
    "go",
    "open",
    "tab",
    "let",
    "scroll",
    "right",
    "click",
    "add",
    "cart",
    "button",
    "buton",
    "anything",
    "going",
    "add",
    "javascript",
    "make",
    "interactive",
    "actually",
    "add",
    "product",
    "cart",
    "first",
    "let",
    "find",
    "add",
    "cart",
    "button",
    "code",
    "go",
    "back",
    "amazon",
    "js",
    "file",
    "close",
    "find",
    "code",
    "actually",
    "search",
    "text",
    "button",
    "inside",
    "let",
    "typ",
    "contrl",
    "f",
    "command",
    "f",
    "going",
    "search",
    "text",
    "add",
    "cart",
    "take",
    "us",
    "code",
    "button",
    "going",
    "add",
    "event",
    "listener",
    "button",
    "make",
    "something",
    "click",
    "add",
    "event",
    "listener",
    "first",
    "going",
    "add",
    "class",
    "dcart",
    "going",
    "use",
    "dawn",
    "add",
    "event",
    "listener",
    "button",
    "put",
    "html",
    "page",
    "going",
    "use",
    "document",
    "query",
    "selector",
    "brackets",
    "string",
    "dot",
    "going",
    "select",
    "add",
    "cart",
    "cart",
    "give",
    "us",
    "list",
    "add",
    "cart",
    "buttons",
    "page",
    "loop",
    "buttons",
    "type",
    "dot",
    "brackets",
    "give",
    "function",
    "bracket",
    "arrow",
    "curly",
    "brackets",
    "parameter",
    "parameter",
    "going",
    "button",
    "element",
    "got",
    "page",
    "buttons",
    "going",
    "add",
    "event",
    "listener",
    "something",
    "click",
    "button",
    "type",
    "button",
    "add",
    "event",
    "listener",
    "brackets",
    "event",
    "want",
    "listen",
    "click",
    "event",
    "function",
    "want",
    "run",
    "click",
    "button",
    "brackets",
    "arrow",
    "curly",
    "brackets",
    "let",
    "message",
    "make",
    "sure",
    "working",
    "added",
    "product",
    "save",
    "also",
    "remove",
    "line",
    "using",
    "save",
    "page",
    "going",
    "click",
    "add",
    "cart",
    "look",
    "inside",
    "console",
    "rightclick",
    "inspect",
    "click",
    "console",
    "displays",
    "added",
    "product",
    "whenever",
    "click",
    "one",
    "buttons",
    "display",
    "message",
    "means",
    "code",
    "working",
    "correctly",
    "next",
    "need",
    "figure",
    "add",
    "product",
    "cart",
    "need",
    "figure",
    "looks",
    "like",
    "think",
    "cart",
    "cart",
    "basically",
    "list",
    "inside",
    "list",
    "product",
    "want",
    "buy",
    "quantity",
    "number",
    "product",
    "want",
    "buy",
    "actually",
    "represent",
    "javascript",
    "array",
    "inside",
    "array",
    "objects",
    "object",
    "going",
    "contain",
    "product",
    "quantity",
    "use",
    "something",
    "like",
    "represent",
    "cart",
    "let",
    "go",
    "ahead",
    "create",
    "create",
    "cart",
    "array",
    "keep",
    "things",
    "cleaner",
    "let",
    "actually",
    "separate",
    "cart",
    "file",
    "click",
    "show",
    "files",
    "go",
    "data",
    "folder",
    "click",
    "folder",
    "click",
    "icon",
    "create",
    "new",
    "file",
    "name",
    "file",
    "cart",
    "js",
    "press",
    "enter",
    "file",
    "contain",
    "code",
    "related",
    "cart",
    "reason",
    "separate",
    "keep",
    "code",
    "organized",
    "file",
    "focus",
    "one",
    "particular",
    "thing",
    "inside",
    "let",
    "create",
    "cart",
    "create",
    "variable",
    "const",
    "cart",
    "make",
    "equal",
    "array",
    "start",
    "md",
    "cart",
    "let",
    "save",
    "file",
    "need",
    "load",
    "file",
    "html",
    "open",
    "amazon",
    "html",
    "add",
    "another",
    "script",
    "element",
    "let",
    "add",
    "top",
    "make",
    "sure",
    "load",
    "cart",
    "running",
    "rest",
    "code",
    "type",
    "less",
    "script",
    "attribute",
    "source",
    "load",
    "data",
    "folder",
    "slash",
    "go",
    "inside",
    "cart",
    "js",
    "save",
    "run",
    "file",
    "start",
    "create",
    "array",
    "representing",
    "cart",
    "cart",
    "need",
    "figure",
    "happens",
    "click",
    "button",
    "add",
    "product",
    "cart",
    "let",
    "go",
    "back",
    "amazon",
    "js",
    "figure",
    "together",
    "function",
    "run",
    "click",
    "button",
    "figure",
    "add",
    "product",
    "cart",
    "one",
    "way",
    "add",
    "object",
    "cart",
    "like",
    "product",
    "name",
    "quantity",
    "want",
    "however",
    "click",
    "button",
    "know",
    "product",
    "supposed",
    "add",
    "cart",
    "solve",
    "problem",
    "going",
    "learn",
    "feature",
    "html",
    "called",
    "data",
    "attribute",
    "data",
    "attribute",
    "another",
    "html",
    "attribute",
    "except",
    "purpose",
    "data",
    "attribute",
    "allows",
    "us",
    "attach",
    "information",
    "html",
    "element",
    "let",
    "example",
    "create",
    "data",
    "attribute",
    "going",
    "scroll",
    "add",
    "card",
    "button",
    "end",
    "opening",
    "tag",
    "class",
    "type",
    "enter",
    "going",
    "type",
    "data",
    "dash",
    "type",
    "name",
    "want",
    "like",
    "make",
    "equal",
    "double",
    "quotes",
    "inside",
    "double",
    "quotes",
    "going",
    "put",
    "product",
    "name",
    "like",
    "basketball",
    "going",
    "insert",
    "using",
    "dollar",
    "curly",
    "brackets",
    "product",
    "ame",
    "save",
    "let",
    "inspect",
    "html",
    "page",
    "going",
    "rightclick",
    "add",
    "card",
    "button",
    "inspect",
    "elements",
    "tab",
    "show",
    "us",
    "html",
    "button",
    "see",
    "buttons",
    "data",
    "attribute",
    "called",
    "equal",
    "product",
    "name",
    "continue",
    "let",
    "learn",
    "syntax",
    "rules",
    "data",
    "attribute",
    "data",
    "attribute",
    "html",
    "attribute",
    "means",
    "follows",
    "syntax",
    "rules",
    "attribute",
    "name",
    "left",
    "attribute",
    "value",
    "right",
    "one",
    "difference",
    "data",
    "attributes",
    "start",
    "data",
    "dash",
    "give",
    "name",
    "want",
    "like",
    "name",
    "make",
    "sure",
    "separate",
    "words",
    "dash",
    "also",
    "known",
    "kabob",
    "case",
    "purpose",
    "data",
    "attribute",
    "attach",
    "information",
    "element",
    "attached",
    "product",
    "name",
    "button",
    "also",
    "attach",
    "product",
    "image",
    "price",
    "attached",
    "product",
    "name",
    "button",
    "click",
    "button",
    "actually",
    "get",
    "name",
    "tell",
    "us",
    "product",
    "add",
    "cart",
    "let",
    "see",
    "looks",
    "like",
    "code",
    "go",
    "code",
    "click",
    "button",
    "first",
    "going",
    "get",
    "product",
    "name",
    "button",
    "going",
    "type",
    "button",
    "property",
    "dot",
    "data",
    "set",
    "data",
    "set",
    "property",
    "basically",
    "gives",
    "us",
    "data",
    "attributes",
    "attached",
    "button",
    "able",
    "get",
    "product",
    "name",
    "let",
    "see",
    "looks",
    "like",
    "open",
    "bracket",
    "close",
    "bracket",
    "save",
    "let",
    "click",
    "basketballs",
    "add",
    "cart",
    "button",
    "go",
    "console",
    "right",
    "click",
    "inspect",
    "console",
    "going",
    "move",
    "left",
    "see",
    "side",
    "side",
    "code",
    "data",
    "set",
    "property",
    "looks",
    "like",
    "gives",
    "us",
    "data",
    "attributes",
    "attached",
    "element",
    "case",
    "product",
    "name",
    "works",
    "like",
    "object",
    "access",
    "product",
    "name",
    "type",
    "dot",
    "product",
    "capital",
    "n",
    "name",
    "notice",
    "name",
    "gets",
    "converted",
    "kebab",
    "case",
    "camo",
    "case",
    "save",
    "let",
    "go",
    "back",
    "website",
    "click",
    "add",
    "cardart",
    "button",
    "get",
    "data",
    "attribute",
    "button",
    "display",
    "console",
    "click",
    "socks",
    "cart",
    "button",
    "tell",
    "us",
    "product",
    "add",
    "cart",
    "product",
    "name",
    "let",
    "actually",
    "put",
    "cart",
    "let",
    "go",
    "code",
    "let",
    "save",
    "product",
    "name",
    "variable",
    "called",
    "const",
    "product",
    "name",
    "equals",
    "going",
    "add",
    "cart",
    "already",
    "created",
    "cart",
    "variable",
    "going",
    "type",
    "variable",
    "cart",
    "going",
    "dot",
    "push",
    "array",
    "let",
    "push",
    "object",
    "said",
    "wanted",
    "product",
    "quantity",
    "add",
    "object",
    "containing",
    "product",
    "name",
    "variable",
    "product",
    "name",
    "quantity",
    "one",
    "pretty",
    "much",
    "first",
    "attached",
    "product",
    "name",
    "button",
    "using",
    "data",
    "attribute",
    "click",
    "button",
    "got",
    "product",
    "name",
    "add",
    "product",
    "cart",
    "bottom",
    "let",
    "thee",
    "cart",
    "see",
    "looks",
    "like",
    "save",
    "go",
    "open",
    "console",
    "right",
    "click",
    "inspect",
    "console",
    "let",
    "add",
    "basketball",
    "cart",
    "click",
    "cart",
    "basketball",
    "quantity",
    "one",
    "let",
    "add",
    "another",
    "product",
    "cart",
    "go",
    "click",
    "add",
    "cart",
    "two",
    "products",
    "cart",
    "one",
    "b",
    "basketball",
    "one",
    "successfully",
    "adding",
    "products",
    "cart",
    "next",
    "let",
    "try",
    "adding",
    "one",
    "click",
    "add",
    "cart",
    "unfortunately",
    "look",
    "quite",
    "right",
    "product",
    "repeated",
    "twice",
    "quantity",
    "one",
    "actually",
    "want",
    "want",
    "one",
    "product",
    "quantity",
    "two",
    "going",
    "display",
    "cart",
    "page",
    "let",
    "figure",
    "achieve",
    "step",
    "step",
    "first",
    "check",
    "product",
    "already",
    "cart",
    "cart",
    "increase",
    "quantity",
    "one",
    "cart",
    "add",
    "cart",
    "let",
    "convert",
    "steps",
    "code",
    "first",
    "step",
    "check",
    "product",
    "already",
    "cart",
    "let",
    "go",
    "back",
    "code",
    "one",
    "way",
    "check",
    "loop",
    "cart",
    "look",
    "particular",
    "product",
    "name",
    "let",
    "create",
    "new",
    "lines",
    "let",
    "check",
    "product",
    "name",
    "already",
    "cart",
    "array",
    "type",
    "cart",
    "loop",
    "cart",
    "using",
    "dot",
    "brackets",
    "inside",
    "give",
    "function",
    "brackets",
    "arrow",
    "curly",
    "brackets",
    "give",
    "parameter",
    "let",
    "call",
    "item",
    "item",
    "contain",
    "product",
    "name",
    "quantity",
    "want",
    "see",
    "product",
    "name",
    "already",
    "card",
    "going",
    "check",
    "product",
    "name",
    "equal",
    "item",
    "product",
    "name",
    "type",
    "equals",
    "item",
    "product",
    "name",
    "curly",
    "brackets",
    "product",
    "names",
    "match",
    "means",
    "product",
    "already",
    "cart",
    "let",
    "save",
    "matching",
    "item",
    "variable",
    "use",
    "later",
    "going",
    "create",
    "variable",
    "outside",
    "loop",
    "outside",
    "scope",
    "type",
    "let",
    "matching",
    "capital",
    "item",
    "make",
    "undefined",
    "start",
    "find",
    "matching",
    "item",
    "going",
    "save",
    "variable",
    "matching",
    "item",
    "equals",
    "item",
    "figure",
    "product",
    "already",
    "already",
    "cart",
    "next",
    "step",
    "product",
    "cart",
    "increase",
    "quantity",
    "one",
    "type",
    "matching",
    "item",
    "curly",
    "brackets",
    "type",
    "matching",
    "item",
    "find",
    "matching",
    "item",
    "object",
    "truthy",
    "value",
    "going",
    "increase",
    "matching",
    "items",
    "quantity",
    "one",
    "using",
    "matching",
    "item",
    "quantity",
    "plus",
    "equal",
    "1",
    "finally",
    "product",
    "cart",
    "add",
    "cart",
    "basically",
    "end",
    "type",
    "else",
    "find",
    "matching",
    "item",
    "curly",
    "brackets",
    "move",
    "code",
    "select",
    "right",
    "click",
    "cut",
    "rightclick",
    "paste",
    "remove",
    "new",
    "lines",
    "save",
    "let",
    "go",
    "project",
    "rightclick",
    "inspect",
    "console",
    "let",
    "click",
    "add",
    "card",
    "button",
    "basketball",
    "click",
    "cart",
    "basketball",
    "quantity",
    "one",
    "let",
    "add",
    "one",
    "quantity",
    "one",
    "click",
    "add",
    "cart",
    "quantity",
    "two",
    "solve",
    "problem",
    "combining",
    "quantities",
    "together",
    "one",
    "last",
    "problem",
    "solve",
    "good",
    "use",
    "product",
    "name",
    "identify",
    "product",
    "cart",
    "website",
    "might",
    "actually",
    "two",
    "products",
    "name",
    "different",
    "brands",
    "fix",
    "give",
    "product",
    "id",
    "id",
    "unique",
    "two",
    "products",
    "id",
    "let",
    "use",
    "id",
    "identify",
    "products",
    "instead",
    "using",
    "name",
    "go",
    "back",
    "code",
    "open",
    "files",
    "go",
    "data",
    "products",
    "js",
    "notice",
    "actually",
    "added",
    "id",
    "products",
    "id",
    "unique",
    "added",
    "save",
    "us",
    "bit",
    "work",
    "create",
    "ids",
    "let",
    "use",
    "id",
    "code",
    "go",
    "back",
    "amazon",
    "js",
    "instead",
    "using",
    "product",
    "name",
    "going",
    "use",
    "products",
    "id",
    "identify",
    "cart",
    "first",
    "need",
    "attach",
    "id",
    "button",
    "scroll",
    "instead",
    "product",
    "name",
    "attribute",
    "going",
    "use",
    "data",
    "attribute",
    "going",
    "save",
    "products",
    "id",
    "instead",
    "going",
    "grab",
    "id",
    "button",
    "change",
    "product",
    "id",
    "remember",
    "gets",
    "converted",
    "kebab",
    "case",
    "cam",
    "case",
    "rename",
    "variable",
    "product",
    "id",
    "compare",
    "product",
    "id",
    "equal",
    "items",
    "product",
    "id",
    "lastly",
    "add",
    "cart",
    "going",
    "add",
    "product",
    "id",
    "cart",
    "save",
    "go",
    "website",
    "click",
    "add",
    "cart",
    "check",
    "console",
    "expand",
    "see",
    "saving",
    "product",
    "id",
    "two",
    "products",
    "name",
    "able",
    "added",
    "cart",
    "okay",
    "make",
    "add",
    "cart",
    "button",
    "interactive",
    "finished",
    "three",
    "steps",
    "first",
    "save",
    "data",
    "website",
    "javascript",
    "use",
    "data",
    "generate",
    "html",
    "finally",
    "made",
    "interactive",
    "main",
    "idea",
    "javascript",
    "generally",
    "use",
    "javascript",
    "real",
    "website",
    "let",
    "go",
    "back",
    "git",
    "open",
    "code",
    "editor",
    "open",
    "git",
    "section",
    "review",
    "changes",
    "made",
    "expand",
    "html",
    "file",
    "added",
    "cart",
    "js",
    "file",
    "created",
    "cart",
    "array",
    "amazon",
    "js",
    "file",
    "basically",
    "added",
    "data",
    "attribute",
    "button",
    "made",
    "button",
    "interactive",
    "adding",
    "event",
    "listener",
    "let",
    "save",
    "changes",
    "git",
    "type",
    "message",
    "describe",
    "changes",
    "make",
    "add",
    "cart",
    "button",
    "interactive",
    "click",
    "commit",
    "right",
    "let",
    "close",
    "last",
    "feature",
    "going",
    "create",
    "lesson",
    "going",
    "make",
    "cart",
    "quantity",
    "top",
    "right",
    "interactive",
    "step",
    "step",
    "first",
    "need",
    "calculate",
    "quantity",
    "total",
    "number",
    "products",
    "cart",
    "going",
    "put",
    "quantity",
    "page",
    "calculate",
    "total",
    "quantity",
    "cart",
    "remember",
    "cart",
    "array",
    "objects",
    "object",
    "quantity",
    "calculate",
    "total",
    "quantity",
    "loop",
    "array",
    "add",
    "quantities",
    "together",
    "let",
    "go",
    "code",
    "open",
    "amazon",
    "js",
    "let",
    "scroll",
    "bottom",
    "update",
    "cart",
    "going",
    "calculate",
    "total",
    "quantity",
    "let",
    "create",
    "new",
    "lines",
    "saw",
    "earlier",
    "loop",
    "cart",
    "array",
    "type",
    "cart",
    "dot",
    "brackets",
    "function",
    "arrow",
    "curly",
    "brackets",
    "give",
    "parameter",
    "item",
    "going",
    "loop",
    "object",
    "cart",
    "next",
    "need",
    "variable",
    "store",
    "total",
    "quantity",
    "let",
    "create",
    "variable",
    "type",
    "let",
    "name",
    "cart",
    "quantity",
    "make",
    "equal",
    "zero",
    "start",
    "loop",
    "array",
    "going",
    "add",
    "items",
    "quantity",
    "variable",
    "type",
    "cart",
    "quantity",
    "plus",
    "equals",
    "items",
    "quantity",
    "add",
    "quantities",
    "save",
    "variable",
    "bottom",
    "let",
    "cart",
    "quantity",
    "make",
    "sure",
    "working",
    "save",
    "go",
    "back",
    "page",
    "open",
    "console",
    "right",
    "click",
    "inspect",
    "console",
    "click",
    "add",
    "cart",
    "basketball",
    "quantity",
    "one",
    "click",
    "add",
    "cart",
    "quantity",
    "two",
    "click",
    "quantity",
    "three",
    "looking",
    "cart",
    "basically",
    "added",
    "one",
    "basketball",
    "two",
    "get",
    "total",
    "three",
    "calculate",
    "total",
    "quantity",
    "cart",
    "total",
    "quantity",
    "going",
    "going",
    "put",
    "page",
    "using",
    "dom",
    "let",
    "go",
    "back",
    "code",
    "use",
    "dom",
    "first",
    "need",
    "html",
    "element",
    "going",
    "put",
    "quantity",
    "let",
    "find",
    "html",
    "element",
    "number",
    "go",
    "back",
    "page",
    "going",
    "rightclick",
    "number",
    "inspect",
    "click",
    "icon",
    "top",
    "left",
    "hover",
    "number",
    "click",
    "tell",
    "us",
    "code",
    "number",
    "code",
    "right",
    "div",
    "class",
    "cart",
    "quantity",
    "going",
    "search",
    "class",
    "cart",
    "quantity",
    "code",
    "let",
    "go",
    "back",
    "code",
    "let",
    "go",
    "amazon",
    "html",
    "file",
    "header",
    "still",
    "file",
    "type",
    "contrl",
    "f",
    "command",
    "f",
    "search",
    "code",
    "search",
    "cart",
    "das",
    "quantity",
    "tell",
    "us",
    "line",
    "right",
    "next",
    "use",
    "dom",
    "need",
    "get",
    "element",
    "javascript",
    "going",
    "add",
    "class",
    "element",
    "let",
    "add",
    "class",
    "cart",
    "quantity",
    "say",
    "save",
    "let",
    "go",
    "back",
    "javascript",
    "file",
    "going",
    "move",
    "see",
    "side",
    "side",
    "scroll",
    "calculate",
    "quantity",
    "let",
    "get",
    "element",
    "javascript",
    "using",
    "dom",
    "bottom",
    "type",
    "document",
    "query",
    "selector",
    "brackets",
    "string",
    "start",
    "dot",
    "class",
    "cart",
    "quantity",
    "element",
    "change",
    "html",
    "inside",
    "using",
    "property",
    "inner",
    "capital",
    "html",
    "make",
    "equal",
    "cart",
    "quantity",
    "calculated",
    "let",
    "save",
    "go",
    "back",
    "website",
    "let",
    "click",
    "add",
    "card",
    "button",
    "basketball",
    "update",
    "quantity",
    "one",
    "let",
    "click",
    "add",
    "cart",
    "update",
    "quantity",
    "two",
    "click",
    "increase",
    "three",
    "cart",
    "quantity",
    "interactive",
    "last",
    "thing",
    "need",
    "go",
    "back",
    "html",
    "instead",
    "starting",
    "three",
    "card",
    "quantity",
    "start",
    "zero",
    "let",
    "save",
    "cart",
    "quantity",
    "starts",
    "zero",
    "click",
    "add",
    "cart",
    "increase",
    "one",
    "create",
    "cart",
    "quantity",
    "feature",
    "final",
    "project",
    "finished",
    "features",
    "going",
    "lesson",
    "let",
    "go",
    "back",
    "javascript",
    "going",
    "move",
    "back",
    "let",
    "clean",
    "code",
    "removing",
    "console",
    "logs",
    "save",
    "finally",
    "let",
    "check",
    "git",
    "one",
    "time",
    "see",
    "changes",
    "made",
    "expand",
    "go",
    "git",
    "section",
    "click",
    "amazon",
    "html",
    "tell",
    "us",
    "added",
    "class",
    "click",
    "amazon",
    "js",
    "show",
    "us",
    "code",
    "added",
    "c",
    "calculating",
    "card",
    "quantity",
    "putting",
    "page",
    "finally",
    "let",
    "type",
    "message",
    "describe",
    "changes",
    "make",
    "cart",
    "quantity",
    "interactive",
    "commit",
    "close",
    "end",
    "lesson",
    "lesson",
    "started",
    "final",
    "amazon",
    "project",
    "set",
    "learned",
    "use",
    "git",
    "track",
    "changes",
    "learned",
    "main",
    "idea",
    "javascript",
    "save",
    "data",
    "generate",
    "html",
    "make",
    "interactive",
    "created",
    "list",
    "products",
    "homepage",
    "made",
    "add",
    "cart",
    "button",
    "interactive",
    "made",
    "cart",
    "quantity",
    "interactive",
    "thanks",
    "watching",
    "course",
    "far",
    "want",
    "support",
    "channel",
    "check",
    "premium",
    "version",
    "courses",
    "like",
    "one",
    "get",
    "certificate",
    "completion",
    "better",
    "learning",
    "platform",
    "interested",
    "extra",
    "videos",
    "videos",
    "behind",
    "scenes",
    "content",
    "check",
    "links",
    "also",
    "support",
    "channel",
    "liking",
    "video",
    "subscribing",
    "sharing",
    "video",
    "others",
    "thanks",
    "let",
    "continue",
    "course",
    "exercises",
    "help",
    "practice",
    "learned",
    "lesson",
    "lesson",
    "going",
    "learn",
    "feature",
    "javascript",
    "called",
    "modules",
    "better",
    "way",
    "organize",
    "code",
    "first",
    "let",
    "take",
    "look",
    "problem",
    "current",
    "code",
    "going",
    "go",
    "files",
    "going",
    "open",
    "amazon",
    "html",
    "going",
    "scroll",
    "bottom",
    "file",
    "script",
    "tags",
    "right",
    "using",
    "three",
    "script",
    "tags",
    "run",
    "javascript",
    "runs",
    "code",
    "cart",
    "js",
    "runs",
    "code",
    "products",
    "js",
    "finally",
    "runs",
    "code",
    "amazon",
    "js",
    "basically",
    "thing",
    "combining",
    "files",
    "together",
    "one",
    "big",
    "file",
    "running",
    "code",
    "however",
    "big",
    "problem",
    "using",
    "script",
    "tags",
    "like",
    "problem",
    "cause",
    "naming",
    "conflicts",
    "situation",
    "created",
    "variable",
    "named",
    "cart",
    "cart",
    "js",
    "means",
    "ca",
    "use",
    "variable",
    "name",
    "cart",
    "files",
    "example",
    "went",
    "amazon",
    "js",
    "scroll",
    "top",
    "let",
    "say",
    "try",
    "create",
    "another",
    "variable",
    "named",
    "cart",
    "top",
    "type",
    "const",
    "cart",
    "equals",
    "square",
    "brackets",
    "save",
    "go",
    "back",
    "project",
    "notice",
    "website",
    "stops",
    "working",
    "rightclick",
    "inspect",
    "open",
    "console",
    "tell",
    "us",
    "got",
    "error",
    "says",
    "cart",
    "already",
    "declared",
    "happening",
    "created",
    "variable",
    "called",
    "cart",
    "cart",
    "js",
    "later",
    "amazon",
    "js",
    "created",
    "another",
    "variable",
    "named",
    "cart",
    "ca",
    "two",
    "variables",
    "name",
    "javascript",
    "causes",
    "error",
    "causes",
    "website",
    "break",
    "called",
    "naming",
    "conflict",
    "two",
    "variables",
    "name",
    "big",
    "problem",
    "script",
    "tags",
    "go",
    "back",
    "code",
    "see",
    "really",
    "hard",
    "tell",
    "variables",
    "created",
    "files",
    "really",
    "easy",
    "accidentally",
    "create",
    "naming",
    "conflict",
    "like",
    "problem",
    "using",
    "script",
    "tags",
    "like",
    "running",
    "code",
    "one",
    "file",
    "time",
    "easy",
    "get",
    "naming",
    "conflicts",
    "going",
    "learn",
    "solve",
    "problem",
    "using",
    "feature",
    "javascript",
    "called",
    "modules",
    "module",
    "basically",
    "contains",
    "variable",
    "inside",
    "file",
    "variable",
    "going",
    "cause",
    "conflicts",
    "anything",
    "outside",
    "file",
    "example",
    "project",
    "created",
    "variable",
    "called",
    "cart",
    "want",
    "contain",
    "variable",
    "inside",
    "cart",
    "js",
    "file",
    "conflict",
    "cart",
    "variable",
    "inside",
    "amazon",
    "js",
    "file",
    "using",
    "module",
    "let",
    "learn",
    "create",
    "first",
    "module",
    "going",
    "go",
    "back",
    "amazon",
    "html",
    "create",
    "module",
    "simply",
    "going",
    "delete",
    "line",
    "code",
    "uses",
    "script",
    "tag",
    "load",
    "cart",
    "js",
    "delete",
    "save",
    "see",
    "website",
    "working",
    "work",
    "use",
    "script",
    "tag",
    "run",
    "code",
    "inside",
    "cart",
    "js",
    "code",
    "create",
    "card",
    "variable",
    "cause",
    "naming",
    "conflict",
    "removing",
    "script",
    "tag",
    "longer",
    "running",
    "code",
    "inside",
    "cart",
    "js",
    "longer",
    "creating",
    "cart",
    "variable",
    "longer",
    "cause",
    "naming",
    "conflict",
    "create",
    "module",
    "simply",
    "two",
    "steps",
    "number",
    "one",
    "create",
    "file",
    "write",
    "code",
    "inside",
    "file",
    "number",
    "two",
    "load",
    "file",
    "script",
    "tag",
    "variables",
    "create",
    "inside",
    "file",
    "contained",
    "inside",
    "file",
    "wo",
    "cause",
    "naming",
    "conflicts",
    "basically",
    "create",
    "module",
    "okay",
    "run",
    "another",
    "problem",
    "code",
    "open",
    "amazon",
    "js",
    "created",
    "card",
    "variable",
    "example",
    "actually",
    "want",
    "keep",
    "cart",
    "variable",
    "inside",
    "cart",
    "js",
    "want",
    "keep",
    "code",
    "related",
    "cart",
    "inside",
    "file",
    "save",
    "go",
    "back",
    "project",
    "click",
    "add",
    "cart",
    "notice",
    "longer",
    "works",
    "let",
    "look",
    "console",
    "see",
    "error",
    "get",
    "right",
    "click",
    "inspect",
    "open",
    "console",
    "going",
    "tell",
    "us",
    "cart",
    "defined",
    "problem",
    "file",
    "using",
    "variable",
    "cart",
    "loading",
    "cart",
    "js",
    "using",
    "script",
    "tag",
    "cart",
    "variable",
    "exist",
    "anymore",
    "contained",
    "inside",
    "cart",
    "js",
    "ca",
    "access",
    "outside",
    "going",
    "learn",
    "get",
    "variable",
    "file",
    "module",
    "going",
    "three",
    "steps",
    "first",
    "step",
    "add",
    "type",
    "equals",
    "module",
    "attribute",
    "second",
    "step",
    "export",
    "third",
    "step",
    "import",
    "let",
    "learn",
    "steps",
    "one",
    "one",
    "first",
    "step",
    "add",
    "type",
    "equals",
    "module",
    "attribute",
    "going",
    "open",
    "amazon",
    "html",
    "going",
    "scroll",
    "bottom",
    "last",
    "script",
    "tag",
    "load",
    "amazon",
    "js",
    "going",
    "add",
    "html",
    "attribute",
    "going",
    "type",
    "type",
    "equal",
    "equal",
    "module",
    "save",
    "type",
    "equals",
    "module",
    "attribute",
    "basically",
    "lets",
    "file",
    "get",
    "variables",
    "files",
    "basically",
    "enables",
    "feature",
    "second",
    "step",
    "export",
    "going",
    "go",
    "cart",
    "js",
    "going",
    "choose",
    "variables",
    "accessed",
    "outside",
    "file",
    "example",
    "want",
    "access",
    "var",
    "variable",
    "cart",
    "outside",
    "file",
    "front",
    "variable",
    "going",
    "type",
    "word",
    "export",
    "space",
    "save",
    "variable",
    "used",
    "outside",
    "cart",
    "js",
    "last",
    "step",
    "import",
    "going",
    "go",
    "place",
    "going",
    "use",
    "variable",
    "inside",
    "amazon",
    "js",
    "top",
    "going",
    "tell",
    "computer",
    "variable",
    "want",
    "get",
    "another",
    "file",
    "type",
    "import",
    "open",
    "curly",
    "bracket",
    "close",
    "curly",
    "bracket",
    "brackets",
    "going",
    "give",
    "name",
    "variable",
    "want",
    "get",
    "cart",
    "variable",
    "tell",
    "computer",
    "file",
    "want",
    "get",
    "variable",
    "type",
    "single",
    "quotes",
    "semicolon",
    "inside",
    "quotes",
    "going",
    "locate",
    "file",
    "using",
    "file",
    "path",
    "let",
    "open",
    "files",
    "easy",
    "see",
    "files",
    "right",
    "amazon",
    "js",
    "want",
    "locate",
    "cart",
    "js",
    "first",
    "step",
    "actually",
    "need",
    "get",
    "scripts",
    "folder",
    "scripts",
    "folder",
    "need",
    "get",
    "data",
    "folder",
    "get",
    "current",
    "cent",
    "folder",
    "file",
    "going",
    "type",
    "dot",
    "dot",
    "dot",
    "dot",
    "basically",
    "represents",
    "folder",
    "outside",
    "current",
    "folder",
    "folder",
    "right",
    "javascript",
    "amazon",
    "projects",
    "going",
    "type",
    "forward",
    "slash",
    "go",
    "outside",
    "scripts",
    "folder",
    "outside",
    "folder",
    "going",
    "go",
    "data",
    "folder",
    "going",
    "type",
    "data",
    "slash",
    "go",
    "folder",
    "going",
    "locate",
    "file",
    "cart",
    "js",
    "save",
    "code",
    "going",
    "take",
    "variable",
    "cart",
    "file",
    "cart",
    "js",
    "use",
    "file",
    "path",
    "locate",
    "file",
    "reminder",
    "dot",
    "dot",
    "means",
    "go",
    "outside",
    "current",
    "folder",
    "outside",
    "scripts",
    "go",
    "data",
    "folder",
    "inside",
    "data",
    "folder",
    "find",
    "cart",
    "js",
    "three",
    "steps",
    "get",
    "variable",
    "module",
    "first",
    "add",
    "type",
    "equals",
    "module",
    "attribute",
    "enable",
    "feature",
    "export",
    "variables",
    "want",
    "get",
    "finally",
    "import",
    "variables",
    "need",
    "two",
    "things",
    "need",
    "know",
    "modules",
    "number",
    "one",
    "put",
    "imports",
    "top",
    "file",
    "number",
    "two",
    "order",
    "modules",
    "work",
    "need",
    "use",
    "live",
    "server",
    "example",
    "open",
    "folder",
    "contains",
    "amazon",
    "html",
    "open",
    "javascript",
    "amazon",
    "project",
    "select",
    "html",
    "file",
    "rightclick",
    "open",
    "google",
    "chrome",
    "website",
    "wo",
    "work",
    "modules",
    "work",
    "open",
    "html",
    "file",
    "directly",
    "like",
    "let",
    "close",
    "get",
    "modules",
    "work",
    "need",
    "open",
    "code",
    "editor",
    "rightclick",
    "html",
    "file",
    "open",
    "live",
    "server",
    "course",
    "order",
    "modules",
    "work",
    "need",
    "use",
    "live",
    "server",
    "open",
    "html",
    "files",
    "learned",
    "use",
    "module",
    "let",
    "talk",
    "benefits",
    "modules",
    "first",
    "big",
    "benefit",
    "helps",
    "us",
    "avoid",
    "naming",
    "conflicts",
    "time",
    "causes",
    "naming",
    "conflicts",
    "import",
    "variable",
    "another",
    "variable",
    "named",
    "cart",
    "inside",
    "file",
    "like",
    "create",
    "naming",
    "conflict",
    "save",
    "website",
    "stop",
    "working",
    "least",
    "control",
    "naming",
    "conflicts",
    "happen",
    "happen",
    "import",
    "variable",
    "name",
    "modules",
    "another",
    "feature",
    "allows",
    "us",
    "avoid",
    "problem",
    "well",
    "variable",
    "name",
    "import",
    "type",
    "different",
    "name",
    "cart",
    "save",
    "basically",
    "take",
    "input",
    "rename",
    "cart",
    "longer",
    "conflict",
    "variable",
    "name",
    "see",
    "modules",
    "lot",
    "features",
    "help",
    "us",
    "avoid",
    "naming",
    "conflicts",
    "lots",
    "files",
    "project",
    "going",
    "delete",
    "put",
    "code",
    "back",
    "example",
    "save",
    "second",
    "big",
    "benefit",
    "modules",
    "worry",
    "order",
    "files",
    "loaded",
    "everything",
    "script",
    "tags",
    "make",
    "sure",
    "load",
    "first",
    "need",
    "cart",
    "variable",
    "created",
    "use",
    "amazon",
    "js",
    "order",
    "script",
    "tags",
    "really",
    "matter",
    "becomes",
    "really",
    "hard",
    "manage",
    "lots",
    "files",
    "big",
    "project",
    "modules",
    "import",
    "variables",
    "need",
    "worry",
    "order",
    "loading",
    "files",
    "see",
    "modules",
    "better",
    "way",
    "organize",
    "code",
    "especially",
    "bigger",
    "projects",
    "let",
    "use",
    "git",
    "save",
    "changes",
    "go",
    "git",
    "section",
    "tell",
    "us",
    "changed",
    "three",
    "files",
    "amazon",
    "js",
    "removed",
    "script",
    "tag",
    "added",
    "type",
    "equals",
    "module",
    "cart",
    "js",
    "exported",
    "cart",
    "variable",
    "amazon",
    "js",
    "imported",
    "cart",
    "variable",
    "cart",
    "js",
    "let",
    "save",
    "get",
    "type",
    "message",
    "use",
    "modules",
    "import",
    "cart",
    "cart",
    "js",
    "commit",
    "learned",
    "modules",
    "let",
    "use",
    "places",
    "project",
    "let",
    "close",
    "going",
    "open",
    "amazon",
    "html",
    "next",
    "going",
    "turn",
    "products",
    "js",
    "module",
    "well",
    "start",
    "deleting",
    "script",
    "tag",
    "script",
    "tag",
    "load",
    "code",
    "onto",
    "page",
    "delete",
    "save",
    "notice",
    "website",
    "stops",
    "working",
    "inside",
    "amazon",
    "js",
    "need",
    "access",
    "products",
    "products",
    "js",
    "going",
    "three",
    "steps",
    "first",
    "step",
    "add",
    "type",
    "equals",
    "module",
    "attribute",
    "already",
    "need",
    "second",
    "step",
    "export",
    "variables",
    "want",
    "get",
    "case",
    "want",
    "get",
    "products",
    "variable",
    "products",
    "js",
    "file",
    "let",
    "open",
    "files",
    "open",
    "products",
    "js",
    "scroll",
    "top",
    "get",
    "products",
    "variable",
    "file",
    "front",
    "variable",
    "going",
    "type",
    "export",
    "space",
    "save",
    "last",
    "step",
    "import",
    "variable",
    "need",
    "inside",
    "amazon",
    "js",
    "need",
    "products",
    "variable",
    "top",
    "going",
    "type",
    "import",
    "curly",
    "brackets",
    "inside",
    "going",
    "type",
    "variable",
    "name",
    "want",
    "get",
    "products",
    "going",
    "get",
    "variable",
    "single",
    "quotes",
    "semicolon",
    "inside",
    "going",
    "locate",
    "products",
    "js",
    "file",
    "going",
    "type",
    "dot",
    "dot",
    "slash",
    "go",
    "outside",
    "current",
    "folder",
    "outside",
    "scripts",
    "folder",
    "going",
    "go",
    "data",
    "folder",
    "type",
    "data",
    "slash",
    "go",
    "folder",
    "going",
    "locate",
    "file",
    "products",
    "js",
    "save",
    "importing",
    "variable",
    "file",
    "rest",
    "code",
    "work",
    "website",
    "start",
    "working",
    "turn",
    "products",
    "js",
    "module",
    "well",
    "let",
    "go",
    "get",
    "take",
    "look",
    "changes",
    "amazon",
    "html",
    "deleted",
    "script",
    "tag",
    "products",
    "js",
    "exported",
    "variables",
    "wanted",
    "get",
    "amazon",
    "js",
    "imported",
    "variables",
    "need",
    "file",
    "let",
    "type",
    "message",
    "save",
    "changes",
    "git",
    "import",
    "products",
    "products",
    "js",
    "commit",
    "let",
    "close",
    "let",
    "open",
    "amazon",
    "html",
    "last",
    "thing",
    "might",
    "wondering",
    "also",
    "delete",
    "script",
    "tag",
    "loads",
    "amazon",
    "js",
    "answer",
    "still",
    "need",
    "one",
    "javascript",
    "file",
    "load",
    "code",
    "file",
    "import",
    "files",
    "created",
    "organize",
    "code",
    "real",
    "website",
    "file",
    "called",
    "entry",
    "point",
    "seen",
    "examples",
    "modules",
    "going",
    "use",
    "modules",
    "organize",
    "code",
    "better",
    "let",
    "go",
    "amazon",
    "js",
    "going",
    "scroll",
    "code",
    "add",
    "card",
    "button",
    "inside",
    "file",
    "going",
    "scroll",
    "way",
    "code",
    "code",
    "run",
    "click",
    "add",
    "cart",
    "notice",
    "running",
    "lot",
    "code",
    "click",
    "button",
    "running",
    "code",
    "adds",
    "product",
    "cart",
    "also",
    "running",
    "code",
    "calculates",
    "quantity",
    "updates",
    "page",
    "best",
    "practice",
    "programming",
    "lot",
    "code",
    "different",
    "things",
    "better",
    "split",
    "smaller",
    "functions",
    "make",
    "code",
    "easier",
    "read",
    "part",
    "code",
    "takes",
    "product",
    "id",
    "adds",
    "cart",
    "makes",
    "sense",
    "split",
    "function",
    "let",
    "scroll",
    "top",
    "let",
    "create",
    "function",
    "code",
    "type",
    "function",
    "let",
    "call",
    "add",
    "cart",
    "brackets",
    "curly",
    "brackets",
    "going",
    "move",
    "code",
    "function",
    "select",
    "code",
    "rightclick",
    "cut",
    "inside",
    "function",
    "rightclick",
    "paste",
    "going",
    "run",
    "function",
    "inside",
    "click",
    "add",
    "cart",
    "going",
    "run",
    "add",
    "cart",
    "function",
    "created",
    "save",
    "let",
    "give",
    "try",
    "click",
    "add",
    "cart",
    "unfortunately",
    "work",
    "anymore",
    "let",
    "take",
    "look",
    "console",
    "see",
    "errors",
    "rightclick",
    "inspect",
    "open",
    "console",
    "telling",
    "us",
    "product",
    "id",
    "defined",
    "look",
    "code",
    "scroll",
    "function",
    "notice",
    "using",
    "product",
    "longer",
    "anywhere",
    "function",
    "product",
    "id",
    "outside",
    "function",
    "actually",
    "want",
    "keep",
    "code",
    "outside",
    "using",
    "button",
    "instead",
    "going",
    "take",
    "product",
    "id",
    "put",
    "function",
    "using",
    "parameter",
    "top",
    "function",
    "going",
    "add",
    "parameter",
    "product",
    "id",
    "call",
    "function",
    "going",
    "pass",
    "product",
    "id",
    "going",
    "take",
    "value",
    "put",
    "function",
    "save",
    "function",
    "run",
    "normal",
    "save",
    "go",
    "project",
    "click",
    "add",
    "cart",
    "see",
    "working",
    "next",
    "let",
    "go",
    "back",
    "scroll",
    "going",
    "put",
    "rest",
    "code",
    "function",
    "well",
    "make",
    "organized",
    "top",
    "let",
    "create",
    "new",
    "lines",
    "create",
    "function",
    "code",
    "updates",
    "card",
    "quantity",
    "page",
    "let",
    "name",
    "function",
    "update",
    "cart",
    "quantity",
    "brackets",
    "curly",
    "brackets",
    "move",
    "code",
    "function",
    "let",
    "select",
    "code",
    "rightclick",
    "cut",
    "rightclick",
    "paste",
    "call",
    "function",
    "using",
    "update",
    "cart",
    "quantity",
    "brackets",
    "save",
    "see",
    "splitting",
    "code",
    "smaller",
    "functions",
    "makes",
    "code",
    "lot",
    "easier",
    "read",
    "click",
    "add",
    "cart",
    "really",
    "easy",
    "understand",
    "going",
    "first",
    "going",
    "add",
    "product",
    "cart",
    "going",
    "update",
    "card",
    "quantity",
    "let",
    "save",
    "go",
    "back",
    "project",
    "try",
    "see",
    "everything",
    "working",
    "going",
    "two",
    "things",
    "better",
    "organize",
    "code",
    "let",
    "go",
    "back",
    "code",
    "first",
    "thing",
    "going",
    "scroll",
    "add",
    "cart",
    "function",
    "made",
    "small",
    "mistake",
    "previous",
    "lesson",
    "actually",
    "want",
    "rename",
    "parameter",
    "item",
    "cart",
    "item",
    "instead",
    "make",
    "little",
    "clear",
    "going",
    "rename",
    "cart",
    "item",
    "well",
    "name",
    "cart",
    "item",
    "save",
    "scroll",
    "going",
    "thing",
    "parameter",
    "rename",
    "cart",
    "item",
    "cart",
    "item",
    "save",
    "last",
    "thing",
    "let",
    "scroll",
    "add",
    "cart",
    "function",
    "notice",
    "code",
    "manages",
    "cart",
    "actually",
    "best",
    "practice",
    "move",
    "function",
    "cart",
    "js",
    "cart",
    "js",
    "contains",
    "code",
    "related",
    "cart",
    "best",
    "practice",
    "group",
    "related",
    "code",
    "together",
    "file",
    "let",
    "take",
    "function",
    "add",
    "cart",
    "select",
    "rightclick",
    "cut",
    "inside",
    "cart",
    "js",
    "going",
    "rightclick",
    "paste",
    "move",
    "function",
    "file",
    "file",
    "contains",
    "code",
    "related",
    "cart",
    "function",
    "inside",
    "file",
    "need",
    "access",
    "amazon",
    "js",
    "using",
    "modules",
    "using",
    "features",
    "export",
    "import",
    "inside",
    "cart",
    "js",
    "front",
    "function",
    "going",
    "export",
    "use",
    "files",
    "let",
    "save",
    "file",
    "inside",
    "amazon",
    "js",
    "going",
    "scroll",
    "top",
    "notice",
    "already",
    "importing",
    "something",
    "cart",
    "js",
    "actually",
    "need",
    "write",
    "import",
    "actually",
    "import",
    "multiple",
    "things",
    "file",
    "typing",
    "comma",
    "space",
    "something",
    "else",
    "want",
    "import",
    "case",
    "going",
    "import",
    "function",
    "add",
    "cart",
    "type",
    "comma",
    "add",
    "cart",
    "import",
    "cart",
    "add",
    "cart",
    "function",
    "file",
    "imports",
    "import",
    "multiple",
    "things",
    "file",
    "imports",
    "another",
    "syntax",
    "import",
    "star",
    "imports",
    "everything",
    "file",
    "groups",
    "together",
    "inside",
    "object",
    "access",
    "import",
    "property",
    "method",
    "lastly",
    "going",
    "scroll",
    "code",
    "going",
    "remove",
    "extra",
    "new",
    "line",
    "save",
    "might",
    "wondering",
    "move",
    "update",
    "cart",
    "quantity",
    "cart",
    "js",
    "well",
    "function",
    "actually",
    "handles",
    "updating",
    "web",
    "page",
    "rather",
    "managing",
    "cart",
    "going",
    "keep",
    "function",
    "inside",
    "file",
    "let",
    "go",
    "get",
    "save",
    "changes",
    "go",
    "inside",
    "cart",
    "js",
    "moved",
    "add",
    "cart",
    "function",
    "exported",
    "inside",
    "amazon",
    "js",
    "imported",
    "add",
    "card",
    "function",
    "took",
    "big",
    "block",
    "code",
    "separated",
    "two",
    "functions",
    "add",
    "cart",
    "update",
    "cart",
    "quantity",
    "made",
    "code",
    "lot",
    "easier",
    "read",
    "let",
    "type",
    "message",
    "describing",
    "changes",
    "move",
    "add",
    "cart",
    "cart",
    "js",
    "commit",
    "next",
    "going",
    "create",
    "checkout",
    "page",
    "final",
    "project",
    "going",
    "use",
    "modules",
    "organize",
    "code",
    "let",
    "open",
    "final",
    "project",
    "going",
    "click",
    "cart",
    "icon",
    "top",
    "right",
    "take",
    "us",
    "another",
    "page",
    "checkout",
    "page",
    "page",
    "see",
    "products",
    "cart",
    "wondering",
    "cart",
    "icon",
    "works",
    "basically",
    "uses",
    "html",
    "element",
    "called",
    "link",
    "element",
    "looks",
    "like",
    "link",
    "elements",
    "special",
    "attribute",
    "called",
    "href",
    "click",
    "link",
    "element",
    "whatever",
    "inside",
    "href",
    "attribute",
    "open",
    "page",
    "put",
    "inside",
    "href",
    "click",
    "link",
    "open",
    "browser",
    "put",
    "file",
    "like",
    "checkout",
    "html",
    "inside",
    "href",
    "look",
    "file",
    "called",
    "checkout",
    "html",
    "open",
    "file",
    "project",
    "look",
    "code",
    "open",
    "files",
    "inside",
    "amazon",
    "html",
    "basically",
    "using",
    "link",
    "element",
    "element",
    "hre",
    "checkout",
    "html",
    "going",
    "look",
    "file",
    "called",
    "checkout",
    "html",
    "beside",
    "current",
    "file",
    "amazon",
    "html",
    "amazon",
    "html",
    "going",
    "look",
    "checkout",
    "html",
    "beside",
    "open",
    "browser",
    "cart",
    "icon",
    "works",
    "browser",
    "top",
    "see",
    "opened",
    "checkout",
    "html",
    "basically",
    "link",
    "element",
    "works",
    "navigate",
    "one",
    "page",
    "another",
    "learn",
    "link",
    "elements",
    "html",
    "css",
    "full",
    "course",
    "going",
    "learn",
    "build",
    "checkout",
    "page",
    "using",
    "javascript",
    "first",
    "let",
    "take",
    "look",
    "code",
    "page",
    "code",
    "inside",
    "checkout",
    "html",
    "code",
    "editor",
    "going",
    "open",
    "checkout",
    "html",
    "code",
    "page",
    "saw",
    "earlier",
    "contains",
    "cart",
    "like",
    "homepage",
    "instead",
    "writing",
    "html",
    "manually",
    "going",
    "use",
    "javascript",
    "generate",
    "html",
    "first",
    "need",
    "add",
    "javascript",
    "page",
    "let",
    "scroll",
    "bottom",
    "right",
    "end",
    "body",
    "going",
    "create",
    "script",
    "element",
    "load",
    "javascript",
    "give",
    "attribute",
    "source",
    "equals",
    "double",
    "quotes",
    "file",
    "want",
    "load",
    "let",
    "create",
    "new",
    "javascript",
    "file",
    "file",
    "page",
    "inside",
    "scripts",
    "folder",
    "let",
    "click",
    "amazon",
    "js",
    "click",
    "icon",
    "create",
    "new",
    "file",
    "let",
    "name",
    "file",
    "checkout",
    "js",
    "press",
    "enter",
    "going",
    "load",
    "page",
    "inside",
    "checkout",
    "html",
    "source",
    "attribute",
    "going",
    "locate",
    "file",
    "first",
    "need",
    "go",
    "scripts",
    "folder",
    "type",
    "scripts",
    "slash",
    "go",
    "folder",
    "load",
    "file",
    "checkout",
    "js",
    "next",
    "going",
    "add",
    "another",
    "attribute",
    "type",
    "equals",
    "double",
    "quotes",
    "module",
    "remember",
    "earlier",
    "lesson",
    "attribute",
    "enables",
    "module",
    "features",
    "file",
    "file",
    "import",
    "javascript",
    "files",
    "let",
    "save",
    "let",
    "open",
    "checkout",
    "js",
    "start",
    "creating",
    "page",
    "javascript",
    "let",
    "go",
    "back",
    "page",
    "first",
    "take",
    "look",
    "structure",
    "page",
    "see",
    "page",
    "actually",
    "two",
    "sections",
    "cart",
    "section",
    "left",
    "shows",
    "products",
    "cart",
    "also",
    "payment",
    "section",
    "right",
    "calculates",
    "cost",
    "order",
    "let",
    "use",
    "javascript",
    "create",
    "cart",
    "section",
    "first",
    "remember",
    "main",
    "idea",
    "javascript",
    "first",
    "going",
    "save",
    "data",
    "going",
    "generate",
    "html",
    "finally",
    "make",
    "interactive",
    "let",
    "start",
    "saving",
    "data",
    "need",
    "section",
    "page",
    "section",
    "basically",
    "displaying",
    "list",
    "products",
    "along",
    "quantity",
    "product",
    "want",
    "buy",
    "remember",
    "already",
    "created",
    "data",
    "structure",
    "represent",
    "cart",
    "inside",
    "cart",
    "id",
    "product",
    "well",
    "quantity",
    "want",
    "buy",
    "reuse",
    "data",
    "structure",
    "create",
    "section",
    "let",
    "go",
    "code",
    "going",
    "open",
    "cart",
    "js",
    "inside",
    "array",
    "called",
    "cart",
    "supposed",
    "represent",
    "data",
    "right",
    "card",
    "empty",
    "make",
    "easier",
    "us",
    "develop",
    "going",
    "add",
    "default",
    "values",
    "array",
    "inside",
    "let",
    "create",
    "object",
    "put",
    "one",
    "product",
    "card",
    "first",
    "looking",
    "page",
    "product",
    "want",
    "put",
    "socks",
    "go",
    "back",
    "code",
    "rearrange",
    "windows",
    "see",
    "side",
    "side",
    "going",
    "get",
    "product",
    "id",
    "socks",
    "going",
    "go",
    "products",
    "js",
    "socks",
    "going",
    "take",
    "id",
    "right",
    "click",
    "copy",
    "inside",
    "cart",
    "remember",
    "structured",
    "data",
    "card",
    "item",
    "product",
    "id",
    "well",
    "quantity",
    "going",
    "create",
    "structure",
    "current",
    "code",
    "uses",
    "going",
    "give",
    "object",
    "product",
    "id",
    "colon",
    "single",
    "quotes",
    "going",
    "rightclick",
    "paste",
    "id",
    "copied",
    "earlier",
    "type",
    "comma",
    "give",
    "quantity",
    "colon",
    "first",
    "item",
    "going",
    "give",
    "quantity",
    "two",
    "create",
    "cart",
    "kind",
    "matches",
    "see",
    "page",
    "next",
    "let",
    "create",
    "second",
    "card",
    "item",
    "represent",
    "basketball",
    "type",
    "comma",
    "curly",
    "brackets",
    "give",
    "product",
    "id",
    "colon",
    "single",
    "quotes",
    "going",
    "get",
    "id",
    "basketball",
    "inside",
    "products",
    "js",
    "going",
    "scroll",
    "basketball",
    "going",
    "copy",
    "id",
    "right",
    "click",
    "copy",
    "inside",
    "cart",
    "js",
    "right",
    "click",
    "paste",
    "give",
    "one",
    "quantity",
    "colon",
    "one",
    "save",
    "creating",
    "default",
    "values",
    "use",
    "write",
    "code",
    "generate",
    "page",
    "development",
    "actually",
    "using",
    "website",
    "cart",
    "start",
    "empty",
    "compare",
    "data",
    "page",
    "might",
    "notice",
    "things",
    "missing",
    "product",
    "image",
    "name",
    "price",
    "come",
    "saving",
    "data",
    "using",
    "special",
    "technique",
    "saving",
    "product",
    "id",
    "use",
    "id",
    "search",
    "product",
    "inside",
    "products",
    "array",
    "using",
    "id",
    "find",
    "details",
    "product",
    "like",
    "image",
    "name",
    "price",
    "need",
    "save",
    "data",
    "twice",
    "inside",
    "products",
    "array",
    "inside",
    "cart",
    "array",
    "save",
    "id",
    "product",
    "want",
    "search",
    "technique",
    "called",
    "duplicating",
    "data",
    "normalizing",
    "data",
    "common",
    "technique",
    "software",
    "engineering",
    "okay",
    "one",
    "thing",
    "probably",
    "need",
    "save",
    "data",
    "delivery",
    "times",
    "delivery",
    "options",
    "going",
    "leave",
    "next",
    "lesson",
    "requires",
    "features",
    "going",
    "learn",
    "finished",
    "saving",
    "data",
    "need",
    "next",
    "step",
    "use",
    "data",
    "generate",
    "html",
    "let",
    "open",
    "checkout",
    "js",
    "going",
    "drag",
    "bottom",
    "see",
    "side",
    "side",
    "first",
    "step",
    "need",
    "take",
    "cart",
    "array",
    "import",
    "checkout",
    "js",
    "use",
    "let",
    "import",
    "curly",
    "brackets",
    "cart",
    "array",
    "going",
    "import",
    "single",
    "quotes",
    "semicolon",
    "going",
    "use",
    "file",
    "path",
    "quotes",
    "locate",
    "cart",
    "js",
    "let",
    "open",
    "files",
    "get",
    "need",
    "go",
    "scripts",
    "folder",
    "type",
    "dot",
    "dot",
    "slash",
    "go",
    "outer",
    "folder",
    "going",
    "go",
    "data",
    "folder",
    "type",
    "data",
    "slash",
    "go",
    "folder",
    "locate",
    "cart",
    "js",
    "cart",
    "js",
    "save",
    "next",
    "going",
    "loop",
    "cart",
    "generate",
    "html",
    "like",
    "homepage",
    "let",
    "close",
    "going",
    "create",
    "loop",
    "cart",
    "type",
    "cart",
    "brackets",
    "function",
    "give",
    "parameter",
    "let",
    "call",
    "cart",
    "item",
    "cart",
    "item",
    "going",
    "generate",
    "html",
    "let",
    "create",
    "template",
    "string",
    "html",
    "using",
    "back",
    "ticks",
    "create",
    "new",
    "lines",
    "going",
    "copy",
    "paste",
    "html",
    "one",
    "products",
    "first",
    "let",
    "find",
    "html",
    "one",
    "products",
    "rightclick",
    "inspect",
    "click",
    "top",
    "left",
    "icon",
    "click",
    "element",
    "want",
    "get",
    "html",
    "html",
    "one",
    "products",
    "going",
    "search",
    "class",
    "card",
    "item",
    "container",
    "code",
    "inside",
    "code",
    "let",
    "open",
    "checkout",
    "html",
    "type",
    "control",
    "f",
    "command",
    "f",
    "search",
    "code",
    "search",
    "class",
    "cart",
    "item",
    "container",
    "code",
    "right",
    "collapse",
    "collapse",
    "code",
    "two",
    "products",
    "going",
    "take",
    "html",
    "going",
    "move",
    "javascript",
    "generate",
    "javascript",
    "right",
    "click",
    "copy",
    "right",
    "click",
    "paste",
    "need",
    "fix",
    "formatting",
    "select",
    "lines",
    "press",
    "shift",
    "tab",
    "remove",
    "indents",
    "add",
    "indent",
    "next",
    "generating",
    "html",
    "want",
    "replace",
    "actual",
    "products",
    "image",
    "actual",
    "products",
    "name",
    "going",
    "take",
    "card",
    "item",
    "use",
    "get",
    "data",
    "need",
    "let",
    "open",
    "card",
    "js",
    "see",
    "cart",
    "item",
    "looks",
    "like",
    "product",
    "id",
    "quantity",
    "first",
    "need",
    "use",
    "product",
    "id",
    "search",
    "product",
    "order",
    "get",
    "details",
    "like",
    "image",
    "name",
    "price",
    "let",
    "get",
    "product",
    "id",
    "cart",
    "item",
    "first",
    "create",
    "variable",
    "const",
    "product",
    "id",
    "equals",
    "cart",
    "item",
    "product",
    "id",
    "need",
    "use",
    "search",
    "full",
    "product",
    "full",
    "product",
    "open",
    "files",
    "ins",
    "inside",
    "products",
    "js",
    "array",
    "right",
    "going",
    "move",
    "see",
    "side",
    "side",
    "search",
    "inside",
    "array",
    "actually",
    "need",
    "import",
    "products",
    "checkout",
    "js",
    "let",
    "use",
    "module",
    "features",
    "top",
    "import",
    "curly",
    "brackets",
    "products",
    "array",
    "import",
    "single",
    "quotes",
    "semicolon",
    "locate",
    "products",
    "js",
    "file",
    "type",
    "dot",
    "slash",
    "go",
    "scripts",
    "folder",
    "go",
    "data",
    "folder",
    "data",
    "slash",
    "go",
    "folder",
    "import",
    "products",
    "js",
    "products",
    "js",
    "save",
    "access",
    "products",
    "array",
    "search",
    "array",
    "full",
    "product",
    "details",
    "let",
    "create",
    "variable",
    "save",
    "result",
    "type",
    "let",
    "name",
    "matching",
    "product",
    "loop",
    "products",
    "array",
    "type",
    "products",
    "brackets",
    "function",
    "give",
    "parameter",
    "product",
    "product",
    "going",
    "check",
    "id",
    "property",
    "equal",
    "product",
    "id",
    "check",
    "product",
    "id",
    "property",
    "equal",
    "product",
    "id",
    "equal",
    "means",
    "found",
    "matching",
    "product",
    "going",
    "save",
    "variable",
    "matching",
    "product",
    "equals",
    "product",
    "looping",
    "matching",
    "product",
    "access",
    "image",
    "name",
    "well",
    "price",
    "use",
    "generate",
    "html",
    "good",
    "example",
    "duplicating",
    "normalizing",
    "data",
    "bottom",
    "let",
    "matching",
    "product",
    "see",
    "works",
    "matching",
    "product",
    "save",
    "go",
    "project",
    "rightclick",
    "inspect",
    "check",
    "console",
    "see",
    "able",
    "get",
    "full",
    "product",
    "details",
    "products",
    "using",
    "product",
    "id",
    "full",
    "product",
    "details",
    "use",
    "generate",
    "html",
    "instead",
    "generating",
    "image",
    "every",
    "time",
    "going",
    "use",
    "image",
    "matching",
    "product",
    "let",
    "get",
    "rid",
    "code",
    "going",
    "remove",
    "going",
    "substitute",
    "using",
    "dollar",
    "curly",
    "brackets",
    "matching",
    "product",
    "image",
    "scroll",
    "instead",
    "product",
    "name",
    "every",
    "time",
    "going",
    "going",
    "replace",
    "going",
    "substitute",
    "matching",
    "product",
    "name",
    "time",
    "going",
    "generate",
    "html",
    "different",
    "image",
    "different",
    "name",
    "thing",
    "remove",
    "price",
    "replace",
    "matching",
    "product",
    "dot",
    "check",
    "property",
    "called",
    "price",
    "sense",
    "remember",
    "display",
    "dollars",
    "convert",
    "dividing",
    "100",
    "save",
    "lastly",
    "going",
    "replace",
    "quantity",
    "scroll",
    "see",
    "quantity",
    "instead",
    "two",
    "every",
    "time",
    "substitute",
    "quantity",
    "remember",
    "part",
    "product",
    "part",
    "cart",
    "cart",
    "item",
    "property",
    "called",
    "called",
    "quantity",
    "going",
    "substitute",
    "cart",
    "item",
    "quantity",
    "save",
    "generating",
    "html",
    "looping",
    "cart",
    "next",
    "step",
    "going",
    "combine",
    "html",
    "together",
    "put",
    "page",
    "going",
    "move",
    "see",
    "code",
    "combine",
    "html",
    "together",
    "let",
    "create",
    "variable",
    "store",
    "result",
    "type",
    "let",
    "let",
    "call",
    "cart",
    "summary",
    "html",
    "equals",
    "empty",
    "string",
    "time",
    "loop",
    "cart",
    "going",
    "add",
    "html",
    "combine",
    "type",
    "cart",
    "summary",
    "html",
    "plus",
    "equals",
    "html",
    "generated",
    "bottom",
    "add",
    "semicolon",
    "let",
    "cart",
    "summary",
    "html",
    "cart",
    "summary",
    "html",
    "make",
    "sure",
    "worked",
    "save",
    "check",
    "console",
    "right",
    "click",
    "inspect",
    "console",
    "see",
    "generated",
    "html",
    "cart",
    "item",
    "different",
    "depending",
    "product",
    "displayed",
    "generate",
    "html",
    "section",
    "last",
    "step",
    "take",
    "put",
    "page",
    "using",
    "dom",
    "first",
    "need",
    "element",
    "put",
    "html",
    "inside",
    "find",
    "element",
    "let",
    "rightclick",
    "inspect",
    "click",
    "top",
    "left",
    "left",
    "click",
    "one",
    "products",
    "let",
    "find",
    "order",
    "summary",
    "element",
    "contains",
    "products",
    "going",
    "replace",
    "html",
    "inside",
    "generated",
    "let",
    "search",
    "class",
    "order",
    "summary",
    "code",
    "go",
    "back",
    "code",
    "let",
    "open",
    "checkout",
    "html",
    "type",
    "contrl",
    "f",
    "command",
    "f",
    "search",
    "code",
    "search",
    "class",
    "summary",
    "right",
    "going",
    "add",
    "class",
    "select",
    "using",
    "dom",
    "summary",
    "save",
    "let",
    "use",
    "dom",
    "put",
    "element",
    "javascript",
    "inside",
    "music",
    "bottom",
    "use",
    "document",
    "query",
    "select",
    "vor",
    "brackets",
    "class",
    "created",
    "summary",
    "use",
    "property",
    "inner",
    "capital",
    "html",
    "change",
    "html",
    "cart",
    "summary",
    "html",
    "remove",
    "line",
    "save",
    "basically",
    "generating",
    "h",
    "html",
    "javascript",
    "putting",
    "page",
    "go",
    "back",
    "checkout",
    "html",
    "actually",
    "remove",
    "code",
    "inside",
    "order",
    "summary",
    "delete",
    "code",
    "save",
    "everything",
    "still",
    "work",
    "generated",
    "javascript",
    "create",
    "cart",
    "section",
    "page",
    "javascript",
    "let",
    "go",
    "get",
    "save",
    "changes",
    "open",
    "git",
    "section",
    "tell",
    "us",
    "changed",
    "three",
    "files",
    "checkout",
    "html",
    "removed",
    "html",
    "written",
    "manually",
    "bottom",
    "created",
    "script",
    "tag",
    "load",
    "javascript",
    "also",
    "changed",
    "cart",
    "js",
    "added",
    "default",
    "values",
    "work",
    "created",
    "checkout",
    "js",
    "loops",
    "cart",
    "creates",
    "html",
    "puts",
    "page",
    "let",
    "create",
    "message",
    "describe",
    "changes",
    "generate",
    "html",
    "order",
    "summary",
    "commit",
    "next",
    "let",
    "open",
    "project",
    "continue",
    "actually",
    "two",
    "issues",
    "need",
    "fix",
    "first",
    "issue",
    "price",
    "displaying",
    "one",
    "decimal",
    "instead",
    "two",
    "second",
    "issue",
    "delivery",
    "options",
    "actually",
    "shared",
    "two",
    "products",
    "example",
    "click",
    "delivery",
    "option",
    "actually",
    "unselect",
    "second",
    "product",
    "sort",
    "shared",
    "two",
    "products",
    "actually",
    "want",
    "product",
    "able",
    "select",
    "delivery",
    "options",
    "going",
    "fix",
    "two",
    "issues",
    "next",
    "first",
    "let",
    "focus",
    "price",
    "want",
    "display",
    "two",
    "decimals",
    "actually",
    "learn",
    "fix",
    "homepage",
    "using",
    "method",
    "fixed",
    "going",
    "use",
    "code",
    "let",
    "go",
    "code",
    "open",
    "files",
    "let",
    "open",
    "checkout",
    "js",
    "going",
    "scroll",
    "display",
    "price",
    "price",
    "sense",
    "show",
    "two",
    "decimal",
    "places",
    "going",
    "surround",
    "brackets",
    "make",
    "sure",
    "calculate",
    "first",
    "use",
    "method",
    "do2",
    "fixed",
    "brackets",
    "two",
    "show",
    "two",
    "decimal",
    "places",
    "save",
    "open",
    "project",
    "price",
    "displaying",
    "correctly",
    "move",
    "going",
    "learn",
    "better",
    "organize",
    "code",
    "go",
    "back",
    "notice",
    "using",
    "code",
    "inside",
    "checkout",
    "page",
    "well",
    "inside",
    "amazon",
    "js",
    "homepage",
    "actually",
    "share",
    "code",
    "two",
    "files",
    "repeat",
    "use",
    "modules",
    "let",
    "open",
    "checkout",
    "js",
    "going",
    "create",
    "function",
    "thing",
    "code",
    "share",
    "function",
    "two",
    "files",
    "let",
    "create",
    "file",
    "going",
    "contain",
    "shared",
    "function",
    "going",
    "go",
    "scripts",
    "folder",
    "inside",
    "going",
    "create",
    "new",
    "folder",
    "time",
    "let",
    "call",
    "folder",
    "utils",
    "press",
    "enter",
    "naming",
    "utils",
    "code",
    "sort",
    "like",
    "useful",
    "utility",
    "want",
    "share",
    "inside",
    "folder",
    "going",
    "different",
    "types",
    "utils",
    "let",
    "create",
    "new",
    "file",
    "let",
    "name",
    "money",
    "jjs",
    "file",
    "going",
    "contain",
    "utilities",
    "related",
    "money",
    "code",
    "right",
    "let",
    "press",
    "enter",
    "going",
    "move",
    "bottom",
    "see",
    "side",
    "side",
    "inside",
    "uil",
    "file",
    "going",
    "create",
    "function",
    "thing",
    "share",
    "two",
    "files",
    "create",
    "function",
    "let",
    "name",
    "format",
    "currency",
    "code",
    "brackets",
    "curly",
    "brackets",
    "function",
    "basically",
    "going",
    "thing",
    "going",
    "add",
    "parameter",
    "price",
    "sense",
    "want",
    "use",
    "function",
    "amount",
    "price",
    "sents",
    "going",
    "thing",
    "price",
    "sents",
    "divided",
    "100",
    "going",
    "surround",
    "brackets",
    "make",
    "sure",
    "calculate",
    "first",
    "display",
    "two",
    "decimal",
    "places",
    "using",
    "dot",
    "2",
    "fixed",
    "brackets",
    "two",
    "finally",
    "let",
    "return",
    "result",
    "return",
    "save",
    "created",
    "function",
    "thing",
    "code",
    "going",
    "share",
    "function",
    "checkout",
    "js",
    "amazon",
    "js",
    "first",
    "order",
    "share",
    "need",
    "export",
    "function",
    "front",
    "going",
    "type",
    "export",
    "save",
    "inside",
    "files",
    "going",
    "import",
    "function",
    "use",
    "let",
    "scroll",
    "top",
    "going",
    "import",
    "curly",
    "brackets",
    "going",
    "import",
    "function",
    "format",
    "currency",
    "going",
    "import",
    "single",
    "quotes",
    "semicolon",
    "inside",
    "going",
    "locate",
    "file",
    "money",
    "js",
    "checkout",
    "js",
    "file",
    "right",
    "go",
    "first",
    "going",
    "go",
    "uts",
    "folder",
    "going",
    "type",
    "u",
    "toils",
    "slash",
    "go",
    "folder",
    "going",
    "locate",
    "file",
    "money",
    "js",
    "money",
    "js",
    "modules",
    "one",
    "extra",
    "thing",
    "front",
    "file",
    "path",
    "need",
    "type",
    "dot",
    "slash",
    "remember",
    "dot",
    "dot",
    "represents",
    "folder",
    "outside",
    "current",
    "folder",
    "checkout",
    "js",
    "go",
    "outside",
    "folder",
    "going",
    "go",
    "outside",
    "scripts",
    "folder",
    "single",
    "dot",
    "hand",
    "means",
    "current",
    "folder",
    "dot",
    "means",
    "going",
    "go",
    "current",
    "folder",
    "scripts",
    "folder",
    "going",
    "go",
    "utils",
    "folder",
    "going",
    "go",
    "locate",
    "money",
    "js",
    "modules",
    "want",
    "start",
    "current",
    "f",
    "folder",
    "file",
    "paths",
    "start",
    "slash",
    "one",
    "extra",
    "thing",
    "imported",
    "format",
    "currency",
    "function",
    "let",
    "use",
    "rest",
    "code",
    "going",
    "scroll",
    "instead",
    "writing",
    "going",
    "use",
    "function",
    "format",
    "currency",
    "brackets",
    "going",
    "remove",
    "rest",
    "code",
    "close",
    "bracket",
    "save",
    "basically",
    "running",
    "code",
    "except",
    "using",
    "shared",
    "function",
    "located",
    "another",
    "file",
    "let",
    "open",
    "project",
    "see",
    "price",
    "still",
    "displaying",
    "correctly",
    "let",
    "go",
    "back",
    "code",
    "going",
    "share",
    "function",
    "inside",
    "amazon",
    "js",
    "well",
    "let",
    "open",
    "amazon",
    "js",
    "scroll",
    "show",
    "price",
    "going",
    "use",
    "function",
    "first",
    "import",
    "scroll",
    "top",
    "import",
    "curly",
    "brackets",
    "import",
    "function",
    "format",
    "currency",
    "import",
    "single",
    "quotes",
    "semicolon",
    "locate",
    "file",
    "money",
    "js",
    "remember",
    "module",
    "want",
    "start",
    "current",
    "folder",
    "type",
    "slash",
    "going",
    "go",
    "uil",
    "folder",
    "utils",
    "slash",
    "go",
    "inside",
    "folder",
    "locate",
    "file",
    "money",
    "js",
    "going",
    "use",
    "function",
    "let",
    "scroll",
    "going",
    "replace",
    "code",
    "use",
    "format",
    "currency",
    "brackets",
    "remove",
    "rest",
    "code",
    "save",
    "let",
    "look",
    "project",
    "click",
    "go",
    "back",
    "homepage",
    "see",
    "prices",
    "displaying",
    "two",
    "decimal",
    "places",
    "look",
    "code",
    "essentially",
    "taking",
    "function",
    "sharing",
    "across",
    "two",
    "files",
    "using",
    "modules",
    "using",
    "modules",
    "use",
    "lot",
    "code",
    "reduce",
    "repetition",
    "next",
    "let",
    "work",
    "second",
    "issue",
    "saw",
    "earlier",
    "go",
    "back",
    "project",
    "click",
    "top",
    "right",
    "go",
    "back",
    "checkout",
    "page",
    "delivery",
    "options",
    "shared",
    "two",
    "products",
    "want",
    "product",
    "choose",
    "delivery",
    "options",
    "fix",
    "let",
    "go",
    "back",
    "code",
    "going",
    "resize",
    "see",
    "side",
    "side",
    "open",
    "checkout",
    "js",
    "close",
    "html",
    "element",
    "called",
    "radial",
    "selector",
    "code",
    "radial",
    "selector",
    "way",
    "radial",
    "selectors",
    "work",
    "set",
    "radio",
    "selectors",
    "name",
    "select",
    "one",
    "example",
    "three",
    "radio",
    "selectors",
    "name",
    "attribute",
    "select",
    "one",
    "three",
    "top",
    "one",
    "name",
    "three",
    "bottom",
    "different",
    "name",
    "select",
    "one",
    "first",
    "three",
    "well",
    "one",
    "second",
    "three",
    "problem",
    "radial",
    "selectors",
    "well",
    "let",
    "take",
    "look",
    "code",
    "selectors",
    "going",
    "rightclick",
    "one",
    "inspect",
    "click",
    "top",
    "left",
    "click",
    "one",
    "selectors",
    "get",
    "html",
    "code",
    "code",
    "radio",
    "selector",
    "see",
    "name",
    "selector",
    "delivery",
    "option",
    "one",
    "click",
    "top",
    "left",
    "find",
    "one",
    "bottom",
    "selectors",
    "notice",
    "also",
    "name",
    "delivery",
    "option",
    "one",
    "six",
    "name",
    "attribute",
    "select",
    "one",
    "six",
    "time",
    "actually",
    "want",
    "want",
    "first",
    "three",
    "selectors",
    "one",
    "name",
    "second",
    "three",
    "selectors",
    "different",
    "name",
    "let",
    "figure",
    "give",
    "different",
    "name",
    "inside",
    "console",
    "see",
    "code",
    "selector",
    "name",
    "attribute",
    "delivery",
    "let",
    "actually",
    "find",
    "name",
    "code",
    "go",
    "code",
    "editor",
    "contrl",
    "f",
    "command",
    "f",
    "search",
    "code",
    "search",
    "delivery",
    "das",
    "scroll",
    "notice",
    "every",
    "time",
    "generating",
    "radio",
    "selectors",
    "always",
    "using",
    "name",
    "delivery",
    "option",
    "one",
    "every",
    "product",
    "going",
    "name",
    "radio",
    "selectors",
    "going",
    "shared",
    "actually",
    "want",
    "instead",
    "using",
    "name",
    "delivery",
    "option",
    "one",
    "every",
    "time",
    "product",
    "going",
    "use",
    "different",
    "name",
    "three",
    "selectors",
    "one",
    "way",
    "instead",
    "number",
    "one",
    "every",
    "time",
    "replace",
    "product",
    "id",
    "id",
    "always",
    "unique",
    "product",
    "let",
    "substitute",
    "using",
    "dollar",
    "curly",
    "brackets",
    "product",
    "id",
    "well",
    "instead",
    "using",
    "name",
    "one",
    "every",
    "time",
    "going",
    "substitute",
    "product",
    "actually",
    "use",
    "name",
    "matching",
    "product",
    "scroll",
    "update",
    "matching",
    "product",
    "matching",
    "product",
    "well",
    "instead",
    "one",
    "every",
    "time",
    "substitute",
    "matching",
    "product",
    "id",
    "save",
    "three",
    "radial",
    "selectors",
    "different",
    "name",
    "attribute",
    "three",
    "radial",
    "selectors",
    "means",
    "select",
    "one",
    "three",
    "select",
    "one",
    "three",
    "fix",
    "error",
    "instead",
    "using",
    "name",
    "delivery",
    "option",
    "one",
    "every",
    "time",
    "going",
    "generate",
    "name",
    "using",
    "product",
    "id",
    "let",
    "go",
    "get",
    "save",
    "changes",
    "amazon",
    "js",
    "imported",
    "shared",
    "function",
    "used",
    "format",
    "price",
    "two",
    "decimal",
    "places",
    "checkout",
    "js",
    "also",
    "used",
    "shared",
    "function",
    "fix",
    "radio",
    "selectors",
    "file",
    "moneyjar",
    "function",
    "let",
    "create",
    "message",
    "describe",
    "changes",
    "fix",
    "price",
    "formatting",
    "radio",
    "selectors",
    "commit",
    "last",
    "step",
    "process",
    "make",
    "interactive",
    "going",
    "close",
    "going",
    "move",
    "right",
    "see",
    "project",
    "order",
    "summary",
    "things",
    "make",
    "interactive",
    "going",
    "start",
    "delete",
    "link",
    "click",
    "link",
    "remove",
    "product",
    "cart",
    "going",
    "learn",
    "build",
    "let",
    "go",
    "back",
    "code",
    "first",
    "let",
    "add",
    "event",
    "listeners",
    "delete",
    "links",
    "going",
    "find",
    "code",
    "delete",
    "links",
    "rightclick",
    "inspect",
    "code",
    "going",
    "search",
    "class",
    "code",
    "editor",
    "delete",
    "quantity",
    "dlink",
    "let",
    "open",
    "checkout",
    "js",
    "going",
    "contrl",
    "f",
    "command",
    "f",
    "search",
    "delete",
    "quantity",
    "dlink",
    "right",
    "next",
    "going",
    "add",
    "class",
    "elements",
    "add",
    "event",
    "listeners",
    "end",
    "let",
    "add",
    "class",
    "delete",
    "daslink",
    "save",
    "bottom",
    "going",
    "scroll",
    "going",
    "add",
    "event",
    "listeners",
    "first",
    "going",
    "select",
    "delete",
    "links",
    "page",
    "using",
    "document",
    "query",
    "selector",
    "brackets",
    "string",
    "going",
    "select",
    "class",
    "using",
    "dot",
    "class",
    "delete",
    "daslink",
    "going",
    "loop",
    "links",
    "dot",
    "brackets",
    "function",
    "give",
    "us",
    "link",
    "every",
    "time",
    "links",
    "going",
    "add",
    "event",
    "listener",
    "link",
    "addevent",
    "listener",
    "brackets",
    "going",
    "give",
    "string",
    "event",
    "want",
    "listen",
    "click",
    "function",
    "want",
    "run",
    "click",
    "links",
    "let",
    "string",
    "delete",
    "make",
    "sure",
    "working",
    "save",
    "click",
    "delete",
    "links",
    "open",
    "console",
    "right",
    "click",
    "inspect",
    "console",
    "see",
    "working",
    "let",
    "go",
    "back",
    "code",
    "click",
    "delete",
    "going",
    "two",
    "steps",
    "first",
    "step",
    "going",
    "remove",
    "product",
    "cart",
    "second",
    "step",
    "also",
    "going",
    "update",
    "html",
    "remove",
    "product",
    "page",
    "let",
    "start",
    "first",
    "step",
    "click",
    "delete",
    "know",
    "product",
    "need",
    "remove",
    "cart",
    "learned",
    "added",
    "cart",
    "button",
    "attach",
    "product",
    "id",
    "link",
    "element",
    "let",
    "scroll",
    "delete",
    "link",
    "right",
    "going",
    "attach",
    "products",
    "id",
    "element",
    "using",
    "data",
    "attribute",
    "end",
    "going",
    "add",
    "equals",
    "double",
    "quotes",
    "substitute",
    "matching",
    "product",
    "id",
    "save",
    "attached",
    "product",
    "id",
    "element",
    "get",
    "javascript",
    "let",
    "scroll",
    "going",
    "delete",
    "line",
    "using",
    "link",
    "element",
    "get",
    "product",
    "id",
    "using",
    "link",
    "dat",
    "set",
    "access",
    "data",
    "attributes",
    "going",
    "access",
    "product",
    "id",
    "let",
    "save",
    "variable",
    "use",
    "later",
    "const",
    "product",
    "id",
    "equals",
    "value",
    "let",
    "see",
    "works",
    "save",
    "go",
    "project",
    "click",
    "delete",
    "link",
    "first",
    "product",
    "look",
    "console",
    "inspect",
    "console",
    "show",
    "us",
    "products",
    "id",
    "click",
    "second",
    "products",
    "delete",
    "link",
    "show",
    "us",
    "second",
    "products",
    "id",
    "id",
    "need",
    "remove",
    "cart",
    "actually",
    "begin",
    "figuring",
    "instead",
    "writing",
    "code",
    "let",
    "actually",
    "create",
    "function",
    "inside",
    "task",
    "reason",
    "going",
    "cart",
    "js",
    "supposed",
    "contain",
    "code",
    "related",
    "cart",
    "help",
    "us",
    "organize",
    "code",
    "better",
    "let",
    "open",
    "files",
    "going",
    "open",
    "cart",
    "js",
    "going",
    "scroll",
    "bottom",
    "going",
    "create",
    "function",
    "removing",
    "product",
    "cart",
    "let",
    "type",
    "function",
    "let",
    "name",
    "remove",
    "cart",
    "brackets",
    "curly",
    "brackets",
    "function",
    "take",
    "product",
    "id",
    "remove",
    "cart",
    "let",
    "let",
    "create",
    "parameter",
    "id",
    "product",
    "id",
    "going",
    "figure",
    "remove",
    "one",
    "way",
    "first",
    "create",
    "new",
    "array",
    "loop",
    "cart",
    "add",
    "product",
    "new",
    "array",
    "except",
    "product",
    "id",
    "let",
    "convert",
    "steps",
    "code",
    "inside",
    "function",
    "let",
    "create",
    "new",
    "new",
    "array",
    "using",
    "const",
    "call",
    "new",
    "cart",
    "equals",
    "empty",
    "array",
    "next",
    "step",
    "going",
    "loop",
    "cart",
    "type",
    "cart",
    "brackets",
    "function",
    "give",
    "parameter",
    "cart",
    "item",
    "last",
    "step",
    "going",
    "add",
    "card",
    "item",
    "new",
    "array",
    "except",
    "product",
    "id",
    "checking",
    "cart",
    "item",
    "product",
    "id",
    "equal",
    "product",
    "id",
    "looking",
    "product",
    "id",
    "equal",
    "product",
    "trying",
    "remove",
    "going",
    "add",
    "new",
    "cart",
    "new",
    "cart",
    "push",
    "cart",
    "item",
    "result",
    "loop",
    "going",
    "contain",
    "cart",
    "items",
    "match",
    "product",
    "id",
    "thing",
    "removing",
    "cart",
    "last",
    "step",
    "going",
    "take",
    "new",
    "cart",
    "replace",
    "cart",
    "scroll",
    "make",
    "cart",
    "equal",
    "new",
    "cart",
    "reassigning",
    "variable",
    "scroll",
    "change",
    "const",
    "let",
    "save",
    "created",
    "function",
    "let",
    "use",
    "checkout",
    "page",
    "first",
    "going",
    "use",
    "modules",
    "feature",
    "export",
    "function",
    "save",
    "inside",
    "checkout",
    "js",
    "going",
    "import",
    "function",
    "going",
    "move",
    "bottom",
    "see",
    "side",
    "side",
    "checkout",
    "js",
    "going",
    "scroll",
    "already",
    "importing",
    "cart",
    "js",
    "going",
    "import",
    "one",
    "additional",
    "thing",
    "typing",
    "comma",
    "going",
    "import",
    "function",
    "remove",
    "cart",
    "save",
    "going",
    "use",
    "function",
    "bottom",
    "scroll",
    "going",
    "remove",
    "cart",
    "brackets",
    "going",
    "give",
    "product",
    "id",
    "want",
    "remove",
    "product",
    "id",
    "lastly",
    "let",
    "cart",
    "make",
    "sure",
    "works",
    "card",
    "save",
    "let",
    "go",
    "project",
    "going",
    "click",
    "delete",
    "link",
    "first",
    "product",
    "delete",
    "let",
    "open",
    "console",
    "right",
    "click",
    "inspect",
    "console",
    "going",
    "show",
    "us",
    "one",
    "product",
    "remaining",
    "cart",
    "product",
    "quantity",
    "one",
    "second",
    "product",
    "clicking",
    "delete",
    "link",
    "successfully",
    "removed",
    "product",
    "cart",
    "refresh",
    "tried",
    "clicking",
    "second",
    "delete",
    "link",
    "look",
    "console",
    "exp",
    "expand",
    "cart",
    "tell",
    "us",
    "remaining",
    "product",
    "quantity",
    "two",
    "product",
    "successfully",
    "removed",
    "second",
    "product",
    "cart",
    "clicked",
    "delete",
    "let",
    "go",
    "get",
    "look",
    "changes",
    "go",
    "section",
    "well",
    "close",
    "open",
    "git",
    "tell",
    "us",
    "change",
    "let",
    "created",
    "new",
    "remove",
    "cart",
    "function",
    "checkout",
    "js",
    "import",
    "function",
    "bottom",
    "click",
    "delete",
    "link",
    "going",
    "remove",
    "product",
    "cart",
    "finally",
    "remove",
    "save",
    "going",
    "put",
    "changes",
    "git",
    "type",
    "message",
    "describe",
    "changes",
    "delete",
    "products",
    "cart",
    "clicking",
    "delete",
    "commit",
    "second",
    "thing",
    "click",
    "delete",
    "update",
    "html",
    "go",
    "back",
    "project",
    "click",
    "delete",
    "want",
    "remove",
    "product",
    "page",
    "one",
    "way",
    "first",
    "going",
    "use",
    "dom",
    "get",
    "element",
    "want",
    "remove",
    "use",
    "method",
    "called",
    "remove",
    "every",
    "element",
    "get",
    "dom",
    "method",
    "called",
    "remove",
    "removes",
    "page",
    "first",
    "know",
    "element",
    "get",
    "page",
    "let",
    "actually",
    "look",
    "html",
    "one",
    "products",
    "going",
    "rightclick",
    "inspect",
    "click",
    "top",
    "left",
    "click",
    "one",
    "products",
    "give",
    "us",
    "html",
    "two",
    "products",
    "represented",
    "two",
    "divs",
    "class",
    "cart",
    "container",
    "one",
    "way",
    "identify",
    "product",
    "add",
    "special",
    "class",
    "element",
    "class",
    "contain",
    "product",
    "id",
    "go",
    "back",
    "code",
    "open",
    "checkout",
    "js",
    "scroll",
    "bottom",
    "click",
    "delete",
    "product",
    "id",
    "use",
    "select",
    "special",
    "class",
    "going",
    "add",
    "first",
    "let",
    "add",
    "special",
    "class",
    "elements",
    "going",
    "scroll",
    "html",
    "going",
    "go",
    "top",
    "div",
    "cart",
    "container",
    "add",
    "special",
    "class",
    "cart",
    "das",
    "item",
    "das",
    "container",
    "das",
    "substitute",
    "product",
    "id",
    "type",
    "matching",
    "product",
    "id",
    "let",
    "put",
    "class",
    "separate",
    "line",
    "line",
    "long",
    "let",
    "save",
    "going",
    "scroll",
    "bottom",
    "use",
    "code",
    "get",
    "class",
    "scroll",
    "music",
    "bottom",
    "going",
    "use",
    "dom",
    "well",
    "product",
    "id",
    "get",
    "special",
    "class",
    "added",
    "type",
    "document",
    "query",
    "selector",
    "brackets",
    "inside",
    "type",
    "string",
    "select",
    "class",
    "using",
    "dot",
    "cart",
    "item",
    "container",
    "dash",
    "going",
    "substitute",
    "product",
    "id",
    "want",
    "insert",
    "something",
    "going",
    "switch",
    "template",
    "string",
    "using",
    "backtick",
    "substitute",
    "product",
    "id",
    "string",
    "product",
    "id",
    "creating",
    "string",
    "like",
    "able",
    "select",
    "specific",
    "container",
    "need",
    "let",
    "save",
    "variable",
    "use",
    "later",
    "const",
    "container",
    "equals",
    "result",
    "let",
    "let",
    "actually",
    "see",
    "works",
    "container",
    "save",
    "go",
    "back",
    "project",
    "move",
    "project",
    "click",
    "delete",
    "first",
    "product",
    "check",
    "console",
    "right",
    "click",
    "inspect",
    "console",
    "see",
    "getting",
    "correct",
    "element",
    "delete",
    "go",
    "click",
    "delete",
    "link",
    "check",
    "console",
    "see",
    "also",
    "getting",
    "us",
    "correct",
    "element",
    "want",
    "delete",
    "element",
    "want",
    "delete",
    "next",
    "step",
    "use",
    "remove",
    "method",
    "every",
    "element",
    "get",
    "dom",
    "method",
    "called",
    "remove",
    "remove",
    "page",
    "go",
    "back",
    "code",
    "type",
    "element",
    "container",
    "remove",
    "brackets",
    "remove",
    "page",
    "save",
    "try",
    "go",
    "click",
    "delete",
    "first",
    "product",
    "remove",
    "page",
    "click",
    "delete",
    "second",
    "product",
    "also",
    "remove",
    "page",
    "let",
    "refresh",
    "bring",
    "products",
    "back",
    "make",
    "delete",
    "link",
    "interactive",
    "remove",
    "products",
    "cart",
    "well",
    "page",
    "let",
    "save",
    "changes",
    "git",
    "go",
    "git",
    "section",
    "tell",
    "us",
    "checkout",
    "js",
    "top",
    "added",
    "special",
    "class",
    "contains",
    "product",
    "id",
    "scroll",
    "bottom",
    "created",
    "string",
    "get",
    "us",
    "specific",
    "element",
    "want",
    "remove",
    "use",
    "remove",
    "method",
    "let",
    "create",
    "message",
    "describe",
    "changes",
    "delete",
    "products",
    "html",
    "clicking",
    "delete",
    "commit",
    "last",
    "thing",
    "going",
    "lesson",
    "going",
    "add",
    "local",
    "storage",
    "cart",
    "go",
    "back",
    "project",
    "delete",
    "products",
    "cart",
    "refresh",
    "notice",
    "cart",
    "goes",
    "back",
    "right",
    "look",
    "code",
    "open",
    "cart",
    "js",
    "cart",
    "variable",
    "variables",
    "reset",
    "refresh",
    "page",
    "go",
    "different",
    "page",
    "go",
    "back",
    "project",
    "go",
    "different",
    "page",
    "clicking",
    "top",
    "left",
    "homepage",
    "add",
    "many",
    "products",
    "want",
    "cart",
    "go",
    "back",
    "checkout",
    "page",
    "cart",
    "get",
    "reset",
    "whatever",
    "problem",
    "using",
    "variable",
    "save",
    "cart",
    "gets",
    "reset",
    "refresh",
    "page",
    "go",
    "different",
    "page",
    "solve",
    "problem",
    "going",
    "use",
    "local",
    "storage",
    "save",
    "cart",
    "first",
    "let",
    "create",
    "function",
    "saving",
    "cart",
    "local",
    "storage",
    "might",
    "want",
    "reuse",
    "code",
    "let",
    "create",
    "function",
    "call",
    "save",
    "storage",
    "brackets",
    "curler",
    "brackets",
    "going",
    "save",
    "cart",
    "local",
    "storage",
    "using",
    "local",
    "storage",
    "set",
    "item",
    "brackets",
    "set",
    "item",
    "takes",
    "two",
    "strings",
    "first",
    "string",
    "name",
    "whatever",
    "want",
    "save",
    "going",
    "save",
    "cart",
    "going",
    "call",
    "cart",
    "second",
    "string",
    "data",
    "want",
    "save",
    "remember",
    "local",
    "storage",
    "save",
    "strings",
    "save",
    "cart",
    "need",
    "convert",
    "string",
    "first",
    "using",
    "json",
    "stringify",
    "brackets",
    "inside",
    "going",
    "give",
    "cart",
    "convert",
    "cart",
    "string",
    "save",
    "local",
    "storage",
    "let",
    "use",
    "function",
    "whenever",
    "update",
    "cart",
    "need",
    "save",
    "local",
    "storage",
    "get",
    "reset",
    "refresh",
    "page",
    "add",
    "cart",
    "bottom",
    "update",
    "cart",
    "going",
    "use",
    "function",
    "created",
    "save",
    "storage",
    "brackets",
    "also",
    "function",
    "remove",
    "cart",
    "function",
    "also",
    "updating",
    "cart",
    "update",
    "cart",
    "also",
    "going",
    "save",
    "storage",
    "brackets",
    "save",
    "whenever",
    "update",
    "cart",
    "going",
    "save",
    "local",
    "storage",
    "last",
    "thing",
    "need",
    "top",
    "beginning",
    "code",
    "need",
    "get",
    "cart",
    "local",
    "storage",
    "instead",
    "using",
    "default",
    "value",
    "let",
    "add",
    "new",
    "lines",
    "separate",
    "code",
    "bit",
    "going",
    "get",
    "cart",
    "local",
    "storage",
    "using",
    "local",
    "storage",
    "get",
    "item",
    "brackets",
    "get",
    "item",
    "takes",
    "one",
    "string",
    "name",
    "saved",
    "earlier",
    "cart",
    "going",
    "give",
    "string",
    "cart",
    "give",
    "us",
    "cart",
    "saved",
    "however",
    "remember",
    "local",
    "storage",
    "save",
    "strings",
    "give",
    "us",
    "string",
    "version",
    "cart",
    "need",
    "convert",
    "back",
    "array",
    "convert",
    "back",
    "array",
    "use",
    "code",
    "json",
    "pars",
    "brackets",
    "close",
    "bracket",
    "last",
    "thing",
    "need",
    "first",
    "use",
    "website",
    "might",
    "cart",
    "local",
    "storage",
    "cart",
    "saved",
    "local",
    "storage",
    "give",
    "us",
    "null",
    "situation",
    "value",
    "null",
    "want",
    "give",
    "cart",
    "default",
    "value",
    "value",
    "give",
    "cart",
    "default",
    "value",
    "empty",
    "use",
    "statement",
    "typing",
    "brackets",
    "curly",
    "brackets",
    "check",
    "cart",
    "cart",
    "local",
    "storage",
    "give",
    "us",
    "null",
    "case",
    "null",
    "become",
    "truthy",
    "going",
    "run",
    "code",
    "statement",
    "cart",
    "empty",
    "going",
    "make",
    "cart",
    "equal",
    "default",
    "value",
    "let",
    "select",
    "code",
    "right",
    "click",
    "cut",
    "right",
    "click",
    "paste",
    "remove",
    "extra",
    "line",
    "save",
    "cart",
    "empty",
    "give",
    "default",
    "value",
    "go",
    "back",
    "project",
    "try",
    "code",
    "let",
    "delete",
    "first",
    "product",
    "refresh",
    "page",
    "notice",
    "cart",
    "gets",
    "saved",
    "first",
    "product",
    "remains",
    "deleted",
    "go",
    "homepage",
    "add",
    "new",
    "products",
    "go",
    "cart",
    "notice",
    "cart",
    "saved",
    "pages",
    "using",
    "local",
    "storage",
    "save",
    "cart",
    "even",
    "refresh",
    "page",
    "go",
    "different",
    "pages",
    "going",
    "build",
    "lesson",
    "clean",
    "let",
    "delete",
    "products",
    "cart",
    "go",
    "homepage",
    "add",
    "back",
    "two",
    "socks",
    "one",
    "basketball",
    "default",
    "value",
    "cart",
    "let",
    "go",
    "back",
    "checkout",
    "page",
    "done",
    "part",
    "page",
    "finally",
    "let",
    "save",
    "changes",
    "git",
    "go",
    "git",
    "section",
    "tell",
    "us",
    "inside",
    "cart",
    "js",
    "loading",
    "cart",
    "local",
    "storage",
    "open",
    "page",
    "cart",
    "exist",
    "going",
    "give",
    "default",
    "value",
    "created",
    "function",
    "save",
    "cart",
    "local",
    "store",
    "stage",
    "let",
    "add",
    "message",
    "describe",
    "changes",
    "save",
    "cart",
    "local",
    "storage",
    "commit",
    "end",
    "lesson",
    "lesson",
    "learned",
    "modules",
    "better",
    "way",
    "organize",
    "code",
    "created",
    "checkout",
    "page",
    "final",
    "project",
    "learned",
    "html",
    "link",
    "elements",
    "radio",
    "selectors",
    "made",
    "delete",
    "link",
    "interactive",
    "saved",
    "cart",
    "local",
    "storage",
    "exercises",
    "help",
    "practice",
    "learned",
    "lesson",
    "e",
    "lesson",
    "going",
    "learn",
    "external",
    "libraries",
    "going",
    "finish",
    "checkout",
    "page",
    "final",
    "project",
    "external",
    "library",
    "basically",
    "code",
    "outside",
    "project",
    "far",
    "using",
    "code",
    "inside",
    "project",
    "like",
    "files",
    "well",
    "lot",
    "developers",
    "write",
    "javascript",
    "code",
    "put",
    "code",
    "internet",
    "actually",
    "load",
    "code",
    "internet",
    "project",
    "use",
    "call",
    "code",
    "external",
    "library",
    "code",
    "outside",
    "project",
    "let",
    "example",
    "load",
    "first",
    "external",
    "library",
    "going",
    "go",
    "video",
    "description",
    "going",
    "click",
    "link",
    "hello",
    "external",
    "library",
    "open",
    "page",
    "contains",
    "javascript",
    "code",
    "actually",
    "wrote",
    "code",
    "notice",
    "normal",
    "javascript",
    "code",
    "create",
    "function",
    "called",
    "hello",
    "hello",
    "called",
    "external",
    "library",
    "code",
    "outside",
    "project",
    "cool",
    "thing",
    "actually",
    "load",
    "code",
    "internet",
    "project",
    "let",
    "give",
    "try",
    "going",
    "go",
    "project",
    "going",
    "open",
    "checkout",
    "html",
    "going",
    "scroll",
    "bottom",
    "script",
    "tag",
    "going",
    "add",
    "another",
    "script",
    "tag",
    "load",
    "code",
    "script",
    "give",
    "source",
    "attribute",
    "instead",
    "using",
    "fth",
    "like",
    "done",
    "going",
    "give",
    "url",
    "website",
    "contains",
    "javascript",
    "code",
    "go",
    "back",
    "browser",
    "url",
    "page",
    "going",
    "copy",
    "right",
    "click",
    "copy",
    "paste",
    "code",
    "right",
    "click",
    "paste",
    "computer",
    "get",
    "javascript",
    "code",
    "url",
    "page",
    "going",
    "get",
    "code",
    "page",
    "load",
    "project",
    "like",
    "normal",
    "code",
    "let",
    "save",
    "let",
    "give",
    "try",
    "code",
    "creates",
    "function",
    "called",
    "hello",
    "let",
    "try",
    "running",
    "hello",
    "function",
    "project",
    "go",
    "checkout",
    "js",
    "scroll",
    "top",
    "let",
    "run",
    "function",
    "hello",
    "hello",
    "brackets",
    "save",
    "go",
    "back",
    "project",
    "go",
    "checkout",
    "page",
    "check",
    "console",
    "right",
    "click",
    "inspect",
    "console",
    "see",
    "displayed",
    "message",
    "hello",
    "external",
    "library",
    "works",
    "code",
    "outside",
    "project",
    "load",
    "code",
    "using",
    "script",
    "tag",
    "like",
    "give",
    "url",
    "code",
    "located",
    "two",
    "things",
    "might",
    "wondering",
    "come",
    "put",
    "script",
    "tag",
    "top",
    "generally",
    "load",
    "external",
    "libraries",
    "first",
    "use",
    "library",
    "code",
    "second",
    "thing",
    "put",
    "code",
    "internet",
    "like",
    "learn",
    "check",
    "video",
    "put",
    "website",
    "internet",
    "show",
    "put",
    "file",
    "like",
    "html",
    "css",
    "javascript",
    "files",
    "onto",
    "website",
    "like",
    "next",
    "let",
    "talk",
    "use",
    "external",
    "libraries",
    "external",
    "libraries",
    "let",
    "us",
    "share",
    "code",
    "instead",
    "writing",
    "code",
    "use",
    "code",
    "people",
    "wrote",
    "helps",
    "us",
    "save",
    "time",
    "avoid",
    "duplicating",
    "work",
    "right",
    "loading",
    "simple",
    "library",
    "let",
    "load",
    "complex",
    "library",
    "show",
    "save",
    "lot",
    "time",
    "work",
    "let",
    "go",
    "back",
    "project",
    "go",
    "checkout",
    "page",
    "section",
    "choosing",
    "delivery",
    "option",
    "product",
    "notice",
    "option",
    "date",
    "date",
    "product",
    "delivered",
    "way",
    "works",
    "cheapest",
    "option",
    "takes",
    "7",
    "days",
    "deliver",
    "option",
    "takes",
    "3",
    "days",
    "deliver",
    "option",
    "takes",
    "one",
    "day",
    "deliver",
    "get",
    "dates",
    "need",
    "three",
    "things",
    "first",
    "need",
    "somehow",
    "get",
    "today",
    "date",
    "javascript",
    "number",
    "two",
    "need",
    "calculations",
    "date",
    "add",
    "seven",
    "days",
    "add",
    "3",
    "days",
    "number",
    "three",
    "need",
    "display",
    "date",
    "easyto",
    "read",
    "format",
    "like",
    "could",
    "try",
    "figure",
    "writing",
    "code",
    "going",
    "lot",
    "work",
    "instead",
    "use",
    "external",
    "library",
    "help",
    "us",
    "work",
    "dates",
    "project",
    "going",
    "use",
    "external",
    "library",
    "called",
    "djs",
    "popular",
    "library",
    "helps",
    "us",
    "work",
    "dates",
    "first",
    "let",
    "load",
    "djs",
    "project",
    "going",
    "go",
    "video",
    "description",
    "click",
    "link",
    "djs",
    "external",
    "library",
    "page",
    "opens",
    "see",
    "bunch",
    "random",
    "code",
    "might",
    "think",
    "special",
    "code",
    "actually",
    "regular",
    "javascript",
    "code",
    "compressed",
    "basically",
    "extra",
    "spaces",
    "removed",
    "variable",
    "names",
    "shortened",
    "one",
    "letter",
    "press",
    "javascript",
    "code",
    "like",
    "need",
    "load",
    "code",
    "internet",
    "project",
    "compressing",
    "makes",
    "code",
    "smaller",
    "load",
    "project",
    "faster",
    "compression",
    "process",
    "called",
    "minification",
    "minify",
    "code",
    "okay",
    "code",
    "external",
    "library",
    "djs",
    "let",
    "load",
    "code",
    "project",
    "go",
    "back",
    "code",
    "go",
    "checkout",
    "html",
    "going",
    "add",
    "another",
    "script",
    "tag",
    "less",
    "script",
    "source",
    "attribute",
    "going",
    "give",
    "url",
    "code",
    "want",
    "load",
    "let",
    "go",
    "back",
    "code",
    "djs",
    "going",
    "rightclick",
    "copy",
    "url",
    "inside",
    "code",
    "source",
    "attribute",
    "going",
    "rightclick",
    "paste",
    "url",
    "save",
    "take",
    "code",
    "located",
    "page",
    "load",
    "project",
    "let",
    "give",
    "try",
    "djs",
    "external",
    "library",
    "creates",
    "function",
    "called",
    "djs",
    "go",
    "checkout",
    "js",
    "top",
    "going",
    "run",
    "jjs",
    "function",
    "brackets",
    "make",
    "sure",
    "lowercase",
    "cuz",
    "name",
    "library",
    "used",
    "let",
    "actually",
    "result",
    "function",
    "save",
    "go",
    "back",
    "project",
    "checkout",
    "page",
    "going",
    "check",
    "console",
    "see",
    "djs",
    "function",
    "gives",
    "us",
    "object",
    "object",
    "represents",
    "current",
    "date",
    "time",
    "know",
    "djs",
    "working",
    "successfully",
    "loaded",
    "djs",
    "external",
    "library",
    "project",
    "let",
    "learn",
    "use",
    "djs",
    "external",
    "libraries",
    "usually",
    "documentation",
    "page",
    "shows",
    "us",
    "use",
    "library",
    "find",
    "documentation",
    "page",
    "searching",
    "google",
    "library",
    "name",
    "like",
    "djs",
    "documentation",
    "ask",
    "ai",
    "tool",
    "use",
    "library",
    "make",
    "things",
    "easier",
    "video",
    "going",
    "show",
    "features",
    "need",
    "go",
    "documentation",
    "later",
    "want",
    "earlier",
    "said",
    "needed",
    "three",
    "things",
    "date",
    "first",
    "want",
    "get",
    "today",
    "date",
    "number",
    "two",
    "want",
    "calculations",
    "date",
    "number",
    "three",
    "want",
    "display",
    "date",
    "easyto",
    "read",
    "format",
    "djs",
    "helps",
    "us",
    "things",
    "first",
    "let",
    "use",
    "djs",
    "get",
    "today",
    "date",
    "according",
    "documentation",
    "get",
    "current",
    "date",
    "time",
    "use",
    "djs",
    "function",
    "like",
    "go",
    "back",
    "code",
    "call",
    "djs",
    "gives",
    "us",
    "object",
    "represents",
    "current",
    "date",
    "time",
    "second",
    "thing",
    "need",
    "calculations",
    "date",
    "delivery",
    "options",
    "need",
    "calculate",
    "today",
    "date",
    "plus",
    "7",
    "days",
    "today",
    "date",
    "plus",
    "3",
    "days",
    "djs",
    "library",
    "help",
    "us",
    "let",
    "go",
    "back",
    "console",
    "look",
    "object",
    "get",
    "back",
    "djs",
    "object",
    "represents",
    "today",
    "date",
    "time",
    "object",
    "also",
    "method",
    "called",
    "add",
    "adds",
    "certain",
    "amount",
    "time",
    "date",
    "need",
    "project",
    "calculate",
    "dates",
    "let",
    "go",
    "code",
    "first",
    "let",
    "save",
    "result",
    "variable",
    "going",
    "remove",
    "create",
    "variable",
    "const",
    "today",
    "equals",
    "djs",
    "going",
    "use",
    "add",
    "method",
    "type",
    "today",
    "add",
    "brackets",
    "add",
    "method",
    "takes",
    "two",
    "parameters",
    "first",
    "one",
    "number",
    "time",
    "want",
    "add",
    "want",
    "add",
    "seven",
    "days",
    "going",
    "type",
    "seven",
    "second",
    "parameter",
    "length",
    "time",
    "want",
    "add",
    "want",
    "add",
    "seven",
    "days",
    "going",
    "give",
    "string",
    "days",
    "add",
    "seven",
    "days",
    "today",
    "date",
    "let",
    "save",
    "result",
    "variable",
    "const",
    "delivery",
    "date",
    "equals",
    "result",
    "make",
    "sure",
    "working",
    "correctly",
    "delivery",
    "date",
    "save",
    "go",
    "back",
    "project",
    "open",
    "console",
    "give",
    "us",
    "object",
    "represents",
    "7",
    "days",
    "date",
    "7",
    "days",
    "watching",
    "video",
    "use",
    "djs",
    "calculations",
    "date",
    "gives",
    "us",
    "methods",
    "like",
    "add",
    "add",
    "certain",
    "amount",
    "time",
    "date",
    "finally",
    "going",
    "use",
    "djs",
    "display",
    "date",
    "easyto",
    "read",
    "format",
    "like",
    "according",
    "document",
    "date",
    "object",
    "another",
    "method",
    "called",
    "format",
    "display",
    "date",
    "easyto",
    "read",
    "format",
    "let",
    "go",
    "back",
    "code",
    "remove",
    "type",
    "delivery",
    "date",
    "format",
    "inside",
    "brackets",
    "going",
    "give",
    "method",
    "string",
    "string",
    "tells",
    "djs",
    "kind",
    "kind",
    "format",
    "want",
    "date",
    "documentation",
    "table",
    "showing",
    "us",
    "special",
    "characters",
    "put",
    "string",
    "example",
    "want",
    "show",
    "day",
    "week",
    "like",
    "monday",
    "tuesday",
    "type",
    "four",
    "string",
    "give",
    "us",
    "string",
    "text",
    "replaced",
    "actual",
    "day",
    "week",
    "want",
    "add",
    "comma",
    "space",
    "format",
    "add",
    "comma",
    "space",
    "show",
    "directly",
    "result",
    "let",
    "say",
    "want",
    "show",
    "month",
    "according",
    "documentation",
    "show",
    "month",
    "type",
    "capital",
    "replace",
    "month",
    "finally",
    "type",
    "space",
    "according",
    "documentation",
    "want",
    "insert",
    "day",
    "month",
    "string",
    "type",
    "capital",
    "method",
    "takes",
    "date",
    "converts",
    "string",
    "format",
    "let",
    "see",
    "looks",
    "like",
    "well",
    "brackets",
    "save",
    "go",
    "project",
    "open",
    "console",
    "see",
    "date",
    "7",
    "days",
    "today",
    "displayed",
    "easyto",
    "read",
    "format",
    "use",
    "djs",
    "external",
    "library",
    "help",
    "us",
    "work",
    "dates",
    "see",
    "saves",
    "us",
    "lot",
    "time",
    "work",
    "figure",
    "work",
    "dates",
    "use",
    "someone",
    "else",
    "code",
    "solve",
    "problem",
    "best",
    "practice",
    "programming",
    "need",
    "something",
    "complicated",
    "try",
    "find",
    "external",
    "library",
    "first",
    "writing",
    "code",
    "find",
    "external",
    "libraries",
    "search",
    "google",
    "javascript",
    "kind",
    "library",
    "looking",
    "like",
    "date",
    "library",
    "also",
    "use",
    "ai",
    "tool",
    "help",
    "us",
    "find",
    "external",
    "libraries",
    "next",
    "going",
    "learn",
    "use",
    "external",
    "libraries",
    "javascript",
    "modules",
    "together",
    "right",
    "look",
    "code",
    "go",
    "checkout",
    "html",
    "loading",
    "libraries",
    "using",
    "script",
    "tags",
    "problem",
    "script",
    "tags",
    "runs",
    "code",
    "directly",
    "page",
    "might",
    "cause",
    "naming",
    "conflicts",
    "example",
    "hello",
    "library",
    "creates",
    "function",
    "called",
    "hello",
    "something",
    "else",
    "called",
    "hello",
    "code",
    "might",
    "cause",
    "naming",
    "conflict",
    "better",
    "way",
    "load",
    "external",
    "libraries",
    "use",
    "javascript",
    "modules",
    "module",
    "contain",
    "code",
    "inside",
    "file",
    "variables",
    "created",
    "inside",
    "inside",
    "file",
    "conflict",
    "anything",
    "outside",
    "file",
    "use",
    "external",
    "libraries",
    "javascript",
    "modules",
    "together",
    "going",
    "use",
    "special",
    "version",
    "library",
    "called",
    "esm",
    "version",
    "esm",
    "stands",
    "ecmascript",
    "modules",
    "ecmascript",
    "another",
    "name",
    "javascript",
    "esm",
    "version",
    "library",
    "version",
    "works",
    "javascript",
    "modules",
    "let",
    "example",
    "going",
    "go",
    "video",
    "description",
    "going",
    "open",
    "esm",
    "version",
    "see",
    "exact",
    "code",
    "creating",
    "function",
    "called",
    "hello",
    "except",
    "time",
    "added",
    "word",
    "export",
    "front",
    "function",
    "turns",
    "library",
    "esm",
    "version",
    "work",
    "javascript",
    "modules",
    "let",
    "use",
    "esm",
    "version",
    "code",
    "going",
    "go",
    "back",
    "code",
    "going",
    "use",
    "script",
    "tags",
    "load",
    "anymore",
    "let",
    "delete",
    "save",
    "checkout",
    "js",
    "top",
    "going",
    "use",
    "import",
    "import",
    "function",
    "code",
    "type",
    "import",
    "curly",
    "brackets",
    "import",
    "function",
    "hello",
    "going",
    "import",
    "string",
    "time",
    "instead",
    "giving",
    "file",
    "path",
    "like",
    "going",
    "give",
    "url",
    "contains",
    "code",
    "web",
    "page",
    "going",
    "rightclick",
    "copy",
    "url",
    "top",
    "inside",
    "code",
    "going",
    "rightclick",
    "paste",
    "import",
    "works",
    "way",
    "except",
    "codee",
    "coming",
    "internet",
    "rather",
    "one",
    "files",
    "let",
    "save",
    "go",
    "back",
    "project",
    "check",
    "console",
    "see",
    "everything",
    "still",
    "working",
    "use",
    "external",
    "libraries",
    "javascript",
    "modules",
    "together",
    "load",
    "esm",
    "version",
    "library",
    "use",
    "import",
    "normal",
    "except",
    "time",
    "importing",
    "code",
    "internet",
    "next",
    "let",
    "use",
    "djs",
    "javascript",
    "modules",
    "going",
    "load",
    "esm",
    "version",
    "djs",
    "going",
    "go",
    "video",
    "description",
    "click",
    "link",
    "djs",
    "esm",
    "version",
    "going",
    "load",
    "code",
    "project",
    "let",
    "go",
    "back",
    "codee",
    "first",
    "let",
    "open",
    "checkout",
    "html",
    "going",
    "remove",
    "script",
    "tag",
    "going",
    "load",
    "javascript",
    "modules",
    "let",
    "save",
    "go",
    "checkout",
    "js",
    "top",
    "going",
    "import",
    "djs",
    "esm",
    "version",
    "import",
    "going",
    "use",
    "slightly",
    "different",
    "syntax",
    "going",
    "type",
    "djs",
    "without",
    "curly",
    "brackets",
    "type",
    "string",
    "going",
    "give",
    "url",
    "contains",
    "code",
    "go",
    "browser",
    "click",
    "url",
    "top",
    "going",
    "right",
    "click",
    "copy",
    "code",
    "inside",
    "quotes",
    "rightclick",
    "paste",
    "save",
    "let",
    "open",
    "project",
    "take",
    "look",
    "console",
    "make",
    "sure",
    "works",
    "right",
    "click",
    "inspect",
    "console",
    "everything",
    "still",
    "working",
    "use",
    "djs",
    "external",
    "library",
    "javascript",
    "modules",
    "continue",
    "going",
    "learn",
    "new",
    "syntax",
    "used",
    "syntax",
    "called",
    "default",
    "export",
    "default",
    "export",
    "another",
    "way",
    "exporting",
    "something",
    "file",
    "use",
    "want",
    "export",
    "one",
    "thing",
    "file",
    "makes",
    "syntax",
    "little",
    "bit",
    "cleaner",
    "type",
    "curly",
    "brackets",
    "let",
    "example",
    "default",
    "export",
    "see",
    "works",
    "going",
    "open",
    "utils",
    "folder",
    "open",
    "money",
    "js",
    "bottom",
    "going",
    "create",
    "default",
    "export",
    "typing",
    "export",
    "default",
    "whatever",
    "want",
    "export",
    "let",
    "say",
    "want",
    "export",
    "function",
    "type",
    "name",
    "function",
    "format",
    "currency",
    "save",
    "import",
    "import",
    "name",
    "without",
    "curly",
    "brackets",
    "syntax",
    "little",
    "bit",
    "cleaner",
    "file",
    "one",
    "default",
    "export",
    "want",
    "export",
    "one",
    "thing",
    "file",
    "another",
    "syntax",
    "use",
    "people",
    "like",
    "using",
    "default",
    "exports",
    "feel",
    "exporting",
    "one",
    "thing",
    "file",
    "makes",
    "code",
    "cleaner",
    "however",
    "code",
    "version",
    "export",
    "want",
    "use",
    "let",
    "go",
    "back",
    "checkout",
    "js",
    "djs",
    "library",
    "exports",
    "one",
    "thing",
    "djs",
    "function",
    "chose",
    "use",
    "default",
    "export",
    "instead",
    "normal",
    "export",
    "using",
    "way",
    "syntax",
    "curly",
    "brackets",
    "called",
    "named",
    "export",
    "use",
    "external",
    "libraries",
    "future",
    "libraries",
    "use",
    "named",
    "exports",
    "like",
    "libraries",
    "use",
    "default",
    "export",
    "like",
    "useful",
    "know",
    "syntaxes",
    "use",
    "external",
    "libraries",
    "javascript",
    "modules",
    "together",
    "import",
    "esm",
    "version",
    "library",
    "keep",
    "mind",
    "every",
    "library",
    "esm",
    "version",
    "libraries",
    "still",
    "use",
    "script",
    "tag",
    "okay",
    "learned",
    "external",
    "libraries",
    "let",
    "practical",
    "examples",
    "going",
    "go",
    "back",
    "checkout",
    "page",
    "going",
    "use",
    "djs",
    "create",
    "delivery",
    "options",
    "way",
    "works",
    "select",
    "one",
    "three",
    "delivery",
    "options",
    "click",
    "option",
    "change",
    "delivery",
    "date",
    "change",
    "prices",
    "right",
    "side",
    "let",
    "get",
    "started",
    "always",
    "going",
    "three",
    "steps",
    "first",
    "going",
    "save",
    "data",
    "going",
    "generate",
    "html",
    "finally",
    "going",
    "make",
    "interactive",
    "first",
    "data",
    "need",
    "save",
    "section",
    "well",
    "delivery",
    "option",
    "delivery",
    "time",
    "like",
    "7",
    "days",
    "3",
    "days",
    "option",
    "also",
    "price",
    "right",
    "cart",
    "looks",
    "like",
    "could",
    "save",
    "delivery",
    "option",
    "details",
    "inside",
    "cart",
    "like",
    "however",
    "notice",
    "data",
    "gets",
    "duplicated",
    "product",
    "cart",
    "instead",
    "going",
    "save",
    "delivery",
    "options",
    "separately",
    "save",
    "id",
    "points",
    "delivery",
    "option",
    "reminder",
    "technique",
    "called",
    "normalizing",
    "data",
    "save",
    "delivery",
    "options",
    "separately",
    "save",
    "id",
    "points",
    "full",
    "delivery",
    "option",
    "let",
    "create",
    "data",
    "delivery",
    "options",
    "go",
    "code",
    "data",
    "folder",
    "let",
    "create",
    "new",
    "file",
    "going",
    "name",
    "file",
    "delivery",
    "options",
    "js",
    "press",
    "enter",
    "create",
    "list",
    "delivery",
    "options",
    "pick",
    "create",
    "variable",
    "const",
    "delivery",
    "options",
    "equals",
    "array",
    "want",
    "list",
    "delivery",
    "option",
    "going",
    "multiple",
    "values",
    "like",
    "time",
    "deliver",
    "well",
    "price",
    "going",
    "make",
    "object",
    "group",
    "values",
    "together",
    "going",
    "rearrange",
    "windows",
    "see",
    "data",
    "trying",
    "save",
    "actually",
    "close",
    "tabs",
    "let",
    "save",
    "data",
    "first",
    "delivery",
    "option",
    "first",
    "let",
    "give",
    "id",
    "property",
    "mentioned",
    "going",
    "save",
    "id",
    "cart",
    "going",
    "use",
    "id",
    "get",
    "full",
    "delivery",
    "option",
    "keep",
    "things",
    "simple",
    "let",
    "give",
    "string",
    "id",
    "one",
    "going",
    "give",
    "another",
    "property",
    "going",
    "save",
    "delivery",
    "time",
    "first",
    "option",
    "going",
    "take",
    "seven",
    "days",
    "deliver",
    "let",
    "create",
    "property",
    "delivery",
    "days",
    "colon",
    "7",
    "comma",
    "also",
    "going",
    "save",
    "price",
    "one",
    "free",
    "going",
    "save",
    "price",
    "cents",
    "zero",
    "remember",
    "best",
    "practice",
    "calculating",
    "money",
    "save",
    "cents",
    "next",
    "let",
    "save",
    "data",
    "second",
    "delivery",
    "option",
    "type",
    "comma",
    "another",
    "object",
    "let",
    "give",
    "id",
    "two",
    "time",
    "one",
    "going",
    "take",
    "three",
    "days",
    "deliver",
    "type",
    "delivery",
    "days",
    "colon",
    "3",
    "give",
    "price",
    "cents",
    "one",
    "finally",
    "going",
    "save",
    "data",
    "third",
    "delivery",
    "option",
    "comma",
    "another",
    "object",
    "id",
    "three",
    "one",
    "going",
    "take",
    "one",
    "day",
    "deliver",
    "type",
    "delivery",
    "days",
    "colon",
    "1",
    "comma",
    "price",
    "sense",
    "price",
    "sense",
    "999",
    "save",
    "created",
    "delivery",
    "options",
    "product",
    "cart",
    "going",
    "save",
    "id",
    "delivery",
    "option",
    "selected",
    "example",
    "selected",
    "first",
    "first",
    "option",
    "going",
    "save",
    "id",
    "one",
    "cart",
    "let",
    "go",
    "back",
    "code",
    "going",
    "open",
    "cart",
    "default",
    "cart",
    "going",
    "save",
    "delivery",
    "option",
    "id",
    "colon",
    "let",
    "say",
    "first",
    "product",
    "selected",
    "first",
    "delivery",
    "option",
    "going",
    "save",
    "id",
    "one",
    "second",
    "product",
    "also",
    "going",
    "save",
    "delivery",
    "option",
    "id",
    "colon",
    "let",
    "say",
    "second",
    "product",
    "chose",
    "second",
    "delivery",
    "option",
    "going",
    "give",
    "id",
    "two",
    "next",
    "add",
    "product",
    "cart",
    "also",
    "need",
    "give",
    "delivery",
    "option",
    "id",
    "scroll",
    "add",
    "cart",
    "function",
    "adding",
    "product",
    "cart",
    "add",
    "new",
    "product",
    "also",
    "want",
    "give",
    "delivery",
    "option",
    "id",
    "type",
    "delivery",
    "option",
    "id",
    "colon",
    "new",
    "products",
    "let",
    "give",
    "default",
    "delivery",
    "option",
    "one",
    "new",
    "products",
    "select",
    "first",
    "one",
    "let",
    "save",
    "lastly",
    "might",
    "cart",
    "saved",
    "local",
    "storage",
    "need",
    "add",
    "delivery",
    "option",
    "id",
    "local",
    "storage",
    "well",
    "keep",
    "things",
    "simple",
    "let",
    "shortcut",
    "going",
    "delete",
    "cart",
    "local",
    "storage",
    "go",
    "back",
    "using",
    "default",
    "value",
    "delivery",
    "option",
    "ids",
    "delete",
    "cart",
    "local",
    "storage",
    "going",
    "go",
    "page",
    "open",
    "console",
    "right",
    "click",
    "inspect",
    "console",
    "going",
    "type",
    "local",
    "storage",
    "remove",
    "item",
    "brackets",
    "cart",
    "press",
    "enter",
    "erase",
    "cart",
    "local",
    "storage",
    "use",
    "default",
    "values",
    "let",
    "go",
    "page",
    "refresh",
    "using",
    "default",
    "cart",
    "save",
    "data",
    "delivery",
    "options",
    "way",
    "rest",
    "course",
    "get",
    "error",
    "project",
    "code",
    "looks",
    "correct",
    "may",
    "bad",
    "data",
    "saved",
    "local",
    "storage",
    "fix",
    "try",
    "running",
    "local",
    "storage",
    "cle",
    "console",
    "remove",
    "everything",
    "local",
    "storage",
    "refresh",
    "page",
    "next",
    "step",
    "generate",
    "html",
    "first",
    "let",
    "find",
    "html",
    "delivery",
    "options",
    "rightclick",
    "part",
    "page",
    "inspect",
    "give",
    "us",
    "html",
    "part",
    "going",
    "find",
    "element",
    "represents",
    "part",
    "page",
    "one",
    "right",
    "div",
    "class",
    "delivery",
    "das",
    "options",
    "find",
    "code",
    "going",
    "search",
    "class",
    "let",
    "go",
    "back",
    "code",
    "going",
    "open",
    "checkout",
    "js",
    "right",
    "press",
    "crlf",
    "command",
    "f",
    "find",
    "code",
    "going",
    "look",
    "class",
    "delivery",
    "das",
    "options",
    "give",
    "us",
    "code",
    "right",
    "html",
    "delivery",
    "options",
    "instead",
    "writing",
    "html",
    "directly",
    "going",
    "generate",
    "javascript",
    "keep",
    "code",
    "organized",
    "let",
    "create",
    "function",
    "generating",
    "html",
    "scroll",
    "bottom",
    "create",
    "function",
    "let",
    "call",
    "delivery",
    "options",
    "html",
    "brackets",
    "curly",
    "brackets",
    "inside",
    "going",
    "three",
    "steps",
    "first",
    "going",
    "loop",
    "delivery",
    "options",
    "created",
    "earlier",
    "option",
    "going",
    "generate",
    "html",
    "finally",
    "going",
    "combine",
    "html",
    "together",
    "first",
    "let",
    "import",
    "delivery",
    "options",
    "top",
    "scroll",
    "going",
    "import",
    "curly",
    "brackets",
    "quotes",
    "going",
    "locate",
    "delivery",
    "options",
    "file",
    "inside",
    "data",
    "folder",
    "first",
    "need",
    "get",
    "scripts",
    "folder",
    "type",
    "dot",
    "slash",
    "go",
    "data",
    "folder",
    "slash",
    "delivery",
    "options",
    "js",
    "going",
    "import",
    "delivery",
    "options",
    "one",
    "thing",
    "forgot",
    "inside",
    "delivery",
    "options",
    "need",
    "make",
    "sure",
    "export",
    "variable",
    "going",
    "type",
    "export",
    "save",
    "go",
    "back",
    "checkout",
    "js",
    "going",
    "loop",
    "delivery",
    "options",
    "scroll",
    "back",
    "new",
    "function",
    "type",
    "delivery",
    "options",
    "brackets",
    "function",
    "inside",
    "name",
    "parameter",
    "delivery",
    "option",
    "delivery",
    "option",
    "going",
    "generate",
    "html",
    "let",
    "use",
    "template",
    "string",
    "save",
    "html",
    "going",
    "scroll",
    "going",
    "find",
    "class",
    "delivery",
    "das",
    "option",
    "html",
    "one",
    "delivery",
    "option",
    "going",
    "copy",
    "html",
    "java",
    "javascript",
    "right",
    "click",
    "copy",
    "inside",
    "string",
    "give",
    "new",
    "lines",
    "rightclick",
    "paste",
    "need",
    "reformat",
    "select",
    "lines",
    "press",
    "tab",
    "okay",
    "generating",
    "html",
    "instead",
    "using",
    "date",
    "every",
    "time",
    "going",
    "calculate",
    "date",
    "using",
    "djs",
    "insert",
    "calculate",
    "date",
    "going",
    "get",
    "today",
    "date",
    "first",
    "using",
    "djs",
    "let",
    "create",
    "variable",
    "const",
    "today",
    "equals",
    "according",
    "documentation",
    "get",
    "today",
    "date",
    "call",
    "djs",
    "function",
    "type",
    "djs",
    "brackets",
    "next",
    "delivery",
    "option",
    "takes",
    "certain",
    "amount",
    "days",
    "deliver",
    "need",
    "add",
    "today",
    "date",
    "method",
    "called",
    "add",
    "let",
    "create",
    "variable",
    "save",
    "result",
    "const",
    "delivery",
    "date",
    "equals",
    "today",
    "add",
    "brackets",
    "going",
    "give",
    "two",
    "parameters",
    "first",
    "parameter",
    "many",
    "dat",
    "days",
    "want",
    "add",
    "saved",
    "delivery",
    "option",
    "give",
    "delivery",
    "option",
    "dot",
    "delivery",
    "days",
    "comma",
    "give",
    "length",
    "time",
    "want",
    "add",
    "string",
    "days",
    "calculated",
    "correct",
    "delivery",
    "date",
    "need",
    "display",
    "easyto",
    "read",
    "format",
    "djs",
    "method",
    "called",
    "format",
    "let",
    "us",
    "let",
    "create",
    "variable",
    "const",
    "call",
    "date",
    "string",
    "make",
    "equal",
    "delivery",
    "date",
    "format",
    "brackets",
    "give",
    "string",
    "format",
    "want",
    "want",
    "insert",
    "day",
    "week",
    "according",
    "documentation",
    "use",
    "4ds",
    "comma",
    "space",
    "want",
    "insert",
    "month",
    "according",
    "documentation",
    "4",
    "capital",
    "finally",
    "going",
    "insert",
    "day",
    "month",
    "capital",
    "calculated",
    "date",
    "string",
    "going",
    "insert",
    "html",
    "instead",
    "using",
    "date",
    "every",
    "time",
    "remove",
    "insert",
    "date",
    "string",
    "next",
    "let",
    "insert",
    "price",
    "going",
    "different",
    "prices",
    "every",
    "time",
    "top",
    "let",
    "create",
    "variable",
    "const",
    "call",
    "price",
    "string",
    "make",
    "equals",
    "remember",
    "delivery",
    "option",
    "property",
    "price",
    "sense",
    "price",
    "ense",
    "zero",
    "want",
    "display",
    "text",
    "free",
    "price",
    "sense",
    "zero",
    "want",
    "display",
    "price",
    "dollars",
    "dash",
    "let",
    "practice",
    "using",
    "turner",
    "operator",
    "first",
    "check",
    "price",
    "sense",
    "zero",
    "type",
    "delivery",
    "option",
    "price",
    "sense",
    "triple",
    "equals",
    "z",
    "type",
    "new",
    "line",
    "question",
    "mark",
    "also",
    "new",
    "line",
    "colon",
    "remember",
    "way",
    "turner",
    "operator",
    "works",
    "first",
    "part",
    "returns",
    "true",
    "value",
    "whatever",
    "question",
    "mark",
    "first",
    "part",
    "false",
    "value",
    "whatever",
    "colon",
    "sort",
    "like",
    "statement",
    "except",
    "save",
    "result",
    "variable",
    "price",
    "sense",
    "zero",
    "means",
    "free",
    "want",
    "display",
    "text",
    "free",
    "create",
    "string",
    "free",
    "price",
    "sense",
    "zero",
    "want",
    "display",
    "price",
    "dollars",
    "going",
    "type",
    "template",
    "string",
    "dollar",
    "sign",
    "going",
    "insert",
    "price",
    "sents",
    "dollars",
    "type",
    "delivery",
    "option",
    "price",
    "sense",
    "display",
    "dollars",
    "already",
    "function",
    "called",
    "format",
    "currency",
    "front",
    "going",
    "type",
    "format",
    "currency",
    "open",
    "bracket",
    "close",
    "bracket",
    "end",
    "let",
    "add",
    "dash",
    "add",
    "space",
    "dash",
    "semicolon",
    "create",
    "price",
    "string",
    "delivery",
    "option",
    "let",
    "substitute",
    "html",
    "remove",
    "substitute",
    "price",
    "string",
    "save",
    "instead",
    "using",
    "values",
    "every",
    "time",
    "substituting",
    "values",
    "html",
    "finally",
    "let",
    "combine",
    "html",
    "together",
    "going",
    "scroll",
    "top",
    "outside",
    "loop",
    "going",
    "create",
    "variable",
    "save",
    "result",
    "let",
    "html",
    "equals",
    "empty",
    "string",
    "start",
    "every",
    "time",
    "loop",
    "going",
    "add",
    "html",
    "result",
    "going",
    "type",
    "html",
    "plus",
    "equals",
    "finally",
    "created",
    "html",
    "going",
    "return",
    "function",
    "bottom",
    "going",
    "return",
    "html",
    "save",
    "generated",
    "html",
    "delivery",
    "options",
    "let",
    "insert",
    "html",
    "instead",
    "creating",
    "html",
    "directly",
    "going",
    "delete",
    "going",
    "insert",
    "going",
    "run",
    "function",
    "generate",
    "going",
    "type",
    "delivery",
    "options",
    "html",
    "brackets",
    "save",
    "one",
    "thing",
    "missing",
    "function",
    "scroll",
    "using",
    "variable",
    "called",
    "matching",
    "product",
    "variable",
    "accessible",
    "inside",
    "function",
    "let",
    "actually",
    "pass",
    "matching",
    "product",
    "top",
    "going",
    "add",
    "parameter",
    "matching",
    "product",
    "call",
    "function",
    "going",
    "pass",
    "matching",
    "product",
    "matching",
    "product",
    "let",
    "save",
    "check",
    "page",
    "generating",
    "html",
    "delivery",
    "options",
    "notice",
    "delivery",
    "dates",
    "based",
    "today",
    "date",
    "watching",
    "video",
    "7",
    "days",
    "today",
    "7",
    "days",
    "watching",
    "video",
    "3",
    "days",
    "today",
    "3",
    "days",
    "watching",
    "video",
    "one",
    "day",
    "today",
    "one",
    "thing",
    "need",
    "fix",
    "selectors",
    "empty",
    "however",
    "want",
    "delivery",
    "option",
    "saved",
    "cart",
    "checked",
    "let",
    "go",
    "back",
    "code",
    "order",
    "make",
    "one",
    "selectors",
    "selected",
    "going",
    "scroll",
    "input",
    "element",
    "going",
    "add",
    "attribute",
    "called",
    "checked",
    "attribute",
    "makes",
    "selector",
    "checked",
    "however",
    "want",
    "delivery",
    "options",
    "checked",
    "want",
    "checked",
    "matches",
    "delivery",
    "option",
    "id",
    "saved",
    "cart",
    "let",
    "write",
    "code",
    "figure",
    "delivery",
    "option",
    "checked",
    "going",
    "create",
    "variable",
    "const",
    "checked",
    "equals",
    "want",
    "checked",
    "delivery",
    "options",
    "id",
    "matches",
    "delivery",
    "option",
    "id",
    "cart",
    "test",
    "delivery",
    "option",
    "id",
    "equal",
    "cart",
    "item",
    "delivery",
    "option",
    "id",
    "inside",
    "function",
    "actually",
    "access",
    "cart",
    "item",
    "let",
    "actually",
    "pass",
    "parameter",
    "cart",
    "item",
    "call",
    "function",
    "outer",
    "function",
    "access",
    "cart",
    "item",
    "going",
    "give",
    "cart",
    "item",
    "going",
    "put",
    "function",
    "use",
    "variable",
    "instead",
    "checked",
    "time",
    "going",
    "remove",
    "insert",
    "going",
    "use",
    "tary",
    "operator",
    "checked",
    "question",
    "mark",
    "colon",
    "also",
    "use",
    "ternary",
    "operator",
    "inserting",
    "string",
    "true",
    "going",
    "get",
    "value",
    "question",
    "mark",
    "checked",
    "going",
    "give",
    "value",
    "checked",
    "false",
    "going",
    "give",
    "value",
    "empty",
    "string",
    "thing",
    "attribute",
    "exist",
    "save",
    "notice",
    "correct",
    "delivery",
    "option",
    "checked",
    "product",
    "first",
    "product",
    "saved",
    "delivery",
    "option",
    "one",
    "second",
    "product",
    "say",
    "delivery",
    "option",
    "two",
    "finally",
    "let",
    "replace",
    "date",
    "top",
    "delivery",
    "date",
    "selected",
    "go",
    "back",
    "code",
    "scroll",
    "top",
    "see",
    "date",
    "code",
    "going",
    "calculate",
    "date",
    "using",
    "delivery",
    "option",
    "picked",
    "remember",
    "inside",
    "cart",
    "saved",
    "delivery",
    "option",
    "id",
    "let",
    "use",
    "get",
    "full",
    "delivery",
    "option",
    "top",
    "let",
    "get",
    "delivery",
    "option",
    "id",
    "cart",
    "const",
    "delivery",
    "option",
    "id",
    "equals",
    "cart",
    "item",
    "delivery",
    "option",
    "id",
    "next",
    "going",
    "use",
    "id",
    "find",
    "full",
    "delivery",
    "option",
    "something",
    "similar",
    "product",
    "id",
    "loop",
    "products",
    "found",
    "matching",
    "id",
    "saved",
    "variable",
    "let",
    "create",
    "variable",
    "store",
    "result",
    "let",
    "delivery",
    "option",
    "going",
    "loop",
    "delivery",
    "options",
    "delivery",
    "options",
    "brackets",
    "function",
    "let",
    "name",
    "parameter",
    "option",
    "use",
    "name",
    "delivery",
    "option",
    "going",
    "look",
    "matching",
    "id",
    "option",
    "id",
    "equal",
    "delivery",
    "option",
    "id",
    "going",
    "save",
    "inside",
    "variable",
    "delivery",
    "option",
    "equals",
    "option",
    "full",
    "delivery",
    "option",
    "code",
    "use",
    "get",
    "delivery",
    "days",
    "property",
    "calculate",
    "day",
    "need",
    "calculate",
    "state",
    "already",
    "wrote",
    "code",
    "bottom",
    "scroll",
    "code",
    "created",
    "delivery",
    "options",
    "calculated",
    "date",
    "delivery",
    "option",
    "reuse",
    "code",
    "let",
    "select",
    "code",
    "right",
    "click",
    "copy",
    "top",
    "get",
    "delivery",
    "option",
    "going",
    "rightclick",
    "paste",
    "code",
    "need",
    "reformat",
    "selecting",
    "lines",
    "press",
    "shift",
    "tab",
    "code",
    "take",
    "delivery",
    "option",
    "selected",
    "calculate",
    "delivery",
    "date",
    "need",
    "show",
    "instead",
    "using",
    "date",
    "every",
    "time",
    "going",
    "remove",
    "insert",
    "date",
    "string",
    "created",
    "date",
    "string",
    "save",
    "date",
    "string",
    "match",
    "delivery",
    "date",
    "chose",
    "right",
    "side",
    "generate",
    "html",
    "delivery",
    "options",
    "using",
    "djs",
    "external",
    "library",
    "let",
    "take",
    "look",
    "changes",
    "git",
    "go",
    "code",
    "open",
    "git",
    "section",
    "tell",
    "us",
    "cart",
    "js",
    "added",
    "delivery",
    "option",
    "ids",
    "cart",
    "well",
    "add",
    "cart",
    "file",
    "created",
    "list",
    "delivery",
    "options",
    "checkout",
    "js",
    "instead",
    "writing",
    "html",
    "directly",
    "generated",
    "money",
    "js",
    "learned",
    "default",
    "exports",
    "let",
    "type",
    "message",
    "describe",
    "changes",
    "save",
    "data",
    "generate",
    "html",
    "delivery",
    "options",
    "commit",
    "last",
    "step",
    "make",
    "interactive",
    "click",
    "delivery",
    "option",
    "need",
    "two",
    "things",
    "first",
    "need",
    "update",
    "delivery",
    "option",
    "id",
    "cart",
    "array",
    "number",
    "two",
    "need",
    "update",
    "page",
    "need",
    "update",
    "date",
    "match",
    "date",
    "select",
    "let",
    "start",
    "first",
    "step",
    "let",
    "create",
    "function",
    "updating",
    "delivery",
    "option",
    "cart",
    "going",
    "go",
    "code",
    "going",
    "open",
    "file",
    "called",
    "cart",
    "js",
    "modifying",
    "cart",
    "best",
    "practice",
    "put",
    "code",
    "inside",
    "file",
    "file",
    "contain",
    "code",
    "manages",
    "cart",
    "going",
    "scroll",
    "bottom",
    "going",
    "add",
    "new",
    "function",
    "let",
    "type",
    "function",
    "let",
    "name",
    "update",
    "delivery",
    "option",
    "brackets",
    "curly",
    "brackets",
    "update",
    "delivery",
    "option",
    "need",
    "know",
    "product",
    "want",
    "update",
    "well",
    "delivery",
    "option",
    "chose",
    "going",
    "need",
    "two",
    "things",
    "function",
    "product",
    "id",
    "delivery",
    "option",
    "id",
    "steps",
    "first",
    "going",
    "loop",
    "cart",
    "find",
    "product",
    "going",
    "update",
    "delivery",
    "option",
    "id",
    "product",
    "find",
    "product",
    "using",
    "product",
    "id",
    "already",
    "code",
    "scroll",
    "add",
    "cart",
    "function",
    "code",
    "takes",
    "product",
    "id",
    "finds",
    "matching",
    "product",
    "cart",
    "let",
    "make",
    "copy",
    "code",
    "going",
    "select",
    "right",
    "click",
    "copy",
    "paste",
    "new",
    "function",
    "right",
    "click",
    "paste",
    "give",
    "us",
    "card",
    "item",
    "matches",
    "product",
    "id",
    "save",
    "variable",
    "next",
    "card",
    "item",
    "property",
    "called",
    "delivery",
    "option",
    "id",
    "going",
    "update",
    "property",
    "type",
    "code",
    "matching",
    "item",
    "delivery",
    "op",
    "option",
    "id",
    "make",
    "equal",
    "delivery",
    "option",
    "id",
    "give",
    "function",
    "delivery",
    "option",
    "id",
    "lastly",
    "updated",
    "cart",
    "save",
    "local",
    "storage",
    "use",
    "function",
    "created",
    "earlier",
    "save",
    "storage",
    "brackets",
    "let",
    "save",
    "function",
    "let",
    "use",
    "checkout",
    "page",
    "first",
    "let",
    "export",
    "use",
    "another",
    "file",
    "going",
    "export",
    "function",
    "save",
    "open",
    "checkout",
    "js",
    "project",
    "need",
    "add",
    "event",
    "listeners",
    "delivery",
    "options",
    "run",
    "code",
    "click",
    "inside",
    "code",
    "going",
    "scroll",
    "html",
    "delivery",
    "option",
    "right",
    "going",
    "add",
    "class",
    "select",
    "using",
    "dom",
    "delivery",
    "option",
    "add",
    "event",
    "listener",
    "scroll",
    "add",
    "event",
    "listener",
    "using",
    "document",
    "query",
    "selector",
    "brackets",
    "string",
    "select",
    "class",
    "created",
    "using",
    "dot",
    "delivery",
    "option",
    "dot",
    "brackets",
    "function",
    "option",
    "going",
    "add",
    "event",
    "listener",
    "listen",
    "clicks",
    "let",
    "call",
    "options",
    "element",
    "elements",
    "going",
    "element",
    "addevent",
    "listener",
    "brackets",
    "going",
    "listen",
    "clicks",
    "comma",
    "going",
    "run",
    "function",
    "click",
    "said",
    "first",
    "thing",
    "update",
    "delivery",
    "option",
    "id",
    "cart",
    "let",
    "import",
    "function",
    "created",
    "earlier",
    "going",
    "scroll",
    "top",
    "already",
    "importing",
    "cart",
    "import",
    "something",
    "else",
    "going",
    "add",
    "comma",
    "going",
    "import",
    "function",
    "update",
    "delivery",
    "option",
    "let",
    "scroll",
    "back",
    "use",
    "use",
    "code",
    "click",
    "delivery",
    "option",
    "going",
    "update",
    "delivery",
    "option",
    "brackets",
    "said",
    "need",
    "give",
    "function",
    "two",
    "things",
    "product",
    "id",
    "want",
    "updated",
    "well",
    "delivery",
    "option",
    "id",
    "picked",
    "get",
    "two",
    "values",
    "answer",
    "scroll",
    "access",
    "product",
    "id",
    "also",
    "access",
    "delivery",
    "option",
    "id",
    "use",
    "data",
    "attributes",
    "attach",
    "element",
    "let",
    "create",
    "data",
    "attribute",
    "equals",
    "double",
    "quotes",
    "insert",
    "product",
    "id",
    "matching",
    "product",
    "id",
    "also",
    "going",
    "use",
    "data",
    "attribute",
    "delivery",
    "option",
    "delivery",
    "id",
    "equals",
    "double",
    "quotes",
    "going",
    "insert",
    "delivery",
    "option",
    "delivery",
    "option",
    "save",
    "next",
    "let",
    "scroll",
    "back",
    "going",
    "get",
    "values",
    "data",
    "attributes",
    "using",
    "const",
    "let",
    "use",
    "shorthand",
    "property",
    "practice",
    "curly",
    "brackets",
    "equals",
    "element",
    "data",
    "set",
    "data",
    "attributes",
    "going",
    "get",
    "product",
    "id",
    "comma",
    "well",
    "delivery",
    "option",
    "id",
    "reminder",
    "shorthand",
    "property",
    "thing",
    "code",
    "shortcut",
    "let",
    "save",
    "try",
    "project",
    "go",
    "back",
    "click",
    "second",
    "delivery",
    "option",
    "refresh",
    "page",
    "notice",
    "one",
    "checked",
    "date",
    "correct",
    "make",
    "section",
    "interactive",
    "update",
    "cart",
    "refresh",
    "page",
    "regenerate",
    "html",
    "based",
    "new",
    "cart",
    "let",
    "save",
    "code",
    "git",
    "go",
    "back",
    "open",
    "git",
    "section",
    "tell",
    "us",
    "cart",
    "js",
    "added",
    "function",
    "updating",
    "delivery",
    "option",
    "checkout",
    "js",
    "imported",
    "function",
    "bottom",
    "added",
    "event",
    "listeners",
    "data",
    "attributes",
    "use",
    "function",
    "update",
    "card",
    "let",
    "add",
    "message",
    "describe",
    "describing",
    "changes",
    "make",
    "delivery",
    "options",
    "interactive",
    "commit",
    "next",
    "select",
    "delivery",
    "option",
    "need",
    "update",
    "page",
    "right",
    "project",
    "click",
    "delivery",
    "option",
    "need",
    "refresh",
    "page",
    "text",
    "updated",
    "going",
    "work",
    "click",
    "want",
    "page",
    "update",
    "immediately",
    "far",
    "course",
    "way",
    "solve",
    "problem",
    "click",
    "going",
    "use",
    "dom",
    "get",
    "element",
    "update",
    "text",
    "directly",
    "however",
    "problem",
    "approach",
    "need",
    "update",
    "page",
    "one",
    "one",
    "later",
    "might",
    "lots",
    "places",
    "page",
    "need",
    "update",
    "example",
    "change",
    "delivery",
    "option",
    "also",
    "need",
    "change",
    "numbers",
    "right",
    "potentially",
    "lot",
    "things",
    "need",
    "update",
    "one",
    "one",
    "easy",
    "make",
    "mistake",
    "forget",
    "something",
    "going",
    "learn",
    "better",
    "way",
    "update",
    "page",
    "go",
    "back",
    "code",
    "let",
    "open",
    "checkout",
    "js",
    "notice",
    "scroll",
    "already",
    "code",
    "takes",
    "data",
    "generates",
    "html",
    "another",
    "way",
    "update",
    "page",
    "update",
    "data",
    "need",
    "rerun",
    "code",
    "regenerate",
    "html",
    "let",
    "give",
    "try",
    "first",
    "going",
    "put",
    "code",
    "inside",
    "function",
    "rerun",
    "going",
    "scroll",
    "top",
    "let",
    "put",
    "function",
    "typing",
    "function",
    "let",
    "call",
    "call",
    "render",
    "order",
    "summary",
    "brackets",
    "curly",
    "brackets",
    "word",
    "render",
    "means",
    "display",
    "page",
    "going",
    "call",
    "section",
    "order",
    "summary",
    "function",
    "display",
    "order",
    "summary",
    "page",
    "next",
    "going",
    "put",
    "code",
    "inside",
    "new",
    "function",
    "let",
    "remove",
    "curly",
    "bracket",
    "let",
    "actually",
    "select",
    "code",
    "going",
    "reformat",
    "pressing",
    "tab",
    "adding",
    "indent",
    "end",
    "going",
    "add",
    "back",
    "closed",
    "curly",
    "bracket",
    "finish",
    "function",
    "put",
    "code",
    "inside",
    "function",
    "bottom",
    "let",
    "run",
    "function",
    "still",
    "need",
    "run",
    "code",
    "start",
    "page",
    "going",
    "type",
    "render",
    "order",
    "summary",
    "brackets",
    "change",
    "anything",
    "running",
    "code",
    "function",
    "let",
    "save",
    "check",
    "everything",
    "still",
    "working",
    "good",
    "let",
    "go",
    "back",
    "code",
    "time",
    "update",
    "page",
    "instead",
    "using",
    "dom",
    "update",
    "page",
    "directly",
    "like",
    "going",
    "rerun",
    "code",
    "regenerate",
    "html",
    "update",
    "data",
    "going",
    "rerun",
    "code",
    "using",
    "render",
    "order",
    "summary",
    "brackets",
    "let",
    "save",
    "try",
    "let",
    "say",
    "start",
    "first",
    "delivery",
    "option",
    "click",
    "third",
    "delivery",
    "option",
    "notice",
    "date",
    "updates",
    "automatically",
    "click",
    "second",
    "delivery",
    "option",
    "updates",
    "automatically",
    "well",
    "better",
    "way",
    "keep",
    "page",
    "dat",
    "instead",
    "using",
    "dom",
    "changing",
    "html",
    "directly",
    "one",
    "one",
    "update",
    "data",
    "regenerate",
    "html",
    "let",
    "go",
    "back",
    "code",
    "two",
    "things",
    "want",
    "point",
    "notice",
    "put",
    "event",
    "listeners",
    "big",
    "function",
    "regenerating",
    "html",
    "essentially",
    "deleting",
    "previous",
    "html",
    "replacing",
    "need",
    "add",
    "event",
    "listeners",
    "second",
    "thing",
    "want",
    "point",
    "inside",
    "render",
    "order",
    "summary",
    "function",
    "call",
    "render",
    "order",
    "summary",
    "function",
    "actually",
    "call",
    "rerun",
    "feature",
    "called",
    "recursion",
    "useful",
    "function",
    "needs",
    "rerun",
    "code",
    "let",
    "save",
    "changes",
    "git",
    "open",
    "git",
    "section",
    "tell",
    "us",
    "checkout",
    "js",
    "basically",
    "moved",
    "code",
    "function",
    "bottom",
    "call",
    "function",
    "start",
    "page",
    "also",
    "call",
    "function",
    "select",
    "delivery",
    "option",
    "let",
    "add",
    "message",
    "describing",
    "changes",
    "regenerate",
    "html",
    "updating",
    "delivery",
    "option",
    "commit",
    "technique",
    "used",
    "update",
    "data",
    "regenerate",
    "html",
    "technique",
    "called",
    "mvc",
    "mvc",
    "stands",
    "model",
    "view",
    "controller",
    "popular",
    "technique",
    "software",
    "engineering",
    "mvc",
    "split",
    "code",
    "three",
    "parts",
    "first",
    "part",
    "model",
    "code",
    "saves",
    "manages",
    "data",
    "project",
    "code",
    "data",
    "folder",
    "called",
    "model",
    "code",
    "saves",
    "manages",
    "data",
    "second",
    "part",
    "mvc",
    "view",
    "code",
    "takes",
    "data",
    "displays",
    "page",
    "project",
    "open",
    "checkout",
    "js",
    "scroll",
    "top",
    "code",
    "takes",
    "data",
    "generates",
    "html",
    "code",
    "called",
    "view",
    "last",
    "part",
    "mvc",
    "controller",
    "runs",
    "code",
    "interact",
    "page",
    "project",
    "bottom",
    "event",
    "listeners",
    "would",
    "called",
    "controller",
    "something",
    "interact",
    "page",
    "view",
    "mvc",
    "divide",
    "code",
    "lo",
    "three",
    "parts",
    "interact",
    "loop",
    "first",
    "use",
    "model",
    "generate",
    "view",
    "code",
    "took",
    "model",
    "data",
    "cart",
    "generated",
    "html",
    "view",
    "interact",
    "view",
    "run",
    "controller",
    "bottom",
    "interact",
    "page",
    "run",
    "code",
    "controller",
    "update",
    "model",
    "inside",
    "controller",
    "updated",
    "data",
    "using",
    "function",
    "finally",
    "use",
    "updated",
    "model",
    "regenerate",
    "view",
    "code",
    "takes",
    "updated",
    "data",
    "regenerates",
    "htm",
    "ml",
    "regenerates",
    "view",
    "mvc",
    "works",
    "instead",
    "updating",
    "page",
    "directly",
    "dom",
    "update",
    "data",
    "regenerate",
    "html",
    "use",
    "mvc",
    "makes",
    "sure",
    "page",
    "always",
    "matches",
    "data",
    "mvc",
    "known",
    "design",
    "pattern",
    "way",
    "organize",
    "design",
    "code",
    "future",
    "might",
    "use",
    "technology",
    "called",
    "javascript",
    "framework",
    "build",
    "websites",
    "many",
    "javascript",
    "frameworks",
    "based",
    "mvc",
    "useful",
    "know",
    "works",
    "okay",
    "learned",
    "mvc",
    "design",
    "pattern",
    "let",
    "practical",
    "examples",
    "using",
    "mbc",
    "going",
    "open",
    "project",
    "checkout",
    "page",
    "going",
    "create",
    "payment",
    "section",
    "right",
    "start",
    "look",
    "code",
    "checkout",
    "js",
    "file",
    "notice",
    "already",
    "lot",
    "code",
    "instead",
    "adding",
    "even",
    "code",
    "file",
    "let",
    "actually",
    "split",
    "two",
    "different",
    "files",
    "one",
    "file",
    "responsible",
    "left",
    "section",
    "one",
    "file",
    "responsible",
    "right",
    "section",
    "keep",
    "code",
    "organized",
    "much",
    "code",
    "one",
    "file",
    "let",
    "go",
    "back",
    "let",
    "create",
    "two",
    "new",
    "files",
    "checkout",
    "page",
    "create",
    "file",
    "let",
    "call",
    "one",
    "order",
    "summary",
    "js",
    "press",
    "enter",
    "let",
    "create",
    "another",
    "file",
    "right",
    "section",
    "let",
    "call",
    "one",
    "payment",
    "summary",
    "js",
    "press",
    "enter",
    "files",
    "related",
    "checkout",
    "page",
    "let",
    "create",
    "folder",
    "group",
    "together",
    "create",
    "new",
    "folder",
    "let",
    "call",
    "checkout",
    "press",
    "enter",
    "going",
    "move",
    "two",
    "files",
    "new",
    "folder",
    "move",
    "move",
    "next",
    "let",
    "open",
    "checkout",
    "js",
    "let",
    "move",
    "code",
    "order",
    "summary",
    "press",
    "control",
    "command",
    "select",
    "code",
    "rightclick",
    "cut",
    "going",
    "rightclick",
    "paste",
    "things",
    "need",
    "fix",
    "first",
    "checkout",
    "html",
    "file",
    "still",
    "loading",
    "checkout",
    "js",
    "actually",
    "need",
    "run",
    "function",
    "inside",
    "checkout",
    "js",
    "instead",
    "inside",
    "let",
    "actually",
    "remove",
    "save",
    "going",
    "scroll",
    "top",
    "let",
    "export",
    "function",
    "run",
    "inside",
    "type",
    "export",
    "save",
    "inside",
    "checkout",
    "going",
    "import",
    "curly",
    "brackets",
    "render",
    "order",
    "summary",
    "function",
    "string",
    "locate",
    "file",
    "going",
    "type",
    "slir",
    "means",
    "start",
    "current",
    "folder",
    "go",
    "checkout",
    "folder",
    "checkout",
    "sl",
    "orderers",
    "summary",
    "js",
    "finally",
    "going",
    "run",
    "function",
    "load",
    "page",
    "render",
    "order",
    "summary",
    "brackets",
    "save",
    "another",
    "thing",
    "need",
    "fix",
    "open",
    "order",
    "summary",
    "moved",
    "file",
    "folder",
    "file",
    "paths",
    "need",
    "updated",
    "slash",
    "inside",
    "scripts",
    "folder",
    "ca",
    "find",
    "data",
    "folder",
    "anymore",
    "going",
    "cause",
    "error",
    "find",
    "data",
    "folder",
    "need",
    "get",
    "checkout",
    "folder",
    "need",
    "get",
    "scripts",
    "folder",
    "need",
    "get",
    "two",
    "folders",
    "add",
    "additional",
    "dot",
    "slash",
    "thing",
    "add",
    "another",
    "dot",
    "dot",
    "slash",
    "utils",
    "need",
    "get",
    "checkout",
    "folder",
    "utils",
    "folder",
    "change",
    "utils",
    "going",
    "go",
    "additional",
    "folder",
    "another",
    "dot",
    "dot",
    "slash",
    "save",
    "let",
    "check",
    "still",
    "works",
    "go",
    "project",
    "refresh",
    "try",
    "p",
    "still",
    "works",
    "still",
    "running",
    "code",
    "organized",
    "file",
    "let",
    "open",
    "git",
    "save",
    "changes",
    "going",
    "tell",
    "us",
    "removed",
    "code",
    "separated",
    "order",
    "summary",
    "file",
    "payment",
    "summary",
    "file",
    "going",
    "work",
    "next",
    "let",
    "type",
    "message",
    "describing",
    "changes",
    "move",
    "order",
    "summary",
    "file",
    "commit",
    "let",
    "start",
    "creating",
    "payment",
    "summary",
    "right",
    "side",
    "code",
    "let",
    "open",
    "payment",
    "summary",
    "js",
    "like",
    "order",
    "summary",
    "let",
    "put",
    "code",
    "function",
    "regenerate",
    "html",
    "need",
    "type",
    "function",
    "let",
    "call",
    "render",
    "payment",
    "summary",
    "brackets",
    "curly",
    "brackets",
    "let",
    "string",
    "payment",
    "summary",
    "make",
    "sure",
    "working",
    "save",
    "let",
    "export",
    "function",
    "run",
    "inside",
    "checkout",
    "js",
    "export",
    "save",
    "checkout",
    "js",
    "top",
    "going",
    "import",
    "curly",
    "brackets",
    "render",
    "payment",
    "summary",
    "function",
    "string",
    "current",
    "folder",
    "go",
    "checkout",
    "folder",
    "payment",
    "summary",
    "js",
    "file",
    "bottom",
    "going",
    "run",
    "function",
    "render",
    "payment",
    "summary",
    "brackets",
    "save",
    "let",
    "go",
    "back",
    "project",
    "open",
    "console",
    "rightclick",
    "inspect",
    "console",
    "see",
    "message",
    "payment",
    "summary",
    "know",
    "code",
    "working",
    "export",
    "working",
    "correctly",
    "let",
    "remove",
    "code",
    "actually",
    "build",
    "payment",
    "summary",
    "always",
    "going",
    "three",
    "steps",
    "save",
    "data",
    "generate",
    "html",
    "make",
    "interactive",
    "let",
    "start",
    "saving",
    "data",
    "mvc",
    "called",
    "model",
    "go",
    "project",
    "section",
    "data",
    "need",
    "calculate",
    "numbers",
    "let",
    "start",
    "calculating",
    "first",
    "number",
    "cost",
    "products",
    "calculate",
    "loop",
    "cart",
    "product",
    "cart",
    "multiply",
    "products",
    "price",
    "times",
    "quantity",
    "add",
    "everything",
    "together",
    "let",
    "convert",
    "steps",
    "code",
    "go",
    "project",
    "inside",
    "payment",
    "summary",
    "file",
    "first",
    "need",
    "get",
    "cart",
    "let",
    "import",
    "import",
    "curly",
    "brackets",
    "cart",
    "string",
    "locate",
    "cart",
    "js",
    "first",
    "go",
    "checkout",
    "folder",
    "slash",
    "go",
    "scripts",
    "folder",
    "slash",
    "data",
    "folder",
    "save",
    "going",
    "loop",
    "cart",
    "type",
    "cart",
    "brackets",
    "function",
    "let",
    "name",
    "parameter",
    "cart",
    "item",
    "cart",
    "item",
    "product",
    "id",
    "quantity",
    "need",
    "multiply",
    "product",
    "price",
    "times",
    "quantity",
    "first",
    "need",
    "use",
    "product",
    "id",
    "get",
    "full",
    "product",
    "details",
    "already",
    "code",
    "inside",
    "orders",
    "summary",
    "js",
    "scroll",
    "code",
    "takes",
    "product",
    "id",
    "finds",
    "matching",
    "product",
    "instead",
    "copy",
    "pasting",
    "code",
    "let",
    "actually",
    "put",
    "function",
    "reuse",
    "practice",
    "modules",
    "let",
    "select",
    "code",
    "rightclick",
    "copy",
    "first",
    "let",
    "go",
    "products",
    "js",
    "file",
    "top",
    "going",
    "create",
    "function",
    "reuse",
    "code",
    "let",
    "type",
    "function",
    "let",
    "name",
    "get",
    "product",
    "brackets",
    "curer",
    "brackets",
    "going",
    "give",
    "function",
    "product",
    "id",
    "looking",
    "let",
    "paste",
    "code",
    "copied",
    "earlier",
    "right",
    "click",
    "paste",
    "finds",
    "matching",
    "product",
    "using",
    "product",
    "id",
    "end",
    "function",
    "let",
    "return",
    "matching",
    "product",
    "use",
    "outside",
    "function",
    "let",
    "export",
    "function",
    "share",
    "across",
    "files",
    "export",
    "save",
    "first",
    "go",
    "order",
    "summary",
    "top",
    "let",
    "import",
    "function",
    "already",
    "importing",
    "product",
    "going",
    "import",
    "something",
    "else",
    "using",
    "comma",
    "get",
    "product",
    "function",
    "instead",
    "code",
    "going",
    "run",
    "function",
    "make",
    "equal",
    "get",
    "product",
    "run",
    "function",
    "need",
    "give",
    "function",
    "product",
    "id",
    "let",
    "give",
    "product",
    "id",
    "longer",
    "updating",
    "variable",
    "change",
    "let",
    "const",
    "save",
    "let",
    "go",
    "project",
    "make",
    "sure",
    "everything",
    "still",
    "working",
    "looks",
    "good",
    "let",
    "use",
    "function",
    "inside",
    "payment",
    "summary",
    "js",
    "thing",
    "import",
    "curly",
    "brackets",
    "get",
    "product",
    "function",
    "string",
    "go",
    "data",
    "folder",
    "sl",
    "sl",
    "data",
    "sl",
    "products",
    "js",
    "let",
    "run",
    "function",
    "get",
    "full",
    "product",
    "get",
    "product",
    "brackets",
    "cart",
    "item",
    "product",
    "id",
    "going",
    "give",
    "function",
    "cart",
    "item",
    "product",
    "id",
    "let",
    "save",
    "product",
    "variable",
    "use",
    "calculations",
    "con",
    "product",
    "equals",
    "get",
    "product",
    "said",
    "going",
    "multiply",
    "product",
    "price",
    "quantity",
    "product",
    "property",
    "called",
    "price",
    "sense",
    "going",
    "multiply",
    "cart",
    "item",
    "property",
    "quantity",
    "last",
    "step",
    "add",
    "together",
    "outside",
    "loop",
    "let",
    "create",
    "variable",
    "save",
    "result",
    "adding",
    "together",
    "let",
    "type",
    "let",
    "name",
    "product",
    "price",
    "sense",
    "equals",
    "make",
    "zero",
    "start",
    "every",
    "time",
    "loop",
    "cart",
    "going",
    "add",
    "variable",
    "type",
    "product",
    "price",
    "sense",
    "plus",
    "equals",
    "value",
    "calculate",
    "cost",
    "products",
    "bottom",
    "let",
    "product",
    "price",
    "sense",
    "make",
    "sure",
    "working",
    "save",
    "project",
    "going",
    "check",
    "console",
    "give",
    "us",
    "number",
    "number",
    "match",
    "number",
    "page",
    "except",
    "sense",
    "assuming",
    "also",
    "two",
    "socks",
    "one",
    "basketball",
    "cart",
    "okay",
    "calculate",
    "first",
    "number",
    "let",
    "calculate",
    "second",
    "number",
    "cost",
    "shipping",
    "calculate",
    "going",
    "loop",
    "cart",
    "add",
    "shipping",
    "costs",
    "together",
    "let",
    "go",
    "code",
    "already",
    "looping",
    "cart",
    "instead",
    "creating",
    "another",
    "loop",
    "let",
    "calculate",
    "shipping",
    "cost",
    "loop",
    "let",
    "create",
    "new",
    "lines",
    "card",
    "item",
    "property",
    "delivery",
    "option",
    "id",
    "need",
    "use",
    "id",
    "get",
    "full",
    "delivery",
    "option",
    "price",
    "order",
    "summary",
    "also",
    "code",
    "takes",
    "delivery",
    "option",
    "id",
    "finds",
    "full",
    "delivery",
    "option",
    "let",
    "create",
    "function",
    "share",
    "reuse",
    "code",
    "first",
    "let",
    "select",
    "code",
    "write",
    "click",
    "copy",
    "let",
    "go",
    "delivery",
    "options",
    "js",
    "file",
    "bottom",
    "create",
    "function",
    "let",
    "call",
    "get",
    "delivery",
    "option",
    "brackets",
    "curly",
    "brackets",
    "give",
    "function",
    "delivery",
    "option",
    "id",
    "inside",
    "rightclick",
    "paste",
    "code",
    "copied",
    "earlier",
    "take",
    "id",
    "get",
    "delivery",
    "option",
    "array",
    "let",
    "return",
    "return",
    "delivery",
    "option",
    "use",
    "outside",
    "function",
    "safe",
    "let",
    "also",
    "give",
    "default",
    "value",
    "find",
    "delivery",
    "option",
    "use",
    "default",
    "operator",
    "let",
    "make",
    "default",
    "value",
    "first",
    "delivery",
    "option",
    "delivery",
    "options",
    "square",
    "bracket",
    "0",
    "let",
    "export",
    "save",
    "inside",
    "order",
    "summary",
    "use",
    "function",
    "top",
    "already",
    "importing",
    "delivery",
    "options",
    "type",
    "comma",
    "get",
    "delivery",
    "option",
    "instead",
    "running",
    "code",
    "select",
    "make",
    "equal",
    "run",
    "function",
    "get",
    "delivery",
    "option",
    "brackets",
    "give",
    "delivery",
    "option",
    "id",
    "delivery",
    "option",
    "id",
    "change",
    "let",
    "const",
    "since",
    "changing",
    "variable",
    "let",
    "save",
    "let",
    "use",
    "function",
    "inside",
    "payment",
    "summary",
    "well",
    "top",
    "import",
    "curly",
    "brackets",
    "get",
    "delivery",
    "option",
    "function",
    "quotes",
    "data",
    "folder",
    "slash",
    "data",
    "slash",
    "delivery",
    "options",
    "js",
    "file",
    "run",
    "function",
    "get",
    "delivery",
    "option",
    "brackets",
    "cart",
    "item",
    "delivery",
    "option",
    "id",
    "put",
    "function",
    "cart",
    "item",
    "delivery",
    "option",
    "id",
    "let",
    "save",
    "variable",
    "con",
    "delivery",
    "option",
    "equals",
    "get",
    "price",
    "delivery",
    "option",
    "using",
    "delivery",
    "option",
    "price",
    "sense",
    "property",
    "finally",
    "going",
    "add",
    "together",
    "top",
    "let",
    "create",
    "variable",
    "save",
    "result",
    "let",
    "call",
    "ship",
    "shipping",
    "price",
    "cents",
    "equals",
    "zero",
    "loop",
    "cart",
    "going",
    "shipping",
    "price",
    "sents",
    "plus",
    "equals",
    "delivery",
    "options",
    "price",
    "let",
    "also",
    "make",
    "sure",
    "working",
    "shipping",
    "price",
    "cents",
    "save",
    "let",
    "go",
    "project",
    "check",
    "console",
    "value",
    "adding",
    "two",
    "numbers",
    "together",
    "sense",
    "calculate",
    "second",
    "number",
    "shipping",
    "price",
    "note",
    "number",
    "practice",
    "number",
    "right",
    "actual",
    "shipping",
    "price",
    "total",
    "adding",
    "sh",
    "shipping",
    "prices",
    "together",
    "next",
    "number",
    "need",
    "calculate",
    "total",
    "tax",
    "let",
    "adding",
    "two",
    "numbers",
    "together",
    "inside",
    "code",
    "let",
    "remove",
    "console",
    "logs",
    "create",
    "const",
    "total",
    "tax",
    "sense",
    "make",
    "equal",
    "add",
    "two",
    "together",
    "product",
    "price",
    "sense",
    "plus",
    "shipping",
    "price",
    "sense",
    "next",
    "number",
    "tax",
    "going",
    "calculate",
    "10",
    "tax",
    "number",
    "calculate",
    "10",
    "something",
    "multiply",
    "10",
    "100",
    "percent",
    "means",
    "10",
    "id",
    "100",
    "also",
    "equal",
    "also",
    "multiply",
    "number",
    "let",
    "go",
    "code",
    "create",
    "variable",
    "const",
    "tax",
    "sense",
    "make",
    "equal",
    "total",
    "tax",
    "sense",
    "times",
    "10",
    "finally",
    "calculate",
    "total",
    "going",
    "add",
    "two",
    "numbers",
    "together",
    "const",
    "total",
    "sense",
    "equals",
    "total",
    "tax",
    "sense",
    "plus",
    "tax",
    "sense",
    "calculate",
    "numbers",
    "payment",
    "summary",
    "data",
    "need",
    "next",
    "going",
    "generate",
    "html",
    "mvc",
    "called",
    "view",
    "bottom",
    "let",
    "create",
    "variable",
    "store",
    "html",
    "const",
    "payment",
    "summary",
    "html",
    "make",
    "make",
    "equal",
    "template",
    "string",
    "inside",
    "going",
    "copy",
    "paste",
    "html",
    "let",
    "open",
    "checkout",
    "html",
    "going",
    "scroll",
    "find",
    "class",
    "payment",
    "summary",
    "going",
    "generate",
    "html",
    "inside",
    "let",
    "actually",
    "select",
    "html",
    "move",
    "javascript",
    "select",
    "button",
    "rightclick",
    "cut",
    "remove",
    "new",
    "line",
    "save",
    "inside",
    "payment",
    "summary",
    "inside",
    "screen",
    "rightclick",
    "paste",
    "html",
    "need",
    "reformat",
    "select",
    "lines",
    "press",
    "tab",
    "times",
    "reformat",
    "save",
    "next",
    "instead",
    "using",
    "numbers",
    "every",
    "time",
    "going",
    "take",
    "numbers",
    "calculated",
    "insert",
    "html",
    "string",
    "instead",
    "every",
    "time",
    "going",
    "insert",
    "product",
    "price",
    "sense",
    "let",
    "give",
    "new",
    "lines",
    "make",
    "little",
    "easier",
    "read",
    "remember",
    "number",
    "sense",
    "want",
    "display",
    "dollars",
    "already",
    "function",
    "utils",
    "money",
    "js",
    "file",
    "function",
    "format",
    "currency",
    "displays",
    "dollars",
    "let",
    "use",
    "function",
    "inside",
    "payment",
    "summary",
    "top",
    "let",
    "import",
    "function",
    "first",
    "import",
    "curly",
    "brackets",
    "format",
    "currency",
    "function",
    "str",
    "locate",
    "folder",
    "go",
    "checkout",
    "folder",
    "uil",
    "folder",
    "sl",
    "numbers",
    "one",
    "shipping",
    "price",
    "insert",
    "format",
    "currency",
    "brackets",
    "shipping",
    "price",
    "sents",
    "let",
    "give",
    "new",
    "lines",
    "make",
    "little",
    "easier",
    "read",
    "next",
    "let",
    "insert",
    "total",
    "tax",
    "remove",
    "number",
    "insert",
    "format",
    "currency",
    "bracket",
    "gets",
    "total",
    "tax",
    "sents",
    "new",
    "lines",
    "next",
    "tax",
    "remove",
    "insert",
    "format",
    "currency",
    "brackets",
    "tax",
    "sents",
    "enter",
    "new",
    "lines",
    "finally",
    "total",
    "remove",
    "insert",
    "format",
    "currency",
    "brackets",
    "total",
    "sense",
    "add",
    "new",
    "lines",
    "save",
    "continue",
    "actually",
    "learned",
    "small",
    "issue",
    "format",
    "currency",
    "function",
    "let",
    "open",
    "money",
    "js",
    "file",
    "recently",
    "learned",
    "two",
    "fixed",
    "method",
    "small",
    "issue",
    "rounding",
    "numbers",
    "end",
    "five",
    "wo",
    "round",
    "number",
    "properly",
    "one",
    "way",
    "fix",
    "issue",
    "round",
    "price",
    "sense",
    "first",
    "method",
    "rounding",
    "front",
    "let",
    "type",
    "open",
    "bracket",
    "close",
    "bracket",
    "tricky",
    "issue",
    "discovered",
    "help",
    "ai",
    "recently",
    "need",
    "add",
    "little",
    "bit",
    "code",
    "fix",
    "let",
    "save",
    "file",
    "go",
    "back",
    "payment",
    "summary",
    "generated",
    "html",
    "inserted",
    "numbers",
    "let",
    "put",
    "html",
    "page",
    "inside",
    "checkout",
    "html",
    "let",
    "give",
    "payment",
    "summary",
    "another",
    "class",
    "payment",
    "das",
    "summary",
    "select",
    "using",
    "dom",
    "let",
    "save",
    "file",
    "inside",
    "payment",
    "summary",
    "bottom",
    "create",
    "html",
    "going",
    "document",
    "query",
    "selector",
    "brackets",
    "string",
    "select",
    "payment",
    "summary",
    "get",
    "element",
    "change",
    "html",
    "inside",
    "element",
    "using",
    "inner",
    "capital",
    "h",
    "html",
    "make",
    "equal",
    "payment",
    "summary",
    "html",
    "created",
    "let",
    "save",
    "check",
    "project",
    "numbers",
    "right",
    "match",
    "cart",
    "delivery",
    "options",
    "selected",
    "generate",
    "html",
    "section",
    "let",
    "save",
    "changes",
    "git",
    "open",
    "git",
    "tell",
    "us",
    "checkout",
    "html",
    "removed",
    "html",
    "created",
    "manually",
    "delivery",
    "options",
    "js",
    "created",
    "shared",
    "function",
    "finding",
    "full",
    "delivery",
    "option",
    "thing",
    "products",
    "js",
    "finding",
    "full",
    "product",
    "inside",
    "checkout",
    "js",
    "running",
    "code",
    "inside",
    "payment",
    "summary",
    "order",
    "summary",
    "using",
    "shared",
    "functions",
    "created",
    "payment",
    "summary",
    "calculated",
    "numbers",
    "generated",
    "html",
    "finally",
    "money",
    "js",
    "fixed",
    "small",
    "bug",
    "related",
    "rounding",
    "let",
    "type",
    "message",
    "describe",
    "changes",
    "save",
    "data",
    "generate",
    "html",
    "payment",
    "summary",
    "commit",
    "last",
    "step",
    "make",
    "interactive",
    "mvc",
    "called",
    "controller",
    "let",
    "go",
    "project",
    "one",
    "thing",
    "make",
    "interactive",
    "section",
    "place",
    "order",
    "button",
    "however",
    "figured",
    "orders",
    "work",
    "yet",
    "work",
    "next",
    "lesson",
    "another",
    "thing",
    "make",
    "interactive",
    "however",
    "change",
    "cart",
    "left",
    "prices",
    "also",
    "update",
    "let",
    "make",
    "interactive",
    "first",
    "delete",
    "product",
    "prices",
    "update",
    "let",
    "actually",
    "practice",
    "using",
    "mvc",
    "create",
    "functionality",
    "according",
    "mvc",
    "click",
    "delete",
    "update",
    "data",
    "regenerate",
    "html",
    "let",
    "get",
    "started",
    "go",
    "code",
    "delete",
    "link",
    "order",
    "summary",
    "section",
    "code",
    "let",
    "open",
    "orders",
    "summary",
    "js",
    "file",
    "scroll",
    "find",
    "event",
    "listener",
    "delete",
    "link",
    "right",
    "click",
    "delete",
    "first",
    "going",
    "update",
    "data",
    "already",
    "update",
    "data",
    "using",
    "function",
    "remove",
    "cart",
    "next",
    "step",
    "according",
    "mbc",
    "regenerate",
    "html",
    "regenerate",
    "html",
    "payment",
    "summary",
    "created",
    "function",
    "top",
    "render",
    "payment",
    "summary",
    "recalculate",
    "numbers",
    "regenerate",
    "html",
    "let",
    "import",
    "function",
    "order",
    "summary",
    "js",
    "scroll",
    "top",
    "import",
    "curly",
    "brackets",
    "render",
    "payment",
    "summary",
    "function",
    "string",
    "locate",
    "payment",
    "summary",
    "file",
    "folder",
    "going",
    "start",
    "slash",
    "current",
    "folder",
    "payment",
    "summary",
    "js",
    "file",
    "let",
    "use",
    "function",
    "event",
    "listener",
    "let",
    "scroll",
    "click",
    "delete",
    "going",
    "update",
    "data",
    "regenerate",
    "html",
    "using",
    "render",
    "payment",
    "summary",
    "brackets",
    "let",
    "save",
    "go",
    "project",
    "focus",
    "numbers",
    "right",
    "let",
    "click",
    "delete",
    "notice",
    "numbers",
    "updated",
    "match",
    "new",
    "another",
    "example",
    "using",
    "mvc",
    "click",
    "delete",
    "instead",
    "using",
    "dom",
    "change",
    "numbers",
    "one",
    "one",
    "update",
    "data",
    "regenerate",
    "html",
    "mvc",
    "makes",
    "sure",
    "html",
    "always",
    "matches",
    "data",
    "view",
    "always",
    "matches",
    "model",
    "let",
    "one",
    "last",
    "example",
    "nbc",
    "lesson",
    "change",
    "delivery",
    "options",
    "also",
    "want",
    "numbers",
    "right",
    "update",
    "let",
    "find",
    "code",
    "delivery",
    "options",
    "order",
    "summary",
    "section",
    "code",
    "open",
    "orders",
    "summary",
    "js",
    "scroll",
    "updated",
    "data",
    "going",
    "regenerate",
    "html",
    "payment",
    "summary",
    "using",
    "render",
    "payment",
    "summary",
    "brackets",
    "let",
    "save",
    "look",
    "project",
    "let",
    "try",
    "changing",
    "delivery",
    "option",
    "notice",
    "numbers",
    "right",
    "update",
    "automatically",
    "match",
    "cart",
    "finished",
    "checkout",
    "page",
    "let",
    "save",
    "code",
    "git",
    "go",
    "git",
    "section",
    "inside",
    "order",
    "summary",
    "basically",
    "imported",
    "render",
    "payment",
    "summary",
    "function",
    "bottom",
    "used",
    "mvc",
    "click",
    "delete",
    "update",
    "data",
    "model",
    "regenerate",
    "html",
    "regenerate",
    "view",
    "thing",
    "click",
    "delivery",
    "option",
    "update",
    "data",
    "regenerate",
    "html",
    "last",
    "thing",
    "going",
    "top",
    "file",
    "going",
    "remove",
    "practice",
    "code",
    "use",
    "learn",
    "external",
    "libraries",
    "let",
    "open",
    "orders",
    "summary",
    "js",
    "top",
    "going",
    "remove",
    "code",
    "save",
    "let",
    "go",
    "back",
    "get",
    "looks",
    "good",
    "finally",
    "let",
    "type",
    "message",
    "describing",
    "changes",
    "make",
    "payment",
    "summary",
    "interactive",
    "commit",
    "end",
    "lesson",
    "lesson",
    "learned",
    "external",
    "libraries",
    "code",
    "outside",
    "project",
    "learned",
    "djs",
    "external",
    "library",
    "helps",
    "us",
    "work",
    "dates",
    "also",
    "learned",
    "use",
    "external",
    "libraries",
    "javascript",
    "modules",
    "together",
    "well",
    "default",
    "export",
    "syntax",
    "created",
    "delivery",
    "section",
    "checkout",
    "page",
    "learned",
    "mbc",
    "better",
    "way",
    "design",
    "code",
    "created",
    "payment",
    "section",
    "checkout",
    "page",
    "thanks",
    "watching",
    "course",
    "far",
    "want",
    "support",
    "channel",
    "check",
    "premium",
    "version",
    "courses",
    "like",
    "one",
    "get",
    "certificate",
    "completion",
    "better",
    "learning",
    "platform",
    "interested",
    "extra",
    "videos",
    "videos",
    "behind",
    "scenes",
    "content",
    "check",
    "links",
    "also",
    "support",
    "channel",
    "liking",
    "video",
    "subscribing",
    "sharing",
    "video",
    "others",
    "thanks",
    "let",
    "continue",
    "course",
    "exercises",
    "help",
    "practice",
    "learned",
    "lesson",
    "e",
    "rest",
    "course",
    "get",
    "error",
    "project",
    "code",
    "looks",
    "correct",
    "may",
    "bad",
    "data",
    "saved",
    "local",
    "storage",
    "fix",
    "try",
    "running",
    "local",
    "storage",
    "cle",
    "console",
    "remove",
    "everything",
    "local",
    "storage",
    "refresh",
    "page",
    "see",
    "error",
    "like",
    "object",
    "object",
    "means",
    "saved",
    "something",
    "directly",
    "local",
    "storage",
    "first",
    "check",
    "code",
    "make",
    "sure",
    "always",
    "stringifying",
    "saving",
    "local",
    "storage",
    "clear",
    "local",
    "storage",
    "refresh",
    "page",
    "lesson",
    "going",
    "learn",
    "test",
    "code",
    "writing",
    "code",
    "important",
    "test",
    "code",
    "see",
    "working",
    "correctly",
    "working",
    "company",
    "future",
    "also",
    "expected",
    "test",
    "code",
    "let",
    "learn",
    "lesson",
    "easiest",
    "way",
    "test",
    "code",
    "open",
    "website",
    "try",
    "code",
    "example",
    "code",
    "let",
    "open",
    "file",
    "utils",
    "server",
    "website",
    "couple",
    "prices",
    "well",
    "created",
    "prices",
    "using",
    "function",
    "format",
    "currency",
    "look",
    "website",
    "see",
    "prices",
    "look",
    "correct",
    "tells",
    "us",
    "function",
    "format",
    "currency",
    "working",
    "correctly",
    "one",
    "way",
    "test",
    "function",
    "open",
    "website",
    "try",
    "called",
    "manual",
    "testing",
    "manually",
    "open",
    "website",
    "try",
    "code",
    "manual",
    "testing",
    "really",
    "useful",
    "quickly",
    "checking",
    "see",
    "everything",
    "working",
    "let",
    "talk",
    "disadvantages",
    "manual",
    "testing",
    "one",
    "disadvantage",
    "hard",
    "test",
    "every",
    "situation",
    "example",
    "happen",
    "number",
    "295",
    "test",
    "however",
    "want",
    "test",
    "different",
    "numbers",
    "like",
    "number",
    "zero",
    "number",
    "requires",
    "rounding",
    "like",
    "order",
    "test",
    "situations",
    "manually",
    "set",
    "website",
    "code",
    "runs",
    "numbers",
    "ran",
    "2095",
    "well",
    "zero",
    "covered",
    "situations",
    "however",
    "cover",
    "bunch",
    "setup",
    "order",
    "test",
    "situation",
    "see",
    "takes",
    "lot",
    "time",
    "effort",
    "test",
    "different",
    "situations",
    "code",
    "second",
    "disadvantage",
    "manual",
    "testing",
    "hard",
    "retest",
    "code",
    "example",
    "change",
    "code",
    "retest",
    "format",
    "currency",
    "make",
    "sure",
    "still",
    "working",
    "correctly",
    "well",
    "would",
    "open",
    "website",
    "set",
    "situations",
    "retest",
    "situations",
    "manually",
    "takes",
    "much",
    "time",
    "effort",
    "retest",
    "code",
    "solve",
    "two",
    "problems",
    "going",
    "learn",
    "another",
    "way",
    "test",
    "code",
    "called",
    "automated",
    "testing",
    "automated",
    "testing",
    "basically",
    "means",
    "using",
    "code",
    "test",
    "code",
    "instead",
    "manually",
    "opening",
    "website",
    "clicking",
    "around",
    "try",
    "code",
    "going",
    "tell",
    "computer",
    "tests",
    "us",
    "save",
    "lot",
    "time",
    "effort",
    "let",
    "go",
    "ahead",
    "create",
    "first",
    "automated",
    "test",
    "going",
    "go",
    "back",
    "code",
    "let",
    "test",
    "format",
    "currency",
    "function",
    "create",
    "automated",
    "test",
    "going",
    "write",
    "code",
    "test",
    "function",
    "first",
    "let",
    "create",
    "folder",
    "group",
    "test",
    "code",
    "together",
    "going",
    "click",
    "icon",
    "create",
    "folder",
    "let",
    "name",
    "tests",
    "press",
    "enter",
    "going",
    "move",
    "folder",
    "drag",
    "top",
    "level",
    "beside",
    "html",
    "files",
    "want",
    "test",
    "folder",
    "beside",
    "scripts",
    "folder",
    "next",
    "let",
    "click",
    "test",
    "folder",
    "going",
    "create",
    "first",
    "test",
    "file",
    "click",
    "going",
    "test",
    "format",
    "currency",
    "inside",
    "money",
    "know",
    "file",
    "contains",
    "tests",
    "money",
    "js",
    "let",
    "press",
    "enter",
    "inside",
    "file",
    "going",
    "write",
    "code",
    "test",
    "format",
    "currency",
    "first",
    "let",
    "import",
    "format",
    "currency",
    "test",
    "top",
    "type",
    "import",
    "curly",
    "brackets",
    "format",
    "currency",
    "string",
    "going",
    "locate",
    "money",
    "js",
    "start",
    "money",
    "need",
    "get",
    "test",
    "folder",
    "type",
    "slash",
    "get",
    "folder",
    "go",
    "scripts",
    "folder",
    "scripts",
    "slash",
    "utils",
    "folder",
    "utils",
    "slash",
    "locat",
    "money",
    "js",
    "reminder",
    "format",
    "currency",
    "takes",
    "number",
    "cents",
    "like",
    "295",
    "cents",
    "converts",
    "dollars",
    "like",
    "first",
    "let",
    "test",
    "function",
    "using",
    "number",
    "2095",
    "example",
    "going",
    "run",
    "function",
    "format",
    "currency",
    "brackets",
    "give",
    "295",
    "going",
    "check",
    "result",
    "function",
    "correct",
    "use",
    "statement",
    "type",
    "open",
    "bracket",
    "close",
    "bracket",
    "said",
    "expect",
    "format",
    "currency",
    "295",
    "give",
    "us",
    "string",
    "20959",
    "curly",
    "brackets",
    "two",
    "equal",
    "means",
    "code",
    "working",
    "correctly",
    "going",
    "console",
    "log",
    "string",
    "passed",
    "say",
    "test",
    "passed",
    "equal",
    "failed",
    "save",
    "first",
    "automated",
    "test",
    "checks",
    "result",
    "function",
    "correct",
    "correct",
    "going",
    "display",
    "past",
    "correct",
    "going",
    "display",
    "failed",
    "let",
    "run",
    "test",
    "code",
    "remember",
    "ca",
    "run",
    "javascript",
    "files",
    "directly",
    "need",
    "load",
    "javascript",
    "file",
    "using",
    "html",
    "file",
    "let",
    "create",
    "html",
    "file",
    "run",
    "test",
    "inside",
    "test",
    "folder",
    "going",
    "create",
    "new",
    "file",
    "clicking",
    "let",
    "name",
    "file",
    "tests",
    "html",
    "press",
    "enter",
    "going",
    "start",
    "creating",
    "basic",
    "html",
    "structure",
    "reminder",
    "top",
    "type",
    "less",
    "exclamation",
    "dock",
    "type",
    "space",
    "html",
    "greater",
    "create",
    "html",
    "element",
    "inside",
    "create",
    "head",
    "element",
    "well",
    "body",
    "element",
    "inside",
    "body",
    "going",
    "create",
    "script",
    "tag",
    "run",
    "javascript",
    "code",
    "going",
    "give",
    "script",
    "tag",
    "attribute",
    "called",
    "src",
    "source",
    "equals",
    "double",
    "quotes",
    "going",
    "give",
    "javascript",
    "file",
    "run",
    "money",
    "also",
    "file",
    "uses",
    "import",
    "also",
    "need",
    "add",
    "attribute",
    "called",
    "type",
    "equals",
    "modules",
    "give",
    "file",
    "access",
    "javascript",
    "module",
    "features",
    "like",
    "import",
    "let",
    "save",
    "going",
    "run",
    "file",
    "live",
    "server",
    "going",
    "click",
    "rightclick",
    "open",
    "live",
    "server",
    "going",
    "check",
    "console",
    "right",
    "clicking",
    "inspect",
    "open",
    "console",
    "code",
    "display",
    "text",
    "passed",
    "look",
    "code",
    "open",
    "money",
    "telling",
    "us",
    "result",
    "function",
    "matched",
    "expected",
    "test",
    "passed",
    "run",
    "automated",
    "test",
    "load",
    "like",
    "normal",
    "javascript",
    "see",
    "automated",
    "tests",
    "pretty",
    "straightforward",
    "using",
    "code",
    "test",
    "code",
    "okay",
    "mentioned",
    "earlier",
    "disadvantage",
    "manual",
    "testing",
    "hard",
    "test",
    "every",
    "situation",
    "let",
    "solve",
    "problem",
    "using",
    "automated",
    "tests",
    "inside",
    "money",
    "want",
    "test",
    "format",
    "currency",
    "different",
    "situations",
    "different",
    "numbers",
    "add",
    "tests",
    "bottom",
    "bottom",
    "let",
    "create",
    "new",
    "lines",
    "add",
    "another",
    "test",
    "using",
    "brackets",
    "curly",
    "brackets",
    "inside",
    "let",
    "test",
    "format",
    "currency",
    "number",
    "zero",
    "type",
    "format",
    "currency",
    "brackets",
    "0",
    "expect",
    "result",
    "string",
    "0",
    "check",
    "triple",
    "equals",
    "string",
    "result",
    "matches",
    "going",
    "string",
    "passed",
    "result",
    "match",
    "going",
    "type",
    "else",
    "curly",
    "brackets",
    "string",
    "failed",
    "test",
    "format",
    "currency",
    "different",
    "situation",
    "number",
    "zero",
    "let",
    "save",
    "go",
    "back",
    "test",
    "page",
    "open",
    "console",
    "right",
    "click",
    "inspect",
    "console",
    "tell",
    "us",
    "automated",
    "tests",
    "passed",
    "see",
    "automated",
    "tests",
    "help",
    "us",
    "test",
    "code",
    "different",
    "situations",
    "easily",
    "lot",
    "faster",
    "manually",
    "opening",
    "website",
    "setting",
    "test",
    "different",
    "numbers",
    "let",
    "go",
    "back",
    "code",
    "way",
    "another",
    "name",
    "situation",
    "testing",
    "called",
    "test",
    "case",
    "instead",
    "saying",
    "testing",
    "two",
    "different",
    "situations",
    "usually",
    "say",
    "testing",
    "two",
    "test",
    "cases",
    "okay",
    "let",
    "get",
    "practice",
    "add",
    "another",
    "test",
    "case",
    "bottom",
    "file",
    "going",
    "create",
    "another",
    "statement",
    "brackets",
    "curly",
    "brackets",
    "time",
    "let",
    "test",
    "format",
    "currency",
    "brackets",
    "give",
    "number",
    "requires",
    "rounding",
    "calculate",
    "10",
    "tax",
    "website",
    "result",
    "could",
    "decimal",
    "like",
    "number",
    "use",
    "number",
    "convert",
    "20",
    "however",
    "ca",
    "going",
    "round",
    "1",
    "cent",
    "going",
    "20",
    "and1",
    "let",
    "check",
    "result",
    "triple",
    "equals",
    "string",
    "equal",
    "going",
    "past",
    "equal",
    "else",
    "curly",
    "brackets",
    "failed",
    "save",
    "open",
    "test",
    "page",
    "open",
    "con",
    "see",
    "three",
    "test",
    "cases",
    "passed",
    "created",
    "three",
    "test",
    "cases",
    "format",
    "currency",
    "using",
    "automated",
    "tests",
    "let",
    "go",
    "back",
    "code",
    "currently",
    "three",
    "test",
    "cases",
    "might",
    "wondering",
    "many",
    "test",
    "cases",
    "generally",
    "create",
    "two",
    "types",
    "test",
    "cases",
    "basic",
    "test",
    "cases",
    "edge",
    "cases",
    "basic",
    "test",
    "case",
    "tests",
    "code",
    "working",
    "first",
    "test",
    "case",
    "basic",
    "test",
    "case",
    "use",
    "normal",
    "number",
    "like",
    "2095",
    "see",
    "format",
    "currency",
    "working",
    "correctly",
    "second",
    "type",
    "test",
    "cases",
    "edge",
    "cases",
    "means",
    "test",
    "code",
    "values",
    "little",
    "bit",
    "bit",
    "tricky",
    "edge",
    "code",
    "handle",
    "example",
    "test",
    "last",
    "two",
    "test",
    "cases",
    "edge",
    "cases",
    "zero",
    "sort",
    "special",
    "number",
    "positive",
    "negative",
    "number",
    "requires",
    "rounding",
    "numbers",
    "acceptable",
    "use",
    "format",
    "currency",
    "little",
    "bit",
    "tricky",
    "edge",
    "code",
    "handle",
    "creating",
    "test",
    "cases",
    "make",
    "sure",
    "create",
    "basic",
    "test",
    "cases",
    "well",
    "edge",
    "cases",
    "edge",
    "cases",
    "could",
    "added",
    "another",
    "basic",
    "test",
    "case",
    "like",
    "format",
    "currency",
    "1095",
    "however",
    "similar",
    "2095",
    "basically",
    "testing",
    "thing",
    "need",
    "another",
    "test",
    "case",
    "like",
    "generally",
    "try",
    "test",
    "something",
    "different",
    "test",
    "case",
    "example",
    "edge",
    "case",
    "tested",
    "number",
    "would",
    "check",
    "code",
    "rounds",
    "correctly",
    "20",
    "and0",
    "however",
    "leave",
    "creating",
    "test",
    "case",
    "exercise",
    "let",
    "move",
    "talk",
    "second",
    "disadvantage",
    "manual",
    "tests",
    "hard",
    "retest",
    "code",
    "automated",
    "test",
    "also",
    "solve",
    "problem",
    "example",
    "let",
    "say",
    "chang",
    "format",
    "currency",
    "function",
    "inside",
    "uil",
    "would",
    "open",
    "website",
    "set",
    "everything",
    "manually",
    "click",
    "around",
    "see",
    "working",
    "however",
    "automated",
    "testing",
    "need",
    "rerun",
    "test",
    "code",
    "instantly",
    "retest",
    "cases",
    "let",
    "go",
    "back",
    "money",
    "js",
    "save",
    "code",
    "go",
    "test",
    "page",
    "check",
    "console",
    "right",
    "click",
    "inspect",
    "console",
    "see",
    "instantly",
    "reruns",
    "test",
    "cases",
    "tells",
    "us",
    "last",
    "test",
    "case",
    "failed",
    "automated",
    "tests",
    "make",
    "really",
    "easy",
    "retest",
    "code",
    "make",
    "changes",
    "okay",
    "another",
    "problem",
    "see",
    "test",
    "cas",
    "passed",
    "passed",
    "failed",
    "clear",
    "ones",
    "passed",
    "ones",
    "failed",
    "really",
    "name",
    "tests",
    "know",
    "going",
    "add",
    "next",
    "going",
    "give",
    "tests",
    "name",
    "let",
    "go",
    "back",
    "code",
    "open",
    "money",
    "going",
    "give",
    "test",
    "cases",
    "name",
    "first",
    "test",
    "case",
    "let",
    "console",
    "log",
    "string",
    "going",
    "give",
    "test",
    "name",
    "name",
    "describe",
    "test",
    "let",
    "use",
    "name",
    "converts",
    "cents",
    "dollars",
    "give",
    "test",
    "case",
    "name",
    "let",
    "thing",
    "two",
    "test",
    "cases",
    "going",
    "console",
    "log",
    "brackets",
    "string",
    "give",
    "second",
    "test",
    "case",
    "name",
    "one",
    "tests",
    "number",
    "zero",
    "let",
    "use",
    "name",
    "works",
    "zero",
    "name",
    "describes",
    "test",
    "let",
    "thing",
    "third",
    "test",
    "case",
    "string",
    "testing",
    "function",
    "rounds",
    "nearest",
    "scent",
    "let",
    "use",
    "name",
    "rounds",
    "nearest",
    "scent",
    "save",
    "wondering",
    "came",
    "names",
    "naming",
    "convention",
    "use",
    "describe",
    "code",
    "example",
    "code",
    "works",
    "zero",
    "code",
    "rounds",
    "nearest",
    "scent",
    "remove",
    "code",
    "people",
    "also",
    "like",
    "use",
    "word",
    "instead",
    "code",
    "test",
    "cases",
    "name",
    "open",
    "test",
    "page",
    "open",
    "console",
    "see",
    "exactly",
    "test",
    "case",
    "passed",
    "test",
    "case",
    "failed",
    "failed",
    "test",
    "case",
    "tells",
    "us",
    "rounding",
    "problem",
    "code",
    "go",
    "back",
    "code",
    "money",
    "js",
    "investigate",
    "rounding",
    "problem",
    "course",
    "removed",
    "example",
    "going",
    "add",
    "back",
    "fix",
    "failing",
    "test",
    "capital",
    "open",
    "bracket",
    "close",
    "bracket",
    "save",
    "open",
    "console",
    "test",
    "test",
    "cases",
    "passed",
    "next",
    "another",
    "thing",
    "naming",
    "tests",
    "group",
    "related",
    "tests",
    "together",
    "example",
    "three",
    "test",
    "cases",
    "format",
    "currency",
    "function",
    "going",
    "group",
    "tests",
    "together",
    "give",
    "group",
    "name",
    "way",
    "group",
    "related",
    "tests",
    "called",
    "test",
    "suite",
    "let",
    "go",
    "back",
    "code",
    "open",
    "money",
    "top",
    "let",
    "give",
    "group",
    "tests",
    "test",
    "suite",
    "name",
    "typing",
    "brackets",
    "string",
    "going",
    "name",
    "test",
    "suite",
    "colon",
    "format",
    "currency",
    "save",
    "let",
    "open",
    "console",
    "tests",
    "top",
    "show",
    "us",
    "test",
    "site",
    "format",
    "currency",
    "makes",
    "clear",
    "group",
    "tests",
    "format",
    "currency",
    "function",
    "future",
    "testing",
    "code",
    "example",
    "calculated",
    "tax",
    "function",
    "create",
    "another",
    "group",
    "tests",
    "another",
    "test",
    "suite",
    "like",
    "makes",
    "clear",
    "second",
    "group",
    "tests",
    "calculate",
    "tax",
    "function",
    "name",
    "tests",
    "group",
    "tests",
    "together",
    "together",
    "make",
    "clear",
    "tested",
    "tests",
    "passed",
    "failed",
    "created",
    "first",
    "set",
    "automated",
    "tests",
    "see",
    "automated",
    "tests",
    "basically",
    "using",
    "code",
    "test",
    "code",
    "make",
    "really",
    "easy",
    "check",
    "code",
    "working",
    "correctly",
    "let",
    "save",
    "git",
    "going",
    "open",
    "git",
    "section",
    "first",
    "change",
    "money",
    "created",
    "tests",
    "format",
    "currency",
    "created",
    "html",
    "file",
    "load",
    "test",
    "code",
    "let",
    "create",
    "message",
    "describing",
    "changes",
    "create",
    "automated",
    "tests",
    "format",
    "currency",
    "commit",
    "next",
    "going",
    "learn",
    "use",
    "testing",
    "framework",
    "write",
    "automated",
    "tests",
    "testing",
    "framework",
    "previous",
    "lesson",
    "learned",
    "external",
    "libraries",
    "code",
    "outside",
    "project",
    "someone",
    "else",
    "wrote",
    "load",
    "external",
    "libraries",
    "project",
    "use",
    "testing",
    "framework",
    "external",
    "library",
    "helps",
    "us",
    "write",
    "tests",
    "easier",
    "let",
    "go",
    "back",
    "code",
    "going",
    "open",
    "money",
    "file",
    "notice",
    "tests",
    "need",
    "several",
    "things",
    "first",
    "create",
    "test",
    "suite",
    "give",
    "name",
    "create",
    "tests",
    "test",
    "give",
    "name",
    "compare",
    "values",
    "display",
    "result",
    "console",
    "testing",
    "framework",
    "helps",
    "us",
    "things",
    "automatically",
    "gives",
    "us",
    "many",
    "features",
    "let",
    "learn",
    "first",
    "testing",
    "framework",
    "course",
    "going",
    "use",
    "popular",
    "testing",
    "framework",
    "called",
    "jasmine",
    "working",
    "company",
    "future",
    "definitely",
    "using",
    "testing",
    "framework",
    "might",
    "always",
    "jasmine",
    "okay",
    "testing",
    "frameworks",
    "pretty",
    "similar",
    "learning",
    "jasmine",
    "able",
    "easily",
    "use",
    "testing",
    "frameworks",
    "future",
    "load",
    "jasmine",
    "project",
    "going",
    "go",
    "video",
    "description",
    "going",
    "click",
    "link",
    "download",
    "jasmine",
    "link",
    "opens",
    "going",
    "page",
    "going",
    "scroll",
    "going",
    "click",
    "jasmine",
    "dst",
    "standalone",
    "zip",
    "file",
    "download",
    "finished",
    "downloading",
    "going",
    "open",
    "downloads",
    "folder",
    "windows",
    "going",
    "rightclick",
    "zip",
    "file",
    "click",
    "extract",
    "click",
    "extract",
    "extract",
    "option",
    "also",
    "create",
    "folder",
    "name",
    "double",
    "click",
    "zip",
    "file",
    "drag",
    "everything",
    "folder",
    "using",
    "mac",
    "doubleclick",
    "zip",
    "file",
    "folder",
    "contains",
    "code",
    "jasmine",
    "going",
    "drag",
    "folder",
    "project",
    "let",
    "open",
    "code",
    "project",
    "going",
    "drag",
    "folder",
    "click",
    "copy",
    "folder",
    "make",
    "sure",
    "fold",
    "folder",
    "beside",
    "scripts",
    "images",
    "folder",
    "next",
    "going",
    "rename",
    "folder",
    "right",
    "click",
    "rename",
    "let",
    "rename",
    "jasmine",
    "make",
    "clear",
    "folder",
    "contains",
    "test",
    "created",
    "jasmine",
    "let",
    "press",
    "enter",
    "jasmine",
    "inside",
    "project",
    "inside",
    "lip",
    "folder",
    "javascript",
    "files",
    "code",
    "jasmine",
    "testing",
    "framework",
    "another",
    "way",
    "load",
    "external",
    "library",
    "project",
    "download",
    "code",
    "put",
    "project",
    "useful",
    "external",
    "library",
    "lots",
    "different",
    "files",
    "like",
    "continue",
    "let",
    "save",
    "changes",
    "git",
    "make",
    "changes",
    "later",
    "easier",
    "see",
    "open",
    "git",
    "section",
    "added",
    "code",
    "jasmine",
    "top",
    "let",
    "type",
    "message",
    "add",
    "jasmin",
    "testing",
    "framework",
    "commit",
    "loaded",
    "jasmine",
    "project",
    "let",
    "learn",
    "use",
    "jasmine",
    "documentation",
    "page",
    "shows",
    "use",
    "testing",
    "framework",
    "however",
    "save",
    "time",
    "going",
    "show",
    "features",
    "need",
    "read",
    "documentation",
    "later",
    "want",
    "first",
    "let",
    "learn",
    "run",
    "tests",
    "using",
    "jasmine",
    "going",
    "close",
    "code",
    "going",
    "open",
    "jasmin",
    "folder",
    "bottom",
    "going",
    "open",
    "spec",
    "runner",
    "html",
    "file",
    "file",
    "loads",
    "tests",
    "thing",
    "file",
    "way",
    "jasmine",
    "spec",
    "another",
    "name",
    "test",
    "spec",
    "runner",
    "means",
    "test",
    "runner",
    "file",
    "runs",
    "tests",
    "let",
    "actually",
    "rename",
    "file",
    "match",
    "compare",
    "two",
    "going",
    "right",
    "click",
    "rename",
    "tests",
    "html",
    "press",
    "enter",
    "let",
    "open",
    "file",
    "take",
    "look",
    "code",
    "inside",
    "top",
    "code",
    "jasmine",
    "testing",
    "framework",
    "loading",
    "framework",
    "code",
    "want",
    "test",
    "code",
    "sort",
    "like",
    "money",
    "js",
    "file",
    "testing",
    "earlier",
    "bottom",
    "files",
    "contain",
    "tests",
    "files",
    "sort",
    "like",
    "money",
    "file",
    "earlier",
    "notice",
    "spec",
    "folder",
    "reminder",
    "jasmine",
    "spec",
    "another",
    "name",
    "test",
    "basically",
    "test",
    "folder",
    "folder",
    "contains",
    "tests",
    "let",
    "run",
    "tests",
    "need",
    "open",
    "html",
    "file",
    "live",
    "server",
    "like",
    "file",
    "going",
    "right",
    "click",
    "open",
    "live",
    "server",
    "going",
    "make",
    "little",
    "bigger",
    "pressing",
    "control",
    "equals",
    "easier",
    "see",
    "video",
    "jasmine",
    "tests",
    "look",
    "like",
    "five",
    "green",
    "dots",
    "means",
    "five",
    "tests",
    "ran",
    "green",
    "color",
    "means",
    "passed",
    "test",
    "green",
    "dot",
    "notice",
    "test",
    "also",
    "name",
    "next",
    "tells",
    "us",
    "test",
    "worry",
    "different",
    "order",
    "jasmine",
    "randomizes",
    "order",
    "tests",
    "also",
    "notice",
    "tests",
    "grouped",
    "together",
    "test",
    "suite",
    "name",
    "test",
    "suite",
    "see",
    "testing",
    "framework",
    "helps",
    "us",
    "things",
    "also",
    "provides",
    "nice",
    "looking",
    "website",
    "see",
    "test",
    "results",
    "testing",
    "framework",
    "external",
    "library",
    "helps",
    "us",
    "write",
    "tests",
    "easier",
    "know",
    "jasmine",
    "testing",
    "framework",
    "let",
    "learn",
    "write",
    "tests",
    "using",
    "jasmine",
    "first",
    "going",
    "go",
    "back",
    "code",
    "going",
    "remove",
    "example",
    "code",
    "provided",
    "jasmine",
    "remove",
    "four",
    "script",
    "texts",
    "let",
    "also",
    "remove",
    "source",
    "folder",
    "right",
    "click",
    "delete",
    "well",
    "spec",
    "folder",
    "right",
    "click",
    "delete",
    "make",
    "sure",
    "keep",
    "lib",
    "folder",
    "contains",
    "code",
    "jasmine",
    "inside",
    "test",
    "jasmin",
    "going",
    "create",
    "new",
    "file",
    "test",
    "create",
    "new",
    "file",
    "let",
    "say",
    "testing",
    "money",
    "js",
    "let",
    "name",
    "thing",
    "money",
    "press",
    "enter",
    "let",
    "create",
    "test",
    "using",
    "jasmine",
    "time",
    "make",
    "easier",
    "video",
    "going",
    "take",
    "file",
    "drag",
    "top",
    "see",
    "two",
    "side",
    "side",
    "like",
    "going",
    "create",
    "tests",
    "format",
    "currency",
    "first",
    "need",
    "import",
    "function",
    "top",
    "let",
    "actually",
    "select",
    "right",
    "click",
    "copy",
    "right",
    "click",
    "paste",
    "make",
    "sure",
    "file",
    "path",
    "still",
    "works",
    "money",
    "file",
    "inside",
    "jasmin",
    "folder",
    "beside",
    "previous",
    "test",
    "folder",
    "next",
    "going",
    "create",
    "test",
    "suite",
    "name",
    "test",
    "suite",
    "jasmine",
    "create",
    "test",
    "suite",
    "going",
    "use",
    "function",
    "called",
    "describe",
    "describe",
    "function",
    "provided",
    "jasmine",
    "creates",
    "test",
    "suite",
    "next",
    "going",
    "give",
    "name",
    "test",
    "suite",
    "name",
    "test",
    "suite",
    "jasmine",
    "going",
    "give",
    "describe",
    "string",
    "string",
    "name",
    "test",
    "suite",
    "let",
    "name",
    "thing",
    "test",
    "suite",
    "colon",
    "format",
    "currency",
    "next",
    "going",
    "add",
    "tests",
    "inside",
    "test",
    "suite",
    "going",
    "give",
    "describe",
    "second",
    "parameter",
    "function",
    "brackets",
    "arrow",
    "curly",
    "brackets",
    "inside",
    "going",
    "create",
    "test",
    "give",
    "test",
    "name",
    "create",
    "test",
    "jasmine",
    "going",
    "use",
    "another",
    "function",
    "called",
    "brackets",
    "another",
    "function",
    "provided",
    "jasmine",
    "creates",
    "test",
    "next",
    "let",
    "give",
    "name",
    "test",
    "know",
    "name",
    "test",
    "going",
    "give",
    "string",
    "going",
    "test",
    "name",
    "let",
    "name",
    "thing",
    "converts",
    "sense",
    "dollars",
    "going",
    "add",
    "code",
    "tests",
    "jasmine",
    "going",
    "give",
    "second",
    "parameter",
    "another",
    "function",
    "brackets",
    "arrow",
    "curly",
    "brackets",
    "code",
    "inside",
    "test",
    "test",
    "need",
    "compare",
    "two",
    "values",
    "display",
    "result",
    "jasmine",
    "instead",
    "creating",
    "statement",
    "displaying",
    "result",
    "jasmine",
    "provides",
    "us",
    "another",
    "function",
    "function",
    "called",
    "expect",
    "brackets",
    "expect",
    "lets",
    "us",
    "compare",
    "value",
    "another",
    "value",
    "example",
    "let",
    "give",
    "expect",
    "first",
    "value",
    "want",
    "compare",
    "format",
    "currency",
    "2095",
    "type",
    "format",
    "currency",
    "brackets",
    "295",
    "compare",
    "value",
    "another",
    "value",
    "expect",
    "gives",
    "us",
    "object",
    "object",
    "many",
    "methods",
    "use",
    "comparisons",
    "one",
    "methods",
    "use",
    "object",
    "dot",
    "2",
    "equal",
    "brackets",
    "inside",
    "brackets",
    "put",
    "another",
    "value",
    "want",
    "compare",
    "want",
    "compare",
    "string",
    "2095",
    "checks",
    "value",
    "equal",
    "value",
    "displays",
    "result",
    "page",
    "everything",
    "except",
    "one",
    "line",
    "code",
    "also",
    "notice",
    "jasmin",
    "code",
    "designed",
    "reads",
    "like",
    "english",
    "example",
    "expect",
    "format",
    "currency",
    "2095",
    "equal",
    "string",
    "makes",
    "test",
    "code",
    "easier",
    "read",
    "created",
    "first",
    "test",
    "suite",
    "first",
    "test",
    "using",
    "jasmine",
    "let",
    "run",
    "test",
    "need",
    "run",
    "javascript",
    "file",
    "inside",
    "first",
    "let",
    "save",
    "file",
    "inside",
    "going",
    "load",
    "file",
    "bottom",
    "going",
    "create",
    "script",
    "tag",
    "give",
    "source",
    "attribute",
    "src",
    "equals",
    "double",
    "quotes",
    "going",
    "load",
    "money",
    "remember",
    "test",
    "file",
    "uses",
    "import",
    "also",
    "need",
    "give",
    "attribute",
    "type",
    "equals",
    "module",
    "file",
    "access",
    "javascript",
    "module",
    "features",
    "let",
    "save",
    "open",
    "file",
    "browser",
    "open",
    "write",
    "click",
    "open",
    "live",
    "server",
    "open",
    "test",
    "page",
    "see",
    "one",
    "test",
    "created",
    "passing",
    "green",
    "see",
    "created",
    "test",
    "suite",
    "name",
    "also",
    "created",
    "test",
    "name",
    "created",
    "first",
    "test",
    "except",
    "using",
    "jasmine",
    "time",
    "see",
    "jasmine",
    "also",
    "creates",
    "nice",
    "website",
    "us",
    "see",
    "test",
    "results",
    "okay",
    "learned",
    "use",
    "jasmine",
    "create",
    "test",
    "let",
    "get",
    "practice",
    "create",
    "rest",
    "tests",
    "go",
    "back",
    "code",
    "open",
    "money",
    "going",
    "create",
    "two",
    "tests",
    "bottom",
    "inside",
    "test",
    "suite",
    "going",
    "create",
    "another",
    "test",
    "using",
    "function",
    "brackets",
    "give",
    "string",
    "test",
    "name",
    "let",
    "name",
    "works",
    "zero",
    "comma",
    "brackets",
    "arrow",
    "curly",
    "brackets",
    "put",
    "something",
    "inside",
    "test",
    "second",
    "test",
    "going",
    "compare",
    "two",
    "values",
    "compare",
    "values",
    "going",
    "use",
    "function",
    "expect",
    "brackets",
    "first",
    "value",
    "going",
    "format",
    "currency",
    "brackets",
    "zero",
    "expect",
    "gives",
    "us",
    "object",
    "object",
    "method",
    "called",
    "dot",
    "equal",
    "lets",
    "us",
    "compare",
    "value",
    "another",
    "value",
    "call",
    "method",
    "using",
    "brackets",
    "compare",
    "string",
    "string",
    "0",
    "0",
    "0",
    "let",
    "save",
    "live",
    "server",
    "update",
    "web",
    "page",
    "automatically",
    "open",
    "test",
    "page",
    "two",
    "tests",
    "passed",
    "create",
    "second",
    "test",
    "using",
    "jasmine",
    "worry",
    "different",
    "order",
    "jasmine",
    "randomizes",
    "order",
    "tests",
    "finally",
    "let",
    "create",
    "third",
    "test",
    "go",
    "back",
    "code",
    "old",
    "money",
    "test",
    "file",
    "going",
    "create",
    "third",
    "test",
    "feel",
    "free",
    "pause",
    "video",
    "want",
    "give",
    "try",
    "scroll",
    "create",
    "another",
    "test",
    "inside",
    "test",
    "suite",
    "using",
    "function",
    "brackets",
    "string",
    "give",
    "test",
    "name",
    "rounds",
    "nearest",
    "set",
    "comma",
    "brackets",
    "arrow",
    "curly",
    "brackets",
    "going",
    "compare",
    "two",
    "values",
    "use",
    "exp",
    "brackets",
    "give",
    "first",
    "value",
    "format",
    "currency",
    "brackets",
    "compare",
    "use",
    "method",
    "do2",
    "equal",
    "brackets",
    "compare",
    "save",
    "let",
    "go",
    "back",
    "test",
    "page",
    "three",
    "tests",
    "three",
    "passed",
    "recreated",
    "tests",
    "let",
    "try",
    "making",
    "one",
    "tests",
    "fail",
    "see",
    "looks",
    "like",
    "jasmine",
    "open",
    "code",
    "let",
    "open",
    "file",
    "utils",
    "test",
    "tells",
    "us",
    "test",
    "suite",
    "name",
    "test",
    "name",
    "failed",
    "also",
    "tell",
    "us",
    "two",
    "values",
    "equal",
    "tell",
    "us",
    "test",
    "failed",
    "tell",
    "us",
    "failed",
    "money",
    "line",
    "13",
    "go",
    "back",
    "code",
    "open",
    "jasmine",
    "money",
    "line",
    "13",
    "right",
    "telling",
    "us",
    "line",
    "failed",
    "test",
    "see",
    "full",
    "list",
    "tests",
    "tell",
    "us",
    "three",
    "tests",
    "two",
    "passed",
    "one",
    "failed",
    "jasmine",
    "gives",
    "us",
    "lot",
    "details",
    "test",
    "failed",
    "help",
    "us",
    "fix",
    "issue",
    "let",
    "add",
    "back",
    "make",
    "everything",
    "pass",
    "open",
    "code",
    "open",
    "uts",
    "open",
    "bracket",
    "close",
    "bracket",
    "save",
    "check",
    "test",
    "page",
    "everything",
    "passes",
    "use",
    "testing",
    "framework",
    "like",
    "jasmine",
    "create",
    "tests",
    "testing",
    "framework",
    "gives",
    "us",
    "bunch",
    "functions",
    "describe",
    "expect",
    "use",
    "functions",
    "create",
    "test",
    "functions",
    "lot",
    "features",
    "inside",
    "setup",
    "us",
    "also",
    "display",
    "test",
    "nice",
    "web",
    "page",
    "us",
    "one",
    "thing",
    "want",
    "mention",
    "use",
    "describe",
    "inside",
    "describe",
    "helps",
    "us",
    "organize",
    "tests",
    "let",
    "save",
    "changes",
    "git",
    "open",
    "git",
    "section",
    "let",
    "close",
    "file",
    "top",
    "inside",
    "money",
    "created",
    "tests",
    "format",
    "currency",
    "using",
    "jasmine",
    "time",
    "spec",
    "runner",
    "rename",
    "file",
    "finally",
    "deleted",
    "test",
    "code",
    "came",
    "jasmine",
    "let",
    "add",
    "message",
    "describe",
    "changes",
    "remove",
    "default",
    "tests",
    "add",
    "money",
    "tests",
    "commit",
    "let",
    "test",
    "different",
    "function",
    "using",
    "jasmine",
    "along",
    "way",
    "going",
    "learn",
    "features",
    "testing",
    "frameworks",
    "let",
    "go",
    "back",
    "code",
    "going",
    "scroll",
    "top",
    "open",
    "cart",
    "js",
    "file",
    "inside",
    "file",
    "function",
    "called",
    "add",
    "cart",
    "going",
    "create",
    "tests",
    "add",
    "cart",
    "function",
    "first",
    "since",
    "function",
    "different",
    "file",
    "going",
    "create",
    "new",
    "test",
    "file",
    "going",
    "scroll",
    "let",
    "close",
    "test",
    "folder",
    "get",
    "confused",
    "inside",
    "jasmine",
    "going",
    "click",
    "folder",
    "create",
    "new",
    "file",
    "let",
    "name",
    "cart",
    "press",
    "enter",
    "name",
    "original",
    "file",
    "name",
    "cart",
    "add",
    "test",
    "end",
    "better",
    "organize",
    "test",
    "files",
    "usually",
    "try",
    "match",
    "folder",
    "structure",
    "code",
    "example",
    "code",
    "money",
    "js",
    "inside",
    "uil",
    "folder",
    "inside",
    "tests",
    "also",
    "create",
    "utils",
    "folder",
    "put",
    "file",
    "inside",
    "create",
    "new",
    "folder",
    "clicking",
    "let",
    "name",
    "utils",
    "press",
    "enter",
    "move",
    "money",
    "file",
    "inside",
    "asks",
    "want",
    "update",
    "imports",
    "automatically",
    "click",
    "yes",
    "check",
    "code",
    "scroll",
    "top",
    "make",
    "sure",
    "file",
    "path",
    "starts",
    "slash",
    "slash",
    "inside",
    "another",
    "folder",
    "vss",
    "code",
    "sometimes",
    "updates",
    "file",
    "paths",
    "us",
    "automatically",
    "add",
    "extra",
    "dot",
    "slash",
    "front",
    "also",
    "going",
    "open",
    "money",
    "save",
    "file",
    "next",
    "scroll",
    "cart",
    "js",
    "inside",
    "data",
    "folder",
    "inside",
    "tests",
    "also",
    "going",
    "create",
    "data",
    "folder",
    "let",
    "click",
    "cart",
    "create",
    "new",
    "folder",
    "let",
    "name",
    "data",
    "folder",
    "press",
    "enter",
    "move",
    "card",
    "inside",
    "notice",
    "folder",
    "structure",
    "perfectly",
    "match",
    "folder",
    "structure",
    "utils",
    "inside",
    "scripts",
    "folder",
    "usually",
    "data",
    "folder",
    "also",
    "inside",
    "scripts",
    "folder",
    "made",
    "mistake",
    "structuring",
    "project",
    "let",
    "use",
    "folder",
    "structure",
    "tests",
    "okay",
    "let",
    "open",
    "cart",
    "ready",
    "test",
    "add",
    "cart",
    "function",
    "first",
    "let",
    "import",
    "add",
    "cart",
    "top",
    "import",
    "curly",
    "brackets",
    "add",
    "cart",
    "string",
    "going",
    "locate",
    "cart",
    "js",
    "first",
    "need",
    "get",
    "data",
    "folder",
    "using",
    "slash",
    "get",
    "test",
    "djine",
    "folder",
    "slash",
    "go",
    "data",
    "folder",
    "data",
    "sl",
    "cart",
    "js",
    "next",
    "let",
    "create",
    "test",
    "suite",
    "function",
    "create",
    "new",
    "lines",
    "create",
    "test",
    "suite",
    "jasmine",
    "use",
    "function",
    "describe",
    "brackets",
    "give",
    "test",
    "suite",
    "name",
    "giving",
    "string",
    "let",
    "use",
    "name",
    "test",
    "suite",
    "colon",
    "add",
    "cart",
    "give",
    "second",
    "parameter",
    "function",
    "brackets",
    "arrow",
    "curly",
    "brackets",
    "inside",
    "test",
    "suite",
    "going",
    "add",
    "tests",
    "let",
    "look",
    "code",
    "add",
    "cart",
    "see",
    "kind",
    "tests",
    "add",
    "open",
    "cart",
    "js",
    "inside",
    "add",
    "cart",
    "notice",
    "function",
    "uses",
    "statement",
    "best",
    "practice",
    "testing",
    "test",
    "condition",
    "statement",
    "known",
    "test",
    "coverage",
    "test",
    "coverage",
    "means",
    "much",
    "code",
    "tested",
    "best",
    "practice",
    "try",
    "maximize",
    "test",
    "coverage",
    "statement",
    "create",
    "test",
    "first",
    "condition",
    "product",
    "already",
    "cart",
    "create",
    "test",
    "else",
    "condition",
    "product",
    "cart",
    "let",
    "go",
    "back",
    "cart",
    "inside",
    "test",
    "suite",
    "going",
    "create",
    "test",
    "using",
    "function",
    "brackets",
    "give",
    "string",
    "test",
    "name",
    "video",
    "going",
    "scroll",
    "take",
    "cart",
    "js",
    "file",
    "put",
    "top",
    "see",
    "code",
    "test",
    "side",
    "side",
    "going",
    "scroll",
    "add",
    "card",
    "function",
    "mentioned",
    "going",
    "test",
    "condition",
    "statement",
    "first",
    "test",
    "going",
    "product",
    "already",
    "cart",
    "let",
    "name",
    "ads",
    "existing",
    "product",
    "cart",
    "comma",
    "brackets",
    "arrow",
    "curly",
    "brackets",
    "let",
    "add",
    "another",
    "test",
    "product",
    "cart",
    "else",
    "condition",
    "create",
    "another",
    "test",
    "using",
    "brackets",
    "string",
    "test",
    "name",
    "adds",
    "new",
    "product",
    "cart",
    "comma",
    "function",
    "brackets",
    "arrow",
    "curly",
    "brackets",
    "two",
    "tests",
    "need",
    "two",
    "conditions",
    "statement",
    "let",
    "actually",
    "start",
    "adding",
    "new",
    "product",
    "cart",
    "since",
    "little",
    "easier",
    "test",
    "unlike",
    "format",
    "currency",
    "function",
    "add",
    "cart",
    "return",
    "value",
    "ca",
    "really",
    "compare",
    "another",
    "value",
    "using",
    "expect",
    "instead",
    "going",
    "call",
    "add",
    "cart",
    "modify",
    "cart",
    "check",
    "cart",
    "looks",
    "correct",
    "inside",
    "let",
    "call",
    "function",
    "add",
    "cart",
    "brackets",
    "function",
    "takes",
    "one",
    "string",
    "product",
    "id",
    "inside",
    "let",
    "give",
    "string",
    "find",
    "product",
    "id",
    "test",
    "going",
    "go",
    "left",
    "scroll",
    "going",
    "open",
    "products",
    "js",
    "file",
    "inside",
    "list",
    "products",
    "let",
    "take",
    "first",
    "product",
    "id",
    "use",
    "test",
    "going",
    "select",
    "id",
    "right",
    "click",
    "copy",
    "inside",
    "cart",
    "string",
    "going",
    "rightclick",
    "paste",
    "add",
    "product",
    "id",
    "cart",
    "check",
    "code",
    "working",
    "correctly",
    "going",
    "check",
    "cart",
    "look",
    "looks",
    "like",
    "first",
    "need",
    "import",
    "cart",
    "going",
    "scroll",
    "since",
    "already",
    "importing",
    "cart",
    "js",
    "ut",
    "cart",
    "type",
    "comma",
    "cart",
    "bottom",
    "going",
    "create",
    "new",
    "line",
    "first",
    "let",
    "check",
    "card",
    "length",
    "correct",
    "assume",
    "start",
    "empty",
    "cart",
    "add",
    "product",
    "cart",
    "length",
    "one",
    "compare",
    "two",
    "values",
    "cart",
    "length",
    "one",
    "compare",
    "values",
    "going",
    "use",
    "function",
    "expect",
    "brackets",
    "compare",
    "cart",
    "length",
    "use",
    "method2",
    "equal",
    "brackets",
    "1",
    "let",
    "save",
    "file",
    "going",
    "run",
    "tests",
    "run",
    "going",
    "load",
    "file",
    "inside",
    "open",
    "bottom",
    "create",
    "script",
    "tag",
    "give",
    "source",
    "attribute",
    "double",
    "quotes",
    "going",
    "load",
    "file",
    "file",
    "inside",
    "data",
    "folder",
    "need",
    "type",
    "data",
    "sl",
    "go",
    "folder",
    "load",
    "cart",
    "file",
    "also",
    "uses",
    "import",
    "going",
    "give",
    "attribute",
    "type",
    "equals",
    "module",
    "enable",
    "javascript",
    "module",
    "features",
    "one",
    "thing",
    "forgot",
    "moved",
    "money",
    "test",
    "util",
    "folder",
    "need",
    "update",
    "source",
    "attribute",
    "add",
    "utils",
    "folder",
    "slash",
    "go",
    "folder",
    "locate",
    "money",
    "let",
    "save",
    "html",
    "file",
    "open",
    "test",
    "page",
    "browser",
    "two",
    "additional",
    "tests",
    "test",
    "created",
    "fail",
    "fail",
    "go",
    "console",
    "run",
    "local",
    "storage",
    "cle",
    "refresh",
    "page",
    "fail",
    "tells",
    "us",
    "failure",
    "happened",
    "test",
    "suite",
    "dart",
    "test",
    "adds",
    "new",
    "product",
    "cart",
    "one",
    "created",
    "telling",
    "us",
    "cart",
    "length",
    "equal",
    "one",
    "equal",
    "different",
    "number",
    "happening",
    "let",
    "go",
    "back",
    "test",
    "open",
    "cart",
    "remember",
    "assumed",
    "cart",
    "starts",
    "empty",
    "add",
    "product",
    "card",
    "dot",
    "length",
    "would",
    "one",
    "however",
    "cart",
    "actually",
    "start",
    "empty",
    "cart",
    "js",
    "top",
    "loading",
    "cart",
    "local",
    "storage",
    "nothing",
    "local",
    "storage",
    "use",
    "default",
    "cart",
    "starting",
    "cart",
    "depends",
    "inside",
    "local",
    "storage",
    "big",
    "problem",
    "testing",
    "local",
    "storage",
    "change",
    "empty",
    "card",
    "saved",
    "local",
    "storage",
    "test",
    "pass",
    "empty",
    "cart",
    "local",
    "storage",
    "test",
    "fail",
    "known",
    "flaky",
    "test",
    "test",
    "sometimes",
    "passes",
    "sometimes",
    "fails",
    "even",
    "change",
    "code",
    "solve",
    "problem",
    "going",
    "use",
    "feature",
    "jasmine",
    "called",
    "mocks",
    "mock",
    "lets",
    "us",
    "replace",
    "method",
    "fake",
    "version",
    "make",
    "fake",
    "version",
    "anything",
    "want",
    "example",
    "load",
    "cart",
    "local",
    "storage",
    "using",
    "local",
    "storage",
    "getet",
    "item",
    "use",
    "mock",
    "create",
    "fake",
    "version",
    "get",
    "item",
    "make",
    "fake",
    "version",
    "anything",
    "want",
    "like",
    "return",
    "empty",
    "array",
    "let",
    "go",
    "ahead",
    "create",
    "first",
    "mock",
    "go",
    "back",
    "cart",
    "top",
    "test",
    "going",
    "create",
    "mock",
    "using",
    "another",
    "function",
    "jasmine",
    "called",
    "spy",
    "brackets",
    "give",
    "spy",
    "two",
    "parameters",
    "first",
    "parameter",
    "object",
    "want",
    "mock",
    "case",
    "local",
    "storage",
    "type",
    "local",
    "storage",
    "comma",
    "give",
    "string",
    "string",
    "method",
    "want",
    "mark",
    "case",
    "want",
    "mark",
    "get",
    "item",
    "method",
    "type",
    "get",
    "item",
    "make",
    "sure",
    "uppercase",
    "exactly",
    "match",
    "method",
    "name",
    "replace",
    "local",
    "storage",
    "getet",
    "item",
    "fake",
    "version",
    "make",
    "fake",
    "version",
    "anything",
    "want",
    "spy",
    "gives",
    "us",
    "object",
    "object",
    "property",
    "use",
    "end",
    "type",
    "dot",
    "property",
    "called",
    "result",
    "also",
    "object",
    "object",
    "method",
    "called",
    "dot",
    "call",
    "fake",
    "brackets",
    "worry",
    "dots",
    "jasmine",
    "organizes",
    "code",
    "reads",
    "like",
    "english",
    "spying",
    "local",
    "storage",
    "getet",
    "item",
    "call",
    "fake",
    "next",
    "going",
    "give",
    "call",
    "fake",
    "function",
    "brackets",
    "arrow",
    "curly",
    "brackets",
    "function",
    "want",
    "get",
    "item",
    "essentially",
    "overwriting",
    "original",
    "get",
    "item",
    "whatever",
    "inside",
    "function",
    "earlier",
    "said",
    "wanted",
    "get",
    "item",
    "return",
    "empty",
    "array",
    "test",
    "inside",
    "fake",
    "function",
    "let",
    "make",
    "get",
    "item",
    "return",
    "empty",
    "array",
    "remember",
    "local",
    "storage",
    "supports",
    "strings",
    "need",
    "return",
    "string",
    "going",
    "use",
    "code",
    "json",
    "uppercase",
    "stringify",
    "open",
    "bracket",
    "close",
    "bracket",
    "convert",
    "whatever",
    "brackets",
    "json",
    "string",
    "need",
    "local",
    "storage",
    "let",
    "test",
    "mock",
    "see",
    "works",
    "going",
    "brackets",
    "run",
    "local",
    "storage",
    "doget",
    "capital",
    "item",
    "brackets",
    "string",
    "cart",
    "let",
    "save",
    "file",
    "open",
    "test",
    "page",
    "browser",
    "going",
    "open",
    "console",
    "rightclick",
    "inspect",
    "console",
    "see",
    "local",
    "storage",
    "getet",
    "item",
    "longer",
    "loading",
    "actual",
    "local",
    "storage",
    "giving",
    "us",
    "empty",
    "array",
    "every",
    "time",
    "mocked",
    "get",
    "item",
    "method",
    "however",
    "also",
    "notice",
    "test",
    "still",
    "failing",
    "come",
    "still",
    "fails",
    "understand",
    "happening",
    "let",
    "take",
    "closer",
    "look",
    "code",
    "go",
    "back",
    "code",
    "inside",
    "tests",
    "mocking",
    "local",
    "storage",
    "getet",
    "item",
    "notice",
    "scroll",
    "import",
    "cart",
    "top",
    "order",
    "code",
    "matters",
    "first",
    "load",
    "cart",
    "local",
    "storage",
    "mocking",
    "local",
    "storage",
    "getet",
    "item",
    "card",
    "already",
    "loaded",
    "point",
    "code",
    "effect",
    "want",
    "one",
    "way",
    "solve",
    "problem",
    "mock",
    "local",
    "storage",
    "reload",
    "cart",
    "inside",
    "cart",
    "js",
    "going",
    "give",
    "little",
    "space",
    "reload",
    "cart",
    "mock",
    "need",
    "rerun",
    "code",
    "let",
    "create",
    "function",
    "rerun",
    "code",
    "bottom",
    "create",
    "function",
    "call",
    "load",
    "storage",
    "brackets",
    "curly",
    "brackets",
    "going",
    "move",
    "code",
    "inside",
    "function",
    "let",
    "select",
    "code",
    "cart",
    "equals",
    "rightclick",
    "cut",
    "function",
    "rightclick",
    "paste",
    "top",
    "let",
    "create",
    "cart",
    "variable",
    "let",
    "cart",
    "semicolon",
    "lastly",
    "load",
    "file",
    "need",
    "run",
    "function",
    "run",
    "code",
    "least",
    "run",
    "function",
    "load",
    "storage",
    "brackets",
    "let",
    "save",
    "basically",
    "running",
    "exact",
    "code",
    "except",
    "code",
    "inside",
    "function",
    "test",
    "mock",
    "local",
    "storage",
    "getet",
    "item",
    "going",
    "reload",
    "cart",
    "using",
    "function",
    "first",
    "let",
    "export",
    "use",
    "test",
    "type",
    "export",
    "save",
    "file",
    "insider",
    "test",
    "let",
    "scroll",
    "top",
    "already",
    "importing",
    "cart",
    "js",
    "type",
    "comma",
    "import",
    "load",
    "storage",
    "scroll",
    "back",
    "test",
    "mock",
    "local",
    "storage",
    "getet",
    "item",
    "going",
    "load",
    "storage",
    "brackets",
    "save",
    "time",
    "mock",
    "local",
    "storage",
    "getet",
    "item",
    "first",
    "return",
    "empty",
    "array",
    "reload",
    "cart",
    "going",
    "empty",
    "array",
    "cart",
    "empty",
    "test",
    "add",
    "product",
    "empty",
    "cart",
    "cart",
    "length",
    "equal",
    "one",
    "test",
    "pass",
    "actually",
    "remove",
    "save",
    "check",
    "test",
    "page",
    "test",
    "passing",
    "next",
    "let",
    "go",
    "back",
    "code",
    "cod",
    "look",
    "add",
    "cart",
    "function",
    "cart",
    "js",
    "bottom",
    "function",
    "notice",
    "saving",
    "cart",
    "local",
    "storage",
    "going",
    "call",
    "local",
    "storage",
    "set",
    "item",
    "however",
    "actually",
    "want",
    "save",
    "local",
    "storage",
    "test",
    "code",
    "want",
    "test",
    "code",
    "modifying",
    "local",
    "storage",
    "affecting",
    "real",
    "code",
    "prevent",
    "also",
    "going",
    "mock",
    "local",
    "storage",
    "set",
    "item",
    "going",
    "create",
    "new",
    "lines",
    "top",
    "test",
    "going",
    "mock",
    "local",
    "storage",
    "set",
    "item",
    "using",
    "function",
    "spy",
    "brackets",
    "give",
    "local",
    "storage",
    "comma",
    "string",
    "method",
    "want",
    "mock",
    "set",
    "item",
    "save",
    "remember",
    "order",
    "code",
    "matters",
    "want",
    "mock",
    "local",
    "storage",
    "set",
    "item",
    "first",
    "call",
    "add",
    "cart",
    "set",
    "item",
    "replaced",
    "fake",
    "version",
    "longer",
    "save",
    "local",
    "storage",
    "next",
    "spyon",
    "another",
    "useful",
    "feature",
    "records",
    "every",
    "time",
    "method",
    "used",
    "example",
    "want",
    "make",
    "sure",
    "add",
    "cart",
    "saves",
    "cart",
    "local",
    "storage",
    "end",
    "tests",
    "set",
    "item",
    "mocked",
    "ca",
    "really",
    "check",
    "inside",
    "local",
    "storage",
    "instead",
    "check",
    "add",
    "cart",
    "calls",
    "set",
    "item",
    "point",
    "check",
    "set",
    "item",
    "called",
    "bottom",
    "use",
    "function",
    "expect",
    "brackets",
    "going",
    "give",
    "method",
    "loed",
    "local",
    "storage",
    "set",
    "item",
    "remember",
    "expect",
    "gives",
    "us",
    "object",
    "object",
    "many",
    "useful",
    "methods",
    "check",
    "stuff",
    "like",
    "dot",
    "equal",
    "another",
    "method",
    "get",
    "expect",
    "dot",
    "2",
    "called",
    "times",
    "brackets",
    "make",
    "sure",
    "write",
    "method",
    "cam",
    "case",
    "two",
    "lowercase",
    "every",
    "word",
    "starts",
    "capital",
    "method",
    "checks",
    "many",
    "times",
    "local",
    "storage",
    "set",
    "item",
    "called",
    "code",
    "expect",
    "called",
    "inside",
    "add",
    "cart",
    "going",
    "give",
    "number",
    "one",
    "keep",
    "mind",
    "works",
    "method",
    "mocked",
    "spy",
    "let",
    "save",
    "open",
    "test",
    "page",
    "see",
    "tests",
    "passed",
    "local",
    "storage",
    "set",
    "item",
    "called",
    "mock",
    "method",
    "check",
    "many",
    "times",
    "method",
    "called",
    "even",
    "check",
    "values",
    "method",
    "received",
    "leave",
    "exercise",
    "another",
    "thing",
    "notice",
    "test",
    "multiple",
    "expectations",
    "test",
    "pass",
    "expectations",
    "pass",
    "let",
    "add",
    "expectations",
    "test",
    "practice",
    "one",
    "thing",
    "check",
    "check",
    "first",
    "product",
    "cart",
    "make",
    "sure",
    "product",
    "id",
    "matches",
    "string",
    "let",
    "use",
    "another",
    "expect",
    "brackets",
    "going",
    "check",
    "first",
    "product",
    "cart",
    "using",
    "cart",
    "square",
    "bracket",
    "0",
    "going",
    "object",
    "object",
    "going",
    "property",
    "called",
    "product",
    "id",
    "get",
    "dot",
    "product",
    "id",
    "going",
    "check",
    "product",
    "id",
    "equal",
    "string",
    "use",
    "dot",
    "2",
    "equal",
    "method",
    "brackets",
    "give",
    "string",
    "let",
    "select",
    "rightclick",
    "copy",
    "right",
    "click",
    "paste",
    "another",
    "thing",
    "check",
    "quantity",
    "add",
    "new",
    "product",
    "cart",
    "quantity",
    "start",
    "one",
    "going",
    "add",
    "another",
    "expect",
    "brackets",
    "going",
    "check",
    "first",
    "product",
    "cart",
    "square",
    "bracket",
    "quantity",
    "2",
    "equal",
    "brackets",
    "one",
    "save",
    "let",
    "open",
    "test",
    "page",
    "see",
    "expectations",
    "passed",
    "let",
    "move",
    "create",
    "test",
    "adding",
    "existing",
    "product",
    "cart",
    "go",
    "back",
    "code",
    "scroll",
    "first",
    "test",
    "first",
    "need",
    "set",
    "cart",
    "already",
    "contains",
    "product",
    "want",
    "add",
    "going",
    "mark",
    "local",
    "storage",
    "getet",
    "item",
    "reuse",
    "code",
    "going",
    "select",
    "code",
    "right",
    "click",
    "copy",
    "first",
    "test",
    "rightclick",
    "paste",
    "time",
    "set",
    "test",
    "going",
    "put",
    "product",
    "cart",
    "beginning",
    "going",
    "add",
    "product",
    "cart",
    "inside",
    "cart",
    "array",
    "let",
    "add",
    "object",
    "product",
    "property",
    "called",
    "product",
    "id",
    "going",
    "add",
    "property",
    "product",
    "id",
    "colon",
    "let",
    "give",
    "product",
    "id",
    "used",
    "select",
    "right",
    "click",
    "copy",
    "going",
    "right",
    "click",
    "paste",
    "comma",
    "product",
    "also",
    "quantity",
    "give",
    "quantity",
    "colon",
    "let",
    "give",
    "one",
    "comma",
    "also",
    "delivery",
    "option",
    "delivery",
    "option",
    "id",
    "colon",
    "let",
    "give",
    "string",
    "one",
    "save",
    "local",
    "storage",
    "getet",
    "item",
    "give",
    "back",
    "array",
    "starting",
    "cart",
    "need",
    "make",
    "sure",
    "reload",
    "cart",
    "storage",
    "next",
    "let",
    "scroll",
    "let",
    "copy",
    "rest",
    "tests",
    "going",
    "similar",
    "going",
    "select",
    "code",
    "rightclick",
    "copy",
    "create",
    "new",
    "lines",
    "right",
    "click",
    "paste",
    "also",
    "one",
    "thing",
    "forgot",
    "copy",
    "mock",
    "local",
    "storage",
    "set",
    "item",
    "top",
    "let",
    "also",
    "spy",
    "brackets",
    "local",
    "storage",
    "comma",
    "string",
    "set",
    "item",
    "mock",
    "lasts",
    "one",
    "test",
    "test",
    "finished",
    "method",
    "longer",
    "mocked",
    "test",
    "also",
    "mock",
    "local",
    "storage",
    "set",
    "item",
    "test",
    "going",
    "modify",
    "expectations",
    "make",
    "sense",
    "test",
    "add",
    "existing",
    "product",
    "cart",
    "cart",
    "length",
    "still",
    "equal",
    "one",
    "product",
    "ids",
    "match",
    "increasing",
    "quantity",
    "still",
    "going",
    "call",
    "local",
    "storage",
    "set",
    "item",
    "correct",
    "still",
    "first",
    "item",
    "cart",
    "going",
    "product",
    "id",
    "thing",
    "going",
    "change",
    "quantity",
    "going",
    "increase",
    "one",
    "going",
    "go",
    "one",
    "two",
    "time",
    "everything",
    "except",
    "add",
    "existing",
    "product",
    "increasing",
    "quantity",
    "let",
    "save",
    "check",
    "test",
    "page",
    "existing",
    "product",
    "test",
    "passing",
    "created",
    "tests",
    "add",
    "cart",
    "function",
    "let",
    "cleanup",
    "actually",
    "going",
    "remove",
    "everything",
    "local",
    "storage",
    "since",
    "modifying",
    "earlier",
    "test",
    "might",
    "messed",
    "page",
    "going",
    "rightclick",
    "inspect",
    "open",
    "console",
    "remove",
    "everything",
    "local",
    "storage",
    "going",
    "type",
    "code",
    "local",
    "capital",
    "storage",
    "clear",
    "brackets",
    "press",
    "enter",
    "refresh",
    "page",
    "finally",
    "let",
    "go",
    "get",
    "save",
    "changes",
    "open",
    "code",
    "close",
    "one",
    "open",
    "get",
    "section",
    "cart",
    "js",
    "top",
    "basically",
    "put",
    "code",
    "loads",
    "cart",
    "function",
    "use",
    "tests",
    "moved",
    "money",
    "utils",
    "folder",
    "loading",
    "new",
    "cart",
    "file",
    "inside",
    "cart",
    "added",
    "tests",
    "add",
    "cart",
    "function",
    "let",
    "create",
    "message",
    "describing",
    "changes",
    "create",
    "automated",
    "tests",
    "add",
    "cart",
    "commit",
    "last",
    "thing",
    "going",
    "learn",
    "lesson",
    "create",
    "complicated",
    "tests",
    "far",
    "testing",
    "single",
    "function",
    "example",
    "tested",
    "add",
    "card",
    "function",
    "well",
    "format",
    "currency",
    "function",
    "called",
    "unit",
    "tests",
    "testing",
    "one",
    "unit",
    "one",
    "piece",
    "code",
    "want",
    "test",
    "whole",
    "page",
    "part",
    "page",
    "requires",
    "complicated",
    "test",
    "called",
    "integration",
    "test",
    "integration",
    "test",
    "tests",
    "many",
    "units",
    "code",
    "pieces",
    "code",
    "working",
    "together",
    "example",
    "code",
    "going",
    "go",
    "scripts",
    "checkout",
    "thee",
    "orders",
    "summary",
    "js",
    "file",
    "going",
    "test",
    "render",
    "order",
    "summary",
    "function",
    "function",
    "creates",
    "whole",
    "section",
    "checkout",
    "page",
    "uses",
    "many",
    "different",
    "functions",
    "libraries",
    "create",
    "page",
    "testing",
    "function",
    "considered",
    "integration",
    "test",
    "uses",
    "many",
    "different",
    "pieces",
    "code",
    "units",
    "code",
    "together",
    "let",
    "start",
    "creating",
    "test",
    "file",
    "function",
    "orders",
    "summary",
    "js",
    "file",
    "inside",
    "test",
    "let",
    "match",
    "file",
    "structure",
    "going",
    "click",
    "jasmin",
    "first",
    "going",
    "create",
    "checkout",
    "folder",
    "click",
    "create",
    "folder",
    "going",
    "name",
    "checkout",
    "press",
    "enter",
    "inside",
    "checkout",
    "folder",
    "going",
    "create",
    "new",
    "file",
    "click",
    "create",
    "new",
    "file",
    "name",
    "order",
    "summary",
    "add",
    "test",
    "press",
    "enter",
    "matching",
    "file",
    "structure",
    "clear",
    "test",
    "file",
    "going",
    "test",
    "ord",
    "summary",
    "js",
    "video",
    "going",
    "drag",
    "file",
    "top",
    "see",
    "test",
    "side",
    "side",
    "going",
    "test",
    "render",
    "order",
    "summary",
    "function",
    "first",
    "going",
    "import",
    "function",
    "test",
    "file",
    "top",
    "import",
    "curly",
    "brackets",
    "render",
    "order",
    "summary",
    "function",
    "string",
    "going",
    "locate",
    "file",
    "first",
    "need",
    "get",
    "checkout",
    "folder",
    "test",
    "jasmine",
    "folder",
    "use",
    "two",
    "slash",
    "slash",
    "going",
    "go",
    "scripts",
    "folder",
    "checkout",
    "folder",
    "scripts",
    "slash",
    "checkout",
    "slash",
    "load",
    "order",
    "music",
    "order",
    "summary",
    "comma",
    "function",
    "brackets",
    "arrow",
    "curler",
    "brackets",
    "test",
    "cases",
    "create",
    "render",
    "order",
    "summary",
    "creates",
    "part",
    "page",
    "testing",
    "page",
    "two",
    "things",
    "need",
    "test",
    "page",
    "looks",
    "page",
    "behaves",
    "let",
    "start",
    "testing",
    "page",
    "looks",
    "inside",
    "test",
    "suite",
    "going",
    "create",
    "test",
    "using",
    "brackets",
    "name",
    "test",
    "string",
    "basic",
    "test",
    "case",
    "describe",
    "function",
    "displays",
    "cart",
    "comma",
    "give",
    "function",
    "brackets",
    "arrow",
    "curly",
    "brackets",
    "ready",
    "create",
    "test",
    "render",
    "order",
    "summary",
    "usually",
    "displays",
    "cart",
    "page",
    "however",
    "tests",
    "cart",
    "get",
    "displayed",
    "look",
    "code",
    "function",
    "scroll",
    "generate",
    "html",
    "cart",
    "generate",
    "html",
    "put",
    "html",
    "inside",
    "element",
    "class",
    "summary",
    "however",
    "element",
    "tests",
    "fix",
    "going",
    "create",
    "element",
    "class",
    "summary",
    "going",
    "scroll",
    "going",
    "open",
    "file",
    "bottom",
    "going",
    "go",
    "body",
    "inside",
    "going",
    "create",
    "div",
    "less",
    "div",
    "greater",
    "remember",
    "said",
    "need",
    "create",
    "create",
    "element",
    "class",
    "summary",
    "going",
    "create",
    "element",
    "put",
    "inside",
    "div",
    "div",
    "going",
    "act",
    "like",
    "container",
    "reason",
    "use",
    "container",
    "create",
    "elements",
    "test",
    "want",
    "modifying",
    "entire",
    "body",
    "body",
    "might",
    "contain",
    "test",
    "results",
    "jasine",
    "put",
    "everything",
    "inside",
    "container",
    "let",
    "give",
    "div",
    "class",
    "use",
    "javascript",
    "going",
    "give",
    "class",
    "equals",
    "double",
    "quotes",
    "going",
    "call",
    "container",
    "make",
    "clear",
    "container",
    "test",
    "code",
    "save",
    "let",
    "get",
    "container",
    "tests",
    "using",
    "document",
    "query",
    "selector",
    "brackets",
    "string",
    "select",
    "class",
    "using",
    "using",
    "container",
    "inside",
    "container",
    "going",
    "create",
    "element",
    "class",
    "summary",
    "put",
    "something",
    "inside",
    "element",
    "going",
    "use",
    "property",
    "inner",
    "capital",
    "html",
    "equals",
    "template",
    "string",
    "inside",
    "template",
    "let",
    "create",
    "div",
    "element",
    "less",
    "div",
    "greater",
    "less",
    "sl",
    "div",
    "greater",
    "mentioned",
    "give",
    "element",
    "class",
    "equals",
    "double",
    "quotes",
    "summary",
    "basically",
    "takes",
    "html",
    "puts",
    "inside",
    "test",
    "container",
    "put",
    "inside",
    "element",
    "need",
    "render",
    "order",
    "summary",
    "call",
    "function",
    "going",
    "create",
    "cart",
    "display",
    "element",
    "next",
    "look",
    "code",
    "render",
    "order",
    "summary",
    "scroll",
    "top",
    "notice",
    "takes",
    "cart",
    "displays",
    "page",
    "remember",
    "default",
    "load",
    "cart",
    "local",
    "storage",
    "cause",
    "problems",
    "test",
    "depending",
    "inside",
    "local",
    "storage",
    "fix",
    "going",
    "mock",
    "local",
    "storage",
    "getet",
    "item",
    "control",
    "exactly",
    "inside",
    "cart",
    "let",
    "actually",
    "open",
    "cart",
    "test",
    "going",
    "copy",
    "paste",
    "mock",
    "created",
    "going",
    "start",
    "function",
    "going",
    "select",
    "code",
    "spy",
    "get",
    "item",
    "rightclick",
    "copy",
    "going",
    "rightclick",
    "paste",
    "one",
    "thing",
    "need",
    "access",
    "load",
    "storage",
    "right",
    "need",
    "import",
    "top",
    "let",
    "also",
    "copy",
    "import",
    "going",
    "select",
    "right",
    "click",
    "copy",
    "going",
    "rightclick",
    "paste",
    "import",
    "need",
    "make",
    "sure",
    "file",
    "path",
    "locates",
    "cart",
    "js",
    "slash",
    "going",
    "go",
    "outside",
    "checkout",
    "outside",
    "jasmin",
    "go",
    "inside",
    "data",
    "folder",
    "locate",
    "card",
    "js",
    "file",
    "path",
    "correct",
    "currently",
    "using",
    "two",
    "values",
    "remove",
    "let",
    "set",
    "cart",
    "test",
    "could",
    "use",
    "cart",
    "however",
    "make",
    "test",
    "little",
    "detailed",
    "let",
    "open",
    "cart",
    "js",
    "file",
    "top",
    "going",
    "use",
    "default",
    "card",
    "instead",
    "two",
    "products",
    "different",
    "quantities",
    "test",
    "things",
    "going",
    "select",
    "card",
    "right",
    "click",
    "copy",
    "open",
    "order",
    "summary",
    "test",
    "going",
    "select",
    "card",
    "remove",
    "inside",
    "brackets",
    "going",
    "right",
    "click",
    "paste",
    "default",
    "cart",
    "html",
    "cart",
    "set",
    "function",
    "bottom",
    "call",
    "function",
    "render",
    "order",
    "summary",
    "brackets",
    "save",
    "let",
    "run",
    "test",
    "file",
    "going",
    "open",
    "beneath",
    "tests",
    "going",
    "add",
    "another",
    "script",
    "tech",
    "less",
    "script",
    "source",
    "equals",
    "load",
    "checkout",
    "slash",
    "order",
    "summary",
    "file",
    "need",
    "give",
    "attribute",
    "type",
    "ty",
    "equals",
    "module",
    "used",
    "imports",
    "let",
    "save",
    "run",
    "test",
    "open",
    "test",
    "page",
    "see",
    "cart",
    "rendered",
    "onto",
    "test",
    "page",
    "still",
    "jasmine",
    "results",
    "bottom",
    "notice",
    "render",
    "load",
    "css",
    "images",
    "okay",
    "ca",
    "really",
    "use",
    "code",
    "check",
    "page",
    "visually",
    "looks",
    "correct",
    "however",
    "use",
    "check",
    "contents",
    "page",
    "like",
    "products",
    "quantities",
    "correct",
    "first",
    "cart",
    "two",
    "products",
    "check",
    "two",
    "products",
    "rendered",
    "page",
    "let",
    "go",
    "back",
    "tests",
    "let",
    "take",
    "look",
    "orderers",
    "summary",
    "js",
    "file",
    "render",
    "order",
    "summary",
    "scroll",
    "product",
    "cart",
    "create",
    "element",
    "class",
    "cart",
    "container",
    "since",
    "two",
    "products",
    "cart",
    "let",
    "check",
    "created",
    "two",
    "elements",
    "page",
    "going",
    "open",
    "order",
    "summary",
    "file",
    "first",
    "test",
    "bottom",
    "test",
    "going",
    "add",
    "lines",
    "going",
    "check",
    "two",
    "elements",
    "use",
    "dom",
    "using",
    "document",
    "query",
    "selector",
    "brackets",
    "string",
    "could",
    "select",
    "class",
    "item",
    "container",
    "however",
    "class",
    "used",
    "css",
    "remember",
    "going",
    "use",
    "class",
    "javascript",
    "start",
    "let",
    "add",
    "new",
    "class",
    "element",
    "use",
    "test",
    "add",
    "cart",
    "item",
    "container",
    "going",
    "select",
    "elements",
    "class",
    "using",
    "item",
    "container",
    "let",
    "save",
    "ord",
    "summary",
    "js",
    "file",
    "going",
    "check",
    "two",
    "elements",
    "page",
    "check",
    "something",
    "tests",
    "going",
    "use",
    "function",
    "expect",
    "open",
    "bracket",
    "let",
    "create",
    "new",
    "line",
    "make",
    "little",
    "cleaner",
    "end",
    "give",
    "clos",
    "bracket",
    "like",
    "code",
    "gives",
    "us",
    "array",
    "elements",
    "going",
    "check",
    "dot",
    "length",
    "equal",
    "two",
    "expect",
    "gives",
    "us",
    "object",
    "method",
    "called",
    "dot",
    "2",
    "equal",
    "brackets",
    "two",
    "checks",
    "two",
    "elements",
    "page",
    "let",
    "save",
    "check",
    "test",
    "page",
    "scroll",
    "bottom",
    "see",
    "test",
    "passed",
    "check",
    "render",
    "page",
    "correctly",
    "next",
    "let",
    "another",
    "check",
    "rendered",
    "page",
    "another",
    "thing",
    "test",
    "product",
    "quantities",
    "correct",
    "first",
    "need",
    "get",
    "quantity",
    "element",
    "tests",
    "go",
    "back",
    "code",
    "inside",
    "html",
    "order",
    "summary",
    "going",
    "scroll",
    "see",
    "div",
    "class",
    "quantity",
    "displaying",
    "quant",
    "going",
    "take",
    "element",
    "put",
    "test",
    "check",
    "quantity",
    "correct",
    "let",
    "give",
    "another",
    "class",
    "element",
    "select",
    "using",
    "javascript",
    "add",
    "another",
    "class",
    "quantity",
    "want",
    "check",
    "quantity",
    "product",
    "need",
    "identify",
    "product",
    "adding",
    "dash",
    "class",
    "inserting",
    "using",
    "dollar",
    "curly",
    "brackets",
    "products",
    "id",
    "matching",
    "product",
    "matching",
    "product",
    "id",
    "save",
    "let",
    "get",
    "element",
    "test",
    "going",
    "document",
    "query",
    "selector",
    "brackets",
    "give",
    "template",
    "string",
    "going",
    "insert",
    "product",
    "id",
    "going",
    "select",
    "class",
    "using",
    "quantity",
    "dash",
    "insert",
    "product",
    "id",
    "cart",
    "two",
    "products",
    "let",
    "start",
    "first",
    "product",
    "id",
    "make",
    "easier",
    "let",
    "put",
    "string",
    "inside",
    "variable",
    "reuse",
    "let",
    "create",
    "variable",
    "const",
    "call",
    "product",
    "id1",
    "equals",
    "going",
    "select",
    "id",
    "right",
    "click",
    "cut",
    "rightclick",
    "paste",
    "going",
    "use",
    "variable",
    "product",
    "id1",
    "getting",
    "element",
    "code",
    "also",
    "going",
    "insert",
    "product",
    "id",
    "product",
    "id1",
    "going",
    "check",
    "text",
    "inside",
    "correct",
    "first",
    "product",
    "quantity",
    "two",
    "text",
    "inside",
    "element",
    "say",
    "quantity",
    "colon",
    "2",
    "check",
    "bottom",
    "test",
    "usual",
    "going",
    "use",
    "function",
    "expect",
    "open",
    "bracket",
    "new",
    "line",
    "remove",
    "semicolon",
    "close",
    "bracket",
    "going",
    "get",
    "text",
    "inside",
    "element",
    "going",
    "usein",
    "html",
    "element",
    "contains",
    "bunch",
    "html",
    "inside",
    "want",
    "text",
    "get",
    "text",
    "going",
    "use",
    "property",
    "inner",
    "text",
    "expect",
    "text",
    "inside",
    "element",
    "contain",
    "quantity",
    "colon",
    "2",
    "however",
    "element",
    "also",
    "text",
    "like",
    "update",
    "delete",
    "want",
    "check",
    "quantity",
    "2",
    "somewhere",
    "inside",
    "element",
    "check",
    "going",
    "use",
    "different",
    "method",
    "expect",
    "called",
    "dot",
    "contain",
    "brackets",
    "going",
    "give",
    "string",
    "want",
    "check",
    "capital",
    "q",
    "quantity",
    "colon",
    "2",
    "two",
    "contain",
    "method",
    "checks",
    "value",
    "contains",
    "string",
    "exact",
    "match",
    "like",
    "two",
    "equal",
    "long",
    "quantity",
    "colon",
    "2",
    "somewhere",
    "element",
    "expectation",
    "pass",
    "exactly",
    "need",
    "el",
    "extra",
    "text",
    "really",
    "need",
    "check",
    "let",
    "click",
    "test",
    "file",
    "save",
    "open",
    "test",
    "page",
    "scroll",
    "bottom",
    "notice",
    "test",
    "passed",
    "first",
    "product",
    "displaying",
    "quantity",
    "two",
    "correctly",
    "let",
    "also",
    "check",
    "quantity",
    "second",
    "product",
    "go",
    "back",
    "tests",
    "like",
    "let",
    "create",
    "variable",
    "store",
    "id",
    "create",
    "variable",
    "const",
    "product",
    "id2",
    "equals",
    "select",
    "id",
    "right",
    "click",
    "copy",
    "right",
    "click",
    "paste",
    "remove",
    "use",
    "variable",
    "product",
    "id2",
    "bottom",
    "going",
    "get",
    "quantity",
    "element",
    "product",
    "2",
    "let",
    "copy",
    "code",
    "similar",
    "select",
    "right",
    "click",
    "copy",
    "right",
    "click",
    "paste",
    "time",
    "going",
    "get",
    "quantity",
    "element",
    "product",
    "id",
    "2",
    "cart",
    "product",
    "two",
    "quantity",
    "one",
    "going",
    "check",
    "text",
    "contains",
    "quantity",
    "colon",
    "1",
    "save",
    "let",
    "open",
    "test",
    "page",
    "scroll",
    "bottom",
    "test",
    "passed",
    "displaying",
    "quantity",
    "products",
    "correctly",
    "page",
    "second",
    "thing",
    "test",
    "integration",
    "test",
    "page",
    "behaves",
    "example",
    "page",
    "click",
    "delete",
    "link",
    "remove",
    "product",
    "page",
    "let",
    "create",
    "new",
    "test",
    "make",
    "sure",
    "delete",
    "link",
    "behaves",
    "correctly",
    "open",
    "test",
    "code",
    "bottom",
    "going",
    "create",
    "new",
    "test",
    "using",
    "function",
    "brackets",
    "give",
    "name",
    "let",
    "describe",
    "behavior",
    "removes",
    "product",
    "comma",
    "function",
    "brackets",
    "arrow",
    "curler",
    "brackets",
    "let",
    "setup",
    "first",
    "test",
    "start",
    "two",
    "products",
    "cart",
    "select",
    "load",
    "storage",
    "select",
    "code",
    "rightclick",
    "copy",
    "bottom",
    "going",
    "right",
    "click",
    "paste",
    "set",
    "html",
    "element",
    "need",
    "order",
    "summary",
    "well",
    "cart",
    "let",
    "render",
    "order",
    "summary",
    "using",
    "function",
    "render",
    "order",
    "summary",
    "brackets",
    "displayed",
    "page",
    "going",
    "get",
    "delete",
    "link",
    "click",
    "first",
    "let",
    "get",
    "delete",
    "link",
    "code",
    "go",
    "orders",
    "summary",
    "js",
    "file",
    "inside",
    "html",
    "going",
    "scroll",
    "bit",
    "till",
    "see",
    "delete",
    "quantity",
    "link",
    "let",
    "test",
    "delete",
    "link",
    "first",
    "product",
    "cart",
    "first",
    "need",
    "add",
    "class",
    "element",
    "know",
    "product",
    "going",
    "add",
    "class",
    "jf",
    "delete",
    "dink",
    "dash",
    "insert",
    "product",
    "id",
    "matching",
    "product",
    "doid",
    "add",
    "new",
    "line",
    "make",
    "code",
    "little",
    "bit",
    "cleaner",
    "save",
    "going",
    "get",
    "delete",
    "link",
    "first",
    "product",
    "id",
    "bottom",
    "use",
    "document",
    "query",
    "selector",
    "brackets",
    "give",
    "template",
    "string",
    "going",
    "insert",
    "product",
    "id",
    "select",
    "class",
    "using",
    "delete",
    "dlink",
    "insert",
    "dollar",
    "curly",
    "brackets",
    "product",
    "id1",
    "need",
    "click",
    "delete",
    "link",
    "remove",
    "first",
    "product",
    "page",
    "cart",
    "click",
    "element",
    "using",
    "code",
    "get",
    "using",
    "dom",
    "use",
    "method",
    "dot",
    "click",
    "brackets",
    "click",
    "delete",
    "first",
    "product",
    "remove",
    "let",
    "save",
    "take",
    "look",
    "test",
    "page",
    "unfortunately",
    "test",
    "failed",
    "let",
    "take",
    "look",
    "details",
    "failure",
    "figure",
    "fix",
    "telling",
    "us",
    "set",
    "properties",
    "null",
    "means",
    "value",
    "code",
    "null",
    "trying",
    "give",
    "property",
    "tell",
    "us",
    "line",
    "got",
    "error",
    "error",
    "happened",
    "test",
    "file",
    "line",
    "created",
    "error",
    "ord",
    "summary",
    "js",
    "line",
    "132",
    "whatever",
    "line",
    "see",
    "page",
    "inside",
    "code",
    "going",
    "open",
    "orders",
    "summary",
    "js",
    "going",
    "scroll",
    "line",
    "132",
    "scroll",
    "line",
    "got",
    "page",
    "line",
    "code",
    "actually",
    "part",
    "code",
    "run",
    "click",
    "delete",
    "remember",
    "click",
    "delete",
    "also",
    "update",
    "payment",
    "summary",
    "right",
    "side",
    "page",
    "line",
    "reason",
    "working",
    "open",
    "payment",
    "summary",
    "js",
    "file",
    "look",
    "bottom",
    "generate",
    "html",
    "try",
    "put",
    "html",
    "element",
    "class",
    "payment",
    "summary",
    "element",
    "exist",
    "tests",
    "one",
    "way",
    "fix",
    "add",
    "element",
    "test",
    "let",
    "open",
    "test",
    "open",
    "order",
    "summary",
    "scroll",
    "create",
    "order",
    "summary",
    "element",
    "also",
    "going",
    "create",
    "payment",
    "summary",
    "element",
    "create",
    "less",
    "div",
    "greater",
    "less",
    "sl",
    "div",
    "greater",
    "give",
    "class",
    "equals",
    "double",
    "quotes",
    "give",
    "class",
    "payment",
    "summary",
    "needs",
    "payment",
    "summary",
    "save",
    "payment",
    "summary",
    "element",
    "set",
    "open",
    "test",
    "page",
    "test",
    "longer",
    "failure",
    "also",
    "notice",
    "payment",
    "summary",
    "got",
    "rendered",
    "displayed",
    "page",
    "okay",
    "tests",
    "clicked",
    "delete",
    "link",
    "first",
    "product",
    "actually",
    "check",
    "page",
    "looks",
    "correct",
    "shows",
    "yellow",
    "dot",
    "test",
    "expectations",
    "yet",
    "let",
    "go",
    "back",
    "test",
    "add",
    "expectations",
    "bottom",
    "scroll",
    "click",
    "delete",
    "first",
    "product",
    "expect",
    "one",
    "element",
    "left",
    "page",
    "cart",
    "first",
    "test",
    "actually",
    "check",
    "scroll",
    "check",
    "two",
    "cart",
    "item",
    "containers",
    "page",
    "let",
    "reuse",
    "check",
    "similar",
    "select",
    "right",
    "click",
    "copy",
    "going",
    "right",
    "click",
    "paste",
    "time",
    "expect",
    "one",
    "cart",
    "item",
    "container",
    "left",
    "page",
    "change",
    "one",
    "save",
    "open",
    "test",
    "page",
    "scroll",
    "test",
    "passed",
    "let",
    "also",
    "detailed",
    "check",
    "going",
    "check",
    "first",
    "product",
    "longer",
    "page",
    "go",
    "back",
    "tests",
    "going",
    "get",
    "card",
    "item",
    "container",
    "first",
    "product",
    "use",
    "document",
    "query",
    "selector",
    "brackets",
    "get",
    "element",
    "first",
    "product",
    "going",
    "open",
    "orders",
    "summary",
    "js",
    "scroll",
    "html",
    "find",
    "cart",
    "item",
    "container",
    "element",
    "going",
    "look",
    "class",
    "right",
    "tells",
    "us",
    "product",
    "element",
    "give",
    "template",
    "string",
    "insert",
    "product",
    "id",
    "look",
    "class",
    "using",
    "js",
    "item",
    "das",
    "container",
    "dash",
    "insert",
    "first",
    "product",
    "product",
    "id1",
    "removed",
    "product",
    "page",
    "expect",
    "result",
    "null",
    "use",
    "function",
    "expect",
    "open",
    "bracket",
    "new",
    "line",
    "close",
    "bracket",
    "use",
    "method",
    "do2",
    "equal",
    "brackets",
    "expect",
    "null",
    "save",
    "let",
    "also",
    "check",
    "second",
    "product",
    "still",
    "page",
    "delete",
    "let",
    "make",
    "copy",
    "check",
    "select",
    "right",
    "click",
    "copy",
    "right",
    "click",
    "paste",
    "get",
    "element",
    "product",
    "id",
    "2",
    "time",
    "want",
    "make",
    "sure",
    "exists",
    "equal",
    "null",
    "jasmine",
    "check",
    "something",
    "equal",
    "expect",
    "gives",
    "us",
    "another",
    "property",
    "use",
    "called",
    "dot",
    "use",
    "theot",
    "property",
    "check",
    "opposite",
    "whatever",
    "next",
    "check",
    "value",
    "equal",
    "null",
    "remember",
    "code",
    "jasmine",
    "designed",
    "read",
    "like",
    "english",
    "let",
    "save",
    "check",
    "test",
    "page",
    "scroll",
    "test",
    "passed",
    "displaying",
    "correct",
    "products",
    "page",
    "deleting",
    "one",
    "thing",
    "need",
    "check",
    "deleting",
    "cart",
    "array",
    "updated",
    "go",
    "back",
    "code",
    "add",
    "check",
    "first",
    "need",
    "import",
    "cart",
    "use",
    "test",
    "going",
    "scroll",
    "top",
    "already",
    "importing",
    "cart",
    "js",
    "add",
    "comma",
    "import",
    "cart",
    "bottom",
    "going",
    "check",
    "card",
    "correct",
    "cart",
    "started",
    "two",
    "products",
    "inside",
    "removing",
    "first",
    "product",
    "card",
    "length",
    "one",
    "remaining",
    "product",
    "product",
    "id2",
    "let",
    "add",
    "checks",
    "bottom",
    "scroll",
    "back",
    "use",
    "expect",
    "brackets",
    "check",
    "cart",
    "length",
    "2",
    "equal",
    "brackets",
    "1",
    "also",
    "expect",
    "brackets",
    "check",
    "first",
    "product",
    "cart",
    "cart",
    "square",
    "bracket",
    "0",
    "check",
    "product",
    "id",
    "do2",
    "equal",
    "equal",
    "product",
    "id",
    "2",
    "product",
    "id2",
    "save",
    "let",
    "open",
    "test",
    "page",
    "scroll",
    "bottom",
    "test",
    "still",
    "passed",
    "click",
    "delete",
    "card",
    "array",
    "also",
    "correct",
    "create",
    "integration",
    "test",
    "tests",
    "many",
    "units",
    "code",
    "pieces",
    "code",
    "working",
    "together",
    "lets",
    "us",
    "test",
    "page",
    "looks",
    "page",
    "behaves",
    "one",
    "thing",
    "forgot",
    "created",
    "tests",
    "look",
    "code",
    "going",
    "open",
    "orders",
    "summary",
    "js",
    "click",
    "delete",
    "bottom",
    "uses",
    "function",
    "called",
    "remove",
    "cart",
    "look",
    "code",
    "function",
    "right",
    "remove",
    "cart",
    "function",
    "actually",
    "saves",
    "cart",
    "local",
    "storage",
    "calls",
    "local",
    "storage",
    "set",
    "item",
    "however",
    "recommended",
    "modify",
    "local",
    "storage",
    "test",
    "inside",
    "order",
    "summary",
    "test",
    "file",
    "also",
    "mock",
    "local",
    "storage",
    "set",
    "item",
    "test",
    "scroll",
    "top",
    "start",
    "test",
    "let",
    "mock",
    "set",
    "item",
    "using",
    "spy",
    "brackets",
    "local",
    "storage",
    "comma",
    "string",
    "set",
    "item",
    "save",
    "open",
    "test",
    "page",
    "make",
    "sure",
    "test",
    "still",
    "passes",
    "might",
    "messed",
    "local",
    "storage",
    "mistake",
    "let",
    "reset",
    "local",
    "storage",
    "right",
    "click",
    "page",
    "inspect",
    "open",
    "console",
    "type",
    "code",
    "local",
    "storage",
    "cle",
    "brackets",
    "press",
    "enter",
    "refresh",
    "page",
    "safe",
    "another",
    "thing",
    "might",
    "want",
    "add",
    "render",
    "order",
    "summary",
    "page",
    "taking",
    "lot",
    "space",
    "pushes",
    "test",
    "results",
    "bottom",
    "test",
    "actually",
    "remove",
    "html",
    "let",
    "go",
    "back",
    "code",
    "order",
    "summary",
    "test",
    "file",
    "end",
    "first",
    "test",
    "create",
    "new",
    "lines",
    "remove",
    "html",
    "created",
    "scroll",
    "code",
    "remove",
    "html",
    "set",
    "element",
    "inner",
    "html",
    "empty",
    "string",
    "select",
    "code",
    "right",
    "click",
    "copy",
    "right",
    "click",
    "paste",
    "test",
    "html",
    "created",
    "placed",
    "inside",
    "test",
    "container",
    "going",
    "remove",
    "html",
    "setting",
    "inner",
    "html",
    "empty",
    "string",
    "thing",
    "second",
    "test",
    "select",
    "code",
    "rightclick",
    "copy",
    "bottom",
    "right",
    "click",
    "paste",
    "cleanup",
    "end",
    "test",
    "let",
    "save",
    "look",
    "test",
    "page",
    "html",
    "generated",
    "gone",
    "see",
    "test",
    "results",
    "clearly",
    "lastly",
    "going",
    "learn",
    "shortcut",
    "use",
    "jasmine",
    "called",
    "hooks",
    "hook",
    "lets",
    "us",
    "run",
    "code",
    "test",
    "example",
    "go",
    "back",
    "code",
    "notice",
    "tests",
    "bunch",
    "setup",
    "actually",
    "share",
    "code",
    "two",
    "tests",
    "using",
    "hook",
    "create",
    "hook",
    "going",
    "scroll",
    "outside",
    "tests",
    "top",
    "test",
    "suite",
    "going",
    "use",
    "another",
    "function",
    "provided",
    "jasmine",
    "called",
    "capital",
    "e",
    "brackets",
    "give",
    "function",
    "brackets",
    "arrow",
    "curler",
    "brackets",
    "called",
    "hook",
    "run",
    "function",
    "tests",
    "inside",
    "function",
    "put",
    "setup",
    "code",
    "run",
    "setup",
    "code",
    "tests",
    "let",
    "actually",
    "take",
    "setup",
    "code",
    "second",
    "test",
    "little",
    "detailed",
    "going",
    "select",
    "code",
    "starting",
    "render",
    "order",
    "summary",
    "way",
    "mocking",
    "local",
    "storage",
    "set",
    "item",
    "rightclick",
    "cut",
    "code",
    "remove",
    "new",
    "lines",
    "top",
    "inside",
    "going",
    "rightclick",
    "paste",
    "tests",
    "going",
    "run",
    "function",
    "going",
    "run",
    "setup",
    "code",
    "great",
    "way",
    "share",
    "code",
    "tests",
    "remove",
    "duplication",
    "running",
    "inside",
    "scroll",
    "first",
    "test",
    "run",
    "code",
    "actually",
    "remove",
    "remove",
    "mock",
    "remove",
    "render",
    "order",
    "summary",
    "w",
    "left",
    "expectations",
    "test",
    "save",
    "need",
    "fix",
    "one",
    "thing",
    "code",
    "right",
    "two",
    "variables",
    "inside",
    "function",
    "scope",
    "contained",
    "inside",
    "function",
    "ca",
    "use",
    "tests",
    "fix",
    "move",
    "variables",
    "outside",
    "function",
    "going",
    "select",
    "lines",
    "right",
    "click",
    "cut",
    "going",
    "right",
    "click",
    "paste",
    "code",
    "inside",
    "outer",
    "function",
    "use",
    "two",
    "variables",
    "including",
    "tests",
    "let",
    "save",
    "check",
    "test",
    "page",
    "everything",
    "still",
    "still",
    "passing",
    "use",
    "hook",
    "run",
    "code",
    "test",
    "hook",
    "use",
    "jasmine",
    "provides",
    "several",
    "hooks",
    "use",
    "tests",
    "another",
    "common",
    "hook",
    "lets",
    "us",
    "run",
    "function",
    "test",
    "really",
    "useful",
    "cleanup",
    "code",
    "like",
    "remove",
    "html",
    "leave",
    "using",
    "exercise",
    "let",
    "go",
    "git",
    "save",
    "changes",
    "close",
    "three",
    "files",
    "top",
    "open",
    "git",
    "section",
    "inside",
    "orders",
    "summary",
    "js",
    "added",
    "classes",
    "going",
    "use",
    "tests",
    "inside",
    "loading",
    "order",
    "summary",
    "test",
    "file",
    "also",
    "created",
    "test",
    "container",
    "going",
    "put",
    "html",
    "generate",
    "order",
    "summary",
    "test",
    "file",
    "contains",
    "test",
    "created",
    "order",
    "summary",
    "let",
    "create",
    "message",
    "describing",
    "changes",
    "create",
    "automated",
    "tests",
    "order",
    "summary",
    "commit",
    "created",
    "tests",
    "project",
    "make",
    "changes",
    "code",
    "open",
    "testing",
    "page",
    "rerun",
    "tests",
    "process",
    "write",
    "code",
    "first",
    "make",
    "changes",
    "code",
    "rerun",
    "tests",
    "make",
    "sure",
    "everything",
    "still",
    "works",
    "finally",
    "save",
    "changes",
    "git",
    "end",
    "lesson",
    "going",
    "one",
    "cleanup",
    "go",
    "back",
    "code",
    "open",
    "files",
    "usually",
    "organize",
    "tests",
    "folder",
    "called",
    "tests",
    "however",
    "lesson",
    "named",
    "folder",
    "jasmin",
    "wanted",
    "compare",
    "folder",
    "tests",
    "created",
    "without",
    "testing",
    "framework",
    "lesson",
    "going",
    "rename",
    "jasmine",
    "test",
    "make",
    "standard",
    "first",
    "need",
    "rename",
    "folder",
    "right",
    "click",
    "rename",
    "let",
    "rename",
    "simple",
    "folder",
    "contains",
    "tests",
    "created",
    "without",
    "framework",
    "let",
    "press",
    "enter",
    "rename",
    "jasmine",
    "test",
    "right",
    "clicking",
    "rename",
    "rename",
    "tests",
    "press",
    "enter",
    "another",
    "thing",
    "going",
    "drag",
    "simple",
    "test",
    "folder",
    "tests",
    "contained",
    "one",
    "folder",
    "asks",
    "update",
    "imports",
    "click",
    "yes",
    "also",
    "need",
    "open",
    "money",
    "simple",
    "folder",
    "updated",
    "imports",
    "save",
    "file",
    "finally",
    "going",
    "run",
    "tests",
    "make",
    "sure",
    "everything",
    "still",
    "works",
    "move",
    "things",
    "around",
    "inside",
    "different",
    "folder",
    "need",
    "reopen",
    "live",
    "server",
    "rightclick",
    "click",
    "open",
    "live",
    "server",
    "show",
    "us",
    "tests",
    "still",
    "passing",
    "code",
    "still",
    "correct",
    "close",
    "extra",
    "tabs",
    "save",
    "changes",
    "git",
    "open",
    "git",
    "section",
    "changes",
    "related",
    "renaming",
    "folders",
    "give",
    "message",
    "top",
    "rename",
    "jasmine",
    "folder",
    "tests",
    "commit",
    "end",
    "lesson",
    "lesson",
    "learned",
    "test",
    "code",
    "using",
    "manual",
    "automated",
    "tests",
    "learned",
    "organize",
    "test",
    "using",
    "test",
    "cases",
    "test",
    "suites",
    "learned",
    "use",
    "testing",
    "framework",
    "like",
    "jasmine",
    "help",
    "us",
    "write",
    "tests",
    "easier",
    "learned",
    "mock",
    "spy",
    "methods",
    "learned",
    "test",
    "web",
    "pages",
    "using",
    "integration",
    "tests",
    "learned",
    "hooks",
    "lets",
    "us",
    "share",
    "code",
    "tests",
    "exercises",
    "help",
    "practice",
    "learned",
    "lesson",
    "e",
    "rest",
    "course",
    "get",
    "error",
    "project",
    "code",
    "looks",
    "correct",
    "may",
    "bad",
    "data",
    "saved",
    "local",
    "storage",
    "fix",
    "try",
    "running",
    "local",
    "storage",
    "cle",
    "console",
    "remove",
    "everything",
    "local",
    "storage",
    "refresh",
    "page",
    "see",
    "error",
    "like",
    "object",
    "object",
    "means",
    "saved",
    "something",
    "directly",
    "local",
    "storage",
    "jason",
    "stringify",
    "first",
    "check",
    "code",
    "make",
    "sure",
    "always",
    "stringifying",
    "saving",
    "local",
    "storage",
    "clear",
    "local",
    "storage",
    "refresh",
    "page",
    "lesson",
    "going",
    "learn",
    "objectoriented",
    "programming",
    "objectoriented",
    "programming",
    "oop",
    "another",
    "style",
    "programming",
    "another",
    "way",
    "write",
    "code",
    "useful",
    "know",
    "many",
    "programming",
    "languages",
    "use",
    "oop",
    "use",
    "objectoriented",
    "programming",
    "programming",
    "basically",
    "organizing",
    "code",
    "objects",
    "let",
    "look",
    "example",
    "going",
    "go",
    "code",
    "going",
    "scroll",
    "open",
    "cart",
    "js",
    "inside",
    "file",
    "code",
    "cart",
    "notice",
    "cart",
    "data",
    "top",
    "bunch",
    "functions",
    "bottom",
    "modify",
    "cart",
    "separate",
    "data",
    "functions",
    "style",
    "programming",
    "using",
    "throughout",
    "course",
    "called",
    "procedural",
    "programming",
    "procedure",
    "means",
    "set",
    "instructions",
    "basically",
    "function",
    "procedural",
    "programming",
    "organize",
    "code",
    "separate",
    "functions",
    "like",
    "hand",
    "objectoriented",
    "programming",
    "organize",
    "code",
    "object",
    "put",
    "everything",
    "together",
    "object",
    "let",
    "example",
    "convert",
    "cart",
    "code",
    "objectoriented",
    "programming",
    "going",
    "click",
    "cart",
    "js",
    "inside",
    "folder",
    "going",
    "create",
    "new",
    "file",
    "clicking",
    "let",
    "name",
    "file",
    "oop",
    "objectoriented",
    "programming",
    "js",
    "press",
    "enter",
    "going",
    "copy",
    "code",
    "cart",
    "new",
    "file",
    "let",
    "open",
    "click",
    "file",
    "type",
    "control",
    "command",
    "select",
    "code",
    "right",
    "click",
    "copy",
    "inside",
    "oop",
    "going",
    "rightclick",
    "paste",
    "let",
    "scroll",
    "back",
    "top",
    "convert",
    "code",
    "objectoriented",
    "programming",
    "going",
    "group",
    "data",
    "functions",
    "together",
    "object",
    "first",
    "top",
    "let",
    "create",
    "object",
    "put",
    "inside",
    "create",
    "variable",
    "const",
    "let",
    "call",
    "cart",
    "equals",
    "object",
    "going",
    "group",
    "data",
    "functions",
    "object",
    "let",
    "step",
    "step",
    "start",
    "cart",
    "variable",
    "reminder",
    "cart",
    "semicolon",
    "actually",
    "shortcut",
    "cart",
    "equals",
    "undefined",
    "make",
    "things",
    "easier",
    "understand",
    "let",
    "actually",
    "write",
    "full",
    "instead",
    "using",
    "shortcut",
    "type",
    "cart",
    "equals",
    "undefined",
    "going",
    "move",
    "object",
    "select",
    "line",
    "rightclick",
    "cut",
    "inside",
    "object",
    "going",
    "rightclick",
    "paste",
    "inside",
    "object",
    "ca",
    "use",
    "word",
    "export",
    "let",
    "move",
    "variable",
    "object",
    "going",
    "convert",
    "property",
    "value",
    "remove",
    "words",
    "type",
    "cart",
    "colon",
    "undefined",
    "remove",
    "semicolon",
    "replace",
    "comma",
    "thing",
    "cart",
    "equals",
    "undefined",
    "move",
    "value",
    "object",
    "one",
    "problem",
    "access",
    "cart",
    "property",
    "going",
    "cart",
    "cart",
    "bit",
    "confusing",
    "let",
    "actually",
    "rename",
    "property",
    "cart",
    "capital",
    "items",
    "instead",
    "make",
    "bit",
    "clear",
    "contains",
    "items",
    "cart",
    "products",
    "cart",
    "next",
    "going",
    "group",
    "functions",
    "object",
    "well",
    "let",
    "create",
    "new",
    "lines",
    "going",
    "move",
    "function",
    "inside",
    "let",
    "select",
    "function",
    "rightclick",
    "cut",
    "inside",
    "object",
    "going",
    "rightclick",
    "paste",
    "ca",
    "use",
    "word",
    "export",
    "inside",
    "object",
    "going",
    "convert",
    "property",
    "value",
    "well",
    "let",
    "remove",
    "words",
    "let",
    "make",
    "property",
    "name",
    "load",
    "storage",
    "type",
    "colon",
    "make",
    "value",
    "function",
    "brackets",
    "curly",
    "brackets",
    "move",
    "function",
    "object",
    "make",
    "sure",
    "use",
    "regular",
    "function",
    "syntax",
    "arrow",
    "function",
    "explain",
    "later",
    "lesson",
    "reminder",
    "function",
    "inside",
    "object",
    "call",
    "method",
    "also",
    "javascript",
    "shortcut",
    "methods",
    "called",
    "shorthand",
    "method",
    "syntax",
    "instead",
    "typing",
    "colon",
    "function",
    "actually",
    "remove",
    "code",
    "type",
    "brackets",
    "curly",
    "brackets",
    "function",
    "name",
    "shortcut",
    "code",
    "code",
    "inside",
    "function",
    "actually",
    "work",
    "anymore",
    "cart",
    "actually",
    "renamed",
    "cart",
    "items",
    "rename",
    "variable",
    "instead",
    "cart",
    "going",
    "cart",
    "dot",
    "cart",
    "items",
    "access",
    "value",
    "thing",
    "cart",
    "cart",
    "items",
    "cart",
    "doart",
    "items",
    "code",
    "works",
    "however",
    "small",
    "problem",
    "change",
    "name",
    "object",
    "code",
    "longer",
    "work",
    "solve",
    "problem",
    "javascript",
    "feature",
    "called",
    "gives",
    "us",
    "object",
    "contains",
    "function",
    "gives",
    "us",
    "outer",
    "object",
    "improve",
    "code",
    "going",
    "change",
    "using",
    "variable",
    "named",
    "cart",
    "well",
    "cart",
    "items",
    "dot",
    "card",
    "items",
    "give",
    "us",
    "outer",
    "object",
    "code",
    "always",
    "work",
    "matter",
    "variable",
    "name",
    "last",
    "thing",
    "going",
    "change",
    "function",
    "currently",
    "loading",
    "local",
    "storage",
    "cart",
    "however",
    "original",
    "cart",
    "also",
    "loading",
    "local",
    "storage",
    "cart",
    "let",
    "actually",
    "change",
    "oop",
    "affect",
    "original",
    "cart",
    "let",
    "move",
    "going",
    "move",
    "functions",
    "object",
    "let",
    "go",
    "next",
    "function",
    "save",
    "storage",
    "going",
    "select",
    "rightclick",
    "cut",
    "inside",
    "object",
    "end",
    "going",
    "add",
    "comma",
    "new",
    "lines",
    "going",
    "rightclick",
    "paste",
    "ca",
    "use",
    "word",
    "function",
    "front",
    "let",
    "remove",
    "word",
    "use",
    "shorthand",
    "method",
    "syntax",
    "shortcut",
    "colon",
    "function",
    "saving",
    "local",
    "storage",
    "cart",
    "let",
    "also",
    "change",
    "oop",
    "affect",
    "original",
    "cart",
    "change",
    "oop",
    "another",
    "thing",
    "need",
    "change",
    "cart",
    "renamed",
    "cart",
    "items",
    "going",
    "change",
    "cart",
    "gives",
    "us",
    "outer",
    "object",
    "dot",
    "cart",
    "items",
    "property",
    "thing",
    "except",
    "function",
    "inside",
    "object",
    "let",
    "continue",
    "move",
    "another",
    "function",
    "object",
    "going",
    "add",
    "cart",
    "time",
    "let",
    "select",
    "code",
    "rightclick",
    "cut",
    "inside",
    "object",
    "going",
    "add",
    "comma",
    "new",
    "lines",
    "rightclick",
    "paste",
    "instead",
    "using",
    "export",
    "function",
    "going",
    "remove",
    "code",
    "use",
    "shorthand",
    "method",
    "syntax",
    "shortcut",
    "code",
    "let",
    "update",
    "code",
    "inside",
    "function",
    "well",
    "instead",
    "cart",
    "rename",
    "cart",
    "items",
    "change",
    "cart",
    "items",
    "going",
    "change",
    "cart",
    "cart",
    "items",
    "also",
    "function",
    "save",
    "storage",
    "moved",
    "inside",
    "object",
    "access",
    "function",
    "going",
    "get",
    "outer",
    "object",
    "using",
    "dot",
    "save",
    "storage",
    "add",
    "dot",
    "front",
    "access",
    "function",
    "inside",
    "object",
    "let",
    "move",
    "move",
    "next",
    "function",
    "object",
    "select",
    "code",
    "rightclick",
    "cut",
    "inside",
    "object",
    "add",
    "comma",
    "new",
    "lines",
    "right",
    "click",
    "paste",
    "remove",
    "export",
    "function",
    "use",
    "shorthand",
    "method",
    "syntax",
    "change",
    "cart",
    "cart",
    "items",
    "going",
    "change",
    "cart",
    "cart",
    "items",
    "change",
    "save",
    "storage",
    "save",
    "storage",
    "access",
    "save",
    "storage",
    "inside",
    "object",
    "next",
    "let",
    "move",
    "last",
    "function",
    "object",
    "select",
    "code",
    "rightclick",
    "cut",
    "inside",
    "object",
    "going",
    "type",
    "comma",
    "new",
    "lines",
    "right",
    "click",
    "paste",
    "remove",
    "export",
    "function",
    "use",
    "shorthand",
    "method",
    "syntax",
    "update",
    "code",
    "method",
    "change",
    "cart",
    "cart",
    "items",
    "save",
    "storage",
    "dove",
    "storage",
    "let",
    "remove",
    "extra",
    "lines",
    "last",
    "thing",
    "need",
    "update",
    "load",
    "storage",
    "moved",
    "inside",
    "cart",
    "object",
    "access",
    "function",
    "front",
    "going",
    "type",
    "cart",
    "load",
    "storage",
    "save",
    "file",
    "basic",
    "idea",
    "behind",
    "objectoriented",
    "programming",
    "organize",
    "code",
    "objects",
    "group",
    "data",
    "functions",
    "together",
    "object",
    "like",
    "let",
    "talk",
    "use",
    "objectoriented",
    "programming",
    "objectoriented",
    "programming",
    "tries",
    "represent",
    "real",
    "world",
    "real",
    "world",
    "cart",
    "physical",
    "object",
    "object",
    "objectoriented",
    "programming",
    "represent",
    "physical",
    "object",
    "digital",
    "object",
    "case",
    "javascript",
    "object",
    "physical",
    "cart",
    "products",
    "inside",
    "javascript",
    "object",
    "also",
    "products",
    "inside",
    "physical",
    "cart",
    "also",
    "actions",
    "take",
    "modify",
    "cart",
    "like",
    "add",
    "product",
    "remove",
    "product",
    "javascript",
    "object",
    "also",
    "actions",
    "take",
    "modify",
    "cart",
    "like",
    "add",
    "cart",
    "function",
    "remove",
    "cart",
    "function",
    "see",
    "objectoriented",
    "programming",
    "tries",
    "represent",
    "real",
    "world",
    "take",
    "physical",
    "object",
    "like",
    "cart",
    "represent",
    "digital",
    "object",
    "like",
    "javascript",
    "object",
    "people",
    "feel",
    "feel",
    "makes",
    "code",
    "intuitive",
    "easier",
    "understand",
    "let",
    "try",
    "code",
    "object",
    "make",
    "sure",
    "actually",
    "works",
    "going",
    "scroll",
    "bottom",
    "going",
    "type",
    "cart",
    "save",
    "file",
    "let",
    "load",
    "code",
    "project",
    "going",
    "open",
    "scripts",
    "folder",
    "open",
    "file",
    "checkout",
    "js",
    "top",
    "imports",
    "going",
    "import",
    "new",
    "file",
    "let",
    "type",
    "import",
    "going",
    "use",
    "slightly",
    "different",
    "syntax",
    "going",
    "type",
    "string",
    "give",
    "file",
    "want",
    "load",
    "need",
    "load",
    "oop",
    "js",
    "first",
    "need",
    "get",
    "scripts",
    "folder",
    "using",
    "slash",
    "go",
    "data",
    "folder",
    "data",
    "slash",
    "load",
    "oop",
    "js",
    "another",
    "syntax",
    "use",
    "imports",
    "runs",
    "code",
    "inside",
    "file",
    "without",
    "importing",
    "anything",
    "need",
    "situation",
    "let",
    "save",
    "file",
    "open",
    "page",
    "browser",
    "page",
    "open",
    "scroll",
    "checkout",
    "html",
    "right",
    "click",
    "open",
    "live",
    "server",
    "already",
    "page",
    "open",
    "going",
    "open",
    "tab",
    "page",
    "big",
    "zoom",
    "pressing",
    "control",
    "minus",
    "command",
    "minus",
    "times",
    "let",
    "check",
    "console",
    "see",
    "cart",
    "looks",
    "like",
    "page",
    "going",
    "rightclick",
    "click",
    "inspect",
    "open",
    "console",
    "console",
    "see",
    "cart",
    "object",
    "inside",
    "object",
    "data",
    "well",
    "functions",
    "cart",
    "grouped",
    "inside",
    "object",
    "see",
    "code",
    "still",
    "works",
    "cart",
    "items",
    "two",
    "default",
    "products",
    "look",
    "code",
    "open",
    "beginning",
    "run",
    "cart",
    "load",
    "storage",
    "inside",
    "function",
    "scroll",
    "give",
    "cart",
    "items",
    "default",
    "cart",
    "two",
    "products",
    "inside",
    "see",
    "console",
    "know",
    "code",
    "inside",
    "object",
    "still",
    "works",
    "works",
    "way",
    "let",
    "try",
    "another",
    "method",
    "make",
    "sure",
    "working",
    "let",
    "try",
    "using",
    "add",
    "cart",
    "method",
    "add",
    "product",
    "cart",
    "items",
    "scroll",
    "bottom",
    "cart",
    "going",
    "call",
    "add",
    "cart",
    "add",
    "cart",
    "saved",
    "inside",
    "cart",
    "object",
    "access",
    "going",
    "type",
    "cart",
    "add",
    "cart",
    "brackets",
    "add",
    "cart",
    "takes",
    "one",
    "parameter",
    "string",
    "product",
    "id",
    "want",
    "add",
    "find",
    "product",
    "id",
    "go",
    "data",
    "folder",
    "products",
    "js",
    "inside",
    "list",
    "products",
    "let",
    "actually",
    "scroll",
    "third",
    "product",
    "right",
    "product",
    "going",
    "add",
    "product",
    "id",
    "cart",
    "let",
    "select",
    "id",
    "going",
    "rightclick",
    "copy",
    "inside",
    "oop",
    "inside",
    "string",
    "going",
    "rightclick",
    "paste",
    "product",
    "id",
    "let",
    "save",
    "let",
    "check",
    "console",
    "open",
    "console",
    "inside",
    "cart",
    "object",
    "expand",
    "cart",
    "items",
    "three",
    "products",
    "added",
    "new",
    "product",
    "cart",
    "shows",
    "code",
    "working",
    "exact",
    "way",
    "organized",
    "object",
    "objectoriented",
    "programming",
    "done",
    "example",
    "let",
    "remove",
    "two",
    "lines",
    "code",
    "save",
    "next",
    "another",
    "reason",
    "use",
    "objectoriented",
    "programming",
    "easy",
    "create",
    "multiple",
    "objects",
    "example",
    "real",
    "feature",
    "called",
    "amazon",
    "business",
    "separate",
    "cart",
    "business",
    "purchases",
    "create",
    "two",
    "separate",
    "carts",
    "code",
    "objectoriented",
    "programming",
    "easy",
    "make",
    "copy",
    "cart",
    "object",
    "scroll",
    "code",
    "going",
    "click",
    "arrow",
    "beside",
    "card",
    "variable",
    "collapse",
    "code",
    "create",
    "separate",
    "cart",
    "business",
    "purchases",
    "going",
    "select",
    "code",
    "right",
    "click",
    "copy",
    "bottom",
    "right",
    "click",
    "paste",
    "two",
    "separate",
    "cards",
    "let",
    "scroll",
    "top",
    "second",
    "cart",
    "right",
    "said",
    "wanted",
    "card",
    "business",
    "purchases",
    "let",
    "rename",
    "business",
    "capital",
    "c",
    "cart",
    "load",
    "storage",
    "let",
    "load",
    "cart",
    "das",
    "business",
    "instead",
    "conflict",
    "cart",
    "scroll",
    "thing",
    "save",
    "storage",
    "let",
    "save",
    "cart",
    "cart",
    "das",
    "business",
    "finally",
    "let",
    "scroll",
    "bottom",
    "instead",
    "cart",
    "load",
    "storage",
    "going",
    "change",
    "business",
    "cart",
    "load",
    "storage",
    "created",
    "completely",
    "separate",
    "cart",
    "simply",
    "copying",
    "object",
    "programming",
    "makes",
    "easy",
    "create",
    "multiple",
    "objects",
    "let",
    "cards",
    "see",
    "look",
    "like",
    "going",
    "scroll",
    "bottom",
    "going",
    "cart",
    "business",
    "cart",
    "save",
    "open",
    "console",
    "checkout",
    "page",
    "show",
    "us",
    "two",
    "carts",
    "regular",
    "cart",
    "three",
    "products",
    "inside",
    "business",
    "cart",
    "two",
    "products",
    "inside",
    "default",
    "products",
    "get",
    "first",
    "load",
    "cart",
    "see",
    "two",
    "cards",
    "completely",
    "separate",
    "real",
    "world",
    "two",
    "physical",
    "cards",
    "completely",
    "separate",
    "programming",
    "also",
    "two",
    "cards",
    "completely",
    "separate",
    "simply",
    "making",
    "copy",
    "object",
    "programming",
    "tries",
    "represent",
    "real",
    "world",
    "currently",
    "obvious",
    "problem",
    "creating",
    "multiple",
    "objects",
    "copy",
    "pasting",
    "lot",
    "code",
    "make",
    "code",
    "messy",
    "hard",
    "manage",
    "going",
    "make",
    "code",
    "cleaner",
    "using",
    "function",
    "create",
    "multiple",
    "objects",
    "first",
    "let",
    "delete",
    "business",
    "card",
    "copy",
    "pasted",
    "going",
    "select",
    "object",
    "business",
    "card",
    "going",
    "remove",
    "instead",
    "copy",
    "pasting",
    "object",
    "going",
    "use",
    "function",
    "generate",
    "objects",
    "top",
    "file",
    "let",
    "create",
    "new",
    "function",
    "name",
    "capital",
    "c",
    "cart",
    "brackets",
    "curly",
    "brackets",
    "way",
    "objectoriented",
    "programming",
    "naming",
    "convention",
    "use",
    "pascal",
    "case",
    "things",
    "create",
    "generate",
    "objects",
    "pascal",
    "case",
    "start",
    "every",
    "word",
    "capital",
    "including",
    "first",
    "word",
    "started",
    "cart",
    "capital",
    "c",
    "inside",
    "function",
    "going",
    "create",
    "cart",
    "objects",
    "let",
    "actually",
    "move",
    "object",
    "function",
    "create",
    "using",
    "function",
    "going",
    "select",
    "object",
    "right",
    "click",
    "cut",
    "move",
    "function",
    "clicking",
    "function",
    "rightclick",
    "paste",
    "every",
    "time",
    "run",
    "function",
    "generate",
    "new",
    "cart",
    "object",
    "copy",
    "paste",
    "code",
    "create",
    "multiple",
    "objects",
    "bottom",
    "going",
    "click",
    "arrow",
    "collapse",
    "object",
    "bottom",
    "function",
    "going",
    "return",
    "c",
    "object",
    "use",
    "outside",
    "function",
    "okay",
    "let",
    "give",
    "try",
    "use",
    "function",
    "generate",
    "cart",
    "objects",
    "first",
    "let",
    "create",
    "normal",
    "cart",
    "using",
    "const",
    "cart",
    "make",
    "equal",
    "run",
    "function",
    "generate",
    "object",
    "capital",
    "c",
    "cart",
    "brackets",
    "let",
    "generate",
    "another",
    "object",
    "using",
    "function",
    "using",
    "const",
    "name",
    "business",
    "cart",
    "equals",
    "capital",
    "c",
    "cart",
    "brackets",
    "still",
    "load",
    "storage",
    "console",
    "log",
    "basically",
    "instead",
    "copy",
    "pasting",
    "time",
    "going",
    "use",
    "function",
    "generate",
    "objects",
    "let",
    "save",
    "open",
    "console",
    "two",
    "cart",
    "objects",
    "however",
    "carts",
    "three",
    "products",
    "inside",
    "regular",
    "card",
    "three",
    "products",
    "business",
    "card",
    "two",
    "products",
    "happened",
    "go",
    "back",
    "code",
    "look",
    "inside",
    "cart",
    "object",
    "notice",
    "loading",
    "key",
    "local",
    "storage",
    "means",
    "every",
    "cart",
    "generate",
    "getting",
    "data",
    "place",
    "local",
    "storage",
    "fix",
    "going",
    "replace",
    "oop",
    "parameter",
    "different",
    "carts",
    "use",
    "different",
    "key",
    "local",
    "storage",
    "top",
    "let",
    "create",
    "parameter",
    "called",
    "local",
    "storage",
    "key",
    "instead",
    "using",
    "string",
    "every",
    "time",
    "going",
    "use",
    "parameter",
    "local",
    "storage",
    "key",
    "thing",
    "save",
    "storage",
    "instead",
    "saving",
    "key",
    "every",
    "time",
    "going",
    "replace",
    "parameter",
    "local",
    "storage",
    "key",
    "finally",
    "run",
    "function",
    "bottom",
    "need",
    "give",
    "function",
    "local",
    "storage",
    "key",
    "regular",
    "cart",
    "let",
    "use",
    "string",
    "cart",
    "oop",
    "business",
    "cart",
    "use",
    "different",
    "key",
    "like",
    "string",
    "cart",
    "das",
    "business",
    "two",
    "carts",
    "load",
    "different",
    "keys",
    "local",
    "storage",
    "different",
    "data",
    "let",
    "save",
    "check",
    "console",
    "regular",
    "card",
    "three",
    "products",
    "business",
    "card",
    "two",
    "products",
    "like",
    "let",
    "go",
    "back",
    "code",
    "better",
    "way",
    "create",
    "multiple",
    "objects",
    "instead",
    "copy",
    "pasting",
    "bunch",
    "code",
    "every",
    "time",
    "create",
    "function",
    "generates",
    "objects",
    "let",
    "save",
    "example",
    "git",
    "go",
    "git",
    "section",
    "top",
    "created",
    "function",
    "generate",
    "objects",
    "checkout",
    "js",
    "loading",
    "c",
    "oop",
    "practice",
    "file",
    "type",
    "message",
    "describe",
    "changes",
    "create",
    "oop",
    "objectoriented",
    "programming",
    "version",
    "cart",
    "commit",
    "next",
    "going",
    "learn",
    "even",
    "better",
    "way",
    "generate",
    "objects",
    "programming",
    "feature",
    "called",
    "class",
    "class",
    "specifically",
    "designed",
    "generating",
    "objects",
    "class",
    "basically",
    "object",
    "generator",
    "currently",
    "open",
    "code",
    "open",
    "oop",
    "learn",
    "use",
    "function",
    "generate",
    "objects",
    "objectoriented",
    "programming",
    "going",
    "switch",
    "using",
    "class",
    "generate",
    "objects",
    "instead",
    "classes",
    "cleaner",
    "features",
    "using",
    "function",
    "first",
    "let",
    "create",
    "new",
    "file",
    "learning",
    "classes",
    "inside",
    "data",
    "folder",
    "going",
    "click",
    "oop",
    "create",
    "new",
    "file",
    "name",
    "file",
    "cart",
    "dcl",
    "class",
    "js",
    "press",
    "enter",
    "first",
    "let",
    "copy",
    "code",
    "compare",
    "going",
    "open",
    "oop",
    "click",
    "file",
    "press",
    "contrl",
    "command",
    "select",
    "code",
    "right",
    "click",
    "copy",
    "going",
    "right",
    "click",
    "paste",
    "scroll",
    "top",
    "top",
    "going",
    "create",
    "first",
    "class",
    "class",
    "using",
    "word",
    "class",
    "going",
    "give",
    "name",
    "class",
    "let",
    "name",
    "capital",
    "c",
    "cart",
    "curly",
    "brackets",
    "reminder",
    "naming",
    "convention",
    "use",
    "pascal",
    "case",
    "things",
    "generate",
    "objects",
    "start",
    "cart",
    "capital",
    "c",
    "class",
    "class",
    "basically",
    "object",
    "generator",
    "inside",
    "class",
    "going",
    "put",
    "properties",
    "methods",
    "want",
    "object",
    "generate",
    "properties",
    "methods",
    "going",
    "move",
    "class",
    "first",
    "let",
    "select",
    "card",
    "items",
    "property",
    "going",
    "right",
    "click",
    "cut",
    "move",
    "class",
    "clicking",
    "right",
    "click",
    "paste",
    "classes",
    "use",
    "slightly",
    "different",
    "syntax",
    "objects",
    "create",
    "property",
    "called",
    "cart",
    "items",
    "going",
    "type",
    "property",
    "name",
    "instead",
    "colon",
    "going",
    "make",
    "equal",
    "undefined",
    "instead",
    "comma",
    "end",
    "going",
    "put",
    "semicolon",
    "add",
    "property",
    "class",
    "every",
    "object",
    "generate",
    "property",
    "like",
    "next",
    "let",
    "move",
    "methods",
    "class",
    "delete",
    "lines",
    "move",
    "load",
    "storage",
    "select",
    "method",
    "rightclick",
    "cut",
    "inside",
    "class",
    "going",
    "move",
    "right",
    "clicking",
    "paste",
    "classes",
    "use",
    "slightly",
    "different",
    "syntax",
    "create",
    "methods",
    "well",
    "instead",
    "comma",
    "end",
    "remove",
    "every",
    "object",
    "generate",
    "method",
    "let",
    "move",
    "rest",
    "methods",
    "class",
    "going",
    "scroll",
    "move",
    "save",
    "storage",
    "select",
    "method",
    "right",
    "click",
    "cut",
    "bottom",
    "class",
    "going",
    "right",
    "click",
    "paste",
    "remove",
    "comma",
    "end",
    "add",
    "cut",
    "select",
    "method",
    "right",
    "click",
    "cut",
    "inside",
    "bottom",
    "class",
    "going",
    "rightclick",
    "paste",
    "remove",
    "comma",
    "end",
    "well",
    "remove",
    "cart",
    "select",
    "method",
    "right",
    "click",
    "cut",
    "bottom",
    "class",
    "right",
    "click",
    "paste",
    "remove",
    "comma",
    "end",
    "finally",
    "move",
    "last",
    "method",
    "update",
    "delivery",
    "option",
    "right",
    "click",
    "cut",
    "inside",
    "class",
    "going",
    "right",
    "click",
    "paste",
    "method",
    "comma",
    "end",
    "looks",
    "good",
    "create",
    "class",
    "basically",
    "give",
    "properties",
    "methods",
    "generate",
    "objects",
    "using",
    "class",
    "every",
    "object",
    "generate",
    "properties",
    "methods",
    "one",
    "thing",
    "need",
    "fix",
    "local",
    "storage",
    "key",
    "exist",
    "anymore",
    "fix",
    "going",
    "save",
    "property",
    "instead",
    "top",
    "going",
    "give",
    "new",
    "property",
    "every",
    "object",
    "generate",
    "called",
    "local",
    "storage",
    "key",
    "make",
    "equal",
    "undefined",
    "start",
    "inside",
    "methods",
    "going",
    "switch",
    "local",
    "storage",
    "key",
    "going",
    "point",
    "object",
    "generate",
    "like",
    "local",
    "storage",
    "key",
    "access",
    "property",
    "another",
    "place",
    "need",
    "fix",
    "inside",
    "save",
    "storage",
    "instead",
    "using",
    "variable",
    "local",
    "storage",
    "key",
    "going",
    "use",
    "property",
    "local",
    "storage",
    "key",
    "scroll",
    "basically",
    "converted",
    "whole",
    "function",
    "class",
    "remove",
    "final",
    "step",
    "class",
    "let",
    "use",
    "generate",
    "two",
    "objects",
    "instead",
    "code",
    "going",
    "type",
    "word",
    "new",
    "type",
    "class",
    "name",
    "capital",
    "c",
    "cart",
    "brackets",
    "see",
    "class",
    "uses",
    "similar",
    "syntax",
    "function",
    "except",
    "use",
    "word",
    "new",
    "front",
    "generates",
    "new",
    "object",
    "using",
    "class",
    "new",
    "object",
    "properties",
    "methods",
    "added",
    "let",
    "thing",
    "business",
    "card",
    "use",
    "class",
    "generate",
    "remove",
    "code",
    "type",
    "new",
    "class",
    "name",
    "capital",
    "c",
    "cart",
    "brackets",
    "generate",
    "another",
    "object",
    "using",
    "class",
    "one",
    "thing",
    "need",
    "fix",
    "objects",
    "property",
    "called",
    "local",
    "storage",
    "key",
    "currently",
    "undefined",
    "need",
    "set",
    "property",
    "bottom",
    "going",
    "type",
    "cart",
    "local",
    "storage",
    "key",
    "make",
    "equal",
    "use",
    "string",
    "oop",
    "thing",
    "business",
    "cart",
    "type",
    "business",
    "cart",
    "local",
    "storage",
    "key",
    "make",
    "equal",
    "string",
    "cart",
    "das",
    "business",
    "load",
    "cart",
    "storage",
    "well",
    "business",
    "c",
    "storage",
    "code",
    "except",
    "converted",
    "function",
    "class",
    "let",
    "save",
    "going",
    "run",
    "code",
    "currently",
    "go",
    "code",
    "open",
    "checkout",
    "js",
    "still",
    "loading",
    "oop",
    "going",
    "update",
    "load",
    "instead",
    "save",
    "open",
    "cart",
    "das",
    "class",
    "open",
    "console",
    "see",
    "created",
    "two",
    "cart",
    "objects",
    "like",
    "regular",
    "card",
    "three",
    "products",
    "inside",
    "business",
    "card",
    "two",
    "products",
    "inside",
    "click",
    "arrow",
    "beside",
    "prototype",
    "see",
    "methods",
    "objects",
    "basically",
    "creating",
    "objects",
    "except",
    "time",
    "used",
    "class",
    "way",
    "object",
    "generate",
    "class",
    "called",
    "instance",
    "class",
    "also",
    "check",
    "object",
    "instance",
    "class",
    "using",
    "code",
    "business",
    "cart",
    "instance",
    "class",
    "name",
    "name",
    "capital",
    "c",
    "cart",
    "check",
    "object",
    "generated",
    "class",
    "result",
    "close",
    "bracket",
    "save",
    "check",
    "console",
    "tell",
    "us",
    "true",
    "business",
    "card",
    "generated",
    "class",
    "okay",
    "worry",
    "class",
    "bit",
    "confusing",
    "first",
    "remember",
    "objectoriented",
    "programming",
    "means",
    "organizing",
    "code",
    "objects",
    "tries",
    "represent",
    "real",
    "world",
    "classes",
    "feature",
    "help",
    "us",
    "generate",
    "objects",
    "make",
    "easier",
    "create",
    "objects",
    "class",
    "basically",
    "object",
    "generator",
    "learned",
    "classes",
    "work",
    "let",
    "talk",
    "benefits",
    "classes",
    "scroll",
    "generate",
    "object",
    "going",
    "properties",
    "methods",
    "notice",
    "class",
    "actually",
    "looks",
    "like",
    "object",
    "generate",
    "cleaner",
    "using",
    "function",
    "like",
    "another",
    "benefit",
    "classes",
    "extra",
    "features",
    "programming",
    "first",
    "feature",
    "called",
    "constructor",
    "lets",
    "us",
    "run",
    "setup",
    "code",
    "creating",
    "object",
    "scroll",
    "code",
    "notice",
    "create",
    "objects",
    "run",
    "setup",
    "code",
    "constructor",
    "lets",
    "us",
    "put",
    "setup",
    "code",
    "inside",
    "class",
    "makes",
    "code",
    "cleaner",
    "group",
    "everything",
    "together",
    "inside",
    "class",
    "create",
    "constructor",
    "going",
    "scroll",
    "class",
    "properties",
    "going",
    "create",
    "new",
    "method",
    "called",
    "constructor",
    "brackets",
    "curly",
    "brackets",
    "constructor",
    "method",
    "works",
    "like",
    "normal",
    "method",
    "put",
    "code",
    "inside",
    "run",
    "code",
    "special",
    "thing",
    "constructor",
    "generate",
    "object",
    "run",
    "constructor",
    "automatically",
    "great",
    "place",
    "put",
    "setup",
    "code",
    "let",
    "scroll",
    "bottom",
    "instead",
    "running",
    "setup",
    "code",
    "outside",
    "class",
    "going",
    "move",
    "class",
    "constructor",
    "select",
    "code",
    "right",
    "click",
    "cut",
    "scroll",
    "top",
    "inside",
    "constructor",
    "going",
    "rightclick",
    "paste",
    "create",
    "object",
    "run",
    "code",
    "constructor",
    "set",
    "object",
    "things",
    "need",
    "fix",
    "first",
    "thing",
    "object",
    "object",
    "create",
    "going",
    "run",
    "constructor",
    "need",
    "one",
    "lines",
    "let",
    "remove",
    "setup",
    "business",
    "card",
    "setup",
    "code",
    "two",
    "steps",
    "set",
    "local",
    "storage",
    "key",
    "load",
    "storage",
    "next",
    "problem",
    "object",
    "create",
    "going",
    "called",
    "cart",
    "every",
    "time",
    "solve",
    "replace",
    "cart",
    "well",
    "load",
    "storage",
    "reminder",
    "points",
    "object",
    "generate",
    "whatever",
    "object",
    "generate",
    "going",
    "get",
    "local",
    "storage",
    "key",
    "set",
    "going",
    "get",
    "load",
    "storage",
    "method",
    "run",
    "method",
    "second",
    "problem",
    "want",
    "local",
    "storage",
    "key",
    "oop",
    "every",
    "time",
    "fix",
    "constructor",
    "also",
    "parameters",
    "let",
    "give",
    "constructor",
    "parameter",
    "name",
    "local",
    "storage",
    "key",
    "instead",
    "string",
    "every",
    "time",
    "going",
    "use",
    "local",
    "storage",
    "key",
    "last",
    "thing",
    "save",
    "value",
    "parameter",
    "scroll",
    "bottom",
    "call",
    "class",
    "brackets",
    "put",
    "parameters",
    "constructor",
    "cart",
    "want",
    "local",
    "storage",
    "key",
    "string",
    "oop",
    "business",
    "cart",
    "want",
    "local",
    "storage",
    "key",
    "string",
    "cart",
    "das",
    "business",
    "values",
    "inside",
    "saved",
    "parameters",
    "constructor",
    "oop",
    "saved",
    "inside",
    "local",
    "storage",
    "key",
    "use",
    "thing",
    "cart",
    "business",
    "let",
    "save",
    "code",
    "open",
    "console",
    "see",
    "cart",
    "objects",
    "correct",
    "generated",
    "object",
    "also",
    "ran",
    "setup",
    "code",
    "constructor",
    "works",
    "every",
    "time",
    "generate",
    "object",
    "run",
    "code",
    "inside",
    "great",
    "place",
    "put",
    "setup",
    "code",
    "make",
    "code",
    "cleaner",
    "details",
    "constructor",
    "method",
    "named",
    "constructor",
    "ca",
    "use",
    "name",
    "want",
    "also",
    "return",
    "anything",
    "constructor",
    "last",
    "ly",
    "shortcut",
    "use",
    "class",
    "property",
    "equal",
    "undefined",
    "actually",
    "remove",
    "equal",
    "undefined",
    "use",
    "semicolon",
    "thing",
    "code",
    "thing",
    "remove",
    "equal",
    "undefined",
    "use",
    "semicolon",
    "save",
    "finished",
    "converting",
    "code",
    "using",
    "function",
    "using",
    "class",
    "see",
    "class",
    "better",
    "way",
    "generate",
    "objects",
    "objectoriented",
    "programming",
    "let",
    "save",
    "code",
    "git",
    "open",
    "git",
    "section",
    "inside",
    "cart",
    "das",
    "class",
    "created",
    "cart",
    "class",
    "inside",
    "checkout",
    "js",
    "basically",
    "loading",
    "cart",
    "das",
    "class",
    "file",
    "type",
    "message",
    "describe",
    "change",
    "create",
    "class",
    "version",
    "cart",
    "commit",
    "next",
    "going",
    "learn",
    "important",
    "feature",
    "classes",
    "called",
    "private",
    "properties",
    "methods",
    "let",
    "open",
    "code",
    "open",
    "see",
    "class",
    "property",
    "called",
    "local",
    "storage",
    "key",
    "property",
    "useful",
    "inside",
    "class",
    "really",
    "meant",
    "used",
    "outside",
    "class",
    "example",
    "bottom",
    "could",
    "take",
    "object",
    "cart",
    "change",
    "local",
    "storage",
    "key",
    "using",
    "dot",
    "local",
    "storage",
    "key",
    "equals",
    "something",
    "else",
    "problem",
    "mess",
    "object",
    "works",
    "start",
    "saving",
    "different",
    "local",
    "storage",
    "key",
    "common",
    "problem",
    "programming",
    "working",
    "team",
    "somebody",
    "might",
    "accidentally",
    "change",
    "properties",
    "supposed",
    "prevent",
    "classes",
    "let",
    "us",
    "make",
    "property",
    "method",
    "private",
    "means",
    "accessed",
    "inside",
    "class",
    "let",
    "remove",
    "line",
    "scroll",
    "make",
    "local",
    "storage",
    "key",
    "private",
    "going",
    "add",
    "number",
    "sign",
    "front",
    "hash",
    "also",
    "whenever",
    "access",
    "property",
    "inside",
    "class",
    "going",
    "add",
    "hash",
    "front",
    "type",
    "local",
    "storage",
    "key",
    "local",
    "storage",
    "key",
    "inside",
    "save",
    "storage",
    "local",
    "storage",
    "key",
    "called",
    "private",
    "property",
    "means",
    "used",
    "inside",
    "class",
    "inside",
    "curly",
    "brackets",
    "used",
    "outside",
    "class",
    "property",
    "without",
    "hash",
    "front",
    "called",
    "public",
    "property",
    "meaning",
    "accessed",
    "anywhere",
    "let",
    "save",
    "open",
    "console",
    "code",
    "still",
    "works",
    "made",
    "property",
    "private",
    "able",
    "access",
    "inside",
    "class",
    "let",
    "try",
    "accessing",
    "property",
    "outside",
    "class",
    "see",
    "happens",
    "going",
    "scroll",
    "going",
    "try",
    "access",
    "cart",
    "hash",
    "local",
    "storage",
    "key",
    "change",
    "something",
    "else",
    "like",
    "test",
    "save",
    "open",
    "console",
    "see",
    "try",
    "access",
    "private",
    "property",
    "give",
    "us",
    "syntax",
    "error",
    "saying",
    "private",
    "field",
    "way",
    "field",
    "thing",
    "property",
    "private",
    "property",
    "works",
    "prevents",
    "us",
    "accessing",
    "property",
    "outside",
    "object",
    "messing",
    "also",
    "private",
    "methods",
    "let",
    "remove",
    "line",
    "scroll",
    "method",
    "load",
    "storage",
    "also",
    "used",
    "inside",
    "class",
    "really",
    "reason",
    "code",
    "outside",
    "calling",
    "load",
    "storage",
    "make",
    "code",
    "safer",
    "going",
    "make",
    "private",
    "method",
    "make",
    "method",
    "private",
    "going",
    "thing",
    "front",
    "method",
    "going",
    "add",
    "number",
    "sign",
    "hash",
    "going",
    "update",
    "rest",
    "code",
    "going",
    "dot",
    "hash",
    "load",
    "storage",
    "save",
    "check",
    "console",
    "make",
    "sure",
    "everything",
    "still",
    "working",
    "everything",
    "still",
    "looks",
    "good",
    "using",
    "private",
    "method",
    "inside",
    "class",
    "class",
    "let",
    "us",
    "create",
    "private",
    "properties",
    "methods",
    "useful",
    "bigger",
    "project",
    "people",
    "might",
    "sure",
    "properties",
    "methods",
    "supposed",
    "use",
    "outside",
    "class",
    "ones",
    "avoid",
    "let",
    "save",
    "changes",
    "git",
    "go",
    "git",
    "section",
    "inside",
    "made",
    "local",
    "storage",
    "key",
    "load",
    "storage",
    "private",
    "create",
    "message",
    "describe",
    "changes",
    "make",
    "local",
    "storage",
    "key",
    "load",
    "storage",
    "private",
    "commit",
    "learned",
    "objectoriented",
    "programming",
    "classes",
    "going",
    "use",
    "project",
    "one",
    "thing",
    "could",
    "take",
    "card",
    "class",
    "replace",
    "everywhere",
    "use",
    "cart",
    "project",
    "however",
    "use",
    "cart",
    "lot",
    "places",
    "would",
    "take",
    "much",
    "time",
    "going",
    "leave",
    "replacing",
    "cart",
    "challenge",
    "exercise",
    "instead",
    "going",
    "work",
    "homepage",
    "first",
    "let",
    "go",
    "back",
    "code",
    "going",
    "open",
    "checkout",
    "js",
    "going",
    "comment",
    "import",
    "using",
    "file",
    "practice",
    "let",
    "save",
    "let",
    "open",
    "checkout",
    "page",
    "already",
    "open",
    "open",
    "rightclick",
    "checkout",
    "html",
    "open",
    "live",
    "server",
    "checkout",
    "page",
    "going",
    "click",
    "icon",
    "top",
    "left",
    "go",
    "homepage",
    "page",
    "list",
    "products",
    "code",
    "products",
    "go",
    "back",
    "vs",
    "code",
    "left",
    "side",
    "going",
    "open",
    "dataproducts",
    "djs",
    "code",
    "data",
    "products",
    "homepage",
    "notice",
    "product",
    "object",
    "going",
    "learn",
    "technique",
    "called",
    "converting",
    "object",
    "class",
    "means",
    "instead",
    "using",
    "regular",
    "objects",
    "array",
    "going",
    "use",
    "class",
    "generate",
    "objects",
    "array",
    "let",
    "create",
    "new",
    "class",
    "using",
    "word",
    "class",
    "let",
    "call",
    "capital",
    "p",
    "product",
    "curly",
    "brackets",
    "class",
    "meant",
    "generate",
    "products",
    "products",
    "going",
    "properties",
    "like",
    "id",
    "image",
    "name",
    "let",
    "add",
    "class",
    "add",
    "id",
    "property",
    "semicolon",
    "starts",
    "undefined",
    "image",
    "property",
    "name",
    "property",
    "product",
    "also",
    "rating",
    "price",
    "sets",
    "rating",
    "price",
    "set",
    "notice",
    "object",
    "also",
    "property",
    "called",
    "keywords",
    "currently",
    "using",
    "project",
    "going",
    "leave",
    "class",
    "need",
    "use",
    "later",
    "always",
    "add",
    "back",
    "properties",
    "want",
    "product",
    "let",
    "test",
    "generating",
    "product",
    "using",
    "class",
    "let",
    "create",
    "variable",
    "const",
    "product",
    "one",
    "equals",
    "generate",
    "object",
    "going",
    "use",
    "word",
    "new",
    "class",
    "name",
    "capital",
    "p",
    "product",
    "brackets",
    "let",
    "see",
    "worked",
    "product",
    "one",
    "save",
    "going",
    "open",
    "web",
    "page",
    "open",
    "console",
    "right",
    "click",
    "inspect",
    "open",
    "console",
    "inside",
    "see",
    "created",
    "product",
    "object",
    "using",
    "class",
    "right",
    "properties",
    "undefined",
    "let",
    "set",
    "values",
    "properties",
    "go",
    "back",
    "code",
    "follow",
    "along",
    "one",
    "way",
    "set",
    "set",
    "prop",
    "properties",
    "access",
    "outside",
    "class",
    "example",
    "product",
    "equals",
    "something",
    "product",
    "image",
    "equals",
    "something",
    "product",
    "one",
    "name",
    "good",
    "way",
    "set",
    "properties",
    "product",
    "create",
    "makes",
    "code",
    "repetitive",
    "messy",
    "instead",
    "notice",
    "create",
    "product",
    "kind",
    "like",
    "setup",
    "code",
    "create",
    "product",
    "set",
    "properties",
    "remember",
    "classes",
    "specific",
    "feature",
    "setup",
    "code",
    "called",
    "constructor",
    "follow",
    "along",
    "inside",
    "class",
    "going",
    "create",
    "constructor",
    "brackets",
    "curly",
    "brackets",
    "whenever",
    "generate",
    "object",
    "going",
    "automatically",
    "run",
    "constructor",
    "constructor",
    "put",
    "setup",
    "code",
    "let",
    "remove",
    "code",
    "inside",
    "constructor",
    "first",
    "want",
    "set",
    "id",
    "property",
    "going",
    "id",
    "make",
    "equal",
    "value",
    "set",
    "id",
    "value",
    "id",
    "inside",
    "objects",
    "create",
    "product",
    "going",
    "put",
    "object",
    "inside",
    "brackets",
    "going",
    "go",
    "constructor",
    "constructor",
    "let",
    "create",
    "parameter",
    "save",
    "data",
    "name",
    "product",
    "details",
    "save",
    "something",
    "inside",
    "ins",
    "parameter",
    "going",
    "put",
    "brackets",
    "let",
    "actually",
    "give",
    "entire",
    "object",
    "constructor",
    "going",
    "right",
    "click",
    "copy",
    "brackets",
    "going",
    "rightclick",
    "paste",
    "whenever",
    "create",
    "new",
    "product",
    "going",
    "give",
    "object",
    "details",
    "going",
    "get",
    "saved",
    "set",
    "properties",
    "id",
    "going",
    "equal",
    "product",
    "details",
    "id",
    "property",
    "product",
    "details",
    "id",
    "image",
    "going",
    "image",
    "equals",
    "product",
    "details",
    "object",
    "passed",
    "dot",
    "image",
    "property",
    "thing",
    "name",
    "name",
    "equals",
    "product",
    "details",
    "name",
    "property",
    "thing",
    "rating",
    "rating",
    "equals",
    "product",
    "details",
    "rating",
    "finally",
    "price",
    "sense",
    "price",
    "sense",
    "equals",
    "product",
    "details",
    "price",
    "sets",
    "called",
    "converting",
    "object",
    "class",
    "basically",
    "taking",
    "regular",
    "object",
    "like",
    "put",
    "inside",
    "class",
    "copy",
    "properties",
    "also",
    "visualize",
    "like",
    "regular",
    "object",
    "basically",
    "wrapping",
    "inside",
    "class",
    "reason",
    "classes",
    "extra",
    "features",
    "use",
    "like",
    "add",
    "methods",
    "also",
    "private",
    "properties",
    "private",
    "methods",
    "basically",
    "object",
    "except",
    "enhanced",
    "version",
    "object",
    "extra",
    "features",
    "classes",
    "let",
    "save",
    "code",
    "product",
    "one",
    "let",
    "take",
    "look",
    "console",
    "open",
    "console",
    "see",
    "created",
    "product",
    "object",
    "object",
    "except",
    "enhanced",
    "extra",
    "features",
    "classes",
    "next",
    "going",
    "take",
    "technique",
    "apply",
    "entire",
    "array",
    "instead",
    "array",
    "regular",
    "objects",
    "going",
    "convert",
    "objects",
    "product",
    "class",
    "one",
    "way",
    "could",
    "front",
    "object",
    "type",
    "new",
    "product",
    "open",
    "bracket",
    "close",
    "bracket",
    "bottom",
    "essentially",
    "convert",
    "regular",
    "object",
    "product",
    "class",
    "however",
    "going",
    "repeat",
    "code",
    "every",
    "object",
    "array",
    "going",
    "lot",
    "work",
    "repetition",
    "instead",
    "let",
    "loop",
    "array",
    "use",
    "code",
    "convert",
    "objects",
    "instead",
    "typing",
    "manually",
    "going",
    "remove",
    "remove",
    "round",
    "bracket",
    "end",
    "going",
    "click",
    "arrow",
    "beside",
    "array",
    "collapse",
    "end",
    "array",
    "going",
    "use",
    "array",
    "method",
    "called",
    "map",
    "brackets",
    "map",
    "basically",
    "loops",
    "array",
    "value",
    "runs",
    "function",
    "going",
    "give",
    "function",
    "want",
    "run",
    "value",
    "arrow",
    "curly",
    "brackets",
    "inner",
    "function",
    "going",
    "get",
    "parameter",
    "parameter",
    "basically",
    "value",
    "array",
    "going",
    "take",
    "first",
    "value",
    "save",
    "inside",
    "parameter",
    "run",
    "function",
    "take",
    "second",
    "value",
    "save",
    "run",
    "function",
    "third",
    "value",
    "save",
    "run",
    "function",
    "let",
    "name",
    "parameter",
    "product",
    "details",
    "object",
    "array",
    "contains",
    "product",
    "details",
    "going",
    "take",
    "object",
    "save",
    "parameter",
    "run",
    "function",
    "going",
    "convert",
    "object",
    "class",
    "going",
    "use",
    "code",
    "new",
    "capital",
    "p",
    "product",
    "brackets",
    "going",
    "give",
    "regular",
    "object",
    "product",
    "details",
    "second",
    "part",
    "map",
    "works",
    "map",
    "creates",
    "new",
    "array",
    "whatever",
    "return",
    "inner",
    "function",
    "going",
    "go",
    "inside",
    "new",
    "array",
    "going",
    "return",
    "class",
    "result",
    "going",
    "put",
    "inside",
    "new",
    "array",
    "think",
    "map",
    "take",
    "value",
    "array",
    "run",
    "function",
    "transform",
    "put",
    "inside",
    "new",
    "array",
    "essentially",
    "transforming",
    "products",
    "regular",
    "objects",
    "class",
    "bottom",
    "let",
    "products",
    "array",
    "confirm",
    "save",
    "open",
    "console",
    "see",
    "array",
    "values",
    "product",
    "class",
    "instead",
    "regular",
    "object",
    "converted",
    "products",
    "regular",
    "objects",
    "product",
    "class",
    "let",
    "open",
    "web",
    "page",
    "make",
    "sure",
    "everything",
    "still",
    "works",
    "open",
    "page",
    "notice",
    "everything",
    "still",
    "working",
    "correctly",
    "exact",
    "objects",
    "except",
    "sort",
    "enhanced",
    "objects",
    "next",
    "let",
    "use",
    "extra",
    "features",
    "classes",
    "simplify",
    "code",
    "page",
    "go",
    "back",
    "code",
    "left",
    "side",
    "let",
    "open",
    "amazon",
    "js",
    "code",
    "creates",
    "homepage",
    "going",
    "scroll",
    "see",
    "rating",
    "section",
    "calculate",
    "stars",
    "rating",
    "account",
    "notice",
    "inside",
    "html",
    "constru",
    "url",
    "number",
    "stars",
    "product",
    "also",
    "creating",
    "price",
    "want",
    "display",
    "page",
    "instead",
    "html",
    "code",
    "would",
    "cleaner",
    "moved",
    "logic",
    "class",
    "want",
    "group",
    "related",
    "code",
    "together",
    "let",
    "use",
    "features",
    "classes",
    "make",
    "code",
    "little",
    "bit",
    "cleaner",
    "open",
    "products",
    "js",
    "scroll",
    "product",
    "class",
    "inside",
    "let",
    "add",
    "methods",
    "calculating",
    "stars",
    "price",
    "going",
    "add",
    "method",
    "call",
    "get",
    "stars",
    "url",
    "brackets",
    "curly",
    "brackets",
    "let",
    "create",
    "another",
    "method",
    "called",
    "get",
    "price",
    "brackets",
    "curly",
    "brackets",
    "going",
    "move",
    "code",
    "html",
    "class",
    "open",
    "amazon",
    "js",
    "creating",
    "url",
    "stars",
    "let",
    "actually",
    "select",
    "code",
    "rightclick",
    "copy",
    "inside",
    "products",
    "js",
    "inside",
    "get",
    "stars",
    "url",
    "going",
    "rightclick",
    "paste",
    "going",
    "string",
    "front",
    "let",
    "add",
    "back",
    "tick",
    "going",
    "use",
    "template",
    "string",
    "going",
    "insert",
    "value",
    "inside",
    "end",
    "add",
    "another",
    "back",
    "tick",
    "created",
    "string",
    "going",
    "return",
    "method",
    "return",
    "semicolon",
    "end",
    "one",
    "thing",
    "need",
    "fix",
    "product",
    "defined",
    "anywhere",
    "get",
    "rating",
    "property",
    "whatever",
    "object",
    "going",
    "use",
    "ratings",
    "stars",
    "product",
    "able",
    "construct",
    "stars",
    "url",
    "let",
    "save",
    "file",
    "inside",
    "amazon",
    "js",
    "instead",
    "calculation",
    "directly",
    "inside",
    "html",
    "going",
    "delete",
    "going",
    "insert",
    "product",
    "getet",
    "stars",
    "url",
    "method",
    "brackets",
    "notice",
    "product",
    "object",
    "sort",
    "enhanced",
    "product",
    "add",
    "methods",
    "group",
    "related",
    "code",
    "together",
    "make",
    "code",
    "cleaner",
    "let",
    "thing",
    "price",
    "going",
    "calculate",
    "using",
    "method",
    "instead",
    "directly",
    "html",
    "going",
    "select",
    "code",
    "right",
    "click",
    "copy",
    "inside",
    "products",
    "js",
    "inside",
    "get",
    "price",
    "method",
    "going",
    "rightclick",
    "paste",
    "want",
    "return",
    "price",
    "string",
    "front",
    "create",
    "template",
    "string",
    "inserting",
    "value",
    "back",
    "template",
    "string",
    "back",
    "tick",
    "going",
    "return",
    "method",
    "another",
    "thing",
    "need",
    "fix",
    "product",
    "undefined",
    "get",
    "price",
    "sets",
    "property",
    "going",
    "use",
    "price",
    "sets",
    "one",
    "extra",
    "thing",
    "need",
    "using",
    "format",
    "currency",
    "function",
    "import",
    "going",
    "scroll",
    "top",
    "import",
    "format",
    "currency",
    "import",
    "curly",
    "brackets",
    "format",
    "currency",
    "function",
    "string",
    "going",
    "locate",
    "function",
    "inside",
    "data",
    "folder",
    "need",
    "get",
    "data",
    "folder",
    "using",
    "slash",
    "go",
    "scripts",
    "folder",
    "uts",
    "folder",
    "load",
    "money",
    "js",
    "scripts",
    "sl",
    "utils",
    "instead",
    "calculating",
    "price",
    "inside",
    "html",
    "going",
    "remove",
    "insert",
    "product",
    "getet",
    "price",
    "method",
    "brackets",
    "let",
    "save",
    "let",
    "open",
    "homepage",
    "make",
    "sure",
    "working",
    "see",
    "everything",
    "still",
    "working",
    "including",
    "stars",
    "prices",
    "go",
    "back",
    "code",
    "methods",
    "let",
    "use",
    "page",
    "checkout",
    "page",
    "open",
    "scripts",
    "checkout",
    "js",
    "basically",
    "displays",
    "products",
    "checkout",
    "page",
    "scroll",
    "html",
    "find",
    "delivery",
    "date",
    "product",
    "image",
    "product",
    "name",
    "going",
    "see",
    "also",
    "calculating",
    "product",
    "price",
    "directly",
    "html",
    "instead",
    "let",
    "use",
    "method",
    "created",
    "select",
    "code",
    "remove",
    "insert",
    "matching",
    "product",
    "time",
    "matching",
    "product",
    "remember",
    "converted",
    "products",
    "classes",
    "regular",
    "object",
    "anymore",
    "enhanced",
    "object",
    "product",
    "class",
    "means",
    "method",
    "get",
    "price",
    "brackets",
    "save",
    "let",
    "open",
    "checkout",
    "page",
    "see",
    "works",
    "open",
    "web",
    "page",
    "top",
    "right",
    "going",
    "click",
    "cart",
    "see",
    "checkout",
    "page",
    "price",
    "still",
    "displayed",
    "correctly",
    "go",
    "back",
    "code",
    "see",
    "converting",
    "objects",
    "classes",
    "able",
    "use",
    "extra",
    "features",
    "classes",
    "like",
    "methods",
    "make",
    "code",
    "cleaner",
    "let",
    "make",
    "sure",
    "tests",
    "passing",
    "go",
    "left",
    "scroll",
    "going",
    "open",
    "browser",
    "open",
    "right",
    "click",
    "open",
    "live",
    "server",
    "already",
    "open",
    "going",
    "open",
    "test",
    "page",
    "tests",
    "still",
    "passing",
    "code",
    "still",
    "correct",
    "let",
    "save",
    "changes",
    "git",
    "open",
    "git",
    "section",
    "products",
    "js",
    "created",
    "products",
    "class",
    "bottom",
    "converted",
    "objects",
    "products",
    "class",
    "actually",
    "one",
    "thing",
    "forgot",
    "clean",
    "console",
    "logs",
    "let",
    "right",
    "going",
    "open",
    "code",
    "go",
    "products",
    "js",
    "scroll",
    "right",
    "product",
    "class",
    "let",
    "remove",
    "product",
    "one",
    "example",
    "also",
    "remove",
    "products",
    "end",
    "save",
    "go",
    "back",
    "git",
    "open",
    "products",
    "js",
    "code",
    "convert",
    "objects",
    "class",
    "amazon",
    "js",
    "use",
    "feature",
    "classes",
    "called",
    "methods",
    "make",
    "code",
    "cleaner",
    "checkout",
    "js",
    "stop",
    "loading",
    "cart",
    "class",
    "practice",
    "file",
    "orders",
    "summary",
    "js",
    "also",
    "use",
    "method",
    "make",
    "code",
    "cleaner",
    "let",
    "create",
    "message",
    "describe",
    "changes",
    "convert",
    "products",
    "classes",
    "commit",
    "next",
    "going",
    "learn",
    "important",
    "feature",
    "programming",
    "called",
    "inheritance",
    "inheritance",
    "lets",
    "us",
    "reuse",
    "code",
    "classes",
    "first",
    "let",
    "learn",
    "concept",
    "inheritance",
    "going",
    "open",
    "project",
    "open",
    "page",
    "checkout",
    "page",
    "going",
    "go",
    "homepage",
    "clicking",
    "top",
    "left",
    "page",
    "bunch",
    "products",
    "also",
    "notice",
    "different",
    "types",
    "products",
    "example",
    "clothing",
    "like",
    "appliances",
    "like",
    "toaster",
    "clothing",
    "appliances",
    "still",
    "products",
    "name",
    "price",
    "rating",
    "specific",
    "type",
    "product",
    "example",
    "clothing",
    "properties",
    "regular",
    "product",
    "also",
    "specific",
    "properties",
    "like",
    "size",
    "chart",
    "represent",
    "kind",
    "relationship",
    "code",
    "product",
    "specific",
    "type",
    "product",
    "one",
    "way",
    "represent",
    "create",
    "new",
    "class",
    "called",
    "clothing",
    "class",
    "properties",
    "regular",
    "product",
    "also",
    "specific",
    "properties",
    "however",
    "problem",
    "duplicating",
    "lot",
    "code",
    "instead",
    "objectoriented",
    "programming",
    "feature",
    "called",
    "inheritance",
    "allows",
    "one",
    "class",
    "get",
    "properties",
    "methods",
    "another",
    "class",
    "copy",
    "paste",
    "code",
    "example",
    "make",
    "clothing",
    "class",
    "use",
    "inheritance",
    "get",
    "properties",
    "methods",
    "product",
    "class",
    "similar",
    "child",
    "inherits",
    "things",
    "parents",
    "like",
    "hair",
    "color",
    "shape",
    "eyes",
    "fact",
    "call",
    "product",
    "class",
    "parent",
    "class",
    "call",
    "clothing",
    "class",
    "child",
    "class",
    "let",
    "learn",
    "use",
    "inheritance",
    "code",
    "going",
    "open",
    "vss",
    "code",
    "open",
    "code",
    "left",
    "open",
    "products",
    "js",
    "going",
    "scroll",
    "product",
    "class",
    "class",
    "going",
    "create",
    "specific",
    "type",
    "product",
    "called",
    "class",
    "capital",
    "c",
    "clothing",
    "curly",
    "brackets",
    "said",
    "clothing",
    "specific",
    "type",
    "product",
    "means",
    "clothing",
    "properties",
    "methods",
    "product",
    "first",
    "let",
    "inherit",
    "properties",
    "methods",
    "clothing",
    "class",
    "use",
    "inheritance",
    "class",
    "name",
    "going",
    "use",
    "word",
    "extends",
    "going",
    "give",
    "class",
    "want",
    "inherit",
    "product",
    "class",
    "means",
    "clothing",
    "get",
    "properties",
    "methods",
    "class",
    "inherit",
    "properties",
    "methods",
    "demonstrate",
    "let",
    "leave",
    "empty",
    "create",
    "new",
    "clothing",
    "object",
    "let",
    "create",
    "variable",
    "first",
    "using",
    "const",
    "name",
    "make",
    "equal",
    "generate",
    "new",
    "clothing",
    "object",
    "use",
    "word",
    "new",
    "capital",
    "c",
    "clothing",
    "brackets",
    "next",
    "going",
    "expand",
    "products",
    "array",
    "going",
    "give",
    "product",
    "details",
    "class",
    "going",
    "scroll",
    "third",
    "product",
    "going",
    "select",
    "object",
    "right",
    "click",
    "copy",
    "scroll",
    "brackets",
    "going",
    "right",
    "click",
    "paste",
    "created",
    "new",
    "closing",
    "class",
    "gave",
    "data",
    "needs",
    "let",
    "see",
    "looks",
    "like",
    "going",
    "brackets",
    "variable",
    "name",
    "save",
    "let",
    "open",
    "console",
    "open",
    "web",
    "page",
    "page",
    "going",
    "right",
    "click",
    "inspect",
    "open",
    "console",
    "see",
    "created",
    "new",
    "clothing",
    "object",
    "open",
    "see",
    "properties",
    "product",
    "class",
    "inherited",
    "properties",
    "product",
    "let",
    "see",
    "inherited",
    "methods",
    "well",
    "go",
    "code",
    "let",
    "try",
    "method",
    "get",
    "price",
    "getet",
    "price",
    "brackets",
    "save",
    "open",
    "console",
    "see",
    "get",
    "price",
    "also",
    "works",
    "clothing",
    "inherited",
    "methods",
    "product",
    "well",
    "even",
    "though",
    "empty",
    "class",
    "gets",
    "inherits",
    "properties",
    "methods",
    "product",
    "use",
    "inheritance",
    "one",
    "class",
    "specific",
    "type",
    "another",
    "class",
    "example",
    "clothing",
    "specific",
    "type",
    "product",
    "want",
    "properties",
    "methods",
    "product",
    "still",
    "want",
    "copy",
    "paste",
    "code",
    "inheritance",
    "lets",
    "us",
    "reuse",
    "code",
    "classes",
    "clothing",
    "class",
    "add",
    "properties",
    "methods",
    "specific",
    "clothing",
    "example",
    "clothing",
    "size",
    "chart",
    "con",
    "convenience",
    "inside",
    "object",
    "actually",
    "added",
    "size",
    "chart",
    "link",
    "let",
    "add",
    "clothing",
    "class",
    "going",
    "add",
    "property",
    "size",
    "chart",
    "link",
    "set",
    "value",
    "going",
    "use",
    "constructor",
    "like",
    "going",
    "use",
    "constructor",
    "brackets",
    "curly",
    "brackets",
    "going",
    "give",
    "parameter",
    "called",
    "product",
    "details",
    "create",
    "clothing",
    "save",
    "object",
    "product",
    "details",
    "use",
    "set",
    "properties",
    "going",
    "size",
    "chart",
    "link",
    "make",
    "equal",
    "product",
    "details",
    "object",
    "going",
    "get",
    "size",
    "chart",
    "link",
    "property",
    "dot",
    "size",
    "chart",
    "link",
    "one",
    "problem",
    "clothing",
    "inherits",
    "properties",
    "product",
    "also",
    "need",
    "set",
    "id",
    "image",
    "name",
    "scroll",
    "could",
    "something",
    "like",
    "id",
    "equals",
    "product",
    "details",
    "id",
    "however",
    "instead",
    "one",
    "one",
    "inheritance",
    "gives",
    "us",
    "shortcut",
    "actually",
    "use",
    "constructor",
    "parent",
    "class",
    "call",
    "parents",
    "constructor",
    "going",
    "use",
    "special",
    "feature",
    "classes",
    "called",
    "super",
    "brackets",
    "super",
    "basically",
    "calls",
    "constructor",
    "parent",
    "class",
    "product",
    "call",
    "constructor",
    "also",
    "need",
    "give",
    "product",
    "details",
    "going",
    "call",
    "super",
    "give",
    "product",
    "details",
    "call",
    "constructor",
    "parent",
    "class",
    "product",
    "set",
    "id",
    "name",
    "rating",
    "let",
    "save",
    "check",
    "console",
    "open",
    "clothing",
    "object",
    "see",
    "size",
    "chart",
    "link",
    "property",
    "inheritance",
    "works",
    "class",
    "get",
    "inherit",
    "properties",
    "methods",
    "another",
    "class",
    "reuse",
    "code",
    "class",
    "also",
    "specific",
    "properties",
    "methods",
    "like",
    "size",
    "chart",
    "link",
    "one",
    "last",
    "thing",
    "know",
    "create",
    "constructor",
    "default",
    "run",
    "parents",
    "constructor",
    "class",
    "empty",
    "code",
    "still",
    "worked",
    "clothing",
    "class",
    "going",
    "use",
    "project",
    "right",
    "scroll",
    "products",
    "array",
    "converted",
    "product",
    "class",
    "however",
    "going",
    "convert",
    "like",
    "clothing",
    "class",
    "instead",
    "make",
    "specific",
    "know",
    "objects",
    "convert",
    "product",
    "ones",
    "convert",
    "clothing",
    "help",
    "us",
    "included",
    "property",
    "called",
    "type",
    "type",
    "tells",
    "us",
    "class",
    "use",
    "converting",
    "class",
    "sometimes",
    "called",
    "discriminator",
    "property",
    "tells",
    "us",
    "class",
    "convert",
    "going",
    "go",
    "bottom",
    "code",
    "going",
    "trick",
    "going",
    "scroll",
    "products",
    "array",
    "click",
    "arrow",
    "collapse",
    "bottom",
    "going",
    "use",
    "type",
    "property",
    "decide",
    "class",
    "use",
    "inside",
    "function",
    "going",
    "use",
    "statement",
    "bracket",
    "et",
    "curler",
    "brackets",
    "inside",
    "going",
    "check",
    "type",
    "property",
    "product",
    "details",
    "type",
    "check",
    "equal",
    "string",
    "clothing",
    "equal",
    "clothing",
    "going",
    "convert",
    "object",
    "clothing",
    "class",
    "instead",
    "let",
    "return",
    "new",
    "capital",
    "c",
    "clothing",
    "brackets",
    "going",
    "give",
    "constructor",
    "product",
    "details",
    "array",
    "contain",
    "mix",
    "regular",
    "products",
    "clothing",
    "next",
    "clothing",
    "going",
    "display",
    "size",
    "chart",
    "link",
    "page",
    "first",
    "let",
    "make",
    "sure",
    "image",
    "closing",
    "size",
    "chart",
    "go",
    "images",
    "folder",
    "might",
    "see",
    "image",
    "called",
    "clothing",
    "siiz",
    "currently",
    "need",
    "download",
    "first",
    "going",
    "click",
    "link",
    "description",
    "open",
    "size",
    "chart",
    "image",
    "going",
    "right",
    "click",
    "save",
    "image",
    "find",
    "folder",
    "contains",
    "code",
    "desktop",
    "inside",
    "javascript",
    "amazon",
    "project",
    "inside",
    "images",
    "folder",
    "save",
    "go",
    "back",
    "code",
    "closing",
    "size",
    "chart",
    "image",
    "inside",
    "images",
    "folder",
    "let",
    "display",
    "size",
    "chart",
    "page",
    "go",
    "homepage",
    "whenever",
    "clothing",
    "product",
    "like",
    "going",
    "display",
    "size",
    "chart",
    "underneath",
    "let",
    "go",
    "back",
    "code",
    "open",
    "amazon",
    "js",
    "creates",
    "homepage",
    "right",
    "going",
    "scroll",
    "html",
    "product",
    "price",
    "quantity",
    "selector",
    "underneath",
    "clothing",
    "product",
    "going",
    "display",
    "size",
    "chart",
    "link",
    "quantity",
    "selector",
    "like",
    "one",
    "way",
    "use",
    "something",
    "like",
    "statement",
    "turnery",
    "like",
    "clothing",
    "display",
    "html",
    "clothing",
    "display",
    "nothing",
    "however",
    "going",
    "learn",
    "different",
    "way",
    "using",
    "inheritance",
    "first",
    "going",
    "create",
    "new",
    "method",
    "clothing",
    "class",
    "going",
    "generate",
    "html",
    "need",
    "going",
    "go",
    "code",
    "scroll",
    "open",
    "products",
    "js",
    "going",
    "scroll",
    "clothing",
    "class",
    "bottom",
    "going",
    "create",
    "new",
    "method",
    "let",
    "call",
    "extra",
    "info",
    "html",
    "brackets",
    "cur",
    "brackets",
    "method",
    "generate",
    "html",
    "contains",
    "extra",
    "information",
    "product",
    "like",
    "size",
    "chart",
    "going",
    "return",
    "html",
    "use",
    "template",
    "string",
    "going",
    "insert",
    "values",
    "inside",
    "inside",
    "let",
    "create",
    "html",
    "link",
    "create",
    "link",
    "going",
    "use",
    "code",
    "less",
    "greater",
    "less",
    "sl",
    "greater",
    "html",
    "element",
    "creates",
    "link",
    "click",
    "link",
    "open",
    "another",
    "page",
    "page",
    "inside",
    "link",
    "let",
    "put",
    "text",
    "size",
    "chart",
    "going",
    "show",
    "page",
    "link",
    "elements",
    "two",
    "attributes",
    "first",
    "attribute",
    "called",
    "hre",
    "equals",
    "double",
    "quotes",
    "tells",
    "computer",
    "page",
    "open",
    "click",
    "link",
    "inside",
    "going",
    "insert",
    "size",
    "chart",
    "link",
    "going",
    "insert",
    "siiz",
    "chart",
    "link",
    "click",
    "open",
    "page",
    "containing",
    "size",
    "chart",
    "image",
    "scroll",
    "back",
    "link",
    "elements",
    "another",
    "attribute",
    "called",
    "target",
    "equals",
    "double",
    "quotes",
    "going",
    "give",
    "value",
    "underscore",
    "blank",
    "add",
    "new",
    "lines",
    "make",
    "little",
    "easier",
    "read",
    "target",
    "equals",
    "blank",
    "tells",
    "link",
    "open",
    "new",
    "tab",
    "let",
    "save",
    "file",
    "go",
    "back",
    "homepage",
    "scroll",
    "amazon",
    "js",
    "quantity",
    "selector",
    "let",
    "insert",
    "call",
    "method",
    "created",
    "product",
    "extra",
    "info",
    "html",
    "brackets",
    "ins",
    "html",
    "containing",
    "extra",
    "information",
    "product",
    "like",
    "size",
    "chart",
    "run",
    "code",
    "one",
    "thing",
    "need",
    "fix",
    "currently",
    "clothing",
    "class",
    "method",
    "regular",
    "product",
    "going",
    "method",
    "going",
    "cause",
    "error",
    "fix",
    "also",
    "going",
    "create",
    "method",
    "product",
    "class",
    "go",
    "back",
    "code",
    "open",
    "products",
    "js",
    "going",
    "scroll",
    "products",
    "class",
    "bottom",
    "going",
    "add",
    "method",
    "extra",
    "info",
    "html",
    "brackets",
    "curly",
    "brackets",
    "regular",
    "products",
    "extra",
    "info",
    "want",
    "display",
    "let",
    "return",
    "empty",
    "string",
    "save",
    "call",
    "extra",
    "info",
    "html",
    "matter",
    "product",
    "clothing",
    "method",
    "defined",
    "go",
    "back",
    "amazon",
    "js",
    "always",
    "work",
    "let",
    "click",
    "file",
    "save",
    "open",
    "web",
    "page",
    "see",
    "result",
    "notice",
    "products",
    "clothing",
    "size",
    "chart",
    "underneath",
    "regular",
    "products",
    "extra",
    "information",
    "click",
    "size",
    "chart",
    "link",
    "open",
    "new",
    "tab",
    "size",
    "chart",
    "image",
    "create",
    "size",
    "chart",
    "link",
    "clothing",
    "products",
    "let",
    "go",
    "back",
    "code",
    "learn",
    "new",
    "technique",
    "used",
    "left",
    "go",
    "back",
    "products",
    "js",
    "first",
    "notice",
    "product",
    "class",
    "method",
    "called",
    "extra",
    "info",
    "ht",
    "ml",
    "clothing",
    "extends",
    "class",
    "means",
    "clothing",
    "automatically",
    "get",
    "extra",
    "info",
    "html",
    "method",
    "define",
    "method",
    "inside",
    "clothing",
    "actually",
    "override",
    "replace",
    "parents",
    "method",
    "technique",
    "called",
    "method",
    "overwriting",
    "one",
    "thing",
    "know",
    "method",
    "overwriting",
    "really",
    "need",
    "access",
    "parents",
    "method",
    "feature",
    "use",
    "called",
    "super",
    "super",
    "gives",
    "us",
    "access",
    "parent",
    "class",
    "want",
    "call",
    "method",
    "super",
    "extra",
    "info",
    "html",
    "super",
    "used",
    "except",
    "calls",
    "parents",
    "constructor",
    "calls",
    "one",
    "parents",
    "methods",
    "let",
    "comment",
    "since",
    "example",
    "let",
    "save",
    "lastly",
    "let",
    "go",
    "back",
    "amazon",
    "js",
    "take",
    "look",
    "code",
    "notice",
    "call",
    "extra",
    "info",
    "html",
    "know",
    "class",
    "might",
    "clothing",
    "class",
    "might",
    "product",
    "class",
    "technique",
    "called",
    "polymorphism",
    "means",
    "use",
    "method",
    "without",
    "needing",
    "know",
    "exactly",
    "class",
    "polymorphism",
    "sort",
    "like",
    "alternative",
    "statements",
    "instead",
    "clothing",
    "regular",
    "product",
    "something",
    "else",
    "classes",
    "use",
    "method",
    "class",
    "det",
    "determine",
    "method",
    "add",
    "new",
    "class",
    "like",
    "appliance",
    "class",
    "need",
    "change",
    "code",
    "appliance",
    "class",
    "determine",
    "extra",
    "info",
    "html",
    "learned",
    "inheritance",
    "lets",
    "us",
    "reuse",
    "code",
    "classes",
    "learn",
    "techniques",
    "inheritance",
    "like",
    "method",
    "overwriting",
    "polymorph",
    "prm",
    "make",
    "code",
    "little",
    "bit",
    "cleaner",
    "let",
    "check",
    "test",
    "make",
    "sure",
    "everything",
    "still",
    "works",
    "open",
    "test",
    "page",
    "make",
    "sure",
    "everything",
    "still",
    "passing",
    "go",
    "back",
    "code",
    "save",
    "git",
    "open",
    "git",
    "section",
    "products",
    "js",
    "created",
    "clothing",
    "class",
    "inherits",
    "product",
    "one",
    "thing",
    "forgot",
    "remove",
    "practice",
    "code",
    "let",
    "actually",
    "go",
    "back",
    "code",
    "products",
    "js",
    "clothing",
    "let",
    "remove",
    "practice",
    "code",
    "save",
    "go",
    "back",
    "git",
    "make",
    "sure",
    "removed",
    "added",
    "size",
    "chart",
    "image",
    "amazon",
    "js",
    "used",
    "polymorphism",
    "add",
    "extra",
    "info",
    "product",
    "let",
    "create",
    "message",
    "describing",
    "changes",
    "use",
    "inheritance",
    "polymorphism",
    "add",
    "size",
    "chart",
    "commit",
    "rest",
    "lesson",
    "going",
    "learn",
    "details",
    "classes",
    "first",
    "detail",
    "test",
    "classes",
    "testing",
    "classes",
    "writing",
    "normal",
    "tests",
    "generate",
    "object",
    "using",
    "class",
    "test",
    "properties",
    "methods",
    "correct",
    "leave",
    "writing",
    "tests",
    "exercise",
    "end",
    "lesson",
    "second",
    "detail",
    "going",
    "learn",
    "built",
    "classes",
    "classes",
    "provided",
    "language",
    "let",
    "go",
    "back",
    "code",
    "open",
    "products",
    "js",
    "going",
    "practice",
    "using",
    "class",
    "example",
    "class",
    "date",
    "class",
    "generates",
    "object",
    "represents",
    "current",
    "date",
    "classes",
    "created",
    "going",
    "create",
    "new",
    "lines",
    "going",
    "practice",
    "using",
    "date",
    "class",
    "first",
    "generate",
    "new",
    "date",
    "object",
    "using",
    "code",
    "new",
    "class",
    "capital",
    "date",
    "brackets",
    "let",
    "save",
    "object",
    "variable",
    "front",
    "use",
    "const",
    "call",
    "date",
    "make",
    "equal",
    "object",
    "generated",
    "let",
    "date",
    "see",
    "looks",
    "like",
    "save",
    "open",
    "page",
    "go",
    "back",
    "project",
    "going",
    "check",
    "console",
    "right",
    "click",
    "inspect",
    "console",
    "see",
    "date",
    "object",
    "represents",
    "current",
    "date",
    "time",
    "current",
    "date",
    "time",
    "recording",
    "video",
    "date",
    "object",
    "properties",
    "methods",
    "use",
    "related",
    "date",
    "example",
    "go",
    "back",
    "code",
    "every",
    "date",
    "object",
    "method",
    "called",
    "two",
    "local",
    "time",
    "string",
    "basically",
    "gives",
    "us",
    "current",
    "time",
    "let",
    "try",
    "create",
    "create",
    "new",
    "line",
    "type",
    "code",
    "date",
    "dot",
    "local",
    "time",
    "string",
    "brackets",
    "make",
    "sure",
    "cam",
    "case",
    "two",
    "lowercase",
    "every",
    "word",
    "starts",
    "uppercase",
    "see",
    "looks",
    "like",
    "console",
    "log",
    "brackets",
    "let",
    "save",
    "file",
    "open",
    "console",
    "method",
    "gave",
    "us",
    "time",
    "see",
    "current",
    "time",
    "date",
    "class",
    "lets",
    "us",
    "create",
    "objects",
    "represent",
    "current",
    "date",
    "time",
    "interesting",
    "thing",
    "know",
    "used",
    "external",
    "library",
    "djs",
    "earlier",
    "project",
    "djs",
    "uses",
    "date",
    "class",
    "behind",
    "scenes",
    "however",
    "djs",
    "gives",
    "us",
    "lot",
    "extra",
    "features",
    "usually",
    "use",
    "djs",
    "instead",
    "using",
    "date",
    "class",
    "directly",
    "let",
    "comment",
    "code",
    "example",
    "top",
    "type",
    "slashstar",
    "star",
    "slash",
    "last",
    "thing",
    "going",
    "learn",
    "detail",
    "dets",
    "reminder",
    "inside",
    "object",
    "use",
    "value",
    "point",
    "outer",
    "object",
    "feature",
    "lets",
    "object",
    "access",
    "properties",
    "javascript",
    "actually",
    "used",
    "anywhere",
    "code",
    "example",
    "going",
    "create",
    "new",
    "lines",
    "directly",
    "using",
    "using",
    "outside",
    "object",
    "situation",
    "object",
    "point",
    "undefined",
    "actually",
    "makes",
    "sense",
    "save",
    "check",
    "console",
    "equal",
    "undefined",
    "originally",
    "actually",
    "equaled",
    "window",
    "object",
    "however",
    "behavior",
    "caused",
    "confusion",
    "release",
    "javascript",
    "modules",
    "inside",
    "module",
    "undefined",
    "makes",
    "sense",
    "let",
    "go",
    "back",
    "code",
    "another",
    "place",
    "use",
    "creating",
    "object",
    "let",
    "go",
    "going",
    "create",
    "new",
    "object",
    "using",
    "const",
    "call",
    "object",
    "two",
    "make",
    "equal",
    "curly",
    "brackets",
    "going",
    "give",
    "object",
    "property",
    "let",
    "call",
    "colon",
    "give",
    "value",
    "two",
    "comma",
    "add",
    "another",
    "property",
    "b",
    "colon",
    "set",
    "value",
    "property",
    "dot",
    "might",
    "think",
    "inside",
    "object",
    "point",
    "object",
    "2",
    "however",
    "point",
    "code",
    "object",
    "2",
    "created",
    "yet",
    "anything",
    "point",
    "undefined",
    "save",
    "open",
    "console",
    "give",
    "us",
    "error",
    "undefined",
    "let",
    "go",
    "back",
    "code",
    "far",
    "inside",
    "method",
    "use",
    "point",
    "object",
    "outside",
    "method",
    "object",
    "point",
    "undefined",
    "everything",
    "makes",
    "sense",
    "far",
    "let",
    "comment",
    "using",
    "sl",
    "star",
    "bottom",
    "start",
    "slash",
    "last",
    "important",
    "place",
    "use",
    "inside",
    "function",
    "bottom",
    "going",
    "create",
    "function",
    "let",
    "call",
    "log",
    "brackets",
    "curly",
    "brackets",
    "inside",
    "going",
    "console",
    "log",
    "inside",
    "object",
    "nothing",
    "point2",
    "situation",
    "undefined",
    "well",
    "run",
    "function",
    "log",
    "brackets",
    "save",
    "check",
    "console",
    "tell",
    "us",
    "undefined",
    "inside",
    "regular",
    "function",
    "next",
    "actually",
    "special",
    "feature",
    "inside",
    "function",
    "change",
    "whatever",
    "want",
    "functions",
    "method",
    "called",
    "call",
    "line",
    "let",
    "type",
    "function",
    "name",
    "log",
    "use",
    "method",
    "call",
    "brackets",
    "call",
    "runs",
    "function",
    "thing",
    "line",
    "except",
    "set",
    "value",
    "whatever",
    "want",
    "first",
    "value",
    "give",
    "call",
    "going",
    "value",
    "example",
    "give",
    "string",
    "hello",
    "run",
    "function",
    "equal",
    "hello",
    "save",
    "open",
    "console",
    "see",
    "set",
    "equal",
    "hello",
    "special",
    "feature",
    "inside",
    "function",
    "change",
    "whatever",
    "want",
    "using",
    "method",
    "like",
    "call",
    "call",
    "calling",
    "running",
    "function",
    "except",
    "add",
    "extra",
    "parameter",
    "front",
    "first",
    "parameter",
    "value",
    "last",
    "important",
    "thing",
    "know",
    "arrow",
    "functions",
    "change",
    "value",
    "example",
    "let",
    "create",
    "method",
    "using",
    "arrow",
    "function",
    "time",
    "create",
    "new",
    "lines",
    "first",
    "going",
    "create",
    "object",
    "using",
    "const",
    "call",
    "object",
    "three",
    "equals",
    "curly",
    "brackets",
    "inside",
    "give",
    "method",
    "colon",
    "going",
    "create",
    "method",
    "using",
    "arrow",
    "function",
    "time",
    "brackets",
    "arrow",
    "curly",
    "brackets",
    "inside",
    "console",
    "log",
    "usually",
    "point",
    "object",
    "however",
    "arrow",
    "functions",
    "change",
    "value",
    "value",
    "outside",
    "arrow",
    "function",
    "outside",
    "arrow",
    "function",
    "let",
    "type",
    "object",
    "point",
    "undefined",
    "inside",
    "arrow",
    "function",
    "also",
    "undefined",
    "basically",
    "keeps",
    "value",
    "outside",
    "arrow",
    "function",
    "test",
    "run",
    "object",
    "method",
    "brackets",
    "save",
    "check",
    "console",
    "show",
    "us",
    "inside",
    "also",
    "undefined",
    "arrow",
    "function",
    "whatever",
    "value",
    "outside",
    "arrow",
    "function",
    "might",
    "wondering",
    "arrow",
    "functions",
    "designed",
    "way",
    "javascript",
    "common",
    "problem",
    "past",
    "inside",
    "method",
    "points",
    "object",
    "try",
    "loop",
    "inside",
    "loop",
    "point",
    "object",
    "anymore",
    "points",
    "undefined",
    "created",
    "whole",
    "new",
    "function",
    "remember",
    "inside",
    "regular",
    "function",
    "becomes",
    "undefined",
    "caused",
    "problems",
    "longer",
    "access",
    "outer",
    "object",
    "created",
    "arrow",
    "functions",
    "replace",
    "arrow",
    "function",
    "would",
    "equal",
    "whatever",
    "outside",
    "arrow",
    "function",
    "arrow",
    "functions",
    "change",
    "value",
    "outside",
    "points",
    "object",
    "inside",
    "also",
    "points",
    "object",
    "arrow",
    "functions",
    "designed",
    "way",
    "avoid",
    "accidentally",
    "overwriting",
    "let",
    "summarize",
    "learned",
    "inside",
    "method",
    "points",
    "outer",
    "object",
    "inside",
    "function",
    "undefined",
    "change",
    "whatever",
    "want",
    "using",
    "something",
    "like",
    "call",
    "arrow",
    "functions",
    "change",
    "value",
    "worry",
    "rules",
    "bit",
    "confusing",
    "first",
    "actually",
    "sort",
    "reasonable",
    "object",
    "point",
    "point",
    "object",
    "object",
    "point",
    "undefined",
    "tools",
    "like",
    "call",
    "arrow",
    "functions",
    "kind",
    "manipulate",
    "value",
    "want",
    "work",
    "get",
    "used",
    "let",
    "comment",
    "practice",
    "code",
    "top",
    "type",
    "slashstar",
    "bottom",
    "star",
    "slash",
    "save",
    "save",
    "get",
    "open",
    "git",
    "section",
    "inside",
    "products",
    "js",
    "added",
    "practice",
    "code",
    "learn",
    "details",
    "classes",
    "let",
    "type",
    "message",
    "describing",
    "changes",
    "learn",
    "details",
    "classes",
    "commit",
    "learned",
    "programming",
    "might",
    "notice",
    "different",
    "style",
    "programming",
    "writing",
    "bunch",
    "functions",
    "directly",
    "might",
    "wondering",
    "style",
    "programming",
    "use",
    "objectoriented",
    "programming",
    "procedural",
    "programming",
    "style",
    "used",
    "earlier",
    "lessons",
    "answer",
    "personally",
    "prefer",
    "procedural",
    "programming",
    "javascript",
    "think",
    "simpler",
    "use",
    "objectoriented",
    "programming",
    "working",
    "team",
    "also",
    "uses",
    "also",
    "programming",
    "much",
    "popular",
    "languages",
    "still",
    "useful",
    "know",
    "programming",
    "case",
    "work",
    "programming",
    "languages",
    "future",
    "end",
    "lesson",
    "lesson",
    "learned",
    "objectoriented",
    "programming",
    "means",
    "organize",
    "code",
    "objects",
    "learned",
    "use",
    "function",
    "generate",
    "objects",
    "improve",
    "using",
    "class",
    "generate",
    "objects",
    "learned",
    "classes",
    "private",
    "properties",
    "methods",
    "learned",
    "inheritance",
    "lets",
    "us",
    "reuse",
    "code",
    "classes",
    "learned",
    "method",
    "overwriting",
    "polymorphism",
    "lets",
    "us",
    "call",
    "method",
    "without",
    "needing",
    "know",
    "class",
    "lastly",
    "learned",
    "details",
    "control",
    "value",
    "thanks",
    "watching",
    "course",
    "far",
    "want",
    "support",
    "channel",
    "check",
    "premium",
    "version",
    "courses",
    "like",
    "one",
    "get",
    "certificate",
    "completion",
    "better",
    "learning",
    "platform",
    "interested",
    "extra",
    "videos",
    "videos",
    "behind",
    "scenes",
    "content",
    "check",
    "links",
    "also",
    "support",
    "channel",
    "liking",
    "video",
    "subscribing",
    "sharing",
    "video",
    "others",
    "thanks",
    "let",
    "continue",
    "course",
    "exercises",
    "help",
    "practice",
    "learned",
    "lesson",
    "lesson",
    "going",
    "learn",
    "backend",
    "prepare",
    "next",
    "step",
    "finishing",
    "course",
    "first",
    "backend",
    "backend",
    "another",
    "computer",
    "manages",
    "data",
    "website",
    "example",
    "amazon",
    "project",
    "created",
    "website",
    "pick",
    "products",
    "want",
    "amazon",
    "company",
    "know",
    "products",
    "ordered",
    "situation",
    "second",
    "computer",
    "somewhere",
    "owned",
    "amazon",
    "computer",
    "sends",
    "order",
    "information",
    "second",
    "computer",
    "amazon",
    "know",
    "ordered",
    "second",
    "computer",
    "called",
    "backend",
    "computer",
    "backend",
    "manages",
    "data",
    "website",
    "hand",
    "computer",
    "web",
    "page",
    "see",
    "interact",
    "products",
    "called",
    "front",
    "end",
    "know",
    "backend",
    "computer",
    "front",
    "end",
    "send",
    "information",
    "back",
    "end",
    "two",
    "computers",
    "connected",
    "internet",
    "actually",
    "send",
    "messages",
    "using",
    "feature",
    "called",
    "http",
    "hypertext",
    "transfer",
    "protocol",
    "http",
    "message",
    "actually",
    "attach",
    "information",
    "like",
    "amazon",
    "order",
    "amazon",
    "backend",
    "receives",
    "http",
    "message",
    "amazon",
    "know",
    "ordered",
    "know",
    "http",
    "let",
    "send",
    "first",
    "http",
    "message",
    "using",
    "javascript",
    "go",
    "code",
    "left",
    "going",
    "create",
    "new",
    "file",
    "practicing",
    "backend",
    "scroll",
    "data",
    "folder",
    "click",
    "inside",
    "folder",
    "create",
    "new",
    "file",
    "let",
    "name",
    "file",
    "backend",
    "das",
    "practice",
    "js",
    "press",
    "enter",
    "send",
    "http",
    "message",
    "going",
    "use",
    "class",
    "called",
    "xml",
    "http",
    "request",
    "built",
    "class",
    "meaning",
    "provided",
    "javascript",
    "first",
    "gener",
    "object",
    "using",
    "class",
    "using",
    "code",
    "new",
    "class",
    "name",
    "xml",
    "capital",
    "capital",
    "http",
    "capital",
    "r",
    "request",
    "brackets",
    "creates",
    "new",
    "http",
    "message",
    "want",
    "send",
    "backend",
    "message",
    "also",
    "known",
    "request",
    "let",
    "save",
    "request",
    "variable",
    "front",
    "create",
    "variable",
    "const",
    "name",
    "xhr",
    "equals",
    "request",
    "next",
    "need",
    "set",
    "request",
    "create",
    "new",
    "line",
    "set",
    "xhr",
    "doop",
    "brackets",
    "set",
    "request",
    "going",
    "give",
    "open",
    "two",
    "parameters",
    "first",
    "parameter",
    "type",
    "http",
    "message",
    "send",
    "one",
    "type",
    "message",
    "send",
    "string",
    "get",
    "get",
    "means",
    "want",
    "get",
    "information",
    "back",
    "end",
    "several",
    "common",
    "types",
    "requests",
    "give",
    "backend",
    "going",
    "start",
    "learning",
    "get",
    "next",
    "going",
    "give",
    "open",
    "second",
    "parameter",
    "parameter",
    "tells",
    "computer",
    "send",
    "http",
    "message",
    "using",
    "http",
    "send",
    "message",
    "computer",
    "connected",
    "internet",
    "locate",
    "another",
    "computer",
    "internet",
    "need",
    "use",
    "url",
    "url",
    "stands",
    "uniform",
    "resource",
    "locator",
    "kind",
    "like",
    "address",
    "internet",
    "url",
    "helps",
    "us",
    "locate",
    "another",
    "computer",
    "internet",
    "urls",
    "look",
    "like",
    "url",
    "amazon",
    "youtube",
    "website",
    "https",
    "front",
    "means",
    "using",
    "http",
    "communicate",
    "computer",
    "http",
    "means",
    "using",
    "secure",
    "version",
    "http",
    "second",
    "part",
    "url",
    "called",
    "domain",
    "name",
    "like",
    "address",
    "points",
    "another",
    "computer",
    "internet",
    "points",
    "one",
    "amazon",
    "backend",
    "computers",
    "points",
    "one",
    "youtube",
    "backend",
    "computers",
    "superimple",
    "dodev",
    "points",
    "one",
    "backend",
    "computers",
    "want",
    "learn",
    "domain",
    "names",
    "internet",
    "works",
    "check",
    "video",
    "put",
    "website",
    "internet",
    "lesson",
    "actually",
    "set",
    "backend",
    "computer",
    "practice",
    "backend",
    "located",
    "url",
    "https",
    "super",
    "simple",
    "backend",
    "dodev",
    "second",
    "parameter",
    "open",
    "going",
    "give",
    "string",
    "going",
    "give",
    "url",
    "back",
    "end",
    "end",
    "want",
    "send",
    "message",
    "url",
    "backend",
    "https",
    "colon",
    "sl",
    "sl",
    "super",
    "simple",
    "backend",
    "death",
    "set",
    "http",
    "message",
    "give",
    "type",
    "message",
    "want",
    "send",
    "also",
    "url",
    "send",
    "message",
    "last",
    "step",
    "send",
    "message",
    "create",
    "new",
    "line",
    "type",
    "xhr",
    "doent",
    "brackets",
    "save",
    "creates",
    "new",
    "http",
    "message",
    "sets",
    "sends",
    "message",
    "across",
    "internet",
    "backend",
    "computer",
    "located",
    "superimple",
    "backend",
    "deev",
    "let",
    "actually",
    "run",
    "code",
    "see",
    "results",
    "going",
    "go",
    "left",
    "going",
    "open",
    "checkout",
    "js",
    "like",
    "going",
    "load",
    "practice",
    "file",
    "created",
    "create",
    "new",
    "line",
    "going",
    "import",
    "file",
    "string",
    "locate",
    "practice",
    "file",
    "first",
    "need",
    "go",
    "data",
    "folder",
    "using",
    "using",
    "dot",
    "sl",
    "dat",
    "slash",
    "load",
    "backend",
    "practice",
    "js",
    "save",
    "go",
    "back",
    "practice",
    "file",
    "open",
    "website",
    "run",
    "code",
    "send",
    "http",
    "message",
    "see",
    "let",
    "open",
    "website",
    "scroll",
    "website",
    "open",
    "open",
    "right",
    "clicking",
    "checkout",
    "html",
    "open",
    "live",
    "server",
    "already",
    "website",
    "open",
    "going",
    "open",
    "going",
    "go",
    "checkout",
    "page",
    "going",
    "look",
    "console",
    "right",
    "click",
    "inspect",
    "time",
    "instead",
    "going",
    "console",
    "tab",
    "going",
    "go",
    "new",
    "tab",
    "called",
    "network",
    "tab",
    "see",
    "tab",
    "make",
    "window",
    "wider",
    "might",
    "find",
    "arrows",
    "open",
    "network",
    "tab",
    "show",
    "us",
    "http",
    "messages",
    "coming",
    "computer",
    "start",
    "looking",
    "http",
    "messages",
    "one",
    "important",
    "thing",
    "know",
    "network",
    "tab",
    "messages",
    "appear",
    "open",
    "console",
    "send",
    "messages",
    "open",
    "console",
    "going",
    "show",
    "make",
    "sure",
    "http",
    "messages",
    "recorded",
    "need",
    "open",
    "network",
    "tab",
    "first",
    "going",
    "refresh",
    "page",
    "resend",
    "messages",
    "open",
    "network",
    "tab",
    "able",
    "see",
    "http",
    "messages",
    "bottom",
    "okay",
    "inside",
    "list",
    "able",
    "see",
    "sent",
    "message",
    "superimple",
    "backend",
    "deev",
    "see",
    "also",
    "search",
    "list",
    "using",
    "text",
    "box",
    "type",
    "part",
    "url",
    "sent",
    "message",
    "example",
    "super",
    "simple",
    "message",
    "sent",
    "appear",
    "click",
    "message",
    "get",
    "details",
    "right",
    "side",
    "several",
    "tabs",
    "headers",
    "tab",
    "gives",
    "us",
    "details",
    "message",
    "request",
    "tells",
    "us",
    "type",
    "requests",
    "sent",
    "get",
    "url",
    "sent",
    "super",
    "simple",
    "backend",
    "dev",
    "sends",
    "request",
    "across",
    "internet",
    "backend",
    "backend",
    "receives",
    "message",
    "request",
    "send",
    "back",
    "message",
    "called",
    "response",
    "see",
    "response",
    "backend",
    "open",
    "response",
    "tab",
    "see",
    "backend",
    "responded",
    "hello",
    "super",
    "simple",
    "dev",
    "back",
    "end",
    "documentation",
    "page",
    "check",
    "successfully",
    "sent",
    "http",
    "message",
    "request",
    "backend",
    "got",
    "back",
    "response",
    "another",
    "useful",
    "tab",
    "preview",
    "tab",
    "basically",
    "takes",
    "response",
    "displays",
    "easy",
    "read",
    "format",
    "let",
    "learn",
    "terminology",
    "send",
    "message",
    "backend",
    "message",
    "called",
    "request",
    "requesting",
    "something",
    "backend",
    "backend",
    "receives",
    "request",
    "send",
    "http",
    "message",
    "back",
    "us",
    "message",
    "called",
    "response",
    "request",
    "make",
    "get",
    "one",
    "response",
    "back",
    "end",
    "called",
    "request",
    "response",
    "cycle",
    "always",
    "one",
    "request",
    "one",
    "response",
    "next",
    "currently",
    "viewing",
    "response",
    "network",
    "tab",
    "actually",
    "get",
    "response",
    "code",
    "something",
    "response",
    "let",
    "go",
    "back",
    "code",
    "send",
    "requ",
    "quest",
    "get",
    "response",
    "using",
    "property",
    "called",
    "xhr",
    "response",
    "however",
    "slight",
    "problem",
    "send",
    "request",
    "backend",
    "takes",
    "time",
    "request",
    "travel",
    "across",
    "internet",
    "back",
    "end",
    "response",
    "come",
    "back",
    "response",
    "available",
    "right",
    "away",
    "xr",
    "response",
    "undefined",
    "first",
    "xr",
    "send",
    "known",
    "asynchronous",
    "code",
    "asynchronous",
    "code",
    "means",
    "wait",
    "line",
    "code",
    "finish",
    "sends",
    "request",
    "immediately",
    "goes",
    "next",
    "line",
    "response",
    "might",
    "come",
    "back",
    "later",
    "future",
    "access",
    "situation",
    "order",
    "get",
    "response",
    "need",
    "wait",
    "response",
    "come",
    "back",
    "first",
    "access",
    "response",
    "order",
    "wait",
    "response",
    "come",
    "back",
    "top",
    "create",
    "xhr",
    "going",
    "use",
    "code",
    "xhr",
    "add",
    "capital",
    "e",
    "event",
    "capital",
    "l",
    "listener",
    "brackets",
    "method",
    "listens",
    "waits",
    "event",
    "run",
    "function",
    "method",
    "takes",
    "two",
    "parameters",
    "first",
    "parameter",
    "event",
    "want",
    "listen",
    "wait",
    "case",
    "want",
    "wait",
    "response",
    "come",
    "back",
    "going",
    "give",
    "string",
    "load",
    "load",
    "means",
    "response",
    "loaded",
    "second",
    "parameter",
    "function",
    "want",
    "run",
    "event",
    "happens",
    "case",
    "response",
    "loaded",
    "going",
    "run",
    "function",
    "brackets",
    "arrow",
    "curly",
    "brackets",
    "function",
    "runs",
    "response",
    "loaded",
    "inside",
    "access",
    "xhr",
    "response",
    "undefined",
    "contain",
    "response",
    "saw",
    "earlier",
    "network",
    "tab",
    "let",
    "see",
    "looks",
    "like",
    "brackets",
    "remove",
    "line",
    "end",
    "save",
    "let",
    "go",
    "back",
    "check",
    "console",
    "response",
    "open",
    "console",
    "open",
    "console",
    "tab",
    "see",
    "response",
    "code",
    "console",
    "logged",
    "response",
    "string",
    "save",
    "variable",
    "whatever",
    "want",
    "code",
    "one",
    "thing",
    "might",
    "wondering",
    "put",
    "event",
    "listener",
    "top",
    "first",
    "need",
    "set",
    "event",
    "listener",
    "trigger",
    "event",
    "send",
    "request",
    "setting",
    "event",
    "listener",
    "clicking",
    "button",
    "need",
    "set",
    "event",
    "listener",
    "first",
    "click",
    "button",
    "send",
    "request",
    "back",
    "end",
    "wait",
    "response",
    "save",
    "response",
    "code",
    "next",
    "send",
    "different",
    "messages",
    "different",
    "requests",
    "backend",
    "using",
    "url",
    "paths",
    "url",
    "path",
    "part",
    "comes",
    "domain",
    "name",
    "example",
    "url",
    "url",
    "path",
    "url",
    "url",
    "path",
    "products",
    "slir",
    "url",
    "url",
    "path",
    "url",
    "path",
    "slash",
    "send",
    "request",
    "url",
    "paths",
    "url",
    "path",
    "give",
    "us",
    "different",
    "response",
    "let",
    "try",
    "sending",
    "requests",
    "different",
    "url",
    "paths",
    "see",
    "different",
    "responses",
    "get",
    "example",
    "let",
    "send",
    "request",
    "super",
    "simple",
    "backend",
    "deev",
    "url",
    "path",
    "sl",
    "hello",
    "save",
    "let",
    "open",
    "console",
    "see",
    "response",
    "see",
    "url",
    "path",
    "gave",
    "us",
    "different",
    "response",
    "last",
    "time",
    "let",
    "go",
    "back",
    "try",
    "another",
    "url",
    "path",
    "see",
    "looks",
    "like",
    "delete",
    "send",
    "request",
    "slash",
    "products",
    "slir",
    "save",
    "open",
    "console",
    "view",
    "response",
    "url",
    "path",
    "give",
    "us",
    "json",
    "contains",
    "details",
    "first",
    "product",
    "amazon",
    "project",
    "send",
    "requests",
    "different",
    "url",
    "paths",
    "get",
    "different",
    "responses",
    "backend",
    "next",
    "backend",
    "supports",
    "certain",
    "set",
    "url",
    "paths",
    "example",
    "created",
    "backend",
    "super",
    "simple",
    "backend",
    "decide",
    "url",
    "paths",
    "supported",
    "backend",
    "would",
    "respond",
    "url",
    "path",
    "send",
    "request",
    "url",
    "path",
    "supported",
    "back",
    "end",
    "respond",
    "error",
    "let",
    "go",
    "back",
    "code",
    "try",
    "url",
    "path",
    "supported",
    "let",
    "remove",
    "end",
    "try",
    "sending",
    "request",
    "supported",
    "save",
    "look",
    "console",
    "see",
    "backend",
    "responded",
    "error",
    "message",
    "saying",
    "url",
    "path",
    "supported",
    "browser",
    "also",
    "red",
    "error",
    "message",
    "red",
    "message",
    "displayed",
    "automatically",
    "error",
    "message",
    "tells",
    "us",
    "type",
    "request",
    "sent",
    "get",
    "url",
    "sent",
    "also",
    "number",
    "called",
    "status",
    "code",
    "whenever",
    "get",
    "response",
    "backend",
    "backend",
    "also",
    "gives",
    "us",
    "status",
    "code",
    "tells",
    "us",
    "request",
    "succeeded",
    "failed",
    "status",
    "code",
    "starts",
    "four",
    "five",
    "means",
    "response",
    "failed",
    "starting",
    "four",
    "means",
    "problem",
    "sent",
    "request",
    "url",
    "path",
    "supported",
    "starting",
    "five",
    "means",
    "backends",
    "problem",
    "example",
    "backend",
    "crashed",
    "status",
    "code",
    "starting",
    "two",
    "means",
    "response",
    "successful",
    "also",
    "see",
    "status",
    "code",
    "network",
    "tab",
    "search",
    "request",
    "click",
    "request",
    "headers",
    "tab",
    "show",
    "us",
    "status",
    "code",
    "row",
    "tells",
    "us",
    "request",
    "succeeded",
    "failed",
    "might",
    "wondering",
    "know",
    "url",
    "paths",
    "supported",
    "actually",
    "way",
    "figure",
    "url",
    "paths",
    "supported",
    "security",
    "reasons",
    "however",
    "backends",
    "provide",
    "documentation",
    "page",
    "lists",
    "url",
    "paths",
    "supported",
    "also",
    "kind",
    "response",
    "give",
    "backend",
    "created",
    "documentation",
    "page",
    "going",
    "take",
    "look",
    "open",
    "browser",
    "top",
    "going",
    "create",
    "new",
    "tab",
    "see",
    "documentation",
    "backend",
    "going",
    "go",
    "super",
    "simple",
    "back",
    "back",
    "end",
    "dodev",
    "sl",
    "documentation",
    "press",
    "enter",
    "documentation",
    "page",
    "backend",
    "gives",
    "us",
    "list",
    "url",
    "paths",
    "supported",
    "url",
    "path",
    "make",
    "request",
    "slash",
    "give",
    "us",
    "message",
    "saw",
    "earlier",
    "make",
    "request",
    "hello",
    "give",
    "us",
    "message",
    "also",
    "saw",
    "earlier",
    "way",
    "list",
    "url",
    "paths",
    "supported",
    "called",
    "backend",
    "api",
    "api",
    "means",
    "application",
    "programming",
    "interface",
    "interface",
    "means",
    "interact",
    "something",
    "list",
    "url",
    "paths",
    "ways",
    "interact",
    "backend",
    "call",
    "backend",
    "api",
    "next",
    "backend",
    "respond",
    "different",
    "types",
    "data",
    "one",
    "type",
    "data",
    "back",
    "end",
    "respond",
    "text",
    "example",
    "sent",
    "request",
    "hello",
    "gave",
    "us",
    "text",
    "back",
    "code",
    "change",
    "url",
    "path",
    "save",
    "open",
    "console",
    "click",
    "console",
    "tab",
    "gives",
    "us",
    "back",
    "text",
    "also",
    "see",
    "type",
    "response",
    "got",
    "using",
    "network",
    "tab",
    "open",
    "network",
    "tab",
    "search",
    "request",
    "click",
    "inside",
    "headers",
    "tab",
    "scroll",
    "response",
    "section",
    "give",
    "us",
    "content",
    "type",
    "type",
    "response",
    "got",
    "back",
    "example",
    "gave",
    "us",
    "text",
    "type",
    "text",
    "slpl",
    "another",
    "type",
    "data",
    "backend",
    "respond",
    "json",
    "go",
    "back",
    "code",
    "change",
    "url",
    "path",
    "products",
    "slir",
    "save",
    "look",
    "console",
    "network",
    "tab",
    "open",
    "request",
    "inside",
    "headers",
    "scroll",
    "tell",
    "us",
    "type",
    "response",
    "application",
    "sl",
    "json",
    "backend",
    "sent",
    "us",
    "back",
    "json",
    "open",
    "console",
    "tab",
    "see",
    "json",
    "string",
    "get",
    "json",
    "backend",
    "use",
    "convert",
    "back",
    "javascript",
    "object",
    "basically",
    "allows",
    "us",
    "send",
    "javascript",
    "objects",
    "across",
    "internet",
    "back",
    "end",
    "another",
    "type",
    "data",
    "back",
    "end",
    "respond",
    "html",
    "go",
    "back",
    "code",
    "change",
    "url",
    "path",
    "documentation",
    "documentation",
    "page",
    "saw",
    "earlier",
    "save",
    "open",
    "console",
    "see",
    "back",
    "end",
    "responded",
    "bunch",
    "html",
    "look",
    "network",
    "tab",
    "search",
    "request",
    "open",
    "request",
    "headers",
    "tab",
    "scroll",
    "content",
    "type",
    "tell",
    "us",
    "type",
    "response",
    "finally",
    "another",
    "type",
    "data",
    "backend",
    "respond",
    "image",
    "example",
    "go",
    "back",
    "code",
    "change",
    "url",
    "path",
    "imagesapple",
    "jpg",
    "say",
    "save",
    "open",
    "console",
    "network",
    "tab",
    "open",
    "request",
    "headers",
    "tab",
    "scroll",
    "tell",
    "us",
    "type",
    "response",
    "see",
    "backend",
    "respond",
    "different",
    "types",
    "data",
    "text",
    "okay",
    "got",
    "image",
    "back",
    "back",
    "end",
    "look",
    "like",
    "console",
    "open",
    "console",
    "see",
    "get",
    "bunch",
    "random",
    "characters",
    "console",
    "trying",
    "display",
    "image",
    "text",
    "image",
    "really",
    "text",
    "image",
    "raw",
    "data",
    "shows",
    "random",
    "characters",
    "however",
    "would",
    "better",
    "display",
    "actual",
    "ual",
    "image",
    "instead",
    "raw",
    "data",
    "display",
    "image",
    "using",
    "browser",
    "open",
    "browser",
    "type",
    "url",
    "top",
    "browser",
    "actually",
    "sends",
    "get",
    "request",
    "url",
    "typing",
    "actually",
    "thing",
    "code",
    "makes",
    "get",
    "request",
    "one",
    "big",
    "difference",
    "browser",
    "gets",
    "back",
    "response",
    "display",
    "response",
    "page",
    "example",
    "enter",
    "superimple",
    "backend",
    "dodev",
    "change",
    "url",
    "path",
    "nothing",
    "slash",
    "press",
    "enter",
    "actually",
    "sends",
    "get",
    "request",
    "back",
    "end",
    "backend",
    "responds",
    "text",
    "displays",
    "response",
    "page",
    "using",
    "browser",
    "thing",
    "making",
    "get",
    "request",
    "cool",
    "thing",
    "browser",
    "gets",
    "back",
    "image",
    "display",
    "actual",
    "image",
    "instead",
    "raw",
    "data",
    "saw",
    "console",
    "change",
    "url",
    "path",
    "images",
    "slapple",
    "jpg",
    "press",
    "enter",
    "get",
    "back",
    "image",
    "except",
    "browser",
    "display",
    "actual",
    "image",
    "page",
    "thing",
    "happens",
    "backend",
    "responds",
    "html",
    "top",
    "change",
    "url",
    "path",
    "slash",
    "documentation",
    "press",
    "enter",
    "response",
    "back",
    "end",
    "html",
    "theow",
    "browser",
    "display",
    "html",
    "actual",
    "web",
    "page",
    "instead",
    "raw",
    "html",
    "using",
    "browser",
    "thing",
    "making",
    "get",
    "request",
    "depending",
    "type",
    "response",
    "browser",
    "display",
    "response",
    "useful",
    "way",
    "page",
    "learn",
    "basics",
    "backend",
    "works",
    "send",
    "requests",
    "backend",
    "send",
    "requests",
    "different",
    "different",
    "url",
    "paths",
    "let",
    "go",
    "back",
    "code",
    "remove",
    "url",
    "path",
    "dodev",
    "keep",
    "console",
    "logging",
    "image",
    "save",
    "let",
    "save",
    "practice",
    "code",
    "git",
    "open",
    "kit",
    "section",
    "backend",
    "practice",
    "learn",
    "make",
    "requests",
    "backend",
    "checkout",
    "loaded",
    "backend",
    "practice",
    "file",
    "let",
    "type",
    "message",
    "describing",
    "changes",
    "add",
    "backend",
    "practice",
    "file",
    "commit",
    "learned",
    "backend",
    "communicate",
    "backend",
    "let",
    "use",
    "backend",
    "project",
    "first",
    "going",
    "open",
    "code",
    "actually",
    "going",
    "open",
    "checkout",
    "js",
    "going",
    "comment",
    "import",
    "statement",
    "going",
    "run",
    "practice",
    "file",
    "anymore",
    "type",
    "double",
    "slash",
    "comment",
    "save",
    "next",
    "super",
    "simple",
    "backend",
    "dodev",
    "url",
    "path",
    "called",
    "slash",
    "products",
    "gives",
    "us",
    "list",
    "products",
    "amazon",
    "project",
    "first",
    "let",
    "open",
    "browser",
    "visit",
    "url",
    "path",
    "see",
    "response",
    "looks",
    "like",
    "open",
    "tab",
    "super",
    "simple",
    "backend",
    "dodev",
    "going",
    "change",
    "url",
    "path",
    "end",
    "slash",
    "products",
    "press",
    "enter",
    "see",
    "url",
    "path",
    "gives",
    "us",
    "json",
    "response",
    "contains",
    "details",
    "products",
    "project",
    "instead",
    "using",
    "file",
    "computer",
    "load",
    "products",
    "let",
    "use",
    "backend",
    "load",
    "products",
    "let",
    "go",
    "back",
    "code",
    "left",
    "going",
    "open",
    "products",
    "js",
    "going",
    "scroll",
    "array",
    "prodct",
    "end",
    "instead",
    "loading",
    "products",
    "file",
    "going",
    "load",
    "products",
    "back",
    "end",
    "first",
    "let",
    "comment",
    "code",
    "need",
    "click",
    "arrow",
    "left",
    "collapse",
    "array",
    "going",
    "comment",
    "using",
    "slash",
    "star",
    "end",
    "star",
    "slash",
    "going",
    "load",
    "products",
    "back",
    "end",
    "first",
    "let",
    "create",
    "variable",
    "save",
    "products",
    "use",
    "let",
    "products",
    "equal",
    "empty",
    "array",
    "let",
    "export",
    "use",
    "outside",
    "file",
    "like",
    "front",
    "type",
    "export",
    "next",
    "let",
    "create",
    "function",
    "load",
    "products",
    "back",
    "end",
    "create",
    "function",
    "let",
    "name",
    "load",
    "products",
    "brackets",
    "curly",
    "brackets",
    "inside",
    "going",
    "create",
    "xml",
    "http",
    "request",
    "make",
    "request",
    "backend",
    "create",
    "request",
    "going",
    "use",
    "new",
    "class",
    "xml",
    "http",
    "request",
    "brackets",
    "generate",
    "new",
    "request",
    "object",
    "let",
    "save",
    "variable",
    "front",
    "use",
    "const",
    "name",
    "xhr",
    "equals",
    "object",
    "next",
    "going",
    "set",
    "request",
    "using",
    "xhr",
    "doop",
    "brackets",
    "open",
    "takes",
    "two",
    "parameters",
    "first",
    "parameter",
    "type",
    "request",
    "want",
    "send",
    "case",
    "type",
    "request",
    "string",
    "get",
    "going",
    "give",
    "open",
    "second",
    "parameter",
    "url",
    "want",
    "send",
    "request",
    "give",
    "string",
    "url",
    "backend",
    "https",
    "colon",
    "slash",
    "super",
    "simple",
    "backend",
    "dodev",
    "add",
    "url",
    "path",
    "slash",
    "products",
    "finally",
    "going",
    "send",
    "request",
    "using",
    "code",
    "xr",
    "send",
    "brackets",
    "create",
    "set",
    "request",
    "send",
    "backend",
    "remember",
    "send",
    "asynchronous",
    "means",
    "send",
    "request",
    "wait",
    "response",
    "come",
    "back",
    "order",
    "wait",
    "response",
    "code",
    "going",
    "create",
    "new",
    "lines",
    "set",
    "event",
    "listener",
    "using",
    "xr",
    "add",
    "event",
    "listener",
    "brackets",
    "takes",
    "two",
    "parameters",
    "first",
    "one",
    "event",
    "want",
    "listen",
    "case",
    "string",
    "load",
    "means",
    "response",
    "loaded",
    "next",
    "going",
    "give",
    "second",
    "parameter",
    "function",
    "brackets",
    "arrow",
    "curly",
    "brackets",
    "function",
    "want",
    "run",
    "response",
    "loaded",
    "inside",
    "response",
    "loaded",
    "access",
    "using",
    "xhr",
    "response",
    "let",
    "see",
    "looks",
    "like",
    "console",
    "log",
    "brackets",
    "finally",
    "let",
    "run",
    "function",
    "run",
    "code",
    "bottom",
    "going",
    "load",
    "products",
    "brackets",
    "save",
    "send",
    "request",
    "backend",
    "get",
    "response",
    "display",
    "console",
    "let",
    "go",
    "website",
    "going",
    "open",
    "project",
    "tab",
    "worry",
    "page",
    "blank",
    "going",
    "fix",
    "bit",
    "going",
    "open",
    "console",
    "right",
    "clicking",
    "inspect",
    "open",
    "console",
    "see",
    "xr",
    "response",
    "gave",
    "us",
    "json",
    "represents",
    "products",
    "amazon",
    "project",
    "json",
    "going",
    "convert",
    "back",
    "javascript",
    "object",
    "use",
    "rest",
    "code",
    "let",
    "go",
    "back",
    "code",
    "response",
    "json",
    "going",
    "convert",
    "back",
    "javascript",
    "object",
    "case",
    "javascript",
    "array",
    "using",
    "code",
    "json",
    "pars",
    "brackets",
    "converted",
    "back",
    "array",
    "going",
    "replace",
    "product",
    "loaded",
    "back",
    "end",
    "products",
    "make",
    "equal",
    "result",
    "got",
    "back",
    "end",
    "one",
    "thing",
    "need",
    "previously",
    "converted",
    "product",
    "objects",
    "class",
    "going",
    "array",
    "select",
    "code",
    "map",
    "way",
    "end",
    "right",
    "click",
    "copy",
    "products",
    "array",
    "got",
    "back",
    "end",
    "right",
    "click",
    "paste",
    "also",
    "going",
    "transform",
    "array",
    "objects",
    "classes",
    "end",
    "let",
    "products",
    "array",
    "see",
    "looks",
    "like",
    "console",
    "log",
    "products",
    "save",
    "open",
    "console",
    "project",
    "see",
    "products",
    "array",
    "product",
    "classes",
    "clothing",
    "classes",
    "converted",
    "response",
    "json",
    "javascript",
    "array",
    "classes",
    "load",
    "data",
    "back",
    "end",
    "convert",
    "javascript",
    "object",
    "array",
    "use",
    "code",
    "next",
    "let",
    "go",
    "back",
    "code",
    "instead",
    "console",
    "loging",
    "products",
    "every",
    "time",
    "display",
    "lot",
    "stuff",
    "console",
    "let",
    "message",
    "make",
    "sure",
    "working",
    "change",
    "string",
    "load",
    "products",
    "function",
    "let",
    "use",
    "pages",
    "first",
    "going",
    "remove",
    "calling",
    "function",
    "going",
    "export",
    "function",
    "use",
    "outside",
    "file",
    "export",
    "save",
    "file",
    "going",
    "start",
    "homepage",
    "scroll",
    "bottom",
    "amazon",
    "js",
    "going",
    "scroll",
    "top",
    "first",
    "going",
    "import",
    "load",
    "products",
    "already",
    "importing",
    "products",
    "js",
    "add",
    "comma",
    "load",
    "products",
    "run",
    "code",
    "top",
    "going",
    "load",
    "products",
    "first",
    "brackets",
    "let",
    "save",
    "open",
    "project",
    "browser",
    "click",
    "top",
    "left",
    "icon",
    "go",
    "homepage",
    "see",
    "homepage",
    "actually",
    "empty",
    "went",
    "wrong",
    "remember",
    "http",
    "requests",
    "asynchronous",
    "go",
    "back",
    "code",
    "load",
    "products",
    "send",
    "request",
    "backend",
    "takes",
    "time",
    "request",
    "travel",
    "across",
    "internet",
    "backend",
    "travel",
    "back",
    "send",
    "request",
    "next",
    "line",
    "response",
    "loaded",
    "yet",
    "products",
    "array",
    "still",
    "empty",
    "run",
    "code",
    "empty",
    "array",
    "page",
    "empty",
    "solve",
    "problem",
    "need",
    "wait",
    "http",
    "request",
    "finish",
    "first",
    "response",
    "come",
    "back",
    "going",
    "run",
    "rest",
    "code",
    "going",
    "go",
    "left",
    "going",
    "scroll",
    "products",
    "js",
    "going",
    "drag",
    "file",
    "top",
    "see",
    "code",
    "side",
    "side",
    "scroll",
    "http",
    "request",
    "right",
    "remember",
    "used",
    "event",
    "listener",
    "wait",
    "response",
    "come",
    "back",
    "response",
    "loaded",
    "going",
    "run",
    "function",
    "basically",
    "want",
    "run",
    "code",
    "bottom",
    "event",
    "listener",
    "loaded",
    "products",
    "one",
    "way",
    "solve",
    "problem",
    "maybe",
    "copy",
    "code",
    "paste",
    "bottom",
    "obviously",
    "make",
    "sense",
    "copy",
    "pasting",
    "bunch",
    "code",
    "ca",
    "really",
    "reuse",
    "function",
    "better",
    "solution",
    "going",
    "put",
    "code",
    "function",
    "give",
    "function",
    "load",
    "products",
    "let",
    "step",
    "step",
    "first",
    "top",
    "let",
    "create",
    "function",
    "group",
    "code",
    "together",
    "use",
    "word",
    "function",
    "let",
    "name",
    "render",
    "products",
    "grid",
    "brackets",
    "curly",
    "brackets",
    "going",
    "move",
    "code",
    "function",
    "removing",
    "closing",
    "curly",
    "bracket",
    "bottom",
    "going",
    "scroll",
    "way",
    "bottom",
    "going",
    "add",
    "back",
    "closing",
    "curler",
    "bracket",
    "put",
    "code",
    "inside",
    "function",
    "let",
    "also",
    "select",
    "code",
    "fix",
    "index",
    "select",
    "way",
    "press",
    "tab",
    "add",
    "indet",
    "put",
    "code",
    "inside",
    "render",
    "products",
    "grid",
    "next",
    "going",
    "put",
    "function",
    "inside",
    "load",
    "products",
    "using",
    "parameter",
    "brackets",
    "going",
    "give",
    "function",
    "render",
    "products",
    "grid",
    "remember",
    "javascript",
    "functions",
    "values",
    "use",
    "function",
    "parameter",
    "inside",
    "load",
    "products",
    "go",
    "top",
    "function",
    "saved",
    "parameter",
    "let",
    "create",
    "parameter",
    "top",
    "name",
    "fun",
    "say",
    "parameter",
    "contain",
    "function",
    "basically",
    "saved",
    "function",
    "inside",
    "parameter",
    "load",
    "response",
    "going",
    "run",
    "function",
    "bottom",
    "created",
    "products",
    "array",
    "going",
    "run",
    "font",
    "brackets",
    "run",
    "code",
    "loaded",
    "products",
    "group",
    "code",
    "function",
    "save",
    "function",
    "load",
    "response",
    "going",
    "run",
    "function",
    "let",
    "save",
    "two",
    "files",
    "save",
    "products",
    "js",
    "save",
    "amazon",
    "js",
    "open",
    "website",
    "see",
    "products",
    "loaded",
    "time",
    "waiting",
    "response",
    "come",
    "back",
    "run",
    "code",
    "wait",
    "http",
    "request",
    "finish",
    "first",
    "run",
    "code",
    "way",
    "function",
    "provide",
    "load",
    "products",
    "known",
    "call",
    "back",
    "giving",
    "function",
    "run",
    "future",
    "call",
    "future",
    "function",
    "called",
    "back",
    "future",
    "actually",
    "used",
    "call",
    "backs",
    "wrote",
    "code",
    "set",
    "timeout",
    "provided",
    "set",
    "timeout",
    "function",
    "run",
    "future",
    "call",
    "future",
    "function",
    "also",
    "known",
    "call",
    "back",
    "worry",
    "technique",
    "little",
    "complicated",
    "first",
    "work",
    "callbacks",
    "get",
    "used",
    "let",
    "get",
    "practice",
    "use",
    "backend",
    "callbacks",
    "checkout",
    "page",
    "going",
    "open",
    "checkout",
    "js",
    "checkout",
    "page",
    "first",
    "going",
    "import",
    "load",
    "products",
    "top",
    "create",
    "import",
    "curly",
    "brackets",
    "load",
    "products",
    "string",
    "locate",
    "products",
    "js",
    "inside",
    "scripts",
    "folder",
    "going",
    "get",
    "using",
    "slash",
    "going",
    "go",
    "data",
    "folder",
    "add",
    "slash",
    "data",
    "slash",
    "load",
    "products",
    "js",
    "also",
    "going",
    "load",
    "products",
    "brackets",
    "going",
    "give",
    "load",
    "products",
    "call",
    "back",
    "function",
    "want",
    "run",
    "future",
    "time",
    "instead",
    "creating",
    "whole",
    "new",
    "function",
    "going",
    "create",
    "function",
    "inside",
    "brackets",
    "using",
    "brackets",
    "arrow",
    "curly",
    "brackets",
    "need",
    "create",
    "function",
    "name",
    "every",
    "time",
    "also",
    "create",
    "anonymous",
    "function",
    "function",
    "without",
    "name",
    "give",
    "load",
    "products",
    "run",
    "future",
    "inside",
    "anonymous",
    "function",
    "going",
    "move",
    "code",
    "select",
    "code",
    "rightclick",
    "cut",
    "inside",
    "going",
    "rightclick",
    "paste",
    "need",
    "fix",
    "formatting",
    "going",
    "save",
    "function",
    "inside",
    "parameter",
    "fun",
    "going",
    "call",
    "fun",
    "loaded",
    "products",
    "let",
    "save",
    "file",
    "open",
    "website",
    "click",
    "cart",
    "top",
    "right",
    "go",
    "checkout",
    "page",
    "checkout",
    "page",
    "loading",
    "use",
    "backend",
    "project",
    "need",
    "send",
    "request",
    "use",
    "call",
    "back",
    "wait",
    "response",
    "run",
    "rest",
    "code",
    "let",
    "save",
    "changes",
    "g",
    "go",
    "git",
    "section",
    "products",
    "js",
    "created",
    "load",
    "products",
    "function",
    "amazon",
    "js",
    "used",
    "load",
    "products",
    "gave",
    "call",
    "back",
    "checkout",
    "js",
    "also",
    "used",
    "load",
    "products",
    "gave",
    "call",
    "back",
    "using",
    "anonymous",
    "function",
    "function",
    "without",
    "name",
    "let",
    "create",
    "message",
    "describing",
    "changes",
    "load",
    "products",
    "backend",
    "commit",
    "next",
    "going",
    "learn",
    "testing",
    "backend",
    "using",
    "back",
    "back",
    "end",
    "code",
    "need",
    "update",
    "tests",
    "first",
    "let",
    "go",
    "code",
    "going",
    "run",
    "tests",
    "scroll",
    "bottom",
    "tests",
    "open",
    "run",
    "right",
    "clicking",
    "click",
    "open",
    "live",
    "server",
    "already",
    "test",
    "open",
    "browser",
    "going",
    "open",
    "tab",
    "video",
    "zoom",
    "using",
    "control",
    "equals",
    "command",
    "equals",
    "failing",
    "tests",
    "exercises",
    "previous",
    "lessons",
    "might",
    "two",
    "failing",
    "tests",
    "going",
    "focus",
    "fixing",
    "two",
    "tests",
    "video",
    "first",
    "let",
    "open",
    "code",
    "order",
    "summary",
    "tests",
    "open",
    "vs",
    "code",
    "left",
    "going",
    "go",
    "test",
    "folder",
    "sl",
    "checkout",
    "sl",
    "ord",
    "summary",
    "going",
    "scroll",
    "test",
    "notice",
    "rendering",
    "order",
    "summary",
    "creates",
    "cart",
    "checkout",
    "page",
    "however",
    "card",
    "requires",
    "products",
    "loaded",
    "back",
    "end",
    "currently",
    "loading",
    "products",
    "tests",
    "tests",
    "failing",
    "need",
    "load",
    "products",
    "first",
    "let",
    "import",
    "load",
    "products",
    "function",
    "top",
    "scroll",
    "going",
    "add",
    "another",
    "import",
    "curly",
    "brackets",
    "load",
    "products",
    "function",
    "string",
    "locate",
    "products",
    "js",
    "need",
    "get",
    "checkout",
    "tests",
    "using",
    "slash",
    "slash",
    "go",
    "data",
    "folder",
    "load",
    "products",
    "js",
    "could",
    "call",
    "load",
    "products",
    "inside",
    "load",
    "products",
    "tests",
    "load",
    "multiple",
    "times",
    "really",
    "need",
    "need",
    "load",
    "products",
    "tests",
    "going",
    "use",
    "another",
    "hook",
    "provided",
    "jasmine",
    "called",
    "going",
    "use",
    "function",
    "brackets",
    "hook",
    "run",
    "function",
    "tests",
    "inside",
    "brackets",
    "going",
    "give",
    "function",
    "run",
    "brackets",
    "arrow",
    "curly",
    "brackets",
    "tests",
    "going",
    "load",
    "products",
    "let",
    "load",
    "products",
    "brackets",
    "save",
    "let",
    "open",
    "tests",
    "browser",
    "unfortunately",
    "tests",
    "still",
    "failing",
    "let",
    "go",
    "back",
    "code",
    "see",
    "problem",
    "open",
    "vs",
    "code",
    "remember",
    "load",
    "products",
    "asynchronous",
    "means",
    "sends",
    "request",
    "back",
    "end",
    "wait",
    "response",
    "come",
    "back",
    "would",
    "send",
    "request",
    "continue",
    "rest",
    "test",
    "code",
    "unfortunately",
    "point",
    "response",
    "come",
    "back",
    "yet",
    "products",
    "still",
    "empty",
    "array",
    "fix",
    "issue",
    "need",
    "wait",
    "load",
    "products",
    "finish",
    "first",
    "continue",
    "rest",
    "test",
    "jasmine",
    "feature",
    "waiting",
    "code",
    "finish",
    "called",
    "done",
    "function",
    "give",
    "inner",
    "function",
    "one",
    "parameter",
    "called",
    "done",
    "done",
    "function",
    "provided",
    "jasmine",
    "add",
    "done",
    "parameter",
    "automatically",
    "go",
    "next",
    "step",
    "going",
    "wait",
    "go",
    "next",
    "step",
    "call",
    "done",
    "function",
    "done",
    "brackets",
    "go",
    "next",
    "step",
    "call",
    "done",
    "keep",
    "waiting",
    "forever",
    "done",
    "function",
    "allows",
    "us",
    "control",
    "exactly",
    "finishes",
    "goes",
    "next",
    "step",
    "need",
    "fix",
    "test",
    "need",
    "wait",
    "load",
    "products",
    "finish",
    "first",
    "going",
    "call",
    "done",
    "go",
    "next",
    "step",
    "wait",
    "load",
    "products",
    "finish",
    "remember",
    "going",
    "give",
    "function",
    "brackets",
    "create",
    "function",
    "using",
    "brackets",
    "arrow",
    "curly",
    "brackets",
    "products",
    "finished",
    "loading",
    "run",
    "function",
    "inside",
    "going",
    "call",
    "done",
    "brackets",
    "makes",
    "sure",
    "products",
    "load",
    "first",
    "call",
    "done",
    "goes",
    "next",
    "step",
    "hook",
    "eventually",
    "runs",
    "tests",
    "bottom",
    "let",
    "save",
    "take",
    "look",
    "test",
    "page",
    "see",
    "order",
    "summary",
    "tests",
    "passing",
    "fail",
    "tests",
    "leave",
    "exercise",
    "let",
    "go",
    "back",
    "code",
    "test",
    "backend",
    "wait",
    "backend",
    "code",
    "finished",
    "use",
    "done",
    "function",
    "control",
    "exactly",
    "go",
    "next",
    "step",
    "way",
    "also",
    "use",
    "done",
    "inside",
    "inside",
    "well",
    "wait",
    "backend",
    "code",
    "finish",
    "let",
    "save",
    "changes",
    "git",
    "open",
    "get",
    "section",
    "inside",
    "order",
    "summary",
    "test",
    "imported",
    "load",
    "products",
    "called",
    "load",
    "products",
    "use",
    "done",
    "function",
    "make",
    "sure",
    "products",
    "loaded",
    "first",
    "go",
    "next",
    "step",
    "let",
    "create",
    "message",
    "describing",
    "changes",
    "load",
    "products",
    "hook",
    "commit",
    "next",
    "going",
    "learn",
    "promises",
    "better",
    "way",
    "handle",
    "asynchronous",
    "code",
    "promises",
    "similar",
    "jasmine",
    "done",
    "function",
    "learned",
    "let",
    "us",
    "wait",
    "asynchronous",
    "code",
    "finish",
    "going",
    "next",
    "step",
    "let",
    "create",
    "first",
    "promise",
    "going",
    "open",
    "code",
    "left",
    "going",
    "go",
    "checkout",
    "js",
    "top",
    "going",
    "practice",
    "promises",
    "promise",
    "class",
    "going",
    "type",
    "code",
    "new",
    "capital",
    "p",
    "promise",
    "brackets",
    "create",
    "new",
    "promise",
    "object",
    "inside",
    "brackets",
    "going",
    "give",
    "function",
    "brackets",
    "arrow",
    "curly",
    "brackets",
    "promises",
    "designed",
    "class",
    "create",
    "promise",
    "need",
    "give",
    "function",
    "create",
    "promise",
    "going",
    "run",
    "function",
    "immediately",
    "inside",
    "let",
    "string",
    "promise",
    "show",
    "runs",
    "immediately",
    "save",
    "file",
    "go",
    "website",
    "open",
    "tab",
    "project",
    "going",
    "zoom",
    "bit",
    "pressing",
    "control",
    "command",
    "minus",
    "open",
    "console",
    "right",
    "click",
    "inspect",
    "console",
    "see",
    "logged",
    "promise",
    "create",
    "promise",
    "runs",
    "inner",
    "function",
    "immediately",
    "inner",
    "function",
    "gets",
    "parameter",
    "called",
    "called",
    "resolve",
    "resolve",
    "function",
    "works",
    "similar",
    "jasmine",
    "done",
    "function",
    "resolve",
    "lets",
    "us",
    "control",
    "go",
    "next",
    "step",
    "example",
    "let",
    "add",
    "asynchronous",
    "code",
    "promise",
    "remove",
    "going",
    "run",
    "load",
    "products",
    "asynchronous",
    "type",
    "load",
    "products",
    "brackets",
    "going",
    "give",
    "load",
    "products",
    "callback",
    "function",
    "like",
    "brackets",
    "arrow",
    "curly",
    "brackets",
    "run",
    "function",
    "load",
    "products",
    "finished",
    "finished",
    "want",
    "go",
    "next",
    "step",
    "going",
    "call",
    "resolve",
    "resolve",
    "brackets",
    "see",
    "syntax",
    "similar",
    "jasmin",
    "done",
    "function",
    "run",
    "asynchronous",
    "code",
    "wait",
    "finish",
    "call",
    "resolve",
    "go",
    "next",
    "step",
    "next",
    "step",
    "promise",
    "might",
    "think",
    "code",
    "next",
    "step",
    "however",
    "promise",
    "actually",
    "creates",
    "separate",
    "line",
    "code",
    "separate",
    "thread",
    "code",
    "two",
    "groups",
    "code",
    "sort",
    "running",
    "time",
    "feel",
    "free",
    "pause",
    "video",
    "get",
    "longer",
    "look",
    "diagram",
    "reason",
    "promises",
    "designed",
    "way",
    "allows",
    "javascript",
    "multiple",
    "things",
    "time",
    "promise",
    "finishes",
    "next",
    "step",
    "next",
    "step",
    "going",
    "separate",
    "rest",
    "code",
    "sort",
    "next",
    "step",
    "side",
    "right",
    "promise",
    "creates",
    "separate",
    "thread",
    "code",
    "separate",
    "thread",
    "actually",
    "next",
    "step",
    "going",
    "add",
    "one",
    "add",
    "next",
    "step",
    "promise",
    "end",
    "going",
    "use",
    "method",
    "called",
    "dot",
    "brackets",
    "need",
    "give",
    "function",
    "going",
    "type",
    "brackets",
    "arrow",
    "cur",
    "brackets",
    "inside",
    "let",
    "string",
    "next",
    "step",
    "first",
    "run",
    "asynchronous",
    "code",
    "wait",
    "finish",
    "run",
    "resolve",
    "resolve",
    "makes",
    "go",
    "next",
    "step",
    "make",
    "easier",
    "see",
    "console",
    "let",
    "actually",
    "add",
    "console",
    "logs",
    "track",
    "progress",
    "code",
    "top",
    "let",
    "string",
    "start",
    "promise",
    "let",
    "string",
    "finished",
    "loading",
    "also",
    "comment",
    "code",
    "type",
    "slashstar",
    "bottom",
    "star",
    "slash",
    "let",
    "save",
    "check",
    "console",
    "let",
    "go",
    "step",
    "step",
    "first",
    "start",
    "promise",
    "see",
    "call",
    "load",
    "products",
    "see",
    "products",
    "finished",
    "loading",
    "going",
    "run",
    "function",
    "display",
    "finish",
    "loading",
    "going",
    "call",
    "resolve",
    "goes",
    "next",
    "step",
    "runs",
    "function",
    "display",
    "next",
    "step",
    "resolve",
    "lets",
    "us",
    "control",
    "go",
    "next",
    "step",
    "case",
    "waited",
    "load",
    "product",
    "prods",
    "finished",
    "called",
    "resolve",
    "go",
    "next",
    "step",
    "promises",
    "work",
    "let",
    "us",
    "split",
    "code",
    "separate",
    "steps",
    "wait",
    "one",
    "step",
    "finish",
    "going",
    "next",
    "step",
    "understand",
    "promises",
    "let",
    "convert",
    "code",
    "call",
    "back",
    "using",
    "promise",
    "first",
    "let",
    "remove",
    "console",
    "logs",
    "make",
    "code",
    "little",
    "easier",
    "read",
    "previous",
    "code",
    "actually",
    "two",
    "steps",
    "first",
    "step",
    "call",
    "load",
    "products",
    "finished",
    "second",
    "step",
    "call",
    "render",
    "order",
    "summary",
    "render",
    "payment",
    "summary",
    "promise",
    "thing",
    "first",
    "step",
    "load",
    "product",
    "finished",
    "going",
    "call",
    "resolve",
    "go",
    "second",
    "step",
    "going",
    "copy",
    "second",
    "step",
    "second",
    "step",
    "select",
    "code",
    "right",
    "click",
    "copy",
    "going",
    "right",
    "click",
    "paste",
    "let",
    "save",
    "let",
    "check",
    "web",
    "page",
    "open",
    "project",
    "see",
    "everything",
    "loading",
    "correctly",
    "promise",
    "thing",
    "call",
    "back",
    "two",
    "steps",
    "first",
    "step",
    "load",
    "products",
    "wait",
    "products",
    "finish",
    "loading",
    "second",
    "step",
    "render",
    "page",
    "might",
    "wondering",
    "use",
    "promises",
    "looks",
    "like",
    "work",
    "code",
    "using",
    "callback",
    "callbacks",
    "big",
    "problem",
    "multiple",
    "callbacks",
    "cause",
    "lot",
    "nesting",
    "nesting",
    "means",
    "code",
    "inside",
    "code",
    "like",
    "see",
    "problem",
    "let",
    "say",
    "want",
    "load",
    "cart",
    "back",
    "end",
    "well",
    "actually",
    "set",
    "url",
    "path",
    "use",
    "practice",
    "called",
    "slc",
    "cart",
    "first",
    "let",
    "go",
    "products",
    "js",
    "going",
    "copy",
    "load",
    "products",
    "change",
    "load",
    "cart",
    "select",
    "function",
    "rightclick",
    "copy",
    "let",
    "open",
    "cart",
    "js",
    "since",
    "going",
    "load",
    "cart",
    "back",
    "end",
    "let",
    "scroll",
    "bottom",
    "right",
    "click",
    "paste",
    "code",
    "instead",
    "loading",
    "products",
    "let",
    "load",
    "cart",
    "backend",
    "first",
    "let",
    "rename",
    "function",
    "load",
    "capital",
    "c",
    "cart",
    "first",
    "thing",
    "need",
    "change",
    "url",
    "path",
    "instead",
    "loading",
    "sl",
    "products",
    "going",
    "load",
    "slash",
    "cart",
    "backend",
    "normally",
    "load",
    "sl",
    "cart",
    "backend",
    "give",
    "us",
    "cart",
    "array",
    "however",
    "since",
    "practicing",
    "backend",
    "give",
    "us",
    "text",
    "load",
    "sl",
    "cart",
    "next",
    "need",
    "products",
    "code",
    "anymore",
    "select",
    "delete",
    "instead",
    "let",
    "console",
    "log",
    "brackets",
    "display",
    "response",
    "get",
    "back",
    "xhr",
    "response",
    "remove",
    "save",
    "let",
    "use",
    "load",
    "cart",
    "previous",
    "example",
    "left",
    "scroll",
    "open",
    "checkout",
    "js",
    "top",
    "let",
    "import",
    "load",
    "cart",
    "import",
    "curly",
    "brackets",
    "load",
    "cart",
    "string",
    "go",
    "data",
    "folder",
    "dotdata",
    "slash",
    "load",
    "going",
    "use",
    "callback",
    "code",
    "show",
    "problem",
    "callbacks",
    "first",
    "let",
    "comment",
    "promise",
    "focus",
    "callback",
    "code",
    "top",
    "type",
    "slashstar",
    "star",
    "slash",
    "remove",
    "comments",
    "callback",
    "load",
    "products",
    "also",
    "going",
    "load",
    "cart",
    "inside",
    "function",
    "going",
    "type",
    "load",
    "cart",
    "brackets",
    "going",
    "give",
    "function",
    "function",
    "going",
    "run",
    "cart",
    "loaded",
    "let",
    "say",
    "want",
    "wait",
    "products",
    "cart",
    "load",
    "render",
    "page",
    "need",
    "move",
    "code",
    "inside",
    "inner",
    "function",
    "select",
    "right",
    "click",
    "cut",
    "inside",
    "load",
    "cart",
    "going",
    "right",
    "click",
    "paste",
    "remove",
    "extra",
    "line",
    "code",
    "going",
    "load",
    "products",
    "wait",
    "finish",
    "going",
    "load",
    "cart",
    "wait",
    "cart",
    "finish",
    "render",
    "page",
    "display",
    "page",
    "let",
    "save",
    "check",
    "console",
    "see",
    "loaded",
    "products",
    "loaded",
    "cart",
    "open",
    "page",
    "everything",
    "displayed",
    "properly",
    "let",
    "go",
    "back",
    "code",
    "notice",
    "added",
    "another",
    "call",
    "back",
    "created",
    "another",
    "layer",
    "nesting",
    "code",
    "inside",
    "code",
    "inside",
    "code",
    "problem",
    "layer",
    "nesting",
    "adds",
    "indents",
    "front",
    "spaces",
    "front",
    "means",
    "lots",
    "callbacks",
    "code",
    "become",
    "nested",
    "like",
    "big",
    "problem",
    "callbacks",
    "multi",
    "multiple",
    "callbacks",
    "cause",
    "lot",
    "nesting",
    "indents",
    "make",
    "code",
    "hard",
    "work",
    "promises",
    "solve",
    "problem",
    "letting",
    "us",
    "flatten",
    "code",
    "example",
    "let",
    "load",
    "products",
    "carts",
    "time",
    "using",
    "promise",
    "instead",
    "first",
    "let",
    "comment",
    "callback",
    "using",
    "slashstar",
    "bottom",
    "star",
    "slash",
    "going",
    "uncomment",
    "promise",
    "remove",
    "comments",
    "next",
    "step",
    "instead",
    "rendering",
    "page",
    "going",
    "load",
    "cart",
    "like",
    "type",
    "load",
    "cart",
    "brackets",
    "problem",
    "want",
    "wait",
    "load",
    "card",
    "finish",
    "go",
    "next",
    "step",
    "however",
    "usually",
    "using",
    "resolve",
    "resolve",
    "inside",
    "function",
    "solve",
    "problem",
    "inside",
    "actually",
    "return",
    "new",
    "promise",
    "top",
    "going",
    "return",
    "new",
    "promise",
    "brackets",
    "going",
    "give",
    "promise",
    "function",
    "like",
    "type",
    "brackets",
    "arrow",
    "curly",
    "brackets",
    "function",
    "gets",
    "one",
    "parameter",
    "called",
    "resolve",
    "inside",
    "want",
    "use",
    "resolve",
    "wait",
    "code",
    "finish",
    "return",
    "new",
    "promise",
    "let",
    "move",
    "code",
    "new",
    "promise",
    "use",
    "resolve",
    "select",
    "code",
    "right",
    "click",
    "cut",
    "inside",
    "going",
    "right",
    "click",
    "paste",
    "remove",
    "new",
    "lines",
    "give",
    "load",
    "card",
    "function",
    "run",
    "finished",
    "type",
    "brackets",
    "arrow",
    "curler",
    "brackets",
    "load",
    "card",
    "finished",
    "runs",
    "function",
    "inside",
    "going",
    "call",
    "resolve",
    "move",
    "next",
    "step",
    "call",
    "resolve",
    "brackets",
    "go",
    "next",
    "step",
    "currently",
    "next",
    "step",
    "promise",
    "let",
    "add",
    "next",
    "step",
    "end",
    "add",
    "another",
    "step",
    "going",
    "use",
    "dot",
    "brackets",
    "give",
    "function",
    "brackets",
    "arrow",
    "curler",
    "brackets",
    "third",
    "step",
    "render",
    "page",
    "going",
    "thing",
    "inside",
    "let",
    "select",
    "code",
    "rightclick",
    "copy",
    "inside",
    "third",
    "step",
    "going",
    "right",
    "click",
    "paste",
    "adjust",
    "formatting",
    "need",
    "three",
    "steps",
    "callback",
    "using",
    "promise",
    "first",
    "step",
    "wait",
    "finish",
    "call",
    "resolve",
    "goes",
    "second",
    "step",
    "second",
    "step",
    "wait",
    "finish",
    "call",
    "resolve",
    "go",
    "third",
    "step",
    "promise",
    "let",
    "us",
    "many",
    "steps",
    "want",
    "use",
    "resolve",
    "wait",
    "step",
    "finish",
    "going",
    "next",
    "step",
    "let",
    "save",
    "check",
    "console",
    "make",
    "sure",
    "worked",
    "open",
    "console",
    "inside",
    "messages",
    "last",
    "time",
    "first",
    "load",
    "products",
    "wait",
    "finish",
    "go",
    "next",
    "step",
    "load",
    "cart",
    "wait",
    "finish",
    "go",
    "next",
    "step",
    "render",
    "display",
    "page",
    "open",
    "page",
    "see",
    "everything",
    "displayed",
    "properly",
    "let",
    "go",
    "back",
    "compare",
    "promises",
    "callbacks",
    "even",
    "though",
    "promises",
    "require",
    "bunch",
    "setup",
    "code",
    "see",
    "keeps",
    "code",
    "relatively",
    "flat",
    "third",
    "step",
    "get",
    "nested",
    "like",
    "callbacks",
    "lots",
    "steps",
    "promise",
    "code",
    "look",
    "like",
    "see",
    "even",
    "add",
    "steps",
    "code",
    "become",
    "nested",
    "promises",
    "help",
    "keep",
    "code",
    "flat",
    "avoid",
    "much",
    "nesting",
    "recommended",
    "use",
    "promises",
    "instead",
    "callbacks",
    "promises",
    "keep",
    "code",
    "flat",
    "let",
    "actually",
    "add",
    "new",
    "lines",
    "well",
    "better",
    "separate",
    "steps",
    "little",
    "easier",
    "read",
    "lastly",
    "going",
    "learn",
    "two",
    "features",
    "promises",
    "first",
    "feature",
    "give",
    "resolve",
    "value",
    "inside",
    "let",
    "give",
    "value",
    "like",
    "string",
    "value",
    "one",
    "whatever",
    "give",
    "resolve",
    "going",
    "saved",
    "parameter",
    "inside",
    "doth",
    "inside",
    "function",
    "add",
    "parameter",
    "called",
    "value",
    "whatever",
    "give",
    "resolve",
    "going",
    "saved",
    "inside",
    "use",
    "lets",
    "us",
    "share",
    "value",
    "two",
    "steps",
    "promise",
    "let",
    "check",
    "worked",
    "using",
    "value",
    "save",
    "look",
    "inside",
    "console",
    "see",
    "displayed",
    "value",
    "one",
    "whatever",
    "give",
    "resolve",
    "saved",
    "parameter",
    "second",
    "feature",
    "run",
    "multiple",
    "promises",
    "time",
    "currently",
    "wait",
    "things",
    "load",
    "one",
    "time",
    "example",
    "wait",
    "products",
    "load",
    "wait",
    "cart",
    "load",
    "go",
    "next",
    "step",
    "make",
    "efficient",
    "actually",
    "load",
    "products",
    "cart",
    "time",
    "use",
    "feature",
    "called",
    "lets",
    "us",
    "run",
    "multiple",
    "promises",
    "time",
    "wait",
    "finish",
    "let",
    "scroll",
    "top",
    "example",
    "type",
    "code",
    "capital",
    "p",
    "brackets",
    "inside",
    "brackets",
    "going",
    "give",
    "array",
    "inside",
    "array",
    "give",
    "multiple",
    "promises",
    "wait",
    "let",
    "copy",
    "paste",
    "two",
    "promises",
    "array",
    "start",
    "end",
    "first",
    "promise",
    "select",
    "code",
    "right",
    "click",
    "copy",
    "array",
    "going",
    "right",
    "click",
    "paste",
    "remove",
    "line",
    "first",
    "promise",
    "end",
    "going",
    "add",
    "comma",
    "going",
    "give",
    "second",
    "promise",
    "scroll",
    "second",
    "promise",
    "going",
    "select",
    "code",
    "starting",
    "select",
    "promise",
    "right",
    "click",
    "copy",
    "top",
    "going",
    "right",
    "click",
    "paste",
    "basically",
    "created",
    "array",
    "promises",
    "going",
    "give",
    "array",
    "going",
    "wait",
    "promises",
    "finish",
    "going",
    "next",
    "step",
    "let",
    "add",
    "next",
    "step",
    "end",
    "add",
    "next",
    "step",
    "going",
    "use",
    "dot",
    "brackets",
    "add",
    "new",
    "line",
    "make",
    "little",
    "easier",
    "read",
    "usual",
    "dot",
    "adds",
    "next",
    "step",
    "promise",
    "give",
    "function",
    "run",
    "brackets",
    "arrow",
    "curling",
    "brackets",
    "load",
    "products",
    "load",
    "cart",
    "going",
    "render",
    "page",
    "let",
    "copy",
    "paste",
    "code",
    "inside",
    "next",
    "step",
    "scroll",
    "render",
    "code",
    "select",
    "right",
    "click",
    "copy",
    "top",
    "inside",
    "right",
    "click",
    "paste",
    "let",
    "comment",
    "old",
    "promise",
    "try",
    "promise",
    "old",
    "promise",
    "going",
    "type",
    "slashstar",
    "going",
    "type",
    "star",
    "slash",
    "let",
    "save",
    "go",
    "console",
    "see",
    "thing",
    "loaded",
    "products",
    "loaded",
    "cart",
    "going",
    "wait",
    "call",
    "resolve",
    "going",
    "next",
    "step",
    "render",
    "display",
    "page",
    "open",
    "page",
    "see",
    "everything",
    "displayed",
    "properly",
    "give",
    "array",
    "promises",
    "run",
    "time",
    "instead",
    "waiting",
    "promise",
    "one",
    "one",
    "also",
    "values",
    "give",
    "resolve",
    "saved",
    "parameter",
    "inside",
    "add",
    "parameter",
    "called",
    "values",
    "values",
    "give",
    "resolve",
    "going",
    "saved",
    "inside",
    "values",
    "save",
    "check",
    "console",
    "gives",
    "us",
    "array",
    "values",
    "first",
    "value",
    "first",
    "promise",
    "second",
    "value",
    "second",
    "promise",
    "give",
    "anything",
    "resolve",
    "second",
    "value",
    "undefined",
    "overview",
    "promises",
    "promises",
    "better",
    "way",
    "wait",
    "asynchronous",
    "code",
    "finish",
    "versus",
    "callbacks",
    "help",
    "us",
    "avoid",
    "nesting",
    "keep",
    "code",
    "relatively",
    "flat",
    "promises",
    "also",
    "features",
    "like",
    "promise",
    "lets",
    "us",
    "run",
    "multiple",
    "promises",
    "time",
    "let",
    "save",
    "changes",
    "git",
    "going",
    "open",
    "git",
    "section",
    "inside",
    "cart",
    "js",
    "added",
    "function",
    "practice",
    "loading",
    "cart",
    "back",
    "end",
    "checkout",
    "js",
    "learn",
    "promises",
    "converted",
    "code",
    "callback",
    "promise",
    "let",
    "type",
    "message",
    "describing",
    "changes",
    "learn",
    "promises",
    "convert",
    "code",
    "promises",
    "commit",
    "learned",
    "promises",
    "going",
    "learn",
    "another",
    "feature",
    "called",
    "fetch",
    "fetch",
    "better",
    "way",
    "make",
    "htd",
    "pp",
    "requests",
    "let",
    "go",
    "back",
    "code",
    "going",
    "open",
    "products",
    "js",
    "going",
    "scroll",
    "load",
    "products",
    "function",
    "currently",
    "using",
    "xml",
    "http",
    "request",
    "make",
    "requests",
    "back",
    "end",
    "uses",
    "call",
    "back",
    "fetch",
    "also",
    "lets",
    "us",
    "make",
    "requests",
    "backend",
    "fetch",
    "uses",
    "promise",
    "let",
    "example",
    "make",
    "request",
    "except",
    "using",
    "fetch",
    "time",
    "scroll",
    "load",
    "products",
    "let",
    "create",
    "another",
    "function",
    "using",
    "function",
    "name",
    "load",
    "products",
    "fetch",
    "brackets",
    "curly",
    "brackets",
    "use",
    "fetch",
    "going",
    "use",
    "function",
    "fetch",
    "brackets",
    "makes",
    "http",
    "request",
    "like",
    "let",
    "make",
    "request",
    "function",
    "bottom",
    "made",
    "get",
    "request",
    "url",
    "default",
    "fetch",
    "make",
    "get",
    "request",
    "need",
    "give",
    "url",
    "want",
    "make",
    "request",
    "bottom",
    "let",
    "select",
    "url",
    "going",
    "rightclick",
    "copy",
    "top",
    "inside",
    "fetch",
    "going",
    "right",
    "click",
    "paste",
    "make",
    "exact",
    "request",
    "see",
    "fetch",
    "lot",
    "simple",
    "xml",
    "http",
    "request",
    "create",
    "new",
    "object",
    "setup",
    "call",
    "fetch",
    "tell",
    "want",
    "request",
    "go",
    "send",
    "request",
    "back",
    "end",
    "get",
    "response",
    "instead",
    "using",
    "call",
    "back",
    "get",
    "response",
    "fetch",
    "uses",
    "promise",
    "call",
    "fetch",
    "going",
    "create",
    "promise",
    "add",
    "next",
    "step",
    "promise",
    "using",
    "dot",
    "brackets",
    "give",
    "dot",
    "function",
    "brackets",
    "arrow",
    "curly",
    "brackets",
    "way",
    "works",
    "fetch",
    "going",
    "send",
    "request",
    "backend",
    "get",
    "response",
    "going",
    "go",
    "next",
    "step",
    "also",
    "going",
    "save",
    "response",
    "inside",
    "inside",
    "parameter",
    "add",
    "parameter",
    "called",
    "response",
    "contain",
    "response",
    "back",
    "end",
    "instead",
    "using",
    "call",
    "back",
    "wait",
    "response",
    "fetch",
    "uses",
    "promise",
    "wait",
    "response",
    "let",
    "response",
    "see",
    "looks",
    "like",
    "let",
    "run",
    "code",
    "bottom",
    "run",
    "function",
    "using",
    "load",
    "products",
    "fetch",
    "brackets",
    "let",
    "save",
    "take",
    "look",
    "console",
    "response",
    "get",
    "fetch",
    "open",
    "see",
    "gives",
    "us",
    "bunch",
    "information",
    "response",
    "like",
    "status",
    "whether",
    "succeeded",
    "failed",
    "well",
    "url",
    "made",
    "request",
    "get",
    "data",
    "products",
    "response",
    "go",
    "back",
    "code",
    "get",
    "data",
    "attached",
    "response",
    "going",
    "use",
    "response",
    "json",
    "brackets",
    "gives",
    "us",
    "json",
    "data",
    "attached",
    "response",
    "case",
    "products",
    "data",
    "next",
    "response",
    "jon",
    "actually",
    "asynchronous",
    "returns",
    "promise",
    "need",
    "wait",
    "promise",
    "finish",
    "continue",
    "next",
    "step",
    "inside",
    "actually",
    "return",
    "another",
    "promise",
    "going",
    "return",
    "promise",
    "return",
    "promise",
    "wait",
    "promise",
    "finish",
    "going",
    "next",
    "step",
    "let",
    "add",
    "another",
    "step",
    "promise",
    "using",
    "dot",
    "brackets",
    "give",
    "function",
    "brackets",
    "arrow",
    "curly",
    "brackets",
    "response",
    "json",
    "finishes",
    "going",
    "give",
    "us",
    "data",
    "attached",
    "response",
    "going",
    "save",
    "inside",
    "parameter",
    "response",
    "contain",
    "products",
    "data",
    "let",
    "name",
    "parameter",
    "products",
    "data",
    "let",
    "see",
    "looks",
    "like",
    "console",
    "log",
    "products",
    "data",
    "save",
    "let",
    "open",
    "console",
    "see",
    "products",
    "data",
    "array",
    "products",
    "going",
    "use",
    "amazon",
    "project",
    "also",
    "notice",
    "instead",
    "giving",
    "us",
    "big",
    "json",
    "string",
    "like",
    "actually",
    "converted",
    "json",
    "array",
    "basically",
    "json",
    "pars",
    "response",
    "us",
    "saved",
    "us",
    "little",
    "bit",
    "code",
    "finally",
    "products",
    "array",
    "let",
    "thing",
    "scroll",
    "select",
    "code",
    "right",
    "click",
    "copy",
    "remove",
    "rightclick",
    "paste",
    "steps",
    "except",
    "using",
    "promise",
    "time",
    "first",
    "instead",
    "json",
    "pars",
    "response",
    "already",
    "array",
    "products",
    "remove",
    "replace",
    "products",
    "data",
    "still",
    "going",
    "convert",
    "objects",
    "classes",
    "like",
    "keep",
    "track",
    "progress",
    "last",
    "line",
    "code",
    "let",
    "us",
    "something",
    "finish",
    "loading",
    "products",
    "however",
    "instead",
    "using",
    "call",
    "back",
    "like",
    "going",
    "remove",
    "line",
    "something",
    "step",
    "actually",
    "return",
    "entire",
    "promise",
    "make",
    "easier",
    "read",
    "let",
    "save",
    "entire",
    "promise",
    "variable",
    "using",
    "const",
    "let",
    "call",
    "promise",
    "equals",
    "fetch",
    "let",
    "add",
    "new",
    "lines",
    "well",
    "make",
    "code",
    "little",
    "easier",
    "read",
    "basically",
    "calling",
    "fetch",
    "creates",
    "promise",
    "going",
    "save",
    "promise",
    "inside",
    "variable",
    "end",
    "function",
    "return",
    "promise",
    "going",
    "return",
    "whole",
    "promise",
    "function",
    "add",
    "even",
    "steps",
    "promise",
    "going",
    "give",
    "us",
    "promise",
    "attach",
    "another",
    "step",
    "using",
    "dot",
    "brackets",
    "inside",
    "give",
    "function",
    "brackets",
    "arrow",
    "curly",
    "brackets",
    "attaches",
    "another",
    "step",
    "end",
    "promise",
    "basically",
    "attaches",
    "another",
    "step",
    "load",
    "products",
    "let",
    "next",
    "step",
    "save",
    "check",
    "console",
    "see",
    "loaded",
    "products",
    "next",
    "step",
    "actually",
    "return",
    "promise",
    "function",
    "keep",
    "attaching",
    "steps",
    "promise",
    "use",
    "fetch",
    "better",
    "way",
    "make",
    "http",
    "requests",
    "uses",
    "promises",
    "directly",
    "let",
    "use",
    "fetch",
    "project",
    "instead",
    "using",
    "xml",
    "http",
    "request",
    "first",
    "let",
    "comment",
    "code",
    "practicing",
    "type",
    "slashstar",
    "bottom",
    "star",
    "slash",
    "let",
    "scroll",
    "load",
    "products",
    "fetch",
    "going",
    "export",
    "function",
    "use",
    "outside",
    "file",
    "let",
    "save",
    "go",
    "left",
    "open",
    "checkout",
    "js",
    "instead",
    "using",
    "load",
    "products",
    "uses",
    "callbacks",
    "let",
    "switch",
    "load",
    "products",
    "fetch",
    "uses",
    "promises",
    "scroll",
    "going",
    "import",
    "load",
    "products",
    "fetch",
    "already",
    "importing",
    "products",
    "js",
    "type",
    "comma",
    "load",
    "products",
    "fetch",
    "replace",
    "load",
    "products",
    "remember",
    "need",
    "give",
    "promise",
    "also",
    "remember",
    "fetch",
    "returns",
    "promise",
    "need",
    "remove",
    "code",
    "call",
    "load",
    "products",
    "fetch",
    "brackets",
    "return",
    "promise",
    "use",
    "let",
    "save",
    "check",
    "website",
    "see",
    "everything",
    "still",
    "working",
    "fetch",
    "helps",
    "us",
    "make",
    "code",
    "lot",
    "cleaner",
    "return",
    "promise",
    "directly",
    "type",
    "extra",
    "code",
    "finally",
    "let",
    "use",
    "fetch",
    "inside",
    "tests",
    "left",
    "open",
    "order",
    "summary",
    "remember",
    "inside",
    "used",
    "load",
    "products",
    "let",
    "switch",
    "using",
    "load",
    "products",
    "fetch",
    "instead",
    "first",
    "import",
    "top",
    "importing",
    "products",
    "js",
    "type",
    "comma",
    "import",
    "load",
    "products",
    "fetch",
    "instead",
    "load",
    "products",
    "going",
    "call",
    "load",
    "products",
    "fetch",
    "brackets",
    "remember",
    "returns",
    "promise",
    "attach",
    "steps",
    "promise",
    "using",
    "method",
    "dot",
    "brackets",
    "give",
    "function",
    "run",
    "brackets",
    "arrow",
    "curly",
    "brackets",
    "products",
    "finished",
    "loading",
    "going",
    "run",
    "inside",
    "going",
    "call",
    "done",
    "go",
    "next",
    "step",
    "test",
    "call",
    "done",
    "brackets",
    "remove",
    "old",
    "code",
    "let",
    "save",
    "make",
    "sure",
    "working",
    "open",
    "tests",
    "go",
    "browser",
    "open",
    "test",
    "order",
    "summary",
    "test",
    "passing",
    "let",
    "save",
    "changes",
    "git",
    "open",
    "git",
    "set",
    "section",
    "inside",
    "products",
    "js",
    "learned",
    "use",
    "fetch",
    "returns",
    "promise",
    "directly",
    "inside",
    "checkout",
    "js",
    "used",
    "load",
    "products",
    "fetch",
    "inside",
    "project",
    "order",
    "summary",
    "use",
    "load",
    "products",
    "fetch",
    "inside",
    "tests",
    "let",
    "create",
    "message",
    "describing",
    "changes",
    "convert",
    "load",
    "products",
    "xhr",
    "xml",
    "http",
    "request",
    "fetch",
    "commit",
    "next",
    "going",
    "learn",
    "async",
    "await",
    "even",
    "better",
    "way",
    "handle",
    "asynchronous",
    "code",
    "let",
    "go",
    "back",
    "code",
    "open",
    "checkout",
    "js",
    "currently",
    "using",
    "promises",
    "handle",
    "asynchronous",
    "code",
    "problem",
    "promises",
    "creates",
    "lot",
    "extra",
    "code",
    "example",
    "need",
    "create",
    "new",
    "promise",
    "need",
    "use",
    "resolve",
    "need",
    "use",
    "async",
    "await",
    "shortcut",
    "promises",
    "removes",
    "extra",
    "code",
    "let",
    "first",
    "example",
    "asyn",
    "weit",
    "going",
    "scroll",
    "top",
    "going",
    "create",
    "function",
    "using",
    "function",
    "let",
    "name",
    "load",
    "page",
    "brackets",
    "curly",
    "brackets",
    "inside",
    "going",
    "string",
    "load",
    "page",
    "learn",
    "first",
    "part",
    "async",
    "await",
    "async",
    "front",
    "word",
    "function",
    "going",
    "add",
    "word",
    "async",
    "space",
    "async",
    "makes",
    "function",
    "return",
    "promise",
    "code",
    "shortcut",
    "code",
    "basically",
    "wraps",
    "code",
    "promise",
    "let",
    "run",
    "function",
    "show",
    "actually",
    "returns",
    "promise",
    "call",
    "load",
    "page",
    "brackets",
    "returns",
    "promise",
    "add",
    "next",
    "step",
    "promise",
    "using",
    "dot",
    "brackets",
    "give",
    "function",
    "brackets",
    "arrow",
    "curly",
    "brackets",
    "inside",
    "let",
    "string",
    "next",
    "step",
    "let",
    "save",
    "check",
    "console",
    "open",
    "console",
    "see",
    "loaded",
    "page",
    "next",
    "step",
    "displayed",
    "next",
    "step",
    "put",
    "sync",
    "front",
    "function",
    "makes",
    "function",
    "return",
    "promise",
    "code",
    "shortcut",
    "code",
    "next",
    "return",
    "something",
    "function",
    "example",
    "going",
    "return",
    "value",
    "like",
    "string",
    "value",
    "two",
    "gets",
    "converted",
    "resolve",
    "value",
    "two",
    "value",
    "going",
    "saved",
    "parameter",
    "next",
    "step",
    "add",
    "parameter",
    "value",
    "value",
    "two",
    "going",
    "saved",
    "inside",
    "value",
    "save",
    "check",
    "console",
    "see",
    "value",
    "equal",
    "string",
    "async",
    "makes",
    "function",
    "return",
    "promise",
    "might",
    "wondering",
    "point",
    "feature",
    "reason",
    "use",
    "async",
    "lets",
    "us",
    "use",
    "second",
    "feature",
    "called",
    "await",
    "await",
    "lets",
    "us",
    "wait",
    "promise",
    "finish",
    "going",
    "next",
    "line",
    "let",
    "example",
    "inside",
    "let",
    "run",
    "code",
    "creates",
    "promise",
    "let",
    "run",
    "load",
    "products",
    "fetch",
    "type",
    "load",
    "products",
    "fetch",
    "brackets",
    "loads",
    "products",
    "back",
    "end",
    "usually",
    "returns",
    "promise",
    "one",
    "way",
    "wait",
    "finish",
    "use",
    "give",
    "function",
    "runs",
    "function",
    "load",
    "products",
    "finished",
    "await",
    "gives",
    "us",
    "another",
    "way",
    "wait",
    "promise",
    "finish",
    "instead",
    "using",
    "front",
    "type",
    "await",
    "await",
    "lets",
    "us",
    "write",
    "asynchronous",
    "code",
    "like",
    "normal",
    "code",
    "wait",
    "line",
    "finish",
    "get",
    "response",
    "back",
    "end",
    "going",
    "next",
    "next",
    "line",
    "write",
    "like",
    "normal",
    "code",
    "line",
    "line",
    "code",
    "shortcut",
    "code",
    "makes",
    "code",
    "lot",
    "easier",
    "read",
    "let",
    "see",
    "looks",
    "like",
    "console",
    "save",
    "let",
    "comment",
    "promise",
    "bottom",
    "get",
    "confused",
    "type",
    "slashstar",
    "bottom",
    "star",
    "slash",
    "going",
    "save",
    "code",
    "check",
    "console",
    "see",
    "see",
    "loaded",
    "page",
    "notice",
    "finish",
    "loading",
    "products",
    "going",
    "next",
    "step",
    "actually",
    "waits",
    "line",
    "finish",
    "going",
    "next",
    "line",
    "code",
    "makes",
    "code",
    "lot",
    "cleaner",
    "one",
    "important",
    "thing",
    "know",
    "use",
    "weight",
    "inside",
    "async",
    "function",
    "actually",
    "main",
    "reason",
    "use",
    "async",
    "use",
    "weight",
    "make",
    "code",
    "cleaner",
    "learned",
    "asyn",
    "wait",
    "let",
    "use",
    "project",
    "previously",
    "loaded",
    "products",
    "loaded",
    "cart",
    "rendered",
    "page",
    "let",
    "recreate",
    "using",
    "async",
    "await",
    "first",
    "want",
    "load",
    "products",
    "going",
    "wait",
    "finish",
    "going",
    "load",
    "cart",
    "load",
    "cart",
    "let",
    "use",
    "promise",
    "asyn",
    "await",
    "used",
    "promises",
    "anything",
    "call",
    "back",
    "select",
    "promise",
    "rightclick",
    "copy",
    "going",
    "load",
    "cart",
    "promise",
    "right",
    "clicking",
    "paste",
    "want",
    "wait",
    "promise",
    "finish",
    "going",
    "next",
    "line",
    "front",
    "simply",
    "type",
    "await",
    "finally",
    "load",
    "products",
    "load",
    "cart",
    "going",
    "render",
    "page",
    "scroll",
    "select",
    "code",
    "going",
    "right",
    "click",
    "copy",
    "top",
    "going",
    "rightclick",
    "paste",
    "see",
    "asynchronous",
    "code",
    "lot",
    "cleaner",
    "load",
    "products",
    "wait",
    "finish",
    "load",
    "cart",
    "also",
    "wait",
    "finish",
    "run",
    "rest",
    "code",
    "write",
    "asynchronous",
    "code",
    "like",
    "normal",
    "code",
    "let",
    "remove",
    "top",
    "also",
    "remove",
    "return",
    "value",
    "need",
    "remove",
    "end",
    "let",
    "save",
    "open",
    "website",
    "open",
    "project",
    "see",
    "everything",
    "loaded",
    "properly",
    "inside",
    "console",
    "see",
    "loaded",
    "products",
    "first",
    "wait",
    "finish",
    "load",
    "cart",
    "wait",
    "finish",
    "displayed",
    "page",
    "use",
    "syn8",
    "make",
    "code",
    "lot",
    "cleaner",
    "learn",
    "details",
    "ayn",
    "weit",
    "mentioned",
    "use",
    "weight",
    "inside",
    "async",
    "function",
    "also",
    "closest",
    "function",
    "async",
    "example",
    "async",
    "function",
    "top",
    "inside",
    "normal",
    "function",
    "ca",
    "use",
    "weight",
    "inside",
    "normal",
    "function",
    "make",
    "one",
    "async",
    "another",
    "another",
    "detail",
    "promise",
    "resolves",
    "value",
    "example",
    "give",
    "resolve",
    "value",
    "like",
    "string",
    "value",
    "three",
    "normally",
    "value",
    "saved",
    "next",
    "step",
    "gave",
    "function",
    "value",
    "would",
    "saved",
    "parameter",
    "however",
    "use",
    "await",
    "value",
    "gets",
    "returned",
    "save",
    "variable",
    "instead",
    "using",
    "simply",
    "save",
    "whatever",
    "resolved",
    "inside",
    "variable",
    "using",
    "const",
    "value",
    "equals",
    "makes",
    "code",
    "lot",
    "easier",
    "read",
    "instead",
    "use",
    "simply",
    "save",
    "inside",
    "variable",
    "like",
    "normal",
    "code",
    "finally",
    "use",
    "await",
    "well",
    "leave",
    "exercise",
    "async",
    "await",
    "shortcut",
    "promises",
    "lets",
    "us",
    "write",
    "asynchronous",
    "code",
    "like",
    "normal",
    "code",
    "working",
    "asynchronous",
    "code",
    "best",
    "practice",
    "use",
    "asyn",
    "await",
    "promises",
    "callbacks",
    "much",
    "cleaner",
    "let",
    "save",
    "changes",
    "git",
    "open",
    "git",
    "section",
    "checkout",
    "js",
    "created",
    "load",
    "page",
    "function",
    "learned",
    "async",
    "await",
    "let",
    "create",
    "message",
    "describing",
    "changes",
    "convert",
    "promises",
    "async",
    "await",
    "commit",
    "going",
    "learn",
    "error",
    "handling",
    "sending",
    "http",
    "requests",
    "across",
    "internet",
    "could",
    "get",
    "unexpected",
    "errors",
    "example",
    "internet",
    "connection",
    "might",
    "stop",
    "working",
    "going",
    "learn",
    "handle",
    "kinds",
    "unexpected",
    "errors",
    "let",
    "go",
    "back",
    "code",
    "going",
    "open",
    "products",
    "js",
    "going",
    "scroll",
    "load",
    "products",
    "function",
    "uses",
    "call",
    "back",
    "send",
    "request",
    "get",
    "response",
    "error",
    "along",
    "way",
    "callbacks",
    "usually",
    "set",
    "separate",
    "callback",
    "errors",
    "example",
    "going",
    "add",
    "another",
    "event",
    "listener",
    "using",
    "xhr",
    "add",
    "event",
    "listener",
    "brackets",
    "first",
    "parameter",
    "event",
    "time",
    "going",
    "listen",
    "error",
    "event",
    "going",
    "give",
    "function",
    "get",
    "unexpected",
    "error",
    "going",
    "run",
    "function",
    "get",
    "error",
    "let",
    "console",
    "log",
    "message",
    "string",
    "unexpected",
    "error",
    "usually",
    "get",
    "error",
    "give",
    "instructions",
    "let",
    "type",
    "please",
    "try",
    "later",
    "save",
    "called",
    "error",
    "handling",
    "get",
    "error",
    "request",
    "handle",
    "function",
    "display",
    "message",
    "let",
    "try",
    "code",
    "simulate",
    "error",
    "going",
    "change",
    "url",
    "request",
    "error",
    "superimple",
    "backend",
    "deev",
    "create",
    "error",
    "url",
    "exist",
    "let",
    "call",
    "function",
    "run",
    "code",
    "get",
    "error",
    "type",
    "load",
    "products",
    "brackets",
    "save",
    "let",
    "check",
    "console",
    "see",
    "displayed",
    "error",
    "message",
    "got",
    "error",
    "ran",
    "error",
    "function",
    "run",
    "load",
    "function",
    "also",
    "usually",
    "callback",
    "gets",
    "parameter",
    "called",
    "error",
    "contains",
    "information",
    "error",
    "handle",
    "errors",
    "using",
    "callbacks",
    "usually",
    "set",
    "separate",
    "callback",
    "errors",
    "let",
    "remove",
    "line",
    "since",
    "practice",
    "remove",
    "error",
    "url",
    "change",
    "back",
    "super",
    "simple",
    "backend",
    "dodev",
    "save",
    "next",
    "learn",
    "handle",
    "errors",
    "promises",
    "scroll",
    "load",
    "products",
    "fetch",
    "function",
    "makes",
    "request",
    "uses",
    "promises",
    "handle",
    "error",
    "promises",
    "promises",
    "give",
    "us",
    "two",
    "methods",
    "another",
    "method",
    "called",
    "dot",
    "catch",
    "brackets",
    "going",
    "give",
    "catch",
    "function",
    "brackets",
    "arrow",
    "curly",
    "brackets",
    "request",
    "error",
    "going",
    "go",
    "catch",
    "method",
    "going",
    "run",
    "error",
    "function",
    "inside",
    "let",
    "also",
    "display",
    "message",
    "let",
    "copy",
    "message",
    "going",
    "select",
    "message",
    "rightclick",
    "copy",
    "inside",
    "catch",
    "going",
    "right",
    "click",
    "paste",
    "simulate",
    "error",
    "going",
    "scroll",
    "change",
    "url",
    "going",
    "add",
    "error",
    "front",
    "superimple",
    "backend",
    "dodev",
    "let",
    "call",
    "function",
    "test",
    "error",
    "code",
    "bottom",
    "type",
    "load",
    "products",
    "fetch",
    "brackets",
    "save",
    "let",
    "open",
    "console",
    "see",
    "displayed",
    "error",
    "message",
    "successfully",
    "creating",
    "error",
    "going",
    "inside",
    "catch",
    "displays",
    "message",
    "like",
    "callbacks",
    "catch",
    "gets",
    "parameter",
    "called",
    "error",
    "contains",
    "information",
    "error",
    "need",
    "handle",
    "errors",
    "promises",
    "another",
    "method",
    "called",
    "dot",
    "catch",
    "run",
    "function",
    "error",
    "let",
    "remove",
    "practice",
    "code",
    "switch",
    "back",
    "url",
    "remove",
    "error",
    "dot",
    "save",
    "lastly",
    "learn",
    "handle",
    "errors",
    "async",
    "await",
    "let",
    "go",
    "left",
    "going",
    "open",
    "checkout",
    "file",
    "scroll",
    "open",
    "checkout",
    "js",
    "inside",
    "using",
    "async",
    "await",
    "catch",
    "errors",
    "using",
    "async",
    "await",
    "going",
    "use",
    "new",
    "syntax",
    "called",
    "try",
    "catch",
    "going",
    "type",
    "word",
    "try",
    "curly",
    "brackets",
    "going",
    "put",
    "code",
    "could",
    "cause",
    "error",
    "try",
    "making",
    "request",
    "back",
    "end",
    "also",
    "making",
    "request",
    "back",
    "end",
    "code",
    "could",
    "cause",
    "error",
    "going",
    "move",
    "inside",
    "try",
    "select",
    "right",
    "click",
    "cut",
    "inside",
    "right",
    "click",
    "paste",
    "code",
    "inside",
    "try",
    "gets",
    "error",
    "catch",
    "using",
    "code",
    "bottom",
    "type",
    "catch",
    "brackets",
    "curly",
    "brackets",
    "catch",
    "going",
    "get",
    "one",
    "parameter",
    "brackets",
    "called",
    "error",
    "contains",
    "information",
    "error",
    "need",
    "catch",
    "works",
    "similarly",
    "catch",
    "promises",
    "error",
    "inside",
    "going",
    "catch",
    "error",
    "going",
    "hand",
    "handle",
    "error",
    "run",
    "code",
    "inside",
    "catch",
    "put",
    "error",
    "message",
    "let",
    "go",
    "back",
    "products",
    "js",
    "let",
    "copy",
    "error",
    "message",
    "select",
    "right",
    "click",
    "copy",
    "back",
    "checkout",
    "inside",
    "catch",
    "right",
    "click",
    "paste",
    "remove",
    "new",
    "line",
    "add",
    "new",
    "line",
    "make",
    "little",
    "easier",
    "read",
    "let",
    "test",
    "code",
    "go",
    "inside",
    "products",
    "js",
    "going",
    "modify",
    "url",
    "front",
    "going",
    "add",
    "error",
    "super",
    "simple",
    "backend",
    "also",
    "going",
    "comment",
    "dot",
    "catch",
    "right",
    "error",
    "going",
    "handled",
    "going",
    "handled",
    "outside",
    "try",
    "catch",
    "going",
    "comment",
    "using",
    "slashstar",
    "end",
    "star",
    "slash",
    "save",
    "go",
    "back",
    "checkout",
    "js",
    "also",
    "save",
    "let",
    "open",
    "console",
    "see",
    "error",
    "caught",
    "error",
    "ran",
    "code",
    "displayed",
    "error",
    "message",
    "handle",
    "errors",
    "async",
    "await",
    "put",
    "code",
    "cause",
    "error",
    "inside",
    "try",
    "error",
    "going",
    "run",
    "code",
    "inside",
    "catch",
    "let",
    "go",
    "back",
    "products",
    "remove",
    "error",
    "url",
    "dot",
    "also",
    "uncomment",
    "catch",
    "save",
    "next",
    "going",
    "learn",
    "details",
    "try",
    "catch",
    "open",
    "checkout",
    "js",
    "one",
    "thing",
    "know",
    "tr",
    "catch",
    "use",
    "async",
    "await",
    "actually",
    "use",
    "tr",
    "catch",
    "synchronous",
    "code",
    "normal",
    "code",
    "example",
    "try",
    "run",
    "function",
    "exist",
    "cause",
    "error",
    "try",
    "catch",
    "catch",
    "error",
    "display",
    "message",
    "notice",
    "using",
    "async",
    "o8",
    "normal",
    "code",
    "use",
    "try",
    "catch",
    "catch",
    "errors",
    "normal",
    "code",
    "well",
    "another",
    "detail",
    "whenever",
    "get",
    "error",
    "skip",
    "rest",
    "code",
    "next",
    "line",
    "skip",
    "rest",
    "code",
    "go",
    "directly",
    "catch",
    "one",
    "thing",
    "might",
    "wondering",
    "use",
    "tr",
    "catch",
    "everywhere",
    "prevent",
    "errors",
    "try",
    "catch",
    "error",
    "handling",
    "meant",
    "handle",
    "unexpected",
    "errors",
    "means",
    "code",
    "correct",
    "something",
    "outside",
    "control",
    "caused",
    "error",
    "give",
    "instructions",
    "use",
    "try",
    "catch",
    "everywhere",
    "use",
    "unexpected",
    "errors",
    "errors",
    "outside",
    "control",
    "last",
    "thing",
    "know",
    "error",
    "handling",
    "man",
    "manually",
    "create",
    "errors",
    "manually",
    "create",
    "error",
    "tr",
    "catch",
    "top",
    "going",
    "use",
    "word",
    "throw",
    "throw",
    "creates",
    "new",
    "error",
    "throws",
    "error",
    "going",
    "catch",
    "later",
    "need",
    "give",
    "error",
    "value",
    "use",
    "type",
    "value",
    "error",
    "like",
    "string",
    "number",
    "object",
    "example",
    "going",
    "use",
    "string",
    "error",
    "one",
    "manually",
    "create",
    "error",
    "get",
    "error",
    "going",
    "skip",
    "rest",
    "code",
    "inside",
    "curly",
    "brackets",
    "going",
    "go",
    "straight",
    "catch",
    "error",
    "value",
    "going",
    "saved",
    "inside",
    "parameter",
    "going",
    "run",
    "code",
    "inside",
    "catch",
    "save",
    "check",
    "console",
    "throw",
    "creates",
    "error",
    "going",
    "display",
    "error",
    "message",
    "let",
    "comment",
    "example",
    "save",
    "next",
    "using",
    "promises",
    "two",
    "ways",
    "manually",
    "create",
    "error",
    "inside",
    "promise",
    "want",
    "want",
    "manually",
    "create",
    "error",
    "also",
    "throw",
    "error",
    "like",
    "string",
    "error",
    "2",
    "throw",
    "error",
    "go",
    "inside",
    "dot",
    "catch",
    "way",
    "await",
    "promise",
    "instead",
    "going",
    "catch",
    "going",
    "go",
    "inside",
    "catch",
    "await",
    "makes",
    "behave",
    "sort",
    "like",
    "synchronous",
    "code",
    "normal",
    "code",
    "save",
    "check",
    "console",
    "get",
    "error",
    "load",
    "cart",
    "display",
    "error",
    "message",
    "let",
    "comment",
    "example",
    "learn",
    "second",
    "way",
    "create",
    "error",
    "promise",
    "inside",
    "promise",
    "need",
    "create",
    "error",
    "future",
    "need",
    "use",
    "different",
    "code",
    "example",
    "load",
    "cart",
    "finished",
    "loading",
    "going",
    "run",
    "function",
    "function",
    "runs",
    "future",
    "inside",
    "function",
    "throw",
    "work",
    "throw",
    "work",
    "future",
    "instead",
    "promises",
    "give",
    "us",
    "another",
    "way",
    "create",
    "error",
    "create",
    "new",
    "promise",
    "gives",
    "us",
    "second",
    "parameter",
    "called",
    "reject",
    "reject",
    "function",
    "lets",
    "us",
    "create",
    "error",
    "future",
    "load",
    "cart",
    "future",
    "let",
    "create",
    "error",
    "using",
    "reject",
    "brackets",
    "string",
    "error",
    "three",
    "let",
    "comment",
    "resolve",
    "example",
    "let",
    "save",
    "check",
    "console",
    "see",
    "reject",
    "created",
    "error",
    "future",
    "goes",
    "runs",
    "code",
    "inside",
    "catch",
    "creates",
    "error",
    "message",
    "manually",
    "create",
    "error",
    "promise",
    "two",
    "ways",
    "use",
    "throw",
    "creating",
    "error",
    "synchronously",
    "right",
    "away",
    "use",
    "reject",
    "creating",
    "error",
    "asynchronously",
    "future",
    "let",
    "comment",
    "reject",
    "uncomment",
    "resolve",
    "save",
    "error",
    "handling",
    "lets",
    "us",
    "handle",
    "unexpected",
    "errors",
    "also",
    "lets",
    "us",
    "create",
    "errors",
    "let",
    "save",
    "changes",
    "git",
    "open",
    "git",
    "inside",
    "products",
    "js",
    "added",
    "catch",
    "promises",
    "error",
    "function",
    "callbacks",
    "checkout",
    "js",
    "added",
    "try",
    "catch",
    "async",
    "await",
    "also",
    "learned",
    "manually",
    "create",
    "errors",
    "type",
    "message",
    "describing",
    "changes",
    "learn",
    "error",
    "handling",
    "commit",
    "learned",
    "backend",
    "promises",
    "async",
    "await",
    "let",
    "use",
    "project",
    "open",
    "project",
    "open",
    "tab",
    "project",
    "going",
    "go",
    "checkout",
    "page",
    "feature",
    "going",
    "work",
    "checkout",
    "page",
    "going",
    "make",
    "place",
    "order",
    "button",
    "interactive",
    "click",
    "button",
    "going",
    "take",
    "cart",
    "turn",
    "order",
    "time",
    "instead",
    "writing",
    "code",
    "going",
    "use",
    "back",
    "end",
    "create",
    "order",
    "first",
    "let",
    "set",
    "event",
    "listener",
    "button",
    "go",
    "back",
    "code",
    "open",
    "files",
    "button",
    "section",
    "called",
    "payment",
    "summary",
    "going",
    "open",
    "scripts",
    "sl",
    "checkout",
    "payment",
    "order",
    "code",
    "button",
    "right",
    "going",
    "set",
    "event",
    "listener",
    "something",
    "click",
    "first",
    "add",
    "class",
    "button",
    "get",
    "javascript",
    "end",
    "class",
    "let",
    "create",
    "new",
    "line",
    "add",
    "class",
    "place",
    "das",
    "order",
    "put",
    "html",
    "page",
    "going",
    "set",
    "event",
    "listener",
    "going",
    "get",
    "button",
    "javascript",
    "using",
    "document",
    "query",
    "selector",
    "brackets",
    "string",
    "select",
    "class",
    "going",
    "start",
    "order",
    "button",
    "going",
    "add",
    "event",
    "listener",
    "create",
    "new",
    "line",
    "use",
    "method",
    "add",
    "event",
    "listener",
    "brackets",
    "give",
    "two",
    "parameters",
    "first",
    "parameter",
    "event",
    "want",
    "listen",
    "click",
    "second",
    "parameter",
    "function",
    "want",
    "run",
    "click",
    "button",
    "type",
    "brackets",
    "arrow",
    "curler",
    "brackets",
    "click",
    "button",
    "going",
    "make",
    "request",
    "back",
    "end",
    "create",
    "order",
    "example",
    "set",
    "url",
    "path",
    "backend",
    "creating",
    "orders",
    "called",
    "slash",
    "orders",
    "inside",
    "going",
    "make",
    "request",
    "backend",
    "using",
    "fetch",
    "brackets",
    "going",
    "give",
    "url",
    "request",
    "h",
    "ttps",
    "colon",
    "double",
    "slash",
    "super",
    "simple",
    "backend",
    "dev",
    "url",
    "path",
    "slash",
    "orders",
    "however",
    "time",
    "need",
    "send",
    "data",
    "back",
    "end",
    "need",
    "send",
    "cart",
    "backend",
    "order",
    "create",
    "order",
    "send",
    "data",
    "request",
    "need",
    "use",
    "different",
    "type",
    "requests",
    "four",
    "common",
    "types",
    "requests",
    "get",
    "post",
    "put",
    "delete",
    "get",
    "means",
    "want",
    "get",
    "something",
    "back",
    "end",
    "post",
    "means",
    "want",
    "back",
    "end",
    "create",
    "something",
    "put",
    "means",
    "want",
    "update",
    "something",
    "delete",
    "means",
    "want",
    "delete",
    "something",
    "far",
    "use",
    "get",
    "request",
    "let",
    "us",
    "get",
    "data",
    "back",
    "end",
    "however",
    "get",
    "requests",
    "really",
    "let",
    "us",
    "send",
    "data",
    "back",
    "end",
    "situation",
    "want",
    "create",
    "order",
    "going",
    "use",
    "post",
    "create",
    "something",
    "post",
    "lets",
    "us",
    "send",
    "data",
    "backend",
    "create",
    "post",
    "request",
    "instead",
    "get",
    "request",
    "going",
    "give",
    "fetch",
    "second",
    "parameter",
    "object",
    "inside",
    "object",
    "going",
    "give",
    "property",
    "called",
    "method",
    "colon",
    "type",
    "request",
    "case",
    "use",
    "string",
    "post",
    "going",
    "give",
    "another",
    "property",
    "called",
    "headers",
    "colon",
    "going",
    "object",
    "headers",
    "gives",
    "backend",
    "information",
    "request",
    "needed",
    "sending",
    "data",
    "back",
    "end",
    "inside",
    "object",
    "add",
    "property",
    "string",
    "capital",
    "c",
    "content",
    "das",
    "capital",
    "type",
    "colon",
    "value",
    "string",
    "application",
    "slash",
    "json",
    "tells",
    "back",
    "endend",
    "type",
    "data",
    "sending",
    "request",
    "going",
    "send",
    "jon",
    "basically",
    "javascript",
    "object",
    "next",
    "going",
    "add",
    "another",
    "property",
    "called",
    "body",
    "colon",
    "actual",
    "data",
    "going",
    "send",
    "back",
    "end",
    "according",
    "documentation",
    "need",
    "send",
    "object",
    "property",
    "called",
    "cart",
    "contains",
    "cart",
    "array",
    "body",
    "let",
    "send",
    "object",
    "property",
    "called",
    "cart",
    "colon",
    "give",
    "cart",
    "array",
    "cart",
    "array",
    "file",
    "called",
    "cart",
    "finally",
    "ca",
    "send",
    "object",
    "directly",
    "request",
    "need",
    "convert",
    "json",
    "string",
    "front",
    "use",
    "json",
    "stringify",
    "open",
    "bracket",
    "close",
    "bracket",
    "convert",
    "data",
    "json",
    "string",
    "send",
    "back",
    "end",
    "okay",
    "send",
    "request",
    "need",
    "wait",
    "response",
    "come",
    "back",
    "fetch",
    "returns",
    "promise",
    "however",
    "instead",
    "using",
    "dot",
    "add",
    "next",
    "step",
    "let",
    "use",
    "async",
    "weit",
    "cleaner",
    "first",
    "need",
    "make",
    "function",
    "async",
    "remember",
    "use",
    "await",
    "inside",
    "async",
    "function",
    "front",
    "function",
    "type",
    "word",
    "async",
    "front",
    "fetch",
    "use",
    "await",
    "going",
    "wait",
    "fetch",
    "finish",
    "fetch",
    "get",
    "response",
    "back",
    "end",
    "go",
    "next",
    "line",
    "used",
    "await",
    "save",
    "response",
    "variable",
    "front",
    "create",
    "variable",
    "const",
    "call",
    "response",
    "make",
    "equal",
    "result",
    "next",
    "remember",
    "get",
    "data",
    "attached",
    "response",
    "need",
    "use",
    "response",
    "json",
    "going",
    "use",
    "response",
    "json",
    "brackets",
    "remember",
    "response",
    "json",
    "also",
    "promise",
    "front",
    "use",
    "await",
    "wait",
    "promise",
    "finish",
    "going",
    "next",
    "line",
    "give",
    "us",
    "data",
    "attached",
    "response",
    "order",
    "created",
    "backet",
    "let",
    "save",
    "variable",
    "using",
    "const",
    "order",
    "equals",
    "finally",
    "let",
    "order",
    "see",
    "looks",
    "like",
    "let",
    "save",
    "open",
    "project",
    "make",
    "sure",
    "products",
    "cart",
    "click",
    "place",
    "order",
    "check",
    "console",
    "see",
    "order",
    "looks",
    "like",
    "see",
    "got",
    "order",
    "object",
    "back",
    "end",
    "order",
    "id",
    "order",
    "time",
    "products",
    "order",
    "including",
    "delivery",
    "time",
    "quantity",
    "want",
    "successfully",
    "use",
    "back",
    "end",
    "create",
    "new",
    "order",
    "let",
    "also",
    "check",
    "network",
    "tab",
    "open",
    "network",
    "resize",
    "make",
    "little",
    "easier",
    "read",
    "search",
    "super",
    "simple",
    "url",
    "find",
    "request",
    "orders",
    "status",
    "200",
    "click",
    "inside",
    "details",
    "see",
    "post",
    "request",
    "sent",
    "orders",
    "status",
    "code",
    "200",
    "successful",
    "inside",
    "payload",
    "tab",
    "sent",
    "back",
    "end",
    "cart",
    "preview",
    "tab",
    "backend",
    "sent",
    "back",
    "order",
    "object",
    "response",
    "tab",
    "thing",
    "got",
    "order",
    "object",
    "back",
    "real",
    "world",
    "website",
    "works",
    "instead",
    "creating",
    "order",
    "web",
    "page",
    "computer",
    "send",
    "http",
    "request",
    "backend",
    "create",
    "order",
    "okay",
    "created",
    "order",
    "let",
    "save",
    "somewhere",
    "go",
    "back",
    "code",
    "left",
    "inside",
    "data",
    "folder",
    "let",
    "create",
    "file",
    "orders",
    "click",
    "inside",
    "folder",
    "click",
    "create",
    "file",
    "let",
    "name",
    "orders",
    "js",
    "press",
    "enter",
    "top",
    "let",
    "create",
    "array",
    "contain",
    "rain",
    "orders",
    "use",
    "const",
    "orders",
    "equals",
    "empty",
    "array",
    "let",
    "export",
    "use",
    "files",
    "export",
    "next",
    "let",
    "create",
    "function",
    "adding",
    "order",
    "array",
    "create",
    "function",
    "add",
    "order",
    "brackets",
    "curly",
    "brackets",
    "give",
    "function",
    "order",
    "object",
    "going",
    "add",
    "array",
    "orders",
    "usually",
    "want",
    "recent",
    "order",
    "top",
    "going",
    "add",
    "order",
    "front",
    "array",
    "type",
    "array",
    "name",
    "orders",
    "use",
    "method",
    "unshift",
    "brackets",
    "give",
    "order",
    "add",
    "order",
    "front",
    "array",
    "instead",
    "back",
    "finally",
    "let",
    "save",
    "orders",
    "local",
    "storage",
    "create",
    "function",
    "save",
    "local",
    "storage",
    "function",
    "save",
    "storage",
    "brackets",
    "curly",
    "brackets",
    "run",
    "local",
    "storage",
    "set",
    "item",
    "brackets",
    "string",
    "use",
    "local",
    "storage",
    "key",
    "orders",
    "comma",
    "remember",
    "local",
    "storage",
    "supports",
    "strings",
    "use",
    "json",
    "stringify",
    "brackets",
    "orders",
    "modify",
    "array",
    "going",
    "save",
    "storage",
    "brackets",
    "finally",
    "top",
    "let",
    "load",
    "orders",
    "storage",
    "use",
    "local",
    "storage",
    "getet",
    "item",
    "brackets",
    "string",
    "orders",
    "remember",
    "string",
    "need",
    "convert",
    "back",
    "array",
    "using",
    "code",
    "json",
    "pars",
    "brackets",
    "beginning",
    "going",
    "orders",
    "saved",
    "local",
    "storage",
    "give",
    "default",
    "value",
    "using",
    "empty",
    "array",
    "nothing",
    "local",
    "storage",
    "going",
    "use",
    "empty",
    "array",
    "default",
    "save",
    "let",
    "use",
    "add",
    "order",
    "payment",
    "summary",
    "first",
    "export",
    "function",
    "save",
    "open",
    "payment",
    "summary",
    "top",
    "going",
    "import",
    "function",
    "import",
    "curly",
    "brackets",
    "add",
    "order",
    "string",
    "go",
    "data",
    "folder",
    "slash",
    "dotdata",
    "sl",
    "orders",
    "doj",
    "scroll",
    "back",
    "create",
    "order",
    "back",
    "end",
    "going",
    "add",
    "array",
    "save",
    "local",
    "storage",
    "using",
    "function",
    "add",
    "order",
    "brackets",
    "order",
    "object",
    "save",
    "go",
    "web",
    "page",
    "click",
    "place",
    "order",
    "create",
    "order",
    "order",
    "back",
    "end",
    "save",
    "local",
    "storage",
    "open",
    "console",
    "go",
    "console",
    "tab",
    "let",
    "check",
    "inside",
    "local",
    "storage",
    "using",
    "local",
    "storage",
    "getet",
    "item",
    "brackets",
    "string",
    "orders",
    "press",
    "enter",
    "see",
    "saved",
    "order",
    "local",
    "store",
    "storage",
    "ever",
    "want",
    "remove",
    "orders",
    "local",
    "storage",
    "use",
    "code",
    "local",
    "storage",
    "remove",
    "item",
    "brackets",
    "string",
    "orders",
    "press",
    "enter",
    "refresh",
    "page",
    "let",
    "go",
    "back",
    "code",
    "let",
    "get",
    "practice",
    "add",
    "error",
    "handling",
    "code",
    "top",
    "asyn",
    "weight",
    "going",
    "use",
    "try",
    "catch",
    "type",
    "try",
    "curly",
    "bracket",
    "catch",
    "brackets",
    "curly",
    "brackets",
    "catch",
    "gets",
    "parameter",
    "called",
    "error",
    "going",
    "move",
    "code",
    "inside",
    "try",
    "select",
    "code",
    "right",
    "click",
    "cut",
    "inside",
    "try",
    "right",
    "click",
    "paste",
    "create",
    "new",
    "line",
    "make",
    "request",
    "sort",
    "network",
    "error",
    "error",
    "go",
    "run",
    "code",
    "inside",
    "catch",
    "let",
    "display",
    "message",
    "console",
    "log",
    "string",
    "unexpected",
    "error",
    "try",
    "later",
    "last",
    "step",
    "create",
    "order",
    "go",
    "orders",
    "page",
    "bottom",
    "going",
    "use",
    "object",
    "called",
    "special",
    "object",
    "object",
    "provided",
    "javascript",
    "lets",
    "us",
    "control",
    "url",
    "top",
    "browser",
    "change",
    "location",
    "object",
    "change",
    "url",
    "top",
    "let",
    "give",
    "try",
    "go",
    "code",
    "type",
    "location",
    "property",
    "called",
    "href",
    "gives",
    "us",
    "url",
    "top",
    "browser",
    "change",
    "href",
    "property",
    "change",
    "url",
    "top",
    "browser",
    "try",
    "code",
    "going",
    "change",
    "href",
    "make",
    "equal",
    "string",
    "orders",
    "html",
    "replace",
    "everything",
    "slash",
    "orders",
    "html",
    "open",
    "orders",
    "html",
    "file",
    "bottom",
    "open",
    "orders",
    "page",
    "way",
    "orders",
    "html",
    "file",
    "path",
    "current",
    "file",
    "checkout",
    "html",
    "code",
    "running",
    "checkout",
    "page",
    "starts",
    "checkout",
    "html",
    "looks",
    "file",
    "called",
    "orders",
    "html",
    "beside",
    "file",
    "loads",
    "file",
    "browser",
    "let",
    "save",
    "open",
    "project",
    "click",
    "place",
    "order",
    "create",
    "new",
    "order",
    "using",
    "backend",
    "take",
    "us",
    "orders",
    "page",
    "right",
    "list",
    "order",
    "objects",
    "data",
    "need",
    "create",
    "page",
    "leave",
    "generating",
    "html",
    "making",
    "page",
    "interactive",
    "exercises",
    "let",
    "check",
    "tests",
    "make",
    "sure",
    "everything",
    "still",
    "working",
    "open",
    "tab",
    "tests",
    "refresh",
    "case",
    "looks",
    "good",
    "save",
    "changes",
    "git",
    "go",
    "git",
    "section",
    "inside",
    "orders",
    "js",
    "created",
    "functions",
    "saving",
    "orders",
    "payment",
    "summary",
    "js",
    "made",
    "place",
    "order",
    "button",
    "interactive",
    "use",
    "backend",
    "create",
    "order",
    "let",
    "create",
    "message",
    "describing",
    "changes",
    "create",
    "order",
    "using",
    "back",
    "end",
    "commit",
    "going",
    "learn",
    "one",
    "thing",
    "lesson",
    "needed",
    "create",
    "tracking",
    "page",
    "going",
    "learn",
    "use",
    "url",
    "parameters",
    "first",
    "let",
    "open",
    "project",
    "go",
    "back",
    "orders",
    "page",
    "page",
    "track",
    "package",
    "links",
    "beside",
    "products",
    "click",
    "link",
    "take",
    "us",
    "tracking",
    "page",
    "tracking",
    "html",
    "however",
    "right",
    "page",
    "plain",
    "html",
    "javascript",
    "go",
    "back",
    "orders",
    "track",
    "different",
    "product",
    "notice",
    "tracking",
    "pag",
    "pages",
    "need",
    "make",
    "tracking",
    "page",
    "different",
    "depending",
    "order",
    "product",
    "know",
    "product",
    "track",
    "page",
    "create",
    "use",
    "feature",
    "called",
    "url",
    "parameters",
    "url",
    "parameters",
    "let",
    "us",
    "save",
    "data",
    "directly",
    "url",
    "create",
    "url",
    "parameter",
    "top",
    "url",
    "going",
    "type",
    "question",
    "mark",
    "order",
    "capital",
    "equals",
    "1",
    "2",
    "3",
    "example",
    "press",
    "enter",
    "question",
    "mark",
    "means",
    "adding",
    "url",
    "parameter",
    "url",
    "parameter",
    "property",
    "value",
    "pair",
    "left",
    "side",
    "property",
    "right",
    "side",
    "value",
    "sort",
    "like",
    "object",
    "like",
    "using",
    "url",
    "parameters",
    "save",
    "data",
    "url",
    "like",
    "use",
    "javascript",
    "get",
    "data",
    "url",
    "go",
    "back",
    "code",
    "open",
    "files",
    "scroll",
    "bottom",
    "tracking",
    "page",
    "let",
    "scroll",
    "way",
    "bottom",
    "bottom",
    "body",
    "let",
    "add",
    "script",
    "tag",
    "run",
    "javascript",
    "type",
    "less",
    "script",
    "greater",
    "get",
    "parameters",
    "url",
    "use",
    "class",
    "called",
    "url",
    "first",
    "let",
    "generate",
    "object",
    "using",
    "class",
    "type",
    "new",
    "capital",
    "url",
    "brackets",
    "give",
    "url",
    "want",
    "get",
    "parameters",
    "type",
    "remember",
    "gets",
    "url",
    "top",
    "browser",
    "let",
    "save",
    "object",
    "variable",
    "front",
    "create",
    "const",
    "url",
    "equals",
    "object",
    "url",
    "class",
    "analyzes",
    "url",
    "give",
    "breaks",
    "different",
    "parts",
    "one",
    "parts",
    "url",
    "parameters",
    "get",
    "parameters",
    "going",
    "use",
    "property",
    "url",
    "search",
    "capital",
    "p",
    "perams",
    "way",
    "url",
    "parameters",
    "also",
    "called",
    "search",
    "parameters",
    "used",
    "features",
    "like",
    "youtube",
    "search",
    "search",
    "params",
    "let",
    "us",
    "get",
    "url",
    "parameters",
    "let",
    "say",
    "wanted",
    "order",
    "id",
    "parameter",
    "inside",
    "code",
    "search",
    "params",
    "method",
    "called",
    "dot",
    "get",
    "brackets",
    "lets",
    "us",
    "get",
    "individual",
    "parameters",
    "inside",
    "give",
    "string",
    "get",
    "order",
    "capital",
    "parameter",
    "url",
    "let",
    "brackets",
    "save",
    "open",
    "project",
    "go",
    "tracking",
    "page",
    "open",
    "console",
    "right",
    "click",
    "inspect",
    "console",
    "see",
    "gave",
    "us",
    "order",
    "id",
    "saved",
    "using",
    "code",
    "get",
    "url",
    "parameters",
    "url",
    "top",
    "use",
    "create",
    "page",
    "also",
    "say",
    "save",
    "multiple",
    "parameters",
    "url",
    "save",
    "another",
    "parameter",
    "end",
    "type",
    "give",
    "another",
    "property",
    "value",
    "pair",
    "like",
    "product",
    "capital",
    "id",
    "equal",
    "456",
    "press",
    "enter",
    "inside",
    "code",
    "get",
    "second",
    "parameter",
    "inside",
    "going",
    "make",
    "copy",
    "line",
    "select",
    "right",
    "click",
    "copy",
    "right",
    "click",
    "paste",
    "time",
    "going",
    "get",
    "parameter",
    "product",
    "capital",
    "id",
    "save",
    "open",
    "page",
    "open",
    "console",
    "got",
    "order",
    "id",
    "well",
    "product",
    "id",
    "url",
    "url",
    "parameters",
    "lets",
    "us",
    "save",
    "different",
    "data",
    "url",
    "actually",
    "go",
    "back",
    "forth",
    "click",
    "back",
    "button",
    "go",
    "url",
    "url",
    "different",
    "data",
    "parameters",
    "saved",
    "inside",
    "click",
    "forward",
    "url",
    "different",
    "parameters",
    "data",
    "saved",
    "inside",
    "youtube",
    "search",
    "works",
    "search",
    "something",
    "search",
    "saved",
    "url",
    "parameter",
    "search",
    "something",
    "else",
    "search",
    "also",
    "saved",
    "url",
    "parameter",
    "go",
    "back",
    "forth",
    "two",
    "actually",
    "data",
    "need",
    "create",
    "tracking",
    "page",
    "need",
    "know",
    "order",
    "product",
    "one",
    "thing",
    "know",
    "create",
    "page",
    "go",
    "back",
    "code",
    "going",
    "open",
    "orders",
    "page",
    "orders",
    "html",
    "going",
    "find",
    "track",
    "package",
    "button",
    "using",
    "control",
    "f",
    "command",
    "f",
    "type",
    "text",
    "button",
    "track",
    "package",
    "notice",
    "buttons",
    "link",
    "tracking",
    "page",
    "tracking",
    "html",
    "generating",
    "html",
    "make",
    "sure",
    "add",
    "url",
    "parameters",
    "tracking",
    "page",
    "url",
    "using",
    "question",
    "mark",
    "order",
    "capital",
    "id",
    "equals",
    "substitute",
    "order",
    "id",
    "like",
    "1",
    "2",
    "3",
    "also",
    "attach",
    "product",
    "id",
    "product",
    "capital",
    "id",
    "equals",
    "456",
    "generating",
    "html",
    "make",
    "sure",
    "substitute",
    "order",
    "id",
    "product",
    "id",
    "url",
    "opens",
    "tracking",
    "page",
    "know",
    "order",
    "product",
    "track",
    "leave",
    "generating",
    "html",
    "making",
    "tracking",
    "page",
    "interactive",
    "exercises",
    "let",
    "save",
    "file",
    "let",
    "check",
    "tests",
    "open",
    "browser",
    "open",
    "test",
    "tab",
    "everything",
    "still",
    "working",
    "save",
    "changes",
    "git",
    "open",
    "git",
    "section",
    "orders",
    "html",
    "added",
    "example",
    "adding",
    "url",
    "parameters",
    "tracking",
    "page",
    "link",
    "tracking",
    "html",
    "added",
    "example",
    "getting",
    "parameters",
    "url",
    "top",
    "let",
    "create",
    "message",
    "describing",
    "changes",
    "add",
    "url",
    "parameters",
    "example",
    "commit",
    "end",
    "lesson",
    "lesson",
    "learned",
    "vend",
    "make",
    "http",
    "requests",
    "back",
    "end",
    "learned",
    "use",
    "xml",
    "http",
    "request",
    "fetch",
    "learned",
    "handle",
    "asynchronous",
    "code",
    "using",
    "callbacks",
    "promises",
    "async",
    "await",
    "learned",
    "test",
    "asynchronous",
    "code",
    "learned",
    "error",
    "handling",
    "unexpected",
    "errors",
    "use",
    "backend",
    "project",
    "learn",
    "url",
    "parameters",
    "look",
    "exercises",
    "might",
    "wondering",
    "next",
    "step",
    "course",
    "instead",
    "using",
    "backend",
    "next",
    "step",
    "learn",
    "create",
    "backend",
    "need",
    "learn",
    "command",
    "line",
    "learn",
    "technology",
    "called",
    "nodejs",
    "lets",
    "us",
    "create",
    "backend",
    "also",
    "course",
    "learn",
    "put",
    "website",
    "internet",
    "using",
    "video",
    "right",
    "exercises",
    "help",
    "practice",
    "learned",
    "lesson",
    "e",
    "thanks",
    "watching",
    "videos",
    "courses",
    "might",
    "interested",
    "want",
    "support",
    "channel",
    "click",
    "like",
    "subscribe",
    "share",
    "video",
    "others",
    "thanks",
    "see",
    "next",
    "one"
  ],
  "keywords": [
    "javascript",
    "course",
    "going",
    "learn",
    "using",
    "end",
    "interactive",
    "website",
    "add",
    "products",
    "cart",
    "create",
    "order",
    "even",
    "way",
    "also",
    "projects",
    "like",
    "rock",
    "paper",
    "scissors",
    "game",
    "list",
    "need",
    "previous",
    "everything",
    "start",
    "step",
    "features",
    "use",
    "together",
    "html",
    "css",
    "programming",
    "backend",
    "promises",
    "project",
    "amazon",
    "let",
    "practice",
    "find",
    "different",
    "video",
    "lesson",
    "give",
    "learned",
    "total",
    "get",
    "something",
    "working",
    "make",
    "sure",
    "check",
    "first",
    "comment",
    "steps",
    "access",
    "computer",
    "actually",
    "three",
    "creating",
    "creates",
    "buttons",
    "text",
    "changes",
    "look",
    "finally",
    "makes",
    "click",
    "one",
    "button",
    "product",
    "want",
    "thing",
    "called",
    "web",
    "browser",
    "lets",
    "us",
    "open",
    "default",
    "type",
    "top",
    "press",
    "enter",
    "search",
    "result",
    "work",
    "understand",
    "basically",
    "try",
    "next",
    "super",
    "simple",
    "go",
    "page",
    "rightclick",
    "inspect",
    "console",
    "tab",
    "show",
    "bottom",
    "select",
    "icon",
    "okay",
    "inside",
    "bracket",
    "single",
    "quote",
    "hello",
    "close",
    "semicolon",
    "things",
    "popup",
    "see",
    "tell",
    "another",
    "time",
    "message",
    "good",
    "example",
    "code",
    "running",
    "many",
    "write",
    "call",
    "math",
    "back",
    "2",
    "tells",
    "calculate",
    "gives",
    "10",
    "3",
    "run",
    "inner",
    "capital",
    "equals",
    "case",
    "feature",
    "copy",
    "take",
    "might",
    "brackets",
    "special",
    "syntax",
    "rules",
    "still",
    "scroll",
    "remove",
    "error",
    "lot",
    "ca",
    "right",
    "instead",
    "know",
    "part",
    "quotes",
    "change",
    "later",
    "lines",
    "version",
    "better",
    "extra",
    "continue",
    "numbers",
    "sl",
    "final",
    "clicking",
    "section",
    "cost",
    "already",
    "two",
    "star",
    "slash",
    "plus",
    "number",
    "set",
    "else",
    "update",
    "delete",
    "left",
    "calculation",
    "third",
    "1",
    "notice",
    "equal",
    "works",
    "done",
    "operator",
    "control",
    "gets",
    "rest",
    "matching",
    "empty",
    "new",
    "last",
    "little",
    "tax",
    "means",
    "money",
    "round",
    "except",
    "however",
    "details",
    "problem",
    "save",
    "earlier",
    "convert",
    "remember",
    "put",
    "well",
    "paste",
    "fix",
    "front",
    "help",
    "would",
    "read",
    "keep",
    "every",
    "move",
    "contains",
    "checkout",
    "strings",
    "string",
    "represents",
    "created",
    "sense",
    "values",
    "value",
    "space",
    "added",
    "typing",
    "line",
    "quantity",
    "colon",
    "display",
    "second",
    "double",
    "easier",
    "five",
    "looks",
    "name",
    "template",
    "insert",
    "say",
    "curly",
    "compare",
    "uses",
    "multiple",
    "editor",
    "file",
    "folder",
    "less",
    "greater",
    "side",
    "paragraph",
    "refresh",
    "elements",
    "element",
    "tag",
    "separate",
    "style",
    "color",
    "selector",
    "property",
    "attribute",
    "class",
    "das",
    "replace",
    "dot",
    "play",
    "body",
    "cut",
    "files",
    "live",
    "server",
    "size",
    "shortcut",
    "really",
    "word",
    "script",
    "used",
    "onclick",
    "loaded",
    "whatever",
    "load",
    "variables",
    "rename",
    "variable",
    "container",
    "saved",
    "log",
    "takes",
    "zero",
    "reset",
    "card",
    "const",
    "boolean",
    "true",
    "false",
    "statement",
    "condition",
    "link",
    "random",
    "score",
    "generate",
    "outside",
    "undefined",
    "null",
    "currency",
    "functions",
    "function",
    "return",
    "parameters",
    "parameter",
    "comma",
    "objects",
    "object",
    "price",
    "properties",
    "delivery",
    "method",
    "methods",
    "json",
    "local",
    "storage",
    "send",
    "data",
    "item",
    "box",
    "document",
    "dom",
    "query",
    "js",
    "input",
    "key",
    "event",
    "listener",
    "finish",
    "classes",
    "design",
    "pixels",
    "image",
    "djs",
    "scripts",
    "loading",
    "array",
    "index",
    "date",
    "loop",
    "div",
    "render",
    "grid",
    "wait",
    "id",
    "regular",
    "arrow",
    "git",
    "orders",
    "options",
    "commit",
    "modules",
    "export",
    "import",
    "path",
    "payment",
    "summary",
    "option",
    "format",
    "external",
    "library",
    "url",
    "test",
    "testing",
    "tests",
    "jasmine",
    "constructor",
    "clothing",
    "http",
    "request",
    "response",
    "promise",
    "fetch",
    "catch"
  ]
}