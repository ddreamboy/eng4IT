{
  "text": "Hey everyone, Kevin here.\nToday I want to show you the \nfundamentals of programming using Python.\nIn this video, I'm going to assume that \nyou have no programming background at all.\nWe're going to start from the very basics and \nwe're going to work our way up step-by-step,  \nand we'll get a little bit more \nadvanced. By the end of this video,  \nyou'll be able to write your very \nown source code and then run it.\nNow, how exciting is that?\nWe're going to start with, well, why should you \neven learn how to program and then why Python?\nThere are so many different \nprogramming languages out there.  \nWhy should we choose Python? Then we're going \nto start with how do you even get Python?\nWhere do you write your code?\nThen we'll go through things \nlike operators, variables,  \nwe'll create a function, we'll even jump \ninto things like creating an if statement,  \ncreating loops, so your code will run or \nexecute until a certain condition is met.\nWe'll even leverage others’ code \nby importing libraries into Python.\nBy the end of this, you'll have a very solid \nunderstanding of how to get started with  \nprogramming. Think of this as a 100-level course \nthat'll give you all of the most essential tools.\nIf you want to jump around this video, \nI've included timestamps down below  \nso you can jump to the section \nthat interests you the most.\nTo get started, you might be wondering, \nwell, why should I even learn how to program?\nHow is this going to benefit me?\nWell, anytime you go on your phone \nor anytime you go on your PC,  \nyou're experiencing the output of \nsomething that someone has programmed.\nSo, you're realizing the benefit.\nThink of it this way. To program allows you \nto take maybe an idea that's in your head,  \nyou can turn it into a series of steps that \nthe computer can understand and execute.\nHow cool is that?\nSo, for example, maybe you have \na game that you want to create.\nMaybe you want to create an application at work \nto help simplify what you do on a daily basis.\nBy programming, you can do all of those things.\nIt's an incredibly powerful \nskill to learn how to use.\nOK, so you want to learn how \nto program, but why Python?\nThere are so many different programming \nlanguages out there, you have C, C Sharp,  \nC++, Java, JavaScript, PHP, \nand the list goes on and on.\nWell, recently on my YouTube channel, I asked \nall of you what programming language do you  \nmost want to learn about? And overwhelmingly, \nfar and away, Python was the clear winner.  \nIt was something like 65% of you wanted \nPython. And it kind of makes sense. When you  \nlook at the lists of the most popular programming \nlanguages, Python tends to be right near the top.\nIt's been around for a while.\nIt's also pretty easy to use and also understand.  \nWhen you code using Python, it tends to \nbe a very concise programming language.\nIt's also a good general \npurpose programming language,  \nand what I mean by that, is you can \nwrite all sorts of applications.\nMaybe you want to write a web \napp, an internal company tool,  \na game, or maybe you just want to \nconduct some scientific analysis.\nYou can do all of that with Python.\nAnd all the things that you \nlearn today related to Python,  \nyou can take these same concepts and you can \napply it to other programming languages as well.\nAnd really, fundamentally, you just \nwant to take some idea you have,  \nyou want to turn it into a series of \nsteps that the computer can execute.\nAnd in a sense, it's kind of like a \ndifferent language or a spoken language.\nSo, in English I say hello, \nin German I'll say hallo,  \nand in French, I'll try my best, I'll say bonjour.\nAnd all of those communicate the same idea. \nI'm just saying hello, but it's a slightly  \ndifferent way of saying it or speaking it, and \nthat's the same with a programming language.\nThey have different syntaxes. \nThey also have different rules,  \nbut at the end of the day, you're simply trying \nto communicate something to the computer,  \nbecause you want the computer to do something \nfor you. Now of course, each programming language  \nmight have its strengths or weaknesses, but \nyou're really accomplishing the same objective.\nAll right, so why don't we jump on the \nPC and let's get started with Python.\nHere I am now on my PC and first off I want \nto check if I already have Python installed.\nTo do that on Windows 10, simply go down to your  \ntaskbar and within the search \nfield type in command prompt.\nOnce you type in command \nprompt, click on the best match.\nThis opens up your command \nprompt, and to check for Python,  \nsimply type in Python and then type in --version.\nIf you have Python installed, it'll tell you the \nversion of Python that you have, and here you see,  \nI just typed this in and it says Python was \nnot found, so I need to go and install Python.\nIf you already have it, you can skip the \nnext step. If you don't have Python like me,  \nstick around and I'll show \nyou how you can get Python.  \nTo get Python, head to the website python.org \nand that'll drop you on the Python home page.  \nRight near the top, you'll see a \nbutton right here for downloads.\nIf you click on this, it'll identify \nwhat operating system you're on  \nand it'll recommend the best option.\nHowever, if you're on a different OS, you \ncan also choose it down here. Now I'm running  \nWindows today, so I'll download Python 3.9.2. \nThis is currently the most recent version. If  \nyou're watching this video maybe a few months from \nnow, there could be an even more recent version.\nGo ahead and download whichever \none it recommends to you.\nI'll click on download and here it's \nkicked off the download process.\nOnce you finish downloading, click on the EXE.\nThis opens up the install prompt \nand right up here I could install.\nHowever, before we do that,  \nthere’s an option right here at the \nbottom that says add Python to PATH.\nLet's check that box and \nthen click on install now.\nThis now runs through the installation \nprocess, and it looks like the setup  \nwas successful, so I'm going to click on close.\nLet's now go down below and just like we \ndid before, you can type in command prompt  \nand then launch the command prompt. \nOnce again, we can type in Python  \n–version, hit enter, and you should now see that \nPython is installed. Here I have Python 3.9.2.\nOK, now that we've verified that Python is \nsuccessfully installed, let's close command  \nprompt and once again, let's go down to the \ntaskbar, except this time let's type in Python.\nAnd here you should see the best match for Python. \nHere I see Python 3.9. Let's click on this.\nThis opens up the Python terminal, and I'll \nzoom in just a little bit, so it's a little  \nbit easier to see, and we can type in code \ndirectly here and Python will interpret it.\nSo, what's an example of that?\nSo, what if we type in what is 1 + 2 and I'll \nput a question mark in and let's hit enter.\nAnd this doesn't work.\nI see something that says \nsyntax error, invalid syntax.\nNow the syntax is the rules of a programming \nlanguage and when I typed in what is 1 + 2?\nThis doesn't align with what Python is expecting.\nI need to type in a valid expression that \nthe Python programming language understands.\nSo, instead of typing in what is \n1 + 2, well I could just type in 1  \nand I'll type in + 2, and then I'll \nhit enter and there gives me 3 back,  \nso this was a valid expression in \nthe Python programming language.\nNow, what's neat is when I type something \ninto Python, like 1 + 2, Python takes each  \nline of code that I enter. So the 1 + 2, \nit interprets it, and then it evaluates it.\nSo, it gave me 3.\nThere are other programming languages \nwhere you have to compile it first  \nand then you can execute it, but with Python \nit'll interpret it as you’re going to.\nNow, now that we've typed in just a very \nbasic expression, and we've evaluated it,  \nwhy don't we try a built-in function \ncalled print. Here I could type in print,  \nI'm going to open the parentheses, insert double \nquotes, and then I'll type in Hello World,  \nand I'll close my quotes and close my parentheses.\nNow this is one of the go to examples anytime \nyou're starting with a new programming language.\nIt's just hello world. Just testing it out.\nI'll hit enter and here it says Hello World, so \nit's sending back exactly what we sent into this  \nfunction. Now as we go throughout this, our \nprograms are going to get a little bit more  \ncomplex, but this is just showing you the basics \nof how you can already start executing some code.  \nTo exit out of the Python terminal, \nwe can click on the X symbol up here  \nor we can type in another function called exit.\nOpen your parentheses, close your parentheses,  \nthen hit enter and that'll \nclose out the terminal window.\nNow we executed some of our first code directly \nin the Python terminal, but you can also use  \na text editor to write code. On Windows, \nthere's a text editor called Notepad.\nOnce again, go down to your taskbar and \nin the search field type in Notepad.\nI'll click on this right here.\nThis opens up Notepad, and I'll zoom in \njust a little bit more. Now you probably  \nnever knew that you can \nwrite source code in Notepad.\nIt's actually a pretty powerful app. So right \nhere, just like we did in the previous example,  \nI'll type in print and then I'll open \nmy parentheses, put in a quote, and then  \nI'll type in Hello World once again, and then \nI'll close my quotes and close my parentheses.\nSo, here's my source code written in Notepad.\nNow of course I want to be able to run this, so \nI need to save it as an appropriate file type.\nI'll go up to the file menu, go down to save \nas, and this opens up the save as prompt.\nNow maybe I'll just call this file, let's call \nit Hello World, and if I just leave it as that,  \nit'll save it as a .txt or basically \njust a standard text document.\nNow I want this to be a Python file and it \nturns out that the extension for Python is .py,  \njust like the extension for text files .txt, \nPython is .py, so here I'll type in .py.\nDepending on the programming \nlanguage that you're using,  \ndifferent programming languages \nhave different extensions.\nFor example, JavaScript is .js and every \nlanguage will have its own extension.\nNow that I've typed this in, I'll save \nit to my desktop and then click on save.\nAnd here now I see the file on \nmy desktop called Hello World.\nYou'll also notice that it has the Python \nlogo on it. Because we installed Python,  \nit correctly identifies that this is a .py \nfile and so it sees that this is a Python file.\nNow let's test this out to see if we \ncan run this source code that we wrote.  \nDown below on the taskbar, \nlet's type in command prompt,  \njust like we did earlier, and \nlet's open up the command prompt.\nI've adjusted the command prompt \nso it's a little bit easier to see,  \nand now I want to run this file \nover here in command prompt.\nTo do that, let me type in Python.\nSo, this will let the computer know that \nthis is a Python file that I want to run.\nI'll put in a space, and I'll take my Python file,  \nand then I'll simply drag and \ndrop it over into command prompt.\nNow this is a really cool trick  \nwhere you can get the location of the file \nsimply by dragging and dropping it in.\nSo here basically I'm saying I \nwant to execute this Python file.\nNext, I'll click on enter and here we see that \nit prints hello world into my command prompt.\nThis is exactly what I wanted it \nto do, so Python went through,  \nand it interpreted the code in this file \nand then it printed it here on my screen.\nYou now know some of the basics of \nboth writing and running Python code.\nCongratulations, you just wrote your first \nbit of source code, and you also ran it.\nYou're making some good progress.\nNow, so far, we've just been writing \nour code in a text editor like Notepad,  \nand then we've been running it, \nand that works perfectly fine,  \nbut it's not the most efficient way to write \ncode, and I just want to give a parallel example.\nLet's say that maybe you're \nwriting a document for school.\nYou could write your document in Notepad. \nNow of course it does have some downsides.\nYou don't have a spell check.\nYou don't have a grammar \ncheck. You can't do formatting.\nSo, although you can do it, it's \ngoing to require a lot more work.\nAnd that same concept also applies to programming.\nSure, you could write your code in Notepad, \nor we can get what's called an IDE,  \nand that stands for integrated \ndevelopment environment.\nIt'll just make writing code a \nlot more efficient and also easy,  \nand in a few moments, we'll see why that is.\nYou have all sorts of IDEs \nthat you can choose from.  \nOn Apple, you have Xcode. On Android, you have \nAndroid Studio. With Ruby, you have RubyMine,  \nand there's also another one called Visual \nStudio Code and that works very well with Python.\nIt's a product made by Microsoft, so of \ncourse I like it. I used to work at Microsoft,  \nbut the great thing too is Visual \nStudio Code is entirely free,  \nso let's go to Visual Studio \nCode and let's get this IDE.\nTo get Visual Studio Code, head to \nthe website code.visualstudio.com  \nand once you land on the homepage, you can \nchoose the operating system that you have.  \nHere when I click on the drop \ndown, you can get it on Mac,  \nWindows, or Linux, so it supports all of \nthe different major operating systems.\nI'm running Windows today,  \nso I'll click on download for Windows \nand I'll go with the stable build.\nOnce the download completes, down in the \nbottom left-hand corner, click on the EXE.\nThis opens up the setup process.\nI’ll agree, I'll Click to accept the \nagreement and then click on next.\nI'll go with the default location.\nI'll click on next.\nYou'll then get a screen that \nsays select additional tasks.\nI’d recommend checking all \nof these different boxes.\nNext, let's go down and click on next. On \nthe last screen, let's click on install.\nThis will now go through and install \nVisual Studio Code on your computer.\nOnce you're all done installing, let's click \non finish and launch Visual Studio Code.\nThis now drops us into Visual Studio Code, and \nby default, we'll land on the welcome screen.  \nIf you ever want to get back to this screen again,  \nyou can click on the help menu and then click \non welcome and that'll drop you right here.\nThere are a few things we want to do before we \ncan start writing code in Visual Studio Code.  \nOver on the left-hand side, there's \nan icon here for extensions.\nLet's click on that.\nThis opens up extensions and up \nhere in the search field type in  \nPython. We want to install the Python extension.\nWhen you type it in, you should \nsee Python at the very top,  \nand when you click on this, you'll \nsee that it's Python by Microsoft.\nIt should have something \nover 30 million downloads,  \nand right here, if you don't yet have \nit, you can install this extension.\nWe're going to need this, so click on \ninstall and make sure you add It. Once  \nyou finish installing the extension, we \nalso want to select Python that we just  \ninstalled as the interpreter for Visual \nStudio code, and this is really easy to do.\nOn your keyboard, press control, shift, and P at \nthe same time, so that's control, shift, and P,  \nand that'll open up this screen right here and \nup here, type in Python: select interpreter.\nThis will allow us to select the \ninterpreter that we want to use.\nNow if you remember in Notepad, when we \nwrote our code, it interprets that code.\nSo, we basically want to tell Visual Studio \ncode what interpreter we want to use.\nSo, I'll select this option right here  \nand now I can choose my interpreter, \nand here you'll see Python 3.9.2.\nSo, this is what we installed just a moment ago.\nSo here I'll select this as my interpreter,  \nand now we're all set to start \nwriting code in Visual Studio Code.\nTo get started, why don't we open up the \nHello World file that we created previously.\nHere I'll go up to the file \nmenu and I'll go to open file.\nThis opens up my file picker and here \non my desktop I see my hello world file.\nHere you'll also see that this type of file \nis now associated with Visual Studio Code.\nThis is the Visual Studio Code logo.\nI'll select this file and then click on open.\nNow that I've opened the file, \nyou should recognize this.\nThis is exactly what we wrote into Notepad,  \nexcept this time we have it open in Visual \nStudio Code. Now you'll start to notice  \nsome of the benefits of using an IDE or \nan integrated development environment.\nFirst off, I have line numbers now, so \nhere if I add additional lines of code,  \nhere I get all the line numbers \nover on the left-hand side.\nIn Notepad, we didn't get that.\nAlso when I write in this function called \nprint, it highlights it in different colors  \nso I could identify what is the context or the \ntext that it's printing and what is the function.\nSo here I get different colors.\nAlso, when I hover over print, it \ngives me some helpful suggestions  \non the type of content that I \ncan enter within this function.\nSo, this will make it a lot easier \nas we start writing out our code.\nNow I can run this code \ndirectly in Visual Studio Code.\nI'll simply go up here and I can now right click.  \nRight down here, there's an option \nthat says run Python file in terminal.\nWhen I select that, it'll open up a \nterminal on the bottom of the screen,  \nand here I can see that it executed or interpreted \nthis file and here it prints out hello world.\nSo, it gives me the output \nof this code right up here.\nAlong with right clicking on the screen and \nrunning the Python file in the terminal there,  \nI can also go to the top right-hand \ncorner and I can click on this play icon.\nThis will also run the Python file in \nthe terminal, so when I click on this,  \nhere too, it ran this file and \nhere too I see hello world.\nSo, this is just another way, probably a little \nbit easier to see the output of your code.\nNow that we know some of the basics of how to \nstart writing code and how to run that code,  \nI want to show you how we can start working \nwith operators to work with numbers.\nAnd here I'm going to type directly into the \nterminal down below, so I'll go down here to  \nthe terminal and just like we did earlier \nin the Python terminal, I can type in here.\nSo here I'll type in 1 + 2  \nand I'll hit enter and here it interprets \nthat code, and it evaluates it to 3.\nSo just like we saw earlier. One of the \nthings is you'll notice when I typed in 1 + 2,  \nI didn't include any spaces and spaces or \nwhitespace don't impact the calculation at all,  \nso I could also type in 1, space, and I'll type \nin plus, and then another space, and hit 2,  \nand then hit enter and there too it also evaluates \nit to 3, so using white space can actually make  \nyour code more readable, so you could type it \nin like this, or just include some white space.\nIt won't affect what the outcome is. With \nPython, I can use all of the standard  \noperators. Right up above, I showed you how \nyou can do addition, but here let's say 5 – 2,  \nI can also do subtraction, and here \nit evaluates that to 3 as well.\nI could do a multiplication, so let's say 4 * 4.\nNow with multiplication, I enter in an asterisk.\nThat's the multiplication symbol.\nHere I'll hit enter and it evaluates that to 16. I \ncould also do division. Here I'll take 10 / 5 and  \nhere for division, division is the forward slash, \nand then I'll hit enter and that evaluates to 2.\nNow with Python, let's say that \nyou start using multiple operators,  \nso maybe you're adding and \nthen you're multiplying.\nPython follows the default order of operations,  \nso let's say I enter in 2 + 2 \nand then I want to multiply by 5.\nWhat do you think this will evaluate to?\nIs it 2 + 2 which is 4 and \nthen times 5 which is 20?\nOr is it 2 * 5 which is 10, and \nthen you add 2 to that which is 12.\nWell here if I hit enter, it evaluates to 12,  \nbecause it's following the default order of \noperations. Multiplication comes before addition.\nIf you've ever heard PEMDAS or Please Excuse \nMy Dear Aunt Sally before, that's how you  \nknow what the order of operations is. First \nit'll evaluate whatever is in parentheses.\nThen it'll look at any exponents followed by \nmultiplication and division in the order of left  \nto right, and then it'll look at addition and \nsubtraction also in the order of left to right.\nUp above, I could also enter \nin my expression up here,  \nso here I'll get rid of hello world and \nhere I'll say let's print out 2 + 2.\nHere I'll click on run and here \nyou'll see that it executes this  \ncode Thanks for the suggestion! I’ve added this \nto my list. Stay tuned. Cheers!and here this also  \nevaluates to 4. If I want to use an exponent, \nI'll come up here. Let's remove the plus symbol,  \nand here I'll enter 2 asterisks, so \nthis will be 2 to the power of 2.\nAnd here if I click on the play button, \nhere that evaluates to four 2 * 2 is 4.\nBut let's say I want to do a 2 to the 3rd.\nHere I'll evaluate and it comes out to 8. \nI also have access to the floor operator,  \nso let's take an example here. Let's say I \nwant to calculate 5 / 2, and here I'll play  \nand right down here I see that's \n2.5, so I have a remainder of .5.\nBut let's say I don't want to \nknow what the remainder is.\nI just want to know how many times \nit goes in without a remainder.\nThis is also known as the floor.\nI could insert another forward slash and then I \ncould run it and here it tells me that it’s 2.\nBut let's say I just want to \nknow what the remainder is,  \nI can use the modulus operator for that.\nI'll get rid of the forward slashes, and \nright here, I'll type in the percent symbol,  \nthen I'll hit go and here it \ntells me that the remainder is 1.\nAs I'm entering in numbers up above \nand as I'm working with numbers,  \nlet's say that I enter a very large number. \nSo, let's say I enter in maybe 1,000,000.\nNow I could go through here and I could \nenter a comma and then I'll type in the zeros  \nand if I hit go here, you'll notice that \nit doesn't print what I expect it to.\nThat's because we don't want to use \ncommas as we're entering numbers.\nInstead, when you enter a number,  \njust enter it in as is and then hit go, \nand here it prints exactly what we expect.\nSo, you don't want to use commas \nwhen you're entering in numbers.\nNow that we've entered in some numbers, and \nwe know a little bit about the basics of  \nhow you can work with numbers and operators,  \nlet's start working with some text \nor what's referred to as strings.\nLet's say that I want to print what's up. \nNow earlier, we printed out hello world  \nand it's the same concept here. I'll insert in \ndouble quotes and then I'll type in what's up.\nSo, here's what's up and I'll click on this play  \nicon and down below you'll see \nthat the output is what's up.\nNow I surrounded what's up with double \nquotes. Now instead of using double quotes,  \nI can also use single quotes up here.\nSo, if I enter in single quotes and then hit play, \nhere too, you'll see that I get the same output,  \nso I can choose whether I want to \nuse double quotes or single quotes.\nSo why would I want to use \none versus the other? Well,  \nhere, what's up should actually have a single \nquote, so I'll insert a single quote there.\nNow one of the problems is when I enter \na single quote here, it thinks that this  \nis the end of the string, and so now if I try \nto run it, I get a syntax error down below.\nSo instead, I can use double quotes here \nand I'll use double quotes at the end,  \nand I could use a single quote in the middle \nand then here I'll run it and it works properly.\nNow let's say you wanted to use \ndouble quotes within your text.\nWell, you could surround it with single quotes \nand that way the double quotes would show up.\nNow here too, just like we saw before, \nwhitespace doesn't impact how the code runs,  \nso if I want to insert a space here and maybe \ninsert a space there and another space here  \nand I run this code, here you'll see \nthat I get the exact same output.\nSo once again, by using white space,  \nthat can help make your code more \nreadable as you're going through.\nWe now know some of the basics of \nworking with numbers and also strings,  \nbut what if you want to make sure you \nexplain what's happening in your code?\nHow do we do that?\nWell, we can use something called a comment, \nso let's say that I have this code here and I  \nwant to explain to someone what this does. Here \nI’ll bring this code down to the second line and  \nI can insert a comment by entering in the hash \nsymbol or the number sign or the pound symbol,  \nso I'll enter that and here I \ncan say this prints some text.\nI've now typed in my comment \nand let's run this now  \nand here you'll see that this doesn't \naffect at all what appears down here.\nI simply get what's up.\nSo just like we got before. Now I could also take \na comment and I could put it on a line with code.\nSo here I'll put it after my code,  \nI'll hit run, and here too you see \nthat it just gives me what's up.\nNow one of the neat things is,  \nlet's say I start writing a lot of code \nand it's starting to get fairly complex.\nI can comment out a line of code.\nI'll put the hash symbol in front of my \ncode and here you see it turns green,  \nso this is the IDE’s way of \ntelling me that this is a comment.\nAnd here now, if I hit run, you'll see that I \nget no output. That's because I commented out  \nthis line of code, so here I could bring it \nback by removing it and now here if I run it  \nonce again it shows me what’s up. So comments \nare pretty valuable as you're writing code.  \nNot only to let other people know what's happening \nin your code and what different blocks of code do,  \nbut you can also use it when \nyou're troubleshooting to  \ncancel out certain areas of your code \nuntil you're ready to test them again.\nNext, we're going to look at \nhow you can use variables,  \nand the easiest way to explain a variable is to \nuse this red bucket that I have here from my son.\nSo, let's pretend that this red bucket here \nis a variable and we can name the variable.\nWhy don't we just call it red \nbucket, just to keep things simple.\nNow I can assign a value to this \nvariable, so let's take for instance.\nLet's say I want the red \nbucket to equal my name Kevin.\nSo here I have my name.\nI can take this value and I \ncan assign it to this variable.\nSo now if you say well, what \nis the red bucket, well,  \nright here the red bucket is currently Kevin.\nSo once again, I've assigned that value to it.\nAnd this is a string or basically \nmy name is referred to as a string.\nIt's just a set of characters.\nNow I could assign other types of data to \nthis variable as well, so maybe I say, well,  \nactually I want the red bucket now to equal \na number, so maybe I want it to equal #8.\nSo, I'm going to say red bucket, you're now \nequal to 8, so I'm going to take my name.\nWe're going to pull that out, and here I'll take \nthe number 8 and we'll put it in the bucket.\nSo now if you ask me, well what is the red bucket?\nWell, it's currently the number 8.\nThat's a general concept of a variable.\nThe variable can hold different values.\nLet's jump in now and see how we can \nuse variables. To create variables,  \nthere are some rules that we need to follow, \nor this is the syntax that Python looks for.\nA variable should only contain \nletters, numbers or underscores.\nAnd also, we just need to make sure \nthat we don't start with a number.\nWe can't use any spaces in a variable name.\nWe also can't use any known keywords \nto Python like break or try.\nAnd ideally, we want to make sure that a \nvariable name is short and descriptive.\nThose work best.\nSo, for example, with the red bucket, \nwe'll now simply call the red bucket,  \nso it's pretty short and also descriptive.\nAlso, variable names are case sensitive, so if \nI wrote red bucket with a capital R and another  \none with a lowercase r, Python would view those as \nseparate variables, so case sensitivity matters.\nOK, so let's create our first variable \nand just continuing the example,  \nlet's say I want the variable to be called \nred bucket, so I'll give it this name  \nand now I need to assign a value to this variable, \njust like I did with the bucket. I'll type in  \nred_bucket and I'll type in the equal sign and I'm \ngoing to assign it the value of Kevin, my name.\nAnd here I'm using just a single equals sign. So,  \nwhat this does is it will assign \nthis value to this variable.\nSo now here I could hit enter and let me \nrun this and here nothing shows up yet  \nbecause I've assigned this value to this variable.\nThe next thing we could do \nis actually print this out.\nSo here let me say print and \nlet's type in red bucket.\nWhat's nice is because I'm using \nan IDE, it recognizes that I  \ncreated a variable called red bucket \nand I can just click on it here.\nNow if I click on the play icon, \nhere it'll print out Kevin,  \nso it's printing out the value \nthat's assigned to the red bucket.\nNow let's take another example here, \nlet's say I add another line and  \nlet me copy this first line and \nI'll paste it into the second line.\nAnd here I want to assign 10 to the red bucket.\nSo here I start out by assigning \nKevin and then I assign 10.\nWhat do you think will print out?\nLet's click on the play icon \nand here it prints out 10.\nAnd the reason why is, well, first \nit assigns Kevin to Red bucket,  \nand so that's the current value. But then \non the next line of code, it assigns a 10  \nto the red bucket. So, the 10 overwrites Kevin, \nand then when I print out the red bucket,  \nit's taking the last value that was assigned \nto it. So, the way to think of this back to  \nthe bucket example is I put Kevin in the bucket \nand then when I put 10 in, I have to take Kevin  \nout and then I put 10 in, so at the very end \nwhen you ask well what's in the red bucket,  \nwell, the number 10 is the in the red bucket \nbecause that's the last item that I put in.\nOne thing that's really neat about Python \nis when you're defining your variables,  \nyou don't have to assign your variable a type.\nSo here for example, for the red \nbucket, I assigned it my name,  \nand that's also known as a string.\nAnd next I assigned a number, which is an \ninteger, but I don't have to go and say,  \nwell, the red bucket is a string \nor a red bucket is an integer,  \nit'll automatically know what data type \nthat I'm assigning to that variable.\nSo down here in print, I can type in type  \nand then I'll open and close the \nparentheses around this variable.\nAnd so now let's run this and here \nit's telling me that it's an integer.\nSo basically here 10 is assigned to red bucket,  \nand so it's telling me that \nthat's currently an integer.\nLet's get rid of this line right here.\nSo now Kevin will be assigned to Red Bucket.\nAnd when I run this, here you'll see that a \nstring data type is assigned to this variable.\nNow let's say that I want \nto get rid of a variable,  \nso maybe I don't have a need \nfor the red bucket anymore.\nDown here I can type in del, basically \ndelete and this will delete a variable,  \nand here I can type in red bucket \nagain. I'll select the suggestion.\nLet me get rid of the type in the print, so I just \nwant to know what is red bucket? So if we run this  \nnow, I'll get an error because it says red bucket \nis not defined and that makes sense because here I  \ncreated the variable, I assigned the value, here I \ndeleted the variable, and here I try to print the  \nvariable, but there is no variable anymore called \nred bucket because I deleted it right up above.\nNext, I want to show you an \nexample of how you can request  \ninput and then you can take that \ninput and assign it to a variable.\nSo right here I simply typed in Kevin \nand I assigned it to this red bucket,  \nbut I want to allow input. So right up here, \nlet's delete Kevin or delete your name that  \nyou entered in and here we'll type in the input \nfunction. Here I'll open the parentheses and let  \nme type in double quotes and maybe I'll ask the \nquestion what do you want to put in the bucket.  \nI'll enter a question mark \nand then an additional space.  \nNow right down here, I don't want to delete \nthe variable, so I'll get rid of this.\nSo right now, I'm going to ask for input and \nthen we'll print out whatever the input is.\nSo here let's click on the \nrun icon and this will run it.  \nRight down here it says what do \nyou want to put in the bucket?\nAnd so maybe I want to put a shovel in,  \nso I'll click down in the terminal, \ntype in shovel, and then hit enter.  \nAnd here now it prints out shovel, because \nthat's now the value of the red bucket variable.\nNext, I want to show you how we can start \nusing conditional logic in our code.\nBasically, any expression that you enter \nin breaks down to either true or false,  \nso let's just take an example.\nI'll go down a few lines and let me enter in \nprint and I'm going to ask is 5 equal to 4?\nOne of the things you'll notice is when \nI ask this question is 5 equals to 4,  \nI entered in two equal \nsigns and that's not a typo.\nUp above, I just entered in one equal sign.\nSo why do I enter one here \nand down here I enter two?\nWell up above, I'm taking this value or this \ninput and I'm assigning it to this variable.\nHere I want to run a test for equality.\nI basically want to check are these two equal,  \nand when you test or check for \nequality, you use two equal signs,  \nso here let me remove the code up on top and \nI'm simply going to print out is 5 equal to 4.\nHere when I run it, here \nwe'll see that no, it's false.\n5 does not equal 4.\nNow you might be saying, well \nof course 5 isn't equal to 4.\nIt's not equal to, so over here I can also \ncheck are they not equal to one another.\nSo here instead of the equal sign, \nI'll insert an exclamation mark.\nSo here I have an exclamation \nmark followed by an equal sign.\nSo, this is my way of asking the \ncomputer is 5 not equal to 4?\nAnd I think we all know that's true.\nSo, when I run it, here I get true back.  \nAlong with equal to and not equal to, there \nare many other operators that I can also use.\nI have less than, greater than, greater \nthan or equal to, and less than or equal to.\nAnd here you can see the symbol that you \ncan use for these different operations  \nand over on the right-hand side, you'll see a few \nexamples of how you could use this, so I could  \ninsert any one of these into that print statement \nand you'll get this corresponding result.\nWe can now take these different \noperations and we can combine it with  \nvariables that we just learned about \nand so let's type in an example here.\nSo, I have a young son at home. His name \nis Thomas and he's just three years old,  \nso let me create a variable and I'll call it \nThomas age and it's currently equal to three,  \nso I'm taking this value of three and \nI'm assigning it to this variable.\nNow let's say I want to check, well, \nis he old enough for kindergarten.\nSo maybe I type in age at and \nI'll type in kindergarten.\nAnd maybe age at kindergarten \nis 5, so I'll enter in equals 5,  \nso I now have two different variables and I've \nassigned a value to each of those variables.\nNow down here I can check the equality of these,  \nso maybe I'll say print and let's check is Thomas \nage, is that equivalent to the age at kindergarten  \nand so then I'll hit run and here we'll see \nthat's false because basically Thomas age is  \ncoming back as three, age at kindergarten \nis 5, and those don't equal one another.\nSo, we can do this same type of check \nexcept we could do it using variables.  \nNow with this expression here, I'm simply checking  \nis Thomas’ age equal to the age at \nkindergarten and it comes back as false.\nBut what if I want to do something \na little bit more complex?\nWhat if I want to check, well if Thomas is \nless than the age at kindergarten, well,  \nhe should probably be in preschool or daycare. \nAnd if he is 5, he should be in kindergarten.\nBut if he's older than five, he \nshould be in some other class.\nAnd right now, this is just doing one \ncheck, it's just looking at one point,  \nis he at the age for kindergarten?\nThe easiest way to think of this is like \na flow chart, so here I have the current  \nage and depending on his age, any one of \nthese different scenarios could be true.\nNow I won't be able to do that with \nthe simple expression that we wrote.\nThat's just checking one thing.\nIf I want to check multiple different criteria, \nthis is when I can use an if statement.\nSo, let's jump back into Visual Studio \nCode and let's look at how we can use this.  \nBack in Visual Studio, I'm going to delete this \nlast line and I'll keep these two variables.\nThe one with Thomas' age and the \nother one with the age at kindergarten  \nand I'll enter down a few lines. Once \nagain, the white space doesn't matter,  \nso don't worry, you could enter \ndown a few lines and now we want to  \nenter in an if statement. An if statement is \nreally easy to write, you simply type in if.\nAnd here now I can do my check.\nSo first I want to know is Thomas’ \nage less than the age at kindergarten?\nSo here I can type in my variable.\nOnce again it gives me this helpful suggestion \nof using Thomas’ age and first I can check if  \nhe's younger than the age at kindergarten, \nso let me enter in the age at kindergarten.\nSo, this is going to be my first check.\nOnce I finish entering in this \nstatement, I need to enter in a colon.\nAnd when I hit enter, this \ndrops me down to the next line.\nOne thing you'll notice is it \nautomatically indented the line.\nWhat will happen is it will check this and if it \nturns out that Thomas’ age is less than the age  \nat kindergarten. In this case, Thomas is 3, the \nage of kindergarten is 5, so this would be true.\nIt's going to evaluate this code, \nso whatever code I enter in here,  \nit'll go through and it'll execute that.\nSo, let's test this out and let me type \nin print, so I'll enter in this function  \nand maybe we say something like \nThomas should be in preschool.\nOnce I finish typing that in, I'll go to \nthe end of this line and hit enter again.\nHere you see that it continues to indent it.\nSo basically, I can type in additional code \nand whatever I type in in this indented space,  \nit'll go through and it'll \nexecute all of this code.\nNow I don't have anything else I want to run.\nI simply want to print out this message.\nLet's now test this out to see how it works.\nI'll go up here and click on run and here we get \nthe text that says Thomas should be in preschool.\nNow let's say that maybe Thomas is 10 now.\nSo here Thomas’ age is 10 and that is \nnot less than the age of kindergarten.\nSo, when I run, here I get nothing back because \nit evaluates this, and it comes back as false,  \nso it doesn't execute this code.\nNow there's nothing else here, \nso it simply returns nothing.  \nNow let's say I want some fall back, so let's say \nif this is false, I want to say something else.  \nDown here I can use else, so it'll check \nthis, and it'll check if this is true,  \nbut if it turns out being false, \nthen it'll fall back to else.\nSo here I'll enter an else, a colon, \nand here again it indents out.\nSo here I could say, well if this isn't \ntrue then execute this block of code.\nSo here maybe I'll insert another print function.\nSo let me type in print.\nI'll open up the parentheses and let me type in \nThomas should be in kindergarten or another class.\nSo, I've now typed in my else statement, so \nlet's try running it to see what it will happen.\nSo, it'll check the first if statement,  \nthat'll evaluates a false, and \nthen it should fall back to else.\nLet's test this out. So when I hit \nrun, here it says Thomas should be  \nin kindergarten or another class, so this \nlogic is working exactly as we expect it to.\nRight now, I have two conditions here.\nI basically checked the first condition and if \nthis is false, it just falls back to this one.\nBut let's say I want to check \nfor additional conditions.\nHere I'll enter down and let me get out of this \nblock of code, so I'll hit the backspace key,  \nand right here, I can enter something \ncalled elif, basically else if,  \nso, you can go through and \ncheck any number of conditions.\nIt'll start at the top and \nwhen it finds one that's true,  \nit'll display that message and then exit.\nBut if this is false, it'll go to the \nnext one and check that condition,  \nand I can add any number of else ifs in here.\nSo I'll type in elif and maybe for this \ncondition I want to know if Thomas is 5,  \nwell he should be in kindergarten.\nSo here I'll say Thomas age and here once again,  \nI want to check if it's equal \nto the age at kindergarten.\nAnd remember, we don't enter in one equal sign,  \nwe enter in two and here I'll enter in \nthe other variable age at kindergarten.\nSo, this is going to be my check.\nAnd if this is true, we now want to evaluate \nsome code. Now just like we did before where  \nI entered the colon, let's make sure \nwe enter in a colon here at the end.\nThat's part of Python syntax.\nI'll hit enter and this automatically indents me.  \nHere I'll type in print, and I'll type in \nsome text that says enjoy kindergarten.\nNow I've added this else if statement that \nchecks to see if he's in kindergarten.\nSo, this last statement no longer makes sense \nwhere I say Thomas should be in kindergarten or  \nanother class, so maybe I simply remove this \nand I say Thomas should be in another class,  \nso this will just be my catch all at the end.\nSo, let's test this out to see how it works.\nSo, let's say Thomas is 3 and I run it.\nIn this case, the first condition here is true.\nSo, Thomas should be in preschool \nand here I get the text down below.\nThomas should be in preschool.  \nNow let's say Thomas is equal to five, \nor maybe he's five years old now.\nWhen we run it, here the first condition \nis false, so it skips over that one.\nIt looks at the second condition,  \nthis elif, and here Thomas is 5 \nand that's the age at kindergarten.\nSo here I get the text saying enjoy kindergarten.\nAnd let's say now that maybe Thomas is 10.\nSo here when I run it, it evaluates \nthe first statement and, well,  \nhe's older than the age of \nkindergarten, so that's false.\nHis age is not equal to the age of \nkindergarten, so that's also false,  \nand then it falls back to the else statement, \nand so Thomas should be in another class.\nSo here we've just tested that this \nis working just like we expect it to.\nNext, I want to show you how we can use \nfunctions in Python and if you've ever  \nused any other programming language before, you \nmight know them as a subroutine or a method,  \nbut it's all the same thing, so \nwe're going to use functions.\nAnd you've actually already been using a function.\nWe used the print function. Right here you see \nthat we've been using print multiple times.\nThis is a function. You call this \nfunction, you pass in some text,  \nand then it prints it out on the screen.\nSo that's just a basic example of a \nfunction that we've already been using.\nNow the cool thing is we \ncan create our own function.\nSo, what is a function?\nWell, it's basically a block of code  \nthat you can package together \nwith a name and it does something.\nSo, in this case anytime you call print \nor input, it takes some action depending  \non what that function is. The neat thing is it \nmakes your code more modular and also reusable.\nSo here for example, every time we \nwant to print something on the screen,  \nwe simply call this function \nand then it takes that action.\nWe don't have to enter in all the different code \nassociated with printing your text on the screen.\nWe simply rely on this function.\nSo, it makes your code a lot more reuseable.\nSo let's go through and create our own function.\nRight now, I'll go through and delete all of this \ncode that we had and let's say just to show the  \nvalue of functions, let me just enter in print \nand then Kevin Stratvert has a great channel.\nI'm going to enter this in three times.\nI figure the more I say it \nmaybe the more it sticks,  \nthen the more you read it, \nyou might start to believe it.\nSo here I've typed it in three different \ntimes and now I'm going to run it.  \nHere I'll expand the terminal just so we \ncould see it and here printed out three times.\nOh, but actually, look at that.\nIt looks like I spelled Stratvert \nwrong. Stratvert has a T in the middle,  \nand here I just say Stravord. Now because \nI'm not using a function for this, well,  \nI'm using the print function, but I haven't \ncreated a function to print this out three times,  \nso I'd have to go through, and I'd have to \ncorrect every single Stravert throughout my code  \nto correct this and imagine that \nyou referenced something many,  \nmany, many times in your code, and maybe you \nmake an error, you need to update something.\nIt could be a pain to have to go \nthrough all of your code to update it.\nSo instead, you can create a function, and \nI'll show you how we can create a function  \nto print this out multiple times, and \nthen we can call it whenever we want.\nOK, so let's create a function.\nI'll simply go down a few lines.\nTo create a function, we have to type in def.\nThis basically stands for define, so I'll \ntype in def and here we can type in a name  \nfor our function, and I'm going to call \nthis function, let's say print Kevin.\nSo, I've typed in my function name and then all \nfunctions need to have parentheses at the end, so  \nI'll open the parentheses, close the parentheses, \nand write down here, once again, just like we did  \nwith the if statement, I'll insert a colon. So, \nI now have my function. When I hit the enter key,  \nhere too, just like with the if statement, \nyou see that it indents it automatically.\nSo once again, it indents and any of the code \nunderneath here will be part of this function.\nNext, I want to enter in some code in \nthis function, so maybe I'll set up  \na variable and I'll call this text and \nlet me insert some text here in quotes,  \nand maybe I'll say Kevin Stratvert has a \ngreat channel, so that's going to be my text.\nAnd here maybe I'll just make the \nerror again where I don't have the T.\nNow right beneath that, here I could use \nprint and maybe I say let's print the text  \nand I want to print this three times.\nSo, I'll insert it in three times right here.\nI'm going to delete this earlier example \nhere so we just have the function.\nSo, I have my function now, can I run it?\nLet's try clicking on run. So I \nclick on run, and I get nothing back.\nAnd the reason why is right up \nhere, we've defined a function,  \nbut we haven't actually called this function.\nSo, I've defined what should happen when \nI call this, but we haven't called it yet,  \nso here I'll go down and I'll backspace, \nso I'm out of this block of code that's  \nassociated with this function, and \nhere now I can call my function.\nSo just like we called the print \nfunction, here I could say print  \nand let's type in underscore Kevin and \nthen I'll open and close my parentheses.\nSo right now, this will call the function. \nSo, when Python sees print Kevin,  \nit'll look up to this definition for \nKevin and then it'll execute this code.\nSo, let's click on run to see what happens.\nNow look at that. Kevin Stravert has a great \nchannel and it printed it out three times.\nOh, and look, there's that error in here.\nSo right up here, I could go to my function.\nI could add the T and then \nI can hit run and it looks  \nlike that's now successfully updated in all cases.\nNow I could go through, and I could \ncall this function multiple times.\nThis will really boost my ego.\nSo now when I hit run, look how many times \nit's printed out, Kevin has a great channel,  \nevery single time I reference this \nfunction, it'll go back up here,  \nit'll look at the function definition, and \nthen it'll run this code within that function.  \nWth a function, to be able to call the function, \nI first need to define it before I can call it.\nHere I'll remove these two \nreferences to the function  \nand so let's take the call of the \nfunction and I'll move it to the very top.\nSo here I call the function and then I define it.\nSo, if I hit run now here you get an error \nbecause here it says we'll print Kevin.\nWell, it doesn't know about that function \nyet because it comes up later on in the code.\nSo once again, I need to make sure I call \nthis function after I've defined my function.\nSo typically in code, you'll see all \nthe different definitions or all of the  \ndifferent definitions of the functions at the top.\nOne of the neat things too about \nusing Visual Studio Code is here  \nwhen I click over in the function and I \nhover over, I can collapse this function.\nSo let's say I'm writing code and I want to have a \nwhole bunch of functions that do different things.\nI can collapse it and then that way it \nclears up my view a little bit and here  \nI could expand it if I need to jump into this \nfunction and update any of the code within.  \nWith this one function that I defined on \ntop, currently I don't pass anything into  \nthe function and I also don't get \nanything back from the function.\nIf you remember the print \nexample, here with print,  \nI'm passing in certain text that I want to print.\nSo basically, I'm sending in \nan argument or a parameter,  \nand I can do the same when I create a function.\nSo, let's say instead of entering the text here \nwithin the function, let me actually get rid of  \nthis line right here, and right up here as part \nof my function definition, I'll type in text.\nSo, as I define my function, it's \nexpecting me to pass in some value.\nSo, let's now go down here and look at the \nposition where I'm calling my function.\nIt says print Kevin and here I can now pass \nin a value or basically pass in a parameter.\nSo, I'll type in Kevin \nStratvert has a great channel.\nSo here you'll see as I call this function, \nit's passing in this parameter or this argument.\nWhen I pass this in, here in the definition, it \nsays it's expecting some text to be passed in  \nand down below the print is taking that \ntext that I pass into this function.\nSo now when I hit run, here \nyou'll see the same result.\nKevin Stratvert has a great channel  \nand this is just an example of how you \ncan pass values into your function.\nNext, I want to show you how we can \nput an if statement within a function.\nSo here again I'll type in def.\nThis will define my function and I'm \ngoing to call this school age calculator.\nSo, I want to basically \ndetermine based on a child's age,  \nwhere should they be in school, and \nI want to get two different values.\nI want to get the child's age, \nso I'll type in age as one of the  \nparameters or arguments I want to get, \nand I also want the name of the child.\nNow, just like we did before, let's put in \na colon here and then let's press enter.\nHere once again, you'll see that \nit automatically indents me and  \nso that shows that whatever code I \nwrite here is part of this function.\nNow I want to insert my if statement, so I'm going \nto check first off if the age is less than five.\nOnce again, I'll insert the colon, and when I \npress enter, here it indents me even more so.\nNow I'm within this if statement,  \nso if this evaluates to true, \nwe're going to execute this code.\nIf it's true, I want to display some text, \nso here I'll call the print function.  \nHere I'll open it up and maybe \nI show some text that says  \nenjoy the time. You're still a young \nguy, you don't need to be in school yet.\nSo I've typed in some text. Now earlier \nwe've just been printing out text,  \nbut I can also print out \nvariables together with text.\nSo here I could enter a comma \nand then I'll type in the name.\nHere I'll type in another comma and let \nme enter in quotes again, and I'll say  \nis only, here I'll enter another comma, \nand then I'll type in the variable age.\nSo here you can see what it'll do, let's \nsay the age is 3 and the name is Thomas.\nIt'll say enjoy the time, Thomas is only three, \nso that's what will display if he's under 5.\nLet me hit enter and here now I \nwant to enter another condition,  \nso I'll hit back space so I go back, and \nhere I'll enter elif, basically else if  \nand I want to say if age let's \nsay, is equivalent to five,  \nthen I'll enter the colon and here maybe I'll say \nenjoy kindergarten, and then I'll show the name.\nSo here I'll type in print and \nthen I'll open the parentheses  \nand I'll type in the quotes and \nhere we'll say enjoy kindergarten,  \nand here I'll type in a comma and let me type in \nanother comma here and then I'll display the name.\nSo here it'll say enjoy kindergarten, Thomas.\nAnd lastly, I want to add one more condition, \nso I'll hit enter, backspace, and here I can  \nsay else, colon, and here, maybe I'll say print \nand this one, I'll just display text and I'll  \nsay they grow up so fast exclamation mark. \nI've now finished defining my function and I  \nhave all of the different conditions within \nthe function, so here I could enter down,  \nand I'll press backspace twice, so I exit out \nof both the conditions and also the function.\nSo now here I can call my function. So,  \nI'll call school age calculator and here \nI need to pass in two different values.\nI'll pass in the age, I'll enter a comma, \nand then I'll type in the name, Thomas.\nSo now if I run this, here you'll see that it \ncalls the function and then it goes through  \nall of these different conditions, and so here, \nwhile Thomas is less than five, he's only three,  \nso it says enjoy the time, Thomas is \nonly three, and here we can test it out,  \nhere I'll change it to five, and if I run \nit here, it says enjoy kindergarten, Thomas,  \nand let's say Thomas is now 10, and I'll run \nit, and here it says they grow up so fast.\nSo here now you see how we can call a function \nand here we pass in values into that function,  \nand it uses those values to run an if \nstatement and to evaluate which one is true.\nNext I want to show you how you can also \nget a parameter back from your function.\nSo so far, we've looked at how you could just run \na function on its own, how you could pass values  \ninto the function, and now we're going to look at \nhow you can get a value back from the function.\nI'm going to go through, let's remove this code \nright here, and let's start again from scratch.\nFor this one, it's just going \nto be a really simple example.\nI want to know what is your age going to be in \n10 years and we'll use a function to do this.\nSo here once again, let's define \na function by typing in def  \nand here the function name will be add ten to age.\nOnce I've typed in the function name,  \nhere I want to get one bit of input \ninto my function or one parameter.\nHere I'll type in the age, so \nsomeone will send in their age,  \nand then the function will add 10 to that age.\nAt the end of the definition of the \nfunction, let's enter a colon and hit enter.\nHere this automatically indents me and now right \nnow I want to figure out what the new age is.\nSo here I'll create a variable called New Age  \nand I want to set that equal to \nthe age that's being passed in.\nSo, I'll type in age and I'm going to add \n10 to it, and right underneath that now  \nonce the function runs through and it does \nits magic, I want to return that value,  \nso here I'll type in return, and I want to \nreturn the new age, so I'll select this.\nThis will send the value back or return the \nvalue once the function is done running.  \nHere now, I want to call my function, \nand when I call the function,  \nI can assign that return value to a variable.\nSo here maybe I create a new \nvariable called How old will  \nI be and I can set that equal to my function.\nSo here I'll call the function add ten to age  \nand here I want to pass in let's say my \nson who’s three, so I'll pass in three.\nSo once again, if I run this right \nnow, it won't actually do anything.\nIt's assigning the output, which is 13 to how \nold will I be, but now I need to print it out.\nSo right down here let me type in print and \nI'm going to print in how old will I be.\nAnd now if I hit run, here we'll \nsee that that comes back as 13.\nNow once again, just to see how this \nworks, here I'm saying how old will I be?\nThis is a variable and I'm assigning this value \nto it, which is basically my function of add  \nten to age, and I'm passing in three, so here \nit gets the age of three, it takes 3, adds 10,  \nit assigns its new age and once it's done running \nthrough the function, it returns the new age.\nSo, the new age is 13 and it assigns 13 to how \nold will I be and then here it prints out 13.\nSo that's how it works, and that's how you can \nget or you could return a value from a function.\nNext, we're going to look \nat how you can use loops.\nWhat is a loop?\nBasically, it allows you to execute a block of \ncode multiple times, so think of it this way.\nEvery single week my wife \ncomes to me and says, Kevin,  \ncan you take out the trash, and \nshe asks me that every single week.\nSo, in a sense, that's kind of like a loop.\nAll right, let's jump on the PC and let's \nsee how we can create a loop in Python.\nSo, let's now create a loop and there \nare two different types of loops.\nOne of them is called a while loop and \nthe other one is called a for loop.\nWe're going to start with a while loop, \nand it's actually pretty easy to do.\nI'm going to create a variable, just call \nit X and I'll assign it the value of 0.\nAnd so here now I can type in a while loop.\nSo, I'll say, let's say while and \nlet's say X is less than five.\nSo, while this value is less than five, I want it \nto execute some code, so here I'll insert a colon.\nWe do this with our if \nstatements, with our functions.\nHere when I hit enter now, it automatically \nindents me, so I'm now within the loop.\nAnd here I could just say let's say print X, so \nI'll enter that in and then right after I print X,  \nI want to make sure I increment X, \notherwise it will be an infinite loop.\nSo here I'll type in X = X + 1, \njust a really simple example.\nWe start out at zero and here it \nwill say if X is less than five,  \nin which case it starts at zero. It is, so \nthen it prints X, and then we add one. So  \nnow X is 1 and X is still less than five, \nso it'll keep executing until it reaches 4.\nSo, let's run this to see how it works. So \nhere it prints out 01234 and then once X = 5,  \nwell, it's no longer less than five, so \nthen we exit our loop and it's all done.\nNote, that's the basics of how you \ncan create just a very simple loop.\nThere's also another loop called a for loop, so \nI'll go down right here and let's type in for.\nAnd this is also pretty simple. Here I can type \nin for and let's say 4 X in range, let's say five  \nthrough 10, and then here \nI'll close the parentheses,  \nenter a colon, and here too, \nI'll print the value of X.\nLet me delete the code up above, and here \nwhat it'll do is it'll go through that range,  \nso when I hit run here, you see that it starts \nat 5 and it goes all the way up until 10,  \nbut it doesn't include 10, so this is \nanother form of a loop that you can use.\nYou can do some pretty neat things with loops. \nHere for example, I have the variable days and  \nI have an array assigned to it and \nthese are just all the days of the week.  \nHere I can use a for loop to write out all the \ndays of the week, so here I could say for d,  \nhere I'm creating a variable, and I'll say in \ndays, so here I'm looking at this variable.\nHere I'll insert a colon and maybe I just want to \nprint out the value of d. So, as it goes through  \neach day of the week, and here I can enter run \nand here it'll go through the variable of days,  \nand here it prints out every single \nday of the week, so that's pretty cool.\nNow, one of the neat things too is you can start \nusing some of the logic that we learned up above  \nin your loops, so let's say that I want \nto know what are all of the days before  \nThursday, and once we hit \nThursday, I want you to stop.  \nHere I can insert an if statement, so I'll say \nif and let's say if d is equivalent to let's say  \nThursday, so I'll type in Thursday, and at this \npoint I want it to stop. So I'll type in break.\nSo here if we click on run, here you'll \nsee it goes through Monday, Tuesday,  \nWednesday and then it looks like it hits \nThursday, and at that point we stop the loop.\nSo, at that point we break,  \nand we no longer print any of the other days. \nWith loops, we can also skip over items.\nSo, let's say that once we get to Thursday, I \ndon't want it to include Thursday in the list,  \nbut I still want it to continue \nand look at Friday, Saturday,  \nand Sunday. Instead of using break, \nI can use something called continue.\nSo now when I run the code, here \nyou'll see Monday, Tuesday, Wednesday,  \nand then it found Thursday, and we \nsimply want to skip over that item.\nSo, we added continue.\nSo here you see it skips over and then \nwe get Friday, Saturday and Sunday.\nSo once again you can use logic in your loops.\nYou could also have it break and \ncontinue. So far throughout this video,  \nwe've been looking at some of the fundamentals, \nand we've been writing all of our own code;  \nhowever, one thing you can do is you can \nbuild on top of what others have already done  \nusing libraries and also modules, and there are \nlots of fantastic libraries that you can use.\nLet's say for instance that we \nwant to print out the value of Pi.\nIt turns out there's an \nexisting library called math.\nWe could simply type in import and type in math,  \nand right beneath that, let's use our standard \nprint function, and here I'll type in print.\nAnd why don't we say something like pi is,  \nand then I'll insert a comma and here now I can \nrefer to the math library and I'll type in .pi.\nSo, I want to get the pi value back  \nand here as I'm typing that out, you'll see \nall sorts of suggestions of what I could use.\nSo here when I click on run now, \nhere it'll print out the value of pi.\nSo once again, when you're programming, you don't \nnecessarily have to write everything on your own.\nInstead, you can build on top of what others \nhave done. If you were following along today,  \nyou might have occasionally run into different \nerrors as you were trying to execute your code  \nand they can really be a pain to resolve.\nI want to go through three of the key errors that \nyou might run into and how you can resolve them.\nSo, let's take one example.\nHere I'm going to type in print, \nand I'll type in Hello World.\nNow if you've been following along, you probably \nknow that every time I type in this function,  \nand I type in text, I need to include my \nquotes around this, but I haven't done that.\nWhen I hit run right now, here I get an error,  \nand this is referred to as a syntax error \nand the reason why is, I didn't follow  \nthe rules of the print function, or I \ndidn't follow the syntax rules for Python.\nThe best way to troubleshoot these \nis to simply look through your code  \nto find out where the error might be.\nSo here I get name error \nhello world is not defined.\nSo here it thinks hello world is a variable.\nSo, this is one way where you can look at the \nerror message down here and that'll help you  \ntroubleshoot up above what the problem is. Now you \nmight run into another type of error, let's say I  \ntake 10 / 0 and then I try to run this, and we all \nknow that you can't divide by zero. Right here I  \nget a zero-division error division by zero. This \nis referred to as a runtime error. It just fails.\nNow you could look down here at the error \nmessage to see what it was and that might  \nhelp you troubleshoot where the problem is in your \ncode, and typically when you get an error message,  \nyou could go to something like stackoverflow.com \nand you can look up your error message to see  \nif other people have encountered similar errors \nand that'll help you get down to the root cause.  \nAnd lastly, there's another type \nof error that you might encounter.\nLet's say I type in name equals. Let's say Kevin,  \njust like we did earlier and here now, let's \nsay I want to print, and I'll say hello name.\nSo, let's say I want to print the \nname that I assigned to this variable.\nHere let me insert the \nparentheses and then I'll hit run.\nSo down here, it just says hello name, and it's \nnot printing out Kevin. Now these errors here  \nthese are referred to as semantic errors and \nthese are notoriously hard to troubleshoot and  \nthe reason why is because everything is working \nas it should based on how you programmed it.\nBut you're not getting the expected result.\nSo, for these you typically have to sit \ndown, look through your code, evaluate  \nis everything working how it should, \nso these will tend to take more time.\nAll right, well that now brings \nus to the end of this video.\nHopefully by now you understand the \nfundamentals of programming using Python.\nIf you enjoyed this video, please give it \na thumbs up. Also, if you enjoyed this and  \nmaybe you'd like to see more content like this \nin the future, please consider subscribing.\nAlso, if you have any feedback or if you want to \nsee me cover any other video topics in the future,  \nplease leave a comment down below.\nAll right, well that's all I had for you today,  \nI hope you enjoyed and as always, \nI hope to see you next time, bye.\n",
  "words": [
    "hey",
    "everyone",
    "kevin",
    "today",
    "want",
    "show",
    "fundamentals",
    "programming",
    "using",
    "python",
    "video",
    "going",
    "assume",
    "programming",
    "background",
    "going",
    "start",
    "basics",
    "going",
    "work",
    "way",
    "get",
    "little",
    "bit",
    "advanced",
    "end",
    "video",
    "able",
    "write",
    "source",
    "code",
    "run",
    "exciting",
    "going",
    "start",
    "well",
    "even",
    "learn",
    "program",
    "python",
    "many",
    "different",
    "programming",
    "languages",
    "choose",
    "python",
    "going",
    "start",
    "even",
    "get",
    "python",
    "write",
    "code",
    "go",
    "things",
    "like",
    "operators",
    "variables",
    "create",
    "function",
    "even",
    "jump",
    "things",
    "like",
    "creating",
    "statement",
    "creating",
    "loops",
    "code",
    "run",
    "execute",
    "certain",
    "condition",
    "met",
    "even",
    "leverage",
    "others",
    "code",
    "importing",
    "libraries",
    "python",
    "end",
    "solid",
    "understanding",
    "get",
    "started",
    "programming",
    "think",
    "course",
    "give",
    "essential",
    "tools",
    "want",
    "jump",
    "around",
    "video",
    "included",
    "timestamps",
    "jump",
    "section",
    "interests",
    "get",
    "started",
    "might",
    "wondering",
    "well",
    "even",
    "learn",
    "program",
    "going",
    "benefit",
    "well",
    "anytime",
    "go",
    "phone",
    "anytime",
    "go",
    "pc",
    "experiencing",
    "output",
    "something",
    "someone",
    "programmed",
    "realizing",
    "benefit",
    "think",
    "way",
    "program",
    "allows",
    "take",
    "maybe",
    "idea",
    "head",
    "turn",
    "series",
    "steps",
    "computer",
    "understand",
    "execute",
    "cool",
    "example",
    "maybe",
    "game",
    "want",
    "create",
    "maybe",
    "want",
    "create",
    "application",
    "work",
    "help",
    "simplify",
    "daily",
    "basis",
    "programming",
    "things",
    "incredibly",
    "powerful",
    "skill",
    "learn",
    "use",
    "ok",
    "want",
    "learn",
    "program",
    "python",
    "many",
    "different",
    "programming",
    "languages",
    "c",
    "c",
    "sharp",
    "java",
    "javascript",
    "php",
    "list",
    "goes",
    "well",
    "recently",
    "youtube",
    "channel",
    "asked",
    "programming",
    "language",
    "want",
    "learn",
    "overwhelmingly",
    "far",
    "away",
    "python",
    "clear",
    "winner",
    "something",
    "like",
    "65",
    "wanted",
    "python",
    "kind",
    "makes",
    "sense",
    "look",
    "lists",
    "popular",
    "programming",
    "languages",
    "python",
    "tends",
    "right",
    "near",
    "top",
    "around",
    "also",
    "pretty",
    "easy",
    "use",
    "also",
    "understand",
    "code",
    "using",
    "python",
    "tends",
    "concise",
    "programming",
    "language",
    "also",
    "good",
    "general",
    "purpose",
    "programming",
    "language",
    "mean",
    "write",
    "sorts",
    "applications",
    "maybe",
    "want",
    "write",
    "web",
    "app",
    "internal",
    "company",
    "tool",
    "game",
    "maybe",
    "want",
    "conduct",
    "scientific",
    "analysis",
    "python",
    "things",
    "learn",
    "today",
    "related",
    "python",
    "take",
    "concepts",
    "apply",
    "programming",
    "languages",
    "well",
    "really",
    "fundamentally",
    "want",
    "take",
    "idea",
    "want",
    "turn",
    "series",
    "steps",
    "computer",
    "execute",
    "sense",
    "kind",
    "like",
    "different",
    "language",
    "spoken",
    "language",
    "english",
    "say",
    "hello",
    "german",
    "say",
    "hallo",
    "french",
    "try",
    "best",
    "say",
    "bonjour",
    "communicate",
    "idea",
    "saying",
    "hello",
    "slightly",
    "different",
    "way",
    "saying",
    "speaking",
    "programming",
    "language",
    "different",
    "syntaxes",
    "also",
    "different",
    "rules",
    "end",
    "day",
    "simply",
    "trying",
    "communicate",
    "something",
    "computer",
    "want",
    "computer",
    "something",
    "course",
    "programming",
    "language",
    "might",
    "strengths",
    "weaknesses",
    "really",
    "accomplishing",
    "objective",
    "right",
    "jump",
    "pc",
    "let",
    "get",
    "started",
    "python",
    "pc",
    "first",
    "want",
    "check",
    "already",
    "python",
    "installed",
    "windows",
    "10",
    "simply",
    "go",
    "taskbar",
    "within",
    "search",
    "field",
    "type",
    "command",
    "prompt",
    "type",
    "command",
    "prompt",
    "click",
    "best",
    "match",
    "opens",
    "command",
    "prompt",
    "check",
    "python",
    "simply",
    "type",
    "python",
    "type",
    "version",
    "python",
    "installed",
    "tell",
    "version",
    "python",
    "see",
    "typed",
    "says",
    "python",
    "found",
    "need",
    "go",
    "install",
    "python",
    "already",
    "skip",
    "next",
    "step",
    "python",
    "like",
    "stick",
    "around",
    "show",
    "get",
    "python",
    "get",
    "python",
    "head",
    "website",
    "drop",
    "python",
    "home",
    "page",
    "right",
    "near",
    "top",
    "see",
    "button",
    "right",
    "downloads",
    "click",
    "identify",
    "operating",
    "system",
    "recommend",
    "best",
    "option",
    "however",
    "different",
    "os",
    "also",
    "choose",
    "running",
    "windows",
    "today",
    "download",
    "python",
    "currently",
    "recent",
    "version",
    "watching",
    "video",
    "maybe",
    "months",
    "could",
    "even",
    "recent",
    "version",
    "go",
    "ahead",
    "download",
    "whichever",
    "one",
    "recommends",
    "click",
    "download",
    "kicked",
    "download",
    "process",
    "finish",
    "downloading",
    "click",
    "exe",
    "opens",
    "install",
    "prompt",
    "right",
    "could",
    "install",
    "however",
    "option",
    "right",
    "bottom",
    "says",
    "add",
    "python",
    "path",
    "let",
    "check",
    "box",
    "click",
    "install",
    "runs",
    "installation",
    "process",
    "looks",
    "like",
    "setup",
    "successful",
    "going",
    "click",
    "close",
    "let",
    "go",
    "like",
    "type",
    "command",
    "prompt",
    "launch",
    "command",
    "prompt",
    "type",
    "python",
    "hit",
    "enter",
    "see",
    "python",
    "installed",
    "python",
    "ok",
    "verified",
    "python",
    "successfully",
    "installed",
    "let",
    "close",
    "command",
    "prompt",
    "let",
    "go",
    "taskbar",
    "except",
    "time",
    "let",
    "type",
    "python",
    "see",
    "best",
    "match",
    "python",
    "see",
    "python",
    "let",
    "click",
    "opens",
    "python",
    "terminal",
    "zoom",
    "little",
    "bit",
    "little",
    "bit",
    "easier",
    "see",
    "type",
    "code",
    "directly",
    "python",
    "interpret",
    "example",
    "type",
    "1",
    "2",
    "put",
    "question",
    "mark",
    "let",
    "hit",
    "enter",
    "work",
    "see",
    "something",
    "says",
    "syntax",
    "error",
    "invalid",
    "syntax",
    "syntax",
    "rules",
    "programming",
    "language",
    "typed",
    "1",
    "2",
    "align",
    "python",
    "expecting",
    "need",
    "type",
    "valid",
    "expression",
    "python",
    "programming",
    "language",
    "understands",
    "instead",
    "typing",
    "1",
    "2",
    "well",
    "could",
    "type",
    "1",
    "type",
    "2",
    "hit",
    "enter",
    "gives",
    "3",
    "back",
    "valid",
    "expression",
    "python",
    "programming",
    "language",
    "neat",
    "type",
    "something",
    "python",
    "like",
    "1",
    "2",
    "python",
    "takes",
    "line",
    "code",
    "enter",
    "1",
    "2",
    "interprets",
    "evaluates",
    "gave",
    "programming",
    "languages",
    "compile",
    "first",
    "execute",
    "python",
    "interpret",
    "going",
    "typed",
    "basic",
    "expression",
    "evaluated",
    "try",
    "function",
    "called",
    "print",
    "could",
    "type",
    "print",
    "going",
    "open",
    "parentheses",
    "insert",
    "double",
    "quotes",
    "type",
    "hello",
    "world",
    "close",
    "quotes",
    "close",
    "parentheses",
    "one",
    "go",
    "examples",
    "anytime",
    "starting",
    "new",
    "programming",
    "language",
    "hello",
    "world",
    "testing",
    "hit",
    "enter",
    "says",
    "hello",
    "world",
    "sending",
    "back",
    "exactly",
    "sent",
    "function",
    "go",
    "throughout",
    "programs",
    "going",
    "get",
    "little",
    "bit",
    "complex",
    "showing",
    "basics",
    "already",
    "start",
    "executing",
    "code",
    "exit",
    "python",
    "terminal",
    "click",
    "x",
    "symbol",
    "type",
    "another",
    "function",
    "called",
    "exit",
    "open",
    "parentheses",
    "close",
    "parentheses",
    "hit",
    "enter",
    "close",
    "terminal",
    "window",
    "executed",
    "first",
    "code",
    "directly",
    "python",
    "terminal",
    "also",
    "use",
    "text",
    "editor",
    "write",
    "code",
    "windows",
    "text",
    "editor",
    "called",
    "notepad",
    "go",
    "taskbar",
    "search",
    "field",
    "type",
    "notepad",
    "click",
    "right",
    "opens",
    "notepad",
    "zoom",
    "little",
    "bit",
    "probably",
    "never",
    "knew",
    "write",
    "source",
    "code",
    "notepad",
    "actually",
    "pretty",
    "powerful",
    "app",
    "right",
    "like",
    "previous",
    "example",
    "type",
    "print",
    "open",
    "parentheses",
    "put",
    "quote",
    "type",
    "hello",
    "world",
    "close",
    "quotes",
    "close",
    "parentheses",
    "source",
    "code",
    "written",
    "notepad",
    "course",
    "want",
    "able",
    "run",
    "need",
    "save",
    "appropriate",
    "file",
    "type",
    "go",
    "file",
    "menu",
    "go",
    "save",
    "opens",
    "save",
    "prompt",
    "maybe",
    "call",
    "file",
    "let",
    "call",
    "hello",
    "world",
    "leave",
    "save",
    "basically",
    "standard",
    "text",
    "document",
    "want",
    "python",
    "file",
    "turns",
    "extension",
    "python",
    "like",
    "extension",
    "text",
    "files",
    "python",
    "type",
    "depending",
    "programming",
    "language",
    "using",
    "different",
    "programming",
    "languages",
    "different",
    "extensions",
    "example",
    "javascript",
    "every",
    "language",
    "extension",
    "typed",
    "save",
    "desktop",
    "click",
    "save",
    "see",
    "file",
    "desktop",
    "called",
    "hello",
    "world",
    "also",
    "notice",
    "python",
    "logo",
    "installed",
    "python",
    "correctly",
    "identifies",
    "file",
    "sees",
    "python",
    "file",
    "let",
    "test",
    "see",
    "run",
    "source",
    "code",
    "wrote",
    "taskbar",
    "let",
    "type",
    "command",
    "prompt",
    "like",
    "earlier",
    "let",
    "open",
    "command",
    "prompt",
    "adjusted",
    "command",
    "prompt",
    "little",
    "bit",
    "easier",
    "see",
    "want",
    "run",
    "file",
    "command",
    "prompt",
    "let",
    "type",
    "python",
    "let",
    "computer",
    "know",
    "python",
    "file",
    "want",
    "run",
    "put",
    "space",
    "take",
    "python",
    "file",
    "simply",
    "drag",
    "drop",
    "command",
    "prompt",
    "really",
    "cool",
    "trick",
    "get",
    "location",
    "file",
    "simply",
    "dragging",
    "dropping",
    "basically",
    "saying",
    "want",
    "execute",
    "python",
    "file",
    "next",
    "click",
    "enter",
    "see",
    "prints",
    "hello",
    "world",
    "command",
    "prompt",
    "exactly",
    "wanted",
    "python",
    "went",
    "interpreted",
    "code",
    "file",
    "printed",
    "screen",
    "know",
    "basics",
    "writing",
    "running",
    "python",
    "code",
    "congratulations",
    "wrote",
    "first",
    "bit",
    "source",
    "code",
    "also",
    "ran",
    "making",
    "good",
    "progress",
    "far",
    "writing",
    "code",
    "text",
    "editor",
    "like",
    "notepad",
    "running",
    "works",
    "perfectly",
    "fine",
    "efficient",
    "way",
    "write",
    "code",
    "want",
    "give",
    "parallel",
    "example",
    "let",
    "say",
    "maybe",
    "writing",
    "document",
    "school",
    "could",
    "write",
    "document",
    "notepad",
    "course",
    "downsides",
    "spell",
    "check",
    "grammar",
    "check",
    "ca",
    "formatting",
    "although",
    "going",
    "require",
    "lot",
    "work",
    "concept",
    "also",
    "applies",
    "programming",
    "sure",
    "could",
    "write",
    "code",
    "notepad",
    "get",
    "called",
    "ide",
    "stands",
    "integrated",
    "development",
    "environment",
    "make",
    "writing",
    "code",
    "lot",
    "efficient",
    "also",
    "easy",
    "moments",
    "see",
    "sorts",
    "ides",
    "choose",
    "apple",
    "xcode",
    "android",
    "android",
    "studio",
    "ruby",
    "rubymine",
    "also",
    "another",
    "one",
    "called",
    "visual",
    "studio",
    "code",
    "works",
    "well",
    "python",
    "product",
    "made",
    "microsoft",
    "course",
    "like",
    "used",
    "work",
    "microsoft",
    "great",
    "thing",
    "visual",
    "studio",
    "code",
    "entirely",
    "free",
    "let",
    "go",
    "visual",
    "studio",
    "code",
    "let",
    "get",
    "ide",
    "get",
    "visual",
    "studio",
    "code",
    "head",
    "website",
    "land",
    "homepage",
    "choose",
    "operating",
    "system",
    "click",
    "drop",
    "get",
    "mac",
    "windows",
    "linux",
    "supports",
    "different",
    "major",
    "operating",
    "systems",
    "running",
    "windows",
    "today",
    "click",
    "download",
    "windows",
    "go",
    "stable",
    "build",
    "download",
    "completes",
    "bottom",
    "corner",
    "click",
    "exe",
    "opens",
    "setup",
    "process",
    "agree",
    "click",
    "accept",
    "agreement",
    "click",
    "next",
    "go",
    "default",
    "location",
    "click",
    "next",
    "get",
    "screen",
    "says",
    "select",
    "additional",
    "tasks",
    "recommend",
    "checking",
    "different",
    "boxes",
    "next",
    "let",
    "go",
    "click",
    "next",
    "last",
    "screen",
    "let",
    "click",
    "install",
    "go",
    "install",
    "visual",
    "studio",
    "code",
    "computer",
    "done",
    "installing",
    "let",
    "click",
    "finish",
    "launch",
    "visual",
    "studio",
    "code",
    "drops",
    "us",
    "visual",
    "studio",
    "code",
    "default",
    "land",
    "welcome",
    "screen",
    "ever",
    "want",
    "get",
    "back",
    "screen",
    "click",
    "help",
    "menu",
    "click",
    "welcome",
    "drop",
    "right",
    "things",
    "want",
    "start",
    "writing",
    "code",
    "visual",
    "studio",
    "code",
    "side",
    "icon",
    "extensions",
    "let",
    "click",
    "opens",
    "extensions",
    "search",
    "field",
    "type",
    "python",
    "want",
    "install",
    "python",
    "extension",
    "type",
    "see",
    "python",
    "top",
    "click",
    "see",
    "python",
    "microsoft",
    "something",
    "30",
    "million",
    "downloads",
    "right",
    "yet",
    "install",
    "extension",
    "going",
    "need",
    "click",
    "install",
    "make",
    "sure",
    "add",
    "finish",
    "installing",
    "extension",
    "also",
    "want",
    "select",
    "python",
    "installed",
    "interpreter",
    "visual",
    "studio",
    "code",
    "really",
    "easy",
    "keyboard",
    "press",
    "control",
    "shift",
    "p",
    "time",
    "control",
    "shift",
    "p",
    "open",
    "screen",
    "right",
    "type",
    "python",
    "select",
    "interpreter",
    "allow",
    "us",
    "select",
    "interpreter",
    "want",
    "use",
    "remember",
    "notepad",
    "wrote",
    "code",
    "interprets",
    "code",
    "basically",
    "want",
    "tell",
    "visual",
    "studio",
    "code",
    "interpreter",
    "want",
    "use",
    "select",
    "option",
    "right",
    "choose",
    "interpreter",
    "see",
    "python",
    "installed",
    "moment",
    "ago",
    "select",
    "interpreter",
    "set",
    "start",
    "writing",
    "code",
    "visual",
    "studio",
    "code",
    "get",
    "started",
    "open",
    "hello",
    "world",
    "file",
    "created",
    "previously",
    "go",
    "file",
    "menu",
    "go",
    "open",
    "file",
    "opens",
    "file",
    "picker",
    "desktop",
    "see",
    "hello",
    "world",
    "file",
    "also",
    "see",
    "type",
    "file",
    "associated",
    "visual",
    "studio",
    "code",
    "visual",
    "studio",
    "code",
    "logo",
    "select",
    "file",
    "click",
    "open",
    "opened",
    "file",
    "recognize",
    "exactly",
    "wrote",
    "notepad",
    "except",
    "time",
    "open",
    "visual",
    "studio",
    "code",
    "start",
    "notice",
    "benefits",
    "using",
    "ide",
    "integrated",
    "development",
    "environment",
    "first",
    "line",
    "numbers",
    "add",
    "additional",
    "lines",
    "code",
    "get",
    "line",
    "numbers",
    "side",
    "notepad",
    "get",
    "also",
    "write",
    "function",
    "called",
    "print",
    "highlights",
    "different",
    "colors",
    "could",
    "identify",
    "context",
    "text",
    "printing",
    "function",
    "get",
    "different",
    "colors",
    "also",
    "hover",
    "print",
    "gives",
    "helpful",
    "suggestions",
    "type",
    "content",
    "enter",
    "within",
    "function",
    "make",
    "lot",
    "easier",
    "start",
    "writing",
    "code",
    "run",
    "code",
    "directly",
    "visual",
    "studio",
    "code",
    "simply",
    "go",
    "right",
    "click",
    "right",
    "option",
    "says",
    "run",
    "python",
    "file",
    "terminal",
    "select",
    "open",
    "terminal",
    "bottom",
    "screen",
    "see",
    "executed",
    "interpreted",
    "file",
    "prints",
    "hello",
    "world",
    "gives",
    "output",
    "code",
    "right",
    "along",
    "right",
    "clicking",
    "screen",
    "running",
    "python",
    "file",
    "terminal",
    "also",
    "go",
    "top",
    "corner",
    "click",
    "play",
    "icon",
    "also",
    "run",
    "python",
    "file",
    "terminal",
    "click",
    "ran",
    "file",
    "see",
    "hello",
    "world",
    "another",
    "way",
    "probably",
    "little",
    "bit",
    "easier",
    "see",
    "output",
    "code",
    "know",
    "basics",
    "start",
    "writing",
    "code",
    "run",
    "code",
    "want",
    "show",
    "start",
    "working",
    "operators",
    "work",
    "numbers",
    "going",
    "type",
    "directly",
    "terminal",
    "go",
    "terminal",
    "like",
    "earlier",
    "python",
    "terminal",
    "type",
    "type",
    "1",
    "2",
    "hit",
    "enter",
    "interprets",
    "code",
    "evaluates",
    "like",
    "saw",
    "earlier",
    "one",
    "things",
    "notice",
    "typed",
    "1",
    "2",
    "include",
    "spaces",
    "spaces",
    "whitespace",
    "impact",
    "calculation",
    "could",
    "also",
    "type",
    "1",
    "space",
    "type",
    "plus",
    "another",
    "space",
    "hit",
    "2",
    "hit",
    "enter",
    "also",
    "evaluates",
    "3",
    "using",
    "white",
    "space",
    "actually",
    "make",
    "code",
    "readable",
    "could",
    "type",
    "like",
    "include",
    "white",
    "space",
    "wo",
    "affect",
    "outcome",
    "python",
    "use",
    "standard",
    "operators",
    "right",
    "showed",
    "addition",
    "let",
    "say",
    "5",
    "2",
    "also",
    "subtraction",
    "evaluates",
    "3",
    "well",
    "could",
    "multiplication",
    "let",
    "say",
    "4",
    "multiplication",
    "enter",
    "asterisk",
    "multiplication",
    "symbol",
    "hit",
    "enter",
    "evaluates",
    "could",
    "also",
    "division",
    "take",
    "10",
    "5",
    "division",
    "division",
    "forward",
    "slash",
    "hit",
    "enter",
    "evaluates",
    "python",
    "let",
    "say",
    "start",
    "using",
    "multiple",
    "operators",
    "maybe",
    "adding",
    "multiplying",
    "python",
    "follows",
    "default",
    "order",
    "operations",
    "let",
    "say",
    "enter",
    "2",
    "2",
    "want",
    "multiply",
    "think",
    "evaluate",
    "2",
    "2",
    "4",
    "times",
    "5",
    "20",
    "2",
    "5",
    "10",
    "add",
    "2",
    "well",
    "hit",
    "enter",
    "evaluates",
    "12",
    "following",
    "default",
    "order",
    "operations",
    "multiplication",
    "comes",
    "addition",
    "ever",
    "heard",
    "pemdas",
    "please",
    "excuse",
    "dear",
    "aunt",
    "sally",
    "know",
    "order",
    "operations",
    "first",
    "evaluate",
    "whatever",
    "parentheses",
    "look",
    "exponents",
    "followed",
    "multiplication",
    "division",
    "order",
    "left",
    "right",
    "look",
    "addition",
    "subtraction",
    "also",
    "order",
    "left",
    "right",
    "could",
    "also",
    "enter",
    "expression",
    "get",
    "rid",
    "hello",
    "world",
    "say",
    "let",
    "print",
    "2",
    "click",
    "run",
    "see",
    "executes",
    "code",
    "thanks",
    "suggestion",
    "added",
    "list",
    "stay",
    "tuned",
    "cheers",
    "also",
    "evaluates",
    "want",
    "use",
    "exponent",
    "come",
    "let",
    "remove",
    "plus",
    "symbol",
    "enter",
    "2",
    "asterisks",
    "2",
    "power",
    "click",
    "play",
    "button",
    "evaluates",
    "four",
    "2",
    "2",
    "let",
    "say",
    "want",
    "2",
    "3rd",
    "evaluate",
    "comes",
    "also",
    "access",
    "floor",
    "operator",
    "let",
    "take",
    "example",
    "let",
    "say",
    "want",
    "calculate",
    "5",
    "2",
    "play",
    "right",
    "see",
    "remainder",
    "let",
    "say",
    "want",
    "know",
    "remainder",
    "want",
    "know",
    "many",
    "times",
    "goes",
    "without",
    "remainder",
    "also",
    "known",
    "floor",
    "could",
    "insert",
    "another",
    "forward",
    "slash",
    "could",
    "run",
    "tells",
    "let",
    "say",
    "want",
    "know",
    "remainder",
    "use",
    "modulus",
    "operator",
    "get",
    "rid",
    "forward",
    "slashes",
    "right",
    "type",
    "percent",
    "symbol",
    "hit",
    "go",
    "tells",
    "remainder",
    "entering",
    "numbers",
    "working",
    "numbers",
    "let",
    "say",
    "enter",
    "large",
    "number",
    "let",
    "say",
    "enter",
    "maybe",
    "could",
    "go",
    "could",
    "enter",
    "comma",
    "type",
    "zeros",
    "hit",
    "go",
    "notice",
    "print",
    "expect",
    "want",
    "use",
    "commas",
    "entering",
    "numbers",
    "instead",
    "enter",
    "number",
    "enter",
    "hit",
    "go",
    "prints",
    "exactly",
    "expect",
    "want",
    "use",
    "commas",
    "entering",
    "numbers",
    "entered",
    "numbers",
    "know",
    "little",
    "bit",
    "basics",
    "work",
    "numbers",
    "operators",
    "let",
    "start",
    "working",
    "text",
    "referred",
    "strings",
    "let",
    "say",
    "want",
    "print",
    "earlier",
    "printed",
    "hello",
    "world",
    "concept",
    "insert",
    "double",
    "quotes",
    "type",
    "click",
    "play",
    "icon",
    "see",
    "output",
    "surrounded",
    "double",
    "quotes",
    "instead",
    "using",
    "double",
    "quotes",
    "also",
    "use",
    "single",
    "quotes",
    "enter",
    "single",
    "quotes",
    "hit",
    "play",
    "see",
    "get",
    "output",
    "choose",
    "whether",
    "want",
    "use",
    "double",
    "quotes",
    "single",
    "quotes",
    "would",
    "want",
    "use",
    "one",
    "versus",
    "well",
    "actually",
    "single",
    "quote",
    "insert",
    "single",
    "quote",
    "one",
    "problems",
    "enter",
    "single",
    "quote",
    "thinks",
    "end",
    "string",
    "try",
    "run",
    "get",
    "syntax",
    "error",
    "instead",
    "use",
    "double",
    "quotes",
    "use",
    "double",
    "quotes",
    "end",
    "could",
    "use",
    "single",
    "quote",
    "middle",
    "run",
    "works",
    "properly",
    "let",
    "say",
    "wanted",
    "use",
    "double",
    "quotes",
    "within",
    "text",
    "well",
    "could",
    "surround",
    "single",
    "quotes",
    "way",
    "double",
    "quotes",
    "would",
    "show",
    "like",
    "saw",
    "whitespace",
    "impact",
    "code",
    "runs",
    "want",
    "insert",
    "space",
    "maybe",
    "insert",
    "space",
    "another",
    "space",
    "run",
    "code",
    "see",
    "get",
    "exact",
    "output",
    "using",
    "white",
    "space",
    "help",
    "make",
    "code",
    "readable",
    "going",
    "know",
    "basics",
    "working",
    "numbers",
    "also",
    "strings",
    "want",
    "make",
    "sure",
    "explain",
    "happening",
    "code",
    "well",
    "use",
    "something",
    "called",
    "comment",
    "let",
    "say",
    "code",
    "want",
    "explain",
    "someone",
    "bring",
    "code",
    "second",
    "line",
    "insert",
    "comment",
    "entering",
    "hash",
    "symbol",
    "number",
    "sign",
    "pound",
    "symbol",
    "enter",
    "say",
    "prints",
    "text",
    "typed",
    "comment",
    "let",
    "run",
    "see",
    "affect",
    "appears",
    "simply",
    "get",
    "like",
    "got",
    "could",
    "also",
    "take",
    "comment",
    "could",
    "put",
    "line",
    "code",
    "put",
    "code",
    "hit",
    "run",
    "see",
    "gives",
    "one",
    "neat",
    "things",
    "let",
    "say",
    "start",
    "writing",
    "lot",
    "code",
    "starting",
    "get",
    "fairly",
    "complex",
    "comment",
    "line",
    "code",
    "put",
    "hash",
    "symbol",
    "front",
    "code",
    "see",
    "turns",
    "green",
    "ide",
    "way",
    "telling",
    "comment",
    "hit",
    "run",
    "see",
    "get",
    "output",
    "commented",
    "line",
    "code",
    "could",
    "bring",
    "back",
    "removing",
    "run",
    "shows",
    "comments",
    "pretty",
    "valuable",
    "writing",
    "code",
    "let",
    "people",
    "know",
    "happening",
    "code",
    "different",
    "blocks",
    "code",
    "also",
    "use",
    "troubleshooting",
    "cancel",
    "certain",
    "areas",
    "code",
    "ready",
    "test",
    "next",
    "going",
    "look",
    "use",
    "variables",
    "easiest",
    "way",
    "explain",
    "variable",
    "use",
    "red",
    "bucket",
    "son",
    "let",
    "pretend",
    "red",
    "bucket",
    "variable",
    "name",
    "variable",
    "call",
    "red",
    "bucket",
    "keep",
    "things",
    "simple",
    "assign",
    "value",
    "variable",
    "let",
    "take",
    "instance",
    "let",
    "say",
    "want",
    "red",
    "bucket",
    "equal",
    "name",
    "kevin",
    "name",
    "take",
    "value",
    "assign",
    "variable",
    "say",
    "well",
    "red",
    "bucket",
    "well",
    "right",
    "red",
    "bucket",
    "currently",
    "kevin",
    "assigned",
    "value",
    "string",
    "basically",
    "name",
    "referred",
    "string",
    "set",
    "characters",
    "could",
    "assign",
    "types",
    "data",
    "variable",
    "well",
    "maybe",
    "say",
    "well",
    "actually",
    "want",
    "red",
    "bucket",
    "equal",
    "number",
    "maybe",
    "want",
    "equal",
    "going",
    "say",
    "red",
    "bucket",
    "equal",
    "8",
    "going",
    "take",
    "name",
    "going",
    "pull",
    "take",
    "number",
    "8",
    "put",
    "bucket",
    "ask",
    "well",
    "red",
    "bucket",
    "well",
    "currently",
    "number",
    "general",
    "concept",
    "variable",
    "variable",
    "hold",
    "different",
    "values",
    "let",
    "jump",
    "see",
    "use",
    "variables",
    "create",
    "variables",
    "rules",
    "need",
    "follow",
    "syntax",
    "python",
    "looks",
    "variable",
    "contain",
    "letters",
    "numbers",
    "underscores",
    "also",
    "need",
    "make",
    "sure",
    "start",
    "number",
    "ca",
    "use",
    "spaces",
    "variable",
    "name",
    "also",
    "ca",
    "use",
    "known",
    "keywords",
    "python",
    "like",
    "break",
    "try",
    "ideally",
    "want",
    "make",
    "sure",
    "variable",
    "name",
    "short",
    "descriptive",
    "work",
    "best",
    "example",
    "red",
    "bucket",
    "simply",
    "call",
    "red",
    "bucket",
    "pretty",
    "short",
    "also",
    "descriptive",
    "also",
    "variable",
    "names",
    "case",
    "sensitive",
    "wrote",
    "red",
    "bucket",
    "capital",
    "r",
    "another",
    "one",
    "lowercase",
    "r",
    "python",
    "would",
    "view",
    "separate",
    "variables",
    "case",
    "sensitivity",
    "matters",
    "ok",
    "let",
    "create",
    "first",
    "variable",
    "continuing",
    "example",
    "let",
    "say",
    "want",
    "variable",
    "called",
    "red",
    "bucket",
    "give",
    "name",
    "need",
    "assign",
    "value",
    "variable",
    "like",
    "bucket",
    "type",
    "type",
    "equal",
    "sign",
    "going",
    "assign",
    "value",
    "kevin",
    "name",
    "using",
    "single",
    "equals",
    "sign",
    "assign",
    "value",
    "variable",
    "could",
    "hit",
    "enter",
    "let",
    "run",
    "nothing",
    "shows",
    "yet",
    "assigned",
    "value",
    "variable",
    "next",
    "thing",
    "could",
    "actually",
    "print",
    "let",
    "say",
    "print",
    "let",
    "type",
    "red",
    "bucket",
    "nice",
    "using",
    "ide",
    "recognizes",
    "created",
    "variable",
    "called",
    "red",
    "bucket",
    "click",
    "click",
    "play",
    "icon",
    "print",
    "kevin",
    "printing",
    "value",
    "assigned",
    "red",
    "bucket",
    "let",
    "take",
    "another",
    "example",
    "let",
    "say",
    "add",
    "another",
    "line",
    "let",
    "copy",
    "first",
    "line",
    "paste",
    "second",
    "line",
    "want",
    "assign",
    "10",
    "red",
    "bucket",
    "start",
    "assigning",
    "kevin",
    "assign",
    "think",
    "print",
    "let",
    "click",
    "play",
    "icon",
    "prints",
    "reason",
    "well",
    "first",
    "assigns",
    "kevin",
    "red",
    "bucket",
    "current",
    "value",
    "next",
    "line",
    "code",
    "assigns",
    "10",
    "red",
    "bucket",
    "10",
    "overwrites",
    "kevin",
    "print",
    "red",
    "bucket",
    "taking",
    "last",
    "value",
    "assigned",
    "way",
    "think",
    "back",
    "bucket",
    "example",
    "put",
    "kevin",
    "bucket",
    "put",
    "10",
    "take",
    "kevin",
    "put",
    "10",
    "end",
    "ask",
    "well",
    "red",
    "bucket",
    "well",
    "number",
    "10",
    "red",
    "bucket",
    "last",
    "item",
    "put",
    "one",
    "thing",
    "really",
    "neat",
    "python",
    "defining",
    "variables",
    "assign",
    "variable",
    "type",
    "example",
    "red",
    "bucket",
    "assigned",
    "name",
    "also",
    "known",
    "string",
    "next",
    "assigned",
    "number",
    "integer",
    "go",
    "say",
    "well",
    "red",
    "bucket",
    "string",
    "red",
    "bucket",
    "integer",
    "automatically",
    "know",
    "data",
    "type",
    "assigning",
    "variable",
    "print",
    "type",
    "type",
    "open",
    "close",
    "parentheses",
    "around",
    "variable",
    "let",
    "run",
    "telling",
    "integer",
    "basically",
    "10",
    "assigned",
    "red",
    "bucket",
    "telling",
    "currently",
    "integer",
    "let",
    "get",
    "rid",
    "line",
    "right",
    "kevin",
    "assigned",
    "red",
    "bucket",
    "run",
    "see",
    "string",
    "data",
    "type",
    "assigned",
    "variable",
    "let",
    "say",
    "want",
    "get",
    "rid",
    "variable",
    "maybe",
    "need",
    "red",
    "bucket",
    "anymore",
    "type",
    "del",
    "basically",
    "delete",
    "delete",
    "variable",
    "type",
    "red",
    "bucket",
    "select",
    "suggestion",
    "let",
    "get",
    "rid",
    "type",
    "print",
    "want",
    "know",
    "red",
    "bucket",
    "run",
    "get",
    "error",
    "says",
    "red",
    "bucket",
    "defined",
    "makes",
    "sense",
    "created",
    "variable",
    "assigned",
    "value",
    "deleted",
    "variable",
    "try",
    "print",
    "variable",
    "variable",
    "anymore",
    "called",
    "red",
    "bucket",
    "deleted",
    "right",
    "next",
    "want",
    "show",
    "example",
    "request",
    "input",
    "take",
    "input",
    "assign",
    "variable",
    "right",
    "simply",
    "typed",
    "kevin",
    "assigned",
    "red",
    "bucket",
    "want",
    "allow",
    "input",
    "right",
    "let",
    "delete",
    "kevin",
    "delete",
    "name",
    "entered",
    "type",
    "input",
    "function",
    "open",
    "parentheses",
    "let",
    "type",
    "double",
    "quotes",
    "maybe",
    "ask",
    "question",
    "want",
    "put",
    "bucket",
    "enter",
    "question",
    "mark",
    "additional",
    "space",
    "right",
    "want",
    "delete",
    "variable",
    "get",
    "rid",
    "right",
    "going",
    "ask",
    "input",
    "print",
    "whatever",
    "input",
    "let",
    "click",
    "run",
    "icon",
    "run",
    "right",
    "says",
    "want",
    "put",
    "bucket",
    "maybe",
    "want",
    "put",
    "shovel",
    "click",
    "terminal",
    "type",
    "shovel",
    "hit",
    "enter",
    "prints",
    "shovel",
    "value",
    "red",
    "bucket",
    "variable",
    "next",
    "want",
    "show",
    "start",
    "using",
    "conditional",
    "logic",
    "code",
    "basically",
    "expression",
    "enter",
    "breaks",
    "either",
    "true",
    "false",
    "let",
    "take",
    "example",
    "go",
    "lines",
    "let",
    "enter",
    "print",
    "going",
    "ask",
    "5",
    "equal",
    "4",
    "one",
    "things",
    "notice",
    "ask",
    "question",
    "5",
    "equals",
    "4",
    "entered",
    "two",
    "equal",
    "signs",
    "typo",
    "entered",
    "one",
    "equal",
    "sign",
    "enter",
    "one",
    "enter",
    "two",
    "well",
    "taking",
    "value",
    "input",
    "assigning",
    "variable",
    "want",
    "run",
    "test",
    "equality",
    "basically",
    "want",
    "check",
    "two",
    "equal",
    "test",
    "check",
    "equality",
    "use",
    "two",
    "equal",
    "signs",
    "let",
    "remove",
    "code",
    "top",
    "simply",
    "going",
    "print",
    "5",
    "equal",
    "run",
    "see",
    "false",
    "5",
    "equal",
    "might",
    "saying",
    "well",
    "course",
    "5",
    "equal",
    "equal",
    "also",
    "check",
    "equal",
    "one",
    "another",
    "instead",
    "equal",
    "sign",
    "insert",
    "exclamation",
    "mark",
    "exclamation",
    "mark",
    "followed",
    "equal",
    "sign",
    "way",
    "asking",
    "computer",
    "5",
    "equal",
    "4",
    "think",
    "know",
    "true",
    "run",
    "get",
    "true",
    "back",
    "along",
    "equal",
    "equal",
    "many",
    "operators",
    "also",
    "use",
    "less",
    "greater",
    "greater",
    "equal",
    "less",
    "equal",
    "see",
    "symbol",
    "use",
    "different",
    "operations",
    "side",
    "see",
    "examples",
    "could",
    "use",
    "could",
    "insert",
    "one",
    "print",
    "statement",
    "get",
    "corresponding",
    "result",
    "take",
    "different",
    "operations",
    "combine",
    "variables",
    "learned",
    "let",
    "type",
    "example",
    "young",
    "son",
    "home",
    "name",
    "thomas",
    "three",
    "years",
    "old",
    "let",
    "create",
    "variable",
    "call",
    "thomas",
    "age",
    "currently",
    "equal",
    "three",
    "taking",
    "value",
    "three",
    "assigning",
    "variable",
    "let",
    "say",
    "want",
    "check",
    "well",
    "old",
    "enough",
    "kindergarten",
    "maybe",
    "type",
    "age",
    "type",
    "kindergarten",
    "maybe",
    "age",
    "kindergarten",
    "5",
    "enter",
    "equals",
    "5",
    "two",
    "different",
    "variables",
    "assigned",
    "value",
    "variables",
    "check",
    "equality",
    "maybe",
    "say",
    "print",
    "let",
    "check",
    "thomas",
    "age",
    "equivalent",
    "age",
    "kindergarten",
    "hit",
    "run",
    "see",
    "false",
    "basically",
    "thomas",
    "age",
    "coming",
    "back",
    "three",
    "age",
    "kindergarten",
    "5",
    "equal",
    "one",
    "another",
    "type",
    "check",
    "except",
    "could",
    "using",
    "variables",
    "expression",
    "simply",
    "checking",
    "thomas",
    "age",
    "equal",
    "age",
    "kindergarten",
    "comes",
    "back",
    "false",
    "want",
    "something",
    "little",
    "bit",
    "complex",
    "want",
    "check",
    "well",
    "thomas",
    "less",
    "age",
    "kindergarten",
    "well",
    "probably",
    "preschool",
    "daycare",
    "5",
    "kindergarten",
    "older",
    "five",
    "class",
    "right",
    "one",
    "check",
    "looking",
    "one",
    "point",
    "age",
    "kindergarten",
    "easiest",
    "way",
    "think",
    "like",
    "flow",
    "chart",
    "current",
    "age",
    "depending",
    "age",
    "one",
    "different",
    "scenarios",
    "could",
    "true",
    "wo",
    "able",
    "simple",
    "expression",
    "wrote",
    "checking",
    "one",
    "thing",
    "want",
    "check",
    "multiple",
    "different",
    "criteria",
    "use",
    "statement",
    "let",
    "jump",
    "back",
    "visual",
    "studio",
    "code",
    "let",
    "look",
    "use",
    "back",
    "visual",
    "studio",
    "going",
    "delete",
    "last",
    "line",
    "keep",
    "two",
    "variables",
    "one",
    "thomas",
    "age",
    "one",
    "age",
    "kindergarten",
    "enter",
    "lines",
    "white",
    "space",
    "matter",
    "worry",
    "could",
    "enter",
    "lines",
    "want",
    "enter",
    "statement",
    "statement",
    "really",
    "easy",
    "write",
    "simply",
    "type",
    "check",
    "first",
    "want",
    "know",
    "thomas",
    "age",
    "less",
    "age",
    "kindergarten",
    "type",
    "variable",
    "gives",
    "helpful",
    "suggestion",
    "using",
    "thomas",
    "age",
    "first",
    "check",
    "younger",
    "age",
    "kindergarten",
    "let",
    "enter",
    "age",
    "kindergarten",
    "going",
    "first",
    "check",
    "finish",
    "entering",
    "statement",
    "need",
    "enter",
    "colon",
    "hit",
    "enter",
    "drops",
    "next",
    "line",
    "one",
    "thing",
    "notice",
    "automatically",
    "indented",
    "line",
    "happen",
    "check",
    "turns",
    "thomas",
    "age",
    "less",
    "age",
    "kindergarten",
    "case",
    "thomas",
    "3",
    "age",
    "kindergarten",
    "5",
    "would",
    "true",
    "going",
    "evaluate",
    "code",
    "whatever",
    "code",
    "enter",
    "go",
    "execute",
    "let",
    "test",
    "let",
    "type",
    "print",
    "enter",
    "function",
    "maybe",
    "say",
    "something",
    "like",
    "thomas",
    "preschool",
    "finish",
    "typing",
    "go",
    "end",
    "line",
    "hit",
    "enter",
    "see",
    "continues",
    "indent",
    "basically",
    "type",
    "additional",
    "code",
    "whatever",
    "type",
    "indented",
    "space",
    "go",
    "execute",
    "code",
    "anything",
    "else",
    "want",
    "run",
    "simply",
    "want",
    "print",
    "message",
    "let",
    "test",
    "see",
    "works",
    "go",
    "click",
    "run",
    "get",
    "text",
    "says",
    "thomas",
    "preschool",
    "let",
    "say",
    "maybe",
    "thomas",
    "10",
    "thomas",
    "age",
    "10",
    "less",
    "age",
    "kindergarten",
    "run",
    "get",
    "nothing",
    "back",
    "evaluates",
    "comes",
    "back",
    "false",
    "execute",
    "code",
    "nothing",
    "else",
    "simply",
    "returns",
    "nothing",
    "let",
    "say",
    "want",
    "fall",
    "back",
    "let",
    "say",
    "false",
    "want",
    "say",
    "something",
    "else",
    "use",
    "else",
    "check",
    "check",
    "true",
    "turns",
    "false",
    "fall",
    "back",
    "else",
    "enter",
    "else",
    "colon",
    "indents",
    "could",
    "say",
    "well",
    "true",
    "execute",
    "block",
    "code",
    "maybe",
    "insert",
    "another",
    "print",
    "function",
    "let",
    "type",
    "print",
    "open",
    "parentheses",
    "let",
    "type",
    "thomas",
    "kindergarten",
    "another",
    "class",
    "typed",
    "else",
    "statement",
    "let",
    "try",
    "running",
    "see",
    "happen",
    "check",
    "first",
    "statement",
    "evaluates",
    "false",
    "fall",
    "back",
    "else",
    "let",
    "test",
    "hit",
    "run",
    "says",
    "thomas",
    "kindergarten",
    "another",
    "class",
    "logic",
    "working",
    "exactly",
    "expect",
    "right",
    "two",
    "conditions",
    "basically",
    "checked",
    "first",
    "condition",
    "false",
    "falls",
    "back",
    "one",
    "let",
    "say",
    "want",
    "check",
    "additional",
    "conditions",
    "enter",
    "let",
    "get",
    "block",
    "code",
    "hit",
    "backspace",
    "key",
    "right",
    "enter",
    "something",
    "called",
    "elif",
    "basically",
    "else",
    "go",
    "check",
    "number",
    "conditions",
    "start",
    "top",
    "finds",
    "one",
    "true",
    "display",
    "message",
    "exit",
    "false",
    "go",
    "next",
    "one",
    "check",
    "condition",
    "add",
    "number",
    "else",
    "ifs",
    "type",
    "elif",
    "maybe",
    "condition",
    "want",
    "know",
    "thomas",
    "5",
    "well",
    "kindergarten",
    "say",
    "thomas",
    "age",
    "want",
    "check",
    "equal",
    "age",
    "kindergarten",
    "remember",
    "enter",
    "one",
    "equal",
    "sign",
    "enter",
    "two",
    "enter",
    "variable",
    "age",
    "kindergarten",
    "going",
    "check",
    "true",
    "want",
    "evaluate",
    "code",
    "like",
    "entered",
    "colon",
    "let",
    "make",
    "sure",
    "enter",
    "colon",
    "end",
    "part",
    "python",
    "syntax",
    "hit",
    "enter",
    "automatically",
    "indents",
    "type",
    "print",
    "type",
    "text",
    "says",
    "enjoy",
    "kindergarten",
    "added",
    "else",
    "statement",
    "checks",
    "see",
    "kindergarten",
    "last",
    "statement",
    "longer",
    "makes",
    "sense",
    "say",
    "thomas",
    "kindergarten",
    "another",
    "class",
    "maybe",
    "simply",
    "remove",
    "say",
    "thomas",
    "another",
    "class",
    "catch",
    "end",
    "let",
    "test",
    "see",
    "works",
    "let",
    "say",
    "thomas",
    "3",
    "run",
    "case",
    "first",
    "condition",
    "true",
    "thomas",
    "preschool",
    "get",
    "text",
    "thomas",
    "preschool",
    "let",
    "say",
    "thomas",
    "equal",
    "five",
    "maybe",
    "five",
    "years",
    "old",
    "run",
    "first",
    "condition",
    "false",
    "skips",
    "one",
    "looks",
    "second",
    "condition",
    "elif",
    "thomas",
    "5",
    "age",
    "kindergarten",
    "get",
    "text",
    "saying",
    "enjoy",
    "kindergarten",
    "let",
    "say",
    "maybe",
    "thomas",
    "run",
    "evaluates",
    "first",
    "statement",
    "well",
    "older",
    "age",
    "kindergarten",
    "false",
    "age",
    "equal",
    "age",
    "kindergarten",
    "also",
    "false",
    "falls",
    "back",
    "else",
    "statement",
    "thomas",
    "another",
    "class",
    "tested",
    "working",
    "like",
    "expect",
    "next",
    "want",
    "show",
    "use",
    "functions",
    "python",
    "ever",
    "used",
    "programming",
    "language",
    "might",
    "know",
    "subroutine",
    "method",
    "thing",
    "going",
    "use",
    "functions",
    "actually",
    "already",
    "using",
    "function",
    "used",
    "print",
    "function",
    "right",
    "see",
    "using",
    "print",
    "multiple",
    "times",
    "function",
    "call",
    "function",
    "pass",
    "text",
    "prints",
    "screen",
    "basic",
    "example",
    "function",
    "already",
    "using",
    "cool",
    "thing",
    "create",
    "function",
    "function",
    "well",
    "basically",
    "block",
    "code",
    "package",
    "together",
    "name",
    "something",
    "case",
    "anytime",
    "call",
    "print",
    "input",
    "takes",
    "action",
    "depending",
    "function",
    "neat",
    "thing",
    "makes",
    "code",
    "modular",
    "also",
    "reusable",
    "example",
    "every",
    "time",
    "want",
    "print",
    "something",
    "screen",
    "simply",
    "call",
    "function",
    "takes",
    "action",
    "enter",
    "different",
    "code",
    "associated",
    "printing",
    "text",
    "screen",
    "simply",
    "rely",
    "function",
    "makes",
    "code",
    "lot",
    "reuseable",
    "let",
    "go",
    "create",
    "function",
    "right",
    "go",
    "delete",
    "code",
    "let",
    "say",
    "show",
    "value",
    "functions",
    "let",
    "enter",
    "print",
    "kevin",
    "stratvert",
    "great",
    "channel",
    "going",
    "enter",
    "three",
    "times",
    "figure",
    "say",
    "maybe",
    "sticks",
    "read",
    "might",
    "start",
    "believe",
    "typed",
    "three",
    "different",
    "times",
    "going",
    "run",
    "expand",
    "terminal",
    "could",
    "see",
    "printed",
    "three",
    "times",
    "oh",
    "actually",
    "look",
    "looks",
    "like",
    "spelled",
    "stratvert",
    "wrong",
    "stratvert",
    "middle",
    "say",
    "stravord",
    "using",
    "function",
    "well",
    "using",
    "print",
    "function",
    "created",
    "function",
    "print",
    "three",
    "times",
    "go",
    "correct",
    "every",
    "single",
    "stravert",
    "throughout",
    "code",
    "correct",
    "imagine",
    "referenced",
    "something",
    "many",
    "many",
    "many",
    "times",
    "code",
    "maybe",
    "make",
    "error",
    "need",
    "update",
    "something",
    "could",
    "pain",
    "go",
    "code",
    "update",
    "instead",
    "create",
    "function",
    "show",
    "create",
    "function",
    "print",
    "multiple",
    "times",
    "call",
    "whenever",
    "want",
    "ok",
    "let",
    "create",
    "function",
    "simply",
    "go",
    "lines",
    "create",
    "function",
    "type",
    "def",
    "basically",
    "stands",
    "define",
    "type",
    "def",
    "type",
    "name",
    "function",
    "going",
    "call",
    "function",
    "let",
    "say",
    "print",
    "kevin",
    "typed",
    "function",
    "name",
    "functions",
    "need",
    "parentheses",
    "end",
    "open",
    "parentheses",
    "close",
    "parentheses",
    "write",
    "like",
    "statement",
    "insert",
    "colon",
    "function",
    "hit",
    "enter",
    "key",
    "like",
    "statement",
    "see",
    "indents",
    "automatically",
    "indents",
    "code",
    "underneath",
    "part",
    "function",
    "next",
    "want",
    "enter",
    "code",
    "function",
    "maybe",
    "set",
    "variable",
    "call",
    "text",
    "let",
    "insert",
    "text",
    "quotes",
    "maybe",
    "say",
    "kevin",
    "stratvert",
    "great",
    "channel",
    "going",
    "text",
    "maybe",
    "make",
    "error",
    "right",
    "beneath",
    "could",
    "use",
    "print",
    "maybe",
    "say",
    "let",
    "print",
    "text",
    "want",
    "print",
    "three",
    "times",
    "insert",
    "three",
    "times",
    "right",
    "going",
    "delete",
    "earlier",
    "example",
    "function",
    "function",
    "run",
    "let",
    "try",
    "clicking",
    "run",
    "click",
    "run",
    "get",
    "nothing",
    "back",
    "reason",
    "right",
    "defined",
    "function",
    "actually",
    "called",
    "function",
    "defined",
    "happen",
    "call",
    "called",
    "yet",
    "go",
    "backspace",
    "block",
    "code",
    "associated",
    "function",
    "call",
    "function",
    "like",
    "called",
    "print",
    "function",
    "could",
    "say",
    "print",
    "let",
    "type",
    "underscore",
    "kevin",
    "open",
    "close",
    "parentheses",
    "right",
    "call",
    "function",
    "python",
    "sees",
    "print",
    "kevin",
    "look",
    "definition",
    "kevin",
    "execute",
    "code",
    "let",
    "click",
    "run",
    "see",
    "happens",
    "look",
    "kevin",
    "stravert",
    "great",
    "channel",
    "printed",
    "three",
    "times",
    "oh",
    "look",
    "error",
    "right",
    "could",
    "go",
    "function",
    "could",
    "add",
    "hit",
    "run",
    "looks",
    "like",
    "successfully",
    "updated",
    "cases",
    "could",
    "go",
    "could",
    "call",
    "function",
    "multiple",
    "times",
    "really",
    "boost",
    "ego",
    "hit",
    "run",
    "look",
    "many",
    "times",
    "printed",
    "kevin",
    "great",
    "channel",
    "every",
    "single",
    "time",
    "reference",
    "function",
    "go",
    "back",
    "look",
    "function",
    "definition",
    "run",
    "code",
    "within",
    "function",
    "wth",
    "function",
    "able",
    "call",
    "function",
    "first",
    "need",
    "define",
    "call",
    "remove",
    "two",
    "references",
    "function",
    "let",
    "take",
    "call",
    "function",
    "move",
    "top",
    "call",
    "function",
    "define",
    "hit",
    "run",
    "get",
    "error",
    "says",
    "print",
    "kevin",
    "well",
    "know",
    "function",
    "yet",
    "comes",
    "later",
    "code",
    "need",
    "make",
    "sure",
    "call",
    "function",
    "defined",
    "function",
    "typically",
    "code",
    "see",
    "different",
    "definitions",
    "different",
    "definitions",
    "functions",
    "top",
    "one",
    "neat",
    "things",
    "using",
    "visual",
    "studio",
    "code",
    "click",
    "function",
    "hover",
    "collapse",
    "function",
    "let",
    "say",
    "writing",
    "code",
    "want",
    "whole",
    "bunch",
    "functions",
    "different",
    "things",
    "collapse",
    "way",
    "clears",
    "view",
    "little",
    "bit",
    "could",
    "expand",
    "need",
    "jump",
    "function",
    "update",
    "code",
    "within",
    "one",
    "function",
    "defined",
    "top",
    "currently",
    "pass",
    "anything",
    "function",
    "also",
    "get",
    "anything",
    "back",
    "function",
    "remember",
    "print",
    "example",
    "print",
    "passing",
    "certain",
    "text",
    "want",
    "print",
    "basically",
    "sending",
    "argument",
    "parameter",
    "create",
    "function",
    "let",
    "say",
    "instead",
    "entering",
    "text",
    "within",
    "function",
    "let",
    "actually",
    "get",
    "rid",
    "line",
    "right",
    "right",
    "part",
    "function",
    "definition",
    "type",
    "text",
    "define",
    "function",
    "expecting",
    "pass",
    "value",
    "let",
    "go",
    "look",
    "position",
    "calling",
    "function",
    "says",
    "print",
    "kevin",
    "pass",
    "value",
    "basically",
    "pass",
    "parameter",
    "type",
    "kevin",
    "stratvert",
    "great",
    "channel",
    "see",
    "call",
    "function",
    "passing",
    "parameter",
    "argument",
    "pass",
    "definition",
    "says",
    "expecting",
    "text",
    "passed",
    "print",
    "taking",
    "text",
    "pass",
    "function",
    "hit",
    "run",
    "see",
    "result",
    "kevin",
    "stratvert",
    "great",
    "channel",
    "example",
    "pass",
    "values",
    "function",
    "next",
    "want",
    "show",
    "put",
    "statement",
    "within",
    "function",
    "type",
    "def",
    "define",
    "function",
    "going",
    "call",
    "school",
    "age",
    "calculator",
    "want",
    "basically",
    "determine",
    "based",
    "child",
    "age",
    "school",
    "want",
    "get",
    "two",
    "different",
    "values",
    "want",
    "get",
    "child",
    "age",
    "type",
    "age",
    "one",
    "parameters",
    "arguments",
    "want",
    "get",
    "also",
    "want",
    "name",
    "child",
    "like",
    "let",
    "put",
    "colon",
    "let",
    "press",
    "enter",
    "see",
    "automatically",
    "indents",
    "shows",
    "whatever",
    "code",
    "write",
    "part",
    "function",
    "want",
    "insert",
    "statement",
    "going",
    "check",
    "first",
    "age",
    "less",
    "five",
    "insert",
    "colon",
    "press",
    "enter",
    "indents",
    "even",
    "within",
    "statement",
    "evaluates",
    "true",
    "going",
    "execute",
    "code",
    "true",
    "want",
    "display",
    "text",
    "call",
    "print",
    "function",
    "open",
    "maybe",
    "show",
    "text",
    "says",
    "enjoy",
    "time",
    "still",
    "young",
    "guy",
    "need",
    "school",
    "yet",
    "typed",
    "text",
    "earlier",
    "printing",
    "text",
    "also",
    "print",
    "variables",
    "together",
    "text",
    "could",
    "enter",
    "comma",
    "type",
    "name",
    "type",
    "another",
    "comma",
    "let",
    "enter",
    "quotes",
    "say",
    "enter",
    "another",
    "comma",
    "type",
    "variable",
    "age",
    "see",
    "let",
    "say",
    "age",
    "3",
    "name",
    "thomas",
    "say",
    "enjoy",
    "time",
    "thomas",
    "three",
    "display",
    "let",
    "hit",
    "enter",
    "want",
    "enter",
    "another",
    "condition",
    "hit",
    "back",
    "space",
    "go",
    "back",
    "enter",
    "elif",
    "basically",
    "else",
    "want",
    "say",
    "age",
    "let",
    "say",
    "equivalent",
    "five",
    "enter",
    "colon",
    "maybe",
    "say",
    "enjoy",
    "kindergarten",
    "show",
    "name",
    "type",
    "print",
    "open",
    "parentheses",
    "type",
    "quotes",
    "say",
    "enjoy",
    "kindergarten",
    "type",
    "comma",
    "let",
    "type",
    "another",
    "comma",
    "display",
    "name",
    "say",
    "enjoy",
    "kindergarten",
    "thomas",
    "lastly",
    "want",
    "add",
    "one",
    "condition",
    "hit",
    "enter",
    "backspace",
    "say",
    "else",
    "colon",
    "maybe",
    "say",
    "print",
    "one",
    "display",
    "text",
    "say",
    "grow",
    "fast",
    "exclamation",
    "mark",
    "finished",
    "defining",
    "function",
    "different",
    "conditions",
    "within",
    "function",
    "could",
    "enter",
    "press",
    "backspace",
    "twice",
    "exit",
    "conditions",
    "also",
    "function",
    "call",
    "function",
    "call",
    "school",
    "age",
    "calculator",
    "need",
    "pass",
    "two",
    "different",
    "values",
    "pass",
    "age",
    "enter",
    "comma",
    "type",
    "name",
    "thomas",
    "run",
    "see",
    "calls",
    "function",
    "goes",
    "different",
    "conditions",
    "thomas",
    "less",
    "five",
    "three",
    "says",
    "enjoy",
    "time",
    "thomas",
    "three",
    "test",
    "change",
    "five",
    "run",
    "says",
    "enjoy",
    "kindergarten",
    "thomas",
    "let",
    "say",
    "thomas",
    "10",
    "run",
    "says",
    "grow",
    "fast",
    "see",
    "call",
    "function",
    "pass",
    "values",
    "function",
    "uses",
    "values",
    "run",
    "statement",
    "evaluate",
    "one",
    "true",
    "next",
    "want",
    "show",
    "also",
    "get",
    "parameter",
    "back",
    "function",
    "far",
    "looked",
    "could",
    "run",
    "function",
    "could",
    "pass",
    "values",
    "function",
    "going",
    "look",
    "get",
    "value",
    "back",
    "function",
    "going",
    "go",
    "let",
    "remove",
    "code",
    "right",
    "let",
    "start",
    "scratch",
    "one",
    "going",
    "really",
    "simple",
    "example",
    "want",
    "know",
    "age",
    "going",
    "10",
    "years",
    "use",
    "function",
    "let",
    "define",
    "function",
    "typing",
    "def",
    "function",
    "name",
    "add",
    "ten",
    "age",
    "typed",
    "function",
    "name",
    "want",
    "get",
    "one",
    "bit",
    "input",
    "function",
    "one",
    "parameter",
    "type",
    "age",
    "someone",
    "send",
    "age",
    "function",
    "add",
    "10",
    "age",
    "end",
    "definition",
    "function",
    "let",
    "enter",
    "colon",
    "hit",
    "enter",
    "automatically",
    "indents",
    "right",
    "want",
    "figure",
    "new",
    "age",
    "create",
    "variable",
    "called",
    "new",
    "age",
    "want",
    "set",
    "equal",
    "age",
    "passed",
    "type",
    "age",
    "going",
    "add",
    "10",
    "right",
    "underneath",
    "function",
    "runs",
    "magic",
    "want",
    "return",
    "value",
    "type",
    "return",
    "want",
    "return",
    "new",
    "age",
    "select",
    "send",
    "value",
    "back",
    "return",
    "value",
    "function",
    "done",
    "running",
    "want",
    "call",
    "function",
    "call",
    "function",
    "assign",
    "return",
    "value",
    "variable",
    "maybe",
    "create",
    "new",
    "variable",
    "called",
    "old",
    "set",
    "equal",
    "function",
    "call",
    "function",
    "add",
    "ten",
    "age",
    "want",
    "pass",
    "let",
    "say",
    "son",
    "three",
    "pass",
    "three",
    "run",
    "right",
    "wo",
    "actually",
    "anything",
    "assigning",
    "output",
    "13",
    "old",
    "need",
    "print",
    "right",
    "let",
    "type",
    "print",
    "going",
    "print",
    "old",
    "hit",
    "run",
    "see",
    "comes",
    "back",
    "see",
    "works",
    "saying",
    "old",
    "variable",
    "assigning",
    "value",
    "basically",
    "function",
    "add",
    "ten",
    "age",
    "passing",
    "three",
    "gets",
    "age",
    "three",
    "takes",
    "3",
    "adds",
    "10",
    "assigns",
    "new",
    "age",
    "done",
    "running",
    "function",
    "returns",
    "new",
    "age",
    "new",
    "age",
    "13",
    "assigns",
    "13",
    "old",
    "prints",
    "works",
    "get",
    "could",
    "return",
    "value",
    "function",
    "next",
    "going",
    "look",
    "use",
    "loops",
    "loop",
    "basically",
    "allows",
    "execute",
    "block",
    "code",
    "multiple",
    "times",
    "think",
    "way",
    "every",
    "single",
    "week",
    "wife",
    "comes",
    "says",
    "kevin",
    "take",
    "trash",
    "asks",
    "every",
    "single",
    "week",
    "sense",
    "kind",
    "like",
    "loop",
    "right",
    "let",
    "jump",
    "pc",
    "let",
    "see",
    "create",
    "loop",
    "python",
    "let",
    "create",
    "loop",
    "two",
    "different",
    "types",
    "loops",
    "one",
    "called",
    "loop",
    "one",
    "called",
    "loop",
    "going",
    "start",
    "loop",
    "actually",
    "pretty",
    "easy",
    "going",
    "create",
    "variable",
    "call",
    "x",
    "assign",
    "value",
    "type",
    "loop",
    "say",
    "let",
    "say",
    "let",
    "say",
    "x",
    "less",
    "five",
    "value",
    "less",
    "five",
    "want",
    "execute",
    "code",
    "insert",
    "colon",
    "statements",
    "functions",
    "hit",
    "enter",
    "automatically",
    "indents",
    "within",
    "loop",
    "could",
    "say",
    "let",
    "say",
    "print",
    "x",
    "enter",
    "right",
    "print",
    "x",
    "want",
    "make",
    "sure",
    "increment",
    "x",
    "otherwise",
    "infinite",
    "loop",
    "type",
    "x",
    "x",
    "1",
    "really",
    "simple",
    "example",
    "start",
    "zero",
    "say",
    "x",
    "less",
    "five",
    "case",
    "starts",
    "zero",
    "prints",
    "x",
    "add",
    "one",
    "x",
    "1",
    "x",
    "still",
    "less",
    "five",
    "keep",
    "executing",
    "reaches",
    "let",
    "run",
    "see",
    "works",
    "prints",
    "01234",
    "x",
    "5",
    "well",
    "longer",
    "less",
    "five",
    "exit",
    "loop",
    "done",
    "note",
    "basics",
    "create",
    "simple",
    "loop",
    "also",
    "another",
    "loop",
    "called",
    "loop",
    "go",
    "right",
    "let",
    "type",
    "also",
    "pretty",
    "simple",
    "type",
    "let",
    "say",
    "4",
    "x",
    "range",
    "let",
    "say",
    "five",
    "10",
    "close",
    "parentheses",
    "enter",
    "colon",
    "print",
    "value",
    "let",
    "delete",
    "code",
    "go",
    "range",
    "hit",
    "run",
    "see",
    "starts",
    "5",
    "goes",
    "way",
    "10",
    "include",
    "10",
    "another",
    "form",
    "loop",
    "use",
    "pretty",
    "neat",
    "things",
    "loops",
    "example",
    "variable",
    "days",
    "array",
    "assigned",
    "days",
    "week",
    "use",
    "loop",
    "write",
    "days",
    "week",
    "could",
    "say",
    "creating",
    "variable",
    "say",
    "days",
    "looking",
    "variable",
    "insert",
    "colon",
    "maybe",
    "want",
    "print",
    "value",
    "goes",
    "day",
    "week",
    "enter",
    "run",
    "go",
    "variable",
    "days",
    "prints",
    "every",
    "single",
    "day",
    "week",
    "pretty",
    "cool",
    "one",
    "neat",
    "things",
    "start",
    "using",
    "logic",
    "learned",
    "loops",
    "let",
    "say",
    "want",
    "know",
    "days",
    "thursday",
    "hit",
    "thursday",
    "want",
    "stop",
    "insert",
    "statement",
    "say",
    "let",
    "say",
    "equivalent",
    "let",
    "say",
    "thursday",
    "type",
    "thursday",
    "point",
    "want",
    "stop",
    "type",
    "break",
    "click",
    "run",
    "see",
    "goes",
    "monday",
    "tuesday",
    "wednesday",
    "looks",
    "like",
    "hits",
    "thursday",
    "point",
    "stop",
    "loop",
    "point",
    "break",
    "longer",
    "print",
    "days",
    "loops",
    "also",
    "skip",
    "items",
    "let",
    "say",
    "get",
    "thursday",
    "want",
    "include",
    "thursday",
    "list",
    "still",
    "want",
    "continue",
    "look",
    "friday",
    "saturday",
    "sunday",
    "instead",
    "using",
    "break",
    "use",
    "something",
    "called",
    "continue",
    "run",
    "code",
    "see",
    "monday",
    "tuesday",
    "wednesday",
    "found",
    "thursday",
    "simply",
    "want",
    "skip",
    "item",
    "added",
    "continue",
    "see",
    "skips",
    "get",
    "friday",
    "saturday",
    "sunday",
    "use",
    "logic",
    "loops",
    "could",
    "also",
    "break",
    "continue",
    "far",
    "throughout",
    "video",
    "looking",
    "fundamentals",
    "writing",
    "code",
    "however",
    "one",
    "thing",
    "build",
    "top",
    "others",
    "already",
    "done",
    "using",
    "libraries",
    "also",
    "modules",
    "lots",
    "fantastic",
    "libraries",
    "use",
    "let",
    "say",
    "instance",
    "want",
    "print",
    "value",
    "pi",
    "turns",
    "existing",
    "library",
    "called",
    "math",
    "could",
    "simply",
    "type",
    "import",
    "type",
    "math",
    "right",
    "beneath",
    "let",
    "use",
    "standard",
    "print",
    "function",
    "type",
    "print",
    "say",
    "something",
    "like",
    "pi",
    "insert",
    "comma",
    "refer",
    "math",
    "library",
    "type",
    "want",
    "get",
    "pi",
    "value",
    "back",
    "typing",
    "see",
    "sorts",
    "suggestions",
    "could",
    "use",
    "click",
    "run",
    "print",
    "value",
    "pi",
    "programming",
    "necessarily",
    "write",
    "everything",
    "instead",
    "build",
    "top",
    "others",
    "done",
    "following",
    "along",
    "today",
    "might",
    "occasionally",
    "run",
    "different",
    "errors",
    "trying",
    "execute",
    "code",
    "really",
    "pain",
    "resolve",
    "want",
    "go",
    "three",
    "key",
    "errors",
    "might",
    "run",
    "resolve",
    "let",
    "take",
    "one",
    "example",
    "going",
    "type",
    "print",
    "type",
    "hello",
    "world",
    "following",
    "along",
    "probably",
    "know",
    "every",
    "time",
    "type",
    "function",
    "type",
    "text",
    "need",
    "include",
    "quotes",
    "around",
    "done",
    "hit",
    "run",
    "right",
    "get",
    "error",
    "referred",
    "syntax",
    "error",
    "reason",
    "follow",
    "rules",
    "print",
    "function",
    "follow",
    "syntax",
    "rules",
    "python",
    "best",
    "way",
    "troubleshoot",
    "simply",
    "look",
    "code",
    "find",
    "error",
    "might",
    "get",
    "name",
    "error",
    "hello",
    "world",
    "defined",
    "thinks",
    "hello",
    "world",
    "variable",
    "one",
    "way",
    "look",
    "error",
    "message",
    "help",
    "troubleshoot",
    "problem",
    "might",
    "run",
    "another",
    "type",
    "error",
    "let",
    "say",
    "take",
    "10",
    "0",
    "try",
    "run",
    "know",
    "ca",
    "divide",
    "zero",
    "right",
    "get",
    "error",
    "division",
    "zero",
    "referred",
    "runtime",
    "error",
    "fails",
    "could",
    "look",
    "error",
    "message",
    "see",
    "might",
    "help",
    "troubleshoot",
    "problem",
    "code",
    "typically",
    "get",
    "error",
    "message",
    "could",
    "go",
    "something",
    "like",
    "look",
    "error",
    "message",
    "see",
    "people",
    "encountered",
    "similar",
    "errors",
    "help",
    "get",
    "root",
    "cause",
    "lastly",
    "another",
    "type",
    "error",
    "might",
    "encounter",
    "let",
    "say",
    "type",
    "name",
    "equals",
    "let",
    "say",
    "kevin",
    "like",
    "earlier",
    "let",
    "say",
    "want",
    "print",
    "say",
    "hello",
    "name",
    "let",
    "say",
    "want",
    "print",
    "name",
    "assigned",
    "variable",
    "let",
    "insert",
    "parentheses",
    "hit",
    "run",
    "says",
    "hello",
    "name",
    "printing",
    "kevin",
    "errors",
    "referred",
    "semantic",
    "errors",
    "notoriously",
    "hard",
    "troubleshoot",
    "reason",
    "everything",
    "working",
    "based",
    "programmed",
    "getting",
    "expected",
    "result",
    "typically",
    "sit",
    "look",
    "code",
    "evaluate",
    "everything",
    "working",
    "tend",
    "take",
    "time",
    "right",
    "well",
    "brings",
    "us",
    "end",
    "video",
    "hopefully",
    "understand",
    "fundamentals",
    "programming",
    "using",
    "python",
    "enjoyed",
    "video",
    "please",
    "give",
    "thumbs",
    "also",
    "enjoyed",
    "maybe",
    "like",
    "see",
    "content",
    "like",
    "future",
    "please",
    "consider",
    "subscribing",
    "also",
    "feedback",
    "want",
    "see",
    "cover",
    "video",
    "topics",
    "future",
    "please",
    "leave",
    "comment",
    "right",
    "well",
    "today",
    "hope",
    "enjoyed",
    "always",
    "hope",
    "see",
    "next",
    "time",
    "bye"
  ],
  "keywords": [
    "kevin",
    "want",
    "show",
    "programming",
    "using",
    "python",
    "video",
    "going",
    "start",
    "basics",
    "work",
    "way",
    "get",
    "little",
    "bit",
    "end",
    "write",
    "code",
    "run",
    "well",
    "even",
    "many",
    "different",
    "go",
    "things",
    "like",
    "variables",
    "create",
    "function",
    "jump",
    "statement",
    "loops",
    "execute",
    "condition",
    "think",
    "might",
    "output",
    "something",
    "take",
    "maybe",
    "computer",
    "example",
    "use",
    "channel",
    "language",
    "look",
    "right",
    "top",
    "also",
    "pretty",
    "really",
    "say",
    "hello",
    "try",
    "simply",
    "let",
    "first",
    "check",
    "installed",
    "10",
    "within",
    "type",
    "command",
    "prompt",
    "click",
    "opens",
    "see",
    "typed",
    "says",
    "need",
    "install",
    "next",
    "running",
    "could",
    "one",
    "add",
    "close",
    "hit",
    "enter",
    "time",
    "terminal",
    "1",
    "2",
    "put",
    "syntax",
    "error",
    "expression",
    "instead",
    "3",
    "back",
    "neat",
    "line",
    "evaluates",
    "called",
    "print",
    "open",
    "parentheses",
    "insert",
    "double",
    "quotes",
    "world",
    "new",
    "x",
    "symbol",
    "another",
    "text",
    "notepad",
    "actually",
    "file",
    "call",
    "basically",
    "every",
    "test",
    "earlier",
    "know",
    "space",
    "prints",
    "screen",
    "writing",
    "works",
    "sure",
    "make",
    "studio",
    "visual",
    "great",
    "thing",
    "select",
    "done",
    "numbers",
    "play",
    "working",
    "5",
    "evaluate",
    "times",
    "comes",
    "rid",
    "number",
    "comma",
    "single",
    "comment",
    "sign",
    "variable",
    "red",
    "bucket",
    "name",
    "assign",
    "value",
    "equal",
    "assigned",
    "values",
    "automatically",
    "delete",
    "input",
    "true",
    "false",
    "two",
    "less",
    "thomas",
    "three",
    "old",
    "age",
    "kindergarten",
    "five",
    "colon",
    "else",
    "indents",
    "enjoy",
    "functions",
    "pass",
    "loop",
    "days",
    "thursday"
  ]
}