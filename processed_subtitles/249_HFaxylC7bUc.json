{
  "text": "hey welcome back so today I gotta\nexplain functions in JavaScript a\nfunction is a section of reusable code\nyou declare that code once and you can\nuse it whenever you want all you have to\ndo is call the function to execute that\ncode here's an example we'll create a\nfunction to sing Happy Birthday whenever\nwe call this function it's going to sing\nHappy Birthday so to declare a function\nyou type\nfunction a unique function name let's\nname our function happy birthday because\nit's well the happy birthday function\nthen you add a set of parentheses then\nyou add a set of curly braces any code\nwe write between this set of curly\nbraces we can reuse whenever we want\nso what do we want to do exactly with\nthis function\nI'll create the lyrics to my own Happy\nBirthday song\nconsole.log\nhappy\nbirthday to you let's repeat that again\nhappy birthday dear you\nhappy birthday to you\ntrust me I'm going somewhere with this\nso we have a function when we run the\nprogram it currently doesn't do anything\nto execute this code within the function\nwe have to call the function by its name\nhappy birthday then add a set of\nparentheses\nso now we should execute this code yep\nhappy birthday to you happy birthday to\nyou happy birthday dear you happy\nbirthday to you\nso to call a function you type the\nfunction name then you add a set of\nparentheses I like to think of the\nparentheses as two telephones talking to\neach other that's how I remember it so\nif I were to call this function again\nwhat do you think is going to happen\nwell we're going to execute this\nfunction twice\nthree times\nwe'll execute it three times as many\ntimes as I want in fact that's what a\nfunction is it's a section of reusable\ncode reuse it whenever you want you just\nhave to call it you can send a function\nsome values or variables let's change\nour happy birthday function I will turn\nthis line into a template literal\nlet's replace U with the placeholder\nthen we'll add a username\nI'll add one more line\nwe'll use a template literal\nyou are insert a placeholder\nage\nears old\nso when I run this program\nwe have an uncaught reference error\nusername is not defined at happy\nbirthday so our happy birthday function\ndoesn't know what our username is or the\nage so we can send some information to\nthe function when we call it so within\nthe set of parentheses what would we\nlike to send this function let's send\nour name\nso whatever values you place within the\nfunction be sure to comma separate them\nso why don't you go ahead and send the\nhappy birthday function a name and an\nage\nbut there's one step missing these are\nknown as arguments their data that you\nsend a function but you need a matching\nset of parameters within the parentheses\nof the Declaration in a way we can\nDefine some temporary variables and\nthey're all comma separated we will\nDefine a username parameter as well as\nage now this function should work\nproperly happy birthday dear bro code\nyou are 25 years old\nso these are parameters and what you\nsend the function are arguments let's\ncall the function but send different\ninformation\nhappy birthday\nuh how about SpongeBob\nwill be I don't know how old he is\naccording to SpongeBob lore but let's\nsay he's 30 years old\nhappy birthday dear SpongeBob you are 30\nyears old\nhow about Patrick this time it's his\nbirthday\neverybody gets a birthday\nPatrick will be 37.\nhappy birthday dear Patrick you are 37\nyears old\nso that's a benefit of passing arguments\nto a function when the function receives\nthis data it can do something with it\nnow the order of the parameters does\nmatter if I were to switch age\nand username here's what happens\nhappy birthday dear37 you are Patrick\nyears old\nwith the arguments that you're passing\nto your function you'll want to be sure\nthat the parameters match up\nall right now I'm gonna cover the return\nkeyword we'll create a few other\nfunction examples\nwe'll create a function to add two\nnumbers function add\nthen we'll need two arguments which we\nwill name X and Y\nso when we invoke this function I would\nlike to add X and Y together\nI'll create a temporary variable named\nresult just to store the result\nequals X Plus y\nso I'm going to add two numbers together\nlet's add two and three together and\nlet's see what happens\nwell nothing appears to happen well we\ncan send some data back to the place in\nwhich we call a function\nbut we need to use this return keyword\nlet's return the result\nso two plus three should be 5. after\nthis function resolves think of this\nfunction becoming the value 5. so we'll\nprobably want to do something with that\nvalue\nI'll store that within a variable\nlet answer\nequal add two and three\nthen let's console.log the answer\nwhich should be five\nwhen you return something from a\nfunction after you resolve the function\nthink of it as becoming whatever is\nreturned in this case it's our result\nor otherwise I can place this function\nwithin console.log if we don't plan to\nstore it at all\nso add two and three then display the\nresult which is five\nthere is a shortcut too you don't\nnecessarily need to declare a variable\nwithin this function\nwe could shorten this to\nreturn X Plus y\nthat is also valid so that should return\n5.\nokay let's create a subtract function\nfunction subtract\nwill return x minus y\nwell we need a matching set of\nparameters because I forgot that\nokay let's see what happens when we\nsubtract three from two that'll give us\nnegative one let's multiply\nfunction\nmultiply\nwe'll multiply X and Y together\nreturn x times y\nwe will multiply two times three which\nis six\ndivide\nwe need parameters X and Y\nthen return x divided by y\nthen we will invoke the divide function\npass in two and three and the result is\n0.66 repeating\nlet's go over a more complex example\nwe'll create a function to determine if\na number is even or odd\nhere's the function\nfunction is even\nwe have one parameter\na number so when we invoke the function\nwe'll have to pass in a number\nso when we receive a number how do we\ncheck to see if this number is even\nhere's one solution\nwe'll use an if statement\nif our number\nmodulus 2. modulus gives you the\nremainder of any division\nif this number divides by two evenly if\nthis is equal to zero and yes I'm using\nthe strict equality operator I'm trying\nto use that more often if our number is\ndivisible by 2 then let's return\nthe Boolean value true\nelse will return\nfalse okay\nlet's console.log\nlet's check to see if a number is even\nlet's start with 10 is 10 even\nthat is true\nhow about 11. that is false 12 12 is\neven\nso that's kind of cool\nif you would like a shortcut for this\nyou can use the trinary operator that\nwould look something like this\nwe are going to return\nthen a condition what are we checking is\nour number\nmodulus 2.\nstrictly equal to zero question mark so\nthat is the ternary operator the\nquestion mark\nif it is true then we will return a\nBoolean value of true colon false if\nit's false\nis 12 even that is true\nis 13 Even no it's not it's odd how\nabout 14. that is true\nall right last example I think we're\nprobably getting the hang of this now\nwe'll create a function to see if an\nemail is valid\nfunction\nis valid email\nwhat kind of information are we going to\nsend we'll set that up as a parameter\nwe will need an email\nwill invoke the is valid email function\nand pass in an email why don't you type\nin your email I'll just make one up bro\nat fake.com\nso when we invoke this function this\nstring of text will become our email\nwe'll check to see if our email contains\nthe at character\nwe'll use an if statement\nif email and there's a built-in method\nfor this the includes method\nif our email\nincludes\nthe at character\nthen we will return true that is a valid\nemail they have the at character\nelse we will return\nfalse\nis my email valid\nthat is true\nlet's remove the at character\nbrofick.com maybe it's a website or\nsomething\nthat is false\nlet's try another email\nagain we're going to invoke the function\nis valid email\nElon Musk\ndot com don't actually go there I don't\nknow what's gonna pop up uh that is not\na valid email\nall right how about\nZuckerberg\nat meta.com\nthat is a valid email it contains a net\ncharacter\nand for something like this if we're\nreturning either true or false we can\nuse the Trenary operator\nreturn\nthen our condition is we're going to\ncheck if our email includes the at\ncharacter\nthen add the ternary operator\nif this is true return true\nelse we will return false so these\nshould be the same which they are\nall right everybody so that's an\nintroduction to functions it's a section\nof reusable code you declare some code\nonce and use it whenever you want you\ncall the function to execute that code\nif you need to send your function some\ndata you'll need a matching set of\narguments and parameters and you can\nreturn something too with the return\nkeyword we'll have more practice with\nthis in the future don't worry and that\nis an introduction to functions in\nJavaScript\n",
  "words": [
    "hey",
    "welcome",
    "back",
    "today",
    "got",
    "ta",
    "explain",
    "functions",
    "javascript",
    "function",
    "section",
    "reusable",
    "code",
    "declare",
    "code",
    "use",
    "whenever",
    "want",
    "call",
    "function",
    "execute",
    "code",
    "example",
    "create",
    "function",
    "sing",
    "happy",
    "birthday",
    "whenever",
    "call",
    "function",
    "going",
    "sing",
    "happy",
    "birthday",
    "declare",
    "function",
    "type",
    "function",
    "unique",
    "function",
    "name",
    "let",
    "name",
    "function",
    "happy",
    "birthday",
    "well",
    "happy",
    "birthday",
    "function",
    "add",
    "set",
    "parentheses",
    "add",
    "set",
    "curly",
    "braces",
    "code",
    "write",
    "set",
    "curly",
    "braces",
    "reuse",
    "whenever",
    "want",
    "want",
    "exactly",
    "function",
    "create",
    "lyrics",
    "happy",
    "birthday",
    "song",
    "happy",
    "birthday",
    "let",
    "repeat",
    "happy",
    "birthday",
    "dear",
    "happy",
    "birthday",
    "trust",
    "going",
    "somewhere",
    "function",
    "run",
    "program",
    "currently",
    "anything",
    "execute",
    "code",
    "within",
    "function",
    "call",
    "function",
    "name",
    "happy",
    "birthday",
    "add",
    "set",
    "parentheses",
    "execute",
    "code",
    "yep",
    "happy",
    "birthday",
    "happy",
    "birthday",
    "happy",
    "birthday",
    "dear",
    "happy",
    "birthday",
    "call",
    "function",
    "type",
    "function",
    "name",
    "add",
    "set",
    "parentheses",
    "like",
    "think",
    "parentheses",
    "two",
    "telephones",
    "talking",
    "remember",
    "call",
    "function",
    "think",
    "going",
    "happen",
    "well",
    "going",
    "execute",
    "function",
    "twice",
    "three",
    "times",
    "execute",
    "three",
    "times",
    "many",
    "times",
    "want",
    "fact",
    "function",
    "section",
    "reusable",
    "code",
    "reuse",
    "whenever",
    "want",
    "call",
    "send",
    "function",
    "values",
    "variables",
    "let",
    "change",
    "happy",
    "birthday",
    "function",
    "turn",
    "line",
    "template",
    "literal",
    "let",
    "replace",
    "u",
    "placeholder",
    "add",
    "username",
    "add",
    "one",
    "line",
    "use",
    "template",
    "literal",
    "insert",
    "placeholder",
    "age",
    "ears",
    "old",
    "run",
    "program",
    "uncaught",
    "reference",
    "error",
    "username",
    "defined",
    "happy",
    "birthday",
    "happy",
    "birthday",
    "function",
    "know",
    "username",
    "age",
    "send",
    "information",
    "function",
    "call",
    "within",
    "set",
    "parentheses",
    "would",
    "like",
    "send",
    "function",
    "let",
    "send",
    "name",
    "whatever",
    "values",
    "place",
    "within",
    "function",
    "sure",
    "comma",
    "separate",
    "go",
    "ahead",
    "send",
    "happy",
    "birthday",
    "function",
    "name",
    "age",
    "one",
    "step",
    "missing",
    "known",
    "arguments",
    "data",
    "send",
    "function",
    "need",
    "matching",
    "set",
    "parameters",
    "within",
    "parentheses",
    "declaration",
    "way",
    "define",
    "temporary",
    "variables",
    "comma",
    "separated",
    "define",
    "username",
    "parameter",
    "well",
    "age",
    "function",
    "work",
    "properly",
    "happy",
    "birthday",
    "dear",
    "bro",
    "code",
    "25",
    "years",
    "old",
    "parameters",
    "send",
    "function",
    "arguments",
    "let",
    "call",
    "function",
    "send",
    "different",
    "information",
    "happy",
    "birthday",
    "uh",
    "spongebob",
    "know",
    "old",
    "according",
    "spongebob",
    "lore",
    "let",
    "say",
    "30",
    "years",
    "old",
    "happy",
    "birthday",
    "dear",
    "spongebob",
    "30",
    "years",
    "old",
    "patrick",
    "time",
    "birthday",
    "everybody",
    "gets",
    "birthday",
    "patrick",
    "happy",
    "birthday",
    "dear",
    "patrick",
    "37",
    "years",
    "old",
    "benefit",
    "passing",
    "arguments",
    "function",
    "function",
    "receives",
    "data",
    "something",
    "order",
    "parameters",
    "matter",
    "switch",
    "age",
    "username",
    "happens",
    "happy",
    "birthday",
    "dear37",
    "patrick",
    "years",
    "old",
    "arguments",
    "passing",
    "function",
    "want",
    "sure",
    "parameters",
    "match",
    "right",
    "gon",
    "na",
    "cover",
    "return",
    "keyword",
    "create",
    "function",
    "examples",
    "create",
    "function",
    "add",
    "two",
    "numbers",
    "function",
    "add",
    "need",
    "two",
    "arguments",
    "name",
    "x",
    "invoke",
    "function",
    "would",
    "like",
    "add",
    "x",
    "together",
    "create",
    "temporary",
    "variable",
    "named",
    "result",
    "store",
    "result",
    "equals",
    "x",
    "plus",
    "going",
    "add",
    "two",
    "numbers",
    "together",
    "let",
    "add",
    "two",
    "three",
    "together",
    "let",
    "see",
    "happens",
    "well",
    "nothing",
    "appears",
    "happen",
    "well",
    "send",
    "data",
    "back",
    "place",
    "call",
    "function",
    "need",
    "use",
    "return",
    "keyword",
    "let",
    "return",
    "result",
    "two",
    "plus",
    "three",
    "function",
    "resolves",
    "think",
    "function",
    "becoming",
    "value",
    "probably",
    "want",
    "something",
    "value",
    "store",
    "within",
    "variable",
    "let",
    "answer",
    "equal",
    "add",
    "two",
    "three",
    "let",
    "answer",
    "five",
    "return",
    "something",
    "function",
    "resolve",
    "function",
    "think",
    "becoming",
    "whatever",
    "returned",
    "case",
    "result",
    "otherwise",
    "place",
    "function",
    "within",
    "plan",
    "store",
    "add",
    "two",
    "three",
    "display",
    "result",
    "five",
    "shortcut",
    "necessarily",
    "need",
    "declare",
    "variable",
    "within",
    "function",
    "could",
    "shorten",
    "return",
    "x",
    "plus",
    "also",
    "valid",
    "return",
    "okay",
    "let",
    "create",
    "subtract",
    "function",
    "function",
    "subtract",
    "return",
    "x",
    "minus",
    "well",
    "need",
    "matching",
    "set",
    "parameters",
    "forgot",
    "okay",
    "let",
    "see",
    "happens",
    "subtract",
    "three",
    "two",
    "give",
    "us",
    "negative",
    "one",
    "let",
    "multiply",
    "function",
    "multiply",
    "multiply",
    "x",
    "together",
    "return",
    "x",
    "times",
    "multiply",
    "two",
    "times",
    "three",
    "six",
    "divide",
    "need",
    "parameters",
    "x",
    "return",
    "x",
    "divided",
    "invoke",
    "divide",
    "function",
    "pass",
    "two",
    "three",
    "result",
    "repeating",
    "let",
    "go",
    "complex",
    "example",
    "create",
    "function",
    "determine",
    "number",
    "even",
    "odd",
    "function",
    "function",
    "even",
    "one",
    "parameter",
    "number",
    "invoke",
    "function",
    "pass",
    "number",
    "receive",
    "number",
    "check",
    "see",
    "number",
    "even",
    "one",
    "solution",
    "use",
    "statement",
    "number",
    "modulus",
    "modulus",
    "gives",
    "remainder",
    "division",
    "number",
    "divides",
    "two",
    "evenly",
    "equal",
    "zero",
    "yes",
    "using",
    "strict",
    "equality",
    "operator",
    "trying",
    "use",
    "often",
    "number",
    "divisible",
    "2",
    "let",
    "return",
    "boolean",
    "value",
    "true",
    "else",
    "return",
    "false",
    "okay",
    "let",
    "let",
    "check",
    "see",
    "number",
    "even",
    "let",
    "start",
    "10",
    "10",
    "even",
    "true",
    "false",
    "12",
    "12",
    "even",
    "kind",
    "cool",
    "would",
    "like",
    "shortcut",
    "use",
    "trinary",
    "operator",
    "would",
    "look",
    "something",
    "like",
    "going",
    "return",
    "condition",
    "checking",
    "number",
    "modulus",
    "strictly",
    "equal",
    "zero",
    "question",
    "mark",
    "ternary",
    "operator",
    "question",
    "mark",
    "true",
    "return",
    "boolean",
    "value",
    "true",
    "colon",
    "false",
    "false",
    "12",
    "even",
    "true",
    "13",
    "even",
    "odd",
    "true",
    "right",
    "last",
    "example",
    "think",
    "probably",
    "getting",
    "hang",
    "create",
    "function",
    "see",
    "email",
    "valid",
    "function",
    "valid",
    "email",
    "kind",
    "information",
    "going",
    "send",
    "set",
    "parameter",
    "need",
    "email",
    "invoke",
    "valid",
    "email",
    "function",
    "pass",
    "email",
    "type",
    "email",
    "make",
    "one",
    "bro",
    "invoke",
    "function",
    "string",
    "text",
    "become",
    "email",
    "check",
    "see",
    "email",
    "contains",
    "character",
    "use",
    "statement",
    "email",
    "method",
    "includes",
    "method",
    "email",
    "includes",
    "character",
    "return",
    "true",
    "valid",
    "email",
    "character",
    "else",
    "return",
    "false",
    "email",
    "valid",
    "true",
    "let",
    "remove",
    "character",
    "maybe",
    "website",
    "something",
    "false",
    "let",
    "try",
    "another",
    "email",
    "going",
    "invoke",
    "function",
    "valid",
    "email",
    "elon",
    "musk",
    "dot",
    "com",
    "actually",
    "go",
    "know",
    "gon",
    "na",
    "pop",
    "uh",
    "valid",
    "email",
    "right",
    "zuckerberg",
    "valid",
    "email",
    "contains",
    "net",
    "character",
    "something",
    "like",
    "returning",
    "either",
    "true",
    "false",
    "use",
    "trenary",
    "operator",
    "return",
    "condition",
    "going",
    "check",
    "email",
    "includes",
    "character",
    "add",
    "ternary",
    "operator",
    "true",
    "return",
    "true",
    "else",
    "return",
    "false",
    "right",
    "everybody",
    "introduction",
    "functions",
    "section",
    "reusable",
    "code",
    "declare",
    "code",
    "use",
    "whenever",
    "want",
    "call",
    "function",
    "execute",
    "code",
    "need",
    "send",
    "function",
    "data",
    "need",
    "matching",
    "set",
    "arguments",
    "parameters",
    "return",
    "something",
    "return",
    "keyword",
    "practice",
    "future",
    "worry",
    "introduction",
    "functions",
    "javascript"
  ],
  "keywords": [
    "function",
    "code",
    "declare",
    "use",
    "whenever",
    "want",
    "call",
    "execute",
    "create",
    "happy",
    "birthday",
    "going",
    "name",
    "let",
    "well",
    "add",
    "set",
    "parentheses",
    "dear",
    "within",
    "like",
    "think",
    "two",
    "three",
    "times",
    "send",
    "username",
    "one",
    "age",
    "old",
    "would",
    "arguments",
    "data",
    "need",
    "parameters",
    "years",
    "patrick",
    "something",
    "right",
    "return",
    "x",
    "invoke",
    "together",
    "result",
    "see",
    "value",
    "valid",
    "multiply",
    "number",
    "even",
    "check",
    "operator",
    "true",
    "false",
    "email",
    "character"
  ]
}