{
  "text": "okay then my friends so it's time to\nmove on to functions which I think here\nare really fun parts of JavaScript and\nfunctions are probably one of the main\nbuilding blocks in pretty much any\nprogramming language that you come\nacross and they fall under the object\ntype in our data type list now what\nfunctions allow us to do is define a\nblock of code which we can call and\nexecute whenever we want so I guess you\ncould think of functions as a bit like a\nbox with some code inside it that does a\nparticular thing like this now when we\nwant to run the code inside that\nfunction all we do is we call the\nfunction like this and it runs the code\ninside it now later on if we want to\ncall it again we can do and it runs the\ncode again and this behavior is really\nuseful because it means we're only\ndefining the code inside the function\nonce but we can run it multiple times\nwhenever we want whenever we call it so\nimagine we have a web page with a button\non it and every time a user clicks that\nbutton we want to run the same bit of\ncode we could create a function which\ncontains that code that we want to run\nand then whenever a user clicks that\nbutton just call the function to run the\ncode and we can do that whether the user\nclicks it twice or ten times it really\ndoesn't matter we define the code once\nin the function and run it or call it as\nmany times as we want in the future now\nwe could also pass a values into\nfunctions so that the function could\ntake those values and do something with\nit and then when it's done spit out an\nupdated value at the end now an example\nof this would be to receive maybe a list\nof geo coordinates from a database that\nwe want to convert into some kind of\nreal address we could write a function\nthat takes in a latitude and a longitude\nvalue and it grabs those and converts\nthem into some kind of real address so\nsay we get a list of different\ncoordinates 50 of them in total we're\njust defining the function once then we\ncould call the function 50 times only\nthree times here because there's not\nenough room on the screen but we could\ncall it as many times as we wanted to\nand we're just passing the different\ncoordinates and for each time we call it\nit takes in those coordinates and spits\nout a real address so\nthis is the power of functions to create\nlittle blocks of code that become\nreusable so in this chapter we're going\nto be looking at functions in a lot of\ndepth and we'll also take a sneak peek\nat how we could potentially use a\nfunction to interact with a webpage\nwe're also going to be discussing what\nmethods are a little more in this\nchapter but not in too much detail just\nyet remember a method is just a function\nwhich does something but there is a\nsmall distinction between functions and\nmethods and we will discuss that as well\nall right then so I'd like to show you\nhow to create your first function the\nfirst thing we need to do is write out\nthe function keyword then we give the\nfunction a name I'm going to call this\ngreet so much like we gave a variable a\nname we also give it functions a name\ntoo now after the name we place our\nparentheses and then we do some curly\nbraces these curly braces are a code\nblock for the function so all of our\ncode for the function goes inside this\ncode block then whenever we call the\nfunction in the future this is what is\ngoing to execute so for now I'm going to\nkeep this simple\nand just do a console dot log and say\nhello there so then now we have declared\na function which we can then call at any\npoint later on in our code now if I was\nto save this at the minute and run it in\nthe browser nothing is going to be\nlogged to the console because even\nthough we've defined our function here\nwe've not actually called the function\nso in order to call the function we need\nto say the function name which is greet\nthat's the name right there\nthen we use parentheses to call the\nfunction so this is known as calling the\nfunction are also invoking the function\nso if I run this now what it's going to\ndo is see this it's going to run the\nfunction the code block for this\nfunction and hopefully log this to the\nconsole so over here we can see hello\nthere and if we wanted to run this again\nmultiple times we could do so if I want\nto do it three times\nit should logged out three times okay\nthen so this way of creating a function\nis called a function declaration we're\ndeclaring a function now we can also\nstore functions in variables and invoke\nin a very similar way so what I'm gonna\ndo is come down here and I'm going to\ncreate a Const and call this speak I'm\nstoring this in a constant because I\ndon't want to overwrite the function\nlater on so I don't want this to change\nso I'm going to set this equal now to a\nfunction we don't give this function a\nname here like we did up here because\nthe name is now the constant of the\nvariable and we add our code block at\nthe end now this is known as a function\nexpression basically anytime you get a\nvariable and set it equal to something\nwhether it's a function or a string or a\nnumber or something else that is known\nas an expression okay and at the end of\nexpressions we should always have\nsemicolons so I'm going to put a\nsemicolon at the end of this function\nnow we don't do a semicolon at the end\nof this function because this is not an\nexpression and this semicolon down here\nthis is probably one of the only times\nyou're going to see a semicolon at the\nend of a code block when we use a\nfunction expression so then now we have\nthis function stored in this constant so\ninside this function I'm just going to\ndo something like console.log and then\nsay good day okay so how do we call this\nfunction how do we invoke it\nwell we invoke it in exactly the same\nway we just say speak and then\nparentheses so the name of the constant\nfollowed by parentheses to invoke that\nfunction so I'm going to comment these\nthree out and save it and preview over\nhere and we can see good day now now I'm\njust gonna duplicate this a couple of\ntimes\nsave it and we can see we get three good\ndays so again we can call this as many\ntimes as we want so this is a function\nexpression when we store a function\ninside a variable and this is a function\ndeclaration when we don't now most of\nthe time these two different ways of\ncreating functions they behave the same\nway but there is a subtle difference\nwhen it comes to something called\nhoisting in JavaScript now hoisting is a\nterm that loosely describes how our\nfunctions are effectively hoisted to the\ntop of a file before the rest of our\nJavaScript actually runs so in essence\nthey're all declared before the rest of\nour job\nscript and it does this with function\ndeclarations but it doesn't do this with\nfunction expressions so what that means\nis that we could potentially declare a\nfunction using a function declaration\ndown here at the bottom of the file and\nwe could still run these things over\nhere okay so let me come and out speak\nand use greet because what's happening\nis JavaScript is using hoisting to hoist\nthe function essentially to the top of\nthe file that's a gross\noversimplification but essentially this\nis what the effect is so even though\nwe've defined it down here it's\neffectively hoisting it up to the top\nand therefore when we're using it here\nwe can use it because it's already been\ndefined by that point now if I save this\nand run it we can see all of those\ngreets right there so this is still\nworking even though the function comes\nafter where we call it so hoisting works\nwith function declarations but it\ndoesn't work with function expressions\nso if I take this one now and put it at\nthe bottom and then try to use speak\nthen this is not going to work because\nJavaScript does not hoist function\nexpressions only function declarations\nso if I save this and preview now we get\nan error speak is not defined and that's\nbecause by the time JavaScript reaches\nthis and tries to call speak or invoke\nspeak it's not yet been defined this has\nnot been hoisted to the top so then this\nmight seem like a good idea to use this\nfunction declaration instead of function\nexpression at first but actually it's\nnot such a good idea to me it just seems\njumbled up and it doesn't enforce a good\ncoding practice when you're declaring\nthings so really I think you should\ndeclare something first and then use it\nto keep a logical flow to your code and\nif you don't do that you could end up\nwith a mishmash of functions and calls\nall over the place therefore I prefer\nmost of the time to use function\nexpressions like this which are not\nhoisted so that we have to define our\nfunctions first at the top before we use\nthem so without creating functions in\nthe future 99.9% of the time and\nprobably going to create them like this\nalright then so sometimes we like to\npass values into functions to do\nsomething with that value for example we\ncould want to pass in some kind of name\nto the speak function up here and then\nmaybe out put that name in the console\nso to do this we first declare that we\nwant to receive some kind of value\ninside the function and we do that\ninside the function parentheses so we\nname this something and I'm going to\nname it name because that's what we want\nto receive now what this does is create\na local variable called name that we can\nuse inside this code block so if I\nwanted to I could now output that inside\nhere so I'm going to convert this into a\ntemplate string which says good day and\nthen outputs the name so if I try this\nat the minute when we call it we're not\nactually passing a value into the\nfunction so this is not going to work so\nif I save it and preview it we can say\ngood day undefined which makes no sense\nso what we have to do is actually pass a\nvalue into the function so say for\nexample I come down here and say Mario\nand save it what's going to happen now\nis we're going to call this speak\nfunction but we're going to pass in this\nvalue as well and then when the function\nis called it takes that value and it\nassigns it to this named variable that\nwe created and now we can access that\nvalue inside the function so if I save\nit now and preview we can see that now\nit says good day Mario because it's\ntaking this value and assigned it to\nthis local variable now we can't access\nthe name outside of the function itself\nbecause it's a local variable so that\ndoesn't work\nso when we're trying to do this\nnothing's going to happen this variable\nhas the scope of this function and can\nonly be used inside it so then when we\npass in a value like this to a function\nthis right here this is known as an\nargument when we receive that value up\nhere and we create these different\nvalues inside the function these are\ncalled function parameters now the two\nnames are interchangeable and a lot of\npeople get them mixed up including me so\nyou'll probably sometimes hear me say\nthis is an argument or this is a\nparameter and vice-versa\nbut the names are just names most\nimportant is this idea of passing a\nvalue into a function which we can then\nuse now sometimes we might want to pass\na few different values into a function\nso we can do that by first of all\ndeclaring the different parameters in\nhere comma-separated so I'm going to\ntake one in called time as well and then\nsame again down here come and separate\nthe arguments so I'll plus in morning\nand then we can output that instead of\ndate we can output the time so we'll do\nthat so now it should say good morning\nMario because we passing Mario and\nmorning so if I save this in preview we\ncan see good morning Mario now the order\nis important the order of the arguments\nmust match the order of the parameters\nwe can't pass in the name second and the\ntime first and expect that the function\nis going to know what those things are\nknow it assigns the first thing here to\nthe first thing here the second thing\nhere to the second thing here third\nthird fourth fourth and so forth okay so\nthen what if we do something like this\njust call speak and we don't pass in any\nvalues then we've seen this we get good\nundefined undefined and that doesn't\nmake sense so to combat this just in\ncase a function is invoked without\npassing anything in what we could do is\ngive these parameters some default\nvalues so I could say something like\nthis name is equal to Luigi and the time\nis going to be equal to night now that\nif we invoke the speak function but we\ndon't pass any arguments into the\nfunction what's going to happen is the\nfunction itself will assign these\ndefault values to these parameters so it\nwill say good night Luigi so if I save\nthis preview we can see good night Luigi\nbut the moment that I pass in some\narguments for example I'm going to say\nShawn and day the moment I do that and\ninvoke the function these values are\ngoing to overwrite these values so we\ncan see good day Shawn so what happens\nif I just pass one of them in well the\nfirst one will overwrite this value but\nthe second one will\nstill be the default value because we've\nnot passed in a second argument so if I\nsave it now and preview it we can see\ngood night shot we get Sean but night is\nstill the default value so then that is\nhow we're passing arguments into a\nfunction and how we receive those as\nparameters inside the function so then\nwe can use them all right then so when\nwe've been creating functions so far all\nwe've been doing inside the function is\nlogging something to the console and\nthat's fine but we might not always want\nto do this we might want to instead have\nthe function return a value to us for\nexample we could have a list of radiuses\nor radii I think the plural is called\nwhich we get from either a user or a\ndatabase or something else and we might\nwant to pass each of those radii into a\nfunction that calculates the area of a\ncircle now we don't want to log the area\nof the circle each time we call that\nfunction instead what we want to do is\nreceive that area of value back so it\ncan do something with it later on so\nlet's create this function first of all\nI'm going to comment this old one out\nand down here I'm going to create a new\nconstant called calc area and set this\nequal to a function and this function is\ngoing to take in a parameter which I'll\ncall radius and inside the function we\nwant to calculate the area of a circle\nso I'll do that we'll say let area equal\nto PI which is 3.14 times the radius\nsquared so to the power of 2 so now we\nhave that area value but we don't just\nwant to log it to the console we don't\nreally want to say console dot log area\nbecause if we do that then if we call a\nfunction later on calc area and passing\nsome kind of radius then it's going to\nlog this to the console but then we\ncan't do anything with that area later\non down the file because it's not stored\nin memory anywhere it's only stored\nlocally inside the function so we see\nthe area right here but if we try to use\nthe area later on then it's not going to\nwork I can't say console dot log area\nthat's not going to work because this is\na local variable now inside the function\nelement so instead it would be nice\nto return this area of value so we can\ndo that by using the return keyword and\nthen the thing that we want to return in\nour case we want to return this variable\narea so now when we call this we're not\nlogging the area to the console anymore\ninstead we're returning a value now\nwhat's going to happen if I save this\nand come over here we don't see anything\nso what we need to do is take the value\nthat is returned to us and do something\nwith it now when a function that returns\na value what we need to do is store that\nvalue in some kind of variable so what\nI'm going to do is say Const area is\nequal to calc area and then pass in 5 so\nwhat this does is call a function it\nreturns the area and the area now is\nreturned here so it's set equal to this\nnew constant which has a global scope\narea so I could say now console.log area\noops\narea and that's going to work so if we\nsave this and view we can see it and\nthese two things don't have to be called\nthe same by the way that just happened\nto be called the same so if I want to\ncall this a and console dot log a that\nwould still work okay we're just storing\nthe value that we get back regardless of\nwhat it's called here inside this new\nconstant ok I'm going to change that\nback to area because it makes more sense\nto me so that's how we return a value\nnow just a little bit of cleanup here\nwhat I want to do is get rid of the\nreturn here and just place it directly\nhere so we don't need to store this in a\nlocal variable first of all we can just\nreturn it directly that's going to\ncalculate this value and return that\nvalue directly so that's just a bit of\ncleanup so this is still going to work\nrefresh and we still get seventy eight\npoint five so the benefit of this is\nthat we can now take this area and do\nsomething with it we could create\nanother function to calculate the volume\nand pass in the area for example we\ncould say\nConst calc Revolt is equal to a function\nwhich takes in an area and inside that\nwill do something to calculate the\nvolume now we could call this\nlater on by saying calc vault and\npassing the area right here okay\nso we're able to reuse a value that a\nfunction brings back to us and I forgot\nmy semicolon there I'm gonna save that\nso there we've got my friends that is\nhow we can return values from functions\nall right then gang so arrow functions\nare a more modern addition to the\nJavaScript language and they offer us a\ncleaner and shorter way to write\nfunctions so what I'm gonna do is I'm\ngonna take this function that is a\nregular function we've already seen this\nto calculate the area and I'm going to\nturn this into an arrow function and\nshow you how we do this so I'll keep\nthis here as reference but what I'm\ngoing to do is come down here and create\na new constant and I'm going to call\nthis calc area it's the same name but\nwe'll comment this one out later on and\nwhen we create an arrow function we set\nit equal to first of all parentheses we\ndon't use the function keyword so the\nparentheses right here they take in any\nparameters that we have so we have the\nradius so let's pass that in then we do\nan arrow which is equals and then the\nChevron and then we open up our code\nblock at the end we can still do our\nsemicolon now inside this code block\nthis is where we do the function body\nwhich is this kind of thing right here\nso now then this is an arrow function\nversion of this regular function and\nit's just a bit shorter we don't have to\nwrite out the function keyword right\nhere so it's a bit easier to create now\nif I comment out this thing\nI'm calling this function right here so\nit should work so let me save it and\ncome over to the browser and we can see\nthat we get seventy eight point five for\nthe area so this is still working this\nour function okay it's just a newer and\nshorter way to write functions now we\ncan simplify this even more the first\nway we can simplify this is using these\nparentheses or rather taking them away\nwhen we only have one parameter we can\ntake away these parentheses and this is\nstill going to work if I save it and\nrefresh we can see we still get that now\nthis only works when there's exactly one\nparameter if we were to pass in two\nparameters then we need the parentheses\nso radius and then something else we\nneed the parentheses there when there's\nmore than one parameter likewise if\nthere's no parameters we also need the\nparentheses there we can't just take\nthem away because that wouldn't be an\nerror function we need the parentheses\nthere when there's zero parameters or\nmore than one but if there is just one\nparameter we can take away the\nparentheses like that okay so the next\nthing we can do when we just have a\nsingle return like this on one line we\ncan actually take away the return\nkeyword and we can scoot it up to the\nsame line over here and we can take away\nthe code block curly braces like so and\nnow what this does is return this value\neven though we don't write out the\nreturn keyword like that it still\nreturns the value look if we try to\nreturn here on one line we get a\nsquiggly line under it meaning that's\nnot what we're meant to do we just write\nout value that we want to return if I\nwanted to return a value which was hello\nI write it there and it would return\nthat and then this right here would get\nthe value of hello whatever is returned\nI don't want to do that I want to return\nthis thing which is the area if I save\nit now and run it then this still works\nso this kind of syntax if you're\ncomparing it to this is now a lot\nshorter and a lot easier to write so\nremember one parameter and we can remove\nthe parentheses anymore and we need them\nor any less and we need them and if\nwe're just returning something very\nsimply on one line we can move it up to\nthe next line\nremove the return keyword and also\nremove the curly braces so there is\nanother major difference between a\nregular function like this and an error\nfunction and that is to do with the\nbinding of the this keyword which we've\nnot covered yet and that means there\nwill be times when error functions\nshouldn't necessarily be used but I\ndon't want to delve into that just yet\nit's beyond the scope of this video put\nintended but we will cover that at a\nlater time\nnow as a little exercise just to get\nused to error\nfunctions what I've done is I've created\nsome regular functions down here so I'm\njust gonna cut those and I'm gonna paste\nthem up here like so and delete all the\nspace I don't need that and I'm gonna\njust get rid of all this because we\ndon't need these anymore\nand what we're gonna do is just practice\nturning or regular functions into arrow\nfunctions so right here we have another\nsimple regular function so if you want\nto pause the video right here and try it\nout for yourself then unpause and watch\nhow I do it that's absolutely fine but\nwhat I'm gonna do now is do an arrow\nfunction version of this function so I'm\ngoing to say Const greet is going to be\nequal to function we don't have any\nparameters so we need the parentheses\nthen we do our arrow then we do our code\nblock I'm going to return hello world\nnow because we're doing a simple return\non one line we can remove that keyword\nand we can also scoot this up and remove\nthese things right here so this is the\nerror function version of this and if I\ntry to call this now I'm going to call\ngreet and I'm going to comment out this\nso there's no conflict and save it this\nshould work oops we need to log it to\nthe console so let's say Const test or\nresults is equal to this because we're\nreturning a value and that's going to be\nstored in result now so now we can say\nconsole dot log results and save it and\npreview and we can see that okay so\nlet's do the next example I'm going to\ncomment that one out and uncomment this\nthis one's a little more complex so we\nhave this Const :\nand it takes in two parameters then\ninside we're creating this local\nvariable called total and we're cycling\nthrough the products so we can see that\nproducts must be some kind of array and\nfor each product we're getting a total\nand we're adding the product value plus\nany kind of tax okay so just a simple\nformula then in the end we're returning\nthe total so this is more than just a\nsimple return statement now what I'm\ngoing to do is come down here and I'm\njust going to console dot log and we're\ngoing to console that log\nthe bill function and we're going to\npass in a couple of parameters or\narguments in this case so the first one\nis the product and this is going to be\nan array of prices essentially so we're\ngoing to take in the first one which is\n10 will do 15 and 30 after that we need\na second argument which is the tux and\nthat's just going to be not point two\nfor 20 percent\nnow I'm logging this directly in the\nconsole instead of storing this in some\nkind of variable and then logging it to\nthe console like we did here but this is\nexactly the same okay it's just a\nshorter way of doing it well login it\ndirectly okay so we have that let's just\nmake sure it works save it and we get\nthis as the total over here 66 so we\nknow what it should be so we're taking\nthose products in we're cycling through\nthem for each one we're adding to the\ntotal variable over here we're taking\nthe product price plus any tax on that\nprice which is not point two times the\nproduct price then we're returning the\ntotal so let's convert this now into an\nerror function so what I'm going to do\nis say Const bill is equal to\nparentheses we have more than one\nparameter so we need our parentheses we\ntake in the products and we also take in\nthe tax then we need our arrow then the\ncurly braces the N we'll do our\nsemicolon\nokay so inside this function what we're\ngoing to do is create the local variable\nso total equal zero and in fact we can\njust copy this stuff right here we don't\nneed to totally rewrite it again like so\nnow we can't shorten this to one line\nbecause we have all of this extra logic\nright here and that doesn't work with\nour functions on one line it only works\nwhen we have one simple return statement\nlike we did up here we're just returning\nsomething simple or with the area\nexample in here we have a lot more logic\nso we can't just scoot this up to one\nline but we can still have an arrow\nfunction which is still a bit shorter\nthan a regular function okay so this is\nthe error function version of this\nthere's not that much difference we just\nremove the function keyword and add on\nthe arrow that's all we're doing\nessentially so let me comment this out\nand make sure this one\nstill works we're calling it down here\nsave it and preview and we still get 66\nso then a lot of the time in this course\nI will be using arrow functions as we go\nforward so if you ever need a refresher\ndo come back to this video and like I\nsaid there is another major advantage of\narrow functions in some cases when it\ncomes to the this keyword sometimes it's\na disadvantage and we'll talk about that\nlater on all right then so hopefully now\nyou're going to be quite clued up as to\nwhat a function is it's a block of code\nto do something that can be invoked and\nrun at any point in our code so now I\nwant you to cache your mind back to when\nwe were talking about strings and\nnumbers and other data types now we use\nsomething called methods on those data\ntypes which did something for us and I\nsaid that methods and functions are kind\nof synonymous with one another because\nthey do the same thing right\nthey can be invoked so we're in a bit of\ncode which does something for us so a\nmethod is just a function now what\ndistinguishes methods is the way that we\ninvoke them and where they are defined\nnow if we have just a regular function\nor an arrow function and in fact I'm\ngoing to create this I'll say Const\ngreet is equal to an arrow function and\nthis error function is just going to\nreturn a value hello\nnow what I'm gonna do is I'm going to\nstore a results we'll call it result 1\nequal to greet so now when we invoke\nthis function like this we're getting\nthis value back and we're storing it in\nthis variable so we could log this to\nthe console will just log results 1 and\nthis will work so we should see hello so\nnotice when we invoke this regular arrow\nfunction we just invoke it like this the\nfunction name and then parentheses now\nwhen we use a method the method is\ninvoked using dot notation so remember\nwe could take a string and use the\nmethod on it called to uppercase and the\nway we do that is by taking that string\nand saying dot to uppercase so the value\nthen dot notation then the\nname now this is still just a function\nright but the way we invoke it is\ndifferent we're using dot notation right\nhere on the value itself whereas here\nwe're not doing that we're just invoking\nit directly by saying the function name\nand then parentheses in both cases we do\nstill use parentheses and in both cases\nwe can pass in arguments to them the\nonly difference in how we're calling\nthem is that we're calling a method on\nthe back of something using dot notation\nso what I'm gonna do is store this in a\nresult as well so let's result to equal\nto this thing and then I'm going to\nconsole dot log results too and this is\ngonna work\nso I'll save it and preview and we can\nsee this right here Sean so then methods\nare functions but they're functions\nwhich are associated with an object or\ndatatype if you like like a string\nthey're defined on an object or datatype\nwhereas our function was just defined\nhere on its old not on an object on\ndatatype so we've not covered objects\nyet so i don't we need to freak out\nthinking you don't know what they are\nbut they're one of the seven datatypes\nin java script in the future we will\nlook objects' and then create our own\nmethods on our own objects and we'll\nalso be using many methods built into\nthe JavaScript language like this thing\nright here as well but for now I just\nwanted to plant the seed to let you know\nthat these methods that we use are still\njust functions that do something for us\nthey are essentially the same thing just\nwith a different name and the difference\nis how we call them and where they are\ndefined so that is good enough for now\nokay then so we know now what functions\nare hopefully and we know that methods\nand functions too and we've also seen\nthat we can pass arguments into\nfunctions and methods when we invoke\nthem and we can use those values those\narguments inside the function now so far\nthose arguments that we've been passing\nin have just been things like strings or\nnumbers or something but we can also\npass in a function as an argument and\nwhen we do this the function we pass in\nis called a callback function so take a\nlook at this example\nI've created here a function called my\nfunk it's a narrow function and it takes\nin as a parameter a callback function\nnow this can be called whatever you want\nyou don't have to call it callback\nfunction this is just what I've called\nit so inside this function right here\nwe'd do something and then at some point\nthe idea is that we call this callback\nfunction okay so when we invoke my funk\nwe need to pass in some kind of function\nas a parameter so what I'm doing is\ncalling my down here and let me\njust cut this for a second so you can\nsee we're just calling the function like\nthat then as an argument instead of\npassing in like a string like we\nnormally would instead what we're doing\nis we're passing in a function as an\nargument so this is just a regular\nfunction using a function keyword and\ninside it does something now when we\ncall the callback function up here what\nwe're doing is calling that callback\nfunction and we're passing in this value\nas an argument this value is something\nwe define inside the function up here so\ninside the callback function when we\npass it in we have to declare that\nparameter because when we call it we're\ngoing to be getting a value inside it so\nnow that value is passed into this\ncallback function when it's called and\nwe can log it to the console if we want\nto or do something else with it so if I\nsave this and preview we can see that\nvalue logged to the console now this\nseems like a lot of work to do just this\nwhat I've just done but this is just to\ndemonstrate the general premise of a\ncallback function we pass a function\ninto something another function as an\nargument and at some point in that other\nfunction that callback function will\nprobably be called\nand may be passed a value which we can\ntake in so that's the general premise\nnow what I'm gonna do is convert this\ninto an error function right here so\nfirst of all I get rid of the function\nkeyword then we need an arrow like so\nand then because there's only one\nparameter right here then we can just\ndelete these parentheses so this is\nexactly the same and this a lot of the\ntime is how you're going to see callback\nfunctions define\nokay when we pass them into another\nfunction so that's the general premise\nwhen we're creating our own function\nhere and taken in a callback function we\ndefine that callback function right here\nokay so now we know that what I'm gonna\ndo is delete this and you can see here\nI've created a variable called people\nand this is equal to an array of\ndifferent people they're all strings now\nwhat I'm going to do now is use a\nbuilt-in array method okay so remember\nmethods are just functions we're using a\nfunction on this array so I'm going to\ntake people and this method is called\nfor each now then for each is a method\nwhich iterates over an array it's a bit\nlike a loop where we iterate over some\nkind of array but in my eyes this is a\nlittle more elegant now this for each\nmethod expects as an argument in here a\ncallback function so let's do this as a\nregular function first of all because\nsometimes I think it's easier to\nvisualize this way so like so and then\nif I see in here console dot log and\nwe'll say I don't know something so what\nthis for each method does here is it\niterates through an array and the array\niterating through is people and for each\nelement inside that array it calls this\ncallback function so this is going to\nlog out for each element inside that\narray so we should see one two three\nfour five times because the function is\ngoing to fire five times once for each\nelement in the array so if I save it and\npreview we can see we get five right\nthere next to something okay so it's\ndone it five times okay then now inside\nthis callback function we can actually\ntake a couple of different parameters\nthe first one is whatever the value is\nat the time that we're iterating over so\nevery time we fire the function for each\nindividual element we get that element\nas our first parameter now I'm calling\nit person because it makes sense to use\nthe singular of people because these are\nall people so each one is a purse\nbut you can call it whatever you want\nyou can call it Val if you want it\ndoesn't matter I call it the singular of\nwhatever this is so now we can log out\nthe person each time around so that\nshould be Mario then Luigi then Ryu then\nShawn and then chun-li so let's save it\nand we can see those right here ok so\nagain all we're doing is iterating\nthrough this array using for each and\nfiring a callback function which we pass\nthrough as a parameter or an argument\nrather to the for each method for each\nindividual item in the array and we get\naccess to that person in the array each\ntime around ok then so now let's convert\nthis into an arrow function right here\nbecause that's mainly how you're going\nto see this written so we delete the\nfunction keyword and we add our arrow\nright here like so now because there's\nonly one parameter we can delete this if\nwe want to so now it's just person into\nthe arrow function so if we save this\nit's going to do exactly the same thing\nall right so you're going to see me\nwrite callback functions like this a lot\nof the time using arrow functions now\nthen this callback function right here\ninside for each not only takes the value\nof each individual element as a\nparameter but we can also take in a\nsecond optional parameter and that is\nthe index of the element so when we fire\nthe function for the first time it's\ngoing to be zero because that's the\nindex then the second time it's going to\nbe one because that's the index then two\nthen three so we could log out the index\nand the person so if we save that and\npreview we can see now we get the index\nand the person so there are two\ndifferent parameters we can pass into\nthis function now if you wanted to you\ncould define a callback function\nsomewhere else and then just pass it in\nto the for each method or whatever\nmethod we're using now to do that I'm\ngoing to come up here and create a new\nConst and I'm going to call this a log\nperson and this is going to be equal to\nan error function we're taking the\nperson and the index much like we did\ndown here then inside this function I'm\ngoing to just log\ntemplates drink so I'm going to say\nconsole dot log and then a template\nstring we're going to output first of\nall the index variable and then I'm\ngoing to output a dash and then I'll say\nhello and then the person okay so now\nwe've created this function what I can\ndo is use this function as a callback\nfunction for this method so instead of\ndefining the function here now we're\ndefining it up here and now I could just\nsay log person like so and what we're\ndoing is essentially passing this error\nfunction into this for each method it's\ndoing exactly the same thing and this\nshould still work so although it's\nspelled incorrectly hello we still get\nthe desired results so a lot of the time\nyou're gonna see me write callback\nfunctions directly in here especially\nwhen they're just small functions\nbecause I think it's easier than writing\nseparate functions out here somewhere\nthen passing them in it looks nicer as\nwell but sometimes if we have a large\nfunction then we're going to externalize\nthem create them somewhere else and then\npass them in as a callback function so\nhopefully now you understand what\ncallback functions are they're just\nnormal functions that we pass in to\nanother function or another method as an\nargument okay then so now we know what\ncallback functions are I'd like to have\na little look at one in action so what\nI've done is I've gone through the index\ndot HTML and I've already added this URL\nwith a class of people and in sandbox\njeaious we have this constant people\nwhich is an array of different people\nnow what I'd like to do is use for each\nto iterate through each one of these\nelements each name and for each one\nwe're going to fire a callback function\nbecause we pass that through as a\nparameter or an argument to for each so\nthat function is going to generate some\nkind of HTML template for each one of\nthese different elements and it's going\nto output that to the browser inside the\nUL does that make sense ok so then first\nof all let's come down here and say\npeople dot for each and what we're going\nto do is pass a callback function into\nthis and we'll convert this into an\nerror function later on\nbut for now let's just take in the\nperson each time around we find this\nwhich is the element that we're\ncurrently iterating over so what I'd\nlike to do now is create an HTML\ntemplate for each one for each person so\nI'm going to say up here outside of the\nfor each method let HTML equal to an\nempty template string so backticks now\ninside of what we're going to do is\nappend to this HTML for each person so\nI'm going to say HTML plus equals which\ntakes the current value of HTML and adds\nthem all to it and what we're gonna do\nis concatenate a bit of a template\nstring so Li will do first of all and\nthis is going to have a style property\nset to color and we'll color these\npurple and then close that off then\ninside the LI we want to output the\nperson so we'll do that right there and\nthen after the person we close the Li\ntag okay so what we're doing for each\nperson is we're adding this snippet this\ntemplate onto the HTML so each time\naround each time we fire this callback\nfunction for each element we're adding\nthis on to the HTML okay so by the end\nof it the HTML is going to look like a\nbig list of Li tags so let me just love\nthis to the console console dot log the\nHTML okay so let's save this and view it\nin a browser and we can see this is the\nfinal HTML code so we want to take this\nnow which is a series of Li tags with\nthe different names inside it and we\nwant to output it to the browser now\nwe've not covered any kind of browser\ninteraction yet we don't know how to do\nthis kind of stuff and I don't expect\nyou to understand what I'm about to do\nbut the first step is to get a reference\nto an element on the page well we want\nthe UL that's where we're going to\ninject our HTML so I say u L is equal to\ndocument query selector and then I grab\nthat ul by using a CSS selector dots\npeople that gets the people class okay\nagain I don't expect you to understand\nthis much yet we're going to cover this\nlater\nthen what I'm going to do is take that\nKewell because we stored it right here\nand I'm gonna set the inner HTML\nproperty to be the HTML that we just\ncreated which is this variable so when\nwe do that it takes this HTML it grabs\nthis URL and it places this HTML inside\nthe UL okay so let me save that and\npreview and now we can see all of this\nstuff right here if I inspect that then\nwe can see inside the UL we have all of\nthese different Li tags so that is just\none use of this for each and a callback\nfunction to create some HTML templates\nfor data we're going to do much more of\nthis stuff later on when we start to\nwork with the DOM and the browser and\nthis as well so again don't feel like\nyou have to understand it all now I just\nwanted to give you a quick example of\nhow we could use far reach and a\ncallback function to good use one last\nthing I do just want to convert this\ninto an arrow function so let's take\naway the function keyword we can take\naway the parentheses because we only\nhave one parameter and we do our little\narrow finally and that is absolutely\nfine we can leave it like that so save\nit let's see if this still works and it\ndoes\n",
  "words": [
    "okay",
    "friends",
    "time",
    "move",
    "functions",
    "think",
    "really",
    "fun",
    "parts",
    "javascript",
    "functions",
    "probably",
    "one",
    "main",
    "building",
    "blocks",
    "pretty",
    "much",
    "programming",
    "language",
    "come",
    "across",
    "fall",
    "object",
    "type",
    "data",
    "type",
    "list",
    "functions",
    "allow",
    "us",
    "define",
    "block",
    "code",
    "call",
    "execute",
    "whenever",
    "want",
    "guess",
    "could",
    "think",
    "functions",
    "bit",
    "like",
    "box",
    "code",
    "inside",
    "particular",
    "thing",
    "like",
    "want",
    "run",
    "code",
    "inside",
    "function",
    "call",
    "function",
    "like",
    "runs",
    "code",
    "inside",
    "later",
    "want",
    "call",
    "runs",
    "code",
    "behavior",
    "really",
    "useful",
    "means",
    "defining",
    "code",
    "inside",
    "function",
    "run",
    "multiple",
    "times",
    "whenever",
    "want",
    "whenever",
    "call",
    "imagine",
    "web",
    "page",
    "button",
    "every",
    "time",
    "user",
    "clicks",
    "button",
    "want",
    "run",
    "bit",
    "code",
    "could",
    "create",
    "function",
    "contains",
    "code",
    "want",
    "run",
    "whenever",
    "user",
    "clicks",
    "button",
    "call",
    "function",
    "run",
    "code",
    "whether",
    "user",
    "clicks",
    "twice",
    "ten",
    "times",
    "really",
    "matter",
    "define",
    "code",
    "function",
    "run",
    "call",
    "many",
    "times",
    "want",
    "future",
    "could",
    "also",
    "pass",
    "values",
    "functions",
    "function",
    "could",
    "take",
    "values",
    "something",
    "done",
    "spit",
    "updated",
    "value",
    "end",
    "example",
    "would",
    "receive",
    "maybe",
    "list",
    "geo",
    "coordinates",
    "database",
    "want",
    "convert",
    "kind",
    "real",
    "address",
    "could",
    "write",
    "function",
    "takes",
    "latitude",
    "longitude",
    "value",
    "grabs",
    "converts",
    "kind",
    "real",
    "address",
    "say",
    "get",
    "list",
    "different",
    "coordinates",
    "50",
    "total",
    "defining",
    "function",
    "could",
    "call",
    "function",
    "50",
    "times",
    "three",
    "times",
    "enough",
    "room",
    "screen",
    "could",
    "call",
    "many",
    "times",
    "wanted",
    "passing",
    "different",
    "coordinates",
    "time",
    "call",
    "takes",
    "coordinates",
    "spits",
    "real",
    "address",
    "power",
    "functions",
    "create",
    "little",
    "blocks",
    "code",
    "become",
    "reusable",
    "chapter",
    "going",
    "looking",
    "functions",
    "lot",
    "depth",
    "also",
    "take",
    "sneak",
    "peek",
    "could",
    "potentially",
    "use",
    "function",
    "interact",
    "webpage",
    "also",
    "going",
    "discussing",
    "methods",
    "little",
    "chapter",
    "much",
    "detail",
    "yet",
    "remember",
    "method",
    "function",
    "something",
    "small",
    "distinction",
    "functions",
    "methods",
    "discuss",
    "well",
    "right",
    "like",
    "show",
    "create",
    "first",
    "function",
    "first",
    "thing",
    "need",
    "write",
    "function",
    "keyword",
    "give",
    "function",
    "name",
    "going",
    "call",
    "greet",
    "much",
    "like",
    "gave",
    "variable",
    "name",
    "also",
    "give",
    "functions",
    "name",
    "name",
    "place",
    "parentheses",
    "curly",
    "braces",
    "curly",
    "braces",
    "code",
    "block",
    "function",
    "code",
    "function",
    "goes",
    "inside",
    "code",
    "block",
    "whenever",
    "call",
    "function",
    "future",
    "going",
    "execute",
    "going",
    "keep",
    "simple",
    "console",
    "dot",
    "log",
    "say",
    "hello",
    "declared",
    "function",
    "call",
    "point",
    "later",
    "code",
    "save",
    "minute",
    "run",
    "browser",
    "nothing",
    "going",
    "logged",
    "console",
    "even",
    "though",
    "defined",
    "function",
    "actually",
    "called",
    "function",
    "order",
    "call",
    "function",
    "need",
    "say",
    "function",
    "name",
    "greet",
    "name",
    "right",
    "use",
    "parentheses",
    "call",
    "function",
    "known",
    "calling",
    "function",
    "also",
    "invoking",
    "function",
    "run",
    "going",
    "see",
    "going",
    "run",
    "function",
    "code",
    "block",
    "function",
    "hopefully",
    "log",
    "console",
    "see",
    "hello",
    "wanted",
    "run",
    "multiple",
    "times",
    "could",
    "want",
    "three",
    "times",
    "logged",
    "three",
    "times",
    "okay",
    "way",
    "creating",
    "function",
    "called",
    "function",
    "declaration",
    "declaring",
    "function",
    "also",
    "store",
    "functions",
    "variables",
    "invoke",
    "similar",
    "way",
    "gon",
    "na",
    "come",
    "going",
    "create",
    "const",
    "call",
    "speak",
    "storing",
    "constant",
    "want",
    "overwrite",
    "function",
    "later",
    "want",
    "change",
    "going",
    "set",
    "equal",
    "function",
    "give",
    "function",
    "name",
    "like",
    "name",
    "constant",
    "variable",
    "add",
    "code",
    "block",
    "end",
    "known",
    "function",
    "expression",
    "basically",
    "anytime",
    "get",
    "variable",
    "set",
    "equal",
    "something",
    "whether",
    "function",
    "string",
    "number",
    "something",
    "else",
    "known",
    "expression",
    "okay",
    "end",
    "expressions",
    "always",
    "semicolons",
    "going",
    "put",
    "semicolon",
    "end",
    "function",
    "semicolon",
    "end",
    "function",
    "expression",
    "semicolon",
    "probably",
    "one",
    "times",
    "going",
    "see",
    "semicolon",
    "end",
    "code",
    "block",
    "use",
    "function",
    "expression",
    "function",
    "stored",
    "constant",
    "inside",
    "function",
    "going",
    "something",
    "like",
    "say",
    "good",
    "day",
    "okay",
    "call",
    "function",
    "invoke",
    "well",
    "invoke",
    "exactly",
    "way",
    "say",
    "speak",
    "parentheses",
    "name",
    "constant",
    "followed",
    "parentheses",
    "invoke",
    "function",
    "going",
    "comment",
    "three",
    "save",
    "preview",
    "see",
    "good",
    "day",
    "gon",
    "na",
    "duplicate",
    "couple",
    "times",
    "save",
    "see",
    "get",
    "three",
    "good",
    "days",
    "call",
    "many",
    "times",
    "want",
    "function",
    "expression",
    "store",
    "function",
    "inside",
    "variable",
    "function",
    "declaration",
    "time",
    "two",
    "different",
    "ways",
    "creating",
    "functions",
    "behave",
    "way",
    "subtle",
    "difference",
    "comes",
    "something",
    "called",
    "hoisting",
    "javascript",
    "hoisting",
    "term",
    "loosely",
    "describes",
    "functions",
    "effectively",
    "hoisted",
    "top",
    "file",
    "rest",
    "javascript",
    "actually",
    "runs",
    "essence",
    "declared",
    "rest",
    "job",
    "script",
    "function",
    "declarations",
    "function",
    "expressions",
    "means",
    "could",
    "potentially",
    "declare",
    "function",
    "using",
    "function",
    "declaration",
    "bottom",
    "file",
    "could",
    "still",
    "run",
    "things",
    "okay",
    "let",
    "come",
    "speak",
    "use",
    "greet",
    "happening",
    "javascript",
    "using",
    "hoisting",
    "hoist",
    "function",
    "essentially",
    "top",
    "file",
    "gross",
    "oversimplification",
    "essentially",
    "effect",
    "even",
    "though",
    "defined",
    "effectively",
    "hoisting",
    "top",
    "therefore",
    "using",
    "use",
    "already",
    "defined",
    "point",
    "save",
    "run",
    "see",
    "greets",
    "right",
    "still",
    "working",
    "even",
    "though",
    "function",
    "comes",
    "call",
    "hoisting",
    "works",
    "function",
    "declarations",
    "work",
    "function",
    "expressions",
    "take",
    "one",
    "put",
    "bottom",
    "try",
    "use",
    "speak",
    "going",
    "work",
    "javascript",
    "hoist",
    "function",
    "expressions",
    "function",
    "declarations",
    "save",
    "preview",
    "get",
    "error",
    "speak",
    "defined",
    "time",
    "javascript",
    "reaches",
    "tries",
    "call",
    "speak",
    "invoke",
    "speak",
    "yet",
    "defined",
    "hoisted",
    "top",
    "might",
    "seem",
    "like",
    "good",
    "idea",
    "use",
    "function",
    "declaration",
    "instead",
    "function",
    "expression",
    "first",
    "actually",
    "good",
    "idea",
    "seems",
    "jumbled",
    "enforce",
    "good",
    "coding",
    "practice",
    "declaring",
    "things",
    "really",
    "think",
    "declare",
    "something",
    "first",
    "use",
    "keep",
    "logical",
    "flow",
    "code",
    "could",
    "end",
    "mishmash",
    "functions",
    "calls",
    "place",
    "therefore",
    "prefer",
    "time",
    "use",
    "function",
    "expressions",
    "like",
    "hoisted",
    "define",
    "functions",
    "first",
    "top",
    "use",
    "without",
    "creating",
    "functions",
    "future",
    "time",
    "probably",
    "going",
    "create",
    "like",
    "alright",
    "sometimes",
    "like",
    "pass",
    "values",
    "functions",
    "something",
    "value",
    "example",
    "could",
    "want",
    "pass",
    "kind",
    "name",
    "speak",
    "function",
    "maybe",
    "put",
    "name",
    "console",
    "first",
    "declare",
    "want",
    "receive",
    "kind",
    "value",
    "inside",
    "function",
    "inside",
    "function",
    "parentheses",
    "name",
    "something",
    "going",
    "name",
    "name",
    "want",
    "receive",
    "create",
    "local",
    "variable",
    "called",
    "name",
    "use",
    "inside",
    "code",
    "block",
    "wanted",
    "could",
    "output",
    "inside",
    "going",
    "convert",
    "template",
    "string",
    "says",
    "good",
    "day",
    "outputs",
    "name",
    "try",
    "minute",
    "call",
    "actually",
    "passing",
    "value",
    "function",
    "going",
    "work",
    "save",
    "preview",
    "say",
    "good",
    "day",
    "undefined",
    "makes",
    "sense",
    "actually",
    "pass",
    "value",
    "function",
    "say",
    "example",
    "come",
    "say",
    "mario",
    "save",
    "going",
    "happen",
    "going",
    "call",
    "speak",
    "function",
    "going",
    "pass",
    "value",
    "well",
    "function",
    "called",
    "takes",
    "value",
    "assigns",
    "named",
    "variable",
    "created",
    "access",
    "value",
    "inside",
    "function",
    "save",
    "preview",
    "see",
    "says",
    "good",
    "day",
    "mario",
    "taking",
    "value",
    "assigned",
    "local",
    "variable",
    "ca",
    "access",
    "name",
    "outside",
    "function",
    "local",
    "variable",
    "work",
    "trying",
    "nothing",
    "going",
    "happen",
    "variable",
    "scope",
    "function",
    "used",
    "inside",
    "pass",
    "value",
    "like",
    "function",
    "right",
    "known",
    "argument",
    "receive",
    "value",
    "create",
    "different",
    "values",
    "inside",
    "function",
    "called",
    "function",
    "parameters",
    "two",
    "names",
    "interchangeable",
    "lot",
    "people",
    "get",
    "mixed",
    "including",
    "probably",
    "sometimes",
    "hear",
    "say",
    "argument",
    "parameter",
    "names",
    "names",
    "important",
    "idea",
    "passing",
    "value",
    "function",
    "use",
    "sometimes",
    "might",
    "want",
    "pass",
    "different",
    "values",
    "function",
    "first",
    "declaring",
    "different",
    "parameters",
    "going",
    "take",
    "one",
    "called",
    "time",
    "well",
    "come",
    "separate",
    "arguments",
    "plus",
    "morning",
    "output",
    "instead",
    "date",
    "output",
    "time",
    "say",
    "good",
    "morning",
    "mario",
    "passing",
    "mario",
    "morning",
    "save",
    "preview",
    "see",
    "good",
    "morning",
    "mario",
    "order",
    "important",
    "order",
    "arguments",
    "must",
    "match",
    "order",
    "parameters",
    "ca",
    "pass",
    "name",
    "second",
    "time",
    "first",
    "expect",
    "function",
    "going",
    "know",
    "things",
    "know",
    "assigns",
    "first",
    "thing",
    "first",
    "thing",
    "second",
    "thing",
    "second",
    "thing",
    "third",
    "third",
    "fourth",
    "fourth",
    "forth",
    "okay",
    "something",
    "like",
    "call",
    "speak",
    "pass",
    "values",
    "seen",
    "get",
    "good",
    "undefined",
    "undefined",
    "make",
    "sense",
    "combat",
    "case",
    "function",
    "invoked",
    "without",
    "passing",
    "anything",
    "could",
    "give",
    "parameters",
    "default",
    "values",
    "could",
    "say",
    "something",
    "like",
    "name",
    "equal",
    "luigi",
    "time",
    "going",
    "equal",
    "night",
    "invoke",
    "speak",
    "function",
    "pass",
    "arguments",
    "function",
    "going",
    "happen",
    "function",
    "assign",
    "default",
    "values",
    "parameters",
    "say",
    "good",
    "night",
    "luigi",
    "save",
    "preview",
    "see",
    "good",
    "night",
    "luigi",
    "moment",
    "pass",
    "arguments",
    "example",
    "going",
    "say",
    "shawn",
    "day",
    "moment",
    "invoke",
    "function",
    "values",
    "going",
    "overwrite",
    "values",
    "see",
    "good",
    "day",
    "shawn",
    "happens",
    "pass",
    "one",
    "well",
    "first",
    "one",
    "overwrite",
    "value",
    "second",
    "one",
    "still",
    "default",
    "value",
    "passed",
    "second",
    "argument",
    "save",
    "preview",
    "see",
    "good",
    "night",
    "shot",
    "get",
    "sean",
    "night",
    "still",
    "default",
    "value",
    "passing",
    "arguments",
    "function",
    "receive",
    "parameters",
    "inside",
    "function",
    "use",
    "right",
    "creating",
    "functions",
    "far",
    "inside",
    "function",
    "logging",
    "something",
    "console",
    "fine",
    "might",
    "always",
    "want",
    "might",
    "want",
    "instead",
    "function",
    "return",
    "value",
    "us",
    "example",
    "could",
    "list",
    "radiuses",
    "radii",
    "think",
    "plural",
    "called",
    "get",
    "either",
    "user",
    "database",
    "something",
    "else",
    "might",
    "want",
    "pass",
    "radii",
    "function",
    "calculates",
    "area",
    "circle",
    "want",
    "log",
    "area",
    "circle",
    "time",
    "call",
    "function",
    "instead",
    "want",
    "receive",
    "area",
    "value",
    "back",
    "something",
    "later",
    "let",
    "create",
    "function",
    "first",
    "going",
    "comment",
    "old",
    "one",
    "going",
    "create",
    "new",
    "constant",
    "called",
    "calc",
    "area",
    "set",
    "equal",
    "function",
    "function",
    "going",
    "take",
    "parameter",
    "call",
    "radius",
    "inside",
    "function",
    "want",
    "calculate",
    "area",
    "circle",
    "say",
    "let",
    "area",
    "equal",
    "pi",
    "times",
    "radius",
    "squared",
    "power",
    "2",
    "area",
    "value",
    "want",
    "log",
    "console",
    "really",
    "want",
    "say",
    "console",
    "dot",
    "log",
    "area",
    "call",
    "function",
    "later",
    "calc",
    "area",
    "passing",
    "kind",
    "radius",
    "going",
    "log",
    "console",
    "ca",
    "anything",
    "area",
    "later",
    "file",
    "stored",
    "memory",
    "anywhere",
    "stored",
    "locally",
    "inside",
    "function",
    "see",
    "area",
    "right",
    "try",
    "use",
    "area",
    "later",
    "going",
    "work",
    "ca",
    "say",
    "console",
    "dot",
    "log",
    "area",
    "going",
    "work",
    "local",
    "variable",
    "inside",
    "function",
    "element",
    "instead",
    "would",
    "nice",
    "return",
    "area",
    "value",
    "using",
    "return",
    "keyword",
    "thing",
    "want",
    "return",
    "case",
    "want",
    "return",
    "variable",
    "area",
    "call",
    "logging",
    "area",
    "console",
    "anymore",
    "instead",
    "returning",
    "value",
    "going",
    "happen",
    "save",
    "come",
    "see",
    "anything",
    "need",
    "take",
    "value",
    "returned",
    "us",
    "something",
    "function",
    "returns",
    "value",
    "need",
    "store",
    "value",
    "kind",
    "variable",
    "going",
    "say",
    "const",
    "area",
    "equal",
    "calc",
    "area",
    "pass",
    "5",
    "call",
    "function",
    "returns",
    "area",
    "area",
    "returned",
    "set",
    "equal",
    "new",
    "constant",
    "global",
    "scope",
    "area",
    "could",
    "say",
    "area",
    "oops",
    "area",
    "going",
    "work",
    "save",
    "view",
    "see",
    "two",
    "things",
    "called",
    "way",
    "happened",
    "called",
    "want",
    "call",
    "console",
    "dot",
    "log",
    "would",
    "still",
    "work",
    "okay",
    "storing",
    "value",
    "get",
    "back",
    "regardless",
    "called",
    "inside",
    "new",
    "constant",
    "ok",
    "going",
    "change",
    "back",
    "area",
    "makes",
    "sense",
    "return",
    "value",
    "little",
    "bit",
    "cleanup",
    "want",
    "get",
    "rid",
    "return",
    "place",
    "directly",
    "need",
    "store",
    "local",
    "variable",
    "first",
    "return",
    "directly",
    "going",
    "calculate",
    "value",
    "return",
    "value",
    "directly",
    "bit",
    "cleanup",
    "still",
    "going",
    "work",
    "refresh",
    "still",
    "get",
    "seventy",
    "eight",
    "point",
    "five",
    "benefit",
    "take",
    "area",
    "something",
    "could",
    "create",
    "another",
    "function",
    "calculate",
    "volume",
    "pass",
    "area",
    "example",
    "could",
    "say",
    "const",
    "calc",
    "revolt",
    "equal",
    "function",
    "takes",
    "area",
    "inside",
    "something",
    "calculate",
    "volume",
    "could",
    "call",
    "later",
    "saying",
    "calc",
    "vault",
    "passing",
    "area",
    "right",
    "okay",
    "able",
    "reuse",
    "value",
    "function",
    "brings",
    "back",
    "us",
    "forgot",
    "semicolon",
    "gon",
    "na",
    "save",
    "got",
    "friends",
    "return",
    "values",
    "functions",
    "right",
    "gang",
    "arrow",
    "functions",
    "modern",
    "addition",
    "javascript",
    "language",
    "offer",
    "us",
    "cleaner",
    "shorter",
    "way",
    "write",
    "functions",
    "gon",
    "na",
    "gon",
    "na",
    "take",
    "function",
    "regular",
    "function",
    "already",
    "seen",
    "calculate",
    "area",
    "going",
    "turn",
    "arrow",
    "function",
    "show",
    "keep",
    "reference",
    "going",
    "come",
    "create",
    "new",
    "constant",
    "going",
    "call",
    "calc",
    "area",
    "name",
    "comment",
    "one",
    "later",
    "create",
    "arrow",
    "function",
    "set",
    "equal",
    "first",
    "parentheses",
    "use",
    "function",
    "keyword",
    "parentheses",
    "right",
    "take",
    "parameters",
    "radius",
    "let",
    "pass",
    "arrow",
    "equals",
    "chevron",
    "open",
    "code",
    "block",
    "end",
    "still",
    "semicolon",
    "inside",
    "code",
    "block",
    "function",
    "body",
    "kind",
    "thing",
    "right",
    "arrow",
    "function",
    "version",
    "regular",
    "function",
    "bit",
    "shorter",
    "write",
    "function",
    "keyword",
    "right",
    "bit",
    "easier",
    "create",
    "comment",
    "thing",
    "calling",
    "function",
    "right",
    "work",
    "let",
    "save",
    "come",
    "browser",
    "see",
    "get",
    "seventy",
    "eight",
    "point",
    "five",
    "area",
    "still",
    "working",
    "function",
    "okay",
    "newer",
    "shorter",
    "way",
    "write",
    "functions",
    "simplify",
    "even",
    "first",
    "way",
    "simplify",
    "using",
    "parentheses",
    "rather",
    "taking",
    "away",
    "one",
    "parameter",
    "take",
    "away",
    "parentheses",
    "still",
    "going",
    "work",
    "save",
    "refresh",
    "see",
    "still",
    "get",
    "works",
    "exactly",
    "one",
    "parameter",
    "pass",
    "two",
    "parameters",
    "need",
    "parentheses",
    "radius",
    "something",
    "else",
    "need",
    "parentheses",
    "one",
    "parameter",
    "likewise",
    "parameters",
    "also",
    "need",
    "parentheses",
    "ca",
    "take",
    "away",
    "would",
    "error",
    "function",
    "need",
    "parentheses",
    "zero",
    "parameters",
    "one",
    "one",
    "parameter",
    "take",
    "away",
    "parentheses",
    "like",
    "okay",
    "next",
    "thing",
    "single",
    "return",
    "like",
    "one",
    "line",
    "actually",
    "take",
    "away",
    "return",
    "keyword",
    "scoot",
    "line",
    "take",
    "away",
    "code",
    "block",
    "curly",
    "braces",
    "like",
    "return",
    "value",
    "even",
    "though",
    "write",
    "return",
    "keyword",
    "like",
    "still",
    "returns",
    "value",
    "look",
    "try",
    "return",
    "one",
    "line",
    "get",
    "squiggly",
    "line",
    "meaning",
    "meant",
    "write",
    "value",
    "want",
    "return",
    "wanted",
    "return",
    "value",
    "hello",
    "write",
    "would",
    "return",
    "right",
    "would",
    "get",
    "value",
    "hello",
    "whatever",
    "returned",
    "want",
    "want",
    "return",
    "thing",
    "area",
    "save",
    "run",
    "still",
    "works",
    "kind",
    "syntax",
    "comparing",
    "lot",
    "shorter",
    "lot",
    "easier",
    "write",
    "remember",
    "one",
    "parameter",
    "remove",
    "parentheses",
    "anymore",
    "need",
    "less",
    "need",
    "returning",
    "something",
    "simply",
    "one",
    "line",
    "move",
    "next",
    "line",
    "remove",
    "return",
    "keyword",
    "also",
    "remove",
    "curly",
    "braces",
    "another",
    "major",
    "difference",
    "regular",
    "function",
    "like",
    "error",
    "function",
    "binding",
    "keyword",
    "covered",
    "yet",
    "means",
    "times",
    "error",
    "functions",
    "necessarily",
    "used",
    "want",
    "delve",
    "yet",
    "beyond",
    "scope",
    "video",
    "put",
    "intended",
    "cover",
    "later",
    "time",
    "little",
    "exercise",
    "get",
    "used",
    "error",
    "functions",
    "done",
    "created",
    "regular",
    "functions",
    "gon",
    "na",
    "cut",
    "gon",
    "na",
    "paste",
    "like",
    "delete",
    "space",
    "need",
    "gon",
    "na",
    "get",
    "rid",
    "need",
    "anymore",
    "gon",
    "na",
    "practice",
    "turning",
    "regular",
    "functions",
    "arrow",
    "functions",
    "right",
    "another",
    "simple",
    "regular",
    "function",
    "want",
    "pause",
    "video",
    "right",
    "try",
    "unpause",
    "watch",
    "absolutely",
    "fine",
    "gon",
    "na",
    "arrow",
    "function",
    "version",
    "function",
    "going",
    "say",
    "const",
    "greet",
    "going",
    "equal",
    "function",
    "parameters",
    "need",
    "parentheses",
    "arrow",
    "code",
    "block",
    "going",
    "return",
    "hello",
    "world",
    "simple",
    "return",
    "one",
    "line",
    "remove",
    "keyword",
    "also",
    "scoot",
    "remove",
    "things",
    "right",
    "error",
    "function",
    "version",
    "try",
    "call",
    "going",
    "call",
    "greet",
    "going",
    "comment",
    "conflict",
    "save",
    "work",
    "oops",
    "need",
    "log",
    "console",
    "let",
    "say",
    "const",
    "test",
    "results",
    "equal",
    "returning",
    "value",
    "going",
    "stored",
    "result",
    "say",
    "console",
    "dot",
    "log",
    "results",
    "save",
    "preview",
    "see",
    "okay",
    "let",
    "next",
    "example",
    "going",
    "comment",
    "one",
    "uncomment",
    "one",
    "little",
    "complex",
    "const",
    "takes",
    "two",
    "parameters",
    "inside",
    "creating",
    "local",
    "variable",
    "called",
    "total",
    "cycling",
    "products",
    "see",
    "products",
    "must",
    "kind",
    "array",
    "product",
    "getting",
    "total",
    "adding",
    "product",
    "value",
    "plus",
    "kind",
    "tax",
    "okay",
    "simple",
    "formula",
    "end",
    "returning",
    "total",
    "simple",
    "return",
    "statement",
    "going",
    "come",
    "going",
    "console",
    "dot",
    "log",
    "going",
    "console",
    "log",
    "bill",
    "function",
    "going",
    "pass",
    "couple",
    "parameters",
    "arguments",
    "case",
    "first",
    "one",
    "product",
    "going",
    "array",
    "prices",
    "essentially",
    "going",
    "take",
    "first",
    "one",
    "10",
    "15",
    "30",
    "need",
    "second",
    "argument",
    "tux",
    "going",
    "point",
    "two",
    "20",
    "percent",
    "logging",
    "directly",
    "console",
    "instead",
    "storing",
    "kind",
    "variable",
    "logging",
    "console",
    "like",
    "exactly",
    "okay",
    "shorter",
    "way",
    "well",
    "login",
    "directly",
    "okay",
    "let",
    "make",
    "sure",
    "works",
    "save",
    "get",
    "total",
    "66",
    "know",
    "taking",
    "products",
    "cycling",
    "one",
    "adding",
    "total",
    "variable",
    "taking",
    "product",
    "price",
    "plus",
    "tax",
    "price",
    "point",
    "two",
    "times",
    "product",
    "price",
    "returning",
    "total",
    "let",
    "convert",
    "error",
    "function",
    "going",
    "say",
    "const",
    "bill",
    "equal",
    "parentheses",
    "one",
    "parameter",
    "need",
    "parentheses",
    "take",
    "products",
    "also",
    "take",
    "tax",
    "need",
    "arrow",
    "curly",
    "braces",
    "n",
    "semicolon",
    "okay",
    "inside",
    "function",
    "going",
    "create",
    "local",
    "variable",
    "total",
    "equal",
    "zero",
    "fact",
    "copy",
    "stuff",
    "right",
    "need",
    "totally",
    "rewrite",
    "like",
    "ca",
    "shorten",
    "one",
    "line",
    "extra",
    "logic",
    "right",
    "work",
    "functions",
    "one",
    "line",
    "works",
    "one",
    "simple",
    "return",
    "statement",
    "like",
    "returning",
    "something",
    "simple",
    "area",
    "example",
    "lot",
    "logic",
    "ca",
    "scoot",
    "one",
    "line",
    "still",
    "arrow",
    "function",
    "still",
    "bit",
    "shorter",
    "regular",
    "function",
    "okay",
    "error",
    "function",
    "version",
    "much",
    "difference",
    "remove",
    "function",
    "keyword",
    "add",
    "arrow",
    "essentially",
    "let",
    "comment",
    "make",
    "sure",
    "one",
    "still",
    "works",
    "calling",
    "save",
    "preview",
    "still",
    "get",
    "66",
    "lot",
    "time",
    "course",
    "using",
    "arrow",
    "functions",
    "go",
    "forward",
    "ever",
    "need",
    "refresher",
    "come",
    "back",
    "video",
    "like",
    "said",
    "another",
    "major",
    "advantage",
    "arrow",
    "functions",
    "cases",
    "comes",
    "keyword",
    "sometimes",
    "disadvantage",
    "talk",
    "later",
    "right",
    "hopefully",
    "going",
    "quite",
    "clued",
    "function",
    "block",
    "code",
    "something",
    "invoked",
    "run",
    "point",
    "code",
    "want",
    "cache",
    "mind",
    "back",
    "talking",
    "strings",
    "numbers",
    "data",
    "types",
    "use",
    "something",
    "called",
    "methods",
    "data",
    "types",
    "something",
    "us",
    "said",
    "methods",
    "functions",
    "kind",
    "synonymous",
    "one",
    "another",
    "thing",
    "right",
    "invoked",
    "bit",
    "code",
    "something",
    "us",
    "method",
    "function",
    "distinguishes",
    "methods",
    "way",
    "invoke",
    "defined",
    "regular",
    "function",
    "arrow",
    "function",
    "fact",
    "going",
    "create",
    "say",
    "const",
    "greet",
    "equal",
    "arrow",
    "function",
    "error",
    "function",
    "going",
    "return",
    "value",
    "hello",
    "gon",
    "na",
    "going",
    "store",
    "results",
    "call",
    "result",
    "1",
    "equal",
    "greet",
    "invoke",
    "function",
    "like",
    "getting",
    "value",
    "back",
    "storing",
    "variable",
    "could",
    "log",
    "console",
    "log",
    "results",
    "1",
    "work",
    "see",
    "hello",
    "notice",
    "invoke",
    "regular",
    "arrow",
    "function",
    "invoke",
    "like",
    "function",
    "name",
    "parentheses",
    "use",
    "method",
    "method",
    "invoked",
    "using",
    "dot",
    "notation",
    "remember",
    "could",
    "take",
    "string",
    "use",
    "method",
    "called",
    "uppercase",
    "way",
    "taking",
    "string",
    "saying",
    "dot",
    "uppercase",
    "value",
    "dot",
    "notation",
    "name",
    "still",
    "function",
    "right",
    "way",
    "invoke",
    "different",
    "using",
    "dot",
    "notation",
    "right",
    "value",
    "whereas",
    "invoking",
    "directly",
    "saying",
    "function",
    "name",
    "parentheses",
    "cases",
    "still",
    "use",
    "parentheses",
    "cases",
    "pass",
    "arguments",
    "difference",
    "calling",
    "calling",
    "method",
    "back",
    "something",
    "using",
    "dot",
    "notation",
    "gon",
    "na",
    "store",
    "result",
    "well",
    "let",
    "result",
    "equal",
    "thing",
    "going",
    "console",
    "dot",
    "log",
    "results",
    "gon",
    "na",
    "work",
    "save",
    "preview",
    "see",
    "right",
    "sean",
    "methods",
    "functions",
    "functions",
    "associated",
    "object",
    "datatype",
    "like",
    "like",
    "string",
    "defined",
    "object",
    "datatype",
    "whereas",
    "function",
    "defined",
    "old",
    "object",
    "datatype",
    "covered",
    "objects",
    "yet",
    "need",
    "freak",
    "thinking",
    "know",
    "one",
    "seven",
    "datatypes",
    "java",
    "script",
    "future",
    "look",
    "objects",
    "create",
    "methods",
    "objects",
    "also",
    "using",
    "many",
    "methods",
    "built",
    "javascript",
    "language",
    "like",
    "thing",
    "right",
    "well",
    "wanted",
    "plant",
    "seed",
    "let",
    "know",
    "methods",
    "use",
    "still",
    "functions",
    "something",
    "us",
    "essentially",
    "thing",
    "different",
    "name",
    "difference",
    "call",
    "defined",
    "good",
    "enough",
    "okay",
    "know",
    "functions",
    "hopefully",
    "know",
    "methods",
    "functions",
    "also",
    "seen",
    "pass",
    "arguments",
    "functions",
    "methods",
    "invoke",
    "use",
    "values",
    "arguments",
    "inside",
    "function",
    "far",
    "arguments",
    "passing",
    "things",
    "like",
    "strings",
    "numbers",
    "something",
    "also",
    "pass",
    "function",
    "argument",
    "function",
    "pass",
    "called",
    "callback",
    "function",
    "take",
    "look",
    "example",
    "created",
    "function",
    "called",
    "funk",
    "narrow",
    "function",
    "takes",
    "parameter",
    "callback",
    "function",
    "called",
    "whatever",
    "want",
    "call",
    "callback",
    "function",
    "called",
    "inside",
    "function",
    "right",
    "something",
    "point",
    "idea",
    "call",
    "callback",
    "function",
    "okay",
    "invoke",
    "funk",
    "need",
    "pass",
    "kind",
    "function",
    "parameter",
    "calling",
    "let",
    "cut",
    "second",
    "see",
    "calling",
    "function",
    "like",
    "argument",
    "instead",
    "passing",
    "like",
    "string",
    "like",
    "normally",
    "would",
    "instead",
    "passing",
    "function",
    "argument",
    "regular",
    "function",
    "using",
    "function",
    "keyword",
    "inside",
    "something",
    "call",
    "callback",
    "function",
    "calling",
    "callback",
    "function",
    "passing",
    "value",
    "argument",
    "value",
    "something",
    "define",
    "inside",
    "function",
    "inside",
    "callback",
    "function",
    "pass",
    "declare",
    "parameter",
    "call",
    "going",
    "getting",
    "value",
    "inside",
    "value",
    "passed",
    "callback",
    "function",
    "called",
    "log",
    "console",
    "want",
    "something",
    "else",
    "save",
    "preview",
    "see",
    "value",
    "logged",
    "console",
    "seems",
    "like",
    "lot",
    "work",
    "done",
    "demonstrate",
    "general",
    "premise",
    "callback",
    "function",
    "pass",
    "function",
    "something",
    "another",
    "function",
    "argument",
    "point",
    "function",
    "callback",
    "function",
    "probably",
    "called",
    "may",
    "passed",
    "value",
    "take",
    "general",
    "premise",
    "gon",
    "na",
    "convert",
    "error",
    "function",
    "right",
    "first",
    "get",
    "rid",
    "function",
    "keyword",
    "need",
    "arrow",
    "like",
    "one",
    "parameter",
    "right",
    "delete",
    "parentheses",
    "exactly",
    "lot",
    "time",
    "going",
    "see",
    "callback",
    "functions",
    "define",
    "okay",
    "pass",
    "another",
    "function",
    "general",
    "premise",
    "creating",
    "function",
    "taken",
    "callback",
    "function",
    "define",
    "callback",
    "function",
    "right",
    "okay",
    "know",
    "gon",
    "na",
    "delete",
    "see",
    "created",
    "variable",
    "called",
    "people",
    "equal",
    "array",
    "different",
    "people",
    "strings",
    "going",
    "use",
    "array",
    "method",
    "okay",
    "remember",
    "methods",
    "functions",
    "using",
    "function",
    "array",
    "going",
    "take",
    "people",
    "method",
    "called",
    "method",
    "iterates",
    "array",
    "bit",
    "like",
    "loop",
    "iterate",
    "kind",
    "array",
    "eyes",
    "little",
    "elegant",
    "method",
    "expects",
    "argument",
    "callback",
    "function",
    "let",
    "regular",
    "function",
    "first",
    "sometimes",
    "think",
    "easier",
    "visualize",
    "way",
    "like",
    "see",
    "console",
    "dot",
    "log",
    "say",
    "know",
    "something",
    "method",
    "iterates",
    "array",
    "array",
    "iterating",
    "people",
    "element",
    "inside",
    "array",
    "calls",
    "callback",
    "function",
    "going",
    "log",
    "element",
    "inside",
    "array",
    "see",
    "one",
    "two",
    "three",
    "four",
    "five",
    "times",
    "function",
    "going",
    "fire",
    "five",
    "times",
    "element",
    "array",
    "save",
    "preview",
    "see",
    "get",
    "five",
    "right",
    "next",
    "something",
    "okay",
    "done",
    "five",
    "times",
    "okay",
    "inside",
    "callback",
    "function",
    "actually",
    "take",
    "couple",
    "different",
    "parameters",
    "first",
    "one",
    "whatever",
    "value",
    "time",
    "iterating",
    "every",
    "time",
    "fire",
    "function",
    "individual",
    "element",
    "get",
    "element",
    "first",
    "parameter",
    "calling",
    "person",
    "makes",
    "sense",
    "use",
    "singular",
    "people",
    "people",
    "one",
    "purse",
    "call",
    "whatever",
    "want",
    "call",
    "val",
    "want",
    "matter",
    "call",
    "singular",
    "whatever",
    "log",
    "person",
    "time",
    "around",
    "mario",
    "luigi",
    "ryu",
    "shawn",
    "let",
    "save",
    "see",
    "right",
    "ok",
    "iterating",
    "array",
    "using",
    "firing",
    "callback",
    "function",
    "pass",
    "parameter",
    "argument",
    "rather",
    "method",
    "individual",
    "item",
    "array",
    "get",
    "access",
    "person",
    "array",
    "time",
    "around",
    "ok",
    "let",
    "convert",
    "arrow",
    "function",
    "right",
    "mainly",
    "going",
    "see",
    "written",
    "delete",
    "function",
    "keyword",
    "add",
    "arrow",
    "right",
    "like",
    "one",
    "parameter",
    "delete",
    "want",
    "person",
    "arrow",
    "function",
    "save",
    "going",
    "exactly",
    "thing",
    "right",
    "going",
    "see",
    "write",
    "callback",
    "functions",
    "like",
    "lot",
    "time",
    "using",
    "arrow",
    "functions",
    "callback",
    "function",
    "right",
    "inside",
    "takes",
    "value",
    "individual",
    "element",
    "parameter",
    "also",
    "take",
    "second",
    "optional",
    "parameter",
    "index",
    "element",
    "fire",
    "function",
    "first",
    "time",
    "going",
    "zero",
    "index",
    "second",
    "time",
    "going",
    "one",
    "index",
    "two",
    "three",
    "could",
    "log",
    "index",
    "person",
    "save",
    "preview",
    "see",
    "get",
    "index",
    "person",
    "two",
    "different",
    "parameters",
    "pass",
    "function",
    "wanted",
    "could",
    "define",
    "callback",
    "function",
    "somewhere",
    "else",
    "pass",
    "method",
    "whatever",
    "method",
    "using",
    "going",
    "come",
    "create",
    "new",
    "const",
    "going",
    "call",
    "log",
    "person",
    "going",
    "equal",
    "error",
    "function",
    "taking",
    "person",
    "index",
    "much",
    "like",
    "inside",
    "function",
    "going",
    "log",
    "templates",
    "drink",
    "going",
    "say",
    "console",
    "dot",
    "log",
    "template",
    "string",
    "going",
    "output",
    "first",
    "index",
    "variable",
    "going",
    "output",
    "dash",
    "say",
    "hello",
    "person",
    "okay",
    "created",
    "function",
    "use",
    "function",
    "callback",
    "function",
    "method",
    "instead",
    "defining",
    "function",
    "defining",
    "could",
    "say",
    "log",
    "person",
    "like",
    "essentially",
    "passing",
    "error",
    "function",
    "method",
    "exactly",
    "thing",
    "still",
    "work",
    "although",
    "spelled",
    "incorrectly",
    "hello",
    "still",
    "get",
    "desired",
    "results",
    "lot",
    "time",
    "gon",
    "na",
    "see",
    "write",
    "callback",
    "functions",
    "directly",
    "especially",
    "small",
    "functions",
    "think",
    "easier",
    "writing",
    "separate",
    "functions",
    "somewhere",
    "passing",
    "looks",
    "nicer",
    "well",
    "sometimes",
    "large",
    "function",
    "going",
    "externalize",
    "create",
    "somewhere",
    "else",
    "pass",
    "callback",
    "function",
    "hopefully",
    "understand",
    "callback",
    "functions",
    "normal",
    "functions",
    "pass",
    "another",
    "function",
    "another",
    "method",
    "argument",
    "okay",
    "know",
    "callback",
    "functions",
    "like",
    "little",
    "look",
    "one",
    "action",
    "done",
    "gone",
    "index",
    "dot",
    "html",
    "already",
    "added",
    "url",
    "class",
    "people",
    "sandbox",
    "jeaious",
    "constant",
    "people",
    "array",
    "different",
    "people",
    "like",
    "use",
    "iterate",
    "one",
    "elements",
    "name",
    "one",
    "going",
    "fire",
    "callback",
    "function",
    "pass",
    "parameter",
    "argument",
    "function",
    "going",
    "generate",
    "kind",
    "html",
    "template",
    "one",
    "different",
    "elements",
    "going",
    "output",
    "browser",
    "inside",
    "ul",
    "make",
    "sense",
    "ok",
    "first",
    "let",
    "come",
    "say",
    "people",
    "dot",
    "going",
    "pass",
    "callback",
    "function",
    "convert",
    "error",
    "function",
    "later",
    "let",
    "take",
    "person",
    "time",
    "around",
    "find",
    "element",
    "currently",
    "iterating",
    "like",
    "create",
    "html",
    "template",
    "one",
    "person",
    "going",
    "say",
    "outside",
    "method",
    "let",
    "html",
    "equal",
    "empty",
    "template",
    "string",
    "backticks",
    "inside",
    "going",
    "append",
    "html",
    "person",
    "going",
    "say",
    "html",
    "plus",
    "equals",
    "takes",
    "current",
    "value",
    "html",
    "adds",
    "gon",
    "na",
    "concatenate",
    "bit",
    "template",
    "string",
    "li",
    "first",
    "going",
    "style",
    "property",
    "set",
    "color",
    "color",
    "purple",
    "close",
    "inside",
    "li",
    "want",
    "output",
    "person",
    "right",
    "person",
    "close",
    "li",
    "tag",
    "okay",
    "person",
    "adding",
    "snippet",
    "template",
    "onto",
    "html",
    "time",
    "around",
    "time",
    "fire",
    "callback",
    "function",
    "element",
    "adding",
    "html",
    "okay",
    "end",
    "html",
    "going",
    "look",
    "like",
    "big",
    "list",
    "li",
    "tags",
    "let",
    "love",
    "console",
    "console",
    "dot",
    "log",
    "html",
    "okay",
    "let",
    "save",
    "view",
    "browser",
    "see",
    "final",
    "html",
    "code",
    "want",
    "take",
    "series",
    "li",
    "tags",
    "different",
    "names",
    "inside",
    "want",
    "output",
    "browser",
    "covered",
    "kind",
    "browser",
    "interaction",
    "yet",
    "know",
    "kind",
    "stuff",
    "expect",
    "understand",
    "first",
    "step",
    "get",
    "reference",
    "element",
    "page",
    "well",
    "want",
    "ul",
    "going",
    "inject",
    "html",
    "say",
    "u",
    "l",
    "equal",
    "document",
    "query",
    "selector",
    "grab",
    "ul",
    "using",
    "css",
    "selector",
    "dots",
    "people",
    "gets",
    "people",
    "class",
    "okay",
    "expect",
    "understand",
    "much",
    "yet",
    "going",
    "cover",
    "later",
    "going",
    "take",
    "kewell",
    "stored",
    "right",
    "gon",
    "na",
    "set",
    "inner",
    "html",
    "property",
    "html",
    "created",
    "variable",
    "takes",
    "html",
    "grabs",
    "url",
    "places",
    "html",
    "inside",
    "ul",
    "okay",
    "let",
    "save",
    "preview",
    "see",
    "stuff",
    "right",
    "inspect",
    "see",
    "inside",
    "ul",
    "different",
    "li",
    "tags",
    "one",
    "use",
    "callback",
    "function",
    "create",
    "html",
    "templates",
    "data",
    "going",
    "much",
    "stuff",
    "later",
    "start",
    "work",
    "dom",
    "browser",
    "well",
    "feel",
    "like",
    "understand",
    "wanted",
    "give",
    "quick",
    "example",
    "could",
    "use",
    "far",
    "reach",
    "callback",
    "function",
    "good",
    "use",
    "one",
    "last",
    "thing",
    "want",
    "convert",
    "arrow",
    "function",
    "let",
    "take",
    "away",
    "function",
    "keyword",
    "take",
    "away",
    "parentheses",
    "one",
    "parameter",
    "little",
    "arrow",
    "finally",
    "absolutely",
    "fine",
    "leave",
    "like",
    "save",
    "let",
    "see",
    "still",
    "works"
  ],
  "keywords": [
    "okay",
    "time",
    "functions",
    "think",
    "javascript",
    "one",
    "much",
    "come",
    "us",
    "define",
    "block",
    "code",
    "call",
    "want",
    "could",
    "bit",
    "like",
    "inside",
    "thing",
    "run",
    "function",
    "later",
    "times",
    "create",
    "also",
    "pass",
    "values",
    "take",
    "something",
    "value",
    "end",
    "example",
    "would",
    "receive",
    "convert",
    "kind",
    "write",
    "takes",
    "say",
    "get",
    "different",
    "total",
    "three",
    "wanted",
    "passing",
    "little",
    "going",
    "lot",
    "use",
    "methods",
    "yet",
    "method",
    "well",
    "right",
    "first",
    "need",
    "keyword",
    "name",
    "greet",
    "variable",
    "parentheses",
    "simple",
    "console",
    "dot",
    "log",
    "hello",
    "point",
    "save",
    "browser",
    "defined",
    "actually",
    "called",
    "calling",
    "see",
    "way",
    "creating",
    "store",
    "invoke",
    "gon",
    "na",
    "const",
    "speak",
    "constant",
    "set",
    "equal",
    "expression",
    "string",
    "else",
    "semicolon",
    "good",
    "day",
    "exactly",
    "comment",
    "preview",
    "two",
    "using",
    "still",
    "things",
    "let",
    "essentially",
    "works",
    "work",
    "try",
    "error",
    "instead",
    "sometimes",
    "local",
    "output",
    "template",
    "mario",
    "created",
    "taking",
    "ca",
    "argument",
    "parameters",
    "people",
    "parameter",
    "arguments",
    "second",
    "know",
    "return",
    "area",
    "back",
    "calc",
    "element",
    "returning",
    "directly",
    "five",
    "another",
    "arrow",
    "shorter",
    "regular",
    "away",
    "line",
    "whatever",
    "remove",
    "results",
    "array",
    "callback",
    "person",
    "index",
    "html",
    "li"
  ]
}