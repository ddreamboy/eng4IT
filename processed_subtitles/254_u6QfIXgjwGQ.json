{
  "text": "software it's not like engineering\nsomething easy like a bridge where you\nstart with a blueprint\nbuild it to spec then forget about it\nsoftware is dynamic with a lot of moving\nparts and requirements that evolve over\ntime\ndevelopers build apps on top of a\nmountain of abstractions and nobody\nfully understands how every layer works\nthat's okay because we just need to make\nsure that our code matches the\nrequirements of the product test driven\ndevelopment is scientifically proven to\nreduce defects and improve the\nmaintainability of a code base but it\ndoes require some additional effort\none option is manual testing where a\nhuman being clicks on every button and\nfills out every form then assigns a\nbunch of jira tickets so they can be\nbacklogged by the developers\nbut that's not very efficient for a\nlarge scale product a better approach is\nto use automated testing tools that\nallow developers to write code for the\nsole purpose of testing the main\napplication code in a code base you'll\noften find files that end in\ntest or dot spec inside you'll first\nfind a line of code that describes the\nfeature or thing that's being tested\nthat's known as a test suite and it\ncontains one or more individual tests\nan individual test usually starts with\nit followed by a description\nof what is being tested the idea is to\ndescribe the behavior of the code in\nhuman readable terms\ninside the test the code will be\nexecuted then one or more\nexpectations or assertions are used to\ncheck that the code produces the\nexpected result if the expectation\nreturns false then the test fails\nif it's true it passes test runners like\njest or karma\ncan run all your tests automatically in\nthe background or on a continuous\nintegration server before you deploy\nnow there are many different automated\ntesting strategies that you should be\naware of\nat the most granular level we have unit\ntesting which is designed to test\nindividual functions or methods\nlike does this function return the\nproper value when given the arguments of\na\nand b then we have integration testing\nto determine how well different\ncomponents or modules work together like\nis the component\nable to use the database service to get\ndata from the server at the highest\nlevel we have end-to-end testing which\nusually happens in a mock browser or\ndevice\nand simulates actual user behaviors like\nclicking on buttons and filling out\nforms\nit's like having a robot to do all your\nmanual testing for you\nand that's not all there are many other\ntypes like performance and smoke testing\nwhich i'll explain\nin my upcoming test driven development\nbreakdown hit the like button if you\nwant to see more short videos like this\nthanks for watching and i will see you\nin the next one\n",
  "words": [
    "software",
    "like",
    "engineering",
    "something",
    "easy",
    "like",
    "bridge",
    "start",
    "blueprint",
    "build",
    "spec",
    "forget",
    "software",
    "dynamic",
    "lot",
    "moving",
    "parts",
    "requirements",
    "evolve",
    "time",
    "developers",
    "build",
    "apps",
    "top",
    "mountain",
    "abstractions",
    "nobody",
    "fully",
    "understands",
    "every",
    "layer",
    "works",
    "okay",
    "need",
    "make",
    "sure",
    "code",
    "matches",
    "requirements",
    "product",
    "test",
    "driven",
    "development",
    "scientifically",
    "proven",
    "reduce",
    "defects",
    "improve",
    "maintainability",
    "code",
    "base",
    "require",
    "additional",
    "effort",
    "one",
    "option",
    "manual",
    "testing",
    "human",
    "clicks",
    "every",
    "button",
    "fills",
    "every",
    "form",
    "assigns",
    "bunch",
    "jira",
    "tickets",
    "backlogged",
    "developers",
    "efficient",
    "large",
    "scale",
    "product",
    "better",
    "approach",
    "use",
    "automated",
    "testing",
    "tools",
    "allow",
    "developers",
    "write",
    "code",
    "sole",
    "purpose",
    "testing",
    "main",
    "application",
    "code",
    "code",
    "base",
    "often",
    "find",
    "files",
    "end",
    "test",
    "dot",
    "spec",
    "inside",
    "first",
    "find",
    "line",
    "code",
    "describes",
    "feature",
    "thing",
    "tested",
    "known",
    "test",
    "suite",
    "contains",
    "one",
    "individual",
    "tests",
    "individual",
    "test",
    "usually",
    "starts",
    "followed",
    "description",
    "tested",
    "idea",
    "describe",
    "behavior",
    "code",
    "human",
    "readable",
    "terms",
    "inside",
    "test",
    "code",
    "executed",
    "one",
    "expectations",
    "assertions",
    "used",
    "check",
    "code",
    "produces",
    "expected",
    "result",
    "expectation",
    "returns",
    "false",
    "test",
    "fails",
    "true",
    "passes",
    "test",
    "runners",
    "like",
    "jest",
    "karma",
    "run",
    "tests",
    "automatically",
    "background",
    "continuous",
    "integration",
    "server",
    "deploy",
    "many",
    "different",
    "automated",
    "testing",
    "strategies",
    "aware",
    "granular",
    "level",
    "unit",
    "testing",
    "designed",
    "test",
    "individual",
    "functions",
    "methods",
    "like",
    "function",
    "return",
    "proper",
    "value",
    "given",
    "arguments",
    "b",
    "integration",
    "testing",
    "determine",
    "well",
    "different",
    "components",
    "modules",
    "work",
    "together",
    "like",
    "component",
    "able",
    "use",
    "database",
    "service",
    "get",
    "data",
    "server",
    "highest",
    "level",
    "testing",
    "usually",
    "happens",
    "mock",
    "browser",
    "device",
    "simulates",
    "actual",
    "user",
    "behaviors",
    "like",
    "clicking",
    "buttons",
    "filling",
    "forms",
    "like",
    "robot",
    "manual",
    "testing",
    "many",
    "types",
    "like",
    "performance",
    "smoke",
    "testing",
    "explain",
    "upcoming",
    "test",
    "driven",
    "development",
    "breakdown",
    "hit",
    "like",
    "button",
    "want",
    "see",
    "short",
    "videos",
    "like",
    "thanks",
    "watching",
    "see",
    "next",
    "one"
  ],
  "keywords": [
    "software",
    "like",
    "build",
    "spec",
    "requirements",
    "developers",
    "every",
    "code",
    "product",
    "test",
    "driven",
    "development",
    "base",
    "one",
    "manual",
    "testing",
    "human",
    "button",
    "use",
    "automated",
    "find",
    "inside",
    "tested",
    "individual",
    "tests",
    "usually",
    "integration",
    "server",
    "many",
    "different",
    "level",
    "see"
  ]
}