{
  "text": "hey my name is Felipe and welcome to my channel, in \nthis video I'm going to show you how to train an  \nobject detector using your own custom data with \nyolo v10 and I'm going to show you the entire  \nprocess, from how to do the data collection, the \ndata annotation, how to train the model in your  \nown local computer or in a Google collab so it's \ngoing to be 100% free, I'm also going to show you  \nhow to evaluate the model you trained and how to \nmake predictions so this is going to be a super  \ncomprehensive tutorial and now let's get started,\nso let's get started with the data collection  \nlet me show you the data I have downloaded to \nuse in this tutorial and this is the data I'm  \ngoing to use to train the object detector so \nI'm going to train an object detector to detect  \nducks so you can see these are many different \nimages of ducks, right, and the first thing you  \nneed to keep in mind when collecting data to \ntrain your object detector is that you are going  \nto need a good amount of data. You know I work \nas a computer vision engineer, I work as a  \nfreelancer, I provide my services as a freelance \ncontractor, and you would be surprised with how  \noften clients approach me and tell me they have a \nproblem with the object detectors they trained in  \ntheir projects and when I ask them how many images \nthey use to train the object detector they tell me  \nsomething like 'oh we used a lot of data, we \nused like 20 images', right, they usually tell me  \nsomething that that they use like 10 images or \n20 images and that's the first thing you need  \nto keep in mind, in order to make it work you are \ngoing to need a good amount of data, using only  \n10 images or 20 images something like that is not \ngoing to work, right, you are going to need a lot of  \ndata to train this object detector and the exact \namount of images you need is going to depend on  \nmany different factors and it's going to depend \non your specific project but I will recommend you  \nto have at the very least a few hundred images, \na few hundred perhaps a few thousand images, and  \nif you do so then it's going to be more likely \nthat you are going to train a very robust object  \ndetector then another recommendation I can give \nyou regarding the data collection is that you need  \nto make sure you have a very diverse dataset, let \nme show you some of the images I have downloaded  \nto train this object detector, you can see that \nall of them have ducks but you can also see that  \nall the ducks in these images are very diverse are \nvery different from one another, right, you can see  \nthat their colors are different their sizes are \ndifferent the background is different absolutely  \nevery single thing is different, right, all these \nimages are completely completely different, we have  \ndifferent type of ducks and absolutely everything \nis different, some some images are in black  \nand white other images are like cartoons so this \nis definitely a very diverse dataset, this is also  \nsomething very important because remember that \nwhen you are training an object detector you are  \nteaching the object detection technology what's \nthe generic structure of the object you want to  \ndetect so you want to have a very diverse dataset \nbecause this is going to help the object detector  \na lot to understand what exactly your object is, \nthis is going to teach the object detector what  \nare the most important features of your objects, \nright, if you have many different images and in  \nabsolutely all your images the object is always \nof the same color for example then that may be a  \nlittle confusing because that may teach the object \ndetector that your object is always of that given  \ncolor or perhaps if the background is always the \nsame that may be a little confusing too because  \nthe object detector may learn that the background \nalways has to be the same so you always want  \nto have a very diverse dataset and you want to \nhave many different samples and you want to have  \nyour object from many different perspectives \nand from many different point of views and  \nmany different sizes colors backgrounds and so on \nmake sure your dataset is very diverse and that's  \ngoing to help you a lot in order to train this \nobject detector so these are the most important  \nconsiderations regarding the data collection, make \nsure you have a good amount of data to train this  \nobject detector and also make sure your dataset \nis very diverse, and in my case I am going to use  \n500 images to train this model and I already \nshow you the good amount of diversity I have  \nover here so this is going to be an amazing dataset \nto use in this project, now I'm going to show  \nyou a very generic process and I'm going to give \nyou some very generic recommendations you can use  \nwith whatever dataset you want, right, everything \nI'm going to show you in this tutorial is going  \nto work exactly the same for whatever dataset \nyou may want to use but if you want to follow  \nalong this tutorial and you want to use the \nsame dataset I am going to use right now you  \ncan download exactly the same dataset from the \nGoogle open images dataset version 7 so if you  \nwant to use exactly the same data I am going to \nuse in this tutorial the only thing you need to  \ndo is to go here and then you need to click in the \ndownload section and you just need to follow the  \nsteps which are provided over here and you will \nbe able to download the same dataset I'm going  \nto use in this project, but remember this is also \ngoing to work for whatever other dataset you may  \nwant to use in this project so you can just use \nwhatever data you want, now let's continue now  \nlet's move to the next step in this process which \nis the data annotation and this is very important  \nthis is amazingly important, this is perhaps \none of the most important steps in this process  \nbecause the data annotation is where we are going \nto define what exactly our object is, right, where  \nexactly our objects are located and this is \nwhat's going to tell the object detection  \ntechnology where our objects are located within \nthe images I'm going to show you exactly how to  \ndo it in a few minutes, we are going to use cvat \nwhich is a computer vision annotation tool, this  \nis an amazing tool I have used it many times in \nmany projects and we are just going to use this  \ntool in order to annotate this object detection \ndataset, so the first thing you need to do is to  \nlog in into your account, if this is the first time \nyou're using cvat then it's going to be completely  \nempty obviously so let's create a new project we \nneed to click here on projects and then create a  \nnew project I'm going to name this project duck \ndetection and I'm going to add a label which is  \n'duck'... okay... and I'm going to click here on submit \nand open okay everything's okay this the label  \nwe created and now I'm going to create a new task \nand I'm going to upload a few images so I can show  \nyou how the annotation process works I'm going to \nname this task task 00001 the name doesn't really  \nmatter you can just choose whatever name you want \nand I'm going to select a few images to upload  \nover here perhaps I can just drag the files over \nhere in order to show you how this process works  \nI'm going to annotate only a few obviously it \ndoesn't make any sense to annotate all the 500  \nimages because it's going to take me a lot of time \nand it doesn't really make sense, right, I'm just going  \nto show you how the overall process looks like and \nI'm going to annotate something like I don't know  \nI'm going to select these images over here and \nI'm going to select them and I'm going to  \ndrag and drop over here okay and then I'm going \nto click on submit and open so this the task we  \nhave created and now I'm going to click over here \nso let me show you how to draw a bounding box  \naround each one of the objects in all of these \nimages this is very important because this is  \nhow we are going to produce the annotations we \nneed in order to train this object detector so  \nthe first thing I'm going to show you is how to \ndraw all his bonding boxes, we're going to click  \nover here in this rectangle and then I'm going to \nclick here where it says shape and now I'm going  \nto enclose each one of these objects like this... \nfor example this one over here so I'm going to  \nsomething like this and like this... okay so this \nis the first object I have annotated and now  \nI'm going to do exactly the same for these two \nducks over here I'm going to press the letter  \nN and this is going to be a shortcut in order \nto draw new bounding boxes now I'm going to do  \nthe same for this duck over here and I'm going \nto do the same for this other duck over here  \nokay so the bounding boxes don't need to be 100% \nperfect for example something like this will work  \njust fine... right, and over here for example if we do \nsomething like this it will work just fine too... so  \nthe bounding boxes don't need to be 100% perfect \njust make sure you are enclosing the object, right,  \nnow let's continue what I'm going to do now is \nto go through all these images one at a time and  \nI'm going to annotate all of them and every time \nI see something which I think it's important I'm  \ngoing to pause the annotation and I'm \ngoing to give you my my recommendations and  \nI'm going to show you a few things which are \nvery important because the annotation process,  \ndefining exactly where the objects are located, \nalthough it seems like it's very easy and it's  \nvery straightforward trust me it's not as easy \nas it sounds, and there are some cases in which  \nyou need to have a very well established criteria \nin order to annotate your data but I'm going to  \nshow you with a few examples so I'm just going \nto pause the video here, the recording here, I'm  \ngoing to keep on annotating more images and I'm \njust going to resume this recording when I see  \nsomething interesting, right, because I'm going to \nshow you a few recommendations I'm going to give  \nyou a few insights which are going to help you \na lot in your annotation process, okay, for example  \nover here there's something very interesting, \nvery important, you can see we have two ducks here  \nand also we have another duck which is over here \nand perhaps we have another duck over here I'm going to...  \nI'm going to delete it for now I'm going to \ndo it again in a few seconds but only for you  \nto see this part over here which I'm not sure if \nthis a duck, this is a duck for sure, but this  \nthing over here may be a duck too I'm not sure \nbut regarding this one you can see that we are  \nnot really seeing this duck at all we have like a \nhuge occlusion and we are not really seeing it at  \nall so my criteria in this case is to not annotate \nthis duck over here and I'm just going to focus on  \nthese other ducks we have over here right there \nwill be many cases in which you are going to have  \nsome huge occlusions and you are not going to see \na few of your objects and also there will be a few  \ncases in which there would appear to be an object \nin the background but you're not 100% sure so in  \nthose cases you need to have a criteria and and \nyou need to make a decision for example in my case  \nI'm just going to annotate those objects which are \nvery well defined and I'm not going to annotate  \neverything that's like in the background with a \nhuge occlusion and this is another example because  \nyou can see that we have many ducks over here \nwhich are very well defined but then we also have  \nother objects over here which have like a huge \nocclusion and we are not really seeing the duck  \nat all right I can see that there is something \nover here and this is a duck but I don't really  \nsee the object right and if I go over here you \ncan see that there are many other ducks in the  \nbackground which are very small very pixelated so \nin my case over here too there's a huge occlusion  \nin my case I am not going to annotate all these \nobjects over here and I'm just going to focus  \non all these other objects which are much more \nnoticeable, right, like this... and then like this... like\nthis... and like this... okay so remember mic criteria \nin this project is to only annotate those objects  \nwhich are 100% visible and without this huge \nocclusions right this is what I mean regarding  \nthe annotation process is not as easy as it \nsounds because there will be many cases in  \nwhich you are not going to be 100% sure if \nthis is the object you want to annotate or  \nnot and you're going to make a decision right \nand it's very important whatever decision you  \nmake this is super important because now it's \nthe time in which which we are defining exactly  \nwhat's the object we want to detect so if \nour definition is not clear it's going to  \nbe very challenging for the object detector to \nunderstand what our object is right see what I  \nmean this is why the annotation process is one \nof the most important steps in this process and  \nit's perhaps the most important step in this \nprocess we are going to define exactly what's  \nthe object we are going to detect, over here \nfor example I see I have many ducks over here...\nover here...\nand over here but then I have other birds in \nthe background but according to my criteria to my  \nthoughts to what I think these are not ducks \nright this is like other type of bird but this  \nis not a duck so I'm not going to annotate it at \nall and then over here there's like something but  \nI don't really see what the something is so I'm \nnot going to annotate it either and that's pretty much  \nall yeah that's pretty much all so I'm just \ngoing to continue in some cases you are also  \ngoing to find a lot of objects, right, for example \nlike this what I usually do when I'm annotating  \nmy data is to have a different bounding box \nfor different objects, right, like this but I  \nhave seen other annotation criteria which is \njust drawing a huge bounding box enclosing  \nabsolutely all of the objects or a few of the \nobjects together right once you start having like  \na lot of objects which are very close together \nsomething like this, I have seen some criteria  \nwhich involve just drawing a huge bounding box \nenclosing everything right something like this and  \nlike this and like this right and basically you \nare telling the object detector everything that's  \nhere is a duck everything that's over here is a \nduck right and this potentially could be okay too  \nif you decide to annotate some images like this \nthen once you are making predictions once you are  \nmaking inferences then you will have some cases in \nwhich you are just producing only one bounding box  \nthat encloses a lot of objects, right, so it all \ndepends on your project it all depends on what  \nexactly you are trying to achieve, in my case \nI really like to have different bounding boxes  \nfor different objects, it takes much more time to \nannotate but the results are much better... from my  \nperspective for the type of projects I usually \nwork with, I like to have a different bounding  \nbox for different objects, right, so I'm just going \nto keep an annotating this image and I'm going to  \npause... and I'm going to resume the video again \nonce I have something interesting to show you  \nnow this is another very interesting thing you \ncan see that these two ducks over here are very  \nwell defined everything it's perfect I have \nalready drawn a bonding box around each one of  \nthem but we also have this other structure over \nhere which if I'm honest I don't really know if  \nthis is a duck or not perhaps this is a duck or \nperhaps this is just like something in the water  \nright, I think it is but I'm not completely sure, \nin these cases you need a criteria and you need  \nto decide what you are going to do because if \nyou are going to tell the object detector that  \nthis object over here is a duck that's going to \nteach the object detector that this type of structure  \nover here is a duck so it's it's all up to you \nis this the object you are trying to detect? this  \nis something you need to ask yourself, is this the \nobject you are trying to detect? because if it  \nis then go ahead and annotate it if it's not then \ndon't do it in my case my criteria for these type  \nof situations is to just not annotate it, right, \nwhen I'm not 100% sure if this is the object I'm  \ninterested in or not I do not annotate it at all \nremember that you are going to have a lot of data  \nyou're going to have a few hundred images or a few \nthousand images and in all of these images you are  \ngoing to have a lot of objects and hopefully all \nthese objects or most of them like most of them  \nthe vast majority of them are going to be \nvery well defined like this so if you only have  \na few objects which you are not really sure it's \nnot going to be a big deal if you don't annotate  \nthem, nothing happens, so yeah this is also my \ncriteria in this situation and that's pretty much  \nall now let me show you something else which is \nshowing you how to download this data right once  \nyou are done annotating all of your data all of \nyour images remember you are going to click save  \nyou're going to save the changes and then the only \nthing you need to do is to go here to your tasks  \nyou're just going to select the task you have \nannotated and then the only thing you need to do  \nis to export annotations and you are going \nto select this format over here which is yolo 1.1  \nand then click okay you could also save the \nimages but if you have uploaded the images then I  \nguess that doesn't make any sense to download the \nimages again right so if you want to download  \nthe images click here and if you don't then don't \nclick there then you click okay and this is going  \nto take some time but eventually you are going to \ndownload this data over here okay now the export  \nis finished and the only thing you need to do \nis to click here and then here download, okay,  \nand is going to download all the annotations like \nthis okay now let's move to the next step in this  \nprocess which is preparing the data into the exact \nformat you need to train the object detector let me  \nshow you so now let's go back to this directory \nI have created for this project and let me show  \nyou something, this has to do with how you need \nto structure your data in order to be able to  \ntrain this object detector, this has to do with \nthe location of all of your files your images  \nyour labels and so on and this also has to do with \nall the directories you need to create in order to  \nlocate all of your files, let me show you, so you \ncan see I have these two directories one of them  \nis called images and the other one is called \nlabels I'm going to open the images directory  \nand you can see I have two additional directories \none of them is called train and the other one is  \ncalled val, if I open the train directory this is \nwhere I have all my training images, right, the 500  \ntraining images I'm going to use in this process \nand now if I open the val directory you can see I  \nalso have some images over here and these are the \nvalidation images these are the images I'm going  \nto use in order to validate the training process \nso we have these two directories over here and if  \nI go back and if I open the labels directory \nyou can see I have exactly the same structure  \nI have two folders one of them is called train \nand the is called val, train has all the labels  \nall the annotations for all the training images \nand then val has all the annotations for all  \nthe validation images now something that \nit's very important it seems like only a detail  \nbut actually it's very important and it has to do \nwith the names of all these directories, in order  \nto save you some time and in order to make sure \neverything works as expected just make sure you  \nname everything exactly the same as I'm showing \nyou over here, just to avoid any potential issue  \nin your training process just make sure everything \nis named exactly the same as I'm showing you over  \nhere images labels and then this one is called \ntrain and this other one is called val, later on  \nwhen I show you the training process I'm going to \nshow you a file which is a configuration file and  \nthis file has some paths to the location of \nyour data and your images so as long as you  \nname everything exactly the same as I'm showing \nyou over here everything should work as expected  \nright, now let me show you something else if I \nopen the images directory again and now if I open  \nthe training images and I'm going to do the same \nfor the labels directory, the training labels, you  \ncan see that for every single one of my images \nin the in this directory if I order everything  \nlike this, okay, you can see that for every single \none of these files we have a given name a given id,  \nand then the extension is jpg and then if I \ngo to the annotations directory you can see that  \nthe file names are exactly the same but with a \ndifferent extension right you can see that the  \nfile names are exactly the same I'm referring \nto this id over here, this id, right, this id over  \nhere is exactly the same as this other id over \nhere and the only difference between these two  \nfile names is the extension right and you can see \nthis is exactly the same for absolutely  \nevery single file so this file over here contains \nall the annotations, all the bounding boxes \nfor this image over here, this is \nalso very important because it has to do with the  \nhow your data set works and this is going to help \nyou a lot to understand exactly what's going on  \nto understand exactly what you are doing in this \ntraining process and is going to help you a lot  \nto know more about your data to be more familiar \nwith your dataset and this is also going to help  \nyou to solve whatever issue may arise when you are \ntraining your object detector and then about the  \nannotations you can see we have the annotations \nwhich are given in this format this is the YOLO  \nformat the first number is the class id, in my case \nI have only one class in this dataset which is  \nduck so in my case this number is always going to \nbe zero but in any other case this depends on the  \nnumber of classes you have have in your dataset \nand then this is the location of the bounding box  \nthe first two numbers are the X and Y coordinates \nof the center of the bounding box and then this is  \nthe width and this is the height of the bounding \nbox and you can see that everything is given in  \nrelative coordinates so this number and this \nnumber over here are divided by the image width  \nand this number and this number over here \nare divided by the image height, right, these are  \nrelative coordinates so this is only to show you \nsuper quickly how the annotations look like and  \nalso to show you how you need to structure your \ndataset and how you need to... where you need to  \nlocate all the files and so on in order to make \nthis training process work as expected and now  \nlet's move on to the training process now it's \nthe most fun part of this tutorial because now  \nit's the time to train the object detector so let \nme show you I'm going to show you how to train  \nthis object detector in your own computer and \nalso I'm going to show you how to train it in a  \nGoogle collab so let's get started with Google \ncollab and the first thing you need to do is  \nto create a zip file from this directory right \nremember this the data directory this is where  \nI have located all my data and the only thing \nI'm going to do is to zip the entire directory  \nI'm going to compress the entire directory in my \ncase I have already done it is this file over here  \nyou can see it's called data.zip but in your case \nplease remember to do so before you continue with  \nthis tutorial and once you have compressed the \nentire directory and you have created this file  \nthe only thing you need to do is to upload this \nfile into a directory in your Google drive this  \nis a directory I have created in my Google Drive \nit's called YOLO 10 object detection full guide  \nand you can see that this is the data.zip file I \nam showing you over here so this is what you need  \nto do next please remember to upload this file to \na directory in your Google Drive and now in order  \nto train this model we are going to follow all the \ninstructions which are given here in this Google  \ncollab, right, in this Jupiter notebook actually, \nso the only thing I'm going to do is to execute  \neach one of these cells one at a time and this is \ngoing to take care of the entire training process  \nso let me show you the first cell is going to \nconnect my Google collab to my Google Drive  \nI'm going to select my account continue continue \nand that's pretty much all okay now I have  \nconnected my Google Drive with Google colab and the \nonly thing I need to do next is to execute this  \ncell over here which is going to copy the file \nwe have uploaded over here into this Google colab  \nenvironment so the only thing I'm going to do \nis to press enter and you can see that this is  \nnot only going to copy the entire data but it's \nalso going to uncompress this file over here and  \nyou can see that we have already uncompressed \nall this data into this Google colab environment  \nso now let's continue now the next step in this \nprocess is to install all the required packages  \nso the only thing we're going to do is to clone \nthis directory clone this repository which is  \nthe YOLO 10 official Repository and then we are \njust going to install all the required packages  \nlike this right we are just going to cd into this \ndirectory and then we're just going to pip install  \nthe entire repository so the only thing I'm going \nto do is to press enter and this going to take  \ncare of the entire process okay everything seems \nto be ready and we can continue over here this is  \nthe most important part of this process because \nthis is where we are going to train the object  \ndetector so you can see that the only thing we \nare doing over here is a couple of imports we  \nare importing os and then we are importing this \nlibrary and we're just importing YOLOV10 then  \nyou can see I have this path over here which is a \npath to a configuration file let me show you how  \nthis configuration file looks like if I open this \nfile you can see I have three keys one of them is  \nthe location of the root directory of our dataset \nwhich is over here and then the other two  \nkeys are related to where the training images \nare located and where the validation images are  \nlocated this is why I told you that as long as \nyou name all the directories exactly the same  \nas I showed you in this tutorial and if you use \nexactly the same configuration file everything  \nshould work as expected and then all the four \nclasses you remember that the only class I'm  \ngoing to use in this dataset is 'duck', I'm going \nto train this object detector to detect only one class,  \nduck, so in my case this is how it looks like and \nthat's pretty much all once I have the file over  \nthere in my Google Drive the only thing I need to \ndo is to press enter and this is going to train  \nYOLOv10 from these pre-trained model weights and \nit's going to train this model for 200 epochs, so this  \nis going to take some time so what I'm going to do \nnow is to pause the recording here and I'm going to  \nresume this recording once the training process \nis completed okay now the training process is  \ndone and let me show you how to download all \nthe results from this training process you  \ncan see that the results have been saved here \nin this directory and let me show you how to  \ndownload these results into our local computer I'm \ngoing to execute this cell over here which says  \ndownload results and this is going to take care of \ndownloading all these results you can see I have  \nan error I'm not sure why this error happens once \nin a while but if you encounter a similar error  \nwhen you train this model then the only \nthing you need to do is to restart the session  \nand then you just need to press enter again and \nthis is going to fix the issue so basically we  \nare compressing the entire runs directory we are \ncreating this file which is runs. zip and then  \nwe are downloading this file over here running \nthis command over here you can see that this is  \nin progress and once this is done we are going to \ndownload this file into our local computer okay I  \nam just going to download the file in my desktop \nand then I'm going to open the file like this you  \ncan see I have a lot of directories and over here \nI have all the results from the training process  \nthis is where the weights have been saved, you can \nsee we have two files best.pt and last.pt and  \nthen these are all the results, this is how you \ncan train this model using a google colab but remember I  \nI told you that I am also going to show \nyou how to train this model using your own local  \ncomputer so let's go to pycharm and I'm going to \nshow you how to do it locally in your own computer  \nand this is going to be exactly the same process \nas we did over here in Google collab so the first  \nthing you need to do is to create a new virtual \nenvironment obviously because that's always a  \nvery good practice when working with python so you \ncan see over here I have already created a virtual  \nenvironment and in my case I created this virtual \nenvironment using python 3.9 but in your case  \nyou can just use pretty much any other version of \nPython 3 if I'm not mistaken pretty much any other  \nversion will do as well so once you have created \nthis virtual environment you need to clone yolov10  \nofficial repository by executing this command \nover here I'm referring to this repository YOLOv10  \nrepository you can see I have already cloned the \nrepository and it's over here and then the only  \nthing you need to do is to cd into this repository \nsomething like cd yolov10 okay and then you need  \nto install the requirements so pip install and \nthen this character over here pip install... like this...\nand then press enter in my case nothing is \ngoing to happen because I have already installed  \nall these packages but in your case please \nremember to do so otherwise nothing is going  \nto work and now let's continue once everything is \ninstalled and everything is okay the only thing  \nyou need to do is to execute this code I have \nover here you can see this file is called train.py  \nand these are the instructions we need to \nexecute in order to train YOLO 10 in our local  \ncomputer you can see it's exactly the same code I \nshowed you over here exactly the same code the only  \ndifference is the location of the configuration \nfile which now is going to be located here but other  \nthan that everything else is exactly the same and \nlet me show you that now this configuration file...  \nthere's something different as before because \nnow this is the path to the data right and this is  \nthe path to the location of the data in my local \ncomputer if I copy all that value over there  \nand I paste it over here you can see that this is \nthis current directory and this is where the data  \nis located, right, I'm going to paste it over there \nand this is 'data' so please remember to update this  \nvalue to whatever location you have your data in \nyour file system right this is the absolute path  \nto your dataset and then this is exactly the same \nand this is also exactly the same so then the only  \nthing I'm going to do now is to just execute \nthis file and this going to take care of the  \nentire training process let's see if it works, okay \nthere's a very small mistake actually this is from  \npre trained... like this okay let's see now, we may \nneed to install a package you can see I have an  \nerror over here in case you have a similar error \nin your computer this install over here may fix  \nit, so I'm going to run pip install safetensors \nand I'm going to run the same file again okay  \nand you can see that everything is going well and \nthe training process has started over here... so I'm  \nnot going to train the model again because I have \nalready did it in Google collab but this is only  \nto show you how to train the model in your local \ncomputer now let's move on and let's move to the  \nnext step in this process which is evaluating \nthe model we trained it's very important every  \ntime you train a computer vision model or any type \nof machine learning model it's very important you  \nevaluate the training process so let me show \nyou how to do it I'm going to take all these  \nresults which we have produced from Google collab \nso the only thing I'm going to do is to get this  \ndirectory over here and I'm going to paste this \ndirectory over here something like this remember  \nthese are the results from the training process \nwe did from Google collab so in order to evaluate  \nthis training process we are going to do it super \nquickly and we are going to do it in only a few  \nminutes we could spend hours analyzing a training \nprocess because this could be a very detailed  \nevaluation but I'm going to show you a very \neasy way to do it which is just looking at some  \nof the plots you can see over here so basically \njust make sure that the loss functions are going  \ndown as you increase the number of epochs you can \nsee that I have trained this model for 200 epochs  \nand something that's very important every time you \ntrain a model is that the loss function goes down  \nas you increase the number of epochs in this case \nwe have many plots and if I'm not mistaken the  \nloss function we care about the most in this project, \nin this evaluation, is this one over here because  \nthis is the loss function which is related to \nthe bounding box detection and basically long  \nstory short if you want like a very quick way \nto analyze if this is working well or not just  \nmake sure the loss function is going down as we \nincrease the number of epochs, if the loss function is  \ngoing down it's likely everything is going \nwell, it's not a guarantee, I mean everything  \ncould happen and maybe the loss function is \ngoing down and you are not training a very  \ngood model, it could happen, but at the very least \nyou need to make sure the loss function is going  \ndown. If the loss function is not going down I \ncan tell you for sure something is wrong with  \nyour project I can tell you for sure without \nany doubt whatsoever you have made something  \namazingly wrong with your training process. If \nthe loss function is not going down... if the loss  \nfunction is going up something is amazingly wrong, \nright, so at the very least you need to make sure  \nthe loss function is going down as you increase \nthe number of epochs, and then also take a look at  \nthese plots over here which are related to the \naccuracy, with the performance of your object  \ndetector, and for these plots over here you need \nto make sure they are going up as you increase the  \nnumber of epochs, so this is a very quick evaluation \na very dummy evaluation but trust me this type  \nof evaluation is going to take you very far, only \nby looking at the loss function and only by looking  \nat all these plots which are related to the \nperformance you are going to be able to know a  \nlot about the performance of your object detector \nand then another way to evaluate what's going on  \nwith your object detector another way to evaluate \nthe training process is to see how it performs  \nwith a few examples, so there are going to be \na few files, as you can see over here, which  \nare called val batch zero labels and val batch zero pred and \nalso there will be other files which will be val  \nbatch one labels and val batch one pred and you may \nhave even more files and basically these files  \nare going to tell you how the models performs on some \nvery specific images from the validation set and  \nyou can see that here we are looking at the ground \ntruth, at the annotations, the labels, and then if I  \nshow you the other image, these are the predictions \nwe got with our object detector, right, this is the  \nground truth, and this is the performance of our \nobject detector and you can see that basically  \nit performs pretty well I would say it's not \nperfect but I would say it performs very well  \nthere are a few miss detections over here this duck \nover here we are not detecting it and then there's  \nalso another miss detection over here we are not \ndetecting this duck and also over here all these  \nducks over here are very small but nevertheless \nwe should be able to detect them and we are not  \ndetecting them with our object detector now let's \ntake a look at these other examples and you can see  \nthat in this case we are not detecting these \nducks over here... actually these are not ducks  \nthese are penguins! this is the validation \ndata I downloaded, so yeah it is what it is, but I  \nthink these are not ducks at all but it doesn't \nmatter we're not detecting these two birds and  \nit seems we are not detecting these two other ducks \nover there right and we also have a miss detection  \nover here because we are detecting something which \nis not a duck as if it were a duck right we are  \ndetecting like this entire structure over here \nand this is not a duck the only duck over here  \nis this one... I think this is also some other type \nof bird! I think this is not a duck either but it  \ndoesn't matter this is the validation data we \nused to validate our training process so after  \nthis quick evaluation my conclusion is that the \nobject detector performs very well but it's not perfect now  \nthe next step in this process will be to train \na more powerful model right because training  \nan object detector is always an ongoing process \nand we will need to go once and again through the  \nsame steps. Once we evaluate the training process \nif we are not satisfied with the performance of  \nthe object detector then we should go back to the \ndata preparation, to the data annotation, the data  \ncollection, whatever, and this is where we should be \ntrying to understand exactly what is going on with  \nour object detector and we should be trying to \ndecide what are we going to do different next time  \nright perhaps we are going to do some changes with \nthe images we used to train the model or perhaps we  \nare going to do some changes with the annotations, \nwith the way we annotated the data, remember when  \nI was walking you through the annotation process \nI told you that that we need a criteria in order  \nto do the annotation process, in order to annotate \nall the images and different criteria are going  \nto produce different annotations so this is where \nwe are going to decide the changes we are going  \nto do next time we train this model and one of the \nchanges could be our annotation criteria and we  \ncould try again annotating the data differently, \nright, so training an object detector is not an  \neasy thing to do actually, I mean if we are \nlooking for perfect results then training an  \nobject detector is not easy but you need to think \nabout it as an ongoing process, we need to iterate  \nonce and again once and again through the same \nsteps until we are happy with our results now  \nlike this is only a YouTube video I cannot show \nyou how this iteration works I cannot prepare  \nthe data again and train the model again and so \non because this is only a YouTube video but if  \nyou really want to go much more deep into the \ncreation of an object detector, if you want to take  \nyour computer vision skills to the next level then \nI invite you to take a look at the computer vision school, \nthis is one of my products where I show you \nhow to create AI prototypes, in this school I walk  \nyou through the creation of computer vision based \nMVPs, and when I say MVPs I mean minimum viable  \nproducts so each one of these projects involves \nthe creation of an entire product an entire  \nminimum viable product but a product at the \nvery least so if you really want to know how  \nto train an object detector which you could \npotentially use in a production environment,  \nin a real project, then I definitely invite you to \ntake a look at the computer vision school, to take  \na look at our memberships and to just choose the \nmembership you like the most. Now let's continue  \nwith this project and I'm going to show you how \nto make predictions with the model we trained  \nnow let me show you how to make predictions so \nlet's go back to py charm and let me show you  \nthis script over here which is called predict.py, \nthis is the script we will be using in order  \nto make inferences on a video we're going to make \ninferences on all the frames of a video and we're  \njust going to draw all the bounding boxes on all \nthe objects we detect on this video so let me show  \nyou how this script works, basically we are \ncreating a new model of yolov10 you can see here  \nI'm importing from ultralytics import yolo v10 \nas YOLO and then I am just creating a new model  \nlike this, I am specifying what's the location of \nthe model weights I'm going to use in order to  \nmake inferences, remember that I have copied the \nentire runs directory over here and if I go to  \nruns detect train weights, these are the weights \nwe have produced with this training process, and  \nthis is the location I have over here runs detect \ntrain weights and last.pt, a very quick comment  \nregarding these two files you can see over here \nbest.pt means this is the best model which was  \nproduced through the entire training process \nand last.pt is the model we produced at the  \nend of the training process, there are different \ncriteria to choose either the best model I mean  \nthe best model in the entire training process \nor the last model, the one that's produced at the  \nend of the training process, my criteria what \nI usually do is taking the last model, so I  \nam going to use last.pt and this is exactly \nthe location of these model weights now let's  \ncontinue then the only thing we are doing over \nhere is loading a video, which is located  \nhere in video.mp4 let me show you what's \nthe video we're going to use in this example\nwe are going to use this video over here which \nis as just a duck which is doing nothing... right,  \nit's just being there... this is the video we're \ngoing to use in this example so this is video.mp4  \nand then we're going to save the results here \nin out.mp4, then basically we are just defining  \nthese variables and we are creating this object \nover here which we are going to use in order to  \nproduce the output, right, to produce the video \nwhich we are going to save over here, and then  \nthe only thing we're doing is iterating through \nall the frames in the video and for each one of  \nthese frames we are applying the object detector \nover here and we are just iterating in all the  \nresults we get from this object detector and then \nfor each one of these results if the confidence  \nscore is greater than 0.5 then we are drawing a \nbounding box around this object we have detected  \nand that's pretty much all and then we just save \nthis frame to this... video we're going to save at  \nthe end of this process and that's pretty much all \nso this is a very simple process the only thing  \nit does is going through all the frames detecting \nobjects and saving the result in out.mp4, now let  \nme show you how the result looks like I'm going to \nrun this video this is going to take a few minutes  \nso I'm just going to resume this recording once \nthis is done. Okay everything's completed you can  \nsee the video was saved here in out.mp4 so \nlet's see what's the video we have produced  \nso this is the duck and now we are seeing all the \nbounding boxes which are drawn on top so basically  \nregarding the performance of this object detector \nwe can see something very similar as in the in the  \nevaluation when we were evaluating the training \nprocess because the results are okay but are not  \nperfect right with we have a few miss detections \nwe have a few detections which are not correct  \nfor example there we are detecting something over \nhere and there's nothing over there I'm referring  \nto this over here... right, you can see there was a \nbonding box there but there's not really any duck  \nwhatsoever so the object detector is performing \nokay but it's not perfect, in order to make it  \nperfect, we would need to iterate and we would \nneed to improve the data improve the annotations  \nwe would need to do it again, so this is going to \nbe all for this video this is exactly how you can  \ntrain an object detector using yolov10 on your own \ncustom data, this is the entire process of how  \nyou can train this object detector, and remember \nto take a look at the computer vision school if  \nyou want to take your object detection skills to \nthe next level, if you want to take your computer  \nvision skills to the next level, please remember \nto take a look at the computer vision school and  \nyou are going to learn... oh my God you're going \nto learn so much about computer vision and about  \nmaking products! right, you are going to learn how \nto make MVPs which stands for minimum valuable  \nproducts so this is a completely different \nteaching style and this is going to teach you  \nmuch more valuable skills. So, this is going to be \nall for this video and see you on my next video.\n",
  "words": [
    "hey",
    "name",
    "felipe",
    "welcome",
    "channel",
    "video",
    "going",
    "show",
    "train",
    "object",
    "detector",
    "using",
    "custom",
    "data",
    "yolo",
    "v10",
    "going",
    "show",
    "entire",
    "process",
    "data",
    "collection",
    "data",
    "annotation",
    "train",
    "model",
    "local",
    "computer",
    "google",
    "collab",
    "going",
    "100",
    "free",
    "also",
    "going",
    "show",
    "evaluate",
    "model",
    "trained",
    "make",
    "predictions",
    "going",
    "super",
    "comprehensive",
    "tutorial",
    "let",
    "get",
    "started",
    "let",
    "get",
    "started",
    "data",
    "collection",
    "let",
    "show",
    "data",
    "downloaded",
    "use",
    "tutorial",
    "data",
    "going",
    "use",
    "train",
    "object",
    "detector",
    "going",
    "train",
    "object",
    "detector",
    "detect",
    "ducks",
    "see",
    "many",
    "different",
    "images",
    "ducks",
    "right",
    "first",
    "thing",
    "need",
    "keep",
    "mind",
    "collecting",
    "data",
    "train",
    "object",
    "detector",
    "going",
    "need",
    "good",
    "amount",
    "data",
    "know",
    "work",
    "computer",
    "vision",
    "engineer",
    "work",
    "freelancer",
    "provide",
    "services",
    "freelance",
    "contractor",
    "would",
    "surprised",
    "often",
    "clients",
    "approach",
    "tell",
    "problem",
    "object",
    "detectors",
    "trained",
    "projects",
    "ask",
    "many",
    "images",
    "use",
    "train",
    "object",
    "detector",
    "tell",
    "something",
    "like",
    "used",
    "lot",
    "data",
    "used",
    "like",
    "20",
    "images",
    "right",
    "usually",
    "tell",
    "something",
    "use",
    "like",
    "10",
    "images",
    "20",
    "images",
    "first",
    "thing",
    "need",
    "keep",
    "mind",
    "order",
    "make",
    "work",
    "going",
    "need",
    "good",
    "amount",
    "data",
    "using",
    "10",
    "images",
    "20",
    "images",
    "something",
    "like",
    "going",
    "work",
    "right",
    "going",
    "need",
    "lot",
    "data",
    "train",
    "object",
    "detector",
    "exact",
    "amount",
    "images",
    "need",
    "going",
    "depend",
    "many",
    "different",
    "factors",
    "going",
    "depend",
    "specific",
    "project",
    "recommend",
    "least",
    "hundred",
    "images",
    "hundred",
    "perhaps",
    "thousand",
    "images",
    "going",
    "likely",
    "going",
    "train",
    "robust",
    "object",
    "detector",
    "another",
    "recommendation",
    "give",
    "regarding",
    "data",
    "collection",
    "need",
    "make",
    "sure",
    "diverse",
    "dataset",
    "let",
    "show",
    "images",
    "downloaded",
    "train",
    "object",
    "detector",
    "see",
    "ducks",
    "also",
    "see",
    "ducks",
    "images",
    "diverse",
    "different",
    "one",
    "another",
    "right",
    "see",
    "colors",
    "different",
    "sizes",
    "different",
    "background",
    "different",
    "absolutely",
    "every",
    "single",
    "thing",
    "different",
    "right",
    "images",
    "completely",
    "completely",
    "different",
    "different",
    "type",
    "ducks",
    "absolutely",
    "everything",
    "different",
    "images",
    "black",
    "white",
    "images",
    "like",
    "cartoons",
    "definitely",
    "diverse",
    "dataset",
    "also",
    "something",
    "important",
    "remember",
    "training",
    "object",
    "detector",
    "teaching",
    "object",
    "detection",
    "technology",
    "generic",
    "structure",
    "object",
    "want",
    "detect",
    "want",
    "diverse",
    "dataset",
    "going",
    "help",
    "object",
    "detector",
    "lot",
    "understand",
    "exactly",
    "object",
    "going",
    "teach",
    "object",
    "detector",
    "important",
    "features",
    "objects",
    "right",
    "many",
    "different",
    "images",
    "absolutely",
    "images",
    "object",
    "always",
    "color",
    "example",
    "may",
    "little",
    "confusing",
    "may",
    "teach",
    "object",
    "detector",
    "object",
    "always",
    "given",
    "color",
    "perhaps",
    "background",
    "always",
    "may",
    "little",
    "confusing",
    "object",
    "detector",
    "may",
    "learn",
    "background",
    "always",
    "always",
    "want",
    "diverse",
    "dataset",
    "want",
    "many",
    "different",
    "samples",
    "want",
    "object",
    "many",
    "different",
    "perspectives",
    "many",
    "different",
    "point",
    "views",
    "many",
    "different",
    "sizes",
    "colors",
    "backgrounds",
    "make",
    "sure",
    "dataset",
    "diverse",
    "going",
    "help",
    "lot",
    "order",
    "train",
    "object",
    "detector",
    "important",
    "considerations",
    "regarding",
    "data",
    "collection",
    "make",
    "sure",
    "good",
    "amount",
    "data",
    "train",
    "object",
    "detector",
    "also",
    "make",
    "sure",
    "dataset",
    "diverse",
    "case",
    "going",
    "use",
    "500",
    "images",
    "train",
    "model",
    "already",
    "show",
    "good",
    "amount",
    "diversity",
    "going",
    "amazing",
    "dataset",
    "use",
    "project",
    "going",
    "show",
    "generic",
    "process",
    "going",
    "give",
    "generic",
    "recommendations",
    "use",
    "whatever",
    "dataset",
    "want",
    "right",
    "everything",
    "going",
    "show",
    "tutorial",
    "going",
    "work",
    "exactly",
    "whatever",
    "dataset",
    "may",
    "want",
    "use",
    "want",
    "follow",
    "along",
    "tutorial",
    "want",
    "use",
    "dataset",
    "going",
    "use",
    "right",
    "download",
    "exactly",
    "dataset",
    "google",
    "open",
    "images",
    "dataset",
    "version",
    "7",
    "want",
    "use",
    "exactly",
    "data",
    "going",
    "use",
    "tutorial",
    "thing",
    "need",
    "go",
    "need",
    "click",
    "download",
    "section",
    "need",
    "follow",
    "steps",
    "provided",
    "able",
    "download",
    "dataset",
    "going",
    "use",
    "project",
    "remember",
    "also",
    "going",
    "work",
    "whatever",
    "dataset",
    "may",
    "want",
    "use",
    "project",
    "use",
    "whatever",
    "data",
    "want",
    "let",
    "continue",
    "let",
    "move",
    "next",
    "step",
    "process",
    "data",
    "annotation",
    "important",
    "amazingly",
    "important",
    "perhaps",
    "one",
    "important",
    "steps",
    "process",
    "data",
    "annotation",
    "going",
    "define",
    "exactly",
    "object",
    "right",
    "exactly",
    "objects",
    "located",
    "going",
    "tell",
    "object",
    "detection",
    "technology",
    "objects",
    "located",
    "within",
    "images",
    "going",
    "show",
    "exactly",
    "minutes",
    "going",
    "use",
    "cvat",
    "computer",
    "vision",
    "annotation",
    "tool",
    "amazing",
    "tool",
    "used",
    "many",
    "times",
    "many",
    "projects",
    "going",
    "use",
    "tool",
    "order",
    "annotate",
    "object",
    "detection",
    "dataset",
    "first",
    "thing",
    "need",
    "log",
    "account",
    "first",
    "time",
    "using",
    "cvat",
    "going",
    "completely",
    "empty",
    "obviously",
    "let",
    "create",
    "new",
    "project",
    "need",
    "click",
    "projects",
    "create",
    "new",
    "project",
    "going",
    "name",
    "project",
    "duck",
    "detection",
    "going",
    "add",
    "label",
    "okay",
    "going",
    "click",
    "submit",
    "open",
    "okay",
    "everything",
    "okay",
    "label",
    "created",
    "going",
    "create",
    "new",
    "task",
    "going",
    "upload",
    "images",
    "show",
    "annotation",
    "process",
    "works",
    "going",
    "name",
    "task",
    "task",
    "00001",
    "name",
    "really",
    "matter",
    "choose",
    "whatever",
    "name",
    "want",
    "going",
    "select",
    "images",
    "upload",
    "perhaps",
    "drag",
    "files",
    "order",
    "show",
    "process",
    "works",
    "going",
    "annotate",
    "obviously",
    "make",
    "sense",
    "annotate",
    "500",
    "images",
    "going",
    "take",
    "lot",
    "time",
    "really",
    "make",
    "sense",
    "right",
    "going",
    "show",
    "overall",
    "process",
    "looks",
    "like",
    "going",
    "annotate",
    "something",
    "like",
    "know",
    "going",
    "select",
    "images",
    "going",
    "select",
    "going",
    "drag",
    "drop",
    "okay",
    "going",
    "click",
    "submit",
    "open",
    "task",
    "created",
    "going",
    "click",
    "let",
    "show",
    "draw",
    "bounding",
    "box",
    "around",
    "one",
    "objects",
    "images",
    "important",
    "going",
    "produce",
    "annotations",
    "need",
    "order",
    "train",
    "object",
    "detector",
    "first",
    "thing",
    "going",
    "show",
    "draw",
    "bonding",
    "boxes",
    "going",
    "click",
    "rectangle",
    "going",
    "click",
    "says",
    "shape",
    "going",
    "enclose",
    "one",
    "objects",
    "like",
    "example",
    "one",
    "going",
    "something",
    "like",
    "like",
    "okay",
    "first",
    "object",
    "annotated",
    "going",
    "exactly",
    "two",
    "ducks",
    "going",
    "press",
    "letter",
    "n",
    "going",
    "shortcut",
    "order",
    "draw",
    "new",
    "bounding",
    "boxes",
    "going",
    "duck",
    "going",
    "duck",
    "okay",
    "bounding",
    "boxes",
    "need",
    "100",
    "perfect",
    "example",
    "something",
    "like",
    "work",
    "fine",
    "right",
    "example",
    "something",
    "like",
    "work",
    "fine",
    "bounding",
    "boxes",
    "need",
    "100",
    "perfect",
    "make",
    "sure",
    "enclosing",
    "object",
    "right",
    "let",
    "continue",
    "going",
    "go",
    "images",
    "one",
    "time",
    "going",
    "annotate",
    "every",
    "time",
    "see",
    "something",
    "think",
    "important",
    "going",
    "pause",
    "annotation",
    "going",
    "give",
    "recommendations",
    "going",
    "show",
    "things",
    "important",
    "annotation",
    "process",
    "defining",
    "exactly",
    "objects",
    "located",
    "although",
    "seems",
    "like",
    "easy",
    "straightforward",
    "trust",
    "easy",
    "sounds",
    "cases",
    "need",
    "well",
    "established",
    "criteria",
    "order",
    "annotate",
    "data",
    "going",
    "show",
    "examples",
    "going",
    "pause",
    "video",
    "recording",
    "going",
    "keep",
    "annotating",
    "images",
    "going",
    "resume",
    "recording",
    "see",
    "something",
    "interesting",
    "right",
    "going",
    "show",
    "recommendations",
    "going",
    "give",
    "insights",
    "going",
    "help",
    "lot",
    "annotation",
    "process",
    "okay",
    "example",
    "something",
    "interesting",
    "important",
    "see",
    "two",
    "ducks",
    "also",
    "another",
    "duck",
    "perhaps",
    "another",
    "duck",
    "going",
    "going",
    "delete",
    "going",
    "seconds",
    "see",
    "part",
    "sure",
    "duck",
    "duck",
    "sure",
    "thing",
    "may",
    "duck",
    "sure",
    "regarding",
    "one",
    "see",
    "really",
    "seeing",
    "duck",
    "like",
    "huge",
    "occlusion",
    "really",
    "seeing",
    "criteria",
    "case",
    "annotate",
    "duck",
    "going",
    "focus",
    "ducks",
    "right",
    "many",
    "cases",
    "going",
    "huge",
    "occlusions",
    "going",
    "see",
    "objects",
    "also",
    "cases",
    "would",
    "appear",
    "object",
    "background",
    "100",
    "sure",
    "cases",
    "need",
    "criteria",
    "need",
    "make",
    "decision",
    "example",
    "case",
    "going",
    "annotate",
    "objects",
    "well",
    "defined",
    "going",
    "annotate",
    "everything",
    "like",
    "background",
    "huge",
    "occlusion",
    "another",
    "example",
    "see",
    "many",
    "ducks",
    "well",
    "defined",
    "also",
    "objects",
    "like",
    "huge",
    "occlusion",
    "really",
    "seeing",
    "duck",
    "right",
    "see",
    "something",
    "duck",
    "really",
    "see",
    "object",
    "right",
    "go",
    "see",
    "many",
    "ducks",
    "background",
    "small",
    "pixelated",
    "case",
    "huge",
    "occlusion",
    "case",
    "going",
    "annotate",
    "objects",
    "going",
    "focus",
    "objects",
    "much",
    "noticeable",
    "right",
    "like",
    "like",
    "like",
    "like",
    "okay",
    "remember",
    "mic",
    "criteria",
    "project",
    "annotate",
    "objects",
    "100",
    "visible",
    "without",
    "huge",
    "occlusions",
    "right",
    "mean",
    "regarding",
    "annotation",
    "process",
    "easy",
    "sounds",
    "many",
    "cases",
    "going",
    "100",
    "sure",
    "object",
    "want",
    "annotate",
    "going",
    "make",
    "decision",
    "right",
    "important",
    "whatever",
    "decision",
    "make",
    "super",
    "important",
    "time",
    "defining",
    "exactly",
    "object",
    "want",
    "detect",
    "definition",
    "clear",
    "going",
    "challenging",
    "object",
    "detector",
    "understand",
    "object",
    "right",
    "see",
    "mean",
    "annotation",
    "process",
    "one",
    "important",
    "steps",
    "process",
    "perhaps",
    "important",
    "step",
    "process",
    "going",
    "define",
    "exactly",
    "object",
    "going",
    "detect",
    "example",
    "see",
    "many",
    "ducks",
    "birds",
    "background",
    "according",
    "criteria",
    "thoughts",
    "think",
    "ducks",
    "right",
    "like",
    "type",
    "bird",
    "duck",
    "going",
    "annotate",
    "like",
    "something",
    "really",
    "see",
    "something",
    "going",
    "annotate",
    "either",
    "pretty",
    "much",
    "yeah",
    "pretty",
    "much",
    "going",
    "continue",
    "cases",
    "also",
    "going",
    "find",
    "lot",
    "objects",
    "right",
    "example",
    "like",
    "usually",
    "annotating",
    "data",
    "different",
    "bounding",
    "box",
    "different",
    "objects",
    "right",
    "like",
    "seen",
    "annotation",
    "criteria",
    "drawing",
    "huge",
    "bounding",
    "box",
    "enclosing",
    "absolutely",
    "objects",
    "objects",
    "together",
    "right",
    "start",
    "like",
    "lot",
    "objects",
    "close",
    "together",
    "something",
    "like",
    "seen",
    "criteria",
    "involve",
    "drawing",
    "huge",
    "bounding",
    "box",
    "enclosing",
    "everything",
    "right",
    "something",
    "like",
    "like",
    "like",
    "right",
    "basically",
    "telling",
    "object",
    "detector",
    "everything",
    "duck",
    "everything",
    "duck",
    "right",
    "potentially",
    "could",
    "okay",
    "decide",
    "annotate",
    "images",
    "like",
    "making",
    "predictions",
    "making",
    "inferences",
    "cases",
    "producing",
    "one",
    "bounding",
    "box",
    "encloses",
    "lot",
    "objects",
    "right",
    "depends",
    "project",
    "depends",
    "exactly",
    "trying",
    "achieve",
    "case",
    "really",
    "like",
    "different",
    "bounding",
    "boxes",
    "different",
    "objects",
    "takes",
    "much",
    "time",
    "annotate",
    "results",
    "much",
    "better",
    "perspective",
    "type",
    "projects",
    "usually",
    "work",
    "like",
    "different",
    "bounding",
    "box",
    "different",
    "objects",
    "right",
    "going",
    "keep",
    "annotating",
    "image",
    "going",
    "pause",
    "going",
    "resume",
    "video",
    "something",
    "interesting",
    "show",
    "another",
    "interesting",
    "thing",
    "see",
    "two",
    "ducks",
    "well",
    "defined",
    "everything",
    "perfect",
    "already",
    "drawn",
    "bonding",
    "box",
    "around",
    "one",
    "also",
    "structure",
    "honest",
    "really",
    "know",
    "duck",
    "perhaps",
    "duck",
    "perhaps",
    "like",
    "something",
    "water",
    "right",
    "think",
    "completely",
    "sure",
    "cases",
    "need",
    "criteria",
    "need",
    "decide",
    "going",
    "going",
    "tell",
    "object",
    "detector",
    "object",
    "duck",
    "going",
    "teach",
    "object",
    "detector",
    "type",
    "structure",
    "duck",
    "object",
    "trying",
    "detect",
    "something",
    "need",
    "ask",
    "object",
    "trying",
    "detect",
    "go",
    "ahead",
    "annotate",
    "case",
    "criteria",
    "type",
    "situations",
    "annotate",
    "right",
    "100",
    "sure",
    "object",
    "interested",
    "annotate",
    "remember",
    "going",
    "lot",
    "data",
    "going",
    "hundred",
    "images",
    "thousand",
    "images",
    "images",
    "going",
    "lot",
    "objects",
    "hopefully",
    "objects",
    "like",
    "vast",
    "majority",
    "going",
    "well",
    "defined",
    "like",
    "objects",
    "really",
    "sure",
    "going",
    "big",
    "deal",
    "annotate",
    "nothing",
    "happens",
    "yeah",
    "also",
    "criteria",
    "situation",
    "pretty",
    "much",
    "let",
    "show",
    "something",
    "else",
    "showing",
    "download",
    "data",
    "right",
    "done",
    "annotating",
    "data",
    "images",
    "remember",
    "going",
    "click",
    "save",
    "going",
    "save",
    "changes",
    "thing",
    "need",
    "go",
    "tasks",
    "going",
    "select",
    "task",
    "annotated",
    "thing",
    "need",
    "export",
    "annotations",
    "going",
    "select",
    "format",
    "yolo",
    "click",
    "okay",
    "could",
    "also",
    "save",
    "images",
    "uploaded",
    "images",
    "guess",
    "make",
    "sense",
    "download",
    "images",
    "right",
    "want",
    "download",
    "images",
    "click",
    "click",
    "click",
    "okay",
    "going",
    "take",
    "time",
    "eventually",
    "going",
    "download",
    "data",
    "okay",
    "export",
    "finished",
    "thing",
    "need",
    "click",
    "download",
    "okay",
    "going",
    "download",
    "annotations",
    "like",
    "okay",
    "let",
    "move",
    "next",
    "step",
    "process",
    "preparing",
    "data",
    "exact",
    "format",
    "need",
    "train",
    "object",
    "detector",
    "let",
    "show",
    "let",
    "go",
    "back",
    "directory",
    "created",
    "project",
    "let",
    "show",
    "something",
    "need",
    "structure",
    "data",
    "order",
    "able",
    "train",
    "object",
    "detector",
    "location",
    "files",
    "images",
    "labels",
    "also",
    "directories",
    "need",
    "create",
    "order",
    "locate",
    "files",
    "let",
    "show",
    "see",
    "two",
    "directories",
    "one",
    "called",
    "images",
    "one",
    "called",
    "labels",
    "going",
    "open",
    "images",
    "directory",
    "see",
    "two",
    "additional",
    "directories",
    "one",
    "called",
    "train",
    "one",
    "called",
    "val",
    "open",
    "train",
    "directory",
    "training",
    "images",
    "right",
    "500",
    "training",
    "images",
    "going",
    "use",
    "process",
    "open",
    "val",
    "directory",
    "see",
    "also",
    "images",
    "validation",
    "images",
    "images",
    "going",
    "use",
    "order",
    "validate",
    "training",
    "process",
    "two",
    "directories",
    "go",
    "back",
    "open",
    "labels",
    "directory",
    "see",
    "exactly",
    "structure",
    "two",
    "folders",
    "one",
    "called",
    "train",
    "called",
    "val",
    "train",
    "labels",
    "annotations",
    "training",
    "images",
    "val",
    "annotations",
    "validation",
    "images",
    "something",
    "important",
    "seems",
    "like",
    "detail",
    "actually",
    "important",
    "names",
    "directories",
    "order",
    "save",
    "time",
    "order",
    "make",
    "sure",
    "everything",
    "works",
    "expected",
    "make",
    "sure",
    "name",
    "everything",
    "exactly",
    "showing",
    "avoid",
    "potential",
    "issue",
    "training",
    "process",
    "make",
    "sure",
    "everything",
    "named",
    "exactly",
    "showing",
    "images",
    "labels",
    "one",
    "called",
    "train",
    "one",
    "called",
    "val",
    "later",
    "show",
    "training",
    "process",
    "going",
    "show",
    "file",
    "configuration",
    "file",
    "file",
    "paths",
    "location",
    "data",
    "images",
    "long",
    "name",
    "everything",
    "exactly",
    "showing",
    "everything",
    "work",
    "expected",
    "right",
    "let",
    "show",
    "something",
    "else",
    "open",
    "images",
    "directory",
    "open",
    "training",
    "images",
    "going",
    "labels",
    "directory",
    "training",
    "labels",
    "see",
    "every",
    "single",
    "one",
    "images",
    "directory",
    "order",
    "everything",
    "like",
    "okay",
    "see",
    "every",
    "single",
    "one",
    "files",
    "given",
    "name",
    "given",
    "id",
    "extension",
    "jpg",
    "go",
    "annotations",
    "directory",
    "see",
    "file",
    "names",
    "exactly",
    "different",
    "extension",
    "right",
    "see",
    "file",
    "names",
    "exactly",
    "referring",
    "id",
    "id",
    "right",
    "id",
    "exactly",
    "id",
    "difference",
    "two",
    "file",
    "names",
    "extension",
    "right",
    "see",
    "exactly",
    "absolutely",
    "every",
    "single",
    "file",
    "file",
    "contains",
    "annotations",
    "bounding",
    "boxes",
    "image",
    "also",
    "important",
    "data",
    "set",
    "works",
    "going",
    "help",
    "lot",
    "understand",
    "exactly",
    "going",
    "understand",
    "exactly",
    "training",
    "process",
    "going",
    "help",
    "lot",
    "know",
    "data",
    "familiar",
    "dataset",
    "also",
    "going",
    "help",
    "solve",
    "whatever",
    "issue",
    "may",
    "arise",
    "training",
    "object",
    "detector",
    "annotations",
    "see",
    "annotations",
    "given",
    "format",
    "yolo",
    "format",
    "first",
    "number",
    "class",
    "id",
    "case",
    "one",
    "class",
    "dataset",
    "duck",
    "case",
    "number",
    "always",
    "going",
    "zero",
    "case",
    "depends",
    "number",
    "classes",
    "dataset",
    "location",
    "bounding",
    "box",
    "first",
    "two",
    "numbers",
    "x",
    "coordinates",
    "center",
    "bounding",
    "box",
    "width",
    "height",
    "bounding",
    "box",
    "see",
    "everything",
    "given",
    "relative",
    "coordinates",
    "number",
    "number",
    "divided",
    "image",
    "width",
    "number",
    "number",
    "divided",
    "image",
    "height",
    "right",
    "relative",
    "coordinates",
    "show",
    "super",
    "quickly",
    "annotations",
    "look",
    "like",
    "also",
    "show",
    "need",
    "structure",
    "dataset",
    "need",
    "need",
    "locate",
    "files",
    "order",
    "make",
    "training",
    "process",
    "work",
    "expected",
    "let",
    "move",
    "training",
    "process",
    "fun",
    "part",
    "tutorial",
    "time",
    "train",
    "object",
    "detector",
    "let",
    "show",
    "going",
    "show",
    "train",
    "object",
    "detector",
    "computer",
    "also",
    "going",
    "show",
    "train",
    "google",
    "collab",
    "let",
    "get",
    "started",
    "google",
    "collab",
    "first",
    "thing",
    "need",
    "create",
    "zip",
    "file",
    "directory",
    "right",
    "remember",
    "data",
    "directory",
    "located",
    "data",
    "thing",
    "going",
    "zip",
    "entire",
    "directory",
    "going",
    "compress",
    "entire",
    "directory",
    "case",
    "already",
    "done",
    "file",
    "see",
    "called",
    "case",
    "please",
    "remember",
    "continue",
    "tutorial",
    "compressed",
    "entire",
    "directory",
    "created",
    "file",
    "thing",
    "need",
    "upload",
    "file",
    "directory",
    "google",
    "drive",
    "directory",
    "created",
    "google",
    "drive",
    "called",
    "yolo",
    "10",
    "object",
    "detection",
    "full",
    "guide",
    "see",
    "file",
    "showing",
    "need",
    "next",
    "please",
    "remember",
    "upload",
    "file",
    "directory",
    "google",
    "drive",
    "order",
    "train",
    "model",
    "going",
    "follow",
    "instructions",
    "given",
    "google",
    "collab",
    "right",
    "jupiter",
    "notebook",
    "actually",
    "thing",
    "going",
    "execute",
    "one",
    "cells",
    "one",
    "time",
    "going",
    "take",
    "care",
    "entire",
    "training",
    "process",
    "let",
    "show",
    "first",
    "cell",
    "going",
    "connect",
    "google",
    "collab",
    "google",
    "drive",
    "going",
    "select",
    "account",
    "continue",
    "continue",
    "pretty",
    "much",
    "okay",
    "connected",
    "google",
    "drive",
    "google",
    "colab",
    "thing",
    "need",
    "next",
    "execute",
    "cell",
    "going",
    "copy",
    "file",
    "uploaded",
    "google",
    "colab",
    "environment",
    "thing",
    "going",
    "press",
    "enter",
    "see",
    "going",
    "copy",
    "entire",
    "data",
    "also",
    "going",
    "uncompress",
    "file",
    "see",
    "already",
    "uncompressed",
    "data",
    "google",
    "colab",
    "environment",
    "let",
    "continue",
    "next",
    "step",
    "process",
    "install",
    "required",
    "packages",
    "thing",
    "going",
    "clone",
    "directory",
    "clone",
    "repository",
    "yolo",
    "10",
    "official",
    "repository",
    "going",
    "install",
    "required",
    "packages",
    "like",
    "right",
    "going",
    "cd",
    "directory",
    "going",
    "pip",
    "install",
    "entire",
    "repository",
    "thing",
    "going",
    "press",
    "enter",
    "going",
    "take",
    "care",
    "entire",
    "process",
    "okay",
    "everything",
    "seems",
    "ready",
    "continue",
    "important",
    "part",
    "process",
    "going",
    "train",
    "object",
    "detector",
    "see",
    "thing",
    "couple",
    "imports",
    "importing",
    "os",
    "importing",
    "library",
    "importing",
    "yolov10",
    "see",
    "path",
    "path",
    "configuration",
    "file",
    "let",
    "show",
    "configuration",
    "file",
    "looks",
    "like",
    "open",
    "file",
    "see",
    "three",
    "keys",
    "one",
    "location",
    "root",
    "directory",
    "dataset",
    "two",
    "keys",
    "related",
    "training",
    "images",
    "located",
    "validation",
    "images",
    "located",
    "told",
    "long",
    "name",
    "directories",
    "exactly",
    "showed",
    "tutorial",
    "use",
    "exactly",
    "configuration",
    "file",
    "everything",
    "work",
    "expected",
    "four",
    "classes",
    "remember",
    "class",
    "going",
    "use",
    "dataset",
    "going",
    "train",
    "object",
    "detector",
    "detect",
    "one",
    "class",
    "duck",
    "case",
    "looks",
    "like",
    "pretty",
    "much",
    "file",
    "google",
    "drive",
    "thing",
    "need",
    "press",
    "enter",
    "going",
    "train",
    "yolov10",
    "model",
    "weights",
    "going",
    "train",
    "model",
    "200",
    "epochs",
    "going",
    "take",
    "time",
    "going",
    "pause",
    "recording",
    "going",
    "resume",
    "recording",
    "training",
    "process",
    "completed",
    "okay",
    "training",
    "process",
    "done",
    "let",
    "show",
    "download",
    "results",
    "training",
    "process",
    "see",
    "results",
    "saved",
    "directory",
    "let",
    "show",
    "download",
    "results",
    "local",
    "computer",
    "going",
    "execute",
    "cell",
    "says",
    "download",
    "results",
    "going",
    "take",
    "care",
    "downloading",
    "results",
    "see",
    "error",
    "sure",
    "error",
    "happens",
    "encounter",
    "similar",
    "error",
    "train",
    "model",
    "thing",
    "need",
    "restart",
    "session",
    "need",
    "press",
    "enter",
    "going",
    "fix",
    "issue",
    "basically",
    "compressing",
    "entire",
    "runs",
    "directory",
    "creating",
    "file",
    "runs",
    "zip",
    "downloading",
    "file",
    "running",
    "command",
    "see",
    "progress",
    "done",
    "going",
    "download",
    "file",
    "local",
    "computer",
    "okay",
    "going",
    "download",
    "file",
    "desktop",
    "going",
    "open",
    "file",
    "like",
    "see",
    "lot",
    "directories",
    "results",
    "training",
    "process",
    "weights",
    "saved",
    "see",
    "two",
    "files",
    "results",
    "train",
    "model",
    "using",
    "google",
    "colab",
    "remember",
    "told",
    "also",
    "going",
    "show",
    "train",
    "model",
    "using",
    "local",
    "computer",
    "let",
    "go",
    "pycharm",
    "going",
    "show",
    "locally",
    "computer",
    "going",
    "exactly",
    "process",
    "google",
    "collab",
    "first",
    "thing",
    "need",
    "create",
    "new",
    "virtual",
    "environment",
    "obviously",
    "always",
    "good",
    "practice",
    "working",
    "python",
    "see",
    "already",
    "created",
    "virtual",
    "environment",
    "case",
    "created",
    "virtual",
    "environment",
    "using",
    "python",
    "case",
    "use",
    "pretty",
    "much",
    "version",
    "python",
    "3",
    "mistaken",
    "pretty",
    "much",
    "version",
    "well",
    "created",
    "virtual",
    "environment",
    "need",
    "clone",
    "yolov10",
    "official",
    "repository",
    "executing",
    "command",
    "referring",
    "repository",
    "yolov10",
    "repository",
    "see",
    "already",
    "cloned",
    "repository",
    "thing",
    "need",
    "cd",
    "repository",
    "something",
    "like",
    "cd",
    "yolov10",
    "okay",
    "need",
    "install",
    "requirements",
    "pip",
    "install",
    "character",
    "pip",
    "install",
    "like",
    "press",
    "enter",
    "case",
    "nothing",
    "going",
    "happen",
    "already",
    "installed",
    "packages",
    "case",
    "please",
    "remember",
    "otherwise",
    "nothing",
    "going",
    "work",
    "let",
    "continue",
    "everything",
    "installed",
    "everything",
    "okay",
    "thing",
    "need",
    "execute",
    "code",
    "see",
    "file",
    "called",
    "instructions",
    "need",
    "execute",
    "order",
    "train",
    "yolo",
    "10",
    "local",
    "computer",
    "see",
    "exactly",
    "code",
    "showed",
    "exactly",
    "code",
    "difference",
    "location",
    "configuration",
    "file",
    "going",
    "located",
    "everything",
    "else",
    "exactly",
    "let",
    "show",
    "configuration",
    "file",
    "something",
    "different",
    "path",
    "data",
    "right",
    "path",
    "location",
    "data",
    "local",
    "computer",
    "copy",
    "value",
    "paste",
    "see",
    "current",
    "directory",
    "data",
    "located",
    "right",
    "going",
    "paste",
    "please",
    "remember",
    "update",
    "value",
    "whatever",
    "location",
    "data",
    "file",
    "system",
    "right",
    "absolute",
    "path",
    "dataset",
    "exactly",
    "also",
    "exactly",
    "thing",
    "going",
    "execute",
    "file",
    "going",
    "take",
    "care",
    "entire",
    "training",
    "process",
    "let",
    "see",
    "works",
    "okay",
    "small",
    "mistake",
    "actually",
    "pre",
    "trained",
    "like",
    "okay",
    "let",
    "see",
    "may",
    "need",
    "install",
    "package",
    "see",
    "error",
    "case",
    "similar",
    "error",
    "computer",
    "install",
    "may",
    "fix",
    "going",
    "run",
    "pip",
    "install",
    "safetensors",
    "going",
    "run",
    "file",
    "okay",
    "see",
    "everything",
    "going",
    "well",
    "training",
    "process",
    "started",
    "going",
    "train",
    "model",
    "already",
    "google",
    "collab",
    "show",
    "train",
    "model",
    "local",
    "computer",
    "let",
    "move",
    "let",
    "move",
    "next",
    "step",
    "process",
    "evaluating",
    "model",
    "trained",
    "important",
    "every",
    "time",
    "train",
    "computer",
    "vision",
    "model",
    "type",
    "machine",
    "learning",
    "model",
    "important",
    "evaluate",
    "training",
    "process",
    "let",
    "show",
    "going",
    "take",
    "results",
    "produced",
    "google",
    "collab",
    "thing",
    "going",
    "get",
    "directory",
    "going",
    "paste",
    "directory",
    "something",
    "like",
    "remember",
    "results",
    "training",
    "process",
    "google",
    "collab",
    "order",
    "evaluate",
    "training",
    "process",
    "going",
    "super",
    "quickly",
    "going",
    "minutes",
    "could",
    "spend",
    "hours",
    "analyzing",
    "training",
    "process",
    "could",
    "detailed",
    "evaluation",
    "going",
    "show",
    "easy",
    "way",
    "looking",
    "plots",
    "see",
    "basically",
    "make",
    "sure",
    "loss",
    "functions",
    "going",
    "increase",
    "number",
    "epochs",
    "see",
    "trained",
    "model",
    "200",
    "epochs",
    "something",
    "important",
    "every",
    "time",
    "train",
    "model",
    "loss",
    "function",
    "goes",
    "increase",
    "number",
    "epochs",
    "case",
    "many",
    "plots",
    "mistaken",
    "loss",
    "function",
    "care",
    "project",
    "evaluation",
    "one",
    "loss",
    "function",
    "related",
    "bounding",
    "box",
    "detection",
    "basically",
    "long",
    "story",
    "short",
    "want",
    "like",
    "quick",
    "way",
    "analyze",
    "working",
    "well",
    "make",
    "sure",
    "loss",
    "function",
    "going",
    "increase",
    "number",
    "epochs",
    "loss",
    "function",
    "going",
    "likely",
    "everything",
    "going",
    "well",
    "guarantee",
    "mean",
    "everything",
    "could",
    "happen",
    "maybe",
    "loss",
    "function",
    "going",
    "training",
    "good",
    "model",
    "could",
    "happen",
    "least",
    "need",
    "make",
    "sure",
    "loss",
    "function",
    "going",
    "loss",
    "function",
    "going",
    "tell",
    "sure",
    "something",
    "wrong",
    "project",
    "tell",
    "sure",
    "without",
    "doubt",
    "whatsoever",
    "made",
    "something",
    "amazingly",
    "wrong",
    "training",
    "process",
    "loss",
    "function",
    "going",
    "loss",
    "function",
    "going",
    "something",
    "amazingly",
    "wrong",
    "right",
    "least",
    "need",
    "make",
    "sure",
    "loss",
    "function",
    "going",
    "increase",
    "number",
    "epochs",
    "also",
    "take",
    "look",
    "plots",
    "related",
    "accuracy",
    "performance",
    "object",
    "detector",
    "plots",
    "need",
    "make",
    "sure",
    "going",
    "increase",
    "number",
    "epochs",
    "quick",
    "evaluation",
    "dummy",
    "evaluation",
    "trust",
    "type",
    "evaluation",
    "going",
    "take",
    "far",
    "looking",
    "loss",
    "function",
    "looking",
    "plots",
    "related",
    "performance",
    "going",
    "able",
    "know",
    "lot",
    "performance",
    "object",
    "detector",
    "another",
    "way",
    "evaluate",
    "going",
    "object",
    "detector",
    "another",
    "way",
    "evaluate",
    "training",
    "process",
    "see",
    "performs",
    "examples",
    "going",
    "files",
    "see",
    "called",
    "val",
    "batch",
    "zero",
    "labels",
    "val",
    "batch",
    "zero",
    "pred",
    "also",
    "files",
    "val",
    "batch",
    "one",
    "labels",
    "val",
    "batch",
    "one",
    "pred",
    "may",
    "even",
    "files",
    "basically",
    "files",
    "going",
    "tell",
    "models",
    "performs",
    "specific",
    "images",
    "validation",
    "set",
    "see",
    "looking",
    "ground",
    "truth",
    "annotations",
    "labels",
    "show",
    "image",
    "predictions",
    "got",
    "object",
    "detector",
    "right",
    "ground",
    "truth",
    "performance",
    "object",
    "detector",
    "see",
    "basically",
    "performs",
    "pretty",
    "well",
    "would",
    "say",
    "perfect",
    "would",
    "say",
    "performs",
    "well",
    "miss",
    "detections",
    "duck",
    "detecting",
    "also",
    "another",
    "miss",
    "detection",
    "detecting",
    "duck",
    "also",
    "ducks",
    "small",
    "nevertheless",
    "able",
    "detect",
    "detecting",
    "object",
    "detector",
    "let",
    "take",
    "look",
    "examples",
    "see",
    "case",
    "detecting",
    "ducks",
    "actually",
    "ducks",
    "penguins",
    "validation",
    "data",
    "downloaded",
    "yeah",
    "think",
    "ducks",
    "matter",
    "detecting",
    "two",
    "birds",
    "seems",
    "detecting",
    "two",
    "ducks",
    "right",
    "also",
    "miss",
    "detection",
    "detecting",
    "something",
    "duck",
    "duck",
    "right",
    "detecting",
    "like",
    "entire",
    "structure",
    "duck",
    "duck",
    "one",
    "think",
    "also",
    "type",
    "bird",
    "think",
    "duck",
    "either",
    "matter",
    "validation",
    "data",
    "used",
    "validate",
    "training",
    "process",
    "quick",
    "evaluation",
    "conclusion",
    "object",
    "detector",
    "performs",
    "well",
    "perfect",
    "next",
    "step",
    "process",
    "train",
    "powerful",
    "model",
    "right",
    "training",
    "object",
    "detector",
    "always",
    "ongoing",
    "process",
    "need",
    "go",
    "steps",
    "evaluate",
    "training",
    "process",
    "satisfied",
    "performance",
    "object",
    "detector",
    "go",
    "back",
    "data",
    "preparation",
    "data",
    "annotation",
    "data",
    "collection",
    "whatever",
    "trying",
    "understand",
    "exactly",
    "going",
    "object",
    "detector",
    "trying",
    "decide",
    "going",
    "different",
    "next",
    "time",
    "right",
    "perhaps",
    "going",
    "changes",
    "images",
    "used",
    "train",
    "model",
    "perhaps",
    "going",
    "changes",
    "annotations",
    "way",
    "annotated",
    "data",
    "remember",
    "walking",
    "annotation",
    "process",
    "told",
    "need",
    "criteria",
    "order",
    "annotation",
    "process",
    "order",
    "annotate",
    "images",
    "different",
    "criteria",
    "going",
    "produce",
    "different",
    "annotations",
    "going",
    "decide",
    "changes",
    "going",
    "next",
    "time",
    "train",
    "model",
    "one",
    "changes",
    "could",
    "annotation",
    "criteria",
    "could",
    "try",
    "annotating",
    "data",
    "differently",
    "right",
    "training",
    "object",
    "detector",
    "easy",
    "thing",
    "actually",
    "mean",
    "looking",
    "perfect",
    "results",
    "training",
    "object",
    "detector",
    "easy",
    "need",
    "think",
    "ongoing",
    "process",
    "need",
    "iterate",
    "steps",
    "happy",
    "results",
    "like",
    "youtube",
    "video",
    "show",
    "iteration",
    "works",
    "prepare",
    "data",
    "train",
    "model",
    "youtube",
    "video",
    "really",
    "want",
    "go",
    "much",
    "deep",
    "creation",
    "object",
    "detector",
    "want",
    "take",
    "computer",
    "vision",
    "skills",
    "next",
    "level",
    "invite",
    "take",
    "look",
    "computer",
    "vision",
    "school",
    "one",
    "products",
    "show",
    "create",
    "ai",
    "prototypes",
    "school",
    "walk",
    "creation",
    "computer",
    "vision",
    "based",
    "mvps",
    "say",
    "mvps",
    "mean",
    "minimum",
    "viable",
    "products",
    "one",
    "projects",
    "involves",
    "creation",
    "entire",
    "product",
    "entire",
    "minimum",
    "viable",
    "product",
    "product",
    "least",
    "really",
    "want",
    "know",
    "train",
    "object",
    "detector",
    "could",
    "potentially",
    "use",
    "production",
    "environment",
    "real",
    "project",
    "definitely",
    "invite",
    "take",
    "look",
    "computer",
    "vision",
    "school",
    "take",
    "look",
    "memberships",
    "choose",
    "membership",
    "like",
    "let",
    "continue",
    "project",
    "going",
    "show",
    "make",
    "predictions",
    "model",
    "trained",
    "let",
    "show",
    "make",
    "predictions",
    "let",
    "go",
    "back",
    "py",
    "charm",
    "let",
    "show",
    "script",
    "called",
    "script",
    "using",
    "order",
    "make",
    "inferences",
    "video",
    "going",
    "make",
    "inferences",
    "frames",
    "video",
    "going",
    "draw",
    "bounding",
    "boxes",
    "objects",
    "detect",
    "video",
    "let",
    "show",
    "script",
    "works",
    "basically",
    "creating",
    "new",
    "model",
    "yolov10",
    "see",
    "importing",
    "ultralytics",
    "import",
    "yolo",
    "v10",
    "yolo",
    "creating",
    "new",
    "model",
    "like",
    "specifying",
    "location",
    "model",
    "weights",
    "going",
    "use",
    "order",
    "make",
    "inferences",
    "remember",
    "copied",
    "entire",
    "runs",
    "directory",
    "go",
    "runs",
    "detect",
    "train",
    "weights",
    "weights",
    "produced",
    "training",
    "process",
    "location",
    "runs",
    "detect",
    "train",
    "weights",
    "quick",
    "comment",
    "regarding",
    "two",
    "files",
    "see",
    "means",
    "best",
    "model",
    "produced",
    "entire",
    "training",
    "process",
    "model",
    "produced",
    "end",
    "training",
    "process",
    "different",
    "criteria",
    "choose",
    "either",
    "best",
    "model",
    "mean",
    "best",
    "model",
    "entire",
    "training",
    "process",
    "last",
    "model",
    "one",
    "produced",
    "end",
    "training",
    "process",
    "criteria",
    "usually",
    "taking",
    "last",
    "model",
    "going",
    "use",
    "exactly",
    "location",
    "model",
    "weights",
    "let",
    "continue",
    "thing",
    "loading",
    "video",
    "located",
    "let",
    "show",
    "video",
    "going",
    "use",
    "example",
    "going",
    "use",
    "video",
    "duck",
    "nothing",
    "right",
    "video",
    "going",
    "use",
    "example",
    "going",
    "save",
    "results",
    "basically",
    "defining",
    "variables",
    "creating",
    "object",
    "going",
    "use",
    "order",
    "produce",
    "output",
    "right",
    "produce",
    "video",
    "going",
    "save",
    "thing",
    "iterating",
    "frames",
    "video",
    "one",
    "frames",
    "applying",
    "object",
    "detector",
    "iterating",
    "results",
    "get",
    "object",
    "detector",
    "one",
    "results",
    "confidence",
    "score",
    "greater",
    "drawing",
    "bounding",
    "box",
    "around",
    "object",
    "detected",
    "pretty",
    "much",
    "save",
    "frame",
    "video",
    "going",
    "save",
    "end",
    "process",
    "pretty",
    "much",
    "simple",
    "process",
    "thing",
    "going",
    "frames",
    "detecting",
    "objects",
    "saving",
    "result",
    "let",
    "show",
    "result",
    "looks",
    "like",
    "going",
    "run",
    "video",
    "going",
    "take",
    "minutes",
    "going",
    "resume",
    "recording",
    "done",
    "okay",
    "everything",
    "completed",
    "see",
    "video",
    "saved",
    "let",
    "see",
    "video",
    "produced",
    "duck",
    "seeing",
    "bounding",
    "boxes",
    "drawn",
    "top",
    "basically",
    "regarding",
    "performance",
    "object",
    "detector",
    "see",
    "something",
    "similar",
    "evaluation",
    "evaluating",
    "training",
    "process",
    "results",
    "okay",
    "perfect",
    "right",
    "miss",
    "detections",
    "detections",
    "correct",
    "example",
    "detecting",
    "something",
    "nothing",
    "referring",
    "right",
    "see",
    "bonding",
    "box",
    "really",
    "duck",
    "whatsoever",
    "object",
    "detector",
    "performing",
    "okay",
    "perfect",
    "order",
    "make",
    "perfect",
    "would",
    "need",
    "iterate",
    "would",
    "need",
    "improve",
    "data",
    "improve",
    "annotations",
    "would",
    "need",
    "going",
    "video",
    "exactly",
    "train",
    "object",
    "detector",
    "using",
    "yolov10",
    "custom",
    "data",
    "entire",
    "process",
    "train",
    "object",
    "detector",
    "remember",
    "take",
    "look",
    "computer",
    "vision",
    "school",
    "want",
    "take",
    "object",
    "detection",
    "skills",
    "next",
    "level",
    "want",
    "take",
    "computer",
    "vision",
    "skills",
    "next",
    "level",
    "please",
    "remember",
    "take",
    "look",
    "computer",
    "vision",
    "school",
    "going",
    "learn",
    "oh",
    "god",
    "going",
    "learn",
    "much",
    "computer",
    "vision",
    "making",
    "products",
    "right",
    "going",
    "learn",
    "make",
    "mvps",
    "stands",
    "minimum",
    "valuable",
    "products",
    "completely",
    "different",
    "teaching",
    "style",
    "going",
    "teach",
    "much",
    "valuable",
    "skills",
    "going",
    "video",
    "see",
    "next",
    "video"
  ],
  "keywords": [
    "name",
    "video",
    "going",
    "show",
    "train",
    "object",
    "detector",
    "using",
    "data",
    "yolo",
    "entire",
    "process",
    "annotation",
    "model",
    "local",
    "computer",
    "google",
    "collab",
    "100",
    "also",
    "evaluate",
    "trained",
    "make",
    "tutorial",
    "let",
    "use",
    "detect",
    "ducks",
    "see",
    "many",
    "different",
    "images",
    "right",
    "first",
    "thing",
    "need",
    "good",
    "know",
    "work",
    "vision",
    "would",
    "tell",
    "something",
    "like",
    "lot",
    "order",
    "project",
    "perhaps",
    "another",
    "regarding",
    "sure",
    "diverse",
    "dataset",
    "one",
    "background",
    "every",
    "type",
    "everything",
    "important",
    "remember",
    "training",
    "detection",
    "structure",
    "want",
    "help",
    "exactly",
    "objects",
    "always",
    "example",
    "may",
    "given",
    "case",
    "already",
    "whatever",
    "download",
    "open",
    "go",
    "click",
    "continue",
    "next",
    "step",
    "located",
    "annotate",
    "time",
    "create",
    "new",
    "duck",
    "okay",
    "created",
    "works",
    "really",
    "select",
    "files",
    "take",
    "bounding",
    "box",
    "annotations",
    "boxes",
    "two",
    "press",
    "perfect",
    "think",
    "easy",
    "cases",
    "well",
    "criteria",
    "huge",
    "much",
    "mean",
    "pretty",
    "basically",
    "could",
    "results",
    "save",
    "directory",
    "location",
    "labels",
    "directories",
    "called",
    "val",
    "validation",
    "file",
    "configuration",
    "id",
    "number",
    "look",
    "drive",
    "execute",
    "environment",
    "install",
    "repository",
    "yolov10",
    "weights",
    "epochs",
    "produced",
    "evaluation",
    "loss",
    "function",
    "performance",
    "detecting"
  ]
}